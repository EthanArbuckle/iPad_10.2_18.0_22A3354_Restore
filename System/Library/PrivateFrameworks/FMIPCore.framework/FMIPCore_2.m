uint64_t sub_1CCADA704()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t FMIPAccessoryDiscoveryController.__allocating_init(discoveryType:)(unsigned __int8 *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  FMIPAccessoryDiscoveryController.init(discoveryType:)(a1);
  return v2;
}

uint64_t FMIPAccessoryDiscoveryController.init(discoveryType:)(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = sub_1CCB63D84();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63D6C();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v8);
  v10 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v10);
  HIDWORD(v18) = *a1;
  sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A8E30);
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  sub_1CCB63844();
  v19 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, v9, MEMORY[0x1E0DEF828]);
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCADA9F4();
  sub_1CCB63E98();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF8D0], v4);
  *(_QWORD *)(v1 + 64) = sub_1CCB63DB4();
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = MEMORY[0x1E0DEE9E8];
  v11 = objc_allocWithZone(MEMORY[0x1E0D898A0]);
  sub_1CC9C30A8(0, &qword_1EF9E3AB0);
  sub_1CCADAA40();
  v12 = (void *)sub_1CCB63C34();
  v13 = objc_msgSend(v11, sel_initWithAccessories_, v12);

  *(_BYTE *)(v2 + 72) = BYTE4(v18);
  v14 = v13;
  v15 = sub_1CCADD664((uint64_t)v13);

  v16 = *(void **)(v2 + 80);
  *(_QWORD *)(v2 + 80) = v15;

  return v2;
}

unint64_t sub_1CCADA9F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED8AA360;
  if (!qword_1ED8AA360)
  {
    v1 = sub_1CCA19B38((uint64_t *)&unk_1ED8AA350);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED8AA360);
  }
  return result;
}

unint64_t sub_1CCADAA40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF9E3AB8;
  if (!qword_1EF9E3AB8)
  {
    v1 = sub_1CC9C30A8(255, &qword_1EF9E3AB0);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EF9E3AB8);
  }
  return result;
}

void *FMIPAccessoryDiscoveryController.deinit()
{
  uint64_t v0;
  void *result;
  uint64_t v2;
  uint64_t v3;

  result = *(void **)(v0 + 80);
  if (result)
  {
    objc_msgSend(result, sel_stop);
    v2 = *(_QWORD *)(v0 + 32);
    v3 = *(_QWORD *)(v0 + 48);
    sub_1CCA203A8(*(_QWORD *)(v0 + 16));
    sub_1CCA203A8(v2);
    sub_1CCA203A8(v3);

    swift_bridgeObjectRelease();
    return (void *)v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *FMIPAccessoryDiscoveryController.__deallocating_deinit()
{
  uint64_t v0;
  void *result;
  uint64_t v2;
  uint64_t v3;

  result = *(void **)(v0 + 80);
  if (result)
  {
    objc_msgSend(result, sel_stop);
    v2 = *(_QWORD *)(v0 + 32);
    v3 = *(_QWORD *)(v0 + 48);
    sub_1CCA203A8(*(_QWORD *)(v0 + 16));
    sub_1CCA203A8(v2);
    sub_1CCA203A8(v3);

    swift_bridgeObjectRelease();
    return (void *)swift_deallocClassInstance();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1CCADABA8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  os_log_type_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  NSObject *oslog;
  uint64_t aBlock;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD *v31;

  if ((*(_BYTE *)(v3 + 88) & 1) == 0)
  {
    v10 = *(NSObject **)(v3 + 64);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = sub_1CCADD844;
    *(_QWORD *)(v11 + 24) = v3;
    v30 = sub_1CC9F44EC;
    v31 = (_QWORD *)v11;
    v12 = MEMORY[0x1E0C809B0];
    aBlock = MEMORY[0x1E0C809B0];
    v27 = 1107296256;
    v28 = sub_1CC9F44AC;
    v29 = &unk_1E88FAD90;
    v13 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v10, v13);
    _Block_release(v13);
    LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v10 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v14 = sub_1CCB63D48();
      if ((a1 & 1) == 0)
      {
        sub_1CCADEA64(v14, 0xD000000000000027, 0x80000001CCB7C9F0);
        v20 = *(void **)(v3 + 80);
        if (v20)
        {
          v21 = swift_allocObject();
          swift_weakInit();
          v22 = (_QWORD *)swift_allocObject();
          v22[2] = v21;
          v22[3] = a2;
          v22[4] = a3;
          v30 = sub_1CCADDC00;
          v31 = v22;
          aBlock = v12;
          v27 = 1107296256;
          v28 = sub_1CCA1F54C;
          v29 = &unk_1E88FAE08;
          v23 = _Block_copy(&aBlock);
          sub_1CC9DF994(a2);
          v24 = v20;
          swift_release();
          objc_msgSend(v24, sel_startAccessoryDiscoveryWithCompletion_, v23);
          _Block_release(v23);
          swift_release();

          return;
        }
        goto LABEL_15;
      }
      sub_1CCADEA64(v14, 0xD000000000000036, 0x80000001CCB7C940);
      v15 = *(void **)(v3 + 80);
      if (v15)
      {
        v16 = swift_allocObject();
        swift_weakInit();
        v17 = (_QWORD *)swift_allocObject();
        v17[2] = v16;
        v17[3] = a2;
        v17[4] = a3;
        v30 = sub_1CCADDC10;
        v31 = v17;
        aBlock = v12;
        v27 = 1107296256;
        v28 = sub_1CCA1F54C;
        v29 = &unk_1E88FAE58;
        v18 = _Block_copy(&aBlock);
        v19 = v15;
        sub_1CC9DF994(a2);
        swift_release();
        objc_msgSend(v19, sel_startLocalFindableAccessoryDiscoveryWithCompletion_, v18);
        _Block_release(v18);
        swift_release();

        return;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  if (qword_1ED8AA630 != -1)
    swift_once();
  v4 = sub_1CCB637FC();
  sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
  oslog = sub_1CCB637D8();
  v5 = sub_1CCB63D48();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1CC9BF000, oslog, v5, "FMIPAccessoryDiscoveryController: Tried to start new session while the old one is still running, aborting.", v6, 2u);
    MEMORY[0x1D17B214C](v6, -1, -1);
  }

}

uint64_t sub_1CCADAF7C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  void (*v4)(uint64_t);
  uint64_t v5;

  v2 = (_QWORD *)(a1 + 96);
  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16))
  {
    swift_beginAccess();
    v4 = *(void (**)(uint64_t))(a1 + 32);
    if (v4)
    {
      sub_1CC9DF994((uint64_t)v4);
      v5 = swift_bridgeObjectRetain();
      v4(v5);
      sub_1CCA203A8((uint64_t)v4);
      swift_bridgeObjectRelease();
    }
    *v2 = MEMORY[0x1E0DEE9E8];
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1CCADB02C(void *a1, uint64_t a2, void (*a3)(id *))
{
  uint64_t Strong;
  uint64_t v6;
  id v7;
  os_log_type_t v8;
  id v9;
  id v10;
  unsigned __int8 v11;
  os_log_type_t v12;
  void (*v13)(void **);
  id v14;
  void *v15;
  unsigned __int8 v16;
  os_log_type_t v17;
  id v18;
  unsigned __int8 v19;
  char v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t v23;
  __int16 v24;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v6 = Strong;
    if (a1)
    {
      v7 = a1;
      v8 = sub_1CCB63D30();
      sub_1CCADE854(v8);
      LOBYTE(v23) = *(_BYTE *)(v6 + 72);
      v9 = a1;
      FMIPAccessoryError.init(underlyingError:discoveryType:)(a1, (char *)&v23, (uint64_t)&v18);
      v10 = v18;
      v11 = v19;
      sub_1CCADECC8(v18, v19);
      v12 = sub_1CCB63D48();
      sub_1CCADDC1C(v12);
      sub_1CCADEC6C(v10, v11);
      swift_beginAccess();
      v13 = *(void (**)(void **))(v6 + 48);
      if (v13)
      {
        v21 = v10;
        v22 = v11;
        swift_retain();
        v13(&v21);
        sub_1CCA203A8((uint64_t)v13);
      }
      sub_1CCADEC6C(v10, v11);
      if (a3)
      {
        LOBYTE(v18) = *(_BYTE *)(v6 + 72);
        v14 = a1;
        FMIPAccessoryError.init(underlyingError:discoveryType:)(a1, (char *)&v18, (uint64_t)&v21);
        v15 = v21;
        v16 = v22;
        v18 = v21;
        v19 = v22;
        v20 = 1;
        a3(&v18);
        swift_release();

        sub_1CCADEC6C(v15, v16);
        return;
      }

    }
    else
    {
      v17 = sub_1CCB63D48();
      sub_1CCADEA64(v17, 0xD000000000000037, 0x80000001CCB7C900);
      *(_BYTE *)(v6 + 88) = 1;
      if (a3)
      {
        v23 = 0;
        v24 = 0;
        a3((id *)&v23);
      }
    }
    swift_release();
  }
}

void sub_1CCADB22C(void *a1, uint64_t a2, void (*a3)(id *))
{
  uint64_t Strong;
  uint64_t v6;
  id v7;
  os_log_type_t v8;
  id v9;
  id v10;
  unsigned __int8 v11;
  os_log_type_t v12;
  void (*v13)(void **);
  id v14;
  void *v15;
  unsigned __int8 v16;
  os_log_type_t v17;
  id v18;
  unsigned __int8 v19;
  char v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t v23;
  __int16 v24;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v6 = Strong;
    if (a1)
    {
      v7 = a1;
      v8 = sub_1CCB63D30();
      sub_1CCADE854(v8);
      LOBYTE(v23) = *(_BYTE *)(v6 + 72);
      v9 = a1;
      FMIPAccessoryError.init(underlyingError:discoveryType:)(a1, (char *)&v23, (uint64_t)&v18);
      v10 = v18;
      v11 = v19;
      sub_1CCADECC8(v18, v19);
      v12 = sub_1CCB63D48();
      sub_1CCADDC1C(v12);
      sub_1CCADEC6C(v10, v11);
      swift_beginAccess();
      v13 = *(void (**)(void **))(v6 + 48);
      if (v13)
      {
        v21 = v10;
        v22 = v11;
        swift_retain();
        v13(&v21);
        sub_1CCA203A8((uint64_t)v13);
      }
      sub_1CCADEC6C(v10, v11);
      if (a3)
      {
        LOBYTE(v18) = *(_BYTE *)(v6 + 72);
        v14 = a1;
        FMIPAccessoryError.init(underlyingError:discoveryType:)(a1, (char *)&v18, (uint64_t)&v21);
        v15 = v21;
        v16 = v22;
        v18 = v21;
        v19 = v22;
        v20 = 1;
        a3(&v18);
        swift_release();

        sub_1CCADEC6C(v15, v16);
        return;
      }

    }
    else
    {
      v17 = sub_1CCB63D48();
      sub_1CCADEA64(v17, 0xD000000000000028, 0x80000001CCB7C9C0);
      *(_BYTE *)(v6 + 88) = 1;
      if (a3)
      {
        v23 = 0;
        v24 = 0;
        a3((id *)&v23);
      }
    }
    swift_release();
  }
}

void sub_1CCADB42C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v7;
  os_log_type_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, void *);
  void *v22;
  void (*v23)(void *);
  _QWORD *v24;

  v7 = *(unsigned __int8 *)(v3 + 88);
  v8 = sub_1CCB63D48();
  if (v7 != 1)
  {
    sub_1CCADEA64(v8, 0xD00000000000003ELL, 0x80000001CCB7C870);
    return;
  }
  if ((a1 & 1) != 0)
  {
    sub_1CCADEA64(v8, 0xD000000000000035, 0x80000001CCB7C790);
    v9 = *(void **)(v3 + 80);
    if (v9)
    {
      v10 = swift_allocObject();
      swift_weakInit();
      v11 = (_QWORD *)swift_allocObject();
      v11[2] = v10;
      v11[3] = a2;
      v11[4] = a3;
      v23 = sub_1CCADDE3C;
      v24 = v11;
      v19 = MEMORY[0x1E0C809B0];
      v20 = 1107296256;
      v21 = sub_1CCA1F54C;
      v22 = &unk_1E88FAEF8;
      v12 = _Block_copy(&v19);
      v13 = v9;
      sub_1CC9DF994(a2);
      swift_release();
      objc_msgSend(v13, sel_stopLocalFindableAccessoryDiscoveryWithCompletion_, v12);
      _Block_release(v12);

      return;
    }
    __break(1u);
    goto LABEL_10;
  }
  sub_1CCADEA64(v8, 0xD000000000000026, 0x80000001CCB7C840);
  v14 = *(void **)(v3 + 80);
  if (!v14)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v15 = swift_allocObject();
  swift_weakInit();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a2;
  v16[4] = a3;
  v23 = sub_1CCADDE2C;
  v24 = v16;
  v19 = MEMORY[0x1E0C809B0];
  v20 = 1107296256;
  v21 = sub_1CCA1F54C;
  v22 = &unk_1E88FAEA8;
  v17 = _Block_copy(&v19);
  sub_1CC9DF994(a2);
  v18 = v14;
  swift_release();
  objc_msgSend(v18, sel_stopAccessoryDiscoveryWithCompletion_, v17);
  _Block_release(v17);

}

void sub_1CCADB680(void *a1, uint64_t a2, void (*a3)(id *))
{
  uint64_t Strong;
  uint64_t v6;
  id v7;
  os_log_type_t v8;
  id v9;
  id v10;
  unsigned __int8 v11;
  os_log_type_t v12;
  void (*v13)(void **);
  id v14;
  void *v15;
  unsigned __int8 v16;
  os_log_type_t v17;
  id v18;
  unsigned __int8 v19;
  char v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t v23;
  __int16 v24;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v6 = Strong;
    if (a1)
    {
      v7 = a1;
      v8 = sub_1CCB63D30();
      sub_1CCADE854(v8);
      LOBYTE(v23) = *(_BYTE *)(v6 + 72);
      v9 = a1;
      FMIPAccessoryError.init(underlyingError:discoveryType:)(a1, (char *)&v23, (uint64_t)&v18);
      v10 = v18;
      v11 = v19;
      sub_1CCADECC8(v18, v19);
      v12 = sub_1CCB63D48();
      sub_1CCADDC1C(v12);
      sub_1CCADEC6C(v10, v11);
      swift_beginAccess();
      v13 = *(void (**)(void **))(v6 + 48);
      if (v13)
      {
        v21 = v10;
        v22 = v11;
        swift_retain();
        v13(&v21);
        sub_1CCA203A8((uint64_t)v13);
      }
      sub_1CCADEC6C(v10, v11);
      if (a3)
      {
        LOBYTE(v18) = *(_BYTE *)(v6 + 72);
        v14 = a1;
        FMIPAccessoryError.init(underlyingError:discoveryType:)(a1, (char *)&v18, (uint64_t)&v21);
        v15 = v21;
        v16 = v22;
        v18 = v21;
        v19 = v22;
        v20 = 1;
        a3(&v18);
        swift_release();

        sub_1CCADEC6C(v15, v16);
        return;
      }

    }
    else
    {
      v17 = sub_1CCB63D48();
      sub_1CCADEA64(v17, 0xD000000000000038, 0x80000001CCB7C750);
      *(_BYTE *)(v6 + 88) = 0;
      if (a3)
      {
        v23 = 0;
        v24 = 0;
        a3((id *)&v23);
      }
    }
    swift_release();
  }
}

void sub_1CCADB87C(void *a1, uint64_t a2, void (*a3)(id *))
{
  uint64_t Strong;
  uint64_t v6;
  id v7;
  os_log_type_t v8;
  id v9;
  id v10;
  unsigned __int8 v11;
  os_log_type_t v12;
  void (*v13)(void **);
  id v14;
  void *v15;
  unsigned __int8 v16;
  os_log_type_t v17;
  id v18;
  unsigned __int8 v19;
  char v20;
  void *v21;
  unsigned __int8 v22;
  uint64_t v23;
  __int16 v24;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v6 = Strong;
    if (a1)
    {
      v7 = a1;
      v8 = sub_1CCB63D30();
      sub_1CCADE854(v8);
      LOBYTE(v23) = *(_BYTE *)(v6 + 72);
      v9 = a1;
      FMIPAccessoryError.init(underlyingError:discoveryType:)(a1, (char *)&v23, (uint64_t)&v18);
      v10 = v18;
      v11 = v19;
      sub_1CCADECC8(v18, v19);
      v12 = sub_1CCB63D48();
      sub_1CCADDC1C(v12);
      sub_1CCADEC6C(v10, v11);
      swift_beginAccess();
      v13 = *(void (**)(void **))(v6 + 48);
      if (v13)
      {
        v21 = v10;
        v22 = v11;
        swift_retain();
        v13(&v21);
        sub_1CCA203A8((uint64_t)v13);
      }
      sub_1CCADEC6C(v10, v11);
      if (a3)
      {
        LOBYTE(v18) = *(_BYTE *)(v6 + 72);
        v14 = a1;
        FMIPAccessoryError.init(underlyingError:discoveryType:)(a1, (char *)&v18, (uint64_t)&v21);
        v15 = v21;
        v16 = v22;
        v18 = v21;
        v19 = v22;
        v20 = 1;
        a3(&v18);
        swift_release();

        sub_1CCADEC6C(v15, v16);
        return;
      }

    }
    else
    {
      v17 = sub_1CCB63D48();
      sub_1CCADEA64(v17, 0xD000000000000029, 0x80000001CCB7C810);
      *(_BYTE *)(v6 + 88) = 0;
      if (a3)
      {
        v23 = 0;
        v24 = 0;
        a3((id *)&v23);
      }
    }
    swift_release();
  }
}

void sub_1CCADBA78(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  uint8_t *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t aBlock[6];

  v4 = v3;
  v25 = a2;
  v7 = type metadata accessor for FMIPDiscoveredAccessory();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  if (*(_BYTE *)(v3 + 88) == 1)
  {
    v24 = a3;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v10 = sub_1CCB637FC();
    sub_1CCA16C20(v10, (uint64_t)qword_1ED8AD7F8);
    v11 = sub_1CCB63D30();
    v12 = sub_1CCB637D8();
    if (os_log_type_enabled(v12, v11))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      aBlock[0] = v14;
      *(_DWORD *)v13 = 136315138;
      v23 = v13 + 4;
      v26 = sub_1CCA0CB60(0xD000000000000037, 0x80000001CCB7C490, aBlock);
      sub_1CCB63E44();
      _os_log_impl(&dword_1CC9BF000, v12, v11, "%s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v14, -1, -1);
      MEMORY[0x1D17B214C](v13, -1, -1);
    }

    a3 = v24;
  }
  v15 = *(void **)(v4 + 80);
  if (v15)
  {
    v16 = *a1;
    v17 = swift_allocObject();
    swift_weakInit();
    sub_1CCA0BEEC((uint64_t)a1, (uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
    v18 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v17;
    sub_1CCADDE4C((uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18);
    v20 = (_QWORD *)(v19 + ((v9 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
    *v20 = v25;
    v20[1] = a3;
    aBlock[4] = (uint64_t)sub_1CCADDE90;
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CCA1F54C;
    aBlock[3] = (uint64_t)&unk_1E88FAF48;
    v21 = _Block_copy(aBlock);
    v22 = v15;
    swift_retain();
    swift_release();
    objc_msgSend(v22, sel_initiatePairingWith_completion_, v16, v21);
    _Block_release(v21);

  }
  else
  {
    __break(1u);
  }
}

void sub_1CCADBD64(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  NSObject *v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  id v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t aBlock[6];

  v8 = v7;
  v36 = a1;
  v37 = a6;
  v12 = type metadata accessor for FMIPDiscoveredAccessory();
  v35 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v35 + 64);
  MEMORY[0x1E0C80A78](v12);
  if (*(_BYTE *)(v7 + 88) == 1)
  {
    v34 = a7;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v14 = sub_1CCB637FC();
    sub_1CCA16C20(v14, (uint64_t)qword_1ED8AD7F8);
    v15 = sub_1CCB63D30();
    v16 = sub_1CCB637D8();
    if (os_log_type_enabled(v16, v15))
    {
      v33[2] = a4;
      v17 = (uint8_t *)swift_slowAlloc();
      v33[1] = a2;
      v18 = swift_slowAlloc();
      aBlock[0] = v18;
      *(_DWORD *)v17 = 136315138;
      v33[0] = v17 + 4;
      v38 = sub_1CCA0CB60(0xD000000000000037, 0x80000001CCB7C490, aBlock);
      sub_1CCB63E44();
      _os_log_impl(&dword_1CC9BF000, v16, v15, "%s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v18, -1, -1);
      MEMORY[0x1D17B214C](v17, -1, -1);
    }

    a7 = v34;
  }
  v19 = *MEMORY[0x1E0D899F0];
  v20 = objc_allocWithZone(MEMORY[0x1E0D898B0]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v22 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v23 = objc_msgSend(v20, sel_initWithName_roleId_roleEmoji_, v21, v19, v22);

  v24 = *(void **)(v8 + 80);
  if (v24)
  {
    v25 = (uint64_t)v36;
    v26 = *v36;
    v27 = swift_allocObject();
    swift_weakInit();
    sub_1CCA0BEEC(v25, (uint64_t)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
    v28 = (*(unsigned __int8 *)(v35 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = v27;
    sub_1CCADDE4C((uint64_t)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v29 + v28);
    v30 = (_QWORD *)(v29 + ((v13 + v28 + 7) & 0xFFFFFFFFFFFFFFF8));
    *v30 = v37;
    v30[1] = a7;
    aBlock[4] = (uint64_t)sub_1CCADDEB8;
    aBlock[5] = v29;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CCA7FA4C;
    aBlock[3] = (uint64_t)&unk_1E88FAF98;
    v31 = _Block_copy(aBlock);
    v32 = v24;
    swift_retain();
    swift_release();
    objc_msgSend(v32, sel_finalizePairingWith_configuration_completion_, v26, v23, v31);
    _Block_release(v31);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1CCADC104(void *a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t updated;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t result;
  uint64_t v32;
  id v33;
  id v34;
  os_log_type_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  char *v41;
  id v42;
  char v43;
  uint64_t *v44;
  id v45;
  os_log_type_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  char *v57;
  void (*v58)(uint64_t, char *, uint64_t);
  char *v59;
  os_log_type_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  _QWORD v68[2];
  id v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  void (*v81)(uint64_t *);
  void *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _UNKNOWN **v86;
  uint64_t v87;

  v80 = a6;
  v81 = a5;
  v74 = sub_1CCB635B0();
  v72 = *(_QWORD *)(v74 - 8);
  v9 = MEMORY[0x1E0C80A78](v74);
  v76 = (char *)v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v71 = (char *)v68 - v11;
  v12 = sub_1CCA14E90(&qword_1ED8A7130);
  v13 = MEMORY[0x1E0C80A78](v12);
  v75 = (char *)v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v68 - v15;
  updated = type metadata accessor for FMIPItemUpdateType(0);
  MEMORY[0x1E0C80A78](updated);
  v19 = (char *)v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for FMIPItem();
  MEMORY[0x1E0C80A78](v20);
  v73 = (uint64_t)v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_1CCA14E90(&qword_1EF9E3D10);
  MEMORY[0x1E0C80A78](v78);
  v79 = (_QWORD *)((char *)v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v77 = type metadata accessor for FMIPDiscoveredAccessory();
  v23 = MEMORY[0x1E0C80A78](v77);
  v25 = (char *)v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)v68 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)v68 - v29;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v32 = result;
    if (a2)
    {
      sub_1CCA0BEEC(a4, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      v33 = a2;
      v34 = a2;
      v35 = sub_1CCB63D30();
      if (qword_1ED8AA630 != -1)
        swift_once();
      v36 = sub_1CCB637FC();
      sub_1CCA16C20(v36, (uint64_t)qword_1ED8AD7F8);
      v37 = sub_1CCB637D8();
      v38 = v35;
      if (os_log_type_enabled(v37, v35))
      {
        v39 = (uint8_t *)swift_slowAlloc();
        v40 = swift_slowAlloc();
        v76 = (char *)v40;
        *(_DWORD *)v39 = 136315138;
        v87 = v40;
        v75 = (char *)(v39 + 4);
        v83 = 0;
        v84 = 0xE000000000000000;
        sub_1CCB63FB8();
        sub_1CCB63A24();
        sub_1CCB64060();
        sub_1CCB63A24();
        v82 = a2;
        sub_1CCA14E90(&qword_1EF9DF470);
        sub_1CCB64060();
        sub_1CCB63A24();
        v83 = sub_1CCA0CB60(v83, v84, &v87);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v37, v38, "FMIPAccessoryDiscoveryController: %s", v39, 0xCu);
        v41 = v76;
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v41, -1, -1);
        MEMORY[0x1D17B214C](v39, -1, -1);
      }

      sub_1CCA0BF30((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      LOBYTE(v87) = *(_BYTE *)(v32 + 72);
      v42 = a2;
      FMIPAccessoryError.init(underlyingError:discoveryType:)(a2, (char *)&v87, (uint64_t)&v83);
      v43 = v84;
      v44 = v79;
      *v79 = v83;
      *((_BYTE *)v44 + 8) = v43;
      swift_storeEnumTagMultiPayload();
      v81(v44);
      swift_release();

      return sub_1CC9C3E84((uint64_t)v44, &qword_1EF9E3D10);
    }
    if (!a1)
    {
      sub_1CCA0BEEC(a4, (uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      v60 = sub_1CCB63D30();
      if (qword_1ED8AA630 != -1)
        swift_once();
      v61 = sub_1CCB637FC();
      sub_1CCA16C20(v61, (uint64_t)qword_1ED8AD7F8);
      v62 = sub_1CCB637D8();
      v63 = v60;
      if (os_log_type_enabled(v62, v60))
      {
        v64 = (uint8_t *)swift_slowAlloc();
        v65 = swift_slowAlloc();
        *(_DWORD *)v64 = 136315138;
        v87 = v65;
        v83 = 0;
        v84 = 0xE000000000000000;
        sub_1CCB63FB8();
        sub_1CCB63A24();
        sub_1CCB64060();
        sub_1CCB63A24();
        v83 = sub_1CCA0CB60(v83, v84, &v87);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v62, v63, "FMIPAccessoryDiscoveryController: %s", v64, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v65, -1, -1);
        MEMORY[0x1D17B214C](v64, -1, -1);
      }

      sub_1CCA0BF30((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      v44 = v79;
      *v79 = 0;
      *((_BYTE *)v44 + 8) = 0;
      swift_storeEnumTagMultiPayload();
      v81(v44);
      swift_release();
      return sub_1CC9C3E84((uint64_t)v44, &qword_1EF9E3D10);
    }
    v70 = result;
    sub_1CCA0BEEC(a4, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
    v45 = a1;
    v46 = sub_1CCB63D48();
    if (qword_1ED8AA630 != -1)
      swift_once();
    v47 = sub_1CCB637FC();
    sub_1CCA16C20(v47, (uint64_t)qword_1ED8AD7F8);
    v48 = sub_1CCB637D8();
    v49 = v46;
    if (os_log_type_enabled(v48, v46))
    {
      v50 = (uint8_t *)swift_slowAlloc();
      v51 = swift_slowAlloc();
      v69 = v45;
      *(_DWORD *)v50 = 136315138;
      v87 = v51;
      v68[1] = v50 + 4;
      v83 = 0;
      v84 = 0xE000000000000000;
      sub_1CCB63FB8();
      sub_1CCB63A24();
      sub_1CCB64060();
      sub_1CCB63A24();
      v83 = sub_1CCA0CB60(v83, v84, &v87);
      v45 = v69;
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v48, v49, "FMIPAccessoryDiscoveryController: %s", v50, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v51, -1, -1);
      MEMORY[0x1D17B214C](v50, -1, -1);
    }

    v52 = (uint64_t)v75;
    sub_1CCA0BF30((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
    v85 = sub_1CC9C30A8(0, &qword_1ED8A70F0);
    v86 = &protocol witness table for SPBeacon;
    v83 = (uint64_t)v45;
    swift_storeEnumTagMultiPayload();
    v53 = v72;
    v54 = v74;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56))(v16, 1, 1, v74);
    type metadata accessor for FMIPItemUpdateContext(0);
    v55 = swift_allocObject();
    sub_1CCA0BEEC((uint64_t)v19, v55 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_type, type metadata accessor for FMIPItemUpdateType);
    v56 = v45;
    v57 = v71;
    sub_1CCB635A4();
    v58 = *(void (**)(uint64_t, char *, uint64_t))(v53 + 32);
    v58(v55 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_timestamp, v57, v54);
    sub_1CCADEC80((uint64_t)v16, v52);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v52, 1, v54) == 1)
    {
      v59 = v76;
      sub_1CCB635A4();
      sub_1CC9C3E84((uint64_t)v16, &qword_1ED8A7130);
      sub_1CCA0BF30((uint64_t)v19, type metadata accessor for FMIPItemUpdateType);
      sub_1CC9C3E84(v52, &qword_1ED8A7130);
    }
    else
    {
      sub_1CC9C3E84((uint64_t)v16, &qword_1ED8A7130);
      sub_1CCA0BF30((uint64_t)v19, type metadata accessor for FMIPItemUpdateType);
      v59 = v76;
      v58((uint64_t)v76, (char *)v52, v54);
    }
    v58(v55 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_creationTimestamp, v59, v54);
    v66 = v73;
    FMIPItem.init(with:from:)(&v83, v55, v73);
    v67 = v79;
    sub_1CCA0BEEC(v66, (uint64_t)v79, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    swift_storeEnumTagMultiPayload();
    v81(v67);

    swift_release();
    sub_1CC9C3E84((uint64_t)v67, &qword_1EF9E3D10);
    return sub_1CCA0BF30(v66, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  }
  return result;
}

void sub_1CCADCBF0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  _QWORD aBlock[6];

  v7 = type metadata accessor for FMIPDiscoveredAccessory();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  v10 = *(void **)(v3 + 80);
  if (v10)
  {
    v11 = *a1;
    v12 = swift_allocObject();
    swift_weakInit();
    sub_1CCA0BEEC((uint64_t)a1, (uint64_t)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
    v13 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v12;
    sub_1CCADDE4C((uint64_t)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13);
    v15 = (_QWORD *)(v14 + ((v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8));
    *v15 = a2;
    v15[1] = a3;
    aBlock[4] = sub_1CCADE090;
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA1F54C;
    aBlock[3] = &unk_1E88FAFE8;
    v16 = _Block_copy(aBlock);
    v17 = v10;
    swift_retain();
    swift_release();
    objc_msgSend(v17, sel_invalidatePairingWith_completion_, v11, v16);
    _Block_release(v16);

  }
  else
  {
    __break(1u);
  }
}

void sub_1CCADCD84(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t Strong;
  uint64_t v19;
  id v20;
  id v21;
  os_log_type_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint8_t *v28;
  uint8_t *v29;
  id v30;
  void *v31;
  unsigned __int8 v32;
  os_log_type_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint8_t *v39;
  uint8_t *v40;
  void (*v41)(_QWORD);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  unsigned __int8 v47;
  uint64_t v48;
  unint64_t v49;

  v43 = a7;
  v44 = a8;
  v12 = type metadata accessor for FMIPDiscoveredAccessory();
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v39 - v16;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v19 = Strong;
    if (a1)
    {
      sub_1CCA0BEEC(a3, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      v20 = a1;
      v21 = a1;
      v22 = sub_1CCB63D30();
      if (qword_1ED8AA630 != -1)
        swift_once();
      v23 = sub_1CCB637FC();
      sub_1CCA16C20(v23, (uint64_t)qword_1ED8AD7F8);
      v24 = sub_1CCB637D8();
      if (os_log_type_enabled(v24, v22))
      {
        v42 = a5;
        v25 = swift_slowAlloc();
        v41 = a4;
        v26 = (uint8_t *)v25;
        v27 = swift_slowAlloc();
        v40 = (uint8_t *)v27;
        *(_DWORD *)v26 = 136315138;
        v46 = (void *)v27;
        v39 = v26 + 4;
        v48 = 0;
        v49 = 0xE000000000000000;
        sub_1CCB63FB8();
        sub_1CCB63A24();
        sub_1CCB64060();
        sub_1CCB63A24();
        v45 = a1;
        sub_1CCA14E90(&qword_1EF9DF470);
        sub_1CCB64060();
        sub_1CCB63A24();
        v48 = sub_1CCA0CB60(v48, v49, (uint64_t *)&v46);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v24, v22, "FMIPAccessoryDiscoveryController: %s", v26, 0xCu);
        v28 = v40;
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v28, -1, -1);
        v29 = v26;
        a4 = v41;
        MEMORY[0x1D17B214C](v29, -1, -1);
      }

      sub_1CCA0BF30((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      LOBYTE(v48) = *(_BYTE *)(v19 + 72);
      v30 = a1;
      FMIPAccessoryError.init(underlyingError:discoveryType:)(a1, (char *)&v48, (uint64_t)&v46);
      v31 = v46;
      v32 = v47;
      v48 = (uint64_t)v46;
      LOBYTE(v49) = v47;
      BYTE1(v49) = 1;
      a4(&v48);
      swift_release();

      sub_1CCADEC6C(v31, v32);
    }
    else
    {
      v42 = a5;
      sub_1CCA0BEEC(a3, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      v33 = sub_1CCB63D48();
      if (qword_1ED8AA630 != -1)
        swift_once();
      v34 = sub_1CCB637FC();
      sub_1CCA16C20(v34, (uint64_t)qword_1ED8AD7F8);
      v35 = sub_1CCB637D8();
      v36 = v33;
      if (os_log_type_enabled(v35, v33))
      {
        v37 = (uint8_t *)swift_slowAlloc();
        v38 = swift_slowAlloc();
        v41 = a4;
        *(_DWORD *)v37 = 136315138;
        v46 = (void *)v38;
        v40 = v37 + 4;
        v48 = 0;
        v49 = 0xE000000000000000;
        sub_1CCB63FB8();
        sub_1CCB63A24();
        sub_1CCB64060();
        sub_1CCB63A24();
        v48 = sub_1CCA0CB60(v48, v49, (uint64_t *)&v46);
        a4 = v41;
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v35, v36, "FMIPAccessoryDiscoveryController: %s", v37, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v38, -1, -1);
        MEMORY[0x1D17B214C](v37, -1, -1);
      }

      sub_1CCA0BF30((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      v48 = 0;
      LOWORD(v49) = 0;
      a4(&v48);
      swift_release();
    }
  }
}

uint64_t sub_1CCADD2CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 96);
  swift_bridgeObjectRetain();
  sub_1CCAE0D40((uint64_t (*)(char *))sub_1CCA2F328, v3, a1);
  return swift_bridgeObjectRelease();
}

void sub_1CCADD344()
{
  uint64_t v0;
  os_log_type_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  os_log_type_t v6;

  v1 = sub_1CCB63D30();
  sub_1CCADEA64(v1, 0xD000000000000018, 0x80000001CCB7C5F0);
  v2 = *(void **)(v0 + 80);
  if (v2)
  {
    v3 = objc_msgSend(v2, sel_state);
    v4 = sub_1CCADD664();

    v5 = *(void **)(v0 + 80);
    *(_QWORD *)(v0 + 80) = v4;

    if (*(_BYTE *)(v0 + 88) == 1)
    {
      v6 = sub_1CCB63D48();
      sub_1CCADEA64(v6, 0xD000000000000053, 0x80000001CCB7C590);
      *(_BYTE *)(v0 + 88) = 0;
      sub_1CCADABA8(0, 0, 0);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1CCADD410(_QWORD *a1, uint64_t a2)
{
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  os_log_type_t v14;
  void (*v15)(uint64_t);
  void (*v16)(uint64_t);
  uint64_t v18;

  swift_bridgeObjectRetain();
  v4 = sub_1CCB63D48();
  sub_1CCADED38(v4);
  swift_bridgeObjectRelease();
  v5 = sub_1CCAD97A8(a2);
  v6 = sub_1CCA7ADD0(v5);
  swift_bridgeObjectRelease();
  v7 = a1 + 12;
  swift_beginAccess();
  if (*(_QWORD *)(a1[12] + 16) <= *(_QWORD *)(v6 + 16) >> 3)
  {
    swift_bridgeObjectRetain();
    v10 = swift_bridgeObjectRetain();
    sub_1CCB2ECE8(v10);
    swift_bridgeObjectRelease();
    v9 = v6;
  }
  else
  {
    swift_bridgeObjectRetain();
    v8 = swift_bridgeObjectRetain();
    v9 = sub_1CCB2EF7C(v8, v6);
    swift_bridgeObjectRelease();
  }
  v11 = *v7;
  if (*(_QWORD *)(v6 + 16) <= *(_QWORD *)(*v7 + 16) >> 3)
  {
    v18 = *v7;
    swift_bridgeObjectRetain();
    sub_1CCB2ECE8(v6);
    v12 = v18;
  }
  else
  {
    swift_bridgeObjectRetain();
    v12 = sub_1CCB2EF7C(v6, v11);
  }
  *v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v13 = sub_1CCB63D48();
  sub_1CCADEF54(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v14 = sub_1CCB63D48();
  sub_1CCADEF54(v14);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v9 + 16))
  {
    swift_beginAccess();
    v15 = (void (*)(uint64_t))a1[2];
    if (v15)
    {
      swift_retain();
      v15(v9);
      sub_1CCA203A8((uint64_t)v15);
    }
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v12 + 16))
  {
    swift_beginAccess();
    v16 = (void (*)(uint64_t))a1[4];
    if (v16)
    {
      swift_retain();
      v16(v12);
      sub_1CCA203A8((uint64_t)v16);
    }
  }
  return swift_bridgeObjectRelease();
}

id sub_1CCADD664(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  void *v14;
  uint64_t v15;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D89898]), sel_initWithPreviousState_, a1);
  v2 = swift_allocObject();
  swift_weakInit();
  v14 = sub_1CCADECDC;
  v15 = v2;
  v3 = MEMORY[0x1E0C809B0];
  v10 = MEMORY[0x1E0C809B0];
  v11 = 1107296256;
  v12 = sub_1CCADD9C4;
  v13 = &unk_1E88FB268;
  v4 = _Block_copy(&v10);
  swift_release();
  objc_msgSend(v1, sel_setAccessoryDiscoveredCallback_, v4);
  _Block_release(v4);
  v5 = swift_allocObject();
  swift_weakInit();
  v14 = sub_1CCADECE4;
  v15 = v5;
  v10 = v3;
  v11 = 1107296256;
  v12 = sub_1CCA00C38;
  v13 = &unk_1E88FB290;
  v6 = _Block_copy(&v10);
  swift_release();
  objc_msgSend(v1, sel_setSessionInvalidatedCallback_, v6);
  _Block_release(v6);
  v7 = swift_allocObject();
  swift_weakInit();
  v14 = sub_1CCADECEC;
  v15 = v7;
  v10 = v3;
  v11 = 1107296256;
  v12 = (uint64_t (*)(uint64_t))sub_1CC9C32FC;
  v13 = &unk_1E88FB2B8;
  v8 = _Block_copy(&v10);
  swift_release();
  objc_msgSend(v1, sel_setAccessoryDiscoveryErrorCallback_, v8);
  _Block_release(v8);
  return v1;
}

uint64_t sub_1CCADD844()
{
  uint64_t v0;

  return sub_1CCADAF7C(v0);
}

uint64_t sub_1CCADD84C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCADD85C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[6];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    v4 = *(NSObject **)(result + 64);
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = a1;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = sub_1CCADED20;
    *(_QWORD *)(v6 + 24) = v5;
    aBlock[4] = sub_1CC9F4530;
    aBlock[5] = v6;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CC9F44AC;
    aBlock[3] = &unk_1E88FB330;
    v7 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v4, v7);
    _Block_release(v7);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t sub_1CCADD9C4(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_1CC9C30A8(0, &qword_1EF9E3AB0);
  sub_1CCADAA40();
  v2 = sub_1CCB63C40();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCADDA3C()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_1CCADD344();
    return swift_release();
  }
  return result;
}

void sub_1CCADDA90(void *a1)
{
  uint64_t Strong;
  uint64_t v3;
  id v4;
  id v5;
  unsigned __int8 v6;
  os_log_type_t v7;
  void (*v8)(id *);
  id v9;
  unsigned __int8 v10;
  char v11[24];
  id v12;
  unsigned __int8 v13;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v3 = Strong;
    v11[0] = *(_BYTE *)(Strong + 72);
    v4 = a1;
    FMIPAccessoryError.init(underlyingError:discoveryType:)(a1, v11, (uint64_t)&v12);
    v5 = v12;
    v6 = v13;
    sub_1CCADECC8(v12, v13);
    v7 = sub_1CCB63D48();
    sub_1CCADDC1C(v7);
    sub_1CCADEC6C(v5, v6);
    swift_beginAccess();
    v8 = *(void (**)(id *))(v3 + 48);
    if (v8)
    {
      v9 = v5;
      v10 = v6;
      swift_retain();
      v8(&v9);
      sub_1CCA203A8((uint64_t)v8);
    }
    swift_release();
    sub_1CCADEC6C(v5, v6);
  }
}

uint64_t (*sub_1CCADDB94())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CCADDBD8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void sub_1CCADDC00(void *a1)
{
  uint64_t v1;

  sub_1CCADB22C(a1, *(_QWORD *)(v1 + 16), *(void (**)(id *))(v1 + 24));
}

void sub_1CCADDC10(void *a1)
{
  uint64_t v1;

  sub_1CCADB02C(a1, *(_QWORD *)(v1 + 16), *(void (**)(id *))(v1 + 24));
}

void sub_1CCADDC1C(os_log_type_t a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *log;
  uint64_t v7;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = a1;
  log = sub_1CCB637D8();
  if (os_log_type_enabled(log, a1))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v7 = v5;
    sub_1CCB63FB8();
    sub_1CCB63A24();
    FMIPAccessoryError.localizedDescription.getter();
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
    sub_1CCB63A24();
    sub_1CCA0CB60(0, 0xE000000000000000, &v7);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, log, v3, "FMIPAccessoryDiscoveryController: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v5, -1, -1);
    MEMORY[0x1D17B214C](v4, -1, -1);

  }
  else
  {

  }
}

void sub_1CCADDE2C(void *a1)
{
  uint64_t v1;

  sub_1CCADB87C(a1, *(_QWORD *)(v1 + 16), *(void (**)(id *))(v1 + 24));
}

void sub_1CCADDE3C(void *a1)
{
  uint64_t v1;

  sub_1CCADB680(a1, *(_QWORD *)(v1 + 16), *(void (**)(id *))(v1 + 24));
}

uint64_t sub_1CCADDE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPDiscoveredAccessory();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1CCADDE90(void *a1)
{
  sub_1CCADE0B4(a1, 44, 0xD000000000000020, 0x80000001CCB7C690);
}

uint64_t sub_1CCADDEB8(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for FMIPDiscoveredAccessory() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1CCADC104(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(void (**)(uint64_t *))v7, *(_QWORD *)(v7 + 8));
}

uint64_t sub_1CCADDF24()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int *v4;
  unint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, uint64_t);

  v1 = type metadata accessor for FMIPDiscoveredAccessory();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_release();

  if (*(_QWORD *)(v0 + v2 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v3 = v0 + v2 + *(int *)(v1 + 24);
  v4 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, int *))(*((_QWORD *)v4 - 1) + 48))(v3, 1, v4))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = v3 + v4[12];
    v6 = sub_1CCB63490();
    v7 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v7(v5, v6);
    v7(v3 + v4[13], v6);
    v7(v3 + v4[14], v6);
    v7(v3 + v4[15], v6);
    v7(v3 + v4[16], v6);
    v7(v3 + v4[17], v6);
  }
  swift_release();
  return swift_deallocObject();
}

void sub_1CCADE090(void *a1)
{
  sub_1CCADE0B4(a1, 46, 0xD000000000000022, 0x80000001CCB7C610);
}

void sub_1CCADE0B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v9 = *(_QWORD *)(type metadata accessor for FMIPDiscoveredAccessory() - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1CCADCD84(a1, *(_QWORD *)(v4 + 16), v4 + v10, *(void (**)(_QWORD))v11, *(_QWORD *)(v11 + 8), a2, a3, a4);
}

unint64_t sub_1CCADE14C()
{
  unint64_t result;

  result = qword_1EF9E3AC0;
  if (!qword_1EF9E3AC0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for DiscoveryType, &type metadata for DiscoveryType);
    atomic_store(result, (unint64_t *)&qword_1EF9E3AC0);
  }
  return result;
}

uint64_t sub_1CCADE190()
{
  return sub_1CC9CAA38(&qword_1EF9E1EC8, (uint64_t (*)(uint64_t))type metadata accessor for FMIPDiscoveredAccessory, (uint64_t)&protocol conformance descriptor for FMIPDiscoveredAccessory);
}

unint64_t sub_1CCADE1C0()
{
  unint64_t result;

  result = qword_1EF9E3B28;
  if (!qword_1EF9E3B28)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPAccessoryDiscoveryController.Callbacks, &type metadata for FMIPAccessoryDiscoveryController.Callbacks);
    atomic_store(result, (unint64_t *)&qword_1EF9E3B28);
  }
  return result;
}

uint64_t sub_1CCADE224@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 96);
  return swift_bridgeObjectRetain();
}

uint64_t storeEnumTagSinglePayload for DiscoveryType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCADE2BC + 4 * byte_1CCB6DFA5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CCADE2F0 + 4 * byte_1CCB6DFA0[v4]))();
}

uint64_t sub_1CCADE2F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCADE2F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCADE300);
  return result;
}

uint64_t sub_1CCADE30C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCADE314);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCADE318(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCADE320(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DiscoveryType()
{
  return &type metadata for DiscoveryType;
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryControllerCallbacks.discoveredAccessoriesCallback.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryControllerCallbacks.discoveredAccessoriesCallback.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryControllerCallbacks.lostAccessoriesCallback.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryControllerCallbacks.lostAccessoriesCallback.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryControllerCallbacks.lostAccessoriesCallback.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryControllerCallbacks.errorHandler.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryControllerCallbacks.errorHandler.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryControllerCallbacks.errorHandler.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryControllerProtocol.callbacks.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryControllerProtocol.callbacks.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryControllerProtocol.callbacks.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryControllerProtocol.discoveredAccessories.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryControllerProtocol.startDiscovery(localFindable:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryControllerProtocol.stopDiscovery(localFindable:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t type metadata accessor for FMIPAccessoryDiscoveryController()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMIPAccessoryDiscoveryController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryController.callbacks.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryController.callbacks.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryController.callbacks.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryController.discoveredAccessories.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryController.__allocating_init(discoveryType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryController.startDiscovery(localFindable:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryController.stopDiscovery(localFindable:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryController.initiatePairing(accessory:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryController.finalizePairing(accessory:name:emoji:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryController.invalidatePairing(accessory:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of FMIPAccessoryDiscoveryController.accessory(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

_QWORD *destroy for FMIPAccessoryDiscoveryController.Callbacks(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if (*result)
    result = (_QWORD *)swift_release();
  if (v1[2])
    result = (_QWORD *)swift_release();
  if (v1[4])
    return (_QWORD *)swift_release();
  return result;
}

_QWORD *initializeWithCopy for FMIPAccessoryDiscoveryController.Callbacks(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = a2[2];
  if (v5)
  {
    v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  v7 = a2[4];
  if (v7)
  {
    v8 = a2[5];
    a1[4] = v7;
    a1[5] = v8;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  }
  return a1;
}

_QWORD *assignWithCopy for FMIPAccessoryDiscoveryController.Callbacks(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    a1[2] = v7;
    a1[3] = v9;
    swift_retain();
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (!a1[4])
  {
    if (v10)
    {
      v12 = a2[5];
      a1[4] = v10;
      a1[5] = v12;
      swift_retain();
      return a1;
    }
LABEL_21:
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_21;
  }
  v11 = a2[5];
  a1[4] = v10;
  a1[5] = v11;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithCopy for ItemCounts(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for FMIPAccessoryDiscoveryController.Callbacks(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    a1[2] = v7;
    a1[3] = v9;
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (!a1[4])
  {
    if (v10)
    {
      v12 = a2[5];
      a1[4] = v10;
      a1[5] = v12;
      return a1;
    }
LABEL_21:
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_21;
  }
  v11 = a2[5];
  a1[4] = v10;
  a1[5] = v11;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPAccessoryDiscoveryController.Callbacks(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPAccessoryDiscoveryController.Callbacks(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPAccessoryDiscoveryController.Callbacks()
{
  return &type metadata for FMIPAccessoryDiscoveryController.Callbacks;
}

void sub_1CCADE854(os_log_type_t a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *log;
  uint64_t v7;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = a1;
  log = sub_1CCB637D8();
  if (os_log_type_enabled(log, a1))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v7 = v5;
    sub_1CCB63FB8();
    sub_1CCB63A24();
    swift_getErrorValue();
    sub_1CCB64300();
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
    sub_1CCB63A24();
    sub_1CCA0CB60(0, 0xE000000000000000, &v7);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, log, v3, "FMIPAccessoryDiscoveryController: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v5, -1, -1);
    MEMORY[0x1D17B214C](v4, -1, -1);

  }
  else
  {

  }
}

void sub_1CCADEA64(os_log_type_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  NSObject *log;
  uint64_t v10;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD7F8);
  log = sub_1CCB637D8();
  if (os_log_type_enabled(log, a1))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v10 = v8;
    *(_DWORD *)v7 = 136315138;
    sub_1CCA0CB60(a2, a3, &v10);
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, log, a1, "FMIPAccessoryDiscoveryController: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v8, -1, -1);
    MEMORY[0x1D17B214C](v7, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1CCADEBEC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCADEC10(uint64_t a1)
{
  uint64_t v1;

  return sub_1CCB29910(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1CCADEC18(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_1CCADEC48(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

void sub_1CCADEC6C(id a1, unsigned __int8 a2)
{
  if (a2 <= 3u)

}

uint64_t sub_1CCADEC80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A7130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_1CCADECC8(id result, unsigned __int8 a2)
{
  if (a2 <= 3u)
    return result;
  return result;
}

uint64_t sub_1CCADECDC(uint64_t a1)
{
  return sub_1CCADD85C(a1);
}

uint64_t sub_1CCADECE4()
{
  return sub_1CCADDA3C();
}

void sub_1CCADECEC(void *a1)
{
  sub_1CCADDA90(a1);
}

uint64_t sub_1CCADECF4()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCADED20()
{
  uint64_t v0;

  return sub_1CCADD410(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCADED28()
{
  return swift_deallocObject();
}

void sub_1CCADED38(os_log_type_t a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *log;
  uint64_t v7;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = a1;
  log = sub_1CCB637D8();
  if (os_log_type_enabled(log, a1))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v7 = v5;
    sub_1CCB63FB8();
    sub_1CCB63A24();
    sub_1CC9C30A8(0, &qword_1EF9E3AB0);
    sub_1CCADAA40();
    sub_1CCB63C4C();
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
    sub_1CCB63A24();
    sub_1CCA0CB60(0, 0xE000000000000000, &v7);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, log, v3, "FMIPAccessoryDiscoveryController: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v5, -1, -1);
    MEMORY[0x1D17B214C](v4, -1, -1);

  }
  else
  {

  }
}

void sub_1CCADEF54(os_log_type_t a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *log;
  uint64_t v7;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = a1;
  log = sub_1CCB637D8();
  if (os_log_type_enabled(log, a1))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v7 = v5;
    sub_1CCB63FB8();
    sub_1CCB63A24();
    type metadata accessor for FMIPDiscoveredAccessory();
    sub_1CC9CAA38(&qword_1EF9E1EC8, (uint64_t (*)(uint64_t))type metadata accessor for FMIPDiscoveredAccessory, (uint64_t)&protocol conformance descriptor for FMIPDiscoveredAccessory);
    sub_1CCB63C4C();
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
    sub_1CCB63A24();
    sub_1CCA0CB60(0, 0xE000000000000000, &v7);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, log, v3, "FMIPAccessoryDiscoveryController: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v5, -1, -1);
    MEMORY[0x1D17B214C](v4, -1, -1);

  }
  else
  {

  }
}

uint64_t type metadata accessor for FMIPLockRequest()
{
  uint64_t result;

  result = qword_1EF9E3D18;
  if (!qword_1EF9E3D18)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCADF21C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1CCADF268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + qword_1EF9FF708);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 8);
  v4 = MEMORY[0x1E0DEA968];
  v14 = MEMORY[0x1E0DEA968];
  v12 = v2;
  v13 = v3;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)&v12, 0x656369766564, 0xE600000000000000);
  v5 = MEMORY[0x1E0DEAFA0];
  v14 = MEMORY[0x1E0DEAFA0];
  LOBYTE(v12) = 0;
  sub_1CCA06650((uint64_t)&v12, 0x646E756F73, 0xE500000000000000);
  v6 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_isUserTextEnabled);
  v14 = v5;
  LOBYTE(v12) = v6;
  sub_1CCA06650((uint64_t)&v12, 0x7478655472657375, 0xE800000000000000);
  result = swift_endAccess();
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_message + 8);
  if (v8)
  {
    v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_message);
    v14 = v4;
    v12 = v9;
    v13 = v8;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)&v12, 1954047348, 0xE400000000000000);
    result = swift_endAccess();
  }
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_passcode + 8);
  if (v10)
  {
    v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore14FMIPLockAction_passcode);
    v14 = v4;
    v12 = v11;
    v13 = v10;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)&v12, 0x65646F6373736170, 0xE800000000000000);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1CCADF428()
{
  return swift_release();
}

uint64_t sub_1CCADF438()
{
  sub_1CC9C785C();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCADF478()
{
  return type metadata accessor for FMIPLockRequest();
}

void FMIPHistoricalLocation.locationType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

id FMIPHistoricalLocation.location.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

double FMIPHistoricalLocation.batteryLevel.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void FMIPHistoricalLocation.batteryStatus.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

uint64_t sub_1CCADF4A8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCADF4E4 + 4 * byte_1CCB6E1A0[a1]))(0x4C79726574746162, 0xEC0000006C657665);
}

uint64_t sub_1CCADF4E4()
{
  return 0x5379726574746162;
}

unint64_t sub_1CCADF508()
{
  return 0xD000000000000012;
}

uint64_t sub_1CCADF524()
{
  return 0x656475746974616CLL;
}

uint64_t sub_1CCADF53C()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1CCADF584()
{
  return 0x6D617473656D6974;
}

uint64_t sub_1CCADF5A4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCADF5E0 + 4 * byte_1CCB6E1A8[a1]))(0x4C79726574746162, 0xEC0000006C657665);
}

uint64_t sub_1CCADF5E0()
{
  return 0x5379726574746162;
}

unint64_t sub_1CCADF604()
{
  return 0xD000000000000012;
}

uint64_t sub_1CCADF620()
{
  return 0x656475746974616CLL;
}

uint64_t sub_1CCADF638()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1CCADF680()
{
  return 0x6D617473656D6974;
}

void sub_1CCADF6A0(char *a1)
{
  sub_1CCB1C558(*a1);
}

void sub_1CCADF6AC()
{
  char *v0;

  sub_1CCB034FC(0, *v0);
}

void sub_1CCADF6B8(uint64_t a1)
{
  char *v1;

  sub_1CCB594FC(a1, *v1);
}

void sub_1CCADF6C0(uint64_t a1)
{
  char *v1;

  sub_1CCB034FC(a1, *v1);
}

uint64_t sub_1CCADF6C8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCAE0860();
  *a1 = result;
  return result;
}

uint64_t sub_1CCADF6F4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1CCADF4A8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1CCADF71C()
{
  unsigned __int8 *v0;

  return sub_1CCADF5A4(*v0);
}

uint64_t sub_1CCADF724@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCAE0860();
  *a1 = result;
  return result;
}

void sub_1CCADF748(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1CCADF754()
{
  sub_1CCADFCF0();
  return sub_1CCB643D8();
}

uint64_t sub_1CCADF77C()
{
  sub_1CCADFCF0();
  return sub_1CCB643E4();
}

uint64_t FMIPHistoricalLocation.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  Swift::String v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  NSObject *v40;
  _BOOL4 v41;
  _QWORD *v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  id v46;
  _BYTE *v47;
  _QWORD v48[2];
  int v49;
  _QWORD *v50;
  uint64_t v51;
  id v52;
  Swift::String v53;
  char *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[3];
  char v59;
  uint64_t v60;

  v55 = a2;
  v56 = sub_1CCB635B0();
  v3 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v5 = (char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1EF9E3D68);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCADFCF0();
  v10 = v57;
  sub_1CCB643B4();
  if (v10)
  {
    v25 = (uint64_t)a1;
  }
  else
  {
    v54 = v5;
    v57 = v7;
    LOBYTE(v58[0]) = 6;
    v11 = sub_1CCB64150();
    v12 = v6;
    v14 = v13;
    v15 = v11;
    LOBYTE(v58[0]) = 0;
    sub_1CCB64168();
    v17 = v16;
    LOBYTE(v58[0]) = 1;
    v53._countAndFlagsBits = sub_1CCB64150();
    v53._object = v18;
    LOBYTE(v58[0]) = 3;
    sub_1CCB64168();
    v20 = v19;
    LOBYTE(v58[0]) = 5;
    sub_1CCB64168();
    v22 = v21;
    LOBYTE(v58[0]) = 2;
    sub_1CCB64168();
    v24 = v23;
    LOBYTE(v58[0]) = 7;
    v27 = sub_1CCB6418C();
    v28 = objc_msgSend((id)objc_opt_self(), sel_fm_dateFromEpoch_, v27);
    sub_1CCB63580();

    v52 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
    v29 = (void *)sub_1CCB63538();
    v30 = objc_msgSend(v52, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_speed_timestamp_, v29, v20, v22, -1.0, v24, -1.0, -1.0, -1.0);

    v31._countAndFlagsBits = v15;
    v31._object = v14;
    FMIPLocationType.init(rawValue:)(v31);
    if (LOBYTE(v58[0]) == 20)
      v32 = 0;
    else
      v32 = LOBYTE(v58[0]);
    FMIPBatteryStatus.init(rawValue:)(v53);
    v33 = LOBYTE(v58[0]);
    if (LOBYTE(v58[0]) == 4)
      v33 = 0;
    LODWORD(v53._object) = v32;
    LOBYTE(v58[0]) = v32;
    v58[1] = (uint64_t)v30;
    v58[2] = v17;
    LODWORD(v53._countAndFlagsBits) = v33;
    v59 = v33;
    v52 = v30;
    v51 = FMIPHistoricalLocation.debugDescription.getter();
    v35 = v34;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v36 = sub_1CCB637FC();
    sub_1CCA16C20(v36, (uint64_t)qword_1ED8AD7F8);
    swift_bridgeObjectRetain();
    v37 = sub_1CCB637D8();
    v38 = sub_1CCB63D18();
    v39 = v38;
    v40 = v37;
    v41 = os_log_type_enabled(v37, v38);
    v42 = a1;
    if (v41)
    {
      v43 = swift_slowAlloc();
      v49 = v39;
      v44 = (uint8_t *)v43;
      v45 = swift_slowAlloc();
      v58[0] = v45;
      *(_DWORD *)v44 = 136315138;
      v48[1] = v44 + 4;
      v50 = v42;
      swift_bridgeObjectRetain();
      v60 = sub_1CCA0CB60(v51, v35, v58);
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1CC9BF000, v40, (os_log_type_t)v49, "FMIPHistoricalLocation: initialized %s", v44, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v45, -1, -1);
      v42 = v50;
      MEMORY[0x1D17B214C](v44, -1, -1);
      v46 = v52;

    }
    else
    {
      v46 = v52;

      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v54, v56);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v9, v12);
    v47 = v55;
    *v55 = v53._object;
    *((_QWORD *)v47 + 1) = v46;
    *((_QWORD *)v47 + 2) = v17;
    v47[24] = v53._countAndFlagsBits;
    v25 = (uint64_t)v42;
  }
  return sub_1CCA01CA0(v25);
}

unint64_t sub_1CCADFCF0()
{
  unint64_t result;

  result = qword_1EF9E3D70;
  if (!qword_1EF9E3D70)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6E390, &type metadata for FMIPHistoricalLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3D70);
  }
  return result;
}

uint64_t FMIPHistoricalLocation.debugDescription.getter()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 8);
  sub_1CCB63A24();
  sub_1CCB63A24();
  sub_1CCB63A24();
  objc_msgSend(v1, sel_coordinate);
  sub_1CCB63C1C();
  sub_1CCB63A24();
  sub_1CCB63FB8();
  sub_1CCB63A24();
  objc_msgSend(v1, sel_coordinate);
  sub_1CCB63C1C();
  sub_1CCB63A24();
  objc_msgSend(v1, sel_horizontalAccuracy);
  sub_1CCB63C1C();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCB64060();
  sub_1CCB63A24();
  sub_1CCB63C1C();
  sub_1CCB63A24();
  sub_1CCB64060();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

void FMIPHistoricalLocation.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v4 = sub_1CCA14E90(&qword_1EF9E3D78);
  v13 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = (void *)*((_QWORD *)v1 + 1);
  v12 = v1[24];
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCADFCF0();
  sub_1CCB643CC();
  v9 = objc_msgSend(v8, sel_timestamp);
  if (!v9)
  {
    __break(1u);
    JUMPOUT(0x1CCAE034CLL);
  }
  v10 = v9;
  v20 = v7;
  FMIPLocationType.rawValue.getter();
  v19 = 6;
  sub_1CCB641E0();
  if (!v2)
  {
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_coordinate);
    v18 = 3;
    sub_1CCB641F8();
    objc_msgSend(v8, sel_coordinate);
    v17 = 5;
    sub_1CCB641F8();
    objc_msgSend(v8, sel_horizontalAccuracy);
    v16 = 2;
    sub_1CCB641F8();
    objc_msgSend(v10, sel_fm_epoch);
    v15 = 7;
    sub_1CCB6421C();
    v14 = 0;
    sub_1CCB641F8();
    __asm { BR              X9 }
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v4);

  swift_bridgeObjectRelease();
}

uint64_t sub_1CCAE0360@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FMIPHistoricalLocation.init(from:)(a1, a2);
}

void sub_1CCAE0374(_QWORD *a1)
{
  FMIPHistoricalLocation.encode(to:)(a1);
}

void _s8FMIPCore22FMIPHistoricalLocationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  double v2;
  char v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(double *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(double *)(a2 + 16);
  sub_1CCA5AA94();
  if ((sub_1CCB63DF0() & 1) != 0)
  {
    v5 = FMIPLocationType.rawValue.getter();
    v7 = v6;
    if (v5 == FMIPLocationType.rawValue.getter() && v7 == v8)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v9 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0)
        return;
    }
    if (v2 == v4)
      sub_1CCA17FC8(v3);
  }
}

uint64_t initializeWithCopy for FMIPHistoricalLocation(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for FMIPHistoricalLocation(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for FMIPHistoricalLocation(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FMIPHistoricalLocation(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPHistoricalLocation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPHistoricalLocation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPHistoricalLocation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPHistoricalLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1CCAE0708 + 4 * byte_1CCB6E1B5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1CCAE073C + 4 * byte_1CCB6E1B0[v4]))();
}

uint64_t sub_1CCAE073C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAE0744(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAE074CLL);
  return result;
}

uint64_t sub_1CCAE0758(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAE0760);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1CCAE0764(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAE076C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPHistoricalLocation.CodingKeys()
{
  return &type metadata for FMIPHistoricalLocation.CodingKeys;
}

unint64_t sub_1CCAE078C()
{
  unint64_t result;

  result = qword_1EF9E3D80;
  if (!qword_1EF9E3D80)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6E368, &type metadata for FMIPHistoricalLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3D80);
  }
  return result;
}

unint64_t sub_1CCAE07D4()
{
  unint64_t result;

  result = qword_1EF9E3D88;
  if (!qword_1EF9E3D88)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6E2A0, &type metadata for FMIPHistoricalLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3D88);
  }
  return result;
}

unint64_t sub_1CCAE081C()
{
  unint64_t result;

  result = qword_1EF9E3D90;
  if (!qword_1EF9E3D90)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6E2C8, &type metadata for FMIPHistoricalLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3D90);
  }
  return result;
}

uint64_t sub_1CCAE0860()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 8)
    return 8;
  else
    return v0;
}

void sub_1CCAE08A8(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  sub_1CCAE0900(a1, a2, a3, &qword_1EF9DF450, 0x1E0D898E0, (unint64_t *)&unk_1EF9DF458);
}

void sub_1CCAE08D4(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  sub_1CCAE0900(a1, a2, a3, &qword_1EF9E26D8, 0x1E0D89940, (unint64_t *)&qword_1EF9E26E0);
}

void sub_1CCAE0900(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  int64_t v26;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  id v35;

  v7 = v6;
  v8 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1CCB63EC8();
    sub_1CC9C30A8(0, a4);
    sub_1CC9F74C8(a6, a4);
    sub_1CCB63C94();
    v8 = v30;
    v29 = v31;
    v12 = v32;
    v13 = v33;
    v14 = v34;
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v29 = a3 + 56;
    v16 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & *(_QWORD *)(a3 + 56);
    swift_bridgeObjectRetain();
    v12 = v16;
    v13 = 0;
  }
  v28 = (unint64_t)(v12 + 64) >> 6;
  if ((v8 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  if (!sub_1CCB63F28())
    goto LABEL_36;
  sub_1CC9C30A8(0, a4);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v19 = v35;
  swift_unknownObjectRelease();
  v20 = v13;
  v21 = v14;
  if (!v19)
    goto LABEL_36;
  while (1)
  {
    v35 = v19;
    v25 = a1(&v35);
    if (v7)
    {

      goto LABEL_36;
    }
    if ((v25 & 1) != 0)
      goto LABEL_36;

    v13 = v20;
    v14 = v21;
    if (v8 < 0)
      goto LABEL_8;
LABEL_11:
    if (!v14)
      break;
    v21 = (v14 - 1) & v14;
    v22 = __clz(__rbit64(v14)) | (v13 << 6);
    v20 = v13;
LABEL_24:
    v19 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v22);
    if (!v19)
      goto LABEL_36;
  }
  v20 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    return;
  }
  if (v20 >= v28)
    goto LABEL_36;
  v23 = *(_QWORD *)(v29 + 8 * v20);
  if (v23)
  {
LABEL_23:
    v21 = (v23 - 1) & v23;
    v22 = __clz(__rbit64(v23)) + (v20 << 6);
    goto LABEL_24;
  }
  v24 = v13 + 2;
  if (v13 + 2 >= v28)
    goto LABEL_36;
  v23 = *(_QWORD *)(v29 + 8 * v24);
  if (v23)
    goto LABEL_22;
  v24 = v13 + 3;
  if (v13 + 3 >= v28)
    goto LABEL_36;
  v23 = *(_QWORD *)(v29 + 8 * v24);
  if (v23)
    goto LABEL_22;
  v24 = v13 + 4;
  if (v13 + 4 >= v28)
    goto LABEL_36;
  v23 = *(_QWORD *)(v29 + 8 * v24);
  if (v23)
  {
LABEL_22:
    v20 = v24;
    goto LABEL_23;
  }
  v20 = v13 + 5;
  if (v13 + 5 >= v28)
    goto LABEL_36;
  v23 = *(_QWORD *)(v29 + 8 * v20);
  if (v23)
    goto LABEL_23;
  v26 = v13 + 6;
  while (v28 != v26)
  {
    v23 = *(_QWORD *)(v29 + 8 * v26++);
    if (v23)
    {
      v20 = v26 - 1;
      goto LABEL_23;
    }
  }
LABEL_36:
  sub_1CCA2F54C();
}

void *sub_1CCAE0C20(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  char v11;
  id v13;

  if (a3 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = sub_1CCB64090())
  {
    v7 = 4;
    while (1)
    {
      v8 = (a3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1D17B154C](v7 - 4, a3) : *(id *)(a3 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v13 = v8;
      v11 = a1(&v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v9;
      }
      if ((v11 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v7;
      if (v10 == v6)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1CCAE0D40@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1CCAE0D78(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory, a3);
}

uint64_t sub_1CCAE0D5C@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1CCAE0D78(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem, a3);
}

uint64_t sub_1CCAE0D78@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t (*a3)(_QWORD)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  unint64_t v22;
  int64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;

  v29 = a4;
  v28 = a3(0);
  v32 = *(_QWORD *)(v28 - 8);
  v8 = MEMORY[0x1E0C80A78](v28);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v28 - v11;
  v13 = *(_QWORD *)(a2 + 56);
  v30 = a2 + 56;
  v14 = 1 << *(_BYTE *)(a2 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v31 = (unint64_t)(v14 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v18 = 0;
  if (!v16)
    goto LABEL_5;
LABEL_4:
  v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (i = v19 | (v18 << 6); ; i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    sub_1CCA0BEEC(*(_QWORD *)(a2 + 48) + *(_QWORD *)(v32 + 72) * i, (uint64_t)v12, a3);
    sub_1CC9FED60((uint64_t)v12, (uint64_t)v10, a3);
    v24 = a1(v10);
    if (v4)
    {
      sub_1CCA0BF30((uint64_t)v10, a3);
      return swift_release();
    }
    if ((v24 & 1) != 0)
    {
      swift_release();
      v25 = v29;
      sub_1CC9FED60((uint64_t)v10, v29, a3);
      v26 = 0;
      v27 = v28;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v25, v26, 1, v27);
    }
    result = sub_1CCA0BF30((uint64_t)v10, a3);
    if (v16)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v18++, 1))
      break;
    if (v18 >= v31)
      goto LABEL_28;
    v22 = *(_QWORD *)(v30 + 8 * v18);
    if (!v22)
    {
      v23 = v18 + 1;
      if (v18 + 1 >= v31)
        goto LABEL_28;
      v22 = *(_QWORD *)(v30 + 8 * v23);
      if (v22)
        goto LABEL_16;
      v23 = v18 + 2;
      if (v18 + 2 >= v31)
        goto LABEL_28;
      v22 = *(_QWORD *)(v30 + 8 * v23);
      if (v22)
        goto LABEL_16;
      v23 = v18 + 3;
      if (v18 + 3 >= v31)
        goto LABEL_28;
      v22 = *(_QWORD *)(v30 + 8 * v23);
      if (v22)
      {
LABEL_16:
        v18 = v23;
        goto LABEL_17;
      }
      v23 = v18 + 4;
      if (v18 + 4 < v31)
      {
        v22 = *(_QWORD *)(v30 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v18 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_31;
            if (v18 >= v31)
              goto LABEL_28;
            v22 = *(_QWORD *)(v30 + 8 * v18);
            ++v23;
            if (v22)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      v27 = v28;
      v25 = v29;
      swift_release();
      v26 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v25, v26, 1, v27);
    }
LABEL_17:
    v16 = (v22 - 1) & v22;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1CCAE1024(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v6 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * i);
    v20 = v18;
    swift_bridgeObjectRetain();
    v19 = a1(&v20);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v18;
    }
    if ((v19 & 1) != 0)
    {
      swift_release();
      return v18;
    }
    result = swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v12++, 1))
      break;
    if (v12 >= v10)
      goto LABEL_28;
    v16 = *(_QWORD *)(v6 + 8 * v12);
    if (!v16)
    {
      v17 = v12 + 1;
      if (v12 + 1 >= v10)
        goto LABEL_28;
      v16 = *(_QWORD *)(v6 + 8 * v17);
      if (v16)
        goto LABEL_16;
      v17 = v12 + 2;
      if (v12 + 2 >= v10)
        goto LABEL_28;
      v16 = *(_QWORD *)(v6 + 8 * v17);
      if (v16)
        goto LABEL_16;
      v17 = v12 + 3;
      if (v12 + 3 >= v10)
        goto LABEL_28;
      v16 = *(_QWORD *)(v6 + 8 * v17);
      if (v16)
      {
LABEL_16:
        v12 = v17;
        goto LABEL_17;
      }
      v17 = v12 + 4;
      if (v12 + 4 < v10)
      {
        v16 = *(_QWORD *)(v6 + 8 * v17);
        if (!v16)
        {
          while (1)
          {
            v12 = v17 + 1;
            if (__OFADD__(v17, 1))
              goto LABEL_31;
            if (v12 >= v10)
              goto LABEL_28;
            v16 = *(_QWORD *)(v6 + 8 * v12);
            ++v17;
            if (v16)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      swift_release();
      return 0;
    }
LABEL_17:
    v9 = (v16 - 1) & v16;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t FMIPItem.partType.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(_QWORD);
  char *v12;
  uint64_t v15;

  v2 = v1;
  v4 = type metadata accessor for FMIPItem();
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2 + *(int *)(v5 + 64);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_BYTE *)(v8 + 32);
  sub_1CCA0BEEC(v2, (uint64_t)v7, v11);
  if (!v9)
  {
    v12 = &v7[*(int *)(v4 + 56)];
    if (*(_QWORD *)v12 == 1702060355 && *((_QWORD *)v12 + 1) == 0xE400000000000000)
      v10 = 1;
    else
      v10 = sub_1CCB642A0() & 1;
  }
  *a1 = v10;
  return sub_1CCA0BF30((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
}

uint64_t FMIPItem.primaryItemPart.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD);
  char *v16;
  BOOL v17;
  char v18;
  char v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  BOOL v24;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for FMIPItem();
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v26 - v7;
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v26 - v10;
  v12 = v1 + *(int *)(v9 + 64);
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(unsigned __int8 *)(v12 + 32);
  sub_1CCA0BEEC(v1, (uint64_t)&v26 - v10, v15);
  if (v13)
  {
    sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    __asm { BR              X9 }
  }
  v16 = &v11[*(int *)(v2 + 56)];
  v17 = *(_QWORD *)v16 == 1702060355 && *((_QWORD *)v16 + 1) == 0xE400000000000000;
  if (v17 || (sub_1CCB642A0() & 1) != 0)
  {
    sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    swift_bridgeObjectRelease();
    sub_1CCA0BEEC(v1, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  }
  else
  {
    sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v18 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    sub_1CCA0BEEC(v1, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if ((v18 & 1) == 0)
    {
      v20 = &v8[*(int *)(v2 + 64)];
      v21 = *((_QWORD *)v20 + 1);
      v22 = v20[32];
      sub_1CCA0BEEC((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if (v21)
      {
        sub_1CCA0BF30((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        __asm { BR              X9 }
      }
      v23 = &v5[*(int *)(v2 + 56)];
      v24 = *(_QWORD *)v23 == 1702060355 && *((_QWORD *)v23 + 1) == 0xE400000000000000;
      if (v24 || (sub_1CCB642A0() & 1) != 0)
      {
        sub_1CCA0BF30((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
        v19 = sub_1CCB642A0();
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
      sub_1CCA0BF30((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      swift_bridgeObjectRelease();
    }
  }
  v19 = 1;
LABEL_19:
  sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  return v19 & 1;
}

BOOL static FMIPPartType.isEqualSortOrder(lhs:rhs:)(char *a1, char *a2)
{
  return flt_1CCB6F088[*a1] == flt_1CCB6F088[*a2];
}

FMIPCore::FMIPItemState __swiftcall FMIPItemState.init(rawValue:)(FMIPCore::FMIPItemState rawValue)
{
  FMIPCore::FMIPItemState *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t FMIPItem.isOwner.getter()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPItem() + 60));
  if (*v1 == 0x6F6C4072656E776FLL && v1[1] == 0xEF74736F686C6163)
    return 1;
  else
    return sub_1CCB642A0();
}

uint64_t FMIPItem.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _DWORD v36[2];
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[288];
  _BYTE v44[288];
  uint64_t v45[36];
  uint64_t v46;
  uint64_t v47;

  v1 = v0;
  v2 = type metadata accessor for FMIPProductType();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for FMIPItem();
  v5 = v0 + *(int *)(v42 + 96);
  FMIPProductType.productInformation.getter((uint64_t)v45);
  v6 = v45[3];
  if (v45[3])
  {
    v7 = v45[4];
    sub_1CCA04DDC(v45, v45[3]);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
    v39 = v9;
    v40 = v8;
    sub_1CCA01CA0((uint64_t)v45);
  }
  else
  {
    sub_1CC9C3E84((uint64_t)v45, &qword_1EF9E2888);
    v39 = 0;
    v40 = 0;
  }
  FMIPProductType.productInformation.getter((uint64_t)v45);
  v10 = v45[3];
  if (v45[3])
  {
    v11 = v45[4];
    sub_1CCA04DDC(v45, v45[3]);
    v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
    sub_1CCA01CA0((uint64_t)v45);
  }
  else
  {
    sub_1CC9C3E84((uint64_t)v45, &qword_1EF9E2888);
    v41 = 0;
  }
  FMIPProductType.productInformation.getter((uint64_t)v45);
  v12 = v45[3];
  if (v45[3])
  {
    v13 = v45[4];
    sub_1CCA04DDC(v45, v45[3]);
    v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
    sub_1CCA01CA0((uint64_t)v45);
  }
  else
  {
    sub_1CC9C3E84((uint64_t)v45, &qword_1EF9E2888);
    v38 = 0;
  }
  sub_1CCA0BEEC(v5, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
  v36[1] = swift_getEnumCaseMultiPayload();
  sub_1CCA0BF30((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
  v45[0] = 0;
  v45[1] = 0xE000000000000000;
  sub_1CCB63FB8();
  v46 = v45[0];
  v47 = v45[1];
  sub_1CCB63A24();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  v37 = "% locationType: ";
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  v14 = sub_1CCA17EE8(10);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_bridgeObjectRelease();
  MEMORY[0x1D17B0F34](v14, v16, v18, v20);
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v21 = *(_QWORD *)(v1 + 392);
  if (v21)
  {
    v22 = *(_QWORD *)(v1 + 400);
    v23 = *(_QWORD *)(v1 + 384);
    LOWORD(v45[0]) = v23 & 0x101;
    BYTE2(v45[0]) = BYTE2(v23) & 1;
    BYTE3(v45[0]) = BYTE3(v23);
    v45[1] = v21;
    v45[2] = v22;
    FMIPLocation.debugDescription.getter();
  }
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v24 = *(_QWORD *)(v1 + 320);
  if (v24)
  {
    v25 = *(_QWORD *)(v1 + 328);
    v26 = *(_QWORD *)(v1 + 312);
    LOWORD(v45[0]) = v26 & 0x101;
    BYTE2(v45[0]) = BYTE2(v26) & 1;
    BYTE3(v45[0]) = BYTE3(v26);
    v45[1] = v24;
    v45[2] = v25;
    FMIPLocation.debugDescription.getter();
  }
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v27 = *(_QWORD *)(v1 + 344);
  v45[0] = *(_QWORD *)(v1 + 336);
  v45[1] = v27;
  swift_bridgeObjectRetain();
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v28 = v42;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v45[0] = v40;
  v45[1] = v39;
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v45[0] = v38;
  LOBYTE(v45[1]) = v12 == 0;
  sub_1CCA14E90(&qword_1EF9E0658);
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v45[0] = v41;
  LOBYTE(v45[1]) = v10 == 0;
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v29 = v1 + *(int *)(v28 + 64);
  v30 = *(_QWORD *)(v29 + 8);
  v31 = *(_QWORD *)(v29 + 16);
  v32 = *(_QWORD *)(v29 + 24);
  v33 = *(_BYTE *)(v29 + 32);
  v45[0] = *(_QWORD *)v29;
  v45[1] = v30;
  v45[2] = v31;
  v45[3] = v32;
  LOBYTE(v45[4]) = v33;
  sub_1CCAF007C(v45[0], v30);
  sub_1CCA14E90(&qword_1EF9E3D98);
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CC9C3EC0(v1 + 8, (uint64_t)v44, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)v44, (uint64_t)v45, &qword_1ED8A71C0);
  if (sub_1CCA33738((uint64_t)v45) == 1
    || (memcpy(v43, v45, sizeof(v43)), FMIPAddress.displayAddress.getter(), !v34))
  {
    swift_bridgeObjectRelease();
  }
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v43[0] = *(_BYTE *)(v1 + 296);
  sub_1CCB64060();
  sub_1CCB63A24();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return v46;
}

uint64_t FMIPItem.init(item:updateType:address:location:crowdSourcedLocation:connected:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, unsigned __int8 a6@<W5>, uint64_t a7@<X8>)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t updated;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  int v32;
  _BYTE *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t result;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  _BYTE v95[288];
  _BYTE v96[288];
  _BYTE v97[288];
  _BYTE v98[296];

  v92 = a2;
  v12 = a6;
  v13 = sub_1CCA14E90(&qword_1ED8A7130);
  MEMORY[0x1E0C80A78](v13);
  v90 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for FMIPItemUpdateType(0);
  MEMORY[0x1E0C80A78](updated);
  v89 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int *)type metadata accessor for FMIPItem();
  v18 = MEMORY[0x1E0C80A78](v17);
  v87 = (uint64_t *)((char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = MEMORY[0x1E0C80A78](v18);
  v86 = (uint64_t)&v80 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v80 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (uint64_t *)((char *)&v80 - v25);
  sub_1CC9C3EC0(a3, (uint64_t)v98, &qword_1ED8A71C0);
  v27 = (void *)a4[1];
  v28 = *(_QWORD *)(a1 + v17[19]);
  if (v12 != 2 && !(v12 & 1 | ((*(_QWORD *)(a1 + v17[19]) & 0x40) == 0)))
    v28 &= ~0x40uLL;
  v88 = v28;
  v29 = *a4;
  v93 = a4[2];
  v30 = *a5;
  v94 = *(_OWORD *)(a5 + 1);
  sub_1CCA0BEEC(a1, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  if (!v27)
  {
    v29 = v26[48];
    v27 = (void *)v26[49];
    v93 = v26[50];
    v31 = v27;
  }
  sub_1CCA0BF30((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v32 = *(unsigned __int8 *)(a1 + v17[25]);
  v85 = v17[25];
  if (v32 == 1)
  {

    v29 = 0;
    v27 = 0;
    v93 = 0;
  }
  sub_1CCA0BEEC(a1, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CC9C3EC0((uint64_t)v98, (uint64_t)v97, &qword_1ED8A71C0);
  if (sub_1CCA33738((uint64_t)v97) == 1)
  {
    sub_1CC9C3EC0((uint64_t)(v24 + 8), (uint64_t)v95, &qword_1ED8A71C0);
    sub_1CCA307F0((uint64_t)v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
    v33 = v95;
  }
  else
  {
    v33 = v98;
  }
  sub_1CC9C3EC0((uint64_t)v33, (uint64_t)v96, &qword_1ED8A71C0);
  v91 = v29;
  sub_1CCA0BF30((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CC9C3EC0((uint64_t)v96, a7 + 8, &qword_1ED8A71C0);
  *(_BYTE *)(a7 + 296) = *(_BYTE *)(a1 + 296);
  *(_QWORD *)(a7 + 304) = *(_QWORD *)(a1 + 304);
  v34 = v86;
  sub_1CCA0BEEC(a1, v86, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  if (!(_QWORD)v94)
  {
    v30 = *(_QWORD *)(v34 + 312);
    v94 = *(_OWORD *)(v34 + 320);
    v35 = (id)v94;
  }
  sub_1CCA0BF30(v34, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  *(_QWORD *)(a7 + 312) = v30;
  *(_OWORD *)(a7 + 320) = v94;
  v36 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a7 + 336) = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a7 + 344) = v36;
  v37 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a7 + 352) = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a7 + 360) = v37;
  v38 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a7 + 368) = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a7 + 376) = v38;
  *(_BYTE *)(a7 + v17[21]) = *(_BYTE *)(a1 + v17[21]);
  *(_BYTE *)(a7 + v17[22]) = *(_BYTE *)(a1 + v17[22]);
  *(_BYTE *)(a7 + v17[25]) = *(_BYTE *)(a1 + v85);
  v39 = v87;
  sub_1CCA0BEEC(a1, (uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v40 = v27;
  if (!v27)
  {
    v40 = (void *)v39[49];
    v91 = v39[48];
    v93 = v39[50];
    v41 = v40;
  }
  *(_QWORD *)&v94 = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCA0BF30((uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  *(_QWORD *)(a7 + 384) = v91;
  *(_QWORD *)(a7 + 392) = v40;
  *(_QWORD *)(a7 + 400) = v93;
  sub_1CC9EAB74(a1 + v17[13], a7 + v17[13], &qword_1ED8A8CD0);
  v42 = v17[14];
  v44 = *(_QWORD *)(a1 + v42);
  v93 = *(_QWORD *)(a1 + v42 + 8);
  v43 = v93;
  v45 = (_QWORD *)(a7 + v42);
  *v45 = v44;
  v45[1] = v43;
  v46 = v17[15];
  v48 = *(_QWORD *)(a1 + v46);
  v91 = *(_QWORD *)(a1 + v46 + 8);
  v47 = v91;
  v49 = (_QWORD *)(a7 + v46);
  *v49 = v48;
  v49[1] = v47;
  v50 = v17[16];
  v51 = a1 + v50;
  v52 = *(_QWORD *)(a1 + v50);
  v86 = *(_QWORD *)(a1 + v50 + 8);
  v53 = v86;
  v87 = (_QWORD *)v52;
  v54 = *(_QWORD *)(a1 + v50 + 16);
  v84 = *(_QWORD *)(a1 + v50 + 24);
  v55 = v84;
  v85 = v54;
  v56 = a7 + v50;
  *(_QWORD *)v56 = v52;
  *(_QWORD *)(v56 + 8) = v53;
  *(_QWORD *)(v56 + 16) = v54;
  *(_QWORD *)(v56 + 24) = v55;
  v83 = *(unsigned __int8 *)(v51 + 32);
  *(_BYTE *)(v56 + 32) = v83;
  sub_1CCA0BEEC(a1 + v17[24], a7 + v17[24], (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
  v57 = v17[17];
  v58 = (_OWORD *)(a1 + v57);
  v59 = *(_QWORD *)(a1 + v57 + 24);
  v61 = *(_QWORD *)(a1 + v57 + 32);
  v81 = *(_QWORD *)(a1 + v57 + 16);
  v60 = v81;
  v82 = v61;
  v62 = a7 + v57;
  *(_OWORD *)v62 = *v58;
  *(_QWORD *)(v62 + 16) = v60;
  *(_QWORD *)(v62 + 24) = v59;
  *(_QWORD *)(v62 + 32) = v61;
  v63 = v17[18];
  v65 = *(_QWORD *)(a1 + v63);
  v80 = *(_QWORD *)(a1 + v63 + 8);
  v64 = v80;
  v66 = (_QWORD *)(a7 + v63);
  *v66 = v65;
  v66[1] = v64;
  v67 = (uint64_t)v89;
  *(_QWORD *)(a7 + v17[19]) = v88;
  v68 = v17[20];
  v70 = *(_QWORD *)(a1 + v68);
  v88 = *(_QWORD *)(a1 + v68 + 8);
  v69 = v88;
  v71 = (_QWORD *)(a7 + v68);
  *v71 = v70;
  v71[1] = v69;
  *(_QWORD *)(a7 + v17[23]) = *(_QWORD *)(a1 + v17[23]);
  v72 = *(_QWORD *)a1;
  sub_1CCA0BEEC(v92, v67, type metadata accessor for FMIPItemUpdateType);
  v73 = v72 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_creationTimestamp;
  v74 = sub_1CCB635B0();
  v75 = *(_QWORD *)(v74 - 8);
  v76 = (uint64_t)v90;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v90, v73, v74);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v75 + 56))(v76, 0, 1, v74);
  type metadata accessor for FMIPItemUpdateContext(0);
  v77 = swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCAF007C((uint64_t)v87, v86);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v78 = sub_1CCAFE724(v67, v76, v77, v72);
  swift_release();
  sub_1CCA0BF30(v92, type metadata accessor for FMIPItemUpdateType);

  result = sub_1CCA0BF30(a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  *(_QWORD *)a7 = v78;
  return result;
}

uint64_t FMIPItem.init(item:safeLocations:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t updated;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t result;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  __int128 v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[296];

  v78 = a2;
  v5 = sub_1CCA14E90(&qword_1ED8A7130);
  MEMORY[0x1E0C80A78](v5);
  v80 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for FMIPItemUpdateType(0);
  v8 = MEMORY[0x1E0C80A78](updated);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = v10;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v65 - v11;
  sub_1CC9C3EC0(a1 + 8, (uint64_t)v84, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)v84, a3 + 8, &qword_1ED8A71C0);
  *(_BYTE *)(a3 + 296) = *(_BYTE *)(a1 + 296);
  v13 = *(_OWORD *)(a1 + 304);
  v79 = *(_OWORD *)(a1 + 320);
  v14 = v79;
  *(_OWORD *)(a3 + 304) = v13;
  *(_OWORD *)(a3 + 320) = v14;
  v15 = *(_QWORD *)(a1 + 336);
  v83 = *(_QWORD *)(a1 + 344);
  v16 = v83;
  *(_QWORD *)(a3 + 336) = v15;
  *(_QWORD *)(a3 + 344) = v16;
  v17 = *(_QWORD *)(a1 + 352);
  v82 = *(_QWORD *)(a1 + 360);
  v18 = v82;
  *(_QWORD *)(a3 + 352) = v17;
  *(_QWORD *)(a3 + 360) = v18;
  v19 = *(_QWORD *)(a1 + 368);
  v81 = *(_QWORD *)(a1 + 376);
  v20 = v81;
  *(_QWORD *)(a3 + 368) = v19;
  *(_QWORD *)(a3 + 376) = v20;
  v21 = (int *)type metadata accessor for FMIPItem();
  *(_BYTE *)(a3 + v21[21]) = *(_BYTE *)(a1 + v21[21]);
  *(_BYTE *)(a3 + v21[22]) = *(_BYTE *)(a1 + v21[22]);
  *(_BYTE *)(a3 + v21[25]) = *(_BYTE *)(a1 + v21[25]);
  v22 = *(_QWORD *)(a1 + 384);
  v77 = *(id *)(a1 + 392);
  v23 = v77;
  v24 = *(_QWORD *)(a1 + 400);
  *(_QWORD *)(a3 + 384) = v22;
  *(_QWORD *)(a3 + 392) = v23;
  *(_QWORD *)(a3 + 400) = v24;
  sub_1CC9EAB74(a1 + v21[13], a3 + v21[13], &qword_1ED8A8CD0);
  v25 = v21[14];
  v27 = *(_QWORD *)(a1 + v25);
  v71 = *(_QWORD *)(a1 + v25 + 8);
  v26 = v71;
  v28 = (_QWORD *)(a3 + v25);
  *v28 = v27;
  v28[1] = v26;
  v29 = v21[15];
  v31 = *(_QWORD *)(a1 + v29);
  v70 = *(_QWORD *)(a1 + v29 + 8);
  v30 = v70;
  v32 = (_QWORD *)(a3 + v29);
  *v32 = v31;
  v32[1] = v30;
  v33 = v21[16];
  v34 = a1 + v33;
  v35 = *(_QWORD *)(a1 + v33);
  v75 = *(_QWORD *)(a1 + v33 + 8);
  v36 = v75;
  v76 = v35;
  v37 = *(_QWORD *)(a1 + v33 + 16);
  v73 = *(_QWORD *)(a1 + v33 + 24);
  v38 = v73;
  v74 = v37;
  v39 = a3 + v33;
  *(_QWORD *)v39 = v35;
  *(_QWORD *)(v39 + 8) = v36;
  *(_QWORD *)(v39 + 16) = v37;
  *(_QWORD *)(v39 + 24) = v38;
  v72 = *(unsigned __int8 *)(v34 + 32);
  *(_BYTE *)(v39 + 32) = v72;
  sub_1CCA0BEEC(a1 + v21[24], a3 + v21[24], (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
  v40 = v21[17];
  v41 = (_OWORD *)(a1 + v40);
  v42 = *(_QWORD *)(a1 + v40 + 24);
  v44 = *(_QWORD *)(a1 + v40 + 32);
  v68 = *(_QWORD *)(a1 + v40 + 16);
  v43 = v68;
  v69 = v44;
  v45 = a3 + v40;
  *(_OWORD *)v45 = *v41;
  *(_QWORD *)(v45 + 16) = v43;
  *(_QWORD *)(v45 + 24) = v42;
  *(_QWORD *)(v45 + 32) = v44;
  v46 = v21[18];
  v47 = *(_QWORD *)(a1 + v46);
  v48 = *(_QWORD *)(a1 + v46 + 8);
  v49 = (_QWORD *)(a3 + v46);
  *v49 = v47;
  v49[1] = v48;
  *(_QWORD *)(a3 + v21[19]) = *(_QWORD *)(a1 + v21[19]);
  v50 = v21[20];
  v51 = *(_QWORD *)(a1 + v50);
  v52 = *(_QWORD *)(a1 + v50 + 8);
  v53 = (_QWORD *)(a3 + v50);
  *v53 = v51;
  v53[1] = v52;
  *(_QWORD *)(a3 + v21[23]) = v78;
  v54 = *(_QWORD *)a1;
  v67 = v12;
  swift_storeEnumTagMultiPayload();
  sub_1CCA0BEEC((uint64_t)v12, (uint64_t)v10, type metadata accessor for FMIPItemUpdateType);
  v55 = v54 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_creationTimestamp;
  v56 = sub_1CCB635B0();
  v57 = *(_QWORD *)(v56 - 8);
  v58 = (uint64_t)v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v80, v55, v56);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v58, 0, 1, v56);
  type metadata accessor for FMIPItemUpdateContext(0);
  v59 = swift_allocObject();
  swift_retain();
  sub_1CCA307F0((uint64_t)v84, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
  v60 = (void *)v79;
  v61 = v77;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v62 = v60;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCAF007C(v76, v75);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v63 = sub_1CCAFE724((uint64_t)v66, v58, v59, v54);
  swift_release();
  sub_1CCA0BF30((uint64_t)v67, type metadata accessor for FMIPItemUpdateType);
  result = sub_1CCA0BF30(a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  *(_QWORD *)a3 = v63;
  return result;
}

uint64_t FMIPItem.init(with:from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  os_log_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  int *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t ObjCClassFromMetadata;
  id v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  _QWORD *v85;
  void *v86;
  id v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  void *v122;
  void *v123;
  Swift::String v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  os_log_type_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t);
  char *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t (*v142)(uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  unint64_t v147;
  os_log_t v148;
  os_log_t v149;
  uint64_t v150;
  os_log_t v151;
  char *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  void *v157;
  unsigned int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  id v174;
  id v175;
  id v176;
  id v177;
  id v178;
  unint64_t v179;
  id v180;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v182;
  id v183;
  char v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  id v199;
  void *v200;
  void *v201;
  void **v202;
  void *v203;
  id v204;
  id v205;
  id v206;
  id v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  id v217;
  unint64_t v218;
  os_log_t v219;
  char v220;
  id v221;
  id v222;
  unint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  NSObject *v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  os_log_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  id v251;
  unint64_t v252;
  char v253;
  id v254;
  id v255;
  unint64_t v256;
  unint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  NSObject *v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  id v286;
  unint64_t v287;
  char v288;
  void *v289;
  id v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  id v300;
  unint64_t v301;
  char v302;
  void *v303;
  id v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  id v314;
  unint64_t v315;
  char v316;
  void *v317;
  id v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char v323;
  BOOL v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  os_log_t v337;
  id v338;
  unint64_t v340;
  int v341;
  uint64_t v342;
  os_log_t v343;
  os_log_t v344;
  id v345;
  id v346;
  id v347;
  id v348;
  uint64_t v349;
  id v350;
  uint64_t v351;
  uint64_t v352;
  id v353;
  void (*v354)(char *, uint64_t);
  uint64_t v355;
  char *v356;
  uint64_t *v357;
  os_log_t v358;
  uint64_t v359;
  uint64_t v360;
  _QWORD v361[3];
  uint64_t v362;
  uint64_t v363;
  _QWORD v364[3];
  uint64_t v365;
  uint64_t v366;
  _QWORD v367[3];
  uint64_t v368;
  uint64_t v369;
  _QWORD v370[3];
  uint64_t v371;
  uint64_t v372;
  _QWORD v373[3];
  uint64_t v374;
  uint64_t v375;
  uint64_t v376[3];
  uint64_t v377;
  uint64_t v378;
  uint64_t v379[3];
  uint64_t v380;
  uint64_t v381;
  uint64_t v382[3];
  uint64_t v383;
  uint64_t v384;
  _QWORD v385[3];
  uint64_t v386;
  uint64_t v387;
  _OWORD v388[18];

  v355 = a2;
  v352 = a3;
  v4 = sub_1CCA14E90(&qword_1ED8A8CD0);
  MEMORY[0x1E0C80A78](v4);
  v357 = (uint64_t *)((char *)&v342 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_1CCB63604();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v356 = (char *)&v342 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v342 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v358 = (os_log_t)type metadata accessor for FMIPItem();
  MEMORY[0x1E0C80A78](v358);
  v13 = (uint64_t *)((char *)&v342 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = a1[3];
  v15 = a1[4];
  sub_1CCA04DDC(a1, v14);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 96))(v14, v15);
  if (!v16)
  {
    v341 = 0;
    v340 = 225;
    sub_1CCB64084();
    __break(1u);
    JUMPOUT(0x1CCAE49D8);
  }
  v17 = (void *)v16;
  sub_1CCA30EF4(v388);
  sub_1CC9C3EC0((uint64_t)v388, (uint64_t)(v13 + 1), &qword_1ED8A71C0);
  v18 = a1[3];
  v19 = a1[4];
  sub_1CCA04DDC(a1, v18);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 40))(v18, v19);
  if (v20 >= 7)
    v21 = 0;
  else
    v21 = v20;
  *((_BYTE *)v13 + 296) = v21;
  v13[40] = 0;
  v13[41] = 0;
  v13[39] = 0;
  v22 = a1[3];
  v23 = a1[4];
  sub_1CCA04DDC(a1, v22);
  (*(void (**)(uint64_t, uint64_t))(v23 + 24))(v22, v23);
  v24 = v6;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6) == 1)
  {
    sub_1CC9C3E84((uint64_t)v11, &qword_1ED8A8EF8);
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v25 = sub_1CCB635C8();
    v26 = v27;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
  v13[42] = v25;
  v13[43] = v26;
  v28 = a1[3];
  v29 = a1[4];
  sub_1CCA04DDC(a1, v28);
  v30 = v356;
  (*(void (**)(uint64_t, uint64_t))(v29 + 16))(v28, v29);
  v31 = sub_1CCB635C8();
  v33 = v32;
  v34 = *(void (**)(char *, uint64_t))(v7 + 8);
  v34(v30, v24);
  v13[44] = v31;
  v13[45] = v33;
  v35 = a1[3];
  v36 = a1[4];
  sub_1CCA04DDC(a1, v35);
  (*(void (**)(uint64_t, uint64_t))(v36 + 48))(v35, v36);
  v37 = sub_1CCB635C8();
  v39 = v38;
  v354 = v34;
  v34(v30, v24);
  v13[46] = v37;
  v13[47] = v39;
  v13[49] = 0;
  v13[50] = 0;
  v13[48] = 0;
  v40 = a1[3];
  v41 = a1[4];
  sub_1CCA04DDC(a1, v40);
  v42 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v41 + 72))(v40, v41);
  if (v42)
  {
    v43 = v42;
    v44 = v357;
    FMIPItemLostModeMetadata.init(lostModeInfo:)(v43, v357);
    v45 = type metadata accessor for FMIPItemLostModeMetadata();
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 0, 1, v45);

  }
  else
  {
    v46 = type metadata accessor for FMIPItemLostModeMetadata();
    v44 = v357;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v357, 1, 1, v46);
  }
  v47 = v358;
  sub_1CC9C3EC0((uint64_t)v44, (uint64_t)v13 + SHIDWORD(v358[6].isa), &qword_1ED8A8CD0);
  v48 = a1[3];
  v49 = a1[4];
  sub_1CCA04DDC(a1, v48);
  v50 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v49 + 88))(v48, v49);
  v51 = objc_msgSend(v50, sel_destination);

  v52 = sub_1CCB63988();
  v54 = v53;

  v55 = (uint64_t *)((char *)v13 + SHIDWORD(v47[7].isa));
  *v55 = v52;
  v55[1] = v54;
  v56 = v17;
  v57 = objc_msgSend(v56, sel_roleEmoji);
  v58 = sub_1CCB63988();
  v60 = v59;

  v61 = objc_msgSend(v56, sel_role);
  v62 = sub_1CCB63988();
  v64 = v63;

  v65 = objc_msgSend(v56, sel_roleId);
  v350 = v56;

  v66 = (int *)v358;
  v67 = (uint64_t *)((char *)v13 + SHIDWORD(v358[8].isa));
  *v67 = v65;
  v67[1] = v58;
  v67[2] = v60;
  v67[3] = v62;
  v67[4] = v64;
  v68 = a1[3];
  v69 = a1[4];
  sub_1CCA04DDC(a1, v68);
  v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 104))(v68, v69);
  if (v70)
  {
    v72 = v70;
  }
  else
  {
    type metadata accessor for FMLocalize();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v74 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v340 = 0xE000000000000000;
    v71 = sub_1CCB63340();
    v72 = v75;

  }
  v76 = (uint64_t *)((char *)v13 + v66[18]);
  *v76 = v71;
  v76[1] = v72;
  v77 = a1[3];
  v78 = a1[4];
  sub_1CCA04DDC(a1, v77);
  v79 = (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 112))(v77, v78);
  v80 = (uint64_t *)((char *)v13 + v66[20]);
  *v80 = v79;
  v80[1] = v81;
  *(uint64_t *)((char *)v13 + v66[23]) = MEMORY[0x1E0DEE9D8];
  v82 = a1[3];
  v83 = a1[4];
  sub_1CCA04DDC(a1, v82);
  v84 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v83 + 128))(v82, v83);
  v85 = &unk_1ED8AA000;
  v357 = v13;
  v351 = v24;
  if (v84
    && (v86 = v84,
        v87 = objc_msgSend(v84, sel_layoutTemplate),
        v86,
        v87))
  {
    sub_1CC9C30A8(0, &qword_1EF9E3DA0);
    v88 = sub_1CCB63B38();

    MEMORY[0x1E0C80A78](v89);
    v340 = (unint64_t)a1;
    v90 = sub_1CCAE0C20((uint64_t (*)(id *))sub_1CCAF00BC, (uint64_t)(&v342 - 4), v88);
    v353 = 0;
    swift_bridgeObjectRelease();
    if (v90)
    {
      v91 = v90;
      v92 = objc_msgSend(v91, sel_partName);
      v93 = sub_1CCB63988();
      v95 = v94;

      v96 = objc_msgSend(v91, sel_partSymbol);
      if (v96)
      {
        v97 = v96;
        v348 = (id)sub_1CCB63988();
        v349 = v98;

      }
      else
      {
        v348 = 0;
        v349 = 0;
      }
      v120 = objc_msgSend(v91, sel_partType);
      v121 = sub_1CCB63988();
      v123 = v122;

      v124._countAndFlagsBits = v121;
      v124._object = v123;
      FMIPPartType.init(rawValue:)(v124);

      if (LOBYTE(v385[0]) == 5)
        LODWORD(v125) = 4;
      else
        LODWORD(v125) = LOBYTE(v385[0]);
      if (qword_1ED8AA630 != -1)
        swift_once();
      v126 = sub_1CCB637FC();
      sub_1CCA16C20(v126, (uint64_t)qword_1ED8AD7F8);
      sub_1CC9EBC94((uint64_t)a1, (uint64_t)v385);
      sub_1CC9EBC94((uint64_t)a1, (uint64_t)v382);
      v127 = v349;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v128 = sub_1CCB637D8();
      v129 = sub_1CCB63D48();
      LODWORD(v346) = v129;
      if (os_log_type_enabled(v128, v129))
      {
        v130 = swift_slowAlloc();
        LODWORD(v347) = v125;
        v125 = v130;
        v344 = (os_log_t)swift_slowAlloc();
        v376[0] = (uint64_t)v344;
        *(_DWORD *)v125 = 136315650;
        v342 = v125 + 4;
        v131 = v24;
        v345 = v91;
        v132 = v93;
        v134 = v386;
        v133 = v387;
        sub_1CCA04DDC(v385, v386);
        v135 = *(void (**)(uint64_t, uint64_t))(v133 + 16);
        v136 = v356;
        v343 = v128;
        v135(v134, v133);
        sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v137 = sub_1CCB64240();
        v139 = v138;
        v354(v136, v131);
        v379[0] = sub_1CCA0CB60(v137, v139, v376);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        sub_1CCA01CA0((uint64_t)v385);
        *(_WORD *)(v125 + 12) = 2048;
        v140 = v383;
        v141 = v384;
        sub_1CCA04DDC(v382, v383);
        v142 = *(uint64_t (**)(uint64_t, uint64_t))(v141 + 64);
        v143 = v141;
        v13 = v357;
        v144 = v142(v140, v143);
        sub_1CCA01CA0((uint64_t)v382);
        v379[0] = v144;
        sub_1CCB63E44();
        *(_WORD *)(v125 + 22) = 2080;
        v379[0] = v132;
        v379[1] = v95;
        v145 = v348;
        v379[2] = (uint64_t)v348;
        v380 = v349;
        LOBYTE(v381) = (_BYTE)v347;
        FMIPPartInfo.debugDescription.getter();
        v379[0] = sub_1CCA0CB60(v146, v147, v376);
        v127 = v349;
        v93 = v132;
        sub_1CCB63E44();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        v148 = v343;
        _os_log_impl(&dword_1CC9BF000, v343, (os_log_type_t)v346, "FMIPItem: Part info for %s (part identifier: %ld) is %s", (uint8_t *)v125, 0x20u);
        v149 = v344;
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v149, -1, -1);
        v150 = v125;
        LOBYTE(v125) = (_BYTE)v347;
        MEMORY[0x1D17B214C](v150, -1, -1);

      }
      else
      {
        sub_1CCA01CA0((uint64_t)v382);

        sub_1CCA01CA0((uint64_t)v385);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        v145 = v348;
      }
      v151 = v358;
      v152 = (char *)v13 + SLODWORD(v358[8].isa);
      *(_QWORD *)v152 = v93;
      *((_QWORD *)v152 + 1) = v95;
      *((_QWORD *)v152 + 2) = v145;
      *((_QWORD *)v152 + 3) = v127;
      v152[32] = v125;
      v66 = (int *)v151;
      v153 = (uint64_t *)((char *)v13 + SLODWORD(v151[7].isa));
      *v153 = v93;
      v153[1] = v95;
      swift_bridgeObjectRetain();
      goto LABEL_37;
    }
    v85 = (_QWORD *)&unk_1ED8AA000;
  }
  else
  {
    v353 = 0;
  }
  if (v85[198] != -1)
    swift_once();
  v99 = sub_1CCB637FC();
  sub_1CCA16C20(v99, (uint64_t)qword_1ED8AD7F8);
  sub_1CC9EBC94((uint64_t)a1, (uint64_t)v385);
  sub_1CC9EBC94((uint64_t)a1, (uint64_t)v382);
  v100 = sub_1CCB637D8();
  v101 = sub_1CCB63D48();
  if (os_log_type_enabled(v100, v101))
  {
    v102 = swift_slowAlloc();
    v349 = swift_slowAlloc();
    v379[0] = v349;
    *(_DWORD *)v102 = 136315394;
    v103 = v24;
    v348 = (id)(v102 + 4);
    v105 = v386;
    v104 = v387;
    sub_1CCA04DDC(v385, v386);
    v106 = v356;
    (*(void (**)(uint64_t, uint64_t))(v104 + 16))(v105, v104);
    sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v107 = sub_1CCB64240();
    v109 = v108;
    v354(v106, v103);
    v376[0] = sub_1CCA0CB60(v107, v109, v379);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA01CA0((uint64_t)v385);
    *(_WORD *)(v102 + 12) = 2048;
    v111 = v383;
    v110 = v384;
    sub_1CCA04DDC(v382, v383);
    v112 = (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 64))(v111, v110);
    sub_1CCA01CA0((uint64_t)v382);
    v376[0] = v112;
    v13 = v357;
    v66 = (int *)v358;
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v100, v101, "FMIPItem: No part info provided for beacon%s (part identifier: %ld)", (uint8_t *)v102, 0x16u);
    v113 = v349;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v113, -1, -1);
    MEMORY[0x1D17B214C](v102, -1, -1);
  }
  else
  {
    sub_1CCA01CA0((uint64_t)v382);
    sub_1CCA01CA0((uint64_t)v385);
  }

  v114 = (char *)v13 + v66[16];
  v114[32] = 0;
  *(_OWORD *)v114 = 0u;
  *((_OWORD *)v114 + 1) = 0u;
  v115 = a1[3];
  v116 = a1[4];
  sub_1CCA04DDC(a1, v115);
  v117 = (*(uint64_t (**)(uint64_t, uint64_t))(v116 + 8))(v115, v116);
  v118 = (uint64_t *)((char *)v13 + v66[14]);
  *v118 = v117;
  v118[1] = v119;
LABEL_37:
  sub_1CC9EBC94((uint64_t)a1, (uint64_t)v385);
  sub_1CCA358A4(v385, (uint64_t)v13 + v66[24]);
  v154 = a1[3];
  v155 = a1[4];
  sub_1CCA04DDC(a1, v154);
  v156 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v155 + 128))(v154, v155);
  if (v156)
  {
    v157 = v156;
    v158 = objc_msgSend(v156, sel_eligibleForPairing);

    v159 = v158 ^ 1;
  }
  else
  {
    v159 = 0;
  }
  v160 = v66[25];
  LODWORD(v349) = v159;
  *((_BYTE *)v13 + v160) = v159;
  v161 = a1[3];
  v162 = a1[4];
  sub_1CCA04DDC(a1, v161);
  *((_BYTE *)v13 + v66[21]) = (*(uint64_t (**)(uint64_t, uint64_t))(v162 + 152))(v161, v162) & 1;
  v163 = a1[3];
  v164 = a1[4];
  sub_1CCA04DDC(a1, v163);
  *((_BYTE *)v13 + v66[22]) = (*(uint64_t (**)(uint64_t, uint64_t))(v164 + 136))(v163, v164) == 76;
  sub_1CCA14E90(&qword_1EF9E1E50);
  v165 = swift_allocObject();
  *(_OWORD *)(v165 + 16) = xmmword_1CCB6F0B0;
  v166 = (void *)*MEMORY[0x1E0D89A08];
  *(_QWORD *)(v165 + 32) = *MEMORY[0x1E0D89A08];
  *(_QWORD *)(v165 + 40) = 16;
  v167 = (void *)*MEMORY[0x1E0D89A30];
  *(_QWORD *)(v165 + 48) = *MEMORY[0x1E0D89A30];
  *(_QWORD *)(v165 + 56) = 4;
  v168 = (void *)*MEMORY[0x1E0D89A18];
  *(_QWORD *)(v165 + 64) = *MEMORY[0x1E0D89A18];
  *(_QWORD *)(v165 + 72) = 2;
  v169 = (void *)*MEMORY[0x1E0D89A20];
  *(_QWORD *)(v165 + 80) = *MEMORY[0x1E0D89A20];
  *(_QWORD *)(v165 + 88) = 8;
  v170 = (void *)*MEMORY[0x1E0D89A38];
  *(_QWORD *)(v165 + 96) = *MEMORY[0x1E0D89A38];
  *(_QWORD *)(v165 + 104) = 128;
  v171 = (void *)*MEMORY[0x1E0D89A00];
  *(_QWORD *)(v165 + 112) = *MEMORY[0x1E0D89A00];
  *(_QWORD *)(v165 + 120) = 256;
  v172 = (void *)*MEMORY[0x1E0D89A10];
  *(_QWORD *)(v165 + 128) = *MEMORY[0x1E0D89A10];
  *(_QWORD *)(v165 + 136) = 64;
  v173 = (void *)*MEMORY[0x1E0D89A58];
  *(_QWORD *)(v165 + 144) = *MEMORY[0x1E0D89A58];
  *(_QWORD *)(v165 + 152) = 512;
  v348 = v166;
  v346 = v167;
  v174 = v168;
  v347 = v169;
  v175 = v170;
  v176 = v171;
  v177 = v172;
  v178 = v173;
  v179 = sub_1CCAC4E7C(v165);
  v180 = (id)*MEMORY[0x1E0D89A40];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v385[0] = v179;
  sub_1CCAEB3E0(32, v180, isUniquelyReferenced_nonNull_native);
  v182 = v385[0];

  swift_bridgeObjectRelease();
  v183 = (id)*MEMORY[0x1E0D89A48];
  v184 = swift_isUniquelyReferenced_nonNull_native();
  v385[0] = v182;
  sub_1CCAEB3E0(1024, v183, v184);
  v185 = (void *)v385[0];

  v186 = swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v186);
  v340 = (unint64_t)a1;
  v187 = swift_bridgeObjectRetain();
  sub_1CCACCD58(v187, (void (*)(_QWORD *__return_ptr))sub_1CCAF00AC);
  v189 = v188;
  swift_bridgeObjectRelease();
  v190 = *(_QWORD *)(v189 + 16);
  if (v190)
  {
    v191 = 0;
    v192 = (uint64_t *)(v189 + 32);
    do
    {
      v194 = *v192++;
      v193 = v194;
      if ((v194 & ~v191) == 0)
        v193 = 0;
      v191 |= v193;
      --v190;
    }
    while (v190);
  }
  else
  {
    v191 = 0;
  }
  swift_bridgeObjectRelease();
  v195 = a1[3];
  v196 = a1[4];
  sub_1CCA04DDC(a1, v195);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v196 + 168))(v195, v196) & 1 | ((v191 & 0x10) == 0))
    v197 = v191;
  else
    v197 = v191 & 0xFFFFFFFFFFFFFFEFLL;
  v357[38] = v197;
  sub_1CCA14E90(&qword_1EF9E1E48);
  v198 = swift_allocObject();
  *(_OWORD *)(v198 + 16) = xmmword_1CCB6AE80;
  v199 = v346;
  v200 = v347;
  *(_QWORD *)(v198 + 32) = v346;
  *(_OWORD *)(v198 + 40) = xmmword_1CCB6AE90;
  *(_QWORD *)(v198 + 56) = v174;
  *(_OWORD *)(v198 + 64) = xmmword_1CCB6AEA0;
  v201 = v348;
  *(_QWORD *)(v198 + 80) = v348;
  *(_OWORD *)(v198 + 88) = xmmword_1CCB6AEB0;
  *(_QWORD *)(v198 + 104) = v200;
  v202 = (void **)MEMORY[0x1E0D89A28];
  *(_OWORD *)(v198 + 112) = xmmword_1CCB6AEC0;
  v203 = *v202;
  *(_QWORD *)(v198 + 128) = *v202;
  *(_OWORD *)(v198 + 136) = xmmword_1CCB6AED0;
  v204 = v199;
  v205 = v174;
  v206 = v201;
  v353 = v200;
  v207 = v203;
  v208 = sub_1CCAC4D70(v198);
  v209 = MEMORY[0x1E0C80A78](v208);
  v340 = (unint64_t)a1;
  sub_1CCACD0A4(v209, (void (*)(_QWORD *__return_ptr))sub_1CCAF00B4);
  v211 = v210;
  swift_bridgeObjectRelease();
  v385[0] = &unk_1E88EC0F8;
  sub_1CCAC890C(v211);
  v212 = (_QWORD *)v385[0];
  v213 = a1[3];
  v214 = a1[4];
  sub_1CCA04DDC(a1, v213);
  v215 = (*(uint64_t (**)(uint64_t, uint64_t))(v214 + 80))(v213, v214);
  v216 = *(_QWORD *)(v215 + 16);
  v346 = v204;
  if (v216)
  {
    v217 = v204;
    v218 = sub_1CCAC8DD0((uint64_t)v217);
    v219 = v358;
    if ((v220 & 1) != 0)
    {
      v221 = *(id *)(*(_QWORD *)(v215 + 56) + 8 * v218);

      swift_bridgeObjectRelease();
      v222 = objc_msgSend(v221, sel_state);

      v223 = (unint64_t)v222;
    }
    else
    {

      swift_bridgeObjectRelease();
      v223 = -1;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v223 = -1;
    v219 = v358;
  }
  v224 = v357;
  if (qword_1EF9DEF78 != -1)
    swift_once();
  v225 = sub_1CCB637FC();
  sub_1CCA16C20(v225, (uint64_t)qword_1EF9FF4D8);
  sub_1CC9EBC94((uint64_t)a1, (uint64_t)v385);
  v226 = sub_1CCB637D8();
  v227 = sub_1CCB63D48();
  if (os_log_type_enabled(v226, (os_log_type_t)v227))
  {
    LODWORD(v343) = v227;
    v344 = v226;
    v228 = swift_slowAlloc();
    v229 = swift_slowAlloc();
    v382[0] = v229;
    *(_DWORD *)v228 = 136446723;
    v347 = (id)v223;
    v348 = (id)v225;
    v345 = v185;
    v342 = v229;
    v230 = 0xE800000000000000;
    v231 = 0x6E776F6E6B6E752ELL;
    switch(v223)
    {
      case 0xFFFFFFFFFFFFFFFFLL:
        break;
      case 0uLL:
        v231 = 0x676E696E6E75722ELL;
        break;
      case 1uLL:
        v231 = 0x676E69646E65702ELL;
        break;
      case 2uLL:
        v230 = 0xE500000000000000;
        v231 = 0x656C64692ELL;
        break;
      case 3uLL:
        v230 = 0xE600000000000000;
        v231 = 0x726F7272652ELL;
        break;
      case 4uLL:
        v230 = 0xE700000000000000;
        v231 = 0x6465756575712ELL;
        break;
      default:
        v230 = 0xEF65756C61565F64;
        v231 = 0x656C646E61686E55;
        break;
    }
    v379[0] = sub_1CCA0CB60(v231, v230, v382);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    *(_WORD *)(v228 + 12) = 2160;
    v379[0] = 1752392040;
    sub_1CCB63E44();
    *(_WORD *)(v228 + 22) = 2081;
    v232 = v386;
    v233 = v387;
    sub_1CCA04DDC(v385, v386);
    v234 = v356;
    (*(void (**)(uint64_t, uint64_t))(v233 + 16))(v232, v233);
    sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v235 = v351;
    v236 = sub_1CCB64240();
    v238 = v237;
    v354(v234, v235);
    v379[0] = sub_1CCA0CB60(v236, v238, v382);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1CCA01CA0((uint64_t)v385);
    v239 = v344;
    _os_log_impl(&dword_1CC9BF000, v344, (os_log_type_t)v343, "FMIPItem reported taskInfo PlaySound %{public}s for %{private,mask.hash}s.", (uint8_t *)v228, 0x20u);
    v240 = v342;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v240, -1, -1);
    MEMORY[0x1D17B214C](v228, -1, -1);

    v224 = v357;
    v219 = v358;
    v223 = (unint64_t)v347;
    v225 = (uint64_t)v348;
  }
  else
  {

    sub_1CCA01CA0((uint64_t)v385);
    swift_bridgeObjectRelease();
    if (v223 > 4)
      goto LABEL_90;
  }
  switch(v223)
  {
    case 0uLL:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v212 = sub_1CCAC9BA8(0, v212[2] + 1, 1, v212);
      v242 = v212[2];
      v241 = v212[3];
      v243 = v242 + 1;
      if (v242 >= v241 >> 1)
        v212 = sub_1CCAC9BA8((_QWORD *)(v241 > 1), v242 + 1, 1, v212);
      v244 = 2;
      goto LABEL_89;
    case 1uLL:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v212 = sub_1CCAC9BA8(0, v212[2] + 1, 1, v212);
      v242 = v212[2];
      v246 = v212[3];
      v243 = v242 + 1;
      if (v242 >= v246 >> 1)
        v212 = sub_1CCAC9BA8((_QWORD *)(v246 > 1), v242 + 1, 1, v212);
      v244 = 4;
      goto LABEL_89;
    case 3uLL:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v212 = sub_1CCAC9BA8(0, v212[2] + 1, 1, v212);
      v242 = v212[2];
      v245 = v212[3];
      v243 = v242 + 1;
      if (v242 >= v245 >> 1)
        v212 = sub_1CCAC9BA8((_QWORD *)(v245 > 1), v242 + 1, 1, v212);
      v244 = 4096;
      goto LABEL_89;
    case 4uLL:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v212 = sub_1CCAC9BA8(0, v212[2] + 1, 1, v212);
      v242 = v212[2];
      v247 = v212[3];
      v243 = v242 + 1;
      if (v242 >= v247 >> 1)
        v212 = sub_1CCAC9BA8((_QWORD *)(v247 > 1), v242 + 1, 1, v212);
      v244 = 2048;
LABEL_89:
      v212[2] = v243;
      v212[v242 + 4] = v244;
      break;
    default:
      break;
  }
LABEL_90:
  v248 = a1[3];
  v249 = a1[4];
  sub_1CCA04DDC(a1, v248);
  v250 = (*(uint64_t (**)(uint64_t, uint64_t))(v249 + 80))(v248, v249);
  if (!*(_QWORD *)(v250 + 16))
  {
LABEL_100:
    swift_bridgeObjectRelease();
    goto LABEL_107;
  }
  v251 = (id)*MEMORY[0x1E0D899F8];
  v252 = sub_1CCAC8DD0((uint64_t)v251);
  if ((v253 & 1) == 0)
  {

    goto LABEL_100;
  }
  v254 = *(id *)(*(_QWORD *)(v250 + 56) + 8 * v252);

  swift_bridgeObjectRelease();
  v255 = objc_msgSend(v254, sel_state);

  if (v255)
  {
    if (v255 != (id)1)
      goto LABEL_107;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v212 = sub_1CCAC9BA8(0, v212[2] + 1, 1, v212);
    v257 = v212[2];
    v256 = v212[3];
    if (v257 >= v256 >> 1)
      v212 = sub_1CCAC9BA8((_QWORD *)(v256 > 1), v257 + 1, 1, v212);
    v212[2] = v257 + 1;
    v258 = &v212[v257];
    v259 = 1024;
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v212 = sub_1CCAC9BA8(0, v212[2] + 1, 1, v212);
    v261 = v212[2];
    v260 = v212[3];
    if (v261 >= v260 >> 1)
      v212 = sub_1CCAC9BA8((_QWORD *)(v260 > 1), v261 + 1, 1, v212);
    v212[2] = v261 + 1;
    v258 = &v212[v261];
    v259 = 512;
  }
  v258[4] = v259;
LABEL_107:
  v262 = a1[3];
  v263 = a1[4];
  sub_1CCA04DDC(a1, v262);
  v264 = (*(uint64_t (**)(uint64_t, uint64_t))(v263 + 176))(v262, v263);
  if (v349 & 1 | ((v264 & 1) == 0))
  {
    v265 = v212[2];
    v266 = v355;
    if (!v265)
    {
      v267 = 0;
      goto LABEL_119;
    }
  }
  else
  {
    v268 = swift_isUniquelyReferenced_nonNull_native();
    v266 = v355;
    if ((v268 & 1) == 0)
      v212 = sub_1CCAC9BA8(0, v212[2] + 1, 1, v212);
    v270 = v212[2];
    v269 = v212[3];
    v265 = v270 + 1;
    if (v270 >= v269 >> 1)
      v212 = sub_1CCAC9BA8((_QWORD *)(v269 > 1), v270 + 1, 1, v212);
    v212[2] = v265;
    v212[v270 + 4] = 64;
  }
  v271 = 0;
  v267 = 0;
  do
  {
    v272 = v212[v271 + 4];
    if ((v272 & ~v267) == 0)
      v272 = 0;
    v267 |= v272;
    ++v271;
  }
  while (v265 != v271);
LABEL_119:
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)v224 + SHIDWORD(v219[9].isa)) = v267;
  *v224 = v266;
  v273 = qword_1ED8AA630;
  swift_retain();
  if (v273 != -1)
    swift_once();
  sub_1CCA16C20(v225, (uint64_t)qword_1ED8AD7F8);
  sub_1CC9EBC94((uint64_t)a1, (uint64_t)v385);
  sub_1CC9EBC94((uint64_t)a1, (uint64_t)v382);
  sub_1CC9EBC94((uint64_t)a1, (uint64_t)v379);
  sub_1CC9EBC94((uint64_t)a1, (uint64_t)v376);
  sub_1CC9EBC94((uint64_t)a1, (uint64_t)v373);
  sub_1CC9EBC94((uint64_t)a1, (uint64_t)v370);
  sub_1CC9EBC94((uint64_t)a1, (uint64_t)v367);
  sub_1CC9EBC94((uint64_t)a1, (uint64_t)v364);
  sub_1CC9EBC94((uint64_t)a1, (uint64_t)v361);
  v274 = sub_1CCB637D8();
  v275 = sub_1CCB63D48();
  if (os_log_type_enabled(v274, (os_log_type_t)v275))
  {
    LODWORD(v349) = v275;
    v358 = v274;
    v276 = swift_slowAlloc();
    v277 = swift_slowAlloc();
    v360 = v277;
    *(_DWORD *)v276 = 136317186;
    v278 = v386;
    v279 = v387;
    sub_1CCA04DDC(v385, v386);
    v280 = (*(uint64_t (**)(uint64_t, uint64_t))(v279 + 8))(v278, v279);
    v359 = sub_1CCA0CB60(v280, v281, &v360);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA01CA0((uint64_t)v385);
    *(_WORD *)(v276 + 12) = 2080;
    v282 = v383;
    v283 = v384;
    sub_1CCA04DDC(v382, v383);
    v284 = (*(uint64_t (**)(uint64_t, uint64_t))(v283 + 80))(v282, v283);
    v285 = *(_QWORD *)(v284 + 16);
    v348 = (id)v277;
    if (v285)
    {
      v286 = v346;
      v287 = sub_1CCAC8DD0((uint64_t)v286);
      if ((v288 & 1) != 0)
      {
        v289 = *(void **)(*(_QWORD *)(v284 + 56) + 8 * v287);
        v290 = v289;
      }
      else
      {
        v289 = 0;
      }

    }
    else
    {
      v289 = 0;
    }
    swift_bridgeObjectRelease();
    v359 = (uint64_t)v289;
    sub_1CCA14E90(&qword_1EF9E1E68);
    v291 = sub_1CCB639AC();
    v359 = sub_1CCA0CB60(v291, v292, &v360);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA01CA0((uint64_t)v382);
    *(_WORD *)(v276 + 22) = 2080;
    v294 = v380;
    v293 = v381;
    sub_1CCA04DDC(v379, v380);
    v295 = (*(uint64_t (**)(uint64_t, uint64_t))(v293 + 8))(v294, v293);
    v359 = sub_1CCA0CB60(v295, v296, &v360);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA01CA0((uint64_t)v379);
    *(_WORD *)(v276 + 32) = 2080;
    v297 = v377;
    v298 = v378;
    sub_1CCA04DDC(v376, v377);
    v299 = (*(uint64_t (**)(uint64_t, uint64_t))(v298 + 80))(v297, v298);
    if (*(_QWORD *)(v299 + 16))
    {
      v300 = (id)*MEMORY[0x1E0D89A50];
      v301 = sub_1CCAC8DD0((uint64_t)v300);
      if ((v302 & 1) != 0)
      {
        v303 = *(void **)(*(_QWORD *)(v299 + 56) + 8 * v301);
        v304 = v303;
      }
      else
      {
        v303 = 0;
      }

    }
    else
    {
      v303 = 0;
    }
    swift_bridgeObjectRelease();
    v359 = (uint64_t)v303;
    v305 = sub_1CCB639AC();
    v359 = sub_1CCA0CB60(v305, v306, &v360);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA01CA0((uint64_t)v376);
    *(_WORD *)(v276 + 42) = 2080;
    v307 = v374;
    v308 = v375;
    sub_1CCA04DDC(v373, v374);
    v309 = (*(uint64_t (**)(uint64_t, uint64_t))(v308 + 8))(v307, v308);
    v359 = sub_1CCA0CB60(v309, v310, &v360);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA01CA0((uint64_t)v373);
    *(_WORD *)(v276 + 52) = 2080;
    v311 = v371;
    v312 = v372;
    sub_1CCA04DDC(v370, v371);
    v313 = (*(uint64_t (**)(uint64_t, uint64_t))(v312 + 80))(v311, v312);
    if (*(_QWORD *)(v313 + 16))
    {
      v314 = v353;
      v315 = sub_1CCAC8DD0((uint64_t)v314);
      v224 = v357;
      if ((v316 & 1) != 0)
      {
        v317 = *(void **)(*(_QWORD *)(v313 + 56) + 8 * v315);
        v318 = v317;
      }
      else
      {
        v317 = 0;
      }

    }
    else
    {
      v317 = 0;
      v224 = v357;
    }
    swift_bridgeObjectRelease();
    v359 = (uint64_t)v317;
    v319 = sub_1CCB639AC();
    v359 = sub_1CCA0CB60(v319, v320, &v360);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA01CA0((uint64_t)v370);
    *(_WORD *)(v276 + 62) = 2080;
    v321 = v368;
    v322 = v369;
    sub_1CCA04DDC(v367, v368);
    v323 = (*(uint64_t (**)(uint64_t, uint64_t))(v322 + 176))(v321, v322);
    v324 = (v323 & 1) == 0;
    if ((v323 & 1) != 0)
      v325 = 0;
    else
      v325 = 7630702;
    if (v324)
      v326 = 0xE300000000000000;
    else
      v326 = 0xE000000000000000;
    v359 = sub_1CCA0CB60(v325, v326, &v360);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA01CA0((uint64_t)v367);
    *(_WORD *)(v276 + 72) = 2080;
    v327 = v365;
    v328 = v366;
    sub_1CCA04DDC(v364, v365);
    v329 = (*(uint64_t (**)(uint64_t, uint64_t))(v328 + 8))(v327, v328);
    v359 = sub_1CCA0CB60(v329, v330, &v360);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA01CA0((uint64_t)v364);
    *(_WORD *)(v276 + 82) = 2080;
    v331 = v362;
    v332 = v363;
    sub_1CCA04DDC(v361, v362);
    v333 = v356;
    (*(void (**)(uint64_t, uint64_t))(v332 + 16))(v331, v332);
    v334 = sub_1CCB635C8();
    v336 = v335;
    v354(v333, v351);
    v359 = sub_1CCA0CB60(v334, v336, &v360);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA01CA0((uint64_t)v361);
    v337 = v358;
    _os_log_impl(&dword_1CC9BF000, v358, (os_log_type_t)v349, "FMIPItem: %s taskInfo -> play sound %s\nFMIPItem: %s taskInfo -> stop sound %s\nFMIPItem: %s taskInfo -> notify when found active %s\n☎︎ FMIPItem: beacon is %s connected, '%s': %s", (uint8_t *)v276, 0x5Cu);
    v338 = v348;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v338, -1, -1);
    MEMORY[0x1D17B214C](v276, -1, -1);

  }
  else
  {

    sub_1CCA01CA0((uint64_t)v385);
    sub_1CCA01CA0((uint64_t)v382);
    sub_1CCA01CA0((uint64_t)v379);
    sub_1CCA01CA0((uint64_t)v376);
    sub_1CCA01CA0((uint64_t)v373);
    sub_1CCA01CA0((uint64_t)v370);
    sub_1CCA01CA0((uint64_t)v367);
    sub_1CCA01CA0((uint64_t)v364);
    sub_1CCA01CA0((uint64_t)v361);

  }
  swift_release();
  sub_1CC9FED60((uint64_t)v224, v352, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  return sub_1CCA01CA0((uint64_t)a1);
}

uint64_t FMItemCapabilities.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static FMItemCapabilities.canEnableSharing.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

uint64_t sub_1CCAE4A20()
{
  sub_1CCAF03C8();
  return sub_1CCB63AFC();
}

uint64_t sub_1CCAE4A7C()
{
  sub_1CCAF03C8();
  return sub_1CCB63AE4();
}

uint64_t FMIPItemState.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static FMIPItemState.normal.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static FMIPItemState.soundPlaying.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static FMIPItemState.soundPending.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static FMIPItemState.markLostActive.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static FMIPItemState.separationWarningActive.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static FMIPItemState.isBTConnected.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static FMIPItemState.isLocating.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

void static FMIPItemState.isNotifyWhenFoundActive.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

void static FMIPItemState.isFirmwareUpdating.getter(_QWORD *a1@<X8>)
{
  *a1 = 512;
}

void static FMIPItemState.isFirmwareUpdatePending.getter(_QWORD *a1@<X8>)
{
  *a1 = 1024;
}

void static FMIPItemState.soundQueued.getter(_QWORD *a1@<X8>)
{
  *a1 = 2048;
}

void static FMIPItemState.soundError.getter(_QWORD *a1@<X8>)
{
  *a1 = 4096;
}

void static FMIPItemState.pairingLocked.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x2000;
}

void static FMIPItemState.isInCase.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x4000;
}

void static FMIPItemState.pairingIncomplete.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x8000;
}

unint64_t sub_1CCAE4B8C@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 7;
  if (result < 7)
    v2 = result;
  *a2 = v2;
  return result;
}

FMIPCore::FMIPItemBatteryStatus_optional __swiftcall FMIPItemBatteryStatus.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 7;
  if ((unint64_t)rawValue < 7)
    v2 = rawValue;
  *v1 = v2;
  return (FMIPCore::FMIPItemBatteryStatus_optional)rawValue;
}

uint64_t FMIPItemBatteryStatus.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

FMIPCore::FMIPItemBatteryStatus_optional sub_1CCAE4BBC(Swift::Int *a1)
{
  return FMIPItemBatteryStatus.init(rawValue:)(*a1);
}

uint64_t sub_1CCAE4BC4()
{
  sub_1CCAF37FC();
  return sub_1CCB63AFC();
}

uint64_t sub_1CCAE4C20()
{
  sub_1CCAF37FC();
  return sub_1CCB63AE4();
}

uint64_t FMIPPartInfo.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPPartInfo.symbol.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void FMIPPartInfo.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

FMIPCore::FMIPPartType_optional __swiftcall FMIPPartType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  FMIPCore::FMIPPartType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

void FMIPPartInfo.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 32);
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  __asm { BR              X9 }
}

uint64_t sub_1CCAE4E40()
{
  uint64_t v1;

  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t FMIPPartType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCAE4EFC + 4 * byte_1CCB6E3EF[*v0]))(0x6F6C61646E617473, 0xEA0000000000656ELL);
}

uint64_t sub_1CCAE4EFC()
{
  return 1702060387;
}

uint64_t sub_1CCAE4F0C()
{
  return 0x6475427466656CLL;
}

uint64_t sub_1CCAE4F24()
{
  return 0x6475427468676972;
}

uint64_t sub_1CCAE4F3C()
{
  return 0x636972656E6567;
}

uint64_t sub_1CCAE4F58()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6C6F626D7973;
  if (*v0 != 1)
    v1 = 1701869940;
  if (*v0)
    return v1;
  else
    return 1701667182;
}

uint64_t sub_1CCAE4FA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCAF35F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCAE4FC4()
{
  sub_1CCAF0130();
  return sub_1CCB643D8();
}

uint64_t sub_1CCAE4FEC()
{
  sub_1CCAF0130();
  return sub_1CCB643E4();
}

uint64_t FMIPPartInfo.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v11[4];
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v3 = sub_1CCA14E90(&qword_1EF9E3DA8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v11[1] = *(_QWORD *)(v1 + 24);
  v11[2] = v7;
  v12 = *(unsigned __int8 *)(v1 + 32);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCAF0130();
  sub_1CCB643CC();
  v16 = 0;
  v8 = v11[3];
  sub_1CCB641E0();
  if (!v8)
  {
    v9 = v12;
    v15 = 1;
    sub_1CCB641BC();
    v14 = v9;
    v13 = 2;
    sub_1CCAF0174();
    sub_1CCB64210();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t FMIPPartInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v5 = sub_1CCA14E90(&qword_1EF9E3DC0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCAF0130();
  sub_1CCB643B4();
  if (v2)
    return sub_1CCA01CA0((uint64_t)a1);
  v25 = 0;
  v9 = sub_1CCB64150();
  v11 = v10;
  v21 = v9;
  v24 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_1CCB64120();
  v14 = v13;
  v19 = v12;
  v22 = 2;
  sub_1CCAF01B8();
  swift_bridgeObjectRetain();
  v20 = v14;
  sub_1CCB64180();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v23;
  v16 = v20;
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v16;
  *(_BYTE *)(a2 + 32) = v15;
  sub_1CCA01CA0((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCAE53C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPPartInfo.init(from:)(a1, a2);
}

uint64_t sub_1CCAE53D4(_QWORD *a1)
{
  return FMIPPartInfo.encode(to:)(a1);
}

BOOL static FMIPPartType.< infix(_:_:)(char *a1, char *a2)
{
  return flt_1CCB6F088[*a1] < flt_1CCB6F088[*a2];
}

void sub_1CCAE5414(char *a1)
{
  sub_1CCB1DD68(*a1);
}

void sub_1CCAE5420()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCAE5470()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCAE54F0()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCAE5530()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCAE559C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCAE55E8()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPPartType_optional sub_1CCAE5668(Swift::String *a1)
{
  return FMIPPartType.init(rawValue:)(*a1);
}

uint64_t sub_1CCAE5674()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCAE56A8 + 4 * byte_1CCB6E403[*v0]))();
}

void sub_1CCAE56A8(_QWORD *a1@<X8>)
{
  *a1 = 1702060387;
  a1[1] = 0xE400000000000000;
}

void sub_1CCAE56BC(_QWORD *a1@<X8>)
{
  *a1 = 0x6475427466656CLL;
  a1[1] = 0xE700000000000000;
}

void sub_1CCAE56D8(_QWORD *a1@<X8>)
{
  *a1 = 0x6475427468676972;
  a1[1] = 0xE800000000000000;
}

void sub_1CCAE56F4(_QWORD *a1@<X8>)
{
  *a1 = 0x636972656E6567;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1CCAE5710()
{
  sub_1CCAF37B8();
  return sub_1CCB63AF0();
}

uint64_t sub_1CCAE576C()
{
  sub_1CCAF37B8();
  return sub_1CCB63AD8();
}

BOOL sub_1CCAE57B8(char *a1, char *a2)
{
  return flt_1CCB6F088[*a1] < flt_1CCB6F088[*a2];
}

BOOL sub_1CCAE57DC(char *a1, char *a2)
{
  return flt_1CCB6F088[*a2] >= flt_1CCB6F088[*a1];
}

BOOL sub_1CCAE5800(char *a1, char *a2)
{
  return flt_1CCB6F088[*a1] >= flt_1CCB6F088[*a2];
}

BOOL sub_1CCAE5824(char *a1, char *a2)
{
  return flt_1CCB6F088[*a2] < flt_1CCB6F088[*a1];
}

uint64_t FMIPItem.updateContext.getter()
{
  return swift_retain();
}

uint64_t FMIPItem.address.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[288];

  sub_1CC9C3EC0(v1 + 8, (uint64_t)v4, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)v4, a1, &qword_1ED8A71C0);
  return sub_1CCA307F0((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
}

void FMIPItem.batteryStatus.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 296);
}

void FMIPItem.capabilities.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 304);
}

id FMIPItem.crowdSourcedLocation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 312);
  v2 = *(_OWORD *)(v1 + 320);
  *(_OWORD *)(a1 + 8) = v2;
  return (id)v2;
}

uint64_t FMIPItem.groupIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 336);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPItem.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 352);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPItem.productIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 368);
  swift_bridgeObjectRetain();
  return v1;
}

id FMIPItem.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 384);
  v2 = *(_OWORD *)(v1 + 392);
  *(_OWORD *)(a1 + 8) = v2;
  return (id)v2;
}

uint64_t FMIPItem.lostMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMIPItem();
  return sub_1CC9EAB74(v1 + *(int *)(v3 + 52), a1, &qword_1ED8A8CD0);
}

uint64_t FMIPItem.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPItem() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPItem.owner.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPItem() + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPItem.partInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = v1 + *(int *)(type metadata accessor for FMIPItem() + 64);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(v3 + 32);
  return sub_1CCAF007C(v4, v5);
}

uint64_t FMIPItem.role.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = v1 + *(int *)(type metadata accessor for FMIPItem() + 68);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  v6 = *(_QWORD *)(v3 + 32);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t FMIPItem.serialNumber.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPItem() + 72));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPItem.state.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FMIPItem();
  *a1 = *(_QWORD *)(v1 + *(int *)(result + 76));
  return result;
}

uint64_t FMIPItem.systemVersion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPItem() + 80));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPItem.isAppleAudioAccessory.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FMIPItem() + 84));
}

uint64_t FMIPItem.isAppleItem.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FMIPItem() + 88));
}

uint64_t FMIPItem.safeLocations.getter()
{
  type metadata accessor for FMIPItem();
  return swift_bridgeObjectRetain();
}

uint64_t FMIPItem.productType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMIPItem();
  return sub_1CCA0BEEC(v1 + *(int *)(v3 + 96), a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
}

uint64_t FMIPItem.isFirmwareUpdateMandatory.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FMIPItem() + 100));
}

uint64_t sub_1CCAE5C2C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCAE5C60 + 4 * byte_1CCB6E408[a1]))(0x73736572646461, 0xE700000000000000);
}

uint64_t sub_1CCAE5C60()
{
  return 0x5379726574746162;
}

uint64_t sub_1CCAE5C84()
{
  return 0x696C696261706163;
}

unint64_t sub_1CCAE5CA4()
{
  return 0xD000000000000014;
}

uint64_t sub_1CCAE5E94()
{
  return 0x49656C7070417369;
}

uint64_t sub_1CCAE5EB4()
{
  return 0x54746375646F7270;
}

uint64_t sub_1CCAE5ED4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1CCAE5C2C(*a1);
  v5 = v4;
  if (v3 == sub_1CCAE5C2C(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1CCAE5F5C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCAE5C2C(v1);
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCAE5FBC()
{
  unsigned __int8 *v0;

  sub_1CCAE5C2C(*v0);
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCAE5FFC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCAE5C2C(v1);
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCAE6058@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCAF3720();
  *a1 = result;
  return result;
}

uint64_t sub_1CCAE6084@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1CCAE5C2C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1CCAE60AC()
{
  unsigned __int8 *v0;

  return sub_1CCAE5C2C(*v0);
}

uint64_t sub_1CCAE60B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCAF3720();
  *a1 = result;
  return result;
}

void sub_1CCAE60D8(_BYTE *a1@<X8>)
{
  *a1 = 23;
}

uint64_t sub_1CCAE60E4()
{
  sub_1CCAF01FC();
  return sub_1CCB643D8();
}

uint64_t sub_1CCAE610C()
{
  sub_1CCAF01FC();
  return sub_1CCB643E4();
}

uint64_t FMIPItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t *v19;
  int *v20;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void (*v68)(uint64_t, char *, uint64_t);
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  char *v76;
  uint64_t *v77;
  _QWORD v78[3];
  _QWORD *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t updated;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint8_t *v92;
  char *v93;
  uint64_t v94;
  _QWORD v95[36];
  char v96;
  _OWORD v97[18];
  _BYTE v98[304];
  int *v99;

  v83 = a2;
  v89 = sub_1CCB635B0();
  v85 = *(_QWORD *)(v89 - 8);
  v3 = MEMORY[0x1E0C80A78](v89);
  v88 = (char *)v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v84 = (char *)v78 - v5;
  v6 = sub_1CCA14E90(&qword_1ED8A7130);
  v7 = MEMORY[0x1E0C80A78](v6);
  v87 = (char *)v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v90 = (uint64_t)v78 - v9;
  updated = type metadata accessor for FMIPItemUpdateType(0);
  MEMORY[0x1E0C80A78](updated);
  v86 = (uint64_t)v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for FMIPProductType();
  MEMORY[0x1E0C80A78](v91);
  v92 = (uint8_t *)v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCA14E90(&qword_1ED8A8CD0);
  MEMORY[0x1E0C80A78](v12);
  v93 = (char *)v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_1CCA14E90(&qword_1EF9E3DD0);
  v14 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94);
  v16 = (char *)v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int *)type metadata accessor for FMIPItem();
  MEMORY[0x1E0C80A78](v17);
  v19 = (_QWORD *)((char *)v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCAF01FC();
  v20 = v99;
  sub_1CCB643B4();
  if (v20)
    return sub_1CCA01CA0((uint64_t)a1);
  v80 = v19;
  v81 = v14;
  v99 = v17;
  v79 = a1;
  v96 = 0;
  sub_1CCA178E4();
  v22 = v94;
  v23 = v16;
  sub_1CCB64180();
  memcpy(v95, v97, sizeof(v95));
  nullsub_1(v95);
  sub_1CC9C3EC0((uint64_t)v95, (uint64_t)v98, &qword_1ED8A71C0);
  v24 = v80;
  sub_1CC9C3EC0((uint64_t)v98, (uint64_t)(v80 + 1), &qword_1ED8A71C0);
  LOBYTE(v95[0]) = 1;
  sub_1CCAF0270();
  sub_1CCB64180();
  *((_BYTE *)v24 + 296) = v97[0];
  LOBYTE(v95[0]) = 2;
  sub_1CCA716BC();
  sub_1CCB64180();
  v78[2] = v24 + 1;
  v24[38] = *(_QWORD *)&v97[0];
  LOBYTE(v95[0]) = 3;
  sub_1CCA162BC();
  sub_1CCB64180();
  v25 = *((_QWORD *)&v97[0] + 1);
  v26 = *(_QWORD *)&v97[1];
  v27 = 256;
  if (!BYTE1(v97[0]))
    v27 = 0;
  v28 = v27 | LOBYTE(v97[0]);
  v29 = 0x10000;
  if (!BYTE2(v97[0]))
    v29 = 0;
  v24[39] = v28 | v29 | ((unint64_t)BYTE3(v97[0]) << 24);
  v24[40] = v25;
  v24[41] = v26;
  LOBYTE(v97[0]) = 4;
  v30 = sub_1CCB64150();
  v78[1] = 0;
  v24[42] = v30;
  v24[43] = v31;
  LOBYTE(v97[0]) = 5;
  v24[44] = sub_1CCB64150();
  v24[45] = v32;
  LOBYTE(v97[0]) = 6;
  v24[46] = sub_1CCB64150();
  v24[47] = v33;
  LOBYTE(v95[0]) = 7;
  sub_1CCB64180();
  v34 = *((_QWORD *)&v97[0] + 1);
  v35 = *(_QWORD *)&v97[1];
  v36 = 256;
  if (!BYTE1(v97[0]))
    v36 = 0;
  v37 = v36 | LOBYTE(v97[0]);
  v38 = 0x10000;
  if (!BYTE2(v97[0]))
    v38 = 0;
  v39 = (uint64_t)v93;
  v24[48] = v37 | v38 | ((unint64_t)BYTE3(v97[0]) << 24);
  v24[49] = v34;
  v24[50] = v35;
  v40 = type metadata accessor for FMIPItemLostModeMetadata();
  LOBYTE(v97[0]) = 8;
  sub_1CC9CAA38(&qword_1EF9E1DA8, (uint64_t (*)(uint64_t))type metadata accessor for FMIPItemLostModeMetadata, (uint64_t)&protocol conformance descriptor for FMIPItemLostModeMetadata);
  sub_1CCB64180();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 0, 1, v40);
  v41 = v99;
  sub_1CC9C3EC0(v39, (uint64_t)v24 + v99[13], &qword_1ED8A8CD0);
  LOBYTE(v97[0]) = 9;
  v42 = sub_1CCB64150();
  v43 = (uint64_t *)((char *)v24 + v41[14]);
  *v43 = v42;
  v43[1] = v44;
  LOBYTE(v97[0]) = 11;
  v45 = sub_1CCB64150();
  v46 = (uint64_t *)((char *)v24 + v41[15]);
  *v46 = v45;
  v46[1] = v47;
  sub_1CCA14E90(&qword_1EF9E3D98);
  LOBYTE(v95[0]) = 12;
  sub_1CCA1552C(&qword_1EF9E3DE8, &qword_1EF9E3D98, (uint64_t (*)(void))sub_1CCAF02B4, MEMORY[0x1E0DEE9A0]);
  sub_1CCB64180();
  v48 = v97[2];
  v49 = (char *)v24 + v41[16];
  v50 = v97[1];
  *(_OWORD *)v49 = v97[0];
  *((_OWORD *)v49 + 1) = v50;
  v49[32] = v48;
  LOBYTE(v95[0]) = 13;
  sub_1CCAF02F8();
  sub_1CCB64180();
  v51 = *(_QWORD *)&v97[2];
  v52 = (char *)v24 + v41[17];
  v53 = v97[1];
  *(_OWORD *)v52 = v97[0];
  *((_OWORD *)v52 + 1) = v53;
  *((_QWORD *)v52 + 4) = v51;
  LOBYTE(v97[0]) = 14;
  v54 = sub_1CCB64150();
  v55 = v80;
  v56 = (uint64_t *)((char *)v80 + v41[18]);
  *v56 = v54;
  v56[1] = v57;
  *(uint64_t *)((char *)v55 + v41[19]) = 0;
  LOBYTE(v97[0]) = 16;
  v58 = sub_1CCB64150();
  v59 = (uint64_t *)((char *)v55 + v99[20]);
  *v59 = v58;
  v59[1] = v60;
  LOBYTE(v97[0]) = 19;
  sub_1CC9CAA38(&qword_1EF9E3200, (uint64_t (*)(uint64_t))type metadata accessor for FMIPProductType, (uint64_t)&protocol conformance descriptor for FMIPProductType);
  v61 = v22;
  v62 = v23;
  sub_1CCB64180();
  sub_1CC9FED60((uint64_t)v92, (uint64_t)v80 + v99[24], (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
  LOBYTE(v97[0]) = 20;
  *((_BYTE *)v80 + v99[25]) = sub_1CCB6415C() & 1;
  LOBYTE(v97[0]) = 21;
  *((_BYTE *)v80 + v99[21]) = sub_1CCB6415C() & 1;
  LOBYTE(v97[0]) = 22;
  *((_BYTE *)v80 + v99[22]) = sub_1CCB6415C() & 1;
  sub_1CCA14E90(&qword_1EF9E2930);
  LOBYTE(v95[0]) = 17;
  sub_1CCA1552C(&qword_1EF9E2938, &qword_1EF9E2930, (uint64_t (*)(void))sub_1CCA22778, MEMORY[0x1E0DEAF40]);
  sub_1CCB64180();
  *(uint64_t *)((char *)v80 + v99[23]) = *(_QWORD *)&v97[0];
  v63 = v86;
  swift_storeEnumTagMultiPayload();
  v64 = v85;
  v65 = v89;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v90, 1, 1, v89);
  type metadata accessor for FMIPItemUpdateContext(0);
  v66 = swift_allocObject();
  sub_1CCA0BEEC(v63, v66 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_type, type metadata accessor for FMIPItemUpdateType);
  v67 = v84;
  sub_1CCB635A4();
  v68 = *(void (**)(uint64_t, char *, uint64_t))(v64 + 32);
  v68(v66 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_timestamp, v67, v65);
  v69 = (uint64_t)v87;
  sub_1CC9EAB74(v90, (uint64_t)v87, &qword_1ED8A7130);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v69, 1, v65) == 1)
  {
    sub_1CCB635A4();
    sub_1CC9C3E84(v90, &qword_1ED8A7130);
    sub_1CCA0BF30(v86, type metadata accessor for FMIPItemUpdateType);
    sub_1CC9C3E84((uint64_t)v87, &qword_1ED8A7130);
  }
  else
  {
    sub_1CC9C3E84(v90, &qword_1ED8A7130);
    sub_1CCA0BF30(v86, type metadata accessor for FMIPItemUpdateType);
    v68((uint64_t)v88, v87, v89);
  }
  v68(v66 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_creationTimestamp, v88, v89);
  *v80 = v66;
  v99 = (int *)FMIPItem.debugDescription.getter();
  v71 = v70;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v72 = sub_1CCB637FC();
  sub_1CCA16C20(v72, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v73 = sub_1CCB637D8();
  v74 = sub_1CCB63D18();
  if (os_log_type_enabled(v73, v74))
  {
    v75 = (uint8_t *)swift_slowAlloc();
    v93 = (char *)swift_slowAlloc();
    *(_QWORD *)&v97[0] = v93;
    *(_DWORD *)v75 = 136315138;
    v92 = v75 + 4;
    swift_bridgeObjectRetain();
    v95[0] = sub_1CCA0CB60((uint64_t)v99, v71, (uint64_t *)v97);
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CC9BF000, v73, v74, "FMIPItem: Initialized: %s", v75, 0xCu);
    v76 = v93;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v76, -1, -1);
    MEMORY[0x1D17B214C](v75, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  (*(void (**)(char *, uint64_t))(v81 + 8))(v62, v61);
  v77 = v80;
  sub_1CCA0BEEC((uint64_t)v80, v83, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA01CA0((uint64_t)v79);
  return sub_1CCA0BF30((uint64_t)v77, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
}

uint64_t sub_1CCAE7180@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t result;

  v6 = *a2;
  v7 = a3[3];
  v8 = a3[4];
  sub_1CCA04DDC(a3, v7);
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 80))(v7, v8) + 16))
  {
    v9 = a1;
    sub_1CCAC8DD0((uint64_t)v9);
    if ((v10 & 1) != 0)
      v11 = v6;
    else
      v11 = 0;
    v12 = v10 ^ 1;

  }
  else
  {
    v11 = 0;
    v12 = 1;
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a4 = v11;
  *(_BYTE *)(a4 + 8) = v12 & 1;
  return result;
}

void sub_1CCAE7220(void *a1@<X0>, id a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  char v14;
  id v15;
  id v16;
  char v17;

  v8 = *a3;
  v9 = a4[3];
  v10 = a4[4];
  sub_1CCA04DDC(a4, v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 80))(v9, v10);
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_6;
  v12 = a1;
  v13 = sub_1CCAC8DD0((uint64_t)v12);
  if ((v14 & 1) == 0)
  {

LABEL_6:
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v15 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v13);

  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v15, sel_state);

  if (v16 != a2)
  {
LABEL_7:
    v8 = 0;
    v17 = 1;
    goto LABEL_8;
  }
  v17 = 0;
LABEL_8:
  *(_QWORD *)a5 = v8;
  *(_BYTE *)(a5 + 8) = v17;
}

Swift::Bool __swiftcall FMIPItem.canEnableNotifyWhenFound()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  Swift::Bool v7;
  uint64_t v9;

  v1 = v0;
  v2 = type metadata accessor for FMIPItem();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(v1 + 304);
  sub_1CCA0BEEC(v1, (uint64_t)v4, v6);
  v7 = (v5 & 8) != 0 && (v4[*(int *)(v2 + 76)] & 0x40) == 0;
  sub_1CCA0BF30((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  return v7;
}

uint64_t FMIPItem.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  char v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v18;
  int *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[296];
  char v24;

  v3 = v1;
  v5 = sub_1CCA14E90(&qword_1EF9E3E00);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCAF01FC();
  sub_1CCB643CC();
  sub_1CC9C3EC0(v3 + 8, (uint64_t)v23, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)v23, (uint64_t)&v20, &qword_1ED8A71C0);
  v24 = 0;
  sub_1CCA14E90(&qword_1ED8A71C0);
  sub_1CCA1552C((unint64_t *)&qword_1ED8A71C8, &qword_1ED8A71C0, (uint64_t (*)(void))sub_1CCA243E4, MEMORY[0x1E0DEE988]);
  sub_1CCB64210();
  if (!v2)
  {
    LOBYTE(v20) = 1;
    sub_1CCB64204();
    LOBYTE(v20) = 2;
    sub_1CCB64204();
    v9 = *(_QWORD *)(v3 + 328);
    v20 = *(_OWORD *)(v3 + 312);
    *(_QWORD *)&v21 = v9;
    v24 = 3;
    sub_1CCA14E90(&qword_1ED8A7220);
    sub_1CCA1552C(&qword_1ED8A7228, &qword_1ED8A7220, (uint64_t (*)(void))sub_1CCA23468, MEMORY[0x1E0DEE988]);
    sub_1CCB64210();
    v20 = *(_OWORD *)(v3 + 336);
    v24 = 4;
    sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
    sub_1CCA008E8();
    sub_1CCB64210();
    LOBYTE(v20) = 5;
    sub_1CCB641E0();
    LOBYTE(v20) = 6;
    sub_1CCB641E0();
    v19 = (int *)type metadata accessor for FMIPItem();
    LOBYTE(v20) = 21;
    sub_1CCB641EC();
    LOBYTE(v20) = 22;
    sub_1CCB641EC();
    LOBYTE(v20) = 20;
    sub_1CCB641EC();
    v10 = *(_QWORD *)(v3 + 400);
    v20 = *(_OWORD *)(v3 + 384);
    *(_QWORD *)&v21 = v10;
    v24 = 7;
    sub_1CCB64210();
    LOBYTE(v20) = 8;
    sub_1CCA14E90(&qword_1ED8A8CD0);
    sub_1CCA7B9B0();
    sub_1CCB64210();
    LOBYTE(v20) = 9;
    sub_1CCB641E0();
    LOBYTE(v20) = 11;
    sub_1CCB641E0();
    v11 = (__int128 *)(v3 + v19[16]);
    v12 = *((_BYTE *)v11 + 32);
    v13 = v11[1];
    v20 = *v11;
    v21 = v13;
    LOBYTE(v22) = v12;
    v24 = 12;
    sub_1CCA14E90(&qword_1EF9E3D98);
    sub_1CCA1552C(&qword_1EF9E3E08, &qword_1EF9E3D98, (uint64_t (*)(void))sub_1CCAF033C, MEMORY[0x1E0DEE988]);
    sub_1CCB64210();
    LOBYTE(v20) = 19;
    type metadata accessor for FMIPProductType();
    sub_1CC9CAA38(&qword_1EF9E3238, (uint64_t (*)(uint64_t))type metadata accessor for FMIPProductType, (uint64_t)&protocol conformance descriptor for FMIPProductType);
    sub_1CCB64210();
    v14 = (__int128 *)(v3 + v19[17]);
    v15 = *((_QWORD *)v14 + 4);
    v16 = v14[1];
    v20 = *v14;
    v21 = v16;
    v22 = v15;
    v24 = 13;
    sub_1CCAF0380();
    sub_1CCB64210();
    LOBYTE(v20) = 14;
    sub_1CCB641E0();
    LOBYTE(v20) = 16;
    sub_1CCB641E0();
    *(_QWORD *)&v20 = *(_QWORD *)(v3 + v19[23]);
    v24 = 17;
    sub_1CCA14E90(&qword_1EF9E2930);
    sub_1CCA1552C(&qword_1EF9E29A0, &qword_1EF9E2930, (uint64_t (*)(void))sub_1CCA227BC, MEMORY[0x1E0DEAF10]);
    sub_1CCB64210();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t FMIPItem.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t FMIPItem.hashValue.getter()
{
  sub_1CCB6433C();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCAE7AA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPItem.init(from:)(a1, a2);
}

uint64_t sub_1CCAE7AB8(_QWORD *a1)
{
  return FMIPItem.encode(to:)(a1);
}

uint64_t sub_1CCAE7AD4()
{
  sub_1CCB6433C();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCAE7B2C()
{
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCAE7B70()
{
  sub_1CCB6433C();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t SPBeaconTaskState.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 1;
  result = 0x6E776F6E6B6E752ELL;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 0x676E696E6E75722ELL;
      break;
    case 2:
      result = 0x676E69646E65702ELL;
      break;
    case 3:
      result = 0x656C64692ELL;
      break;
    case 4:
      result = 0x726F7272652ELL;
      break;
    case 5:
      result = 0x6465756575712ELL;
      break;
    default:
      result = 0x656C646E61686E55;
      break;
  }
  return result;
}

uint64_t sub_1CCAE7C88()
{
  _QWORD *v0;
  uint64_t result;

  result = 0x6E776F6E6B6E752ELL;
  switch(*v0)
  {
    case 0xFFFFFFFFFFFFFFFFLL:
      return result;
    case 0:
      result = 0x676E696E6E75722ELL;
      break;
    case 1:
      result = 0x676E69646E65702ELL;
      break;
    case 2:
      result = 0x656C64692ELL;
      break;
    case 3:
      result = 0x726F7272652ELL;
      break;
    case 4:
      result = 0x6465756575712ELL;
      break;
    default:
      result = 0x656C646E61686E55;
      break;
  }
  return result;
}

uint64_t sub_1CCAE7D50(void (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v2 = sub_1CCB63604();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v5);
  sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, v3, MEMORY[0x1E0CB09F0]);
  v8 = sub_1CCB64240();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
  return v8;
}

unint64_t sub_1CCAE7E14(void (*a1)(uint64_t *__return_ptr))
{
  unint64_t v1;
  uint64_t v3;

  a1(&v3);
  v1 = sub_1CCA61E9C();
  swift_release();
  return v1;
}

uint64_t sub_1CCAE7E68(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = sub_1CCB63604();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  sub_1CCA14E90(&qword_1EF9E3420);
  v42 = a2;
  v10 = sub_1CCB640A8();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_39;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v18++, 1))
      goto LABEL_41;
    if (v18 >= v39)
      break;
    v23 = v40;
    v24 = v40[v18];
    if (!v24)
    {
      v25 = v18 + 1;
      if (v18 + 1 >= v39)
      {
LABEL_32:
        swift_release();
        v3 = v38;
        if ((v42 & 1) == 0)
          goto LABEL_39;
        goto LABEL_35;
      }
      v24 = v40[v25];
      if (!v24)
      {
        while (1)
        {
          v18 = v25 + 1;
          if (__OFADD__(v25, 1))
            break;
          if (v18 >= v39)
            goto LABEL_32;
          v24 = v40[v18];
          ++v25;
          if (v24)
            goto LABEL_19;
        }
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return result;
      }
      ++v18;
    }
LABEL_19:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_20:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      sub_1CCA24CA8(v28);
    }
    sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = sub_1CCB63934();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_39;
LABEL_35:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_39:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_1CCAE81E4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  sub_1CCA14E90(&qword_1EF9DF5A0);
  v37 = a2;
  v6 = sub_1CCB640A8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    sub_1CCB6433C();
    sub_1CCB639F4();
    result = sub_1CCB64384();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CCAE84F8(uint64_t a1, char a2)
{
  return sub_1CC9E1E5C(a1, a2, &qword_1EF9E3440);
}

uint64_t sub_1CCAE8504(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;

  v3 = v2;
  v5 = sub_1CCA14E90((uint64_t *)&unk_1EF9E2A10);
  v42 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  sub_1CCA14E90(&qword_1EF9E3EC8);
  v43 = a2;
  v9 = sub_1CCB640A8();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v41 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v39 = v2;
  v40 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40)
      break;
    v23 = v41;
    v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_34;
      v24 = v41[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v17 >= v40)
              goto LABEL_34;
            v24 = v41[v17];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v17 = v25;
      }
    }
LABEL_21:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    v26 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v42 + 72);
    v30 = *(_QWORD *)(v8 + 56) + v29 * v21;
    if ((v43 & 1) != 0)
    {
      sub_1CC9C3EC0(v30, (uint64_t)v7, (uint64_t *)&unk_1EF9E2A10);
    }
    else
    {
      sub_1CC9EAB74(v30, (uint64_t)v7, (uint64_t *)&unk_1EF9E2A10);
      swift_bridgeObjectRetain();
    }
    sub_1CCB6433C();
    sub_1CCB639F4();
    result = sub_1CCB64384();
    v31 = -1 << *(_BYTE *)(v10 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    result = sub_1CC9C3EC0((uint64_t)v7, *(_QWORD *)(v10 + 56) + v29 * v18, (uint64_t *)&unk_1EF9E2A10);
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v39;
  v23 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v8 + 32);
  if (v38 >= 64)
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v38;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_1CCAE8888(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int64_t v46;
  _QWORD *v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  int64_t v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int64_t v144;
  _QWORD v145[37];

  v3 = v2;
  v105 = sub_1CCB63634();
  v5 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105);
  v100 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for FMReverseGeocodingRequest();
  v104 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101);
  v11 = (id *)((char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *v2;
  sub_1CCA14E90(&qword_1EF9E3EC0);
  v106 = a2;
  v13 = sub_1CCB640A8();
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_44;
  v103 = v5;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v99 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v97 = v2;
  v98 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain();
  v21 = 0;
  v102 = v12;
  v22 = v101;
  while (1)
  {
    if (v18)
    {
      v44 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v45 = v44 | (v21 << 6);
      goto LABEL_22;
    }
    v46 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v46 >= v98)
      break;
    v47 = v99;
    v48 = v99[v46];
    ++v21;
    if (!v48)
    {
      v21 = v46 + 1;
      if (v46 + 1 >= v98)
        goto LABEL_37;
      v48 = v99[v21];
      if (!v48)
      {
        v49 = v46 + 2;
        if (v49 >= v98)
        {
LABEL_37:
          swift_release();
          v3 = v97;
          if ((v106 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v48 = v99[v49];
        if (!v48)
        {
          while (1)
          {
            v21 = v49 + 1;
            if (__OFADD__(v49, 1))
              goto LABEL_46;
            if (v21 >= v98)
              goto LABEL_37;
            v48 = v99[v21];
            ++v49;
            if (v48)
              goto LABEL_21;
          }
        }
        v21 = v49;
      }
    }
LABEL_21:
    v18 = (v48 - 1) & v48;
    v45 = __clz(__rbit64(v48)) + (v21 << 6);
LABEL_22:
    v144 = v21;
    v50 = *(_QWORD *)(v12 + 48);
    v107 = *(_QWORD *)(v104 + 72);
    if ((v106 & 1) != 0)
    {
      sub_1CC9FED60(v50 + v107 * v45, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      v51 = (uint64_t *)(*(_QWORD *)(v12 + 56) + 288 * v45);
      v52 = *v51;
      v53 = v51[1];
      v110 = v51[2];
      v111 = v52;
      v54 = v51[3];
      v55 = v51[4];
      v108 = v53;
      v109 = v55;
      v56 = v51[5];
      v57 = v51[6];
      v112 = v54;
      v113 = v57;
      v58 = v51[7];
      v59 = v51[8];
      v114 = v56;
      v115 = v59;
      v60 = v51[9];
      v61 = v51[10];
      v116 = v58;
      v117 = v61;
      v62 = v51[11];
      v63 = v51[12];
      v118 = v60;
      v119 = v63;
      v64 = v51[13];
      v65 = v51[14];
      v120 = v62;
      v121 = v65;
      v66 = v51[15];
      v67 = v51[16];
      v122 = v64;
      v123 = v67;
      v68 = v51[17];
      v69 = v51[18];
      v124 = v66;
      v125 = v69;
      v70 = v51[19];
      v71 = v51[20];
      v126 = v68;
      v127 = v71;
      v72 = v51[21];
      v132 = v51[22];
      v73 = v51[23];
      v128 = v70;
      v129 = v73;
      v74 = v51[24];
      v75 = v51[25];
      v130 = v72;
      v131 = v75;
      v76 = v51[26];
      v133 = v51[27];
      v134 = v74;
      v77 = v51[28];
      v135 = v51[29];
      v136 = v76;
      v78 = v51[30];
      v137 = v51[31];
      v138 = v77;
      v79 = v51[32];
      v139 = v51[33];
      v140 = v78;
      v81 = v51[34];
      v80 = v51[35];
      v142 = v79;
      v143 = v81;
      v141 = v80;
    }
    else
    {
      sub_1CCA0BEEC(v50 + v107 * v45, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      memcpy(v145, (const void *)(*(_QWORD *)(v12 + 56) + 288 * v45), 0x120uLL);
      v142 = v145[32];
      v143 = v145[34];
      v140 = v145[30];
      v141 = v145[35];
      v138 = v145[28];
      v139 = v145[33];
      v136 = v145[26];
      v137 = v145[31];
      v134 = v145[24];
      v135 = v145[29];
      v132 = v145[22];
      v133 = v145[27];
      v130 = v145[21];
      v131 = v145[25];
      v128 = v145[19];
      v129 = v145[23];
      v126 = v145[17];
      v127 = v145[20];
      v124 = v145[15];
      v125 = v145[18];
      v122 = v145[13];
      v123 = v145[16];
      v120 = v145[11];
      v121 = v145[14];
      v118 = v145[9];
      v119 = v145[12];
      v116 = v145[7];
      v117 = v145[10];
      v114 = v145[5];
      v115 = v145[8];
      v112 = v145[3];
      v113 = v145[6];
      v109 = v145[4];
      v110 = v145[2];
      v111 = v145[0];
      v108 = v145[1];
      sub_1CCA31FF8((uint64_t)v145);
    }
    sub_1CCB6433C();
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
    v82 = v11[2];
    sub_1CCB63DFC();

    sub_1CC9EAB74((uint64_t)v11 + *(int *)(v22 + 24), (uint64_t)v9, (uint64_t *)&unk_1ED8A8B10);
    v83 = v103;
    v84 = v105;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v9, 1, v105) == 1)
    {
      sub_1CCB64354();
    }
    else
    {
      v85 = v9;
      v86 = v100;
      (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v100, v85, v84);
      sub_1CCB64354();
      sub_1CC9CAA38(&qword_1EF9E0660, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], MEMORY[0x1E0CB0E58]);
      sub_1CCB63940();
      v87 = v86;
      v9 = v85;
      v22 = v101;
      (*(void (**)(char *, uint64_t))(v83 + 8))(v87, v84);
    }
    sub_1CCB64354();
    sub_1CCB64354();
    result = sub_1CCB64384();
    v88 = -1 << *(_BYTE *)(v14 + 32);
    v89 = result & ~v88;
    v90 = v89 >> 6;
    if (((-1 << v89) & ~*(_QWORD *)(v19 + 8 * (v89 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v89) & ~*(_QWORD *)(v19 + 8 * (v89 >> 6)))) | v89 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v91 = 0;
      v92 = (unint64_t)(63 - v88) >> 6;
      do
      {
        if (++v90 == v92 && (v91 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v93 = v90 == v92;
        if (v90 == v92)
          v90 = 0;
        v91 |= v93;
        v94 = *(_QWORD *)(v19 + 8 * v90);
      }
      while (v94 == -1);
      v23 = __clz(__rbit64(~v94)) + (v90 << 6);
    }
    v24 = v107;
    *(_QWORD *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = sub_1CC9FED60((uint64_t)v11, *(_QWORD *)(v14 + 48) + v24 * v23, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    v25 = (_QWORD *)(*(_QWORD *)(v14 + 56) + 288 * v23);
    v26 = v108;
    *v25 = v111;
    v25[1] = v26;
    v27 = v112;
    v25[2] = v110;
    v25[3] = v27;
    v28 = v114;
    v25[4] = v109;
    v25[5] = v28;
    v29 = v116;
    v25[6] = v113;
    v25[7] = v29;
    v30 = v118;
    v25[8] = v115;
    v25[9] = v30;
    v31 = v120;
    v25[10] = v117;
    v25[11] = v31;
    v32 = v122;
    v25[12] = v119;
    v25[13] = v32;
    v33 = v124;
    v25[14] = v121;
    v25[15] = v33;
    v34 = v126;
    v25[16] = v123;
    v25[17] = v34;
    v35 = v128;
    v25[18] = v125;
    v25[19] = v35;
    v36 = v130;
    v25[20] = v127;
    v25[21] = v36;
    v37 = v129;
    v25[22] = v132;
    v25[23] = v37;
    v38 = v131;
    v25[24] = v134;
    v25[25] = v38;
    v39 = v133;
    v25[26] = v136;
    v25[27] = v39;
    v40 = v135;
    v25[28] = v138;
    v25[29] = v40;
    v41 = v137;
    v25[30] = v140;
    v25[31] = v41;
    v42 = v139;
    v25[32] = v142;
    v25[33] = v42;
    v21 = v144;
    v43 = v141;
    v25[34] = v143;
    v25[35] = v43;
    ++*(_QWORD *)(v14 + 16);
    v12 = v102;
  }
  swift_release();
  v3 = v97;
  v47 = v99;
  if ((v106 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v95 = 1 << *(_BYTE *)(v12 + 32);
  if (v95 >= 64)
    bzero(v47, ((unint64_t)(v95 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v47 = -1 << v95;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_44:
  result = swift_release();
  *v3 = v14;
  return result;
}

uint64_t sub_1CCAE9068(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = sub_1CCB63604();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  sub_1CCA14E90(&qword_1EF9E33A8);
  v42 = a2;
  v10 = sub_1CCB640A8();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = sub_1CCB63934();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_1CCAE93FC(uint64_t a1, int a2)
{
  return sub_1CCAE9CB0(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem, &qword_1EF9E3EB8);
}

uint64_t sub_1CCAE9410(uint64_t a1, int a2)
{
  return sub_1CCAEAEB4(a1, a2, type metadata accessor for FMIPDeviceConnectedState, &qword_1EF9E3EB0);
}

uint64_t sub_1CCAE9424(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  __int128 *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  int64_t v52;
  _QWORD *v53;
  uint64_t i;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _BYTE v88[25];

  v3 = v2;
  v5 = *v2;
  sub_1CCA14E90(&qword_1EF9E3EE8);
  v55 = a2;
  v6 = sub_1CCB640A8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v53 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v51 = v2;
  v52 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v18 = v17 | (v13 << 6);
      if ((v55 & 1) != 0)
        goto LABEL_10;
      goto LABEL_23;
    }
    v28 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v28 >= v52)
      break;
    v29 = v53;
    v30 = v53[v28];
    ++v13;
    if (!v30)
    {
      v13 = v28 + 1;
      if (v28 + 1 >= v52)
        goto LABEL_33;
      v30 = v53[v13];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v52)
        {
LABEL_33:
          swift_release();
          v3 = v51;
          if ((v55 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v30 = v53[v31];
        if (!v30)
        {
          while (1)
          {
            v13 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_42;
            if (v13 >= v52)
              goto LABEL_33;
            v30 = v53[v13];
            ++v31;
            if (v30)
              goto LABEL_22;
          }
        }
        v13 = v31;
      }
    }
LABEL_22:
    v10 = (v30 - 1) & v30;
    v18 = __clz(__rbit64(v30)) + (v13 << 6);
    if ((v55 & 1) != 0)
    {
LABEL_10:
      v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v20 = *v19;
      v21 = v19[1];
      v22 = *(_QWORD *)(v5 + 56) + 208 * v18;
      v58 = *(_QWORD *)(v22 + 8);
      v59 = *(_QWORD *)v22;
      v60 = *(_BYTE *)(v22 + 16);
      v23 = *(_QWORD *)(v22 + 24);
      v24 = *(_QWORD *)(v22 + 32);
      v25 = *(_BYTE *)(v22 + 48);
      v64 = *(_QWORD *)(v22 + 56);
      v26 = *(_BYTE *)(v22 + 64);
      v61 = *(_QWORD *)(v22 + 72);
      v27 = *(_BYTE *)(v22 + 80);
      v56 = *(_QWORD *)(v22 + 96);
      v57 = *(_QWORD *)(v22 + 88);
      v68 = *(_QWORD *)(v22 + 104);
      v69 = *(_QWORD *)(v22 + 40);
      v75 = *(_QWORD *)(v22 + 128);
      v76 = *(_QWORD *)(v22 + 120);
      v74 = *(_QWORD *)(v22 + 136);
      v71 = *(_QWORD *)(v22 + 152);
      v72 = *(_QWORD *)(v22 + 144);
      v70 = *(_QWORD *)(v22 + 160);
      v66 = *(_QWORD *)(v22 + 112);
      v67 = *(_QWORD *)(v22 + 168);
      v65 = *(_QWORD *)(v22 + 176);
      v62 = *(_QWORD *)(v22 + 192);
      v63 = *(_QWORD *)(v22 + 184);
      v73 = *(_BYTE *)(v22 + 200);
      goto LABEL_24;
    }
LABEL_23:
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v20 = *v32;
    v21 = v32[1];
    v33 = (__int128 *)(*(_QWORD *)(v5 + 56) + 208 * v18);
    v77 = *v33;
    v34 = v33[4];
    v36 = v33[1];
    v35 = v33[2];
    v80 = v33[3];
    v81 = v34;
    v78 = v36;
    v79 = v35;
    v37 = v33[8];
    v39 = v33[5];
    v38 = v33[6];
    v84 = v33[7];
    v85 = v37;
    v82 = v39;
    v83 = v38;
    v41 = v33[10];
    v40 = v33[11];
    v42 = v33[9];
    *(_OWORD *)&v88[9] = *(__int128 *)((char *)v33 + 185);
    v87 = v41;
    *(_OWORD *)v88 = v40;
    v86 = v42;
    v73 = v88[24];
    v75 = v37;
    v76 = *((_QWORD *)&v84 + 1);
    v74 = *((_QWORD *)&v37 + 1);
    v71 = *((_QWORD *)&v42 + 1);
    v72 = v42;
    v63 = *((_QWORD *)&v40 + 1);
    v65 = v40;
    v62 = *(_QWORD *)&v88[16];
    v67 = *((_QWORD *)&v41 + 1);
    v68 = *((_QWORD *)&v83 + 1);
    v66 = v84;
    v23 = *((_QWORD *)&v78 + 1);
    v69 = *((_QWORD *)&v79 + 1);
    v24 = v79;
    v70 = v41;
    v25 = v80;
    v64 = *((_QWORD *)&v80 + 1);
    v26 = v81;
    v61 = *((_QWORD *)&v81 + 1);
    v27 = v82;
    v56 = v83;
    v57 = *((_QWORD *)&v82 + 1);
    v60 = v78;
    v58 = *((_QWORD *)&v77 + 1);
    v59 = v77;
    swift_bridgeObjectRetain();
    sub_1CCA83044(&v77);
LABEL_24:
    sub_1CCB6433C();
    sub_1CCB639F4();
    result = sub_1CCB64384();
    v43 = -1 << *(_BYTE *)(v7 + 32);
    v44 = result & ~v43;
    v45 = v44 >> 6;
    if (((-1 << v44) & ~*(_QWORD *)(v11 + 8 * (v44 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v44) & ~*(_QWORD *)(v11 + 8 * (v44 >> 6)))) | v44 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v46 = 0;
      v47 = (unint64_t)(63 - v43) >> 6;
      do
      {
        if (++v45 == v47 && (v46 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v48 = v45 == v47;
        if (v45 == v47)
          v45 = 0;
        v46 |= v48;
        v49 = *(_QWORD *)(v11 + 8 * v45);
      }
      while (v49 == -1);
      v14 = __clz(__rbit64(~v49)) + (v45 << 6);
    }
    LOBYTE(v77) = v25;
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v20;
    v15[1] = v21;
    v16 = *(_QWORD *)(v7 + 56) + 208 * v14;
    *(_QWORD *)v16 = v59;
    *(_QWORD *)(v16 + 8) = v58;
    *(_BYTE *)(v16 + 16) = v60;
    *(_QWORD *)(v16 + 40) = v69;
    *(_BYTE *)(v16 + 48) = v25;
    *(_QWORD *)(v16 + 56) = v64;
    *(_BYTE *)(v16 + 64) = v26;
    *(_QWORD *)(v16 + 72) = v61;
    *(_BYTE *)(v16 + 80) = v27;
    *(_QWORD *)(v16 + 88) = v57;
    *(_QWORD *)(v16 + 96) = v56;
    *(_QWORD *)(v16 + 104) = v68;
    *(_QWORD *)(v16 + 112) = v66;
    *(_QWORD *)(v16 + 120) = v76;
    *(_QWORD *)(v16 + 128) = v75;
    *(_QWORD *)(v16 + 136) = v74;
    *(_QWORD *)(v16 + 144) = v72;
    *(_QWORD *)(v16 + 152) = v71;
    *(_QWORD *)(v16 + 160) = v70;
    *(_QWORD *)(v16 + 168) = v67;
    *(_QWORD *)(v16 + 176) = v65;
    *(_QWORD *)(v16 + 184) = v63;
    *(_QWORD *)(v16 + 192) = v62;
    *(_BYTE *)(v16 + 200) = v73;
    *(_QWORD *)(v16 + 24) = v23;
    *(_QWORD *)(v16 + 32) = v24;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v51;
  v29 = v53;
  if ((v55 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v50 = 1 << *(_BYTE *)(v5 + 32);
  if (v50 >= 64)
    bzero(v29, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v50;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CCAE9988(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  sub_1CCA14E90(&qword_1EF9E3480);
  v38 = a2;
  v6 = sub_1CCB640A8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_33;
      v24 = *(_QWORD *)(v37 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v24 = *(_QWORD *)(v37 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v30);
    if ((v38 & 1) == 0)
      v33 = v31;
    sub_1CCB63988();
    sub_1CCB6433C();
    sub_1CCB639F4();
    v14 = sub_1CCB64384();
    result = swift_bridgeObjectRelease();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1CCAE9CB0(uint64_t a1, int a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t (*v48)(_QWORD);

  v6 = v4;
  v48 = a3;
  v8 = a3(0);
  v46 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v42 - v9;
  v11 = *v4;
  sub_1CCA14E90(a4);
  v47 = a2;
  v12 = sub_1CCB640A8();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v45 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v43 = v4;
  v44 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v20;
    if (!v27)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_34;
      v27 = v45[v20];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_34:
          swift_release();
          v6 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v20 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_43;
            if (v20 >= v44)
              goto LABEL_34;
            v27 = v45[v20];
            ++v28;
            if (v27)
              goto LABEL_21;
          }
        }
        v20 = v28;
      }
    }
LABEL_21:
    v17 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    v29 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v24);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(v46 + 72);
    v33 = *(_QWORD *)(v11 + 56) + v32 * v24;
    if ((v47 & 1) != 0)
    {
      sub_1CC9FED60(v33, (uint64_t)v10, v48);
    }
    else
    {
      sub_1CCA0BEEC(v33, (uint64_t)v10, v48);
      swift_bridgeObjectRetain();
    }
    sub_1CCB6433C();
    sub_1CCB639F4();
    result = sub_1CCB64384();
    v34 = -1 << *(_BYTE *)(v13 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v18 + 8 * v36);
      }
      while (v40 == -1);
      v21 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v22 = (_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v21);
    *v22 = v31;
    v22[1] = v30;
    result = sub_1CC9FED60((uint64_t)v10, *(_QWORD *)(v13 + 56) + v32 * v21, v48);
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v6 = v43;
  v26 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v41 = 1 << *(_BYTE *)(v11 + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v6 = v13;
  return result;
}

uint64_t sub_1CCAEA024(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  _OWORD v20[2];

  v3 = v2;
  v5 = *v2;
  sub_1CCA14E90(&qword_1EF9E33C0);
  v6 = sub_1CCB640A8();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_29;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v19 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v19 <= 1)
  {
    swift_release();
    v11 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_29;
    goto LABEL_25;
  }
  v11 = (_QWORD *)(v5 + 64);
  v12 = *(_QWORD *)(v5 + 72);
  v13 = 1;
  if (v12)
    goto LABEL_17;
  v13 = 2;
  if (v19 <= 2)
    goto LABEL_22;
  v12 = *(_QWORD *)(v5 + 80);
  if (v12)
  {
LABEL_17:
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_18:
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v10);
    v16 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v10);
    if ((a2 & 1) != 0)
      sub_1CCA0799C(v16, v20);
    else
      sub_1CCA0CC30((uint64_t)v16, (uint64_t)v20);
    sub_1CCB6433C();
    __asm { BR              X8 }
  }
  v14 = 3;
  if (v19 > 3)
  {
    v12 = *(_QWORD *)(v5 + 88);
    if (v12)
    {
      v13 = 3;
      goto LABEL_17;
    }
    while (1)
    {
      v13 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        JUMPOUT(0x1CCAEA3C4);
      }
      if (v13 >= v19)
        break;
      v12 = *(_QWORD *)(v5 + 64 + 8 * v13);
      ++v14;
      if (v12)
        goto LABEL_17;
    }
  }
LABEL_22:
  swift_release();
  if ((a2 & 1) == 0)
    goto LABEL_29;
LABEL_25:
  v17 = 1 << *(_BYTE *)(v5 + 32);
  if (v17 >= 64)
    bzero(v11, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v11 = -1 << v17;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_29:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_1CCAEA3D4(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = sub_1CCB63604();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  sub_1CCA14E90(&qword_1EF9E3400);
  v42 = a2;
  v10 = sub_1CCB640A8();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_bridgeObjectRetain();
    }
    sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = sub_1CCB63934();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_1CCAEA768(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  v4 = sub_1CCB63604();
  v42 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v2;
  v7 = *v2;
  sub_1CCA14E90(&qword_1EF9E33E0);
  v8 = sub_1CCB640A8();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
    v35 = v38;
LABEL_42:
    *v35 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 64);
  v40 = (_QWORD *)(v7 + 64);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v39 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  result = swift_retain();
  v16 = 0;
  HIDWORD(v37) = a2;
  v17 = 16;
  if ((a2 & 1) != 0)
    v17 = 32;
  v41 = v17;
  while (1)
  {
    if (v13)
    {
      v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v20 = v19 | (v16 << 6);
      goto LABEL_24;
    }
    v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v21 >= v39)
    {
      swift_release();
      v35 = v38;
      v22 = v40;
      if ((v37 & 0x100000000) != 0)
      {
LABEL_37:
        v36 = 1 << *(_BYTE *)(v7 + 32);
        if (v36 >= 64)
          bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v22 = -1 << v36;
        *(_QWORD *)(v7 + 16) = 0;
      }
LABEL_41:
      result = swift_release();
      goto LABEL_42;
    }
    v22 = v40;
    v23 = v40[v21];
    ++v16;
    if (!v23)
    {
      v16 = v21 + 1;
      if (v21 + 1 >= v39)
        goto LABEL_34;
      v23 = v40[v16];
      if (!v23)
        break;
    }
LABEL_23:
    v13 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + v41))(v6, *(_QWORD *)(v7 + 48) + v25 * v20, v4);
    v26 = v7;
    v27 = *(_BYTE *)(*(_QWORD *)(v7 + 56) + v20);
    sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = sub_1CCB63934();
    v28 = -1 << *(_BYTE *)(v9 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v14 + 8 * v30);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v42 + 32))(*(_QWORD *)(v9 + 48) + v25 * v18, v6, v4);
    *(_BYTE *)(*(_QWORD *)(v9 + 56) + v18) = v27;
    ++*(_QWORD *)(v9 + 16);
    v7 = v26;
  }
  v24 = v21 + 2;
  if (v24 >= v39)
  {
LABEL_34:
    swift_release();
    v35 = v38;
    if ((v37 & 0x100000000) != 0)
      goto LABEL_37;
    goto LABEL_41;
  }
  v23 = v40[v24];
  if (v23)
  {
    v16 = v24;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v16 >= v39)
      goto LABEL_34;
    v23 = v40[v16];
    ++v24;
    if (v23)
      goto LABEL_23;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_1CCAEAB04(uint64_t a1, int a2)
{
  return sub_1CCAEAB10(a1, a2, &qword_1EF9E3490);
}

uint64_t sub_1CCAEAB10(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;

  v6 = sub_1CCB63604();
  v44 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = v3;
  v9 = *v3;
  sub_1CCA14E90(a3);
  v10 = sub_1CCB640A8();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = swift_release();
    v37 = v40;
LABEL_42:
    *v37 = v11;
    return result;
  }
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  HIDWORD(v39) = a2;
  v19 = 16;
  if ((a2 & 1) != 0)
    v19 = 32;
  v43 = v19;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v23 >= v41)
    {
      swift_release();
      v37 = v40;
      v24 = v42;
      if ((v39 & 0x100000000) != 0)
      {
LABEL_37:
        v38 = 1 << *(_BYTE *)(v9 + 32);
        if (v38 >= 64)
          bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v24 = -1 << v38;
        *(_QWORD *)(v9 + 16) = 0;
      }
LABEL_41:
      result = swift_release();
      goto LABEL_42;
    }
    v24 = v42;
    v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_34;
      v25 = v42[v18];
      if (!v25)
        break;
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v44 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v44 + v43))(v8, *(_QWORD *)(v9 + 48) + v27 * v22, v6);
    v28 = v9;
    v29 = *(_BYTE *)(*(_QWORD *)(v9 + 56) + v22);
    sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = sub_1CCB63934();
    v30 = -1 << *(_BYTE *)(v11 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v16 + 8 * v32);
      }
      while (v36 == -1);
      v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v44 + 32))(*(_QWORD *)(v11 + 48) + v27 * v20, v8, v6);
    *(_BYTE *)(*(_QWORD *)(v11 + 56) + v20) = v29;
    ++*(_QWORD *)(v11 + 16);
    v9 = v28;
  }
  v26 = v23 + 2;
  if (v26 >= v41)
  {
LABEL_34:
    swift_release();
    v37 = v40;
    if ((v39 & 0x100000000) != 0)
      goto LABEL_37;
    goto LABEL_41;
  }
  v25 = v42[v26];
  if (v25)
  {
    v18 = v26;
    goto LABEL_23;
  }
  while (1)
  {
    v18 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v18 >= v41)
      goto LABEL_34;
    v25 = v42[v18];
    ++v26;
    if (v25)
      goto LABEL_23;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_1CCAEAEB4(uint64_t a1, int a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t i;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t (*v51)(_QWORD);

  v6 = v4;
  v51 = a3;
  v8 = a3(0);
  v48 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v50 = (uint64_t)&v44 - v9;
  v10 = sub_1CCB63604();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v4;
  sub_1CCA14E90(a4);
  v49 = a2;
  v15 = sub_1CCB640A8();
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_41;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v46 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v44 = v4;
  v45 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 64;
  result = swift_retain();
  v23 = 0;
  for (i = v14; ; v14 = i)
  {
    if (v20)
    {
      v25 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v26 = v25 | (v23 << 6);
      goto LABEL_22;
    }
    v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v45)
      break;
    v28 = v46;
    v29 = v46[v27];
    ++v23;
    if (!v29)
    {
      v23 = v27 + 1;
      if (v27 + 1 >= v45)
        goto LABEL_34;
      v29 = v46[v23];
      if (!v29)
      {
        v30 = v27 + 2;
        if (v30 >= v45)
        {
LABEL_34:
          swift_release();
          v6 = v44;
          if ((v49 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v29 = v46[v30];
        if (!v29)
        {
          while (1)
          {
            v23 = v30 + 1;
            if (__OFADD__(v30, 1))
              goto LABEL_43;
            if (v23 >= v45)
              goto LABEL_34;
            v29 = v46[v23];
            ++v30;
            if (v29)
              goto LABEL_21;
          }
        }
        v23 = v30;
      }
    }
LABEL_21:
    v20 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_22:
    v31 = *(_QWORD *)(v11 + 72);
    v32 = *(_QWORD *)(v14 + 48) + v31 * v26;
    if ((v49 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 32))(v13, v32, v10);
      v33 = *(_QWORD *)(v14 + 56);
      v34 = *(_QWORD *)(v48 + 72);
      sub_1CC9FED60(v33 + v34 * v26, v50, v51);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v13, v32, v10);
      v35 = *(_QWORD *)(v14 + 56);
      v34 = *(_QWORD *)(v48 + 72);
      sub_1CCA0BEEC(v35 + v34 * v26, v50, v51);
    }
    sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = sub_1CCB63934();
    v36 = -1 << *(_BYTE *)(v16 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v21 + 8 * (v37 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v21 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v21 + 8 * v38);
      }
      while (v42 == -1);
      v24 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(*(_QWORD *)(v16 + 48) + v31 * v24, v13, v10);
    result = sub_1CC9FED60(v50, *(_QWORD *)(v16 + 56) + v34 * v24, v51);
    ++*(_QWORD *)(v16 + 16);
  }
  swift_release();
  v6 = v44;
  v28 = v46;
  if ((v49 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v43 = 1 << *(_BYTE *)(v14 + 32);
  if (v43 >= 64)
    bzero(v28, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v43;
  *(_QWORD *)(v14 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v6 = v16;
  return result;
}

uint64_t sub_1CCAEB2A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1CCA074F4(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = v19 + *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90((uint64_t *)&unk_1EF9E2A10) - 8) + 72) * v12;
        return sub_1CCAF3770(a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1CCAEC768();
      goto LABEL_7;
    }
    sub_1CCAE8504(v15, a4 & 1);
    v22 = sub_1CCA074F4(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CCAEBC60(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_1CCB642DC();
  __break(1u);
  return result;
}

id sub_1CCAEB3E0(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  id result;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1CCAC8DD0((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= (uint64_t)result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= (uint64_t)result && (a3 & 1) == 0)
  {
    result = sub_1CCAED25C();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v15[7] + 8 * v9) = a1;
      return result;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v17 = 8 * v9;
    *(_QWORD *)(v15[6] + v17) = a2;
    *(_QWORD *)(v15[7] + v17) = a1;
    v18 = v15[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
    {
      v15[2] = v20;
      return a2;
    }
    goto LABEL_14;
  }
  sub_1CCAE9988((uint64_t)result, a3 & 1);
  result = (id)sub_1CCAC8DD0((uint64_t)a2);
  if ((v13 & 1) == (v16 & 1))
  {
    v9 = (unint64_t)result;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for SPBeaconTaskName(0);
  result = (id)sub_1CCB642DC();
  __break(1u);
  return result;
}

uint64_t sub_1CCAEB524(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_1CCA074F4(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = type metadata accessor for FMIPMonitoredDevice(0);
        return sub_1CCABB698(a1, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, type metadata accessor for FMIPMonitoredDevice);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1CCAED410(type metadata accessor for FMIPMonitoredDevice, &qword_1EF9E3EA8);
      goto LABEL_7;
    }
    sub_1CCAE9CB0(v15, a4 & 1, type metadata accessor for FMIPMonitoredDevice, &qword_1EF9E3EA8);
    v22 = sub_1CCA074F4(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1CCAEBCFC(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_1CCB642DC();
  __break(1u);
  return result;
}

uint64_t sub_1CCAEB684(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = sub_1CCB63604();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1CCAC8D64(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1CCAED7FC();
    goto LABEL_7;
  }
  sub_1CCAEA3D4(v17, a3 & 1);
  v23 = sub_1CCAC8D64(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = sub_1CCB642DC();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1CCAEBDF0(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1CCAEB7E0(char a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;

  v4 = (_QWORD **)v3;
  v8 = sub_1CCB63604();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_1CCAC8D64(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v20[7] + v14) = a1 & 1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_1CCAEDA2C();
    goto LABEL_7;
  }
  sub_1CCAEA768(result, a3 & 1);
  result = sub_1CCAC8D64(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    result = sub_1CCB642DC();
    __break(1u);
    return result;
  }
  v14 = result;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1CCAEBE88(v14, (uint64_t)v11, a1 & 1, v20);
}

uint64_t sub_1CCAEB934(int a1, uint64_t a2, char a3)
{
  return sub_1CCAEB94C(a1, a2, a3, &qword_1EF9E33F0);
}

uint64_t sub_1CCAEB940(int a1, uint64_t a2, char a3)
{
  return sub_1CCAEB94C(a1, a2, a3, &qword_1EF9E3490);
}

uint64_t sub_1CCAEB94C(int a1, uint64_t a2, char a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD **v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;
  int v24;

  v6 = (_QWORD **)v4;
  v24 = a1;
  v9 = sub_1CCB63604();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v15 = sub_1CCAC8D64(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  result = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v6;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v21[7] + v15) = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_1CCAEDC58(a4);
    goto LABEL_7;
  }
  sub_1CCAEAB10(result, a3 & 1, a4);
  result = sub_1CCAC8D64(a2);
  if ((v19 & 1) != (v22 & 1))
  {
LABEL_14:
    result = sub_1CCB642DC();
    __break(1u);
    return result;
  }
  v15 = result;
  v21 = *v6;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  return sub_1CCAEBE88(v15, (uint64_t)v12, v24, v21);
}

uint64_t sub_1CCAEBAB0(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1CCAEBAD8(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata, &qword_1EF9E34A0);
}

uint64_t sub_1CCAEBAC4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1CCAEBAD8(a1, a2, a3, type metadata accessor for FMIPDeviceConnectedState, &qword_1EF9E3EB0);
}

uint64_t sub_1CCAEBAD8(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  _QWORD *v5;
  _QWORD **v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;

  v28 = a5;
  v29 = a1;
  v7 = (_QWORD **)v5;
  v10 = sub_1CCB63604();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_1CCAC8D64(a2);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    v22 = *v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];
      v24 = a4(0);
      return sub_1CCABB698(v29, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v16, a4);
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    sub_1CCAEDE78(a4, v28);
    goto LABEL_7;
  }
  sub_1CCAEAEB4(v19, a3 & 1, a4, v28);
  v26 = sub_1CCAC8D64(a2);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    result = sub_1CCB642DC();
    __break(1u);
    return result;
  }
  v16 = v26;
  v22 = *v7;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return sub_1CCAEBF30(v16, (uint64_t)v13, v29, v22, a4);
}

uint64_t sub_1CCAEBC60(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = sub_1CCA14E90((uint64_t *)&unk_1EF9E2A10);
  result = sub_1CC9C3EC0(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, (uint64_t *)&unk_1EF9E2A10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

uint64_t sub_1CCAEBCFC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for FMIPMonitoredDevice(0);
  result = sub_1CC9FED60(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, type metadata accessor for FMIPMonitoredDevice);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

_OWORD *sub_1CCAEBD8C(unint64_t a1, char a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  result = sub_1CCA0799C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_1CCAEBDF0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1CCB63604();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_1CCAEBE88(unint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_1CCB63604();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_BYTE *)(a4[7] + a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_1CCAEBF24(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_1CCAEBF30(a1, a2, a3, a4, type metadata accessor for FMIPDeviceConnectedState);
}

uint64_t sub_1CCAEBF30(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = sub_1CCB63604();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v12 = a4[7];
  v13 = a5(0);
  result = sub_1CC9FED60(a3, v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a5);
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

void *sub_1CCAEBFE8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = v0;
  v2 = sub_1CCB63604();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA14E90(&qword_1EF9E3420);
  v6 = *v0;
  v7 = sub_1CCB6409C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_26:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v26 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v12++, 1))
      goto LABEL_28;
    if (v12 >= v27)
    {
LABEL_24:
      result = (void *)swift_release();
      v1 = v25;
      goto LABEL_26;
    }
    v22 = *(_QWORD *)(v26 + 8 * v12);
    if (!v22)
      break;
LABEL_23:
    v15 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v18, v2);
    v19 = 8 * v17;
    v20 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v18, v5, v2);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v20;
    result = (void *)sub_1CCA24CA8(v20);
  }
  v23 = v12 + 1;
  if (v12 + 1 >= v27)
    goto LABEL_24;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    ++v12;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v27)
      goto LABEL_24;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_23;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

id sub_1CCAEC20C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_1CCA14E90(&qword_1EF9DF5A0);
  v2 = *v0;
  v3 = sub_1CCB6409C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CCAEC3C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_1CCA14E90(&qword_1ED8AA378);
  v2 = *v0;
  v3 = sub_1CCB6409C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1CCAEC578()
{
  return sub_1CCAEC9C0(&qword_1EF9E3440);
}

id sub_1CCAEC584()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;

  v1 = v0;
  sub_1CCA14E90(&qword_1EF9E2880);
  v2 = *v0;
  v3 = sub_1CCB6409C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v30 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      v9 = v30 + 1;
      if (v30 + 1 >= v13)
        goto LABEL_26;
      v31 = *(_QWORD *)(v6 + 8 * v9);
      if (!v31)
        break;
    }
LABEL_25:
    v12 = (v31 - 1) & v31;
    v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_BYTE *)v21;
    v23 = *(_BYTE *)(v21 + 1);
    v24 = *(_BYTE *)(v21 + 2);
    v25 = *(_BYTE *)(v21 + 3);
    v26 = *(void **)(v21 + 8);
    v27 = *(_QWORD *)(v21 + 16);
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v28 = v19;
    v28[1] = v18;
    v29 = *(_QWORD *)(v4 + 56) + v20;
    *(_BYTE *)v29 = v22;
    *(_BYTE *)(v29 + 1) = v23;
    *(_BYTE *)(v29 + 2) = v24;
    *(_BYTE *)(v29 + 3) = v25;
    *(_QWORD *)(v29 + 8) = v26;
    *(_QWORD *)(v29 + 16) = v27;
    swift_bridgeObjectRetain();
    result = v26;
  }
  v32 = v30 + 2;
  if (v32 >= v13)
    goto LABEL_26;
  v31 = *(_QWORD *)(v6 + 8 * v32);
  if (v31)
  {
    v9 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v9);
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CCAEC768()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = sub_1CCA14E90((uint64_t *)&unk_1EF9E2A10);
  v28 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA14E90(&qword_1EF9E3EC8);
  v5 = *v0;
  v6 = sub_1CCB6409C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_25:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v27 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v27)
      goto LABEL_23;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v10;
    if (!v23)
    {
      v10 = v22 + 1;
      if (v22 + 1 >= v27)
        goto LABEL_23;
      v23 = *(_QWORD *)(v26 + 8 * v10);
      if (!v23)
        break;
    }
LABEL_22:
    v13 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_9:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(v28 + 72) * v15;
    sub_1CC9EAB74(*(_QWORD *)(v5 + 56) + v20, (uint64_t)v4, (uint64_t *)&unk_1EF9E2A10);
    v21 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1CC9C3EC0((uint64_t)v4, *(_QWORD *)(v7 + 56) + v20, (uint64_t *)&unk_1EF9E2A10);
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v27)
  {
LABEL_23:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_25;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v10 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v10 >= v27)
      goto LABEL_23;
    v23 = *(_QWORD *)(v26 + 8 * v10);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_1CCAEC9B4()
{
  return sub_1CCAEC9C0(&qword_1EF9E3ED0);
}

id sub_1CCAEC9C0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_1CCA14E90(a1);
  v3 = *v1;
  v4 = sub_1CCB6409C();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CCAECB68()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[296];

  v1 = v0;
  v2 = type metadata accessor for FMReverseGeocodingRequest();
  v25 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA14E90(&qword_1EF9E3EC0);
  v5 = *v0;
  v6 = sub_1CCB6409C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v23 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v24 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v15)
      goto LABEL_26;
    v21 = *(_QWORD *)(v24 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v15)
        goto LABEL_26;
      v21 = *(_QWORD *)(v24 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v17 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v25 + 72) * v17;
    sub_1CCA0BEEC(*(_QWORD *)(v5 + 48) + v18, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    v19 = 288 * v17;
    memcpy(v26, (const void *)(*(_QWORD *)(v5 + 56) + v19), 0x120uLL);
    sub_1CC9FED60((uint64_t)v4, *(_QWORD *)(v7 + 48) + v18, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    memcpy((void *)(*(_QWORD *)(v7 + 56) + v19), v26, 0x120uLL);
    result = (void *)sub_1CCA31FF8((uint64_t)v26);
  }
  v22 = v20 + 2;
  if (v22 >= v15)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v23;
    goto LABEL_28;
  }
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v21 = *(_QWORD *)(v24 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1CCAECDC0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = sub_1CCB63604();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA14E90(&qword_1EF9E33A8);
  v24 = v0;
  v5 = *v0;
  v6 = sub_1CCB6409C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v24 = v7;
    return result;
  }
  result = (id)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(void **)(*(_QWORD *)(v5 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CCAECFE8()
{
  return sub_1CCAED410((uint64_t (*)(_QWORD))type metadata accessor for FMIPItem, &qword_1EF9E3EB8);
}

void *sub_1CCAECFFC()
{
  return sub_1CCAEDE78(type metadata accessor for FMIPDeviceConnectedState, &qword_1EF9E3EB0);
}

void *sub_1CCAED010()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD v56[2];

  v1 = v0;
  sub_1CCA14E90(&qword_1EF9E3EE8);
  v2 = *v0;
  v3 = sub_1CCB6409C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v42 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v42 >= v13)
      goto LABEL_26;
    v43 = *(_QWORD *)(v6 + 8 * v42);
    ++v9;
    if (!v43)
    {
      v9 = v42 + 1;
      if (v42 + 1 >= v13)
        goto LABEL_26;
      v43 = *(_QWORD *)(v6 + 8 * v9);
      if (!v43)
        break;
    }
LABEL_25:
    v12 = (v43 - 1) & v43;
    v15 = __clz(__rbit64(v43)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 56);
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v18;
    v19 = v18[1];
    v21 = 208 * v15;
    v23 = *(_OWORD *)(v17 + v21 + 16);
    v22 = *(_OWORD *)(v17 + v21 + 32);
    v24 = *(_OWORD *)(v17 + v21 + 64);
    v48 = *(_OWORD *)(v17 + v21 + 48);
    v49 = v24;
    v25 = *(_OWORD *)(v17 + v21 + 128);
    v27 = *(_OWORD *)(v17 + v21 + 80);
    v26 = *(_OWORD *)(v17 + v21 + 96);
    v52 = *(_OWORD *)(v17 + v21 + 112);
    v53 = v25;
    v50 = v27;
    v51 = v26;
    v29 = *(_OWORD *)(v17 + v21 + 160);
    v28 = *(_OWORD *)(v17 + v21 + 176);
    v30 = *(_OWORD *)(v17 + v21 + 144);
    *(_OWORD *)((char *)v56 + 9) = *(_OWORD *)(v17 + v21 + 185);
    v55 = v29;
    v56[0] = v28;
    v54 = v30;
    v45 = *(_OWORD *)(v17 + v21);
    v46 = v23;
    v47 = v22;
    v31 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v31 = v20;
    v31[1] = v19;
    v32 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v21);
    *v32 = v45;
    v33 = v46;
    v34 = v47;
    v35 = v49;
    v32[3] = v48;
    v32[4] = v35;
    v32[1] = v33;
    v32[2] = v34;
    v36 = v50;
    v37 = v51;
    v38 = v53;
    v32[7] = v52;
    v32[8] = v38;
    v32[5] = v36;
    v32[6] = v37;
    v39 = v54;
    v40 = v55;
    v41 = v56[0];
    *(_OWORD *)((char *)v32 + 185) = *(_OWORD *)((char *)v56 + 9);
    v32[10] = v40;
    v32[11] = v41;
    v32[9] = v39;
    swift_bridgeObjectRetain();
    result = sub_1CCA83044(&v45);
  }
  v44 = v42 + 2;
  if (v44 >= v13)
    goto LABEL_26;
  v43 = *(_QWORD *)(v6 + 8 * v44);
  if (v43)
  {
    v9 = v44;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v43 = *(_QWORD *)(v6 + 8 * v9);
    ++v44;
    if (v43)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1CCAED25C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_1CCA14E90(&qword_1EF9E3480);
  v2 = *v0;
  v3 = sub_1CCB6409C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CCAED3FC()
{
  return sub_1CCAED410(type metadata accessor for FMIPMonitoredDevice, &qword_1EF9E3EA8);
}

void *sub_1CCAED410(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;

  v5 = a1(0);
  v32 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v29 - v6;
  sub_1CCA14E90(a2);
  v29 = v2;
  v8 = *v2;
  v9 = sub_1CCB6409C();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v29 = v10;
    return result;
  }
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v30 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v31 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v26 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v14;
    if (!v27)
    {
      v14 = v26 + 1;
      if (v26 + 1 >= v31)
        goto LABEL_26;
      v27 = *(_QWORD *)(v30 + 8 * v14);
      if (!v27)
        break;
    }
LABEL_25:
    v17 = (v27 - 1) & v27;
    v19 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_12:
    v20 = 16 * v19;
    v21 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    v23 = *v21;
    v22 = v21[1];
    v24 = *(_QWORD *)(v32 + 72) * v19;
    sub_1CCA0BEEC(*(_QWORD *)(v8 + 56) + v24, (uint64_t)v7, a1);
    v25 = (_QWORD *)(*(_QWORD *)(v10 + 48) + v20);
    *v25 = v23;
    v25[1] = v22;
    sub_1CC9FED60((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24, a1);
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v31)
    goto LABEL_26;
  v27 = *(_QWORD *)(v30 + 8 * v28);
  if (v27)
  {
    v14 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v14 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v14);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CCAED640()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _OWORD v20[2];

  v1 = v0;
  sub_1CCA14E90(&qword_1EF9E33C0);
  v2 = *v0;
  v3 = sub_1CCB6409C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    sub_1CCA0CC30(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    result = sub_1CCA0799C(v20, (_OWORD *)(*(_QWORD *)(v4 + 56) + 32 * v15));
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CCAED7FC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = sub_1CCB63604();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA14E90(&qword_1EF9E3400);
  v24 = v0;
  v5 = *v0;
  v6 = sub_1CCB6409C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CCAEDA2C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;

  v1 = sub_1CCB63604();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA14E90(&qword_1EF9E33E0);
  v23 = v0;
  v5 = *v0;
  v6 = sub_1CCB6409C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v23 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v24 = v5 + 64;
  v25 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v25)
        goto LABEL_26;
      v20 = *(_QWORD *)(v24 + 8 * v11);
      if (!v20)
        break;
    }
LABEL_25:
    v14 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v16) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v25)
    goto LABEL_26;
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CCAEDC4C()
{
  return sub_1CCAEDC58(&qword_1EF9E3490);
}

void *sub_1CCAEDC58(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v3 = sub_1CCB63604();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA14E90(a1);
  v25 = v1;
  v7 = *v1;
  v8 = sub_1CCB6409C();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v25 = v9;
    return result;
  }
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v26 = v7 + 64;
  v27 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v13);
      if (!v22)
        break;
    }
LABEL_25:
    v16 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = *(_BYTE *)(*(_QWORD *)(v7 + 56) + v18);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_BYTE *)(*(_QWORD *)(v9 + 56) + v18) = v20;
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1CCAEDE78(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t i;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD);
  uint64_t v42;
  uint64_t v43;

  v41 = a1;
  v4 = a1(0);
  v40 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v39 = (char *)&v34 - v5;
  v38 = sub_1CCB63604();
  v6 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v37 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA14E90(a2);
  v34 = v2;
  v8 = *v2;
  v9 = sub_1CCB6409C();
  v10 = *(_QWORD *)(v8 + 16);
  v43 = v9;
  if (!v10)
  {
    result = (void *)swift_release();
    v33 = v43;
    v32 = v34;
LABEL_25:
    *v32 = v33;
    return result;
  }
  v11 = v9;
  result = (void *)(v9 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    v11 = v43;
  }
  v14 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v42 = v8;
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v35 = v8 + 64;
  v36 = (unint64_t)(v15 + 63) >> 6;
  v19 = v37;
  v18 = v38;
  v20 = (uint64_t)v39;
  for (i = v43; ; result = (void *)sub_1CC9FED60(v20, *(_QWORD *)(i + 56) + v28, v27))
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v14 << 6);
      v24 = v42;
      goto LABEL_9;
    }
    v29 = v14 + 1;
    v24 = v42;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v36)
      goto LABEL_23;
    v30 = *(_QWORD *)(v35 + 8 * v29);
    ++v14;
    if (!v30)
    {
      v14 = v29 + 1;
      if (v29 + 1 >= v36)
        goto LABEL_23;
      v30 = *(_QWORD *)(v35 + 8 * v14);
      if (!v30)
        break;
    }
LABEL_22:
    v17 = (v30 - 1) & v30;
    v23 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_9:
    v25 = *(_QWORD *)(v6 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v19, *(_QWORD *)(v24 + 48) + v25, v18);
    v26 = *(_QWORD *)(v24 + 56);
    v27 = v41;
    v28 = *(_QWORD *)(v40 + 72) * v23;
    sub_1CCA0BEEC(v26 + v28, v20, v41);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(i + 48) + v25, v19, v18);
  }
  v31 = v29 + 2;
  if (v31 >= v36)
  {
LABEL_23:
    result = (void *)swift_release();
    v32 = v34;
    v33 = v43;
    goto LABEL_25;
  }
  v30 = *(_QWORD *)(v35 + 8 * v31);
  if (v30)
  {
    v14 = v31;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v14 >= v36)
      goto LABEL_23;
    v30 = *(_QWORD *)(v35 + 8 * v14);
    ++v31;
    if (v30)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void _s8FMIPCore12FMIPPartInfoV2eeoiySbAC_ACtFZ_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v6 = a2[2];
  v5 = a2[3];
  v7 = *(_QWORD *)a1 == *a2 && *(_QWORD *)(a1 + 8) == a2[1];
  if (v7 || (sub_1CCB642A0() & 1) != 0)
  {
    if (v3)
    {
      if (v5)
      {
        v8 = v2 == v6 && v3 == v5;
        if (v8 || (sub_1CCB642A0() & 1) != 0)
          goto LABEL_13;
      }
    }
    else if (!v5)
    {
LABEL_13:
      sub_1CCB1DD68(v4);
    }
  }
}

uint64_t _s8FMIPCore8FMIPItemV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  _BYTE *v93;
  int v94;
  uint64_t v95;
  char v96;
  int v97;
  int v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  _BYTE *v119;
  _BYTE *v120;
  _BYTE *v121;
  _BYTE *v122;
  double *v123;
  _BYTE *v124;
  uint64_t v125;
  _BYTE *v126;
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  _BYTE *v130;
  _BYTE *v131;
  _BYTE *v132;
  _BYTE *v133;
  _BYTE *v134;
  _BYTE *v135;
  _BYTE *v136;
  _BYTE *v137;
  _BYTE *v138;
  _BYTE *v139;
  _BYTE *v140;
  _BYTE *v141;
  _BYTE *v142;
  _BYTE *v143;
  _BYTE *v144;
  uint64_t v145;
  char v146;
  id v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  char v153;
  int *v154;
  char v155;
  int v156;
  int *v157;
  int v158;
  int v159;
  int *v160;
  int v161;
  int v162;
  int v163;
  void *v164;
  void *v165;
  uint64_t v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  id v172;
  id v173;
  _BYTE *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int (*v179)(uint64_t, uint64_t, uint64_t);
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  char v192;
  uint64_t v193;
  _BYTE *v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  _BYTE *v200;
  uint64_t v201;
  uint64_t v202;
  double v203;
  double v204;
  char v205;
  char v206;
  BOOL v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  char v230;
  _BYTE v231[4];
  int v232;
  _BYTE *v233;
  _BYTE *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _BYTE *v238;
  int *v239;
  uint64_t v240;
  _BYTE *v241;
  _BYTE *v242;
  _BYTE *v243;
  _BYTE *v244;
  _BYTE *v245;
  _BYTE *v246;
  _BYTE *v247;
  _BYTE *v248;
  _BYTE *v249;
  _BYTE *v250;
  _BYTE *v251;
  _BYTE *v252;
  _BYTE *v253;
  _BYTE *v254;
  double *v255;
  _BYTE *v256;
  _BYTE *v257;
  _BYTE *v258;
  _BYTE *v259;
  _BYTE *v260;
  _BYTE *v261;
  _BYTE *v262;
  _BYTE *v263;
  _BYTE *v264;
  _BYTE *v265;
  _BYTE *v266;
  _BYTE *v267;
  _BYTE *v268;
  uint64_t v269;
  _BYTE *v270;
  _BYTE *v271;
  _BYTE *v272;
  _BYTE *v273;
  _BYTE *v274;
  _BYTE *v275;
  uint64_t v276;
  _QWORD v277[36];
  _BYTE v278[288];
  _BYTE v279[288];
  _BYTE v280[288];
  double v281[36];
  uint64_t v282;
  id v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  uint64_t v287;
  _BYTE v288[288];
  _BYTE v289[288];
  _BYTE v290[296];

  v4 = type metadata accessor for FMIPItemLostModeMetadata();
  v236 = *(_QWORD *)(v4 - 8);
  v237 = v4;
  MEMORY[0x1E0C80A78](v4);
  v233 = &v231[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_1CCA14E90(&qword_1ED8A8CD0);
  MEMORY[0x1E0C80A78](v6);
  v234 = &v231[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v235 = sub_1CCA14E90(&qword_1EF9E3EF0);
  MEMORY[0x1E0C80A78](v235);
  v238 = &v231[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v239 = (int *)type metadata accessor for FMIPItem();
  v9 = MEMORY[0x1E0C80A78](v239);
  v11 = &v231[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x1E0C80A78](v9);
  v259 = &v231[-v13];
  v14 = MEMORY[0x1E0C80A78](v12);
  v262 = &v231[-v15];
  v16 = MEMORY[0x1E0C80A78](v14);
  v261 = &v231[-v17];
  v18 = MEMORY[0x1E0C80A78](v16);
  v242 = &v231[-v19];
  v20 = MEMORY[0x1E0C80A78](v18);
  v243 = &v231[-v21];
  v22 = MEMORY[0x1E0C80A78](v20);
  v264 = &v231[-v23];
  v24 = MEMORY[0x1E0C80A78](v22);
  v263 = &v231[-v25];
  v26 = MEMORY[0x1E0C80A78](v24);
  v268 = &v231[-v27];
  v28 = MEMORY[0x1E0C80A78](v26);
  v265 = &v231[-v29];
  v30 = MEMORY[0x1E0C80A78](v28);
  v241 = &v231[-v31];
  v32 = MEMORY[0x1E0C80A78](v30);
  v267 = &v231[-v33];
  v34 = MEMORY[0x1E0C80A78](v32);
  v273 = &v231[-v35];
  v36 = MEMORY[0x1E0C80A78](v34);
  v266 = &v231[-v37];
  v38 = MEMORY[0x1E0C80A78](v36);
  v270 = &v231[-v39];
  v40 = MEMORY[0x1E0C80A78](v38);
  v258 = &v231[-v41];
  v42 = MEMORY[0x1E0C80A78](v40);
  v257 = &v231[-v43];
  v44 = MEMORY[0x1E0C80A78](v42);
  v271 = &v231[-v45];
  v46 = MEMORY[0x1E0C80A78](v44);
  v272 = &v231[-v47];
  v48 = MEMORY[0x1E0C80A78](v46);
  v274 = &v231[-v49];
  v50 = MEMORY[0x1E0C80A78](v48);
  v255 = (double *)&v231[-v51];
  v52 = MEMORY[0x1E0C80A78](v50);
  v256 = &v231[-v53];
  v54 = MEMORY[0x1E0C80A78](v52);
  v254 = &v231[-v55];
  v56 = MEMORY[0x1E0C80A78](v54);
  v253 = &v231[-v57];
  v58 = MEMORY[0x1E0C80A78](v56);
  v252 = &v231[-v59];
  v60 = MEMORY[0x1E0C80A78](v58);
  v251 = &v231[-v61];
  v62 = MEMORY[0x1E0C80A78](v60);
  v250 = &v231[-v63];
  v64 = MEMORY[0x1E0C80A78](v62);
  v249 = &v231[-v65];
  v66 = MEMORY[0x1E0C80A78](v64);
  v248 = &v231[-v67];
  v68 = MEMORY[0x1E0C80A78](v66);
  v276 = (uint64_t)&v231[-v69];
  v70 = MEMORY[0x1E0C80A78](v68);
  v275 = &v231[-v71];
  v72 = MEMORY[0x1E0C80A78](v70);
  v247 = &v231[-v73];
  v74 = MEMORY[0x1E0C80A78](v72);
  v245 = &v231[-v75];
  v76 = MEMORY[0x1E0C80A78](v74);
  v246 = &v231[-v77];
  v78 = MEMORY[0x1E0C80A78](v76);
  v80 = (double *)&v231[-v79];
  v81 = MEMORY[0x1E0C80A78](v78);
  v244 = &v231[-v82];
  v83 = MEMORY[0x1E0C80A78](v81);
  v85 = &v231[-v84];
  v86 = MEMORY[0x1E0C80A78](v83);
  v88 = &v231[-v87];
  v89 = MEMORY[0x1E0C80A78](v86);
  v91 = &v231[-v90];
  MEMORY[0x1E0C80A78](v89);
  v93 = &v231[-v92];
  v269 = a1;
  sub_1CC9C3EC0(a1 + 8, (uint64_t)v288, &qword_1ED8A71C0);
  sub_1CC9C3EC0(a2 + 8, (uint64_t)v289, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)v288, (uint64_t)v290, &qword_1ED8A71C0);
  v94 = sub_1CCA33738((uint64_t)v290);
  v260 = v11;
  if (v94 == 1)
  {
    sub_1CC9C3EC0((uint64_t)v289, (uint64_t)&v282, &qword_1ED8A71C0);
    if (sub_1CCA33738((uint64_t)&v282) == 1)
    {
      v95 = v269;
      sub_1CCA0BEEC(v269, (uint64_t)v93, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCA0BEEC(a2, (uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  sub_1CC9C3EC0((uint64_t)v288, (uint64_t)v281, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)v289, (uint64_t)&v282, &qword_1ED8A71C0);
  if (sub_1CCA33738((uint64_t)&v282) == 1)
  {
    memcpy(v279, v281, sizeof(v279));
    sub_1CC9C3EC0((uint64_t)v288, (uint64_t)v280, &qword_1ED8A71C0);
    sub_1CCA31FF8((uint64_t)v280);
    sub_1CCA31FF8((uint64_t)v280);
    sub_1CCA32130((uint64_t)v279);
LABEL_6:
    sub_1CC9C3EC0((uint64_t)v288, (uint64_t)&v282, &qword_1ED8A71C0);
    sub_1CC9C3EC0((uint64_t)v289, (uint64_t)&v287, &qword_1ED8A71C0);
    sub_1CCA307F0((uint64_t)v289, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
    sub_1CCA33750((uint64_t)&v282);
    v95 = v269;
    sub_1CCA0BEEC(v269, (uint64_t)v93, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(a2, (uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_7:
    sub_1CCA0BF30((uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v93, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(v95, (uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(a2, (uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_17:
    sub_1CCA0BF30((uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v102 = v244;
    sub_1CCA0BEEC(v95, (uint64_t)v244, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(a2, (uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v104 = (uint64_t)v245;
    v103 = (uint64_t)v246;
LABEL_18:
    sub_1CCA0BF30((uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v102, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v107 = (uint64_t)v250;
    v113 = v276;
LABEL_19:
    sub_1CCA0BEEC(v95, v103, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(a2, v104, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v112 = (uint64_t)v248;
    goto LABEL_20;
  }
  sub_1CC9C3EC0((uint64_t)v289, (uint64_t)v278, &qword_1ED8A71C0);
  memcpy(v277, v278, sizeof(v277));
  v96 = _s8FMIPCore11FMIPAddressV2eeoiySbAC_ACtFZ_0(v281, v277);
  memcpy(v279, v281, sizeof(v279));
  sub_1CC9C3EC0((uint64_t)v288, (uint64_t)v280, &qword_1ED8A71C0);
  sub_1CCA31FF8((uint64_t)v280);
  sub_1CCA32130((uint64_t)v279);
  v95 = v269;
  sub_1CCA0BEEC(v269, (uint64_t)v93, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BEEC(a2, (uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  if ((v96 & 1) == 0)
    goto LABEL_7;
LABEL_9:
  v97 = v93[296];
  v240 = a2;
  v98 = v91[296];
  sub_1CCA0BF30((uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BF30((uint64_t)v93, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BEEC(v95, (uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BEEC(v240, (uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v99 = v97 == v98;
  a2 = v240;
  if (!v99)
    goto LABEL_17;
  v100 = *((_QWORD *)v88 + 38);
  v101 = *((_QWORD *)v85 + 38);
  sub_1CCA0BF30((uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BF30((uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v102 = v244;
  sub_1CCA0BEEC(v95, (uint64_t)v244, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BEEC(v240, (uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v99 = v100 == v101;
  a2 = v240;
  v104 = (uint64_t)v245;
  v103 = (uint64_t)v246;
  if (!v99)
    goto LABEL_18;
  v105 = (void *)*((_QWORD *)v102 + 40);
  v106 = (void *)*((_QWORD *)v80 + 40);
  v107 = (uint64_t)v250;
  if (!v105)
  {
    v148 = v106;
    sub_1CCA0BF30((uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v102, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if (!v106)
    {
      sub_1CCA0BEEC(v95, v103, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCA0BEEC(a2, v104, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v112 = (uint64_t)v248;
      goto LABEL_46;
    }
    v149 = 0;
LABEL_44:
    v113 = v276;

    goto LABEL_19;
  }
  v108 = *((_QWORD *)v80 + 39);
  v109 = v80[41];
  v110 = *((_QWORD *)v102 + 41);
  v282 = *((_QWORD *)v102 + 39);
  v283 = v105;
  v284 = v110;
  if (!v106)
  {
    v149 = v105;
    sub_1CCA0BF30((uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v102, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);

    v148 = 0;
    goto LABEL_44;
  }
  LOWORD(v281[0]) = v108 & 0x101;
  BYTE2(v281[0]) = BYTE2(v108) & 1;
  BYTE3(v281[0]) = BYTE3(v108);
  *(_QWORD *)&v281[1] = v106;
  v281[2] = v109;
  v111 = v105;
  v232 = _s8FMIPCore12FMIPLocationV2eeoiySbAC_ACtFZ_0((double *)&v282, v281);
  sub_1CCA0BF30((uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BF30((uint64_t)v102, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);

  sub_1CCA0BEEC(v95, v103, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BEEC(a2, v104, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v112 = (uint64_t)v248;
  v113 = v276;
  if ((v232 & 1) == 0)
  {
LABEL_20:
    sub_1CCA0BF30(v104, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30(v103, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_21:
    v114 = v247;
    sub_1CCA0BEEC(v95, (uint64_t)v247, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v115 = v275;
    sub_1CCA0BEEC(a2, (uint64_t)v275, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v116 = (uint64_t)v249;
LABEL_22:
    sub_1CCA0BF30((uint64_t)v114, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v115, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(v95, v113, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(a2, v112, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_23:
    sub_1CCA0BF30(v113, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30(v112, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(v95, v116, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(a2, v107, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_24:
    v117 = v257;
    sub_1CCA0BF30(v107, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30(v116, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v118 = v251;
    sub_1CCA0BEEC(v95, (uint64_t)v251, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v119 = v252;
    sub_1CCA0BEEC(a2, (uint64_t)v252, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v120 = v274;
LABEL_25:
    sub_1CCA0BF30((uint64_t)v119, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v118, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v121 = v253;
    sub_1CCA0BEEC(v95, (uint64_t)v253, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v122 = v254;
    sub_1CCA0BEEC(a2, (uint64_t)v254, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v123 = v255;
LABEL_26:
    sub_1CCA0BF30((uint64_t)v122, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v121, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v124 = v256;
    sub_1CCA0BEEC(v95, (uint64_t)v256, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(a2, (uint64_t)v123, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_27:
    v125 = (uint64_t)v123;
    v126 = v268;
    sub_1CCA0BF30(v125, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v124, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v127 = (uint64_t)v117;
    v128 = v273;
LABEL_28:
    sub_1CCA0BEEC(v95, (uint64_t)v120, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v129 = v272;
    sub_1CCA0BEEC(a2, (uint64_t)v272, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_29:
    sub_1CCA0BF30((uint64_t)v129, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v120, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_30:
    v130 = v271;
    v131 = v126;
    sub_1CCA0BEEC(v95, (uint64_t)v271, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(a2, v127, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v132 = v267;
LABEL_31:
    sub_1CCA0BF30((uint64_t)v130, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30(v127, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v133 = v258;
    sub_1CCA0BEEC(v95, (uint64_t)v258, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v134 = v270;
    sub_1CCA0BEEC(a2, (uint64_t)v270, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_32:
    sub_1CCA0BF30((uint64_t)v133, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v134, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v135 = v266;
    sub_1CCA0BEEC(v95, (uint64_t)v266, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(a2, (uint64_t)v128, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_33:
    sub_1CCA0BF30((uint64_t)v128, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v135, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v136 = v265;
LABEL_34:
    sub_1CCA0BEEC(v95, (uint64_t)v132, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v137 = v241;
    sub_1CCA0BEEC(a2, (uint64_t)v241, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_35:
    sub_1CCA0BF30((uint64_t)v137, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v132, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(v95, (uint64_t)v136, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(a2, (uint64_t)v131, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_36:
    sub_1CCA0BF30((uint64_t)v131, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v136, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v138 = v263;
    sub_1CCA0BEEC(v95, (uint64_t)v263, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v139 = v264;
    sub_1CCA0BEEC(a2, (uint64_t)v264, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
LABEL_37:
    sub_1CCA0BF30((uint64_t)v138, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v139, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v140 = v243;
    sub_1CCA0BEEC(v95, (uint64_t)v243, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v141 = v242;
    sub_1CCA0BEEC(a2, (uint64_t)v242, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v143 = v261;
    v142 = v262;
LABEL_38:
    sub_1CCA0BF30((uint64_t)v141, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v140, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(v95, (uint64_t)v143, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(a2, (uint64_t)v142, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    goto LABEL_39;
  }
LABEL_46:
  v150 = *(_QWORD *)(v103 + 344);
  v151 = *(_QWORD *)(v104 + 344);
  if (!v150)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30(v104, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30(v103, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if (!v151)
      goto LABEL_52;
LABEL_54:
    swift_bridgeObjectRelease();
    v113 = v276;
    goto LABEL_21;
  }
  if (!v151)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30(v104, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30(v103, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    goto LABEL_54;
  }
  if (*(_QWORD *)(v103 + 336) == *(_QWORD *)(v104 + 336) && v150 == v151)
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30(v104, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30(v103, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    swift_bridgeObjectRelease();
LABEL_52:
    v114 = v247;
    sub_1CCA0BEEC(v95, (uint64_t)v247, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v115 = v275;
    sub_1CCA0BEEC(a2, (uint64_t)v275, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v116 = (uint64_t)v249;
    v113 = v276;
    goto LABEL_56;
  }
  v152 = sub_1CCB642A0();
  swift_bridgeObjectRetain();
  sub_1CCA0BF30(v104, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BF30(v103, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  swift_bridgeObjectRelease();
  v114 = v247;
  sub_1CCA0BEEC(v95, (uint64_t)v247, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v115 = v275;
  sub_1CCA0BEEC(a2, (uint64_t)v275, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v116 = (uint64_t)v249;
  v113 = v276;
  if ((v152 & 1) == 0)
    goto LABEL_22;
LABEL_56:
  if (*((_QWORD *)v114 + 44) == *((_QWORD *)v115 + 44) && *((_QWORD *)v114 + 45) == *((_QWORD *)v115 + 45))
  {
    sub_1CCA0BF30((uint64_t)v114, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v275, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(v95, v113, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(a2, v112, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  }
  else
  {
    v153 = sub_1CCB642A0();
    sub_1CCA0BF30((uint64_t)v114, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v275, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(v95, v276, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v113 = v276;
    sub_1CCA0BEEC(a2, v112, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if ((v153 & 1) == 0)
      goto LABEL_23;
  }
  if (*(_QWORD *)(v113 + 368) == *(_QWORD *)(v112 + 368) && *(_QWORD *)(v113 + 376) == *(_QWORD *)(v112 + 376))
  {
    sub_1CCA0BF30(v113, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30(v112, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(v95, v116, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(a2, v107, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v154 = v239;
  }
  else
  {
    v155 = sub_1CCB642A0();
    sub_1CCA0BF30(v113, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30(v112, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(v95, v116, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(a2, v107, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v154 = v239;
    if ((v155 & 1) == 0)
      goto LABEL_24;
  }
  v117 = v257;
  v156 = *(unsigned __int8 *)(v116 + v154[21]);
  sub_1CCA0BF30(v116, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v157 = v154;
  v158 = *(unsigned __int8 *)(v107 + v154[21]);
  sub_1CCA0BF30(v107, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v118 = v251;
  sub_1CCA0BEEC(v95, (uint64_t)v251, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v119 = v252;
  sub_1CCA0BEEC(v240, (uint64_t)v252, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v99 = v156 == v158;
  a2 = v240;
  v120 = v274;
  if (!v99)
    goto LABEL_25;
  v159 = v118[v157[22]];
  sub_1CCA0BF30((uint64_t)v118, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v160 = v157;
  v161 = v119[v157[22]];
  sub_1CCA0BF30((uint64_t)v119, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v121 = v253;
  sub_1CCA0BEEC(v95, (uint64_t)v253, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v122 = v254;
  sub_1CCA0BEEC(v240, (uint64_t)v254, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v99 = v159 == v161;
  v120 = v274;
  a2 = v240;
  v123 = v255;
  if (!v99)
    goto LABEL_26;
  v162 = v121[v160[25]];
  sub_1CCA0BF30((uint64_t)v121, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v163 = v122[v160[25]];
  sub_1CCA0BF30((uint64_t)v122, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v124 = v256;
  sub_1CCA0BEEC(v95, (uint64_t)v256, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BEEC(v240, (uint64_t)v123, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v99 = v162 == v163;
  v120 = v274;
  a2 = v240;
  if (!v99)
    goto LABEL_27;
  v164 = (void *)*((_QWORD *)v124 + 49);
  v165 = (void *)*((_QWORD *)v123 + 49);
  v127 = (uint64_t)v117;
  if (!v164)
  {
    v172 = v165;
    sub_1CCA0BF30((uint64_t)v123, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v124, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if (!v165)
    {
      v126 = v268;
      v120 = v274;
      sub_1CCA0BEEC(v95, (uint64_t)v274, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v129 = v272;
      sub_1CCA0BEEC(a2, (uint64_t)v272, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      goto LABEL_79;
    }
    v173 = 0;
LABEL_77:
    v126 = v268;

    v128 = v273;
    v120 = v274;
    goto LABEL_28;
  }
  v166 = *((_QWORD *)v123 + 48);
  v167 = v123[50];
  v168 = *((_QWORD *)v124 + 50);
  v282 = *((_QWORD *)v124 + 48);
  v283 = v164;
  v284 = v168;
  if (!v165)
  {
    v173 = v164;
    sub_1CCA0BF30((uint64_t)v123, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v124, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);

    v172 = 0;
    goto LABEL_77;
  }
  v169 = (uint64_t)v124;
  v170 = (uint64_t)v123;
  v126 = v268;
  LOWORD(v281[0]) = v166 & 0x101;
  BYTE2(v281[0]) = BYTE2(v166) & 1;
  BYTE3(v281[0]) = BYTE3(v166);
  *(_QWORD *)&v281[1] = v165;
  v281[2] = v167;
  v171 = v164;
  LODWORD(v276) = _s8FMIPCore12FMIPLocationV2eeoiySbAC_ACtFZ_0((double *)&v282, v281);
  sub_1CCA0BF30(v170, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BF30(v169, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);

  v120 = v274;
  sub_1CCA0BEEC(v95, (uint64_t)v274, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v129 = v272;
  sub_1CCA0BEEC(a2, (uint64_t)v272, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v128 = v273;
  if ((v276 & 1) == 0)
    goto LABEL_29;
LABEL_79:
  v174 = v238;
  v175 = v239[13];
  v176 = (uint64_t)&v129[v175];
  v177 = (uint64_t)&v238[*(int *)(v235 + 48)];
  sub_1CC9EAB74((uint64_t)&v120[v175], (uint64_t)v238, &qword_1ED8A8CD0);
  v276 = v177;
  sub_1CC9EAB74(v176, v177, &qword_1ED8A8CD0);
  v178 = v237;
  v179 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v236 + 48);
  if (v179((uint64_t)v174, 1, v237) == 1)
  {
    sub_1CCA0BF30((uint64_t)v129, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v120, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if (v179(v276, 1, v178) == 1)
    {
      sub_1CC9C3E84((uint64_t)v174, &qword_1ED8A8CD0);
      v130 = v271;
      sub_1CCA0BEEC(v95, (uint64_t)v271, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCA0BEEC(a2, v127, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v128 = v273;
      v131 = v126;
      v132 = v267;
      goto LABEL_86;
    }
LABEL_84:
    sub_1CC9C3E84((uint64_t)v174, &qword_1EF9E3EF0);
    v128 = v273;
    goto LABEL_30;
  }
  v180 = v234;
  sub_1CC9EAB74((uint64_t)v174, (uint64_t)v234, &qword_1ED8A8CD0);
  v181 = v276;
  if (v179(v276, 1, v178) == 1)
  {
    sub_1CCA0BF30((uint64_t)v272, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v274, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v180, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemLostModeMetadata);
    goto LABEL_84;
  }
  v182 = v233;
  sub_1CC9FED60(v181, (uint64_t)v233, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemLostModeMetadata);
  LODWORD(v276) = _s8FMIPCore24FMIPItemLostModeMetadataV2eeoiySbAC_ACtFZ_0(v180, v182);
  sub_1CCA0BF30((uint64_t)v182, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemLostModeMetadata);
  sub_1CCA0BF30((uint64_t)v272, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BF30((uint64_t)v274, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BF30((uint64_t)v180, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemLostModeMetadata);
  sub_1CC9C3E84((uint64_t)v174, &qword_1ED8A8CD0);
  v130 = v271;
  sub_1CCA0BEEC(v95, (uint64_t)v271, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BEEC(a2, v127, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v128 = v273;
  v131 = v126;
  v132 = v267;
  if ((v276 & 1) == 0)
    goto LABEL_31;
LABEL_86:
  v183 = v239[14];
  v184 = *(_QWORD *)&v130[v183];
  v185 = *(_QWORD *)&v130[v183 + 8];
  v186 = (_QWORD *)(v127 + v183);
  if (v184 == *v186 && v185 == v186[1])
  {
    sub_1CCA0BF30((uint64_t)v271, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30(v127, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v133 = v258;
    sub_1CCA0BEEC(v95, (uint64_t)v258, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v134 = v270;
    sub_1CCA0BEEC(a2, (uint64_t)v270, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  }
  else
  {
    v187 = sub_1CCB642A0();
    sub_1CCA0BF30((uint64_t)v271, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30(v127, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v133 = v258;
    sub_1CCA0BEEC(v95, (uint64_t)v258, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v134 = v270;
    sub_1CCA0BEEC(a2, (uint64_t)v270, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if ((v187 & 1) == 0)
      goto LABEL_32;
  }
  v188 = v239[15];
  v189 = *(_QWORD *)&v133[v188];
  v190 = *(_QWORD *)&v133[v188 + 8];
  v191 = &v134[v188];
  if (v189 == *v191 && v190 == v191[1])
  {
    sub_1CCA0BF30((uint64_t)v133, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v270, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v135 = v266;
    sub_1CCA0BEEC(v95, (uint64_t)v266, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v128 = v273;
    sub_1CCA0BEEC(a2, (uint64_t)v273, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  }
  else
  {
    v192 = sub_1CCB642A0();
    sub_1CCA0BF30((uint64_t)v133, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v270, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v135 = v266;
    sub_1CCA0BEEC(v95, (uint64_t)v266, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v128 = v273;
    sub_1CCA0BEEC(a2, (uint64_t)v273, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if ((v192 & 1) == 0)
      goto LABEL_33;
  }
  v193 = v239[16];
  v194 = &v135[v193];
  v195 = *(_QWORD *)&v135[v193];
  v196 = *(void **)&v135[v193 + 8];
  v197 = *(_QWORD *)&v135[v193 + 16];
  v198 = *(_QWORD *)&v135[v193 + 24];
  v199 = v194[32];
  v200 = &v128[v193];
  v202 = *(_QWORD *)v200;
  v201 = *((_QWORD *)v200 + 1);
  v203 = *((double *)v200 + 2);
  v204 = *((double *)v200 + 3);
  LODWORD(v276) = v200[32];
  if (!v196)
  {
    sub_1CCAF007C(v202, v201);
    sub_1CCA0BF30((uint64_t)v273, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v266, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if (!v201)
    {
      sub_1CCAF0240(v195, 0);
      v95 = v269;
      v132 = v267;
      sub_1CCA0BEEC(v269, (uint64_t)v267, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      a2 = v240;
      v137 = v241;
      sub_1CCA0BEEC(v240, (uint64_t)v241, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v136 = v265;
      v131 = v268;
      goto LABEL_100;
    }
LABEL_109:
    sub_1CCAF0240(v195, (uint64_t)v196);
    sub_1CCAF0240(v202, v201);
    a2 = v240;
    v131 = v268;
    v95 = v269;
    v136 = v265;
    v132 = v267;
    goto LABEL_34;
  }
  v282 = v195;
  v283 = v196;
  v284 = v197;
  v285 = v198;
  v286 = v199;
  if (!v201)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    sub_1CCA0BF30((uint64_t)v273, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v266, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_109;
  }
  *(_QWORD *)&v281[0] = v202;
  *(_QWORD *)&v281[1] = v201;
  v281[2] = v203;
  v281[3] = v204;
  LOBYTE(v281[4]) = v276;
  sub_1CCAF007C(v195, (uint64_t)v196);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s8FMIPCore12FMIPPartInfoV2eeoiySbAC_ACtFZ_0((uint64_t)&v282, v281);
  v206 = v205;
  sub_1CCA0BF30((uint64_t)v273, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BF30((uint64_t)v266, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCAF0240(v195, (uint64_t)v196);
  v95 = v269;
  v132 = v267;
  sub_1CCA0BEEC(v269, (uint64_t)v267, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  a2 = v240;
  v137 = v241;
  sub_1CCA0BEEC(v240, (uint64_t)v241, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v136 = v265;
  v131 = v268;
  if ((v206 & 1) == 0)
    goto LABEL_35;
LABEL_100:
  v207 = _s8FMIPCore15FMIPProductTypeO2eeoiySbAC_ACtFZ_0((uint64_t)&v132[v239[24]], (uint64_t)&v137[v239[24]]);
  sub_1CCA0BF30((uint64_t)v137, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BF30((uint64_t)v132, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BEEC(v95, (uint64_t)v136, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BEEC(a2, (uint64_t)v131, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  if (!v207)
    goto LABEL_36;
  v208 = v239[17];
  v209 = &v136[v208];
  v210 = *(_QWORD *)&v136[v208];
  v211 = &v131[v208];
  if (v210 != *v211)
    goto LABEL_36;
  v212 = v209[1];
  v213 = v209[2];
  v214 = v211[1];
  v215 = v211[2];
  if ((v209[3] != v211[3] || v209[4] != v211[4]) && (sub_1CCB642A0() & 1) == 0)
    goto LABEL_36;
  if (v212 == v214 && v213 == v215)
  {
    sub_1CCA0BF30((uint64_t)v268, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v265, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v138 = v263;
    sub_1CCA0BEEC(v269, (uint64_t)v263, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v139 = v264;
    sub_1CCA0BEEC(v240, (uint64_t)v264, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  }
  else
  {
    v216 = sub_1CCB642A0();
    sub_1CCA0BF30((uint64_t)v268, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v265, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v95 = v269;
    v138 = v263;
    sub_1CCA0BEEC(v269, (uint64_t)v263, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    a2 = v240;
    v139 = v264;
    sub_1CCA0BEEC(v240, (uint64_t)v264, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if ((v216 & 1) == 0)
      goto LABEL_37;
  }
  v217 = v239[18];
  v218 = *(_QWORD *)&v138[v217];
  v219 = *(_QWORD *)&v138[v217 + 8];
  v220 = &v139[v217];
  if (v218 == *v220 && v219 == v220[1])
  {
    sub_1CCA0BF30((uint64_t)v263, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v264, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v95 = v269;
    v140 = v243;
    sub_1CCA0BEEC(v269, (uint64_t)v243, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v141 = v242;
    sub_1CCA0BEEC(v240, (uint64_t)v242, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v143 = v261;
    v142 = v262;
  }
  else
  {
    v221 = sub_1CCB642A0();
    sub_1CCA0BF30((uint64_t)v263, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BF30((uint64_t)v264, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v95 = v269;
    v140 = v243;
    sub_1CCA0BEEC(v269, (uint64_t)v243, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    a2 = v240;
    v141 = v242;
    sub_1CCA0BEEC(v240, (uint64_t)v242, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v143 = v261;
    v142 = v262;
    if ((v221 & 1) == 0)
      goto LABEL_38;
  }
  v222 = v239[19];
  v223 = *(_QWORD *)&v140[v222];
  v224 = (uint64_t)v141;
  v225 = *(_QWORD *)&v141[v222];
  sub_1CCA0BF30(v224, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BF30((uint64_t)v140, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BEEC(v95, (uint64_t)v143, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BEEC(v240, (uint64_t)v142, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v99 = v223 == v225;
  a2 = v240;
  if (v99)
  {
    v226 = v239[20];
    v227 = *(_QWORD *)&v143[v226];
    v228 = *(_QWORD *)&v143[v226 + 8];
    v229 = &v142[v226];
    if (v227 == *v229 && v228 == v229[1])
    {
      sub_1CCA0BF30((uint64_t)v261, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCA0BF30((uint64_t)v262, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v144 = v259;
      sub_1CCA0BEEC(v269, (uint64_t)v259, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v145 = (uint64_t)v260;
      sub_1CCA0BEEC(v240, (uint64_t)v260, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    }
    else
    {
      v230 = sub_1CCB642A0();
      sub_1CCA0BF30((uint64_t)v261, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCA0BF30((uint64_t)v262, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v144 = v259;
      sub_1CCA0BEEC(v269, (uint64_t)v259, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v145 = (uint64_t)v260;
      sub_1CCA0BEEC(v240, (uint64_t)v260, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v146 = 0;
      if ((v230 & 1) == 0)
        goto LABEL_40;
    }
    v146 = sub_1CCA1812C(*(_QWORD *)&v144[v239[23]], *(_QWORD *)(v145 + v239[23]));
    goto LABEL_40;
  }
LABEL_39:
  sub_1CCA0BF30((uint64_t)v143, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BF30((uint64_t)v142, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v144 = v259;
  sub_1CCA0BEEC(v95, (uint64_t)v259, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v145 = (uint64_t)v260;
  sub_1CCA0BEEC(a2, (uint64_t)v260, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v146 = 0;
LABEL_40:
  sub_1CCA0BF30((uint64_t)v144, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  sub_1CCA0BF30(v145, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  return v146 & 1;
}

uint64_t sub_1CCAF007C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1CCAF00AC@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1CCAE7180(a1, a2, *(_QWORD **)(v3 + 16), a3);
}

void sub_1CCAF00B4(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  sub_1CCAE7220(a1, a2, a3, *(_QWORD **)(v4 + 16), a4);
}

BOOL sub_1CCAF00BC(id *a1)
{
  uint64_t v1;
  _QWORD *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD **)(v1 + 16);
  v3 = objc_msgSend(*a1, sel_partIdentifier);
  v4 = v2[3];
  v5 = v2[4];
  sub_1CCA04DDC(v2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 64))(v4, v5) == v3;
}

unint64_t sub_1CCAF0130()
{
  unint64_t result;

  result = qword_1EF9E3DB0;
  if (!qword_1EF9E3DB0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6F034, &type metadata for FMIPPartInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3DB0);
  }
  return result;
}

unint64_t sub_1CCAF0174()
{
  unint64_t result;

  result = qword_1EF9E3DB8;
  if (!qword_1EF9E3DB8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPPartType, &type metadata for FMIPPartType);
    atomic_store(result, (unint64_t *)&qword_1EF9E3DB8);
  }
  return result;
}

unint64_t sub_1CCAF01B8()
{
  unint64_t result;

  result = qword_1EF9E3DC8;
  if (!qword_1EF9E3DC8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPPartType, &type metadata for FMIPPartType);
    atomic_store(result, (unint64_t *)&qword_1EF9E3DC8);
  }
  return result;
}

unint64_t sub_1CCAF01FC()
{
  unint64_t result;

  result = qword_1EF9E3DD8;
  if (!qword_1EF9E3DD8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6EFE4, &type metadata for FMIPItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3DD8);
  }
  return result;
}

uint64_t sub_1CCAF0240(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1CCAF0270()
{
  unint64_t result;

  result = qword_1EF9E3DE0;
  if (!qword_1EF9E3DE0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemBatteryStatus, &type metadata for FMIPItemBatteryStatus);
    atomic_store(result, (unint64_t *)&qword_1EF9E3DE0);
  }
  return result;
}

unint64_t sub_1CCAF02B4()
{
  unint64_t result;

  result = qword_1EF9E3DF0;
  if (!qword_1EF9E3DF0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPPartInfo, &type metadata for FMIPPartInfo);
    atomic_store(result, (unint64_t *)&qword_1EF9E3DF0);
  }
  return result;
}

unint64_t sub_1CCAF02F8()
{
  unint64_t result;

  result = qword_1EF9E3DF8;
  if (!qword_1EF9E3DF8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemRole, &type metadata for FMIPItemRole);
    atomic_store(result, (unint64_t *)&qword_1EF9E3DF8);
  }
  return result;
}

unint64_t sub_1CCAF033C()
{
  unint64_t result;

  result = qword_1EF9E3E10;
  if (!qword_1EF9E3E10)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPPartInfo, &type metadata for FMIPPartInfo);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E10);
  }
  return result;
}

unint64_t sub_1CCAF0380()
{
  unint64_t result;

  result = qword_1EF9E3E18;
  if (!qword_1EF9E3E18)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemRole, &type metadata for FMIPItemRole);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E18);
  }
  return result;
}

unint64_t sub_1CCAF03C8()
{
  unint64_t result;

  result = qword_1EF9E3E20;
  if (!qword_1EF9E3E20)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMItemCapabilities, &type metadata for FMItemCapabilities);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E20);
  }
  return result;
}

unint64_t sub_1CCAF0410()
{
  unint64_t result;

  result = qword_1EF9E3E28;
  if (!qword_1EF9E3E28)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMItemCapabilities, &type metadata for FMItemCapabilities);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E28);
  }
  return result;
}

unint64_t sub_1CCAF0458()
{
  unint64_t result;

  result = qword_1EF9E3E30;
  if (!qword_1EF9E3E30)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMItemCapabilities, &type metadata for FMItemCapabilities);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E30);
  }
  return result;
}

unint64_t sub_1CCAF04A0()
{
  unint64_t result;

  result = qword_1EF9E3E38;
  if (!qword_1EF9E3E38)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMItemCapabilities, &type metadata for FMItemCapabilities);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E38);
  }
  return result;
}

unint64_t sub_1CCAF04E8()
{
  unint64_t result;

  result = qword_1EF9E3E40;
  if (!qword_1EF9E3E40)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemState, &type metadata for FMIPItemState);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E40);
  }
  return result;
}

unint64_t sub_1CCAF0530()
{
  unint64_t result;

  result = qword_1EF9E3E48;
  if (!qword_1EF9E3E48)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemState, &type metadata for FMIPItemState);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E48);
  }
  return result;
}

unint64_t sub_1CCAF0578()
{
  unint64_t result;

  result = qword_1EF9E3E50;
  if (!qword_1EF9E3E50)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemState, &type metadata for FMIPItemState);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E50);
  }
  return result;
}

unint64_t sub_1CCAF05C0()
{
  unint64_t result;

  result = qword_1EF9E3E58;
  if (!qword_1EF9E3E58)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemState, &type metadata for FMIPItemState);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E58);
  }
  return result;
}

unint64_t sub_1CCAF0608()
{
  unint64_t result;

  result = qword_1EF9E3E60;
  if (!qword_1EF9E3E60)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemBatteryStatus, &type metadata for FMIPItemBatteryStatus);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E60);
  }
  return result;
}

unint64_t sub_1CCAF0650()
{
  unint64_t result;

  result = qword_1EF9E3E68;
  if (!qword_1EF9E3E68)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPPartType, &type metadata for FMIPPartType);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E68);
  }
  return result;
}

uint64_t sub_1CCAF0694()
{
  return sub_1CC9CAA38(&qword_1EF9E3E70, (uint64_t (*)(uint64_t))type metadata accessor for FMIPItem, (uint64_t)&protocol conformance descriptor for FMIPItem);
}

ValueMetadata *type metadata accessor for FMItemCapabilities()
{
  return &type metadata for FMItemCapabilities;
}

ValueMetadata *type metadata accessor for FMIPItemState()
{
  return &type metadata for FMIPItemState;
}

uint64_t storeEnumTagSinglePayload for FMIPItemBatteryStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1CCAF072C + 4 * byte_1CCB6E430[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1CCAF0760 + 4 * byte_1CCB6E42B[v4]))();
}

uint64_t sub_1CCAF0760(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF0768(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAF0770);
  return result;
}

uint64_t sub_1CCAF077C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAF0784);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1CCAF0788(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF0790(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPItemBatteryStatus()
{
  return &type metadata for FMIPItemBatteryStatus;
}

uint64_t destroy for FMIPPartInfo()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FMIPPartInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FMIPPartInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for FMIPPartInfo(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FMIPPartInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPPartInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPPartInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPPartInfo()
{
  return &type metadata for FMIPPartInfo;
}

uint64_t storeEnumTagSinglePayload for FMIPPartType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CCAF09D4 + 4 * byte_1CCB6E43A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CCAF0A08 + 4 * byte_1CCB6E435[v4]))();
}

uint64_t sub_1CCAF0A08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF0A10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAF0A18);
  return result;
}

uint64_t sub_1CCAF0A24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAF0A2CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CCAF0A30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF0A38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPPartType()
{
  return &type metadata for FMIPPartType;
}

uint64_t initializeBufferWithCopyOfBuffer for FMIPItem(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int (*v36)(_QWORD *, uint64_t, uint64_t);
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void (*v50)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  int EnumCaseMultiPayload;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  __int128 v95;
  __int128 v96;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  _QWORD *__dst;
  _OWORD *__dsta;
  int *v104;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) == 0)
  {
    v8 = a2[22];
    swift_retain();
    v104 = a3;
    if (v8)
    {
      v9 = a2[2];
      *(_QWORD *)(a1 + 8) = a2[1];
      *(_QWORD *)(a1 + 16) = v9;
      v10 = a2[4];
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_QWORD *)(a1 + 32) = v10;
      v11 = a2[6];
      *(_QWORD *)(a1 + 40) = a2[5];
      *(_QWORD *)(a1 + 48) = v11;
      v12 = a2[8];
      *(_QWORD *)(a1 + 56) = a2[7];
      *(_QWORD *)(a1 + 64) = v12;
      v13 = a2[10];
      *(_QWORD *)(a1 + 72) = a2[9];
      *(_QWORD *)(a1 + 80) = v13;
      v14 = a2[12];
      *(_QWORD *)(a1 + 88) = a2[11];
      *(_QWORD *)(a1 + 96) = v14;
      v15 = a2[14];
      *(_QWORD *)(a1 + 104) = a2[13];
      *(_QWORD *)(a1 + 112) = v15;
      v16 = a2[16];
      *(_QWORD *)(a1 + 120) = a2[15];
      *(_QWORD *)(a1 + 128) = v16;
      v17 = a2[18];
      *(_QWORD *)(a1 + 136) = a2[17];
      *(_QWORD *)(a1 + 144) = v17;
      v18 = a2[20];
      *(_QWORD *)(a1 + 152) = a2[19];
      *(_QWORD *)(a1 + 160) = v18;
      *(_QWORD *)(a1 + 168) = a2[21];
      *(_QWORD *)(a1 + 176) = v8;
      v19 = a2[24];
      *(_QWORD *)(a1 + 184) = a2[23];
      *(_QWORD *)(a1 + 192) = v19;
      v20 = a2[26];
      *(_QWORD *)(a1 + 200) = a2[25];
      *(_QWORD *)(a1 + 208) = v20;
      v21 = a2[28];
      *(_QWORD *)(a1 + 216) = a2[27];
      *(_QWORD *)(a1 + 224) = v21;
      v22 = a2[30];
      *(_QWORD *)(a1 + 232) = a2[29];
      *(_QWORD *)(a1 + 240) = v22;
      v23 = a2[32];
      *(_QWORD *)(a1 + 248) = a2[31];
      *(_QWORD *)(a1 + 256) = v23;
      v24 = a2[34];
      *(_QWORD *)(a1 + 264) = a2[33];
      *(_QWORD *)(a1 + 272) = v24;
      v25 = a2[36];
      *(_QWORD *)(a1 + 280) = a2[35];
      *(_QWORD *)(a1 + 288) = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      memcpy((void *)(a1 + 8), a2 + 1, 0x120uLL);
    }
    *(_BYTE *)(a1 + 296) = *((_BYTE *)a2 + 296);
    *(_QWORD *)(a1 + 304) = a2[38];
    *(_DWORD *)(a1 + 312) = *((_DWORD *)a2 + 78);
    v27 = (void *)a2[40];
    v26 = a2[41];
    *(_QWORD *)(a1 + 320) = v27;
    *(_QWORD *)(a1 + 328) = v26;
    v28 = a2[43];
    *(_QWORD *)(a1 + 336) = a2[42];
    *(_QWORD *)(a1 + 344) = v28;
    v29 = a2[45];
    *(_QWORD *)(a1 + 352) = a2[44];
    *(_QWORD *)(a1 + 360) = v29;
    v30 = a2[47];
    *(_QWORD *)(a1 + 368) = a2[46];
    *(_QWORD *)(a1 + 376) = v30;
    *(_DWORD *)(a1 + 384) = *((_DWORD *)a2 + 96);
    v32 = (void *)a2[49];
    v31 = a2[50];
    *(_QWORD *)(a1 + 392) = v32;
    *(_QWORD *)(a1 + 400) = v31;
    v33 = v104[13];
    __dst = (_QWORD *)(a1 + v33);
    v34 = (uint64_t *)((char *)a2 + v33);
    v35 = type metadata accessor for FMIPItemLostModeMetadata();
    v101 = *(_QWORD *)(v35 - 8);
    v36 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v101 + 48);
    v37 = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38 = v32;
    if (v36(v34, 1, v35))
    {
      v39 = sub_1CCA14E90(&qword_1ED8A8CD0);
      memcpy(__dst, v34, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      v40 = v34[1];
      *__dst = *v34;
      __dst[1] = v40;
      v41 = v34[3];
      __dst[2] = v34[2];
      __dst[3] = v41;
      v42 = *(int *)(v35 + 24);
      v43 = (char *)__dst + v42;
      v100 = (char *)v34 + v42;
      v44 = sub_1CCB635B0();
      v45 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v45(v43, v100, v44);
      v46 = *(int *)(v35 + 28);
      v47 = (_QWORD *)((char *)__dst + v46);
      v48 = (_QWORD *)((char *)v34 + v46);
      v49 = v48[1];
      *v47 = *v48;
      v47[1] = v49;
      v50 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v101 + 56);
      swift_bridgeObjectRetain();
      v50(__dst, 0, 1, v35);
    }
    v51 = v104[14];
    v52 = v104[15];
    v53 = (_QWORD *)(a1 + v51);
    v54 = (uint64_t *)((char *)a2 + v51);
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    v56 = (_QWORD *)(a1 + v52);
    v57 = (uint64_t *)((char *)a2 + v52);
    v58 = v57[1];
    *v56 = *v57;
    v56[1] = v58;
    v59 = v104[16];
    v60 = a1 + v59;
    v61 = (uint64_t)a2 + v59;
    v62 = *(uint64_t *)((char *)a2 + v59 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v62)
    {
      *(_QWORD *)v60 = *(_QWORD *)v61;
      *(_QWORD *)(v60 + 8) = v62;
      v63 = *(_QWORD *)(v61 + 24);
      *(_QWORD *)(v60 + 16) = *(_QWORD *)(v61 + 16);
      *(_QWORD *)(v60 + 24) = v63;
      *(_BYTE *)(v60 + 32) = *(_BYTE *)(v61 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v64 = *(_OWORD *)(v61 + 16);
      *(_OWORD *)v60 = *(_OWORD *)v61;
      *(_OWORD *)(v60 + 16) = v64;
      *(_BYTE *)(v60 + 32) = *(_BYTE *)(v61 + 32);
    }
    v65 = v104[17];
    v66 = v104[18];
    v67 = a1 + v65;
    v68 = (uint64_t)a2 + v65;
    *(_OWORD *)v67 = *(_OWORD *)v68;
    v69 = *(_QWORD *)(v68 + 24);
    *(_QWORD *)(v67 + 16) = *(_QWORD *)(v68 + 16);
    *(_QWORD *)(v67 + 24) = v69;
    *(_QWORD *)(v67 + 32) = *(_QWORD *)(v68 + 32);
    v70 = (_QWORD *)(a1 + v66);
    v71 = (uint64_t *)((char *)a2 + v66);
    v72 = v71[1];
    *v70 = *v71;
    v70[1] = v72;
    v73 = v104[20];
    *(_QWORD *)(a1 + v104[19]) = *(uint64_t *)((char *)a2 + v104[19]);
    v74 = (_QWORD *)(a1 + v73);
    v75 = (uint64_t *)((char *)a2 + v73);
    v76 = v75[1];
    *v74 = *v75;
    v74[1] = v76;
    v77 = v104[22];
    *(_BYTE *)(a1 + v104[21]) = *((_BYTE *)a2 + v104[21]);
    *(_BYTE *)(a1 + v77) = *((_BYTE *)a2 + v77);
    v78 = v104[24];
    *(_QWORD *)(a1 + v104[23]) = *(uint64_t *)((char *)a2 + v104[23]);
    __dsta = (_OWORD *)(a1 + v78);
    v79 = (_OWORD *)((char *)a2 + v78);
    type metadata accessor for FMIPProductType();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v84 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
      v85 = *((_QWORD *)v84 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v85 + 48))(v79, 1, v84))
      {
        v86 = sub_1CCA14E90(&qword_1EF9DFB90);
        memcpy(__dsta, v79, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      }
      else
      {
        *__dsta = *v79;
        v89 = *((_QWORD *)v79 + 3);
        *((_QWORD *)__dsta + 2) = *((_QWORD *)v79 + 2);
        *((_QWORD *)__dsta + 3) = v89;
        v90 = *((_QWORD *)v79 + 5);
        *((_QWORD *)__dsta + 4) = *((_QWORD *)v79 + 4);
        *((_QWORD *)__dsta + 5) = v90;
        v91 = *((_QWORD *)v79 + 7);
        *((_QWORD *)__dsta + 6) = *((_QWORD *)v79 + 6);
        *((_QWORD *)__dsta + 7) = v91;
        *((_QWORD *)__dsta + 8) = *((_QWORD *)v79 + 8);
        *((_BYTE *)__dsta + 72) = *((_BYTE *)v79 + 72);
        *((_BYTE *)__dsta + 73) = *((_BYTE *)v79 + 73);
        v92 = v84[12];
        v98 = (char *)v79 + v92;
        v99 = (char *)__dsta + v92;
        v93 = sub_1CCB63490();
        v94 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v94(v99, v98, v93);
        v94((char *)__dsta + v84[13], (char *)v79 + v84[13], v93);
        v94((char *)__dsta + v84[14], (char *)v79 + v84[14], v93);
        v94((char *)__dsta + v84[15], (char *)v79 + v84[15], v93);
        v94((char *)__dsta + v84[16], (char *)v79 + v84[16], v93);
        v94((char *)__dsta + v84[17], (char *)v79 + v84[17], v93);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v85 + 56))(__dsta, 0, 1, v84);
      }
      goto LABEL_22;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v81 = __dsta;
      *__dsta = *v79;
      v83 = *((_QWORD *)v79 + 2);
      v82 = *((_QWORD *)v79 + 3);
    }
    else
    {
      v81 = __dsta;
      v82 = *((_QWORD *)v79 + 3);
      if (!v82)
      {
        v95 = v79[3];
        __dsta[2] = v79[2];
        __dsta[3] = v95;
        *((_QWORD *)__dsta + 8) = *((_QWORD *)v79 + 8);
        v96 = v79[1];
        *__dsta = *v79;
        __dsta[1] = v96;
        goto LABEL_22;
      }
      *__dsta = *v79;
      v83 = *((_QWORD *)v79 + 2);
    }
    v81[2] = v83;
    v81[3] = v82;
    v87 = *((_QWORD *)v79 + 5);
    v81[4] = *((_QWORD *)v79 + 4);
    v81[5] = v87;
    v88 = *((_QWORD *)v79 + 7);
    v81[6] = *((_QWORD *)v79 + 6);
    v81[7] = v88;
    v81[8] = *((_QWORD *)v79 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_22:
    swift_storeEnumTagMultiPayload();
    *(_BYTE *)(a1 + v104[25]) = *((_BYTE *)a2 + v104[25]);
    return a1;
  }
  a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return a1;
}

uint64_t destroy for FMIPItem(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  swift_release();
  if (*(_QWORD *)(a1 + 176))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = a1 + a2[13];
  v5 = type metadata accessor for FMIPItemLostModeMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v4 + *(int *)(v5 + 24);
    v7 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + a2[16] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a1 + a2[24];
  type metadata accessor for FMIPProductType();
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    v10 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
    result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(v8, 1, v10);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v8 + v10[12];
      v12 = sub_1CCB63490();
      v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
      v13(v11, v12);
      v13(v8 + v10[13], v12);
      v13(v8 + v10[14], v12);
      v13(v8 + v10[15], v12);
      v13(v8 + v10[16], v12);
      return ((uint64_t (*)(uint64_t, uint64_t))v13)(v8 + v10[17], v12);
    }
  }
  else if ((_DWORD)result == 1 || !(_DWORD)result && (result = *(_QWORD *)(v8 + 24)) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for FMIPItem(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int (*v34)(_QWORD *, uint64_t, uint64_t);
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  void (*v48)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  int EnumCaseMultiPayload;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  __int128 v93;
  __int128 v94;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  _QWORD *__dst;
  _OWORD *__dsta;
  int *v102;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 176);
  swift_retain();
  v102 = a3;
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v7;
    v8 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v8;
    v9 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v9;
    v10 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v10;
    v11 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v11;
    v12 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v12;
    v13 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v13;
    v14 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v14;
    v15 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v15;
    v16 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v16;
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v6;
    v17 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v17;
    v18 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v18;
    v19 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = v19;
    v20 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = v20;
    v21 = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = v21;
    v22 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = v22;
    v23 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x120uLL);
  }
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  v25 = *(void **)(a2 + 320);
  v24 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v25;
  *(_QWORD *)(a1 + 328) = v24;
  v26 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v26;
  v27 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v27;
  v28 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = v28;
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  v30 = *(void **)(a2 + 392);
  v29 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = v30;
  *(_QWORD *)(a1 + 400) = v29;
  v31 = v102[13];
  __dst = (_QWORD *)(a1 + v31);
  v32 = (_QWORD *)(a2 + v31);
  v33 = type metadata accessor for FMIPItemLostModeMetadata();
  v99 = *(_QWORD *)(v33 - 8);
  v34 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v99 + 48);
  v35 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36 = v30;
  if (v34(v32, 1, v33))
  {
    v37 = sub_1CCA14E90(&qword_1ED8A8CD0);
    memcpy(__dst, v32, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v38 = v32[1];
    *__dst = *v32;
    __dst[1] = v38;
    v39 = v32[3];
    __dst[2] = v32[2];
    __dst[3] = v39;
    v40 = *(int *)(v33 + 24);
    v41 = (char *)__dst + v40;
    v98 = (char *)v32 + v40;
    v42 = sub_1CCB635B0();
    v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v43(v41, v98, v42);
    v44 = *(int *)(v33 + 28);
    v45 = (_QWORD *)((char *)__dst + v44);
    v46 = (_QWORD *)((char *)v32 + v44);
    v47 = v46[1];
    *v45 = *v46;
    v45[1] = v47;
    v48 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v99 + 56);
    swift_bridgeObjectRetain();
    v48(__dst, 0, 1, v33);
  }
  v49 = v102[14];
  v50 = v102[15];
  v51 = (_QWORD *)(a1 + v49);
  v52 = (_QWORD *)(a2 + v49);
  v53 = v52[1];
  *v51 = *v52;
  v51[1] = v53;
  v54 = (_QWORD *)(a1 + v50);
  v55 = (_QWORD *)(a2 + v50);
  v56 = v55[1];
  *v54 = *v55;
  v54[1] = v56;
  v57 = v102[16];
  v58 = a1 + v57;
  v59 = a2 + v57;
  v60 = *(_QWORD *)(a2 + v57 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v60)
  {
    *(_QWORD *)v58 = *(_QWORD *)v59;
    *(_QWORD *)(v58 + 8) = v60;
    v61 = *(_QWORD *)(v59 + 24);
    *(_QWORD *)(v58 + 16) = *(_QWORD *)(v59 + 16);
    *(_QWORD *)(v58 + 24) = v61;
    *(_BYTE *)(v58 + 32) = *(_BYTE *)(v59 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v62 = *(_OWORD *)(v59 + 16);
    *(_OWORD *)v58 = *(_OWORD *)v59;
    *(_OWORD *)(v58 + 16) = v62;
    *(_BYTE *)(v58 + 32) = *(_BYTE *)(v59 + 32);
  }
  v63 = v102[17];
  v64 = v102[18];
  v65 = a1 + v63;
  v66 = a2 + v63;
  *(_OWORD *)v65 = *(_OWORD *)v66;
  v67 = *(_QWORD *)(v66 + 24);
  *(_QWORD *)(v65 + 16) = *(_QWORD *)(v66 + 16);
  *(_QWORD *)(v65 + 24) = v67;
  *(_QWORD *)(v65 + 32) = *(_QWORD *)(v66 + 32);
  v68 = (_QWORD *)(a1 + v64);
  v69 = (_QWORD *)(a2 + v64);
  v70 = v69[1];
  *v68 = *v69;
  v68[1] = v70;
  v71 = v102[20];
  *(_QWORD *)(a1 + v102[19]) = *(_QWORD *)(a2 + v102[19]);
  v72 = (_QWORD *)(a1 + v71);
  v73 = (_QWORD *)(a2 + v71);
  v74 = v73[1];
  *v72 = *v73;
  v72[1] = v74;
  v75 = v102[22];
  *(_BYTE *)(a1 + v102[21]) = *(_BYTE *)(a2 + v102[21]);
  *(_BYTE *)(a1 + v75) = *(_BYTE *)(a2 + v75);
  v76 = v102[24];
  *(_QWORD *)(a1 + v102[23]) = *(_QWORD *)(a2 + v102[23]);
  __dsta = (_OWORD *)(a1 + v76);
  v77 = (_OWORD *)(a2 + v76);
  type metadata accessor for FMIPProductType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v82 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
    v83 = *((_QWORD *)v82 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v83 + 48))(v77, 1, v82))
    {
      v84 = sub_1CCA14E90(&qword_1EF9DFB90);
      memcpy(__dsta, v77, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    }
    else
    {
      *__dsta = *v77;
      v87 = *((_QWORD *)v77 + 3);
      *((_QWORD *)__dsta + 2) = *((_QWORD *)v77 + 2);
      *((_QWORD *)__dsta + 3) = v87;
      v88 = *((_QWORD *)v77 + 5);
      *((_QWORD *)__dsta + 4) = *((_QWORD *)v77 + 4);
      *((_QWORD *)__dsta + 5) = v88;
      v89 = *((_QWORD *)v77 + 7);
      *((_QWORD *)__dsta + 6) = *((_QWORD *)v77 + 6);
      *((_QWORD *)__dsta + 7) = v89;
      *((_QWORD *)__dsta + 8) = *((_QWORD *)v77 + 8);
      *((_BYTE *)__dsta + 72) = *((_BYTE *)v77 + 72);
      *((_BYTE *)__dsta + 73) = *((_BYTE *)v77 + 73);
      v90 = v82[12];
      v96 = (char *)v77 + v90;
      v97 = (char *)__dsta + v90;
      v91 = sub_1CCB63490();
      v92 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v92(v97, v96, v91);
      v92((char *)__dsta + v82[13], (char *)v77 + v82[13], v91);
      v92((char *)__dsta + v82[14], (char *)v77 + v82[14], v91);
      v92((char *)__dsta + v82[15], (char *)v77 + v82[15], v91);
      v92((char *)__dsta + v82[16], (char *)v77 + v82[16], v91);
      v92((char *)__dsta + v82[17], (char *)v77 + v82[17], v91);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v83 + 56))(__dsta, 0, 1, v82);
    }
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v79 = __dsta;
      *__dsta = *v77;
      v81 = *((_QWORD *)v77 + 2);
      v80 = *((_QWORD *)v77 + 3);
    }
    else
    {
      v79 = __dsta;
      v80 = *((_QWORD *)v77 + 3);
      if (!v80)
      {
        v93 = v77[3];
        __dsta[2] = v77[2];
        __dsta[3] = v93;
        *((_QWORD *)__dsta + 8) = *((_QWORD *)v77 + 8);
        v94 = v77[1];
        *__dsta = *v77;
        __dsta[1] = v94;
        goto LABEL_20;
      }
      *__dsta = *v77;
      v81 = *((_QWORD *)v77 + 2);
    }
    v79[2] = v81;
    v79[3] = v80;
    v85 = *((_QWORD *)v77 + 5);
    v79[4] = *((_QWORD *)v77 + 4);
    v79[5] = v85;
    v86 = *((_QWORD *)v77 + 7);
    v79[6] = *((_QWORD *)v77 + 6);
    v79[7] = v86;
    v79[8] = *((_QWORD *)v77 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
LABEL_20:
  swift_storeEnumTagMultiPayload();
  *(_BYTE *)(a1 + v102[25]) = *(_BYTE *)(a2 + v102[25]);
  return a1;
}

uint64_t assignWithCopy for FMIPItem(uint64_t a1, uint64_t a2, int *a3)
{
  _BYTE *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void (*v29)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  int EnumCaseMultiPayload;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  int *v82;
  uint64_t v83;

  v6 = (_BYTE *)(a2 + 312);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v7 = *(_QWORD *)(a2 + 176);
  if (*(_QWORD *)(a1 + 176))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1CCA331A4(a1 + 8);
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
  memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x120uLL);
LABEL_8:
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *v6;
  *(_BYTE *)(a1 + 313) = v6[1];
  *(_BYTE *)(a1 + 314) = v6[2];
  *(_BYTE *)(a1 + 315) = *(_BYTE *)(a2 + 315);
  v8 = *(void **)(a2 + 320);
  v9 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v8;
  v10 = v8;

  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 384) = v6[72];
  *(_BYTE *)(a1 + 385) = v6[73];
  *(_BYTE *)(a1 + 386) = v6[74];
  *(_BYTE *)(a1 + 387) = *(_BYTE *)(a2 + 387);
  v11 = *(void **)(a2 + 392);
  v12 = *(void **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v11;
  v13 = v11;

  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  v14 = a3[13];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = type metadata accessor for FMIPItemLostModeMetadata();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *v15 = *v16;
      v15[1] = v16[1];
      v15[2] = v16[2];
      v15[3] = v16[3];
      v22 = *(int *)(v17 + 24);
      v80 = (char *)v16 + v22;
      v81 = (char *)v15 + v22;
      v82 = a3;
      v23 = sub_1CCB635B0();
      v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25 = v23;
      a3 = v82;
      v24(v81, v80, v25);
      v26 = *(int *)(v17 + 28);
      v27 = (_QWORD *)((char *)v15 + v26);
      v28 = (_QWORD *)((char *)v16 + v26);
      *v27 = *v28;
      v27[1] = v28[1];
      v29 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56);
      swift_bridgeObjectRetain();
      v29(v15, 0, 1, v17);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v21)
  {
    sub_1CCA0BF30((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemLostModeMetadata);
LABEL_13:
    v30 = sub_1CCA14E90(&qword_1ED8A8CD0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_14;
  }
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15[2] = v16[2];
  v15[3] = v16[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = *(int *)(v17 + 24);
  v45 = (char *)v15 + v44;
  v46 = (char *)v16 + v44;
  v47 = sub_1CCB635B0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 24))(v45, v46, v47);
  v48 = *(int *)(v17 + 28);
  v49 = (_QWORD *)((char *)v15 + v48);
  v50 = (_QWORD *)((char *)v16 + v48);
  *v49 = *v50;
  v49[1] = v50[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_14:
  v31 = a3[14];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  *v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = a3[15];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37 = a3[16];
  v38 = a1 + v37;
  v39 = (__int128 *)(a2 + v37);
  v40 = *(_QWORD *)(a1 + v37 + 8);
  v41 = *(_QWORD *)(a2 + v37 + 8);
  if (v40)
  {
    if (v41)
    {
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *(_QWORD *)(v38 + 8) = *((_QWORD *)v39 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v38 + 16) = *((_QWORD *)v39 + 2);
      *(_QWORD *)(v38 + 24) = *((_QWORD *)v39 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v38 + 32) = *((_BYTE *)v39 + 32);
    }
    else
    {
      sub_1CCAF26CC(v38);
      v42 = *((_BYTE *)v39 + 32);
      v43 = v39[1];
      *(_OWORD *)v38 = *v39;
      *(_OWORD *)(v38 + 16) = v43;
      *(_BYTE *)(v38 + 32) = v42;
    }
  }
  else if (v41)
  {
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *(_QWORD *)(v38 + 8) = *((_QWORD *)v39 + 1);
    *(_QWORD *)(v38 + 16) = *((_QWORD *)v39 + 2);
    *(_QWORD *)(v38 + 24) = *((_QWORD *)v39 + 3);
    *(_BYTE *)(v38 + 32) = *((_BYTE *)v39 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v51 = *v39;
    v52 = v39[1];
    *(_BYTE *)(v38 + 32) = *((_BYTE *)v39 + 32);
    *(_OWORD *)v38 = v51;
    *(_OWORD *)(v38 + 16) = v52;
  }
  v53 = a3[17];
  v54 = (_QWORD *)(a1 + v53);
  v55 = a2 + v53;
  *v54 = *(_QWORD *)(a2 + v53);
  v54[1] = *(_QWORD *)(a2 + v53 + 8);
  v54[2] = *(_QWORD *)(a2 + v53 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v54[3] = *(_QWORD *)(v55 + 24);
  v54[4] = *(_QWORD *)(v55 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56 = a3[18];
  v57 = (_QWORD *)(a1 + v56);
  v58 = (_QWORD *)(a2 + v56);
  *v57 = *v58;
  v57[1] = v58[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  v59 = a3[20];
  v60 = (_QWORD *)(a1 + v59);
  v61 = (_QWORD *)(a2 + v59);
  *v60 = *v61;
  v60[1] = v61[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  *(_BYTE *)(a1 + a3[22]) = *(_BYTE *)(a2 + a3[22]);
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v62 = a3[24];
    v63 = (_QWORD *)(a1 + v62);
    v64 = (_QWORD *)(a2 + v62);
    sub_1CCA0BF30(a1 + v62, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
    type metadata accessor for FMIPProductType();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v66 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
      v67 = *((_QWORD *)v66 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v67 + 48))(v64, 1, v66))
      {
        v68 = sub_1CCA14E90(&qword_1EF9DFB90);
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
      }
      else
      {
        *v63 = *v64;
        v63[1] = v64[1];
        v63[2] = v64[2];
        v63[3] = v64[3];
        v63[4] = v64[4];
        v63[5] = v64[5];
        v63[6] = v64[6];
        v63[7] = v64[7];
        v63[8] = v64[8];
        *((_BYTE *)v63 + 72) = *((_BYTE *)v64 + 72);
        *((_BYTE *)v63 + 73) = *((_BYTE *)v64 + 73);
        v72 = v66[12];
        v78 = (char *)v64 + v72;
        v79 = (char *)v63 + v72;
        v83 = v67;
        v73 = a3;
        v74 = sub_1CCB63490();
        v75 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v75(v79, v78, v74);
        v75((char *)v63 + v66[13], (char *)v64 + v66[13], v74);
        v75((char *)v63 + v66[14], (char *)v64 + v66[14], v74);
        v75((char *)v63 + v66[15], (char *)v64 + v66[15], v74);
        v75((char *)v63 + v66[16], (char *)v64 + v66[16], v74);
        v76 = v74;
        a3 = v73;
        v75((char *)v63 + v66[17], (char *)v64 + v66[17], v76);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v83 + 56))(v63, 0, 1, v66);
      }
    }
    else if (EnumCaseMultiPayload == 1 || v64[3])
    {
      *v63 = *v64;
      v63[1] = v64[1];
      v63[2] = v64[2];
      v63[3] = v64[3];
      v63[4] = v64[4];
      v63[5] = v64[5];
      v63[6] = v64[6];
      v63[7] = v64[7];
      v63[8] = v64[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)v63 = *(_OWORD *)v64;
      v69 = *((_OWORD *)v64 + 1);
      v70 = *((_OWORD *)v64 + 2);
      v71 = *((_OWORD *)v64 + 3);
      v63[8] = v64[8];
      *((_OWORD *)v63 + 2) = v70;
      *((_OWORD *)v63 + 3) = v71;
      *((_OWORD *)v63 + 1) = v69;
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_BYTE *)(a1 + a3[25]) = *(_BYTE *)(a2 + a3[25]);
  return a1;
}

uint64_t sub_1CCAF26CC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for FMIPItem(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x120uLL);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  v6 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v6;
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  v7 = *(_OWORD *)(a2 + 384);
  v8 = a3[13];
  v9 = (_OWORD *)(a1 + v8);
  v10 = (_OWORD *)(a2 + v8);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v7;
  v11 = type metadata accessor for FMIPItemLostModeMetadata();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_1CCA14E90(&qword_1ED8A8CD0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v10[1];
    *v9 = *v10;
    v9[1] = v14;
    v15 = *(int *)(v11 + 24);
    v16 = (char *)v9 + v15;
    v17 = (char *)v10 + v15;
    v18 = sub_1CCB635B0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    *(_OWORD *)((char *)v9 + *(int *)(v11 + 28)) = *(_OWORD *)((char *)v10 + *(int *)(v11 + 28));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v19 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  v20 = a3[16];
  v21 = a3[17];
  v22 = a1 + v20;
  v23 = a2 + v20;
  v24 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v24;
  *(_BYTE *)(v22 + 32) = *(_BYTE *)(v23 + 32);
  v25 = a1 + v21;
  v26 = a2 + v21;
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(v26 + 32);
  v27 = *(_OWORD *)(v26 + 16);
  *(_OWORD *)v25 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = v27;
  v28 = a3[19];
  *(_OWORD *)(a1 + a3[18]) = *(_OWORD *)(a2 + a3[18]);
  *(_QWORD *)(a1 + v28) = *(_QWORD *)(a2 + v28);
  v29 = a3[21];
  *(_OWORD *)(a1 + a3[20]) = *(_OWORD *)(a2 + a3[20]);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v30 = a3[23];
  *(_BYTE *)(a1 + a3[22]) = *(_BYTE *)(a2 + a3[22]);
  *(_QWORD *)(a1 + v30) = *(_QWORD *)(a2 + v30);
  v31 = a3[24];
  v32 = (_OWORD *)(a1 + v31);
  v33 = (_OWORD *)(a2 + v31);
  v34 = type metadata accessor for FMIPProductType();
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v35 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
    v36 = *((_QWORD *)v35 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v36 + 48))(v33, 1, v35))
    {
      v37 = sub_1CCA14E90(&qword_1EF9DFB90);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v38 = v33[1];
      *v32 = *v33;
      v32[1] = v38;
      v39 = v33[3];
      v32[2] = v33[2];
      v32[3] = v39;
      *((_QWORD *)v32 + 8) = *((_QWORD *)v33 + 8);
      *((_WORD *)v32 + 36) = *((_WORD *)v33 + 36);
      v40 = v35[12];
      v45 = (char *)v32 + v40;
      v41 = (char *)v33 + v40;
      v42 = sub_1CCB63490();
      v46 = v36;
      v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32);
      v43(v45, v41, v42);
      v43((char *)v32 + v35[13], (char *)v33 + v35[13], v42);
      v43((char *)v32 + v35[14], (char *)v33 + v35[14], v42);
      v43((char *)v32 + v35[15], (char *)v33 + v35[15], v42);
      v43((char *)v32 + v35[16], (char *)v33 + v35[16], v42);
      v43((char *)v32 + v35[17], (char *)v33 + v35[17], v42);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v46 + 56))(v32, 0, 1, v35);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  *(_BYTE *)(a1 + a3[25]) = *(_BYTE *)(a2 + a3[25]);
  return a1;
}

uint64_t assignWithTake for FMIPItem(uint64_t a1, uint64_t a2, int *a3)
{
  _BYTE *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD *, uint64_t, uint64_t);
  int v36;
  int v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  _OWORD *v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  char *v100;
  uint64_t v101;

  v6 = (_BYTE *)(a2 + 312);
  v7 = (const void *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  if (*(_QWORD *)(a1 + 176))
  {
    if (*(_QWORD *)(a2 + 176))
    {
      v8 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = v8;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v9;
      swift_bridgeObjectRelease();
      v10 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v10;
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v11;
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v12;
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v13;
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v14;
      swift_bridgeObjectRelease();
      v15 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v15;
      swift_bridgeObjectRelease();
      v16 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v16;
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v17;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      swift_bridgeObjectRelease();
      v18 = *(_QWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = v18;
      swift_bridgeObjectRelease();
      v19 = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = v19;
      swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = v20;
      swift_bridgeObjectRelease();
      v21 = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v21;
      swift_bridgeObjectRelease();
      v22 = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = v22;
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v23;
      swift_bridgeObjectRelease();
      v24 = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = v24;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1CCA331A4(a1 + 8);
  }
  memcpy((void *)(a1 + 8), v7, 0x120uLL);
LABEL_6:
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *v6;
  *(_BYTE *)(a1 + 313) = v6[1];
  *(_BYTE *)(a1 + 314) = v6[2];
  *(_BYTE *)(a1 + 315) = *(_BYTE *)(a2 + 315);
  v25 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);

  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  v26 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v26;
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = v27;
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = v28;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 384) = v6[72];
  *(_BYTE *)(a1 + 385) = v6[73];
  *(_BYTE *)(a1 + 386) = v6[74];
  *(_BYTE *)(a1 + 387) = *(_BYTE *)(a2 + 387);
  v29 = *(void **)(a1 + 392);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);

  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  v30 = a3[13];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (_QWORD *)(a2 + v30);
  v33 = type metadata accessor for FMIPItemLostModeMetadata();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      v38 = *((_OWORD *)v32 + 1);
      *(_OWORD *)v31 = *(_OWORD *)v32;
      *((_OWORD *)v31 + 1) = v38;
      v39 = *(int *)(v33 + 24);
      v40 = (char *)v31 + v39;
      v41 = (char *)v32 + v39;
      v42 = sub_1CCB635B0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v40, v41, v42);
      *(_OWORD *)((char *)v31 + *(int *)(v33 + 28)) = *(_OWORD *)((char *)v32 + *(int *)(v33 + 28));
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v37)
  {
    sub_1CCA0BF30((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemLostModeMetadata);
LABEL_11:
    v43 = sub_1CCA14E90(&qword_1ED8A8CD0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_12;
  }
  v82 = v32[1];
  *v31 = *v32;
  v31[1] = v82;
  swift_bridgeObjectRelease();
  v83 = v32[3];
  v31[2] = v32[2];
  v31[3] = v83;
  swift_bridgeObjectRelease();
  v84 = *(int *)(v33 + 24);
  v85 = (char *)v31 + v84;
  v86 = (char *)v32 + v84;
  v87 = sub_1CCB635B0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 40))(v85, v86, v87);
  v88 = *(int *)(v33 + 28);
  v89 = (_QWORD *)((char *)v31 + v88);
  v90 = (_QWORD *)((char *)v32 + v88);
  v92 = *v90;
  v91 = v90[1];
  *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
LABEL_12:
  v44 = a3[14];
  v45 = (_QWORD *)(a1 + v44);
  v46 = (uint64_t *)(a2 + v44);
  v48 = *v46;
  v47 = v46[1];
  *v45 = v48;
  v45[1] = v47;
  swift_bridgeObjectRelease();
  v49 = a3[15];
  v50 = (_QWORD *)(a1 + v49);
  v51 = (uint64_t *)(a2 + v49);
  v53 = *v51;
  v52 = v51[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease();
  v54 = a3[16];
  v55 = a1 + v54;
  v56 = a2 + v54;
  if (*(_QWORD *)(a1 + v54 + 8))
  {
    v57 = *(_QWORD *)(v56 + 8);
    if (v57)
    {
      *(_QWORD *)v55 = *(_QWORD *)v56;
      *(_QWORD *)(v55 + 8) = v57;
      swift_bridgeObjectRelease();
      v58 = *(_QWORD *)(v56 + 24);
      *(_QWORD *)(v55 + 16) = *(_QWORD *)(v56 + 16);
      *(_QWORD *)(v55 + 24) = v58;
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    sub_1CCAF26CC(v55);
  }
  v59 = *(_OWORD *)(v56 + 16);
  *(_OWORD *)v55 = *(_OWORD *)v56;
  *(_OWORD *)(v55 + 16) = v59;
LABEL_17:
  *(_BYTE *)(v55 + 32) = *(_BYTE *)(v56 + 32);
  v60 = a3[17];
  v61 = a1 + v60;
  v62 = a2 + v60;
  *(_OWORD *)v61 = *(_OWORD *)(a2 + v60);
  *(_QWORD *)(v61 + 16) = *(_QWORD *)(a2 + v60 + 16);
  swift_bridgeObjectRelease();
  v63 = *(_QWORD *)(v62 + 32);
  *(_QWORD *)(v61 + 24) = *(_QWORD *)(v62 + 24);
  *(_QWORD *)(v61 + 32) = v63;
  swift_bridgeObjectRelease();
  v64 = a3[18];
  v65 = (_QWORD *)(a1 + v64);
  v66 = (uint64_t *)(a2 + v64);
  v68 = *v66;
  v67 = v66[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease();
  v69 = a3[20];
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  v70 = (_QWORD *)(a1 + v69);
  v71 = (uint64_t *)(a2 + v69);
  v73 = *v71;
  v72 = v71[1];
  *v70 = v73;
  v70[1] = v72;
  swift_bridgeObjectRelease();
  v74 = a3[22];
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  *(_BYTE *)(a1 + v74) = *(_BYTE *)(a2 + v74);
  *(_QWORD *)(a1 + a3[23]) = *(_QWORD *)(a2 + a3[23]);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v75 = a3[24];
    v76 = (_OWORD *)(a1 + v75);
    v77 = (_OWORD *)(a2 + v75);
    sub_1CCA0BF30(a1 + v75, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
    v78 = type metadata accessor for FMIPProductType();
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v79 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
      v80 = *((_QWORD *)v79 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v80 + 48))(v77, 1, v79))
      {
        v81 = sub_1CCA14E90(&qword_1EF9DFB90);
        memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
      }
      else
      {
        v93 = v77[1];
        *v76 = *v77;
        v76[1] = v93;
        v94 = v77[3];
        v76[2] = v77[2];
        v76[3] = v94;
        *((_QWORD *)v76 + 8) = *((_QWORD *)v77 + 8);
        *((_WORD *)v76 + 36) = *((_WORD *)v77 + 36);
        v95 = v79[12];
        v100 = (char *)v76 + v95;
        v96 = (char *)v77 + v95;
        v97 = sub_1CCB63490();
        v101 = v80;
        v98 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 32);
        v98(v100, v96, v97);
        v98((char *)v76 + v79[13], (char *)v77 + v79[13], v97);
        v98((char *)v76 + v79[14], (char *)v77 + v79[14], v97);
        v98((char *)v76 + v79[15], (char *)v77 + v79[15], v97);
        v98((char *)v76 + v79[16], (char *)v77 + v79[16], v97);
        v98((char *)v76 + v79[17], (char *)v77 + v79[17], v97);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v101 + 56))(v76, 0, 1, v79);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    }
  }
  *(_BYTE *)(a1 + a3[25]) = *(_BYTE *)(a2 + a3[25]);
  return a1;
}

uint64_t sub_1CCAF30D8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1CCA14E90(&qword_1ED8A8CD0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 52);
    }
    else
    {
      v10 = type metadata accessor for FMIPProductType();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 96);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

char *sub_1CCAF317C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_1CCA14E90(&qword_1ED8A8CD0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 52);
    }
    else
    {
      v10 = type metadata accessor for FMIPProductType();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 96);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPItem.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEA)
    goto LABEL_17;
  if (a2 + 22 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 22) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 22;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 22;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 22;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x17;
  v8 = v6 - 23;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 22 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 22) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE9)
    return ((uint64_t (*)(void))((char *)&loc_1CCAF32F8 + 4 * byte_1CCB6E444[v4]))();
  *a1 = a2 + 22;
  return ((uint64_t (*)(void))((char *)sub_1CCAF332C + 4 * byte_1CCB6E43F[v4]))();
}

uint64_t sub_1CCAF332C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF3334(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAF333CLL);
  return result;
}

uint64_t sub_1CCAF3348(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAF3350);
  *(_BYTE *)result = a2 + 22;
  return result;
}

uint64_t sub_1CCAF3354(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF335C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPItem.CodingKeys()
{
  return &type metadata for FMIPItem.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FMIPPartInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCAF33C4 + 4 * byte_1CCB6E44E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CCAF33F8 + 4 * byte_1CCB6E449[v4]))();
}

uint64_t sub_1CCAF33F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF3400(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAF3408);
  return result;
}

uint64_t sub_1CCAF3414(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAF341CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCAF3420(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF3428(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPPartInfo.CodingKeys()
{
  return &type metadata for FMIPPartInfo.CodingKeys;
}

unint64_t sub_1CCAF3448()
{
  unint64_t result;

  result = qword_1EF9E3E78;
  if (!qword_1EF9E3E78)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6EECC, &type metadata for FMIPPartInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E78);
  }
  return result;
}

unint64_t sub_1CCAF3490()
{
  unint64_t result;

  result = qword_1EF9E3E80;
  if (!qword_1EF9E3E80)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6EFBC, &type metadata for FMIPItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E80);
  }
  return result;
}

unint64_t sub_1CCAF34D8()
{
  unint64_t result;

  result = qword_1EF9E3E88;
  if (!qword_1EF9E3E88)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6EEF4, &type metadata for FMIPItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E88);
  }
  return result;
}

unint64_t sub_1CCAF3520()
{
  unint64_t result;

  result = qword_1EF9E3E90;
  if (!qword_1EF9E3E90)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6EF1C, &type metadata for FMIPItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E90);
  }
  return result;
}

unint64_t sub_1CCAF3568()
{
  unint64_t result;

  result = qword_1EF9E3E98;
  if (!qword_1EF9E3E98)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6EE3C, &type metadata for FMIPPartInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3E98);
  }
  return result;
}

unint64_t sub_1CCAF35B0()
{
  unint64_t result;

  result = qword_1EF9E3EA0;
  if (!qword_1EF9E3EA0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6EE64, &type metadata for FMIPPartInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3EA0);
  }
  return result;
}

uint64_t sub_1CCAF35F4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F626D7973 && a2 == 0xE600000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1CCAF3720()
{
  unint64_t v0;

  v0 = sub_1CCB642C4();
  swift_bridgeObjectRelease();
  if (v0 >= 0x17)
    return 23;
  else
    return v0;
}

uint64_t sub_1CCAF3770(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90((uint64_t *)&unk_1EF9E2A10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1CCAF37B8()
{
  unint64_t result;

  result = qword_1EF9E3ED8;
  if (!qword_1EF9E3ED8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPPartType, &type metadata for FMIPPartType);
    atomic_store(result, (unint64_t *)&qword_1EF9E3ED8);
  }
  return result;
}

unint64_t sub_1CCAF37FC()
{
  unint64_t result;

  result = qword_1EF9E3EE0;
  if (!qword_1EF9E3EE0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPItemBatteryStatus, &type metadata for FMIPItemBatteryStatus);
    atomic_store(result, (unint64_t *)&qword_1EF9E3EE0);
  }
  return result;
}

uint64_t FMIPHawkeyeProductInformation.init(beacon:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  uint64_t v25;

  v4 = a1[3];
  v5 = a1[4];
  sub_1CCA04DDC(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 128))(v4, v5);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = a1[3];
    v9 = a1[4];
    sub_1CCA04DDC(a1, v8);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 136))(v8, v9);
    v11 = a1[3];
    v12 = a1[4];
    sub_1CCA04DDC(a1, v11);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 144))(v11, v12);
    v14 = a1[3];
    v15 = a1[4];
    sub_1CCA04DDC(a1, v14);
    v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
    v17 = sub_1CCB63988();
    v19 = v18;
    if (v17 == sub_1CCB63988() && v19 == v20)
      v22 = 1;
    else
      v22 = sub_1CCB642A0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    FMIPHawkeyeProductInformation.init(productInformation:vendorIdentifier:productIdentifier:requiresAdditionalConnectionTime:)(v7, v10, v13, v22 & 1, a2);
    v25 = type metadata accessor for FMIPHawkeyeProductInformation();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a2, 0, 1, v25);
    return sub_1CCA01CA0((uint64_t)a1);
  }
  else
  {
    sub_1CCA01CA0((uint64_t)a1);
    v23 = type metadata accessor for FMIPHawkeyeProductInformation();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 1, 1, v23);
  }
}

uint64_t FMIPHawkeyeProductInformation.init(beacon:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v4 = objc_msgSend(a1, sel_productInformation);
  if (v4)
  {
    v5 = v4;
    v6 = SPUnknownBeacon.vendorId.getter();
    v7 = SPUnknownBeacon.productId.getter();
    v8 = objc_msgSend(a1, sel_type);
    v9 = sub_1CCB63988();
    v11 = v10;
    if (v9 == sub_1CCB63988() && v11 == v12)
      v14 = 1;
    else
      v14 = sub_1CCB642A0();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    FMIPHawkeyeProductInformation.init(productInformation:vendorIdentifier:productIdentifier:requiresAdditionalConnectionTime:)(v5, (uint64_t)v6, (uint64_t)v7, v14 & 1, a2);

    v15 = type metadata accessor for FMIPHawkeyeProductInformation();
    v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
    v17 = a2;
    v18 = 0;
  }
  else
  {

    v15 = type metadata accessor for FMIPHawkeyeProductInformation();
    v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
    v17 = a2;
    v18 = 1;
  }
  return v16(v17, v18, 1, v15);
}

void FMIPHawkeyeProductInformation.init(productInformation:vendorIdentifier:productIdentifier:requiresAdditionalConnectionTime:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  unsigned __int16 v28;

  *(_QWORD *)a5 = a2;
  *(_QWORD *)(a5 + 8) = a3;
  v8 = objc_msgSend(a1, sel_modelName);
  v9 = sub_1CCB63988();
  v11 = v10;

  *(_QWORD *)(a5 + 16) = v9;
  *(_QWORD *)(a5 + 24) = v11;
  v12 = objc_msgSend(a1, sel_manufacturerName);
  v13 = sub_1CCB63988();
  v15 = v14;

  *(_QWORD *)(a5 + 32) = v13;
  *(_QWORD *)(a5 + 40) = v15;
  v16 = objc_msgSend(a1, sel_appBundleIdentifier);
  if (v16)
  {
    v17 = v16;
    v18 = sub_1CCB63988();
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0xE000000000000000;
  }
  *(_QWORD *)(a5 + 48) = v18;
  *(_QWORD *)(a5 + 56) = v20;
  objc_msgSend(a1, sel_txPower);
  *(_QWORD *)(a5 + 64) = v21;
  v22 = objc_msgSend(a1, sel_defaultHeroIcon);
  type metadata accessor for FMIPHawkeyeProductInformation();
  sub_1CCB6346C();

  v23 = objc_msgSend(a1, sel_defaultHeroIcon2x);
  sub_1CCB6346C();

  v24 = objc_msgSend(a1, sel_defaultHeroIcon3x);
  sub_1CCB6346C();

  v25 = objc_msgSend(a1, sel_defaultListIcon);
  sub_1CCB6346C();

  v26 = objc_msgSend(a1, sel_defaultListIcon2x);
  sub_1CCB6346C();

  v27 = objc_msgSend(a1, sel_defaultListIcon3x);
  sub_1CCB6346C();

  v28 = (unsigned __int16)objc_msgSend(a1, sel_capabilities);
  *(_BYTE *)(a5 + 72) = (v28 & 0x1000) != 0;
  *(_BYTE *)(a5 + 73) = a4 & 1;
}

uint64_t FMIPHawkeyeProductInformation.vendorIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t FMIPHawkeyeProductInformation.productIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t FMIPHawkeyeProductInformation.modelName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPHawkeyeProductInformation.manufacturerName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPHawkeyeProductInformation.appBundleIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

double FMIPHawkeyeProductInformation.antennaPower.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

uint64_t FMIPHawkeyeProductInformation.requiresAudioSafetyAlert.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t FMIPHawkeyeProductInformation.requiresAdditionalConnectionTime.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 73);
}

uint64_t FMIPHawkeyeProductInformation.identifier.getter()
{
  uint64_t v1;

  v1 = sub_1CCB64240();
  sub_1CCB63A24();
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  return v1;
}

id SPUnknownBeacon.vendorId.getter()
{
  void *v0;
  uint64_t v1;
  id result;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1CCB631CC();
  MEMORY[0x1E0C80A78](v1);
  result = objc_msgSend(v0, sel_metadata);
  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, sel_productData);

    sub_1CCB634CC();
    v6 = v5;

    __asm { BR              X11 }
  }
  return result;
}

id SPUnknownBeacon.productId.getter()
{
  void *v0;
  uint64_t v1;
  id result;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1CCB631CC();
  MEMORY[0x1E0C80A78](v1);
  result = objc_msgSend(v0, sel_metadata);
  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, sel_productData);

    sub_1CCB634CC();
    v6 = v5;

    __asm { BR              X10 }
  }
  return result;
}

uint64_t FMIPHawkeyeProductInformation.hash(into:)()
{
  uint64_t v0;

  sub_1CCB64348();
  sub_1CCB64348();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 56))
  {
    sub_1CCB64354();
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1CCB64354();
  }
  sub_1CCB6436C();
  sub_1CCB64354();
  sub_1CCB64354();
  type metadata accessor for FMIPHawkeyeProductInformation();
  sub_1CCB63490();
  sub_1CC9CAA38(&qword_1EF9E3F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
  sub_1CCB63940();
  sub_1CCB63940();
  sub_1CCB63940();
  sub_1CCB63940();
  sub_1CCB63940();
  return sub_1CCB63940();
}

uint64_t sub_1CCAF4424(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CCAF4460 + 4 * byte_1CCB6F0C0[a1]))(0xD000000000000010, 0x80000001CCB79090);
}

unint64_t sub_1CCAF4460()
{
  return 0xD000000000000011;
}

uint64_t sub_1CCAF4574()
{
  unsigned __int8 *v0;

  return sub_1CCAF4424(*v0);
}

uint64_t sub_1CCAF457C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCAF62E8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1CCAF45A0(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_1CCAF45AC()
{
  sub_1CCAF5598();
  return sub_1CCB643D8();
}

uint64_t sub_1CCAF45D4()
{
  sub_1CCAF5598();
  return sub_1CCB643E4();
}

uint64_t FMIPHawkeyeProductInformation.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[32];

  v3 = sub_1CCA14E90(&qword_1EF9E3F08);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCAF5598();
  sub_1CCB643CC();
  v8[31] = 0;
  sub_1CCB64204();
  if (!v1)
  {
    v8[30] = 1;
    sub_1CCB64204();
    v8[29] = 2;
    sub_1CCB641E0();
    v8[28] = 3;
    sub_1CCB641E0();
    v8[27] = 4;
    sub_1CCB641BC();
    v8[26] = 5;
    sub_1CCB641F8();
    v8[25] = 6;
    sub_1CCB641EC();
    v8[24] = 7;
    sub_1CCB641EC();
    type metadata accessor for FMIPHawkeyeProductInformation();
    v8[15] = 8;
    sub_1CCB63490();
    sub_1CC9CAA38(&qword_1EF9E3F18, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
    sub_1CCB64210();
    v8[14] = 9;
    sub_1CCB64210();
    v8[13] = 10;
    sub_1CCB64210();
    v8[12] = 11;
    sub_1CCB64210();
    v8[11] = 12;
    sub_1CCB64210();
    v8[10] = 13;
    sub_1CCB64210();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t FMIPHawkeyeProductInformation.hashValue.getter()
{
  sub_1CCB6433C();
  FMIPHawkeyeProductInformation.hash(into:)();
  return sub_1CCB64384();
}

uint64_t FMIPHawkeyeProductInformation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int *v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;

  v40 = a2;
  v49 = sub_1CCB63490();
  v47 = *(_QWORD *)(v49 - 8);
  v3 = MEMORY[0x1E0C80A78](v49);
  v41 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v42 = (char *)&v36 - v6;
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v36 - v8;
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v36 - v11;
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v36 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v36 - v16;
  v44 = sub_1CCA14E90(&qword_1EF9E3F20);
  v18 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
  MEMORY[0x1E0C80A78](v50);
  v48 = (uint64_t *)((char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = a1[3];
  v45 = a1;
  sub_1CCA04DDC(a1, v22);
  sub_1CCAF5598();
  v43 = v20;
  v23 = v46;
  sub_1CCB643B4();
  if (v23)
    return sub_1CCA01CA0((uint64_t)v45);
  v46 = v17;
  v38 = v12;
  v39 = v15;
  v37 = v9;
  v24 = v18;
  v64 = 0;
  v25 = sub_1CCB64174();
  v26 = v49;
  v27 = v48;
  *v48 = v25;
  v63 = 1;
  v27[1] = sub_1CCB64174();
  v62 = 2;
  v27[2] = sub_1CCB64150();
  v27[3] = v28;
  v61 = 3;
  v27[4] = sub_1CCB64150();
  v27[5] = v29;
  v60 = 4;
  v27[6] = sub_1CCB64120();
  v27[7] = v30;
  v59 = 5;
  sub_1CCB64168();
  v27[8] = v31;
  v58 = 6;
  *((_BYTE *)v27 + 72) = sub_1CCB6415C() & 1;
  v57 = 7;
  *((_BYTE *)v27 + 73) = sub_1CCB6415C() & 1;
  v56 = 8;
  sub_1CC9CAA38(&qword_1EF9E3F28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
  v32 = v46;
  sub_1CCB64180();
  v33 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
  v33((char *)v27 + v50[12], v32, v26);
  v55 = 9;
  sub_1CCB64180();
  v33((char *)v48 + v50[13], v39, v49);
  v54 = 10;
  sub_1CCB64180();
  v33((char *)v48 + v50[14], v38, v49);
  v53 = 11;
  sub_1CCB64180();
  v33((char *)v48 + v50[15], v37, v49);
  v52 = 12;
  sub_1CCB64180();
  v33((char *)v48 + v50[16], v42, v49);
  v51 = 13;
  sub_1CCB64180();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v43, v44);
  v34 = (uint64_t)v48;
  v33((char *)v48 + v50[17], v41, v49);
  sub_1CCAF55DC(v34, v40);
  sub_1CCA01CA0((uint64_t)v45);
  return sub_1CCA7D1CC(v34);
}

uint64_t sub_1CCAF5164@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPHawkeyeProductInformation.init(from:)(a1, a2);
}

uint64_t sub_1CCAF5178(_QWORD *a1)
{
  return FMIPHawkeyeProductInformation.encode(to:)(a1);
}

uint64_t sub_1CCAF518C()
{
  sub_1CCB6433C();
  FMIPHawkeyeProductInformation.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCAF51CC()
{
  sub_1CCB6433C();
  FMIPHawkeyeProductInformation.hash(into:)();
  return sub_1CCB64384();
}

BOOL static FMIPHawkeyeProductInformation.AssetScale.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FMIPHawkeyeProductInformation.AssetScale.hash(into:)()
{
  return sub_1CCB64348();
}

uint64_t FMIPHawkeyeProductInformation.AssetScale.hashValue.getter()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

BOOL static FMIPHawkeyeProductInformation.AssetType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t FMIPHawkeyeProductInformation.AssetType.hash(into:)()
{
  return sub_1CCB64348();
}

uint64_t FMIPHawkeyeProductInformation.AssetType.hashValue.getter()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

uint64_t FMIPHawkeyeProductInformation.assetURL(for:scale:)@<X0>(_BYTE *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *a2;
  if (*a1 == 1)
  {
    if (*a2)
    {
      if (v5 == 1)
        v6 = *(int *)(type metadata accessor for FMIPHawkeyeProductInformation() + 52);
      else
        v6 = *(int *)(type metadata accessor for FMIPHawkeyeProductInformation() + 56);
    }
    else
    {
      v6 = *(int *)(type metadata accessor for FMIPHawkeyeProductInformation() + 48);
    }
  }
  else if (*a2)
  {
    if (v5 == 1)
      v6 = *(int *)(type metadata accessor for FMIPHawkeyeProductInformation() + 64);
    else
      v6 = *(int *)(type metadata accessor for FMIPHawkeyeProductInformation() + 68);
  }
  else
  {
    v6 = *(int *)(type metadata accessor for FMIPHawkeyeProductInformation() + 60);
  }
  v7 = v3 + v6;
  v8 = sub_1CCB63490();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a3, v7, v8);
}

unint64_t sub_1CCAF53CC()
{
  unint64_t result;

  result = qword_1EF9E3EF8;
  if (!qword_1EF9E3EF8)
  {
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEDC10], MEMORY[0x1E0DEDBC8]);
    atomic_store(result, (unint64_t *)&qword_1EF9E3EF8);
  }
  return result;
}

uint64_t _s8FMIPCore29FMIPHawkeyeProductInformationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;

  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    v4 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
    if ((v4 || (sub_1CCB642A0() & 1) != 0)
      && (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
       || (sub_1CCB642A0() & 1) != 0))
    {
      v5 = *(_QWORD *)(a1 + 56);
      v6 = *(_QWORD *)(a2 + 56);
      if (v5)
      {
        if (!v6 || (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48) || v5 != v6) && (sub_1CCB642A0() & 1) == 0)
          return 0;
      }
      else if (v6)
      {
        return 0;
      }
      if (*(double *)(a1 + 64) == *(double *)(a2 + 64)
        && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72)
        && *(unsigned __int8 *)(a1 + 73) == *(unsigned __int8 *)(a2 + 73))
      {
        v7 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
        if ((MEMORY[0x1D17B09D0](a1 + v7[12], a2 + v7[12]) & 1) != 0
          && (MEMORY[0x1D17B09D0](a1 + v7[13], a2 + v7[13]) & 1) != 0
          && (MEMORY[0x1D17B09D0](a1 + v7[14], a2 + v7[14]) & 1) != 0
          && (MEMORY[0x1D17B09D0](a1 + v7[15], a2 + v7[15]) & 1) != 0
          && (MEMORY[0x1D17B09D0](a1 + v7[16], a2 + v7[16]) & 1) != 0)
        {
          JUMPOUT(0x1D17B09D0);
        }
      }
    }
  }
  return 0;
}

unint64_t sub_1CCAF5598()
{
  unint64_t result;

  result = qword_1EF9E3F10;
  if (!qword_1EF9E3F10)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6F428, &type metadata for FMIPHawkeyeProductInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3F10);
  }
  return result;
}

uint64_t sub_1CCAF55DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPHawkeyeProductInformation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCAF5620(_QWORD *a1)
{
  uint64_t result;

  a1[2] = sub_1CC9CAA38(&qword_1EF9DFBF0, (uint64_t (*)(uint64_t))type metadata accessor for FMIPHawkeyeProductInformation, (uint64_t)&protocol conformance descriptor for FMIPHawkeyeProductInformation);
  a1[3] = sub_1CC9CAA38(&qword_1EF9DFBB8, (uint64_t (*)(uint64_t))type metadata accessor for FMIPHawkeyeProductInformation, (uint64_t)&protocol conformance descriptor for FMIPHawkeyeProductInformation);
  result = sub_1CC9CAA38(&qword_1EF9E3F30, (uint64_t (*)(uint64_t))type metadata accessor for FMIPHawkeyeProductInformation, (uint64_t)&protocol conformance descriptor for FMIPHawkeyeProductInformation);
  a1[4] = result;
  return result;
}

uint64_t sub_1CCAF5698()
{
  return sub_1CC9CAA38(&qword_1EF9E3F38, (uint64_t (*)(uint64_t))type metadata accessor for FMIPHawkeyeProductInformation, (uint64_t)&protocol conformance descriptor for FMIPHawkeyeProductInformation);
}

unint64_t sub_1CCAF56C8()
{
  unint64_t result;

  result = qword_1EF9E3F40;
  if (!qword_1EF9E3F40)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPHawkeyeProductInformation.AssetScale, &type metadata for FMIPHawkeyeProductInformation.AssetScale);
    atomic_store(result, (unint64_t *)&qword_1EF9E3F40);
  }
  return result;
}

unint64_t sub_1CCAF5710()
{
  unint64_t result;

  result = qword_1EF9E3F48;
  if (!qword_1EF9E3F48)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPHawkeyeProductInformation.AssetType, &type metadata for FMIPHawkeyeProductInformation.AssetType);
    atomic_store(result, (unint64_t *)&qword_1EF9E3F48);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for FMIPHawkeyeProductInformation(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    v8 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v8;
    v9 = a2[6];
    v10 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v10;
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
    v11 = a3[12];
    v12 = a1 + v11;
    v13 = (uint64_t)a2 + v11;
    *(_QWORD *)(a1 + 48) = v9;
    v14 = sub_1CCB63490();
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
    v15((uint64_t)v4 + a3[13], (uint64_t)a2 + a3[13], v14);
    v15((uint64_t)v4 + a3[14], (uint64_t)a2 + a3[14], v14);
    v15((uint64_t)v4 + a3[15], (uint64_t)a2 + a3[15], v14);
    v15((uint64_t)v4 + a3[16], (uint64_t)a2 + a3[16], v14);
    v15((uint64_t)v4 + a3[17], (uint64_t)a2 + a3[17], v14);
  }
  return v4;
}

uint64_t destroy for FMIPHawkeyeProductInformation(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[12];
  v5 = sub_1CCB63490();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  v7(a1 + a2[13], v5);
  v7(a1 + a2[14], v5);
  v7(a1 + a2[15], v5);
  v7(a1 + a2[16], v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + a2[17], v5);
}

uint64_t initializeWithCopy for FMIPHawkeyeProductInformation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  v10 = a3[12];
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)(a1 + 48) = v8;
  v13 = sub_1CCB63490();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  v14(a1 + a3[13], a2 + a3[13], v13);
  v14(a1 + a3[14], a2 + a3[14], v13);
  v14(a1 + a3[15], a2 + a3[15], v13);
  v14(a1 + a3[16], a2 + a3[16], v13);
  v14(a1 + a3[17], a2 + a3[17], v13);
  return a1;
}

uint64_t assignWithCopy for FMIPHawkeyeProductInformation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  v6 = a3[12];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1CCB63490();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(a1 + a3[13], a2 + a3[13], v9);
  v10(a1 + a3[14], a2 + a3[14], v9);
  v10(a1 + a3[15], a2 + a3[15], v9);
  v10(a1 + a3[16], a2 + a3[16], v9);
  v10(a1 + a3[17], a2 + a3[17], v9);
  return a1;
}

uint64_t initializeWithTake for FMIPHawkeyeProductInformation(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  v9 = a3[12];
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  v12 = sub_1CCB63490();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v13(v10, v11, v12);
  v13(a1 + a3[13], a2 + a3[13], v12);
  v13(a1 + a3[14], a2 + a3[14], v12);
  v13(a1 + a3[15], a2 + a3[15], v12);
  v13(a1 + a3[16], a2 + a3[16], v12);
  v13(a1 + a3[17], a2 + a3[17], v12);
  return a1;
}

uint64_t assignWithTake for FMIPHawkeyeProductInformation(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  v9 = a3[12];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_1CCB63490();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40);
  v13(v10, v11, v12);
  v13(a1 + a3[13], a2 + a3[13], v12);
  v13(a1 + a3[14], a2 + a3[14], v12);
  v13(a1 + a3[15], a2 + a3[15], v12);
  v13(a1 + a3[16], a2 + a3[16], v12);
  v13(a1 + a3[17], a2 + a3[17], v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPHawkeyeProductInformation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCAF5E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1CCB63490();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FMIPHawkeyeProductInformation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCAF5EB8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_1CCB63490();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPHawkeyeProductInformation.AssetScale(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCAF5F78 + 4 * byte_1CCB6F0D3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CCAF5FAC + 4 * byte_1CCB6F0CE[v4]))();
}

uint64_t sub_1CCAF5FAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF5FB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAF5FBCLL);
  return result;
}

uint64_t sub_1CCAF5FC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAF5FD0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCAF5FD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF5FDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPHawkeyeProductInformation.AssetScale()
{
  return &type metadata for FMIPHawkeyeProductInformation.AssetScale;
}

uint64_t storeEnumTagSinglePayload for FMIPHawkeyeProductInformation.AssetType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCAF6044 + 4 * byte_1CCB6F0DD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCAF6078 + 4 * byte_1CCB6F0D8[v4]))();
}

uint64_t sub_1CCAF6078(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF6080(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAF6088);
  return result;
}

uint64_t sub_1CCAF6094(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAF609CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCAF60A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF60A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPHawkeyeProductInformation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPHawkeyeProductInformation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_1CCAF6190 + 4 * byte_1CCB6F0E7[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1CCAF61C4 + 4 * byte_1CCB6F0E2[v4]))();
}

uint64_t sub_1CCAF61C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF61CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAF61D4);
  return result;
}

uint64_t sub_1CCAF61E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAF61E8);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_1CCAF61EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF61F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPHawkeyeProductInformation.CodingKeys()
{
  return &type metadata for FMIPHawkeyeProductInformation.CodingKeys;
}

unint64_t sub_1CCAF6214()
{
  unint64_t result;

  result = qword_1EF9E3F50;
  if (!qword_1EF9E3F50)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6F400, &type metadata for FMIPHawkeyeProductInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3F50);
  }
  return result;
}

unint64_t sub_1CCAF625C()
{
  unint64_t result;

  result = qword_1EF9E3F58;
  if (!qword_1EF9E3F58)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6F370, &type metadata for FMIPHawkeyeProductInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3F58);
  }
  return result;
}

unint64_t sub_1CCAF62A4()
{
  unint64_t result;

  result = qword_1EF9E3F60;
  if (!qword_1EF9E3F60)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6F398, &type metadata for FMIPHawkeyeProductInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3F60);
  }
  return result;
}

uint64_t sub_1CCAF62E8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001CCB79090 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CCB77C60 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CCB775D0 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001CCB790B0 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x50616E6E65746E61 && a2 == 0xEC0000007265776FLL || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001CCB7CBF0 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000020 && a2 == 0x80000001CCB7CC10 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x48746C7561666564 && a2 == 0xEF6E6F63496F7265 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CCB7CC40 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CCB7CC60 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x4C746C7561666564 && a2 == 0xEF6E6F6349747369 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CCB7CC80 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001CCB7CCA0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else
  {
    v5 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 13;
    else
      return 14;
  }
}

uint64_t sub_1CCAF6874()
{
  uint64_t result;

  sub_1CCB6322C();
  swift_allocObject();
  result = sub_1CCB63220();
  qword_1EF9E3F68 = result;
  return result;
}

uint64_t static FMIPDemoContent.load(from:)()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = sub_1CCB6349C();
  if (!v0)
  {
    v3 = result;
    v4 = v2;
    if (qword_1EF9DEFD0 != -1)
      swift_once();
    sub_1CCAF6968();
    sub_1CCB63214();
    sub_1CCA1B120(v3, v4);
    return v5;
  }
  return result;
}

unint64_t sub_1CCAF6968()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF9E3F70;
  if (!qword_1EF9E3F70)
  {
    v1 = type metadata accessor for FMIPDemoContent();
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDemoContent, v1);
    atomic_store(result, (unint64_t *)&qword_1EF9E3F70);
  }
  return result;
}

uint64_t type metadata accessor for FMIPDemoContent()
{
  return objc_opt_self();
}

uint64_t sub_1CCAF69CC()
{
  _BYTE *v0;

  if (*v0)
    return 0x73656369766564;
  else
    return 0x654D796C696D6166;
}

uint64_t sub_1CCAF6A14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCAF7070(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCAF6A38()
{
  sub_1CCAF6D24();
  return sub_1CCB643D8();
}

uint64_t sub_1CCAF6A60()
{
  sub_1CCAF6D24();
  return sub_1CCB643E4();
}

uint64_t FMIPDemoContent.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FMIPDemoContent.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t FMIPDemoContent.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  FMIPDemoContent.init(from:)(a1);
  return v2;
}

uint64_t FMIPDemoContent.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v4 = sub_1CCA14E90(&qword_1EF9E3F78);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCAF6D24();
  sub_1CCB643B4();
  if (v2)
  {
    type metadata accessor for FMIPDemoContent();
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_1CCA14E90(&qword_1EF9E3F88);
    v10 = 0;
    sub_1CCAF6DAC(&qword_1EF9E3F90, &qword_1EF9E3F88, (uint64_t (*)(void))sub_1CCAF6D68);
    sub_1CCB64180();
    *(_QWORD *)(v1 + 16) = v11;
    sub_1CCA14E90(&qword_1EF9E3FA0);
    v10 = 1;
    sub_1CCAF6DAC(&qword_1EF9E3FA8, &qword_1EF9E3FA0, (uint64_t (*)(void))sub_1CCAF6E10);
    sub_1CCB64180();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_QWORD *)(v1 + 24) = v11;
  }
  sub_1CCA01CA0((uint64_t)a1);
  return v1;
}

unint64_t sub_1CCAF6D24()
{
  unint64_t result;

  result = qword_1EF9E3F80;
  if (!qword_1EF9E3F80)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6F5B4, &type metadata for FMIPDemoContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E3F80);
  }
  return result;
}

unint64_t sub_1CCAF6D68()
{
  unint64_t result;

  result = qword_1EF9E3F98;
  if (!qword_1EF9E3F98)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB77040, &type metadata for FMIPDemoFamilyMember);
    atomic_store(result, (unint64_t *)&qword_1EF9E3F98);
  }
  return result;
}

uint64_t sub_1CCAF6DAC(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = sub_1CCA19B38(a2);
    v7 = a3();
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF40], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1CCAF6E10()
{
  unint64_t result;

  result = qword_1EF9E3FB0;
  if (!qword_1EF9E3FB0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6C4D8, &type metadata for FMIPDemoDeviceTemplate);
    atomic_store(result, (unint64_t *)&qword_1EF9E3FB0);
  }
  return result;
}

uint64_t sub_1CCAF6E54@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for FMIPDemoContent();
  v5 = swift_allocObject();
  result = FMIPDemoContent.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t method lookup function for FMIPDemoContent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPDemoContent.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t storeEnumTagSinglePayload for FMIPDemoContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCAF6F18 + 4 * byte_1CCB6F47D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCAF6F4C + 4 * byte_1CCB6F478[v4]))();
}

uint64_t sub_1CCAF6F4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF6F54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAF6F5CLL);
  return result;
}

uint64_t sub_1CCAF6F68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAF6F70);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCAF6F74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF6F7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPDemoContent.CodingKeys()
{
  return &type metadata for FMIPDemoContent.CodingKeys;
}

unint64_t sub_1CCAF6F9C()
{
  unint64_t result;

  result = qword_1EF9E4060;
  if (!qword_1EF9E4060)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6F58C, &type metadata for FMIPDemoContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E4060);
  }
  return result;
}

unint64_t sub_1CCAF6FE4()
{
  unint64_t result;

  result = qword_1EF9E4068;
  if (!qword_1EF9E4068)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6F4FC, &type metadata for FMIPDemoContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E4068);
  }
  return result;
}

unint64_t sub_1CCAF702C()
{
  unint64_t result;

  result = qword_1EF9E4070;
  if (!qword_1EF9E4070)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6F524, &type metadata for FMIPDemoContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E4070);
  }
  return result;
}

uint64_t sub_1CCAF7070(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x654D796C696D6166 && a2 == 0xED0000737265626DLL;
  if (v2 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73656369766564 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

char sub_1CCAF7184@<W0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  v3 = sub_1CCA14E90(&qword_1ED8A73F8);
  result = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 56);
  if (!v7 || !*(_QWORD *)(v7 + 16))
    goto LABEL_7;
  v8 = type metadata accessor for FMIPDevice();
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  sub_1CCAC4A3C(v7 + *(int *)(v8 + 124) + ((v9 + 32) & ~v9), (uint64_t)v6);
  v10 = type metadata accessor for FMIPEraseMetadata();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v6, 1, v10) == 1)
  {
    result = sub_1CCAC4A84((uint64_t)v6);
LABEL_7:
    v12 = 0;
    goto LABEL_8;
  }
  v11 = *v6;
  sub_1CCA401B0((uint64_t)v6);
  result = FMIPActionStatus.init(rawValue:)(qword_1CCB6F640[v11]).value;
  v12 = v14;
  if (v14 == 12)
  {
    v12 = 2;
    goto LABEL_8;
  }
  if (v14 == 18)
    goto LABEL_7;
LABEL_8:
  *a1 = v12;
  return result;
}

uint64_t sub_1CCAF729C(uint64_t a1)
{
  swift_allocObject();
  return sub_1CCAF72E4(a1);
}

uint64_t sub_1CCAF72E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13[7];

  sub_1CC9EBC94(a1, (uint64_t)v13);
  v3 = sub_1CCA5B658(v13);
  if (!v1)
  {
    v4 = qword_1ED8AA630;
    swift_retain();
    if (v4 != -1)
      swift_once();
    v5 = sub_1CCB637FC();
    sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
    swift_retain();
    v6 = sub_1CCB637D8();
    v7 = sub_1CCB63D48();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      *(_DWORD *)v8 = 136315138;
      v13[0] = v9;
      v10 = sub_1CCA5B9C4();
      v13[6] = sub_1CCA0CB60(v10, v11, v13);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v6, v7, "FMIPCancelEraseResponse: initialized with coder %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v9, -1, -1);
      MEMORY[0x1D17B214C](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }

  }
  sub_1CCA01CA0(a1);
  return v3;
}

uint64_t type metadata accessor for FMIPCancelEraseResponse()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for FMIPSiriBaseRequest()
{
  uint64_t result;

  result = qword_1ED8AA4D8;
  if (!qword_1ED8AA4D8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCAF7518()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1CCAF7578()
{
  void *v0;
  void *v1;
  unsigned int v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v10[5];

  v10[4] = *(id *)MEMORY[0x1E0C80C00];
  v0 = (void *)objc_opt_self();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v1 = (void *)sub_1CCB638C8();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_isValidJSONObject_, v1);

  if (!v2)
    return 0;
  swift_bridgeObjectRetain();
  v3 = (void *)sub_1CCB638C8();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v4 = objc_msgSend(v0, sel_dataWithJSONObject_options_error_, v3, 0, v10);

  v5 = v10[0];
  if (!v4)
  {
    v7 = v5;
    v8 = (void *)sub_1CCB63400();

    swift_willThrow();
    return 0;
  }
  v6 = sub_1CCB634CC();

  return v6;
}

uint64_t sub_1CCAF7714()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v1 = (uint64_t *)(v0 + qword_1ED8AA4B8);
  swift_beginAccess();
  v2 = *v1;
  if (!*(_QWORD *)(*v1 + 16))
  {
    v9 = 0u;
    v10 = 0u;
LABEL_9:
    sub_1CC9E4F4C((uint64_t)&v9);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v3 = sub_1CCA074F4(0x6F43746E65696C63, 0xED0000747865746ELL);
  if ((v4 & 1) != 0)
  {
    sub_1CCA0CC30(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v9);
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v10 + 1))
    goto LABEL_9;
  sub_1CCA14E90(&qword_1ED8AA320);
  if (!swift_dynamicCast())
  {
LABEL_10:
    v6 = sub_1CCA14E90(&qword_1ED8AA320);
    v5 = MEMORY[0x1E0DEE9E0];
    *((_QWORD *)&v10 + 1) = v6;
    *(_QWORD *)&v9 = MEMORY[0x1E0DEE9E0];
    swift_beginAccess();
    sub_1CCA06650((uint64_t)&v9, 0x6F43746E65696C63, 0xED0000747865746ELL);
    swift_endAccess();
    return v5;
  }
  return v8;
}

uint64_t sub_1CCAF7878(uint8_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49[3];
  uint64_t v50;

  v44 = a3;
  v45 = a4;
  v46 = a1;
  v5 = sub_1CCB6367C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(v4 + qword_1ED8AA4C8);
  *v9 = 0xD000000000000017;
  v9[1] = 0x80000001CCB7CD50;
  v10 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v4 + qword_1ED8AA4B8) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v4 + qword_1ED8AA4C0) = v10;
  v11 = (_QWORD *)(v4 + qword_1ED8AA4D0);
  *v11 = 0;
  v11[1] = 0;
  v12 = qword_1ED8AA630;
  swift_retain();
  if (v12 != -1)
    swift_once();
  v13 = sub_1CCB637FC();
  v14 = sub_1CCA16C20(v13, (uint64_t)qword_1ED8AD7F8);
  v15 = sub_1CCB637D8();
  v16 = sub_1CCB63D48();
  v17 = os_log_type_enabled(v15, v16);
  v47 = (uint8_t *)v14;
  if (v17)
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1CC9BF000, v15, v16, "FMIPSiriBaseRequest: initialized", v18, 2u);
    MEMORY[0x1D17B214C](v18, -1, -1);
  }

  v19 = v45;
  *v11 = v44;
  v11[1] = v19;
  swift_release();
  swift_bridgeObjectRelease();
  v20 = v9[1];
  v49[0] = *v9;
  v49[1] = v20;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  v21 = sub_1CCB63694();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0D20A80], v5);
  swift_retain();
  sub_1CCB63688();
  sub_1CCAF7F30();
  sub_1CCAF81CC();
  swift_retain_n();
  v22 = sub_1CCB637D8();
  v23 = sub_1CCB63D24();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    v25 = swift_slowAlloc();
    v49[0] = v25;
    *(_DWORD *)v24 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v26 = sub_1CCB638EC();
    v28 = v27;
    swift_bridgeObjectRelease();
    v50 = sub_1CCA0CB60(v26, v28, v49);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v22, v23, "FMIP Siri Request Headers: %s", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v25, -1, -1);
    MEMORY[0x1D17B214C](v24, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_retain_n();
  v29 = sub_1CCB637D8();
  v30 = sub_1CCB63D24();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    v49[0] = v32;
    *(_DWORD *)v31 = 136315138;
    v46 = v31 + 4;
    sub_1CCAF7714();
    v33 = sub_1CCB638EC();
    v35 = v34;
    swift_bridgeObjectRelease();
    v50 = sub_1CCA0CB60(v33, v35, v49);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v29, v30, "FMIP Siri Request ClientContext: %s", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v32, -1, -1);
    MEMORY[0x1D17B214C](v31, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_retain_n();
  v36 = sub_1CCB637D8();
  v37 = sub_1CCB63D24();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc();
    v39 = swift_slowAlloc();
    v50 = v39;
    *(_DWORD *)v38 = 136315138;
    v47 = v38 + 4;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v40 = sub_1CCB638EC();
    v42 = v41;
    swift_bridgeObjectRelease();
    v48 = sub_1CCA0CB60(v40, v42, &v50);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v36, v37, "FMIP Siri Request Body: %s", v38, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v39, -1, -1);
    MEMORY[0x1D17B214C](v38, -1, -1);

    swift_release();
  }
  else
  {

    swift_release_n();
  }
  return v21;
}

uint64_t sub_1CCAF7F30()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  char isUniquelyReferenced_nonNull_native;
  _QWORD v13[2];
  uint64_t (*v14)();
  uint64_t v15;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v2;
  v5 = v2;
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  strcpy((char *)v13, "FMIPCore/1.0 ");
  HIWORD(v13[1]) = -4864;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = sub_1CCAF8A9C;
  *(_QWORD *)(v6 + 24) = v3;
  swift_retain();
  sub_1CCA14E90(&qword_1ED8AA5B0);
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_1CCAF8ABC;
  *(_QWORD *)(v7 + 24) = v4;
  v14 = sub_1CCAF8B00;
  v15 = v7;
  swift_retain();
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  v8 = v13[0];
  v9 = v13[1];
  v10 = (uint64_t (**)())(v1 + qword_1ED8AA4C0);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *v10;
  *v10 = (uint64_t (*)())0x8000000000000000;
  sub_1CCA07250(v8, v9, 0x6567412D72657355, 0xEA0000000000746ELL, isUniquelyReferenced_nonNull_native);
  *v10 = v14;
  swift_bridgeObjectRelease();
  swift_endAccess();

  swift_release();
  return swift_release();
}

uint64_t sub_1CCAF8170(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, *a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = sub_1CCB63988();

  return v4;
}

void sub_1CCAF81CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;

  v1 = v0;
  v41 = sub_1CCB635B0();
  v2 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCB635A4();
  v5 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  *((_QWORD *)&v47 + 1) = MEMORY[0x1E0DEB418];
  *(_QWORD *)&v46 = 1;
  v6 = sub_1CCAF7714();
  sub_1CCA0799C(&v46, &v44);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v43 = v6;
  sub_1CCA073C4(&v44, 0xD000000000000011, 0x80000001CCB79C40, isUniquelyReferenced_nonNull_native);
  v8 = v43;
  swift_bridgeObjectRelease();
  v9 = sub_1CCA14E90(&qword_1ED8AA320);
  v45 = v9;
  *(_QWORD *)&v44 = v8;
  swift_beginAccess();
  sub_1CCA06650((uint64_t)&v44, 0x6F43746E65696C63, 0xED0000747865746ELL);
  swift_endAccess();
  sub_1CCB634F0();
  *((_QWORD *)&v47 + 1) = MEMORY[0x1E0DEB070];
  *(double *)&v46 = v10 * 1000.0;
  v11 = sub_1CCAF7714();
  sub_1CCA0799C(&v46, &v44);
  v12 = swift_isUniquelyReferenced_nonNull_native();
  v43 = v11;
  sub_1CCA073C4(&v44, 0x6D617473656D6974, 0xE900000000000070, v12);
  v13 = v43;
  swift_bridgeObjectRelease();
  v45 = v9;
  *(_QWORD *)&v44 = v13;
  swift_beginAccess();
  sub_1CCA06650((uint64_t)&v44, 0x6F43746E65696C63, 0xED0000747865746ELL);
  swift_endAccess();
  v14 = objc_msgSend(v5, sel_deviceUDID);
  v15 = MEMORY[0x1E0DEA968];
  if (v14)
  {
    v16 = v14;
    v17 = sub_1CCB63988();
    v19 = v18;

    *((_QWORD *)&v47 + 1) = v15;
    *(_QWORD *)&v46 = v17;
    *((_QWORD *)&v46 + 1) = v19;
    v20 = sub_1CCAF7714();
    v42 = v20;
    sub_1CCA0799C(&v46, &v44);
    v21 = swift_isUniquelyReferenced_nonNull_native();
    v43 = v20;
    sub_1CCA073C4(&v44, 1684628597, 0xE400000000000000, v21);
    v22 = v43;
    swift_bridgeObjectRelease();
  }
  else
  {
    v46 = 0u;
    v47 = 0u;
    v42 = sub_1CCAF7714();
    sub_1CC9E4F4C((uint64_t)&v46);
    sub_1CCB092F8(1684628597, 0xE400000000000000, &v44);
    sub_1CC9E4F4C((uint64_t)&v44);
    v22 = v42;
  }
  v45 = v9;
  *(_QWORD *)&v44 = v22;
  swift_beginAccess();
  sub_1CCA06650((uint64_t)&v44, 0x6F43746E65696C63, 0xED0000747865746ELL);
  swift_endAccess();
  v23 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v24 = objc_msgSend(v23, sel_processName);

  v25 = sub_1CCB63988();
  v27 = v26;

  *((_QWORD *)&v47 + 1) = v15;
  *(_QWORD *)&v46 = v25;
  *((_QWORD *)&v46 + 1) = v27;
  v28 = sub_1CCAF7714();
  sub_1CCA0799C(&v46, &v44);
  v29 = swift_isUniquelyReferenced_nonNull_native();
  v43 = v28;
  sub_1CCA073C4(&v44, 0x656372756F73, 0xE600000000000000, v29);
  v30 = v43;
  swift_bridgeObjectRelease();
  v45 = v9;
  *(_QWORD *)&v44 = v30;
  swift_beginAccess();
  sub_1CCA06650((uint64_t)&v44, 0x6F43746E65696C63, 0xED0000747865746ELL);
  swift_endAccess();
  v31 = sub_1CCAF8A00();
  *((_QWORD *)&v47 + 1) = MEMORY[0x1E0DEB418];
  *(_QWORD *)&v46 = v31;
  v32 = sub_1CCAF7714();
  sub_1CCA0799C(&v46, &v44);
  v33 = swift_isUniquelyReferenced_nonNull_native();
  v43 = v32;
  sub_1CCA073C4(&v44, 0x74536B636F6C6E75, 0xEB00000000657461, v33);
  v34 = v43;
  swift_bridgeObjectRelease();
  v45 = v9;
  *(_QWORD *)&v44 = v34;
  swift_beginAccess();
  sub_1CCA06650((uint64_t)&v44, 0x6F43746E65696C63, 0xED0000747865746ELL);
  swift_endAccess();
  v35 = *(_QWORD *)(v1 + qword_1ED8AA4D0 + 8);
  if (v35)
  {
    v36 = *(_QWORD *)(v1 + qword_1ED8AA4D0);
    *((_QWORD *)&v47 + 1) = v15;
    *(_QWORD *)&v46 = v36;
    *((_QWORD *)&v46 + 1) = v35;
    swift_bridgeObjectRetain();
    v37 = sub_1CCAF7714();
    sub_1CCA0799C(&v46, &v44);
    v38 = swift_isUniquelyReferenced_nonNull_native();
    v43 = v37;
    sub_1CCA073C4(&v44, 0x6B6F545350416176, 0xEA00000000006E65, v38);
    v39 = v43;
    swift_bridgeObjectRelease();
    v45 = v9;
    *(_QWORD *)&v44 = v39;
    swift_beginAccess();
    sub_1CCA06650((uint64_t)&v44, 0x6F43746E65696C63, 0xED0000747865746ELL);
    swift_endAccess();

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v41);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v41);

  }
}

void sub_1CCAF87F4()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CCAF8820()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCAF8874()
{
  sub_1CCB636A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCAF88E8()
{
  return type metadata accessor for FMIPSiriBaseRequest();
}

uint64_t sub_1CCAF88F0()
{
  return sub_1CCAF7578();
}

uint64_t sub_1CCAF8910()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CCAF895C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;

  v3 = (_QWORD *)(*v1 + qword_1ED8AA4C0);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1CCAF89B0())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1CCAF8A00()
{
  int v0;
  uint64_t result;

  v0 = MKBGetDeviceLockState();
  result = 5;
  switch(v0)
  {
    case 0:
      result = 3;
      break;
    case 1:
      if (MKBDeviceUnlockedSinceBoot())
        result = 2;
      else
        result = 1;
      break;
    case 2:
      result = 4;
      break;
    case 3:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1CCAF8A78()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1CCAF8A9C()
{
  uint64_t v0;

  return sub_1CCAF8170(*(void **)(v0 + 16), (SEL *)&selRef_productType);
}

uint64_t sub_1CCAF8ABC()
{
  uint64_t v0;

  return sub_1CCAF8170(*(void **)(v0 + 16), (SEL *)&selRef_osVersion);
}

uint64_t sub_1CCAF8ADC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCAF8B04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t dispatch thunk of FMIPAnyProductInformation.init(beacon:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of FMIPAnyProductInformation.vendorIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of FMIPAnyProductInformation.productIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of FMIPAnyProductInformation.modelName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of FMIPAnyProductInformation.manufacturerName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of FMIPAnyProductInformation.appBundleIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of FMIPAnyProductInformation.antennaPower.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

id sub_1CCAF8B6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v15;

  v2 = sub_1CCB635B0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78]();
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCAF8C94(a1);
  v6 = *(double *)a1;
  v7 = *(double *)(a1 + 8);
  if (*(_BYTE *)(a1 + 24))
    v8 = 0.0;
  else
    v8 = *(double *)(a1 + 16);
  if (*(_BYTE *)(a1 + 40))
    v9 = 0.0;
  else
    v9 = *(double *)(a1 + 32);
  if (*(_BYTE *)(a1 + 56))
    v10 = 0.0;
  else
    v10 = *(double *)(a1 + 48);
  v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_1CCB635A4();
  v12 = (void *)sub_1CCB63538();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v13 = objc_msgSend(v11, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_, v12, v6, v7, v8, v9, v10);

  return v13;
}

uint64_t sub_1CCAF8C94(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for FMDemoLocation()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FMDemoLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FMDemoLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FMDemoLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMDemoLocation(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 72);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FMDemoLocation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 72) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMDemoLocation()
{
  return &type metadata for FMDemoLocation;
}

uint64_t sub_1CCAF8EE4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCAF8F18 + 4 * byte_1CCB6F7E8[a1]))(0x656475746974616CLL, 0xE800000000000000);
}

uint64_t sub_1CCAF8F18()
{
  return 0x64757469676E6F6CLL;
}

uint64_t sub_1CCAF8F34(uint64_t a1)
{
  return a1 + 2805;
}

unint64_t sub_1CCAF8F3C()
{
  return 0xD000000000000012;
}

unint64_t sub_1CCAF8F5C()
{
  return 0xD000000000000010;
}

uint64_t sub_1CCAF8F78()
{
  return 0x6C6562616CLL;
}

uint64_t sub_1CCAF8F8C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = sub_1CCA14E90(&qword_1EF9E41A0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCAF96C0();
  sub_1CCB643CC();
  v8[15] = 0;
  sub_1CCB641F8();
  if (!v1)
  {
    v8[14] = 1;
    sub_1CCB641F8();
    v8[13] = 2;
    sub_1CCB641C8();
    v8[12] = 3;
    sub_1CCB641C8();
    v8[11] = 4;
    sub_1CCB641C8();
    v8[10] = 5;
    sub_1CCB641BC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1CCAF914C()
{
  unsigned __int8 *v0;

  return sub_1CCAF8EE4(*v0);
}

uint64_t sub_1CCAF9154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCAF9224(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCAF9178()
{
  sub_1CCAF96C0();
  return sub_1CCB643D8();
}

uint64_t sub_1CCAF91A0()
{
  sub_1CCAF96C0();
  return sub_1CCB643E4();
}

__n128 sub_1CCAF91C8@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  sub_1CCAF947C(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1CCAF9210(_QWORD *a1)
{
  return sub_1CCAF8F8C(a1);
}

uint64_t sub_1CCAF9224(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656475746974616CLL && a2 == 0xE800000000000000;
  if (v2 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6564757469746C61 && a2 == 0xE800000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001CCB77B50 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001CCB77BC0 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1CCAF947C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v5 = sub_1CCA14E90(&qword_1EF9E4190);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCAF96C0();
  sub_1CCB643B4();
  if (v2)
    return sub_1CCA01CA0((uint64_t)a1);
  v34 = 0;
  sub_1CCB64168();
  v10 = v9;
  v33 = 1;
  sub_1CCB64168();
  v12 = v11;
  v32 = 2;
  v13 = sub_1CCB64138();
  v15 = v14;
  v31 = 3;
  v16 = sub_1CCB64138();
  v27 = v17;
  v28 = v16;
  v30 = 4;
  v18 = sub_1CCB64138();
  HIDWORD(v25) = v19;
  v26 = v18;
  v29 = 5;
  v20 = sub_1CCB64120();
  v21 = v8;
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v21, v5);
  result = sub_1CCA01CA0((uint64_t)a1);
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 16) = v13;
  *(_BYTE *)(a2 + 24) = v15 & 1;
  *(_QWORD *)(a2 + 32) = v28;
  *(_BYTE *)(a2 + 40) = v27 & 1;
  *(_QWORD *)(a2 + 48) = v26;
  *(_BYTE *)(a2 + 56) = BYTE4(v25) & 1;
  *(_QWORD *)(a2 + 64) = v20;
  *(_QWORD *)(a2 + 72) = v23;
  return result;
}

unint64_t sub_1CCAF96C0()
{
  unint64_t result;

  result = qword_1EF9E4198;
  if (!qword_1EF9E4198)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6F924, &type metadata for FMDemoLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E4198);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMDemoLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CCAF9750 + 4 * byte_1CCB6F7F3[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CCAF9784 + 4 * byte_1CCB6F7EE[v4]))();
}

uint64_t sub_1CCAF9784(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF978C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAF9794);
  return result;
}

uint64_t sub_1CCAF97A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAF97A8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CCAF97AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAF97B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMDemoLocation.CodingKeys()
{
  return &type metadata for FMDemoLocation.CodingKeys;
}

unint64_t sub_1CCAF97D4()
{
  unint64_t result;

  result = qword_1EF9E41A8;
  if (!qword_1EF9E41A8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6F8FC, &type metadata for FMDemoLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E41A8);
  }
  return result;
}

unint64_t sub_1CCAF981C()
{
  unint64_t result;

  result = qword_1EF9E41B0;
  if (!qword_1EF9E41B0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6F86C, &type metadata for FMDemoLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E41B0);
  }
  return result;
}

unint64_t sub_1CCAF9864()
{
  unint64_t result;

  result = qword_1EF9E41B8;
  if (!qword_1EF9E41B8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6F894, &type metadata for FMDemoLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E41B8);
  }
  return result;
}

FMIPCore::FMIPAnalyticsActionType_optional __swiftcall FMIPAnalyticsActionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  FMIPCore::FMIPAnalyticsActionType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  v5 = 6;
  if (v3 < 6)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t FMIPAnalyticsActionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCAF9934 + 4 * byte_1CCB6F980[*v0]))(0x6E756F5379616C70, 0xE900000000000064);
}

uint64_t sub_1CCAF9934()
{
  return 0x6F69746365726964;
}

uint64_t sub_1CCAF9950()
{
  return 0x74696D69786F7270;
}

uint64_t sub_1CCAF9978()
{
  return 0x6F69736963657270;
}

uint64_t sub_1CCAF999C()
{
  return 0x6F4C656C62616E65;
}

unint64_t sub_1CCAF99C0()
{
  return 0xD000000000000015;
}

void sub_1CCAF99DC(char *a1)
{
  sub_1CCB1C0F0(*a1);
}

void sub_1CCAF99E8()
{
  char *v0;

  sub_1CCB02A14(*v0);
}

void sub_1CCAF99F0(uint64_t a1)
{
  char *v1;

  sub_1CCB593FC(a1, *v1);
}

void sub_1CCAF99F8(uint64_t a1)
{
  char *v1;

  sub_1CCB03638(a1, *v1);
}

FMIPCore::FMIPAnalyticsActionType_optional sub_1CCAF9A00(Swift::String *a1)
{
  return FMIPAnalyticsActionType.init(rawValue:)(*a1);
}

uint64_t sub_1CCAF9A0C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCAF9A40 + 4 * byte_1CCB6F986[*v0]))();
}

void sub_1CCAF9A40(_QWORD *a1@<X8>)
{
  *a1 = 0x6F69746365726964;
  a1[1] = 0xEA0000000000736ELL;
}

void sub_1CCAF9A60(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "proximityFind");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_1CCAF9A8C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "precisionFind");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_1CCAF9AB4(char *a1@<X8>)
{
  strcpy(a1, "enableLostMode");
  a1[15] = -18;
}

void sub_1CCAF9ADC(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x80000001CCB77D50;
}

FMIPCore::FMIPAnalyticsOwnerContext_optional __swiftcall FMIPAnalyticsOwnerContext.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  FMIPCore::FMIPAnalyticsOwnerContext_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t FMIPAnalyticsOwnerContext.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCAF9B80 + 4 * byte_1CCB6F98C[*v0]))(0x72656E776FLL, 0xE500000000000000);
}

uint64_t sub_1CCAF9B80()
{
  return 0x646572616873;
}

uint64_t sub_1CCAF9B94()
{
  return 29813;
}

uint64_t sub_1CCAF9BA0()
{
  return 1701736302;
}

void sub_1CCAF9BB0(char *a1)
{
  sub_1CCB1BC5C(*a1);
}

void sub_1CCAF9BBC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCAF9C04()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCAF9C5C()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCAF9C94()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCAF9CD8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCAF9D1C()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPAnalyticsOwnerContext_optional sub_1CCAF9D74(Swift::String *a1)
{
  return FMIPAnalyticsOwnerContext.init(rawValue:)(*a1);
}

uint64_t sub_1CCAF9D80()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCAF9DAC + 4 * byte_1CCB6F99C[*v0]))();
}

void sub_1CCAF9DAC(_QWORD *a1@<X8>)
{
  *a1 = 0x646572616873;
  a1[1] = 0xE600000000000000;
}

void sub_1CCAF9DC4(_QWORD *a1@<X8>)
{
  *a1 = 29813;
  a1[1] = 0xE200000000000000;
}

void sub_1CCAF9DD4(_QWORD *a1@<X8>)
{
  *a1 = 1701736302;
  a1[1] = 0xE400000000000000;
}

uint64_t FMIPAnalyticsProductType.init(device:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  char *v22;

  v4 = type metadata accessor for FMIPItem();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FMIPDevice();
  sub_1CCAF9FE8(a1 + *(int *)(v11 + 128), (uint64_t)v10);
  v12 = type metadata accessor for FMIPItemGroup();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v10, 1, v12) == 1)
  {
    sub_1CC9C3E84((uint64_t)v10, &qword_1ED8A8C30);
    goto LABEL_9;
  }
  v13 = *((_QWORD *)v10 + 5);
  swift_bridgeObjectRetain();
  sub_1CCA0BF30((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    v18 = *(unsigned __int8 *)(a1 + *(int *)(v11 + 132));
    result = sub_1CCA0BF30(a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (v18)
      v20 = 2;
    else
      v20 = 3;
    goto LABEL_12;
  }
  v22 = a2;
  v15 = v13 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v16 = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1CCA0BEEC(v15, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v17 = v7[*(int *)(v4 + 84)];
    sub_1CCA0BF30((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if (v17 == 1)
      break;
    v15 += v16;
    if (!--v14)
    {
      swift_bridgeObjectRelease_n();
      a2 = v22;
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease_n();
  result = sub_1CCA0BF30(a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v20 = 1;
  a2 = v22;
LABEL_12:
  *a2 = v20;
  return result;
}

uint64_t sub_1CCAF9FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A8C30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t FMIPAnalyticsProductType.init(item:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;

  v4 = type metadata accessor for FMIPProductType();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FMIPItem();
  if ((*(_BYTE *)(a1 + *(int *)(v7 + 84)) & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    sub_1CCA0BEEC(a1 + *(int *)(v7 + 96), (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
    if (swift_getEnumCaseMultiPayload() >= 2)
    {
      sub_1CC9C3E84((uint64_t)v6, &qword_1EF9DFB90);
      v8 = 2;
    }
    else
    {
      sub_1CCA0BF30((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
      v8 = 0;
    }
  }
  result = sub_1CCA0BF30(a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  *a2 = v8;
  return result;
}

uint64_t FMIPAnalyticsProductType.init(unknownItem:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;

  v4 = type metadata accessor for FMIPProductType();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FMIPUnknownItem();
  if ((*(_BYTE *)(a1 + *(int *)(v7 + 64)) & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    sub_1CCA0BEEC(a1 + *(int *)(v7 + 36), (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
    if (swift_getEnumCaseMultiPayload() >= 2)
    {
      sub_1CC9C3E84((uint64_t)v6, &qword_1EF9DFB90);
      v8 = 3;
    }
    else
    {
      sub_1CCA0BF30((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
      v8 = 0;
    }
  }
  result = sub_1CCA0BF30(a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  *a2 = v8;
  return result;
}

FMIPCore::FMIPAnalyticsProductType_optional __swiftcall FMIPAnalyticsProductType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  FMIPCore::FMIPAnalyticsProductType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t FMIPAnalyticsProductType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCAFA28C + 4 * byte_1CCB6F9A0[*v0]))(0x676154726961, 0xE600000000000000);
}

uint64_t sub_1CCAFA28C()
{
  return 0x73646F50726961;
}

uint64_t sub_1CCAFA2A4()
{
  return 0x726F737365636361;
}

uint64_t sub_1CCAFA2C0()
{
  return 0x656369766564;
}

uint64_t sub_1CCAFA2D0()
{
  return 0x6E6F73726570;
}

void sub_1CCAFA2E0(char *a1)
{
  sub_1CCB1BEEC(*a1);
}

void sub_1CCAFA2EC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCAFA334()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCAFA3B0()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCAFA3E8()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCAFA450()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCAFA494()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPAnalyticsProductType_optional sub_1CCAFA510(Swift::String *a1)
{
  return FMIPAnalyticsProductType.init(rawValue:)(*a1);
}

uint64_t sub_1CCAFA51C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCAFA548 + 4 * byte_1CCB6F9B4[*v0]))();
}

void sub_1CCAFA548(_QWORD *a1@<X8>)
{
  *a1 = 0x73646F50726961;
  a1[1] = 0xE700000000000000;
}

void sub_1CCAFA564(_QWORD *a1@<X8>)
{
  *a1 = 0x726F737365636361;
  a1[1] = 0xE900000000000079;
}

void sub_1CCAFA584(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x656369766564;
  a1[1] = v1;
}

void sub_1CCAFA598(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6E6F73726570;
  a1[1] = v1;
}

void FMIPActionEvent.type.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *FMIPActionEvent.type.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*FMIPActionEvent.type.modify())()
{
  return nullsub_1;
}

void FMIPActionEvent.ownerContext.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *FMIPActionEvent.ownerContext.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*FMIPActionEvent.ownerContext.modify())()
{
  return nullsub_1;
}

void FMIPActionEvent.productType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

_BYTE *FMIPActionEvent.productType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = *result;
  return result;
}

uint64_t (*FMIPActionEvent.productType.modify())()
{
  return nullsub_1;
}

FMIPCore::FMIPActionEvent __swiftcall FMIPActionEvent.init(type:ownerContext:productType:)(FMIPCore::FMIPAnalyticsActionType type, FMIPCore::FMIPAnalyticsOwnerContext ownerContext, FMIPCore::FMIPAnalyticsProductType productType)
{
  _BYTE *v3;
  char v4;
  char v5;
  FMIPCore::FMIPActionEvent result;

  v4 = *(_BYTE *)ownerContext;
  v5 = *(_BYTE *)productType;
  *v3 = *(_BYTE *)type;
  v3[1] = v4;
  v3[2] = v5;
  result.type = type;
  return result;
}

Swift::Void __swiftcall FMIPManager.enqueue(actionEvent:)(FMIPCore::FMIPActionEvent actionEvent)
{
  char v1;
  __int16 v2;
  char v3;

  v1 = *(_BYTE *)(*(_QWORD *)&actionEvent.type + 2);
  v2 = **(_WORD **)&actionEvent.type;
  v3 = v1;
  _s8FMIPCore13FMIPAnalyticsV25sendItemDeviceActionEvent5eventyAA010FMIPActionG0V_tFZ_0((char *)&v2);
}

void sub_1CCAFA674(char a1)
{
  sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
  __asm { BR              X10 }
}

uint64_t sub_1CCAFA6F8()
{
  __int16 v0;
  id v1;
  void *v2;
  id v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;

  v1 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v2 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithString_, v2);

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v3, 0x79546E6F69746361, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  v5 = swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCAFA844 + 4 * byte_1CCB6F9BF[HIBYTE(v0)]))(v5);
}

uint64_t sub_1CCAFA844()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  id v4;
  void *v5;
  id v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;

  v3 = BYTE2(v0);
  v4 = objc_allocWithZone(*(Class *)(v1 + 2368));
  v5 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, *(SEL *)(v2 + 3912), v5);

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v6, 0x6E6F4372656E776FLL, 0xEC00000074786574, isUniquelyReferenced_nonNull_native);
  v8 = swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCAFA920 + 4 * byte_1CCB6F9C3[v3]))(v8);
}

void sub_1CCAFA920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  char isUniquelyReferenced_nonNull_native;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[18];

  v3 = objc_allocWithZone(*(Class *)(v1 + 2368));
  v4 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, *(SEL *)(v2 + 3912), v4);

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v5, 0xD000000000000011, 0x80000001CCB7CD90, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v7 = (void *)sub_1CCB63964();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v0;
  v10[4] = sub_1CCA3C490;
  v10[5] = v8;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = sub_1CCA7EAC8;
  v10[3] = &unk_1E88FC440;
  v9 = _Block_copy(v10);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v9);
  swift_bridgeObjectRelease();

}

uint64_t _s8FMIPCore13FMIPAnalyticsV25sendItemDeviceActionEvent5eventyAA010FMIPActionG0V_tFZ_0(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  char v12;
  _BYTE *v13;
  void *v14;
  _QWORD v16[2];
  _QWORD aBlock[6];

  v2 = sub_1CCB63820();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63868();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = a1[1];
  v12 = a1[2];
  if (qword_1EF9DF018 != -1)
    swift_once();
  v13 = (_BYTE *)swift_allocObject();
  v13[16] = v10;
  v13[17] = v11;
  v13[18] = v12;
  aBlock[4] = sub_1CCAFB10C;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88FC3F0;
  v14 = _Block_copy(aBlock);
  sub_1CCB63844();
  v16[1] = MEMORY[0x1E0DEE9D8];
  sub_1CCA248D4();
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA1FC64();
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v9, v5, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

unint64_t sub_1CCAFACA4()
{
  unint64_t result;

  result = qword_1EF9E41C0;
  if (!qword_1EF9E41C0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPAnalyticsActionType, &type metadata for FMIPAnalyticsActionType);
    atomic_store(result, (unint64_t *)&qword_1EF9E41C0);
  }
  return result;
}

unint64_t sub_1CCAFACEC()
{
  unint64_t result;

  result = qword_1EF9E41C8;
  if (!qword_1EF9E41C8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPAnalyticsOwnerContext, &type metadata for FMIPAnalyticsOwnerContext);
    atomic_store(result, (unint64_t *)&qword_1EF9E41C8);
  }
  return result;
}

unint64_t sub_1CCAFAD34()
{
  unint64_t result;

  result = qword_1EF9E41D0;
  if (!qword_1EF9E41D0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPAnalyticsProductType, &type metadata for FMIPAnalyticsProductType);
    atomic_store(result, (unint64_t *)&qword_1EF9E41D0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPAnalyticsActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CCAFADC4 + 4 * byte_1CCB6F9CD[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CCAFADF8 + 4 * byte_1CCB6F9C8[v4]))();
}

uint64_t sub_1CCAFADF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAFAE00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAFAE08);
  return result;
}

uint64_t sub_1CCAFAE14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAFAE1CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CCAFAE20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAFAE28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPAnalyticsActionType()
{
  return &type metadata for FMIPAnalyticsActionType;
}

uint64_t storeEnumTagSinglePayload for FMIPAnalyticsOwnerContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CCAFAE90 + 4 * byte_1CCB6F9D7[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CCAFAEC4 + 4 * byte_1CCB6F9D2[v4]))();
}

uint64_t sub_1CCAFAEC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAFAECC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAFAED4);
  return result;
}

uint64_t sub_1CCAFAEE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAFAEE8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CCAFAEEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAFAEF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPAnalyticsOwnerContext()
{
  return &type metadata for FMIPAnalyticsOwnerContext;
}

uint64_t storeEnumTagSinglePayload for FMIPAnalyticsProductType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CCAFAF5C + 4 * byte_1CCB6F9E1[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CCAFAF90 + 4 * byte_1CCB6F9DC[v4]))();
}

uint64_t sub_1CCAFAF90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAFAF98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAFAFA0);
  return result;
}

uint64_t sub_1CCAFAFAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAFAFB4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CCAFAFB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAFAFC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPAnalyticsProductType()
{
  return &type metadata for FMIPAnalyticsProductType;
}

uint64_t initializeBufferWithCopyOfBuffer for FMIPActionEvent(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPActionEvent(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFD)
  {
    if ((a2 + 33554179) >> 24)
    {
      v2 = a1[3];
      if (a1[3])
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776963;
    }
    else
    {
      v2 = *(unsigned __int16 *)(a1 + 3);
      if (*(_WORD *)(a1 + 3))
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776963;
    }
  }
  v4 = a1[1];
  v5 = v4 >= 4;
  v6 = v4 - 4;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPActionEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554179) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFC)
    v3 = 0;
  if (a2 > 0xFC)
  {
    *(_WORD *)result = a2 - 253;
    *(_BYTE *)(result + 2) = (a2 - 253) >> 16;
    if (v3)
    {
      v4 = ((a2 - 253) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 1) = a2 + 3;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPActionEvent()
{
  return &type metadata for FMIPActionEvent;
}

uint64_t sub_1CCAFB0FC()
{
  return swift_deallocObject();
}

void sub_1CCAFB10C()
{
  uint64_t v0;

  sub_1CCAFA674(*(_WORD *)(v0 + 16));
}

uint64_t sub_1CCAFB11C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t FMIPUnknownItemProductMetadata.init(metadata:disableURL:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v6 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v9 = objc_msgSend(a1, sel_title);
    if (v9)
    {
      v10 = v9;
      v11 = sub_1CCB63988();
      v13 = v12;

    }
    else
    {
      v11 = 0;
      v13 = 0;
    }
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v13;
    v15 = objc_msgSend(a1, sel_moreDescription);
    v16 = sub_1CCB63B38();

    *(_QWORD *)(a3 + 16) = v16;
    objc_msgSend(a1, sel_percentageX);
    *(_QWORD *)(a3 + 24) = v17;
    *(_BYTE *)(a3 + 32) = 0;
    objc_msgSend(a1, sel_percentageY);
    *(_QWORD *)(a3 + 40) = v18;
    *(_BYTE *)(a3 + 48) = 0;
    v19 = objc_msgSend(a1, sel_image);
    sub_1CCB6346C();

    v20 = sub_1CCB63490();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v8, 0, 1, v20);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 1;
    *(_QWORD *)(a3 + 40) = 0;
    *(_BYTE *)(a3 + 48) = 1;
    v14 = sub_1CCB63490();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 1, 1, v14);
  }
  v21 = type metadata accessor for FMIPUnknownItemProductMetadata();
  sub_1CCA24AA4((uint64_t)v8, a3 + *(int *)(v21 + 32));
  sub_1CCA24A5C(a2, a3 + *(int *)(v21 + 36));
  v22 = FMIPUnknownItemProductMetadata.debugDescription.getter();
  v24 = v23;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v25 = sub_1CCB637FC();
  sub_1CCA16C20(v25, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v26 = sub_1CCB637D8();
  v27 = sub_1CCB63D18();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    v32 = v29;
    *(_DWORD *)v28 = 136315138;
    swift_bridgeObjectRetain();
    v31 = sub_1CCA0CB60(v22, v24, &v32);
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CC9BF000, v26, v27, "FMIPUnknownItemUTMetadata: initialized %s", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v29, -1, -1);
    MEMORY[0x1D17B214C](v28, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return sub_1CC9C3E84(a2, &qword_1ED8A8EE8);
}

uint64_t FMIPUnknownItemProductMetadata.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v13 = 0xE000000000000000;
  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCB63A24();
  sub_1CCB63A24();
  v4 = v0[1];
  v10 = *v0;
  v11 = v4;
  swift_bridgeObjectRetain();
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v5 = swift_bridgeObjectRetain();
  MEMORY[0x1D17B10B4](v5, MEMORY[0x1E0DEA968]);
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v6 = *((_BYTE *)v0 + 32);
  v10 = v0[3];
  LOBYTE(v11) = v6;
  sub_1CCA14E90(&qword_1EF9E41D8);
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v7 = *((_BYTE *)v0 + 48);
  v10 = v0[5];
  LOBYTE(v11) = v7;
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v8 = type metadata accessor for FMIPUnknownItemProductMetadata();
  sub_1CCA24A5C((uint64_t)v0 + *(int *)(v8 + 32), (uint64_t)v3);
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCA24A5C((uint64_t)v0 + *(int *)(v8 + 36), (uint64_t)v3);
  sub_1CCB639AC();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return v12;
}

uint64_t FMIPUnknownItemProductMetadata.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPUnknownItemProductMetadata.moreDescriptionBulletPoints.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FMIPUnknownItemProductMetadata.heatzonePercentX.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t FMIPUnknownItemProductMetadata.heatzonePercentY.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t FMIPUnknownItemProductMetadata.image.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for FMIPUnknownItemProductMetadata() + 32);
  return sub_1CCA24A5C(v3, a1);
}

uint64_t FMIPUnknownItemProductMetadata.disableURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for FMIPUnknownItemProductMetadata() + 36);
  return sub_1CCA24A5C(v3, a1);
}

uint64_t sub_1CCAFB7EC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCAFB81C + 4 * byte_1CCB6FC90[a1]))(0x656C746974, 0xE500000000000000);
}

unint64_t sub_1CCAFB81C()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_1CCAFB840()
{
  return 0xD000000000000010;
}

uint64_t sub_1CCAFB868()
{
  return 0x6567616D69;
}

uint64_t sub_1CCAFB878()
{
  return 0x55656C6261736964;
}

uint64_t sub_1CCAFB894(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCAFB8C4 + 4 * byte_1CCB6FC96[a1]))(0x656C746974, 0xE500000000000000);
}

unint64_t sub_1CCAFB8C4()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_1CCAFB8E8()
{
  return 0xD000000000000010;
}

uint64_t sub_1CCAFB910()
{
  return 0x6567616D69;
}

uint64_t sub_1CCAFB920()
{
  return 0x55656C6261736964;
}

void sub_1CCAFB93C(char *a1)
{
  sub_1CCB1ADC0(*a1);
}

void sub_1CCAFB948()
{
  char *v0;

  sub_1CCB02B38(*v0);
}

void sub_1CCAFB950(uint64_t a1)
{
  char *v1;

  sub_1CCB59210(a1, *v1);
}

void sub_1CCAFB958(uint64_t a1)
{
  char *v1;

  sub_1CCB039F4(a1, *v1);
}

uint64_t sub_1CCAFB960@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCAFDD10();
  *a1 = result;
  return result;
}

uint64_t sub_1CCAFB98C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1CCAFB7EC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1CCAFB9B4()
{
  unsigned __int8 *v0;

  return sub_1CCAFB894(*v0);
}

uint64_t sub_1CCAFB9BC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCAFDD10();
  *a1 = result;
  return result;
}

uint64_t sub_1CCAFB9E0()
{
  sub_1CCAFC728();
  return sub_1CCB643D8();
}

uint64_t sub_1CCAFBA08()
{
  sub_1CCAFC728();
  return sub_1CCB643E4();
}

uint64_t FMIPUnknownItemProductMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  char *v28;
  char *v29;
  NSObject **v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, _QWORD, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  NSObject *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  NSObject *v51;
  char *v52;
  NSObject **v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;

  v58 = a2;
  v3 = sub_1CCB63490();
  v56 = *(_QWORD *)(v3 - 8);
  v57 = v3;
  v4 = MEMORY[0x1E0C80A78](v3);
  v55 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v46 - v6;
  v8 = sub_1CCA14E90(&qword_1EF9E41E0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for FMIPUnknownItemProductMetadata();
  MEMORY[0x1E0C80A78](v12);
  v14 = (NSObject **)((char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = a1[3];
  v60 = a1;
  sub_1CCA04DDC(a1, v15);
  sub_1CCAFC728();
  v16 = v59;
  sub_1CCB643B4();
  if (!v16)
  {
    v53 = v14;
    v54 = v7;
    v59 = v9;
    v18 = v57;
    v17 = v58;
    LOBYTE(v62) = 0;
    v19 = v8;
    v51 = sub_1CCB64150();
    v21 = v20;
    sub_1CCA14E90(&qword_1EF9E13B8);
    v52 = v11;
    LOBYTE(v61) = 1;
    sub_1CCA1FAE8(&qword_1EF9E19F0, &qword_1EF9E13B8, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    sub_1CCB64180();
    v22 = v62;
    LOBYTE(v62) = 2;
    sub_1CCB64168();
    v24 = v23;
    v50 = (uint8_t *)v22;
    LOBYTE(v62) = 3;
    sub_1CCB64168();
    v26 = v25;
    LOBYTE(v62) = 4;
    v48 = sub_1CC9CAA38(&qword_1EF9E3F28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0038]);
    v49 = v19;
    sub_1CCB64180();
    LOBYTE(v62) = 5;
    v28 = v55;
    sub_1CCB64180();
    v30 = v53;
    v29 = v54;
    *v53 = v51;
    v30[1] = v21;
    v30[2] = v50;
    v30[3] = v24;
    *((_BYTE *)v30 + 32) = 0;
    v30[5] = v26;
    *((_BYTE *)v30 + 48) = 0;
    v47 = v12;
    v31 = (char *)v30 + *(int *)(v12 + 32);
    v32 = v56;
    v51 = *(NSObject **)(v56 + 16);
    ((void (*)(char *, char *, uint64_t))v51)(v31, v29, v18);
    v33 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56);
    v33(v31, 0, 1, v18);
    v34 = (char *)v30 + *(int *)(v47 + 36);
    ((void (*)(char *, char *, uint64_t))v51)(v34, v28, v18);
    v35 = (uint64_t)v30;
    v33(v34, 0, 1, v18);
    v36 = FMIPUnknownItemProductMetadata.debugDescription.getter();
    v38 = v37;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v39 = sub_1CCB637FC();
    sub_1CCA16C20(v39, (uint64_t)qword_1ED8AD7F8);
    swift_bridgeObjectRetain();
    v40 = sub_1CCB637D8();
    v41 = sub_1CCB63D18();
    v51 = v40;
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      v62 = v43;
      *(_DWORD *)v42 = 136315138;
      v50 = v42 + 4;
      swift_bridgeObjectRetain();
      v61 = sub_1CCA0CB60(v36, v38, &v62);
      v35 = (uint64_t)v53;
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      v44 = v51;
      _os_log_impl(&dword_1CC9BF000, v51, v41, "FMIPUnknownItemUTMetadata: initialized %s", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v43, -1, -1);
      MEMORY[0x1D17B214C](v42, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();

    }
    v45 = *(void (**)(char *, uint64_t))(v56 + 8);
    v45(v55, v18);
    v45(v54, v18);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v52, v49);
    sub_1CCAFC76C(v35, v17);
  }
  return sub_1CCA01CA0((uint64_t)v60);
}

uint64_t FMIPUnknownItemProductMetadata.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  __int128 v12;
  char v13;

  v3 = v1;
  v5 = sub_1CCA14E90(&qword_1EF9E41F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCAFC728();
  sub_1CCB643CC();
  v12 = *v3;
  v13 = 0;
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
  sub_1CCA1FAE8((unint64_t *)&qword_1ED8A7E78, (uint64_t *)&unk_1ED8AA328, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEE988]);
  sub_1CCB64210();
  if (!v2)
  {
    *(_QWORD *)&v12 = *((_QWORD *)v3 + 2);
    v13 = 1;
    sub_1CCA14E90(&qword_1EF9E13B8);
    sub_1CCA1FAE8(&qword_1EF9E1A10, &qword_1EF9E13B8, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1CCB64210();
    v9 = *((_BYTE *)v3 + 32);
    *(_QWORD *)&v12 = *((_QWORD *)v3 + 3);
    BYTE8(v12) = v9;
    v13 = 2;
    sub_1CCA14E90(&qword_1EF9E41D8);
    sub_1CCA1FAE8(&qword_1EF9E41F8, &qword_1EF9E41D8, MEMORY[0x1E0DEB080], MEMORY[0x1E0DEE988]);
    sub_1CCB64210();
    v10 = *((_BYTE *)v3 + 48);
    *(_QWORD *)&v12 = *((_QWORD *)v3 + 5);
    BYTE8(v12) = v10;
    v13 = 3;
    sub_1CCB64210();
    type metadata accessor for FMIPUnknownItemProductMetadata();
    LOBYTE(v12) = 4;
    sub_1CCA14E90(&qword_1ED8A8EE8);
    sub_1CCAFC7B0();
    sub_1CCB64210();
    LOBYTE(v12) = 5;
    sub_1CCB64210();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t FMIPUnknownItemProductMetadata.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  char *v18;
  char *v20;
  char *v21;
  uint64_t v22;

  v1 = v0;
  v2 = sub_1CCB63490();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v21 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1ED8A8EE8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)(v1 + 8);
  v22 = v3;
  sub_1CCB64354();
  if (v11)
  {
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
  }
  v12 = *(_QWORD *)(v1 + 16);
  sub_1CCB64348();
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain();
    v14 = v12 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_1CCB639F4();
      swift_bridgeObjectRelease();
      v14 += 16;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v1 + 32) & 1) != 0)
  {
    sub_1CCB64354();
  }
  else
  {
    sub_1CCB64354();
    sub_1CCB6436C();
  }
  v15 = v22;
  if (*(_BYTE *)(v1 + 48) == 1)
  {
    sub_1CCB64354();
  }
  else
  {
    sub_1CCB64354();
    sub_1CCB6436C();
  }
  v16 = type metadata accessor for FMIPUnknownItemProductMetadata();
  sub_1CCA24A5C(v1 + *(int *)(v16 + 32), (uint64_t)v10);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v17(v10, 1, v2) == 1)
  {
    sub_1CCB64354();
  }
  else
  {
    v18 = v21;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v21, v10, v2);
    sub_1CCB64354();
    sub_1CC9CAA38(&qword_1EF9E3F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
    sub_1CCB63940();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v2);
  }
  sub_1CCA24A5C(v1 + *(int *)(v16 + 36), (uint64_t)v8);
  if (v17(v8, 1, v2) == 1)
    return sub_1CCB64354();
  v20 = v21;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v21, v8, v2);
  sub_1CCB64354();
  sub_1CC9CAA38(&qword_1EF9E3F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0018]);
  sub_1CCB63940();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v2);
}

uint64_t FMIPUnknownItemProductMetadata.hashValue.getter()
{
  sub_1CCB6433C();
  FMIPUnknownItemProductMetadata.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCAFC684@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPUnknownItemProductMetadata.init(from:)(a1, a2);
}

uint64_t sub_1CCAFC698(_QWORD *a1)
{
  return FMIPUnknownItemProductMetadata.encode(to:)(a1);
}

uint64_t sub_1CCAFC6AC()
{
  sub_1CCB6433C();
  FMIPUnknownItemProductMetadata.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCAFC6EC()
{
  sub_1CCB6433C();
  FMIPUnknownItemProductMetadata.hash(into:)();
  return sub_1CCB64384();
}

unint64_t sub_1CCAFC728()
{
  unint64_t result;

  result = qword_1EF9E41E8;
  if (!qword_1EF9E41E8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6FF0C, &type metadata for FMIPUnknownItemProductMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E41E8);
  }
  return result;
}

uint64_t sub_1CCAFC76C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPUnknownItemProductMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1CCAFC7B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E4200;
  if (!qword_1EF9E4200)
  {
    v1 = sub_1CCA19B38(&qword_1ED8A8EE8);
    v2 = sub_1CC9CAA38(&qword_1EF9E3F18, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0010]);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E4200);
  }
  return result;
}

uint64_t _s8FMIPCore30FMIPUnknownItemProductMetadataV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  char v48;
  double v49;
  char v50;
  double v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  double v62;
  char v63;
  double v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  _QWORD *v104;

  v98 = sub_1CCB63490();
  v4 = *(_QWORD *)(v98 - 8);
  MEMORY[0x1E0C80A78](v98);
  v94 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1ED8A8EE8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v93 = (uint64_t)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v96 = (uint64_t)&v91 - v9;
  v99 = sub_1CCA14E90(&qword_1EF9E42C8);
  v10 = MEMORY[0x1E0C80A78](v99);
  v95 = (uint64_t)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v97 = (uint64_t)&v91 - v12;
  v13 = type metadata accessor for FMIPUnknownItemProductMetadata();
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v91 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v103 = (uint64_t)&v91 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v102 = (char *)&v91 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v101 = (char *)&v91 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v100 = (uint64_t)&v91 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (double *)((char *)&v91 - v29);
  v31 = MEMORY[0x1E0C80A78](v28);
  v33 = (double *)((char *)&v91 - v32);
  v34 = MEMORY[0x1E0C80A78](v31);
  v36 = (char *)&v91 - v35;
  MEMORY[0x1E0C80A78](v34);
  v39 = (char *)&v91 - v37;
  v40 = a1;
  v41 = a1[1];
  v104 = a2;
  v42 = a2[1];
  v43 = (uint64_t)a1;
  if (!v41)
  {
    if (!v42)
    {
LABEL_10:
      v91 = v38;
      v92 = v4;
      sub_1CCAFDD58((uint64_t)a1, (uint64_t)&v91 - v37);
      v45 = (uint64_t)a1;
      v46 = v104;
      sub_1CCAFDD58((uint64_t)v104, (uint64_t)v36);
      goto LABEL_11;
    }
LABEL_8:
    sub_1CCAFDD58((uint64_t)a1, (uint64_t)&v91 - v37);
    v45 = (uint64_t)a1;
    v46 = v104;
    sub_1CCAFDD58((uint64_t)v104, (uint64_t)v36);
    goto LABEL_9;
  }
  if (!v42)
    goto LABEL_8;
  if (*a1 == *v104 && v41 == v42)
    goto LABEL_10;
  v91 = v38;
  v92 = v4;
  v44 = sub_1CCB642A0();
  sub_1CCAFDD58(v43, (uint64_t)v39);
  v45 = v43;
  v46 = v104;
  sub_1CCAFDD58((uint64_t)v104, (uint64_t)v36);
  if ((v44 & 1) == 0)
  {
LABEL_9:
    sub_1CCAFDD9C((uint64_t)v39);
    sub_1CCAFDD9C((uint64_t)v36);
    sub_1CCAFDD58(v45, (uint64_t)v33);
    sub_1CCAFDD58((uint64_t)v46, (uint64_t)v30);
    v47 = v46;
LABEL_15:
    sub_1CCAFDD9C((uint64_t)v30);
    sub_1CCAFDD9C((uint64_t)v33);
    v53 = (uint64_t)v19;
    v54 = (uint64_t)v16;
    v55 = (uint64_t)v40;
    v57 = (uint64_t)v102;
    v58 = v103;
    v59 = v100;
    v56 = (uint64_t)v101;
    goto LABEL_16;
  }
LABEL_11:
  v48 = sub_1CCA1F25C(*((_QWORD **)v39 + 2), *((_QWORD **)v36 + 2));
  sub_1CCAFDD9C((uint64_t)v39);
  sub_1CCAFDD9C((uint64_t)v36);
  sub_1CCAFDD58(v45, (uint64_t)v33);
  sub_1CCAFDD58((uint64_t)v46, (uint64_t)v30);
  v47 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_15;
  v49 = v33[3];
  v50 = *((_BYTE *)v33 + 32);
  sub_1CCAFDD9C((uint64_t)v33);
  v51 = v30[3];
  v52 = *((_BYTE *)v30 + 32);
  sub_1CCAFDD9C((uint64_t)v30);
  v53 = (uint64_t)v19;
  v54 = (uint64_t)v16;
  if ((v50 & 1) != 0)
  {
    v55 = (uint64_t)v40;
    v56 = (uint64_t)v101;
    v57 = (uint64_t)v102;
    v58 = v103;
    v47 = v104;
    v59 = v100;
    if ((v52 & 1) != 0)
    {
      sub_1CCAFDD58(v55, v100);
      sub_1CCAFDD58((uint64_t)v47, v56);
      goto LABEL_26;
    }
    goto LABEL_16;
  }
  v55 = (uint64_t)v40;
  v56 = (uint64_t)v101;
  v57 = (uint64_t)v102;
  v58 = v103;
  v47 = v104;
  v59 = v100;
  if ((v52 & 1) != 0)
  {
LABEL_16:
    sub_1CCAFDD58(v55, v59);
    sub_1CCAFDD58((uint64_t)v47, v56);
LABEL_17:
    sub_1CCAFDD9C(v56);
    sub_1CCAFDD9C(v59);
    goto LABEL_18;
  }
  sub_1CCAFDD58(v55, v100);
  sub_1CCAFDD58((uint64_t)v47, v56);
  if (v49 != v51)
    goto LABEL_17;
LABEL_26:
  v62 = *(double *)(v59 + 40);
  v63 = *(_BYTE *)(v59 + 48);
  sub_1CCAFDD9C(v59);
  v64 = *(double *)(v56 + 40);
  v65 = *(_BYTE *)(v56 + 48);
  sub_1CCAFDD9C(v56);
  if ((v63 & 1) != 0)
  {
    v47 = v104;
    if ((v65 & 1) != 0)
    {
      sub_1CCAFDD58(v55, v57);
      sub_1CCAFDD58((uint64_t)v47, v58);
      goto LABEL_31;
    }
    goto LABEL_18;
  }
  v47 = v104;
  if ((v65 & 1) != 0)
  {
LABEL_18:
    sub_1CCAFDD58(v55, v57);
    sub_1CCAFDD58((uint64_t)v47, v58);
LABEL_19:
    sub_1CCAFDD9C(v58);
    sub_1CCAFDD9C(v57);
LABEL_20:
    sub_1CCAFDD58(v55, v53);
    sub_1CCAFDD58((uint64_t)v47, v54);
    goto LABEL_21;
  }
  sub_1CCAFDD58(v55, v57);
  sub_1CCAFDD58((uint64_t)v47, v58);
  if (v62 != v64)
    goto LABEL_19;
LABEL_31:
  v66 = *(int *)(v91 + 32);
  v67 = v58 + v66;
  v68 = v97;
  v69 = v97 + *(int *)(v99 + 48);
  sub_1CCA24A5C(v57 + v66, v97);
  v70 = v67;
  v71 = v68;
  sub_1CCA24A5C(v70, v69);
  v72 = v92;
  v73 = *(char **)(v92 + 48);
  v74 = v98;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v73)(v71, 1, v98) != 1)
  {
    sub_1CCA24A5C(v71, v96);
    v102 = v73;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v73)(v69, 1, v74) != 1)
    {
      v75 = v94;
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v94, v69, v74);
      sub_1CC9CAA38(&qword_1EF9E42D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
      v76 = v96;
      v77 = v57;
      v78 = v72;
      v79 = v71;
      LODWORD(v101) = sub_1CCB63958();
      v92 = v78;
      v80 = *(void (**)(char *, uint64_t))(v78 + 8);
      v80(v75, v74);
      sub_1CCAFDD9C(v103);
      sub_1CCAFDD9C(v77);
      v80((char *)v76, v74);
      sub_1CC9C3E84(v79, &qword_1ED8A8EE8);
      sub_1CCAFDD58(v55, v53);
      sub_1CCAFDD58((uint64_t)v104, v54);
      v73 = v102;
      if ((v101 & 1) != 0)
        goto LABEL_38;
LABEL_21:
      sub_1CCAFDD9C(v54);
      sub_1CCAFDD9C(v53);
      goto LABEL_22;
    }
    sub_1CCAFDD9C(v58);
    sub_1CCAFDD9C(v57);
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v96, v74);
    goto LABEL_36;
  }
  sub_1CCAFDD9C(v58);
  sub_1CCAFDD9C(v57);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v73)(v69, 1, v74) != 1)
  {
LABEL_36:
    sub_1CC9C3E84(v71, &qword_1EF9E42C8);
    v47 = v104;
    goto LABEL_20;
  }
  v92 = v72;
  sub_1CC9C3E84(v71, &qword_1ED8A8EE8);
  sub_1CCAFDD58(v55, v53);
  sub_1CCAFDD58((uint64_t)v104, v54);
LABEL_38:
  v81 = *(int *)(v91 + 36);
  v82 = v54 + v81;
  v83 = v95;
  v84 = v95 + *(int *)(v99 + 48);
  sub_1CCA24A5C(v53 + v81, v95);
  sub_1CCA24A5C(v82, v84);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v73)(v83, 1, v74) == 1)
  {
    sub_1CCAFDD9C(v54);
    sub_1CCAFDD9C(v53);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v73)(v84, 1, v74) == 1)
    {
      sub_1CC9C3E84(v83, &qword_1ED8A8EE8);
      v60 = 1;
      return v60 & 1;
    }
  }
  else
  {
    v85 = v93;
    sub_1CCA24A5C(v83, v93);
    v86 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v73)(v84, 1, v74);
    v87 = v92;
    if (v86 != 1)
    {
      v88 = v94;
      (*(void (**)(char *, uint64_t, uint64_t))(v92 + 32))(v94, v84, v74);
      sub_1CC9CAA38(&qword_1EF9E42D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
      v89 = v85;
      v60 = sub_1CCB63958();
      v90 = *(void (**)(char *, uint64_t))(v87 + 8);
      v90(v88, v74);
      sub_1CCAFDD9C(v54);
      sub_1CCAFDD9C(v53);
      v90((char *)v89, v74);
      sub_1CC9C3E84(v83, &qword_1ED8A8EE8);
      return v60 & 1;
    }
    sub_1CCAFDD9C(v54);
    sub_1CCAFDD9C(v53);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v85, v74);
  }
  sub_1CC9C3E84(v83, &qword_1EF9E42C8);
LABEL_22:
  v60 = 0;
  return v60 & 1;
}

uint64_t sub_1CCAFD0E4()
{
  return sub_1CC9CAA38(&qword_1EF9E4208, (uint64_t (*)(uint64_t))type metadata accessor for FMIPUnknownItemProductMetadata, (uint64_t)&protocol conformance descriptor for FMIPUnknownItemProductMetadata);
}

_QWORD *initializeBufferWithCopyOfBuffer for FMIPUnknownItemProductMetadata(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    v9 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v9;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    v10 = *(int *)(a3 + 32);
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    v13 = sub_1CCB63490();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      v16 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v18 = *(int *)(a3 + 36);
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    if (v15(v20, 1, v13))
    {
      v21 = sub_1CCA14E90(&qword_1ED8A8EE8);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v19, v20, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v19, 0, 1, v13);
    }
  }
  return v4;
}

uint64_t destroy for FMIPUnknownItemProductMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_1CCB63490();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + *(int *)(a2 + 36);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  return result;
}

uint64_t initializeWithCopy for FMIPUnknownItemProductMetadata(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  uint64_t v19;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v9 = *(int *)(a3 + 32);
  v10 = (void *)(a1 + v9);
  v11 = (char *)a2 + v9;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v12 = sub_1CCB63490();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14(v11, 1, v12))
  {
    v15 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v16 = *(int *)(a3 + 36);
  v17 = (void *)(a1 + v16);
  v18 = (char *)a2 + v16;
  if (v14(v18, 1, v12))
  {
    v19 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v17, v18, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  return a1;
}

uint64_t assignWithCopy for FMIPUnknownItemProductMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  int v21;
  uint64_t v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(int *)(a3 + 32);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = sub_1CCB63490();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v17 = *(int *)(a3 + 36);
  v18 = (void *)(a1 + v17);
  v19 = (void *)(a2 + v17);
  v20 = v13((void *)(a1 + v17), 1, v11);
  v21 = v13(v19, 1, v11);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v18, v19, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v18, v11);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    v22 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v18, v19, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
  return a1;
}

uint64_t initializeWithTake for FMIPUnknownItemProductMetadata(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;

  v6 = *a2;
  v7 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v8 = *(int *)(a3 + 32);
  v9 = (void *)(a1 + v8);
  v10 = (char *)a2 + v8;
  *(_OWORD *)a1 = v6;
  v11 = sub_1CCB63490();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    v14 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = *(int *)(a3 + 36);
  v16 = (void *)(a1 + v15);
  v17 = (char *)a2 + v15;
  if (v13(v17, 1, v11))
  {
    v18 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v12 + 32))(v16, v17, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for FMIPUnknownItemProductMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int v19;
  int v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = *(int *)(a3 + 32);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = sub_1CCB63490();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = *(int *)(a3 + 36);
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = v12((void *)(a1 + v16), 1, v10);
  v20 = v12(v18, 1, v10);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v17, v18, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v21 = sub_1CCA14E90(&qword_1ED8A8EE8);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v17, v18, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPUnknownItemProductMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCAFDA68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1CCA14E90(&qword_1ED8A8EE8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FMIPUnknownItemProductMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCAFDAF4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_1CCA14E90(&qword_1ED8A8EE8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPUnknownItemProductMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CCAFDBB8 + 4 * byte_1CCB6FCA1[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CCAFDBEC + 4 * byte_1CCB6FC9C[v4]))();
}

uint64_t sub_1CCAFDBEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAFDBF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCAFDBFCLL);
  return result;
}

uint64_t sub_1CCAFDC08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCAFDC10);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CCAFDC14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCAFDC1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPUnknownItemProductMetadata.CodingKeys()
{
  return &type metadata for FMIPUnknownItemProductMetadata.CodingKeys;
}

unint64_t sub_1CCAFDC3C()
{
  unint64_t result;

  result = qword_1EF9E42B0;
  if (!qword_1EF9E42B0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6FEE4, &type metadata for FMIPUnknownItemProductMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E42B0);
  }
  return result;
}

unint64_t sub_1CCAFDC84()
{
  unint64_t result;

  result = qword_1EF9E42B8;
  if (!qword_1EF9E42B8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6FE1C, &type metadata for FMIPUnknownItemProductMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E42B8);
  }
  return result;
}

unint64_t sub_1CCAFDCCC()
{
  unint64_t result;

  result = qword_1EF9E42C0;
  if (!qword_1EF9E42C0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB6FE44, &type metadata for FMIPUnknownItemProductMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E42C0);
  }
  return result;
}

uint64_t sub_1CCAFDD10()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

uint64_t sub_1CCAFDD58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPUnknownItemProductMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCAFDD9C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FMIPUnknownItemProductMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void FMIPItemUpdateType.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t updated;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = sub_1CCB63604();
  MEMORY[0x1E0C80A78](v1);
  updated = type metadata accessor for FMIPItemUpdateType(0);
  MEMORY[0x1E0C80A78](updated);
  sub_1CCAFE004(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_1CCAFDEA8 + 4 * byte_1CCB6FF60[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1CCAFDEA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = v2 + *(int *)(sub_1CCA14E90(&qword_1EF9E42D8) + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  *(_QWORD *)(v4 - 80) = 0x28206E6F6D6564;
  *(_QWORD *)(v4 - 72) = 0xE700000000000000;
  sub_1CCB635C8();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v6 = *(_QWORD *)(v4 - 80);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  v7 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  return v6;
}

uint64_t sub_1CCAFE004(uint64_t a1, uint64_t a2)
{
  uint64_t updated;

  updated = type metadata accessor for FMIPItemUpdateType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 16))(a2, a1, updated);
  return a2;
}

uint64_t FMIPItemUpdateContext.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1CCAFE004(v1 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_type, a1);
}

uint64_t FMIPItemUpdateContext.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CCAFE078(&OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_timestamp, a1);
}

uint64_t FMIPItemUpdateContext.creationTimestamp.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1CCAFE078(&OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_creationTimestamp, a1);
}

uint64_t sub_1CCAFE078@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *a1;
  v5 = sub_1CCB635B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1CCAFE0B8()
{
  sub_1CCB63568();
  sub_1CCB63A24();
  sub_1CCB63C1C();
  sub_1CCB63A24();
  FMIPItemUpdateType.description.getter();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t FMIPItemUpdateContext.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  sub_1CCA22540(v0 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_type);
  v1 = v0 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_timestamp;
  v2 = sub_1CCB635B0();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_creationTimestamp, v2);
  return v0;
}

uint64_t sub_1CCAFE1D8()
{
  sub_1CCB63568();
  sub_1CCB63A24();
  sub_1CCB63C1C();
  sub_1CCB63A24();
  FMIPItemUpdateType.description.getter();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for FMIPItemUpdateType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    v8 = sub_1CCB63604();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = *(int *)(sub_1CCA14E90(&qword_1EF9E42D8) + 48);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_1CCB635B0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for FMIPItemUpdateType(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v3 = sub_1CCB63604();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    v4 = a1 + *(int *)(sub_1CCA14E90(&qword_1EF9E42D8) + 48);
    v5 = sub_1CCB635B0();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  return result;
}

char *initializeWithCopy for FMIPItemUpdateType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_1CCB63604();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = *(int *)(sub_1CCA14E90(&qword_1EF9E42D8) + 48);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = sub_1CCB635B0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithCopy for FMIPItemUpdateType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_1CCA22540((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_1CCB63604();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = *(int *)(sub_1CCA14E90(&qword_1EF9E42D8) + 48);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = sub_1CCB635B0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

char *initializeWithTake for FMIPItemUpdateType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_1CCB63604();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = *(int *)(sub_1CCA14E90(&qword_1EF9E42D8) + 48);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = sub_1CCB635B0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for FMIPItemUpdateType(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_1CCA22540((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_1CCB63604();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = *(int *)(sub_1CCA14E90(&qword_1EF9E42D8) + 48);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = sub_1CCB635B0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1CCAFE704()
{
  return type metadata accessor for FMIPItemUpdateContext(0);
}

uint64_t method lookup function for FMIPItemUpdateContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPItemUpdateContext.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t sub_1CCAFE724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  void (*v17)(char *, char *, uint64_t);
  uint64_t v19;

  v8 = sub_1CCA14E90(&qword_1ED8A7130);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB635B0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCAFE004(a1, a3 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_type);
  v15 = a4 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_timestamp;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v16(a3 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_timestamp, v15, v11);
  sub_1CCADEC80(a2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    v16((uint64_t)v14, v15, v11);
    sub_1CCAD80B8(a2);
    sub_1CCA22540(a1);
    sub_1CCAD80B8((uint64_t)v10);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_creationTimestamp, v14, v11);
  }
  else
  {
    sub_1CCAD80B8(a2);
    sub_1CCA22540(a1);
    v17 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v17(v14, v10, v11);
    v17((char *)(a3 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_creationTimestamp), v14, v11);
  }
  return a3;
}

uint64_t assignWithCopy for FMIPBeaconRefreshingPolicy(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for FMIPBeaconRefreshingPolicy(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPBeaconRefreshingPolicy(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPBeaconRefreshingPolicy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPBeaconRefreshingPolicy()
{
  return &type metadata for FMIPBeaconRefreshingPolicy;
}

uint64_t sub_1CCAFEA10(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int64_t v24;
  __int128 v25[4];

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v23 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(result + 56);
  v24 = (unint64_t)(v5 + 63) >> 6;
  v8 = a2 + 56;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_26;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v11 >= v24)
      return 1;
    v12 = *(_QWORD *)(v23 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v24)
        return 1;
      v12 = *(_QWORD *)(v23 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v24)
          return 1;
        v12 = *(_QWORD *)(v23 + 8 * v4);
        if (!v12)
        {
          v4 = v11 + 3;
          if (v11 + 3 >= v24)
            return 1;
          v12 = *(_QWORD *)(v23 + 8 * v4);
          if (!v12)
            break;
        }
      }
    }
LABEL_25:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_26:
    v14 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10);
    sub_1CCB6433C();
    swift_bridgeObjectRetain();
    sub_1CCA79D54(v25, v14);
    v15 = sub_1CCB64384();
    v16 = -1 << *(_BYTE *)(a2 + 32);
    v17 = v15 & ~v16;
    if (((*(_QWORD *)(v8 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_33;
    v18 = swift_bridgeObjectRetain();
    v19 = sub_1CCA0B01C(v18, v14);
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      v20 = ~v16;
      while (1)
      {
        v17 = (v17 + 1) & v20;
        if (((*(_QWORD *)(v8 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
          break;
        v21 = swift_bridgeObjectRetain();
        v22 = sub_1CCA0B01C(v21, v14);
        swift_bridgeObjectRelease();
        if ((v22 & 1) != 0)
          goto LABEL_7;
      }
LABEL_33:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    result = swift_bridgeObjectRelease();
  }
  v13 = v11 + 4;
  if (v13 >= v24)
    return 1;
  v12 = *(_QWORD *)(v23 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_25;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v24)
      return 1;
    v12 = *(_QWORD *)(v23 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_25;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1CCAFEC90(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t (*v22)(void);
  uint64_t (*v23)(uint64_t);
  unint64_t i;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t (*v32)(uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  BOOL v40;
  char *v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58[10];

  v4 = (int *)type metadata accessor for FMIPBeaconShare(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v44 - v9;
  result = MEMORY[0x1E0C80A78](v8);
  v14 = (char *)&v44 - v13;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v15 = 0;
  v16 = a1 + 56;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & *(_QWORD *)(a1 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  v56 = a2 + 56;
  v21 = type metadata accessor for FMIPBeaconShare;
  v22 = MEMORY[0x1E0CB0998];
  v48 = v12;
  v49 = a1;
  v46 = a1 + 56;
  v47 = v14;
  v45 = v20;
  if (!v19)
    goto LABEL_8;
LABEL_7:
  v23 = (uint64_t (*)(uint64_t))v22;
  v50 = (v19 - 1) & v19;
  v51 = v15;
  for (i = __clz(__rbit64(v19)) | (v15 << 6); ; i = __clz(__rbit64(v26)) + (v27 << 6))
  {
    v29 = *(_QWORD *)(v12 + 72);
    v30 = *(_QWORD *)(a1 + 48) + v29 * i;
    v31 = v21;
    sub_1CCA0BEEC(v30, (uint64_t)v14, v21);
    sub_1CC9FED60((uint64_t)v14, (uint64_t)v10, v31);
    sub_1CCB6433C();
    sub_1CCB63604();
    sub_1CC9CAA38(&qword_1ED8A7140, v23, MEMORY[0x1E0CB09C8]);
    v32 = v31;
    sub_1CCB63940();
    v55 = &v10[v4[5]];
    sub_1CCB63940();
    v33 = &v10[v4[6]];
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
    v54 = &v10[v4[7]];
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
    v53 = v4[8];
    v57 = *(_QWORD *)&v10[v53];
    FMIPBeaconShareState.hash(into:)((uint64_t)v58);
    v34 = &v10[v4[9]];
    sub_1CCB635B0();
    sub_1CC9CAA38(&qword_1EF9DF088, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
    v52 = v34;
    sub_1CCB63940();
    v35 = sub_1CCB64384();
    v36 = -1 << *(_BYTE *)(a2 + 32);
    v37 = v35 & ~v36;
    if (((*(_QWORD *)(v56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
    {
LABEL_44:
      sub_1CCA0BF30((uint64_t)v10, type metadata accessor for FMIPBeaconShare);
      return 0;
    }
    v38 = ~v36;
    while (1)
    {
      sub_1CCA0BEEC(*(_QWORD *)(a2 + 48) + v37 * v29, (uint64_t)v7, v32);
      if ((sub_1CCB635E0() & 1) != 0 && (sub_1CCB635E0() & 1) != 0)
      {
        v39 = &v7[v4[6]];
        v40 = *(_QWORD *)v39 == *(_QWORD *)v33 && *((_QWORD *)v39 + 1) == *((_QWORD *)v33 + 1);
        if (v40 || (sub_1CCB642A0() & 1) != 0)
        {
          v41 = &v7[v4[7]];
          v42 = *(_QWORD *)v41 == *(_QWORD *)v54 && *((_QWORD *)v41 + 1) == *((_QWORD *)v54 + 1);
          if (v42 || (sub_1CCB642A0() & 1) != 0)
          {
            v43 = *(_QWORD *)&v7[v4[8]];
            v57 = *(_QWORD *)&v10[v53];
            v58[0] = v43;
            if ((static FMIPBeaconShareState.== infix(_:_:)(v58, &v57) & 1) != 0 && (sub_1CCB63574() & 1) != 0)
              break;
          }
        }
      }
      sub_1CCA0BF30((uint64_t)v7, v32);
      v37 = (v37 + 1) & v38;
      if (((*(_QWORD *)(v56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
        goto LABEL_44;
    }
    sub_1CCA0BF30((uint64_t)v7, v32);
    result = sub_1CCA0BF30((uint64_t)v10, v32);
    v21 = v32;
    v12 = v48;
    a1 = v49;
    v16 = v46;
    v14 = v47;
    v20 = v45;
    v22 = MEMORY[0x1E0CB0998];
    v19 = v50;
    v15 = v51;
    if (v50)
      goto LABEL_7;
LABEL_8:
    v25 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
    if (v25 >= v20)
      return 1;
    v26 = *(_QWORD *)(v16 + 8 * v25);
    v27 = v15 + 1;
    if (!v26)
    {
      v27 = v15 + 2;
      if (v15 + 2 >= v20)
        return 1;
      v26 = *(_QWORD *)(v16 + 8 * v27);
      if (!v26)
      {
        v27 = v15 + 3;
        if (v15 + 3 >= v20)
          return 1;
        v26 = *(_QWORD *)(v16 + 8 * v27);
        if (!v26)
        {
          v27 = v15 + 4;
          if (v15 + 4 >= v20)
            return 1;
          v26 = *(_QWORD *)(v16 + 8 * v27);
          if (!v26)
            break;
        }
      }
    }
LABEL_23:
    v23 = (uint64_t (*)(uint64_t))v22;
    v50 = (v26 - 1) & v26;
    v51 = v27;
  }
  v28 = v15 + 5;
  if (v15 + 5 >= v20)
    return 1;
  v26 = *(_QWORD *)(v16 + 8 * v28);
  if (v26)
  {
    v27 = v15 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v20)
      return 1;
    v26 = *(_QWORD *)(v16 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_23;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_1CCAFF17C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v11;

  if (a1 != a2)
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
    v2 = *(_QWORD *)(a1 + 56);
    v3 = 1 << *(_BYTE *)(a1 + 32);
    if (v3 < 64)
      v4 = ~(-1 << v3);
    else
      v4 = -1;
    v11 = (unint64_t)(v3 + 63) >> 6;
    if ((v4 & v2) != 0)
    {
      v5 = __clz(__rbit64(v4 & v2));
      goto LABEL_23;
    }
    if ((unint64_t)(v3 + 63) >> 6 > 1)
    {
      v6 = *(_QWORD *)(a1 + 64);
      v7 = 1;
      if (v6)
        goto LABEL_22;
      v7 = 2;
      if (v11 > 2)
      {
        v6 = *(_QWORD *)(a1 + 72);
        if (v6)
          goto LABEL_22;
        v7 = 3;
        if (v11 > 3)
        {
          v6 = *(_QWORD *)(a1 + 80);
          if (v6)
            goto LABEL_22;
          v7 = 4;
          if (v11 > 4)
          {
            v6 = *(_QWORD *)(a1 + 88);
            if (!v6)
            {
              v8 = 5;
              if (v11 > 5)
              {
                v6 = *(_QWORD *)(a1 + 96);
                if (v6)
                {
                  v7 = 5;
                  goto LABEL_22;
                }
                while (1)
                {
                  v7 = v8 + 1;
                  if (__OFADD__(v8, 1))
                  {
                    __break(1u);
                    JUMPOUT(0x1CCAFF548);
                  }
                  if (v7 >= v11)
                    break;
                  v6 = *(_QWORD *)(a1 + 56 + 8 * v7);
                  ++v8;
                  if (v6)
                    goto LABEL_22;
                }
              }
              return 1;
            }
LABEL_22:
            v5 = __clz(__rbit64(v6)) + (v7 << 6);
LABEL_23:
            v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v5);
            sub_1CCB6433C();
            __asm { BR              X8 }
          }
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1CCAFF584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t i;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;

  v4 = type metadata accessor for FMIPItem();
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v33 - v9;
  result = MEMORY[0x1E0C80A78](v8);
  v14 = (char *)&v33 - v13;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v15 = 0;
  v16 = *(_QWORD *)(a1 + 56);
  v36 = a1 + 56;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v16;
  v37 = (unint64_t)(v17 + 63) >> 6;
  v20 = a2 + 56;
  v34 = v12;
  v35 = a1;
  if (!v19)
    goto LABEL_9;
LABEL_7:
  v38 = (v19 - 1) & v19;
  v39 = v15;
  for (i = __clz(__rbit64(v19)) | (v15 << 6); ; i = __clz(__rbit64(v23)) + (v24 << 6))
  {
    v26 = *(_QWORD *)(v12 + 72);
    sub_1CCA0BEEC(*(_QWORD *)(a1 + 48) + v26 * i, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v27 = v14;
    sub_1CC9FED60((uint64_t)v14, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCB6433C();
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
    v28 = sub_1CCB64384();
    v29 = -1 << *(_BYTE *)(a2 + 32);
    v30 = v28 & ~v29;
    if (((*(_QWORD *)(v20 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
    {
LABEL_29:
      sub_1CCA0BF30((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      return 0;
    }
    v31 = ~v29;
    while (1)
    {
      sub_1CCA0BEEC(*(_QWORD *)(a2 + 48) + v30 * v26, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v32 = _s8FMIPCore8FMIPItemV2eeoiySbAC_ACtFZ_0((uint64_t)v7, (uint64_t)v10);
      sub_1CCA0BF30((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if ((v32 & 1) != 0)
        break;
      v30 = (v30 + 1) & v31;
      if (((*(_QWORD *)(v20 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
        goto LABEL_29;
    }
    result = sub_1CCA0BF30((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v12 = v34;
    a1 = v35;
    v14 = v27;
    v19 = v38;
    v15 = v39;
    if (v38)
      goto LABEL_7;
LABEL_9:
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v22 >= v37)
      return 1;
    v23 = *(_QWORD *)(v36 + 8 * v22);
    v24 = v15 + 1;
    if (!v23)
    {
      v24 = v15 + 2;
      if (v15 + 2 >= v37)
        return 1;
      v23 = *(_QWORD *)(v36 + 8 * v24);
      if (!v23)
      {
        v24 = v15 + 3;
        if (v15 + 3 >= v37)
          return 1;
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          v24 = v15 + 4;
          if (v15 + 4 >= v37)
            return 1;
          v23 = *(_QWORD *)(v36 + 8 * v24);
          if (!v23)
            break;
        }
      }
    }
LABEL_24:
    v38 = (v23 - 1) & v23;
    v39 = v24;
  }
  v25 = v15 + 5;
  if (v15 + 5 >= v37)
    return 1;
  v23 = *(_QWORD *)(v36 + 8 * v25);
  if (v23)
  {
    v24 = v15 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v37)
      return 1;
    v23 = *(_QWORD *)(v36 + 8 * v24);
    ++v25;
    if (v23)
      goto LABEL_24;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1CCAFF8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v11;

  if (a1 != a2)
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
    v2 = *(_QWORD *)(a1 + 56);
    v3 = 1 << *(_BYTE *)(a1 + 32);
    if (v3 < 64)
      v4 = ~(-1 << v3);
    else
      v4 = -1;
    v11 = (unint64_t)(v3 + 63) >> 6;
    if ((v4 & v2) != 0)
    {
      v5 = __clz(__rbit64(v4 & v2));
      goto LABEL_23;
    }
    if ((unint64_t)(v3 + 63) >> 6 > 1)
    {
      v6 = *(_QWORD *)(a1 + 64);
      v7 = 1;
      if (v6)
        goto LABEL_22;
      v7 = 2;
      if (v11 > 2)
      {
        v6 = *(_QWORD *)(a1 + 72);
        if (v6)
          goto LABEL_22;
        v7 = 3;
        if (v11 > 3)
        {
          v6 = *(_QWORD *)(a1 + 80);
          if (v6)
            goto LABEL_22;
          v7 = 4;
          if (v11 > 4)
          {
            v6 = *(_QWORD *)(a1 + 88);
            if (!v6)
            {
              v8 = 5;
              if (v11 > 5)
              {
                v6 = *(_QWORD *)(a1 + 96);
                if (v6)
                {
                  v7 = 5;
                  goto LABEL_22;
                }
                while (1)
                {
                  v7 = v8 + 1;
                  if (__OFADD__(v8, 1))
                  {
                    __break(1u);
                    JUMPOUT(0x1CCAFFCD0);
                  }
                  if (v7 >= v11)
                    break;
                  v6 = *(_QWORD *)(a1 + 56 + 8 * v7);
                  ++v8;
                  if (v6)
                    goto LABEL_22;
                }
              }
              return 1;
            }
LABEL_22:
            v5 = __clz(__rbit64(v6)) + (v7 << 6);
LABEL_23:
            v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v5);
            sub_1CCB6433C();
            __asm { BR              X8 }
          }
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1CCAFFD0C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 24);
  v3 = *(unsigned __int8 *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  if ((sub_1CCA0B01C(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) == 0)
    return 0;
  sub_1CCA0B3F0(v5, v4);
  if ((v6 & 1) != 0)
    return v2 ^ v3 ^ 1u;
  else
    return 0;
}

uint64_t sub_1CCAFFD78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_1CCB24148(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

BOOL sub_1CCAFFDB4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  _BOOL8 result;

  result = 0;
  if (*a1 == *a2 && *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1))
  {
    v2 = *((_QWORD *)a1 + 3);
    v3 = a1[32];
    v4 = *((_QWORD *)a2 + 3);
    v5 = a2[32];
    if ((sub_1CCA0B01C(*((_QWORD *)a1 + 2), *((_QWORD *)a2 + 2)) & 1) != 0)
    {
      sub_1CCA0B3F0(v2, v4);
      if ((v6 & 1) != 0 && ((v3 ^ v5) & 1) == 0)
        return 1;
    }
  }
  return result;
}

uint64_t sub_1CCAFFED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  int64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  char *v75;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v4 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_1CCA14E90(&qword_1EF9E4410);
  MEMORY[0x1E0C80A78](v74);
  v77 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for FMIPDeviceConnectedState(0);
  v79 = *(_QWORD *)(v72 - 8);
  v8 = MEMORY[0x1E0C80A78](v72);
  v81 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v61 - v10;
  v80 = sub_1CCB63604();
  v12 = *(_QWORD *)(v80 - 8);
  v13 = MEMORY[0x1E0C80A78](v80);
  v66 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v75 = (char *)&v61 - v15;
  v16 = sub_1CCA14E90(&qword_1EF9E28B8);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v61 - v21;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v73 = 0;
  v67 = a1;
  v25 = *(_QWORD *)(a1 + 64);
  v24 = a1 + 64;
  v23 = v25;
  v26 = 1 << *(_BYTE *)(v24 - 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & v23;
  v63 = v24;
  v64 = (unint64_t)(v26 + 63) >> 6;
  v62 = v64 - 1;
  v70 = v12;
  v71 = a2;
  v68 = (char *)&v61 - v21;
  v69 = v19;
  v65 = v6;
  while (1)
  {
    if (v28)
    {
      v78 = (v28 - 1) & v28;
      v33 = __clz(__rbit64(v28)) | (v73 << 6);
LABEL_12:
      v34 = v67;
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v19, *(_QWORD *)(v67 + 48) + *(_QWORD *)(v12 + 72) * v33, v80);
      v35 = *(_QWORD *)(v34 + 56) + *(_QWORD *)(v79 + 72) * v33;
      v36 = sub_1CCA14E90(&qword_1EF9E28B0);
      sub_1CCA0BEEC(v35, (uint64_t)&v19[*(int *)(v36 + 48)], type metadata accessor for FMIPDeviceConnectedState);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v19, 0, 1, v36);
      goto LABEL_34;
    }
    v37 = v73 + 1;
    if (__OFADD__(v73, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v37 < v64)
    {
      v38 = *(_QWORD *)(v63 + 8 * v37);
      if (v38)
        goto LABEL_16;
      v39 = v73 + 2;
      ++v73;
      if (v37 + 1 < v64)
      {
        v38 = *(_QWORD *)(v63 + 8 * v39);
        if (v38)
          goto LABEL_19;
        v73 = v37 + 1;
        if (v37 + 2 < v64)
        {
          v38 = *(_QWORD *)(v63 + 8 * (v37 + 2));
          if (v38)
          {
            v37 += 2;
            goto LABEL_16;
          }
          v73 = v37 + 2;
          if (v37 + 3 < v64)
          {
            v38 = *(_QWORD *)(v63 + 8 * (v37 + 3));
            if (v38)
            {
              v37 += 3;
              goto LABEL_16;
            }
            v39 = v37 + 4;
            v73 = v37 + 3;
            if (v37 + 4 < v64)
              break;
          }
        }
      }
    }
LABEL_33:
    v40 = sub_1CCA14E90(&qword_1EF9E28B0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v19, 1, 1, v40);
    v78 = 0;
LABEL_34:
    sub_1CC9C3EC0((uint64_t)v19, (uint64_t)v22, &qword_1EF9E28B8);
    v41 = sub_1CCA14E90(&qword_1EF9E28B0);
    v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v22, 1, v41);
    v76 = v42 == 1;
    if (v42 == 1)
      return v76;
    v43 = (uint64_t)&v22[*(int *)(v41 + 48)];
    v44 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v45 = (uint64_t)v11;
    v46 = (uint64_t)v75;
    v47 = v80;
    v44(v75, v22, v80);
    sub_1CC9FED60(v43, v45, type metadata accessor for FMIPDeviceConnectedState);
    v48 = sub_1CCAC8D64(v46);
    LOBYTE(v43) = v49;
    v50 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v51 = v46;
    v11 = (char *)v45;
    v50(v51, v47);
    if ((v43 & 1) == 0)
      goto LABEL_44;
    v52 = *(_QWORD *)(a2 + 56) + *(_QWORD *)(v79 + 72) * v48;
    v53 = v81;
    sub_1CCA0BEEC(v52, v81, type metadata accessor for FMIPDeviceConnectedState);
    v54 = v77;
    v55 = v77 + *(int *)(v74 + 48);
    sub_1CCB00BEC(v53, v77);
    sub_1CCB00BEC(v45, v55);
    v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    v57 = v47;
    if (v56(v54, 1, v47) == 1)
    {
      if (v56(v55, 1, v47) != 1)
        goto LABEL_42;
      sub_1CC9C3E84(v77, &qword_1ED8A8EF8);
      v11 = (char *)v45;
    }
    else
    {
      v58 = (uint64_t)v65;
      sub_1CCB00BEC(v54, (uint64_t)v65);
      if (v56(v55, 1, v57) == 1)
      {
        v50(v58, v57);
LABEL_42:
        sub_1CC9C3E84(v77, &qword_1EF9E4410);
        v11 = (char *)v45;
LABEL_43:
        sub_1CCA0BF30(v81, type metadata accessor for FMIPDeviceConnectedState);
LABEL_44:
        sub_1CCA0BF30((uint64_t)v11, type metadata accessor for FMIPDeviceConnectedState);
        return 0;
      }
      v59 = v66;
      v44(v66, (char *)v55, v57);
      sub_1CC9CAA38(&qword_1EF9E1E28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v60 = sub_1CCB63958();
      v50((uint64_t)v59, v57);
      v50(v58, v57);
      sub_1CC9C3E84(v54, &qword_1ED8A8EF8);
      v11 = (char *)v45;
      if ((v60 & 1) == 0)
        goto LABEL_43;
    }
    v29 = *(int *)(v72 + 20);
    v30 = *(unsigned __int8 *)(v81 + v29);
    v31 = v11[v29];
    sub_1CCA0BF30(v81, type metadata accessor for FMIPDeviceConnectedState);
    result = sub_1CCA0BF30((uint64_t)v11, type metadata accessor for FMIPDeviceConnectedState);
    v32 = v30 == v31;
    v12 = v70;
    a2 = v71;
    v22 = v68;
    v19 = v69;
    v28 = v78;
    if (!v32)
      return v76;
  }
  v38 = *(_QWORD *)(v63 + 8 * v39);
  if (v38)
  {
LABEL_19:
    v37 = v39;
LABEL_16:
    v78 = (v38 - 1) & v38;
    v33 = __clz(__rbit64(v38)) + (v37 << 6);
    v73 = v37;
    goto LABEL_12;
  }
  while (1)
  {
    v37 = v39 + 1;
    if (__OFADD__(v39, 1))
      break;
    if (v37 >= v64)
    {
      v73 = v62;
      goto LABEL_33;
    }
    v38 = *(_QWORD *)(v63 + 8 * v37);
    ++v39;
    if (v38)
      goto LABEL_16;
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_1CCB0056C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  int64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  int64_t v55;
  _BOOL4 v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v53 = (uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v48 - v8;
  v10 = sub_1CCB63604();
  v58 = *(_QWORD *)(v10 - 8);
  v59 = v10;
  MEMORY[0x1E0C80A78](v10);
  v54 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCA14E90(&qword_1EF9E43C8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v48 - v17;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v55 = 0;
  v51 = a1;
  v21 = *(_QWORD *)(a1 + 64);
  v20 = a1 + 64;
  v19 = v21;
  v22 = 1 << *(_BYTE *)(v20 - 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v19;
  v49 = v20;
  v50 = (unint64_t)(v22 + 63) >> 6;
  v48 = v50 - 1;
  v52 = v15;
  while (1)
  {
    if (v24)
    {
      v25 = __clz(__rbit64(v24));
      v26 = (v24 - 1) & v24;
      v27 = v25 | (v55 << 6);
LABEL_8:
      v28 = v51;
      (*(void (**)(char *, unint64_t, uint64_t))(v58 + 16))(v15, *(_QWORD *)(v51 + 48) + *(_QWORD *)(v58 + 72) * v27, v59);
      v29 = *(_QWORD *)(v28 + 56) + *(_QWORD *)(v5 + 72) * v27;
      v30 = sub_1CCA14E90(&qword_1EF9E43D0);
      sub_1CCA0BEEC(v29, (uint64_t)&v15[*(int *)(v30 + 48)], (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v15, 0, 1, v30);
      goto LABEL_30;
    }
    v31 = v55 + 1;
    if (__OFADD__(v55, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v31 < v50)
    {
      v32 = *(_QWORD *)(v49 + 8 * v31);
      if (v32)
        goto LABEL_12;
      v33 = v55 + 2;
      ++v55;
      if (v31 + 1 < v50)
      {
        v32 = *(_QWORD *)(v49 + 8 * v33);
        if (v32)
          goto LABEL_15;
        v55 = v31 + 1;
        if (v31 + 2 < v50)
        {
          v32 = *(_QWORD *)(v49 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_12;
          }
          v55 = v31 + 2;
          if (v31 + 3 < v50)
          {
            v32 = *(_QWORD *)(v49 + 8 * (v31 + 3));
            if (v32)
            {
              v31 += 3;
              goto LABEL_12;
            }
            v33 = v31 + 4;
            v55 = v31 + 3;
            if (v31 + 4 < v50)
              break;
          }
        }
      }
    }
LABEL_29:
    v34 = sub_1CCA14E90(&qword_1EF9E43D0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v15, 1, 1, v34);
    v26 = 0;
LABEL_30:
    sub_1CC9C3EC0((uint64_t)v15, (uint64_t)v18, &qword_1EF9E43C8);
    v35 = sub_1CCA14E90(&qword_1EF9E43D0);
    v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v18, 1, v35);
    v56 = v36 == 1;
    if (v36 == 1)
      return v56;
    v57 = v26;
    v37 = (uint64_t)&v18[*(int *)(v35 + 48)];
    v39 = v58;
    v38 = v59;
    v40 = (uint64_t)v54;
    v41 = v18;
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v54, v18, v59);
    sub_1CC9FED60(v37, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
    v42 = sub_1CCAC8D64(v40);
    v43 = (uint64_t)v9;
    v45 = v44;
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v38);
    if ((v45 & 1) == 0)
    {
      sub_1CCA0BF30(v43, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
      return 0;
    }
    v46 = v53;
    sub_1CCA0BEEC(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v5 + 72) * v42, v53, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
    v47 = _s8FMIPCore26FMIPDeviceLostModeMetadataV2eeoiySbAC_ACtFZ_0(v46, v43);
    sub_1CCA0BF30(v46, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
    result = sub_1CCA0BF30(v43, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
    v9 = (char *)v43;
    v15 = v52;
    v18 = v41;
    v24 = v57;
    if ((v47 & 1) == 0)
      return v56;
  }
  v32 = *(_QWORD *)(v49 + 8 * v33);
  if (v32)
  {
LABEL_15:
    v31 = v33;
LABEL_12:
    v26 = (v32 - 1) & v32;
    v27 = __clz(__rbit64(v32)) + (v31 << 6);
    v55 = v31;
    goto LABEL_8;
  }
  while (1)
  {
    v31 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v31 >= v50)
    {
      v55 = v48;
      goto LABEL_29;
    }
    v32 = *(_QWORD *)(v49 + 8 * v31);
    ++v33;
    if (v32)
      goto LABEL_12;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1CCB009F8(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  unint64_t v20;
  char v21;
  char v22;
  id v23;
  char v24;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    v19 = v18;
    v20 = sub_1CCA074F4(v16, v17);
    v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {

      return;
    }
    sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A7F30);
    v23 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v20);
    v24 = sub_1CCB63DF0();

    if ((v24 & 1) == 0)
      return;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_1CCB00BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A8EF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t assignWithCopy for FMIPBeaconRefreshFilter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for FMIPBeaconRefreshFilter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t storeEnumTagSinglePayload for FMIPBeaconRefreshingContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCB00D38 + 4 * byte_1CCB70065[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCB00D6C + 4 * byte_1CCB70060[v4]))();
}

uint64_t sub_1CCB00D6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB00D74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB00D7CLL);
  return result;
}

uint64_t sub_1CCB00D88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB00D90);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCB00D94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB00D9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t sub_1CCB00DAC()
{
  unint64_t result;

  result = qword_1EF9E4418;
  if (!qword_1EF9E4418)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7010C, &type metadata for FMIPBeaconRefreshingContext);
    atomic_store(result, (unint64_t *)&qword_1EF9E4418);
  }
  return result;
}

unint64_t sub_1CCB00DF4()
{
  unint64_t result;

  result = qword_1EF9E4420;
  if (!qword_1EF9E4420)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB701EC, &type metadata for FMIPBeaconTypeRefreshFilter);
    atomic_store(result, (unint64_t *)&qword_1EF9E4420);
  }
  return result;
}

unint64_t sub_1CCB00E3C()
{
  unint64_t result;

  result = qword_1EF9E4428;
  if (!qword_1EF9E4428)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB701BC, &type metadata for FMIPBeaconTypeRefreshFilter);
    atomic_store(result, (unint64_t *)&qword_1EF9E4428);
  }
  return result;
}

unint64_t sub_1CCB00E84()
{
  unint64_t result;

  result = qword_1EF9E4430;
  if (!qword_1EF9E4430)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB70214, &type metadata for FMIPBeaconTypeRefreshFilter);
    atomic_store(result, (unint64_t *)&qword_1EF9E4430);
  }
  return result;
}

unint64_t sub_1CCB00ECC()
{
  unint64_t result;

  result = qword_1EF9E4438;
  if (!qword_1EF9E4438)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7024C, &type metadata for FMIPBeaconTypeRefreshFilter);
    atomic_store(result, (unint64_t *)&qword_1EF9E4438);
  }
  return result;
}

uint64_t sub_1CCB00F10(uint64_t a1, uint64_t a2)
{
  return sub_1CCB01288(a1, a2, (SEL *)&selRef_name);
}

void sub_1CCB00F1C(uint64_t a1, uint64_t a2)
{
  sub_1CCB01154(a1, a2, (SEL *)&selRef_identifier);
}

id sub_1CCB00F2C()
{
  id *v0;

  return objc_msgSend(*v0, sel_type);
}

id sub_1CCB00F50()
{
  id *v0;

  return objc_msgSend(*v0, sel_batteryLevel);
}

void sub_1CCB00F60(uint64_t a1, uint64_t a2)
{
  sub_1CCB01154(a1, a2, (SEL *)&selRef_productUUID);
}

uint64_t sub_1CCB00F6C(uint64_t a1, uint64_t a2)
{
  return sub_1CCB01288(a1, a2, (SEL *)&selRef_model);
}

id sub_1CCB00F78()
{
  id *v0;

  return objc_msgSend(*v0, sel_partIdentifier);
}

id sub_1CCB00F88()
{
  id *v0;

  return objc_msgSend(*v0, sel_lostModeInfo);
}

id sub_1CCB00FB0()
{
  id *v0;

  return objc_msgSend(*v0, sel_owner);
}

id sub_1CCB00FD4()
{
  id *v0;

  return objc_msgSend(*v0, sel_role);
}

uint64_t sub_1CCB00FFC(uint64_t a1, uint64_t a2)
{
  return sub_1CCB01288(a1, a2, (SEL *)&selRef_systemVersion);
}

id sub_1CCB0100C()
{
  id *v0;

  return objc_msgSend(*v0, sel_accessoryProductInfo);
}

id sub_1CCB01030()
{
  id *v0;

  return objc_msgSend(*v0, sel_vendorId);
}

id sub_1CCB01040()
{
  id *v0;

  return objc_msgSend(*v0, sel_productId);
}

id sub_1CCB01050()
{
  id *v0;

  return objc_msgSend(*v0, sel_isAppleAudioAccessory);
}

id sub_1CCB01070()
{
  id *v0;

  return objc_msgSend(*v0, sel_isZeus);
}

id sub_1CCB01090()
{
  id *v0;

  return objc_msgSend(*v0, sel_canBeLeashedByHost);
}

id sub_1CCB010B0()
{
  id *v0;

  return objc_msgSend(*v0, sel_connected);
}

uint64_t sub_1CCB010D0@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, sel_groupIdentifier);
  if (v3)
  {
    v4 = v3;
    sub_1CCB635EC();

    v5 = sub_1CCB63604();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = sub_1CCB63604();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_1CCB01154(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v4;

  v4 = objc_msgSend(*v3, *a3);
  sub_1CCB635EC();

}

uint64_t sub_1CCB0119C()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_taskInformation);
  type metadata accessor for SPBeaconTaskName(0);
  sub_1CC9C30A8(0, &qword_1EF9E1E58);
  sub_1CCB013F8();
  v2 = sub_1CCB638E0();

  return v2;
}

uint64_t sub_1CCB01224()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_serialNumber);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_1CCB63988();

  return v3;
}

uint64_t sub_1CCB01288(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v4;
  uint64_t v5;

  v4 = objc_msgSend(*v3, *a3);
  v5 = sub_1CCB63988();

  return v5;
}

uint64_t sub_1CCB012D8()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_safeLocations);
  sub_1CC9C30A8(0, &qword_1EF9E26D8);
  sub_1CCA1F9B4();
  v2 = sub_1CCB63C40();

  return v2;
}

uint64_t dispatch thunk of FMIPApplicationBeacon.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.groupIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.batteryLevel.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.productUUID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.model.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.partIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.lostModeInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.taskInformation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.owner.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.role.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.serialNumber.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.systemVersion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.safeLocations.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.accessoryProductInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.vendorId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.productId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.isAppleAudioAccessory.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.isZeus.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.canBeLeashedByHost.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of FMIPApplicationBeacon.connected.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

unint64_t sub_1CCB013F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF9DF3D8;
  if (!qword_1EF9DF3D8)
  {
    type metadata accessor for SPBeaconTaskName(255);
    result = MEMORY[0x1D17B2068](&unk_1CCB65E60, v1);
    atomic_store(result, (unint64_t *)&qword_1EF9DF3D8);
  }
  return result;
}

_QWORD *FMIPAddMultipleSafeLocationsItemAction.__allocating_init(beaconUUIDs:location:originalIdentifier:)(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  v8 = (_QWORD *)swift_allocObject();
  memcpy(v8 + 2, a2, 0x160uLL);
  v8[47] = a4;
  v8[48] = a1;
  v8[46] = a3;
  return v8;
}

uint64_t _s8FMIPCore41FMIPAssignMultipleSafeLocationsItemActionC11beaconUUIDs8locationACSaySSG_AA16FMIPSafeLocationVtcfC_0(uint64_t a1, const void *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  memcpy((void *)(v4 + 16), a2, 0x160uLL);
  *(_QWORD *)(v4 + 368) = a1;
  return v4;
}

uint64_t FMIPSafeLocationAction.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t FMIPSafeLocationAction.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t FMIPSafeLocationAction.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t FMIPSafeLocationAction.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void FMIPAssignSafeLocationToAllSupportedBeaconsAction.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPAssignSafeLocationToAllSupportedBeaconsAction.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t FMIPAssignMultipleSafeLocationsItemAction.beaconUUIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FMIPAssignMultipleSafeLocationsItemAction.init(beaconUUIDs:location:)(uint64_t a1, const void *a2)
{
  uint64_t v2;

  memcpy((void *)(v2 + 16), a2, 0x160uLL);
  *(_QWORD *)(v2 + 368) = a1;
  return v2;
}

void FMIPAssignMultipleSafeLocationsItemAction.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPAssignMultipleSafeLocationsItemAction.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPAssignSafeLocationItemAction.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPAssignSafeLocationItemAction.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t FMIPAddMultipleSafeLocationsItemAction.originalIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 368);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAddMultipleSafeLocationsItemAction.beaconUUIDs.getter()
{
  return swift_bridgeObjectRetain();
}

_QWORD *FMIPAddMultipleSafeLocationsItemAction.init(beaconUUIDs:location:originalIdentifier:)(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  memcpy(v4 + 2, a2, 0x160uLL);
  v4[47] = a4;
  v4[48] = a1;
  v4[46] = a3;
  return v4;
}

void FMIPAddMultipleSafeLocationsItemAction.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPAddMultipleSafeLocationsItemAction.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CCB01798()
{
  uint64_t v0;
  _BYTE v2[352];

  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  sub_1CCA31E98((uint64_t)v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t FMIPAddMultipleSafeLocationsItemAction.deinit()
{
  uint64_t v0;
  _BYTE v2[352];

  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  sub_1CCA31E98((uint64_t)v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FMIPAddMultipleSafeLocationsItemAction.__deallocating_deinit()
{
  uint64_t v0;
  _BYTE v2[352];

  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  sub_1CCA31E98((uint64_t)v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t FMIPAddSafeLocationItemAction.location.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _BYTE v5[352];

  v3 = (const void *)(v1 + 16);
  memcpy(v5, v3, sizeof(v5));
  memcpy(a1, v3, 0x160uLL);
  return sub_1CCA31D3C((uint64_t)v5);
}

uint64_t FMIPAddSafeLocationItemAction.beaconUUID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 368);
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *FMIPAddSafeLocationItemAction.init(beaconUUID:location:)(uint64_t a1, uint64_t a2, void *__src)
{
  _QWORD *v3;

  memcpy(v3 + 2, __src, 0x160uLL);
  v3[46] = a1;
  v3[47] = a2;
  return v3;
}

void FMIPAddSafeLocationItemAction.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPAddSafeLocationItemAction.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPRemoveMultipleSafeLocationItemsAction.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPRemoveMultipleSafeLocationItemsAction.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CCB01A04()
{
  uint64_t v0;
  _BYTE v2[352];

  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  sub_1CCA31E98((uint64_t)v2);
  return swift_bridgeObjectRelease();
}

uint64_t _s8FMIPCore41FMIPAssignMultipleSafeLocationsItemActionCfd_0()
{
  uint64_t v0;
  _BYTE v2[352];

  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  sub_1CCA31E98((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _s8FMIPCore41FMIPAssignMultipleSafeLocationsItemActionCfD_0()
{
  uint64_t v0;
  _BYTE v2[352];

  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  sub_1CCA31E98((uint64_t)v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t FMIPEditSafeLocationItemAction.__allocating_init(safeLocation:)(const void *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  memcpy((void *)(v2 + 16), a1, 0x160uLL);
  return v2;
}

uint64_t FMIPEditSafeLocationItemAction.init(safeLocation:)(void *__src)
{
  uint64_t v1;

  memcpy((void *)(v1 + 16), __src, 0x160uLL);
  return v1;
}

void FMIPEditSafeLocationItemAction.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPEditSafeLocationItemAction.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CCB01BA0()
{
  uint64_t v0;
  _BYTE v2[352];

  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  return sub_1CCA31E98((uint64_t)v2);
}

uint64_t FMIPEditSafeLocationItemAction.deinit()
{
  uint64_t v0;
  _BYTE v2[352];

  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  sub_1CCA31E98((uint64_t)v2);
  return v0;
}

void FMIPAddSafeLocationToAllSupportedBeaconsAction.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPAddSafeLocationToAllSupportedBeaconsAction.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t _s8FMIPCore49FMIPAssignSafeLocationToAllSupportedBeaconsActionCfD_0()
{
  uint64_t v0;
  _BYTE v2[352];

  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  sub_1CCA31E98((uint64_t)v2);
  return swift_deallocClassInstance();
}

_QWORD *_s8FMIPCore32FMIPAssignSafeLocationItemActionC10beaconUUID8locationACSS_AA08FMIPSafeD0VtcfC_0(uint64_t a1, uint64_t a2, const void *a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)swift_allocObject();
  memcpy(v6 + 2, a3, 0x160uLL);
  v6[46] = a1;
  v6[47] = a2;
  return v6;
}

void FMIPRemoveSafeLocationItemAction.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPRemoveSafeLocationItemAction.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CCB01D70()
{
  uint64_t v0;
  _BYTE v2[352];

  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  sub_1CCA31E98((uint64_t)v2);
  return swift_bridgeObjectRelease();
}

uint64_t _s8FMIPCore32FMIPAssignSafeLocationItemActionCfd_0()
{
  uint64_t v0;
  _BYTE v2[352];

  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  sub_1CCA31E98((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _s8FMIPCore32FMIPAssignSafeLocationItemActionCfD_0()
{
  uint64_t v0;
  _BYTE v2[352];

  memcpy(v2, (const void *)(v0 + 16), sizeof(v2));
  sub_1CCA31E98((uint64_t)v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FMIPSafeLocationAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMIPSafeLocationAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPSafeLocationAction.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t type metadata accessor for FMIPAssignSafeLocationToAllSupportedBeaconsAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMIPAssignSafeLocationToAllSupportedBeaconsAction()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for FMIPAssignMultipleSafeLocationsItemAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMIPAssignMultipleSafeLocationsItemAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPAssignMultipleSafeLocationsItemAction.__allocating_init(beaconUUIDs:location:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for FMIPAssignSafeLocationItemAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMIPAssignSafeLocationItemAction()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for FMIPAddMultipleSafeLocationsItemAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMIPAddMultipleSafeLocationsItemAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPAddMultipleSafeLocationsItemAction.__allocating_init(beaconUUIDs:location:originalIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata accessor for FMIPAddSafeLocationItemAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMIPAddSafeLocationItemAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPAddSafeLocationItemAction.__allocating_init(beaconUUID:location:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for FMIPRemoveMultipleSafeLocationItemsAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMIPRemoveMultipleSafeLocationItemsAction()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for FMIPEditSafeLocationItemAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMIPEditSafeLocationItemAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPEditSafeLocationItemAction.__allocating_init(safeLocation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata accessor for FMIPAddSafeLocationToAllSupportedBeaconsAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMIPAddSafeLocationToAllSupportedBeaconsAction()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for FMIPRemoveSafeLocationItemAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMIPRemoveSafeLocationItemAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPManagerSiriDelegate.fmipManager(_:didInitializeDevices:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of FMIPManagerSiriDelegate.fmipManager(_:didRecieve:familyMembers:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of FMIPManagerSiriDelegate.fmipManager(_:didInitializeItems:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t FMIPFeatures.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

FMIPCore::FMIPFeatures __swiftcall FMIPFeatures.init(rawValue:)(FMIPCore::FMIPFeatures rawValue)
{
  FMIPCore::FMIPFeatures *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static FMIPFeatures.isKeypadEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static FMIPFeatures.isLastKnownLocationEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static FMIPFeatures.isLockAndMessageEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static FMIPFeatures.isLocateEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static FMIPFeatures.isLostModeEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static FMIPFeatures.isPinRequiredForWipe.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static FMIPFeatures.isRemoveEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static FMIPFeatures.isPlaySoundEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

void static FMIPFeatures.isSavePreferenceEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

void static FMIPFeatures.isTracksUpdateSwitchEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 512;
}

void static FMIPFeatures.isWipeEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 1024;
}

void static FMIPFeatures.isWipeAndMessageEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 2048;
}

void static FMIPFeatures.isExclusiveRemoveEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 4096;
}

void static FMIPFeatures.isLostModeWithLocationServiceEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x2000;
}

void static FMIPFeatures.isMultiChannelSoundEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x4000;
}

void static FMIPFeatures.isBluetoothRequired.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x8000;
}

void static FMIPFeatures.isStopSoundSupported.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x10000;
}

void static FMIPFeatures.isEraseAfterLockSupported.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x20000;
}

void static FMIPFeatures.isLeashingSupported.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x40000;
}

void static FMIPFeatures.isNotifyWhenDetachedSupported.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x80000;
}

void static FMIPFeatures.isShowContactDetailsSupported.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x100000;
}

void static FMIPFeatures.isRemoveUIv2Supported.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x200000;
}

void static FMIPFeatures.canBeLeashedByHost.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x400000;
}

void static FMIPFeatures.isNotifyWhenFoundSupported.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x800000;
}

void static FMIPFeatures.locateAfterEraseSupported.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x1000000;
}

void static FMIPFeatures.isLocalWithYouSupported.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x2000000;
}

void static FMIPFeatures.shouldBeConsideredAsAccessory.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x4000000;
}

void static FMIPFeatures.isPendingRemoveCapable.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x8000000;
}

void static FMIPFeatures.isBTFindingSupported.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x10000000;
}

void static FMIPFeatures.isRepairSupported.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x20000000;
}

uint64_t sub_1CCB02230(char *a1, char *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  v2 = *a2;
  v3 = sub_1CCA1CD94(*a1);
  if (v3 == sub_1CCA1CD94(v2))
    v4 = 1;
  else
    v4 = sub_1CCB642A0();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_1CCB0229C()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCA1CD94(v1);
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB022F4()
{
  char *v0;

  sub_1CCA1CD94(*v0);
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB0232C()
{
  char *v0;
  char v1;

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCA1CD94(v1);
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB02380@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB02734();
  *a1 = result;
  return result;
}

uint64_t sub_1CCB023AC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = sub_1CCA1CD94(*v1);
  *a1 = result;
  a1[1] = 0xE300000000000000;
  return result;
}

uint64_t sub_1CCB023D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB02734();
  *a1 = result;
  return result;
}

void sub_1CCB023FC(_BYTE *a1@<X8>)
{
  *a1 = 30;
}

uint64_t sub_1CCB02408()
{
  sub_1CCA16C38();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB02430()
{
  sub_1CCA16C38();
  return sub_1CCB643E4();
}

BOOL static FMIPFeatures.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

unint64_t sub_1CCB02474()
{
  unint64_t result;

  result = qword_1EF9E4AF8;
  if (!qword_1EF9E4AF8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPFeatures, &type metadata for FMIPFeatures);
    atomic_store(result, (unint64_t *)&qword_1EF9E4AF8);
  }
  return result;
}

unint64_t sub_1CCB024BC()
{
  unint64_t result;

  result = qword_1EF9E4B00;
  if (!qword_1EF9E4B00)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPFeatures, &type metadata for FMIPFeatures);
    atomic_store(result, (unint64_t *)&qword_1EF9E4B00);
  }
  return result;
}

unint64_t sub_1CCB02504()
{
  unint64_t result;

  result = qword_1EF9E4B08;
  if (!qword_1EF9E4B08)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPFeatures, &type metadata for FMIPFeatures);
    atomic_store(result, (unint64_t *)&qword_1EF9E4B08);
  }
  return result;
}

unint64_t sub_1CCB0254C()
{
  unint64_t result;

  result = qword_1EF9E4B10;
  if (!qword_1EF9E4B10)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPFeatures, &type metadata for FMIPFeatures);
    atomic_store(result, (unint64_t *)&qword_1EF9E4B10);
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPFeatures()
{
  return &type metadata for FMIPFeatures;
}

uint64_t getEnumTagSinglePayload for FMIPFeatures.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE3)
    goto LABEL_17;
  if (a2 + 29 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 29) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 29;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 29;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 29;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1E;
  v8 = v6 - 30;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPFeatures.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 29 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 29) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE2)
    return ((uint64_t (*)(void))((char *)&loc_1CCB0267C + 4 * byte_1CCB7071D[v4]))();
  *a1 = a2 + 29;
  return ((uint64_t (*)(void))((char *)sub_1CCB026B0 + 4 * asc_1CCB70718[v4]))();
}

uint64_t sub_1CCB026B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB026B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB026C0);
  return result;
}

uint64_t sub_1CCB026CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB026D4);
  *(_BYTE *)result = a2 + 29;
  return result;
}

uint64_t sub_1CCB026D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB026E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t sub_1CCB026F0()
{
  unint64_t result;

  result = qword_1EF9E4B18;
  if (!qword_1EF9E4B18)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB70A20, &type metadata for FMIPFeatures.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E4B18);
  }
  return result;
}

uint64_t sub_1CCB02734()
{
  unint64_t v0;

  v0 = sub_1CCB642C4();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1E)
    return 30;
  else
    return v0;
}

uint64_t type metadata accessor for FMIPValidatePasswordRequest()
{
  uint64_t result;

  result = qword_1EF9E4B20;
  if (!qword_1EF9E4B20)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCB027C0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FMIPDevice();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void sub_1CCB02848(char a1)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB02898()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB02938(char a1)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB0298C()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB02A14(char a1)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB02A68()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB02B38(char a1)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB02B84()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB02C24(char a1)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB02C70()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB02D0C(char a1)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB02D6C()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB02DF0(char a1)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB02E44()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB02ED4(char a1)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB02F30()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB02FEC(char a1)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB03038()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB030DC(uint64_t a1, char a2)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB03124()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB031C8(uint64_t a1, char a2)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB03224()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB032A8(uint64_t a1, char a2)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB032F4()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB03394()
{
  sub_1CCB6433C();
  sub_1CCB6436C();
  return sub_1CCB64384();
}

void sub_1CCB033E8(uint64_t a1, char a2)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB03440()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB034FC(uint64_t a1, char a2)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB03550()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB03638(uint64_t a1, char a2)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB03688()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB03758(uint64_t a1, char a2)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB037A8()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB03830(uint64_t a1, char a2)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB03878()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB03914(uint64_t a1, char a2)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB03964()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB039F4(uint64_t a1, char a2)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB03A3C()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB03ADC(uint64_t a1, char a2)
{
  sub_1CCB6433C();
  __asm { BR              X10 }
}

uint64_t sub_1CCB03B24()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB03BF4(char *a1)
{
  sub_1CCB1B344(*a1);
}

void sub_1CCB03C00()
{
  char *v0;

  sub_1CCB02C24(*v0);
}

void sub_1CCB03C08()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB03C40()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCB03CC8(uint64_t a1)
{
  char *v1;

  sub_1CCB03830(a1, *v1);
}

uint64_t sub_1CCB03CD0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB04124();
  *a1 = result;
  return result;
}

uint64_t sub_1CCB03CFC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCB03D28 + 4 * byte_1CCB70C07[*v0]))();
}

void sub_1CCB03D28(_QWORD *a1@<X8>)
{
  *a1 = 0x72456C65636E6163;
  a1[1] = 0xEB00000000657361;
}

void sub_1CCB03D4C(_QWORD *a1@<X8>)
{
  *a1 = 1801678700;
  a1[1] = 0xE400000000000000;
}

void sub_1CCB03D60(_QWORD *a1@<X8>)
{
  *a1 = 0x65646F4D74736F6CLL;
  a1[1] = 0xE800000000000000;
}

void sub_1CCB03D7C(_QWORD *a1@<X8>)
{
  *a1 = 0x65766F6D6572;
  a1[1] = 0xE600000000000000;
}

void sub_1CCB03D94(_QWORD *a1@<X8>)
{
  *a1 = 0x6E776F6E6B6E75;
  a1[1] = 0xE700000000000000;
}

void sub_1CCB03DB0()
{
  __asm { BR              X12 }
}

uint64_t sub_1CCB03DFC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = MEMORY[0x1E0DEA968];
  v9 = MEMORY[0x1E0DEA968];
  v7 = 0x72456C65636E6163;
  v8 = 0xEB00000000657361;
  swift_beginAccess();
  sub_1CCA06650((uint64_t)&v7, 0xD000000000000017, 0x80000001CCB7D380);
  v3 = *(_QWORD *)(v0 + qword_1EF9FF738);
  v2 = *(_QWORD *)(v0 + qword_1EF9FF738 + 8);
  v9 = v1;
  v7 = v3;
  v8 = v2;
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)&v7, 0x656B6F5468747561, 0xE90000000000006ELL);
  v9 = MEMORY[0x1E0DEB418];
  v7 = 1;
  sub_1CCA06650((uint64_t)&v7, 0x7372655668747561, 0xEB000000006E6F69);
  v5 = *(_QWORD *)(v0 + qword_1EF9FF748);
  v4 = *(_QWORD *)(v0 + qword_1EF9FF748 + 8);
  v9 = v1;
  v7 = v5;
  v8 = v4;
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)&v7, 0x656369766564, 0xE600000000000000);
  return swift_endAccess();
}

uint64_t sub_1CCB03F84()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return sub_1CC9F73AC(v0 + qword_1EF9FF748);
}

uint64_t sub_1CCB03FB4()
{
  uint64_t v0;

  v0 = sub_1CC9C785C();
  swift_bridgeObjectRelease();
  sub_1CC9F73AC(v0 + qword_1EF9FF748);
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB04008()
{
  return type metadata accessor for FMIPValidatePasswordRequest();
}

uint64_t storeEnumTagSinglePayload for FMIPValidatePasswordContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CCB0405C + 4 * byte_1CCB70C18[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CCB04090 + 4 * byte_1CCB70C13[v4]))();
}

uint64_t sub_1CCB04090(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB04098(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB040A0);
  return result;
}

uint64_t sub_1CCB040AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB040B4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CCB040B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB040C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPValidatePasswordContext()
{
  return &type metadata for FMIPValidatePasswordContext;
}

unint64_t sub_1CCB040E0()
{
  unint64_t result;

  result = qword_1EF9E4B70;
  if (!qword_1EF9E4B70)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB70D34, &type metadata for FMIPValidatePasswordContext);
    atomic_store(result, (unint64_t *)&qword_1EF9E4B70);
  }
  return result;
}

uint64_t sub_1CCB04124()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

void sub_1CCB0416C()
{
  void *v0;
  char v1;

  v0 = (void *)sub_1CCB63964();
  v1 = MGGetBoolAnswer();

  byte_1EF9E4B78 = v1;
}

uint64_t sub_1CCB041AC()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB041BC()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  uint64_t v2;

  if (qword_1EF9DEFD8 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for FMLocalize();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = sub_1CCB63340();
  swift_bridgeObjectRelease();

  return v2;
}

uint64_t FMIPMapInteractionEvent.mapPOITapped.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t FMIPMapInteractionEvent.mapPOITapped.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*FMIPMapInteractionEvent.mapPOITapped.modify())()
{
  return nullsub_1;
}

uint64_t FMIPMapInteractionEvent.mapPOIOpenInMaps.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t FMIPMapInteractionEvent.mapPOIOpenInMaps.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*FMIPMapInteractionEvent.mapPOIOpenInMaps.modify())()
{
  return nullsub_1;
}

FMIPCore::FMIPMapInteractionEvent __swiftcall FMIPMapInteractionEvent.init(mapPOITapped:mapPOIOpenInMaps:)(Swift::Bool_optional mapPOITapped, Swift::Bool_optional mapPOIOpenInMaps)
{
  Swift::Bool_optional *v2;
  FMIPCore::FMIPMapInteractionEvent result;

  v2->value = mapPOITapped.value;
  v2[1].value = mapPOIOpenInMaps.value;
  result.mapPOITapped = mapPOITapped;
  return result;
}

Swift::Void __swiftcall FMIPManager.enqueue(mapInteractionEvent:)(FMIPCore::FMIPMapInteractionEvent mapInteractionEvent)
{
  __int16 v1;

  v1 = **(_WORD **)&mapInteractionEvent.mapPOITapped.value;
  _s8FMIPCore13FMIPAnalyticsV23sendMapInteractionEvent5eventyAA07FMIPMapeF0V_tFZ_0((char *)&v1);
}

void sub_1CCB04378(unsigned int a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  id v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  id v8;
  char v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];
  unint64_t v14;

  v2 = a1;
  v3 = sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
  v14 = v3;
  if (v2 == 2)
  {

  }
  else
  {
    v4 = v3;
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a1 & 1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CC9E1E50((uint64_t)v5, 0x6154494F5070616DLL, 0xEC00000064657070, isUniquelyReferenced_nonNull_native);
    v14 = v4;
    swift_bridgeObjectRelease();
  }
  if ((a1 & 0xFF00) == 0x200)
  {

    v7 = v14;
  }
  else
  {
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, (a1 >> 8) & 1);
    v9 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CC9E1E50((uint64_t)v8, 0xD000000000000010, 0x80000001CCB7D3C0, v9);
    v7 = v14;
    swift_bridgeObjectRelease();
  }
  v10 = (void *)sub_1CCB63964();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v7;
  aBlock[4] = sub_1CCA3C490;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA7EAC8;
  aBlock[3] = &unk_1E88FCF20;
  v12 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v12);
  swift_bridgeObjectRelease();

}

uint64_t _s8FMIPCore13FMIPAnalyticsV23sendMapInteractionEvent5eventyAA07FMIPMapeF0V_tFZ_0(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  uint64_t v12;
  void *v13;
  _QWORD v15[2];
  _QWORD aBlock[6];

  v2 = sub_1CCB63820();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63868();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = a1[1];
  if (qword_1EF9DF018 != -1)
    swift_once();
  v12 = swift_allocObject();
  *(_BYTE *)(v12 + 16) = v10;
  *(_BYTE *)(v12 + 17) = v11;
  aBlock[4] = sub_1CCB04928;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88FCED0;
  v13 = _Block_copy(aBlock);
  sub_1CCB63844();
  v15[1] = MEMORY[0x1E0DEE9D8];
  sub_1CCA248D4();
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA1FC64();
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v9, v5, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

_WORD *initializeBufferWithCopyOfBuffer for FMIPMapInteractionEvent(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPMapInteractionEvent(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 65282 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65282 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65282;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65282;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65282;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  if (v6 >= 2)
    v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v7 = -2;
  if (v7 < 0)
    v7 = -1;
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPMapInteractionEvent(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCB04898 + 4 * byte_1CCB70D75[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_1CCB048CC + 4 * asc_1CCB70D70[v4]))();
}

uint64_t sub_1CCB048CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1CCB048D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1CCB048DCLL);
  return result;
}

uint64_t sub_1CCB048E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1CCB048F0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCB048F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1CCB048FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPMapInteractionEvent()
{
  return &type metadata for FMIPMapInteractionEvent;
}

uint64_t sub_1CCB04918()
{
  return swift_deallocObject();
}

void sub_1CCB04928()
{
  uint64_t v0;

  sub_1CCB04378(*(unsigned __int16 *)(v0 + 16));
}

uint64_t sub_1CCB04930()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t FMIPZeusProductInformation.init(beacon:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1[3];
  v5 = a1[4];
  sub_1CCA04DDC(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 136))(v4, v5);
  v7 = a1[3];
  v8 = a1[4];
  sub_1CCA04DDC(a1, v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 144))(v7, v8);
  v10 = a1[3];
  v11 = a1[4];
  sub_1CCA04DDC(a1, v10);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 56))(v10, v11);
  *a2 = v6;
  a2[1] = v9;
  a2[2] = v12;
  a2[3] = v13;
  a2[4] = 0x656C707041;
  a2[5] = 0xE500000000000000;
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0x4010000000000000;
  return sub_1CCA01CA0((uint64_t)a1);
}

uint64_t FMIPZeusProductInformation.vendorIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t FMIPZeusProductInformation.productIdentifier.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t FMIPZeusProductInformation.modelName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPZeusProductInformation.manufacturerName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPZeusProductInformation.appBundleIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

double FMIPZeusProductInformation.antennaPower.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

uint64_t FMIPZeusProductInformation.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  sub_1CCB64348();
  sub_1CCB64348();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  sub_1CCB64354();
  if (v1)
  {
    swift_bridgeObjectRetain();
    sub_1CCB639F4();
    swift_bridgeObjectRelease();
  }
  return sub_1CCB6436C();
}

uint64_t sub_1CCB04BAC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CCB04BE4
                                                                     + 4 * asc_1CCB70DB0[a1]))(0xD000000000000010, 0x80000001CCB79090);
}

uint64_t sub_1CCB04BE4(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_1CCB04C34()
{
  return 0x50616E6E65746E61;
}

uint64_t sub_1CCB04C54()
{
  unsigned __int8 *v0;

  return sub_1CCB04BAC(*v0);
}

uint64_t sub_1CCB04C5C()
{
  sub_1CCB05354();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB04C84()
{
  sub_1CCB05354();
  return sub_1CCB643E4();
}

uint64_t FMIPZeusProductInformation.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[7];
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v4 = sub_1CCA14E90(&qword_1EF9E4C18);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v12[5] = v1[2];
  v12[6] = v8;
  v9 = v1[3];
  v12[3] = v1[4];
  v12[4] = v9;
  v10 = v1[5];
  v12[1] = v1[6];
  v12[2] = v10;
  v12[0] = v1[7];
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB05354();
  sub_1CCB643CC();
  v18 = 0;
  sub_1CCB64204();
  if (!v2)
  {
    v17 = 1;
    sub_1CCB64204();
    v16 = 2;
    sub_1CCB641E0();
    v15 = 3;
    sub_1CCB641E0();
    v14 = 4;
    sub_1CCB641BC();
    v13 = 5;
    sub_1CCB641F8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t FMIPZeusProductInformation.hashValue.getter()
{
  sub_1CCB6433C();
  FMIPZeusProductInformation.hash(into:)();
  return sub_1CCB64384();
}

uint64_t FMIPZeusProductInformation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v5 = sub_1CCA14E90(&qword_1EF9E4C28);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB05354();
  sub_1CCB643B4();
  if (v2)
    return sub_1CCA01CA0((uint64_t)a1);
  v34 = 0;
  v9 = sub_1CCB64174();
  v33 = 1;
  v10 = sub_1CCB64174();
  v32 = 2;
  v11 = sub_1CCB64150();
  v13 = v12;
  v27 = v11;
  v31 = 3;
  swift_bridgeObjectRetain();
  v28 = v13;
  v24 = sub_1CCB64150();
  v30 = 4;
  v26 = v14;
  swift_bridgeObjectRetain();
  v25 = 0;
  v23 = sub_1CCB64120();
  v29 = 5;
  v25 = v15;
  swift_bridgeObjectRetain();
  sub_1CCB64168();
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *a2 = v9;
  a2[1] = v10;
  v18 = v28;
  a2[2] = v27;
  a2[3] = v18;
  v19 = v25;
  v20 = v26;
  a2[4] = v24;
  a2[5] = v20;
  a2[6] = v23;
  a2[7] = v19;
  a2[8] = v17;
  sub_1CCA01CA0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

double sub_1CCB05220@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  FMIPZeusProductInformation.init(beacon:)(a1, (uint64_t *)v8);
  v3 = v9;
  v4 = v10;
  v5 = v12;
  v6 = v8[1];
  *(_OWORD *)a2 = v8[0];
  *(_OWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = v4;
  result = *(double *)&v11;
  *(_OWORD *)(a2 + 48) = v11;
  *(_QWORD *)(a2 + 64) = v5;
  return result;
}

uint64_t sub_1CCB0526C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FMIPZeusProductInformation.init(from:)(a1, a2);
}

uint64_t sub_1CCB05280(_QWORD *a1)
{
  return FMIPZeusProductInformation.encode(to:)(a1);
}

uint64_t sub_1CCB05294()
{
  sub_1CCB6433C();
  FMIPZeusProductInformation.hash(into:)();
  return sub_1CCB64384();
}

uint64_t sub_1CCB052F8()
{
  sub_1CCB6433C();
  FMIPZeusProductInformation.hash(into:)();
  return sub_1CCB64384();
}

unint64_t sub_1CCB05354()
{
  unint64_t result;

  result = qword_1EF9E4C20;
  if (!qword_1EF9E4C20)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB70FB0, &type metadata for FMIPZeusProductInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E4C20);
  }
  return result;
}

unint64_t sub_1CCB05398(_QWORD *a1)
{
  unint64_t result;

  a1[2] = sub_1CCA37E68();
  a1[3] = sub_1CCA37D38();
  result = sub_1CCB053CC();
  a1[4] = result;
  return result;
}

unint64_t sub_1CCB053CC()
{
  unint64_t result;

  result = qword_1EF9E4C30;
  if (!qword_1EF9E4C30)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPZeusProductInformation, &type metadata for FMIPZeusProductInformation);
    atomic_store(result, (unint64_t *)&qword_1EF9E4C30);
  }
  return result;
}

unint64_t sub_1CCB05414()
{
  unint64_t result;

  result = qword_1EF9E4C38;
  if (!qword_1EF9E4C38)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPZeusProductInformation, &type metadata for FMIPZeusProductInformation);
    atomic_store(result, (unint64_t *)&qword_1EF9E4C38);
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPZeusProductInformation()
{
  return &type metadata for FMIPZeusProductInformation;
}

uint64_t storeEnumTagSinglePayload for FMIPZeusProductInformation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CCB054B4 + 4 * byte_1CCB70DBB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CCB054E8 + 4 * byte_1CCB70DB6[v4]))();
}

uint64_t sub_1CCB054E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB054F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB054F8);
  return result;
}

uint64_t sub_1CCB05504(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB0550CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CCB05510(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB05518(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPZeusProductInformation.CodingKeys()
{
  return &type metadata for FMIPZeusProductInformation.CodingKeys;
}

unint64_t sub_1CCB05538()
{
  unint64_t result;

  result = qword_1EF9E4C40;
  if (!qword_1EF9E4C40)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB70F88, &type metadata for FMIPZeusProductInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E4C40);
  }
  return result;
}

unint64_t sub_1CCB05580()
{
  unint64_t result;

  result = qword_1EF9E4C48;
  if (!qword_1EF9E4C48)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB70EF8, &type metadata for FMIPZeusProductInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E4C48);
  }
  return result;
}

unint64_t sub_1CCB055C8()
{
  unint64_t result;

  result = qword_1EF9E4C50;
  if (!qword_1EF9E4C50)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB70F20, &type metadata for FMIPZeusProductInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E4C50);
  }
  return result;
}

uint64_t type metadata accessor for FMIPLostModeRequest()
{
  uint64_t result;

  result = qword_1EF9E4C58;
  if (!qword_1EF9E4C58)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCB05648()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1CCB05694(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB056C4 + 4 * byte_1CCB71000[a1]))(0x656369766564, 0xE600000000000000);
}

uint64_t sub_1CCB056C4()
{
  return 0x6470556C69616D65;
}

uint64_t sub_1CCB056E4()
{
  return 0x65646F4D74736F6CLL;
}

uint64_t sub_1CCB05770()
{
  return 0x7478655472657375;
}

uint64_t sub_1CCB05788()
{
  return 0x6C69616D65;
}

uint64_t sub_1CCB0579C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + qword_1EF9FF760);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 8);
  v4 = MEMORY[0x1E0DEA968];
  v20 = MEMORY[0x1E0DEA968];
  v18 = v2;
  v19 = v3;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)&v18, 0x656369766564, 0xE600000000000000);
  v5 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isEmailUpdatesEnabled);
  v6 = MEMORY[0x1E0DEAFA0];
  v20 = MEMORY[0x1E0DEAFA0];
  LOBYTE(v18) = v5;
  sub_1CCA06650((uint64_t)&v18, 0x6470556C69616D65, 0xEC00000073657461);
  v20 = v6;
  LOBYTE(v18) = 1;
  sub_1CCA06650((uint64_t)&v18, 0x65646F4D74736F6CLL, 0xEF64656C62616E45);
  v7 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isTrackingEnabled);
  v20 = v6;
  LOBYTE(v18) = v7;
  sub_1CCA06650((uint64_t)&v18, 0x676E696B63617274, 0xEF64656C62616E45);
  v20 = v6;
  LOBYTE(v18) = 0;
  sub_1CCA06650((uint64_t)&v18, 0x646E756F73, 0xE500000000000000);
  v8 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_isUserTextEnabled);
  v20 = v6;
  LOBYTE(v18) = v8;
  sub_1CCA06650((uint64_t)&v18, 0x7478655472657375, 0xE800000000000000);
  result = swift_endAccess();
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_message + 8);
  if (v10)
  {
    v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_message);
    v20 = v4;
    v18 = v11;
    v19 = v10;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)&v18, 1954047348, 0xE400000000000000);
    result = swift_endAccess();
  }
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_phoneNumber + 8);
  if (v12)
  {
    v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_phoneNumber);
    v20 = v4;
    v18 = v13;
    v19 = v12;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)&v18, 0x72624E72656E776FLL, 0xE800000000000000);
    result = swift_endAccess();
  }
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_passcode + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_passcode);
    v20 = v4;
    v18 = v15;
    v19 = v14;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)&v18, 0x65646F6373736170, 0xE800000000000000);
    result = swift_endAccess();
  }
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_email + 8);
  if (v16)
  {
    v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore18FMIPLostModeAction_email);
    v20 = v4;
    v18 = v17;
    v19 = v16;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_1CCA06650((uint64_t)&v18, 0x6C69616D65, 0xE500000000000000);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1CCB05AD0()
{
  return swift_release();
}

uint64_t sub_1CCB05AE0()
{
  sub_1CC9C785C();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB05B20()
{
  return type metadata accessor for FMIPLostModeRequest();
}

void sub_1CCB05B28(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v13[3];

  v6 = v5;
  if (a2)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13[0] = *v6;
    *v6 = 0x8000000000000000;
    sub_1CCA03D9C(a1 & 0xFF010101, a2, a4, a5, isUniquelyReferenced_nonNull_native, *(double *)&a3);
    *v6 = v13[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1CCB093F4(a4, a5, (uint64_t)v13);
    swift_bridgeObjectRelease();

  }
}

uint64_t sub_1CCB05C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = sub_1CCA14E90(&qword_1EF9E2A08);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCA14E90((uint64_t *)&unk_1EF9E2A10);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_1CC9C3E84(a1, &qword_1EF9E2A08);
    sub_1CCB09510(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_1CC9C3E84((uint64_t)v10, &qword_1EF9E2A08);
  }
  else
  {
    sub_1CC9C3EC0(a1, (uint64_t)v13, (uint64_t *)&unk_1EF9E2A10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v4;
    *v4 = 0x8000000000000000;
    sub_1CCAEB2A8((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1CCB05D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = sub_1CCA14E90(&qword_1EF9E4D68);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FMIPMonitoredDevice(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_1CC9C3E84(a1, &qword_1EF9E4D68);
    sub_1CCB0972C(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_1CC9C3E84((uint64_t)v10, &qword_1EF9E4D68);
  }
  else
  {
    sub_1CC9FED60(a1, (uint64_t)v13, type metadata accessor for FMIPMonitoredDevice);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v4;
    *v4 = 0x8000000000000000;
    sub_1CCAEB524((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

FMIPCore::FMIPConfigValue_optional __swiftcall FMIPConfigValue.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  FMIPCore::FMIPConfigValue_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

void sub_1CCB05F2C(char *a1)
{
  sub_1CCB1D984(*a1);
}

void sub_1CCB05F38()
{
  char *v0;

  sub_1CCB02D0C(*v0);
}

void sub_1CCB05F40(uint64_t a1)
{
  char *v1;

  sub_1CCB5970C(a1, *v1);
}

void sub_1CCB05F48(uint64_t a1)
{
  char *v1;

  sub_1CCB031C8(a1, *v1);
}

FMIPCore::FMIPConfigValue_optional sub_1CCB05F50(Swift::String *a1)
{
  return FMIPConfigValue.init(rawValue:)(*a1);
}

uint64_t FMIPGlobalConfig<A>(_:fallback:)(uint64_t a1)
{
  if (qword_1EF9DEFE0 != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1);
  return sub_1CCB63D9C();
}

uint64_t sub_1CCB0600C(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _OWORD v8[2];
  uint64_t v9;

  if (qword_1EF9DEFE8 != -1)
    swift_once();
  swift_beginAccess();
  v4 = qword_1EF9FF778;
  if (*(_QWORD *)(qword_1EF9FF778 + 16) && (sub_1CC9EA88C(a1), (v6 & 1) != 0))
    sub_1CCA0CC30(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)v8);
  else
    memset(v8, 0, sizeof(v8));
  swift_endAccess();
  sub_1CCA14E90(&qword_1ED8AA610);
  if (swift_dynamicCast())
    return v9;
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t sub_1CCB06114@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  _OWORD v19[2];

  v8 = sub_1CCB63E2C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v19 - v10;
  if (qword_1EF9DEFE8 != -1)
    swift_once();
  swift_beginAccess();
  v12 = qword_1EF9FF778;
  if (*(_QWORD *)(qword_1EF9FF778 + 16) && (sub_1CC9EA88C(a1), (v14 & 1) != 0))
    sub_1CCA0CC30(*(_QWORD *)(v12 + 56) + 32 * v13, (uint64_t)v19);
  else
    memset(v19, 0, sizeof(v19));
  swift_endAccess();
  sub_1CCA14E90(&qword_1ED8AA610);
  v15 = swift_dynamicCast();
  v16 = *(_QWORD *)(a3 - 8);
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if ((v15 & 1) != 0)
  {
    v17(v11, 0, 1, a3);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a4, v11, a3);
  }
  else
  {
    v17(v11, 1, 1, a3);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(a4, a2, a3);
  }
}

uint64_t sub_1CCB062B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1CCB06114(*(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1CCB062D0(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  _OWORD v8[2];
  uint64_t v9;

  if (qword_1EF9DEFE8 != -1)
    swift_once();
  swift_beginAccess();
  v4 = qword_1EF9FF778;
  if (*(_QWORD *)(qword_1EF9FF778 + 16) && (sub_1CC9EA88C(a1), (v6 & 1) != 0))
    sub_1CCA0CC30(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)v8);
  else
    memset(v8, 0, sizeof(v8));
  swift_endAccess();
  sub_1CCA14E90(&qword_1ED8AA610);
  if (swift_dynamicCast())
    return v9;
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t FMIPNoItemsKBArticleLink.getter(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (qword_1EF9DEFE0 != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1);
  sub_1CCB63D9C();
  v1 = (void *)objc_opt_self();
  v2 = (void *)sub_1CCB63964();
  v3 = (void *)sub_1CCB63964();
  v4 = objc_msgSend(v1, sel_stringForKey_inDomain_, v2, v3);

  if (v4)
  {
    v5 = sub_1CCB63988();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  v8 = (void *)sub_1CCB63964();
  v9 = (void *)sub_1CCB63964();
  v10 = objc_msgSend(v1, sel_stringForKey_inDomain_, v8, v9);

  if (!v10)
  {
    if (!v7)
      return v15;
LABEL_11:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v5;
  }
  v11 = sub_1CCB63988();
  v13 = v12;

  if (v7)
    goto LABEL_11;
  if (!v13)
    return v15;
  swift_bridgeObjectRelease();
  return v11;
}

void sub_1CCB065F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_release();

  sub_1CCA2F610(v0 + qword_1ED8AA240);
  swift_bridgeObjectRelease();
  v1 = v0 + qword_1ED8AD7B8;
  v2 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

}

uint64_t sub_1CCB066B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    v23 = v22;
    v6 = *(_QWORD *)(v1 + qword_1ED8A8D70);
    v7 = *(_QWORD *)(v1 + qword_1ED8A8D70 + 8);
    swift_bridgeObjectRetain();
    v8 = sub_1CC9C6AE4(0xCuLL, v6, v7);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x1D17B0F34](v8, v10, v12, v14);
    v17 = v16;
    swift_bridgeObjectRelease();
    sub_1CCA0CB60(v15, v17, &v23);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPServerInteractionController<%s>.deinit", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v22, -1, -1);
    MEMORY[0x1D17B214C](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v18 = sub_1CCB6373C();
  swift_bridgeObjectRelease();
  swift_release();

  sub_1CCA2F610(v18 + qword_1ED8AA240);
  swift_bridgeObjectRelease();
  v19 = v18 + qword_1ED8AD7B8;
  v20 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  swift_bridgeObjectRelease();

  return v18;
}

uint64_t sub_1CCB0697C()
{
  sub_1CCB066B4();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB0699C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v8[26] = v12;
  v8[27] = v13;
  v8[24] = a7;
  v8[25] = a8;
  v8[22] = a5;
  v8[23] = a6;
  v8[21] = a4;
  v9 = sub_1CCB63820();
  v8[28] = v9;
  v8[29] = *(_QWORD *)(v9 - 8);
  v8[30] = swift_task_alloc();
  v10 = sub_1CCB63868();
  v8[31] = v10;
  v8[32] = *(_QWORD *)(v10 - 8);
  v8[33] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1CCB06A34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, _QWORD);
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = v0[27];
  sub_1CCB6322C();
  swift_allocObject();
  sub_1CCB63220();
  MEMORY[0x1D17B2068](&unk_1CCB75734, v1);
  sub_1CCB63214();
  swift_release();
  v2 = (uint64_t *)v0[17];
  v0[34] = v2;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v3 = sub_1CCB637FC();
  v0[35] = sub_1CCA16C20(v3, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v4 = sub_1CCB637D8();
  v5 = sub_1CCB63D48();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v48 = swift_slowAlloc();
    v7 = v48;
    *(_DWORD *)v6 = 136315138;
    v0[19] = v2;
    swift_retain();
    v8 = sub_1CCB639AC();
    v0[20] = sub_1CCA0CB60(v8, v9, &v48);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v4, v5, "FMIPServerInteractionController: received response?: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v7, -1, -1);
    MEMORY[0x1D17B214C](v6, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v10 = swift_conformsToProtocol2();
  if (v10)
    v11 = v10;
  else
    v11 = 0;
  if (v10)
    v12 = v2;
  else
    v12 = 0;
  v0[36] = v12;
  v0[37] = v11;
  if (v12)
  {
    v13 = *v12;
    v0[38] = *v12;
    v14 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
    swift_retain();
    v15 = v14(v13, v11);
    v0[39] = v15;
    if (v15)
    {
      v16 = v15;
      v17 = sub_1CCB637D8();
      v18 = sub_1CCB63D48();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_1CC9BF000, v17, v18, "FMIPServerInteractionController: received devices containing response, shifting the devices", v19, 2u);
        MEMORY[0x1D17B214C](v19, -1, -1);
      }

      type metadata accessor for FMLocationShifter();
      swift_allocObject();
      v20 = FMLocationShifter.init()();
      v0[40] = v20;
      v21 = swift_task_alloc();
      v0[41] = v21;
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = v16;
      v22 = (_QWORD *)swift_task_alloc();
      v0[42] = v22;
      sub_1CCA14E90(&qword_1ED8A7E80);
      *v22 = v0;
      v22[1] = sub_1CCB072D0;
      return sub_1CCB6424C();
    }
    swift_release();
  }
  v24 = v0[34];
  v25 = swift_retain();
  sub_1CC9CC7B0(v25);
  swift_release();
  v26 = *(_QWORD *)(v24 + 32);
  if (v26)
  {
    v27 = MEMORY[0x1D17B2218](v0[23] + qword_1ED8AA240);
    if (v27)
    {
      v28 = v27;
      swift_retain();
      swift_retain();
      swift_retain();
      v29 = sub_1CCB637D8();
      v30 = sub_1CCB63D48();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_1CC9BF000, v29, v30, "FMIPManager: didReceive server alert", v31, 2u);
        MEMORY[0x1D17B214C](v31, -1, -1);
      }

      v32 = v28 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
      swift_beginAccess();
      if (MEMORY[0x1D17B2218](v32))
      {
        v33 = *(_QWORD *)(v32 + 8);
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 72))(v28, v26, ObjectType, v33);
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  v35 = v0[33];
  v36 = v0[34];
  v37 = v0[30];
  v46 = v0[32];
  v47 = v0[31];
  v38 = v0[28];
  v45 = v0[29];
  v39 = v0[27];
  v40 = (void (*)(uint64_t, _QWORD))v0[24];
  v41 = v0[23];
  v42 = swift_retain();
  v40(v42, 0);
  swift_release();
  v43 = (_QWORD *)swift_allocObject();
  v43[2] = v39;
  v43[3] = v36;
  v43[4] = v41;
  v0[6] = sub_1CCB11618;
  v0[7] = v43;
  v0[2] = MEMORY[0x1E0C809B0];
  v0[3] = 1107296256;
  v0[4] = sub_1CCA00C38;
  v0[5] = &unk_1E88FD498;
  v44 = _Block_copy(v0 + 2);
  swift_retain();
  swift_retain();
  sub_1CCB63844();
  v0[16] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v35, v37, v44);
  _Block_release(v44);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v37, v38);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v35, v47);
  swift_release();
  objc_msgSend((id)v0[26], sel_signal);
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1CCB072D0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1CCB0732C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, _QWORD);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v0[37];
  v1 = v0[38];
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 24))(v0[18], v1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  v3 = v0[34];
  v4 = swift_retain();
  sub_1CC9CC7B0(v4);
  swift_release();
  v5 = *(_QWORD *)(v3 + 32);
  if (v5)
  {
    v6 = MEMORY[0x1D17B2218](v0[23] + qword_1ED8AA240);
    if (v6)
    {
      v7 = v6;
      swift_retain();
      swift_retain();
      swift_retain();
      v8 = sub_1CCB637D8();
      v9 = sub_1CCB63D48();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_1CC9BF000, v8, v9, "FMIPManager: didReceive server alert", v10, 2u);
        MEMORY[0x1D17B214C](v10, -1, -1);
      }

      v11 = v7 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
      swift_beginAccess();
      if (MEMORY[0x1D17B2218](v11))
      {
        v12 = *(_QWORD *)(v11 + 8);
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 72))(v7, v5, ObjectType, v12);
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  v14 = v0[33];
  v15 = v0[34];
  v16 = v0[30];
  v26 = v0[32];
  v27 = v0[31];
  v17 = v0[28];
  v25 = v0[29];
  v18 = v0[27];
  v19 = (void (*)(uint64_t, _QWORD))v0[24];
  v20 = v0[23];
  v21 = swift_retain();
  v19(v21, 0);
  swift_release();
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v18;
  v22[3] = v15;
  v22[4] = v20;
  v0[6] = sub_1CCB11618;
  v0[7] = v22;
  v0[2] = MEMORY[0x1E0C809B0];
  v0[3] = 1107296256;
  v0[4] = sub_1CCA00C38;
  v0[5] = &unk_1E88FD498;
  v23 = _Block_copy(v0 + 2);
  swift_retain();
  swift_retain();
  sub_1CCB63844();
  v0[16] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v14, v16, v23);
  _Block_release(v23);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v14, v27);
  swift_release();
  objc_msgSend((id)v0[26], sel_signal);
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1CCB076C0()
{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for FMIPRefreshClientResponse();
  result = swift_dynamicCastClass();
  if (result)
  {
    v1 = result;
    swift_retain();
    sub_1CCB07F48(v1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1CCB07728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  char *v31;
  char *v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t aBlock[6];

  v38 = a3;
  v37 = a2;
  v4 = sub_1CCB63820();
  v44 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v43 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63868();
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x1E0C80A78](v6);
  v40 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FMIPDevice();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v34 - v13;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v15 = sub_1CCB637FC();
  sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD7F8);
  sub_1CCA0BEEC(a1, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v16 = sub_1CCB637D8();
  v17 = sub_1CCB63D48();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v36 = v4;
    v19 = v18;
    v34 = swift_slowAlloc();
    aBlock[0] = v34;
    *(_DWORD *)v19 = 136315394;
    v45 = sub_1CCA0CB60(0x6E756F5379616C70, 0xE900000000000064, aBlock);
    v35 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_1CCB63E44();
    *(_WORD *)(v19 + 12) = 2080;
    v20 = FMIPDevice.debugDescription.getter();
    v45 = sub_1CCA0CB60(v20, v21, aBlock);
    v12 = v35;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA0BF30((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    _os_log_impl(&dword_1CC9BF000, v16, v17, "FMIPServerInteractionController: startMonitoring: action: %s, device: %s", (uint8_t *)v19, 0x16u);
    v22 = v34;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v22, -1, -1);
    v23 = v19;
    v4 = v36;
    MEMORY[0x1D17B214C](v23, -1, -1);
  }
  else
  {
    sub_1CCA0BF30((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  }

  v24 = v39;
  sub_1CCA0BEEC(a1, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v25 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v26 = (v10 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject();
  sub_1CC9FED60((uint64_t)v12, v27 + v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v28 = (_QWORD *)(v27 + v26);
  v29 = v38;
  *v28 = v37;
  v28[1] = v29;
  *(_QWORD *)(v27 + ((v26 + 23) & 0xFFFFFFFFFFFFFFF8)) = v24;
  aBlock[4] = (uint64_t)sub_1CCB11400;
  aBlock[5] = v27;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA00C38;
  aBlock[3] = (uint64_t)&unk_1E88FD3A8;
  v30 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v31 = v40;
  sub_1CCB63844();
  v45 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  v32 = v43;
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v31, v32, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v4);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v42);
  return swift_release();
}

uint64_t sub_1CCB07BB0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = sub_1CCA14E90(&qword_1EF9E4D68);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FMIPMonitoredDevice(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA0BEEC((uint64_t)a1, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v13 = &v12[*(int *)(v9 + 24)];
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  v14 = *a1;
  v15 = a1[1];
  sub_1CCA0BEEC((uint64_t)v12, (uint64_t)v8, type metadata accessor for FMIPMonitoredDevice);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  swift_beginAccess();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1CCB05D6C((uint64_t)v8, v14, v15);
  swift_endAccess();
  return sub_1CCA0BF30((uint64_t)v12, type metadata accessor for FMIPMonitoredDevice);
}

uint64_t sub_1CCB07D1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];

  v4 = sub_1CCA14E90(&qword_1EF9E4D68);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v9 = &v25[-v8];
  v11 = *a2;
  v10 = a2[1];
  v12 = (uint64_t *)(a1 + qword_1ED8AD768);
  swift_beginAccess();
  v13 = *v12;
  if (!*(_QWORD *)(*v12 + 16))
  {
    v20 = type metadata accessor for FMIPMonitoredDevice(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v9, 1, 1, v20);
    return sub_1CC9C3E84((uint64_t)v9, &qword_1EF9E4D68);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_1CCA074F4(v11, v10);
  if ((v15 & 1) != 0)
  {
    v16 = v14;
    v17 = *(_QWORD *)(v13 + 56);
    v18 = type metadata accessor for FMIPMonitoredDevice(0);
    v19 = *(_QWORD *)(v18 - 8);
    sub_1CCA0BEEC(v17 + *(_QWORD *)(v19 + 72) * v16, (uint64_t)v9, type metadata accessor for FMIPMonitoredDevice);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v9, 0, 1, v18);
  }
  else
  {
    v18 = type metadata accessor for FMIPMonitoredDevice(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v9, 1, 1, v18);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for FMIPMonitoredDevice(0);
  v21 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48))(v9, 1, v18) == 1)
    return sub_1CC9C3E84((uint64_t)v9, &qword_1EF9E4D68);
  sub_1CC9C3E84((uint64_t)v9, &qword_1EF9E4D68);
  v23 = *a2;
  v24 = a2[1];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v7, 1, 1, v18);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CCB05D6C((uint64_t)v7, v23, v24);
  return swift_endAccess();
}

void sub_1CCB07F48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  uint8_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)();
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  const void *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t (*v46)();
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD aBlock[6];

  v2 = sub_1CCB63820();
  v73 = *(_QWORD *)(v2 - 8);
  v74 = v2;
  MEMORY[0x1E0C80A78](v2);
  v72 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_1CCB63868();
  v70 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71);
  v69 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9E4D68);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for FMIPMonitoredDevice(0);
  v75 = *(_QWORD *)(v80 - 8);
  v8 = *(_QWORD *)(v75 + 64);
  v9 = MEMORY[0x1E0C80A78](v80);
  v68 = (uint64_t)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v78 = (uint64_t)&v59 - v10;
  v11 = type metadata accessor for FMIPDevice();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = MEMORY[0x1E0C80A78](v11);
  v67 = (uint64_t)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (uint64_t *)((char *)&v59 - v15);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v17 = sub_1CCB637FC();
  sub_1CCA16C20(v17, (uint64_t)qword_1ED8AD7F8);
  v18 = sub_1CCB637D8();
  v19 = sub_1CCB63D48();
  v20 = os_log_type_enabled(v18, v19);
  v81 = v16;
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1CC9BF000, v18, v19, "FMIPServerInteractionController: evaluating devices for monitoring", v21, 2u);
    v22 = v21;
    v16 = v81;
    MEMORY[0x1D17B214C](v22, -1, -1);
  }

  v23 = (uint64_t *)(v76 + qword_1ED8AD768);
  swift_beginAccess();
  if (*(_QWORD *)(*v23 + 16))
  {
    v24 = *(_QWORD *)(a1 + 56);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 16);
      if (!v25)
        return;
      v63 = qword_1ED8AA228;
      v26 = *(unsigned __int8 *)(v12 + 80);
      v61 = ~v26;
      v27 = v24 + ((v26 + 32) & ~v26);
      v79 = *(_QWORD *)(v12 + 72);
      v62 = v26;
      v60 = v8 + v26;
      v59 = v13 + 7;
      v66 = v24;
      swift_bridgeObjectRetain_n();
      v28 = type metadata accessor for FMIPDevice;
      v29 = v75;
      v65 = v7;
      v64 = v23;
      while (1)
      {
        sub_1CCA0BEEC(v27, (uint64_t)v16, (uint64_t (*)(_QWORD))v28);
        v45 = *v23;
        if (!*(_QWORD *)(*v23 + 16))
          break;
        v46 = v28;
        v47 = v16;
        v48 = v16[1];
        v49 = *v47;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v50 = sub_1CCA074F4(v49, v48);
        if ((v51 & 1) != 0)
        {
          sub_1CCA0BEEC(*(_QWORD *)(v45 + 56) + *(_QWORD *)(v29 + 72) * v50, (uint64_t)v7, type metadata accessor for FMIPMonitoredDevice);
          v52 = 0;
        }
        else
        {
          v52 = 1;
        }
        v53 = v80;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v7, v52, 1, v80);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v7, 1, v53);
        v28 = v46;
        v16 = v81;
        if (v54 == 1)
          goto LABEL_17;
        v30 = v78;
        sub_1CC9FED60((uint64_t)v7, v78, type metadata accessor for FMIPMonitoredDevice);
        v77 = *(_QWORD *)(v76 + v63);
        v31 = v68;
        sub_1CCA0BEEC(v30, v68, type metadata accessor for FMIPMonitoredDevice);
        v32 = v67;
        sub_1CCA0BEEC((uint64_t)v81, v67, (uint64_t (*)(_QWORD))v46);
        v33 = (*(unsigned __int8 *)(v29 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
        v34 = (v60 + v33) & v61;
        v35 = (v59 + v34) & 0xFFFFFFFFFFFFFFF8;
        v36 = swift_allocObject();
        sub_1CC9FED60(v31, v36 + v33, type metadata accessor for FMIPMonitoredDevice);
        sub_1CC9FED60(v32, v36 + v34, (uint64_t (*)(_QWORD))v46);
        *(_QWORD *)(v36 + v35) = v66;
        aBlock[4] = sub_1CCB10E30;
        aBlock[5] = v36;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1CCA00C38;
        aBlock[3] = &unk_1E88FD358;
        v37 = _Block_copy(aBlock);
        swift_bridgeObjectRetain();
        v38 = v69;
        sub_1CCB63844();
        v82 = MEMORY[0x1E0DEE9D8];
        sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
        sub_1CCA14E90(&qword_1ED8AA338);
        sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
        v39 = v72;
        v40 = v74;
        sub_1CCB63E98();
        MEMORY[0x1D17B1318](0, v38, v39, v37);
        v41 = v37;
        v28 = v46;
        _Block_release(v41);
        v42 = v39;
        v16 = v81;
        v43 = v40;
        v29 = v75;
        (*(void (**)(char *, uint64_t))(v73 + 8))(v42, v43);
        v44 = v38;
        v23 = v64;
        v7 = v65;
        (*(void (**)(char *, uint64_t))(v70 + 8))(v44, v71);
        sub_1CCA0BF30(v78, type metadata accessor for FMIPMonitoredDevice);
        sub_1CCA0BF30((uint64_t)v16, (uint64_t (*)(_QWORD))v46);
        swift_release();
LABEL_10:
        v27 += v79;
        if (!--v25)
        {
          swift_bridgeObjectRelease_n();
          return;
        }
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v7, 1, 1, v80);
LABEL_17:
      sub_1CCA0BF30((uint64_t)v16, (uint64_t (*)(_QWORD))v28);
      sub_1CC9C3E84((uint64_t)v7, &qword_1EF9E4D68);
      goto LABEL_10;
    }
    v55 = sub_1CCB637D8();
    v56 = sub_1CCB63D48();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v57 = 0;
      v58 = "FMIPServerInteractionController: no devices detected, bypassing";
      goto LABEL_23;
    }
  }
  else
  {
    v55 = sub_1CCB637D8();
    v56 = sub_1CCB63D48();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v57 = 0;
      v58 = "FMIPServerInteractionController: nothing to monitor, bypassing";
LABEL_23:
      _os_log_impl(&dword_1CC9BF000, v55, v56, v58, v57, 2u);
      MEMORY[0x1D17B214C](v57, -1, -1);
    }
  }

}

uint64_t sub_1CCB086B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD7F8);
  v7 = sub_1CCB637D8();
  v8 = sub_1CCB63D48();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1CC9BF000, v7, v8, "FMIPServerInteractionController: device monitored so calling callback", v9, 2u);
    MEMORY[0x1D17B214C](v9, -1, -1);
  }

  v10 = type metadata accessor for FMIPMonitoredDevice(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + *(int *)(v10 + 24)))(a2, a3);
}

void sub_1CCB087B4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjCClassFromMetadata;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  id v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ObjectType;
  id v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  char *v82;
  char *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91[6];
  uint64_t v92;

  v3 = v2;
  v88 = a2;
  v5 = sub_1CCA14E90(&qword_1ED8A8EE8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v83 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v82 = (char *)&v77 - v8;
  v84 = a1;
  v90 = *a1;
  v89 = type metadata accessor for FMIPInitClientRequest();
  type metadata accessor for FMLocalize();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v10 = (void *)objc_opt_self();
  v11 = objc_msgSend(v10, sel_bundleForClass_, ObjCClassFromMetadata);
  v85 = sub_1CCB63340();
  v13 = v12;

  v14 = objc_msgSend(v10, sel_bundleForClass_, ObjCClassFromMetadata);
  v15 = sub_1CCB63340();
  v17 = v16;

  v80 = v10;
  v81 = ObjCClassFromMetadata;
  v18 = objc_msgSend(v10, sel_bundleForClass_, ObjCClassFromMetadata);
  v19 = sub_1CCB63340();
  v21 = v20;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v22 = sub_1CCB637FC();
  v23 = sub_1CCA16C20(v22, (uint64_t)qword_1ED8AD7F8);
  swift_retain();
  v24 = sub_1CCB637D8();
  v25 = sub_1CCB63D48();
  v26 = os_log_type_enabled(v24, v25);
  v78 = v19;
  v79 = v15;
  if (!v26)
  {

    swift_release();
    if (v90 == v89)
      goto LABEL_7;
LABEL_8:
    if (!v88)
    {
      swift_bridgeObjectRelease();
LABEL_19:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v32 = v17;
    v33 = (void *)sub_1CCB633F4();
    v34 = objc_msgSend(v33, sel_domain);
    v35 = sub_1CCB63988();
    v37 = v36;

    if (v35 == sub_1CCB63988() && v37 == v38)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v39 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
      {
LABEL_18:

        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    if (v90 == v89
      || objc_msgSend(v33, sel_code) == (id)-1001
      || objc_msgSend(v33, sel_code) == (id)-999
      || objc_msgSend(v33, sel_code) == (id)-1005)
    {
      goto LABEL_18;
    }
    v86 = v23;
    swift_getErrorValue();
    v49 = sub_1CCAC1158(v92);
    v77 = v33;
    if (v49)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v50 = v80;
      v51 = v81;
      v52 = objc_msgSend(v80, sel_bundleForClass_, v81, v77);
      v85 = sub_1CCB63340();
      v87 = v53;

      v54 = objc_msgSend(v50, sel_bundleForClass_, v51);
      v55 = sub_1CCB63340();
      v32 = v56;

      v57 = objc_msgSend(v50, sel_bundleForClass_, v51);
      v58 = sub_1CCB63340();
      v21 = v59;

    }
    else
    {
      v87 = v13;
      v58 = v78;
      v55 = v79;
    }
    v60 = sub_1CCB63490();
    v61 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56);
    v62 = (uint64_t)v82;
    v61(v82, 1, 1, v60);
    v63 = (uint64_t)v83;
    v64 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v61)(v83, 1, 1, v60);
    if (((*(uint64_t (**)(uint64_t))(qword_1ED8AD5D8 + *v84 + 152))(v64) & 1) != 0)
      v65 = 1;
    else
      v65 = 2;
    type metadata accessor for FMIPAlert();
    v66 = (_QWORD *)swift_allocObject();
    v67 = v87;
    v66[2] = v85;
    v66[3] = v67;
    v66[4] = v55;
    v66[5] = v32;
    v66[6] = v58;
    v66[7] = v21;
    v68 = (_QWORD *)((char *)v66 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonLabel);
    *v68 = 0;
    v68[1] = 0;
    sub_1CC9C3EC0(v62, (uint64_t)v66 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_okButtonURL, &qword_1ED8A8EE8);
    sub_1CC9C3EC0(v63, (uint64_t)v66 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonURL, &qword_1ED8A8EE8);
    *((_BYTE *)v66 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_type) = v65;
    v69 = MEMORY[0x1D17B2218](v3 + qword_1ED8AA240);
    if (v69)
    {
      v70 = v69;
      swift_retain();
      v71 = sub_1CCB637D8();
      v72 = sub_1CCB63D48();
      if (os_log_type_enabled(v71, v72))
      {
        v73 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v73 = 0;
        _os_log_impl(&dword_1CC9BF000, v71, v72, "FMIPManager: didReceive server alert", v73, 2u);
        MEMORY[0x1D17B214C](v73, -1, -1);
      }

      v74 = v70 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
      swift_beginAccess();
      if (MEMORY[0x1D17B2218](v74))
      {
        v75 = *(_QWORD *)(v74 + 8);
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v75 + 72))(v70, v66, ObjectType, v75);
        swift_release();
        swift_release();
        swift_unknownObjectRelease();

        goto LABEL_25;
      }
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }

    return;
  }
  v28 = v89;
  v27 = v90;
  v86 = v23;
  v87 = v13;
  v29 = v21;
  v30 = v90 == v89;
  v31 = swift_slowAlloc();
  *(_DWORD *)v31 = 67109376;
  v91[0] = v30;
  sub_1CCB63E44();
  *(_WORD *)(v31 + 8) = 1024;
  v91[0] = *(unsigned __int8 *)(v3 + qword_1ED8AD7C0);
  v21 = v29;
  v23 = v86;
  v13 = v87;
  sub_1CCB63E44();
  swift_release();
  _os_log_impl(&dword_1CC9BF000, v24, v25, "FMIPServerInteractionController: createNetworkAlertIfNeeded: %{BOOL}d %{BOOL}d", (uint8_t *)v31, 0xEu);
  MEMORY[0x1D17B214C](v31, -1, -1);

  if (v27 != v28)
    goto LABEL_8;
LABEL_7:
  if ((*(_BYTE *)(v3 + qword_1ED8AD7C0) & 1) != 0)
    goto LABEL_8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LOBYTE(v91[0]) = 3;
  v40 = sub_1CCB5B8C8((unsigned __int8 *)v91);
  v41 = MEMORY[0x1D17B2218](v3 + qword_1ED8AA240);
  if (v41)
  {
    v42 = v41;
    swift_retain();
    v43 = sub_1CCB637D8();
    v44 = sub_1CCB63D48();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_1CC9BF000, v43, v44, "FMIPManager: didReceive server alert", v45, 2u);
      MEMORY[0x1D17B214C](v45, -1, -1);
    }

    v46 = v42 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
    swift_beginAccess();
    if (MEMORY[0x1D17B2218](v46))
    {
      v47 = *(_QWORD *)(v46 + 8);
      v48 = swift_getObjectType();
      (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v47 + 72))(v42, v40, v48, v47);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
LABEL_25:
      swift_unknownObjectRelease();
      return;
    }
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
}

void sub_1CCB0915C()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CCB09188()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CCB091D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CCB07728(a1, a2, a3);
}

uint64_t sub_1CCB091F4(uint64_t a1)
{
  return sub_1CCB0F87C(a1);
}

uint64_t sub_1CCB09214(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1CCA074F4(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1CCAEC3C0();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v6);
  sub_1CCB09934(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

double sub_1CCB092F8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1CCA074F4(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1CCA07D98();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1CCA0799C((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    sub_1CCB09B08(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1CCB093E8(uint64_t a1, uint64_t a2)
{
  return sub_1CCB09654(a1, a2, (void (*)(void))sub_1CCAEC578);
}

uint64_t sub_1CCB093F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1CCA074F4(a1, a2);
  LOBYTE(a2) = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v4;
    v19 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1CCAEC584();
      v12 = v19;
    }
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v12 + 56) + 24 * v8;
    v14 = *(_BYTE *)(v13 + 1);
    v15 = *(_BYTE *)(v13 + 2);
    v16 = *(_BYTE *)(v13 + 3);
    v17 = *(_QWORD *)(v13 + 8);
    v18 = *(_QWORD *)(v13 + 16);
    *(_BYTE *)a3 = *(_BYTE *)v13;
    *(_BYTE *)(a3 + 1) = v14;
    *(_BYTE *)(a3 + 2) = v15;
    *(_BYTE *)(a3 + 3) = v16;
    *(_QWORD *)(a3 + 8) = v17;
    *(_QWORD *)(a3 + 16) = v18;
    sub_1CCB09CDC(v8, v12);
    *v4 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t sub_1CCB09510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1CCA074F4(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1CCAEC768();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56);
    v13 = sub_1CCA14E90((uint64_t *)&unk_1EF9E2A10);
    v14 = *(_QWORD *)(v13 - 8);
    sub_1CC9C3EC0(v12 + *(_QWORD *)(v14 + 72) * v8, a3, (uint64_t *)&unk_1EF9E2A10);
    sub_1CCB09EC4(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v16 = sub_1CCA14E90((uint64_t *)&unk_1EF9E2A10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

uint64_t sub_1CCB09648(uint64_t a1, uint64_t a2)
{
  return sub_1CCB09654(a1, a2, (void (*)(void))sub_1CCAEC9B4);
}

uint64_t sub_1CCB09654(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t *v5;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1CCA074F4(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v5;
  v14 = *v5;
  *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    v11 = v14;
  }
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v8);
  sub_1CCB0A0D0(v8, v11);
  *v5 = v11;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1CCB0972C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1CCA074F4(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1CCAED3FC();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56);
    v13 = type metadata accessor for FMIPMonitoredDevice(0);
    v14 = *(_QWORD *)(v13 - 8);
    sub_1CC9FED60(v12 + *(_QWORD *)(v14 + 72) * v8, a3, type metadata accessor for FMIPMonitoredDevice);
    sub_1CCB0A544(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for FMIPMonitoredDevice(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

double sub_1CCB0985C@<D0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain();
  sub_1CC9EA88C(a1);
  v7 = v6;
  v9 = v8;
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1CCAED640();
      v11 = v13;
    }
    sub_1CCA0799C((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v7), a2);
    sub_1CCB0A740(v7, v11);
    *v3 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

unint64_t sub_1CCB09934(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CCB63EA4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1CCB6433C();
        swift_bridgeObjectRetain();
        sub_1CCB639F4();
        v9 = sub_1CCB64384();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1CCB09B08(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CCB63EA4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1CCB6433C();
        swift_bridgeObjectRetain();
        sub_1CCB639F4();
        v10 = sub_1CCB64384();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1CCB09CDC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CCB63EA4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1CCB6433C();
        swift_bridgeObjectRetain();
        sub_1CCB639F4();
        v10 = sub_1CCB64384();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = v15 + 24 * v3;
          v17 = (__int128 *)(v15 + 24 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= (unint64_t)v17 + 24))
          {
            v9 = *v17;
            *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)v16 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1CCB09EC4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CCB63EA4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        sub_1CCB6433C();
        swift_bridgeObjectRetain();
        sub_1CCB639F4();
        v9 = sub_1CCB64384();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90((uint64_t *)&unk_1EF9E2A10) - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1CCB0A0D0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CCB63EA4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1CCB6433C();
        swift_bridgeObjectRetain();
        sub_1CCB639F4();
        v9 = sub_1CCB64384();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1CCB0A2A4(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = sub_1CCB63604();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_1CCB63EA4();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = sub_1CCB63934();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_QWORD *)(v23 + 8 * a1);
            v25 = (_QWORD *)(v23 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1CCB0A544(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1CCB63EA4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        sub_1CCB6433C();
        swift_bridgeObjectRetain();
        sub_1CCB639F4();
        v9 = sub_1CCB64384();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for FMIPMonitoredDevice(0) - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1CCB0A740(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v3 = result;
  v4 = a2 + 64;
  v5 = (result + 1) & ~(-1 << *(_BYTE *)(a2 + 32));
  if (((1 << v5) & *(_QWORD *)(a2 + 64 + 8 * (v5 >> 6))) != 0)
  {
    result = sub_1CCB63EA4();
    if ((*(_QWORD *)(v4 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
    {
      v6 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v5);
      sub_1CCB6433C();
      __asm { BR              X8 }
    }
    v7 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    v8 = *v7;
    v9 = (-1 << v3) - 1;
  }
  else
  {
    v7 = (uint64_t *)(v4 + 8 * (result >> 6));
    v9 = *v7;
    v8 = (-1 << result) - 1;
  }
  *v7 = v9 & v8;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = __OFSUB__(v10, 1);
  v12 = v10 - 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x1CCB0A99CLL);
  }
  *(_QWORD *)(a2 + 16) = v12;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

unint64_t sub_1CCB0A9AC(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = sub_1CCB63604();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_1CCB63EA4();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = sub_1CCB63934();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_BYTE *)(v23 + a1);
            v25 = (_BYTE *)(v23 + v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1CCB0AC4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1CCB0600C(*(_BYTE *)(v1 + 16), **(_QWORD **)(v1 + 24));
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPConfigValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CCB0ACCC + 4 * byte_1CCB7105D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CCB0AD00 + 4 * byte_1CCB71058[v4]))();
}

uint64_t sub_1CCB0AD00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB0AD08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB0AD10);
  return result;
}

uint64_t sub_1CCB0AD1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB0AD24);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CCB0AD28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB0AD30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB0AD3C()
{
  return type metadata accessor for FMIPServerInteractionController(0);
}

uint64_t sub_1CCB0AD44(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  void (*v66)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  void (*v106)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  void (*v129)(_QWORD *, _QWORD, uint64_t, uint64_t);
  void (*v130)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int (*v140)(const void *, uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  void *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v159;
  _QWORD *__dst;
  unsigned int (*v161)(_QWORD *, uint64_t, uint64_t);
  void (*v162)(char *, char *, uint64_t);
  void (*v163)(char *, char *, uint64_t);
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v38 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v38 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v6 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    v8 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v8;
    v9 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v9;
    v10 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v10;
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    v11 = a2[12];
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_QWORD *)(a1 + 96) = v11;
    v12 = a2[14];
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_QWORD *)(a1 + 112) = v12;
    v13 = a2[16];
    *(_QWORD *)(a1 + 120) = a2[15];
    *(_QWORD *)(a1 + 128) = v13;
    v14 = a2[18];
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_QWORD *)(a1 + 144) = v14;
    v15 = a2[20];
    *(_QWORD *)(a1 + 152) = a2[19];
    *(_QWORD *)(a1 + 160) = v15;
    v16 = a2[22];
    *(_QWORD *)(a1 + 168) = a2[21];
    *(_QWORD *)(a1 + 176) = v16;
    *(_QWORD *)(a1 + 184) = a2[23];
    *(_BYTE *)(a1 + 192) = *((_BYTE *)a2 + 192);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
    v17 = a2[28];
    *(_QWORD *)(a1 + 216) = a2[27];
    *(_QWORD *)(a1 + 224) = v17;
    v18 = a2[30];
    *(_QWORD *)(a1 + 232) = a2[29];
    *(_QWORD *)(a1 + 240) = v18;
    *(_QWORD *)(a1 + 248) = a2[31];
    *(_DWORD *)(a1 + 256) = *((_DWORD *)a2 + 64);
    v20 = (void *)a2[33];
    v19 = a2[34];
    *(_QWORD *)(a1 + 264) = v20;
    *(_QWORD *)(a1 + 272) = v19;
    *(_DWORD *)(a1 + 280) = *((_DWORD *)a2 + 70);
    v22 = (void *)a2[36];
    v21 = a2[37];
    *(_QWORD *)(a1 + 288) = v22;
    *(_QWORD *)(a1 + 296) = v21;
    v23 = a2[59];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = v20;
    v25 = v22;
    if (v23)
    {
      v26 = a2[39];
      *(_QWORD *)(a1 + 304) = a2[38];
      *(_QWORD *)(a1 + 312) = v26;
      v27 = a2[41];
      *(_QWORD *)(a1 + 320) = a2[40];
      *(_QWORD *)(a1 + 328) = v27;
      v28 = a2[43];
      *(_QWORD *)(a1 + 336) = a2[42];
      *(_QWORD *)(a1 + 344) = v28;
      v29 = a2[45];
      *(_QWORD *)(a1 + 352) = a2[44];
      *(_QWORD *)(a1 + 360) = v29;
      v30 = a2[47];
      *(_QWORD *)(a1 + 368) = a2[46];
      *(_QWORD *)(a1 + 376) = v30;
      v31 = a2[49];
      *(_QWORD *)(a1 + 384) = a2[48];
      *(_QWORD *)(a1 + 392) = v31;
      v32 = a2[51];
      *(_QWORD *)(a1 + 400) = a2[50];
      *(_QWORD *)(a1 + 408) = v32;
      v33 = a2[53];
      *(_QWORD *)(a1 + 416) = a2[52];
      *(_QWORD *)(a1 + 424) = v33;
      v34 = a2[55];
      *(_QWORD *)(a1 + 432) = a2[54];
      *(_QWORD *)(a1 + 440) = v34;
      v35 = a2[57];
      *(_QWORD *)(a1 + 448) = a2[56];
      *(_QWORD *)(a1 + 456) = v35;
      *(_QWORD *)(a1 + 464) = a2[58];
      *(_QWORD *)(a1 + 472) = v23;
      v36 = a2[61];
      *(_QWORD *)(a1 + 480) = a2[60];
      *(_QWORD *)(a1 + 488) = v36;
      v37 = a2[63];
      *(_QWORD *)(a1 + 496) = a2[62];
      *(_QWORD *)(a1 + 504) = v37;
      *(_QWORD *)(a1 + 512) = a2[64];
      *(_QWORD *)(a1 + 520) = a2[65];
      *(_QWORD *)(a1 + 528) = a2[66];
      *(_QWORD *)(a1 + 536) = a2[67];
      *(_QWORD *)(a1 + 544) = a2[68];
      *(_QWORD *)(a1 + 552) = a2[69];
      *(_QWORD *)(a1 + 560) = a2[70];
      *(_QWORD *)(a1 + 568) = a2[71];
      *(_QWORD *)(a1 + 576) = a2[72];
      *(_QWORD *)(a1 + 584) = a2[73];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      memcpy((void *)(a1 + 304), a2 + 38, 0x120uLL);
    }
    v39 = (int *)type metadata accessor for FMIPDevice();
    v40 = v39[28];
    v41 = (_BYTE *)(a1 + v40);
    v42 = (char *)a2 + v40;
    v43 = (int *)type metadata accessor for FMIPPlaySoundMetadata();
    v44 = *((_QWORD *)v43 - 1);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v44 + 48))(v42, 1, v43))
    {
      v45 = sub_1CCA14E90(&qword_1ED8A7460);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      *v41 = *v42;
      v46 = v43[5];
      v47 = &v41[v46];
      v48 = &v42[v46];
      v49 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
      v50 = v43[6];
      v51 = &v41[v50];
      v52 = &v42[v50];
      v53 = v52[1];
      *v51 = *v52;
      v51[1] = v53;
      v54 = v43[7];
      v55 = &v41[v54];
      v56 = &v42[v54];
      v57 = v56[1];
      *v55 = *v56;
      v55[1] = v57;
      v58 = v43[8];
      v59 = &v41[v58];
      v60 = &v42[v58];
      v61 = v60[1];
      *v59 = *v60;
      v59[1] = v61;
      v62 = v43[9];
      v63 = &v41[v62];
      v64 = &v42[v62];
      v65 = v64[1];
      *v63 = *v64;
      v63[1] = v65;
      v66 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v44 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v66(v41, 0, 1, v43);
    }
    v67 = v39[29];
    v68 = (_DWORD *)(a1 + v67);
    v69 = (_DWORD *)((char *)a2 + v67);
    v70 = type metadata accessor for FMIPDeviceLostModeMetadata();
    v71 = *(_QWORD *)(v70 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
    {
      v72 = sub_1CCA14E90(&qword_1ED8A7AA0);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
    else
    {
      *v68 = *v69;
      v73 = *((_QWORD *)v69 + 2);
      *((_QWORD *)v68 + 1) = *((_QWORD *)v69 + 1);
      *((_QWORD *)v68 + 2) = v73;
      v74 = *((_QWORD *)v69 + 4);
      *((_QWORD *)v68 + 3) = *((_QWORD *)v69 + 3);
      *((_QWORD *)v68 + 4) = v74;
      v75 = *((_QWORD *)v69 + 6);
      *((_QWORD *)v68 + 5) = *((_QWORD *)v69 + 5);
      *((_QWORD *)v68 + 6) = v75;
      *((_BYTE *)v68 + 56) = *((_BYTE *)v69 + 56);
      v76 = *(int *)(v70 + 48);
      v165 = (char *)v69 + v76;
      v167 = (char *)v68 + v76;
      v77 = sub_1CCB635B0();
      v163 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v163(v167, v165, v77);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
    }
    v78 = v39[30];
    v79 = (_BYTE *)(a1 + v78);
    v80 = (char *)a2 + v78;
    v81 = type metadata accessor for FMIPLockMetadata();
    v82 = *(_QWORD *)(v81 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
    {
      v83 = sub_1CCA14E90(&qword_1ED8A73B8);
      memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    }
    else
    {
      *v79 = *v80;
      v84 = *(int *)(v81 + 20);
      v85 = &v79[v84];
      v86 = &v80[v84];
      v87 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v85, v86, v87);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
    }
    v88 = v39[31];
    v89 = (_BYTE *)(a1 + v88);
    v90 = (char *)a2 + v88;
    v91 = (int *)type metadata accessor for FMIPEraseMetadata();
    v92 = *((_QWORD *)v91 - 1);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v92 + 48))(v90, 1, v91))
    {
      v93 = sub_1CCA14E90(&qword_1ED8A73F8);
      memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    }
    else
    {
      *v89 = *v90;
      v94 = v91[5];
      v95 = &v89[v94];
      v96 = &v90[v94];
      v97 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v97 - 8) + 16))(v95, v96, v97);
      v98 = v91[6];
      v99 = &v89[v98];
      v100 = &v90[v98];
      v101 = v100[1];
      *v99 = *v100;
      v99[1] = v101;
      v102 = v91[7];
      v103 = &v89[v102];
      v104 = &v90[v102];
      v105 = v104[1];
      *v103 = *v104;
      v103[1] = v105;
      v89[v91[8]] = v90[v91[8]];
      v106 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v92 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v106(v89, 0, 1, v91);
    }
    v107 = v39[32];
    v108 = (_QWORD *)(a1 + v107);
    v109 = (uint64_t *)((char *)a2 + v107);
    v110 = type metadata accessor for FMIPItemGroup();
    v111 = *(_QWORD *)(v110 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
    {
      v112 = sub_1CCA14E90(&qword_1ED8A8C30);
      memcpy(v108, v109, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v108 = *(_OWORD *)v109;
      v113 = v109[3];
      v108[2] = v109[2];
      v108[3] = v113;
      v114 = v109[5];
      v108[4] = v109[4];
      v108[5] = v114;
      v115 = v109[7];
      v168 = v111;
      v108[6] = v109[6];
      v108[7] = v115;
      v116 = v109[9];
      v108[8] = v109[8];
      v108[9] = v116;
      v117 = *(int *)(v110 + 48);
      __dst = (_QWORD *)((char *)v108 + v117);
      v118 = (_QWORD *)((char *)v109 + v117);
      v119 = type metadata accessor for FMIPItemLostModeMetadata();
      v159 = *(_QWORD *)(v119 - 8);
      v161 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v159 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v161(v118, 1, v119))
      {
        v120 = sub_1CCA14E90(&qword_1ED8A8CD0);
        memcpy(__dst, v118, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
      }
      else
      {
        v121 = v118[1];
        *__dst = *v118;
        __dst[1] = v121;
        v122 = v118[3];
        __dst[2] = v118[2];
        __dst[3] = v122;
        v123 = *(int *)(v119 + 24);
        v164 = (char *)v118 + v123;
        v166 = (char *)__dst + v123;
        v124 = sub_1CCB635B0();
        v162 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v162(v166, v164, v124);
        v125 = *(int *)(v119 + 28);
        v126 = (_QWORD *)((char *)__dst + v125);
        v127 = (_QWORD *)((char *)v118 + v125);
        v128 = v127[1];
        *v126 = *v127;
        v126[1] = v128;
        v129 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v159 + 56);
        swift_bridgeObjectRetain();
        v129(__dst, 0, 1, v119);
      }
      *(_QWORD *)((char *)v108 + *(int *)(v110 + 52)) = *(_QWORD *)((char *)v109 + *(int *)(v110 + 52));
      v130 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v168 + 56);
      swift_bridgeObjectRetain();
      v130(v108, 0, 1, v110);
    }
    *(_BYTE *)(a1 + v39[33]) = *((_BYTE *)a2 + v39[33]);
    *(_BYTE *)(a1 + v39[34]) = *((_BYTE *)a2 + v39[34]);
    *(_BYTE *)(a1 + v39[35]) = *((_BYTE *)a2 + v39[35]);
    v131 = v39[36];
    v132 = (_QWORD *)(a1 + v131);
    v133 = (uint64_t *)((char *)a2 + v131);
    v134 = v133[1];
    *v132 = *v133;
    v132[1] = v134;
    *(_QWORD *)(a1 + v39[37]) = *(uint64_t *)((char *)a2 + v39[37]);
    v135 = v39[38];
    v136 = (void *)(a1 + v135);
    v137 = (char *)a2 + v135;
    v138 = sub_1CCB635B0();
    v139 = *(_QWORD *)(v138 - 8);
    v140 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v139 + 48);
    swift_bridgeObjectRetain();
    if (v140(v137, 1, v138))
    {
      v141 = sub_1CCA14E90(&qword_1ED8A7130);
      memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v139 + 16))(v136, v137, v138);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v136, 0, 1, v138);
    }
    v142 = v39[39];
    v143 = (void *)(a1 + v142);
    v144 = (char *)a2 + v142;
    if (v140((char *)a2 + v142, 1, v138))
    {
      v145 = sub_1CCA14E90(&qword_1ED8A7130);
      memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v139 + 16))(v143, v144, v138);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v143, 0, 1, v138);
    }
    v146 = v39[40];
    v147 = (void *)(a1 + v146);
    v148 = (char *)a2 + v146;
    if (v140((char *)a2 + v146, 1, v138))
    {
      v149 = sub_1CCA14E90(&qword_1ED8A7130);
      memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v139 + 16))(v147, v148, v138);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v147, 0, 1, v138);
    }
    v150 = v39[41];
    v151 = (void *)(a1 + v150);
    v152 = (char *)a2 + v150;
    if (v140((char *)a2 + v150, 1, v138))
    {
      v153 = sub_1CCA14E90(&qword_1ED8A7130);
      memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v139 + 16))(v151, v152, v138);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v151, 0, 1, v138);
    }
    *(_BYTE *)(a1 + v39[42]) = *((_BYTE *)a2 + v39[42]);
    *(_BYTE *)(a1 + v39[43]) = *((_BYTE *)a2 + v39[43]);
    *(_BYTE *)(a1 + v39[44]) = *((_BYTE *)a2 + v39[44]);
    v154 = *(int *)(a3 + 24);
    v155 = (_QWORD *)(a1 + v154);
    v156 = (uint64_t *)((char *)a2 + v154);
    v157 = v156[1];
    *v155 = *v156;
    v155[1] = v157;
  }
  swift_retain();
  return a1;
}

uint64_t sub_1CCB0B868(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(a1 + 472))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v2 = (int *)type metadata accessor for FMIPDevice();
  v3 = a1 + v2[28];
  v4 = type metadata accessor for FMIPPlaySoundMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4))
  {
    v5 = v3 + *(int *)(v4 + 20);
    v6 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v7 = a1 + v2[29];
  v8 = type metadata accessor for FMIPDeviceLostModeMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v7 + *(int *)(v8 + 48);
    v10 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  v11 = a1 + v2[30];
  v12 = type metadata accessor for FMIPLockMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v13 = v11 + *(int *)(v12 + 20);
    v14 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  v15 = a1 + v2[31];
  v16 = type metadata accessor for FMIPEraseMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
  {
    v17 = v15 + *(int *)(v16 + 20);
    v18 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v19 = a1 + v2[32];
  v20 = type metadata accessor for FMIPItemGroup();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = v19 + *(int *)(v20 + 48);
    v22 = type metadata accessor for FMIPItemLostModeMetadata();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = v21 + *(int *)(v22 + 24);
      v24 = sub_1CCB635B0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v25 = a1 + v2[38];
  v26 = sub_1CCB635B0();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (!v28(v25, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
  v29 = a1 + v2[39];
  if (!v28(v29, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v26);
  v30 = a1 + v2[40];
  if (!v28(v30, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v30, v26);
  v31 = a1 + v2[41];
  if (!v28(v31, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v26);
  return swift_release();
}

uint64_t sub_1CCB0BD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  void (*v64)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v65;
  _DWORD *v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  void (*v104)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  void (*v127)(_QWORD *, _QWORD, uint64_t, uint64_t);
  void (*v128)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  const void *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int (*v138)(const void *, uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const void *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const void *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  const void *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v157;
  unsigned int (*v158)(_QWORD *, uint64_t, uint64_t);
  void (*v159)(char *, char *, uint64_t);
  char *v160;
  void (*v161)(char *, char *, uint64_t);
  char *v162;
  char *__dsta;
  _QWORD *__dst;
  char *v165;
  uint64_t v166;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  v11 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v11;
  v12 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v12;
  v13 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v13;
  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v14;
  v15 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v15;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  v16 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v16;
  v17 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v17;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  v19 = *(void **)(a2 + 264);
  v18 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = v19;
  *(_QWORD *)(a1 + 272) = v18;
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  v21 = *(void **)(a2 + 288);
  v20 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v21;
  *(_QWORD *)(a1 + 296) = v20;
  v22 = *(_QWORD *)(a2 + 472);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v23 = v19;
  v24 = v21;
  if (v22)
  {
    v25 = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 312) = v25;
    v26 = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 328) = v26;
    v27 = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = v27;
    v28 = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 360) = v28;
    v29 = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(a1 + 376) = v29;
    v30 = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 392) = v30;
    v31 = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(a1 + 408) = v31;
    v32 = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 424) = v32;
    v33 = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 440) = v33;
    v34 = *(_QWORD *)(a2 + 456);
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 456) = v34;
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a1 + 472) = v22;
    v35 = *(_QWORD *)(a2 + 488);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    *(_QWORD *)(a1 + 488) = v35;
    v36 = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 504) = v36;
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy((void *)(a1 + 304), (const void *)(a2 + 304), 0x120uLL);
  }
  v37 = (int *)type metadata accessor for FMIPDevice();
  v38 = v37[28];
  v39 = (_BYTE *)(a1 + v38);
  v40 = (_BYTE *)(a2 + v38);
  v41 = (int *)type metadata accessor for FMIPPlaySoundMetadata();
  v42 = *((_QWORD *)v41 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v42 + 48))(v40, 1, v41))
  {
    v43 = sub_1CCA14E90(&qword_1ED8A7460);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    *v39 = *v40;
    v44 = v41[5];
    v45 = &v39[v44];
    v46 = &v40[v44];
    v47 = sub_1CCB635B0();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
    v48 = v41[6];
    v49 = &v39[v48];
    v50 = &v40[v48];
    v51 = v50[1];
    *v49 = *v50;
    v49[1] = v51;
    v52 = v41[7];
    v53 = &v39[v52];
    v54 = &v40[v52];
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    v56 = v41[8];
    v57 = &v39[v56];
    v58 = &v40[v56];
    v59 = v58[1];
    *v57 = *v58;
    v57[1] = v59;
    v60 = v41[9];
    v61 = &v39[v60];
    v62 = &v40[v60];
    v63 = v62[1];
    *v61 = *v62;
    v61[1] = v63;
    v64 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v42 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v64(v39, 0, 1, v41);
  }
  v65 = v37[29];
  v66 = (_DWORD *)(a1 + v65);
  v67 = (_DWORD *)(a2 + v65);
  v68 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v69 = *(_QWORD *)(v68 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
  {
    v70 = sub_1CCA14E90(&qword_1ED8A7AA0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    *v66 = *v67;
    v71 = *((_QWORD *)v67 + 2);
    *((_QWORD *)v66 + 1) = *((_QWORD *)v67 + 1);
    *((_QWORD *)v66 + 2) = v71;
    v72 = *((_QWORD *)v67 + 4);
    *((_QWORD *)v66 + 3) = *((_QWORD *)v67 + 3);
    *((_QWORD *)v66 + 4) = v72;
    v73 = *((_QWORD *)v67 + 6);
    *((_QWORD *)v66 + 5) = *((_QWORD *)v67 + 5);
    *((_QWORD *)v66 + 6) = v73;
    *((_BYTE *)v66 + 56) = *((_BYTE *)v67 + 56);
    v74 = *(int *)(v68 + 48);
    __dsta = (char *)v67 + v74;
    v165 = (char *)v66 + v74;
    v75 = sub_1CCB635B0();
    v161 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v161(v165, __dsta, v75);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
  }
  v76 = v37[30];
  v77 = (_BYTE *)(a1 + v76);
  v78 = (_BYTE *)(a2 + v76);
  v79 = type metadata accessor for FMIPLockMetadata();
  v80 = *(_QWORD *)(v79 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
  {
    v81 = sub_1CCA14E90(&qword_1ED8A73B8);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    *v77 = *v78;
    v82 = *(int *)(v79 + 20);
    v83 = &v77[v82];
    v84 = &v78[v82];
    v85 = sub_1CCB635B0();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v83, v84, v85);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  v86 = v37[31];
  v87 = (_BYTE *)(a1 + v86);
  v88 = (_BYTE *)(a2 + v86);
  v89 = (int *)type metadata accessor for FMIPEraseMetadata();
  v90 = *((_QWORD *)v89 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v90 + 48))(v88, 1, v89))
  {
    v91 = sub_1CCA14E90(&qword_1ED8A73F8);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
  }
  else
  {
    *v87 = *v88;
    v92 = v89[5];
    v93 = &v87[v92];
    v94 = &v88[v92];
    v95 = sub_1CCB635B0();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v93, v94, v95);
    v96 = v89[6];
    v97 = &v87[v96];
    v98 = &v88[v96];
    v99 = v98[1];
    *v97 = *v98;
    v97[1] = v99;
    v100 = v89[7];
    v101 = &v87[v100];
    v102 = &v88[v100];
    v103 = v102[1];
    *v101 = *v102;
    v101[1] = v103;
    v87[v89[8]] = v88[v89[8]];
    v104 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v90 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v104(v87, 0, 1, v89);
  }
  v105 = v37[32];
  v106 = (_QWORD *)(a1 + v105);
  v107 = (_QWORD *)(a2 + v105);
  v108 = type metadata accessor for FMIPItemGroup();
  v109 = *(_QWORD *)(v108 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
  {
    v110 = sub_1CCA14E90(&qword_1ED8A8C30);
    memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
  }
  else
  {
    v166 = v109;
    *(_OWORD *)v106 = *(_OWORD *)v107;
    v111 = v107[3];
    v106[2] = v107[2];
    v106[3] = v111;
    v112 = v107[5];
    v106[4] = v107[4];
    v106[5] = v112;
    v113 = v107[7];
    v106[6] = v107[6];
    v106[7] = v113;
    v114 = v107[9];
    v106[8] = v107[8];
    v106[9] = v114;
    v115 = *(int *)(v108 + 48);
    __dst = (_QWORD *)((char *)v106 + v115);
    v116 = (_QWORD *)((char *)v107 + v115);
    v117 = type metadata accessor for FMIPItemLostModeMetadata();
    v157 = *(_QWORD *)(v117 - 8);
    v158 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v157 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v158(v116, 1, v117))
    {
      v118 = sub_1CCA14E90(&qword_1ED8A8CD0);
      memcpy(__dst, v116, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
    }
    else
    {
      v119 = v116[1];
      *__dst = *v116;
      __dst[1] = v119;
      v120 = v116[3];
      __dst[2] = v116[2];
      __dst[3] = v120;
      v121 = *(int *)(v117 + 24);
      v160 = (char *)v116 + v121;
      v162 = (char *)__dst + v121;
      v122 = sub_1CCB635B0();
      v159 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v159(v162, v160, v122);
      v123 = *(int *)(v117 + 28);
      v124 = (_QWORD *)((char *)__dst + v123);
      v125 = (_QWORD *)((char *)v116 + v123);
      v126 = v125[1];
      *v124 = *v125;
      v124[1] = v126;
      v127 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v157 + 56);
      swift_bridgeObjectRetain();
      v127(__dst, 0, 1, v117);
    }
    *(_QWORD *)((char *)v106 + *(int *)(v108 + 52)) = *(_QWORD *)((char *)v107 + *(int *)(v108 + 52));
    v128 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v166 + 56);
    swift_bridgeObjectRetain();
    v128(v106, 0, 1, v108);
  }
  *(_BYTE *)(a1 + v37[33]) = *(_BYTE *)(a2 + v37[33]);
  *(_BYTE *)(a1 + v37[34]) = *(_BYTE *)(a2 + v37[34]);
  *(_BYTE *)(a1 + v37[35]) = *(_BYTE *)(a2 + v37[35]);
  v129 = v37[36];
  v130 = (_QWORD *)(a1 + v129);
  v131 = (_QWORD *)(a2 + v129);
  v132 = v131[1];
  *v130 = *v131;
  v130[1] = v132;
  *(_QWORD *)(a1 + v37[37]) = *(_QWORD *)(a2 + v37[37]);
  v133 = v37[38];
  v134 = (void *)(a1 + v133);
  v135 = (const void *)(a2 + v133);
  v136 = sub_1CCB635B0();
  v137 = *(_QWORD *)(v136 - 8);
  v138 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v137 + 48);
  swift_bridgeObjectRetain();
  if (v138(v135, 1, v136))
  {
    v139 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v137 + 16))(v134, v135, v136);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v134, 0, 1, v136);
  }
  v140 = v37[39];
  v141 = (void *)(a1 + v140);
  v142 = (const void *)(a2 + v140);
  if (v138((const void *)(a2 + v140), 1, v136))
  {
    v143 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v137 + 16))(v141, v142, v136);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v141, 0, 1, v136);
  }
  v144 = v37[40];
  v145 = (void *)(a1 + v144);
  v146 = (const void *)(a2 + v144);
  if (v138((const void *)(a2 + v144), 1, v136))
  {
    v147 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v137 + 16))(v145, v146, v136);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v145, 0, 1, v136);
  }
  v148 = v37[41];
  v149 = (void *)(a1 + v148);
  v150 = (const void *)(a2 + v148);
  if (v138((const void *)(a2 + v148), 1, v136))
  {
    v151 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v137 + 16))(v149, v150, v136);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v149, 0, 1, v136);
  }
  *(_BYTE *)(a1 + v37[42]) = *(_BYTE *)(a2 + v37[42]);
  *(_BYTE *)(a1 + v37[43]) = *(_BYTE *)(a2 + v37[43]);
  *(_BYTE *)(a1 + v37[44]) = *(_BYTE *)(a2 + v37[44]);
  v152 = *(int *)(a3 + 24);
  v153 = (_QWORD *)(a1 + v152);
  v154 = (_QWORD *)(a2 + v152);
  v155 = v154[1];
  *v153 = *v154;
  v153[1] = v155;
  swift_retain();
  return a1;
}

uint64_t sub_1CCB0C854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int *v18;
  uint64_t v19;
  uint64_t (*v20)(_BYTE *, uint64_t, int *);
  int v21;
  int v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void (*v39)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(_BYTE *, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  int *v69;
  uint64_t v70;
  uint64_t (*v71)(_BYTE *, uint64_t, int *);
  int v72;
  int v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  void (*v84)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(_QWORD *, uint64_t, uint64_t);
  int v92;
  int v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(_QWORD *, uint64_t, uint64_t);
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(char *, char *, uint64_t);
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  void (*v147)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  void (*v153)(_QWORD *, _QWORD, uint64_t, uint64_t);
  void (*v154)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  void *v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t (*v164)(void *, uint64_t, uint64_t);
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  void *v170;
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  void *v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  unsigned int (*v199)(_QWORD *, uint64_t, uint64_t);
  void (*v200)(char *, char *, uint64_t);
  char *v201;
  char *v202;
  _QWORD *__dst;
  char *__dsta;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int *v210;
  int *v211;
  uint64_t v212;
  uint64_t v213;

  v6 = (_BYTE *)(a2 + 256);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_BYTE *)(a1 + 257) = v6[1];
  *(_BYTE *)(a1 + 258) = v6[2];
  *(_BYTE *)(a1 + 259) = *(_BYTE *)(a2 + 259);
  v7 = *(void **)(a2 + 264);
  v8 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = v6[24];
  *(_BYTE *)(a1 + 281) = v6[25];
  *(_BYTE *)(a1 + 282) = v6[26];
  *(_BYTE *)(a1 + 283) = *(_BYTE *)(a2 + 283);
  v10 = *(void **)(a2 + 288);
  v11 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v10;
  v12 = v10;

  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  v13 = *(_QWORD *)(a2 + 472);
  if (*(_QWORD *)(a1 + 472))
  {
    if (v13)
    {
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
      *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
      *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
      *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
      *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
      *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
      *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
      *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1CCA331A4(a1 + 304);
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
  memcpy((void *)(a1 + 304), (const void *)(a2 + 304), 0x120uLL);
LABEL_8:
  v14 = (int *)type metadata accessor for FMIPDevice();
  v15 = v14[28];
  v16 = (_BYTE *)(a1 + v15);
  v17 = (_BYTE *)(a2 + v15);
  v18 = (int *)type metadata accessor for FMIPPlaySoundMetadata();
  v19 = *((_QWORD *)v18 - 1);
  v20 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      *v16 = *v17;
      v23 = v18[5];
      v24 = &v16[v23];
      v25 = &v17[v23];
      v26 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      v27 = v18[6];
      v28 = &v16[v27];
      v29 = &v17[v27];
      *v28 = *v29;
      v28[1] = v29[1];
      v30 = v18[7];
      v31 = &v16[v30];
      v32 = &v17[v30];
      *v31 = *v32;
      v31[1] = v32[1];
      v33 = v18[8];
      v34 = &v16[v33];
      v35 = &v17[v33];
      *v34 = *v35;
      v34[1] = v35[1];
      v36 = v18[9];
      v37 = &v16[v36];
      v38 = &v17[v36];
      *v37 = *v38;
      v37[1] = v38[1];
      v39 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v19 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v39(v16, 0, 1, v18);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v22)
  {
    sub_1CCA0BF30((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for FMIPPlaySoundMetadata);
LABEL_13:
    v40 = sub_1CCA14E90(&qword_1ED8A7460);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_14;
  }
  *v16 = *v17;
  v99 = v18[5];
  v100 = &v16[v99];
  v101 = &v17[v99];
  v102 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v102 - 8) + 24))(v100, v101, v102);
  v103 = v18[6];
  v104 = &v16[v103];
  v105 = &v17[v103];
  *v104 = *v105;
  v104[1] = v105[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v106 = v18[7];
  v107 = &v16[v106];
  v108 = &v17[v106];
  *v107 = *v108;
  v107[1] = v108[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v109 = v18[8];
  v110 = &v16[v109];
  v111 = &v17[v109];
  *v110 = *v111;
  v110[1] = v111[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v112 = v18[9];
  v113 = &v16[v112];
  v114 = &v17[v112];
  *v113 = *v114;
  v113[1] = v114[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_14:
  v41 = v14[29];
  v42 = a1 + v41;
  v43 = a2 + v41;
  v44 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46(v43, 1, v44);
  if (v47)
  {
    if (!v48)
    {
      *(_BYTE *)v42 = *(_BYTE *)v43;
      *(_BYTE *)(v42 + 1) = *(_BYTE *)(v43 + 1);
      *(_BYTE *)(v42 + 2) = *(_BYTE *)(v43 + 2);
      *(_BYTE *)(v42 + 3) = *(_BYTE *)(v43 + 3);
      *(_QWORD *)(v42 + 8) = *(_QWORD *)(v43 + 8);
      *(_QWORD *)(v42 + 16) = *(_QWORD *)(v43 + 16);
      *(_QWORD *)(v42 + 24) = *(_QWORD *)(v43 + 24);
      *(_QWORD *)(v42 + 32) = *(_QWORD *)(v43 + 32);
      *(_QWORD *)(v42 + 40) = *(_QWORD *)(v43 + 40);
      *(_QWORD *)(v42 + 48) = *(_QWORD *)(v43 + 48);
      *(_BYTE *)(v42 + 56) = *(_BYTE *)(v43 + 56);
      v49 = *(int *)(v44 + 48);
      v205 = v43 + v49;
      v207 = v42 + v49;
      v50 = sub_1CCB635B0();
      v210 = v14;
      v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v51(v207, v205, v50);
      v14 = v210;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v48)
  {
    sub_1CCA0BF30(v42, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
LABEL_19:
    v52 = sub_1CCA14E90(&qword_1ED8A7AA0);
    memcpy((void *)v42, (const void *)v43, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_20;
  }
  *(_BYTE *)v42 = *(_BYTE *)v43;
  *(_BYTE *)(v42 + 1) = *(_BYTE *)(v43 + 1);
  *(_BYTE *)(v42 + 2) = *(_BYTE *)(v43 + 2);
  *(_BYTE *)(v42 + 3) = *(_BYTE *)(v43 + 3);
  *(_QWORD *)(v42 + 8) = *(_QWORD *)(v43 + 8);
  *(_QWORD *)(v42 + 16) = *(_QWORD *)(v43 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v42 + 24) = *(_QWORD *)(v43 + 24);
  *(_QWORD *)(v42 + 32) = *(_QWORD *)(v43 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v42 + 40) = *(_QWORD *)(v43 + 40);
  *(_QWORD *)(v42 + 48) = *(_QWORD *)(v43 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v42 + 56) = *(_BYTE *)(v43 + 56);
  v115 = *(int *)(v44 + 48);
  v116 = v42 + v115;
  v117 = v43 + v115;
  v118 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v118 - 8) + 24))(v116, v117, v118);
LABEL_20:
  v53 = v14[30];
  v54 = (_BYTE *)(a1 + v53);
  v55 = (_BYTE *)(a2 + v53);
  v56 = type metadata accessor for FMIPLockMetadata();
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v57 + 48);
  v59 = v58(v54, 1, v56);
  v60 = v58(v55, 1, v56);
  if (v59)
  {
    if (!v60)
    {
      *v54 = *v55;
      v61 = *(int *)(v56 + 20);
      v62 = &v54[v61];
      v63 = &v55[v61];
      v64 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v62, v63, v64);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v60)
  {
    sub_1CCA0BF30((uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
LABEL_25:
    v65 = sub_1CCA14E90(&qword_1ED8A73B8);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_26;
  }
  *v54 = *v55;
  v119 = *(int *)(v56 + 20);
  v120 = &v54[v119];
  v121 = &v55[v119];
  v122 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v122 - 8) + 24))(v120, v121, v122);
LABEL_26:
  v66 = v14[31];
  v67 = (_BYTE *)(a1 + v66);
  v68 = (_BYTE *)(a2 + v66);
  v69 = (int *)type metadata accessor for FMIPEraseMetadata();
  v70 = *((_QWORD *)v69 - 1);
  v71 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v70 + 48);
  v72 = v71(v67, 1, v69);
  v73 = v71(v68, 1, v69);
  if (v72)
  {
    if (!v73)
    {
      *v67 = *v68;
      v74 = v69[5];
      v75 = &v67[v74];
      v76 = &v68[v74];
      v77 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v75, v76, v77);
      v78 = v69[6];
      v79 = &v67[v78];
      v80 = &v68[v78];
      *v79 = *v80;
      v79[1] = v80[1];
      v81 = v69[7];
      v82 = &v67[v81];
      v83 = &v68[v81];
      *v82 = *v83;
      v82[1] = v83[1];
      v67[v69[8]] = v68[v69[8]];
      v84 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v70 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v84(v67, 0, 1, v69);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v73)
  {
    sub_1CCA0BF30((uint64_t)v67, (uint64_t (*)(_QWORD))type metadata accessor for FMIPEraseMetadata);
LABEL_31:
    v85 = sub_1CCA14E90(&qword_1ED8A73F8);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    goto LABEL_32;
  }
  *v67 = *v68;
  v123 = v69[5];
  v124 = &v67[v123];
  v125 = &v68[v123];
  v126 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v126 - 8) + 24))(v124, v125, v126);
  v127 = v69[6];
  v128 = &v67[v127];
  v129 = &v68[v127];
  *v128 = *v129;
  v128[1] = v129[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v130 = v69[7];
  v131 = &v67[v130];
  v132 = &v68[v130];
  *v131 = *v132;
  v131[1] = v132[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v67[v69[8]] = v68[v69[8]];
LABEL_32:
  v86 = v14[32];
  v87 = (_QWORD *)(a1 + v86);
  v88 = (_QWORD *)(a2 + v86);
  v89 = type metadata accessor for FMIPItemGroup();
  v90 = *(_QWORD *)(v89 - 8);
  v91 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v90 + 48);
  v92 = v91(v87, 1, v89);
  v93 = v91(v88, 1, v89);
  if (!v92)
  {
    if (v93)
    {
      sub_1CCA0BF30((uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      goto LABEL_38;
    }
    v211 = v14;
    v213 = a3;
    *v87 = *v88;
    v87[1] = v88[1];
    v87[2] = v88[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v87[3] = v88[3];
    v87[4] = v88[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v87[5] = v88[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v87[6] = v88[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v87[7] = v88[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v87[8] = v88[8];
    v87[9] = v88[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v209 = v89;
    v133 = *(int *)(v89 + 48);
    v134 = (_QWORD *)((char *)v87 + v133);
    v135 = (_QWORD *)((char *)v88 + v133);
    v136 = type metadata accessor for FMIPItemLostModeMetadata();
    v137 = *(_QWORD *)(v136 - 8);
    v138 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v137 + 48);
    v139 = v138(v134, 1, v136);
    v140 = v138(v135, 1, v136);
    if (v139)
    {
      if (!v140)
      {
        *v134 = *v135;
        v134[1] = v135[1];
        v134[2] = v135[2];
        v134[3] = v135[3];
        v141 = *(int *)(v136 + 24);
        __dsta = (char *)v135 + v141;
        v206 = (char *)v134 + v141;
        v142 = sub_1CCB635B0();
        v143 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v143(v206, __dsta, v142);
        v144 = *(int *)(v136 + 28);
        v145 = (_QWORD *)((char *)v134 + v144);
        v146 = (_QWORD *)((char *)v135 + v144);
        *v145 = *v146;
        v145[1] = v146[1];
        v147 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v137 + 56);
        swift_bridgeObjectRetain();
        v147(v134, 0, 1, v136);
LABEL_51:
        v14 = v211;
        *(_QWORD *)((char *)v87 + *(int *)(v209 + 52)) = *(_QWORD *)((char *)v88 + *(int *)(v209 + 52));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        a3 = v213;
        goto LABEL_52;
      }
    }
    else
    {
      if (!v140)
      {
        *v134 = *v135;
        v134[1] = v135[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v134[2] = v135[2];
        v134[3] = v135[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v191 = *(int *)(v136 + 24);
        v192 = (char *)v134 + v191;
        v193 = (char *)v135 + v191;
        v194 = sub_1CCB635B0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v194 - 8) + 24))(v192, v193, v194);
        v195 = *(int *)(v136 + 28);
        v196 = (_QWORD *)((char *)v134 + v195);
        v197 = (_QWORD *)((char *)v135 + v195);
        *v196 = *v197;
        v196[1] = v197[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
      sub_1CCA0BF30((uint64_t)v134, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemLostModeMetadata);
    }
    v155 = sub_1CCA14E90(&qword_1ED8A8CD0);
    memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
    goto LABEL_51;
  }
  if (v93)
  {
LABEL_38:
    v98 = sub_1CCA14E90(&qword_1ED8A8C30);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    goto LABEL_52;
  }
  v212 = a3;
  *v87 = *v88;
  v87[1] = v88[1];
  v87[2] = v88[2];
  v87[3] = v88[3];
  v87[4] = v88[4];
  v87[5] = v88[5];
  v87[6] = v88[6];
  v87[7] = v88[7];
  v87[8] = v88[8];
  v87[9] = v88[9];
  v208 = v89;
  v94 = *(int *)(v89 + 48);
  __dst = (_QWORD *)((char *)v87 + v94);
  v95 = (_QWORD *)((char *)v88 + v94);
  v96 = type metadata accessor for FMIPItemLostModeMetadata();
  v198 = *(_QWORD *)(v96 - 8);
  v199 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v198 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v199(v95, 1, v96))
  {
    v97 = sub_1CCA14E90(&qword_1ED8A8CD0);
    memcpy(__dst, v95, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
  }
  else
  {
    *__dst = *v95;
    __dst[1] = v95[1];
    __dst[2] = v95[2];
    __dst[3] = v95[3];
    v148 = *(int *)(v96 + 24);
    v201 = (char *)v95 + v148;
    v202 = (char *)__dst + v148;
    v149 = sub_1CCB635B0();
    v200 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v200(v202, v201, v149);
    v150 = *(int *)(v96 + 28);
    v151 = (_QWORD *)((char *)__dst + v150);
    v152 = (_QWORD *)((char *)v95 + v150);
    *v151 = *v152;
    v151[1] = v152[1];
    v153 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v198 + 56);
    swift_bridgeObjectRetain();
    v153(__dst, 0, 1, v96);
  }
  a3 = v212;
  *(_QWORD *)((char *)v87 + *(int *)(v208 + 52)) = *(_QWORD *)((char *)v88 + *(int *)(v208 + 52));
  v154 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v90 + 56);
  swift_bridgeObjectRetain();
  v154(v87, 0, 1, v208);
LABEL_52:
  *(_BYTE *)(a1 + v14[33]) = *(_BYTE *)(a2 + v14[33]);
  *(_BYTE *)(a1 + v14[34]) = *(_BYTE *)(a2 + v14[34]);
  *(_BYTE *)(a1 + v14[35]) = *(_BYTE *)(a2 + v14[35]);
  v156 = v14[36];
  v157 = (_QWORD *)(a1 + v156);
  v158 = (_QWORD *)(a2 + v156);
  *v157 = *v158;
  v157[1] = v158[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v14[37]) = *(_QWORD *)(a2 + v14[37]);
  v159 = v14[38];
  v160 = (void *)(a1 + v159);
  v161 = (void *)(a2 + v159);
  v162 = sub_1CCB635B0();
  v163 = *(_QWORD *)(v162 - 8);
  v164 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v163 + 48);
  v165 = v164(v160, 1, v162);
  v166 = v164(v161, 1, v162);
  if (v165)
  {
    if (!v166)
    {
      (*(void (**)(void *, void *, uint64_t))(v163 + 16))(v160, v161, v162);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v160, 0, 1, v162);
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v166)
  {
    (*(void (**)(void *, uint64_t))(v163 + 8))(v160, v162);
LABEL_57:
    v167 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v160, v161, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
    goto LABEL_58;
  }
  (*(void (**)(void *, void *, uint64_t))(v163 + 24))(v160, v161, v162);
LABEL_58:
  v168 = v14[39];
  v169 = (void *)(a1 + v168);
  v170 = (void *)(a2 + v168);
  v171 = v164((void *)(a1 + v168), 1, v162);
  v172 = v164(v170, 1, v162);
  if (v171)
  {
    if (!v172)
    {
      (*(void (**)(void *, void *, uint64_t))(v163 + 16))(v169, v170, v162);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v169, 0, 1, v162);
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (v172)
  {
    (*(void (**)(void *, uint64_t))(v163 + 8))(v169, v162);
LABEL_63:
    v173 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    goto LABEL_64;
  }
  (*(void (**)(void *, void *, uint64_t))(v163 + 24))(v169, v170, v162);
LABEL_64:
  v174 = v14[40];
  v175 = (void *)(a1 + v174);
  v176 = (void *)(a2 + v174);
  v177 = v164((void *)(a1 + v174), 1, v162);
  v178 = v164(v176, 1, v162);
  if (v177)
  {
    if (!v178)
    {
      (*(void (**)(void *, void *, uint64_t))(v163 + 16))(v175, v176, v162);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v175, 0, 1, v162);
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  if (v178)
  {
    (*(void (**)(void *, uint64_t))(v163 + 8))(v175, v162);
LABEL_69:
    v179 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
    goto LABEL_70;
  }
  (*(void (**)(void *, void *, uint64_t))(v163 + 24))(v175, v176, v162);
LABEL_70:
  v180 = v14[41];
  v181 = (void *)(a1 + v180);
  v182 = (void *)(a2 + v180);
  v183 = v164((void *)(a1 + v180), 1, v162);
  v184 = v164(v182, 1, v162);
  if (!v183)
  {
    if (!v184)
    {
      (*(void (**)(void *, void *, uint64_t))(v163 + 24))(v181, v182, v162);
      goto LABEL_76;
    }
    (*(void (**)(void *, uint64_t))(v163 + 8))(v181, v162);
    goto LABEL_75;
  }
  if (v184)
  {
LABEL_75:
    v185 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
    goto LABEL_76;
  }
  (*(void (**)(void *, void *, uint64_t))(v163 + 16))(v181, v182, v162);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v163 + 56))(v181, 0, 1, v162);
LABEL_76:
  *(_BYTE *)(a1 + v14[42]) = *(_BYTE *)(a2 + v14[42]);
  *(_BYTE *)(a1 + v14[43]) = *(_BYTE *)(a2 + v14[43]);
  *(_BYTE *)(a1 + v14[44]) = *(_BYTE *)(a2 + v14[44]);
  v186 = *(int *)(a3 + 24);
  v187 = (_QWORD *)(a1 + v186);
  v188 = (_QWORD *)(a2 + v186);
  v189 = v188[1];
  *v187 = *v188;
  v187[1] = v189;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1CCB0DF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int *v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const void *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(const void *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const void *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const void *v81;
  uint64_t v82;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v8 = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = v8;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  memcpy((void *)(a1 + 304), (const void *)(a2 + 304), 0x120uLL);
  v9 = (int *)type metadata accessor for FMIPDevice();
  v10 = v9[28];
  v11 = (_BYTE *)(a1 + v10);
  v12 = (_BYTE *)(a2 + v10);
  v13 = (int *)type metadata accessor for FMIPPlaySoundMetadata();
  v14 = *((_QWORD *)v13 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    v15 = sub_1CCA14E90(&qword_1ED8A7460);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    *v11 = *v12;
    v16 = v13[5];
    v17 = &v11[v16];
    v18 = &v12[v16];
    v19 = sub_1CCB635B0();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
    *(_OWORD *)&v11[v13[6]] = *(_OWORD *)&v12[v13[6]];
    *(_OWORD *)&v11[v13[7]] = *(_OWORD *)&v12[v13[7]];
    *(_OWORD *)&v11[v13[8]] = *(_OWORD *)&v12[v13[8]];
    *(_OWORD *)&v11[v13[9]] = *(_OWORD *)&v12[v13[9]];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v14 + 56))(v11, 0, 1, v13);
  }
  v20 = v9[29];
  v21 = (_DWORD *)(a1 + v20);
  v22 = (_DWORD *)(a2 + v20);
  v23 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = sub_1CCA14E90(&qword_1ED8A7AA0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    *v21 = *v22;
    *(_OWORD *)(v21 + 2) = *(_OWORD *)(v22 + 2);
    *(_OWORD *)(v21 + 6) = *(_OWORD *)(v22 + 6);
    *(_OWORD *)(v21 + 10) = *(_OWORD *)(v22 + 10);
    *((_BYTE *)v21 + 56) = *((_BYTE *)v22 + 56);
    v26 = *(int *)(v23 + 48);
    v27 = (char *)v21 + v26;
    v28 = (char *)v22 + v26;
    v29 = sub_1CCB635B0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v30 = v9[30];
  v31 = (_BYTE *)(a1 + v30);
  v32 = (_BYTE *)(a2 + v30);
  v33 = type metadata accessor for FMIPLockMetadata();
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = sub_1CCA14E90(&qword_1ED8A73B8);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    *v31 = *v32;
    v36 = *(int *)(v33 + 20);
    v37 = &v31[v36];
    v38 = &v32[v36];
    v39 = sub_1CCB635B0();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  v40 = v9[31];
  v41 = (_BYTE *)(a1 + v40);
  v42 = (_BYTE *)(a2 + v40);
  v43 = (int *)type metadata accessor for FMIPEraseMetadata();
  v44 = *((_QWORD *)v43 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v44 + 48))(v42, 1, v43))
  {
    v45 = sub_1CCA14E90(&qword_1ED8A73F8);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    *v41 = *v42;
    v46 = v43[5];
    v47 = &v41[v46];
    v48 = &v42[v46];
    v49 = sub_1CCB635B0();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v47, v48, v49);
    *(_OWORD *)&v41[v43[6]] = *(_OWORD *)&v42[v43[6]];
    *(_OWORD *)&v41[v43[7]] = *(_OWORD *)&v42[v43[7]];
    v41[v43[8]] = v42[v43[8]];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v44 + 56))(v41, 0, 1, v43);
  }
  v50 = v9[32];
  v51 = (_QWORD *)(a1 + v50);
  v52 = (_QWORD *)(a2 + v50);
  v53 = type metadata accessor for FMIPItemGroup();
  v54 = *(_QWORD *)(v53 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
  {
    v55 = sub_1CCA14E90(&qword_1ED8A8C30);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v87 = a3;
    *v51 = *v52;
    *(_OWORD *)(v51 + 1) = *(_OWORD *)(v52 + 1);
    *(_OWORD *)(v51 + 3) = *(_OWORD *)(v52 + 3);
    *(_OWORD *)(v51 + 5) = *(_OWORD *)(v52 + 5);
    *(_OWORD *)(v51 + 7) = *(_OWORD *)(v52 + 7);
    v51[9] = v52[9];
    v56 = *(int *)(v53 + 48);
    v57 = (_OWORD *)((char *)v51 + v56);
    v58 = (_OWORD *)((char *)v52 + v56);
    v59 = type metadata accessor for FMIPItemLostModeMetadata();
    v86 = *(_QWORD *)(v59 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v86 + 48))(v58, 1, v59))
    {
      v60 = sub_1CCA14E90(&qword_1ED8A8CD0);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      v61 = v58[1];
      *v57 = *v58;
      v57[1] = v61;
      v62 = *(int *)(v59 + 24);
      v84 = (char *)v58 + v62;
      v85 = (char *)v57 + v62;
      v63 = sub_1CCB635B0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v85, v84, v63);
      *(_OWORD *)((char *)v57 + *(int *)(v59 + 28)) = *(_OWORD *)((char *)v58 + *(int *)(v59 + 28));
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v57, 0, 1, v59);
    }
    *(_QWORD *)((char *)v51 + *(int *)(v53 + 52)) = *(_QWORD *)((char *)v52 + *(int *)(v53 + 52));
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
    a3 = v87;
  }
  *(_BYTE *)(a1 + v9[33]) = *(_BYTE *)(a2 + v9[33]);
  *(_BYTE *)(a1 + v9[34]) = *(_BYTE *)(a2 + v9[34]);
  *(_BYTE *)(a1 + v9[35]) = *(_BYTE *)(a2 + v9[35]);
  *(_OWORD *)(a1 + v9[36]) = *(_OWORD *)(a2 + v9[36]);
  *(_QWORD *)(a1 + v9[37]) = *(_QWORD *)(a2 + v9[37]);
  v64 = v9[38];
  v65 = (void *)(a1 + v64);
  v66 = (const void *)(a2 + v64);
  v67 = sub_1CCB635B0();
  v68 = *(_QWORD *)(v67 - 8);
  v69 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v68 + 48);
  if (v69(v66, 1, v67))
  {
    v70 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v68 + 32))(v65, v66, v67);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  }
  v71 = v9[39];
  v72 = (void *)(a1 + v71);
  v73 = (const void *)(a2 + v71);
  if (v69((const void *)(a2 + v71), 1, v67))
  {
    v74 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v68 + 32))(v72, v73, v67);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v72, 0, 1, v67);
  }
  v75 = v9[40];
  v76 = (void *)(a1 + v75);
  v77 = (const void *)(a2 + v75);
  if (v69((const void *)(a2 + v75), 1, v67))
  {
    v78 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v68 + 32))(v76, v77, v67);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v76, 0, 1, v67);
  }
  v79 = v9[41];
  v80 = (void *)(a1 + v79);
  v81 = (const void *)(a2 + v79);
  if (v69((const void *)(a2 + v79), 1, v67))
  {
    v82 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v68 + 32))(v80, v81, v67);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v80, 0, 1, v67);
  }
  *(_BYTE *)(a1 + v9[42]) = *(_BYTE *)(a2 + v9[42]);
  *(_BYTE *)(a1 + v9[43]) = *(_BYTE *)(a2 + v9[43]);
  *(_BYTE *)(a1 + v9[44]) = *(_BYTE *)(a2 + v9[44]);
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1CCB0E6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  int *v38;
  uint64_t v39;
  uint64_t (*v40)(_BYTE *, uint64_t, int *);
  int v41;
  int v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(_BYTE *, uint64_t, uint64_t);
  int v67;
  int v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  int *v77;
  uint64_t v78;
  uint64_t (*v79)(_BYTE *, uint64_t, int *);
  int v80;
  int v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  int v93;
  int v94;
  uint64_t v95;
  _OWORD *v96;
  _OWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _OWORD *v154;
  uint64_t v155;
  uint64_t (*v156)(uint64_t, uint64_t, uint64_t);
  int v157;
  size_t v158;
  void *v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t (*v187)(void *, uint64_t, uint64_t);
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  void *v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  void *v205;
  int v206;
  int v207;
  uint64_t v208;
  char *v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  char *v215;
  void *__src;
  uint64_t v217;
  uint64_t v218;

  v6 = (_BYTE *)(a2 + 256);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v15;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v17;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  v18 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v19;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_BYTE *)(a1 + 257) = v6[1];
  *(_BYTE *)(a1 + 258) = v6[2];
  *(_BYTE *)(a1 + 259) = *(_BYTE *)(a2 + 259);
  v20 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);

  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = v6[24];
  *(_BYTE *)(a1 + 281) = v6[25];
  *(_BYTE *)(a1 + 282) = v6[26];
  *(_BYTE *)(a1 + 283) = *(_BYTE *)(a2 + 283);
  v21 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);

  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  if (*(_QWORD *)(a1 + 472))
  {
    if (*(_QWORD *)(a2 + 472))
    {
      v22 = *(_QWORD *)(a2 + 312);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 312) = v22;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = v23;
      swift_bridgeObjectRelease();
      v24 = *(_QWORD *)(a2 + 352);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 352) = v24;
      swift_bridgeObjectRelease();
      v25 = *(_QWORD *)(a2 + 368);
      *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 368) = v25;
      swift_bridgeObjectRelease();
      v26 = *(_QWORD *)(a2 + 384);
      *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 384) = v26;
      swift_bridgeObjectRelease();
      v27 = *(_QWORD *)(a2 + 400);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      *(_QWORD *)(a1 + 400) = v27;
      swift_bridgeObjectRelease();
      v28 = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
      *(_QWORD *)(a1 + 416) = v28;
      swift_bridgeObjectRelease();
      v29 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
      *(_QWORD *)(a1 + 432) = v29;
      swift_bridgeObjectRelease();
      v30 = *(_QWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *(_QWORD *)(a1 + 448) = v30;
      swift_bridgeObjectRelease();
      v31 = *(_QWORD *)(a2 + 464);
      *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
      *(_QWORD *)(a1 + 464) = v31;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)(a2 + 488);
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
      *(_QWORD *)(a1 + 488) = v32;
      swift_bridgeObjectRelease();
      v33 = *(_QWORD *)(a2 + 504);
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
      *(_QWORD *)(a1 + 504) = v33;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
      *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
      *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1CCA331A4(a1 + 304);
  }
  memcpy((void *)(a1 + 304), (const void *)(a2 + 304), 0x120uLL);
LABEL_6:
  v34 = (int *)type metadata accessor for FMIPDevice();
  v35 = v34[28];
  v36 = (_BYTE *)(a1 + v35);
  v37 = (_BYTE *)(a2 + v35);
  v38 = (int *)type metadata accessor for FMIPPlaySoundMetadata();
  v39 = *((_QWORD *)v38 - 1);
  v40 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (v41)
  {
    if (!v42)
    {
      *v36 = *v37;
      v43 = v38[5];
      v44 = &v36[v43];
      v45 = &v37[v43];
      v46 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(v44, v45, v46);
      *(_OWORD *)&v36[v38[6]] = *(_OWORD *)&v37[v38[6]];
      *(_OWORD *)&v36[v38[7]] = *(_OWORD *)&v37[v38[7]];
      *(_OWORD *)&v36[v38[8]] = *(_OWORD *)&v37[v38[8]];
      *(_OWORD *)&v36[v38[9]] = *(_OWORD *)&v37[v38[9]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v39 + 56))(v36, 0, 1, v38);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v42)
  {
    sub_1CCA0BF30((uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for FMIPPlaySoundMetadata);
LABEL_11:
    v47 = sub_1CCA14E90(&qword_1ED8A7460);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_12;
  }
  *v36 = *v37;
  v101 = v38[5];
  v102 = &v36[v101];
  v103 = &v37[v101];
  v104 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v104 - 8) + 40))(v102, v103, v104);
  v105 = v38[6];
  v106 = &v36[v105];
  v107 = (uint64_t *)&v37[v105];
  v109 = *v107;
  v108 = v107[1];
  *v106 = v109;
  v106[1] = v108;
  swift_bridgeObjectRelease();
  v110 = v38[7];
  v111 = &v36[v110];
  v112 = (uint64_t *)&v37[v110];
  v114 = *v112;
  v113 = v112[1];
  *v111 = v114;
  v111[1] = v113;
  swift_bridgeObjectRelease();
  v115 = v38[8];
  v116 = &v36[v115];
  v117 = (uint64_t *)&v37[v115];
  v119 = *v117;
  v118 = v117[1];
  *v116 = v119;
  v116[1] = v118;
  swift_bridgeObjectRelease();
  v120 = v38[9];
  v121 = &v36[v120];
  v122 = (uint64_t *)&v37[v120];
  v124 = *v122;
  v123 = v122[1];
  *v121 = v124;
  v121[1] = v123;
  swift_bridgeObjectRelease();
LABEL_12:
  v48 = v34[29];
  v49 = a1 + v48;
  v50 = a2 + v48;
  v51 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v52 = *(_QWORD *)(v51 - 8);
  v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  v54 = v53(v49, 1, v51);
  v55 = v53(v50, 1, v51);
  if (v54)
  {
    if (!v55)
    {
      *(_DWORD *)v49 = *(_DWORD *)v50;
      *(_OWORD *)(v49 + 8) = *(_OWORD *)(v50 + 8);
      *(_OWORD *)(v49 + 24) = *(_OWORD *)(v50 + 24);
      *(_OWORD *)(v49 + 40) = *(_OWORD *)(v50 + 40);
      *(_BYTE *)(v49 + 56) = *(_BYTE *)(v50 + 56);
      v56 = *(int *)(v51 + 48);
      v57 = v49 + v56;
      v58 = v50 + v56;
      v59 = sub_1CCB635B0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 32))(v57, v58, v59);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v55)
  {
    sub_1CCA0BF30(v49, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
LABEL_17:
    v60 = sub_1CCA14E90(&qword_1ED8A7AA0);
    memcpy((void *)v49, (const void *)v50, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_18;
  }
  *(_BYTE *)v49 = *(_BYTE *)v50;
  *(_BYTE *)(v49 + 1) = *(_BYTE *)(v50 + 1);
  *(_BYTE *)(v49 + 2) = *(_BYTE *)(v50 + 2);
  *(_BYTE *)(v49 + 3) = *(_BYTE *)(v50 + 3);
  v125 = *(_QWORD *)(v50 + 16);
  *(_QWORD *)(v49 + 8) = *(_QWORD *)(v50 + 8);
  *(_QWORD *)(v49 + 16) = v125;
  swift_bridgeObjectRelease();
  v126 = *(_QWORD *)(v50 + 32);
  *(_QWORD *)(v49 + 24) = *(_QWORD *)(v50 + 24);
  *(_QWORD *)(v49 + 32) = v126;
  swift_bridgeObjectRelease();
  v127 = *(_QWORD *)(v50 + 48);
  *(_QWORD *)(v49 + 40) = *(_QWORD *)(v50 + 40);
  *(_QWORD *)(v49 + 48) = v127;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v49 + 56) = *(_BYTE *)(v50 + 56);
  v128 = *(int *)(v51 + 48);
  v129 = v49 + v128;
  v130 = v50 + v128;
  v131 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 40))(v129, v130, v131);
LABEL_18:
  v61 = v34[30];
  v62 = (_BYTE *)(a1 + v61);
  v63 = (_BYTE *)(a2 + v61);
  v64 = type metadata accessor for FMIPLockMetadata();
  v65 = *(_QWORD *)(v64 - 8);
  v66 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v65 + 48);
  v67 = v66(v62, 1, v64);
  v68 = v66(v63, 1, v64);
  if (v67)
  {
    if (!v68)
    {
      *v62 = *v63;
      v69 = *(int *)(v64 + 20);
      v70 = &v62[v69];
      v71 = &v63[v69];
      v72 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v72 - 8) + 32))(v70, v71, v72);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v68)
  {
    sub_1CCA0BF30((uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
LABEL_23:
    v73 = sub_1CCA14E90(&qword_1ED8A73B8);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
    goto LABEL_24;
  }
  *v62 = *v63;
  v132 = *(int *)(v64 + 20);
  v133 = &v62[v132];
  v134 = &v63[v132];
  v135 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v135 - 8) + 40))(v133, v134, v135);
LABEL_24:
  v74 = v34[31];
  v75 = (_BYTE *)(a1 + v74);
  v76 = (_BYTE *)(a2 + v74);
  v77 = (int *)type metadata accessor for FMIPEraseMetadata();
  v78 = *((_QWORD *)v77 - 1);
  v79 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v78 + 48);
  v80 = v79(v75, 1, v77);
  v81 = v79(v76, 1, v77);
  if (v80)
  {
    if (!v81)
    {
      *v75 = *v76;
      v82 = v77[5];
      v83 = &v75[v82];
      v84 = &v76[v82];
      v85 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v83, v84, v85);
      *(_OWORD *)&v75[v77[6]] = *(_OWORD *)&v76[v77[6]];
      *(_OWORD *)&v75[v77[7]] = *(_OWORD *)&v76[v77[7]];
      v75[v77[8]] = v76[v77[8]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v78 + 56))(v75, 0, 1, v77);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v81)
  {
    sub_1CCA0BF30((uint64_t)v75, (uint64_t (*)(_QWORD))type metadata accessor for FMIPEraseMetadata);
LABEL_29:
    v86 = sub_1CCA14E90(&qword_1ED8A73F8);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_30;
  }
  *v75 = *v76;
  v136 = v77[5];
  v137 = &v75[v136];
  v138 = &v76[v136];
  v139 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v139 - 8) + 40))(v137, v138, v139);
  v140 = v77[6];
  v141 = &v75[v140];
  v142 = (uint64_t *)&v76[v140];
  v144 = *v142;
  v143 = v142[1];
  *v141 = v144;
  v141[1] = v143;
  swift_bridgeObjectRelease();
  v145 = v77[7];
  v146 = &v75[v145];
  v147 = (uint64_t *)&v76[v145];
  v149 = *v147;
  v148 = v147[1];
  *v146 = v149;
  v146[1] = v148;
  swift_bridgeObjectRelease();
  v75[v77[8]] = v76[v77[8]];
LABEL_30:
  v87 = v34[32];
  v88 = a1 + v87;
  v89 = a2 + v87;
  v90 = type metadata accessor for FMIPItemGroup();
  v91 = *(_QWORD *)(v90 - 8);
  v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
  v93 = v92(v88, 1, v90);
  v94 = v92(v89, 1, v90);
  if (!v93)
  {
    if (v94)
    {
      sub_1CCA0BF30(v88, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      goto LABEL_36;
    }
    v218 = a3;
    *(_OWORD *)v88 = *(_OWORD *)v89;
    *(_QWORD *)(v88 + 16) = *(_QWORD *)(v89 + 16);
    swift_bridgeObjectRelease();
    v150 = *(_QWORD *)(v89 + 32);
    *(_QWORD *)(v88 + 24) = *(_QWORD *)(v89 + 24);
    *(_QWORD *)(v88 + 32) = v150;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v88 + 40) = *(_QWORD *)(v89 + 40);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v88 + 48) = *(_QWORD *)(v89 + 48);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v88 + 56) = *(_QWORD *)(v89 + 56);
    swift_bridgeObjectRelease();
    v151 = *(_QWORD *)(v89 + 72);
    *(_QWORD *)(v88 + 64) = *(_QWORD *)(v89 + 64);
    *(_QWORD *)(v88 + 72) = v151;
    swift_bridgeObjectRelease();
    v152 = *(int *)(v90 + 48);
    v153 = v88 + v152;
    v154 = (_OWORD *)(v89 + v152);
    v155 = type metadata accessor for FMIPItemLostModeMetadata();
    v211 = *(_QWORD *)(v155 - 8);
    v214 = v153;
    v156 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v211 + 48);
    LODWORD(v153) = v156(v153, 1, v155);
    v157 = v156((uint64_t)v154, 1, v155);
    if ((_DWORD)v153)
    {
      if (!v157)
      {
        v163 = v154[1];
        *(_OWORD *)v214 = *v154;
        *(_OWORD *)(v214 + 16) = v163;
        v164 = *(int *)(v155 + 24);
        v165 = v214 + v164;
        v210 = (char *)v154 + v164;
        v166 = sub_1CCB635B0();
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 32))(v165, v210, v166);
        *(_OWORD *)(v214 + *(int *)(v155 + 28)) = *(_OWORD *)((char *)v154 + *(int *)(v155 + 28));
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v211 + 56))(v214, 0, 1, v155);
        goto LABEL_51;
      }
      v158 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1ED8A8CD0) - 8) + 64);
      v159 = (void *)v214;
    }
    else
    {
      if (!v157)
      {
        v167 = *((_QWORD *)v154 + 1);
        *(_QWORD *)v214 = *(_QWORD *)v154;
        *(_QWORD *)(v214 + 8) = v167;
        swift_bridgeObjectRelease();
        v168 = *((_QWORD *)v154 + 3);
        *(_QWORD *)(v214 + 16) = *((_QWORD *)v154 + 2);
        *(_QWORD *)(v214 + 24) = v168;
        swift_bridgeObjectRelease();
        v169 = *(int *)(v155 + 24);
        v170 = v214 + v169;
        v213 = (char *)v154 + v169;
        v171 = sub_1CCB635B0();
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v171 - 8) + 40))(v170, v213, v171);
        v172 = *(int *)(v155 + 28);
        v173 = (_QWORD *)(v214 + v172);
        v174 = (uint64_t *)((char *)v154 + v172);
        v176 = *v174;
        v175 = v174[1];
        *v173 = v176;
        v173[1] = v175;
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
      sub_1CCA0BF30(v214, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemLostModeMetadata);
      v158 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1ED8A8CD0) - 8) + 64);
      v159 = (void *)v214;
    }
    memcpy(v159, v154, v158);
LABEL_51:
    a3 = v218;
    *(_QWORD *)(v88 + *(int *)(v90 + 52)) = *(_QWORD *)(v89 + *(int *)(v90 + 52));
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  if (v94)
  {
LABEL_36:
    v100 = sub_1CCA14E90(&qword_1ED8A8C30);
    memcpy((void *)v88, (const void *)v89, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    goto LABEL_52;
  }
  v217 = a3;
  *(_QWORD *)v88 = *(_QWORD *)v89;
  *(_OWORD *)(v88 + 8) = *(_OWORD *)(v89 + 8);
  *(_OWORD *)(v88 + 24) = *(_OWORD *)(v89 + 24);
  *(_OWORD *)(v88 + 40) = *(_OWORD *)(v89 + 40);
  *(_OWORD *)(v88 + 56) = *(_OWORD *)(v89 + 56);
  *(_QWORD *)(v88 + 72) = *(_QWORD *)(v89 + 72);
  v95 = *(int *)(v90 + 48);
  v96 = (_OWORD *)(v88 + v95);
  v97 = (_OWORD *)(v89 + v95);
  v98 = type metadata accessor for FMIPItemLostModeMetadata();
  __src = *(void **)(v98 - 8);
  if ((*((unsigned int (**)(_OWORD *, uint64_t, uint64_t))__src + 6))(v97, 1, v98))
  {
    v99 = sub_1CCA14E90(&qword_1ED8A8CD0);
    memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
  }
  else
  {
    v160 = v97[1];
    *v96 = *v97;
    v96[1] = v160;
    v161 = *(int *)(v98 + 24);
    v212 = (char *)v97 + v161;
    v215 = (char *)v96 + v161;
    v162 = sub_1CCB635B0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v162 - 8) + 32))(v215, v212, v162);
    *(_OWORD *)((char *)v96 + *(int *)(v98 + 28)) = *(_OWORD *)((char *)v97 + *(int *)(v98 + 28));
    (*((void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))__src + 7))(v96, 0, 1, v98);
  }
  a3 = v217;
  *(_QWORD *)(v88 + *(int *)(v90 + 52)) = *(_QWORD *)(v89 + *(int *)(v90 + 52));
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
LABEL_52:
  *(_BYTE *)(a1 + v34[33]) = *(_BYTE *)(a2 + v34[33]);
  *(_BYTE *)(a1 + v34[34]) = *(_BYTE *)(a2 + v34[34]);
  *(_BYTE *)(a1 + v34[35]) = *(_BYTE *)(a2 + v34[35]);
  v177 = v34[36];
  v178 = (_QWORD *)(a1 + v177);
  v179 = (uint64_t *)(a2 + v177);
  v181 = *v179;
  v180 = v179[1];
  *v178 = v181;
  v178[1] = v180;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v34[37]) = *(_QWORD *)(a2 + v34[37]);
  v182 = v34[38];
  v183 = (void *)(a1 + v182);
  v184 = (void *)(a2 + v182);
  v185 = sub_1CCB635B0();
  v186 = *(_QWORD *)(v185 - 8);
  v187 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v186 + 48);
  v188 = v187(v183, 1, v185);
  v189 = v187(v184, 1, v185);
  if (v188)
  {
    if (!v189)
    {
      (*(void (**)(void *, void *, uint64_t))(v186 + 32))(v183, v184, v185);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v186 + 56))(v183, 0, 1, v185);
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v189)
  {
    (*(void (**)(void *, uint64_t))(v186 + 8))(v183, v185);
LABEL_57:
    v190 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
    goto LABEL_58;
  }
  (*(void (**)(void *, void *, uint64_t))(v186 + 40))(v183, v184, v185);
LABEL_58:
  v191 = v34[39];
  v192 = (void *)(a1 + v191);
  v193 = (void *)(a2 + v191);
  v194 = v187((void *)(a1 + v191), 1, v185);
  v195 = v187(v193, 1, v185);
  if (v194)
  {
    if (!v195)
    {
      (*(void (**)(void *, void *, uint64_t))(v186 + 32))(v192, v193, v185);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v186 + 56))(v192, 0, 1, v185);
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (v195)
  {
    (*(void (**)(void *, uint64_t))(v186 + 8))(v192, v185);
LABEL_63:
    v196 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v192, v193, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
    goto LABEL_64;
  }
  (*(void (**)(void *, void *, uint64_t))(v186 + 40))(v192, v193, v185);
LABEL_64:
  v197 = v34[40];
  v198 = (void *)(a1 + v197);
  v199 = (void *)(a2 + v197);
  v200 = v187((void *)(a1 + v197), 1, v185);
  v201 = v187(v199, 1, v185);
  if (v200)
  {
    if (!v201)
    {
      (*(void (**)(void *, void *, uint64_t))(v186 + 32))(v198, v199, v185);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v186 + 56))(v198, 0, 1, v185);
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  if (v201)
  {
    (*(void (**)(void *, uint64_t))(v186 + 8))(v198, v185);
LABEL_69:
    v202 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v202 - 8) + 64));
    goto LABEL_70;
  }
  (*(void (**)(void *, void *, uint64_t))(v186 + 40))(v198, v199, v185);
LABEL_70:
  v203 = v34[41];
  v204 = (void *)(a1 + v203);
  v205 = (void *)(a2 + v203);
  v206 = v187((void *)(a1 + v203), 1, v185);
  v207 = v187(v205, 1, v185);
  if (!v206)
  {
    if (!v207)
    {
      (*(void (**)(void *, void *, uint64_t))(v186 + 40))(v204, v205, v185);
      goto LABEL_76;
    }
    (*(void (**)(void *, uint64_t))(v186 + 8))(v204, v185);
    goto LABEL_75;
  }
  if (v207)
  {
LABEL_75:
    v208 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
    goto LABEL_76;
  }
  (*(void (**)(void *, void *, uint64_t))(v186 + 32))(v204, v205, v185);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v186 + 56))(v204, 0, 1, v185);
LABEL_76:
  *(_BYTE *)(a1 + v34[42]) = *(_BYTE *)(a2 + v34[42]);
  *(_BYTE *)(a1 + v34[43]) = *(_BYTE *)(a2 + v34[43]);
  *(_BYTE *)(a1 + v34[44]) = *(_BYTE *)(a2 + v34[44]);
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t sub_1CCB0F6D8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCB0F6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for FMIPDevice();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1CCB0F760()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCB0F76C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for FMIPDevice();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for FMIPMonitoredDevice(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E4D28);
}

uint64_t sub_1CCB0F7F8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FMIPDevice();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1CCB0F87C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t aBlock[6];

  v2 = v1;
  v4 = sub_1CCB63820();
  v37 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v36 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63868();
  v34 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  MEMORY[0x1E0C80A78](v6);
  v33 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FMIPDevice();
  v32 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v32 + 64);
  v10 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v29 - v12;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v14 = sub_1CCB637FC();
  sub_1CCA16C20(v14, (uint64_t)qword_1ED8AD7F8);
  sub_1CCA0BEEC(a1, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v15 = sub_1CCB637D8();
  v16 = sub_1CCB63D48();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v31 = v4;
    v18 = v17;
    v29 = swift_slowAlloc();
    aBlock[0] = v29;
    *(_DWORD *)v18 = 136315394;
    v38 = sub_1CCA0CB60(0x6E756F5379616C70, 0xE900000000000064, aBlock);
    v30 = a1;
    sub_1CCB63E44();
    *(_WORD *)(v18 + 12) = 2080;
    v19 = FMIPDevice.debugDescription.getter();
    v38 = sub_1CCA0CB60(v19, v20, aBlock);
    a1 = v30;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA0BF30((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    _os_log_impl(&dword_1CC9BF000, v15, v16, "FMIPServerInteractionController: stopMonitoring: action: %s, device: %s", (uint8_t *)v18, 0x16u);
    v21 = v29;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v21, -1, -1);
    v22 = v18;
    v4 = v31;
    MEMORY[0x1D17B214C](v22, -1, -1);
  }
  else
  {
    sub_1CCA0BF30((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  }

  sub_1CCA0BEEC(a1, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v23 = (*(unsigned __int8 *)(v32 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v2;
  sub_1CC9FED60((uint64_t)v11, v24 + v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  aBlock[4] = (uint64_t)sub_1CCB10210;
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA00C38;
  aBlock[3] = (uint64_t)&unk_1E88FD2B8;
  v25 = _Block_copy(aBlock);
  swift_retain();
  v26 = v33;
  sub_1CCB63844();
  v38 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  v27 = v36;
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v26, v27, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v4);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v35);
  return swift_release();
}

uint64_t sub_1CCB0FCDC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = (int *)type metadata accessor for FMIPDevice();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  swift_release();
  v3 = v0 + ((v2 + 24) & ~v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(v3 + 472))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = v3 + v1[28];
  v5 = type metadata accessor for FMIPPlaySoundMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = v4 + *(int *)(v5 + 20);
    v7 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v8 = v3 + v1[29];
  v9 = type metadata accessor for FMIPDeviceLostModeMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = v8 + *(int *)(v9 + 48);
    v11 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  v12 = v3 + v1[30];
  v13 = type metadata accessor for FMIPLockMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {
    v14 = v12 + *(int *)(v13 + 20);
    v15 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  }
  v16 = v3 + v1[31];
  v17 = type metadata accessor for FMIPEraseMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v18 = v16 + *(int *)(v17 + 20);
    v19 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v20 = v3 + v1[32];
  v21 = type metadata accessor for FMIPItemGroup();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v20 + *(int *)(v21 + 48);
    v23 = type metadata accessor for FMIPItemLostModeMetadata();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = v22 + *(int *)(v23 + 24);
      v25 = sub_1CCB635B0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v26 = v3 + v1[38];
  v27 = sub_1CCB635B0();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (!v29(v26, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  v30 = v3 + v1[39];
  if (!v29(v30, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v27);
  v31 = v3 + v1[40];
  if (!v29(v31, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v31, v27);
  v32 = v3 + v1[41];
  if (!v29(v32, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v32, v27);
  return swift_deallocObject();
}

uint64_t sub_1CCB10210()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPDevice() - 8) + 80);
  return sub_1CCB07D1C(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + ((v1 + 24) & ~v1)));
}

uint64_t sub_1CCB10240()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB1026C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15[3];

  if (qword_1ED8AA630 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain_n();
  v7 = sub_1CCB637D8();
  v8 = sub_1CCB63D48();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15[0] = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain();
    sub_1CCA0CB60(a1, a2, v15);
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CC9BF000, v7, v8, "FMIPManager: didReceive new image version: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v10, -1, -1);
    MEMORY[0x1D17B214C](v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v11 = a3 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  result = MEMORY[0x1D17B2218](v11);
  if (result)
  {
    v13 = *(_QWORD *)(v11 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v13 + 96))(a3, a1, a2, ObjectType, v13);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1CCB10474()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  unint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t);
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v1 = *(_QWORD *)(type metadata accessor for FMIPMonitoredDevice(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v49 = *(_QWORD *)(v1 + 64);
  v3 = (int *)type metadata accessor for FMIPDevice();
  v59 = *(unsigned __int8 *)(*((_QWORD *)v3 - 1) + 80);
  v58 = v0;
  v52 = v2;
  v4 = v0 + v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(v0 + v2 + 472))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v5 = v4 + v3[28];
  v6 = type metadata accessor for FMIPPlaySoundMetadata();
  v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
  if (!v55(v5, 1, v6))
  {
    v7 = v5 + *(int *)(v6 + 20);
    v8 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v9 = v4 + v3[29];
  v10 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  if (!v54(v9, 1, v10))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v9 + *(int *)(v10 + 48);
    v12 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  v13 = v4 + v3[30];
  v57 = type metadata accessor for FMIPLockMetadata();
  v53 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 48);
  if (!v53(v13, 1))
  {
    v14 = v13 + *(int *)(v57 + 20);
    v15 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  }
  v16 = v4 + v3[31];
  v17 = type metadata accessor for FMIPEraseMetadata();
  v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48);
  if (!v51(v16, 1, v17))
  {
    v18 = v16 + *(int *)(v17 + 20);
    v19 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v20 = v4 + v3[32];
  v21 = type metadata accessor for FMIPItemGroup();
  v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48);
  if (!v50(v20, 1, v21))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v20 + *(int *)(v21 + 48);
    v23 = type metadata accessor for FMIPItemLostModeMetadata();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = v10;
      v25 = v22 + *(int *)(v23 + 24);
      v26 = sub_1CCB635B0();
      v27 = v25;
      v10 = v24;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v27, v26);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  v56 = v10;
  swift_bridgeObjectRelease();
  v28 = v4 + v3[38];
  v29 = sub_1CCB635B0();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
  if (!v31(v28, 1, v29))
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
  v32 = v4 + v3[39];
  if (!v31(v32, 1, v29))
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v29);
  v33 = v4 + v3[40];
  if (!v31(v33, 1, v29))
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v33, v29);
  v34 = (v52 + v49 + v59) & ~v59;
  v35 = v4 + v3[41];
  if (!v31(v35, 1, v29))
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v35, v29);
  swift_release();
  v36 = v58 + v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(v58 + v34 + 472))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v37 = v36 + v3[28];
  if (!v55(v37, 1, v6))
  {
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v37 + *(int *)(v6 + 20), v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v38 = v36 + v3[29];
  if (!v54(v38, 1, v56))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v38 + *(int *)(v56 + 48), v29);
  }
  v39 = v36 + v3[30];
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v53)(v39, 1, v57))
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v39 + *(int *)(v57 + 20), v29);
  v40 = v36 + v3[31];
  if (!v51(v40, 1, v17))
  {
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v40 + *(int *)(v17 + 20), v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v41 = v36 + v3[32];
  if (!v50(v41, 1, v21))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v42 = v41 + *(int *)(v21 + 48);
    v43 = type metadata accessor for FMIPItemLostModeMetadata();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v42, 1, v43))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v42 + *(int *)(v43 + 24), v29);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v44 = v36 + v3[38];
  if (!v31(v44, 1, v29))
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v44, v29);
  v45 = v36 + v3[39];
  if (!v31(v45, 1, v29))
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v45, v29);
  v46 = v36 + v3[40];
  if (!v31(v46, 1, v29))
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v46, v29);
  v47 = v36 + v3[41];
  if (!v31(v47, 1, v29))
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v47, v29);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCB10E30()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for FMIPMonitoredDevice(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for FMIPDevice() - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_1CCB086B4(v0 + v2, v0 + v5, *(_QWORD *)(v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1CCB10EA4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (int *)type metadata accessor for FMIPDevice();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(v2 + 472))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v3 = v2 + v1[28];
  v4 = type metadata accessor for FMIPPlaySoundMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4))
  {
    v5 = v3 + *(int *)(v4 + 20);
    v6 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v7 = v2 + v1[29];
  v8 = type metadata accessor for FMIPDeviceLostModeMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v7 + *(int *)(v8 + 48);
    v10 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  v11 = v2 + v1[30];
  v12 = type metadata accessor for FMIPLockMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v13 = v11 + *(int *)(v12 + 20);
    v14 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  }
  v15 = v2 + v1[31];
  v16 = type metadata accessor for FMIPEraseMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
  {
    v17 = v15 + *(int *)(v16 + 20);
    v18 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v19 = v2 + v1[32];
  v20 = type metadata accessor for FMIPItemGroup();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = v19 + *(int *)(v20 + 48);
    v22 = type metadata accessor for FMIPItemLostModeMetadata();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = v21 + *(int *)(v22 + 24);
      v24 = sub_1CCB635B0();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v25 = v2 + v1[38];
  v26 = sub_1CCB635B0();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (!v28(v25, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
  v29 = v2 + v1[39];
  if (!v28(v29, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v29, v26);
  v30 = v2 + v1[40];
  if (!v28(v30, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v30, v26);
  v31 = v2 + v1[41];
  if (!v28(v31, 1, v26))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v26);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB11400()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for FMIPDevice() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1CCB07BB0((uint64_t *)(v0 + v2), *v3, v3[1]);
}

uint64_t sub_1CCB11450()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB11484()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

unint64_t sub_1CCB114C0()
{
  unint64_t result;

  result = qword_1EF9E4D78;
  if (!qword_1EF9E4D78)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB758DC, &type metadata for FMIPBaseResponseError);
    atomic_store(result, &qword_1EF9E4D78);
  }
  return result;
}

uint64_t sub_1CCB11504()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  sub_1CCA1B120(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CCB11548(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = v1[8];
  v9 = v1[9];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_1CCA2F5C8;
  return sub_1CCB0699C(a1, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1CCB115EC()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB11618()
{
  return sub_1CCB076C0();
}

uint64_t sub_1CCB11624(uint64_t a1)
{
  uint64_t v1;

  return sub_1CCA81284(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t FMIPDeviceLostModeMetadata.canStopLostMode.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t FMIPDeviceLostModeMetadata.isEmailUpdatesEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t FMIPDeviceLostModeMetadata.isSoundEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t FMIPDeviceLostModeMetadata.isTextCustomized.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 3);
}

uint64_t FMIPDeviceLostModeMetadata.ownerNumber.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPDeviceLostModeMetadata.email.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPDeviceLostModeMetadata.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

void FMIPDeviceLostModeMetadata.status.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 56);
}

uint64_t FMIPDeviceLostModeMetadata.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FMIPDeviceLostModeMetadata() + 48);
  v4 = sub_1CCB635B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1CCB1173C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB11778 + 4 * byte_1CCB71210[a1]))(0x6470556C69616D65, 0xEC00000073657461);
}

uint64_t sub_1CCB11778()
{
  return 0x72624E72656E776FLL;
}

uint64_t sub_1CCB11790()
{
  return 0x6C69616D65;
}

uint64_t sub_1CCB117A4()
{
  return 0x646E756F73;
}

uint64_t sub_1CCB117B8()
{
  return 0x6F43737574617473;
}

uint64_t sub_1CCB117D4()
{
  return 0x74736F4C706F7473;
}

uint64_t sub_1CCB117F4()
{
  return 1954047348;
}

uint64_t sub_1CCB11804()
{
  return 0x7478655472657375;
}

uint64_t sub_1CCB1181C()
{
  return 0x6954657461657263;
}

void sub_1CCB11840(char *a1)
{
  sub_1CCB1B6E8(*a1);
}

uint64_t sub_1CCB1184C()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCB592D8((uint64_t)v3, v1);
  return sub_1CCB64384();
}

void sub_1CCB11890(uint64_t a1)
{
  char *v1;

  sub_1CCB592D8(a1, *v1);
}

uint64_t sub_1CCB11898()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCB592D8((uint64_t)v3, v1);
  return sub_1CCB64384();
}

uint64_t sub_1CCB118D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB12048();
  *a1 = result;
  return result;
}

uint64_t sub_1CCB11904@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1CCB1173C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1CCB1192C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB12048();
  *a1 = result;
  return result;
}

void sub_1CCB11950(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1CCB1195C()
{
  sub_1CC9F68C0();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB11984()
{
  sub_1CC9F68C0();
  return sub_1CCB643E4();
}

double FMIPDeviceLostModeMetadata.init(lostModeInfo:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double result;
  uint64_t v34;

  v4 = sub_1CCA14E90(&qword_1ED8A7130);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB635B0();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v34 - v12;
  v14 = objc_msgSend(a1, sel_timestamp);
  if (v14)
  {
    v15 = v14;
    sub_1CCB63580();

    v16 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v16(v6, v11, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      v16(v13, v6, v7);
      goto LABEL_6;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  sub_1CCB63514();
  sub_1CCAD80B8((uint64_t)v6);
LABEL_6:
  v17 = type metadata accessor for FMIPDeviceLostModeMetadata();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2 + *(int *)(v17 + 48), v13, v7);
  v18 = objc_msgSend(a1, sel_message);
  if (v18)
  {
    v19 = v18;
    v20 = sub_1CCB63988();
    v22 = v21;

  }
  else
  {
    v20 = 0;
    v22 = 0xE000000000000000;
  }
  *(_QWORD *)(a2 + 40) = v20;
  *(_QWORD *)(a2 + 48) = v22;
  v23 = objc_msgSend(a1, sel_email);
  if (v23)
  {
    v24 = v23;
    v25 = sub_1CCB63988();
    v27 = v26;

  }
  else
  {
    v25 = 0;
    v27 = 0xE000000000000000;
  }
  *(_QWORD *)(a2 + 24) = v25;
  *(_QWORD *)(a2 + 32) = v27;
  v28 = objc_msgSend(a1, sel_phoneNumber);
  if (v28)
  {
    v29 = v28;
    v30 = sub_1CCB63988();
    v32 = v31;

  }
  else
  {

    v30 = 0;
    v32 = 0xE000000000000000;
  }
  *(_QWORD *)(a2 + 8) = v30;
  *(_QWORD *)(a2 + 16) = v32;
  *(_QWORD *)&result = 0x100000001;
  *(_DWORD *)a2 = 1;
  *(_BYTE *)(a2 + 56) = 2;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for FMIPDeviceLostModeMetadata(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v5;
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    v8 = *(int *)(a3 + 48);
    v9 = (uint64_t)a2 + v8;
    v10 = a1 + v8;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v11 = sub_1CCB635B0();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t assignWithCopy for FMIPDeviceLostModeMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(int *)(a3 + 48);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for FMIPDeviceLostModeMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(int *)(a3 + 48);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for FMIPDeviceLostModeMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(int *)(a3 + 48);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_1CCB11F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1CCB635B0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 48), a2, v8);
  }
}

uint64_t sub_1CCB11F8C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_1CCB635B0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 48), a2, a2, v7);
  }
  return result;
}

unint64_t sub_1CCB12004()
{
  unint64_t result;

  result = qword_1EF9E4D98;
  if (!qword_1EF9E4D98)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7144C, &type metadata for FMIPDeviceLostModeMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E4D98);
  }
  return result;
}

uint64_t sub_1CCB12048()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

void sub_1CCB12090(uint64_t a1, void *a2)
{
  sub_1CCB121A4(a2);
}

void sub_1CCB120F4(uint64_t a1, int a2)
{
  sub_1CC9D2FD0(a2);
}

void sub_1CCB120FC(uint64_t a1, unint64_t a2)
{
  sub_1CC9FAD84(a2);
}

id FMIPLocationController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMIPLocationController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1CCB121A4(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *oslog;
  uint64_t v11;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = a1;
  v4 = a1;
  oslog = sub_1CCB637D8();
  v5 = sub_1CCB63D30();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v11 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue();
    v8 = sub_1CCB64300();
    sub_1CCA0CB60(v8, v9, &v11);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, oslog, v5, "FMIPLocationController: location manager failed with error: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v7, -1, -1);
    MEMORY[0x1D17B214C](v6, -1, -1);

  }
  else
  {

  }
}

uint64_t method lookup function for FMIPLocationController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPLocationController.locationManager(_:didFailWithError:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of FMIPLocationController.locationManager(_:didChangeAuthorization:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of FMIPLocationController.locationManager(_:didUpdateLocations:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t sub_1CCB123DC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1CCB12408()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB12434()
{
  uint64_t v0;

  return swift_deallocObject();
}

void FMIPPlaySoundChannels.description.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB12498()
{
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  return 46;
}

uint64_t FMIPPlaySoundChannels.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB12538 + 4 * byte_1CCB715C5[*v0]))(1952867692, 0xE400000000000000);
}

uint64_t sub_1CCB12538()
{
  return 0x7468676972;
}

uint64_t sub_1CCB1254C()
{
  return 1702060387;
}

uint64_t sub_1CCB12558()
{
  return 0x6F6C61646E617473;
}

uint64_t sub_1CCB12574()
{
  return 1702131053;
}

FMIPCore::FMIPPlaySoundChannels_optional __swiftcall FMIPPlaySoundChannels.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  FMIPCore::FMIPPlaySoundChannels_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

void sub_1CCB125D8(char *a1)
{
  sub_1CCB1CAB8(*a1);
}

void sub_1CCB125E4()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCB12628()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB12698()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB126CC()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCB12728()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCB12768()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPPlaySoundChannels_optional sub_1CCB127D8(Swift::String *a1)
{
  return FMIPPlaySoundChannels.init(rawValue:)(*a1);
}

uint64_t sub_1CCB127E4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCB1280C + 4 * byte_1CCB715D9[*v0]))();
}

void sub_1CCB1280C(_QWORD *a1@<X8>)
{
  *a1 = 0x7468676972;
  a1[1] = 0xE500000000000000;
}

void sub_1CCB12824(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 1702060387;
  a1[1] = v1;
}

void sub_1CCB12834(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6C61646E617473;
  a1[1] = 0xEA0000000000656ELL;
}

void sub_1CCB12854(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 1702131053;
  a1[1] = v1;
}

FMIPCore::FMIPPlaySoundReason_optional __swiftcall FMIPPlaySoundReason.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  FMIPCore::FMIPPlaySoundReason_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t FMIPPlaySoundReason.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB128F4 + 4 * byte_1CCB715DE[*v0]))(0x6E756F5379616C50, 0xE900000000000064);
}

uint64_t sub_1CCB128F4()
{
  return 0x6E756F536574754DLL;
}

uint64_t sub_1CCB12908()
{
  return 0x6F536574756D6E55;
}

uint64_t sub_1CCB12928()
{
  return 0x6E756F53706F7453;
}

unint64_t sub_1CCB12940()
{
  unint64_t result;

  result = qword_1EF9E4E48;
  if (!qword_1EF9E4E48)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPPlaySoundChannels, &type metadata for FMIPPlaySoundChannels);
    atomic_store(result, (unint64_t *)&qword_1EF9E4E48);
  }
  return result;
}

void sub_1CCB12984(char *a1)
{
  sub_1CCB1CE4C(*a1);
}

unint64_t sub_1CCB12994()
{
  unint64_t result;

  result = qword_1EF9E4E50;
  if (!qword_1EF9E4E50)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPPlaySoundReason, &type metadata for FMIPPlaySoundReason);
    atomic_store(result, (unint64_t *)&qword_1EF9E4E50);
  }
  return result;
}

void sub_1CCB129D8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCB12A28()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB12A90()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB12AD0()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCB12B24()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCB12B70()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPPlaySoundReason_optional sub_1CCB12BD8(Swift::String *a1)
{
  return FMIPPlaySoundReason.init(rawValue:)(*a1);
}

uint64_t sub_1CCB12BE4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCB12C18 + 4 * byte_1CCB715EE[*v0]))();
}

void sub_1CCB12C18(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6E756F536574754DLL;
  a1[1] = v1;
}

void sub_1CCB12C30(_QWORD *a1@<X8>)
{
  *a1 = 0x6F536574756D6E55;
  a1[1] = 0xEB00000000646E75;
}

void sub_1CCB12C54(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6E756F53706F7453;
  a1[1] = v1;
}

uint64_t storeEnumTagSinglePayload for FMIPPlaySoundChannels(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CCB12CB8 + 4 * byte_1CCB715F7[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CCB12CEC + 4 * byte_1CCB715F2[v4]))();
}

uint64_t sub_1CCB12CEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB12CF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB12CFCLL);
  return result;
}

uint64_t sub_1CCB12D08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB12D10);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CCB12D14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB12D1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPPlaySoundChannels()
{
  return &type metadata for FMIPPlaySoundChannels;
}

uint64_t storeEnumTagSinglePayload for FMIPPlaySoundReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CCB12D84 + 4 * byte_1CCB71601[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CCB12DB8 + 4 * byte_1CCB715FC[v4]))();
}

uint64_t sub_1CCB12DB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB12DC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB12DC8);
  return result;
}

uint64_t sub_1CCB12DD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB12DDCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CCB12DE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB12DE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPPlaySoundReason()
{
  return &type metadata for FMIPPlaySoundReason;
}

uint64_t type metadata accessor for FMIPPlaySoundRequest()
{
  uint64_t result;

  result = qword_1EF9E4E58;
  if (!qword_1EF9E4E58)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCB12E40()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for FMIPDevice();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1CCB12ECC()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  type metadata accessor for FMLocalize();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_1CCB63340();

  v4 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata, 0xE000000000000000);
  sub_1CCB63340();

  swift_bridgeObjectRelease();
  v5 = v0 + qword_1EF9FF780;
  if ((*(_BYTE *)(v0 + qword_1EF9FF780 + 217) & 2) == 0)
  {
    v6 = *(_QWORD *)(v5 + 104);
    v7 = *(_QWORD *)(v5 + 112);
    v8 = v6 == 1684099177 && v7 == 0xE400000000000000;
    if (!v8
      && (sub_1CCB642A0() & 1) == 0
      && (v6 != 1685016681 || v7 != 0xE400000000000000)
      && (sub_1CCB642A0() & 1) == 0
      && (v6 != 0x726F737365636341 || v7 != 0xE900000000000079))
    {
      sub_1CCB642A0();
    }
  }
  v9 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata, 0xE000000000000000);
  v10 = sub_1CCB63340();
  v12 = v11;

  sub_1CCA14E90(&qword_1EF9DFD30);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1CCB677E0;
  *(_QWORD *)(v13 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v13 + 64) = sub_1CCA0C920();
  *(_QWORD *)(v13 + 32) = v10;
  *(_QWORD *)(v13 + 40) = v12;
  v14 = sub_1CCB639A0();
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1CCB1326C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + qword_1EF9FF788);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1CCA6388C(0, v3, 0);
    __asm { BR              X9 }
  }
  v19 = sub_1CCA14E90(&qword_1EF9E13B8);
  v17 = v4;
  swift_beginAccess();
  sub_1CCA06650((uint64_t)&v17, 0x736C656E6E616863, 0xE800000000000000);
  v6 = *(_QWORD *)(v1 + qword_1EF9FF780);
  v5 = *(_QWORD *)(v1 + qword_1EF9FF780 + 8);
  v7 = MEMORY[0x1E0DEA968];
  v19 = MEMORY[0x1E0DEA968];
  v17 = v6;
  v18 = v5;
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)&v17, 0x656369766564, 0xE600000000000000);
  swift_endAccess();
  v8 = sub_1CCB12ECC();
  v19 = v7;
  v17 = v8;
  v18 = v9;
  swift_beginAccess();
  sub_1CCA06650((uint64_t)&v17, 0x7463656A627573, 0xE700000000000000);
  v10 = *(_QWORD *)(v2 + 16);
  v11 = 0x6E756F5379616C50;
  if (v10 == 1)
    v11 = 0x6E756F536574754DLL;
  v12 = v10 == 0;
  v13 = 0x6E756F53706F7453;
  if (!v12)
    v13 = v11;
  v19 = v7;
  v17 = v13;
  v18 = 0xE900000000000064;
  sub_1CCA06650((uint64_t)&v17, 0x6974634172657375, 0xEA00000000006E6FLL);
  swift_endAccess();
  v14 = sub_1CCB1360C();
  v15 = sub_1CCB63DCC();
  v19 = v14;
  v17 = v15;
  swift_beginAccess();
  sub_1CCA06650((uint64_t)&v17, 0xD00000000000001ALL, 0x80000001CCB7D930);
  return swift_endAccess();
}

uint64_t sub_1CCB13588()
{
  uint64_t v0;

  sub_1CC9F73AC(v0 + qword_1EF9FF780);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB135B4()
{
  uint64_t v0;

  v0 = sub_1CC9C785C();
  sub_1CC9F73AC(v0 + qword_1EF9FF780);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB13604()
{
  return type metadata accessor for FMIPPlaySoundRequest();
}

unint64_t sub_1CCB1360C()
{
  unint64_t result;

  result = qword_1EF9E4EA8;
  if (!qword_1EF9E4EA8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF9E4EA8);
  }
  return result;
}

uint64_t FMReverseGeocodingCache.__allocating_init(preferredLocale:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  FMReverseGeocodingCache.init(preferredLocale:)(a1);
  return v2;
}

_QWORD *FMReverseGeocodingCache.init(preferredLocale:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v2 = v1;
  v26 = a1;
  v3 = *v1;
  v25 = sub_1CCB63D84();
  v23 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v24 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCB63D6C();
  MEMORY[0x1E0C80A78](v5);
  v22 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v7);
  sub_1CCB6358C();
  v8 = qword_1EF9E4EB8;
  type metadata accessor for FMReverseGeocodingCache.FMReverseGeocodingCacheContext(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v9);
  *(_QWORD *)((char *)v2 + v8) = sub_1CCB638B0();
  v10 = qword_1EF9E4EC0;
  *(_QWORD *)((char *)v2 + v10) = sub_1CCB638B0();
  *(_QWORD *)((char *)v2 + qword_1EF9E4EC8) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)((char *)v2 + qword_1EF9E4ED0) = 0;
  if (qword_1EF9DEF60 != -1)
    swift_once();
  v11 = sub_1CCB637FC();
  sub_1CCA16C20(v11, (uint64_t)qword_1EF9FF480);
  swift_retain_n();
  v12 = sub_1CCB637D8();
  v13 = sub_1CCB63D48();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v28 = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = sub_1CCB643F0();
    v27 = sub_1CCA0CB60(v16, v17, &v28);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v12, v13, "%s: initialized", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v15, -1, -1);
    MEMORY[0x1D17B214C](v14, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3828]), sel_init);
  v28 = 0;
  v29 = 0xE000000000000000;
  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v19 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_setName_, v19);

  objc_msgSend(v18, sel_setMaxConcurrentOperationCount_, 10);
  sub_1CC9F0ECC();
  v28 = 0;
  v29 = 0xE000000000000000;
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  v28 = 0xD000000000000022;
  v29 = 0x80000001CCB7D9F0;
  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB6385C();
  v28 = MEMORY[0x1E0DEE9D8];
  sub_1CCB13B88();
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCADA9F4();
  sub_1CCB63E98();
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v24, *MEMORY[0x1E0DEF8D0], v25);
  v20 = sub_1CCB63DB4();
  *(_QWORD *)((char *)v2 + qword_1EF9E4ED8) = v18;
  sub_1CCB13BD0(v26, (uint64_t)v2 + qword_1EF9FF7A8);
  *(_QWORD *)((char *)v2 + qword_1EF9E4EE0) = v20;
  return v2;
}

unint64_t sub_1CCB13B88()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED8AA370;
  if (!qword_1ED8AA370)
  {
    v1 = sub_1CCB63D6C();
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEF828], v1);
    atomic_store(result, (unint64_t *)&qword_1ED8AA370);
  }
  return result;
}

uint64_t sub_1CCB13BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t FMReverseGeocodingCache.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + qword_1EF9E4EB0;
  v2 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCAD7AE0(v0 + qword_1EF9FF7A8);
  return v0;
}

uint64_t FMReverseGeocodingCache.__deallocating_deinit()
{
  FMReverseGeocodingCache.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB13CE0(void (*a1)(void))
{
  a1();
  return sub_1CCB643F0();
}

uint64_t dispatch thunk of FMAddressProtocol.init(mapItem:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t method lookup function for FMReverseGeocodingCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMReverseGeocodingCache.__allocating_init(preferredLocale:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t *sub_1CCB13D20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void **v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;

  v6 = sub_1CCB635B0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  if ((v12 | v8) > 7
    || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || v13 + ((v9 + ((v8 + 40) & ~v8) + v12) & ~v12) + 1 > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + (((v12 | v8) & 0xF8 ^ 0x1F8) & ((v12 | v8) + 16)));
    swift_retain();
  }
  else
  {
    v17 = v6;
    v18 = a2[1];
    *a1 = *a2;
    a1[1] = v18;
    v19 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    v20 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v19 = *v20;
    v19[1] = v20[1];
    v21 = (_QWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
    v22 = (void **)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
    v23 = *v22;
    *v21 = *v22;
    v24 = ((unint64_t)v21 + v8 + 8) & ~v8;
    v25 = ((unint64_t)v22 + v8 + 8) & ~v8;
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v29 = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26 = v23;
    v28(v24, v25, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))((v24 + v9 + v12) & ~v12, (v25 + v9 + v12) & ~v12, v29);
    *(_BYTE *)(((v24 + v9 + v12) & ~v12) + v13) = *(_BYTE *)(((v25 + v9 + v12) & ~v12) + v13);
  }
  return a1;
}

uint64_t sub_1CCB13EC0(uint64_t a1, uint64_t a2)
{
  id *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = (id *)((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);

  v5 = sub_1CCB635B0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((v7 + *(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_1CCB13F5C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v6[1] = v7[1];
  v8 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = (void **)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = *v9;
  *v8 = *v9;
  v11 = sub_1CCB635B0();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((unint64_t)v8 + v13 + 8) & ~v13;
  v15 = ((unint64_t)v9 + v13 + 8) & ~v13;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = v10;
  v16(v14, v15, v11);
  v18 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = *(_QWORD *)(v12 + 64) + v19;
  v21 = (v20 + v14) & ~v19;
  v22 = (v20 + v15) & ~v19;
  (*(void (**)(uint64_t, uint64_t))(v18 + 16))(v21, v22);
  *(_BYTE *)(v21 + *(_QWORD *)(v18 + 64)) = *(_BYTE *)(v22 + *(_QWORD *)(v18 + 64));
  return a1;
}

_QWORD *sub_1CCB14070(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  void **v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v6[1] = v7[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = (void **)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  v9 = (void **)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = *v9;
  v11 = *v8;
  *v8 = *v9;
  v12 = v10;

  v13 = sub_1CCB635B0();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = ((unint64_t)v8 + v15 + 8) & ~v15;
  v17 = ((unint64_t)v9 + v15 + 8) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24))(v16, v17, v13);
  v18 = *(_QWORD *)(v14 + 64);
  v19 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 + v20;
  v22 = (v21 + v16) & ~v20;
  v23 = (v21 + v17) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v22, v23);
  *(_BYTE *)(v22 + *(_QWORD *)(v19 + 64)) = *(_BYTE *)(v23 + *(_QWORD *)(v19 + 64));
  return a1;
}

_OWORD *sub_1CCB14194(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v5;
  _OWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v5 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = (_QWORD *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = sub_1CCB635B0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v12, v13, v9);
  v14 = *(_QWORD *)(v10 + 64);
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v14 + v16;
  v18 = (v17 + v12) & ~v16;
  v19 = (v17 + v13) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v18, v19);
  *(_BYTE *)(v18 + *(_QWORD *)(v15 + 64)) = *(_BYTE *)(v19 + *(_QWORD *)(v15 + 64));
  return a1;
}

_QWORD *sub_1CCB14274(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  v9 = (void **)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  v10 = (void **)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  v11 = *v9;
  *v9 = *v10;

  v12 = sub_1CCB635B0();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = ((unint64_t)v9 + v14 + 8) & ~v14;
  v16 = ((unint64_t)v10 + v14 + 8) & ~v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 40))(v15, v16, v12);
  v17 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = *(_QWORD *)(v13 + 64) + v18;
  v20 = (v19 + v15) & ~v18;
  v21 = (v19 + v16) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v17 + 40))(v20, v21);
  *(_BYTE *)(v20 + *(_QWORD *)(v17 + 64)) = *(_BYTE *)(v21 + *(_QWORD *)(v17 + 64));
  return a1;
}

uint64_t sub_1CCB1437C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t sub_1CCB14384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t sub_1CCB1438C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = sub_1CCA14E90(&qword_1EF9E5008);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB15C6C();
  sub_1CCB643CC();
  v8[15] = 0;
  sub_1CCB64204();
  if (!v1)
  {
    v8[14] = 1;
    sub_1CCB64204();
    v8[13] = 2;
    sub_1CCB64204();
    v8[12] = 3;
    sub_1CCB64204();
    v8[11] = 4;
    sub_1CCB64204();
    v8[10] = 5;
    sub_1CCB64204();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1CCB14540()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB14570 + 4 * byte_1CCB71910[*v0]))(0x3156676174726961, 0xE800000000000000);
}

uint64_t sub_1CCB14570()
{
  return 0x3256676174726961;
}

uint64_t sub_1CCB14584()
{
  return 0x3156616E6D66;
}

uint64_t sub_1CCB14598()
{
  return 0x3256616E6D66;
}

uint64_t sub_1CCB145AC()
{
  return 0x6E6D66656C707061;
}

uint64_t sub_1CCB145CC()
{
  return 0x6E6D66656C707061;
}

uint64_t sub_1CCB145F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCB157E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCB14614()
{
  sub_1CCB15C6C();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB1463C()
{
  sub_1CCB15C6C();
  return sub_1CCB643E4();
}

double sub_1CCB14664@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1CCB15A64(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1CCB146A4(_QWORD *a1)
{
  return sub_1CCB1438C(a1);
}

uint64_t sub_1CCB146B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v20 = v19;
    *(_DWORD *)v5 = 136315138;
    v6 = *(_QWORD *)(v1 + 16);
    v7 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain();
    v8 = sub_1CC9C6AE4(0xCuLL, v6, v7);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x1D17B0F34](v8, v10, v12, v14);
    v17 = v16;
    swift_bridgeObjectRelease();
    sub_1CCA0CB60(v15, v17, &v20);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPRefreshingController<%s>.deinit", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v19, -1, -1);
    MEMORY[0x1D17B214C](v5, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_bridgeObjectRelease();
  sub_1CCA2F610(v1 + 32);
  sub_1CC9C3E84(v1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_selectedDevice, &qword_1ED8A7170);
  sub_1CCA01CA0(v1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_interactionController);

  swift_bridgeObjectRelease();
  sub_1CC9C3E84(v1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_lastRefreshTime, &qword_1ED8A7130);

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1CCB14960()
{
  sub_1CCB146B8();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB14984()
{
  return type metadata accessor for FMIPRefreshingController();
}

uint64_t sub_1CCB1498C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  _QWORD v13[2];
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1CCB63820();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63868();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_refreshQueue);
  aBlock[4] = sub_1CCB15E74;
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88FDC98;
  v11 = _Block_copy(aBlock);
  swift_retain();
  sub_1CCB63844();
  v13[1] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v3, MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v10, v6, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

id sub_1CCB14B60(uint64_t a1)
{
  *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_isRefreshing) = 0;
  sub_1CC9CEE94();
  sub_1CCAD60D4();
  return objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_refreshTimer), sel_invalidate);
}

uint64_t sub_1CCB14BB4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  id v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92[4];
  char v93;
  char v94;
  char v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  unsigned __int8 v108;
  unsigned __int8 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v11 = sub_1CCB635B0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v91 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v15 = result;
    v90 = v12;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v17 = Strong;
      if (a1)
      {
        v88 = v11;
        v18 = qword_1ED8AA630;
        swift_retain();
        if (v18 != -1)
          swift_once();
        v86 = a4;
        v87 = a5;
        v19 = sub_1CCB637FC();
        sub_1CCA16C20(v19, (uint64_t)qword_1ED8AD7F8);
        v20 = sub_1CCB637D8();
        v21 = sub_1CCB63D48();
        if (os_log_type_enabled(v20, v21))
        {
          v22 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v22 = 0;
          _os_log_impl(&dword_1CC9BF000, v20, v21, "FMIPRefreshingController: refreshClientRequest completed", v22, 2u);
          MEMORY[0x1D17B214C](v22, -1, -1);
        }

        v23 = *(_QWORD *)(a1 + 24);
        if (v23)
        {
          v82 = a6;
          v24 = *(_QWORD *)(v23 + 24);
          v26 = *(_QWORD *)(v23 + 32);
          v25 = *(_QWORD *)(v23 + 40);
          v27 = *(_BYTE *)(v23 + 48);
          v28 = *(_BYTE *)(v23 + 49);
          v29 = *(_BYTE *)(v23 + 50);
          v30 = *(_BYTE *)(v23 + 51);
          v32 = *(_QWORD *)(v23 + 56);
          v31 = *(_QWORD *)(v23 + 64);
          v33 = *(_QWORD *)(v23 + 72);
          v34 = *(_QWORD *)(v23 + 80);
          v35 = *(_QWORD *)(v23 + 88);
          v36 = *(_QWORD *)(v23 + 96);
          v92[0] = *(_QWORD *)(v23 + 16);
          v84 = v24;
          v92[1] = v24;
          v92[2] = v26;
          v81 = v25;
          v92[3] = v25;
          v93 = v27;
          v94 = v28;
          v95 = v29;
          v96 = v30;
          v97 = v32;
          v89 = v31;
          v98 = v31;
          v99 = v33;
          v100 = v34;
          v101 = v35;
          v102 = v36;
          v37 = *(_QWORD *)(a1 + 16);
          swift_beginAccess();
          v38 = swift_weakLoadStrong();
          v85 = v15;
          v83 = a1;
          if (v38)
          {
            v39 = *(_QWORD *)(v38 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_ownerPhoneNumber);
            v40 = *(_QWORD *)(v38 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_ownerPhoneNumber + 8);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v39 = 0;
            v40 = 0;
          }
          sub_1CC9D36EC(v92, v37, v39, v40, (uint64_t)&v103);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v89 = *((_QWORD *)&v103 + 1);
          v55 = v103;
          v56 = v104;
          v80 = v105;
          v57 = v106;
          v58 = v107;
          v79 = v108;
          v78 = v109;
          v60 = v110;
          v59 = v111;
          v61 = v113;
          v77 = v112;
          v84 = v17;
          v62 = v17 + 32;
          v63 = v114;
          v81 = v115;
          if (MEMORY[0x1D17B2218](v62))
          {
            *(_QWORD *)&v103 = v55;
            *((_QWORD *)&v103 + 1) = v89;
            v104 = v56;
            v105 = v80;
            v106 = v57;
            v107 = v58;
            v108 = v79;
            v109 = v78;
            v110 = v60;
            v111 = v59;
            v112 = v77;
            v113 = v61;
            v114 = v63;
            v115 = v81;
            v64 = *(_QWORD *)(v23 + 104);
            swift_bridgeObjectRetain();
            sub_1CC9D5590(&v103, v64);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
          }
          else
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          v15 = v85;
          v17 = v84;
          a1 = v83;
          LOBYTE(a6) = v82;
        }
        v65 = swift_bridgeObjectRetain();
        v66 = sub_1CCB156CC(v65);
        swift_bridgeObjectRelease();
        if ((v66 & 1) != 0 && MEMORY[0x1D17B2218](v17 + 32))
        {
          *(_QWORD *)&v103 = *(_QWORD *)(v17 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_rangingParameters);
          sub_1CCAA95E4((uint64_t *)&v103);
          swift_unknownObjectRelease();
        }
        v67 = swift_bridgeObjectRetain();
        sub_1CCB15538(v67);
        swift_bridgeObjectRelease();
        v68 = MEMORY[0x1D17B2218](v17 + 32);
        v69 = MEMORY[0x1E0DEE9D8];
        if (v68)
        {
          if (*(_QWORD *)(a1 + 56))
            v70 = *(_QWORD *)(a1 + 56);
          else
            v70 = MEMORY[0x1E0DEE9D8];
          swift_bridgeObjectRetain();
          sub_1CC9D784C(v70);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
        }
        v71 = (_QWORD *)(v17 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_tapContexts);
        swift_beginAccess();
        *v71 = v69;
        swift_bridgeObjectRelease();
        if (MEMORY[0x1D17B2218](v17 + 32))
        {
          v72 = (uint64_t)v91;
          sub_1CCB6358C();
          sub_1CCAA9724(v86, v72, v87);
          swift_unknownObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v72, v88);
        }
        if ((a6 & 1) != 0)
        {
          v73 = *(_QWORD *)(v15 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_interactionController + 24);
          v74 = *(_QWORD *)(v15 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_interactionController + 32);
          sub_1CCA04DDC((_QWORD *)(v15 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_interactionController), v73);
          v75 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(v74 + 32))(v73, v74) + 16);
          swift_bridgeObjectRelease();
          v76 = &OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_callbackInterval;
          if (v75)
            v76 = &OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_minCallbackInterval;
          sub_1CC9DD8B0(*(double *)(v17 + *v76));
        }
        if (*(_BYTE *)(a1 + 40) == 1 && MEMORY[0x1D17B2218](v17 + 32))
        {
          sub_1CCAA90D8();
          swift_release();
          swift_release();
          swift_release();
          return swift_unknownObjectRelease();
        }
        swift_release();
        swift_release();
      }
      else
      {
        if (qword_1ED8AA630 != -1)
          swift_once();
        v45 = sub_1CCB637FC();
        sub_1CCA16C20(v45, (uint64_t)qword_1ED8AD7F8);
        v46 = a2;
        v47 = a2;
        v48 = sub_1CCB637D8();
        v49 = sub_1CCB63D48();
        if (os_log_type_enabled(v48, v49))
        {
          v50 = (uint8_t *)swift_slowAlloc();
          v51 = swift_slowAlloc();
          *(_QWORD *)&v103 = v51;
          *(_DWORD *)v50 = 136315138;
          v92[0] = (uint64_t)a2;
          v52 = a2;
          sub_1CCA14E90(&qword_1EF9DFCB8);
          v53 = sub_1CCB639AC();
          v92[0] = sub_1CCA0CB60(v53, v54, (uint64_t *)&v103);
          sub_1CCB63E44();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_1CC9BF000, v48, v49, "FMIPRefreshingController: refreshClientRequest completed with error: %s", v50, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1D17B214C](v51, -1, -1);
          MEMORY[0x1D17B214C](v50, -1, -1);
        }
        else
        {

        }
        sub_1CC9DD8B0(*(double *)(v17 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_callbackInterval));
        swift_release();
      }
    }
    else
    {
      if (qword_1ED8AA630 != -1)
        swift_once();
      v41 = sub_1CCB637FC();
      sub_1CCA16C20(v41, (uint64_t)qword_1ED8AD7F8);
      v42 = sub_1CCB637D8();
      v43 = sub_1CCB63D48();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v44 = 0;
        _os_log_impl(&dword_1CC9BF000, v42, v43, "FMIPRefreshingController: Not handling request controller deallocated", v44, 2u);
        MEMORY[0x1D17B214C](v44, -1, -1);
      }

    }
    return swift_release();
  }
  return result;
}

double sub_1CCB15538(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  double result;
  char v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BYTE v12[32];

  if (a1)
  {
    v2 = v1;
    if (*(_QWORD *)(a1 + 16))
    {
      v4 = sub_1CCA074F4(0xD000000000000017, 0x80000001CCB7DC00);
      if ((v6 & 1) != 0)
      {
        sub_1CCA0CC30(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v12);
        if ((swift_dynamicCast() & 1) != 0)
        {
          result = (double)v11;
          *(double *)(v2 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_minCallbackInterval) = (double)v11;
        }
      }
    }
    if (*(_QWORD *)(a1 + 16))
    {
      v7 = sub_1CCA074F4(0xD000000000000017, 0x80000001CCB7DC20);
      if ((v8 & 1) != 0)
      {
        sub_1CCA0CC30(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)v12);
        if ((swift_dynamicCast() & 1) != 0)
        {
          result = (double)v11;
          *(double *)(v2 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_maxCallbackInterval) = (double)v11;
        }
      }
    }
    if (*(_QWORD *)(a1 + 16))
    {
      v9 = sub_1CCA074F4(0xD000000000000014, 0x80000001CCB7DC40);
      if ((v10 & 1) != 0)
      {
        sub_1CCA0CC30(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)v12);
        if ((swift_dynamicCast() & 1) != 0)
        {
          result = (double)v11;
          *(double *)(v2 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_callbackInterval) = (double)v11;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CCB156CC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  double v6;
  _BYTE v7[32];

  if (result)
  {
    v2 = v1;
    v3 = result;
    if (*(_QWORD *)(result + 16)
      && (v4 = sub_1CCA074F4(0xD000000000000019, 0x80000001CCB77530), (v5 & 1) != 0)
      && (sub_1CCA0CC30(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)v7), (swift_dynamicCast() & 1) != 0)
      && v6 != *(double *)(v2 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_rangingParameters))
    {
      *(double *)(v2 + OBJC_IVAR____TtC8FMIPCore24FMIPRefreshingController_rangingParameters) = v6;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ItemCounts(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ItemCounts(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ItemCounts()
{
  return &type metadata for ItemCounts;
}

uint64_t sub_1CCB157E8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x3156676174726961 && a2 == 0xE800000000000000;
  if (v2 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x3256676174726961 && a2 == 0xE800000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x3156616E6D66 && a2 == 0xE600000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x3256616E6D66 && a2 == 0xE600000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6D66656C707061 && a2 == 0xEB00000000315661 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E6D66656C707061 && a2 == 0xEB00000000325661)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1CCB15A64@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v5 = sub_1CCA14E90(&qword_1EF9E4FF8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB15C6C();
  sub_1CCB643B4();
  if (v2)
    return sub_1CCA01CA0((uint64_t)a1);
  v23 = 0;
  v9 = sub_1CCB64174();
  v22 = 1;
  v10 = sub_1CCB64174();
  v21 = 2;
  v17 = sub_1CCB64174();
  v20 = 3;
  v16 = sub_1CCB64174();
  v19 = 4;
  v15 = sub_1CCB64174();
  v18 = 5;
  v11 = sub_1CCB64174();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = sub_1CCA01CA0((uint64_t)a1);
  *a2 = v9;
  a2[1] = v10;
  v13 = v16;
  a2[2] = v17;
  a2[3] = v13;
  a2[4] = v15;
  a2[5] = v11;
  return result;
}

unint64_t sub_1CCB15C6C()
{
  unint64_t result;

  result = qword_1EF9E5000;
  if (!qword_1EF9E5000)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB71B68, &type metadata for ItemCounts.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E5000);
  }
  return result;
}

uint64_t sub_1CCB15CB0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1CCB15CD4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB15CF8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB15D08()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1CCB15D2C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB15D3C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB15D4C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB15D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1CCB635B0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCB15E08(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(sub_1CCB635B0() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1CCB14BB4(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)v7, *(unsigned __int8 *)(v7 + 8));
}

id sub_1CCB15E74()
{
  uint64_t v0;

  return sub_1CCB14B60(v0);
}

uint64_t storeEnumTagSinglePayload for ItemCounts.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CCB15EC8 + 4 * byte_1CCB7191B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CCB15EFC + 4 * byte_1CCB71916[v4]))();
}

uint64_t sub_1CCB15EFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB15F04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB15F0CLL);
  return result;
}

uint64_t sub_1CCB15F18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB15F20);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CCB15F24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB15F2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ItemCounts.CodingKeys()
{
  return &type metadata for ItemCounts.CodingKeys;
}

unint64_t sub_1CCB15F4C()
{
  unint64_t result;

  result = qword_1EF9E5030;
  if (!qword_1EF9E5030)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB71B40, &type metadata for ItemCounts.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E5030);
  }
  return result;
}

unint64_t sub_1CCB15F94()
{
  unint64_t result;

  result = qword_1EF9E5038;
  if (!qword_1EF9E5038)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB71AB0, &type metadata for ItemCounts.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E5038);
  }
  return result;
}

unint64_t sub_1CCB15FDC()
{
  unint64_t result;

  result = qword_1EF9E5040;
  if (!qword_1EF9E5040)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB71AD8, &type metadata for ItemCounts.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E5040);
  }
  return result;
}

char sub_1CCB16034@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = sub_1CCA14E90(&qword_1ED8A7AA0);
  result = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 56);
  if (!v7)
    goto LABEL_5;
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = type metadata accessor for FMIPDevice();
    v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80);
    sub_1CCB1637C(v7 + *(int *)(v9 + 116) + ((v10 + 32) & ~v10), (uint64_t)v6);
    v11 = type metadata accessor for FMIPDeviceLostModeMetadata();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v6, 1, v11) == 1)
    {
      result = sub_1CCB163C4((uint64_t)v6);
LABEL_5:
      LOBYTE(v8) = 0;
      goto LABEL_8;
    }
    v12 = v6[56];
    sub_1CCA1C5B0((uint64_t)v6);
    result = FMIPActionStatus.init(rawValue:)(qword_1CCB71BE8[v12]).value;
    LOBYTE(v8) = v14;
    if (v14 == 18)
      LOBYTE(v8) = 0;
  }
LABEL_8:
  *a1 = v8;
  return result;
}

uint64_t sub_1CCB1613C(uint64_t a1)
{
  swift_allocObject();
  return sub_1CCB16184(a1);
}

uint64_t sub_1CCB16184(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13[7];

  sub_1CC9EBC94(a1, (uint64_t)v13);
  v3 = sub_1CCA5B658(v13);
  if (!v1)
  {
    v4 = qword_1ED8AA630;
    swift_retain();
    if (v4 != -1)
      swift_once();
    v5 = sub_1CCB637FC();
    sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
    swift_retain();
    v6 = sub_1CCB637D8();
    v7 = sub_1CCB63D48();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      *(_DWORD *)v8 = 136315138;
      v13[0] = v9;
      v10 = sub_1CCA5B9C4();
      v13[6] = sub_1CCA0CB60(v10, v11, v13);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v6, v7, "FMIPLostModeResponse: initialized with coder %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v9, -1, -1);
      MEMORY[0x1D17B214C](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }

  }
  sub_1CCA01CA0(a1);
  return v3;
}

uint64_t type metadata accessor for FMIPLostModeResponse()
{
  return objc_opt_self();
}

uint64_t sub_1CCB1637C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A7AA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCB163C4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CCA14E90(&qword_1ED8A7AA0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CCB16404(uint64_t a1)
{
  swift_allocObject();
  return sub_1CCB1644C(a1);
}

uint64_t sub_1CCB1644C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13[7];

  sub_1CC9EBC94(a1, (uint64_t)v13);
  v3 = sub_1CCA5B658(v13);
  if (!v1)
  {
    v4 = qword_1ED8AA630;
    swift_retain();
    if (v4 != -1)
      swift_once();
    v5 = sub_1CCB637FC();
    sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
    swift_retain();
    v6 = sub_1CCB637D8();
    v7 = sub_1CCB63D48();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      *(_DWORD *)v8 = 136315138;
      v13[0] = v9;
      v10 = sub_1CCA5B9C4();
      v13[6] = sub_1CCA0CB60(v10, v11, v13);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v6, v7, "FMIPNotifyResponse: initialized with coder %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v9, -1, -1);
      MEMORY[0x1D17B214C](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }

  }
  sub_1CCA01CA0(a1);
  return v3;
}

uint64_t type metadata accessor for FMIPNotifyResponse()
{
  return objc_opt_self();
}

void FMIPAccessoryError.init(underlyingError:discoveryType:)(id a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  id v3;
  char v5;
  id v6;
  id v7;
  id v8;
  char v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;

  v3 = a1;
  if (!a1)
    goto LABEL_14;
  v5 = *a2;
  v13 = a1;
  v6 = a1;
  v7 = v3;
  sub_1CCA14E90(&qword_1EF9DF470);
  type metadata accessor for SPAccessoryDiscoverySessionError(0);
  if (swift_dynamicCast())
  {
    v8 = v16;
    v12 = v16;
    sub_1CC9CAA38(&qword_1EF9DF380, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_1CCB65C40);
    sub_1CCB633C4();
    if (v15 != 1)
    {

      v9 = 1;
LABEL_11:
      v3 = v8;
      goto LABEL_12;
    }
    goto LABEL_7;
  }

  v13 = v3;
  v10 = v3;
  type metadata accessor for SPUnknownDiscoverySessionError(0);
  if (swift_dynamicCast())
  {
    v8 = v16;
    v12 = v16;
    sub_1CC9CAA38(&qword_1EF9DF3B8, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_1CCB65D50);
    sub_1CCB633C4();
    if (v15 != 1)
    {

      v9 = 3;
      goto LABEL_11;
    }
LABEL_7:

    v3 = 0;
    v9 = 4;
LABEL_12:

    goto LABEL_15;
  }

  v16 = v3;
  v11 = v3;
  type metadata accessor for SPPairingSessionError(0);
  if (!swift_dynamicCast())
  {

LABEL_14:
    v9 = 0;
    goto LABEL_15;
  }
  LOBYTE(v12) = v5;
  sub_1CCB16888(v15, (unsigned __int8 *)&v12, (uint64_t)&v13);

  v3 = v13;
  v9 = v14;

LABEL_15:
  *(_QWORD *)a3 = v3;
  *(_BYTE *)(a3 + 8) = v9;
}

uint64_t FMIPAccessoryError.localizedDescription.getter()
{
  return sub_1CCB16D88((void (*)(void))sub_1CCB16C44);
}

void sub_1CCB16888(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v5;
  char v6;
  uint64_t v7;

  v5 = *a2;
  type metadata accessor for SPPairingSessionError(0);
  sub_1CC9CAA38(&qword_1EF9DF340, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_1CCB65A40);
  sub_1CCB633C4();
  switch(v7)
  {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 11:
    case 19:

      v6 = 4;
      a1 = 3;
      break;
    case 4:
    case 9:
    case 10:
    case 20:

      v6 = 4;
      a1 = 1;
      break;
    case 12:
      v6 = 0;
      break;
    case 13:

      a1 = 4;
      v6 = 4;
      break;
    case 14:

      v6 = 4;
      a1 = 5;
      break;
    case 15:

      v6 = 4;
      a1 = 9;
      break;
    case 16:

      if (v5 < 2)
        a1 = 6;
      else
        a1 = 7;
      v6 = 4;
      break;
    case 17:

      v6 = 4;
      a1 = 2;
      break;
    case 18:

      v6 = 4;
      a1 = 8;
      break;
    default:
      v6 = 1;
      break;
  }
  *(_QWORD *)a3 = a1;
  *(_BYTE *)(a3 + 8) = v6;
}

uint64_t sub_1CCB169C8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)nullsub_2 + 4 * byte_1CCB71CC4[a2]))(0x4E574F4E4B4E55, 0xE700000000000000);
}

unint64_t sub_1CCB16A04()
{
  return 0xD000000000000011;
}

void sub_1CCB16AA0()
{
  JUMPOUT(0x1CCB16A94);
}

void sub_1CCB16AAC()
{
  JUMPOUT(0x1CCB16A94);
}

void sub_1CCB16ABC()
{
  JUMPOUT(0x1CCB16A94);
}

void sub_1CCB16ACC()
{
  JUMPOUT(0x1CCB16A94);
}

void sub_1CCB16AD8()
{
  JUMPOUT(0x1CCB16A94);
}

void sub_1CCB16AE8()
{
  JUMPOUT(0x1CCB16A94);
}

void sub_1CCB16AF8()
{
  JUMPOUT(0x1CCB16A94);
}

uint64_t sub_1CCB16B08()
{
  return 0x5F59524554544142;
}

uint64_t sub_1CCB16B2C()
{
  uint64_t v0;
  void *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)v0;
  v2 = *(_BYTE *)(v0 + 8);
  v3 = sub_1CCB169C8(*(_QWORD *)v0, v2);
  v5 = v4;
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA620);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1CCB6A4D0;
  *(_QWORD *)(v6 + 32) = 0xD000000000000019;
  *(_QWORD *)(v6 + 40) = 0x80000001CCB7DD30;
  *(_QWORD *)(v6 + 48) = v3;
  *(_QWORD *)(v6 + 56) = v5;
  sub_1CCADECC8(v1, v2);
  sub_1CCA14E90(&qword_1EF9E13B8);
  sub_1CCA638A8();
  v7 = sub_1CCB6394C();
  swift_bridgeObjectRelease();
  sub_1CCADEC6C(v1, v2);
  sub_1CCB63A24();
  return v7;
}

uint64_t sub_1CCB16C44()
{
  uint64_t v0;
  void *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)v0;
  v2 = *(_BYTE *)(v0 + 8);
  sub_1CCB63FB8();
  v3 = sub_1CCB169C8((uint64_t)v1, v2);
  v5 = v4;
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA620);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1CCB6A4D0;
  *(_QWORD *)(v6 + 32) = 0xD000000000000019;
  *(_QWORD *)(v6 + 40) = 0x80000001CCB7DD30;
  *(_QWORD *)(v6 + 48) = v3;
  *(_QWORD *)(v6 + 56) = v5;
  sub_1CCADECC8(v1, v2);
  sub_1CCA14E90(&qword_1EF9E13B8);
  sub_1CCA638A8();
  v7 = sub_1CCB6394C();
  swift_bridgeObjectRelease();
  sub_1CCADEC6C(v1, v2);
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  return v7;
}

uint64_t FMIPAccessoryError.localizedAlertTitle.getter()
{
  return sub_1CCB16D88((void (*)(void))sub_1CCB16B2C);
}

uint64_t sub_1CCB16D88(void (*a1)(void))
{
  uint64_t ObjCClassFromMetadata;
  id v2;
  uint64_t v3;

  a1();
  type metadata accessor for FMLocalize();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v3 = sub_1CCB63340();
  swift_bridgeObjectRelease();

  return v3;
}

uint64_t initializeBufferWithCopyOfBuffer for FMIPAccessoryError(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1CCADECC8(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for FMIPAccessoryError(uint64_t a1)
{
  sub_1CCADEC6C(*(id *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for FMIPAccessoryError(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;
  void *v5;
  unsigned __int8 v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1CCADECC8(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_1CCADEC6C(v5, v6);
  return a1;
}

uint64_t initializeWithTake for FMIPAccessoryError(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for FMIPAccessoryError(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_1CCADEC6C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPAccessoryError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPAccessoryError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1CCB17074(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 3u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_1CCB1708C(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t sub_1CCB170A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55[3];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[2];
  _QWORD v68[2];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _OWORD v80[2];
  uint64_t v81;
  _OWORD v82[11];
  _OWORD v83[3];
  uint64_t v84;

  v3 = type metadata accessor for FMIPDevice();
  v53 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (!v6)
    return result;
  v47[1] = v1;
  v81 = MEMORY[0x1E0DEE9D8];
  sub_1CCA1F730(0, v6, 0);
  v8 = v81;
  result = sub_1CCB121A0(a1);
  if (result < 0)
    goto LABEL_32;
  v10 = result;
  if (result >= 1 << *(_BYTE *)(a1 + 32))
    goto LABEL_32;
  v11 = a1 + 64;
  v48 = a1 + 80;
  v49 = v6;
  v12 = 1;
  v50 = v9;
  v51 = a1 + 64;
  v52 = a1;
  while (1)
  {
    v13 = v10 >> 6;
    if ((*(_QWORD *)(v11 + 8 * (v10 >> 6)) & (1 << v10)) == 0)
      break;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v9)
      goto LABEL_28;
    v84 = 1 << v10;
    v54 = v12;
    v14 = *(_QWORD *)(a1 + 56);
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v16 = v8;
    v17 = *v15;
    v18 = v15[1];
    v19 = (_OWORD *)(v14 + 208 * v10);
    v82[0] = *v19;
    v20 = v19[4];
    v22 = v19[1];
    v21 = v19[2];
    v82[3] = v19[3];
    v82[4] = v20;
    v82[1] = v22;
    v82[2] = v21;
    v23 = v19[8];
    v25 = v19[5];
    v24 = v19[6];
    v82[7] = v19[7];
    v82[8] = v23;
    v82[5] = v25;
    v82[6] = v24;
    v27 = v19[10];
    v26 = v19[11];
    v28 = *(_OWORD *)((char *)v19 + 185);
    v82[9] = v19[9];
    *(_OWORD *)((char *)v83 + 9) = v28;
    v82[10] = v27;
    v83[0] = v26;
    v29 = v19[10];
    v30 = v19[11];
    v31 = v19[8];
    v65 = v19[9];
    v66 = v29;
    v67[0] = v30;
    *(_OWORD *)((char *)v67 + 9) = *(_OWORD *)((char *)v19 + 185);
    v32 = v19[6];
    v63 = v19[7];
    v64 = v31;
    v33 = v19[3];
    v58 = v19[2];
    v59 = v33;
    v34 = v19[4];
    v61 = v19[5];
    v62 = v32;
    v60 = v34;
    v35 = v19[1];
    v56 = *v19;
    v57 = v35;
    v68[0] = v17;
    v68[1] = v18;
    v71 = v58;
    v72 = v59;
    v69 = v56;
    v70 = v35;
    v75 = v32;
    v76 = v63;
    v73 = v34;
    v74 = v61;
    *(_OWORD *)((char *)v80 + 9) = *(_OWORD *)((char *)v67 + 9);
    v79 = v66;
    v80[0] = v67[0];
    v77 = v31;
    v78 = v65;
    swift_bridgeObjectRetain();
    sub_1CCA83044(v82);
    swift_bridgeObjectRetain();
    sub_1CCA83044(v82);
    sub_1CCB1864C(v68);
    memset(v55, 0, sizeof(v55));
    swift_bridgeObjectRetain();
    sub_1CCA83044(v82);
    v36 = v17;
    v8 = v16;
    sub_1CCABD0A0((uint64_t)v82, v36, v18, v55, 0, (uint64_t)v5, 1.0);
    sub_1CCB1864C(v68);
    v81 = v16;
    v37 = (uint64_t)v5;
    v39 = *(_QWORD *)(v8 + 16);
    v38 = *(_QWORD *)(v8 + 24);
    if (v39 >= v38 >> 1)
    {
      sub_1CCA1F730(v38 > 1, v39 + 1, 1);
      v8 = v81;
    }
    *(_QWORD *)(v8 + 16) = v39 + 1;
    result = sub_1CC9F73E8(v37, v8+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(_QWORD *)(v53 + 72) * v39);
    a1 = v52;
    v40 = *(_BYTE *)(v52 + 32);
    if ((uint64_t)v10 >= 1 << v40)
      goto LABEL_29;
    v11 = v51;
    v41 = *(_QWORD *)(v51 + 8 * v13);
    if ((v41 & v84) == 0)
      goto LABEL_30;
    LODWORD(v9) = v50;
    if (*(_DWORD *)(v52 + 36) != (_DWORD)v50)
      goto LABEL_31;
    v5 = (char *)v37;
    v42 = v41 & (-2 << (v10 & 0x3F));
    if (v42)
    {
      v10 = __clz(__rbit64(v42)) | v10 & 0xFFFFFFFFFFFFFFC0;
      v43 = v49;
      goto LABEL_21;
    }
    v44 = v13 + 1;
    v45 = (unint64_t)((1 << v40) + 63) >> 6;
    v43 = v49;
    if (v13 + 1 < v45)
    {
      v46 = *(_QWORD *)(v51 + 8 * v44);
      if (v46)
      {
LABEL_19:
        v10 = __clz(__rbit64(v46)) + (v44 << 6);
        goto LABEL_21;
      }
      while (v45 - 2 != v13)
      {
        v46 = *(_QWORD *)(v48 + 8 * v13++);
        if (v46)
        {
          v44 = v13 + 1;
          goto LABEL_19;
        }
      }
    }
    v10 = 1 << v40;
LABEL_21:
    if (v54 == v43)
      return v8;
    if ((v10 & 0x8000000000000000) == 0)
    {
      v12 = v54 + 1;
      if ((uint64_t)v10 < 1 << v40)
        continue;
    }
    goto LABEL_32;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1CCB1747C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t result;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t i;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD v95[2];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _OWORD v107[2];
  uint64_t v108;

  v79 = a2;
  v3 = sub_1CCB63604();
  v82 = *(_QWORD *)(v3 - 8);
  v83 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = MEMORY[0x1E0DEE9D8];
  v80 = a1;
  if (v7)
  {
    v108 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1CCA63ABC(0, v7, 0);
    v9 = v7 - 1;
    v10 = 32;
    for (i = v6; ; v6 = i)
    {
      v96 = *(_OWORD *)(v6 + v10);
      v11 = *(_OWORD *)(v6 + v10 + 16);
      v12 = *(_OWORD *)(v6 + v10 + 32);
      v13 = *(_OWORD *)(v6 + v10 + 64);
      v99 = *(_OWORD *)(v6 + v10 + 48);
      v100 = v13;
      v97 = v11;
      v98 = v12;
      v14 = *(_OWORD *)(v6 + v10 + 80);
      v15 = *(_OWORD *)(v6 + v10 + 96);
      v16 = *(_OWORD *)(v6 + v10 + 128);
      v103 = *(_OWORD *)(v6 + v10 + 112);
      v104 = v16;
      v101 = v14;
      v102 = v15;
      v17 = *(_OWORD *)(v6 + v10 + 144);
      v18 = *(_OWORD *)(v6 + v10 + 160);
      v19 = *(_OWORD *)(v6 + v10 + 176);
      *(_OWORD *)((char *)v107 + 9) = *(_OWORD *)(v6 + v10 + 185);
      v106 = v18;
      v107[0] = v19;
      v105 = v17;
      sub_1CCA83044(&v96);
      sub_1CCB635F8();
      v20 = sub_1CCB635C8();
      v22 = v21;
      (*(void (**)(char *, uint64_t))(v82 + 8))(v5, v83);
      v23 = v108;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1CCA63ABC(0, *(_QWORD *)(v23 + 16) + 1, 1);
        v23 = v108;
      }
      v25 = *(_QWORD *)(v23 + 16);
      v24 = *(_QWORD *)(v23 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_1CCA63ABC(v24 > 1, v25 + 1, 1);
        v23 = v108;
      }
      v86 = v98;
      v87 = v99;
      v90 = v102;
      v91 = v103;
      v88 = v100;
      v89 = v101;
      *(_OWORD *)((char *)v95 + 9) = *(_OWORD *)((char *)v107 + 9);
      v94 = v106;
      v95[0] = v107[0];
      v92 = v104;
      v93 = v105;
      v84 = v96;
      v85 = v97;
      *(_QWORD *)(v23 + 16) = v25 + 1;
      v26 = v23 + 224 * v25;
      *(_QWORD *)(v26 + 32) = v20;
      *(_QWORD *)(v26 + 40) = v22;
      *(_OWORD *)(v26 + 48) = v84;
      v27 = v85;
      v28 = v86;
      v29 = v88;
      *(_OWORD *)(v26 + 96) = v87;
      *(_OWORD *)(v26 + 112) = v29;
      *(_OWORD *)(v26 + 64) = v27;
      *(_OWORD *)(v26 + 80) = v28;
      v30 = v89;
      v31 = v90;
      v32 = v92;
      *(_OWORD *)(v26 + 160) = v91;
      *(_OWORD *)(v26 + 176) = v32;
      *(_OWORD *)(v26 + 128) = v30;
      *(_OWORD *)(v26 + 144) = v31;
      v33 = v93;
      v34 = v94;
      v35 = v95[0];
      *(_OWORD *)(v26 + 233) = *(_OWORD *)((char *)v95 + 9);
      *(_OWORD *)(v26 + 208) = v34;
      *(_OWORD *)(v26 + 224) = v35;
      *(_OWORD *)(v26 + 192) = v33;
      if (!v9)
        break;
      --v9;
      v10 += 208;
    }
    swift_bridgeObjectRelease();
    a1 = v80;
    v8 = MEMORY[0x1E0DEE9D8];
    if (*(_QWORD *)(v23 + 16))
      goto LABEL_10;
  }
  else if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
  {
LABEL_10:
    sub_1CCA14E90(&qword_1EF9E3EE8);
    v36 = sub_1CCB640B4();
    goto LABEL_13;
  }
  v36 = MEMORY[0x1E0DEE9E0];
LABEL_13:
  *(_QWORD *)&v96 = v36;
  v37 = swift_bridgeObjectRetain();
  sub_1CCB181FC(v37, 1, &v96);
  swift_bridgeObjectRelease();
  v38 = v96;
  v39 = *(_QWORD *)(a1 + 16);
  sub_1CCB1793C(*(_QWORD *)(v39 + 16) != 0, (uint64_t)&v96);
  v41 = *((_QWORD *)&v96 + 1);
  v40 = v96;
  v78 = *((_QWORD *)&v97 + 1);
  v42 = v97;
  v76 = BYTE1(v98);
  v77 = v98;
  v74 = BYTE3(v98);
  v75 = BYTE2(v98);
  v72 = v99;
  v73 = *((_QWORD *)&v98 + 1);
  v70 = v100;
  v71 = *((_QWORD *)&v99 + 1);
  v68 = v101;
  v69 = *((_QWORD *)&v100 + 1);
  v43 = sub_1CCB170A8(v38);
  v44 = v43;
  v45 = *(_QWORD *)(v39 + 16);
  if (v45)
  {
    v63 = v43;
    v64 = v42;
    v65 = v41;
    v66 = v40;
    v67 = v38;
    *(_QWORD *)&v96 = v8;
    swift_bridgeObjectRetain();
    v46 = v39;
    sub_1CCA63AA0(0, v45, 0);
    v47 = v96;
    v62 = v46;
    v48 = (uint64_t *)(v46 + 72);
    do
    {
      v49 = *(v48 - 5);
      v50 = *(v48 - 4);
      v51 = *(v48 - 2);
      i = *(v48 - 3);
      v82 = v49;
      v52 = *v48;
      v83 = *(v48 - 1);
      *(_QWORD *)&v96 = v47;
      v53 = *(_QWORD *)(v47 + 16);
      v54 = *(_QWORD *)(v47 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v53 >= v54 >> 1)
      {
        sub_1CCA63AA0(v54 > 1, v53 + 1, 1);
        v47 = v96;
      }
      v48 += 6;
      *(_QWORD *)(v47 + 16) = v53 + 1;
      v55 = v47 + 88 * v53;
      *(_QWORD *)(v55 + 32) = v82;
      *(_QWORD *)(v55 + 40) = v50;
      *(_QWORD *)(v55 + 48) = i;
      *(_QWORD *)(v55 + 56) = v51;
      *(_DWORD *)(v55 + 64) = 256;
      *(_QWORD *)(v55 + 72) = 0;
      *(_QWORD *)(v55 + 80) = 0xE000000000000000;
      *(_QWORD *)(v55 + 88) = v83;
      *(_QWORD *)(v55 + 96) = v52;
      *(_QWORD *)(v55 + 104) = 0;
      *(_QWORD *)(v55 + 112) = 0;
      --v45;
    }
    while (v45);
    swift_bridgeObjectRelease();
    result = swift_release();
    v40 = v66;
    v38 = v67;
    v42 = v64;
    v41 = v65;
    v44 = v63;
  }
  else
  {
    result = swift_release();
    v47 = MEMORY[0x1E0DEE9D8];
  }
  v58 = v78;
  v57 = v79;
  *v79 = v40;
  v57[1] = v41;
  v57[2] = v42;
  v57[3] = v58;
  *((_BYTE *)v57 + 32) = v77;
  *((_BYTE *)v57 + 33) = v76;
  *((_BYTE *)v57 + 34) = v75;
  *((_BYTE *)v57 + 35) = v74;
  v59 = v72;
  v57[5] = v73;
  v57[6] = v59;
  v60 = v70;
  v57[7] = v71;
  v57[8] = v60;
  v61 = v68;
  v57[9] = v69;
  v57[10] = v61;
  v57[11] = v44;
  v57[12] = v47;
  v57[13] = v38;
  return result;
}

void sub_1CCB1793C(char a1@<W0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  unint64_t v17;
  id v18;
  void *v19;
  unint64_t v20;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C8F2B8]), sel_init);
  v5 = objc_msgSend(v4, sel_aa_primaryAppleAccount);

  if (v5)
  {
    v6 = objc_msgSend(v5, sel_aa_firstName);
    if (v6)
    {
      v7 = v6;
      v8 = sub_1CCB63988();
      v10 = v9;

    }
    else
    {
      v8 = 0;
      v10 = 0xE000000000000000;
    }
    v15 = objc_msgSend(v5, sel_aa_lastName);
    if (v15)
    {
      v16 = v15;
      v12 = sub_1CCB63988();
      v14 = v17;

    }
    else
    {
      v12 = 0;
      v14 = 0xE000000000000000;
    }
    v18 = objc_msgSend(v5, sel_aa_formattedUsername);
    if (v18)
    {
      v19 = v18;
      v11 = sub_1CCB63988();
      v13 = v20;

    }
    else
    {
      v11 = 0;
      v13 = 0xE000000000000000;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v8 = 0;
    v13 = 0xE000000000000000;
    v14 = 0xE000000000000000;
    v10 = 0xE000000000000000;
  }

  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v14;
  *(_BYTE *)(a2 + 32) = a1 & 1;
  *(_WORD *)(a2 + 33) = 1;
  *(_BYTE *)(a2 + 35) = 0;
  *(_QWORD *)(a2 + 40) = v11;
  *(_QWORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 56) = 0x72656E776FLL;
  *(_QWORD *)(a2 + 64) = 0xE500000000000000;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
}

uint64_t sub_1CCB17AC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v35[4];
  char v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v2 = v1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v3 = sub_1CCB637FC();
  sub_1CCA16C20(v3, (uint64_t)qword_1ED8AD7F8);
  v4 = sub_1CCB637D8();
  v5 = sub_1CCB63D48();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1CC9BF000, v4, v5, "FMIPDemoDataSource: Recalculating state for demo content.", v6, 2u);
    MEMORY[0x1D17B214C](v6, -1, -1);
  }

  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  v10 = *(_BYTE *)(v2 + 48);
  v11 = *(_BYTE *)(v2 + 49);
  v12 = *(_BYTE *)(v2 + 50);
  v13 = *(_BYTE *)(v2 + 51);
  v14 = *(_QWORD *)(v2 + 56);
  v15 = *(_QWORD *)(v2 + 64);
  v16 = *(_QWORD *)(v2 + 72);
  v17 = *(_QWORD *)(v2 + 80);
  v18 = *(_QWORD *)(v2 + 88);
  v19 = *(_QWORD *)(v2 + 96);
  v20 = *(_QWORD *)(v2 + 104);
  v21 = *(_QWORD *)(v2 + 112);
  v22 = *(_QWORD *)(v2 + 120);
  v35[0] = *(_QWORD *)(v2 + 16);
  v35[1] = v7;
  v35[2] = v8;
  v35[3] = v9;
  v36 = v10;
  v37 = v11;
  v38 = v12;
  v39 = v13;
  v40 = v14;
  v41 = v15;
  v42 = v16;
  v43 = v17;
  v44 = v18;
  v45 = v19;
  v46 = v20;
  v47 = v21;
  v48 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCA826EC(v35, a1, (uint64_t)&v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = v50;
  v24 = v51;
  v25 = v52;
  v26 = v53;
  v27 = v54;
  v28 = v55;
  v29 = v56;
  v30 = v57;
  v31 = v58;
  v32 = v61;
  *(_OWORD *)(v2 + 16) = v49;
  *(_QWORD *)(v2 + 32) = v23;
  *(_QWORD *)(v2 + 40) = v24;
  *(_BYTE *)(v2 + 48) = v25;
  *(_BYTE *)(v2 + 49) = v26;
  *(_BYTE *)(v2 + 50) = v27;
  *(_BYTE *)(v2 + 51) = v28;
  *(_OWORD *)(v2 + 56) = v29;
  *(_QWORD *)(v2 + 72) = v30;
  *(_QWORD *)(v2 + 80) = v31;
  *(_OWORD *)(v2 + 88) = v59;
  *(_OWORD *)(v2 + 104) = v60;
  *(_QWORD *)(v2 + 120) = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB17D50()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FMIPDemoDataSource()
{
  return objc_opt_self();
}

uint64_t destroy for FMIPDemoDataState()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FMIPDemoDataState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FMIPDemoDataState(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for FMIPDemoDataState(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for FMIPDemoDataState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPDemoDataState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPDemoDataState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPDemoDataState()
{
  return &type metadata for FMIPDemoDataState;
}

void sub_1CCB181FC(uint64_t a1, char a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  __int128 v21;
  _QWORD *v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  _QWORD *v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _OWORD v61[2];
  _BYTE v62[224];
  _OWORD v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _OWORD v74[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD v87[3];
  _QWORD *v88;

  v88 = a3;
  v4 = *(_QWORD *)(a1 + 16);
  v47 = a1 + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  if (v4)
    goto LABEL_3;
LABEL_2:
  sub_1CCB18810(v63);
  sub_1CCB187B0((uint64_t)v63, (uint64_t)&v75);
  v6 = v4;
  while (1)
  {
    sub_1CCB187B0((uint64_t)&v75, (uint64_t)v62);
    sub_1CCB187B0((uint64_t)v62, (uint64_t)v63);
    if (sub_1CCB187F8((uint64_t)v63) == 1)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
    v49 = v6;
    v20 = a2;
    v21 = v75;
    v60 = v86;
    v61[0] = v87[0];
    *(_OWORD *)((char *)v61 + 9) = *(_OWORD *)((char *)v87 + 9);
    v56 = v82;
    v57 = v83;
    v58 = v84;
    v59 = v85;
    v52 = v78;
    v53 = v79;
    v54 = v80;
    v55 = v81;
    v50 = v76;
    v51 = v77;
    v22 = (_QWORD *)*v88;
    v24 = sub_1CCA074F4(v75, *((uint64_t *)&v75 + 1));
    v25 = v22[2];
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      sub_1CCB642DC();
      __break(1u);
      goto LABEL_24;
    }
    v28 = v23;
    if (v22[3] < v27)
      break;
    if ((v20 & 1) != 0)
    {
      if ((v23 & 1) != 0)
        goto LABEL_17;
    }
    else
    {
      sub_1CCAED010();
      if ((v28 & 1) != 0)
        goto LABEL_17;
    }
LABEL_13:
    v31 = (_QWORD *)*v88;
    v31[(v24 >> 6) + 8] |= 1 << v24;
    *(_OWORD *)(v31[6] + 16 * v24) = v21;
    v32 = (_OWORD *)(v31[7] + 208 * v24);
    *v32 = v50;
    v33 = v51;
    v34 = v52;
    v35 = v54;
    v32[3] = v53;
    v32[4] = v35;
    v32[1] = v33;
    v32[2] = v34;
    v36 = v55;
    v37 = v56;
    v38 = v58;
    v32[7] = v57;
    v32[8] = v38;
    v32[5] = v36;
    v32[6] = v37;
    v39 = v59;
    v40 = v60;
    v41 = v61[0];
    *(_OWORD *)((char *)v32 + 185) = *(_OWORD *)((char *)v61 + 9);
    v32[10] = v40;
    v32[11] = v41;
    v32[9] = v39;
    v42 = v31[2];
    v43 = __OFADD__(v42, 1);
    v44 = v42 + 1;
    if (v43)
      goto LABEL_21;
    v31[2] = v44;
    a2 = 1;
    v5 = v49;
    if (v49 == v4)
      goto LABEL_2;
LABEL_3:
    if (v5 >= *(_QWORD *)(a1 + 16))
      goto LABEL_22;
    v7 = (_OWORD *)(v47 + 224 * v5);
    v8 = v7[11];
    v9 = v7[9];
    v72 = v7[10];
    v73 = v8;
    v10 = v7[11];
    v74[0] = v7[12];
    *(_OWORD *)((char *)v74 + 9) = *(_OWORD *)((char *)v7 + 201);
    v11 = v7[7];
    v12 = v7[5];
    v68 = v7[6];
    v69 = v11;
    v13 = v7[7];
    v14 = v7[9];
    v70 = v7[8];
    v71 = v14;
    v15 = v7[3];
    v16 = v7[1];
    v64 = v7[2];
    v65 = v15;
    v17 = v7[3];
    v18 = v7[5];
    v66 = v7[4];
    v67 = v18;
    v19 = v7[1];
    v63[0] = *v7;
    v63[1] = v19;
    v85 = v72;
    v86 = v10;
    v87[0] = v7[12];
    *(_OWORD *)((char *)v87 + 9) = *(_OWORD *)((char *)v7 + 201);
    v81 = v68;
    v82 = v13;
    v83 = v70;
    v84 = v9;
    v77 = v64;
    v78 = v17;
    v79 = v66;
    v80 = v12;
    v6 = v5 + 1;
    v75 = v63[0];
    v76 = v16;
    nullsub_1(&v75);
    sub_1CCB186FC(v63);
  }
  sub_1CCAE9424(v27, v20 & 1);
  v29 = sub_1CCA074F4(v21, *((uint64_t *)&v21 + 1));
  if ((v28 & 1) != (v30 & 1))
    goto LABEL_23;
  v24 = v29;
  if ((v28 & 1) == 0)
    goto LABEL_13;
LABEL_17:
  v45 = (void *)swift_allocError();
  swift_willThrow();
  v46 = v45;
  sub_1CCA14E90(&qword_1EF9DF470);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_1CCA83160(&v50);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_24:
  sub_1CCB63FB8();
  sub_1CCB63A24();
  sub_1CCB64060();
  sub_1CCB63A24();
  sub_1CCB64084();
  __break(1u);
}

_QWORD *sub_1CCB1864C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[19];
  v5 = a1[18];
  v6 = a1[17];
  v3 = a1[20];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCA83208(v6, v5, v2, v3);
  return a1;
}

_QWORD *sub_1CCB186FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[19];
  v5 = a1[18];
  v6 = a1[17];
  v3 = a1[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCA830F0(v6, v5, v2, v3);
  return a1;
}

uint64_t sub_1CCB187B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1EF9E5318);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCB187F8(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_1CCB18810(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 201) = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

FMIPCore::FMFSatelliteLocationTapSource_optional __swiftcall FMFSatelliteLocationTapSource.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (FMIPCore::FMFSatelliteLocationTapSource_optional)sub_1CCB18A8C(v1);
}

uint64_t FMFSatelliteLocationTapSource.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6163696669746F6ELL;
  else
    return 0x636E75614C707061;
}

uint64_t sub_1CCB18890(char *a1, char *a2)
{
  return sub_1CCB1B128(*a1, *a2);
}

uint64_t sub_1CCB1889C()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB1892C()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB18998()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMFSatelliteLocationTapSource_optional sub_1CCB18A24(Swift::String *a1)
{
  return FMFSatelliteLocationTapSource.init(rawValue:)(*a1);
}

void sub_1CCB18A30(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x636E75614C707061;
  if (*v1)
    v2 = 0x6163696669746F6ELL;
  v3 = 0xE900000000000068;
  if (*v1)
    v3 = 0xEF7061546E6F6974;
  *a1 = v2;
  a1[1] = v3;
}

FMIPCore::FMFSatelliteEducationFlowType_optional __swiftcall FMFSatelliteEducationFlowType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (FMIPCore::FMFSatelliteEducationFlowType_optional)sub_1CCB18A8C(v1);
}

uint64_t sub_1CCB18A8C@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t FMFSatelliteEducationFlowType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F4C657461647075;
  else
    return 0xD00000000000001ALL;
}

uint64_t sub_1CCB18B34(char *a1, char *a2)
{
  return sub_1CCB1B1DC(*a1, *a2);
}

uint64_t sub_1CCB18B40()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB18BD0()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB18C3C()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMFSatelliteEducationFlowType_optional sub_1CCB18CC8(Swift::String *a1)
{
  return FMFSatelliteEducationFlowType.init(rawValue:)(*a1);
}

void sub_1CCB18CD4(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0xD00000000000001ALL;
  if (*v1)
    v2 = 0x6F4C657461647075;
  v3 = 0x80000001CCB77F80;
  if (*v1)
    v3 = 0xEE006E6F69746163;
  *a1 = v2;
  a1[1] = v3;
}

FMIPCore::FMFSatelliteUpdateBlockingCondition_optional __swiftcall FMFSatelliteUpdateBlockingCondition.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  FMIPCore::FMFSatelliteUpdateBlockingCondition_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  v5 = 10;
  if (v3 < 0xA)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t FMFSatelliteUpdateBlockingCondition.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB18DA4
                                                            + 4 * asc_1CCB71DF0[*v0]))(1701736302, 0xE400000000000000);
}

uint64_t sub_1CCB18DA4()
{
  return 0x7055746553746F6ELL;
}

uint64_t sub_1CCB18DBC()
{
  return 0x646E656972466F6ELL;
}

uint64_t sub_1CCB18DD8()
{
  return 0x766544654D746F6ELL;
}

uint64_t sub_1CCB18DF8()
{
  return 0x656E696C6E6FLL;
}

uint64_t sub_1CCB18E0C()
{
  return 0x636972656E6567;
}

unint64_t sub_1CCB18E24()
{
  return 0xD000000000000012;
}

unint64_t sub_1CCB18E40()
{
  return 0xD000000000000018;
}

uint64_t sub_1CCB18E9C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CCB18ED8 + 4 * byte_1CCB71DFA[a1]))(0xD00000000000001ALL, 0x80000001CCB7E060);
}

unint64_t sub_1CCB18ED8()
{
  return 0xD000000000000012;
}

void sub_1CCB18F74(char *a1)
{
  sub_1CCB1AA6C(*a1);
}

uint64_t sub_1CCB18F80()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCB590CC((uint64_t)v3, v1);
  return sub_1CCB64384();
}

void sub_1CCB18FC4(uint64_t a1)
{
  char *v1;

  sub_1CCB590CC(a1, *v1);
}

uint64_t sub_1CCB18FCC()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCB590CC((uint64_t)v3, v1);
  return sub_1CCB64384();
}

FMIPCore::FMFSatelliteUpdateBlockingCondition_optional sub_1CCB1900C(Swift::String *a1)
{
  return FMFSatelliteUpdateBlockingCondition.init(rawValue:)(*a1);
}

uint64_t sub_1CCB19018@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FMFSatelliteUpdateBlockingCondition.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t FMFSatelliteLocationNotificationEvent.notificationPresentedToUser.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t FMFSatelliteLocationNotificationEvent.notificationPresentedToUser.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*FMFSatelliteLocationNotificationEvent.notificationPresentedToUser.modify())()
{
  return nullsub_1;
}

uint64_t FMFSatelliteLocationNotificationEvent.notificationTapped.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t FMFSatelliteLocationNotificationEvent.notificationTapped.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*FMFSatelliteLocationNotificationEvent.notificationTapped.modify())()
{
  return nullsub_1;
}

FMIPCore::FMFSatelliteLocationNotificationEvent __swiftcall FMFSatelliteLocationNotificationEvent.init(notificationPresentedToUser:notificationTapped:)(Swift::Bool_optional notificationPresentedToUser, Swift::Bool_optional notificationTapped)
{
  Swift::Bool_optional *v2;
  FMIPCore::FMFSatelliteLocationNotificationEvent result;

  v2->value = notificationPresentedToUser.value;
  v2[1].value = notificationTapped.value;
  result.notificationPresentedToUser = notificationPresentedToUser;
  return result;
}

void FMFSatelliteLocationUpdateEvent.educationFlowInitiatedType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *FMFSatelliteLocationUpdateEvent.educationFlowInitiatedType.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*FMFSatelliteLocationUpdateEvent.educationFlowInitiatedType.modify())()
{
  return nullsub_1;
}

void FMFSatelliteLocationUpdateEvent.educationFlowInitiatedTapSource.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *FMFSatelliteLocationUpdateEvent.educationFlowInitiatedTapSource.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*FMFSatelliteLocationUpdateEvent.educationFlowInitiatedTapSource.modify())()
{
  return nullsub_1;
}

uint64_t FMFSatelliteLocationUpdateEvent.sendLocationTapped.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t FMFSatelliteLocationUpdateEvent.sendLocationTapped.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*FMFSatelliteLocationUpdateEvent.sendLocationTapped.modify())()
{
  return nullsub_1;
}

void FMFSatelliteLocationUpdateEvent.updateFlowBlockingCondition.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 3);
}

_BYTE *FMFSatelliteLocationUpdateEvent.updateFlowBlockingCondition.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 3) = *result;
  return result;
}

uint64_t (*FMFSatelliteLocationUpdateEvent.updateFlowBlockingCondition.modify())()
{
  return nullsub_1;
}

uint64_t FMFSatelliteLocationUpdateEvent.updateFlowOffline.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t FMFSatelliteLocationUpdateEvent.updateFlowOffline.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  return result;
}

uint64_t (*FMFSatelliteLocationUpdateEvent.updateFlowOffline.modify())()
{
  return nullsub_1;
}

uint64_t FMFSatelliteLocationUpdateEvent.updateFlowCanceled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 5);
}

uint64_t FMFSatelliteLocationUpdateEvent.updateFlowCanceled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 5) = result;
  return result;
}

uint64_t (*FMFSatelliteLocationUpdateEvent.updateFlowCanceled.modify())()
{
  return nullsub_1;
}

uint64_t FMFSatelliteLocationUpdateEvent.updateFlowLSOffGoToSettingsPressed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 6);
}

uint64_t FMFSatelliteLocationUpdateEvent.updateFlowLSOffGoToSettingsPressed.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 6) = result;
  return result;
}

uint64_t (*FMFSatelliteLocationUpdateEvent.updateFlowLSOffGoToSettingsPressed.modify())()
{
  return nullsub_1;
}

uint64_t FMFSatelliteLocationUpdateEvent.updateFlowLSOffOkPressed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 7);
}

uint64_t FMFSatelliteLocationUpdateEvent.updateFlowLSOffOkPressed.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 7) = result;
  return result;
}

uint64_t (*FMFSatelliteLocationUpdateEvent.updateFlowLSOffOkPressed.modify())()
{
  return nullsub_1;
}

FMIPCore::FMFSatelliteLocationUpdateEvent __swiftcall FMFSatelliteLocationUpdateEvent.init(flowType:educationFlowInitiatedTapSource:sendLocationTapped:updateFlowBlockingCondition:updateFlowOffline:updateFlowCanceled:updateFlowLSOffGoToSettingsPressed:updateFlowLSOffOkPressed:)(FMIPCore::FMFSatelliteEducationFlowType flowType, FMIPCore::FMFSatelliteLocationTapSource educationFlowInitiatedTapSource, Swift::Bool sendLocationTapped, FMIPCore::FMFSatelliteUpdateBlockingCondition updateFlowBlockingCondition, Swift::Bool updateFlowOffline, Swift::Bool updateFlowCanceled, Swift::Bool_optional updateFlowLSOffGoToSettingsPressed, Swift::Bool_optional updateFlowLSOffOkPressed)
{
  Swift::Bool_optional *v8;
  char v9;
  char v10;
  FMIPCore::FMFSatelliteLocationUpdateEvent result;

  v9 = *(_BYTE *)educationFlowInitiatedTapSource;
  v10 = *(_BYTE *)updateFlowBlockingCondition;
  v8->value = *(Swift::Bool *)flowType;
  v8[1].value = v9;
  v8[2].value = sendLocationTapped;
  v8[3].value = v10;
  v8[4].value = updateFlowOffline;
  v8[5].value = updateFlowCanceled;
  v8[6].value = updateFlowLSOffGoToSettingsPressed.value;
  v8[7].value = updateFlowLSOffOkPressed.value;
  result.educationFlowInitiatedType = flowType;
  return result;
}

Swift::Void __swiftcall FMIPManager.enqueue(satelliteLocationUpdateEvent:)(FMIPCore::FMFSatelliteLocationUpdateEvent satelliteLocationUpdateEvent)
{
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11[5];

  v1 = *(_BYTE *)satelliteLocationUpdateEvent.educationFlowInitiatedType;
  v2 = *(_BYTE *)(*(_QWORD *)&satelliteLocationUpdateEvent + 1);
  v3 = *(_BYTE *)(*(_QWORD *)&satelliteLocationUpdateEvent + 2);
  v4 = *(_BYTE *)(*(_QWORD *)&satelliteLocationUpdateEvent + 3);
  v5 = *(_BYTE *)(*(_QWORD *)&satelliteLocationUpdateEvent + 4);
  v6 = *(_BYTE *)(*(_QWORD *)&satelliteLocationUpdateEvent + 5);
  v7 = *(_BYTE *)(*(_QWORD *)&satelliteLocationUpdateEvent + 6);
  v8 = *(_BYTE *)(*(_QWORD *)&satelliteLocationUpdateEvent + 7);
  v9 = sub_1CCB631E4();
  v11[3] = v9;
  v11[4] = sub_1CC9CAA38(&qword_1ED8A8B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
  v10 = sub_1CCA01CC0(v11);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v10, *MEMORY[0x1E0D21248], v9);
  LOBYTE(v9) = MEMORY[0x1D17B0748](v11);
  sub_1CCA01CA0((uint64_t)v11);
  if ((v9 & 1) != 0)
  {
    LOBYTE(v11[0]) = v1;
    BYTE1(v11[0]) = v2;
    BYTE2(v11[0]) = v3;
    BYTE3(v11[0]) = v4;
    BYTE4(v11[0]) = v5;
    BYTE5(v11[0]) = v6;
    BYTE6(v11[0]) = v7;
    HIBYTE(v11[0]) = v8;
    _s8FMIPCore13FMIPAnalyticsV32sendSatelliteLocationUpdateEvent5eventyAA012FMFSatelliteefG0V_tFZ_0((char *)v11);
  }
}

Swift::Void __swiftcall FMIPManager.enqueue(satelliteLocationNotificationEvent:)(FMIPCore::FMFSatelliteLocationNotificationEvent satelliteLocationNotificationEvent)
{
  char v1;
  char v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5[5];

  v1 = **(_BYTE **)&satelliteLocationNotificationEvent.notificationPresentedToUser.value;
  v2 = *(_BYTE *)(*(_QWORD *)&satelliteLocationNotificationEvent.notificationPresentedToUser.value + 1);
  v3 = sub_1CCB631E4();
  v5[3] = v3;
  v5[4] = sub_1CC9CAA38(&qword_1ED8A8B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
  v4 = sub_1CCA01CC0(v5);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v4, *MEMORY[0x1E0D21248], v3);
  LOBYTE(v3) = MEMORY[0x1D17B0748](v5);
  sub_1CCA01CA0((uint64_t)v5);
  if ((v3 & 1) != 0)
  {
    LOBYTE(v5[0]) = v1;
    BYTE1(v5[0]) = v2;
    _s8FMIPCore13FMIPAnalyticsV38sendSatelliteLocationNotificationEvent5eventyAA012FMFSatelliteefG0V_tFZ_0((char *)v5);
  }
}

void sub_1CCB19378(unint64_t a1)
{
  char v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  char isUniquelyReferenced_nonNull_native;
  id v7;
  char v8;
  id v9;
  void *v10;
  id v11;
  char v12;

  v1 = BYTE3(a1);
  v2 = (a1 >> 16) & 1;
  sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
  v3 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v4 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_initWithString_, v4);

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v5, 0xD00000000000001ALL, 0x80000001CCB7E060, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v2);
  v8 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v7, 0xD000000000000012, 0x80000001CCB7E040, v8);
  swift_bridgeObjectRelease();
  v9 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v10 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v9, sel_initWithString_, v10);

  v12 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v11, 0xD000000000000018, 0x80000001CCB7E020, v12);
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

uint64_t sub_1CCB195BC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  char isUniquelyReferenced_nonNull_native;
  id v9;
  char v10;
  id v11;
  char v12;
  id v13;
  char v14;
  id v15;
  char v16;

  v5 = objc_allocWithZone(*(Class *)(v3 + 2368));
  v6 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v5, *(SEL *)(v4 + 3912), v6);

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v7, v2 + 9, 0x80000001CCB7E000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, HIDWORD(v0) & 1);
  v10 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v9, v2 - 1, 0x80000001CCB7DFE0, v10);
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, (v0 >> 40) & 1);
  v12 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v11, 0xD000000000000012, 0x80000001CCB7DFC0, v12);
  swift_bridgeObjectRelease();
  if ((v0 & 0xFF000000000000) != 0x2000000000000)
  {
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, HIWORD(v0) & 1);
    v14 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CC9E1E50((uint64_t)v13, v2 + 16, 0x80000001CCB7DF90, v14);
    swift_bridgeObjectRelease();
  }
  if (HIBYTE(v0) != 2)
  {
    v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, HIBYTE(v0) & 1);
    v16 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CC9E1E50((uint64_t)v15, v2 + 6, 0x80000001CCB7DF70, v16);
    swift_bridgeObjectRelease();
  }
  sub_1CCB1A310(v1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB198C4(unsigned int a1)
{
  int v2;
  unint64_t v3;
  id v4;
  char isUniquelyReferenced_nonNull_native;
  id v6;
  char v7;

  v2 = a1;
  v3 = sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
  if (v2 != 2)
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a1 & 1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1CC9E1E50((uint64_t)v4, 0xD00000000000001BLL, 0x80000001CCB7DF50, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  if ((a1 & 0xFF00) != 0x200)
  {
    v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, (a1 >> 8) & 1);
    v7 = swift_isUniquelyReferenced_nonNull_native();
    sub_1CC9E1E50((uint64_t)v6, 0xD000000000000012, 0x80000001CCB7DF30, v7);
    swift_bridgeObjectRelease();
  }
  sub_1CCB1A450(v3);
  return swift_bridgeObjectRelease();
}

uint64_t _s8FMIPCore13FMIPAnalyticsV32sendSatelliteLocationUpdateEvent5eventyAA012FMFSatelliteefG0V_tFZ_0(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t result;
  _BYTE *v18;
  void *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t aBlock[3];
  void *v28;
  uint64_t v29;
  _BYTE *v30;

  v2 = sub_1CCB63820();
  v25 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCB63868();
  v23 = *(_QWORD *)(v5 - 8);
  v24 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  v11 = a1[3];
  v12 = a1[4];
  v13 = a1[5];
  v14 = a1[6];
  v21 = a1[7];
  v22 = v14;
  v15 = sub_1CCB631E4();
  v28 = (void *)v15;
  v29 = sub_1CC9CAA38(&qword_1ED8A8B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
  v16 = sub_1CCA01CC0(aBlock);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v16, *MEMORY[0x1E0D21248], v15);
  LOBYTE(v15) = MEMORY[0x1D17B0748](aBlock);
  result = sub_1CCA01CA0((uint64_t)aBlock);
  if ((v15 & 1) != 0)
  {
    if (qword_1EF9DF018 != -1)
      swift_once();
    v20 = qword_1ED8A70B0;
    v18 = (_BYTE *)swift_allocObject();
    v18[16] = v8;
    v18[17] = v9;
    v18[18] = v10;
    v18[19] = v11;
    v18[20] = v12;
    v18[21] = v13;
    v18[22] = v22;
    v18[23] = v21;
    v29 = (uint64_t)sub_1CCB1A5A0;
    v30 = v18;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CCA00C38;
    v28 = &unk_1E88FE318;
    v19 = _Block_copy(aBlock);
    sub_1CCB63844();
    v26 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA1FC64();
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v7, v4, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v4, v2);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v24);
    return swift_release();
  }
  return result;
}

uint64_t _s8FMIPCore13FMIPAnalyticsV38sendSatelliteLocationNotificationEvent5eventyAA012FMFSatelliteefG0V_tFZ_0(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t result;
  uint64_t v15;
  void *v16;
  _QWORD v17[2];
  uint64_t aBlock[3];
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = sub_1CCB63820();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63868();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = a1[1];
  v12 = sub_1CCB631E4();
  v19 = (void *)v12;
  v20 = sub_1CC9CAA38(&qword_1ED8A8B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
  v13 = sub_1CCA01CC0(aBlock);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v13, *MEMORY[0x1E0D21248], v12);
  LOBYTE(v12) = MEMORY[0x1D17B0748](aBlock);
  result = sub_1CCA01CA0((uint64_t)aBlock);
  if ((v12 & 1) != 0)
  {
    if (qword_1EF9DF018 != -1)
      swift_once();
    v15 = swift_allocObject();
    *(_BYTE *)(v15 + 16) = v10;
    *(_BYTE *)(v15 + 17) = v11;
    v20 = (uint64_t)sub_1CCB1A308;
    v21 = v15;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CCA00C38;
    v19 = &unk_1E88FE278;
    v16 = _Block_copy(aBlock);
    sub_1CCB63844();
    v17[1] = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA1FC64();
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v9, v5, v16);
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return swift_release();
  }
  return result;
}

unint64_t sub_1CCB19F08()
{
  unint64_t result;

  result = qword_1EF9E5320;
  if (!qword_1EF9E5320)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMFSatelliteLocationTapSource, &type metadata for FMFSatelliteLocationTapSource);
    atomic_store(result, (unint64_t *)&qword_1EF9E5320);
  }
  return result;
}

unint64_t sub_1CCB19F50()
{
  unint64_t result;

  result = qword_1EF9E5328;
  if (!qword_1EF9E5328)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMFSatelliteEducationFlowType, &type metadata for FMFSatelliteEducationFlowType);
    atomic_store(result, (unint64_t *)&qword_1EF9E5328);
  }
  return result;
}

unint64_t sub_1CCB19F98()
{
  unint64_t result;

  result = qword_1EF9E5330;
  if (!qword_1EF9E5330)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMFSatelliteUpdateBlockingCondition, &type metadata for FMFSatelliteUpdateBlockingCondition);
    atomic_store(result, (unint64_t *)&qword_1EF9E5330);
  }
  return result;
}

ValueMetadata *type metadata accessor for FMFSatelliteLocationTapSource()
{
  return &type metadata for FMFSatelliteLocationTapSource;
}

uint64_t _s8FMIPCore29FMFSatelliteLocationTapSourceOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCB1A040 + 4 * byte_1CCB71E13[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCB1A074 + 4 * byte_1CCB71E0E[v4]))();
}

uint64_t sub_1CCB1A074(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB1A07C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB1A084);
  return result;
}

uint64_t sub_1CCB1A090(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB1A098);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCB1A09C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB1A0A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMFSatelliteEducationFlowType()
{
  return &type metadata for FMFSatelliteEducationFlowType;
}

uint64_t storeEnumTagSinglePayload for FMFSatelliteUpdateBlockingCondition(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1CCB1A10C + 4 * byte_1CCB71E1D[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1CCB1A140 + 4 * byte_1CCB71E18[v4]))();
}

uint64_t sub_1CCB1A140(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB1A148(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB1A150);
  return result;
}

uint64_t sub_1CCB1A15C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB1A164);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1CCB1A168(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB1A170(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMFSatelliteUpdateBlockingCondition()
{
  return &type metadata for FMFSatelliteUpdateBlockingCondition;
}

uint64_t storeEnumTagSinglePayload for FMFSatelliteLocationNotificationEvent(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCB1A1D8 + 4 * byte_1CCB71E27[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_1CCB1A20C + 4 * byte_1CCB71E22[v4]))();
}

uint64_t sub_1CCB1A20C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1CCB1A214(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1CCB1A21CLL);
  return result;
}

uint64_t sub_1CCB1A228(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1CCB1A230);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCB1A234(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1CCB1A23C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMFSatelliteLocationNotificationEvent()
{
  return &type metadata for FMFSatelliteLocationNotificationEvent;
}

_QWORD *initializeBufferWithCopyOfBuffer for FMFSatelliteLocationUpdateEvent(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FMFSatelliteLocationUpdateEvent(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[8])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FMFSatelliteLocationUpdateEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMFSatelliteLocationUpdateEvent()
{
  return &type metadata for FMFSatelliteLocationUpdateEvent;
}

uint64_t sub_1CCB1A2F8()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB1A308()
{
  uint64_t v0;

  return sub_1CCB198C4(*(unsigned __int16 *)(v0 + 16));
}

void sub_1CCB1A310(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7[3];
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_1CCB631E4();
  v8 = (void *)v2;
  v9 = sub_1CC9CAA38(&qword_1ED8A8B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
  v3 = sub_1CCA01CC0(v7);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, *MEMORY[0x1E0D21248], v2);
  LOBYTE(v2) = MEMORY[0x1D17B0748](v7);
  sub_1CCA01CA0((uint64_t)v7);
  if ((v2 & 1) != 0)
  {
    v4 = (void *)sub_1CCB63964();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v9 = (uint64_t)sub_1CCA3C490;
    v10 = v5;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 1107296256;
    v7[2] = (uint64_t)sub_1CCA7EAC8;
    v8 = &unk_1E88FE368;
    v6 = _Block_copy(v7);
    swift_bridgeObjectRetain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v6);

  }
}

void sub_1CCB1A450(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7[3];
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_1CCB631E4();
  v8 = (void *)v2;
  v9 = sub_1CC9CAA38(&qword_1ED8A8B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
  v3 = sub_1CCA01CC0(v7);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, *MEMORY[0x1E0D21248], v2);
  LOBYTE(v2) = MEMORY[0x1D17B0748](v7);
  sub_1CCA01CA0((uint64_t)v7);
  if ((v2 & 1) != 0)
  {
    v4 = (void *)sub_1CCB63964();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v9 = (uint64_t)sub_1CCA3E1C0;
    v10 = v5;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 1107296256;
    v7[2] = (uint64_t)sub_1CCA7EAC8;
    v8 = &unk_1E88FE2C8;
    v6 = _Block_copy(v7);
    swift_bridgeObjectRetain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v6);

  }
}

uint64_t sub_1CCB1A590()
{
  return swift_deallocObject();
}

void sub_1CCB1A5A0()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = 0x10000000000;
  if (!v0[21])
    v1 = 0;
  v2 = 0x100000000;
  if (!v0[20])
    v2 = 0;
  v3 = 0x10000;
  if (!v0[18])
    v3 = 0;
  v4 = 256;
  if (!v0[17])
    v4 = 0;
  sub_1CCB19378(v3 | v4 | v2 | ((unint64_t)v0[19] << 24) | v1 | ((unint64_t)v0[22] << 48) | ((unint64_t)v0[23] << 56) | v0[16]);
}

uint64_t sub_1CCB1A614()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

_QWORD *sub_1CCB1A650(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  unint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)(type metadata accessor for FMIPItem() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 72);
  swift_bridgeObjectRetain();
  v6 = (uint64_t *)(v4 + a1 + 400);
  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v9 = (void *)*(v6 - 1);
    if (v9)
    {
      v10 = *v6;
      v11 = *(v6 - 2);
      v12 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = sub_1CCAC9858(0, v7[2] + 1, 1, v7);
      v14 = v7[2];
      v13 = v7[3];
      if (v14 >= v13 >> 1)
        v7 = sub_1CCAC9858((_QWORD *)(v13 > 1), v14 + 1, 1, v7);
      v7[2] = v14 + 1;
      v8 = &v7[3 * v14];
      *((_BYTE *)v8 + 32) = v11 & 1;
      *((_BYTE *)v8 + 33) = BYTE1(v11) & 1;
      *((_BYTE *)v8 + 34) = BYTE2(v11) & 1;
      *((_BYTE *)v8 + 35) = BYTE3(v11);
      v8[5] = v12;
      v8[6] = v10;
    }
    v6 = (uint64_t *)((char *)v6 + v5);
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1CCB1A7B4(char a1, char a2)
{
  char v2;

  if (qword_1CCB73248[a1] == qword_1CCB73248[a2])
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_1CCB1A818(uint64_t a1, uint64_t a2)
{
  return sub_1CCB1DB10(a1, a2, FMIPLocationType.rawValue.getter);
}

void sub_1CCB1A824(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1A86C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1A940 + 4 * byte_1CCB72157[a2]))(0x6567617373656DLL);
}

uint64_t sub_1CCB1A940(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6567617373656DLL && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CCB1AA6C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1AAAC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1ABC0 + 4 * byte_1CCB72168[a2]))(0x7055746553746F6ELL);
}

uint64_t sub_1CCB1ABC0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7055746553746F6ELL && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CCB1AD08(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6574737572547369;
  else
    v3 = 0x65447473614C7369;
  if (v2)
    v4 = 0xEC00000065636976;
  else
    v4 = 0xEF65636976654464;
  if ((a2 & 1) != 0)
    v5 = 0x6574737572547369;
  else
    v5 = 0x65447473614C7369;
  if ((a2 & 1) != 0)
    v6 = 0xEF65636976654464;
  else
    v6 = 0xEC00000065636976;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1CCB1ADC0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1AE08(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1AE9C + 4 * byte_1CCB72178[a2]))(0xD00000000000001BLL);
}

uint64_t sub_1CCB1AE9C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD00000000000001BLL && v1 == 0x80000001CCB77DA0)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CCB1AF78(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1AFD4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1B054 + 4 * byte_1CCB72184[a2]))(0x656E6F685069);
}

uint64_t sub_1CCB1B054(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656E6F685069 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CCB1B128(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6163696669746F6ELL;
  else
    v3 = 0x636E75614C707061;
  if (v2)
    v4 = 0xE900000000000068;
  else
    v4 = 0xEF7061546E6F6974;
  if ((a2 & 1) != 0)
    v5 = 0x6163696669746F6ELL;
  else
    v5 = 0x636E75614C707061;
  if ((a2 & 1) != 0)
    v6 = 0xEF7061546E6F6974;
  else
    v6 = 0xE900000000000068;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CCB1B1DC(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6F4C657461647075;
  else
    v3 = 0xD00000000000001ALL;
  if (v2)
    v4 = 0x80000001CCB77F80;
  else
    v4 = 0xEE006E6F69746163;
  if ((a2 & 1) != 0)
    v5 = 0x6F4C657461647075;
  else
    v5 = 0xD00000000000001ALL;
  if ((a2 & 1) != 0)
    v6 = 0xEE006E6F69746163;
  else
    v6 = 0x80000001CCB77F80;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CCB1B290(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x656B6F5468747561;
  else
    v3 = 0x7263734570696D66;
  if (v2)
    v4 = 0xEE0044495555776FLL;
  else
    v4 = 0xE90000000000006ELL;
  if ((a2 & 1) != 0)
    v5 = 0x656B6F5468747561;
  else
    v5 = 0x7263734570696D66;
  if ((a2 & 1) != 0)
    v6 = 0xE90000000000006ELL;
  else
    v6 = 0xEE0044495555776FLL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1CCB1B344(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1B38C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1B41C + 4 * byte_1CCB72190[a2]))(0x72456C65636E6163);
}

uint64_t sub_1CCB1B41C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x72456C65636E6163 && v1 == 0xEB00000000657361)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CCB1B4FC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1162760004;
  else
    v3 = 0x474E4944414F4CLL;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1162760004;
  else
    v5 = 0x474E4944414F4CLL;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CCB1B598(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x786F626F666E69;
  else
    v3 = 0x696C656372756F73;
  if (v2)
    v4 = 0xEA00000000007473;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x786F626F666E69;
  else
    v5 = 0x696C656372756F73;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xEA00000000007473;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CCB1B640(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6F4D6E4F70656562;
  else
    v3 = 0x647261646E617473;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEA00000000006576;
  if ((a2 & 1) != 0)
    v5 = 0x6F4D6E4F70656562;
  else
    v5 = 0x647261646E617473;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000006576;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1CCB1B6E8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1B74C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1B82C + 4 * byte_1CCB721B1[a2]))(0x72624E72656E776FLL);
}

uint64_t sub_1CCB1B82C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x72624E72656E776FLL && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CCB1B978(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1B9D4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1BA4C + 4 * byte_1CCB721BE[a2]))(0xD000000000000010);
}

uint64_t sub_1CCB1BA4C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000010 && v1 == 0x80000001CCB775D0)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CCB1BB0C(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEE00444F456C6974;
  v3 = 0x6E5565726F6E6769;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x6F4665726F6E6769;
    else
      v5 = 0x68536465736F6C63;
    if (v4 == 1)
      v6 = 0xED00007265766572;
    else
      v6 = 0xEB00000000746565;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6E5565726F6E6769;
  v6 = 0xEE00444F456C6974;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x6F4665726F6E6769;
    else
      v3 = 0x68536465736F6C63;
    if (v7 == 1)
      v2 = 0xED00007265766572;
    else
      v2 = 0xEB00000000746565;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1CCB1BC5C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1BCA4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1BCF0 + 4 * byte_1CCB721C6[a2]))(0x646572616873);
}

uint64_t sub_1CCB1BCF0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x646572616873 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CCB1BD80(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1BDE4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1BE44 + 4 * byte_1CCB721CE[a2]))(0x6567617373656DLL);
}

uint64_t sub_1CCB1BE44(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6567617373656DLL && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CCB1BEEC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1BF34(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1BFA4 + 4 * byte_1CCB721D7[a2]))(0x73646F50726961);
}

uint64_t sub_1CCB1BFA4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x73646F50726961 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CCB1C05C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 29813;
  else
    v3 = 0x72656E776FLL;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE200000000000000;
  if ((a2 & 1) != 0)
    v5 = 29813;
  else
    v5 = 0x72656E776FLL;
  if ((a2 & 1) != 0)
    v6 = 0xE200000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1CCB1C0F0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1C14C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1C20C + 4 * byte_1CCB721E2[a2]))(0x6F69746365726964);
}

uint64_t sub_1CCB1C20C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6F69746365726964 && v1 == 0xEA0000000000736ELL)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CCB1C320(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x73646F50726961;
    else
      v3 = 0x726F737365636361;
    if (v2 == 1)
      v4 = 0xE700000000000000;
    else
      v4 = 0xE900000000000079;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x73646F50726961;
      else
        v6 = 0x726F737365636361;
      if (v5 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xE900000000000079;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x676154726961;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x676154726961)
  {
LABEL_21:
    v8 = sub_1CCB642A0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1CCB1C438(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6E6F697461636F6CLL;
    else
      v3 = 0x6D617473656D6974;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xE900000000000070;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6E6F697461636F6CLL;
      else
        v6 = 0x6D617473656D6974;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xE900000000000070;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x73736572646461;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x73736572646461)
  {
LABEL_21:
    v8 = sub_1CCB642A0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1CCB1C558(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1C5BC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1C694 + 4 * byte_1CCB721F8[a2]))(0x5379726574746162);
}

uint64_t sub_1CCB1C694(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x5379726574746162 && v1 == 0xED00007375746174)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CCB1C7E4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6956776F646E6977;
  else
    v3 = 0x736F4D746E6F7266;
  if (v2)
    v4 = 0xEF776F646E695774;
  else
    v4 = 0xED0000656C626973;
  if ((a2 & 1) != 0)
    v5 = 0x6956776F646E6977;
  else
    v5 = 0x736F4D746E6F7266;
  if ((a2 & 1) != 0)
    v6 = 0xED0000656C626973;
  else
    v6 = 0xEF776F646E695774;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1CCB1C8A0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1C90C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1C9B8 + 4 * byte_1CCB72206[a2]))(0x6F43737574617473);
}

uint64_t sub_1CCB1C9B8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6F43737574617473 && v1 == 0xEA00000000006564)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CCB1CAB8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1CAF8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1CB5C + 4 * byte_1CCB72211[a2]))(0x7468676972);
}

uint64_t sub_1CCB1CB5C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7468676972 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CCB1CC08(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  if (a1)
  {
    if (a1 == 1)
      v2 = 0x6465696E6564;
    else
      v2 = 0x776F4E746F6ELL;
    v3 = 0xE600000000000000;
    v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1)
        v5 = 0x6465696E6564;
      else
        v5 = 0x776F4E746F6ELL;
      v6 = 0xE600000000000000;
      if (v2 != v5)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v3 = 0xE700000000000000;
    v2 = 0x6465746E617267;
    v4 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE700000000000000;
  if (v2 != 0x6465746E617267)
  {
LABEL_15:
    v7 = sub_1CCB642A0();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6)
    goto LABEL_15;
  v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CCB1CD10(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x796C696D6166;
  else
    v3 = 1919251317;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x796C696D6166;
  else
    v5 = 1919251317;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CCB1CDA8(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000010;
  else
    v3 = 0x72656E776FLL;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0x80000001CCB77860;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000010;
  else
    v5 = 0x72656E776FLL;
  if ((a2 & 1) != 0)
    v6 = 0x80000001CCB77860;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1CCB1CE4C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1CEA8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1CF00 + 4 * byte_1CCB7221A[a2]))(0x6E756F536574754DLL);
}

uint64_t sub_1CCB1CF00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x6E756F536574754DLL && v2 == v1)
    v3 = 1;
  else
    v3 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1CCB1CF98(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1701667182;
  else
    v3 = 0x696669746E656469;
  if (v2)
    v4 = 0xEA00000000007265;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1701667182;
  else
    v5 = 0x696669746E656469;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xEA00000000007265;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1CCB1D038(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1D078(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1D104 + 4 * byte_1CCB72223[a2]))(0x72624E72656E776FLL);
}

uint64_t sub_1CCB1D104(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x72624E72656E776FLL && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CCB1D1D8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x64656C6261736964;
  else
    v3 = 0x64656C62616E65;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x64656C6261736964;
  else
    v5 = 0x64656C62616E65;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1CCB1D27C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1D2CC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1D360 + 4 * byte_1CCB7222E[a2]))(0x696669746E656469);
}

uint64_t sub_1CCB1D360(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x696669746E656469 && v1 == 0xEA00000000007265)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CCB1D444(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6F43737574617473;
  else
    v3 = 0x6954657461657263;
  if (v2)
    v4 = 0xEF706D617473656DLL;
  else
    v4 = 0xEA00000000006564;
  if ((a2 & 1) != 0)
    v5 = 0x6F43737574617473;
  else
    v5 = 0x6954657461657263;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000006564;
  else
    v6 = 0xEF706D617473656DLL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1CCB1D4F8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1D540(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1D5CC + 4 * byte_1CCB72239[a2]))(0x6F43726576726573);
}

uint64_t sub_1CCB1D5CC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6F43726576726573 && v1 == 0xED0000747865746ELL)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CCB1D6A0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1D6E0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1D744 + 4 * byte_1CCB72242[a2]))(0x676E6979616C70);
}

uint64_t sub_1CCB1D744(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x676E6979616C70 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CCB1D7EC(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000012;
  else
    v3 = 1701869940;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0x80000001CCB77500;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000012;
  else
    v5 = 1701869940;
  if ((a2 & 1) != 0)
    v6 = 0x80000001CCB77500;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1CCB1D88C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1937073530;
    else
      v3 = 0x6579656B776168;
    if (v2 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0xE700000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 1937073530;
      else
        v6 = 0x6579656B776168;
      if (v5 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE700000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 959984482;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 959984482)
  {
LABEL_21:
    v8 = sub_1CCB642A0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1CCB1D984(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1CCB1D9D4(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1DA4C + 4 * byte_1CCB7224A[a2]))(v2 + 4);
}

uint64_t sub_1CCB1DA4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == v1 + 4 && v2 == 0x80000001CCB77ED0)
    v3 = 1;
  else
    v3 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1CCB1DB04(uint64_t a1, uint64_t a2)
{
  return sub_1CCB1DB10(a1, a2, FMIPURLAction.rawValue.getter);
}

uint64_t sub_1CCB1DB10(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = a3();
  v6 = v5;
  if (v4 == a3() && v6 == v7)
    v9 = 1;
  else
    v9 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

void sub_1CCB1DBA8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1DBF0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1DC88 + 4 * byte_1CCB72253[a2]))(0xD000000000000015);
}

uint64_t sub_1CCB1DC88(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000015 && v1 == 0x80000001CCB78510)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1CCB1DD68(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB1DDC4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1DE34 + 4 * byte_1CCB7225D[a2]))(1702060387);
}

uint64_t sub_1CCB1DE34(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1702060387 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1CCB1DEF0(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEA00000000007265;
  v3 = 0x696669746E656469;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x696A6F6D65;
    else
      v5 = 1701667182;
    if (v4 == 1)
      v6 = 0xE500000000000000;
    else
      v6 = 0xE400000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x696669746E656469;
  v6 = 0xEA00000000007265;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x696A6F6D65;
    else
      v3 = 1701667182;
    if (v7 == 1)
      v2 = 0xE500000000000000;
    else
      v2 = 0xE400000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1CCB1DFF0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1CCB1E03C(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1CCB1E12C + 4 * byte_1CCB7226B[a2]))(a3 + 1);
}

uint64_t sub_1CCB1E12C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 + 1 && v3 == 0x80000001CCB78390)
    v4 = 1;
  else
    v4 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1CCB1E288@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (int *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1CCB1E2E0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

BOOL sub_1CCB1E334(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

uint64_t FMIPDevice.shouldDisplaySeparatedLocation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  v1 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FMIPDevice();
  sub_1CC9EAB74(v0 + *(int *)(v4 + 128), (uint64_t)v3, &qword_1ED8A8C30);
  v5 = type metadata accessor for FMIPItemGroup();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1CC9C3E84((uint64_t)v3, &qword_1ED8A8C30);
    v6 = 0;
  }
  else
  {
    v6 = FMIPItemGroup.shouldDisplaySeparatedLocation.getter();
    sub_1CCA0BF30((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  }
  return v6 & 1;
}

BOOL FMIPDevice.isLocalFindable.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for FMIPDevice() + 136)) == 5;
}

uint64_t FMIPDevice.removePairingLockLocally.getter()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + *(int *)(type metadata accessor for FMIPDevice() + 148)) & 1;
}

uint64_t sub_1CCB1E468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  double v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  double v12;
  id v13;
  id v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    sub_1CCA5AA94();
    v3 = *(unsigned __int8 *)(a1 + 32);
    v4 = *(unsigned __int8 *)(a1 + 33);
    v5 = *(unsigned __int8 *)(a1 + 34);
    v6 = *(unsigned __int8 *)(a1 + 35);
    v7 = *(double *)(a1 + 48);
    v8 = *(unsigned __int8 *)(a2 + 32);
    v9 = *(unsigned __int8 *)(a2 + 33);
    v10 = *(unsigned __int8 *)(a2 + 34);
    v11 = *(void **)(a2 + 40);
    v12 = *(double *)(a2 + 48);
    v13 = *(id *)(a1 + 40);
    v14 = v11;
    if ((sub_1CCB63DF0() & 1) != 0
      && v7 == v12
      && ((v3 ^ v8) & 1) == 0
      && ((v4 ^ v9) & 1) == 0
      && ((v5 ^ v10) & 1) == 0)
    {
      __asm { BR              X8 }
    }

  }
  return 0;
}

uint64_t sub_1CCB1EA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    sub_1CCA5AA94();
    v5 = *(unsigned __int8 *)(a1 + 32);
    v6 = *(void **)(a1 + 40);
    v7 = *(void **)(a2 + 40);
    v8 = v6;
    v9 = v7;
    if ((sub_1CCB63DF0() & 1) != 0)
      __asm { BR              X8 }

  }
  return 0;
}

uint64_t FMIPDevice.init(device:historicalLocations:address:crowdSourcedLocation:location:shiftedLocation:crowdSourcedLocating:itemGroup:deviceWithYou:findingCapable:beaconType:deviceConnectedState:lostModeMetadata:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X4>, unsigned int (*a6)(char *, uint64_t, uint64_t)@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, char a11, unsigned __int8 *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  int *v95;
  int *v96;
  int v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  int *v109;
  uint64_t ObjCClassFromMetadata;
  id v111;
  unsigned __int8 *v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int (*v129)(uint64_t, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  int *v140;
  unint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  id v152;
  id v153;
  uint64_t v154;
  int *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  double *v159;
  char *v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int (*v165)(uint64_t, uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  char *v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  int *v179;
  uint64_t (*v180)(uint64_t, uint64_t, uint64_t);
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  os_log_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int *v197;
  id v198;
  char *v199;
  int *v200;
  uint64_t v201;
  id v202;
  char *v203;
  NSObject *v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int (*v230)(uint64_t, uint64_t, uint64_t);
  void *v231;
  _WORD *v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  id v236;
  uint64_t v237;
  unint64_t v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  double v248;
  int *v249;
  uint64_t v250;
  uint64_t v251;
  unsigned __int8 *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  double v256;
  _QWORD *v257;
  int64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unsigned __int8 *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  os_log_t v277;
  id v278;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  __int128 v290;
  __int128 v291;
  uint64_t v292;
  _QWORD *v293;
  _QWORD *v294;
  uint64_t v295;
  int *v296;
  char *v297;
  uint64_t v298;
  char *v299;
  id v300;
  char *v301;
  char *v302;
  uint64_t v303;
  id v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  os_log_t v309;
  double v310;
  char *v311;
  char *v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  unsigned __int8 *v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  char *v328;
  int *v329;
  unsigned int (*v330)(char *, uint64_t, uint64_t);
  char *v331;
  uint64_t v332;
  int *v333;
  unsigned __int8 v334;
  uint64_t v335[3];
  uint64_t v336[3];
  double v337;
  int *v338;
  uint64_t v339;
  _BYTE v340[288];
  _BYTE v341[288];
  _BYTE v342[296];

  v324 = a8;
  LODWORD(v300) = a7;
  v330 = (unsigned int (*)(char *, uint64_t, uint64_t))a6;
  v331 = a3;
  v326 = a5;
  v327 = a1;
  v304 = a2;
  v321 = a12;
  v16 = type metadata accessor for FMIPItem();
  v282 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v332 = (uint64_t)&v280 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v18);
  v287 = (uint64_t)&v280 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1CCA14E90(&qword_1EF9E21F8);
  v21 = MEMORY[0x1E0C80A78](v20);
  v312 = (char *)&v280 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v306 = (char *)&v280 - v23;
  v24 = sub_1CCA14E90(&qword_1ED8A7AA0);
  MEMORY[0x1E0C80A78](v24);
  v316 = (uint64_t)&v280 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1CCA14E90(&qword_1ED8A8CD0);
  MEMORY[0x1E0C80A78](v26);
  v283 = (uint64_t)&v280 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1CCA14E90(&qword_1ED8A7130);
  v29 = MEMORY[0x1E0C80A78](v28);
  v317 = (uint64_t)&v280 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v299 = (char *)&v280 - v31;
  v32 = type metadata accessor for FMIPItemGroup();
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v295 = (uint64_t)&v280 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v333 = (int *)type metadata accessor for FMIPDevice();
  v35 = MEMORY[0x1E0C80A78](v333);
  v314 = (uint64_t)&v280 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x1E0C80A78](v35);
  v311 = (char *)&v280 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  *(_QWORD *)&v310 = (char *)&v280 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v308 = (uint64_t)&v280 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v307 = (uint64_t)&v280 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v305 = (uint64_t)&v280 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v303 = (uint64_t)&v280 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v302 = (char *)&v280 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v301 = (char *)&v280 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v322 = (uint64_t)&v280 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v294 = (uint64_t *)((char *)&v280 - v56);
  v57 = MEMORY[0x1E0C80A78](v55);
  v59 = (uint64_t *)((char *)&v280 - v58);
  MEMORY[0x1E0C80A78](v57);
  v61 = (char *)&v280 - v60;
  v62 = sub_1CCA14E90(&qword_1ED8A8C30);
  v63 = MEMORY[0x1E0C80A78](v62);
  v289 = (uint64_t)&v280 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = MEMORY[0x1E0C80A78](v63);
  v288 = (uint64_t)&v280 - v66;
  v67 = MEMORY[0x1E0C80A78](v65);
  v313 = (char *)&v280 - v68;
  v69 = MEMORY[0x1E0C80A78](v67);
  v315 = (uint64_t)&v280 - v70;
  v71 = MEMORY[0x1E0C80A78](v69);
  v309 = (os_log_t)((char *)&v280 - v72);
  v73 = MEMORY[0x1E0C80A78](v71);
  v285 = (uint64_t)&v280 - v74;
  v75 = MEMORY[0x1E0C80A78](v73);
  v298 = (uint64_t)&v280 - v76;
  v77 = MEMORY[0x1E0C80A78](v75);
  v284 = (uint64_t)&v280 - v78;
  v79 = MEMORY[0x1E0C80A78](v77);
  v297 = (char *)&v280 - v80;
  v81 = MEMORY[0x1E0C80A78](v79);
  v83 = (char *)&v280 - v82;
  MEMORY[0x1E0C80A78](v81);
  v85 = (char *)&v280 - v84;
  sub_1CC9C3EC0((uint64_t)v331, (uint64_t)v342, &qword_1ED8A71C0);
  v86 = *a4;
  v331 = (char *)a4[1];
  v319 = a4[2];
  v320 = v86;
  v87 = v327;
  v88 = (_QWORD *)*v326;
  v89 = v326[2];
  v329 = (int *)v326[1];
  v292 = v89;
  v293 = v88;
  v90 = *(_QWORD **)v330;
  v296 = (int *)*((_QWORD *)v330 + 1);
  v325 = *((_QWORD *)v330 + 2);
  v326 = v90;
  v318 = *v321;
  sub_1CC9EAB74(v324, (uint64_t)v83, &qword_1ED8A8C30);
  sub_1CCA0BEEC(v87, (uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v330 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v330(v83, 1, v32) == 1)
  {
    sub_1CC9EAB74((uint64_t)&v61[v333[32]], (uint64_t)v85, &qword_1ED8A8C30);
    sub_1CCA0BF30((uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CC9C3E84((uint64_t)v83, &qword_1ED8A8C30);
  }
  else
  {
    sub_1CCA0BF30((uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CC9FED60((uint64_t)v83, (uint64_t)v85, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v85, 0, 1, v32);
  }
  v91 = v32;
  sub_1CCA0BEEC(v87, (uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if (!v331)
  {
    v92 = v59[35];
    v93 = (char *)v59[36];
    v319 = v59[37];
    v320 = v92;
    v331 = v93;
    v94 = v93;
  }
  sub_1CCA0BF30((uint64_t)v59, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v95 = v329;
  if (v329)
  {
    v96 = v329;

    if (qword_1EF9DEF98 != -1)
      swift_once();
    v97 = byte_1EF9E27F1;

    v98 = (uint64_t)v297;
    if (v97 != 1)
    {
      v325 = v292;
      v326 = v293;
      goto LABEL_17;
    }

LABEL_15:
    v325 = 0;
    v326 = 0;
    v95 = 0;
LABEL_17:
    v100 = v327;
    goto LABEL_18;
  }
  v95 = v296;
  if (qword_1EF9DEF98 != -1)
    swift_once();
  v98 = (uint64_t)v297;
  v99 = v294;
  if (byte_1EF9E27F1 == 1)
  {

    goto LABEL_15;
  }
  v100 = v327;
  sub_1CCA0BEEC(v327, (uint64_t)v294, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if (!v95)
  {
    v108 = (_QWORD *)v99[32];
    v95 = (int *)v99[33];
    v325 = v99[34];
    v326 = v108;
    v109 = v95;
  }
  sub_1CCA0BF30((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_18:
  v102 = *(_QWORD *)(v100 + 64);
  v101 = *(_QWORD *)(v100 + 72);
  v103 = HIBYTE(v101) & 0xF;
  if ((v101 & 0x2000000000000000) == 0)
    v103 = v102 & 0xFFFFFFFFFFFFLL;
  if (v103)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v102 = 0;
    v101 = 0;
  }
  sub_1CC9EAB74((uint64_t)v85, v98, &qword_1ED8A8C30);
  v104 = v330((char *)v98, 1, v91);
  v328 = v85;
  v329 = v95;
  if (v104 == 1)
  {
    if (v101)
      goto LABEL_35;
  }
  else
  {
    v105 = v295;
    sub_1CC9FED60(v98, v295, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v102 = *(_QWORD *)(v105 + 24);
    v106 = *(_QWORD *)(v105 + 32);
    swift_bridgeObjectRetain();
    sub_1CCA0BF30(v105, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v107 = HIBYTE(v106) & 0xF;
    if ((v106 & 0x2000000000000000) == 0)
      v107 = v102 & 0xFFFFFFFFFFFFLL;
    if (v107)
    {
      swift_bridgeObjectRelease();
      v101 = v106;
      goto LABEL_35;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for FMLocalize();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v111 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v102 = sub_1CCB63340();
  v101 = (unint64_t)v112;

  swift_bridgeObjectRelease_n();
LABEL_35:
  v321 = (unsigned __int8 *)v101;
  v323 = v91;
  v113 = *(_QWORD *)(v100 + 8);
  *(_QWORD *)a9 = *(_QWORD *)v100;
  *(_QWORD *)(a9 + 8) = v113;
  v294 = (_QWORD *)v113;
  *(_QWORD *)(a9 + 16) = *(_QWORD *)(v100 + 16);
  v291 = *(_OWORD *)(v100 + 24);
  *(_OWORD *)(a9 + 24) = v291;
  v114 = *(_QWORD *)(v100 + 48);
  v115 = *(int **)(v100 + 56);
  v295 = *(_QWORD *)(v100 + 40);
  v296 = v115;
  *(_QWORD *)(a9 + 40) = v295;
  *(_QWORD *)(a9 + 48) = v114;
  *(_QWORD *)(a9 + 56) = v115;
  *(_QWORD *)(a9 + 64) = v102;
  v286 = v102;
  *(_QWORD *)(a9 + 72) = v101;
  *(_BYTE *)(a9 + 80) = *(_BYTE *)(v100 + 80);
  *(_QWORD *)(a9 + 88) = *(_QWORD *)(v100 + 88);
  v290 = *(_OWORD *)(v100 + 96);
  *(_OWORD *)(a9 + 96) = v290;
  v116 = *(_QWORD *)(v100 + 120);
  *(_QWORD *)(a9 + 112) = *(_QWORD *)(v100 + 112);
  *(_QWORD *)(a9 + 120) = v116;
  v117 = *(_QWORD *)(v100 + 176);
  *(_QWORD *)(a9 + 168) = *(_QWORD *)(v100 + 168);
  *(_QWORD *)(a9 + 176) = v117;
  v118 = *(_QWORD *)(v100 + 136);
  *(_QWORD *)(a9 + 128) = *(_QWORD *)(v100 + 128);
  *(_QWORD *)(a9 + 136) = v118;
  v119 = *(_QWORD *)(v100 + 152);
  v120 = *(_QWORD **)(v100 + 160);
  v292 = *(_QWORD *)(v100 + 144);
  v293 = v120;
  *(_QWORD *)(a9 + 144) = v292;
  *(_QWORD *)(a9 + 152) = v119;
  *(_QWORD *)(a9 + 160) = v120;
  *(_QWORD *)(a9 + 184) = *(_QWORD *)(v100 + 184);
  *(_BYTE *)(a9 + 192) = *(_BYTE *)(v100 + 192);
  *(_OWORD *)(a9 + 200) = *(_OWORD *)(v100 + 200);
  v121 = v333;
  v122 = v100 + v333[38];
  LODWORD(v297) = a10;
  v123 = v317;
  sub_1CC9EAB74(v122, v317, &qword_1ED8A7130);
  sub_1CCA0BEEC(v100, v322, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v124 = sub_1CCB635B0();
  v125 = *(_QWORD *)(v124 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v123, 1, v124) == 1)
  {
    v280 = v125;
    v281 = v124;
    v126 = v322;
    v127 = v284;
    sub_1CC9EAB74(v322 + v121[32], v284, &qword_1ED8A8C30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CCA0BF30(v126, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v128 = v323;
    v129 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v330;
    if (v330((char *)v127, 1, v323) == 1)
    {
      sub_1CC9C3E84(v127, &qword_1ED8A8C30);
      v130 = 1;
      v132 = v316;
      v131 = v317;
      v133 = (uint64_t)v306;
      v134 = (uint64_t)v299;
    }
    else
    {
      v135 = v283;
      sub_1CC9EAB74(v127 + *(int *)(v128 + 48), v283, &qword_1ED8A8CD0);
      sub_1CCA0BF30(v127, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      v136 = type metadata accessor for FMIPItemLostModeMetadata();
      v137 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 48))(v135, 1, v136);
      v132 = v316;
      v131 = v317;
      v133 = (uint64_t)v306;
      if (v137 == 1)
      {
        sub_1CC9C3E84(v135, &qword_1ED8A8CD0);
        v130 = 1;
        v134 = (uint64_t)v299;
      }
      else
      {
        v138 = v135 + *(int *)(v136 + 24);
        v134 = (uint64_t)v299;
        (*(void (**)(char *, uint64_t, uint64_t))(v280 + 16))(v299, v138, v281);
        sub_1CCA0BF30(v135, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemLostModeMetadata);
        v130 = 0;
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v280 + 56))(v134, v130, 1, v281);
    sub_1CC9C3E84(v131, &qword_1ED8A7130);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1CCA0BF30(v322, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v134 = (uint64_t)v299;
    (*(void (**)(char *, uint64_t, uint64_t))(v125 + 32))(v299, v123, v124);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v125 + 56))(v134, 0, 1, v124);
    v132 = v316;
    v129 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v330;
    v133 = (uint64_t)v306;
  }
  v317 = a14;
  v139 = v300;
  v140 = v333;
  sub_1CC9C3EC0(v134, a9 + v333[38], &qword_1ED8A7130);
  sub_1CC9EAB74(v100 + v140[39], a9 + v140[39], &qword_1ED8A7130);
  sub_1CC9EAB74(v100 + v140[40], a9 + v140[40], &qword_1ED8A7130);
  sub_1CC9EAB74(v100 + v140[41], a9 + v140[41], &qword_1ED8A7130);
  *(_BYTE *)(a9 + v140[42]) = *(_BYTE *)(v100 + v140[42]);
  *(_BYTE *)(a9 + v140[43]) = *(_BYTE *)(v100 + v140[43]);
  *(_BYTE *)(a9 + v140[44]) = *(_BYTE *)(v100 + v140[44]);
  *(_QWORD *)(a9 + v140[37]) = *(_QWORD *)(v100 + v140[37]);
  v141 = *(_QWORD *)(v100 + 216);
  v142 = v301;
  if ((_DWORD)v297 != 2)
  {
    if ((v297 & 1) != 0)
    {
      v141 |= 0x8000uLL;
      if (v139 == 2)
        goto LABEL_47;
      goto LABEL_49;
    }
    v141 &= ~0x8000uLL;
  }
  if (v139 == 2)
  {
LABEL_47:
    v143 = v141;
    goto LABEL_52;
  }
LABEL_49:
  if ((v139 & 1) != 0)
    v143 = v141 | 0x800;
  else
    v143 = v141 & 0xFFFFFFFFFFFFF7FFLL;
LABEL_52:
  sub_1CC9EAB74(v100 + v333[29], v132, &qword_1ED8A7AA0);
  v144 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v145 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v144 - 8) + 48))(v317, 1, v144);
  v146 = (uint64_t)v328;
  if (v145 != 1)
  {
    sub_1CC9C3E84(v132, &qword_1ED8A7AA0);
    sub_1CC9EAB74(v317, v132, &qword_1ED8A7AA0);
  }
  sub_1CC9EAB74(v132, a9 + v333[29], &qword_1ED8A7AA0);
  v147 = v146;
  v148 = v298;
  sub_1CC9EAB74(v147, v298, &qword_1ED8A8C30);
  if (v129(v148, 1, v323) == 1)
  {
    sub_1CC9C3E84(v148, &qword_1ED8A8C30);
  }
  else
  {
    v149 = *(_QWORD *)(v148 + 64);
    sub_1CCA0BF30(v148, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    v150 = (v149 & 0x100) == 0;
    v100 = v327;
    v151 = (v143 >> 6) & 1;
    if (v150)
      LODWORD(v151) = 1;
    if (!(_DWORD)v151)
      v143 |= 0x40uLL;
  }
  v152 = v329;
  v153 = v304;
  *(_QWORD *)(a9 + 216) = v143;
  v154 = *(_QWORD *)(v100 + 240);
  v155 = v333;
  if (a11 != 2)
  {
    if ((a11 & 1) != 0)
      v154 |= 0x10000000uLL;
    else
      v154 &= ~0x10000000uLL;
  }
  v306 = (char *)v143;
  *(_QWORD *)(a9 + 232) = *(_QWORD *)(v100 + 232);
  *(_QWORD *)(a9 + 240) = v154;
  sub_1CCA0BEEC(v100, (uint64_t)v142, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if (!v153)
  {
    v153 = (id)v142[31];
    swift_bridgeObjectRetain();
  }
  v322 = a13;
  swift_bridgeObjectRetain();
  sub_1CCA0BF30((uint64_t)v142, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v156 = v326;
  *(_QWORD *)(a9 + 248) = v153;
  *(_QWORD *)(a9 + 256) = v156;
  v157 = v325;
  *(_QWORD *)(a9 + 264) = v152;
  *(_QWORD *)(a9 + 272) = v157;
  v158 = (uint64_t)v302;
  sub_1CCA0BEEC(v100, (uint64_t)v302, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CC9C3EC0((uint64_t)v342, (uint64_t)v341, &qword_1ED8A71C0);
  if (sub_1CCA33738((uint64_t)v341) == 1)
  {
    sub_1CC9C3EC0(v158 + 304, (uint64_t)&v337, &qword_1ED8A71C0);
    sub_1CCA307F0((uint64_t)&v337, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
    v159 = &v337;
  }
  else
  {
    v159 = (double *)v342;
  }
  sub_1CC9C3EC0((uint64_t)v159, (uint64_t)v340, &qword_1ED8A71C0);
  v304 = v152;
  sub_1CCA0BF30(v158, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CC9C3EC0((uint64_t)v340, a9 + 304, &qword_1ED8A71C0);
  sub_1CC9EAB74(v100 + v155[28], a9 + v155[28], &qword_1ED8A7460);
  sub_1CC9EAB74(v100 + v155[30], a9 + v155[30], &qword_1ED8A73B8);
  sub_1CC9EAB74(v100 + v155[31], a9 + v155[31], &qword_1ED8A73F8);
  v160 = v331;
  *(_QWORD *)(a9 + 280) = v320;
  *(_QWORD *)(a9 + 288) = v160;
  *(_QWORD *)(a9 + 296) = v319;
  *(_QWORD *)(a9 + 224) = *(_QWORD *)(v100 + 224);
  v301 = (char *)(a9 + v155[32]);
  sub_1CC9EAB74((uint64_t)v328, (uint64_t)v301, &qword_1ED8A8C30);
  v161 = v303;
  sub_1CCA0BEEC(v100, v303, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v162 = v318;
  if (v318 == 7)
    v162 = *(unsigned __int8 *)(v161 + v155[34]);
  v302 = v331;
  swift_bridgeObjectRetain();
  sub_1CCA0BF30(v161, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v163 = v155[34];
  v318 = v162;
  *(_BYTE *)(a9 + v163) = v162;
  sub_1CC9EAB74(v322, v133, &qword_1EF9E21F8);
  v164 = type metadata accessor for FMIPDeviceConnectedState(0);
  v165 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 48);
  if (v165(v133, 1, v164) == 1)
  {
    sub_1CC9C3E84(v133, &qword_1EF9E21F8);
    v166 = v305;
    sub_1CCA0BEEC(v100, v305, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v167 = (uint64_t)v312;
  }
  else
  {
    v168 = *(unsigned __int8 *)(v133 + *(int *)(v164 + 20));
    sub_1CCA0BF30(v133, type metadata accessor for FMIPDeviceConnectedState);
    v166 = v305;
    sub_1CCA0BEEC(v100, v305, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v167 = (uint64_t)v312;
    if (v168 != 5)
      goto LABEL_76;
  }
  v168 = *(unsigned __int8 *)(v166 + v155[35]);
LABEL_76:
  sub_1CCA0BF30(v166, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  *(_BYTE *)(a9 + v155[35]) = v168;
  sub_1CC9EAB74(v322, v167, &qword_1EF9E21F8);
  v169 = v165(v167, 1, v164);
  LODWORD(v305) = v168;
  if (v169 == 1)
  {
    sub_1CC9C3E84(v167, &qword_1EF9E21F8);
LABEL_80:
    v173 = v307;
    sub_1CCA0BEEC(v100, v307, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_81:
    v174 = (uint64_t *)(v173 + v155[36]);
    v176 = *v174;
    v175 = (char *)v174[1];
    swift_bridgeObjectRetain();
    goto LABEL_82;
  }
  v170 = v287;
  sub_1CC9EAB74(v167, v287, &qword_1ED8A8EF8);
  sub_1CCA0BF30(v167, type metadata accessor for FMIPDeviceConnectedState);
  v171 = sub_1CCB63604();
  v172 = *(_QWORD *)(v171 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v172 + 48))(v170, 1, v171) == 1)
  {
    sub_1CC9C3E84(v170, &qword_1ED8A8EF8);
    v100 = v327;
    goto LABEL_80;
  }
  v176 = sub_1CCB635C8();
  v175 = v226;
  (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v170, v171);
  v100 = v327;
  v173 = v307;
  sub_1CCA0BEEC(v327, v307, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if (!v175)
    goto LABEL_81;
LABEL_82:
  sub_1CCA0BF30(v173, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v177 = (uint64_t *)(a9 + v155[36]);
  v307 = v176;
  *v177 = v176;
  v177[1] = (uint64_t)v175;
  v178 = v323;
  v179 = v155;
  v180 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v330;
  v181 = v330((char *)v324, 1, v323);
  v182 = v308;
  sub_1CCA0BEEC(v100, v308, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v312 = v175;
  if (v181 == 1)
  {
    v183 = v182 + v179[32];
    v184 = v285;
    sub_1CC9EAB74(v183, v285, &qword_1ED8A8C30);
    swift_bridgeObjectRetain();
    sub_1CCA0BF30(v182, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v185 = v180(v184, 1, v178);
    sub_1CC9C3E84(v184, &qword_1ED8A8C30);
    v186 = *(_QWORD *)&v310;
    sub_1CCA0BEEC(v100, *(uint64_t *)&v310, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v150 = v185 == 1;
    v187 = (uint64_t)v328;
    v188 = (uint64_t)v311;
    if (v150)
    {
      v189 = (*(_QWORD *)(v186 + 240) >> 26) & 1;
      sub_1CCA0BF30(v186, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      if (v318 == 5)
        v190 = 1;
      else
        v190 = v189;
      goto LABEL_90;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1CCA0BF30(v182, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v186 = *(_QWORD *)&v310;
    sub_1CCA0BEEC(v100, *(uint64_t *)&v310, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v188 = (uint64_t)v311;
    v187 = (uint64_t)v328;
  }
  sub_1CCA0BF30(v186, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v190 = 1;
LABEL_90:
  v191 = v333[33];
  LODWORD(v303) = v190;
  *(_BYTE *)(a9 + v191) = v190;
  v336[0] = (uint64_t)v326;
  v336[1] = (uint64_t)v329;
  v336[2] = v325;
  v335[0] = v320;
  v335[1] = (uint64_t)v331;
  v335[2] = v319;
  v334 = *(_BYTE *)(v100 + 80);
  sub_1CCA11CFC(v336, v335, (v306 & 0x20) != 0, v187, &v334, &v337);
  v310 = v337;
  v333 = v338;
  v308 = v339;
  v192 = v309;
  sub_1CC9EAB74((uint64_t)v301, (uint64_t)v309, &qword_1ED8A8C30);
  if (v330((char *)v192, 1, v178) == 1)
  {
    sub_1CC9C3E84((uint64_t)v192, &qword_1ED8A8C30);
    LODWORD(v311) = 0;
  }
  else
  {
    v193 = FMIPItemGroup.shouldDisplaySeparatedLocation.getter();
    sub_1CCA0BF30((uint64_t)v192, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    LODWORD(v311) = v193 & 1;
  }
  v194 = (uint64_t)v313;
  v195 = v315;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v196 = sub_1CCB637FC();
  sub_1CCA16C20(v196, (uint64_t)qword_1ED8AD7F8);
  sub_1CCA0BEEC(v100, v188, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v100, v314, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CC9EAB74(v187, v195, &qword_1ED8A8C30);
  sub_1CC9EAB74(v187, v194, &qword_1ED8A8C30);
  swift_bridgeObjectRetain();
  v197 = v333;
  v198 = v304;
  v199 = v302;
  v200 = v197;
  swift_bridgeObjectRetain();
  v201 = v188;
  v202 = v198;
  v203 = v199;
  v204 = sub_1CCB637D8();
  v205 = sub_1CCB63D48();
  if (os_log_type_enabled(v204, (os_log_type_t)v205))
  {
    v300 = v202;
    v301 = v203;
    v302 = (char *)v200;
    LODWORD(v306) = v205;
    v309 = v204;
    v206 = swift_slowAlloc();
    v304 = (id)swift_slowAlloc();
    v336[0] = (uint64_t)v304;
    *(_DWORD *)v206 = 136318210;
    swift_bridgeObjectRetain();
    v207 = sub_1CCA17EE8(10);
    v209 = v208;
    v211 = v210;
    v213 = v212;
    swift_bridgeObjectRelease();
    v214 = MEMORY[0x1D17B0F34](v207, v209, v211, v213);
    v216 = v215;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v337 = sub_1CCA0CB60(v214, v216, v336);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA0BF30(v201, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    *(_WORD *)(v206 + 12) = 2080;
    v217 = (unint64_t)v321;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v337 = sub_1CCA0CB60(v286, v217, v336);
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    v321 = (unsigned __int8 *)v206;
    *(_WORD *)(v206 + 22) = 2080;
    v218 = v314;
    if (*(_QWORD *)(v314 + 24))
    {
      swift_bridgeObjectRetain();
      v219 = sub_1CCA17EE8(10);
      v221 = v220;
      v223 = v222;
      v225 = v224;
      swift_bridgeObjectRelease();
    }
    else
    {
      v219 = MEMORY[0x1D17B13A8](7104878, 0xE300000000000000);
      v221 = v227;
      v223 = v228;
      v225 = v229;
    }
    v230 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v330;
    v231 = v300;
    v232 = v321;
    v233 = MEMORY[0x1D17B0F34](v219, v221, v223, v225);
    v235 = v234;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v337 = sub_1CCA0CB60(v233, v235, v336);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA0BF30(v218, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v232[16] = 1024;
    LODWORD(v337) = v303;
    sub_1CCB63E44();
    v232[19] = 2080;
    *(_QWORD *)&v337 = v326;
    v338 = v329;
    v339 = v325;
    v236 = v231;
    sub_1CCA14E90(&qword_1ED8A7220);
    v237 = sub_1CCB639AC();
    *(_QWORD *)&v337 = sub_1CCA0CB60(v237, v238, v336);
    sub_1CCB63E44();

    v330 = (unsigned int (*)(char *, uint64_t, uint64_t))v236;
    swift_bridgeObjectRelease();
    v232[24] = 2080;
    *(_QWORD *)&v337 = v320;
    v338 = (int *)v331;
    v339 = v319;
    v239 = v301;
    v240 = sub_1CCB639AC();
    *(_QWORD *)&v337 = sub_1CCA0CB60(v240, v241, v336);
    sub_1CCB63E44();

    v331 = v239;
    swift_bridgeObjectRelease();
    v232[29] = 2080;
    v337 = v310;
    v338 = v333;
    v339 = v308;
    v242 = v302;
    v243 = sub_1CCB639AC();
    *(_QWORD *)&v337 = sub_1CCA0CB60(v243, v244, v336);
    sub_1CCB63E44();

    v333 = (int *)v242;
    swift_bridgeObjectRelease();
    v232[34] = 2080;
    v245 = v315;
    v246 = v288;
    sub_1CC9EAB74(v315, v288, &qword_1ED8A8C30);
    v247 = v323;
    if (v230(v246, 1, v323) == 1)
    {
      sub_1CC9C3E84(v246, &qword_1ED8A8C30);
      v248 = 0.0;
      v249 = 0;
    }
    else
    {
      v248 = *(double *)(v246 + 8);
      v249 = *(int **)(v246 + 16);
      swift_bridgeObjectRetain();
      sub_1CCA0BF30(v246, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    }
    v250 = (uint64_t)v313;
    v251 = v307;
    v252 = v321;
    v337 = v248;
    v338 = v249;
    v329 = (int *)sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
    v253 = sub_1CCB639AC();
    *(_QWORD *)&v337 = sub_1CCA0CB60(v253, v254, v336);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CC9C3E84(v245, &qword_1ED8A8C30);
    *((_WORD *)v252 + 39) = 2080;
    v255 = v289;
    sub_1CC9EAB74(v250, v289, &qword_1ED8A8C30);
    if (v230(v255, 1, v247) == 1)
    {
      sub_1CC9C3E84(v255, &qword_1ED8A8C30);
      v256 = 0.0;
    }
    else
    {
      v257 = *(_QWORD **)(v255 + 40);
      swift_bridgeObjectRetain();
      sub_1CCA0BF30(v255, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      v258 = v257[2];
      if (v258)
      {
        *(_QWORD *)&v337 = MEMORY[0x1E0DEE9D8];
        sub_1CCA6388C(0, v258, 0);
        v259 = *(unsigned __int8 *)(v282 + 80);
        v326 = v257;
        v260 = (uint64_t)v257 + ((v259 + 32) & ~v259);
        v261 = *(_QWORD *)(v282 + 72);
        v256 = v337;
        do
        {
          v262 = v332;
          sub_1CCA0BEEC(v260, v332, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          v263 = *(_QWORD *)(v262 + 352);
          v264 = *(_QWORD *)(v262 + 360);
          swift_bridgeObjectRetain();
          sub_1CCA0BF30(v262, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1CCA6388C(0, *(_QWORD *)(*(_QWORD *)&v256 + 16) + 1, 1);
            v256 = v337;
          }
          v266 = *(_QWORD *)(*(_QWORD *)&v256 + 16);
          v265 = *(_QWORD *)(*(_QWORD *)&v256 + 24);
          if (v266 >= v265 >> 1)
          {
            sub_1CCA6388C(v265 > 1, v266 + 1, 1);
            v256 = v337;
          }
          *(_QWORD *)(*(_QWORD *)&v256 + 16) = v266 + 1;
          v267 = *(_QWORD *)&v256 + 16 * v266;
          *(_QWORD *)(v267 + 32) = v263;
          *(_QWORD *)(v267 + 40) = v264;
          v260 += v261;
          --v258;
        }
        while (v258);
        swift_bridgeObjectRelease();
        v250 = (uint64_t)v313;
        v251 = v307;
      }
      else
      {
        swift_bridgeObjectRelease();
        v256 = MEMORY[0x1E0DEE9D8];
      }
    }
    v268 = v321;
    v337 = v256;
    sub_1CCA14E90(&qword_1EF9E1A00);
    v269 = sub_1CCB639AC();
    *(_QWORD *)&v337 = sub_1CCA0CB60(v269, v270, v336);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CC9C3E84(v250, &qword_1ED8A8C30);
    *((_WORD *)v268 + 44) = 1024;
    LODWORD(v337) = (_DWORD)v311;
    sub_1CCB63E44();
    *((_WORD *)v268 + 47) = 2080;
    LOBYTE(v337) = v318;
    v271 = sub_1CCB639AC();
    *(_QWORD *)&v337 = sub_1CCA0CB60(v271, v272, v336);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    *((_WORD *)v268 + 52) = 2080;
    LOBYTE(v337) = v305;
    v273 = sub_1CCB639AC();
    *(_QWORD *)&v337 = sub_1CCA0CB60(v273, v274, v336);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    *((_WORD *)v268 + 57) = 2080;
    *(_QWORD *)&v337 = v251;
    v338 = (int *)v312;
    swift_bridgeObjectRetain();
    v275 = sub_1CCB639AC();
    *(_QWORD *)&v337 = sub_1CCA0CB60(v275, v276, v336);
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v277 = v309;
    _os_log_impl(&dword_1CC9BF000, v309, (os_log_type_t)v306, "FMIPDevice:\n    -- id: %s,\n    -- name: %s,\n    -- baId: %s\n    -- isAccessory: %{BOOL}d\n    -- onlineLocation: %s\n    -- offlineLocation: %s\n    -- bestLocation: %s\n    -- itemGroup: %s\n    -- itemGroupItemsId: %s\n    -- shouldDisplaySeparatedLocation: %{BOOL}d\n    -- beaconType: %s\n    -- deviceConnectedType: %s\n    -- deviceAssociatedWithBeacon: %s", v268, 0x7Cu);
    v278 = v304;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v278, -1, -1);
    MEMORY[0x1D17B214C](v268, -1, -1);

    sub_1CC9C3E84(v322, &qword_1EF9E21F8);
    sub_1CC9C3E84(v316, &qword_1ED8A7AA0);
    sub_1CC9C3E84((uint64_t)v328, &qword_1ED8A8C30);
    v100 = v327;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    sub_1CC9C3E84(v194, &qword_1ED8A8C30);
    sub_1CC9C3E84(v315, &qword_1ED8A8C30);

    sub_1CCA0BF30(v314, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    swift_bridgeObjectRelease_n();
    sub_1CCA0BF30(v201, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);

    sub_1CC9C3E84(v322, &qword_1EF9E21F8);
    sub_1CC9C3E84(v316, &qword_1ED8A7AA0);
    sub_1CC9C3E84((uint64_t)v328, &qword_1ED8A8C30);
  }
  sub_1CC9C3E84(v317, &qword_1ED8A7AA0);
  sub_1CC9C3E84(v324, &qword_1ED8A8C30);
  return sub_1CCA0BF30(v100, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
}

void FMIPDevice.bestLocation.getter(double *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v3 = *(_QWORD *)(v1 + 272);
  v10 = *(_OWORD *)(v1 + 256);
  v11 = v3;
  v4 = *(_QWORD *)(v1 + 296);
  v8 = *(_OWORD *)(v1 + 280);
  v9 = v4;
  v5 = (*(_QWORD *)(v1 + 216) >> 5) & 1;
  v6 = v1 + *(int *)(type metadata accessor for FMIPDevice() + 128);
  v7 = *(_BYTE *)(v1 + 80);
  sub_1CCA11CFC((uint64_t *)&v10, (uint64_t *)&v8, v5, v6, &v7, a1);
}

uint64_t FMIPDevice.hasLocation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[15];
  unsigned __int8 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  double v26;
  id v27;

  v1 = v0;
  v2 = type metadata accessor for FMIPDevice();
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v3);
  v7 = &v20[-v6];
  v8 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1CC9EAB74(v1 + *(int *)(v2 + 128), (uint64_t)v10, &qword_1ED8A8C30);
  v11 = type metadata accessor for FMIPItemGroup();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11) == 1)
  {
    sub_1CC9C3E84((uint64_t)v10, &qword_1ED8A8C30);
    sub_1CCA0BEEC(v1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_6:
    sub_1CCA0BF30((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC(v1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    goto LABEL_7;
  }
  v12 = FMIPItemGroup.shouldDisplaySeparatedLocation.getter();
  sub_1CCA0BF30((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  sub_1CCA0BEEC(v1, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if ((v12 & 1) == 0)
    goto LABEL_6;
  v13 = FMIPDevice.itemGroupsPartsHaveLocation.getter();
  sub_1CCA0BF30((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(v1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if (v13)
  {
    sub_1CCA0BF30((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    return 1;
  }
LABEL_7:
  v15 = *((_QWORD *)v5 + 34);
  v24 = *((_OWORD *)v5 + 16);
  v25 = v15;
  v16 = *((_QWORD *)v5 + 37);
  v22 = *(_OWORD *)(v5 + 280);
  v23 = v16;
  v17 = (*((_QWORD *)v5 + 27) >> 5) & 1;
  v18 = (uint64_t)&v5[*(int *)(v2 + 128)];
  v21 = v5[80];
  sub_1CCA11CFC((uint64_t *)&v24, (uint64_t *)&v22, v17, v18, &v21, &v26);
  sub_1CCA0BF30((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v14 = v27 != 0;
  if (v27)

  return v14;
}

void FMIPDevice.init(device:separationMonitoringState:separationSupported:canBeLeashedByHost:safeLocations:)(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  int v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int v72;
  int v73;
  _BYTE v74[296];

  v66 = a5;
  v72 = a3;
  v73 = a4;
  v9 = (int *)type metadata accessor for FMIPDevice();
  v10 = MEMORY[0x1E0C80A78](v9);
  v71 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v70 = (uint64_t)&v53 - v13;
  MEMORY[0x1E0C80A78](v12);
  v68 = (uint64_t)&v53 - v14;
  v15 = sub_1CCA14E90(&qword_1ED8A8C30);
  v16 = MEMORY[0x1E0C80A78](v15);
  v54 = (uint64_t)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v67 = (uint64_t)&v53 - v18;
  v19 = *(_QWORD *)a1;
  v59 = *(_QWORD *)(a1 + 8);
  v20 = v59;
  *(_QWORD *)a6 = v19;
  *(_QWORD *)(a6 + 8) = v20;
  *(_QWORD *)(a6 + 16) = *(_QWORD *)(a1 + 16);
  v57 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a6 + 24) = v57;
  v21 = *(_QWORD *)(a1 + 48);
  v60 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a6 + 40) = v60;
  *(_QWORD *)(a6 + 48) = v21;
  v64 = *(_QWORD *)(a1 + 72);
  v22 = v64;
  v56 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a6 + 56) = v56;
  *(_QWORD *)(a6 + 72) = v22;
  *(_BYTE *)(a6 + 80) = *(_BYTE *)(a1 + 80);
  *(_QWORD *)(a6 + 88) = *(_QWORD *)(a1 + 88);
  v55 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a6 + 96) = v55;
  v23 = *(_QWORD *)(a1 + 120);
  v62 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a6 + 112) = v62;
  *(_QWORD *)(a6 + 120) = v23;
  *(_QWORD *)&v65 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a6 + 176) = v65;
  v24 = *(_QWORD *)(a1 + 136);
  v58 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a6 + 128) = v58;
  *(_QWORD *)(a6 + 136) = v24;
  v25 = *(_QWORD *)(a1 + 152);
  v61 = *(_QWORD *)(a1 + 144);
  v26 = *(_QWORD *)(a1 + 168);
  v63 = *(_QWORD *)(a1 + 160);
  v27 = v63;
  *(_QWORD *)(a6 + 144) = v61;
  *(_QWORD *)(a6 + 152) = v25;
  *(_QWORD *)(a6 + 160) = v27;
  *(_QWORD *)(a6 + 168) = v26;
  *(_QWORD *)(a6 + 184) = *(_QWORD *)(a1 + 184);
  *(_BYTE *)(a6 + 192) = *(_BYTE *)(a1 + 192);
  *(_OWORD *)(a6 + 200) = *(_OWORD *)(a1 + 200);
  v28 = v9[38];
  v69 = *a2;
  sub_1CC9EAB74(a1 + v28, a6 + v28, &qword_1ED8A7130);
  sub_1CC9EAB74(a1 + v9[39], a6 + v9[39], &qword_1ED8A7130);
  sub_1CC9EAB74(a1 + v9[40], a6 + v9[40], &qword_1ED8A7130);
  sub_1CC9EAB74(a1 + v9[41], a6 + v9[41], &qword_1ED8A7130);
  *(_QWORD *)(a6 + v9[37]) = *(_QWORD *)(a1 + v9[37]);
  *(_BYTE *)(a6 + v9[42]) = *(_BYTE *)(a1 + v9[42]);
  *(_BYTE *)(a6 + v9[43]) = *(_BYTE *)(a1 + v9[43]);
  *(_BYTE *)(a6 + v9[44]) = *(_BYTE *)(a1 + v9[44]);
  *(_QWORD *)(a6 + 232) = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a6 + 248) = *(_QWORD *)(a1 + 248);
  v29 = qword_1EF9DEF98;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v29 != -1)
    swift_once();
  if ((byte_1EF9E27F1 & 1) != 0)
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
  }
  else
  {
    v30 = *(_QWORD *)(a1 + 256);
    v31 = *(void **)(a1 + 264);
    v32 = *(_QWORD *)(a1 + 272);
    v33 = v31;
  }
  *(_QWORD *)(a6 + 256) = v30;
  *(_QWORD *)(a6 + 264) = v31;
  *(_QWORD *)(a6 + 272) = v32;
  sub_1CC9C3EC0(a1 + 304, (uint64_t)v74, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)v74, a6 + 304, &qword_1ED8A71C0);
  sub_1CC9EAB74(a1 + v9[28], a6 + v9[28], &qword_1ED8A7460);
  sub_1CC9EAB74(a1 + v9[29], a6 + v9[29], &qword_1ED8A7AA0);
  sub_1CC9EAB74(a1 + v9[30], a6 + v9[30], &qword_1ED8A73B8);
  sub_1CC9EAB74(a1 + v9[31], a6 + v9[31], &qword_1ED8A73F8);
  *(_QWORD *)(a6 + 280) = *(_QWORD *)(a1 + 280);
  v65 = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a6 + 288) = v65;
  *(_QWORD *)(a6 + 224) = v66;
  v34 = v9[32];
  v35 = a6 + v34;
  sub_1CC9EAB74(a1 + v34, a6 + v34, &qword_1ED8A8C30);
  *(_BYTE *)(a6 + v9[34]) = *(_BYTE *)(a1 + v9[34]);
  *(_BYTE *)(a6 + v9[35]) = *(_BYTE *)(a1 + v9[35]);
  v36 = v9[36];
  v37 = *(_QWORD *)(a1 + v36);
  v38 = *(_QWORD *)(a1 + v36 + 8);
  v39 = (_QWORD *)(a6 + v36);
  *v39 = v37;
  v39[1] = v38;
  v40 = v67;
  sub_1CC9EAB74(v35, v67, &qword_1ED8A8C30);
  v41 = type metadata accessor for FMIPItemGroup();
  v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48);
  v43 = v42(v40, 1, v41);
  sub_1CCA307F0((uint64_t)v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
  v44 = (void *)v65;
  swift_bridgeObjectRetain();
  v45 = v44;
  sub_1CC9C3E84(v40, &qword_1ED8A8C30);
  v46 = v68;
  sub_1CCA0BEEC(a1, v68, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if (v43 == 1)
  {
    v47 = v54;
    sub_1CC9EAB74(v46 + v9[32], v54, &qword_1ED8A8C30);
    sub_1CCA0BF30(v46, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v48 = v42(v47, 1, v41);
    sub_1CC9C3E84(v47, &qword_1ED8A8C30);
    v49 = v70;
    sub_1CCA0BEEC(a1, v70, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v50 = (uint64_t)v71;
    if (v48 == 1)
    {
      v51 = *(_QWORD *)(v49 + 240);
      sub_1CCA0BF30(v49, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      sub_1CCA0BEEC(a1, v50, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      if ((v51 & 0x4000000) == 0)
      {
        v52 = *(_BYTE *)(v50 + v9[34]) == 5;
        goto LABEL_13;
      }
LABEL_12:
      v52 = 1;
LABEL_13:
      sub_1CCA0BF30(v50, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      *(_BYTE *)(a6 + v9[33]) = v52;
      __asm { BR              X10 }
    }
  }
  else
  {
    sub_1CCA0BF30(v46, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v49 = v70;
    sub_1CCA0BEEC(a1, v70, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v50 = (uint64_t)v71;
  }
  sub_1CCA0BF30(v49, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BEEC(a1, v50, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  goto LABEL_12;
}

uint64_t FMIPBatteryStatus.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB219D4 + 4 * byte_1CCB722D0[*v0]))(0x6E776F6E6B6E55, 0xE700000000000000);
}

uint64_t sub_1CCB219D4()
{
  return 0x64656772616843;
}

uint64_t sub_1CCB219E8()
{
  return 0x676E696772616843;
}

uint64_t sub_1CCB21A00()
{
  return 0x6772616843746F4ELL;
}

uint64_t FMIPDevice.isAppleAudioAccessory.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;

  v1 = type metadata accessor for FMIPItem();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FMIPDevice();
  sub_1CC9EAB74(v0 + *(int *)(v8 + 128), (uint64_t)v7, &qword_1ED8A8C30);
  v9 = type metadata accessor for FMIPItemGroup();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) == 1)
  {
    sub_1CC9C3E84((uint64_t)v7, &qword_1ED8A8C30);
    return 0;
  }
  v10 = *((_QWORD *)v7 + 5);
  swift_bridgeObjectRetain();
  sub_1CCA0BF30((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = v10 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v13 = *(_QWORD *)(v2 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1CCA0BEEC(v12, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v14 = v4[*(int *)(v1 + 84)];
    sub_1CCA0BF30((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if (v14 == 1)
      break;
    v12 += v13;
    if (!--v11)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

void sub_1CCB21BD0(char *a1)
{
  sub_1CCA17FC8(*a1);
}

void sub_1CCB21BDC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCB21C28()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB21C9C()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB21CD8()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCB21D38()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCB21D80()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPBatteryStatus_optional sub_1CCB21DF4(Swift::String *a1)
{
  return FMIPBatteryStatus.init(rawValue:)(*a1);
}

uint64_t sub_1CCB21E00()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCB21E30 + 4 * byte_1CCB722E0[*v0]))();
}

void sub_1CCB21E30(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x64656772616843;
  a1[1] = v1;
}

void sub_1CCB21E48(_QWORD *a1@<X8>)
{
  *a1 = 0x676E696772616843;
  a1[1] = 0xE800000000000000;
}

void sub_1CCB21E64(_QWORD *a1@<X8>)
{
  *a1 = 0x6772616843746F4ELL;
  a1[1] = 0xEB00000000676E69;
}

uint64_t FMIPDeviceState.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

FMIPCore::FMIPDeviceState __swiftcall FMIPDeviceState.init(rawValue:)(FMIPCore::FMIPDeviceState rawValue)
{
  FMIPCore::FMIPDeviceState *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static FMIPDeviceState.isWipeInProgress.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static FMIPDeviceState.isLostModeEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static FMIPDeviceState.isActivationLocked.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static FMIPDeviceState.isLowPowerModeEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static FMIPDeviceState.isLocating.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static FMIPDeviceState.isLocationEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static FMIPDeviceState.isNotifyWhenFoundEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static FMIPDeviceState.isFamilySharedDevice.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

void static FMIPDeviceState.isLocationCapable.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

void static FMIPDeviceState.isMacOS.getter(_QWORD *a1@<X8>)
{
  *a1 = 512;
}

void static FMIPDeviceState.isThisDevice.getter(_QWORD *a1@<X8>)
{
  *a1 = 1024;
}

void static FMIPDeviceState.isCrowdsourcedLocating.getter(_QWORD *a1@<X8>)
{
  *a1 = 2048;
}

void static FMIPDeviceState.separationWarningActive.getter(_QWORD *a1@<X8>)
{
  *a1 = 4096;
}

void static FMIPDeviceState.isNotifyWhenDetachedEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x2000;
}

void static FMIPDeviceState.isShowContactDetailsEnabled.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x4000;
}

void static FMIPDeviceState.isDeviceWithYou.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x8000;
}

void static FMIPDeviceState.separationWarningPaused.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x10000;
}

void static FMIPDeviceState.isDeviceInPendingRemove.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x20000;
}

void static FMIPDeviceState.isInRepairMode.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x40000;
}

uint64_t sub_1CCB21F7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1CCB1E2E0(a1, a2);
}

uint64_t FMIPDeviceStatus.rawValue.getter()
{
  char *v0;

  return qword_1CCB73248[*v0];
}

uint64_t sub_1CCB21FA8(char *a1, char *a2)
{
  return sub_1CCB1A7B4(*a1, *a2);
}

uint64_t sub_1CCB21FB4()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB2200C()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB22038()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPDeviceStatus_optional sub_1CCB2208C(Swift::String *a1)
{
  return FMIPDeviceStatus.init(rawValue:)(*a1);
}

void sub_1CCB22098(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1CCB73248[*v1];
  a1[1] = 0xE300000000000000;
}

BOOL FMIPBeaconType.isLocalFindable.getter()
{
  unsigned __int8 *v0;

  return *v0 == 5;
}

BOOL static FMIPBeaconType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t FMIPBeaconType.hash(into:)()
{
  return sub_1CCB64348();
}

uint64_t sub_1CCB22100()
{
  return 0;
}

uint64_t sub_1CCB2210C()
{
  sub_1CCB2424C();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB22134()
{
  sub_1CCB2424C();
  return sub_1CCB643E4();
}

void sub_1CCB2215C(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1CCB22168()
{
  sub_1CC9F8D4C();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB22190()
{
  sub_1CC9F8D4C();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB221B8()
{
  sub_1CCB24290();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB221E0()
{
  sub_1CCB24290();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB22208@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1CCB22234()
{
  sub_1CCB24208();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB2225C()
{
  sub_1CCB24208();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB22284()
{
  sub_1CCB241C4();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB222AC()
{
  sub_1CCB241C4();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB222D4()
{
  sub_1CC9F8D08();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB222FC()
{
  sub_1CC9F8D08();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB22324()
{
  sub_1CCB242D4();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB2234C()
{
  sub_1CCB242D4();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB22374()
{
  sub_1CCB24180();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB2239C()
{
  sub_1CCB24180();
  return sub_1CCB643E4();
}

uint64_t FMIPBeaconType.hashValue.getter()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

void sub_1CCB22408()
{
  off_1EF9E5338 = (_UNKNOWN *)MEMORY[0x1E0DEE9E0];
}

uint64_t FMIPDevice.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPDevice.baIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPDevice.ownerIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPDevice.discoveryIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPDevice.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

void FMIPDevice.status.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 80);
}

uint64_t FMIPDevice.color.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPDevice.category.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPDevice.model.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPDevice.rawModel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPDevice.modelDisplayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPDevice.displayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRetain();
  return v1;
}

double FMIPDevice.batteryLevel.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 184);
}

void FMIPDevice.batteryStatus.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 192);
}

uint64_t FMIPDevice.passcodeLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 200);
}

uint64_t FMIPDevice.maxMessageLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 208);
}

void FMIPDevice.state.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 216);
}

uint64_t FMIPDevice.safeLocations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FMIPDevice.audioChannels.getter()
{
  return swift_bridgeObjectRetain();
}

void FMIPDevice.features.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 240);
}

uint64_t FMIPDevice.historicalLocations.getter()
{
  return swift_bridgeObjectRetain();
}

id FMIPDevice.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 256);
  v2 = *(_OWORD *)(v1 + 264);
  *(_OWORD *)(a1 + 8) = v2;
  return (id)v2;
}

id FMIPDevice.crowdSourcedLocation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 280);
  v2 = *(_OWORD *)(v1 + 288);
  *(_OWORD *)(a1 + 8) = v2;
  return (id)v2;
}

uint64_t FMIPDevice.address.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[288];

  sub_1CC9C3EC0(v1 + 304, (uint64_t)v4, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)v4, a1, &qword_1ED8A71C0);
  return sub_1CCA307F0((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
}

uint64_t FMIPDevice.soundMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMIPDevice();
  return sub_1CC9EAB74(v1 + *(int *)(v3 + 112), a1, &qword_1ED8A7460);
}

uint64_t FMIPDevice.lostMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMIPDevice();
  return sub_1CC9EAB74(v1 + *(int *)(v3 + 116), a1, &qword_1ED8A7AA0);
}

uint64_t FMIPDevice.lockMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMIPDevice();
  return sub_1CC9EAB74(v1 + *(int *)(v3 + 120), a1, &qword_1ED8A73B8);
}

uint64_t FMIPDevice.eraseMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMIPDevice();
  return sub_1CC9EAB74(v1 + *(int *)(v3 + 124), a1, &qword_1ED8A73F8);
}

uint64_t FMIPDevice.itemGroup.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMIPDevice();
  return sub_1CC9EAB74(v1 + *(int *)(v3 + 128), a1, &qword_1ED8A8C30);
}

uint64_t FMIPDevice.isConsideredAccessory.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FMIPDevice() + 132));
}

uint64_t FMIPDevice.beaconType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FMIPDevice();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 136));
  return result;
}

uint64_t FMIPDevice.deviceConnectedState.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FMIPDevice();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 140));
  return result;
}

uint64_t FMIPDevice.deviceConnectedWithBeacon.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPDevice() + 144));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPDevice.rm2State.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPDevice() + 148));
}

uint64_t FMIPDevice.skipPasswordOnRemove.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FMIPDevice() + 148)) >> 2) & 1;
}

uint64_t FMIPDevice.warnLockOnUnattachedRemove.getter()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FMIPDevice() + 148)) >> 1) & 1;
}

uint64_t FMIPDevice.isOwned.getter()
{
  uint64_t v0;
  char v2;
  uint64_t result;

  if (*(_QWORD *)(v0 + 32) == 0x72656E776FLL && *(_QWORD *)(v0 + 40) == 0xE500000000000000)
    return 1;
  v2 = sub_1CCB642A0();
  result = 0;
  if ((v2 & 1) != 0)
    return 1;
  return result;
}

uint64_t FMIPDevice.isLocating.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = type metadata accessor for FMIPDevice();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CC9EAB74(v0 + *(int *)(v1 + 128), (uint64_t)v6, &qword_1ED8A8C30);
  v7 = type metadata accessor for FMIPItemGroup();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    sub_1CC9C3E84((uint64_t)v6, &qword_1ED8A8C30);
  }
  else
  {
    v8 = *((_QWORD *)v6 + 8);
    sub_1CCA0BF30((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    if ((v8 & 0x8000) != 0)
      return 0;
  }
  v9 = *(_QWORD *)(v0 + 216);
  sub_1CCA0BEEC(v0, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  if ((v9 & 0x10) != 0)
    v10 = 1;
  else
    v10 = (v3[217] >> 3) & 1;
  sub_1CCA0BF30((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  return v10;
}

uint64_t FMIPDevice.pairingIncomplete.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;

  v1 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FMIPDevice();
  sub_1CC9EAB74(v0 + *(int *)(v4 + 128), (uint64_t)v3, &qword_1ED8A8C30);
  v5 = type metadata accessor for FMIPItemGroup();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1CC9C3E84((uint64_t)v3, &qword_1ED8A8C30);
    return 0;
  }
  else
  {
    v7 = *((_QWORD *)v3 + 8);
    sub_1CCA0BF30((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    return (v7 >> 15) & 1;
  }
}

uint64_t FMIPDevice.lostTimestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMIPDevice();
  return sub_1CC9EAB74(v1 + *(int *)(v3 + 152), a1, &qword_1ED8A7130);
}

uint64_t FMIPDevice.lockedTimestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMIPDevice();
  return sub_1CC9EAB74(v1 + *(int *)(v3 + 156), a1, &qword_1ED8A7130);
}

uint64_t FMIPDevice.wipedTimestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMIPDevice();
  return sub_1CC9EAB74(v1 + *(int *)(v3 + 160), a1, &qword_1ED8A7130);
}

uint64_t FMIPDevice.pendingRemoveUntilTimestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMIPDevice();
  return sub_1CC9EAB74(v1 + *(int *)(v3 + 164), a1, &qword_1ED8A7130);
}

BOOL FMIPDevice.itemGroupsPartsHaveLocation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  double v20;
  id v21;

  v1 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = v0 + *(int *)(type metadata accessor for FMIPDevice() + 128);
  sub_1CC9EAB74(v4, (uint64_t)v3, &qword_1ED8A8C30);
  v5 = type metadata accessor for FMIPItemGroup();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5) == 1)
  {
    sub_1CC9C3E84((uint64_t)v3, &qword_1ED8A8C30);
    return 0;
  }
  v6 = *((_QWORD *)v3 + 5);
  swift_bridgeObjectRetain();
  sub_1CCA0BF30((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  v7 = *(_QWORD *)(v0 + 272);
  v18 = *(_OWORD *)(v0 + 256);
  v19 = v7;
  v8 = *(_QWORD *)(v0 + 296);
  v16 = *(_OWORD *)(v0 + 280);
  v17 = v8;
  v9 = (*(_QWORD *)(v0 + 216) >> 5) & 1;
  v15 = *(_BYTE *)(v0 + 80);
  sub_1CCA11CFC((uint64_t *)&v18, (uint64_t *)&v16, v9, v4, &v15, &v20);
  v10 = v21;

  if (v10)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = sub_1CCB1A650(v6);
  swift_bridgeObjectRelease();
  v13 = v12[2];
  swift_bridgeObjectRelease();
  return v13 != 0;
}

uint64_t sub_1CCB22E24(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1CCA1C738(*a1);
  v5 = v4;
  if (v3 == sub_1CCA1C738(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1CCB22EAC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCA1C738(v1);
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB22F0C()
{
  unsigned __int8 *v0;

  sub_1CCA1C738(*v0);
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB22F4C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCA1C738(v1);
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB22FA8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB28320();
  *a1 = result;
  return result;
}

uint64_t sub_1CCB22FD4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1CCA1C738(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1CCB22FFC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB28320();
  *a1 = result;
  return result;
}

void sub_1CCB23020(_BYTE *a1@<X8>)
{
  *a1 = 58;
}

uint64_t sub_1CCB2302C()
{
  sub_1CCA155B8();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB23054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  char **p_type;
  unint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  int v21;
  void *v22;
  double v23;
  id v24;
  id v25;
  double v26;
  double v27;
  uint64_t result;
  _BYTE *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  double v37;
  double v38;
  id v39;
  void *v40;
  id v41;
  double v42;
  int v43;
  int v44;
  int v45;
  void *v46;
  char isUniquelyReferenced_nonNull_native;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  char *v54;
  void *v55;
  _BYTE v56[8];
  void *v57;
  double v58;

  v53 = a3;
  v5 = sub_1CCB635B0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v51 - v10;
  if (qword_1EF9DEFF0 != -1)
    swift_once();
  swift_beginAccess();
  v12 = off_1EF9E5338;
  v13 = *((_QWORD *)off_1EF9E5338 + 2);
  p_type = &stru_1E8912FF0.type;
  v54 = v9;
  v52 = a1;
  if (!v13)
    goto LABEL_8;
  swift_bridgeObjectRetain();
  v15 = sub_1CCA074F4(a1, a2);
  if ((v16 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    v30 = swift_endAccess();
    goto LABEL_9;
  }
  v17 = v12[7] + 24 * v15;
  v18 = *(_BYTE *)v17;
  v19 = *(_BYTE *)(v17 + 1);
  v20 = *(_BYTE *)(v17 + 2);
  LOBYTE(v21) = *(_BYTE *)(v17 + 3);
  v22 = *(void **)(v17 + 8);
  v23 = *(double *)(v17 + 16);
  swift_endAccess();
  v24 = v22;
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(v24, (SEL)&stru_1E8913540.name);
  sub_1CCB63580();

  sub_1CCB6355C();
  v27 = v26;
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  if (v27 > -300.0)
  {
    v29 = v53;
    *v53 = v18;
    v29[1] = v19;
    v29[2] = v20;
    goto LABEL_19;
  }

  p_type = (char **)(&stru_1E8912FF0 + 16);
LABEL_9:
  sub_1CCB2408C(v30, 0.0, 300.0);
  sub_1CCB635A4();
  sub_1CCB6352C();
  v31 = *(void (**)(char *, uint64_t))(v6 + 8);
  v31(v11, v5);
  v32 = objc_allocWithZone(MEMORY[0x1E0C9E3B8]);
  v33 = (void *)sub_1CCB63538();
  v34 = objc_msgSend(v32, sel_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_speed_timestamp_, v33, 37.3723, -122.0804, 100.0, 35.0, 35.0, 0.0, 0.0);

  LOBYTE(v55) = 1;
  v35 = v34;
  v36 = objc_msgSend(v35, p_type[462]);
  sub_1CCB63580();

  sub_1CCB6355C();
  v38 = v37;
  v31(v11, v5);
  v39 = objc_msgSend(v35, sel_floor);
  v51 = v5;
  if (v39)
  {
    v40 = v39;
    v41 = objc_msgSend(v39, sel_level);

    v42 = (double)(uint64_t)v41;
  }
  else
  {
    v42 = -1.0;
  }
  sub_1CC9FB3D4(v35, (char *)&v55, v38 < -3600.0, 0, 1, (uint64_t)v56, v42);
  v43 = v56[0];
  v44 = v56[1];
  v45 = v56[2];
  v21 = v56[3];
  v46 = v57;
  v23 = v58;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v24 = v46;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v55 = off_1EF9E5338;
  off_1EF9E5338 = (_UNKNOWN *)0x8000000000000000;
  if (v44)
    v48 = 256;
  else
    v48 = 0;
  v49 = v48 | v43;
  if (v45)
    v50 = 0x10000;
  else
    v50 = 0;
  sub_1CCA03D9C(v49 | v50 | (v21 << 24), (uint64_t)v24, v52, a2, isUniquelyReferenced_nonNull_native, v23);
  off_1EF9E5338 = v55;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();

  result = ((uint64_t (*)(char *, uint64_t))v31)(v54, v51);
  v29 = v53;
  *v53 = v43;
  v29[1] = v44;
  v29[2] = v45;
LABEL_19:
  v29[3] = v21;
  *((_QWORD *)v29 + 1) = v24;
  *((double *)v29 + 2) = v23;
  return result;
}

Swift::Bool __swiftcall FMIPDevice.canEnableNotifyWhenFound()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Bool v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  void (*v27)(_BYTE *, uint64_t);
  uint64_t v28;
  void **v29;
  void *v30;
  id v31;
  id v32;
  double v33;
  double v34;
  _BYTE v37[15];
  unsigned __int8 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  id v44;
  uint64_t v45;

  v1 = sub_1CCB635B0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = &v37[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v37[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((*(_BYTE *)(v0 + 217) & 4) == 0)
  {
    v8 = v0 + *(int *)(type metadata accessor for FMIPDevice() + 128);
    sub_1CC9EAB74(v8, (uint64_t)v7, &qword_1ED8A8C30);
    v9 = type metadata accessor for FMIPItemGroup();
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v7, 1, v9) == 1)
    {
      sub_1CC9C3E84((uint64_t)v7, &qword_1ED8A8C30);
    }
    else
    {
      v11 = *((_QWORD *)v7 + 5);
      swift_bridgeObjectRetain();
      sub_1CCA0BF30((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      v12 = *(_QWORD *)(v0 + 272);
      v41 = *(_OWORD *)(v0 + 256);
      v42 = v12;
      v13 = *(_QWORD *)(v0 + 296);
      v39 = *(_OWORD *)(v0 + 280);
      v40 = v13;
      v14 = (*(_QWORD *)(v0 + 216) >> 5) & 1;
      v38 = *(_BYTE *)(v0 + 80);
      sub_1CCA11CFC((uint64_t *)&v41, (uint64_t *)&v39, v14, v8, &v38, (double *)&v43);
      v15 = v44;

      if (!v15)
      {
        v23 = (uint64_t)sub_1CCB1A650(v11);
        swift_bridgeObjectRelease();
        v24 = *(_QWORD *)(v23 + 16);
        if (v24)
          goto LABEL_11;
        goto LABEL_19;
      }
      swift_bridgeObjectRelease();
    }
    v16 = *(_QWORD *)(v0 + 272);
    v41 = *(_OWORD *)(v0 + 256);
    v42 = v16;
    v17 = *(_QWORD *)(v0 + 296);
    v39 = *(_OWORD *)(v0 + 280);
    v40 = v17;
    v18 = (*(_QWORD *)(v0 + 216) >> 5) & 1;
    v38 = *(_BYTE *)(v0 + 80);
    sub_1CCA11CFC((uint64_t *)&v41, (uint64_t *)&v39, v18, v8, &v38, (double *)&v43);
    v19 = v44;
    if (v44)
    {
      v20 = v45;
      v21 = v43;
      v22 = v43 >> 24;
      sub_1CCA14E90(&qword_1EF9E1460);
      v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_1CCB677E0;
      *(_BYTE *)(v23 + 32) = v21 & 1;
      *(_BYTE *)(v23 + 33) = BYTE1(v21) & 1;
      *(_BYTE *)(v23 + 34) = BYTE2(v21) & 1;
      *(_BYTE *)(v23 + 35) = v22;
      *(_QWORD *)(v23 + 40) = v19;
      *(_QWORD *)(v23 + 48) = v20;
      v24 = *(_QWORD *)(v23 + 16);
      if (!v24)
        goto LABEL_19;
LABEL_11:
      sub_1CCB635A4();
      sub_1CCB63568();
      v26 = v25;
      v27 = *(void (**)(_BYTE *, uint64_t))(v2 + 8);
      v27(v4, v1);
      v28 = v24 - 1;
      v29 = (void **)(v23 + 40);
      do
      {
        v30 = *v29;
        v29 += 3;
        v31 = v30;
        v32 = objc_msgSend(v31, sel_timestamp);
        sub_1CCB63580();

        sub_1CCB63568();
        v34 = v33;

        v27(v4, v1);
        v10 = v26 - v34 > 180.0;
      }
      while (v26 - v34 <= 180.0 && v28-- != 0);
      goto LABEL_20;
    }
    v23 = MEMORY[0x1E0DEE9D8];
    v24 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (v24)
      goto LABEL_11;
LABEL_19:
    v10 = 1;
LABEL_20:
    swift_bridgeObjectRelease();
    return v10;
  }
  return 0;
}

BOOL FMIPDevice.isLostModeActive.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  v1 = v0;
  v2 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v2);
  v34 = (uint64_t)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (int *)type metadata accessor for FMIPDevice();
  MEMORY[0x1E0C80A78](v4);
  v32 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v33 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v31 - v10;
  v12 = sub_1CCA14E90(&qword_1ED8A7AA0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v31 - v16;
  v18 = v1 + v4[29];
  sub_1CC9EAB74(v18, (uint64_t)&v31 - v16, &qword_1ED8A7AA0);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v7) = v19(v17, 1, v6);
  v20 = v1;
  sub_1CC9C3E84((uint64_t)v17, &qword_1ED8A7AA0);
  if ((_DWORD)v7 != 1 && *(_BYTE *)(v1 + v4[34]) == 5)
    return 1;
  sub_1CC9EAB74(v18, (uint64_t)v15, &qword_1ED8A7AA0);
  if (v19(v15, 1, v6) == 1)
  {
    sub_1CC9C3E84((uint64_t)v15, &qword_1ED8A7AA0);
LABEL_8:
    v25 = v34;
    sub_1CC9EAB74(v20 + v4[32], v34, &qword_1ED8A8C30);
    v26 = type metadata accessor for FMIPItemGroup();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v25, 1, v26) == 1)
    {
      sub_1CC9C3E84(v25, &qword_1ED8A8C30);
      return 0;
    }
    v27 = *(_QWORD *)(v25 + 64);
    sub_1CCA0BF30(v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
    return (v27 & 8) != 0;
  }
  sub_1CC9FED60((uint64_t)v15, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
  v21 = (uint64_t)v33;
  v22 = v1;
  if (((1 << v11[56]) & 0x1FFB) != 0)
  {
    v23 = v32;
    sub_1CCA0BEEC(v1, v32, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BF30(v23, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC((uint64_t)v11, v21, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
  }
  else
  {
    v29 = v32;
    sub_1CCA0BEEC(v22, v32, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v30 = *(_QWORD *)(v29 + 216);
    sub_1CCA0BF30(v29, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    sub_1CCA0BEEC((uint64_t)v11, v21, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
    if ((v30 & 2) != 0)
    {
      sub_1CCA0BF30(v21, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
      sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
      return 1;
    }
  }
  v24 = *(unsigned __int8 *)(v21 + 56);
  sub_1CCA0BF30(v21, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
  sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
  if (v24 != 4)
    goto LABEL_8;
  return 1;
}

uint64_t sub_1CCB23B40(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  BOOL v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  uint64_t result;
  char *v29;
  char *v30;
  char *v31;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v31 = __src;
  v30 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      v18 = 24 * v11;
      if (__dst != a2 || &a2[v18] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v19 = &v4[v18];
      v29 = v19;
      v31 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v20 = a3 - 24;
        v21 = v6;
        while (1)
        {
          v22 = (char *)(v20 + 24);
          v23 = *((_QWORD *)v21 - 3);
          v24 = *((_QWORD *)v21 - 2);
          v21 -= 24;
          v25 = v23 == *((_QWORD *)v19 - 3) && v24 == *((_QWORD *)v19 - 2);
          if (v25 || (sub_1CCB642A0() & 1) == 0)
          {
            v29 = v19 - 24;
            if (v22 < v19 || v20 >= (unint64_t)v19 || v22 != v19)
            {
              v27 = *(_OWORD *)(v19 - 24);
              *(_QWORD *)(v20 + 16) = *((_QWORD *)v19 - 1);
              *(_OWORD *)v20 = v27;
            }
            v21 = v6;
            v19 -= 24;
            if (v6 <= v7)
              goto LABEL_46;
          }
          else
          {
            if (v22 != v6 || v20 >= (unint64_t)v6)
            {
              v26 = *(_OWORD *)v21;
              *(_QWORD *)(v20 + 16) = *((_QWORD *)v21 + 2);
              *(_OWORD *)v20 = v26;
            }
            v31 = v21;
            if (v21 <= v7)
              goto LABEL_46;
          }
          v20 -= 24;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_46;
        }
      }
      goto LABEL_46;
    }
  }
  else if (v8 >= -23)
  {
    v12 = 24 * v9;
    if (__dst != __src || &__src[v12] <= __dst)
      memmove(__dst, __src, v12);
    v13 = &v4[v12];
    v29 = v13;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        v14 = *(_QWORD *)v4 == *(_QWORD *)v6 && *((_QWORD *)v4 + 1) == *((_QWORD *)v6 + 1);
        if (v14 || (sub_1CCB642A0() & 1) == 0)
        {
          if (v7 != v4)
          {
            v17 = *(_OWORD *)v4;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v4 + 2);
            *(_OWORD *)v7 = v17;
          }
          v4 += 24;
          v30 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 24;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
          {
            v16 = *(_OWORD *)v6;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v6 + 2);
            *(_OWORD *)v7 = v16;
          }
        }
        v7 += 24;
        if (v4 >= v13)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v31 = v7;
    }
LABEL_46:
    sub_1CCB23FC0((void **)&v31, (const void **)&v30, &v29);
    return 1;
  }
  result = sub_1CCB640C0();
  __break(1u);
  return result;
}

char *sub_1CCB23E0C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1CCA14E90(&qword_1EF9E5508);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1CCB23F04(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    result = (char *)sub_1CCB640C0();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

char *sub_1CCB23FC0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    result = (char *)sub_1CCB640C0();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = 24 * (v4 / 24);
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

char *sub_1CCB24078(uint64_t a1)
{
  return sub_1CCB23E0C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1CCB2408C(uint64_t result, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = MEMORY[0x1D17B2164](&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3)
    return sub_1CCB2408C(v6, a2, a3);
  return result;
}

uint64_t sub_1CCB24134(uint64_t a1)
{
  return sub_1CCA64150(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1CCB24148(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t sub_1CCB24180()
{
  unint64_t result;

  result = qword_1EF9E5398;
  if (!qword_1EF9E5398)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB73114, &type metadata for FMIPBeaconType.VirtualMeDeviceCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E5398);
  }
  return result;
}

unint64_t sub_1CCB241C4()
{
  unint64_t result;

  result = qword_1EF9E53A0;
  if (!qword_1EF9E53A0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB730C4, &type metadata for FMIPBeaconType.LocalFindableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E53A0);
  }
  return result;
}

unint64_t sub_1CCB24208()
{
  unint64_t result;

  result = qword_1EF9E53A8;
  if (!qword_1EF9E53A8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB73074, &type metadata for FMIPBeaconType.HeleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E53A8);
  }
  return result;
}

unint64_t sub_1CCB2424C()
{
  unint64_t result;

  result = qword_1EF9E53B0;
  if (!qword_1EF9E53B0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB73024, &type metadata for FMIPBeaconType.AccessoryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E53B0);
  }
  return result;
}

unint64_t sub_1CCB24290()
{
  unint64_t result;

  result = qword_1EF9E53B8;
  if (!qword_1EF9E53B8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72FD4, &type metadata for FMIPBeaconType.DurianCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E53B8);
  }
  return result;
}

unint64_t sub_1CCB242D4()
{
  unint64_t result;

  result = qword_1EF9E53C0;
  if (!qword_1EF9E53C0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72F84, &type metadata for FMIPBeaconType.SelfBeaconingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E53C0);
  }
  return result;
}

unint64_t sub_1CCB24318()
{
  unint64_t result;

  result = qword_1EF9E5420;
  if (!qword_1EF9E5420)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDeviceConnectedStateType, &type metadata for FMIPDeviceConnectedStateType);
    atomic_store(result, (unint64_t *)&qword_1EF9E5420);
  }
  return result;
}

unint64_t sub_1CCB2435C()
{
  unint64_t result;

  result = qword_1EF9E5438;
  if (!qword_1EF9E5438)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDeviceConnectedStateType, &type metadata for FMIPDeviceConnectedStateType);
    atomic_store(result, (unint64_t *)&qword_1EF9E5438);
  }
  return result;
}

unint64_t sub_1CCB243A4()
{
  unint64_t result;

  result = qword_1EF9E5440;
  if (!qword_1EF9E5440)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPBatteryStatus, &type metadata for FMIPBatteryStatus);
    atomic_store(result, (unint64_t *)&qword_1EF9E5440);
  }
  return result;
}

unint64_t sub_1CCB243EC()
{
  unint64_t result;

  result = qword_1EF9E5448;
  if (!qword_1EF9E5448)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDeviceState, &type metadata for FMIPDeviceState);
    atomic_store(result, (unint64_t *)&qword_1EF9E5448);
  }
  return result;
}

unint64_t sub_1CCB24434()
{
  unint64_t result;

  result = qword_1EF9E5450;
  if (!qword_1EF9E5450)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDeviceState, &type metadata for FMIPDeviceState);
    atomic_store(result, (unint64_t *)&qword_1EF9E5450);
  }
  return result;
}

unint64_t sub_1CCB2447C()
{
  unint64_t result;

  result = qword_1EF9E5458;
  if (!qword_1EF9E5458)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDeviceState, &type metadata for FMIPDeviceState);
    atomic_store(result, (unint64_t *)&qword_1EF9E5458);
  }
  return result;
}

unint64_t sub_1CCB244C4()
{
  unint64_t result;

  result = qword_1EF9E5460;
  if (!qword_1EF9E5460)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDeviceState, &type metadata for FMIPDeviceState);
    atomic_store(result, (unint64_t *)&qword_1EF9E5460);
  }
  return result;
}

unint64_t sub_1CCB2450C()
{
  unint64_t result;

  result = qword_1EF9E5468;
  if (!qword_1EF9E5468)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDeviceStatus, &type metadata for FMIPDeviceStatus);
    atomic_store(result, (unint64_t *)&qword_1EF9E5468);
  }
  return result;
}

unint64_t sub_1CCB24554()
{
  unint64_t result;

  result = qword_1EF9E5470;
  if (!qword_1EF9E5470)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPBeaconType, &type metadata for FMIPBeaconType);
    atomic_store(result, (unint64_t *)&qword_1EF9E5470);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPBatteryStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CCB245E4 + 4 * byte_1CCB72377[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CCB24618 + 4 * byte_1CCB72372[v4]))();
}

uint64_t sub_1CCB24618(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB24620(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB24628);
  return result;
}

uint64_t sub_1CCB24634(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB2463CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CCB24640(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB24648(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPBatteryStatus()
{
  return &type metadata for FMIPBatteryStatus;
}

ValueMetadata *type metadata accessor for FMIPDeviceState()
{
  return &type metadata for FMIPDeviceState;
}

uint64_t storeEnumTagSinglePayload for FMIPDeviceStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCB246C0 + 4 * byte_1CCB72381[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CCB246F4 + 4 * byte_1CCB7237C[v4]))();
}

uint64_t sub_1CCB246F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB246FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB24704);
  return result;
}

uint64_t sub_1CCB24710(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB24718);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCB2471C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB24724(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPDeviceStatus()
{
  return &type metadata for FMIPDeviceStatus;
}

uint64_t initializeBufferWithCopyOfBuffer for FMIPDevice(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  void (*v66)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  _BYTE *v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  void (*v108)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  void (*v130)(_QWORD *, _QWORD, uint64_t, uint64_t);
  void (*v131)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int (*v142)(const void *, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  void *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v158;
  _QWORD *__dst;
  unsigned int (*v160)(_QWORD *, uint64_t, uint64_t);
  void (*v161)(char *, char *, uint64_t);
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v38 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v38 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v7;
    v8 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v8;
    v9 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v9;
    v10 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v10;
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    v11 = a2[12];
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_QWORD *)(a1 + 96) = v11;
    v12 = a2[14];
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_QWORD *)(a1 + 112) = v12;
    v13 = a2[16];
    *(_QWORD *)(a1 + 120) = a2[15];
    *(_QWORD *)(a1 + 128) = v13;
    v14 = a2[18];
    *(_QWORD *)(a1 + 136) = a2[17];
    *(_QWORD *)(a1 + 144) = v14;
    v15 = a2[20];
    *(_QWORD *)(a1 + 152) = a2[19];
    *(_QWORD *)(a1 + 160) = v15;
    v16 = a2[22];
    *(_QWORD *)(a1 + 168) = a2[21];
    *(_QWORD *)(a1 + 176) = v16;
    *(_QWORD *)(a1 + 184) = a2[23];
    *(_BYTE *)(a1 + 192) = *((_BYTE *)a2 + 192);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
    v17 = a2[28];
    *(_QWORD *)(a1 + 216) = a2[27];
    *(_QWORD *)(a1 + 224) = v17;
    v18 = a2[30];
    *(_QWORD *)(a1 + 232) = a2[29];
    *(_QWORD *)(a1 + 240) = v18;
    *(_QWORD *)(a1 + 248) = a2[31];
    *(_DWORD *)(a1 + 256) = *((_DWORD *)a2 + 64);
    v20 = (void *)a2[33];
    v19 = a2[34];
    *(_QWORD *)(a1 + 264) = v20;
    *(_QWORD *)(a1 + 272) = v19;
    *(_DWORD *)(a1 + 280) = *((_DWORD *)a2 + 70);
    v22 = (void *)a2[36];
    v21 = a2[37];
    *(_QWORD *)(a1 + 288) = v22;
    *(_QWORD *)(a1 + 296) = v21;
    v23 = a2[59];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = v20;
    v25 = v22;
    if (v23)
    {
      v26 = a2[39];
      *(_QWORD *)(a1 + 304) = a2[38];
      *(_QWORD *)(a1 + 312) = v26;
      v27 = a2[41];
      *(_QWORD *)(a1 + 320) = a2[40];
      *(_QWORD *)(a1 + 328) = v27;
      v28 = a2[43];
      *(_QWORD *)(a1 + 336) = a2[42];
      *(_QWORD *)(a1 + 344) = v28;
      v29 = a2[45];
      *(_QWORD *)(a1 + 352) = a2[44];
      *(_QWORD *)(a1 + 360) = v29;
      v30 = a2[47];
      *(_QWORD *)(a1 + 368) = a2[46];
      *(_QWORD *)(a1 + 376) = v30;
      v31 = a2[49];
      *(_QWORD *)(a1 + 384) = a2[48];
      *(_QWORD *)(a1 + 392) = v31;
      v32 = a2[51];
      *(_QWORD *)(a1 + 400) = a2[50];
      *(_QWORD *)(a1 + 408) = v32;
      v33 = a2[53];
      *(_QWORD *)(a1 + 416) = a2[52];
      *(_QWORD *)(a1 + 424) = v33;
      v34 = a2[55];
      *(_QWORD *)(a1 + 432) = a2[54];
      *(_QWORD *)(a1 + 440) = v34;
      v35 = a2[57];
      *(_QWORD *)(a1 + 448) = a2[56];
      *(_QWORD *)(a1 + 456) = v35;
      *(_QWORD *)(a1 + 464) = a2[58];
      *(_QWORD *)(a1 + 472) = v23;
      v36 = a2[61];
      *(_QWORD *)(a1 + 480) = a2[60];
      *(_QWORD *)(a1 + 488) = v36;
      v37 = a2[63];
      *(_QWORD *)(a1 + 496) = a2[62];
      *(_QWORD *)(a1 + 504) = v37;
      *(_QWORD *)(a1 + 512) = a2[64];
      *(_QWORD *)(a1 + 520) = a2[65];
      *(_QWORD *)(a1 + 528) = a2[66];
      *(_QWORD *)(a1 + 536) = a2[67];
      *(_QWORD *)(a1 + 544) = a2[68];
      *(_QWORD *)(a1 + 552) = a2[69];
      *(_QWORD *)(a1 + 560) = a2[70];
      *(_QWORD *)(a1 + 568) = a2[71];
      *(_QWORD *)(a1 + 576) = a2[72];
      *(_QWORD *)(a1 + 584) = a2[73];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      memcpy((void *)(a1 + 304), a2 + 38, 0x120uLL);
    }
    v39 = a3;
    v40 = a3[28];
    v41 = (_BYTE *)(a1 + v40);
    v42 = (char *)a2 + v40;
    v43 = (int *)type metadata accessor for FMIPPlaySoundMetadata();
    v44 = *((_QWORD *)v43 - 1);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v44 + 48))(v42, 1, v43))
    {
      v45 = sub_1CCA14E90(&qword_1ED8A7460);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      *v41 = *v42;
      v46 = v43[5];
      v47 = &v41[v46];
      v48 = &v42[v46];
      v49 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v47, v48, v49);
      v50 = v43[6];
      v51 = &v41[v50];
      v52 = &v42[v50];
      v53 = v52[1];
      *v51 = *v52;
      v51[1] = v53;
      v54 = v43[7];
      v55 = &v41[v54];
      v56 = &v42[v54];
      v57 = v56[1];
      *v55 = *v56;
      v55[1] = v57;
      v58 = v43[8];
      v59 = &v41[v58];
      v60 = &v42[v58];
      v61 = v60[1];
      *v59 = *v60;
      v59[1] = v61;
      v62 = v43[9];
      v63 = &v41[v62];
      v64 = &v42[v62];
      v65 = v64[1];
      *v63 = *v64;
      v63[1] = v65;
      v66 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v44 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v66(v41, 0, 1, v43);
    }
    v67 = a3[29];
    v68 = (_DWORD *)(a1 + v67);
    v69 = (_DWORD *)((char *)a2 + v67);
    v70 = type metadata accessor for FMIPDeviceLostModeMetadata();
    v71 = *(_QWORD *)(v70 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
    {
      v72 = sub_1CCA14E90(&qword_1ED8A7AA0);
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    }
    else
    {
      *v68 = *v69;
      v73 = *((_QWORD *)v69 + 2);
      *((_QWORD *)v68 + 1) = *((_QWORD *)v69 + 1);
      *((_QWORD *)v68 + 2) = v73;
      v74 = *((_QWORD *)v69 + 4);
      *((_QWORD *)v68 + 3) = *((_QWORD *)v69 + 3);
      *((_QWORD *)v68 + 4) = v74;
      v75 = *((_QWORD *)v69 + 6);
      *((_QWORD *)v68 + 5) = *((_QWORD *)v69 + 5);
      *((_QWORD *)v68 + 6) = v75;
      *((_BYTE *)v68 + 56) = *((_BYTE *)v69 + 56);
      v76 = *(int *)(v70 + 48);
      v163 = (char *)v69 + v76;
      v166 = (char *)v68 + v76;
      v77 = sub_1CCB635B0();
      v78 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v79 = v77;
      v39 = a3;
      v78(v166, v163, v79);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
    }
    v80 = v39[30];
    v81 = (_BYTE *)(a1 + v80);
    v82 = (char *)a2 + v80;
    v83 = type metadata accessor for FMIPLockMetadata();
    v84 = *(_QWORD *)(v83 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
    {
      v85 = sub_1CCA14E90(&qword_1ED8A73B8);
      memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    }
    else
    {
      *v81 = *v82;
      v86 = *(int *)(v83 + 20);
      v87 = &v81[v86];
      v88 = &v82[v86];
      v89 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v87, v88, v89);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
    }
    v90 = v39[31];
    v91 = (_BYTE *)(a1 + v90);
    v92 = (char *)a2 + v90;
    v93 = (int *)type metadata accessor for FMIPEraseMetadata();
    v94 = *((_QWORD *)v93 - 1);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v94 + 48))(v92, 1, v93))
    {
      v95 = sub_1CCA14E90(&qword_1ED8A73F8);
      memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    }
    else
    {
      *v91 = *v92;
      v96 = v93[5];
      v97 = &v91[v96];
      v98 = &v92[v96];
      v99 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v99 - 8) + 16))(v97, v98, v99);
      v100 = v93[6];
      v101 = &v91[v100];
      v102 = &v92[v100];
      v103 = v102[1];
      *v101 = *v102;
      v101[1] = v103;
      v104 = v93[7];
      v105 = &v91[v104];
      v106 = &v92[v104];
      v107 = v106[1];
      *v105 = *v106;
      v105[1] = v107;
      v91[v93[8]] = v92[v93[8]];
      v108 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v94 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v108(v91, 0, 1, v93);
    }
    v109 = v39[32];
    v110 = (_QWORD *)(a1 + v109);
    v111 = (uint64_t *)((char *)a2 + v109);
    v112 = type metadata accessor for FMIPItemGroup();
    v113 = *(_QWORD *)(v112 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
    {
      v114 = sub_1CCA14E90(&qword_1ED8A8C30);
      memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v110 = *(_OWORD *)v111;
      v115 = v111[3];
      v110[2] = v111[2];
      v110[3] = v115;
      v116 = v111[5];
      v110[4] = v111[4];
      v110[5] = v116;
      v164 = v111[7];
      v167 = v113;
      v110[6] = v111[6];
      v110[7] = v164;
      v117 = v111[9];
      v110[8] = v111[8];
      v110[9] = v117;
      v118 = *(int *)(v112 + 48);
      __dst = (_QWORD *)((char *)v110 + v118);
      v119 = (_QWORD *)((char *)v111 + v118);
      v120 = type metadata accessor for FMIPItemLostModeMetadata();
      v158 = *(_QWORD *)(v120 - 8);
      v160 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v158 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v160(v119, 1, v120))
      {
        v121 = sub_1CCA14E90(&qword_1ED8A8CD0);
        memcpy(__dst, v119, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
      }
      else
      {
        v122 = v119[1];
        *__dst = *v119;
        __dst[1] = v122;
        v123 = v119[3];
        __dst[2] = v119[2];
        __dst[3] = v123;
        v124 = *(int *)(v120 + 24);
        v162 = (char *)v119 + v124;
        v165 = (char *)__dst + v124;
        v125 = sub_1CCB635B0();
        v161 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v125 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v161(v165, v162, v125);
        v126 = *(int *)(v120 + 28);
        v127 = (_QWORD *)((char *)__dst + v126);
        v128 = (_QWORD *)((char *)v119 + v126);
        v129 = v128[1];
        *v127 = *v128;
        v127[1] = v129;
        v130 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v158 + 56);
        swift_bridgeObjectRetain();
        v130(__dst, 0, 1, v120);
      }
      *(_QWORD *)((char *)v110 + *(int *)(v112 + 52)) = *(_QWORD *)((char *)v111 + *(int *)(v112 + 52));
      v131 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v167 + 56);
      swift_bridgeObjectRetain();
      v131(v110, 0, 1, v112);
      v39 = a3;
    }
    v132 = v39[34];
    *(_BYTE *)(a1 + v39[33]) = *((_BYTE *)a2 + v39[33]);
    *(_BYTE *)(a1 + v132) = *((_BYTE *)a2 + v132);
    v133 = v39[36];
    *(_BYTE *)(a1 + v39[35]) = *((_BYTE *)a2 + v39[35]);
    v134 = (_QWORD *)(a1 + v133);
    v135 = (uint64_t *)((char *)a2 + v133);
    v136 = v135[1];
    *v134 = *v135;
    v134[1] = v136;
    v137 = v39[38];
    *(_QWORD *)(a1 + v39[37]) = *(uint64_t *)((char *)a2 + v39[37]);
    v138 = (void *)(a1 + v137);
    v139 = (char *)a2 + v137;
    v140 = sub_1CCB635B0();
    v141 = *(_QWORD *)(v140 - 8);
    v142 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v141 + 48);
    swift_bridgeObjectRetain();
    if (v142(v139, 1, v140))
    {
      v143 = sub_1CCA14E90(&qword_1ED8A7130);
      memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v141 + 16))(v138, v139, v140);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v138, 0, 1, v140);
    }
    v144 = v39[39];
    v145 = (void *)(a1 + v144);
    v146 = (char *)a2 + v144;
    if (v142((char *)a2 + v144, 1, v140))
    {
      v147 = sub_1CCA14E90(&qword_1ED8A7130);
      memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v141 + 16))(v145, v146, v140);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v145, 0, 1, v140);
    }
    v148 = v39[40];
    v149 = (void *)(a1 + v148);
    v150 = (char *)a2 + v148;
    if (v142((char *)a2 + v148, 1, v140))
    {
      v151 = sub_1CCA14E90(&qword_1ED8A7130);
      memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v141 + 16))(v149, v150, v140);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v149, 0, 1, v140);
    }
    v152 = v39[41];
    v153 = (void *)(a1 + v152);
    v154 = (char *)a2 + v152;
    if (v142((char *)a2 + v152, 1, v140))
    {
      v155 = sub_1CCA14E90(&qword_1ED8A7130);
      memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v141 + 16))(v153, v154, v140);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v141 + 56))(v153, 0, 1, v140);
    }
    v156 = v39[43];
    *(_BYTE *)(a1 + v39[42]) = *((_BYTE *)a2 + v39[42]);
    *(_BYTE *)(a1 + v156) = *((_BYTE *)a2 + v156);
    *(_BYTE *)(a1 + v39[44]) = *((_BYTE *)a2 + v39[44]);
  }
  return a1;
}

uint64_t assignWithCopy for FMIPDevice(uint64_t a1, uint64_t a2, int *a3)
{
  _BYTE *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  int *v17;
  uint64_t v18;
  uint64_t (*v19)(_BYTE *, uint64_t, int *);
  int v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void (*v38)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(_BYTE *, uint64_t, uint64_t);
  int v58;
  int v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  int *v68;
  uint64_t v69;
  uint64_t (*v70)(_BYTE *, uint64_t, int *);
  int v71;
  int v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  void (*v83)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(_QWORD *, uint64_t, uint64_t);
  int v91;
  int v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(_QWORD *, uint64_t, uint64_t);
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  void (*v145)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  void (*v151)(_QWORD *, _QWORD, uint64_t, uint64_t);
  void (*v152)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  void *v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t (*v162)(void *, uint64_t, uint64_t);
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  void *v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  void *v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  void *v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  unsigned int (*v193)(_QWORD *, uint64_t, uint64_t);
  void (*v194)(char *, char *, uint64_t);
  void (*v195)(char *, char *, uint64_t);
  char *v196;
  char *v197;
  _QWORD *__dst;
  char *__dsta;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  int *v205;
  int *v206;

  v6 = (_BYTE *)(a2 + 256);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_BYTE *)(a1 + 257) = v6[1];
  *(_BYTE *)(a1 + 258) = v6[2];
  *(_BYTE *)(a1 + 259) = *(_BYTE *)(a2 + 259);
  v7 = *(void **)(a2 + 264);
  v8 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = v6[24];
  *(_BYTE *)(a1 + 281) = v6[25];
  *(_BYTE *)(a1 + 282) = v6[26];
  *(_BYTE *)(a1 + 283) = *(_BYTE *)(a2 + 283);
  v10 = *(void **)(a2 + 288);
  v11 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v10;
  v12 = v10;

  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  v13 = *(_QWORD *)(a2 + 472);
  if (*(_QWORD *)(a1 + 472))
  {
    if (v13)
    {
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
      *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
      *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
      *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
      *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
      *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
      *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
      *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1CCA331A4(a1 + 304);
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
    *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
  memcpy((void *)(a1 + 304), (const void *)(a2 + 304), 0x120uLL);
LABEL_8:
  v14 = a3[28];
  v15 = (_BYTE *)(a1 + v14);
  v16 = (_BYTE *)(a2 + v14);
  v17 = (int *)type metadata accessor for FMIPPlaySoundMetadata();
  v18 = *((_QWORD *)v17 - 1);
  v19 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *v15 = *v16;
      v22 = v17[5];
      v23 = &v15[v22];
      v24 = &v16[v22];
      v25 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
      v26 = v17[6];
      v27 = &v15[v26];
      v28 = &v16[v26];
      *v27 = *v28;
      v27[1] = v28[1];
      v29 = v17[7];
      v30 = &v15[v29];
      v31 = &v16[v29];
      *v30 = *v31;
      v30[1] = v31[1];
      v32 = v17[8];
      v33 = &v15[v32];
      v34 = &v16[v32];
      *v33 = *v34;
      v33[1] = v34[1];
      v35 = v17[9];
      v36 = &v15[v35];
      v37 = &v16[v35];
      *v36 = *v37;
      v36[1] = v37[1];
      v38 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v18 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v15, 0, 1, v17);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v21)
  {
    sub_1CCA0BF30((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPPlaySoundMetadata);
LABEL_13:
    v39 = sub_1CCA14E90(&qword_1ED8A7460);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_14;
  }
  *v15 = *v16;
  v98 = v17[5];
  v99 = &v15[v98];
  v100 = &v16[v98];
  v101 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v101 - 8) + 24))(v99, v100, v101);
  v102 = v17[6];
  v103 = &v15[v102];
  v104 = &v16[v102];
  *v103 = *v104;
  v103[1] = v104[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v105 = v17[7];
  v106 = &v15[v105];
  v107 = &v16[v105];
  *v106 = *v107;
  v106[1] = v107[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v108 = v17[8];
  v109 = &v15[v108];
  v110 = &v16[v108];
  *v109 = *v110;
  v109[1] = v110[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v111 = v17[9];
  v112 = &v15[v111];
  v113 = &v16[v111];
  *v112 = *v113;
  v112[1] = v113[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_14:
  v40 = a3[29];
  v41 = a1 + v40;
  v42 = a2 + v40;
  v43 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  v46 = v45(v41, 1, v43);
  v47 = v45(v42, 1, v43);
  if (v46)
  {
    if (!v47)
    {
      *(_BYTE *)v41 = *(_BYTE *)v42;
      *(_BYTE *)(v41 + 1) = *(_BYTE *)(v42 + 1);
      *(_BYTE *)(v41 + 2) = *(_BYTE *)(v42 + 2);
      *(_BYTE *)(v41 + 3) = *(_BYTE *)(v42 + 3);
      *(_QWORD *)(v41 + 8) = *(_QWORD *)(v42 + 8);
      *(_QWORD *)(v41 + 16) = *(_QWORD *)(v42 + 16);
      *(_QWORD *)(v41 + 24) = *(_QWORD *)(v42 + 24);
      *(_QWORD *)(v41 + 32) = *(_QWORD *)(v42 + 32);
      *(_QWORD *)(v41 + 40) = *(_QWORD *)(v42 + 40);
      *(_QWORD *)(v41 + 48) = *(_QWORD *)(v42 + 48);
      *(_BYTE *)(v41 + 56) = *(_BYTE *)(v42 + 56);
      v48 = *(int *)(v43 + 48);
      v200 = v42 + v48;
      v203 = v41 + v48;
      v49 = sub_1CCB635B0();
      v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50(v203, v200, v49);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v47)
  {
    sub_1CCA0BF30(v41, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
LABEL_19:
    v51 = sub_1CCA14E90(&qword_1ED8A7AA0);
    memcpy((void *)v41, (const void *)v42, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_20;
  }
  *(_BYTE *)v41 = *(_BYTE *)v42;
  *(_BYTE *)(v41 + 1) = *(_BYTE *)(v42 + 1);
  *(_BYTE *)(v41 + 2) = *(_BYTE *)(v42 + 2);
  *(_BYTE *)(v41 + 3) = *(_BYTE *)(v42 + 3);
  *(_QWORD *)(v41 + 8) = *(_QWORD *)(v42 + 8);
  *(_QWORD *)(v41 + 16) = *(_QWORD *)(v42 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v41 + 24) = *(_QWORD *)(v42 + 24);
  *(_QWORD *)(v41 + 32) = *(_QWORD *)(v42 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v41 + 40) = *(_QWORD *)(v42 + 40);
  *(_QWORD *)(v41 + 48) = *(_QWORD *)(v42 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v41 + 56) = *(_BYTE *)(v42 + 56);
  v114 = *(int *)(v43 + 48);
  v115 = v41 + v114;
  v116 = v42 + v114;
  v117 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 24))(v115, v116, v117);
LABEL_20:
  v52 = a3[30];
  v53 = (_BYTE *)(a1 + v52);
  v54 = (_BYTE *)(a2 + v52);
  v55 = type metadata accessor for FMIPLockMetadata();
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48);
  v58 = v57(v53, 1, v55);
  v59 = v57(v54, 1, v55);
  if (v58)
  {
    if (!v59)
    {
      *v53 = *v54;
      v60 = *(int *)(v55 + 20);
      v61 = &v53[v60];
      v62 = &v54[v60];
      v63 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v59)
  {
    sub_1CCA0BF30((uint64_t)v53, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
LABEL_25:
    v64 = sub_1CCA14E90(&qword_1ED8A73B8);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_26;
  }
  *v53 = *v54;
  v118 = *(int *)(v55 + 20);
  v119 = &v53[v118];
  v120 = &v54[v118];
  v121 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v121 - 8) + 24))(v119, v120, v121);
LABEL_26:
  v65 = a3[31];
  v66 = (_BYTE *)(a1 + v65);
  v67 = (_BYTE *)(a2 + v65);
  v68 = (int *)type metadata accessor for FMIPEraseMetadata();
  v69 = *((_QWORD *)v68 - 1);
  v70 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v69 + 48);
  v71 = v70(v66, 1, v68);
  v72 = v70(v67, 1, v68);
  if (v71)
  {
    if (!v72)
    {
      *v66 = *v67;
      v73 = v68[5];
      v74 = &v66[v73];
      v75 = &v67[v73];
      v76 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v74, v75, v76);
      v77 = v68[6];
      v78 = &v66[v77];
      v79 = &v67[v77];
      *v78 = *v79;
      v78[1] = v79[1];
      v80 = v68[7];
      v81 = &v66[v80];
      v82 = &v67[v80];
      *v81 = *v82;
      v81[1] = v82[1];
      v66[v68[8]] = v67[v68[8]];
      v83 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v69 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v83(v66, 0, 1, v68);
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v72)
  {
    sub_1CCA0BF30((uint64_t)v66, (uint64_t (*)(_QWORD))type metadata accessor for FMIPEraseMetadata);
LABEL_31:
    v84 = sub_1CCA14E90(&qword_1ED8A73F8);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_32;
  }
  *v66 = *v67;
  v122 = v68[5];
  v123 = &v66[v122];
  v124 = &v67[v122];
  v125 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v125 - 8) + 24))(v123, v124, v125);
  v126 = v68[6];
  v127 = &v66[v126];
  v128 = &v67[v126];
  *v127 = *v128;
  v127[1] = v128[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v129 = v68[7];
  v130 = &v66[v129];
  v131 = &v67[v129];
  *v130 = *v131;
  v130[1] = v131[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v66[v68[8]] = v67[v68[8]];
LABEL_32:
  v85 = a3[32];
  v86 = (_QWORD *)(a1 + v85);
  v87 = (_QWORD *)(a2 + v85);
  v88 = type metadata accessor for FMIPItemGroup();
  v89 = *(_QWORD *)(v88 - 8);
  v90 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v89 + 48);
  v91 = v90(v86, 1, v88);
  v92 = v90(v87, 1, v88);
  if (!v91)
  {
    if (v92)
    {
      sub_1CCA0BF30((uint64_t)v86, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      goto LABEL_38;
    }
    v206 = a3;
    *v86 = *v87;
    v86[1] = v87[1];
    v86[2] = v87[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v86[3] = v87[3];
    v86[4] = v87[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v86[5] = v87[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v86[6] = v87[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v86[7] = v87[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v86[8] = v87[8];
    v86[9] = v87[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v204 = v88;
    v132 = *(int *)(v88 + 48);
    v133 = (_QWORD *)((char *)v86 + v132);
    v134 = (_QWORD *)((char *)v87 + v132);
    v135 = type metadata accessor for FMIPItemLostModeMetadata();
    v136 = *(_QWORD *)(v135 - 8);
    v137 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v136 + 48);
    v138 = v137(v133, 1, v135);
    v139 = v137(v134, 1, v135);
    if (v138)
    {
      if (!v139)
      {
        *v133 = *v134;
        v133[1] = v134[1];
        v133[2] = v134[2];
        v133[3] = v134[3];
        v140 = *(int *)(v135 + 24);
        __dsta = (char *)v134 + v140;
        v202 = (char *)v133 + v140;
        v141 = sub_1CCB635B0();
        v195 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v195(v202, __dsta, v141);
        v142 = *(int *)(v135 + 28);
        v143 = (_QWORD *)((char *)v133 + v142);
        v144 = (_QWORD *)((char *)v134 + v142);
        *v143 = *v144;
        v143[1] = v144[1];
        v145 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v136 + 56);
        swift_bridgeObjectRetain();
        v145(v133, 0, 1, v135);
LABEL_51:
        a3 = v206;
        *(_QWORD *)((char *)v86 + *(int *)(v204 + 52)) = *(_QWORD *)((char *)v87 + *(int *)(v204 + 52));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_52;
      }
    }
    else
    {
      if (!v139)
      {
        *v133 = *v134;
        v133[1] = v134[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v133[2] = v134[2];
        v133[3] = v134[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v185 = *(int *)(v135 + 24);
        v186 = (char *)v133 + v185;
        v187 = (char *)v134 + v185;
        v188 = sub_1CCB635B0();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v188 - 8) + 24))(v186, v187, v188);
        v189 = *(int *)(v135 + 28);
        v190 = (_QWORD *)((char *)v133 + v189);
        v191 = (_QWORD *)((char *)v134 + v189);
        *v190 = *v191;
        v190[1] = v191[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
      sub_1CCA0BF30((uint64_t)v133, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemLostModeMetadata);
    }
    v153 = sub_1CCA14E90(&qword_1ED8A8CD0);
    memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
    goto LABEL_51;
  }
  if (v92)
  {
LABEL_38:
    v97 = sub_1CCA14E90(&qword_1ED8A8C30);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    goto LABEL_52;
  }
  v201 = v89;
  v205 = a3;
  *v86 = *v87;
  v86[1] = v87[1];
  v86[2] = v87[2];
  v86[3] = v87[3];
  v86[4] = v87[4];
  v86[5] = v87[5];
  v86[6] = v87[6];
  v86[7] = v87[7];
  v86[8] = v87[8];
  v86[9] = v87[9];
  v93 = *(int *)(v88 + 48);
  __dst = (_QWORD *)((char *)v86 + v93);
  v94 = (_QWORD *)((char *)v87 + v93);
  v95 = type metadata accessor for FMIPItemLostModeMetadata();
  v192 = *(_QWORD *)(v95 - 8);
  v193 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v192 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v193(v94, 1, v95))
  {
    v96 = sub_1CCA14E90(&qword_1ED8A8CD0);
    memcpy(__dst, v94, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
  }
  else
  {
    *__dst = *v94;
    __dst[1] = v94[1];
    __dst[2] = v94[2];
    __dst[3] = v94[3];
    v146 = *(int *)(v95 + 24);
    v196 = (char *)v94 + v146;
    v197 = (char *)__dst + v146;
    v147 = sub_1CCB635B0();
    v194 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v194(v197, v196, v147);
    v148 = *(int *)(v95 + 28);
    v149 = (_QWORD *)((char *)__dst + v148);
    v150 = (_QWORD *)((char *)v94 + v148);
    *v149 = *v150;
    v149[1] = v150[1];
    v151 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v192 + 56);
    swift_bridgeObjectRetain();
    v151(__dst, 0, 1, v95);
  }
  a3 = v205;
  *(_QWORD *)((char *)v86 + *(int *)(v88 + 52)) = *(_QWORD *)((char *)v87 + *(int *)(v88 + 52));
  v152 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v201 + 56);
  swift_bridgeObjectRetain();
  v152(v86, 0, 1, v88);
LABEL_52:
  *(_BYTE *)(a1 + a3[33]) = *(_BYTE *)(a2 + a3[33]);
  *(_BYTE *)(a1 + a3[34]) = *(_BYTE *)(a2 + a3[34]);
  *(_BYTE *)(a1 + a3[35]) = *(_BYTE *)(a2 + a3[35]);
  v154 = a3[36];
  v155 = (_QWORD *)(a1 + v154);
  v156 = (_QWORD *)(a2 + v154);
  *v155 = *v156;
  v155[1] = v156[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[37]) = *(_QWORD *)(a2 + a3[37]);
  v157 = a3[38];
  v158 = (void *)(a1 + v157);
  v159 = (void *)(a2 + v157);
  v160 = sub_1CCB635B0();
  v161 = *(_QWORD *)(v160 - 8);
  v162 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v161 + 48);
  v163 = v162(v158, 1, v160);
  v164 = v162(v159, 1, v160);
  if (v163)
  {
    if (!v164)
    {
      (*(void (**)(void *, void *, uint64_t))(v161 + 16))(v158, v159, v160);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v158, 0, 1, v160);
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v164)
  {
    (*(void (**)(void *, uint64_t))(v161 + 8))(v158, v160);
LABEL_57:
    v165 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v158, v159, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
    goto LABEL_58;
  }
  (*(void (**)(void *, void *, uint64_t))(v161 + 24))(v158, v159, v160);
LABEL_58:
  v166 = a3[39];
  v167 = (void *)(a1 + v166);
  v168 = (void *)(a2 + v166);
  v169 = v162((void *)(a1 + v166), 1, v160);
  v170 = v162(v168, 1, v160);
  if (v169)
  {
    if (!v170)
    {
      (*(void (**)(void *, void *, uint64_t))(v161 + 16))(v167, v168, v160);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v167, 0, 1, v160);
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (v170)
  {
    (*(void (**)(void *, uint64_t))(v161 + 8))(v167, v160);
LABEL_63:
    v171 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v167, v168, *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64));
    goto LABEL_64;
  }
  (*(void (**)(void *, void *, uint64_t))(v161 + 24))(v167, v168, v160);
LABEL_64:
  v172 = a3[40];
  v173 = (void *)(a1 + v172);
  v174 = (void *)(a2 + v172);
  v175 = v162((void *)(a1 + v172), 1, v160);
  v176 = v162(v174, 1, v160);
  if (v175)
  {
    if (!v176)
    {
      (*(void (**)(void *, void *, uint64_t))(v161 + 16))(v173, v174, v160);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v173, 0, 1, v160);
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  if (v176)
  {
    (*(void (**)(void *, uint64_t))(v161 + 8))(v173, v160);
LABEL_69:
    v177 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v173, v174, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
    goto LABEL_70;
  }
  (*(void (**)(void *, void *, uint64_t))(v161 + 24))(v173, v174, v160);
LABEL_70:
  v178 = a3[41];
  v179 = (void *)(a1 + v178);
  v180 = (void *)(a2 + v178);
  v181 = v162((void *)(a1 + v178), 1, v160);
  v182 = v162(v180, 1, v160);
  if (!v181)
  {
    if (!v182)
    {
      (*(void (**)(void *, void *, uint64_t))(v161 + 24))(v179, v180, v160);
      goto LABEL_76;
    }
    (*(void (**)(void *, uint64_t))(v161 + 8))(v179, v160);
    goto LABEL_75;
  }
  if (v182)
  {
LABEL_75:
    v183 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
    goto LABEL_76;
  }
  (*(void (**)(void *, void *, uint64_t))(v161 + 16))(v179, v180, v160);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v179, 0, 1, v160);
LABEL_76:
  *(_BYTE *)(a1 + a3[42]) = *(_BYTE *)(a2 + a3[42]);
  *(_BYTE *)(a1 + a3[43]) = *(_BYTE *)(a2 + a3[43]);
  *(_BYTE *)(a1 + a3[44]) = *(_BYTE *)(a2 + a3[44]);
  return a1;
}

uint64_t initializeWithTake for FMIPDevice(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(const void *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const void *v82;
  uint64_t v83;
  uint64_t v84;
  char *v86;
  char *v87;
  uint64_t v88;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  v8 = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = v8;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  memcpy((void *)(a1 + 304), (const void *)(a2 + 304), 0x120uLL);
  v9 = a3[28];
  v10 = (_BYTE *)(a1 + v9);
  v11 = (_BYTE *)(a2 + v9);
  v12 = (int *)type metadata accessor for FMIPPlaySoundMetadata();
  v13 = *((_QWORD *)v12 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_1CCA14E90(&qword_1ED8A7460);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    *v10 = *v11;
    v15 = v12[5];
    v16 = &v10[v15];
    v17 = &v11[v15];
    v18 = sub_1CCB635B0();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
    *(_OWORD *)&v10[v12[6]] = *(_OWORD *)&v11[v12[6]];
    *(_OWORD *)&v10[v12[7]] = *(_OWORD *)&v11[v12[7]];
    *(_OWORD *)&v10[v12[8]] = *(_OWORD *)&v11[v12[8]];
    *(_OWORD *)&v10[v12[9]] = *(_OWORD *)&v11[v12[9]];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  }
  v19 = a3[29];
  v20 = (_DWORD *)(a1 + v19);
  v21 = (_DWORD *)(a2 + v19);
  v22 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = sub_1CCA14E90(&qword_1ED8A7AA0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    *v20 = *v21;
    *(_OWORD *)(v20 + 2) = *(_OWORD *)(v21 + 2);
    *(_OWORD *)(v20 + 6) = *(_OWORD *)(v21 + 6);
    *(_OWORD *)(v20 + 10) = *(_OWORD *)(v21 + 10);
    *((_BYTE *)v20 + 56) = *((_BYTE *)v21 + 56);
    v25 = *(int *)(v22 + 48);
    v26 = (char *)v20 + v25;
    v27 = (char *)v21 + v25;
    v28 = sub_1CCB635B0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v29 = a3[30];
  v30 = (_BYTE *)(a1 + v29);
  v31 = (_BYTE *)(a2 + v29);
  v32 = type metadata accessor for FMIPLockMetadata();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_1CCA14E90(&qword_1ED8A73B8);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    *v30 = *v31;
    v35 = *(int *)(v32 + 20);
    v36 = &v30[v35];
    v37 = &v31[v35];
    v38 = sub_1CCB635B0();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  v39 = a3[31];
  v40 = (_BYTE *)(a1 + v39);
  v41 = (_BYTE *)(a2 + v39);
  v42 = (int *)type metadata accessor for FMIPEraseMetadata();
  v43 = *((_QWORD *)v42 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v43 + 48))(v41, 1, v42))
  {
    v44 = sub_1CCA14E90(&qword_1ED8A73F8);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    *v40 = *v41;
    v45 = v42[5];
    v46 = &v40[v45];
    v47 = &v41[v45];
    v48 = sub_1CCB635B0();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v48 - 8) + 32))(v46, v47, v48);
    *(_OWORD *)&v40[v42[6]] = *(_OWORD *)&v41[v42[6]];
    *(_OWORD *)&v40[v42[7]] = *(_OWORD *)&v41[v42[7]];
    v40[v42[8]] = v41[v42[8]];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v43 + 56))(v40, 0, 1, v42);
  }
  v49 = a3[32];
  v50 = (_QWORD *)(a1 + v49);
  v51 = (_QWORD *)(a2 + v49);
  v52 = type metadata accessor for FMIPItemGroup();
  v53 = *(_QWORD *)(v52 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
  {
    v54 = sub_1CCA14E90(&qword_1ED8A8C30);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    *v50 = *v51;
    *(_OWORD *)(v50 + 1) = *(_OWORD *)(v51 + 1);
    *(_OWORD *)(v50 + 3) = *(_OWORD *)(v51 + 3);
    *(_OWORD *)(v50 + 5) = *(_OWORD *)(v51 + 5);
    *(_OWORD *)(v50 + 7) = *(_OWORD *)(v51 + 7);
    v50[9] = v51[9];
    v55 = *(int *)(v52 + 48);
    v56 = (_OWORD *)((char *)v50 + v55);
    v57 = (_OWORD *)((char *)v51 + v55);
    v58 = type metadata accessor for FMIPItemLostModeMetadata();
    v88 = *(_QWORD *)(v58 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v88 + 48))(v57, 1, v58))
    {
      v59 = sub_1CCA14E90(&qword_1ED8A8CD0);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      v60 = v57[1];
      *v56 = *v57;
      v56[1] = v60;
      v61 = *(int *)(v58 + 24);
      v86 = (char *)v57 + v61;
      v87 = (char *)v56 + v61;
      v62 = sub_1CCB635B0();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v87, v86, v62);
      *(_OWORD *)((char *)v56 + *(int *)(v58 + 28)) = *(_OWORD *)((char *)v57 + *(int *)(v58 + 28));
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v56, 0, 1, v58);
    }
    *(_QWORD *)((char *)v50 + *(int *)(v52 + 52)) = *(_QWORD *)((char *)v51 + *(int *)(v52 + 52));
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
  }
  v63 = a3[34];
  *(_BYTE *)(a1 + a3[33]) = *(_BYTE *)(a2 + a3[33]);
  *(_BYTE *)(a1 + v63) = *(_BYTE *)(a2 + v63);
  v64 = a3[36];
  *(_BYTE *)(a1 + a3[35]) = *(_BYTE *)(a2 + a3[35]);
  *(_OWORD *)(a1 + v64) = *(_OWORD *)(a2 + v64);
  v65 = a3[38];
  *(_QWORD *)(a1 + a3[37]) = *(_QWORD *)(a2 + a3[37]);
  v66 = (void *)(a1 + v65);
  v67 = (const void *)(a2 + v65);
  v68 = sub_1CCB635B0();
  v69 = *(_QWORD *)(v68 - 8);
  v70 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v69 + 48);
  if (v70(v67, 1, v68))
  {
    v71 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v69 + 32))(v66, v67, v68);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
  }
  v72 = a3[39];
  v73 = (void *)(a1 + v72);
  v74 = (const void *)(a2 + v72);
  if (v70((const void *)(a2 + v72), 1, v68))
  {
    v75 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v69 + 32))(v73, v74, v68);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v73, 0, 1, v68);
  }
  v76 = a3[40];
  v77 = (void *)(a1 + v76);
  v78 = (const void *)(a2 + v76);
  if (v70((const void *)(a2 + v76), 1, v68))
  {
    v79 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v69 + 32))(v77, v78, v68);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v77, 0, 1, v68);
  }
  v80 = a3[41];
  v81 = (void *)(a1 + v80);
  v82 = (const void *)(a2 + v80);
  if (v70((const void *)(a2 + v80), 1, v68))
  {
    v83 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v69 + 32))(v81, v82, v68);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v81, 0, 1, v68);
  }
  v84 = a3[43];
  *(_BYTE *)(a1 + a3[42]) = *(_BYTE *)(a2 + a3[42]);
  *(_BYTE *)(a1 + v84) = *(_BYTE *)(a2 + v84);
  *(_BYTE *)(a1 + a3[44]) = *(_BYTE *)(a2 + a3[44]);
  return a1;
}

uint64_t assignWithTake for FMIPDevice(uint64_t a1, uint64_t a2, int *a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  int *v37;
  uint64_t v38;
  uint64_t (*v39)(_BYTE *, uint64_t, int *);
  int v40;
  int v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t);
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(_BYTE *, uint64_t, uint64_t);
  int v66;
  int v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  int *v76;
  uint64_t v77;
  uint64_t (*v78)(_BYTE *, uint64_t, int *);
  int v79;
  int v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t);
  int v92;
  int v93;
  uint64_t v94;
  _OWORD *v95;
  _OWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _OWORD *v153;
  uint64_t v154;
  uint64_t (*v155)(uint64_t, uint64_t, uint64_t);
  int v156;
  size_t v157;
  void *v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t (*v187)(void *, uint64_t, uint64_t);
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  void *v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  void *v205;
  int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  char *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  char *v216;
  void *__src;

  v6 = (_BYTE *)(a2 + 256);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v15;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v16;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v17;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  v18 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v19;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_BYTE *)(a1 + 257) = v6[1];
  *(_BYTE *)(a1 + 258) = v6[2];
  *(_BYTE *)(a1 + 259) = *(_BYTE *)(a2 + 259);
  v20 = *(void **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);

  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = v6[24];
  *(_BYTE *)(a1 + 281) = v6[25];
  *(_BYTE *)(a1 + 282) = v6[26];
  *(_BYTE *)(a1 + 283) = *(_BYTE *)(a2 + 283);
  v21 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);

  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  if (*(_QWORD *)(a1 + 472))
  {
    if (*(_QWORD *)(a2 + 472))
    {
      v22 = *(_QWORD *)(a2 + 312);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 312) = v22;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(a2 + 336);
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_QWORD *)(a1 + 336) = v23;
      swift_bridgeObjectRelease();
      v24 = *(_QWORD *)(a2 + 352);
      *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
      *(_QWORD *)(a1 + 352) = v24;
      swift_bridgeObjectRelease();
      v25 = *(_QWORD *)(a2 + 368);
      *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 368) = v25;
      swift_bridgeObjectRelease();
      v26 = *(_QWORD *)(a2 + 384);
      *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 384) = v26;
      swift_bridgeObjectRelease();
      v27 = *(_QWORD *)(a2 + 400);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      *(_QWORD *)(a1 + 400) = v27;
      swift_bridgeObjectRelease();
      v28 = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
      *(_QWORD *)(a1 + 416) = v28;
      swift_bridgeObjectRelease();
      v29 = *(_QWORD *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
      *(_QWORD *)(a1 + 432) = v29;
      swift_bridgeObjectRelease();
      v30 = *(_QWORD *)(a2 + 448);
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *(_QWORD *)(a1 + 448) = v30;
      swift_bridgeObjectRelease();
      v31 = *(_QWORD *)(a2 + 464);
      *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
      *(_QWORD *)(a1 + 464) = v31;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)(a2 + 488);
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
      *(_QWORD *)(a1 + 488) = v32;
      swift_bridgeObjectRelease();
      v33 = *(_QWORD *)(a2 + 504);
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
      *(_QWORD *)(a1 + 504) = v33;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
      *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
      *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1CCA331A4(a1 + 304);
  }
  memcpy((void *)(a1 + 304), (const void *)(a2 + 304), 0x120uLL);
LABEL_6:
  v34 = a3[28];
  v35 = (_BYTE *)(a1 + v34);
  v36 = (_BYTE *)(a2 + v34);
  v37 = (int *)type metadata accessor for FMIPPlaySoundMetadata();
  v38 = *((_QWORD *)v37 - 1);
  v39 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      *v35 = *v36;
      v42 = v37[5];
      v43 = &v35[v42];
      v44 = &v36[v42];
      v45 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
      *(_OWORD *)&v35[v37[6]] = *(_OWORD *)&v36[v37[6]];
      *(_OWORD *)&v35[v37[7]] = *(_OWORD *)&v36[v37[7]];
      *(_OWORD *)&v35[v37[8]] = *(_OWORD *)&v36[v37[8]];
      *(_OWORD *)&v35[v37[9]] = *(_OWORD *)&v36[v37[9]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v38 + 56))(v35, 0, 1, v37);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v41)
  {
    sub_1CCA0BF30((uint64_t)v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPPlaySoundMetadata);
LABEL_11:
    v46 = sub_1CCA14E90(&qword_1ED8A7460);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_12;
  }
  *v35 = *v36;
  v100 = v37[5];
  v101 = &v35[v100];
  v102 = &v36[v100];
  v103 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v103 - 8) + 40))(v101, v102, v103);
  v104 = v37[6];
  v105 = &v35[v104];
  v106 = (uint64_t *)&v36[v104];
  v108 = *v106;
  v107 = v106[1];
  *v105 = v108;
  v105[1] = v107;
  swift_bridgeObjectRelease();
  v109 = v37[7];
  v110 = &v35[v109];
  v111 = (uint64_t *)&v36[v109];
  v113 = *v111;
  v112 = v111[1];
  *v110 = v113;
  v110[1] = v112;
  swift_bridgeObjectRelease();
  v114 = v37[8];
  v115 = &v35[v114];
  v116 = (uint64_t *)&v36[v114];
  v118 = *v116;
  v117 = v116[1];
  *v115 = v118;
  v115[1] = v117;
  swift_bridgeObjectRelease();
  v119 = v37[9];
  v120 = &v35[v119];
  v121 = (uint64_t *)&v36[v119];
  v123 = *v121;
  v122 = v121[1];
  *v120 = v123;
  v120[1] = v122;
  swift_bridgeObjectRelease();
LABEL_12:
  v47 = a3[29];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
  v53 = v52(v48, 1, v50);
  v54 = v52(v49, 1, v50);
  if (v53)
  {
    if (!v54)
    {
      *(_DWORD *)v48 = *(_DWORD *)v49;
      *(_OWORD *)(v48 + 8) = *(_OWORD *)(v49 + 8);
      *(_OWORD *)(v48 + 24) = *(_OWORD *)(v49 + 24);
      *(_OWORD *)(v48 + 40) = *(_OWORD *)(v49 + 40);
      *(_BYTE *)(v48 + 56) = *(_BYTE *)(v49 + 56);
      v55 = *(int *)(v50 + 48);
      v56 = v48 + v55;
      v57 = v49 + v55;
      v58 = sub_1CCB635B0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v56, v57, v58);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v54)
  {
    sub_1CCA0BF30(v48, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
LABEL_17:
    v59 = sub_1CCA14E90(&qword_1ED8A7AA0);
    memcpy((void *)v48, (const void *)v49, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_18;
  }
  *(_BYTE *)v48 = *(_BYTE *)v49;
  *(_BYTE *)(v48 + 1) = *(_BYTE *)(v49 + 1);
  *(_BYTE *)(v48 + 2) = *(_BYTE *)(v49 + 2);
  *(_BYTE *)(v48 + 3) = *(_BYTE *)(v49 + 3);
  v124 = *(_QWORD *)(v49 + 16);
  *(_QWORD *)(v48 + 8) = *(_QWORD *)(v49 + 8);
  *(_QWORD *)(v48 + 16) = v124;
  swift_bridgeObjectRelease();
  v125 = *(_QWORD *)(v49 + 32);
  *(_QWORD *)(v48 + 24) = *(_QWORD *)(v49 + 24);
  *(_QWORD *)(v48 + 32) = v125;
  swift_bridgeObjectRelease();
  v126 = *(_QWORD *)(v49 + 48);
  *(_QWORD *)(v48 + 40) = *(_QWORD *)(v49 + 40);
  *(_QWORD *)(v48 + 48) = v126;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v48 + 56) = *(_BYTE *)(v49 + 56);
  v127 = *(int *)(v50 + 48);
  v128 = v48 + v127;
  v129 = v49 + v127;
  v130 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 40))(v128, v129, v130);
LABEL_18:
  v60 = a3[30];
  v61 = (_BYTE *)(a1 + v60);
  v62 = (_BYTE *)(a2 + v60);
  v63 = type metadata accessor for FMIPLockMetadata();
  v64 = *(_QWORD *)(v63 - 8);
  v65 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v64 + 48);
  v66 = v65(v61, 1, v63);
  v67 = v65(v62, 1, v63);
  if (v66)
  {
    if (!v67)
    {
      *v61 = *v62;
      v68 = *(int *)(v63 + 20);
      v69 = &v61[v68];
      v70 = &v62[v68];
      v71 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(v69, v70, v71);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v67)
  {
    sub_1CCA0BF30((uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for FMIPLockMetadata);
LABEL_23:
    v72 = sub_1CCA14E90(&qword_1ED8A73B8);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_24;
  }
  *v61 = *v62;
  v131 = *(int *)(v63 + 20);
  v132 = &v61[v131];
  v133 = &v62[v131];
  v134 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v134 - 8) + 40))(v132, v133, v134);
LABEL_24:
  v73 = a3[31];
  v74 = (_BYTE *)(a1 + v73);
  v75 = (_BYTE *)(a2 + v73);
  v76 = (int *)type metadata accessor for FMIPEraseMetadata();
  v77 = *((_QWORD *)v76 - 1);
  v78 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v77 + 48);
  v79 = v78(v74, 1, v76);
  v80 = v78(v75, 1, v76);
  if (v79)
  {
    if (!v80)
    {
      *v74 = *v75;
      v81 = v76[5];
      v82 = &v74[v81];
      v83 = &v75[v81];
      v84 = sub_1CCB635B0();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v84 - 8) + 32))(v82, v83, v84);
      *(_OWORD *)&v74[v76[6]] = *(_OWORD *)&v75[v76[6]];
      *(_OWORD *)&v74[v76[7]] = *(_OWORD *)&v75[v76[7]];
      v74[v76[8]] = v75[v76[8]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v77 + 56))(v74, 0, 1, v76);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v80)
  {
    sub_1CCA0BF30((uint64_t)v74, (uint64_t (*)(_QWORD))type metadata accessor for FMIPEraseMetadata);
LABEL_29:
    v85 = sub_1CCA14E90(&qword_1ED8A73F8);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    goto LABEL_30;
  }
  *v74 = *v75;
  v135 = v76[5];
  v136 = &v74[v135];
  v137 = &v75[v135];
  v138 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v138 - 8) + 40))(v136, v137, v138);
  v139 = v76[6];
  v140 = &v74[v139];
  v141 = (uint64_t *)&v75[v139];
  v143 = *v141;
  v142 = v141[1];
  *v140 = v143;
  v140[1] = v142;
  swift_bridgeObjectRelease();
  v144 = v76[7];
  v145 = &v74[v144];
  v146 = (uint64_t *)&v75[v144];
  v148 = *v146;
  v147 = v146[1];
  *v145 = v148;
  v145[1] = v147;
  swift_bridgeObjectRelease();
  v74[v76[8]] = v75[v76[8]];
LABEL_30:
  v86 = a3[32];
  v87 = a1 + v86;
  v88 = a2 + v86;
  v89 = type metadata accessor for FMIPItemGroup();
  v90 = *(_QWORD *)(v89 - 8);
  v91 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 48);
  v92 = v91(v87, 1, v89);
  v93 = v91(v88, 1, v89);
  if (!v92)
  {
    if (v93)
    {
      sub_1CCA0BF30(v87, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
      goto LABEL_36;
    }
    *(_OWORD *)v87 = *(_OWORD *)v88;
    *(_QWORD *)(v87 + 16) = *(_QWORD *)(v88 + 16);
    swift_bridgeObjectRelease();
    v149 = *(_QWORD *)(v88 + 32);
    *(_QWORD *)(v87 + 24) = *(_QWORD *)(v88 + 24);
    *(_QWORD *)(v87 + 32) = v149;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v87 + 40) = *(_QWORD *)(v88 + 40);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v87 + 48) = *(_QWORD *)(v88 + 48);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v87 + 56) = *(_QWORD *)(v88 + 56);
    swift_bridgeObjectRelease();
    v150 = *(_QWORD *)(v88 + 72);
    *(_QWORD *)(v87 + 64) = *(_QWORD *)(v88 + 64);
    *(_QWORD *)(v87 + 72) = v150;
    swift_bridgeObjectRelease();
    v151 = *(int *)(v89 + 48);
    v152 = v87 + v151;
    v153 = (_OWORD *)(v88 + v151);
    v154 = type metadata accessor for FMIPItemLostModeMetadata();
    v212 = *(_QWORD *)(v154 - 8);
    v215 = v152;
    v155 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v212 + 48);
    LODWORD(v152) = v155(v152, 1, v154);
    v156 = v155((uint64_t)v153, 1, v154);
    if ((_DWORD)v152)
    {
      if (!v156)
      {
        v162 = v153[1];
        *(_OWORD *)v215 = *v153;
        *(_OWORD *)(v215 + 16) = v162;
        v163 = *(int *)(v154 + 24);
        v164 = v215 + v163;
        v211 = (char *)v153 + v163;
        v165 = sub_1CCB635B0();
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v165 - 8) + 32))(v164, v211, v165);
        *(_OWORD *)(v215 + *(int *)(v154 + 28)) = *(_OWORD *)((char *)v153 + *(int *)(v154 + 28));
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v212 + 56))(v215, 0, 1, v154);
        goto LABEL_51;
      }
      v157 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1ED8A8CD0) - 8) + 64);
      v158 = (void *)v215;
    }
    else
    {
      if (!v156)
      {
        v166 = *((_QWORD *)v153 + 1);
        *(_QWORD *)v215 = *(_QWORD *)v153;
        *(_QWORD *)(v215 + 8) = v166;
        swift_bridgeObjectRelease();
        v167 = *((_QWORD *)v153 + 3);
        *(_QWORD *)(v215 + 16) = *((_QWORD *)v153 + 2);
        *(_QWORD *)(v215 + 24) = v167;
        swift_bridgeObjectRelease();
        v168 = *(int *)(v154 + 24);
        v169 = v215 + v168;
        v214 = (char *)v153 + v168;
        v170 = sub_1CCB635B0();
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 40))(v169, v214, v170);
        v171 = *(int *)(v154 + 28);
        v172 = (_QWORD *)(v215 + v171);
        v173 = (uint64_t *)((char *)v153 + v171);
        v175 = *v173;
        v174 = v173[1];
        *v172 = v175;
        v172[1] = v174;
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
      sub_1CCA0BF30(v215, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemLostModeMetadata);
      v157 = *(_QWORD *)(*(_QWORD *)(sub_1CCA14E90(&qword_1ED8A8CD0) - 8) + 64);
      v158 = (void *)v215;
    }
    memcpy(v158, v153, v157);
LABEL_51:
    *(_QWORD *)(v87 + *(int *)(v89 + 52)) = *(_QWORD *)(v88 + *(int *)(v89 + 52));
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  if (v93)
  {
LABEL_36:
    v99 = sub_1CCA14E90(&qword_1ED8A8C30);
    memcpy((void *)v87, (const void *)v88, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    goto LABEL_52;
  }
  *(_QWORD *)v87 = *(_QWORD *)v88;
  *(_OWORD *)(v87 + 8) = *(_OWORD *)(v88 + 8);
  *(_OWORD *)(v87 + 24) = *(_OWORD *)(v88 + 24);
  *(_OWORD *)(v87 + 40) = *(_OWORD *)(v88 + 40);
  *(_OWORD *)(v87 + 56) = *(_OWORD *)(v88 + 56);
  *(_QWORD *)(v87 + 72) = *(_QWORD *)(v88 + 72);
  v94 = *(int *)(v89 + 48);
  v95 = (_OWORD *)(v87 + v94);
  v96 = (_OWORD *)(v88 + v94);
  v97 = type metadata accessor for FMIPItemLostModeMetadata();
  __src = *(void **)(v97 - 8);
  if ((*((unsigned int (**)(_OWORD *, uint64_t, uint64_t))__src + 6))(v96, 1, v97))
  {
    v98 = sub_1CCA14E90(&qword_1ED8A8CD0);
    memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
  }
  else
  {
    v159 = v96[1];
    *v95 = *v96;
    v95[1] = v159;
    v160 = *(int *)(v97 + 24);
    v213 = (char *)v96 + v160;
    v216 = (char *)v95 + v160;
    v161 = sub_1CCB635B0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 32))(v216, v213, v161);
    *(_OWORD *)((char *)v95 + *(int *)(v97 + 28)) = *(_OWORD *)((char *)v96 + *(int *)(v97 + 28));
    (*((void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))__src + 7))(v95, 0, 1, v97);
  }
  *(_QWORD *)(v87 + *(int *)(v89 + 52)) = *(_QWORD *)(v88 + *(int *)(v89 + 52));
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
LABEL_52:
  v176 = a3[34];
  *(_BYTE *)(a1 + a3[33]) = *(_BYTE *)(a2 + a3[33]);
  *(_BYTE *)(a1 + v176) = *(_BYTE *)(a2 + v176);
  v177 = a3[36];
  *(_BYTE *)(a1 + a3[35]) = *(_BYTE *)(a2 + a3[35]);
  v178 = (_QWORD *)(a1 + v177);
  v179 = (uint64_t *)(a2 + v177);
  v181 = *v179;
  v180 = v179[1];
  *v178 = v181;
  v178[1] = v180;
  swift_bridgeObjectRelease();
  v182 = a3[38];
  *(_QWORD *)(a1 + a3[37]) = *(_QWORD *)(a2 + a3[37]);
  v183 = (void *)(a1 + v182);
  v184 = (void *)(a2 + v182);
  v185 = sub_1CCB635B0();
  v186 = *(_QWORD *)(v185 - 8);
  v187 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v186 + 48);
  v188 = v187(v183, 1, v185);
  v189 = v187(v184, 1, v185);
  if (v188)
  {
    if (!v189)
    {
      (*(void (**)(void *, void *, uint64_t))(v186 + 32))(v183, v184, v185);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v186 + 56))(v183, 0, 1, v185);
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v189)
  {
    (*(void (**)(void *, uint64_t))(v186 + 8))(v183, v185);
LABEL_57:
    v190 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
    goto LABEL_58;
  }
  (*(void (**)(void *, void *, uint64_t))(v186 + 40))(v183, v184, v185);
LABEL_58:
  v191 = a3[39];
  v192 = (void *)(a1 + v191);
  v193 = (void *)(a2 + v191);
  v194 = v187((void *)(a1 + v191), 1, v185);
  v195 = v187(v193, 1, v185);
  if (v194)
  {
    if (!v195)
    {
      (*(void (**)(void *, void *, uint64_t))(v186 + 32))(v192, v193, v185);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v186 + 56))(v192, 0, 1, v185);
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (v195)
  {
    (*(void (**)(void *, uint64_t))(v186 + 8))(v192, v185);
LABEL_63:
    v196 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v192, v193, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
    goto LABEL_64;
  }
  (*(void (**)(void *, void *, uint64_t))(v186 + 40))(v192, v193, v185);
LABEL_64:
  v197 = a3[40];
  v198 = (void *)(a1 + v197);
  v199 = (void *)(a2 + v197);
  v200 = v187((void *)(a1 + v197), 1, v185);
  v201 = v187(v199, 1, v185);
  if (v200)
  {
    if (!v201)
    {
      (*(void (**)(void *, void *, uint64_t))(v186 + 32))(v198, v199, v185);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v186 + 56))(v198, 0, 1, v185);
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  if (v201)
  {
    (*(void (**)(void *, uint64_t))(v186 + 8))(v198, v185);
LABEL_69:
    v202 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v198, v199, *(_QWORD *)(*(_QWORD *)(v202 - 8) + 64));
    goto LABEL_70;
  }
  (*(void (**)(void *, void *, uint64_t))(v186 + 40))(v198, v199, v185);
LABEL_70:
  v203 = a3[41];
  v204 = (void *)(a1 + v203);
  v205 = (void *)(a2 + v203);
  v206 = v187((void *)(a1 + v203), 1, v185);
  v207 = v187(v205, 1, v185);
  if (!v206)
  {
    if (!v207)
    {
      (*(void (**)(void *, void *, uint64_t))(v186 + 40))(v204, v205, v185);
      goto LABEL_76;
    }
    (*(void (**)(void *, uint64_t))(v186 + 8))(v204, v185);
    goto LABEL_75;
  }
  if (v207)
  {
LABEL_75:
    v208 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v204, v205, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
    goto LABEL_76;
  }
  (*(void (**)(void *, void *, uint64_t))(v186 + 32))(v204, v205, v185);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v186 + 56))(v204, 0, 1, v185);
LABEL_76:
  v209 = a3[43];
  *(_BYTE *)(a1 + a3[42]) = *(_BYTE *)(a2 + a3[42]);
  *(_BYTE *)(a1 + v209) = *(_BYTE *)(a2 + v209);
  *(_BYTE *)(a1 + a3[44]) = *(_BYTE *)(a2 + a3[44]);
  return a1;
}

uint64_t sub_1CCB28004(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1CCA14E90(&qword_1ED8A7460);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[28];
    }
    else
    {
      v12 = sub_1CCA14E90(&qword_1ED8A7AA0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[29];
      }
      else
      {
        v13 = sub_1CCA14E90(&qword_1ED8A73B8);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[30];
        }
        else
        {
          v14 = sub_1CCA14E90(&qword_1ED8A73F8);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
          {
            v10 = v14;
            v11 = a3[31];
          }
          else
          {
            v15 = sub_1CCA14E90(&qword_1ED8A8C30);
            v9 = *(_QWORD *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
            {
              v10 = v15;
              v11 = a3[32];
            }
            else
            {
              v10 = sub_1CCA14E90(&qword_1ED8A7130);
              v9 = *(_QWORD *)(v10 - 8);
              v11 = a3[38];
            }
          }
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1CCB2814C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_1CCA14E90(&qword_1ED8A7460);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[28];
    }
    else
    {
      v12 = sub_1CCA14E90(&qword_1ED8A7AA0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[29];
      }
      else
      {
        v13 = sub_1CCA14E90(&qword_1ED8A73B8);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[30];
        }
        else
        {
          v14 = sub_1CCA14E90(&qword_1ED8A73F8);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == a3)
          {
            v10 = v14;
            v11 = a4[31];
          }
          else
          {
            v15 = sub_1CCA14E90(&qword_1ED8A8C30);
            v9 = *(_QWORD *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == a3)
            {
              v10 = v15;
              v11 = a4[32];
            }
            else
            {
              v10 = sub_1CCA14E90(&qword_1ED8A7130);
              v9 = *(_QWORD *)(v10 - 8);
              v11 = a4[38];
            }
          }
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

unint64_t sub_1CCB28294()
{
  unint64_t result;

  result = qword_1EF9E5478;
  if (!qword_1EF9E5478)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72DCC, &type metadata for FMIPBeaconType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E5478);
  }
  return result;
}

unint64_t sub_1CCB282DC()
{
  unint64_t result;

  result = qword_1EF9E5480;
  if (!qword_1EF9E5480)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB72EBC, &type metadata for FMIPDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E5480);
  }
  return result;
}

uint64_t sub_1CCB28320()
{
  unint64_t v0;

  v0 = sub_1CCB642C4();
  swift_bridgeObjectRelease();
  if (v0 >= 0x3A)
    return 58;
  else
    return v0;
}

uint64_t sub_1CCB28374()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  return sub_1CCB64384();
}

uint64_t sub_1CCB283CC()
{
  return sub_1CCB639F4();
}

uint64_t sub_1CCB283EC()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  return sub_1CCB64384();
}

uint64_t sub_1CCB28440@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1CCB28490(_QWORD *a1@<X8>)
{
  *a1 = 0x49737265626D656DLL;
  a1[1] = 0xEB000000006F666ELL;
}

uint64_t sub_1CCB284B4@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1CCB28508()
{
  sub_1CCA21030();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB28530()
{
  sub_1CCA21030();
  return sub_1CCB643E4();
}

unint64_t sub_1CCB2855C()
{
  unint64_t result;

  result = qword_1EF9E5510;
  if (!qword_1EF9E5510)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB733CC, &type metadata for FMIPUserInfoResponseFragment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E5510);
  }
  return result;
}

uint64_t FMIPShareItemAction.__allocating_init(item:handles:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8FMIPCore19FMIPShareItemAction_handles) = a2;
  sub_1CCA30298(a1, v4 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item);
  return v4;
}

uint64_t FMIPShareItemAction.init(item:handles:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore19FMIPShareItemAction_handles) = a2;
  sub_1CCA30298(a1, v2 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item);
  return v2;
}

uint64_t sub_1CCB28638()
{
  uint64_t v0;

  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CC9E6BA4();
  sub_1CCB63A9C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v0 = swift_bridgeObjectRetain();
  MEMORY[0x1D17B10B4](v0, MEMORY[0x1E0DEA968]);
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 60;
}

void FMIPShareItemAction.__allocating_init(item:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPShareItemAction.init(item:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1CCB28858()
{
  return swift_bridgeObjectRelease();
}

uint64_t FMIPShareItemAction.deinit()
{
  uint64_t v0;

  sub_1CCA0BF30(v0 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FMIPShareItemAction.__deallocating_deinit()
{
  uint64_t v0;

  sub_1CCA0BF30(v0 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB288F4()
{
  return sub_1CCB28638();
}

uint64_t FMIPItemSharingAction.__allocating_init(shareIdentifier:)(uint64_t a1)
{
  return sub_1CCB28B4C(a1, &OBJC_IVAR____TtC8FMIPCore21FMIPItemSharingAction_shareIdentifier);
}

uint64_t FMIPItemSharingAction.init(shareIdentifier:)(uint64_t a1)
{
  return sub_1CCB28BC0(a1, &OBJC_IVAR____TtC8FMIPCore21FMIPItemSharingAction_shareIdentifier);
}

uint64_t sub_1CCB2892C()
{
  return sub_1CCB28E68();
}

unint64_t sub_1CCB28954()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF9DF3D0;
  if (!qword_1EF9DF3D0)
  {
    v1 = sub_1CCB63604();
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0CB09F0], v1);
    atomic_store(result, (unint64_t *)&qword_1EF9DF3D0);
  }
  return result;
}

uint64_t FMIPItemSharingAction.deinit()
{
  return sub_1CCB29160(&OBJC_IVAR____TtC8FMIPCore21FMIPItemSharingAction_shareIdentifier);
}

uint64_t FMIPItemSharingAction.__deallocating_deinit()
{
  return sub_1CCB28FF4(&OBJC_IVAR____TtC8FMIPCore21FMIPItemSharingAction_shareIdentifier);
}

uint64_t sub_1CCB289B4()
{
  return sub_1CCB2892C();
}

uint64_t FMIPRequestShareAction.__allocating_init(unknownItem:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = sub_1CCB63604();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  sub_1CCA0BF30(a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v6 + OBJC_IVAR____TtC8FMIPCore22FMIPRequestShareAction_beaconIdentifier, v5, v2);
  return v6;
}

uint64_t FMIPRequestShareAction.init(unknownItem:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v3 = sub_1CCB63604();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  sub_1CCA0BF30(a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v1 + OBJC_IVAR____TtC8FMIPCore22FMIPRequestShareAction_beaconIdentifier, v6, v3);
  return v1;
}

uint64_t FMIPRequestShareAction.__allocating_init(beaconIdentifier:)(uint64_t a1)
{
  return sub_1CCB28B4C(a1, &OBJC_IVAR____TtC8FMIPCore22FMIPRequestShareAction_beaconIdentifier);
}

uint64_t sub_1CCB28B4C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = swift_allocObject();
  v5 = v4 + *a2;
  v6 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a1, v6);
  return v4;
}

uint64_t FMIPRequestShareAction.init(beaconIdentifier:)(uint64_t a1)
{
  return sub_1CCB28BC0(a1, &OBJC_IVAR____TtC8FMIPCore22FMIPRequestShareAction_beaconIdentifier);
}

uint64_t sub_1CCB28BC0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *a2;
  v5 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a1, v5);
  return v2;
}

uint64_t FMIPRequestShareAction.description.getter()
{
  return sub_1CCB28E68();
}

uint64_t FMIPRequestShareAction.deinit()
{
  return sub_1CCB29160(&OBJC_IVAR____TtC8FMIPCore22FMIPRequestShareAction_beaconIdentifier);
}

uint64_t FMIPRequestShareAction.__deallocating_deinit()
{
  return sub_1CCB28FF4(&OBJC_IVAR____TtC8FMIPCore22FMIPRequestShareAction_beaconIdentifier);
}

uint64_t sub_1CCB28C50()
{
  return FMIPRequestShareAction.description.getter();
}

uint64_t FMIPStopSharingAction.__allocating_init(unknownItem:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = swift_allocObject();
  v3 = v2 + OBJC_IVAR____TtC8FMIPCore21FMIPStopSharingAction_beaconIdentifier;
  v4 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v3, a1, v4);
  sub_1CCA0BF30(a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore21FMIPStopSharingAction_force) = 0;
  return v2;
}

uint64_t FMIPStopSharingAction.init(unknownItem:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8FMIPCore21FMIPStopSharingAction_beaconIdentifier;
  v4 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v3, a1, v4);
  sub_1CCA0BF30(a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore21FMIPStopSharingAction_force) = 0;
  return v1;
}

uint64_t FMIPStopSharingAction.__allocating_init(beaconIdentifier:force:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = swift_allocObject();
  v5 = v4 + OBJC_IVAR____TtC8FMIPCore21FMIPStopSharingAction_beaconIdentifier;
  v6 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a1, v6);
  *(_BYTE *)(v4 + OBJC_IVAR____TtC8FMIPCore21FMIPStopSharingAction_force) = a2;
  return v4;
}

uint64_t FMIPStopSharingAction.init(beaconIdentifier:force:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2 + OBJC_IVAR____TtC8FMIPCore21FMIPStopSharingAction_beaconIdentifier;
  v6 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a1, v6);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8FMIPCore21FMIPStopSharingAction_force) = a2;
  return v2;
}

uint64_t FMIPStopSharingAction.description.getter()
{
  return sub_1CCB28E68();
}

uint64_t sub_1CCB28E68()
{
  sub_1CCB643F0();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CC9E6BA4();
  sub_1CCB63A9C();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  sub_1CCB63604();
  sub_1CCB28954();
  sub_1CCB64240();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 60;
}

uint64_t FMIPStopSharingAction.deinit()
{
  return sub_1CCB29160(&OBJC_IVAR____TtC8FMIPCore21FMIPStopSharingAction_beaconIdentifier);
}

uint64_t FMIPStopSharingAction.__deallocating_deinit()
{
  return sub_1CCB28FF4(&OBJC_IVAR____TtC8FMIPCore21FMIPStopSharingAction_beaconIdentifier);
}

uint64_t sub_1CCB28FF4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *a1;
  v3 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB29040()
{
  return FMIPStopSharingAction.description.getter();
}

uint64_t FMIPAcceptShareAction.deinit()
{
  return sub_1CCB29160(&OBJC_IVAR____TtC8FMIPCore21FMIPItemSharingAction_shareIdentifier);
}

uint64_t FMIPDeclineShareAction.deinit()
{
  return sub_1CCB29160(&OBJC_IVAR____TtC8FMIPCore21FMIPItemSharingAction_shareIdentifier);
}

uint64_t _s8FMIPCore21FMIPAcceptShareActionC15shareIdentifierAC10Foundation4UUIDV_tcfC_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = swift_allocObject();
  v3 = v2 + OBJC_IVAR____TtC8FMIPCore21FMIPItemSharingAction_shareIdentifier;
  v4 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, a1, v4);
  return v2;
}

uint64_t _s8FMIPCore21FMIPAcceptShareActionC15shareIdentifierAC10Foundation4UUIDV_tcfc_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8FMIPCore21FMIPItemSharingAction_shareIdentifier;
  v4 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, a1, v4);
  return v1;
}

uint64_t FMIPWithdrawShareAction.deinit()
{
  return sub_1CCB29160(&OBJC_IVAR____TtC8FMIPCore21FMIPItemSharingAction_shareIdentifier);
}

uint64_t sub_1CCB29160(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *a1;
  v3 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v1;
}

uint64_t _s8FMIPCore21FMIPAcceptShareActionCfD_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8FMIPCore21FMIPItemSharingAction_shareIdentifier;
  v2 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB291F4()
{
  return type metadata accessor for FMIPShareItemAction(0);
}

uint64_t type metadata accessor for FMIPShareItemAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E5540);
}

uint64_t sub_1CCB29210()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for FMIPShareItemAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPShareItemAction.__allocating_init(item:handles:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of FMIPShareItemAction.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t sub_1CCB29274()
{
  return type metadata accessor for FMIPItemSharingAction(0);
}

uint64_t type metadata accessor for FMIPItemSharingAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E5608);
}

uint64_t method lookup function for FMIPItemSharingAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPItemSharingAction.__allocating_init(shareIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of FMIPItemSharingAction.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t sub_1CCB292B4()
{
  return type metadata accessor for FMIPRequestShareAction(0);
}

uint64_t type metadata accessor for FMIPRequestShareAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E56C0);
}

uint64_t sub_1CCB292D0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CCB63604();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for FMIPRequestShareAction()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1CCB29348()
{
  return type metadata accessor for FMIPStopSharingAction(0);
}

uint64_t type metadata accessor for FMIPStopSharingAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E5778);
}

uint64_t sub_1CCB29364()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1CCB63604();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for FMIPStopSharingAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPStopSharingAction.__allocating_init(unknownItem:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of FMIPStopSharingAction.__allocating_init(beaconIdentifier:force:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1CCB293F4()
{
  return type metadata accessor for FMIPAcceptShareAction(0);
}

uint64_t type metadata accessor for FMIPAcceptShareAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E5838);
}

uint64_t sub_1CCB29414()
{
  return type metadata accessor for FMIPDeclineShareAction(0);
}

uint64_t type metadata accessor for FMIPDeclineShareAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E58F0);
}

uint64_t sub_1CCB29430()
{
  return type metadata accessor for FMIPWithdrawShareAction(0);
}

uint64_t type metadata accessor for FMIPWithdrawShareAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E59A8);
}

uint64_t sub_1CCB2944C()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1CCB29488(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;

  v2 = sub_1CCA14E90(&qword_1EF9E5C88);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FMIPUnknownItem();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v35 = (uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v33 = (uint64_t)&v32 - v9;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1CCB63EC8();
    sub_1CC9C30A8(0, &qword_1EF9E28C0);
    sub_1CCB2A694();
    result = sub_1CCB63C94();
    a1 = v42;
    v39 = v43;
    v11 = v44;
    v12 = v45;
    v13 = v46;
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 56);
    v39 = a1 + 56;
    v11 = ~v14;
    v16 = -v14;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v13 = v17 & v15;
    result = swift_bridgeObjectRetain();
    v12 = 0;
  }
  v34 = v11;
  v36 = MEMORY[0x1E0DEE9D8];
  v38 = (unint64_t)(v11 + 64) >> 6;
  v37 = MEMORY[0x1E0DEE9B0] + 8;
  v40 = a1;
LABEL_8:
  v18 = v12;
  v19 = v13;
  if (a1 < 0)
  {
    do
    {
      v21 = sub_1CCB63F28();
      if (!v21)
        goto LABEL_39;
      v41 = v21;
      sub_1CC9C30A8(0, &qword_1EF9E28C0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v22 = v47;
      swift_unknownObjectRelease();
      v12 = v18;
      v13 = v19;
      if (!v22)
        goto LABEL_39;
LABEL_31:
      v26 = v22;
      FMIPUnknownItem.init(with:)(v26, (uint64_t)v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
      {
        v27 = v33;
        sub_1CC9FED60((uint64_t)v4, v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
        sub_1CC9FED60(v27, v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
        v28 = v36;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v28 = sub_1CCAC9F4C(0, *(_QWORD *)(v28 + 16) + 1, 1, v28);
        v30 = *(_QWORD *)(v28 + 16);
        v29 = *(_QWORD *)(v28 + 24);
        if (v30 >= v29 >> 1)
          v28 = sub_1CCAC9F4C(v29 > 1, v30 + 1, 1, v28);
        *(_QWORD *)(v28 + 16) = v30 + 1;
        v31 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
        v36 = v28;
        result = sub_1CC9FED60(v35, v28 + v31 + *(_QWORD *)(v6 + 72) * v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
        a1 = v40;
        goto LABEL_8;
      }
      result = sub_1CC9C3E84((uint64_t)v4, &qword_1EF9E5C88);
      v18 = v12;
      v19 = v13;
      a1 = v40;
    }
    while (v40 < 0);
  }
  if (v19)
  {
    v13 = (v19 - 1) & v19;
    v20 = __clz(__rbit64(v19)) | (v18 << 6);
    v12 = v18;
    goto LABEL_30;
  }
  v23 = v18 + 1;
  if (!__OFADD__(v18, 1))
  {
    if (v23 < v38)
    {
      v24 = *(_QWORD *)(v39 + 8 * v23);
      v12 = v18 + 1;
      if (v24)
        goto LABEL_29;
      v12 = v18 + 2;
      if (v18 + 2 >= v38)
        goto LABEL_39;
      v24 = *(_QWORD *)(v39 + 8 * v12);
      if (v24)
        goto LABEL_29;
      v12 = v18 + 3;
      if (v18 + 3 >= v38)
        goto LABEL_39;
      v24 = *(_QWORD *)(v39 + 8 * v12);
      if (v24)
        goto LABEL_29;
      v12 = v18 + 4;
      if (v18 + 4 >= v38)
        goto LABEL_39;
      v24 = *(_QWORD *)(v39 + 8 * v12);
      if (v24)
      {
LABEL_29:
        v13 = (v24 - 1) & v24;
        v20 = __clz(__rbit64(v24)) + (v12 << 6);
LABEL_30:
        v22 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v20);
        if (v22)
          goto LABEL_31;
        goto LABEL_39;
      }
      v12 = v18 + 5;
      if (v18 + 5 < v38)
      {
        v24 = *(_QWORD *)(v39 + 8 * v12);
        if (!v24)
        {
          v25 = v18 + 6;
          while (v38 != v25)
          {
            v24 = *(_QWORD *)(v39 + 8 * v25++);
            if (v24)
            {
              v12 = v25 - 1;
              a1 = v40;
              goto LABEL_29;
            }
          }
          goto LABEL_39;
        }
        goto LABEL_29;
      }
    }
LABEL_39:
    sub_1CCA2F54C();
    return v36;
  }
  __break(1u);
  return result;
}

uint64_t sub_1CCB29910(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1CCB29930@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CCADF180;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return sub_1CC9DF994(v3);
}

uint64_t sub_1CCB29994(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CCADF198;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  sub_1CC9DF994(v3);
  result = sub_1CCA203A8(v7);
  *a2 = (uint64_t)v6;
  a2[1] = v5;
  return result;
}

uint64_t FMIPUnknownAccessoryDiscoveryController.Callbacks.discoveredAccessoriesCallback.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CC9DF994(*v0);
  return v1;
}

uint64_t FMIPUnknownAccessoryDiscoveryController.Callbacks.discoveredAccessoriesCallback.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;

  result = sub_1CCA203A8(*v2);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*FMIPUnknownAccessoryDiscoveryController.Callbacks.discoveredAccessoriesCallback.modify())()
{
  return nullsub_1;
}

uint64_t sub_1CCB29A94@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *);

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CCADF180;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return sub_1CC9DF994(v3);
}

uint64_t sub_1CCB29AF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CCADF198;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 16);
  sub_1CC9DF994(v3);
  result = sub_1CCA203A8(v7);
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

uint64_t FMIPUnknownAccessoryDiscoveryController.Callbacks.lostAccessoriesCallback.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_1CC9DF994(v1);
  return v1;
}

uint64_t FMIPUnknownAccessoryDiscoveryController.Callbacks.lostAccessoriesCallback.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1CCA203A8(*(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*FMIPUnknownAccessoryDiscoveryController.Callbacks.lostAccessoriesCallback.modify())()
{
  return nullsub_1;
}

uint64_t sub_1CCB29BF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *);

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CCADEC48;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return sub_1CC9DF994(v3);
}

uint64_t sub_1CCB29C5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CCADEC18;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 32);
  sub_1CC9DF994(v3);
  result = sub_1CCA203A8(v7);
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  return result;
}

uint64_t FMIPUnknownAccessoryDiscoveryController.Callbacks.accessoryDiscoveryFinished.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1CC9DF994(v1);
  return v1;
}

uint64_t FMIPUnknownAccessoryDiscoveryController.Callbacks.accessoryDiscoveryFinished.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1CCA203A8(*(_QWORD *)(v2 + 32));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*FMIPUnknownAccessoryDiscoveryController.Callbacks.accessoryDiscoveryFinished.modify())()
{
  return nullsub_1;
}

uint64_t sub_1CCB29D5C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CC9F44CC;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_1CC9DF994(v3);
}

uint64_t sub_1CCB29DC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_1CC9F44CC;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 48);
  sub_1CC9DF994(v3);
  result = sub_1CCA203A8(v7);
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 56) = v5;
  return result;
}

uint64_t FMIPUnknownAccessoryDiscoveryController.Callbacks.errorHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  sub_1CC9DF994(v1);
  return v1;
}

uint64_t FMIPUnknownAccessoryDiscoveryController.Callbacks.errorHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1CCA203A8(*(_QWORD *)(v2 + 48));
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*FMIPUnknownAccessoryDiscoveryController.Callbacks.errorHandler.modify())()
{
  return nullsub_1;
}

uint64_t sub_1CCB29EC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  sub_1CC9DF994(v1);
  return v1;
}

uint64_t sub_1CCB29EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1CCA203A8(*(_QWORD *)(v2 + 48));
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*sub_1CCB29F24())()
{
  return nullsub_1;
}

double static FMIPUnknownAccessoryDiscoveryController.operationTimeout.getter()
{
  return 2.0;
}

uint64_t sub_1CCB29F3C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (_QWORD *)*a1;
  swift_beginAccess();
  v4 = v3[4];
  v5 = v3[5];
  v6 = v3[6];
  v7 = v3[7];
  v8 = v3[8];
  v9 = v3[9];
  v10 = v3[10];
  v11 = v3[11];
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  a2[7] = v11;
  sub_1CC9DF994(v4);
  sub_1CC9DF994(v6);
  sub_1CC9DF994(v8);
  return sub_1CC9DF994(v10);
}

uint64_t sub_1CCB29FD8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = (_QWORD *)*a2;
  swift_beginAccess();
  v12 = v10[4];
  v13 = v10[6];
  v15 = v10[10];
  v14 = v10[8];
  v10[4] = v2;
  v10[5] = v3;
  v10[6] = v4;
  v10[7] = v5;
  v10[8] = v6;
  v10[9] = v7;
  v10[10] = v8;
  v10[11] = v9;
  sub_1CC9DF994(v2);
  sub_1CC9DF994(v4);
  sub_1CC9DF994(v6);
  sub_1CC9DF994(v8);
  sub_1CCA203A8(v12);
  sub_1CCA203A8(v13);
  sub_1CCA203A8(v14);
  return sub_1CCA203A8(v15);
}

uint64_t sub_1CCB2A0D0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_beginAccess();
  v3 = v1[4];
  v4 = v1[5];
  v5 = v1[6];
  v6 = v1[7];
  v7 = v1[8];
  v8 = v1[9];
  v10 = v1[10];
  v9 = v1[11];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v10;
  a1[7] = v9;
  sub_1CC9DF994(v3);
  sub_1CC9DF994(v5);
  sub_1CC9DF994(v7);
  return sub_1CC9DF994(v10);
}

uint64_t sub_1CCB2A168(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v2 = a1[1];
  v12 = *a1;
  v3 = a1[4];
  v10 = *(_OWORD *)(a1 + 5);
  v11 = *((_OWORD *)a1 + 1);
  v4 = a1[7];
  swift_beginAccess();
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 64);
  v8 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 32) = v12;
  *(_QWORD *)(v1 + 40) = v2;
  *(_OWORD *)(v1 + 48) = v11;
  *(_QWORD *)(v1 + 64) = v3;
  *(_OWORD *)(v1 + 72) = v10;
  *(_QWORD *)(v1 + 88) = v4;
  sub_1CCA203A8(v5);
  sub_1CCA203A8(v6);
  sub_1CCA203A8(v7);
  return sub_1CCA203A8(v8);
}

uint64_t (*sub_1CCB2A234())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1CCB2A270()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t sub_1CCB2A2A0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 112) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB2A2FC()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t FMIPUnknownAccessoryDiscoveryController.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  FMIPUnknownAccessoryDiscoveryController.init()();
  return v0;
}

uint64_t FMIPUnknownAccessoryDiscoveryController.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  _QWORD v19[5];
  uint64_t v20;

  v1 = v0;
  v2 = sub_1CCB63D84();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = v2;
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63D6C();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v7);
  v9 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v9);
  v19[4] = sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A8E30);
  sub_1CCB63844();
  v20 = MEMORY[0x1E0DEE9D8];
  v19[3] = sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, v8, MEMORY[0x1E0DEF828]);
  v19[2] = sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  v19[1] = sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  v10 = *MEMORY[0x1E0DEF8D0];
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v11(v6, v10, v4);
  *(_QWORD *)(v1 + 16) = sub_1CCB63DB4();
  sub_1CCB63844();
  v20 = MEMORY[0x1E0DEE9D8];
  sub_1CCB63E98();
  v11(v6, v10, v4);
  *(_QWORD *)(v1 + 24) = sub_1CCB63DB4();
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_QWORD *)(v1 + 96) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D89960]), sel_init);
  *(_BYTE *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 112) = MEMORY[0x1E0DEE9E8];
  v12 = objc_allocWithZone(MEMORY[0x1E0D89968]);
  sub_1CC9C30A8(0, &qword_1EF9E28C0);
  sub_1CCB2A694();
  v13 = (void *)sub_1CCB63C34();
  v14 = objc_msgSend(v12, sel_initWithUnknownAccessories_, v13);

  v15 = v14;
  v16 = sub_1CCB2D3D8((uint64_t)v14);

  v17 = *(void **)(v1 + 96);
  *(_QWORD *)(v1 + 96) = v16;

  return v1;
}

unint64_t sub_1CCB2A694()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF9E5A38;
  if (!qword_1EF9E5A38)
  {
    v1 = sub_1CC9C30A8(255, &qword_1EF9E28C0);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EF9E5A38);
  }
  return result;
}

uint64_t FMIPUnknownAccessoryDiscoveryController.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  objc_msgSend(*(id *)(v0 + 96), sel_stop);

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 80);
  sub_1CCA203A8(*(_QWORD *)(v0 + 32));
  sub_1CCA203A8(v1);
  sub_1CCA203A8(v2);
  sub_1CCA203A8(v3);

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FMIPUnknownAccessoryDiscoveryController.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  objc_msgSend(*(id *)(v0 + 96), sel_stop);

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 80);
  sub_1CCA203A8(*(_QWORD *)(v0 + 32));
  sub_1CCA203A8(v1);
  sub_1CCA203A8(v2);
  sub_1CCA203A8(v3);

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB2A82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CCB2A844(a2, a3);
}

uint64_t sub_1CCB2A838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CCB2B190(a2, a3);
}

uint64_t sub_1CCB2A844(uint64_t a1, uint64_t a2)
{
  return sub_1CCB2B1AC(a1, a2, (uint64_t)&unk_1E88FEAF8, (uint64_t)sub_1CCB2D62C, (uint64_t)&unk_1E88FEB10);
}

void sub_1CCB2A860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  id v30;
  NSObject *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t aBlock;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  _QWORD *v54;

  v47 = a2;
  v5 = sub_1CCB63820();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_1CCB63868();
  v9 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63880();
  v45 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v39 - v16;
  swift_beginAccess();
  if ((*(_BYTE *)(a1 + 104) & 1) != 0)
  {
    v18 = sub_1CCB63D48();
    sub_1CCB31F88(v18, 0xD000000000000048, 0x80000001CCB7E5D0);
    v19 = swift_allocObject();
    v20 = v47;
    *(_QWORD *)(v19 + 16) = v47;
    *(_QWORD *)(v19 + 24) = a3;
    v53 = sub_1CCB32228;
    v54 = (_QWORD *)v19;
    aBlock = MEMORY[0x1E0C809B0];
    v50 = 1107296256;
    v51 = sub_1CCA00C38;
    v52 = &unk_1E88FF1A8;
    v21 = v6;
    v22 = _Block_copy(&aBlock);
    sub_1CC9DF994(v20);
    sub_1CCB63844();
    v48 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v11, v8, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v46);
LABEL_5:
    swift_release();
    return;
  }
  v41 = v11;
  v42 = v9;
  v40 = v8;
  v43 = v6;
  v44 = v5;
  v23 = dispatch_group_create();
  dispatch_group_enter(v23);
  v24 = a3;
  v25 = *(void **)(a1 + 96);
  v26 = swift_allocObject();
  swift_weakInit();
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v23;
  v27[3] = v26;
  v28 = v47;
  v27[4] = v47;
  v27[5] = v24;
  v53 = sub_1CCB322DC;
  v54 = v27;
  aBlock = MEMORY[0x1E0C809B0];
  v50 = 1107296256;
  v51 = sub_1CCA1F54C;
  v52 = &unk_1E88FF108;
  v29 = _Block_copy(&aBlock);
  v30 = v25;
  v31 = v23;
  sub_1CC9DF994(v28);
  swift_release();
  objc_msgSend(v30, sel_startDiscoveryWithCompletion_, v29);
  _Block_release(v29);

  sub_1CCB63874();
  MEMORY[0x1D17B0E08](v15, 2.0);
  v32 = *(void (**)(char *, uint64_t))(v45 + 8);
  v32(v15, v12);
  sub_1CCB63D54();
  v32(v17, v12);
  if ((sub_1CCB63808() & 1) != 0)
  {
    v33 = swift_allocObject();
    v34 = v47;
    *(_QWORD *)(v33 + 16) = v47;
    *(_QWORD *)(v33 + 24) = v24;
    v53 = sub_1CCB32228;
    v54 = (_QWORD *)v33;
    aBlock = MEMORY[0x1E0C809B0];
    v50 = 1107296256;
    v51 = sub_1CCA00C38;
    v52 = &unk_1E88FF158;
    v35 = _Block_copy(&aBlock);
    sub_1CC9DF994(v34);
    v36 = v41;
    sub_1CCB63844();
    v48 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    v37 = v40;
    v38 = v44;
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v36, v37, v35);
    _Block_release(v35);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v37, v38);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v36, v46);
    goto LABEL_5;
  }

}

void sub_1CCB2AD78(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Strong;
  uint64_t v16;
  id v17;
  os_log_type_t v18;
  id v19;
  void *v20;
  unsigned __int8 v21;
  _QWORD *v22;
  void *v23;
  id v24;
  os_log_type_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *aBlock;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  void *v37;
  uint64_t (*v38)();
  _QWORD *v39;
  void *v40;
  char v41;

  v9 = sub_1CCB63820();
  v32 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63868();
  v31 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v16 = Strong;
    v29 = v12;
    v30 = a2;
    if (a1)
    {
      v17 = a1;
      v18 = sub_1CCB63D30();
      sub_1CCB31D78(v18);
      LOBYTE(v40) = 0;
      v19 = a1;
      FMIPAccessoryError.init(underlyingError:discoveryType:)(a1, (char *)&v40, (uint64_t)&aBlock);
      v20 = aBlock;
      v21 = v35;
      v40 = aBlock;
      v41 = v35;
      sub_1CCB2CE18((uint64_t)&v40);
      sub_1CCADEC6C(v20, v21);
      v28 = *(_QWORD *)(v16 + 24);
      v22 = (_QWORD *)swift_allocObject();
      v22[2] = a4;
      v22[3] = a5;
      v22[4] = a1;
      v38 = sub_1CCB32928;
      v39 = v22;
      aBlock = (void *)MEMORY[0x1E0C809B0];
      v35 = 1107296256;
      v36 = sub_1CCA00C38;
      v37 = &unk_1E88FF248;
      v23 = _Block_copy(&aBlock);
      sub_1CC9DF994(a4);
      v24 = a1;
      sub_1CCB63844();
      v40 = (void *)MEMORY[0x1E0DEE9D8];
      sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      sub_1CCA14E90(&qword_1ED8AA338);
      sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
      sub_1CCB63E98();
      MEMORY[0x1D17B1318](0, v14, v11, v23);
      _Block_release(v23);

    }
    else
    {
      v25 = sub_1CCB63D48();
      sub_1CCB31F88(v25, 0xD000000000000028, 0x80000001CCB7C9C0);
      swift_beginAccess();
      *(_BYTE *)(v16 + 104) = 1;
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = a4;
      *(_QWORD *)(v26 + 24) = a5;
      v38 = sub_1CCB32270;
      v39 = (_QWORD *)v26;
      aBlock = (void *)MEMORY[0x1E0C809B0];
      v35 = 1107296256;
      v36 = sub_1CCA00C38;
      v37 = &unk_1E88FF1F8;
      v27 = _Block_copy(&aBlock);
      sub_1CC9DF994(a4);
      sub_1CCB63844();
      v33 = MEMORY[0x1E0DEE9D8];
      sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      sub_1CCA14E90(&qword_1ED8AA338);
      sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
      sub_1CCB63E98();
      MEMORY[0x1D17B1318](0, v14, v11, v27);
      _Block_release(v27);
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v9);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v29);
    swift_release();
    swift_release();
    a2 = v30;
  }
  dispatch_group_leave(a2);
}

uint64_t sub_1CCB2B190(uint64_t a1, uint64_t a2)
{
  return sub_1CCB2B1AC(a1, a2, (uint64_t)&unk_1E88FEB48, (uint64_t)sub_1CCB2D63C, (uint64_t)&unk_1E88FEB60);
}

uint64_t sub_1CCB2B1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v21 = a5;
  v7 = v5;
  v10 = *v5;
  v11 = sub_1CCB63820();
  v24 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1CCB63868();
  v14 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = v7[2];
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v7;
  v17[3] = a1;
  v17[4] = a2;
  v17[5] = v10;
  aBlock[4] = a4;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = v21;
  v18 = _Block_copy(aBlock);
  swift_retain();
  sub_1CC9DF994(a1);
  sub_1CCB63844();
  v25 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v16, v13, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v23);
  return swift_release();
}

void sub_1CCB2B3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  NSObject *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t aBlock;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  _QWORD *v55;

  v47 = a3;
  v48 = a2;
  v4 = sub_1CCB63820();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63868();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63880();
  v46 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v40 - v16;
  swift_beginAccess();
  if (*(_BYTE *)(a1 + 104) != 1)
  {
    v34 = sub_1CCB63D48();
    sub_1CCB31F88(v34, 0xD00000000000002BLL, 0x80000001CCB7E5A0);
    v46 = *(_QWORD *)(a1 + 24);
    v35 = swift_allocObject();
    v36 = v47;
    v37 = v48;
    *(_QWORD *)(v35 + 16) = v48;
    *(_QWORD *)(v35 + 24) = v36;
    v54 = sub_1CCB32228;
    v55 = (_QWORD *)v35;
    aBlock = MEMORY[0x1E0C809B0];
    v51 = 1107296256;
    v52 = sub_1CCA00C38;
    v53 = &unk_1E88FEF50;
    v38 = v8;
    v39 = _Block_copy(&aBlock);
    sub_1CC9DF994(v37);
    sub_1CCB63844();
    v49 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v11, v7, v39);
    _Block_release(v39);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v38);
    goto LABEL_5;
  }
  v40 = v11;
  v41 = v9;
  v42 = v7;
  v43 = v5;
  v44 = v8;
  v45 = v4;
  v18 = dispatch_group_create();
  dispatch_group_enter(v18);
  v19 = *(void **)(a1 + 96);
  v20 = swift_allocObject();
  swift_weakInit();
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  v23 = v47;
  v22 = v48;
  v21[4] = v48;
  v21[5] = v23;
  v54 = sub_1CCB3225C;
  v55 = v21;
  aBlock = MEMORY[0x1E0C809B0];
  v51 = 1107296256;
  v52 = sub_1CCA1F54C;
  v53 = &unk_1E88FEFC8;
  v24 = _Block_copy(&aBlock);
  v25 = v19;
  v26 = v18;
  sub_1CC9DF994(v22);
  swift_release();
  objc_msgSend(v25, sel_stopDiscoveryWithCompletion_, v24);
  _Block_release(v24);

  sub_1CCB63874();
  MEMORY[0x1D17B0E08](v15, 2.0);
  v27 = *(void (**)(char *, uint64_t))(v46 + 8);
  v27(v15, v12);
  sub_1CCB63D54();
  v27(v17, v12);
  if ((sub_1CCB63808() & 1) != 0)
  {
    v28 = swift_allocObject();
    v29 = v48;
    *(_QWORD *)(v28 + 16) = v48;
    *(_QWORD *)(v28 + 24) = v23;
    v54 = sub_1CCB32228;
    v55 = (_QWORD *)v28;
    aBlock = MEMORY[0x1E0C809B0];
    v51 = 1107296256;
    v52 = sub_1CCA00C38;
    v53 = &unk_1E88FF018;
    v30 = _Block_copy(&aBlock);
    sub_1CC9DF994(v29);
    v31 = v40;
    sub_1CCB63844();
    v49 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    v32 = v42;
    v33 = v45;
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v31, v32, v30);
    _Block_release(v30);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v33);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v44);
LABEL_5:
    swift_release();
    return;
  }

}

void sub_1CCB2B8C8(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t Strong;
  id v17;
  os_log_type_t v18;
  id v19;
  void *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  uint64_t v29;
  id v30;
  _QWORD *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char v46;
  void *aBlock;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  void *v50;
  void *v51;
  _QWORD *v52;

  v9 = sub_1CCB63820();
  v43 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v15;
  if (a1)
  {
    v41 = v12;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    v17 = a1;
    if (Strong)
    {
      v18 = sub_1CCB63D30();
      sub_1CCB31D78(v18);
      swift_release();
    }
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      LOBYTE(v45) = 0;
      v19 = a1;
      FMIPAccessoryError.init(underlyingError:discoveryType:)(a1, (char *)&v45, (uint64_t)&aBlock);
      v20 = aBlock;
      v40 = a1;
      v21 = v14;
      v22 = v11;
      v23 = v9;
      v24 = a4;
      v25 = a5;
      v26 = a2;
      v27 = v48;
      v45 = aBlock;
      v46 = v48;
      sub_1CCB2CE18((uint64_t)&v45);
      swift_release();
      v28 = v27;
      a2 = v26;
      a5 = v25;
      a4 = v24;
      v9 = v23;
      v11 = v22;
      v14 = v21;
      a1 = v40;
      sub_1CCADEC6C(v20, v28);
    }
    swift_beginAccess();
    v29 = swift_weakLoadStrong();
    if (!v29)
    {

      goto LABEL_12;
    }
    v30 = *(id *)(v29 + 24);
    swift_release();
    v31 = (_QWORD *)swift_allocObject();
    v31[2] = a4;
    v31[3] = a5;
    v31[4] = a1;
    v51 = sub_1CCB32280;
    v52 = v31;
    aBlock = (void *)MEMORY[0x1E0C809B0];
    v48 = 1107296256;
    v49 = sub_1CCA00C38;
    v50 = &unk_1E88FF0B8;
    v32 = _Block_copy(&aBlock);
    v33 = a1;
    sub_1CC9DF994(a4);
    sub_1CCB63844();
    v44 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v14, v11, v32);
    _Block_release(v32);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v9);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v41);
    goto LABEL_10;
  }
  swift_beginAccess();
  v34 = swift_weakLoadStrong();
  if (v34)
  {
    v35 = v34;
    v36 = sub_1CCB63D48();
    sub_1CCB31F88(v36, 0xD000000000000029, 0x80000001CCB7C810);
    swift_beginAccess();
    *(_BYTE *)(v35 + 104) = 0;
    v41 = *(_QWORD *)(v35 + 24);
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = a4;
    *(_QWORD *)(v37 + 24) = a5;
    v51 = sub_1CCB32270;
    v52 = (_QWORD *)v37;
    aBlock = (void *)MEMORY[0x1E0C809B0];
    v48 = 1107296256;
    v49 = sub_1CCA00C38;
    v50 = &unk_1E88FF068;
    v38 = _Block_copy(&aBlock);
    sub_1CC9DF994(a4);
    sub_1CCB63844();
    v45 = (void *)MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v14, v11, v38);
    _Block_release(v38);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v9);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v12);
    swift_release();
LABEL_10:
    swift_release();
  }
LABEL_12:
  dispatch_group_leave(a2);
}

void sub_1CCB2BDD8(void (*a1)(void **), int a2, id a3)
{
  id v5;
  void *v6;
  unsigned __int8 v7;
  void *v8;
  unsigned __int8 v9;
  char v10;
  void *v11;
  unsigned __int8 v12;

  if (a1)
  {
    LOBYTE(v8) = 0;
    v5 = a3;
    FMIPAccessoryError.init(underlyingError:discoveryType:)(a3, (char *)&v8, (uint64_t)&v11);
    v6 = v11;
    v7 = v12;
    v8 = v11;
    v9 = v12;
    v10 = 1;
    a1(&v8);
    sub_1CCADEC6C(v6, v7);
  }
}

void sub_1CCB2BE58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  _QWORD *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v7 = *(void **)(v3 + 96);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v3;
  v8[3] = a2;
  v8[4] = a3;
  v11[4] = sub_1CCB2D674;
  v11[5] = v8;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_1CCA97658;
  v11[3] = &unk_1E88FEBB0;
  v9 = _Block_copy(v11);
  v10 = v7;
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v10, sel_fetchEncryptedPayloadForUnknownBeacon_completion_, a1, v9);
  _Block_release(v9);

}

uint64_t sub_1CCB2BF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void (*v29)(char *, char *, uint64_t);
  os_log_type_t v30;
  uint64_t v31;
  NSObject *v32;
  _BOOL4 v33;
  uint8_t *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _QWORD v51[2];
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t aBlock;
  unint64_t v68;
  uint64_t (*v69)(uint64_t);
  void *v70;
  uint64_t (*v71)();
  uint64_t v72;

  v61 = a3;
  v62 = a4;
  v60 = a2;
  v5 = sub_1CCB63820();
  v64 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_1CCB63868();
  v63 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65);
  v9 = (char *)v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCB63490();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x1E0C80A78](v13);
  v59 = (char *)v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v51 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)v51 - v20;
  v22 = a1;
  v24 = v23;
  sub_1CC9EAB74(v22, (uint64_t)v12, &qword_1ED8A8EE8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v24) == 1)
  {
    sub_1CC9C3E84((uint64_t)v12, &qword_1ED8A8EE8);
    v25 = sub_1CCB63D48();
    sub_1CCB31F88(v25, 0xD00000000000003ELL, 0x80000001CCB7E560);
    v26 = swift_allocObject();
    v27 = v62;
    *(_QWORD *)(v26 + 16) = v61;
    *(_QWORD *)(v26 + 24) = v27;
    v71 = sub_1CCB32178;
    v72 = v26;
    aBlock = MEMORY[0x1E0C809B0];
    v68 = 1107296256;
    v69 = sub_1CCA00C38;
    v70 = &unk_1E88FEEB0;
    v28 = _Block_copy(&aBlock);
    swift_retain();
    sub_1CCB63844();
    v66 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v9, v7, v28);
    _Block_release(v28);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v9, v65);
  }
  else
  {
    v57 = v9;
    v55 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v55(v21, v12, v24);
    v29 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v53 = v24;
    v54 = v29;
    v29(v19, v21, v24);
    v30 = sub_1CCB63D48();
    if (qword_1EF9DEF58 != -1)
      swift_once();
    v58 = v5;
    v31 = sub_1CCB637FC();
    sub_1CCA16C20(v31, (uint64_t)qword_1EF9FF468);
    v32 = sub_1CCB637D8();
    v33 = os_log_type_enabled(v32, v30);
    v56 = v7;
    if (v33)
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      v52 = v21;
      *(_DWORD *)v34 = 136315138;
      v66 = v35;
      aBlock = 0;
      v51[1] = v34 + 4;
      v68 = 0xE000000000000000;
      sub_1CCB63FB8();
      sub_1CCB63A24();
      sub_1CCB6340C();
      v36 = v19;
      sub_1CCB63A24();
      swift_bridgeObjectRelease();
      sub_1CCB63A24();
      aBlock = sub_1CCA0CB60(aBlock, v68, &v66);
      v21 = v52;
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v32, v30, "FMIPUnknownAccessoryDiscoveryController: %s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v35, -1, -1);
      MEMORY[0x1D17B214C](v34, -1, -1);

    }
    else
    {

      v36 = v19;
    }
    v37 = v57;
    v38 = *(void (**)(char *, uint64_t))(v14 + 8);
    v39 = v36;
    v40 = v53;
    v38(v39, v53);
    v41 = v59;
    v54(v59, v21, v40);
    v42 = v21;
    v43 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v44 = swift_allocObject();
    v45 = v62;
    *(_QWORD *)(v44 + 16) = v61;
    *(_QWORD *)(v44 + 24) = v45;
    v55((char *)(v44 + v43), v41, v40);
    v71 = sub_1CCB321F4;
    v72 = v44;
    aBlock = MEMORY[0x1E0C809B0];
    v68 = 1107296256;
    v69 = sub_1CCA00C38;
    v70 = &unk_1E88FEF00;
    v46 = _Block_copy(&aBlock);
    swift_retain();
    sub_1CCB63844();
    v66 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    v47 = v37;
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    v48 = v56;
    v49 = v58;
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v47, v48, v46);
    _Block_release(v46);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v48, v49);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v47, v65);
    v38(v42, v40);
  }
  return swift_release();
}

uint64_t sub_1CCB2C5E4(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = sub_1CCA14E90(&qword_1EF9E5C78);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63490();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v7, a3, v8);
  swift_storeEnumTagMultiPayload();
  a1(v7);
  return sub_1CC9C3E84((uint64_t)v7, &qword_1EF9E5C78);
}

uint64_t sub_1CCB2C6A0(void (*a1)(char *))
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_1CCA14E90(&qword_1EF9E5C78);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v4 = 0;
  v4[8] = 0;
  swift_storeEnumTagMultiPayload();
  a1(v4);
  return sub_1CC9C3E84((uint64_t)v4, &qword_1EF9E5C78);
}

uint64_t sub_1CCB2C734@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 112);
  swift_bridgeObjectRetain();
  sub_1CCAE0D5C((uint64_t (*)(char *))sub_1CCB2D680, v3, a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB2C7AC(uint64_t a1)
{
  os_log_type_t v2;
  uint64_t result;
  os_log_type_t v4;

  v2 = sub_1CCB63D30();
  sub_1CCB31F88(v2, 0xD000000000000018, 0x80000001CCB7C5F0);
  result = swift_beginAccess();
  if (*(_BYTE *)(a1 + 104) == 1)
  {
    v4 = sub_1CCB63D48();
    sub_1CCB31F88(v4, 0xD000000000000052, 0x80000001CCB7E620);
    return sub_1CCB2D0C0();
  }
  return result;
}

uint64_t sub_1CCB2C838(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t aBlock;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  void *v37;
  uint64_t (*v38)();
  uint64_t v39;

  v4 = sub_1CCB63820();
  v31 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1CCB63868();
  v32 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  v9 = sub_1CCB63D48();
  sub_1CCB32408(v9);
  swift_bridgeObjectRelease();
  v10 = sub_1CCB29488(a2);
  v11 = sub_1CCA7AF20(v10);
  swift_bridgeObjectRelease();
  v12 = (uint64_t *)(a1 + 112);
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 112) + 16) <= *(_QWORD *)(v11 + 16) >> 3)
  {
    aBlock = v11;
    swift_bridgeObjectRetain();
    v15 = swift_bridgeObjectRetain();
    sub_1CCB2ED04(v15, &qword_1EF9E5C88, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem, (void (*)(char *))sub_1CCB2E484);
    swift_bridgeObjectRelease();
    v14 = aBlock;
  }
  else
  {
    swift_bridgeObjectRetain();
    v13 = swift_bridgeObjectRetain();
    v14 = sub_1CCB2FC78(v13, v11);
    swift_bridgeObjectRelease();
  }
  v16 = *v12;
  if (*(_QWORD *)(v11 + 16) <= *(_QWORD *)(*v12 + 16) >> 3)
  {
    aBlock = *v12;
    swift_bridgeObjectRetain();
    sub_1CCB2ED04(v11, &qword_1EF9E5C88, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem, (void (*)(char *))sub_1CCB2E484);
    v17 = aBlock;
  }
  else
  {
    swift_bridgeObjectRetain();
    v17 = sub_1CCB2FC78(v11, v16);
  }
  *v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v18 = sub_1CCB63D48();
  sub_1CCB32624(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19 = sub_1CCB63D48();
  sub_1CCB32624(v19);
  swift_bridgeObjectRelease();
  v20 = MEMORY[0x1E0C809B0];
  v21 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v14 + 16))
  {
    v29[1] = *(_QWORD *)(a1 + 24);
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a1;
    *(_QWORD *)(v22 + 24) = v14;
    v38 = sub_1CCB32854;
    v39 = v22;
    aBlock = v20;
    v35 = 1107296256;
    v36 = sub_1CCA00C38;
    v37 = &unk_1E88FF400;
    v23 = _Block_copy(&aBlock);
    swift_retain();
    sub_1CCB63844();
    v33 = v21;
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v8, v6, v23);
    _Block_release(v23);
    v24 = v31;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v4);
    v25 = v30;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v30);
    swift_release();
    if (*(_QWORD *)(v17 + 16))
    {
LABEL_9:
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = a1;
      *(_QWORD *)(v26 + 24) = v17;
      v38 = sub_1CCB32860;
      v39 = v26;
      aBlock = MEMORY[0x1E0C809B0];
      v35 = 1107296256;
      v36 = sub_1CCA00C38;
      v37 = &unk_1E88FF450;
      v27 = _Block_copy(&aBlock);
      swift_retain();
      sub_1CCB63844();
      v33 = MEMORY[0x1E0DEE9D8];
      sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      sub_1CCA14E90(&qword_1ED8AA338);
      sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
      sub_1CCB63E98();
      MEMORY[0x1D17B1318](0, v8, v6, v27);
      _Block_release(v27);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v4);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v25);
      return swift_release();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = v30;
    v24 = v31;
    if (*(_QWORD *)(v17 + 16))
      goto LABEL_9;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB2CD40(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void (*v5)(uint64_t);

  result = swift_beginAccess();
  v5 = *(void (**)(uint64_t))(a1 + 32);
  if (v5)
  {
    swift_retain();
    v5(a2);
    return sub_1CCA203A8((uint64_t)v5);
  }
  return result;
}

uint64_t sub_1CCB2CDAC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void (*v5)(uint64_t);

  result = swift_beginAccess();
  v5 = *(void (**)(uint64_t))(a1 + 48);
  if (v5)
  {
    swift_retain();
    v5(a2);
    return sub_1CCA203A8((uint64_t)v5);
  }
  return result;
}

uint64_t sub_1CCB2CE18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  unsigned __int8 v12;
  os_log_type_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = sub_1CCB63820();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v19 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1CCB63868();
  v8 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(id *)a1;
  v12 = *(_BYTE *)(a1 + 8);
  sub_1CCADECC8(*(id *)a1, v12);
  v13 = sub_1CCB63D48();
  sub_1CCB31B6C(v13);
  sub_1CCADEC6C(v11, v12);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v2;
  *(_QWORD *)(v14 + 24) = v11;
  *(_BYTE *)(v14 + 32) = v12;
  aBlock[4] = sub_1CCB32148;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88FED20;
  v15 = _Block_copy(aBlock);
  sub_1CCADECC8(v11, v12);
  swift_retain();
  sub_1CCB63844();
  v20 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v5, MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v10, v7, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v18);
  return swift_release();
}

uint64_t sub_1CCB2D044(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  void (*v7)(uint64_t *);
  uint64_t v8;
  char v9;

  result = swift_beginAccess();
  v7 = *(void (**)(uint64_t *))(a1 + 80);
  if (v7)
  {
    v8 = a2;
    v9 = a3;
    swift_retain();
    v7(&v8);
    return sub_1CCA203A8((uint64_t)v7);
  }
  return result;
}

uint64_t sub_1CCB2D0C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  os_log_type_t v12;
  void *v13;
  id v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v1 = sub_1CCB63820();
  v18 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CCB63868();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB6388C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_1CCB63D48();
  sub_1CCB31F88(v12, 0xD000000000000039, 0x80000001CCB7E4E0);
  v13 = *(void **)(v0 + 16);
  *v11 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0DEF740], v8);
  v14 = v13;
  LOBYTE(v13) = sub_1CCB638A4();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v13 & 1) != 0)
  {
    swift_beginAccess();
    *(_BYTE *)(v0 + 104) = 0;
    aBlock[4] = sub_1CCB32110;
    aBlock[5] = v0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA00C38;
    aBlock[3] = &unk_1E88FECD0;
    v16 = _Block_copy(aBlock);
    swift_retain();
    sub_1CCB63844();
    v19 = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v7, v3, v16);
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v3, v1);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1CCB2D344(uint64_t a1)
{
  uint64_t result;
  void (*v3)(uint64_t);
  uint64_t v4;

  result = swift_beginAccess();
  v3 = *(void (**)(uint64_t))(a1 + 64);
  if (v3)
  {
    swift_beginAccess();
    sub_1CC9DF994((uint64_t)v3);
    v4 = swift_bridgeObjectRetain();
    v3(v4);
    sub_1CCA203A8((uint64_t)v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

id sub_1CCB2D3D8(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  void *v15;
  void *v16;
  uint64_t v17;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D89960]), sel_initWithPreviousState_, a1);
  v2 = swift_allocObject();
  swift_weakInit();
  v16 = sub_1CCB3239C;
  v17 = v2;
  v3 = MEMORY[0x1E0C809B0];
  v12 = MEMORY[0x1E0C809B0];
  v13 = 1107296256;
  v14 = sub_1CCB2D888;
  v15 = &unk_1E88FF270;
  v4 = _Block_copy(&v12);
  swift_release();
  objc_msgSend(v1, sel_setAccessoryDiscoveredCallback_, v4);
  _Block_release(v4);
  v5 = swift_allocObject();
  swift_weakInit();
  v16 = sub_1CCB323A4;
  v17 = v5;
  v12 = v3;
  v13 = 1107296256;
  v14 = sub_1CCA00C38;
  v15 = &unk_1E88FF298;
  v6 = _Block_copy(&v12);
  swift_release();
  objc_msgSend(v1, sel_setSessionInvalidatedCallback_, v6);
  _Block_release(v6);
  v7 = swift_allocObject();
  swift_weakInit();
  v16 = sub_1CCB323AC;
  v17 = v7;
  v12 = v3;
  v13 = 1107296256;
  v14 = (uint64_t (*)(uint64_t))sub_1CC9C32FC;
  v15 = &unk_1E88FF2C0;
  v8 = _Block_copy(&v12);
  swift_release();
  objc_msgSend(v1, sel_setAccessoryDiscoveryErrorCallback_, v8);
  _Block_release(v8);
  v9 = swift_allocObject();
  swift_weakInit();
  v16 = sub_1CCB323B4;
  v17 = v9;
  v12 = v3;
  v13 = 1107296256;
  v14 = sub_1CCA00C38;
  v15 = &unk_1E88FF2E8;
  v10 = _Block_copy(&v12);
  swift_release();
  objc_msgSend(v1, sel_setAccessoryDiscoveryFinishedCallback_, v10);
  _Block_release(v10);
  return v1;
}

void sub_1CCB2D62C()
{
  uint64_t *v0;

  sub_1CCB2A860(v0[2], v0[3], v0[4]);
}

void sub_1CCB2D63C()
{
  uint64_t *v0;

  sub_1CCB2B3AC(v0[2], v0[3], v0[4]);
}

uint64_t sub_1CCB2D648()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB2D674(uint64_t a1)
{
  uint64_t *v1;

  return sub_1CCB2BF40(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1CCB2D680()
{
  return sub_1CCB635E0() & 1;
}

uint64_t sub_1CCB2D6AC()
{
  return sub_1CC9CAA38(&qword_1EF9E1EB8, (uint64_t (*)(uint64_t))type metadata accessor for FMIPUnknownItem, (uint64_t)&protocol conformance descriptor for FMIPUnknownItem);
}

unint64_t sub_1CCB2D6DC()
{
  unint64_t result;

  result = qword_1EF9E5AA0;
  if (!qword_1EF9E5AA0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPUnknownAccessoryDiscoveryController.Callbacks, &type metadata for FMIPUnknownAccessoryDiscoveryController.Callbacks);
    atomic_store(result, (unint64_t *)&qword_1EF9E5AA0);
  }
  return result;
}

uint64_t sub_1CCB2D720(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[6];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    v4 = *(NSObject **)(result + 16);
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = a1;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = sub_1CCB323F0;
    *(_QWORD *)(v6 + 24) = v5;
    aBlock[4] = sub_1CC9F4530;
    aBlock[5] = v6;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CC9F44AC;
    aBlock[3] = &unk_1E88FF3B0;
    v7 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    dispatch_sync(v4, v7);
    _Block_release(v7);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t sub_1CCB2D888(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_1CC9C30A8(0, &qword_1EF9E28C0);
  sub_1CCB2A694();
  v2 = sub_1CCB63C40();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB2D900()
{
  uint64_t result;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  _QWORD aBlock[6];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = *(NSObject **)(result + 16);
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = sub_1CCB323D4;
    *(_QWORD *)(v3 + 24) = v1;
    aBlock[4] = sub_1CC9F44EC;
    aBlock[5] = v3;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CC9F44AC;
    aBlock[3] = &unk_1E88FF338;
    v4 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v2, v4);
    _Block_release(v4);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
    swift_release_n();
    result = swift_release();
    if ((v2 & 1) != 0)
      __break(1u);
  }
  return result;
}

void sub_1CCB2DA34(void *a1)
{
  id v2;
  void *v3;
  unsigned __int8 v4;
  void *v5;
  unsigned __int8 v6;
  void *v7;
  unsigned __int8 v8;

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    LOBYTE(v5) = 0;
    v2 = a1;
    FMIPAccessoryError.init(underlyingError:discoveryType:)(a1, (char *)&v5, (uint64_t)&v7);
    v3 = v7;
    v4 = v8;
    v5 = v7;
    v6 = v8;
    sub_1CCB2CE18((uint64_t)&v5);
    swift_release();
    sub_1CCADEC6C(v3, v4);
  }
}

void sub_1CCB2DAD0()
{
  uint64_t Strong;
  id v1;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v1 = *(id *)(Strong + 16);
    swift_release();
    sub_1CCA14E90(&qword_1EF9E5C80);
    sub_1CCB63D9C();

  }
}

uint64_t sub_1CCB2DB68@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  v3 = result;
  if (result)
  {
    sub_1CCB2D0C0();
    result = swift_release();
  }
  *a1 = v3 == 0;
  return result;
}

uint64_t (*sub_1CCB2DBDC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1CCB2DC40@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 104);
  return result;
}

uint64_t sub_1CCB2DC84(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 104) = v2;
  return result;
}

uint64_t sub_1CCB2DCC4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 112);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for FMIPUnknownAccessoryDiscoveryController()
{
  return objc_opt_self();
}

uint64_t method lookup function for FMIPUnknownAccessoryDiscoveryController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPUnknownAccessoryDiscoveryController.callbacks.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of FMIPUnknownAccessoryDiscoveryController.callbacks.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of FMIPUnknownAccessoryDiscoveryController.callbacks.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of FMIPUnknownAccessoryDiscoveryController.discoveryInProgress.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of FMIPUnknownAccessoryDiscoveryController.discoveredAccessories.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of FMIPUnknownAccessoryDiscoveryController.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of FMIPUnknownAccessoryDiscoveryController.startDiscovery(localFindable:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of FMIPUnknownAccessoryDiscoveryController.stopDiscovery(localFindable:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of FMIPUnknownAccessoryDiscoveryController.startDiscovery(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of FMIPUnknownAccessoryDiscoveryController.stopDiscovery(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of FMIPUnknownAccessoryDiscoveryController.initiateFetchEncryptedPayloadForUnknownBeacon(beacon:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of FMIPUnknownAccessoryDiscoveryController.accessory(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

_QWORD *destroy for FMIPUnknownAccessoryDiscoveryController.Callbacks(_QWORD *result)
{
  _QWORD *v1;

  v1 = result;
  if (*result)
    result = (_QWORD *)swift_release();
  if (v1[2])
    result = (_QWORD *)swift_release();
  if (v1[4])
    result = (_QWORD *)swift_release();
  if (v1[6])
    return (_QWORD *)swift_release();
  return result;
}

_QWORD *initializeWithCopy for FMIPUnknownAccessoryDiscoveryController.Callbacks(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*a2)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = a2[2];
  if (v5)
  {
    v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  v7 = a2[4];
  if (v7)
  {
    v8 = a2[5];
    a1[4] = v7;
    a1[5] = v8;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  }
  v9 = a2[6];
  if (v9)
  {
    v10 = a2[7];
    a1[6] = v9;
    a1[7] = v10;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  }
  return a1;
}

_QWORD *assignWithCopy for FMIPUnknownAccessoryDiscoveryController.Callbacks(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    a1[2] = v7;
    a1[3] = v9;
    swift_retain();
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (a1[4])
  {
    if (v10)
    {
      v11 = a2[5];
      a1[4] = v10;
      a1[5] = v11;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = a2[5];
    a1[4] = v10;
    a1[5] = v12;
    swift_retain();
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
LABEL_22:
  v13 = a2[6];
  if (!a1[6])
  {
    if (v13)
    {
      v15 = a2[7];
      a1[6] = v13;
      a1[7] = v15;
      swift_retain();
      return a1;
    }
LABEL_28:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    return a1;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_28;
  }
  v14 = a2[7];
  a1[6] = v13;
  a1[7] = v14;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for FMIPUnknownAccessoryDiscoveryController.Callbacks(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v7 = a2[2];
  if (a1[2])
  {
    if (v7)
    {
      v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v7)
  {
    v9 = a2[3];
    a1[2] = v7;
    a1[3] = v9;
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  v10 = a2[4];
  if (a1[4])
  {
    if (v10)
    {
      v11 = a2[5];
      a1[4] = v10;
      a1[5] = v11;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = a2[5];
    a1[4] = v10;
    a1[5] = v12;
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
LABEL_22:
  v13 = a2[6];
  if (!a1[6])
  {
    if (v13)
    {
      v15 = a2[7];
      a1[6] = v13;
      a1[7] = v15;
      return a1;
    }
LABEL_28:
    *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    return a1;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_28;
  }
  v14 = a2[7];
  a1[6] = v13;
  a1[7] = v14;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPUnknownAccessoryDiscoveryController.Callbacks(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPUnknownAccessoryDiscoveryController.Callbacks(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPUnknownAccessoryDiscoveryController.Callbacks()
{
  return &type metadata for FMIPUnknownAccessoryDiscoveryController.Callbacks;
}

uint64_t sub_1CCB2E290@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = type metadata accessor for FMIPDiscoveredAccessory();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *v2;
  sub_1CCB6433C();
  swift_bridgeObjectRetain();
  FMIPDiscoveredAccessory.hash(into:)();
  v10 = sub_1CCB64384();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v22 = v2;
    v23 = v6;
    v24 = v5;
    v25 = a2;
    v13 = ~v11;
    v14 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      sub_1CCA0BEEC(*(_QWORD *)(v9 + 48) + v14 * v12, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      v15 = _s8FMIPCore23FMIPDiscoveredAccessoryV2eeoiySbAC_ACtFZ_0(v8, a1);
      sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      if (v15)
        break;
      v12 = (v12 + 1) & v13;
      if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v16 = 1;
        a2 = v25;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    v17 = v22;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *v17;
    v26 = *v17;
    *v17 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1CCA774E8();
      v19 = v26;
    }
    a2 = v25;
    sub_1CC9FED60(*(_QWORD *)(v19 + 48) + v14 * v12, v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
    sub_1CCB2E678(v12);
    *v17 = v26;
    swift_bridgeObjectRelease();
    v16 = 0;
LABEL_10:
    v6 = v23;
    v5 = v24;
  }
  else
  {
    swift_bridgeObjectRelease();
    v16 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v16, 1, v5);
}

uint64_t sub_1CCB2E484@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[9];

  v5 = type metadata accessor for FMIPUnknownItem();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  sub_1CCB6433C();
  swift_bridgeObjectRetain();
  FMIPUnknownItem.hash(into:)((uint64_t)v26);
  v10 = sub_1CCB64384();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v22 = v2;
    v23 = v6;
    v24 = v5;
    v25 = a2;
    v13 = ~v11;
    v14 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      sub_1CCA0BEEC(*(_QWORD *)(v9 + 48) + v14 * v12, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
      v15 = _s8FMIPCore15FMIPUnknownItemV2eeoiySbAC_ACtFZ_0((uint64_t)v8, a1);
      sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
      if ((v15 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
      if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v16 = 1;
        a2 = v25;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    v17 = v22;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *v17;
    v26[0] = *v17;
    *v17 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1CCA774FC();
      v19 = v26[0];
    }
    a2 = v25;
    sub_1CC9FED60(*(_QWORD *)(v19 + 48) + v14 * v12, v25, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCB2EA9C(v12);
    *v17 = v26[0];
    swift_bridgeObjectRelease();
    v16 = 0;
LABEL_10:
    v6 = v23;
    v5 = v24;
  }
  else
  {
    swift_bridgeObjectRelease();
    v16 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v16, 1, v5);
}

uint64_t sub_1CCB2E678(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;

  v3 = type metadata accessor for FMIPHawkeyeProductInformation();
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  MEMORY[0x1E0C80A78](v3);
  v39 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9DFB90);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for FMIPDiscoveredAccessory();
  v8 = *(_QWORD *)(v40 - 8);
  result = MEMORY[0x1E0C80A78](v40);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  v13 = *v1 + 56;
  v14 = -1 << *(_BYTE *)(*v1 + 32);
  v15 = (a1 + 1) & ~v14;
  if (((1 << v15) & *(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
  {
    v38 = v1;
    v16 = ~v14;
    swift_retain();
    v17 = sub_1CCB63EA4();
    if ((*(_QWORD *)(v13 + 8 * (v15 >> 6)) & (1 << v15)) != 0)
    {
      v18 = *(_QWORD *)(v8 + 72);
      v19 = v40;
      v44 = v12;
      v45 = v13;
      v42 = (v17 + 1) & v16;
      v43 = v16;
      v41 = v18;
      while (1)
      {
        v20 = *(_QWORD *)(v12 + 48);
        v48 = v18 * v15;
        sub_1CCA0BEEC(v20 + v18 * v15, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
        sub_1CCB6433C();
        v21 = *(id *)v11;
        sub_1CCB63DFC();

        v22 = *((_QWORD *)v11 + 3);
        if (v22)
        {
          v23 = *((_QWORD *)v11 + 1);
          v24 = *((_QWORD *)v11 + 2);
          sub_1CCB64354();
          sub_1CCB64348();
          sub_1CCA7C9C8(v23, v24, v22);
          swift_bridgeObjectRetain();
          sub_1CCB639F4();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_1CCB639F4();
          swift_bridgeObjectRelease();
          v25 = v24;
          v19 = v40;
          sub_1CCA7C9F8(v23, v25, v22);
        }
        else
        {
          sub_1CCB64354();
        }
        sub_1CC9EAB74((uint64_t)&v11[*(int *)(v19 + 24)], (uint64_t)v7, &qword_1EF9DFB90);
        v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48))(v7, 1, v47);
        v27 = v42;
        if (v26 == 1)
        {
          sub_1CCB64354();
        }
        else
        {
          v28 = v39;
          sub_1CC9FED60((uint64_t)v7, v39, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
          sub_1CCB64354();
          FMIPHawkeyeProductInformation.hash(into:)();
          sub_1CCA0BF30(v28, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
        }
        v12 = v44;
        v13 = v45;
        v29 = sub_1CCB64384();
        sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
        v30 = v43;
        v31 = v29 & v43;
        if ((uint64_t)a1 >= (uint64_t)v27)
          break;
        v18 = v41;
        if (v31 < v27)
          goto LABEL_17;
LABEL_18:
        v32 = v18 * a1;
        if ((uint64_t)(v18 * a1) < v48 || *(_QWORD *)(v12 + 48) + v18 * a1 >= *(_QWORD *)(v12 + 48) + v48 + v18)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v15;
          if (v32 == v48)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v15;
LABEL_6:
        v15 = (v15 + 1) & v30;
        if (((*(_QWORD *)(v13 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          goto LABEL_22;
      }
      v18 = v41;
      if (v31 < v27)
        goto LABEL_6;
LABEL_17:
      if ((uint64_t)a1 < (uint64_t)v31)
        goto LABEL_6;
      goto LABEL_18;
    }
LABEL_22:
    *(_QWORD *)(v13 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release();
    v1 = v38;
  }
  else
  {
    *(_QWORD *)(v13 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v33 = *v1;
  v34 = *(_QWORD *)(*v1 + 16);
  v35 = __OFSUB__(v34, 1);
  v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v33 + 16) = v36;
    ++*(_DWORD *)(v33 + 36);
  }
  return result;
}

uint64_t sub_1CCB2EA9C(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26[72];

  v24 = type metadata accessor for FMIPUnknownItem();
  v3 = *(_QWORD *)(v24 - 8);
  result = MEMORY[0x1E0C80A78](v24);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *v1 + 56;
  v9 = -1 << *(_BYTE *)(*v1 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    v23 = v1;
    v11 = ~v9;
    swift_retain();
    v12 = sub_1CCB63EA4();
    v25 = v8;
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v13 = (v12 + 1) & v11;
      v14 = *(_QWORD *)(v3 + 72);
      while (1)
      {
        v15 = v14 * v10;
        sub_1CCA0BEEC(*(_QWORD *)(v7 + 48) + v14 * v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
        sub_1CCB6433C();
        FMIPUnknownItem.hash(into:)((uint64_t)v26);
        v16 = sub_1CCB64384();
        sub_1CCA0BF30((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
        v17 = v16 & v11;
        if ((uint64_t)a1 >= (uint64_t)v13)
          break;
        if (v17 < v13)
          goto LABEL_11;
LABEL_12:
        v18 = v14 * a1;
        if ((uint64_t)(v14 * a1) < v15 || *(_QWORD *)(v7 + 48) + v14 * a1 >= *(_QWORD *)(v7 + 48) + v15 + v14)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v18 == v15)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v11;
        if (((*(_QWORD *)(v25 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
          goto LABEL_16;
      }
      if (v17 < v13)
        goto LABEL_6;
LABEL_11:
      if ((uint64_t)a1 < (uint64_t)v17)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_16:
    *(_QWORD *)(v25 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release();
    v1 = v23;
  }
  else
  {
    *(_QWORD *)(v8 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v19 = *v1;
  v20 = *(_QWORD *)(*v1 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v19 + 16) = v22;
    ++*(_DWORD *)(v19 + 36);
  }
  return result;
}

uint64_t sub_1CCB2ECE8(uint64_t a1)
{
  return sub_1CCB2ED04(a1, qword_1EF9E5C90, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory, (void (*)(char *))sub_1CCB2E290);
}

uint64_t sub_1CCB2ED04(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), void (*a4)(char *))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void (*v32)(char *);

  v32 = a4;
  v8 = sub_1CCA14E90(a2);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a3(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v29 - v17;
  if (!*(_QWORD *)(*(_QWORD *)v4 + 16))
    return result;
  v19 = *(_QWORD *)(a1 + 56);
  v30 = a1 + 56;
  v20 = 1 << *(_BYTE *)(a1 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v31 = (unint64_t)(v20 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v23 = 0;
  while (1)
  {
    if (v22)
    {
      v24 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v25 = v24 | (v23 << 6);
      goto LABEL_6;
    }
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v31)
      return swift_release();
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v23;
    if (!v27)
    {
      v23 = v26 + 1;
      if (v26 + 1 >= v31)
        return swift_release();
      v27 = *(_QWORD *)(v30 + 8 * v23);
      if (!v27)
      {
        v23 = v26 + 2;
        if (v26 + 2 >= v31)
          return swift_release();
        v27 = *(_QWORD *)(v30 + 8 * v23);
        if (!v27)
        {
          v23 = v26 + 3;
          if (v26 + 3 >= v31)
            return swift_release();
          v27 = *(_QWORD *)(v30 + 8 * v23);
          if (!v27)
            break;
        }
      }
    }
LABEL_23:
    v22 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_6:
    sub_1CCA0BEEC(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v12 + 72) * v25, (uint64_t)v18, a3);
    sub_1CC9FED60((uint64_t)v18, (uint64_t)v15, a3);
    v32(v15);
    sub_1CC9C3E84((uint64_t)v10, a2);
    result = sub_1CCA0BF30((uint64_t)v15, a3);
  }
  v28 = v26 + 4;
  if (v28 >= v31)
    return swift_release();
  v27 = *(_QWORD *)(v30 + 8 * v28);
  if (v27)
  {
    v23 = v28;
    goto LABEL_23;
  }
  while (1)
  {
    v23 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v23 >= v31)
      return swift_release();
    v27 = *(_QWORD *)(v30 + 8 * v23);
    ++v28;
    if (v27)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1CCB2EF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  id *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  unsigned int (*v62)(uint64_t, uint64_t, int *);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  int64_t v68;
  int64_t v69;
  uint64_t isStackAllocationSafe;
  uint64_t v71;
  char v72;
  unint64_t v73;
  size_t v74;
  void *v75;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unsigned int (*v87)(uint64_t, uint64_t, int *);
  uint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  _QWORD *v98;
  id *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  uint64_t v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v86 = sub_1CCA14E90(&qword_1EF9DFC38);
  MEMORY[0x1E0C80A78](v86);
  v5 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMIPHawkeyeProductInformation();
  v81 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v78 = (uint64_t)&v77 - v10;
  v11 = sub_1CCA14E90(&qword_1EF9DFB90);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v77 - v15;
  v17 = sub_1CCA14E90(qword_1EF9E5C90);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for FMIPDiscoveredAccessory();
  v84 = *(_QWORD *)(v91 - 8);
  v20 = MEMORY[0x1E0C80A78](v91);
  MEMORY[0x1E0C80A78](v20);
  v99 = (id *)((char *)&v77 - v22);
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  v98 = v21;
  v82 = v14;
  v79 = v9;
  v89 = (int *)v6;
  v85 = v5;
  v23 = -1 << *(_BYTE *)(a1 + 32);
  v24 = *(_QWORD *)(a1 + 56);
  v25 = ~v23;
  v26 = -v23;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  else
    v27 = -1;
  v100 = a1;
  v101 = a1 + 56;
  v94 = a1 + 56;
  v28 = v27 & v24;
  v95 = v25;
  v102 = v25;
  v103 = 0;
  v104 = v27 & v24;
  v97 = (char *)(a2 + 56);
  swift_bridgeObjectRetain();
  v29 = 0;
  v80 = v16;
  v30 = v99;
  v31 = v84;
  v93 = a2;
  v83 = v19;
  while (1)
  {
    if (v28)
    {
      v96 = (v28 - 1) & v28;
      v33 = __clz(__rbit64(v28)) | (v29 << 6);
      v32 = v29;
LABEL_10:
      sub_1CCA0BEEC(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v31 + 72) * v33, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      v34 = 0;
      goto LABEL_11;
    }
    v32 = v29 + 1;
    if (__OFADD__(v29, 1))
      __break(1u);
    v40 = (unint64_t)(v95 + 64) >> 6;
    if (v32 >= v40)
    {
      v96 = 0;
      v34 = 1;
      v32 = v29;
      goto LABEL_11;
    }
    v41 = *(_QWORD *)(v94 + 8 * v32);
    if (v41)
      goto LABEL_17;
    v68 = v29 + 2;
    if (v29 + 2 >= v40)
      goto LABEL_86;
    v41 = *(_QWORD *)(v94 + 8 * v68);
    if (v41)
      goto LABEL_74;
    if (v29 + 3 >= v40)
      goto LABEL_87;
    v41 = *(_QWORD *)(v94 + 8 * (v29 + 3));
    if (v41)
    {
      v32 = v29 + 3;
      goto LABEL_17;
    }
    v68 = v29 + 4;
    if (v29 + 4 < v40)
    {
      v41 = *(_QWORD *)(v94 + 8 * v68);
      if (v41)
      {
LABEL_74:
        v32 = v68;
LABEL_17:
        v96 = (v41 - 1) & v41;
        v33 = __clz(__rbit64(v41)) + (v32 << 6);
        goto LABEL_10;
      }
      v32 = v29 + 5;
      if (v29 + 5 < v40)
      {
        v41 = *(_QWORD *)(v94 + 8 * v32);
        if (v41)
          goto LABEL_17;
        v32 = v40 - 1;
        v69 = v29 + 6;
        while (v40 != v69)
        {
          v41 = *(_QWORD *)(v94 + 8 * v69++);
          if (v41)
          {
            v32 = v69 - 1;
            goto LABEL_17;
          }
        }
LABEL_86:
        v96 = 0;
        v34 = 1;
        goto LABEL_11;
      }
LABEL_87:
      v96 = 0;
      v34 = 1;
      v32 = v68;
      goto LABEL_11;
    }
    v96 = 0;
    v34 = 1;
    v32 = v29 + 3;
LABEL_11:
    v35 = v91;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v19, v34, 1, v91);
    v100 = a1;
    v101 = v94;
    v102 = v95;
    v103 = v32;
    v104 = v96;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v19, 1, v35) == 1)
    {
      sub_1CCA2F54C();
      sub_1CC9C3E84((uint64_t)v19, qword_1EF9E5C90);
      return a2;
    }
    sub_1CC9FED60((uint64_t)v19, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
    sub_1CCB6433C();
    v36 = *v30;
    sub_1CCB63DFC();

    v37 = (uint64_t)v30[3];
    if (v37)
    {
      v38 = (uint64_t)v99[2];
      v39 = (uint64_t)v99[1];
      sub_1CCB64354();
      sub_1CCB64348();
      sub_1CCA7C9C8(v39, v38, v37);
      swift_bridgeObjectRetain();
      sub_1CCB639F4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1CCB639F4();
      swift_bridgeObjectRelease();
      v30 = v99;
      sub_1CCA7C9F8(v39, v38, v37);
    }
    else
    {
      sub_1CCB64354();
    }
    v42 = (uint64_t)v80;
    v88 = (uint64_t)v30 + *(int *)(v91 + 24);
    sub_1CC9EAB74(v88, (uint64_t)v80, &qword_1EF9DFB90);
    v87 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v81 + 48);
    if (v87(v42, 1, v89) == 1)
    {
      sub_1CCB64354();
    }
    else
    {
      v43 = v42;
      v44 = v78;
      sub_1CC9FED60(v43, v78, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
      sub_1CCB64354();
      FMIPHawkeyeProductInformation.hash(into:)();
      sub_1CCA0BF30(v44, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
    }
    v19 = v83;
    v31 = v84;
    v45 = sub_1CCB64384();
    v46 = -1 << *(_BYTE *)(a2 + 32);
    v47 = v45 & ~v46;
    if (((*(_QWORD *)&v97[(v47 >> 3) & 0xFFFFFFFFFFFFF8] >> v47) & 1) != 0)
      break;
LABEL_7:
    sub_1CCA0BF30((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
    v29 = v32;
    v28 = v96;
  }
  v94 = ~v46;
  v48 = sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A7F30);
  v95 = *(_QWORD *)(v31 + 72);
  v96 = v48;
  v49 = v98;
  while (1)
  {
    sub_1CCA0BEEC(*(_QWORD *)(a2 + 48) + v95 * v47, (uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
    if ((sub_1CCB63DF0() & 1) == 0)
      goto LABEL_26;
    v53 = v98[1];
    v52 = v98[2];
    v54 = v98[3];
    v55 = (uint64_t)v99[1];
    v51 = (uint64_t)v99[2];
    v56 = (uint64_t)v99[3];
    if (v54)
    {
      if (!v56)
      {
        v90 = v98[2];
        v50 = v51;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v51 = v50;
        v52 = v90;
LABEL_25:
        v92 = v51;
        sub_1CCA7C9C8(v55, v51, v56);
        sub_1CCA7C9F8(v53, v52, v54);
        sub_1CCA7C9F8(v55, v92, v56);
        goto LABEL_26;
      }
      if (v53 != v55)
        goto LABEL_26;
      if ((id)v98[4] != v99[4] || (id)v98[5] != v99[5])
      {
        v57 = (uint64_t)v99[2];
        v58 = sub_1CCB642A0();
        v51 = v57;
        if ((v58 & 1) == 0)
          goto LABEL_26;
      }
      if ((v52 != v51 || v54 != v56) && (sub_1CCB642A0() & 1) == 0)
        goto LABEL_26;
    }
    else if (v56)
    {
      goto LABEL_25;
    }
    v59 = (uint64_t)v85;
    v60 = (uint64_t)&v85[*(int *)(v86 + 48)];
    sub_1CC9EAB74((uint64_t)v98 + *(int *)(v91 + 24), (uint64_t)v85, &qword_1EF9DFB90);
    sub_1CC9EAB74(v88, v60, &qword_1EF9DFB90);
    v61 = v89;
    v62 = v87;
    if (v87(v59, 1, v89) == 1)
      break;
    v63 = (uint64_t)v82;
    sub_1CC9EAB74(v59, (uint64_t)v82, &qword_1EF9DFB90);
    if (v62(v60, 1, v61) == 1)
    {
      sub_1CCA0BF30(v63, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
      goto LABEL_44;
    }
    v64 = (uint64_t)v79;
    sub_1CC9FED60(v60, (uint64_t)v79, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
    if (*(_QWORD *)v63 != *(_QWORD *)v64
      || *(_QWORD *)(v63 + 8) != *(_QWORD *)(v64 + 8)
      || (*(_QWORD *)(v63 + 16) != *(_QWORD *)(v64 + 16) || *(_QWORD *)(v63 + 24) != *(_QWORD *)(v64 + 24))
      && (sub_1CCB642A0() & 1) == 0
      || (*(_QWORD *)(v63 + 32) != *(_QWORD *)(v64 + 32) || *(_QWORD *)(v63 + 40) != *(_QWORD *)(v64 + 40))
      && (sub_1CCB642A0() & 1) == 0)
    {
LABEL_70:
      sub_1CCA0BF30(v64, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
      sub_1CCA0BF30(v63, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
      sub_1CC9C3E84(v59, &qword_1EF9DFB90);
      goto LABEL_26;
    }
    v65 = *(_QWORD *)(v63 + 56);
    v66 = *(_QWORD *)(v64 + 56);
    if (v65)
    {
      if (!v66 || (*(_QWORD *)(v63 + 48) != *(_QWORD *)(v64 + 48) || v65 != v66) && (sub_1CCB642A0() & 1) == 0)
        goto LABEL_70;
    }
    else if (v66)
    {
      goto LABEL_70;
    }
    if (*(double *)(v63 + 64) != *(double *)(v64 + 64)
      || *(unsigned __int8 *)(v63 + 72) != *(unsigned __int8 *)(v64 + 72)
      || *(unsigned __int8 *)(v63 + 73) != *(unsigned __int8 *)(v64 + 73)
      || (MEMORY[0x1D17B09D0](v63 + v61[12], v64 + v61[12]) & 1) == 0
      || (MEMORY[0x1D17B09D0](v63 + v61[13], v64 + v61[13]) & 1) == 0
      || (MEMORY[0x1D17B09D0](v63 + v61[14], v64 + v61[14]) & 1) == 0
      || (MEMORY[0x1D17B09D0](v63 + v61[15], v64 + v61[15]) & 1) == 0
      || (MEMORY[0x1D17B09D0](v63 + v61[16], v64 + v61[16]) & 1) == 0)
    {
      goto LABEL_70;
    }
    v67 = MEMORY[0x1D17B09D0](v63 + v61[17], v64 + v61[17]);
    sub_1CCA0BF30(v64, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
    sub_1CCA0BF30(v63, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
    sub_1CC9C3E84(v59, &qword_1EF9DFB90);
    if ((v67 & 1) != 0)
      goto LABEL_90;
LABEL_26:
    v49 = v98;
    sub_1CCA0BF30((uint64_t)v98, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
    v47 = (v47 + 1) & v94;
    a2 = v93;
    v30 = v99;
    if (((*(_QWORD *)&v97[(v47 >> 3) & 0xFFFFFFFFFFFFF8] >> v47) & 1) == 0)
    {
      v32 = v103;
      v96 = v104;
      a1 = v100;
      v94 = v101;
      v95 = v102;
      v19 = v83;
      v31 = v84;
      goto LABEL_7;
    }
  }
  if (v62(v60, 1, v61) != 1)
  {
LABEL_44:
    sub_1CC9C3E84(v59, &qword_1EF9DFC38);
    goto LABEL_26;
  }
  sub_1CC9C3E84(v59, &qword_1EF9DFB90);
LABEL_90:
  sub_1CCA0BF30((uint64_t)v98, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
  isStackAllocationSafe = sub_1CCA0BF30((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
  v71 = v93;
  v72 = *(_BYTE *)(v93 + 32);
  v73 = (unint64_t)((1 << v72) + 63) >> 6;
  v74 = 8 * v73;
  if ((v72 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    memcpy((char *)&v77 - ((v74 + 15) & 0x3FFFFFFFFFFFFFF0), v97, v74);
    a2 = sub_1CCB302A4((unint64_t *)((char *)&v77 - ((v74 + 15) & 0x3FFFFFFFFFFFFFF0)), v73, v71, v47, &v100);
    swift_release();
    sub_1CCA2F54C();
  }
  else
  {
    v75 = (void *)swift_slowAlloc();
    memcpy(v75, v97, v74);
    a2 = sub_1CCB302A4((unint64_t *)v75, v73, v71, v47, &v100);
    swift_release();
    sub_1CCA2F54C();
    MEMORY[0x1D17B214C](v75, -1, -1);
  }
  return a2;
}

uint64_t sub_1CCB2FC78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t isStackAllocationSafe;
  char v36;
  unint64_t v37;
  size_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t i;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56[72];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = sub_1CCA14E90(&qword_1EF9E5C88);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for FMIPUnknownItem();
  v7 = MEMORY[0x1E0C80A78](v52);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v43 - v11;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  v54 = v10;
  v50 = v6;
  v13 = *(_QWORD *)(a1 + 56);
  v14 = -1 << *(_BYTE *)(a1 + 32);
  if (-v14 < 64)
    v15 = ~(-1 << -(char)v14);
  else
    v15 = -1;
  v16 = v15 & v13;
  v57 = a1;
  v58 = a1 + 56;
  v53 = a1 + 56;
  v51 = ~v14;
  v59 = ~v14;
  v60 = 0;
  v61 = v15 & v13;
  v17 = a2 + 56;
  v18 = (unint64_t)(63 - v14) >> 6;
  v43 = v18 - 1;
  swift_bridgeObjectRetain();
  v19 = 0;
  v46 = v18;
  v45 = v18 - 6;
  v44 = a1 + 104;
  for (i = a1; ; a1 = i)
  {
    v48 = v16;
    v49 = v19;
    if (v16)
    {
      v55 = (v16 - 1) & v16;
      v20 = __clz(__rbit64(v16)) | (v19 << 6);
      v21 = v19;
      v22 = (uint64_t)v50;
      v23 = v54;
LABEL_9:
      sub_1CCA0BEEC(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v23 + 72) * v20, v22, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
      v24 = 0;
      goto LABEL_10;
    }
    v21 = v19 + 1;
    v22 = (uint64_t)v50;
    v23 = v54;
    if (__OFADD__(v19, 1))
      __break(1u);
    if (v21 >= v46)
    {
LABEL_35:
      v55 = 0;
      v24 = 1;
      v21 = v19;
      goto LABEL_10;
    }
    v32 = *(_QWORD *)(v53 + 8 * v21);
    if (v32)
      goto LABEL_19;
    v33 = v19 + 2;
    if (v19 + 2 >= v46)
    {
      v55 = 0;
      v24 = 1;
      goto LABEL_10;
    }
    v32 = *(_QWORD *)(v53 + 8 * v33);
    if (v32)
      goto LABEL_22;
    v19 += 3;
    if (v21 + 2 >= v46)
      goto LABEL_36;
    v32 = *(_QWORD *)(v53 + 8 * v19);
    if (v32)
    {
      v21 += 2;
      goto LABEL_19;
    }
    v33 = v21 + 3;
    if (v21 + 3 >= v46)
      goto LABEL_35;
    v32 = *(_QWORD *)(v53 + 8 * v33);
    if (v32)
    {
LABEL_22:
      v21 = v33;
LABEL_19:
      v55 = (v32 - 1) & v32;
      v20 = __clz(__rbit64(v32)) + (v21 << 6);
      goto LABEL_9;
    }
    v21 += 4;
    if (v21 >= v46)
    {
LABEL_36:
      v55 = 0;
      v24 = 1;
      v21 = v33;
    }
    else
    {
      v32 = *(_QWORD *)(v53 + 8 * v21);
      if (v32)
        goto LABEL_19;
      v34 = v49;
      while (v45 != v34)
      {
        v32 = *(_QWORD *)(v44 + 8 * v34++);
        if (v32)
        {
          v21 = v34 + 5;
          goto LABEL_19;
        }
      }
      v55 = 0;
      v24 = 1;
      v21 = v43;
    }
LABEL_10:
    v25 = v52;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v22, v24, 1, v52);
    v57 = a1;
    v58 = v53;
    v59 = v51;
    v60 = v21;
    v61 = v55;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v22, 1, v25) == 1)
    {
      sub_1CCA2F54C();
      sub_1CC9C3E84(v22, &qword_1EF9E5C88);
      return a2;
    }
    sub_1CC9FED60(v22, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCB6433C();
    FMIPUnknownItem.hash(into:)((uint64_t)v56);
    v26 = sub_1CCB64384();
    v27 = -1 << *(_BYTE *)(a2 + 32);
    v28 = v26 & ~v27;
    if (((*(_QWORD *)(v17 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) != 0)
      break;
LABEL_6:
    sub_1CCA0BF30((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v19 = v21;
    v16 = v55;
  }
  v29 = ~v27;
  v30 = *(_QWORD *)(v54 + 72);
  while (1)
  {
    sub_1CCA0BEEC(*(_QWORD *)(a2 + 48) + v30 * v28, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    v31 = _s8FMIPCore15FMIPUnknownItemV2eeoiySbAC_ACtFZ_0((uint64_t)v9, (uint64_t)v12);
    sub_1CCA0BF30((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    if ((v31 & 1) != 0)
      break;
    v28 = (v28 + 1) & v29;
    if (((*(_QWORD *)(v17 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
      goto LABEL_6;
  }
  isStackAllocationSafe = sub_1CCA0BF30((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
  v36 = *(_BYTE *)(a2 + 32);
  v37 = (unint64_t)((1 << v36) + 63) >> 6;
  v38 = 8 * v37;
  if ((v36 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    memcpy((char *)&v43 - ((v38 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(a2 + 56), v38);
    v39 = sub_1CCB30DB0((unint64_t *)((char *)&v43 - ((v38 + 15) & 0x3FFFFFFFFFFFFFF0)), v37, a2, v28, &v57);
    swift_release();
    sub_1CCA2F54C();
    return v39;
  }
  else
  {
    v40 = (void *)swift_slowAlloc();
    memcpy(v40, (const void *)(a2 + 56), v38);
    v41 = sub_1CCB30DB0((unint64_t *)v40, v37, a2, v28, &v57);
    swift_release();
    sub_1CCA2F54C();
    MEMORY[0x1D17B214C](v40, -1, -1);
    return v41;
  }
}

uint64_t sub_1CCB302A4(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  unsigned int (*v64)(uint64_t, uint64_t, int *);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t v75[2];
  uint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id *v99;
  _QWORD *v100;

  v75[0] = a2;
  v87 = sub_1CCA14E90(&qword_1EF9DFC38);
  MEMORY[0x1E0C80A78](v87);
  v86 = (uint64_t)v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for FMIPHawkeyeProductInformation();
  v83 = *(_QWORD *)(v90 - 8);
  v10 = MEMORY[0x1E0C80A78](v90);
  v79 = (uint64_t)v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v78 = (uint64_t)v75 - v12;
  v13 = sub_1CCA14E90(&qword_1EF9DFB90);
  v14 = MEMORY[0x1E0C80A78](v13);
  v84 = (uint64_t)v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v75 - v16;
  v18 = sub_1CCA14E90(qword_1EF9E5C90);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for FMIPDiscoveredAccessory();
  v21 = *(_QWORD *)(v91 - 8);
  v22 = MEMORY[0x1E0C80A78](v91);
  v100 = (uint64_t *)((char *)v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = MEMORY[0x1E0C80A78](v22);
  v99 = (id *)((char *)v75 - v25);
  v26 = *(_QWORD *)(a3 + 16);
  v27 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v28 = *(unint64_t *)((char *)a1 + v27) & ((-1 << a4) - 1);
  v77 = a1;
  *(unint64_t *)((char *)a1 + v27) = v28;
  v29 = v26 - 1;
  v97 = a3 + 56;
  v98 = a3;
  v82 = a5;
  v81 = v17;
  v80 = v20;
  v85 = v21;
LABEL_2:
  v76 = v29;
LABEL_4:
  while (2)
  {
    v30 = *a5;
    v31 = a5[1];
    v32 = a5[2];
    v33 = a5[3];
    v34 = a5[4];
    if (v34)
    {
      v35 = (v34 - 1) & v34;
      v36 = __clz(__rbit64(v34)) | (v33 << 6);
LABEL_6:
      sub_1CCA0BEEC(*(_QWORD *)(v30 + 48) + *(_QWORD *)(v21 + 72) * v36, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      v37 = 0;
LABEL_7:
      v38 = v91;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v20, v37, 1, v91);
      *a5 = v30;
      a5[1] = v31;
      a5[2] = v32;
      a5[3] = v33;
      a5[4] = v35;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v38) == 1)
      {
        sub_1CC9C3E84((uint64_t)v20, qword_1EF9E5C90);
        v74 = v98;
        swift_retain();
        return sub_1CCB311F0(v77, v75[0], v76, v74);
      }
      v39 = v99;
      sub_1CC9FED60((uint64_t)v20, (uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
      sub_1CCB6433C();
      v40 = *v39;
      sub_1CCB63DFC();

      v41 = (uint64_t)v39[3];
      if (v41)
      {
        v43 = (uint64_t)v39[1];
        v42 = (uint64_t)v39[2];
        sub_1CCB64354();
        sub_1CCB64348();
        sub_1CCA7C9C8(v43, v42, v41);
        swift_bridgeObjectRetain();
        sub_1CCB639F4();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_1CCB639F4();
        swift_bridgeObjectRelease();
        sub_1CCA7C9F8(v43, v42, v41);
      }
      else
      {
        sub_1CCB64354();
      }
      v47 = v85;
      v48 = (uint64_t)v81;
      v89 = (uint64_t)v39 + *(int *)(v91 + 24);
      sub_1CC9EAB74(v89, (uint64_t)v81, &qword_1EF9DFB90);
      v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
      if (v49(v48, 1, v90) == 1)
      {
        sub_1CCB64354();
      }
      else
      {
        v50 = v78;
        sub_1CC9FED60(v48, v78, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
        sub_1CCB64354();
        FMIPHawkeyeProductInformation.hash(into:)();
        sub_1CCA0BF30(v50, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
      }
      v51 = sub_1CCB64384();
      v52 = -1 << *(_BYTE *)(v98 + 32);
      v53 = v51 & ~v52;
      if (((*(_QWORD *)(v97 + ((v53 >> 3) & 0xFFFFFFFFFFFFF8)) >> v53) & 1) == 0)
      {
LABEL_3:
        result = sub_1CCA0BF30((uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
        a5 = v82;
        v20 = v80;
        v21 = v85;
        continue;
      }
      v88 = v49;
      v94 = ~v52;
      v54 = sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A7F30);
      v95 = *(_QWORD *)(v47 + 72);
      v96 = v54;
      v55 = v100;
      while (1)
      {
        sub_1CCA0BEEC(*(_QWORD *)(v98 + 48) + v95 * v53, (uint64_t)v55, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
        if ((sub_1CCB63DF0() & 1) == 0)
          goto LABEL_22;
        v56 = v100[1];
        v93 = v100[2];
        v57 = v100[3];
        v58 = (uint64_t)v99[1];
        v59 = (uint64_t)v99[2];
        v60 = (uint64_t)v99[3];
        if (v57)
        {
          if (!v60)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_21:
            v92 = v59;
            sub_1CCA7C9C8(v58, v59, v60);
            sub_1CCA7C9F8(v56, v93, v57);
            sub_1CCA7C9F8(v58, v92, v60);
            goto LABEL_22;
          }
          if (v56 != v58
            || ((id)v100[4] != v99[4] || (id)v100[5] != v99[5]) && (sub_1CCB642A0() & 1) == 0
            || (v93 != v59 || v57 != v60) && (sub_1CCB642A0() & 1) == 0)
          {
            goto LABEL_22;
          }
        }
        else if (v60)
        {
          goto LABEL_21;
        }
        v61 = v86;
        v62 = v86 + *(int *)(v87 + 48);
        sub_1CC9EAB74((uint64_t)v100 + *(int *)(v91 + 24), v86, &qword_1EF9DFB90);
        sub_1CC9EAB74(v89, v62, &qword_1EF9DFB90);
        v63 = (int *)v90;
        v64 = (unsigned int (*)(uint64_t, uint64_t, int *))v88;
        if (v88(v61, 1, v90) == 1)
        {
          if (v64(v62, 1, v63) == 1)
          {
            sub_1CC9C3E84(v61, &qword_1EF9DFB90);
LABEL_72:
            sub_1CCA0BF30((uint64_t)v100, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
            result = sub_1CCA0BF30((uint64_t)v99, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
            v71 = (v53 >> 3) & 0x1FFFFFFFFFFFFFF8;
            v72 = *(unint64_t *)((char *)v77 + v71);
            *(unint64_t *)((char *)v77 + v71) = v72 & ~(1 << v53);
            a5 = v82;
            v20 = v80;
            v21 = v85;
            if ((v72 & (1 << v53)) != 0)
            {
              v29 = v76 - 1;
              if (__OFSUB__(v76, 1))
                goto LABEL_94;
              if (v76 == 1)
                return MEMORY[0x1E0DEE9E8];
              goto LABEL_2;
            }
            goto LABEL_4;
          }
          goto LABEL_40;
        }
        v65 = v84;
        sub_1CC9EAB74(v61, v84, &qword_1EF9DFB90);
        if (v64(v62, 1, v63) == 1)
        {
          sub_1CCA0BF30(v65, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
LABEL_40:
          sub_1CC9C3E84(v61, &qword_1EF9DFC38);
          goto LABEL_22;
        }
        v66 = v79;
        sub_1CC9FED60(v62, v79, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
        if (*(_QWORD *)v65 != *(_QWORD *)v66
          || *(_QWORD *)(v65 + 8) != *(_QWORD *)(v66 + 8)
          || (*(_QWORD *)(v65 + 16) != *(_QWORD *)(v66 + 16) || *(_QWORD *)(v65 + 24) != *(_QWORD *)(v66 + 24))
          && (sub_1CCB642A0() & 1) == 0
          || (*(_QWORD *)(v65 + 32) != *(_QWORD *)(v66 + 32) || *(_QWORD *)(v65 + 40) != *(_QWORD *)(v66 + 40))
          && (sub_1CCB642A0() & 1) == 0)
        {
LABEL_66:
          sub_1CCA0BF30(v66, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
          sub_1CCA0BF30(v65, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
          sub_1CC9C3E84(v61, &qword_1EF9DFB90);
          goto LABEL_22;
        }
        v67 = *(_QWORD *)(v65 + 56);
        v68 = *(_QWORD *)(v66 + 56);
        if (v67)
        {
          if (!v68 || (*(_QWORD *)(v65 + 48) != *(_QWORD *)(v66 + 48) || v67 != v68) && (sub_1CCB642A0() & 1) == 0)
            goto LABEL_66;
        }
        else if (v68)
        {
          goto LABEL_66;
        }
        if (*(double *)(v65 + 64) != *(double *)(v66 + 64)
          || *(unsigned __int8 *)(v65 + 72) != *(unsigned __int8 *)(v66 + 72)
          || *(unsigned __int8 *)(v65 + 73) != *(unsigned __int8 *)(v66 + 73)
          || (MEMORY[0x1D17B09D0](v65 + v63[12], v66 + v63[12]) & 1) == 0
          || (MEMORY[0x1D17B09D0](v65 + v63[13], v66 + v63[13]) & 1) == 0
          || (MEMORY[0x1D17B09D0](v65 + v63[14], v66 + v63[14]) & 1) == 0
          || (MEMORY[0x1D17B09D0](v65 + v63[15], v66 + v63[15]) & 1) == 0
          || (MEMORY[0x1D17B09D0](v65 + v63[16], v66 + v63[16]) & 1) == 0)
        {
          goto LABEL_66;
        }
        v69 = MEMORY[0x1D17B09D0](v65 + v63[17], v66 + v63[17]);
        sub_1CCA0BF30(v66, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
        sub_1CCA0BF30(v65, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
        sub_1CC9C3E84(v61, &qword_1EF9DFB90);
        if ((v69 & 1) != 0)
          goto LABEL_72;
LABEL_22:
        v55 = v100;
        sub_1CCA0BF30((uint64_t)v100, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
        v53 = (v53 + 1) & v94;
        v39 = v99;
        if (((*(_QWORD *)(v97 + ((v53 >> 3) & 0xFFFFFFFFFFFFF8)) >> v53) & 1) == 0)
          goto LABEL_3;
      }
    }
    break;
  }
  v44 = v33 + 1;
  if (!__OFADD__(v33, 1))
  {
    v45 = (unint64_t)(v32 + 64) >> 6;
    if (v44 >= v45)
    {
      v35 = 0;
      v37 = 1;
      goto LABEL_7;
    }
    v46 = *(_QWORD *)(v31 + 8 * v44);
    if (v46)
      goto LABEL_13;
    v70 = v33 + 2;
    if (v33 + 2 < v45)
    {
      v46 = *(_QWORD *)(v31 + 8 * v70);
      if (v46)
        goto LABEL_70;
      if (v33 + 3 >= v45)
        goto LABEL_86;
      v46 = *(_QWORD *)(v31 + 8 * (v33 + 3));
      if (v46)
      {
        v44 = v33 + 3;
LABEL_13:
        v35 = (v46 - 1) & v46;
        v36 = __clz(__rbit64(v46)) + (v44 << 6);
        v33 = v44;
        goto LABEL_6;
      }
      v70 = v33 + 4;
      if (v33 + 4 >= v45)
      {
        v35 = 0;
        v37 = 1;
        v33 += 3;
        goto LABEL_7;
      }
      v46 = *(_QWORD *)(v31 + 8 * v70);
      if (v46)
      {
LABEL_70:
        v44 = v70;
        goto LABEL_13;
      }
      v44 = v33 + 5;
      if (v33 + 5 >= v45)
      {
LABEL_86:
        v35 = 0;
        v37 = 1;
        v33 = v70;
        goto LABEL_7;
      }
      v46 = *(_QWORD *)(v31 + 8 * v44);
      if (v46)
        goto LABEL_13;
      v44 = v45 - 1;
      v73 = v33 + 6;
      while (v45 != v73)
      {
        v46 = *(_QWORD *)(v31 + 8 * v73++);
        if (v46)
        {
          v44 = v73 - 1;
          goto LABEL_13;
        }
      }
    }
    v35 = 0;
    v37 = 1;
    v33 = v44;
    goto LABEL_7;
  }
  __break(1u);
LABEL_94:
  __break(1u);
  return result;
}

uint64_t sub_1CCB30DB0(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int64_t v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61[80];
  uint64_t v62;

  v51 = a2;
  v56 = a3;
  v9 = sub_1CCA14E90(&qword_1EF9E5C88);
  MEMORY[0x1E0C80A78](v9);
  v55 = (uint64_t)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for FMIPUnknownItem();
  v11 = *(_QWORD *)(v57 - 8);
  v12 = MEMORY[0x1E0C80A78](v57);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v50 - v16;
  v18 = *(_QWORD *)(a3 + 16);
  v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v20 = *(unint64_t *)((char *)a1 + v19) & ((-1 << a4) - 1);
  v53 = a1;
  *(unint64_t *)((char *)a1 + v19) = v20;
  v21 = v18 - 1;
  v62 = a3 + 56;
  v54 = a5;
  while (2)
  {
    v52 = v21;
    do
    {
      while (1)
      {
        v23 = *a5;
        v22 = a5[1];
        v24 = a5[2];
        v25 = a5[3];
        v26 = a5[4];
        v59 = v24;
        v60 = v22;
        if (v26)
        {
          v58 = (v26 - 1) & v26;
          v27 = __clz(__rbit64(v26)) | (v25 << 6);
LABEL_6:
          v28 = v55;
          sub_1CCA0BEEC(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v11 + 72) * v27, v55, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
          v29 = 0;
          goto LABEL_7;
        }
        v42 = v25 + 1;
        if (__OFADD__(v25, 1))
        {
          __break(1u);
          goto LABEL_43;
        }
        v43 = (unint64_t)(v24 + 64) >> 6;
        if (v42 >= v43)
        {
          v58 = 0;
          v29 = 1;
          v28 = v55;
          goto LABEL_7;
        }
        v44 = *(_QWORD *)(v22 + 8 * v42);
        if (v44)
          goto LABEL_16;
        v47 = v25 + 2;
        if (v25 + 2 >= v43)
          goto LABEL_34;
        v44 = *(_QWORD *)(v22 + 8 * v47);
        if (v44)
          goto LABEL_22;
        if (v25 + 3 >= v43)
          goto LABEL_35;
        v44 = *(_QWORD *)(v22 + 8 * (v25 + 3));
        if (v44)
        {
          v42 = v25 + 3;
          goto LABEL_16;
        }
        v47 = v25 + 4;
        if (v25 + 4 < v43)
        {
          v44 = *(_QWORD *)(v22 + 8 * v47);
          if (v44)
          {
LABEL_22:
            v42 = v47;
LABEL_16:
            v58 = (v44 - 1) & v44;
            v27 = __clz(__rbit64(v44)) + (v42 << 6);
            v25 = v42;
            goto LABEL_6;
          }
          v42 = v25 + 5;
          if (v25 + 5 < v43)
          {
            v44 = *(_QWORD *)(v22 + 8 * v42);
            if (v44)
              goto LABEL_16;
            v42 = v43 - 1;
            v48 = v25 + 6;
            while (v43 != v48)
            {
              v44 = *(_QWORD *)(v22 + 8 * v48++);
              if (v44)
              {
                v42 = v48 - 1;
                goto LABEL_16;
              }
            }
LABEL_34:
            v58 = 0;
            v29 = 1;
            v25 = v42;
            v28 = v55;
            goto LABEL_7;
          }
LABEL_35:
          v58 = 0;
          v29 = 1;
          v25 = v47;
          v28 = v55;
          goto LABEL_7;
        }
        v58 = 0;
        v29 = 1;
        v25 += 3;
        v28 = v55;
LABEL_7:
        v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
        v31 = v11;
        v32 = v57;
        v30(v28, v29, 1, v57);
        v33 = v60;
        *a5 = v23;
        a5[1] = v33;
        a5[2] = v59;
        a5[3] = v25;
        a5[4] = v58;
        v34 = v31;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v28, 1, v32) == 1)
        {
          sub_1CC9C3E84(v28, &qword_1EF9E5C88);
          v49 = v56;
          swift_retain();
          return sub_1CCB31690(v53, v51, v52, v49);
        }
        sub_1CC9FED60(v28, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
        v35 = v56;
        sub_1CCB6433C();
        FMIPUnknownItem.hash(into:)((uint64_t)v61);
        v36 = sub_1CCB64384();
        v37 = -1 << *(_BYTE *)(v35 + 32);
        v38 = v36 & ~v37;
        if (((*(_QWORD *)(v62 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) != 0)
          break;
LABEL_3:
        result = sub_1CCA0BF30((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
        a5 = v54;
        v11 = v34;
      }
      v39 = ~v37;
      v40 = *(_QWORD *)(v34 + 72);
      while (1)
      {
        sub_1CCA0BEEC(*(_QWORD *)(v35 + 48) + v40 * v38, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
        v41 = _s8FMIPCore15FMIPUnknownItemV2eeoiySbAC_ACtFZ_0((uint64_t)v14, (uint64_t)v17);
        sub_1CCA0BF30((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
        if ((v41 & 1) != 0)
          break;
        v38 = (v38 + 1) & v39;
        if (((*(_QWORD *)(v62 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8)) >> v38) & 1) == 0)
          goto LABEL_3;
      }
      result = sub_1CCA0BF30((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
      v45 = (v38 >> 3) & 0x1FFFFFFFFFFFFFF8;
      a5 = v54;
      v46 = *(unint64_t *)((char *)v53 + v45);
      *(unint64_t *)((char *)v53 + v45) = v46 & ~(1 << v38);
      v11 = v34;
    }
    while ((v46 & (1 << v38)) == 0);
    v21 = v52 - 1;
    if (__OFSUB__(v52, 1))
    {
LABEL_43:
      __break(1u);
      return result;
    }
    if (v52 != 1)
      continue;
    return MEMORY[0x1E0DEE9E8];
  }
}

uint64_t sub_1CCB311F0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v8 = type metadata accessor for FMIPHawkeyeProductInformation();
  v48 = *(_QWORD *)(v8 - 8);
  v49 = v8;
  MEMORY[0x1E0C80A78](v8);
  v43 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCA14E90(&qword_1EF9DFB90);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FMIPDiscoveredAccessory();
  v46 = *(_QWORD *)(v13 - 8);
  v47 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_1CCA14E90(&qword_1EF9E1EC0);
  result = sub_1CCB63F94();
  v16 = result;
  v41 = a1;
  v42 = a2;
  if (a2 < 1)
    v18 = 0;
  else
    v18 = *a1;
  v19 = 0;
  v20 = result + 56;
  v44 = result;
  v45 = a4;
  while (1)
  {
    if (v18)
    {
      v50 = (v18 - 1) & v18;
      v51 = v19;
      v21 = __clz(__rbit64(v18)) | (v19 << 6);
    }
    else
    {
      v22 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_46;
      if (v22 >= v42)
      {
LABEL_43:
        swift_release();
        return v16;
      }
      v23 = v41[v22];
      v24 = v19 + 1;
      if (!v23)
      {
        v24 = v19 + 2;
        if (v19 + 2 >= v42)
          goto LABEL_43;
        v23 = v41[v24];
        if (!v23)
        {
          v24 = v19 + 3;
          if (v19 + 3 >= v42)
            goto LABEL_43;
          v23 = v41[v24];
          if (!v23)
          {
            v25 = v19 + 4;
            if (v19 + 4 >= v42)
              goto LABEL_43;
            v23 = v41[v25];
            if (!v23)
            {
              while (1)
              {
                v24 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_47;
                if (v24 >= v42)
                  goto LABEL_43;
                v23 = v41[v24];
                ++v25;
                if (v23)
                  goto LABEL_24;
              }
            }
            v24 = v19 + 4;
          }
        }
      }
LABEL_24:
      v50 = (v23 - 1) & v23;
      v51 = v24;
      v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }
    v26 = *(_QWORD *)(a4 + 48);
    v52 = *(_QWORD *)(v46 + 72);
    sub_1CCA0BEEC(v26 + v52 * v21, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
    sub_1CCB6433C();
    v27 = *(id *)v15;
    sub_1CCB63DFC();

    v28 = *((_QWORD *)v15 + 3);
    if (v28)
    {
      v29 = *((_QWORD *)v15 + 1);
      v30 = *((_QWORD *)v15 + 2);
      sub_1CCB64354();
      sub_1CCB64348();
      sub_1CCA7C9C8(v29, v30, v28);
      swift_bridgeObjectRetain();
      sub_1CCB639F4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1CCB639F4();
      swift_bridgeObjectRelease();
      sub_1CCA7C9F8(v29, v30, v28);
    }
    else
    {
      sub_1CCB64354();
    }
    sub_1CC9EAB74((uint64_t)&v15[*(int *)(v47 + 24)], (uint64_t)v12, &qword_1EF9DFB90);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v12, 1, v49) == 1)
    {
      sub_1CCB64354();
    }
    else
    {
      v31 = v43;
      sub_1CC9FED60((uint64_t)v12, v43, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
      sub_1CCB64354();
      FMIPHawkeyeProductInformation.hash(into:)();
      sub_1CCA0BF30(v31, (uint64_t (*)(_QWORD))type metadata accessor for FMIPHawkeyeProductInformation);
    }
    v16 = v44;
    a4 = v45;
    result = sub_1CCB64384();
    v32 = -1 << *(_BYTE *)(v16 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6))) != 0)
    {
      v35 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v38 = v34 == v37;
        if (v34 == v37)
          v34 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v20 + 8 * v34);
      }
      while (v39 == -1);
      v35 = __clz(__rbit64(~v39)) + (v34 << 6);
    }
    *(_QWORD *)(v20 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
    result = sub_1CC9FED60((uint64_t)v15, *(_QWORD *)(v16 + 48) + v35 * v52, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDiscoveredAccessory);
    ++*(_QWORD *)(v16 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    v18 = v50;
    v19 = v51;
    if (!a3)
      goto LABEL_43;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_1CCB31690(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  char v26[72];

  v24 = a1;
  v7 = type metadata accessor for FMIPUnknownItem();
  v25 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_1CCA14E90(&qword_1EF9E1EB0);
  result = sub_1CCB63F94();
  v10 = result;
  v23 = a2;
  if (a2 < 1)
    v12 = 0;
  else
    v12 = *v24;
  v13 = 0;
  v14 = result + 56;
  while (1)
  {
    if (v12)
    {
      v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v16 = v15 | (v13 << 6);
    }
    else
    {
      v17 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_30;
      if (v17 >= v23)
      {
LABEL_27:
        swift_release();
        return v10;
      }
      v18 = v24[v17];
      ++v13;
      if (!v18)
      {
        v13 = v17 + 1;
        if (v17 + 1 >= v23)
          goto LABEL_27;
        v18 = v24[v13];
        if (!v18)
        {
          v13 = v17 + 2;
          if (v17 + 2 >= v23)
            goto LABEL_27;
          v18 = v24[v13];
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v23)
              goto LABEL_27;
            v18 = v24[v19];
            if (!v18)
            {
              while (1)
              {
                v13 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_31;
                if (v13 >= v23)
                  goto LABEL_27;
                v18 = v24[v13];
                ++v19;
                if (v18)
                  goto LABEL_24;
              }
            }
            v13 = v19;
          }
        }
      }
LABEL_24:
      v12 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    v20 = *(_QWORD *)(v25 + 72);
    sub_1CCA0BEEC(*(_QWORD *)(a4 + 48) + v20 * v16, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    sub_1CCB6433C();
    FMIPUnknownItem.hash(into:)((uint64_t)v26);
    sub_1CCB64384();
    v21 = sub_1CCB63EB0();
    *(_QWORD *)(v14 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = sub_1CC9FED60((uint64_t)v9, *(_QWORD *)(v10 + 48) + v21 * v20, (uint64_t (*)(_QWORD))type metadata accessor for FMIPUnknownItem);
    ++*(_QWORD *)(v10 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    if (!a3)
      goto LABEL_27;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1CCB31910(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x1E0DEE9E8];
LABEL_36:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_1CCA14E90(&qword_1EF9E1ED8);
  result = sub_1CCB63F94();
  v9 = result;
  v28 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v28[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v28[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = sub_1CCB63DE4();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v28[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v28[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

void sub_1CCB31B6C(os_log_type_t a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *log;
  uint64_t v7;

  if (qword_1EF9DEF58 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1EF9FF468);
  v3 = a1;
  log = sub_1CCB637D8();
  if (os_log_type_enabled(log, a1))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v7 = v5;
    sub_1CCB63FB8();
    sub_1CCB63A24();
    FMIPAccessoryError.localizedDescription.getter();
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
    sub_1CCB63A24();
    sub_1CCA0CB60(0, 0xE000000000000000, &v7);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, log, v3, "FMIPUnknownAccessoryDiscoveryController: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v5, -1, -1);
    MEMORY[0x1D17B214C](v4, -1, -1);

  }
  else
  {

  }
}

void sub_1CCB31D78(os_log_type_t a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *log;
  uint64_t v7;

  if (qword_1EF9DEF58 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1EF9FF468);
  v3 = a1;
  log = sub_1CCB637D8();
  if (os_log_type_enabled(log, a1))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v7 = v5;
    sub_1CCB63FB8();
    sub_1CCB63A24();
    swift_getErrorValue();
    sub_1CCB64300();
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
    sub_1CCB63A24();
    sub_1CCA0CB60(0, 0xE000000000000000, &v7);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, log, v3, "FMIPUnknownAccessoryDiscoveryController: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v5, -1, -1);
    MEMORY[0x1D17B214C](v4, -1, -1);

  }
  else
  {

  }
}

void sub_1CCB31F88(os_log_type_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  NSObject *log;
  uint64_t v10;

  if (qword_1EF9DEF58 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1EF9FF468);
  log = sub_1CCB637D8();
  if (os_log_type_enabled(log, a1))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v10 = v8;
    *(_DWORD *)v7 = 136315138;
    sub_1CCA0CB60(a2, a3, &v10);
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, log, a1, "FMIPUnknownAccessoryDiscoveryController: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v8, -1, -1);
    MEMORY[0x1D17B214C](v7, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1CCB32110()
{
  uint64_t v0;

  return sub_1CCB2D344(v0);
}

uint64_t sub_1CCB32118()
{
  uint64_t v0;

  swift_release();
  sub_1CCADEC6C(*(id *)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_1CCB32148()
{
  uint64_t v0;

  return sub_1CCB2D044(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_1CCB32154()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB32178()
{
  uint64_t v0;

  return sub_1CCB2C6A0(*(void (**)(char *))(v0 + 16));
}

uint64_t sub_1CCB32180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1CCB63490();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1CCB321F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_1CCB63490() - 8) + 80);
  return sub_1CCB2C5E4(*(void (**)(char *))(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_1CCB32228()
{
  return sub_1CCB32320(2, 1);
}

uint64_t sub_1CCB32234()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void sub_1CCB3225C(void *a1)
{
  uint64_t v1;

  sub_1CCB2B8C8(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1CCB32270()
{
  return sub_1CCB32320(0, 0);
}

void sub_1CCB32280()
{
  uint64_t v0;

  sub_1CCB2BDD8(*(void (**)(void **))(v0 + 16), *(_QWORD *)(v0 + 24), *(id *)(v0 + 32));
}

uint64_t sub_1CCB322A0()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  return swift_deallocObject();
}

void sub_1CCB322DC(void *a1)
{
  uint64_t v1;

  sub_1CCB2AD78(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1CCB322F4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB32320(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v4;
  char v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = result;
    v6 = a2 & 1;
    return v3(&v4);
  }
  return result;
}

uint64_t sub_1CCB32368()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();

  return swift_deallocObject();
}

uint64_t sub_1CCB3239C(uint64_t a1)
{
  return sub_1CCB2D720(a1);
}

uint64_t sub_1CCB323A4()
{
  return sub_1CCB2D900();
}

void sub_1CCB323AC(void *a1)
{
  sub_1CCB2DA34(a1);
}

void sub_1CCB323B4()
{
  sub_1CCB2DAD0();
}

uint64_t sub_1CCB323BC@<X0>(BOOL *a1@<X8>)
{
  return sub_1CCB2DB68(a1);
}

uint64_t sub_1CCB323D4()
{
  uint64_t v0;

  return sub_1CCB2C7AC(v0);
}

uint64_t sub_1CCB323DC()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB323F0()
{
  uint64_t v0;

  return sub_1CCB2C838(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCB323F8()
{
  return swift_deallocObject();
}

void sub_1CCB32408(os_log_type_t a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *log;
  uint64_t v7;

  if (qword_1EF9DEF58 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1EF9FF468);
  v3 = a1;
  log = sub_1CCB637D8();
  if (os_log_type_enabled(log, a1))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v7 = v5;
    sub_1CCB63FB8();
    sub_1CCB63A24();
    sub_1CC9C30A8(0, &qword_1EF9E28C0);
    sub_1CCB2A694();
    sub_1CCB63C4C();
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
    sub_1CCB63A24();
    sub_1CCA0CB60(0, 0xE000000000000000, &v7);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, log, v3, "FMIPUnknownAccessoryDiscoveryController: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v5, -1, -1);
    MEMORY[0x1D17B214C](v4, -1, -1);

  }
  else
  {

  }
}

void sub_1CCB32624(os_log_type_t a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *log;
  uint64_t v7;

  if (qword_1EF9DEF58 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1EF9FF468);
  v3 = a1;
  log = sub_1CCB637D8();
  if (os_log_type_enabled(log, a1))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v7 = v5;
    sub_1CCB63FB8();
    sub_1CCB63A24();
    type metadata accessor for FMIPUnknownItem();
    sub_1CC9CAA38(&qword_1EF9E1EB8, (uint64_t (*)(uint64_t))type metadata accessor for FMIPUnknownItem, (uint64_t)&protocol conformance descriptor for FMIPUnknownItem);
    sub_1CCB63C4C();
    sub_1CCB63A24();
    swift_bridgeObjectRelease();
    sub_1CCB63A24();
    sub_1CCA0CB60(0, 0xE000000000000000, &v7);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, log, v3, "FMIPUnknownAccessoryDiscoveryController: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v5, -1, -1);
    MEMORY[0x1D17B214C](v4, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1CCB32854()
{
  uint64_t v0;

  return sub_1CCB2CD40(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCB32860()
{
  uint64_t v0;

  return sub_1CCB2CDAC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCB3292C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = sub_1CCB63490();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA0CA90();
  sub_1CCB63448();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

_QWORD *FMIPItemImageCache.__allocating_init(converter:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return FMImageCache.init(converter:)(a1, a2);
}

uint64_t FMIPItemImageCache.__deallocating_deinit()
{
  FMImageCache.deinit();
  return swift_deallocClassInstance();
}

BOOL static FMIPSiriBaseResponseError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t FMIPSiriBaseResponseError.hash(into:)()
{
  return sub_1CCB64348();
}

uint64_t FMIPSiriBaseResponseError.hashValue.getter()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

uint64_t FMIPSiriSyncDeviceData.pushToken.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPSiriSyncDeviceData.ownersDevices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FMIPSiriOwnerDevices.ownerFirstName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPSiriOwnerDevices.ownerLastName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPSiriOwnerDevices.deviceNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FMIPSiriController.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_1CCA14E90(&qword_1ED8AA618);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1CCB636B8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  type metadata accessor for FMIPSiriController();
  v4 = swift_allocObject();
  sub_1CCB32C08((uint64_t)v2);
  return v4;
}

uint64_t type metadata accessor for FMIPSiriController()
{
  return objc_opt_self();
}

uint64_t sub_1CCB32C08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = sub_1CCA14E90(&qword_1ED8AA618);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0xD000000000000028;
  *(_QWORD *)(v1 + 24) = 0x80000001CCB7E720;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v7 = sub_1CCB637FC();
  sub_1CCA16C20(v7, (uint64_t)qword_1ED8AD7F8);
  v8 = sub_1CCB637D8();
  v9 = sub_1CCB63D48();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1CC9BF000, v8, v9, "FMIPSiriController: initialized", v10, 2u);
    MEMORY[0x1D17B214C](v10, -1, -1);
  }

  sub_1CCB636D0();
  swift_allocObject();
  sub_1CCB636C4();
  sub_1CCA2491C(a1, (uint64_t)v6);
  sub_1CCB63730();
  swift_allocObject();
  *(_QWORD *)(v2 + 32) = sub_1CCB63724();
  v11 = sub_1CCB636E8();
  swift_bridgeObjectRetain();
  v12 = sub_1CCB636DC();
  v16 = v11;
  v17 = MEMORY[0x1E0D20B00];
  *(_QWORD *)&v15 = v12;
  sub_1CCB34554(a1);
  sub_1CCA21ACC(&v15, v2 + 40);
  return v2;
}

uint64_t sub_1CCB32DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_allocObject();
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = v2;
  sub_1CCA04DDC((_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 64));
  swift_retain();
  swift_retain();
  sub_1CCB636AC();
  return swift_release();
}

void sub_1CCB32E84(id a1, uint64_t a2, char a3, void (*a4)(uint64_t *), uint64_t a5)
{
  _QWORD *v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22[3];
  char v23;

  if ((a3 & 1) != 0)
  {
    v10 = a1;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v11 = sub_1CCB637FC();
    sub_1CCA16C20(v11, (uint64_t)qword_1ED8AD7F8);
    v12 = a1;
    v13 = a1;
    v14 = sub_1CCB637D8();
    v15 = sub_1CCB63D30();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v22[0] = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = a1;
      sub_1CCA14E90(&qword_1EF9DF470);
      v19 = sub_1CCB639AC();
      sub_1CCA0CB60(v19, v20, v22);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CCB3447C(a1, a2, 1);
      sub_1CCB3447C(a1, a2, 1);
      _os_log_impl(&dword_1CC9BF000, v14, v15, "FMIPSiriController topic token resulted in a failure of %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v17, -1, -1);
      MEMORY[0x1D17B214C](v16, -1, -1);
    }
    else
    {
      sub_1CCB3447C(a1, a2, 1);
      sub_1CCB3447C(a1, a2, 1);
    }

    v22[1] = 0;
    v22[2] = 0;
    v22[0] = (uint64_t)a1;
    v23 = 1;
    v21 = a1;
    a4(v22);
    sub_1CCB3447C(a1, a2, 1);
    sub_1CCB3447C(a1, a2, 1);
  }
  else
  {
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = a1;
    v9[3] = a2;
    v9[4] = a4;
    v9[5] = a5;
    sub_1CCB3446C(a1, a2, 0);
    swift_retain();
    sub_1CCB3348C((uint64_t)a1, a2, (uint64_t)sub_1CCB34460, (uint64_t)v9);
    swift_release();
  }
}

void sub_1CCB33148(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;

  sub_1CCB32E84(a1, a2, a3 & 1, *(void (**)(uint64_t *))(v3 + 16), *(_QWORD *)(v3 + 24));
}

void sub_1CCB33158(uint64_t a1, void *a2, uint64_t a3, void (*a4)(_QWORD))
{
  void *v8;
  uint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  void *v32;
  uint64_t v33;
  void (*v34)(_QWORD);
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  char v44;
  _QWORD v45[10];
  _BYTE v46[72];
  char v47;

  sub_1CCB3431C(a1, (uint64_t)v45);
  v8 = (void *)v45[0];
  v9 = v45[4];
  sub_1CCB3431C(a1, (uint64_t)v46);
  v10 = v47;
  if ((v47 & 1) != 0)
  {
    v11 = v8;
    v12 = 0;
    a3 = 0;
    a2 = v8;
  }
  else
  {
    v13 = *(_QWORD *)(v9 + 16);
    if (v13)
    {
      v31 = v47;
      v32 = a2;
      v33 = a3;
      v34 = a4;
      swift_bridgeObjectRetain();
      v30 = a1;
      sub_1CCB344BC(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1CCB3450C);
      v43[0] = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1CCA63AD8(0, v13, 0);
      v14 = 0;
      v12 = v43[0];
      v35 = v13;
      v36 = v9 + 32;
      v15 = v13;
      do
      {
        v16 = (uint64_t *)(v36 + 40 * v14);
        v17 = *v16;
        v39 = v16[2];
        v40 = v16[3];
        v18 = v16[4];
        v19 = *(_QWORD *)(v18 + 16);
        v41 = v16[1];
        if (v19)
        {
          v37 = *v16;
          v38 = v12;
          v42 = MEMORY[0x1E0DEE9D8];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          sub_1CCA6388C(0, v19, 0);
          v20 = v42;
          v21 = (uint64_t *)(v18 + 40);
          do
          {
            v22 = *(v21 - 1);
            v23 = *v21;
            v25 = *(_QWORD *)(v42 + 16);
            v24 = *(_QWORD *)(v42 + 24);
            swift_bridgeObjectRetain();
            if (v25 >= v24 >> 1)
              sub_1CCA6388C(v24 > 1, v25 + 1, 1);
            v21 += 2;
            *(_QWORD *)(v42 + 16) = v25 + 1;
            v26 = v42 + 16 * v25;
            *(_QWORD *)(v26 + 32) = v22;
            *(_QWORD *)(v26 + 40) = v23;
            --v19;
          }
          while (v19);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          v17 = v37;
          v12 = v38;
          v15 = v35;
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v20 = MEMORY[0x1E0DEE9D8];
        }
        v43[0] = v12;
        v28 = *(_QWORD *)(v12 + 16);
        v27 = *(_QWORD *)(v12 + 24);
        if (v28 >= v27 >> 1)
        {
          sub_1CCA63AD8(v27 > 1, v28 + 1, 1);
          v12 = v43[0];
        }
        ++v14;
        *(_QWORD *)(v12 + 16) = v28 + 1;
        v29 = (_QWORD *)(v12 + 40 * v28);
        v29[4] = v39;
        v29[5] = v40;
        v29[6] = v17;
        v29[7] = v41;
        v29[8] = v20;
      }
      while (v14 != v15);
      swift_bridgeObjectRelease();
      sub_1CCB344BC(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1CCB34364);
      a4 = v34;
      a2 = v32;
      a3 = v33;
      v10 = v31;
    }
    else
    {
      swift_bridgeObjectRetain();
      v12 = MEMORY[0x1E0DEE9D8];
    }
  }
  v43[0] = a2;
  v43[1] = a3;
  v43[2] = v12;
  v44 = v10;
  a4(v43);
  sub_1CCB3448C(a2, a3, v12, v10);
}

uint64_t sub_1CCB33434()
{
  uint64_t v0;

  sub_1CCA04DDC((_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 64));
  return sub_1CCB636AC();
}

uint64_t sub_1CCB3348C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD v17[5];
  _QWORD v18[5];

  v5 = v4;
  v10 = type metadata accessor for FMIPSyncDeviceRequest();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v11 = sub_1CCAF7878((uint8_t *)0x69766544636E7973, 0xEA00000000006563, a1, a2);
  v18[3] = v10;
  v18[4] = MEMORY[0x1E0D20AA0];
  v18[0] = v11;
  v17[3] = v10;
  v17[4] = sub_1CCB342C4();
  v12 = (void *)objc_opt_self();
  swift_retain_n();
  v13 = objc_msgSend(v12, sel_processInfo, v11);
  v14 = objc_msgSend(v13, sel_processName);

  sub_1CCB63988();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = v5;
  swift_retain();
  swift_retain();
  sub_1CCB63718();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1CCA01CA0((uint64_t)v17);
  return sub_1CCA01CA0((uint64_t)v18);
}

uint64_t sub_1CCB3362C(uint64_t a1, unint64_t a2, void *a3, void (*a4)(_BYTE *))
{
  _BYTE v6[80];
  _BYTE v7[80];

  sub_1CCB33690(a3, a2, (uint64_t)v6);
  sub_1CCB3431C((uint64_t)v6, (uint64_t)v7);
  a4(v7);
  return sub_1CCB344BC((uint64_t)v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1CCB34364);
}

void sub_1CCB33690(id a1@<X2>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;

  if (a1)
  {
    v5 = a1;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v6 = sub_1CCB637FC();
    sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD7F8);
    v7 = a1;
    v8 = a1;
    v9 = sub_1CCB637D8();
    v10 = sub_1CCB63D30();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v21 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_getErrorValue();
      v13 = sub_1CCB64300();
      sub_1CCA0CB60(v13, v14, &v21);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, v9, v10, "FMIPSiriController: didn't complete because of error: %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v12, -1, -1);
      MEMORY[0x1D17B214C](v11, -1, -1);
    }
    else
    {

    }
    *(_QWORD *)a3 = a1;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  else
  {
    if (a2 >> 60 != 15)
      __asm { BR              X10 }
    if (qword_1ED8AA630 != -1)
      swift_once();
    v15 = sub_1CCB637FC();
    sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD7F8);
    v16 = sub_1CCB637D8();
    v17 = sub_1CCB63D30();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1CC9BF000, v16, v17, "FMIPSiriController: received empty data", v18, 2u);
      MEMORY[0x1D17B214C](v18, -1, -1);
    }

    sub_1CCB343AC();
    v19 = swift_allocError();
    *v20 = 1;
    *(_QWORD *)a3 = v19;
  }
  *(_BYTE *)(a3 + 72) = 1;
}

uint64_t FMIPSiriController.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  sub_1CCA01CA0(v0 + 40);
  return v0;
}

uint64_t FMIPSiriController.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  sub_1CCA01CA0(v0 + 40);
  return swift_deallocClassInstance();
}

unint64_t sub_1CCB33E9C()
{
  unint64_t result;

  result = qword_1EF9E5D18;
  if (!qword_1EF9E5D18)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPSiriBaseResponseError, &type metadata for FMIPSiriBaseResponseError);
    atomic_store(result, (unint64_t *)&qword_1EF9E5D18);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPSiriBaseResponseError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCB33F2C + 4 * byte_1CCB73779[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCB33F60 + 4 * byte_1CCB73774[v4]))();
}

uint64_t sub_1CCB33F60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB33F68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB33F70);
  return result;
}

uint64_t sub_1CCB33F7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB33F84);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCB33F88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB33F90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPSiriBaseResponseError()
{
  return &type metadata for FMIPSiriBaseResponseError;
}

_QWORD *sub_1CCB33FB0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FMIPSiriSyncDeviceData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FMIPSiriSyncDeviceData(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FMIPSiriSyncDeviceData()
{
  return &type metadata for FMIPSiriSyncDeviceData;
}

uint64_t destroy for FMIPSiriOwnerDevices()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FMIPSiriOwnerDevices(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FMIPSiriOwnerDevices(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FMIPSiriOwnerDevices(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPSiriOwnerDevices(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPSiriOwnerDevices(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPSiriOwnerDevices()
{
  return &type metadata for FMIPSiriOwnerDevices;
}

uint64_t method lookup function for FMIPSiriController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPSiriController.getVoiceAssistantSyncDevices(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of FMIPSiriController.getVoiceAssistantPushToken(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

unint64_t sub_1CCB342C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED8AA530;
  if (!qword_1ED8AA530)
  {
    v1 = type metadata accessor for FMIPSyncDeviceRequest();
    result = MEMORY[0x1D17B2068](&unk_1CCB6F740, v1);
    atomic_store(result, (unint64_t *)&qword_1ED8AA530);
  }
  return result;
}

uint64_t sub_1CCB34310(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_1CCB3362C(a1, a2, a3, *(void (**)(_BYTE *))(v3 + 16));
}

uint64_t sub_1CCB3431C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8AA608);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1CCB34364(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((a10 & 1) != 0)
  {

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_1CCB343AC()
{
  unint64_t result;

  result = qword_1EF9E5D20;
  if (!qword_1EF9E5D20)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPSiriBaseResponseError, &type metadata for FMIPSiriBaseResponseError);
    atomic_store(result, (unint64_t *)&qword_1EF9E5D20);
  }
  return result;
}

unint64_t sub_1CCB343F0()
{
  unint64_t result;

  result = qword_1ED8AA588;
  if (!qword_1ED8AA588)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75DB8, &type metadata for FMIPSyncDeviceResponse);
    atomic_store(result, (unint64_t *)&qword_1ED8AA588);
  }
  return result;
}

uint64_t sub_1CCB34434()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_1CCB34460(uint64_t a1)
{
  uint64_t v1;

  sub_1CCB33158(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD))(v1 + 32));
}

id sub_1CCB3446C(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

void sub_1CCB3447C(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

void sub_1CCB3448C(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
  {

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1CCB344BC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 72);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v4);
  return a1;
}

id sub_1CCB3450C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((a10 & 1) != 0)
    return a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return (id)swift_bridgeObjectRetain();
}

uint64_t sub_1CCB34554(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CCA14E90(&qword_1ED8AA618);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for FMIPRemoveRequest()
{
  uint64_t result;

  result = qword_1EF9E5D28;
  if (!qword_1EF9E5D28)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCB345D0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1CCB3461C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v1 = (uint64_t *)(*(_QWORD *)(v0 + qword_1EF9FF7E8) + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  v2 = *v1;
  v3 = v1[1];
  v5[3] = MEMORY[0x1E0DEA968];
  v5[0] = v2;
  v5[1] = v3;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)v5, 0x656369766564, 0xE600000000000000);
  return swift_endAccess();
}

uint64_t sub_1CCB346B8()
{
  return swift_release();
}

uint64_t sub_1CCB346C8()
{
  sub_1CC9C785C();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB34708()
{
  return type metadata accessor for FMIPRemoveRequest();
}

uint64_t sub_1CCB34720()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation__isFinished);
}

void sub_1CCB347E4(char a1)
{
  void *v1;
  void *v3;
  id v4;

  v3 = (void *)sub_1CCB63964();
  objc_msgSend(v1, sel_willChangeValueForKey_, v3);

  *((_BYTE *)v1 + OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation__isFinished) = a1;
  v4 = (id)sub_1CCB63964();
  objc_msgSend(v1, sel_didChangeValueForKey_, v4);

}

id FMIPItemImageCacheOperation.__allocating_init(request:completion:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  objc_super v17;

  v7 = objc_allocWithZone(v3);
  v8 = *a1;
  v9 = a1[1];
  v10 = *((_BYTE *)a1 + 16);
  v11 = a1[3];
  v12 = *((_OWORD *)a1 + 2);
  v13 = a1[6];
  v7[OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation__isFinished] = 0;
  v14 = &v7[OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation_request];
  *(_QWORD *)v14 = v8;
  *((_QWORD *)v14 + 1) = v9;
  v14[16] = v10;
  *((_QWORD *)v14 + 3) = v11;
  *((_OWORD *)v14 + 2) = v12;
  *((_QWORD *)v14 + 6) = v13;
  v15 = &v7[OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation_completion];
  *v15 = a2;
  v15[1] = a3;
  v17.receiver = v7;
  v17.super_class = v3;
  return objc_msgSendSuper2(&v17, sel_init);
}

id FMIPItemImageCacheOperation.init(request:completion:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  objc_super v13;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_BYTE *)a1 + 16);
  v7 = a1[3];
  v8 = *((_OWORD *)a1 + 2);
  v9 = a1[6];
  v3[OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation__isFinished] = 0;
  v10 = &v3[OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation_request];
  *(_QWORD *)v10 = v4;
  *((_QWORD *)v10 + 1) = v5;
  v10[16] = v6;
  *((_QWORD *)v10 + 3) = v7;
  *((_OWORD *)v10 + 2) = v8;
  *((_QWORD *)v10 + 6) = v9;
  v11 = &v3[OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation_completion];
  *v11 = a2;
  v11[1] = a3;
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for FMIPItemImageCacheOperation();
  return objc_msgSendSuper2(&v13, sel_init);
}

void sub_1CCB349B4()
{
  void *v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (objc_msgSend(v0, sel_isCancelled))
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v1 = sub_1CCB637FC();
    sub_1CCA16C20(v1, (uint64_t)qword_1ED8AD7F8);
    oslog = sub_1CCB637D8();
    v2 = sub_1CCB63D48();
    if (os_log_type_enabled(oslog, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1CC9BF000, oslog, v2, "FMItemImageCreationOperation: operation cancelled", v3, 2u);
      MEMORY[0x1D17B214C](v3, -1, -1);
    }

  }
}

uint64_t sub_1CCB34B9C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  uint64_t v8;
  _BYTE *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t *v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  size_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  char *v40;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t aBlock;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  void *v50;
  __int128 v51;
  uint64_t v52;
  objc_super v53;

  v1 = sub_1CCB63820();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCB63868();
  v44 = *(_QWORD *)(v5 - 8);
  v45 = v5;
  MEMORY[0x1E0C80A78](v5);
  v43 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (objc_class *)type metadata accessor for FMIPItemImageCacheOperation();
  v53.receiver = v0;
  v53.super_class = v7;
  objc_msgSendSuper2(&v53, sel_start);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v8 = sub_1CCB637FC();
  sub_1CCA16C20(v8, (uint64_t)qword_1ED8AD7F8);
  v9 = v0;
  v10 = sub_1CCB637D8();
  v11 = sub_1CCB63D48();
  v12 = &qword_1EF9E5000;
  if (os_log_type_enabled(v10, v11))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v42 = v4;
    v15 = v14;
    *(_DWORD *)v13 = 136315138;
    v16 = *(_QWORD *)&v9[OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation_request];
    v17 = *(_QWORD *)&v9[OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation_request + 8];
    v18 = v9[OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation_request + 16];
    v19 = *(void **)&v9[OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation_request + 24];
    v20 = *(_OWORD *)&v9[OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation_request + 32];
    v21 = *(_QWORD *)&v9[OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation_request + 48];
    v46 = v14;
    aBlock = v16;
    v48 = v17;
    LOBYTE(v49) = v18;
    v50 = v19;
    v51 = v20;
    v52 = v21;
    v22 = FMIPItemImageCacheRequest.fileName.getter();
    aBlock = sub_1CCA0CB60(v22, v23, &v46);
    sub_1CCB63E44();

    v12 = &qword_1EF9E5000;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v10, v11, "FMItemImageCreationOperation: started for filename: %s", v13, 0xCu);
    swift_arrayDestroy();
    v24 = v15;
    v4 = v42;
    MEMORY[0x1D17B214C](v24, -1, -1);
    MEMORY[0x1D17B214C](v13, -1, -1);

  }
  else
  {

  }
  v25 = &v9[v12[432]];
  v26 = *((_QWORD *)v25 + 1);
  v27 = v25[16];
  v28 = (void *)*((_QWORD *)v25 + 3);
  v30 = (void *)*((_QWORD *)v25 + 4);
  v29 = *((_QWORD *)v25 + 5);
  v31 = *((_QWORD *)v25 + 6);
  aBlock = *(_QWORD *)v25;
  v48 = v26;
  LOBYTE(v49) = v27;
  v50 = v28;
  *(_QWORD *)&v51 = v30;
  *((_QWORD *)&v51 + 1) = v29;
  v52 = v31;
  swift_bridgeObjectRetain();
  v32 = v30;
  swift_bridgeObjectRetain();
  v33 = sub_1CCB35140((uint64_t)&aBlock);
  v35 = v34;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A8E30);
  v36 = (void *)sub_1CCB63D90();
  v37 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v38 = (_QWORD *)swift_allocObject();
  v38[2] = v37;
  v38[3] = v33;
  v38[4] = v35;
  *(_QWORD *)&v51 = sub_1CCB35AF8;
  *((_QWORD *)&v51 + 1) = v38;
  aBlock = MEMORY[0x1E0C809B0];
  v48 = 1107296256;
  v49 = sub_1CCA00C38;
  v50 = &unk_1E88FF858;
  v39 = _Block_copy(&aBlock);
  sub_1CCA24A48(v33, v35);
  swift_release();
  v40 = v43;
  sub_1CCB63844();
  aBlock = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA1FC64();
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v40, v4, v39);
  _Block_release(v39);

  sub_1CCA1B1A8(v33, v35);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v40, v45);
}

void sub_1CCB34FF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void (*v8)(void *, unint64_t, uint64_t);
  void *v9;
  _BYTE *v10;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x1D17B2218](v5);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = *(void (**)(void *, unint64_t, uint64_t))(v6
                                                                  + OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation_completion);
    if (a3 >> 60 == 15)
    {
      sub_1CCA1A89C();
      v9 = (void *)swift_allocError();
      *v10 = 0;
      swift_retain();
      v8(v9, 0, 1);

      swift_release();
    }
    else
    {
      sub_1CCA24A48(a2, a3);
      swift_retain();
      v8((void *)a2, a3, 0);
      swift_release();
      sub_1CCA1B1A8(a2, a3);
    }
    objc_msgSend(v7, sel_setFinished_, 1);

  }
}

size_t sub_1CCB35140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  size_t result;
  uint64_t v6;
  char *v7;
  int v8;
  double v9;
  double v10;
  CGColor *v11;
  int64_t v12;
  CGColorSpace *DeviceRGB;
  CGContextRef v14;
  CGContext *v15;
  double v16;
  CGImage *v17;
  CGImage *v18;
  CGImageRef Image;
  CGImageRef v20;
  __CFData *Mutable;
  __CFString *v22;
  CGImageDestination *v23;
  __CFData *v24;
  _QWORD v25[2];
  CGRect v26;

  v3 = sub_1CCB63670();
  v4 = *(_QWORD *)(v3 - 8);
  result = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned __int8 *)(a1 + 16);
  v9 = 37.0;
  if (*(_BYTE *)(a1 + 16))
    v9 = 66.0;
  v10 = v9 * *(double *)(a1 + 24);
  if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v10 >= 9.22337204e18)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v25[1] = v1;
  v11 = *(CGColor **)(a1 + 32);
  v12 = (uint64_t)v10;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v14 = CGBitmapContextCreate(0, v12, v12, 8uLL, 0, DeviceRGB, 1u);

  if (!v14)
    return 0;
  v15 = v14;
  CGContextSetFillColorWithColor(v15, v11);
  v26.origin.x = 0.0;
  v26.origin.y = 0.0;
  v26.size.width = (double)v12;
  v26.size.height = (double)v12;
  CGContextAddEllipseInRect(v15, v26);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E0C9B8A0], v3);
  sub_1CCB63D00();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v16 = 0.7;
  if (v8)
    v16 = 0.6;
  v17 = sub_1CCB35B18(v16 * (double)v12);
  if (!v17)
    goto LABEL_20;
  v18 = v17;
  result = CGImageGetWidth(v17);
  if (__OFSUB__(v12, result))
    goto LABEL_27;
  result = CGImageGetHeight(v18);
  if (!__OFSUB__(v12, result))
  {
    CGImageGetWidth(v18);
    CGImageGetHeight(v18);
    sub_1CCB63CF4();
    Image = CGBitmapContextCreateImage(v15);
    if (!Image)
    {

      return 0;
    }
    v20 = Image;
    Mutable = CFDataCreateMutable(0, 0);
    if (!Mutable)
    {

      return (size_t)Mutable;
    }
    v22 = (__CFString *)sub_1CCB63964();
    v23 = CGImageDestinationCreateWithData(Mutable, v22, 1uLL, 0);

    if (v23)
    {
      CGImageDestinationAddImage(v23, v20, 0);
      if (CGImageDestinationFinalize(v23))
      {
        v24 = Mutable;
        Mutable = (__CFData *)sub_1CCB634CC();

        return (size_t)Mutable;
      }

      return 0;
    }

LABEL_20:
    return 0;
  }
LABEL_28:
  __break(1u);
  return result;
}

CGImageRef sub_1CCB354A8()
{
  CGImage *v0;
  CGImage *v1;
  size_t Width;
  size_t Height;
  size_t v4;
  CGColorSpace *DeviceGray;
  CGContextRef v6;
  CGContext *v7;
  CGImage *Image;
  CGImage *v9;
  CGImage *v10;
  CGDataProvider *v11;
  CGImageRef v12;
  CFDataRef v13;
  CFDataRef v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  size_t v22;
  int64_t v23;
  CGImageRef v25;
  size_t v26;
  unint64_t v27;
  CGRect v28;

  v1 = v0;
  Width = CGImageGetWidth(v0);
  Height = CGImageGetHeight(v1);
  v4 = CGImageGetWidth(v1);
  DeviceGray = CGColorSpaceCreateDeviceGray();
  v6 = CGBitmapContextCreate(0, Width, Height, 8uLL, v4, DeviceGray, 7u);

  if (!v6)
    return 0;
  v7 = v6;
  CGImageGetWidth(v1);
  CGImageGetHeight(v1);
  sub_1CCB63CF4();

  Image = CGBitmapContextCreateImage(v7);
  if (!Image)
  {
LABEL_19:

    return 0;
  }
  v9 = Image;
  v10 = v1;
  v11 = CGImageGetDataProvider(Image);
  v12 = v11;
  if (!v11)
  {

    return v12;
  }
  v13 = CGDataProviderCopyData(v11);
  if (!v13)
  {

    goto LABEL_19;
  }
  v14 = v13;
  v15 = sub_1CCB634CC();
  v27 = v16;

  v17 = CGImageGetWidth(v10);
  v18 = CGImageGetHeight(v10);
  v19 = CGImageGetHeight(v10);
  if ((v19 & 0x8000000000000000) != 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v20 = v19;
  v25 = v12;
  if (v19)
  {
    v21 = 0;
    v26 = v19;
    while (v21 != v20)
    {
      v22 = CGImageGetWidth(v10);
      if ((v22 & 0x8000000000000000) != 0)
        goto LABEL_24;
      if (v22)
      {
        v23 = CGImageGetWidth(v10);
        if ((unsigned __int128)(v23 * (__int128)v21) >> 64 == (v23 * v21) >> 63)
          __asm { BR              X8 }
        __break(1u);
        __break(1u);
        JUMPOUT(0x1CCB358A4);
      }
      ++v21;
      v20 = v26;
      if (v21 == v26)
        goto LABEL_15;
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_15:
  if (__OFSUB__(0, v17))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFSUB__(0, v18))
  {
LABEL_27:
    __break(1u);
    JUMPOUT(0x1CCB358D0);
  }
  v28.origin.x = (double)v17;
  v28.origin.y = (double)v18;
  v28.size.width = (double)-v17 + 1.0;
  v28.size.height = (double)-v18 + 1.0;
  v12 = CGImageCreateWithImageInRect(v10, v28);

  sub_1CCA1B120(v15, v27);
  return v12;
}

id FMIPItemImageCacheOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void FMIPItemImageCacheOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id FMIPItemImageCacheOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMIPItemImageCacheOperation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1CCB359F4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  objc_super v17;

  v6 = (objc_class *)type metadata accessor for FMIPItemImageCacheOperation();
  v7 = objc_allocWithZone(v6);
  v8 = *a1;
  v9 = a1[1];
  v10 = *((_BYTE *)a1 + 16);
  v11 = a1[3];
  v12 = *((_OWORD *)a1 + 2);
  v13 = a1[6];
  v7[OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation__isFinished] = 0;
  v14 = &v7[OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation_request];
  *(_QWORD *)v14 = v8;
  *((_QWORD *)v14 + 1) = v9;
  v14[16] = v10;
  *((_QWORD *)v14 + 3) = v11;
  *((_OWORD *)v14 + 2) = v12;
  *((_QWORD *)v14 + 6) = v13;
  v15 = &v7[OBJC_IVAR____TtC8FMIPCore27FMIPItemImageCacheOperation_completion];
  *v15 = a2;
  v15[1] = a3;
  v17.receiver = v7;
  v17.super_class = v6;
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t sub_1CCB35A98()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1CCB35ABC()
{
  uint64_t v0;
  unint64_t v1;

  swift_release();
  v1 = *(_QWORD *)(v0 + 32);
  if (v1 >> 60 != 15)
    sub_1CCA1B120(*(_QWORD *)(v0 + 24), v1);
  return swift_deallocObject();
}

void sub_1CCB35AF8()
{
  uint64_t v0;

  sub_1CCB34FF0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t method lookup function for FMIPItemImageCacheOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPItemImageCacheOperation.__allocating_init(request:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

CGImageRef sub_1CCB35B18(double a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  const __CFDictionary *v11;
  const __CTFontDescriptor *v12;
  CTFontRef v13;
  uint64_t inited;
  void *v15;
  id v16;
  const __CTFont *v17;
  void *v18;
  void *v19;
  const __CFDictionary *v20;
  const __CFAllocator *v21;
  __CFString *v22;
  const __CFAttributedString *v23;
  const __CTFramesetter *v24;
  CGSize v25;
  const CGPath *v26;
  CTFrameRef Frame;
  double v28;
  double v29;
  size_t v30;
  size_t v31;
  CGColorSpace *DeviceRGB;
  CGContext *v33;
  CGImageRef Image;
  CGImageRef v35;
  CGImageRef v36;
  uint64_t v37;
  const __CTFontDescriptor *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  _QWORD *v42;
  const __CTFontDescriptor *v43;
  const __CTFontDescriptor *v44;
  const __CFDictionary *v45;
  os_log_type_t type;
  const __CTFramesetter *v48;
  const __CFAttributedString *v49;
  const __CTFont *v50;
  CFRange v51;
  CFRange v52;
  CGSize v53;
  CGRect v54;

  v2 = v1;
  sub_1CCA14E90(&qword_1EF9E5DE0);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1CCB6A4D0;
  v5 = (void *)*MEMORY[0x1E0CA8300];
  type metadata accessor for CFString(0);
  *(_QWORD *)(v4 + 32) = v5;
  v6 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v4 + 56) = v7;
  *(_QWORD *)(v4 + 64) = 0x6C6F43656C707041;
  *(_QWORD *)(v4 + 72) = 0xEF696A6F6D45726FLL;
  v8 = (void *)*MEMORY[0x1E0CA83D8];
  *(_QWORD *)(v4 + 120) = v7;
  *(_QWORD *)(v4 + 88) = v6;
  *(_QWORD *)(v4 + 96) = v8;
  *(_QWORD *)(v4 + 152) = MEMORY[0x1E0DEF040];
  *(double *)(v4 + 128) = a1;
  sub_1CC9C30A8(0, &qword_1EF9E5DE8);
  v9 = v5;
  v10 = v8;
  v11 = (const __CFDictionary *)sub_1CCB63D0C();
  v12 = CTFontDescriptorCreateWithAttributes(v11);
  v13 = CTFontCreateWithFontDescriptor(v12, 0.0, 0);
  sub_1CCA14E90(&qword_1EF9E5DF0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1CCB677E0;
  v15 = (void *)*MEMORY[0x1E0CA8188];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CA8188];
  *(_QWORD *)(inited + 40) = v13;
  v16 = v15;
  v17 = v13;
  sub_1CCAC53E0(inited);
  type metadata accessor for CTFont(0);
  v19 = v18;
  sub_1CC9CAA38(&qword_1EF9DF668, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1CCB66810);
  v20 = (const __CFDictionary *)sub_1CCB638C8();
  swift_bridgeObjectRelease();
  v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v22 = (__CFString *)sub_1CCB63964();
  v23 = CFAttributedStringCreate(v21, v22, v20);

  if (v23)
  {
    v24 = CTFramesetterCreateWithAttributedString(v23);
    v53.width = INFINITY;
    v51.location = 0;
    v51.length = 0;
    v53.height = INFINITY;
    v25 = CTFramesetterSuggestFrameSizeWithConstraints(v24, v51, 0, v53, 0);
    v54.origin.x = 0.0;
    v54.origin.y = 0.0;
    v54.size.width = v25.width;
    v54.size.height = v25.height;
    v26 = CGPathCreateWithRect(v54, 0);
    v52.location = 0;
    v52.length = 0;
    Frame = CTFramesetterCreateFrame(v24, v52, v26, 0);

    v28 = v25.width + v25.width;
    if (v25.width + v25.width <= -9.22337204e18)
    {
      __break(1u);
    }
    else if (v28 < 9.22337204e18)
    {
      if ((*(_QWORD *)&v28 & 0x7FF0000000000000) != 0x7FF0000000000000)
      {
        v29 = v25.height + v25.height;
        if ((COERCE_UNSIGNED_INT64(v25.height + v25.height) & 0x7FF0000000000000) != 0x7FF0000000000000)
        {
          if (v29 > -9.22337204e18)
          {
            if (v29 < 9.22337204e18)
            {
              v49 = v23;
              v50 = v17;
              v23 = Frame;
              v19 = v2;
              v30 = (uint64_t)v28;
              v31 = (uint64_t)v29;
              DeviceRGB = CGColorSpaceCreateDeviceRGB();
              v33 = CGBitmapContextCreate(0, v30, v31, 8uLL, 0, DeviceRGB, 1u);

              if (v33)
              {
                sub_1CCB63CDC();
                sub_1CCB63CE8();
                sub_1CCB63CDC();
                sub_1CCB63CE8();
                CTFrameDraw(v23, v33);
                Image = CGBitmapContextCreateImage(v33);
                if (Image)
                {
                  v35 = Image;
                  v36 = sub_1CCB354A8();

                }
                else
                {
                  v36 = 0;
                }
                v38 = v12;
                v44 = v49;
                v39 = v23;
                goto LABEL_18;
              }
              if (qword_1ED8AA630 == -1)
              {
LABEL_13:
                v48 = v24;
                v37 = sub_1CCB637FC();
                sub_1CCA16C20(v37, (uint64_t)qword_1ED8AD7F8);
                v38 = v19;
                v39 = sub_1CCB637D8();
                v40 = sub_1CCB63D48();
                if (os_log_type_enabled(v39, v40))
                {
                  type = v40;
                  v41 = (uint8_t *)swift_slowAlloc();
                  v42 = (_QWORD *)swift_slowAlloc();
                  *(_DWORD *)v41 = 138412290;
                  v43 = v38;
                  sub_1CCB63E44();
                  *v42 = v38;

                  _os_log_impl(&dword_1CC9BF000, v39, type, "FMItemImageCreationOperation: Created an nil context for request %@", v41, 0xCu);
                  sub_1CCA14E90(&qword_1ED8A8E00);
                  swift_arrayDestroy();
                  MEMORY[0x1D17B214C](v42, -1, -1);
                  MEMORY[0x1D17B214C](v41, -1, -1);
                  v36 = 0;
                  v38 = v11;
                  v24 = v20;
                  v33 = v12;
                  v20 = v49;
                  v44 = v50;
                  v50 = v48;
                  v11 = v23;
                }
                else
                {

                  v36 = 0;
                  v44 = v12;
                  v39 = v24;
                  v24 = v49;
                  v33 = v23;
                }
LABEL_18:
                v45 = v11;

                v11 = v33;
                v12 = v20;
                v20 = v45;
                v17 = v50;
                goto LABEL_19;
              }
LABEL_25:
              swift_once();
              goto LABEL_13;
            }
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    __break(1u);
    goto LABEL_22;
  }
  v36 = 0;
LABEL_19:

  return v36;
}

char sub_1CCB36098@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = sub_1CCA14E90(&qword_1ED8A73B8);
  result = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 56);
  if (!v7)
    goto LABEL_5;
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = type metadata accessor for FMIPDevice();
    v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80);
    sub_1CCB363E0(v7 + *(int *)(v9 + 120) + ((v10 + 32) & ~v10), (uint64_t)v6);
    v11 = type metadata accessor for FMIPLockMetadata();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v6, 1, v11) == 1)
    {
      result = sub_1CCB36428((uint64_t)v6);
LABEL_5:
      LOBYTE(v8) = 0;
      goto LABEL_8;
    }
    v12 = *v6;
    sub_1CCA6A7B0((uint64_t)v6);
    result = FMIPActionStatus.init(rawValue:)(qword_1CCB739C8[v12]).value;
    LOBYTE(v8) = v14;
    if (v14 == 18)
      LOBYTE(v8) = 0;
  }
LABEL_8:
  *a1 = v8;
  return result;
}

uint64_t sub_1CCB361A0(uint64_t a1)
{
  swift_allocObject();
  return sub_1CCB361E8(a1);
}

uint64_t sub_1CCB361E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13[7];

  sub_1CC9EBC94(a1, (uint64_t)v13);
  v3 = sub_1CCA5B658(v13);
  if (!v1)
  {
    v4 = qword_1ED8AA630;
    swift_retain();
    if (v4 != -1)
      swift_once();
    v5 = sub_1CCB637FC();
    sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
    swift_retain();
    v6 = sub_1CCB637D8();
    v7 = sub_1CCB63D48();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      *(_DWORD *)v8 = 136315138;
      v13[0] = v9;
      v10 = sub_1CCA5B9C4();
      v13[6] = sub_1CCA0CB60(v10, v11, v13);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v6, v7, "FMIPLockResponse: initialized with coder %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v9, -1, -1);
      MEMORY[0x1D17B214C](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }

  }
  sub_1CCA01CA0(a1);
  return v3;
}

uint64_t type metadata accessor for FMIPLockResponse()
{
  return objc_opt_self();
}

uint64_t sub_1CCB363E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1CCA14E90(&qword_1ED8A73B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCB36428(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1CCA14E90(&qword_1ED8A73B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1CCB36468(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CCB364A0 + 4 * byte_1CCB73A60[a1]))(0xD000000000000016, 0x80000001CCB7E840);
}

uint64_t sub_1CCB364A0()
{
  return 0x65746E6F43706174;
}

uint64_t sub_1CCB364BC()
{
  return 0x64657463656C6573;
}

uint64_t sub_1CCB364E0()
{
  return 0x44656C6269736976;
}

uint64_t sub_1CCB36504()
{
  return 0x6F4C646C756F6873;
}

uint64_t sub_1CCB36524()
{
  return 0x3156676174726961;
}

uint64_t sub_1CCB3653C()
{
  return 0x3256676174726961;
}

uint64_t sub_1CCB36554()
{
  return 0x3156616E6D66;
}

uint64_t sub_1CCB36568()
{
  return 0x6E6D66656C707061;
}

uint64_t sub_1CCB36588()
{
  return 0x6E6D66656C707061;
}

uint64_t sub_1CCB365AC()
{
  return 0x3256616E6D66;
}

uint64_t sub_1CCB365C0()
{
  uint64_t v0;

  sub_1CCA246DC(v0 + qword_1ED8AD600);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB365EC()
{
  uint64_t v0;

  v0 = sub_1CC9C785C();
  sub_1CCA246DC(v0 + qword_1ED8AD600);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB3663C()
{
  return type metadata accessor for FMIPRefreshClientRequest();
}

FMIPCore::FMIPUTAlertCompletionType_optional __swiftcall FMIPUTAlertCompletionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (FMIPCore::FMIPUTAlertCompletionType_optional)sub_1CCB36B44(v1);
}

uint64_t FMIPUTAlertCompletionType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6F4665726F6E6769;
  if (*v0 != 1)
    v1 = 0x68536465736F6C63;
  if (*v0)
    return v1;
  else
    return 0x6E5565726F6E6769;
}

uint64_t sub_1CCB366CC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CCB1BB0C(*a1, *a2);
}

uint64_t sub_1CCB366D8()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB36798()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB36834()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPUTAlertCompletionType_optional sub_1CCB368F0(Swift::String *a1)
{
  return FMIPUTAlertCompletionType.init(rawValue:)(*a1);
}

void sub_1CCB368FC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEE00444F456C6974;
  v4 = 0xED00007265766572;
  v5 = 0x6F4665726F6E6769;
  if (v2 != 1)
  {
    v5 = 0x68536465736F6C63;
    v4 = 0xEB00000000746565;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6E5565726F6E6769;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

FMIPCore::FMIPUTAlertSheetType_optional __swiftcall FMIPUTAlertSheetType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (FMIPCore::FMIPUTAlertSheetType_optional)sub_1CCB18A8C(v1);
}

uint64_t FMIPUTAlertSheetType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x796C696D6166;
  else
    return 1919251317;
}

uint64_t sub_1CCB369B8(char *a1, char *a2)
{
  return sub_1CCB1CD10(*a1, *a2);
}

uint64_t sub_1CCB369C4()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB36A38()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB36A88()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPUTAlertSheetType_optional sub_1CCB36AF8(Swift::String *a1)
{
  return FMIPUTAlertSheetType.init(rawValue:)(*a1);
}

void sub_1CCB36B04(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1919251317;
  if (*v1)
    v2 = 0x796C696D6166;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

FMIPCore::FMIPUTAlertProductType_optional __swiftcall FMIPUTAlertProductType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (FMIPCore::FMIPUTAlertProductType_optional)sub_1CCB36B44(v1);
}

uint64_t sub_1CCB36B44@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1CCB640F0();
  result = swift_bridgeObjectRelease();
  v4 = 3;
  if (v2 < 3)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t FMIPUTAlertProductType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x73646F50726961;
  if (*v0 != 1)
    v1 = 0x726F737365636361;
  if (*v0)
    return v1;
  else
    return 0x676154726961;
}

uint64_t sub_1CCB36BF4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CCB1C320(*a1, *a2);
}

uint64_t sub_1CCB36C00()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB36CA0()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB36D1C()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPUTAlertProductType_optional sub_1CCB36DB8(Swift::String *a1)
{
  return FMIPUTAlertProductType.init(rawValue:)(*a1);
}

void sub_1CCB36DC4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE700000000000000;
  v5 = 0x73646F50726961;
  if (v2 != 1)
  {
    v5 = 0x726F737365636361;
    v4 = 0xE900000000000079;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x676154726961;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

FMIPCore::FMIPUTAlertObservationType_optional __swiftcall FMIPUTAlertObservationType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (FMIPCore::FMIPUTAlertObservationType_optional)sub_1CCB18A8C(v1);
}

uint64_t FMIPUTAlertObservationType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F4D6E4F70656562;
  else
    return 0x647261646E617473;
}

uint64_t sub_1CCB36E70(char *a1, char *a2)
{
  return sub_1CCB1B640(*a1, *a2);
}

uint64_t sub_1CCB36E7C()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB36F00()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB36F60()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPUTAlertObservationType_optional sub_1CCB36FE0(Swift::String *a1)
{
  return FMIPUTAlertObservationType.init(rawValue:)(*a1);
}

void sub_1CCB36FEC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x647261646E617473;
  if (*v1)
    v2 = 0x6F4D6E4F70656562;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xEA00000000006576;
  *a1 = v2;
  a1[1] = v3;
}

void FMIPUTAlertEvent.sheetType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *FMIPUTAlertEvent.sheetType.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*FMIPUTAlertEvent.sheetType.modify())()
{
  return nullsub_1;
}

void FMIPUTAlertEvent.completionAction.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *FMIPUTAlertEvent.completionAction.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*FMIPUTAlertEvent.completionAction.modify())()
{
  return nullsub_1;
}

uint64_t FMIPUTAlertEvent.disableItemTapped.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t FMIPUTAlertEvent.disableItemTapped.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*FMIPUTAlertEvent.disableItemTapped.modify())()
{
  return nullsub_1;
}

uint64_t FMIPUTAlertEvent.didCloseSheet.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 3);
}

uint64_t FMIPUTAlertEvent.didCloseSheet.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 3) = result;
  return result;
}

uint64_t (*FMIPUTAlertEvent.didCloseSheet.modify())()
{
  return nullsub_1;
}

uint64_t FMIPUTAlertEvent.playSoundCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t FMIPUTAlertEvent.playSoundCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*FMIPUTAlertEvent.playSoundCount.modify())()
{
  return nullsub_1;
}

uint64_t FMIPUTAlertEvent.tracksCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t FMIPUTAlertEvent.tracksCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*FMIPUTAlertEvent.tracksCount.modify())()
{
  return nullsub_1;
}

double FMIPUTAlertEvent.tracksElapsedTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void FMIPUTAlertEvent.tracksElapsedTime.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*FMIPUTAlertEvent.tracksElapsedTime.modify())()
{
  return nullsub_1;
}

uint64_t FMIPUTAlertEvent.precisionFindingSessionCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t FMIPUTAlertEvent.precisionFindingSessionCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*FMIPUTAlertEvent.precisionFindingSessionCount.modify())()
{
  return nullsub_1;
}

uint64_t FMIPUTAlertEvent.proximityFindingSessionCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t FMIPUTAlertEvent.proximityFindingSessionCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*FMIPUTAlertEvent.proximityFindingSessionCount.modify())()
{
  return nullsub_1;
}

void FMIPUTAlertEvent.productType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 48);
}

_BYTE *FMIPUTAlertEvent.productType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = *result;
  return result;
}

uint64_t (*FMIPUTAlertEvent.productType.modify())()
{
  return nullsub_1;
}

void FMIPUTAlertEvent.observationType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 49);
}

_BYTE *FMIPUTAlertEvent.observationType.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 49) = *result;
  return result;
}

uint64_t (*FMIPUTAlertEvent.observationType.modify())()
{
  return nullsub_1;
}

uint64_t FMIPUTAlertEvent.isPosh.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 50);
}

uint64_t FMIPUTAlertEvent.isPosh.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 50) = result;
  return result;
}

uint64_t (*FMIPUTAlertEvent.isPosh.modify())()
{
  return nullsub_1;
}

void __swiftcall FMIPUTAlertEvent.init(sheetType:completionAction:disableItemTapped:didCloseSheet:playSoundCount:tracksCount:tracksElapsedTime:precisionFindingSessionCount:proximityFindingSessionCount:productType:observationType:isPosh:)(FMIPCore::FMIPUTAlertEvent *__return_ptr retstr, FMIPCore::FMIPUTAlertSheetType sheetType, FMIPCore::FMIPUTAlertCompletionType completionAction, Swift::Bool disableItemTapped, Swift::Bool didCloseSheet, Swift::Int playSoundCount, Swift::Int tracksCount, Swift::Double tracksElapsedTime, Swift::Int precisionFindingSessionCount, Swift::Int proximityFindingSessionCount, FMIPCore::FMIPUTAlertProductType productType, FMIPCore::FMIPUTAlertObservationType observationType, Swift::Bool isPosh)
{
  FMIPCore::FMIPUTAlertCompletionType v13;
  FMIPCore::FMIPUTAlertProductType v14;
  FMIPCore::FMIPUTAlertObservationType v15;
  FMIPCore::FMIPUTAlertObservationType *v16;
  Swift::Bool v17;

  v13 = *(_BYTE *)completionAction;
  v14 = *(_BYTE *)productType;
  v15 = *v16;
  retstr->sheetType = *(_BYTE *)sheetType;
  retstr->completionAction = v13;
  retstr->disableItemTapped = disableItemTapped;
  retstr->didCloseSheet = didCloseSheet;
  retstr->playSoundCount = playSoundCount;
  retstr->tracksCount = tracksCount;
  retstr->tracksElapsedTime = tracksElapsedTime;
  retstr->precisionFindingSessionCount = precisionFindingSessionCount;
  retstr->proximityFindingSessionCount = proximityFindingSessionCount;
  retstr->productType = v14;
  retstr->observationType = v15;
  retstr->isPosh = v17;
}

uint64_t sub_1CCB37214(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB3724C + 4 * byte_1CCB73AF0[a1]))(0x7079547465656873, 0xE900000000000065);
}

unint64_t sub_1CCB3724C()
{
  return 0xD000000000000010;
}

uint64_t sub_1CCB37364()
{
  return 0x54746375646F7270;
}

uint64_t sub_1CCB37384()
{
  return 0x746176726573626FLL;
}

uint64_t sub_1CCB373A8()
{
  return 0x68736F507369;
}

uint64_t FMIPManager.enqueue(UTEvent:item:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char **p_type;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  char v40;
  void (*v41)(char *, uint64_t);
  void *v42;
  id v43;
  char *v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  id v56;
  char **v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  char v65;
  void (*v66)(char *, uint64_t);
  void *v67;
  int v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char v73;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t, uint64_t);
  void (*v77)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  _QWORD *v98;
  _BYTE v99[8];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  char v107;

  v4 = sub_1CCA14E90(&qword_1ED8A7130);
  v5 = MEMORY[0x1E0C80A78](v4);
  v81 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v75 - v7;
  v9 = sub_1CCB635B0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v79 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v75 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v75 - v17;
  MEMORY[0x1E0C80A78](v16);
  v86 = (char *)&v75 - v19;
  LODWORD(v20) = *a1;
  v21 = a1[2];
  v93 = a1[1];
  v94 = v21;
  v22 = a1[3];
  v23 = *((_QWORD *)a1 + 1);
  v87 = *((_QWORD *)a1 + 2);
  v24 = *((_QWORD *)a1 + 3);
  v25 = *((_QWORD *)a1 + 4);
  v91 = *((_QWORD *)a1 + 5);
  v92 = v25;
  LODWORD(v25) = a1[48];
  v89 = a1[49];
  v90 = v25;
  v96 = a1[50];
  v26 = type metadata accessor for FMIPUnknownItem();
  v27 = *(int *)(v26 + 32);
  v95 = a2;
  v97 = *(_QWORD *)(a2 + v27);
  v28 = *(_QWORD *)(v97 + 16);
  v88 = v26;
  if (!v28)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_14:
    sub_1CCAD80B8((uint64_t)v8);
    v48 = v87;
    v49 = v95;
    v50 = v96;
    v51 = v22;
    v52 = v94;
    goto LABEL_30;
  }
  v83 = v9;
  v80 = v8;
  v98 = (_QWORD *)v10;
  v85 = (int)v20;
  v84 = v23;
  v29 = *(void **)(v97 + 40);
  p_type = (char **)(&stru_1E8912FF0 + 16);
  v31 = v28 - 1;
  v82 = v22;
  v78 = v27;
  if (v28 == 1)
  {
    v33 = v29;
    v23 = v84;
    v32 = v83;
  }
  else
  {
    swift_bridgeObjectRetain_n();
    v33 = v29;
    v34 = 64;
    v35 = v33;
    v36 = v83;
    do
    {
      v37 = *(id *)(v97 + v34);
      v38 = objc_msgSend(v37, sel_timestamp);
      sub_1CCB63580();

      v39 = objc_msgSend(v35, sel_timestamp);
      sub_1CCB63580();

      v40 = sub_1CCB63550();
      v41 = (void (*)(char *, uint64_t))v98[1];
      v41(v15, v36);
      v41(v18, v36);
      if ((v40 & 1) != 0)
        v42 = v33;
      else
        v42 = v37;
      if ((v40 & 1) != 0)
      {
        v33 = v37;
        v35 = v37;
      }

      v34 += 24;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease_n();
    v32 = v36;
    v23 = v84;
    p_type = &stru_1E8912FF0.type;
  }
  v43 = objc_msgSend(v33, p_type[462]);

  sub_1CCB63580();
  v20 = v98;
  v44 = (char *)v98[4];
  v8 = v80;
  ((void (*)(char *, char *, uint64_t))v44)(v80, v18, v32);
  v45 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v20[7];
  v45(v8, 0, 1, v32);
  v46 = (uint64_t (*)(char *, uint64_t, uint64_t))v20[6];
  v47 = v46(v8, 1, v32);
  LOBYTE(v22) = v82;
  LOBYTE(v20) = v85;
  if (v47 == 1)
    goto LABEL_14;
  v76 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v46;
  v77 = v45;
  ((void (*)(char *, char *, uint64_t))v44)(v86, v8, v32);
  v49 = v95;
  v97 = *(_QWORD *)(v95 + v78);
  v53 = *(_QWORD *)(v97 + 16);
  if (!v53)
  {
    v58 = (uint64_t)v81;
    v77(v81, 1, 1, v32);
    v50 = v96;
    v51 = v22;
    v52 = v94;
LABEL_28:
    ((void (*)(char *, uint64_t))v98[1])(v86, v32);
    sub_1CCAD80B8(v58);
    v48 = v87;
    goto LABEL_30;
  }
  v54 = *(void **)(v97 + 40);
  v55 = v53 - 1;
  v50 = v96;
  if (v53 == 1)
  {
    v56 = v54;
    v32 = v83;
    v51 = v22;
    v57 = (char **)(&stru_1E8912FF0 + 16);
  }
  else
  {
    v80 = v44;
    swift_bridgeObjectRetain_n();
    v56 = v54;
    v59 = 64;
    v60 = v56;
    v61 = v83;
    do
    {
      v62 = *(id *)(v97 + v59);
      v63 = objc_msgSend(v60, sel_timestamp);
      sub_1CCB63580();

      v64 = objc_msgSend(v62, sel_timestamp);
      sub_1CCB63580();

      v65 = sub_1CCB63550();
      v66 = (void (*)(char *, uint64_t))v98[1];
      v66(v15, v61);
      v66(v18, v61);
      if ((v65 & 1) != 0)
        v67 = v56;
      else
        v67 = v62;
      if ((v65 & 1) != 0)
      {
        v56 = v62;
        v60 = v62;
      }

      v59 += 24;
      --v55;
    }
    while (v55);
    swift_bridgeObjectRelease_n();
    v49 = v95;
    v32 = v61;
    v51 = v82;
    v50 = v96;
    v57 = &stru_1E8912FF0.type;
    v44 = v80;
  }
  v20 = objc_msgSend(v56, v57[462]);

  sub_1CCB63580();
  v58 = (uint64_t)v81;
  ((void (*)(char *, char *, uint64_t))v44)(v81, v18, v32);
  v77((char *)v58, 0, 1, v32);
  v68 = v76(v58, 1, v32);
  v52 = v94;
  v23 = v84;
  LOBYTE(v20) = v85;
  if (v68 == 1)
    goto LABEL_28;
  v69 = v79;
  ((void (*)(char *, uint64_t, uint64_t))v44)(v79, v58, v32);
  v48 = *(_QWORD *)(*(_QWORD *)(v49 + v78) + 16) - 1;
  v70 = v86;
  sub_1CCB63520();
  v24 = v71;
  v20 = (_QWORD *)v98[1];
  v72 = v69;
  v52 = v94;
  ((void (*)(char *, uint64_t))v20)(v72, v32);
  v50 = v96;
  ((void (*)(char *, uint64_t))v20)(v70, v32);
  LOBYTE(v20) = v85;
LABEL_30:
  if (*(_QWORD *)(v49 + *(int *)(v88 + 24) + 8))
    v73 = 1;
  else
    v73 = (char)v20;
  v99[0] = v73;
  v99[1] = v93;
  v99[2] = v52;
  v99[3] = v51;
  v100 = v23;
  v101 = v48;
  v102 = v24;
  v103 = v92;
  v104 = v91;
  v105 = v90;
  v106 = v89;
  v107 = v50;
  return _s8FMIPCore13FMIPAnalyticsV16sendUTAlertEvent5eventyAA011FMIPUTAlertE0V_tFZ_0((uint64_t)v99);
}

void sub_1CCB37A94(uint64_t a1)
{
  unint64_t v2;
  id v3;
  void *v4;
  id v5;
  char isUniquelyReferenced_nonNull_native;
  id v7;
  void *v8;
  id v9;
  char v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  id v16;
  char v17;
  id v18;
  char v19;
  id v20;
  char v21;
  uint64_t v22;
  id v23;
  char v24;
  id v25;
  char v26;
  uint64_t v27;
  id v28;
  char v29;
  id v30;
  char v31;
  id v32;
  void *v33;
  id v34;
  char v35;
  id v36;
  void *v37;
  id v38;
  char v39;
  id v40;
  char v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  _QWORD v46[6];

  v2 = sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
  v3 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v4 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_initWithString_, v4);

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v5, 0x7079547465656873, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v7 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v8 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v7, sel_initWithString_, v8);

  v10 = swift_isUniquelyReferenced_nonNull_native();
  v46[0] = v2;
  sub_1CC9E1E50((uint64_t)v9, 0xD000000000000010, 0x80000001CCB7E860, v10);
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, *(unsigned __int8 *)(a1 + 2));
  v12 = swift_isUniquelyReferenced_nonNull_native();
  v46[0] = v2;
  sub_1CC9E1E50((uint64_t)v11, 0x54656C6261736964, 0xED00006465707061, v12);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a1 + 8);
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v13 > 0);
  v15 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v14, 0x5379616C50646964, 0xEC000000646E756FLL, v15);
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v13);
  v17 = swift_isUniquelyReferenced_nonNull_native();
  v46[0] = v2;
  sub_1CC9E1E50((uint64_t)v16, 0x6E756F5379616C70, 0xEE00746E756F4364, v17);
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)(a1 + 16));
  v19 = swift_isUniquelyReferenced_nonNull_native();
  v46[0] = v2;
  sub_1CC9E1E50((uint64_t)v18, 0x6F43736B63617274, 0xEB00000000746E75, v19);
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, *(double *)(a1 + 24));
  v21 = swift_isUniquelyReferenced_nonNull_native();
  v46[0] = v2;
  sub_1CC9E1E50((uint64_t)v20, 0xD000000000000011, 0x80000001CCB7E880, v21);
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(a1 + 32);
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v22 > 0);
  v24 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v23, 0xD00000000000001ALL, 0x80000001CCB7E8A0, v24);
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v22);
  v26 = swift_isUniquelyReferenced_nonNull_native();
  v46[0] = v2;
  sub_1CC9E1E50((uint64_t)v25, 0xD00000000000001CLL, 0x80000001CCB7E8C0, v26);
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(a1 + 40);
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v27 > 0);
  v29 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v28, 0xD00000000000001ALL, 0x80000001CCB7E8E0, v29);
  swift_bridgeObjectRelease();
  v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v27);
  v31 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v30, 0xD00000000000001CLL, 0x80000001CCB7E900, v31);
  swift_bridgeObjectRelease();
  v32 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v33 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v34 = objc_msgSend(v32, sel_initWithString_, v33);

  v35 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v34, 0x54746375646F7270, 0xEB00000000657079, v35);
  swift_bridgeObjectRelease();
  v36 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v37 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v38 = objc_msgSend(v36, sel_initWithString_, v37);

  v39 = swift_isUniquelyReferenced_nonNull_native();
  v46[0] = v2;
  sub_1CC9E1E50((uint64_t)v38, 0x746176726573626FLL, 0xEF657079546E6F69, v39);
  swift_bridgeObjectRelease();
  v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, *(unsigned __int8 *)(a1 + 50));
  v41 = swift_isUniquelyReferenced_nonNull_native();
  sub_1CC9E1E50((uint64_t)v40, 0x68736F507369, 0xE600000000000000, v41);
  v42 = v2;
  swift_bridgeObjectRelease();
  v43 = (void *)sub_1CCB63964();
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = v42;
  v46[4] = sub_1CCA3C490;
  v46[5] = v44;
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 1107296256;
  v46[2] = sub_1CCA7EAC8;
  v46[3] = &unk_1E88FFC28;
  v45 = _Block_copy(v46);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v45);
  swift_bridgeObjectRelease();

}

uint64_t _s8FMIPCore13FMIPAnalyticsV16sendUTAlertEvent5eventyAA011FMIPUTAlertE0V_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  _QWORD v14[2];
  _QWORD aBlock[6];

  v2 = sub_1CCB63820();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63868();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EF9DF018 != -1)
    swift_once();
  v10 = swift_allocObject();
  v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 32) = v11;
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v10 + 63) = *(_DWORD *)(a1 + 47);
  aBlock[4] = sub_1CCB387DC;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E88FFBD8;
  v12 = _Block_copy(aBlock);
  sub_1CCB63844();
  v14[1] = MEMORY[0x1E0DEE9D8];
  sub_1CCA248D4();
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA1FC64();
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v9, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

unint64_t sub_1CCB38490()
{
  unint64_t result;

  result = qword_1EF9E5F18;
  if (!qword_1EF9E5F18)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPUTAlertCompletionType, &type metadata for FMIPUTAlertCompletionType);
    atomic_store(result, (unint64_t *)&qword_1EF9E5F18);
  }
  return result;
}

unint64_t sub_1CCB384D8()
{
  unint64_t result;

  result = qword_1EF9E5F20;
  if (!qword_1EF9E5F20)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPUTAlertSheetType, &type metadata for FMIPUTAlertSheetType);
    atomic_store(result, (unint64_t *)&qword_1EF9E5F20);
  }
  return result;
}

unint64_t sub_1CCB38520()
{
  unint64_t result;

  result = qword_1EF9E5F28;
  if (!qword_1EF9E5F28)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPUTAlertProductType, &type metadata for FMIPUTAlertProductType);
    atomic_store(result, (unint64_t *)&qword_1EF9E5F28);
  }
  return result;
}

unint64_t sub_1CCB38568()
{
  unint64_t result;

  result = qword_1EF9E5F30;
  if (!qword_1EF9E5F30)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPUTAlertObservationType, &type metadata for FMIPUTAlertObservationType);
    atomic_store(result, (unint64_t *)&qword_1EF9E5F30);
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPUTAlertCompletionType()
{
  return &type metadata for FMIPUTAlertCompletionType;
}

ValueMetadata *type metadata accessor for FMIPUTAlertSheetType()
{
  return &type metadata for FMIPUTAlertSheetType;
}

uint64_t _s8FMIPCore25FMIPUTAlertCompletionTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCB38620 + 4 * byte_1CCB73B03[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CCB38654 + 4 * byte_1CCB73AFE[v4]))();
}

uint64_t sub_1CCB38654(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB3865C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB38664);
  return result;
}

uint64_t sub_1CCB38670(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB38678);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCB3867C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB38684(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPUTAlertProductType()
{
  return &type metadata for FMIPUTAlertProductType;
}

uint64_t _s8FMIPCore20FMIPUTAlertSheetTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCB386EC + 4 * byte_1CCB73B0D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCB38720 + 4 * byte_1CCB73B08[v4]))();
}

uint64_t sub_1CCB38720(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB38728(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB38730);
  return result;
}

uint64_t sub_1CCB3873C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB38744);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCB38748(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB38750(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPUTAlertObservationType()
{
  return &type metadata for FMIPUTAlertObservationType;
}

__n128 initializeWithCopy for FMIPUTAlertEvent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 47) = *(_DWORD *)(a2 + 47);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FMIPUTAlertEvent(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[51])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_1CCB387CC()
{
  return swift_deallocObject();
}

void sub_1CCB387DC()
{
  uint64_t v0;

  sub_1CCB37A94(v0 + 16);
}

uint64_t sub_1CCB387E4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

BOOL sub_1CCB38808()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device;
  return (*(_BYTE *)(v1 + *(int *)(type metadata accessor for FMIPDevice() + 148)) & 4) == 0;
}

uint64_t static FMIPRemoveDeviceAction.== infix(_:_:)(uint64_t a1)
{
  return static FMIPDevice.== infix(_:_:)(a1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
}

uint64_t FMIPRemoveDeviceAction.__allocating_init(device:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext) = 0;
  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_username);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
  *v7 = 0;
  v7[1] = 0;
  v8 = v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device;
  *(_OWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession) = xmmword_1CCB66A50;
  sub_1CC9FED60(a1, v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  return v2;
}

uint64_t FMIPRemoveDeviceAction.init(device:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_authenticationContext) = 0;
  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_trustedDeviceConfirmation);
  *v2 = 0;
  v2[1] = 0;
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_dsid);
  *v3 = 0;
  v3[1] = 0;
  v4 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_username);
  *v4 = 0;
  v4[1] = 0;
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_oneTimeToken);
  *v5 = 0;
  v5[1] = 0;
  v6 = (_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_escrowUUID);
  *v6 = 0;
  v6[1] = 0;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_recoverySession) = xmmword_1CCB66A50;
  sub_1CC9FED60(a1, v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  return v1;
}

uint64_t FMIPRemoveDeviceAction.__deallocating_deinit()
{
  FMIPDeviceAction.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB38A20()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore20FMIPRemoveItemAction_forced);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1CCB38A64(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore20FMIPRemoveItemAction_forced);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_1CCB38AAC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t FMIPRemoveItemAction.__allocating_init(item:forced:)(uint64_t a1, char a2)
{
  return sub_1CCB38CE8(a1, a2, &OBJC_IVAR____TtC8FMIPCore20FMIPRemoveItemAction_forced, &OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
}

uint64_t FMIPRemoveItemAction.init(item:forced:)(uint64_t a1, char a2)
{
  return sub_1CCB38D74(a1, a2, &OBJC_IVAR____TtC8FMIPCore20FMIPRemoveItemAction_forced, &OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
}

uint64_t static FMIPRemoveItemAction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1CCB38DBC(a1, a2, &OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, _s8FMIPCore8FMIPItemV2eeoiySbAC_ACtFZ_0, &OBJC_IVAR____TtC8FMIPCore20FMIPRemoveItemAction_forced);
}

void FMIPRemoveItemAction.__allocating_init(item:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPRemoveItemAction.init(item:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t FMIPRemoveItemAction.deinit()
{
  uint64_t v0;

  sub_1CCA0BF30(v0 + OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  return v0;
}

uint64_t FMIPRemoveItemAction.__deallocating_deinit()
{
  return sub_1CCB38EF4(&OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
}

uint64_t sub_1CCB38BE0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CCB38F3C(a1, a2, a3, a4, &OBJC_IVAR____TtC8FMIPCore14FMIPItemAction_item, _s8FMIPCore8FMIPItemV2eeoiySbAC_ACtFZ_0, &OBJC_IVAR____TtC8FMIPCore20FMIPRemoveItemAction_forced);
}

uint64_t sub_1CCB38BFC()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8FMIPCore25FMIPRemoveItemGroupAction_forced);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1CCB38C40(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore25FMIPRemoveItemGroupAction_forced);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_1CCB38C88())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t FMIPRemoveItemGroupAction.__allocating_init(itemGroup:forced:)(uint64_t a1, char a2)
{
  return sub_1CCB38CE8(a1, a2, &OBJC_IVAR____TtC8FMIPCore25FMIPRemoveItemGroupAction_forced, &OBJC_IVAR____TtC8FMIPCore19FMIPItemGroupAction_itemGroup, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
}

uint64_t sub_1CCB38CE8(uint64_t a1, char a2, _QWORD *a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;

  v10 = swift_allocObject();
  *(_BYTE *)(v10 + *a3) = a2;
  sub_1CC9FED60(a1, v10 + *a4, a5);
  return v10;
}

uint64_t FMIPRemoveItemGroupAction.init(itemGroup:forced:)(uint64_t a1, char a2)
{
  return sub_1CCB38D74(a1, a2, &OBJC_IVAR____TtC8FMIPCore25FMIPRemoveItemGroupAction_forced, &OBJC_IVAR____TtC8FMIPCore19FMIPItemGroupAction_itemGroup, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
}

uint64_t sub_1CCB38D74(uint64_t a1, char a2, _QWORD *a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;

  *(_BYTE *)(v5 + *a3) = a2;
  sub_1CC9FED60(a1, v5 + *a4, a5);
  return v5;
}

uint64_t static FMIPRemoveItemGroupAction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1CCB38DBC(a1, a2, &OBJC_IVAR____TtC8FMIPCore19FMIPItemGroupAction_itemGroup, (uint64_t (*)(uint64_t, uint64_t))_s8FMIPCore13FMIPItemGroupV2eeoiySbAC_ACtFZ_0, &OBJC_IVAR____TtC8FMIPCore25FMIPRemoveItemGroupAction_forced);
}

uint64_t sub_1CCB38DBC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t, uint64_t), _QWORD *a5)
{
  _BYTE *v8;
  _BYTE *v9;
  char v10;

  if ((a4(a1 + *a3, a2 + *a3) & 1) != 0)
  {
    v8 = (_BYTE *)(a1 + *a5);
    swift_beginAccess();
    LOBYTE(v8) = *v8;
    v9 = (_BYTE *)(a2 + *a5);
    swift_beginAccess();
    v10 = v8 ^ *v9 ^ 1;
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

void FMIPRemoveItemGroupAction.__allocating_init(itemGroup:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void FMIPRemoveItemGroupAction.init(itemGroup:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t FMIPRemoveItemGroupAction.deinit()
{
  uint64_t v0;

  sub_1CCA0BF30(v0 + OBJC_IVAR____TtC8FMIPCore19FMIPItemGroupAction_itemGroup, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  return v0;
}

uint64_t FMIPRemoveItemGroupAction.__deallocating_deinit()
{
  return sub_1CCB38EF4(&OBJC_IVAR____TtC8FMIPCore19FMIPItemGroupAction_itemGroup, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
}

uint64_t sub_1CCB38EF4(_QWORD *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_1CCA0BF30(v2 + *a1, a2);
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB38F20(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CCB38F3C(a1, a2, a3, a4, &OBJC_IVAR____TtC8FMIPCore19FMIPItemGroupAction_itemGroup, (uint64_t (*)(uint64_t, uint64_t))static FMIPItemGroup.== infix(_:_:), &OBJC_IVAR____TtC8FMIPCore25FMIPRemoveItemGroupAction_forced);
}

uint64_t sub_1CCB38F3C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(uint64_t, uint64_t), _QWORD *a7)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  char v12;

  v8 = *a1;
  v9 = *a2;
  if ((a6(*a1 + *a5, *a2 + *a5) & 1) != 0)
  {
    v10 = (_BYTE *)(v8 + *a7);
    swift_beginAccess();
    LOBYTE(v10) = *v10;
    v11 = (_BYTE *)(v9 + *a7);
    swift_beginAccess();
    v12 = v10 ^ *v11 ^ 1;
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_1CCB38FD8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1CCB38FFC(a1, &OBJC_IVAR____TtC8FMIPCore20FMIPRemoveItemAction_forced, a2);
}

uint64_t sub_1CCB38FE4(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CCB39054(a1, a2, a3, a4, &OBJC_IVAR____TtC8FMIPCore20FMIPRemoveItemAction_forced);
}

uint64_t sub_1CCB38FF0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_1CCB38FFC(a1, &OBJC_IVAR____TtC8FMIPCore25FMIPRemoveItemGroupAction_forced, a2);
}

uint64_t sub_1CCB38FFC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t result;

  v4 = (_BYTE *)(*a1 + *a2);
  result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_1CCB39048(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1CCB39054(a1, a2, a3, a4, &OBJC_IVAR____TtC8FMIPCore25FMIPRemoveItemGroupAction_forced);
}

uint64_t sub_1CCB39054(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char v5;
  _BYTE *v6;
  uint64_t result;

  v5 = *a1;
  v6 = (_BYTE *)(*a2 + *a5);
  result = swift_beginAccess();
  *v6 = v5;
  return result;
}

uint64_t sub_1CCB3909C()
{
  return type metadata accessor for FMIPRemoveDeviceAction(0);
}

uint64_t type metadata accessor for FMIPRemoveDeviceAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E5F60);
}

uint64_t sub_1CCB390B8()
{
  return type metadata accessor for FMIPRemoveItemAction(0);
}

uint64_t type metadata accessor for FMIPRemoveItemAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E6110);
}

uint64_t method lookup function for FMIPRemoveItemAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPRemoveItemAction.forced.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of FMIPRemoveItemAction.forced.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of FMIPRemoveItemAction.forced.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of FMIPRemoveItemAction.__allocating_init(item:forced:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_1CCB39110()
{
  return type metadata accessor for FMIPRemoveItemGroupAction(0);
}

uint64_t type metadata accessor for FMIPRemoveItemGroupAction(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E61E8);
}

uint64_t sub_1CCB3912C()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for FMIPRemoveItemGroupAction()
{
  return swift_lookUpClassMethod();
}

Swift::Bool __swiftcall CLLocation.fmifIsNearBy(_:inBTRangeDistanceInMeters:)(CLLocation _, Swift::Double inBTRangeDistanceInMeters)
{
  void *v2;
  Class isa;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  isa = _.super.isa;
  objc_msgSend(v2, sel_distanceFromLocation_, _.super.isa);
  v6 = v5;
  objc_msgSend(v2, sel_horizontalAccuracy);
  v8 = v7;
  -[objc_class horizontalAccuracy](isa, sel_horizontalAccuracy);
  return v6 / sqrt(inBTRangeDistanceInMeters * inBTRangeDistanceInMeters + v8 * v8 + v9 * v9) < 1.5;
}

uint64_t type metadata accessor for FMIPSyncDeviceRequest()
{
  uint64_t result;

  result = qword_1ED8AA538;
  if (!qword_1ED8AA538)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCB3925C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1CCB39298()
{
  sub_1CCB636A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB3931C()
{
  return type metadata accessor for FMIPSyncDeviceRequest();
}

id String.isEmail.getter()
{
  void *v0;
  void *v1;
  id v2;

  if (qword_1EF9DEFF8 != -1)
    swift_once();
  v0 = (void *)qword_1EF9E62B0;
  v1 = (void *)sub_1CCB63964();
  v2 = objc_msgSend(v0, sel_evaluateWithObject_, v1);

  return v2;
}

uint64_t sub_1CCB393AC()
{
  uint64_t v0;
  uint64_t result;

  sub_1CCB39980();
  sub_1CCA14E90(&qword_1EF9DFD30);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1CCB677E0;
  *(_QWORD *)(v0 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v0 + 64) = sub_1CCA0C920();
  *(_QWORD *)(v0 + 32) = 0xD000000000000029;
  *(_QWORD *)(v0 + 40) = 0x80000001CCB7EA80;
  result = sub_1CCB63CD0();
  qword_1EF9E62B0 = result;
  return result;
}

id static String.emailPredicate.getter()
{
  if (qword_1EF9DEFF8 != -1)
    swift_once();
  return (id)qword_1EF9E62B0;
}

BOOL String.isPhoneNumber.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  _QWORD v21[2];

  v4 = sub_1CCB63298();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)v21 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v21 - v12;
  sub_1CCB63238();
  sub_1CCB63244();
  sub_1CCB6328C();
  sub_1CCB6325C();
  sub_1CCB6328C();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  sub_1CCB63268();
  sub_1CCB6328C();
  v14(v8, v4);
  v21[0] = a1;
  v21[1] = a2;
  sub_1CCA0C964();
  v21[0] = sub_1CCB63E5C();
  sub_1CCA14E90(&qword_1EF9E13B8);
  sub_1CCA638A8();
  v15 = sub_1CCB6394C();
  v17 = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0)
    v18 = v15 & 0xFFFFFFFFFFFFLL;
  v19 = v18 != 0;
  v14(v11, v4);
  v14(v13, v4);
  return v19;
}

uint64_t String.sanitized.getter(uint64_t a1, unint64_t a2)
{
  char v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = sub_1CCB63A90();
  swift_bridgeObjectRetain();
  if ((v4 & 1) != 0)
  {
    v5 = sub_1CCB63A00();
    v6 = sub_1CCB398E4(v5, a1, a2);
    v8 = v7;
    v10 = v9;
    v12 = v11;
    swift_bridgeObjectRelease();
    a1 = MEMORY[0x1D17B0F34](v6, v8, v10, v12);
    a2 = v13;
    swift_bridgeObjectRelease();
  }
  if ((sub_1CCB63A90() & 1) != 0)
  {
    v14 = sub_1CCB63A00();
    v15 = sub_1CCB398E4(v14, a1, a2);
    v17 = v16;
    v19 = v18;
    v21 = v20;
    swift_bridgeObjectRelease();
    a1 = MEMORY[0x1D17B0F34](v15, v17, v19, v21);
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t String.characterCount.getter()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  v0 = sub_1CCB63A78();
  swift_bridgeObjectRelease();
  return v0;
}

Swift::String __swiftcall String.deletingPrefix(_:)(Swift::String a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  Swift::String result;

  v3 = v2;
  v4 = v1;
  v5 = sub_1CCB63A90();
  swift_bridgeObjectRetain();
  if ((v5 & 1) != 0)
  {
    v6 = sub_1CCB63A00();
    v7 = sub_1CCB398E4(v6, v4, v3);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease();
    v4 = MEMORY[0x1D17B0F34](v7, v9, v11, v13);
    v3 = v14;
    swift_bridgeObjectRelease();
  }
  v15 = v4;
  v16 = (void *)v3;
  result._object = v16;
  result._countAndFlagsBits = v15;
  return result;
}

uint64_t String.nonBreaking.getter()
{
  sub_1CCA0C964();
  return sub_1CCB63E68();
}

unint64_t sub_1CCB398E4(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = sub_1CCB63A18();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return sub_1CCB63AC0();
  }
  __break(1u);
  return result;
}

unint64_t sub_1CCB39980()
{
  unint64_t result;

  result = qword_1EF9E62C0;
  if (!qword_1EF9E62C0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF9E62C0);
  }
  return result;
}

void __swiftcall FMIPPerson.init(identifier:person:)(FMIPCore::FMIPPerson *__return_ptr retstr, Swift::String identifier, FMIPCore::FMIPPerson *person)
{
  uint64_t countAndFlagsBits;
  void *object;
  Swift::Bool hasFamilyMembers;
  FMIPCore::FMIPPersonDeviceFetchStatus deviceFetchStatus;
  FMIPCore::FMIPAccountFormatter accountFormatter;
  Swift::Bool isAccountHSA;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String firstName;
  void *v14;

  firstName = person->firstName;
  countAndFlagsBits = person->lastName._countAndFlagsBits;
  object = person->lastName._object;
  hasFamilyMembers = person->hasFamilyMembers;
  deviceFetchStatus = person->deviceFetchStatus;
  accountFormatter = person->accountFormatter;
  isAccountHSA = person->isAccountHSA;
  v11 = person->username._countAndFlagsBits;
  v10 = person->username._object;
  v12 = person->phoneNumber.value._countAndFlagsBits;
  v14 = person->phoneNumber.value._object;
  swift_bridgeObjectRelease();
  retstr->firstName = firstName;
  retstr->lastName._countAndFlagsBits = countAndFlagsBits;
  retstr->lastName._object = object;
  retstr->hasFamilyMembers = hasFamilyMembers;
  retstr->deviceFetchStatus = deviceFetchStatus;
  retstr->accountFormatter = accountFormatter;
  retstr->isAccountHSA = isAccountHSA;
  retstr->username._countAndFlagsBits = v11;
  retstr->username._object = v10;
  retstr->identifier = identifier;
  retstr->phoneNumber.value._countAndFlagsBits = v12;
  retstr->phoneNumber.value._object = v14;
}

FMIPCore::FMIPPersonDeviceFetchStatus_optional __swiftcall FMIPPersonDeviceFetchStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  FMIPCore::FMIPPersonDeviceFetchStatus_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t FMIPPersonDeviceFetchStatus.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 1162760004;
  else
    return 0x474E4944414F4CLL;
}

uint64_t sub_1CCB39AFC(char *a1, char *a2)
{
  return sub_1CCB1B4FC(*a1, *a2);
}

uint64_t sub_1CCB39B08()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB39B80()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB39BD4()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPPersonDeviceFetchStatus_optional sub_1CCB39C48(Swift::String *a1)
{
  return FMIPPersonDeviceFetchStatus.init(rawValue:)(*a1);
}

void sub_1CCB39C54(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1162760004;
  if (!*v1)
    v2 = 0x474E4944414F4CLL;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

FMIPCore::FMIPAccountFormatter_optional __swiftcall FMIPAccountFormatter.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (FMIPCore::FMIPAccountFormatter_optional)rawValue;
}

uint64_t FMIPAccountFormatter.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t FMIPDefaultOwnerIdentifier.getter()
{
  return 0x72656E776FLL;
}

uint64_t FMIPDefaultBeaconOwnerIdentifier.getter()
{
  return 0x6F6C4072656E776FLL;
}

uint64_t FMIPPerson.firstName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPPerson.lastName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPPerson.hasFamilyMembers.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

void FMIPPerson.deviceFetchStatus.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 33);
}

void FMIPPerson.accountFormatter.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 34);
}

uint64_t FMIPPerson.isAccountHSA.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 35);
}

uint64_t FMIPPerson.username.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPPerson.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPPerson.phoneNumber.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1CCB39DEC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CCB39E24 + 4 * byte_1CCB74040[a1]))(0xD000000000000010, 0x80000001CCB78370);
}

uint64_t sub_1CCB39E24(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_1CCB39E3C()
{
  return 0x65626D654D736168;
}

uint64_t sub_1CCB39E5C()
{
  return 0x4153487369;
}

uint64_t sub_1CCB39E70()
{
  return 0x6D614E7473726966;
}

uint64_t sub_1CCB39E8C()
{
  return 0x656D614E7473616CLL;
}

uint64_t sub_1CCB39EA4()
{
  return 0x6449656C707061;
}

uint64_t sub_1CCB39EBC()
{
  return 0x696669746E656469;
}

uint64_t sub_1CCB39ED8()
{
  return 0x6D754E656E6F6870;
}

void sub_1CCB39EF8(char *a1)
{
  sub_1CCB1DFF0(*a1);
}

uint64_t sub_1CCB39F04()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCB597C4((uint64_t)v3, v1);
  return sub_1CCB64384();
}

void sub_1CCB39F48(uint64_t a1)
{
  char *v1;

  sub_1CCB597C4(a1, *v1);
}

uint64_t sub_1CCB39F50()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CCB597C4((uint64_t)v3, v1);
  return sub_1CCB64384();
}

uint64_t sub_1CCB39F90@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB3A75C();
  *a1 = result;
  return result;
}

uint64_t sub_1CCB39FBC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1CCB39DEC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1CCB39FE4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB3A75C();
  *a1 = result;
  return result;
}

uint64_t sub_1CCB3A008()
{
  sub_1CC9EC4A4();
  return sub_1CCB643E4();
}

uint64_t FMIPPerson.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;

  v3 = sub_1CCA14E90(&qword_1EF9E62C8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v22 = *(_QWORD *)(v1 + 24);
  v23 = v7;
  v27 = *(unsigned __int8 *)(v1 + 32);
  v21 = *(unsigned __int8 *)(v1 + 33);
  v20 = *(unsigned __int8 *)(v1 + 34);
  v17 = *(unsigned __int8 *)(v1 + 35);
  v8 = *(_QWORD *)(v1 + 40);
  v18 = *(_QWORD *)(v1 + 48);
  v19 = v8;
  v9 = *(_QWORD *)(v1 + 64);
  v15 = *(_QWORD *)(v1 + 56);
  v16 = v9;
  v10 = *(_QWORD *)(v1 + 80);
  v13 = *(_QWORD *)(v1 + 72);
  v14 = v10;
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CC9EC4A4();
  sub_1CCB643CC();
  LOBYTE(v25) = 4;
  v11 = v24;
  sub_1CCB641E0();
  if (!v11)
  {
    LOBYTE(v25) = 5;
    sub_1CCB641E0();
    LOBYTE(v25) = 6;
    sub_1CCB641E0();
    LOBYTE(v25) = 0;
    sub_1CCB64204();
    LOBYTE(v25) = 1;
    sub_1CCB641E0();
    swift_bridgeObjectRelease();
    LOBYTE(v25) = 2;
    sub_1CCB641EC();
    LOBYTE(v25) = 3;
    sub_1CCB641EC();
    LOBYTE(v25) = 7;
    sub_1CCB641E0();
    v25 = v13;
    v26 = v14;
    v28 = 8;
    sub_1CCA14E90((uint64_t *)&unk_1ED8AA328);
    sub_1CCA008E8();
    sub_1CCB64210();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1CCB3A32C(_QWORD *a1)
{
  return FMIPPerson.encode(to:)(a1);
}

unint64_t sub_1CCB3A34C()
{
  unint64_t result;

  result = qword_1EF9E62D0;
  if (!qword_1EF9E62D0)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPPersonDeviceFetchStatus, &type metadata for FMIPPersonDeviceFetchStatus);
    atomic_store(result, (unint64_t *)&qword_1EF9E62D0);
  }
  return result;
}

unint64_t sub_1CCB3A394()
{
  unint64_t result;

  result = qword_1EF9E62D8;
  if (!qword_1EF9E62D8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPAccountFormatter, &type metadata for FMIPAccountFormatter);
    atomic_store(result, (unint64_t *)&qword_1EF9E62D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPPersonDeviceFetchStatus()
{
  return &type metadata for FMIPPersonDeviceFetchStatus;
}

uint64_t _s8FMIPCore27FMIPPersonDeviceFetchStatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCB3A438 + 4 * byte_1CCB74057[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCB3A46C + 4 * byte_1CCB74052[v4]))();
}

uint64_t sub_1CCB3A46C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB3A474(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB3A47CLL);
  return result;
}

uint64_t sub_1CCB3A488(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB3A490);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCB3A494(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB3A49C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPAccountFormatter()
{
  return &type metadata for FMIPAccountFormatter;
}

uint64_t destroy for FMIPPerson()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FMIPPerson(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FMIPPerson(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FMIPPerson(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1CCB3A718()
{
  unint64_t result;

  result = qword_1EF9E62E0;
  if (!qword_1EF9E62E0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB743B0, &type metadata for FMIPPerson.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E62E0);
  }
  return result;
}

uint64_t sub_1CCB3A75C()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

uint64_t FMIPReverseGeocodingCache.__allocating_init(preferredLocale:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(swift_allocObject() + qword_1EF9FF818 + 8) = 0;
  swift_unknownObjectWeakInit();
  sub_1CC9EAB74(a1, (uint64_t)v4, (uint64_t *)&unk_1ED8A8B10);
  v5 = sub_1CC9E1640((uint64_t)v4);
  sub_1CC9C3E84(a1, (uint64_t *)&unk_1ED8A8B10);
  return v5;
}

uint64_t sub_1CCB3A860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v4 = v3;
  v8 = sub_1CCB63820();
  v28 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB63868();
  v26 = *(_QWORD *)(v11 - 8);
  v27 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FMReverseGeocodingRequest();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = *(_QWORD *)(v4 + qword_1EF9E4EE0);
  sub_1CCA0BEEC(a1, (uint64_t)v17, v18);
  v19 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = (v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v4;
  sub_1CCB3CA34((uint64_t)v17, v21 + v19);
  v22 = (_QWORD *)(v21 + v20);
  *v22 = a2;
  v22[1] = a3;
  aBlock[4] = sub_1CCB3CA78;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E89000D0;
  v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_1CCB63844();
  v29 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v13, v10, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v27);
  return swift_release();
}

void sub_1CCB3AADC(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _BYTE v14[288];
  _BYTE v15[288];
  _BYTE v16[288];
  _BYTE v17[288];
  _BYTE v18[288];

  sub_1CC9EE240(a2, v16);
  sub_1CC9C3EC0((uint64_t)v16, (uint64_t)v17, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)v17, (uint64_t)v18, &qword_1ED8A71C0);
  if (sub_1CCA33738((uint64_t)v18) == 1)
  {
    v8 = sub_1CC9F0100();
    v10 = v9;
    v11 = a1 + qword_1EF9E4EC8;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v11 + 16))
    {
      swift_bridgeObjectRetain();
      sub_1CCA074F4(v8, v10);
      v13 = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
      {
        sub_1CCB3AC68(a2, (uint64_t)a3, a4);
        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    sub_1CC9EF798(a2, 0, (uint64_t)a3, a4);
  }
  else
  {
    sub_1CC9C3EC0((uint64_t)v17, (uint64_t)v14, &qword_1ED8A71C0);
    sub_1CC9C3EC0((uint64_t)v17, (uint64_t)v15, &qword_1ED8A71C0);
    sub_1CCA31FF8((uint64_t)v15);
    a3(v14);
    sub_1CCA307F0((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
    sub_1CCA307F0((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
  }
}

uint64_t sub_1CCB3AC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void *v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v4 = v3;
  v8 = sub_1CCB63820();
  v28 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB63868();
  v26 = *(_QWORD *)(v11 - 8);
  v27 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FMReverseGeocodingRequest();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = *(_QWORD *)(v4 + qword_1EF9E4EE0);
  sub_1CCA0BEEC(a1, (uint64_t)v17, v18);
  v19 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = (v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v4;
  sub_1CCB3CA34((uint64_t)v17, v21 + v19);
  v22 = (uint64_t *)(v21 + v20);
  *v22 = a2;
  v22[1] = a3;
  aBlock[4] = sub_1CCB3CA88;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E8900120;
  v23 = _Block_copy(aBlock);
  swift_retain();
  sub_1CC9DF994(a2);
  sub_1CCB63844();
  v29 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v13, v10, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v27);
  return swift_release();
}

void sub_1CCB3AEE8(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD *);
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  char *v46;
  os_log_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_QWORD *);
  _QWORD v53[36];
  uint64_t v54[36];

  v52 = a3;
  v7 = type metadata accessor for FMReverseGeocodingRequest();
  v51 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v51 + 64);
  v9 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v45 - v11;
  v13 = sub_1CC9F0100();
  v15 = v14;
  v16 = (uint64_t *)(a1 + qword_1EF9E4EC8);
  swift_beginAccess();
  v17 = *v16;
  if (*(_QWORD *)(v17 + 16))
  {
    swift_bridgeObjectRetain();
    v18 = sub_1CCA074F4(v13, v15);
    if ((v19 & 1) != 0)
    {
      v20 = *(id *)(*(_QWORD *)(v17 + 56) + 8 * v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1EF9DEF60 != -1)
        swift_once();
      v50 = a4;
      v21 = sub_1CCB637FC();
      sub_1CCA16C20(v21, (uint64_t)qword_1EF9FF480);
      sub_1CCA0BEEC(a2, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      v22 = v20;
      swift_retain_n();
      v23 = v22;
      v24 = sub_1CCB637D8();
      v25 = sub_1CCB63D48();
      v26 = v25;
      if (os_log_type_enabled(v24, v25))
      {
        v27 = swift_slowAlloc();
        v48 = v26;
        v28 = v27;
        v49 = swift_slowAlloc();
        v54[0] = v49;
        *(_DWORD *)v28 = 136315650;
        v47 = v24;
        v29 = sub_1CCB643F0();
        v53[0] = sub_1CCA0CB60(v29, v30, v54);
        v46 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_1CCB63E44();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v28 + 12) = 2080;
        v31 = FMReverseGeocodingRequest.debugDescription.getter();
        v53[0] = sub_1CCA0CB60(v31, v32, v54);
        sub_1CCB63E44();

        swift_bridgeObjectRelease();
        *(_WORD *)(v28 + 22) = 2080;
        v33 = FMReverseGeocodingRequest.debugDescription.getter();
        v53[0] = sub_1CCA0CB60(v33, v34, v54);
        v10 = v46;
        sub_1CCB63E44();
        swift_bridgeObjectRelease();
        sub_1CCA0BF30((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
        v24 = v47;
        _os_log_impl(&dword_1CC9BF000, v47, (os_log_type_t)v48, "%s: Attaching to an existing operation: %s, source: %s", (uint8_t *)v28, 0x20u);
        v35 = v49;
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v35, -1, -1);
        MEMORY[0x1D17B214C](v28, -1, -1);
      }
      else
      {

        swift_release_n();
        sub_1CCA0BF30((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      }

      sub_1CCA0BEEC(a2, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
      v37 = (*(unsigned __int8 *)(v51 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
      v38 = swift_allocObject();
      *(_QWORD *)(v38 + 16) = a1;
      sub_1CCB3CA34((uint64_t)v10, v38 + v37);
      v39 = (_QWORD *)(v38 + ((v8 + v37 + 7) & 0xFFFFFFFFFFFFFFF8));
      v40 = (uint64_t)v52;
      v41 = v50;
      *v39 = v52;
      v39[1] = v41;
      v54[4] = (uint64_t)sub_1CCB3CA98;
      v54[5] = v38;
      v54[0] = MEMORY[0x1E0C809B0];
      v54[1] = 1107296256;
      v54[2] = (uint64_t)sub_1CCA00C38;
      v54[3] = (uint64_t)&unk_1E8900170;
      v42 = _Block_copy(v54);
      v43 = (void *)objc_opt_self();
      swift_retain();
      sub_1CC9DF994(v40);
      v44 = objc_msgSend(v43, sel_blockOperationWithBlock_, v42);
      _Block_release(v42);
      swift_release();
      objc_msgSend(v44, sel_addDependency_, v23);
      objc_msgSend(*(id *)(a1 + qword_1EF9E4ED8), sel_addOperation_, v44);

      return;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v36 = v52;
  if (v52)
  {
    sub_1CC9EE240(a2, v53);
    v36(v53);
    sub_1CC9C3EC0((uint64_t)v53, (uint64_t)v54, &qword_1ED8A71C0);
    sub_1CCA307F0((uint64_t)v54, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
  }
}

uint64_t sub_1CCB3B400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void *v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v8 = sub_1CCB63820();
  v28 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB63868();
  v26 = *(_QWORD *)(v11 - 8);
  v27 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FMReverseGeocodingRequest();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = *(_QWORD *)(a1 + qword_1EF9E4EE0);
  sub_1CCA0BEEC(a2, (uint64_t)v17, v18);
  v19 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = (v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a1;
  sub_1CCB3CA34((uint64_t)v17, v21 + v19);
  v22 = (uint64_t *)(v21 + v20);
  *v22 = a3;
  v22[1] = a4;
  aBlock[4] = sub_1CCB3CB78;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E89001C0;
  v23 = _Block_copy(aBlock);
  swift_retain();
  sub_1CC9DF994(a3);
  sub_1CCB63844();
  v29 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v13, v10, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v27);
  return swift_release();
}

uint64_t sub_1CCB3B680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[36];
  uint64_t v77;
  _BYTE v78[288];
  _QWORD v79[36];
  _BYTE v80[312];
  _OWORD v81[18];

  v66 = a3;
  v67 = a4;
  v6 = sub_1CCB63820();
  v72 = *(_QWORD *)(v6 - 8);
  v73 = v6;
  MEMORY[0x1E0C80A78](v6);
  v71 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63868();
  v69 = *(_QWORD *)(v8 - 8);
  v70 = v8;
  MEMORY[0x1E0C80A78](v8);
  v68 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB6382C();
  v64 = *(_QWORD *)(v10 - 8);
  v65 = v10;
  MEMORY[0x1E0C80A78](v10);
  v63 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB635B0();
  v61 = *(_QWORD *)(v12 - 8);
  v62 = v12;
  MEMORY[0x1E0C80A78](v12);
  v60 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FMReverseGeocodingRequest();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1CCA14E90((uint64_t *)&unk_1EF9E2A10);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1CCA14E90(&qword_1EF9E2A08);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = a2;
  v24 = sub_1CC9F0100();
  v26 = v25;
  v74 = a1;
  v27 = (uint64_t *)(a1 + qword_1EF9E4EB8);
  swift_beginAccess();
  v28 = *v27;
  if (*(_QWORD *)(v28 + 16))
  {
    swift_bridgeObjectRetain();
    v29 = sub_1CCA074F4(v24, v26);
    if ((v30 & 1) != 0)
    {
      sub_1CC9EAB74(*(_QWORD *)(v28 + 56) + *(_QWORD *)(v18 + 72) * v29, (uint64_t)v23, (uint64_t *)&unk_1EF9E2A10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v23, 0, 1, v17);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v23, 1, 1, v17);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v23, 1, 1, v17);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v23, 1, v17))
  {
    sub_1CC9C3E84((uint64_t)v23, &qword_1EF9E2A08);
    sub_1CCA30EF4(v81);
  }
  else
  {
    sub_1CC9EAB74((uint64_t)v23, (uint64_t)v20, (uint64_t *)&unk_1EF9E2A10);
    sub_1CC9C3E84((uint64_t)v23, &qword_1EF9E2A08);
    memcpy(v79, &v20[*(int *)(v17 + 48)], sizeof(v79));
    sub_1CCA31FF8((uint64_t)v79);
    sub_1CC9C3E84((uint64_t)v20, (uint64_t *)&unk_1EF9E2A10);
    memcpy(v81, v79, sizeof(v81));
    nullsub_1(v81);
  }
  sub_1CC9C3EC0((uint64_t)v81, (uint64_t)v80, &qword_1ED8A71C0);
  if (qword_1EF9DEF60 != -1)
    swift_once();
  v31 = sub_1CCB637FC();
  sub_1CCA16C20(v31, (uint64_t)qword_1EF9FF480);
  sub_1CCA0BEEC(v75, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
  sub_1CCA307F0((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
  swift_retain();
  sub_1CCA307F0((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
  swift_retain();
  v32 = sub_1CCB637D8();
  v33 = sub_1CCB63D48();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = swift_slowAlloc();
    v35 = swift_slowAlloc();
    v77 = v35;
    *(_DWORD *)v34 = 136315650;
    v36 = sub_1CCB643F0();
    *(_QWORD *)&v81[0] = sub_1CCA0CB60(v36, v37, &v77);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2080;
    v38 = FMReverseGeocodingRequest.debugDescription.getter();
    *(_QWORD *)&v81[0] = sub_1CCA0CB60(v38, v39, &v77);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA0BF30((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    *(_WORD *)(v34 + 22) = 2080;
    sub_1CC9C3EC0((uint64_t)v80, (uint64_t)v79, &qword_1ED8A71C0);
    sub_1CC9C3EC0((uint64_t)v80, (uint64_t)v81, &qword_1ED8A71C0);
    if (sub_1CCA33738((uint64_t)v81) == 1)
    {
      v40 = 0xE400000000000000;
      v41 = 1701736302;
    }
    else
    {
      sub_1CC9C3EC0((uint64_t)v80, (uint64_t)v76, &qword_1ED8A71C0);
      sub_1CCA31FF8((uint64_t)v76);
      v41 = FMIPAddress.debugDescription.getter();
      v40 = v42;
      memcpy(v78, v79, sizeof(v78));
      sub_1CCA32130((uint64_t)v78);
    }
    v79[0] = sub_1CCA0CB60(v41, v40, &v77);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA307F0((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
    sub_1CCA307F0((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
    _os_log_impl(&dword_1CC9BF000, v32, v33, "%s: Existing operation completed, notifying the duplicate: %s - %s", (uint8_t *)v34, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v35, -1, -1);
    MEMORY[0x1D17B214C](v34, -1, -1);

  }
  else
  {
    swift_release_n();
    sub_1CCA0BF30((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
    sub_1CCA307F0((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
    sub_1CCA307F0((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);

  }
  sub_1CC9C3EC0((uint64_t)v80, (uint64_t)v79, &qword_1ED8A71C0);
  if (sub_1CCA33738((uint64_t)v79) != 1)
  {
    sub_1CC9C3EC0((uint64_t)v80, (uint64_t)v78, &qword_1ED8A71C0);
    memcpy(v81, v78, sizeof(v81));
    v43 = v75;
    v44 = *(void **)(v75 + 16);
    sub_1CCA31FF8((uint64_t)v78);
    v45 = objc_msgSend(v44, sel_timestamp);
    v46 = (uint64_t)v60;
    sub_1CCB63580();

    sub_1CCAB18A0(v43, (uint64_t)v81, v46);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v46, v62);
    sub_1CCA307F0((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
  }
  sub_1CC9F0ECC();
  v48 = v63;
  v47 = v64;
  v49 = v65;
  (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v63, *MEMORY[0x1E0DEF540], v65);
  v50 = (void *)sub_1CCB63DC0();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
  sub_1CC9C3EC0((uint64_t)v80, (uint64_t)v78, &qword_1ED8A71C0);
  v51 = swift_allocObject();
  v53 = v66;
  v52 = v67;
  *(_QWORD *)(v51 + 16) = v66;
  *(_QWORD *)(v51 + 24) = v52;
  sub_1CC9C3EC0((uint64_t)v78, v51 + 32, &qword_1ED8A71C0);
  v76[4] = sub_1CCB3CD0C;
  v76[5] = v51;
  v76[0] = MEMORY[0x1E0C809B0];
  v76[1] = 1107296256;
  v76[2] = sub_1CCA00C38;
  v76[3] = &unk_1E8900210;
  v54 = _Block_copy(v76);
  sub_1CCA307F0((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15608);
  sub_1CC9DF994(v53);
  v55 = v68;
  sub_1CCB63844();
  v77 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  v56 = v71;
  v57 = v73;
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v55, v56, v54);
  _Block_release(v54);

  (*(void (**)(char *, uint64_t))(v72 + 8))(v56, v57);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v55, v70);
  sub_1CCA307F0((uint64_t)v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1CCA15768);
  return swift_release();
}

uint64_t sub_1CCB3BF80(const void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  _QWORD v17[6];
  _BYTE v18[296];

  v3 = sub_1CCB63868();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v17[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63820();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v17[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v18, a1, 0x120uLL);
  result = MEMORY[0x1D17B2218](v1 + qword_1EF9FF818);
  if (result)
  {
    v12 = result;
    v13 = *(id *)(result + 72);
    sub_1CCB63814();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v12;
    memcpy((void *)(v14 + 24), v18, 0x120uLL);
    v17[4] = sub_1CCB3C950;
    v17[5] = v14;
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 1107296256;
    v17[2] = sub_1CCA00C38;
    v17[3] = &unk_1E8900080;
    v15 = _Block_copy(v17);
    swift_unknownObjectRetain();
    sub_1CCA31FF8((uint64_t)v18);
    sub_1CCB63844();
    MEMORY[0x1D17B1318](0, v6, v10, v15);
    _Block_release(v15);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1CCB3C150(uint64_t *a1)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _BYTE v11[16];
  uint64_t v12;
  _QWORD *v13;

  v3 = (int *)type metadata accessor for FMReverseGeocodingRequest();
  MEMORY[0x1E0C80A78](v3);
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *a1;
  v6 = a1[1];
  v8 = (void *)a1[3];
  sub_1CC9EAB74(v1 + qword_1EF9FF7A8, (uint64_t)v5 + v3[6], (uint64_t *)&unk_1ED8A8B10);
  *v5 = v7;
  v5[1] = v6;
  *((_BYTE *)v5 + v3[8]) = 0;
  *((_BYTE *)v5 + v3[7]) = 0;
  v5[2] = v8;
  v12 = v1;
  v13 = v5;
  swift_bridgeObjectRetain();
  v9 = v8;
  sub_1CCA14E90(&qword_1ED8A71C0);
  sub_1CCB63D9C();
  return sub_1CCA0BF30((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
}

uint64_t sub_1CCB3C270(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v15;

  v7 = (int *)type metadata accessor for FMReverseGeocodingRequest();
  MEMORY[0x1E0C80A78](v7);
  v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *a1;
  v10 = a1[1];
  v12 = (void *)a1[3];
  sub_1CC9EAB74(v3 + qword_1EF9FF7A8, (uint64_t)v9 + v7[6], (uint64_t *)&unk_1ED8A8B10);
  *v9 = v11;
  v9[1] = v10;
  *((_BYTE *)v9 + v7[8]) = 0;
  *((_BYTE *)v9 + v7[7]) = 0;
  v9[2] = v12;
  swift_bridgeObjectRetain();
  v13 = v12;
  sub_1CCB3A860((uint64_t)v9, a2, a3);
  return sub_1CCA0BF30((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
}

uint64_t sub_1CCB3C364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  int *v11;
  uint64_t v12;
  uint64_t *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[8];

  v3 = v2;
  v19[1] = a2;
  v5 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FMIPSeparationLocation();
  MEMORY[0x1E0C80A78](v8);
  v10 = (id *)((char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = (int *)type metadata accessor for FMReverseGeocodingRequest();
  MEMORY[0x1E0C80A78](v11);
  v13 = (_QWORD *)((char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1CCA0BEEC(a1, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPSeparationLocation);
  sub_1CC9EAB74(v3 + qword_1EF9FF7A8, (uint64_t)v7, (uint64_t *)&unk_1ED8A8B10);
  v14 = v10[1];
  v15 = sub_1CC9F0100();
  v17 = v16;
  sub_1CCA0BF30((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPSeparationLocation);
  *v13 = v15;
  v13[1] = v17;
  *((_BYTE *)v13 + v11[8]) = 0;
  *((_BYTE *)v13 + v11[7]) = 0;
  v13[2] = (uint64_t)v14;
  sub_1CC9C3EC0((uint64_t)v7, (uint64_t)v13 + v11[6], (uint64_t *)&unk_1ED8A8B10);
  v19[4] = v3;
  v19[5] = v13;
  sub_1CCA14E90(&qword_1ED8A71C0);
  sub_1CCB63D9C();
  return sub_1CCA0BF30((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
}

uint64_t sub_1CCB3C524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  int *v12;
  uint64_t v13;
  uint64_t *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v20 = a2;
  v21 = a3;
  v6 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FMIPSeparationLocation();
  MEMORY[0x1E0C80A78](v9);
  v11 = (id *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = (int *)type metadata accessor for FMReverseGeocodingRequest();
  MEMORY[0x1E0C80A78](v12);
  v14 = (uint64_t *)((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1CCA0BEEC(a1, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPSeparationLocation);
  sub_1CC9EAB74(v4 + qword_1EF9FF7A8, (uint64_t)v8, (uint64_t *)&unk_1ED8A8B10);
  v15 = v11[1];
  v16 = sub_1CC9F0100();
  v18 = v17;
  sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPSeparationLocation);
  *v14 = v16;
  v14[1] = v18;
  *((_BYTE *)v14 + v12[8]) = 0;
  *((_BYTE *)v14 + v12[7]) = 0;
  v14[2] = (uint64_t)v15;
  sub_1CC9C3EC0((uint64_t)v8, (uint64_t)v14 + v12[6], (uint64_t *)&unk_1ED8A8B10);
  sub_1CCB3A860((uint64_t)v14, v20, v21);
  return sub_1CCA0BF30((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for FMReverseGeocodingRequest);
}

uint64_t FMIPReverseGeocodingCache.init(preferredLocale:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v3 = sub_1CCA14E90((uint64_t *)&unk_1ED8A8B10);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + qword_1EF9FF818 + 8) = 0;
  swift_unknownObjectWeakInit();
  sub_1CC9EAB74(a1, (uint64_t)v5, (uint64_t *)&unk_1ED8A8B10);
  v6 = sub_1CC9E1640((uint64_t)v5);
  sub_1CC9C3E84(a1, (uint64_t *)&unk_1ED8A8B10);
  return v6;
}

uint64_t sub_1CCB3C764()
{
  uint64_t v0;

  return sub_1CCA2F610(v0 + qword_1EF9FF818);
}

uint64_t FMIPReverseGeocodingCache.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + qword_1EF9E4EB0;
  v2 = sub_1CCB635B0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CC9C3E84(v0 + qword_1EF9FF7A8, (uint64_t *)&unk_1ED8A8B10);
  sub_1CCA2F610(v0 + qword_1EF9FF818);
  return v0;
}

uint64_t FMIPReverseGeocodingCache.__deallocating_deinit()
{
  FMIPReverseGeocodingCache.deinit();
  return swift_deallocClassInstance();
}

uint64_t method lookup function for FMIPReverseGeocodingCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPReverseGeocodingCache.address(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of FMIPReverseGeocodingCache.address(for:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t sub_1CCB3C894()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCB3C950()
{
  uint64_t v0;

  return sub_1CCAAF7FC(*(_QWORD *)(v0 + 16), (const void *)(v0 + 24));
}

uint64_t sub_1CCB3C95C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for FMReverseGeocodingRequest();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_release();
  swift_bridgeObjectRelease();

  v3 = v0 + v2 + *(int *)(v1 + 24);
  v4 = sub_1CCB63634();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB3CA34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMReverseGeocodingRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCB3CA78()
{
  return sub_1CCB3CB84((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD))sub_1CCB3AADC);
}

uint64_t sub_1CCB3CA88()
{
  return sub_1CCB3CB84((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD))sub_1CCB3AEE8);
}

uint64_t sub_1CCB3CA98()
{
  return sub_1CCB3CB84((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD))sub_1CCB3B400);
}

uint64_t sub_1CCB3CAA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for FMReverseGeocodingRequest();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v5 = v0 + v3;
  swift_bridgeObjectRelease();

  v6 = v5 + *(int *)(v1 + 24);
  v7 = sub_1CCB63634();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB3CB78()
{
  return sub_1CCB3CB84((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD))sub_1CCB3B680);
}

uint64_t sub_1CCB3CB84(uint64_t (*a1)(_QWORD, unint64_t, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(type metadata accessor for FMReverseGeocodingRequest() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (_QWORD *)(v1 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a1(*(_QWORD *)(v1 + 16), v1 + v3, *v4, v4[1]);
}

uint64_t sub_1CCB3CBDC(uint64_t (*a1)(_BYTE *), uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v5[288];
  _BYTE v6[288];

  sub_1CC9C3EC0(a3, (uint64_t)v6, &qword_1ED8A71C0);
  result = sub_1CC9C3EC0((uint64_t)v6, (uint64_t)v5, &qword_1ED8A71C0);
  if (a1)
    return a1(v5);
  return result;
}

uint64_t sub_1CCB3CC40()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  if (*(_QWORD *)(v0 + 200))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_1CCB3CD0C()
{
  uint64_t v0;

  return sub_1CCB3CBDC(*(uint64_t (**)(_BYTE *))(v0 + 16), *(_QWORD *)(v0 + 24), v0 + 32);
}

char *sub_1CCB3CD30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  _QWORD v16[2];

  v1 = sub_1CCA14E90(&qword_1ED8A8EE8);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CCB63490();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v16 - v9;
  if (qword_1ED8A8C00 != -1)
    swift_once();
  v11 = sub_1CCA16C20(v1, (uint64_t)qword_1ED8A70B8);
  sub_1CCA24A5C(v11, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_1CCA39410((uint64_t)v3);
    sub_1CCAABCE4();
    swift_allocError();
    swift_willThrow();
  }
  else
  {
    v12 = type metadata accessor for FMIPDemoContent();
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    sub_1CCB63454();
    v13 = *(void (**)(char *, uint64_t))(v5 + 8);
    v13(v8, v4);
    v3 = (char *)v12;
    v14 = static FMIPDemoContent.load(from:)();
    if (!v0)
      v3 = (char *)v14;
    v13(v10, v4);
  }
  return v3;
}

char *sub_1CCB3CF1C(uint64_t a1)
{
  uint64_t v1;
  char *result;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  result = sub_1CCB3CD30();
  v4 = result;
  if (!v1)
  {
    type metadata accessor for FMIPDemoDataSource();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 128) = v4;
    type metadata accessor for FMIPDemoDataGenerator();
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1CCB744E0;
    *(_QWORD *)(v6 + 32) = 0x4024000000000000;
    *(_QWORD *)(v5 + 136) = v6;
    v7 = swift_retain();
    sub_1CCB1747C(v7, &v18);
    v8 = v19;
    v9 = v20;
    v10 = v21;
    v11 = v22;
    v12 = v23;
    v13 = v24;
    v14 = v25;
    v15 = v26;
    v16 = v27;
    v17 = v30;
    *(_OWORD *)(v5 + 16) = v18;
    *(_QWORD *)(v5 + 32) = v8;
    *(_QWORD *)(v5 + 40) = v9;
    *(_BYTE *)(v5 + 48) = v10;
    *(_BYTE *)(v5 + 49) = v11;
    *(_BYTE *)(v5 + 50) = v12;
    *(_BYTE *)(v5 + 51) = v13;
    *(_OWORD *)(v5 + 56) = v14;
    *(_QWORD *)(v5 + 72) = v15;
    *(_QWORD *)(v5 + 80) = v16;
    *(_OWORD *)(v5 + 88) = v28;
    *(_OWORD *)(v5 + 104) = v29;
    *(_QWORD *)(v5 + 120) = v17;
    sub_1CC9EBC94(a1, (uint64_t)&v18);
    type metadata accessor for FMIPDemoInteractionController();
    swift_allocObject();
    return (char *)sub_1CCB541E8(v5, &v18);
  }
  return result;
}

uint64_t sub_1CCB3D03C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(char *, _QWORD);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34[32];
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v33 = sub_1CCB63604();
  v2 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
    v6 = sub_1CCB63EF8();
  else
    v6 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v38 = MEMORY[0x1E0DEE9D8];
    sub_1CCA639D4(0, v6 & ~(v6 >> 63), 0);
    if (v5)
    {
      result = sub_1CCB63EBC();
      v9 = 1;
    }
    else
    {
      result = sub_1CCB49318(a1);
      v9 = v10 & 1;
    }
    v35 = result;
    v36 = v8;
    v37 = v9;
    if (v6 < 0)
    {
      __break(1u);
LABEL_25:
      __break(1u);
    }
    else
    {
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0)
        v11 = a1;
      v31 = v2;
      v32 = v11;
      v30 = v4;
      do
      {
        while (1)
        {
          sub_1CCB490B4(v35, v36, v37, a1, &qword_1EF9E26D8);
          v23 = v22;
          v24 = objc_msgSend(v22, sel_identifier);
          sub_1CCB635EC();

          v25 = v38;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1CCA639D4(0, *(_QWORD *)(v25 + 16) + 1, 1);
            v25 = v38;
          }
          v27 = *(_QWORD *)(v25 + 16);
          v26 = *(_QWORD *)(v25 + 24);
          if (v27 >= v26 >> 1)
          {
            sub_1CCA639D4(v26 > 1, v27 + 1, 1);
            v25 = v38;
          }
          *(_QWORD *)(v25 + 16) = v27 + 1;
          result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(v25+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v27, v4, v33);
          v38 = v25;
          if (v5)
            break;
          v12 = v35;
          v13 = v36;
          v14 = v37;
          v15 = sub_1CCB48FBC(v35, v36, v37, a1);
          v16 = a1;
          v18 = v17;
          v20 = v19;
          v21 = v14;
          v4 = v30;
          sub_1CCA58DB4(v12, v13, v21);
          v35 = v15;
          v36 = v18;
          v5 = 0;
          a1 = v16;
          v2 = v31;
          v37 = v20 & 1;
          if (!--v6)
            goto LABEL_22;
        }
        if ((v37 & 1) == 0)
          goto LABEL_25;
        if (sub_1CCB63ED4())
          swift_isUniquelyReferenced_nonNull_native();
        sub_1CCA14E90(&qword_1EF9E0588);
        v28 = (void (*)(char *, _QWORD))sub_1CCB63C70();
        sub_1CCB63F40();
        v28(v34, 0);
        --v6;
      }
      while (v6);
LABEL_22:
      sub_1CCA58DB4(v35, v36, v37);
      return v38;
    }
  }
  return result;
}

uint64_t sub_1CCB3D32C(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_1CCB3D4F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = sub_1CCB63988();
  v5 = v4;
  if (v3 == sub_1CCB63988() && v5 == v6)
  {
LABEL_20:
    swift_bridgeObjectRelease_n();
    return 1;
  }
  v8 = sub_1CCB642A0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  v10 = 5;
  while (1)
  {
    v11 = v10 - 3;
    if (__OFADD__(v10 - 4, 1))
      break;
    v12 = sub_1CCB63988();
    v14 = v13;
    if (v12 == sub_1CCB63988() && v14 == v15)
    {
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    v17 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
      goto LABEL_7;
    ++v10;
    if (v11 == v2)
      goto LABEL_17;
  }
  __break(1u);
  return result;
}

BOOL static FMIPDeviceConnectedStateType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1CCB3D65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCB4B950(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1CCB3D684()
{
  sub_1CCA20A0C();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB3D6AC()
{
  sub_1CCA20A0C();
  return sub_1CCB643E4();
}

FMIPCore::FMIPUTAlertState_optional __swiftcall FMIPUTAlertState.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  FMIPCore::FMIPUTAlertState_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t sub_1CCB3D734(char *a1, char *a2)
{
  return sub_1CCB1D1D8(*a1, *a2);
}

uint64_t sub_1CCB3D740()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB3D7C0()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB3D81C()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPUTAlertState_optional sub_1CCB3D898(Swift::String *a1)
{
  return FMIPUTAlertState.init(rawValue:)(*a1);
}

void sub_1CCB3D8A4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x64656C62616E65;
  if (*v1)
    v2 = 0x64656C6261736964;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t FMIPDeviceConnectedState.associatedDeviceUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1CC9EAB74(v1, a1, &qword_1ED8A8EF8);
}

uint64_t FMIPDeviceConnectedState.state.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FMIPDeviceConnectedState(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t type metadata accessor for FMIPDeviceConnectedState(uint64_t a1)
{
  return sub_1CC9E911C(a1, qword_1EF9E64A8);
}

uint64_t sub_1CCB3D950()
{
  _BYTE *v0;

  if (*v0)
    return 0x6574617473;
  else
    return 0xD000000000000014;
}

uint64_t sub_1CCB3D98C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCB4B9D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCB3D9B0()
{
  sub_1CCB496BC();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB3D9D8()
{
  sub_1CCB496BC();
  return sub_1CCB643E4();
}

uint64_t FMIPDeviceConnectedState.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];

  v3 = v1;
  v5 = sub_1CCA14E90(&qword_1EF9E6310);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB496BC();
  sub_1CCB643CC();
  v10[15] = 0;
  sub_1CCB63604();
  sub_1CC9CAA38(&qword_1EF9E1CB0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
  sub_1CCB641D4();
  if (!v2)
  {
    v10[14] = *(_BYTE *)(v3 + *(int *)(type metadata accessor for FMIPDeviceConnectedState(0) + 20));
    v10[13] = 1;
    sub_1CCB2435C();
    sub_1CCB64210();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t FMIPDeviceConnectedState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;

  v18 = a2;
  v4 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v4);
  v20 = (uint64_t)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1CCA14E90(&qword_1EF9E6320);
  v6 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FMIPDeviceConnectedState(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB496BC();
  sub_1CCB643B4();
  if (v2)
    return sub_1CCA01CA0((uint64_t)a1);
  v12 = v6;
  v13 = (uint64_t)v11;
  v14 = v18;
  sub_1CCB63604();
  v23 = 0;
  sub_1CC9CAA38(&qword_1EF9E1CA8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  v15 = v19;
  sub_1CCB64144();
  sub_1CC9C3EC0(v20, v13, &qword_1ED8A8EF8);
  v21 = 1;
  sub_1CCB24318();
  sub_1CCB64180();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v15);
  *(_BYTE *)(v13 + *(int *)(v9 + 20)) = v22;
  sub_1CCA0BEEC(v13, v14, type metadata accessor for FMIPDeviceConnectedState);
  sub_1CCA01CA0((uint64_t)a1);
  return sub_1CCA0BF30(v13, type metadata accessor for FMIPDeviceConnectedState);
}

uint64_t sub_1CCB3DDE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPDeviceConnectedState.init(from:)(a1, a2);
}

uint64_t sub_1CCB3DDF8(_QWORD *a1)
{
  return FMIPDeviceConnectedState.encode(to:)(a1);
}

uint64_t FMIPDeviceConnectedStateType.hash(into:)()
{
  return sub_1CCB64348();
}

uint64_t sub_1CCB3DE34()
{
  sub_1CCB497CC();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB3DE5C()
{
  sub_1CCB497CC();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB3DE84()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB3DEBC + 4 * byte_1CCB7453A[*v0]))(0x656E6E6F63736964, 0xEC00000064657463);
}

uint64_t sub_1CCB3DEBC()
{
  return 0x657463656E6E6F63;
}

uint64_t sub_1CCB3DED8()
{
  return 0x6465686361747461;
}

uint64_t sub_1CCB3DEF4()
{
  return 0x6465686361746564;
}

uint64_t sub_1CCB3DF0C()
{
  return 0x6465746365746564;
}

uint64_t sub_1CCB3DF30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCB4BAB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCB3DF54()
{
  sub_1CCB49700();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB3DF7C()
{
  sub_1CCB49700();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB3DFA4()
{
  sub_1CCB49810();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB3DFCC()
{
  sub_1CCB49810();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB3DFF4()
{
  sub_1CCB49788();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB3E01C()
{
  sub_1CCB49788();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB3E044()
{
  sub_1CCB49744();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB3E06C()
{
  sub_1CCB49744();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB3E094()
{
  sub_1CCB49854();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB3E0BC()
{
  sub_1CCB49854();
  return sub_1CCB643E4();
}

void FMIPDeviceConnectedStateType.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[16];

  v3 = sub_1CCA14E90(&qword_1EF9E6328);
  v14[11] = *(_QWORD *)(v3 - 8);
  v14[12] = v3;
  MEMORY[0x1E0C80A78](v3);
  v14[10] = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCA14E90(&qword_1EF9E6330);
  v14[8] = *(_QWORD *)(v5 - 8);
  v14[9] = v5;
  MEMORY[0x1E0C80A78](v5);
  v14[7] = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1EF9E6338);
  v14[5] = *(_QWORD *)(v7 - 8);
  v14[6] = v7;
  MEMORY[0x1E0C80A78](v7);
  v14[4] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCA14E90(&qword_1EF9E6340);
  v14[2] = *(_QWORD *)(v9 - 8);
  v14[3] = v9;
  MEMORY[0x1E0C80A78](v9);
  v14[1] = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCA14E90(&qword_1EF9E6348);
  MEMORY[0x1E0C80A78](v11);
  v12 = sub_1CCA14E90(&qword_1EF9E6350);
  v14[14] = *(_QWORD *)(v12 - 8);
  v14[15] = v12;
  MEMORY[0x1E0C80A78](v12);
  v13 = *v1;
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB49700();
  sub_1CCB643CC();
  __asm { BR              X9 }
}

uint64_t sub_1CCB3E2D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 69) = 0;
  sub_1CCB49854();
  v5 = *(_QWORD *)(v4 - 88);
  sub_1CCB641B0();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v5);
}

uint64_t FMIPDeviceConnectedStateType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD v27[4];
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v42 = a2;
  v41 = sub_1CCA14E90(&qword_1EF9E6388);
  v34 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v40 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CCA14E90(&qword_1EF9E6390);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x1E0C80A78](v4);
  v39 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1EF9E6398);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  MEMORY[0x1E0C80A78](v6);
  v38 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1EF9E63A0);
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  MEMORY[0x1E0C80A78](v8);
  v37 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCA14E90(&qword_1EF9E63A8);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CCA14E90(&qword_1EF9E63B0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v43 = a1;
  sub_1CCA04DDC(a1, v18);
  sub_1CCB49700();
  v19 = v44;
  sub_1CCB643B4();
  if (!v19)
  {
    v27[2] = v10;
    v27[3] = v13;
    v27[1] = v11;
    v44 = v15;
    v28 = v17;
    v29 = v14;
    v20 = sub_1CCB64198();
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X9 }
    v21 = sub_1CCB64000();
    swift_allocError();
    v23 = v22;
    sub_1CCA14E90(&qword_1EF9E5410);
    *v23 = &type metadata for FMIPDeviceConnectedStateType;
    v24 = v28;
    v25 = v29;
    sub_1CCB64108();
    sub_1CCB63FF4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x1E0DEC450], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v24, v25);
  }
  return sub_1CCA01CA0((uint64_t)v43);
}

uint64_t sub_1CCB3E968@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPDeviceConnectedStateType.init(from:)(a1, a2);
}

void sub_1CCB3E97C(_QWORD *a1)
{
  FMIPDeviceConnectedStateType.encode(to:)(a1);
}

uint64_t FMIPBeaconSeparationMonitoringState.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB3E9C0 + 4 * byte_1CCB74549[*v0]))(0x64656C62616E65, 0xE700000000000000);
}

uint64_t sub_1CCB3E9C0()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_1CCB3E9D4()
{
  return 0x64656C6261736964;
}

uint64_t sub_1CCB3E9EC()
{
  return 0x646573756170;
}

uint64_t sub_1CCB3EA00()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB3EA30 + 4 * byte_1CCB7454D[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_1CCB3EA30()
{
  return 0x64656C62616E65;
}

uint64_t sub_1CCB3EA44()
{
  return 0x64656C6261736964;
}

uint64_t sub_1CCB3EA5C()
{
  return 0x646573756170;
}

uint64_t sub_1CCB3EA70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCB4BD08(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCB3EA94()
{
  sub_1CCB49898();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB3EABC()
{
  sub_1CCB49898();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB3EAE4()
{
  sub_1CCB49920();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB3EB0C()
{
  sub_1CCB49920();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB3EB34()
{
  sub_1CCB49964();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB3EB5C()
{
  sub_1CCB49964();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB3EB84()
{
  sub_1CCB498DC();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB3EBAC()
{
  sub_1CCB498DC();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB3EBD4()
{
  sub_1CCB499A8();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB3EBFC()
{
  sub_1CCB499A8();
  return sub_1CCB643E4();
}

void FMIPBeaconSeparationMonitoringState.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = sub_1CCA14E90(&qword_1EF9E63B8);
  v19 = *(_QWORD *)(v4 - 8);
  v20 = v4;
  MEMORY[0x1E0C80A78](v4);
  v18 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1EF9E63C0);
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x1E0C80A78](v6);
  v15 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1EF9E63C8);
  v13 = *(_QWORD *)(v8 - 8);
  v14 = v8;
  MEMORY[0x1E0C80A78](v8);
  v12 = sub_1CCA14E90(&qword_1EF9E63D0);
  MEMORY[0x1E0C80A78](v12);
  v9 = sub_1CCA14E90(&qword_1EF9E63D8);
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v10 = *v2;
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB49898();
  sub_1CCB643CC();
  __asm { BR              X9 }
}

uint64_t sub_1CCB3EDDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 68) = 0;
  sub_1CCB499A8();
  sub_1CCB641B0();
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(v2, *(_QWORD *)(v4 - 168));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v0);
}

uint64_t FMIPBeaconSeparationMonitoringState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v21[7];
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;

  v23 = a2;
  v3 = sub_1CCA14E90(&qword_1EF9E6408);
  v21[5] = *(_QWORD *)(v3 - 8);
  v21[6] = v3;
  MEMORY[0x1E0C80A78](v3);
  v26 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1CCA14E90(&qword_1EF9E6410);
  v21[4] = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCA14E90(&qword_1EF9E6418);
  v21[2] = *(_QWORD *)(v6 - 8);
  v21[3] = v6;
  MEMORY[0x1E0C80A78](v6);
  v24 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1EF9E6420);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = sub_1CCA14E90(&qword_1EF9E6428);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v27 = a1;
  sub_1CCA04DDC(a1, v14);
  sub_1CCB49898();
  v15 = v28;
  sub_1CCB643B4();
  if (!v15)
  {
    v21[0] = v9;
    v21[1] = v8;
    v28 = v11;
    v16 = sub_1CCB64198();
    if (*(_QWORD *)(v16 + 16) == 1)
      __asm { BR              X9 }
    v17 = sub_1CCB64000();
    swift_allocError();
    v19 = v18;
    sub_1CCA14E90(&qword_1EF9E5410);
    *v19 = &type metadata for FMIPBeaconSeparationMonitoringState;
    sub_1CCB64108();
    sub_1CCB63FF4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x1E0DEC450], v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v10);
  }
  return sub_1CCA01CA0((uint64_t)v27);
}

uint64_t sub_1CCB3F398()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB3F3C8 + 4 * byte_1CCB74559[*v0]))(0x64656C62616E65, 0xE700000000000000);
}

uint64_t sub_1CCB3F3C8()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_1CCB3F3DC()
{
  return 0x64656C6261736964;
}

uint64_t sub_1CCB3F3F4()
{
  return 0x646573756170;
}

uint64_t sub_1CCB3F408@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPBeaconSeparationMonitoringState.init(from:)(a1, a2);
}

void sub_1CCB3F41C(_QWORD *a1)
{
  FMIPBeaconSeparationMonitoringState.encode(to:)(a1);
}

BOOL FMIPSeparationMonitoringState.allowsSeparationMonitoringUI.getter()
{
  unsigned __int8 *v0;

  return *v0 != 5;
}

BOOL static FMIPSeparationMonitoringState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 6)
    return v3 == 6;
  if (v2 == 7)
    return v3 == 7;
  if ((v3 & 0xFE) == 6)
    return 0;
  return v2 == v3;
}

uint64_t FMIPSeparationMonitoringState.allowsSeparationMonitoringConfiguration.getter()
{
  unsigned __int8 *v0;
  int v1;
  int v2;
  _BOOL4 v4;

  v1 = *v0;
  v2 = v1 & 0xFE;
  v4 = v1 != 4 && v1 != 2;
  return v2 == 6 || v4;
}

BOOL sub_1CCB3F4C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v7;

  v2 = *a1;
  v3 = *a2;
  v4 = v3 == 6;
  v5 = v3 == 7;
  v7 = v2 == v3 && (v3 & 0xFE) != 6;
  if (v2 == 7)
    v7 = v5;
  if (v2 == 6)
    return v4;
  else
    return v7;
}

uint64_t sub_1CCB3F504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v11;

  v0 = sub_1CCB635B0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCB635A4();
  sub_1CCB634F0();
  v5 = v4;
  sub_1CCB634F0();
  v7 = v5 - v6;
  if (v7 >= 0.0 && v7 <= 900.0)
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return 0;
  }
  if (v7 >= 900.0 && v7 <= 3600.0)
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return 1;
  }
  if (v7 < 3600.0)
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return 3;
  }
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v7 > 43200.0)
    return 3;
  return 2;
}

void sub_1CCB3F648(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;

  v4 = sub_1CCB63988();
  v6 = v5;
  if (v4 == sub_1CCB63988() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
  v9 = sub_1CCB642A0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = 0;
  if ((v9 & 1) == 0)
  {
    v11 = sub_1CCB63988();
    v13 = v12;
    if (v11 == sub_1CCB63988() && v13 == v14)
    {
      swift_bridgeObjectRelease_n();
      v10 = 1;
      goto LABEL_14;
    }
    v16 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      v10 = 1;
      goto LABEL_14;
    }
    v17 = sub_1CCB63988();
    v19 = v18;
    if (v17 == sub_1CCB63988() && v19 == v20)
    {
      v10 = 2;
      swift_bridgeObjectRelease_n();
      goto LABEL_14;
    }
    v21 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
    {
      v10 = 2;
      goto LABEL_14;
    }
    v22 = sub_1CCB63988();
    v24 = v23;
    if (v22 == sub_1CCB63988() && v24 == v25)
    {
      swift_bridgeObjectRelease_n();
      v10 = 3;
      goto LABEL_14;
    }
    v26 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
    {
      v10 = 3;
      goto LABEL_14;
    }
    v27 = sub_1CCB63988();
    v29 = v28;
    if (v27 == sub_1CCB63988() && v29 == v30)
    {
      swift_bridgeObjectRelease_n();
      v10 = 4;
      goto LABEL_14;
    }
    v31 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v31 & 1) != 0)
    {
      v10 = 4;
      goto LABEL_14;
    }
    v32 = sub_1CCB63988();
    v34 = v33;
    if (v32 == sub_1CCB63988() && v34 == v35)
    {
      swift_bridgeObjectRelease_n();
      v10 = 5;
      goto LABEL_14;
    }
    v36 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v36 & 1) != 0)
    {
      v10 = 5;
      goto LABEL_14;
    }
    v37 = sub_1CCB63988();
    v39 = v38;
    if (v37 == sub_1CCB63988() && v39 == v40)
    {
      swift_bridgeObjectRelease_n();
      v10 = 6;
      goto LABEL_14;
    }
    v41 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v41 & 1) != 0)
    {
      v10 = 6;
      goto LABEL_14;
    }
    if (qword_1ED8AA630 != -1)
      swift_once();
    v42 = sub_1CCB637FC();
    sub_1CCA16C20(v42, (uint64_t)qword_1ED8AD7F8);
    v43 = sub_1CCB637D8();
    v44 = sub_1CCB63D3C();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_1CC9BF000, v43, v44, "FMIPBeaconRefreshingController: unhandled beacon type!", v45, 2u);
      MEMORY[0x1D17B214C](v45, -1, -1);
    }

LABEL_13:
    v10 = 0;
  }
LABEL_14:

  *a2 = v10;
}

void sub_1CCB3FAA0()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v0 = sub_1CCB637FC();
  sub_1CCA16C20(v0, (uint64_t)qword_1ED8AD7F8);
  v1 = sub_1CCB637D8();
  v2 = sub_1CCB63D18();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v5 = v4;
    *(_DWORD *)v3 = 136315138;
    sub_1CCA0CB60(0xD000000000000010, 0x80000001CCB7ECD0, &v5);
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v1, v2, "FMIPBeaconRefreshingController: %s - Will update", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v4, -1, -1);
    MEMORY[0x1D17B214C](v3, -1, -1);
  }

  sub_1CC9F186C();
}

uint64_t sub_1CCB3FC1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1CCB63820();
  v17 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCB63868();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v9 = sub_1CCB637FC();
  sub_1CCA16C20(v9, (uint64_t)qword_1ED8AD7F8);
  swift_retain();
  v10 = sub_1CCB637D8();
  v11 = sub_1CCB63D48();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v12 = 67109120;
    LODWORD(aBlock[0]) = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_isThrottled);
    sub_1CCB63E44();
    swift_release();
    _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPBeaconRefreshingController: isThrottled?: %{BOOL}d)", v12, 8u);
    MEMORY[0x1D17B214C](v12, -1, -1);

  }
  else
  {

    swift_release();
  }
  sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A8E30);
  v13 = (void *)sub_1CCB63D90();
  aBlock[4] = sub_1CCB4BFBC;
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E8900C50;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  sub_1CCB63844();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v8, v4, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v17 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1CCB3FF18()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_isThrottled) == 1
    && *(_BYTE *)(v0 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_isThrottledOverride) != 1)
  {
    sub_1CCB40394();
    sub_1CCB45B0C();
  }
  else
  {
    v1 = *(NSObject **)(v0 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshQueue);
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = sub_1CCA20D3C;
    *(_QWORD *)(v2 + 24) = v0;
    v4[4] = sub_1CC9F4530;
    v4[5] = v2;
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 1107296256;
    v4[2] = sub_1CC9F44AC;
    v4[3] = &unk_1E8901150;
    v3 = _Block_copy(v4);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v1, v3);
    _Block_release(v3);
    LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((v1 & 1) != 0)
      __break(1u);
  }
}

uint64_t sub_1CCB4006C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _QWORD *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v20;

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  v5 = &unk_1ED8AD000;
  if (os_log_type_enabled(v3, v4))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v20 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = sub_1CCB635C8();
    v10 = sub_1CC9C6AE4(0xCuLL, v8, v9);
    v11 = MEMORY[0x1D17B0F34](v10);
    v13 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1CCA0CB60(v11, v13, &v20);
    sub_1CCB63E44();
    swift_release_n();
    v5 = (_QWORD *)&unk_1ED8AD000;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPBeaconRefreshingController<%s>.deinit", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v7, -1, -1);
    MEMORY[0x1D17B214C](v6, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v14 = v0 + v5[224];
  v15 = sub_1CCB63604();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v16 = v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_lastRefreshTime;
  v17 = sub_1CCB635B0();
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v18(v16, v17);
  sub_1CCA2F610(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_delegate);
  v18(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_lastActiveTimestamp, v17);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1CCB40370()
{
  sub_1CCB4006C();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB40394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  _QWORD v13[2];
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1CCB63820();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63868();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshQueue);
  aBlock[4] = sub_1CCB4D3AC;
  aBlock[5] = v1;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E8901588;
  v11 = _Block_copy(aBlock);
  swift_retain();
  sub_1CCB63844();
  v13[1] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v3, MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v10, v6, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void sub_1CCB40570(_BYTE *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  char *v10;
  __CFNotificationCenter *v11;
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t aBlock;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  _BYTE *v31;

  v2 = sub_1CCB635B0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v6 = sub_1CCB637FC();
  sub_1CCA16C20(v6, (uint64_t)qword_1ED8AD7F8);
  v7 = sub_1CCB637D8();
  v8 = sub_1CCB63D48();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1CC9BF000, v7, v8, "FMIPBeaconRefreshingController: Stop Refreshing", v9, 2u);
    MEMORY[0x1D17B214C](v9, -1, -1);
  }

  a1[OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_isRefreshing] = 0;
  sub_1CC9CE4D8();
  a1[OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_currentlyRefreshing] = 0;
  a1[OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_nextRefreshQueued] = 0;
  sub_1CCB63514();
  v10 = &a1[OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_lastRefreshTime];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 40))(v10, v5, v2);
  swift_endAccess();
  v11 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v11, a1, (CFNotificationName)*MEMORY[0x1E0D89A98], 0);
  CFNotificationCenterRemoveObserver(v11, a1, (CFNotificationName)*MEMORY[0x1E0D89AC0], 0);
  v12 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v12, sel_removeObserver_, a1);

  v13 = sub_1CCB631E4();
  v29 = (void *)v13;
  v30 = sub_1CC9CAA38(&qword_1ED8A8B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
  v14 = sub_1CCA01CC0(&aBlock);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v14, *MEMORY[0x1E0D21250], v13);
  LOBYTE(v13) = MEMORY[0x1D17B0748](&aBlock);
  sub_1CCA01CA0((uint64_t)&aBlock);
  v15 = MEMORY[0x1E0C809B0];
  if ((v13 & 1) != 0
    && a1[OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_shouldUseBeaconsOptimizationSPI] == 1)
  {
    v16 = sub_1CCB637D8();
    v17 = sub_1CCB63D24();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1CC9BF000, v16, v17, "FMIPBeaconRefreshingController: stopUpdatingApplicationBeacons - Will call", v18, 2u);
      MEMORY[0x1D17B214C](v18, -1, -1);
    }

    v19 = *(void **)&a1[OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession];
    v30 = (uint64_t)sub_1CCB4D3B4;
    v31 = a1;
    aBlock = v15;
    v27 = 1107296256;
    v28 = sub_1CC9C37C0;
    v29 = &unk_1E89015D8;
    v20 = _Block_copy(&aBlock);
    v21 = v19;
    swift_retain();
    swift_release();
    objc_msgSend(v21, sel_stopUpdatingApplicationBeaconsWithCompletion_, v20);
    _Block_release(v20);

  }
  v22 = OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession;
  objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession], sel_stopRefreshing);
  objc_msgSend(*(id *)&a1[v22], sel_stopRefreshingSeparationMonitoringState);
  v23 = *(void **)&a1[v22];
  v30 = (uint64_t)sub_1CCB40D80;
  v31 = 0;
  aBlock = v15;
  v27 = 1107296256;
  v28 = sub_1CCA1F54C;
  v29 = &unk_1E89015B0;
  v24 = _Block_copy(&aBlock);
  v25 = v23;
  objc_msgSend(v25, sel_unsubscribeLocationUpdatesWithCompletion_, v24);
  _Block_release(v24);

}

uint64_t sub_1CCB40984(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  id v16;
  _QWORD v18[2];
  _QWORD aBlock[6];

  v5 = sub_1CCB63820();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB63868();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(_QWORD *)(a3 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshQueue);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = a2;
  aBlock[4] = sub_1CCB4D3D0;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E8901628;
  v15 = _Block_copy(aBlock);
  swift_retain();
  v16 = a2;
  sub_1CCB63844();
  v18[1] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v6, MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

void sub_1CCB40B84(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  NSObject *oslog;
  uint64_t v13;

  *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_appBeacons) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v3 = sub_1CCB637FC();
  sub_1CCA16C20(v3, (uint64_t)qword_1ED8AD7F8);
  v4 = a2;
  v5 = a2;
  oslog = sub_1CCB637D8();
  v6 = sub_1CCB63D48();
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136315138;
    if (a2)
    {
      swift_getErrorValue();
      v9 = sub_1CCB64300();
      v11 = v10;
    }
    else
    {
      v11 = 0xE400000000000000;
      v9 = 1701736302;
    }
    sub_1CCA0CB60(v9, v11, &v13);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, oslog, v6, "FMIPBeaconRefreshingController: stopUpdatingApplicationBeacons - Stopped updating application beacons, error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v8, -1, -1);
    MEMORY[0x1D17B214C](v7, -1, -1);

  }
  else
  {

  }
}

void sub_1CCB40D80(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *oslog;
  uint64_t v12;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = a1;
  v4 = a1;
  oslog = sub_1CCB637D8();
  v5 = sub_1CCB63D48();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v12 = v7;
    *(_DWORD *)v6 = 136315138;
    if (a1)
    {
      swift_getErrorValue();
      v8 = sub_1CCB64300();
      v10 = v9;
    }
    else
    {
      v10 = 0xE400000000000000;
      v8 = 1701736302;
    }
    sub_1CCA0CB60(v8, v10, &v12);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1CC9BF000, oslog, v5, "FMIPBeaconRefreshingController: Stopped Refreshing Locations, error: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v7, -1, -1);
    MEMORY[0x1D17B214C](v6, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1CCB40F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t aBlock[7];

  v58 = a6;
  v59 = a3;
  v60 = a4;
  v68 = a2;
  v8 = sub_1CCB63820();
  v65 = *(_QWORD *)(v8 - 8);
  v66 = v8;
  MEMORY[0x1E0C80A78](v8);
  v64 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCB63868();
  v62 = *(_QWORD *)(v10 - 8);
  v63 = v10;
  MEMORY[0x1E0C80A78](v10);
  v61 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCB635B0();
  v56 = *(_QWORD *)(v12 - 8);
  v57 = v12;
  v13 = *(_QWORD *)(v56 + 64);
  MEMORY[0x1E0C80A78](v12);
  v67 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1CCB63604();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v55 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v49 - v18;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v20 = sub_1CCB637FC();
  sub_1CCA16C20(v20, (uint64_t)qword_1ED8AD7F8);
  v53 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v53(v19, a1, v14);
  v21 = sub_1CCB637D8();
  v22 = sub_1CCB63D48();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc();
    v50 = v15;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc();
    v51 = a1;
    v26 = v13;
    v27 = v25;
    aBlock[0] = v25;
    *(_DWORD *)v24 = 136315138;
    v52 = a5;
    v28 = sub_1CCB635C8();
    v69 = sub_1CCA0CB60(v28, v29, aBlock);
    a5 = v52;
    sub_1CCB63E44();
    v30 = v50;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v14);
    _os_log_impl(&dword_1CC9BF000, v21, v22, "FMIPBeaconRefreshingController: Refreshing beacons %s", v24, 0xCu);
    swift_arrayDestroy();
    v31 = v27;
    v13 = v26;
    a1 = v51;
    MEMORY[0x1D17B214C](v31, -1, -1);
    MEMORY[0x1D17B214C](v24, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);

    v30 = v15;
  }
  v32 = v68;
  v52 = *(_QWORD *)(v68 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshQueue);
  v33 = v55;
  v53(v55, a1, v14);
  v34 = v56;
  v35 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v67, a5, v57);
  v36 = (*(unsigned __int8 *)(v30 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v37 = (v54 + *(unsigned __int8 *)(v34 + 80) + v36) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v38 = v14;
  v39 = (v13 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = (char *)swift_allocObject();
  v41 = v30;
  v42 = (uint64_t)v40;
  v43 = v59;
  *((_QWORD *)v40 + 2) = v32;
  *((_QWORD *)v40 + 3) = v43;
  *((_QWORD *)v40 + 4) = v60;
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v40[v36], v33, v38);
  (*(void (**)(unint64_t, char *, uint64_t))(v34 + 32))(v42 + v37, v67, v35);
  *(_QWORD *)(v42 + v39) = v58;
  aBlock[4] = (uint64_t)sub_1CCB4CE68;
  aBlock[5] = v42;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA00C38;
  aBlock[3] = (uint64_t)&unk_1E8901330;
  v44 = _Block_copy(aBlock);
  swift_retain();
  sub_1CC9DF994(v43);
  v45 = v61;
  sub_1CCB63844();
  v69 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  v46 = v64;
  v47 = v66;
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v45, v46, v44);
  _Block_release(v44);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v46, v47);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v45, v63);
  return swift_release();
}

void sub_1CCB41498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  void (*v20)(char *, uint64_t);
  int v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint8_t *v33;
  uint8_t *v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  char *v69;
  _QWORD aBlock[6];

  v62 = a5;
  v60 = a4;
  v67 = a3;
  v7 = sub_1CCB63604();
  v64 = *(_QWORD *)(v7 - 8);
  v65 = v7;
  MEMORY[0x1E0C80A78](v7);
  v61 = v8;
  v63 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCB635B0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v56 - v14;
  sub_1CCB635A4();
  v16 = a1;
  v17 = a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_lastRefreshTime;
  swift_beginAccess();
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v58(v13, v17, v9);
  sub_1CCB63520();
  v19 = v18;
  v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v13, v9);
  v69 = v15;
  v20(v15, v9);
  v21 = 0;
  v66 = a2;
  if (!a2 && v19 <= 30.0)
    v21 = *(unsigned __int8 *)(v16 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_currentlyRefreshing);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v22 = sub_1CCB637FC();
  v23 = (void *)sub_1CCA16C20(v22, (uint64_t)qword_1ED8AD7F8);
  swift_retain();
  v68 = v23;
  v24 = sub_1CCB637D8();
  v25 = sub_1CCB63D48();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (_DWORD *)swift_slowAlloc();
    v57 = v10;
    v27 = v26;
    *v26 = 67109632;
    LODWORD(aBlock[0]) = v21;
    sub_1CCB63E44();
    *((_WORD *)v27 + 4) = 1024;
    LODWORD(aBlock[0]) = v19 > 30.0;
    sub_1CCB63E44();
    *((_WORD *)v27 + 7) = 1024;
    LODWORD(aBlock[0]) = *(unsigned __int8 *)(v16
                                            + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_currentlyRefreshing);
    sub_1CCB63E44();
    swift_release();
    _os_log_impl(&dword_1CC9BF000, v24, v25, "FMIPBeaconRefreshingController: Should rate limit? %{BOOL}d, possibly stuck? %{BOOL}d, currentlyRefreshing? %{BOOL}d", (uint8_t *)v27, 0x14u);
    v28 = v27;
    v10 = v57;
    MEMORY[0x1D17B214C](v28, -1, -1);

    if (!v21)
      goto LABEL_14;
  }
  else
  {

    swift_release();
    if (!v21)
    {
LABEL_14:
      *(_BYTE *)(v16 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_currentlyRefreshing) = 1;
      v35 = v69;
      sub_1CCB635A4();
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 40))(v17, v35, v9);
      swift_endAccess();
      v36 = sub_1CCB637D8();
      v37 = sub_1CCB63D48();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v38 = 0;
        _os_log_impl(&dword_1CC9BF000, v36, v37, "FMIPBeaconRefreshingController: Refresh Beacon Groups", v38, 2u);
        MEMORY[0x1D17B214C](v38, -1, -1);
      }

      v39 = v16;
      v68 = *(id *)(v16 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession);
      v40 = v65;
      v57 = sub_1CCB63B20();
      v41 = v63;
      v42 = v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, v60, v40);
      v43 = v69;
      v58(v69, v62, v9);
      v44 = (*(unsigned __int8 *)(v42 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
      v45 = *(unsigned __int8 *)(v10 + 80);
      v62 = v9;
      v46 = (v61 + v45 + v44) & ~v45;
      v47 = (v59 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
      v48 = swift_allocObject();
      *(_QWORD *)(v48 + 16) = v39;
      (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))(v48 + v44, v41, v40);
      (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v48 + v46, v43, v62);
      v49 = (uint64_t *)(v48 + v47);
      v50 = v66;
      v51 = v67;
      *v49 = v66;
      v49[1] = v51;
      aBlock[4] = sub_1CCB4CFB8;
      aBlock[5] = v48;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1CCA1DE94;
      aBlock[3] = &unk_1E8901380;
      v52 = _Block_copy(aBlock);
      swift_retain();
      sub_1CC9DF994(v50);
      swift_release();
      v53 = v68;
      v54 = (void *)v57;
      objc_msgSend(v68, sel_beaconGroupsForUUIDs_completion_, v57, v52);
      _Block_release(v52);

      return;
    }
  }
  v29 = sub_1CCB637D8();
  v30 = sub_1CCB63D48();
  v31 = os_log_type_enabled(v29, v30);
  if (v19 > 30.0)
  {
    if (v31)
    {
      v32 = v9;
      v33 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v33 = 134217984;
      *(double *)aBlock = v19;
      sub_1CCB63E44();
      _os_log_impl(&dword_1CC9BF000, v29, v30, "FMIPBeaconRefreshingController: Refresh queue seemed stuck (for %f sec), allowing refresh.", v33, 0xCu);
      v34 = v33;
      v9 = v32;
      MEMORY[0x1D17B214C](v34, -1, -1);
    }

    goto LABEL_14;
  }
  if (v31)
  {
    v55 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v55 = 134217984;
    *(double *)aBlock = v19;
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v29, v30, "FMIPBeaconRefreshingController: Ignoring refresh, the previous one didn't finish, %fs ago", v55, 0xCu);
    MEMORY[0x1D17B214C](v55, -1, -1);
  }

  *(_BYTE *)(v16 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_nextRefreshQueued) = 1;
}

void sub_1CCB41B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  _QWORD aBlock[7];

  v47 = a5;
  v48 = a6;
  v42 = a3;
  v46 = a2;
  v51 = sub_1CCB635B0();
  v45 = *(_QWORD *)(v51 - 8);
  v7 = *(id *)(v45 + 64);
  MEMORY[0x1E0C80A78](v51);
  v50 = (char *)&v39 - (((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63604();
  v43 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  MEMORY[0x1E0C80A78](v8);
  v41 = v9;
  v49 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FMIPItemGroup();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = swift_bridgeObjectRetain();
  v15 = sub_1CC9F7AC0(v14);
  swift_bridgeObjectRelease();
  if (v15 < 0 || (v15 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v16 = sub_1CCB64090();
    swift_release();
    if (v16)
      goto LABEL_4;
LABEL_14:
    swift_release();
    v18 = MEMORY[0x1E0DEE9D8];
    goto LABEL_15;
  }
  v16 = *(_QWORD *)(v15 + 16);
  if (!v16)
    goto LABEL_14;
LABEL_4:
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1CCA63A58(0, v16 & ~(v16 >> 63), 0);
  if (v16 < 0)
  {
    __break(1u);
    return;
  }
  v39 = a4;
  v40 = v7;
  v17 = 0;
  v18 = aBlock[0];
  do
  {
    if ((v15 & 0xC000000000000001) != 0)
      v19 = (id)MEMORY[0x1D17B154C](v17, v15);
    else
      v19 = *(id *)(v15 + 8 * v17 + 32);
    sub_1CCA6D9B8((int64_t)v19, v13);
    aBlock[0] = v18;
    v21 = *(_QWORD *)(v18 + 16);
    v20 = *(_QWORD *)(v18 + 24);
    if (v21 >= v20 >> 1)
    {
      sub_1CCA63A58(v20 > 1, v21 + 1, 1);
      v18 = aBlock[0];
    }
    ++v17;
    *(_QWORD *)(v18 + 16) = v21 + 1;
    sub_1CC9FED60((uint64_t)v13, v18+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v21, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  }
  while (v16 != v17);
  swift_release();
  a4 = v39;
  v7 = v40;
LABEL_15:
  v22 = v46;
  *(_QWORD *)(v46 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_itemGroups) = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v23 = sub_1CCB637FC();
  sub_1CCA16C20(v23, (uint64_t)qword_1ED8AD7F8);
  v24 = sub_1CCB637D8();
  v25 = sub_1CCB63D48();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_1CC9BF000, v24, v25, "FMIPBeaconRefreshingController: Calling SPOwnerSession - allBeacons", v26, 2u);
    MEMORY[0x1D17B214C](v26, -1, -1);
  }

  v40 = *(id *)(v22 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession);
  v27 = v43;
  v28 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v49, v42, v44);
  v29 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v50, a4, v51);
  v30 = (*(unsigned __int8 *)(v27 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  v31 = (v41 + *(unsigned __int8 *)(v29 + 80) + v30) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  v32 = ((unint64_t)v7 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = v22;
  (*(void (**)(unint64_t, char *, uint64_t))(v27 + 32))(v33 + v30, v49, v28);
  (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v33 + v31, v50, v51);
  *(_QWORD *)(v33 + v32) = v18;
  v34 = (uint64_t *)(v33 + ((v32 + 15) & 0xFFFFFFFFFFFFFFF8));
  v36 = v47;
  v35 = v48;
  *v34 = v47;
  v34[1] = v35;
  aBlock[4] = sub_1CCB4D130;
  aBlock[5] = v33;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCB444F4;
  aBlock[3] = &unk_1E89013D0;
  v37 = _Block_copy(aBlock);
  v38 = v40;
  swift_retain();
  sub_1CC9DF994(v36);
  swift_release();
  objc_msgSend(v38, sel_allBeaconsWithCompletion_, v37);
  _Block_release(v37);

}

uint64_t sub_1CCB41F98(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint8_t *v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  int64_t v65;
  unint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  id v75;
  id v76;
  _QWORD *v77;
  int isUniquelyReferenced_nonNull_native;
  char v79;
  unint64_t v80;
  uint64_t v81;
  _BOOL8 v82;
  uint64_t v83;
  char v84;
  unint64_t v85;
  char v86;
  _QWORD *v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t inited;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  void (*v101)(uint64_t, _BYTE *, uint64_t);
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  NSObject *v129;
  os_log_type_t v130;
  _BYTE *v131;
  uint8_t *v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  _BYTE *v136;
  _BYTE *v137;
  NSObject *v138;
  os_log_type_t v139;
  uint8_t *v140;
  _BYTE *v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  NSObject *v145;
  os_log_type_t v146;
  uint8_t *v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  void (*v151)(_QWORD, _QWORD);
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  id v165;
  int64_t v166;
  unint64_t v167;
  unint64_t v168;
  id v169;
  void *v170;
  id v171;
  uint64_t v172;
  id v173;
  _BYTE *v174;
  _QWORD *v175;
  char v176;
  id v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  _BOOL8 v181;
  uint64_t v182;
  unint64_t v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  NSObject *v188;
  os_log_type_t v189;
  uint8_t *v190;
  _QWORD *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  _BYTE *v195;
  NSObject *v196;
  os_log_type_t v197;
  uint8_t *v198;
  _QWORD *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  void *v205;
  _BYTE *v206;
  uint64_t v207;
  uint64_t result;
  _BYTE v209[4];
  _BOOL4 v210;
  id v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  _BYTE *v217;
  NSObject *v218;
  uint64_t v219;
  _BYTE *v220;
  uint64_t v221;
  void (*v222)(uint64_t);
  _BYTE *v223;
  uint64_t v224;
  _BYTE *v225;
  _BYTE *v226;
  _BYTE *v227;
  uint64_t updated;
  _BYTE *v229;
  _BYTE *v230;
  _BYTE *v231;
  uint64_t v232;
  _BYTE *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _BYTE *v240;
  uint64_t v241;
  int64_t v242;
  _QWORD *v243;
  _BYTE *v244;
  _BYTE *v245;
  _BYTE *v246;
  uint64_t v247;
  _BYTE *v248;
  void (*v249)(_BYTE *, uint64_t);
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  _BYTE *v253;
  uint64_t v254;
  _QWORD *aBlock;
  uint64_t v256;
  uint64_t (*v257)(uint64_t);
  void *v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  id v266;
  _QWORD *v267;
  _BYTE *v268;
  unint64_t v269;
  uint64_t v270;

  v212 = a7;
  v222 = a6;
  v213 = a5;
  v234 = a4;
  v239 = a3;
  v9 = sub_1CCB63820();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t)&v209[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_1CCB63868();
  v221 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v220 = &v209[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for FMIPDeviceLostModeMetadata();
  v16 = MEMORY[0x1E0C80A78](v15);
  v246 = &v209[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v16);
  v245 = &v209[-v18];
  v241 = sub_1CCB635B0();
  v232 = *(_QWORD *)(v241 - 8);
  v19 = MEMORY[0x1E0C80A78](v241);
  v240 = &v209[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v19);
  v229 = &v209[-v21];
  v22 = sub_1CCA14E90(&qword_1ED8A7130);
  v23 = MEMORY[0x1E0C80A78](v22);
  v233 = &v209[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v23);
  v231 = &v209[-v25];
  updated = type metadata accessor for FMIPItemUpdateType(0);
  MEMORY[0x1E0C80A78](updated);
  v230 = &v209[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v224 = 0;
  v251 = sub_1CCB63604();
  v247 = *(_QWORD *)(v251 - 8);
  v27 = MEMORY[0x1E0C80A78](v251);
  v217 = &v209[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = MEMORY[0x1E0C80A78](v27);
  v223 = &v209[-v30];
  v31 = MEMORY[0x1E0C80A78](v29);
  v253 = &v209[-v32];
  v33 = MEMORY[0x1E0C80A78](v31);
  v244 = &v209[-v34];
  v35 = MEMORY[0x1E0C80A78](v33);
  v227 = &v209[-v36];
  v37 = MEMORY[0x1E0C80A78](v35);
  v226 = &v209[-v38];
  v39 = MEMORY[0x1E0C80A78](v37);
  v225 = &v209[-v40];
  MEMORY[0x1E0C80A78](v39);
  v248 = &v209[-v41];
  v42 = *(NSObject **)(a2 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshQueue);
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = a2;
  *(_QWORD *)(v43 + 24) = a1;
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = sub_1CCB4D1D4;
  *(_QWORD *)(v44 + 24) = v43;
  v219 = v43;
  v259 = sub_1CC9F4530;
  v260 = v44;
  aBlock = (_QWORD *)MEMORY[0x1E0C809B0];
  v256 = 1107296256;
  v257 = sub_1CC9F44AC;
  v258 = &unk_1E8901448;
  v45 = _Block_copy(&aBlock);
  v236 = a2;
  v46 = a1;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  v218 = v42;
  dispatch_sync(v42, v45);
  _Block_release(v45);
  LOBYTE(v45) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v45 & 1) != 0)
  {
LABEL_152:
    __break(1u);
    goto LABEL_153;
  }
  if (qword_1ED8AA630 != -1)
LABEL_153:
    swift_once();
  v47 = sub_1CCB637FC();
  v48 = sub_1CCA16C20(v47, (uint64_t)qword_1ED8AD7F8);
  swift_bridgeObjectRetain();
  v238 = v48;
  v49 = sub_1CCB637D8();
  v50 = sub_1CCB63D48();
  v51 = os_log_type_enabled(v49, v50);
  v216 = v9;
  v215 = v10;
  v214 = v12;
  v235 = v13;
  if (v51)
  {
    v52 = (uint8_t *)swift_slowAlloc();
    v53 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v52 = 138412290;
    v13 = 0x1E0D898C0uLL;
    sub_1CC9C30A8(0, &qword_1ED8A70F0);
    sub_1CC9F74C8(&qword_1ED8A7F38, &qword_1ED8A70F0);
    v10 = sub_1CCB63C34();
    aBlock = (_QWORD *)v10;
    sub_1CCB63E44();
    *v53 = v10;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v49, v50, "FMIPBeaconRefreshingController: beacons received %@", v52, 0xCu);
    sub_1CCA14E90(&qword_1ED8A8E00);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v53, -1, -1);
    MEMORY[0x1D17B214C](v52, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v242 = v46 & 0xC000000000000001;
  if ((v46 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1CCB63EC8();
    sub_1CC9C30A8(0, &qword_1ED8A70F0);
    sub_1CC9F74C8(&qword_1ED8A7F38, &qword_1ED8A70F0);
    sub_1CCB63C94();
    v9 = v261;
    v252 = v262;
    v54 = v263;
    v12 = v264;
    v55 = v265;
  }
  else
  {
    v56 = -1 << *(_BYTE *)(v46 + 32);
    v57 = *(_QWORD *)(v46 + 56);
    v252 = v46 + 56;
    v54 = ~v56;
    v58 = -v56;
    if (v58 < 64)
      v59 = ~(-1 << v58);
    else
      v59 = -1;
    v55 = v59 & v57;
    swift_bridgeObjectRetain();
    v12 = 0;
    v9 = v46;
  }
  v250 = v9 & 0x7FFFFFFFFFFFFFFFLL;
  v237 = v54;
  v60 = (unint64_t)(v54 + 64) >> 6;
  v211 = (id)*MEMORY[0x1E0D89A28];
  v243 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v249 = (void (*)(_BYTE *, uint64_t))(MEMORY[0x1E0DEE9B0] + 8);
  while (1)
  {
    v61 = v12;
    if ((v9 & 0x8000000000000000) == 0)
      break;
    v64 = (void *)sub_1CCB63F28();
    if (!v64)
      goto LABEL_51;
    v266 = v64;
    v10 = sub_1CC9C30A8(0, &qword_1ED8A70F0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v13 = (uint64_t)aBlock;
    swift_unknownObjectRelease();
    if (!v13)
      goto LABEL_51;
LABEL_34:
    v68 = objc_msgSend((id)v13, sel_role);

    if (v68)
    {

    }
    else
    {
      v69 = objc_msgSend((id)v13, sel_identifier);
      sub_1CCB635EC();

      v70 = v211;
      v71 = objc_msgSend((id)v13, sel_taskInformation);
      type metadata accessor for SPBeaconTaskName(0);
      sub_1CC9C30A8(0, &qword_1EF9E1E58);
      sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D8, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_1CCB65E60);
      v72 = sub_1CCB638E0();

      if (*(_QWORD *)(v72 + 16) && (v73 = sub_1CCAC8DD0((uint64_t)v70), (v74 & 1) != 0))
      {
        v75 = *(id *)(*(_QWORD *)(v72 + 56) + 8 * v73);

        swift_bridgeObjectRelease();
        v76 = objc_msgSend(v75, sel_state);

        v210 = v76 == 0;
      }
      else
      {

        swift_bridgeObjectRelease();
        v210 = 0;
      }
      v77 = v243;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock = v77;
      v80 = sub_1CCAC8D64((uint64_t)v248);
      v81 = v77[2];
      v82 = (v79 & 1) == 0;
      v83 = v81 + v82;
      if (__OFADD__(v81, v82))
      {
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        result = sub_1CCB642DC();
        __break(1u);
        return result;
      }
      v84 = v79;
      if (v77[3] >= v83)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1CCAEDA2C();
      }
      else
      {
        sub_1CCAEA768(v83, isUniquelyReferenced_nonNull_native);
        v85 = sub_1CCAC8D64((uint64_t)v248);
        if ((v84 & 1) != (v86 & 1))
          goto LABEL_156;
        v80 = v85;
      }
      v10 = v210;
      v87 = aBlock;
      v243 = aBlock;
      if ((v84 & 1) != 0)
      {
        *(_BYTE *)(aBlock[7] + v80) = v210;
      }
      else
      {
        aBlock[(v80 >> 6) + 8] |= 1 << v80;
        (*(void (**)(unint64_t, _BYTE *, uint64_t))(v247 + 16))(v87[6] + *(_QWORD *)(v247 + 72) * v80, v248, v251);
        *(_BYTE *)(v87[7] + v80) = v10;
        v88 = v87[2];
        v89 = __OFADD__(v88, 1);
        v90 = v88 + 1;
        if (v89)
          goto LABEL_155;
        v87[2] = v90;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v247 + 8))(v248, v251);

    }
  }
  if (v55)
  {
    v62 = __clz(__rbit64(v55));
    v55 &= v55 - 1;
    v63 = v62 | (v12 << 6);
    goto LABEL_33;
  }
  v65 = v12 + 1;
  if (__OFADD__(v12, 1))
    goto LABEL_150;
  if (v65 < v60)
  {
    v66 = *(_QWORD *)(v252 + 8 * v65);
    ++v12;
    if (!v66)
    {
      v12 = v61 + 2;
      if (v61 + 2 >= v60)
        goto LABEL_51;
      v66 = *(_QWORD *)(v252 + 8 * v12);
      if (!v66)
      {
        v12 = v61 + 3;
        if (v61 + 3 >= v60)
          goto LABEL_51;
        v66 = *(_QWORD *)(v252 + 8 * v12);
        if (!v66)
        {
          v12 = v61 + 4;
          if (v61 + 4 >= v60)
            goto LABEL_51;
          v66 = *(_QWORD *)(v252 + 8 * v12);
          if (!v66)
          {
            v67 = v61 + 5;
            do
            {
              if (v60 == v67)
                goto LABEL_51;
              v66 = *(_QWORD *)(v252 + 8 * v67++);
            }
            while (!v66);
            v12 = v67 - 1;
          }
        }
      }
    }
    v55 = (v66 - 1) & v66;
    v63 = __clz(__rbit64(v66)) + (v12 << 6);
LABEL_33:
    v13 = (uint64_t)*(id *)(*(_QWORD *)(v9 + 48) + 8 * v63);
    if (!v13)
      goto LABEL_51;
    goto LABEL_34;
  }
LABEL_51:
  sub_1CCA2F54C();
  v237 = v236 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_delegate;
  if (MEMORY[0x1D17B2218]())
  {
    sub_1CCA14E90(&qword_1EF9E6610);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1CCB677E0;
    *(_BYTE *)(inited + 32) = 0;
    *(_QWORD *)(inited + 40) = v243;
    v92 = sub_1CCACCC58(inited);
    swift_setDeallocating();
    swift_bridgeObjectRetain();
    sub_1CCA14E90(&qword_1EF9E6618);
    swift_arrayDestroy();
    sub_1CC9D495C(v92);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  v93 = sub_1CCA14E90(&qword_1EF9E42D8);
  v94 = (uint64_t)v230;
  v95 = &v230[*(int *)(v93 + 48)];
  v12 = v251;
  v248 = *(_BYTE **)(v247 + 16);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v248)(v230, v239, v251);
  v96 = v232;
  v97 = v241;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v232 + 16))(v95, v234, v241);
  swift_storeEnumTagMultiPayload();
  v98 = (uint64_t)v231;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v96 + 56))(v231, 1, 1, v97);
  type metadata accessor for FMIPItemUpdateContext(0);
  v99 = swift_allocObject();
  sub_1CCA0BEEC(v94, v99 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_type, type metadata accessor for FMIPItemUpdateType);
  v100 = v229;
  sub_1CCB635A4();
  v101 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v96 + 32);
  v101(v99 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_timestamp, v100, v97);
  v102 = v233;
  sub_1CC9EAB74(v98, (uint64_t)v233, &qword_1ED8A7130);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v96 + 48))(v102, 1, v97) == 1)
  {
    v103 = v240;
    sub_1CCB635A4();
    sub_1CC9C3E84(v98, &qword_1ED8A7130);
    sub_1CCA0BF30(v94, type metadata accessor for FMIPItemUpdateType);
    sub_1CC9C3E84((uint64_t)v102, &qword_1ED8A7130);
  }
  else
  {
    sub_1CC9C3E84(v98, &qword_1ED8A7130);
    sub_1CCA0BF30(v94, type metadata accessor for FMIPItemUpdateType);
    v103 = v240;
    v101((uint64_t)v240, v102, v97);
  }
  v101(v99 + OBJC_IVAR____TtC8FMIPCore21FMIPItemUpdateContext_creationTimestamp, v103, v97);
  v234 = v99;
  if (!v242)
  {
    v120 = swift_bridgeObjectRetain();
    v104 = sub_1CCB48C9C(v120);
    goto LABEL_78;
  }
  v104 = MEMORY[0x1E0DEE9E8];
  aBlock = (_QWORD *)MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRetain();
  sub_1CCB63EC8();
  v105 = sub_1CCB63F28();
  if (!v105)
    goto LABEL_77;
  v106 = v105;
  sub_1CC9C30A8(0, &qword_1ED8A70F0);
  v10 = -1;
  v12 = 63;
  v13 = 1;
  while (2)
  {
    v254 = v106;
    swift_dynamicCast();
    v107 = objc_msgSend(v266, sel_role);

    v9 = (uint64_t)v266;
    if (!v107)
    {

      goto LABEL_60;
    }
    v108 = aBlock;
    v109 = aBlock[2];
    if (aBlock[3] <= v109)
    {
      sub_1CCA74E04(v109 + 1);
      v108 = aBlock;
    }
    v110 = sub_1CCB63DE4();
    v111 = v108 + 7;
    v112 = -1 << *((_BYTE *)v108 + 32);
    v113 = v110 & ~v112;
    v114 = v113 >> 6;
    if (((-1 << v113) & ~v108[(v113 >> 6) + 7]) != 0)
    {
      v115 = __clz(__rbit64((-1 << v113) & ~v108[(v113 >> 6) + 7])) | v113 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_74;
    }
    v116 = 0;
    v117 = (unint64_t)(63 - v112) >> 6;
    do
    {
      if (++v114 == v117 && (v116 & 1) != 0)
      {
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
        goto LABEL_152;
      }
      v118 = v114 == v117;
      if (v114 == v117)
        v114 = 0;
      v116 |= v118;
      v119 = v111[v114];
    }
    while (v119 == -1);
    v115 = __clz(__rbit64(~v119)) + (v114 << 6);
LABEL_74:
    *(_QWORD *)((char *)v111 + ((v115 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v115;
    *(_QWORD *)(v108[6] + 8 * v115) = v9;
    ++v108[2];
LABEL_60:
    v106 = sub_1CCB63F28();
    if (v106)
      continue;
    break;
  }
  v104 = (uint64_t)aBlock;
  v12 = v251;
  v99 = v234;
LABEL_77:
  swift_release();
LABEL_78:
  v121 = v236;
  swift_retain();
  v122 = sub_1CCB4C3B0(v104, v121);
  swift_release();
  swift_retain();
  v123 = sub_1CCB4CA28(v122, v121);
  swift_release();
  swift_retain();
  v124 = sub_1CCB4B0D0(v123, v99);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v125 = swift_bridgeObjectRetain();
  v126 = sub_1CCAA6FC0(v125);
  swift_bridgeObjectRelease();
  v127 = sub_1CCA1F55C(v126, &qword_1ED8A70F0, 0x1E0D898C0, (uint64_t)&protocol witness table for SPBeacon);
  swift_release();
  sub_1CC9CF05C(v127);
  swift_bridgeObjectRelease();
  v128 = v225;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v248)(v225, v239, v12);
  v129 = sub_1CCB637D8();
  v130 = sub_1CCB63D48();
  if (os_log_type_enabled(v129, v130))
  {
    v131 = v128;
    v132 = (uint8_t *)swift_slowAlloc();
    v133 = (_QWORD *)swift_slowAlloc();
    aBlock = v133;
    *(_DWORD *)v132 = 136315138;
    v134 = sub_1CCB635C8();
    v266 = (id)sub_1CCA0CB60(v134, v135, (uint64_t *)&aBlock);
    v12 = v251;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    v249 = *(void (**)(_BYTE *, uint64_t))(v247 + 8);
    v249(v131, v12);
    _os_log_impl(&dword_1CC9BF000, v129, v130, "FMIPBeaconRefreshingController: separation state %s", v132, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v133, -1, -1);
    MEMORY[0x1D17B214C](v132, -1, -1);
  }
  else
  {
    v249 = *(void (**)(_BYTE *, uint64_t))(v247 + 8);
    v249(v128, v12);
  }

  v136 = v227;
  v137 = v226;
  if (MEMORY[0x1D17B2218](v237))
  {
    sub_1CCA24148(v124);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  ((void (*)(_BYTE *, uint64_t, uint64_t))v248)(v137, v239, v12);
  v138 = sub_1CCB637D8();
  v139 = sub_1CCB63D48();
  if (os_log_type_enabled(v138, v139))
  {
    v140 = (uint8_t *)swift_slowAlloc();
    v141 = v137;
    v142 = (_QWORD *)swift_slowAlloc();
    aBlock = v142;
    *(_DWORD *)v140 = 136315138;
    v143 = sub_1CCB635C8();
    v266 = (id)sub_1CCA0CB60(v143, v144, (uint64_t *)&aBlock);
    v12 = v251;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    v249(v141, v12);
    _os_log_impl(&dword_1CC9BF000, v138, v139, "FMIPBeaconRefreshingController: items updated %s", v140, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v142, -1, -1);
    MEMORY[0x1D17B214C](v140, -1, -1);
  }
  else
  {
    v249(v137, v12);
  }

  if (MEMORY[0x1D17B2218](v237))
  {
    sub_1CC9F7D4C(v213);
    swift_unknownObjectRelease();
  }
  ((void (*)(_BYTE *, uint64_t, uint64_t))v248)(v136, v239, v12);
  v145 = sub_1CCB637D8();
  v146 = sub_1CCB63D48();
  if (os_log_type_enabled(v145, v146))
  {
    v147 = (uint8_t *)swift_slowAlloc();
    v148 = (_QWORD *)swift_slowAlloc();
    aBlock = v148;
    *(_DWORD *)v147 = 136315138;
    v149 = sub_1CCB635C8();
    v266 = (id)sub_1CCA0CB60(v149, v150, (uint64_t *)&aBlock);
    v12 = v251;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    v151 = (void (*)(_QWORD, _QWORD))v249;
    v249(v136, v12);
    _os_log_impl(&dword_1CC9BF000, v145, v146, "FMIPBeaconRefreshingController: groups updated %s", v147, 0xCu);
    swift_arrayDestroy();
    v152 = v148;
    v9 = (uint64_t)v151;
    MEMORY[0x1D17B214C](v152, -1, -1);
    MEMORY[0x1D17B214C](v147, -1, -1);
  }
  else
  {
    v9 = (uint64_t)v249;
    v249(v136, v12);
  }

  v153 = MEMORY[0x1E0DEE9D8];
  v252 = sub_1CCAC54E8(MEMORY[0x1E0DEE9D8]);
  v154 = (_QWORD *)sub_1CCAC56A0(v153);
  if (v242)
  {
    swift_bridgeObjectRetain();
    sub_1CCB63EC8();
    sub_1CC9C30A8(0, &qword_1ED8A70F0);
    sub_1CC9F74C8(&qword_1ED8A7F38, &qword_1ED8A70F0);
    sub_1CCB63C94();
    v46 = (unint64_t)v266;
    v243 = v267;
    v155 = v268;
    v10 = v269;
    v13 = v270;
  }
  else
  {
    v156 = -1 << *(_BYTE *)(v46 + 32);
    v157 = *(_QWORD *)(v46 + 56);
    v243 = (_QWORD *)(v46 + 56);
    v158 = ~v156;
    v159 = -v156;
    if (v159 < 64)
      v160 = ~(-1 << v159);
    else
      v160 = -1;
    v13 = v160 & v157;
    swift_bridgeObjectRetain();
    v155 = (_BYTE *)v158;
    v10 = 0;
  }
  v241 = v46 & 0x7FFFFFFFFFFFFFFFLL;
  v233 = v155;
  v242 = (unint64_t)(v155 + 64) >> 6;
  v240 = (_BYTE *)(MEMORY[0x1E0DEE9B0] + 8);
  v250 = v46;
  while (2)
  {
    if ((v46 & 0x8000000000000000) != 0)
    {
      v164 = sub_1CCB63F28();
      if (!v164)
        goto LABEL_133;
      v254 = v164;
      sub_1CC9C30A8(0, &qword_1ED8A70F0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v165 = aBlock;
      swift_unknownObjectRelease();
      v163 = v10;
      v161 = v13;
      if (!v165)
        goto LABEL_133;
      goto LABEL_122;
    }
    if (v13)
    {
      v161 = (v13 - 1) & v13;
      v162 = __clz(__rbit64(v13)) | (v10 << 6);
      v163 = v10;
LABEL_121:
      v165 = *(id *)(*(_QWORD *)(v46 + 48) + 8 * v162);
      if (!v165)
        goto LABEL_133;
LABEL_122:
      v169 = objc_msgSend(v165, sel_lostModeInfo);
      if (v169)
      {
        v170 = v169;
        v171 = objc_msgSend(v165, sel_identifier);
        v172 = (uint64_t)v244;
        sub_1CCB635EC();

        v173 = v170;
        v174 = v245;
        FMIPDeviceLostModeMetadata.init(lostModeInfo:)(v173, (uint64_t)v245);
        v13 = (uint64_t)v246;
        sub_1CC9FED60((uint64_t)v174, (uint64_t)v246, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDeviceLostModeMetadata);
        v175 = (_QWORD *)v252;
        v176 = swift_isUniquelyReferenced_nonNull_native();
        aBlock = v175;
        sub_1CCAEBAB0(v13, v172, v176);
        v252 = (unint64_t)aBlock;
        swift_bridgeObjectRelease();
        v9 = (uint64_t)v249;
        v249((_BYTE *)v172, v12);

      }
      v177 = objc_msgSend(v165, sel_identifier);
      v178 = v253;
      sub_1CCB635EC();

      sub_1CCB3F648(objc_msgSend(v165, sel_type), (char *)&v254);
      v46 = v254;
      v12 = swift_isUniquelyReferenced_nonNull_native();
      aBlock = v154;
      v10 = sub_1CCAC8D64((uint64_t)v178);
      v180 = v154[2];
      v181 = (v179 & 1) == 0;
      v182 = v180 + v181;
      if (__OFADD__(v180, v181))
        goto LABEL_148;
      v13 = v179;
      if (v154[3] >= v182)
      {
        if ((v12 & 1) == 0)
          sub_1CCAEDC4C();
      }
      else
      {
        sub_1CCAEAB04(v182, v12);
        v183 = sub_1CCAC8D64((uint64_t)v253);
        if ((v13 & 1) != (v184 & 1))
          goto LABEL_156;
        v10 = v183;
      }
      v12 = v251;
      v154 = aBlock;
      if ((v13 & 1) != 0)
      {
        *(_BYTE *)(aBlock[7] + v10) = v46;
      }
      else
      {
        aBlock[(v10 >> 6) + 8] |= 1 << v10;
        ((void (*)(unint64_t, _BYTE *, uint64_t))v248)(v154[6] + *(_QWORD *)(v247 + 72) * v10, v253, v12);
        *(_BYTE *)(v154[7] + v10) = v46;
        v185 = v154[2];
        v89 = __OFADD__(v185, 1);
        v186 = v185 + 1;
        if (v89)
          goto LABEL_149;
        v154[2] = v186;
      }
      swift_bridgeObjectRelease();
      ((void (*)(_BYTE *, uint64_t))v9)(v253, v12);

      v10 = v163;
      v13 = v161;
      v46 = v250;
      continue;
    }
    break;
  }
  v166 = v10 + 1;
  if (__OFADD__(v10, 1))
    goto LABEL_151;
  if (v166 >= v242)
    goto LABEL_133;
  v167 = v243[v166];
  v163 = v10 + 1;
  if (v167)
    goto LABEL_120;
  v163 = v10 + 2;
  if ((uint64_t)(v10 + 2) >= v242)
    goto LABEL_133;
  v167 = v243[v163];
  if (v167)
    goto LABEL_120;
  v163 = v10 + 3;
  if ((uint64_t)(v10 + 3) >= v242)
    goto LABEL_133;
  v167 = v243[v163];
  if (v167)
    goto LABEL_120;
  v163 = v10 + 4;
  if ((uint64_t)(v10 + 4) >= v242)
    goto LABEL_133;
  v167 = v243[v163];
  if (v167)
  {
LABEL_120:
    v161 = (v167 - 1) & v167;
    v162 = __clz(__rbit64(v167)) + (v163 << 6);
    goto LABEL_121;
  }
  v168 = v10 + 5;
  while (v242 != v168)
  {
    v167 = v243[v168++];
    if (v167)
    {
      v163 = v168 - 1;
      goto LABEL_120;
    }
  }
LABEL_133:
  sub_1CCA2F54C();
  if (MEMORY[0x1D17B2218](v237))
  {
    sub_1CCAA9EE8(v252);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v187 = v223;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v248)(v223, v239, v12);
  v188 = sub_1CCB637D8();
  v189 = sub_1CCB63D48();
  if (os_log_type_enabled(v188, v189))
  {
    v190 = (uint8_t *)swift_slowAlloc();
    v191 = (_QWORD *)swift_slowAlloc();
    aBlock = v191;
    *(_DWORD *)v190 = 136315138;
    v192 = sub_1CCB635C8();
    v254 = sub_1CCA0CB60(v192, v193, (uint64_t *)&aBlock);
    v12 = v251;
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    v249(v187, v12);
    _os_log_impl(&dword_1CC9BF000, v188, v189, "FMIPBeaconRefreshingController: lost mode info %s", v190, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v191, -1, -1);
    MEMORY[0x1D17B214C](v190, -1, -1);
  }
  else
  {
    v249(v187, v12);
  }

  v194 = v235;
  v195 = v217;
  if (MEMORY[0x1D17B2218](v237))
  {
    sub_1CC9DCE98((uint64_t)v154);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  ((void (*)(_BYTE *, uint64_t, uint64_t))v248)(v195, v239, v12);
  v196 = sub_1CCB637D8();
  v197 = sub_1CCB63D48();
  if (os_log_type_enabled(v196, v197))
  {
    v198 = (uint8_t *)swift_slowAlloc();
    v199 = (_QWORD *)swift_slowAlloc();
    aBlock = v199;
    *(_DWORD *)v198 = 136315138;
    v200 = sub_1CCB635C8();
    v254 = sub_1CCA0CB60(v200, v201, (uint64_t *)&aBlock);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    v249(v195, v12);
    _os_log_impl(&dword_1CC9BF000, v196, v197, "FMIPBeaconRefreshingController: beacon types %s", v198, 0xCu);
    v194 = v235;
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v199, -1, -1);
    MEMORY[0x1D17B214C](v198, -1, -1);
  }
  else
  {
    v249(v195, v12);
  }

  v202 = v216;
  v203 = v215;
  v204 = v214;
  v259 = sub_1CCB4D1EC;
  v260 = v236;
  aBlock = (_QWORD *)MEMORY[0x1E0C809B0];
  v256 = 1107296256;
  v257 = sub_1CCA00C38;
  v258 = &unk_1E8901470;
  v205 = _Block_copy(&aBlock);
  swift_retain();
  v206 = v220;
  sub_1CCB63844();
  v254 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v206, v204, v205);
  _Block_release(v205);
  (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v204, v202);
  (*(void (**)(_BYTE *, uint64_t))(v221 + 8))(v206, v194);
  v207 = swift_release();
  if (v222)
    v222(v207);
  swift_release();
  return swift_release();
}

uint64_t sub_1CCB43F98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRetain();
  v4 = sub_1CCAA6FC0(a2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_spBeacons) = v4;
  return swift_bridgeObjectRelease();
}

void sub_1CCB43FEC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  uint8_t *v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(uint64_t, char *, uint64_t);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(unint64_t, char *, uint64_t);
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  NSObject *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char isEscapingClosureAtFileLocation;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[6];
  _QWORD aBlock[7];

  v2 = *a1;
  v3 = sub_1CCB63604();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = MEMORY[0x1E0C80A78](v3);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v44 - v7;
  v52 = sub_1CCB635B0();
  v9 = *(_QWORD *)(v52 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x1E0C80A78](v52);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v44 - v13;
  *((_BYTE *)a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_currentlyRefreshing) = 0;
  if (*((_BYTE *)a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_nextRefreshQueued) == 1)
  {
    v51 = v12;
    v48 = v2;
    v49 = a1;
    *((_BYTE *)a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_nextRefreshQueued) = 0;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v15 = sub_1CCB637FC();
    sub_1CCA16C20(v15, (uint64_t)qword_1ED8AD7F8);
    v16 = sub_1CCB637D8();
    v17 = sub_1CCB63D48();
    v18 = os_log_type_enabled(v16, v17);
    v50 = v14;
    if (v18)
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1CC9BF000, v16, v17, "FMIPBeaconRefreshingController: Another refresh was queued, running.", v19, 2u);
      v20 = v19;
      v14 = v50;
      MEMORY[0x1D17B214C](v20, -1, -1);
    }

    sub_1CCB635A4();
    sub_1CCB635F8();
    v21 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v45 = v8;
    v21((char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v8, v3);
    v22 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 16);
    v47 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    v23 = v52;
    v22(v51, v14, v52);
    v24 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v25 = (v5 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
    v27 = (*(unsigned __int8 *)(v9 + 80) + v26 + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v28 = swift_allocObject();
    v29 = *(void (**)(unint64_t, char *, uint64_t))(v4 + 32);
    v30 = v47;
    v46 = v4;
    v47 = (char *)v3;
    v29(v28 + v24, v30, v3);
    *(_QWORD *)(v28 + v25) = v49;
    v31 = (_QWORD *)(v28 + v26);
    *v31 = 0;
    v31[1] = 0;
    v44 = v9;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 32))(v28 + v27, v51, v23);
    *(_QWORD *)(v28 + ((v10 + v27 + 7) & 0xFFFFFFFFFFFFFFF8)) = v48;
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = sub_1CCB4CD6C;
    *(_QWORD *)(v32 + 24) = v28;
    aBlock[4] = sub_1CC9F4530;
    aBlock[5] = v32;
    v33 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CC9F44AC;
    aBlock[3] = &unk_1E89014E8;
    v34 = _Block_copy(aBlock);
    v35 = _Block_copy(v34);
    v36 = qword_1ED8A8CB8;
    swift_retain();
    swift_retain();
    if (v36 != -1)
      swift_once();
    v37 = qword_1ED8A8CA8;
    swift_unknownObjectRetain();
    v38 = _os_activity_create(&dword_1CC9BF000, "FMIPBeaconRefreshingController.refreshBeacons", v37, OS_ACTIVITY_FLAG_DEFAULT);
    swift_unknownObjectRelease();
    v39 = _Block_copy(v35);
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = v39;
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = sub_1CCAAB8D8;
    *(_QWORD *)(v41 + 24) = v40;
    v53[4] = sub_1CC9F4530;
    v53[5] = v41;
    v53[0] = v33;
    v53[1] = 1107296256;
    v53[2] = sub_1CC9F44AC;
    v53[3] = &unk_1E8901560;
    v42 = _Block_copy(v53);
    swift_retain();
    swift_release();
    os_activity_apply(v38, v42);
    _Block_release(v42);
    LOBYTE(v42) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    _Block_release(v35);
    swift_unknownObjectRelease();
    _Block_release(v34);
    if ((v42 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, char *))(v46 + 8))(v45, v47);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v50, v52);
      swift_release();
      swift_release();
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0)
        return;
    }
    __break(1u);
  }
}

uint64_t sub_1CCB444F4(uint64_t a1, uint64_t a2)
{
  return sub_1CC9F742C(a1, a2, &qword_1ED8A70F0, 0x1E0D898C0, &qword_1ED8A7F38);
}

uint64_t sub_1CCB44510(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  *(_BYTE *)(result + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_currentlyRefreshing) = 0;
  if (*(_BYTE *)(result + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_nextRefreshQueued) == 1)
  {
    *(_BYTE *)(result + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_nextRefreshQueued) = 0;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v1 = sub_1CCB637FC();
    sub_1CCA16C20(v1, (uint64_t)qword_1ED8AD7F8);
    v2 = sub_1CCB637D8();
    v3 = sub_1CCB63D48();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1CC9BF000, v2, v3, "FMIPBeaconRefreshingController: Another refresh was queued, running.", v4, 2u);
      MEMORY[0x1D17B214C](v4, -1, -1);
    }

    return sub_1CCA01CFC(0, 0);
  }
  return result;
}

uint64_t sub_1CCB44614(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  void *v16;
  _QWORD v18[2];
  _QWORD aBlock[6];
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = sub_1CCB63820();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1CCB63868();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(_QWORD *)(v2 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshQueue);
  v13 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  v21 = v13;
  v14 = swift_allocObject();
  v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v14 + 32) = v15;
  *(_BYTE *)(v14 + 48) = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(v14 + 56) = v2;
  aBlock[4] = sub_1CCB4BFF4;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E8900CA0;
  v16 = _Block_copy(aBlock);
  sub_1CC9F1844((uint64_t)&v21);
  sub_1CC9F1844((uint64_t)&v20);
  swift_retain();
  sub_1CCB63844();
  v18[1] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, v5, MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v12, v8, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void sub_1CCB44834(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t aBlock[6];

  v3 = sub_1CC9F1CCC();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v4 = sub_1CCB637FC();
  sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v5 = v3;
  v6 = sub_1CCB637D8();
  v7 = sub_1CCB63D48();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    aBlock[0] = v20;
    *(_DWORD *)v8 = 136315394;
    v9 = sub_1CCB635C8();
    v11 = sub_1CC9C6AE4(0xCuLL, v9, v10);
    v12 = MEMORY[0x1D17B0F34](v11);
    v14 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1CCA0CB60(v12, v14, aBlock);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2048;
    v15 = objc_msgSend(v5, sel_searchIdentifiers);
    sub_1CCB63604();
    sub_1CCB63B38();

    swift_bridgeObjectRelease();
    sub_1CCB63E44();

    _os_log_impl(&dword_1CC9BF000, v6, v7, "🥑 FMIPBeaconRefreshingController<%s> asking %ld snapshot locations…", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v20, -1, -1);
    MEMORY[0x1D17B214C](v8, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v16 = *(void **)(a2 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession);
  v17 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = (uint64_t)sub_1CCB4C000;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1CCA7FA4C;
  aBlock[3] = (uint64_t)&unk_1E8900CC8;
  v18 = _Block_copy(aBlock);
  v19 = v16;
  swift_release();
  objc_msgSend(v19, sel_locationForContext_completion_, v5, v18);
  _Block_release(v18);

}

void sub_1CCB44B60(void *a1, _QWORD *a2)
{
  uint64_t Strong;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t (*v24)(uint64_t);
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  NSObject *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  char isEscapingClosureAtFileLocation;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t);
  void *v67;
  uint64_t (*v68)();
  uint64_t v69;
  uint64_t aBlock;
  uint64_t v71;
  uint64_t (*v72)(uint64_t);
  void *v73;
  uint64_t (*v74)();
  uint64_t v75;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v5 = Strong;
    v63 = Strong;
    if (a2)
    {
      v6 = a2;
      if (qword_1ED8AA630 != -1)
        swift_once();
      v7 = sub_1CCB637FC();
      sub_1CCA16C20(v7, (uint64_t)qword_1ED8AD7F8);
      v8 = a2;
      swift_retain();
      v9 = a2;
      swift_retain();
      v10 = sub_1CCB637D8();
      v11 = sub_1CCB63D48();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = swift_slowAlloc();
        v13 = swift_slowAlloc();
        aBlock = v13;
        *(_DWORD *)v12 = 136315394;
        v14 = sub_1CCB635C8();
        v16 = sub_1CC9C6AE4(0xCuLL, v14, v15);
        v17 = MEMORY[0x1D17B0F34](v16);
        v19 = v18;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v20 = v17;
        v5 = v63;
        sub_1CCA0CB60(v20, v19, &aBlock);
        sub_1CCB63E44();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v12 + 12) = 2080;
        swift_getErrorValue();
        v21 = sub_1CCB64300();
        v64 = sub_1CCA0CB60(v21, v22, &aBlock);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1CC9BF000, v10, v11, "🥑 FMIPBeaconRefreshingController<%s> failed obtaining snapshot locations %s", (uint8_t *)v12, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v13, -1, -1);
        MEMORY[0x1D17B214C](v12, -1, -1);
      }
      else
      {
        swift_release_n();

      }
      v25 = sub_1CCAC5840(MEMORY[0x1E0DEE9D8]);
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = v5;
      v27 = swift_allocObject();
      *(_QWORD *)(v27 + 16) = sub_1CCB4D488;
      *(_QWORD *)(v27 + 24) = v26;
      v74 = sub_1CC9F4530;
      v75 = v27;
      v28 = MEMORY[0x1E0C809B0];
      aBlock = MEMORY[0x1E0C809B0];
      v71 = 1107296256;
      v72 = sub_1CC9F44AC;
      v73 = &unk_1E8900E30;
      v29 = _Block_copy(&aBlock);
      v30 = _Block_copy(v29);
      v31 = qword_1ED8A8CB8;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      if (v31 != -1)
        swift_once();
      v32 = qword_1ED8A8CA8;
      swift_unknownObjectRetain();
      v33 = _os_activity_create(&dword_1CC9BF000, "FMIPBeaconRefreshingController.refreshLocations", v32, OS_ACTIVITY_FLAG_DEFAULT);
      swift_unknownObjectRelease();
      v34 = _Block_copy(v30);
      v35 = swift_allocObject();
      *(_QWORD *)(v35 + 16) = v34;
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = sub_1CCAAB8D8;
      *(_QWORD *)(v5 + 24) = v35;
      v68 = sub_1CC9F4530;
      v69 = v5;
      v64 = v28;
      v65 = 1107296256;
      v66 = sub_1CC9F44AC;
      v67 = &unk_1E8900EA8;
      v36 = _Block_copy(&v64);
      swift_retain();
      swift_release();
      os_activity_apply(v33, v36);
      _Block_release(v36);
      LOBYTE(v36) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      _Block_release(v30);
      swift_unknownObjectRelease();
      _Block_release(v29);
      if ((v36 & 1) != 0)
      {
        __break(1u);
LABEL_26:
        swift_once();
LABEL_17:
        v38 = sub_1CCB637FC();
        sub_1CCA16C20(v38, (uint64_t)qword_1ED8AD7F8);
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        v39 = sub_1CCB637D8();
        v40 = sub_1CCB63D48();
        if (os_log_type_enabled(v39, v40))
        {
          v41 = swift_slowAlloc();
          v42 = swift_slowAlloc();
          aBlock = v42;
          *(_DWORD *)v41 = 136315394;
          v43 = sub_1CCB635C8();
          v45 = sub_1CC9C6AE4(0xCuLL, v43, v44);
          v46 = MEMORY[0x1D17B0F34](v45);
          v48 = v47;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v64 = sub_1CCA0CB60(v46, v48, &aBlock);
          sub_1CCB63E44();
          swift_release_n();
          v5 = v63;
          swift_bridgeObjectRelease();
          *(_WORD *)(v41 + 12) = 2048;
          v49 = a2[2];
          swift_bridgeObjectRelease();
          v64 = v49;
          sub_1CCB63E44();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1CC9BF000, v39, v40, "🥑 FMIPBeaconRefreshingController<%s> obtained %ld snapshot locations", (uint8_t *)v41, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1D17B214C](v42, -1, -1);
          MEMORY[0x1D17B214C](v41, -1, -1);

        }
        else
        {

          swift_release_n();
          swift_bridgeObjectRelease_n();
        }
        v50 = swift_allocObject();
        *(_QWORD *)(v50 + 16) = a2;
        *(_QWORD *)(v50 + 24) = v5;
        v51 = swift_allocObject();
        *(_QWORD *)(v51 + 16) = sub_1CCB4D488;
        *(_QWORD *)(v51 + 24) = v50;
        v74 = sub_1CC9F4530;
        v75 = v51;
        v52 = MEMORY[0x1E0C809B0];
        aBlock = MEMORY[0x1E0C809B0];
        v71 = 1107296256;
        v72 = sub_1CC9F44AC;
        v73 = &unk_1E8900D40;
        v53 = _Block_copy(&aBlock);
        v54 = _Block_copy(v53);
        v55 = qword_1ED8A8CB8;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        if (v55 != -1)
          swift_once();
        v56 = qword_1ED8A8CA8;
        swift_unknownObjectRetain();
        v57 = _os_activity_create(&dword_1CC9BF000, "FMIPBeaconRefreshingController.refreshLocations", v56, OS_ACTIVITY_FLAG_DEFAULT);
        swift_unknownObjectRelease();
        v58 = _Block_copy(v54);
        v59 = swift_allocObject();
        *(_QWORD *)(v59 + 16) = v58;
        v60 = swift_allocObject();
        *(_QWORD *)(v60 + 16) = sub_1CCAAB8D8;
        *(_QWORD *)(v60 + 24) = v59;
        v68 = sub_1CC9F4530;
        v69 = v60;
        v64 = v52;
        v65 = 1107296256;
        v66 = sub_1CC9F44AC;
        v67 = &unk_1E8900DB8;
        v61 = _Block_copy(&v64);
        swift_retain();
        swift_release();
        os_activity_apply(v57, v61);
        _Block_release(v61);
        LOBYTE(v61) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        swift_release();
        _Block_release(v54);
        swift_unknownObjectRelease();
        _Block_release(v53);
        if ((v61 & 1) != 0)
        {
          __break(1u);
        }
        else
        {
          swift_release();
          swift_release();
          isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          if ((isEscapingClosureAtFileLocation & 1) == 0)
            return;
        }
        __break(1u);
        return;
      }
      swift_release();
      swift_release();
      v37 = swift_isEscapingClosureAtFileLocation();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      if ((v37 & 1) == 0)
        return;
      __break(1u);
    }
    else if (a1)
    {
      v23 = objc_msgSend(a1, sel_locationsByBeaconIdentifier);
      sub_1CCB63604();
      v24 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
      sub_1CC9C30A8(0, &qword_1EF9E3218);
      sub_1CC9CAA38(&qword_1ED8A7140, v24, MEMORY[0x1E0CB09C8]);
      a2 = (_QWORD *)sub_1CCB638E0();

      goto LABEL_16;
    }
    a2 = (_QWORD *)sub_1CCAC5840(MEMORY[0x1E0DEE9D8]);
LABEL_16:
    if (qword_1ED8AA630 == -1)
      goto LABEL_17;
    goto LABEL_26;
  }
}

uint64_t sub_1CCB4555C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD v19[2];
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1CCB63820();
  v19[0] = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1CCB63868();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v9 = sub_1CCB637FC();
  sub_1CCA16C20(v9, (uint64_t)qword_1ED8AD7F8);
  v10 = sub_1CCB637D8();
  v11 = sub_1CCB63D48();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1CC9BF000, v10, v11, "FMIPBeaconRefreshingController: refreshTimerFired", v12, 2u);
    MEMORY[0x1D17B214C](v12, -1, -1);
  }

  v13 = OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_isThrottled;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_isThrottled) == 1)
  {
    aBlock[4] = sub_1CCB4BFB4;
    aBlock[5] = v0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1CCA00C38;
    aBlock[3] = &unk_1E8900C28;
    v14 = _Block_copy(aBlock);
    swift_retain();
    sub_1CCB63844();
    v19[1] = MEMORY[0x1E0DEE9D8];
    sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    sub_1CCA14E90(&qword_1ED8AA338);
    sub_1CCA02370((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338, MEMORY[0x1E0DEAF38]);
    sub_1CCB63E98();
    MEMORY[0x1D17B1318](0, v8, v4, v14);
    _Block_release(v14);
    (*(void (**)(char *, uint64_t))(v19[0] + 8))(v4, v2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_release();
  }
  else
  {
    v16 = sub_1CCB637D8();
    v17 = sub_1CCB63D48();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1CC9BF000, v16, v17, "FMIPBeaconRefreshingController: throttling", v18, 2u);
      MEMORY[0x1D17B214C](v18, -1, -1);
    }

    *(_BYTE *)(v1 + v13) = 1;
    return sub_1CCB3FC1C();
  }
}

void sub_1CCB4588C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPBeaconRefreshingController: starting to refresh again", v5, 2u);
    MEMORY[0x1D17B214C](v5, -1, -1);
  }

  *(_BYTE *)(a1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_isThrottled) = 0;
  sub_1CCB3FC1C();
  sub_1CCB45980();
}

void sub_1CCB45980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v6;
  id v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  _QWORD v11[4];

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPBeaconRefreshingController: setupRefreshingTimer", v5, 2u);
    MEMORY[0x1D17B214C](v5, -1, -1);
  }

  sub_1CC9C30A8(0, &qword_1EF9E5010);
  v11[3] = type metadata accessor for FMIPBeaconRefreshingController(0);
  v11[0] = v1;
  v9 = 0u;
  v10 = 0u;
  swift_retain();
  v6 = sub_1CCA04C70(v11, (uint64_t)sel_refreshTimerFired, &v9, 0, 15.0);
  v7 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop, v9, v10, v11[0]);
  objc_msgSend(v7, sel_addTimer_forMode_, v6, *MEMORY[0x1E0C99748]);

  v8 = *(void **)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshTimer);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshTimer) = v6;

}

void sub_1CCB45B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  _OWORD v16[2];
  _QWORD v17[4];

  v1 = v0;
  v2 = sub_1CCB635B0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_lastActiveTimestamp;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  LOBYTE(v6) = sub_1CCB3F504();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v7 = dbl_1CCB75680[(char)v6];
  if (qword_1ED8AA630 != -1)
    swift_once();
  v8 = sub_1CCB637FC();
  sub_1CCA16C20(v8, (uint64_t)qword_1ED8AD7F8);
  v9 = sub_1CCB637D8();
  v10 = sub_1CCB63D48();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v11 = 134217984;
    *(double *)v17 = v7;
    sub_1CCB63E44();
    _os_log_impl(&dword_1CC9BF000, v9, v10, "FMIPBeaconRefreshingController: setupThrottlingTimer interval: %f", v11, 0xCu);
    MEMORY[0x1D17B214C](v11, -1, -1);
  }

  v12 = OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshTimer;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshTimer), sel_invalidate);
  sub_1CC9C30A8(0, &qword_1EF9E5010);
  v17[3] = type metadata accessor for FMIPBeaconRefreshingController(0);
  v17[0] = v1;
  memset(v16, 0, sizeof(v16));
  swift_retain();
  v13 = sub_1CCA04C70(v17, (uint64_t)sel_refreshTimerFired, v16, 0, v7);
  v14 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
  objc_msgSend(v14, sel_addTimer_forMode_, v13, *MEMORY[0x1E0C99748]);

  v15 = *(void **)(v1 + v12);
  *(_QWORD *)(v1 + v12) = v13;

}

void sub_1CCB45D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  __int128 v16;
  void *v17;
  id v18;
  unint64_t v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = sub_1CCB631E4();
  *((_QWORD *)&v22 + 1) = v2;
  v23 = sub_1CC9CAA38(&qword_1ED8A8B00, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21260], MEMORY[0x1E0D21238]);
  v3 = sub_1CCA01CC0((uint64_t *)&v21);
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, *MEMORY[0x1E0D21250], v2);
  LOBYTE(v2) = MEMORY[0x1D17B0748](&v21);
  sub_1CCA01CA0((uint64_t)&v21);
  if ((v2 & 1) != 0
    && *(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_shouldUseBeaconsOptimizationSPI) == 1)
  {
    *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_appBeacons) = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
    if (qword_1ED8AA630 != -1)
      swift_once();
    v4 = sub_1CCB637FC();
    sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
    v5 = sub_1CCB637D8();
    v6 = sub_1CCB63D24();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPBeaconRefreshingController: startUpdatingApplicationBeacons - Will call", v7, 2u);
      MEMORY[0x1D17B214C](v7, -1, -1);
    }

    v8 = *(void **)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession);
    v9 = (void *)objc_opt_self();
    v10 = v8;
    v11 = objc_msgSend(v9, sel_fmipItemContext);
    v12 = swift_allocObject();
    swift_weakInit();
    v23 = (uint64_t)sub_1CCB4BFA4;
    v24 = v12;
    v13 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v21 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v21 + 1) = 1107296256;
    *(_QWORD *)&v22 = sub_1CC9C6358;
    *((_QWORD *)&v22 + 1) = &unk_1E8900BD8;
    v14 = _Block_copy(&v21);
    swift_release();
    v23 = (uint64_t)sub_1CCB4BFAC;
    v24 = v1;
    *(_QWORD *)&v21 = v13;
    *((_QWORD *)&v21 + 1) = 1107296256;
    *(_QWORD *)&v22 = sub_1CC9C37C0;
    *((_QWORD *)&v22 + 1) = &unk_1E8900C00;
    v15 = _Block_copy(&v21);
    swift_retain();
    swift_release();
    objc_msgSend(v10, sel_startUpdatingApplicationBeaconsWithContext_collectionDifference_completion_, v11, v14, v15);
    _Block_release(v15);
    _Block_release(v14);
  }
  else
  {
    v16 = *(_OWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy + 16);
    v21 = *(_OWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy);
    v22 = v16;
    LOBYTE(v23) = *(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy + 32);
    v25 = *((_QWORD *)&v16 + 1);
    v26 = v16;
    sub_1CC9F1844((uint64_t)&v26);
    sub_1CC9F1844((uint64_t)&v25);
    v17 = sub_1CC9F1CCC();
    sub_1CC9F1CA4((uint64_t)&v26);
    sub_1CC9F1CA4((uint64_t)&v25);
    v18 = v17;
    v19 = swift_bridgeObjectRetain();
    sub_1CCB4B5C8(v19, v18);
    swift_bridgeObjectRelease();

    v20 = *(void **)(v1 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_ownerSession);
    sub_1CC9C30A8(0, &qword_1ED8A70F0);
    v10 = v20;
    v11 = (id)sub_1CCB63B20();
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_startRefreshingBeacons_, v11);

  }
}

void sub_1CCB46114(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  int v36;
  void *v37;
  id v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55[5];

  v55[4] = *MEMORY[0x1E0C80C00];
  v4 = sub_1CCA14E90(&qword_1EF9E6600);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1EF9E65F8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v46 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v46 - v15;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v18 = Strong;
    v52 = v7;
    v53 = a2;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v19 = sub_1CCB637FC();
    v20 = sub_1CCA16C20(v19, (uint64_t)qword_1ED8AD7F8);
    v51 = a1;
    sub_1CC9EAB74(a1, (uint64_t)v16, &qword_1EF9E65F8);
    v50 = v20;
    v21 = sub_1CCB637D8();
    v22 = sub_1CCB63D24();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      v48 = v4;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc();
      v47 = v5;
      v26 = v25;
      v55[0] = v25;
      v49 = v18;
      *(_DWORD *)v24 = 136315138;
      sub_1CC9EAB74((uint64_t)v16, (uint64_t)v14, &qword_1EF9E65F8);
      v27 = sub_1CCB639AC();
      v54 = sub_1CCA0CB60(v27, v28, v55);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();
      sub_1CC9C3E84((uint64_t)v16, &qword_1EF9E65F8);
      _os_log_impl(&dword_1CC9BF000, v21, v22, "FMIPBeaconRefreshingController: startUpdatingApplicationBeacons - Did receive callback %s", v24, 0xCu);
      swift_arrayDestroy();
      v29 = v26;
      v5 = v47;
      MEMORY[0x1D17B214C](v29, -1, -1);
      v30 = v24;
      v4 = v48;
      MEMORY[0x1D17B214C](v30, -1, -1);
    }
    else
    {
      sub_1CC9C3E84((uint64_t)v16, &qword_1EF9E65F8);
    }

    v35 = (uint64_t)v52;
    sub_1CC9EAB74(v51, (uint64_t)v11, &qword_1EF9E65F8);
    v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4);
    v37 = v53;
    if (v36 == 1)
    {
      sub_1CC9C3E84((uint64_t)v11, &qword_1EF9E65F8);
      v38 = v37;
      v39 = v37;
      v40 = sub_1CCB637D8();
      v41 = sub_1CCB63D48();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc();
        v43 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v42 = 138412290;
        if (v37)
        {
          v44 = v37;
          v45 = _swift_stdlib_bridgeErrorToNSError();
          v55[0] = v45;
          sub_1CCB63E44();
        }
        else
        {
          v55[0] = 0;
          sub_1CCB63E44();
          v45 = 0;
        }
        *v43 = v45;

        _os_log_impl(&dword_1CC9BF000, v40, v41, "FMIPBeaconRefreshingController: startUpdatingApplicationBeacons - No collectionDifference - Error: %@", v42, 0xCu);
        sub_1CCA14E90(&qword_1ED8A8E00);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v43, -1, -1);
        MEMORY[0x1D17B214C](v42, -1, -1);

      }
      else
      {

      }
      swift_release();
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v35, v11, v4);
      sub_1CC9E7420(v35);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v35, v4);
    }
  }
  else
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v31 = sub_1CCB637FC();
    sub_1CCA16C20(v31, (uint64_t)qword_1ED8AD7F8);
    v32 = sub_1CCB637D8();
    v33 = sub_1CCB63D48();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1CC9BF000, v32, v33, "FMIPBeaconRefreshingController: startUpdatingApplicationBeacons - No self on startUpdatingApplicationBeacons callback", v34, 2u);
      MEMORY[0x1D17B214C](v34, -1, -1);
    }

  }
}

void sub_1CCB46690(int a1, id a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  NSObject *oslog;
  uint64_t v25[4];
  char v26;
  uint64_t v27;

  if (a2)
  {
    v4 = a2;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v5 = sub_1CCB637FC();
    sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
    v6 = a2;
    v7 = a2;
    oslog = sub_1CCB637D8();
    v8 = sub_1CCB63D48();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v25[0] = v10;
      *(_DWORD *)v9 = 136315138;
      swift_getErrorValue();
      v11 = sub_1CCB64300();
      v27 = sub_1CCA0CB60(v11, v12, v25);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, oslog, v8, "FMIPBeaconRefreshingController: startUpdatingApplicationBeacons - Start failed due to error: %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v10, -1, -1);
      MEMORY[0x1D17B214C](v9, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v14 = sub_1CCB637FC();
    sub_1CCA16C20(v14, (uint64_t)qword_1ED8AD7F8);
    swift_retain_n();
    v15 = sub_1CCB637D8();
    v16 = sub_1CCB63D48();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v27 = v18;
      *(_DWORD *)v17 = 136315138;
      v19 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy + 16);
      v20 = *(_QWORD *)(a3 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy + 24);
      v21 = *(_BYTE *)(a3 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy + 32);
      v25[1] = *(_QWORD *)(a3 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy + 8);
      v25[2] = v19;
      v25[3] = v20;
      v26 = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22 = sub_1CCB639AC();
      v25[0] = sub_1CCA0CB60(v22, v23, &v27);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v15, v16, "FMIPBeaconRefreshingController: startUpdatingApplicationBeacons - Successfully started updating application beacons: %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v18, -1, -1);
      MEMORY[0x1D17B214C](v17, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
}

void sub_1CCB46A38(void *a1)
{
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char isEscapingClosureAtFileLocation;
  char v30;
  uint64_t v31;
  _QWORD v32[6];
  uint64_t aBlock[6];

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v3 = Strong;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v4 = sub_1CCB637FC();
    sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
    swift_retain_n();
    v5 = sub_1CCB637D8();
    v6 = sub_1CCB63D48();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      *(_DWORD *)v7 = 136315138;
      aBlock[0] = v31;
      v8 = sub_1CCB635C8();
      v10 = sub_1CC9C6AE4(0xCuLL, v8, v9);
      v11 = MEMORY[0x1D17B0F34](v10);
      v13 = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v32[0] = sub_1CCA0CB60(v11, v13, aBlock);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v5, v6, "FMIPBeaconRefreshingController<%s> latestLocationsUpdatedBlock fired", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v31, -1, -1);
      MEMORY[0x1D17B214C](v7, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy) & 1) != 0)
    {
      swift_release();
      return;
    }
    v14 = objc_msgSend(a1, sel_locationsByBeaconIdentifier);
    sub_1CCB63604();
    v15 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
    sub_1CC9C30A8(0, &qword_1EF9E3218);
    sub_1CC9CAA38(&qword_1ED8A7140, v15, MEMORY[0x1E0CB09C8]);
    v16 = sub_1CCB638E0();

    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(v17 + 24) = v3;
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = sub_1CCA20CF8;
    *(_QWORD *)(v18 + 24) = v17;
    aBlock[4] = (uint64_t)sub_1CC9F4530;
    aBlock[5] = v18;
    v19 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1CC9F44AC;
    aBlock[3] = (uint64_t)&unk_1E8900AE8;
    v20 = _Block_copy(aBlock);
    v21 = _Block_copy(v20);
    v22 = qword_1ED8A8CB8;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v22 != -1)
      swift_once();
    v23 = qword_1ED8A8CA8;
    swift_unknownObjectRetain();
    v24 = _os_activity_create(&dword_1CC9BF000, "FMIPBeaconRefreshingController.refreshLocations", v23, OS_ACTIVITY_FLAG_DEFAULT);
    swift_unknownObjectRelease();
    v25 = _Block_copy(v21);
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v25;
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = sub_1CCAAB8D8;
    *(_QWORD *)(v27 + 24) = v26;
    v32[4] = sub_1CC9F4530;
    v32[5] = v27;
    v32[0] = v19;
    v32[1] = 1107296256;
    v32[2] = sub_1CC9F44AC;
    v32[3] = &unk_1E8900B60;
    v28 = _Block_copy(v32);
    swift_retain();
    swift_release();
    os_activity_apply(v24, v28);
    _Block_release(v28);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    _Block_release(v21);
    swift_unknownObjectRelease();
    _Block_release(v20);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      swift_release();
      swift_release();
      v30 = swift_isEscapingClosureAtFileLocation();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if ((v30 & 1) == 0)
        return;
    }
    __break(1u);
  }
}

uint64_t sub_1CCB46F48(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  int v47;
  _BOOL4 v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  id v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  int64_t v72;
  unint64_t v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  char *v80;
  id v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  unint64_t v90;
  id v91;
  void *v92;
  uint64_t v93;
  id v94;
  id v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  id v100;
  id v101;
  void *v102;
  id v103;
  char *v104;
  void (*v105)(char *, char *, uint64_t);
  void (*v106)(char *, uint64_t);
  id v107;
  char *v108;
  void (*v109)(char *, _QWORD, uint64_t, uint64_t);
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  void (*v114)(char *, char *, uint64_t);
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v120;
  char *v121;
  id v122;
  void *v123;
  id v124;
  char *v125;
  char *v126;
  char *v127;
  void (*v128)(char *, char *, uint64_t);
  void (*v129)(char *, _QWORD, uint64_t, uint64_t);
  char *v130;
  uint64_t v131;
  void (*v132)(char *, char *, uint64_t);
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  unint64_t v143;
  uint64_t v144;
  _BOOL8 v145;
  uint64_t v146;
  char v147;
  unint64_t v148;
  char v149;
  _QWORD *v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v153;
  id v154;
  void *v155;
  id v156;
  char *v157;
  char *v158;
  char *v159;
  void (*v160)(char *, uint64_t, uint64_t);
  void (*v161)(char *, _QWORD, uint64_t, uint64_t);
  void (*v162)(char *, char *, uint64_t);
  char *v163;
  uint64_t v164;
  void (*v165)(char *, char *, uint64_t);
  char *v166;
  id v167;
  void *v168;
  id v169;
  char *v170;
  void (*v171)(char *, uint64_t);
  id v172;
  char *v173;
  char *v174;
  void (*v175)(char *, uint64_t, uint64_t);
  void (*v176)(char *, _QWORD, uint64_t, uint64_t);
  char *v177;
  void (*v178)(char *, char *, uint64_t);
  void (*v179)(char *, char *, uint64_t);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  char *v185;
  void (*v186)(char *, uint64_t);
  uint64_t *v187;
  uint64_t v188;
  int64_t v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  int64_t v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  char *v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int64_t v219;
  char *v220;
  void (*v221)(char *, uint64_t, uint64_t);
  uint64_t v222;
  void (*v223)(char *, char *, uint64_t);
  id v224;
  char *v225;
  id v226;
  _QWORD *v227;
  char v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;

  v224 = a1;
  v205 = type metadata accessor for FMIPDeviceConnectedState(0);
  v196 = *(_QWORD *)(v205 - 8);
  v1 = MEMORY[0x1E0C80A78](v205);
  v3 = (char *)&v188 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0C80A78](v1);
  v197 = (char *)&v188 - v5;
  v6 = MEMORY[0x1E0C80A78](v4);
  v199 = (uint64_t)&v188 - v7;
  MEMORY[0x1E0C80A78](v6);
  v198 = (char *)&v188 - v8;
  v213 = sub_1CCA14E90(&qword_1ED8A8EF8);
  v9 = MEMORY[0x1E0C80A78](v213);
  v203 = (char *)&v188 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v202 = (char *)&v188 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v204 = (char *)&v188 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v188 - v16;
  MEMORY[0x1E0C80A78](v15);
  v212 = (char *)&v188 - v18;
  v19 = sub_1CCB63604();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v211 = (char *)&v188 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v193 = (char *)&v188 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v192 = (char *)&v188 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v191 = (char *)&v188 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v214 = (char *)&v188 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v190 = (char *)&v188 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v188 - v34;
  MEMORY[0x1E0C80A78](v33);
  v225 = (char *)&v188 - v36;
  v37 = sub_1CCA14E90(&qword_1EF9E65D0);
  v38 = MEMORY[0x1E0C80A78](v37);
  v40 = (uint64_t)&v188 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38);
  v218 = (uint64_t)&v188 - v41;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  v194 = result;
  if (result)
  {
    v220 = v35;
    v201 = v17;
    v195 = v3;
    if (qword_1ED8AA630 != -1)
      goto LABEL_83;
    while (1)
    {
      v43 = sub_1CCB637FC();
      v44 = sub_1CCA16C20(v43, (uint64_t)qword_1ED8AD7F8);
      swift_retain_n();
      v217 = v44;
      v45 = sub_1CCB637D8();
      v46 = sub_1CCB63D48();
      v47 = v46;
      v48 = os_log_type_enabled(v45, v46);
      v49 = MEMORY[0x1E0DEE9B8];
      v222 = v40;
      if (v48)
      {
        LODWORD(v223) = v47;
        v50 = (uint8_t *)swift_slowAlloc();
        v51 = swift_slowAlloc();
        *(_DWORD *)v50 = 136315138;
        v227 = (_QWORD *)v51;
        v221 = (void (*)(char *, uint64_t, uint64_t))(v50 + 4);
        v52 = sub_1CCB635C8();
        v54 = sub_1CC9C6AE4(0xCuLL, v52, v53);
        v55 = MEMORY[0x1D17B0F34](v54);
        v57 = v56;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v226 = (id)sub_1CCA0CB60(v55, v57, (uint64_t *)&v227);
        v49 = MEMORY[0x1E0DEE9B8];
        sub_1CCB63E44();
        swift_release_n();
        v40 = v222;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v45, (os_log_type_t)v223, "FMIPBeaconRefreshingController: deviceEventUpdateBlock fired <%s>", v50, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v51, -1, -1);
        MEMORY[0x1D17B214C](v50, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v58 = objc_msgSend(v224, sel_beaconEventByBeaconIdentifier);
      sub_1CC9C30A8(0, &qword_1EF9E65D8);
      sub_1CC9CAA38(&qword_1ED8A7140, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      v59 = sub_1CCB638E0();

      v219 = 0;
      v61 = *(_QWORD *)(v59 + 64);
      v200 = v59 + 64;
      v216 = v59;
      v62 = 1 << *(_BYTE *)(v59 + 32);
      v63 = -1;
      if (v62 < 64)
        v63 = ~(-1 << v62);
      v64 = v63 & v61;
      v206 = (unint64_t)(v62 + 63) >> 6;
      v189 = v206 - 1;
      v215 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      *(_QWORD *)&v60 = 136315650;
      v208 = v60;
      v207 = v49 + 8;
      v65 = v220;
      v210 = v20;
      v209 = v19;
      if (v64)
      {
LABEL_9:
        v224 = (id)((v64 - 1) & v64);
        v66 = __clz(__rbit64(v64)) | (v219 << 6);
LABEL_10:
        v67 = v216;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 16))(v40, *(_QWORD *)(v216 + 48) + *(_QWORD *)(v20 + 72) * v66, v19);
        v68 = *(_QWORD *)(v67 + 56);
        v69 = sub_1CCA14E90(&qword_1EF9E65E0);
        v70 = *(void **)(v68 + 8 * v66);
        *(_QWORD *)(v40 + *(int *)(v69 + 48)) = v70;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v40, 0, 1, v69);
        v71 = v70;
        goto LABEL_29;
      }
LABEL_11:
      v72 = v219 + 1;
      if (!__OFADD__(v219, 1))
        break;
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      swift_once();
    }
    if (v72 >= v206)
      goto LABEL_28;
    v73 = *(_QWORD *)(v200 + 8 * v72);
    if (v73)
    {
LABEL_14:
      v224 = (id)((v73 - 1) & v73);
      v66 = __clz(__rbit64(v73)) + (v72 << 6);
      v219 = v72;
      goto LABEL_10;
    }
    v74 = v219 + 2;
    ++v219;
    if (v72 + 1 >= v206)
      goto LABEL_28;
    v73 = *(_QWORD *)(v200 + 8 * v74);
    if (v73)
      goto LABEL_17;
    v219 = v72 + 1;
    if (v72 + 2 >= v206)
      goto LABEL_28;
    v73 = *(_QWORD *)(v200 + 8 * (v72 + 2));
    if (v73)
    {
      v72 += 2;
      goto LABEL_14;
    }
    v74 = v72 + 3;
    v219 = v72 + 2;
    if (v72 + 3 >= v206)
      goto LABEL_28;
    v73 = *(_QWORD *)(v200 + 8 * v74);
    if (v73)
    {
LABEL_17:
      v72 = v74;
      goto LABEL_14;
    }
    while (1)
    {
      v72 = v74 + 1;
      if (__OFADD__(v74, 1))
      {
        __break(1u);
LABEL_85:
        sub_1CCB642DC();
        __break(1u);
        JUMPOUT(0x1CCB483CCLL);
      }
      if (v72 >= v206)
        break;
      v73 = *(_QWORD *)(v200 + 8 * v72);
      ++v74;
      if (v73)
        goto LABEL_14;
    }
    v219 = v189;
LABEL_28:
    v75 = sub_1CCA14E90(&qword_1EF9E65E0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v40, 1, 1, v75);
    v224 = 0;
LABEL_29:
    v76 = v40;
    v77 = v218;
    sub_1CC9C3EC0(v76, v218, &qword_1EF9E65D0);
    v78 = sub_1CCA14E90(&qword_1EF9E65E0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 48))(v77, 1, v78) != 1)
    {
      v79 = *(void **)(v77 + *(int *)(v78 + 48));
      v80 = v225;
      v221 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 32);
      v221(v225, v77, v19);
      v223 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
      v223(v65, v80, v19);
      v81 = v79;
      v82 = sub_1CCB637D8();
      v83 = sub_1CCB63D48();
      if (os_log_type_enabled(v82, v83))
      {
        v84 = swift_slowAlloc();
        v85 = swift_slowAlloc();
        v227 = (_QWORD *)v85;
        *(_DWORD *)v84 = v208;
        sub_1CC9CAA38((unint64_t *)&qword_1EF9DF3D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v86 = sub_1CCB64240();
        *(_QWORD *)(v84 + 4) = sub_1CCA0CB60(v86, v87, (uint64_t *)&v227);
        swift_bridgeObjectRelease();
        v88 = *(void (**)(char *, uint64_t))(v20 + 8);
        v88(v65, v19);
        *(_WORD *)(v84 + 12) = 2080;
        v226 = objc_msgSend(v81, sel_source);
        type metadata accessor for SPDeviceEventSource(0);
        v89 = sub_1CCB639AC();
        *(_QWORD *)(v84 + 14) = sub_1CCA0CB60(v89, v90, (uint64_t *)&v227);

        swift_bridgeObjectRelease();
        *(_WORD *)(v84 + 22) = 2080;
        v91 = objc_msgSend(v81, sel_attachmentInfo);
        if (v91)
        {
          v92 = v91;
          v93 = v85;
          v94 = v81;
          v95 = objc_msgSend(v91, sel_attachedToDevice);

          v96 = v212;
          sub_1CCB635EC();

          v81 = v94;
          v85 = v93;
          v97 = 0;
        }
        else
        {
          v97 = 1;
          v96 = v212;
        }
        v20 = v210;
        v19 = v209;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v210 + 56))(v96, v97, 1, v209);
        v98 = sub_1CCB639AC();
        *(_QWORD *)(v84 + 24) = sub_1CCA0CB60(v98, v99, (uint64_t *)&v227);

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1CC9BF000, v82, v83, "FMIPBeaconRefreshingController: deviceEventUpdate: beaconUUID: %s, deviceEvent: %s: %s)", (uint8_t *)v84, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v85, -1, -1);
        MEMORY[0x1D17B214C](v84, -1, -1);

        v65 = v220;
      }
      else
      {
        v88 = *(void (**)(char *, uint64_t))(v20 + 8);
        v88(v65, v19);

      }
      v100 = objc_msgSend(v81, sel_source);
      v40 = v222;
      switch((unint64_t)v100)
      {
        case 1uLL:
          v101 = objc_msgSend(v81, sel_attachmentInfo);
          if (v101)
          {
            v102 = v101;
            v103 = objc_msgSend(v101, sel_attachedToDevice);

            v104 = v214;
            sub_1CCB635EC();

            v65 = v220;
            v105 = (void (*)(char *, char *, uint64_t))v221;
            v106 = v88;
            v107 = v81;
            v108 = v202;
            v221(v202, (uint64_t)v104, v19);
            v109 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
            v109(v108, 0, 1, v19);
            v110 = v108;
            v81 = v107;
            v88 = v106;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v110, 1, v19) != 1)
            {
              v111 = v192;
              v105(v192, v202, v19);
              v112 = (uint64_t)v214;
              v113 = v225;
              v114 = v223;
              v223(v214, v225, v19);
              v115 = v198;
              v114(v198, v111, v19);
              v109(v115, 0, 1, v19);
              v115[*(int *)(v205 + 20)] = 1;
              v116 = (uint64_t)v115;
              v117 = v199;
              sub_1CC9FED60(v116, v199, type metadata accessor for FMIPDeviceConnectedState);
              v118 = (uint64_t)v215;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v227 = (_QWORD *)v118;
              sub_1CCAEBAC4(v117, v112, isUniquelyReferenced_nonNull_native);
              v215 = v227;
              swift_bridgeObjectRelease();
              v120 = v112;
              v65 = v220;
              v88((char *)v120, v19);

              v121 = v111;
              goto LABEL_57;
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v202, 1, 1, v19);
          }

          v88(v225, v19);
          v187 = &v229;
          goto LABEL_72;
        case 2uLL:
          v138 = (uint64_t)v211;
          v223(v211, v225, v19);
          v139 = (uint64_t)v197;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v197, 1, 1, v19);
          *(_BYTE *)(v139 + *(int *)(v205 + 20)) = 0;
          v140 = (uint64_t)v195;
          sub_1CC9FED60(v139, (uint64_t)v195, type metadata accessor for FMIPDeviceConnectedState);
          v141 = (uint64_t)v215;
          v40 = swift_isUniquelyReferenced_nonNull_native();
          v227 = (_QWORD *)v141;
          v143 = sub_1CCAC8D64(v138);
          v144 = *(_QWORD *)(v141 + 16);
          v145 = (v142 & 1) == 0;
          v146 = v144 + v145;
          if (__OFADD__(v144, v145))
            goto LABEL_81;
          v147 = v142;
          v221 = (void (*)(char *, uint64_t, uint64_t))v88;
          if (*(_QWORD *)(v141 + 24) >= v146)
          {
            if ((v40 & 1) == 0)
              sub_1CCAECFFC();
            v40 = v222;
            v150 = v227;
            if ((v147 & 1) != 0)
              goto LABEL_61;
          }
          else
          {
            sub_1CCAE9410(v146, v40);
            v148 = sub_1CCAC8D64((uint64_t)v211);
            if ((v147 & 1) != (v149 & 1))
              goto LABEL_85;
            v143 = v148;
            v40 = v222;
            v150 = v227;
            if ((v147 & 1) != 0)
            {
LABEL_61:
              v215 = v150;
              sub_1CCB4BF18(v140, v150[7] + *(_QWORD *)(v196 + 72) * v143);
              goto LABEL_62;
            }
          }
          v150[(v143 >> 6) + 8] |= 1 << v143;
          v223((char *)(v150[6] + *(_QWORD *)(v20 + 72) * v143), v211, v19);
          sub_1CC9FED60(v140, v150[7] + *(_QWORD *)(v196 + 72) * v143, type metadata accessor for FMIPDeviceConnectedState);
          v151 = v150[2];
          v152 = __OFADD__(v151, 1);
          v153 = v151 + 1;
          if (v152)
            goto LABEL_82;
          v150[2] = v153;
          v215 = v227;
LABEL_62:
          swift_bridgeObjectRelease();
          v186 = (void (*)(char *, uint64_t))v221;
          ((void (*)(char *, uint64_t))v221)(v211, v19);

          v186(v225, v19);
          v65 = v220;
          v64 = (unint64_t)v224;
          if (!v224)
            goto LABEL_11;
          goto LABEL_9;
        case 3uLL:
          v122 = objc_msgSend(v81, sel_attachmentInfo);
          if (v122)
          {
            v123 = v122;
            v124 = objc_msgSend(v122, sel_attachedToDevice);

            v125 = v214;
            sub_1CCB635EC();

            v126 = v201;
            v127 = v125;
            v65 = v220;
            v128 = (void (*)(char *, char *, uint64_t))v221;
            v221(v201, (uint64_t)v127, v19);
            v129 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
            v129(v126, 0, 1, v19);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v126, 1, v19) != 1)
            {
              v130 = v190;
              v128(v190, v201, v19);
              v131 = (uint64_t)v214;
              v113 = v225;
              v132 = v223;
              v223(v214, v225, v19);
              v133 = v198;
              v132(v198, v130, v19);
              v129(v133, 0, 1, v19);
              v133[*(int *)(v205 + 20)] = 2;
              v134 = (uint64_t)v133;
              v135 = v199;
              sub_1CC9FED60(v134, v199, type metadata accessor for FMIPDeviceConnectedState);
              v136 = (uint64_t)v215;
              v137 = swift_isUniquelyReferenced_nonNull_native();
              v227 = (_QWORD *)v136;
              sub_1CCAEBAC4(v135, v131, v137);
              v215 = v227;
              swift_bridgeObjectRelease();
              v88((char *)v131, v19);

              v121 = v130;
              v65 = v220;
              goto LABEL_57;
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v201, 1, 1, v19);
          }

          v88(v225, v19);
          v187 = (uint64_t *)&v228;
          goto LABEL_72;
        case 4uLL:
          v154 = objc_msgSend(v81, sel_attachmentInfo);
          if (v154)
          {
            v155 = v154;
            v156 = objc_msgSend(v154, sel_attachedToDevice);

            v157 = v214;
            sub_1CCB635EC();

            v158 = v204;
            v159 = v157;
            v65 = v220;
            v160 = v221;
            v221(v204, (uint64_t)v159, v19);
            v161 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
            v161(v158, 0, 1, v19);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v158, 1, v19) != 1)
            {
              v162 = (void (*)(char *, char *, uint64_t))v160;
              v163 = v191;
              v162(v191, v204, v19);
              v164 = (uint64_t)v214;
              v113 = v225;
              v165 = v223;
              v223(v214, v225, v19);
              v166 = v198;
              v165(v198, v163, v19);
              v161(v166, 0, 1, v19);
              v166[*(int *)(v205 + 20)] = 3;
              goto LABEL_56;
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v204, 1, 1, v19);
          }

          v88(v225, v19);
          v187 = &v231;
          goto LABEL_72;
        case 6uLL:
          v167 = objc_msgSend(v81, sel_attachmentInfo);
          if (v167)
          {
            v168 = v167;
            v169 = objc_msgSend(v167, sel_attachedToDevice);

            v170 = v214;
            sub_1CCB635EC();

            v171 = v88;
            v172 = v81;
            v173 = v203;
            v174 = v170;
            v65 = v220;
            v175 = v221;
            v221(v203, (uint64_t)v174, v19);
            v176 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
            v176(v173, 0, 1, v19);
            v177 = v173;
            v81 = v172;
            v88 = v171;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v177, 1, v19) != 1)
            {
              v178 = (void (*)(char *, char *, uint64_t))v175;
              v163 = v193;
              v178(v193, v203, v19);
              v164 = (uint64_t)v214;
              v113 = v225;
              v179 = v223;
              v223(v214, v225, v19);
              v166 = v198;
              v179(v198, v163, v19);
              v176(v166, 0, 1, v19);
              v166[*(int *)(v205 + 20)] = 4;
LABEL_56:
              v180 = (uint64_t)v166;
              v181 = v199;
              sub_1CC9FED60(v180, v199, type metadata accessor for FMIPDeviceConnectedState);
              v182 = (uint64_t)v215;
              v183 = swift_isUniquelyReferenced_nonNull_native();
              v227 = (_QWORD *)v182;
              sub_1CCAEBAC4(v181, v164, v183);
              v215 = v227;
              swift_bridgeObjectRelease();
              v184 = v164;
              v65 = v220;
              v88((char *)v184, v19);

              v121 = v163;
LABEL_57:
              v88(v121, v19);
              v185 = v113;
              v40 = v222;
              v88(v185, v19);
              goto LABEL_73;
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v203, 1, 1, v19);
          }

          v88(v225, v19);
          v187 = &v230;
LABEL_72:
          sub_1CC9C3E84(*(v187 - 32), &qword_1ED8A8EF8);
LABEL_73:
          v64 = (unint64_t)v224;
          if (!v224)
            goto LABEL_11;
          goto LABEL_9;
        default:
          v88(v225, v19);

          goto LABEL_73;
      }
    }
    swift_release();
    if ((*(_BYTE *)(v194 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy) & 1) != 0
      || !MEMORY[0x1D17B2218](v194 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_delegate))
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      sub_1CCAA9A74((uint64_t)v215);
      swift_bridgeObjectRelease();
      swift_release();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

void sub_1CCB483E4(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  NSObject *oslog;
  uint64_t v24[4];
  char v25;
  uint64_t v26;

  if (a1)
  {
    v3 = a1;
    if (qword_1ED8AA630 != -1)
      swift_once();
    v4 = sub_1CCB637FC();
    sub_1CCA16C20(v4, (uint64_t)qword_1ED8AD7F8);
    v5 = a1;
    v6 = a1;
    oslog = sub_1CCB637D8();
    v7 = sub_1CCB63D48();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v24[0] = v9;
      *(_DWORD *)v8 = 136315138;
      swift_getErrorValue();
      v10 = sub_1CCB64300();
      v26 = sub_1CCA0CB60(v10, v11, v24);
      sub_1CCB63E44();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1CC9BF000, oslog, v7, "FMIPBeaconRefreshingController: Subscribe failed due to error: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v9, -1, -1);
      MEMORY[0x1D17B214C](v8, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v13 = sub_1CCB637FC();
    sub_1CCA16C20(v13, (uint64_t)qword_1ED8AD7F8);
    swift_retain_n();
    v14 = sub_1CCB637D8();
    v15 = sub_1CCB63D48();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v26 = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy + 16);
      v19 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy + 24);
      v20 = *(_BYTE *)(a2 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy + 32);
      v24[1] = *(_QWORD *)(a2 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy + 8);
      v24[2] = v18;
      v24[3] = v19;
      v25 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21 = sub_1CCB639AC();
      v24[0] = sub_1CCA0CB60(v21, v22, &v26);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v14, v15, "FMIPBeaconRefreshingController: Successfully updated refresh policy to: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v17, -1, -1);
      MEMORY[0x1D17B214C](v16, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
}

void sub_1CCB48788(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  sub_1CCB487A0(a1, a2, a3, a4, a5, MEMORY[0x1E0D89A98]);
}

void sub_1CCB48794(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  sub_1CCB487A0(a1, a2, a3, a4, a5, MEMORY[0x1E0D89AC0]);
}

void sub_1CCB487A0(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, _QWORD *a6)
{
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v10 = (void *)objc_opt_self();
  v11 = a1;
  v12 = a3;
  v13 = a5;
  v14 = objc_msgSend(v10, sel_defaultCenter);
  objc_msgSend(v14, sel_postNotificationName_object_, *a6, 0);

}

void sub_1CCB48930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char isEscapingClosureAtFileLocation;
  _QWORD v19[6];
  _QWORD aBlock[6];

  v1 = v0;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v2 = sub_1CCB637FC();
  sub_1CCA16C20(v2, (uint64_t)qword_1ED8AD7F8);
  v3 = sub_1CCB637D8();
  v4 = sub_1CCB63D48();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1CC9BF000, v3, v4, "FMIPBeaconRefreshingController: Unknown beacon changed notification received", v5, 2u);
    MEMORY[0x1D17B214C](v5, -1, -1);
  }

  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v1;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_1CCA20CE4;
  *(_QWORD *)(v7 + 24) = v6;
  aBlock[4] = sub_1CC9F44EC;
  aBlock[5] = v7;
  v8 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CC9F44AC;
  aBlock[3] = &unk_1E8900958;
  v9 = _Block_copy(aBlock);
  v10 = _Block_copy(v9);
  v11 = qword_1ED8A8CB8;
  swift_retain();
  swift_retain();
  if (v11 != -1)
    swift_once();
  v12 = qword_1ED8A8CA8;
  swift_unknownObjectRetain();
  v13 = _os_activity_create(&dword_1CC9BF000, "FMIPBeaconRefreshingController.refreshUnknownBeacons", v12, OS_ACTIVITY_FLAG_DEFAULT);
  swift_unknownObjectRelease();
  v14 = _Block_copy(v10);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v14;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = sub_1CC9F4520;
  *(_QWORD *)(v16 + 24) = v15;
  v19[4] = sub_1CC9F4530;
  v19[5] = v16;
  v19[0] = v8;
  v19[1] = 1107296256;
  v19[2] = sub_1CC9F44AC;
  v19[3] = &unk_1E89009D0;
  v17 = _Block_copy(v19);
  swift_retain();
  swift_release();
  os_activity_apply(v13, v17);
  _Block_release(v17);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  _Block_release(v10);
  swift_unknownObjectRelease();
  _Block_release(v9);
  if ((v17 & 1) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  swift_release();
  swift_release();
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_11:
    __break(1u);
}

uint64_t sub_1CCB48C70(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  v4 = swift_retain();
  a3(v4);
  return swift_release();
}

uint64_t sub_1CCB48C9C(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v11 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    sub_1CCB48DF8((_QWORD *)((char *)v11 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    v7 = v6;
    swift_release();
    if (v1)
      swift_willThrow();
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v5);
    sub_1CCB48DF8((unint64_t *)v8, v4, v2);
    v7 = v9;
    swift_release();
    MEMORY[0x1D17B214C](v8, -1, -1);
  }
  return v7;
}

void sub_1CCB48DF8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v20;

  v20 = 0;
  v4 = 0;
  v5 = a3 + 56;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v9)
      goto LABEL_24;
    v15 = *(_QWORD *)(v5 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v9)
        goto LABEL_24;
      v15 = *(_QWORD *)(v5 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v9)
          goto LABEL_24;
        v15 = *(_QWORD *)(v5 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_5:
    v12 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v11);
    v13 = objc_msgSend(v12, sel_role);

    if (v13)
    {

      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v20++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        sub_1CCB31910(a1, a2, v20, a3);
        return;
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v9)
    goto LABEL_24;
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v9)
      goto LABEL_24;
    v15 = *(_QWORD *)(v5 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
}

int64_t sub_1CCB48FBC(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_1CCB490A0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_1CCB490B4(a1, a2, a3, a4, &qword_1EF9E26D8);
}

void sub_1CCB490B4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  id v16;
  unint64_t *v17;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (sub_1CCB63EE0() == *(_DWORD *)(a4 + 36))
      {
        sub_1CCB63EEC();
        sub_1CC9C30A8(0, a5);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        a5 = v17;
        swift_unknownObjectRelease();
        v9 = sub_1CCB63DE4();
        v10 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v9 & ~v10;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v11 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v12 = sub_1CCB63DF0();

          if ((v12 & 1) == 0)
          {
            v13 = ~v10;
            do
            {
              v7 = (v7 + 1) & v13;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v14 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v15 = sub_1CCB63DF0();

            }
            while ((v15 & 1) == 0);
          }

LABEL_20:
          v16 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x1D17B1480](a1, a2, v8);
  sub_1CC9C30A8(0, a5);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

uint64_t sub_1CCB49318(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

BOOL _s8FMIPCore24FMIPDeviceConnectedStateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  char *v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = sub_1CCB63604();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v27 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCA14E90(&qword_1EF9E4410);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1CCA14E90(&qword_1ED8A8EF8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v26 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v26 - v17;
  v28 = a1;
  sub_1CC9EAB74(a1, (uint64_t)&v26 - v17, &qword_1ED8A8EF8);
  v29 = a2;
  sub_1CC9EAB74(a2, (uint64_t)v16, &qword_1ED8A8EF8);
  v19 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1CC9EAB74((uint64_t)v18, (uint64_t)v9, &qword_1ED8A8EF8);
  sub_1CC9EAB74((uint64_t)v16, v19, &qword_1ED8A8EF8);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v20((uint64_t)v9, 1, v4) == 1)
  {
    sub_1CC9C3E84((uint64_t)v16, &qword_1ED8A8EF8);
    sub_1CC9C3E84((uint64_t)v18, &qword_1ED8A8EF8);
    if (v20(v19, 1, v4) == 1)
    {
      sub_1CC9C3E84((uint64_t)v9, &qword_1ED8A8EF8);
LABEL_8:
      v24 = type metadata accessor for FMIPDeviceConnectedState(0);
      return *(unsigned __int8 *)(v28 + *(int *)(v24 + 20)) == *(unsigned __int8 *)(v29 + *(int *)(v24 + 20));
    }
    goto LABEL_6;
  }
  sub_1CC9EAB74((uint64_t)v9, (uint64_t)v13, &qword_1ED8A8EF8);
  if (v20(v19, 1, v4) == 1)
  {
    sub_1CC9C3E84((uint64_t)v16, &qword_1ED8A8EF8);
    sub_1CC9C3E84((uint64_t)v18, &qword_1ED8A8EF8);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
LABEL_6:
    sub_1CC9C3E84((uint64_t)v9, &qword_1EF9E4410);
    return 0;
  }
  v21 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v27, v19, v4);
  sub_1CC9CAA38(&qword_1EF9E1E28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
  v22 = sub_1CCB63958();
  v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v21, v4);
  sub_1CC9C3E84((uint64_t)v16, &qword_1ED8A8EF8);
  sub_1CC9C3E84((uint64_t)v18, &qword_1ED8A8EF8);
  v23(v13, v4);
  sub_1CC9C3E84((uint64_t)v9, &qword_1ED8A8EF8);
  if ((v22 & 1) != 0)
    goto LABEL_8;
  return 0;
}

unint64_t sub_1CCB496BC()
{
  unint64_t result;

  result = qword_1EF9E6318;
  if (!qword_1EF9E6318)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB755DC, &type metadata for FMIPDeviceConnectedState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6318);
  }
  return result;
}

unint64_t sub_1CCB49700()
{
  unint64_t result;

  result = qword_1EF9E6358;
  if (!qword_1EF9E6358)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7558C, &type metadata for FMIPDeviceConnectedStateType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6358);
  }
  return result;
}

unint64_t sub_1CCB49744()
{
  unint64_t result;

  result = qword_1EF9E6360;
  if (!qword_1EF9E6360)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7553C, &type metadata for FMIPDeviceConnectedStateType.DetectedNearbyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6360);
  }
  return result;
}

unint64_t sub_1CCB49788()
{
  unint64_t result;

  result = qword_1EF9E6368;
  if (!qword_1EF9E6368)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB754EC, &type metadata for FMIPDeviceConnectedStateType.DetachedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6368);
  }
  return result;
}

unint64_t sub_1CCB497CC()
{
  unint64_t result;

  result = qword_1EF9E6370;
  if (!qword_1EF9E6370)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7549C, &type metadata for FMIPDeviceConnectedStateType.AttachedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6370);
  }
  return result;
}

unint64_t sub_1CCB49810()
{
  unint64_t result;

  result = qword_1EF9E6378;
  if (!qword_1EF9E6378)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7544C, &type metadata for FMIPDeviceConnectedStateType.ConnectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6378);
  }
  return result;
}

unint64_t sub_1CCB49854()
{
  unint64_t result;

  result = qword_1EF9E6380;
  if (!qword_1EF9E6380)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB753FC, &type metadata for FMIPDeviceConnectedStateType.DisconnectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6380);
  }
  return result;
}

unint64_t sub_1CCB49898()
{
  unint64_t result;

  result = qword_1EF9E63E0;
  if (!qword_1EF9E63E0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB753AC, &type metadata for FMIPBeaconSeparationMonitoringState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E63E0);
  }
  return result;
}

unint64_t sub_1CCB498DC()
{
  unint64_t result;

  result = qword_1EF9E63E8;
  if (!qword_1EF9E63E8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7535C, &type metadata for FMIPBeaconSeparationMonitoringState.PausedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E63E8);
  }
  return result;
}

unint64_t sub_1CCB49920()
{
  unint64_t result;

  result = qword_1EF9E63F0;
  if (!qword_1EF9E63F0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7530C, &type metadata for FMIPBeaconSeparationMonitoringState.DisabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E63F0);
  }
  return result;
}

unint64_t sub_1CCB49964()
{
  unint64_t result;

  result = qword_1EF9E63F8;
  if (!qword_1EF9E63F8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB752BC, &type metadata for FMIPBeaconSeparationMonitoringState.EnabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E63F8);
  }
  return result;
}

unint64_t sub_1CCB499A8()
{
  unint64_t result;

  result = qword_1EF9E6400;
  if (!qword_1EF9E6400)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7526C, &type metadata for FMIPBeaconSeparationMonitoringState.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6400);
  }
  return result;
}

unint64_t sub_1CCB499F0()
{
  unint64_t result;

  result = qword_1EF9E6430;
  if (!qword_1EF9E6430)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPUTAlertState, &type metadata for FMIPUTAlertState);
    atomic_store(result, (unint64_t *)&qword_1EF9E6430);
  }
  return result;
}

unint64_t sub_1CCB49A38()
{
  unint64_t result;

  result = qword_1EF9E6438;
  if (!qword_1EF9E6438)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDeviceConnectedStateType, &type metadata for FMIPDeviceConnectedStateType);
    atomic_store(result, (unint64_t *)&qword_1EF9E6438);
  }
  return result;
}

unint64_t sub_1CCB49A80()
{
  unint64_t result;

  result = qword_1EF9E6440;
  if (!qword_1EF9E6440)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPBeaconSeparationMonitoringState, &type metadata for FMIPBeaconSeparationMonitoringState);
    atomic_store(result, (unint64_t *)&qword_1EF9E6440);
  }
  return result;
}

unint64_t sub_1CCB49AC8()
{
  unint64_t result;

  result = qword_1EF9E6448;
  if (!qword_1EF9E6448)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPSeparationMonitoringState.Reason, &type metadata for FMIPSeparationMonitoringState.Reason);
    atomic_store(result, (unint64_t *)&qword_1EF9E6448);
  }
  return result;
}

uint64_t sub_1CCB49B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t sub_1CCB49B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t sub_1CCB49B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t sub_1CCB49B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

uint64_t sub_1CCB49B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t sub_1CCB49B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 88))();
}

uint64_t sub_1CCB49B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t sub_1CCB49B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t getEnumTagSinglePayload for FMIPBeaconRefreshingControllerClientConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPBeaconRefreshingControllerClientConfiguration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCB49C38 + 4 * byte_1CCB74569[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCB49C6C + 4 * byte_1CCB74564[v4]))();
}

uint64_t sub_1CCB49C6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB49C74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB49C7CLL);
  return result;
}

uint64_t sub_1CCB49C88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB49C90);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCB49C94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB49C9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPBeaconRefreshingControllerClientConfiguration()
{
  return &type metadata for FMIPBeaconRefreshingControllerClientConfiguration;
}

uint64_t *initializeBufferWithCopyOfBuffer for FMIPDeviceConnectedState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1CCB63604();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_1CCA14E90(&qword_1ED8A8EF8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for FMIPDeviceConnectedState(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_1CCB63604();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for FMIPDeviceConnectedState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1CCB63604();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_1CCA14E90(&qword_1ED8A8EF8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithCopy for FMIPDeviceConnectedState(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;

  v6 = sub_1CCB63604();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_1CCA14E90(&qword_1ED8A8EF8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *initializeWithTake for FMIPDeviceConnectedState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1CCB63604();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_1CCA14E90(&qword_1ED8A8EF8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithTake for FMIPDeviceConnectedState(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;

  v6 = sub_1CCB63604();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_1CCA14E90(&qword_1ED8A8EF8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPDeviceConnectedState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCB4A1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_1CCA14E90(&qword_1ED8A8EF8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 5)
    return v9 - 4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FMIPDeviceConnectedState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCB4A228(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1CCA14E90(&qword_1ED8A8EF8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 4;
  return result;
}

void sub_1CCB4A2A4()
{
  unint64_t v0;

  sub_1CCA62F48();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

ValueMetadata *type metadata accessor for FMIPDeviceConnectedStateType()
{
  return &type metadata for FMIPDeviceConnectedStateType;
}

uint64_t getEnumTagSinglePayload for FMIPSeparationMonitoringState(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
  {
    v6 = *a1;
    if (v6 >= 6)
      v7 = v6 - 5;
    else
      v7 = 0;
    if (v7 >= 3)
      return v7 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 7;
    if (a2 + 7 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1CCB4A380 + 4 * byte_1CCB7456E[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for FMIPSeparationMonitoringState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 7;
  if (a3 + 7 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF9)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1CCB4A42C + 4 * byte_1CCB74578[v5]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1CCB4A460 + 4 * byte_1CCB74573[v5]))();
}

uint64_t sub_1CCB4A460(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB4A468(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB4A470);
  return result;
}

uint64_t sub_1CCB4A47C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB4A484);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1CCB4A488(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB4A490(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1CCB4A49C(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 5;
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPSeparationMonitoringState.Reason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CCB4A4F8 + 4 * byte_1CCB74582[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CCB4A52C + 4 * byte_1CCB7457D[v4]))();
}

uint64_t sub_1CCB4A52C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB4A534(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB4A53CLL);
  return result;
}

uint64_t sub_1CCB4A548(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB4A550);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CCB4A554(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB4A55C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB4A568()
{
  return type metadata accessor for FMIPBeaconRefreshingController(0);
}

uint64_t _s8FMIPCore35FMIPBeaconSeparationMonitoringStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CCB4A5BC + 4 * byte_1CCB7458C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CCB4A5F0 + 4 * byte_1CCB74587[v4]))();
}

uint64_t sub_1CCB4A5F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB4A5F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB4A600);
  return result;
}

uint64_t sub_1CCB4A60C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB4A614);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CCB4A618(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB4A620(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPBeaconSeparationMonitoringState.CodingKeys()
{
  return &type metadata for FMIPBeaconSeparationMonitoringState.CodingKeys;
}

ValueMetadata *type metadata accessor for FMIPBeaconSeparationMonitoringState.UnknownCodingKeys()
{
  return &type metadata for FMIPBeaconSeparationMonitoringState.UnknownCodingKeys;
}

ValueMetadata *type metadata accessor for FMIPBeaconSeparationMonitoringState.EnabledCodingKeys()
{
  return &type metadata for FMIPBeaconSeparationMonitoringState.EnabledCodingKeys;
}

ValueMetadata *type metadata accessor for FMIPBeaconSeparationMonitoringState.DisabledCodingKeys()
{
  return &type metadata for FMIPBeaconSeparationMonitoringState.DisabledCodingKeys;
}

ValueMetadata *type metadata accessor for FMIPBeaconSeparationMonitoringState.PausedCodingKeys()
{
  return &type metadata for FMIPBeaconSeparationMonitoringState.PausedCodingKeys;
}

uint64_t _s8FMIPCore28FMIPDeviceConnectedStateTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CCB4A6C8 + 4 * byte_1CCB74596[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CCB4A6FC + 4 * byte_1CCB74591[v4]))();
}

uint64_t sub_1CCB4A6FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB4A704(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB4A70CLL);
  return result;
}

uint64_t sub_1CCB4A718(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB4A720);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CCB4A724(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB4A72C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPDeviceConnectedStateType.CodingKeys()
{
  return &type metadata for FMIPDeviceConnectedStateType.CodingKeys;
}

ValueMetadata *type metadata accessor for FMIPDeviceConnectedStateType.DisconnectedCodingKeys()
{
  return &type metadata for FMIPDeviceConnectedStateType.DisconnectedCodingKeys;
}

ValueMetadata *type metadata accessor for FMIPDeviceConnectedStateType.ConnectedCodingKeys()
{
  return &type metadata for FMIPDeviceConnectedStateType.ConnectedCodingKeys;
}

ValueMetadata *type metadata accessor for FMIPDeviceConnectedStateType.AttachedCodingKeys()
{
  return &type metadata for FMIPDeviceConnectedStateType.AttachedCodingKeys;
}

ValueMetadata *type metadata accessor for FMIPDeviceConnectedStateType.DetachedCodingKeys()
{
  return &type metadata for FMIPDeviceConnectedStateType.DetachedCodingKeys;
}

ValueMetadata *type metadata accessor for FMIPDeviceConnectedStateType.DetectedNearbyCodingKeys()
{
  return &type metadata for FMIPDeviceConnectedStateType.DetectedNearbyCodingKeys;
}

uint64_t _s8FMIPCore16FMIPUTAlertStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCB4A7E4 + 4 * byte_1CCB745A0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCB4A818 + 4 * byte_1CCB7459B[v4]))();
}

uint64_t sub_1CCB4A818(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB4A820(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB4A828);
  return result;
}

uint64_t sub_1CCB4A834(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB4A83CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCB4A840(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB4A848(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPDeviceConnectedState.CodingKeys()
{
  return &type metadata for FMIPDeviceConnectedState.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FMIPBeaconRefreshingControllerClientConfiguration.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CCB4A8A4 + 4 * byte_1CCB745A5[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CCB4A8C4 + 4 * byte_1CCB745AA[v4]))();
}

_BYTE *sub_1CCB4A8A4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CCB4A8C4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCB4A8CC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCB4A8D4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCB4A8DC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCB4A8E4(_DWORD *result)
{
  *result = 0;
  return result;
}

unint64_t sub_1CCB4A8F4()
{
  unint64_t result;

  result = qword_1EF9E64E0;
  if (!qword_1EF9E64E0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74D4C, &type metadata for FMIPBeaconRefreshingControllerClientConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E64E0);
  }
  return result;
}

unint64_t sub_1CCB4A93C()
{
  unint64_t result;

  result = qword_1EF9E64E8;
  if (!qword_1EF9E64E8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74E04, &type metadata for FMIPDeviceConnectedState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E64E8);
  }
  return result;
}

unint64_t sub_1CCB4A984()
{
  unint64_t result;

  result = qword_1EF9E64F0;
  if (!qword_1EF9E64F0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7504C, &type metadata for FMIPDeviceConnectedStateType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E64F0);
  }
  return result;
}

unint64_t sub_1CCB4A9CC()
{
  unint64_t result;

  result = qword_1EF9E64F8;
  if (!qword_1EF9E64F8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75244, &type metadata for FMIPBeaconSeparationMonitoringState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E64F8);
  }
  return result;
}

unint64_t sub_1CCB4AA14()
{
  unint64_t result;

  result = qword_1EF9E6500;
  if (!qword_1EF9E6500)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75164, &type metadata for FMIPBeaconSeparationMonitoringState.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6500);
  }
  return result;
}

unint64_t sub_1CCB4AA5C()
{
  unint64_t result;

  result = qword_1EF9E6508;
  if (!qword_1EF9E6508)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7518C, &type metadata for FMIPBeaconSeparationMonitoringState.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6508);
  }
  return result;
}

unint64_t sub_1CCB4AAA4()
{
  unint64_t result;

  result = qword_1EF9E6510;
  if (!qword_1EF9E6510)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75114, &type metadata for FMIPBeaconSeparationMonitoringState.EnabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6510);
  }
  return result;
}

unint64_t sub_1CCB4AAEC()
{
  unint64_t result;

  result = qword_1EF9E6518;
  if (!qword_1EF9E6518)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7513C, &type metadata for FMIPBeaconSeparationMonitoringState.EnabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6518);
  }
  return result;
}

unint64_t sub_1CCB4AB34()
{
  unint64_t result;

  result = qword_1EF9E6520;
  if (!qword_1EF9E6520)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB750C4, &type metadata for FMIPBeaconSeparationMonitoringState.DisabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6520);
  }
  return result;
}

unint64_t sub_1CCB4AB7C()
{
  unint64_t result;

  result = qword_1EF9E6528;
  if (!qword_1EF9E6528)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB750EC, &type metadata for FMIPBeaconSeparationMonitoringState.DisabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6528);
  }
  return result;
}

unint64_t sub_1CCB4ABC4()
{
  unint64_t result;

  result = qword_1EF9E6530;
  if (!qword_1EF9E6530)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75074, &type metadata for FMIPBeaconSeparationMonitoringState.PausedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6530);
  }
  return result;
}

unint64_t sub_1CCB4AC0C()
{
  unint64_t result;

  result = qword_1EF9E6538;
  if (!qword_1EF9E6538)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7509C, &type metadata for FMIPBeaconSeparationMonitoringState.PausedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6538);
  }
  return result;
}

unint64_t sub_1CCB4AC54()
{
  unint64_t result;

  result = qword_1EF9E6540;
  if (!qword_1EF9E6540)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB751B4, &type metadata for FMIPBeaconSeparationMonitoringState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6540);
  }
  return result;
}

unint64_t sub_1CCB4AC9C()
{
  unint64_t result;

  result = qword_1EF9E6548;
  if (!qword_1EF9E6548)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB751DC, &type metadata for FMIPBeaconSeparationMonitoringState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6548);
  }
  return result;
}

unint64_t sub_1CCB4ACE4()
{
  unint64_t result;

  result = qword_1EF9E6550;
  if (!qword_1EF9E6550)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74F6C, &type metadata for FMIPDeviceConnectedStateType.DisconnectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6550);
  }
  return result;
}

unint64_t sub_1CCB4AD2C()
{
  unint64_t result;

  result = qword_1EF9E6558;
  if (!qword_1EF9E6558)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74F94, &type metadata for FMIPDeviceConnectedStateType.DisconnectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6558);
  }
  return result;
}

unint64_t sub_1CCB4AD74()
{
  unint64_t result;

  result = qword_1EF9E6560;
  if (!qword_1EF9E6560)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74F1C, &type metadata for FMIPDeviceConnectedStateType.ConnectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6560);
  }
  return result;
}

unint64_t sub_1CCB4ADBC()
{
  unint64_t result;

  result = qword_1EF9E6568;
  if (!qword_1EF9E6568)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74F44, &type metadata for FMIPDeviceConnectedStateType.ConnectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6568);
  }
  return result;
}

unint64_t sub_1CCB4AE04()
{
  unint64_t result;

  result = qword_1EF9E6570;
  if (!qword_1EF9E6570)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74ECC, &type metadata for FMIPDeviceConnectedStateType.AttachedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6570);
  }
  return result;
}

unint64_t sub_1CCB4AE4C()
{
  unint64_t result;

  result = qword_1EF9E6578;
  if (!qword_1EF9E6578)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74EF4, &type metadata for FMIPDeviceConnectedStateType.AttachedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6578);
  }
  return result;
}

unint64_t sub_1CCB4AE94()
{
  unint64_t result;

  result = qword_1EF9E6580;
  if (!qword_1EF9E6580)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74E7C, &type metadata for FMIPDeviceConnectedStateType.DetachedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6580);
  }
  return result;
}

unint64_t sub_1CCB4AEDC()
{
  unint64_t result;

  result = qword_1EF9E6588;
  if (!qword_1EF9E6588)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74EA4, &type metadata for FMIPDeviceConnectedStateType.DetachedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6588);
  }
  return result;
}

unint64_t sub_1CCB4AF24()
{
  unint64_t result;

  result = qword_1EF9E6590;
  if (!qword_1EF9E6590)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74E2C, &type metadata for FMIPDeviceConnectedStateType.DetectedNearbyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6590);
  }
  return result;
}

unint64_t sub_1CCB4AF6C()
{
  unint64_t result;

  result = qword_1EF9E6598;
  if (!qword_1EF9E6598)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74E54, &type metadata for FMIPDeviceConnectedStateType.DetectedNearbyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6598);
  }
  return result;
}

unint64_t sub_1CCB4AFB4()
{
  unint64_t result;

  result = qword_1EF9E65A0;
  if (!qword_1EF9E65A0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74FBC, &type metadata for FMIPDeviceConnectedStateType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E65A0);
  }
  return result;
}

unint64_t sub_1CCB4AFFC()
{
  unint64_t result;

  result = qword_1EF9E65A8;
  if (!qword_1EF9E65A8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74FE4, &type metadata for FMIPDeviceConnectedStateType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E65A8);
  }
  return result;
}

unint64_t sub_1CCB4B044()
{
  unint64_t result;

  result = qword_1EF9E65B0;
  if (!qword_1EF9E65B0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74D74, &type metadata for FMIPDeviceConnectedState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E65B0);
  }
  return result;
}

unint64_t sub_1CCB4B08C()
{
  unint64_t result;

  result = qword_1EF9E65B8;
  if (!qword_1EF9E65B8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB74D9C, &type metadata for FMIPDeviceConnectedState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E65B8);
  }
  return result;
}

uint64_t sub_1CCB4B0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  int64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(_QWORD *, _QWORD);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD v36[5];
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v34 = a2;
  v3 = type metadata accessor for FMIPItem();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
    v7 = sub_1CCB63EF8();
  else
    v7 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v40 = MEMORY[0x1E0DEE9D8];
    sub_1CCA63A2C(0, v7 & ~(v7 >> 63), 0);
    if (v35)
    {
      result = sub_1CCB63EBC();
      v10 = 1;
    }
    else
    {
      result = sub_1CCB49318(a1);
      v10 = v11 & 1;
    }
    v37 = result;
    v38 = v9;
    v39 = v10;
    if (v7 < 0)
    {
      __break(1u);
LABEL_25:
      __break(1u);
    }
    else
    {
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0)
        v12 = a1;
      v32 = v12;
      v33 = a1;
      v31 = v6;
      do
      {
        while (1)
        {
          v21 = v37;
          v20 = v38;
          v22 = v39;
          sub_1CCB490B4(v37, v38, v39, a1, &qword_1ED8A70F0);
          v24 = v23;
          v36[3] = sub_1CC9C30A8(0, &qword_1ED8A70F0);
          v36[4] = &protocol witness table for SPBeacon;
          v36[0] = v24;
          v25 = v34;
          swift_retain();
          FMIPItem.init(with:from:)(v36, v25, (uint64_t)v6);
          v26 = v40;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1CCA63A2C(0, *(_QWORD *)(v26 + 16) + 1, 1);
            v26 = v40;
          }
          v28 = *(_QWORD *)(v26 + 16);
          v27 = *(_QWORD *)(v26 + 24);
          if (v28 >= v27 >> 1)
          {
            sub_1CCA63A2C(v27 > 1, v28 + 1, 1);
            v26 = v40;
          }
          *(_QWORD *)(v26 + 16) = v28 + 1;
          result = sub_1CC9FED60((uint64_t)v6, v26+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v28, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
          if (v35)
            break;
          a1 = v33;
          v13 = sub_1CCB48FBC(v21, v20, v22, v33);
          v15 = v14;
          v16 = v4;
          v18 = v17;
          sub_1CCA58DB4(v21, v20, v22);
          v37 = v13;
          v38 = v15;
          v19 = v18 & 1;
          v4 = v16;
          v6 = v31;
          v39 = v19;
          if (!--v7)
            goto LABEL_22;
        }
        a1 = v33;
        if ((v22 & 1) == 0)
          goto LABEL_25;
        if (sub_1CCB63ED4())
          swift_isUniquelyReferenced_nonNull_native();
        sub_1CCA14E90(&qword_1EF9E6630);
        v29 = (void (*)(_QWORD *, _QWORD))sub_1CCB63C70();
        sub_1CCB63F40();
        v29(v36, 0);
        --v7;
      }
      while (v7);
LABEL_22:
      sub_1CCA58DB4(v37, v38, v39);
      return v40;
    }
  }
  return result;
}

uint64_t sub_1CCB4B3D8(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  id v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[2];
  unint64_t v19;
  _QWORD v20[5];
  uint64_t v21;

  v3 = v2;
  v6 = type metadata accessor for FMIPItem();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_15;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    if (!v10)
      return v11;
    v21 = MEMORY[0x1E0DEE9D8];
    result = sub_1CCA63A2C(0, v10 & ~(v10 >> 63), 0);
    if (v10 < 0)
      break;
    v13 = 0;
    v11 = v21;
    v18[1] = v3;
    v19 = a1 & 0xC000000000000001;
    v3 = a1;
    while (v10 != v13)
    {
      if (v19)
        v14 = (id)MEMORY[0x1D17B154C](v13, a1);
      else
        v14 = *(id *)(a1 + 8 * v13 + 32);
      v15 = v14;
      v20[3] = sub_1CC9C30A8(0, &qword_1EF9E6608);
      v20[4] = &protocol witness table for SPApplicationBeacon;
      v20[0] = v15;
      swift_retain();
      FMIPItem.init(with:from:)(v20, a2, (uint64_t)v9);
      v21 = v11;
      v17 = *(_QWORD *)(v11 + 16);
      v16 = *(_QWORD *)(v11 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_1CCA63A2C(v16 > 1, v17 + 1, 1);
        v11 = v21;
      }
      ++v13;
      *(_QWORD *)(v11 + 16) = v17 + 1;
      sub_1CC9FED60((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v17, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      a1 = v3;
      if (v10 == v13)
        return v11;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v10 = sub_1CCB64090();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1CCB4B5C8(unint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  id v15;
  BOOL v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(char *, unint64_t, uint64_t);
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, unint64_t, uint64_t);
  char *v40;
  uint64_t v41;

  v33 = a2;
  v3 = sub_1CCA14E90(&qword_1ED8A8EF8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1CCB63604();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v37 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v40 = (char *)&v27 - v10;
  v41 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_23;
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v11)
  {
    while (1)
    {
      v12 = 0;
      v31 = a1 & 0xFFFFFFFFFFFFFF8;
      v32 = a1 & 0xC000000000000001;
      v28 = (char *)(a1 + 32);
      v29 = v11;
      v30 = a1;
      v13 = v37;
      while (v32)
      {
        v15 = (id)MEMORY[0x1D17B154C](v12, a1);
LABEL_11:
        a1 = (unint64_t)v15;
        v16 = __OFADD__(v12, 1);
        v17 = v12 + 1;
        if (v16)
          goto LABEL_22;
        v36 = v17;
        v18 = objc_msgSend(v33, sel_searchIdentifiers);
        v19 = sub_1CCB63B38();

        v35 = (id)a1;
        v20 = objc_msgSend((id)a1, sel_identifier);
        sub_1CCB635EC();

        v21 = *(_QWORD *)(v19 + 16);
        v34 = v19;
        if (v21)
        {
          v22 = v19 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
          swift_bridgeObjectRetain();
          v23 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
          v38 = *(_QWORD *)(v7 + 72);
          v39 = v23;
          while (1)
          {
            v39(v5, v22, v6);
            v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
            v14(v5, 0, 1, v6);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
              break;
            (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v5, v6);
            sub_1CC9CAA38(&qword_1EF9E1E28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
            v24 = sub_1CCB63958();
            v25 = *(void (**)(char *, uint64_t))(v7 + 8);
            v25(v13, v6);
            if ((v24 & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v25(v40, v6);
              swift_bridgeObjectRelease();
              sub_1CCB64030();
              sub_1CCB64048();
              sub_1CCB64054();
              sub_1CCB6403C();
              goto LABEL_7;
            }
            v22 += v38;
            if (!--v21)
              goto LABEL_5;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
LABEL_5:
          v14(v5, 1, 1, v6);
        }
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v40, v6);

        swift_bridgeObjectRelease();
LABEL_7:
        a1 = v30;
        v12 = v36;
        if (v36 == v29)
          return v41;
      }
      if (v12 < *(_QWORD *)(v31 + 16))
        break;
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      v11 = sub_1CCB64090();
      if (!v11)
        return MEMORY[0x1E0DEE9D8];
    }
    v15 = *(id *)&v28[8 * v12];
    goto LABEL_11;
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1CCB4B950(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000015 && a2 == 0x80000001CCB7ED20)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_1CCB4B9D4(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000014 && a2 == 0x80000001CCB7ED40 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1CCB4BAB8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656E6E6F63736964 && a2 == 0xEC00000064657463;
  if (v2 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657463656E6E6F63 && a2 == 0xE900000000000064 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465686361747461 && a2 == 0xE800000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6465686361746564 && a2 == 0xE800000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6465746365746564 && a2 == 0xEE0079627261654ELL)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1CCB4BD08(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000;
  if (v2 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64656C62616E65 && a2 == 0xE700000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64656C6261736964 && a2 == 0xE800000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x646573756170 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1CCB4BEBC()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4BECC()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4BEDC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void sub_1CCB4BF00(void *a1)
{
  sub_1CCB46A38(a1);
}

uint64_t sub_1CCB4BF08(void *a1)
{
  return sub_1CCB46F48(a1);
}

void sub_1CCB4BF10(void *a1)
{
  uint64_t v1;

  sub_1CCB483E4(a1, v1);
}

uint64_t sub_1CCB4BF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPDeviceConnectedState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1CCB4BF5C()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEB08], (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1CCB4BF70()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4BF80()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4BF90()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEB08], (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

void sub_1CCB4BFA4(uint64_t a1, void *a2)
{
  sub_1CCB46114(a1, a2);
}

void sub_1CCB4BFAC(int a1, void *a2)
{
  uint64_t v2;

  sub_1CCB46690(a1, a2, v2);
}

void sub_1CCB4BFB4()
{
  uint64_t v0;

  sub_1CCB4588C(v0);
}

uint64_t sub_1CCB4BFC0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_1CCB4BFF4()
{
  uint64_t v0;

  sub_1CCB44834(v0 + 16, *(_QWORD *)(v0 + 56));
}

void sub_1CCB4C000(void *a1, _QWORD *a2)
{
  sub_1CCB44B60(a1, a2);
}

uint64_t sub_1CCB4C008()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEB08], (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1CCB4C01C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4C02C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4C03C()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEB08], (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1CCB4C050()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4C060()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1CCB4C084()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4C094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1CCA14E90(&qword_1EF9E6600);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1CCB4C10C()
{
  return swift_deallocObject();
}

void sub_1CCB4C11C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  __int128 v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  char v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;

  v24 = a2;
  v26 = 0;
  v5 = 0;
  v27 = a3 + 56;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 56);
  v9 = a4 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy;
  v28 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v5 << 6);
      goto LABEL_5;
    }
    v20 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v20 >= v28)
      goto LABEL_24;
    v21 = *(_QWORD *)(v27 + 8 * v20);
    ++v5;
    if (!v21)
    {
      v5 = v20 + 1;
      if (v20 + 1 >= v28)
        goto LABEL_24;
      v21 = *(_QWORD *)(v27 + 8 * v5);
      if (!v21)
      {
        v5 = v20 + 2;
        if (v20 + 2 >= v28)
          goto LABEL_24;
        v21 = *(_QWORD *)(v27 + 8 * v5);
        if (!v21)
          break;
      }
    }
LABEL_20:
    v8 = (v21 - 1) & v21;
    v11 = __clz(__rbit64(v21)) + (v5 << 6);
LABEL_5:
    v12 = *(void **)(*(_QWORD *)(a3 + 48) + 8 * v11);
    v13 = *(_OWORD *)(v9 + 16);
    v29 = *(_QWORD *)(v9 + 24);
    v30 = v13;
    v14 = v12;
    sub_1CC9F1844((uint64_t)&v30);
    sub_1CC9F1844((uint64_t)&v29);
    v15 = sub_1CC9F1CCC();
    sub_1CC9F1CA4((uint64_t)&v30);
    sub_1CC9F1CA4((uint64_t)&v29);
    v16 = objc_msgSend(v15, sel_searchTypes, v24);

    type metadata accessor for SPBeaconType(0);
    v17 = sub_1CCB63B38();

    v18 = objc_msgSend(v14, sel_type);
    v19 = sub_1CCB3D4F4((uint64_t)v18, v17);

    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
    {
      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        sub_1CCB31910(a1, v24, v26, a3);
        return;
      }
    }
  }
  v22 = v20 + 3;
  if (v22 >= v28)
    goto LABEL_24;
  v21 = *(_QWORD *)(v27 + 8 * v22);
  if (v21)
  {
    v5 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v5 >= v28)
      goto LABEL_24;
    v21 = *(_QWORD *)(v27 + 8 * v5);
    ++v22;
    if (v21)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_1CCB4C3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v3 = MEMORY[0x1E0DEE9E8];
    v25 = MEMORY[0x1E0DEE9E8];
    swift_retain();
    sub_1CCB63EC8();
    v5 = OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy;
    if (sub_1CCB63F28())
    {
      sub_1CC9C30A8(0, &qword_1ED8A70F0);
      do
      {
        swift_dynamicCast();
        v6 = *(_OWORD *)(a2 + v5 + 16);
        v26 = *(_QWORD *)(a2 + v5 + 24);
        v27 = v6;
        sub_1CC9F1844((uint64_t)&v27);
        sub_1CC9F1844((uint64_t)&v26);
        v7 = sub_1CC9F1CCC();
        sub_1CC9F1CA4((uint64_t)&v27);
        sub_1CC9F1CA4((uint64_t)&v26);
        v8 = objc_msgSend(v7, sel_searchTypes);

        type metadata accessor for SPBeaconType(0);
        v9 = sub_1CCB63B38();

        v10 = objc_msgSend(v24, sel_type);
        LOBYTE(v8) = sub_1CCB3D4F4((uint64_t)v10, v9);
        swift_bridgeObjectRelease();

        if ((v8 & 1) != 0)
        {
          v11 = v25;
          v12 = *(_QWORD *)(v25 + 16);
          if (*(_QWORD *)(v25 + 24) <= v12)
          {
            sub_1CCA74E04(v12 + 1);
            v11 = v25;
          }
          result = sub_1CCB63DE4();
          v14 = v11 + 56;
          v15 = -1 << *(_BYTE *)(v11 + 32);
          v16 = result & ~v15;
          v17 = v16 >> 6;
          if (((-1 << v16) & ~*(_QWORD *)(v11 + 56 + 8 * (v16 >> 6))) != 0)
          {
            v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v11 + 56 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v19 = 0;
            v20 = (unint64_t)(63 - v15) >> 6;
            do
            {
              if (++v17 == v20 && (v19 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              v21 = v17 == v20;
              if (v17 == v20)
                v17 = 0;
              v19 |= v21;
              v22 = *(_QWORD *)(v14 + 8 * v17);
            }
            while (v22 == -1);
            v18 = __clz(__rbit64(~v22)) + (v17 << 6);
          }
          *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
          *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v18) = v24;
          ++*(_QWORD *)(v11 + 16);
        }
        else
        {

        }
      }
      while (sub_1CCB63F28());
      v3 = v25;
    }
    swift_release();
    swift_release();
  }
  else
  {
    v23 = sub_1CCB4C860(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1CCB4C11C);
    if (!v2)
      return v23;
  }
  return v3;
}

uint64_t sub_1CCB4C6A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t *v20;

  v19 = a2;
  v20 = (unint64_t *)result;
  v5 = 0;
  v6 = 0;
  v7 = a3 + 56;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 56);
  v11 = a4 + OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy;
  v12 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v15 = v14 | (v6 << 6);
LABEL_21:
    if (*(_BYTE *)(v11 + 32) == 1)
    {
      result = (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a3 + 48) + 8 * v15), sel_isAppleAudioAccessory, v19);
      if ((result & 1) != 0)
        continue;
    }
    *(unint64_t *)((char *)v20 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    if (__OFADD__(v5++, 1))
      goto LABEL_27;
  }
  v16 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v16 >= v12)
    goto LABEL_24;
  v17 = *(_QWORD *)(v7 + 8 * v16);
  ++v6;
  if (v17)
    goto LABEL_20;
  v6 = v16 + 1;
  if (v16 + 1 >= v12)
    goto LABEL_24;
  v17 = *(_QWORD *)(v7 + 8 * v6);
  if (v17)
    goto LABEL_20;
  v6 = v16 + 2;
  if (v16 + 2 >= v12)
    goto LABEL_24;
  v17 = *(_QWORD *)(v7 + 8 * v6);
  if (v17)
  {
LABEL_20:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v6 << 6);
    goto LABEL_21;
  }
  v18 = v16 + 3;
  if (v18 >= v12)
  {
LABEL_24:
    swift_retain();
    return sub_1CCB31910(v20, v19, v5, a3);
  }
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
  {
    v6 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v6 >= v12)
      goto LABEL_24;
    v17 = *(_QWORD *)(v7 + 8 * v6);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1CCB4C860(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  char v8;
  unsigned int v9;
  unint64_t v10;
  size_t v11;
  uint64_t isStackAllocationSafe;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v17[2];

  v5 = v3;
  v17[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_BYTE *)(a1 + 32);
  v9 = v8 & 0x3F;
  v10 = (unint64_t)((1 << v8) + 63) >> 6;
  v11 = 8 * v10;
  isStackAllocationSafe = swift_retain_n();
  if (v9 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    swift_retain();
    v13 = v5;
    v14 = a3((char *)v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v10, a1, a2);
    swift_release();
    swift_release();
    if (v13)
      swift_willThrow();
    swift_release_n();
  }
  else
  {
    v15 = (void *)swift_slowAlloc();
    bzero(v15, v11);
    swift_retain();
    v14 = a3((char *)v15, v10, a1, a2);
    swift_release();
    swift_release();
    MEMORY[0x1D17B214C](v15, -1, -1);
    swift_release_n();
  }
  return v14;
}

uint64_t sub_1CCB4CA28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  id v17;
  uint64_t v18;

  if ((a1 & 0xC000000000000001) == 0)
    return sub_1CCB4C860(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1CCB4C6A8);
  v3 = MEMORY[0x1E0DEE9E8];
  v18 = MEMORY[0x1E0DEE9E8];
  swift_retain();
  sub_1CCB63EC8();
  v4 = OBJC_IVAR____TtC8FMIPCore30FMIPBeaconRefreshingController_refreshingPolicy;
  if (sub_1CCB63F28())
  {
    sub_1CC9C30A8(0, &qword_1ED8A70F0);
    do
    {
      swift_dynamicCast();
      if (*(_BYTE *)(a2 + v4 + 32) == 1 && (objc_msgSend(v17, sel_isAppleAudioAccessory) & 1) != 0)
      {

      }
      else
      {
        v11 = v18;
        v12 = *(_QWORD *)(v18 + 16);
        if (*(_QWORD *)(v18 + 24) <= v12)
        {
          sub_1CCA74E04(v12 + 1);
          v11 = v18;
        }
        result = sub_1CCB63DE4();
        v6 = v11 + 56;
        v7 = -1 << *(_BYTE *)(v11 + 32);
        v8 = result & ~v7;
        v9 = v8 >> 6;
        if (((-1 << v8) & ~*(_QWORD *)(v11 + 56 + 8 * (v8 >> 6))) != 0)
        {
          v10 = __clz(__rbit64((-1 << v8) & ~*(_QWORD *)(v11 + 56 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v13 = 0;
          v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v15 = v9 == v14;
            if (v9 == v14)
              v9 = 0;
            v13 |= v15;
            v16 = *(_QWORD *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(_QWORD *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v10) = v17;
        ++*(_QWORD *)(v11 + 16);
      }
    }
    while (sub_1CCB63F28());
    v3 = v18;
  }
  swift_release();
  swift_release();
  return v3;
}

void sub_1CCB4CC80()
{
  sub_1CCB3FAA0();
}

uint64_t sub_1CCB4CC88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_1CCB63604();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB4CD18()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4CD28()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4CD38()
{
  return sub_1CCB4D440();
}

uint64_t sub_1CCB4CD40()
{
  return sub_1CCB4D440();
}

uint64_t sub_1CCB4CD48()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4CD58()
{
  return sub_1CCB4D440();
}

uint64_t sub_1CCB4CD60()
{
  return sub_1CCB4D440();
}

uint64_t sub_1CCB4CD70()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4CD80()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4CD90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_1CCB63604();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = sub_1CCB635B0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  v8 = (v3 + 40) & ~v3;
  v9 = (v8 + v4 + v7) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v8, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v9, v5);
  return swift_deallocObject();
}

void sub_1CCB4CE68()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(sub_1CCB63604() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_1CCB635B0() - 8) + 80);
  sub_1CCB41498(v0[2], v0[3], v0[4], (uint64_t)v0 + v2, (uint64_t)v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_1CCB4CEE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = sub_1CCB63604();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = sub_1CCB635B0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  if (*(_QWORD *)(v0 + v8))
    swift_release();
  return swift_deallocObject();
}

void sub_1CCB4CFB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;

  v3 = *(_QWORD *)(sub_1CCB63604() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(sub_1CCB635B0() - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (uint64_t *)(v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_1CCB41B2C(a1, *(_QWORD *)(v1 + 16), v1 + v4, v1 + v7, *v8, v8[1]);
}

uint64_t sub_1CCB4D03C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = sub_1CCB63604();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = sub_1CCB635B0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + v8))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB4D130(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(sub_1CCB63604() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(sub_1CCB635B0() - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1CCB41F98(a1, *(_QWORD *)(v1 + 16), v1 + v4, v1 + v7, *(_QWORD *)(v1 + v8), *(void (**)(uint64_t))(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1CCB4D1C0()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1CCB4D1D4()
{
  uint64_t v0;

  return sub_1CCB43F98(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCB4D1DC()
{
  return swift_deallocObject();
}

void sub_1CCB4D1EC()
{
  _QWORD *v0;

  sub_1CCB43FEC(v0);
}

uint64_t sub_1CCB4D1F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_1CCB63604();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = sub_1CCB635B0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + ((v7 + v4 + 16) & ~v7), v5);
  return swift_deallocObject();
}

uint64_t sub_1CCB4D2F8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(sub_1CCB63604() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(sub_1CCB635B0() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + v4 + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_1CCB40F5C(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8), v0 + v6, *(_QWORD *)(v0 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1CCB4D38C()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4D39C()
{
  return swift_deallocObject();
}

void sub_1CCB4D3AC()
{
  _BYTE *v0;

  sub_1CCB40570(v0);
}

uint64_t sub_1CCB4D3B4(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_1CCB40984(a1, a2, v2);
}

uint64_t sub_1CCB4D3BC()
{
  return sub_1CCAAB640((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEBF0]);
}

void sub_1CCB4D3D0()
{
  uint64_t v0;

  sub_1CCB40B84(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1CCB4D3DC()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4D3EC()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB4D3FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB4D420()
{
  return sub_1CCB4D440();
}

uint64_t sub_1CCB4D428()
{
  return sub_1CCB4D440();
}

uint64_t sub_1CCB4D430()
{
  return sub_1CCB4D440();
}

uint64_t sub_1CCB4D438()
{
  return sub_1CCB4D440();
}

uint64_t sub_1CCB4D440()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB4D60C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB4D644 + 4 * byte_1CCB756B0[a1]))(0x4E6C6C53776F6873, 0xEA0000000000776FLL);
}

unint64_t sub_1CCB4D644()
{
  return 0xD000000000000019;
}

void sub_1CCB4D6D8(char *a1)
{
  sub_1CCB1D4F8(*a1);
}

void sub_1CCB4D6E4()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCB4D72C()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

void sub_1CCB4D7C4()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB4D7FC()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCB4D880()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1CCB6433C();
  __asm { BR              X9 }
}

uint64_t sub_1CCB4D8C4()
{
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB4D95C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB4DCA4();
  *a1 = result;
  return result;
}

uint64_t sub_1CCB4D988()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCB4D9B4 + 4 * byte_1CCB756C5[*v0]))();
}

void sub_1CCB4D9B4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "serverContext");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_1CCB4D9DC(_QWORD *a1@<X8>)
{
  *a1 = 0x6F666E4972657375;
  a1[1] = 0xE800000000000000;
}

void sub_1CCB4D9F8(_QWORD *a1@<X8>)
{
  *a1 = 0x6F43737574617473;
  a1[1] = 0xEA00000000006564;
}

void sub_1CCB4DA18(_QWORD *a1@<X8>)
{
  *a1 = 0x746E65746E6F63;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1CCB4DA34@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB4DCA4();
  *a1 = result;
  return result;
}

uint64_t sub_1CCB4DA58()
{
  sub_1CCA2296C();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB4DA80()
{
  sub_1CCA2296C();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB4DAA8(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1CC9CA3D0(a1);
  return v2;
}

uint64_t sub_1CCB4DAF4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FMIPBaseResponse()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for FMIPBaseResponseError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCB4DB94 + 4 * byte_1CCB756D4[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCB4DBC8 + 4 * byte_1CCB756CF[v4]))();
}

uint64_t sub_1CCB4DBC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB4DBD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB4DBD8);
  return result;
}

uint64_t sub_1CCB4DBE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB4DBECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCB4DBF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB4DBF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPBaseResponseError()
{
  return &type metadata for FMIPBaseResponseError;
}

unint64_t sub_1CCB4DC18()
{
  unint64_t result;

  result = qword_1EF9E6640;
  if (!qword_1EF9E6640)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7584C, &type metadata for FMIPBaseResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6640);
  }
  return result;
}

unint64_t sub_1CCB4DC60()
{
  unint64_t result;

  result = qword_1EF9E6648;
  if (!qword_1EF9E6648)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB758B4, &type metadata for FMIPBaseResponseError);
    atomic_store(result, (unint64_t *)&qword_1EF9E6648);
  }
  return result;
}

uint64_t sub_1CCB4DCA4()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_1CCB4DCEC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CCB4DD28 + 4 * byte_1CCB75970[a1]))(0xD000000000000012, 0x80000001CCB7F180);
}

uint64_t sub_1CCB4DD28()
{
  return 0x6D614E6C65646F6DLL;
}

uint64_t sub_1CCB4DD48()
{
  return 0x6144664F656D6974;
}

uint64_t sub_1CCB4DD68()
{
  return 0x4C79726574746162;
}

uint64_t sub_1CCB4DD88()
{
  return 0x5379726574746162;
}

uint64_t sub_1CCB4DDAC()
{
  return 0x65646F4D74736F6CLL;
}

uint64_t sub_1CCB4DDD0()
{
  uint64_t v0;

  return v0 - 1;
}

void sub_1CCB4E0B0()
{
  qword_1ED8AD5C0 = MEMORY[0x1E0DEE9E0];
}

void sub_1CCB4E0C4()
{
  qword_1EF9FF820 = MEMORY[0x1E0DEE9E0];
}

uint64_t sub_1CCB4E0D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v0 = sub_1CCB63D84();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1CCB63D6C();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v4);
  v6 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v6);
  sub_1CC9C30A8(0, (unint64_t *)&qword_1ED8A8E30);
  sub_1CCB63838();
  v8[1] = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, v5, MEMORY[0x1E0DEF828]);
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0DEF8D0], v0);
  result = sub_1CCB63DB4();
  qword_1ED8A70B0 = result;
  return result;
}

id static FMIPAnalytics.sharedAnalytics.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (qword_1EF9DF018 != -1)
    swift_once();
  v2 = (void *)qword_1ED8A70B0;
  *a1 = qword_1ED8A70B0;
  return v2;
}

uint64_t static FMIPAnalytics.sendDeviceEvent(device:primaryPartIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v20 = a2;
  v5 = sub_1CCB63820();
  v22 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1CCB63868();
  v8 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FMIPDevice();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  if (qword_1EF9DF018 != -1)
    swift_once();
  v19[1] = qword_1ED8A70B0;
  sub_1CCA0BEEC(a1, (uint64_t)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = swift_allocObject();
  sub_1CC9FED60((uint64_t)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v16 = (_QWORD *)(v15 + ((v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v16 = v20;
  v16[1] = a3;
  aBlock[4] = sub_1CCB4FDF8;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E8901C48;
  v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  sub_1CCB63844();
  v23 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v10, v7, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
  return swift_release();
}

void sub_1CCB4E590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  void *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  id v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  NSObject *v64;
  char v65;
  id v66;
  void (*v67)(_QWORD, _QWORD);
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  id v84;
  void *v85;
  id v86;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  id v95;
  char v96;
  uint64_t v97;
  id v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[3];
  uint64_t *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(_QWORD, _QWORD);
  NSObject *v123;
  uint64_t v124;
  uint64_t aBlock;
  id v126;
  uint64_t v127;
  unsigned __int8 v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;

  v114 = a3;
  v113 = a2;
  v4 = sub_1CCB635B0();
  v110 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v115 = (char *)v102 - v8;
  v109 = sub_1CCB6364C();
  v108 = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109);
  v107 = (char *)v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_1CCB63664();
  v105 = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106);
  v104 = (char *)v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCA14E90(&qword_1ED8A8C30);
  v12 = MEMORY[0x1E0C80A78](v11);
  v120 = (uint64_t)v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v118 = (uint64_t)v102 - v14;
  v124 = type metadata accessor for FMIPDevice();
  v15 = MEMORY[0x1E0C80A78](v124);
  v17 = (_QWORD *)((char *)v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)v102 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (_QWORD *)((char *)v102 - v21);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v23 = sub_1CCB637FC();
  v24 = sub_1CCA16C20(v23, (uint64_t)qword_1ED8AD7F8);
  sub_1CCA0BEEC(a1, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v123 = v24;
  v25 = sub_1CCB637D8();
  v26 = sub_1CCB63D48();
  v27 = os_log_type_enabled(v25, v26);
  v116 = v4;
  v102[2] = v7;
  v103 = v17;
  v122 = (void (*)(_QWORD, _QWORD))v20;
  if (v27)
  {
    v28 = (uint8_t *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    aBlock = v29;
    *(_DWORD *)v28 = 136315138;
    v30 = *v22;
    v31 = v22[1];
    swift_bridgeObjectRetain();
    *(_QWORD *)&v131 = sub_1CCA0CB60(v30, v31, &aBlock);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA0BF30((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    _os_log_impl(&dword_1CC9BF000, v25, v26, "FMIPAnalytics: sendDeviceEvent for device (%s)", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v29, -1, -1);
    MEMORY[0x1D17B214C](v28, -1, -1);
  }
  else
  {
    sub_1CCA0BF30((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  }

  if (qword_1EF9DF008 != -1)
    swift_once();
  v33 = *(_QWORD *)a1;
  v32 = *(_QWORD *)(a1 + 8);
  swift_beginAccess();
  v34 = qword_1ED8AD5C0;
  if (*(_QWORD *)(qword_1ED8AD5C0 + 16))
  {
    swift_bridgeObjectRetain();
    v35 = sub_1CCA074F4(v33, v32);
    if ((v36 & 1) != 0)
    {
      v37 = (unsigned __int8 *)(*(_QWORD *)(v34 + 56) + 24 * v35);
      v38 = *v37;
      v39 = v37[1];
      v40 = v37[2];
      v41 = v37[3];
      v42 = (void *)*((_QWORD *)v37 + 1);
      v43 = *((_QWORD *)v37 + 2);
      v44 = 256;
      if (!v39)
        v44 = 0;
      v45 = v44 | v38;
      v46 = 0x10000;
      if (!v40)
        v46 = 0;
      v47 = v45 | v46 | (v41 << 24);
      v48 = v42;
    }
    else
    {
      v47 = 0;
      v42 = 0;
      v43 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v47 = 0;
    v42 = 0;
    v43 = 0;
  }
  swift_endAccess();
  v49 = *(_OWORD *)(a1 + 256);
  v50 = *(_QWORD *)(a1 + 280);
  v132 = *(_QWORD *)(a1 + 272);
  v102[1] = v50;
  v129 = v50;
  v112 = *(_OWORD *)(a1 + 288);
  v130 = v112;
  v131 = v49;
  v51 = (*(_QWORD *)(a1 + 216) >> 5) & 1;
  v52 = a1 + *(int *)(v124 + 128);
  v128 = *(_BYTE *)(a1 + 80);
  v119 = v52;
  sub_1CCA11CFC((uint64_t *)&v131, &v129, v51, v52, &v128, (double *)&aBlock);
  v54 = aBlock;
  v53 = (uint64_t)v126;
  v121 = v127;
  v55 = v126;
  v56 = sub_1CCB637D8();
  v57 = sub_1CCB63D48();
  if (os_log_type_enabled(v56, v57))
  {
    v111 = v42;
    v58 = (uint8_t *)swift_slowAlloc();
    v59 = swift_slowAlloc();
    aBlock = v59;
    *(_DWORD *)v58 = 136315138;
    v117 = v53;
    if (v53)
    {
      v60 = v54;
      LOBYTE(v131) = BYTE3(v54);
      v61 = FMIPLocationType.rawValue.getter();
      v63 = v62;
    }
    else
    {
      v60 = v54;
      v63 = 0xEB000000006E6F69;
      v61 = 0x7461636F6C206F6ELL;
    }
    *(_QWORD *)&v131 = sub_1CCA0CB60(v61, v63, &aBlock);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v56, v57, "FMIPAnalytics: device location type (%s)", v58, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v59, -1, -1);
    MEMORY[0x1D17B214C](v58, -1, -1);

    v42 = v111;
    v54 = v60;
    v53 = v117;
    if (!v117)
      goto LABEL_28;
  }
  else
  {

    if (!v53)
    {
LABEL_28:
      if (v42)
        goto LABEL_29;
      v67 = v122;
      sub_1CCA0BEEC(a1, (uint64_t)v122, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_36:
      sub_1CCA0BF30((uint64_t)v67, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      goto LABEL_37;
    }
  }
  aBlock = v54;
  v126 = (id)v53;
  v127 = v121;
  if (v42)
  {
    LOWORD(v131) = v47 & 0x101;
    BYTE2(v131) = BYTE2(v47) & 1;
    BYTE3(v131) = HIBYTE(v47);
    *((_QWORD *)&v131 + 1) = v42;
    v132 = v43;
    v64 = v55;
    v65 = _s8FMIPCore12FMIPLocationV2eeoiySbAC_ACtFZ_0((double *)&aBlock, (double *)&v131);
    v66 = v126;

    v67 = v122;
    sub_1CCA0BEEC(a1, (uint64_t)v122, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if ((v65 & 1) == 0)
      goto LABEL_30;
    goto LABEL_36;
  }
  v68 = v55;
LABEL_29:

  v67 = v122;
  sub_1CCA0BEEC(a1, (uint64_t)v122, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_30:
  v69 = v118;
  sub_1CC9EAB74((uint64_t)v67 + *(int *)(v124 + 128), v118, &qword_1ED8A8C30);
  sub_1CCA0BF30((uint64_t)v67, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v70 = type metadata accessor for FMIPItemGroup();
  v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48))(v69, 1, v70);
  sub_1CC9C3E84(v69, &qword_1ED8A8C30);
  if (v71 != 1)
  {
LABEL_37:
    v100 = v120;
    sub_1CC9EAB74(v119, v120, &qword_1ED8A8C30);
    v101 = type metadata accessor for FMIPItemGroup();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 48))(v100, 1, v101) == 1)
    {

      sub_1CC9C3E84(v100, &qword_1ED8A8C30);
      return;
    }
    sub_1CC9C3E84(v100, &qword_1ED8A8C30);
    _s8FMIPCore13FMIPAnalyticsV18sendItemGroupEvent6device21primaryPartIdentifieryAA10FMIPDeviceV_SSSgtFZ_0(a1, v113, v114);
    goto LABEL_40;
  }
  v124 = v112;
  v72 = v53 | v112;
  v73 = v53;
  v74 = *(_QWORD *)a1;
  v75 = *(_QWORD *)(a1 + 8);
  swift_beginAccess();
  v76 = v55;
  swift_bridgeObjectRetain();
  v117 = v73;
  sub_1CCB05B28(v54, v73, v121, v74, v75);
  swift_endAccess();
  if (v72)
  {
    v121 = v54;
    v123 = v76;
    v111 = v42;
    v83 = sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
    v84 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
    swift_bridgeObjectRetain();
    v85 = (void *)sub_1CCB63964();
    swift_bridgeObjectRelease();
    v86 = objc_msgSend(v84, sel_initWithString_, v85);

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    aBlock = v83;
    sub_1CC9E1E50((uint64_t)v86, 0x6D614E6C65646F6DLL, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
    v88 = aBlock;
    swift_bridgeObjectRelease();
    v89 = v104;
    sub_1CCB63640();
    v90 = v108;
    v91 = v107;
    v92 = v109;
    (*(void (**)(char *, _QWORD, uint64_t))(v108 + 104))(v107, *MEMORY[0x1E0CB1140], v109);
    v93 = v115;
    sub_1CCB635A4();
    v94 = sub_1CCB63658();
    v122 = *(void (**)(_QWORD, _QWORD))(v110 + 8);
    v122(v93, v116);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v92);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v89, v106);
    v95 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v94);
    v96 = swift_isUniquelyReferenced_nonNull_native();
    aBlock = v88;
    sub_1CC9E1E50((uint64_t)v95, 0x6144664F656D6974, 0xE900000000000079, v96);
    v97 = aBlock;
    swift_bridgeObjectRelease();
    v98 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, *(double *)(a1 + 184));
    v99 = swift_isUniquelyReferenced_nonNull_native();
    aBlock = v97;
    sub_1CC9E1E50((uint64_t)v98, 0x4C79726574746162, 0xEC0000006C657665, v99);
    swift_bridgeObjectRelease();
    __asm { BR              X10 }
  }
  v77 = v103;
  sub_1CCA0BEEC(a1, (uint64_t)v103, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v55 = sub_1CCB637D8();
  v78 = sub_1CCB63D48();
  if (os_log_type_enabled(v55, v78))
  {
    v79 = (uint8_t *)swift_slowAlloc();
    v80 = swift_slowAlloc();
    aBlock = v80;
    *(_DWORD *)v79 = 136315138;
    v81 = *v77;
    v82 = v77[1];
    swift_bridgeObjectRetain();
    *(_QWORD *)&v131 = sub_1CCA0CB60(v81, v82, &aBlock);
    sub_1CCB63E44();
    swift_bridgeObjectRelease();
    sub_1CCA0BF30((uint64_t)v77, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    _os_log_impl(&dword_1CC9BF000, v55, v78, "FMIPAnalytics: cannot complete sendDeviceEvent. Current location and crowdsourced location are both nil.: (%s)", v79, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v80, -1, -1);
    MEMORY[0x1D17B214C](v79, -1, -1);
LABEL_40:

    return;
  }

  sub_1CCA0BF30((uint64_t)v77, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
}

uint64_t sub_1CCB4FDF8()
{
  return sub_1CCB53DDC((uint64_t (*)(unint64_t, _QWORD, _QWORD))sub_1CCB4E590);
}

uint64_t static FMIPAnalytics.sendItemEvent(item:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD aBlock[6];

  v2 = sub_1CCB63820();
  v17 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1CCB63868();
  v5 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FMIPItem();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  if (qword_1EF9DF018 != -1)
    swift_once();
  sub_1CCA0BEEC(a1, (uint64_t)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  sub_1CC9FED60((uint64_t)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  aBlock[4] = sub_1CCB514B4;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E8901C98;
  v13 = _Block_copy(aBlock);
  sub_1CCB63844();
  v18 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v7, v4, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v16);
  return swift_release();
}

void sub_1CCB50078(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[2];
  uint64_t aBlock[6];

  v2 = type metadata accessor for FMIPItem();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v5 = sub_1CCB637FC();
  sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
  sub_1CCA0BEEC((uint64_t)a1, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v6 = sub_1CCB637D8();
  v7 = sub_1CCB63D48();
  if (os_log_type_enabled(v6, v7))
  {
    v19[0] = v2;
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    aBlock[0] = v9;
    *(_DWORD *)v8 = 136315138;
    v11 = *((_QWORD *)v4 + 44);
    v10 = *((_QWORD *)v4 + 45);
    swift_bridgeObjectRetain();
    v19[1] = sub_1CCA0CB60(v11, v10, aBlock);
    sub_1CCB63E44();
    v2 = v19[0];
    swift_bridgeObjectRelease();
    sub_1CCA0BF30((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    _os_log_impl(&dword_1CC9BF000, v6, v7, "FMIPAnalytics: sendItemEvent for item (%s)", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v9, -1, -1);
    MEMORY[0x1D17B214C](v8, -1, -1);
  }
  else
  {
    sub_1CCA0BF30((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  }

  if ((*((_BYTE *)a1 + *(int *)(v2 + 84)) & 1) == 0)
  {
    v12 = sub_1CCB514E0(a1);
    v13 = sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
    sub_1CCB009F8(v12, v13);
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v16 = (void *)sub_1CCB63964();
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = v12;
      aBlock[4] = (uint64_t)sub_1CCA3C490;
      aBlock[5] = v17;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1CCA7EAC8;
      aBlock[3] = (uint64_t)&unk_1E8901D10;
      v18 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_release();
      AnalyticsSendEventLazy();
      _Block_release(v18);
      swift_bridgeObjectRelease();

    }
  }
}

uint64_t sub_1CCB50370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)();
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char v39;
  uint64_t (*v40)();
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t aBlock[8];

  v54 = a2;
  v55 = a3;
  v4 = type metadata accessor for FMIPItem();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FMIPItemGroup();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v56 = (uint8_t **)((char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for FMIPDevice();
  MEMORY[0x1E0C80A78](v14);
  v16 = (uint64_t *)((char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1ED8AA630 != -1)
    swift_once();
  v17 = sub_1CCB637FC();
  sub_1CCA16C20(v17, (uint64_t)qword_1ED8AD7F8);
  sub_1CCA0BEEC(a1, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v18 = sub_1CCB637D8();
  v19 = sub_1CCB63D48();
  if (os_log_type_enabled(v18, v19))
  {
    v52 = v5;
    v20 = swift_slowAlloc();
    v49 = v14;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc();
    v50 = v12;
    v23 = v22;
    aBlock[0] = v22;
    v53 = a1;
    *(_DWORD *)v21 = 136315138;
    v51 = v10;
    v48 = v21 + 4;
    v24 = v11;
    v26 = *v16;
    v25 = v16[1];
    swift_bridgeObjectRetain();
    v27 = v26;
    v11 = v24;
    v57 = sub_1CCA0CB60(v27, v25, aBlock);
    v10 = v51;
    a1 = v53;
    sub_1CCB63E44();
    v5 = v52;
    swift_bridgeObjectRelease();
    sub_1CCA0BF30((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    _os_log_impl(&dword_1CC9BF000, v18, v19, "FMIPAnalytics: sendItemGoupEvent for itemGroup from device (%s)", v21, 0xCu);
    swift_arrayDestroy();
    v28 = v23;
    v12 = v50;
    MEMORY[0x1D17B214C](v28, -1, -1);
    v29 = v21;
    v14 = v49;
    MEMORY[0x1D17B214C](v29, -1, -1);
  }
  else
  {
    sub_1CCA0BF30((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  }

  sub_1CC9EAB74(a1 + *(int *)(v14 + 128), (uint64_t)v10, &qword_1ED8A8C30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return sub_1CC9C3E84((uint64_t)v10, &qword_1ED8A8C30);
  v31 = v56;
  sub_1CC9FED60((uint64_t)v10, (uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  v51 = (char *)v31[5];
  v32 = *((_QWORD *)v51 + 2);
  if (v32)
  {
    v33 = (uint64_t)&v51[(*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)];
    v34 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain();
    v35 = type metadata accessor for FMIPItem;
    v36 = MEMORY[0x1E0DEE9E0];
    v52 = 0x80000001CCB7F1A0;
    v37 = v7;
    v53 = v34;
    do
    {
      sub_1CCA0BEEC(v33, (uint64_t)v37, (uint64_t (*)(_QWORD))v35);
      v38 = sub_1CCB514E0(v37);
      sub_1CCB009F8(v38, v36);
      if ((v39 & 1) != 0)
      {
        sub_1CCA0BF30((uint64_t)v37, (uint64_t (*)(_QWORD))v35);
        swift_bridgeObjectRelease();
      }
      else
      {
        v40 = v35;
        v41 = _s8FMIPCore13FMIPAnalyticsV26itemGroupSpecificEventInfo6device0cD00C021primaryPartIdentifierSDySSSo8NSObjectCGAA10FMIPDeviceV_AA08FMIPItemD0VAA0N0VSSSgtFZ_0(a1, v56, (uint64_t)v37, v54, v55);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        aBlock[0] = v38;
        sub_1CCB508A4(v41, (uint64_t)sub_1CCB50B88, 0, isUniquelyReferenced_nonNull_native, aBlock);
        v43 = aBlock[0];
        swift_bridgeObjectRelease();
        v44 = (uint64_t)v37;
        v45 = (void *)sub_1CCB63964();
        v46 = swift_allocObject();
        *(_QWORD *)(v46 + 16) = v43;
        aBlock[4] = (uint64_t)sub_1CCA3E1C0;
        aBlock[5] = v46;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1CCA7EAC8;
        aBlock[3] = (uint64_t)&unk_1E8901DB0;
        v47 = _Block_copy(aBlock);
        swift_bridgeObjectRetain();
        swift_release();
        AnalyticsSendEventLazy();
        _Block_release(v47);
        swift_bridgeObjectRelease();

        v35 = v40;
        sub_1CCA0BF30(v44, (uint64_t (*)(_QWORD))v40);
        v34 = v53;
        v37 = (_QWORD *)v44;
        v36 = MEMORY[0x1E0DEE9E0];
      }
      v33 += v34;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
  }
  return sub_1CCA0BF30((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
}

uint64_t sub_1CCB508A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  sub_1CCAA7F3C();
  if (!v8)
    goto LABEL_24;
  v10 = v7;
  v11 = v8;
  v12 = v9;
  v13 = (_QWORD *)*a5;
  v15 = sub_1CCA074F4(v7, v8);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v19 = v14;
  if (v13[3] >= v18)
  {
    if ((a4 & 1) != 0)
    {
      v22 = (_QWORD *)*a5;
      if ((v14 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1CCAEC578();
      v22 = (_QWORD *)*a5;
      if ((v19 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v22[(v15 >> 6) + 8] |= 1 << v15;
    v25 = (uint64_t *)(v22[6] + 16 * v15);
    *v25 = v10;
    v25[1] = v11;
    *(_QWORD *)(v22[7] + 8 * v15) = v12;
    v26 = v22[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v22[2] = v28;
LABEL_13:
    sub_1CCAA7F3C();
    if (v30)
    {
      v32 = v29;
      v33 = v30;
      v34 = v31;
      do
      {
        v40 = (_QWORD *)*a5;
        v42 = sub_1CCA074F4(v32, v33);
        v43 = v40[2];
        v44 = (v41 & 1) == 0;
        v45 = v43 + v44;
        if (__OFADD__(v43, v44))
          goto LABEL_25;
        v46 = v41;
        if (v40[3] < v45)
        {
          sub_1CCAE84F8(v45, 1);
          v47 = sub_1CCA074F4(v32, v33);
          if ((v46 & 1) != (v48 & 1))
            goto LABEL_27;
          v42 = v47;
        }
        v49 = (_QWORD *)*a5;
        if ((v46 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v35 = v49[7];
          v36 = 8 * v42;

          *(_QWORD *)(v35 + v36) = v34;
        }
        else
        {
          v49[(v42 >> 6) + 8] |= 1 << v42;
          v50 = (uint64_t *)(v49[6] + 16 * v42);
          *v50 = v32;
          v50[1] = v33;
          *(_QWORD *)(v49[7] + 8 * v42) = v34;
          v51 = v49[2];
          v27 = __OFADD__(v51, 1);
          v52 = v51 + 1;
          if (v27)
            goto LABEL_26;
          v49[2] = v52;
        }
        sub_1CCAA7F3C();
        v32 = v37;
        v33 = v38;
        v34 = v39;
      }
      while (v38);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1CCA2F54C();
    return swift_release();
  }
  sub_1CCAE84F8(v18, a4 & 1);
  v20 = sub_1CCA074F4(v10, v11);
  if ((v19 & 1) == (v21 & 1))
  {
    v15 = v20;
    v22 = (_QWORD *)*a5;
    if ((v19 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    swift_bridgeObjectRelease();
    v23 = v22[7];
    v24 = 8 * v15;

    *(_QWORD *)(v23 + v24) = v12;
    goto LABEL_13;
  }
LABEL_27:
  result = sub_1CCB642DC();
  __break(1u);
  return result;
}

id sub_1CCB50B88@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v4;

  v2 = a1[1];
  v4 = (id)a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t sub_1CCB50BC0(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (a1 <= 5.0)
    return 5;
  if (a1 <= 25.0)
    return 25;
  if (a1 <= 50.0)
    return 50;
  if (a1 <= 75.0)
    return 75;
  if (a1 <= 100.0)
    return 100;
  if (a1 <= 150.0)
    return 150;
  if (a1 <= 200.0)
    return 200;
  v1 = 600;
  v2 = 900;
  v3 = 1600;
  if (a1 <= 1500.0)
    v3 = 1500;
  if (a1 > 900.0)
    v2 = v3;
  if (a1 > 600.0)
    v1 = v2;
  if (a1 > 300.0)
    return v1;
  else
    return 300;
}

uint64_t sub_1CCB50CD0(double a1)
{
  if (a1 <= 0.0)
    return 0;
  if (a1 <= 60.0)
    return 60;
  if (a1 <= 120.0)
    return 120;
  if (a1 <= 180.0)
    return 180;
  if (a1 <= 240.0)
    return 240;
  if (a1 <= 300.0)
    return 300;
  if (a1 <= 420.0)
    return 420;
  if (a1 <= 600.0)
    return 600;
  if (a1 <= 900.0)
    return 900;
  if (a1 <= 1200.0)
    return 1200;
  if (a1 <= 1800.0)
    return 1800;
  if (a1 <= 2400.0)
    return 2400;
  if (a1 <= 3000.0)
    return 3000;
  if (a1 <= 3600.0)
    return 3600;
  if (a1 <= 10800.0)
    return 10800;
  if (a1 <= 21600.0)
    return 21600;
  if (a1 <= 43200.0)
    return 43200;
  if (a1 <= 86400.0)
    return 86400;
  if (a1 > 604800.0)
    return 700000;
  return 604800;
}

uint64_t _s8FMIPCore13FMIPAnalyticsV18sendItemGroupEvent6device21primaryPartIdentifieryAA10FMIPDeviceV_SSSgtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v20 = a2;
  v5 = sub_1CCB63820();
  v22 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1CCB63868();
  v8 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FMIPDevice();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  if (qword_1EF9DF018 != -1)
    swift_once();
  v19[1] = qword_1ED8A70B0;
  sub_1CCA0BEEC(a1, (uint64_t)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = swift_allocObject();
  sub_1CC9FED60((uint64_t)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v16 = (_QWORD *)(v15 + ((v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v16 = v20;
  v16[1] = a3;
  aBlock[4] = sub_1CCB53DD0;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E8901D60;
  v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  sub_1CCB63844();
  v23 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v10, v7, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
  return swift_release();
}

uint64_t sub_1CCB51178()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for FMIPItem();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  if (*(_QWORD *)(v3 + 176))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = v3 + v1[13];
  v5 = type metadata accessor for FMIPItemLostModeMetadata();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v4 + *(int *)(v5 + 24);
    v7 = sub_1CCB635B0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v3 + v1[16] + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v3 + v1[24];
  type metadata accessor for FMIPProductType();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v10 = (int *)type metadata accessor for FMIPHawkeyeProductInformation();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v10 - 1) + 48))(v8, 1, v10))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v8 + v10[12];
      v12 = sub_1CCB63490();
      v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
      v13(v11, v12);
      v13(v8 + v10[13], v12);
      v13(v8 + v10[14], v12);
      v13(v8 + v10[15], v12);
      v13(v8 + v10[16], v12);
      v13(v8 + v10[17], v12);
    }
  }
  else if (EnumCaseMultiPayload == 1 || !EnumCaseMultiPayload && *(_QWORD *)(v8 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

void sub_1CCB514B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FMIPItem() - 8) + 80);
  sub_1CCB50078((_QWORD *)(v0 + ((v1 + 16) & ~v1)));
}

uint64_t sub_1CCB514E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  id v22;
  double v23;
  int v24;
  int v25;
  int v26;
  int v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  BOOL v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  id v44;
  char v45;
  uint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v58;
  uint64_t *v59;
  int EnumCaseMultiPayload;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  id v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  void *v80;
  id v81;
  char v82;
  uint64_t v83;
  id v84;
  void *v85;
  id v86;
  char v87;
  uint64_t v88;
  id v89;
  void *v90;
  id v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  void *v97;
  id v98;
  char v99;
  uint64_t v100;
  id v101;
  void *v102;
  id v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  char v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  char v120;
  uint64_t v121;
  _QWORD *v122;
  id v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  char v131;
  uint64_t v132;
  id v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  id v145;
  char v146;
  uint64_t v147;
  id v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  char **p_type;
  unint64_t v155;
  id v156;
  void *v157;
  id v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  void *v163;
  id v164;
  char v165;
  uint64_t v166;
  id v167;
  double v168;
  id v169;
  char v170;
  uint64_t v171;
  char *v172;
  id v173;
  char *v174;
  double v175;
  double v176;
  uint64_t *v177;
  id v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  double v184;
  id v185;
  char v186;
  uint64_t v187;
  id v188;
  double v189;
  double v190;
  unint64_t v191;
  id v192;
  char v193;
  id v194;
  void *v195;
  id v196;
  void *v197;
  id v198;
  char v199;
  uint64_t v200;
  id v201;
  double v202;
  id v203;
  char v204;
  uint64_t v205;
  char *v206;
  id v207;
  double v208;
  double v209;
  uint64_t v210;
  id v211;
  char v212;
  uint64_t v214;
  char v215;
  id v216[2];
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t *v228;
  char *v229;
  uint64_t v230;
  void *v231;
  unint64_t v232;
  id v233;
  _QWORD *v234;
  unint64_t v235;
  double v236[3];
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;

  v2 = sub_1CCB635B0();
  v219 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v221 = (char *)v216 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v229 = (char *)v216 - v5;
  v6 = sub_1CCB6364C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v226 = (char *)v216 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = sub_1CCB63664();
  v224 = *(_QWORD *)(v225 - 8);
  MEMORY[0x1E0C80A78](v225);
  v223 = (char *)v216 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v222 = type metadata accessor for FMIPProductType();
  MEMORY[0x1E0C80A78](v222);
  v228 = (uint64_t *)((char *)v216 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v232 = sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
  if (qword_1EF9DF010 != -1)
    swift_once();
  v12 = a1[44];
  v11 = a1[45];
  swift_beginAccess();
  v13 = qword_1EF9FF820;
  v14 = *(_QWORD *)(qword_1EF9FF820 + 16);
  v230 = v2;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v15 = sub_1CCA074F4(v12, v11);
    if ((v16 & 1) != 0)
    {
      v17 = (unsigned __int8 *)(*(_QWORD *)(v13 + 56) + 24 * v15);
      v18 = *v17;
      v19 = v17[1];
      v20 = v17[2];
      v21 = v17[3];
      v22 = (id)*((_QWORD *)v17 + 1);
      v23 = *((double *)v17 + 2);
      v24 = 256;
      if (!v19)
        v24 = 0;
      v25 = v24 | v18;
      v26 = 0x10000;
      if (!v20)
        v26 = 0;
      v27 = v25 | v26 | (v21 << 24);
      v28 = v22;
    }
    else
    {
      v27 = 0;
      v22 = 0;
      v23 = 0.0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = 0;
    v22 = 0;
    v23 = 0.0;
  }
  v220 = v7;
  v227 = v6;
  swift_endAccess();
  v29 = a1[49];
  v235 = a1[48];
  v30 = a1[50];
  v31 = a1[40];
  v218 = a1[39];
  v234 = a1;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v32 = sub_1CCB637FC();
  sub_1CCA16C20(v32, (uint64_t)qword_1ED8AD7F8);
  v33 = (id)v29;
  v34 = sub_1CCB637D8();
  v35 = sub_1CCB63D48();
  v36 = os_log_type_enabled(v34, v35);
  v233 = v22;
  v231 = (void *)v31;
  if (v36)
  {
    v37 = (uint8_t *)swift_slowAlloc();
    v38 = swift_slowAlloc();
    v237 = v38;
    *(_DWORD *)v37 = 136315138;
    if (v29)
    {
      LOBYTE(v236[0]) = BYTE3(v235);
      v39 = FMIPLocationType.rawValue.getter();
      v41 = v40;
    }
    else
    {
      v41 = 0xEB000000006E6F69;
      v39 = 0x7461636F6C206F6ELL;
    }
    *(_QWORD *)&v236[0] = sub_1CCA0CB60(v39, v41, &v237);
    sub_1CCB63E44();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v34, v35, "FMIPAnalytics: item location type (%s)", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v38, -1, -1);
    MEMORY[0x1D17B214C](v37, -1, -1);

    v22 = v233;
    v31 = (unint64_t)v231;
    v42 = v234;
    if (!v29)
    {
LABEL_25:
      if (v22)
        goto LABEL_26;
      return v232;
    }
  }
  else
  {

    v42 = v234;
    if (!v29)
      goto LABEL_25;
  }
  v237 = v235;
  v238 = (void *)v29;
  v239 = v30;
  if (!v22)
  {
    v48 = v33;
LABEL_26:

LABEL_27:
    v49 = v29 | v31;
    v50 = v42[44];
    v51 = v42[45];
    swift_beginAccess();
    v52 = v33;
    swift_bridgeObjectRetain();
    v217 = v29;
    sub_1CCB05B28(v235, v29, v30, v50, v51);
    swift_endAccess();
    if (!v49)
    {

      return v232;
    }
    v54 = (void *)sub_1CC9C30A8(0, (unint64_t *)&qword_1EF9E4EA8);
    v55 = sub_1CCB63DD8();
    v56 = v232;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v237 = v56;
    sub_1CC9E1E50(v55, 0xD000000000000012, 0x80000001CCB7F180, isUniquelyReferenced_nonNull_native);
    v58 = v237;
    swift_bridgeObjectRelease();
    v232 = type metadata accessor for FMIPItem();
    v59 = v228;
    sub_1CCA0BEEC((uint64_t)v42 + *(int *)(v232 + 96), (uint64_t)v228, (uint64_t (*)(_QWORD))type metadata accessor for FMIPProductType);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v216[1] = v54;
    v216[0] = v52;
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        FMIPProductType.productInformation.getter((uint64_t)&v237);
        v68 = v240;
        if (v240)
        {
          v69 = v241;
          sub_1CCA04DDC(&v237, v240);
          (*(void (**)(uint64_t, uint64_t))(v69 + 32))(v68, v69);
          sub_1CCA01CA0((uint64_t)&v237);
        }
        else
        {
          sub_1CC9C3E84((uint64_t)&v237, &qword_1EF9E2888);
        }
        v89 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
        v90 = (void *)sub_1CCB63964();
        swift_bridgeObjectRelease();
        v91 = objc_msgSend(v89, sel_initWithString_, v90, v216[0]);

        v92 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v58;
        sub_1CC9E1E50((uint64_t)v91, 0xD000000000000013, 0x80000001CCB7F090, v92);
        v93 = v237;
        swift_bridgeObjectRelease();
        FMIPProductType.productInformation.getter((uint64_t)&v237);
        v94 = v240;
        if (v240)
        {
          v95 = v241;
          sub_1CCA04DDC(&v237, v240);
          (*(void (**)(uint64_t, uint64_t))(v95 + 40))(v94, v95);
          sub_1CCA01CA0((uint64_t)&v237);
        }
        else
        {
          sub_1CC9C3E84((uint64_t)&v237, &qword_1EF9E2888);
        }
        v96 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
        v97 = (void *)sub_1CCB63964();
        swift_bridgeObjectRelease();
        v98 = objc_msgSend(v96, sel_initWithString_, v97);

        v99 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v93;
        sub_1CC9E1E50((uint64_t)v98, 0x74636166756E616DLL, 0xEC00000072657275, v99);
        v100 = v237;
        swift_bridgeObjectRelease();
        v101 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
        swift_bridgeObjectRetain();
        v102 = (void *)sub_1CCB63964();
        swift_bridgeObjectRelease();
        v103 = objc_msgSend(v101, sel_initWithString_, v102);

        v104 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v100;
        sub_1CC9E1E50((uint64_t)v103, 0xD000000000000019, 0x80000001CCB7F0B0, v104);
        v88 = v237;
        swift_bridgeObjectRelease();
        sub_1CC9C3E84((uint64_t)v228, &qword_1EF9DFB90);
        v62 = v220;
LABEL_55:
        FMIPProductType.productInformation.getter((uint64_t)&v237);
        v105 = v240;
        if (v240)
        {
          v106 = v241;
          sub_1CCA04DDC(&v237, v240);
          v107 = (*(double (**)(uint64_t, uint64_t))(v106 + 56))(v105, v106);
          sub_1CCA01CA0((uint64_t)&v237);
          if (v107 >= 0.0)
          {
            if (v107 <= 5.0)
            {
              v108 = 5;
            }
            else
            {
              v111 = 10;
              v112 = 25;
              if (v107 <= 20.0)
                v112 = 20;
              if (v107 > 10.0)
                v111 = v112;
              if (v107 > 8.0)
                v108 = v111;
              else
                v108 = 8;
            }
          }
          else
          {
            v108 = 0;
          }
          v109 = v229;
          v110 = v219;
          v113 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v108);
          v114 = swift_isUniquelyReferenced_nonNull_native();
          v237 = v88;
          sub_1CC9E1E50((uint64_t)v113, 0x74696D736E617274, 0xED00007265776F50, v114);
          v88 = v237;
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_1CC9C3E84((uint64_t)&v237, &qword_1EF9E2888);
          v109 = v229;
          v110 = v219;
        }
        v115 = v223;
        sub_1CCB63640();
        v116 = v226;
        v117 = v227;
        (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v226, *MEMORY[0x1E0CB1140], v227);
        sub_1CCB635A4();
        v118 = sub_1CCB63658();
        v228 = *(uint64_t **)(v110 + 8);
        ((void (*)(char *, uint64_t))v228)(v109, v230);
        (*(void (**)(char *, uint64_t))(v62 + 8))(v116, v117);
        (*(void (**)(char *, uint64_t))(v224 + 8))(v115, v225);
        v119 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v118);
        v120 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v88;
        sub_1CC9E1E50((uint64_t)v119, 0x6144664F656D6974, 0xE900000000000079, v120);
        v121 = v237;
        swift_bridgeObjectRelease();
        v122 = v234;
        v123 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *((unsigned __int8 *)v234 + 296));
        v124 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v121;
        sub_1CC9E1E50((uint64_t)v123, 0x4C79726574746162, 0xEC0000006C657665, v124);
        v125 = v237;
        swift_bridgeObjectRelease();
        sub_1CC9C30A8(0, &qword_1EF9E6650);
        v126 = sub_1CCB63E14();
        v127 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v125;
        sub_1CC9E1E50(v126, 0x5379726574746162, 0xED00007375746174, v127);
        v128 = v237;
        swift_bridgeObjectRelease();
        v129 = *(int *)(v232 + 76);
        v130 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, (*(_QWORD *)((char *)v122 + v129) >> 3) & 1);
        v131 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v128;
        sub_1CC9E1E50((uint64_t)v130, 0x65646F4D74736F6CLL, 0xEF64656C62616E45, v131);
        v132 = v237;
        swift_bridgeObjectRelease();
        v133 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, (*(_QWORD *)((char *)v122 + v129) >> 8) & 1);
        v134 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v132;
        sub_1CC9E1E50((uint64_t)v133, 0xD000000000000016, 0x80000001CCB7F160, v134);
        v135 = v237;
        swift_bridgeObjectRelease();
        v136 = sub_1CCB63E14();
        v137 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v135;
        sub_1CC9E1E50(v136, 0x7453656369766564, 0xEC00000073757461, v137);
        v138 = v237;
        swift_bridgeObjectRelease();
        v139 = sub_1CCB63DD8();
        v140 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v138;
        sub_1CC9E1E50(v139, 0x6544736968547369, 0xEC00000065636976, v140);
        v141 = v237;
        swift_bridgeObjectRelease();
        v142 = sub_1CCB63DD8();
        v143 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v141;
        sub_1CC9E1E50(v142, 0x6465726168537369, 0xEE00656369766544, v143);
        v144 = v237;
        swift_bridgeObjectRelease();
        v145 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, (*(_QWORD *)((char *)v122 + v129) >> 6) & 1);
        v146 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v144;
        sub_1CC9E1E50((uint64_t)v145, 0x6E6E6F4354427369, 0xED00006465746365, v146);
        v147 = v237;
        swift_bridgeObjectRelease();
        v148 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, (*(_QWORD *)((char *)v122 + v129) >> 7) & 1);
        v149 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v147;
        sub_1CC9E1E50((uint64_t)v148, 0x697461636F4C7369, 0xEA0000000000676ELL, v149);
        v150 = v237;
        swift_bridgeObjectRelease();
        v151 = sub_1CCB63DD8();
        v152 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v150;
        sub_1CC9E1E50(v151, 0x6C69617465446E69, 0xEC00000077656956, v152);
        v153 = v237;
        swift_bridgeObjectRelease();
        p_type = (char **)(&stru_1E8912FF0 + 16);
        if (v217)
        {
          v155 = v235 >> 24;
          LOBYTE(v237) = BYTE3(v235);
          FMIPLocationType.rawValue.getter();
          v156 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
          v157 = (void *)sub_1CCB63964();
          swift_bridgeObjectRelease();
          v158 = objc_msgSend(v156, sel_initWithString_, v157);

          v159 = swift_isUniquelyReferenced_nonNull_native();
          v237 = v153;
          sub_1CC9E1E50((uint64_t)v158, 0x6E6F697461636F6CLL, 0xEE00656372756F53, v159);
          v160 = v237;
          swift_bridgeObjectRelease();
          LOBYTE(v237) = v155;
          v161 = v230;
          FMIPLocationType.rawValue.getter();
          v162 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
          v163 = (void *)sub_1CCB63964();
          swift_bridgeObjectRelease();
          v164 = objc_msgSend(v162, sel_initWithString_, v163);

          v165 = swift_isUniquelyReferenced_nonNull_native();
          v237 = v160;
          sub_1CC9E1E50((uint64_t)v164, 0xD000000000000017, 0x80000001CCB7F020, v165);
          v166 = v237;
          swift_bridgeObjectRelease();
          v167 = v216[0];
          objc_msgSend(v167, sel_horizontalAccuracy);
          v169 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, sub_1CCB50BC0(v168));
          v170 = swift_isUniquelyReferenced_nonNull_native();
          v237 = v166;
          sub_1CC9E1E50((uint64_t)v169, 0xD00000000000001ALL, 0x80000001CCB7F140, v170);
          v171 = v237;
          swift_bridgeObjectRelease();
          v172 = v229;
          sub_1CCB635A4();
          v173 = objc_msgSend(v167, sel_timestamp);
          v174 = v221;
          sub_1CCB63580();

          sub_1CCB63520();
          v176 = v175;
          v177 = v228;
          ((void (*)(char *, uint64_t))v228)(v174, v161);
          ((void (*)(char *, uint64_t))v177)(v172, v161);
          v178 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), (SEL)&FMIPLockResponse.ivar_base_start + 2, sub_1CCB50CD0(v176));
          v179 = swift_isUniquelyReferenced_nonNull_native();
          v237 = v171;
          sub_1CC9E1E50((uint64_t)v178, 0x6E6F697461636F6CLL, 0xEB00000000656741, v179);
          v180 = v237;
          swift_bridgeObjectRelease();
          v181 = sub_1CCB63DD8();
          v182 = swift_isUniquelyReferenced_nonNull_native();
          v237 = v180;
          sub_1CC9E1E50(v181, 0x65736F7078457369, 0xE900000000000064, v182);
          v183 = v237;
          swift_bridgeObjectRelease();
          objc_msgSend(v167, sel_horizontalAccuracy);
          v185 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), (SEL)&FMIPLockResponse.ivar_base_start + 2, sub_1CCB50BC0(v184));
          v186 = swift_isUniquelyReferenced_nonNull_native();
          v237 = v183;
          sub_1CC9E1E50((uint64_t)v185, 0xD000000000000023, 0x80000001CCB7F060, v186);
          v187 = v237;
          swift_bridgeObjectRelease();
          sub_1CCB635A4();
          v188 = objc_msgSend(v167, sel_timestamp);
          sub_1CCB63580();

          sub_1CCB63520();
          v190 = v189;
          ((void (*)(char *, uint64_t))v177)(v174, v161);
          ((void (*)(char *, uint64_t))v177)(v172, v161);
          v191 = 0x1E0CB3000uLL;
          v192 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), (SEL)&FMIPLockResponse.ivar_base_start + 2, sub_1CCB50CD0(v190));
          v193 = swift_isUniquelyReferenced_nonNull_native();
          v237 = v187;
          sub_1CC9E1E50((uint64_t)v192, 0xD000000000000014, 0x80000001CCB7F040, v193);
          v53 = v237;

          swift_bridgeObjectRelease();
          v194 = v233;
          p_type = &stru_1E8912FF0.type;
          v195 = v231;
          if (!v231)
          {
LABEL_72:

            return v53;
          }
        }
        else
        {
          v191 = 0x1E0CB3000;
          v214 = sub_1CCB63DD8();
          v215 = swift_isUniquelyReferenced_nonNull_native();
          v237 = v153;
          sub_1CC9E1E50(v214, 0x65736F7078457369, 0xE900000000000064, v215);
          v53 = v237;
          swift_bridgeObjectRelease();
          v174 = v221;
          v194 = v233;
          v177 = v228;
          v195 = v231;
          if (!v231)
            goto LABEL_72;
        }
        LOBYTE(v237) = BYTE3(v218);
        FMIPLocationType.rawValue.getter();
        v196 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
        v197 = (void *)sub_1CCB63964();
        swift_bridgeObjectRelease();
        v198 = objc_msgSend(v196, sel_initWithString_, v197);

        v199 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v53;
        sub_1CC9E1E50((uint64_t)v198, 0xD00000000000001ALL, 0x80000001CCB7F120, v199);
        v200 = v237;
        swift_bridgeObjectRelease();
        v201 = v195;
        objc_msgSend(v201, sel_horizontalAccuracy);
        v203 = objc_msgSend(objc_allocWithZone(*(Class *)(v191 + 2024)), (SEL)&FMIPLockResponse.ivar_base_start + 2, sub_1CCB50BC0(v202));
        v204 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v200;
        sub_1CC9E1E50((uint64_t)v203, 0xD000000000000026, 0x80000001CCB7F0F0, v204);
        v205 = v237;
        swift_bridgeObjectRelease();
        v206 = v229;
        sub_1CCB635A4();
        v207 = objc_msgSend(v201, p_type[462]);
        sub_1CCB63580();

        sub_1CCB63520();
        v209 = v208;
        v210 = v230;
        ((void (*)(char *, uint64_t))v177)(v174, v230);
        ((void (*)(char *, uint64_t))v177)(v206, v210);
        v211 = objc_msgSend(objc_allocWithZone(*(Class *)(v191 + 2024)), (SEL)&FMIPLockResponse.ivar_base_start + 2, sub_1CCB50CD0(v209));
        v212 = swift_isUniquelyReferenced_nonNull_native();
        v237 = v205;
        sub_1CC9E1E50((uint64_t)v211, 0xD000000000000017, 0x80000001CCB7F0D0, v212);
        v53 = v237;

        swift_bridgeObjectRelease();
        v194 = v233;
        goto LABEL_72;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1CCA37448(*v59, v59[1], v59[2], v59[3]);
    }
    FMIPProductType.productInformation.getter((uint64_t)&v237);
    v61 = v240;
    v62 = v220;
    if (v240)
    {
      v63 = v241;
      sub_1CCA04DDC(&v237, v240);
      v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 32))(v61, v63);
      v66 = v65;
      swift_bridgeObjectRelease();
      if ((v66 & 0x2000000000000000) != 0)
        v67 = HIBYTE(v66) & 0xF;
      else
        v67 = v64 & 0xFFFFFFFFFFFFLL;
      sub_1CCA01CA0((uint64_t)&v237);
      if (!v67)
        goto LABEL_46;
    }
    else
    {
      sub_1CC9C3E84((uint64_t)&v237, &qword_1EF9E2888);
    }
    FMIPProductType.productInformation.getter((uint64_t)&v237);
    v70 = v240;
    if (v240)
    {
      v71 = v241;
      sub_1CCA04DDC(&v237, v240);
      (*(void (**)(uint64_t, uint64_t))(v71 + 32))(v70, v71);
      sub_1CCA01CA0((uint64_t)&v237);
    }
    else
    {
      sub_1CC9C3E84((uint64_t)&v237, &qword_1EF9E2888);
    }
LABEL_46:
    v72 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
    v73 = (void *)sub_1CCB63964();
    swift_bridgeObjectRelease();
    v74 = objc_msgSend(v72, sel_initWithString_, v73, v216[0]);

    v75 = swift_isUniquelyReferenced_nonNull_native();
    v237 = v58;
    sub_1CC9E1E50((uint64_t)v74, 0x6D614E6C65646F6DLL, 0xE900000000000065, v75);
    v76 = v237;
    swift_bridgeObjectRelease();
    FMIPProductType.productInformation.getter((uint64_t)&v237);
    v77 = v240;
    if (v240)
    {
      v78 = v241;
      sub_1CCA04DDC(&v237, v240);
      (*(void (**)(uint64_t, uint64_t))(v78 + 40))(v77, v78);
      sub_1CCA01CA0((uint64_t)&v237);
    }
    else
    {
      sub_1CC9C3E84((uint64_t)&v237, &qword_1EF9E2888);
    }
    v79 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
    v80 = (void *)sub_1CCB63964();
    swift_bridgeObjectRelease();
    v81 = objc_msgSend(v79, sel_initWithString_, v80);

    v82 = swift_isUniquelyReferenced_nonNull_native();
    v237 = v76;
    sub_1CC9E1E50((uint64_t)v81, 0x74636166756E616DLL, 0xEC00000072657275, v82);
    v83 = v237;
    swift_bridgeObjectRelease();
    v84 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
    swift_bridgeObjectRetain();
    v85 = (void *)sub_1CCB63964();
    swift_bridgeObjectRelease();
    v86 = objc_msgSend(v84, sel_initWithString_, v85);

    v87 = swift_isUniquelyReferenced_nonNull_native();
    v237 = v83;
    sub_1CC9E1E50((uint64_t)v86, 0x65566D6574737973, 0xED00006E6F697372, v87);
    v88 = v237;
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  LOWORD(v236[0]) = v27 & 0x101;
  BYTE2(v236[0]) = BYTE2(v27) & 1;
  BYTE3(v236[0]) = HIBYTE(v27);
  *(_QWORD *)&v236[1] = v22;
  v236[2] = v23;
  v43 = v31;
  v44 = v33;
  v45 = _s8FMIPCore12FMIPLocationV2eeoiySbAC_ACtFZ_0((double *)&v237, v236);
  v46 = v29;
  v47 = v238;

  v31 = v43;
  v29 = v46;
  if ((v45 & 1) == 0)
    goto LABEL_27;

  return v232;
}

uint64_t sub_1CCB52D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  BOOL v41;
  char v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  char *v54;

  v4 = type metadata accessor for FMIPItem();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v48 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v48 - v12;
  v14 = sub_1CCA14E90(&qword_1ED8A8C30);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for FMIPDevice();
  sub_1CC9EAB74(a1 + *(int *)(v17 + 128), (uint64_t)v16, &qword_1ED8A8C30);
  v18 = type metadata accessor for FMIPItemGroup();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v16, 1, v18) == 1)
  {
    sub_1CC9C3E84((uint64_t)v16, &qword_1ED8A8C30);
LABEL_33:
    v42 = 0;
    v43 = 0;
    return v43 | v42 & 1u;
  }
  v51 = v4;
  v19 = *((_QWORD *)v16 + 6);
  swift_bridgeObjectRetain();
  v20 = sub_1CCA0BF30((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItemGroup);
  MEMORY[0x1E0C80A78](v20);
  *(&v48 - 2) = a2;
  v21 = sub_1CCAE1024(sub_1CCB53D40, (uint64_t)(&v48 - 4), v19);
  swift_bridgeObjectRelease();
  if (!v21)
    goto LABEL_33;
  v48 = 0;
  v22 = *(_QWORD *)(v21 + 56);
  v52 = v21 + 56;
  v23 = 1 << *(_BYTE *)(v21 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & v22;
  v53 = (unint64_t)(v23 + 63) >> 6;
  v54 = v13;
  swift_bridgeObjectRetain();
  v49 = 0;
  v26 = 0;
  v27 = v51;
  v50 = 0;
  while (1)
  {
    if (v25)
    {
      v28 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      v29 = v28 | (v26 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v26++, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v26 >= v53)
      goto LABEL_34;
    v31 = *(_QWORD *)(v52 + 8 * v26);
    if (!v31)
      break;
LABEL_19:
    v25 = (v31 - 1) & v31;
    v29 = __clz(__rbit64(v31)) + (v26 << 6);
LABEL_20:
    v33 = v21;
    v34 = v5;
    v35 = *(_QWORD *)(v21 + 48) + *(_QWORD *)(v5 + 72) * v29;
    v36 = (uint64_t)v54;
    sub_1CCA0BEEC(v35, (uint64_t)v54, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CC9FED60(v36, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v37 = &v11[*(int *)(v27 + 64)];
    v38 = *((_QWORD *)v37 + 1);
    v39 = v37[32];
    sub_1CCA0BEEC((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    if (v38)
    {
      sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      __asm { BR              X9 }
    }
    v40 = &v8[*(int *)(v27 + 56)];
    v41 = *(_QWORD *)v40 == 1702060355 && *((_QWORD *)v40 + 1) == 0xE400000000000000;
    if (v41 || (sub_1CCB642A0() & 1) != 0)
    {
      sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v5 = v34;
      v21 = v33;
      v50 = 1;
    }
    else
    {
      sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v5 = v34;
      v21 = v33;
    }
  }
  v32 = v26 + 1;
  if (v26 + 1 >= v53)
    goto LABEL_34;
  v31 = *(_QWORD *)(v52 + 8 * v32);
  if (v31)
    goto LABEL_18;
  v32 = v26 + 2;
  if (v26 + 2 >= v53)
    goto LABEL_34;
  v31 = *(_QWORD *)(v52 + 8 * v32);
  if (v31)
  {
LABEL_18:
    v26 = v32;
    goto LABEL_19;
  }
  v32 = v26 + 3;
  if (v26 + 3 < v53)
  {
    v31 = *(_QWORD *)(v52 + 8 * v32);
    if (!v31)
    {
      while (1)
      {
        v26 = v32 + 1;
        if (__OFADD__(v32, 1))
          break;
        if (v26 >= v53)
          goto LABEL_34;
        v31 = *(_QWORD *)(v52 + 8 * v26);
        ++v32;
        if (v31)
          goto LABEL_19;
      }
LABEL_43:
      __break(1u);
      JUMPOUT(0x1CCB531C8);
    }
    goto LABEL_18;
  }
LABEL_34:
  swift_release();
  v44 = *(_QWORD *)(v21 + 16);
  swift_bridgeObjectRelease();
  if ((v44 == 1) | v50 & 1)
    v45 = 0x10000;
  else
    v45 = 0;
  if ((v49 & 1) != 0)
    v46 = 256;
  else
    v46 = 0;
  v43 = v45 | v46;
  v42 = BYTE4(v49);
  return v43 | v42 & 1u;
}

uint64_t _s8FMIPCore13FMIPAnalyticsV26itemGroupSpecificEventInfo6device0cD00C021primaryPartIdentifierSDySSSo8NSObjectCGAA10FMIPDeviceV_AA08FMIPItemD0VAA0N0VSSSgtFZ_0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  void *v49;
  id v50;
  unint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v53;
  id v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  id v62;
  void *v63;
  id v64;
  char v65;
  uint64_t v66;
  char v67;
  id v68;
  char v69;
  uint64_t v70;
  id v71;
  char v72;
  uint64_t v73;
  id v74;
  void *v75;
  id v76;
  char v77;
  uint64_t v78;
  char *v79;
  id v80;
  char *v81;
  double v82;
  double v83;
  void (*v84)(char *, uint64_t);
  char *v85;
  uint64_t v86;
  id v87;
  char v88;
  uint64_t v89;
  double v90;
  id v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  char v97;
  uint64_t v98;
  id v99;
  char v100;
  uint64_t v101;
  id v102;
  char v103;
  uint64_t v104;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  char *v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;

  v117 = a3;
  v118 = a4;
  v115 = a1;
  v7 = sub_1CCB635B0();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v107 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v106 = (char *)&v106 - v11;
  v110 = type metadata accessor for FMIPDevice();
  MEMORY[0x1E0C80A78](v110);
  v13 = (char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for FMIPItem();
  v14 = *(_QWORD *)(v116 - 8);
  v15 = MEMORY[0x1E0C80A78](v116);
  v112 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v106 - v17;
  v19 = sub_1CCA14E90((uint64_t *)&unk_1EF9DF580);
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v106 - v23;
  v25 = sub_1CC9C2414(MEMORY[0x1E0DEE9D8]);
  v111 = a2;
  v26 = a2[5];
  v27 = *(_QWORD *)(v26 + 16);
  v113 = v24;
  v109 = v7;
  v108 = v8;
  v114 = v25;
  if (v27)
  {
    v28 = v26 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v29 = *(_QWORD *)(v14 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1CCA0BEEC(v28, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if (a5)
      {
        v30 = *((_QWORD *)v18 + 44) == v118 && *((_QWORD *)v18 + 45) == a5;
        if (v30 || (sub_1CCB642A0() & 1) != 0)
          break;
      }
      sub_1CCA0BF30((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v28 += v29;
      if (!--v27)
        goto LABEL_12;
    }
    v31 = (uint64_t)v113;
    sub_1CC9FED60((uint64_t)v18, (uint64_t)v113, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    v32 = v116;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v31, 0, 1, v116);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_12:
    v31 = (uint64_t)v113;
    v32 = v116;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v113, 1, 1, v116);
    swift_bridgeObjectRelease();
    if (!a5)
    {
      v43 = *(_QWORD *)(v115 + 272);
      v122 = *(_OWORD *)(v115 + 256);
      v123 = v43;
      v44 = *(_QWORD *)(v115 + 296);
      v120 = *(_OWORD *)(v115 + 280);
      v121 = v44;
      v45 = (*(_QWORD *)(v115 + 216) >> 5) & 1;
      v46 = v115 + *(int *)(v110 + 128);
      v119 = *(_BYTE *)(v115 + 80);
      sub_1CCA11CFC((uint64_t *)&v122, (uint64_t *)&v120, v45, v46, (unsigned __int8 *)&v119, (double *)&v124);
      v37 = v125;
      v110 = v124;
      v35 = (uint64_t)v112;
      goto LABEL_19;
    }
  }
  sub_1CC9EAB74(v31, (uint64_t)v22, (uint64_t *)&unk_1EF9DF580);
  v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v22, 1, v32);
  v34 = v115;
  v35 = (uint64_t)v112;
  if (v33 == 1)
  {
    sub_1CC9C3E84((uint64_t)v22, (uint64_t *)&unk_1EF9DF580);
    sub_1CCA0BEEC(v34, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  }
  else
  {
    v36 = *((_QWORD *)v22 + 48);
    v37 = (id)*((_QWORD *)v22 + 49);
    v38 = v37;
    sub_1CCA0BF30((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    sub_1CCA0BEEC(v34, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    if (v37)
    {
      v110 = v36;
      sub_1CCA0BF30((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      goto LABEL_19;
    }
  }
  v39 = *((_QWORD *)v13 + 34);
  v122 = *((_OWORD *)v13 + 16);
  v123 = v39;
  v40 = *((_QWORD *)v13 + 37);
  v120 = *(_OWORD *)(v13 + 280);
  v121 = v40;
  v41 = (*((_QWORD *)v13 + 27) >> 5) & 1;
  v42 = (uint64_t)&v13[*(int *)(v110 + 128)];
  v119 = v13[80];
  sub_1CCA11CFC((uint64_t *)&v122, (uint64_t *)&v120, v41, v42, (unsigned __int8 *)&v119, (double *)&v124);
  sub_1CCA0BF30((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v37 = v125;
  v110 = v124;
LABEL_19:
  v47 = v111;
  v48 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  swift_bridgeObjectRetain();
  v49 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v50 = objc_msgSend(v48, sel_initWithString_, v49);

  v51 = v114;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v124 = v51;
  sub_1CC9E1E50((uint64_t)v50, 0x6D614E6C65646F6DLL, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
  v53 = v124;
  swift_bridgeObjectRelease();
  v54 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, (*v47 >> 8) & 1);
  v55 = swift_isUniquelyReferenced_nonNull_native();
  v124 = v53;
  sub_1CC9E1E50((uint64_t)v54, 0x6E694654426E6163, 0xEC000000676E6964, v55);
  v56 = v124;
  swift_bridgeObjectRelease();
  v57 = v116;
  v58 = v117 + *(int *)(v116 + 64);
  v59 = *(_QWORD *)(v58 + 8);
  v60 = *(unsigned __int8 *)(v58 + 32);
  sub_1CCA0BEEC(v117, v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  if (v59)
  {
    sub_1CCA0BF30(v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
    __asm { BR              X9 }
  }
  v61 = (_QWORD *)(v35 + *(int *)(v57 + 56));
  if (*v61 != 1702060355 || v61[1] != 0xE400000000000000)
    sub_1CCB642A0();
  sub_1CCA0BF30(v35, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
  v62 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v63 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v64 = objc_msgSend(v62, sel_initWithString_, v63);

  v65 = swift_isUniquelyReferenced_nonNull_native();
  v124 = v56;
  sub_1CC9E1E50((uint64_t)v64, 0x6570795474726170, 0xE800000000000000, v65);
  v66 = v124;
  swift_bridgeObjectRelease();
  if (a5)
  {
    if (*(_QWORD *)(v117 + 352) == v118 && *(_QWORD *)(v117 + 360) == a5)
      v67 = 1;
    else
      v67 = sub_1CCB642A0();
  }
  else
  {
    v67 = 0;
  }
  v68 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v67 & 1);
  v69 = swift_isUniquelyReferenced_nonNull_native();
  v124 = v66;
  sub_1CC9E1E50((uint64_t)v68, 0x72616D6972507369, 0xED00007472615079, v69);
  v70 = v124;
  swift_bridgeObjectRelease();
  v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, a5 != 0);
  v72 = swift_isUniquelyReferenced_nonNull_native();
  v124 = v70;
  sub_1CC9E1E50((uint64_t)v71, 0xD000000000000015, 0x80000001CCB7EFE0, v72);
  v73 = v124;
  swift_bridgeObjectRelease();
  if (v37)
  {
    LOBYTE(v124) = BYTE3(v110);
    FMIPLocationType.rawValue.getter();
    v74 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
    v75 = (void *)sub_1CCB63964();
    swift_bridgeObjectRelease();
    v76 = objc_msgSend(v74, sel_initWithString_, v75);

    v77 = swift_isUniquelyReferenced_nonNull_native();
    v124 = v73;
    sub_1CC9E1E50((uint64_t)v76, 0xD000000000000017, 0x80000001CCB7F020, v77);
    v78 = v124;
    swift_bridgeObjectRelease();
    v37 = v37;
    v79 = v106;
    sub_1CCB635A4();
    v80 = objc_msgSend(v37, sel_timestamp);
    v81 = v107;
    sub_1CCB63580();

    sub_1CCB63520();
    v83 = v82;
    v84 = *(void (**)(char *, uint64_t))(v108 + 8);
    v85 = v81;
    v86 = v109;
    v84(v85, v109);
    v84(v79, v86);
    v87 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, sub_1CCB50CD0(v83));
    v88 = swift_isUniquelyReferenced_nonNull_native();
    v124 = v78;
    sub_1CC9E1E50((uint64_t)v87, 0xD000000000000014, 0x80000001CCB7F040, v88);
    v89 = v124;
    swift_bridgeObjectRelease();
    objc_msgSend(v37, sel_horizontalAccuracy);
    v91 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, sub_1CCB50BC0(v90));
    v92 = swift_isUniquelyReferenced_nonNull_native();
    v124 = v89;
    sub_1CC9E1E50((uint64_t)v91, 0xD000000000000023, 0x80000001CCB7F060, v92);
    v73 = v124;

    swift_bridgeObjectRelease();
  }
  v93 = sub_1CCB52D48(v115, v117);
  v94 = (v93 >> 8) & 1;
  v95 = HIWORD(v93) & 1;
  v96 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v93 & 1);
  v97 = swift_isUniquelyReferenced_nonNull_native();
  v124 = v73;
  sub_1CC9E1E50((uint64_t)v96, 0x57646570756F7267, 0xEF7466654C687469, v97);
  v98 = v124;
  swift_bridgeObjectRelease();
  v99 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v94);
  v100 = swift_isUniquelyReferenced_nonNull_native();
  v124 = v98;
  sub_1CC9E1E50((uint64_t)v99, 0xD000000000000010, 0x80000001CCB7F000, v100);
  v101 = v124;
  swift_bridgeObjectRelease();
  v102 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithBool_, v95);
  v103 = swift_isUniquelyReferenced_nonNull_native();
  v124 = v101;
  sub_1CC9E1E50((uint64_t)v102, 0x57646570756F7267, 0xEF65736143687469, v103);
  v104 = v124;

  swift_bridgeObjectRelease();
  sub_1CC9C3E84(v31, (uint64_t *)&unk_1EF9DF580);
  return v104;
}

ValueMetadata *type metadata accessor for FMIPAnalytics()
{
  return &type metadata for FMIPAnalytics;
}

uint64_t sub_1CCB53D40(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];

  v2 = *a1;
  v4[2] = *(_QWORD *)(v1 + 16);
  return sub_1CCA713B0((uint64_t (*)(char *))sub_1CCB53D78, (char)v4, v2) & 1;
}

uint64_t sub_1CCB53D78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(a1 + 352) == *(_QWORD *)(v2 + 352) && *(_QWORD *)(a1 + 360) == *(_QWORD *)(v2 + 360))
    return 1;
  else
    return sub_1CCB642A0() & 1;
}

uint64_t sub_1CCB53DD0()
{
  return sub_1CCB53DDC((uint64_t (*)(unint64_t, _QWORD, _QWORD))sub_1CCB50370);
}

uint64_t sub_1CCB53DDC(uint64_t (*a1)(unint64_t, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(type metadata accessor for FMIPDevice() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (_QWORD *)(v1 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a1(v1 + v3, *v4, v4[1]);
}

uint64_t sub_1CCB53E30()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1CCB53E74(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = sub_1CCA14E90(&qword_1ED8A7170);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FMIPDevice();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
    goto LABEL_4;
  v11 = v2 + OBJC_IVAR____TtC8FMIPCore20FMIPDemoDataInjector_hostDevice;
  swift_beginAccess();
  sub_1CCA247A8(v11, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1CCA246DC((uint64_t)v6);
LABEL_4:
    v12 = MEMORY[0x1E0DEE9D8];
    goto LABEL_6;
  }
  sub_1CC9F73E8((uint64_t)v6, (uint64_t)v10);
  sub_1CCA14E90(&qword_1ED8A7FB0);
  v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1CCB677E0;
  sub_1CC9F73E8((uint64_t)v10, v12 + v13);
LABEL_6:
  type metadata accessor for FMIPInitClientRequest();
  if (swift_dynamicCastClass())
  {
    v48 = sub_1CCABC130(v12);
    swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(v2 + 16);
    v15 = *(_QWORD *)(v14 + 24);
    v46 = *(_QWORD *)(v14 + 16);
    v47 = v15;
    v16 = *(_QWORD *)(v14 + 40);
    v45 = *(_QWORD *)(v14 + 32);
    v17 = *(_BYTE *)(v14 + 48);
    v18 = *(unsigned __int8 *)(v14 + 49);
    v43 = *(unsigned __int8 *)(v14 + 50);
    v44 = v18;
    v19 = *(_BYTE *)(v14 + 51);
    v21 = *(_QWORD *)(v14 + 56);
    v20 = *(_QWORD *)(v14 + 64);
    v22 = *(_QWORD *)(v14 + 72);
    v23 = *(_QWORD *)(v14 + 80);
    v24 = *(_QWORD *)(v14 + 96);
    v41 = *(_QWORD *)(v14 + 88);
    v42 = v22;
    v25 = *(_QWORD *)(v14 + 112);
    type metadata accessor for FMIPUserInfoResponseFragment();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v46;
    *(_QWORD *)(v26 + 24) = v15;
    *(_QWORD *)(v26 + 32) = v45;
    *(_QWORD *)(v26 + 40) = v16;
    *(_BYTE *)(v26 + 48) = v17;
    *(_BYTE *)(v26 + 49) = v44;
    *(_BYTE *)(v26 + 50) = v43;
    *(_BYTE *)(v26 + 51) = v19;
    *(_QWORD *)(v26 + 56) = v21;
    *(_QWORD *)(v26 + 64) = v20;
    *(_QWORD *)(v26 + 72) = v42;
    *(_QWORD *)(v26 + 80) = v23;
    *(_QWORD *)(v26 + 88) = v41;
    *(_QWORD *)(v26 + 96) = v24;
    *(_QWORD *)(v26 + 104) = v25;
    type metadata accessor for FMIPInitClientResponse();
  }
  else
  {
    type metadata accessor for FMIPRefreshClientRequest();
    if (!swift_dynamicCastClass())
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v48 = sub_1CCABC130(v12);
    swift_bridgeObjectRelease();
    v27 = *(_QWORD *)(v2 + 16);
    v28 = *(_QWORD *)(v27 + 24);
    v46 = *(_QWORD *)(v27 + 16);
    v47 = v28;
    v29 = *(_QWORD *)(v27 + 40);
    v45 = *(_QWORD *)(v27 + 32);
    v30 = *(_BYTE *)(v27 + 48);
    v31 = *(unsigned __int8 *)(v27 + 49);
    v43 = *(unsigned __int8 *)(v27 + 50);
    v44 = v31;
    v32 = *(_BYTE *)(v27 + 51);
    v34 = *(_QWORD *)(v27 + 56);
    v33 = *(_QWORD *)(v27 + 64);
    v35 = *(_QWORD *)(v27 + 72);
    v36 = *(_QWORD *)(v27 + 80);
    v37 = *(_QWORD *)(v27 + 96);
    v41 = *(_QWORD *)(v27 + 88);
    v42 = v35;
    v38 = *(_QWORD *)(v27 + 112);
    type metadata accessor for FMIPUserInfoResponseFragment();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v46;
    *(_QWORD *)(v26 + 24) = v28;
    *(_QWORD *)(v26 + 32) = v45;
    *(_QWORD *)(v26 + 40) = v29;
    *(_BYTE *)(v26 + 48) = v30;
    *(_BYTE *)(v26 + 49) = v44;
    *(_BYTE *)(v26 + 50) = v43;
    *(_BYTE *)(v26 + 51) = v32;
    *(_QWORD *)(v26 + 56) = v34;
    *(_QWORD *)(v26 + 64) = v33;
    *(_QWORD *)(v26 + 72) = v42;
    *(_QWORD *)(v26 + 80) = v36;
    *(_QWORD *)(v26 + 88) = v41;
    *(_QWORD *)(v26 + 96) = v37;
    *(_QWORD *)(v26 + 104) = v38;
    type metadata accessor for FMIPRefreshClientResponse();
  }
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 56) = v48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v39 + 16) = 0;
  *(_QWORD *)(v39 + 24) = v26;
  *(_QWORD *)(v39 + 32) = 0;
  *(_BYTE *)(v39 + 40) = 0;
  *(_QWORD *)(v39 + 48) = 200;
  return v39;
}

_QWORD *sub_1CCB541E8(uint64_t a1, __int128 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;

  v3 = v2;
  v18 = a1;
  v19 = a2;
  v4 = sub_1CCB63D84();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1CCB63D6C();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v8);
  v10 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v10);
  v2[3] = 0;
  swift_unknownObjectWeakInit();
  v17 = sub_1CC9F0ECC();
  sub_1CCB63844();
  v20 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, v9, MEMORY[0x1E0DEF828]);
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF8D0], v4);
  v11 = sub_1CCB63DB4();
  v2[12] = MEMORY[0x1E0DEE9E0];
  v12 = v18;
  v2[4] = v11;
  v2[5] = v12;
  sub_1CCA21ACC(v19, (uint64_t)(v2 + 6));
  type metadata accessor for FMIPDemoDataInjector();
  v13 = swift_allocObject();
  v14 = v13 + OBJC_IVAR____TtC8FMIPCore20FMIPDemoDataInjector_hostDevice;
  v15 = type metadata accessor for FMIPDevice();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  *(_QWORD *)(v13 + 16) = v12;
  v3[11] = v13;
  swift_retain();
  return v3;
}

uint64_t sub_1CCB54434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v9 = sub_1CCB63820();
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1CCB63868();
  v12 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v4 + 32);
  v15 = swift_allocObject();
  swift_weakInit();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a4;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = v15;
  aBlock[4] = sub_1CCB55EF0;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E8901ED0;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1CCB63844();
  v22 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v14, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v20);
  swift_release();
  return swift_release();
}

uint64_t sub_1CCB54670(uint64_t a1, void (*a2)(_QWORD, void *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t Strong;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int (*v39)(_QWORD *, uint64_t, uint64_t);
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(_QWORD, void *);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  void *v85;
  _BYTE *v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  void (*v97)(_QWORD, void *);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[3];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(_QWORD *, _QWORD *);
  _QWORD *v108;
  uint64_t v109;

  v10 = sub_1CCA14E90(&qword_1ED8A7170);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (uint64_t *)((char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x1E0C80A78](v11);
  v96 = (uint64_t *)((char *)&v92 - v15);
  MEMORY[0x1E0C80A78](v14);
  v17 = (uint64_t *)((char *)&v92 - v16);
  v18 = a4 + 16;
  if (qword_1ED8AA630 != -1)
    swift_once();
  v19 = sub_1CCB637FC();
  v20 = sub_1CCA16C20(v19, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v98 = v20;
  v21 = sub_1CCB637D8();
  v22 = sub_1CCB63D48();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc();
    v99 = v18;
    v95 = a3;
    v97 = a2;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc();
    v94 = v13;
    v26 = v25;
    v100[0] = v25;
    *(_DWORD *)v24 = 136315138;
    v27 = sub_1CCB643F0();
    v109 = sub_1CCA0CB60(v27, v28, v100);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v21, v22, "FMIPDemoInteractionController: Handling %s.", v24, 0xCu);
    swift_arrayDestroy();
    v29 = v26;
    v13 = v94;
    MEMORY[0x1D17B214C](v29, -1, -1);
    v30 = v24;
    a2 = v97;
    a3 = v95;
    v18 = v99;
    MEMORY[0x1D17B214C](v30, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v31 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_retain();
  swift_retain();
  swift_release();
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = a5;
  v32[3] = v31;
  v32[4] = a2;
  v32[5] = a3;
  v32[6] = a1;
  v33 = (_QWORD *)swift_allocObject();
  v33[2] = a5;
  v33[3] = a2;
  v33[4] = a3;
  v106 = a1;
  v107 = sub_1CCB55F48;
  v108 = v33;
  type metadata accessor for FMIPBaseRequest();
  sub_1CCB63E2C();
  swift_retain_n();
  swift_retain_n();
  sub_1CCA19B38(&qword_1EF9DFCB8);
  swift_getFunctionTypeMetadata2();
  swift_getTupleTypeMetadata2();
  sub_1CCA14E90(&qword_1EF9E6788);
  if (swift_dynamicCast())
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      sub_1CC9EBC94(Strong + 48, (uint64_t)v100);
      swift_release();
      v35 = v101;
      v36 = v102;
      sub_1CCA04DDC(v100, v101);
      (*(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t))(v36 + 56))(a1, sub_1CCB55F38, v32, a5, v35, v36);
LABEL_9:
      swift_release();
      swift_release();
LABEL_10:
      swift_release();
      sub_1CCA01CA0((uint64_t)v100);
LABEL_67:
      swift_release();
      return swift_release();
    }
LABEL_65:
    swift_release();
    swift_release();
    goto LABEL_66;
  }
  swift_release();
  swift_release();
  v37 = (_QWORD *)swift_allocObject();
  v37[2] = a5;
  v37[3] = a2;
  v37[4] = a3;
  v106 = a1;
  v107 = sub_1CCB560B0;
  v108 = v37;
  swift_retain();
  swift_retain();
  sub_1CCA14E90(&qword_1EF9E6790);
  if (swift_dynamicCast())
  {
    v93 = a5;
    swift_release();
    v97 = (void (*)(_QWORD, void *))a1;
    swift_release();
    v95 = v105;
    sub_1CCA247A8(v104 + qword_1ED8AD600, (uint64_t)v17);
    v38 = type metadata accessor for FMIPDevice();
    v39 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48);
    if (v39(v17, 1, v38) == 1)
    {
      sub_1CCA246DC((uint64_t)v17);
      v94 = 0;
      v40 = 0;
    }
    else
    {
      v40 = v17[1];
      v94 = (_QWORD *)*v17;
      swift_bridgeObjectRetain();
      sub_1CC9F73AC((uint64_t)v17);
    }
    swift_beginAccess();
    v54 = swift_weakLoadStrong();
    v55 = v54;
    v99 = v18;
    if (v54)
    {
      v56 = *(_QWORD *)(v54 + 88);
      swift_retain();
      swift_release();
      v57 = v56 + OBJC_IVAR____TtC8FMIPCore20FMIPDemoDataInjector_hostDevice;
      swift_beginAccess();
      v58 = v57;
      v59 = v96;
      sub_1CCA247A8(v58, (uint64_t)v96);
      swift_release();
      if (v39(v59, 1, v38) == 1)
      {
        sub_1CCA246DC((uint64_t)v59);
        v60 = 0;
        v55 = 0;
        if (!v40)
        {
LABEL_33:
          if (v55)
            goto LABEL_39;
          goto LABEL_45;
        }
      }
      else
      {
        v68 = (uint64_t)v59;
        v60 = (_QWORD *)*v59;
        v55 = v59[1];
        swift_bridgeObjectRetain();
        sub_1CC9F73AC(v68);
        if (!v40)
          goto LABEL_33;
      }
    }
    else
    {
      v60 = 0;
      if (!v40)
        goto LABEL_33;
    }
    if (!v55)
    {
LABEL_39:
      swift_bridgeObjectRelease();
LABEL_40:
      swift_beginAccess();
      v69 = swift_weakLoadStrong();
      v70 = (uint64_t)v97;
      if (v69)
      {
        swift_retain();
        swift_release();
        v71 = sub_1CCB53E74(v70, 1);
        swift_release();
        if (v71)
        {
          v72 = swift_dynamicCastClass();
          if (v72)
          {
            v73 = v72;
            swift_retain();
            a2(v73, 0);
            swift_release_n();
            swift_release();
LABEL_51:
            swift_release();
            swift_release();
LABEL_60:
            swift_release();
LABEL_66:
            swift_release();
            goto LABEL_67;
          }
          swift_release();
        }
      }
      v82 = sub_1CCB637D8();
      v83 = sub_1CCB63D48();
      if (os_log_type_enabled(v82, v83))
      {
        v84 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v84 = 0;
        _os_log_impl(&dword_1CC9BF000, v82, v83, "FMIPDemoInteractionController: Unable to create a fake response for refresh request with selected device.", v84, 2u);
        MEMORY[0x1D17B214C](v84, -1, -1);
      }

      sub_1CCB55E84();
      v85 = (void *)swift_allocError();
      *v86 = 1;
      a2(0, v85);
      swift_release();
      swift_release();
      swift_release();

      goto LABEL_60;
    }
    if (v94 == v60 && v40 == v55)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v74 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v74 & 1) == 0)
        goto LABEL_40;
    }
LABEL_45:
    swift_beginAccess();
    v75 = swift_weakLoadStrong();
    if (v75)
    {
      sub_1CC9EBC94(v75 + 48, (uint64_t)v100);
      swift_release();
      v76 = v101;
      v77 = v102;
      sub_1CCA04DDC(v100, v101);
      (*(void (**)(void (*)(_QWORD, void *), uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t, uint64_t))(v77 + 56))(v97, sub_1CCB55F38, v32, v93, v76, v77);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_10;
    }
    swift_release();
    goto LABEL_51;
  }
  swift_release();
  swift_release();
  v41 = (_QWORD *)swift_allocObject();
  v41[2] = a5;
  v41[3] = a2;
  v41[4] = a3;
  v106 = a1;
  v107 = sub_1CCB560B0;
  v108 = v41;
  sub_1CCA14E90(&qword_1EF9E6798);
  if (swift_dynamicCast())
  {
    v97 = a2;
    v95 = v105;
    v96 = (_QWORD *)v104;
    v43 = *(_QWORD *)(v104 + qword_1EF9FF780);
    v42 = *(_QWORD *)(v104 + qword_1EF9FF780 + 8);
    swift_beginAccess();
    v44 = swift_weakLoadStrong();
    if (v44)
    {
      v45 = *(_QWORD *)(v44 + 88);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      v46 = v45 + OBJC_IVAR____TtC8FMIPCore20FMIPDemoDataInjector_hostDevice;
      swift_beginAccess();
      sub_1CCA247A8(v46, (uint64_t)v13);
      swift_release();
      v47 = type metadata accessor for FMIPDevice();
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v13, 1, v47) != 1)
      {
        v79 = (uint64_t)v13;
        v80 = *v13;
        v81 = *(_QWORD *)(v79 + 8);
        swift_bridgeObjectRetain();
        sub_1CC9F73AC(v79);
        if (v43 == v80 && v42 == v81)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v87 = sub_1CCB642A0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v87 & 1) == 0)
            goto LABEL_18;
        }
        swift_beginAccess();
        v88 = swift_weakLoadStrong();
        if (v88)
        {
          sub_1CC9EBC94(v88 + 48, (uint64_t)v100);
          swift_release();
          v89 = v101;
          v90 = v102;
          sub_1CCA04DDC(v100, v101);
          (*(void (**)(uint64_t, void (*)(_QWORD, void *), uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(a1, v97, a3, a5, v89, v90);
          swift_release();
          swift_release();
          goto LABEL_9;
        }
        swift_release();
        swift_release();
        goto LABEL_65;
      }
      sub_1CCA246DC((uint64_t)v13);
      swift_bridgeObjectRelease();
    }
LABEL_18:
    swift_retain_n();
    v48 = sub_1CCB637D8();
    v49 = sub_1CCB63D48();
    if (os_log_type_enabled(v48, v49))
    {
      v99 = v18;
      v50 = (uint8_t *)swift_slowAlloc();
      v51 = swift_slowAlloc();
      v100[0] = v51;
      *(_DWORD *)v50 = 136315138;
      v52 = sub_1CCB643F0();
      v103 = sub_1CCA0CB60(v52, v53, v100);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v48, v49, "FMIPDemoInteractionController: Received %s for non-host device, which is unsupported in demo mode.", v50, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v51, -1, -1);
      MEMORY[0x1D17B214C](v50, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v78 = v97;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_1CCB5596C(v78);
      swift_release();
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_66;
  }
  swift_release();
  swift_release();
  swift_retain_n();
  v61 = sub_1CCB637D8();
  v62 = sub_1CCB63D48();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc();
    v64 = swift_slowAlloc();
    v99 = v18;
    v65 = v64;
    v100[0] = v64;
    *(_DWORD *)v63 = 136315138;
    v66 = sub_1CCB643F0();
    v95 = a3;
    v106 = sub_1CCA0CB60(v66, v67, v100);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v61, v62, "FMIPDemoInteractionController: Received %s, which is unsupported in demo mode.", v63, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v65, -1, -1);
    MEMORY[0x1D17B214C](v63, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_1CCB5596C(a2);
    swift_release();
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1CCB55628(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;

  if (a1)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_retain();
      swift_retain();
      swift_release();
      v9 = sub_1CCABBD48(a1);
      swift_release();
    }
    else
    {
      swift_retain();
      v9 = 0;
    }
    a4(v9, a2);
    swift_release();
    return swift_release();
  }
  else
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_retain();
      swift_release();
      v11 = sub_1CCB53E74(a6, 0);
      swift_release();
      if (v11)
      {
        v12 = swift_dynamicCastClass();
        if (v12)
        {
          v13 = v12;
          swift_retain();
          a4(v13, 0);
          return swift_release_n();
        }
        swift_release();
      }
    }
    if (a2)
    {
      swift_getErrorValue();
      v15 = sub_1CCB64300();
      v17 = v16;
    }
    else
    {
      v17 = 0xED0000726F727265;
      v15 = 0x206E776F6E6B6E75;
    }
    if (qword_1ED8AA630 != -1)
      swift_once();
    v18 = sub_1CCB637FC();
    sub_1CCA16C20(v18, (uint64_t)qword_1ED8AD7F8);
    swift_bridgeObjectRetain();
    v19 = sub_1CCB637D8();
    v20 = sub_1CCB63D48();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v23 = v22;
      *(_DWORD *)v21 = 136315138;
      swift_bridgeObjectRetain();
      sub_1CCA0CB60(v15, v17, &v23);
      sub_1CCB63E44();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1CC9BF000, v19, v20, "FMIPDemoInteractionController: Request failed due to %s.", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v22, -1, -1);
      MEMORY[0x1D17B214C](v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return ((uint64_t (*)(_QWORD, uint64_t))a4)(0, a2);
  }
}

void sub_1CCB5596C(void (*a1)(_QWORD, void *))
{
  void *v2;
  _BYTE *v3;

  sub_1CCB559D4();
  sub_1CCB55E84();
  v2 = (void *)swift_allocError();
  *v3 = 1;
  a1(0, v2);

}

uint64_t sub_1CCB559D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t ObjCClassFromMetadata;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t v32;

  v0 = sub_1CCA14E90(&qword_1ED8A8EE8);
  v1 = MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v32 - v4;
  type metadata accessor for FMLocalize();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v7 = (void *)objc_opt_self();
  v8 = objc_msgSend(v7, sel_bundleForClass_, ObjCClassFromMetadata);
  v9 = sub_1CCB63340();
  v11 = v10;

  v12 = objc_msgSend(v7, sel_bundleForClass_, ObjCClassFromMetadata);
  v13 = sub_1CCB63340();
  v15 = v14;

  v16 = sub_1CCB63490();
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v17(v5, 1, 1, v16);
  v17(v3, 1, 1, v16);
  type metadata accessor for FMIPAlert();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v9;
  v18[3] = v11;
  v18[4] = 0;
  v18[5] = 0;
  v18[6] = v13;
  v18[7] = v15;
  v19 = v32;
  v20 = (_QWORD *)((char *)v18 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonLabel);
  *v20 = 0;
  v20[1] = 0;
  sub_1CCA24AA4((uint64_t)v5, (uint64_t)v18 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_okButtonURL);
  sub_1CCA24AA4((uint64_t)v3, (uint64_t)v18 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonURL);
  *((_BYTE *)v18 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_type) = 0;
  v21 = MEMORY[0x1D17B2218](v19 + 16);
  if (!v21)
    return swift_release();
  v22 = v21;
  v23 = qword_1ED8AA630;
  swift_retain();
  if (v23 != -1)
    swift_once();
  v24 = sub_1CCB637FC();
  sub_1CCA16C20(v24, (uint64_t)qword_1ED8AD7F8);
  v25 = sub_1CCB637D8();
  v26 = sub_1CCB63D48();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1CC9BF000, v25, v26, "FMIPManager: didReceive server alert", v27, 2u);
    MEMORY[0x1D17B214C](v27, -1, -1);
  }

  v28 = v22 + OBJC_IVAR____TtC8FMIPCore11FMIPManager_delegate;
  swift_beginAccess();
  if (MEMORY[0x1D17B2218](v28))
  {
    v29 = *(_QWORD *)(v28 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v29 + 72))(v22, v18, ObjectType, v29);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
    swift_release();
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_1CCB55D70()
{
  uint64_t v0;

  sub_1CCA2F610(v0 + 16);

  swift_release();
  sub_1CCA01CA0(v0 + 48);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FMIPDemoInteractionController()
{
  return objc_opt_self();
}

uint64_t sub_1CCB55DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t sub_1CCB55E10()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1CCB55E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CCB54434(a1, a2, a3, a4);
}

uint64_t sub_1CCB55E3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  sub_1CCA04DDC((_QWORD *)(*(_QWORD *)v0 + 48), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

unint64_t sub_1CCB55E84()
{
  unint64_t result;

  result = qword_1EF9E6780;
  if (!qword_1EF9E6780)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75AC0, &type metadata for FMIPDemoInteractionController.Error);
    atomic_store(result, (unint64_t *)&qword_1EF9E6780);
  }
  return result;
}

uint64_t sub_1CCB55EC8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1CCB55EF0()
{
  uint64_t v0;

  return sub_1CCB54670(*(_QWORD *)(v0 + 24), *(void (**)(_QWORD, void *))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16));
}

uint64_t sub_1CCB55F04()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1CCB55F38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1CCB55628(a1, a2, *(_QWORD *)(v2 + 24), *(void (**)(uint64_t, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_1CCB55F48(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 24))(*a1, *a2);
}

uint64_t sub_1CCB55F70()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for FMIPDemoInteractionController.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCB55FE0 + 4 * byte_1CCB759D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCB56014 + 4 * asc_1CCB759D0[v4]))();
}

uint64_t sub_1CCB56014(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB5601C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB56024);
  return result;
}

uint64_t sub_1CCB56030(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB56038);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCB5603C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB56044(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPDemoInteractionController.Error()
{
  return &type metadata for FMIPDemoInteractionController.Error;
}

unint64_t sub_1CCB56064()
{
  unint64_t result;

  result = qword_1EF9E67A0;
  if (!qword_1EF9E67A0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75A98, &type metadata for FMIPDemoInteractionController.Error);
    atomic_store(result, (unint64_t *)&qword_1EF9E67A0);
  }
  return result;
}

FMIPCore::FMWindowStatePrefKeys_optional __swiftcall FMWindowStatePrefKeys.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  FMIPCore::FMWindowStatePrefKeys_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t FMWindowStatePrefKeys.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6956776F646E6977;
  else
    return 0x736F4D746E6F7266;
}

uint64_t sub_1CCB56168(char *a1, char *a2)
{
  return sub_1CCB1C7E4(*a1, *a2);
}

unint64_t sub_1CCB56178()
{
  unint64_t result;

  result = qword_1EF9E67A8;
  if (!qword_1EF9E67A8)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMWindowStatePrefKeys, &type metadata for FMWindowStatePrefKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E67A8);
  }
  return result;
}

uint64_t sub_1CCB561BC()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB56254()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB562C8()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMWindowStatePrefKeys_optional sub_1CCB5635C(Swift::String *a1)
{
  return FMWindowStatePrefKeys.init(rawValue:)(*a1);
}

void sub_1CCB56368(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x736F4D746E6F7266;
  if (*v1)
    v2 = 0x6956776F646E6977;
  v3 = 0xEF776F646E695774;
  if (*v1)
    v3 = 0xED0000656C626973;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t storeEnumTagSinglePayload for FMWindowStatePrefKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCB5640C + 4 * byte_1CCB75B05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCB56440 + 4 * byte_1CCB75B00[v4]))();
}

uint64_t sub_1CCB56440(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB56448(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB56450);
  return result;
}

uint64_t sub_1CCB5645C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB56464);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCB56468(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB56470(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMWindowStatePrefKeys()
{
  return &type metadata for FMWindowStatePrefKeys;
}

uint64_t type metadata accessor for FMIPNotifyRequest()
{
  uint64_t result;

  result = qword_1EF9E67B0;
  if (!qword_1EF9E67B0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1CCB564C8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1CCB56514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD v6[3];
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + qword_1EF9FF828);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPDeviceAction_device + 8);
  v7 = MEMORY[0x1E0DEA968];
  v6[0] = v2;
  v6[1] = v3;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1CCA06650((uint64_t)v6, 0x656369766564, 0xE600000000000000);
  v4 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore16FMIPNotifyAction_enabled);
  v7 = MEMORY[0x1E0DEAFA0];
  LOBYTE(v6[0]) = v4;
  sub_1CCA06650((uint64_t)v6, 0x646E756F46636F6CLL, 0xEF64656C62616E45);
  return swift_endAccess();
}

uint64_t sub_1CCB56600()
{
  return swift_release();
}

uint64_t sub_1CCB56610()
{
  sub_1CC9C785C();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB56650()
{
  return type metadata accessor for FMIPNotifyRequest();
}

uint64_t sub_1CCB56658(unsigned __int8 a1)
{
  return ((uint64_t (*)(void))((char *)sub_1CCB56674 + 4 * byte_1CCB75C20[a1]))();
}

void sub_1CCB56674(_QWORD *a1@<X8>)
{
  *a1 = 1261;
}

uint64_t storeEnumTagSinglePayload for FMIPDemoDeviceCategoryTemplate(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1CCB567EC + 4 * byte_1CCB75C2B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1CCB56820 + 4 * byte_1CCB75C26[v4]))();
}

uint64_t sub_1CCB56820(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB56828(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB56830);
  return result;
}

uint64_t sub_1CCB5683C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB56844);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1CCB56848(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB56850(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPDemoDeviceCategoryTemplate()
{
  return &type metadata for FMIPDemoDeviceCategoryTemplate;
}

void sub_1CCB5686C(char *a1)
{
  sub_1CCB1AF78(*a1);
}

void sub_1CCB56878()
{
  char *v0;

  sub_1CCB02DF0(*v0);
}

void sub_1CCB56880()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB568C0()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCB5693C(uint64_t a1)
{
  char *v1;

  sub_1CCB03914(a1, *v1);
}

uint64_t sub_1CCB56944@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB56B54();
  *a1 = result;
  return result;
}

uint64_t sub_1CCB56970()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCB569A4 + 4 * byte_1CCB75C36[*v0]))();
}

void sub_1CCB569A4(_QWORD *a1@<X8>)
{
  *a1 = 0x656E6F685069;
  a1[1] = 0xE600000000000000;
}

void sub_1CCB569BC(_QWORD *a1@<X8>)
{
  *a1 = 1684099177;
  a1[1] = 0xE400000000000000;
}

void sub_1CCB569D0(_QWORD *a1@<X8>)
{
  *a1 = 0x6863746177;
  a1[1] = 0xE500000000000000;
}

void sub_1CCB569E8(_QWORD *a1@<X8>)
{
  *a1 = 0x6F725063614D69;
  a1[1] = 0xE700000000000000;
}

void sub_1CCB56A04(_QWORD *a1@<X8>)
{
  *a1 = 0x73646F70726961;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1CCB56A20()
{
  sub_1CCB56B10();
  return sub_1CCB63AF0();
}

uint64_t sub_1CCB56A7C()
{
  sub_1CCB56B10();
  return sub_1CCB63AD8();
}

unint64_t sub_1CCB56ACC()
{
  unint64_t result;

  result = qword_1EF9E6800;
  if (!qword_1EF9E6800)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75D10, &type metadata for FMIPDemoDeviceCategoryTemplate);
    atomic_store(result, (unint64_t *)&qword_1EF9E6800);
  }
  return result;
}

unint64_t sub_1CCB56B10()
{
  unint64_t result;

  result = qword_1EF9E6808;
  if (!qword_1EF9E6808)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75C98, &type metadata for FMIPDemoDeviceCategoryTemplate);
    atomic_store(result, (unint64_t *)&qword_1EF9E6808);
  }
  return result;
}

uint64_t sub_1CCB56B54()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

uint64_t destroy for FMIPSyncDeviceResponse()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FMIPSyncDeviceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FMIPSyncDeviceResponse(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FMIPSyncDeviceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPSyncDeviceResponse(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPSyncDeviceResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPSyncDeviceResponse()
{
  return &type metadata for FMIPSyncDeviceResponse;
}

uint64_t sub_1CCB56DE8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1CCB56E20 + 4 * byte_1CCB75D60[a1]))(0xD00000000000001CLL, 0x80000001CCB7F340);
}

uint64_t sub_1CCB56E20(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_1CCB56E54()
{
  _BYTE *v0;

  if (*v0)
    return 0x726F68636E61;
  else
    return 0x61746144636E7973;
}

uint64_t sub_1CCB56E8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCB57474(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCB56EB0()
{
  sub_1CCB586DC();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB56ED8()
{
  sub_1CCB586DC();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB56F00@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1CCB5755C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1CCB56F2C()
{
  return 0x614E656369766564;
}

uint64_t sub_1CCB56F48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x614E656369766564 && a2 == 0xEA0000000000656DLL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1CCB642A0();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1CCB56FE8()
{
  sub_1CCB58E18();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB57010()
{
  sub_1CCB58E18();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB57038@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = sub_1CCA14E90(&qword_1ED8AA5E0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB58E18();
  sub_1CCB643B4();
  if (v2)
    return sub_1CCA01CA0((uint64_t)a1);
  v9 = sub_1CCB64150();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = sub_1CCA01CA0((uint64_t)a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t sub_1CCB5715C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x72694672656E776FLL;
  if (*v0 != 1)
    v1 = 0x73656369766564;
  if (*v0)
    return v1;
  else
    return 0x73614C72656E776FLL;
}

uint64_t sub_1CCB571D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCB57738(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCB571F4()
{
  sub_1CCB58ABC();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB5721C()
{
  sub_1CCB58ABC();
  return sub_1CCB643E4();
}

double sub_1CCB57244@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1CCB578D4(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1CCB57288()
{
  unsigned __int8 *v0;

  return sub_1CCB56DE8(*v0);
}

uint64_t sub_1CCB57290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCB57B44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCB572B4()
{
  sub_1CCB58698();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB572DC()
{
  sub_1CCB58698();
  return sub_1CCB643E4();
}

uint64_t sub_1CCB57304@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = sub_1CCB57CDC(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
  }
  return result;
}

uint64_t sub_1CCB57338()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x614E656369766564;
  if (*v0 != 1)
    v1 = 0x6F43737574617473;
  if (*v0)
    return v1;
  else
    return 0x72756769666E6F63;
}

uint64_t sub_1CCB573B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCB57E84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCB573D4()
{
  sub_1CCB5828C();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB573FC()
{
  sub_1CCB5828C();
  return sub_1CCB643E4();
}

__n128 sub_1CCB57424@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_1CCB5802C(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1CCB57474(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x61746144636E7973 && a2 == 0xE800000000000000;
  if (v2 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F68636E61 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1CCB5755C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;

  v3 = sub_1CCA14E90(&qword_1ED8AA5E8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[3];
  sub_1CCA04DDC(a1, v7);
  sub_1CCB586DC();
  sub_1CCB643B4();
  if (v1)
  {
    sub_1CCA01CA0((uint64_t)a1);
  }
  else
  {
    sub_1CCA14E90(&qword_1ED8AA5B8);
    v9[7] = 0;
    sub_1CCAF6DAC(&qword_1ED8AA5C0, &qword_1ED8AA5B8, (uint64_t (*)(void))sub_1CCB58720);
    sub_1CCB64180();
    v7 = v10;
    v9[6] = 1;
    swift_bridgeObjectRetain();
    sub_1CCB64150();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_1CCA01CA0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1CCB57738(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73614C72656E776FLL && a2 == 0xED0000656D614E74;
  if (v2 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72694672656E776FLL && a2 == 0xEE00656D614E7473 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73656369766564 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1CCB578D4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v5 = sub_1CCA14E90(&qword_1ED8AA5D8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB58ABC();
  sub_1CCB643B4();
  if (v2)
    return sub_1CCA01CA0((uint64_t)a1);
  v24 = 0;
  v9 = sub_1CCB64150();
  v11 = v10;
  v20 = v9;
  v23 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_1CCB64150();
  v14 = v13;
  v18 = v12;
  sub_1CCA14E90(&qword_1ED8AA5C8);
  v22 = 2;
  sub_1CCAF6DAC(&qword_1ED8AA5D0, &qword_1ED8AA5C8, (uint64_t (*)(void))sub_1CCB58B00);
  v19 = v14;
  swift_bridgeObjectRetain();
  sub_1CCB64180();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v21;
  swift_bridgeObjectRetain();
  sub_1CCA01CA0((uint64_t)a1);
  swift_bridgeObjectRelease();
  v16 = v19;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v20;
  a2[1] = v11;
  a2[2] = v18;
  a2[3] = v16;
  a2[4] = v15;
  return result;
}

uint64_t sub_1CCB57B44(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD00000000000001CLL && a2 == 0x80000001CCB7F340 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001CCB7F360 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001CCB7F380 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000001CCB7F3A0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1CCB57CDC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v2 = sub_1CCA14E90(&qword_1ED8AA5F8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB58698();
  sub_1CCB643B4();
  v12 = 0;
  v6 = sub_1CCB64174();
  v11 = 1;
  sub_1CCB64174();
  v10 = 2;
  sub_1CCB64174();
  v9 = 3;
  sub_1CCB6415C();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1CCA01CA0((uint64_t)a1);
  return v6;
}

uint64_t sub_1CCB57E84(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461;
  if (v2 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x614E656369766564 && a2 == 0xEE00636E7953656DLL || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1CCB5802C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  int v29;
  char v30;

  v5 = sub_1CCA14E90(&qword_1ED8AA5F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB5828C();
  sub_1CCB643B4();
  if (v2)
    return sub_1CCA01CA0((uint64_t)a1);
  v30 = 0;
  sub_1CCB582D0();
  sub_1CCB64180();
  v9 = v27;
  v23 = v26;
  v24 = v25;
  v10 = v28;
  v30 = 1;
  sub_1CCB58314();
  sub_1CCB64180();
  v29 = v10;
  v22 = v9;
  v11 = v25;
  v21 = v26;
  v12 = v27;
  LOBYTE(v25) = 2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_1CCB64150();
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17 = v13;
  v16(v8, v5);
  swift_bridgeObjectRetain();
  sub_1CCA01CA0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v19 = v23;
  *(_QWORD *)a2 = v24;
  *(_QWORD *)(a2 + 8) = v19;
  *(_QWORD *)(a2 + 16) = v22;
  *(_BYTE *)(a2 + 24) = v29;
  v20 = v21;
  *(_QWORD *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 40) = v20;
  *(_QWORD *)(a2 + 48) = v12;
  *(_QWORD *)(a2 + 56) = v17;
  *(_QWORD *)(a2 + 64) = v15;
  return result;
}

unint64_t sub_1CCB5828C()
{
  unint64_t result;

  result = qword_1ED8AA570;
  if (!qword_1ED8AA570)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75F34, &type metadata for FMIPSyncDeviceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8AA570);
  }
  return result;
}

unint64_t sub_1CCB582D0()
{
  unint64_t result;

  result = qword_1ED8AA5A8;
  if (!qword_1ED8AA5A8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75F0C, &type metadata for FMIPSiriServerConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED8AA5A8);
  }
  return result;
}

unint64_t sub_1CCB58314()
{
  unint64_t result;

  result = qword_1ED8AA528;
  if (!qword_1ED8AA528)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75EE4, &type metadata for FMIPSyncDeviceObject);
    atomic_store(result, (unint64_t *)&qword_1ED8AA528);
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPSyncDeviceResponse.CodingKeys()
{
  return &type metadata for FMIPSyncDeviceResponse.CodingKeys;
}

uint64_t destroy for FMIPSyncDeviceObject()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s8FMIPCore20FMIPSyncDeviceObjectVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FMIPSyncDeviceObject(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for FMIPSyncDeviceObject(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPSyncDeviceObject(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPSyncDeviceObject(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPSyncDeviceObject()
{
  return &type metadata for FMIPSyncDeviceObject;
}

uint64_t getEnumTagSinglePayload for FMIPSiriServerConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPSiriServerConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPSiriServerConfiguration()
{
  return &type metadata for FMIPSiriServerConfiguration;
}

unint64_t sub_1CCB585C4()
{
  unint64_t result;

  result = qword_1EF9E6810;
  if (!qword_1EF9E6810)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75EBC, &type metadata for FMIPSyncDeviceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6810);
  }
  return result;
}

unint64_t sub_1CCB5860C()
{
  unint64_t result;

  result = qword_1ED8AA580;
  if (!qword_1ED8AA580)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75E2C, &type metadata for FMIPSyncDeviceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8AA580);
  }
  return result;
}

unint64_t sub_1CCB58654()
{
  unint64_t result;

  result = qword_1ED8AA578;
  if (!qword_1ED8AA578)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75E54, &type metadata for FMIPSyncDeviceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8AA578);
  }
  return result;
}

unint64_t sub_1CCB58698()
{
  unint64_t result;

  result = qword_1ED8AA590;
  if (!qword_1ED8AA590)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7617C, &type metadata for FMIPSiriServerConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8AA590);
  }
  return result;
}

unint64_t sub_1CCB586DC()
{
  unint64_t result;

  result = qword_1ED8AA510;
  if (!qword_1ED8AA510)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7612C, &type metadata for FMIPSyncDeviceObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8AA510);
  }
  return result;
}

unint64_t sub_1CCB58720()
{
  unint64_t result;

  result = qword_1ED8AA3E8[0];
  if (!qword_1ED8AA3E8[0])
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB76104, &type metadata for FMIPSyncDevice);
    atomic_store(result, qword_1ED8AA3E8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPSyncDeviceObject.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCB587B0 + 4 * byte_1CCB75D69[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCB587E4 + 4 * byte_1CCB75D64[v4]))();
}

uint64_t sub_1CCB587E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB587EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB587F4);
  return result;
}

uint64_t sub_1CCB58800(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB58808);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCB5880C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB58814(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPSyncDeviceObject.CodingKeys()
{
  return &type metadata for FMIPSyncDeviceObject.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FMIPSiriServerConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1CCB5887C + 4 * byte_1CCB75D73[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1CCB588B0 + 4 * byte_1CCB75D6E[v4]))();
}

uint64_t sub_1CCB588B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB588B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB588C0);
  return result;
}

uint64_t sub_1CCB588CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB588D4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1CCB588D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB588E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPSiriServerConfiguration.CodingKeys()
{
  return &type metadata for FMIPSiriServerConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for FMIPSyncDevice()
{
  return &type metadata for FMIPSyncDevice;
}

unint64_t sub_1CCB58910()
{
  unint64_t result;

  result = qword_1EF9E6818;
  if (!qword_1EF9E6818)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB76024, &type metadata for FMIPSiriServerConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6818);
  }
  return result;
}

unint64_t sub_1CCB58958()
{
  unint64_t result;

  result = qword_1EF9E6820;
  if (!qword_1EF9E6820)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB760DC, &type metadata for FMIPSyncDeviceObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6820);
  }
  return result;
}

unint64_t sub_1CCB589A0()
{
  unint64_t result;

  result = qword_1ED8AA520;
  if (!qword_1ED8AA520)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7604C, &type metadata for FMIPSyncDeviceObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8AA520);
  }
  return result;
}

unint64_t sub_1CCB589E8()
{
  unint64_t result;

  result = qword_1ED8AA518;
  if (!qword_1ED8AA518)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB76074, &type metadata for FMIPSyncDeviceObject.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8AA518);
  }
  return result;
}

unint64_t sub_1CCB58A30()
{
  unint64_t result;

  result = qword_1ED8AA5A0;
  if (!qword_1ED8AA5A0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75F94, &type metadata for FMIPSiriServerConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8AA5A0);
  }
  return result;
}

unint64_t sub_1CCB58A78()
{
  unint64_t result;

  result = qword_1ED8AA598;
  if (!qword_1ED8AA598)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB75FBC, &type metadata for FMIPSiriServerConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8AA598);
  }
  return result;
}

unint64_t sub_1CCB58ABC()
{
  unint64_t result;

  result = qword_1ED8AA3D0;
  if (!qword_1ED8AA3D0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB762C4, &type metadata for FMIPSyncDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8AA3D0);
  }
  return result;
}

unint64_t sub_1CCB58B00()
{
  unint64_t result;

  result = qword_1ED8AA4B0;
  if (!qword_1ED8AA4B0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7629C, &type metadata for FMIPSyncDeviceName);
    atomic_store(result, (unint64_t *)&qword_1ED8AA4B0);
  }
  return result;
}

uint64_t _s8FMIPCore22FMIPSyncDeviceResponseV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCB58B90 + 4 * byte_1CCB75D7D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CCB58BC4 + 4 * byte_1CCB75D78[v4]))();
}

uint64_t sub_1CCB58BC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB58BCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB58BD4);
  return result;
}

uint64_t sub_1CCB58BE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB58BE8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCB58BEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB58BF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPSyncDevice.CodingKeys()
{
  return &type metadata for FMIPSyncDevice.CodingKeys;
}

_QWORD *initializeBufferWithCopyOfBuffer for FMIPSyncDeviceName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FMIPSyncDeviceName(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for FMIPSyncDeviceName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPSyncDeviceName(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPSyncDeviceName(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPSyncDeviceName()
{
  return &type metadata for FMIPSyncDeviceName;
}

unint64_t sub_1CCB58D44()
{
  unint64_t result;

  result = qword_1EF9E6828;
  if (!qword_1EF9E6828)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB76274, &type metadata for FMIPSyncDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6828);
  }
  return result;
}

unint64_t sub_1CCB58D8C()
{
  unint64_t result;

  result = qword_1ED8AA3E0;
  if (!qword_1ED8AA3E0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB761E4, &type metadata for FMIPSyncDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8AA3E0);
  }
  return result;
}

unint64_t sub_1CCB58DD4()
{
  unint64_t result;

  result = qword_1ED8AA3D8;
  if (!qword_1ED8AA3D8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7620C, &type metadata for FMIPSyncDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8AA3D8);
  }
  return result;
}

unint64_t sub_1CCB58E18()
{
  unint64_t result;

  result = qword_1ED8AA498;
  if (!qword_1ED8AA498)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB763CC, &type metadata for FMIPSyncDeviceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8AA498);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPSyncDeviceName.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CCB58E9C + 4 * byte_1CCB75D82[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CCB58EBC + 4 * byte_1CCB75D87[v4]))();
}

_BYTE *sub_1CCB58E9C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CCB58EBC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCB58EC4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCB58ECC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCB58ED4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCB58EDC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FMIPSyncDeviceName.CodingKeys()
{
  return &type metadata for FMIPSyncDeviceName.CodingKeys;
}

unint64_t sub_1CCB58EFC()
{
  unint64_t result;

  result = qword_1EF9E6830;
  if (!qword_1EF9E6830)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB763A4, &type metadata for FMIPSyncDeviceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6830);
  }
  return result;
}

unint64_t sub_1CCB58F44()
{
  unint64_t result;

  result = qword_1ED8AA4A8;
  if (!qword_1ED8AA4A8)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB76314, &type metadata for FMIPSyncDeviceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8AA4A8);
  }
  return result;
}

unint64_t sub_1CCB58F8C()
{
  unint64_t result;

  result = qword_1ED8AA4A0;
  if (!qword_1ED8AA4A0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7633C, &type metadata for FMIPSyncDeviceName.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED8AA4A0);
  }
  return result;
}

void sub_1CCB58FD4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB59010()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCB590CC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB59104()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCB59210(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB5924C()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCB592D8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB59320()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCB593FC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB59440()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCB594FC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB59544()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCB59618(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB59664()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCB5970C(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1CCB59758()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCB597C4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB59808()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

FMIPCore::FMIPDeviceImageSize_optional __swiftcall FMIPDeviceImageSize.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  FMIPCore::FMIPDeviceImageSize_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

void *static FMIPDeviceImageSize.allCases.getter()
{
  return &unk_1E88EEEB8;
}

uint64_t FMIPDeviceImageSize.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x786F626F666E69;
  else
    return 0x696C656372756F73;
}

uint64_t sub_1CCB5999C(char *a1, char *a2)
{
  return sub_1CCB1B598(*a1, *a2);
}

uint64_t sub_1CCB599A8()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB59A2C()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB59A8C()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

FMIPCore::FMIPDeviceImageSize_optional sub_1CCB59B0C(Swift::String *a1)
{
  return FMIPDeviceImageSize.init(rawValue:)(*a1);
}

void sub_1CCB59B18(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x696C656372756F73;
  if (*v1)
    v2 = 0x786F626F666E69;
  v3 = 0xEA00000000007473;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_1CCB59B5C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E88EEEE0;
}

FMIPCore::FMIPDeviceImageVariant_optional __swiftcall FMIPDeviceImageVariant.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  FMIPCore::FMIPDeviceImageVariant_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  v5 = 9;
  if (v3 < 9)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static FMIPDeviceImageVariant.allCases.getter()
{
  return &unk_1E88EF000;
}

uint64_t FMIPDeviceImageVariant.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB59BFC + 4 * byte_1CCB76473[*v0]))(0x656E696C6E6FLL, 0xE600000000000000);
}

uint64_t sub_1CCB59BFC()
{
  return 0x656E696C66666FLL;
}

uint64_t sub_1CCB59C14()
{
  return 0x64656B636F6CLL;
}

uint64_t sub_1CCB59C24()
{
  return 0x6475427466656CLL;
}

uint64_t sub_1CCB59C3C()
{
  return 0x6475427468676972;
}

unint64_t sub_1CCB59C54()
{
  return 0xD00000000000001ALL;
}

void sub_1CCB59CCC(char *a1)
{
  sub_1CC9E6554(*a1);
}

uint64_t sub_1CCB59CD8()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CC9F8F44((uint64_t)v3, v1);
  return sub_1CCB64384();
}

void sub_1CCB59D1C(uint64_t a1)
{
  char *v1;

  sub_1CC9F8F44(a1, *v1);
}

uint64_t sub_1CCB59D24()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1CCB6433C();
  sub_1CC9F8F44((uint64_t)v3, v1);
  return sub_1CCB64384();
}

FMIPCore::FMIPDeviceImageVariant_optional sub_1CCB59D64(Swift::String *a1)
{
  return FMIPDeviceImageVariant.init(rawValue:)(*a1);
}

uint64_t sub_1CCB59D70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FMIPDeviceImageVariant.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1CCB59D94(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E88EF000;
}

uint64_t FMIPDeviceImageCacheRequest.class.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPDeviceImageCacheRequest.model.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPDeviceImageCacheRequest.color.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void FMIPDeviceImageCacheRequest.size.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 48);
}

void FMIPDeviceImageCacheRequest.variant.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 49);
}

double FMIPDeviceImageCacheRequest.scale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

uint64_t FMIPDeviceImageCacheRequest.init(class:model:color:size:variant:scale:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>)
{
  char v10;
  char v11;

  v10 = *a7;
  v11 = *a8;
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_BYTE *)(a9 + 48) = v10;
  *(_BYTE *)(a9 + 49) = v11;
  *(double *)(a9 + 56) = a10;
  return result;
}

uint64_t FMIPDeviceImageCacheRequest.init(device:size:variant:scale:)@<X0>(_QWORD *a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = *a2;
  v9 = *a3;
  v11 = a1[13];
  v10 = a1[14];
  v13 = a1[17];
  v12 = a1[18];
  v15 = a1[11];
  v14 = a1[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = sub_1CCA0BF30((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = v13;
  *(_QWORD *)(a4 + 24) = v12;
  *(_QWORD *)(a4 + 32) = v15;
  *(_QWORD *)(a4 + 40) = v14;
  *(_BYTE *)(a4 + 48) = v8;
  *(_BYTE *)(a4 + 49) = v9;
  *(double *)(a4 + 56) = a5;
  return result;
}

uint64_t FMIPDeviceImageCacheRequest.init(device:size:scale:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  char v21;

  v8 = type metadata accessor for FMIPDevice();
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *a2;
  sub_1CCB5A028(a1, &v21);
  v11 = v21;
  sub_1CCA0BEEC(a1, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v13 = v10[13];
  v12 = v10[14];
  v14 = v10[17];
  v15 = v10[18];
  v17 = v10[11];
  v16 = v10[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCA0BF30((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  result = sub_1CCA0BF30(a1, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 32) = v17;
  *(_QWORD *)(a3 + 40) = v16;
  *(_BYTE *)(a3 + 48) = v20;
  *(_BYTE *)(a3 + 49) = v11;
  *(double *)(a3 + 56) = a4;
  return result;
}

uint64_t sub_1CCB5A028@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  uint64_t result;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  int v35;
  char *v36;
  char *v37;

  v37 = a2;
  v3 = (int *)type metadata accessor for FMIPDevice();
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v36 - v7;
  v9 = sub_1CCA14E90(&qword_1ED8A73F8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1CCA14E90(&qword_1ED8A7130);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v36 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v36 - v19;
  sub_1CC9EAB74(a1 + v3[31], (uint64_t)v11, &qword_1ED8A73F8);
  v21 = type metadata accessor for FMIPEraseMetadata();
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v11, 1, v21);
  v36 = v6;
  if (v22 == 1)
  {
    sub_1CC9C3E84((uint64_t)v11, &qword_1ED8A73F8);
    v23 = sub_1CCB635B0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v20, 1, 1, v23);
  }
  else
  {
    v24 = &v11[*(int *)(v21 + 20)];
    v25 = sub_1CCB635B0();
    v26 = *(_QWORD *)(v25 - 8);
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v20, v24, v25);
    sub_1CCA0BF30((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for FMIPEraseMetadata);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v20, 0, 1, v25);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v20, 1, v25) != 1)
    {
      sub_1CC9C3E84((uint64_t)v20, &qword_1ED8A7130);
      sub_1CCA0BEEC(a1, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      v31 = *((_QWORD *)v8 + 27);
      result = sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      if ((v31 & 2) != 0)
        goto LABEL_9;
      goto LABEL_5;
    }
  }
  sub_1CC9C3E84((uint64_t)v20, &qword_1ED8A7130);
  sub_1CCA0BEEC(a1, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  sub_1CCA0BF30((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
LABEL_5:
  sub_1CC9EAB74(a1 + v3[39], (uint64_t)v18, &qword_1ED8A7130);
  v27 = sub_1CCB635B0();
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48);
  v29 = v28(v18, 1, v27);
  result = sub_1CC9C3E84((uint64_t)v18, &qword_1ED8A7130);
  if (v29 == 1)
  {
    if (*(_BYTE *)(a1 + 80))
    {
      v33 = (uint64_t)v36;
      v34 = sub_1CCB642A0();
      swift_bridgeObjectRelease();
      sub_1CCA0BEEC(a1, v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
      if ((v34 & 1) == 0)
      {
        result = sub_1CCA0BF30(v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
        goto LABEL_15;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v33 = (uint64_t)v36;
      sub_1CCA0BEEC(a1, (uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    }
    sub_1CC9EAB74(v33 + v3[40], (uint64_t)v15, &qword_1ED8A7130);
    sub_1CCA0BF30(v33, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
    v35 = v28(v15, 1, v27);
    result = sub_1CC9C3E84((uint64_t)v15, &qword_1ED8A7130);
    if (v35 == 1)
    {
      v32 = 0;
      goto LABEL_16;
    }
LABEL_15:
    v32 = 1;
    goto LABEL_16;
  }
LABEL_9:
  v32 = 2;
LABEL_16:
  *v37 = v32;
  return result;
}

uint64_t FMIPDeviceImageCacheRequest.init(itemParts:device:size:scale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  int v22;
  char v23;

  v10 = type metadata accessor for FMIPDevice();
  MEMORY[0x1E0C80A78](v10);
  v12 = (uint64_t *)((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = *a3;
  sub_1CCB5A554(a1, &v23);
  swift_bridgeObjectRelease();
  v13 = v23;
  sub_1CCA0BEEC(a2, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  v15 = v12[13];
  v14 = v12[14];
  v17 = v12[17];
  v16 = v12[18];
  v19 = v12[11];
  v18 = v12[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1CCA0BF30((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  result = sub_1CCA0BF30(a2, (uint64_t (*)(_QWORD))type metadata accessor for FMIPDevice);
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v14;
  *(_QWORD *)(a4 + 16) = v17;
  *(_QWORD *)(a4 + 24) = v16;
  *(_QWORD *)(a4 + 32) = v19;
  *(_QWORD *)(a4 + 40) = v18;
  *(_BYTE *)(a4 + 48) = v22;
  *(_BYTE *)(a4 + 49) = v13;
  *(double *)(a4 + 56) = a5;
  return result;
}

uint64_t sub_1CCB5A554@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t result;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = type metadata accessor for FMIPItem();
  v53 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v52 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v47 - v8;
  MEMORY[0x1E0C80A78](v7);
  v51 = (uint64_t)&v47 - v10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  if (v11)
  {
    v47 = a2;
    v54 = MEMORY[0x1E0DEE9D8];
    sub_1CCA63B10(0, v11, 0);
    v13 = sub_1CCAA78E0(a1);
    v15 = v14;
    a2 = (char *)(v16 & 1);
    v49 = v4;
    v50 = a1 + 56;
    v48 = a1;
    while ((v13 & 0x8000000000000000) == 0 && v13 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(v50 + (((unint64_t)v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_35;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v15)
        goto LABEL_36;
      v17 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(v53 + 72) * v13;
      v18 = v51;
      sub_1CCA0BEEC(v17, v51, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCA30298(v18, (uint64_t)v9);
      v19 = &v9[*(int *)(v4 + 64)];
      v20 = *((_QWORD *)v19 + 1);
      v21 = v19[32];
      v22 = v52;
      sub_1CCA0BEEC((uint64_t)v9, v52, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      if (!v20)
      {
        v23 = (_QWORD *)(v22 + *(int *)(v4 + 56));
        if (*v23 == 1702060355 && v23[1] == 0xE400000000000000)
          v21 = 1;
        else
          v21 = sub_1CCB642A0() & 1;
      }
      sub_1CCA0BF30(v22, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      sub_1CCA0BF30((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FMIPItem);
      v12 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1CCA63B10(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v54;
      }
      v26 = *(_QWORD *)(v12 + 16);
      v25 = *(_QWORD *)(v12 + 24);
      if (v26 >= v25 >> 1)
      {
        sub_1CCA63B10(v25 > 1, v26 + 1, 1);
        v12 = v54;
      }
      *(_QWORD *)(v12 + 16) = v26 + 1;
      *(_BYTE *)(v12 + v26 + 32) = v21;
      a1 = v48;
      v27 = sub_1CCB48FB8(v13, v15, a2 & 1, v48);
      v13 = v27;
      v15 = v28;
      a2 = (char *)(v29 & 1);
      --v11;
      v4 = v49;
      if (!v11)
      {
        sub_1CCA58DB4(v27, v28, v29 & 1);
        a2 = v47;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_20:
  a1 = sub_1CCA7B070(v12);
  swift_bridgeObjectRelease();
  v30 = sub_1CCA7B070((uint64_t)&unk_1E88EF030);
  v31 = sub_1CCAFF8B0(v30, a1);
  swift_bridgeObjectRelease();
  if ((v31 & 1) != 0)
  {
    v32 = 5;
  }
  else
  {
    v33 = sub_1CCA7B070((uint64_t)&unk_1E88EF058);
    v34 = sub_1CCAFF8B0(v33, a1);
    swift_bridgeObjectRelease();
    if ((v34 & 1) != 0)
    {
      v32 = 8;
    }
    else
    {
      v35 = sub_1CCA7B070((uint64_t)&unk_1E88EF080);
      v36 = sub_1CCAFF8B0(v35, a1);
      swift_bridgeObjectRelease();
      if ((v36 & 1) != 0)
      {
        v32 = 7;
      }
      else
      {
        v37 = sub_1CCA7B070((uint64_t)&unk_1E88EF0A8);
        v38 = sub_1CCAFF8B0(v37, a1);
        swift_bridgeObjectRelease();
        if ((v38 & 1) != 0)
        {
          v32 = 6;
        }
        else
        {
          v39 = sub_1CCA7B070((uint64_t)&unk_1E88EF0D0);
          v40 = sub_1CCAFF8B0(v39, a1);
          swift_bridgeObjectRelease();
          if ((v40 & 1) != 0)
          {
            v32 = 0;
          }
          else
          {
            v41 = sub_1CCA7B070((uint64_t)&unk_1E88EF0F8);
            v42 = sub_1CCAFF8B0(v41, a1);
            swift_bridgeObjectRelease();
            if ((v42 & 1) != 0)
            {
              v32 = 3;
            }
            else
            {
              v43 = sub_1CCA7B070((uint64_t)&unk_1E88EF120);
              v44 = sub_1CCAFF8B0(v43, a1);
              swift_bridgeObjectRelease();
              if ((v44 & 1) == 0)
              {
LABEL_37:
                v45 = sub_1CCA7B070((uint64_t)&unk_1E88EF148);
                sub_1CCAFF8B0(v45, a1);
                swift_bridgeObjectRelease();
                v32 = 0;
                goto LABEL_38;
              }
              v32 = 4;
            }
          }
        }
      }
    }
  }
LABEL_38:
  result = swift_bridgeObjectRelease();
  *a2 = v32;
  return result;
}

uint64_t FMIPDeviceImageCacheRequest.hashValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  _BYTE v7[72];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  char v13;
  uint64_t v14;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_QWORD *)v0 + 3);
  v3 = *((_BYTE *)v0 + 48);
  v4 = *((_BYTE *)v0 + 49);
  v5 = *((_QWORD *)v0 + 7);
  v8 = *v0;
  v9 = v1;
  v10 = v2;
  v11 = v0[2];
  v12 = v3;
  v13 = v4;
  v14 = v5;
  sub_1CCB6433C();
  FMIPDeviceImageCacheRequest.hash(into:)((uint64_t)v7);
  return sub_1CCB64384();
}

uint64_t sub_1CCB5AA28()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  _BYTE v7[72];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  char v13;
  uint64_t v14;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_QWORD *)v0 + 3);
  v3 = *((_BYTE *)v0 + 48);
  v4 = *((_BYTE *)v0 + 49);
  v5 = *((_QWORD *)v0 + 7);
  v8 = *v0;
  v9 = v1;
  v10 = v2;
  v11 = v0[2];
  v12 = v3;
  v13 = v4;
  v14 = v5;
  sub_1CCB6433C();
  FMIPDeviceImageCacheRequest.hash(into:)((uint64_t)v7);
  return sub_1CCB64384();
}

unint64_t sub_1CCB5AAA0()
{
  unint64_t result;

  result = qword_1EF9E6840;
  if (!qword_1EF9E6840)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDeviceImageSize, &type metadata for FMIPDeviceImageSize);
    atomic_store(result, (unint64_t *)&qword_1EF9E6840);
  }
  return result;
}

uint64_t sub_1CCB5AAE4()
{
  return sub_1CCB5AB74(&qword_1EF9E6848, &qword_1EF9E6850);
}

unint64_t sub_1CCB5AB0C()
{
  unint64_t result;

  result = qword_1EF9E6858;
  if (!qword_1EF9E6858)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPDeviceImageVariant, &type metadata for FMIPDeviceImageVariant);
    atomic_store(result, (unint64_t *)&qword_1EF9E6858);
  }
  return result;
}

uint64_t sub_1CCB5AB50()
{
  return sub_1CCB5AB74(&qword_1EF9E6860, &qword_1EF9E6868);
}

uint64_t sub_1CCB5AB74(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1CCA19B38(a2);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEAF50], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPDeviceImageSize(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCB5AC00 + 4 * byte_1CCB7648A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCB5AC34 + 4 * byte_1CCB76485[v4]))();
}

uint64_t sub_1CCB5AC34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB5AC3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB5AC44);
  return result;
}

uint64_t sub_1CCB5AC50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB5AC58);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCB5AC5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB5AC64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPDeviceImageVariant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1CCB5ACBC + 4 * byte_1CCB76494[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1CCB5ACF0 + 4 * byte_1CCB7648F[v4]))();
}

uint64_t sub_1CCB5ACF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB5ACF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB5AD00);
  return result;
}

uint64_t sub_1CCB5AD0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB5AD14);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1CCB5AD18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB5AD20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPDeviceImageVariant()
{
  return &type metadata for FMIPDeviceImageVariant;
}

uint64_t assignWithCopy for FMIPDeviceImageCacheRequest(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for FMIPDeviceImageCacheRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t sub_1CCB5AE4C(uint64_t a1)
{
  swift_allocObject();
  return sub_1CCB5AE94(a1);
}

uint64_t sub_1CCB5AE94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13[7];

  sub_1CC9EBC94(a1, (uint64_t)v13);
  v3 = sub_1CCA5B658(v13);
  if (!v1)
  {
    v4 = qword_1ED8AA630;
    swift_retain();
    if (v4 != -1)
      swift_once();
    v5 = sub_1CCB637FC();
    sub_1CCA16C20(v5, (uint64_t)qword_1ED8AD7F8);
    swift_retain();
    v6 = sub_1CCB637D8();
    v7 = sub_1CCB63D48();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      *(_DWORD *)v8 = 136315138;
      v13[0] = v9;
      v10 = sub_1CCA5B9C4();
      v13[6] = sub_1CCA0CB60(v10, v11, v13);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v6, v7, "FMIPSavePreferencesResponse: initialized with coder %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v9, -1, -1);
      MEMORY[0x1D17B214C](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }

  }
  sub_1CCA01CA0(a1);
  return v3;
}

uint64_t type metadata accessor for FMIPSavePreferencesResponse()
{
  return objc_opt_self();
}

void FMIPPlaySoundMetadata.status.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t FMIPPlaySoundMetadata.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FMIPPlaySoundMetadata() + 20);
  v4 = sub_1CCB635B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FMIPPlaySoundMetadata.alertTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPPlaySoundMetadata() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPPlaySoundMetadata.alertText.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPPlaySoundMetadata() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPPlaySoundMetadata.continueButtonTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPPlaySoundMetadata() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPPlaySoundMetadata.cancelButtonTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FMIPPlaySoundMetadata() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1CCB5B1D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB5B210
                                                            + 4 * asc_1CCB767D0[a1]))(0x6954657461657263, 0xEF706D617473656DLL);
}

uint64_t sub_1CCB5B210()
{
  return 0x6F43737574617473;
}

uint64_t sub_1CCB5B22C()
{
  return 0x7469547472656C61;
}

uint64_t sub_1CCB5B24C()
{
  return 0x7865547472656C61;
}

unint64_t sub_1CCB5B268()
{
  return 0xD000000000000013;
}

unint64_t sub_1CCB5B288()
{
  return 0xD000000000000011;
}

void sub_1CCB5B2A4(char *a1)
{
  sub_1CCB1C8A0(*a1);
}

void sub_1CCB5B2B0()
{
  char *v0;

  sub_1CCB02ED4(*v0);
}

void sub_1CCB5B2B8(uint64_t a1)
{
  char *v1;

  sub_1CCB59618(a1, *v1);
}

void sub_1CCB5B2C0(uint64_t a1)
{
  char *v1;

  sub_1CCB033E8(a1, *v1);
}

uint64_t sub_1CCB5B2C8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB5B87C();
  *a1 = result;
  return result;
}

uint64_t sub_1CCB5B2F4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1CCB5B1D0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1CCB5B31C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB5B87C();
  *a1 = result;
  return result;
}

uint64_t sub_1CCB5B340()
{
  sub_1CC9FC5D0();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB5B368()
{
  sub_1CC9FC5D0();
  return sub_1CCB643E4();
}

uint64_t *initializeBufferWithCopyOfBuffer for FMIPPlaySoundMetadata(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1CCB635B0();
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[6];
    v12 = a3[7];
    v13 = (uint64_t *)((char *)v4 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (uint64_t *)((char *)v4 + v12);
    v17 = (uint64_t *)((char *)a2 + v12);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = a3[8];
    v20 = a3[9];
    v21 = (uint64_t *)((char *)v4 + v19);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = (uint64_t *)((char *)v4 + v20);
    v25 = (uint64_t *)((char *)a2 + v20);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

_BYTE *assignWithCopy for FMIPPlaySoundMetadata(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = a3[8];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = a3[9];
  v20 = &a1[v19];
  v21 = &a2[v19];
  *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *initializeWithTake for FMIPPlaySoundMetadata(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  v11 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  return a1;
}

_BYTE *assignWithTake for FMIPPlaySoundMetadata(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1CCB635B0();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = (uint64_t *)&a2[v10];
  v14 = *v12;
  v13 = v12[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = &a1[v20];
  v22 = (uint64_t *)&a2[v20];
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[9];
  v26 = &a1[v25];
  v27 = (uint64_t *)&a2[v25];
  v29 = *v27;
  v28 = v27[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1CCB5B724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_1CCB635B0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1CCB5B7B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1CCB635B0();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

unint64_t sub_1CCB5B838()
{
  unint64_t result;

  result = qword_1EF9E6990;
  if (!qword_1EF9E6990)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB769EC, &type metadata for FMIPPlaySoundMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6990);
  }
  return result;
}

uint64_t sub_1CCB5B87C()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

_QWORD *sub_1CCB5B8C8(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t ObjCClassFromMetadata;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unsigned int v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  int v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = sub_1CCA14E90(&qword_1ED8A8EE8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v50 - v6;
  v54 = *a1;
  type metadata accessor for FMLocalize();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v9 = (void *)objc_opt_self();
  v10 = objc_msgSend(v9, sel_bundleForClass_, ObjCClassFromMetadata);
  v57 = sub_1CCB63340();
  v12 = v11;

  v13 = objc_msgSend(v9, sel_bundleForClass_, ObjCClassFromMetadata);
  v55 = sub_1CCB63340();
  v56 = v14;

  v15 = objc_msgSend(v9, sel_bundleForClass_, ObjCClassFromMetadata);
  v16 = sub_1CCB63340();
  v18 = v17;

  v19 = sub_1CCB63490();
  v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v53(v7, 1, 1, v19);
  v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CFA9B8]), sel_init);
  objc_msgSend(v20, sel_refresh);
  v21 = objc_msgSend(v20, sel_airplaneMode);

  if (v21)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1ED8AA630 != -1)
      swift_once();
    v51 = v19;
    v52 = v5;
    v22 = sub_1CCB637FC();
    sub_1CCA16C20(v22, (uint64_t)qword_1ED8AD7F8);
    v23 = sub_1CCB637D8();
    v24 = sub_1CCB63D48();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1CC9BF000, v23, v24, "FMNetworkUtil: Airplane mode is enabled", v25, 2u);
      MEMORY[0x1D17B214C](v25, -1, -1);
    }

    v57 = sub_1CCB041BC();
    v12 = v26;
    v27 = objc_msgSend(v9, sel_bundleForClass_, ObjCClassFromMetadata);
    v16 = sub_1CCB63340();
    v18 = v28;

    v29 = objc_msgSend(v9, sel_bundleForClass_, ObjCClassFromMetadata);
    v30 = sub_1CCB63340();
    v32 = v31;

    v5 = v52;
    sub_1CCB63484();
    v19 = v51;
  }
  else
  {
    if ((sub_1CCA7FBD0() & 1) != 0 || (v33 = (void *)sub_1CCB63964(), v34 = MGGetBoolAnswer(), v33, !v34))
    {
      v30 = 0;
      v32 = 0;
      goto LABEL_16;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1ED8AA630 != -1)
      swift_once();
    v52 = v5;
    v35 = sub_1CCB637FC();
    sub_1CCA16C20(v35, (uint64_t)qword_1ED8AD7F8);
    v36 = sub_1CCB637D8();
    v37 = sub_1CCB63D48();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1CC9BF000, v36, v37, "FMNetworkUtil: Cellular is disabled", v38, 2u);
      MEMORY[0x1D17B214C](v38, -1, -1);
    }

    v39 = objc_msgSend(v9, sel_bundleForClass_, ObjCClassFromMetadata);
    v57 = sub_1CCB63340();
    v12 = v40;

    v55 = sub_1CCB041BC();
    v56 = v41;
    v42 = objc_msgSend(v9, (SEL)&stru_1E8913700.offs + 1, ObjCClassFromMetadata);
    v16 = sub_1CCB63340();
    v18 = v43;

    v44 = objc_msgSend(v9, sel_bundleForClass_, ObjCClassFromMetadata);
    v30 = sub_1CCB63340();
    v32 = v45;

    v5 = v52;
    sub_1CCB63484();
  }
  sub_1CCA39410((uint64_t)v7);
  sub_1CCA24AA4((uint64_t)v5, (uint64_t)v7);
LABEL_16:
  v53(v5, 1, 1, v19);
  type metadata accessor for FMIPAlert();
  v46 = (_QWORD *)swift_allocObject();
  v46[2] = v57;
  v46[3] = v12;
  v47 = v56;
  v46[4] = v55;
  v46[5] = v47;
  v46[6] = v16;
  v46[7] = v18;
  v48 = (_QWORD *)((char *)v46 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonLabel);
  *v48 = v30;
  v48[1] = v32;
  sub_1CCA24AA4((uint64_t)v7, (uint64_t)v46 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_okButtonURL);
  sub_1CCA24AA4((uint64_t)v5, (uint64_t)v46 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonURL);
  *((_BYTE *)v46 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_type) = v54;
  return v46;
}

id FMIPSeparationLocation.location.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  void *v5;
  uint64_t v6;

  v2 = *(_BYTE *)(v1 + 1);
  v3 = *(_BYTE *)(v1 + 2);
  v4 = *(_BYTE *)(v1 + 3);
  v5 = *(void **)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_BYTE *)(a1 + 3) = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  return v5;
}

uint64_t *FMIPSeparationLocation.address.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v4[36];

  sub_1CC9C3EC0(v1 + 24, (uint64_t)v4, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)v4, a1, &qword_1ED8A71C0);
  return sub_1CCA81A8C(v4);
}

uint64_t FMIPSeparationLocation.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for FMIPSeparationLocation() + 24);
  return sub_1CCADEC80(v3, a1);
}

uint64_t sub_1CCB5C104(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CCB1C438(*a1, *a2);
}

uint64_t sub_1CCB5C110()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB5C1B4()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1CCB5C234()
{
  sub_1CCB6433C();
  sub_1CCB639F4();
  swift_bridgeObjectRelease();
  return sub_1CCB64384();
}

uint64_t sub_1CCB5C2D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB5DFC0();
  *a1 = result;
  return result;
}

void sub_1CCB5C300(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x6E6F697461636F6CLL;
  if (v2 != 1)
  {
    v5 = 0x6D617473656D6974;
    v4 = 0xE900000000000070;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x73736572646461;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1CCB5C364()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E6F697461636F6CLL;
  if (*v0 != 1)
    v1 = 0x6D617473656D6974;
  if (*v0)
    return v1;
  else
    return 0x73736572646461;
}

uint64_t sub_1CCB5C3C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB5DFC0();
  *a1 = result;
  return result;
}

uint64_t sub_1CCB5C3E8()
{
  sub_1CCB5C858();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB5C410()
{
  sub_1CCB5C858();
  return sub_1CCB643E4();
}

uint64_t FMIPSeparationLocation.init(location:address:timestamp:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[288];

  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  v9 = a1[3];
  v10 = *((_QWORD *)a1 + 1);
  v11 = *((_QWORD *)a1 + 2);
  sub_1CC9C3EC0(a2, (uint64_t)v14, &qword_1ED8A71C0);
  *(_BYTE *)a4 = v6;
  *(_BYTE *)(a4 + 1) = v7;
  *(_BYTE *)(a4 + 2) = v8;
  *(_BYTE *)(a4 + 3) = v9;
  *(_QWORD *)(a4 + 8) = v10;
  *(_QWORD *)(a4 + 16) = v11;
  sub_1CC9C3EC0((uint64_t)v14, a4 + 24, &qword_1ED8A71C0);
  v12 = type metadata accessor for FMIPSeparationLocation();
  return sub_1CC9C3EC0(a3, a4 + *(int *)(v12 + 24), &qword_1ED8A7130);
}

uint64_t FMIPSeparationLocation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[36];
  char v36;
  _BYTE v37[296];
  _BYTE v38[288];

  v28 = a2;
  v3 = sub_1CCB635B0();
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1CCA14E90(&qword_1EF9E6998);
  v6 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FMIPSeparationLocation();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v33 = a1;
  sub_1CCA04DDC(a1, v12);
  sub_1CCB5C858();
  v32 = v8;
  v13 = v34;
  sub_1CCB643B4();
  if (!v13)
  {
    v14 = v6;
    v34 = v9;
    v15 = (uint64_t)v11;
    v17 = v29;
    v16 = v30;
    v37[295] = 0;
    sub_1CCA178E4();
    v18 = v31;
    sub_1CCB64180();
    memcpy(v37, v38, 0x120uLL);
    v36 = 1;
    sub_1CCA162BC();
    sub_1CCB64180();
    v25 = BYTE1(v35[0]);
    v26 = LOBYTE(v35[0]);
    v23 = BYTE3(v35[0]);
    v24 = BYTE2(v35[0]);
    v27 = v35[1];
    v19 = v35[2];
    v36 = 2;
    sub_1CCAD9018(&qword_1EF9E3A80, MEMORY[0x1E0CB08C0]);
    sub_1CCB64180();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v32, v18);
    *(_BYTE *)v15 = v26;
    *(_BYTE *)(v15 + 1) = v25;
    *(_BYTE *)(v15 + 2) = v24;
    *(_BYTE *)(v15 + 3) = v23;
    *(_QWORD *)(v15 + 8) = v27;
    *(_QWORD *)(v15 + 16) = v19;
    memcpy(v35, v37, sizeof(v35));
    nullsub_1(v35);
    sub_1CC9C3EC0((uint64_t)v35, v15 + 24, &qword_1ED8A71C0);
    v21 = v15 + *(int *)(v34 + 24);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v21, v5, v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v21, 0, 1, v16);
    sub_1CCB5C89C(v15, v28);
  }
  return sub_1CCA01CA0((uint64_t)v33);
}

unint64_t sub_1CCB5C858()
{
  unint64_t result;

  result = qword_1EF9E69A0;
  if (!qword_1EF9E69A0)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB76CC4, &type metadata for FMIPSeparationLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E69A0);
  }
  return result;
}

uint64_t sub_1CCB5C89C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FMIPSeparationLocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *FMIPSeparationLocation.with(address:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  char v4;
  char v5;
  char v6;
  char v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v13[37];

  sub_1CC9C3EC0(a1, (uint64_t)v13, &qword_1ED8A71C0);
  v4 = *v2;
  v5 = v2[1];
  v6 = v2[2];
  v7 = v2[3];
  v8 = (void *)*((_QWORD *)v2 + 1);
  v9 = *((_QWORD *)v2 + 2);
  v10 = type metadata accessor for FMIPSeparationLocation();
  sub_1CCADEC80((uint64_t)&v2[*(int *)(v10 + 24)], a2 + *(int *)(v10 + 24));
  *(_BYTE *)a2 = v4;
  *(_BYTE *)(a2 + 1) = v5;
  *(_BYTE *)(a2 + 2) = v6;
  *(_BYTE *)(a2 + 3) = v7;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v9;
  sub_1CC9C3EC0((uint64_t)v13, a2 + 24, &qword_1ED8A71C0);
  v11 = v8;
  return sub_1CCA81A8C(v13);
}

uint64_t FMIPSeparationLocation.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[8];
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[296];
  char v20;

  v3 = v1;
  v5 = sub_1CCA14E90(&qword_1EF9E69A8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB5C858();
  sub_1CCB643CC();
  sub_1CC9C3EC0(v3 + 24, (uint64_t)v19, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)v19, (uint64_t)v16, &qword_1ED8A71C0);
  v20 = 0;
  sub_1CCA14E90(&qword_1ED8A71C0);
  sub_1CCA322A8();
  sub_1CCB64210();
  if (!v2)
  {
    v9 = *(_BYTE *)(v3 + 1);
    v10 = *(_BYTE *)(v3 + 2);
    v11 = *(_BYTE *)(v3 + 3);
    v12 = *(_QWORD *)(v3 + 8);
    v13 = *(_QWORD *)(v3 + 16);
    v16[0] = *(_BYTE *)v3;
    v16[1] = v9;
    v16[2] = v10;
    v16[3] = v11;
    v17 = v12;
    v18 = v13;
    v20 = 1;
    sub_1CCA23468();
    sub_1CCB64210();
    type metadata accessor for FMIPSeparationLocation();
    v16[0] = 2;
    sub_1CCA14E90(&qword_1ED8A7130);
    sub_1CCB5CB90();
    sub_1CCB64210();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1CCB5CB90()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF9E69B0;
  if (!qword_1EF9E69B0)
  {
    v1 = sub_1CCA19B38(&qword_1ED8A7130);
    v2 = sub_1CCAD9018(&qword_1EF9E3A90, MEMORY[0x1E0CB0890]);
    result = MEMORY[0x1D17B2068](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF9E69B0);
  }
  return result;
}

uint64_t static FMIPSeparationLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v3;
  _QWORD v5[36];
  _BYTE __dst[288];
  _BYTE v7[288];
  _QWORD __src[36];
  _BYTE v9[288];
  uint64_t v10;
  uint64_t v11[36];
  uint64_t v12[36];
  _BYTE v13[288];

  sub_1CC9C3EC0(a1 + 24, (uint64_t)v11, &qword_1ED8A71C0);
  sub_1CC9C3EC0(a2 + 24, (uint64_t)v12, &qword_1ED8A71C0);
  sub_1CC9C3EC0((uint64_t)v11, (uint64_t)v13, &qword_1ED8A71C0);
  if (sub_1CCA33738((uint64_t)v13) != 1)
  {
    sub_1CC9C3EC0((uint64_t)v11, (uint64_t)__src, &qword_1ED8A71C0);
    sub_1CC9C3EC0((uint64_t)v12, (uint64_t)v9, &qword_1ED8A71C0);
    if (sub_1CCA33738((uint64_t)v9) != 1)
    {
      sub_1CC9C3EC0((uint64_t)v12, (uint64_t)__dst, &qword_1ED8A71C0);
      memcpy(v5, __dst, sizeof(v5));
      v3 = _s8FMIPCore11FMIPAddressV2eeoiySbAC_ACtFZ_0(__src, v5);
      memcpy(v7, __src, sizeof(v7));
      sub_1CCA81A8C(v11);
      sub_1CCA32130((uint64_t)v7);
      return v3 & 1;
    }
    memcpy(__dst, __src, sizeof(__dst));
    sub_1CC9C3EC0((uint64_t)v11, (uint64_t)v7, &qword_1ED8A71C0);
    sub_1CCA81A8C(v11);
    sub_1CCA31FF8((uint64_t)v7);
    sub_1CCA32130((uint64_t)__dst);
    goto LABEL_6;
  }
  sub_1CC9C3EC0((uint64_t)v12, (uint64_t)v9, &qword_1ED8A71C0);
  if (sub_1CCA33738((uint64_t)v9) != 1)
  {
LABEL_6:
    sub_1CC9C3EC0((uint64_t)v11, (uint64_t)v9, &qword_1ED8A71C0);
    sub_1CC9C3EC0((uint64_t)v12, (uint64_t)&v10, &qword_1ED8A71C0);
    sub_1CCA81A8C(v12);
    sub_1CCA33750((uint64_t)v9);
    v3 = 0;
    return v3 & 1;
  }
  v3 = 1;
  return v3 & 1;
}

uint64_t sub_1CCB5CDB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FMIPSeparationLocation.init(from:)(a1, a2);
}

uint64_t sub_1CCB5CDC8(_QWORD *a1)
{
  return FMIPSeparationLocation.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for FMIPSeparationLocation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = (void *)a2[1];
    v8 = a2[2];
    a1[1] = (uint64_t)v7;
    a1[2] = v8;
    v9 = a2[24];
    v10 = v7;
    if (v9)
    {
      v11 = a2[4];
      v4[3] = a2[3];
      v4[4] = v11;
      v12 = a2[6];
      v4[5] = a2[5];
      v4[6] = v12;
      v13 = a2[8];
      v4[7] = a2[7];
      v4[8] = v13;
      v14 = a2[10];
      v4[9] = a2[9];
      v4[10] = v14;
      v15 = a2[12];
      v4[11] = a2[11];
      v4[12] = v15;
      v16 = a2[14];
      v4[13] = a2[13];
      v4[14] = v16;
      v17 = a2[16];
      v4[15] = a2[15];
      v4[16] = v17;
      v18 = a2[18];
      v4[17] = a2[17];
      v4[18] = v18;
      v19 = a2[20];
      v4[19] = a2[19];
      v4[20] = v19;
      v20 = a2[22];
      v4[21] = a2[21];
      v4[22] = v20;
      v4[23] = a2[23];
      v4[24] = v9;
      v21 = a2[26];
      v4[25] = a2[25];
      v4[26] = v21;
      v22 = a2[28];
      v4[27] = a2[27];
      v4[28] = v22;
      v23 = a2[30];
      v4[29] = a2[29];
      v4[30] = v23;
      v24 = a2[32];
      v4[31] = a2[31];
      v4[32] = v24;
      v25 = a2[34];
      v4[33] = a2[33];
      v4[34] = v25;
      v26 = a2[36];
      v4[35] = a2[35];
      v4[36] = v26;
      v27 = a2[38];
      v4[37] = a2[37];
      v4[38] = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      memcpy(v4 + 3, a2 + 3, 0x120uLL);
    }
    v29 = *(int *)(a3 + 24);
    v30 = (char *)v4 + v29;
    v31 = (char *)a2 + v29;
    v32 = sub_1CCB635B0();
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_1CCA14E90(&qword_1ED8A7130);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
  }
  return v4;
}

uint64_t destroy for FMIPSeparationLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (*(_QWORD *)(a1 + 192))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1CCB635B0();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t initializeWithCopy for FMIPSeparationLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(void **)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 192);
  v9 = v6;
  if (v8)
  {
    v10 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v10;
    v11 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v11;
    v12 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v12;
    v13 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v13;
    v14 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v14;
    v15 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v15;
    v16 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v16;
    v17 = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = v17;
    v18 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = v18;
    v19 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = v19;
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v8;
    v20 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v20;
    v21 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = v21;
    v22 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = v22;
    v23 = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = v23;
    v24 = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = v24;
    v25 = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = v25;
    v26 = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 304) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x120uLL);
  }
  v27 = *(int *)(a3 + 24);
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  v30 = sub_1CCB635B0();
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    v32 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v28, v29, v30);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  return a1;
}

uint64_t assignWithCopy for FMIPSeparationLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  v6 = *(void **)(a2 + 8);
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v8 = v6;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 192);
  if (*(_QWORD *)(a1 + 192))
  {
    if (v9)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_1CCA331A4(a1 + 24);
  }
  else if (v9)
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
  memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x120uLL);
LABEL_8:
  v10 = *(int *)(a3 + 24);
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = sub_1CCB635B0();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_13;
  }
  if (v17)
  {
LABEL_13:
    v18 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t initializeWithTake for FMIPSeparationLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x120uLL);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1CCB635B0();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithTake for FMIPSeparationLocation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  v6 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 192))
  {
    if (*(_QWORD *)(a2 + 192))
    {
      v7 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = v7;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v8;
      swift_bridgeObjectRelease();
      v9 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v9;
      swift_bridgeObjectRelease();
      v10 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v10;
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = v11;
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 120) = v12;
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = v13;
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = v14;
      swift_bridgeObjectRelease();
      v15 = *(_QWORD *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = v15;
      swift_bridgeObjectRelease();
      v16 = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = v16;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(a2 + 208);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = v17;
      swift_bridgeObjectRelease();
      v18 = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = v18;
      swift_bridgeObjectRelease();
      v19 = *(_QWORD *)(a2 + 240);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v19;
      swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = v20;
      swift_bridgeObjectRelease();
      v21 = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v21;
      swift_bridgeObjectRelease();
      v22 = *(_QWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = v22;
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a1 + 304) = v23;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1CCA331A4(a1 + 24);
  }
  memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x120uLL);
LABEL_6:
  v24 = *(int *)(a3 + 24);
  v25 = (void *)(a1 + v24);
  v26 = (void *)(a2 + v24);
  v27 = sub_1CCB635B0();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 40))(v25, v26, v27);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_11;
  }
  if (v31)
  {
LABEL_11:
    v32 = sub_1CCA14E90(&qword_1ED8A7130);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v28 + 32))(v25, v26, v27);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPSeparationLocation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1CCB5DD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1CCA14E90(&qword_1ED8A7130);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1CCB5DDA4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1CCA14E90(&qword_1ED8A7130);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPSeparationLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCB5DE68 + 4 * byte_1CCB76B05[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CCB5DE9C + 4 * byte_1CCB76B00[v4]))();
}

uint64_t sub_1CCB5DE9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB5DEA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB5DEACLL);
  return result;
}

uint64_t sub_1CCB5DEB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB5DEC0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCB5DEC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB5DECC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPSeparationLocation.CodingKeys()
{
  return &type metadata for FMIPSeparationLocation.CodingKeys;
}

unint64_t sub_1CCB5DEEC()
{
  unint64_t result;

  result = qword_1EF9E6A50;
  if (!qword_1EF9E6A50)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB76C9C, &type metadata for FMIPSeparationLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6A50);
  }
  return result;
}

unint64_t sub_1CCB5DF34()
{
  unint64_t result;

  result = qword_1EF9E6A58;
  if (!qword_1EF9E6A58)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB76BD4, &type metadata for FMIPSeparationLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6A58);
  }
  return result;
}

unint64_t sub_1CCB5DF7C()
{
  unint64_t result;

  result = qword_1EF9E6A60;
  if (!qword_1EF9E6A60)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB76BFC, &type metadata for FMIPSeparationLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6A60);
  }
  return result;
}

uint64_t sub_1CCB5DFC0()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t static FMDiskIO.getOrCreateCacheKey<A>(account:service:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[3];
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v50 = a6;
  v11 = sub_1CCB631F0();
  v44 = *(_QWORD *)(v11 - 8);
  v45 = v11;
  MEMORY[0x1E0C80A78](v11);
  v42 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1CCB63790();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1CCB6376C();
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a5[11];
  v20 = a5[12];
  v47 = a5[10];
  v51 = type metadata accessor for FMDiskIO.KeyPair(0, v47, v19, v20);
  v21 = *(_QWORD *)(v51 - 8);
  v22 = MEMORY[0x1E0C80A78](v51);
  v48 = (char *)v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)v41 - v24;
  v41[0] = a1;
  v41[1] = a2;
  v41[2] = a3;
  v43 = a4;
  v26 = sub_1CCB63208();
  v49 = v21;
  v28 = v27;
  if (v27 >> 60 == 15)
  {
    v29 = v47;
    v30 = type metadata accessor for FMDiskIO.FMDiskIOError(0, v47, v19, v20);
    MEMORY[0x1D17B2068](&unk_1CCB76FA0, v30);
    v46 = (id)swift_allocError();
    swift_willThrow();
    sub_1CCB63760();
    sub_1CCB63784();
    v25 = v48;
    sub_1CCB5E5E8((uint64_t)v18, (uint64_t)v15, v29, v19, v20, (uint64_t)v48);
    sub_1CCB63388();
    swift_allocObject();
    sub_1CCB6337C();
    v31 = v51;
    MEMORY[0x1D17B2068](&protocol conformance descriptor for FMDiskIO<A>.KeyPair, v51);
    v32 = sub_1CCB63370();
    v34 = v33;
    swift_release();
    v52 = v32;
    v53 = v34;
    v36 = v44;
    v35 = v45;
    v37 = v42;
    (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v42, *MEMORY[0x1E0D21268], v45);
    sub_1CCABBA50();
    sub_1CCB631FC();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v35);

    sub_1CCA1B120(v32, v34);
    v39 = v50;
  }
  else
  {
    v38 = v26;
    sub_1CCB63364();
    swift_allocObject();
    sub_1CCB63358();
    MEMORY[0x1D17B2068](&protocol conformance descriptor for FMDiskIO<A>.KeyPair, v51);
    sub_1CCB6334C();
    sub_1CCA1B1A8(v38, v28);
    swift_release();
    v39 = v50;
    v31 = v51;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v39, v25, v31);
}

uint64_t FMDiskIO.__allocating_init(root:fileName:keyPair:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  FMDiskIO.init(root:fileName:keyPair:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t sub_1CCB5E5E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = sub_1CCB6376C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a6, a1, v12);
  v13 = a6 + *(int *)(type metadata accessor for FMDiskIO.KeyPair(0, a3, a4, a5) + 44);
  v14 = sub_1CCB63790();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a2, v14);
}

BOOL sub_1CCB5E680(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_1CCB5E690()
{
  return sub_1CCB64348();
}

uint64_t sub_1CCB5E6B4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4B65746176697270 && a2 == 0xEA00000000007965;
  if (v2 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697274656D6D7973 && a2 == 0xEC00000079654B63)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1CCB5E7C8()
{
  sub_1CCB6433C();
  sub_1CCB64348();
  return sub_1CCB64384();
}

BOOL sub_1CCB5E80C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1CCB5E680(*a1, *a2);
}

uint64_t sub_1CCB5E824()
{
  return sub_1CCB5E7C8();
}

uint64_t sub_1CCB5E838()
{
  return sub_1CCB5E690();
}

uint64_t sub_1CCB5E84C()
{
  sub_1CCB6433C();
  sub_1CCB5E690();
  return sub_1CCB64384();
}

uint64_t sub_1CCB5E894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCB5E6B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCB5E8C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB617C0();
  *a1 = result;
  return result;
}

uint64_t sub_1CCB5E8F4(uint64_t a1)
{
  MEMORY[0x1D17B2068](&unk_1CCB76F50, a1);
  return sub_1CCB643D8();
}

uint64_t sub_1CCB5E928(uint64_t a1)
{
  MEMORY[0x1D17B2068](&unk_1CCB76F50, a1);
  return sub_1CCB643E4();
}

uint64_t FMDiskIO.KeyPair.encode(to:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  char v12;

  v3 = type metadata accessor for FMDiskIO.KeyPair.CodingKeys(255, a2[2], a2[3], a2[4]);
  MEMORY[0x1D17B2068](&unk_1CCB76F50, v3);
  v4 = sub_1CCB64228();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v10 - v6;
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB643CC();
  v12 = 0;
  sub_1CCB6376C();
  sub_1CC9CAA38(&qword_1EF9E6A68, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21300], MEMORY[0x1E0D21310]);
  v8 = v10[1];
  sub_1CCB64210();
  if (!v8)
  {
    v11 = 1;
    sub_1CCB63790();
    sub_1CC9CAA38(&qword_1EF9E6A70, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21330], MEMORY[0x1E0D21340]);
    sub_1CCB64210();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1CCB5EB04(_QWORD *a1, uint64_t *a2)
{
  return FMDiskIO.KeyPair.encode(to:)(a1, a2);
}

uint64_t sub_1CCB5EB18()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  return v2;
}

_QWORD *FMDiskIO.init(root:fileName:keyPair:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD v25[2];
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = v5;
  v26 = a4;
  v27 = a1;
  v28 = a2;
  v29 = a3;
  v30 = (uint64_t *)*v5;
  v31 = a5;
  v7 = sub_1CCB63D84();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1CCB63D6C();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v11);
  v13 = sub_1CCB63868();
  MEMORY[0x1E0C80A78](v13);
  v25[1] = sub_1CC9F0ECC();
  sub_1CCB63844();
  v33 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8AA370, v12, MEMORY[0x1E0DEF828]);
  sub_1CCA14E90((uint64_t *)&unk_1ED8AA350);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA360, (uint64_t *)&unk_1ED8AA350);
  sub_1CCB63E98();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF8D0], v7);
  v5[2] = sub_1CCB63DB4();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v14 = sub_1CCB637FC();
  sub_1CCA16C20(v14, (uint64_t)qword_1ED8AD7F8);
  v15 = v26;
  swift_bridgeObjectRetain_n();
  v16 = sub_1CCB637D8();
  v17 = sub_1CCB63D48();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v33 = v19;
    *(_DWORD *)v18 = 136315138;
    swift_bridgeObjectRetain();
    v20 = v29;
    v32 = sub_1CCA0CB60(v29, v15, &v33);
    sub_1CCB63E44();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1CC9BF000, v16, v17, "FMDiskIO: init with file name: %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v19, -1, -1);
    MEMORY[0x1D17B214C](v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    v20 = v29;
  }
  v21 = v28;
  v6[3] = v27;
  v6[4] = v21;
  v6[5] = v20;
  v6[6] = v15;
  v22 = (char *)v6 + *(_QWORD *)(*v6 + 128);
  type metadata accessor for FMDiskIO.KeyPair(255, v30[10], v30[11], v30[12]);
  v23 = sub_1CCB63E2C();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22, v31, v23);
  return v6;
}

uint64_t sub_1CCB5EEF0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  result = (uint64_t)sub_1CCB600F8();
  if ((result & 1) == 0)
  {
    if (qword_1ED8AA630 != -1)
      swift_once();
    v3 = sub_1CCB637FC();
    sub_1CCA16C20(v3, (uint64_t)qword_1ED8AD7F8);
    v4 = sub_1CCB637D8();
    v5 = sub_1CCB63D48();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1CC9BF000, v4, v5, "FMDiskIO: creating to disk", v6, 2u);
      MEMORY[0x1D17B214C](v6, -1, -1);
    }

    return sub_1CCB5EFEC(a1);
  }
  return result;
}

uint64_t sub_1CCB5EFEC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint8_t *v21;
  uint8_t *v22;
  unint64_t v23;
  char *v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = (_QWORD *)*v1;
  v5 = sub_1CCB63820();
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  MEMORY[0x1E0C80A78](v5);
  v33 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1CCB63868();
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v4[10];
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v8);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v14 = sub_1CCB637FC();
  sub_1CCA16C20(v14, (uint64_t)qword_1ED8AD7F8);
  v15 = sub_1CCB637D8();
  v16 = sub_1CCB63D48();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v30 = v2;
    v18 = v4;
    v19 = v10;
    v20 = a1;
    v21 = v17;
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1CC9BF000, v15, v16, "FMDiskIO: save to disk", v17, 2u);
    v22 = v21;
    a1 = v20;
    v10 = v19;
    v4 = v18;
    v2 = v30;
    MEMORY[0x1D17B214C](v22, -1, -1);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v23 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v24 = (char *)swift_allocObject();
  *((_QWORD *)v24 + 2) = v11;
  *((_QWORD *)v24 + 3) = v4[11];
  *((_QWORD *)v24 + 4) = v4[12];
  *((_QWORD *)v24 + 5) = v2;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v24[v23], (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  aBlock[4] = sub_1CCB61260;
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CCA00C38;
  aBlock[3] = &unk_1E8902E08;
  v25 = _Block_copy(aBlock);
  swift_retain();
  sub_1CCB63844();
  v36 = MEMORY[0x1E0DEE9D8];
  sub_1CC9CAA38((unint64_t *)&qword_1ED8A8F00, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1CCA14E90(&qword_1ED8AA338);
  sub_1CCA02330((unint64_t *)&qword_1ED8AA340, &qword_1ED8AA338);
  v26 = v33;
  v27 = v35;
  sub_1CCB63E98();
  MEMORY[0x1D17B1318](0, v10, v26, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v27);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v32);
  return swift_release();
}

uint64_t sub_1CCB5F324(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  (*(void (**)(char *))(v4 + 16))(v6);
  v8 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v9 = (char *)swift_allocObject();
  *((_QWORD *)v9 + 2) = v3;
  *((_QWORD *)v9 + 3) = *(_QWORD *)(v2 + 88);
  *((_QWORD *)v9 + 4) = *(_QWORD *)(v2 + 96);
  *((_QWORD *)v9 + 5) = v1;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v9[v8], v6, v3);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_1CCB61260;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_1CC9F44EC;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CC9F44AC;
  aBlock[3] = &unk_1E8902E80;
  v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

void sub_1CCB5F4C8(uint64_t a1)
{
  char *v1;
  void *v3;

  v3 = (void *)MEMORY[0x1D17B1B7C]();
  sub_1CCB5F510(v1, a1);
  objc_autoreleasePoolPop(v3);
}

void sub_1CCB5F510(char *a1, uint64_t a2)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  unsigned int v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unsigned __int8 v33;
  id v34;
  uint64_t inited;
  void **v36;
  void *v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  id v66;
  id v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  id v98[3];

  v94 = a2;
  v2 = a1;
  v98[1] = *(id *)MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)a1;
  v83 = sub_1CCB637A8();
  v82 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v84 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v3[10];
  v6 = v3[11];
  v92 = v3[12];
  v93 = v5;
  v7 = type metadata accessor for FMDiskIO.KeyPair(255, v5, v6, v92);
  v88 = sub_1CCB63E2C();
  v86 = *(_QWORD *)(v88 - 8);
  v8 = MEMORY[0x1E0C80A78](v88);
  v87 = (char *)&v82 - v9;
  v89 = v7;
  v90 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v8);
  v85 = (char *)&v82 - v10;
  v11 = sub_1CCB63490();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = 0;
  v15 = (void *)objc_opt_self();
  v16 = objc_msgSend(v15, sel_defaultManager);
  v91 = v2;
  v17 = (void *)sub_1CCB63964();
  LOBYTE(v2) = objc_msgSend(v16, sel_fileExistsAtPath_isDirectory_, v17, &v97);

  if ((v2 & 1) != 0)
    goto LABEL_3;
  v18 = objc_msgSend(v15, sel_defaultManager);
  sub_1CCB63424();
  v19 = (void *)sub_1CCB6343C();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v98[0] = 0;
  v20 = objc_msgSend(v18, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v19, 1, 0, v98);

  v21 = v98[0];
  if (v20)
  {
LABEL_3:
    sub_1CCB63388();
    swift_allocObject();
    v22 = sub_1CCB6337C();
    v23 = v95;
    v94 = sub_1CCB63370();
    v95 = v24;
    if (v23)
    {
      swift_release();
      v25 = (void *)v23;
LABEL_19:
      if (qword_1ED8AA630 != -1)
        swift_once();
      v65 = sub_1CCB637FC();
      sub_1CCA16C20(v65, (uint64_t)qword_1ED8AD7F8);
      v66 = v25;
      v67 = v25;
      v68 = sub_1CCB637D8();
      v69 = sub_1CCB63D30();
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc();
        v71 = (void *)swift_slowAlloc();
        v98[0] = v71;
        *(_DWORD *)v70 = 136315138;
        swift_getErrorValue();
        v72 = sub_1CCB64300();
        v96 = sub_1CCA0CB60(v72, v73, (uint64_t *)v98);
        sub_1CCB63E44();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1CC9BF000, v68, v69, "FMDiskIO: Could not save objects to disk %s", v70, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17B214C](v71, -1, -1);
        MEMORY[0x1D17B214C](v70, -1, -1);

      }
      else
      {

      }
      return;
    }
    v26 = v86;
    v27 = v87;
    v28 = v88;
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v87, &v91[*(_QWORD *)(*(_QWORD *)v91 + 128)], v88);
    v29 = v90;
    v30 = v89;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v27, 1, v89) == 1)
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
      v31 = (void *)sub_1CCB634B4();
      sub_1CCB5EB18();
      v32 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      v33 = objc_msgSend(v31, sel_writeToFile_atomically_, v32, 1);

      if ((v33 & 1) != 0)
      {
LABEL_7:
        v34 = objc_msgSend(v15, sel_defaultManager, v82);
        sub_1CCA14E90(qword_1ED8A7FB8);
        inited = swift_initStackObject();
        v36 = (void **)MEMORY[0x1E0CB2AD8];
        *(_OWORD *)(inited + 16) = xmmword_1CCB677E0;
        v37 = *v36;
        *(_QWORD *)(inited + 32) = *v36;
        v38 = (void *)*MEMORY[0x1E0CB2AC0];
        type metadata accessor for FileProtectionType(0);
        *(_QWORD *)(inited + 64) = v39;
        *(_QWORD *)(inited + 40) = v38;
        v40 = v37;
        v41 = v38;
        sub_1CCAC52B4(inited);
        type metadata accessor for FileAttributeKey(0);
        sub_1CC9CAA38((unint64_t *)&unk_1ED8A7EF0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_1CCB66964);
        v42 = (void *)sub_1CCB638C8();
        swift_bridgeObjectRelease();
        sub_1CCB5EB18();
        v43 = (void *)sub_1CCB63964();
        swift_bridgeObjectRelease();
        v98[0] = 0;
        LODWORD(inited) = objc_msgSend(v34, sel_setAttributes_ofItemAtPath_error_, v42, v43, v98);

        if (!(_DWORD)inited)
        {
          v64 = v98[0];
          v25 = (void *)sub_1CCB63400();

          swift_willThrow();
          sub_1CCA1B120(v94, v95);
          swift_release();
          goto LABEL_19;
        }
        v44 = qword_1ED8AA630;
        v45 = v98[0];
        if (v44 != -1)
          swift_once();
        v46 = sub_1CCB637FC();
        sub_1CCA16C20(v46, (uint64_t)qword_1ED8AD7F8);
        swift_retain_n();
        v47 = sub_1CCB637D8();
        v48 = sub_1CCB63D48();
        if (os_log_type_enabled(v47, v48))
        {
          v49 = (uint8_t *)swift_slowAlloc();
          v50 = (void *)swift_slowAlloc();
          v98[0] = v50;
          v93 = v22;
          *(_DWORD *)v49 = 136315138;
          v51 = sub_1CCB5EB18();
          v96 = sub_1CCA0CB60(v51, v52, (uint64_t *)v98);
          sub_1CCB63E44();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1CC9BF000, v47, v48, "FMDiskIO: Successfully wrote object to disk @ %s", v49, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1D17B214C](v50, -1, -1);
          MEMORY[0x1D17B214C](v49, -1, -1);
          sub_1CCA1B120(v94, v95);

LABEL_31:
          swift_release();
          return;
        }
        swift_release_n();
LABEL_30:
        sub_1CCA1B120(v94, v95);

        goto LABEL_31;
      }
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v85, v27, v30);
      v62 = v84;
      sub_1CCB63778();
      sub_1CC9CAA38(&qword_1EF9E2A48, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21358], MEMORY[0x1E0D21360]);
      v63 = v83;
      v74 = sub_1CCB63370();
      v76 = v75;
      v77 = (void *)sub_1CCB634B4();
      sub_1CCA1B120(v74, v76);
      sub_1CCB5EB18();
      v78 = (void *)sub_1CCB63964();
      swift_bridgeObjectRelease();
      LODWORD(v74) = objc_msgSend(v77, sel_writeToFile_atomically_, v78, 1);

      (*(void (**)(char *, uint64_t))(v82 + 8))(v62, v63);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v85, v89);
      if ((_DWORD)v74)
        goto LABEL_7;
    }
    if (qword_1ED8AA630 != -1)
      swift_once();
    v79 = sub_1CCB637FC();
    sub_1CCA16C20(v79, (uint64_t)qword_1ED8AD7F8);
    v47 = sub_1CCB637D8();
    v80 = sub_1CCB63D48();
    if (os_log_type_enabled(v47, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v81 = 0;
      _os_log_impl(&dword_1CC9BF000, v47, v80, "FMDiskIO: Could not save objects to disk", v81, 2u);
      MEMORY[0x1D17B214C](v81, -1, -1);
    }
    goto LABEL_30;
  }
  v53 = v21;
  v54 = (void *)sub_1CCB63400();

  swift_willThrow();
  if (qword_1ED8AA630 != -1)
    swift_once();
  v55 = sub_1CCB637FC();
  sub_1CCA16C20(v55, (uint64_t)qword_1ED8AD7F8);
  swift_retain_n();
  v56 = sub_1CCB637D8();
  v57 = sub_1CCB63D48();
  if (os_log_type_enabled(v56, v57))
  {
    v58 = (uint8_t *)swift_slowAlloc();
    v59 = (void *)swift_slowAlloc();
    v98[0] = v59;
    *(_DWORD *)v58 = 136315138;
    v60 = sub_1CCB5EB18();
    v96 = sub_1CCA0CB60(v60, v61, (uint64_t *)v98);
    sub_1CCB63E44();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1CC9BF000, v56, v57, "FMDiskIO: Could not create directory for content: %s", v58, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17B214C](v59, -1, -1);
    MEMORY[0x1D17B214C](v58, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

id sub_1CCB600F8()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_1CCB5EB18();
  v1 = (void *)sub_1CCB63964();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_fileExistsAtPath_, v1);

  return v2;
}

uint64_t sub_1CCB60178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v6 = sub_1CCB63E2C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12 - v8;
  sub_1CCB60258((uint64_t)&v12 - v8);
  v10 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v9, v5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_1CCB5EFEC(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a2, a1, v5);
}

uint64_t sub_1CCB60258@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t result;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v5 = sub_1CCB63E2C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)aBlock - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))((char *)aBlock - v7, 1, 1, v4);
  v9 = *(NSObject **)(v2 + 16);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v2;
  *(_QWORD *)(v10 + 24) = v8;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = sub_1CCB612D8;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_1CC9F4530;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1CC9F44AC;
  aBlock[3] = &unk_1E8902EF8;
  v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v9, v12);
  _Block_release(v12);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v2 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v8, v5);
    return swift_release();
  }
  return result;
}

void sub_1CCB60404(char *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  char *v25;
  uint8_t *v26;
  uint8_t *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  os_log_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  os_log_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;

  v79 = a2;
  v3 = *(_QWORD **)a1;
  v75 = sub_1CCB63748();
  v74 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75);
  v76 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_1CCB637A8();
  v73 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81);
  v82 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v3[10];
  v78 = sub_1CCB63E2C();
  v77 = *(_QWORD *)(v78 - 8);
  v7 = MEMORY[0x1E0C80A78](v78);
  v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v80 = (char *)&v68 - v10;
  v11 = v3[12];
  v83 = v3[11];
  v84 = v6;
  v12 = type metadata accessor for FMDiskIO.KeyPair(255, v6, v83, v11);
  v13 = sub_1CCB63E2C();
  v86 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v85 = (char *)&v68 - v15;
  v16 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v14);
  v87 = (char *)&v68 - v17;
  v18 = sub_1CCB63490();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v89 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED8AA630 != -1)
    swift_once();
  v21 = sub_1CCB637FC();
  sub_1CCA16C20(v21, (uint64_t)qword_1ED8AD7F8);
  v22 = sub_1CCB637D8();
  v23 = sub_1CCB63D48();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    v88 = v19;
    v25 = v9;
    v26 = v24;
    *(_WORD *)v24 = 0;
    _os_log_impl(&dword_1CC9BF000, v22, v23, "FMDiskIO: read from disk", v24, 2u);
    v27 = v26;
    v9 = v25;
    v19 = v88;
    MEMORY[0x1D17B214C](v27, -1, -1);
  }

  if ((sub_1CCB600F8() & 1) != 0)
  {
    v72 = v9;
    sub_1CCB5EB18();
    v28 = v89;
    sub_1CCB63424();
    swift_bridgeObjectRelease();
    v29 = sub_1CCB6349C();
    v88 = v30;
    v37 = v29;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v28, v18);
    swift_retain();
    v38 = v88;
    sub_1CCA1B164(v37, v88);
    swift_retain();
    sub_1CCA1B164(v37, v38);
    v39 = sub_1CCB637D8();
    v40 = sub_1CCB63D48();
    v41 = v40;
    v42 = os_log_type_enabled(v39, v40);
    v71 = v37;
    if (v42)
    {
      v43 = swift_slowAlloc();
      v89 = (char *)v13;
      v44 = v43;
      v70 = swift_slowAlloc();
      v91 = v70;
      *(_DWORD *)v44 = 136315394;
      v69 = v41;
      v45 = sub_1CCB5EB18();
      v90 = sub_1CCA0CB60(v45, v46, &v91);
      v68 = v39;
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2080;
      v47 = sub_1CCB634A8();
      v90 = sub_1CCA0CB60(v47, v48, &v91);
      sub_1CCB63E44();
      v49 = v88;
      swift_bridgeObjectRelease();
      sub_1CCA1B120(v37, v49);
      sub_1CCA1B120(v37, v49);
      v50 = v68;
      _os_log_impl(&dword_1CC9BF000, v68, (os_log_type_t)v69, "FMDiskIO: file: %s data: %s", (uint8_t *)v44, 0x16u);
      v51 = v70;
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v51, -1, -1);
      v52 = v44;
      v13 = (uint64_t)v89;
      MEMORY[0x1D17B214C](v52, -1, -1);

    }
    else
    {
      swift_release_n();
      v53 = v88;
      sub_1CCA1B120(v37, v88);
      sub_1CCA1B120(v37, v53);

    }
    v54 = v87;
    v55 = v85;
    sub_1CCB63364();
    swift_allocObject();
    sub_1CCB63358();
    v56 = v86;
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v55, &a1[*(_QWORD *)(*(_QWORD *)a1 + 128)], v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v55, 1, v12) == 1)
    {
      (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v13);
      v57 = v80;
      v58 = v84;
      v59 = v71;
      sub_1CCB6334C();
      sub_1CCA1B120(v59, v88);
      swift_release();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 0, 1, v58);
      (*(void (**)(uint64_t, char *, uint64_t))(v77 + 40))(v79, v57, v78);
    }
    else
    {
      v89 = a1;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v54, v55, v12);
      sub_1CC9CAA38(&qword_1EF9E2B08, (uint64_t (*)(uint64_t))MEMORY[0x1E0D21358], MEMORY[0x1E0D21368]);
      v60 = v16;
      v61 = v81;
      sub_1CCB6334C();
      v86 = v60;
      v62 = v76;
      sub_1CCB63754();
      v63 = sub_1CCB6379C();
      v65 = v64;
      (*(void (**)(char *, uint64_t))(v74 + 8))(v62, v75);
      v66 = v84;
      sub_1CCB6334C();
      sub_1CCA1B120(v63, v65);
      swift_release();
      sub_1CCA1B120(v71, v88);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v82, v61);
      (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v12);
      v67 = v72;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v72, 0, 1, v66);
      (*(void (**)(uint64_t, char *, uint64_t))(v77 + 40))(v79, v67, v78);
    }
  }
  else
  {
    swift_retain_n();
    v31 = sub_1CCB637D8();
    v32 = sub_1CCB63D30();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v91 = v34;
      *(_DWORD *)v33 = 136315138;
      v35 = sub_1CCB5EB18();
      v90 = sub_1CCA0CB60(v35, v36, &v91);
      sub_1CCB63E44();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1CC9BF000, v31, v32, "FMDiskIO: Disk archive does not exist at: %s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17B214C](v34, -1, -1);
      MEMORY[0x1D17B214C](v33, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
}

id *FMDiskIO.deinit()
{
  id *v0;
  uint64_t *v1;
  char *v2;
  uint64_t v3;

  v1 = (uint64_t *)*v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (char *)v0 + *((_QWORD *)*v0 + 16);
  type metadata accessor for FMDiskIO.KeyPair(255, v1[10], v1[11], v1[12]);
  v3 = sub_1CCB63E2C();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t FMDiskIO.__deallocating_deinit()
{
  FMDiskIO.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB61180(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

void sub_1CCB611A0(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  sub_1CCB63E44();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

uint64_t type metadata accessor for FMDiskIO.FMDiskIOError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1CC9E3BAC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FMDiskIO.FMDiskIOError);
}

void sub_1CCB61268()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80);
  sub_1CCB5F4C8(v0 + ((v1 + 48) & ~v1));
}

uint64_t sub_1CCB612A4()
{
  return swift_deallocObject();
}

uint64_t sub_1CCB612B4()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1CCB612D8()
{
  uint64_t v0;

  sub_1CCB60404(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1CCB612E0()
{
  return swift_deallocObject();
}

uint64_t method lookup function for FMDiskIO()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMDiskIO.__allocating_init(root:fileName:keyPair:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of FMDiskIO.createIfNeeded(content:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of FMDiskIO.save(content:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of FMDiskIO.saveSync(content:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of FMDiskIO.diskCacheExists()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of FMDiskIO.readOrCreate(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of FMDiskIO.read()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t *sub_1CCB6134C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1CCB6376C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 44);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1CCB63790();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_1CCB613F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1CCB6376C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 44);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1CCB63790();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_1CCB61470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1CCB6376C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 44);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1CCB63790();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_1CCB614EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1CCB6376C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 44);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1CCB63790();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1CCB61568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_1CCB6376C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_1CCB63790();
    v10 = a1 + *(int *)(a3 + 44);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1CCB615DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_1CCB6376C();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_1CCB63790();
    v12 = a1 + *(int *)(a4 + 44);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1CCB61658(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1CCB616A4 + 4 * byte_1CCB76D1D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1CCB616D8 + 4 * byte_1CCB76D18[v4]))();
}

uint64_t sub_1CCB616D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB616E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB616E8);
  return result;
}

uint64_t sub_1CCB616F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB616FCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1CCB61700(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB61708(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB61714(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1CCB61754 + 4 * byte_1CCB76D22[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1CCB61774 + 4 * byte_1CCB76D27[v4]))();
}

_BYTE *sub_1CCB61754(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1CCB61774(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCB6177C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCB61784(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1CCB6178C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1CCB61794(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_1CCB617A0()
{
  JUMPOUT(0x1D17B2068);
}

void sub_1CCB617B0()
{
  JUMPOUT(0x1D17B2068);
}

uint64_t sub_1CCB617C0()
{
  return 2;
}

_QWORD *initializeWithCopy for FMIPDemoFamilyMember(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FMIPDemoFamilyMember(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for FMIPDemoFamilyMember(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FMIPDemoFamilyMember(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMIPDemoFamilyMember(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPDemoFamilyMember()
{
  return &type metadata for FMIPDemoFamilyMember;
}

uint64_t sub_1CCB619A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = sub_1CCA14E90(&qword_1EF9E6C18);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB61F94();
  sub_1CCB643CC();
  v8[15] = 0;
  sub_1CCB641E0();
  if (!v1)
  {
    v8[14] = 1;
    sub_1CCB641E0();
    v8[13] = 2;
    sub_1CCB641E0();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1CCB61AE4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656D614E7473616CLL;
  if (*v0 != 1)
    v1 = 0x656C646E6168;
  if (*v0)
    return v1;
  else
    return 0x6D614E7473726966;
}

uint64_t sub_1CCB61B40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1CCB61C08(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1CCB61B64()
{
  sub_1CCB61F94();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB61B8C()
{
  sub_1CCB61F94();
  return sub_1CCB643E4();
}

double sub_1CCB61BB4@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1CCB61D60(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1CCB61BF4(_QWORD *a1)
{
  return sub_1CCB619A8(a1);
}

uint64_t sub_1CCB61C08(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D614E7473726966 && a2 == 0xE900000000000065;
  if (v2 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E7473616CLL && a2 == 0xE800000000000000 || (sub_1CCB642A0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C646E6168 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1CCB642A0();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1CCB61D60@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v5 = sub_1CCA14E90(&qword_1EF9E6C08);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1CCA04DDC(a1, a1[3]);
  sub_1CCB61F94();
  sub_1CCB643B4();
  if (v2)
    return sub_1CCA01CA0((uint64_t)a1);
  v27 = 0;
  v9 = sub_1CCB64150();
  v11 = v10;
  v24 = v9;
  v26 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_1CCB64150();
  v14 = v13;
  v22 = v12;
  v25 = 2;
  swift_bridgeObjectRetain();
  v23 = v14;
  v15 = sub_1CCB64150();
  v17 = v16;
  v18 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  sub_1CCA01CA0((uint64_t)a1);
  swift_bridgeObjectRelease();
  v19 = v23;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v11;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v18;
  a2[5] = v17;
  return result;
}

unint64_t sub_1CCB61F94()
{
  unint64_t result;

  result = qword_1EF9E6C10;
  if (!qword_1EF9E6C10)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7712C, &type metadata for FMIPDemoFamilyMember.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6C10);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPDemoFamilyMember.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1CCB62024 + 4 * byte_1CCB76FE5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1CCB62058 + 4 * byte_1CCB76FE0[v4]))();
}

uint64_t sub_1CCB62058(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB62060(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB62068);
  return result;
}

uint64_t sub_1CCB62074(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB6207CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1CCB62080(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB62088(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPDemoFamilyMember.CodingKeys()
{
  return &type metadata for FMIPDemoFamilyMember.CodingKeys;
}

unint64_t sub_1CCB620A8()
{
  unint64_t result;

  result = qword_1EF9E6C20;
  if (!qword_1EF9E6C20)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB77104, &type metadata for FMIPDemoFamilyMember.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6C20);
  }
  return result;
}

unint64_t sub_1CCB620F0()
{
  unint64_t result;

  result = qword_1EF9E6C28;
  if (!qword_1EF9E6C28)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB77074, &type metadata for FMIPDemoFamilyMember.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6C28);
  }
  return result;
}

unint64_t sub_1CCB62138()
{
  unint64_t result;

  result = qword_1EF9E6C30;
  if (!qword_1EF9E6C30)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7709C, &type metadata for FMIPDemoFamilyMember.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6C30);
  }
  return result;
}

_QWORD *FMIPAlert.__allocating_init(title:message:okButtonLabel:okButtonURL:cancelButtonLabel:cancelButtonURL:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11)
{
  _QWORD *v18;
  char v19;
  _QWORD *v20;

  v18 = (_QWORD *)swift_allocObject();
  v19 = *a11;
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  v18[5] = a4;
  v18[6] = a5;
  v18[7] = a6;
  v20 = (_QWORD *)((char *)v18 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonLabel);
  *v20 = a8;
  v20[1] = a9;
  sub_1CCA24AA4(a7, (uint64_t)v18 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_okButtonURL);
  sub_1CCA24AA4(a10, (uint64_t)v18 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonURL);
  *((_BYTE *)v18 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_type) = v19;
  return v18;
}

FMIPCore::FMIPAlertType_optional __swiftcall FMIPAlertType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  FMIPCore::FMIPAlertType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1CCB640F0();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t FMIPAlertType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB622DC + 4 * byte_1CCB77180[*v0]))(0x726576726573, 0xE600000000000000);
}

unint64_t sub_1CCB622DC()
{
  return 0xD000000000000015;
}

uint64_t sub_1CCB622F8()
{
  return 0x496B726F7774656ELL;
}

uint64_t sub_1CCB62318()
{
  return 0x696C616974696E69;
}

uint64_t sub_1CCB6233C()
{
  return 0x5441434552504544;
}

void sub_1CCB62358(char *a1)
{
  sub_1CCB1DBA8(*a1);
}

void sub_1CCB62364()
{
  char *v0;

  sub_1CCB02FEC(*v0);
}

void sub_1CCB6236C()
{
  __asm { BR              X10 }
}

uint64_t sub_1CCB623A4()
{
  sub_1CCB639F4();
  return swift_bridgeObjectRelease();
}

void sub_1CCB62434(uint64_t a1)
{
  char *v1;

  sub_1CCB030DC(a1, *v1);
}

FMIPCore::FMIPAlertType_optional sub_1CCB6243C(Swift::String *a1)
{
  return FMIPAlertType.init(rawValue:)(*a1);
}

uint64_t sub_1CCB62448()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1CCB62474 + 4 * byte_1CCB7718A[*v0]))();
}

void sub_1CCB62474(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x80000001CCB78510;
}

void sub_1CCB62494(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "networkIssue");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1CCB624B8(char *a1@<X8>)
{
  strcpy(a1, "initialization");
  a1[15] = -18;
}

void sub_1CCB624E0(_QWORD *a1@<X8>)
{
  *a1 = 0x5441434552504544;
  a1[1] = 0xEA00000000004445;
}

uint64_t FMIPAlert.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAlert.message.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAlert.okButtonLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAlert.okButtonURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1CCA24A5C(v1 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_okButtonURL, a1);
}

uint64_t FMIPAlert.cancelButtonLabel.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonLabel);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FMIPAlert.cancelButtonURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1CCA24A5C(v1 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonURL, a1);
}

void FMIPAlert.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_type);
}

uint64_t sub_1CCB625F8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB62628 + 4 * byte_1CCB7718F[a1]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_1CCB62628()
{
  return 0x6567617373656DLL;
}

uint64_t sub_1CCB62640()
{
  return 0x6E6F747475426B6FLL;
}

unint64_t sub_1CCB62674()
{
  return 0xD000000000000011;
}

uint64_t sub_1CCB62690()
{
  return 0x75426C65636E6163;
}

uint64_t sub_1CCB626B4()
{
  return 0x7079547472656C61;
}

uint64_t sub_1CCB626D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1CCB62700 + 4 * byte_1CCB77196[a1]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_1CCB62700()
{
  return 0x6567617373656DLL;
}

uint64_t sub_1CCB62718()
{
  return 0x6E6F747475426B6FLL;
}

unint64_t sub_1CCB6274C()
{
  return 0xD000000000000011;
}

uint64_t sub_1CCB62768()
{
  return 0x75426C65636E6163;
}

uint64_t sub_1CCB6278C()
{
  return 0x7079547472656C61;
}

void sub_1CCB627A8(char *a1)
{
  sub_1CCB1A824(*a1);
}

void sub_1CCB627B4()
{
  char *v0;

  sub_1CCB03ADC(0, *v0);
}

void sub_1CCB627C0(uint64_t a1)
{
  char *v1;

  sub_1CCB58FD4(a1, *v1);
}

void sub_1CCB627C8(uint64_t a1)
{
  char *v1;

  sub_1CCB03ADC(a1, *v1);
}

uint64_t sub_1CCB627D0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB63178();
  *a1 = result;
  return result;
}

uint64_t sub_1CCB627FC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1CCB625F8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1CCB62824()
{
  unsigned __int8 *v0;

  return sub_1CCB626D0(*v0);
}

uint64_t sub_1CCB6282C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1CCB63178();
  *a1 = result;
  return result;
}

uint64_t sub_1CCB62850()
{
  sub_1CCA20574();
  return sub_1CCB643D8();
}

uint64_t sub_1CCB62878()
{
  sub_1CCA20574();
  return sub_1CCB643E4();
}

uint64_t FMIPAlert.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  FMIPAlert.init(from:)(a1);
  return v2;
}

_QWORD *FMIPAlert.init(title:message:okButtonLabel:okButtonURL:cancelButtonLabel:cancelButtonURL:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11)
{
  _QWORD *v11;
  char v12;
  _QWORD *v13;

  v12 = *a11;
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = a3;
  v11[5] = a4;
  v11[6] = a5;
  v11[7] = a6;
  v13 = (_QWORD *)((char *)v11 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonLabel);
  *v13 = a8;
  v13[1] = a9;
  sub_1CCA24AA4(a7, (uint64_t)v11 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_okButtonURL);
  sub_1CCA24AA4(a10, (uint64_t)v11 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonURL);
  *((_BYTE *)v11 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_type) = v12;
  return v11;
}

uint64_t sub_1CCB6296C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  char v20;
  _QWORD v21[2];

  v1 = v0;
  v2 = sub_1CCA14E90(&qword_1ED8A8EE8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v19 - v6;
  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  v21[0] = 0xD000000000000013;
  v21[1] = 0x80000001CCB7F5C0;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v9 = v21[0];
  v8 = v21[1];
  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  sub_1CCB63FB8();
  sub_1CCB63A24();
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v19 = v5;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v20 = *(_BYTE *)(v0 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_type);
  sub_1CCB64060();
  sub_1CCB63A24();
  v21[0] = v9;
  v21[1] = v8;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v21[0];
  v11 = v21[1];
  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  v21[0] = 0xD000000000000011;
  v21[1] = 0x80000001CCB7F600;
  sub_1CCA24A5C(v0 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonURL, (uint64_t)v7);
  v12 = sub_1CCB63490();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v7, 1, v12) == 1)
  {
    sub_1CCA39410((uint64_t)v7);
  }
  else
  {
    sub_1CCB63418();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v12);
  }
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v21[0] = v10;
  v21[1] = v11;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v21[0];
  v15 = v21[1];
  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  sub_1CCB63FB8();
  swift_bridgeObjectRelease();
  strcpy((char *)v21, "okButtonURL: ");
  HIWORD(v21[1]) = -4864;
  v17 = (uint64_t)v19;
  sub_1CCA24A5C(v1 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_okButtonURL, (uint64_t)v19);
  if (v14((char *)v17, 1, v12) == 1)
  {
    sub_1CCA39410(v17);
  }
  else
  {
    sub_1CCB63418();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v12);
  }
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  sub_1CCB63A24();
  v21[0] = v16;
  v21[1] = v15;
  swift_bridgeObjectRetain();
  sub_1CCB63A24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21[0];
}

uint64_t FMIPAlert.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCA39410(v0 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_okButtonURL);
  swift_bridgeObjectRelease();
  sub_1CCA39410(v0 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonURL);
  return v0;
}

uint64_t FMIPAlert.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1CCA39410(v0 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_okButtonURL);
  swift_bridgeObjectRelease();
  sub_1CCA39410(v0 + OBJC_IVAR____TtC8FMIPCore9FMIPAlert_cancelButtonURL);
  return swift_deallocClassInstance();
}

uint64_t sub_1CCB62EF0()
{
  return sub_1CCB6296C();
}

unint64_t sub_1CCB62F14()
{
  unint64_t result;

  result = qword_1EF9E6C38;
  if (!qword_1EF9E6C38)
  {
    result = MEMORY[0x1D17B2068](&protocol conformance descriptor for FMIPAlertType, &type metadata for FMIPAlertType);
    atomic_store(result, (unint64_t *)&qword_1EF9E6C38);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FMIPAlertType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1CCB62FA4 + 4 * byte_1CCB771A2[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1CCB62FD8 + 4 * byte_1CCB7719D[v4]))();
}

uint64_t sub_1CCB62FD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB62FE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB62FE8);
  return result;
}

uint64_t sub_1CCB62FF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB62FFCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1CCB63000(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB63008(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMIPAlertType()
{
  return &type metadata for FMIPAlertType;
}

uint64_t sub_1CCB63024()
{
  return type metadata accessor for FMIPAlert();
}

uint64_t method lookup function for FMIPAlert()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FMIPAlert.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of FMIPAlert.__allocating_init(title:message:okButtonLabel:okButtonURL:cancelButtonLabel:cancelButtonURL:type:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of FMIPAlert.debugDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t storeEnumTagSinglePayload for FMIPAlert.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1CCB630C0 + 4 * byte_1CCB771AC[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1CCB630F4 + 4 * byte_1CCB771A7[v4]))();
}

uint64_t sub_1CCB630F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB630FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1CCB63104);
  return result;
}

uint64_t sub_1CCB63110(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1CCB63118);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1CCB6311C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1CCB63124(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t sub_1CCB63134()
{
  unint64_t result;

  result = qword_1EF9E6C40;
  if (!qword_1EF9E6C40)
  {
    result = MEMORY[0x1D17B2068](&unk_1CCB7741C, &type metadata for FMIPAlert.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF9E6C40);
  }
  return result;
}

uint64_t sub_1CCB63178()
{
  unint64_t v0;

  v0 = sub_1CCB640F0();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

uint64_t sub_1CCB631C0()
{
  return MEMORY[0x1E0D211B8]();
}

uint64_t sub_1CCB631CC()
{
  return MEMORY[0x1E0D211C0]();
}

uint64_t sub_1CCB631D8()
{
  return MEMORY[0x1E0D21220]();
}

uint64_t sub_1CCB631E4()
{
  return MEMORY[0x1E0D21260]();
}

uint64_t sub_1CCB631F0()
{
  return MEMORY[0x1E0D21270]();
}

uint64_t sub_1CCB631FC()
{
  return MEMORY[0x1E0D21278]();
}

uint64_t sub_1CCB63208()
{
  return MEMORY[0x1E0D21280]();
}

uint64_t sub_1CCB63214()
{
  return MEMORY[0x1E0CAE070]();
}

uint64_t sub_1CCB63220()
{
  return MEMORY[0x1E0CAE0A8]();
}

uint64_t sub_1CCB6322C()
{
  return MEMORY[0x1E0CAE0B8]();
}

uint64_t sub_1CCB63238()
{
  return MEMORY[0x1E0CAE3A0]();
}

uint64_t sub_1CCB63244()
{
  return MEMORY[0x1E0CAE3B8]();
}

uint64_t sub_1CCB63250()
{
  return MEMORY[0x1E0CAE3D0]();
}

uint64_t sub_1CCB6325C()
{
  return MEMORY[0x1E0CAE3F0]();
}

uint64_t sub_1CCB63268()
{
  return MEMORY[0x1E0CAE430]();
}

uint64_t sub_1CCB63274()
{
  return MEMORY[0x1E0CAE460]();
}

uint64_t sub_1CCB63280()
{
  return MEMORY[0x1E0CAE488]();
}

uint64_t sub_1CCB6328C()
{
  return MEMORY[0x1E0CAE4A0]();
}

uint64_t sub_1CCB63298()
{
  return MEMORY[0x1E0CAE4B8]();
}

uint64_t sub_1CCB632A4()
{
  return MEMORY[0x1E0CAE670]();
}

uint64_t sub_1CCB632B0()
{
  return MEMORY[0x1E0CAE678]();
}

uint64_t sub_1CCB632BC()
{
  return MEMORY[0x1E0CAE690]();
}

uint64_t sub_1CCB632C8()
{
  return MEMORY[0x1E0CAE768]();
}

uint64_t sub_1CCB632D4()
{
  return MEMORY[0x1E0CAE780]();
}

uint64_t sub_1CCB632E0()
{
  return MEMORY[0x1E0CAE7C8]();
}

uint64_t sub_1CCB632EC()
{
  return MEMORY[0x1E0CAE7D0]();
}

uint64_t sub_1CCB632F8()
{
  return MEMORY[0x1E0CAE7E0]();
}

uint64_t sub_1CCB63304()
{
  return MEMORY[0x1E0CAE800]();
}

uint64_t sub_1CCB63310()
{
  return MEMORY[0x1E0CAE840]();
}

uint64_t sub_1CCB6331C()
{
  return MEMORY[0x1E0CAE890]();
}

uint64_t sub_1CCB63328()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t sub_1CCB63334()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t sub_1CCB63340()
{
  return MEMORY[0x1E0CAF328]();
}

uint64_t sub_1CCB6334C()
{
  return MEMORY[0x1E0CAF5C8]();
}

uint64_t sub_1CCB63358()
{
  return MEMORY[0x1E0CAF5F8]();
}

uint64_t sub_1CCB63364()
{
  return MEMORY[0x1E0CAF608]();
}

uint64_t sub_1CCB63370()
{
  return MEMORY[0x1E0CAF638]();
}

uint64_t sub_1CCB6337C()
{
  return MEMORY[0x1E0CAF668]();
}

uint64_t sub_1CCB63388()
{
  return MEMORY[0x1E0CAF670]();
}

uint64_t sub_1CCB63394()
{
  return MEMORY[0x1E0CAF8D8]();
}

uint64_t sub_1CCB633A0()
{
  return MEMORY[0x1E0CAF8E8]();
}

uint64_t sub_1CCB633AC()
{
  return MEMORY[0x1E0CAF8F8]();
}

uint64_t sub_1CCB633B8()
{
  return MEMORY[0x1E0CAF900]();
}

uint64_t sub_1CCB633C4()
{
  return MEMORY[0x1E0CAF910]();
}

uint64_t sub_1CCB633D0()
{
  return MEMORY[0x1E0CAF920]();
}

uint64_t sub_1CCB633DC()
{
  return MEMORY[0x1E0CAF930]();
}

uint64_t sub_1CCB633E8()
{
  return MEMORY[0x1E0CAF940]();
}

uint64_t sub_1CCB633F4()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_1CCB63400()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_1CCB6340C()
{
  return MEMORY[0x1E0CAFD40]();
}

uint64_t sub_1CCB63418()
{
  return MEMORY[0x1E0CAFDA0]();
}

uint64_t sub_1CCB63424()
{
  return MEMORY[0x1E0CAFDE0]();
}

uint64_t sub_1CCB63430()
{
  return MEMORY[0x1E0CAFDF0]();
}

uint64_t sub_1CCB6343C()
{
  return MEMORY[0x1E0CAFE38]();
}

uint64_t sub_1CCB63448()
{
  return MEMORY[0x1E0CAFE78]();
}

uint64_t sub_1CCB63454()
{
  return MEMORY[0x1E0CAFE80]();
}

uint64_t sub_1CCB63460()
{
  return MEMORY[0x1E0CAFED8]();
}

uint64_t sub_1CCB6346C()
{
  return MEMORY[0x1E0CAFF00]();
}

uint64_t sub_1CCB63478()
{
  return MEMORY[0x1E0CAFF40]();
}

uint64_t sub_1CCB63484()
{
  return MEMORY[0x1E0CAFF90]();
}

uint64_t sub_1CCB63490()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t sub_1CCB6349C()
{
  return MEMORY[0x1E0CB00A0]();
}

uint64_t sub_1CCB634A8()
{
  return MEMORY[0x1E0CB01E0]();
}

uint64_t sub_1CCB634B4()
{
  return MEMORY[0x1E0CB01F0]();
}

uint64_t sub_1CCB634C0()
{
  return MEMORY[0x1E0CB01F8]();
}

uint64_t sub_1CCB634CC()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_1CCB634D8()
{
  return MEMORY[0x1E0CB0270]();
}

uint64_t sub_1CCB634E4()
{
  return MEMORY[0x1E0CB02B0]();
}

uint64_t sub_1CCB634F0()
{
  return MEMORY[0x1E0CB03C0]();
}

uint64_t sub_1CCB634FC()
{
  return MEMORY[0x1E0CB0580]();
}

uint64_t sub_1CCB63508()
{
  return MEMORY[0x1E0CB0588]();
}

uint64_t sub_1CCB63514()
{
  return MEMORY[0x1E0CB05A8]();
}

uint64_t sub_1CCB63520()
{
  return MEMORY[0x1E0CB05D8]();
}

uint64_t sub_1CCB6352C()
{
  return MEMORY[0x1E0CB0680]();
}

uint64_t sub_1CCB63538()
{
  return MEMORY[0x1E0CB06B8]();
}

uint64_t sub_1CCB63544()
{
  return MEMORY[0x1E0CB06D0]();
}

uint64_t sub_1CCB63550()
{
  return MEMORY[0x1E0CB06D8]();
}

uint64_t sub_1CCB6355C()
{
  return MEMORY[0x1E0CB0708]();
}

uint64_t sub_1CCB63568()
{
  return MEMORY[0x1E0CB07C0]();
}

uint64_t sub_1CCB63574()
{
  return MEMORY[0x1E0CB07C8]();
}

uint64_t sub_1CCB63580()
{
  return MEMORY[0x1E0CB07E8]();
}

uint64_t sub_1CCB6358C()
{
  return MEMORY[0x1E0CB07F8]();
}

uint64_t sub_1CCB63598()
{
  return MEMORY[0x1E0CB0810]();
}

uint64_t sub_1CCB635A4()
{
  return MEMORY[0x1E0CB0860]();
}

uint64_t sub_1CCB635B0()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t sub_1CCB635BC()
{
  return MEMORY[0x1E0CB0900]();
}

uint64_t sub_1CCB635C8()
{
  return MEMORY[0x1E0CB0910]();
}

uint64_t sub_1CCB635D4()
{
  return MEMORY[0x1E0CB0930]();
}

uint64_t sub_1CCB635E0()
{
  return MEMORY[0x1E0CB0948]();
}

uint64_t sub_1CCB635EC()
{
  return MEMORY[0x1E0CB0958]();
}

uint64_t sub_1CCB635F8()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t sub_1CCB63604()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t sub_1CCB63610()
{
  return MEMORY[0x1E0CB0A90]();
}

uint64_t sub_1CCB6361C()
{
  return MEMORY[0x1E0CB0BF8]();
}

uint64_t sub_1CCB63628()
{
  return MEMORY[0x1E0CB0C18]();
}

uint64_t sub_1CCB63634()
{
  return MEMORY[0x1E0CB0E38]();
}

uint64_t sub_1CCB63640()
{
  return MEMORY[0x1E0CB10C8]();
}

uint64_t sub_1CCB6364C()
{
  return MEMORY[0x1E0CB11B8]();
}

uint64_t sub_1CCB63658()
{
  return MEMORY[0x1E0CB11E0]();
}

uint64_t sub_1CCB63664()
{
  return MEMORY[0x1E0CB11F0]();
}

uint64_t sub_1CCB63670()
{
  return MEMORY[0x1E0C9B8A8]();
}

uint64_t sub_1CCB6367C()
{
  return MEMORY[0x1E0D20A88]();
}

uint64_t sub_1CCB63688()
{
  return MEMORY[0x1E0D20A90]();
}

uint64_t sub_1CCB63694()
{
  return MEMORY[0x1E0D20A98]();
}

uint64_t sub_1CCB636A0()
{
  return MEMORY[0x1E0D20AB0]();
}

uint64_t sub_1CCB636AC()
{
  return MEMORY[0x1E0D20AC0]();
}

uint64_t sub_1CCB636B8()
{
  return MEMORY[0x1E0D20AC8]();
}

uint64_t sub_1CCB636C4()
{
  return MEMORY[0x1E0D20AE0]();
}

uint64_t sub_1CCB636D0()
{
  return MEMORY[0x1E0D20AE8]();
}

uint64_t sub_1CCB636DC()
{
  return MEMORY[0x1E0D20AF8]();
}

uint64_t sub_1CCB636E8()
{
  return MEMORY[0x1E0D20B08]();
}

uint64_t sub_1CCB636F4()
{
  return MEMORY[0x1E0D20B10]();
}

uint64_t sub_1CCB63700()
{
  return MEMORY[0x1E0D20B18]();
}

uint64_t sub_1CCB6370C()
{
  return MEMORY[0x1E0D20B20]();
}

uint64_t sub_1CCB63718()
{
  return MEMORY[0x1E0D20B28]();
}

uint64_t sub_1CCB63724()
{
  return MEMORY[0x1E0D20B30]();
}

uint64_t sub_1CCB63730()
{
  return MEMORY[0x1E0D20B38]();
}

uint64_t sub_1CCB6373C()
{
  return MEMORY[0x1E0D20B48]();
}

uint64_t sub_1CCB63748()
{
  return MEMORY[0x1E0D212E8]();
}

uint64_t sub_1CCB63754()
{
  return MEMORY[0x1E0D212F0]();
}

uint64_t sub_1CCB63760()
{
  return MEMORY[0x1E0D212F8]();
}

uint64_t sub_1CCB6376C()
{
  return MEMORY[0x1E0D21300]();
}

uint64_t sub_1CCB63778()
{
  return MEMORY[0x1E0D21320]();
}

uint64_t sub_1CCB63784()
{
  return MEMORY[0x1E0D21328]();
}

uint64_t sub_1CCB63790()
{
  return MEMORY[0x1E0D21330]();
}

uint64_t sub_1CCB6379C()
{
  return MEMORY[0x1E0D21350]();
}

uint64_t sub_1CCB637A8()
{
  return MEMORY[0x1E0D21358]();
}

uint64_t sub_1CCB637B4()
{
  return MEMORY[0x1E0DEF0A0]();
}

uint64_t sub_1CCB637C0()
{
  return MEMORY[0x1E0DEF0A8]();
}

uint64_t sub_1CCB637CC()
{
  return MEMORY[0x1E0DEF0B0]();
}

uint64_t sub_1CCB637D8()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t sub_1CCB637E4()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t sub_1CCB637F0()
{
  return MEMORY[0x1E0DF2250]();
}

uint64_t sub_1CCB637FC()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t sub_1CCB63808()
{
  return MEMORY[0x1E0DEF4B8]();
}

uint64_t sub_1CCB63814()
{
  return MEMORY[0x1E0DEF4E8]();
}

uint64_t sub_1CCB63820()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t sub_1CCB6382C()
{
  return MEMORY[0x1E0DEF560]();
}

uint64_t sub_1CCB63838()
{
  return MEMORY[0x1E0DEF570]();
}

uint64_t sub_1CCB63844()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t sub_1CCB63850()
{
  return MEMORY[0x1E0DEF580]();
}

uint64_t sub_1CCB6385C()
{
  return MEMORY[0x1E0DEF598]();
}

uint64_t sub_1CCB63868()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t sub_1CCB63874()
{
  return MEMORY[0x1E0DEF698]();
}

uint64_t sub_1CCB63880()
{
  return MEMORY[0x1E0DEF6B8]();
}

uint64_t sub_1CCB6388C()
{
  return MEMORY[0x1E0DEF748]();
}

uint64_t sub_1CCB63898()
{
  return MEMORY[0x1E0DEF758]();
}

uint64_t sub_1CCB638A4()
{
  return MEMORY[0x1E0DEF778]();
}

uint64_t sub_1CCB638B0()
{
  return MEMORY[0x1E0DE9D60]();
}

uint64_t sub_1CCB638BC()
{
  return MEMORY[0x1E0DE9D78]();
}

uint64_t sub_1CCB638C8()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1CCB638D4()
{
  return MEMORY[0x1E0CB17F8]();
}

uint64_t sub_1CCB638E0()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t sub_1CCB638EC()
{
  return MEMORY[0x1E0DE9E38]();
}

uint64_t sub_1CCB638F8()
{
  return MEMORY[0x1E0DE9E70]();
}

uint64_t sub_1CCB63904()
{
  return MEMORY[0x1E0DE9E78]();
}

uint64_t sub_1CCB63910()
{
  return MEMORY[0x1E0DEA048]();
}

uint64_t sub_1CCB6391C()
{
  return MEMORY[0x1E0DEA0A0]();
}

uint64_t sub_1CCB63928()
{
  return MEMORY[0x1E0DEA0A8]();
}

uint64_t sub_1CCB63934()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t sub_1CCB63940()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_1CCB6394C()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t sub_1CCB63958()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_1CCB63964()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1CCB63970()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t sub_1CCB6397C()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t sub_1CCB63988()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1CCB63994()
{
  return MEMORY[0x1E0CB19B0]();
}

uint64_t sub_1CCB639A0()
{
  return MEMORY[0x1E0CB19C0]();
}

uint64_t sub_1CCB639AC()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_1CCB639B8()
{
  return MEMORY[0x1E0DEA610]();
}

uint64_t sub_1CCB639C4()
{
  return MEMORY[0x1E0DEA658]();
}

uint64_t sub_1CCB639D0()
{
  return MEMORY[0x1E0DEA698]();
}

uint64_t sub_1CCB639DC()
{
  return MEMORY[0x1E0DEA6C0]();
}

uint64_t sub_1CCB639E8()
{
  return MEMORY[0x1E0DEA6F8]();
}

uint64_t sub_1CCB639F4()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1CCB63A00()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t sub_1CCB63A0C()
{
  return MEMORY[0x1E0DEA7C0]();
}

uint64_t sub_1CCB63A18()
{
  return MEMORY[0x1E0DEA7D0]();
}

uint64_t sub_1CCB63A24()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1CCB63A30()
{
  return MEMORY[0x1E0DEA828]();
}

uint64_t sub_1CCB63A3C()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1CCB63A48()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t sub_1CCB63A54()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t sub_1CCB63A60()
{
  return MEMORY[0x1E0DEA878]();
}

uint64_t sub_1CCB63A6C()
{
  return MEMORY[0x1E0DEA880]();
}

uint64_t sub_1CCB63A78()
{
  return MEMORY[0x1E0DEA8F8]();
}

uint64_t sub_1CCB63A84()
{
  return MEMORY[0x1E0DEA908]();
}

uint64_t sub_1CCB63A90()
{
  return MEMORY[0x1E0DEA940]();
}

uint64_t sub_1CCB63A9C()
{
  return MEMORY[0x1E0DEA9C0]();
}

uint64_t sub_1CCB63AA8()
{
  return MEMORY[0x1E0DEAA08]();
}

uint64_t sub_1CCB63AB4()
{
  return MEMORY[0x1E0DEAA40]();
}

uint64_t sub_1CCB63AC0()
{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t sub_1CCB63ACC()
{
  return MEMORY[0x1E0DEAB40]();
}

uint64_t sub_1CCB63AD8()
{
  return MEMORY[0x1E0DEACA0]();
}

uint64_t sub_1CCB63AE4()
{
  return MEMORY[0x1E0DEACB8]();
}

uint64_t sub_1CCB63AF0()
{
  return MEMORY[0x1E0DEAD18]();
}

uint64_t sub_1CCB63AFC()
{
  return MEMORY[0x1E0DEAD30]();
}

uint64_t sub_1CCB63B08()
{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t sub_1CCB63B14()
{
  return MEMORY[0x1E0D212B0]();
}

uint64_t sub_1CCB63B20()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_1CCB63B2C()
{
  return MEMORY[0x1E0CB1AE0]();
}

uint64_t sub_1CCB63B38()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_1CCB63B44()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t sub_1CCB63B50()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_1CCB63B5C()
{
  return MEMORY[0x1E0DEADC8]();
}

uint64_t sub_1CCB63B68()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t sub_1CCB63B74()
{
  return MEMORY[0x1E0DEADF0]();
}

uint64_t sub_1CCB63B80()
{
  return MEMORY[0x1E0DEAE10]();
}

uint64_t sub_1CCB63B8C()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_1CCB63B98()
{
  return MEMORY[0x1E0DEAE38]();
}

uint64_t sub_1CCB63BA4()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t sub_1CCB63BB0()
{
  return MEMORY[0x1E0DEAE60]();
}

uint64_t sub_1CCB63BBC()
{
  return MEMORY[0x1E0DEAE80]();
}

uint64_t sub_1CCB63BC8()
{
  return MEMORY[0x1E0DEAE98]();
}

uint64_t sub_1CCB63BD4()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t sub_1CCB63BE0()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t sub_1CCB63BEC()
{
  return MEMORY[0x1E0DF05D0]();
}

uint64_t sub_1CCB63BF8()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t sub_1CCB63C04()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t sub_1CCB63C10()
{
  return MEMORY[0x1E0DEAFE8]();
}

uint64_t sub_1CCB63C1C()
{
  return MEMORY[0x1E0DEB030]();
}

uint64_t sub_1CCB63C28()
{
  return MEMORY[0x1E0DEB110]();
}

uint64_t sub_1CCB63C34()
{
  return MEMORY[0x1E0CB1BB0]();
}

uint64_t sub_1CCB63C40()
{
  return MEMORY[0x1E0CB1BD8]();
}

uint64_t sub_1CCB63C4C()
{
  return MEMORY[0x1E0DEB220]();
}

uint64_t sub_1CCB63C58()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t sub_1CCB63C64()
{
  return MEMORY[0x1E0DEB268]();
}

uint64_t sub_1CCB63C70()
{
  return MEMORY[0x1E0DEB2A8]();
}

uint64_t sub_1CCB63C7C()
{
  return MEMORY[0x1E0DEB2E8]();
}

uint64_t sub_1CCB63C88()
{
  return MEMORY[0x1E0DEB2F0]();
}

uint64_t sub_1CCB63C94()
{
  return MEMORY[0x1E0DEB310]();
}

uint64_t sub_1CCB63CA0()
{
  return MEMORY[0x1E0DEB340]();
}

uint64_t sub_1CCB63CAC()
{
  return MEMORY[0x1E0DEB388]();
}

uint64_t sub_1CCB63CB8()
{
  return MEMORY[0x1E0DEB7B8]();
}

uint64_t sub_1CCB63CC4()
{
  return MEMORY[0x1E0C9B8C8]();
}

uint64_t sub_1CCB63CD0()
{
  return MEMORY[0x1E0CB1C90]();
}

uint64_t sub_1CCB63CDC()
{
  return MEMORY[0x1E0C9B8E0]();
}

uint64_t sub_1CCB63CE8()
{
  return MEMORY[0x1E0C9B8E8]();
}

uint64_t sub_1CCB63CF4()
{
  return MEMORY[0x1E0C9B900]();
}

uint64_t sub_1CCB63D00()
{
  return MEMORY[0x1E0C9B938]();
}

uint64_t sub_1CCB63D0C()
{
  return MEMORY[0x1E0CB1CB0]();
}

uint64_t sub_1CCB63D18()
{
  return MEMORY[0x1E0DF2270]();
}

uint64_t sub_1CCB63D24()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t sub_1CCB63D30()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_1CCB63D3C()
{
  return MEMORY[0x1E0DF2288]();
}

uint64_t sub_1CCB63D48()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t sub_1CCB63D54()
{
  return MEMORY[0x1E0DEF7D8]();
}

uint64_t sub_1CCB63D60()
{
  return MEMORY[0x1E0DEF800]();
}

uint64_t sub_1CCB63D6C()
{
  return MEMORY[0x1E0DEF810]();
}

uint64_t sub_1CCB63D78()
{
  return MEMORY[0x1E0DEF840]();
}

uint64_t sub_1CCB63D84()
{
  return MEMORY[0x1E0DEF8E0]();
}

uint64_t sub_1CCB63D90()
{
  return MEMORY[0x1E0DEF8E8]();
}

uint64_t sub_1CCB63D9C()
{
  return MEMORY[0x1E0DEF8F8]();
}

uint64_t sub_1CCB63DA8()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t sub_1CCB63DB4()
{
  return MEMORY[0x1E0DEF910]();
}

uint64_t sub_1CCB63DC0()
{
  return MEMORY[0x1E0DEF920]();
}

uint64_t sub_1CCB63DCC()
{
  return MEMORY[0x1E0CB20D0]();
}

uint64_t sub_1CCB63DD8()
{
  return MEMORY[0x1E0CB20E0]();
}

uint64_t sub_1CCB63DE4()
{
  return MEMORY[0x1E0DEFCD8]();
}

uint64_t sub_1CCB63DF0()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t sub_1CCB63DFC()
{
  return MEMORY[0x1E0DEFCE8]();
}

uint64_t sub_1CCB63E08()
{
  return MEMORY[0x1E0DEFCF0]();
}

uint64_t sub_1CCB63E14()
{
  return MEMORY[0x1E0CB2130]();
}

uint64_t sub_1CCB63E20()
{
  return MEMORY[0x1E0DEB930]();
}

uint64_t sub_1CCB63E2C()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_1CCB63E38()
{
  return MEMORY[0x1E0DEBB50]();
}

uint64_t sub_1CCB63E44()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_1CCB63E50()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_1CCB63E5C()
{
  return MEMORY[0x1E0CB2400]();
}

uint64_t sub_1CCB63E68()
{
  return MEMORY[0x1E0CB24A8]();
}

uint64_t sub_1CCB63E74()
{
  return MEMORY[0x1E0CB24B0]();
}

uint64_t sub_1CCB63E80()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t sub_1CCB63E8C()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t sub_1CCB63E98()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t sub_1CCB63EA4()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t sub_1CCB63EB0()
{
  return MEMORY[0x1E0DEC078]();
}

uint64_t sub_1CCB63EBC()
{
  return MEMORY[0x1E0DEC0A8]();
}

uint64_t sub_1CCB63EC8()
{
  return MEMORY[0x1E0DEC0B0]();
}

uint64_t sub_1CCB63ED4()
{
  return MEMORY[0x1E0DEC0B8]();
}

uint64_t sub_1CCB63EE0()
{
  return MEMORY[0x1E0DEC0D0]();
}

uint64_t sub_1CCB63EEC()
{
  return MEMORY[0x1E0DEC0D8]();
}

uint64_t sub_1CCB63EF8()
{
  return MEMORY[0x1E0DEC0E0]();
}

uint64_t sub_1CCB63F04()
{
  return MEMORY[0x1E0DEC0F8]();
}

uint64_t sub_1CCB63F10()
{
  return MEMORY[0x1E0DEC100]();
}

uint64_t sub_1CCB63F1C()
{
  return MEMORY[0x1E0DEC108]();
}

uint64_t sub_1CCB63F28()
{
  return MEMORY[0x1E0DEC110]();
}

uint64_t sub_1CCB63F34()
{
  return MEMORY[0x1E0DEC118]();
}

uint64_t sub_1CCB63F40()
{
  return MEMORY[0x1E0DEC128]();
}

uint64_t sub_1CCB63F4C()
{
  return MEMORY[0x1E0DEC168]();
}

uint64_t sub_1CCB63F58()
{
  return MEMORY[0x1E0DEC178]();
}

uint64_t sub_1CCB63F64()
{
  return MEMORY[0x1E0DEC1B0]();
}

uint64_t sub_1CCB63F70()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_1CCB63F7C()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_1CCB63F88()
{
  return MEMORY[0x1E0DEC258]();
}

uint64_t sub_1CCB63F94()
{
  return MEMORY[0x1E0DEC260]();
}

uint64_t sub_1CCB63FA0()
{
  return MEMORY[0x1E0DEC280]();
}

uint64_t sub_1CCB63FAC()
{
  return MEMORY[0x1E0DEC2A0]();
}

uint64_t sub_1CCB63FB8()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_1CCB63FC4()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1CCB63FD0()
{
  return MEMORY[0x1E0DEC3D8]();
}

uint64_t sub_1CCB63FDC()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_1CCB63FE8()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t sub_1CCB63FF4()
{
  return MEMORY[0x1E0DEC470]();
}

uint64_t sub_1CCB64000()
{
  return MEMORY[0x1E0DEC498]();
}

uint64_t sub_1CCB6400C()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1CCB64018()
{
  return MEMORY[0x1E0DEC590]();
}

uint64_t sub_1CCB64024()
{
  return MEMORY[0x1E0DEC5F8]();
}

uint64_t sub_1CCB64030()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t sub_1CCB6403C()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t sub_1CCB64048()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t sub_1CCB64054()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t sub_1CCB64060()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t sub_1CCB6406C()
{
  return MEMORY[0x1E0D212C0]();
}

uint64_t sub_1CCB64078()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_1CCB64084()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_1CCB64090()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_1CCB6409C()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1CCB640A8()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1CCB640B4()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1CCB640C0()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_1CCB640CC()
{
  return MEMORY[0x1E0CB25E8]();
}

uint64_t sub_1CCB640D8()
{
  return MEMORY[0x1E0CB25F0]();
}

uint64_t sub_1CCB640E4()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t sub_1CCB640F0()
{
  return MEMORY[0x1E0DECF28]();
}

uint64_t sub_1CCB640FC()
{
  return MEMORY[0x1E0DECF38]();
}

uint64_t sub_1CCB64108()
{
  return MEMORY[0x1E0DECF40]();
}

uint64_t sub_1CCB64114()
{
  return MEMORY[0x1E0D20B50]();
}

uint64_t sub_1CCB64120()
{
  return MEMORY[0x1E0DECF58]();
}

uint64_t sub_1CCB6412C()
{
  return MEMORY[0x1E0DECF60]();
}

uint64_t sub_1CCB64138()
{
  return MEMORY[0x1E0DECF68]();
}

uint64_t sub_1CCB64144()
{
  return MEMORY[0x1E0DECF88]();
}

uint64_t sub_1CCB64150()
{
  return MEMORY[0x1E0DECFC0]();
}

uint64_t sub_1CCB6415C()
{
  return MEMORY[0x1E0DECFC8]();
}

uint64_t sub_1CCB64168()
{
  return MEMORY[0x1E0DECFD0]();
}

uint64_t sub_1CCB64174()
{
  return MEMORY[0x1E0DECFE0]();
}

uint64_t sub_1CCB64180()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t sub_1CCB6418C()
{
  return MEMORY[0x1E0DED010]();
}

uint64_t sub_1CCB64198()
{
  return MEMORY[0x1E0DED038]();
}

uint64_t sub_1CCB641A4()
{
  return MEMORY[0x1E0DED048]();
}

uint64_t sub_1CCB641B0()
{
  return MEMORY[0x1E0DED070]();
}

uint64_t sub_1CCB641BC()
{
  return MEMORY[0x1E0DED090]();
}

uint64_t sub_1CCB641C8()
{
  return MEMORY[0x1E0DED0A0]();
}

uint64_t sub_1CCB641D4()
{
  return MEMORY[0x1E0DED0C0]();
}

uint64_t sub_1CCB641E0()
{
  return MEMORY[0x1E0DED0F0]();
}

uint64_t sub_1CCB641EC()
{
  return MEMORY[0x1E0DED0F8]();
}

uint64_t sub_1CCB641F8()
{
  return MEMORY[0x1E0DED100]();
}

uint64_t sub_1CCB64204()
{
  return MEMORY[0x1E0DED110]();
}

uint64_t sub_1CCB64210()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t sub_1CCB6421C()
{
  return MEMORY[0x1E0DED140]();
}

uint64_t sub_1CCB64228()
{
  return MEMORY[0x1E0DED170]();
}

uint64_t sub_1CCB64234()
{
  return MEMORY[0x1E0DED1B0]();
}

uint64_t sub_1CCB64240()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1CCB6424C()
{
  return MEMORY[0x1E0DF0DD0]();
}

uint64_t sub_1CCB64258()
{
  return MEMORY[0x1E0DED260]();
}

uint64_t sub_1CCB64264()
{
  return MEMORY[0x1E0DED290]();
}

uint64_t sub_1CCB64270()
{
  return MEMORY[0x1E0DED3A0]();
}

uint64_t sub_1CCB6427C()
{
  return MEMORY[0x1E0DED3D0]();
}

uint64_t sub_1CCB64288()
{
  return MEMORY[0x1E0DED4A0]();
}

uint64_t sub_1CCB64294()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t sub_1CCB642A0()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1CCB642AC()
{
  return MEMORY[0x1E0DED610]();
}

uint64_t sub_1CCB642B8()
{
  return MEMORY[0x1E0DED770]();
}

uint64_t sub_1CCB642C4()
{
  return MEMORY[0x1E0DED998]();
}

uint64_t sub_1CCB642D0()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_1CCB642DC()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1CCB642E8()
{
  return MEMORY[0x1E0CB2628]();
}

uint64_t sub_1CCB642F4()
{
  return MEMORY[0x1E0CB2640]();
}

uint64_t sub_1CCB64300()
{
  return MEMORY[0x1E0CB2650]();
}

uint64_t sub_1CCB6430C()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_1CCB64318()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_1CCB64324()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_1CCB64330()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_1CCB6433C()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1CCB64348()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1CCB64354()
{
  return MEMORY[0x1E0DEDF18]();
}

uint64_t sub_1CCB64360()
{
  return MEMORY[0x1E0DEDF28]();
}

uint64_t sub_1CCB6436C()
{
  return MEMORY[0x1E0DEDF30]();
}

uint64_t sub_1CCB64378()
{
  return MEMORY[0x1E0DEDF38]();
}

uint64_t sub_1CCB64384()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_1CCB64390()
{
  return MEMORY[0x1E0DEDF48]();
}

uint64_t sub_1CCB6439C()
{
  return MEMORY[0x1E0DEE030]();
}

uint64_t sub_1CCB643A8()
{
  return MEMORY[0x1E0DEE228]();
}

uint64_t sub_1CCB643B4()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t sub_1CCB643C0()
{
  return MEMORY[0x1E0DEE258]();
}

uint64_t sub_1CCB643CC()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t sub_1CCB643D8()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t sub_1CCB643E4()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t sub_1CCB643F0()
{
  return MEMORY[0x1E0DEE978]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15428]();
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x1E0C97DF0](alloc, str, attributes);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

uint64_t CFPhoneNumberCreate()
{
  return MEMORY[0x1E0D17838]();
}

uint64_t CFPhoneNumberCreateString()
{
  return MEMORY[0x1E0D17848]();
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDE8]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

void CGContextAddEllipseInRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9BFC8](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C408](c, color);
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x1E0C9C5D8](provider);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x1E0C9CBA8](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC308](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC338](data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1E0CBC358](idst);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9CC38](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3C8](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t CPPhoneNumberCopyActiveCountryCode()
{
  return MEMORY[0x1E0CFA330]();
}

uint64_t CPPhoneNumberCopyHomeCountryCode()
{
  return MEMORY[0x1E0CFA360]();
}

uint64_t CPPhoneNumberCopyLastKnownNetworkCountryCode()
{
  return MEMORY[0x1E0CFA368]();
}

uint64_t CPPhoneNumberCopyNetworkCountryCode()
{
  return MEMORY[0x1E0CFA370]();
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1E0CA7A70](descriptor, matrix, size);
}

CTFontDescriptorRef CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes)
{
  return (CTFontDescriptorRef)MEMORY[0x1E0CA7B00](attributes);
}

void CTFrameDraw(CTFrameRef frame, CGContextRef context)
{
  MEMORY[0x1E0CA7DA0](frame, context);
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  return (CTFrameRef)MEMORY[0x1E0CA7DD8](framesetter, stringRange.location, stringRange.length, path, frameAttributes);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x1E0CA7DE0](attrString);
}

CGSize CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter, CFRange stringRange, CFDictionaryRef frameAttributes, CGSize constraints, CFRange *fitRange)
{
  double v5;
  double v6;
  CGSize result;

  MEMORY[0x1E0CA7DF8](framesetter, stringRange.location, stringRange.length, frameAttributes, fitRange, (__n128)constraints, *(__n128 *)&constraints.height);
  result.height = v6;
  result.width = v5;
  return result;
}

uint64_t MGCopyAnswerWithError()
{
  return MEMORY[0x1E0DE2B38]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return MEMORY[0x1E0D4E4A0]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x1E0D4E4D0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CTServerConnectionCopyCellularUsagePolicy()
{
  return MEMORY[0x1E0CA6E80]();
}

uint64_t _CTServerConnectionCreateOnTargetQueue()
{
  return MEMORY[0x1E0CA6F30]();
}

uint64_t _CTServerConnectionGetCellularDataIsEnabled()
{
  return MEMORY[0x1E0CA6F88]();
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x1E0DE7960]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x1E0DE7970]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1E0C80FC0](dso, description, activity, *(_QWORD *)&flags);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1E0DEEA28]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x1E0DEEA50]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

void os_activity_apply(os_activity_t activity, os_block_t block)
{
  MEMORY[0x1E0C844F8](activity, block);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1E0DEEB40]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1E0DF0F98]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1E0DF0FA8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x1E0DF0FB0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1E0DF0FB8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1E0DF0FC0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1E0DEEB88]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x1E0DEEB90]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x1E0DEEC98]();
}

uint64_t swift_getFunctionTypeMetadata2()
{
  return MEMORY[0x1E0DEECA0]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1E0DEED08]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1E0DEED70]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1E0DEEE08]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1E0DEEE88]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1E0DEEE90]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1E0DEEF20]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1E0DEEF98]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1E0DEEFA0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1E0DEEFA8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

sysdir_search_path_enumeration_state sysdir_get_next_search_path_enumeration(sysdir_search_path_enumeration_state state, char *path)
{
  return MEMORY[0x1E0C857B8](*(_QWORD *)&state, path);
}

