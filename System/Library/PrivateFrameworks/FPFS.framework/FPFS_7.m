uint64_t sub_23AEC5248(void *a1)
{
  id v2;
  void *v3;
  unsigned int v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  id v14;
  uint64_t result;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v2 = objc_msgSend(a1, sel_providerID);
  sub_23B1C63E0();
  v3 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v3, sel_fp_isiCloudDriveIdentifier);

  if (!v4)
    return 0;
  v5 = objc_msgSend(a1, sel_parentFormerIdentifier);
  if (v5)
  {
    v6 = v5;
    v7 = (void *)*MEMORY[0x24BDC8198];
    v8 = sub_23B1C63E0();
    v10 = v9;
    if (v8 != sub_23B1C63E0() || v10 != v11)
    {
      v13 = sub_23B1C7388();
      v14 = v7;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v13 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    v21 = v7;

    swift_bridgeObjectRelease_n();
    return 0;
  }
  if (!objc_msgSend(a1, sel_isContainer))
    goto LABEL_19;
LABEL_8:
  v16 = objc_msgSend(a1, sel_parentItemIdentifier);
  if (qword_2542E1FE0 != -1)
    swift_once();
  v17 = sub_23B1C63E0();
  v19 = v18;
  if (v17 == sub_23B1C63E0() && v19 == v20)
  {

    swift_bridgeObjectRelease_n();
    return 1;
  }
  v22 = sub_23B1C7388();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
    return 1;
LABEL_19:
  v23 = objc_msgSend(a1, sel_filename);
  v24 = sub_23B1C63E0();
  v26 = v25;

  if (v24 == 0x746E656D75636F44 && v26 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v27 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    return v27 & 1;
  }
}

uint64_t sub_23AEC5500(void *a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t result;
  void *v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  void (*v38)(uint64_t *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int *v47;
  int *v48;
  id v49;
  unsigned __int8 v50;
  void *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;

  v61 = a5;
  v62 = a4;
  v63 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(qword_2542E02D0);
  MEMORY[0x24BDAC7A8](v7);
  v57 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23B1C6050();
  v54 = *(_QWORD *)(v9 - 8);
  v55 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v56 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23B1C60A4();
  v59 = *(_QWORD *)(v11 - 8);
  v60 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v58 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v52 = (void **)((char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = sub_23B1C60EC();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (void **)((char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v53 = a2;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = *(void **)(v23 + 64);
  *v22 = v24;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v22, *MEMORY[0x24BEE5610], v19);
  v25 = v24;
  LOBYTE(v24) = sub_23B1C6104();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v20 + 8))(v22, v19);
  if ((v24 & 1) != 0)
  {
    if ((sub_23AEC5248(a1) & 1) == 0)
      return 0;
    v51 = a1;
    v27 = *(void **)(v23 + 32);
    v28 = v62;
    v71 = v62;
    v68 = 0x746E656D75636F44;
    v69 = 0xE900000000000073;
    v70 = v63;
    v66 = 58;
    v67 = 0xE100000000000000;
    v64 = 47;
    v65 = 0xE100000000000000;
    sub_23AAA420C();
    swift_retain();
    v29 = sub_23B1C6CF8();
    v68 = 0;
    LOBYTE(v69) = -1;
    v30 = v27;
    v31 = v72;
    v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v27 + 256))(&v70, v29, v32, &v68);
    if (v31)
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      v34 = v33;
      swift_release();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v34 + 16))
      {
        v35 = *(_QWORD *)(v34 + 32);
        v36 = *(_BYTE *)(v34 + 40);
        swift_bridgeObjectRelease();
        v37 = *(_QWORD *)(v23 + 32);
        v68 = v35;
        LOBYTE(v69) = v36;
        v38 = *(void (**)(uint64_t *, uint64_t))(*(_QWORD *)v37 + 240);
        swift_retain();
        v38(&v68, 1);
        swift_release();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
        {
          v45 = (uint64_t)v15;
          v46 = v52;
          sub_23AEC6300(v45, (uint64_t)v52);
          v47 = (int *)sub_23AAF7AC0(MEMORY[0x24BEE4AF8]);
          v48 = sub_23AA96724(v46, 0, 0, v47);
          swift_bridgeObjectRelease();
          v49 = objc_msgSend((id)objc_opt_self(), sel_appLibraryFromContainerItem_documentsItem_, v51, v48);
          v30 = v49;
          if (v49)
          {
            v50 = objc_msgSend(v49, sel_isValidAppLibrary);

            sub_23AA8A05C((uint64_t)v46, (uint64_t *)&unk_2542E6B00);
            if ((v50 & 1) == 0)
            {

              return 0;
            }
          }
          else
          {
            sub_23AA8A05C((uint64_t)v46, (uint64_t *)&unk_2542E6B00);

          }
          return (uint64_t)v30;
        }
        sub_23AA8A05C((uint64_t)v15, (uint64_t *)&unk_2542E4750);
        v28 = v62;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      qos_class_self();
      v39 = (uint64_t)v57;
      sub_23B1C6038();
      v41 = v54;
      v40 = v55;
      v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v39, 1, v55);
      v43 = v63;
      if (v42 == 1)
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v56, *MEMORY[0x24BEE5498], v40);
        sub_23AA8A05C(v39, qword_2542E02D0);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v56, v39, v40);
      }
      v44 = (uint64_t)v58;
      sub_23B1C608C();

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v44, v60);
      return 0;
    }
    return (uint64_t)v30;
  }
  __break(1u);
  return result;
}

unint64_t sub_23AEC5A50(unint64_t a1)
{
  char **v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  id v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unsigned int v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  id v37;
  uint64_t v38;
  BOOL v39;
  void *v40;
  char *v41;
  unint64_t result;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  v2 = a1;
  if (!a1)
    goto LABEL_79;
  v3 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v5 = v4 - 3;
    if (v4 >= 3)
      goto LABEL_4;
LABEL_78:
    swift_bridgeObjectRelease();
LABEL_79:
    swift_bridgeObjectRetain();
    return v2;
  }
  swift_bridgeObjectRetain();
  v4 = sub_23B1C7088();
  v5 = v4 - 3;
  if (v4 < 3)
    goto LABEL_78;
LABEL_4:
  v6 = v4 - 1;
  v7 = v2 & 0xC000000000000001;
  if ((v2 & 0xC000000000000001) != 0)
  {
    v8 = (id)MEMORY[0x23B85F860](v6, v2);
  }
  else
  {
    if (v6 >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    v8 = *(id *)(v2 + 8 * v6 + 32);
  }
  v9 = v8;
  v10 = (uint64_t)objc_msgSend(v8, sel_providerID);

  sub_23B1C63E0();
  v11 = sub_23B1C63BC();
  swift_bridgeObjectRelease();
  LODWORD(v9) = objc_msgSend((id)v11, sel_fp_isiCloudDriveIdentifier);

  if (!(_DWORD)v9)
    goto LABEL_78;
  v51 = v2;
  if (v3)
  {
    swift_bridgeObjectRetain();
    v12 = sub_23B1C7088();
  }
  else
  {
    v12 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v6 = v12 - 2;
  if (__OFSUB__(v12, 2))
    goto LABEL_83;
  if (v7)
  {
LABEL_84:
    v13 = (id)MEMORY[0x23B85F860](v6, v2);
    goto LABEL_16;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_86;
  }
  if (v6 >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  v13 = *(id *)(v2 + 8 * v6 + 32);
LABEL_16:
  v14 = v13;
  v1 = &selRef_defaultManager;
  v15 = objc_msgSend(v13, sel_filename);

  v10 = sub_23B1C63E0();
  v12 = v16;

  if (v10 == 0xD000000000000013)
  {
    v11 = 0x800000023B1F8530;
    if (v12 == 0x800000023B1F8530)
    {
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
  }
  v10 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  v11 = v2;
  if ((v10 & 1) != 0)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    if (!v3)
    {
      v17 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      v18 = v17 - 2;
      if (!__OFSUB__(v17, 2))
        goto LABEL_22;
      goto LABEL_89;
    }
LABEL_87:
    swift_bridgeObjectRetain();
    v47 = sub_23B1C7088();
    swift_bridgeObjectRelease();
    v18 = v47 - 2;
    if (!__OFSUB__(v47, 2))
    {
LABEL_22:

      v2 = v51;
      v4 = v51 >> 62;
      if (!(v51 >> 62))
      {
        v5 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
        v19 = v5 - 2;
        if (!__OFSUB__(v5, 2))
          goto LABEL_24;
        goto LABEL_92;
      }
LABEL_90:
      swift_bridgeObjectRetain();
      v5 = sub_23B1C7088();
      swift_bridgeObjectRelease();
      v19 = v5 - 2;
      if (!__OFSUB__(v5, 2))
      {
LABEL_24:
        v12 = v2 & 0xC000000000000001;
        if ((v2 & 0xC000000000000001) == 0)
        {
          if ((v19 & 0x8000000000000000) != 0)
          {
LABEL_97:
            __break(1u);
            goto LABEL_98;
          }
          if (v19 >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_98:
            __break(1u);
            goto LABEL_99;
          }
          v5 = (unint64_t)*(id *)(v2 + 8 * v19 + 32);
          if (!v4)
            goto LABEL_28;
          goto LABEL_94;
        }
LABEL_93:
        v5 = MEMORY[0x23B85F860](v19, v2);
        if (!v4)
        {
LABEL_28:
          v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
          v19 = v4 - 1;
          if (!__OFSUB__(v4, 1))
            goto LABEL_29;
LABEL_96:
          __break(1u);
          goto LABEL_97;
        }
LABEL_94:
        swift_bridgeObjectRetain();
        v4 = sub_23B1C7088();
        swift_bridgeObjectRelease();
        v19 = v4 - 1;
        if (!__OFSUB__(v4, 1))
        {
LABEL_29:
          if (!v12)
          {
            if ((v19 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else if (v19 < *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              v20 = *(id *)(v2 + 8 * v19 + 32);
LABEL_33:
              v21 = v20;
              v22 = objc_msgSend(v20, sel_itemIdentifier);

              objc_msgSend((id)v5, sel_setParentItemIdentifier_, v22);
              return v2;
            }
            __break(1u);
LABEL_102:
            swift_bridgeObjectRetain();
            v48 = sub_23B1C7088();
            swift_bridgeObjectRelease();
            if (v48 < 4)
              goto LABEL_103;
            goto LABEL_36;
          }
LABEL_99:
          v20 = (id)MEMORY[0x23B85F860](v19, v2);
          goto LABEL_33;
        }
        goto LABEL_96;
      }
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if (v3)
    goto LABEL_102;
  if (*(uint64_t *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10) < 4)
    goto LABEL_103;
LABEL_36:
  v23 = v4 - 2;
  if (v7)
  {
    v24 = (id)MEMORY[0x23B85F860](v23, v2);
  }
  else
  {
    if (v23 >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_106:
      v27 = (id)MEMORY[0x23B85F860](v5, v2);
      goto LABEL_43;
    }
    v24 = *(id *)(v2 + 8 * v23 + 32);
  }
  v25 = (uint64_t)v24;
  v26 = objc_msgSend(v24, sel_isContainer);

  if (!v26)
    goto LABEL_103;
  if (v7)
    goto LABEL_106;
  if (v5 >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_108;
  }
  v27 = *(id *)(v2 + 8 * v5 + 32);
LABEL_43:
  v28 = v27;
  v10 = 0xE900000000000073;
  v11 = 0x746E656D75636F44;
  v29 = objc_msgSend(v27, v1[484]);

  v25 = sub_23B1C63E0();
  v31 = v30;

  if (v25 == 0x746E656D75636F44 && v31 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }
  v25 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  if ((v25 & 1) == 0)
  {
LABEL_103:
    swift_bridgeObjectRelease();
    return v2;
  }
LABEL_47:
  if (!v3)
  {
    v32 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    v33 = v32 - 3;
    if (!__OFSUB__(v32, 3))
      goto LABEL_49;
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }
LABEL_108:
  swift_bridgeObjectRetain();
  v32 = sub_23B1C7088();
  swift_bridgeObjectRelease();
  v33 = v32 - 3;
  if (__OFSUB__(v32, 3))
    goto LABEL_110;
LABEL_49:
  v25 = sub_23AEC431C(v33);
  v32 = v51;
  v11 = v51 >> 62;
  if (!(v51 >> 62))
  {
    v34 = *(char **)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
    v35 = v34 - 2;
    if (!__OFSUB__(v34, 2))
      goto LABEL_51;
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
LABEL_111:
  swift_bridgeObjectRetain();
  v34 = (char *)sub_23B1C7088();
  swift_bridgeObjectRelease();
  v35 = v34 - 2;
  if (__OFSUB__(v34, 2))
    goto LABEL_113;
LABEL_51:
  if ((v32 & 0xC000000000000001) == 0)
  {
    if (((unint64_t)v35 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v35 < *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v36 = (char *)*(id *)(v32 + 8 * (_QWORD)v35 + 32);
      goto LABEL_55;
    }
    __break(1u);
    goto LABEL_117;
  }
LABEL_114:
  v36 = (char *)MEMORY[0x23B85F860](v35, v32);
LABEL_55:
  v34 = v36;
  v37 = objc_msgSend((id)objc_opt_self(), sel_appLibraryFromContainerItem_documentsItem_, v36, v25);
  if (!v37)
  {
    swift_bridgeObjectRelease();

    return v2;
  }
  v10 = (uint64_t)v37;
  swift_bridgeObjectRelease();
  if (v11)
  {
LABEL_117:
    swift_bridgeObjectRetain();
    v49 = sub_23B1C7088();
    swift_bridgeObjectRelease();
    v39 = __OFSUB__(v49, 2);
    v2 = v49 - 2;
    if (!v39)
      goto LABEL_58;
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  v38 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
  v39 = __OFSUB__(v38, 2);
  v2 = v38 - 2;
  if (v39)
    goto LABEL_119;
LABEL_58:
  v10 = (uint64_t)(id)v10;
  if (!swift_isUniquelyReferenced_nonNull_bridgeObject() || v32 < 0 || (v32 & 0x4000000000000000) != 0)
    sub_23B05222C(v32);
  if ((v2 & 0x8000000000000000) != 0)
    goto LABEL_120;
  if (v2 >= *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  v40 = *(void **)((v32 & 0xFFFFFFFFFFFFFF8) + 8 * v2 + 0x20);
  *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 8 * v2 + 0x20) = v10;

  sub_23B1C671C();
  v2 = v51;
  v11 = v51 >> 62;
  if (!(v51 >> 62))
  {
    v41 = *(char **)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (unint64_t)(v41 - 3);
    if (!__OFSUB__(v41, 3))
      goto LABEL_66;
LABEL_124:
    __break(1u);
    goto LABEL_125;
  }
LABEL_122:
  swift_bridgeObjectRetain();
  v41 = (char *)sub_23B1C7088();
  swift_bridgeObjectRelease();
  result = (unint64_t)(v41 - 3);
  if (__OFSUB__(v41, 3))
    goto LABEL_124;
LABEL_66:
  v3 = v2 & 0xC000000000000001;
  if ((v2 & 0xC000000000000001) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
LABEL_129:
      __break(1u);
      goto LABEL_130;
    }
    if (result >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
    v41 = (char *)*(id *)(v2 + 8 * result + 32);
    if (!v11)
      goto LABEL_70;
    goto LABEL_126;
  }
LABEL_125:
  v41 = (char *)MEMORY[0x23B85F860](result, v2);
  if (!v11)
  {
LABEL_70:
    v43 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = v43 - 2;
    if (!__OFSUB__(v43, 2))
      goto LABEL_71;
    goto LABEL_128;
  }
LABEL_126:
  swift_bridgeObjectRetain();
  v50 = sub_23B1C7088();
  swift_bridgeObjectRelease();
  result = v50 - 2;
  if (__OFSUB__(v50, 2))
  {
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }
LABEL_71:
  if (v3)
  {
LABEL_131:
    v44 = (id)MEMORY[0x23B85F860](result, v2);
    goto LABEL_75;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v44 = *(id *)(v2 + 8 * result + 32);
LABEL_75:
    v45 = v44;
    v46 = objc_msgSend(v44, sel_itemIdentifier);

    objc_msgSend(v41, sel_setParentItemIdentifier_, v46);
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t sub_23AEC6300(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AEC6348(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  _QWORD v11[4];
  uint64_t v12;

  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E24F0);
  v10 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v4 = (char *)&v11[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E6D88);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AEF968C();
  sub_23B1C7538();
  sub_23B1C728C();
  if (!v1)
  {
    sub_23B1C7214();
    __swift_project_boxed_opaque_existential_1(v11, v11[3]);
    sub_23AB6E3F4();
    sub_23B1C7538();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

_QWORD *sub_23AEC64DC@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

uint64_t sub_23AEC64F0()
{
  return 0x6E6F697469736F70;
}

uint64_t sub_23AEC6508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E6F697469736F70 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23B1C7388();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23AEC659C()
{
  return 0;
}

uint64_t sub_23AEC65A8@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t sub_23AEC65B8()
{
  sub_23AEF968C();
  return sub_23B1C7544();
}

uint64_t sub_23AEC65E0()
{
  sub_23AEF968C();
  return sub_23B1C7550();
}

uint64_t sub_23AEC6608(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_23AEC6654(a1);
  return v2;
}

uint64_t sub_23AEC6654(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _BYTE v10[40];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E6D98);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AEF968C();
  swift_retain();
  sub_23B1C7520();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for PaginatedContinuation();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v1 + 16) = sub_23B1C71B4();
    swift_release();
    sub_23B1C7124();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v1;
}

uint64_t type metadata accessor for PaginatedContinuation()
{
  return objc_opt_self();
}

uint64_t sub_23AEC6800()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23AEC686C()
{
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 979789423;
}

void sub_23AEC68D8(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  id v7;
  id v8;

  v3 = *(void **)(v1 + qword_2542E69F8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for FileItemIDObject(0, AssociatedTypeWitness, AssociatedConformanceWitness, v6);
  v7 = v3;
  v8 = sub_23AABA0A4(a1);
  objc_msgSend(v7, sel_removeObjectForKey_, v8);

}

id sub_23AEC69AC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  unint64_t v20;
  id v21;
  char *v22;
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  id v44;
  uint64_t v45;
  _BYTE *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t AssociatedTypeWitness;
  uint64_t v53;
  uint64_t v54;
  id aBlock;
  unint64_t v56;
  id (*v57)(uint64_t, void *);
  void *v58;
  uint64_t (*v59)();
  uint64_t v60;
  uint64_t v61;

  v51 = a1;
  v61 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 744);
  v50 = *(_QWORD *)v1;
  v53 = *(_QWORD *)(v50 + 728);
  v54 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v49 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v48 = (char *)&v41 - v5;
  v6 = sub_23B1C5DC8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v47 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v41 - v13;
  v15 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v1[32] & 1) != 0)
    return 0;
  v45 = v4;
  v46 = v1;
  v41 = v2;
  if (qword_2542E6818 != -1)
    swift_once();
  v19 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v14, 1, 1, v6);
  aBlock = 0;
  v56 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v20 = v56;
  v44 = aBlock;
  sub_23AA8A098((uint64_t)v14, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    v21 = v19;
    v22 = v47;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v22 = v47;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v47, v12, v6);
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v17, v22, v6);
  v42 = *(int *)(v15 + 20);
  *(_QWORD *)&v17[v42] = v19;
  v23 = &v17[*(int *)(v15 + 24)];
  *(_QWORD *)v23 = "SQLDB: Lookup FS recursive properties";
  *((_QWORD *)v23 + 1) = 37;
  v47 = v17;
  v43 = v23;
  v23[16] = 2;
  v24 = v19;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v25 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v25 + 32) = v44;
  *(_QWORD *)(v25 + 40) = v20;
  v26 = (uint64_t)v47;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
  swift_bridgeObjectRelease();
  sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E67B8);
  v27 = v46;
  v28 = *(void **)&v46[qword_2542EDF00];
  v30 = v48;
  v29 = v49;
  v31 = AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v51, AssociatedTypeWitness);
  v32 = (*(unsigned __int8 *)(v29 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  v33 = (char *)swift_allocObject();
  *((_QWORD *)v33 + 2) = v53;
  v34 = v50;
  v35 = v54;
  *((_QWORD *)v33 + 3) = *(_QWORD *)(v50 + 736);
  *((_QWORD *)v33 + 4) = v35;
  *((_QWORD *)v33 + 5) = *(_QWORD *)(v34 + 752);
  *((_QWORD *)v33 + 6) = v27;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v33[v32], v30, v31);
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = sub_23AEF92EC;
  *(_QWORD *)(v36 + 24) = v33;
  v59 = sub_23AA956C8;
  v60 = v36;
  aBlock = (id)MEMORY[0x24BDAC760];
  v56 = 1107296256;
  v57 = sub_23AA9432C;
  v58 = &block_descriptor_1110;
  v37 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v38 = objc_msgSend(v28, sel_fetchSwift_error_, v37, &aBlock);
  _Block_release(v37);
  v18 = aBlock;
  LOBYTE(v37) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v37 & 1) != 0)
    __break(1u);
  if (v38)
  {
    if (objc_msgSend(v38, sel_next))
    {
      v18 = objc_msgSend(v38, sel_unsignedLongAtIndex_, 0);
      objc_msgSend(v38, sel_unsignedLongAtIndex_, 1);
      objc_msgSend(v38, sel_unsignedLongAtIndex_, 2);
    }
    else
    {
      v18 = 0;
    }

    sub_23B1C6BD8();
    v39 = (uint64_t)v47;
    sub_23B1C5DA4();
    sub_23AA937BC(v39, type metadata accessor for Signpost);
    swift_release();
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    sub_23B1C6BD8();
    sub_23B1C5DA4();
    sub_23AA937BC(v26, type metadata accessor for Signpost);
    swift_release();
  }
  return v18;
}

id sub_23AEC7030(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  unint64_t v19;
  id v20;
  char *v21;
  id v22;
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t AssociatedTypeWitness;
  uint64_t v52;
  uint64_t v53;
  id aBlock;
  unint64_t v55;
  id (*v56)(uint64_t, void *);
  void *v57;
  uint64_t (*v58)();
  uint64_t v59;
  uint64_t v60;

  v50 = a1;
  v60 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 744);
  v49 = *(_QWORD *)v1;
  v52 = *(_QWORD *)(v49 + 728);
  v53 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v48 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v47 = (char *)&v41 - v5;
  v6 = sub_23B1C5DC8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v46 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v41 - v13;
  v15 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v1[32] != 1)
    return 0;
  v44 = v4;
  v45 = v1;
  v41 = v2;
  if (qword_2542E6818 != -1)
    swift_once();
  v18 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v14, 1, 1, v6);
  aBlock = 0;
  v55 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v19 = v55;
  v43 = aBlock;
  sub_23AA8A098((uint64_t)v14, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    v20 = v18;
    v21 = v46;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v21 = v46;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v46, v12, v6);
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v17, v21, v6);
  v42 = *(int *)(v15 + 20);
  *(_QWORD *)&v17[v42] = v18;
  v23 = &v17[*(int *)(v15 + 24)];
  *(_QWORD *)v23 = "SQLDB: Lookup FP recursive properties";
  *((_QWORD *)v23 + 1) = 37;
  v46 = v23;
  v23[16] = 2;
  v24 = v18;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v25 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v25 + 32) = v43;
  *(_QWORD *)(v25 + 40) = v19;
  v26 = (uint64_t)v17;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  swift_bridgeObjectRelease();
  sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E67B8);
  v27 = v45;
  v28 = *(void **)&v45[qword_2542EDF00];
  v30 = v47;
  v29 = v48;
  v31 = AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v50, AssociatedTypeWitness);
  v32 = (*(unsigned __int8 *)(v29 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  v33 = (char *)swift_allocObject();
  *((_QWORD *)v33 + 2) = v52;
  v34 = v49;
  v35 = v53;
  *((_QWORD *)v33 + 3) = *(_QWORD *)(v49 + 736);
  *((_QWORD *)v33 + 4) = v35;
  *((_QWORD *)v33 + 5) = *(_QWORD *)(v34 + 752);
  *((_QWORD *)v33 + 6) = v27;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v33[v32], v30, v31);
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = sub_23AEF92B0;
  *(_QWORD *)(v36 + 24) = v33;
  v58 = sub_23AA956C8;
  v59 = v36;
  aBlock = (id)MEMORY[0x24BDAC760];
  v55 = 1107296256;
  v56 = sub_23AA9432C;
  v57 = &block_descriptor_1100;
  v37 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v38 = objc_msgSend(v28, sel_fetchSwift_error_, v37, &aBlock);
  _Block_release(v37);
  v39 = aBlock;
  LOBYTE(v30) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v30 & 1) != 0)
    __break(1u);
  if (v38)
  {
    if (objc_msgSend(v38, sel_next))
    {
      v22 = objc_msgSend(v38, sel_unsignedLongAtIndex_, 0);
      objc_msgSend(v38, sel_unsignedLongAtIndex_, 1);
    }
    else
    {
      v22 = 0;
    }

    sub_23B1C6BD8();
    sub_23B1C5DA4();
    sub_23AA937BC(v26, type metadata accessor for Signpost);
    swift_release();
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    sub_23B1C6BD8();
    v22 = (id)v26;
    sub_23B1C5DA4();
    sub_23AA937BC(v26, type metadata accessor for Signpost);
    swift_release();
  }
  return v22;
}

unint64_t sub_23AEC769C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _BYTE *v17;
  unint64_t v18;
  int v19;
  id v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  id v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  unint64_t v41;
  _BYTE v43[16];
  uint64_t v44;
  id v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t AssociatedTypeWitness;
  uint64_t v57;
  id aBlock;
  unint64_t v59;
  id (*v60)(uint64_t, void *);
  void *v61;
  uint64_t (*v62)();
  uint64_t v63;
  uint64_t v64;

  v55 = a1;
  v64 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 744);
  v57 = *(_QWORD *)(*(_QWORD *)v1 + 728);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v48 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v49 = &v43[-v5];
  v6 = sub_23B1C5DC8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v47 = &v43[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = &v43[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v54 = &v43[-v13];
  v46 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v46);
  v15 = (uint64_t)&v43[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (v1[32] != 1)
    sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/SQLSnapshot.swift", 130, 2, 142);
  v50 = (_BYTE *)v4;
  v52 = v2;
  v53 = v1;
  if (qword_2542E6818 != -1)
    swift_once();
  v16 = (void *)qword_2542EDD28;
  v17 = v54;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v54, 1, 1, v6);
  aBlock = 0;
  v59 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v18 = v59;
  v45 = aBlock;
  sub_23AA8A098((uint64_t)v17, (uint64_t)v12);
  v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
  v51 = v3;
  if (v19 == 1)
  {
    v20 = v16;
    v21 = v47;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v21 = v47;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v47, v12, v6);
  }
  v22 = v50;
  v23 = v7;
  v44 = v6;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 16))(v15, v21, v6);
  v24 = v46;
  v47 = (_BYTE *)*(int *)(v46 + 20);
  *(_QWORD *)&v47[v15] = v16;
  v25 = (_BYTE *)(v15 + *(int *)(v24 + 24));
  *(_QWORD *)v25 = "SQLDB: Lookup Inherited Content Policy";
  *((_QWORD *)v25 + 1) = 38;
  v50 = v25;
  v25[16] = 2;
  v26 = v16;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v27 = v21;
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v28 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v28 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v28 + 32) = v45;
  *(_QWORD *)(v28 + 40) = v18;
  v29 = v15;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v23 + 8))(v27, v44);
  swift_bridgeObjectRelease();
  sub_23AA8A05C((uint64_t)v54, (uint64_t *)&unk_2542E67B8);
  v30 = v53;
  v31 = *(void **)&v53[qword_2542EDF00];
  v32 = v49;
  v33 = AssociatedTypeWitness;
  (*((void (**)(_BYTE *, uint64_t, uint64_t))v22 + 2))(v49, v55, AssociatedTypeWitness);
  v34 = (v22[80] + 56) & ~(unint64_t)v22[80];
  v35 = (char *)swift_allocObject();
  *((_QWORD *)v35 + 2) = v57;
  v36 = v52;
  v37 = v51;
  *((_QWORD *)v35 + 3) = *(_QWORD *)(v52 + 736);
  *((_QWORD *)v35 + 4) = v37;
  *((_QWORD *)v35 + 5) = *(_QWORD *)(v36 + 752);
  *((_QWORD *)v35 + 6) = v30;
  (*((void (**)(char *, _BYTE *, uint64_t))v22 + 4))(&v35[v34], v32, v33);
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = sub_23AEF9274;
  *(_QWORD *)(v38 + 24) = v35;
  v62 = sub_23AA956C8;
  v63 = v38;
  aBlock = (id)MEMORY[0x24BDAC760];
  v59 = 1107296256;
  v60 = sub_23AA9432C;
  v61 = &block_descriptor_1090;
  v39 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v40 = objc_msgSend(v31, sel_fetchSwift_error_, v39, &aBlock);
  _Block_release(v39);
  v41 = (unint64_t)aBlock;
  LOBYTE(v32) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v32 & 1) != 0)
    __break(1u);
  if (!v40)
    goto LABEL_12;
  if (!objc_msgSend(v40, sel_next))
  {

    v41 = 0;
    goto LABEL_14;
  }
  v41 = (unint64_t)objc_msgSend(v40, sel_unsignedLongAtIndex_, 0);

  if ((v41 & 0x8000000000000000) == 0)
  {
LABEL_14:
    sub_23B1C6BD8();
    sub_23B1C5DA4();
    sub_23AA937BC(v29, type metadata accessor for Signpost);
    swift_release();
    return v41;
  }
  __break(1u);
LABEL_12:
  sub_23B1C587C();

  swift_willThrow();
  sub_23B1C6BD8();
  sub_23B1C5DA4();
  sub_23AA937BC(v29, type metadata accessor for Signpost);
  swift_release();
  return v41;
}

id sub_23AEC7D18(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _BYTE *v17;
  unint64_t v18;
  int v19;
  id v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  id v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  _BYTE v43[16];
  uint64_t v44;
  id v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t AssociatedTypeWitness;
  uint64_t v57;
  id aBlock;
  unint64_t v59;
  id (*v60)(uint64_t, void *);
  void *v61;
  uint64_t (*v62)();
  uint64_t v63;
  uint64_t v64;

  v55 = a1;
  v64 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 744);
  v57 = *(_QWORD *)(*(_QWORD *)v1 + 728);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v48 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v49 = &v43[-v5];
  v6 = sub_23B1C5DC8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v47 = &v43[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = &v43[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v54 = &v43[-v13];
  v46 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v46);
  v15 = (uint64_t)&v43[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (v1[32] != 1)
    sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/SQLSnapshot.swift", 130, 2, 163);
  v50 = (_BYTE *)v4;
  v52 = v2;
  v53 = v1;
  if (qword_2542E6818 != -1)
    swift_once();
  v16 = (void *)qword_2542EDD28;
  v17 = v54;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v54, 1, 1, v6);
  aBlock = 0;
  v59 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v18 = v59;
  v45 = aBlock;
  sub_23AA8A098((uint64_t)v17, (uint64_t)v12);
  v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
  v51 = v3;
  if (v19 == 1)
  {
    v20 = v16;
    v21 = v47;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v21 = v47;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v47, v12, v6);
  }
  v22 = v50;
  v23 = v7;
  v44 = v6;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v7 + 16))(v15, v21, v6);
  v24 = v46;
  v47 = (_BYTE *)*(int *)(v46 + 20);
  *(_QWORD *)&v47[v15] = v16;
  v25 = (_BYTE *)(v15 + *(int *)(v24 + 24));
  *(_QWORD *)v25 = "SQLDB: Lookup Effective Content Policy";
  *((_QWORD *)v25 + 1) = 38;
  v50 = v25;
  v25[16] = 2;
  v26 = v16;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v27 = v21;
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v28 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v28 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v28 + 32) = v45;
  *(_QWORD *)(v28 + 40) = v18;
  v29 = v15;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v23 + 8))(v27, v44);
  swift_bridgeObjectRelease();
  sub_23AA8A05C((uint64_t)v54, (uint64_t *)&unk_2542E67B8);
  v30 = v53;
  v31 = *(void **)&v53[qword_2542EDF00];
  v32 = v49;
  v33 = AssociatedTypeWitness;
  (*((void (**)(_BYTE *, uint64_t, uint64_t))v22 + 2))(v49, v55, AssociatedTypeWitness);
  v34 = (v22[80] + 56) & ~(unint64_t)v22[80];
  v35 = (char *)swift_allocObject();
  *((_QWORD *)v35 + 2) = v57;
  v36 = v52;
  v37 = v51;
  *((_QWORD *)v35 + 3) = *(_QWORD *)(v52 + 736);
  *((_QWORD *)v35 + 4) = v37;
  *((_QWORD *)v35 + 5) = *(_QWORD *)(v36 + 752);
  *((_QWORD *)v35 + 6) = v30;
  (*((void (**)(char *, _BYTE *, uint64_t))v22 + 4))(&v35[v34], v32, v33);
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = sub_23AEF9254;
  *(_QWORD *)(v38 + 24) = v35;
  v62 = sub_23AA956C8;
  v63 = v38;
  aBlock = (id)MEMORY[0x24BDAC760];
  v59 = 1107296256;
  v60 = sub_23AA9432C;
  v61 = &block_descriptor_1080_0;
  v39 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v40 = objc_msgSend(v31, sel_fetchSwift_error_, v39, &aBlock);
  _Block_release(v39);
  v41 = aBlock;
  LOBYTE(v32) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v32 & 1) != 0)
    __break(1u);
  if (v40)
  {
    if (objc_msgSend(v40, sel_next))
      v41 = objc_msgSend(v40, sel_longAtIndex_, 0);
    else
      v41 = 0;

    sub_23B1C6BD8();
    sub_23B1C5DA4();
    sub_23AA937BC(v29, type metadata accessor for Signpost);
    swift_release();
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    sub_23B1C6BD8();
    sub_23B1C5DA4();
    sub_23AA937BC(v29, type metadata accessor for Signpost);
    swift_release();
  }
  return v41;
}

uint64_t sub_23AEC838C(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  sub_23AEF6B14();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0x205443454C4553;
}

_QWORD *sub_23AEC8538(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  int v19;
  id v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[16];
  uint64_t v43;
  id v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  id aBlock;
  unint64_t v58;
  id (*v59)(uint64_t, void *);
  void *v60;
  uint64_t (*v61)();
  _QWORD *v62;
  uint64_t v63;

  v55 = a1;
  v63 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*v1 + 744);
  v51 = *v1;
  v3 = *(_QWORD *)(v51 + 728);
  v56 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v46 = *(_QWORD *)(v48 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v47 = &v42[-v5];
  v6 = sub_23B1C5DC8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v54 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = &v42[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v14 = &v42[-v13];
  v15 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v15);
  v53 = &v42[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_2542E6818 != -1)
    swift_once();
  v17 = (void *)qword_2542EDD28;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v14, 1, 1, v6);
  aBlock = 0;
  v58 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v18 = v58;
  v44 = aBlock;
  v45 = v14;
  sub_23AA8A098((uint64_t)v14, (uint64_t)v12);
  v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
  v49 = AssociatedTypeWitness;
  v50 = v3;
  if (v19 == 1)
  {
    v20 = v17;
    v21 = v54;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v21 = v54;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v54, v12, v6);
  }
  v22 = v53;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v53, v21, v6);
  v43 = *(int *)(v15 + 20);
  *(_QWORD *)&v22[v43] = v17;
  v23 = &v22[*(int *)(v15 + 24)];
  *(_QWORD *)v23 = "SQLDB: Lookup snapshot version";
  *((_QWORD *)v23 + 1) = 30;
  v23[16] = 2;
  v24 = v17;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v25 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v25 + 32) = v44;
  *(_QWORD *)(v25 + 40) = v18;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v54, v6);
  swift_bridgeObjectRelease();
  sub_23AA8A05C((uint64_t)v45, (uint64_t *)&unk_2542E67B8);
  v26 = v52;
  v27 = *(void **)(v52 + qword_2542EDF00);
  v29 = v47;
  v28 = v48;
  v30 = v49;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v48 + 16))(v47, v55, v49);
  v31 = (*(unsigned __int8 *)(v28 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  v32 = (char *)swift_allocObject();
  v33 = v51;
  *((_QWORD *)v32 + 2) = v50;
  v34 = v56;
  *((_QWORD *)v32 + 3) = *(_QWORD *)(v33 + 736);
  *((_QWORD *)v32 + 4) = v34;
  *((_QWORD *)v32 + 5) = *(_QWORD *)(v33 + 752);
  *((_QWORD *)v32 + 6) = v26;
  (*(void (**)(char *, _BYTE *, uint64_t))(v28 + 32))(&v32[v31], v29, v30);
  v35 = (_QWORD *)swift_allocObject();
  v35[2] = sub_23AEF9218;
  v35[3] = v32;
  v61 = sub_23AA956C8;
  v62 = v35;
  aBlock = (id)MEMORY[0x24BDAC760];
  v58 = 1107296256;
  v59 = sub_23AA9432C;
  v60 = &block_descriptor_1070;
  v36 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v37 = objc_msgSend(v27, sel_fetchSwift_error_, v36, &aBlock);
  _Block_release(v36);
  v38 = aBlock;
  LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v28 & 1) != 0)
    __break(1u);
  if (v37)
  {
    if (objc_msgSend(v37, sel_next))
      v35 = objc_msgSend(v37, sel_unsignedLongAtIndex_, 0);
    else
      v35 = 0;

    sub_23B1C6BD8();
    v40 = (uint64_t)v53;
    sub_23B1C5DA4();
    sub_23AA937BC(v40, type metadata accessor for Signpost);
    swift_release();
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    sub_23B1C6BD8();
    v39 = (uint64_t)v53;
    sub_23B1C5DA4();
    sub_23AA937BC(v39, type metadata accessor for Signpost);
    swift_release();
  }
  return v35;
}

uint64_t sub_23AEC8B68(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  int v19;
  id v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[16];
  uint64_t v43;
  id v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  id aBlock;
  unint64_t v58;
  id (*v59)(uint64_t, void *);
  void *v60;
  uint64_t (*v61)();
  uint64_t v62;
  uint64_t v63;

  v55 = a1;
  v63 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*v1 + 744);
  v51 = *v1;
  v3 = *(_QWORD *)(v51 + 728);
  v56 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v46 = *(_QWORD *)(v48 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v47 = &v42[-v5];
  v6 = sub_23B1C5DC8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v54 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = &v42[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v14 = &v42[-v13];
  v15 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v15);
  v53 = &v42[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_2542E6818 != -1)
    swift_once();
  v17 = (void *)qword_2542EDD28;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v14, 1, 1, v6);
  aBlock = 0;
  v58 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v18 = v58;
  v44 = aBlock;
  v45 = v14;
  sub_23AA8A098((uint64_t)v14, (uint64_t)v12);
  v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
  v49 = AssociatedTypeWitness;
  v50 = v3;
  if (v19 == 1)
  {
    v20 = v17;
    v21 = v54;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v21 = v54;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v54, v12, v6);
  }
  v22 = v53;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v53, v21, v6);
  v43 = *(int *)(v15 + 20);
  *(_QWORD *)&v22[v43] = v17;
  v23 = &v22[*(int *)(v15 + 24)];
  *(_QWORD *)v23 = "SQLDB: [Recursive] Lookup is in pinned folder ";
  *((_QWORD *)v23 + 1) = 46;
  v23[16] = 2;
  v24 = v17;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v25 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v25 + 32) = v44;
  *(_QWORD *)(v25 + 40) = v18;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v54, v6);
  swift_bridgeObjectRelease();
  sub_23AA8A05C((uint64_t)v45, (uint64_t *)&unk_2542E67B8);
  v26 = v52;
  v27 = *(void **)(v52 + qword_2542EDF00);
  v29 = v47;
  v28 = v48;
  v30 = v49;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v48 + 16))(v47, v55, v49);
  v31 = (*(unsigned __int8 *)(v28 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  v32 = (char *)swift_allocObject();
  v33 = v51;
  *((_QWORD *)v32 + 2) = v50;
  v34 = v56;
  *((_QWORD *)v32 + 3) = *(_QWORD *)(v33 + 736);
  *((_QWORD *)v32 + 4) = v34;
  *((_QWORD *)v32 + 5) = *(_QWORD *)(v33 + 752);
  *((_QWORD *)v32 + 6) = v26;
  (*(void (**)(char *, _BYTE *, uint64_t))(v28 + 32))(&v32[v31], v29, v30);
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = sub_23AEF9670;
  *(_QWORD *)(v35 + 24) = v32;
  v61 = sub_23AA956C8;
  v62 = v35;
  aBlock = (id)MEMORY[0x24BDAC760];
  v58 = 1107296256;
  v59 = sub_23AA9432C;
  v60 = &block_descriptor_1160;
  v36 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v37 = objc_msgSend(v27, sel_fetchSwift_error_, v36, &aBlock);
  _Block_release(v36);
  v38 = aBlock;
  LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v28 & 1) != 0)
    __break(1u);
  if (v37)
  {
    LOBYTE(v39) = objc_msgSend(v37, sel_next);

    sub_23B1C6BD8();
    v40 = (uint64_t)v53;
    sub_23B1C5DA4();
    sub_23AA937BC(v40, type metadata accessor for Signpost);
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    sub_23B1C6BD8();
    v39 = (uint64_t)v53;
    sub_23B1C5DA4();
    sub_23AA937BC(v39, type metadata accessor for Signpost);
  }
  swift_release();
  return v39 & 1;
}

uint64_t sub_23AEC916C(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEC9434(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char *v34;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  char *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t AssociatedTypeWitness;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id aBlock;
  unint64_t v78;
  id (*v79)(uint64_t, void *);
  void *v80;
  uint64_t (*v81)();
  uint64_t v82;
  uint64_t v83;

  LODWORD(v75) = a2;
  v76 = a1;
  v83 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)v2 + 744);
  v68 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(v68 + 728);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v67 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v65 = *(_QWORD *)(v67 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v66 = (char *)&v59 - v5;
  v6 = sub_23B1C5DC8();
  v63 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v62 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v60 = (uint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v70 = (uint64_t)&v59 - v11;
  v61 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v61);
  v69 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ItemMetadata();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = v4;
  v73 = v3;
  v17 = type metadata accessor for SnapshotItem(255, v4, v3, v16);
  v18 = sub_23B1C6C98();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v59 - v21;
  v23 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v59 - v24;
  if ((v75 & 1) != 0)
  {
    v75 = v2;
    sub_23AA75310(v76, (uint64_t)v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, v17) == 1)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
      if (qword_2542E6818 != -1)
        swift_once();
      v26 = (void *)qword_2542EDD28;
      v28 = v63;
      v27 = v64;
      v29 = v70;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v70, 1, 1, v64);
      aBlock = 0;
      v78 = 0xE000000000000000;
      sub_23B1C64F4();
      swift_getAssociatedConformanceWitness();
      sub_23B1C7340();
      v30 = v78;
      v59 = aBlock;
      v31 = v29;
      v32 = v60;
      sub_23AA8A098(v31, v60);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v32, 1, v27) == 1)
      {
        v33 = v26;
        v34 = v62;
        sub_23B1C5DB0();
        sub_23AA8A05C(v32, (uint64_t *)&unk_2542E67B8);
      }
      else
      {
        v34 = v62;
        (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v62, v32, v27);
      }
      v37 = v69;
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v69, v34, v27);
      v38 = v61;
      v60 = *(int *)(v61 + 20);
      *(_QWORD *)&v37[v60] = v26;
      v39 = &v37[*(int *)(v38 + 24)];
      *(_QWORD *)v39 = "SQLDB: Lookup is in pinned folder";
      *((_QWORD *)v39 + 1) = 33;
      v62 = v39;
      v39[16] = 2;
      v40 = v26;
      swift_bridgeObjectRetain();
      sub_23B1C6BE4();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
      v41 = v28;
      v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_23B1CA760;
      *(_QWORD *)(v42 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v42 + 64) = sub_23AAA0D14();
      *(_QWORD *)(v42 + 32) = v59;
      *(_QWORD *)(v42 + 40) = v30;
      sub_23B1C5D98();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v27);
      swift_bridgeObjectRelease();
      sub_23AA8A05C(v70, (uint64_t *)&unk_2542E67B8);
      v43 = v75;
      v44 = *(void **)(v75 + qword_2542EDF00);
      v46 = v66;
      v45 = v67;
      v47 = AssociatedTypeWitness;
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v66, v76, AssociatedTypeWitness);
      v48 = (*(unsigned __int8 *)(v45 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
      v49 = (char *)swift_allocObject();
      *((_QWORD *)v49 + 2) = v72;
      v50 = v68;
      v51 = v73;
      *((_QWORD *)v49 + 3) = *(_QWORD *)(v68 + 736);
      *((_QWORD *)v49 + 4) = v51;
      *((_QWORD *)v49 + 5) = *(_QWORD *)(v50 + 752);
      *((_QWORD *)v49 + 6) = v43;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(&v49[v48], v46, v47);
      v52 = swift_allocObject();
      *(_QWORD *)(v52 + 16) = sub_23AEF91DC;
      *(_QWORD *)(v52 + 24) = v49;
      v81 = sub_23AA956C8;
      v82 = v52;
      aBlock = (id)MEMORY[0x24BDAC760];
      v78 = 1107296256;
      v79 = sub_23AA9432C;
      v80 = &block_descriptor_1060;
      v53 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      aBlock = 0;
      v54 = objc_msgSend(v44, sel_fetchSwift_error_, v53, &aBlock);
      _Block_release(v53);
      v55 = aBlock;
      LOBYTE(v45) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v45 & 1) != 0)
        __break(1u);
      if (v54)
      {
        if (objc_msgSend(v54, sel_next))
        {
          v2 = (uint64_t)objc_msgSend(v54, sel_BOOLAtIndex_, 0);

          sub_23B1C6BD8();
          v56 = (uint64_t)v69;
          sub_23B1C5DA4();
          sub_23AA937BC(v56, type metadata accessor for Signpost);
          swift_release();
        }
        else
        {

          sub_23B1C6BD8();
          v58 = (uint64_t)v69;
          sub_23B1C5DA4();
          sub_23AA937BC(v58, type metadata accessor for Signpost);
          swift_release();
          return 2;
        }
      }
      else
      {
        sub_23B1C587C();

        swift_willThrow();
        sub_23B1C6BD8();
        v2 = (uint64_t)v69;
        sub_23B1C5DA4();
        sub_23AA937BC(v2, type metadata accessor for Signpost);
        swift_release();
      }
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v22, v17);
      sub_23AA9BA80((uint64_t)&v25[*(int *)(v17 + 48)], (uint64_t)v15);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v17);
      v2 = v15[*(int *)(v13 + 48)];
      sub_23AA937BC((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ItemMetadata);
    }
  }
  else
  {
    v35 = v74;
    v36 = sub_23AEC8B68(v76);
    if (!v35)
      return v36 & 1;
  }
  return v2;
}

uint64_t sub_23AEC9C70(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AEC9DD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  id v27;
  id v28;
  char *v29;
  char *v30;
  char *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  id aBlock;
  unint64_t v84;
  id (*v85)(uint64_t, void *);
  void *v86;
  uint64_t (*v87)();
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v82 = a2;
  v65 = a4;
  v90 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*v4 + 728);
  v77 = *v4;
  v7 = *(_QWORD *)(v77 + 744);
  v8 = type metadata accessor for SnapshotItem(255, v6, v7, a3);
  v62 = sub_23B1C6C98();
  v61 = *(_QWORD *)(v62 - 8);
  v9 = MEMORY[0x24BDAC7A8](v62);
  v60 = (char *)&v60 - v10;
  v66 = v8;
  v64 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v63 = (uint64_t)&v60 - v11;
  v81 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v74 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v72 = *(_QWORD *)(v74 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v73 = (char *)&v60 - v13;
  v14 = sub_23B1C5DC8();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v71 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v60 - v21;
  v23 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v23);
  v80 = (char *)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v69 = qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v22, 1, 1, v14);
  aBlock = 0;
  v84 = 0xE000000000000000;
  sub_23B1C6EFC();
  sub_23B1C64F4();
  v76 = v6;
  swift_getAssociatedConformanceWitness();
  v79 = a1;
  sub_23B1C7340();
  sub_23B1C64F4();
  v89 = v82;
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  v25 = v84;
  v68 = aBlock;
  v70 = v22;
  sub_23AA8A098((uint64_t)v22, (uint64_t)v20);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14);
  v75 = AssociatedTypeWitness;
  if (v26 == 1)
  {
    v27 = (id)v69;
    v28 = (id)v69;
    v29 = v71;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v20, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v29 = v71;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v71, v20, v14);
    v27 = (id)v69;
  }
  v30 = v80;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v80, v29, v14);
  v69 = *(int *)(v23 + 20);
  *(_QWORD *)&v30[v69] = v27;
  v31 = &v30[*(int *)(v23 + 24)];
  *(_QWORD *)v31 = "SQLDB: Lookup item by ID";
  *((_QWORD *)v31 + 1) = 24;
  v71 = v31;
  v31[16] = 2;
  v32 = v27;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v33 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v33 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v33 + 32) = v68;
  *(_QWORD *)(v33 + 40) = v25;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v14);
  swift_bridgeObjectRelease();
  sub_23AA8A05C((uint64_t)v70, (uint64_t *)&unk_2542E67B8);
  v34 = v78;
  v35 = *(void **)(v78 + qword_2542EDF00);
  v37 = v73;
  v36 = v74;
  v38 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v73, v79, v75);
  v39 = (*(unsigned __int8 *)(v36 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  v40 = (v72 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
  v41 = (char *)swift_allocObject();
  v42 = v77;
  *((_QWORD *)v41 + 2) = v76;
  v43 = v81;
  *((_QWORD *)v41 + 3) = *(_QWORD *)(v42 + 736);
  *((_QWORD *)v41 + 4) = v43;
  *((_QWORD *)v41 + 5) = *(_QWORD *)(v42 + 752);
  *((_QWORD *)v41 + 6) = v34;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v41[v39], v37, v38);
  *(_QWORD *)&v41[v40] = v82;
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = sub_23AEF91A8;
  *(_QWORD *)(v44 + 24) = v41;
  v87 = sub_23AA956C8;
  v88 = v44;
  aBlock = (id)MEMORY[0x24BDAC760];
  v84 = 1107296256;
  v85 = sub_23AA9432C;
  v86 = &block_descriptor_1040;
  v45 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v46 = objc_msgSend(v35, sel_fetchSwift_error_, v45, &aBlock);
  _Block_release(v45);
  v47 = aBlock;
  LOBYTE(v36) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v36 & 1) != 0)
    __break(1u);
  if (v46)
  {
    if ((objc_msgSend(v46, sel_next) & 1) != 0)
    {
      v48 = v66;
      v49 = MEMORY[0x23B8613CC](&unk_23B1DD224, v66);
      v50 = v63;
      v51 = v67;
      sub_23AABEBB8(v46, 0, v48, v49, v63);
      if (v51)
      {

      }
      else
      {
        v52 = v64;
        v53 = (uint64_t)v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v60, v50, v48);
        v54 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56);
        v54(v53, 0, 1, v48);
        sub_23AA6A6E0(v79, v53, v55, v56);

        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v53, v62);
        v57 = v65;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v65, v63, v48);
        v54(v57, 0, 1, v48);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))(v65, 1, 1, v66);

    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  sub_23B1C6BD8();
  v58 = (uint64_t)v80;
  sub_23B1C5DA4();
  sub_23AA937BC(v58, type metadata accessor for Signpost);
  return swift_release();
}

uint64_t sub_23AECA60C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void (*v7)(void *, uint64_t, uint64_t);
  uint64_t v8;
  id v9;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v7 = *(void (**)(void *, uint64_t, uint64_t))(v6 + 32);
  v8 = swift_checkMetadataState();
  v7(a1, v8, v6);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v9 = objc_msgSend(a1, sel_bindUnsignedLongParameter_, a4);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

_QWORD *sub_23AECA828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  id v23;
  unint64_t v24;
  int v25;
  id v26;
  id v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _QWORD v56[2];
  id v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  id aBlock;
  unint64_t v80;
  id (*v81)(uint64_t, void *);
  void *v82;
  uint64_t (*v83)();
  _QWORD *v84;
  uint64_t v85;

  v66 = a4;
  v73 = a1;
  v85 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)(*v4 + 744);
  v68 = *v4;
  v77 = *(_QWORD *)(v68 + 728);
  v78 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v75 = sub_23B1C6C98();
  v67 = *(_QWORD *)(v75 - 8);
  v63 = *(_QWORD *)(v67 + 64);
  v9 = MEMORY[0x24BDAC7A8](v75);
  v74 = (char *)v56 - v10;
  v65 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v62 = *(_QWORD *)(v65 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v64 = (char *)v56 - v11;
  v12 = sub_23B1C5DC8();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v61 = (char *)v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v56 - v19;
  v59 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v59);
  v72 = (char *)v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v58 = qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v20, 1, 1, v12);
  aBlock = 0;
  v80 = 0xE000000000000000;
  sub_23B1C64F4();
  v69 = a2;
  v70 = a3;
  v22 = (void *)sub_23B1C63BC();
  v23 = objc_msgSend(v22, sel_fp_obfuscatedFilename);

  sub_23B1C63E0();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v24 = v80;
  v57 = aBlock;
  v60 = v20;
  sub_23AA8A098((uint64_t)v20, (uint64_t)v18);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v12);
  v71 = AssociatedTypeWitness;
  if (v25 == 1)
  {
    v26 = (id)v58;
    v27 = (id)v58;
    v28 = v61;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v18, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v28 = v61;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v61, v18, v12);
    v26 = (id)v58;
  }
  v29 = v72;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v72, v28, v12);
  v30 = v59;
  v58 = *(int *)(v59 + 20);
  *(_QWORD *)&v29[v58] = v26;
  v31 = (uint64_t)&v29[*(int *)(v30 + 24)];
  *(_QWORD *)v31 = "SQLDB: Lookup item by parent ID and name";
  *(_QWORD *)(v31 + 8) = 40;
  v59 = v31;
  *(_BYTE *)(v31 + 16) = 2;
  v32 = v26;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v33 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v33 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v33 + 32) = v57;
  *(_QWORD *)(v33 + 40) = v24;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v28, v12);
  swift_bridgeObjectRelease();
  v34 = sub_23AA8A05C((uint64_t)v60, (uint64_t *)&unk_2542E67B8);
  v35 = v76;
  LOBYTE(v60) = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v76 + 16) + 112))(v34) & 1;
  LODWORD(v60) = v60;
  v61 = *(char **)(v35 + qword_2542EDF00);
  v36 = v65;
  v37 = v64;
  v38 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v73, v71);
  v39 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v74, v66, v75);
  v40 = (*(unsigned __int8 *)(v36 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  v41 = (v62 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  v42 = (*(unsigned __int8 *)(v39 + 80) + v41 + 17) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  v43 = (char *)swift_allocObject();
  *((_QWORD *)v43 + 2) = v77;
  v44 = v68;
  v73 = *(_QWORD *)(v68 + 736);
  v45 = v78;
  *((_QWORD *)v43 + 3) = v73;
  *((_QWORD *)v43 + 4) = v45;
  v68 = *(_QWORD *)(v44 + 752);
  *((_QWORD *)v43 + 5) = v68;
  *((_QWORD *)v43 + 6) = v35;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v43[v40], v37, v38);
  v46 = &v43[v41];
  v47 = v70;
  *(_QWORD *)v46 = v69;
  *((_QWORD *)v46 + 1) = v47;
  v46[16] = (char)v60;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(&v43[v42], v74, v75);
  v48 = (_QWORD *)swift_allocObject();
  v48[2] = sub_23AEF9038;
  v48[3] = v43;
  v75 = (uint64_t)v43;
  v83 = sub_23AA956C8;
  v84 = v48;
  aBlock = (id)MEMORY[0x24BDAC760];
  v80 = 1107296256;
  v81 = sub_23AA9432C;
  v82 = &block_descriptor_1030;
  v49 = _Block_copy(&aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v50 = objc_msgSend(v61, sel_fetchSwift_error_, v49, &aBlock);
  _Block_release(v49);
  v51 = aBlock;
  LOBYTE(v47) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v47 & 1) != 0)
    __break(1u);
  if (v50)
  {
    v48 = (_QWORD *)sub_23B1C6758();
    aBlock = v48;
    if (objc_msgSend(v50, sel_next))
    {
      v48 = v78;
      v52 = v56[1];
      while (1)
      {
        v53 = (void *)MEMORY[0x23B8601A8]();
        sub_23AECB4D4((uint64_t)&aBlock, v50);
        if (v52)
          break;
        objc_autoreleasePoolPop(v53);
        if ((objc_msgSend(v50, sel_next) & 1) == 0)
        {

          v48 = aBlock;
          goto LABEL_16;
        }
      }
      objc_autoreleasePoolPop(v53);

      swift_bridgeObjectRelease();
    }
    else
    {

    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
LABEL_16:
  sub_23B1C6BD8();
  v54 = (uint64_t)v72;
  sub_23B1C5DA4();
  sub_23AA937BC(v54, type metadata accessor for Signpost);
  swift_release();
  return v48;
}

uint64_t sub_23AECB094(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6, uint64_t a7)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD v22[7];
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v25 = a7;
  v24 = a6;
  v23 = a4;
  v9 = (_QWORD *)*a2;
  v26 = 0;
  v27 = 0xE000000000000000;
  sub_23B1C6EFC();
  v29 = 0;
  v30 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v10 = v9[93];
  v11 = v9[91];
  swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v14 = swift_checkMetadataState();
  v13(a1, v14, v12);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v28 = MEMORY[0x24BEE0D00];
  v26 = v23;
  v27 = a5;
  swift_bridgeObjectRetain();
  sub_23AA94C90((uint64_t)&v26);
  v16 = v15;
  sub_23AA8A05C((uint64_t)&v26, qword_2542E5640);
  if (v16)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    v17 = sub_23B1C64F4();
    MEMORY[0x24BDAC7A8](v17);
    v18 = v9[92];
    v22[2] = v11;
    v22[3] = v18;
    v19 = v9[94];
    v22[4] = v10;
    v22[5] = v19;
    v22[6] = a1;
    sub_23B1C6C98();
    sub_23B0C6934((void (*)(char *, char *))sub_23AEF90E8, (uint64_t)v22, MEMORY[0x24BEE4078], MEMORY[0x24BEE0D00], v20, (uint64_t)&v26);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v29;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23AECB3E0@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t result;

  swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v6 = swift_checkMetadataState();
  v5(a1, v6, v4);
  sub_23B1C64F4();
  result = swift_bridgeObjectRelease();
  *a2 = 0x2120646920444E41;
  a2[1] = 0xEA0000000000203DLL;
  return result;
}

uint64_t sub_23AECB4D4(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  result = (*(uint64_t (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 16))(a2, 0, AssociatedTypeWitness, v5);
  if (!v2)
  {
    sub_23B1C67DC();
    return sub_23B1C67AC();
  }
  return result;
}

uint64_t sub_23AECB5D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  id v21;
  void *v22;
  char *v23;
  char *v24;
  id v25;
  _BYTE *v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _OWORD v59[15];
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _QWORD v77[34];

  v50 = a1;
  v77[31] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 744);
  v56 = *(_QWORD *)v2;
  v54 = *(_QWORD *)(v56 + 728);
  v55 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v53 = AssociatedTypeWitness;
  v49 = *(_QWORD *)(v52 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v51 = (char *)&v45 - v6;
  v7 = sub_23B1C5DC8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v45 - v15;
  v17 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v17);
  v58 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v2[32] == 1)
  {
    v45 = a2;
    if (qword_2542E6818 != -1)
      swift_once();
    v19 = (void *)qword_2542EDD28;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v16, 1, 1, v7);
    sub_23AA8A098((uint64_t)v16, (uint64_t)v14);
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7);
    v48 = v2;
    if (v20 == 1)
    {
      v21 = v19;
      sub_23B1C5DB0();
      sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E67B8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
    }
    v22 = v19;
    v23 = v58;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v58, v10, v7);
    v46 = *(int *)(v17 + 20);
    *(_QWORD *)&v23[v46] = v22;
    v24 = &v23[*(int *)(v17 + 24)];
    *(_QWORD *)v24 = "SQLDB: Lookup item non syncable attributes";
    *((_QWORD *)v24 + 1) = 42;
    v47 = v24;
    v24[16] = 2;
    v25 = v22;
    sub_23B1C6BE4();
    sub_23B1C5DA4();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_23AA8A05C((uint64_t)v16, (uint64_t *)&unk_2542E67B8);
    v26 = v48;
    v27 = *(void **)&v48[qword_2542EDF00];
    v29 = v51;
    v28 = v52;
    v30 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v50, v53);
    v31 = (*(unsigned __int8 *)(v28 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    v32 = (char *)swift_allocObject();
    *((_QWORD *)v32 + 2) = v54;
    v33 = v56;
    v34 = v55;
    *((_QWORD *)v32 + 3) = *(_QWORD *)(v56 + 736);
    *((_QWORD *)v32 + 4) = v34;
    *((_QWORD *)v32 + 5) = *(_QWORD *)(v33 + 752);
    *((_QWORD *)v32 + 6) = v26;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(&v32[v31], v29, v30);
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = sub_23AEF8F20;
    *(_QWORD *)(v35 + 24) = v32;
    *(_QWORD *)&v63 = sub_23AA956C8;
    *((_QWORD *)&v63 + 1) = v35;
    *(_QWORD *)&v61 = MEMORY[0x24BDAC760];
    *((_QWORD *)&v61 + 1) = 1107296256;
    *(_QWORD *)&v62 = sub_23AA9432C;
    *((_QWORD *)&v62 + 1) = &block_descriptor_1020;
    v36 = _Block_copy(&v61);
    swift_retain();
    swift_retain();
    swift_release();
    *(_QWORD *)&v61 = 0;
    v37 = objc_msgSend(v27, sel_fetchSwift_error_, v36, &v61);
    _Block_release(v36);
    v38 = (id)v61;
    LOBYTE(v26) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v26 & 1) != 0)
      __break(1u);
    if (!v37)
    {
      sub_23B1C587C();

      swift_willThrow();
      goto LABEL_14;
    }
    if (objc_msgSend(v37, sel_next))
    {
      v39 = sub_23AAAF0A8();
      v40 = v57;
      sub_23AAAB6FC(v37, (uint64_t)v39, 0, (uint64_t)&v61);
      if (v40)
      {

        swift_bridgeObjectRelease();
LABEL_14:
        sub_23B1C6BD8();
        v41 = (uint64_t)v58;
        sub_23B1C5DA4();
        sub_23AA937BC(v41, type metadata accessor for Signpost);
        return swift_release();
      }

      swift_bridgeObjectRelease();
      v59[12] = v73;
      v59[13] = v74;
      v59[14] = v75;
      v60 = v76;
      v59[8] = v69;
      v59[9] = v70;
      v59[10] = v71;
      v59[11] = v72;
      v59[4] = v65;
      v59[5] = v66;
      v59[6] = v67;
      v59[7] = v68;
      v59[0] = v61;
      v59[1] = v62;
      v59[2] = v63;
      v59[3] = v64;
      nullsub_1(v59);
      sub_23B1C6BD8();
      v44 = (uint64_t)v58;
      sub_23B1C5DA4();
      sub_23AA937BC(v44, type metadata accessor for Signpost);
      swift_release();
      sub_23AAB7EC8((uint64_t)v59, (uint64_t)v77);
    }
    else
    {

      sub_23AAF8E48((uint64_t)&v61);
      sub_23B1C6BD8();
      v43 = (uint64_t)v58;
      sub_23B1C5DA4();
      sub_23AA937BC(v43, type metadata accessor for Signpost);
      swift_release();
      sub_23AAB7EC8((uint64_t)&v61, (uint64_t)v77);
    }
    a2 = v45;
  }
  else
  {
    sub_23AAF8E48((uint64_t)&v61);
    sub_23AAB7EC8((uint64_t)&v61, (uint64_t)v77);
  }
  return sub_23AAB7EC8((uint64_t)v77, a2);
}

uint64_t sub_23AECBC24(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = a3;
  v6 = objc_msgSend(v5, sel_keys);
  v7 = sub_23B1C6704();

  v8 = objc_msgSend(v5, sel_values);
  v9 = sub_23B1C6704();

  sub_23AC39500(v7, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v12 = swift_checkMetadataState();
  v11(a1, v12, v10);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AECBE54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  id v39;
  uint64_t v40;
  uint64_t *v41;
  void *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  id v53;
  char isEscapingClosureAtFileLocation;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t AssociatedConformanceWitness;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t AssociatedTypeWitness;
  id aBlock;
  unint64_t v80;
  id (*v81)(uint64_t, void *);
  void *v82;
  uint64_t (*v83)();
  uint64_t v84;
  uint64_t v85;

  v70 = a2;
  v85 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*v2 + 744);
  v68 = *v2;
  v5 = *(_QWORD *)(v68 + 728);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v66 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v67 = (char *)&AssociatedConformanceWitness - v7;
  v65 = sub_23B1C5DC8();
  v74 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v64 = (char *)&AssociatedConformanceWitness - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v62 = (uint64_t)&AssociatedConformanceWitness - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v73 = (uint64_t)&AssociatedConformanceWitness - v12;
  v63 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v63);
  v72 = (char *)&AssociatedConformanceWitness - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v5;
  v77 = v4;
  v15 = type metadata accessor for SnapshotItem(255, v5, v4, v14);
  v16 = sub_23B1C6C98();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&AssociatedConformanceWitness - v19;
  v21 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&AssociatedConformanceWitness - v22;
  v75 = a1;
  v69 = v2;
  sub_23AA75310(a1, (uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v15) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v20, v15);
    v32 = v70;
    v33 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v70, &v23[*(int *)(v15 + 36)], AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v15);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v32, 0, 1, v33);
  }
  v61 = v6;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  if (qword_2542E6818 != -1)
    swift_once();
  v24 = (void *)qword_2542EDD28;
  v26 = v73;
  v25 = v74;
  v27 = v65;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v73, 1, 1, v65);
  aBlock = 0;
  v80 = 0xE000000000000000;
  sub_23B1C6EFC();
  sub_23B1C64F4();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v28 = v80;
  v60 = aBlock;
  v29 = v62;
  sub_23AA8A098(v26, v62);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v29, 1, v27) == 1)
  {
    v30 = v24;
    v31 = v64;
    sub_23B1C5DB0();
    sub_23AA8A05C(v29, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v31 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v64, v29, v27);
  }
  v35 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  v36 = v72;
  v35(v72, v31, v27);
  v37 = v63;
  v64 = (char *)*(int *)(v63 + 20);
  *(_QWORD *)&v64[(_QWORD)v36] = v24;
  v38 = &v36[*(int *)(v37 + 24)];
  *(_QWORD *)v38 = "SQLDB: Lookup parent ID";
  *((_QWORD *)v38 + 1) = 23;
  v38[16] = 2;
  v39 = v24;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v40 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v40 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v40 + 32) = v60;
  *(_QWORD *)(v40 + 40) = v28;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v31, v27);
  swift_bridgeObjectRelease();
  sub_23AA8A05C(v73, (uint64_t *)&unk_2542E67B8);
  v41 = v69;
  v42 = *(void **)((char *)v69 + qword_2542EDF00);
  v43 = v61;
  v44 = v67;
  v45 = AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v67, v75, AssociatedTypeWitness);
  v46 = (*(unsigned __int8 *)(v43 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  v47 = (char *)swift_allocObject();
  *((_QWORD *)v47 + 2) = v76;
  v48 = v68;
  v49 = v77;
  *((_QWORD *)v47 + 3) = *(_QWORD *)(v68 + 736);
  *((_QWORD *)v47 + 4) = v49;
  *((_QWORD *)v47 + 5) = *(_QWORD *)(v48 + 752);
  *((_QWORD *)v47 + 6) = v41;
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v47[v46], v44, v45);
  v50 = swift_allocObject();
  *(_QWORD *)(v50 + 16) = sub_23AEF8DD4;
  *(_QWORD *)(v50 + 24) = v47;
  v83 = sub_23AA956C8;
  v84 = v50;
  aBlock = (id)MEMORY[0x24BDAC760];
  v80 = 1107296256;
  v81 = sub_23AA9432C;
  v82 = &block_descriptor_990;
  v51 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v52 = objc_msgSend(v42, sel_fetchSwift_error_, v51, &aBlock);
  _Block_release(v51);
  v53 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (!v52)
  {
    sub_23B1C587C();

    swift_willThrow();
LABEL_14:
    sub_23B1C6BD8();
    v57 = (uint64_t)v72;
    sub_23B1C5DA4();
    sub_23AA937BC(v57, type metadata accessor for Signpost);
    return swift_release();
  }
  if (objc_msgSend(v52, sel_next))
  {
    v56 = v70;
    v55 = v71;
    (*(void (**)(id, _QWORD, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 40) + 16))(v52, 0, v45);
    if (!v55)
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v56, 0, 1, v45);
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v70, 1, 1, v45);

  sub_23B1C6BD8();
  v58 = (uint64_t)v72;
  sub_23B1C5DA4();
  sub_23AA937BC(v58, type metadata accessor for Signpost);
  return swift_release();
}

uint64_t sub_23AECC64C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  char *v26;
  char *v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t AssociatedTypeWitness;
  uint64_t v59;
  uint64_t v60;
  id aBlock;
  unint64_t v62;
  id (*v63)(uint64_t, void *);
  void *v64;
  uint64_t (*v65)();
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 744);
  v52 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v52 + 728);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v51 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v49 = *(_QWORD *)(v51 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v50 = (char *)&v46 - v5;
  v48 = sub_23B1C5DC8();
  v6 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v56 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v55 = (uint64_t)&v46 - v12;
  v13 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v13);
  v54 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = v4;
  v60 = v3;
  v16 = type metadata accessor for SnapshotItem(255, v4, v3, v15);
  v17 = sub_23B1C6C98();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v46 - v19;
  v57 = a1;
  v53 = v1;
  sub_23AA75310(a1, (uint64_t)&v46 - v19);
  LOBYTE(v1) = 1;
  LODWORD(v16) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v20, 1, v16);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if ((_DWORD)v16 == 1)
  {
    if (qword_2542E6818 != -1)
      swift_once();
    v21 = (void *)qword_2542EDD28;
    v22 = v55;
    v23 = v48;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v55, 1, 1, v48);
    aBlock = 0;
    v62 = 0xE000000000000000;
    sub_23B1C6EFC();
    sub_23B1C64F4();
    swift_getAssociatedConformanceWitness();
    sub_23B1C7340();
    v24 = v62;
    v47 = aBlock;
    sub_23AA8A098(v22, (uint64_t)v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v23) == 1)
    {
      v25 = v21;
      v26 = v56;
      sub_23B1C5DB0();
      sub_23AA8A05C((uint64_t)v11, (uint64_t *)&unk_2542E67B8);
    }
    else
    {
      v26 = v56;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v56, v11, v23);
    }
    v27 = v54;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v54, v26, v23);
    v46 = *(int *)(v13 + 20);
    *(_QWORD *)&v27[v46] = v21;
    v28 = &v27[*(int *)(v13 + 24)];
    *(_QWORD *)v28 = "SQLDB: Check item with ID";
    *((_QWORD *)v28 + 1) = 25;
    v28[16] = 2;
    v29 = v21;
    swift_bridgeObjectRetain();
    sub_23B1C6BE4();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_23B1CA760;
    *(_QWORD *)(v30 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v30 + 64) = sub_23AAA0D14();
    *(_QWORD *)(v30 + 32) = v47;
    *(_QWORD *)(v30 + 40) = v24;
    sub_23B1C5D98();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v56, v23);
    swift_bridgeObjectRelease();
    sub_23AA8A05C(v55, (uint64_t *)&unk_2542E67B8);
    v31 = v53;
    v32 = *(void **)(v53 + qword_2542EDF00);
    v34 = v50;
    v33 = v51;
    v35 = AssociatedTypeWitness;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v57, AssociatedTypeWitness);
    v36 = (*(unsigned __int8 *)(v33 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    v37 = (char *)swift_allocObject();
    *((_QWORD *)v37 + 2) = v59;
    v38 = v52;
    v39 = v60;
    *((_QWORD *)v37 + 3) = *(_QWORD *)(v52 + 736);
    *((_QWORD *)v37 + 4) = v39;
    *((_QWORD *)v37 + 5) = *(_QWORD *)(v38 + 752);
    *((_QWORD *)v37 + 6) = v31;
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v37[v36], v34, v35);
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = sub_23AEF8DB4;
    *(_QWORD *)(v40 + 24) = v37;
    v65 = sub_23AA956C8;
    v66 = v40;
    aBlock = (id)MEMORY[0x24BDAC760];
    v62 = 1107296256;
    v63 = sub_23AA9432C;
    v64 = &block_descriptor_980;
    v41 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v42 = objc_msgSend(v32, sel_fetchSwift_error_, v41, &aBlock);
    _Block_release(v41);
    v43 = aBlock;
    LOBYTE(v34) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v34 & 1) != 0)
      __break(1u);
    if (v42)
    {
      LOBYTE(v1) = objc_msgSend(v42, sel_next);

      sub_23B1C6BD8();
      v44 = (uint64_t)v54;
      sub_23B1C5DA4();
      sub_23AA937BC(v44, type metadata accessor for Signpost);
    }
    else
    {
      sub_23B1C587C();

      swift_willThrow();
      sub_23B1C6BD8();
      v1 = (uint64_t)v54;
      sub_23B1C5DA4();
      sub_23AA937BC(v1, type metadata accessor for Signpost);
    }
    swift_release();
  }
  return v1 & 1;
}

unint64_t sub_23AECCD1C(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0xD000000000000011;
}

id sub_23AECCE98(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  id v17;
  _QWORD v19[2];
  id v20;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 744);
  v5 = *(_QWORD *)(*v1 + 728);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)v19 - v8;
  v20 = *(id *)((char *)v1 + qword_2542EDF00);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v19 - v8, a1, AssociatedTypeWitness);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = (char *)swift_allocObject();
  *((_QWORD *)v11 + 2) = v5;
  *((_QWORD *)v11 + 3) = *(_QWORD *)(v3 + 736);
  *((_QWORD *)v11 + 4) = v4;
  v12 = *(_QWORD *)(v3 + 752);
  v13 = v19[1];
  *((_QWORD *)v11 + 5) = v12;
  *((_QWORD *)v11 + 6) = v13;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, AssociatedTypeWitness);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = sub_23AEF95C4;
  v14[3] = v11;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v14;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_1150_0;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v16 = objc_msgSend(v20, sel_fetchSwift_error_, v15, aBlock);
  _Block_release(v15);
  v17 = aBlock[0];
  LOBYTE(AssociatedTypeWitness) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((AssociatedTypeWitness & 1) != 0)
    __break(1u);
  if (!v16)
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  swift_release();
  return v16;
}

uint64_t sub_23AECD108(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AECD288(uint64_t a1, void (*a2)(char *, unint64_t), uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  id v20;
  char *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t);
  void *v33;
  void (*v35)(char *, unint64_t);
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v35 = a2;
  v36 = a3;
  v44 = a1;
  v4 = *v3;
  v5 = sub_23B1C5DC8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v43 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v35 - v12;
  v14 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v14);
  v41 = (uint64_t)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v37 = (id)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v13, 1, 1, v5);
  v46 = 0;
  v47 = 0xE000000000000000;
  sub_23B1C64F4();
  v16 = *(_QWORD *)(v4 + 744);
  v39 = v4;
  v17 = *(_QWORD *)(v4 + 728);
  swift_getAssociatedTypeWitness();
  v48 = v16;
  v45 = v17;
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v18 = v47;
  v38 = v46;
  v40 = v13;
  sub_23AA8A098((uint64_t)v13, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    v19 = v37;
    v20 = v37;
    v21 = v43;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v11, (uint64_t *)&unk_2542E67B8);
    v22 = v41;
    v23 = v19;
  }
  else
  {
    v21 = v43;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v43, v11, v5);
    v22 = v41;
    v23 = v37;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v22, v21, v5);
  v41 = *(int *)(v14 + 20);
  *(_QWORD *)(v22 + v41) = v23;
  v24 = v5;
  v25 = v22 + *(int *)(v14 + 24);
  *(_QWORD *)v25 = "SQLDB: Enumerate children IDs and Kind";
  *(_QWORD *)(v25 + 8) = 38;
  *(_BYTE *)(v25 + 16) = 2;
  v26 = v23;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v27 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v27 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v27 + 32) = v38;
  *(_QWORD *)(v27 + 40) = v18;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v43, v24);
  swift_bridgeObjectRelease();
  sub_23AA8A05C((uint64_t)v40, (uint64_t *)&unk_2542E67B8);
  v28 = v42;
  v29 = sub_23AECCE98(v44);
  if (!v28)
  {
    v30 = v29;
    if (objc_msgSend(v29, sel_next))
    {
      v32 = v35;
      v31 = v36;
      do
      {
        v33 = (void *)MEMORY[0x23B8601A8]();
        sub_23AECD6EC(v32, v31, v30);
        objc_autoreleasePoolPop(v33);
      }
      while ((objc_msgSend(v30, sel_next) & 1) != 0);
    }

  }
  sub_23B1C6BD8();
  sub_23B1C5DA4();
  return sub_23AA937BC(v22, type metadata accessor for Signpost);
}

uint64_t sub_23AECD6EC(void (*a1)(char *, unint64_t), uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(void);
  uint64_t result;
  void (*v11)(char *, unint64_t);
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t);
  uint64_t v15;

  v15 = a2;
  v14 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v13 - v7;
  v9 = *(uint64_t (**)(void))(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 40) + 16);
  a3;
  result = v9();
  if (!v3)
  {
    v11 = v14;
    v12 = sub_23AAA4950(1);
    v11(v8, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  return result;
}

_QWORD *sub_23AECD830(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  char *v19;
  char *v20;
  char *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  id v29;
  id v30;
  char isEscapingClosureAtFileLocation;
  uint64_t AssociatedTypeWitness;
  uint64_t v33;
  _QWORD v35[2];
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  id aBlock[7];

  v39 = a2;
  v38 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = *v2;
  v5 = sub_23B1C5DC8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v35 - v13;
  v15 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v15);
  v41 = (char *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v35[1] = v4;
  v17 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v14, 1, 1, v5);
  sub_23AA8A098((uint64_t)v14, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1)
  {
    v18 = v17;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
  }
  v19 = v8;
  v20 = v41;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v41, v19, v5);
  v36 = *(int *)(v15 + 20);
  *(_QWORD *)&v20[v36] = v17;
  v21 = &v20[*(int *)(v15 + 24)];
  *(_QWORD *)v21 = "SQLDB: Enumerate non-purgeable packages";
  *((_QWORD *)v21 + 1) = 39;
  v37 = v21;
  v21[16] = 2;
  v22 = v17;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v5);
  sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E67B8);
  v23 = v40;
  v24 = *(void **)(v40 + qword_2542EDF00);
  v25 = swift_allocObject();
  v26 = v38;
  *(_QWORD *)(v25 + 16) = v23;
  *(_QWORD *)(v25 + 24) = v26;
  *(_BYTE *)(v25 + 32) = v39 & 1;
  *(_QWORD *)(v25 + 40) = 100;
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = sub_23AEF8D80;
  v27[3] = v25;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v27;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_970;
  v28 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v29 = objc_msgSend(v24, sel_fetchSwift_error_, v28, aBlock);
  _Block_release(v28);
  v30 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v29)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v27 = (_QWORD *)sub_23B1C6758();
    v42 = 0;
    aBlock[0] = v27;
    if (objc_msgSend(v29, sel_next))
    {
      while (1)
      {
        v27 = (_QWORD *)MEMORY[0x23B8601A8]();
        sub_23AEE9B44(&v42, v29);
        if (v3)
          break;
        objc_autoreleasePoolPop(v27);
        if ((objc_msgSend(v29, sel_next) & 1) == 0)
        {
          v27 = aBlock[0];
          goto LABEL_12;
        }
      }
      objc_autoreleasePoolPop(v27);

      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_12:
      swift_bridgeObjectRetain_n();
      MEMORY[0x23B85F0B0](v27, AssociatedTypeWitness);
      swift_bridgeObjectRelease_n();

    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  sub_23B1C6BD8();
  v33 = (uint64_t)v41;
  sub_23B1C5DA4();
  sub_23AA937BC(v33, type metadata accessor for Signpost);
  swift_release();
  return v27;
}

_QWORD *sub_23AECDD98(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  char *v19;
  char *v20;
  char *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  id v29;
  id v30;
  char isEscapingClosureAtFileLocation;
  uint64_t AssociatedTypeWitness;
  uint64_t v33;
  _QWORD v35[2];
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  id aBlock[7];

  v39 = a2;
  v38 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = *v2;
  v5 = sub_23B1C5DC8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v35 - v13;
  v15 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v15);
  v41 = (char *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v35[1] = v4;
  v17 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v14, 1, 1, v5);
  sub_23AA8A098((uint64_t)v14, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1)
  {
    v18 = v17;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
  }
  v19 = v8;
  v20 = v41;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v41, v19, v5);
  v36 = *(int *)(v15 + 20);
  *(_QWORD *)&v20[v36] = v17;
  v21 = &v20[*(int *)(v15 + 24)];
  *(_QWORD *)v21 = "SQLDB: Enumerate non-syncroot packages";
  *((_QWORD *)v21 + 1) = 38;
  v37 = v21;
  v21[16] = 2;
  v22 = v17;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v5);
  sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E67B8);
  v23 = v40;
  v24 = *(void **)(v40 + qword_2542EDF00);
  v25 = swift_allocObject();
  v26 = v38;
  *(_QWORD *)(v25 + 16) = v23;
  *(_QWORD *)(v25 + 24) = v26;
  *(_BYTE *)(v25 + 32) = v39 & 1;
  *(_QWORD *)(v25 + 40) = 100;
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = sub_23AEF8D24;
  v27[3] = v25;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v27;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_960;
  v28 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v29 = objc_msgSend(v24, sel_fetchSwift_error_, v28, aBlock);
  _Block_release(v28);
  v30 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v29)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v27 = (_QWORD *)sub_23B1C6758();
    v42 = 0;
    aBlock[0] = v27;
    if (objc_msgSend(v29, sel_next))
    {
      while (1)
      {
        v27 = (_QWORD *)MEMORY[0x23B8601A8]();
        sub_23AEE9B44(&v42, v29);
        if (v3)
          break;
        objc_autoreleasePoolPop(v27);
        if ((objc_msgSend(v29, sel_next) & 1) == 0)
        {
          v27 = aBlock[0];
          goto LABEL_12;
        }
      }
      objc_autoreleasePoolPop(v27);

      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_12:
      swift_bridgeObjectRetain_n();
      MEMORY[0x23B85F0B0](v27, AssociatedTypeWitness);
      swift_bridgeObjectRelease_n();

    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  sub_23B1C6BD8();
  v33 = (uint64_t)v41;
  sub_23B1C5DA4();
  sub_23AA937BC(v33, type metadata accessor for Signpost);
  swift_release();
  return v27;
}

uint64_t sub_23AECE300(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  id v7;
  id v8;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if ((a4 & 1) == 0)
  {
    v7 = a1;
    v8 = objc_msgSend(v7, sel_bindLongParameter_, a3, 0x203E204449776F72, 0xE800000000000000);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AECE4C0(uint64_t a1, uint64_t a2, int a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  int v22;
  id v23;
  char *v24;
  char *v25;
  char *v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t AssociatedConformanceWitness;
  uint64_t v52;
  char *v53;
  id v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id aBlock;
  unint64_t v72;
  id (*v73)(uint64_t, void *);
  void *v74;
  uint64_t (*v75)();
  uint64_t v76;
  uint64_t v77;

  v61 = a3;
  v60 = a2;
  v68 = a1;
  v77 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 744);
  v59 = *(_QWORD *)v3;
  v6 = *(_QWORD *)(v59 + 728);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v58 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v56 = *(_QWORD *)(v58 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v57 = (char *)&AssociatedConformanceWitness - v8;
  v9 = sub_23B1C5DC8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v67 = (char *)&AssociatedConformanceWitness - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&AssociatedConformanceWitness - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v66 = (uint64_t)&AssociatedConformanceWitness - v16;
  v17 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v17);
  v65 = (char *)&AssociatedConformanceWitness - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = v3;
  if ((v3[32] & 1) == 0)
  {
    v69 = v6;
    v64 = v5;
    if (qword_2542E6818 != -1)
      swift_once();
    v20 = (void *)qword_2542EDD28;
    v21 = v66;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v66, 1, 1, v9);
    aBlock = 0;
    v72 = 0xE000000000000000;
    sub_23B1C64F4();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    sub_23B1C7340();
    v54 = aBlock;
    v55 = v72;
    sub_23AA8A098(v21, (uint64_t)v15);
    v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9);
    v63 = AssociatedTypeWitness;
    if (v22 == 1)
    {
      v23 = v20;
      v24 = v67;
      sub_23B1C5DB0();
      sub_23AA8A05C((uint64_t)v15, (uint64_t *)&unk_2542E67B8);
    }
    else
    {
      v24 = v67;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v67, v15, v9);
    }
    v25 = v65;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v65, v24, v9);
    v52 = *(int *)(v17 + 20);
    *(_QWORD *)&v25[v52] = v20;
    v26 = &v25[*(int *)(v17 + 24)];
    *(_QWORD *)v26 = "SQLDB: enumerateChildrenIDAndKind";
    *((_QWORD *)v26 + 1) = 33;
    v53 = v26;
    v26[16] = 2;
    v27 = v20;
    v28 = v55;
    swift_bridgeObjectRetain();
    sub_23B1C6BE4();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
    v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_23B1CA760;
    *(_QWORD *)(v29 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v29 + 64) = sub_23AAA0D14();
    *(_QWORD *)(v29 + 32) = v54;
    *(_QWORD *)(v29 + 40) = v28;
    sub_23B1C5D98();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v67, v9);
    swift_bridgeObjectRelease();
    sub_23AA8A05C(v66, (uint64_t *)&unk_2542E67B8);
    v30 = v62;
    v31 = v63;
    v67 = *(char **)&v62[qword_2542EDF00];
    v33 = v57;
    v32 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v68, v63);
    v34 = (*(unsigned __int8 *)(v32 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
    v35 = (v34 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
    v36 = (v34 + v56 + 23) & 0xFFFFFFFFFFFFFFF8;
    v37 = (_QWORD *)swift_allocObject();
    v37[2] = v69;
    v38 = v59;
    v68 = *(_QWORD *)(v59 + 736);
    v39 = v64;
    v37[3] = v68;
    v37[4] = v39;
    v37[5] = *(_QWORD *)(v38 + 752);
    v37[6] = v30;
    v40 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    v41 = v37;
    v40((char *)v37 + v34, v33, v31);
    v42 = (char *)v41 + v35;
    *(_QWORD *)v42 = v60;
    v42[8] = v61 & 1;
    *(_QWORD *)((char *)v41 + v36) = 200;
    v43 = swift_allocObject();
    *(_QWORD *)(v43 + 16) = sub_23AEF8C94;
    *(_QWORD *)(v43 + 24) = v41;
    v75 = sub_23AA956C8;
    v76 = v43;
    aBlock = (id)MEMORY[0x24BDAC760];
    v72 = 1107296256;
    v73 = sub_23AA9432C;
    v74 = &block_descriptor_950;
    v44 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v45 = objc_msgSend(v67, sel_fetchSwift_error_, v44, &aBlock);
    _Block_release(v44);
    v46 = aBlock;
    LOBYTE(v31) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v31 & 1) != 0)
      __break(1u);
    if (v45)
    {
      swift_getTupleTypeMetadata2();
      sub_23B1C6758();
      v19 = (id)sub_23B1C623C();
      v70 = 0;
      aBlock = v19;
      if (!objc_msgSend(v45, sel_next))
      {
LABEL_14:
        swift_bridgeObjectRetain_n();
        sub_23B1C6254();
        swift_bridgeObjectRelease_n();

        sub_23B1C6BD8();
        v48 = (uint64_t)v65;
        sub_23B1C5DA4();
        sub_23AA937BC(v48, type metadata accessor for Signpost);
        swift_release();
        return (uint64_t)v19;
      }
      while (1)
      {
        v47 = (void *)MEMORY[0x23B8601A8]();
        sub_23AECEF6C(&v70, v45);
        if (v4)
          break;
        objc_autoreleasePoolPop(v47);
        if ((objc_msgSend(v45, sel_next) & 1) == 0)
        {
          v19 = aBlock;
          goto LABEL_14;
        }
      }
      objc_autoreleasePoolPop(v47);

      swift_bridgeObjectRelease();
    }
    else
    {
      sub_23B1C587C();

      swift_willThrow();
    }
    v19 = v53;
    sub_23B1C6BD8();
    v49 = (uint64_t)v65;
    sub_23B1C5DA4();
    sub_23AA937BC(v49, type metadata accessor for Signpost);
    swift_release();
    return (uint64_t)v19;
  }
  swift_getTupleTypeMetadata2();
  sub_23B1C6758();
  swift_getAssociatedConformanceWitness();
  return sub_23B1C623C();
}

uint64_t sub_23AECECF8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  void (*v9)(void *, uint64_t, uint64_t);
  uint64_t v10;
  id v11;
  id v12;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v9 = *(void (**)(void *, uint64_t, uint64_t))(v8 + 32);
  v10 = swift_checkMetadataState();
  v9(a1, v10, v8);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if ((a5 & 1) == 0)
  {
    v11 = a1;
    v12 = objc_msgSend(v11, sel_bindLongParameter_, a4, 0x203E204449776F72, 0xE800000000000000);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AECEF6C(_QWORD *a1, void *a2)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t (*v6)(void);
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  *a1 = objc_msgSend(a2, sel_longAtIndex_, 0);
  v6 = *(uint64_t (**)(void))(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 40) + 16);
  a2;
  result = v6();
  if (!v2)
  {
    sub_23AAA4950(2);
    sub_23B1C629C();
    return sub_23B1C62C0();
  }
  return result;
}

uint64_t sub_23AECF0E4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  char isEscapingClosureAtFileLocation;
  uint64_t AssociatedTypeWitness;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  uint64_t v39;
  id aBlock[7];

  v37 = a2;
  v36 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = sub_23B1C5DC8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v34 - v12;
  v14 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v14);
  v38 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v2 + 32) == 1)
  {
    v35 = v2;
    if (qword_2542E6818 != -1)
      swift_once();
    v16 = (void *)qword_2542EDD28;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v13, 1, 1, v4);
    sub_23AA8A098((uint64_t)v13, (uint64_t)v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
    {
      v17 = v16;
      sub_23B1C5DB0();
      sub_23AA8A05C((uint64_t)v11, (uint64_t *)&unk_2542E67B8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
    }
    v19 = v38;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v38, v7, v4);
    v34[0] = *(int *)(v14 + 20);
    *(_QWORD *)&v19[v34[0]] = v16;
    v20 = &v19[*(int *)(v14 + 24)];
    *(_QWORD *)v20 = "SQLDB: Enumerate non-locked directory that could be locked";
    *((_QWORD *)v20 + 1) = 58;
    v34[1] = v20;
    v20[16] = 2;
    v21 = v16;
    sub_23B1C6BE4();
    sub_23B1C5DA4();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_23AA8A05C((uint64_t)v13, (uint64_t *)&unk_2542E67B8);
    v22 = v35;
    v23 = *(void **)(v35 + qword_2542EDF00);
    v24 = swift_allocObject();
    v25 = v36;
    *(_QWORD *)(v24 + 16) = v22;
    *(_QWORD *)(v24 + 24) = v25;
    *(_BYTE *)(v24 + 32) = v37 & 1;
    *(_QWORD *)(v24 + 40) = 100;
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = sub_23AEF8BDC;
    v18[3] = v24;
    aBlock[4] = sub_23AA956C8;
    aBlock[5] = v18;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_940;
    v26 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v27 = objc_msgSend(v23, sel_fetchSwift_error_, v26, aBlock);
    _Block_release(v26);
    v28 = aBlock[0];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    if (!v27)
    {
      sub_23B1C587C();

      swift_willThrow();
LABEL_17:
      sub_23B1C6BD8();
      v32 = (uint64_t)v38;
      sub_23B1C5DA4();
      sub_23AA937BC(v32, type metadata accessor for Signpost);
      swift_release();
      return (uint64_t)v18;
    }
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v18 = (_QWORD *)sub_23B1C6758();
    v39 = 0;
    aBlock[0] = v18;
    if (objc_msgSend(v27, sel_next))
    {
      while (1)
      {
        v18 = (_QWORD *)MEMORY[0x23B8601A8]();
        sub_23AEE9B44(&v39, v27);
        if (v3)
          break;
        objc_autoreleasePoolPop(v18);
        if ((objc_msgSend(v27, sel_next) & 1) == 0)
        {
          v18 = aBlock[0];
          goto LABEL_14;
        }
      }
      objc_autoreleasePoolPop(v18);

      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
LABEL_14:
    swift_bridgeObjectRetain_n();
    MEMORY[0x23B85F0B0](v18, AssociatedTypeWitness);
    swift_bridgeObjectRelease_n();

    sub_23B1C6BD8();
    v31 = (uint64_t)v38;
    sub_23B1C5DA4();
    sub_23AA937BC(v31, type metadata accessor for Signpost);
    swift_release();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    return sub_23B1C6758();
  }
  return (uint64_t)v18;
}

uint64_t sub_23AECF68C(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  id v7;
  id v8;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if ((a4 & 1) == 0)
  {
    v7 = a1;
    v8 = objc_msgSend(v7, sel_bindLongParameter_, a3, 0x203E204449776F72, 0xE800000000000000);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AECF8F4(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  id v25;
  id v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  unsigned __int8 v45;
  id v46;
  uint64_t (*v47)(uint64_t);
  uint64_t (*v48)(uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id aBlock;
  unint64_t v72;
  id (*v73)(uint64_t, void *);
  void *v74;
  uint64_t (*v75)();
  uint64_t v76;
  uint64_t v77;

  v62 = a2;
  v70 = a1;
  v77 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*v2 + 744);
  v68 = *v2;
  v4 = *(_QWORD *)(v68 + 728);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v65 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v61 = *(_QWORD *)(v65 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v63 = (char *)&v55 - v6;
  v7 = sub_23B1C5DC8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v60 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v55 - v14;
  v58 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v58);
  v17 = (uint64_t)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v56 = (id)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v15, 1, 1, v7);
  aBlock = 0;
  v72 = 0xE000000000000000;
  v18 = v7;
  v19 = (uint64_t)v15;
  sub_23B1C64F4();
  v66 = v3;
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v20 = v72;
  v57 = aBlock;
  v59 = v19;
  v21 = v19;
  v22 = v18;
  v23 = v8;
  sub_23AA8A098(v21, (uint64_t)v13);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v22);
  v67 = AssociatedTypeWitness;
  v64 = v4;
  if (v24 == 1)
  {
    v25 = v56;
    v26 = v56;
    v27 = v60;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v13, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v27 = v60;
    v28(v60, v13, v22);
    v25 = v56;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(v17, v27, v22);
  v29 = v58;
  v60 = (char *)*(int *)(v58 + 20);
  *(_QWORD *)&v60[v17] = v25;
  v30 = (char *)(v17 + *(int *)(v29 + 24));
  *(_QWORD *)v30 = "SQLDB: Contains children";
  *((_QWORD *)v30 + 1) = 24;
  v58 = (uint64_t)v30;
  v30[16] = 2;
  v31 = v25;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v32 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v32 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v32 + 32) = v57;
  *(_QWORD *)(v32 + 40) = v20;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v22);
  swift_bridgeObjectRelease();
  sub_23AA8A05C(v59, (uint64_t *)&unk_2542E67B8);
  v33 = v69;
  v34 = *(void **)(v69 + qword_2542EDF00);
  v35 = v65;
  v36 = v63;
  v37 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v63, v70, v67);
  v38 = (*(unsigned __int8 *)(v35 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  if ((v62 & 1) == 0)
  {
    v49 = (char *)swift_allocObject();
    *((_QWORD *)v49 + 2) = v64;
    v50 = v68;
    v51 = v66;
    *((_QWORD *)v49 + 3) = *(_QWORD *)(v68 + 736);
    *((_QWORD *)v49 + 4) = v51;
    *((_QWORD *)v49 + 5) = *(_QWORD *)(v50 + 752);
    *((_QWORD *)v49 + 6) = v33;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v49[v38], v36, v37);
    v52 = swift_allocObject();
    *(_QWORD *)(v52 + 16) = sub_23AEF8BA0;
    *(_QWORD *)(v52 + 24) = v49;
    v75 = sub_23AA956C8;
    v76 = v52;
    aBlock = (id)MEMORY[0x24BDAC760];
    v72 = 1107296256;
    v73 = sub_23AA9432C;
    v74 = &block_descriptor_920;
    v53 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v44 = objc_msgSend(v34, sel_fetchSwift_error_, v53, &aBlock);
    _Block_release(v53);
    v45 = aBlock;
    v46 = aBlock;
    LOBYTE(v53) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v53 & 1) == 0)
    {
      v48 = 0;
      v47 = sub_23AEF8BA0;
      if (!v44)
        goto LABEL_9;
LABEL_12:
      v45 = objc_msgSend(v44, sel_next);

      sub_23B1C6BD8();
      sub_23B1C5DA4();
      sub_23AA937BC(v17, type metadata accessor for Signpost);
      sub_23AAB7948((uint64_t)v48);
      sub_23AAB7948((uint64_t)v47);
      return v45 & 1;
    }
LABEL_15:
    __break(1u);
  }
  v39 = (char *)swift_allocObject();
  *((_QWORD *)v39 + 2) = v64;
  v40 = v68;
  v41 = v66;
  *((_QWORD *)v39 + 3) = *(_QWORD *)(v68 + 736);
  *((_QWORD *)v39 + 4) = v41;
  *((_QWORD *)v39 + 5) = *(_QWORD *)(v40 + 752);
  *((_QWORD *)v39 + 6) = v33;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v39[v38], v36, v37);
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = sub_23AEF8BC0;
  *(_QWORD *)(v42 + 24) = v39;
  v75 = sub_23AA956C8;
  v76 = v42;
  aBlock = (id)MEMORY[0x24BDAC760];
  v72 = 1107296256;
  v73 = sub_23AA9432C;
  v74 = &block_descriptor_930;
  v43 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v44 = objc_msgSend(v34, sel_fetchSwift_error_, v43, &aBlock);
  _Block_release(v43);
  v45 = aBlock;
  v46 = aBlock;
  LOBYTE(v43) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v43 & 1) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v47 = 0;
  v48 = sub_23AEF8BC0;
  if (v44)
    goto LABEL_12;
LABEL_9:
  sub_23B1C587C();

  swift_willThrow();
  sub_23B1C6BD8();
  sub_23B1C5DA4();
  sub_23AA937BC(v17, type metadata accessor for Signpost);
  sub_23AAB7948((uint64_t)v48);
  sub_23AAB7948((uint64_t)v47);
  return v45 & 1;
}

uint64_t sub_23AED00C0(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AED0318(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AED0498(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  int v20;
  id v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  void *v38;
  id v39;
  id v40;
  _BYTE v42[16];
  id v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id aBlock;
  unint64_t v58;
  id (*v59)(uint64_t, void *);
  void *v60;
  uint64_t (*v61)();
  uint64_t v62;
  uint64_t v63;

  v53 = a2;
  v55 = a1;
  v63 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*v2 + 744);
  v52 = *v2;
  v4 = *(_QWORD *)(v52 + 728);
  v56 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v46 = *(_QWORD *)(v48 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v47 = &v42[-v6];
  v7 = sub_23B1C5DC8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v45 = &v42[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = &v42[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v15 = &v42[-v14];
  v16 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v16);
  v49 = (uint64_t)&v42[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_2542E6818 != -1)
    swift_once();
  v18 = (void *)qword_2542EDD28;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v15, 1, 1, v7);
  aBlock = 0;
  v58 = 0xE000000000000000;
  sub_23B1C64F4();
  v50 = v4;
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v19 = v58;
  v43 = aBlock;
  v44 = v15;
  sub_23AA8A098((uint64_t)v15, (uint64_t)v13);
  v20 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7);
  v51 = AssociatedTypeWitness;
  if (v20 == 1)
  {
    v21 = v18;
    v22 = v45;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v13, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v22 = v45;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v45, v13, v7);
  }
  v23 = v49;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 16))(v49, v22, v7);
  v49 = *(int *)(v16 + 20);
  *(_QWORD *)(v23 + v49) = v18;
  v24 = v23 + *(int *)(v16 + 24);
  *(_QWORD *)v24 = "SQLDB: Contains pending deletion children";
  *(_QWORD *)(v24 + 8) = 41;
  v45 = (_BYTE *)v24;
  *(_BYTE *)(v24 + 16) = 2;
  v25 = v18;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v26 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v26 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v26 + 32) = v43;
  *(_QWORD *)(v26 + 40) = v19;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v22, v7);
  swift_bridgeObjectRelease();
  sub_23AA8A05C((uint64_t)v44, (uint64_t *)&unk_2542E67B8);
  v27 = v54;
  v28 = *(void **)(v54 + qword_2542EDF00);
  v30 = v47;
  v29 = v48;
  v31 = v51;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v48 + 16))(v47, v55, v51);
  v32 = (*(unsigned __int8 *)(v29 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = v50;
  v34 = v52;
  v35 = v56;
  *(_QWORD *)(v33 + 24) = *(_QWORD *)(v52 + 736);
  *(_QWORD *)(v33 + 32) = v35;
  *(_QWORD *)(v33 + 40) = *(_QWORD *)(v34 + 752);
  *(_BYTE *)(v33 + 48) = v53 & 1;
  *(_QWORD *)(v33 + 56) = v27;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v29 + 32))(v33 + v32, v30, v31);
  v36 = swift_allocObject();
  v37 = v36;
  *(_QWORD *)(v36 + 16) = sub_23AEF8B30;
  *(_QWORD *)(v36 + 24) = v33;
  v61 = sub_23AA956C8;
  v62 = v36;
  aBlock = (id)MEMORY[0x24BDAC760];
  v58 = 1107296256;
  v59 = sub_23AA9432C;
  v60 = &block_descriptor_910;
  v38 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v39 = objc_msgSend(v28, sel_fetchSwift_error_, v38, &aBlock);
  _Block_release(v38);
  v40 = aBlock;
  LOBYTE(v29) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v29 & 1) != 0)
    __break(1u);
  if (v39)
  {
    v37 = objc_msgSend(v39, sel_next);

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  sub_23B1C6BD8();
  sub_23B1C5DA4();
  sub_23AA937BC(v23, type metadata accessor for Signpost);
  swift_release();
  return v37 & 1;
}

uint64_t sub_23AED0AC4(uint64_t a1, char a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v27;

  if ((a2 & 1) != 0)
  {
    sub_23B1C6EFC();
    sub_23B1C64F4();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v27 = MEMORY[0x24BEE4AF8];
    sub_23ADACF28(0, 8, 0);
    v2 = v27;
    v4 = *(_QWORD *)(v27 + 16);
    v3 = *(_QWORD *)(v27 + 24);
    v5 = v3 >> 1;
    v6 = v4 + 1;
    if (v3 >> 1 <= v4)
    {
      sub_23ADACF28(v3 > 1, v4 + 1, 1);
      v2 = v27;
      v3 = *(_QWORD *)(v27 + 24);
      v5 = v3 >> 1;
    }
    *(_QWORD *)(v2 + 16) = v6;
    *(_QWORD *)(v2 + 8 * v4 + 32) = 0;
    if (v5 < (uint64_t)(v4 + 2))
    {
      sub_23ADACF28(v3 > 1, v4 + 2, 1);
      v2 = v27;
    }
    *(_QWORD *)(v2 + 16) = v4 + 2;
    *(_QWORD *)(v2 + 8 * v6 + 32) = 512;
    v8 = *(_QWORD *)(v2 + 16);
    v7 = *(_QWORD *)(v2 + 24);
    v9 = v8 + 1;
    if (v8 >= v7 >> 1)
      sub_23ADACF28(v7 > 1, v8 + 1, 1);
    v10 = v27;
    *(_QWORD *)(v27 + 16) = v9;
    *(_QWORD *)(v27 + 8 * v8 + 32) = 0x2000;
    v11 = *(_QWORD *)(v27 + 24);
    if ((uint64_t)(v8 + 2) > (uint64_t)(v11 >> 1))
    {
      sub_23ADACF28(v11 > 1, v8 + 2, 1);
      v10 = v27;
    }
    *(_QWORD *)(v10 + 16) = v8 + 2;
    *(_QWORD *)(v10 + 8 * v9 + 32) = 8704;
    v13 = *(_QWORD *)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24);
    v14 = v12 >> 1;
    v15 = v13 + 1;
    if (v12 >> 1 <= v13)
    {
      sub_23ADACF28(v12 > 1, v13 + 1, 1);
      v10 = v27;
      v12 = *(_QWORD *)(v27 + 24);
      v14 = v12 >> 1;
    }
    *(_QWORD *)(v10 + 16) = v15;
    *(_QWORD *)(v10 + 8 * v13 + 32) = 256;
    if (v14 < (uint64_t)(v13 + 2))
      sub_23ADACF28(v12 > 1, v13 + 2, 1);
    v16 = v27;
    *(_QWORD *)(v27 + 16) = v13 + 2;
    *(_QWORD *)(v27 + 8 * v15 + 32) = 768;
    v18 = *(_QWORD *)(v27 + 16);
    v17 = *(_QWORD *)(v27 + 24);
    v19 = v17 >> 1;
    v20 = v18 + 1;
    if (v17 >> 1 <= v18)
    {
      sub_23ADACF28(v17 > 1, v18 + 1, 1);
      v16 = v27;
      v17 = *(_QWORD *)(v27 + 24);
      v19 = v17 >> 1;
    }
    *(_QWORD *)(v16 + 16) = v20;
    *(_QWORD *)(v16 + 8 * v18 + 32) = 8448;
    if (v19 < (uint64_t)(v18 + 2))
    {
      sub_23ADACF28(v17 > 1, v18 + 2, 1);
      v16 = v27;
    }
    *(_QWORD *)(v16 + 16) = v18 + 2;
    *(_QWORD *)(v16 + 8 * v20 + 32) = 8960;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5540);
    sub_23AAB5A28(&qword_2542E75B0, (uint64_t *)&unk_2542E5540, MEMORY[0x24BEE2B40]);
    sub_23AAA420C();
    sub_23B1C6644();
    swift_release();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_release();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32);
  v23 = swift_checkMetadataState();
  v22(a1, v23, v21);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if ((a2 & 1) == 0)
  {
    sub_23B1C6EFC();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
  }
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AED1364(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  id v17;
  _QWORD v19[2];
  id v20;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 744);
  v5 = *(_QWORD *)(*v1 + 728);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)v19 - v8;
  v20 = *(id *)((char *)v1 + qword_2542EDF00);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v19 - v8, a1, AssociatedTypeWitness);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = (char *)swift_allocObject();
  *((_QWORD *)v11 + 2) = v5;
  *((_QWORD *)v11 + 3) = *(_QWORD *)(v3 + 736);
  *((_QWORD *)v11 + 4) = v4;
  v12 = *(_QWORD *)(v3 + 752);
  v13 = v19[1];
  *((_QWORD *)v11 + 5) = v12;
  *((_QWORD *)v11 + 6) = v13;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, AssociatedTypeWitness);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = sub_23AEF8A88;
  v14[3] = v11;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v14;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_900;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v16 = objc_msgSend(v20, sel_fetchSwift_error_, v15, aBlock);
  _Block_release(v15);
  v17 = aBlock[0];
  LOBYTE(AssociatedTypeWitness) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((AssociatedTypeWitness & 1) != 0)
    __break(1u);
  if (v16)
  {
    LOBYTE(v17) = objc_msgSend(v16, sel_next);
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v17 & 1;
}

uint64_t sub_23AED15EC(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AED187C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  int v19;
  id v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[16];
  uint64_t v43;
  id v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  id aBlock;
  unint64_t v58;
  id (*v59)(uint64_t, void *);
  void *v60;
  uint64_t (*v61)();
  uint64_t v62;
  uint64_t v63;

  v55 = a1;
  v63 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*v1 + 744);
  v51 = *v1;
  v3 = *(_QWORD *)(v51 + 728);
  v56 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v46 = *(_QWORD *)(v48 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v47 = &v42[-v5];
  v6 = sub_23B1C5DC8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v54 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = &v42[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v14 = &v42[-v13];
  v15 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v15);
  v53 = &v42[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_2542E6818 != -1)
    swift_once();
  v17 = (void *)qword_2542EDD28;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v14, 1, 1, v6);
  aBlock = 0;
  v58 = 0xE000000000000000;
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v18 = v58;
  v44 = aBlock;
  v45 = v14;
  sub_23AA8A098((uint64_t)v14, (uint64_t)v12);
  v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
  v49 = AssociatedTypeWitness;
  v50 = v3;
  if (v19 == 1)
  {
    v20 = v17;
    v21 = v54;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v21 = v54;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v54, v12, v6);
  }
  v22 = v53;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v53, v21, v6);
  v43 = *(int *)(v15 + 20);
  *(_QWORD *)&v22[v43] = v17;
  v23 = &v22[*(int *)(v15 + 24)];
  *(_QWORD *)v23 = "SQLDB: Count materialized children";
  *((_QWORD *)v23 + 1) = 34;
  v23[16] = 2;
  v24 = v17;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v25 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v25 + 32) = v44;
  *(_QWORD *)(v25 + 40) = v18;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v54, v6);
  swift_bridgeObjectRelease();
  sub_23AA8A05C((uint64_t)v45, (uint64_t *)&unk_2542E67B8);
  v26 = v52;
  v27 = *(void **)(v52 + qword_2542EDF00);
  v29 = v47;
  v28 = v48;
  v30 = v49;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v48 + 16))(v47, v55, v49);
  v31 = (*(unsigned __int8 *)(v28 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  v32 = (char *)swift_allocObject();
  v33 = v51;
  *((_QWORD *)v32 + 2) = v50;
  v34 = v56;
  *((_QWORD *)v32 + 3) = *(_QWORD *)(v33 + 736);
  *((_QWORD *)v32 + 4) = v34;
  *((_QWORD *)v32 + 5) = *(_QWORD *)(v33 + 752);
  *((_QWORD *)v32 + 6) = v26;
  (*(void (**)(char *, _BYTE *, uint64_t))(v28 + 32))(&v32[v31], v29, v30);
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = sub_23AEF8A68;
  *(_QWORD *)(v35 + 24) = v32;
  v61 = sub_23AA956C8;
  v62 = v35;
  aBlock = (id)MEMORY[0x24BDAC760];
  v58 = 1107296256;
  v59 = sub_23AA9432C;
  v60 = &block_descriptor_890;
  v36 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v37 = objc_msgSend(v27, sel_fetchSwift_error_, v36, &aBlock);
  _Block_release(v36);
  v38 = aBlock;
  LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v28 & 1) != 0)
    __break(1u);
  if (v37)
  {
    LOBYTE(v39) = objc_msgSend(v37, sel_next);

    sub_23B1C6BD8();
    v40 = (uint64_t)v53;
    sub_23B1C5DA4();
    sub_23AA937BC(v40, type metadata accessor for Signpost);
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    sub_23B1C6BD8();
    v39 = (uint64_t)v53;
    sub_23B1C5DA4();
    sub_23AA937BC(v39, type metadata accessor for Signpost);
  }
  swift_release();
  return v39 & 1;
}

uint64_t sub_23AED1E94(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = sub_23AFA793C();
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v13 = MEMORY[0x24BEE4AF8];
    sub_23ADACF28(0, v6, 0);
    v7 = 0;
    v8 = *(_QWORD *)(v13 + 16);
    do
    {
      v9 = *(char *)(v5 + v7 + 32);
      v10 = *(_QWORD *)(v13 + 24);
      if (v8 >= v10 >> 1)
        sub_23ADACF28(v10 > 1, v8 + 1, 1);
      ++v7;
      v11 = qword_23B1DC7F8[v9];
      *(_QWORD *)(v13 + 16) = v8 + 1;
      *(_QWORD *)(v13 + 8 * v8++ + 32) = v11;
    }
    while (v6 != v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5540);
  sub_23AAB5A28(&qword_2542E75B0, (uint64_t *)&unk_2542E5540, MEMORY[0x24BEE2B40]);
  sub_23AAA420C();
  sub_23B1C6644();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AED2368(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  int v19;
  id v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[16];
  uint64_t v43;
  id v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  id aBlock;
  unint64_t v58;
  id (*v59)(uint64_t, void *);
  void *v60;
  uint64_t (*v61)();
  uint64_t v62;
  uint64_t v63;

  v55 = a1;
  v63 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*v1 + 744);
  v51 = *v1;
  v3 = *(_QWORD *)(v51 + 728);
  v56 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v46 = *(_QWORD *)(v48 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v47 = &v42[-v5];
  v6 = sub_23B1C5DC8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v54 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = &v42[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v14 = &v42[-v13];
  v15 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v15);
  v53 = &v42[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_2542E6818 != -1)
    swift_once();
  v17 = (void *)qword_2542EDD28;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v14, 1, 1, v6);
  aBlock = 0;
  v58 = 0xE000000000000000;
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v18 = v58;
  v44 = aBlock;
  v45 = v14;
  sub_23AA8A098((uint64_t)v14, (uint64_t)v12);
  v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
  v49 = AssociatedTypeWitness;
  v50 = v3;
  if (v19 == 1)
  {
    v20 = v17;
    v21 = v54;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v21 = v54;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v54, v12, v6);
  }
  v22 = v53;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v53, v21, v6);
  v43 = *(int *)(v15 + 20);
  *(_QWORD *)&v22[v43] = v17;
  v23 = &v22[*(int *)(v15 + 24)];
  *(_QWORD *)v23 = "SQLDB: Count pending rescan children";
  *((_QWORD *)v23 + 1) = 36;
  v23[16] = 2;
  v24 = v17;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v25 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v25 + 32) = v44;
  *(_QWORD *)(v25 + 40) = v18;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v54, v6);
  swift_bridgeObjectRelease();
  sub_23AA8A05C((uint64_t)v45, (uint64_t *)&unk_2542E67B8);
  v26 = v52;
  v27 = *(void **)(v52 + qword_2542EDF00);
  v29 = v47;
  v28 = v48;
  v30 = v49;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v48 + 16))(v47, v55, v49);
  v31 = (*(unsigned __int8 *)(v28 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  v32 = (char *)swift_allocObject();
  v33 = v51;
  *((_QWORD *)v32 + 2) = v50;
  v34 = v56;
  *((_QWORD *)v32 + 3) = *(_QWORD *)(v33 + 736);
  *((_QWORD *)v32 + 4) = v34;
  *((_QWORD *)v32 + 5) = *(_QWORD *)(v33 + 752);
  *((_QWORD *)v32 + 6) = v26;
  (*(void (**)(char *, _BYTE *, uint64_t))(v28 + 32))(&v32[v31], v29, v30);
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = sub_23AEF8A48;
  *(_QWORD *)(v35 + 24) = v32;
  v61 = sub_23AA956C8;
  v62 = v35;
  aBlock = (id)MEMORY[0x24BDAC760];
  v58 = 1107296256;
  v59 = sub_23AA9432C;
  v60 = &block_descriptor_880;
  v36 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v37 = objc_msgSend(v27, sel_fetchSwift_error_, v36, &aBlock);
  _Block_release(v36);
  v38 = aBlock;
  LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v28 & 1) != 0)
    __break(1u);
  if (v37)
  {
    LOBYTE(v39) = objc_msgSend(v37, sel_next);

    sub_23B1C6BD8();
    v40 = (uint64_t)v53;
    sub_23B1C5DA4();
    sub_23AA937BC(v40, type metadata accessor for Signpost);
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    sub_23B1C6BD8();
    v39 = (uint64_t)v53;
    sub_23B1C5DA4();
    sub_23AA937BC(v39, type metadata accessor for Signpost);
  }
  swift_release();
  return v39 & 1;
}

uint64_t sub_23AED2980(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AED2BD8(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  id v25;
  id v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  unsigned __int8 v45;
  id v46;
  uint64_t (*v47)(uint64_t);
  uint64_t (*v48)(uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id aBlock;
  unint64_t v72;
  id (*v73)(uint64_t, void *);
  void *v74;
  uint64_t (*v75)();
  uint64_t v76;
  uint64_t v77;

  v62 = a2;
  v70 = a1;
  v77 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*v2 + 744);
  v68 = *v2;
  v4 = *(_QWORD *)(v68 + 728);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v65 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v61 = *(_QWORD *)(v65 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v63 = (char *)&v55 - v6;
  v7 = sub_23B1C5DC8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v60 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v55 - v14;
  v58 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v58);
  v17 = (uint64_t)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v56 = (id)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v15, 1, 1, v7);
  aBlock = 0;
  v72 = 0xE000000000000000;
  v18 = v7;
  v19 = (uint64_t)v15;
  sub_23B1C6EFC();
  sub_23B1C64F4();
  v66 = v3;
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v20 = v72;
  v57 = aBlock;
  v59 = v19;
  v21 = v19;
  v22 = v18;
  v23 = v8;
  sub_23AA8A098(v21, (uint64_t)v13);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v22);
  v67 = AssociatedTypeWitness;
  v64 = v4;
  if (v24 == 1)
  {
    v25 = v56;
    v26 = v56;
    v27 = v60;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v13, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v27 = v60;
    v28(v60, v13, v22);
    v25 = v56;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(v17, v27, v22);
  v29 = v58;
  v60 = (char *)*(int *)(v58 + 20);
  *(_QWORD *)&v60[v17] = v25;
  v30 = (char *)(v17 + *(int *)(v29 + 24));
  *(_QWORD *)v30 = "SQLDB: Count unbound children";
  *((_QWORD *)v30 + 1) = 29;
  v58 = (uint64_t)v30;
  v30[16] = 2;
  v31 = v25;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v32 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v32 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v32 + 32) = v57;
  *(_QWORD *)(v32 + 40) = v20;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v22);
  swift_bridgeObjectRelease();
  sub_23AA8A05C(v59, (uint64_t *)&unk_2542E67B8);
  v33 = v69;
  v34 = *(void **)(v69 + qword_2542EDF00);
  v35 = v65;
  v36 = v63;
  v37 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v63, v70, v67);
  v38 = (*(unsigned __int8 *)(v35 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  if ((v62 & 1) == 0)
  {
    v49 = (char *)swift_allocObject();
    *((_QWORD *)v49 + 2) = v64;
    v50 = v68;
    v51 = v66;
    *((_QWORD *)v49 + 3) = *(_QWORD *)(v68 + 736);
    *((_QWORD *)v49 + 4) = v51;
    *((_QWORD *)v49 + 5) = *(_QWORD *)(v50 + 752);
    *((_QWORD *)v49 + 6) = v33;
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v49[v38], v36, v37);
    v52 = swift_allocObject();
    *(_QWORD *)(v52 + 16) = sub_23AEF8A08;
    *(_QWORD *)(v52 + 24) = v49;
    v75 = sub_23AA956C8;
    v76 = v52;
    aBlock = (id)MEMORY[0x24BDAC760];
    v72 = 1107296256;
    v73 = sub_23AA9432C;
    v74 = &block_descriptor_860;
    v53 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v44 = objc_msgSend(v34, sel_fetchSwift_error_, v53, &aBlock);
    _Block_release(v53);
    v45 = aBlock;
    v46 = aBlock;
    LOBYTE(v53) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v53 & 1) == 0)
    {
      v48 = 0;
      v47 = sub_23AEF8A08;
      if (!v44)
        goto LABEL_9;
LABEL_12:
      v45 = objc_msgSend(v44, sel_next);

      sub_23B1C6BD8();
      sub_23B1C5DA4();
      sub_23AA937BC(v17, type metadata accessor for Signpost);
      sub_23AAB7948((uint64_t)v48);
      sub_23AAB7948((uint64_t)v47);
      return v45 & 1;
    }
LABEL_15:
    __break(1u);
  }
  v39 = (char *)swift_allocObject();
  *((_QWORD *)v39 + 2) = v64;
  v40 = v68;
  v41 = v66;
  *((_QWORD *)v39 + 3) = *(_QWORD *)(v68 + 736);
  *((_QWORD *)v39 + 4) = v41;
  *((_QWORD *)v39 + 5) = *(_QWORD *)(v40 + 752);
  *((_QWORD *)v39 + 6) = v33;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v39[v38], v36, v37);
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = sub_23AEF8A28;
  *(_QWORD *)(v42 + 24) = v39;
  v75 = sub_23AA956C8;
  v76 = v42;
  aBlock = (id)MEMORY[0x24BDAC760];
  v72 = 1107296256;
  v73 = sub_23AA9432C;
  v74 = &block_descriptor_870;
  v43 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v44 = objc_msgSend(v34, sel_fetchSwift_error_, v43, &aBlock);
  _Block_release(v43);
  v45 = aBlock;
  v46 = aBlock;
  LOBYTE(v43) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v43 & 1) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v47 = 0;
  v48 = sub_23AEF8A28;
  if (v44)
    goto LABEL_12;
LABEL_9:
  sub_23B1C587C();

  swift_willThrow();
  sub_23B1C6BD8();
  sub_23B1C5DA4();
  sub_23AA937BC(v17, type metadata accessor for Signpost);
  sub_23AAB7948((uint64_t)v48);
  sub_23AAB7948((uint64_t)v47);
  return v45 & 1;
}

uint64_t sub_23AED33B0(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AED36D0(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AED3960(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  int v19;
  id v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[16];
  uint64_t v43;
  id v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  id aBlock;
  unint64_t v58;
  id (*v59)(uint64_t, void *);
  void *v60;
  uint64_t (*v61)();
  uint64_t v62;
  uint64_t v63;

  v55 = a1;
  v63 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*v1 + 744);
  v51 = *v1;
  v3 = *(_QWORD *)(v51 + 728);
  v56 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v46 = *(_QWORD *)(v48 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v47 = &v42[-v5];
  v6 = sub_23B1C5DC8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v54 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = &v42[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v14 = &v42[-v13];
  v15 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v15);
  v53 = &v42[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_2542E6818 != -1)
    swift_once();
  v17 = (void *)qword_2542EDD28;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v14, 1, 1, v6);
  aBlock = 0;
  v58 = 0xE000000000000000;
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v18 = v58;
  v44 = aBlock;
  v45 = v14;
  sub_23AA8A098((uint64_t)v14, (uint64_t)v12);
  v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
  v49 = AssociatedTypeWitness;
  v50 = v3;
  if (v19 == 1)
  {
    v20 = v17;
    v21 = v54;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v21 = v54;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v54, v12, v6);
  }
  v22 = v53;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v53, v21, v6);
  v43 = *(int *)(v15 + 20);
  *(_QWORD *)&v22[v43] = v17;
  v23 = &v22[*(int *)(v15 + 24)];
  *(_QWORD *)v23 = "SQLDB: Count bound children";
  *((_QWORD *)v23 + 1) = 27;
  v23[16] = 2;
  v24 = v17;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v25 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v25 + 32) = v44;
  *(_QWORD *)(v25 + 40) = v18;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v54, v6);
  swift_bridgeObjectRelease();
  sub_23AA8A05C((uint64_t)v45, (uint64_t *)&unk_2542E67B8);
  v26 = v52;
  v27 = *(void **)(v52 + qword_2542EDF00);
  v29 = v47;
  v28 = v48;
  v30 = v49;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v48 + 16))(v47, v55, v49);
  v31 = (*(unsigned __int8 *)(v28 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  v32 = (char *)swift_allocObject();
  v33 = v51;
  *((_QWORD *)v32 + 2) = v50;
  v34 = v56;
  *((_QWORD *)v32 + 3) = *(_QWORD *)(v33 + 736);
  *((_QWORD *)v32 + 4) = v34;
  *((_QWORD *)v32 + 5) = *(_QWORD *)(v33 + 752);
  *((_QWORD *)v32 + 6) = v26;
  (*(void (**)(char *, _BYTE *, uint64_t))(v28 + 32))(&v32[v31], v29, v30);
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = sub_23AEF89E8;
  *(_QWORD *)(v35 + 24) = v32;
  v61 = sub_23AA956C8;
  v62 = v35;
  aBlock = (id)MEMORY[0x24BDAC760];
  v58 = 1107296256;
  v59 = sub_23AA9432C;
  v60 = &block_descriptor_850;
  v36 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v37 = objc_msgSend(v27, sel_fetchSwift_error_, v36, &aBlock);
  _Block_release(v36);
  v38 = aBlock;
  LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v28 & 1) != 0)
    __break(1u);
  if (v37)
  {
    LOBYTE(v39) = objc_msgSend(v37, sel_next);

    sub_23B1C6BD8();
    v40 = (uint64_t)v53;
    sub_23B1C5DA4();
    sub_23AA937BC(v40, type metadata accessor for Signpost);
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    sub_23B1C6BD8();
    v39 = (uint64_t)v53;
    sub_23B1C5DA4();
    sub_23AA937BC(v39, type metadata accessor for Signpost);
  }
  swift_release();
  return v39 & 1;
}

uint64_t sub_23AED3F78(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AED421C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  unint64_t v18;
  id v19;
  char *v20;
  char *v21;
  id v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  _QWORD v42[2];
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  id v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id aBlock;
  unint64_t v57;
  id (*v58)(uint64_t, void *);
  void *v59;
  uint64_t (*v60)();
  uint64_t v61;
  uint64_t v62;

  v53 = a1;
  v62 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*v1 + 744);
  v46 = *v1;
  v54 = *(_QWORD *)(v46 + 728);
  v55 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v42[1] = *(_QWORD *)(v44 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v43 = (char *)v42 - v4;
  v5 = sub_23B1C5DC8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v51 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v42 - v12;
  v14 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v17 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v13, 1, 1, v5);
  aBlock = 0;
  v57 = 0xE000000000000000;
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_getAssociatedConformanceWitness();
  v45 = AssociatedTypeWitness;
  sub_23B1C7340();
  v18 = v57;
  v49 = aBlock;
  v50 = v13;
  sub_23AA8A098((uint64_t)v13, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    v19 = v17;
    v20 = v51;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v11, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v20 = v51;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v51, v11, v5);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v16, v20, v5);
  v48 = *(int *)(v14 + 20);
  *(_QWORD *)&v16[v48] = v17;
  v21 = &v16[*(int *)(v14 + 24)];
  *(_QWORD *)v21 = "SQLDB: Count keep downloaded children";
  *((_QWORD *)v21 + 1) = 37;
  v47 = v21;
  v21[16] = 2;
  v22 = v17;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v23 = v16;
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v24 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v24 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v24 + 32) = v49;
  *(_QWORD *)(v24 + 40) = v18;
  v51 = v23;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v5);
  swift_bridgeObjectRelease();
  sub_23AA8A05C((uint64_t)v50, (uint64_t *)&unk_2542E67B8);
  v25 = v52;
  if (*(_BYTE *)(v52 + 32) == 1)
  {
    v26 = *(void **)(v52 + qword_2542EDF00);
    v28 = v43;
    v27 = v44;
    v29 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v53, v45);
    v30 = (*(unsigned __int8 *)(v27 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    v31 = (char *)swift_allocObject();
    *((_QWORD *)v31 + 2) = v54;
    v32 = v46;
    v33 = v55;
    *((_QWORD *)v31 + 3) = *(_QWORD *)(v46 + 736);
    *((_QWORD *)v31 + 4) = v33;
    *((_QWORD *)v31 + 5) = *(_QWORD *)(v32 + 752);
    *((_QWORD *)v31 + 6) = v25;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v31[v30], v28, v29);
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = sub_23AEF89C8;
    *(_QWORD *)(v34 + 24) = v31;
    v60 = sub_23AA956C8;
    v61 = v34;
    aBlock = (id)MEMORY[0x24BDAC760];
    v57 = 1107296256;
    v58 = sub_23AA9432C;
    v59 = &block_descriptor_840;
    v35 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v36 = objc_msgSend(v26, sel_fetchSwift_error_, v35, &aBlock);
    _Block_release(v35);
    v37 = aBlock;
    LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v28 & 1) != 0)
      __break(1u);
    if (!v36)
    {
      sub_23B1C587C();

      swift_willThrow();
      sub_23B1C6BD8();
      v38 = (uint64_t)v51;
      sub_23B1C5DA4();
      sub_23AA937BC(v38, type metadata accessor for Signpost);
      swift_release();
      return v38 & 1;
    }
    LOBYTE(v38) = objc_msgSend(v36, sel_next);

    v39 = sub_23AEF89C8;
  }
  else
  {
    LOBYTE(v38) = 0;
    v39 = 0;
  }
  v40 = (uint64_t)v51;
  sub_23B1C6BD8();
  sub_23B1C5DA4();
  sub_23AA937BC(v40, type metadata accessor for Signpost);
  sub_23AAB7948((uint64_t)v39);
  return v38 & 1;
}

uint64_t sub_23AED4864(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)*a2;
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v4 = v3[93];
  v5 = v3[91];
  swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v8 = swift_checkMetadataState();
  v7(a1, v8, v6);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v9 = v3[92];
  v10 = v3[94];
  sub_23AEF6DA8(0, 0xE000000000000000);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AEF6E68(0, 0xE000000000000000);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AEF6FF4(0, 0xE000000000000000, v5, v9, v4, v10, 501);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AED4B44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  char *v20;
  id v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id aBlock[7];

  v40 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*v1 + 744);
  v46 = *v1;
  v44 = *(_QWORD *)(v46 + 728);
  v45 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v43 = AssociatedTypeWitness;
  v39 = *(_QWORD *)(v42 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v41 = (char *)&v36 - v4;
  v5 = sub_23B1C5DC8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v36 - v13;
  v15 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v18 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v14, 1, 1, v5);
  sub_23AA8A098((uint64_t)v14, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1)
  {
    v19 = v18;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v17, v8, v5);
  v37 = *(int *)(v15 + 20);
  *(_QWORD *)&v17[v37] = v18;
  v20 = &v17[*(int *)(v15 + 24)];
  *(_QWORD *)v20 = "SQLDB: Has reseting parent";
  *((_QWORD *)v20 + 1) = 26;
  v20[16] = 2;
  v21 = v18;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E67B8);
  v22 = v47;
  v38 = *(id *)(v47 + qword_2542EDF00);
  v23 = v41;
  v24 = v42;
  v25 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v41, v40, v43);
  v26 = (*(unsigned __int8 *)(v24 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v27 = (v39 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = (char *)swift_allocObject();
  *((_QWORD *)v28 + 2) = v44;
  v29 = v46;
  v30 = v45;
  *((_QWORD *)v28 + 3) = *(_QWORD *)(v46 + 736);
  *((_QWORD *)v28 + 4) = v30;
  *((_QWORD *)v28 + 5) = *(_QWORD *)(v29 + 752);
  *((_QWORD *)v28 + 6) = v22;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v28[v26], v23, v25);
  *(_QWORD *)&v28[v27] = 32776;
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = sub_23AEF89A8;
  v31[3] = v28;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v31;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_830;
  v32 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v33 = objc_msgSend(v38, sel_fetchSwift_error_, v32, aBlock);
  _Block_release(v32);
  v34 = aBlock[0];
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v22 & 1) != 0)
    __break(1u);
  if (v33)
  {
    LOBYTE(v34) = objc_msgSend(v33, sel_next);

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  sub_23B1C6BD8();
  sub_23B1C5DA4();
  sub_23AA937BC((uint64_t)v17, type metadata accessor for Signpost);
  swift_release();
  return v34 & 1;
}

uint64_t sub_23AED5054(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (qword_2542E5078 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5540);
  sub_23AAB5A28(&qword_2542E75B0, (uint64_t *)&unk_2542E5540, MEMORY[0x24BEE2B40]);
  sub_23AAA420C();
  sub_23B1C6644();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

_QWORD *sub_23AED5550(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  char *v21;
  char *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  id aBlock[7];

  v48 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*v2 + 744);
  v54 = *v2;
  v52 = *(_QWORD *)(v54 + 728);
  v53 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v51 = AssociatedTypeWitness;
  v47 = *(_QWORD *)(v50 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v49 = (char *)&v44 - v6;
  v7 = sub_23B1C5DC8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v44 - v15;
  v17 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v17);
  v56 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v19 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v16, 1, 1, v7);
  sub_23AA8A098((uint64_t)v16, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7) == 1)
  {
    v20 = v19;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
  }
  v21 = v56;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v56, v10, v7);
  v45 = *(int *)(v17 + 20);
  *(_QWORD *)&v21[v45] = v19;
  v22 = &v21[*(int *)(v17 + 24)];
  *(_QWORD *)v22 = "SQLDB: Has reuploading or reevaluating purgeability parent";
  *((_QWORD *)v22 + 1) = 58;
  v46 = v22;
  v22[16] = 2;
  v23 = v19;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_23AA8A05C((uint64_t)v16, (uint64_t *)&unk_2542E67B8);
  v24 = v55;
  v25 = *(void **)(v55 + qword_2542EDF00);
  v27 = v49;
  v26 = v50;
  v28 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v48, v51);
  v29 = (*(unsigned __int8 *)(v26 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  v30 = (v47 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = (char *)swift_allocObject();
  *((_QWORD *)v31 + 2) = v52;
  v32 = v54;
  v33 = v53;
  *((_QWORD *)v31 + 3) = *(_QWORD *)(v54 + 736);
  *((_QWORD *)v31 + 4) = v33;
  *((_QWORD *)v31 + 5) = *(_QWORD *)(v32 + 752);
  *((_QWORD *)v31 + 6) = v24;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(&v31[v29], v27, v28);
  *(_QWORD *)&v31[v30] = a2;
  v34 = (_QWORD *)swift_allocObject();
  v34[2] = sub_23AEF890C;
  v34[3] = v31;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v34;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_820;
  v35 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v36 = objc_msgSend(v25, sel_fetchSwift_error_, v35, aBlock);
  _Block_release(v35);
  v37 = aBlock[0];
  LOBYTE(v24) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v24 & 1) != 0)
    __break(1u);
  if (v36)
  {
    v38 = 0;
    while (objc_msgSend(v36, sel_next))
    {
      v39 = (unint64_t)objc_msgSend(v36, sel_unsignedLongAtIndex_, 0);
      if ((v39 & ~v38) != 0)
        v40 = v39;
      else
        v40 = 0;
      v38 |= v40;
      v34 = (_QWORD *)(v38 & a2);
      if ((v38 & a2) == a2)
      {

        goto LABEL_17;
      }
    }

    v34 = (_QWORD *)(v38 & a2);
LABEL_17:
    sub_23B1C6BD8();
    v42 = (uint64_t)v56;
    sub_23B1C5DA4();
    sub_23AA937BC(v42, type metadata accessor for Signpost);
    swift_release();
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    sub_23B1C6BD8();
    v41 = (uint64_t)v56;
    sub_23B1C5DA4();
    sub_23AA937BC(v41, type metadata accessor for Signpost);
    swift_release();
  }
  return v34;
}

uint64_t sub_23AED5AB4(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (qword_2542E5078 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5540);
  sub_23AAB5A28(&qword_2542E75B0, (uint64_t *)&unk_2542E5540, MEMORY[0x24BEE2B40]);
  sub_23AAA420C();
  sub_23B1C6644();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AED5FB8(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v14[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = sub_23B1C6C98();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v14 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v14 - v11;
  sub_23AECBE54(a1, (uint64_t)v9);
  if (!v2)
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      v1 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, AssociatedTypeWitness);
      v1 = sub_23AED612C((uint64_t)v12);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
    }
  }
  return v1 & 1;
}

uint64_t sub_23AED612C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  char *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id aBlock[7];

  v39 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*v1 + 744);
  v45 = *v1;
  v43 = *(_QWORD *)(v45 + 728);
  v44 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v42 = AssociatedTypeWitness;
  v38 = *(_QWORD *)(v41 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v40 = (char *)&v36 - v4;
  v5 = sub_23B1C5DC8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v36 - v13;
  v15 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v18 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v14, 1, 1, v5);
  sub_23AA8A098((uint64_t)v14, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1)
  {
    v19 = v18;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v17, v8, v5);
  v37 = *(int *)(v15 + 20);
  *(_QWORD *)&v17[v37] = v18;
  v20 = &v17[*(int *)(v15 + 24)];
  *(_QWORD *)v20 = "SQLDB: Has ignored parent";
  *((_QWORD *)v20 + 1) = 25;
  v20[16] = 2;
  v21 = v18;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E67B8);
  v22 = v46;
  v23 = *(void **)(v46 + qword_2542EDF00);
  v25 = v40;
  v24 = v41;
  v26 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v40, v39, v42);
  v27 = (*(unsigned __int8 *)(v24 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v28 = (char *)swift_allocObject();
  *((_QWORD *)v28 + 2) = v43;
  v29 = v45;
  v30 = v44;
  *((_QWORD *)v28 + 3) = *(_QWORD *)(v45 + 736);
  *((_QWORD *)v28 + 4) = v30;
  *((_QWORD *)v28 + 5) = *(_QWORD *)(v29 + 752);
  *((_QWORD *)v28 + 6) = v22;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v28[v27], v25, v26);
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = sub_23AEF88EC;
  v31[3] = v28;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v31;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_810;
  v32 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v33 = objc_msgSend(v23, sel_fetchSwift_error_, v32, aBlock);
  _Block_release(v32);
  v34 = aBlock[0];
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v22 & 1) != 0)
    __break(1u);
  if (v33)
  {
    LOBYTE(v34) = objc_msgSend(v33, sel_next);

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  sub_23B1C6BD8();
  sub_23B1C5DA4();
  sub_23AA937BC((uint64_t)v17, type metadata accessor for Signpost);
  swift_release();
  return v34 & 1;
}

uint64_t sub_23AED6624(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AED69D8(void *a1, uint64_t a2, int a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  id v22;
  char *v23;
  char *v24;
  char *v25;
  id v26;
  uint64_t v27;
  _BYTE *v28;
  id v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  id aBlock[8];

  v61 = a3;
  v53 = a2;
  v55 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 744);
  v62 = *(_QWORD *)(*(_QWORD *)v3 + 728);
  v63 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v57 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v58 = AssociatedTypeWitness;
  v54 = *(_QWORD *)(v57 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v56 = (char *)&v50 - v8;
  v9 = sub_23B1C5DC8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v51 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v50 - v16;
  v18 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v18);
  v64 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v20 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v17, 1, 1, v9);
  v52 = v17;
  sub_23AA8A098((uint64_t)v17, (uint64_t)v15);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9);
  v59 = v5;
  v60 = v3;
  if (v21 == 1)
  {
    v22 = v20;
    v23 = v51;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v15, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v23 = v51;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v51, v15, v9);
  }
  v24 = v64;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v64, v23, v9);
  v50 = *(int *)(v18 + 20);
  *(_QWORD *)&v24[v50] = v20;
  v25 = &v24[*(int *)(v18 + 24)];
  *(_QWORD *)v25 = "SQLDB: Scan directory";
  *((_QWORD *)v25 + 1) = 21;
  v25[16] = 2;
  v26 = v20;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v23, v9);
  sub_23AA8A05C((uint64_t)v52, (uint64_t *)&unk_2542E67B8);
  v51 = v25;
  if (v53)
  {
    type metadata accessor for PaginatedContinuation();
    v27 = swift_dynamicCastClass();
    v28 = v60;
    if (!v27)
    {
      result = sub_23B1C704C();
      __break(1u);
      return result;
    }
    v53 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v53 = 0;
    v28 = v60;
  }
  v29 = v55;
  v30 = v56;
  v55 = *(id *)&v28[qword_2542EDF00];
  v31 = v57;
  v32 = v58;
  (*(void (**)(char *, id, uint64_t))(v57 + 16))(v56, v29, v58);
  v33 = (*(unsigned __int8 *)(v31 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  v34 = (v54 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = v62;
  v36 = v59;
  v37 = v63;
  *(_QWORD *)(v35 + 24) = *(_QWORD *)(v59 + 736);
  *(_QWORD *)(v35 + 32) = v37;
  *(_QWORD *)(v35 + 40) = *(_QWORD *)(v36 + 752);
  *(_QWORD *)(v35 + 48) = v28;
  *(_BYTE *)(v35 + 56) = v61 & 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))(v35 + v33, v30, v32);
  *(_QWORD *)(v35 + v34) = v53;
  *(_QWORD *)(v35 + ((v34 + 15) & 0xFFFFFFFFFFFFFFF8)) = 200;
  v38 = (_QWORD *)swift_allocObject();
  v38[2] = sub_23AEF9440;
  v38[3] = v35;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v38;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_1140;
  v39 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v40 = objc_msgSend(v55, sel_fetchSwift_error_, v39, aBlock);
  _Block_release(v39);
  v41 = aBlock[0];
  LOBYTE(v32) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v32 & 1) != 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v40)
  {
    v43 = type metadata accessor for SnapshotItem(0, v62, v63, v42);
    v41 = (id)sub_23B1C6758();
    v65 = 0;
    aBlock[0] = v41;
    if (!objc_msgSend(v40, sel_next))
      goto LABEL_17;
    v44 = v61;
    do
    {
      v41 = (id)MEMORY[0x23B8601A8]();
      sub_23AED7410(&v65, v40, v28, v44 & 1, (uint64_t)aBlock);
      if (v4)
      {
        objc_autoreleasePoolPop(v41);

        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
      objc_autoreleasePoolPop(v41);
    }
    while ((objc_msgSend(v40, sel_next) & 1) != 0);
    v41 = aBlock[0];
LABEL_17:
    v45 = swift_bridgeObjectRetain();
    v46 = MEMORY[0x23B85F0B0](v45, v43);
    swift_bridgeObjectRelease();

    if (v46 == 200)
    {
      v47 = v65 + 1;
      if (!__OFADD__(v65, 1))
      {
        type metadata accessor for PaginatedContinuation();
        *(_QWORD *)(swift_allocObject() + 16) = v47;
        goto LABEL_23;
      }
LABEL_25:
      __break(1u);
    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
LABEL_23:
  sub_23B1C6BD8();
  v48 = (uint64_t)v64;
  sub_23B1C5DA4();
  sub_23AA937BC(v48, type metadata accessor for Signpost);
  swift_release();
  return (uint64_t)v41;
}

uint64_t sub_23AED70B4(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  void (*v8)(void *, uint64_t, uint64_t);
  uint64_t v9;
  id v10;
  id v11;

  if (*(_BYTE *)(a2 + 32) == 1 && (a3 & 1) != 0)
  {
    sub_23B1C6EFC();
    sub_23B1C64F4();
    swift_bridgeObjectRetain();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
  }
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v8 = *(void (**)(void *, uint64_t, uint64_t))(v7 + 32);
  v9 = swift_checkMetadataState();
  v8(a1, v9, v7);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v10 = objc_msgSend(a1, sel_bindLongParameter_, a5);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v11 = objc_msgSend(a1, sel_bindLongParameter_, a6);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

id sub_23AED7410(_QWORD *a1, void *a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id result;
  char *v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  id v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  id v33;
  id v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _OWORD v40[15];
  uint64_t v41;
  _OWORD v42[15];
  uint64_t v43;
  _QWORD v44[31];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  id v61;

  v39 = a5;
  LODWORD(v61) = a4;
  v9 = (int *)type metadata accessor for SnapshotItem(0, *(_QWORD *)(*(_QWORD *)a3 + 728), *(_QWORD *)(*(_QWORD *)a3 + 744), a4);
  v10 = *((_QWORD *)v9 - 1);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v36 - v14;
  *a1 = objc_msgSend(a2, sel_longAtIndex_, 0);
  v16 = MEMORY[0x23B8613CC](&unk_23B1DD224, v9);
  result = (id)sub_23AABEBB8(a2, 1, (uint64_t)v9, v16, (uint64_t)v15);
  if (!v5)
  {
    v37 = v15;
    v38 = v13;
    v36 = v10;
    if (a3[32] == 1)
    {
      v18 = v38;
      if ((v61 & 1) == 0)
        goto LABEL_18;
      v19 = a2;
      v20 = *(_DWORD *)&a3[qword_2542EDEF0];
      if (!__OFADD__(v20, 1))
      {
        v21 = sub_23AAAF0A8();
        sub_23AAAB6FC(v19, (uint64_t)v21, v20 + 1, (uint64_t)&v45);
        swift_bridgeObjectRelease();
        v40[12] = v57;
        v40[13] = v58;
        v40[14] = v59;
        v40[8] = v53;
        v40[9] = v54;
        v40[10] = v55;
        v40[11] = v56;
        v40[4] = v49;
        v40[5] = v50;
        v40[6] = v51;
        v40[7] = v52;
        v40[0] = v45;
        v40[1] = v46;
        v40[2] = v47;
        v40[3] = v48;
        v42[12] = v57;
        v42[13] = v58;
        v42[14] = v59;
        v42[8] = v53;
        v42[9] = v54;
        v42[10] = v55;
        v42[11] = v56;
        v42[4] = v49;
        v42[5] = v50;
        v42[6] = v51;
        v42[7] = v52;
        v42[0] = v45;
        v42[1] = v46;
        v41 = v60;
        v43 = v60;
        v42[2] = v47;
        v42[3] = v48;
        nullsub_1(v42);
        v29 = (uint64_t)&v37[v9[13]];
        sub_23AAB7EC8(v29, (uint64_t)v44);
        sub_23AC42B28((uint64_t)v40);
        sub_23AAB7E4C(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAA5BA4);
        sub_23AAB7EC8((uint64_t)v42, v29);
        v30 = MEMORY[0x23B8613CC](&unk_23B1DD478, v9);
        result = (id)sub_23AF219A4((uint64_t)v9, v30);
        if (result == 1)
        {
          v31 = *(_DWORD *)&a3[qword_2542EDF08];
          v32 = v20 + v31;
          if (!__OFADD__(v20, v31))
          {
            result = objc_msgSend(v19, sel_unsignedLongAtIndex_, (v20 + v31));
            if (!__OFADD__(v32, 1))
            {
              v33 = result;
              v34 = objc_msgSend(v19, sel_unsignedLongAtIndex_, (v32 + 1));
              sub_23AEF94CC((uint64_t)v40);
              v23 = v37;
              v35 = &v37[v9[15]];
              *(_QWORD *)v35 = v33;
              *((_QWORD *)v35 + 1) = v34;
              v35[16] = 0;
              goto LABEL_16;
            }
LABEL_25:
            __break(1u);
            return result;
          }
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
        sub_23AEF94CC((uint64_t)v40);
LABEL_18:
        v28 = v36;
        v23 = v37;
        goto LABEL_19;
      }
      __break(1u);
    }
    else
    {
      v18 = v38;
      if ((v61 & 1) == 0)
        goto LABEL_18;
      v22 = MEMORY[0x23B8613CC](&unk_23B1DD478, v9);
      v23 = v37;
      if (sub_23AF219A4((uint64_t)v9, v22) != 1)
      {
        v28 = v36;
LABEL_19:
        (*(void (**)(char *, char *, int *))(v28 + 16))(v18, v23, v9);
        sub_23B1C67DC();
        sub_23B1C67AC();
        return (id)(*(uint64_t (**)(char *, int *))(v28 + 8))(v23, v9);
      }
      v24 = *(_DWORD *)&a3[qword_2542EDEF0];
      result = objc_msgSend(a2, sel_unsignedLongAtIndex_, v24);
      v61 = result;
      if (!__OFADD__(v24, 1))
      {
        result = objc_msgSend(a2, sel_unsignedLongAtIndex_, v24 + 1);
        if (!__OFADD__(v24, 2))
        {
          v25 = result;
          v26 = objc_msgSend(a2, sel_unsignedLongAtIndex_, v24 + 2);
          v27 = &v23[v9[14]];
          *(_QWORD *)v27 = v61;
          *((_QWORD *)v27 + 1) = v25;
          *((_QWORD *)v27 + 2) = v26;
          v27[24] = 0;
LABEL_16:
          v18 = v38;
          v28 = v36;
          goto LABEL_19;
        }
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_23AED781C(void *a1, uint64_t a2)
{
  return sub_23AED69D8(a1, a2, 0);
}

void sub_23AED7834()
{
  type metadata accessor for PersistenceTrigger();
}

uint64_t sub_23AED78A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  uint64_t result;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t AssociatedConformanceWitness;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  unsigned int v69;
  void *v70;
  id v71;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v73;
  uint64_t TupleTypeMetadata3;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE v87[64];

  *(_QWORD *)(v3 - 360) = a1;
  *(_QWORD *)(v3 - 368) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v3 - 344) = &v87[-v4];
  v6 = type metadata accessor for SnapshotItem(255, v1, v2, v5);
  v7 = sub_23B1C6C98();
  *(_QWORD *)(v3 - 352) = v7;
  *(_QWORD *)(v3 - 376) = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  *(_QWORD *)(v3 - 264) = &v87[-v9];
  *(_QWORD *)(v3 - 312) = v6;
  *(_QWORD *)(v3 - 304) = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v3 - 320) = &v87[-v10];
  v11 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)(v3 - 288) = &v87[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_23B1C5474();
  *(_QWORD *)(v3 - 272) = v13;
  *(_QWORD *)(v3 - 280) = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  *(_QWORD *)(v3 - 296) = &v87[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v3 - 176) = v2;
  *(_QWORD *)(v3 - 168) = v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  *(_QWORD *)(v3 - 216) = v16;
  *(_QWORD *)(v3 - 384) = *(_QWORD *)(v16 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  *(_QWORD *)(v3 - 184) = &v87[-v17];
  v18 = sub_23B1C5DC8();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v3 - 192) = &v87[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = &v87[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v22);
  v26 = &v87[-v25];
  v27 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v27);
  v29 = &v87[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_2542E6818 != -1)
    swift_once();
  v30 = (void *)qword_2542EDD28;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v26, 1, 1, v18);
  *(_QWORD *)(v3 - 144) = 0;
  *(_QWORD *)(v3 - 136) = 0xE000000000000000;
  v31 = (uint64_t)v26;
  sub_23B1C64F4();
  *(_QWORD *)(v3 - 160) = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v3 - 208) = AssociatedTypeWitness;
  sub_23B1C7340();
  v32 = *(_QWORD *)(v3 - 136);
  *(_QWORD *)(v3 - 232) = *(_QWORD *)(v3 - 144);
  *(_QWORD *)(v3 - 224) = v31;
  sub_23AA8A098(v31, (uint64_t)v24);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v24, 1, v18) == 1)
  {
    v33 = v30;
    v34 = *(_QWORD *)(v3 - 192);
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v24, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v34 = *(_QWORD *)(v3 - 192);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v19 + 32))(v34, v24, v18);
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v19 + 16))(v29, v34, v18);
  v35 = *(int *)(v27 + 20);
  *(_QWORD *)(v3 - 240) = v35;
  *(_QWORD *)&v29[v35] = v30;
  v36 = &v29[*(int *)(v27 + 24)];
  *(_QWORD *)v36 = "SQLDB: Delete Item";
  *((_QWORD *)v36 + 1) = 18;
  *(_QWORD *)(v3 - 248) = v36;
  v36[16] = 2;
  v37 = v30;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  *(_QWORD *)(v3 - 192) = v29;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v38 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v38 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v38 + 32) = *(_QWORD *)(v3 - 232);
  *(_QWORD *)(v38 + 40) = v32;
  v39 = *(_QWORD *)(v3 - 192);
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v34, v18);
  swift_bridgeObjectRelease();
  sub_23AA8A05C(*(_QWORD *)(v3 - 224), (uint64_t *)&unk_2542E67B8);
  v40 = *(_QWORD *)(v3 - 200);
  v41 = *(void **)(v40 + qword_2542EDF00);
  objc_msgSend(v41, sel_assertOnQueue);
  v42 = *(_QWORD *)(v3 - 184);
  sub_23B0EB9DC();
  v43 = *(_QWORD *)(v3 - 152);
  v44 = *(_QWORD *)(v3 - 208);
  v45 = sub_23B1C63A4();
  v46 = *(_QWORD *)(v3 - 216);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v42, v44);
  if ((v45 & 1) != 0)
  {
    sub_23B1C5438();
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AB22974();
    v47 = *(_QWORD *)(v3 - 296);
    v48 = *(_QWORD *)(v3 - 272);
    sub_23B1C5864();
    sub_23B1C5354();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 280) + 8))(v47, v48);
    swift_willThrow();
LABEL_9:
    v51 = 0;
LABEL_10:
    sub_23B1C6BD8();
    sub_23B1C5DA4();
    sub_23AA937BC(v39, type metadata accessor for Signpost);
    return sub_23AAB7948((uint64_t)v51);
  }
  v49 = *(_BYTE **)(v3 - 264);
  v50 = *(_QWORD *)(v3 - 256);
  sub_23AA7C384(v43, 1, v49);
  if (v50)
    goto LABEL_9;
  *(_QWORD *)(v3 - 224) = 0;
  v53 = *(_QWORD *)(v3 - 304);
  v54 = v49;
  v55 = v49;
  v56 = *(_QWORD *)(v3 - 312);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v53 + 48))(v54, 1, v56) == 1)
  {
    (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v3 - 376) + 8))(v55, *(_QWORD *)(v3 - 352));
    result = swift_weakLoadStrong();
    if (result)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v46 + 16))(*(_QWORD *)(v3 - 344), v43, v44);
      v57 = swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      *(_QWORD *)(v3 - 144) = v44;
      *(_QWORD *)(v3 - 136) = v57;
      *(_QWORD *)(v3 - 128) = *(_QWORD *)(v3 - 160);
      *(_QWORD *)(v3 - 120) = AssociatedConformanceWitness;
      type metadata accessor for ReconciliationID();
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  (*(void (**)(_QWORD, _BYTE *, uint64_t))(v53 + 32))(*(_QWORD *)(v3 - 320), v55, v56);
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16);
  v60 = *(_QWORD *)(v3 - 184);
  *(_QWORD *)(v3 - 232) = v59;
  v59(v60, v43, v44);
  v61 = (*(unsigned __int8 *)(v46 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  v62 = (_QWORD *)swift_allocObject();
  v63 = v46;
  v64 = v62;
  v65 = *(_QWORD *)(v3 - 328);
  v62[2] = *(_QWORD *)(v3 - 168);
  v62[3] = v65;
  v66 = *(_QWORD *)(v3 - 336);
  v62[4] = *(_QWORD *)(v3 - 176);
  v62[5] = v66;
  v62[6] = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))((char *)v62 + v61, v60, v44);
  v67 = swift_allocObject();
  *(_QWORD *)(v67 + 16) = sub_23AEF8824;
  *(_QWORD *)(v67 + 24) = v64;
  *(_QWORD *)(v3 - 112) = sub_23AA956C8;
  *(_QWORD *)(v3 - 104) = v67;
  *(_QWORD *)(v3 - 144) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v3 - 136) = 1107296256;
  *(_QWORD *)(v3 - 128) = sub_23AA9432C;
  *(_QWORD *)(v3 - 120) = &block_descriptor_800;
  v68 = _Block_copy((const void *)(v3 - 144));
  swift_retain();
  swift_retain();
  swift_release();
  *(_QWORD *)(v3 - 144) = 0;
  v69 = objc_msgSend(v41, sel_executeSwift_error_, v68, v3 - 144);
  _Block_release(v68);
  v70 = *(void **)(v3 - 144);
  v71 = v70;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  v73 = *(_QWORD *)(v3 - 344);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_26:
    swift_once();
    goto LABEL_18;
  }
  if (!v69)
  {
    sub_23B1C587C();

    swift_willThrow();
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 304) + 8))(*(_QWORD *)(v3 - 320), *(_QWORD *)(v3 - 312));
    v51 = sub_23AEF8824;
    v39 = *(_QWORD *)(v3 - 192);
    goto LABEL_10;
  }
  sub_23AEC68D8(*(_QWORD *)(v3 - 152));
  result = swift_weakLoadStrong();
  v71 = (id)result;
  v40 = *(_QWORD *)(v3 - 320);
  if (!result)
    goto LABEL_28;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v75 = v73 + *(int *)(TupleTypeMetadata3 + 48);
  v70 = (void *)*(int *)(TupleTypeMetadata3 + 64);
  v76 = *(_QWORD *)(v3 - 304);
  v77 = *(_QWORD *)(v3 - 312);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v73, v40, v77);
  v78 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56);
  v78(v73, 0, 1, v77);
  v79 = v75;
  isEscapingClosureAtFileLocation = v77;
  v78(v79, 1, 1, v77);
  v41 = *(void **)(v3 - 360);
  if (qword_2542E7190 != -1)
    goto LABEL_26;
LABEL_18:
  *(_QWORD *)((char *)v70 + v73) = qword_2542EDE38;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t))(*(_QWORD *)v71 + 312))(v73);
  swift_release();
  (*(void (**)(uint64_t, void *))(*(_QWORD *)(v3 - 368) + 8))(v73, v41);
  v80 = v40 + *(int *)(isEscapingClosureAtFileLocation + 36);
  v81 = *(_QWORD *)(v3 - 224);
  v82 = sub_23AECF8F4(v80, 1);
  *(_QWORD *)(v3 - 224) = v81;
  if (v81)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 304) + 8))(v40, isEscapingClosureAtFileLocation);
    v51 = sub_23AEF8824;
    v39 = *(_QWORD *)(v3 - 192);
    goto LABEL_10;
  }
  if ((v82 & 1) != 0)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v3 - 304) + 8))(*(_QWORD *)(v3 - 320), isEscapingClosureAtFileLocation);
    v86 = *(_QWORD *)(v3 - 192);
    sub_23B1C6BD8();
    sub_23B1C5DA4();
    sub_23AA937BC(v86, type metadata accessor for Signpost);
    return sub_23AAB7948((uint64_t)sub_23AEF8824);
  }
  result = swift_weakLoadStrong();
  if (result)
  {
    v83 = *(_QWORD *)(v3 - 208);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 - 232))(v73, v80, v83);
    v84 = swift_getAssociatedTypeWitness();
    v85 = swift_getAssociatedConformanceWitness();
    *(_QWORD *)(v3 - 144) = v83;
    *(_QWORD *)(v3 - 136) = v84;
    *(_QWORD *)(v3 - 128) = *(_QWORD *)(v3 - 160);
    *(_QWORD *)(v3 - 120) = v85;
    type metadata accessor for ReconciliationID();
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_23AED8514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v11;

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  v11 = a5;
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v9 = swift_checkMetadataState();
  v8(a1, v9, v7);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return v11;
}

void sub_23AED8668(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 744);
  v5 = *(_QWORD *)(*v1 + 728);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v17 - v8;
  v18 = *(id *)((char *)v1 + qword_2542EDF00);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v17 = a1;
  v10(v9, a1, AssociatedTypeWitness);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = v5;
  *((_QWORD *)v12 + 3) = *(_QWORD *)(v3 + 736);
  *((_QWORD *)v12 + 4) = v4;
  *((_QWORD *)v12 + 5) = *(_QWORD *)(v3 + 752);
  *((_QWORD *)v12 + 6) = v1;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v9, AssociatedTypeWitness);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = sub_23AEF8804;
  v13[3] = v12;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v13;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_790;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v15 = objc_msgSend(v18, sel_fetchSwift_error_, v14, aBlock);
  _Block_release(v14);
  v16 = aBlock[0];
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v9 & 1) != 0)
    __break(1u);
  if (v15)
  {
    if ((objc_msgSend(v15, sel_next) & 1) == 0)
      sub_23AED7834();
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
}

uint64_t sub_23AED88FC(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AED8A44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  unsigned __int8 v16;
  id v17;
  _QWORD v19[2];
  id v20;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 744);
  v5 = *(_QWORD *)(*v1 + 728);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)v19 - v8;
  v20 = *(id *)((char *)v1 + qword_2542EDF00);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v19 - v8, a1, AssociatedTypeWitness);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = (char *)swift_allocObject();
  *((_QWORD *)v11 + 2) = v5;
  *((_QWORD *)v11 + 3) = *(_QWORD *)(v3 + 736);
  *((_QWORD *)v11 + 4) = v4;
  v12 = *(_QWORD *)(v3 + 752);
  v13 = v19[1];
  *((_QWORD *)v11 + 5) = v12;
  *((_QWORD *)v11 + 6) = v13;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, AssociatedTypeWitness);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = sub_23AEF9384;
  v14[3] = v11;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v14;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_1130;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v16 = objc_msgSend(v20, sel_executeSwift_error_, v15, aBlock);
  _Block_release(v15);
  v17 = aBlock[0];
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v15 & 1) != 0)
    __break(1u);
  if ((v16 & 1) != 0)
    return swift_release();
  sub_23B1C587C();

  swift_willThrow();
  return swift_release();
}

uint64_t sub_23AED8CB0(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AED8EF8(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void (*v60)(void);
  id v61;
  id v62;
  unsigned __int8 v63;
  char *v64;
  uint64_t v65;
  id v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  _BYTE *v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t AssociatedConformanceWitness;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;

  v90 = a1;
  v2 = *(char **)(*(_QWORD *)v1 + 728);
  AssociatedConformanceWitness = *(_QWORD *)(*(_QWORD *)v1 + 744);
  v82 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_23AEF9344();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v87 = *(_QWORD *)(TupleTypeMetadata3 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata3);
  v6 = (char *)&v75 - v5;
  v96 = v7;
  v8 = sub_23B1C6C98();
  v75 = *(_QWORD *)(v8 - 8);
  v76 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v84 = (char *)&v75 - v10;
  v93 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v77 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v92 = (char *)&v75 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v91 = (char *)&v75 - v15;
  v16 = sub_23B1C5DC8();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v88 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v75 - v23;
  v25 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v25);
  v86 = (char *)&v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v27 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v24, 1, 1, v16);
  v94 = 0;
  v95 = 0xE000000000000000;
  sub_23B1C6EFC();
  sub_23B1C64F4();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v28 = v95;
  v81 = v94;
  v82 = v24;
  v29 = (uint64_t)v24;
  v30 = v17;
  sub_23AA8A098(v29, (uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v22, 1, v16) == 1)
  {
    v31 = v27;
    v32 = v88;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v22, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v33 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v32 = v88;
    v33(v88, v22, v16);
  }
  v34 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v80 = v30;
  v35 = v86;
  v34(v86, v32, v16);
  v79 = *(int *)(v25 + 20);
  *(_QWORD *)&v35[v79] = v27;
  v36 = &v35[*(int *)(v25 + 24)];
  *(_QWORD *)v36 = "SQLDB: Recursive Delete Children";
  *((_QWORD *)v36 + 1) = 32;
  v78 = v36;
  v36[16] = 2;
  v37 = v27;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v38 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v38 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v38 + 32) = v81;
  *(_QWORD *)(v38 + 40) = v28;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v88, v16);
  swift_bridgeObjectRelease();
  sub_23AA8A05C((uint64_t)v82, (uint64_t *)&unk_2542E67B8);
  objc_msgSend(*(id *)(v85 + qword_2542EDF00), sel_assertOnQueue);
  v39 = v96;
  sub_23B1C7310();
  swift_allocObject();
  v40 = sub_23B1C6728();
  v42 = v41;
  v43 = v93;
  v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16);
  v45 = v90;
  v44(v41, v90, AssociatedTypeWitness);
  v46 = v83;
  v47 = sub_23AECCE98(v45);
  if (v46)
  {
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, AssociatedTypeWitness);
    sub_23AD83DF8(v40);
LABEL_20:
    swift_bridgeObjectRelease();
    sub_23B1C6BD8();
    v73 = (uint64_t)v86;
  }
  else
  {
    v88 = (char *)v44;
    v48 = *(int *)(v39 + 64);
    *(_QWORD *)(v42 + *(int *)(v39 + 48)) = v47;
    *(_BYTE *)(v42 + v48) = 0;
    v94 = sub_23AD7D55C(v40);
    v49 = sub_23B1C67DC();
    v50 = (uint64_t)v91;
    v51 = v84;
    v90 = v49;
LABEL_10:
    while (1)
    {
      v52 = MEMORY[0x23B8613CC](MEMORY[0x24BEE12B0], v49);
      v53 = MEMORY[0x23B8613CC](MEMORY[0x24BEE12E8], v49);
      MEMORY[0x23B85F314](v49, v52, v53);
      v54 = v96;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v51, 1, v96) == 1)
        break;
      v55 = *(void **)&v51[*(int *)(v54 + 48)];
      LODWORD(v83) = v51[*(int *)(v54 + 64)];
      v56 = *(char **)(v43 + 32);
      ((void (*)(uint64_t, char *, uint64_t))v56)(v50, v51, AssociatedTypeWitness);
      if (objc_msgSend(v55, sel_next))
      {
        v82 = v56;
        while (2)
        {
          v57 = *(int *)(v54 + 48);
          v58 = *(int *)(v54 + 64);
          ((void (*)(char *, uint64_t, uint64_t))v88)(v6, v50, AssociatedTypeWitness);
          *(_QWORD *)&v6[v57] = v55;
          v6[v58] = 1;
          v59 = v55;
          sub_23B1C67AC();
          v60 = *(void (**)(void))(*(_QWORD *)(AssociatedConformanceWitness + 40) + 16);
          v61 = v59;
          v60();
          v62 = objc_msgSend(v61, sel_longAtIndex_, 1);
          v43 = v93;
          switch((unint64_t)v62)
          {
            case 0uLL:
            case 2uLL:
            case 4uLL:
              (*(void (**)(char *, uint64_t))(v93 + 8))(v92, AssociatedTypeWitness);
              v63 = objc_msgSend(v61, sel_next);
              v50 = (uint64_t)v91;
              v54 = v96;
              if ((v63 & 1) == 0)
                break;
              continue;
            case 1uLL:
              v64 = v77;
              v65 = (uint64_t)v92;
              ((void (*)(char *, char *, uint64_t))v88)(v77, v92, AssociatedTypeWitness);
              v66 = sub_23AECCE98(v65);
              v67 = v64;
              v68 = *(int *)(v96 + 48);
              v69 = *(int *)(v96 + 64);
              ((void (*)(char *, char *, uint64_t))v82)(v6, v67, AssociatedTypeWitness);
              *(_QWORD *)&v6[v68] = v66;
              v6[v69] = 0;
              v49 = v90;
              sub_23B1C67AC();

              v70 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
              v70(v65, AssociatedTypeWitness);
              v50 = (uint64_t)v91;
              v70((uint64_t)v91, AssociatedTypeWitness);
              v51 = v84;
              goto LABEL_10;
            default:
              sub_23AB7B620();
              swift_allocError();
              *v71 = 0;
              swift_willThrow();

              v72 = *(void (**)(char *, uint64_t))(v43 + 8);
              v72(v92, AssociatedTypeWitness);
              v72(v91, AssociatedTypeWitness);
              goto LABEL_20;
          }
          break;
        }
      }
      if ((_DWORD)v83)
      {
        sub_23AED8A44(v50);
        v51 = v84;
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v50, AssociatedTypeWitness);

      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v50, AssociatedTypeWitness);

        v51 = v84;
      }
      v49 = v90;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v51, v76);
    sub_23B1C6BD8();
    v73 = (uint64_t)v86;
  }
  sub_23B1C5DA4();
  return sub_23AA937BC(v73, type metadata accessor for Signpost);
}

void sub_23AED9810()
{
  type metadata accessor for PersistenceTrigger();
}

uint64_t sub_23AED9868(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  int v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[64];

  *(_QWORD *)(v1 - 208) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v1 - 200) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v1 - 216) = &v44[-v2];
  v3 = sub_23B1C5DC8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  *(_QWORD *)(v1 - 176) = &v44[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = &v44[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v11 = &v44[-v10];
  v12 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v12);
  *(_QWORD *)(v1 - 152) = &v44[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_2542E6818 != -1)
    swift_once();
  v14 = (void *)qword_2542EDD28;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v11, 1, 1, v3);
  *(_QWORD *)(v1 - 120) = 0;
  *(_QWORD *)(v1 - 112) = 0xE000000000000000;
  sub_23B1C6EFC();
  v15 = *(_QWORD *)(v1 - 112);
  *(_QWORD *)(v1 - 120) = *(_QWORD *)(v1 - 120);
  *(_QWORD *)(v1 - 112) = v15;
  sub_23B1C64F4();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v1 - 144) = v11;
  v17 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v1 - 240) = v17;
  sub_23B1C7340();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v1 - 120);
  v19 = *(_QWORD *)(v1 - 112);
  sub_23AA8A098(*(_QWORD *)(v1 - 144), (uint64_t)v9);
  v21 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3);
  *(_QWORD *)(v1 - 248) = AssociatedConformanceWitness;
  *(_QWORD *)(v1 - 184) = v20;
  if (v21 == 1)
  {
    v22 = v14;
    v23 = *(_QWORD *)(v1 - 176);
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v9, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v23 = *(_QWORD *)(v1 - 176);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 32))(v23, v9, v3);
  }
  v24 = v14;
  *(_QWORD *)(v1 - 192) = v3;
  v25 = *(_QWORD *)(v1 - 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v25, v23, v3);
  v26 = *(int *)(v12 + 20);
  *(_QWORD *)(v1 - 176) = v26;
  *(_QWORD *)(v25 + v26) = v14;
  v27 = v25 + *(int *)(v12 + 24);
  *(_QWORD *)v27 = "SQLDB: Delete Children";
  *(_QWORD *)(v27 + 8) = 22;
  *(_BYTE *)(v27 + 16) = 2;
  v28 = v24;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v29 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v29 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v29 + 32) = *(_QWORD *)(v1 - 184);
  *(_QWORD *)(v29 + 40) = v19;
  v42 = v29;
  v41 = 2;
  v40 = 2;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, _QWORD))(v4 + 8))(v23, *(_QWORD *)(v1 - 192));
  swift_bridgeObjectRelease();
  sub_23AA8A05C(*(_QWORD *)(v1 - 144), (uint64_t *)&unk_2542E67B8);
  v30 = *(_QWORD *)(v1 - 168);
  objc_msgSend(*(id *)(v30 + qword_2542EDF00), sel_assertOnQueue);
  v31 = objc_msgSend(*(id *)(v30 + qword_2542E69F8), sel_removeAllObjects);
  *(_QWORD *)(v1 - 72) = 0;
  if ((*(_DWORD *)(v1 - 132) & 1) != 0)
  {
    MEMORY[0x24BDAC7A8](v31);
    v42 = v30;
    v43 = v1 - 72;
    v32 = *(_QWORD *)(v1 - 128);
    v33 = *(_QWORD *)(v1 - 160);
    sub_23AECD288(v32, (void (*)(char *, unint64_t))sub_23AEF87B8, (uint64_t)&v40);
    v34 = v33;
    if (v33)
    {
LABEL_14:
      sub_23B1C6BD8();
      v39 = *(_QWORD *)(v1 - 152);
      sub_23B1C5DA4();
      return sub_23AA937BC(v39, type metadata accessor for Signpost);
    }
    if (*(uint64_t *)(v1 - 72) < 1)
      goto LABEL_12;
  }
  else
  {
    v34 = *(_QWORD *)(v1 - 160);
    v32 = *(_QWORD *)(v1 - 128);
  }
  sub_23AED8A44(v32);
  if (v34)
    goto LABEL_14;
LABEL_12:
  result = swift_weakLoadStrong();
  if (result)
  {
    v36 = *(_QWORD *)(v1 - 240);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(*(_QWORD *)(v1 - 216), v32, v36);
    v37 = swift_getAssociatedTypeWitness();
    v38 = swift_getAssociatedConformanceWitness();
    *(_QWORD *)(v1 - 120) = v36;
    *(_QWORD *)(v1 - 112) = v37;
    *(_QWORD *)(v1 - 104) = *(_QWORD *)(v1 - 248);
    *(_QWORD *)(v1 - 96) = v38;
    type metadata accessor for ReconciliationID();
  }
  __break(1u);
  return result;
}

void sub_23AED9E30()
{
  type metadata accessor for PersistenceTrigger();
}

uint64_t sub_23AED9EA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  unsigned int v56;
  id v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  char *v66;
  void *v67;
  id v68;
  char isEscapingClosureAtFileLocation;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t result;
  uint64_t TupleTypeMetadata3;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE v84[64];

  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v1 + 24) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v1 + 8) = &v84[-v4];
  *(_QWORD *)(v1 + 128) = v3;
  *(_QWORD *)(v1 + 144) = v2;
  v6 = type metadata accessor for SnapshotItem(255, v3, v2, v5);
  v7 = sub_23B1C6C98();
  *(_QWORD *)(v1 + 48) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v1 + 56) = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  *(_QWORD *)(v1 + 40) = &v84[-v9];
  *(_QWORD *)(v1 + 168) = *(_QWORD *)(v6 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v1 + 112) = v11;
  *(_QWORD *)(v1 + 120) = &v84[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  *(_QWORD *)(v1 + 104) = &v84[-v12];
  v13 = sub_23B1C5DC8();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  *(_QWORD *)(v1 + 88) = &v84[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = &v84[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v17);
  v21 = &v84[-v20];
  v22 = type metadata accessor for Signpost(0);
  *(_QWORD *)(v1 + 80) = v22;
  MEMORY[0x24BDAC7A8](v22);
  v24 = &v84[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_2542E6818 != -1)
    swift_once();
  v25 = (void *)qword_2542EDD28;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v21, 1, 1, v13);
  *(_QWORD *)(v1 + 488) = 0;
  *(_QWORD *)(v1 + 496) = 0xE000000000000000;
  sub_23B1C64F4();
  MEMORY[0x23B8613CC](&unk_23B1DD494, v6);
  *(_QWORD *)(v1 + 160) = v6;
  sub_23B1C7340();
  v26 = *(_QWORD *)(v1 + 496);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v1 + 488);
  *(_QWORD *)(v1 + 96) = v21;
  v27 = (uint64_t)v21;
  v28 = v13;
  v29 = v14;
  sub_23AA8A098(v27, (uint64_t)v19);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v19, 1, v28) == 1)
  {
    v30 = v25;
    v31 = *(_QWORD *)(v1 + 88);
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v19, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v31 = *(_QWORD *)(v1 + 88);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v14 + 32))(v31, v19, v28);
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v24, v31, v28);
  v32 = *(_QWORD *)(v1 + 80);
  v33 = *(int *)(v32 + 20);
  *(_QWORD *)(v1 + 64) = v33;
  *(_QWORD *)&v24[v33] = v25;
  v34 = &v24[*(int *)(v32 + 24)];
  *(_QWORD *)v34 = "SQLDB: Snapshot insert";
  *((_QWORD *)v34 + 1) = 22;
  *(_QWORD *)(v1 + 80) = v34;
  v34[16] = 2;
  v35 = v25;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v36 = v28;
  v37 = v31;
  v38 = v24;
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v39 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v39 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v39 + 32) = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v39 + 40) = v26;
  *(_QWORD *)(v1 + 88) = v38;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v37, v36);
  swift_bridgeObjectRelease();
  sub_23AA8A05C(*(_QWORD *)(v1 + 96), (uint64_t *)&unk_2542E67B8);
  v40 = *(_QWORD *)(v1 + 176);
  v41 = *(void **)(v40 + qword_2542EDF00);
  objc_msgSend(v41, sel_assertOnQueue);
  v42 = *(_BYTE *)(v40 + 32);
  v44 = *(_QWORD *)(v1 + 160);
  v43 = *(_QWORD *)(v1 + 168);
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16);
  v46 = *(_QWORD *)(v1 + 104);
  v47 = *(_QWORD *)(v1 + 184);
  v45(v46, v47, v44);
  *(_QWORD *)(v1 + 96) = v45;
  if ((v42 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v46, v44);
    goto LABEL_12;
  }
  sub_23AAB7EC8(v46 + *(int *)(v44 + 52), v1 + 240);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v46, v44);
  sub_23AAB7EC8(v1 + 240, v1 + 488);
  if (sub_23AAFCF2C(v1 + 488) == 1)
  {
LABEL_12:
    v59 = *(_QWORD *)(v1 + 120);
    v45(v59, v47, v44);
    v60 = (*(unsigned __int8 *)(v43 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
    v61 = (char *)swift_allocObject();
    v62 = *(_QWORD *)(v1 + 136);
    *((_QWORD *)v61 + 2) = *(_QWORD *)(v1 + 128);
    *((_QWORD *)v61 + 3) = v62;
    v63 = *(_QWORD *)(v1 + 152);
    *((_QWORD *)v61 + 4) = *(_QWORD *)(v1 + 144);
    *((_QWORD *)v61 + 5) = v63;
    *((_QWORD *)v61 + 6) = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(&v61[v60], v59, v44);
    v64 = swift_allocObject();
    *(_QWORD *)(v64 + 16) = sub_23AEF8744;
    *(_QWORD *)(v64 + 24) = v61;
    *(_QWORD *)(v1 + 520) = sub_23AA956C8;
    *(_QWORD *)(v1 + 528) = v64;
    *(_QWORD *)(v1 + 488) = MEMORY[0x24BDAC760];
    *(_QWORD *)(v1 + 496) = 1107296256;
    *(_QWORD *)(v1 + 504) = sub_23AA9432C;
    *(_QWORD *)(v1 + 512) = &block_descriptor_780;
    v65 = _Block_copy((const void *)(v1 + 488));
    swift_retain();
    swift_retain();
    swift_release();
    *(_QWORD *)(v1 + 488) = 0;
    v66 = (char *)objc_msgSend(v41, sel_executeSwift_error_, v65, v1 + 488);
    _Block_release(v65);
    v67 = *(void **)(v1 + 488);
    v68 = v67;
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
      goto LABEL_22;
    }
    if ((v66 & 1) != 0)
    {
      *(_QWORD *)(v1 + 144) = 0;
      *(_QWORD *)(v1 + 152) = 0;
      *(_QWORD *)(v1 + 136) = sub_23AEF8744;
      v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 96);
      goto LABEL_15;
    }
    sub_23B1C587C();

    swift_willThrow();
    sub_23B1C6BD8();
    v81 = *(_QWORD *)(v1 + 88);
    sub_23B1C5DA4();
    v82 = 0;
    v83 = sub_23AEF8744;
LABEL_20:
    sub_23AA937BC(v81, type metadata accessor for Signpost);
    sub_23AAB7948((uint64_t)v83);
    return sub_23AAB7948((uint64_t)v82);
  }
  v48 = v47;
  v49 = *(_QWORD *)(v1 + 120);
  v45(v49, v48, v44);
  v50 = (*(unsigned __int8 *)(v43 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  v51 = (char *)swift_allocObject();
  v52 = *(_QWORD *)(v1 + 136);
  *((_QWORD *)v51 + 2) = *(_QWORD *)(v1 + 128);
  *((_QWORD *)v51 + 3) = v52;
  v53 = *(_QWORD *)(v1 + 152);
  *((_QWORD *)v51 + 4) = *(_QWORD *)(v1 + 144);
  *((_QWORD *)v51 + 5) = v53;
  *((_QWORD *)v51 + 6) = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(&v51[v50], v49, v44);
  v54 = swift_allocObject();
  *(_QWORD *)(v54 + 16) = sub_23AEF83C4;
  *(_QWORD *)(v54 + 24) = v51;
  *(_QWORD *)(v1 + 224) = sub_23AA956C8;
  *(_QWORD *)(v1 + 232) = v54;
  *(_QWORD *)(v1 + 192) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v1 + 200) = 1107296256;
  *(_QWORD *)(v1 + 208) = sub_23AA9432C;
  *(_QWORD *)(v1 + 216) = &block_descriptor_770;
  v55 = _Block_copy((const void *)(v1 + 192));
  swift_retain();
  swift_retain();
  swift_release();
  *(_QWORD *)(v1 + 192) = 0;
  v56 = objc_msgSend(v41, sel_executeSwift_error_, v55, v1 + 192);
  _Block_release(v55);
  v57 = *(id *)(v1 + 192);
  v58 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v58 & 1) != 0)
    __break(1u);
  if (!v56)
  {
    sub_23B1C587C();

    swift_willThrow();
    sub_23B1C6BD8();
    v81 = *(_QWORD *)(v1 + 88);
    sub_23B1C5DA4();
    v83 = 0;
    v82 = sub_23AEF83C4;
    goto LABEL_20;
  }
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 144) = sub_23AEF83C4;
  *(_QWORD *)(v1 + 152) = v51;
LABEL_15:
  v70 = *(_QWORD *)(v1 + 40);
  v71 = *(_QWORD *)(v1 + 184);
  v45(v70, v71, v44);
  v72 = v71;
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 168) + 56);
  v73(v70, 0, 1, v44);
  sub_23AA6A6E0(v71, v70, v74, v75);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 48) + 8))(v70, *(_QWORD *)(v1 + 56));
  result = swift_weakLoadStrong();
  if (result)
  {
    v68 = (id)result;
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    v66 = *(char **)(v1 + 8);
    v78 = &v66[*(int *)(TupleTypeMetadata3 + 48)];
    v67 = (void *)*(int *)(TupleTypeMetadata3 + 64);
    v73((uint64_t)v66, 1, 1, v44);
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 96))(v78, v72, v44);
    v73((uint64_t)v78, 0, 1, v44);
    if (qword_2542E7190 == -1)
    {
LABEL_17:
      *(_QWORD *)((char *)v67 + (_QWORD)v66) = qword_2542EDE38;
      v79 = *(_QWORD *)(v1 + 24);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *))(*(_QWORD *)v68 + 312))(v66);
      swift_release();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v1 + 16) + 8))(v66, v79);
      sub_23B1C6BD8();
      v80 = *(_QWORD *)(v1 + 88);
      sub_23B1C5DA4();
      sub_23AA937BC(v80, type metadata accessor for Signpost);
      sub_23AAB7948(*(_QWORD *)(v1 + 136));
      return sub_23AAB7948(*(_QWORD *)(v1 + 144));
    }
LABEL_22:
    swift_once();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_23AEDA8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v5 = type metadata accessor for SnapshotItem(255, *(_QWORD *)(*(_QWORD *)a2 + 728), *(_QWORD *)(*(_QWORD *)a2 + 744), a4);
  v6 = sub_23B1C6C98();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v13 - v8;
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  strcpy((char *)v13, "INSERT INTO ");
  BYTE5(v13[1]) = 0;
  HIWORD(v13[1]) = -5120;
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v10 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v9, a3, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v9, 0, 1, v5);
  v11 = MEMORY[0x23B8613CC](&unk_23B1DD224, v5);
  sub_23AD3C72C((uint64_t)v9, v5, v11);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return v13[0];
}

uint64_t sub_23AEDAAB4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _OWORD v23[15];
  uint64_t v24;
  _QWORD v25[31];
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v22 = a3;
  v5 = type metadata accessor for SnapshotItem(255, *(_QWORD *)(*(_QWORD *)a2 + 728), *(_QWORD *)(*(_QWORD *)a2 + 744), a4);
  v6 = sub_23B1C6C98();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v23 - v8;
  v44 = 0;
  v45 = 0xE000000000000000;
  sub_23B1C6EFC();
  v26 = v44;
  v27 = v45;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v10 = *(_QWORD *)(v5 - 8);
  v11 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v9, v22, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v9, 0, 1, v5);
  v12 = MEMORY[0x23B8613CC](&unk_23B1DD224, v5);
  sub_23AD3C72C((uint64_t)v9, v5, v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v13 = sub_23AAAF0A8();
  sub_23AAB7EC8(v11 + *(int *)(v5 + 52), (uint64_t)&v44);
  v14 = v13[2];
  if (v14)
  {
    sub_23AAB7E4C(&v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AA88224);
    swift_bridgeObjectRetain();
    v15 = 0;
    v16 = v14 - 1;
    while (1)
    {
      v17 = *((_BYTE *)v13 + v15 + 32);
      sub_23AAB7EC8((uint64_t)&v44, (uint64_t)v25);
      if (sub_23AAFCF2C((uint64_t)v25) == 1)
      {

        if (v16 == v15)
          goto LABEL_7;
      }
      else
      {
        sub_23AAB7EC8((uint64_t)&v44, (uint64_t)v23);
        v40 = v23[12];
        v41 = v23[13];
        v42 = v23[14];
        v43 = v24;
        v36 = v23[8];
        v37 = v23[9];
        v38 = v23[10];
        v39 = v23[11];
        v32 = v23[4];
        v33 = v23[5];
        v34 = v23[6];
        v35 = v23[7];
        v28 = v23[0];
        v29 = v23[1];
        v30 = v23[2];
        v31 = v23[3];
        sub_23AC42B28((uint64_t)v23);
        sub_23ADB13D0(v17);
        swift_bridgeObjectRelease();
        sub_23AAB7E4C(&v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAA5BA4);
        if (v16 == v15)
        {
LABEL_7:
          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
      }
      ++v15;
    }
  }
  sub_23AAB7E4C(&v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AA88224);
LABEL_9:
  v18 = MEMORY[0x23B85EEAC](2108479, 0xE300000000000000, v13[2]);
  v25[0] = v18;
  v25[1] = v19;
  v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0)
    v20 = v18 & 0xFFFFFFFFFFFFLL;
  if (v20)
    sub_23AE1B6B0(2uLL);
  swift_bridgeObjectRelease();
  sub_23AAB7E4C(&v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAA5BA4);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v25[0] = 0;
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return v26;
}

uint64_t sub_23AEDAFD8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;

  v6 = a2 | 0x10;
  v14 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v7 = __clz(__rbit64(v6));
    v8 = v6 & ~(1 << v7);
    if (((1 << v7) & v6) == 0)
      v8 = v6;
    v9 = v7 >= 0x40;
    if (v7 >= 0x40)
      v10 = 0;
    else
      v10 = 1 << v7;
    if (!v9)
      v6 = v8;
    v13 = v10;
    sub_23AEDB0E0(&v14, &v13, a3, a1, v3);
  }
  while (v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
  sub_23AAB5A28((unint64_t *)&qword_2542E74B0, &qword_2542E54E8, MEMORY[0x24BEE12B0]);
  v11 = sub_23B1C6338();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_23AEDB0E0(_QWORD **a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD **v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t AssociatedConformanceWitness;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  char v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  char v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  unint64_t v168;
  unint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  unint64_t v207;
  unint64_t v208;
  _QWORD *v209;
  _QWORD **v210;
  id v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  uint64_t *v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  id v238;
  uint64_t v239;
  void (*v240)(id, uint64_t, uint64_t);
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  unint64_t v249;
  unint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  id v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  unint64_t v260;
  unint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  unint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  unint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  unint64_t v288;
  unint64_t v289;
  _QWORD *v290;
  id v291;
  void *v292;
  void *v293;
  unint64_t v294;
  _QWORD v295[4];
  uint64_t AssociatedTypeWitness;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD **v301;
  void *v302;
  id v303;
  uint64_t v304;
  void *v305;
  uint64_t v306;
  void *v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  _QWORD v315[2];
  void *v316;
  void *v317;
  char v318;
  char v319;
  char v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  char v325;
  uint64_t v326;
  uint64_t v327;
  char v328;
  char v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;

  v303 = a3;
  v300 = a4;
  v301 = a1;
  v7 = *a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v8);
  v297 = (char *)v295 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v7 + 744);
  v11 = *(_QWORD *)(v7 + 728);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = sub_23B1C6C98();
  v295[2] = *(_QWORD *)(v12 - 8);
  v295[3] = v12;
  MEMORY[0x24BDAC7A8](v12);
  v295[1] = (char *)v295 - v13;
  v298 = v11;
  v299 = v10;
  v14 = swift_getAssociatedTypeWitness();
  v15 = sub_23B1C6C98();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v295 - v18;
  v20 = *(_QWORD *)(v14 - 8);
  result = MEMORY[0x24BDAC7A8](v17);
  v24 = (char *)v295 - v23;
  v25 = *a2;
  if (v25 > 0x7FFFFFF)
  {
    if (v25 <= 0xFFFFFFFFFFLL)
    {
      if (v25 <= 0x1FFFFFFFFLL)
      {
        if (v25 > 0x3FFFFFFF)
        {
          if (v25 != 0x40000000)
          {
            if (v25 == 0x80000000)
            {
              v315[0] = 0;
              v315[1] = 0xE000000000000000;
              sub_23B1C6EFC();
              swift_bridgeObjectRelease();
              v308 = 0xD00000000000001ALL;
              v309 = 0x800000023B20DFB0;
              v106 = type metadata accessor for SnapshotItem(0, v298, v299, v105);
              sub_23AAB7EC8(v300 + *(int *)(v106 + 52), (uint64_t)&v313);
              sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
              v107 = sub_23AAFCF2C((uint64_t)v315);
              v108 = v328;
            }
            else
            {
              if (v25 != 0x100000000)
                goto LABEL_234;
              v315[0] = 0;
              v315[1] = 0xE000000000000000;
              sub_23B1C6EFC();
              swift_bridgeObjectRelease();
              v308 = 0xD000000000000023;
              v309 = 0x800000023B20DF80;
              v230 = type metadata accessor for SnapshotItem(0, v298, v299, v229);
              sub_23AAB7EC8(v300 + *(int *)(v230 + 52), (uint64_t)&v313);
              sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
              v107 = sub_23AAFCF2C((uint64_t)v315);
              v108 = v329;
            }
            goto LABEL_178;
          }
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v308 = 0xD000000000000021;
          v309 = 0x800000023B20E000;
          v199 = type metadata accessor for SnapshotItem(0, v298, v299, v198);
          sub_23AAB7EC8(v300 + *(int *)(v199 + 52), (uint64_t)&v313);
          sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
          v69 = 0;
          v70 = 0;
          if (sub_23AAFCF2C((uint64_t)v315) == 1)
            goto LABEL_164;
          v69 = v326;
          v70 = v327;
        }
        else
        {
          if (v25 != 0x8000000)
          {
            if (v25 == 0x10000000)
            {
              v73 = type metadata accessor for SnapshotItem(0, v298, v299, v22);
              sub_23AAB7EC8(v300 + *(int *)(v73 + 52), (uint64_t)&v313);
              sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
              v74 = 0;
              v75 = 0;
              if (sub_23AAFCF2C((uint64_t)v315) != 1)
              {
                v74 = v323;
                v75 = v324;
                swift_bridgeObjectRetain();
              }
              sub_23AC391AC(v74, v75);
              swift_bridgeObjectRelease();
              v308 = 0xD000000000000032;
              v309 = 0x800000023B20E060;
              goto LABEL_182;
            }
            if (v25 != 0x20000000)
              goto LABEL_234;
            v315[0] = 0;
            v315[1] = 0xE000000000000000;
            sub_23B1C6EFC();
            swift_bridgeObjectRelease();
            v308 = 0xD000000000000029;
            v309 = 0x800000023B20E030;
            v226 = type metadata accessor for SnapshotItem(0, v298, v299, v225);
            sub_23AAB7EC8(v300 + *(int *)(v226 + 52), (uint64_t)&v313);
            sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
            v107 = sub_23AAFCF2C((uint64_t)v315);
            v108 = v325;
            goto LABEL_178;
          }
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v308 = 0xD000000000000025;
          v309 = 0x800000023B20E0A0;
          v192 = type metadata accessor for SnapshotItem(0, v298, v299, v191);
          sub_23AAB7EC8(v300 + *(int *)(v192 + 52), (uint64_t)&v313);
          sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
          v69 = 0;
          v70 = 0;
          if (sub_23AAFCF2C((uint64_t)v315) == 1)
            goto LABEL_164;
          v69 = v321;
          v70 = v322;
        }
        goto LABEL_163;
      }
      if (v25 > 0xFFFFFFFFFLL)
      {
        if (v25 > 0x3FFFFFFFFFLL)
        {
          if (v25 != 0x4000000000)
          {
            if (v25 != 0x8000000000)
              goto LABEL_234;
            v315[0] = 0;
            v315[1] = 0xE000000000000000;
            sub_23B1C6EFC();
            swift_bridgeObjectRelease();
            v308 = 0xD000000000000017;
            v309 = 0x800000023B20DE60;
            v220 = type metadata accessor for SnapshotItem(0, v298, v299, v219);
            sub_23AAB7EC8(v300 + *(int *)(v220 + 52), (uint64_t)&v313);
            sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
            v221 = 0;
            v222 = 0;
            if (sub_23AAFCF2C((uint64_t)v315) != 1)
            {
              v221 = v340;
              v222 = v341;
              sub_23AA8831C(v340);
            }
            sub_23AC39500(v221, v222);
            sub_23AAA5C9C(v221);
            sub_23B1C64F4();
            goto LABEL_183;
          }
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v308 = 0xD00000000000001DLL;
          v309 = 0x800000023B20DE80;
          v129 = type metadata accessor for SnapshotItem(0, v298, v299, v128);
          sub_23AAB7EC8(v300 + *(int *)(v129 + 52), (uint64_t)&v313);
          sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
          v130 = 0;
          if (sub_23AAFCF2C((uint64_t)v315) != 1)
          {
            v130 = v339;
            swift_bridgeObjectRetain();
          }
          sub_23AC39354(v130);
        }
        else
        {
          if (v25 != 0x1000000000)
          {
            if (v25 != 0x2000000000)
              goto LABEL_234;
            v315[0] = 0;
            v315[1] = 0xE000000000000000;
            sub_23B1C6EFC();
            swift_bridgeObjectRelease();
            v308 = 0xD000000000000026;
            v309 = 0x800000023B20DEA0;
            v216 = type metadata accessor for SnapshotItem(0, v298, v299, v215);
            sub_23AAB7EC8(v300 + *(int *)(v216 + 52), (uint64_t)&v313);
            sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
            v107 = sub_23AAFCF2C((uint64_t)v315);
            v108 = v338;
            goto LABEL_178;
          }
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v308 = 0xD00000000000001ALL;
          v309 = 0x800000023B20DED0;
          v62 = type metadata accessor for SnapshotItem(0, v298, v299, v61);
          sub_23AAB7EC8(v300 + *(int *)(v62 + 52), (uint64_t)&v313);
          sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
          v63 = 0;
          v64 = 0;
          if (sub_23AAFCF2C((uint64_t)v315) != 1)
          {
            v63 = v336;
            v64 = v337;
            swift_bridgeObjectRetain();
          }
          sub_23AD28E68(v63, v64);
        }
        goto LABEL_165;
      }
      if (v25 != 0x200000000)
      {
        if (v25 == 0x400000000)
        {
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v308 = 0xD000000000000028;
          v309 = 0x800000023B20DF20;
          v101 = type metadata accessor for SnapshotItem(0, v298, v299, v100);
          sub_23AAB7EC8(v300 + *(int *)(v101 + 52), (uint64_t)&v313);
          sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
          v69 = 0;
          v70 = 0;
          if (sub_23AAFCF2C((uint64_t)v315) == 1)
          {
LABEL_164:
            sub_23AC391AC(v69, v70);
LABEL_165:
            swift_bridgeObjectRelease();
            goto LABEL_182;
          }
          v69 = v332;
          v70 = v333;
        }
        else
        {
          if (v25 != 0x800000000)
            goto LABEL_234;
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v308 = 0xD000000000000024;
          v309 = 0x800000023B20DEF0;
          v218 = type metadata accessor for SnapshotItem(0, v298, v299, v217);
          sub_23AAB7EC8(v300 + *(int *)(v218 + 52), (uint64_t)&v313);
          sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
          v69 = 0;
          v70 = 0;
          if (sub_23AAFCF2C((uint64_t)v315) == 1)
            goto LABEL_164;
          v69 = v334;
          v70 = v335;
        }
LABEL_163:
        swift_bridgeObjectRetain();
        goto LABEL_164;
      }
      v308 = 0;
      v309 = 0xE000000000000000;
      v146 = type metadata accessor for SnapshotItem(0, v298, v299, v22);
      sub_23AAB7EC8(v300 + *(int *)(v146 + 52), (uint64_t)&v313);
      sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
      v147 = 0;
      v148 = 0;
      if (sub_23AAFCF2C((uint64_t)v315) != 1)
      {
        v147 = v330;
        v148 = v331;
        swift_bridgeObjectRetain();
      }
      sub_23AC391AC(v147, v148);
      swift_bridgeObjectRelease();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      v126 = 0xD00000000000002DLL;
      v127 = "decoration_app_container_bundle_identifier = ";
    }
    else
    {
      if (v25 <= 0xFFFFFFFFFFFFLL)
      {
        if (v25 <= 0xFFFFFFFFFFFLL)
        {
          if (v25 == 0x10000000000)
          {
            v315[0] = 0;
            v315[1] = 0xE000000000000000;
            sub_23B1C6EFC();
            swift_bridgeObjectRelease();
            v313 = 0xD000000000000010;
            v314 = 0x800000023B208CD0;
            v134 = type metadata accessor for SnapshotItem(0, v298, v299, v133);
            v135 = MEMORY[0x23B8613CC](&unk_23B1DD478, v134);
            v136 = qword_23B1DC7F8[(char)sub_23AF219A4(v134, v135)];
            v317 = (void *)MEMORY[0x24BEE1768];
            v315[0] = v136;
            sub_23AA94C90((uint64_t)v315);
            v138 = v137;
            sub_23AA8A05C((uint64_t)v315, qword_2542E5640);
            if (!v138)
              goto LABEL_235;
            sub_23B1C64F4();
            swift_bridgeObjectRelease();
            v114 = v313;
            v115 = v314;
LABEL_196:
            v247 = v301;
            v248 = *v301;
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_23AF983F4(0, v248[2] + 1, 1, v248);
              v248 = (_QWORD *)result;
            }
            v250 = v248[2];
            v249 = v248[3];
            if (v250 >= v249 >> 1)
            {
              result = (uint64_t)sub_23AF983F4((_QWORD *)(v249 > 1), v250 + 1, 1, v248);
              v248 = (_QWORD *)result;
            }
            v248[2] = v250 + 1;
            v251 = &v248[2 * v250];
            v251[4] = v114;
            v251[5] = v115;
            *v247 = v248;
            return result;
          }
          if (v25 != 0x20000000000)
          {
            if (v25 == 0x80000000000)
              return result;
            goto LABEL_234;
          }
          v81 = v298;
          v80 = v299;
          v82 = swift_getAssociatedTypeWitness();
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          type metadata accessor for ItemStateVersion(0, v82, AssociatedConformanceWitness, v84);
          v85 = AssociatedTypeWitness;
          result = swift_dynamicCastMetatype();
          if (!result)
          {
            v315[0] = 0;
            v315[1] = 0xE000000000000000;
            sub_23B1C6EFC();
            swift_bridgeObjectRelease();
            v313 = 0xD000000000000015;
            v314 = 0x800000023B20E440;
            type metadata accessor for SnapshotItem(0, v81, v80, v86);
            v87 = swift_getAssociatedConformanceWitness();
            v88 = swift_getAssociatedConformanceWitness();
            v315[0] = v14;
            v315[1] = v85;
            v316 = (void *)v87;
            v317 = (void *)v88;
            type metadata accessor for FileItemVersion();
          }
          return result;
        }
        if (v25 <= 0x3FFFFFFFFFFFLL)
        {
          if (v25 != 0x100000000000)
          {
            if (v25 == 0x200000000000)
            {
              v315[0] = 0;
              v315[1] = 0xE000000000000000;
              sub_23B1C6EFC();
              swift_bridgeObjectRelease();
              v315[0] = 0xD000000000000016;
              v315[1] = 0x800000023B20E460;
              v159 = type metadata accessor for SnapshotItem(0, v298, v299, v158);
              v43 = objc_msgSend(v303, sel_bindBooleanParameter_, *(unsigned __int8 *)(v300+ *(int *)(v159 + 48)+ *(int *)(type metadata accessor for ItemMetadata() + 108)));
              goto LABEL_188;
            }
            goto LABEL_234;
          }
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v315[0] = 0xD000000000000017;
          v315[1] = 0x800000023B20E1F0;
          v42 = type metadata accessor for SnapshotItem(0, v298, v299, v41);
          v43 = objc_msgSend(v303, sel_bindBooleanParameter_, *(unsigned __int8 *)(v300+ *(int *)(v42 + 48)+ *(int *)(type metadata accessor for ItemMetadata() + 60)));
          goto LABEL_188;
        }
        if (v25 == 0x400000000000)
        {
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v315[0] = 0xD000000000000013;
          v315[1] = 0x800000023B20DE10;
          v117 = *(int *)(type metadata accessor for SnapshotItem(0, v298, v299, v116) + 48);
          v118 = v300 + *(int *)(type metadata accessor for ItemMetadata() + 136) + v117;
          sub_23AD28F20(*(_QWORD *)v118, *(_BYTE *)(v118 + 8));
        }
        else
        {
          if (v25 != 0x800000000000)
            goto LABEL_234;
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v315[0] = 0xD000000000000016;
          v315[1] = 0x800000023B20DDF0;
          v179 = *(int *)(type metadata accessor for SnapshotItem(0, v298, v299, v178) + 48);
          v180 = (unsigned int *)(v300 + *(int *)(type metadata accessor for ItemMetadata() + 144) + v179);
          v181 = *v180;
          LOBYTE(v313) = *((_BYTE *)v180 + 4);
          sub_23AC38FE8(v181 | ((unint64_t)v313 << 32));
        }
        sub_23B1C64F4();
LABEL_139:
        swift_bridgeObjectRelease();
        v182 = v315[0];
        v183 = v315[1];
LABEL_184:
        v232 = (uint64_t *)v301;
        sub_23AF98354();
        v233 = *v232;
LABEL_185:
        v234 = *(_QWORD **)(v233 + 16);
        sub_23AF9839C(v234);
        v175 = (uint64_t)v234;
        v176 = v182;
        v177 = v183;
        goto LABEL_186;
      }
      if (v25 <= 0x7FFFFFFFFFFFFLL)
      {
        if (v25 == 0x1000000000000)
        {
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v315[0] = 0xD000000000000025;
          v315[1] = 0x800000023B20DFD0;
          v142 = *(int *)(type metadata accessor for SnapshotItem(0, v298, v299, v141) + 48);
          v143 = (uint64_t *)(v300 + *(int *)(type metadata accessor for ItemMetadata() + 148) + v142);
          v144 = *v143;
          v145 = v143[1];
          swift_bridgeObjectRetain();
          sub_23AC391AC(v144, v145);
          swift_bridgeObjectRelease();
          sub_23B1C64F4();
          goto LABEL_139;
        }
        if (v25 == 0x2000000000000)
        {
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v308 = 0xD00000000000001CLL;
          v309 = 0x800000023B20DDD0;
          v96 = type metadata accessor for SnapshotItem(0, v298, v299, v95);
          sub_23AAB7EC8(v300 + *(int *)(v96 + 52), (uint64_t)&v313);
          sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
          v97 = sub_23AAFCF2C((uint64_t)v315);
          v98 = v97 == 1;
          if (v97 == 1)
            v99 = 0;
          else
            v99 = v342;
          sub_23AEF6F1C(v99, v98);
          goto LABEL_182;
        }
        if (v25 != 0x4000000000000)
          goto LABEL_234;
        v315[0] = 0;
        v315[1] = 0xE000000000000000;
        sub_23B1C6EFC();
        swift_bridgeObjectRelease();
        v308 = 0xD000000000000022;
        v309 = 0x800000023B20DE30;
        v154 = type metadata accessor for SnapshotItem(0, v298, v299, v153);
        sub_23AAB7EC8(v300 + *(int *)(v154 + 52), (uint64_t)&v313);
        sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
        v155 = 0;
        if (sub_23AAFCF2C((uint64_t)v315) != 1)
        {
          v155 = v344;
          swift_bridgeObjectRetain();
        }
        sub_23AC3969C(v155);
        goto LABEL_165;
      }
      if (v25 <= 0x3FFFFFFFFFFFFFFLL)
      {
        if (v25 != 0x8000000000000)
        {
          if (v25 != 0x10000000000000)
            goto LABEL_234;
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v315[0] = 0xD00000000000001CLL;
          v315[1] = 0x800000023B20DD50;
          v163 = type metadata accessor for SnapshotItem(0, v298, v299, v162);
          v164 = objc_msgSend(v303, sel_bindBooleanParameter_, *(unsigned __int8 *)(v300+ *(int *)(v163 + 48)+ *(int *)(type metadata accessor for ItemMetadata() + 72)));
          sub_23B1C63E0();

          sub_23B1C64F4();
          goto LABEL_139;
        }
        v315[0] = 0;
        v315[1] = 0xE000000000000000;
        sub_23B1C6EFC();
        swift_bridgeObjectRelease();
        v308 = 0xD000000000000025;
        v309 = 0x800000023B20DD70;
        v68 = type metadata accessor for SnapshotItem(0, v298, v299, v67);
        sub_23AAB7EC8(v300 + *(int *)(v68 + 52), (uint64_t)&v313);
        sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
        v69 = 0;
        v70 = 0;
        if (sub_23AAFCF2C((uint64_t)v315) == 1)
          goto LABEL_164;
        v69 = v345;
        v70 = v346;
        goto LABEL_163;
      }
      if (v25 != 0x400000000000000)
      {
        if (v25 == 0x800000000000000)
        {
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v315[0] = 0xD00000000000001FLL;
          v315[1] = 0x800000023B20E210;
          v187 = type metadata accessor for SnapshotItem(0, v298, v299, v186);
          v43 = objc_msgSend(v303, sel_bindBooleanParameter_, *(unsigned __int8 *)(v300+ *(int *)(v187 + 48)+ *(int *)(type metadata accessor for ItemMetadata() + 48)));
          goto LABEL_188;
        }
        goto LABEL_234;
      }
      v311 = 0;
      v312 = 0xE000000000000000;
      v121 = type metadata accessor for SnapshotItem(0, v298, v299, v22);
      sub_23AAB7EC8(v300 + *(int *)(v121 + 52), (uint64_t)&v313);
      sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
      v122 = sub_23AAFCF2C((uint64_t)v315);
      v123 = v343;
      if (v122 == 1)
        v123 = 0;
      v310 = MEMORY[0x24BEE1768];
      v308 = v123;
      sub_23AA94C90((uint64_t)&v308);
      v125 = v124;
      sub_23AA8A05C((uint64_t)&v308, qword_2542E5640);
      if (!v125)
        goto LABEL_235;
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      v126 = 0xD000000000000026;
      v127 = "decoration_inherited_content_policy = ";
    }
    v308 = v126;
    v309 = (unint64_t)(v127 - 32) | 0x8000000000000000;
LABEL_182:
    sub_23B1C64F4();
LABEL_183:
    swift_bridgeObjectRelease();
    v182 = v308;
    v183 = v309;
    goto LABEL_184;
  }
  if (v25 >= 0x2000)
  {
    if (v25 < 0x100000)
    {
      if (v25 >= 0x10000)
      {
        if (v25 < 0x40000)
        {
          if (v25 == 0x10000)
          {
            v315[0] = 0;
            v315[1] = 0xE000000000000000;
            sub_23B1C6EFC();
            swift_bridgeObjectRelease();
            v313 = 0xD000000000000018;
            v314 = 0x800000023B20E250;
            v27 = type metadata accessor for SnapshotItem(0, v298, v299, v26);
            v28 = v300 + *(int *)(v27 + 48);
            v29 = *(unsigned __int8 *)(v28 + *(int *)(type metadata accessor for ItemMetadata() + 84));
            v317 = (void *)MEMORY[0x24BEE1768];
            v315[0] = v29;
            sub_23AA94C90((uint64_t)v315);
            v31 = v30;
            sub_23AA8A05C((uint64_t)v315, qword_2542E5640);
            if (v31)
            {
              sub_23B1C64F4();
              swift_bridgeObjectRelease();
              v32 = v313;
              v33 = v314;
              v34 = *v301;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v34 = sub_23AF983F4(0, v34[2] + 1, 1, v34);
              v36 = v34[2];
              v35 = v34[3];
              if (v36 >= v35 >> 1)
                v34 = sub_23AF983F4((_QWORD *)(v35 > 1), v36 + 1, 1, v34);
              v34[2] = v36 + 1;
              v37 = &v34[2 * v36];
              v37[4] = v32;
              v37[5] = v33;
              v38 = v301;
              *v301 = v34;
              v315[0] = 0;
              v315[1] = 0xE000000000000000;
              sub_23B1C6EFC();
              swift_bridgeObjectRelease();
              v315[0] = 0xD00000000000001CLL;
              v315[1] = 0x800000023B20E270;
              v39 = (void *)sub_23B1C7514();
              v40 = objc_msgSend(v303, sel_bindObjectParameter_, v39);

              sub_23B1C63E0();
              sub_23B1C64F4();
LABEL_207:
              swift_bridgeObjectRelease();
              v263 = v315[0];
              v264 = v315[1];
              v265 = *v38;
              result = swift_isUniquelyReferenced_nonNull_native();
              if ((result & 1) == 0)
              {
                result = (uint64_t)sub_23AF983F4(0, v265[2] + 1, 1, v265);
                v265 = (_QWORD *)result;
              }
              v267 = v265[2];
              v266 = v265[3];
              if (v267 >= v266 >> 1)
              {
                result = (uint64_t)sub_23AF983F4((_QWORD *)(v266 > 1), v267 + 1, 1, v265);
                v265 = (_QWORD *)result;
              }
              v265[2] = v267 + 1;
              v268 = &v265[2 * v267];
              v268[4] = v263;
              v268[5] = v264;
              *v38 = v265;
              return result;
            }
            while (1)
            {
LABEL_235:
              sub_23B1C704C();
              __break(1u);
            }
          }
          if (v25 == 0x20000)
          {
            v315[0] = 0;
            v315[1] = 0xE000000000000000;
            sub_23B1C6EFC();
            swift_bridgeObjectRelease();
            v315[0] = 0xD000000000000015;
            v315[1] = 0x800000023B20E230;
            v157 = type metadata accessor for SnapshotItem(0, v298, v299, v156);
            v43 = objc_msgSend(v303, sel_bindBooleanParameter_, *(unsigned __int8 *)(v300+ *(int *)(v157 + 48)+ *(int *)(type metadata accessor for ItemMetadata() + 44)));
            goto LABEL_188;
          }
LABEL_234:
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v315[0] = 0xD000000000000017;
          v315[1] = 0x800000023B20DD30;
          sub_23AF16528(v25);
          sub_23B1C64F4();
          swift_bridgeObjectRelease();
          goto LABEL_235;
        }
        if (v25 == 0x40000)
        {
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v308 = 0xD00000000000001ALL;
          v309 = 0x800000023B20E1B0;
          v110 = type metadata accessor for SnapshotItem(0, v298, v299, v109);
          sub_23AAB7EC8(v300 + *(int *)(v110 + 52), (uint64_t)&v313);
          sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
          v111 = sub_23AAFCF2C((uint64_t)v315);
          v112 = v111 == 1;
          if (v111 == 1)
            v113 = 0;
          else
            v113 = v315[0];
          sub_23AD28FD8(v113, v112);
          sub_23B1C64F4();
          swift_bridgeObjectRelease();
          v114 = v308;
          v115 = v309;
          goto LABEL_196;
        }
        if (v25 != 0x80000)
          goto LABEL_234;
        v315[0] = 0;
        v315[1] = 0xE000000000000000;
        sub_23B1C6EFC();
        swift_bridgeObjectRelease();
        v308 = 0xD00000000000001ALL;
        v309 = 0x800000023B20E190;
        v166 = type metadata accessor for SnapshotItem(0, v298, v299, v165);
        sub_23AAB7EC8(v300 + *(int *)(v166 + 52), (uint64_t)&v313);
        sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
        if (sub_23AAFCF2C((uint64_t)v315) == 1)
          v167 = 2;
        else
          v167 = v315[1];
        sub_23AC39884(v167);
        sub_23B1C64F4();
        swift_bridgeObjectRelease();
        v169 = v308;
        v168 = v309;
        v170 = v301;
        v171 = *v301;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v170 = v171;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v171 = sub_23AF983F4(0, v171[2] + 1, 1, v171);
          *v170 = v171;
        }
        v174 = v171[2];
        v173 = v171[3];
        if (v174 >= v173 >> 1)
          *v170 = sub_23AF983F4((_QWORD *)(v173 > 1), v174 + 1, 1, v171);
        v175 = v174;
        v176 = v169;
        v177 = v168;
LABEL_186:
        v235 = sub_23AF983DC(v175, v176, v177);
        return nullsub_1(v235);
      }
      if (v25 != 0x2000)
      {
        if (v25 != 0x4000)
        {
          if (v25 == 0x8000)
            return result;
          goto LABEL_234;
        }
        v315[0] = 0;
        v315[1] = 0xE000000000000000;
        sub_23B1C6EFC();
        swift_bridgeObjectRelease();
        v315[0] = 0xD00000000000001CLL;
        v315[1] = 0x800000023B20E310;
        v77 = type metadata accessor for SnapshotItem(0, v298, v299, v76);
        v78 = v300 + *(int *)(v77 + 48);
        v79 = *(unsigned int *)(v78 + 4);
        LOBYTE(v313) = *(_BYTE *)(v78 + 8);
        sub_23AC38FE8(v79 | ((unint64_t)v313 << 32));
        goto LABEL_189;
      }
      v315[0] = 0;
      v315[1] = 0xE000000000000000;
      sub_23B1C6EFC();
      swift_bridgeObjectRelease();
      v315[0] = 0xD00000000000001CLL;
      v315[1] = 0x800000023B20E330;
      v132 = type metadata accessor for SnapshotItem(0, v298, v299, v131);
      v43 = objc_msgSend(v303, sel_bindBooleanParameter_, *(unsigned __int8 *)(v300 + *(int *)(v132 + 48) + *(int *)(type metadata accessor for ItemMetadata() + 52)));
LABEL_188:
      v238 = v43;
      sub_23B1C63E0();

      goto LABEL_189;
    }
    if (v25 >= 0x800000)
    {
      if (v25 > 0x1FFFFFF)
      {
        if (v25 == 0x2000000)
        {
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v308 = 0xD000000000000026;
          v309 = 0x800000023B20E100;
          v120 = type metadata accessor for SnapshotItem(0, v298, v299, v119);
          sub_23AAB7EC8(v300 + *(int *)(v120 + 52), (uint64_t)&v313);
          sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
          v107 = sub_23AAFCF2C((uint64_t)v315);
          v108 = v319;
        }
        else
        {
          if (v25 != 0x4000000)
            goto LABEL_234;
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v308 = 0xD000000000000027;
          v309 = 0x800000023B20E0D0;
          v185 = type metadata accessor for SnapshotItem(0, v298, v299, v184);
          sub_23AAB7EC8(v300 + *(int *)(v185 + 52), (uint64_t)&v313);
          sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
          v107 = sub_23AAFCF2C((uint64_t)v315);
          v108 = v320;
        }
      }
      else
      {
        if (v25 == 0x800000)
        {
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v315[0] = 0xD000000000000019;
          v315[1] = 0x800000023B20E1D0;
          v66 = type metadata accessor for SnapshotItem(0, v298, v299, v65);
          v43 = objc_msgSend(v303, sel_bindBooleanParameter_, *(unsigned __int8 *)(v300+ *(int *)(v66 + 48)+ *(int *)(type metadata accessor for ItemMetadata() + 64)));
          goto LABEL_188;
        }
        if (v25 != 0x1000000)
          goto LABEL_234;
        v315[0] = 0;
        v315[1] = 0xE000000000000000;
        sub_23B1C6EFC();
        swift_bridgeObjectRelease();
        v308 = 0xD000000000000017;
        v309 = 0x800000023B20E130;
        v161 = type metadata accessor for SnapshotItem(0, v298, v299, v160);
        sub_23AAB7EC8(v300 + *(int *)(v161 + 52), (uint64_t)&v313);
        sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
        v107 = sub_23AAFCF2C((uint64_t)v315);
        v108 = v318;
      }
      goto LABEL_178;
    }
    if (v25 != 0x100000)
    {
      if (v25 == 0x200000)
      {
        v311 = 0;
        v312 = 0xE000000000000000;
        sub_23B1C6EFC();
        v308 = v311;
        v309 = v312;
        sub_23B1C64F4();
        v90 = type metadata accessor for SnapshotItem(0, v298, v299, v89);
        sub_23AAB7EC8(v300 + *(int *)(v90 + 52), (uint64_t)&v313);
        sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
        if (sub_23AAFCF2C((uint64_t)v315) != 1)
        {
          v91 = v316;
          v92 = (uint64_t *)v301;
          if (v316)
          {
            swift_getErrorValue();
            v93 = v304;
            v94 = v305;
LABEL_229:
            v291 = v91;
            v292 = v302;
            v293 = sub_23AD3DAEC(v93, v94);
            if (v292)
            {

              result = swift_bridgeObjectRelease();
              v302 = 0;
              return result;
            }
            v151 = (uint64_t)v293;
            v152 = v294;
            v302 = 0;

            goto LABEL_233;
          }
LABEL_231:
          v151 = 0;
          v152 = 0xF000000000000000;
          goto LABEL_233;
        }
      }
      else
      {
        if (v25 != 0x400000)
          goto LABEL_234;
        v311 = 0;
        v312 = 0xE000000000000000;
        sub_23B1C6EFC();
        v308 = v311;
        v309 = v312;
        sub_23B1C64F4();
        v150 = type metadata accessor for SnapshotItem(0, v298, v299, v149);
        sub_23AAB7EC8(v300 + *(int *)(v150 + 52), (uint64_t)&v313);
        sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
        if (sub_23AAFCF2C((uint64_t)v315) != 1)
        {
          v91 = v317;
          v92 = (uint64_t *)v301;
          if (v317)
          {
            swift_getErrorValue();
            v93 = v306;
            v94 = v307;
            goto LABEL_229;
          }
          goto LABEL_231;
        }
      }
      v151 = 0;
      v152 = 0xF000000000000000;
      v92 = (uint64_t *)v301;
LABEL_233:
      sub_23AC38554(v151, v152);
      sub_23AAA3E18(v151, v152);
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      v182 = v308;
      v183 = v309;
      sub_23AF98354();
      v233 = *v92;
      goto LABEL_185;
    }
    v315[0] = 0;
    v315[1] = 0xE000000000000000;
    sub_23B1C6EFC();
    swift_bridgeObjectRelease();
    v308 = 0xD000000000000019;
    v309 = 0x800000023B20E170;
    v140 = type metadata accessor for SnapshotItem(0, v298, v299, v139);
    sub_23AAB7EC8(v300 + *(int *)(v140 + 52), (uint64_t)&v313);
    sub_23AAB7EC8((uint64_t)&v313, (uint64_t)v315);
    v107 = sub_23AAFCF2C((uint64_t)v315);
    v108 = BYTE1(v315[1]);
LABEL_178:
    if (v107 == 1)
      v231 = 2;
    else
      v231 = v108;
    sub_23AC39884(v231);
    goto LABEL_182;
  }
  if (v25 > 127)
  {
    if (v25 > 1023)
    {
      switch(v25)
      {
        case 1024:
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v315[0] = 0xD000000000000019;
          v315[1] = 0x800000023B20E3A0;
          v103 = *(int *)(type metadata accessor for SnapshotItem(0, v298, v299, v193) + 48);
          v104 = *(int *)(type metadata accessor for ItemMetadata() + 28);
          break;
        case 2048:
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v315[0] = 0xD000000000000025;
          v315[1] = 0x800000023B20E370;
          v103 = *(int *)(type metadata accessor for SnapshotItem(0, v298, v299, v102) + 48);
          v104 = *(int *)(type metadata accessor for ItemMetadata() + 32);
          break;
        case 4096:
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v315[0] = 0xD000000000000015;
          v315[1] = 0x800000023B20E350;
          v228 = type metadata accessor for SnapshotItem(0, v298, v299, v227);
          v43 = objc_msgSend(v303, sel_bindBooleanParameter_, *(unsigned __int8 *)(v300+ *(int *)(v228 + 48)+ *(int *)(type metadata accessor for ItemMetadata() + 40)));
          goto LABEL_188;
        default:
          goto LABEL_234;
      }
      v194 = v300 + v104 + v103;
      v195 = sub_23B1C5BDC();
      v196 = *(_QWORD *)(v195 - 8);
      v197 = (uint64_t)v297;
      (*(void (**)(char *, uint64_t, uint64_t))(v196 + 16))(v297, v194, v195);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v196 + 56))(v197, 0, 1, v195);
      sub_23AC38A8C(v197);
      sub_23AA8A05C(v197, (uint64_t *)&unk_2542E4310);
    }
    else
    {
      if (v25 != 128)
      {
        if (v25 == 256)
        {
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v315[0] = 0xD00000000000001FLL;
          v315[1] = 0x800000023B20E290;
          type metadata accessor for SnapshotItem(0, v298, v299, v71);
          type metadata accessor for ItemMetadata();
          v72 = swift_bridgeObjectRetain();
          sub_23AC39190(v72);
LABEL_194:
          swift_bridgeObjectRelease();
          sub_23B1C64F4();
          goto LABEL_195;
        }
        if (v25 == 512)
        {
          v315[0] = 0;
          v315[1] = 0xE000000000000000;
          sub_23B1C6EFC();
          swift_bridgeObjectRelease();
          v315[0] = 0xD000000000000015;
          v315[1] = 0x800000023B20E3E0;
          v224 = type metadata accessor for SnapshotItem(0, v298, v299, v223);
          v43 = objc_msgSend(v303, sel_bindBooleanParameter_, *(unsigned __int8 *)(v300+ *(int *)(v224 + 48)+ *(int *)(type metadata accessor for ItemMetadata() + 36)));
          goto LABEL_188;
        }
        goto LABEL_234;
      }
      v315[0] = 0;
      v315[1] = 0xE000000000000000;
      sub_23B1C6EFC();
      swift_bridgeObjectRelease();
      v315[0] = 0xD000000000000019;
      v315[1] = 0x800000023B20E2B0;
      v189 = *(int *)(type metadata accessor for SnapshotItem(0, v298, v299, v188) + 48);
      v190 = v300 + *(int *)(type metadata accessor for ItemMetadata() + 124) + v189;
      sub_23AC38E28(*(_QWORD *)v190, *(_BYTE *)(v190 + 8));
    }
LABEL_189:
    sub_23B1C64F4();
LABEL_195:
    swift_bridgeObjectRelease();
    v114 = v315[0];
    v115 = v315[1];
    goto LABEL_196;
  }
  switch(v25)
  {
    case 1:
      v313 = 0x656D616E656C6966;
      v314 = 0xEB00000000203D20;
      v44 = type metadata accessor for SnapshotItem(0, v298, v299, v22);
      v45 = (uint64_t *)(v300 + *(int *)(v44 + 44));
      v46 = *v45;
      v47 = v45[1];
      v317 = (void *)MEMORY[0x24BEE0D00];
      v315[0] = v46;
      v315[1] = v47;
      swift_bridgeObjectRetain_n();
      sub_23AA94C90((uint64_t)v315);
      v49 = v48;
      sub_23AA8A05C((uint64_t)v315, qword_2542E5640);
      if (!v49)
        goto LABEL_235;
      swift_bridgeObjectRelease();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      v50 = v313;
      v51 = v314;
      v52 = v301;
      v53 = *v301;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v53 = sub_23AF983F4(0, v53[2] + 1, 1, v53);
      v55 = v53[2];
      v54 = v53[3];
      if (v55 >= v54 >> 1)
        v53 = sub_23AF983F4((_QWORD *)(v54 > 1), v55 + 1, 1, v53);
      v53[2] = v55 + 1;
      v56 = &v53[2 * v55];
      v56[4] = v50;
      v56[5] = v51;
      *v52 = v53;
      v315[0] = 0;
      v315[1] = 0xE000000000000000;
      sub_23B1C6EFC();
      swift_bridgeObjectRelease();
      v315[0] = 0xD000000000000022;
      v315[1] = 0x800000023B20E4E0;
      v57 = *(int *)(v44 + 48);
      v58 = (uint64_t *)(v300 + *(int *)(type metadata accessor for ItemMetadata() + 56) + v57);
      v59 = *v58;
      v60 = v58[1];
      swift_bridgeObjectRetain();
      sub_23AD28E68(v59, v60);
      swift_bridgeObjectRelease();
      sub_23B1C64F4();
LABEL_222:
      swift_bridgeObjectRelease();
      v285 = v315[0];
      v286 = v315[1];
      v287 = (_QWORD *)*v52;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23AF983F4(0, v287[2] + 1, 1, v287);
        v287 = (_QWORD *)result;
      }
      v289 = v287[2];
      v288 = v287[3];
      if (v289 >= v288 >> 1)
      {
        result = (uint64_t)sub_23AF983F4((_QWORD *)(v288 > 1), v289 + 1, 1, v287);
        v287 = (_QWORD *)result;
      }
      v287[2] = v289 + 1;
      v290 = &v287[2 * v289];
      v290[4] = v285;
      v290[5] = v286;
      *v52 = v287;
      break;
    case 2:
      strcpy((char *)v315, "parent_id = ");
      BYTE5(v315[1]) = 0;
      HIWORD(v315[1]) = -5120;
      type metadata accessor for SnapshotItem(0, v298, v299, v22);
      swift_getAssociatedTypeWitness();
      v239 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
      v240 = *(void (**)(id, uint64_t, uint64_t))(v239 + 32);
      v241 = swift_checkMetadataState();
      v240(v303, v241, v239);
      goto LABEL_189;
    case 4:
      v315[0] = 0;
      v315[1] = 0xE000000000000000;
      sub_23B1C6EFC();
      swift_bridgeObjectRelease();
      v315[0] = 0xD00000000000001DLL;
      v315[1] = 0x800000023B20E3C0;
      v237 = type metadata accessor for SnapshotItem(0, v298, v299, v236);
      v43 = objc_msgSend(v303, sel_bindUnsignedShortParameter_, *(unsigned __int16 *)(v300 + *(int *)(v237 + 48) + 10));
      goto LABEL_188;
    case 8:
      if ((a5[4] & 1) != 0 || !swift_dynamicCastMetatype())
      {
        v315[0] = 0;
        v315[1] = 0xE000000000000000;
        sub_23B1C6EFC();
        swift_bridgeObjectRelease();
        v315[0] = 0xD000000000000012;
        v315[1] = 0x800000023B20E480;
        v201 = type metadata accessor for SnapshotItem(0, v298, v299, v269);
        (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v19, v300 + *(int *)(v201 + 40), v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v19, 0, 1, v14);
        v270 = swift_getAssociatedConformanceWitness();
        sub_23AD3C7A0((uint64_t)v19, v14, *(_QWORD *)(v270 + 16));
        (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
        sub_23B1C64F4();
        swift_bridgeObjectRelease();
        v213 = v315[0];
        v212 = v315[1];
        v214 = *v301;
      }
      else
      {
        v201 = type metadata accessor for SnapshotItem(0, v298, v299, v200);
        (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v24, v300 + *(int *)(v201 + 40), v14);
        swift_dynamicCast();
        v202 = v315[0];
        v203 = LODWORD(v315[1]);
        strcpy((char *)v315, "vfs_fileid = ");
        HIWORD(v315[1]) = -4864;
        sub_23AC38E28(v202, 0);
        sub_23B1C64F4();
        swift_bridgeObjectRelease();
        v204 = v315[0];
        v205 = v315[1];
        v206 = *v301;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v206 = sub_23AF983F4(0, v206[2] + 1, 1, v206);
        v208 = v206[2];
        v207 = v206[3];
        if (v208 >= v207 >> 1)
          v206 = sub_23AF983F4((_QWORD *)(v207 > 1), v208 + 1, 1, v206);
        v206[2] = v208 + 1;
        v209 = &v206[2 * v208];
        v209[4] = v204;
        v209[5] = v205;
        v210 = v301;
        *v301 = v206;
        v315[0] = 0;
        v315[1] = 0xE000000000000000;
        sub_23B1C6EFC();
        swift_bridgeObjectRelease();
        v315[0] = 0xD000000000000013;
        v315[1] = 0x800000023B20E4C0;
        v211 = objc_msgSend(v303, sel_bindUnsignedIntegerParameter_, v203);
        sub_23B1C63E0();

        sub_23B1C64F4();
        swift_bridgeObjectRelease();
        v213 = v315[0];
        v212 = v315[1];
        v214 = *v210;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v214 = sub_23AF983F4(0, v214[2] + 1, 1, v214);
      v272 = v214[2];
      v271 = v214[3];
      if (v272 >= v271 >> 1)
        v214 = sub_23AF983F4((_QWORD *)(v271 > 1), v272 + 1, 1, v214);
      v214[2] = v272 + 1;
      v273 = &v214[2 * v272];
      v273[4] = v213;
      v273[5] = v212;
      v274 = v301;
      *v301 = v214;
      v315[0] = 0;
      v315[1] = 0xE000000000000000;
      sub_23B1C6EFC();
      swift_bridgeObjectRelease();
      v315[0] = 0xD000000000000010;
      v315[1] = 0x800000023B20E4A0;
      type metadata accessor for SnapshotItem(0, v298, v299, v275);
      v276 = *(int *)(v201 + 48);
      v52 = v274;
      v277 = v300 + v276;
      v278 = type metadata accessor for ItemMetadata();
      sub_23AC38A68(*(_QWORD *)(v277 + *(int *)(v278 + 100)), 0);
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      v279 = v315[0];
      v280 = v315[1];
      v281 = (_QWORD *)*v52;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v281 = sub_23AF983F4(0, v281[2] + 1, 1, v281);
      v283 = v281[2];
      v282 = v281[3];
      if (v283 >= v282 >> 1)
        v281 = sub_23AF983F4((_QWORD *)(v282 > 1), v283 + 1, 1, v281);
      v281[2] = v283 + 1;
      v284 = &v281[2 * v283];
      v284[4] = v279;
      v284[5] = v280;
      *v52 = v281;
      v315[0] = 0;
      v315[1] = 0xE000000000000000;
      sub_23B1C6EFC();
      swift_bridgeObjectRelease();
      v315[0] = 0xD000000000000019;
      v315[1] = 0x800000023B20E420;
      sub_23AC38A68(*(_QWORD *)(v277 + *(int *)(v278 + 104)), 0);
      sub_23B1C64F4();
      goto LABEL_222;
    case 16:
      v315[0] = 0;
      v315[1] = 0xE000000000000000;
      sub_23B1C6EFC();
      swift_bridgeObjectRelease();
      v315[0] = 0xD000000000000017;
      v315[1] = 0x800000023B20E400;
      v253 = type metadata accessor for SnapshotItem(0, v298, v299, v252);
      v254 = v300 + *(int *)(v253 + 48);
      v255 = type metadata accessor for ItemMetadata();
      v256 = objc_msgSend(v303, sel_bindBooleanParameter_, *(unsigned __int8 *)(v254 + *(int *)(v255 + 80)));
      sub_23B1C63E0();

      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      v257 = v315[0];
      v258 = v315[1];
      v259 = *v301;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v259 = sub_23AF983F4(0, v259[2] + 1, 1, v259);
      v261 = v259[2];
      v260 = v259[3];
      if (v261 >= v260 >> 1)
        v259 = sub_23AF983F4((_QWORD *)(v260 > 1), v261 + 1, 1, v259);
      v259[2] = v261 + 1;
      v262 = &v259[2 * v261];
      v262[4] = v257;
      v262[5] = v258;
      v38 = v301;
      *v301 = v259;
      v315[0] = 0;
      v315[1] = 0xE000000000000000;
      sub_23B1C6EFC();
      swift_bridgeObjectRelease();
      v315[0] = 0xD000000000000019;
      v315[1] = 0x800000023B20E420;
      sub_23AC38A68(*(_QWORD *)(v254 + *(int *)(v255 + 104)), 0);
      sub_23B1C64F4();
      goto LABEL_207;
    case 32:
      v315[0] = 0;
      v315[1] = 0xE000000000000000;
      sub_23B1C6EFC();
      swift_bridgeObjectRelease();
      v315[0] = 0xD00000000000001ALL;
      v315[1] = 0x800000023B20E2F0;
      v243 = *(int *)(type metadata accessor for SnapshotItem(0, v298, v299, v242) + 48);
      v244 = type metadata accessor for ItemMetadata();
      sub_23AC38A8C(v300 + *(int *)(v244 + 116) + v243);
      goto LABEL_189;
    case 64:
      v315[0] = 0;
      v315[1] = 0xE000000000000000;
      sub_23B1C6EFC();
      swift_bridgeObjectRelease();
      v315[0] = 0xD000000000000014;
      v315[1] = 0x800000023B20E2D0;
      type metadata accessor for SnapshotItem(0, v298, v299, v245);
      type metadata accessor for ItemMetadata();
      v246 = swift_bridgeObjectRetain();
      sub_23AC38C8C(v246);
      goto LABEL_194;
    default:
      goto LABEL_234;
  }
  return result;
}

void sub_23AEDDFC0()
{
  type metadata accessor for PersistenceTrigger();
}

id sub_23AEDE02C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  void *v43;
  id result;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t AssociatedTypeWitness;
  uint64_t v53;
  uint64_t AssociatedConformanceWitness;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, _BYTE *, uint64_t);
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  unsigned int v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  void (*v105)(uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t, uint64_t);
  id v118;
  uint64_t TupleTypeMetadata3;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t, uint64_t);
  void (*v125)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  _BYTE v138[64];

  *(_QWORD *)(v6 - 296) = a1;
  *(_QWORD *)(v6 - 304) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v6 - 312) = &v138[-v7];
  v8 = sub_23B1C5DC8();
  *(_QWORD *)(v6 - 248) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 - 240) = v8;
  MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v6 - 192) = &v138[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = &v138[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)(v6 - 200) = &v138[-v14];
  v15 = type metadata accessor for Signpost(0);
  *(_QWORD *)(v6 - 272) = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = &v138[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v6 - 184) = v2;
  *(_QWORD *)(v6 - 176) = v1;
  v19 = type metadata accessor for SnapshotItem(255, v1, v2, v18);
  v20 = sub_23B1C6C98();
  *(_QWORD *)(v6 - 216) = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v6 - 208) = v20;
  v21 = MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v6 - 360) = &v138[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = MEMORY[0x24BDAC7A8](v21);
  *(_QWORD *)(v6 - 352) = &v138[-v24];
  v25 = MEMORY[0x24BDAC7A8](v23);
  *(_QWORD *)(v6 - 344) = &v138[-v26];
  v27 = MEMORY[0x24BDAC7A8](v25);
  *(_QWORD *)(v6 - 336) = &v138[-v28];
  v29 = MEMORY[0x24BDAC7A8](v27);
  *(_QWORD *)(v6 - 288) = &v138[-v30];
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = &v138[-v32];
  v34 = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v6 - 168) = v34;
  v35 = *(_QWORD *)(v34 + 64);
  v36 = MEMORY[0x24BDAC7A8](v31);
  *(_QWORD *)(v6 - 328) = &v138[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v37 = MEMORY[0x24BDAC7A8](v36);
  *(_QWORD *)(v6 - 320) = &v138[-v38];
  v39 = MEMORY[0x24BDAC7A8](v37);
  *(_QWORD *)(v6 - 264) = &v138[-v40];
  MEMORY[0x24BDAC7A8](v39);
  v42 = &v138[-v41];
  v43 = *(void **)(v4 + qword_2542EDF00);
  *(_QWORD *)(v6 - 256) = v43;
  result = objc_msgSend(v43, sel_assertOnQueue);
  *(_QWORD *)(v6 - 152) = v5;
  v45 = *(unsigned __int8 *)(v4 + 32);
  if ((v45 & 1) == 0)
  {
    if (qword_2542E1788 != -1)
    {
      *(_QWORD *)(v6 - 400) = v4;
      v137 = v45;
      result = (id)swift_once();
      v45 = v137;
      v4 = *(_QWORD *)(v6 - 400);
    }
    v5 &= ~qword_2542EDC48;
    *(_QWORD *)(v6 - 152) = v5;
  }
  if (qword_2542E7190 == -1)
  {
    if (!v5)
      return result;
LABEL_7:
    *(_DWORD *)(v6 - 372) = v45;
    *(_QWORD *)(v6 - 368) = v17;
    *(_QWORD *)(v6 - 280) = v19;
    v46 = qword_2542EDE38;
    v47 = *(_QWORD *)(v6 - 160);
    result = (id)sub_23AA7C384(v3, 1, v33);
    if (v47)
      return result;
    *(_QWORD *)(v6 - 400) = v4;
    *(_QWORD *)(v6 - 392) = v42;
    *(_QWORD *)(v6 - 384) = v3;
    v48 = *(_QWORD *)(v6 - 168);
    v49 = *(_QWORD *)(v6 - 280);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v48 + 48))(v33, 1, v49) == 1)
    {
      (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v6 - 216) + 8))(v33, *(_QWORD *)(v6 - 208));
      v51 = type metadata accessor for FileTreeError(0, *(_QWORD *)(v6 - 176), *(_QWORD *)(v6 - 184), v50);
      MEMORY[0x23B8613CC](&unk_23B1D40CC, v51);
      *(_QWORD *)(v6 - 160) = swift_allocError();
      swift_getAssociatedTypeWitness();
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v53 = swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v55 = swift_getAssociatedConformanceWitness();
      *(_QWORD *)(v6 - 144) = AssociatedTypeWitness;
      *(_QWORD *)(v6 - 136) = v53;
      *(_QWORD *)(v6 - 128) = AssociatedConformanceWitness;
      *(_QWORD *)(v6 - 120) = v55;
      type metadata accessor for FileItemVersion();
    }
    *(_QWORD *)(v6 - 160) = 0;
    v56 = v46 | 0x409000000C000;
    v57 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v48 + 32);
    v58 = *(_QWORD *)(v6 - 392);
    *(_QWORD *)(v6 - 408) = v57;
    v57(v58, v33, v49);
    if (qword_2542E6818 != -1)
      swift_once();
    *(_QWORD *)(v6 - 416) = v5 & 0xFFFFFFFFFF7FFFEFLL & v56;
    v59 = (void *)qword_2542EDD28;
    v60 = *(_QWORD *)(v6 - 248);
    v61 = *(_QWORD *)(v6 - 240);
    v62 = *(_QWORD *)(v6 - 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v62, 1, 1, v61);
    *(_QWORD *)(v6 - 144) = 0;
    *(_QWORD *)(v6 - 136) = 0xE000000000000000;
    sub_23B1C64F4();
    sub_23AF16528(*(_QWORD *)(v6 - 152));
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    MEMORY[0x23B8613CC](&unk_23B1DD494, v49);
    sub_23B1C7340();
    v63 = *(_QWORD *)(v6 - 136);
    *(_QWORD *)(v6 - 424) = *(_QWORD *)(v6 - 144);
    sub_23AA8A098(v62, (uint64_t)v13);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v60 + 48))(v13, 1, v61) == 1)
    {
      v64 = v59;
      v65 = *(_QWORD *)(v6 - 192);
      sub_23B1C5DB0();
      sub_23AA8A05C((uint64_t)v13, (uint64_t *)&unk_2542E67B8);
    }
    else
    {
      v65 = *(_QWORD *)(v6 - 192);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v60 + 32))(v65, v13, v61);
    }
    v66 = *(_QWORD *)(v6 - 368);
    *(_DWORD *)(v6 - 416) = *(_QWORD *)(v6 - 416) != 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v66, v65, v61);
    v67 = *(_QWORD *)(v6 - 272);
    v68 = *(int *)(v67 + 20);
    *(_QWORD *)(v6 - 432) = v68;
    *(_QWORD *)(v66 + v68) = v59;
    v69 = v66 + *(int *)(v67 + 24);
    *(_QWORD *)v69 = "SQLDB: Snapshot update";
    *(_QWORD *)(v69 + 8) = 22;
    *(_QWORD *)(v6 - 272) = v69;
    *(_BYTE *)(v69 + 16) = 2;
    v70 = v59;
    swift_bridgeObjectRetain();
    sub_23B1C6BE4();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
    v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16) = xmmword_23B1CA760;
    *(_QWORD *)(v71 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v71 + 64) = sub_23AAA0D14();
    *(_QWORD *)(v71 + 32) = *(_QWORD *)(v6 - 424);
    *(_QWORD *)(v71 + 40) = v63;
    sub_23B1C5D98();
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, uint64_t))(v60 + 8))(*(_QWORD *)(v6 - 192), v61);
    swift_bridgeObjectRelease();
    sub_23AA8A05C(*(_QWORD *)(v6 - 200), (uint64_t *)&unk_2542E67B8);
    v72 = *(_QWORD *)(v6 - 168);
    v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16);
    v74 = *(_QWORD *)(v6 - 264);
    v75 = *(_QWORD *)(v6 - 280);
    v73(v74, *(_QWORD *)(v6 - 384), v75);
    v76 = (*(unsigned __int8 *)(v72 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
    v77 = swift_allocObject();
    v78 = *(_QWORD *)(v6 - 232);
    *(_QWORD *)(v77 + 16) = *(_QWORD *)(v6 - 176);
    *(_QWORD *)(v77 + 24) = v78;
    v79 = *(_QWORD *)(v6 - 224);
    *(_QWORD *)(v77 + 32) = *(_QWORD *)(v6 - 184);
    *(_QWORD *)(v77 + 40) = v79;
    *(_QWORD *)(v77 + 48) = *(_QWORD *)(v6 - 400);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 - 408))(v77 + v76, v74, v75);
    v80 = v77 + ((v35 + v76 + 7) & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)v80 = v6 - 152;
    *(_BYTE *)(v80 + 8) = *(_DWORD *)(v6 - 416);
    v81 = swift_allocObject();
    *(_QWORD *)(v81 + 16) = sub_23AEF834C;
    *(_QWORD *)(v81 + 24) = v77;
    *(_QWORD *)(v6 - 192) = v77;
    *(_QWORD *)(v6 - 112) = sub_23AA956C8;
    *(_QWORD *)(v6 - 104) = v81;
    *(_QWORD *)(v6 - 144) = MEMORY[0x24BDAC760];
    *(_QWORD *)(v6 - 136) = 1107296256;
    *(_QWORD *)(v6 - 128) = sub_23AA9432C;
    *(_QWORD *)(v6 - 120) = &block_descriptor_760;
    v82 = _Block_copy((const void *)(v6 - 144));
    swift_retain();
    swift_retain();
    swift_release();
    *(_QWORD *)(v6 - 144) = 0;
    v83 = objc_msgSend(*(id *)(v6 - 256), sel_executeSwift_error_, v82, v6 - 144);
    _Block_release(v82);
    v84 = *(id *)(v6 - 144);
    LOBYTE(v77) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v77 & 1) != 0)
      __break(1u);
    if (!v83)
    {
      sub_23B1C587C();

      swift_willThrow();
      sub_23B1C6BD8();
      v94 = *(_QWORD *)(v6 - 368);
      sub_23B1C5DA4();
      sub_23AA937BC(v94, type metadata accessor for Signpost);
      (*(void (**)(_QWORD, _QWORD))(v72 + 8))(*(_QWORD *)(v6 - 392), *(_QWORD *)(v6 - 280));
      return (id)swift_release();
    }
    v85 = *(_QWORD *)(v6 - 288);
    v86 = *(_QWORD *)(v6 - 384);
    v87 = *(_QWORD *)(v6 - 280);
    v73(v85, v86, v87);
    v88 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56);
    v88(v85, 0, 1, v87);
    sub_23AA6A6E0(v86, v85, v89, v90);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 216) + 8))(v85, *(_QWORD *)(v6 - 208));
    v91 = *(_QWORD *)(v6 - 152);
    *(_QWORD *)(v6 - 240) = v88;
    if ((v91 & 8) != 0)
    {
      if ((*(_DWORD *)(v6 - 372) & 1) != 0)
      {
        result = (id)swift_weakLoadStrong();
        if (result)
        {
          (*(void (**)(id))(*(_QWORD *)result + 176))(result);
          swift_release();
          v95 = *(_QWORD *)(v6 - 176);
          *(_QWORD *)(v6 - 144) = v78;
          *(_QWORD *)(v6 - 136) = v95;
          v96 = *(_QWORD *)(v6 - 184);
          *(_QWORD *)(v6 - 128) = *(_QWORD *)(v6 - 224);
          *(_QWORD *)(v6 - 120) = v96;
          type metadata accessor for SQLDatabase();
        }
        goto LABEL_55;
      }
    }
    else
    {
      v92 = (v91 & 0x800000) == 0;
      v93 = *(_DWORD *)(v6 - 372);
      if (v92)
        LOBYTE(v93) = 1;
      if ((v93 & 1) != 0)
        goto LABEL_29;
    }
    if (swift_weakLoadStrong())
    {
      *(_QWORD *)(v6 - 144) = *(_QWORD *)(v6 - 176);
      *(_QWORD *)(v6 - 136) = v78;
      v97 = *(_QWORD *)(v6 - 224);
      *(_QWORD *)(v6 - 128) = *(_QWORD *)(v6 - 184);
      *(_QWORD *)(v6 - 120) = v97;
      type metadata accessor for SQLDatabase();
    }
LABEL_29:
    *(_QWORD *)(v6 - 200) = v73;
    if ((*(_BYTE *)(v6 - 152) & 0x10) != 0)
    {
      v98 = v86 + *(int *)(v87 + 48);
      v99 = type metadata accessor for ItemMetadata();
      v100 = *(int *)(v99 + 80);
      v101 = *(unsigned __int8 *)(v98 + v100);
      v102 = *(_QWORD *)(v6 - 320);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 - 200))(v102, *(_QWORD *)(v6 - 392), v87);
      if (v101 == 1)
      {
        v103 = v87;
        v104 = *(_BYTE *)(v102 + *(int *)(v87 + 48) + *(int *)(v99 + 80));
        v105 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
        v105(v102, v103);
        if ((v104 & 1) == 0)
        {
          result = (id)swift_weakLoadStrong();
          if (result)
          {
            v106 = swift_getAssociatedTypeWitness();
            v107 = swift_getAssociatedTypeWitness();
            v108 = swift_getAssociatedConformanceWitness();
            v109 = swift_getAssociatedConformanceWitness();
            *(_QWORD *)(v6 - 144) = v106;
            *(_QWORD *)(v6 - 136) = v107;
            *(_QWORD *)(v6 - 128) = v108;
            *(_QWORD *)(v6 - 120) = v109;
            type metadata accessor for ReconciliationID();
          }
          goto LABEL_56;
        }
      }
      else
      {
        v105 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
        v105(v102, v87);
        v103 = v87;
      }
      v110 = *(_BYTE *)(v98 + v100);
      v111 = *(_QWORD *)(v6 - 328);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 - 200))(v111, *(_QWORD *)(v6 - 392), v103);
      v87 = v103;
      if ((v110 & 1) != 0)
      {
        v105(v111, v103);
        v86 = *(_QWORD *)(v6 - 384);
      }
      else
      {
        v112 = *(_BYTE *)(v111 + *(int *)(v103 + 48) + *(int *)(v99 + 80));
        v105(v111, v103);
        v86 = *(_QWORD *)(v6 - 384);
        if ((v112 & 1) != 0)
        {
          result = (id)swift_weakLoadStrong();
          if (result)
          {
            v113 = swift_getAssociatedTypeWitness();
            (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v113 - 8) + 16))(*(_QWORD *)(v6 - 312), *(_QWORD *)(v6 - 384), v113);
            v114 = swift_getAssociatedTypeWitness();
            v115 = swift_getAssociatedConformanceWitness();
            v116 = swift_getAssociatedConformanceWitness();
            *(_QWORD *)(v6 - 144) = v113;
            *(_QWORD *)(v6 - 136) = v114;
            *(_QWORD *)(v6 - 128) = v115;
            *(_QWORD *)(v6 - 120) = v116;
            type metadata accessor for ReconciliationID();
          }
          goto LABEL_57;
        }
      }
    }
    if ((*(_BYTE *)(v6 - 152) & 2) == 0)
    {
      v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 - 200);
LABEL_42:
      result = (id)swift_weakLoadStrong();
      if (result)
      {
        v118 = result;
        TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
        v120 = *(_QWORD *)(v6 - 312);
        v121 = v120 + *(int *)(TupleTypeMetadata3 + 48);
        v122 = *(int *)(TupleTypeMetadata3 + 64);
        v123 = *(_QWORD *)(v6 - 392);
        v117(v120, v123, v87);
        v124 = v117;
        v125 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 - 240);
        v125(v120, 0, 1, v87);
        v124(v121, v86, v87);
        v125(v121, 0, 1, v87);
        *(_QWORD *)(v120 + v122) = *(_QWORD *)(v6 - 152);
        v126 = *(_QWORD *)(v6 - 296);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t))(*(_QWORD *)v118 + 312))(v120);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 304) + 8))(v120, v126);
        sub_23B1C6BD8();
        v127 = *(_QWORD *)(v6 - 368);
        sub_23B1C5DA4();
        sub_23AA937BC(v127, type metadata accessor for Signpost);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 168) + 8))(v123, v87);
        return (id)swift_release();
      }
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      return result;
    }
    v128 = *(_QWORD *)(v6 - 392) + *(int *)(v87 + 36);
    v129 = *(_QWORD *)(v6 - 160);
    v130 = sub_23AECF8F4(v128, 1);
    if (!v129)
    {
      *(_QWORD *)(v6 - 160) = 0;
      v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 - 200);
      if ((v130 & 1) == 0)
      {
        *(_QWORD *)(v6 - 200) = v117;
        result = (id)swift_weakLoadStrong();
        *(_QWORD *)(v6 - 216) = result;
        if (result)
        {
          v132 = swift_getAssociatedTypeWitness();
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 16))(*(_QWORD *)(v6 - 312), v128, v132);
          v133 = swift_getAssociatedTypeWitness();
          v134 = swift_getAssociatedConformanceWitness();
          v135 = swift_getAssociatedConformanceWitness();
          *(_QWORD *)(v6 - 144) = v132;
          *(_QWORD *)(v6 - 136) = v133;
          *(_QWORD *)(v6 - 128) = v134;
          *(_QWORD *)(v6 - 120) = v135;
          type metadata accessor for ReconciliationID();
        }
        goto LABEL_58;
      }
      goto LABEL_42;
    }
    sub_23B1C6BD8();
    v131 = *(_QWORD *)(v6 - 368);
    sub_23B1C5DA4();
    sub_23AA937BC(v131, type metadata accessor for Signpost);
    (*(void (**)(_QWORD, uint64_t))(v72 + 8))(*(_QWORD *)(v6 - 392), v87);
    return (id)swift_release();
  }
  *(_QWORD *)(v6 - 400) = v4;
  v136 = v45;
  result = (id)swift_once();
  v45 = v136;
  v4 = *(_QWORD *)(v6 - 400);
  if (*(_QWORD *)(v6 - 152))
    goto LABEL_7;
  return result;
}

uint64_t sub_23AEDF578(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  void (*v8)(void *, uint64_t, uint64_t);
  uint64_t v9;

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AEDAFD8(a3, *a4, a1);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v8 = *(void (**)(void *, uint64_t, uint64_t))(v7 + 32);
  v9 = swift_checkMetadataState();
  v8(a1, v9, v7);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0x20455441445055;
}

uint64_t sub_23AEDF778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[2];

  v7 = type metadata accessor for SnapshotItem(255, *(_QWORD *)(*(_QWORD *)v4 + 728), *(_QWORD *)(*(_QWORD *)v4 + 744), a4);
  v8 = sub_23B1C6C98();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v19 - v11;
  v13 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)v19 - v14;
  if (!sub_23AE4F6B4())
  {
    sub_23AA7C384(a1, 1, v12);
    if (v5)
      return v8;
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) != 1)
    {
      (*(void (**)(char *, _BYTE *, uint64_t))(v13 + 32))(v15, v12, v7);
      v16 = &v15[*(int *)(v7 + 48)];
      v8 = *(_QWORD *)&v16[*(int *)(type metadata accessor for ItemMetadata() + 100)];
      v17 = MEMORY[0x23B8613CC](&unk_23B1DD478, v7);
      sub_23AF219A4(v7, v17);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v7);
      return v8;
    }
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
  }
  return 0;
}

uint64_t sub_23AEDF904(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  type metadata accessor for SnapshotItem(0, *(_QWORD *)(*(_QWORD *)v4 + 728), *(_QWORD *)(*(_QWORD *)v4 + 744), a4);
  v6 = 0;
  v12 = sub_23B1C6758();
  v7 = MEMORY[0x24BEE12C8];
  do
  {
    sub_23AED69D8(a1, v6, 1);
    v9 = v8;
    v10 = sub_23B1C67DC();
    MEMORY[0x23B8613CC](v7, v10);
    sub_23B1C67A0();
    swift_release();
    v6 = v9;
  }
  while (v9);
  return v12;
}

BOOL sub_23AEDFA1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  char *v17;
  id v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  BOOL v25;
  void *v26;
  unsigned __int8 v27;
  id v28;
  char isEscapingClosureAtFileLocation;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id aBlock[7];

  v34 = a1;
  v33 = a2;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = sub_23B1C5DC8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v31 - v10;
  v12 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v15 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v11, 1, 1, v2);
  sub_23AA8A098((uint64_t)v11, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    v16 = v15;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v9, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v9, v2);
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v14, v5, v2);
  v32 = *(int *)(v12 + 20);
  *(_QWORD *)&v14[v32] = v15;
  v17 = &v14[*(int *)(v12 + 24)];
  *(_QWORD *)v17 = "SQLDB: Update closest sync root for descendents of unignored item";
  *((_QWORD *)v17 + 1) = 65;
  v17[16] = 2;
  v18 = v15;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_23AA8A05C((uint64_t)v11, (uint64_t *)&unk_2542E67B8);
  v19 = v35;
  v20 = *(void **)(v35 + qword_2542EDF00);
  v21 = (_QWORD *)swift_allocObject();
  v22 = v33;
  v23 = v34;
  v21[2] = v19;
  v21[3] = v22;
  v21[4] = v23;
  v21[5] = 200;
  v24 = (_QWORD *)swift_allocObject();
  v25 = (char)v24;
  v24[2] = sub_23AEF7FC4;
  v24[3] = v21;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v24;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_750;
  v26 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v27 = objc_msgSend(v20, sel_executeSwift_error_, v26, aBlock);
  _Block_release(v26);
  v28 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if ((v27 & 1) != 0)
  {
    v25 = (uint64_t)objc_msgSend(v20, sel_changes) > 199;
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  sub_23B1C6BD8();
  sub_23B1C5DA4();
  sub_23AA937BC((uint64_t)v14, type metadata accessor for Signpost);
  swift_release();
  return v25;
}

uint64_t sub_23AEDFE68(void *a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v2 = (void *)sub_23B1C7514();
  v3 = objc_msgSend(a1, sel_bindObjectParameter_, v2);

  sub_23B1C63E0();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v4 = (void *)sub_23B1C7514();
  v5 = objc_msgSend(a1, sel_bindObjectParameter_, v4);

  sub_23B1C63E0();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

id sub_23AEE0060(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  int v19;
  id v20;
  char *v21;
  char *v22;
  char *v23;
  id v24;
  _BYTE *v25;
  void *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  char *v51;
  id aBlock[7];

  v45 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 744);
  v49 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v49 + 728);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v48 = AssociatedTypeWitness;
  v44 = *(_QWORD *)(v47 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v46 = (char *)&v40 - v5;
  v6 = sub_23B1C5DC8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v43 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v40 - v13;
  v15 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v15);
  v50 = v1;
  v51 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = 0;
  if ((v1[32] & 1) == 0)
  {
    swift_getAssociatedTypeWitness();
    if (swift_dynamicCastMetatype())
    {
      if (qword_2542E6818 != -1)
        swift_once();
      v18 = (void *)qword_2542EDD28;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v14, 1, 1, v6);
      sub_23AA8A098((uint64_t)v14, (uint64_t)v12);
      v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
      v42 = v3;
      if (v19 == 1)
      {
        v20 = v18;
        v21 = v43;
        sub_23B1C5DB0();
        sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
      }
      else
      {
        v21 = v43;
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v43, v12, v6);
      }
      v22 = v51;
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v51, v21, v6);
      v41 = *(int *)(v15 + 20);
      *(_QWORD *)&v22[v41] = v18;
      v23 = &v22[*(int *)(v15 + 24)];
      *(_QWORD *)v23 = "SQLDB: Find closest sync root in parent chain";
      *((_QWORD *)v23 + 1) = 45;
      v43 = v23;
      v23[16] = 2;
      v24 = v18;
      sub_23B1C6BE4();
      sub_23B1C5DA4();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
      sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E67B8);
      v25 = v50;
      v26 = *(void **)&v50[qword_2542EDF00];
      v28 = v46;
      v27 = v47;
      v29 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v45, v48);
      v30 = (*(unsigned __int8 *)(v27 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
      v31 = (char *)swift_allocObject();
      *((_QWORD *)v31 + 2) = v42;
      v32 = v49;
      *((_QWORD *)v31 + 3) = *(_QWORD *)(v49 + 736);
      *((_QWORD *)v31 + 4) = v2;
      *((_QWORD *)v31 + 5) = *(_QWORD *)(v32 + 752);
      *((_QWORD *)v31 + 6) = v25;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v31[v30], v28, v29);
      v33 = (_QWORD *)swift_allocObject();
      v33[2] = sub_23AEF7F84;
      v33[3] = v31;
      aBlock[4] = sub_23AA956C8;
      aBlock[5] = v33;
      aBlock[0] = (id)MEMORY[0x24BDAC760];
      aBlock[1] = (id)1107296256;
      aBlock[2] = sub_23AA9432C;
      aBlock[3] = &block_descriptor_740;
      v34 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      aBlock[0] = 0;
      v35 = objc_msgSend(v26, sel_fetchSwift_error_, v34, aBlock);
      _Block_release(v34);
      v17 = aBlock[0];
      v36 = aBlock[0];
      LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v28 & 1) != 0)
        __break(1u);
      if (v35)
      {
        if (objc_msgSend(v35, sel_next))
          v17 = objc_msgSend(v35, sel_unsignedLongLongAtIndex_, 0);
        else
          v17 = 0;

        sub_23B1C6BD8();
        v38 = (uint64_t)v51;
        sub_23B1C5DA4();
        sub_23AA937BC(v38, type metadata accessor for Signpost);
        swift_release();
      }
      else
      {
        sub_23B1C587C();

        swift_willThrow();
        sub_23B1C6BD8();
        v37 = (uint64_t)v51;
        sub_23B1C5DA4();
        sub_23AA937BC(v37, type metadata accessor for Signpost);
        swift_release();
      }
    }
    else
    {
      return 0;
    }
  }
  return v17;
}

uint64_t sub_23AEE05E8(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

id sub_23AEE0968(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  id v17;
  _QWORD v19[2];
  id v20;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 744);
  v5 = *(_QWORD *)(*v1 + 728);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)v19 - v8;
  v20 = *(id *)((char *)v1 + qword_2542EDF00);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v19 - v8, a1, AssociatedTypeWitness);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = (char *)swift_allocObject();
  *((_QWORD *)v11 + 2) = v5;
  *((_QWORD *)v11 + 3) = *(_QWORD *)(v3 + 736);
  *((_QWORD *)v11 + 4) = v4;
  v12 = *(_QWORD *)(v3 + 752);
  v13 = v19[1];
  *((_QWORD *)v11 + 5) = v12;
  *((_QWORD *)v11 + 6) = v13;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, AssociatedTypeWitness);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = sub_23AEF9328;
  v14[3] = v11;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v14;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_1120;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v16 = objc_msgSend(v20, sel_fetchSwift_error_, v15, aBlock);
  _Block_release(v15);
  v17 = aBlock[0];
  LOBYTE(AssociatedTypeWitness) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((AssociatedTypeWitness & 1) != 0)
    __break(1u);
  if (!v16)
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  swift_release();
  return v16;
}

uint64_t sub_23AEE0BD8(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEE0EA0(uint64_t a1, void (*a2)(void))
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t result;
  id v32;
  char **v33;
  id v34;
  void (*v35)(_QWORD, _QWORD, _QWORD);
  char *v36;
  uint64_t v37;
  _QWORD *AssociatedConformanceWitness;
  void (*v39)(void);
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  char v47;
  void (*v48)(void);
  id v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  void (*v56)(void);
  void (*v57)(void);
  void (*v58)(void);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  _QWORD v69[2];
  char *v70;
  void (*v71)(_QWORD, _QWORD, _QWORD);
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t (*v76)(uint64_t, _QWORD *);
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(void);
  char *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v81 = (char *)a1;
  v80 = a2;
  v3 = *(_QWORD **)(*(_QWORD *)v2 + 744);
  v76 = *(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 728);
  v77 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v78 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v79 = AssociatedTypeWitness;
  v5 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)v69 - v9;
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)v69 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)v69 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v69 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)v69 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)v69 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v69 - v26;
  v28 = v82;
  v29 = sub_23AEE0968((uint64_t)v81);
  if (v28)
    return (uint64_t)v10;
  v70 = v19;
  v71 = (void (*)(_QWORD, _QWORD, _QWORD))v25;
  v69[1] = v13;
  v81 = v16;
  v82 = v29;
  v72 = v7;
  v73 = v22;
  v74 = v27;
  v75 = v10;
  v30 = v79;
  v32 = sub_23AEE0968((uint64_t)v80);
  v33 = &selRef_defaultManager;
  v34 = v82;
  if (objc_msgSend(v82, sel_next))
  {
    v69[0] = v2;
    v80 = *(void (**)(void))(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 40) + 16);
    v34;
    v35 = v71;
    v80();
    v36 = v74;
    (*(void (**)(char *, _QWORD, uint64_t))(v78 + 32))(v74, v35, v30);
  }
  else
  {
    v36 = v74;
    sub_23B0EB9DC();
  }
  if (objc_msgSend(v32, sel_next))
  {
    v37 = v30;
    AssociatedConformanceWitness = (_QWORD *)swift_getAssociatedConformanceWitness();
    v39 = *(void (**)(void))(AssociatedConformanceWitness[5] + 16);
    v32;
    v40 = v70;
    v39();
    v80 = (void (*)(void))v32;
    v41 = v78;
    v42 = v73;
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v73, v40, v37);
    v43 = v37;
    v44 = (uint64_t)v81;
    v33 = &selRef_defaultManager;
  }
  else
  {
    v80 = (void (*)(void))v32;
    v42 = v73;
    sub_23B0EB9DC();
    v43 = v30;
    AssociatedConformanceWitness = (_QWORD *)swift_getAssociatedConformanceWitness();
    v41 = v78;
    v44 = (uint64_t)v81;
  }
  v79 = *(_QWORD *)(AssociatedConformanceWitness[4] + 8);
  if ((sub_23B1C63A4() & 1) != 0)
  {
    v45 = v42;
    v10 = (char *)sub_23B1C6758();

    v46 = *(void (**)(char *, uint64_t))(v41 + 8);
    v46(v45, v43);
    v46(v36, v43);
    return (uint64_t)v10;
  }
  v89 = sub_23B1C6758();
  v76 = (uint64_t (*)(uint64_t, _QWORD *))AssociatedConformanceWitness[8];
  v47 = v76(v43, AssociatedConformanceWitness);
  v77 = AssociatedConformanceWitness;
  if ((v47 & 1) == 0)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v78 + 16))(v44, v36, v43);
    sub_23B1C67DC();
    sub_23B1C67AC();
    if (objc_msgSend(v82, sel_next))
    {
      v48 = *(void (**)(void))(AssociatedConformanceWitness[5] + 16);
      do
      {
        v49 = v82;
        v48();
        sub_23B1C67AC();
      }
      while ((objc_msgSend(v49, sel_next) & 1) != 0);
    }
  }
  v88 = sub_23B1C6758();
  v50 = v78;
  v51 = v75;
  v71 = *(void (**)(_QWORD, _QWORD, _QWORD))(v78 + 16);
  v71(v75, v73, v43);
  if ((v76(v43, v77) & 1) != 0)
  {

    v52 = *(void (**)(char *, uint64_t))(v50 + 8);
LABEL_18:
    v53 = v73;
    v52(v51, v43);
    swift_bridgeObjectRelease();
    v52(v53, v43);
    v52(v74, v43);
    return v89;
  }
  v54 = sub_23B1C67DC();
  v55 = v77;
  while (1)
  {
    v87 = v89;
    MEMORY[0x23B8613CC](MEMORY[0x24BEE12E0], v54);
    result = sub_23B1C69C8();
    if ((v84 & 1) == 0)
      break;
    v71(v81, v51, v43);
    sub_23B1C67AC();
    v56 = v80;
    if ((objc_msgSend(v80, v33[406]) & 1) == 0)
    {
      v87 = v88;
      MEMORY[0x23B8613CC](MEMORY[0x24BEE12B0], v54);
      sub_23B1C632C();
      v87 = v83;
      v67 = sub_23B1C707C();
      MEMORY[0x23B8613CC](MEMORY[0x24BEE3048], v67);
      sub_23B1C67A0();

      goto LABEL_27;
    }
    v57 = *(void (**)(void))(v55[5] + 16);
    v58 = v56;
    v59 = v72;
    v57();
    v60 = v78;
    v52 = *(void (**)(char *, uint64_t))(v78 + 8);
    v51 = v75;
    v52(v75, v43);
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v51, v59, v43);
    v33 = &selRef_defaultManager;
    if ((v76(v43, v55) & 1) != 0)
    {

      goto LABEL_18;
    }
  }
  if ((v83 & 0x8000000000000000) == 0)
  {
    v83 = sub_23B1C680C();
    v84 = v61;
    v85 = v62;
    v86 = v63;
    v64 = sub_23B1C6DB8();
    MEMORY[0x23B8613CC](MEMORY[0x24BEE2180], v64);
    v65 = sub_23B1C6800();
    swift_bridgeObjectRelease();
    v89 = v65;
    v87 = v88;
    MEMORY[0x23B8613CC](MEMORY[0x24BEE12B0], v54);
    sub_23B1C632C();
    v87 = v83;
    v66 = sub_23B1C707C();
    MEMORY[0x23B8613CC](MEMORY[0x24BEE3048], v66);
    sub_23B1C67A0();

LABEL_27:
    v68 = *(void (**)(char *, uint64_t))(v78 + 8);
    v68(v51, v43);
    v68(v73, v43);
    v68(v74, v43);
    return v89;
  }
  __break(1u);
  return result;
}

uint64_t sub_23AEE16F4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  _BYTE *v21;
  _BYTE *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, _BYTE *, uint64_t);
  _QWORD *v38;
  unsigned __int8 v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  _BYTE v45[16];
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t AssociatedTypeWitness;
  uint64_t v58;
  _BYTE *v59;
  id aBlock[8];

  v51 = a2;
  v49 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*v2 + 744);
  v56 = *v2;
  v54 = *(_QWORD *)(v56 + 728);
  v55 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v53 = &v45[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v48 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v50 = &v45[-v6];
  v7 = sub_23B1C5DC8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v45[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = &v45[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v16 = &v45[-v15];
  v17 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v17);
  v59 = &v45[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_2542E6818 != -1)
    swift_once();
  v19 = (void *)qword_2542EDD28;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v16, 1, 1, v7);
  sub_23AA8A098((uint64_t)v16, (uint64_t)v14);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7) == 1)
  {
    v20 = v19;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v14, v7);
  }
  v21 = v59;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v59, v10, v7);
  v46 = *(int *)(v17 + 20);
  *(_QWORD *)&v21[v46] = v19;
  v22 = &v21[*(int *)(v17 + 24)];
  *(_QWORD *)v22 = "SQLDB: check item is descendent of another item";
  *((_QWORD *)v22 + 1) = 47;
  v22[16] = 2;
  v23 = v19;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  sub_23AA8A05C((uint64_t)v16, (uint64_t *)&unk_2542E67B8);
  v24 = AssociatedTypeWitness;
  v25 = v58;
  v47 = *(id *)(v58 + qword_2542EDF00);
  v26 = v52;
  v27 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v52 + 16);
  v28 = v50;
  v27(v50, v49, AssociatedTypeWitness);
  v29 = v53;
  v27(v53, v51, v24);
  v30 = *(unsigned __int8 *)(v26 + 80);
  v31 = (v30 + 56) & ~v30;
  v32 = (v48 + v30 + v31) & ~v30;
  v33 = (char *)swift_allocObject();
  *((_QWORD *)v33 + 2) = v54;
  v34 = v56;
  v35 = v55;
  *((_QWORD *)v33 + 3) = *(_QWORD *)(v56 + 736);
  *((_QWORD *)v33 + 4) = v35;
  *((_QWORD *)v33 + 5) = *(_QWORD *)(v34 + 752);
  *((_QWORD *)v33 + 6) = v25;
  v36 = &v33[v31];
  v37 = *(void (**)(char *, _BYTE *, uint64_t))(v26 + 32);
  v37(v36, v28, v24);
  v37(&v33[v32], v29, v24);
  v38 = (_QWORD *)swift_allocObject();
  v39 = v38;
  v38[2] = sub_23AEF7EE8;
  v38[3] = v33;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v38;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_730;
  v40 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v41 = objc_msgSend(v47, sel_fetchSwift_error_, v40, aBlock);
  _Block_release(v40);
  v42 = aBlock[0];
  LOBYTE(v25) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v25 & 1) != 0)
    __break(1u);
  if (v41)
  {
    v39 = objc_msgSend(v41, sel_next);

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  sub_23B1C6BD8();
  v43 = (uint64_t)v59;
  sub_23B1C5DA4();
  sub_23AA937BC(v43, type metadata accessor for Signpost);
  swift_release();
  return v39 & 1;
}

uint64_t sub_23AEE1C64(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AEE1F5C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  _BYTE *v21;
  _BYTE *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, _BYTE *, uint64_t);
  _QWORD *v38;
  unsigned __int8 v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  _BYTE v45[16];
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t AssociatedTypeWitness;
  uint64_t v58;
  _BYTE *v59;
  id aBlock[8];

  v51 = a2;
  v49 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*v2 + 744);
  v56 = *v2;
  v54 = *(_QWORD *)(v56 + 728);
  v55 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v53 = &v45[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v48 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v50 = &v45[-v6];
  v7 = sub_23B1C5DC8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v45[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = &v45[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v16 = &v45[-v15];
  v17 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v17);
  v59 = &v45[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_2542E6818 != -1)
    swift_once();
  v19 = (void *)qword_2542EDD28;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v16, 1, 1, v7);
  sub_23AA8A098((uint64_t)v16, (uint64_t)v14);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7) == 1)
  {
    v20 = v19;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v14, v7);
  }
  v21 = v59;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v59, v10, v7);
  v46 = *(int *)(v17 + 20);
  *(_QWORD *)&v21[v46] = v19;
  v22 = &v21[*(int *)(v17 + 24)];
  *(_QWORD *)v22 = "SQLDB: check item is descendent of another item";
  *((_QWORD *)v22 + 1) = 47;
  v22[16] = 2;
  v23 = v19;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  sub_23AA8A05C((uint64_t)v16, (uint64_t *)&unk_2542E67B8);
  v24 = AssociatedTypeWitness;
  v25 = v58;
  v47 = *(id *)(v58 + qword_2542EDF00);
  v26 = v52;
  v27 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v52 + 16);
  v28 = v50;
  v27(v50, v49, AssociatedTypeWitness);
  v29 = v53;
  v27(v53, v51, v24);
  v30 = *(unsigned __int8 *)(v26 + 80);
  v31 = (v30 + 56) & ~v30;
  v32 = (v48 + v30 + v31) & ~v30;
  v33 = (char *)swift_allocObject();
  *((_QWORD *)v33 + 2) = v54;
  v34 = v56;
  v35 = v55;
  *((_QWORD *)v33 + 3) = *(_QWORD *)(v56 + 736);
  *((_QWORD *)v33 + 4) = v35;
  *((_QWORD *)v33 + 5) = *(_QWORD *)(v34 + 752);
  *((_QWORD *)v33 + 6) = v25;
  v36 = &v33[v31];
  v37 = *(void (**)(char *, _BYTE *, uint64_t))(v26 + 32);
  v37(v36, v28, v24);
  v37(&v33[v32], v29, v24);
  v38 = (_QWORD *)swift_allocObject();
  v39 = v38;
  v38[2] = sub_23AEF7E1C;
  v38[3] = v33;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v38;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_720;
  v40 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v41 = objc_msgSend(v47, sel_fetchSwift_error_, v40, aBlock);
  _Block_release(v40);
  v42 = aBlock[0];
  LOBYTE(v25) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v25 & 1) != 0)
    __break(1u);
  if (v41)
  {
    v39 = objc_msgSend(v41, sel_next);

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  sub_23B1C6BD8();
  v43 = (uint64_t)v59;
  sub_23B1C5DA4();
  sub_23AA937BC(v43, type metadata accessor for Signpost);
  swift_release();
  return v39 & 1;
}

uint64_t sub_23AEE24CC(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEE2A14(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  id v25;
  char *v26;
  char *v27;
  id v28;
  uint64_t v29;
  char v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  _QWORD *v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  char *v74;
  id aBlock[8];

  v65 = a2;
  v63 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*v3 + 744);
  v70 = *v3;
  v6 = *(_QWORD *)(v70 + 728);
  v69 = v5;
  v67 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v66 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v68 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = v9;
  MEMORY[0x24BDAC7A8](v8);
  v64 = (char *)&v57 - v10;
  v11 = sub_23B1C5DC8();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v57 - v19;
  v21 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v21);
  v74 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v23 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v20, 1, 1, v11);
  sub_23AA8A098((uint64_t)v20, (uint64_t)v18);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v18, 1, v11);
  v72 = a3;
  v71 = AssociatedTypeWitness;
  if (v24 == 1)
  {
    v25 = v23;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v18, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v18, v11);
  }
  v26 = v74;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v74, v14, v11);
  v58 = *(int *)(v21 + 20);
  *(_QWORD *)&v26[v58] = v23;
  v27 = &v26[*(int *)(v21 + 24)];
  *(_QWORD *)v27 = "SQLDB: check path-matching loop";
  *((_QWORD *)v27 + 1) = 31;
  v27[16] = 2;
  v28 = v23;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  sub_23AA8A05C((uint64_t)v20, (uint64_t *)&unk_2542E67B8);
  v29 = v73;
  v30 = *(_BYTE *)(v73 + 32);
  result = swift_weakLoadStrong();
  v59 = v27;
  if ((v30 & 1) == 0)
  {
    if (result)
    {
      v32 = *(_QWORD *)(result + 40);
      goto LABEL_11;
    }
LABEL_18:
    __break(1u);
    return result;
  }
  if (!result)
  {
    __break(1u);
    goto LABEL_18;
  }
  v32 = *(_QWORD *)(result + 32);
LABEL_11:
  swift_retain();
  swift_release();
  v33 = *(_QWORD *)(v32 + 16);
  swift_retain();
  v34 = swift_release();
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 112))(v34);
  swift_release();
  v60 = v35 & 1;
  v61 = *(id *)(v29 + qword_2542EDF00);
  v36 = v66;
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
  v38 = v64;
  v39 = v71;
  v37(v64, v63, v71);
  v40 = v68;
  v37(v68, v65, v39);
  v41 = *(unsigned __int8 *)(v36 + 80);
  v42 = (v41 + 56) & ~v41;
  v43 = v42 + v62;
  v44 = (v41 + v42 + v62 + 2) & ~v41;
  v45 = (char *)swift_allocObject();
  *((_QWORD *)v45 + 2) = v67;
  v46 = v70;
  v47 = v69;
  *((_QWORD *)v45 + 3) = *(_QWORD *)(v70 + 736);
  *((_QWORD *)v45 + 4) = v47;
  *((_QWORD *)v45 + 5) = *(_QWORD *)(v46 + 752);
  *((_QWORD *)v45 + 6) = v29;
  v48 = &v45[v42];
  v49 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
  v49(v48, v38, v39);
  v50 = &v45[v43];
  *v50 = v60;
  v50[1] = v72 & 1;
  v49(&v45[v44], v40, v39);
  v51 = (_QWORD *)swift_allocObject();
  v51[2] = sub_23AEF7D8C;
  v51[3] = v45;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v51;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_710_0;
  v52 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v53 = objc_msgSend(v61, sel_fetchSwift_error_, v52, aBlock);
  _Block_release(v52);
  v54 = aBlock[0];
  LOBYTE(v44) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v44 & 1) != 0)
    __break(1u);
  if (v53)
  {
    LOBYTE(v55) = objc_msgSend(v53, sel_next);

    sub_23B1C6BD8();
    v56 = (uint64_t)v74;
    sub_23B1C5DA4();
    sub_23AA937BC(v56, type metadata accessor for Signpost);
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    sub_23B1C6BD8();
    v55 = (uint64_t)v74;
    sub_23B1C5DA4();
    sub_23AA937BC(v55, type metadata accessor for Signpost);
  }
  swift_release();
  return v55 & 1;
}

uint64_t sub_23AEE3058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v8 = swift_checkMetadataState();
  v7(a1, v8, v6);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if ((a5 & 1) == 0)
  {
    v7(a1, v8, v6);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v7(a1, v8, v6);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AEE35E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  char *v22;
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  id v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t AssociatedTypeWitness;
  uint64_t v60;
  char *v61;
  char *v62;
  id aBlock[8];

  v55 = a2;
  v50 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 752);
  v57 = *(_QWORD *)(*v2 + 736);
  v58 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v56 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v52 = *(_QWORD *)(v56 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v62 = (char *)&v43 - v5;
  v6 = *(_QWORD *)(v3 + 728);
  v54 = *(_QWORD *)(v3 + 744);
  v51 = v6;
  v53 = swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(v53 - 8);
  v47 = *(_QWORD *)(v49 + 64);
  MEMORY[0x24BDAC7A8](v53);
  v48 = (char *)&v43 - v7;
  v8 = sub_23B1C5DC8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v43 - v16;
  v18 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v18);
  v61 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v20 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v17, 1, 1, v8);
  sub_23AA8A098((uint64_t)v17, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8) == 1)
  {
    v21 = v20;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v15, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
  }
  v22 = v61;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v61, v11, v8);
  v44 = *(int *)(v18 + 20);
  *(_QWORD *)&v22[v44] = v20;
  v23 = &v22[*(int *)(v18 + 24)];
  *(_QWORD *)v23 = "SQLDB: check path-matching loop";
  *((_QWORD *)v23 + 1) = 31;
  v45 = v23;
  v23[16] = 2;
  v24 = v20;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_23AA8A05C((uint64_t)v17, (uint64_t *)&unk_2542E67B8);
  v25 = v60;
  v46 = *(id *)(v60 + qword_2542EDF00);
  v26 = v49;
  v27 = v48;
  v28 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v50, v53);
  v29 = v56;
  v30 = AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v62, v55, AssociatedTypeWitness);
  v31 = (*(unsigned __int8 *)(v26 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  v32 = (v47 + *(unsigned __int8 *)(v29 + 80) + v31) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  v33 = (char *)swift_allocObject();
  v34 = v57;
  *((_QWORD *)v33 + 2) = v51;
  *((_QWORD *)v33 + 3) = v34;
  v35 = v58;
  *((_QWORD *)v33 + 4) = v54;
  *((_QWORD *)v33 + 5) = v35;
  *((_QWORD *)v33 + 6) = v25;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(&v33[v31], v27, v28);
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v33[v32], v62, v30);
  v36 = (_QWORD *)swift_allocObject();
  v36[2] = sub_23AEF7C20;
  v36[3] = v33;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v36;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_700;
  v37 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v38 = objc_msgSend(v46, sel_fetchSwift_error_, v37, aBlock);
  _Block_release(v37);
  v39 = aBlock[0];
  LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v27 & 1) != 0)
    __break(1u);
  if (v38)
  {
    LOBYTE(v40) = objc_msgSend(v38, sel_next);

    sub_23B1C6BD8();
    v41 = (uint64_t)v61;
    sub_23B1C5DA4();
    sub_23AA937BC(v41, type metadata accessor for Signpost);
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    sub_23B1C6BD8();
    v40 = (uint64_t)v61;
    sub_23B1C5DA4();
    sub_23AA937BC(v40, type metadata accessor for Signpost);
  }
  swift_release();
  return v40 & 1;
}

uint64_t sub_23AEE3BD8(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v7 = swift_checkMetadataState();
  v6(a1, v7, v5);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEE3F44()
{
  return sub_23AEF6484();
}

uint64_t sub_23AEE3F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t AssociatedConformanceWitness;
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[2];
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t AssociatedTypeWitness;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id aBlock[7];

  v39[0] = a2;
  v43 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*v2 + 744);
  v45 = *v2;
  v48 = *(_QWORD *)(v45 + 728);
  v49 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v42 = *(_QWORD *)(v50 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v44 = (char *)v39 - v4;
  v5 = sub_23B1C5DC8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v39 - v13;
  v15 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v18 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v14, 1, 1, v5);
  sub_23AA8A098((uint64_t)v14, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1)
  {
    v19 = v18;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v17, v8, v5);
  v40 = *(int *)(v15 + 20);
  *(_QWORD *)&v17[v40] = v18;
  v20 = &v17[*(int *)(v15 + 24)];
  *(_QWORD *)v20 = "SQLDB: lookupPathMatchingItemIDInCreationParentHierarchy";
  *((_QWORD *)v20 + 1) = 56;
  v20[16] = 2;
  v21 = v18;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E67B8);
  v22 = v46;
  v23 = AssociatedTypeWitness;
  v41 = *(id *)(v46 + qword_2542EDF00);
  v24 = v50;
  v25 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v44, v43, AssociatedTypeWitness);
  v26 = (*(unsigned __int8 *)(v24 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v27 = (v42 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = (char *)swift_allocObject();
  *((_QWORD *)v28 + 2) = v48;
  v29 = v45;
  v30 = v49;
  *((_QWORD *)v28 + 3) = *(_QWORD *)(v45 + 736);
  *((_QWORD *)v28 + 4) = v30;
  *((_QWORD *)v28 + 5) = *(_QWORD *)(v29 + 752);
  *((_QWORD *)v28 + 6) = v22;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v28[v26], v25, v23);
  *(_QWORD *)&v28[v27] = 1026;
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = sub_23AEF7B18;
  v31[3] = v28;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v31;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_690;
  v32 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v33 = objc_msgSend(v41, sel_fetchSwift_error_, v32, aBlock);
  _Block_release(v32);
  v34 = aBlock[0];
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v22 & 1) != 0)
    __break(1u);
  if (v33)
  {
    if ((objc_msgSend(v33, sel_next) & 1) != 0)
    {
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v37 = v39[0];
      v36 = v39[1];
      (*(void (**)(id, _QWORD, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 40) + 16))(v33, 0, v23);
      if (!v36)
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v37, 0, 1, v23);
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v50 + 56))(v39[0], 1, 1, v23);

    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  sub_23B1C6BD8();
  sub_23B1C5DA4();
  sub_23AA937BC((uint64_t)v17, type metadata accessor for Signpost);
  return swift_release();
}

uint64_t sub_23AEE44B4(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
  v3 = swift_checkMetadataState();
  v2(a1, v3, v1);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEE499C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  _BYTE *v21;
  _BYTE *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, _BYTE *, uint64_t);
  _QWORD *v38;
  unsigned __int8 v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  _BYTE v45[16];
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t AssociatedTypeWitness;
  uint64_t v58;
  _BYTE *v59;
  id aBlock[8];

  v51 = a2;
  v49 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*v2 + 744);
  v56 = *v2;
  v54 = *(_QWORD *)(v56 + 728);
  v55 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v53 = &v45[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v48 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v50 = &v45[-v6];
  v7 = sub_23B1C5DC8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v45[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = &v45[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v16 = &v45[-v15];
  v17 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v17);
  v59 = &v45[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_2542E6818 != -1)
    swift_once();
  v19 = (void *)qword_2542EDD28;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v16, 1, 1, v7);
  sub_23AA8A098((uint64_t)v16, (uint64_t)v14);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7) == 1)
  {
    v20 = v19;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v14, v7);
  }
  v21 = v59;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v59, v10, v7);
  v46 = *(int *)(v17 + 20);
  *(_QWORD *)&v21[v46] = v19;
  v22 = &v21[*(int *)(v17 + 24)];
  *(_QWORD *)v22 = "SQLDB: parentHierarchyContainsAncestorID";
  *((_QWORD *)v22 + 1) = 40;
  v22[16] = 2;
  v23 = v19;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  sub_23AA8A05C((uint64_t)v16, (uint64_t *)&unk_2542E67B8);
  v24 = AssociatedTypeWitness;
  v25 = v58;
  v47 = *(id *)(v58 + qword_2542EDF00);
  v26 = v52;
  v27 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v52 + 16);
  v28 = v50;
  v27(v50, v49, AssociatedTypeWitness);
  v29 = v53;
  v27(v53, v51, v24);
  v30 = *(unsigned __int8 *)(v26 + 80);
  v31 = (v30 + 56) & ~v30;
  v32 = (v48 + v30 + v31) & ~v30;
  v33 = (char *)swift_allocObject();
  *((_QWORD *)v33 + 2) = v54;
  v34 = v56;
  v35 = v55;
  *((_QWORD *)v33 + 3) = *(_QWORD *)(v56 + 736);
  *((_QWORD *)v33 + 4) = v35;
  *((_QWORD *)v33 + 5) = *(_QWORD *)(v34 + 752);
  *((_QWORD *)v33 + 6) = v25;
  v36 = &v33[v31];
  v37 = *(void (**)(char *, _BYTE *, uint64_t))(v26 + 32);
  v37(v36, v28, v24);
  v37(&v33[v32], v29, v24);
  v38 = (_QWORD *)swift_allocObject();
  v39 = v38;
  v38[2] = sub_23AEF7AF8;
  v38[3] = v33;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v38;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_680;
  v40 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v41 = objc_msgSend(v47, sel_fetchSwift_error_, v40, aBlock);
  _Block_release(v40);
  v42 = aBlock[0];
  LOBYTE(v25) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v25 & 1) != 0)
    __break(1u);
  if (v41)
  {
    v39 = objc_msgSend(v41, sel_next);

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  sub_23B1C6BD8();
  v43 = (uint64_t)v59;
  sub_23B1C5DA4();
  sub_23AA937BC(v43, type metadata accessor for Signpost);
  swift_release();
  return v39 & 1;
}

uint64_t sub_23AEE4F0C(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEE5170(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  char *v20;
  char *v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t AssociatedConformanceWitness;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  id v43;
  id v44;
  char isEscapingClosureAtFileLocation;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  void *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  void *v62;
  id v63;
  char v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  uint64_t (*v69)(uint64_t);
  uint64_t v70;
  void *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  id v80;
  char v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  _QWORD v87[3];
  void (*v88)(char *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  _QWORD *v95;
  unint64_t v96;
  id v97;
  char *v98;
  uint64_t v99;
  uint64_t AssociatedTypeWitness;
  _QWORD *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  id aBlock;
  uint64_t v107;
  id (*v108)(uint64_t, void *);
  void *v109;
  uint64_t (*v110)();
  uint64_t v111;
  _QWORD v112[3];

  v101 = a2;
  v99 = a1;
  v112[1] = *MEMORY[0x24BDAC8D0];
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 728);
  v103 = *(_QWORD *)(*v2 + 744);
  v104 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v96 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v95 = *(_QWORD **)(v96 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v98 = (char *)v87 - v5;
  v6 = sub_23B1C5DC8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v87 - v14;
  v16 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v16);
  v105 = (char *)v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v18 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v15, 1, 1, v6);
  sub_23AA8A098((uint64_t)v15, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    v19 = v18;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v13, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
  }
  v20 = v105;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v105, v9, v6);
  v93 = *(int *)(v16 + 20);
  *(_QWORD *)&v20[v93] = v18;
  v21 = &v20[*(int *)(v16 + 24)];
  *(_QWORD *)v21 = "SQLDB: listing descendents pending incoming propagation";
  *((_QWORD *)v21 + 1) = 55;
  v94 = v21;
  v21[16] = 2;
  v22 = v18;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_23AA8A05C((uint64_t)v15, (uint64_t *)&unk_2542E67B8);
  v23 = *(_QWORD **)(v3 + 752);
  v24 = *(_QWORD *)(v3 + 736);
  v25 = swift_getAssociatedTypeWitness();
  v26 = sub_23B1C6758();
  v27 = MEMORY[0x23B85F0EC](v26, v25);
  v90 = v25;
  if (v27)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v29 = sub_23AF518D4(v26, v25, *(_QWORD *)(AssociatedConformanceWitness + 32));
  }
  else
  {
    v29 = MEMORY[0x24BEE4B08];
  }
  v30 = v103;
  swift_bridgeObjectRelease();
  v112[0] = v29;
  v31 = v102;
  v97 = *(id *)&v102[qword_2542EDF00];
  v32 = v96;
  v33 = v98;
  v34 = AssociatedTypeWitness;
  v88 = *(void (**)(char *, uint64_t, uint64_t))(v96 + 16);
  v88(v98, v99, AssociatedTypeWitness);
  v35 = *(unsigned __int8 *)(v32 + 80);
  v36 = (v35 + 64) & ~v35;
  v37 = ((unint64_t)v95 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v87[1] = v37 + 8;
  v87[2] = v35 | 7;
  v38 = (_QWORD *)swift_allocObject();
  v38[2] = v104;
  v38[3] = v24;
  v92 = v24;
  v39 = v38;
  v38[4] = v30;
  v38[5] = v23;
  v95 = v23;
  v40 = v101;
  v38[6] = v31;
  v38[7] = v40;
  v89 = v36;
  v87[0] = *(_QWORD *)(v32 + 32);
  ((void (*)(char *, char *, uint64_t))v87[0])((char *)v38 + v36, v33, v34);
  v96 = v37;
  *(_QWORD *)((char *)v39 + v37) = 100;
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = sub_23AEF7984;
  *(_QWORD *)(v41 + 24) = v39;
  v110 = sub_23AA956C8;
  v111 = v41;
  aBlock = (id)MEMORY[0x24BDAC760];
  v107 = 1107296256;
  v108 = sub_23AA9432C;
  v109 = &block_descriptor_650_0;
  v42 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v43 = objc_msgSend(v97, sel_fetchSwift_error_, v42, &aBlock);
  _Block_release(v42);
  v44 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (!v43)
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_bridgeObjectRelease();
    v51 = 0;
    v52 = 0;
LABEL_41:
    sub_23B1C6BD8();
    v84 = (uint64_t)v105;
    sub_23B1C5DA4();
    sub_23AA937BC(v84, type metadata accessor for Signpost);
    swift_release();
    sub_23AAB7948(v51);
    sub_23AAB7948((uint64_t)v52);
    return v51;
  }
  if (objc_msgSend(v43, sel_next))
  {
    v46 = v103;
    v47 = v95;
    v48 = v92;
    v49 = v91;
    while (1)
    {
      v50 = (void *)MEMORY[0x23B8601A8]();
      sub_23AEE6B84((uint64_t)v112, v43);
      if (v49)
        break;
      objc_autoreleasePoolPop(v50);
      if ((objc_msgSend(v43, sel_next) & 1) == 0)
        goto LABEL_18;
    }
    objc_autoreleasePoolPop(v50);

    swift_bridgeObjectRelease();
    v51 = 0;
    v52 = 0;
    goto LABEL_41;
  }
  v46 = v103;
  v47 = v95;
  v48 = v92;
  v49 = v91;
LABEL_18:
  v95 = v39;
  v53 = (void *)v112[0];
  v54 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 32);
  swift_bridgeObjectRetain();
  v55 = sub_23B1C68C0();
  swift_bridgeObjectRelease();
  if (v55 >= 100)
  {
    aBlock = v53;
    v67 = sub_23B1C6920();
    swift_bridgeObjectRetain();
    MEMORY[0x23B8613CC](MEMORY[0x24BEE1718], v67);
    v51 = sub_23B1C6800();
    swift_bridgeObjectRelease();

    v68 = 0;
    v69 = 0;
    goto LABEL_27;
  }
  v92 = v54;

  v56 = v98;
  v57 = AssociatedTypeWitness;
  v88(v98, v99, AssociatedTypeWitness);
  v58 = (_QWORD *)swift_allocObject();
  v58[2] = v104;
  v58[3] = v48;
  v58[4] = v46;
  v58[5] = v47;
  v59 = (char *)v58 + v89;
  v60 = v101;
  v58[6] = v102;
  v58[7] = v60;
  ((void (*)(char *, char *, uint64_t))v87[0])(v59, v56, v57);
  *(_QWORD *)((char *)v58 + v96) = 100;
  v61 = swift_allocObject();
  *(_QWORD *)(v61 + 16) = sub_23AEF79A4;
  *(_QWORD *)(v61 + 24) = v58;
  v110 = sub_23AA956C8;
  v111 = v61;
  aBlock = (id)MEMORY[0x24BDAC760];
  v107 = 1107296256;
  v108 = sub_23AA9432C;
  v109 = &block_descriptor_660_0;
  v62 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v63 = objc_msgSend(v97, sel_fetchSwift_error_, v62, &aBlock);
  _Block_release(v62);
  v91 = aBlock;
  v64 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v64 & 1) != 0)
    goto LABEL_48;
  if (!v63)
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_bridgeObjectRelease();
    v52 = 0;
LABEL_40:
    v51 = (uint64_t)sub_23AEF79A4;
    goto LABEL_41;
  }
  if (objc_msgSend(v63, sel_next))
  {
    v65 = v103;
    while (1)
    {
      v66 = (void *)MEMORY[0x23B8601A8]();
      sub_23AEE6B84((uint64_t)v112, v63);
      if (v49)
        break;
      objc_autoreleasePoolPop(v66);
      if ((objc_msgSend(v63, sel_next) & 1) == 0)
        goto LABEL_31;
    }
    objc_autoreleasePoolPop(v66);

    swift_bridgeObjectRelease();
    v52 = 0;
    goto LABEL_40;
  }
  v65 = v103;
LABEL_31:
  v91 = v58;
  v71 = (void *)v112[0];
  swift_bridgeObjectRetain();
  v72 = sub_23B1C68C0();
  swift_bridgeObjectRelease();
  if (v72 >= 100)
  {
    aBlock = v71;
    v83 = sub_23B1C6920();
    swift_bridgeObjectRetain();
    MEMORY[0x23B8613CC](MEMORY[0x24BEE1718], v83);
    v51 = sub_23B1C6800();
    swift_bridgeObjectRelease();

    v69 = 0;
    v68 = sub_23AEF79A4;
    goto LABEL_27;
  }

  v73 = v98;
  v74 = AssociatedTypeWitness;
  v88(v98, v99, AssociatedTypeWitness);
  v75 = (_QWORD *)swift_allocObject();
  v75[2] = v104;
  v75[3] = v48;
  v75[4] = v65;
  v75[5] = v47;
  v76 = (char *)v75 + v89;
  v77 = v101;
  v75[6] = v102;
  v75[7] = v77;
  ((void (*)(char *, char *, uint64_t))v87[0])(v76, v73, v74);
  *(_QWORD *)((char *)v75 + v96) = 100;
  v78 = swift_allocObject();
  *(_QWORD *)(v78 + 16) = sub_23AEF7A5C;
  *(_QWORD *)(v78 + 24) = v75;
  v101 = v75;
  v110 = sub_23AA956C8;
  v111 = v78;
  aBlock = (id)MEMORY[0x24BDAC760];
  v107 = 1107296256;
  v108 = sub_23AA9432C;
  v109 = &block_descriptor_670;
  v79 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v80 = objc_msgSend(v97, sel_fetchSwift_error_, v79, &aBlock);
  _Block_release(v79);
  v102 = (char *)aBlock;
  v81 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v81 & 1) != 0)
LABEL_49:
    __break(1u);
  if (!v80)
  {
    sub_23B1C587C();

    swift_willThrow();
LABEL_46:
    swift_bridgeObjectRelease();
    v52 = sub_23AEF7A5C;
    v51 = (uint64_t)sub_23AEF79A4;
    goto LABEL_41;
  }
  if (objc_msgSend(v80, sel_next))
  {
    while (1)
    {
      v82 = (void *)MEMORY[0x23B8601A8]();
      sub_23AEE6B84((uint64_t)v112, v80);
      if (v49)
        break;
      objc_autoreleasePoolPop(v82);
      if ((objc_msgSend(v80, sel_next) & 1) == 0)
        goto LABEL_44;
    }
    objc_autoreleasePoolPop(v82);

    goto LABEL_46;
  }
LABEL_44:
  aBlock = (id)v112[0];
  v86 = sub_23B1C6920();
  swift_bridgeObjectRetain();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE1718], v86);
  v51 = sub_23B1C6800();
  swift_bridgeObjectRetain();
  sub_23B1C68C0();
  swift_bridgeObjectRelease_n();

  v69 = sub_23AEF7A5C;
  v68 = sub_23AEF79A4;
LABEL_27:
  sub_23B1C6BD8();
  v70 = (uint64_t)v105;
  sub_23B1C5DA4();
  sub_23AA937BC(v70, type metadata accessor for Signpost);
  swift_release();
  sub_23AAB7948((uint64_t)v68);
  sub_23AAB7948((uint64_t)v69);
  return v51;
}

uint64_t sub_23AEE5EF8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t, uint64_t);
  uint64_t v11;
  id v12;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v16 = 0xE000000000000000;
  sub_23B1C6EFC();
  v18 = 0;
  v19 = 0xE000000000000000;
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v17 = MEMORY[0x24BEE1768];
  v15 = a3;
  sub_23AA94C90((uint64_t)&v15);
  v8 = v7;
  sub_23AA8A05C((uint64_t)&v15, qword_2542E5640);
  if (v8)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_getAssociatedTypeWitness();
    v9 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
    v10 = *(void (**)(void *, uint64_t, uint64_t))(v9 + 32);
    v11 = swift_checkMetadataState();
    v10(a1, v11, v9);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v15 = 3044466;
    v16 = 0xE300000000000000;
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23AEF6484();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v12 = objc_msgSend(a1, sel_bindLongParameter_, a5);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v18;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23AEE62D8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, uint64_t, uint64_t);
  uint64_t v12;
  id v13;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v17 = 0xE000000000000000;
  sub_23B1C6EFC();
  v19 = 0;
  v20 = 0xE000000000000000;
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v7 = MEMORY[0x24BEE1768];
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v18 = v7;
  v16 = a3;
  sub_23AA94C90((uint64_t)&v16);
  v9 = v8;
  sub_23AA8A05C((uint64_t)&v16, qword_2542E5640);
  if (v9)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_getAssociatedTypeWitness();
    v10 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
    v11 = *(void (**)(void *, uint64_t, uint64_t))(v10 + 32);
    v12 = swift_checkMetadataState();
    v11(a1, v12, v10);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v16 = 3044466;
    v17 = 0xE300000000000000;
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23AEF6484();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v13 = objc_msgSend(a1, sel_bindLongParameter_, a5);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v19;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23AEE66CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t, uint64_t);
  uint64_t v11;
  id v12;
  uint64_t result;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v17 = (uint64_t (*)())0xE000000000000000;
  sub_23B1C6EFC();
  v22 = 0;
  v23 = 0xE000000000000000;
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v16 = 5;
  v6 = MEMORY[0x24BEE1768];
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (qword_2542E5078 != -1)
    swift_once();
  v20 = 40;
  v21 = 0xE100000000000000;
  v17 = sub_23AAB6448;
  v18 = 0;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5540);
  sub_23AAB5A28(&qword_2542E75B0, (uint64_t *)&unk_2542E5540, MEMORY[0x24BEE2B40]);
  sub_23AAA420C();
  sub_23B1C6644();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v19 = v6;
  v16 = a3;
  sub_23AA94C90((uint64_t)&v16);
  v8 = v7;
  sub_23AA8A05C((uint64_t)&v16, qword_2542E5640);
  if (v8)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_getAssociatedTypeWitness();
    v9 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
    v10 = *(void (**)(void *, uint64_t, uint64_t))(v9 + 32);
    v11 = swift_checkMetadataState();
    v10(a1, v11, v9);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v16 = 3044466;
    v17 = (uint64_t (*)())0xE300000000000000;
    sub_23B1C64F4();
    sub_23B1C64F4();
    sub_23AEF6484();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v12 = objc_msgSend(a1, sel_bindLongParameter_, a5);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v22;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23AEE6B84(uint64_t a1, void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(id, _QWORD, uint64_t, uint64_t);
  id v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[4];

  v13[1] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v13 - v6;
  v8 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v9 = *(uint64_t (**)(id, _QWORD, uint64_t, uint64_t))(v8 + 16);
  v10 = a2;
  v11 = v13[3];
  result = v9(v10, 0, AssociatedTypeWitness, v8);
  if (!v11)
  {
    sub_23B1C6920();
    sub_23B1C68CC();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
  }
  return result;
}

_QWORD *sub_23AEE6CD0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t AssociatedTypeWitness;
  id aBlock[7];

  v50 = a2;
  v46 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*v2 + 744);
  v49 = *v2;
  v52 = *(_QWORD *)(v49 + 728);
  v53 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v45 = *(_QWORD *)(v48 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v47 = (char *)&v42 - v4;
  v5 = sub_23B1C5DC8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v42 - v13;
  v15 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v18 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v14, 1, 1, v5);
  sub_23AA8A098((uint64_t)v14, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1)
  {
    v19 = v18;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v17, v8, v5);
  v43 = *(int *)(v15 + 20);
  *(_QWORD *)&v17[v43] = v18;
  v20 = &v17[*(int *)(v15 + 24)];
  *(_QWORD *)v20 = "SQLDB: list not yet created descendents";
  *((_QWORD *)v20 + 1) = 39;
  v20[16] = 2;
  v21 = v18;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E67B8);
  v22 = v51;
  v44 = *(id *)(v51 + qword_2542EDF00);
  v24 = v47;
  v23 = v48;
  v25 = AssociatedTypeWitness;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v46, AssociatedTypeWitness);
  v26 = (*(unsigned __int8 *)(v23 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v27 = (v45 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = (char *)swift_allocObject();
  *((_QWORD *)v28 + 2) = v52;
  v29 = v49;
  v46 = *(_QWORD *)(v49 + 736);
  v30 = v53;
  *((_QWORD *)v28 + 3) = v46;
  *((_QWORD *)v28 + 4) = v30;
  v49 = *(_QWORD *)(v29 + 752);
  *((_QWORD *)v28 + 5) = v49;
  *((_QWORD *)v28 + 6) = v22;
  *((_QWORD *)v28 + 7) = v50;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v28[v26], v24, v25);
  *(_QWORD *)&v28[v27] = 100;
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = sub_23AEF7964;
  v31[3] = v28;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v31;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_640;
  v32 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v33 = objc_msgSend(v44, sel_fetchSwift_error_, v32, aBlock);
  _Block_release(v32);
  v34 = aBlock[0];
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
  v35 = swift_release();
  if ((v22 & 1) != 0)
    __break(1u);
  if (v33)
  {
    MEMORY[0x24BDAC7A8](v35);
    v36 = v46;
    *(&v42 - 6) = v52;
    *(&v42 - 5) = v36;
    v37 = AssociatedTypeWitness;
    v38 = v49;
    *(&v42 - 4) = v53;
    *(&v42 - 3) = v38;
    *(&v42 - 2) = (uint64_t)v33;
    v39 = v42;
    v40 = sub_23AD3D1D8();
    if (!v39)
    {
      v31 = v40;
      MEMORY[0x23B85F0B0](v40, v37);

      sub_23B1C6BD8();
      sub_23B1C5DA4();
      sub_23AA937BC((uint64_t)v17, type metadata accessor for Signpost);
      swift_release();
      return v31;
    }

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  sub_23B1C6BD8();
  sub_23B1C5DA4();
  sub_23AA937BC((uint64_t)v17, type metadata accessor for Signpost);
  swift_release();
  return v31;
}

uint64_t sub_23AEE726C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v15 = 0xE000000000000000;
  sub_23B1C6EFC();
  v17 = 0;
  v18 = 0xE000000000000000;
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v16 = MEMORY[0x24BEE1768];
  v14 = a3;
  sub_23AA94C90((uint64_t)&v14);
  v8 = v7;
  sub_23AA8A05C((uint64_t)&v14, qword_2542E5640);
  if (v8)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_getAssociatedTypeWitness();
    v9 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
    v11 = swift_checkMetadataState();
    v10(a1, v11, v9);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v14 = 3044466;
    v15 = 0xE300000000000000;
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23AEF6484();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v14 = a5;
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v17;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

_QWORD *sub_23AEE75CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  char *v18;
  char *v19;
  char *v20;
  id v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  id v29;
  char isEscapingClosureAtFileLocation;
  uint64_t TupleTypeMetadata2;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  id aBlock[7];

  v37 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *v1;
  v4 = sub_23B1C5DC8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v34 - v12;
  v14 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v14);
  v39 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v34 = v3;
  v16 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v13, 1, 1, v4);
  sub_23AA8A098((uint64_t)v13, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
  {
    v17 = v16;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v11, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
  }
  v18 = v7;
  v19 = v39;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v39, v18, v4);
  v35 = *(int *)(v14 + 20);
  *(_QWORD *)&v19[v35] = v16;
  v20 = &v19[*(int *)(v14 + 24)];
  *(_QWORD *)v20 = "SQLDB: list packages";
  *((_QWORD *)v20 + 1) = 20;
  v36 = v20;
  v20[16] = 2;
  v21 = v16;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v18, v4);
  sub_23AA8A05C((uint64_t)v13, (uint64_t *)&unk_2542E67B8);
  v22 = v38;
  v23 = *(void **)(v38 + qword_2542EDF00);
  v24 = (_QWORD *)swift_allocObject();
  v25 = v37;
  v24[2] = v22;
  v24[3] = v25;
  v24[4] = 100;
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = sub_23AEF7944;
  v26[3] = v24;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v26;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_630;
  v27 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v28 = objc_msgSend(v23, sel_fetchSwift_error_, v27, aBlock);
  _Block_release(v27);
  v29 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v28)
  {
    swift_getAssociatedTypeWitness();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    v26 = (_QWORD *)sub_23B1C6758();
    v40 = 0;
    aBlock[0] = v26;
    if (objc_msgSend(v28, sel_next))
    {
      while (1)
      {
        v26 = (_QWORD *)MEMORY[0x23B8601A8]();
        sub_23AEE7CB4(&v40, v28, (uint64_t)aBlock);
        if (v2)
          break;
        objc_autoreleasePoolPop(v26);
        if ((objc_msgSend(v28, sel_next) & 1) == 0)
        {
          v26 = aBlock[0];
          goto LABEL_12;
        }
      }
      objc_autoreleasePoolPop(v26);

      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_12:
      swift_bridgeObjectRetain_n();
      MEMORY[0x23B85F0B0](v26, TupleTypeMetadata2);
      swift_bridgeObjectRelease_n();

    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  sub_23B1C6BD8();
  v32 = (uint64_t)v39;
  sub_23B1C5DA4();
  sub_23AA937BC(v32, type metadata accessor for Signpost);
  swift_release();
  return v26;
}

uint64_t sub_23AEE7B44(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = objc_msgSend(a1, sel_bindLongParameter_, a3);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AEE7CB4(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(id, uint64_t, uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  uint64_t v25;

  v24 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v8 = (uint64_t *)((char *)&v21 - v7);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v21 - v10;
  *a1 = objc_msgSend(a2, sel_longAtIndex_, 0);
  v12 = objc_msgSend(a2, sel_stringAtIndex_, 1);
  v22 = sub_23B1C63E0();
  v14 = v13;

  v15 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v16 = *(void (**)(id, uint64_t, uint64_t, uint64_t))(v15 + 16);
  v17 = a2;
  v18 = v25;
  v16(v17, 3, AssociatedTypeWitness, v15);
  if (v18)
    return swift_bridgeObjectRelease();
  v20 = (char *)v8 + *(int *)(TupleTypeMetadata2 + 48);
  *v8 = v22;
  v8[1] = v14;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v20, v11, AssociatedTypeWitness);
  sub_23B1C67DC();
  return sub_23B1C67AC();
}

_QWORD *sub_23AEE7E88()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  id v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + qword_2542EDF00);
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = sub_23AEF792C;
  v2[3] = v0;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v2;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_620;
  v3 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v4 = objc_msgSend(v1, sel_fetchSwift_error_, v3, aBlock);
  _Block_release(v3);
  v5 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v4)
  {
    if (objc_msgSend(v4, sel_next))
    {
      v2 = objc_msgSend(v4, sel_longAtIndex_, 0);
      swift_release();

    }
    else
    {
      swift_release();

      return 0;
    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v2;
}

unint64_t sub_23AEE805C()
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0xD000000000000017;
}

uint64_t sub_23AEE80F4(uint64_t a1, char *a2, void (*a3)(char *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  void *v21;
  id v22;
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *);
  id aBlock[8];

  v46 = a4;
  v53 = a2;
  v54 = a3;
  v48 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v51 = *(_QWORD **)v4;
  v52 = sub_23B1C5BDC();
  v50 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v47 = v6;
  v49 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23B1C5DC8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v39 - v15;
  v17 = type metadata accessor for Signpost(0);
  result = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v4 + 32) == 1)
  {
    v45 = v4;
    if (qword_2542E6818 != -1)
      swift_once();
    v21 = (void *)qword_2542EDD28;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v16, 1, 1, v7);
    sub_23AA8A098((uint64_t)v16, (uint64_t)v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7) == 1)
    {
      v22 = v21;
      sub_23B1C5DB0();
      sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E67B8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v20, v10, v7);
    v41 = *(int *)(v17 + 20);
    *(_QWORD *)&v20[v41] = v21;
    v23 = &v20[*(int *)(v17 + 24)];
    *(_QWORD *)v23 = "SQLDB: get mostRecentItems";
    *((_QWORD *)v23 + 1) = 26;
    v42 = v23;
    v23[16] = 2;
    v24 = v21;
    sub_23B1C6BE4();
    v43 = v20;
    sub_23B1C5DA4();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_23AA8A05C((uint64_t)v16, (uint64_t *)&unk_2542E67B8);
    v25 = v45;
    v44 = *(id *)(v45 + qword_2542EDF00);
    v27 = v49;
    v26 = v50;
    v28 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v48, v52);
    v29 = (*(unsigned __int8 *)(v26 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
    v30 = (v47 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
    v31 = (char *)swift_allocObject();
    v32 = v51;
    v48 = v51[91];
    *((_QWORD *)v31 + 2) = v48;
    v47 = v32[92];
    *((_QWORD *)v31 + 3) = v47;
    v40 = v32[93];
    *((_QWORD *)v31 + 4) = v40;
    *((_QWORD *)v31 + 5) = v32[94];
    *((_QWORD *)v31 + 6) = v25;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(&v31[v29], v27, v28);
    *(_QWORD *)&v31[v30] = v53;
    v33 = (_QWORD *)swift_allocObject();
    v33[2] = sub_23AEF78C8;
    v33[3] = v31;
    v53 = v31;
    aBlock[4] = sub_23AA956C8;
    aBlock[5] = v33;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_613;
    v34 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v35 = objc_msgSend(v44, sel_fetchSwift_error_, v34, aBlock);
    _Block_release(v34);
    v36 = aBlock[0];
    LOBYTE(v25) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v25 & 1) != 0)
      __break(1u);
    if (v35)
    {
      if (objc_msgSend(v35, sel_next))
      {
        while (1)
        {
          v37 = (void *)MEMORY[0x23B8601A8]();
          sub_23AEE8A00(v35, v54);
          if (v5)
            break;
          objc_autoreleasePoolPop(v37);
          if ((objc_msgSend(v35, sel_next) & 1) == 0)
            goto LABEL_15;
        }
        objc_autoreleasePoolPop(v37);
      }
LABEL_15:

    }
    else
    {
      sub_23B1C587C();

      swift_willThrow();
    }
    sub_23B1C6BD8();
    v38 = (uint64_t)v43;
    sub_23B1C5DA4();
    sub_23AA937BC(v38, type metadata accessor for Signpost);
    return swift_release();
  }
  return result;
}

uint64_t sub_23AEE8654(void *a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  void *v7;
  id v8;
  id v9;

  v6 = *a2;
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v7 = (void *)sub_23B1C5B64();
  v8 = objc_msgSend(a1, sel_bindObjectParameter_, v7);

  sub_23B1C63E0();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AEF6FF4(0x2E70616E73, 0xE500000000000000, v6[91], v6[92], v6[93], v6[94], 502);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v9 = objc_msgSend(a1, sel_bindLongParameter_, a4);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AEE8A00(void *a1, void (*a2)(char *))
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  void (*v11)(char *);

  v11 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v10 - v6;
  v8 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  result = (*(uint64_t (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 16))(a1, 0, AssociatedTypeWitness, v8);
  if (!v2)
  {
    v11(v7);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_23AEE8B1C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  char *v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t AssociatedTypeWitness;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id aBlock[7];

  v35 = a2;
  v36 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = sub_23B1C5DC8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v33 - v12;
  v14 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v14);
  v37 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v2 + 32) & 1) == 0)
  {
    v34 = v2;
    if (qword_2542E6818 != -1)
      swift_once();
    v17 = (void *)qword_2542EDD28;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v13, 1, 1, v4);
    sub_23AA8A098((uint64_t)v13, (uint64_t)v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
    {
      v18 = v17;
      sub_23B1C5DB0();
      sub_23AA8A05C((uint64_t)v11, (uint64_t *)&unk_2542E67B8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
    }
    v19 = v37;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v37, v7, v4);
    v33[0] = *(int *)(v14 + 20);
    *(_QWORD *)&v19[v33[0]] = v17;
    v20 = &v19[*(int *)(v14 + 24)];
    *(_QWORD *)v20 = "SQLDB: list non evictable items with keepDownloaded policy";
    *((_QWORD *)v20 + 1) = 58;
    v33[1] = v20;
    v20[16] = 2;
    v21 = v17;
    sub_23B1C6BE4();
    sub_23B1C5DA4();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_23AA8A05C((uint64_t)v13, (uint64_t *)&unk_2542E67B8);
    if ((v35 & 1) != 0)
      v22 = 0;
    else
      v22 = v36;
    v23 = v34;
    v24 = *(void **)(v34 + qword_2542EDF00);
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = v23;
    v25[3] = v22;
    v25[4] = 100;
    v16 = (_QWORD *)swift_allocObject();
    v16[2] = sub_23AEF782C;
    v16[3] = v25;
    aBlock[4] = sub_23AA956C8;
    aBlock[5] = v16;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_603;
    v26 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v27 = objc_msgSend(v24, sel_fetchSwift_error_, v26, aBlock);
    _Block_release(v26);
    v28 = aBlock[0];
    LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v23 & 1) != 0)
      __break(1u);
    if (v27)
    {
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v16 = (_QWORD *)sub_23B1C6758();
      v38 = 0;
      aBlock[0] = v16;
      if (!objc_msgSend(v27, sel_next))
      {
LABEL_17:
        swift_bridgeObjectRetain_n();
        MEMORY[0x23B85F0B0](v16, AssociatedTypeWitness);
        swift_bridgeObjectRelease_n();

        sub_23B1C6BD8();
        v30 = (uint64_t)v37;
        sub_23B1C5DA4();
        sub_23AA937BC(v30, type metadata accessor for Signpost);
        swift_release();
        return (uint64_t)v16;
      }
      while (1)
      {
        v16 = (_QWORD *)MEMORY[0x23B8601A8]();
        sub_23AEE9B44(&v38, v27);
        if (v3)
          break;
        objc_autoreleasePoolPop(v16);
        if ((objc_msgSend(v27, sel_next) & 1) == 0)
        {
          v16 = aBlock[0];
          goto LABEL_17;
        }
      }
      objc_autoreleasePoolPop(v16);

      swift_bridgeObjectRelease();
    }
    else
    {
      sub_23B1C587C();

      swift_willThrow();
    }
    sub_23B1C6BD8();
    v31 = (uint64_t)v37;
    sub_23B1C5DA4();
    sub_23AA937BC(v31, type metadata accessor for Signpost);
    swift_release();
    return (uint64_t)v16;
  }
  swift_getAssociatedTypeWitness();
  return sub_23B1C6758();
}

uint64_t sub_23AEE90C0(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23AEF6E68(3043430, 0xE300000000000000);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = objc_msgSend(a1, sel_bindLongParameter_, a3);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AEE92D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  id v16;
  _QWORD *v17;
  char *v18;
  id v19;
  char *v20;
  id v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  char isEscapingClosureAtFileLocation;
  uint64_t AssociatedTypeWitness;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  id v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  id aBlock[7];

  v37 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = sub_23B1C5DC8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v34 - v11;
  v13 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v13);
  v38 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + 32) == 1)
  {
    if (qword_2542E6818 != -1)
      swift_once();
    v36 = (id)qword_2542EDD28;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v12, 1, 1, v3);
    sub_23AA8A098((uint64_t)v12, (uint64_t)v10);
    v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3);
    v35 = v1;
    if (v15 == 1)
    {
      v16 = v36;
      sub_23B1C5DB0();
      sub_23AA8A05C((uint64_t)v10, (uint64_t *)&unk_2542E67B8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
    }
    v18 = v38;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v38, v6, v3);
    v34[0] = *(int *)(v13 + 20);
    v19 = v36;
    *(_QWORD *)&v18[v34[0]] = v36;
    v20 = &v18[*(int *)(v13 + 24)];
    *(_QWORD *)v20 = "SQLDB: list folders with non-propagated content policy";
    *((_QWORD *)v20 + 1) = 54;
    v34[1] = v20;
    v20[16] = 2;
    v21 = v19;
    sub_23B1C6BE4();
    sub_23B1C5DA4();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E67B8);
    v22 = v35;
    v23 = *(void **)(v35 + qword_2542EDF00);
    v24 = (_QWORD *)swift_allocObject();
    v25 = v37;
    v24[2] = v22;
    v24[3] = v25;
    v24[4] = 100;
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = sub_23AEF7810;
    v17[3] = v24;
    aBlock[4] = sub_23AA956C8;
    aBlock[5] = v17;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_593;
    v26 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v27 = objc_msgSend(v23, sel_fetchSwift_error_, v26, aBlock);
    _Block_release(v26);
    v28 = aBlock[0];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    if (!v27)
    {
      sub_23B1C587C();

      swift_willThrow();
LABEL_17:
      sub_23B1C6BD8();
      v32 = (uint64_t)v38;
      sub_23B1C5DA4();
      sub_23AA937BC(v32, type metadata accessor for Signpost);
      swift_release();
      return (uint64_t)v17;
    }
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v17 = (_QWORD *)sub_23B1C6758();
    v39 = 0;
    aBlock[0] = v17;
    if (objc_msgSend(v27, sel_next))
    {
      while (1)
      {
        v17 = (_QWORD *)MEMORY[0x23B8601A8]();
        sub_23AEE9B44(&v39, v27);
        if (v2)
          break;
        objc_autoreleasePoolPop(v17);
        if ((objc_msgSend(v27, sel_next) & 1) == 0)
        {
          v17 = aBlock[0];
          goto LABEL_14;
        }
      }
      objc_autoreleasePoolPop(v17);

      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
LABEL_14:
    swift_bridgeObjectRetain_n();
    MEMORY[0x23B85F0B0](v17, AssociatedTypeWitness);
    swift_bridgeObjectRelease_n();

    sub_23B1C6BD8();
    v31 = (uint64_t)v38;
    sub_23B1C5DA4();
    sub_23AA937BC(v31, type metadata accessor for Signpost);
    swift_release();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    return sub_23B1C6758();
  }
  return (uint64_t)v17;
}

uint64_t sub_23AEE9874(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = objc_msgSend(a1, sel_bindLongParameter_, a3);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AEE9B44(_QWORD *a1, void *a2)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  *a1 = objc_msgSend(a2, sel_longAtIndex_, 0);
  v6 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, 1, AssociatedTypeWitness, v6);
  if (!v2)
  {
    sub_23B1C67DC();
    return sub_23B1C67AC();
  }
  return result;
}

void sub_23AEE9C68()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t sub_23AEE9CE0()
{
  uint64_t v0;

  v0 = sub_23B0ECA38();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_23AEE9D70()
{
  sub_23AEE9CE0();
  return swift_deallocClassInstance();
}

void type metadata accessor for SQLSnapshot()
{
  JUMPOUT(0x23B861318);
}

uint64_t sub_23AEE9D9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  unint64_t v3;
  unint64_t v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unsigned int v18;
  id v19;
  char isEscapingClosureAtFileLocation;
  uint64_t v21;
  void *v22;
  void *v23;
  unsigned int v24;
  id v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  id v29;
  uint64_t (*v30)();
  uint64_t v31;
  void *v32;
  unsigned int v33;
  id v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  id v41;
  uint64_t (*v42)();
  uint64_t v44;
  void *v45;
  unsigned __int8 v46;
  id v47;
  uint64_t v48;
  uint64_t (*v49)();
  uint64_t v50;
  id aBlock;
  unint64_t v52;
  id (*v53)(uint64_t, void *);
  void *v54;
  uint64_t (*v55)();
  uint64_t v56;
  uint64_t v57;

  v1 = v0;
  v57 = *MEMORY[0x24BDAC8D0];
  type metadata accessor for VFSItem(0);
  v50 = swift_dynamicCastMetatype();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (swift_dynamicCastMetatype())
  {
    v3 = 0xD000000000000037;
    v4 = 0x800000023B209C10;
  }
  else
  {
    sub_23B1C6EFC();
    swift_bridgeObjectRelease();
    aBlock = (id)0xD000000000000010;
    v52 = 0x800000023B209BD0;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 32) + 8))(AssociatedTypeWitness);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v3 = 0xD000000000000010;
    v4 = 0x800000023B209BD0;
  }
  v6 = swift_getAssociatedTypeWitness();
  v7 = swift_getAssociatedTypeWitness();
  v8 = swift_getAssociatedConformanceWitness();
  type metadata accessor for ItemStateVersion(0, v7, v8, v9);
  v10 = 0xE000000000000000;
  if (swift_dynamicCastMetatype())
  {
    v11 = 0;
  }
  else
  {
    sub_23B1C6EFC();
    swift_bridgeObjectRelease();
    aBlock = (id)0xD000000000000013;
    v52 = 0x800000023B209BF0;
    v12 = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t))(*(_QWORD *)(v12 + 32) + 8))(v6);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v11 = 0xD000000000000013;
    v10 = 0x800000023B209BF0;
  }
  v13 = *(void **)(v1 + qword_2542EDF00);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v1;
  v14[3] = v3;
  v14[4] = v4;
  v14[5] = v11;
  v14[6] = v10;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = sub_23AEF629C;
  *(_QWORD *)(v15 + 24) = v14;
  v55 = sub_23AA956C8;
  v56 = v15;
  v16 = (void *)MEMORY[0x24BDAC760];
  aBlock = (id)MEMORY[0x24BDAC760];
  v52 = 1107296256;
  v53 = sub_23AA9432C;
  v54 = &block_descriptor_501;
  v17 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v18 = objc_msgSend(v13, sel_executeSwift_error_, v17, &aBlock);
  _Block_release(v17);
  v19 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  if (!v18)
  {
    sub_23B1C587C();

    swift_willThrow();
    return swift_release();
  }
  if (!v50)
  {
    v49 = 0;
    v30 = 0;
    goto LABEL_17;
  }
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_23AEF6328;
  *(_QWORD *)(v21 + 24) = v1;
  v55 = sub_23AA956C8;
  v56 = v21;
  v22 = v16;
  aBlock = v16;
  v52 = 1107296256;
  v53 = sub_23AA9432C;
  v54 = &block_descriptor_532;
  v23 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v24 = objc_msgSend(v13, sel_executeSwift_error_, v23, &aBlock);
  _Block_release(v23);
  v25 = aBlock;
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v23 & 1) != 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (!v24)
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
    return swift_release();
  }
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = sub_23AEF6340;
  *(_QWORD *)(v26 + 24) = v1;
  v55 = sub_23AA956C8;
  v56 = v26;
  aBlock = v22;
  v52 = 1107296256;
  v53 = sub_23AA9432C;
  v54 = &block_descriptor_539;
  v27 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v28 = objc_msgSend(v13, sel_executeSwift_error_, v27, &aBlock);
  _Block_release(v27);
  v29 = aBlock;
  LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v27 & 1) != 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (!v28)
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release_n();
    return swift_release();
  }
  v30 = sub_23AEF6340;
  v49 = sub_23AEF6328;
  v16 = v22;
LABEL_17:
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = sub_23AEF62B8;
  *(_QWORD *)(v31 + 24) = v1;
  v55 = sub_23AA956C8;
  v56 = v31;
  aBlock = v16;
  v52 = 1107296256;
  v53 = sub_23AA9432C;
  v54 = &block_descriptor_508;
  v32 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v33 = objc_msgSend(v13, sel_executeSwift_error_, v32, &aBlock);
  _Block_release(v32);
  v34 = aBlock;
  LOBYTE(v32) = swift_isEscapingClosureAtFileLocation();
  v35 = swift_release();
  if ((v32 & 1) != 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (!v33)
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
    sub_23AAB7948((uint64_t)v49);
    sub_23AAB7948((uint64_t)v30);
    return swift_release();
  }
  v48 = (uint64_t)v30;
  v36 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v1 + 16) + 112))(v35) & 1;
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = v1;
  *(_BYTE *)(v37 + 24) = v36;
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = sub_23AEF62F4;
  *(_QWORD *)(v38 + 24) = v37;
  v55 = sub_23AA956C8;
  v56 = v38;
  aBlock = (id)MEMORY[0x24BDAC760];
  v52 = 1107296256;
  v53 = sub_23AA9432C;
  v54 = &block_descriptor_518;
  v39 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v40 = objc_msgSend(v13, sel_executeSwift_error_, v39, &aBlock);
  _Block_release(v39);
  v41 = aBlock;
  LOBYTE(v39) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v39 & 1) != 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (!v40)
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
    sub_23AAB7948((uint64_t)v49);
    sub_23AAB7948(v48);
LABEL_27:
    swift_release();
    return swift_release();
  }
  if ((*(_BYTE *)(v1 + 32) & 1) == 0)
  {
    v44 = swift_allocObject();
    *(_QWORD *)(v44 + 16) = sub_23AEF6310;
    *(_QWORD *)(v44 + 24) = v1;
    v55 = sub_23AA956C8;
    v56 = v44;
    aBlock = (id)MEMORY[0x24BDAC760];
    v52 = 1107296256;
    v53 = sub_23AA9432C;
    v54 = &block_descriptor_525;
    v45 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v46 = objc_msgSend(v13, sel_executeSwift_error_, v45, &aBlock);
    _Block_release(v45);
    v47 = aBlock;
    LOBYTE(v45) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v45 & 1) == 0)
    {
      if ((v46 & 1) != 0)
      {
        v42 = sub_23AEF6310;
        goto LABEL_32;
      }
      sub_23B1C587C();

      swift_willThrow();
      swift_release();
      sub_23AAB7948((uint64_t)v49);
      sub_23AAB7948(v48);
      swift_release();
      goto LABEL_27;
    }
LABEL_39:
    __break(1u);
  }
  v42 = 0;
LABEL_32:
  swift_release();
  sub_23AAB7948((uint64_t)v49);
  sub_23AAB7948(v48);
  swift_release();
  swift_release();
  return sub_23AAB7948((uint64_t)v42);
}

uint64_t sub_23AEEA810()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v2 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v2(AssociatedTypeWitness, v1);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v2(AssociatedTypeWitness, v1);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEAA8C()
{
  _QWORD v1[2];

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "CREATE INDEX ");
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return v1[0];
}

uint64_t sub_23AEEAB90()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEAC9C()
{
  _QWORD v1[2];

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "CREATE INDEX ");
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return v1[0];
}

uint64_t sub_23AEEADA0()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEAF04()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEB00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  id v16;
  char isEscapingClosureAtFileLocation;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  unsigned int v21;
  id v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  id v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  unsigned int v33;
  id v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  unsigned int v39;
  id v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  unsigned __int8 v45;
  id v46;
  char v47;
  uint64_t v49;
  uint64_t v51;
  id v52;
  id aBlock;
  uint64_t v54;
  id (*v55)(uint64_t, void *);
  void *v56;
  uint64_t (*v57)();
  uint64_t v58;
  uint64_t v59;

  v6 = v5;
  v59 = *MEMORY[0x24BDAC8D0];
  v11 = *(void **)(v6 + qword_2542EDF00);
  v12 = (_QWORD *)swift_allocObject();
  v51 = a1;
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = v6;
  v12[5] = a4;
  v49 = a5;
  v12[6] = a5;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = sub_23AEF5E3C;
  *(_QWORD *)(v13 + 24) = v12;
  v57 = sub_23AA956C8;
  v58 = v13;
  aBlock = (id)MEMORY[0x24BDAC760];
  v54 = 1107296256;
  v55 = sub_23AA9432C;
  v56 = &block_descriptor_290_0;
  v14 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  v52 = v11;
  aBlock = 0;
  v15 = objc_msgSend(v11, sel_executeSwift_error_, v14, &aBlock);
  _Block_release(v14);
  v16 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v15)
  {
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = a1;
    v18[3] = a2;
    v18[4] = v6;
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = sub_23AEF5E60;
    *(_QWORD *)(v19 + 24) = v18;
    v57 = sub_23AA956C8;
    v58 = v19;
    aBlock = (id)MEMORY[0x24BDAC760];
    v54 = 1107296256;
    v55 = sub_23AA9432C;
    v56 = &block_descriptor_300;
    v20 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v21 = objc_msgSend(v11, sel_executeSwift_error_, v20, &aBlock);
    _Block_release(v20);
    v22 = aBlock;
    v23 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v23 & 1) == 0)
    {
      if (!v21)
      {
        sub_23B1C587C();

        swift_willThrow();
LABEL_23:
        swift_release();
        return swift_release();
      }
      v24 = (_QWORD *)swift_allocObject();
      v24[2] = a1;
      v24[3] = a2;
      v24[4] = v6;
      v25 = swift_allocObject();
      *(_QWORD *)(v25 + 16) = sub_23AEF5E84;
      *(_QWORD *)(v25 + 24) = v24;
      v57 = sub_23AA956C8;
      v58 = v25;
      aBlock = (id)MEMORY[0x24BDAC760];
      v54 = 1107296256;
      v55 = sub_23AA9432C;
      v56 = &block_descriptor_310;
      v26 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_release();
      aBlock = 0;
      v27 = objc_msgSend(v11, sel_executeSwift_error_, v26, &aBlock);
      _Block_release(v26);
      v28 = aBlock;
      v29 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v29 & 1) == 0)
      {
        if (!v27)
        {
          sub_23B1C587C();

          swift_willThrow();
LABEL_22:
          swift_release();
          goto LABEL_23;
        }
        v30 = (_QWORD *)swift_allocObject();
        v30[2] = a1;
        v30[3] = a2;
        v30[4] = v6;
        v30[5] = a3;
        v30[6] = a4;
        v30[7] = v49;
        v31 = swift_allocObject();
        *(_QWORD *)(v31 + 16) = sub_23AEF5ED4;
        *(_QWORD *)(v31 + 24) = v30;
        v57 = sub_23AA956C8;
        v58 = v31;
        aBlock = (id)MEMORY[0x24BDAC760];
        v54 = 1107296256;
        v55 = sub_23AA9432C;
        v56 = &block_descriptor_320;
        v32 = _Block_copy(&aBlock);
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release();
        aBlock = 0;
        v33 = objc_msgSend(v11, sel_executeSwift_error_, v32, &aBlock);
        _Block_release(v32);
        v34 = aBlock;
        v35 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v35 & 1) == 0)
        {
          if (!v33)
          {
            sub_23B1C587C();

            swift_willThrow();
LABEL_21:
            swift_release();
            goto LABEL_22;
          }
          v36 = (_QWORD *)swift_allocObject();
          v36[2] = v51;
          v36[3] = a2;
          v36[4] = v6;
          v37 = swift_allocObject();
          *(_QWORD *)(v37 + 16) = sub_23AEF5EFC;
          *(_QWORD *)(v37 + 24) = v36;
          v57 = sub_23AA956C8;
          v58 = v37;
          aBlock = (id)MEMORY[0x24BDAC760];
          v54 = 1107296256;
          v55 = sub_23AA9432C;
          v56 = &block_descriptor_330;
          v38 = _Block_copy(&aBlock);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_release();
          aBlock = 0;
          v39 = objc_msgSend(v52, sel_executeSwift_error_, v38, &aBlock);
          _Block_release(v38);
          v40 = aBlock;
          v41 = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((v41 & 1) == 0)
          {
            if (!v39)
            {
              sub_23B1C587C();

              swift_willThrow();
LABEL_20:
              swift_release();
              goto LABEL_21;
            }
            v42 = (_QWORD *)swift_allocObject();
            v42[2] = v51;
            v42[3] = a2;
            v42[4] = v6;
            v43 = swift_allocObject();
            *(_QWORD *)(v43 + 16) = sub_23AEF5F20;
            *(_QWORD *)(v43 + 24) = v42;
            v57 = sub_23AA956C8;
            v58 = v43;
            aBlock = (id)MEMORY[0x24BDAC760];
            v54 = 1107296256;
            v55 = sub_23AA9432C;
            v56 = &block_descriptor_340;
            v44 = _Block_copy(&aBlock);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            swift_release();
            aBlock = 0;
            v45 = objc_msgSend(v52, sel_executeSwift_error_, v44, &aBlock);
            _Block_release(v44);
            v46 = aBlock;
            v47 = swift_isEscapingClosureAtFileLocation();
            swift_release();
            if ((v47 & 1) == 0)
            {
              if ((v45 & 1) != 0)
              {
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                return swift_release();
              }
              sub_23B1C587C();

              swift_willThrow();
              swift_release();
              goto LABEL_20;
            }
LABEL_30:
            __break(1u);
          }
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  sub_23B1C587C();

  swift_willThrow();
  return swift_release();
}

uint64_t sub_23AEEB860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, unint64_t))
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  a5(779576686, 0xE400000000000000);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEBA78()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEBCF8()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEBEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, unint64_t))
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
  sub_23AAB5A28((unint64_t *)&qword_2542E74B0, &qword_2542E54E8, MEMORY[0x24BEE12B0]);
  sub_23B1C6338();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  a6(778333295, 0xE400000000000000);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  a6(779576686, 0xE400000000000000);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  a6(779576686, 0xE400000000000000);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  a6(779576686, 0xE400000000000000);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  a6(778333295, 0xE400000000000000);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEC2B0()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23AEF6484();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEC5B4()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEC864(uint64_t a1)
{
  sub_23B1C6EFC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return a1;
}

uint64_t sub_23AEEC8E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 32) & 1) == 0)
  {
    result = sub_23AEEB00C(0xD00000000000001DLL, 0x800000023B208C50, (uint64_t)&unk_250BDEC48, (uint64_t)sub_23AEEC96C, 0);
    if (!v1)
      return sub_23AEEB00C(0xD000000000000019, 0x800000023B208C70, (uint64_t)&unk_250BDEC88, (uint64_t)sub_23AEEC98C, 0);
  }
  return result;
}

uint64_t sub_23AEEC96C()
{
  return sub_23AEEC9AC();
}

uint64_t sub_23AEEC98C()
{
  return sub_23AEEC9AC();
}

uint64_t sub_23AEEC9AC()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AEECAC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_BYTE *)(v0 + 32) == 1)
  {
    result = sub_23AEEB00C(0xD000000000000021, 0x800000023B209500, (uint64_t)&unk_250BDECC8, (uint64_t)sub_23AEECB50, 0);
    if (!v1)
      return sub_23AEEB00C(0xD000000000000022, 0x800000023B209530, (uint64_t)&unk_250BDECF8, (uint64_t)sub_23AEECB58, 0);
  }
  return result;
}

uint64_t sub_23AEECB50()
{
  return sub_23AEECB60();
}

uint64_t sub_23AEECB58()
{
  return sub_23AEECB60();
}

uint64_t sub_23AEECB60()
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 40;
}

uint64_t sub_23AEECC38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  id v11;
  char isEscapingClosureAtFileLocation;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  id v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  id v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  id v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  unsigned int v34;
  id v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  unsigned __int8 v40;
  id v41;
  char v42;
  id v44;
  id aBlock;
  uint64_t v46;
  id (*v47)(uint64_t, void *);
  void *v48;
  uint64_t (*v49)();
  uint64_t v50;
  uint64_t v51;

  v3 = v2;
  v51 = *MEMORY[0x24BDAC8D0];
  v6 = *(void **)(v2 + qword_2542EDF00);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = v2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_23AEF5F74;
  *(_QWORD *)(v8 + 24) = v7;
  v49 = sub_23AA956C8;
  v50 = v8;
  aBlock = (id)MEMORY[0x24BDAC760];
  v46 = 1107296256;
  v47 = sub_23AA9432C;
  v48 = &block_descriptor_364;
  v9 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  v44 = v6;
  aBlock = 0;
  v10 = objc_msgSend(v6, sel_executeSwift_error_, v9, &aBlock);
  _Block_release(v9);
  v11 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v10)
  {
    v13 = (_QWORD *)swift_allocObject();
    v13[2] = a1;
    v13[3] = a2;
    v13[4] = v3;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = sub_23AEF5FC0;
    *(_QWORD *)(v14 + 24) = v13;
    v49 = sub_23AA956C8;
    v50 = v14;
    aBlock = (id)MEMORY[0x24BDAC760];
    v46 = 1107296256;
    v47 = sub_23AA9432C;
    v48 = &block_descriptor_374;
    v15 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v16 = objc_msgSend(v44, sel_executeSwift_error_, v15, &aBlock);
    _Block_release(v15);
    v17 = aBlock;
    v18 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v18 & 1) == 0)
    {
      if (!v16)
      {
        sub_23B1C587C();

        swift_willThrow();
LABEL_23:
        swift_release();
        return swift_release();
      }
      v19 = (_QWORD *)swift_allocObject();
      v19[2] = a1;
      v19[3] = a2;
      v19[4] = v3;
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = sub_23AEF6018;
      *(_QWORD *)(v20 + 24) = v19;
      v49 = sub_23AA956C8;
      v50 = v20;
      aBlock = (id)MEMORY[0x24BDAC760];
      v46 = 1107296256;
      v47 = sub_23AA9432C;
      v48 = &block_descriptor_384;
      v21 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_release();
      aBlock = 0;
      v22 = objc_msgSend(v44, sel_executeSwift_error_, v21, &aBlock);
      _Block_release(v21);
      v23 = aBlock;
      v24 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v24 & 1) == 0)
      {
        if (!v22)
        {
          sub_23B1C587C();

          swift_willThrow();
LABEL_22:
          swift_release();
          goto LABEL_23;
        }
        v25 = (_QWORD *)swift_allocObject();
        v25[2] = a1;
        v25[3] = a2;
        v25[4] = v3;
        v26 = swift_allocObject();
        *(_QWORD *)(v26 + 16) = sub_23AEF6064;
        *(_QWORD *)(v26 + 24) = v25;
        v49 = sub_23AA956C8;
        v50 = v26;
        aBlock = (id)MEMORY[0x24BDAC760];
        v46 = 1107296256;
        v47 = sub_23AA9432C;
        v48 = &block_descriptor_394;
        v27 = _Block_copy(&aBlock);
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_release();
        aBlock = 0;
        v28 = objc_msgSend(v44, sel_executeSwift_error_, v27, &aBlock);
        _Block_release(v27);
        v29 = aBlock;
        v30 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v30 & 1) == 0)
        {
          if (!v28)
          {
            sub_23B1C587C();

            swift_willThrow();
LABEL_21:
            swift_release();
            goto LABEL_22;
          }
          v31 = (_QWORD *)swift_allocObject();
          v31[2] = a1;
          v31[3] = a2;
          v31[4] = v3;
          v32 = swift_allocObject();
          *(_QWORD *)(v32 + 16) = sub_23AEF60BC;
          *(_QWORD *)(v32 + 24) = v31;
          v49 = sub_23AA956C8;
          v50 = v32;
          aBlock = (id)MEMORY[0x24BDAC760];
          v46 = 1107296256;
          v47 = sub_23AA9432C;
          v48 = &block_descriptor_404;
          v33 = _Block_copy(&aBlock);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_release();
          aBlock = 0;
          v34 = objc_msgSend(v44, sel_executeSwift_error_, v33, &aBlock);
          _Block_release(v33);
          v35 = aBlock;
          v36 = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((v36 & 1) == 0)
          {
            if (!v34)
            {
              sub_23B1C587C();

              swift_willThrow();
LABEL_20:
              swift_release();
              goto LABEL_21;
            }
            v37 = (_QWORD *)swift_allocObject();
            v37[2] = a1;
            v37[3] = a2;
            v37[4] = v3;
            v38 = swift_allocObject();
            *(_QWORD *)(v38 + 16) = sub_23AEF6144;
            *(_QWORD *)(v38 + 24) = v37;
            v49 = sub_23AA956C8;
            v50 = v38;
            aBlock = (id)MEMORY[0x24BDAC760];
            v46 = 1107296256;
            v47 = sub_23AA9432C;
            v48 = &block_descriptor_414;
            v39 = _Block_copy(&aBlock);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            swift_release();
            aBlock = 0;
            v40 = objc_msgSend(v44, sel_executeSwift_error_, v39, &aBlock);
            _Block_release(v39);
            v41 = aBlock;
            v42 = swift_isEscapingClosureAtFileLocation();
            swift_release();
            if ((v42 & 1) == 0)
            {
              if ((v40 & 1) != 0)
              {
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                return swift_release();
              }
              sub_23B1C587C();

              swift_willThrow();
              swift_release();
              goto LABEL_20;
            }
LABEL_30:
            __break(1u);
          }
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  sub_23B1C587C();

  swift_willThrow();
  return swift_release();
}

unint64_t sub_23AEED450()
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0xD000000000000018;
}

uint64_t sub_23AEED530()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEED620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  id v7;
  char isEscapingClosureAtFileLocation;
  uint64_t v9;
  void *v10;
  unsigned __int8 v11;
  id v12;
  char v13;
  id aBlock;
  uint64_t v15;
  id (*v16)(uint64_t, void *);
  void *v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  result = sub_23AEECC38(0xD00000000000001DLL, 0x800000023B208C50);
  if (!v1)
  {
    sub_23AEECC38(0xD000000000000019, 0x800000023B208C70);
    sub_23AEECC38(0xD000000000000016, 0x800000023B209310);
    v3 = *(void **)(v0 + qword_2542EDF00);
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = sub_23AEF5F3C;
    *(_QWORD *)(v4 + 24) = v0;
    v18 = sub_23AA956C8;
    v19 = v4;
    aBlock = (id)MEMORY[0x24BDAC760];
    v15 = 1107296256;
    v16 = sub_23AA9432C;
    v17 = &block_descriptor_347_0;
    v5 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v6 = objc_msgSend(v3, sel_executeSwift_error_, v5, &aBlock);
    _Block_release(v5);
    v7 = aBlock;
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      if (!v6)
      {
        sub_23B1C587C();

        swift_willThrow();
        return swift_release();
      }
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = sub_23AEF5F54;
      *(_QWORD *)(v9 + 24) = v0;
      v18 = sub_23AA956C8;
      v19 = v9;
      aBlock = (id)MEMORY[0x24BDAC760];
      v15 = 1107296256;
      v16 = sub_23AA9432C;
      v17 = &block_descriptor_354;
      v10 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      aBlock = 0;
      v11 = objc_msgSend(v3, sel_executeSwift_error_, v10, &aBlock);
      _Block_release(v10);
      v12 = aBlock;
      v13 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v13 & 1) == 0)
      {
        if ((v11 & 1) != 0)
          return swift_release_n();
        sub_23B1C587C();

        swift_willThrow();
        swift_release();
        return swift_release();
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23AEED938()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEED9F8()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEDAB8()
{
  uint64_t v0;
  uint64_t result;

  result = sub_23AEECC38(0xD000000000000012, 0x800000023B209420);
  if (!v0)
    return sub_23AEECC38(0xD000000000000018, 0x800000023B2093E0);
  return result;
}

uint64_t sub_23AEEDB10()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  id v10;
  char v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  id v15;
  char v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  void *v26;
  unsigned __int8 v27;
  id v28;
  char v29;
  id aBlock;
  uint64_t v32;
  id (*v33)(uint64_t, void *);
  void *v34;
  uint64_t (*v35)();
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + qword_2542EDF00);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = sub_23AEF5A08;
  *(_QWORD *)(v2 + 24) = v0;
  v35 = sub_23AA956C8;
  v36 = v2;
  aBlock = (id)MEMORY[0x24BDAC760];
  v32 = 1107296256;
  v33 = sub_23AA9432C;
  v34 = &block_descriptor_7_1;
  v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, &aBlock);
  _Block_release(v3);
  v5 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (!v4)
  {
    sub_23B1C587C();

    swift_willThrow();
    return swift_release();
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_23AEF5A20;
  *(_QWORD *)(v7 + 24) = v0;
  v35 = sub_23AA956C8;
  v36 = v7;
  aBlock = (id)MEMORY[0x24BDAC760];
  v32 = 1107296256;
  v33 = sub_23AA9432C;
  v34 = &block_descriptor_14_0;
  v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v9 = objc_msgSend(v1, sel_executeSwift_error_, v8, &aBlock);
  _Block_release(v8);
  v10 = aBlock;
  v11 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v11 & 1) != 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v9)
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = sub_23AEF5A38;
    *(_QWORD *)(v12 + 24) = v0;
    v35 = sub_23AA956C8;
    v36 = v12;
    aBlock = (id)MEMORY[0x24BDAC760];
    v32 = 1107296256;
    v33 = sub_23AA9432C;
    v34 = &block_descriptor_21_0;
    v13 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v14 = objc_msgSend(v1, sel_executeSwift_error_, v13, &aBlock);
    _Block_release(v13);
    v15 = aBlock;
    v16 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v16 & 1) == 0)
    {
      if (!v14)
        goto LABEL_16;
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = sub_23AEF5A78;
      *(_QWORD *)(v17 + 24) = v0;
      v35 = sub_23AA956C8;
      v36 = v17;
      aBlock = (id)MEMORY[0x24BDAC760];
      v32 = 1107296256;
      v33 = sub_23AA9432C;
      v34 = &block_descriptor_28_0;
      v18 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      aBlock = 0;
      v19 = objc_msgSend(v1, sel_executeSwift_error_, v18, &aBlock);
      _Block_release(v18);
      v15 = aBlock;
      v20 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v20 & 1) == 0)
      {
        if (!v19)
          goto LABEL_16;
        v21 = swift_allocObject();
        *(_QWORD *)(v21 + 16) = sub_23AEF5A90;
        *(_QWORD *)(v21 + 24) = v0;
        v35 = sub_23AA956C8;
        v36 = v21;
        aBlock = (id)MEMORY[0x24BDAC760];
        v32 = 1107296256;
        v33 = sub_23AA9432C;
        v34 = &block_descriptor_35_0;
        v22 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        swift_release();
        aBlock = 0;
        v23 = objc_msgSend(v1, sel_executeSwift_error_, v22, &aBlock);
        _Block_release(v22);
        v15 = aBlock;
        v24 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v24 & 1) == 0)
        {
          if (v23)
          {
            v25 = swift_allocObject();
            *(_QWORD *)(v25 + 16) = sub_23AEF5AA8;
            *(_QWORD *)(v25 + 24) = v0;
            v35 = sub_23AA956C8;
            v36 = v25;
            aBlock = (id)MEMORY[0x24BDAC760];
            v32 = 1107296256;
            v33 = sub_23AA9432C;
            v34 = &block_descriptor_42_0;
            v26 = _Block_copy(&aBlock);
            swift_retain();
            swift_retain();
            swift_release();
            aBlock = 0;
            v27 = objc_msgSend(v1, sel_executeSwift_error_, v26, &aBlock);
            _Block_release(v26);
            v28 = aBlock;
            v29 = swift_isEscapingClosureAtFileLocation();
            swift_release();
            if ((v29 & 1) == 0)
            {
              if ((v27 & 1) != 0)
                return swift_release_n();
              sub_23B1C587C();

              swift_willThrow();
              goto LABEL_18;
            }
LABEL_25:
            __break(1u);
          }
LABEL_16:
          sub_23B1C587C();

          swift_willThrow();
LABEL_18:
          swift_release_n();
          return swift_release();
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  sub_23B1C587C();

  swift_willThrow();
  swift_release();
  return swift_release();
}

uint64_t sub_23AEEE1DC()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEE2D8()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEE3D4()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEE494()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

unint64_t sub_23AEEE554()
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0xD000000000000020;
}

uint64_t sub_23AEEE60C()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 32) & 1) == 0)
    return sub_23AEEB00C(0xD000000000000018, 0x800000023B2093E0, (uint64_t)&unk_250BDEC18, (uint64_t)sub_23AEEC864, 0);
  return result;
}

uint64_t sub_23AEEE654()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  _QWORD *v3;
  void *v4;
  unsigned int v5;
  id v6;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  swift_getAssociatedTypeWitness();
  result = swift_dynamicCastMetatype();
  if (result)
  {
    v2 = *(void **)(v0 + qword_2542EDF00);
    v3 = (_QWORD *)swift_allocObject();
    v3[2] = sub_23AEF6250;
    v3[3] = v0;
    aBlock[4] = sub_23AA956C8;
    aBlock[5] = v3;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_491;
    v4 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v5 = objc_msgSend(v2, sel_executeSwift_error_, v4, aBlock);
    _Block_release(v4);
    v6 = aBlock[0];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    if (!v5)
    {
      sub_23B1C587C();

      swift_willThrow();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_23AEEE808()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEE910()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  uint64_t v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  char v11;
  id aBlock;
  uint64_t v14;
  id (*v15)(uint64_t, void *);
  void *v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + qword_2542EDF00);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = sub_23AEF6220;
  *(_QWORD *)(v2 + 24) = v0;
  v17 = sub_23AA956C8;
  v18 = v2;
  aBlock = (id)MEMORY[0x24BDAC760];
  v14 = 1107296256;
  v15 = sub_23AA9432C;
  v16 = &block_descriptor_477;
  v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, &aBlock);
  _Block_release(v3);
  v5 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (!v4)
  {
    sub_23B1C587C();

    swift_willThrow();
    return swift_release();
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_23AEF6238;
  *(_QWORD *)(v7 + 24) = v0;
  v17 = sub_23AA956C8;
  v18 = v7;
  aBlock = (id)MEMORY[0x24BDAC760];
  v14 = 1107296256;
  v15 = sub_23AA9432C;
  v16 = &block_descriptor_484;
  v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v9 = objc_msgSend(v1, sel_executeSwift_error_, v8, &aBlock);
  _Block_release(v8);
  v10 = aBlock;
  v11 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v11 & 1) != 0)
LABEL_10:
    __break(1u);
  if ((v9 & 1) != 0)
    return swift_release_n();
  sub_23B1C587C();

  swift_willThrow();
  swift_release();
  return swift_release();
}

uint64_t sub_23AEEEBB8()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEEC78()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEED80()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  unsigned __int8 v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + qword_2542EDF00);
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = sub_23AEF6208;
  v2[3] = v0;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v2;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_470;
  v3 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, aBlock);
  _Block_release(v3);
  v5 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if ((v4 & 1) == 0)
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  return swift_release();
}

uint64_t sub_23AEEEF00()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEF00C()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  unsigned __int8 v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + qword_2542EDF00);
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = sub_23AEF61F0;
  v2[3] = v0;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v2;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_463;
  v3 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, aBlock);
  _Block_release(v3);
  v5 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if ((v4 & 1) == 0)
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  return swift_release();
}

uint64_t sub_23AEEF18C()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

void sub_23AEEF24C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  id v10;
  char v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  id v15;
  char v16;
  id aBlock;
  uint64_t v18;
  id (*v19)(uint64_t, void *);
  void *v20;
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v1 = *(void **)(v0 + qword_2542EDF00);
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = sub_23AEF61A8;
    *(_QWORD *)(v2 + 24) = v0;
    v21 = sub_23AA956C8;
    v22 = v2;
    aBlock = (id)MEMORY[0x24BDAC760];
    v18 = 1107296256;
    v19 = sub_23AA9432C;
    v20 = &block_descriptor_442;
    v3 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, &aBlock);
    _Block_release(v3);
    v5 = aBlock;
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      if (!v4)
      {
        sub_23B1C587C();

        swift_willThrow();
        goto LABEL_12;
      }
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = sub_23AEF61C0;
      *(_QWORD *)(v7 + 24) = v0;
      v21 = sub_23AA956C8;
      v22 = v7;
      aBlock = (id)MEMORY[0x24BDAC760];
      v18 = 1107296256;
      v19 = sub_23AA9432C;
      v20 = &block_descriptor_449;
      v8 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      aBlock = 0;
      v9 = objc_msgSend(v1, sel_executeSwift_error_, v8, &aBlock);
      _Block_release(v8);
      v10 = aBlock;
      v11 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v11 & 1) == 0)
      {
        if (v9)
        {
          v12 = swift_allocObject();
          *(_QWORD *)(v12 + 16) = sub_23AEF61D8;
          *(_QWORD *)(v12 + 24) = v0;
          v21 = sub_23AA956C8;
          v22 = v12;
          aBlock = (id)MEMORY[0x24BDAC760];
          v18 = 1107296256;
          v19 = sub_23AA9432C;
          v20 = &block_descriptor_456;
          v13 = _Block_copy(&aBlock);
          swift_retain();
          swift_retain();
          swift_release();
          aBlock = 0;
          v14 = objc_msgSend(v1, sel_executeSwift_error_, v13, &aBlock);
          _Block_release(v13);
          v15 = aBlock;
          v16 = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((v16 & 1) == 0)
          {
            if (v14)
            {
              swift_release_n();
              return;
            }
            sub_23B1C587C();

            swift_willThrow();
            swift_release_n();
            goto LABEL_12;
          }
LABEL_16:
          __break(1u);
        }
        sub_23B1C587C();

        swift_willThrow();
        swift_release();
LABEL_12:
        swift_release();
        return;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
}

uint64_t sub_23AEEF60C()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEF6CC()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEF860()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEEFA48()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  unsigned __int8 v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + qword_2542EDF00);
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = sub_23AEF6190;
  v2[3] = v0;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v2;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_435;
  v3 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, aBlock);
  _Block_release(v3);
  v5 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if ((v4 & 1) == 0)
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  return swift_release();
}

uint64_t sub_23AEEFBC8()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

void sub_23AEEFC88()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  unsigned int v5;
  id v6;
  char isEscapingClosureAtFileLocation;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  id v11;
  char v12;
  id aBlock;
  uint64_t v14;
  id (*v15)(uint64_t, void *);
  void *v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(v0 + 32) & 1) == 0)
  {
    sub_23AEED620();
    if (!v1)
    {
      v2 = *(void **)(v0 + qword_2542EDF00);
      v3 = swift_allocObject();
      *(_QWORD *)(v3 + 16) = sub_23AEF6160;
      *(_QWORD *)(v3 + 24) = v0;
      v17 = sub_23AA956C8;
      v18 = v3;
      aBlock = (id)MEMORY[0x24BDAC760];
      v14 = 1107296256;
      v15 = sub_23AA9432C;
      v16 = &block_descriptor_421;
      v4 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      aBlock = 0;
      v5 = objc_msgSend(v2, sel_executeSwift_error_, v4, &aBlock);
      _Block_release(v4);
      v6 = aBlock;
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        if (!v5)
        {
          sub_23B1C587C();

          swift_willThrow();
LABEL_9:
          swift_release();
          return;
        }
        sub_23AEEC8E4();
        v8 = swift_allocObject();
        *(_QWORD *)(v8 + 16) = sub_23AEF6178;
        *(_QWORD *)(v8 + 24) = v0;
        v17 = sub_23AA956C8;
        v18 = v8;
        aBlock = (id)MEMORY[0x24BDAC760];
        v14 = 1107296256;
        v15 = sub_23AA9432C;
        v16 = &block_descriptor_428;
        v9 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        swift_release();
        aBlock = 0;
        v10 = objc_msgSend(v2, sel_executeSwift_error_, v9, &aBlock);
        _Block_release(v9);
        v11 = aBlock;
        v12 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v12 & 1) == 0)
        {
          if (v10)
          {
            swift_release_n();
            return;
          }
          sub_23B1C587C();

          swift_willThrow();
          swift_release();
          goto LABEL_9;
        }
      }
      __break(1u);
    }
  }
}

uint64_t sub_23AEEFF58()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF0018()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF0128()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  unsigned int v5;
  id v6;
  char isEscapingClosureAtFileLocation;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  id v11;
  char v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  id v20;
  char v21;
  uint64_t result;
  id aBlock;
  uint64_t v24;
  id (*v25)(uint64_t, void *);
  void *v26;
  uint64_t (*v27)();
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    v2 = *(void **)(v0 + qword_2542EDF00);
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = sub_23AEF5D74;
    *(_QWORD *)(v3 + 24) = v0;
    v27 = sub_23AA956C8;
    v28 = v3;
    aBlock = (id)MEMORY[0x24BDAC760];
    v24 = 1107296256;
    v25 = sub_23AA9432C;
    v26 = &block_descriptor_259;
    v4 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v5 = objc_msgSend(v2, sel_executeSwift_error_, v4, &aBlock);
    _Block_release(v4);
    v6 = aBlock;
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      if (!v5)
      {
        sub_23B1C587C();

        swift_willThrow();
        return swift_release();
      }
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 16) = sub_23AEF5D8C;
      *(_QWORD *)(v8 + 24) = v0;
      v27 = sub_23AA956C8;
      v28 = v8;
      aBlock = (id)MEMORY[0x24BDAC760];
      v24 = 1107296256;
      v25 = sub_23AA9432C;
      v26 = &block_descriptor_266;
      v9 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      aBlock = 0;
      v10 = objc_msgSend(v2, sel_executeSwift_error_, v9, &aBlock);
      _Block_release(v9);
      v11 = aBlock;
      v12 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v12 & 1) == 0)
      {
        if (!v10)
        {
LABEL_18:
          sub_23B1C587C();

          swift_willThrow();
          return swift_release_n();
        }
        sub_23AEECAC4();
        if (v1)
          return swift_release_n();
        v13 = swift_allocObject();
        *(_QWORD *)(v13 + 16) = sub_23AEF5DA4;
        *(_QWORD *)(v13 + 24) = v0;
        v27 = sub_23AA956C8;
        v28 = v13;
        aBlock = (id)MEMORY[0x24BDAC760];
        v24 = 1107296256;
        v25 = sub_23AA9432C;
        v26 = &block_descriptor_273;
        v14 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        swift_release();
        aBlock = 0;
        v15 = objc_msgSend(v2, sel_executeSwift_error_, v14, &aBlock);
        _Block_release(v14);
        v11 = aBlock;
        v16 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v16 & 1) == 0)
        {
          if (v15)
          {
            v17 = swift_allocObject();
            *(_QWORD *)(v17 + 16) = sub_23AEF5DEC;
            *(_QWORD *)(v17 + 24) = v0;
            v27 = sub_23AA956C8;
            v28 = v17;
            aBlock = (id)MEMORY[0x24BDAC760];
            v24 = 1107296256;
            v25 = sub_23AA9432C;
            v26 = &block_descriptor_280_0;
            v18 = _Block_copy(&aBlock);
            swift_retain();
            swift_retain();
            swift_release();
            aBlock = 0;
            v19 = objc_msgSend(v2, sel_executeSwift_error_, v18, &aBlock);
            _Block_release(v18);
            v20 = aBlock;
            v21 = swift_isEscapingClosureAtFileLocation();
            swift_release();
            if ((v21 & 1) == 0)
            {
              if (!v19)
              {
                sub_23B1C587C();

                swift_willThrow();
              }
              return swift_release_n();
            }
LABEL_25:
            __break(1u);
          }
          goto LABEL_18;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_24;
  }
  result = sub_23AEEDAB8();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + 32) & 1) == 0)
      sub_23AEEB00C(0xD000000000000018, 0x800000023B2093E0, (uint64_t)&unk_250BDEC18, (uint64_t)sub_23AEEC864, 0);
    sub_23AEED620();
    return sub_23AEEC8E4();
  }
  return result;
}

uint64_t sub_23AEF0664()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF0724()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF07E4()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF08E8()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  _QWORD *v3;
  void *v4;
  unsigned int v5;
  id v6;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  type metadata accessor for VFSItem(0);
  result = swift_dynamicCastMetatype();
  if (result)
  {
    v2 = *(void **)(v0 + qword_2542EDF00);
    v3 = (_QWORD *)swift_allocObject();
    v3[2] = sub_23AEF5D5C;
    v3[3] = v0;
    aBlock[4] = sub_23AA956C8;
    aBlock[5] = v3;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_252;
    v4 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v5 = objc_msgSend(v2, sel_executeSwift_error_, v4, aBlock);
    _Block_release(v4);
    v6 = aBlock[0];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    if (!v5)
    {
      sub_23B1C587C();

      swift_willThrow();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_23AEF0A88()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

void sub_23AEF0B48()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v1 = *(void **)(v0 + qword_2542EDF00);
    v2 = (_QWORD *)swift_allocObject();
    v2[2] = sub_23AEF5D44;
    v2[3] = v0;
    aBlock[4] = sub_23AA956C8;
    aBlock[5] = v2;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_245;
    v3 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, aBlock);
    _Block_release(v3);
    v5 = aBlock[0];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    if (!v4)
    {
      sub_23B1C587C();

      swift_willThrow();
    }
    swift_release();
  }
}

uint64_t sub_23AEF0CD4()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF0D94()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23AEF6B14();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF0F30()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  uint64_t v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  char v11;
  id aBlock;
  uint64_t v14;
  id (*v15)(uint64_t, void *);
  void *v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + qword_2542EDF00);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = sub_23AEF5D14;
  *(_QWORD *)(v2 + 24) = v0;
  v17 = sub_23AA956C8;
  v18 = v2;
  aBlock = (id)MEMORY[0x24BDAC760];
  v14 = 1107296256;
  v15 = sub_23AA9432C;
  v16 = &block_descriptor_231;
  v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, &aBlock);
  _Block_release(v3);
  v5 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (!v4)
  {
    sub_23B1C587C();

    swift_willThrow();
    return swift_release();
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_23AEF5D2C;
  *(_QWORD *)(v7 + 24) = v0;
  v17 = sub_23AA956C8;
  v18 = v7;
  aBlock = (id)MEMORY[0x24BDAC760];
  v14 = 1107296256;
  v15 = sub_23AA9432C;
  v16 = &block_descriptor_238;
  v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v9 = objc_msgSend(v1, sel_executeSwift_error_, v8, &aBlock);
  _Block_release(v8);
  v10 = aBlock;
  v11 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v11 & 1) != 0)
LABEL_10:
    __break(1u);
  if ((v9 & 1) != 0)
    return swift_release_n();
  sub_23B1C587C();

  swift_willThrow();
  swift_release();
  return swift_release();
}

uint64_t sub_23AEF11D8()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF1298()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

void sub_23AEF1358()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v1 = *(void **)(v0 + qword_2542EDF00);
    v2 = (_QWORD *)swift_allocObject();
    v2[2] = sub_23AEF5CFC;
    v2[3] = v0;
    aBlock[4] = sub_23AA956C8;
    aBlock[5] = v2;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_224;
    v3 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, aBlock);
    _Block_release(v3);
    v5 = aBlock[0];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    if (!v4)
    {
      sub_23B1C587C();

      swift_willThrow();
    }
    swift_release();
  }
}

uint64_t sub_23AEF14E4()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

void sub_23AEF15A4()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v1 = *(void **)(v0 + qword_2542EDF00);
    v2 = (_QWORD *)swift_allocObject();
    v2[2] = sub_23AEF5CE4;
    v2[3] = v0;
    aBlock[4] = sub_23AA956C8;
    aBlock[5] = v2;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_217_0;
    v3 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, aBlock);
    _Block_release(v3);
    v5 = aBlock[0];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    if (!v4)
    {
      sub_23B1C587C();

      swift_willThrow();
    }
    swift_release();
  }
}

uint64_t sub_23AEF1730()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

void sub_23AEF17F0()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v1 = *(void **)(v0 + qword_2542EDF00);
    v2 = (_QWORD *)swift_allocObject();
    v2[2] = sub_23AEF5CCC;
    v2[3] = v0;
    aBlock[4] = sub_23AA956C8;
    aBlock[5] = v2;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_210;
    v3 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, aBlock);
    _Block_release(v3);
    v5 = aBlock[0];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    if (!v4)
    {
      sub_23B1C587C();

      swift_willThrow();
    }
    swift_release();
  }
}

uint64_t sub_23AEF197C()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF1A3C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  id aBlock;
  uint64_t v9;
  id (*v10)(uint64_t, void *);
  void *v11;
  uint64_t (*v12)();
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v1 = *(id *)(v0 + qword_2542EDF00);
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = sub_23AEF5CB4;
    *(_QWORD *)(v2 + 24) = v0;
    v12 = sub_23AA956C8;
    v13 = v2;
    aBlock = (id)MEMORY[0x24BDAC760];
    v9 = 1107296256;
    v10 = sub_23AA9432C;
    v11 = &block_descriptor_203;
    v3 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, &aBlock);
    _Block_release(v3);
    v1 = aBlock;
    LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v3 & 1) == 0)
      goto LABEL_5;
    __break(1u);
  }
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = sub_23AEF5C9C;
  *(_QWORD *)(v5 + 24) = v0;
  v12 = sub_23AA956C8;
  v13 = v5;
  aBlock = (id)MEMORY[0x24BDAC760];
  v9 = 1107296256;
  v10 = sub_23AA9432C;
  v11 = &block_descriptor_196;
  v6 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v6, &aBlock);
  _Block_release(v6);
  v1 = aBlock;
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v6 & 1) != 0)
    __break(1u);
LABEL_5:
  if (!v4)
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  return swift_release();
}

uint64_t sub_23AEF1CB4()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF1D74()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF1E34()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  id v10;
  char v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  id v15;
  char v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  void *v30;
  unsigned __int8 v31;
  id v32;
  char v33;
  uint64_t (*v35)();
  id aBlock;
  uint64_t v37;
  id (*v38)(uint64_t, void *);
  void *v39;
  uint64_t (*v40)();
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + qword_2542EDF00);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = sub_23AEF5B54;
  *(_QWORD *)(v2 + 24) = v0;
  v40 = sub_23AA956C8;
  v41 = v2;
  aBlock = (id)MEMORY[0x24BDAC760];
  v37 = 1107296256;
  v38 = sub_23AA9432C;
  v39 = &block_descriptor_147;
  v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, &aBlock);
  _Block_release(v3);
  v5 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (!v4)
  {
    sub_23B1C587C();

    swift_willThrow();
LABEL_19:
    v35 = 0;
    goto LABEL_20;
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_23AEF5B6C;
  *(_QWORD *)(v7 + 24) = v0;
  v40 = sub_23AA956C8;
  v41 = v7;
  aBlock = (id)MEMORY[0x24BDAC760];
  v37 = 1107296256;
  v38 = sub_23AA9432C;
  v39 = &block_descriptor_154;
  v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v9 = objc_msgSend(v1, sel_executeSwift_error_, v8, &aBlock);
  _Block_release(v8);
  v10 = aBlock;
  v11 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v11 & 1) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (!v9)
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
    goto LABEL_19;
  }
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_23AEF5B84;
  *(_QWORD *)(v12 + 24) = v0;
  v40 = sub_23AA956C8;
  v41 = v12;
  aBlock = (id)MEMORY[0x24BDAC760];
  v37 = 1107296256;
  v38 = sub_23AA9432C;
  v39 = &block_descriptor_161;
  v13 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v14 = objc_msgSend(v1, sel_executeSwift_error_, v13, &aBlock);
  _Block_release(v13);
  v15 = aBlock;
  v16 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v16 & 1) != 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!v14)
  {
LABEL_18:
    sub_23B1C587C();

    swift_willThrow();
    swift_release_n();
    goto LABEL_19;
  }
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_23AEF5B24;
  *(_QWORD *)(v17 + 24) = v0;
  v40 = sub_23AA956C8;
  v41 = v17;
  aBlock = (id)MEMORY[0x24BDAC760];
  v37 = 1107296256;
  v38 = sub_23AA9432C;
  v39 = &block_descriptor_168_0;
  v18 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v19 = objc_msgSend(v1, sel_executeSwift_error_, v18, &aBlock);
  _Block_release(v18);
  v15 = aBlock;
  v20 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v20 & 1) != 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (!v19)
    goto LABEL_18;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_23AEF5B3C;
  *(_QWORD *)(v21 + 24) = v0;
  v40 = sub_23AA956C8;
  v41 = v21;
  aBlock = (id)MEMORY[0x24BDAC760];
  v37 = 1107296256;
  v38 = sub_23AA9432C;
  v39 = &block_descriptor_175_0;
  v22 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v23 = objc_msgSend(v1, sel_executeSwift_error_, v22, &aBlock);
  _Block_release(v22);
  v15 = aBlock;
  v24 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v24 & 1) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (!v23)
    goto LABEL_18;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = sub_23AEF5AF4;
  *(_QWORD *)(v25 + 24) = v0;
  v40 = sub_23AA956C8;
  v41 = v25;
  aBlock = (id)MEMORY[0x24BDAC760];
  v37 = 1107296256;
  v38 = sub_23AA9432C;
  v39 = &block_descriptor_182_0;
  v26 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v27 = objc_msgSend(v1, sel_executeSwift_error_, v26, &aBlock);
  _Block_release(v26);
  v15 = aBlock;
  v28 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v28 & 1) != 0)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  if (!v27)
    goto LABEL_18;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = sub_23AEF5B0C;
  *(_QWORD *)(v29 + 24) = v0;
  v40 = sub_23AA956C8;
  v41 = v29;
  aBlock = (id)MEMORY[0x24BDAC760];
  v37 = 1107296256;
  v38 = sub_23AA9432C;
  v39 = &block_descriptor_189;
  v30 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v31 = objc_msgSend(v1, sel_executeSwift_error_, v30, &aBlock);
  _Block_release(v30);
  v32 = aBlock;
  v33 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v33 & 1) != 0)
    goto LABEL_28;
  if ((v31 & 1) != 0)
    return swift_release_n();
  sub_23B1C587C();

  swift_willThrow();
  swift_release_n();
  v35 = sub_23AEF5B0C;
LABEL_20:
  swift_release();
  return sub_23AAB7948((uint64_t)v35);
}

uint64_t sub_23AEF262C()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF26EC()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF27AC()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF286C()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF292C()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF29F0()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF2AB0()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF2B74()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  uint64_t v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  char v11;
  id aBlock;
  uint64_t v14;
  id (*v15)(uint64_t, void *);
  void *v16;
  uint64_t (*v17)();
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + qword_2542EDF00);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = sub_23AEF5B54;
  *(_QWORD *)(v2 + 24) = v0;
  v17 = sub_23AA956C8;
  v18 = v2;
  aBlock = (id)MEMORY[0x24BDAC760];
  v14 = 1107296256;
  v15 = sub_23AA9432C;
  v16 = &block_descriptor_133;
  v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, &aBlock);
  _Block_release(v3);
  v5 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (!v4)
  {
    sub_23B1C587C();

    swift_willThrow();
    return swift_release();
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_23AEF5B0C;
  *(_QWORD *)(v7 + 24) = v0;
  v17 = sub_23AA956C8;
  v18 = v7;
  aBlock = (id)MEMORY[0x24BDAC760];
  v14 = 1107296256;
  v15 = sub_23AA9432C;
  v16 = &block_descriptor_140;
  v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v9 = objc_msgSend(v1, sel_executeSwift_error_, v8, &aBlock);
  _Block_release(v8);
  v10 = aBlock;
  v11 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v11 & 1) != 0)
LABEL_10:
    __break(1u);
  if ((v9 & 1) != 0)
    return swift_release_n();
  sub_23B1C587C();

  swift_willThrow();
  swift_release();
  return swift_release();
}

uint64_t sub_23AEF2E1C()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  unsigned __int8 v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + qword_2542EDF00);
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = sub_23AEF5BF4;
  v2[3] = v0;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v2;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_126;
  v3 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, aBlock);
  _Block_release(v3);
  v5 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if ((v4 & 1) == 0)
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  return swift_release();
}

uint64_t sub_23AEF2F9C()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF305C()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  unsigned __int8 v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + qword_2542EDF00);
  v2 = (_QWORD *)swift_allocObject();
  v2[2] = sub_23AEF5B0C;
  v2[3] = v0;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v2;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_119_0;
  v3 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, aBlock);
  _Block_release(v3);
  v5 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if ((v4 & 1) == 0)
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  return swift_release();
}

uint64_t sub_23AEF31DC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  _QWORD *v9;
  void *v10;
  unsigned int v11;
  id v12;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  v1 = v0;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 112))();
  Strong = swift_weakLoadStrong();
  if (!Strong)
LABEL_10:
    __break(1u);
  v4 = *(_QWORD *)(Strong + 40);
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(v4 + 16);
  swift_retain();
  v6 = swift_release();
  LOBYTE(v4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 112))(v6);
  result = swift_release();
  if ((v4 & 1) == 0 || (v2 & 1) != 0)
    return result;
  v8 = *(void **)(v1 + qword_2542EDF00);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = sub_23AEF5BCC;
  v9[3] = v1;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v9;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_112;
  v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v11 = objc_msgSend(v8, sel_executeSwift_error_, v10, aBlock);
  _Block_release(v10);
  v12 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (!v11)
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  return swift_release();
}

uint64_t sub_23AEF33DC()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

void sub_23AEF34E4()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    v1 = *(void **)(v0 + qword_2542EDF00);
    v2 = (_QWORD *)swift_allocObject();
    v2[2] = sub_23AEF5BB4;
    v2[3] = v0;
    aBlock[4] = sub_23AA956C8;
    aBlock[5] = v2;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_105_0;
    v3 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, aBlock);
    _Block_release(v3);
    v5 = aBlock[0];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    if (!v4)
    {
      sub_23B1C587C();

      swift_willThrow();
    }
    swift_release();
  }
}

uint64_t sub_23AEF3670()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF3778()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  id v10;
  char v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  id v15;
  char v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  void *v30;
  unsigned int v31;
  id v32;
  char v33;
  uint64_t v34;
  void *v35;
  unsigned __int8 v36;
  id v37;
  char v38;
  uint64_t (*v40)();
  uint64_t (*v41)();
  id aBlock;
  uint64_t v43;
  id (*v44)(uint64_t, void *);
  void *v45;
  uint64_t (*v46)();
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + qword_2542EDF00);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = sub_23AEF5AF4;
  *(_QWORD *)(v2 + 24) = v0;
  v46 = sub_23AA956C8;
  v47 = v2;
  aBlock = (id)MEMORY[0x24BDAC760];
  v43 = 1107296256;
  v44 = sub_23AA9432C;
  v45 = &block_descriptor_49_0;
  v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, &aBlock);
  _Block_release(v3);
  v5 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (!v4)
  {
    sub_23B1C587C();

    swift_willThrow();
    goto LABEL_21;
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_23AEF5B0C;
  *(_QWORD *)(v7 + 24) = v0;
  v46 = sub_23AA956C8;
  v47 = v7;
  aBlock = (id)MEMORY[0x24BDAC760];
  v43 = 1107296256;
  v44 = sub_23AA9432C;
  v45 = &block_descriptor_56_0;
  v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v9 = objc_msgSend(v1, sel_executeSwift_error_, v8, &aBlock);
  _Block_release(v8);
  v10 = aBlock;
  v11 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v11 & 1) != 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v9)
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = sub_23AEF5B24;
    *(_QWORD *)(v12 + 24) = v0;
    v46 = sub_23AA956C8;
    v47 = v12;
    aBlock = (id)MEMORY[0x24BDAC760];
    v43 = 1107296256;
    v44 = sub_23AA9432C;
    v45 = &block_descriptor_63_0;
    v13 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v14 = objc_msgSend(v1, sel_executeSwift_error_, v13, &aBlock);
    _Block_release(v13);
    v15 = aBlock;
    v16 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v16 & 1) == 0)
    {
      if (!v14)
        goto LABEL_20;
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = sub_23AEF5B3C;
      *(_QWORD *)(v17 + 24) = v0;
      v46 = sub_23AA956C8;
      v47 = v17;
      aBlock = (id)MEMORY[0x24BDAC760];
      v43 = 1107296256;
      v44 = sub_23AA9432C;
      v45 = &block_descriptor_70_2;
      v18 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      aBlock = 0;
      v19 = objc_msgSend(v1, sel_executeSwift_error_, v18, &aBlock);
      _Block_release(v18);
      v15 = aBlock;
      v20 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v20 & 1) == 0)
      {
        if (!v19)
          goto LABEL_20;
        v21 = swift_allocObject();
        *(_QWORD *)(v21 + 16) = sub_23AEF5B54;
        *(_QWORD *)(v21 + 24) = v0;
        v46 = sub_23AA956C8;
        v47 = v21;
        aBlock = (id)MEMORY[0x24BDAC760];
        v43 = 1107296256;
        v44 = sub_23AA9432C;
        v45 = &block_descriptor_77;
        v22 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        swift_release();
        aBlock = 0;
        v23 = objc_msgSend(v1, sel_executeSwift_error_, v22, &aBlock);
        _Block_release(v22);
        v15 = aBlock;
        v24 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v24 & 1) == 0)
        {
          if (v23)
          {
            v25 = swift_allocObject();
            *(_QWORD *)(v25 + 16) = sub_23AEF5B6C;
            *(_QWORD *)(v25 + 24) = v0;
            v46 = sub_23AA956C8;
            v47 = v25;
            aBlock = (id)MEMORY[0x24BDAC760];
            v43 = 1107296256;
            v44 = sub_23AA9432C;
            v45 = &block_descriptor_84;
            v26 = _Block_copy(&aBlock);
            swift_retain();
            swift_retain();
            swift_release();
            aBlock = 0;
            v27 = objc_msgSend(v1, sel_executeSwift_error_, v26, &aBlock);
            _Block_release(v26);
            v15 = aBlock;
            v28 = swift_isEscapingClosureAtFileLocation();
            swift_release();
            if ((v28 & 1) == 0)
            {
              if (v27)
              {
                v29 = swift_allocObject();
                *(_QWORD *)(v29 + 16) = sub_23AEF5B84;
                *(_QWORD *)(v29 + 24) = v0;
                v46 = sub_23AA956C8;
                v47 = v29;
                aBlock = (id)MEMORY[0x24BDAC760];
                v43 = 1107296256;
                v44 = sub_23AA9432C;
                v45 = &block_descriptor_91;
                v30 = _Block_copy(&aBlock);
                swift_retain();
                swift_retain();
                swift_release();
                aBlock = 0;
                v31 = objc_msgSend(v1, sel_executeSwift_error_, v30, &aBlock);
                _Block_release(v30);
                v32 = aBlock;
                v33 = swift_isEscapingClosureAtFileLocation();
                swift_release();
                if ((v33 & 1) == 0)
                {
                  if (!v31)
                  {
                    sub_23B1C587C();

                    swift_willThrow();
                    swift_release_n();
                    v41 = 0;
LABEL_25:
                    v40 = sub_23AEF5B84;
                    goto LABEL_22;
                  }
                  v34 = swift_allocObject();
                  *(_QWORD *)(v34 + 16) = sub_23AEF5B9C;
                  *(_QWORD *)(v34 + 24) = v0;
                  v46 = sub_23AA956C8;
                  v47 = v34;
                  aBlock = (id)MEMORY[0x24BDAC760];
                  v43 = 1107296256;
                  v44 = sub_23AA9432C;
                  v45 = &block_descriptor_98;
                  v35 = _Block_copy(&aBlock);
                  swift_retain();
                  swift_retain();
                  swift_release();
                  aBlock = 0;
                  v36 = objc_msgSend(v1, sel_executeSwift_error_, v35, &aBlock);
                  _Block_release(v35);
                  v37 = aBlock;
                  v38 = swift_isEscapingClosureAtFileLocation();
                  swift_release();
                  if ((v38 & 1) == 0)
                  {
                    if ((v36 & 1) != 0)
                      return swift_release_n();
                    sub_23B1C587C();

                    swift_willThrow();
                    swift_release_n();
                    v41 = sub_23AEF5B9C;
                    goto LABEL_25;
                  }
LABEL_33:
                  __break(1u);
                }
LABEL_32:
                __break(1u);
                goto LABEL_33;
              }
              goto LABEL_20;
            }
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
LABEL_20:
          sub_23B1C587C();

          swift_willThrow();
          swift_release_n();
          goto LABEL_21;
        }
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  sub_23B1C587C();

  swift_willThrow();
  swift_release();
LABEL_21:
  v40 = 0;
  v41 = 0;
LABEL_22:
  swift_release();
  sub_23AAB7948((uint64_t)v40);
  return sub_23AAB7948((uint64_t)v41);
}

uint64_t sub_23AEF40A8()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

void sub_23AEF4168()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(v0 + 32) & 1) == 0)
  {
    v1 = *(void **)(v0 + qword_2542EDF00);
    v2 = (_QWORD *)swift_allocObject();
    v2[2] = sub_23AEF59F0;
    v2[3] = v0;
    aBlock[4] = sub_23AA698D4;
    aBlock[5] = v2;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_18;
    v3 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, aBlock);
    _Block_release(v3);
    v5 = aBlock[0];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    if (!v4)
    {
      sub_23B1C587C();

      swift_willThrow();
    }
    swift_release();
  }
}

uint64_t sub_23AEF42F0()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF43F8()
{
  return sub_23AEE9D9C();
}

uint64_t sub_23AEF4418()
{
  return sub_23AEEE60C();
}

uint64_t sub_23AEF4438()
{
  return sub_23AEEE654();
}

uint64_t sub_23AEF4458()
{
  return sub_23AEEE910();
}

uint64_t sub_23AEF4478()
{
  return sub_23AEEED80();
}

uint64_t sub_23AEF4498()
{
  return sub_23AEEF00C();
}

void sub_23AEF44B8()
{
  sub_23AEEF24C();
}

uint64_t sub_23AEF44D8()
{
  return sub_23AEEFA48();
}

void sub_23AEF44F8()
{
  sub_23AEEFC88();
}

uint64_t sub_23AEF4518()
{
  return sub_23AEF0128();
}

uint64_t sub_23AEF4538()
{
  return sub_23AEF08E8();
}

void sub_23AEF4558()
{
  sub_23AEF0B48();
}

uint64_t sub_23AEF4578()
{
  return sub_23AEF0F30();
}

void sub_23AEF4598()
{
  sub_23AEF1358();
}

void sub_23AEF45B8()
{
  sub_23AEF15A4();
}

void sub_23AEF45D8()
{
  sub_23AEF17F0();
}

uint64_t sub_23AEF45F8()
{
  return sub_23AEF1A3C();
}

uint64_t sub_23AEF4618()
{
  return sub_23AEF1E34();
}

uint64_t sub_23AEF4638()
{
  return sub_23AEF2B74();
}

uint64_t sub_23AEF4658()
{
  return sub_23AEF2E1C();
}

uint64_t sub_23AEF4678()
{
  return sub_23AEF305C();
}

uint64_t sub_23AEF4698()
{
  return sub_23AEF31DC();
}

void sub_23AEF46B8()
{
  sub_23AEF34E4();
}

uint64_t sub_23AEF46D8()
{
  return sub_23AEF3778();
}

uint64_t sub_23AEF46F8()
{
  return sub_23AEEDB10();
}

void sub_23AEF4718()
{
  sub_23AEF4168();
}

void sub_23AEF4738(uint64_t a1, void (*a2)(id, void *), uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(id, void *);
  uint64_t v33;
  uint64_t v34;
  id aBlock[7];

  v4 = v3;
  v32 = a2;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v7 = sub_23B1C5E4C();
  v33 = *(_QWORD *)(v7 - 8);
  v34 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(a1 + qword_2542EDF00);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = sub_23AEF6D90;
  v11[3] = a1;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v11;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_566_0;
  v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v13 = objc_msgSend(v10, sel_fetchSwift_error_, v12, aBlock);
  _Block_release(v12);
  v14 = aBlock[0];
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v10 & 1) != 0)
    __break(1u);
  if (v13)
  {
    v15 = objc_msgSend(v13, sel_next);
    if ((_DWORD)v15)
    {
      v30 = a1;
      v31 = a3;
      while (1)
      {
        v17 = (void *)MEMORY[0x23B8601A8](v15, v16);
        v18 = v13;
        v19 = objc_msgSend(v18, sel_stringAtIndex_, 0, v30, v31);
        if (!v19)
        {
          sub_23B1C63E0();
          v19 = (id)sub_23B1C63BC();
          swift_bridgeObjectRelease();
        }

        if ((objc_msgSend(v18, sel_isNullAtIndex_, 1) & 1) != 0)
          goto LABEL_12;
        v20 = objc_msgSend(v18, sel_dataAtIndex_, 1);
        v21 = sub_23B1C5AD4();
        v23 = v22;

        v24 = sub_23AD3D744(v21, v23);
        if (v4)
          break;
        v29 = (void *)v24;
        sub_23AAAE53C(v21, v23);
        if (!v29)
          goto LABEL_12;
        v32(v19, v29);

LABEL_6:
        objc_autoreleasePoolPop(v17);
        v15 = objc_msgSend(v18, sel_next);
        if ((v15 & 1) == 0)
          goto LABEL_17;
      }
      sub_23AAAE53C(v21, v23);

      v4 = 0;
LABEL_12:
      v25 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      v26 = sub_23B1C5E40();
      v27 = sub_23B1C6AA0();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v28 = 0;
        _os_log_impl(&dword_23AA66000, v26, v27, "Unable to parse uploading error", v28, 2u);
        MEMORY[0x23B8614BC](v28, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v34);
      goto LABEL_6;
    }
LABEL_17:
    swift_release();
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
    swift_release();
  }
}

uint64_t sub_23AEF4B3C()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF4BFC(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = objc_msgSend(a1, sel_bindLongParameter_, a3);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0x205443454C4553;
}

uint64_t sub_23AEF4D54()
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0x205443454C4553;
}

_QWORD *sub_23AEF4E34(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  id v10;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  v3 = v2;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = a1;
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = sub_23AEF6440;
  v7[3] = v6;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v7;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_559;
  v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v9 = objc_msgSend(a2, sel_fetchSwift_error_, v8, aBlock);
  _Block_release(v8);
  v10 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v9)
  {
    if ((objc_msgSend(v9, sel_next) & 1) != 0)
    {
      v7 = (_QWORD *)sub_23AAA43E4(v9, 0);
      swift_release();

    }
    else
    {
      swift_release();

      return 0;
    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v7;
}

uint64_t sub_23AEF503C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v5;
  id v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  void (*v10)(uint64_t *__return_ptr, _QWORD, const char *, uint64_t, uint64_t, _QWORD *(*)@<X0>(uint64_t@<X8>), _QWORD *, uint64_t);
  uint64_t v11;
  _QWORD v12[4];
  uint64_t v13;

  v3 = v2;
  v5 = *(void **)(v1 + qword_2542EDF10);
  if (v5)
  {
    v6 = v5;
    v7 = sub_23AEF4E34(a1, v6);
    if (!v2)
    {
      v9 = v7;

      return (uint64_t)v9;
    }

    v3 = 0;
  }
  result = swift_weakLoadStrong();
  if (result)
  {
    v9 = (_QWORD *)result;
    v12[2] = v1;
    v12[3] = a1;
    v10 = *(void (**)(uint64_t *__return_ptr, _QWORD, const char *, uint64_t, uint64_t, _QWORD *(*)@<X0>(uint64_t@<X8>), _QWORD *, uint64_t))(*(_QWORD *)MEMORY[0x24BDAC7A8](result) + 424);
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E7420);
    v10(&v13, 0, "lookup(byFileID:)", 17, 2, sub_23AEF6400, v12, v11);
    swift_release();
    if (!v3)
      return v13;
    return (uint64_t)v9;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23AEF5170(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  id v11;
  char isEscapingClosureAtFileLocation;
  id v13;
  unint64_t v14;
  id v15;
  id aBlock[7];

  v4 = v2;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v4;
  *(_QWORD *)(v7 + 24) = a1;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = sub_23AEF63BC;
  v8[3] = v7;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v8;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_549;
  v9 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v10 = objc_msgSend(a2, sel_fetchSwift_error_, v9, aBlock);
  _Block_release(v9);
  v11 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v10)
  {
    if ((objc_msgSend(v10, sel_next) & 1) != 0)
    {
      v13 = v10;
      v14 = sub_23AAA43E4(v13, 0);
      if (v3)
      {
        swift_release();

      }
      else
      {
        v8 = (_QWORD *)v14;

        v15 = objc_msgSend(v13, sel_stringAtIndex_, 1);
        sub_23B1C63E0();
        swift_release();

      }
    }
    else
    {
      swift_release();

      return 0;
    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v8;
}

uint64_t sub_23AEF53D4(void *a1)
{
  void *v2;
  id v3;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v2 = (void *)sub_23B1C7514();
  v3 = objc_msgSend(a1, sel_bindObjectParameter_, v2);

  sub_23B1C63E0();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AEF5538(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v5;
  id v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  void (*v10)(uint64_t *__return_ptr, _QWORD, const char *, uint64_t, uint64_t, _QWORD *(*)@<X0>(_QWORD *@<X8>), _QWORD *, uint64_t);
  uint64_t v11;
  _QWORD v12[4];
  uint64_t v13;

  v3 = v2;
  v5 = *(void **)(v1 + qword_2542EDF10);
  if (v5)
  {
    v6 = v5;
    v7 = sub_23AEF5170(a1, v6);
    if (!v2)
    {
      v9 = v7;

      return (uint64_t)v9;
    }

    v3 = 0;
  }
  result = swift_weakLoadStrong();
  if (result)
  {
    v9 = (_QWORD *)result;
    v12[2] = v1;
    v12[3] = a1;
    v10 = *(void (**)(uint64_t *__return_ptr, _QWORD, const char *, uint64_t, uint64_t, _QWORD *(*)@<X0>(_QWORD *@<X8>), _QWORD *, uint64_t))(*(_QWORD *)MEMORY[0x24BDAC7A8](result) + 424);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E6D78);
    v10(&v13, 0, "lookupLink(byFileID:)", 21, 2, sub_23AEF6358, v12, v11);
    swift_release();
    if (!v3)
      return v13;
    return (uint64_t)v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_23AEF5684(uint64_t a1)
{
  return sub_23AEF503C(a1);
}

uint64_t sub_23AEF5698(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_23AEF5538(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t sub_23AEF56C0(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unsigned __int8 v6;
  unsigned int v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  int v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v19 = a2;
  v20 = sub_23B1C5E4C();
  v3 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23AFA7870((unint64_t)objc_msgSend(a1, sel_integerAtIndex_, 0, v19));
  v7 = objc_msgSend(a1, sel_BOOLAtIndex_, 2);
  objc_msgSend(a1, sel_unsignedLongAtIndex_, 3);
  if (v6 != 4)
  {
    if (v7)
      __asm { BR              X10 }
    __asm { BR              X10 }
  }
  v8 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v9 = sub_23B1C5E40();
  v10 = sub_23B1C6AA0();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = v6;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    *(_DWORD *)v12 = 136315138;
    v22 = v13;
    v14 = 0x6B6E696C6D7973;
    if (v11 == 3)
      v14 = 0x7361696C61;
    v15 = 0xE700000000000000;
    if (v11 == 3)
      v15 = 0xE500000000000000;
    if (v11 == 4)
      v16 = 7104878;
    else
      v16 = v14;
    if (v11 == 4)
      v17 = 0xE300000000000000;
    else
      v17 = v15;
    v21 = sub_23AABEC68(v16, v17, &v22);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23AA66000, v9, v10, "Invalid object: %s cannot be dataless", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v13, -1, -1);
    MEMORY[0x23B8614BC](v12, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v20);
}

void sub_23AEF5944()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  id v7;
  _QWORD *v8;

  v6 = objc_msgSend(v1, *(SEL *)(v0 + 1568), 1);
  v7 = objc_msgSend(v1, *(SEL *)(v4 + 3280), 4);
  if (v3)
  {
    if (v6)
      *(_QWORD *)(*(_QWORD *)(v5 - 112) + 24) = v2;
    else
      *(_QWORD *)(*(_QWORD *)(v5 - 112) + 8) = v2;
  }
  else
  {
    v8 = *(_QWORD **)(v5 - 112);
    if (v6)
    {
      v8[2] = v2;
      v8[9] = v7;
    }
    else
    {
      *v8 = v2;
      v8[8] = v7;
    }
  }
  JUMPOUT(0x23AEF58D4);
}

uint64_t sub_23AEF59F0()
{
  return sub_23AEF42F0();
}

uint64_t sub_23AEF59F8()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5A08()
{
  return sub_23AEEE1DC();
}

uint64_t sub_23AEF5A10()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5A20()
{
  return sub_23AEEE2D8();
}

uint64_t sub_23AEF5A28()
{
  return swift_deallocObject();
}

unint64_t sub_23AEF5A38()
{
  return sub_23AEEE554();
}

uint64_t sub_23AEF5A68()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5A78()
{
  return sub_23AEEE3D4();
}

uint64_t sub_23AEF5A80()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5A90()
{
  return sub_23AEEE494();
}

uint64_t sub_23AEF5A98()
{
  return swift_deallocObject();
}

unint64_t sub_23AEF5AA8()
{
  return sub_23AEEE554();
}

uint64_t sub_23AEF5AE4()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5AF4()
{
  return sub_23AEF29F0();
}

uint64_t sub_23AEF5AFC()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5B0C()
{
  return sub_23AEF2AB0();
}

uint64_t sub_23AEF5B14()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5B24()
{
  return sub_23AEF286C();
}

uint64_t sub_23AEF5B2C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5B3C()
{
  return sub_23AEF292C();
}

uint64_t sub_23AEF5B44()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5B54()
{
  return sub_23AEF262C();
}

uint64_t sub_23AEF5B5C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5B6C()
{
  return sub_23AEF26EC();
}

uint64_t sub_23AEF5B74()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5B84()
{
  return sub_23AEF27AC();
}

uint64_t sub_23AEF5B8C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5B9C()
{
  return sub_23AEF40A8();
}

uint64_t sub_23AEF5BA4()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5BB4()
{
  return sub_23AEF3670();
}

uint64_t sub_23AEF5BBC()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5BCC()
{
  return sub_23AEF33DC();
}

uint64_t sub_23AEF5BD4()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5BE4()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5BF4()
{
  return sub_23AEF2F9C();
}

uint64_t sub_23AEF5BFC()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5C0C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5C1C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5C2C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5C3C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5C4C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5C5C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5C6C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5C7C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5C8C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5C9C()
{
  return sub_23AEF1D74();
}

uint64_t sub_23AEF5CA4()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5CB4()
{
  return sub_23AEF1CB4();
}

uint64_t sub_23AEF5CBC()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5CCC()
{
  return sub_23AEF197C();
}

uint64_t sub_23AEF5CD4()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5CE4()
{
  return sub_23AEF1730();
}

uint64_t sub_23AEF5CEC()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5CFC()
{
  return sub_23AEF14E4();
}

uint64_t sub_23AEF5D04()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5D14()
{
  return sub_23AEF11D8();
}

uint64_t sub_23AEF5D1C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5D2C()
{
  return sub_23AEF1298();
}

uint64_t sub_23AEF5D34()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5D44()
{
  return sub_23AEF0CD4();
}

uint64_t sub_23AEF5D4C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5D5C()
{
  return sub_23AEF0A88();
}

uint64_t sub_23AEF5D64()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5D74()
{
  return sub_23AEF0664();
}

uint64_t sub_23AEF5D7C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5D8C()
{
  return sub_23AEF0724();
}

uint64_t sub_23AEF5D94()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5DA4()
{
  return sub_23AEF07E4();
}

uint64_t sub_23AEF5DDC()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5DEC()
{
  return sub_23AEF07E4();
}

uint64_t sub_23AEF5E24()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5E34()
{
  return objectdestroy_282Tm();
}

uint64_t sub_23AEF5E3C(uint64_t a1)
{
  return sub_23AC048C0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AEEB860);
}

uint64_t sub_23AEF5E48()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5E58()
{
  return objectdestroy_282Tm();
}

uint64_t sub_23AEF5E60()
{
  return sub_23AEEBA78();
}

uint64_t sub_23AEF5E6C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5E7C()
{
  return objectdestroy_282Tm();
}

uint64_t sub_23AEF5E84()
{
  return sub_23AEEBCF8();
}

uint64_t sub_23AEF5E90()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5EA0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AEF5ED4(uint64_t a1)
{
  uint64_t v1;

  return sub_23AEEBEE4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void (**)(uint64_t, unint64_t))(v1 + 48));
}

uint64_t sub_23AEF5EE4()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5EF4()
{
  return objectdestroy_282Tm();
}

uint64_t sub_23AEF5EFC()
{
  return sub_23AEEC2B0();
}

uint64_t sub_23AEF5F08()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5F18()
{
  return objectdestroy_282Tm();
}

uint64_t sub_23AEF5F20()
{
  return sub_23AEEC5B4();
}

uint64_t sub_23AEF5F2C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5F3C()
{
  return sub_23AEED938();
}

uint64_t sub_23AEF5F44()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5F54()
{
  return sub_23AEED9F8();
}

uint64_t sub_23AEF5F5C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5F6C()
{
  return objectdestroy_282Tm();
}

unint64_t sub_23AEF5F74()
{
  return sub_23AEED450();
}

uint64_t sub_23AEF5FA8()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF5FB8()
{
  return objectdestroy_282Tm();
}

unint64_t sub_23AEF5FC0()
{
  return sub_23AEED450();
}

uint64_t sub_23AEF6000()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF6010()
{
  return objectdestroy_282Tm();
}

unint64_t sub_23AEF6018()
{
  return sub_23AEED450();
}

uint64_t sub_23AEF604C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF605C()
{
  return objectdestroy_282Tm();
}

unint64_t sub_23AEF6064()
{
  return sub_23AEED450();
}

uint64_t sub_23AEF60A4()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF60B4()
{
  return objectdestroy_282Tm();
}

unint64_t sub_23AEF60BC()
{
  return sub_23AEED450();
}

uint64_t sub_23AEF60F4()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF6104()
{
  return objectdestroy_282Tm();
}

uint64_t objectdestroy_282Tm()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AEF6144()
{
  return sub_23AEED530();
}

uint64_t sub_23AEF6150()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF6160()
{
  return sub_23AEEFF58();
}

uint64_t sub_23AEF6168()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF6178()
{
  return sub_23AEF0018();
}

uint64_t sub_23AEF6180()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF6190()
{
  return sub_23AEEFBC8();
}

uint64_t sub_23AEF6198()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF61A8()
{
  return sub_23AEEF60C();
}

uint64_t sub_23AEF61B0()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF61C0()
{
  return sub_23AEEF6CC();
}

uint64_t sub_23AEF61C8()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF61D8()
{
  return sub_23AEEF860();
}

uint64_t sub_23AEF61E0()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF61F0()
{
  return sub_23AEEF18C();
}

uint64_t sub_23AEF61F8()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF6208()
{
  return sub_23AEEEF00();
}

uint64_t sub_23AEF6210()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF6220()
{
  return sub_23AEEEBB8();
}

uint64_t sub_23AEF6228()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF6238()
{
  return sub_23AEEEC78();
}

uint64_t sub_23AEF6240()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF6250()
{
  return sub_23AEEE808();
}

uint64_t sub_23AEF6258()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF6268()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AEF629C(uint64_t a1)
{
  return sub_23AC048C0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AEEA810);
}

uint64_t sub_23AEF62A8()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF62B8()
{
  return sub_23AEEAC9C();
}

uint64_t sub_23AEF62C0()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF62D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AEF62F4()
{
  return sub_23AEEADA0();
}

uint64_t sub_23AEF6300()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF6310()
{
  return sub_23AEEAF04();
}

uint64_t sub_23AEF6318()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF6328()
{
  return sub_23AEEAA8C();
}

uint64_t sub_23AEF6330()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF6340()
{
  return sub_23AEEAB90();
}

uint64_t sub_23AEF6348()
{
  return swift_deallocObject();
}

_QWORD *sub_23AEF6358@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_23AEF5170(*(_QWORD *)(v1 + 24), *(void **)(*(_QWORD *)(v1 + 16) + qword_2542EDF00));
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
    a1[2] = v6;
    a1[3] = v7;
  }
  return result;
}

uint64_t sub_23AEF6398()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AEF63BC(void *a1)
{
  return sub_23AEF53D4(a1);
}

uint64_t sub_23AEF63F0()
{
  return swift_deallocObject();
}

_QWORD *sub_23AEF6400@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  char v5;

  result = sub_23AEF4E34(*(_QWORD *)(v1 + 24), *(void **)(*(_QWORD *)(v1 + 16) + qword_2542EDF00));
  if (!v2)
  {
    *(_QWORD *)a1 = result;
    *(_BYTE *)(a1 + 8) = v5;
  }
  return result;
}

uint64_t sub_23AEF6440(void *a1)
{
  return sub_23AEF53D4(a1);
}

uint64_t sub_23AEF6474()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF6484()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF67D0()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF6B14()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AEF67D0();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEF6D90()
{
  return sub_23AEF4B3C();
}

uint64_t sub_23AEF6D98()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF6DA8(uint64_t a1, uint64_t a2)
{
  _OWORD *inited;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E2158);
  inited = (_OWORD *)swift_initStackObject();
  inited[1] = xmmword_23B1D1B90;
  inited[2] = xmmword_23B1DC580;
  inited[3] = xmmword_23B1DC590;
  v5 = sub_23ACF98E8(a1, a2, (uint64_t)inited);
  swift_setDeallocating();
  return v5;
}

uint64_t sub_23AEF6E68(uint64_t a1, uint64_t a2)
{
  uint64_t inited;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E2158);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23B1D2330;
  *(_OWORD *)(inited + 32) = xmmword_23B1D3BE0;
  v5 = sub_23ACF98E8(a1, a2, inited);
  swift_setDeallocating();
  return v5;
}

uint64_t sub_23AEF6F1C(unint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7;

  if ((a2 & 1) != 0 || a1 >= 4 && a1 - 500 > 2)
  {
    v7 = MEMORY[0x24BEE1768];
    v6[0] = 0;
  }
  else
  {
    v7 = MEMORY[0x24BEE1768];
    v6[0] = a1;
  }
  v2 = sub_23AA94C90((uint64_t)v6);
  v4 = v3;
  sub_23AA8A05C((uint64_t)v6, qword_2542E5640);
  if (v4)
    return v2;
  result = sub_23B1C704C();
  __break(1u);
  return result;
}

uint64_t sub_23AEF6FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t inited;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E2158);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23B1CA760;
  *(_QWORD *)(inited + 32) = a7;
  v11 = sub_23ACF98E8(a1, a2, inited);
  swift_setDeallocating();
  return v11;
}

void sub_23AEF70A8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, void (*a5)(char *, _QWORD, id), uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  id v18;
  unsigned __int8 v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  void (*v39)(char *, _QWORD, id);
  id aBlock[7];

  v35 = a6;
  v38 = a4;
  v39 = a5;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)(a2 + qword_2542EDF00);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a1;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = sub_23AEF77D4;
  v15[3] = v14;
  v37 = v14;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v15;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_583_0;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v17 = objc_msgSend(v13, sel_fetchSwift_error_, v16, aBlock);
  _Block_release(v16);
  v18 = aBlock[0];
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v16 & 1) != 0)
    __break(1u);
  if (v17)
  {
    v19 = objc_msgSend(v17, sel_next);
    v20 = v38;
    if ((v19 & 1) != 0)
    {
      v21 = a3 + 4;
      swift_beginAccess();
      v34 = a3 + 3;
      swift_beginAccess();
      v36 = a3 + 5;
      v22 = swift_beginAccess();
      while (1)
      {
        v23 = (void *)MEMORY[0x23B8601A8](v22);
        v24 = sub_23AAAF608();
        sub_23AAAF634(v24, v17, 0, (uint64_t)v12);
        if (v6)
          break;
        swift_bridgeObjectRelease();
        v25 = *((_QWORD *)v12 + 4);
        if ((sub_23ADF8180(v25, *v21) & 1) != 0 || (sub_23ADF8180(v25, *v36) & 1) != 0)
        {
          v26 = 1;
        }
        else
        {
          v27 = *v34;
          if (*(_QWORD *)(*v34 + 16))
          {
            v28 = v20;
            swift_bridgeObjectRetain();
            v29 = sub_23AA88CF8(v28);
            if ((v30 & 1) != 0)
            {
              v31 = *(_QWORD *)(v27 + 56);
              v33 = a3;
              v32 = *(_QWORD **)(v31 + 8 * v29);
              swift_retain();

              swift_bridgeObjectRelease();
              v26 = sub_23AF43204((uint64_t)v12, v32);
              a3 = v33;
              swift_release();
            }
            else
            {

              swift_bridgeObjectRelease();
              v26 = 0;
            }
            v20 = v38;
          }
          else
          {
            v26 = 0;
          }
        }
        v39(v12, v26 & 1, v20);
        sub_23AA8A05C((uint64_t)v12, (uint64_t *)&unk_2542E6B00);
        objc_autoreleasePoolPop(v23);
        v22 = (uint64_t)objc_msgSend(v17, sel_next);
        if ((v22 & 1) == 0)
          goto LABEL_17;
      }
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v23);

      swift_release();
      swift_release();

    }
    else
    {
LABEL_17:
      swift_release();
      swift_release();

    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
    swift_release();
  }
}

void sub_23AEF74C0(uint64_t a1, void (*a2)(char *, _QWORD, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id aBlock[7];

  v22 = a4;
  v23 = a5;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(a1 + qword_2542EDF00);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = sub_23AEF77BC;
  v12[3] = a1;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v12;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_573;
  v13 = _Block_copy(aBlock);
  v21 = a1;
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v14 = objc_msgSend(v11, sel_fetchSwift_error_, v13, aBlock);
  _Block_release(v13);
  v15 = aBlock[0];
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((a1 & 1) != 0)
    __break(1u);
  if (!v14)
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
    swift_release();
    goto LABEL_9;
  }
  if ((objc_msgSend(v14, sel_next) & 1) == 0)
  {
LABEL_7:
    swift_release();
    swift_release();

LABEL_9:
    swift_release();
    return;
  }
  v16 = (_QWORD *)(v22 + 32);
  v17 = swift_beginAccess();
  while (1)
  {
    v18 = (void *)MEMORY[0x23B8601A8](v17);
    v19 = sub_23AAAF608();
    sub_23AAAF634(v19, v14, 0, (uint64_t)v10);
    if (v5)
      break;
    swift_bridgeObjectRelease();
    v20 = sub_23ADF8180(*((_QWORD *)v10 + 4), *v16);
    a2(v10, v20 & 1, v23);
    sub_23AA8A05C((uint64_t)v10, (uint64_t *)&unk_2542E6B00);
    objc_autoreleasePoolPop(v18);
    v17 = (uint64_t)objc_msgSend(v14, sel_next);
    if ((v17 & 1) == 0)
      goto LABEL_7;
  }
  swift_bridgeObjectRelease();
  objc_autoreleasePoolPop(v18);
  swift_release();
  swift_release();
  swift_release();

}

uint64_t sub_23AEF77BC()
{
  return sub_23AEF4D54();
}

uint64_t sub_23AEF77C4()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF77D4(void *a1)
{
  uint64_t v1;

  return sub_23AEF4BFC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23AEF77DC()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF77EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AEF7810(void *a1)
{
  uint64_t v1;

  return sub_23AEE9874(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23AEF781C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF782C(void *a1)
{
  uint64_t v1;

  return sub_23AEE90C0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23AEF7838()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF7848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_23B1C5BDC();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_23AEF78C8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_23AEE8654(a1, *(uint64_t ***)(v1 + 48), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23AEF791C()
{
  return swift_deallocObject();
}

unint64_t sub_23AEF792C()
{
  return sub_23AEE805C();
}

uint64_t sub_23AEF7934()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF7944(void *a1)
{
  uint64_t v1;

  return sub_23AEE7B44(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23AEF7950()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF7964(uint64_t a1)
{
  return sub_23AEF7A68(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD))sub_23AEE726C);
}

uint64_t sub_23AEF7970()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF7984(uint64_t a1)
{
  return sub_23AEF7A68(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD))sub_23AEE5EF8);
}

uint64_t sub_23AEF7990()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF79A4(uint64_t a1)
{
  return sub_23AEF7A68(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD))sub_23AEE62D8);
}

uint64_t sub_23AEF79B0()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_632Tm()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23AEF7A5C(uint64_t a1)
{
  return sub_23AEF7A68(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD))sub_23AEE66CC);
}

uint64_t sub_23AEF7A68(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return a2(a1, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), v2 + v5, *(_QWORD *)(v2 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23AEF7AE4()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF7AF8(uint64_t a1)
{
  return sub_23AEF7EF4(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_23AEE4F0C);
}

uint64_t sub_23AEF7B04()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF7B18(uint64_t a1)
{
  return sub_23AEF8918(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))sub_23AEE44B4);
}

uint64_t sub_23AEF7B24()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF7B34()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t sub_23AEF7C20(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  return sub_23AEE3BD8(a1);
}

uint64_t sub_23AEF7CCC()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF7CDC()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v3 + v4 + 2) & ~v3;
  swift_release();
  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v0 + v4, AssociatedTypeWitness);
  v6(v0 + v5, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23AEF7D8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_23AEE3058(a1, *(_QWORD *)(v1 + 48), v1 + v4, *(unsigned __int8 *)(v1 + v4 + *(_QWORD *)(v3 + 64)), *(_BYTE *)(v1 + v4 + *(_QWORD *)(v3 + 64) + 1));
}

uint64_t sub_23AEF7E08()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF7E1C(uint64_t a1)
{
  return sub_23AEF7EF4(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_23AEE24CC);
}

uint64_t sub_23AEF7E28()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_672Tm()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v3 + v4) & ~v3;
  swift_release();
  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v0 + v4, AssociatedTypeWitness);
  v6(v0 + v5, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23AEF7EE8(uint64_t a1)
{
  return sub_23AEF7EF4(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_23AEE1C64);
}

uint64_t sub_23AEF7EF4(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  return a2(a1, *(_QWORD *)(v2 + 48), v2 + ((v5 + 56) & ~v5), v2 + ((*(_QWORD *)(v4 + 64) + v5 + ((v5 + 56) & ~v5)) & ~v5));
}

uint64_t sub_23AEF7F70()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF7F84(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AEE05E8);
}

uint64_t sub_23AEF7F90()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF7FA0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AEF7FC4(void *a1)
{
  return sub_23AEDFE68(a1);
}

uint64_t sub_23AEF7FD0()
{
  return swift_deallocObject();
}

void sub_23AEF7FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v5 = type metadata accessor for SnapshotItem(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 32), a4);
  v6 = (*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  swift_release();
  v7 = v4 + v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8);
  v9(v7, AssociatedTypeWitness);
  v9(v7 + *(int *)(v5 + 36), AssociatedTypeWitness);
  v10 = v7 + *(int *)(v5 + 40);
  v11 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FileItemVersion();
}

uint64_t sub_23AEF8140(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3 + *(int *)(a1 + 56), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v2 + v1[12];
  v7 = (int *)type metadata accessor for ItemMetadata();
  v8 = v6 + v7[7];
  v9 = sub_23B1C5BDC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  v11(v6 + v7[8], v9);
  swift_bridgeObjectRelease();
  v12 = v6 + v7[29];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v9))
    v11(v12, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = (uint64_t *)(v6 + v7[33]);
  v14 = v13[1];
  if (v14 >> 60 != 15)
    sub_23AAAE53C(*v13, v14);
  swift_bridgeObjectRelease();
  v15 = v2 + v1[13];
  v16 = *(void **)(v15 + 16);
  if (v16 != (void *)1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v15 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_23AAA12F0(*(_QWORD *)(v2 + v1[17]), *(_QWORD *)(v2 + v1[17] + 8));
  return swift_deallocObject();
}

uint64_t sub_23AEF834C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;

  v6 = *(_QWORD *)(type metadata accessor for SnapshotItem(0, v4[2], v4[4], a4) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  return sub_23AEDF578(a1, v4[6], (uint64_t)v4 + v7, *(uint64_t **)((char *)v4 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_23AEF83B0()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF83C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23AEF8750(a1, (uint64_t (*)(uint64_t, uint64_t, char *))sub_23AEDAAB4, a3, a4);
}

uint64_t sub_23AEF83D0()
{
  return swift_deallocObject();
}

void objectdestroy_762Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v5 = type metadata accessor for SnapshotItem(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 32), a4);
  v6 = (*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  swift_release();
  v7 = v4 + v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8);
  v9(v7, AssociatedTypeWitness);
  v9(v7 + *(int *)(v5 + 36), AssociatedTypeWitness);
  v10 = v7 + *(int *)(v5 + 40);
  v11 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FileItemVersion();
}

uint64_t sub_23AEF8544(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3 + *(int *)(a1 + 56), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v2 + v1[12];
  v7 = (int *)type metadata accessor for ItemMetadata();
  v8 = v6 + v7[7];
  v9 = sub_23B1C5BDC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  v11(v6 + v7[8], v9);
  swift_bridgeObjectRelease();
  v12 = v6 + v7[29];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v9))
    v11(v12, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = (uint64_t *)(v6 + v7[33]);
  v14 = v13[1];
  if (v14 >> 60 != 15)
    sub_23AAAE53C(*v13, v14);
  swift_bridgeObjectRelease();
  v15 = v2 + v1[13];
  v16 = *(void **)(v15 + 16);
  if (v16 != (void *)1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v15 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_23AAA12F0(*(_QWORD *)(v2 + v1[17]), *(_QWORD *)(v2 + v1[17] + 8));
  return swift_deallocObject();
}

uint64_t sub_23AEF8744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23AEF8750(a1, (uint64_t (*)(uint64_t, uint64_t, char *))sub_23AEDA8C4, a3, a4);
}

uint64_t sub_23AEF8750(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, char *), uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SnapshotItem(0, v4[2], v4[4], a4) - 8) + 80);
  return a2(a1, v4[6], (char *)v4 + ((v6 + 56) & ~v6));
}

uint64_t sub_23AEF87A8()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF87B8(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (a2 != 1 || (result = sub_23AED8EF8(result), !v3))
  {
    if (__OFADD__(*v4, 1))
      __break(1u);
    else
      ++*v4;
  }
  return result;
}

uint64_t sub_23AEF8804(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AED88FC);
}

uint64_t sub_23AEF8810()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8824(uint64_t a1)
{
  return sub_23AEF8850(a1, 29, 0x46204554454C4544, 0xEC000000204D4F52, (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_23AED8514);
}

uint64_t sub_23AEF8850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v11;

  v11 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 80);
  return a5(a1, *(_QWORD *)(v5 + 48), v5 + ((v11 + 56) & ~v11), a2, a3, a4);
}

uint64_t sub_23AEF88D8()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF88EC(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AED6624);
}

uint64_t sub_23AEF88F8()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF890C(uint64_t a1)
{
  return sub_23AEF8918(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))sub_23AED5AB4);
}

uint64_t sub_23AEF8918(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t, _QWORD))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return a2(a1, *(_QWORD *)(v2 + 48), v2 + v5, *(_QWORD *)(v2 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23AEF8994()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF89A8(uint64_t a1)
{
  return sub_23AEF8918(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))sub_23AED5054);
}

uint64_t sub_23AEF89B4()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF89C8(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AED4864);
}

uint64_t sub_23AEF89D4()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF89E8(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AED3F78);
}

uint64_t sub_23AEF89F4()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8A08(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AED36D0);
}

uint64_t sub_23AEF8A14()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8A28(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AED33B0);
}

uint64_t sub_23AEF8A34()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8A48(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AED2980);
}

uint64_t sub_23AEF8A54()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8A68(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AED1E94);
}

uint64_t sub_23AEF8A74()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8A88(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AED15EC);
}

uint64_t sub_23AEF8A94()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8AA4()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23AEF8B30(uint64_t a1)
{
  uint64_t v1;

  swift_getAssociatedTypeWitness();
  return sub_23AED0AC4(a1, *(_BYTE *)(v1 + 48));
}

uint64_t sub_23AEF8B8C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8BA0(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AED0318);
}

uint64_t sub_23AEF8BAC()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8BC0(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AED00C0);
}

uint64_t sub_23AEF8BCC()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8BDC(void *a1)
{
  uint64_t v1;

  return sub_23AECF68C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_23AEF8BEC()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8BFC()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23AEF8C94(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_23AECECF8(a1, *(_QWORD *)(v1 + 48), v1 + v4, *(_QWORD *)(v1 + v5), *(_BYTE *)(v1 + v5 + 8));
}

uint64_t sub_23AEF8D14()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8D24(void *a1)
{
  return sub_23AEF8D44(a1);
}

uint64_t sub_23AEF8D44(void *a1)
{
  uint64_t v1;

  return sub_23AECE300(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_23AEF8D70()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8D80(void *a1)
{
  return sub_23AEF8D44(a1);
}

uint64_t sub_23AEF8DA0()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8DB4(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AECCD1C);
}

uint64_t sub_23AEF8DC0()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8DD4(uint64_t a1)
{
  return sub_23AEF8850(a1, 41, 0xD000000000000018, 0x800000023B20D6A0, (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_23AED8514);
}

uint64_t sub_23AEF8DFC()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8E10()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8E20()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23AEF8EB4(uint64_t a1)
{
  uint64_t v1;

  swift_getAssociatedTypeWitness();
  return sub_23AECBC24(a1, *(_QWORD *)(v1 + 48), *(void **)(v1 + 56));
}

uint64_t sub_23AEF8F0C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8F20(uint64_t a1)
{
  return sub_23AABD858(a1);
}

uint64_t sub_23AEF8F2C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF8F3C()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_23B1C6C98() - 8) + 80);
  v6 = (v4 + v5 + 17) & ~v5;
  swift_release();
  v7 = *(void (**)(unint64_t, uint64_t))(v2 + 8);
  v7(v0 + v3, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v0 + v6, 1, AssociatedTypeWitness))
    v7(v0 + v6, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23AEF9038(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_23B1C6C98() - 8) + 80);
  return sub_23AECB094(a1, *(_QWORD **)(v1 + 48), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(unsigned __int8 *)(v1 + v5 + 16), v1 + ((v5 + v6 + 17) & ~v6));
}

uint64_t sub_23AEF90D8()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF90E8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_23AECB3E0(*(_QWORD *)(v1 + 48), a1);
}

uint64_t objectdestroy_682Tm()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23AEF91A8(uint64_t a1)
{
  return sub_23AEF8918(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))sub_23AECA60C);
}

uint64_t sub_23AEF91B4()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF91C8()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF91DC(uint64_t a1)
{
  return sub_23AEF8850(a1, 60, 0xD00000000000002BLL, 0x800000023B20D8A0, (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_23AEC9C70);
}

uint64_t sub_23AEF9204()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF9218(uint64_t a1)
{
  return sub_23AEF8850(a1, 48, 0xD00000000000001FLL, 0x800000023B20D8F0, (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_23AED8514);
}

uint64_t sub_23AEF9240()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF9254(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AEC838C);
}

uint64_t sub_23AEF9260()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF9274(uint64_t a1)
{
  return sub_23AEF8850(a1, 67, 0xD000000000000032, 0x800000023B20D970, (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_23AEC9C70);
}

uint64_t sub_23AEF929C()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF92B0(uint64_t a1)
{
  return sub_23AEF8850(a1, 101, 0xD000000000000054, 0x800000023B20D9E0, (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_23AEC9C70);
}

uint64_t sub_23AEF92D8()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF92EC(uint64_t a1)
{
  return sub_23AEF8850(a1, 114, 0xD000000000000061, 0x800000023B20DA70, (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_23AEC9C70);
}

uint64_t sub_23AEF9314()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF9328(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AEE0BD8);
}

uint64_t sub_23AEF9334()
{
  return swift_deallocObject();
}

unint64_t sub_23AEF9344()
{
  unint64_t result;

  result = qword_2569E6D80;
  if (!qword_2569E6D80)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2569E6D80);
  }
  return result;
}

uint64_t sub_23AEF9384(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AED8CB0);
}

uint64_t sub_23AEF9390()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF93A0()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23AEF9440(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_23AED70B4(a1, *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23AEF94BC()
{
  return swift_deallocObject();
}

uint64_t sub_23AEF94CC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v5;

  v2 = *(void **)(a1 + 24);
  v3 = *(void **)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 192);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23AAA5C9C(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23AEF95C4(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AECD108);
}

uint64_t sub_23AEF95D0()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_732Tm()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23AEF9670(uint64_t a1)
{
  return sub_23AA95890(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_23AEC916C);
}

uint64_t sub_23AEF967C()
{
  return swift_deallocObject();
}

unint64_t sub_23AEF968C()
{
  unint64_t result;

  result = qword_2569E6D90;
  if (!qword_2569E6D90)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DC7A0, &type metadata for PaginatedContinuation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E6D90);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PaginatedContinuation.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23AEF9710 + 4 * byte_23B1DC5A5[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23AEF9730 + 4 * byte_23B1DC5AA[v4]))();
}

_BYTE *sub_23AEF9710(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23AEF9730(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23AEF9738(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23AEF9740(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23AEF9748(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23AEF9750(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PaginatedContinuation.CodingKeys()
{
  return &type metadata for PaginatedContinuation.CodingKeys;
}

unint64_t sub_23AEF9770()
{
  unint64_t result;

  result = qword_2569E6DA0;
  if (!qword_2569E6DA0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DC778, &type metadata for PaginatedContinuation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E6DA0);
  }
  return result;
}

unint64_t sub_23AEF97B8()
{
  unint64_t result;

  result = qword_2569E6DA8;
  if (!qword_2569E6DA8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DC6B0, &type metadata for PaginatedContinuation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E6DA8);
  }
  return result;
}

unint64_t sub_23AEF9800()
{
  unint64_t result;

  result = qword_2569E6DB0[0];
  if (!qword_2569E6DB0[0])
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DC6D8, &type metadata for PaginatedContinuation.CodingKeys);
    atomic_store(result, qword_2569E6DB0);
  }
  return result;
}

uint64_t sub_23AEF9C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a7, a1, a5);
  v14 = type metadata accessor for ItemState(0, a5, a6, v13);
  v15 = (_QWORD *)(a7 + *(int *)(v14 + 36));
  *v15 = a2;
  v15[1] = a3;
  return sub_23AB60C64(a4, a7 + *(int *)(v14 + 40));
}

uint64_t sub_23AEF9CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v60;

  v5 = v4;
  v8 = *(_QWORD *)(a4 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v60 - v14;
  v19 = sub_23AB5A3F4((char *)(v13 + *(int *)(v16 + 40)), v17, v18);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v20(v15, v5, v8);
  v20(v12, a1, v8);
  LOBYTE(v20) = sub_23B1C63A4();
  v21 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21(v12, v8);
  v21(v15, v8);
  if ((v20 & 1) != 0)
    v22 = v19;
  else
    v22 = v19 | 2;
  v23 = *(int *)(a4 + 36);
  v24 = v5 + v23;
  v26 = *(_QWORD *)(v5 + v23);
  v25 = *(_QWORD *)(v24 + 8);
  v27 = (uint64_t *)(a1 + v23);
  v29 = *v27;
  v28 = v27[1];
  swift_bridgeObjectRetain();
  v30 = sub_23AAAE580(v26, v25);
  v32 = v31;
  swift_bridgeObjectRelease();
  if (!v32)
    goto LABEL_10;
  if (v30 == 12565487 && v32 == 0xA300000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v34 & 1) == 0)
    {
LABEL_10:
      swift_bridgeObjectRetain();
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRetain();
  v35 = sub_23B1C64B8();
  v36 = sub_23AA8A1BC(v35, v26, v25);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  swift_bridgeObjectRelease();
  v26 = MEMORY[0x23B85ED8C](v36, v38, v40, v42);
  v25 = v43;
  swift_bridgeObjectRelease();
LABEL_13:
  swift_bridgeObjectRetain();
  v44 = sub_23AAAE580(v29, v28);
  v46 = v45;
  swift_bridgeObjectRelease();
  if (v46)
  {
    if (v44 == 12565487 && v46 == 0xA300000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    v47 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v47 & 1) != 0)
    {
LABEL_18:
      swift_bridgeObjectRetain();
      v48 = sub_23B1C64B8();
      v49 = sub_23AA8A1BC(v48, v29, v28);
      v51 = v50;
      v53 = v52;
      v55 = v54;
      swift_bridgeObjectRelease();
      v56 = MEMORY[0x23B85ED8C](v49, v51, v53, v55);
      v28 = v57;
      swift_bridgeObjectRelease();
      if (v26 != v56)
        goto LABEL_23;
      goto LABEL_21;
    }
  }
  swift_bridgeObjectRetain();
  if (v26 != v29)
  {
LABEL_23:
    v58 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v22 | ((v58 & 1) == 0);
  }
LABEL_21:
  if (v25 != v28)
    goto LABEL_23;
  swift_bridgeObjectRelease_n();
  return v22;
}

int *sub_23AEFA044@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = v4;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a4, v5);
  if ((a1 & 2) != 0)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))(a4, a2);
  if ((a1 & 1) != 0)
  {
    v10 = *(int *)(a3 + 36);
    v12 = *(_QWORD *)(a2 + v10);
    v11 = *(_QWORD *)(a2 + v10 + 8);
    v13 = (_QWORD *)(a4 + v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v13 = v12;
    v13[1] = v11;
  }
  return sub_23AB59E60(a1, a2 + *(int *)(a3 + 40));
}

uint64_t sub_23AEFA0F8()
{
  void *v0;
  id v1;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C7340();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  v0 = (void *)sub_23B1C63BC();
  v1 = objc_msgSend(v0, sel_fp_obfuscatedFilename);

  sub_23B1C63E0();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AB59228();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AEFA24C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t *v17;
  _QWORD v18[6];

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(v10 + 48))(v11, v10);
  v18[4] = 0;
  v18[5] = 0xE000000000000000;
  v18[2] = 58;
  v18[3] = 0xE100000000000000;
  v18[0] = 47;
  v18[1] = 0xE100000000000000;
  sub_23AAA420C();
  v12 = sub_23B1C6CF8();
  v14 = v13;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a4, v9, a2);
  result = type metadata accessor for ItemStateVersion(0, a2, a3, v15);
  v17 = (uint64_t *)(a4 + *(int *)(result + 36));
  *v17 = v12;
  v17[1] = v14;
  return result;
}

BOOL sub_23AEFA368(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v21;

  v2 = v1;
  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v5);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v10 + 24) + 48))(v8, *(_QWORD *)(v10 + 24));
  v13 = sub_23B1C63A4();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v2, a1);
  if ((v13 & 1) != 0)
  {
    v14 = &v7[*(int *)(a1 + 36)];
    v16 = *(_QWORD *)v14;
    v15 = *((_QWORD *)v14 + 1);
    v17 = v16 & 0xFFFFFFFFFFFFLL;
    if ((v15 & 0x2000000000000000) != 0)
      v18 = HIBYTE(v15) & 0xF;
    else
      v18 = v17;
    v19 = v18 == 0;
  }
  else
  {
    v19 = 0;
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
  return v19;
}

uint64_t sub_23AEFA49C()
{
  void *v0;
  id v1;

  sub_23B1C7340();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  v0 = (void *)sub_23B1C63BC();
  v1 = objc_msgSend(v0, sel_fp_obfuscatedFilename);

  sub_23B1C63E0();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

void sub_23AEFA570()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23AEFA5C8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23AEFA620()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23AEFA678()
{
  sub_23B1C704C();
  __break(1u);
}

uint64_t sub_23AEFA6D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  if ((sub_23B1C63A4() & 1) == 0)
  {
    v20 = 0;
    return v20 & 1;
  }
  v9 = *(int *)(type metadata accessor for ItemStateVersion(0, a3, a4, v8) + 36);
  v11 = *(_QWORD *)(a1 + v9);
  v10 = *(_QWORD *)(a1 + v9 + 8);
  v12 = (uint64_t *)(a2 + v9);
  v14 = *v12;
  v13 = v12[1];
  swift_bridgeObjectRetain();
  v15 = sub_23AAAE580(v11, v10);
  v17 = v16;
  swift_bridgeObjectRelease();
  if (!v17)
    goto LABEL_8;
  if (v15 == 12565487 && v17 == 0xA300000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
LABEL_8:
      swift_bridgeObjectRetain();
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRetain();
  v21 = sub_23B1C64B8();
  v22 = sub_23AA8A1BC(v21, v11, v10);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  swift_bridgeObjectRelease();
  v11 = MEMORY[0x23B85ED8C](v22, v24, v26, v28);
  v10 = v29;
  swift_bridgeObjectRelease();
LABEL_12:
  swift_bridgeObjectRetain();
  v30 = sub_23AAAE580(v14, v13);
  v32 = v31;
  swift_bridgeObjectRelease();
  if (v32)
  {
    if (v30 == 12565487 && v32 == 0xA300000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v34 = sub_23B1C7388();
      swift_bridgeObjectRelease();
      if ((v34 & 1) == 0)
        goto LABEL_18;
    }
    swift_bridgeObjectRetain();
    v35 = sub_23B1C64B8();
    v36 = sub_23AA8A1BC(v35, v14, v13);
    v38 = v37;
    v40 = v39;
    v42 = v41;
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x23B85ED8C](v36, v38, v40, v42);
    v13 = v43;
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
LABEL_18:
  swift_bridgeObjectRetain();
LABEL_21:
  if (v11 == v14 && v10 == v13)
    v20 = 1;
  else
    v20 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v20 & 1;
}

uint64_t sub_23AEFA94C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4449746E65726170 && a2 == 0xE800000000000000;
  if (v2 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D616E656C6966 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23AEFAA3C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x656D616E656C6966;
  else
    return 0x4449746E65726170;
}

uint64_t sub_23AEFAA6C()
{
  return sub_23AD0A6E8();
}

uint64_t sub_23AEFAA7C()
{
  sub_23B1C74A8();
  sub_23AD072A4();
  return sub_23B1C74E4();
}

uint64_t sub_23AEFAAC0()
{
  char *v0;

  return sub_23AEFAA3C(*v0);
}

uint64_t sub_23AEFAAD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23AEFA94C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23AEFAAFC(uint64_t a1)
{
  MEMORY[0x23B8613CC](&unk_23B1DCA90, a1);
  return sub_23B1C7544();
}

uint64_t sub_23AEFAB30(uint64_t a1)
{
  MEMORY[0x23B8613CC](&unk_23B1DCA90, a1);
  return sub_23B1C7550();
}

uint64_t sub_23AEFAB64(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v17[0] = a2;
  v5 = *(_QWORD *)(a2 + 24);
  v18 = *(_QWORD *)(a2 + 16);
  v6 = type metadata accessor for ItemStateVersion.CodingKeys(255, v18, v5, a4);
  MEMORY[0x23B8613CC](&unk_23B1DCA90, v6);
  v7 = sub_23B1C72EC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v17 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v11 = v17[1];
  sub_23B1C7538();
  LOBYTE(v20) = 0;
  v12 = v19;
  sub_23B1C72A4();
  if (!v12)
  {
    v13 = (uint64_t *)(v11 + *(int *)(v17[0] + 36));
    v15 = *v13;
    v14 = v13[1];
    v20 = v15;
    v21 = v14;
    v22 = 1;
    sub_23AB5EA4C();
    sub_23B1C72A4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t type metadata accessor for ItemStateVersion.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ItemStateVersion.CodingKeys);
}

uint64_t sub_23AEFACDC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  v34 = a4;
  v35 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v37 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ItemStateVersion.CodingKeys(255, v8, v9, v10);
  MEMORY[0x23B8613CC](&unk_23B1DCA90, v11);
  v41 = sub_23B1C7208();
  v39 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v13 = (char *)&v31 - v12;
  v40 = a2;
  v36 = a3;
  v15 = type metadata accessor for ItemStateVersion(0, a2, a3, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v31 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v38 = v13;
  v19 = (uint64_t)v42;
  sub_23B1C7520();
  if (v19)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v32 = v16;
  v33 = v15;
  v42 = a1;
  v20 = v18;
  v21 = v35;
  LOBYTE(v43) = 0;
  v23 = v37;
  v22 = v38;
  v24 = v40;
  v25 = v41;
  sub_23B1C71C0();
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v20, v23, v24);
  v45 = 1;
  sub_23AA7E3CC();
  sub_23B1C71C0();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v22, v25);
  v26 = v44;
  v28 = v32;
  v27 = v33;
  v29 = &v20[*(int *)(v33 + 36)];
  *(_QWORD *)v29 = v43;
  *((_QWORD *)v29 + 1) = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 16))(v34, v20, v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v20, v27);
}

uint64_t sub_23AEFAF78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_23AEFA24C(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_23AEFAF88(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x23B8613CC](&unk_23B1DC8B4);
  a1[2] = MEMORY[0x23B8613CC](&unk_23B1DC8DC, a2);
  result = MEMORY[0x23B8613CC](&unk_23B1DC88C, a2);
  a1[3] = result;
  return result;
}

uint64_t sub_23AEFAFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23AEFA6D0(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t sub_23AEFAFF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_23AEFACDC(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_23AEFB00C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23AEFAB64(a1, a2, a3, a4);
}

void sub_23AEFB020()
{
  sub_23AEFA570();
}

void sub_23AEFB02C()
{
  sub_23AEFA5C8();
}

void sub_23AEFB038()
{
  sub_23AEFA620();
}

uint64_t sub_23AEFB044()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23AEFB0B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v10 = *v11;
    v10[1] = v11[1];
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_23AEFB174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23AEFB1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23AEFB244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23AEFB2B0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ItemMetadata();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_23AEFB340(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  const void *v42;
  unsigned int (*v43)(const void *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  _QWORD *v63;
  _QWORD *v64;
  size_t __n;
  uint64_t v67;
  size_t v68;
  uint64_t v69;
  uint64_t v70;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = sub_23B1C5BDC();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  if (*(_DWORD *)(v9 + 84))
    v12 = *(_QWORD *)(v9 + 64);
  else
    v12 = v11 + 1;
  v13 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  v14 = v13 <= 7 && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) == 0;
  if (v14
    && (v15 = v10 | 7,
        v16 = v10 + 12,
        v17 = v11 + v10,
        ((v10 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & ~(v10 | 7))
      + ((((((((((v12
                + 7
                + ((v10
                  + 10
                  + ((((((v11 + ((v11 + v10 + ((v10 + 12) & ~v10)) & ~v10) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v10)) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 16 <= 0x18))
  {
    v68 = v12 + 7;
    v69 = *(_QWORD *)(v8 - 8);
    __n = v12;
    v67 = v10 + 10;
    v70 = v8;
    v18 = ~v10;
    v19 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v20 = v17;
    v19(a1, a2, v5);
    v21 = (_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    v22 = (_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v22;
    v21[1] = v22[1];
    v23 = ((unint64_t)v21 + v15 + 16) & ~v15;
    v24 = ((unint64_t)v22 + v15 + 16) & ~v15;
    *(_BYTE *)v23 = *(_BYTE *)v24;
    v25 = v23 | 4;
    v26 = *(_DWORD *)(v24 | 4);
    *(_BYTE *)(v25 + 4) = *(_BYTE *)((v24 | 4) + 4);
    *(_DWORD *)v25 = v26;
    *(_WORD *)(v23 + 10) = *(_WORD *)(v24 + 10);
    v27 = (v16 + v23) & v18;
    v28 = (v16 + v24) & v18;
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16);
    swift_bridgeObjectRetain();
    v29(v27, v28, v70);
    v30 = (v20 + v27) & v18;
    v31 = (v20 + v28) & v18;
    v29(v30, v31, v70);
    v32 = (_BYTE *)(v30 + v11);
    *v32 = *(_BYTE *)(v31 + v11);
    v32[1] = *(_BYTE *)(v31 + v11 + 1);
    v32[2] = *(_BYTE *)(v31 + v11 + 2);
    v32[3] = *(_BYTE *)(v31 + v11 + 3);
    v32[4] = *(_BYTE *)(v31 + v11 + 4);
    v33 = (v30 + v11 + 12) & 0xFFFFFFFFFFFFFFF8;
    v34 = (v31 + v11 + 12) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *(_QWORD *)(v33 + 8) = *(_QWORD *)(v34 + 8);
    *(_BYTE *)(v33 + 16) = *(_BYTE *)(v34 + 16);
    *(_BYTE *)(v33 + 17) = *(_BYTE *)(v34 + 17);
    *(_BYTE *)(v33 + 18) = *(_BYTE *)(v34 + 18);
    *(_BYTE *)(v33 + 19) = *(_BYTE *)(v34 + 19);
    v35 = (v33 + 27) & 0xFFFFFFFFFFFFFFF8;
    v36 = (v34 + 27) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *(_BYTE *)(v35 + 8) = *(_BYTE *)(v36 + 8);
    *(_BYTE *)(v35 + 9) = *(_BYTE *)(v36 + 9);
    *(_BYTE *)(v35 + 10) = *(_BYTE *)(v36 + 10);
    *(_BYTE *)(v35 + 11) = *(_BYTE *)(v36 + 11);
    *(_BYTE *)(v35 + 12) = *(_BYTE *)(v36 + 12);
    v37 = (_QWORD *)((v33 + 47) & 0xFFFFFFFFFFFFF8);
    v38 = (_QWORD *)((v34 + 47) & 0xFFFFFFFFFFFFF8);
    *v37 = *v38;
    v39 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
    v40 = ((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v39 = *(_QWORD *)v40;
    *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
    *(_BYTE *)(v39 + 9) = *(_BYTE *)(v40 + 9);
    v41 = (void *)((v67 + v39) & v18);
    v42 = (const void *)((v67 + v40) & v18);
    v43 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v69 + 48);
    swift_bridgeObjectRetain();
    if (v43(v42, 1, v70))
    {
      memcpy(v41, v42, __n);
    }
    else
    {
      v29((uint64_t)v41, (uint64_t)v42, v70);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v41, 0, 1, v70);
    }
    v46 = (_QWORD *)(((unint64_t)v41 + v68) & 0xFFFFFFFFFFFFFFF8);
    v47 = (_QWORD *)(((unint64_t)v42 + v68) & 0xFFFFFFFFFFFFFFF8);
    *v46 = *v47;
    v48 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
    v49 = ((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8;
    v50 = *(_QWORD *)v49;
    *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
    *(_QWORD *)v48 = v50;
    v51 = (_QWORD *)(((unint64_t)v46 + 31) & 0xFFFFFFFFFFFFF8);
    v52 = (_QWORD *)(((unint64_t)v47 + 31) & 0xFFFFFFFFFFFFF8);
    *v51 = *v52;
    v53 = ((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8;
    v54 = (uint64_t *)(((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8);
    v55 = v54[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45 = a1;
    if ((v55 & 0x3000000000000000) != 0)
    {
      *(_OWORD *)v53 = *(_OWORD *)v54;
    }
    else
    {
      v56 = *v54;
      sub_23AAAE668(*v54, v55);
      *(_QWORD *)v53 = v56;
      *(_QWORD *)(v53 + 8) = v55;
    }
    v57 = (v53 + 19) & 0xFFFFFFFFFFFFFFF8;
    v58 = ((unint64_t)v54 + 19) & 0xFFFFFFFFFFFFFFF8;
    v59 = *(_QWORD *)v58;
    *(_BYTE *)(v57 + 8) = *(_BYTE *)(v58 + 8);
    *(_QWORD *)v57 = v59;
    *(_BYTE *)(v57 + 9) = *(_BYTE *)(v58 + 9);
    v60 = (v57 + 13) & 0xFFFFFFFFFFFFFFFCLL;
    v61 = (v58 + 13) & 0xFFFFFFFFFFFFFFFCLL;
    v62 = *(_DWORD *)v61;
    *(_BYTE *)(v60 + 4) = *(_BYTE *)(v61 + 4);
    *(_DWORD *)v60 = v62;
    v63 = (_QWORD *)((v57 + 25) & 0xFFFFFFFFFFFFFFF8);
    v64 = (_QWORD *)((v58 + 25) & 0xFFFFFFFFFFFFFFF8);
    *v63 = *v64;
    v63[1] = v64[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    v44 = *a2;
    *a1 = *a2;
    v45 = (uint64_t *)(v44 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
  }
  return v45;
}

uint64_t sub_23AEFB7BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  int v35;
  size_t v36;
  size_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = sub_23B1C5BDC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_DWORD *)(v10 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)v7 + v11 + 16) & v12;
  v14 = ((unint64_t)v8 + v11 + 16) & v12;
  *(_BYTE *)v13 = *(_BYTE *)v14;
  v15 = *(_BYTE *)(v14 + 8);
  *(_DWORD *)(v13 + 4) = *(_DWORD *)(v14 + 4);
  *(_BYTE *)(v13 + 8) = v15;
  *(_WORD *)(v13 + 10) = *(_WORD *)(v14 + 10);
  v16 = (v11 + 12 + v13) & ~v11;
  v17 = (v11 + 12 + v14) & ~v11;
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
  v18(v16, v17, v9);
  v19 = *(_QWORD *)(v10 + 64);
  v20 = (v19 + v11 + v16) & ~v11;
  v21 = (v19 + v11 + v17) & ~v11;
  v18(v20, v21, v9);
  v22 = (_BYTE *)(v20 + v19);
  v23 = v21 + v19;
  *v22 = *(_BYTE *)(v21 + v19);
  v22[1] = *(_BYTE *)(v21 + v19 + 1);
  v22[2] = *(_BYTE *)(v21 + v19 + 2);
  v22[3] = *(_BYTE *)(v21 + v19 + 3);
  v22[4] = *(_BYTE *)(v21 + v19 + 4);
  v24 = (v20 + v19 + 12) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v23 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v24 + 16) = *(_BYTE *)(v25 + 16);
  *(_BYTE *)(v24 + 17) = *(_BYTE *)(v25 + 17);
  *(_BYTE *)(v24 + 18) = *(_BYTE *)(v25 + 18);
  *(_BYTE *)(v24 + 19) = *(_BYTE *)(v25 + 19);
  v26 = (v24 + 27) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v25 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  *(_BYTE *)(v26 + 9) = *(_BYTE *)(v27 + 9);
  *(_BYTE *)(v26 + 10) = *(_BYTE *)(v27 + 10);
  *(_BYTE *)(v26 + 11) = *(_BYTE *)(v27 + 11);
  *(_BYTE *)(v26 + 12) = *(_BYTE *)(v27 + 12);
  v28 = (_QWORD *)((v24 + 47) & 0xFFFFFFFFFFFFF8);
  v29 = (_QWORD *)((v25 + 47) & 0xFFFFFFFFFFFFF8);
  *v28 = *v29;
  v30 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  *(_BYTE *)(v30 + 9) = *(_BYTE *)(v31 + 9);
  v32 = (void *)((v11 + 10 + v30) & ~v11);
  v33 = (void *)((v11 + 10 + v31) & ~v11);
  v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v11) = v34(v32, 1, v9);
  v35 = v34(v33, 1, v9);
  if ((_DWORD)v11)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v32, v33, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v32, 0, 1, v9);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v35)
    {
      v18((uint64_t)v32, (uint64_t)v33, v9);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v32, v9);
  }
  if (*(_DWORD *)(v10 + 84))
    v36 = v19;
  else
    v36 = v19 + 1;
  memcpy(v32, v33, v36);
LABEL_10:
  if (*(_DWORD *)(v10 + 84))
    v37 = v19;
  else
    v37 = v19 + 1;
  v38 = (uint64_t)v32 + v37 + 7;
  v39 = (_QWORD *)(((unint64_t)v33 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
  v40 = (unint64_t)v39 + 31;
  v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8) = *v39;
  v42 = (v38 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = v41 & 0xFFFFFFFFFFFFFFF8;
  v44 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
  v45 = *(_QWORD *)v44;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  *(_QWORD *)v43 = v45;
  v46 = (_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF8);
  v47 = (v40 & 0xFFFFFFFFFFFFF8) + 15;
  *v46 = *(_QWORD *)(v40 & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v48 = (uint64_t *)(((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8);
  v49 = v47 & 0xFFFFFFFFFFFFFFF8;
  v50 = v48[1];
  v51 = *(_QWORD *)(v49 + 8);
  v52 = v51 & 0x3000000000000000;
  if ((v50 & 0x3000000000000000) == 0)
  {
    if (!v52)
    {
      v63 = *(_QWORD *)v49;
      sub_23AAAE668(*(_QWORD *)v49, *(_QWORD *)(v49 + 8));
      v64 = *v48;
      v65 = v48[1];
      *v48 = v63;
      v48[1] = v51;
      sub_23AAAE53C(v64, v65);
      goto LABEL_19;
    }
    sub_23AAAE53C(*v48, v50);
    goto LABEL_18;
  }
  if (v52)
  {
LABEL_18:
    *(_OWORD *)v48 = *(_OWORD *)v49;
    goto LABEL_19;
  }
  v53 = *(_QWORD *)v49;
  sub_23AAAE668(*(_QWORD *)v49, *(_QWORD *)(v49 + 8));
  *v48 = v53;
  v48[1] = v51;
LABEL_19:
  v54 = ((unint64_t)v48 + 19) & 0xFFFFFFFFFFFFFFF8;
  v55 = (v49 + 19) & 0xFFFFFFFFFFFFFFF8;
  v56 = *(_QWORD *)v55;
  *(_BYTE *)(v54 + 8) = *(_BYTE *)(v55 + 8);
  *(_QWORD *)v54 = v56;
  *(_BYTE *)(v54 + 9) = *(_BYTE *)(v55 + 9);
  v57 = (v54 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v58 = (v55 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v59 = *(_DWORD *)v58;
  *(_BYTE *)(v57 + 4) = *(_BYTE *)(v58 + 4);
  *(_DWORD *)v57 = v59;
  v60 = (_QWORD *)((v54 + 25) & 0xFFFFFFFFFFFFFFF8);
  v61 = (_QWORD *)((v55 + 25) & 0xFFFFFFFFFFFFFFF8);
  *v60 = *v61;
  v60[1] = v61[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23AEFBBFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  const void *v32;
  int v33;
  size_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _OWORD *v43;
  _OWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = sub_23B1C5BDC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_DWORD *)(v10 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)v7 + v11 + 16) & v12;
  v14 = ((unint64_t)v8 + v11 + 16) & v12;
  *(_BYTE *)v13 = *(_BYTE *)v14;
  v15 = *(_BYTE *)(v14 + 8);
  *(_DWORD *)(v13 + 4) = *(_DWORD *)(v14 + 4);
  *(_BYTE *)(v13 + 8) = v15;
  *(_WORD *)(v13 + 10) = *(_WORD *)(v14 + 10);
  v16 = (v11 + 12 + v13) & ~v11;
  v17 = (v11 + 12 + v14) & ~v11;
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v18(v16, v17, v9);
  v19 = *(_QWORD *)(v10 + 64);
  v20 = (v19 + v11 + v16) & ~v11;
  v21 = (v19 + v11 + v17) & ~v11;
  v18(v20, v21, v9);
  v22 = (_BYTE *)(v20 + v19);
  *v22 = *(_BYTE *)(v21 + v19);
  v22[1] = *(_BYTE *)(v21 + v19 + 1);
  v22[2] = *(_BYTE *)(v21 + v19 + 2);
  v22[3] = *(_BYTE *)(v21 + v19 + 3);
  v22[4] = *(_BYTE *)(v21 + v19 + 4);
  v23 = (v20 + v19 + 12) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v21 + v19 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
  *(_BYTE *)(v23 + 17) = *(_BYTE *)(v24 + 17);
  *(_BYTE *)(v23 + 18) = *(_BYTE *)(v24 + 18);
  *(_BYTE *)(v23 + 19) = *(_BYTE *)(v24 + 19);
  v25 = (v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v24 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  *(_BYTE *)(v25 + 9) = *(_BYTE *)(v26 + 9);
  *(_BYTE *)(v25 + 10) = *(_BYTE *)(v26 + 10);
  *(_BYTE *)(v25 + 11) = *(_BYTE *)(v26 + 11);
  *(_BYTE *)(v25 + 12) = *(_BYTE *)(v26 + 12);
  v27 = (_QWORD *)((v23 + 47) & 0xFFFFFFFFFFFFF8);
  v28 = (_QWORD *)((v24 + 47) & 0xFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  v30 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  *(_BYTE *)(v29 + 9) = *(_BYTE *)(v30 + 9);
  v31 = (void *)((v11 + 10 + v29) & ~v11);
  v32 = (const void *)((v11 + 10 + v30) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v32, 1, v9))
  {
    v33 = *(_DWORD *)(v10 + 84);
    if (v33)
      v34 = v19;
    else
      v34 = v19 + 1;
    memcpy(v31, v32, v34);
  }
  else
  {
    v18((uint64_t)v31, (uint64_t)v32, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v31, 0, 1, v9);
    v33 = *(_DWORD *)(v10 + 84);
  }
  if (v33)
    v35 = v19;
  else
    v35 = v19 + 1;
  v36 = (_QWORD *)(((unint64_t)v31 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  v37 = (_QWORD *)(((unint64_t)v32 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v36 = *v37;
  v38 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
  v39 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
  v40 = *(_QWORD *)v39;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  *(_QWORD *)v38 = v40;
  v41 = (_QWORD *)(((unint64_t)v36 + 31) & 0xFFFFFFFFFFFFF8);
  v42 = (_QWORD *)(((unint64_t)v37 + 31) & 0xFFFFFFFFFFFFF8);
  *v41 = *v42;
  v43 = (_OWORD *)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8);
  v44 = (_OWORD *)(((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v43 = *v44;
  v45 = ((unint64_t)v43 + 19) & 0xFFFFFFFFFFFFFFF8;
  v46 = ((unint64_t)v44 + 19) & 0xFFFFFFFFFFFFFFF8;
  v47 = *(_QWORD *)v46;
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  *(_QWORD *)v45 = v47;
  *(_BYTE *)(v45 + 9) = *(_BYTE *)(v46 + 9);
  v48 = (v45 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v49 = (v46 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  LODWORD(v40) = *(_DWORD *)v49;
  *(_BYTE *)(v48 + 4) = *(_BYTE *)(v49 + 4);
  *(_DWORD *)v48 = v40;
  *(_OWORD *)((v45 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v46 + 25) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_23AEFBF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  uint64_t (*v33)(void *, uint64_t, uint64_t);
  int v34;
  size_t v35;
  size_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v58;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  v9 = sub_23B1C5BDC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_DWORD *)(v10 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v13 = ((unint64_t)v7 + v11 + 16) & v12;
  v14 = ((unint64_t)v8 + v11 + 16) & v12;
  *(_BYTE *)v13 = *(_BYTE *)v14;
  v15 = *(_BYTE *)(v14 + 8);
  *(_DWORD *)(v13 + 4) = *(_DWORD *)(v14 + 4);
  *(_BYTE *)(v13 + 8) = v15;
  *(_WORD *)(v13 + 10) = *(_WORD *)(v14 + 10);
  v16 = (v11 + 12 + v13) & ~v11;
  v17 = (v11 + 12 + v14) & ~v11;
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v18(v16, v17, v9);
  v19 = *(_QWORD *)(v10 + 64);
  v20 = (v19 + v11 + v16) & ~v11;
  v21 = (v19 + v11 + v17) & ~v11;
  v18(v20, v21, v9);
  v22 = (_BYTE *)(v20 + v19);
  *v22 = *(_BYTE *)(v21 + v19);
  v22[1] = *(_BYTE *)(v21 + v19 + 1);
  v22[2] = *(_BYTE *)(v21 + v19 + 2);
  v22[3] = *(_BYTE *)(v21 + v19 + 3);
  v22[4] = *(_BYTE *)(v21 + v19 + 4);
  v23 = (v20 + v19 + 12) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v21 + v19 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
  *(_BYTE *)(v23 + 17) = *(_BYTE *)(v24 + 17);
  *(_BYTE *)(v23 + 18) = *(_BYTE *)(v24 + 18);
  *(_BYTE *)(v23 + 19) = *(_BYTE *)(v24 + 19);
  v25 = (v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v24 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  *(_BYTE *)(v25 + 9) = *(_BYTE *)(v26 + 9);
  *(_BYTE *)(v25 + 10) = *(_BYTE *)(v26 + 10);
  *(_BYTE *)(v25 + 11) = *(_BYTE *)(v26 + 11);
  *(_BYTE *)(v25 + 12) = *(_BYTE *)(v26 + 12);
  v27 = (_QWORD *)((v23 + 47) & 0xFFFFFFFFFFFFF8);
  v28 = (_QWORD *)((v24 + 47) & 0xFFFFFFFFFFFFF8);
  *v27 = *v28;
  v29 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  v30 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  *(_BYTE *)(v29 + 9) = *(_BYTE *)(v30 + 9);
  v31 = (void *)((v11 + 10 + v29) & ~v11);
  v32 = (void *)((v11 + 10 + v30) & ~v11);
  v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v11) = v33(v31, 1, v9);
  v34 = v33(v32, 1, v9);
  if ((_DWORD)v11)
  {
    if (!v34)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v31, v32, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v31, 0, 1, v9);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v34)
    {
      v18((uint64_t)v31, (uint64_t)v32, v9);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v31, v9);
  }
  if (*(_DWORD *)(v10 + 84))
    v35 = v19;
  else
    v35 = v19 + 1;
  memcpy(v31, v32, v35);
LABEL_10:
  if (*(_DWORD *)(v10 + 84))
    v36 = v19;
  else
    v36 = v19 + 1;
  v37 = (uint64_t)v31 + v36 + 7;
  v38 = (_QWORD *)(((unint64_t)v32 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  v39 = (v37 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF8) = *v38;
  v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRelease();
  v41 = v39 & 0xFFFFFFFFFFFFFFF8;
  v42 = ((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8;
  v43 = *(_QWORD *)v42;
  *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
  *(_QWORD *)v41 = v43;
  v44 = (_QWORD *)(((unint64_t)v38 + 31) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF8) = *v44;
  swift_bridgeObjectRelease();
  v45 = (uint64_t *)(((v40 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  v46 = (uint64_t *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
  v47 = v45[1];
  if ((v47 & 0x3000000000000000) == 0)
  {
    v48 = v46[1];
    if ((v48 & 0x3000000000000000) == 0)
    {
      v58 = *v45;
      *v45 = *v46;
      v45[1] = v48;
      sub_23AAAE53C(v58, v47);
      goto LABEL_17;
    }
    sub_23AAAE53C(*v45, v47);
  }
  *(_OWORD *)v45 = *(_OWORD *)v46;
LABEL_17:
  v49 = ((unint64_t)v45 + 19) & 0xFFFFFFFFFFFFFFF8;
  v50 = ((unint64_t)v46 + 19) & 0xFFFFFFFFFFFFFFF8;
  v51 = *(_QWORD *)v50;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  *(_QWORD *)v49 = v51;
  *(_BYTE *)(v49 + 9) = *(_BYTE *)(v50 + 9);
  v52 = (v49 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v53 = (v50 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v54 = *(_DWORD *)v53;
  *(_BYTE *)(v52 + 4) = *(_BYTE *)(v53 + 4);
  *(_DWORD *)v52 = v54;
  v55 = (_QWORD *)((v49 + 25) & 0xFFFFFFFFFFFFFFF8);
  v56 = (_QWORD *)((v50 + 25) & 0xFFFFFFFFFFFFFFF8);
  *v55 = *v56;
  v55[1] = v56[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23AEFC310(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = sub_23B1C5BDC();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= 0x7FFFFFFE)
    v11 = 2147483646;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v7 <= v11)
    v12 = v11;
  else
    v12 = v7;
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v12;
  if ((_DWORD)v10)
    v14 = 7;
  else
    v14 = 8;
  if (!a2)
    return 0;
  v15 = v8;
  v16 = *(_QWORD *)(v6 + 64);
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = v17 | 7;
  v19 = v17 + 12;
  v20 = *(_QWORD *)(v9 + 64);
  v21 = v20 + v17;
  v22 = v20 + 12;
  if (v13 < a2)
  {
    if (((((v17 + ((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v18)
         + ((((((((((v14
                   + v20
                   + ((v17
                     + ((((((v22 + ((v21 + (v19 & ~v17)) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 10) & ~v17)) & 0xFFFFFFFFFFFFFFF8)
                 + 31) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 19) & 0xFFFFFFFFFFFFFFF8)
           + 25) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v23 = 2;
    else
      v23 = a2 - v13 + 1;
    if (v23 >= 0x10000)
      v24 = 4;
    else
      v24 = 2;
    if (v23 < 0x100)
      v24 = 1;
    if (v23 >= 2)
      v25 = v24;
    else
      v25 = 0;
    __asm { BR              X5 }
  }
  if ((_DWORD)v7 == v13)
  {
    v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    v28 = a1;
    v10 = v7;
    v15 = v5;
    return v27(v28, v10, v15);
  }
  v29 = (a1 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((v12 & 0x80000000) != 0)
  {
    v28 = (v19 + ((v29 + v18 + 16) & ~v18)) & ~v17;
    if (v10 >= 0x7FFFFFFE)
    {
      v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v27(v28, v10, v15);
    }
    v31 = *(_QWORD *)(((v22 + ((v21 + v28) & ~v17)) & 0xFFFFFFFFFFFFF8) + 8);
    if (v31 >= 0xFFFFFFFF)
      LODWORD(v31) = -1;
    if ((v31 + 1) >= 2)
      return v31;
    else
      return 0;
  }
  else
  {
    v30 = *(_QWORD *)(v29 + 8);
    if (v30 >= 0xFFFFFFFF)
      LODWORD(v30) = -1;
    return (v30 + 1);
  }
}

void sub_23AEFC574(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFE)
    v11 = 2147483646;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v8 > v11)
    v11 = v8;
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = *(_QWORD *)(v9 + 64);
  v15 = (v13
       + ((((((v14 + 12 + ((v14 + v13 + ((v13 + 12) & ~v13)) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 10) & ~v13;
  if (!v10)
    ++v14;
  v16 = ((v13 + ((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & ~(v13 | 7))
      + ((((((((((v14 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v12 >= a3)
  {
    v19 = 0;
    if (a2 <= v12)
      goto LABEL_24;
  }
  else
  {
    if ((((_DWORD)v13 + ((*(_DWORD *)(v7 + 64) + 7) & 0xFFFFFFF8) + 16) & ~(v13 | 7))
       + (((((((((((_DWORD)v14 + (_DWORD)v15 + 7) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 19) & 0xFFFFFFF8)
         + 25) & 0xFFFFFFF8) == -16)
      v17 = a3 - v12 + 1;
    else
      v17 = 2;
    if (v17 >= 0x10000)
      v18 = 4;
    else
      v18 = 2;
    if (v17 < 0x100)
      v18 = 1;
    if (v17 >= 2)
      v19 = v18;
    else
      v19 = 0;
    if (a2 <= v12)
LABEL_24:
      __asm { BR              X4 }
  }
  if ((_DWORD)v16)
  {
    v20 = ~v12 + a2;
    bzero(a1, v16);
    *a1 = v20;
  }
  __asm { BR              X10 }
}

void sub_23AEFC72C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x23AEFC818);
}

void sub_23AEFC734()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x23AEFC73CLL);
  JUMPOUT(0x23AEFC818);
}

void sub_23AEFC790()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x23AEFC818);
}

void sub_23AEFC798()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x23AEFC818);
}

uint64_t sub_23AEFC7A0()
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v5 + v8) = 0;
  if (!(_DWORD)v4)
    goto LABEL_7;
  if ((_DWORD)v7 != v2)
  {
    if (v1 < 0)
      JUMPOUT(0x23AEFC7ACLL);
    if ((v4 & 0x80000000) != 0)
      JUMPOUT(0x23AEFC7D8);
    *(_QWORD *)(((v5 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = (v4 - 1);
LABEL_7:
    JUMPOUT(0x23AEFC818);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, v4, v7, v6);
}

uint64_t type metadata accessor for ItemState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ItemState);
}

uint64_t sub_23AEFC840(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23AEFC88C + 4 * byte_23B1DC843[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23AEFC8C0 + 4 * byte_23B1DC83E[v4]))();
}

uint64_t sub_23AEFC8C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AEFC8C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23AEFC8D0);
  return result;
}

uint64_t sub_23AEFC8DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23AEFC8E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23AEFC8E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AEFC8F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23AEFC8FC()
{
  JUMPOUT(0x23B8613CCLL);
}

void sub_23AEFC90C()
{
  JUMPOUT(0x23B8613CCLL);
}

void sub_23AEFC91C()
{
  JUMPOUT(0x23B8613CCLL);
}

uint64_t sub_23AEFC930(uint64_t result)
{
  return result;
}

uint64_t sub_23AEFC938(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23AEFC96C + 4 * byte_23B1DCAE0[a1]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_23AEFC96C()
{
  return 0x6C65446568636163;
}

uint64_t sub_23AEFC98C()
{
  return 1919251317;
}

uint64_t sub_23AEFC99C()
{
  return 0x697461646E756F66;
}

uint64_t sub_23AEFC9B8()
{
  return 28774;
}

uint64_t sub_23AEFC9C4()
{
  return 0x705565746F6D6572;
}

uint64_t sub_23AEFC9E8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23AEFCA18 + 4 * byte_23B1DCAE6[*v0]))(0x6E776F6E6B6E75, 0xE700000000000000);
}

uint64_t sub_23AEFCA18()
{
  return 0x6C65446568636163;
}

uint64_t sub_23AEFCA38()
{
  return 1919251317;
}

uint64_t sub_23AEFCA48()
{
  return 0x697461646E756F66;
}

uint64_t sub_23AEFCA64()
{
  return 28774;
}

uint64_t sub_23AEFCA70()
{
  return 0x705565746F6D6572;
}

uint64_t sub_23AEFCA90()
{
  sub_23AEFCC58();
  return sub_23B1C66C8();
}

uint64_t sub_23AEFCAEC()
{
  sub_23AEFCC58();
  return sub_23B1C6674();
}

uint64_t sub_23AEFCB38(uint64_t result)
{
  if (result >= 6)
    return 0;
  else
    return result;
}

unint64_t sub_23AEFCB48()
{
  unint64_t result;

  result = qword_2569E6E38;
  if (!qword_2569E6E38)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DCB70, &type metadata for EvictionReasons);
    atomic_store(result, (unint64_t *)&qword_2569E6E38);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for EvictionReasons(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23AEFCBD8 + 4 * byte_23B1DCAF1[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23AEFCC0C + 4 * byte_23B1DCAEC[v4]))();
}

uint64_t sub_23AEFCC0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AEFCC14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23AEFCC1CLL);
  return result;
}

uint64_t sub_23AEFCC28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23AEFCC30);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23AEFCC34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AEFCC3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EvictionReasons()
{
  return &type metadata for EvictionReasons;
}

unint64_t sub_23AEFCC58()
{
  unint64_t result;

  result = qword_2569E6E40;
  if (!qword_2569E6E40)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DCB38, &type metadata for EvictionReasons);
    atomic_store(result, (unint64_t *)&qword_2569E6E40);
  }
  return result;
}

void **sub_23AEFCC9C(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(type metadata accessor for StagedRemoteVersion(0) + 20);
    v9 = (char *)v7 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23B1C5A08();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v14 = v4;
    v13(v9, v10, v11);
    v15 = *(int *)(a3 + 20);
    v16 = (char *)v7 + v15;
    v17 = (char *)a2 + v15;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))((char *)a2 + v15, 1, v11))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v13(v16, v17, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
    }
    v19 = *(int *)(a3 + 24);
    v20 = (char *)v7 + v19;
    v21 = (char *)a2 + v19;
    v22 = *((_QWORD *)v21 + 1);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
    }
    else
    {
      v23 = *(_QWORD *)v21;
      sub_23AAAE668(*(_QWORD *)v21, *((_QWORD *)v21 + 1));
      *(_QWORD *)v20 = v23;
      *((_QWORD *)v20 + 1) = v22;
    }
  }
  return v7;
}

uint64_t type metadata accessor for StagedRemoteVersion(uint64_t a1)
{
  return sub_23AA94094(a1, qword_2569E6F38);
}

uint64_t sub_23AEFCE10(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t);
  char *v8;
  uint64_t result;
  uint64_t *v10;
  unint64_t v11;

  v4 = (char *)a1 + *(int *)(type metadata accessor for StagedRemoteVersion(0) + 20);
  v5 = sub_23B1C5A08();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(char *, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (char *)a1 + *(int *)(a2 + 20);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5);
  if (!(_DWORD)result)
    result = ((uint64_t (*)(char *, uint64_t))v7)(v8, v5);
  v10 = (uint64_t *)((char *)a1 + *(int *)(a2 + 24));
  v11 = v10[1];
  if (v11 >> 60 != 15)
    return sub_23AAAE53C(*v10, v11);
  return result;
}

void **sub_23AEFCED4(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;

  v6 = *a2;
  *a1 = *a2;
  v7 = *(int *)(type metadata accessor for StagedRemoteVersion(0) + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23B1C5A08();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v13 = v6;
  v12(v8, v9, v10);
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))((char *)a2 + v14, 1, v10))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v12(v15, v16, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  v18 = *(int *)(a3 + 24);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *((_QWORD *)v20 + 1);
  if (v21 >> 60 == 15)
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  else
  {
    v22 = *(_QWORD *)v20;
    sub_23AAAE668(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
    *(_QWORD *)v19 = v22;
    *((_QWORD *)v19 + 1) = v21;
  }
  return a1;
}

void **sub_23AEFD00C(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(int *)(type metadata accessor for StagedRemoteVersion(0) + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_23B1C5A08();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, char *, uint64_t))(v13 + 24);
  v14(v10, v11, v12);
  v15 = *(int *)(a3 + 20);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v19 = v18((char *)a1 + v15, 1, v12);
  v20 = v18(v17, 1, v12);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v17, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v14(v16, v17, v12);
LABEL_7:
  v22 = *(int *)(a3 + 24);
  v23 = (uint64_t *)((char *)a1 + v22);
  v24 = (uint64_t *)((char *)a2 + v22);
  v25 = *(unint64_t *)((char *)a2 + v22 + 8);
  if (*(unint64_t *)((char *)a1 + v22 + 8) >> 60 != 15)
  {
    if (v25 >> 60 != 15)
    {
      v27 = *v24;
      sub_23AAAE668(v27, v25);
      v28 = *v23;
      v29 = v23[1];
      *v23 = v27;
      v23[1] = v25;
      sub_23AAAE53C(v28, v29);
      return a1;
    }
    sub_23AB2D750((uint64_t)v23);
    goto LABEL_12;
  }
  if (v25 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)v23 = *(_OWORD *)v24;
    return a1;
  }
  v26 = *v24;
  sub_23AAAE668(v26, v25);
  *v23 = v26;
  v23[1] = v25;
  return a1;
}

_QWORD *sub_23AEFD1D4(_QWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *a1 = *(_QWORD *)a2;
  v6 = *(int *)(type metadata accessor for StagedRemoteVersion(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = sub_23B1C5A08();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 20);
  v13 = (char *)a1 + v12;
  v14 = &a2[v12];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v12], 1, v9))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

void **sub_23AEFD2D0(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(type metadata accessor for StagedRemoteVersion(0) + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23B1C5A08();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = *(int *)(a3 + 20);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v17 = v16((char *)a1 + v13, 1, v10);
  v18 = v16(v15, 1, v10);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v15, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v12(v14, v15, v10);
LABEL_7:
  v20 = *(int *)(a3 + 24);
  v21 = (uint64_t *)((char *)a1 + v20);
  v22 = (uint64_t *)((char *)a2 + v20);
  v23 = *(unint64_t *)((char *)a1 + v20 + 8);
  if (v23 >> 60 != 15)
  {
    v24 = v22[1];
    if (v24 >> 60 != 15)
    {
      v25 = *v21;
      *v21 = *v22;
      v21[1] = v24;
      sub_23AAAE53C(v25, v23);
      return a1;
    }
    sub_23AB2D750((uint64_t)v21);
  }
  *(_OWORD *)v21 = *(_OWORD *)v22;
  return a1;
}

uint64_t sub_23AEFD464()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23AEFD470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;

  v6 = type metadata accessor for StagedRemoteVersion(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
  v15 = ((4 * (_DWORD)v14) & 0xC) == 0;
  v16 = ((4 * v14) & 0xC | (v14 >> 2)) ^ 0xF;
  if (v15)
    return 0;
  else
    return v16;
}

uint64_t sub_23AEFD528()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23AEFD534(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;

  v8 = type metadata accessor for StagedRemoteVersion(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v15 = (_QWORD *)(a1 + *(int *)(a4 + 24));
  *v15 = 0;
  v15[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t type metadata accessor for GSConflictInfo(uint64_t a1)
{
  return sub_23AA94094(a1, qword_2569E6EA0);
}

void sub_23AEFD600()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for StagedRemoteVersion(319);
  if (v0 <= 0x3F)
  {
    sub_23AB6BBDC();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void **sub_23AEFD68C(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  char *v11;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_23B1C5A08();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    v11 = v4;
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_23AEFD720(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = sub_23B1C5A08();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

void **sub_23AEFD768(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  id v10;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_23B1C5A08();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v10 = v4;
  v9(v6, v7, v8);
  return a1;
}

void **sub_23AEFD7D4(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_23B1C5A08();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

_QWORD *sub_23AEFD844(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23B1C5A08();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void **sub_23AEFD8A0(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23B1C5A08();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_23AEFD90C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23AEFD918(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23B1C5A08();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_23AEFD994()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23AEFD9A0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_23B1C5A08();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23AEFDA14()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B1C5A08();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id sub_23AEFDA8C(uint64_t a1)
{
  id *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t v31;
  uint64_t v32;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E0208);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23B1C5A08();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23AEFDD28();
  v14 = *v1;
  v15 = objc_msgSend(*v1, sel_displayName);
  v16 = sub_23B1C63E0();
  v32 = v17;

  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v18 = objc_msgSend(v14, sel_itemID);
  v19 = objc_msgSend(v14, sel_contentModificationDate);
  if (v19)
  {
    v20 = v19;
    sub_23B1C5BAC();

    v21 = sub_23B1C5BDC();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 0, 1, v21);
  }
  else
  {
    v22 = sub_23B1C5BDC();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 1, 1, v22);
  }
  v23 = objc_msgSend(v14, sel_mostRecentEditorNameComponents);
  if (v23)
  {
    v24 = v23;
    sub_23B1C57F8();

    v25 = sub_23B1C5804();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v5, 0, 1, v25);
  }
  else
  {
    v26 = sub_23B1C5804();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v5, 1, 1, v26);
  }
  v27 = objc_msgSend(v14, sel_documentSize);
  v28 = objc_allocWithZone(MEMORY[0x24BDC82A0]);
  v29 = sub_23ACE55A4((uint64_t)v13, v16, v32, (uint64_t)v12, 0, (uint64_t)v18, (uint64_t)v8, (uint64_t)v5, (uint64_t)v27);

  return v29;
}

id sub_23AEFDD28()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  _OWORD v5[3];
  uint64_t v6;
  _BYTE v7[16];
  __int128 v8;
  __int128 v9;
  _QWORD v10[2];

  sub_23AAA5788((uint64_t *)v5);
  v9 = v5[0];
  v8 = *(_OWORD *)((char *)&v5[1] + 8);
  sub_23AEFDE44((uint64_t)&v6, (uint64_t)v7);
  sub_23AA9F49C((uint64_t)&v9);
  sub_23AA9F49C((uint64_t)&v8);
  sub_23ABE5118((uint64_t)v7);
  v0 = (void *)sub_23B1C5AA4();
  v1 = (void *)sub_23B1C5AA4();
  sub_23AEFDE44((uint64_t)v7, (uint64_t)v10);
  if (v10[1])
  {
    v2 = (void *)sub_23B1C63BC();
    sub_23ABE5088((uint64_t)v7);
  }
  else
  {
    v2 = 0;
  }
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC83D8]), sel_initWithContentVersion_metadataVersion_lastEditorDeviceName_, v0, v1, v2);
  sub_23AC2452C((uint64_t)&v8);
  sub_23AC2452C((uint64_t)&v9);

  sub_23AAA5CC8((uint64_t *)v5);
  return v3;
}

uint64_t sub_23AEFDE44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E7460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AEFDE8C()
{
  id *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v10;

  v1 = sub_23AEFDD28();
  v2 = *v0;
  v3 = objc_msgSend(*v0, sel_itemID);
  v4 = objc_msgSend(v2, sel_filename);
  sub_23B1C63E0();

  sub_23B0CE9B0((uint64_t)&v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = (void *)objc_opt_self();
  v6 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v5, sel_versionFaultName_identifier_ext_, v1, v3, v6);

  v8 = sub_23B1C63E0();
  return v8;
}

uint64_t sub_23AEFDFC0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23AEFDFF8
                                                                     + 4 * asc_23B1DCCA0[a1]))(0xD000000000000014, 0x800000023B20EB10);
}

uint64_t sub_23AEFE090()
{
  unsigned __int8 *v0;

  return sub_23AEFDFC0(*v0);
}

uint64_t sub_23AEFE098(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(_QWORD *, uint64_t);
  void (*v37)(char *, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;

  v8 = v7;
  v55 = a4;
  v56 = a5;
  v45 = a3;
  v13 = sub_23B1C60A4();
  v47 = *(_QWORD *)(v13 - 8);
  v48 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v46 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_23B1C6020();
  v50 = *(_QWORD *)(v53 - 8);
  v15 = MEMORY[0x24BDAC7A8](v53);
  v52 = (_QWORD *)((char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v15);
  v18 = (_QWORD *)((char *)v43 - v17);
  v54 = sub_23B1C60E0();
  v49 = *(_QWORD *)(v54 - 8);
  v19 = MEMORY[0x24BDAC7A8](v54);
  v21 = (char *)v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v51 = (char *)v43 - v22;
  v23 = sub_23B1C6B78();
  v24 = *(_QWORD *)(v23 - 8);
  result = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 16) = a1;
  v44 = a2;
  *(_BYTE *)(v8 + 24) = a2;
  v28 = a1[2];
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    a1[2] = v30;
    *(_QWORD *)(v8 + 48) = a6;
    *(_QWORD *)(v8 + 56) = a7;
    if (a1[3] >= a1[5])
    {
      swift_bridgeObjectRelease();

    }
    else
    {
      sub_23AAB62D8();
      v57 = MEMORY[0x24BEE4AF8];
      sub_23AAB6314();
      swift_retain();
      v43[1] = a7;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1EF0);
      sub_23AEFECB0();
      sub_23B1C6DE8();
      v31 = sub_23B1C6B84();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
      *(_QWORD *)(v8 + 32) = v31;
      swift_unknownObjectRelease();
      if (!*(_QWORD *)(v8 + 32))
        goto LABEL_7;
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain();
      sub_23B1C60C8();
      *v18 = 300;
      v33 = v50;
      v34 = v53;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v50 + 104))(v18, *MEMORY[0x24BEE5420], v53);
      v35 = v51;
      MEMORY[0x23B85EA14](v21, v18);
      v36 = *(void (**)(_QWORD *, uint64_t))(v33 + 8);
      v36(v18, v34);
      v37 = *(void (**)(char *, uint64_t))(v49 + 8);
      v37(v21, v54);
      sub_23AAB6074((uint64_t)v18);
      v38 = v52;
      sub_23AAB602C(v52);
      MEMORY[0x23B85F530](v35, v18, v38, ObjectType);
      swift_unknownObjectRelease();
      v36(v38, v34);
      v36(v18, v34);
      v37(v35, v54);
      if (*(_QWORD *)(v8 + 32))
      {
        swift_getObjectType();
        v39 = swift_allocObject();
        swift_weakInit();
        v40 = swift_allocObject();
        *(_QWORD *)(v40 + 16) = v39;
        *(_BYTE *)(v40 + 24) = v44;
        v41 = v55;
        *(_QWORD *)(v40 + 32) = v45;
        *(_QWORD *)(v40 + 40) = v41;
        swift_unknownObjectRetain();
        swift_retain();
        v42 = (uint64_t)v46;
        sub_23ADFA2F4();
        sub_23AA78928(0, v42, (uint64_t)sub_23AEFED4C, v40);
        swift_unknownObjectRelease();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v42, v48);
        swift_release();
      }
      else
      {
LABEL_7:
        swift_bridgeObjectRelease();
      }
      if (*(_QWORD *)(v8 + 32))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        sub_23B1C6BB4();
        swift_unknownObjectRelease();
      }
      swift_release();

      swift_release();
    }
    return v8;
  }
  return result;
}

uint64_t sub_23AEFE514(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  _QWORD v21[5];

  v5 = sub_23B1C5E4C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v10 = result;
    if (*(_QWORD *)(result + 32))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_23B1C6BA8();
      swift_unknownObjectRelease();
      if (*(_QWORD *)(v10 + 32))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        sub_23B1C6BCC();
        swift_unknownObjectRelease();
      }
    }
    *(_QWORD *)(v10 + 32) = 0;
    swift_unknownObjectRelease();
    v11 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    swift_bridgeObjectRetain_n();
    v12 = sub_23B1C5E40();
    v13 = sub_23B1C6AB8();
    if (os_log_type_enabled(v12, v13))
    {
      v21[1] = a3;
      v21[2] = v5;
      v14 = (_DWORD *)swift_slowAlloc();
      v21[0] = swift_slowAlloc();
      v21[4] = v21[0];
      *v14 = 136446466;
      __asm { BR              X10 }
    }

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)(v10 + 40) = 1;
    v15 = *(_QWORD *)(v10 + 16);
    v16 = *(_QWORD *)(v15 + 24);
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
    {
      __break(1u);
      JUMPOUT(0x23AEFE8C8);
    }
    *(_QWORD *)(v15 + 24) = v18;
    v19 = *(void (**)(uint64_t))(v10 + 48);
    v20 = swift_retain();
    v19(v20);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_23AEFE8EC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(v0 + 32))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_23B1C6BA8();
    swift_unknownObjectRelease();
    if (*(_QWORD *)(v0 + 32))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_23B1C6BCC();
      swift_unknownObjectRelease();
    }
  }
  *(_QWORD *)(v0 + 32) = 0;
  result = swift_unknownObjectRelease();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = __OFSUB__(v3, 1);
  v5 = v3 - 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v5;
    if (*(_BYTE *)(v0 + 40) != 1)
    {
LABEL_8:
      (*(void (**)(uint64_t))(v0 + 48))(result);
      swift_release();
      swift_unknownObjectRelease();
      swift_release();
      return v0;
    }
    v6 = *(_QWORD *)(v2 + 24);
    v4 = __OFSUB__(v6, 1);
    v7 = v6 - 1;
    if (!v4)
    {
      *(_QWORD *)(v2 + 24) = v7;
      goto LABEL_8;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_23AEFE9D8()
{
  sub_23AEFE8EC();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for JobLimitSlot()
{
  return objc_opt_self();
}

uint64_t sub_23AEFEA18()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23B1C7304();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  result = swift_bridgeObjectRelease();
  v2 = v0[3];
  if (v2 == v0[5] && v2 != v0[4])
  {
    result = sub_23B1C64F4();
    v2 = v0[3];
  }
  v3 = v0[2];
  if (__OFSUB__(v2, v3))
  {
    __break(1u);
  }
  else
  {
    if (v2 == v3)
      v4 = 0x20919B9FF0;
    else
      v4 = 545627362;
    v5 = v4;
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t sub_23AEFEB4C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for JobLimit()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for JobLimitCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23AEFEBC8 + 4 * byte_23B1DCCAE[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23AEFEBFC + 4 * byte_23B1DCCA9[v4]))();
}

uint64_t sub_23AEFEBFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AEFEC04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23AEFEC0CLL);
  return result;
}

uint64_t sub_23AEFEC18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23AEFEC20);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23AEFEC24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AEFEC2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JobLimitCategory()
{
  return &type metadata for JobLimitCategory;
}

unint64_t sub_23AEFEC4C()
{
  unint64_t result;

  result = qword_2569E6F78;
  if (!qword_2569E6F78)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DCDAC, &type metadata for JobLimitCategory);
    atomic_store(result, (unint64_t *)&qword_2569E6F78);
  }
  return result;
}

uint64_t sub_23AEFEC90()
{
  return sub_23AEFEA18();
}

unint64_t sub_23AEFECB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2542E1F00;
  if (!qword_2542E1F00)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542E1EF0);
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_2542E1F00);
  }
  return result;
}

uint64_t sub_23AEFECFC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23AEFED20()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AEFED4C()
{
  uint64_t v0;

  return sub_23AEFE514(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_23AEFED5C()
{
  return 500;
}

uint64_t sub_23AEFED64()
{
  return 501;
}

uint64_t sub_23AEFED6C()
{
  return 1002;
}

uint64_t sub_23AEFED74()
{
  return 502;
}

uint64_t sub_23AEFED7C()
{
  return 1001;
}

uint64_t sub_23AEFED84()
{
  return 1000;
}

uint64_t sub_23AEFED8C()
{
  return 1003;
}

unint64_t sub_23AEFED94(uint64_t a1)
{
  unint64_t result;
  _QWORD v3[2];

  if (a1 <= 500)
  {
    result = 0x6574697265686E69;
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = 2038063468;
        break;
      case 2:
        result = 0x7463697665;
        break;
      case 3:
        result = 0x6E776F447065656BLL;
        break;
      default:
        if (a1 == 500)
        {
          result = 0x63617073656D616ELL;
        }
        else
        {
LABEL_17:
          strcpy((char *)v3, "unsupported(");
          sub_23B1C7304();
          sub_23B1C64F4();
          swift_bridgeObjectRelease();
          sub_23B1C64F4();
          result = v3[0];
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 1000:
      case 1001:
        result = 0x63617073656D616ELL;
        break;
      case 1002:
        result = 0xD000000000000016;
        break;
      case 1003:
        result = 0xD00000000000001ELL;
        break;
      default:
        if (a1 == 501)
        {
          result = 0xD000000000000011;
        }
        else
        {
          if (a1 != 502)
            goto LABEL_17;
          result = 0xD000000000000014;
        }
        break;
    }
  }
  return result;
}

unint64_t sub_23AEFEF9C()
{
  uint64_t *v0;

  return sub_23AEFED94(*v0);
}

uint64_t sub_23AEFEFA4(char a1, uint64_t a2)
{
  if (a2 > 999)
  {
    if ((unint64_t)(a2 - 1000) < 2)
      return a1 & 1;
    a1 = 1;
    if (a2 == 1002)
      return a1 & 1;
    return 0;
  }
  if (a2 != 3)
  {
    if (a2 == 500)
      return a1 & 1;
    a1 = 1;
    if (a2 == 501)
      return a1 & 1;
    return 0;
  }
  return 1;
}

uint64_t sub_23AEFF000(int a1, int a2, uint64_t a3)
{
  char v3;

  v3 = 1;
  if (a3 > 999)
  {
    if ((unint64_t)(a3 - 1000) < 2)
      return a1 & 1;
    if (a3 != 1002)
      return 0;
    return v3 & 1;
  }
  if (a3 == 3)
    return v3 & 1;
  v3 = a1;
  if (a3 == 500)
    return v3 & 1;
  if (a3 == 501)
    return ((a2 | a1) ^ 1) & 1;
  return 0;
}

uint64_t sub_23AEFF068(uint64_t a1, uint64_t a2, char a3, unsigned __int8 a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;

  v7 = sub_23AEFF0F4(a1, a2, 0, a3, a4, 0);
  v8 = sub_23AEFF0F4(a2, 0, 1, a3, a4, 0);
  v9 = 501;
  if (v8 == 3)
    v9 = 3;
  if (v7 != 501)
    v9 = v7;
  if (v9 == 1002 || v9 == 3)
    v11 = 5;
  else
    v11 = 4;
  if (v9 == 500)
    return 0;
  else
    return v11;
}

uint64_t sub_23AEFF0F4(uint64_t result, uint64_t a2, char a3, char a4, unsigned __int8 a5, unsigned __int8 a6)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a3 & 1;
  if (result > 499)
  {
    if (result != 500)
    {
      if (result == 502)
        goto LABEL_58;
      v9 = a2;
      if (result != 1001)
        goto LABEL_16;
      goto LABEL_12;
    }
LABEL_43:
    if ((a5 & 1) != 0)
      return 500;
    goto LABEL_45;
  }
  if ((unint64_t)(result - 1) < 3)
    goto LABEL_58;
  if (result)
  {
    v9 = a2;
    goto LABEL_16;
  }
  if ((a3 & 1) != 0)
    goto LABEL_45;
  v9 = 0;
  v8 = 1;
  if (a2 <= 499)
  {
    if ((unint64_t)(a2 - 1) >= 3)
    {
      result = a2;
      if (a2)
        goto LABEL_16;
LABEL_45:
      if (qword_2542E76D8 != -1)
      {
        v17 = a4;
        swift_once();
        a4 = v17;
      }
      v11 = 1;
      if ((a4 & 1) == 0)
        v11 = 2;
      v12 = 2;
      if (dword_2542EE108 == 9)
        v12 = 1;
      if (dword_2542EE108 == 3)
        v13 = 1;
      else
        v13 = v12;
      if ((dword_2542EE108 - 1) >= 2)
        return v13;
      else
        return v11;
    }
    goto LABEL_57;
  }
  if (a2 == 500)
    goto LABEL_43;
  if (a2 == 502)
  {
LABEL_57:
    result = a2;
LABEL_58:
    if ((a4 & 1) != 0)
      return result;
    goto LABEL_59;
  }
  result = a2;
  if (a2 == 1001)
  {
LABEL_12:
    if ((a5 & 1) != 0)
      return 500;
    else
      return 2;
  }
LABEL_16:
  if ((unint64_t)(result - 1000) <= 3 && result != 1001)
  {
    if ((a5 & 1) == 0)
    {
      v10 = 502;
      if (result != 1003)
        v10 = 0;
      if (result == 1002)
        v10 = 3;
      if (result == 1000)
        result = 1;
      else
        result = v10;
      if ((a4 & 1) != 0)
        return result;
LABEL_59:
      if (qword_2542E76D8 != -1)
      {
        v16 = result;
        swift_once();
        result = v16;
      }
      if ((dword_2542EE108 - 1) < 2)
        return 2;
      return result;
    }
    return 500;
  }
  if (result != 501)
    goto LABEL_33;
  if ((v8 & 1) != 0)
  {
    if ((a6 & 1) == 0 && (a5 & 1) == 0)
      return 501;
LABEL_33:
    if (qword_2542E76D8 != -1)
    {
      v18 = a4;
      swift_once();
      a4 = v18;
    }
    if ((dword_2542EE108 - 1) < 2)
    {
      if ((a4 & 1) != 0)
        return 1;
      else
        return 2;
    }
    else
    {
      result = 1;
      if (dword_2542EE108 != 3 && dword_2542EE108 != 9)
        return 2;
    }
    return result;
  }
  v14 = sub_23AEFF0F4(v9, 0, 1, a4 & 1, a5 & 1, a6 & 1);
  v15 = 501;
  if (((a6 | a5) & 1) != 0)
    v15 = v14;
  if (v14 == 3)
    return 3;
  else
    return v15;
}

void sub_23AEFF384()
{
  type metadata accessor for ReconciliationID();
}

void sub_23AEFF3FC(int8x16_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;

  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = a1[1].i64[1];
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, v5, v7);
    v8 = a1[1].i64[0];
    v10 = v7;
    v11 = v8;
    v12 = vextq_s8(a1[2], a1[2], 8uLL);
    type metadata accessor for ReconciliationID();
  }
  v9 = a1[1].i64[0];
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a2, v5, v9);
  v10 = a1[1].i64[1];
  v11 = v9;
  v12 = vextq_s8(a1[2], a1[2], 8uLL);
  type metadata accessor for ReconciliationID();
}

void sub_23AEFF4F0()
{
  JUMPOUT(0x23AEFF4F8);
}

uint64_t sub_23AEFF51C(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  sub_23B1C74A8();
  sub_23AA99324((uint64_t)v4, a2);
  return sub_23B1C74E4();
}

void sub_23AEFF560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23AAB1264(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void sub_23AEFF570()
{
  sub_23AEFFFE0();
}

void sub_23AEFF590()
{
  type metadata accessor for ItemReconciliation();
}

uint64_t sub_23AEFF614()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_23AEFF69C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_23AEFF7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_23AEFF944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_23AEFFA18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_23AEFFB94(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23AEFFC5C + 4 * byte_23B1DCE68[(v4 - 1)]))();
}

void sub_23AEFFCA8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_23AEFFE54(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23AEFFEA0 + 4 * byte_23B1DCE76[v3]))();
}

void sub_23AEFFEE8(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v4] = a2;
  }
}

void sub_23AEFFFD0()
{
  JUMPOUT(0x23B8613CCLL);
}

void sub_23AEFFFE0()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23AF0000C(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v26 = MEMORY[0x24BEE4AF8];
  sub_23AAB5A68(0, v1, 0);
  v2 = v26;
  result = sub_23AB55C74(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v22 = v1;
  v23 = v5;
  v24 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v6);
    v13 = v12[1];
    v25 = *v12;
    v15 = *(_QWORD *)(v26 + 16);
    v14 = *(_QWORD *)(v26 + 24);
    result = swift_bridgeObjectRetain();
    if (v15 >= v14 >> 1)
      result = sub_23AAB5A68(v14 > 1, v15 + 1, 1);
    *(_QWORD *)(v26 + 16) = v15 + 1;
    v16 = v26 + 16 * v15;
    *(_QWORD *)(v16 + 32) = v25;
    *(_QWORD *)(v16 + 40) = v13;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v17 = *(_QWORD *)(v24 + 8 * v11);
    if ((v17 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v23;
    if (*(_DWORD *)(a1 + 36) != v23)
      goto LABEL_27;
    v18 = v17 & (-2 << (v6 & 0x3F));
    if (v18)
    {
      v9 = __clz(__rbit64(v18)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v22;
    }
    else
    {
      v19 = v11 + 1;
      v20 = (unint64_t)(v9 + 63) >> 6;
      v10 = v22;
      if (v11 + 1 < v20)
      {
        v21 = *(_QWORD *)(v24 + 8 * v19);
        if (v21)
        {
LABEL_20:
          v9 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v11)
          {
            v21 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v21)
            {
              v19 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v9;
    if (v7 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_23AF00214(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE880);
    v4 = sub_23B1C620C();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_23AF002A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;

  type metadata accessor for GSConflictManager();
  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 24) = 0;
  type metadata accessor for GSRemoteVersionsManager();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = objc_msgSend(objc_allocWithZone((Class)FPGSStorageManager), sel_init);
  *(_QWORD *)(v0 + 16) = v1;
  if (qword_2569E12D8 != -1)
    swift_once();
  v2 = qword_2569E12D0;
  v3 = (id)qword_2569E6F88;
  if (v2 != -1)
    swift_once();
  objc_msgSend(v3, sel_setUnderlyingQueue_, qword_2569E6F80);

  qword_256A079B0 = v0;
}

uint64_t *sub_23AF00398()
{
  if (qword_2569E12C8 != -1)
    swift_once();
  return &qword_256A079B0;
}

uint64_t sub_23AF003D8()
{
  if (qword_2569E12C8 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_23AF00418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[2];
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v0 = sub_23B1C6B3C();
  v21 = *(_QWORD *)(v0 - 8);
  v22 = v0;
  MEMORY[0x24BDAC7A8](v0);
  v20 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_23B1C6AE8();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v19 - v8;
  v10 = sub_23B1C60A4();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v19 - v15;
  v19[1] = sub_23AA9F52C(0, (unint64_t *)&qword_2542E5500);
  sub_23B1C6068();
  v23 = MEMORY[0x24BEE4AF8];
  sub_23AA7E38C((unint64_t *)&qword_2542E7500, v3, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E74C0);
  sub_23AD40DEC();
  sub_23B1C6DE8();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v2);
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v20, *MEMORY[0x24BEE5758], v22);
  v17 = sub_23B1C6B60();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v2);
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  qword_2569E6F80 = v17;
  return result;
}

id sub_23AF00668()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1710]), sel_init);
  qword_2569E6F88 = (uint64_t)result;
  return result;
}

uint64_t sub_23AF00698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD aBlock[7];

  v52 = a2;
  v48 = a4;
  v49 = a5;
  v47 = a3;
  v6 = sub_23B1C5A08();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = dispatch_group_create();
  v50 = swift_allocObject();
  *(_QWORD *)(v50 + 16) = 0;
  v10 = swift_allocObject();
  v11 = MEMORY[0x24BEE4B00];
  v46 = v10;
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4B00];
  v51 = swift_allocObject();
  *(_BYTE *)(v51 + 16) = 0;
  v44 = swift_allocObject();
  *(_BYTE *)(v44 + 16) = 0;
  v54 = swift_allocObject();
  *(_QWORD *)(v54 + 16) = v11;
  v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1570]), sel_init);
  v12 = (void *)objc_opt_self();
  v13 = (void *)sub_23B1C5954();
  v14 = objc_msgSend(v12, sel_writingIntentWithURL_options_, v13, 0);

  v15 = v9;
  dispatch_group_enter(v9);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE870);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_23B1CE680;
  *(_QWORD *)(v16 + 32) = v14;
  aBlock[0] = v16;
  sub_23B1C671C();
  sub_23AA9F52C(0, &qword_2569E6F90);
  v45 = v14;
  v42 = sub_23B1C66F8();
  swift_bridgeObjectRelease();
  if (qword_2569E12D8 != -1)
    swift_once();
  v41 = (id)qword_2569E6F88;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v17 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v18 = (v8 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v40 = v6;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = v7;
  v22 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (char *)swift_allocObject();
  *((_QWORD *)v24 + 2) = v50;
  *((_QWORD *)v24 + 3) = v15;
  v25 = v53;
  *((_QWORD *)v24 + 4) = v52;
  *((_QWORD *)v24 + 5) = v25;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(&v24[v17], v23, v40);
  v26 = v46;
  *(_QWORD *)&v24[v18] = v46;
  *(_QWORD *)&v24[v19] = v54;
  *(_QWORD *)&v24[v20] = v51;
  *(_QWORD *)&v24[v22] = v47;
  v27 = v44;
  *(_QWORD *)&v24[(v22 + 15) & 0xFFFFFFFFFFFFFFF8] = v44;
  aBlock[4] = sub_23AF03EFC;
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AC46D44;
  aBlock[3] = &block_descriptor_19;
  v28 = _Block_copy(aBlock);
  v29 = v41;
  v30 = v50;
  swift_retain();
  v31 = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  v32 = v51;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  v33 = (void *)v42;
  v34 = v43;
  objc_msgSend(v43, sel_coordinateAccessWithIntents_queue_byAccessor_, v42, v29, v28);
  _Block_release(v28);

  v35 = v30;
  if (qword_2569E12D0 != -1)
    swift_once();
  v36 = (void *)qword_2569E6F80;
  v37 = (_QWORD *)swift_allocObject();
  v37[2] = v26;
  v37[3] = v27;
  v37[4] = v32;
  v37[5] = v35;
  v38 = v49;
  v37[6] = v48;
  v37[7] = v38;
  v37[8] = v54;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23AA81A30((uint64_t)"updateListOfConflictsToGS(url:toAdd:toRemove:completion:)", 57, 2, 0, v36, (uint64_t)sub_23AF03FE4, (uint64_t)v37);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_23AF00B80()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_23AF00BA4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AF00BC8()
{
  return swift_deallocObject();
}

void sub_23AF00BD8(void *a1, uint64_t a2, NSObject *a3, uint64_t a4, NSObject *a5, uint64_t a6, uint64_t a7, uint64_t a8, NSObject *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint8_t *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  NSObject *v38;
  id v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  Class isa;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  void *v56;
  NSObject *v57;
  uint64_t v58;
  void *v59;
  id v60;
  id v61;
  NSObject *v62;
  NSObject *v63;
  NSObject *v64;
  unint64_t v65;
  id v66;
  void *v67;
  unint64_t v68;
  id v69;
  NSObject *v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  id aBlock[8];

  v84 = a5;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v18 = sub_23B1C5E4C();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v77 - v24;
  if (a1)
  {
    swift_beginAccess();
    v26 = *(void **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = a1;
    v27 = a1;
    v28 = a1;

    dispatch_group_leave(a3);
  }
  else
  {
    v78 = v23;
    v79 = a6;
    v83 = a7;
    v77 = a10;
    v80 = a9;
    dispatch_group_enter(a3);
    v29 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    swift_bridgeObjectRetain();
    v30 = sub_23B1C5E40();
    v31 = sub_23B1C6A94();
    v32 = os_log_type_enabled(v30, v31);
    v82 = a2;
    if (v32)
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v33 = 134217984;
      aBlock[0] = *(id *)(a4 + 16);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23AA66000, v30, v31, "⚔️  Adding %ld conflicts...", v33, 0xCu);
      MEMORY[0x23B8614BC](v33, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v81 = a11;
    v34 = *(void (**)(char *, uint64_t))(v19 + 8);
    v35 = v78;
    v34(v25, v78);
    v36 = (_QWORD *)swift_allocObject();
    v37 = v83;
    v36[2] = a3;
    v36[3] = v37;
    v36[4] = a8;
    v36[5] = a4;
    v36[6] = v80;
    swift_bridgeObjectRetain();
    v38 = a3;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_23AF0277C(v79, a4, (uint64_t)sub_23AF0431C, (uint64_t)v36);
    swift_release();
    v80 = v38;
    dispatch_group_enter(v38);
    v39 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v40 = v77;
    swift_bridgeObjectRetain();
    v41 = sub_23B1C5E40();
    v42 = sub_23B1C6A94();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v43 = 134217984;
      aBlock[0] = *(id *)(v40 + 16);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23AA66000, v41, v42, "⚔️  Removing %ld conflicts...", v43, 0xCu);
      MEMORY[0x23B8614BC](v43, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v34(v22, v35);
    isa = v84[2].isa;
    v45 = swift_bridgeObjectRetain();
    v46 = sub_23AF0000C(v45);
    swift_bridgeObjectRelease();
    v47 = sub_23B1C63E0();
    v49 = v48;
    v50 = (_QWORD *)swift_allocObject();
    v51 = v80;
    v52 = v81;
    v53 = v82;
    v54 = v83;
    v50[2] = v80;
    v50[3] = v53;
    v50[4] = v54;
    v50[5] = v52;
    v55 = (_QWORD *)v46;
    if (*(_QWORD *)(v46 + 16))
    {
      v78 = (uint64_t)isa;
      v56 = (void *)*((_QWORD *)isa + 2);
      v57 = v51;
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      v84 = v57;
      v58 = v79;
      v59 = (void *)sub_23B1C5954();
      aBlock[0] = 0;
      v60 = objc_msgSend(v56, sel_permanentStorageForItemAtURL_allocateIfNone_error_, v59, 0, aBlock);

      if (v60)
      {
        v61 = aBlock[0];
        v71 = sub_23ADA5E34(v58, v47, v49);
        swift_bridgeObjectRetain();
        v72 = sub_23AF04374(v71, v55);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23AA9F52C(0, (unint64_t *)&qword_2569E3200);
        v73 = (void *)sub_23B1C66F8();
        v74 = (_QWORD *)swift_allocObject();
        v75 = v78;
        v74[2] = v72;
        v74[3] = v75;
        v74[4] = sub_23AF04368;
        v74[5] = v50;
        aBlock[4] = sub_23AF045D4;
        aBlock[5] = v74;
        aBlock[0] = (id)MEMORY[0x24BDAC760];
        aBlock[1] = (id)1107296256;
        aBlock[2] = sub_23AF00214;
        aBlock[3] = &block_descriptor_43_0;
        v76 = _Block_copy(aBlock);
        swift_retain();
        swift_retain();
        swift_release();
        objc_msgSend(v60, sel_removeAdditions_completionHandler_, v73, v76);
        _Block_release(v76);

        swift_release();
      }
      else
      {
        v66 = aBlock[0];
        v67 = (void *)sub_23B1C587C();

        swift_willThrow();
        v68 = sub_23AAEC1A0(MEMORY[0x24BEE4AF8]);
        v69 = v67;
        v70 = v84;
        sub_23AF016E8(v68, v67, v84, v82, v54, v81);

        swift_bridgeObjectRelease();
        swift_release();
      }
      v62 = v80;
    }
    else
    {
      v62 = v51;
      v63 = v51;
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      v64 = v63;
      v65 = sub_23AAEC1A0(MEMORY[0x24BEE4AF8]);
      sub_23AF016E8(v65, 0, v64, v53, v54, v52);

      swift_release();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    dispatch_group_leave(v62);
  }
}

void sub_23AF012F4(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v12;
  _QWORD *v13;

  v12 = (_QWORD *)(a4 + 16);
  v13 = (_QWORD *)(a5 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23B0DB544(a3, a2, v12, v13, a1);
  if (*(_QWORD *)(a2 + 16) < *(_QWORD *)(a6 + 16))
  {
    swift_beginAccess();
    *(_BYTE *)(a7 + 16) = 1;
  }
  dispatch_group_leave(a3);
}

uint64_t sub_23AF013A8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v41;
  int64_t v42;
  int64_t v44;
  _QWORD *v45;

  v41 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v42 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  for (i = 0; ; i = v44)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v44 = i;
      v12 = v11 | (i << 6);
    }
    else
    {
      v13 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_36;
      if (v13 >= v42)
      {
LABEL_33:
        swift_release();
        swift_beginAccess();
        *a3 = a4;
        swift_bridgeObjectRetain();
        return swift_bridgeObjectRelease();
      }
      v14 = *(_QWORD *)(v41 + 8 * v13);
      v15 = i + 1;
      if (!v14)
      {
        v15 = i + 2;
        if (i + 2 >= v42)
          goto LABEL_33;
        v14 = *(_QWORD *)(v41 + 8 * v15);
        if (!v14)
        {
          v15 = i + 3;
          if (i + 3 >= v42)
            goto LABEL_33;
          v14 = *(_QWORD *)(v41 + 8 * v15);
          if (!v14)
          {
            v16 = i + 4;
            if (i + 4 >= v42)
              goto LABEL_33;
            v14 = *(_QWORD *)(v41 + 8 * v16);
            if (!v14)
            {
              while (1)
              {
                v15 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_37;
                if (v15 >= v42)
                  goto LABEL_33;
                v14 = *(_QWORD *)(v41 + 8 * v15);
                ++v16;
                if (v14)
                  goto LABEL_21;
              }
            }
            v15 = i + 4;
          }
        }
      }
LABEL_21:
      v7 = (v14 - 1) & v14;
      v44 = v15;
      v12 = __clz(__rbit64(v14)) + (v15 << 6);
    }
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v12);
    swift_beginAccess();
    v21 = v20;
    v22 = v20;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = (_QWORD *)*a2;
    v45 = (_QWORD *)*a2;
    *a2 = 0x8000000000000000;
    v26 = sub_23AAAF4C4(v19, v18);
    v27 = v24[2];
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
      break;
    v30 = v25;
    if (v24[3] >= v29)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v33 = v45;
        if ((v25 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_23B18A52C();
        v33 = v45;
        if ((v30 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_23AD1714C(v29, isUniquelyReferenced_nonNull_native);
      v31 = sub_23AAAF4C4(v19, v18);
      if ((v30 & 1) != (v32 & 1))
        goto LABEL_38;
      v26 = v31;
      v33 = v45;
      if ((v30 & 1) != 0)
      {
LABEL_4:
        v9 = v33[7];
        v10 = 8 * v26;

        *(_QWORD *)(v9 + v10) = v20;
        goto LABEL_5;
      }
    }
    v33[(v26 >> 6) + 8] |= 1 << v26;
    v34 = (uint64_t *)(v33[6] + 16 * v26);
    *v34 = v19;
    v34[1] = v18;
    *(_QWORD *)(v33[7] + 8 * v26) = v20;
    v35 = v33[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_35;
    v33[2] = v37;
    swift_bridgeObjectRetain();
LABEL_5:
    *a2 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();

  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  result = sub_23B1C7418();
  __break(1u);
  return result;
}

void sub_23AF016E8(uint64_t a1, id a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v9;
  void **v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t i;
  BOOL v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  char v38;
  char v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[16];
  NSObject *v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  int64_t v53;
  _QWORD *v54;

  v52 = a1;
  v9 = 0;
  if (a2)
  {
    v11 = (void **)(a4 + 16);
    v12 = a2;
    sub_23B0DAAE4(a3, v11, a2);
  }
  v13 = (_QWORD *)(a5 + 16);
  v48 = 0;
  v49 = (_BYTE *)(a6 + 16);
  v14 = *(_QWORD *)(v52 + 64);
  v50 = v52 + 64;
  v15 = 1 << *(_BYTE *)(v52 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v51 = (unint64_t)(v15 + 63) >> 6;
  v18 = swift_bridgeObjectRetain();
  v19 = 0;
  if (!v17)
    goto LABEL_7;
LABEL_6:
  v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v53 = v19;
  for (i = v20 | (v19 << 6); ; i = __clz(__rbit64(v24)) + (v23 << 6))
  {
    v26 = (uint64_t *)(*(_QWORD *)(v52 + 48) + 16 * i);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(void **)(*(_QWORD *)(v52 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    v30 = v29;
    v9 = a3;
    v18 = objc_sync_enter(a3);
    if ((_DWORD)v18)
      goto LABEL_44;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v31 = v29;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v54 = (_QWORD *)*v13;
    v33 = v54;
    *v13 = 0x8000000000000000;
    v35 = sub_23AAAF4C4(v28, v27);
    v36 = v33[2];
    v37 = (v34 & 1) == 0;
    v18 = v36 + v37;
    if (__OFADD__(v36, v37))
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v38 = v34;
    if (v33[3] >= v18)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v40 = v54;
        if ((v34 & 1) != 0)
          goto LABEL_27;
      }
      else
      {
        v18 = (uint64_t)sub_23B18A52C();
        v40 = v54;
        if ((v38 & 1) != 0)
          goto LABEL_27;
      }
    }
    else
    {
      sub_23AD1714C(v18, isUniquelyReferenced_nonNull_native);
      v18 = sub_23AAAF4C4(v28, v27);
      if ((v38 & 1) != (v39 & 1))
      {
        sub_23B1C7418();
        __break(1u);
        return;
      }
      v35 = v18;
      v40 = v54;
      if ((v38 & 1) != 0)
      {
LABEL_27:
        v44 = v40[7];

        *(_QWORD *)(v44 + 8 * v35) = v29;
        goto LABEL_28;
      }
    }
    v40[(v35 >> 6) + 8] |= 1 << v35;
    v41 = (uint64_t *)(v40[6] + 16 * v35);
    *v41 = v28;
    v41[1] = v27;
    *(_QWORD *)(v40[7] + 8 * v35) = v29;
    v42 = v40[2];
    v22 = __OFADD__(v42, 1);
    v43 = v42 + 1;
    if (v22)
      goto LABEL_41;
    v40[2] = v43;
    swift_bridgeObjectRetain();
LABEL_28:
    *v13 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    a3 = v9;
    v45 = objc_sync_exit(v9);
    if ((_DWORD)v45)
    {
      MEMORY[0x24BDAC7A8](v45);
      v47 = v9;
      sub_23AFF56B8((uint64_t (*)(uint64_t))sub_23ABD7710, (uint64_t)v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318);
    }
    swift_bridgeObjectRelease();

    v19 = v53;
    if (v17)
      goto LABEL_6;
LABEL_7:
    v22 = __OFADD__(v19, 1);
    v23 = v19 + 1;
    if (v22)
      goto LABEL_42;
    if (v23 >= v51)
      break;
    v24 = *(_QWORD *)(v50 + 8 * v23);
    if (v24)
      goto LABEL_17;
    v25 = v23 + 1;
    if (v23 + 1 >= v51)
      break;
    v24 = *(_QWORD *)(v50 + 8 * v25);
    if (!v24)
    {
      v25 = v23 + 2;
      if (v23 + 2 >= v51)
        break;
      v24 = *(_QWORD *)(v50 + 8 * v25);
      if (!v24)
      {
        v25 = v23 + 3;
        if (v23 + 3 >= v51)
          break;
        v24 = *(_QWORD *)(v50 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v23 = v25 + 1;
            if (__OFADD__(v25, 1))
              break;
            if (v23 >= v51)
              goto LABEL_37;
            v24 = *(_QWORD *)(v50 + 8 * v23);
            ++v25;
            if (v24)
              goto LABEL_17;
          }
LABEL_43:
          __break(1u);
LABEL_44:
          MEMORY[0x24BDAC7A8](v18);
          v47 = v9;
          sub_23AFF56B8((uint64_t (*)(uint64_t))sub_23ABD7708, (uint64_t)v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314);
        }
      }
    }
    v23 = v25;
LABEL_17:
    v17 = (v24 - 1) & v24;
    v53 = v23;
  }
LABEL_37:
  swift_release();
  if (!*(_QWORD *)(v52 + 16))
  {
    swift_beginAccess();
    *v49 = 1;
  }
  dispatch_group_leave(a3);
}

void sub_23AF01B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(unint64_t, uint64_t, void *), uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  uint64_t v42;
  _BYTE *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  void **v46;
  void *v47;
  id v48;
  unint64_t v49;
  id v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  void (*v61)(unint64_t, uint64_t, void *);
  _BYTE *v62;
  void **v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[5];

  v60 = a6;
  v61 = a5;
  v72 = sub_23B1C5E4C();
  v71 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v62 = (_BYTE *)(a2 + 16);
  v59 = (unsigned __int8 *)(a3 + 16);
  v63 = (void **)(a4 + 16);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = a7 + 16;
  v58 = (uint64_t *)(a1 + 16);
  swift_beginAccess();
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(v14 + 64);
  v68 = v14 + 64;
  v16 = 1 << *(_BYTE *)(v14 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v69 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain();
  v19 = 0;
  *(_QWORD *)&v20 = 136315394;
  v65 = v20;
  v64 = MEMORY[0x24BEE4AD8] + 8;
  v67 = v13;
  v66 = v14;
  while (1)
  {
    if (v18)
    {
      v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v23 >= v69)
      goto LABEL_24;
    v24 = *(_QWORD *)(v68 + 8 * v23);
    ++v19;
    if (!v24)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v69)
        goto LABEL_24;
      v24 = *(_QWORD *)(v68 + 8 * v19);
      if (!v24)
      {
        v19 = v23 + 2;
        if (v23 + 2 >= v69)
          goto LABEL_24;
        v24 = *(_QWORD *)(v68 + 8 * v19);
        if (!v24)
          break;
      }
    }
LABEL_21:
    v18 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v19 << 6);
LABEL_22:
    v26 = (uint64_t *)(*(_QWORD *)(v14 + 48) + 16 * v22);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(void **)(*(_QWORD *)(v14 + 56) + 8 * v22);
    swift_bridgeObjectRetain();
    v30 = v29;
    v31 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v32 = v29;
    swift_bridgeObjectRetain();
    v33 = v29;
    v34 = sub_23B1C5E40();
    v35 = sub_23B1C6AA0();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc();
      v37 = swift_slowAlloc();
      v70 = v19;
      v38 = (_QWORD *)v37;
      v39 = swift_slowAlloc();
      v73[0] = v39;
      *(_DWORD *)v36 = v65;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v36 + 4) = sub_23AABEC68(v28, v27, v73);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v36 + 12) = 2112;
      swift_getErrorValue();
      v40 = sub_23B0D9CF0(v73[4]);
      *(_QWORD *)(v36 + 14) = v40;
      *v38 = v40;

      _os_log_impl(&dword_23AA66000, v34, v35, "⚔️  Error when updating conflict loser with version %s: %@", (uint8_t *)v36, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      v41 = v38;
      v19 = v70;
      MEMORY[0x23B8614BC](v41, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v39, -1, -1);
      v42 = v36;
      v14 = v66;
      v13 = v67;
      MEMORY[0x23B8614BC](v42, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v71 + 8))(v13, v72);
  }
  v25 = v23 + 3;
  if (v25 >= v69)
  {
LABEL_24:
    swift_release();
    v43 = v62;
    swift_beginAccess();
    if ((*v43 & 1) != 0)
    {
      v44 = v59;
      swift_beginAccess();
      v45 = *v44;
    }
    else
    {
      v45 = 1;
    }
    v46 = v63;
    swift_beginAccess();
    v47 = *v46;
    if (*v46)
    {
      v48 = v47;
      v49 = sub_23AAEBBFC(MEMORY[0x24BEE4AF8]);
      v50 = v47;
      v61(v49, v45, v47);

    }
    else
    {
      v51 = v58;
      swift_beginAccess();
      sub_23AB55B58(*v51);
      if (!v53)
      {
        swift_beginAccess();
        v56 = swift_bridgeObjectRetain();
        v61(v56, v45, 0);
        swift_bridgeObjectRelease();
        return;
      }
      v47 = v52;
      v54 = sub_23AAEBBFC(MEMORY[0x24BEE4AF8]);
      v55 = v47;
      v61(v54, v45, v47);

      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();

    return;
  }
  v24 = *(_QWORD *)(v68 + 8 * v25);
  if (v24)
  {
    v19 = v25;
    goto LABEL_21;
  }
  while (1)
  {
    v19 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v19 >= v69)
      goto LABEL_24;
    v24 = *(_QWORD *)(v68 + 8 * v19);
    ++v25;
    if (v24)
      goto LABEL_21;
  }
LABEL_35:
  __break(1u);
}

void sub_23AF02144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v14 = a2;
  v6 = sub_23B1C5A08();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  if (qword_2569E12D0 != -1)
    swift_once();
  v9 = (id)fpfs_current_log();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v12 = (_QWORD *)(v11 + ((v8 + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v12 = v14;
  v12[1] = a3;
  swift_retain();
  swift_retain();
  sub_23AA814FC(v9, (uint64_t)"listConflicts(for:completionHandler:)", 37, 2, (uint64_t)sub_23AF03FFC, v11);
  swift_release();

}

uint64_t sub_23AF022B4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  unint64_t v15;

  v15 = sub_23AAEA128(MEMORY[0x24BEE4AF8]);
  v5 = sub_23B1C63E0();
  v7 = sub_23ADA5E34(a2, v5, v6);
  swift_bridgeObjectRelease();
  if (!(v7 >> 62))
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease_n();
    v13 = swift_bridgeObjectRetain();
    a3(v13, 0);
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  result = sub_23B1C7088();
  v8 = result;
  if (!result)
    goto LABEL_10;
LABEL_3:
  if (v8 >= 1)
  {
    v10 = 0;
    do
    {
      if ((v7 & 0xC000000000000001) != 0)
        v11 = (id)MEMORY[0x23B85F860](v10, v7);
      else
        v11 = *(id *)(v7 + 8 * v10 + 32);
      v12 = v11;
      ++v10;
      v14 = v11;
      sub_23AF0246C(&v14, (uint64_t *)&v15);

    }
    while (v8 != v10);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void sub_23AF0246C(id *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  id v22;
  NSObject *v23;
  uint64_t v24;
  uint8_t *v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = sub_23B1C5E4C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = objc_msgSend(v9, sel_name);
  if (!v10)
  {
    __break(1u);
LABEL_12:

    __break(1u);
    return;
  }
  v11 = v10;
  v12 = objc_msgSend((id)objc_opt_self(), sel_parseEtag_, v10);

  if (!v12)
  {
    v22 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v9 = v9;
    v23 = sub_23B1C5E40();
    v24 = sub_23B1C6AA0();
    if (!os_log_type_enabled(v23, (os_log_type_t)v24))
    {

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return;
    }
    v34 = v5;
    v35 = v2;
    v25 = (uint8_t *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    v37 = v33;
    *(_DWORD *)v25 = 136315138;
    v26 = objc_msgSend(v9, sel_name);
    if (v26)
    {
      v27 = v26;
      v32[1] = v25 + 4;
      v28 = sub_23B1C63E0();
      v30 = v29;

      v36 = sub_23AABEC68(v28, v30, &v37);
      sub_23B1C6CBC();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23AA66000, v23, (os_log_type_t)v24, "⚔️  Loser %s has invalid format, ignoring it...", v25, 0xCu);
      v31 = v33;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v31, -1, -1);
      MEMORY[0x23B8614BC](v25, -1, -1);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v34);
      return;
    }
    goto LABEL_12;
  }
  v13 = sub_23B1C63E0();
  v15 = v14;

  v16 = objc_msgSend(v9, sel_name);
  if (v16)
  {
    v17 = v16;
    v18 = sub_23B1C63E0();
    v20 = v19;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v37 = *a2;
    *a2 = 0x8000000000000000;
    sub_23AD24F84(v18, v20, v13, v15, isUniquelyReferenced_nonNull_native);
    *a2 = v37;
  }
  else
  {
    sub_23B182504(v13, v15);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_23AF0277C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v41 = a1;
  v7 = type metadata accessor for StagedRemoteVersion(0);
  v40 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v40 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v43 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = dispatch_group_create();
  v10 = swift_allocObject();
  v11 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4B00];
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v11;
  v13 = *(_QWORD *)(a2 + 16);
  if (v13)
  {
    v35 = a3;
    v36 = a4;
    v14 = type metadata accessor for GSConflictInfo(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v42 = v10;
    v17 = (id *)(a2 + v16);
    v38 = *(_QWORD *)(v15 + 72);
    v39 = v14;
    v37 = v8 + 7;
    v34 = a2;
    swift_bridgeObjectRetain();
    v18 = v42;
    v19 = v43;
    do
    {
      v45 = v13;
      dispatch_group_enter(v9);
      v20 = *(int *)(v39 + 24);
      v44 = (uint64_t)v17 + *(int *)(v39 + 20);
      v21 = *(uint64_t *)((char *)v17 + v20);
      v22 = *(unint64_t *)((char *)v17 + v20 + 8);
      sub_23AF04020((uint64_t)v17, v19);
      v23 = v12;
      v24 = v9;
      v25 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      v26 = (v37 + v25) & 0xFFFFFFFFFFFFFFF8;
      v27 = swift_allocObject();
      *(_QWORD *)(v27 + 16) = v24;
      *(_QWORD *)(v27 + 24) = v18;
      v28 = v27 + v25;
      v9 = v24;
      v12 = v23;
      v19 = v43;
      sub_23AF04150(v43, v28);
      *(_QWORD *)(v27 + v26) = v12;
      sub_23AAA3E2C(v21, v22);
      v29 = v9;
      swift_retain();
      swift_retain();
      sub_23AF02DDC(v41, v17, v44, v21, v22, sub_23AF04194, v27);
      v30 = v45;
      swift_release();
      sub_23AAA3E18(v21, v22);
      v17 = (id *)((char *)v17 + v38);
      v13 = v30 - 1;
    }
    while (v13);
    swift_bridgeObjectRelease();
    a3 = v35;
    a4 = v36;
    v10 = v42;
  }
  if (qword_2569E12D0 != -1)
    swift_once();
  v31 = (void *)qword_2569E6F80;
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = a3;
  v32[3] = a4;
  v32[4] = v12;
  v32[5] = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23AA81A30((uint64_t)"saveConflicts(for:conflicts:completionHandler:)", 47, 2, 0, v31, (uint64_t)sub_23AF0421C, (uint64_t)v32);

  swift_release();
  swift_release();
  return swift_release();
}

void sub_23AF02A54(uint64_t a1, NSObject *a2)
{
  sub_23AC45210(a2, sub_23AF04228);
  dispatch_group_leave(a2);
}

void sub_23AF02AB0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  _QWORD v29[2];
  uint64_t v30;

  v29[1] = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23B1C5A08();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E3158);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (void **)((char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23AF04244(a1, (uint64_t)v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = *v15;
    v17 = sub_23AEFDD28();
    v18 = objc_msgSend(v17, sel_description);

    v19 = sub_23B1C63E0();
    v21 = v20;

    swift_beginAccess();
    v22 = v16;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *a2;
    *a2 = 0x8000000000000000;
    sub_23AD26F78((uint64_t)v16, v19, v21, isUniquelyReferenced_nonNull_native);
    *a2 = v30;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();

  }
  else
  {
    v24 = (char *)v15 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2569E3160) + 48);
    (*(void (**)(char *, void **, uint64_t))(v10 + 32))(v12, v15, v9);
    v25 = sub_23AEFDE8C();
    v27 = v26;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    swift_beginAccess();
    sub_23AD040E0((uint64_t)v8, v25, v27);
    swift_endAccess();
    v28 = *(void (**)(char *, uint64_t))(v10 + 8);
    v28(v12, v9);
    v28(v24, v9);
  }
}

uint64_t sub_23AF02D38(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  swift_beginAccess();
  v7 = *(_QWORD *)(a3 + 16);
  swift_beginAccess();
  v8 = *(_QWORD *)(a4 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a1(v7, v8);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AF02DDC(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t inited;
  uint64_t v33;
  unint64_t v34;
  id v35;
  void *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  char *v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v87;
  void *v88;
  id v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  id v94;
  id v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  _QWORD *v99;
  void *v100;
  id v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  id v106;
  id *v107;
  id v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t *v118;
  __int128 v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(uint64_t);
  uint64_t v134;
  id *v135;
  uint64_t v136;
  void (*v137)(char *, uint64_t);
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;

  v132 = a7;
  v133 = a6;
  v122 = a5;
  v123 = a4;
  v124 = a3;
  v125 = a1;
  v141 = *MEMORY[0x24BDAC8D0];
  v115 = sub_23B1C5A08();
  v114 = *(_QWORD *)(v115 - 8);
  MEMORY[0x24BDAC7A8](v115);
  v110 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for StagedRemoteVersion(0);
  MEMORY[0x24BDAC7A8](v121);
  v128 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_23B1C5E4C();
  v126 = *(_QWORD *)(v127 - 8);
  v10 = MEMORY[0x24BDAC7A8](v127);
  v116 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v129 = (char *)&v109 - v12;
  v113 = sub_23B1C5570();
  v112 = *(_QWORD *)(v113 - 8);
  MEMORY[0x24BDAC7A8](v113);
  v111 = (char *)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E3158);
  MEMORY[0x24BDAC7A8](v117);
  v118 = (uint64_t *)((char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E0208);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v109 - v19;
  v131 = sub_23B1C5804();
  v130 = *(_QWORD *)(v131 - 8);
  MEMORY[0x24BDAC7A8](v131);
  v120 = (char *)&v109 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v109 - v26;
  v28 = sub_23B1C5BDC();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v109 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE850);
  inited = swift_initStackObject();
  v119 = xmmword_23B1CA760;
  *(_OWORD *)(inited + 16) = xmmword_23B1CA760;
  *(_QWORD *)(inited + 32) = 0x534650467369;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE1328];
  v33 = 1;
  *(_BYTE *)(inited + 48) = 1;
  v34 = sub_23AAE9EB4(inited);
  v135 = a2;
  v35 = objc_msgSend(*a2, sel_contentModificationDate);
  if (v35)
  {
    v36 = v35;
    sub_23B1C5BAC();

    v33 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v25, v33, 1, v28);
  sub_23AA724E8((uint64_t)v25, (uint64_t)v27, (uint64_t *)&unk_2542E4310);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
  {
    sub_23AA8A05C((uint64_t)v27, (uint64_t *)&unk_2542E4310);
    v37 = (void (*)(char *, uint64_t))v34;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v31, v27, v28);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2569E7080);
    v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E1E98);
    v39 = *(unsigned __int8 *)(*(_QWORD *)(v38 - 8) + 80);
    v40 = (v39 + 32) & ~v39;
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = v119;
    v42 = (_QWORD *)(v41 + v40);
    v43 = v41 + v40 + *(int *)(v38 + 48);
    *v42 = 0xD000000000000010;
    v42[1] = 0x800000023B20ED00;
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))(v43, v31, v28);
    v44 = sub_23AAEAAD0(v41);
    v140 = __swift_instantiateConcreteTypeFromMangledName(qword_2569E7088);
    *(_QWORD *)&v139 = v44;
    sub_23AAA159C(&v139, &v138);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v137 = (void (*)(char *, uint64_t))v34;
    sub_23AD1A024(&v138, 0x656D75636F44534ELL, 0xEE006F666E49746ELL, isUniquelyReferenced_nonNull_native);
    v37 = v137;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  }
  v46 = v131;
  v47 = v130;
  v48 = objc_msgSend(*v135, sel_mostRecentEditorNameComponents);
  if (v48)
  {
    v49 = v48;
    sub_23B1C57F8();

    v50 = 0;
  }
  else
  {
    v50 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v18, v50, 1, v46);
  sub_23AA724E8((uint64_t)v18, (uint64_t)v20, &qword_2542E0208);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v20, 1, v46) == 1)
  {
    sub_23AA8A05C((uint64_t)v20, &qword_2542E0208);
  }
  else
  {
    v51 = v120;
    (*(void (**)(void))(v47 + 32))();
    v52 = (void *)objc_opt_self();
    v53 = (void *)sub_23B1C57EC();
    *(_QWORD *)&v139 = 0;
    v54 = objc_msgSend(v52, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v53, 1, &v139);

    v55 = (id)v139;
    if (!v54)
    {
      v87 = v55;
      swift_bridgeObjectRelease();
      v88 = (void *)sub_23B1C587C();

      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v51, v46);
      v89 = (id)fpfs_current_or_default_log();
      v90 = v116;
      sub_23B1C5E58();
      v91 = v114;
      v92 = v110;
      v93 = v115;
      (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v110, v125, v115);
      v94 = v88;
      v95 = v88;
      v96 = sub_23B1C5E40();
      v97 = sub_23B1C6AA0();
      if (os_log_type_enabled(v96, v97))
      {
        v98 = swift_slowAlloc();
        v99 = (_QWORD *)swift_slowAlloc();
        v135 = (id *)swift_slowAlloc();
        *(_QWORD *)&v139 = v135;
        *(_DWORD *)v98 = 136446466;
        v100 = (void *)sub_23B1C5954();
        v101 = objc_msgSend(v100, sel_fp_shortDescription);

        v102 = sub_23B1C63E0();
        v103 = v92;
        v105 = v104;

        *(_QWORD *)&v138 = sub_23AABEC68(v102, v105, (uint64_t *)&v139);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v114 + 8))(v103, v115);
        *(_WORD *)(v98 + 12) = 2112;
        swift_getErrorValue();
        v106 = sub_23B0D9CF0(v136);
        *(_QWORD *)&v138 = v106;
        sub_23B1C6CBC();
        *v99 = v106;

        _os_log_impl(&dword_23AA66000, v96, v97, "failed to add conflict to %{public}s: %@", (uint8_t *)v98, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v99, -1, -1);
        v107 = v135;
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v107, -1, -1);
        MEMORY[0x23B8614BC](v98, -1, -1);

        (*(void (**)(char *, uint64_t))(v126 + 8))(v116, v127);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v91 + 8))(v92, v93);

        (*(void (**)(char *, uint64_t))(v126 + 8))(v90, v127);
      }
      v73 = (uint64_t)v118;
      *v118 = (uint64_t)v88;
      swift_storeEnumTagMultiPayload();
      v108 = v88;
      v133(v73);

      return sub_23AA8A05C(v73, &qword_2569E3158);
    }
    v56 = sub_23B1C5AD4();
    v58 = v57;

    v140 = MEMORY[0x24BDCDDE8];
    *(_QWORD *)&v139 = v56;
    *((_QWORD *)&v139 + 1) = v58;
    sub_23AAA159C(&v139, &v138);
    sub_23AAAE668(v56, v58);
    v59 = swift_isUniquelyReferenced_nonNull_native();
    v137 = v37;
    sub_23AD1A024(&v138, 0xD000000000000021, 0x800000023B20ECD0, v59);
    v37 = v137;
    swift_bridgeObjectRelease();
    sub_23AAAE53C(v56, v58);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v51, v46);
  }
  v60 = (uint64_t)v135;
  v61 = sub_23AEFDD28();
  v62 = objc_msgSend(v61, sel_lastEditorDeviceName);

  v63 = v134;
  v64 = v129;
  if (v62)
  {
    v65 = sub_23B1C63E0();
    v67 = v66;

    v140 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v139 = v65;
    *((_QWORD *)&v139 + 1) = v67;
    sub_23AAA159C(&v139, &v138);
    v68 = swift_isUniquelyReferenced_nonNull_native();
    v137 = v37;
    sub_23AD1A024(&v138, 0xD00000000000001DLL, 0x800000023B20ECB0, v68);
    v37 = v137;
    swift_bridgeObjectRelease();
  }
  v69 = (uint64_t)v128;
  if (os_variant_has_internal_content() && *(_BYTE *)(v63 + 24) == 1)
  {
    swift_bridgeObjectRelease();
    LODWORD(v139) = 12;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
    v70 = v111;
    v71 = v113;
    sub_23B1C5864();
    v72 = sub_23B1C5558();
    (*(void (**)(char *, uint64_t))(v112 + 8))(v70, v71);
    v73 = (uint64_t)v118;
    *v118 = v72;
    swift_storeEnumTagMultiPayload();
    v133(v73);
    return sub_23AA8A05C(v73, &qword_2569E3158);
  }
  v74 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  sub_23AF04020(v60, v69);
  v75 = sub_23B1C5E40();
  v76 = sub_23B1C6A88();
  if (os_log_type_enabled(v75, v76))
  {
    v77 = (uint8_t *)swift_slowAlloc();
    v78 = swift_slowAlloc();
    *(_QWORD *)&v139 = v78;
    *(_DWORD *)v77 = 136315138;
    v79 = sub_23AEFDE8C();
    *(_QWORD *)&v138 = sub_23AABEC68(v79, v80, (uint64_t *)&v139);
    v60 = (uint64_t)v135;
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    sub_23AF04064(v69);
    _os_log_impl(&dword_23AA66000, v75, v76, "⚔️  Putting loser %s into the Genstore...", v77, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v78, -1, -1);
    MEMORY[0x23B8614BC](v77, -1, -1);
  }
  else
  {
    sub_23AF04064(v69);
  }

  (*(void (**)(char *, uint64_t))(v126 + 8))(v64, v127);
  v81 = sub_23AEFDE8C();
  v83 = v82;
  v84 = sub_23B1C63E0();
  sub_23ADA48B8(v125, v37, v81, v83, v84, v85, (void (*)(char *, uint64_t))(v60 + *(int *)(v121 + 20)), v124, v123, v122, 0, 0, v133, v132);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AF03BFC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = os_variant_has_internal_content();
  if ((_DWORD)result)
    *(_BYTE *)(v1 + 24) = a1 & 1;
  return result;
}

uint64_t sub_23AF03C30()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t sub_23AF03C4C()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_23AF03C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_23AF00698(a1, a2, a3, a4, a5);
}

void sub_23AF03C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v15 = a2;
  v6 = sub_23B1C5A08();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = *v3;
  if (qword_2569E12D0 != -1)
    swift_once();
  v10 = (id)fpfs_current_log();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v9;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v13 = (_QWORD *)(v12 + ((v8 + v11 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v13 = v15;
  v13[1] = a3;
  swift_retain();
  swift_retain();
  sub_23AA814FC(v10, (uint64_t)"listConflicts(for:completionHandler:)", 37, 2, (uint64_t)sub_23AF03FFC, v12);
  swift_release();

}

uint64_t sub_23AF03E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_23B1C5A08();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_23AF03EFC(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(sub_23B1C5A08() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_23AF00BD8(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), *(_QWORD *)(v1 + 32), *(NSObject **)(v1 + 40), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v6), *(NSObject **)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23AF03F98()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23AF03FE4()
{
  uint64_t v0;

  sub_23AF01B18(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void (**)(unint64_t, uint64_t, void *))(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t type metadata accessor for GSConflictManager()
{
  return objc_opt_self();
}

uint64_t sub_23AF04020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StagedRemoteVersion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AF04064(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StagedRemoteVersion(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23AF040A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id *v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for StagedRemoteVersion(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;

  swift_release();
  v4 = (id *)(v0 + v3);

  v5 = (char *)v4 + *(int *)(v1 + 20);
  v6 = sub_23B1C5A08();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AF04150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StagedRemoteVersion(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23AF04194(uint64_t a1)
{
  uint64_t v1;

  type metadata accessor for StagedRemoteVersion(0);
  sub_23AF02A54(a1, *(NSObject **)(v1 + 16));
}

uint64_t sub_23AF041E8()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AF0421C()
{
  uint64_t v0;

  return sub_23AF02D38(*(void (**)(uint64_t, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

void sub_23AF04228()
{
  uint64_t v0;

  sub_23AF02AB0(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_23AF04244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E3158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AF04290()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(sub_23B1C5A08() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_23AF022B4(*(_QWORD *)(v0 + 16), v0 + v2, *(void (**)(uint64_t, _QWORD))(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_23AF042D8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_23AF0431C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23AF012F4(a1, a2, *(NSObject **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_23AF0432C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23AF04368(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_23AF016E8(a1, a2, *(NSObject **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_23AF04374(unint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v3 = a1;
  v28 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_35;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v22 = v3;
      v5 = 0;
      v6 = v3 & 0xC000000000000001;
      v7 = v3 & 0xFFFFFFFFFFFFFF8;
      v26 = v4;
      v27 = (_QWORD *)(v3 + 32);
      v23 = a2 + 7;
      v24 = v3 & 0xFFFFFFFFFFFFFF8;
      v25 = v3 & 0xC000000000000001;
      while (1)
      {
        if (v6)
        {
          v8 = (id)MEMORY[0x23B85F860](v5, v22);
        }
        else
        {
          if (v5 >= *(_QWORD *)(v7 + 16))
          {
            __break(1u);
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
          v8 = (id)v27[v5];
        }
        v9 = v8;
        if (__OFADD__(v5++, 1))
          goto LABEL_33;
        v11 = objc_msgSend(v8, sel_name);
        if (v11)
          break;

LABEL_5:
        if (v5 == v4)
          return v28;
      }
      v12 = v11;
      v13 = sub_23B1C63E0();
      v3 = (unint64_t)v14;

      v15 = (_QWORD *)a2[2];
      if (!v15)
      {

        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      v16 = a2;
      v17 = a2[4] == v13 && a2[5] == v3;
      if (v17 || (sub_23B1C7388() & 1) != 0)
        break;
      if (v15 == (_QWORD *)1)
      {
LABEL_29:

        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
      v18 = v23;
      v19 = 1;
      while (1)
      {
        a2 = (_QWORD *)(v19 + 1);
        if (__OFADD__(v19, 1))
          break;
        v20 = *(v18 - 1) == v13 && *v18 == v3;
        if (v20 || (sub_23B1C7388() & 1) != 0)
          goto LABEL_17;
        v18 += 2;
        ++v19;
        if (a2 == v15)
          goto LABEL_29;
      }
LABEL_34:
      __break(1u);
LABEL_35:
      v4 = sub_23B1C7088();
      if (!v4)
        return MEMORY[0x24BEE4AF8];
    }
LABEL_17:
    swift_bridgeObjectRelease();
    sub_23B1C6F98();
    sub_23B1C6FC8();
    sub_23B1C6FD4();
    v3 = (unint64_t)&v28;
    sub_23B1C6FA4();
LABEL_18:
    v6 = v25;
    v4 = v26;
    a2 = v16;
    v7 = v24;
    goto LABEL_5;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_23AF045A0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AF045D4(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23ADA5C24(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t, uint64_t))(v2 + 32));
}

uint64_t sub_23AF045EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t sub_23AF0466C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = sub_23B1C6C98();
  v16 = *(_QWORD *)(v4 - 8);
  v17 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - v5;
  v7 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v15 - v10;
  if ((sub_23B1C6DD0() & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v18, 1, 1, v3);
  sub_23B1C6650();
  swift_getAssociatedConformanceWitness();
  v13 = sub_23B1C6D34();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  v14 = v18;
  sub_23AF04850(v13, v7, v18);
  sub_23B1C6DC4();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v17);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v14, 0, 1, v3);
}

uint64_t sub_23AF04850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = a1;
  v12 = a3;
  v13 = *(_QWORD *)(a2 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v4 = swift_checkMetadataState();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  swift_getAssociatedConformanceWitness();
  sub_23B1C73F4();
  sub_23B1C7364();
  v14 = v11;
  sub_23AB55910();
  sub_23B1C6D40();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return sub_23B1C7364();
}

uint64_t sub_23AF04A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  void (*v21)(uint64_t, uint64_t);
  int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = sub_23B1C6C98();
  v46 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)((char *)&v45 - v11);
  v13 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v14 = MEMORY[0x24BDAC7A8](v10);
  v48 = (uint64_t *)((char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = MEMORY[0x24BDAC7A8](v14);
  v49 = (uint64_t *)((char *)&v45 - v17);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (uint64_t *)((char *)&v45 - v18);
  v20 = (char *)&v45 + *(int *)(TupleTypeMetadata2 + 48) - v18;
  v21 = *(void (**)(uint64_t, uint64_t))(a2 + 32);
  v52 = a2;
  v21(a1, a2);
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v50(v7, v2, a1);
  v53 = v13;
  v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(v12, 1, TupleTypeMetadata2);
  v51 = TupleTypeMetadata2;
  if (v22 == 1)
  {
    *v19 = 0;
    v19[1] = 0xE000000000000000;
    v23 = v20;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v20, v7, a1);
    (*(void (**)(uint64_t *, uint64_t))(v46 + 8))(v12, v47);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a1);
    v24 = (char *)v12 + *(int *)(TupleTypeMetadata2 + 48);
    v25 = v12[1];
    *v19 = *v12;
    v19[1] = v25;
    v23 = v20;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v20, v24, a1);
  }
  v26 = v52;
  v27 = *(_QWORD *)(v52 + 16);
  v28 = sub_23B1C6DD0();
  if ((v28 & 1) != 0)
  {
    v29 = v51;
    v30 = v48;
    v31 = (char *)v48 + *(int *)(v51 + 48);
    v32 = *v19;
    v33 = v19[1];
    *v48 = *v19;
    v30[1] = v33;
    v50(v31, (uint64_t)v23, a1);
    v34 = *(void (**)(char *, uint64_t))(v5 + 8);
    swift_bridgeObjectRetain();
    v34(v31, a1);
  }
  else
  {
    MEMORY[0x24BDAC7A8](v28);
    *(&v45 - 2) = a1;
    *(&v45 - 1) = v26;
    v54 = sub_23AF05018((void (*)(char *, char *))sub_23AF04FFC, (uint64_t)(&v45 - 4), a1, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], *(_QWORD *)(v27 + 16), MEMORY[0x24BEE40A8], v35);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
    sub_23AB5E978();
    v32 = sub_23B1C6338();
    swift_bridgeObjectRelease();
    v29 = v51;
    v36 = v49;
    v37 = (char *)v49 + *(int *)(v51 + 48);
    v38 = v5;
    v39 = v23;
    v40 = *v19;
    v41 = v19[1];
    *v49 = *v19;
    v36[1] = v41;
    v50(v37, (uint64_t)v39, a1);
    if ((v41 & 0x2000000000000000) != 0)
      v42 = HIBYTE(v41) & 0xF;
    else
      v42 = v40 & 0xFFFFFFFFFFFFLL;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v37, a1);
    if (v42)
    {
      v43 = v19[1];
      v54 = *v19;
      v55 = v43;
      swift_bridgeObjectRetain();
      sub_23B1C64F4();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      v32 = v54;
    }
  }
  (*(void (**)(uint64_t *, uint64_t))(v53 + 8))(v19, v29);
  return v32;
}

void sub_23AF04DE8(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_23AF04DF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t TupleTypeMetadata2;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(a1, 1, 1, TupleTypeMetadata2);
}

uint64_t sub_23AF04E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t sub_23AF04E64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;

  v18 = a4;
  v17 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  v14 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
  if (!v14)
  {
    v19 = 30768;
    v20 = 0xE200000000000000;
    sub_23B1C6650();
    swift_getAssociatedConformanceWitness();
    sub_23B1C659C();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    v12 = v19;
    v14 = v20;
  }
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a2);
  v16 = v18;
  *v18 = v12;
  v16[1] = v14;
  return result;
}

uint64_t sub_23AF04FFC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_23AF04E64(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_23AF05018(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v52 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = sub_23B1C6C98();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v49 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v37 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v37[1] = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x24BDAC7A8](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = sub_23B1C65D8();
  v57 = sub_23B1C61D0();
  v53 = sub_23B1C6FF8();
  sub_23B1C6FB0();
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = sub_23B1C65CC();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_23B1C6CB0();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v24, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      sub_23B1C6FE0();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  sub_23B1C6CB0();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_23B1C6FE0();
      sub_23B1C6CB0();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

uint64_t sub_23AF05524()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23AF05590(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_23AF05600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_23AF05630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_23AF05660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_23AF05690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_23AF056C0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23AF05770 + 4 * byte_23B1DD060[(v7 - 1)]))();
}

void sub_23AF057C0(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for BitSetIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BitSetIterator);
}

uint64_t sub_23AF0597C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t AssociatedTypeWitness;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  void *v25;

  v5 = type metadata accessor for SnapshotItem(319, a1[3], a1[5], a4);
  v7 = v5;
  if (v8 <= 0x3F)
  {
    v17 = *(_QWORD *)(v5 - 8) + 64;
    AssociatedTypeWitness = type metadata accessor for SnapshotItem(319, a1[2], a1[4], v6);
    if (v10 > 0x3F)
      return AssociatedTypeWitness;
    v18 = *(_QWORD *)(AssociatedTypeWitness - 8) + 64;
    v19 = (void *)(MEMORY[0x24BEE0178] + 64);
    v20 = &unk_23B1DD178;
    swift_getTupleTypeLayout();
    v22 = &v21;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v11 > 0x3F)
    {
      return AssociatedTypeWitness;
    }
    else
    {
      v17 = *(_QWORD *)(AssociatedTypeWitness - 8) + 64;
      v12 = sub_23B1C6C98();
      v7 = v12;
      if (v13 <= 0x3F)
      {
        v18 = *(_QWORD *)(v12 - 8) + 64;
        v19 = &unk_23B1DD190;
        v20 = &unk_23B1DD178;
        swift_getTupleTypeLayout();
        v23 = &v16;
        swift_getTupleTypeLayout3();
        v24 = &v15;
        v25 = &unk_23B1DD178;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return v7;
}

_QWORD *sub_23AF05B10(_QWORD *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD *, char *, uint64_t);
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  void (*v51)(unint64_t, unint64_t, uint64_t);
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  const void *v76;
  unsigned int (*v77)(const void *, uint64_t, uint64_t);
  uint64_t v78;
  char *v80;
  char *v81;
  int v82;
  size_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(void);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  void (*v100)(unint64_t, unint64_t, uint64_t);
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t v123;
  void *v124;
  const void *v125;
  unsigned int (*v126)(const void *, uint64_t, uint64_t);
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  uint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  int v146;
  _QWORD *v147;
  _QWORD *v148;
  unint64_t v149;
  __int128 *v150;
  unint64_t v151;
  int v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  void *v165;
  id v166;
  void *v167;
  id v168;
  uint64_t v169;
  id v170;
  _QWORD *v171;
  _QWORD *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  unint64_t v178;
  uint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  int v187;
  _QWORD *v188;
  _QWORD *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  int v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  id v210;
  void *v211;
  id v212;
  void *v213;
  id v214;
  unint64_t v215;
  unint64_t v216;
  _OWORD *v217;
  __int128 *v218;
  __int128 v219;
  unint64_t v220;
  unint64_t v221;
  __int128 v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  _OWORD *v231;
  __int128 *v232;
  __int128 v233;
  unint64_t v234;
  unint64_t v235;
  __int128 v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  void (*v244)(unint64_t, unint64_t, uint64_t);
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  _QWORD *v248;
  _QWORD *v249;
  unint64_t v250;
  unint64_t v251;
  void (*v252)(unint64_t, unint64_t, uint64_t);
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  _QWORD *v256;
  _QWORD *v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _BYTE *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  unint64_t v273;
  unint64_t v274;
  void *v275;
  const void *v276;
  _QWORD *v277;
  _QWORD *v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  _QWORD *v283;
  unint64_t v284;
  uint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  int v293;
  _QWORD *v294;
  _QWORD *v295;
  unint64_t v296;
  __int128 *v297;
  unint64_t v298;
  int v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  unint64_t v312;
  void *v313;
  id v314;
  void *v315;
  id v316;
  uint64_t v317;
  id v318;
  _OWORD *v319;
  __int128 *v320;
  __int128 v321;
  unint64_t v322;
  unint64_t v323;
  __int128 v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  unint64_t v330;
  _QWORD *v331;
  _QWORD *v332;
  _QWORD *v333;
  _QWORD *v334;
  unint64_t *v335;
  unint64_t v336;
  uint64_t v337;
  size_t v338;
  unint64_t v339;
  _QWORD *v340;
  _QWORD *v341;
  unint64_t v342;
  unint64_t v343;
  void (*v344)(unint64_t, unint64_t, uint64_t);
  _QWORD *v345;
  _QWORD *v346;
  _QWORD *v347;
  _QWORD *v348;
  _QWORD *v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  size_t v356;
  void (*v357)(uint64_t, uint64_t, uint64_t);
  uint64_t v358;
  _BYTE *v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  _QWORD *v364;
  _QWORD *v365;
  unint64_t v366;
  unint64_t v367;
  void *v368;
  const void *v369;
  unsigned int (*v370)(const void *, uint64_t, uint64_t);
  unsigned int v371;
  _QWORD *v372;
  _QWORD *v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  _QWORD *v377;
  _QWORD *v378;
  unint64_t v379;
  uint64_t *v380;
  unint64_t v381;
  uint64_t v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  int v388;
  _QWORD *v389;
  _QWORD *v390;
  unint64_t v391;
  __int128 *v392;
  unint64_t v393;
  int v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  void *v407;
  id v408;
  void *v409;
  id v410;
  uint64_t v411;
  id v412;
  _OWORD *v413;
  __int128 *v414;
  __int128 v415;
  unint64_t v416;
  unint64_t v417;
  __int128 v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t v421;
  _QWORD *v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  uint64_t v429;
  size_t v430;
  unsigned int v431;
  size_t v432;
  unint64_t v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t AssociatedTypeWitness;
  uint64_t v452;
  size_t __n;
  uint64_t v454;
  size_t v455;
  unint64_t v456;
  size_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  size_t v466;
  int v467;
  uint64_t v468;
  void (*v469)(char *, char *, uint64_t);
  int v470;
  unsigned int v471;
  unint64_t v472;
  int v473;
  int v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  uint64_t v482;
  int v483;
  unint64_t v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  size_t v490;
  unint64_t v491;
  unint64_t v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unsigned int (*v498)(const void *, uint64_t, uint64_t);
  unint64_t v499;
  unint64_t v501;
  char *v502;
  uint64_t v503;
  void (*v504)(uint64_t, uint64_t, uint64_t);
  unint64_t v505;
  char *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  void *v511;
  void *v512;
  void *v513;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v503 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v483 = *(_DWORD *)(v503 + 80);
  v2 = *(_QWORD *)(v503 + 64);
  v493 = v2;
  v450 = v2 + v483;
  v442 = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(v442 - 8);
  v497 = v3;
  v481 = *(_DWORD *)(v3 + 80);
  v440 = swift_getAssociatedTypeWitness();
  v496 = *(_QWORD *)(v440 - 8);
  v477 = *(_DWORD *)(v496 + 80);
  v507 = v481 & 0xF8 | v477 | 7u;
  v436 = v2 + v507;
  v441 = *(_QWORD *)(v3 + 64) + 7;
  v439 = v477 + 8;
  v465 = v477;
  v438 = *(_QWORD *)(v496 + 64) + 7;
  v458 = sub_23B1C5BDC();
  v4 = *(_QWORD *)(v458 - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v473 = *(_DWORD *)(v4 + 80);
  v6 = v473;
  v7 = v473 | 7;
  v443 = ((((v438 + ((v439 + (v441 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v477)) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v460 = v473 + 12;
  v452 = v4;
  v8 = *(_QWORD *)(v4 + 64);
  v457 = v8 + v473;
  v430 = v8 + 12;
  v454 = v473 + 10;
  v466 = v8;
  if (v5)
    v9 = v8;
  else
    v9 = v8 + 1;
  __n = v9;
  v455 = v9 + 7;
  v433 = (v473
        + 10
        + ((((((v8
              + 12
              + ((v8 + v473 + (v460 & ~(unint64_t)v473)) & ~(unint64_t)v473)) & 0xFFFFFFFFFFFFFFF8)
            + 47) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v473;
  v485 = (((((((((v9 + 7 + v433) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8;
  v456 = v485 + 16;
  v434 = (v7
        + 16
        + ((v2 + v507 + (v450 & ~(unint64_t)v483)) & ~v507)
        + ((((v438
            + ((v477 + 8 + (v441 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v477)) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16) & ~v7;
  v490 = ((((v434 + v485 + 16 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v448 = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(v448 - 8);
  v470 = *(_DWORD *)(v10 + 80);
  v446 = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(v446 - 8);
  v467 = *(_DWORD *)(v11 + 80);
  v449 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v449 - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = v467 & 0xF8 | v13 | 7;
  v15 = v14 | v470 | v473;
  v432 = v490 + v15;
  v444 = v10;
  v16 = *(_QWORD *)(v10 + 64);
  v447 = v16 + v470;
  v463 = v470;
  v17 = v16 + v14;
  v445 = v11;
  v18 = *(_QWORD *)(v11 + 64);
  v19 = v483;
  v20 = v18 + 7;
  v21 = v13 + 8;
  v22 = ((((*(_QWORD *)(v12 + 64) + 7 + ((v13 + 8 + ((v18 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v13)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v459 = v7 + 16;
  v461 = v473 | 7;
  v23 = (v485 + ((v7 + 16 + ((v16 + v14 + (v447 & ~(unint64_t)v470)) & ~v14) + v22) & ~v7) + 327) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((((v24 + 23 + ((v490 + v15) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v26 = v507 | v483 | (unint64_t)v473;
  v486 = v26 + v2;
  v27 = *(unsigned int *)(v503 + 84);
  v28 = *(unsigned int *)(v497 + 84);
  if (v28 <= *(_DWORD *)(v496 + 84))
    v29 = *(_DWORD *)(v496 + 84);
  else
    v29 = *(_DWORD *)(v497 + 84);
  if (v29 <= 0x7FFFFFFE)
    v30 = 2147483646;
  else
    v30 = v29;
  if (v30 <= v27)
    v31 = *(_DWORD *)(v503 + 84);
  else
    v31 = v30;
  v431 = v5;
  if (v5 <= 0x7FFFFFFE)
    v32 = 2147483646;
  else
    v32 = v5;
  if (v31 <= v32)
    v33 = v32;
  else
    v33 = v31;
  if (v33 <= 0x7FFFFFFF)
    v34 = 0x7FFFFFFF;
  else
    v34 = v33;
  if (((v490 + ((v26 + v2) & ~v26)) & 0xFFFFFFFFFFFFFFF8) + 24 > v25)
    v25 = ((v490 + ((v26 + v2) & ~v26)) & 0xFFFFFFFFFFFFFFF8) + 24;
  v35 = ((v23 + 39) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v35 <= v25)
    v35 = v25;
  if (v35 <= 0x10)
    v36 = 16;
  else
    v36 = v35;
  v37 = v14 | v470 | v26;
  if (v37 != 7
    || ((v481 | v483 | v477 | v473 | v470 | v467 | *(_DWORD *)(v12 + 80)) & 0x100000) != 0
    || (v36 | 1uLL) > 0x18)
  {
    v78 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (_QWORD *)(v78 + ((v37 + 16) & ~v37));
    swift_retain();
  }
  else
  {
    v474 = v34;
    v471 = *(_DWORD *)(v496 + 84);
    v38 = a2[v36];
    while (2)
    {
      v484 = ~v19;
      v482 = ~v507;
      v489 = ~v461;
      v39 = ~v6;
      v40 = ~v15;
      v15 = v463;
      v6 = ~v463;
      v41 = ~v13;
      v19 = ~v26;
      v13 = v38;
      switch(v38)
      {
        case 0u:
          v435 = v40;
          v437 = ~v14;
          v462 = v41;
          v464 = v17;
          v468 = v21;
          v472 = v24 + 23;
          v475 = *(_QWORD *)(v449 - 8);
          v478 = v36;
          v487 = *(_QWORD *)(v12 + 64) + 7;
          v491 = v22;
          v42 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v503 + 16);
          v42(a1, a2, AssociatedTypeWitness);
          v43 = ((unint64_t)a1 + v450) & v484;
          v44 = (unint64_t)&a2[v450] & v484;
          v42((_QWORD *)v43, (_QWORD *)v44, AssociatedTypeWitness);
          v45 = (v43 + v493 + v507) & v482;
          v46 = (v44 + v493 + v507) & v482;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v497 + 16))(v45, v46, v442);
          v47 = (_QWORD *)((v441 + v45) & 0xFFFFFFFFFFFFFFF8);
          v48 = (_QWORD *)((v441 + v46) & 0xFFFFFFFFFFFFFFF8);
          *v47 = *v48;
          v49 = ((unint64_t)v47 + v439) & ~v465;
          v50 = ((unint64_t)v48 + v439) & ~v465;
          v51 = *(void (**)(unint64_t, unint64_t, uint64_t))(v496 + 16);
          swift_bridgeObjectRetain();
          v51(v49, v50, v440);
          v52 = (_QWORD *)((v438 + v49) & 0xFFFFFFFFFFFFF8);
          v53 = (_QWORD *)((v438 + v50) & 0xFFFFFFFFFFFFF8);
          *v52 = *v53;
          v54 = (_QWORD *)(((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8);
          v55 = (_QWORD *)(((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v54 = *v55;
          v54[1] = v55[1];
          v56 = (_QWORD *)(v443 + v45);
          *v56 = *(_QWORD *)(v443 + v46);
          v56[1] = *(_QWORD *)(v443 + v46 + 8);
          v57 = (v459 + v443 + v45) & v489;
          v58 = (v459 + v443 + v46) & v489;
          *(_BYTE *)v57 = *(_BYTE *)v58;
          v59 = v57 | 4;
          v60 = *(_DWORD *)(v58 | 4);
          *(_BYTE *)(v59 + 4) = *(_BYTE *)((v58 | 4) + 4);
          *(_DWORD *)v59 = v60;
          *(_WORD *)(v57 + 10) = *(_WORD *)(v58 + 10);
          v61 = (v460 + v57) & v39;
          v62 = (v460 + v58) & v39;
          v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v452 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v63(v61, v62, v458);
          v64 = (v457 + v61) & v39;
          v65 = (v457 + v62) & v39;
          v63(v64, v65, v458);
          v66 = (_BYTE *)(v64 + v466);
          *v66 = *(_BYTE *)(v65 + v466);
          v66[1] = *(_BYTE *)(v65 + v466 + 1);
          v66[2] = *(_BYTE *)(v65 + v466 + 2);
          v66[3] = *(_BYTE *)(v65 + v466 + 3);
          v66[4] = *(_BYTE *)(v65 + v466 + 4);
          v67 = (v64 + v466 + 12) & 0xFFFFFFFFFFFFFFF8;
          v68 = (v65 + v466 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v67 = *(_QWORD *)v68;
          *(_QWORD *)(v67 + 8) = *(_QWORD *)(v68 + 8);
          *(_BYTE *)(v67 + 16) = *(_BYTE *)(v68 + 16);
          *(_BYTE *)(v67 + 17) = *(_BYTE *)(v68 + 17);
          *(_BYTE *)(v67 + 18) = *(_BYTE *)(v68 + 18);
          *(_BYTE *)(v67 + 19) = *(_BYTE *)(v68 + 19);
          v69 = (v67 + 27) & 0xFFFFFFFFFFFFFFF8;
          v70 = (v68 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v69 = *(_QWORD *)v70;
          *(_BYTE *)(v69 + 8) = *(_BYTE *)(v70 + 8);
          *(_BYTE *)(v69 + 9) = *(_BYTE *)(v70 + 9);
          *(_BYTE *)(v69 + 10) = *(_BYTE *)(v70 + 10);
          *(_BYTE *)(v69 + 11) = *(_BYTE *)(v70 + 11);
          *(_BYTE *)(v69 + 12) = *(_BYTE *)(v70 + 12);
          v71 = (_QWORD *)((v67 + 47) & 0xFFFFFFFFFFFFF8);
          v72 = (_QWORD *)((v68 + 47) & 0xFFFFFFFFFFFFF8);
          *v71 = *v72;
          v73 = ((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8;
          v74 = ((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v73 = *(_QWORD *)v74;
          *(_BYTE *)(v73 + 8) = *(_BYTE *)(v74 + 8);
          *(_BYTE *)(v73 + 9) = *(_BYTE *)(v74 + 9);
          v75 = (void *)((v454 + v73) & v39);
          v508 = v39;
          v76 = (const void *)((v454 + v74) & v39);
          v77 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v452 + 48);
          swift_bridgeObjectRetain();
          v504 = v63;
          v498 = v77;
          if (v77(v76, 1, v458))
          {
            memcpy(v75, v76, __n);
          }
          else
          {
            v63((uint64_t)v75, (uint64_t)v76, v458);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v452 + 56))(v75, 0, 1, v458);
          }
          v171 = (_QWORD *)(((unint64_t)v75 + v455) & 0xFFFFFFFFFFFFFFF8);
          v172 = (_QWORD *)(((unint64_t)v76 + v455) & 0xFFFFFFFFFFFFFFF8);
          *v171 = *v172;
          v173 = ((unint64_t)v171 + 15) & 0xFFFFFFFFFFFFFFF8;
          v174 = ((unint64_t)v172 + 15) & 0xFFFFFFFFFFFFFFF8;
          v175 = *(_QWORD *)v174;
          *(_BYTE *)(v173 + 8) = *(_BYTE *)(v174 + 8);
          *(_QWORD *)v173 = v175;
          v176 = (_QWORD *)(((unint64_t)v171 + 31) & 0xFFFFFFFFFFFFF8);
          v177 = (_QWORD *)(((unint64_t)v172 + 31) & 0xFFFFFFFFFFFFF8);
          *v176 = *v177;
          v178 = ((unint64_t)v176 + 15) & 0xFFFFFFFFFFFFFFF8;
          v179 = (uint64_t *)(((unint64_t)v177 + 15) & 0xFFFFFFFFFFFFFFF8);
          v180 = v179[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v429 = v6;
          if ((v180 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v178 = *(_OWORD *)v179;
          }
          else
          {
            v181 = *v179;
            sub_23AAAE668(*v179, v180);
            *(_QWORD *)v178 = v181;
            *(_QWORD *)(v178 + 8) = v180;
          }
          v182 = (v178 + 19) & 0xFFFFFFFFFFFFFFF8;
          v183 = ((unint64_t)v179 + 19) & 0xFFFFFFFFFFFFFFF8;
          v184 = *(_QWORD *)v183;
          *(_BYTE *)(v182 + 8) = *(_BYTE *)(v183 + 8);
          *(_QWORD *)v182 = v184;
          *(_BYTE *)(v182 + 9) = *(_BYTE *)(v183 + 9);
          v185 = (v182 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v186 = (v183 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v187 = *(_DWORD *)v186;
          *(_BYTE *)(v185 + 4) = *(_BYTE *)(v186 + 4);
          *(_DWORD *)v185 = v187;
          v188 = (_QWORD *)((v182 + 25) & 0xFFFFFFFFFFFFFFF8);
          v189 = (_QWORD *)((v183 + 25) & 0xFFFFFFFFFFFFFFF8);
          *v188 = *v189;
          v188[1] = v189[1];
          v190 = v456 + v57;
          v191 = v456 + v58;
          v192 = *(_QWORD *)(v456 + v58 + 16);
          if (v192 >= 0xFFFFFFFF)
            LODWORD(v192) = -1;
          v193 = v192 - 1;
          swift_bridgeObjectRetain();
          if (v193 < 0)
          {
            *(_QWORD *)v190 = *(_QWORD *)v191;
            *(_BYTE *)(v190 + 8) = *(_BYTE *)(v191 + 8);
            *(_BYTE *)(v190 + 9) = *(_BYTE *)(v191 + 9);
            v209 = *(void **)(v191 + 16);
            v210 = v209;
            *(_QWORD *)(v190 + 16) = v209;
            v211 = *(void **)(v191 + 24);
            v212 = v211;
            *(_QWORD *)(v190 + 24) = v211;
            *(_BYTE *)(v190 + 32) = *(_BYTE *)(v191 + 32);
            *(_BYTE *)(v190 + 33) = *(_BYTE *)(v191 + 33);
            *(_BYTE *)(v190 + 34) = *(_BYTE *)(v191 + 34);
            *(_QWORD *)(v190 + 40) = *(_QWORD *)(v191 + 40);
            *(_QWORD *)(v190 + 48) = *(_QWORD *)(v191 + 48);
            *(_QWORD *)(v190 + 56) = *(_QWORD *)(v191 + 56);
            *(_QWORD *)(v190 + 64) = *(_QWORD *)(v191 + 64);
            *(_BYTE *)(v190 + 72) = *(_BYTE *)(v191 + 72);
            *(_QWORD *)(v190 + 80) = *(_QWORD *)(v191 + 80);
            *(_QWORD *)(v190 + 88) = *(_QWORD *)(v191 + 88);
            v213 = *(void **)(v191 + 96);
            *(_QWORD *)(v190 + 96) = v213;
            *(_BYTE *)(v190 + 104) = *(_BYTE *)(v191 + 104);
            *(_BYTE *)(v190 + 105) = *(_BYTE *)(v191 + 105);
            *(_QWORD *)(v190 + 112) = *(_QWORD *)(v191 + 112);
            *(_QWORD *)(v190 + 120) = *(_QWORD *)(v191 + 120);
            *(_QWORD *)(v190 + 128) = *(_QWORD *)(v191 + 128);
            *(_QWORD *)(v190 + 136) = *(_QWORD *)(v191 + 136);
            *(_QWORD *)(v190 + 144) = *(_QWORD *)(v191 + 144);
            *(_QWORD *)(v190 + 152) = *(_QWORD *)(v191 + 152);
            *(_QWORD *)(v190 + 160) = *(_QWORD *)(v191 + 160);
            *(_QWORD *)(v190 + 168) = *(_QWORD *)(v191 + 168);
            *(_BYTE *)(v190 + 176) = *(_BYTE *)(v191 + 176);
            *(_QWORD *)(v190 + 184) = *(_QWORD *)(v191 + 184);
            v495 = *(_QWORD *)(v191 + 192);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v214 = v213;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v495)
            {
              *(_QWORD *)(v190 + 192) = v495;
              *(_QWORD *)(v190 + 200) = *(_QWORD *)(v191 + 200);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v190 + 192) = *(_OWORD *)(v191 + 192);
            }
            v207 = v445;
            v206 = v446;
            v208 = v444;
            *(_QWORD *)(v190 + 208) = *(_QWORD *)(v191 + 208);
            *(_QWORD *)(v190 + 216) = *(_QWORD *)(v191 + 216);
            *(_QWORD *)(v190 + 224) = *(_QWORD *)(v191 + 224);
            *(_QWORD *)(v190 + 232) = *(_QWORD *)(v191 + 232);
            *(_QWORD *)(v190 + 240) = *(_QWORD *)(v191 + 240);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v194 = *(_OWORD *)v191;
            v195 = *(_OWORD *)(v191 + 16);
            v196 = *(_OWORD *)(v191 + 48);
            *(_OWORD *)(v190 + 32) = *(_OWORD *)(v191 + 32);
            *(_OWORD *)(v190 + 48) = v196;
            *(_OWORD *)v190 = v194;
            *(_OWORD *)(v190 + 16) = v195;
            v197 = *(_OWORD *)(v191 + 64);
            v198 = *(_OWORD *)(v191 + 80);
            v199 = *(_OWORD *)(v191 + 112);
            *(_OWORD *)(v190 + 96) = *(_OWORD *)(v191 + 96);
            *(_OWORD *)(v190 + 112) = v199;
            *(_OWORD *)(v190 + 64) = v197;
            *(_OWORD *)(v190 + 80) = v198;
            v200 = *(_OWORD *)(v191 + 128);
            v201 = *(_OWORD *)(v191 + 144);
            v202 = *(_OWORD *)(v191 + 176);
            *(_OWORD *)(v190 + 160) = *(_OWORD *)(v191 + 160);
            *(_OWORD *)(v190 + 176) = v202;
            *(_OWORD *)(v190 + 128) = v200;
            *(_OWORD *)(v190 + 144) = v201;
            v203 = *(_OWORD *)(v191 + 192);
            v204 = *(_OWORD *)(v191 + 208);
            v205 = *(_OWORD *)(v191 + 224);
            *(_QWORD *)(v190 + 240) = *(_QWORD *)(v191 + 240);
            *(_OWORD *)(v190 + 208) = v204;
            *(_OWORD *)(v190 + 224) = v205;
            *(_OWORD *)(v190 + 192) = v203;
            v207 = v445;
            v206 = v446;
            v208 = v444;
          }
          v231 = (_OWORD *)((v190 + 255) & 0xFFFFFFFFFFFFFFF8);
          v232 = (__int128 *)((v191 + 255) & 0xFFFFFFFFFFFFFFF8);
          v233 = *v232;
          *(_OWORD *)((char *)v231 + 9) = *(__int128 *)((char *)v232 + 9);
          *v231 = v233;
          v234 = (v190 + 287) & 0xFFFFFFFFFFFFFFF8;
          v235 = (v191 + 287) & 0xFFFFFFFFFFFFFFF8;
          v236 = *(_OWORD *)v235;
          *(_BYTE *)(v234 + 16) = *(_BYTE *)(v235 + 16);
          *(_OWORD *)v234 = v236;
          v237 = (_QWORD *)((v190 + 311) & 0xFFFFFFFFFFFFF8);
          v238 = (v191 + 311) & 0xFFFFFFFFFFFFF8;
          v239 = *(_QWORD *)v238;
          v238 += 15;
          *v237 = v239;
          v240 = (_QWORD *)(((unint64_t)v237 + 15) & 0xFFFFFFFFFFFFFFF8);
          v241 = *(_QWORD *)(v238 & 0xFFFFFFFFFFFFFFF8);
          v242 = *(_QWORD *)((v238 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_23AA7F2D4(v241, v242);
          *v240 = v241;
          v240[1] = v242;
          v243 = ((unint64_t)a1 + v432) & v435;
          v244 = *(void (**)(unint64_t, unint64_t, uint64_t))(v208 + 16);
          v244(v243, (unint64_t)&a2[v432] & v435, v448);
          v501 = (unint64_t)&a2[v432] & v435;
          v245 = (v447 + v501) & v429;
          v244((v447 + v243) & v429, v245, v448);
          v246 = (v464 + ((v447 + v243) & v429)) & v437;
          v247 = (v464 + v245) & v437;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v207 + 16))(v246, v247, v206);
          v248 = (_QWORD *)((v20 + v246) & 0xFFFFFFFFFFFFFFF8);
          v249 = (_QWORD *)((v20 + v247) & 0xFFFFFFFFFFFFFFF8);
          *v248 = *v249;
          v250 = ((unint64_t)v248 + v468) & v462;
          v251 = ((unint64_t)v249 + v468) & v462;
          v252 = *(void (**)(unint64_t, unint64_t, uint64_t))(v475 + 16);
          swift_bridgeObjectRetain();
          v252(v250, v251, v449);
          v253 = (_QWORD *)((v487 + v250) & 0xFFFFFFFFFFFFF8);
          v254 = (_QWORD *)((v487 + v251) & 0xFFFFFFFFFFFFF8);
          *v253 = *v254;
          v255 = (_QWORD *)(((unint64_t)v253 + 15) & 0xFFFFFFFFFFFFFFF8);
          v256 = (_QWORD *)(((unint64_t)v254 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v255 = *v256;
          v255[1] = v256[1];
          v257 = (_QWORD *)(v246 + v491);
          *v257 = *(_QWORD *)(v247 + v491);
          v257[1] = *(_QWORD *)(v247 + v491 + 8);
          v258 = (v459 + v246 + v491) & v489;
          v259 = (v459 + v247 + v491) & v489;
          *(_BYTE *)v258 = *(_BYTE *)v259;
          v260 = v258 | 4;
          v261 = *(_DWORD *)(v259 | 4);
          *(_BYTE *)(v260 + 4) = *(_BYTE *)((v259 | 4) + 4);
          *(_DWORD *)v260 = v261;
          *(_WORD *)(v258 + 10) = *(_WORD *)(v259 + 0xA);
          v262 = (v460 + v258) & v508;
          v263 = (v460 + v259) & v508;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v504(v262, v263, v458);
          v264 = (v457 + v262) & v508;
          v265 = (v457 + v263) & v508;
          v504(v264, v265, v458);
          v266 = (_BYTE *)(v264 + v466);
          *v266 = *(_BYTE *)(v265 + v466);
          v266[1] = *(_BYTE *)(v265 + v466 + 1);
          v266[2] = *(_BYTE *)(v265 + v466 + 2);
          v266[3] = *(_BYTE *)(v265 + v466 + 3);
          v266[4] = *(_BYTE *)(v265 + v466 + 4);
          v267 = (v264 + v466 + 12) & 0xFFFFFFFFFFFFFFF8;
          v268 = (v265 + v466 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v267 = *(_QWORD *)v268;
          *(_QWORD *)(v267 + 8) = *(_QWORD *)(v268 + 8);
          *(_BYTE *)(v267 + 16) = *(_BYTE *)(v268 + 16);
          *(_BYTE *)(v267 + 17) = *(_BYTE *)(v268 + 17);
          *(_BYTE *)(v267 + 18) = *(_BYTE *)(v268 + 18);
          *(_BYTE *)(v267 + 19) = *(_BYTE *)(v268 + 19);
          v269 = (v267 + 27) & 0xFFFFFFFFFFFFFFF8;
          v270 = (v268 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v269 = *(_QWORD *)v270;
          *(_BYTE *)(v269 + 8) = *(_BYTE *)(v270 + 8);
          *(_BYTE *)(v269 + 9) = *(_BYTE *)(v270 + 9);
          *(_BYTE *)(v269 + 10) = *(_BYTE *)(v270 + 10);
          *(_BYTE *)(v269 + 11) = *(_BYTE *)(v270 + 11);
          *(_BYTE *)(v269 + 12) = *(_BYTE *)(v270 + 12);
          v271 = (_QWORD *)((v267 + 47) & 0xFFFFFFFFFFFFF8);
          v272 = (_QWORD *)((v268 + 47) & 0xFFFFFFFFFFFFF8);
          *v271 = *v272;
          v273 = ((unint64_t)v271 + 15) & 0xFFFFFFFFFFFFFFF8;
          v274 = ((unint64_t)v272 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v273 = *(_QWORD *)v274;
          *(_BYTE *)(v273 + 8) = *(_BYTE *)(v274 + 8);
          *(_BYTE *)(v273 + 9) = *(_BYTE *)(v274 + 9);
          v275 = (void *)((v454 + v273) & v508);
          v276 = (const void *)((v454 + v274) & v508);
          swift_bridgeObjectRetain();
          if (v498(v276, 1, v458))
          {
            memcpy(v275, v276, __n);
          }
          else
          {
            v504((uint64_t)v275, (uint64_t)v276, v458);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v452 + 56))(v275, 0, 1, v458);
          }
          v277 = (_QWORD *)(((unint64_t)v275 + v455) & 0xFFFFFFFFFFFFFFF8);
          v278 = (_QWORD *)(((unint64_t)v276 + v455) & 0xFFFFFFFFFFFFFFF8);
          *v277 = *v278;
          v279 = ((unint64_t)v277 + 15) & 0xFFFFFFFFFFFFFFF8;
          v280 = ((unint64_t)v278 + 15) & 0xFFFFFFFFFFFFFFF8;
          v281 = *(_QWORD *)v280;
          *(_BYTE *)(v279 + 8) = *(_BYTE *)(v280 + 8);
          *(_QWORD *)v279 = v281;
          v282 = (_QWORD *)(((unint64_t)v277 + 31) & 0xFFFFFFFFFFFFF8);
          v283 = (_QWORD *)(((unint64_t)v278 + 31) & 0xFFFFFFFFFFFFF8);
          *v282 = *v283;
          v284 = ((unint64_t)v282 + 15) & 0xFFFFFFFFFFFFFFF8;
          v285 = (uint64_t *)(((unint64_t)v283 + 15) & 0xFFFFFFFFFFFFFFF8);
          v286 = v285[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v286 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v284 = *(_OWORD *)v285;
          }
          else
          {
            v287 = *v285;
            sub_23AAAE668(*v285, v286);
            *(_QWORD *)v284 = v287;
            *(_QWORD *)(v284 + 8) = v286;
          }
          v288 = (v284 + 19) & 0xFFFFFFFFFFFFFFF8;
          v289 = ((unint64_t)v285 + 19) & 0xFFFFFFFFFFFFFFF8;
          v290 = *(_QWORD *)v289;
          *(_BYTE *)(v288 + 8) = *(_BYTE *)(v289 + 8);
          *(_QWORD *)v288 = v290;
          *(_BYTE *)(v288 + 9) = *(_BYTE *)(v289 + 9);
          v291 = (v288 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v292 = (v289 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v293 = *(_DWORD *)v292;
          *(_BYTE *)(v291 + 4) = *(_BYTE *)(v292 + 4);
          *(_DWORD *)v291 = v293;
          v294 = (_QWORD *)((v288 + 25) & 0xFFFFFFFFFFFFFFF8);
          v295 = (_QWORD *)((v289 + 25) & 0xFFFFFFFFFFFFFFF8);
          *v294 = *v295;
          v294[1] = v295[1];
          v296 = v258 + v456;
          v297 = (__int128 *)(v259 + v456);
          v298 = *(_QWORD *)(v259 + v456 + 16);
          if (v298 >= 0xFFFFFFFF)
            LODWORD(v298) = -1;
          v299 = v298 - 1;
          swift_bridgeObjectRetain();
          if (v299 < 0)
          {
            *(_QWORD *)v296 = *(_QWORD *)v297;
            *(_BYTE *)(v296 + 8) = *((_BYTE *)v297 + 8);
            *(_BYTE *)(v296 + 9) = *((_BYTE *)v297 + 9);
            v313 = (void *)*((_QWORD *)v297 + 2);
            v314 = v313;
            *(_QWORD *)(v296 + 16) = v313;
            v315 = (void *)*((_QWORD *)v297 + 3);
            v316 = v315;
            *(_QWORD *)(v296 + 24) = v315;
            *(_BYTE *)(v296 + 32) = *((_BYTE *)v297 + 32);
            *(_BYTE *)(v296 + 33) = *((_BYTE *)v297 + 33);
            *(_BYTE *)(v296 + 34) = *((_BYTE *)v297 + 34);
            *(_QWORD *)(v296 + 40) = *((_QWORD *)v297 + 5);
            *(_QWORD *)(v296 + 48) = *((_QWORD *)v297 + 6);
            *(_QWORD *)(v296 + 56) = *((_QWORD *)v297 + 7);
            *(_QWORD *)(v296 + 64) = *((_QWORD *)v297 + 8);
            *(_BYTE *)(v296 + 72) = *((_BYTE *)v297 + 72);
            *(_QWORD *)(v296 + 80) = *((_QWORD *)v297 + 10);
            *(_QWORD *)(v296 + 88) = *((_QWORD *)v297 + 11);
            v512 = (void *)*((_QWORD *)v297 + 12);
            *(_QWORD *)(v296 + 96) = v512;
            *(_BYTE *)(v296 + 104) = *((_BYTE *)v297 + 104);
            *(_BYTE *)(v296 + 105) = *((_BYTE *)v297 + 105);
            *(_QWORD *)(v296 + 112) = *((_QWORD *)v297 + 14);
            *(_QWORD *)(v296 + 120) = *((_QWORD *)v297 + 15);
            *(_QWORD *)(v296 + 128) = *((_QWORD *)v297 + 16);
            *(_QWORD *)(v296 + 136) = *((_QWORD *)v297 + 17);
            *(_QWORD *)(v296 + 144) = *((_QWORD *)v297 + 18);
            *(_QWORD *)(v296 + 152) = *((_QWORD *)v297 + 19);
            *(_QWORD *)(v296 + 160) = *((_QWORD *)v297 + 20);
            *(_QWORD *)(v296 + 168) = *((_QWORD *)v297 + 21);
            *(_BYTE *)(v296 + 176) = *((_BYTE *)v297 + 176);
            *(_QWORD *)(v296 + 184) = *((_QWORD *)v297 + 23);
            v317 = *((_QWORD *)v297 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v318 = v512;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v317)
            {
              *(_QWORD *)(v296 + 192) = v317;
              *(_QWORD *)(v296 + 200) = *((_QWORD *)v297 + 25);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v296 + 192) = v297[12];
            }
            v312 = v501;
            *(_QWORD *)(v296 + 208) = *((_QWORD *)v297 + 26);
            *(_QWORD *)(v296 + 216) = *((_QWORD *)v297 + 27);
            *(_QWORD *)(v296 + 224) = *((_QWORD *)v297 + 28);
            *(_QWORD *)(v296 + 232) = *((_QWORD *)v297 + 29);
            *(_QWORD *)(v296 + 240) = *((_QWORD *)v297 + 30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v300 = *v297;
            v301 = v297[1];
            v302 = v297[3];
            *(_OWORD *)(v296 + 32) = v297[2];
            *(_OWORD *)(v296 + 48) = v302;
            *(_OWORD *)v296 = v300;
            *(_OWORD *)(v296 + 16) = v301;
            v303 = v297[4];
            v304 = v297[5];
            v305 = v297[7];
            *(_OWORD *)(v296 + 96) = v297[6];
            *(_OWORD *)(v296 + 112) = v305;
            *(_OWORD *)(v296 + 64) = v303;
            *(_OWORD *)(v296 + 80) = v304;
            v306 = v297[8];
            v307 = v297[9];
            v308 = v297[11];
            *(_OWORD *)(v296 + 160) = v297[10];
            *(_OWORD *)(v296 + 176) = v308;
            *(_OWORD *)(v296 + 128) = v306;
            *(_OWORD *)(v296 + 144) = v307;
            v309 = v297[12];
            v310 = v297[13];
            v311 = v297[14];
            *(_QWORD *)(v296 + 240) = *((_QWORD *)v297 + 30);
            *(_OWORD *)(v296 + 208) = v310;
            *(_OWORD *)(v296 + 224) = v311;
            *(_OWORD *)(v296 + 192) = v309;
            v312 = v501;
          }
          v319 = (_OWORD *)((v296 + 255) & 0xFFFFFFFFFFFFFFF8);
          v320 = (__int128 *)(((unint64_t)v297 + 255) & 0xFFFFFFFFFFFFFFF8);
          v321 = *v320;
          *(_OWORD *)((char *)v319 + 9) = *(__int128 *)((char *)v320 + 9);
          *v319 = v321;
          v322 = (v296 + 287) & 0xFFFFFFFFFFFFFFF8;
          v323 = ((unint64_t)v297 + 287) & 0xFFFFFFFFFFFFFFF8;
          v324 = *(_OWORD *)v323;
          *(_BYTE *)(v322 + 16) = *(_BYTE *)(v323 + 16);
          *(_OWORD *)v322 = v324;
          v325 = (_QWORD *)((v296 + 311) & 0xFFFFFFFFFFFFF8);
          v326 = ((unint64_t)v297 + 311) & 0xFFFFFFFFFFFFF8;
          v327 = *(_QWORD *)v326;
          v326 += 15;
          *v325 = v327;
          v328 = (_QWORD *)(((unint64_t)v325 + 15) & 0xFFFFFFFFFFFFFFF8);
          v329 = *(_QWORD *)(v326 & 0xFFFFFFFFFFFFFFF8);
          v330 = *(_QWORD *)((v326 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_23AA7F2D4(v329, v330);
          *v328 = v329;
          v328[1] = v330;
          v331 = (_QWORD *)((v472 + v243) & 0xFFFFFFFFFFFFF8);
          v332 = (_QWORD *)((v472 + v312) & 0xFFFFFFFFFFFFF8);
          *v331 = *v332;
          v333 = (_QWORD *)(((unint64_t)v331 + 15) & 0xFFFFFFFFFFFFFFF8);
          v334 = (_QWORD *)(((unint64_t)v332 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v333 = *v334;
          v333[1] = v334[1];
          *((_BYTE *)a1 + v478) = 0;
          swift_bridgeObjectRetain();
          return a1;
        case 1u:
          v494 = ~(unint64_t)v477;
          v509 = v39;
          v479 = v36;
          v469 = *(void (**)(char *, char *, uint64_t))(v503 + 16);
          v469((char *)a1, a2, AssociatedTypeWitness);
          v80 = (char *)(((unint64_t)a1 + v486) & v19);
          v81 = (char *)((unint64_t)&a2[v486] & v19);
          if ((_DWORD)v27 == v474)
          {
            v82 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v503 + 48))(v81, v27, AssociatedTypeWitness);
            v83 = v466;
            v84 = AssociatedTypeWitness;
            v85 = v450;
            v86 = v482;
            goto LABEL_100;
          }
          v85 = v450;
          v86 = v482;
          v128 = (unint64_t)&v81[v450] & v484;
          v129 = (v436 + v128) & v482;
          if (v30 == v474)
          {
            if ((_DWORD)v28 == v30)
            {
              v82 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v497 + 48))((v436 + v128) & v482, v28, v442);
            }
            else
            {
              v335 = (unint64_t *)((v441 + v129) & 0xFFFFFFFFFFFFFFF8);
              if (v29 <= 0x7FFFFFFE)
              {
                v336 = *v335;
                if (v336 >= 0xFFFFFFFF)
                  LODWORD(v336) = -1;
                v83 = v466;
                v84 = AssociatedTypeWitness;
                if ((v336 + 1) >= 2)
                  goto LABEL_101;
                goto LABEL_104;
              }
              v82 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v496 + 48))(((unint64_t)v335 + v439) & v494, v471, v440);
            }
            goto LABEL_99;
          }
          v215 = v129 + v443;
          if ((v33 & 0x80000000) == 0)
          {
            v216 = *(_QWORD *)(v215 + 8);
            if (v216 >= 0xFFFFFFFF)
              LODWORD(v216) = -1;
            v82 = v216 + 1;
LABEL_99:
            v83 = v466;
            v84 = AssociatedTypeWitness;
            goto LABEL_100;
          }
          v337 = (v460 + ((v459 + v215) & v489)) & v509;
          v83 = v466;
          v84 = AssociatedTypeWitness;
          if (v431 < 0x7FFFFFFE)
          {
            v428 = *(_QWORD *)(((v430 + ((v457 + v337) & v509)) & 0xFFFFFFFFFFFFF8) + 8);
            if (v428 >= 0xFFFFFFFF)
              LODWORD(v428) = -1;
            if ((v428 + 1) >= 2)
              goto LABEL_101;
            goto LABEL_104;
          }
          v82 = (*(uint64_t (**)(uint64_t))(v452 + 48))(v337);
LABEL_100:
          if (v82)
          {
LABEL_101:
            memcpy(v80, v81, v490);
LABEL_102:
            v338 = __n;
            goto LABEL_119;
          }
          v128 = (unint64_t)&v81[v85] & v484;
          v129 = (v436 + v128) & v86;
LABEL_104:
          v502 = v81;
          v469(v80, v81, v84);
          v506 = v80;
          v469((char *)((unint64_t)&v80[v85] & v484), (char *)v128, v84);
          v339 = (v436 + ((unint64_t)&v80[v85] & v484)) & v86;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v497 + 16))(v339, v129, v442);
          v340 = (_QWORD *)((v441 + v339) & 0xFFFFFFFFFFFFFFF8);
          v341 = (_QWORD *)((v441 + v129) & 0xFFFFFFFFFFFFFFF8);
          *v340 = *v341;
          v342 = ((unint64_t)v340 + v439) & v494;
          v343 = ((unint64_t)v341 + v439) & v494;
          v344 = *(void (**)(unint64_t, unint64_t, uint64_t))(v496 + 16);
          swift_bridgeObjectRetain();
          v344(v342, v343, v440);
          v345 = (_QWORD *)((v438 + v342) & 0xFFFFFFFFFFFFF8);
          v346 = (_QWORD *)((v438 + v343) & 0xFFFFFFFFFFFFF8);
          *v345 = *v346;
          v347 = (_QWORD *)(((unint64_t)v345 + 15) & 0xFFFFFFFFFFFFFFF8);
          v348 = (_QWORD *)(((unint64_t)v346 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v347 = *v348;
          v347[1] = v348[1];
          v349 = (_QWORD *)(v339 + v443);
          *v349 = *(_QWORD *)(v129 + v443);
          v349[1] = *(_QWORD *)(v129 + v443 + 8);
          v350 = (v459 + v339 + v443) & v489;
          v351 = (v459 + v129 + v443) & v489;
          *(_BYTE *)v350 = *(_BYTE *)v351;
          v352 = v350 | 4;
          v353 = *(_DWORD *)(v351 | 4);
          *(_BYTE *)(v352 + 4) = *(_BYTE *)((v351 | 4) + 4);
          *(_DWORD *)v352 = v353;
          *(_WORD *)(v350 + 10) = *(_WORD *)(v351 + 0xA);
          v354 = (v460 + v350) & v509;
          v499 = v351;
          v355 = (v460 + v351) & v509;
          v356 = v83;
          v357 = *(void (**)(uint64_t, uint64_t, uint64_t))(v452 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v357(v354, v355, v458);
          v358 = (v457 + v355) & v509;
          v357((v457 + v354) & v509, v358, v458);
          v359 = (_BYTE *)(((v457 + v354) & v509) + v356);
          *v359 = *(_BYTE *)(v358 + v356);
          v359[1] = *(_BYTE *)(v358 + v356 + 1);
          v359[2] = *(_BYTE *)(v358 + v356 + 2);
          v359[3] = *(_BYTE *)(v358 + v356 + 3);
          v359[4] = *(_BYTE *)(v358 + v356 + 4);
          v360 = (unint64_t)(v359 + 12) & 0xFFFFFFFFFFFFFFF8;
          v361 = (v358 + v356 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v360 = *(_QWORD *)v361;
          *(_QWORD *)(v360 + 8) = *(_QWORD *)(v361 + 8);
          *(_BYTE *)(v360 + 16) = *(_BYTE *)(v361 + 16);
          *(_BYTE *)(v360 + 17) = *(_BYTE *)(v361 + 17);
          *(_BYTE *)(v360 + 18) = *(_BYTE *)(v361 + 18);
          *(_BYTE *)(v360 + 19) = *(_BYTE *)(v361 + 19);
          v362 = (v360 + 27) & 0xFFFFFFFFFFFFFFF8;
          v363 = (v361 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v362 = *(_QWORD *)v363;
          *(_BYTE *)(v362 + 8) = *(_BYTE *)(v363 + 8);
          *(_BYTE *)(v362 + 9) = *(_BYTE *)(v363 + 9);
          *(_BYTE *)(v362 + 10) = *(_BYTE *)(v363 + 10);
          *(_BYTE *)(v362 + 11) = *(_BYTE *)(v363 + 11);
          *(_BYTE *)(v362 + 12) = *(_BYTE *)(v363 + 12);
          v364 = (_QWORD *)((v360 + 47) & 0xFFFFFFFFFFFFF8);
          v365 = (_QWORD *)((v361 + 47) & 0xFFFFFFFFFFFFF8);
          *v364 = *v365;
          v366 = ((unint64_t)v364 + 15) & 0xFFFFFFFFFFFFFFF8;
          v367 = ((unint64_t)v365 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v366 = *(_QWORD *)v367;
          *(_BYTE *)(v366 + 8) = *(_BYTE *)(v367 + 8);
          *(_BYTE *)(v366 + 9) = *(_BYTE *)(v367 + 9);
          v368 = (void *)((v454 + v366) & v509);
          v369 = (const void *)((v454 + v367) & v509);
          v370 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v452 + 48);
          swift_bridgeObjectRetain();
          if (v370(v369, 1, v458))
          {
            memcpy(v368, v369, __n);
          }
          else
          {
            v357((uint64_t)v368, (uint64_t)v369, v458);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v452 + 56))(v368, 0, 1, v458);
          }
          v371 = v431;
          v338 = v466;
          v372 = (_QWORD *)(((unint64_t)v368 + v455) & 0xFFFFFFFFFFFFFFF8);
          v373 = (_QWORD *)(((unint64_t)v369 + v455) & 0xFFFFFFFFFFFFFFF8);
          *v372 = *v373;
          v374 = ((unint64_t)v372 + 15) & 0xFFFFFFFFFFFFFFF8;
          v375 = ((unint64_t)v373 + 15) & 0xFFFFFFFFFFFFFFF8;
          v376 = *(_QWORD *)v375;
          *(_BYTE *)(v374 + 8) = *(_BYTE *)(v375 + 8);
          *(_QWORD *)v374 = v376;
          v377 = (_QWORD *)(((unint64_t)v372 + 31) & 0xFFFFFFFFFFFFF8);
          v378 = (_QWORD *)(((unint64_t)v373 + 31) & 0xFFFFFFFFFFFFF8);
          *v377 = *v378;
          v379 = ((unint64_t)v377 + 15) & 0xFFFFFFFFFFFFFFF8;
          v380 = (uint64_t *)(((unint64_t)v378 + 15) & 0xFFFFFFFFFFFFFFF8);
          v381 = v380[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v381 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v379 = *(_OWORD *)v380;
          }
          else
          {
            v382 = *v380;
            sub_23AAAE668(*v380, v381);
            *(_QWORD *)v379 = v382;
            *(_QWORD *)(v379 + 8) = v381;
          }
          v383 = (v379 + 19) & 0xFFFFFFFFFFFFFFF8;
          v384 = ((unint64_t)v380 + 19) & 0xFFFFFFFFFFFFFFF8;
          v385 = *(_QWORD *)v384;
          *(_BYTE *)(v383 + 8) = *(_BYTE *)(v384 + 8);
          *(_QWORD *)v383 = v385;
          *(_BYTE *)(v383 + 9) = *(_BYTE *)(v384 + 9);
          v386 = (v383 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v387 = (v384 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v388 = *(_DWORD *)v387;
          *(_BYTE *)(v386 + 4) = *(_BYTE *)(v387 + 4);
          *(_DWORD *)v386 = v388;
          v389 = (_QWORD *)((v383 + 25) & 0xFFFFFFFFFFFFFFF8);
          v390 = (_QWORD *)((v384 + 25) & 0xFFFFFFFFFFFFFFF8);
          *v389 = *v390;
          v389[1] = v390[1];
          v391 = v456 + v350;
          v392 = (__int128 *)(v456 + v499);
          v393 = *(_QWORD *)(v456 + v499 + 16);
          if (v393 >= 0xFFFFFFFF)
            LODWORD(v393) = -1;
          v394 = v393 - 1;
          swift_bridgeObjectRetain();
          if (v394 < 0)
          {
            *(_QWORD *)v391 = *(_QWORD *)v392;
            *(_BYTE *)(v391 + 8) = *((_BYTE *)v392 + 8);
            *(_BYTE *)(v391 + 9) = *((_BYTE *)v392 + 9);
            v407 = (void *)*((_QWORD *)v392 + 2);
            v408 = v407;
            *(_QWORD *)(v391 + 16) = v407;
            v409 = (void *)*((_QWORD *)v392 + 3);
            v410 = v409;
            *(_QWORD *)(v391 + 24) = v409;
            *(_BYTE *)(v391 + 32) = *((_BYTE *)v392 + 32);
            *(_BYTE *)(v391 + 33) = *((_BYTE *)v392 + 33);
            *(_BYTE *)(v391 + 34) = *((_BYTE *)v392 + 34);
            *(_QWORD *)(v391 + 40) = *((_QWORD *)v392 + 5);
            *(_QWORD *)(v391 + 48) = *((_QWORD *)v392 + 6);
            *(_QWORD *)(v391 + 56) = *((_QWORD *)v392 + 7);
            *(_QWORD *)(v391 + 64) = *((_QWORD *)v392 + 8);
            *(_BYTE *)(v391 + 72) = *((_BYTE *)v392 + 72);
            *(_QWORD *)(v391 + 80) = *((_QWORD *)v392 + 10);
            *(_QWORD *)(v391 + 88) = *((_QWORD *)v392 + 11);
            v513 = (void *)*((_QWORD *)v392 + 12);
            *(_QWORD *)(v391 + 96) = v513;
            *(_BYTE *)(v391 + 104) = *((_BYTE *)v392 + 104);
            *(_BYTE *)(v391 + 105) = *((_BYTE *)v392 + 105);
            *(_QWORD *)(v391 + 112) = *((_QWORD *)v392 + 14);
            *(_QWORD *)(v391 + 120) = *((_QWORD *)v392 + 15);
            *(_QWORD *)(v391 + 128) = *((_QWORD *)v392 + 16);
            *(_QWORD *)(v391 + 136) = *((_QWORD *)v392 + 17);
            *(_QWORD *)(v391 + 144) = *((_QWORD *)v392 + 18);
            *(_QWORD *)(v391 + 152) = *((_QWORD *)v392 + 19);
            *(_QWORD *)(v391 + 160) = *((_QWORD *)v392 + 20);
            *(_QWORD *)(v391 + 168) = *((_QWORD *)v392 + 21);
            *(_BYTE *)(v391 + 176) = *((_BYTE *)v392 + 176);
            *(_QWORD *)(v391 + 184) = *((_QWORD *)v392 + 23);
            v411 = *((_QWORD *)v392 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v412 = v513;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v411)
            {
              *(_QWORD *)(v391 + 192) = v411;
              *(_QWORD *)(v391 + 200) = *((_QWORD *)v392 + 25);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v391 + 192) = v392[12];
            }
            v338 = v466;
            v371 = v431;
            *(_QWORD *)(v391 + 208) = *((_QWORD *)v392 + 26);
            *(_QWORD *)(v391 + 216) = *((_QWORD *)v392 + 27);
            *(_QWORD *)(v391 + 224) = *((_QWORD *)v392 + 28);
            *(_QWORD *)(v391 + 232) = *((_QWORD *)v392 + 29);
            *(_QWORD *)(v391 + 240) = *((_QWORD *)v392 + 30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v395 = *v392;
            v396 = v392[1];
            v397 = v392[3];
            *(_OWORD *)(v391 + 32) = v392[2];
            *(_OWORD *)(v391 + 48) = v397;
            *(_OWORD *)v391 = v395;
            *(_OWORD *)(v391 + 16) = v396;
            v398 = v392[4];
            v399 = v392[5];
            v400 = v392[7];
            *(_OWORD *)(v391 + 96) = v392[6];
            *(_OWORD *)(v391 + 112) = v400;
            *(_OWORD *)(v391 + 64) = v398;
            *(_OWORD *)(v391 + 80) = v399;
            v401 = v392[8];
            v402 = v392[9];
            v403 = v392[11];
            *(_OWORD *)(v391 + 160) = v392[10];
            *(_OWORD *)(v391 + 176) = v403;
            *(_OWORD *)(v391 + 128) = v401;
            *(_OWORD *)(v391 + 144) = v402;
            v404 = v392[12];
            v405 = v392[13];
            v406 = v392[14];
            *(_QWORD *)(v391 + 240) = *((_QWORD *)v392 + 30);
            *(_OWORD *)(v391 + 208) = v405;
            *(_OWORD *)(v391 + 224) = v406;
            *(_OWORD *)(v391 + 192) = v404;
          }
          v413 = (_OWORD *)((v391 + 255) & 0xFFFFFFFFFFFFFFF8);
          v414 = (__int128 *)(((unint64_t)v392 + 255) & 0xFFFFFFFFFFFFFFF8);
          v415 = *v414;
          *(_OWORD *)((char *)v413 + 9) = *(__int128 *)((char *)v414 + 9);
          *v413 = v415;
          v416 = (v391 + 287) & 0xFFFFFFFFFFFFFFF8;
          v417 = ((unint64_t)v392 + 287) & 0xFFFFFFFFFFFFFFF8;
          v418 = *(_OWORD *)v417;
          *(_BYTE *)(v416 + 16) = *(_BYTE *)(v417 + 16);
          *(_OWORD *)v416 = v418;
          v419 = (_QWORD *)((v391 + 311) & 0xFFFFFFFFFFFFF8);
          v420 = ((unint64_t)v392 + 311) & 0xFFFFFFFFFFFFF8;
          v421 = *(_QWORD *)v420;
          v420 += 15;
          *v419 = v421;
          v422 = (_QWORD *)(((unint64_t)v419 + 15) & 0xFFFFFFFFFFFFFFF8);
          v423 = *(_QWORD *)(v420 & 0xFFFFFFFFFFFFFFF8);
          v424 = *(_QWORD *)((v420 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_23AA7F2D4(v423, v424);
          *v422 = v423;
          v422[1] = v424;
          v81 = v502;
          v80 = v506;
          if (!v371)
            goto LABEL_102;
LABEL_119:
          v425 = ((((v434
                   + ((((((((((v433 + v338 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 19) & 0xFFFFFFFFFFFFFFF8)
                     + 25) & 0xFFFFFFFFFFFFFFF8)
                   + 327) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 16;
          v426 = (unint64_t)&v80[v425];
          v427 = (unint64_t)&v81[v425];
          *(_BYTE *)v426 = *(_BYTE *)v427;
          v426 &= 0xFFFFFFFFFFFFFFF8;
          v427 &= 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v426 + 8) = *(_QWORD *)(v427 + 8);
          *(_QWORD *)(v426 + 16) = *(_QWORD *)(v427 + 16);
          *((_BYTE *)a1 + v479) = 1;
          swift_bridgeObjectRetain();
          break;
        case 2u:
          v505 = v24 + 16;
          v480 = v36;
          v510 = v39;
          v87 = *(void (**)(void))(v444 + 16);
          v88 = v17;
          v492 = v22;
          v488 = *(_QWORD *)(v12 + 64) + 7;
          v476 = *(_QWORD *)(v449 - 8);
          v89 = v21;
          v90 = v41;
          v91 = ~v14;
          v87();
          v92 = ((unint64_t)a1 + v447) & v6;
          v93 = (unint64_t)&a2[v447] & v6;
          ((void (*)(unint64_t, unint64_t, uint64_t))v87)(v92, v93, v448);
          v94 = (v88 + v92) & v91;
          v95 = (v88 + v93) & v91;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v445 + 16))(v94, v95, v446);
          v96 = (_QWORD *)((v20 + v94) & 0xFFFFFFFFFFFFFFF8);
          v97 = (_QWORD *)((v20 + v95) & 0xFFFFFFFFFFFFFFF8);
          *v96 = *v97;
          v98 = ((unint64_t)v96 + v89) & v90;
          v99 = ((unint64_t)v97 + v89) & v90;
          v100 = *(void (**)(unint64_t, unint64_t, uint64_t))(v476 + 16);
          swift_bridgeObjectRetain();
          v100(v98, v99, v449);
          v101 = (_QWORD *)((v488 + v98) & 0xFFFFFFFFFFFFF8);
          v102 = (_QWORD *)((v488 + v99) & 0xFFFFFFFFFFFFF8);
          *v101 = *v102;
          v103 = (_QWORD *)(((unint64_t)v101 + 15) & 0xFFFFFFFFFFFFFFF8);
          v104 = (_QWORD *)(((unint64_t)v102 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v103 = *v104;
          v103[1] = v104[1];
          v105 = (_QWORD *)(v492 + v94);
          *v105 = *(_QWORD *)(v492 + v95);
          v105[1] = *(_QWORD *)(v492 + v95 + 8);
          v106 = (v459 + v492 + v94) & v489;
          v107 = (v459 + v492 + v95) & v489;
          *(_BYTE *)v106 = *(_BYTE *)v107;
          v108 = v106 | 4;
          v109 = *(_DWORD *)(v107 | 4);
          *(_BYTE *)(v108 + 4) = *(_BYTE *)((v107 | 4) + 4);
          *(_DWORD *)v108 = v109;
          *(_WORD *)(v106 + 10) = *(_WORD *)(v107 + 0xA);
          v110 = (v460 + v106) & v510;
          v111 = (v460 + v107) & v510;
          v112 = *(void (**)(uint64_t, uint64_t, uint64_t))(v452 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v112(v110, v111, v458);
          v113 = (v457 + v110) & v510;
          v114 = (v457 + v111) & v510;
          v112(v113, v114, v458);
          v115 = (_BYTE *)(v113 + v466);
          *v115 = *(_BYTE *)(v114 + v466);
          v115[1] = *(_BYTE *)(v114 + v466 + 1);
          v115[2] = *(_BYTE *)(v114 + v466 + 2);
          v115[3] = *(_BYTE *)(v114 + v466 + 3);
          v115[4] = *(_BYTE *)(v114 + v466 + 4);
          v116 = (v113 + v466 + 12) & 0xFFFFFFFFFFFFFFF8;
          v117 = (v114 + v466 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v116 = *(_QWORD *)v117;
          *(_QWORD *)(v116 + 8) = *(_QWORD *)(v117 + 8);
          *(_BYTE *)(v116 + 16) = *(_BYTE *)(v117 + 16);
          *(_BYTE *)(v116 + 17) = *(_BYTE *)(v117 + 17);
          *(_BYTE *)(v116 + 18) = *(_BYTE *)(v117 + 18);
          *(_BYTE *)(v116 + 19) = *(_BYTE *)(v117 + 19);
          v118 = (v116 + 27) & 0xFFFFFFFFFFFFFFF8;
          v119 = (v117 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v118 = *(_QWORD *)v119;
          *(_BYTE *)(v118 + 8) = *(_BYTE *)(v119 + 8);
          *(_BYTE *)(v118 + 9) = *(_BYTE *)(v119 + 9);
          *(_BYTE *)(v118 + 10) = *(_BYTE *)(v119 + 10);
          *(_BYTE *)(v118 + 11) = *(_BYTE *)(v119 + 11);
          *(_BYTE *)(v118 + 12) = *(_BYTE *)(v119 + 12);
          v120 = (_QWORD *)((v116 + 47) & 0xFFFFFFFFFFFFF8);
          v121 = (_QWORD *)((v117 + 47) & 0xFFFFFFFFFFFFF8);
          *v120 = *v121;
          v122 = ((unint64_t)v120 + 15) & 0xFFFFFFFFFFFFFFF8;
          v123 = ((unint64_t)v121 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v122 = *(_QWORD *)v123;
          *(_BYTE *)(v122 + 8) = *(_BYTE *)(v123 + 8);
          *(_BYTE *)(v122 + 9) = *(_BYTE *)(v123 + 9);
          v124 = (void *)((v454 + v122) & v510);
          v125 = (const void *)((v454 + v123) & v510);
          v126 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v452 + 48);
          swift_bridgeObjectRetain();
          if (v126(v125, 1, v458))
          {
            memcpy(v124, v125, __n);
          }
          else
          {
            v112((uint64_t)v124, (uint64_t)v125, v458);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v452 + 56))(v124, 0, 1, v458);
          }
          v130 = (_QWORD *)(((unint64_t)v124 + v455) & 0xFFFFFFFFFFFFFFF8);
          v131 = (_QWORD *)(((unint64_t)v125 + v455) & 0xFFFFFFFFFFFFFFF8);
          *v130 = *v131;
          v132 = ((unint64_t)v130 + 15) & 0xFFFFFFFFFFFFFFF8;
          v133 = ((unint64_t)v131 + 15) & 0xFFFFFFFFFFFFFFF8;
          v134 = *(_QWORD *)v133;
          *(_BYTE *)(v132 + 8) = *(_BYTE *)(v133 + 8);
          *(_QWORD *)v132 = v134;
          v135 = (_QWORD *)(((unint64_t)v130 + 31) & 0xFFFFFFFFFFFFF8);
          v136 = (_QWORD *)(((unint64_t)v131 + 31) & 0xFFFFFFFFFFFFF8);
          *v135 = *v136;
          v137 = ((unint64_t)v135 + 15) & 0xFFFFFFFFFFFFFFF8;
          v138 = (uint64_t *)(((unint64_t)v136 + 15) & 0xFFFFFFFFFFFFFFF8);
          v139 = v138[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v139 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v137 = *(_OWORD *)v138;
          }
          else
          {
            v140 = *v138;
            sub_23AAAE668(*v138, v139);
            *(_QWORD *)v137 = v140;
            *(_QWORD *)(v137 + 8) = v139;
          }
          v141 = (v137 + 19) & 0xFFFFFFFFFFFFFFF8;
          v142 = ((unint64_t)v138 + 19) & 0xFFFFFFFFFFFFFFF8;
          v143 = *(_QWORD *)v142;
          *(_BYTE *)(v141 + 8) = *(_BYTE *)(v142 + 8);
          *(_QWORD *)v141 = v143;
          *(_BYTE *)(v141 + 9) = *(_BYTE *)(v142 + 9);
          v144 = (v141 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v145 = (v142 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v146 = *(_DWORD *)v145;
          *(_BYTE *)(v144 + 4) = *(_BYTE *)(v145 + 4);
          *(_DWORD *)v144 = v146;
          v147 = (_QWORD *)((v141 + 25) & 0xFFFFFFFFFFFFFFF8);
          v148 = (_QWORD *)((v142 + 25) & 0xFFFFFFFFFFFFFFF8);
          *v147 = *v148;
          v147[1] = v148[1];
          v149 = v106 + v456;
          v150 = (__int128 *)(v107 + v456);
          v151 = *(_QWORD *)(v107 + v456 + 16);
          if (v151 >= 0xFFFFFFFF)
            LODWORD(v151) = -1;
          v152 = v151 - 1;
          swift_bridgeObjectRetain();
          if (v152 < 0)
          {
            *(_QWORD *)v149 = *(_QWORD *)v150;
            *(_BYTE *)(v149 + 8) = *((_BYTE *)v150 + 8);
            *(_BYTE *)(v149 + 9) = *((_BYTE *)v150 + 9);
            v165 = (void *)*((_QWORD *)v150 + 2);
            v166 = v165;
            *(_QWORD *)(v149 + 16) = v165;
            v167 = (void *)*((_QWORD *)v150 + 3);
            v168 = v167;
            *(_QWORD *)(v149 + 24) = v167;
            *(_BYTE *)(v149 + 32) = *((_BYTE *)v150 + 32);
            *(_BYTE *)(v149 + 33) = *((_BYTE *)v150 + 33);
            *(_BYTE *)(v149 + 34) = *((_BYTE *)v150 + 34);
            *(_QWORD *)(v149 + 40) = *((_QWORD *)v150 + 5);
            *(_QWORD *)(v149 + 48) = *((_QWORD *)v150 + 6);
            *(_QWORD *)(v149 + 56) = *((_QWORD *)v150 + 7);
            *(_QWORD *)(v149 + 64) = *((_QWORD *)v150 + 8);
            *(_BYTE *)(v149 + 72) = *((_BYTE *)v150 + 72);
            *(_QWORD *)(v149 + 80) = *((_QWORD *)v150 + 10);
            *(_QWORD *)(v149 + 88) = *((_QWORD *)v150 + 11);
            v511 = (void *)*((_QWORD *)v150 + 12);
            *(_QWORD *)(v149 + 96) = v511;
            *(_BYTE *)(v149 + 104) = *((_BYTE *)v150 + 104);
            *(_BYTE *)(v149 + 105) = *((_BYTE *)v150 + 105);
            *(_QWORD *)(v149 + 112) = *((_QWORD *)v150 + 14);
            *(_QWORD *)(v149 + 120) = *((_QWORD *)v150 + 15);
            *(_QWORD *)(v149 + 128) = *((_QWORD *)v150 + 16);
            *(_QWORD *)(v149 + 136) = *((_QWORD *)v150 + 17);
            *(_QWORD *)(v149 + 144) = *((_QWORD *)v150 + 18);
            *(_QWORD *)(v149 + 152) = *((_QWORD *)v150 + 19);
            *(_QWORD *)(v149 + 160) = *((_QWORD *)v150 + 20);
            *(_QWORD *)(v149 + 168) = *((_QWORD *)v150 + 21);
            *(_BYTE *)(v149 + 176) = *((_BYTE *)v150 + 176);
            *(_QWORD *)(v149 + 184) = *((_QWORD *)v150 + 23);
            v169 = *((_QWORD *)v150 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v170 = v511;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v169)
            {
              *(_QWORD *)(v149 + 192) = v169;
              *(_QWORD *)(v149 + 200) = *((_QWORD *)v150 + 25);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v149 + 192) = v150[12];
            }
            *(_QWORD *)(v149 + 208) = *((_QWORD *)v150 + 26);
            *(_QWORD *)(v149 + 216) = *((_QWORD *)v150 + 27);
            *(_QWORD *)(v149 + 224) = *((_QWORD *)v150 + 28);
            *(_QWORD *)(v149 + 232) = *((_QWORD *)v150 + 29);
            *(_QWORD *)(v149 + 240) = *((_QWORD *)v150 + 30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v153 = *v150;
            v154 = v150[1];
            v155 = v150[3];
            *(_OWORD *)(v149 + 32) = v150[2];
            *(_OWORD *)(v149 + 48) = v155;
            *(_OWORD *)v149 = v153;
            *(_OWORD *)(v149 + 16) = v154;
            v156 = v150[4];
            v157 = v150[5];
            v158 = v150[7];
            *(_OWORD *)(v149 + 96) = v150[6];
            *(_OWORD *)(v149 + 112) = v158;
            *(_OWORD *)(v149 + 64) = v156;
            *(_OWORD *)(v149 + 80) = v157;
            v159 = v150[8];
            v160 = v150[9];
            v161 = v150[11];
            *(_OWORD *)(v149 + 160) = v150[10];
            *(_OWORD *)(v149 + 176) = v161;
            *(_OWORD *)(v149 + 128) = v159;
            *(_OWORD *)(v149 + 144) = v160;
            v162 = v150[12];
            v163 = v150[13];
            v164 = v150[14];
            *(_QWORD *)(v149 + 240) = *((_QWORD *)v150 + 30);
            *(_OWORD *)(v149 + 208) = v163;
            *(_OWORD *)(v149 + 224) = v164;
            *(_OWORD *)(v149 + 192) = v162;
          }
          v217 = (_OWORD *)((v149 + 255) & 0xFFFFFFFFFFFFFFF8);
          v218 = (__int128 *)(((unint64_t)v150 + 255) & 0xFFFFFFFFFFFFFFF8);
          v219 = *v218;
          *(_OWORD *)((char *)v217 + 9) = *(__int128 *)((char *)v218 + 9);
          *v217 = v219;
          v220 = (v149 + 287) & 0xFFFFFFFFFFFFFFF8;
          v221 = ((unint64_t)v150 + 287) & 0xFFFFFFFFFFFFFFF8;
          v222 = *(_OWORD *)v221;
          *(_BYTE *)(v220 + 16) = *(_BYTE *)(v221 + 16);
          *(_OWORD *)v220 = v222;
          v223 = (_QWORD *)((v149 + 311) & 0xFFFFFFFFFFFFF8);
          v224 = ((unint64_t)v150 + 311) & 0xFFFFFFFFFFFFF8;
          v225 = *(_QWORD *)v224;
          v224 += 15;
          *v223 = v225;
          v226 = (_QWORD *)(((unint64_t)v223 + 15) & 0xFFFFFFFFFFFFFFF8);
          v227 = *(_QWORD *)(v224 & 0xFFFFFFFFFFFFFFF8);
          v228 = *(_QWORD *)((v224 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_23AA7F2D4(v227, v228);
          *v226 = v227;
          v226[1] = v228;
          *((_BYTE *)a1 + v505) = a2[v505];
          v229 = ((unint64_t)a1 + v505) & 0xFFFFFFFFFFFFFFF8;
          v230 = (unint64_t)&a2[v505] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v229 + 8) = *(_QWORD *)(v230 + 8);
          *(_QWORD *)(v229 + 16) = *(_QWORD *)(v230 + 16);
          *((_BYTE *)a1 + v480) = 2;
          swift_bridgeObjectRetain();
          return a1;
        case 3u:
          v127 = *((_QWORD *)a2 + 1);
          *a1 = *(_QWORD *)a2;
          a1[1] = v127;
          *((_BYTE *)a1 + v36) = 3;
          swift_bridgeObjectRetain();
          return a1;
        default:
          v38 = *(_DWORD *)a2 + 4;
          continue;
      }
      break;
    }
  }
  return a1;
}

void sub_23AF07EAC(_DWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t AssociatedTypeWitness;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v28 = *(unsigned __int8 *)(v1 + 80);
  v29 = *(_QWORD *)(v1 + 64);
  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_DWORD *)(v2 + 80) & 0xF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80);
  v32 = v3 | v4 | 7;
  v5 = ((((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64)
         + 7
         + ((v4 + 8 + ((*(_QWORD *)(v2 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v4)) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  v6 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v31 = (v7 | 7) + 16;
  v8 = *(_QWORD *)(v6 + 64);
  v9 = (v7
      + 10
      + ((((((v8 + 12 + ((v8 + v7 + ((v7 + 12) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  if (!*(_DWORD *)(v6 + 84))
    ++v8;
  v27 = ((((((((((v8 + 7 + v9) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  v10 = ((((v27 + ((v31 + ((v29 + v32 + ((v29 + v28) & ~v28)) & ~v32) + v5) & ~(v7 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v11 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v14 = *(_DWORD *)(v13 + 80) & 0xF8;
  v15 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v14 | v16 | 7;
  v18 = (v27
       + ((v31
         + ((*(_QWORD *)(v11 + 64) + v17 + ((*(_QWORD *)(v11 + 64) + v12) & ~v12)) & ~v17)
         + ((((*(_QWORD *)(v15 + 64) + 7 + ((v16 + 8 + ((*(_QWORD *)(v13 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v16)) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 16) & ~(v7 | 7))) & 0xFFFFFFFFFFFFFFF8;
  v19 = ((((((v18 + 15) & 0xFFFFFFFFFFFFFFF8) + 23 + ((v10 + (v12 | v7 | v17)) & ~(v12 | v7 | v17))) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v20 = v32 | v28 | v7;
  if (((v10 + ((v20 + v29) & ~v20)) & 0xFFFFFFFFFFFFFFF8) + 24 > v19)
    v19 = ((v10 + ((v20 + v29) & ~v20)) & 0xFFFFFFFFFFFFFFF8) + 24;
  v21 = ((v18 + 39) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v21 <= v19)
    v21 = v19;
  v22 = 16;
  if (v21 > 0x10)
    v22 = v21;
  v23 = *((unsigned __int8 *)a1 + v22);
  v24 = v22 & 0xFFFFFFF8;
  if (v23 >= 4 && v24 != 0)
    v23 = *a1 + 4;
  __asm { BR              X10 }
}

uint64_t sub_23AF08340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int (*v29)(unint64_t, uint64_t, uint64_t);
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v17 = v13;
  *(_QWORD *)(v16 - 160) = v11;
  v48 = v10;
  v49 = v9;
  v50 = v8;
  *(_QWORD *)(v16 - 168) = a2;
  v18 = *(void (**)(uint64_t))(v14 + 8);
  v18(v12);
  v20 = (v61 + v12) & *(_QWORD *)(v16 - 176);
  v18(v20);
  v21 = (v20 + *(_QWORD *)(v16 - 136) + *(_QWORD *)(v16 - 96)) & a4;
  (*(void (**)(uint64_t))(*(_QWORD *)(v16 - 120) + 8))(v21);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t))(*(_QWORD *)(v16 - 128) + 8))((v58 + ((v59 + v21) & 0xFFFFFFFFFFFFFFF8)) & v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = (*(_QWORD *)(v16 - 104) + v60 + v21) & *(_QWORD *)(v16 - 144);
  v23 = (*(_QWORD *)(v16 - 184) + v22) & v15;
  v24 = *(void (**)(unint64_t, uint64_t))(v65 + 8);
  v25 = *(_QWORD *)(v16 - 208);
  v24(v23, v25);
  v26 = (*(_QWORD *)(v16 - 200) + v23) & v15;
  v24(v26, v25);
  v27 = (*(_QWORD *)(v16 - 192) + v26) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v16 - 96) = v15;
  v28 = (v66 + ((((v27 + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v15;
  v29 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v65 + 48);
  if (!v29(v28, 1, v25))
    v24(v28, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(((((((v67 + v28) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 8);
  if ((v30 & 0x3000000000000000) == 0)
    sub_23AAAE53C(*(_QWORD *)((((((v67 + v28) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v30);
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(v16 - 160) + v22;
  v32 = *(void **)(v31 + 16);
  LODWORD(v33) = -1;
  if ((unint64_t)v32 < 0xFFFFFFFF)
    v33 = *(_QWORD *)(v31 + 16);
  if ((int)v33 - 1 < 0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v31 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_23AAA12F0(*(_QWORD *)((((v31 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v31 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
  v34 = (v56 + *(_QWORD *)(v16 - 112)) & v17;
  v35 = *(void (**)(uint64_t))(v63 + 8);
  v35(v34);
  v35((v62 + v34) & v48);
  v36 = (a1 + ((v62 + v34) & v48)) & v49;
  (*(void (**)(uint64_t))(v64 + 8))(v36);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t))(a5 + 8))((a7 + ((a8 + v36) & 0xFFFFFFFFFFFFFFF8)) & v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v37 = *(_QWORD *)(v16 - 96);
  v38 = (*(_QWORD *)(v16 - 104) + v36 + a3) & *(_QWORD *)(v16 - 144);
  v39 = (*(_QWORD *)(v16 - 184) + v38) & v37;
  v24(v39, v25);
  v40 = (*(_QWORD *)(v16 - 200) + v39) & v37;
  v24(v40, v25);
  v41 = (*(_QWORD *)(v16 - 192) + v40) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v42 = (v66 + ((((v41 + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v37;
  if (!v29(v42, 1, v25))
    v24(v42, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v43 = *(_QWORD *)(((((((v67 + v42) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 8);
  if ((v43 & 0x3000000000000000) == 0)
    sub_23AAAE53C(*(_QWORD *)((((((v67 + v42) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v43);
  swift_bridgeObjectRelease();
  v44 = v38 + *(_QWORD *)(v16 - 160);
  v45 = *(void **)(v44 + 16);
  LODWORD(v46) = -1;
  if ((unint64_t)v45 < 0xFFFFFFFF)
    v46 = *(_QWORD *)(v44 + 16);
  if ((int)v46 - 1 < 0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v44 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_23AAA12F0(*(_QWORD *)((((v44 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v44 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
  return swift_bridgeObjectRelease();
}

void sub_23AF08F28(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t AssociatedTypeWitness;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v28 = *(unsigned __int8 *)(v2 + 80);
  v29 = *(_QWORD *)(v2 + 64);
  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = *(_DWORD *)(v3 + 80) & 0xF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80);
  v32 = v4 | v5 | 7;
  v6 = ((((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64)
         + 7
         + ((v5 + 8 + ((*(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v5)) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  v7 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v31 = (v8 | 7) + 16;
  v9 = *(_QWORD *)(v7 + 64);
  if (*(_DWORD *)(v7 + 84))
    v10 = *(_QWORD *)(v7 + 64);
  else
    v10 = v9 + 1;
  v27 = (((((((((v10
               + 7
               + ((v8
                 + 10
                 + ((((((v9 + 12 + ((v9 + v8 + ((v8 + 12) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8)
             + 31) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 19) & 0xFFFFFFFFFFFFFFF8)
       + 25) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((((((v31 + ((v29 + v32 + ((v29 + v28) & ~v28)) & ~v32) + v6) & ~(v8 | 7)) + v27 + 16 + 311) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v15 = *(_DWORD *)(v14 + 80) & 0xF8;
  v16 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = v15 | v17 | 7;
  v19 = (v27
       + ((v31
         + ((*(_QWORD *)(v12 + 64) + v18 + ((*(_QWORD *)(v12 + 64) + v13) & ~v13)) & ~v18)
         + ((((*(_QWORD *)(v16 + 64) + 7 + ((v17 + 8 + ((*(_QWORD *)(v14 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v17)) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 16) & ~(v8 | 7))
       + 327) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((((((v19 + 15) & 0xFFFFFFFFFFFFFFF8) + 23 + ((v11 + (v13 | v8 | v18)) & ~(v13 | v8 | v18))) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v21 = v32 | v28 | v8;
  if (((v11 + ((v21 + v29) & ~v21)) & 0xFFFFFFFFFFFFFFF8) + 24 > v20)
    v20 = ((v11 + ((v21 + v29) & ~v21)) & 0xFFFFFFFFFFFFFFF8) + 24;
  v22 = ((v19 + 39) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v22 <= v20)
    v22 = v20;
  if (v22 <= 0x10)
    v23 = 16;
  else
    v23 = v22;
  v24 = *((unsigned __int8 *)a2 + v23);
  if (v24 >= 4 && (v23 & 0xFFFFFFF8) != 0)
    v24 = *a2 + 4;
  __asm { BR              X10 }
}

uint64_t sub_23AF093D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(unint64_t, unint64_t);
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const void *v47;
  void (*v48)(void *, const void *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  const void *v64;
  uint64_t (*v65)(const void *, uint64_t, uint64_t);
  int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 *v91;
  unint64_t v92;
  int v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  id v109;
  void *v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  _OWORD *v116;
  __int128 *v117;
  __int128 v118;
  unint64_t v119;
  unint64_t v120;
  __int128 v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t v138;
  void (*v139)(unint64_t, unint64_t);
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  const void *v153;
  uint64_t v154;
  void (*v155)(void *, const void *, uint64_t);
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  unint64_t v168;
  unint64_t v169;
  void *v170;
  const void *v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  unint64_t v180;
  uint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  int v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  __int128 *v194;
  unint64_t v195;
  int v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  id v212;
  void *v213;
  id v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  id v218;
  _OWORD *v219;
  __int128 *v220;
  __int128 v221;
  unint64_t v222;
  unint64_t v223;
  __int128 v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  unint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v243;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  size_t v258;
  uint64_t v259;

  v236 = v13;
  v237 = v12;
  v238 = v11;
  v239 = v9;
  *(_QWORD *)(v16 - 184) = v10;
  v18 = *(void (**)(uint64_t, uint64_t))(v14 + 16);
  v19 = *(_QWORD *)(v16 - 104);
  v21 = v8;
  v18(v19, a2);
  v23 = *(_QWORD *)(v16 - 176);
  v24 = (v254 + v19) & v23;
  v25 = (v254 + a2) & v23;
  v18(v24, v25);
  v26 = *(_QWORD *)(v16 - 152);
  v27 = *(_QWORD *)(v16 - 96);
  v28 = (v24 + v26 + v27) & v15;
  v29 = (v25 + v26 + v27) & v15;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 136) + 16))(v28, v29);
  v30 = (_QWORD *)((v250 + v28) & 0xFFFFFFFFFFFFFFF8);
  v31 = (_QWORD *)((v250 + v29) & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v31;
  v32 = ((unint64_t)v30 + v249) & v248;
  v33 = ((unint64_t)v31 + v249) & v248;
  v34 = *(void (**)(unint64_t, unint64_t))(*(_QWORD *)(v16 - 144) + 16);
  swift_bridgeObjectRetain();
  v34(v32, v33);
  v35 = (_QWORD *)((v247 + v32) & 0xFFFFFFFFFFFFF8);
  v36 = (_QWORD *)((v247 + v33) & 0xFFFFFFFFFFFFF8);
  *v35 = *v36;
  v37 = (_QWORD *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  v38 = (_QWORD *)(((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v37 = *v38;
  v37[1] = v38[1];
  v39 = (_QWORD *)(v251 + v28);
  *v39 = *(_QWORD *)(v251 + v29);
  v39[1] = *(_QWORD *)(v251 + v29 + 8);
  v40 = *(_QWORD *)(v16 - 112);
  v41 = *(_QWORD *)(v16 - 160);
  v42 = (v40 + v251 + v28) & v41;
  v43 = (v40 + v251 + v29) & v41;
  *(_BYTE *)v42 = *(_BYTE *)v43;
  v44 = v42 | 4;
  LODWORD(v40) = *(_DWORD *)(v43 | 4);
  *(_BYTE *)(v44 + 4) = *(_BYTE *)((v43 | 4) + 4);
  *(_DWORD *)v44 = v40;
  *(_WORD *)(v42 + 10) = *(_WORD *)(v43 + 10);
  v45 = *(_QWORD *)(v16 - 200);
  v46 = (void *)((v45 + v42) & a4);
  *(_QWORD *)(v16 - 152) = v43;
  v47 = (const void *)((v45 + v43) & a4);
  v48 = *(void (**)(void *, const void *, uint64_t))(v257 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v48(v46, v47, v21);
  v49 = *(_QWORD *)(v16 - 208);
  v50 = (char *)(((unint64_t)v46 + v49) & a4);
  v51 = (char *)(((unint64_t)v47 + v49) & a4);
  v48(v50, v51, v21);
  v52 = *(_QWORD *)(v16 - 192);
  v53 = &v50[v52];
  v54 = &v51[v52];
  *v53 = *v54;
  v53[1] = v54[1];
  v53[2] = v54[2];
  v53[3] = v54[3];
  v53[4] = v54[4];
  v55 = (unint64_t)(v53 + 12) & 0xFFFFFFFFFFFFFFF8;
  v56 = (unint64_t)(v54 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v55 = *(_QWORD *)v56;
  *(_QWORD *)(v55 + 8) = *(_QWORD *)(v56 + 8);
  *(_BYTE *)(v55 + 16) = *(_BYTE *)(v56 + 16);
  *(_BYTE *)(v55 + 17) = *(_BYTE *)(v56 + 17);
  *(_BYTE *)(v55 + 18) = *(_BYTE *)(v56 + 18);
  *(_BYTE *)(v55 + 19) = *(_BYTE *)(v56 + 19);
  v57 = (v55 + 27) & 0xFFFFFFFFFFFFFFF8;
  v58 = (v56 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v57 = *(_QWORD *)v58;
  *(_BYTE *)(v57 + 8) = *(_BYTE *)(v58 + 8);
  *(_BYTE *)(v57 + 9) = *(_BYTE *)(v58 + 9);
  *(_BYTE *)(v57 + 10) = *(_BYTE *)(v58 + 10);
  *(_BYTE *)(v57 + 11) = *(_BYTE *)(v58 + 11);
  *(_BYTE *)(v57 + 12) = *(_BYTE *)(v58 + 12);
  v59 = (_QWORD *)((v55 + 47) & 0xFFFFFFFFFFFFF8);
  v60 = (_QWORD *)((v56 + 47) & 0xFFFFFFFFFFFFF8);
  *v59 = *v60;
  v61 = ((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFFFF8;
  v62 = ((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *(_BYTE *)(v61 + 8) = *(_BYTE *)(v62 + 8);
  *(_BYTE *)(v61 + 9) = *(_BYTE *)(v62 + 9);
  v63 = (void *)((v259 + v61) & a4);
  *(_QWORD *)(v16 - 96) = a4;
  v64 = (const void *)((v259 + v62) & a4);
  v65 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v257 + 48);
  swift_bridgeObjectRetain();
  v66 = v65(v64, 1, v21);
  *(_QWORD *)(v16 - 144) = v65;
  *(_QWORD *)(v16 - 136) = v48;
  if (v66)
  {
    memcpy(v63, v64, v258);
  }
  else
  {
    v48(v63, v64, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v257 + 56))(v63, 0, 1, v21);
  }
  v67 = *(_QWORD *)(v16 - 104);
  v68 = *(_QWORD *)(v16 - 224);
  v69 = (_QWORD *)(((unint64_t)v63 + v68) & 0xFFFFFFFFFFFFFFF8);
  v70 = (_QWORD *)(((unint64_t)v64 + v68) & 0xFFFFFFFFFFFFFFF8);
  *v69 = *v70;
  v71 = ((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8;
  v72 = ((unint64_t)v70 + 15) & 0xFFFFFFFFFFFFFFF8;
  v73 = *(_QWORD *)v72;
  *(_BYTE *)(v71 + 8) = *(_BYTE *)(v72 + 8);
  *(_QWORD *)v71 = v73;
  v74 = (_QWORD *)(((unint64_t)v69 + 31) & 0xFFFFFFFFFFFFF8);
  v75 = (_QWORD *)(((unint64_t)v70 + 31) & 0xFFFFFFFFFFFFF8);
  *v74 = *v75;
  v76 = ((unint64_t)v74 + 15) & 0xFFFFFFFFFFFFFFF8;
  v77 = (uint64_t *)(((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFFFF8);
  v78 = v77[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v78 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v76 = *(_OWORD *)v77;
  }
  else
  {
    v79 = *v77;
    sub_23AAAE668(*v77, v78);
    *(_QWORD *)v76 = v79;
    *(_QWORD *)(v76 + 8) = v78;
  }
  v80 = *(_QWORD *)(v16 - 152);
  v81 = (v76 + 19) & 0xFFFFFFFFFFFFFFF8;
  v82 = ((unint64_t)v77 + 19) & 0xFFFFFFFFFFFFFFF8;
  v83 = *(_QWORD *)v82;
  *(_BYTE *)(v81 + 8) = *(_BYTE *)(v82 + 8);
  *(_QWORD *)v81 = v83;
  *(_BYTE *)(v81 + 9) = *(_BYTE *)(v82 + 9);
  v84 = (v81 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v85 = (v82 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v86 = *(_DWORD *)v85;
  *(_BYTE *)(v84 + 4) = *(_BYTE *)(v85 + 4);
  *(_DWORD *)v84 = v86;
  v87 = (_QWORD *)((v81 + 25) & 0xFFFFFFFFFFFFFFF8);
  v88 = (_QWORD *)((v82 + 25) & 0xFFFFFFFFFFFFFFF8);
  *v87 = *v88;
  v87[1] = v88[1];
  v89 = *(_QWORD *)(v16 - 216);
  v90 = v89 + v42;
  v91 = (__int128 *)(v89 + v80);
  v92 = *(_QWORD *)(v89 + v80 + 16);
  if (v92 >= 0xFFFFFFFF)
    LODWORD(v92) = -1;
  v93 = v92 - 1;
  swift_bridgeObjectRetain();
  if (v93 < 0)
  {
    *(_QWORD *)v90 = *(_QWORD *)v91;
    *(_BYTE *)(v90 + 8) = *((_BYTE *)v91 + 8);
    *(_BYTE *)(v90 + 9) = *((_BYTE *)v91 + 9);
    v108 = (void *)*((_QWORD *)v91 + 2);
    v109 = v108;
    *(_QWORD *)(v90 + 16) = v108;
    v110 = (void *)*((_QWORD *)v91 + 3);
    v111 = v110;
    *(_QWORD *)(v90 + 24) = v110;
    *(_BYTE *)(v90 + 32) = *((_BYTE *)v91 + 32);
    *(_BYTE *)(v90 + 33) = *((_BYTE *)v91 + 33);
    *(_BYTE *)(v90 + 34) = *((_BYTE *)v91 + 34);
    *(_QWORD *)(v90 + 40) = *((_QWORD *)v91 + 5);
    *(_QWORD *)(v90 + 48) = *((_QWORD *)v91 + 6);
    *(_QWORD *)(v90 + 56) = *((_QWORD *)v91 + 7);
    v112 = *((_QWORD *)v91 + 8);
    *(_QWORD *)(v16 - 168) = v112;
    *(_QWORD *)(v90 + 64) = v112;
    *(_BYTE *)(v90 + 72) = *((_BYTE *)v91 + 72);
    *(_QWORD *)(v90 + 80) = *((_QWORD *)v91 + 10);
    *(_QWORD *)(v90 + 88) = *((_QWORD *)v91 + 11);
    v113 = *((_QWORD *)v91 + 12);
    *(_QWORD *)(v16 - 152) = v113;
    *(_QWORD *)(v90 + 96) = v113;
    *(_BYTE *)(v90 + 104) = *((_BYTE *)v91 + 104);
    *(_BYTE *)(v90 + 105) = *((_BYTE *)v91 + 105);
    *(_QWORD *)(v90 + 112) = *((_QWORD *)v91 + 14);
    *(_QWORD *)(v90 + 120) = *((_QWORD *)v91 + 15);
    *(_QWORD *)(v90 + 128) = *((_QWORD *)v91 + 16);
    *(_QWORD *)(v90 + 136) = *((_QWORD *)v91 + 17);
    *(_QWORD *)(v90 + 144) = *((_QWORD *)v91 + 18);
    *(_QWORD *)(v90 + 152) = *((_QWORD *)v91 + 19);
    *(_QWORD *)(v90 + 160) = *((_QWORD *)v91 + 20);
    *(_QWORD *)(v90 + 168) = *((_QWORD *)v91 + 21);
    *(_BYTE *)(v90 + 176) = *((_BYTE *)v91 + 176);
    *(_QWORD *)(v90 + 184) = *((_QWORD *)v91 + 23);
    v114 = *((_QWORD *)v91 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v115 = *(id *)(v16 - 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v114)
    {
      *(_QWORD *)(v90 + 192) = v114;
      *(_QWORD *)(v90 + 200) = *((_QWORD *)v91 + 25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v90 + 192) = v91[12];
    }
    v67 = *(_QWORD *)(v16 - 104);
    v107 = v252;
    v106 = v253;
    *(_QWORD *)(v90 + 208) = *((_QWORD *)v91 + 26);
    *(_QWORD *)(v90 + 216) = *((_QWORD *)v91 + 27);
    *(_QWORD *)(v90 + 224) = *((_QWORD *)v91 + 28);
    *(_QWORD *)(v90 + 232) = *((_QWORD *)v91 + 29);
    *(_QWORD *)(v90 + 240) = *((_QWORD *)v91 + 30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v94 = *v91;
    v95 = v91[1];
    v96 = v91[3];
    *(_OWORD *)(v90 + 32) = v91[2];
    *(_OWORD *)(v90 + 48) = v96;
    *(_OWORD *)v90 = v94;
    *(_OWORD *)(v90 + 16) = v95;
    v97 = v91[4];
    v98 = v91[5];
    v99 = v91[7];
    *(_OWORD *)(v90 + 96) = v91[6];
    *(_OWORD *)(v90 + 112) = v99;
    *(_OWORD *)(v90 + 64) = v97;
    *(_OWORD *)(v90 + 80) = v98;
    v100 = v91[8];
    v101 = v91[9];
    v102 = v91[11];
    *(_OWORD *)(v90 + 160) = v91[10];
    *(_OWORD *)(v90 + 176) = v102;
    *(_OWORD *)(v90 + 128) = v100;
    *(_OWORD *)(v90 + 144) = v101;
    v103 = v91[12];
    v104 = v91[13];
    v105 = v91[14];
    *(_QWORD *)(v90 + 240) = *((_QWORD *)v91 + 30);
    *(_OWORD *)(v90 + 208) = v104;
    *(_OWORD *)(v90 + 224) = v105;
    *(_OWORD *)(v90 + 192) = v103;
    v107 = v252;
    v106 = v253;
  }
  v116 = (_OWORD *)((v90 + 255) & 0xFFFFFFFFFFFFFFF8);
  v117 = (__int128 *)(((unint64_t)v91 + 255) & 0xFFFFFFFFFFFFFFF8);
  v118 = *v117;
  *(_OWORD *)((char *)v116 + 9) = *(__int128 *)((char *)v117 + 9);
  *v116 = v118;
  v119 = (v90 + 287) & 0xFFFFFFFFFFFFFFF8;
  v120 = ((unint64_t)v91 + 287) & 0xFFFFFFFFFFFFFFF8;
  v121 = *(_OWORD *)v120;
  *(_BYTE *)(v119 + 16) = *(_BYTE *)(v120 + 16);
  *(_OWORD *)v119 = v121;
  v122 = (_QWORD *)((v90 + 311) & 0xFFFFFFFFFFFFF8);
  v123 = ((unint64_t)v91 + 311) & 0xFFFFFFFFFFFFF8;
  v124 = *(_QWORD *)v123;
  v123 += 15;
  *v122 = v124;
  v125 = (_QWORD *)(((unint64_t)v122 + 15) & 0xFFFFFFFFFFFFFFF8);
  v126 = *(_QWORD *)(v123 & 0xFFFFFFFFFFFFFFF8);
  v127 = *(_QWORD *)((v123 & 0xFFFFFFFFFFFFFFF8) + 8);
  sub_23AA7F2D4(v126, v127);
  *v125 = v126;
  v125[1] = v127;
  v128 = (v243 + v67) & v236;
  v129 = (v243 + *(_QWORD *)(v16 - 128)) & v236;
  v130 = *(void (**)(uint64_t, uint64_t))(v256 + 16);
  v130(v128, v129);
  *(_QWORD *)(v16 - 128) = v128;
  v131 = (v255 + v128) & v237;
  *(_QWORD *)(v16 - 152) = v129;
  v132 = (v255 + v129) & v237;
  v130(v131, v132);
  v133 = (v17 + v131) & v238;
  v134 = (v17 + v132) & v238;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16))(v133, v134, v106);
  v135 = (_QWORD *)((a8 + v133) & 0xFFFFFFFFFFFFFFF8);
  v136 = (_QWORD *)((a8 + v134) & 0xFFFFFFFFFFFFFFF8);
  *v135 = *v136;
  v137 = ((unint64_t)v135 + a7) & v239;
  v138 = ((unint64_t)v136 + a7) & v239;
  v139 = *(void (**)(unint64_t, unint64_t))(a6 + 16);
  swift_bridgeObjectRetain();
  v139(v137, v138);
  v140 = (_QWORD *)((a5 + v137) & 0xFFFFFFFFFFFFF8);
  v141 = (_QWORD *)((a5 + v138) & 0xFFFFFFFFFFFFF8);
  *v140 = *v141;
  v142 = (_QWORD *)(((unint64_t)v140 + 15) & 0xFFFFFFFFFFFFFFF8);
  v143 = (_QWORD *)(((unint64_t)v141 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v142 = *v143;
  v142[1] = v143[1];
  v144 = (_QWORD *)(v133 + a3);
  *v144 = *(_QWORD *)(v134 + a3);
  v144[1] = *(_QWORD *)(v134 + a3 + 8);
  v145 = *(_QWORD *)(v16 - 112);
  v146 = *(_QWORD *)(v16 - 160);
  v147 = (v145 + v133 + a3) & v146;
  v148 = (v145 + v134 + a3) & v146;
  *(_BYTE *)v147 = *(_BYTE *)v148;
  v149 = v147 | 4;
  LODWORD(v145) = *(_DWORD *)(v148 | 4);
  *(_BYTE *)(v149 + 4) = *(_BYTE *)((v148 | 4) + 4);
  *(_DWORD *)v149 = v145;
  *(_WORD *)(v147 + 10) = *(_WORD *)(v148 + 10);
  v150 = *(_QWORD *)(v16 - 200);
  v151 = *(_QWORD *)(v16 - 96);
  v152 = (void *)((v150 + v147) & v151);
  v153 = (const void *)((v150 + v148) & v151);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v154 = *(_QWORD *)(v16 - 120);
  v155 = *(void (**)(void *, const void *, uint64_t))(v16 - 136);
  v155(v152, v153, v154);
  v156 = *(_QWORD *)(v16 - 208);
  v157 = (char *)(((unint64_t)v152 + v156) & v151);
  v158 = (char *)(((unint64_t)v153 + v156) & v151);
  v155(v157, v158, v154);
  v159 = *(_QWORD *)(v16 - 192);
  v160 = &v157[v159];
  v161 = &v158[v159];
  *v160 = *v161;
  v160[1] = v161[1];
  v160[2] = v161[2];
  v160[3] = v161[3];
  v160[4] = v161[4];
  v162 = (unint64_t)(v160 + 12) & 0xFFFFFFFFFFFFFFF8;
  v163 = (unint64_t)(v161 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v162 = *(_QWORD *)v163;
  *(_QWORD *)(v162 + 8) = *(_QWORD *)(v163 + 8);
  *(_BYTE *)(v162 + 16) = *(_BYTE *)(v163 + 16);
  *(_BYTE *)(v162 + 17) = *(_BYTE *)(v163 + 17);
  *(_BYTE *)(v162 + 18) = *(_BYTE *)(v163 + 18);
  *(_BYTE *)(v162 + 19) = *(_BYTE *)(v163 + 19);
  v164 = (v162 + 27) & 0xFFFFFFFFFFFFFFF8;
  v165 = (v163 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v164 = *(_QWORD *)v165;
  *(_BYTE *)(v164 + 8) = *(_BYTE *)(v165 + 8);
  *(_BYTE *)(v164 + 9) = *(_BYTE *)(v165 + 9);
  *(_BYTE *)(v164 + 10) = *(_BYTE *)(v165 + 10);
  *(_BYTE *)(v164 + 11) = *(_BYTE *)(v165 + 11);
  *(_BYTE *)(v164 + 12) = *(_BYTE *)(v165 + 12);
  v166 = (_QWORD *)((v162 + 47) & 0xFFFFFFFFFFFFF8);
  v167 = (_QWORD *)((v163 + 47) & 0xFFFFFFFFFFFFF8);
  *v166 = *v167;
  v168 = ((unint64_t)v166 + 15) & 0xFFFFFFFFFFFFFFF8;
  v169 = ((unint64_t)v167 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v168 = *(_QWORD *)v169;
  *(_BYTE *)(v168 + 8) = *(_BYTE *)(v169 + 8);
  *(_BYTE *)(v168 + 9) = *(_BYTE *)(v169 + 9);
  v170 = (void *)((v259 + v168) & v151);
  v171 = (const void *)((v259 + v169) & v151);
  swift_bridgeObjectRetain();
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 - 144))(v171, 1, v154))
  {
    memcpy(v170, v171, v258);
  }
  else
  {
    v155(v170, v171, v154);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v257 + 56))(v170, 0, 1, v154);
  }
  v172 = *(_QWORD *)(v16 - 224);
  v173 = (_QWORD *)(((unint64_t)v170 + v172) & 0xFFFFFFFFFFFFFFF8);
  v174 = (_QWORD *)(((unint64_t)v171 + v172) & 0xFFFFFFFFFFFFFFF8);
  *v173 = *v174;
  v175 = ((unint64_t)v173 + 15) & 0xFFFFFFFFFFFFFFF8;
  v176 = ((unint64_t)v174 + 15) & 0xFFFFFFFFFFFFFFF8;
  v177 = *(_QWORD *)v176;
  *(_BYTE *)(v175 + 8) = *(_BYTE *)(v176 + 8);
  *(_QWORD *)v175 = v177;
  v178 = (_QWORD *)(((unint64_t)v173 + 31) & 0xFFFFFFFFFFFFF8);
  v179 = (_QWORD *)(((unint64_t)v174 + 31) & 0xFFFFFFFFFFFFF8);
  *v178 = *v179;
  v180 = ((unint64_t)v178 + 15) & 0xFFFFFFFFFFFFFFF8;
  v181 = (uint64_t *)(((unint64_t)v179 + 15) & 0xFFFFFFFFFFFFFFF8);
  v182 = v181[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v182 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v180 = *(_OWORD *)v181;
  }
  else
  {
    v183 = *v181;
    sub_23AAAE668(*v181, v182);
    *(_QWORD *)v180 = v183;
    *(_QWORD *)(v180 + 8) = v182;
  }
  v184 = (v180 + 19) & 0xFFFFFFFFFFFFFFF8;
  v185 = ((unint64_t)v181 + 19) & 0xFFFFFFFFFFFFFFF8;
  v186 = *(_QWORD *)v185;
  *(_BYTE *)(v184 + 8) = *(_BYTE *)(v185 + 8);
  *(_QWORD *)v184 = v186;
  *(_BYTE *)(v184 + 9) = *(_BYTE *)(v185 + 9);
  v187 = (v184 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v188 = (v185 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v189 = *(_DWORD *)v188;
  *(_BYTE *)(v187 + 4) = *(_BYTE *)(v188 + 4);
  *(_DWORD *)v187 = v189;
  v190 = (_QWORD *)((v184 + 25) & 0xFFFFFFFFFFFFFFF8);
  v191 = (_QWORD *)((v185 + 25) & 0xFFFFFFFFFFFFFFF8);
  *v190 = *v191;
  v190[1] = v191[1];
  v192 = *(_QWORD *)(v16 - 216);
  v193 = v147 + v192;
  v194 = (__int128 *)(v148 + v192);
  v195 = *(_QWORD *)(v148 + v192 + 16);
  if (v195 >= 0xFFFFFFFF)
    LODWORD(v195) = -1;
  v196 = v195 - 1;
  swift_bridgeObjectRetain();
  if (v196 < 0)
  {
    *(_QWORD *)v193 = *(_QWORD *)v194;
    *(_BYTE *)(v193 + 8) = *((_BYTE *)v194 + 8);
    *(_BYTE *)(v193 + 9) = *((_BYTE *)v194 + 9);
    v211 = (void *)*((_QWORD *)v194 + 2);
    v212 = v211;
    *(_QWORD *)(v193 + 16) = v211;
    v213 = (void *)*((_QWORD *)v194 + 3);
    v214 = v213;
    *(_QWORD *)(v193 + 24) = v213;
    *(_BYTE *)(v193 + 32) = *((_BYTE *)v194 + 32);
    *(_BYTE *)(v193 + 33) = *((_BYTE *)v194 + 33);
    *(_BYTE *)(v193 + 34) = *((_BYTE *)v194 + 34);
    *(_QWORD *)(v193 + 40) = *((_QWORD *)v194 + 5);
    *(_QWORD *)(v193 + 48) = *((_QWORD *)v194 + 6);
    *(_QWORD *)(v193 + 56) = *((_QWORD *)v194 + 7);
    v215 = *((_QWORD *)v194 + 8);
    *(_QWORD *)(v16 - 112) = v215;
    *(_QWORD *)(v193 + 64) = v215;
    *(_BYTE *)(v193 + 72) = *((_BYTE *)v194 + 72);
    *(_QWORD *)(v193 + 80) = *((_QWORD *)v194 + 10);
    *(_QWORD *)(v193 + 88) = *((_QWORD *)v194 + 11);
    v216 = *((_QWORD *)v194 + 12);
    *(_QWORD *)(v16 - 96) = v216;
    *(_QWORD *)(v193 + 96) = v216;
    *(_BYTE *)(v193 + 104) = *((_BYTE *)v194 + 104);
    *(_BYTE *)(v193 + 105) = *((_BYTE *)v194 + 105);
    *(_QWORD *)(v193 + 112) = *((_QWORD *)v194 + 14);
    *(_QWORD *)(v193 + 120) = *((_QWORD *)v194 + 15);
    *(_QWORD *)(v193 + 128) = *((_QWORD *)v194 + 16);
    *(_QWORD *)(v193 + 136) = *((_QWORD *)v194 + 17);
    *(_QWORD *)(v193 + 144) = *((_QWORD *)v194 + 18);
    *(_QWORD *)(v193 + 152) = *((_QWORD *)v194 + 19);
    *(_QWORD *)(v193 + 160) = *((_QWORD *)v194 + 20);
    *(_QWORD *)(v193 + 168) = *((_QWORD *)v194 + 21);
    *(_BYTE *)(v193 + 176) = *((_BYTE *)v194 + 176);
    *(_QWORD *)(v193 + 184) = *((_QWORD *)v194 + 23);
    v217 = *((_QWORD *)v194 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v218 = *(id *)(v16 - 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v217)
    {
      *(_QWORD *)(v193 + 192) = v217;
      *(_QWORD *)(v193 + 200) = *((_QWORD *)v194 + 25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v193 + 192) = v194[12];
    }
    v67 = *(_QWORD *)(v16 - 104);
    v209 = *(_QWORD *)(v16 - 128);
    v210 = *(_QWORD *)(v16 - 152);
    *(_QWORD *)(v193 + 208) = *((_QWORD *)v194 + 26);
    *(_QWORD *)(v193 + 216) = *((_QWORD *)v194 + 27);
    *(_QWORD *)(v193 + 224) = *((_QWORD *)v194 + 28);
    *(_QWORD *)(v193 + 232) = *((_QWORD *)v194 + 29);
    *(_QWORD *)(v193 + 240) = *((_QWORD *)v194 + 30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v197 = *v194;
    v198 = v194[1];
    v199 = v194[3];
    *(_OWORD *)(v193 + 32) = v194[2];
    *(_OWORD *)(v193 + 48) = v199;
    *(_OWORD *)v193 = v197;
    *(_OWORD *)(v193 + 16) = v198;
    v200 = v194[4];
    v201 = v194[5];
    v202 = v194[7];
    *(_OWORD *)(v193 + 96) = v194[6];
    *(_OWORD *)(v193 + 112) = v202;
    *(_OWORD *)(v193 + 64) = v200;
    *(_OWORD *)(v193 + 80) = v201;
    v203 = v194[8];
    v204 = v194[9];
    v205 = v194[11];
    *(_OWORD *)(v193 + 160) = v194[10];
    *(_OWORD *)(v193 + 176) = v205;
    *(_OWORD *)(v193 + 128) = v203;
    *(_OWORD *)(v193 + 144) = v204;
    v206 = v194[12];
    v207 = v194[13];
    v208 = v194[14];
    *(_QWORD *)(v193 + 240) = *((_QWORD *)v194 + 30);
    *(_OWORD *)(v193 + 208) = v207;
    *(_OWORD *)(v193 + 224) = v208;
    *(_OWORD *)(v193 + 192) = v206;
    v209 = *(_QWORD *)(v16 - 128);
    v210 = *(_QWORD *)(v16 - 152);
  }
  v219 = (_OWORD *)((v193 + 255) & 0xFFFFFFFFFFFFFFF8);
  v220 = (__int128 *)(((unint64_t)v194 + 255) & 0xFFFFFFFFFFFFFFF8);
  v221 = *v220;
  *(_OWORD *)((char *)v219 + 9) = *(__int128 *)((char *)v220 + 9);
  *v219 = v221;
  v222 = (v193 + 287) & 0xFFFFFFFFFFFFFFF8;
  v223 = ((unint64_t)v194 + 287) & 0xFFFFFFFFFFFFFFF8;
  v224 = *(_OWORD *)v223;
  *(_BYTE *)(v222 + 16) = *(_BYTE *)(v223 + 16);
  *(_OWORD *)v222 = v224;
  v225 = (_QWORD *)((v193 + 311) & 0xFFFFFFFFFFFFF8);
  v226 = ((unint64_t)v194 + 311) & 0xFFFFFFFFFFFFF8;
  v227 = *(_QWORD *)v226;
  v226 += 15;
  *v225 = v227;
  v228 = (_QWORD *)(((unint64_t)v225 + 15) & 0xFFFFFFFFFFFFFFF8);
  v229 = *(_QWORD *)(v226 & 0xFFFFFFFFFFFFFFF8);
  v230 = *(_QWORD *)((v226 & 0xFFFFFFFFFFFFFFF8) + 8);
  sub_23AA7F2D4(v229, v230);
  *v228 = v229;
  v228[1] = v230;
  v231 = (_QWORD *)((a1 + v209) & 0xFFFFFFFFFFFFF8);
  v232 = (_QWORD *)((a1 + v210) & 0xFFFFFFFFFFFFF8);
  *v231 = *v232;
  v233 = (_QWORD *)(((unint64_t)v231 + 15) & 0xFFFFFFFFFFFFFFF8);
  v234 = (_QWORD *)(((unint64_t)v232 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v233 = *v234;
  v233[1] = v234[1];
  *(_BYTE *)(v67 + *(_QWORD *)(v16 - 184)) = 0;
  swift_bridgeObjectRetain();
  return v67;
}

_DWORD *sub_23AF0B218(_DWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t AssociatedTypeWitness;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v2 = result;
  if (result != a2)
  {
    v30 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v28 = *(unsigned __int8 *)(v30 + 80);
    v29 = *(_QWORD *)(v30 + 64);
    v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v4 = *(_DWORD *)(v3 + 80) & 0xF8;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80);
    v32 = v4 | v5 | 7;
    v6 = ((((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64)
           + 7
           + ((v5 + 8 + ((*(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v5)) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    v7 = *(_QWORD *)(sub_23B1C5BDC() - 8);
    v8 = *(unsigned __int8 *)(v7 + 80);
    v33 = (v8 | 7) + 16;
    v9 = *(_QWORD *)(v7 + 64);
    if (*(_DWORD *)(v7 + 84))
      v10 = *(_QWORD *)(v7 + 64);
    else
      v10 = v9 + 1;
    v31 = v2;
    v27 = (((((((((v10
                 + 7
                 + ((v8
                   + 10
                   + ((((((v9 + 12 + ((v9 + v8 + ((v8 + 12) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8)
               + 31) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 19) & 0xFFFFFFFFFFFFFFF8)
         + 25) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((((((v33 + ((v29 + v32 + ((v29 + v28) & ~v28)) & ~v32) + v6) & ~(v8 | 7)) + v27 + 16 + 311) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    v12 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v13 = *(unsigned __int8 *)(v12 + 80);
    v14 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v15 = *(_DWORD *)(v14 + 80) & 0xF8;
    v16 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v17 = *(unsigned __int8 *)(v16 + 80);
    v18 = v15 | v17 | 7;
    v19 = (v27
         + ((v33
           + ((*(_QWORD *)(v12 + 64) + v18 + ((*(_QWORD *)(v12 + 64) + v13) & ~v13)) & ~v18)
           + ((((*(_QWORD *)(v16 + 64)
               + 7
               + ((v17 + 8 + ((*(_QWORD *)(v14 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v17)) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16) & ~(v8 | 7))
         + 327) & 0xFFFFFFFFFFFFFFF8;
    v20 = ((((((v19 + 15) & 0xFFFFFFFFFFFFFFF8) + 23 + ((v11 + (v13 | v8 | v18)) & ~(v13 | v8 | v18))) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    v21 = v32 | v28 | v8;
    if (((v11 + ((v21 + v29) & ~v21)) & 0xFFFFFFFFFFFFFFF8) + 24 > v20)
      v20 = ((v11 + ((v21 + v29) & ~v21)) & 0xFFFFFFFFFFFFFFF8) + 24;
    v22 = ((v19 + 39) & 0xFFFFFFFFFFFFFFF8) + 16;
    if (v22 <= v20)
      v22 = v20;
    if (v22 <= 0x10)
      v23 = 16;
    else
      v23 = v22;
    v24 = *((unsigned __int8 *)v31 + v23);
    if (v24 >= 4 && (v23 & 0xFFFFFFF8) != 0)
      v24 = *v31 + 4;
    __asm { BR              X10 }
  }
  return result;
}

void sub_23AF0E0C4(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t AssociatedTypeWitness;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v28 = *(unsigned __int8 *)(v2 + 80);
  v29 = *(_QWORD *)(v2 + 64);
  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = *(_DWORD *)(v3 + 80) & 0xF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80);
  v32 = v4 | v5 | 7;
  v6 = ((((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64)
         + 7
         + ((v5 + 8 + ((*(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v5)) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  v7 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v31 = (v8 | 7) + 16;
  v9 = *(_QWORD *)(v7 + 64);
  if (*(_DWORD *)(v7 + 84))
    v10 = *(_QWORD *)(v7 + 64);
  else
    v10 = v9 + 1;
  v27 = (((((((((v10
               + 7
               + ((v8
                 + 10
                 + ((((((v9 + 12 + ((v9 + v8 + ((v8 + 12) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8)
             + 31) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 19) & 0xFFFFFFFFFFFFFFF8)
       + 25) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((((((v31 + ((v29 + v32 + ((v29 + v28) & ~v28)) & ~v32) + v6) & ~(v8 | 7)) + v27 + 16 + 311) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v15 = *(_DWORD *)(v14 + 80) & 0xF8;
  v16 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = v15 | v17 | 7;
  v19 = (v27
       + ((v31
         + ((*(_QWORD *)(v12 + 64) + v18 + ((*(_QWORD *)(v12 + 64) + v13) & ~v13)) & ~v18)
         + ((((*(_QWORD *)(v16 + 64) + 7 + ((v17 + 8 + ((*(_QWORD *)(v14 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v17)) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 16) & ~(v8 | 7))
       + 327) & 0xFFFFFFFFFFFFFFF8;
  v20 = ((((((v19 + 15) & 0xFFFFFFFFFFFFFFF8) + 23 + ((v11 + (v13 | v8 | v18)) & ~(v13 | v8 | v18))) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v21 = v32 | v28 | v8;
  if (((v11 + ((v21 + v29) & ~v21)) & 0xFFFFFFFFFFFFFFF8) + 24 > v20)
    v20 = ((v11 + ((v21 + v29) & ~v21)) & 0xFFFFFFFFFFFFFFF8) + 24;
  v22 = ((v19 + 39) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v22 <= v20)
    v22 = v20;
  if (v22 <= 0x10)
    v23 = 16;
  else
    v23 = v22;
  v24 = *((unsigned __int8 *)a2 + v23);
  if (v24 >= 4 && (v23 & 0xFFFFFFF8) != 0)
    v24 = *a2 + 4;
  __asm { BR              X10 }
}

uint64_t sub_23AF0E578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  void (*v42)(void *, const void *);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  const void *v59;
  uint64_t (*v60)(const void *, uint64_t);
  int v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _OWORD *v70;
  _OWORD *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD *v92;
  __int128 *v93;
  __int128 v94;
  unint64_t v95;
  unint64_t v96;
  __int128 v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const void *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  void *v135;
  const void *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  _OWORD *v146;
  _OWORD *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 *v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  _OWORD *v168;
  __int128 *v169;
  __int128 v170;
  unint64_t v171;
  unint64_t v172;
  __int128 v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v186;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  size_t v201;

  v180 = v13;
  v181 = v11;
  v182 = v10;
  v183 = v8;
  *(_QWORD *)(v15 - 152) = v9;
  v17 = *(void (**)(uint64_t, uint64_t))(v12 + 32);
  v18 = *(_QWORD *)(v15 - 112);
  v17(v18, a2);
  v20 = *(_QWORD *)(v15 - 168);
  v21 = (v196 + v18) & v20;
  v22 = a2;
  v23 = (v196 + a2) & v20;
  v17(v21, v23);
  v24 = *(_QWORD *)(v15 - 144);
  v25 = *(_QWORD *)(v15 - 96);
  v26 = *(_QWORD *)(v15 - 176);
  v27 = (v21 + v24 + v25) & v26;
  v28 = (v23 + v24 + v25) & v26;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 120) + 32))(v27, v28);
  v29 = (_QWORD *)((v193 + v27) & 0xFFFFFFFFFFFFFFF8);
  v30 = (_QWORD *)((v193 + v28) & 0xFFFFFFFFFFFFFFF8);
  *v29 = *v30;
  v31 = ((unint64_t)v29 + v192) & v191;
  v32 = ((unint64_t)v30 + v192) & v191;
  (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)(v15 - 128) + 32))(v31, v32);
  v33 = (_QWORD *)((v190 + v32) & 0xFFFFFFFFFFFFF8);
  v34 = (_QWORD *)((v190 + v31) & 0xFFFFFFFFFFFFF8);
  *v34 = *v33;
  *(_OWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFF8);
  *(_OWORD *)(v194 + v27) = *(_OWORD *)(v194 + v28);
  v35 = *(_QWORD *)(v15 - 104);
  v36 = (v35 + v194 + v27) & v16;
  *(_QWORD *)(v15 - 144) = v16;
  v37 = (v35 + v194 + v28) & v16;
  *(_BYTE *)v36 = *(_BYTE *)v37;
  v38 = v36 | 4;
  LODWORD(v35) = *(_DWORD *)(v37 | 4);
  *(_BYTE *)(v38 + 4) = *(_BYTE *)((v37 | 4) + 4);
  *(_DWORD *)v38 = v35;
  *(_WORD *)(v36 + 10) = *(_WORD *)(v37 + 10);
  v39 = *(_QWORD *)(v15 - 184);
  v40 = (void *)((v39 + v36) & v14);
  v41 = (const void *)((v39 + v37) & v14);
  v42 = *(void (**)(void *, const void *))(v200 + 32);
  v42(v40, v41);
  v43 = *(_QWORD *)(v15 - 192);
  v44 = (char *)(((unint64_t)v40 + v43) & v14);
  v45 = (char *)(((unint64_t)v41 + v43) & v14);
  v42(v44, v45);
  v46 = *(_QWORD *)(v15 - 216);
  v47 = &v44[v46];
  v48 = &v45[v46];
  *v47 = *v48;
  v47[1] = v48[1];
  v47[2] = v48[2];
  v47[3] = v48[3];
  v47[4] = v48[4];
  v49 = (unint64_t)(v47 + 12) & 0xFFFFFFFFFFFFFFF8;
  v50 = (unint64_t)(v48 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v49 = *(_OWORD *)v50;
  *(_BYTE *)(v49 + 16) = *(_BYTE *)(v50 + 16);
  *(_BYTE *)(v49 + 17) = *(_BYTE *)(v50 + 17);
  *(_BYTE *)(v49 + 18) = *(_BYTE *)(v50 + 18);
  *(_BYTE *)(v49 + 19) = *(_BYTE *)(v50 + 19);
  v51 = (v49 + 27) & 0xFFFFFFFFFFFFFFF8;
  v52 = (v50 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  *(_BYTE *)(v51 + 9) = *(_BYTE *)(v52 + 9);
  *(_BYTE *)(v51 + 10) = *(_BYTE *)(v52 + 10);
  *(_BYTE *)(v51 + 11) = *(_BYTE *)(v52 + 11);
  *(_BYTE *)(v51 + 12) = *(_BYTE *)(v52 + 12);
  v53 = (_QWORD *)((v49 + 47) & 0xFFFFFFFFFFFFF8);
  v54 = (_QWORD *)((v50 + 47) & 0xFFFFFFFFFFFFF8);
  *v53 = *v54;
  v55 = ((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8;
  v56 = ((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v55 = *(_QWORD *)v56;
  *(_BYTE *)(v55 + 8) = *(_BYTE *)(v56 + 8);
  *(_BYTE *)(v55 + 9) = *(_BYTE *)(v56 + 9);
  v57 = *(_QWORD *)(v15 - 224);
  v58 = (void *)((v57 + v55) & v14);
  *(_QWORD *)(v15 - 96) = v14;
  v59 = (const void *)((v57 + v56) & v14);
  v60 = *(uint64_t (**)(const void *, uint64_t))(v200 + 48);
  v61 = v60(v59, 1);
  *(_QWORD *)(v15 - 120) = v60;
  if (v61)
  {
    memcpy(v58, v59, v201);
  }
  else
  {
    v42(v58, v59);
    (*(void (**)(void *, _QWORD, uint64_t))(v200 + 56))(v58, 0, 1);
  }
  v62 = *(_QWORD *)(v15 - 208);
  v63 = (_QWORD *)(((unint64_t)v58 + v62) & 0xFFFFFFFFFFFFFFF8);
  v64 = (_QWORD *)(((unint64_t)v59 + v62) & 0xFFFFFFFFFFFFFFF8);
  *v63 = *v64;
  v65 = ((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8;
  v66 = ((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFFFF8;
  v67 = *(_QWORD *)v66;
  *(_BYTE *)(v65 + 8) = *(_BYTE *)(v66 + 8);
  *(_QWORD *)v65 = v67;
  v68 = (_QWORD *)(((unint64_t)v63 + 31) & 0xFFFFFFFFFFFFF8);
  v69 = (_QWORD *)(((unint64_t)v64 + 31) & 0xFFFFFFFFFFFFF8);
  *v68 = *v69;
  v70 = (_OWORD *)(((unint64_t)v68 + 15) & 0xFFFFFFFFFFFFFFF8);
  v71 = (_OWORD *)(((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v70 = *v71;
  v72 = ((unint64_t)v70 + 19) & 0xFFFFFFFFFFFFFFF8;
  v73 = ((unint64_t)v71 + 19) & 0xFFFFFFFFFFFFFFF8;
  v74 = *(_QWORD *)v73;
  *(_BYTE *)(v72 + 8) = *(_BYTE *)(v73 + 8);
  *(_QWORD *)v72 = v74;
  *(_BYTE *)(v72 + 9) = *(_BYTE *)(v73 + 9);
  v75 = (v72 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v76 = (v73 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  LODWORD(v67) = *(_DWORD *)v76;
  *(_BYTE *)(v75 + 4) = *(_BYTE *)(v76 + 4);
  *(_DWORD *)v75 = v67;
  *(_OWORD *)((v72 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v73 + 25) & 0xFFFFFFFFFFFFF8);
  v77 = *(_QWORD *)(v15 - 200);
  v78 = v77 + v36;
  v79 = (__int128 *)(v77 + v37);
  v80 = v79[7];
  v82 = v79[4];
  v81 = v79[5];
  *(_OWORD *)(v78 + 96) = v79[6];
  *(_OWORD *)(v78 + 112) = v80;
  *(_OWORD *)(v78 + 64) = v82;
  *(_OWORD *)(v78 + 80) = v81;
  v83 = v79[11];
  v85 = v79[8];
  v84 = v79[9];
  *(_OWORD *)(v78 + 160) = v79[10];
  *(_OWORD *)(v78 + 176) = v83;
  *(_OWORD *)(v78 + 128) = v85;
  *(_OWORD *)(v78 + 144) = v84;
  v87 = v79[13];
  v86 = v79[14];
  v88 = v79[12];
  *(_QWORD *)(v78 + 240) = *((_QWORD *)v79 + 30);
  *(_OWORD *)(v78 + 208) = v87;
  *(_OWORD *)(v78 + 224) = v86;
  *(_OWORD *)(v78 + 192) = v88;
  v89 = *v79;
  v90 = v79[1];
  v91 = v79[3];
  *(_OWORD *)(v78 + 32) = v79[2];
  *(_OWORD *)(v78 + 48) = v91;
  *(_OWORD *)v78 = v89;
  *(_OWORD *)(v78 + 16) = v90;
  v92 = (_OWORD *)((v78 + 255) & 0xFFFFFFFFFFFFFFF8);
  v93 = (__int128 *)(((unint64_t)v79 + 255) & 0xFFFFFFFFFFFFFFF8);
  v94 = *v93;
  *(_OWORD *)((char *)v92 + 9) = *(__int128 *)((char *)v93 + 9);
  *v92 = v94;
  v95 = (v78 + 287) & 0xFFFFFFFFFFFFFFF8;
  v96 = ((unint64_t)v79 + 287) & 0xFFFFFFFFFFFFFFF8;
  v97 = *(_OWORD *)v96;
  *(_BYTE *)(v95 + 16) = *(_BYTE *)(v96 + 16);
  *(_OWORD *)v95 = v97;
  v98 = (_QWORD *)(((unint64_t)v79 + 311) & 0xFFFFFFFFFFFFF8);
  v99 = (_QWORD *)((v78 + 311) & 0xFFFFFFFFFFFFF8);
  *v99 = *v98;
  *(_OWORD *)(((unint64_t)v99 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFF8);
  v100 = (v186 + v18) & v180;
  v101 = (v186 + v22) & v180;
  v102 = *(void (**)(uint64_t, uint64_t))(v195 + 32);
  v102(v100, v101);
  v102((v197 + v100) & v181, (v197 + v101) & v181);
  v103 = (v198 + ((v197 + v100) & v181)) & v182;
  v104 = (v198 + ((v197 + v101) & v181)) & v182;
  (*(void (**)(uint64_t, uint64_t))(v199 + 32))(v103, v104);
  v105 = (_QWORD *)((a8 + v103) & 0xFFFFFFFFFFFFFFF8);
  v106 = (_QWORD *)((a8 + v104) & 0xFFFFFFFFFFFFFFF8);
  *v105 = *v106;
  v107 = ((unint64_t)v105 + a7) & v183;
  v108 = ((unint64_t)v106 + a7) & v183;
  (*(void (**)(unint64_t, unint64_t))(a5 + 32))(v107, v108);
  v109 = (_QWORD *)((a6 + v107) & 0xFFFFFFFFFFFFF8);
  v110 = (_QWORD *)((a6 + v108) & 0xFFFFFFFFFFFFF8);
  *v109 = *v110;
  *(_OWORD *)(((unint64_t)v109 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v110 + 15) & 0xFFFFFFFFFFFFF8);
  *(_OWORD *)(v103 + a3) = *(_OWORD *)(v104 + a3);
  v111 = *(_QWORD *)(v15 - 104);
  v112 = *(_QWORD *)(v15 - 96);
  v113 = *(_QWORD *)(v15 - 144);
  v114 = (v111 + v103 + a3) & v113;
  v115 = (v111 + v104 + a3) & v113;
  *(_BYTE *)v114 = *(_BYTE *)v115;
  v116 = v114 | 4;
  LODWORD(v111) = *(_DWORD *)(v115 | 4);
  *(_BYTE *)(v116 + 4) = *(_BYTE *)((v115 | 4) + 4);
  *(_DWORD *)v116 = v111;
  *(_WORD *)(v114 + 10) = *(_WORD *)(v115 + 10);
  v117 = *(_QWORD *)(v15 - 184);
  v118 = (void *)((v117 + v114) & v112);
  v119 = (const void *)((v117 + v115) & v112);
  v42(v118, v119);
  v120 = *(_QWORD *)(v15 - 192);
  v121 = (char *)(((unint64_t)v118 + v120) & v112);
  v122 = (char *)(((unint64_t)v119 + v120) & v112);
  v42(v121, v122);
  v123 = *(_QWORD *)(v15 - 216);
  v124 = &v121[v123];
  v125 = &v122[v123];
  *v124 = *v125;
  v124[1] = v125[1];
  v124[2] = v125[2];
  v124[3] = v125[3];
  v124[4] = v125[4];
  v126 = (unint64_t)(v124 + 12) & 0xFFFFFFFFFFFFFFF8;
  v127 = (unint64_t)(v125 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v126 = *(_OWORD *)v127;
  *(_BYTE *)(v126 + 16) = *(_BYTE *)(v127 + 16);
  *(_BYTE *)(v126 + 17) = *(_BYTE *)(v127 + 17);
  *(_BYTE *)(v126 + 18) = *(_BYTE *)(v127 + 18);
  *(_BYTE *)(v126 + 19) = *(_BYTE *)(v127 + 19);
  v128 = (v126 + 27) & 0xFFFFFFFFFFFFFFF8;
  v129 = (v127 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v128 = *(_QWORD *)v129;
  *(_BYTE *)(v128 + 8) = *(_BYTE *)(v129 + 8);
  *(_BYTE *)(v128 + 9) = *(_BYTE *)(v129 + 9);
  *(_BYTE *)(v128 + 10) = *(_BYTE *)(v129 + 10);
  *(_BYTE *)(v128 + 11) = *(_BYTE *)(v129 + 11);
  *(_BYTE *)(v128 + 12) = *(_BYTE *)(v129 + 12);
  v130 = (_QWORD *)((v126 + 47) & 0xFFFFFFFFFFFFF8);
  v131 = (_QWORD *)((v127 + 47) & 0xFFFFFFFFFFFFF8);
  *v130 = *v131;
  v132 = ((unint64_t)v130 + 15) & 0xFFFFFFFFFFFFFFF8;
  v133 = ((unint64_t)v131 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v132 = *(_QWORD *)v133;
  *(_BYTE *)(v132 + 8) = *(_BYTE *)(v133 + 8);
  *(_BYTE *)(v132 + 9) = *(_BYTE *)(v133 + 9);
  v134 = *(_QWORD *)(v15 - 224);
  v135 = (void *)((v134 + v132) & v112);
  v136 = (const void *)((v134 + v133) & v112);
  if ((*(unsigned int (**)(const void *, uint64_t))(v15 - 120))(v136, 1))
  {
    memcpy(v135, v136, v201);
  }
  else
  {
    v42(v135, v136);
    (*(void (**)(void *, _QWORD, uint64_t))(v200 + 56))(v135, 0, 1);
  }
  v137 = *(_QWORD *)(v15 - 152);
  v138 = *(_QWORD *)(v15 - 208);
  v139 = (_QWORD *)(((unint64_t)v135 + v138) & 0xFFFFFFFFFFFFFFF8);
  v140 = (_QWORD *)(((unint64_t)v136 + v138) & 0xFFFFFFFFFFFFFFF8);
  *v139 = *v140;
  v141 = ((unint64_t)v139 + 15) & 0xFFFFFFFFFFFFFFF8;
  v142 = ((unint64_t)v140 + 15) & 0xFFFFFFFFFFFFFFF8;
  v143 = *(_QWORD *)v142;
  *(_BYTE *)(v141 + 8) = *(_BYTE *)(v142 + 8);
  *(_QWORD *)v141 = v143;
  v144 = (_QWORD *)(((unint64_t)v139 + 31) & 0xFFFFFFFFFFFFF8);
  v145 = (_QWORD *)(((unint64_t)v140 + 31) & 0xFFFFFFFFFFFFF8);
  *v144 = *v145;
  v146 = (_OWORD *)(((unint64_t)v144 + 15) & 0xFFFFFFFFFFFFFFF8);
  v147 = (_OWORD *)(((unint64_t)v145 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v146 = *v147;
  v148 = ((unint64_t)v146 + 19) & 0xFFFFFFFFFFFFFFF8;
  v149 = ((unint64_t)v147 + 19) & 0xFFFFFFFFFFFFFFF8;
  v150 = *(_QWORD *)v149;
  *(_BYTE *)(v148 + 8) = *(_BYTE *)(v149 + 8);
  *(_QWORD *)v148 = v150;
  *(_BYTE *)(v148 + 9) = *(_BYTE *)(v149 + 9);
  v151 = (v148 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v152 = (v149 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  LODWORD(v143) = *(_DWORD *)v152;
  *(_BYTE *)(v151 + 4) = *(_BYTE *)(v152 + 4);
  *(_DWORD *)v151 = v143;
  *(_OWORD *)((v148 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v149 + 25) & 0xFFFFFFFFFFFFF8);
  v153 = *(_QWORD *)(v15 - 200);
  v154 = v114 + v153;
  v155 = (__int128 *)(v115 + v153);
  v156 = v155[7];
  v158 = v155[4];
  v157 = v155[5];
  *(_OWORD *)(v154 + 96) = v155[6];
  *(_OWORD *)(v154 + 112) = v156;
  *(_OWORD *)(v154 + 64) = v158;
  *(_OWORD *)(v154 + 80) = v157;
  v159 = v155[11];
  v161 = v155[8];
  v160 = v155[9];
  *(_OWORD *)(v154 + 160) = v155[10];
  *(_OWORD *)(v154 + 176) = v159;
  *(_OWORD *)(v154 + 128) = v161;
  *(_OWORD *)(v154 + 144) = v160;
  v163 = v155[13];
  v162 = v155[14];
  v164 = v155[12];
  *(_QWORD *)(v154 + 240) = *((_QWORD *)v155 + 30);
  *(_OWORD *)(v154 + 208) = v163;
  *(_OWORD *)(v154 + 224) = v162;
  *(_OWORD *)(v154 + 192) = v164;
  v165 = *v155;
  v166 = v155[1];
  v167 = v155[3];
  *(_OWORD *)(v154 + 32) = v155[2];
  *(_OWORD *)(v154 + 48) = v167;
  *(_OWORD *)v154 = v165;
  *(_OWORD *)(v154 + 16) = v166;
  v168 = (_OWORD *)((v154 + 255) & 0xFFFFFFFFFFFFFFF8);
  v169 = (__int128 *)(((unint64_t)v155 + 255) & 0xFFFFFFFFFFFFFFF8);
  v170 = *v169;
  *(_OWORD *)((char *)v168 + 9) = *(__int128 *)((char *)v169 + 9);
  *v168 = v170;
  v171 = (v154 + 287) & 0xFFFFFFFFFFFFFFF8;
  v172 = ((unint64_t)v155 + 287) & 0xFFFFFFFFFFFFFFF8;
  v173 = *(_OWORD *)v172;
  *(_BYTE *)(v171 + 16) = *(_BYTE *)(v172 + 16);
  *(_OWORD *)v171 = v173;
  v174 = (_QWORD *)((v154 + 311) & 0xFFFFFFFFFFFFF8);
  v175 = (_QWORD *)(((unint64_t)v155 + 311) & 0xFFFFFFFFFFFFF8);
  *v174 = *v175;
  *(_OWORD *)(((unint64_t)v174 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v175 + 15) & 0xFFFFFFFFFFFFF8);
  v176 = (_QWORD *)((a1 + v100) & 0xFFFFFFFFFFFFF8);
  v177 = (_QWORD *)((a1 + v101) & 0xFFFFFFFFFFFFF8);
  *v176 = *v177;
  *(_OWORD *)(((unint64_t)v176 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v177 + 15) & 0xFFFFFFFFFFFFF8);
  *(_BYTE *)(v18 + v137) = 0;
  return v18;
}

_DWORD *sub_23AF0FA14(_DWORD *result, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t AssociatedTypeWitness;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;

  if (result != a2)
  {
    v30 = result;
    v29 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v27 = *(unsigned __int8 *)(v29 + 80);
    v28 = *(_QWORD *)(v29 + 64);
    v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v3 = *(_DWORD *)(v2 + 80) & 0xF8;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v4 = *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80);
    v31 = v3 | v4 | 7;
    v5 = ((((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64)
           + 7
           + ((v4 + 8 + ((*(_QWORD *)(v2 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v4)) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    v6 = *(_QWORD *)(sub_23B1C5BDC() - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v32 = (v7 | 7) + 16;
    v8 = *(_QWORD *)(v6 + 64);
    if (*(_DWORD *)(v6 + 84))
      v9 = *(_QWORD *)(v6 + 64);
    else
      v9 = v8 + 1;
    v26 = (((((((((v9
                 + 7
                 + ((v7
                   + 10
                   + ((((((v8 + 12 + ((v8 + v7 + ((v7 + 12) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
               + 31) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 19) & 0xFFFFFFFFFFFFFFF8)
         + 25) & 0xFFFFFFFFFFFFFFF8;
    v10 = ((((((v32 + ((v28 + v31 + ((v28 + v27) & ~v27)) & ~v31) + v5) & ~(v7 | 7)) + v26 + 16 + 311) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    v11 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v12 = *(unsigned __int8 *)(v11 + 80);
    v13 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v14 = *(_DWORD *)(v13 + 80) & 0xF8;
    v15 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v16 = *(unsigned __int8 *)(v15 + 80);
    v17 = v14 | v16 | 7;
    v18 = (v26
         + ((v32
           + ((*(_QWORD *)(v11 + 64) + v17 + ((*(_QWORD *)(v11 + 64) + v12) & ~v12)) & ~v17)
           + ((((*(_QWORD *)(v15 + 64)
               + 7
               + ((v16 + 8 + ((*(_QWORD *)(v13 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v16)) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16) & ~(v7 | 7))
         + 327) & 0xFFFFFFFFFFFFFFF8;
    v19 = ((((((v18 + 15) & 0xFFFFFFFFFFFFFFF8) + 23 + ((v10 + (v12 | v7 | v17)) & ~(v12 | v7 | v17))) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    v20 = v31 | v27 | v7;
    if (((v10 + ((v20 + v28) & ~v20)) & 0xFFFFFFFFFFFFFFF8) + 24 > v19)
      v19 = ((v10 + ((v20 + v28) & ~v20)) & 0xFFFFFFFFFFFFFFF8) + 24;
    v21 = ((v18 + 39) & 0xFFFFFFFFFFFFFFF8) + 16;
    if (v21 <= v19)
      v21 = v19;
    if (v21 <= 0x10)
      v22 = 16;
    else
      v22 = v21;
    v23 = *((unsigned __int8 *)v30 + v22);
    if (v23 >= 4 && (v22 & 0xFFFFFFF8) != 0)
      v23 = *v30 + 4;
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_23AF11F14(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v30;
  unsigned int v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v37 = *(unsigned __int8 *)(v2 + 80);
  v38 = *(_QWORD *)(v2 + 64);
  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = *(_DWORD *)(v3 + 80) & 0xF8;
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v35 = v4 | v6 | 7;
  v7 = (((*(_QWORD *)(v5 + 64) + ((v6 + ((*(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v33 = *(_DWORD *)(v8 + 84);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = ((((v38 + v37) & ~v37) + v38 + v35) & ~v35) + v9 + 16 + v7;
  v11 = *(_DWORD *)(v8 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v34 = (v10 + 16) & v11;
  v12 = *(_QWORD *)(v8 + 64);
  v13 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v16 & 0xF8 | v18 | 7;
  v20 = v14 | v9 | v19;
  v21 = (((((*(_QWORD *)(v13 + 64) + v14) & ~v14) + *(_QWORD *)(v13 + 64) + v19) & ~v19)
       + v9
       + 16
       + ((((*(_QWORD *)(v17 + 64) + ((v18 + ((*(_QWORD *)(v15 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v18) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16) & v11;
  if (v33)
    v22 = v12;
  else
    v22 = v12 + 1;
  v23 = ((((((((((v22
                + ((v9
                  + ((((((v12 + ((v12 + v9 + ((v9 + 12) & ~v9)) & ~v9) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 10) & ~v9)
                + 7) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  v24 = ((((v23 + v34) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v25 = (v23 + v21) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((v24 + (((v35 | v37 | v9) + v38) & ~(v35 | v37 | v9))) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v26 <= ((((((v25 + 15) & 0xFFFFFFFFFFFFFFF8) + ((v24 + v20) & ~v20) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16)
    v26 = ((((((v25 + 15) & 0xFFFFFFFFFFFFFFF8) + ((v24 + v20) & ~v20) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  v27 = ((v25 + 39) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v27 <= v26)
    v27 = v26;
  if (v27 <= 0x10)
    v27 = 16;
  if (!a2)
    return 0;
  if (a2 >= 0xFD)
  {
    v28 = v27 | 1;
    if ((v27 | 1) > 3)
      goto LABEL_30;
    v30 = (a2 + ~(-1 << (8 * (v27 | 1))) - 252) >> (8 * (v27 | 1));
    if (v30 > 0xFFFE)
    {
      if (!*(_DWORD *)(a1 + v28))
        goto LABEL_25;
      goto LABEL_21;
    }
    if (v30 > 0xFE)
    {
      if (!*(_WORD *)(a1 + v28))
        goto LABEL_25;
      goto LABEL_21;
    }
    if (v30)
    {
LABEL_30:
      if (!*(_BYTE *)(a1 + v28))
        goto LABEL_25;
LABEL_21:
      if (v28 > 3)
        LODWORD(v28) = 4;
      __asm { BR              X11 }
    }
  }
LABEL_25:
  v31 = *(unsigned __int8 *)(a1 + v27);
  if (v31 >= 4)
    return (v31 ^ 0xFF) + 1;
  else
    return 0;
}

void sub_23AF12360(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v39 = *(unsigned __int8 *)(v3 + 80);
  v40 = *(_QWORD *)(v3 + 64);
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 80) & 0xF8;
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v37 = v5 | v7 | 7;
  v8 = (((*(_QWORD *)(v6 + 64) + ((v7 + ((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v35 = *(_DWORD *)(v9 + 84);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_DWORD *)(v9 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v36 = (((((v40 + v39) & ~v39) + v40 + v37) & ~v37) + v10 + 16 + v8 + 16) & v11;
  v12 = *(_QWORD *)(v9 + 64);
  v13 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v16 = *(_DWORD *)(v15 + 80);
  v17 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v16 & 0xF8 | v18 | 7;
  v20 = v14 | v10 | v19;
  v21 = (((((*(_QWORD *)(v13 + 64) + v14) & ~v14) + *(_QWORD *)(v13 + 64) + v19) & ~v19)
       + v10
       + 16
       + ((((*(_QWORD *)(v17 + 64) + ((v18 + ((*(_QWORD *)(v15 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v18) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16) & v11;
  if (v35)
    v22 = v12;
  else
    v22 = v12 + 1;
  v23 = ((((((((((v22
                + ((v10
                  + ((((((v12 + ((v12 + v10 + ((v10 + 12) & ~v10)) & ~v10) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 10) & ~v10)
                + 7) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  v24 = ((((v23 + v36) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v25 = (v23 + v21) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((v24 + (((v37 | v39 | v10) + v40) & ~(v37 | v39 | v10))) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v26 <= ((((((v25 + 15) & 0xFFFFFFFFFFFFFFF8) + ((v24 + v20) & ~v20) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16)
    v26 = ((((((v25 + 15) & 0xFFFFFFFFFFFFFFF8) + ((v24 + v20) & ~v20) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  v27 = ((v25 + 39) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v27 <= v26)
    v27 = v26;
  if (v27 <= 0x10)
    v27 = 16;
  v28 = v27 | 1;
  if (a3 < 0xFD)
  {
    v31 = 0;
    v29 = a1;
    v30 = a2;
  }
  else
  {
    v29 = a1;
    v30 = a2;
    if (v28 <= 3)
    {
      v33 = (a3 + ~(-1 << (8 * v28)) - 252) >> (8 * v28);
      if (v33 > 0xFFFE)
      {
        v31 = 4u;
      }
      else if (v33 >= 0xFF)
      {
        v31 = 2;
      }
      else
      {
        v31 = v33 != 0;
      }
    }
    else
    {
      v31 = 1u;
    }
  }
  if (v30 <= 0xFC)
    __asm { BR              X11 }
  v32 = v30 - 253;
  if (v28 < 4)
  {
    v34 = v32 & ~(-1 << (8 * v28));
    bzero(v29, v28);
    if ((_DWORD)v28 == 1)
    {
      *v29 = v34;
    }
    else
    {
      *(_WORD *)v29 = v34;
      v29[2] = BYTE2(v34);
    }
  }
  else
  {
    bzero(v29, v27 | 1);
    *(_DWORD *)v29 = v32;
  }
  __asm { BR              X10 }
}

uint64_t sub_23AF12824(_DWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v29 = *(unsigned __int8 *)(v1 + 80);
  v30 = *(_QWORD *)(v1 + 64);
  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_DWORD *)(v2 + 80) & 0xF8;
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v28 = v3 | v5 | 7;
  v6 = (((*(_QWORD *)(v4 + 64) + ((v5 + ((*(_QWORD *)(v2 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v5) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_DWORD *)(v7 + 80);
  v27 = *(_DWORD *)(v7 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = (v9
       + ((((((v10 + ((v10 + v9 + ((v9 + 12) & ~v9)) & ~v9) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 10) & ~v9;
  if (!v8)
    ++v10;
  v12 = ((((((((((v10 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  v13 = ((((v12 + ((((((v30 + v29) & ~v29) + v30 + v28) & ~v28) + v9 + 16 + v6 + 16) & v27)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v14 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v17 = *(_DWORD *)(v16 + 80) & 0xF8;
  v18 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = v17 | v19 | 7;
  v21 = (v12
       + ((((((*(_QWORD *)(v14 + 64) + v15) & ~v15) + *(_QWORD *)(v14 + 64) + v20) & ~v20)
         + v9
         + 16
         + ((((*(_QWORD *)(v18 + 64) + ((v19 + ((*(_QWORD *)(v16 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v19) + 7) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 16) & v27)) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((((((v21 + 15) & 0xFFFFFFFFFFFFFFF8) + ((v13 + (v15 | v9 | v20)) & ~(v15 | v9 | v20)) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (((v13 + (((v28 | v29 | v9) + v30) & ~(v28 | v29 | v9))) & 0xFFFFFFFFFFFFFFF8) + 24 > v22)
    v22 = ((v13 + (((v28 | v29 | v9) + v30) & ~(v28 | v29 | v9))) & 0xFFFFFFFFFFFFFFF8) + 24;
  v23 = ((v21 + 39) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v23 <= v22)
    v23 = v22;
  if (v23 <= 0x10)
    v23 = 16;
  result = *((unsigned __int8 *)a1 + v23);
  v25 = v23 & 0xFFFFFFF8;
  if (result >= 4 && v25 != 0)
    return (*a1 + 4);
  return result;
}

void sub_23AF12B90(_DWORD *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v28 = *(unsigned __int8 *)(v2 + 80);
  v29 = *(_QWORD *)(v2 + 64);
  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = *(_DWORD *)(v3 + 80) & 0xF8;
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v27 = v4 | v6 | 7;
  v7 = (((*(_QWORD *)(v5 + 64) + ((v6 + ((*(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v10 = *(_DWORD *)(v8 + 80);
  v26 = *(_DWORD *)(v8 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = (v10
       + ((((((v11 + ((v11 + v10 + ((v10 + 12) & ~v10)) & ~v10) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 10) & ~v10;
  if (!v9)
    ++v11;
  v13 = ((((((((((v11 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  v14 = ((((v13 + ((((((v29 + v28) & ~v28) + v29 + v27) & ~v27) + v10 + 16 + v7 + 16) & v26)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v15 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v18 = *(_DWORD *)(v17 + 80) & 0xF8;
  v19 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v18 | v20 | 7;
  v22 = (v13
       + ((((((*(_QWORD *)(v15 + 64) + v16) & ~v16) + *(_QWORD *)(v15 + 64) + v21) & ~v21)
         + v10
         + 16
         + ((((*(_QWORD *)(v19 + 64) + ((v20 + ((*(_QWORD *)(v17 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v20) + 7) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 16) & v26)) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((((((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + ((v14 + (v16 | v10 | v21)) & ~(v16 | v10 | v21)) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (((v14 + (((v27 | v28 | v10) + v29) & ~(v27 | v28 | v10))) & 0xFFFFFFFFFFFFFFF8) + 24 > v23)
    v23 = ((v14 + (((v27 | v28 | v10) + v29) & ~(v27 | v28 | v10))) & 0xFFFFFFFFFFFFFFF8) + 24;
  v24 = ((v22 + 39) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v24 <= v23)
    v24 = v23;
  if (v24 <= 0x10)
    v25 = 16;
  else
    v25 = v24;
  if (a2 > 3)
  {
    *((_BYTE *)a1 + v25) = 4;
    bzero(a1, v25);
    *a1 = a2 - 4;
  }
  else
  {
    *((_BYTE *)a1 + v25) = a2;
  }
}

void type metadata accessor for ItemChange()
{
  JUMPOUT(0x23B861318);
}

void sub_23AF12F20(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD v18[12];

  v2 = v1;
  v4 = a1[5];
  v5 = a1[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18[3] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v18[2] = (char *)v18 - v7;
  v9 = type metadata accessor for SnapshotItem(0, a1[2], a1[4], v8);
  v18[5] = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  v18[1] = (char *)v18 - v11;
  v13 = type metadata accessor for SnapshotItem(0, v5, v4, v12);
  v18[4] = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v14);
  (*(void (**)(char *, uint64_t, uint64_t *))(v16 + 16))((char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  v17 = (char *)sub_23AF130B4 + 4 * word_23B1DD156[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23AF130B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *TupleTypeMetadata;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v5 - 128) = v2;
  *(_QWORD *)(v5 - 120) = v1;
  v6 = v1;
  v7 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v5 - 112) = &type metadata for Fields;
  *(_QWORD *)(v5 - 104) = v7;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v9 = *(_QWORD *)(v4 + TupleTypeMetadata[16]);
  v10 = v4 + TupleTypeMetadata[12];
  *(_QWORD *)(v5 - 152) = *(_QWORD *)(v4 + TupleTypeMetadata[20]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 144) + 32))(v3, v4, v2);
  v11 = *(_QWORD *)(v5 - 136);
  v12 = *(_QWORD *)(v5 - 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v12, v10, v6);
  *(_QWORD *)(v5 - 128) = 0;
  *(_QWORD *)(v5 - 120) = 0xE000000000000000;
  sub_23B1C6EFC();
  v13 = *(_QWORD *)(v5 - 120);
  *(_QWORD *)(v5 - 128) = *(_QWORD *)(v5 - 128);
  *(_QWORD *)(v5 - 120) = v13;
  sub_23B1C64F4();
  MEMORY[0x23B8613CC](&unk_23B1DD494, v2);
  sub_23B1C7340();
  sub_23B1C64F4();
  MEMORY[0x23B8613CC](&unk_23B1DD494, v6);
  sub_23B1C7340();
  sub_23B1C64F4();
  sub_23AF16528(v9);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v14 = *(_QWORD *)(v5 - 128);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 144) + 8))(v3, v2);
  return v14;
}

unint64_t sub_23AF13684(unsigned __int8 a1)
{
  int v1;
  unint64_t result;

  v1 = a1 - 28;
  result = 25705;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 0x695F746E65726170;
      break;
    case 2:
      result = 0x656D616E656C6966;
      break;
    case 3:
      result = 0x656C69665F736676;
      break;
    case 4:
      result = 0xD000000000000010;
      break;
    case 5:
      result = 0x5F746E65746E6F63;
      break;
    case 6:
      result = 0xD000000000000012;
      break;
    default:
      sub_23AAB0660(0x69u);
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      result = 0x617461646174656DLL;
      break;
  }
  return result;
}

uint64_t sub_23AF137C0(uint64_t a1, unsigned __int8 a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
      result = sub_23B1C74B4();
      break;
    default:
      sub_23B1C74B4();
      sub_23AAB0660(a2);
      sub_23B1C64A0();
      result = swift_bridgeObjectRelease();
      break;
  }
  return result;
}

uint64_t sub_23AF13878(unsigned __int8 a1)
{
  sub_23B1C74A8();
  switch(a1)
  {
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
      sub_23B1C74B4();
      break;
    default:
      sub_23B1C74B4();
      sub_23AAB0660(a1);
      sub_23B1C64A0();
      swift_bridgeObjectRelease();
      break;
  }
  return sub_23B1C74E4();
}

uint64_t sub_23AF13964()
{
  unsigned __int8 *v0;

  return sub_23AF13878(*v0);
}

uint64_t sub_23AF1396C(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_23AF137C0(a1, *v1);
}

unint64_t sub_23AF13974()
{
  unsigned __int8 *v0;

  return sub_23AF13684(*v0);
}

uint64_t sub_23AF1397C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v11;

  sub_23AD7EB10();
  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54A8);
  v1 = sub_23AF143C4();
  sub_23AD7E264((void (*)(char *, char *))sub_23AAA6724, 0, v0, (uint64_t)&type metadata for SnapshotItemSQLFields, MEMORY[0x24BEE4078], v1, MEMORY[0x24BEE40A8], v2);
  swift_bridgeObjectRelease();
  v3 = sub_23B1C674C();
  swift_bridgeObjectRelease();
  v11 = v3;
  swift_getAssociatedTypeWitness();
  if (swift_dynamicCastMetatype())
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54D0);
    MEMORY[0x23B8613CC](MEMORY[0x24BEE12C8], v4);
    sub_23B1C67A0();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54D0);
    sub_23B1C67AC();
  }
  type metadata accessor for VFSItem(0);
  if (!swift_dynamicCastMetatype())
  {
    swift_bridgeObjectRetain();
    v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54D0);
    MEMORY[0x23B8613CC](MEMORY[0x24BEE12F0], v5);
    v6 = sub_23B1C6F8C();
    swift_bridgeObjectRelease();
    v11 = v6;
  }
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  type metadata accessor for ItemStateVersion(0, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  if (!swift_dynamicCastMetatype())
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54D0);
    sub_23B1C67AC();
  }
  return v11;
}

uint64_t sub_23AF13BFC(unsigned __int8 *a1)
{
  int v1;
  char v2;
  uint64_t v3;
  char v5;

  v1 = *a1;
  if ((v1 - 28) > 6)
  {
    if (sub_23AAB0660(v1) == 0x756F635F6B6E696CLL && v3 == 0xEA0000000000746ELL)
    {
      swift_bridgeObjectRelease();
      v2 = 0;
    }
    else
    {
      v5 = sub_23B1C7388();
      swift_bridgeObjectRelease();
      v2 = v5 ^ 1;
    }
  }
  else
  {
    v2 = 1;
  }
  return v2 & 1;
}

uint64_t sub_23AF13CB0(char a1, void *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t AssociatedConformanceWitness;
  uint64_t v28;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  switch(a1)
  {
    case 28:
    case 29:
      swift_getAssociatedTypeWitness();
      v11 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
      v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 32);
      v13 = swift_checkMetadataState();
      return v12(a2, v13, v11);
    case 30:
      v16 = (uint64_t *)(v3 + a3[11]);
      v17 = *v16;
      v18 = v16[1];
      v28 = MEMORY[0x24BEE0D00];
      v25 = v17;
      v26 = v18;
      swift_bridgeObjectRetain_n();
      v19 = sub_23AA94C90((uint64_t)&v25);
      v21 = v20;
      sub_23AA94C08((uint64_t)&v25);
      if (!v21)
      {
        sub_23B1C704C();
        __break(1u);
        JUMPOUT(0x23AF1407CLL);
      }
      swift_bridgeObjectRelease();
      return v19;
    case 31:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v25 - v10, v3 + a3[10], AssociatedTypeWitness);
      swift_dynamicCast();
      v22 = (void *)sub_23B1C7514();
      v15 = objc_msgSend(a2, sel_bindObjectParameter_, v22);

      goto LABEL_7;
    case 32:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v25 - v10, v3 + a3[10], AssociatedTypeWitness);
      swift_dynamicCast();
      v15 = objc_msgSend(a2, sel_bindUnsignedIntegerParameter_, v26);
LABEL_7:
      v19 = sub_23B1C63E0();

      return v19;
    case 33:
      v23 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 32);
      return (*(uint64_t (**)(void *, uint64_t))(v23 + 32))(a2, AssociatedTypeWitness);
    case 34:
      v25 = AssociatedTypeWitness;
      v26 = swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v28 = swift_getAssociatedConformanceWitness();
      type metadata accessor for FileItemVersion();
    default:
      v19 = v3 + a3[12];
      sub_23B0F0B3C(a1);
      if (v4)
        return v19;
      return v14;
  }
}

uint64_t sub_23AF140B4(char *a1, void *a2, int *a3)
{
  return sub_23AF13CB0(*a1, a2, a3);
}

uint64_t sub_23AF140CC(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B8613CC](&unk_23B1DD240);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23AF140FC()
{
  unint64_t result;

  result = qword_2542E1390;
  if (!qword_2542E1390)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DD318, &type metadata for SnapshotItemSQLFields);
    atomic_store(result, (unint64_t *)&qword_2542E1390);
  }
  return result;
}

uint64_t sub_23AF14140@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_23AF1397C();
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SnapshotItemSQLFields(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xDE)
  {
    v6 = *a1;
    if (v6 >= 0x1C)
      v7 = v6 - 27;
    else
      v7 = 0;
    if (v7 >= 8)
      return v7 - 7;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 34;
    if (a2 + 34 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23AF141BC + 4 * byte_23B1DD20C[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for SnapshotItemSQLFields(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 34;
  if (a3 + 34 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xDE)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xDD)
    return ((uint64_t (*)(void))((char *)&loc_23AF14268 + 4 * byte_23B1DD216[v5]))();
  *a1 = a2 + 34;
  return ((uint64_t (*)(void))((char *)sub_23AF1429C + 4 * byte_23B1DD211[v5]))();
}

uint64_t sub_23AF1429C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AF142A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23AF142ACLL);
  return result;
}

uint64_t sub_23AF142B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23AF142C0);
  *(_BYTE *)result = a2 + 34;
  return result;
}

uint64_t sub_23AF142C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AF142CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AF142D8(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 0x1C)
    return v1 - 27;
  else
    return 0;
}

_BYTE *sub_23AF142EC(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 27;
  return result;
}

ValueMetadata *type metadata accessor for SnapshotItemSQLFields()
{
  return &type metadata for SnapshotItemSQLFields;
}

unint64_t sub_23AF14310()
{
  unint64_t result;

  result = qword_2542E6EF8;
  if (!qword_2542E6EF8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DD288, &type metadata for SnapshotItemSQLFields);
    atomic_store(result, (unint64_t *)&qword_2542E6EF8);
  }
  return result;
}

unint64_t sub_23AF14354(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_23AF14380();
  result = sub_23AAB0F80();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_23AF14380()
{
  unint64_t result;

  result = qword_2542E1388;
  if (!qword_2542E1388)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DD2B0, &type metadata for SnapshotItemSQLFields);
    atomic_store(result, (unint64_t *)&qword_2542E1388);
  }
  return result;
}

unint64_t sub_23AF143C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2569E7140;
  if (!qword_2569E7140)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542E54A8);
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2569E7140);
  }
  return result;
}

uint64_t sub_23AF14410()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23AF14454(uint64_t a1)
{
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  return sub_23ABD8C28();
}

uint64_t sub_23AF1448C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return sub_23ABD8C28();
}

unint64_t sub_23AF14494(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(unint64_t, unint64_t);
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = v3;
  v6 = *(_QWORD *)(v2 + 16);
  v7 = sub_23AF1E7FC(a1);
  v8 = *(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)v6 + 128);
  swift_retain();
  v9 = v7;
  v10 = v4;
  v11 = v8(v9, a2);
  swift_release();
  if (!v10)
  {
    a2 = sub_23AF1E7FC(v11);
    swift_retain();
    swift_release();
  }
  return a2;
}

uint64_t sub_23AF14574(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  if (a1 == 2)
    v4 = 2;
  else
    v4 = (a1 & 1) == 0;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 144))(v4);
  if (!v2)
  {
    MEMORY[0x24BDAC7A8](v5);
    type metadata accessor for SchedulableJob();
  }
  return v3;
}

uint64_t sub_23AF146B8(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v4 + 16) + 152))(a1 & 1, a2, a3, a4 & 1);
}

uint64_t sub_23AF146E8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v3 + 16) + 168))(a1, a2, a3 & 1);
}

uint64_t sub_23AF14714(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v3 + 16) + 160))(a1, a2, a3 & 1);
}

uint64_t sub_23AF14740()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 184))() & 1;
}

uint64_t sub_23AF1476C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 248))();
}

uint64_t sub_23AF14794()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 256))();
}

uint64_t sub_23AF147BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 216))() & 1;
}

uint64_t sub_23AF147E8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 208))() & 1;
}

uint64_t sub_23AF14814()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 232))() & 1;
}

uint64_t sub_23AF14840()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 224))() & 1;
}

uint64_t sub_23AF1486C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 272))();
}

uint64_t sub_23AF14894()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 264))();
}

uint64_t sub_23AF148BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 288))() & 1;
}

uint64_t sub_23AF148E8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 280))() & 1;
}

uint64_t sub_23AF14914(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, BOOL))(**(_QWORD **)(v2 + 16) + 240))(a1, (a2 & 1) == 0) & 1;
}

uint64_t sub_23AF14948(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(BOOL))(**(_QWORD **)(v1 + 16) + 296))((a1 & 1) == 0) & 1;
}

uint64_t sub_23AF1497C(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(BOOL))(**(_QWORD **)(v1 + 16) + 304))((a1 & 1) == 0) & 1;
}

uint64_t sub_23AF149B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 320))();
  if (v1)
    return v3;
  return result;
}

uint64_t sub_23AF149E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 312))();
  if (v1)
    return v3;
  return result;
}

uint64_t sub_23AF14A18()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 328))() & 1;
}

uint64_t sub_23AF14A44()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 336))() & 1;
}

uint64_t sub_23AF14A70()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 352))();
}

uint64_t sub_23AF14A98()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 344))();
}

uint64_t sub_23AF14AC0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 368))();
}

uint64_t sub_23AF14AE8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 384))();
}

uint64_t sub_23AF14B10()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 360))();
}

uint64_t sub_23AF14B38()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 400))();
}

uint64_t sub_23AF14B60()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 392))();
}

uint64_t sub_23AF14B88()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 408))() & 1;
}

uint64_t sub_23AF14BB4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 416))();
}

uint64_t sub_23AF14BDC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(**(_QWORD **)(v2 + 16) + 440))(a1, a2 & 1);
  if (v3)
    return v5;
  return result;
}

uint64_t sub_23AF14C18(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(**(_QWORD **)(v2 + 16) + 448))(a1, a2 & 1);
  if (v3)
    return v5;
  return result;
}

uint64_t sub_23AF14C54()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 464))();
}

uint64_t sub_23AF14C80()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 456))();
}

uint64_t sub_23AF14CAC(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 504))(a1 & 1);
}

uint64_t sub_23AF14CD8()
{
  uint64_t v0;

  v0 = sub_23ABD8C28();
  swift_release();
  return v0;
}

uint64_t sub_23AF14D04()
{
  sub_23ABD8C28();
  swift_release();
  return swift_deallocClassInstance();
}

void type metadata accessor for SwappedJobRegistry()
{
  JUMPOUT(0x23B861318);
}

void sub_23AF14D44()
{
  sub_23ABD7940();
}

uint64_t sub_23AF14D64(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t sub_23AF14D7C()
{
  return sub_23AF14B10();
}

uint64_t sub_23AF14D90()
{
  sub_23B1C7304();
  sub_23B1C64F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AF14DEC(uint64_t a1)
{
  sub_23AF16528(a1);
  sub_23B1C64F4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AF14E14(uint64_t a1)
{
  return sub_23AF14E2C(a1, (void (*)(void))sub_23ADF78A4);
}

uint64_t sub_23AF14E20(uint64_t a1)
{
  return sub_23AF14E2C(a1, (void (*)(void))sub_23ADF7370);
}

uint64_t sub_23AF14E2C(uint64_t a1, void (*a2)(void))
{
  a2();
  sub_23B1C64F4();
  return swift_bridgeObjectRelease();
}

void sub_23AF14E68(int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[6];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[248];
  _OWORD v29[15];
  uint64_t v30;

  sub_23AAB7EC8(v1 + a1[13], (uint64_t)v28);
  sub_23AAB7EC8((uint64_t)v28, (uint64_t)v29);
  if (sub_23AAFCF2C((uint64_t)v29) != 1)
  {
    v24 = v29[12];
    v25 = v29[13];
    v26 = v29[14];
    v27 = v30;
    v20 = v29[8];
    v21 = v29[9];
    v22 = v29[10];
    v23 = v29[11];
    v16 = v29[4];
    v17 = v29[5];
    v18 = v29[6];
    v19 = v29[7];
    v12 = v29[0];
    v13 = v29[1];
    v14 = v29[2];
    v15 = v29[3];
    sub_23AF96E78();
    strcpy((char *)v11, " nsattr:");
    BYTE1(v11[1]) = 0;
    WORD1(v11[1]) = 0;
    HIDWORD(v11[1]) = -402653184;
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v1 + a1[14] + 24) & 1) == 0)
  {
    sub_23B0ECB88();
    v11[0] = 0x3A63657220;
    v11[1] = 0xE500000000000000;
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v1 + a1[15] + 16) & 1) == 0)
  {
    sub_23B0ECCBC();
    v11[0] = 0x3A63657220;
    v11[1] = 0xE500000000000000;
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  v3 = *(_QWORD *)(v1 + a1[16]);
  if (v3)
  {
    strcpy((char *)v11, " unsupported:");
    HIWORD(v11[1]) = -4864;
    sub_23AF16528(v3);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  v4 = (uint64_t *)(v1 + a1[17]);
  v5 = *v4;
  v6 = (unint64_t)v4[1] >> 62;
  if ((_DWORD)v6)
  {
    if ((_DWORD)v6 != 1)
      goto LABEL_14;
    v7 = 1886221352;
  }
  else
  {
    v7 = 1852270888;
  }
  v11[0] = v7 & 0xFFFF0000FFFFFFFFLL | 0x3A00000000;
  sub_23ADB47EC(v5);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
LABEL_14:
  v8 = MEMORY[0x23B8613CC](&unk_23B1DD478, a1);
  sub_23AF219A4((uint64_t)a1, v8);
  sub_23B1C6EFC();
  v11[4] = 0;
  v11[5] = 0xE000000000000000;
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  sub_23B1C64F4();
  sub_23B1C7340();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  v9 = (void *)sub_23B1C63BC();
  v10 = objc_msgSend(v9, sel_fp_obfuscatedFilename);

  sub_23B1C63E0();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AB59228();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v11[0] = swift_getAssociatedTypeWitness();
  v11[1] = swift_getAssociatedTypeWitness();
  v11[2] = swift_getAssociatedConformanceWitness();
  v11[3] = swift_getAssociatedConformanceWitness();
  type metadata accessor for FileItemVersion();
}

uint64_t sub_23AF153B4(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x23B8613CC](&unk_23B1E4BB8, a1);
  sub_23B1C7340();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_23AF15480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  char v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t *v38;
  void (*v39)(uint64_t, uint64_t);
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD v48[31];
  _BYTE v49[256];

  v43 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v47 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v42 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v39 - v12;
  v15 = (int *)type metadata accessor for SnapshotItem(0, a2, a3, v14);
  v16 = a4 + v15[13];
  sub_23AAF8E48((uint64_t)v49);
  v45 = v16;
  sub_23AAB7EC8((uint64_t)v49, v16);
  v17 = a4 + v15[14];
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_BYTE *)(v17 + 24) = 1;
  v44 = v15;
  v18 = a4 + v15[15];
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(v18 + 8) = 0;
  *(_BYTE *)(v18 + 16) = 1;
  v19 = *(void (**)(uint64_t, uint64_t))(a3 + 64);
  v46 = a4;
  v19(a2, a3);
  v19(a2, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(a4) = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(AssociatedTypeWitness, AssociatedConformanceWitness);
  v21 = *(void (**)(char *, uint64_t))(v42 + 8);
  v22 = v13;
  v23 = v43;
  v42 = AssociatedTypeWitness;
  v40 = v21;
  v21(v22, AssociatedTypeWitness);
  v24 = v47;
  (*(void (**)(void))(v23 + 16))();
  if ((a4 & 1) != 0)
  {
    v25 = *(void (**)(char *, uint64_t))(v23 + 8);
    v25(v24, a2);
  }
  else
  {
    v26 = v41;
    v39 = v19;
    v19(a2, a3);
    v27 = v42;
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(v42, AssociatedConformanceWitness);
    v40(v26, v27);
    v25 = *(void (**)(char *, uint64_t))(v23 + 8);
    v25(v47, a2);
    if ((v28 & 1) != 0)
      v19 = v39;
    else
      v19 = *(void (**)(uint64_t, uint64_t))(a3 + 72);
  }
  v29 = v44;
  v30 = v46;
  v19(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(a3 + 112))(a2, a3);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 80))(a2, a3);
  v32 = (uint64_t *)(v30 + v29[11]);
  *v32 = v31;
  v32[1] = v33;
  (*(void (**)(uint64_t, uint64_t))(a3 + 104))(a2, a3);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 120))(v48, a2, a3);
  sub_23AD3BD7C((uint64_t)v48, v45);
  *(_QWORD *)(v30 + v29[16]) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 136))(a2, a3);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 144))(a2, a3);
  v36 = v35;
  result = ((uint64_t (*)(uint64_t, uint64_t))v25)(a1, a2);
  v38 = (uint64_t *)(v30 + v29[17]);
  *v38 = v34;
  v38[1] = v36;
  return result;
}

unint64_t sub_23AF157D0(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = a1;
  if (a1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23AAB5A68(0, 0, 0);
    while (1)
    {
      v2 = __clz(__rbit64(v1));
      if (v2 >= 0x40)
        break;
      v3 = 1 << v2;
      if ((v3 & v1) != 0)
        v4 = ~v3;
      else
        v4 = -1;
      v1 &= v4;
      switch(v3)
      {
        case 1:
          v6 = 0xEE00736567616B63;
          v5 = 0x61705F7463697665;
          break;
        case 2:
          v6 = 0x800000023B208080;
          v5 = 0xD000000000000015;
          break;
        case 4:
          v5 = 0xD00000000000001ALL;
          v6 = 0x800000023B208060;
          break;
        default:
          goto LABEL_13;
      }
LABEL_14:
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      if (v8 >= v7 >> 1)
        sub_23AAB5A68(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v5;
      *(_QWORD *)(v9 + 40) = v6;
      if (!v1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
        sub_23AB5E978();
        v1 = sub_23B1C6338();
        swift_release();
        return v1;
      }
    }
LABEL_13:
    sub_23AB55910();
    sub_23B1C659C();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    v5 = 30768;
    v6 = 0xE200000000000000;
    goto LABEL_14;
  }
  return v1;
}

uint64_t sub_23AF159C8(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if (!a1)
    return 0;
  v1 = a1;
  v12 = MEMORY[0x24BEE4AF8];
  sub_23AAB5A68(0, 0, 0);
  do
  {
    v2 = __clz(__rbit64(v1));
    if (v2 >= 0x40)
    {
LABEL_16:
      sub_23AB55910();
      sub_23B1C659C();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      v6 = 30768;
      v5 = 0xE200000000000000;
    }
    else
    {
      v3 = 1 << v2;
      if ((v3 & v1) != 0)
        v4 = ~v3;
      else
        v4 = -1;
      v1 &= v4;
      v5 = 0xE500000000000000;
      v6 = 0x7964616572;
      switch(v3)
      {
        case 1:
          break;
        case 2:
          v5 = 0xE900000000000065;
          v6 = 0x7669737275636572;
          break;
        case 3:
        case 5:
        case 6:
        case 7:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
          goto LABEL_16;
        case 4:
          v5 = 0xE800000000000000;
          v6 = 0x7974706D45746F6ELL;
          break;
        case 8:
          v5 = 0xE700000000000000;
          v6 = 0x676E696E6E7572;
          break;
        case 16:
          v5 = 0xE700000000000000;
          v6 = 0x6465726F6E6769;
          break;
        case 32:
          v5 = 0xED0000646574656CLL;
          v6 = 0x6544746E65726170;
          break;
        case 64:
          v5 = 0xE800000000000000;
          v6 = 0x64657463656A6572;
          break;
        default:
          if (v3 != 128)
            goto LABEL_16;
          v5 = 0xED00006576697372;
          v6 = 0x75636552797A616CLL;
          break;
      }
    }
    v8 = *(_QWORD *)(v12 + 16);
    v7 = *(_QWORD *)(v12 + 24);
    if (v8 >= v7 >> 1)
      sub_23AAB5A68(v7 > 1, v8 + 1, 1);
    *(_QWORD *)(v12 + 16) = v8 + 1;
    v9 = v12 + 16 * v8;
    *(_QWORD *)(v9 + 32) = v6;
    *(_QWORD *)(v9 + 40) = v5;
  }
  while (v1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
  sub_23AB5E978();
  v10 = sub_23B1C6338();
  swift_release();
  return v10;
}

uint64_t sub_23AF15C44(unint64_t a1)
{
  return sub_23AF1678C(a1, sub_23B07D700, (void (*)(uint64_t))sub_23AB55910);
}

uint64_t sub_23AF15C60(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if (!a1)
    return 0;
  v1 = a1;
  v12 = MEMORY[0x24BEE4AF8];
  sub_23AAB5A68(0, 0, 0);
  do
  {
    v2 = __clz(__rbit64(v1));
    if (v2 >= 0x40)
    {
LABEL_11:
      sub_23AB55910();
      sub_23B1C659C();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      v6 = 30768;
      v5 = 0xE200000000000000;
    }
    else
    {
      v3 = 1 << v2;
      if ((v3 & v1) != 0)
        v4 = ~v3;
      else
        v4 = -1;
      v1 &= v4;
      v5 = 0xEB000000006B636FLL;
      v6 = 0x6C46646572616873;
      switch(v3)
      {
        case 1:
          break;
        case 2:
          v5 = 0xEE006B636F6C4665;
          v6 = 0x766973756C637865;
          break;
        case 4:
          v5 = 0xEA00000000006465;
          v6 = 0x73756150636E7973;
          break;
        case 8:
          v5 = 0x800000023B20EEA0;
          v6 = 0xD000000000000020;
          break;
        default:
          goto LABEL_11;
      }
    }
    v8 = *(_QWORD *)(v12 + 16);
    v7 = *(_QWORD *)(v12 + 24);
    if (v8 >= v7 >> 1)
      sub_23AAB5A68(v7 > 1, v8 + 1, 1);
    *(_QWORD *)(v12 + 16) = v8 + 1;
    v9 = v12 + 16 * v8;
    *(_QWORD *)(v9 + 32) = v6;
    *(_QWORD *)(v9 + 40) = v5;
  }
  while (v1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
  sub_23AB5E978();
  v10 = sub_23B1C6338();
  swift_release();
  return v10;
}

unint64_t sub_23AF15E80(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = a1;
  if (a1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23AAB5A68(0, 0, 0);
    while (1)
    {
      v2 = __clz(__rbit64(v1));
      if (v2 >= 0x40)
        break;
      v3 = 1 << v2;
      if ((v3 & v1) != 0)
        v4 = ~v3;
      else
        v4 = -1;
      v1 &= v4;
      if (v3 == 1)
      {
        v6 = 0xD000000000000014;
        v5 = 0x800000023B20EE80;
      }
      else
      {
        if (v3 != 2)
          break;
        v5 = 0x800000023B20EE60;
        v6 = 0xD000000000000010;
      }
LABEL_12:
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      if (v8 >= v7 >> 1)
        sub_23AAB5A68(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      if (!v1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
        sub_23AB5E978();
        v1 = sub_23B1C6338();
        swift_release();
        return v1;
      }
    }
    sub_23AB55910();
    sub_23B1C659C();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    v6 = 30768;
    v5 = 0xE200000000000000;
    goto LABEL_12;
  }
  return v1;
}

unint64_t sub_23AF1604C(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = a1;
  if (a1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23AAB5A68(0, 0, 0);
    do
    {
      v2 = __clz(__rbit64(v1));
      if (v2 >= 0x40)
      {
LABEL_15:
        sub_23AB55910();
        sub_23B1C659C();
        sub_23B1C64F4();
        swift_bridgeObjectRelease();
        v6 = 30768;
        v5 = 0xE200000000000000;
      }
      else
      {
        v3 = 1 << v2;
        if ((v3 & v1) != 0)
          v4 = ~v3;
        else
          v4 = -1;
        v1 &= v4;
        v5 = 0xE700000000000000;
        v6 = 0x676E696E6E6970;
        switch(v3)
        {
          case 1:
            break;
          case 2:
            v5 = 0xEB00000000657669;
            goto LABEL_14;
          case 4:
            v5 = 0xEE007963696C6F70;
            v6 = 0x20746E65746E6F63;
            break;
          case 8:
            v5 = 0xEE00747365757165;
            v6 = 0x7220746365726964;
            break;
          case 16:
            v5 = 0x800000023B20EE40;
            v6 = 0xD00000000000001ALL;
            break;
          case 32:
            v6 = 0xD000000000000027;
            v5 = 0x800000023B20EE10;
            break;
          case 64:
            v5 = 0xEF74657320657669;
LABEL_14:
            v6 = 0x74616C7563657073;
            break;
          default:
            goto LABEL_15;
        }
      }
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      if (v8 >= v7 >> 1)
        sub_23AAB5A68(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
    }
    while (v1);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
    sub_23AB5E978();
    v1 = sub_23B1C6338();
    swift_release();
  }
  return v1;
}

uint64_t sub_23AF162C0(unint64_t a1)
{
  return sub_23AF1678C(a1, (uint64_t (*)(uint64_t))sub_23ADD3774, (void (*)(uint64_t))sub_23ADF0C84);
}

unint64_t sub_23AF162DC(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = a1;
  if (a1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23AAB5A68(0, 0, 0);
    while (1)
    {
      v2 = __clz(__rbit64(v1));
      if (v2 >= 0x40)
        break;
      v3 = 1 << v2;
      if ((v3 & v1) != 0)
        v4 = ~v3;
      else
        v4 = -1;
      v1 &= v4;
      switch(v3)
      {
        case 1:
          v5 = 0xD000000000000025;
          v6 = 0x800000023B2040A0;
          break;
        case 2:
          v6 = 0x800000023B204080;
          v5 = 0xD000000000000012;
          break;
        case 4:
          v5 = 0xD000000000000028;
          v6 = 0x800000023B204050;
          break;
        default:
          goto LABEL_13;
      }
LABEL_14:
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      if (v8 >= v7 >> 1)
        sub_23AAB5A68(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v5;
      *(_QWORD *)(v9 + 40) = v6;
      if (!v1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
        sub_23AB5E978();
        v1 = sub_23B1C6338();
        swift_release();
        return v1;
      }
    }
LABEL_13:
    sub_23ADF0C84();
    sub_23B1C659C();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    v5 = 30768;
    v6 = 0xE200000000000000;
    goto LABEL_14;
  }
  return v1;
}

uint64_t sub_23AF164D4(unint64_t a1)
{
  return sub_23AF1678C(a1, (uint64_t (*)(uint64_t))sub_23ADD3D50, (void (*)(uint64_t))sub_23ADF0C84);
}

uint64_t sub_23AF164F0(unint64_t a1)
{
  return sub_23AF1678C(a1, (uint64_t (*)(uint64_t))sub_23ADD4234, (void (*)(uint64_t))sub_23ADF04EC);
}

uint64_t sub_23AF1650C(unint64_t a1)
{
  return sub_23AF1678C(a1, sub_23AF4FAE8, (void (*)(uint64_t))sub_23ADF04EC);
}

uint64_t sub_23AF16528(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (qword_2542E7190 != -1)
    swift_once();
  if ((qword_2542EDE38 & a1) == qword_2542EDE38)
    v2 = 7105633;
  else
    v2 = 0;
  if ((qword_2542EDE38 & a1) == qword_2542EDE38)
    v3 = 0xE300000000000000;
  else
    v3 = 0xE000000000000000;
  if ((qword_2542EDE38 & a1) == qword_2542EDE38)
    v4 = ~qword_2542EDE38;
  else
    v4 = -1;
  v5 = v4 & a1;
  if ((v4 & a1) != 0)
  {
    v17 = v2;
    v18 = MEMORY[0x24BEE4AF8];
    sub_23AAB5A68(0, 0, 0);
    do
    {
      v6 = __clz(__rbit64(v5));
      v7 = v5 & ~(1 << v6);
      if (((1 << v6) & v5) == 0)
        v7 = v5;
      if (v6 >= 0x40)
        v8 = 0;
      else
        v8 = 1 << v6;
      if (v6 < 0x40)
        v5 = v7;
      v9 = sub_23AFA84FC(v8);
      if (v10)
      {
        v11 = v9;
        v12 = v10;
      }
      else
      {
        sub_23AB55910();
        sub_23B1C659C();
        sub_23B1C64F4();
        swift_bridgeObjectRelease();
        v11 = 30768;
        v12 = 0xE200000000000000;
      }
      v14 = *(_QWORD *)(v18 + 16);
      v13 = *(_QWORD *)(v18 + 24);
      if (v14 >= v13 >> 1)
        sub_23AAB5A68(v13 > 1, v14 + 1, 1);
      *(_QWORD *)(v18 + 16) = v14 + 1;
      v15 = v18 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v12;
    }
    while (v5);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
    sub_23AB5E978();
    v2 = sub_23B1C6338();
    swift_release();
    if ((v3 & 0x300000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      sub_23B1C64F4();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v17;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return v2;
}

uint64_t sub_23AF16770(unint64_t a1)
{
  return sub_23AF1678C(a1, sub_23ADD2E18, (void (*)(uint64_t))sub_23ADF04EC);
}

uint64_t sub_23AF1678C(unint64_t a1, uint64_t (*a2)(uint64_t), void (*a3)(uint64_t))
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  if (!a1)
    return 0;
  v5 = a1;
  v18 = MEMORY[0x24BEE4AF8];
  sub_23AAB5A68(0, 0, 0);
  do
  {
    v6 = __clz(__rbit64(v5));
    v7 = v5 & ~(1 << v6);
    if (((1 << v6) & v5) == 0)
      v7 = v5;
    if (v6 >= 0x40)
      v8 = 0;
    else
      v8 = 1 << v6;
    if (v6 < 0x40)
      v5 = v7;
    v9 = a2(v8);
    if (v10)
    {
      v11 = v9;
      v12 = v10;
    }
    else
    {
      a3(v9);
      sub_23B1C659C();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      v11 = 30768;
      v12 = 0xE200000000000000;
    }
    v14 = *(_QWORD *)(v18 + 16);
    v13 = *(_QWORD *)(v18 + 24);
    if (v14 >= v13 >> 1)
      sub_23AAB5A68(v13 > 1, v14 + 1, 1);
    *(_QWORD *)(v18 + 16) = v14 + 1;
    v15 = v18 + 16 * v14;
    *(_QWORD *)(v15 + 32) = v11;
    *(_QWORD *)(v15 + 40) = v12;
  }
  while (v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
  sub_23AB5E978();
  v16 = sub_23B1C6338();
  swift_release();
  return v16;
}

unint64_t sub_23AF16924(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = a1;
  if (a1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23AAB5A68(0, 0, 0);
    while (1)
    {
      v2 = __clz(__rbit64(v1));
      if (v2 >= 0x40)
        break;
      v3 = 1 << v2;
      if ((v3 & v1) != 0)
        v4 = ~v3;
      else
        v4 = -1;
      v1 &= v4;
      if (v3 <= 127)
      {
        v5 = 0xE800000000000000;
        v6 = 0x73746E65746E6F63;
        switch(v3)
        {
          case 1:
            goto LABEL_29;
          case 2:
            v6 = 0x656D616E656C6966;
            break;
          case 4:
            v6 = 0x4449746E65726170;
            break;
          case 8:
            v5 = 0xEC00000065746144;
            v6 = 0x646573557473616CLL;
            break;
          case 16:
            v5 = 0xE700000000000000;
            v6 = 0x61746144676174;
            break;
          case 32:
            v5 = 0xEC0000006B6E6152;
            v6 = 0x657469726F766166;
            break;
          case 64:
            v5 = 0xE500000000000000;
            v6 = 0x656D697463;
            break;
          default:
            goto LABEL_28;
        }
        goto LABEL_29;
      }
      if (v3 > 1023)
      {
        switch(v3)
        {
          case 0x400:
            v5 = 0xEE00726F74616572;
            v6 = 0x43646E4165707974;
            break;
          case 0x40000000:
            v5 = 0xE700000000000000;
            v6 = 0x64656873617274;
            break;
          case 0x80000000:
            v5 = 0x800000023B20EED0;
            v6 = 0xD000000000000013;
            break;
          default:
            goto LABEL_28;
        }
      }
      else
      {
        switch(v3)
        {
          case 128:
            v6 = 0x656D69746DLL;
            v5 = 0xE500000000000000;
            break;
          case 256:
            v5 = 0xEF7367616C466D65;
            v6 = 0x74737953656C6966;
            break;
          case 512:
            v5 = 0xE600000000000000;
            v6 = 0x737274746178;
            break;
          default:
            goto LABEL_28;
        }
      }
LABEL_29:
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      if (v8 >= v7 >> 1)
        sub_23AAB5A68(v7 > 1, v8 + 1, 1);
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      if (!v1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
        sub_23AB5E978();
        v1 = sub_23B1C6338();
        swift_release();
        return v1;
      }
    }
LABEL_28:
    sub_23ADF04EC();
    sub_23B1C659C();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    v6 = 30768;
    v5 = 0xE200000000000000;
    goto LABEL_29;
  }
  return v1;
}

uint64_t sub_23AF16C68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v1, AssociatedTypeWitness);
}

uint64_t sub_23AF16CB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v1, a1, AssociatedTypeWitness);
}

uint64_t sub_23AF16D04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a1 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v4, AssociatedTypeWitness);
}

uint64_t sub_23AF16D58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a2 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v4, a1, AssociatedTypeWitness);
}

uint64_t (*sub_23AF16DB0())()
{
  return nullsub_1;
}

void sub_23AF16DC4()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FileItemVersion();
}

uint64_t sub_23AF16E88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

void sub_23AF16EBC()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FileItemVersion();
}

uint64_t sub_23AF16F80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 40))(v2, v1, a1);
}

uint64_t (*sub_23AF16FB4())()
{
  return nullsub_1;
}

uint64_t sub_23AF16FC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 44));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_23AF16FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 44));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*sub_23AF17038())()
{
  return nullsub_1;
}

uint64_t sub_23AF1704C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23AA9BA80(v2 + *(int *)(a1 + 48), a2);
}

uint64_t sub_23AF1705C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23AC3F594(a1, v2 + *(int *)(a2 + 48));
}

uint64_t (*sub_23AF17068())()
{
  return nullsub_1;
}

uint64_t sub_23AF1707C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23AF17328(v2 + *(int *)(a1 + 52), a2);
}

uint64_t sub_23AF1708C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23AD3BD7C(a1, v2 + *(int *)(a2 + 52));
}

uint64_t (*sub_23AF17098())()
{
  return nullsub_1;
}

uint64_t sub_23AF170AC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 64));
}

uint64_t sub_23AF170B8(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + *(int *)(a2 + 64)) = result;
  return result;
}

uint64_t (*sub_23AF170C4())()
{
  return nullsub_1;
}

uint64_t sub_23AF170D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1 + 68);
  v3 = *(_QWORD *)v2;
  sub_23AA7F2D4(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t sub_23AF17110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;

  v6 = v3 + *(int *)(a3 + 68);
  result = sub_23AAA12F0(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
  *(_QWORD *)v6 = a1;
  *(_QWORD *)(v6 + 8) = a2;
  return result;
}

uint64_t (*sub_23AF1714C())()
{
  return nullsub_1;
}

uint64_t sub_23AF17160@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = sub_23B1C6C98();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v25 - v11;
  v13 = *(_QWORD *)(a2 - 8);
  v14 = MEMORY[0x24BDAC7A8](v10);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v25 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, a2) == 1)
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v19(a1, v8);
    v19((uint64_t)v12, v8);
    v21 = type metadata accessor for SnapshotItem(0, a2, a3, v20);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a4, 1, 1, v21);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v12, a2);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, a2);
    sub_23AF15480((uint64_t)v16, a2, a3, a4);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, a2);
    v24 = type metadata accessor for SnapshotItem(0, a2, a3, v23);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a4, 0, 1, v24);
  }
}

uint64_t sub_23AF17328(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E5050);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AF17370()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_23AF1738C()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_23AF173A8()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_23AF173C4(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B8613CC](&unk_23B1DD494);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_23AF173F0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for FileItemVersion();
  }
  return result;
}

uint64_t *sub_23AF17588(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(unint64_t, unint64_t, uint64_t);
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  void (*v41)(unint64_t, unint64_t, uint64_t);
  unint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  const void *v53;
  unsigned int (*v54)(const void *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  void *v92;
  id v93;
  void *v94;
  id v95;
  uint64_t v96;
  id v97;
  _OWORD *v98;
  __int128 *v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  __int128 v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  size_t __n;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  size_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v131;
  void *v132;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v131 = *(_QWORD *)(v3 + 64);
  v4 = *(_DWORD *)(v3 + 80);
  v5 = v4;
  v126 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v126 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v127 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v127 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v7 & 0xF8 | v9 | 7u;
  v124 = v6;
  v125 = v8;
  v11 = *(_QWORD *)(v6 + 64);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = sub_23B1C5BDC();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80);
  v128 = v14;
  v129 = v13;
  v16 = *(_QWORD *)(v14 + 64);
  if (*(_DWORD *)(v14 + 84))
    v17 = *(_QWORD *)(v14 + 64);
  else
    v17 = v16 + 1;
  v18 = v10 | v4 | v15;
  v19 = v18 == 7 && ((v7 | v4 | v9 | *(_DWORD *)(v14 + 80)) & 0x100000) == 0;
  if (v19
    && (v20 = v131 + v4,
        (((((((v15 | 7)
            + 16
            + ((v131 + ((v131 + v5) & ~v5) + v10) & ~v10)
            + ((((v12
                + 7
                + ((v9 + 8 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v9)) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16) & ~(v15 | 7))
          + ((((((((((v17
                    + 7
                    + ((v15
                      + 10
                      + ((((((v16 + ((v16 + v15 + ((v15 + 12) & ~v15)) & ~v15) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v15)) & 0xFFFFFFFFFFFFFFF8)
                  + 31) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 19) & 0xFFFFFFFFFFFFFFF8)
            + 25) & 0xFFFFFFFFFFFFFFF8)
          + 16
          + 311) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16 <= 0x18))
  {
    v122 = v17 + 7;
    v123 = ((((((((((v17
                   + 7
                   + ((v15
                     + 10
                     + ((((((v16 + ((v16 + v15 + ((v15 + 12) & ~v15)) & ~v15) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v15)) & 0xFFFFFFFFFFFFFFF8)
                 + 31) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 19) & 0xFFFFFFFFFFFFFFF8)
           + 25) & 0xFFFFFFFFFFFFFFF8)
         + 16;
    __n = v17;
    v21 = ~v5;
    v113 = ~(unint64_t)v9;
    v116 = ~(v15 | 7);
    v22 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v3 + 16);
    v118 = ~v15;
    v117 = v15 + 12;
    v114 = ((((v12 + 7 + ((v9 + 8 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8)) & v113)) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 16;
    v115 = (v15 | 7) + 16;
    v120 = *(_QWORD *)(v14 + 64);
    v121 = v15 + 10;
    v119 = v16 + v15;
    v112 = v9 + 8;
    v22(a1, a2, AssociatedTypeWitness);
    v22((uint64_t *)(((unint64_t)a1 + v20) & v21), (uint64_t *)(((unint64_t)a2 + v20) & v21), AssociatedTypeWitness);
    v23 = ((((unint64_t)a1 + v20) & ~v5) + v131 + v10) & ~v10;
    v24 = ((((unint64_t)a2 + v20) & v21) + v131 + v10) & ~v10;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v124 + 16))(v23, v24, v126);
    v25 = (_QWORD *)((v11 + 7 + v23) & 0xFFFFFFFFFFFFFFF8);
    v26 = (_QWORD *)((v11 + 7 + v24) & 0xFFFFFFFFFFFFFFF8);
    *v25 = *v26;
    v27 = ((unint64_t)v25 + v112) & v113;
    v28 = ((unint64_t)v26 + v112) & v113;
    v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v125 + 16);
    swift_bridgeObjectRetain();
    v29(v27, v28, v127);
    v30 = (_QWORD *)((v12 + 7 + v27) & 0xFFFFFFFFFFFFF8);
    v31 = (_QWORD *)((v12 + 7 + v28) & 0xFFFFFFFFFFFFF8);
    *v30 = *v31;
    v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v32 = *v33;
    v32[1] = v33[1];
    v34 = (_QWORD *)(v114 + v23);
    *v34 = *(_QWORD *)(v114 + v24);
    v34[1] = *(_QWORD *)(v114 + v24 + 8);
    v35 = (v115 + v114 + v23) & v116;
    v36 = (v115 + v114 + v24) & v116;
    *(_BYTE *)v35 = *(_BYTE *)v36;
    v37 = v35 | 4;
    v38 = *(_DWORD *)(v36 | 4);
    *(_BYTE *)(v37 + 4) = *(_BYTE *)((v36 | 4) + 4);
    *(_DWORD *)v37 = v38;
    *(_WORD *)(v35 + 10) = *(_WORD *)(v36 + 0xA);
    v39 = (v117 + v35) & v118;
    v40 = (v117 + v36) & v118;
    v41 = *(void (**)(unint64_t, unint64_t, uint64_t))(v128 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41(v39, v40, v129);
    v42 = (v119 + v40) & v118;
    v41((v119 + v39) & v118, v42, v129);
    v43 = (_BYTE *)(((v119 + v39) & v118) + v120);
    *v43 = *(_BYTE *)(v42 + v120);
    v43[1] = *(_BYTE *)(v42 + v120 + 1);
    v43[2] = *(_BYTE *)(v42 + v120 + 2);
    v43[3] = *(_BYTE *)(v42 + v120 + 3);
    v43[4] = *(_BYTE *)(v42 + v120 + 4);
    v44 = (unint64_t)(v43 + 12) & 0xFFFFFFFFFFFFFFF8;
    v45 = (v42 + v120 + 12) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v44 = *(_QWORD *)v45;
    *(_QWORD *)(v44 + 8) = *(_QWORD *)(v45 + 8);
    *(_BYTE *)(v44 + 16) = *(_BYTE *)(v45 + 16);
    *(_BYTE *)(v44 + 17) = *(_BYTE *)(v45 + 17);
    *(_BYTE *)(v44 + 18) = *(_BYTE *)(v45 + 18);
    *(_BYTE *)(v44 + 19) = *(_BYTE *)(v45 + 19);
    v46 = (v44 + 27) & 0xFFFFFFFFFFFFFFF8;
    v47 = (v45 + 27) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
    *(_BYTE *)(v46 + 9) = *(_BYTE *)(v47 + 9);
    *(_BYTE *)(v46 + 10) = *(_BYTE *)(v47 + 10);
    *(_BYTE *)(v46 + 11) = *(_BYTE *)(v47 + 11);
    *(_BYTE *)(v46 + 12) = *(_BYTE *)(v47 + 12);
    v48 = (_QWORD *)((v44 + 47) & 0xFFFFFFFFFFFFF8);
    v49 = (_QWORD *)((v45 + 47) & 0xFFFFFFFFFFFFF8);
    *v48 = *v49;
    v50 = ((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8;
    v51 = ((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v50 = *(_QWORD *)v51;
    *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
    *(_BYTE *)(v50 + 9) = *(_BYTE *)(v51 + 9);
    v52 = (void *)((v121 + v50) & v118);
    v53 = (const void *)((v121 + v51) & v118);
    v54 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v128 + 48);
    swift_bridgeObjectRetain();
    if (v54(v53, 1, v129))
    {
      memcpy(v52, v53, __n);
    }
    else
    {
      v41((unint64_t)v52, (unint64_t)v53, v129);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v52, 0, 1, v129);
    }
    v57 = (_QWORD *)(((unint64_t)v52 + v122) & 0xFFFFFFFFFFFFFFF8);
    v58 = (_QWORD *)(((unint64_t)v53 + v122) & 0xFFFFFFFFFFFFFFF8);
    *v57 = *v58;
    v59 = ((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v60 = ((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8;
    v61 = *(_QWORD *)v60;
    *(_BYTE *)(v59 + 8) = *(_BYTE *)(v60 + 8);
    *(_QWORD *)v59 = v61;
    v62 = (_QWORD *)(((unint64_t)v57 + 31) & 0xFFFFFFFFFFFFF8);
    v63 = (_QWORD *)(((unint64_t)v58 + 31) & 0xFFFFFFFFFFFFF8);
    *v62 = *v63;
    v64 = ((unint64_t)v62 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = (uint64_t *)(((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8);
    v66 = v65[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v66 & 0x3000000000000000) != 0)
    {
      *(_OWORD *)v64 = *(_OWORD *)v65;
    }
    else
    {
      v67 = *v65;
      sub_23AAAE668(*v65, v66);
      *(_QWORD *)v64 = v67;
      *(_QWORD *)(v64 + 8) = v66;
    }
    v68 = (v64 + 19) & 0xFFFFFFFFFFFFFFF8;
    v69 = ((unint64_t)v65 + 19) & 0xFFFFFFFFFFFFFFF8;
    v70 = *(_QWORD *)v69;
    *(_BYTE *)(v68 + 8) = *(_BYTE *)(v69 + 8);
    *(_QWORD *)v68 = v70;
    *(_BYTE *)(v68 + 9) = *(_BYTE *)(v69 + 9);
    v71 = (v68 + 13) & 0xFFFFFFFFFFFFFFFCLL;
    v72 = (v69 + 13) & 0xFFFFFFFFFFFFFFFCLL;
    v73 = *(_DWORD *)v72;
    *(_BYTE *)(v71 + 4) = *(_BYTE *)(v72 + 4);
    *(_DWORD *)v71 = v73;
    v74 = (_QWORD *)((v68 + 25) & 0xFFFFFFFFFFFFFFF8);
    v75 = (_QWORD *)((v69 + 25) & 0xFFFFFFFFFFFFFFF8);
    *v74 = *v75;
    v74[1] = v75[1];
    v76 = v123 + v35;
    v77 = v123 + v36;
    v78 = *(_QWORD *)(v77 + 16);
    if (v78 >= 0xFFFFFFFF)
      LODWORD(v78) = -1;
    v79 = v78 - 1;
    swift_bridgeObjectRetain();
    if (v79 < 0)
    {
      *(_QWORD *)v76 = *(_QWORD *)v77;
      *(_BYTE *)(v76 + 8) = *(_BYTE *)(v77 + 8);
      *(_BYTE *)(v76 + 9) = *(_BYTE *)(v77 + 9);
      v92 = *(void **)(v77 + 16);
      v93 = v92;
      *(_QWORD *)(v76 + 16) = v92;
      v94 = *(void **)(v77 + 24);
      v95 = v94;
      *(_QWORD *)(v76 + 24) = v94;
      *(_BYTE *)(v76 + 32) = *(_BYTE *)(v77 + 32);
      *(_BYTE *)(v76 + 33) = *(_BYTE *)(v77 + 33);
      *(_BYTE *)(v76 + 34) = *(_BYTE *)(v77 + 34);
      *(_QWORD *)(v76 + 40) = *(_QWORD *)(v77 + 40);
      *(_QWORD *)(v76 + 48) = *(_QWORD *)(v77 + 48);
      *(_QWORD *)(v76 + 56) = *(_QWORD *)(v77 + 56);
      *(_QWORD *)(v76 + 64) = *(_QWORD *)(v77 + 64);
      *(_BYTE *)(v76 + 72) = *(_BYTE *)(v77 + 72);
      *(_QWORD *)(v76 + 80) = *(_QWORD *)(v77 + 80);
      *(_QWORD *)(v76 + 88) = *(_QWORD *)(v77 + 88);
      v132 = *(void **)(v77 + 96);
      *(_QWORD *)(v76 + 96) = v132;
      *(_BYTE *)(v76 + 104) = *(_BYTE *)(v77 + 104);
      *(_BYTE *)(v76 + 105) = *(_BYTE *)(v77 + 105);
      *(_QWORD *)(v76 + 112) = *(_QWORD *)(v77 + 112);
      *(_QWORD *)(v76 + 120) = *(_QWORD *)(v77 + 120);
      *(_QWORD *)(v76 + 128) = *(_QWORD *)(v77 + 128);
      *(_QWORD *)(v76 + 136) = *(_QWORD *)(v77 + 136);
      *(_QWORD *)(v76 + 144) = *(_QWORD *)(v77 + 144);
      *(_QWORD *)(v76 + 152) = *(_QWORD *)(v77 + 152);
      *(_QWORD *)(v76 + 160) = *(_QWORD *)(v77 + 160);
      *(_QWORD *)(v76 + 168) = *(_QWORD *)(v77 + 168);
      *(_BYTE *)(v76 + 176) = *(_BYTE *)(v77 + 176);
      *(_QWORD *)(v76 + 184) = *(_QWORD *)(v77 + 184);
      v96 = *(_QWORD *)(v77 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v97 = v132;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v96)
      {
        *(_QWORD *)(v76 + 192) = v96;
        *(_QWORD *)(v76 + 200) = *(_QWORD *)(v77 + 200);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(v76 + 192) = *(_OWORD *)(v77 + 192);
      }
      *(_QWORD *)(v76 + 208) = *(_QWORD *)(v77 + 208);
      *(_QWORD *)(v76 + 216) = *(_QWORD *)(v77 + 216);
      *(_QWORD *)(v76 + 224) = *(_QWORD *)(v77 + 224);
      *(_QWORD *)(v76 + 232) = *(_QWORD *)(v77 + 232);
      *(_QWORD *)(v76 + 240) = *(_QWORD *)(v77 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v80 = *(_OWORD *)v77;
      v81 = *(_OWORD *)(v77 + 16);
      v82 = *(_OWORD *)(v77 + 48);
      *(_OWORD *)(v76 + 32) = *(_OWORD *)(v77 + 32);
      *(_OWORD *)(v76 + 48) = v82;
      *(_OWORD *)v76 = v80;
      *(_OWORD *)(v76 + 16) = v81;
      v83 = *(_OWORD *)(v77 + 64);
      v84 = *(_OWORD *)(v77 + 80);
      v85 = *(_OWORD *)(v77 + 112);
      *(_OWORD *)(v76 + 96) = *(_OWORD *)(v77 + 96);
      *(_OWORD *)(v76 + 112) = v85;
      *(_OWORD *)(v76 + 64) = v83;
      *(_OWORD *)(v76 + 80) = v84;
      v86 = *(_OWORD *)(v77 + 128);
      v87 = *(_OWORD *)(v77 + 144);
      v88 = *(_OWORD *)(v77 + 176);
      *(_OWORD *)(v76 + 160) = *(_OWORD *)(v77 + 160);
      *(_OWORD *)(v76 + 176) = v88;
      *(_OWORD *)(v76 + 128) = v86;
      *(_OWORD *)(v76 + 144) = v87;
      v89 = *(_OWORD *)(v77 + 192);
      v90 = *(_OWORD *)(v77 + 208);
      v91 = *(_OWORD *)(v77 + 224);
      *(_QWORD *)(v76 + 240) = *(_QWORD *)(v77 + 240);
      *(_OWORD *)(v76 + 208) = v90;
      *(_OWORD *)(v76 + 224) = v91;
      *(_OWORD *)(v76 + 192) = v89;
    }
    v98 = (_OWORD *)((v76 + 255) & 0xFFFFFFFFFFFFFFF8);
    v99 = (__int128 *)((v77 + 255) & 0xFFFFFFFFFFFFFFF8);
    v100 = *v99;
    *(_OWORD *)((char *)v98 + 9) = *(__int128 *)((char *)v99 + 9);
    *v98 = v100;
    v101 = (v76 + 287) & 0xFFFFFFFFFFFFFFF8;
    v102 = (v77 + 287) & 0xFFFFFFFFFFFFFFF8;
    v103 = *(_OWORD *)v102;
    *(_BYTE *)(v101 + 16) = *(_BYTE *)(v102 + 16);
    *(_OWORD *)v101 = v103;
    v104 = (_QWORD *)((v76 + 311) & 0xFFFFFFFFFFFFF8);
    v105 = (v77 + 311) & 0xFFFFFFFFFFFFF8;
    v106 = *(_QWORD *)v105;
    v105 += 15;
    *v104 = v106;
    v107 = (_QWORD *)(((unint64_t)v104 + 15) & 0xFFFFFFFFFFFFFFF8);
    v108 = *(_QWORD *)(v105 & 0xFFFFFFFFFFFFFFF8);
    v109 = *(_QWORD *)((v105 & 0xFFFFFFFFFFFFFFF8) + 8);
    sub_23AA7F2D4(v108, v109);
    *v107 = v108;
    v107[1] = v109;
    return a1;
  }
  else
  {
    v55 = *a2;
    *a1 = *a2;
    v56 = v55 + ((v18 + 16) & ~v18);
    swift_retain();
  }
  return (uint64_t *)v56;
}

uint64_t sub_23AF17EA0(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  size_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t (*v55)(void *, uint64_t, uint64_t);
  int v56;
  size_t v57;
  size_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  void *v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  void *v88;
  id v89;
  void *v90;
  id v91;
  uint64_t v92;
  id v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  id v111;
  void *v112;
  void *v113;
  id v114;
  void *v115;
  void *v116;
  id v117;
  uint64_t v118;
  _OWORD *v119;
  __int128 *v120;
  __int128 v121;
  unint64_t v122;
  unint64_t v123;
  __int128 v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v134;
  uint64_t v135;
  void *v136;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v134 = a1;
  v9 = (v7 + v8 + a1) & ~v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  LODWORD(a2) = *(_DWORD *)(v12 + 80) & 0xF8;
  v13 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = a2 | v15 | 7;
  v17 = (v7 + v16 + v9) & ~v16;
  v18 = (v7 + v16 + v10) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(v17, v18, v11);
  v19 = *(_QWORD *)(v12 + 64) + 7;
  v20 = (_QWORD *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = ((unint64_t)v20 + v15 + 8) & ~v15;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 24))(v22, ((unint64_t)v21 + v15 + 8) & ~v15, v13);
  v23 = *(_QWORD *)(v14 + 64) + 7;
  v24 = (_QWORD *)((v23 + v22) & 0xFFFFFFFFFFFFFFF8);
  v25 = (v23 + (((unint64_t)v21 + v15 + 8) & ~v15)) & 0xFFFFFFFFFFFFFFF8;
  v26 = *(_QWORD *)v25;
  v25 += 15;
  *v24 = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v27 = *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
  v27[1] = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = ((((v23 + ((v15 + 8 + (v19 & 0xFFFFFFFFFFFFFFF8)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v29 = (_QWORD *)(v28 + v17);
  v30 = v28 + v18;
  *v29 = *(_QWORD *)(v28 + v18);
  v29[1] = *(_QWORD *)(v28 + v18 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = sub_23B1C5BDC();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(unsigned __int8 *)(v32 + 80);
  v34 = (v33 | 7) + 16;
  v35 = ((unint64_t)v29 + v34) & ~(v33 | 7);
  v36 = (v34 + v30) & ~(v33 | 7);
  *(_BYTE *)v35 = *(_BYTE *)v36;
  v37 = *(_BYTE *)(v36 + 8);
  *(_DWORD *)(v35 + 4) = *(_DWORD *)(v36 + 4);
  *(_BYTE *)(v35 + 8) = v37;
  *(_WORD *)(v35 + 10) = *(_WORD *)(v36 + 0xA);
  v135 = v35;
  v38 = (v33 + 12 + v35) & ~v33;
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 24);
  v39(v38, (v33 + 12 + v36) & ~v33, v31);
  v40 = *(_QWORD *)(v32 + 64);
  v41 = (v40 + v33 + v38) & ~v33;
  v42 = (v40 + v33 + ((v33 + 12 + v36) & ~v33)) & ~v33;
  v39(v41, v42, v31);
  v43 = (_BYTE *)(v41 + v40);
  v44 = v42 + v40;
  *v43 = *(_BYTE *)(v42 + v40);
  v43[1] = *(_BYTE *)(v42 + v40 + 1);
  v43[2] = *(_BYTE *)(v42 + v40 + 2);
  v43[3] = *(_BYTE *)(v42 + v40 + 3);
  v43[4] = *(_BYTE *)(v42 + v40 + 4);
  v45 = (v41 + v40 + 12) & 0xFFFFFFFFFFFFFFF8;
  v46 = (v44 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *(_QWORD *)(v45 + 8) = *(_QWORD *)(v46 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v45 + 16) = *(_BYTE *)(v46 + 16);
  *(_BYTE *)(v45 + 17) = *(_BYTE *)(v46 + 17);
  *(_BYTE *)(v45 + 18) = *(_BYTE *)(v46 + 18);
  *(_BYTE *)(v45 + 19) = *(_BYTE *)(v46 + 19);
  v47 = (v45 + 27) & 0xFFFFFFFFFFFFFFF8;
  v48 = (v46 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
  *(_BYTE *)(v47 + 9) = *(_BYTE *)(v48 + 9);
  *(_BYTE *)(v47 + 10) = *(_BYTE *)(v48 + 10);
  *(_BYTE *)(v47 + 11) = *(_BYTE *)(v48 + 11);
  *(_BYTE *)(v47 + 12) = *(_BYTE *)(v48 + 12);
  v49 = (_QWORD *)((v45 + 47) & 0xFFFFFFFFFFFFF8);
  v50 = (_QWORD *)((v46 + 47) & 0xFFFFFFFFFFFFF8);
  *v49 = *v50;
  v51 = ((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8;
  v52 = ((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  *(_BYTE *)(v51 + 9) = *(_BYTE *)(v52 + 9);
  v53 = (void *)((v33 + 10 + v51) & ~v33);
  v54 = (void *)((v33 + 10 + v52) & ~v33);
  v55 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
  LODWORD(v46) = v55(v53, 1, v31);
  v56 = v55(v54, 1, v31);
  if ((_DWORD)v46)
  {
    if (!v56)
    {
      (*(void (**)(void *, void *, uint64_t))(v32 + 16))(v53, v54, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v53, 0, 1, v31);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v56)
    {
      v39((uint64_t)v53, (uint64_t)v54, v31);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v53, v31);
  }
  if (*(_DWORD *)(v32 + 84))
    v57 = v40;
  else
    v57 = v40 + 1;
  memcpy(v53, v54, v57);
LABEL_10:
  if (*(_DWORD *)(v32 + 84))
    v58 = v40;
  else
    v58 = v40 + 1;
  v59 = (uint64_t)v53 + v58 + 7;
  v60 = (_QWORD *)(((unint64_t)v54 + v58 + 7) & 0xFFFFFFFFFFFFFFF8);
  v61 = (v59 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF8) = *v60;
  v62 = (v59 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63 = v61 & 0xFFFFFFFFFFFFFFF8;
  v64 = ((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8;
  v65 = *(_QWORD *)v64;
  *(_BYTE *)(v63 + 8) = *(_BYTE *)(v64 + 8);
  *(_QWORD *)v63 = v65;
  v66 = (_QWORD *)(((unint64_t)v60 + 31) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)(v62 & 0xFFFFFFFFFFFFFFF8) = *v66;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v67 = (uint64_t *)(((v62 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  v68 = (uint64_t *)(((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFFFF8);
  v69 = v67[1];
  v70 = v68[1];
  v71 = v70 & 0x3000000000000000;
  if ((v69 & 0x3000000000000000) != 0)
  {
    if (!v71)
    {
      v72 = *v68;
      sub_23AAAE668(*v68, v70);
      *v67 = v72;
      v67[1] = v70;
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v71)
  {
    sub_23AAAE53C(*v67, v69);
LABEL_18:
    *(_OWORD *)v67 = *(_OWORD *)v68;
    goto LABEL_19;
  }
  v107 = *v68;
  sub_23AAAE668(*v68, v70);
  v108 = *v67;
  v109 = v67[1];
  *v67 = v107;
  v67[1] = v70;
  sub_23AAAE53C(v108, v109);
LABEL_19:
  v73 = ((unint64_t)v67 + 19) & 0xFFFFFFFFFFFFFFF8;
  v74 = ((unint64_t)v68 + 19) & 0xFFFFFFFFFFFFFFF8;
  v75 = *(_QWORD *)v74;
  *(_BYTE *)(v73 + 8) = *(_BYTE *)(v74 + 8);
  *(_QWORD *)v73 = v75;
  *(_BYTE *)(v73 + 9) = *(_BYTE *)(v74 + 9);
  v76 = (v73 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v77 = (v74 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v78 = *(_DWORD *)v77;
  *(_BYTE *)(v76 + 4) = *(_BYTE *)(v77 + 4);
  *(_DWORD *)v76 = v78;
  v79 = (_QWORD *)((v73 + 25) & 0xFFFFFFFFFFFFFFF8);
  v80 = (_QWORD *)((v74 + 25) & 0xFFFFFFFFFFFFFFF8);
  *v79 = *v80;
  v79[1] = v80[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v84 = ((((((((((((v33
                  + 10
                  + ((((((v40 + ((((v33 + 12) | v33) + v40) & ~v33) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v33)
                + v58
                + 7) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v81 = v84 + v135;
  v82 = v84 + v36;
  v83 = *(void **)(v84 + v135 + 16);
  LODWORD(v84) = -1;
  if ((unint64_t)v83 >= 0xFFFFFFFF)
    LODWORD(v85) = -1;
  else
    v85 = *(_QWORD *)(v81 + 16);
  v86 = v85 - 1;
  if (*(_QWORD *)(v82 + 16) < 0xFFFFFFFFuLL)
    v84 = *(_QWORD *)(v82 + 16);
  v87 = v84 - 1;
  if (v86 < 0)
  {
    if ((v87 & 0x80000000) == 0)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v81 + 192))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
    *(_QWORD *)v81 = *(_QWORD *)v82;
    *(_BYTE *)(v81 + 8) = *(_BYTE *)(v82 + 8);
    *(_BYTE *)(v81 + 9) = *(_BYTE *)(v82 + 9);
    v110 = *(void **)(v82 + 16);
    v111 = v110;
    *(_QWORD *)(v81 + 16) = v110;

    v112 = *(void **)(v81 + 24);
    v113 = *(void **)(v82 + 24);
    v114 = v113;
    *(_QWORD *)(v81 + 24) = v113;

    *(_BYTE *)(v81 + 32) = *(_BYTE *)(v82 + 32);
    *(_BYTE *)(v81 + 33) = *(_BYTE *)(v82 + 33);
    *(_BYTE *)(v81 + 34) = *(_BYTE *)(v82 + 34);
    *(_QWORD *)(v81 + 40) = *(_QWORD *)(v82 + 40);
    *(_QWORD *)(v81 + 48) = *(_QWORD *)(v82 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v81 + 56) = *(_QWORD *)(v82 + 56);
    *(_QWORD *)(v81 + 64) = *(_QWORD *)(v82 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v81 + 72) = *(_BYTE *)(v82 + 72);
    *(_QWORD *)(v81 + 80) = *(_QWORD *)(v82 + 80);
    *(_QWORD *)(v81 + 88) = *(_QWORD *)(v82 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v115 = *(void **)(v81 + 96);
    v116 = *(void **)(v82 + 96);
    *(_QWORD *)(v81 + 96) = v116;
    v117 = v116;

    *(_BYTE *)(v81 + 104) = *(_BYTE *)(v82 + 104);
    *(_BYTE *)(v81 + 105) = *(_BYTE *)(v82 + 105);
    *(_QWORD *)(v81 + 112) = *(_QWORD *)(v82 + 112);
    *(_QWORD *)(v81 + 120) = *(_QWORD *)(v82 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v81 + 128) = *(_QWORD *)(v82 + 128);
    *(_QWORD *)(v81 + 136) = *(_QWORD *)(v82 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v81 + 144) = *(_QWORD *)(v82 + 144);
    *(_QWORD *)(v81 + 152) = *(_QWORD *)(v82 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v81 + 160) = *(_QWORD *)(v82 + 160);
    *(_QWORD *)(v81 + 168) = *(_QWORD *)(v82 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v81 + 176) = *(_BYTE *)(v82 + 176);
    *(_QWORD *)(v81 + 184) = *(_QWORD *)(v82 + 184);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v118 = *(_QWORD *)(v82 + 192);
    if (*(_QWORD *)(v81 + 192))
    {
      if (v118)
      {
        *(_QWORD *)(v81 + 192) = v118;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v81 + 200) = *(_QWORD *)(v82 + 200);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_44:
        v106 = v134;
        *(_QWORD *)(v81 + 208) = *(_QWORD *)(v82 + 208);
        *(_QWORD *)(v81 + 216) = *(_QWORD *)(v82 + 216);
        *(_QWORD *)(v81 + 224) = *(_QWORD *)(v82 + 224);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v81 + 232) = *(_QWORD *)(v82 + 232);
        *(_QWORD *)(v81 + 240) = *(_QWORD *)(v82 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_45;
      }
      sub_23AC40C1C(v81 + 192);
    }
    else if (v118)
    {
      *(_QWORD *)(v81 + 192) = v118;
      *(_QWORD *)(v81 + 200) = *(_QWORD *)(v82 + 200);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_44;
    }
    *(_OWORD *)(v81 + 192) = *(_OWORD *)(v82 + 192);
    goto LABEL_44;
  }
  if ((v87 & 0x80000000) == 0)
  {
LABEL_32:
    v94 = *(_OWORD *)v82;
    v95 = *(_OWORD *)(v82 + 16);
    v96 = *(_OWORD *)(v82 + 48);
    *(_OWORD *)(v81 + 32) = *(_OWORD *)(v82 + 32);
    *(_OWORD *)(v81 + 48) = v96;
    *(_OWORD *)v81 = v94;
    *(_OWORD *)(v81 + 16) = v95;
    v97 = *(_OWORD *)(v82 + 64);
    v98 = *(_OWORD *)(v82 + 80);
    v99 = *(_OWORD *)(v82 + 112);
    *(_OWORD *)(v81 + 96) = *(_OWORD *)(v82 + 96);
    *(_OWORD *)(v81 + 112) = v99;
    *(_OWORD *)(v81 + 64) = v97;
    *(_OWORD *)(v81 + 80) = v98;
    v100 = *(_OWORD *)(v82 + 128);
    v101 = *(_OWORD *)(v82 + 144);
    v102 = *(_OWORD *)(v82 + 176);
    *(_OWORD *)(v81 + 160) = *(_OWORD *)(v82 + 160);
    *(_OWORD *)(v81 + 176) = v102;
    *(_OWORD *)(v81 + 128) = v100;
    *(_OWORD *)(v81 + 144) = v101;
    v103 = *(_OWORD *)(v82 + 192);
    v104 = *(_OWORD *)(v82 + 208);
    v105 = *(_OWORD *)(v82 + 224);
    *(_QWORD *)(v81 + 240) = *(_QWORD *)(v82 + 240);
    *(_OWORD *)(v81 + 208) = v104;
    *(_OWORD *)(v81 + 224) = v105;
    *(_OWORD *)(v81 + 192) = v103;
    v106 = v134;
    goto LABEL_45;
  }
  *(_QWORD *)v81 = *(_QWORD *)v82;
  *(_BYTE *)(v81 + 8) = *(_BYTE *)(v82 + 8);
  *(_BYTE *)(v81 + 9) = *(_BYTE *)(v82 + 9);
  v88 = *(void **)(v82 + 16);
  v89 = v88;
  *(_QWORD *)(v81 + 16) = v88;
  v90 = *(void **)(v82 + 24);
  v91 = v90;
  *(_QWORD *)(v81 + 24) = v90;
  *(_BYTE *)(v81 + 32) = *(_BYTE *)(v82 + 32);
  *(_BYTE *)(v81 + 33) = *(_BYTE *)(v82 + 33);
  *(_BYTE *)(v81 + 34) = *(_BYTE *)(v82 + 34);
  *(_QWORD *)(v81 + 40) = *(_QWORD *)(v82 + 40);
  *(_QWORD *)(v81 + 48) = *(_QWORD *)(v82 + 48);
  *(_QWORD *)(v81 + 56) = *(_QWORD *)(v82 + 56);
  *(_QWORD *)(v81 + 64) = *(_QWORD *)(v82 + 64);
  *(_BYTE *)(v81 + 72) = *(_BYTE *)(v82 + 72);
  *(_QWORD *)(v81 + 80) = *(_QWORD *)(v82 + 80);
  *(_QWORD *)(v81 + 88) = *(_QWORD *)(v82 + 88);
  v136 = *(void **)(v82 + 96);
  *(_QWORD *)(v81 + 96) = v136;
  *(_BYTE *)(v81 + 104) = *(_BYTE *)(v82 + 104);
  *(_BYTE *)(v81 + 105) = *(_BYTE *)(v82 + 105);
  *(_QWORD *)(v81 + 112) = *(_QWORD *)(v82 + 112);
  *(_QWORD *)(v81 + 120) = *(_QWORD *)(v82 + 120);
  *(_QWORD *)(v81 + 128) = *(_QWORD *)(v82 + 128);
  *(_QWORD *)(v81 + 136) = *(_QWORD *)(v82 + 136);
  *(_QWORD *)(v81 + 144) = *(_QWORD *)(v82 + 144);
  *(_QWORD *)(v81 + 152) = *(_QWORD *)(v82 + 152);
  *(_QWORD *)(v81 + 160) = *(_QWORD *)(v82 + 160);
  *(_QWORD *)(v81 + 168) = *(_QWORD *)(v82 + 168);
  *(_BYTE *)(v81 + 176) = *(_BYTE *)(v82 + 176);
  *(_QWORD *)(v81 + 184) = *(_QWORD *)(v82 + 184);
  v92 = *(_QWORD *)(v82 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v93 = v136;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v92)
  {
    *(_QWORD *)(v81 + 192) = v92;
    *(_QWORD *)(v81 + 200) = *(_QWORD *)(v82 + 200);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(v81 + 192) = *(_OWORD *)(v82 + 192);
  }
  v106 = v134;
  *(_QWORD *)(v81 + 208) = *(_QWORD *)(v82 + 208);
  *(_QWORD *)(v81 + 216) = *(_QWORD *)(v82 + 216);
  *(_QWORD *)(v81 + 224) = *(_QWORD *)(v82 + 224);
  *(_QWORD *)(v81 + 232) = *(_QWORD *)(v82 + 232);
  *(_QWORD *)(v81 + 240) = *(_QWORD *)(v82 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_45:
  v119 = (_OWORD *)((v81 + 255) & 0xFFFFFFFFFFFFFFF8);
  v120 = (__int128 *)((v82 + 255) & 0xFFFFFFFFFFFFFFF8);
  v121 = *v120;
  *(_OWORD *)((char *)v119 + 9) = *(__int128 *)((char *)v120 + 9);
  *v119 = v121;
  v122 = (v81 + 287) & 0xFFFFFFFFFFFFFFF8;
  v123 = (v82 + 287) & 0xFFFFFFFFFFFFFFF8;
  v124 = *(_OWORD *)v123;
  *(_BYTE *)(v122 + 16) = *(_BYTE *)(v123 + 16);
  *(_OWORD *)v122 = v124;
  v125 = (_QWORD *)((v81 + 311) & 0xFFFFFFFFFFFFF8);
  v126 = (v82 + 311) & 0xFFFFFFFFFFFFF8;
  v127 = *(_QWORD *)v126;
  v126 += 15;
  *v125 = v127;
  v128 = (uint64_t *)(((unint64_t)v125 + 15) & 0xFFFFFFFFFFFFFFF8);
  v129 = *(_QWORD *)(v126 & 0xFFFFFFFFFFFFFFF8);
  v130 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFFF8) + 8);
  sub_23AA7F2D4(v129, v130);
  v131 = *v128;
  v132 = v128[1];
  *v128 = v129;
  v128[1] = v130;
  sub_23AAA12F0(v131, v132);
  return v106;
}

uint64_t sub_23AF18A7C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  _OWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  size_t v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  const void *v50;
  int v51;
  size_t v52;
  size_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _OWORD *v61;
  _OWORD *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _OWORD *v83;
  __int128 *v84;
  __int128 v85;
  unint64_t v86;
  unint64_t v87;
  __int128 v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v92;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v92 = a1;
  v9 = (v7 + v8 + a1) & ~v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  LODWORD(v6) = *(_DWORD *)(v12 + 80) & 0xF8;
  v13 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = v6 | v15 | 7;
  v17 = (v7 + v16 + v9) & ~v16;
  v18 = (v7 + v16 + v10) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v17, v18, v11);
  v19 = *(_QWORD *)(v12 + 64) + 7;
  v20 = (_QWORD *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = ((unint64_t)v20 + v15 + 8) & ~v15;
  v23 = ((unint64_t)v21 + v15 + 8) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v22, v23, v13);
  v24 = *(_QWORD *)(v14 + 64) + 7;
  v25 = (_QWORD *)((v24 + v22) & 0xFFFFFFFFFFFFFFF8);
  v26 = (_QWORD *)((v24 + v23) & 0xFFFFFFFFFFFFFFF8);
  *v25 = *v26;
  *(_OWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8);
  v27 = ((((v24 + ((v15 + 8 + (v19 & 0xFFFFFFFFFFFFFFF8)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v28 = (_OWORD *)(v27 + v17);
  v29 = v27 + v18;
  *v28 = *(_OWORD *)(v27 + v18);
  v30 = sub_23B1C5BDC();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(unsigned __int8 *)(v31 + 80);
  v33 = (v32 | 7) + 16;
  v34 = ((unint64_t)v28 + v33) & ~(v32 | 7);
  v35 = (v33 + v29) & ~(v32 | 7);
  *(_BYTE *)v34 = *(_BYTE *)v35;
  v36 = *(_BYTE *)(v35 + 8);
  *(_DWORD *)(v34 + 4) = *(_DWORD *)(v35 + 4);
  *(_BYTE *)(v34 + 8) = v36;
  *(_WORD *)(v34 + 10) = *(_WORD *)(v35 + 0xA);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32);
  v37((v32 + 12 + v34) & ~v32, (v32 + 12 + v35) & ~v32, v30);
  v38 = *(_QWORD *)(v31 + 64);
  v39 = (v38 + v32 + ((v32 + 12 + v35) & ~v32)) & ~v32;
  v37((v38 + v32 + ((v32 + 12 + v34) & ~v32)) & ~v32, v39, v30);
  v40 = (_BYTE *)(((v38 + v32 + ((v32 + 12 + v34) & ~v32)) & ~v32) + v38);
  *v40 = *(_BYTE *)(v39 + v38);
  v40[1] = *(_BYTE *)(v39 + v38 + 1);
  v40[2] = *(_BYTE *)(v39 + v38 + 2);
  v40[3] = *(_BYTE *)(v39 + v38 + 3);
  v40[4] = *(_BYTE *)(v39 + v38 + 4);
  v41 = (unint64_t)(v40 + 12) & 0xFFFFFFFFFFFFFFF8;
  v42 = (v39 + v38 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v41 = *(_OWORD *)v42;
  *(_BYTE *)(v41 + 16) = *(_BYTE *)(v42 + 16);
  *(_BYTE *)(v41 + 17) = *(_BYTE *)(v42 + 17);
  *(_BYTE *)(v41 + 18) = *(_BYTE *)(v42 + 18);
  *(_BYTE *)(v41 + 19) = *(_BYTE *)(v42 + 19);
  v43 = (v41 + 27) & 0xFFFFFFFFFFFFFFF8;
  v44 = (v42 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
  *(_BYTE *)(v43 + 9) = *(_BYTE *)(v44 + 9);
  *(_BYTE *)(v43 + 10) = *(_BYTE *)(v44 + 10);
  *(_BYTE *)(v43 + 11) = *(_BYTE *)(v44 + 11);
  *(_BYTE *)(v43 + 12) = *(_BYTE *)(v44 + 12);
  v45 = (_QWORD *)((v41 + 47) & 0xFFFFFFFFFFFFF8);
  v46 = (_QWORD *)((v42 + 47) & 0xFFFFFFFFFFFFF8);
  *v45 = *v46;
  v47 = ((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8;
  v48 = ((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
  *(_BYTE *)(v47 + 9) = *(_BYTE *)(v48 + 9);
  v49 = (void *)((v32 + 10 + v47) & ~v32);
  v50 = (const void *)((v32 + 10 + v48) & ~v32);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v50, 1, v30))
  {
    v51 = *(_DWORD *)(v31 + 84);
    if (v51)
      v52 = v38;
    else
      v52 = v38 + 1;
    memcpy(v49, v50, v52);
  }
  else
  {
    v37((uint64_t)v49, (uint64_t)v50, v30);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v49, 0, 1, v30);
    v51 = *(_DWORD *)(v31 + 84);
  }
  if (v51)
    v53 = v38;
  else
    v53 = v38 + 1;
  v54 = (_QWORD *)(((unint64_t)v50 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
  v55 = (_QWORD *)(((unint64_t)v49 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v55 = *v54;
  v56 = ((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8;
  v57 = ((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8;
  v58 = *(_QWORD *)v57;
  *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
  *(_QWORD *)v56 = v58;
  v59 = (_QWORD *)(((unint64_t)v55 + 31) & 0xFFFFFFFFFFFFF8);
  v60 = (_QWORD *)(((unint64_t)v54 + 31) & 0xFFFFFFFFFFFFF8);
  *v59 = *v60;
  v61 = (_OWORD *)(((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFFFF8);
  v62 = (_OWORD *)(((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v61 = *v62;
  v63 = ((unint64_t)v61 + 19) & 0xFFFFFFFFFFFFFFF8;
  v64 = ((unint64_t)v62 + 19) & 0xFFFFFFFFFFFFFFF8;
  v65 = *(_QWORD *)v64;
  *(_BYTE *)(v63 + 8) = *(_BYTE *)(v64 + 8);
  *(_QWORD *)v63 = v65;
  *(_BYTE *)(v63 + 9) = *(_BYTE *)(v64 + 9);
  v66 = (v63 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v67 = (v64 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  LODWORD(v58) = *(_DWORD *)v67;
  *(_BYTE *)(v66 + 4) = *(_BYTE *)(v67 + 4);
  *(_DWORD *)v66 = v58;
  *(_OWORD *)((v63 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v64 + 25) & 0xFFFFFFFFFFFFF8);
  v68 = ((((((((((((v32
                  + 10
                  + ((((((v38 + ((((v32 + 12) | v32) + v38) & ~v32) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v32)
                + v53
                + 7) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v69 = v68 + v34;
  v70 = v68 + v35;
  v71 = *(_OWORD *)(v70 + 112);
  v73 = *(_OWORD *)(v70 + 64);
  v72 = *(_OWORD *)(v70 + 80);
  *(_OWORD *)(v69 + 96) = *(_OWORD *)(v70 + 96);
  *(_OWORD *)(v69 + 112) = v71;
  *(_OWORD *)(v69 + 64) = v73;
  *(_OWORD *)(v69 + 80) = v72;
  v74 = *(_OWORD *)(v70 + 176);
  v76 = *(_OWORD *)(v70 + 128);
  v75 = *(_OWORD *)(v70 + 144);
  *(_OWORD *)(v69 + 160) = *(_OWORD *)(v70 + 160);
  *(_OWORD *)(v69 + 176) = v74;
  *(_OWORD *)(v69 + 128) = v76;
  *(_OWORD *)(v69 + 144) = v75;
  v78 = *(_OWORD *)(v70 + 208);
  v77 = *(_OWORD *)(v70 + 224);
  v79 = *(_OWORD *)(v70 + 192);
  *(_QWORD *)(v69 + 240) = *(_QWORD *)(v70 + 240);
  *(_OWORD *)(v69 + 208) = v78;
  *(_OWORD *)(v69 + 224) = v77;
  *(_OWORD *)(v69 + 192) = v79;
  v80 = *(_OWORD *)v70;
  v81 = *(_OWORD *)(v70 + 16);
  v82 = *(_OWORD *)(v70 + 48);
  *(_OWORD *)(v69 + 32) = *(_OWORD *)(v70 + 32);
  *(_OWORD *)(v69 + 48) = v82;
  *(_OWORD *)v69 = v80;
  *(_OWORD *)(v69 + 16) = v81;
  v83 = (_OWORD *)((v69 + 255) & 0xFFFFFFFFFFFFFFF8);
  v84 = (__int128 *)((v70 + 255) & 0xFFFFFFFFFFFFFFF8);
  v85 = *v84;
  *(_OWORD *)((char *)v83 + 9) = *(__int128 *)((char *)v84 + 9);
  *v83 = v85;
  v86 = (v69 + 287) & 0xFFFFFFFFFFFFFFF8;
  v87 = (v70 + 287) & 0xFFFFFFFFFFFFFFF8;
  v88 = *(_OWORD *)v87;
  *(_BYTE *)(v86 + 16) = *(_BYTE *)(v87 + 16);
  *(_OWORD *)v86 = v88;
  v89 = (_QWORD *)((v69 + 311) & 0xFFFFFFFFFFFFF8);
  v90 = (_QWORD *)((v70 + 311) & 0xFFFFFFFFFFFFF8);
  *v89 = *v90;
  *(_OWORD *)(((unint64_t)v89 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v90 + 15) & 0xFFFFFFFFFFFFF8);
  return v92;
}

uint64_t sub_23AF1903C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t (*v55)(void *, uint64_t, uint64_t);
  int v56;
  size_t v57;
  size_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void *v82;
  int v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _OWORD *v97;
  __int128 *v98;
  __int128 v99;
  unint64_t v100;
  unint64_t v101;
  __int128 v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  v6(a1, a2, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v114 = a1;
  v9 = (v7 + v8 + a1) & ~v8;
  v10 = (v7 + v8 + a2) & ~v8;
  v6(v9, v10, AssociatedTypeWitness);
  v11 = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(v11 - 8);
  LODWORD(a2) = *(_DWORD *)(v12 + 80) & 0xF8;
  v13 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = a2 | v15 | 7;
  v17 = (v7 + v16 + v9) & ~v16;
  v18 = (v7 + v16 + v10) & ~v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(v17, v18, v11);
  v19 = *(_QWORD *)(v12 + 64) + 7;
  v20 = (_QWORD *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  swift_bridgeObjectRelease();
  v22 = ((unint64_t)v20 + v15 + 8) & ~v15;
  v23 = ((unint64_t)v21 + v15 + 8) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 40))(v22, v23, v13);
  v24 = *(_QWORD *)(v14 + 64) + 7;
  v25 = (_QWORD *)((v24 + v22) & 0xFFFFFFFFFFFFFFF8);
  v26 = (v24 + v23) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_QWORD *)v26;
  v26 += 15;
  *v25 = v27;
  swift_bridgeObjectRelease();
  v28 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8);
  v28[1] = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRelease();
  v29 = ((((v24 + ((v15 + 8 + (v19 & 0xFFFFFFFFFFFFFFF8)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v30 = (_QWORD *)(v29 + v17);
  v31 = v29 + v18;
  *v30 = *(_QWORD *)(v29 + v18);
  v30[1] = *(_QWORD *)(v29 + v18 + 8);
  swift_bridgeObjectRelease();
  v32 = sub_23B1C5BDC();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(unsigned __int8 *)(v33 + 80);
  v35 = (v34 | 7) + 16;
  v36 = ((unint64_t)v30 + v35) & ~(v34 | 7);
  v37 = (v35 + v31) & ~(v34 | 7);
  *(_BYTE *)v36 = *(_BYTE *)v37;
  v38 = *(_BYTE *)(v37 + 8);
  *(_DWORD *)(v36 + 4) = *(_DWORD *)(v37 + 4);
  *(_BYTE *)(v36 + 8) = v38;
  *(_WORD *)(v36 + 10) = *(_WORD *)(v37 + 0xA);
  v113 = v36;
  v39 = (v34 + 12 + v36) & ~v34;
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 40);
  v40(v39, (v34 + 12 + v37) & ~v34, v32);
  v41 = *(_QWORD *)(v33 + 64);
  v42 = (v41 + v34 + v39) & ~v34;
  v43 = (v41 + v34 + ((v34 + 12 + v37) & ~v34)) & ~v34;
  v40(v42, v43, v32);
  v44 = (_BYTE *)(v42 + v41);
  *v44 = *(_BYTE *)(v43 + v41);
  v44[1] = *(_BYTE *)(v43 + v41 + 1);
  v44[2] = *(_BYTE *)(v43 + v41 + 2);
  v44[3] = *(_BYTE *)(v43 + v41 + 3);
  v44[4] = *(_BYTE *)(v43 + v41 + 4);
  v45 = (v42 + v41 + 12) & 0xFFFFFFFFFFFFFFF8;
  v46 = (v43 + v41 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *(_QWORD *)(v45 + 8) = *(_QWORD *)(v46 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v45 + 16) = *(_BYTE *)(v46 + 16);
  *(_BYTE *)(v45 + 17) = *(_BYTE *)(v46 + 17);
  *(_BYTE *)(v45 + 18) = *(_BYTE *)(v46 + 18);
  *(_BYTE *)(v45 + 19) = *(_BYTE *)(v46 + 19);
  v47 = (v45 + 27) & 0xFFFFFFFFFFFFFFF8;
  v48 = (v46 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
  *(_BYTE *)(v47 + 9) = *(_BYTE *)(v48 + 9);
  *(_BYTE *)(v47 + 10) = *(_BYTE *)(v48 + 10);
  *(_BYTE *)(v47 + 11) = *(_BYTE *)(v48 + 11);
  *(_BYTE *)(v47 + 12) = *(_BYTE *)(v48 + 12);
  v49 = (_QWORD *)((v45 + 47) & 0xFFFFFFFFFFFFF8);
  v50 = (_QWORD *)((v46 + 47) & 0xFFFFFFFFFFFFF8);
  *v49 = *v50;
  v51 = ((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8;
  v52 = ((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  *(_BYTE *)(v51 + 9) = *(_BYTE *)(v52 + 9);
  v53 = (void *)((v34 + 10 + v51) & ~v34);
  v54 = (void *)((v34 + 10 + v52) & ~v34);
  v55 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
  LODWORD(v26) = v55(v53, 1, v32);
  v56 = v55(v54, 1, v32);
  if ((_DWORD)v26)
  {
    if (!v56)
    {
      (*(void (**)(void *, void *, uint64_t))(v33 + 32))(v53, v54, v32);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v53, 0, 1, v32);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v56)
    {
      v40((uint64_t)v53, (uint64_t)v54, v32);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v33 + 8))(v53, v32);
  }
  if (*(_DWORD *)(v33 + 84))
    v57 = v41;
  else
    v57 = v41 + 1;
  memcpy(v53, v54, v57);
LABEL_10:
  if (*(_DWORD *)(v33 + 84))
    v58 = v41;
  else
    v58 = v41 + 1;
  v59 = (uint64_t)v53 + v58 + 7;
  v60 = (_QWORD *)(((unint64_t)v54 + v58 + 7) & 0xFFFFFFFFFFFFFFF8);
  v61 = (v59 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF8) = *v60;
  v62 = (v59 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRelease();
  v63 = v61 & 0xFFFFFFFFFFFFFFF8;
  v64 = ((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8;
  v65 = *(_QWORD *)v64;
  *(_BYTE *)(v63 + 8) = *(_BYTE *)(v64 + 8);
  *(_QWORD *)v63 = v65;
  v66 = (_QWORD *)(((unint64_t)v60 + 31) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)(v62 & 0xFFFFFFFFFFFFFFF8) = *v66;
  swift_bridgeObjectRelease();
  v67 = (uint64_t *)(((v62 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  v68 = ((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFFFF8;
  v69 = v67[1];
  if ((v69 & 0x3000000000000000) != 0)
    goto LABEL_16;
  v70 = *(_QWORD *)(v68 + 8);
  if ((v70 & 0x3000000000000000) != 0)
  {
    sub_23AAAE53C(*v67, v69);
LABEL_16:
    *(_OWORD *)v67 = *(_OWORD *)v68;
    goto LABEL_17;
  }
  v109 = *v67;
  *v67 = *(_QWORD *)v68;
  v67[1] = v70;
  sub_23AAAE53C(v109, v69);
LABEL_17:
  v71 = ((unint64_t)v67 + 19) & 0xFFFFFFFFFFFFFFF8;
  v72 = (v68 + 19) & 0xFFFFFFFFFFFFFFF8;
  v73 = *(_QWORD *)v72;
  *(_BYTE *)(v71 + 8) = *(_BYTE *)(v72 + 8);
  *(_QWORD *)v71 = v73;
  *(_BYTE *)(v71 + 9) = *(_BYTE *)(v72 + 9);
  v74 = (v71 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v75 = (v72 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v76 = *(_DWORD *)v75;
  *(_BYTE *)(v74 + 4) = *(_BYTE *)(v75 + 4);
  *(_DWORD *)v74 = v76;
  v77 = (_QWORD *)((v71 + 25) & 0xFFFFFFFFFFFFFFF8);
  v78 = (_QWORD *)((v72 + 25) & 0xFFFFFFFFFFFFFFF8);
  *v77 = *v78;
  v77[1] = v78[1];
  swift_bridgeObjectRelease();
  v79 = ((((((((((((v34
                  + 10
                  + ((((((v41 + ((((v34 + 12) | v34) + v41) & ~v34) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v34)
                + v58
                + 7) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v80 = v79 + v113;
  v81 = v79 + v37;
  v82 = *(void **)(v79 + v113 + 16);
  v83 = -1;
  if ((unint64_t)v82 < 0xFFFFFFFF)
    v83 = (int)v82;
  if (v83 - 1 >= 0)
    goto LABEL_26;
  v84 = *(_QWORD *)(v81 + 16);
  if (v84 >= 0xFFFFFFFF)
    LODWORD(v84) = -1;
  if ((int)v84 - 1 < 0)
  {
    *(_QWORD *)v80 = *(_QWORD *)v81;
    *(_BYTE *)(v80 + 8) = *(_BYTE *)(v81 + 8);
    *(_BYTE *)(v80 + 9) = *(_BYTE *)(v81 + 9);
    *(_QWORD *)(v80 + 16) = *(_QWORD *)(v81 + 16);

    v110 = *(void **)(v80 + 24);
    *(_QWORD *)(v80 + 24) = *(_QWORD *)(v81 + 24);

    *(_BYTE *)(v80 + 32) = *(_BYTE *)(v81 + 32);
    *(_BYTE *)(v80 + 33) = *(_BYTE *)(v81 + 33);
    *(_BYTE *)(v80 + 34) = *(_BYTE *)(v81 + 34);
    *(_QWORD *)(v80 + 40) = *(_QWORD *)(v81 + 40);
    *(_QWORD *)(v80 + 48) = *(_QWORD *)(v81 + 48);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v80 + 56) = *(_QWORD *)(v81 + 56);
    *(_QWORD *)(v80 + 64) = *(_QWORD *)(v81 + 64);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v80 + 72) = *(_BYTE *)(v81 + 72);
    *(_QWORD *)(v80 + 80) = *(_QWORD *)(v81 + 80);
    *(_QWORD *)(v80 + 88) = *(_QWORD *)(v81 + 88);
    swift_bridgeObjectRelease();
    v111 = *(void **)(v80 + 96);
    *(_QWORD *)(v80 + 96) = *(_QWORD *)(v81 + 96);

    *(_BYTE *)(v80 + 104) = *(_BYTE *)(v81 + 104);
    *(_BYTE *)(v80 + 105) = *(_BYTE *)(v81 + 105);
    *(_QWORD *)(v80 + 112) = *(_QWORD *)(v81 + 112);
    *(_QWORD *)(v80 + 120) = *(_QWORD *)(v81 + 120);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v80 + 128) = *(_QWORD *)(v81 + 128);
    *(_QWORD *)(v80 + 136) = *(_QWORD *)(v81 + 136);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v80 + 144) = *(_QWORD *)(v81 + 144);
    *(_QWORD *)(v80 + 152) = *(_QWORD *)(v81 + 152);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v80 + 160) = *(_QWORD *)(v81 + 160);
    *(_QWORD *)(v80 + 168) = *(_QWORD *)(v81 + 168);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v80 + 176) = *(_BYTE *)(v81 + 176);
    *(_QWORD *)(v80 + 184) = *(_QWORD *)(v81 + 184);
    swift_bridgeObjectRelease();
    v112 = *(_QWORD *)(v81 + 192);
    if (*(_QWORD *)(v80 + 192))
    {
      if (v112)
      {
        *(_QWORD *)(v80 + 192) = v112;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v80 + 200) = *(_QWORD *)(v81 + 200);
        swift_bridgeObjectRelease();
LABEL_35:
        *(_QWORD *)(v80 + 208) = *(_QWORD *)(v81 + 208);
        *(_QWORD *)(v80 + 216) = *(_QWORD *)(v81 + 216);
        *(_QWORD *)(v80 + 224) = *(_QWORD *)(v81 + 224);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v80 + 232) = *(_QWORD *)(v81 + 232);
        *(_QWORD *)(v80 + 240) = *(_QWORD *)(v81 + 240);
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
      sub_23AC40C1C(v80 + 192);
    }
    *(_OWORD *)(v80 + 192) = *(_OWORD *)(v81 + 192);
    goto LABEL_35;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v80 + 192))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_26:
  v85 = *(_OWORD *)v81;
  v86 = *(_OWORD *)(v81 + 16);
  v87 = *(_OWORD *)(v81 + 48);
  *(_OWORD *)(v80 + 32) = *(_OWORD *)(v81 + 32);
  *(_OWORD *)(v80 + 48) = v87;
  *(_OWORD *)v80 = v85;
  *(_OWORD *)(v80 + 16) = v86;
  v88 = *(_OWORD *)(v81 + 64);
  v89 = *(_OWORD *)(v81 + 80);
  v90 = *(_OWORD *)(v81 + 112);
  *(_OWORD *)(v80 + 96) = *(_OWORD *)(v81 + 96);
  *(_OWORD *)(v80 + 112) = v90;
  *(_OWORD *)(v80 + 64) = v88;
  *(_OWORD *)(v80 + 80) = v89;
  v91 = *(_OWORD *)(v81 + 128);
  v92 = *(_OWORD *)(v81 + 144);
  v93 = *(_OWORD *)(v81 + 176);
  *(_OWORD *)(v80 + 160) = *(_OWORD *)(v81 + 160);
  *(_OWORD *)(v80 + 176) = v93;
  *(_OWORD *)(v80 + 128) = v91;
  *(_OWORD *)(v80 + 144) = v92;
  v94 = *(_OWORD *)(v81 + 192);
  v95 = *(_OWORD *)(v81 + 208);
  v96 = *(_OWORD *)(v81 + 224);
  *(_QWORD *)(v80 + 240) = *(_QWORD *)(v81 + 240);
  *(_OWORD *)(v80 + 208) = v95;
  *(_OWORD *)(v80 + 224) = v96;
  *(_OWORD *)(v80 + 192) = v94;
LABEL_27:
  v97 = (_OWORD *)((v80 + 255) & 0xFFFFFFFFFFFFFFF8);
  v98 = (__int128 *)((v81 + 255) & 0xFFFFFFFFFFFFFFF8);
  v99 = *v98;
  *(_OWORD *)((char *)v97 + 9) = *(__int128 *)((char *)v98 + 9);
  *v97 = v99;
  v100 = (v80 + 287) & 0xFFFFFFFFFFFFFFF8;
  v101 = (v81 + 287) & 0xFFFFFFFFFFFFFFF8;
  v102 = *(_OWORD *)v101;
  *(_BYTE *)(v100 + 16) = *(_BYTE *)(v101 + 16);
  *(_OWORD *)v100 = v102;
  v103 = (_QWORD *)((v80 + 311) & 0xFFFFFFFFFFFFF8);
  v104 = (_QWORD *)((v81 + 311) & 0xFFFFFFFFFFFFF8);
  *v103 = *v104;
  v105 = (uint64_t *)(((unint64_t)v103 + 15) & 0xFFFFFFFFFFFFFFF8);
  v106 = *v105;
  v107 = v105[1];
  *(_OWORD *)v105 = *(_OWORD *)(((unint64_t)v104 + 15) & 0xFFFFFFFFFFFFF8);
  sub_23AAA12F0(v106, v107);
  return v114;
}

uint64_t sub_23AF1994C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for SnapshotItem(319, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_23AF199BC(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v3 = objc_msgSend(a1, sel_etag);
  v4 = sub_23B1C63E0();
  v6 = v5;

  v7 = objc_msgSend(a2, sel_etag);
  v8 = sub_23B1C63E0();
  v10 = v9;

  if (v4 == v8 && v6 == v10)
    v12 = 1;
  else
    v12 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_23AF19A80(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *v12;
  _BYTE v13[24];
  uint64_t v14;

  sub_23AA94C48(a1, (uint64_t)v13);
  if (!v14)
  {
    sub_23AA94C08((uint64_t)v13);
    goto LABEL_7;
  }
  sub_23AF19BA4();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    v10 = 0;
    return v10 & 1;
  }
  v2 = objc_msgSend(v1, sel_etag);
  v3 = sub_23B1C63E0();
  v5 = v4;

  v6 = objc_msgSend(v12, sel_etag);
  v7 = sub_23B1C63E0();
  v9 = v8;

  if (v3 == v7 && v5 == v9)
    v10 = 1;
  else
    v10 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v10 & 1;
}

unint64_t sub_23AF19BA4()
{
  unint64_t result;

  result = qword_2569E71E0;
  if (!qword_2569E71E0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2569E71E0);
  }
  return result;
}

uint64_t sub_23AF19BE0(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  id v5;
  char v6;
  _OWORD v8[2];

  if (a3)
  {
    v4 = a1;
    swift_unknownObjectRetain();
    sub_23B1C6D7C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    v5 = a1;
  }
  v6 = sub_23AF19A80((uint64_t)v8);

  sub_23AA94C08((uint64_t)v8);
  return v6 & 1;
}

uint64_t sub_23AF19C54(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;

  v1 = a1;
  v2 = objc_msgSend(v1, sel_etag);
  sub_23B1C63E0();

  v3 = sub_23B1C6584();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_23AF19CC4()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_etag);
  sub_23B1C63E0();

  v2 = sub_23B1C6584();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_23AF19D2C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23AF19DA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  sub_23AF1A8FC();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 536);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t sub_23AF19E10()
{
  return 0;
}

uint64_t sub_23AF19E28@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
}

void sub_23AF19E84()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23AF19EDC()
{
  sub_23AF19E84();
}

void sub_23AF19EE8()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
}

void sub_23AF19FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a10, v11 + *(_QWORD *)(v10 + 536), v12);
  swift_storeEnumTagMultiPayload();
  sub_23B06BF34();
}

void sub_23AF1A014(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = a1;
  type metadata accessor for ThrottlingKey();
}

uint64_t sub_23AF1A02C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 0, 1, a1);
}

uint64_t sub_23AF1A068()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  return 0;
}

uint64_t sub_23AF1A110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
  v1 = sub_23B1C64F4();
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 424))(v1);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return v3;
}

void sub_23AF1A18C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD v16[2];
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v1 = v0;
  v2 = sub_23B1C5BDC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + 40) & 1) != 0)
    goto LABEL_6;
  v6 = *(_QWORD *)(v1 + 32);
  v17 = 0x6574726174732820;
  v18 = 0xEA00000000002064;
  sub_23B1C5BD0();
  sub_23B1C5B94();
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v9 = v8 * 1000000000.0;
  if ((~COERCE__INT64(v8 * 1000000000.0) & 0x7FF0000000000000) != 0)
  {
    if (v9 > -9.22337204e18)
    {
      if (v9 < 9.22337204e18)
      {
        sub_23AF3E2AC((uint64_t)v9, v6);
        sub_23B1C64F4();
        swift_bridgeObjectRelease();
        sub_23B1C64F4();
LABEL_6:
        v17 = 0;
        v18 = 0xE000000000000000;
        sub_23B1C6EFC();
        swift_bridgeObjectRelease();
        v20 = 60;
        v21 = 0xE100000000000000;
        swift_beginAccess();
        sub_23AD4332C(v1 + 48, (uint64_t)&v17);
        v10 = v19;
        sub_23AD43374((uint64_t)&v17);
        if (!v10)
          goto LABEL_9;
        v16[0] = 0;
        v16[1] = 0xE000000000000000;
        sub_23AD4332C(v1 + 48, (uint64_t)&v17);
        v11 = v19;
        if (v19)
        {
          v12 = __swift_project_boxed_opaque_existential_1(&v17, v19);
          v13 = *(_QWORD *)(v11 - 8);
          MEMORY[0x24BDAC7A8](v12);
          v15 = (char *)v16 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v13 + 16))(v15);
          sub_23B1C7340();
          (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v11);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
LABEL_9:
          sub_23B1C64F4();
          swift_bridgeObjectRelease();
          sub_23B1C64F4();
          __asm { BR              X9 }
        }
LABEL_13:
        __break(1u);
        JUMPOUT(0x23AF1A674);
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  goto LABEL_12;
}

void sub_23AF1A688()
{
  sub_23AF1A69C();
}

void sub_23AF1A69C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23AF1A76C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

void sub_23AF1A7A8()
{
  type metadata accessor for TestingOperation();
}

uint64_t sub_23AF1A7D4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

uint64_t sub_23AF1A800(char a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = 0;
  swift_release();
  if (*(_QWORD *)(v1 + 24))
  {
    swift_retain();
    a1 = sub_23ABD05E8();
    swift_release();
  }
  return a1 & 1;
}

void sub_23AF1A850()
{
  sub_23B1C704C();
  __break(1u);
}

uint64_t sub_23AF1A8A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 40) = 1;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_QWORD *)(v3 + 80) = 0;
  *(_OWORD *)(v3 + 88) = xmmword_23B1CA770;
  *(_BYTE *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = a2;
  *(_QWORD *)(v3 + 128) = a3;
  if ((a3 & 0x8000) != 0)
    sub_23AEACC34(0x200000);
  return v3;
}

uint64_t sub_23AF1A8FC()
{
  uint64_t v0;

  swift_release();
  swift_release();
  sub_23AD43374(v0 + 48);
  sub_23AAAEE10(*(void **)(v0 + 88), *(id *)(v0 + 96), *(_BYTE *)(v0 + 104));
  return v0;
}

void sub_23AF1A934()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23AF1A98C()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23AF1A9E4()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23AF1AA3C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

uint64_t sub_23AF1AB0C(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(v1, 1, 1, a1);
}

uint64_t sub_23AF1AB48()
{
  sub_23AF1A8FC();
  return swift_deallocClassInstance();
}

void type metadata accessor for Job()
{
  JUMPOUT(0x23B861318);
}

uint64_t sub_23AF1AB74()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void sub_23AF1ABF8()
{
  sub_23AF1A18C();
}

uint64_t sub_23AF1AC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;

  swift_allocObject();
  v8 = sub_23AF1AD34(a1, a2, a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  return v8;
}

uint64_t sub_23AF1ACBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 536);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
}

uint64_t sub_23AF1AD10()
{
  sub_23AF19DA4();
  return swift_deallocClassInstance();
}

uint64_t sub_23AF1AD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;

  v9 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 536);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v9, a1, AssociatedTypeWitness);
  return sub_23AF1A8A8(a2, a3, a4);
}

uint64_t sub_23AF1ADBC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *(unsigned __int8 *)(v0 + 104);
  if ((_DWORD)v1 == 2)
    sub_23AFF07BC((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/interfaces/job/Job.swift", 97, v1, 140);
  v2 = *(void **)(v0 + 88);
  v3 = *(void **)(v0 + 96);
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 104) = 4;
  sub_23AAAEE10(v2, v3, v1);
  return v0;
}

uint64_t sub_23AF1AE08(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t result;

  if (*(_BYTE *)(v1 + 104))
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 88);
    v2 = *(void **)(v1 + 96);
    *(_QWORD *)(v1 + 88) = v3 & ~a1;
    *(_BYTE *)(v1 + 104) = 0;
    swift_retain();
    sub_23AAAEE10((void *)v3, v2, 0);
    return v1;
  }
  return result;
}

uint64_t sub_23AF1AEB0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  if ((a2 & 0x100) == 0)
  {
    if ((a4 & 0x100) == 0)
    {
      if ((_BYTE)a2)
      {
        if (a2 == 1)
        {
          if (a4 != 1 || a1 != a3)
            return 0;
        }
        else if (a1)
        {
          if (a4 != 2 || a3 != (void *)1)
            return 0;
        }
        else if (a4 != 2 || a3)
        {
          return 0;
        }
      }
      else if ((_BYTE)a4 || (_DWORD)a1 != (_DWORD)a3)
      {
        return 0;
      }
      return 1;
    }
    return 0;
  }
  if ((a4 & 0x100) == 0)
    return 0;
  v10 = sub_23B1C63E0();
  v12 = v11;
  if (v10 == sub_23B1C63E0() && v12 == v13)
  {
    v8 = 1;
    sub_23AA88218(a1, a2, 1);
    sub_23AA88218(a1, a2, 1);
    sub_23AA88218(a3, a4, 1);
    swift_bridgeObjectRelease_n();
    sub_23AA862DC(a3, a4, 1);

    sub_23AA862DC(a1, a2, 1);
    return v8;
  }
  v14 = sub_23B1C7388();
  sub_23AA88218(a1, a2, 1);
  sub_23AA88218(a1, a2, 1);
  sub_23AA88218(a3, a4, 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23AA862DC(a3, a4, 1);

  sub_23AA862DC(a1, a2, 1);
  return v14 & 1;
}

uint64_t sub_23AF1B088(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  if ((a2 & 0x100) != 0)
  {
    if ((a4 & 0x100) != 0)
    {
      if ((_BYTE)a2)
      {
        if (a2 == 1)
        {
          if (a4 == 1 && a1 == a3)
            return 1;
        }
        else if (a1)
        {
          if (a4 == 2 && a3 == (void *)1)
            return 1;
        }
        else if (a4 == 2 && !a3)
        {
          return 1;
        }
      }
      else if (!(_BYTE)a4 && (_DWORD)a1 == (_DWORD)a3)
      {
        return 1;
      }
    }
    return 0;
  }
  if ((a4 & 0x100) != 0)
    return 0;
  v8 = sub_23B1C63E0();
  v10 = v9;
  if (v8 != sub_23B1C63E0() || v10 != v11)
  {
    v13 = sub_23B1C7388();
    sub_23AB5692C(a1, a2, 0);
    sub_23AB5692C(a1, a2, 0);
    sub_23AB5692C(a3, a4, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23AB7C6B4(a3, a4, 0);

    sub_23AB7C6B4(a1, a2, 0);
    return v13 & 1;
  }
  sub_23AB5692C(a1, a2, 0);
  sub_23AB5692C(a1, a2, 0);
  sub_23AB5692C(a3, a4, 0);
  swift_bridgeObjectRelease_n();
  sub_23AB7C6B4(a3, a4, 0);

  sub_23AB7C6B4(a1, a2, 0);
  return 1;
}

uint64_t sub_23AF1B25C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_23B1C7388(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_23B1C7388() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_23AF1B320(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *i;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  int v42;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (unsigned __int8 *)(a2 + 48);
  for (i = (unsigned __int8 *)(a1 + 48); ; i += 24)
  {
    v40 = v2;
    v6 = *((_QWORD *)i - 2);
    v5 = *((_QWORD *)i - 1);
    v8 = *((_QWORD *)v3 - 2);
    v7 = *((_QWORD *)v3 - 1);
    v41 = *v3;
    v42 = *i;
    if ((v5 & 0x2000000000000000) != 0)
      v9 = HIBYTE(v5) & 0xF;
    else
      v9 = v6 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    if (!v9)
    {
      swift_bridgeObjectRetain();
      goto LABEL_18;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = sub_23B1C65A8();
    v12 = v11;
    swift_bridgeObjectRelease();
    if (v10 == 12565487 && v12 == 0xA300000000000000)
      break;
    v13 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
      goto LABEL_16;
LABEL_18:
    swift_bridgeObjectRetain();
    v23 = v5;
LABEL_19:
    if ((v7 & 0x2000000000000000) != 0)
      v24 = HIBYTE(v7) & 0xF;
    else
      v24 = v8 & 0xFFFFFFFFFFFFLL;
    if (!v24)
    {
LABEL_30:
      swift_bridgeObjectRetain();
      v38 = v7;
      if (v6 != v8)
        goto LABEL_32;
      goto LABEL_31;
    }
    swift_bridgeObjectRetain();
    v25 = sub_23B1C65A8();
    v27 = v26;
    swift_bridgeObjectRelease();
    if (v25 == 12565487 && v27 == 0xA300000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v28 = sub_23B1C7388();
      swift_bridgeObjectRelease();
      if ((v28 & 1) == 0)
        goto LABEL_30;
    }
    swift_bridgeObjectRetain();
    result = sub_23B1C64B8();
    if (4 * v24 < result >> 14)
      goto LABEL_39;
    v29 = sub_23B1C65C0();
    v31 = v30;
    v33 = v32;
    v35 = v34;
    swift_bridgeObjectRelease();
    v36 = MEMORY[0x23B85ED8C](v29, v31, v33, v35);
    v38 = v37;
    swift_bridgeObjectRelease();
    if (v6 != v36)
      goto LABEL_32;
LABEL_31:
    if (v23 == v38)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      if (v42 != v41)
        return 0;
      goto LABEL_6;
    }
LABEL_32:
    v39 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v39 & 1) == 0 || v42 != v41)
      return result;
LABEL_6:
    v3 += 24;
    v2 = v40 - 1;
    if (v40 == 1)
      return 1;
  }
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRetain();
  result = sub_23B1C64B8();
  if (4 * v9 >= result >> 14)
  {
    v15 = sub_23B1C65C0();
    v17 = v16;
    v19 = v18;
    v21 = v20;
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x23B85ED8C](v15, v17, v19, v21);
    v23 = v22;
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_23AF1B6D8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  id v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t i;
  id v18;
  void *v19;
  char v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;

  v5 = (void *)((unint64_t)a1 >> 62);
  if (!((unint64_t)a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v7 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_35:
    swift_bridgeObjectRetain();
    v23 = sub_23B1C7088();
    swift_bridgeObjectRelease();
    if (v6 == v23)
      goto LABEL_4;
    return 0;
  }
  swift_bridgeObjectRetain();
  v6 = sub_23B1C7088();
  swift_bridgeObjectRelease();
  v7 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_35;
LABEL_3:
  if (v6 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_4:
  if (!v6)
    return 1;
  v8 = a1 & 0xFFFFFFFFFFFFFF8;
  v9 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0)
    v8 = a1;
  if (v5)
    v9 = v8;
  v10 = a2 & 0xFFFFFFFFFFFFFF8;
  v11 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if ((a2 & 0x8000000000000000) != 0)
    v10 = a2;
  if (v7)
    v11 = v10;
  if (v9 == v11)
    return 1;
  if (v6 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v24 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_41:
    result = MEMORY[0x23B85F860](0, a1);
    goto LABEL_18;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_43;
  }
  result = (uint64_t)*(id *)(a1 + 32);
LABEL_18:
  v5 = (void *)result;
  v2 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_43:
    v13 = (id)MEMORY[0x23B85F860](0, a2);
LABEL_21:
    v14 = v13;
    sub_23AA9F52C(0, &qword_2542E1FF8);
    v15 = sub_23B1C6C50();

    if ((v15 & 1) != 0)
    {
      v16 = 1 - v6;
      for (i = 5; ; ++i)
      {
        v6 = v16 + i == 5;
        if (v16 + i == 5)
          return v6;
        v21 = i - 4;
        if (v24)
        {
          v22 = (id)MEMORY[0x23B85F860](i - 4, a1);
          if (v2)
            goto LABEL_23;
        }
        else
        {
          if (v21 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          v22 = *(id *)(a1 + 8 * i);
          if (v2)
          {
LABEL_23:
            v18 = (id)MEMORY[0x23B85F860](i - 4, a2);
            goto LABEL_24;
          }
        }
        if (v21 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_39;
        v18 = *(id *)(a2 + 8 * i);
LABEL_24:
        v19 = v18;
        v20 = sub_23B1C6C50();

        if ((v20 & 1) == 0)
          return v6;
      }
    }
    return 0;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = *(id *)(a2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_23AF1B960(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  BOOL v20;
  uint64_t v22;
  uint64_t v23;

  v4 = sub_23B1C5A08();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v17 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v22 = *(_QWORD *)(v8 + 72);
      v23 = v8;
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v14 = v11 - 1;
      do
      {
        v15 = a1;
        v13(v10, a1 + v12, v4);
        v16 = a2;
        v13(v7, a2 + v12, v4);
        sub_23AA7E38C(&qword_2542E21F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
        v17 = sub_23B1C63A4();
        v18 = *(void (**)(char *, uint64_t))(v23 + 8);
        v18(v7, v4);
        v18(v10, v4);
        v20 = v14-- != 0;
        if ((v17 & 1) == 0)
          break;
        v12 += v22;
        a2 = v16;
        a1 = v15;
      }
      while (v20);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_23AF1BAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

uint64_t sub_23AF1C3F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  char v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_BYTE *)(a1 + 41);
    v4 = (_BYTE *)(a2 + 41);
    do
    {
      v6 = *(void **)(v3 - 9);
      v7 = *(v3 - 1);
      v8 = *(void **)(v4 - 9);
      v9 = *(v4 - 1);
      if ((*v3 & 1) != 0)
      {
        if ((*v4 & 1) == 0)
          return 0;
        v10 = sub_23B1C63E0();
        v12 = v11;
        v14 = v10 == sub_23B1C63E0() && v12 == v13;
        v5 = v14 ? 1 : sub_23B1C7388();
        sub_23AA88218(v6, v7, 1);
        sub_23AA88218(v6, v7, 1);
        sub_23AA88218(v8, v9, 1);
        sub_23AA88218(v6, v7, 1);
        sub_23AA88218(v8, v9, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23AA862DC(v8, v9, 1);

        sub_23AA862DC(v6, v7, 1);
        sub_23AA862DC(v8, v9, 1);
        sub_23AA862DC(v6, v7, 1);
        if ((v5 & 1) == 0)
          return 0;
      }
      else
      {
        if ((*v4 & 1) != 0)
          return 0;
        if (*(v3 - 1))
        {
          if ((_DWORD)v7 == 1)
          {
            result = 0;
            if ((_DWORD)v9 != 1 || v6 != v8)
              return result;
          }
          else
          {
            result = 0;
            if (v6)
            {
              if ((_DWORD)v9 != 2 || v8 != (void *)1)
                return result;
            }
            else if ((_DWORD)v9 != 2 || v8)
            {
              return result;
            }
          }
        }
        else
        {
          result = 0;
          if (*(v4 - 1) || (_DWORD)v6 != (_DWORD)v8)
            return result;
        }
      }
      v3 += 16;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_23AF1C5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v4;
  _DWORD *v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40))
    {
      v4 = (_DWORD *)(a1 + 72);
      v5 = (_DWORD *)(a2 + 72);
      do
      {
        v6 = *((_BYTE *)v5 - 16);
        if ((*(_BYTE *)(v4 - 4) & 1) != 0)
        {
          if (!*((_BYTE *)v5 - 16))
            return 0;
        }
        else
        {
          if (*((_QWORD *)v4 - 3) != *((_QWORD *)v5 - 3))
            v6 = 1;
          if ((v6 & 1) != 0)
            return 0;
        }
        if (!--v2)
          return 1;
        v7 = *v4;
        v8 = *((_QWORD *)v4 - 1);
        v4 += 8;
        v9 = *((_QWORD *)v5 - 1);
        v11 = *v5;
        v5 += 8;
        v10 = v11;
      }
      while (v8 == v9 && v7 == v10);
    }
    return 0;
  }
  return 1;
}

unint64_t sub_23AF1C68C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *i;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (unint64_t *)(a2 + 56);
  for (i = (unint64_t *)(a1 + 56); ; i += 4)
  {
    v6 = *(i - 3);
    v8 = *(i - 1);
    v7 = *i;
    v9 = *(v3 - 3);
    v10 = *((unsigned __int8 *)v3 - 16);
    v12 = *(v3 - 1);
    v11 = *v3;
    if (*((_BYTE *)i - 16))
    {
      if (*((_BYTE *)i - 16) == 1)
      {
        if (v10 != 1 || v6 != v9)
          return 0;
      }
      else if (v6)
      {
        if (v10 != 2 || v9 != 1)
          return 0;
      }
      else if (v10 != 2 || v9 != 0)
      {
        return 0;
      }
    }
    else
    {
      if (*((_BYTE *)v3 - 16))
        v14 = 0;
      else
        v14 = (_DWORD)v6 == (_DWORD)v9;
      if (!v14)
        return 0;
    }
    v47 = v2;
    if ((v7 & 0x2000000000000000) != 0)
      v17 = HIBYTE(v7) & 0xF;
    else
      v17 = v8 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    if (!v17)
    {
      swift_bridgeObjectRetain();
      goto LABEL_41;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = sub_23B1C65A8();
    v20 = v19;
    swift_bridgeObjectRelease();
    if (v18 == 12565487 && v20 == 0xA300000000000000)
      break;
    v21 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
      goto LABEL_39;
LABEL_41:
    swift_bridgeObjectRetain();
    v31 = v7;
LABEL_42:
    if ((v11 & 0x2000000000000000) != 0)
      v32 = HIBYTE(v11) & 0xF;
    else
      v32 = v12 & 0xFFFFFFFFFFFFLL;
    if (!v32)
    {
LABEL_53:
      swift_bridgeObjectRetain();
      v46 = v11;
      if (v8 != v12)
        goto LABEL_5;
      goto LABEL_54;
    }
    swift_bridgeObjectRetain();
    v33 = sub_23B1C65A8();
    v35 = v34;
    swift_bridgeObjectRelease();
    if (v33 == 12565487 && v35 == 0xA300000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v36 = sub_23B1C7388();
      swift_bridgeObjectRelease();
      if ((v36 & 1) == 0)
        goto LABEL_53;
    }
    swift_bridgeObjectRetain();
    result = sub_23B1C64B8();
    if (4 * v32 < result >> 14)
      goto LABEL_59;
    v37 = sub_23B1C65C0();
    v39 = v38;
    v41 = v40;
    v43 = v42;
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x23B85ED8C](v37, v39, v41, v43);
    v46 = v45;
    swift_bridgeObjectRelease();
    if (v8 != v44)
    {
LABEL_5:
      v5 = sub_23B1C7388();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v5 & 1) == 0)
        return 0;
      goto LABEL_6;
    }
LABEL_54:
    if (v31 != v46)
      goto LABEL_5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_6:
    v3 += 4;
    v2 = v47 - 1;
    if (v47 == 1)
      return 1;
  }
  swift_bridgeObjectRelease();
LABEL_39:
  swift_bridgeObjectRetain();
  result = sub_23B1C64B8();
  if (4 * v17 >= result >> 14)
  {
    v23 = sub_23B1C65C0();
    v25 = v24;
    v27 = v26;
    v29 = v28;
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x23B85ED8C](v23, v25, v27, v29);
    v31 = v30;
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

BOOL sub_23AF1CA74(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_23AF1CAE8(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;

  sub_23AA9914C(a1);
  sub_23AA9F52C(0, qword_2569E5780);
  v1 = (void *)sub_23B1C66F8();
  swift_bridgeObjectRelease();
  v2 = (id)FPGetTagsDataForTags();

  v3 = sub_23B1C5AD4();
  return v3;
}

uint64_t sub_23AF1CB74(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[40];

  sub_23AA77B28(a1, (uint64_t)v4);
  v2 = sub_23B1C7484();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v2;
}

uint64_t sub_23AF1CBD0()
{
  return sub_23B1C7490();
}

uint64_t sub_23AF1CBE4()
{
  return sub_23B1C7490();
}

uint64_t sub_23AF1CBFC()
{
  return sub_23B1C74C0();
}

uint64_t sub_23AF1CC20()
{
  sub_23B1C74A8();
  sub_23B1C74C0();
  return sub_23B1C74E4();
}

uint64_t sub_23AF1CC64()
{
  return sub_23B1C74C0();
}

uint64_t sub_23AF1CC8C()
{
  sub_23B1C74A8();
  sub_23B1C74C0();
  return sub_23B1C74E4();
}

uint64_t sub_23AF1CCCC(unsigned __int8 a1)
{
  int v1;
  uint64_t result;

  v1 = a1;
  result = 0x3E656E6F6E3CLL;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 2036691559;
      break;
    case 2:
      result = 0x6E65657267;
      break;
    case 3:
      result = 0x656C70727570;
      break;
    case 4:
      result = 1702194274;
      break;
    case 5:
      result = 0x776F6C6C6579;
      break;
    case 6:
      result = 6579570;
      break;
    case 7:
      result = 0x65676E61726FLL;
      break;
    default:
      result = 0x6E776F6E6B6E753CLL;
      break;
  }
  return result;
}

uint64_t sub_23AF1CD98()
{
  unsigned __int8 *v0;

  return sub_23AF1CCCC(*v0);
}

uint64_t sub_23AF1CDA0()
{
  void *v0;
  id v1;
  uint64_t v2;

  swift_bridgeObjectRetain();
  v0 = (void *)sub_23B1C63BC();
  v1 = objc_msgSend(v0, sel_fp_obfuscatedFilename);

  v2 = sub_23B1C63E0();
  swift_bridgeObjectRelease();

  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_23AF1CF40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23AF1DCE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23AF1CF64()
{
  sub_23AA7E410();
  return sub_23B1C7544();
}

uint64_t sub_23AF1CF8C()
{
  sub_23AA7E410();
  return sub_23B1C7550();
}

uint64_t sub_23AF1CFB4(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];
  int v14;
  char v15;

  v14 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E71E8);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AA7E410();
  sub_23B1C7538();
  v13[0] = a2;
  v13[1] = a3;
  v15 = 0;
  sub_23AB5EA4C();
  sub_23B1C72A4();
  if (!v4)
  {
    LOBYTE(v13[0]) = v14;
    v15 = 1;
    type metadata accessor for fpfs_finder_color(0);
    sub_23AA7E38C(&qword_2569E71F8, (uint64_t (*)(uint64_t))type metadata accessor for fpfs_finder_color, (uint64_t)&unk_23B1DD734);
    sub_23B1C72A4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_23AF1D124(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_23AA7E1A8(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t sub_23AF1D144(_QWORD *a1)
{
  uint64_t v1;

  return sub_23AF1CFB4(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

BOOL sub_23AF1D160(uint64_t a1, uint64_t a2)
{
  return sub_23AF1D934(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t sub_23AF1D17C()
{
  uint64_t v0;
  unsigned __int8 v1;
  void *v2;
  id v3;
  uint64_t v4;

  v1 = *(_BYTE *)(v0 + 16);
  swift_bridgeObjectRetain();
  v2 = (void *)sub_23B1C63BC();
  v3 = objc_msgSend(v2, sel_fp_obfuscatedFilename);

  v4 = sub_23B1C63E0();
  swift_bridgeObjectRelease();

  sub_23B1C64F4();
  sub_23AF1CCCC(v1);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_23AF1D238(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  unint64_t v7;

  if (a2 >> 60 == 15)
    return 0;
  sub_23AAAE668(a1, a2);
  v5 = (void *)sub_23B1C5AA4();
  v6 = (id)FPGetTagsFromTagsData();

  if (v6)
  {
    sub_23AA9F52C(0, qword_2569E5780);
    v7 = sub_23B1C6704();

  }
  else
  {
    v7 = 0;
  }
  v2 = sub_23AAA3F54(v7);
  sub_23AAA3E18(a1, a2);
  swift_bridgeObjectRetain();
  sub_23AAA3E18(a1, a2);
  if (v2)
    swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_23AF1D310(uint64_t result, uint64_t a2)
{
  _QWORD **v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  if (result)
  {
    if (*(_QWORD *)result)
    {
      v2 = (_QWORD **)(a2 + 16);
      v3 = *(unsigned __int8 *)(result + 8);
      sub_23B1C650C();
      sub_23AAA420C();
      v4 = sub_23B1C6CF8();
      v6 = v5;
      swift_bridgeObjectRelease();
      if (v3 <= 1)
        v7 = 1;
      else
        v7 = v3;
      swift_beginAccess();
      v8 = *v2;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v2 = v8;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v8 = sub_23AF99E14(0, v8[2] + 1, 1, v8);
        *v2 = v8;
      }
      v11 = v8[2];
      v10 = v8[3];
      if (v11 >= v10 >> 1)
      {
        v8 = sub_23AF99E14((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
        *v2 = v8;
      }
      v8[2] = v11 + 1;
      v12 = &v8[3 * v11];
      v12[4] = v4;
      v12[5] = v6;
      *((_BYTE *)v12 + 48) = v7;
      swift_endAccess();
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_23AF1D478(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v15 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_23AAB5A68(0, v1, 0);
    v3 = a1 + 48;
    do
    {
      swift_bridgeObjectRetain_n();
      v4 = (void *)sub_23B1C63BC();
      v5 = objc_msgSend(v4, sel_fp_obfuscatedFilename);

      v6 = sub_23B1C63E0();
      v8 = v7;
      swift_bridgeObjectRelease();

      sub_23B1C64F4();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v8;
      v11 = *(_QWORD *)(v15 + 16);
      v10 = *(_QWORD *)(v15 + 24);
      if (v11 >= v10 >> 1)
        sub_23AAB5A68(v10 > 1, v11 + 1, 1);
      v3 += 24;
      *(_QWORD *)(v15 + 16) = v11 + 1;
      v12 = v15 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v6;
      *(_QWORD *)(v12 + 40) = v9;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
  sub_23AB5E978();
  v13 = sub_23B1C6338();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_23AF1D704@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1936154996 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23B1C7388();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23AF1D788()
{
  sub_23AA76764();
  return sub_23B1C7544();
}

uint64_t sub_23AF1D7B0()
{
  sub_23AA76764();
  return sub_23B1C7550();
}

uint64_t sub_23AF1D7D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E7200);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AA76764();
  sub_23B1C7538();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2569E7210);
  sub_23AA766FC(&qword_2569E7218, (uint64_t (*)(void))sub_23AF1DDB8, MEMORY[0x24BEE12A0]);
  sub_23B1C72A4();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

_QWORD *sub_23AF1D8F4(_QWORD *a1)
{
  return sub_23AA765B8(a1);
}

uint64_t sub_23AF1D908(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23AF1D7D8(a1, *v1);
}

unint64_t sub_23AF1D920(uint64_t *a1, uint64_t *a2)
{
  return sub_23AF1B320(*a1, *a2);
}

uint64_t sub_23AF1D92C()
{
  uint64_t *v0;

  return sub_23AF1D478(*v0);
}

BOOL sub_23AF1D934(uint64_t a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  _BOOL8 result;

  swift_bridgeObjectRetain();
  v12 = sub_23AAAE580(a1, a2);
  v14 = v13;
  swift_bridgeObjectRelease();
  if (!v14)
    goto LABEL_7;
  if (v12 != 12565487 || v14 != 0xA300000000000000)
  {
    v15 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_6;
LABEL_7:
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
LABEL_6:
  swift_bridgeObjectRetain();
  v16 = sub_23B1C64B8();
  v17 = sub_23AA8A1BC(v16, a1, a2);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  swift_bridgeObjectRelease();
  a1 = MEMORY[0x23B85ED8C](v17, v19, v21, v23);
  a2 = v24;
  swift_bridgeObjectRelease();
LABEL_8:
  swift_bridgeObjectRetain();
  v25 = sub_23AAAE580(a4, a5);
  v27 = v26;
  swift_bridgeObjectRelease();
  if (!v27)
    goto LABEL_15;
  if (v25 == 12565487 && v27 == 0xA300000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v28 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  if ((v28 & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    if (a1 != a4)
      goto LABEL_18;
    goto LABEL_16;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  v29 = sub_23B1C64B8();
  v30 = sub_23AA8A1BC(v29, a4, a5);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  swift_bridgeObjectRelease();
  v37 = MEMORY[0x23B85ED8C](v30, v32, v34, v36);
  a5 = v38;
  swift_bridgeObjectRelease();
  if (a1 != v37)
  {
LABEL_18:
    v39 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v39 & 1) == 0)
      return result;
    return a3 == a6;
  }
LABEL_16:
  if (a2 != a5)
    goto LABEL_18;
  swift_bridgeObjectRelease_n();
  return a3 == a6;
}

uint64_t sub_23AF1DBB4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  _QWORD v8[8];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[6] = a1;
  v8[7] = a2;
  v9 = a3;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4AF8];
  v4 = (uint64_t *)(v3 + 16);
  v8[4] = sub_23AF1E18C;
  v8[5] = v3;
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 1107296256;
  v8[2] = sub_23B135DF8;
  v8[3] = &block_descriptor_20;
  v5 = _Block_copy(v8);
  swift_retain();
  swift_release();
  fpfs_deserialize_tags();
  _Block_release(v5);
  swift_beginAccess();
  v6 = *v4;
  if (*(_QWORD *)(v6 + 16))
    swift_bridgeObjectRetain();
  else
    v6 = 0;
  swift_release();
  return v6;
}

uint64_t sub_23AF1DCE0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_23AF1DDB8()
{
  unint64_t result;

  result = qword_2569E7220;
  if (!qword_2569E7220)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DD7F8, &type metadata for Tag);
    atomic_store(result, (unint64_t *)&qword_2569E7220);
  }
  return result;
}

uint64_t sub_23AF1DDFC()
{
  return sub_23AA7E38C(&qword_2569E7228, (uint64_t (*)(uint64_t))type metadata accessor for fpfs_finder_color, (uint64_t)&unk_23B1CC938);
}

uint64_t sub_23AF1DE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Tag(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for Tag(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Tag(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Tag(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Tag()
{
  return &type metadata for Tag;
}

ValueMetadata *type metadata accessor for Tags()
{
  return &type metadata for Tags;
}

ValueMetadata *type metadata accessor for Tags.CodingKeys()
{
  return &type metadata for Tags.CodingKeys;
}

ValueMetadata *type metadata accessor for Tag.CodingKeys()
{
  return &type metadata for Tag.CodingKeys;
}

unint64_t sub_23AF1DFBC()
{
  unint64_t result;

  result = qword_2569E7230;
  if (!qword_2569E7230)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DD9B8, &type metadata for Tag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7230);
  }
  return result;
}

unint64_t sub_23AF1E004()
{
  unint64_t result;

  result = qword_2569E7238;
  if (!qword_2569E7238)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DDA70, &type metadata for Tags.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7238);
  }
  return result;
}

unint64_t sub_23AF1E04C()
{
  unint64_t result;

  result = qword_2569E7240;
  if (!qword_2569E7240)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DD9E0, &type metadata for Tags.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7240);
  }
  return result;
}

unint64_t sub_23AF1E094()
{
  unint64_t result;

  result = qword_2569E7248;
  if (!qword_2569E7248)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DDA08, &type metadata for Tags.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7248);
  }
  return result;
}

unint64_t sub_23AF1E0DC()
{
  unint64_t result;

  result = qword_2569E7250;
  if (!qword_2569E7250)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DD928, &type metadata for Tag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7250);
  }
  return result;
}

unint64_t sub_23AF1E124()
{
  unint64_t result;

  result = qword_2569E7258;
  if (!qword_2569E7258)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DD950, &type metadata for Tag.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7258);
  }
  return result;
}

uint64_t sub_23AF1E168()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AF1E18C(uint64_t a1)
{
  uint64_t v1;

  return sub_23AF1D310(a1, v1);
}

unint64_t sub_23AF1E194()
{
  unint64_t result;

  result = qword_2569E7270;
  if (!qword_2569E7270)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DD7D0, &type metadata for Tag);
    atomic_store(result, (unint64_t *)&qword_2569E7270);
  }
  return result;
}

_QWORD *sub_23AF1E1D8(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t sub_23AF1E208()
{
  return swift_release();
}

_QWORD *sub_23AF1E214(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *sub_23AF1E254(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t sub_23AF1E288(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)a1 >> 57) >> 6) | (2 * ((*(_QWORD *)a1 >> 57) & 0x38 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t sub_23AF1E2E4(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_23AF1E334(_QWORD *a1)
{
  return *a1 >> 63;
}

_QWORD *sub_23AF1E340(_QWORD *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *sub_23AF1E350(uint64_t *result, uint64_t a2)
{
  *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

uint64_t sub_23AF1E364(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

unint64_t sub_23AF1E36C(uint64_t a1)
{
  unint64_t v1;

  v1 = sub_23AF1E7FC(a1);
  swift_retain();
  return v1;
}

uint64_t sub_23AF1E398(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 & 0x7FFFFFFFFFFFFFFFLL) + 176))();
}

void sub_23AF1E3C0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  char v7;

  v4 = *v3;
  if (*v3 < 0)
    v4 &= ~0x8000000000000000;
  v5 = *(void **)(v4 + 88);
  v6 = *(void **)(v4 + 96);
  *(_QWORD *)(v4 + 88) = a1;
  *(_QWORD *)(v4 + 96) = a2;
  v7 = *(_BYTE *)(v4 + 104);
  *(_BYTE *)(v4 + 104) = a3;
  sub_23AAAEE10(v5, v6, v7);
}

unint64_t sub_23AF1E3EC(unint64_t a1)
{
  return a1 >> 63;
}

uint64_t sub_23AF1E3F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  if (a1 < 0)
    v3 = (a1 & 0x7FFFFFFFFFFFFFFFLL) + 48;
  else
    v3 = a1 + 48;
  swift_beginAccess();
  return sub_23AD4332C(v3, a2);
}

uint64_t sub_23AF1E44C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1 < 0)
    v3 &= ~0x8000000000000000;
  swift_beginAccess();
  swift_retain();
  sub_23ABF6868(a1, v3 + 48);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_23AF1E4C0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 128);
}

void sub_23AF1E4C8()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

uint64_t sub_23AF1E598(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v9 = sub_23B1C6C98();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v15 - v12;
  if (v2 < 0)
  {
    *(_QWORD *)(v7 - 120) = v1;
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 & 0x7FFFFFFFFFFFFFFFLL) + 416))(v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v13, 1, a1) == 1)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      *(_QWORD *)(v7 - 112) = v4;
      *(_QWORD *)(v7 - 104) = v3;
      *(_QWORD *)(v7 - 96) = v6;
      *(_QWORD *)(v7 - 88) = v5;
      type metadata accessor for ThrottlingKey();
    }
    sub_23AFEAF88();
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 416))(v11);
}

void sub_23AF1E6D4()
{
  swift_retain();
  sub_23B1C64F4();
  type metadata accessor for Job();
}

uint64_t sub_23AF1E77C(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x23B8613CC](&unk_23B1DD6B8, a1);
  sub_23B1C7340();
  sub_23B1C64F4();
  swift_release();
  return v2;
}

void sub_23AF1E7D8()
{
  sub_23AF1E6D4();
}

uint64_t sub_23AF1E7EC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

unint64_t sub_23AF1E7FC(uint64_t a1)
{
  return a1 ^ 0x8000000000000000;
}

void *sub_23AF1E808()
{
  return &unk_23B1DDB90;
}

void *sub_23AF1E814()
{
  return &unk_23B1DDB98;
}

void *sub_23AF1E820()
{
  return &unk_23B1DDBC8;
}

void *sub_23AF1E82C()
{
  return &unk_23B1DDBA0;
}

void *sub_23AF1E838()
{
  return &unk_23B1DDBC0;
}

void *sub_23AF1E844()
{
  return &unk_23B1DDBB8;
}

void *sub_23AF1E850()
{
  return &unk_23B1DDBD0;
}

void *sub_23AF1E85C()
{
  return &unk_23B1DDBD8;
}

uint64_t sub_23AF1E868()
{
  return 8;
}

void *sub_23AF1E870()
{
  return &unk_23B1DDBA8;
}

uint64_t sub_23AF1E87C()
{
  return 32;
}

void *sub_23AF1E884()
{
  return &unk_23B1DDBB0;
}

uint64_t sub_23AF1E890()
{
  return 64;
}

uint64_t sub_23AF1E898()
{
  return 128;
}

uint64_t sub_23AF1E8A0()
{
  return 256;
}

uint64_t sub_23AF1E8A8()
{
  return 512;
}

uint64_t sub_23AF1E8B0()
{
  return 1024;
}

uint64_t sub_23AF1E8B8()
{
  return 2048;
}

void *sub_23AF1E8C0()
{
  return &unk_23B1DDBE0;
}

uint64_t sub_23AF1E8CC()
{
  return 4096;
}

unint64_t sub_23AF1E8D4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_23AF1E900();
  result = sub_23AF1E944();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_23AF1E900()
{
  unint64_t result;

  result = qword_2569E72A8;
  if (!qword_2569E72A8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DDC04, &type metadata for FileTreeLookupOptions);
    atomic_store(result, (unint64_t *)&qword_2569E72A8);
  }
  return result;
}

unint64_t sub_23AF1E944()
{
  unint64_t result;

  result = qword_2569E72B0;
  if (!qword_2569E72B0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DDC3C, &type metadata for FileTreeLookupOptions);
    atomic_store(result, (unint64_t *)&qword_2569E72B0);
  }
  return result;
}

unint64_t sub_23AF1E98C()
{
  unint64_t result;

  result = qword_2569E72B8;
  if (!qword_2569E72B8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DDD6C, &type metadata for FileTreeLookupOptions);
    atomic_store(result, (unint64_t *)&qword_2569E72B8);
  }
  return result;
}

unint64_t sub_23AF1E9D4()
{
  unint64_t result;

  result = qword_2569E72C0;
  if (!qword_2569E72C0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DDCA4, &type metadata for FileTreeLookupOptions);
    atomic_store(result, (unint64_t *)&qword_2569E72C0);
  }
  return result;
}

unint64_t sub_23AF1EA1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2569E72C8;
  if (!qword_2569E72C8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2569E72D0);
    result = MEMORY[0x23B8613CC](&unk_23B1DD070, v1);
    atomic_store(result, (unint64_t *)&qword_2569E72C8);
  }
  return result;
}

uint64_t sub_23AF1EA68()
{
  uint64_t *v0;

  return sub_23AFD4D48(*v0);
}

unint64_t sub_23AF1EA74()
{
  unint64_t result;

  result = qword_2569E72D8;
  if (!qword_2569E72D8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DDDA4, &type metadata for FileTreeLookupOptions);
    atomic_store(result, (unint64_t *)&qword_2569E72D8);
  }
  return result;
}

unint64_t sub_23AF1EABC()
{
  unint64_t result;

  result = qword_2569E72E0;
  if (!qword_2569E72E0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DDDCC, &type metadata for FileTreeLookupOptions);
    atomic_store(result, (unint64_t *)&qword_2569E72E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for FileTreeLookupOptions()
{
  return &type metadata for FileTreeLookupOptions;
}

uint64_t sub_23AF1EB10()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23AF1EB50()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = MEMORY[0x23B8613CC](&unk_23B1DDEB8, *v0);
  type metadata accessor for AnyDatabaseDelegateImpl(0, v1, v2, v3);
  swift_retain();
  return sub_23AC319B4();
}

uint64_t sub_23AF1EBA0()
{
  uint64_t result;
  id v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = (id)sub_23AFD7BC0();
    swift_release();
    return (uint64_t)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1EBE4()
{
  uint64_t result;
  uint64_t v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = sub_23AABA448();
    swift_retain();
    swift_release();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1EC28()
{
  uint64_t result;
  uint64_t v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = sub_23AFB5D28();
    swift_release();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1EC68()
{
  uint64_t result;
  char v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = sub_23AFB5D30();
    swift_release();
    return v1 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1ECA8()
{
  uint64_t result;
  uint64_t v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 224))(result);
    swift_release();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1ECF0()
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (!result)
    __break(1u);
  return result;
}

uint64_t sub_23AF1ED10()
{
  uint64_t result;
  uint64_t v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 216))(result);
    swift_release();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1ED58()
{
  uint64_t result;
  uint64_t v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 232))(result);
    swift_release();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1EDA0()
{
  uint64_t result;
  char v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 240))(result);
    swift_release();
    return v1 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1EDE8()
{
  uint64_t result;
  uint64_t v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 272))(result);
    swift_release();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1EE30()
{
  uint64_t result;
  char v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 256))(result);
    swift_release();
    return v1 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1EE78()
{
  uint64_t result;
  uint64_t v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
    swift_release();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23AF1EEC0()
{
  uint64_t Strong;

  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)Strong + 248))(Strong);
    swift_release();
    type metadata accessor for FSOrFPJob();
  }
  __break(1u);
}

uint64_t sub_23AF1F08C@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  *a2 = sub_23AF1E7FC(*a1);
  return swift_retain();
}

uint64_t sub_23AF1F0C4()
{
  swift_retain();
  swift_getAtKeyPath();
  return swift_release();
}

uint64_t sub_23AF1F120()
{
  return sub_23AF1F630((void (*)(void))sub_23AFB0B90);
}

uint64_t sub_23AF1F12C(char a1)
{
  uint64_t result;
  char v3;

  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = (*(uint64_t (**)(BOOL))(*(_QWORD *)result + 384))((a1 & 1) == 0);
    swift_release();
    return v3 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1F180(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  result = swift_weakLoadStrong();
  if (result)
  {
    v18 = a8;
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = a5;
    *(_QWORD *)(v17 + 24) = a6;
    swift_retain();
    sub_23AFABBFC(a1, a2, a3, (a4 & 1) == 0, (uint64_t)sub_23AA7E774, v17, a7, v18, a9, a10);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_23AF1F278(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 416))(a1, a2, a3, (a4 & 1) == 0, a5 & 1, a6, a7, a8, a9);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1F32C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    sub_23AFAED34(a1 & 1, a2, a3, a4, a5, a6, a7, a8);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1F3DC(uint64_t a1, uint64_t a2, int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    sub_23AFAEDD8(a1, a2, a3, a4, a5, a6, a7);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1F46C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    sub_23AFB04F0(a1, a2, a3, a4, a5, a6, a7);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23AF1F510()
{
  type metadata accessor for PersistenceTrigger();
}

void sub_23AF1F560(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x24BDAC7A8](a1);
  if (swift_weakLoadStrong())
  {
    *(_QWORD *)(v5 - 112) = v3;
    *(_QWORD *)(v5 - 104) = v1;
    *(_QWORD *)(v5 - 96) = v4;
    *(_QWORD *)(v5 - 88) = v2;
    type metadata accessor for PersistenceTrigger();
  }
  __break(1u);
}

uint64_t sub_23AF1F600()
{
  return sub_23AF1F630(sub_23AFB5FEC);
}

uint64_t sub_23AF1F60C()
{
  return sub_23AF1F630((void (*)(void))sub_23AFB613C);
}

uint64_t sub_23AF1F618()
{
  return sub_23AF1F630((void (*)(void))sub_23AFB6210);
}

uint64_t sub_23AF1F624()
{
  return sub_23AF1F630((void (*)(void))sub_23AFB6234);
}

uint64_t sub_23AF1F630(void (*a1)(void))
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    a1();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1F668(char a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = sub_23AFD7C80(byte_23B1DDF0A[a1]);
    swift_retain();
    swift_release();
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1F6C0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 456))(a1, a2 & 1, a3, a4, a5);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23AF1F754()
{
  sub_23AF1F76C();
}

void sub_23AF1F760()
{
  sub_23AF1F76C();
}

void sub_23AF1F76C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
}

void sub_23AF1F848(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x24BDAC7A8](a1);
  if (swift_weakLoadStrong())
  {
    *(_QWORD *)(v5 - 112) = v2;
    *(_QWORD *)(v5 - 104) = v1;
    *(_QWORD *)(v5 - 96) = v4;
    *(_QWORD *)(v5 - 88) = v3;
    type metadata accessor for ReconciliationID();
  }
  __break(1u);
}

void sub_23AF1F8F4()
{
  type metadata accessor for TestingOperation();
}

void sub_23AF1F948(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x24BDAC7A8](a1);
  if (swift_weakLoadStrong())
  {
    *(_QWORD *)(v5 - 112) = v3;
    *(_QWORD *)(v5 - 104) = v1;
    *(_QWORD *)(v5 - 96) = v4;
    *(_QWORD *)(v5 - 88) = v2;
    type metadata accessor for TestingOperation();
  }
  __break(1u);
}

uint64_t sub_23AF1F9EC(uint64_t a1)
{
  return sub_23AF1FA04(a1, (void (*)(unint64_t))sub_23AFB62C0);
}

uint64_t sub_23AF1F9F8(uint64_t a1)
{
  return sub_23AF1FA04(a1, (void (*)(unint64_t))sub_23AFB642C);
}

uint64_t sub_23AF1FA04(uint64_t a1, void (*a2)(unint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = sub_23AF1E7FC(a1);
    swift_retain();
    a2(v5);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1FA80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = sub_23AF1E7FC(a1);
    swift_retain();
    v4 = sub_23AFB6588(v3);
    swift_release();
    swift_release();
    v5 = sub_23AF1E7FC(v4);
    swift_retain();
    swift_release();
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1FB54()
{
  return sub_23AF1FB6C(sub_23AFB89A4);
}

uint64_t sub_23AF1FB60()
{
  return sub_23AF1FB6C(sub_23AFB89B0);
}

uint64_t sub_23AF1FB6C(uint64_t (*a1)(void))
{
  uint64_t result;
  char v3;

  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = a1();
    swift_release();
    return v3 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1FBB0(uint64_t a1)
{
  return sub_23AF1FBC8(a1, (uint64_t (*)(uint64_t))sub_23AFB8BAC);
}

uint64_t sub_23AF1FBBC(uint64_t a1)
{
  return sub_23AF1FBC8(a1, (uint64_t (*)(uint64_t))sub_23AFB89BC);
}

uint64_t sub_23AF1FBC8(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  char v5;

  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = a2(a1);
    swift_release();
    return v5 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1FC1C()
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 544))(result);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1FC6C()
{
  return sub_23AF1FCA4((void (*)(void))sub_23AFB8D90);
}

uint64_t sub_23AF1FC88()
{
  return sub_23AF1FCA4((void (*)(void))sub_23AFB8E08);
}

uint64_t sub_23AF1FCA4(void (*a1)(void))
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    a1();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF1FCF8()
{
  return swift_weakDestroy();
}

uint64_t sub_23AF1FD00()
{
  uint64_t v0;

  v0 = sub_23AD01624();
  swift_weakDestroy();
  return v0;
}

uint64_t sub_23AF1FD2C()
{
  sub_23AD01624();
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

void type metadata accessor for SwappedDatabase()
{
  JUMPOUT(0x23B861318);
}

uint64_t sub_23AF1FD6C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 592);
}

uint64_t sub_23AF1FD74(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 584);
}

uint64_t sub_23AF1FD7C(uint64_t a1, uint64_t a2)
{
  return sub_23AF1FFC4(a2);
}

uint64_t sub_23AF1FD94(uint64_t a1, uint64_t a2)
{
  return sub_23AF1FEEC(a2);
}

uint64_t sub_23AF1FD9C(uint64_t a1, uint64_t a2)
{
  return sub_23AF2009C(a2);
}

void sub_23AF1FDA4()
{
  swift_weakInit();
  swift_weakAssign();
  type metadata accessor for SwappedReconciliationTable();
}

void sub_23AF1FE04()
{
  uint64_t v0;

  v0 = swift_retain();
  sub_23AC06200(v0);
  type metadata accessor for SwappedJobRegistry();
}

_QWORD *sub_23AF1FE2C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = sub_23AF14454(v0[3]);
  v4 = v0[4];
  v3 = v0[5];
  v6 = v0[6];
  v5 = v0[7];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v7 = sub_23AD03314(v1, v2, v3, v4, v6, v5);
  swift_release();
  return v7;
}

void sub_23AF1FEB4()
{
  swift_allocObject();
  sub_23AF1FDA4();
}

uint64_t sub_23AF1FEEC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(uint64_t, unint64_t);

  result = swift_weakLoadStrong();
  if (!result)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v3 = sub_23AFB5D38();
  result = swift_release();
  if (v3)
  {
    result = swift_weakLoadStrong();
    if (result)
    {
      v4 = result;
      v5 = sub_23AF1E7FC(a1);
      v6 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 128);
      swift_retain();
      v6(v4, v5);
      swift_release();
      swift_release();
      return swift_release();
    }
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_23AF1FFC4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(uint64_t, unint64_t);

  result = swift_weakLoadStrong();
  if (!result)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v3 = sub_23AFB5D38();
  result = swift_release();
  if (v3)
  {
    result = swift_weakLoadStrong();
    if (result)
    {
      v4 = result;
      v5 = sub_23AF1E7FC(a1);
      v6 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 120);
      swift_retain();
      v6(v4, v5);
      swift_release();
      swift_release();
      return swift_release();
    }
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_23AF2009C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(uint64_t, unint64_t);

  result = swift_weakLoadStrong();
  if (!result)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v3 = sub_23AFB5D38();
  result = swift_release();
  if (v3)
  {
    result = swift_weakLoadStrong();
    if (result)
    {
      v4 = result;
      v5 = sub_23AF1E7FC(a1);
      v6 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 144);
      swift_retain();
      v6(v4, v5);
      swift_release();
      swift_release();
      return swift_release();
    }
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_23AF20174()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AF2019C()
{
  return 32;
}

__n128 sub_23AF201A8(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_23AF201B4()
{
  return sub_23AF1F0C4();
}

BOOL sub_23AF201BC(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BOOL4 v5;
  _BOOL4 v7;
  _BOOL4 v9;

  if (a2)
  {
    v5 = a4 == 1 && a1 == a3;
    v7 = a4 == 2 && a3 == 0;
    v9 = a4 == 2 && a3 == 1;
    if (!a1)
      v9 = v7;
    if (a2 == 1)
      return v5;
    else
      return v9;
  }
  else
  {
    return !a4 && (_DWORD)a1 == (_DWORD)a3;
  }
}

BOOL sub_23AF20214(uint64_t a1, char a2)
{
  return !a1 && a2 == 2;
}

unint64_t sub_23AF20228(void *a1, uint64_t a2)
{
  unint64_t v3;

  v3 = sub_23AAA43E4(a1, a2);

  return v3;
}

uint64_t sub_23AF2026C(unsigned __int8 a1, unsigned int *a2)
{
  int v3;
  uint64_t result;

  v3 = a1;
  sub_23AC03E50((uint64_t)a2);
  if ((v3 - 1) <= 1)
    return *(_QWORD *)a2;
  result = a2[4];
  if (!(_DWORD)result)
    return *(_QWORD *)a2;
  return result;
}

BOOL sub_23AF202B8(uint64_t a1, unsigned __int8 a2)
{
  return a2 > 1u && a1 != 0;
}

void *sub_23AF202CC()
{
  return &unk_23B1DDF18;
}

uint64_t sub_23AF202D8()
{
  return 5525065;
}

unint64_t sub_23AF202EC(unint64_t result, char a2)
{
  if (!a2)
    return -(uint64_t)result;
  if (a2 != 1)
    return (unint64_t)(result != 0) << 63;
  if ((result & 0x8000000000000000) != 0)
    __break(1u);
  return result;
}

uint64_t sub_23AF20324(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v9;

  v2 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23B1C5474();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 0x8000000000000000)
    {
      return 1;
    }
    else if ((a1 & 0x8000000000000000) != 0)
    {
      a1 = -(uint64_t)a1;
      if (HIDWORD(a1))
      {
        sub_23B1C53FC();
        sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
        sub_23AB22974();
        sub_23B1C5864();
        v7 = (void *)sub_23B1C5354();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        swift_willThrow();

        return 0;
      }
    }
  }
  return a1;
}

uint64_t sub_23AF20474(void *a1, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;

  v9 = a2;
  if (!a3)
    goto LABEL_5;
  if (a3 != 1)
  {
    v9 = (unint64_t)(a2 != 0) << 63;
    goto LABEL_7;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_5:
    v9 = -(uint64_t)a2;
  }
LABEL_7:
  v10 = objc_msgSend(a1, sel_bindLongParameter_, v9, v6, v5, v4, v3, v7, v8);
  v11 = sub_23B1C63E0();

  return v11;
}

unint64_t sub_23AF204FC(sqlite3_value *a1)
{
  return sub_23AF21394(a1);
}

uint64_t sub_23AF20510(uint64_t a1)
{
  return sub_23AF214E0(a1);
}

uint64_t sub_23AF20524(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1 && a2 < 0)
    __break(1u);
  return sub_23B1C6950();
}

unint64_t sub_23AF20568(void *a1, uint64_t a2)
{
  unint64_t v3;

  v3 = sub_23AF21670(a1, a2);

  return v3;
}

uint64_t sub_23AF205AC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      sub_23B1C74B4();
      return sub_23B1C74D8();
    }
    else
    {
      return sub_23B1C74B4();
    }
  }
  else
  {
    sub_23B1C74B4();
    return sub_23B1C74CC();
  }
}

uint64_t sub_23AF20618(uint64_t a1, char a2)
{
  sub_23B1C74A8();
  if (a2)
  {
    sub_23B1C74B4();
    if (a2 == 1)
      sub_23B1C74D8();
  }
  else
  {
    sub_23B1C74B4();
    sub_23B1C74CC();
  }
  return sub_23B1C74E4();
}

void sub_23AF206B0(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 2;
}

void sub_23AF206C0(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 2;
}

BOOL sub_23AF206D4()
{
  uint64_t v0;

  return !*(_QWORD *)v0 && *(_BYTE *)(v0 + 8) == 2;
}

BOOL sub_23AF206EC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8) >= 2u && *(_QWORD *)v0 != 0;
}

unint64_t sub_23AF20710@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  char v5;

  result = sub_23AA8A208(a1, a2);
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v5;
  return result;
}

uint64_t sub_23AF20738()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  sub_23B1C74A8();
  if (v1)
  {
    sub_23B1C74B4();
    if (v1 == 1)
      sub_23B1C74D8();
  }
  else
  {
    sub_23B1C74B4();
    sub_23B1C74CC();
  }
  return sub_23B1C74E4();
}

unint64_t sub_23AF207CC@<X0>(sqlite3_value *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  char v5;

  result = sub_23AF21394(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_23AF207F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;

  result = sub_23AF214E0(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_23AF20824()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8) && *(_BYTE *)(v0 + 8) == 1 && (*(_QWORD *)v0 & 0x8000000000000000) != 0)
    __break(1u);
  return sub_23B1C6950();
}

uint64_t sub_23AF2086C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)sub_23B1C6F80();
  }
  result = sub_23AF20E30((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t sub_23AF2093C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  _QWORD v13[2];
  unsigned __int8 v14;

  if ((a4 & 0x1000000000000000) != 0)
  {
    LODWORD(result) = 0;
    v14 = 0;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v13;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)sub_23B1C6F80();
  }
  result = sub_23AF20A0C((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v14 = BYTE4(result) & 1;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  return result;
}

uint64_t sub_23AF20A0C(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned __int8 v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  unint64_t v47;
  unsigned __int8 v48;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_23B181E7C(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_104;
  result = sub_23B1C6548();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_23B181E7C(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_23B181E7C(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_100;
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  result = sub_23B1C6548();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v33 = a6 + 87;
        if (a6 > 10)
        {
          v34 = a6 + 55;
        }
        else
        {
          v33 = 97;
          v34 = 65;
        }
        if (a6 <= 10)
          v35 = a6 + 48;
        else
          v35 = 58;
        if (v19)
        {
          v24 = 0;
          v36 = v19 + 1;
          v37 = result - 1;
          do
          {
            v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                v29 = 0;
                v30 = 1;
                if (v38 < 0x61 || v38 >= v33)
                  return v29 | ((unint64_t)v30 << 32);
                v39 = -87;
              }
              else
              {
                v39 = -55;
              }
            }
            else
            {
              v39 = -48;
            }
            v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_96;
            v41 = v38 + v39;
            v24 = v40 + v41;
            if (__CFADD__((_DWORD)v40, v41))
              goto LABEL_96;
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          v30 = 0;
          v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v42 = a6 + 87;
      if (a6 > 10)
      {
        v43 = a6 + 55;
      }
      else
      {
        v42 = 97;
        v43 = 65;
      }
      if (a6 <= 10)
        v44 = a6 + 48;
      else
        v44 = 58;
      if (v19)
      {
        v24 = 0;
        while (1)
        {
          v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              v29 = 0;
              v30 = 1;
              if (v45 < 0x61 || v45 >= v42)
                return v29 | ((unint64_t)v30 << 32);
              v46 = -87;
            }
            else
            {
              v46 = -55;
            }
          }
          else
          {
            v46 = -48;
          }
          v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_96;
          v48 = v45 + v46;
          v24 = v47 + v48;
          if (__CFADD__((_DWORD)v47, v48))
            goto LABEL_96;
          ++v19;
          if (!--result)
            goto LABEL_94;
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    v29 = 0;
    v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 87;
      if (a6 > 10)
      {
        v22 = a6 + 55;
      }
      else
      {
        v21 = 97;
        v22 = 65;
      }
      if (a6 <= 10)
        v23 = a6 + 48;
      else
        v23 = 58;
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              v30 = 1;
              if (v27 < 0x61 || v27 >= v21)
                return v29 | ((unint64_t)v30 << 32);
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v31 = v24 * (unint64_t)a6;
          if ((v31 & 0xFFFFFFFF00000000) != 0)
            goto LABEL_96;
          v32 = v27 + v28;
          v24 = v31 - v32;
          if (v31 < v32)
            goto LABEL_96;
          ++v25;
          if (!--v26)
            goto LABEL_94;
        }
      }
LABEL_95:
      v29 = 0;
      v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

uint64_t sub_23AF20E30(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  BOOL v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  unint64_t v47;
  unsigned __int8 v48;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_23B181E7C(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_96;
  result = sub_23B1C6548();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_23B181E7C(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_23B181E7C(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_92;
  if (v17 < a3 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  result = sub_23B1C6548();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v18 < v15)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v33 = a6 + 48;
        v34 = a6 + 55;
        v35 = a6 + 87;
        if (a6 > 10)
        {
          v33 = 58;
        }
        else
        {
          v35 = 97;
          v34 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v36 = v19 + 1;
          v37 = result - 1;
          do
          {
            v38 = *v36;
            if (v38 < 0x30 || v38 >= v33)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                v29 = 0;
                if (v38 < 0x61 || v38 >= v35)
                  return v29;
                v39 = -87;
              }
              else
              {
                v39 = -55;
              }
            }
            else
            {
              v39 = -48;
            }
            if (!is_mul_ok(v24, a6))
              return 0;
            v40 = v24 * a6;
            v41 = v38 + v39;
            v32 = __CFADD__(v40, v41);
            v24 = v40 + v41;
            if (v32)
              return 0;
            ++v36;
            --v37;
          }
          while (v37);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v42 = a6 + 48;
      v43 = a6 + 55;
      v44 = a6 + 87;
      if (a6 > 10)
      {
        v42 = 58;
      }
      else
      {
        v44 = 97;
        v43 = 65;
      }
      if (v19)
      {
        v24 = 0;
        while (1)
        {
          v45 = *v19;
          if (v45 < 0x30 || v45 >= v42)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              v29 = 0;
              if (v45 < 0x61 || v45 >= v44)
                return v29;
              v46 = -87;
            }
            else
            {
              v46 = -55;
            }
          }
          else
          {
            v46 = -48;
          }
          if (!is_mul_ok(v24, a6))
            return 0;
          v47 = v24 * a6;
          v48 = v45 + v46;
          v32 = __CFADD__(v47, v48);
          v24 = v47 + v48;
          if (v32)
            return 0;
          ++v19;
          if (!--result)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          if (!is_mul_ok(v24, a6))
            return 0;
          v30 = v24 * a6;
          v31 = v27 + v28;
          v32 = v30 >= v31;
          v24 = v30 - v31;
          if (!v32)
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

uint64_t sub_23AF2124C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v2 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23B1C5474();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 0x8000000000000000)
    {
      return 1;
    }
    else if (a1 < 0)
    {
      a1 = -a1;
      if (HIDWORD(a1))
      {
        sub_23B1C53FC();
        sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
        sub_23AB22974();
        sub_23B1C5864();
        a1 = (uint64_t)v6;
        sub_23B1C5354();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        swift_willThrow();
      }
    }
  }
  return a1;
}

unint64_t sub_23AF21394(sqlite3_value *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t result;
  uint64_t v8;

  v2 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23B1C5474();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sqlite3_value_int64(a1);
  if (result == 0x8000000000000000)
    return 1;
  if (result && (result & 0x8000000000000000) != 0)
  {
    result = -(uint64_t)result;
    if (HIDWORD(result))
    {
      sub_23B1C53FC();
      sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
      sub_23AB22974();
      sub_23B1C5864();
      sub_23B1C5354();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_23AF214E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE v12[40];

  v4 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_23B1C5474();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_23AA77B28(a1, (uint64_t)v12);
  v9 = sub_23B1C6944();
  if (!v1)
  {
    v2 = v9;
    if (v9 == 0x8000000000000000)
    {
      v2 = 1;
    }
    else if (v9)
    {
      if (v9 < 0)
      {
        v2 = -v9;
        if ((unint64_t)-v9 >> 32)
        {
          sub_23B1C53FC();
          sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
          sub_23AB22974();
          sub_23B1C5864();
          sub_23B1C5354();
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          swift_willThrow();
        }
      }
    }
  }
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v2;
}

unint64_t sub_23AF21670(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  uint64_t v12;

  v4 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_23B1C5474();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t)objc_msgSend(a1, sel_longAtIndex_, a2);
  v10 = v9 + 0x7FFFFFFFFFFFFFFFLL;
  if ((v9 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    v10 = v9;
  if (v9 >= 1)
    result = 0x7FFFFFFF - v9;
  else
    result = v10;
  if (result == 0x8000000000000000)
    return 1;
  if (result && (result & 0x8000000000000000) != 0)
  {
    result = -(uint64_t)result;
    if (HIDWORD(result))
    {
      sub_23B1C53FC();
      sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
      sub_23AB22974();
      sub_23B1C5864();
      sub_23B1C5354();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return swift_willThrow();
    }
  }
  return result;
}

unint64_t sub_23AF217F4(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_23AF21830();
  a1[2] = sub_23AC3F714();
  a1[3] = sub_23AC3F648();
  result = sub_23AF21874();
  a1[4] = result;
  return result;
}

unint64_t sub_23AF21830()
{
  unint64_t result;

  result = qword_2542E5478;
  if (!qword_2542E5478)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DDF6C, &type metadata for VFSItemID);
    atomic_store(result, (unint64_t *)&qword_2542E5478);
  }
  return result;
}

unint64_t sub_23AF21874()
{
  unint64_t result;

  result = qword_2542E7400;
  if (!qword_2542E7400)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DDF94, &type metadata for VFSItemID);
    atomic_store(result, (unint64_t *)&qword_2542E7400);
  }
  return result;
}

unint64_t sub_23AF218BC()
{
  unint64_t result;

  result = qword_2542E7408;
  if (!qword_2542E7408)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DDF44, &type metadata for VFSItemID);
    atomic_store(result, (unint64_t *)&qword_2542E7408);
  }
  return result;
}

ValueMetadata *type metadata accessor for VFSItemID()
{
  return &type metadata for VFSItemID;
}

uint64_t sub_23AF21910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for ItemMetadata();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 104))(a1, a2);
  v7 = v6[*(int *)(v4 + 80)];
  sub_23AA9F854((uint64_t)v6);
  return v7;
}

uint64_t sub_23AF219A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for ItemMetadata();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (unsigned __int8 *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 104))(a1, a2);
  v7 = *v6;
  sub_23AA9F854((uint64_t)v6);
  return v7;
}

uint64_t sub_23AF21A28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;

  v6 = type metadata accessor for ItemMetadata();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v17 - v10;
  (*(void (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 80))(a1, a2);
  v14 = v13;
  (*(void (**)(uint64_t, uint64_t))(a2 + 104))(a1, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return sub_23AEF9C70((uint64_t)v11, v12, v14, (uint64_t)v8, AssociatedTypeWitness, AssociatedConformanceWitness, a3);
}

uint64_t sub_23AF21B70(uint64_t a1)
{
  return sub_23AF21B84(a1);
}

uint64_t sub_23AF21B84(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23ADACC74(0, v1, 0);
    v2 = v11;
    v4 = (unint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      sub_23AAAE668(v5, *v4);
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      if (v8 >= v7 >> 1)
        sub_23ADACC74(v7 > 1, v8 + 1, 1);
      v4 += 8;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v5;
      *(_QWORD *)(v9 + 40) = v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23AF21C5C(uint64_t result, char a2)
{
  _QWORD *v2;

  if ((a2 & 1) != 0)
    *v2 |= result;
  return result;
}

uint64_t sub_23AF21C70()
{
  return 0;
}

uint64_t sub_23AF21C7C(uint64_t a1)
{
  uint64_t v1;

  __swift_destroy_boxed_opaque_existential_1(a1);
  return v1;
}

void sub_23AF21CA4()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FileItemVersion();
}

uint64_t sub_23AF21D60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(_BYTE *, uint64_t);
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v37[96];

  *(_QWORD *)(v1 + 64) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v1 + 72) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v1 + 56) = &v37[-v4];
  v5 = type metadata accessor for ItemMetadata();
  MEMORY[0x24BDAC7A8](v5);
  *(_QWORD *)(v1 + 48) = &v37[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = &v37[-v9];
  (*(void (**)(uint64_t, uint64_t))(v2 + 120))(v3, v2);
  sub_23AA724E8(v1 + 96, v1 + 344, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 344) == 1)
  {
    *(_QWORD *)(v1 + 32) = 0;
    v11 = 0xE000000000000000;
  }
  else
  {
    v12 = *(_OWORD *)(v1 + 552);
    *(_OWORD *)(v1 + 784) = *(_OWORD *)(v1 + 536);
    *(_OWORD *)(v1 + 800) = v12;
    *(_OWORD *)(v1 + 816) = *(_OWORD *)(v1 + 568);
    *(_QWORD *)(v1 + 832) = *(_QWORD *)(v1 + 584);
    v13 = *(_OWORD *)(v1 + 488);
    *(_OWORD *)(v1 + 720) = *(_OWORD *)(v1 + 472);
    *(_OWORD *)(v1 + 736) = v13;
    v14 = *(_OWORD *)(v1 + 520);
    *(_OWORD *)(v1 + 752) = *(_OWORD *)(v1 + 504);
    *(_OWORD *)(v1 + 768) = v14;
    v15 = *(_OWORD *)(v1 + 424);
    *(_OWORD *)(v1 + 656) = *(_OWORD *)(v1 + 408);
    *(_OWORD *)(v1 + 672) = v15;
    v16 = *(_OWORD *)(v1 + 456);
    *(_OWORD *)(v1 + 688) = *(_OWORD *)(v1 + 440);
    *(_OWORD *)(v1 + 704) = v16;
    v17 = *(_OWORD *)(v1 + 360);
    *(_OWORD *)(v1 + 592) = *(_OWORD *)(v1 + 344);
    *(_OWORD *)(v1 + 608) = v17;
    v18 = *(_OWORD *)(v1 + 392);
    *(_OWORD *)(v1 + 624) = *(_OWORD *)(v1 + 376);
    *(_OWORD *)(v1 + 640) = v18;
    sub_23AF96E78();
    sub_23AAA5B2C(v1 + 96);
    *(_QWORD *)(v1 + 80) = 0x3A72747461736E20;
    *(_QWORD *)(v1 + 88) = 0xE800000000000000;
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 32) = *(_QWORD *)(v1 + 80);
    v11 = *(_QWORD *)(v1 + 88);
  }
  *(_QWORD *)(v1 + 40) = v11;
  v19 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 136);
  if (v19(v3, v2))
  {
    strcpy((char *)(v1 + 80), " unsupported:");
    *(_WORD *)(v1 + 94) = -4864;
    v20 = v19(v3, v2);
    sub_23AF16528(v20);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 16) = *(_QWORD *)(v1 + 80);
    v21 = *(_QWORD *)(v1 + 88);
  }
  else
  {
    *(_QWORD *)(v1 + 16) = 0;
    v21 = 0xE000000000000000;
  }
  *(_QWORD *)(v1 + 24) = v21;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 144))(v3, v2);
  v24 = v22;
  if (v23 >> 62)
  {
    if (v23 >> 62 != 1)
    {
      *(_QWORD *)(v1 + 8) = 0;
      v26 = 0xE000000000000000;
      goto LABEL_13;
    }
    sub_23AAA12F0(v22, v23);
    v25 = 1886221352;
  }
  else
  {
    sub_23AAA12F0(v22, v23);
    v25 = 1852270888;
  }
  *(_QWORD *)(v1 + 80) = v25 & 0xFFFF0000FFFFFFFFLL | 0x3A00000000;
  *(_QWORD *)(v1 + 88) = 0xE500000000000000;
  sub_23ADB47EC(v24);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  *(_QWORD *)(v1 + 8) = *(_QWORD *)(v1 + 80);
  v26 = *(_QWORD *)(v1 + 88);
LABEL_13:
  *(_QWORD *)v1 = v26;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0xE000000000000000;
  sub_23B1C6EFC();
  v27 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 80) = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 88) = v27;
  sub_23B1C64F4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(v3, v2);
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  v28 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v28(v10, AssociatedTypeWitness);
  sub_23B1C64F4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 72))(v3, v2);
  sub_23B1C7340();
  v28(v10, AssociatedTypeWitness);
  sub_23B1C64F4();
  (*(void (**)(uint64_t, uint64_t))(v2 + 80))(v3, v2);
  v29 = (void *)sub_23B1C63BC();
  v30 = objc_msgSend(v29, sel_fp_obfuscatedFilename);

  sub_23B1C63E0();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v31 = *(_QWORD *)(v1 + 48);
  (*(void (**)(uint64_t, uint64_t))(v2 + 104))(v3, v2);
  sub_23AB59228();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23AA9F854(v31);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v33 = *(_QWORD *)(v1 + 80);
  v32 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = 0xE000000000000000;
  v34 = *(_QWORD *)(v1 + 56);
  (*(void (**)(uint64_t, uint64_t))(v2 + 112))(v3, v2);
  v35 = *(_QWORD *)(v1 + 72);
  MEMORY[0x23B8613CC](&unk_23B1E4BB8, v35);
  sub_23B1C7340();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 64) + 8))(v34, v35);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  *(_QWORD *)(v1 + 80) = v33;
  *(_QWORD *)(v1 + 88) = v32;
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return *(_QWORD *)(v1 + 80);
}

uint64_t sub_23AF22304(int a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 62)
  {
    if (a2 >> 62 == 1)
    {
      if (a4 >> 62 != 1)
        return 0;
      return a1 == (_DWORD)a3;
    }
    if (a4 >> 62 == 2 && !a3 && a4 == 0x8000000000000000)
      return 1;
  }
  else if (!(a4 >> 62))
  {
    return a1 == (_DWORD)a3;
  }
  return 0;
}

BOOL sub_23AF22364(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = a2[1];
  v4 = a1[1] >> 62;
  if (!(_DWORD)v4)
  {
    if (v3 >> 62)
      return 0;
    return *a1 == (_DWORD)v2;
  }
  if ((_DWORD)v4 == 1)
  {
    if (v3 >> 62 != 1)
      return 0;
    return *a1 == (_DWORD)v2;
  }
  return v3 >> 62 == 2 && v2 == 0 && v3 == 0x8000000000000000;
}

void sub_23AF223C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  _QWORD v13[10];
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = MEMORY[0x24BDAC7A8](a1);
  v21 = v1;
  v18 = v3;
  v19 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v17 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v15 = (char *)v13 - v7;
  v8 = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(v8 - 8);
  v13[5] = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v13[8] = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13[6] = (char *)v13 - v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v13[7] = AssociatedConformanceWitness;
  v13[9] = AssociatedTypeWitness;
  v14 = swift_getAssociatedConformanceWitness();
  v22 = v8;
  v23 = AssociatedTypeWitness;
  v24 = AssociatedConformanceWitness;
  v25 = v14;
  type metadata accessor for FileItemVersion();
}

uint64_t sub_23AF22560(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  void (*v54)(_QWORD);
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  void (*v60)(_QWORD, _QWORD);
  uint64_t v61;
  int v62;
  char v63;
  char v64;
  int v65;
  char v66;
  char v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  char v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int v98;
  char v99;
  char v100;
  int v101;
  char v102;
  char v103;
  int v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  char v123;
  char v124;
  int v125;
  char v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  char v150;
  char v151;
  _QWORD *v152;
  _QWORD *v153;
  char v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  char v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v188;
  char v189;
  char v190;
  char v191;
  char v192;
  char v193;
  char v194;
  char v195;
  _BYTE v196[96];

  *(_QWORD *)(v1 + 112) = a1;
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v1 + 24) = &v196[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v1 + 16) = &v196[-v8];
  v9 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = v2;
  *(_QWORD *)(v1 + 152) = v2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = type metadata accessor for ItemState(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = &v196[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v16);
  v20 = &v196[-v19];
  sub_23AF21A28(v11, v9, (uint64_t)&v196[-v19]);
  v21 = *(_QWORD *)(v1 + 128);
  sub_23AF21A28(v21, v4, (uint64_t)v18);
  *(_QWORD *)(v1 + 120) = v4;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 136))(v21, v4);
  *(_QWORD *)(v1 + 8) = sub_23AEF9CF0((uint64_t)v18, v22, 0, v14);
  v23 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
  v23(v18, v14);
  v23(v20, v14);
  v24 = v9;
  *(_QWORD *)(v1 + 160) = v9;
  v25 = *(void (**)(uint64_t, uint64_t))(v9 + 112);
  *(_QWORD *)v1 = v25;
  v26 = *(_QWORD *)(v1 + 16);
  v27 = *(_QWORD *)(v1 + 152);
  v25(v27, v24);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 144) + 16);
  v29 = *(_QWORD *)(v1 + 40);
  v30 = *(_QWORD *)(v1 + 48);
  v28(v30, v26, v29);
  v31 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 32) + 8);
  v32 = v26;
  v33 = *(_QWORD *)(v1 + 112);
  v31(v26, v33);
  v34 = v31;
  v35 = *(_QWORD *)(v1 + 128);
  v36 = *(void (**)(uint64_t))(*(_QWORD *)(v1 + 120) + 112);
  *(_QWORD *)(v1 + 32) = v36;
  v37 = *(_QWORD *)(v1 + 24);
  v36(v35);
  v38 = *(_QWORD *)(v1 + 64);
  v28(v38, v37, v29);
  v34(v37, v33);
  v39 = v30;
  v40 = v38;
  LOBYTE(v38) = sub_23B1C63A4();
  v41 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 144) + 8);
  v41(v40, v29);
  v41(v39, v29);
  v42 = *(_QWORD *)(v1 + 8) | 8;
  if ((v38 & 1) != 0)
    v42 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 144) = v42;
  v43 = v32;
  (*(void (**)(uint64_t, _QWORD))v1)(v27, *(_QWORD *)(v1 + 160));
  v44 = *(_QWORD *)(v1 + 112);
  v45 = v32 + *(int *)(v44 + 56);
  v47 = *(_QWORD *)(v1 + 88);
  v46 = *(_QWORD *)(v1 + 96);
  v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16);
  v49 = *(_QWORD *)(v1 + 72);
  v48(v47, v45, v49);
  v34(v43, v44);
  (*(void (**)(_QWORD, _QWORD))(v1 + 32))(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 120));
  v50 = *(_QWORD *)(v1 + 104);
  v48(v50, v37 + *(int *)(v44 + 56), v49);
  v34(v37, v44);
  v51 = v50;
  LOBYTE(v50) = sub_23B1C63A4();
  v52 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
  v52(v51, v49);
  v52(v47, v49);
  if ((v50 & 1) != 0)
    v53 = *(_QWORD *)(v1 + 144);
  else
    v53 = *(_QWORD *)(v1 + 144) | 0x20000000000;
  v54 = *(void (**)(_QWORD))(*(_QWORD *)(v1 + 160) + 120);
  v54(*(_QWORD *)(v1 + 152));
  sub_23AA724E8(v1 + 200, v1 + 25256, &qword_2542E5050);
  v55 = sub_23AAFCF2C(v1 + 25256);
  v56 = 0;
  if (v55 != 1)
  {
    v56 = *(_QWORD *)(v1 + 25256);
    sub_23AAA5B2C(v1 + 200);
  }
  v58 = *(_QWORD *)(v1 + 120);
  v57 = *(_QWORD *)(v1 + 128);
  v59 = *(void (**)(uint64_t, uint64_t))(v58 + 120);
  *(_QWORD *)(v1 + 144) = v59;
  v59(v57, v58);
  sub_23AA724E8(v1 + 448, v1 + 25008, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 25008) != 1)
  {
    v61 = *(_QWORD *)(v1 + 25008);
    sub_23AAA5B2C(v1 + 448);
    v60 = (void (*)(_QWORD, _QWORD))v54;
    if (v55 != 1 && v56 == v61)
      goto LABEL_14;
    goto LABEL_13;
  }
  v60 = (void (*)(_QWORD, _QWORD))v54;
  if (v55 != 1)
LABEL_13:
    v53 |= 0x40000uLL;
LABEL_14:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 696, v1 + 24760, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 24760) == 1)
  {
    v62 = 2;
  }
  else
  {
    v63 = *(_BYTE *)(v1 + 24768);
    sub_23AAA5B2C(v1 + 696);
    v62 = v63 & 1;
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 944, v1 + 24512, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 24512) != 1)
  {
    v64 = *(_BYTE *)(v1 + 24520);
    sub_23AAA5B2C(v1 + 944);
    if (v62 != 2 && (v64 & 1) == (v62 != 0))
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v62 != 2)
LABEL_22:
    v53 |= 0x80000uLL;
LABEL_23:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 1192, v1 + 24264, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 24264) == 1)
  {
    v65 = 2;
  }
  else
  {
    v66 = *(_BYTE *)(v1 + 24273);
    sub_23AAA5B2C(v1 + 1192);
    v65 = v66 & 1;
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 1440, v1 + 24016, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 24016) == 1)
  {
    if (v65 == 2)
      goto LABEL_32;
    goto LABEL_31;
  }
  v67 = *(_BYTE *)(v1 + 24025);
  sub_23AAA5B2C(v1 + 1440);
  if (v65 == 2 || (v67 & 1) != (v65 != 0))
LABEL_31:
    v53 |= 0x100000uLL;
LABEL_32:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 1688, v1 + 23512, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 23512) == 1)
    goto LABEL_35;
  v68 = *(_OWORD *)(v1 + 23720);
  *(_OWORD *)(v1 + 23952) = *(_OWORD *)(v1 + 23704);
  *(_OWORD *)(v1 + 23968) = v68;
  *(_OWORD *)(v1 + 23984) = *(_OWORD *)(v1 + 23736);
  *(_QWORD *)(v1 + 24000) = *(_QWORD *)(v1 + 23752);
  v69 = *(_OWORD *)(v1 + 23656);
  *(_OWORD *)(v1 + 23888) = *(_OWORD *)(v1 + 23640);
  *(_OWORD *)(v1 + 23904) = v69;
  v70 = *(_OWORD *)(v1 + 23688);
  *(_OWORD *)(v1 + 23920) = *(_OWORD *)(v1 + 23672);
  *(_OWORD *)(v1 + 23936) = v70;
  v71 = *(_OWORD *)(v1 + 23592);
  *(_OWORD *)(v1 + 23824) = *(_OWORD *)(v1 + 23576);
  *(_OWORD *)(v1 + 23840) = v71;
  v72 = *(_OWORD *)(v1 + 23624);
  *(_OWORD *)(v1 + 23856) = *(_OWORD *)(v1 + 23608);
  *(_OWORD *)(v1 + 23872) = v72;
  v73 = *(_OWORD *)(v1 + 23528);
  *(_OWORD *)(v1 + 23760) = *(_OWORD *)(v1 + 23512);
  *(_OWORD *)(v1 + 23776) = v73;
  v74 = *(_OWORD *)(v1 + 23560);
  *(_OWORD *)(v1 + 23792) = *(_OWORD *)(v1 + 23544);
  *(_OWORD *)(v1 + 23808) = v74;
  sub_23AA724E8(v1 + 23776, v5 - 192, &qword_2542E7700);
  sub_23ADF1BFC((id *)(v5 - 192));
  sub_23AAA5B2C(v1 + 1688);
  sub_23AA724E8(v5 - 192, v5 - 104, &qword_2542E7700);
  if (!*(_QWORD *)(v5 - 104))
  {
LABEL_35:
    v75 = 0;
  }
  else
  {
    sub_23AEB4600((id *)(v5 - 192));
    v75 = 1;
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 1936, v1 + 23016, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 23016) != 1)
  {
    v76 = *(_OWORD *)(v1 + 23224);
    *(_OWORD *)(v1 + 23456) = *(_OWORD *)(v1 + 23208);
    *(_OWORD *)(v1 + 23472) = v76;
    *(_OWORD *)(v1 + 23488) = *(_OWORD *)(v1 + 23240);
    *(_QWORD *)(v1 + 23504) = *(_QWORD *)(v1 + 23256);
    v77 = *(_OWORD *)(v1 + 23160);
    *(_OWORD *)(v1 + 23392) = *(_OWORD *)(v1 + 23144);
    *(_OWORD *)(v1 + 23408) = v77;
    v78 = *(_OWORD *)(v1 + 23192);
    *(_OWORD *)(v1 + 23424) = *(_OWORD *)(v1 + 23176);
    *(_OWORD *)(v1 + 23440) = v78;
    v79 = *(_OWORD *)(v1 + 23096);
    *(_OWORD *)(v1 + 23328) = *(_OWORD *)(v1 + 23080);
    *(_OWORD *)(v1 + 23344) = v79;
    v80 = *(_OWORD *)(v1 + 23128);
    *(_OWORD *)(v1 + 23360) = *(_OWORD *)(v1 + 23112);
    *(_OWORD *)(v1 + 23376) = v80;
    v81 = *(_OWORD *)(v1 + 23032);
    *(_OWORD *)(v1 + 23264) = *(_OWORD *)(v1 + 23016);
    *(_OWORD *)(v1 + 23280) = v81;
    v82 = *(_OWORD *)(v1 + 23064);
    *(_OWORD *)(v1 + 23296) = *(_OWORD *)(v1 + 23048);
    *(_OWORD *)(v1 + 23312) = v82;
    sub_23AA724E8(v1 + 23280, v5 - 184, &qword_2542E7700);
    sub_23ADF1BFC((id *)(v5 - 184));
    sub_23AAA5B2C(v1 + 1936);
    sub_23AA724E8(v5 - 184, v5 - 112, &qword_2542E7700);
    if (*(_QWORD *)(v5 - 112))
    {
      sub_23AEB4600((id *)(v5 - 184));
      if ((v75 & 1) != 0)
        goto LABEL_42;
      goto LABEL_41;
    }
  }
  if ((v75 & 1) != 0)
LABEL_41:
    v53 |= 0x200000uLL;
LABEL_42:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 2184, v1 + 22520, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 22520) == 1)
    goto LABEL_45;
  v83 = *(_OWORD *)(v1 + 22728);
  *(_OWORD *)(v1 + 22960) = *(_OWORD *)(v1 + 22712);
  *(_OWORD *)(v1 + 22976) = v83;
  *(_OWORD *)(v1 + 22992) = *(_OWORD *)(v1 + 22744);
  *(_QWORD *)(v1 + 23008) = *(_QWORD *)(v1 + 22760);
  v84 = *(_OWORD *)(v1 + 22664);
  *(_OWORD *)(v1 + 22896) = *(_OWORD *)(v1 + 22648);
  *(_OWORD *)(v1 + 22912) = v84;
  v85 = *(_OWORD *)(v1 + 22696);
  *(_OWORD *)(v1 + 22928) = *(_OWORD *)(v1 + 22680);
  *(_OWORD *)(v1 + 22944) = v85;
  v86 = *(_OWORD *)(v1 + 22600);
  *(_OWORD *)(v1 + 22832) = *(_OWORD *)(v1 + 22584);
  *(_OWORD *)(v1 + 22848) = v86;
  v87 = *(_OWORD *)(v1 + 22632);
  *(_OWORD *)(v1 + 22864) = *(_OWORD *)(v1 + 22616);
  *(_OWORD *)(v1 + 22880) = v87;
  v88 = *(_OWORD *)(v1 + 22536);
  *(_OWORD *)(v1 + 22768) = *(_OWORD *)(v1 + 22520);
  *(_OWORD *)(v1 + 22784) = v88;
  v89 = *(_OWORD *)(v1 + 22568);
  *(_OWORD *)(v1 + 22800) = *(_OWORD *)(v1 + 22552);
  *(_OWORD *)(v1 + 22816) = v89;
  sub_23AA724E8(v1 + 22792, v5 - 176, &qword_2542E7700);
  sub_23ADF1BFC((id *)(v5 - 176));
  sub_23AAA5B2C(v1 + 2184);
  sub_23AA724E8(v5 - 176, v5 - 120, &qword_2542E7700);
  if (!*(_QWORD *)(v5 - 120))
  {
LABEL_45:
    v90 = 0;
  }
  else
  {
    sub_23AEB4600((id *)(v5 - 176));
    v90 = 1;
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 2432, v1 + 22024, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 22024) == 1)
    goto LABEL_50;
  v91 = *(_OWORD *)(v1 + 22232);
  *(_OWORD *)(v1 + 22464) = *(_OWORD *)(v1 + 22216);
  *(_OWORD *)(v1 + 22480) = v91;
  *(_OWORD *)(v1 + 22496) = *(_OWORD *)(v1 + 22248);
  *(_QWORD *)(v1 + 22512) = *(_QWORD *)(v1 + 22264);
  v92 = *(_OWORD *)(v1 + 22168);
  *(_OWORD *)(v1 + 22400) = *(_OWORD *)(v1 + 22152);
  *(_OWORD *)(v1 + 22416) = v92;
  v93 = *(_OWORD *)(v1 + 22200);
  *(_OWORD *)(v1 + 22432) = *(_OWORD *)(v1 + 22184);
  *(_OWORD *)(v1 + 22448) = v93;
  v94 = *(_OWORD *)(v1 + 22104);
  *(_OWORD *)(v1 + 22336) = *(_OWORD *)(v1 + 22088);
  *(_OWORD *)(v1 + 22352) = v94;
  v95 = *(_OWORD *)(v1 + 22136);
  *(_OWORD *)(v1 + 22368) = *(_OWORD *)(v1 + 22120);
  *(_OWORD *)(v1 + 22384) = v95;
  v96 = *(_OWORD *)(v1 + 22040);
  *(_OWORD *)(v1 + 22272) = *(_OWORD *)(v1 + 22024);
  *(_OWORD *)(v1 + 22288) = v96;
  v97 = *(_OWORD *)(v1 + 22072);
  *(_OWORD *)(v1 + 22304) = *(_OWORD *)(v1 + 22056);
  *(_OWORD *)(v1 + 22320) = v97;
  sub_23AA724E8(v1 + 22296, v5 - 168, &qword_2542E7700);
  sub_23ADF1BFC((id *)(v5 - 168));
  sub_23AAA5B2C(v1 + 2432);
  sub_23AA724E8(v5 - 168, v5 - 128, &qword_2542E7700);
  if (!*(_QWORD *)(v5 - 128))
  {
LABEL_50:
    if ((v90 & 1) == 0)
      goto LABEL_52;
    goto LABEL_51;
  }
  sub_23AEB4600((id *)(v5 - 168));
  if ((v90 & 1) == 0)
LABEL_51:
    v53 |= 0x400000uLL;
LABEL_52:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 2680, v1 + 21776, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 21776) == 1)
  {
    v98 = 2;
  }
  else
  {
    v99 = *(_BYTE *)(v1 + 21808);
    sub_23AAA5B2C(v1 + 2680);
    v98 = v99 & 1;
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 2928, v1 + 21528, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 21528) != 1)
  {
    v100 = *(_BYTE *)(v1 + 21560);
    sub_23AAA5B2C(v1 + 2928);
    if (v98 != 2 && (v100 & 1) == (v98 != 0))
      goto LABEL_61;
    goto LABEL_60;
  }
  if (v98 != 2)
LABEL_60:
    v53 |= 0x1000000uLL;
LABEL_61:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 3176, v1 + 21280, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 21280) == 1)
  {
    v101 = 2;
  }
  else
  {
    v102 = *(_BYTE *)(v1 + 21313);
    sub_23AAA5B2C(v1 + 3176);
    v101 = v102 & 1;
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 3424, v1 + 21032, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 21032) != 1)
  {
    v103 = *(_BYTE *)(v1 + 21065);
    sub_23AAA5B2C(v1 + 3424);
    if (v101 != 2 && (v103 & 1) == (v101 != 0))
      goto LABEL_70;
    goto LABEL_69;
  }
  if (v101 != 2)
LABEL_69:
    v53 |= 0x2000000uLL;
LABEL_70:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 3672, v1 + 20784, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 20784) == 1)
  {
    v104 = 2;
  }
  else
  {
    v105 = *(_BYTE *)(v1 + 20818);
    sub_23AAA5B2C(v1 + 3672);
    v104 = v105 & 1;
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 3920, v1 + 20536, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 20536) != 1)
  {
    v106 = *(_BYTE *)(v1 + 20570);
    sub_23AAA5B2C(v1 + 3920);
    if (v104 != 2 && (v106 & 1) == (v104 != 0))
      goto LABEL_79;
    goto LABEL_78;
  }
  if (v104 != 2)
LABEL_78:
    v53 |= 0x4000000uLL;
LABEL_79:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 4168, v1 + 20288, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 20288) == 1)
  {
    v107 = 0;
    v108 = 0;
  }
  else
  {
    v107 = *(_QWORD *)(v1 + 20328);
    v108 = *(_QWORD *)(v1 + 20336);
    swift_bridgeObjectRetain();
    sub_23AAA5B2C(v1 + 4168);
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 4416, v1 + 20040, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 20040) == 1)
  {
    if (!v108)
      goto LABEL_94;
    goto LABEL_92;
  }
  v109 = *(_QWORD *)(v1 + 20080);
  v110 = *(_QWORD *)(v1 + 20088);
  swift_bridgeObjectRetain();
  sub_23AAA5B2C(v1 + 4416);
  if (!v108)
  {
    if (!v110)
      goto LABEL_94;
    goto LABEL_92;
  }
  if (!v110)
  {
LABEL_92:
    swift_bridgeObjectRelease();
LABEL_93:
    v53 |= 0x8000000uLL;
    goto LABEL_94;
  }
  if (v107 == v109 && v108 == v110)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_94;
  }
  v188 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v188 & 1) == 0)
    goto LABEL_93;
LABEL_94:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 4664, v1 + 19792, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 19792) == 1)
  {
    v111 = 0;
    v112 = 0;
  }
  else
  {
    v111 = *(_QWORD *)(v1 + 19848);
    v112 = *(_QWORD *)(v1 + 19856);
    swift_bridgeObjectRetain();
    sub_23AAA5B2C(v1 + 4664);
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 4912, v1 + 19544, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 19544) == 1)
  {
    if (!v112)
      goto LABEL_109;
    goto LABEL_107;
  }
  v113 = *(_QWORD *)(v1 + 19600);
  v114 = *(_QWORD *)(v1 + 19608);
  swift_bridgeObjectRetain();
  sub_23AAA5B2C(v1 + 4912);
  if (!v112)
  {
    if (!v114)
      goto LABEL_109;
    goto LABEL_107;
  }
  if (!v114)
  {
LABEL_107:
    swift_bridgeObjectRelease();
LABEL_108:
    v53 |= 0x10000000uLL;
    goto LABEL_109;
  }
  if (v111 == v113 && v112 == v114)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_109;
  }
  v189 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v189 & 1) == 0)
    goto LABEL_108;
LABEL_109:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 5160, v1 + 19296, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 19296) == 1)
  {
    v115 = 2;
  }
  else
  {
    v116 = *(_BYTE *)(v1 + 19368);
    sub_23AAA5B2C(v1 + 5160);
    v115 = v116 & 1;
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 5408, v1 + 19048, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 19048) != 1)
  {
    v117 = *(_BYTE *)(v1 + 19120);
    sub_23AAA5B2C(v1 + 5408);
    if (v115 != 2 && (v117 & 1) == (v115 != 0))
      goto LABEL_118;
    goto LABEL_117;
  }
  if (v115 != 2)
LABEL_117:
    v53 |= 0x20000000uLL;
LABEL_118:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 5656, v1 + 18800, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 18800) == 1)
  {
    v118 = 0;
    v119 = 0;
  }
  else
  {
    v118 = *(_QWORD *)(v1 + 18880);
    v119 = *(_QWORD *)(v1 + 18888);
    swift_bridgeObjectRetain();
    sub_23AAA5B2C(v1 + 5656);
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 5904, v1 + 18552, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 18552) == 1)
  {
    if (!v119)
      goto LABEL_133;
    goto LABEL_131;
  }
  v120 = *(_QWORD *)(v1 + 18632);
  v121 = *(_QWORD *)(v1 + 18640);
  swift_bridgeObjectRetain();
  sub_23AAA5B2C(v1 + 5904);
  if (!v119)
  {
    if (!v121)
      goto LABEL_133;
    goto LABEL_131;
  }
  if (!v121)
  {
LABEL_131:
    swift_bridgeObjectRelease();
LABEL_132:
    v53 |= 0x40000000uLL;
    goto LABEL_133;
  }
  if (v118 == v120 && v119 == v121)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_133;
  }
  v190 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v190 & 1) == 0)
    goto LABEL_132;
LABEL_133:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 6152, v1 + 18304, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 18304) == 1)
  {
    v122 = 2;
  }
  else
  {
    v123 = *(_BYTE *)(v1 + 18408);
    sub_23AAA5B2C(v1 + 6152);
    v122 = v123 & 1;
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 6400, v1 + 18056, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 18056) != 1)
  {
    v124 = *(_BYTE *)(v1 + 18160);
    sub_23AAA5B2C(v1 + 6400);
    if (v122 != 2 && (v124 & 1) == (v122 != 0))
      goto LABEL_142;
    goto LABEL_141;
  }
  if (v122 != 2)
LABEL_141:
    v53 |= 0x80000000uLL;
LABEL_142:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 6648, v1 + 17808, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 17808) == 1)
  {
    v125 = 2;
  }
  else
  {
    v126 = *(_BYTE *)(v1 + 17913);
    sub_23AAA5B2C(v1 + 6648);
    v125 = v126 & 1;
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 6896, v1 + 17560, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 17560) != 1)
  {
    v127 = *(_BYTE *)(v1 + 17665);
    sub_23AAA5B2C(v1 + 6896);
    if (v125 != 2 && (v127 & 1) == (v125 != 0))
      goto LABEL_151;
    goto LABEL_150;
  }
  if (v125 != 2)
LABEL_150:
    v53 |= 0x100000000uLL;
LABEL_151:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 7144, v1 + 17312, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 17312) == 1)
  {
    v128 = 0;
    v129 = 0;
  }
  else
  {
    v128 = *(_QWORD *)(v1 + 17424);
    v129 = *(_QWORD *)(v1 + 17432);
    swift_bridgeObjectRetain();
    sub_23AAA5B2C(v1 + 7144);
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 7392, v1 + 17064, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 17064) == 1)
  {
    if (!v129)
      goto LABEL_166;
    goto LABEL_164;
  }
  v130 = *(_QWORD *)(v1 + 17176);
  v131 = *(_QWORD *)(v1 + 17184);
  swift_bridgeObjectRetain();
  sub_23AAA5B2C(v1 + 7392);
  if (!v129)
  {
    if (!v131)
      goto LABEL_166;
    goto LABEL_164;
  }
  if (!v131)
  {
LABEL_164:
    swift_bridgeObjectRelease();
LABEL_165:
    v53 |= 0x200000000uLL;
    goto LABEL_166;
  }
  if (v128 == v130 && v129 == v131)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_166;
  }
  v191 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v191 & 1) == 0)
    goto LABEL_165;
LABEL_166:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 7640, v1 + 16816, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 16816) == 1)
  {
    v132 = 0;
    v133 = 0;
  }
  else
  {
    v132 = *(_QWORD *)(v1 + 16944);
    v133 = *(_QWORD *)(v1 + 16952);
    swift_bridgeObjectRetain();
    sub_23AAA5B2C(v1 + 7640);
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 7888, v1 + 16568, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 16568) == 1)
  {
    if (!v133)
      goto LABEL_181;
    goto LABEL_179;
  }
  v134 = *(_QWORD *)(v1 + 16696);
  v135 = *(_QWORD *)(v1 + 16704);
  swift_bridgeObjectRetain();
  sub_23AAA5B2C(v1 + 7888);
  if (!v133)
  {
    if (!v135)
      goto LABEL_181;
    goto LABEL_179;
  }
  if (!v135)
  {
LABEL_179:
    swift_bridgeObjectRelease();
LABEL_180:
    v53 |= 0x400000000uLL;
    goto LABEL_181;
  }
  if (v132 == v134 && v133 == v135)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_181;
  }
  v192 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v192 & 1) == 0)
    goto LABEL_180;
LABEL_181:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 8136, v1 + 16320, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 16320) == 1)
  {
    v136 = 0;
    v137 = 0;
  }
  else
  {
    v136 = *(_QWORD *)(v1 + 16464);
    v137 = *(_QWORD *)(v1 + 16472);
    swift_bridgeObjectRetain();
    sub_23AAA5B2C(v1 + 8136);
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 8384, v1 + 16072, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 16072) == 1)
  {
    if (!v137)
      goto LABEL_196;
    goto LABEL_194;
  }
  v138 = *(_QWORD *)(v1 + 16216);
  v139 = *(_QWORD *)(v1 + 16224);
  swift_bridgeObjectRetain();
  sub_23AAA5B2C(v1 + 8384);
  if (!v137)
  {
    if (!v139)
      goto LABEL_196;
    goto LABEL_194;
  }
  if (!v139)
  {
LABEL_194:
    swift_bridgeObjectRelease();
LABEL_195:
    v53 |= 0x800000000uLL;
    goto LABEL_196;
  }
  if (v136 == v138 && v137 == v139)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_196;
  }
  v193 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v193 & 1) == 0)
    goto LABEL_195;
LABEL_196:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 8632, v1 + 15824, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 15824) == 1)
  {
    v140 = 0;
    v141 = 0;
  }
  else
  {
    v140 = *(_QWORD *)(v1 + 15984);
    v141 = *(_QWORD *)(v1 + 15992);
    swift_bridgeObjectRetain();
    sub_23AAA5B2C(v1 + 8632);
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 144))(v57, v58);
  sub_23AA724E8(v1 + 8880, v1 + 15576, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 15576) == 1)
  {
    if (!v141)
      goto LABEL_211;
    goto LABEL_209;
  }
  v142 = *(_QWORD *)(v1 + 15736);
  v143 = *(_QWORD *)(v1 + 15744);
  swift_bridgeObjectRetain();
  sub_23AAA5B2C(v1 + 8880);
  if (!v141)
  {
    if (!v143)
    {
LABEL_211:
      v148 = v58;
      goto LABEL_212;
    }
    goto LABEL_209;
  }
  if (!v143)
  {
LABEL_209:
    v148 = v58;
    swift_bridgeObjectRelease();
LABEL_210:
    v53 |= 0x1000000000uLL;
    goto LABEL_212;
  }
  swift_bridgeObjectRetain();
  v144 = sub_23AB55DFC(v140, v141);
  v146 = v145;
  if (v144 == sub_23AB55DFC(v142, v143) && v146 == v147)
  {
    v148 = v58;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_212;
  }
  v148 = v58;
  v194 = sub_23B1C7388();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v194 & 1) == 0)
    goto LABEL_210;
LABEL_212:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 9128, v1 + 15328, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 15328) == 1)
  {
    v149 = 2;
  }
  else
  {
    v150 = *(_BYTE *)(v1 + 15504);
    sub_23AAA5B2C(v1 + 9128);
    v149 = v150 & 1;
  }
  (*(void (**)(_QWORD, uint64_t))(v1 + 144))(*(_QWORD *)(v1 + 128), v148);
  sub_23AA724E8(v1 + 9376, v1 + 15080, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 15080) != 1)
  {
    v151 = *(_BYTE *)(v1 + 15256);
    sub_23AAA5B2C(v1 + 9376);
    if (v149 != 2 && (v151 & 1) == (v149 != 0))
      goto LABEL_221;
    goto LABEL_220;
  }
  if (v149 != 2)
LABEL_220:
    v53 |= 0x2000000000uLL;
LABEL_221:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 9624, v1 + 14832, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 14832) == 1)
  {
    v152 = 0;
  }
  else
  {
    v152 = *(_QWORD **)(v1 + 15016);
    swift_bridgeObjectRetain();
    sub_23AAA5B2C(v1 + 9624);
  }
  (*(void (**)(_QWORD, uint64_t))(v1 + 144))(*(_QWORD *)(v1 + 128), v148);
  sub_23AA724E8(v1 + 9872, v1 + 14584, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 14584) == 1)
  {
    if (!v152)
      goto LABEL_235;
    goto LABEL_233;
  }
  v153 = *(_QWORD **)(v1 + 14768);
  swift_bridgeObjectRetain();
  sub_23AAA5B2C(v1 + 9872);
  if (!v152)
  {
    if (!v153)
      goto LABEL_235;
    goto LABEL_233;
  }
  if (!v153)
  {
LABEL_233:
    swift_bridgeObjectRelease();
    goto LABEL_234;
  }
  v154 = sub_23AF1B25C(v152, v153);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v154 & 1) == 0)
LABEL_234:
    v53 |= 0x4000000000uLL;
LABEL_235:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 10120, v1 + 14336, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 14336) == 1)
  {
    v155 = 0;
    v156 = 0;
  }
  else
  {
    v155 = *(_QWORD **)(v1 + 14528);
    v156 = *(_QWORD **)(v1 + 14536);
    sub_23AA8831C((uint64_t)v155);
    sub_23AAA5B2C(v1 + 10120);
  }
  (*(void (**)(_QWORD, uint64_t))(v1 + 144))(*(_QWORD *)(v1 + 128), v148);
  sub_23AA724E8(v1 + 10368, v1 + 14088, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 14088) == 1)
  {
    if (!v155)
      goto LABEL_251;
    goto LABEL_246;
  }
  v157 = *(_QWORD **)(v1 + 14280);
  v158 = *(_QWORD **)(v1 + 14288);
  sub_23AA8831C((uint64_t)v157);
  sub_23AAA5B2C(v1 + 10368);
  if (!v155)
  {
    if (!v157)
      goto LABEL_251;
    sub_23AAA5C9C((uint64_t)v157);
    goto LABEL_248;
  }
  if (!v157)
  {
LABEL_246:
    swift_bridgeObjectRelease();
LABEL_247:
    swift_bridgeObjectRelease();
    goto LABEL_248;
  }
  if ((sub_23AF1B25C(v155, v157) & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23AAA5C9C((uint64_t)v155);
    swift_bridgeObjectRelease();
    goto LABEL_247;
  }
  v159 = sub_23AF1B25C(v156, v158);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23AAA5C9C((uint64_t)v155);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v159 & 1) == 0)
LABEL_248:
    v53 |= 0x8000000000uLL;
LABEL_251:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 10616, v1 + 13840, &qword_2542E5050);
  v160 = sub_23AAFCF2C(v1 + 13840);
  if (v160 == 1)
  {
    v161 = 0;
  }
  else
  {
    v161 = *(_QWORD *)(v1 + 14048);
    sub_23AAA5B2C(v1 + 10616);
  }
  (*(void (**)(_QWORD, uint64_t))(v1 + 144))(*(_QWORD *)(v1 + 128), v148);
  sub_23AA724E8(v1 + 10864, v1 + 13592, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 13592) == 1)
  {
    if (v160 == 1)
      goto LABEL_260;
    goto LABEL_259;
  }
  v162 = *(_QWORD *)(v1 + 13800);
  sub_23AAA5B2C(v1 + 10864);
  if (v160 == 1 || !sub_23AC37674(v161, v162))
LABEL_259:
    v53 |= 0x2000000000000uLL;
LABEL_260:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 11112, v1 + 13096, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 13096) == 1)
    goto LABEL_263;
  v163 = *(_OWORD *)(v1 + 13304);
  *(_OWORD *)(v1 + 13536) = *(_OWORD *)(v1 + 13288);
  *(_OWORD *)(v1 + 13552) = v163;
  *(_OWORD *)(v1 + 13568) = *(_OWORD *)(v1 + 13320);
  *(_QWORD *)(v1 + 13584) = *(_QWORD *)(v1 + 13336);
  v164 = *(_OWORD *)(v1 + 13240);
  *(_OWORD *)(v1 + 13472) = *(_OWORD *)(v1 + 13224);
  *(_OWORD *)(v1 + 13488) = v164;
  v165 = *(_OWORD *)(v1 + 13272);
  *(_OWORD *)(v1 + 13504) = *(_OWORD *)(v1 + 13256);
  *(_OWORD *)(v1 + 13520) = v165;
  v166 = *(_OWORD *)(v1 + 13176);
  *(_OWORD *)(v1 + 13408) = *(_OWORD *)(v1 + 13160);
  *(_OWORD *)(v1 + 13424) = v166;
  v167 = *(_OWORD *)(v1 + 13208);
  *(_OWORD *)(v1 + 13440) = *(_OWORD *)(v1 + 13192);
  *(_OWORD *)(v1 + 13456) = v167;
  v168 = *(_OWORD *)(v1 + 13112);
  *(_OWORD *)(v1 + 13344) = *(_OWORD *)(v1 + 13096);
  *(_OWORD *)(v1 + 13360) = v168;
  v169 = *(_OWORD *)(v1 + 13144);
  *(_OWORD *)(v1 + 13376) = *(_OWORD *)(v1 + 13128);
  *(_OWORD *)(v1 + 13392) = v169;
  sub_23AA724E8(v1 + 13568, v5 - 160, &qword_2542E76C0);
  sub_23AAB7528(v5 - 160);
  sub_23AAA5B2C(v1 + 11112);
  sub_23AA724E8(v5 - 160, v5 - 136, &qword_2542E76C0);
  v170 = *(_QWORD *)(v5 - 136);
  if (!v170)
  {
LABEL_263:
    v171 = 0;
  }
  else
  {
    v171 = sub_23AF21B84(v170);
    sub_23AAB7500(v5 - 160);
  }
  (*(void (**)(_QWORD, uint64_t))(v1 + 144))(*(_QWORD *)(v1 + 128), v148);
  sub_23AA724E8(v1 + 11360, v1 + 12600, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 12600) != 1)
  {
    v172 = *(_OWORD *)(v1 + 12808);
    *(_OWORD *)(v1 + 13040) = *(_OWORD *)(v1 + 12792);
    *(_OWORD *)(v1 + 13056) = v172;
    *(_OWORD *)(v1 + 13072) = *(_OWORD *)(v1 + 12824);
    *(_QWORD *)(v1 + 13088) = *(_QWORD *)(v1 + 12840);
    v173 = *(_OWORD *)(v1 + 12744);
    *(_OWORD *)(v1 + 12976) = *(_OWORD *)(v1 + 12728);
    *(_OWORD *)(v1 + 12992) = v173;
    v174 = *(_OWORD *)(v1 + 12776);
    *(_OWORD *)(v1 + 13008) = *(_OWORD *)(v1 + 12760);
    *(_OWORD *)(v1 + 13024) = v174;
    v175 = *(_OWORD *)(v1 + 12680);
    *(_OWORD *)(v1 + 12912) = *(_OWORD *)(v1 + 12664);
    *(_OWORD *)(v1 + 12928) = v175;
    v176 = *(_OWORD *)(v1 + 12712);
    *(_OWORD *)(v1 + 12944) = *(_OWORD *)(v1 + 12696);
    *(_OWORD *)(v1 + 12960) = v176;
    v177 = *(_OWORD *)(v1 + 12616);
    *(_OWORD *)(v1 + 12848) = *(_OWORD *)(v1 + 12600);
    *(_OWORD *)(v1 + 12864) = v177;
    v178 = *(_OWORD *)(v1 + 12648);
    *(_OWORD *)(v1 + 12880) = *(_OWORD *)(v1 + 12632);
    *(_OWORD *)(v1 + 12896) = v178;
    sub_23AA724E8(v1 + 13072, v5 - 152, &qword_2542E76C0);
    sub_23AAB7528(v5 - 152);
    sub_23AAA5B2C(v1 + 11360);
    sub_23AA724E8(v5 - 152, v5 - 144, &qword_2542E76C0);
    v179 = *(_QWORD *)(v5 - 144);
    if (v179)
    {
      v180 = sub_23AF21B84(v179);
      sub_23AAB7500(v5 - 152);
      if (!v171)
        goto LABEL_267;
LABEL_270:
      if (v180)
      {
        v181 = swift_bridgeObjectRetain();
        v182 = sub_23AF1BAE4(v181, v180);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        if ((v182 & 1) != 0)
          goto LABEL_275;
        goto LABEL_274;
      }
LABEL_273:
      swift_bridgeObjectRelease();
LABEL_274:
      v53 |= 0x4000000000000uLL;
      goto LABEL_275;
    }
  }
  v180 = 0;
  if (v171)
    goto LABEL_270;
LABEL_267:
  if (v180)
    goto LABEL_273;
LABEL_275:
  v60(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  sub_23AA724E8(v1 + 11608, v1 + 12352, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 12352) == 1)
  {
    v183 = 0;
    v184 = 0;
  }
  else
  {
    v183 = *(_QWORD *)(v1 + 12584);
    v184 = *(_QWORD *)(v1 + 12592);
    swift_bridgeObjectRetain();
    sub_23AAA5B2C(v1 + 11608);
  }
  (*(void (**)(_QWORD, uint64_t))(v1 + 144))(*(_QWORD *)(v1 + 128), v148);
  sub_23AA724E8(v1 + 11856, v1 + 12104, &qword_2542E5050);
  if (sub_23AAFCF2C(v1 + 12104) == 1)
  {
    if (!v184)
      return v53;
    goto LABEL_288;
  }
  v185 = *(_QWORD *)(v1 + 12336);
  v186 = *(_QWORD *)(v1 + 12344);
  swift_bridgeObjectRetain();
  sub_23AAA5B2C(v1 + 11856);
  if (!v184)
  {
    if (!v186)
      return v53;
LABEL_288:
    swift_bridgeObjectRelease();
    return v53 | 0x8000000000000;
  }
  if (!v186)
    goto LABEL_288;
  if (v183 != v185 || v184 != v186)
  {
    v195 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v195 & 1) != 0)
      return v53;
    return v53 | 0x8000000000000;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v53;
}

uint64_t type metadata accessor for TrackingContinuation()
{
  return objc_opt_self();
}

uint64_t *initializeBufferWithCopyOfBuffer for Syncability(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_23AA7F2D4(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for Syncability(uint64_t a1)
{
  return sub_23AAA12F0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for Syncability(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_23AA7F2D4(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_23AAA12F0(v5, v6);
  return a1;
}

uint64_t *assignWithTake for Syncability(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23AAA12F0(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Syncability(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_DWORD *)(a1 + 4);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for Syncability(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (unint64_t)-a2 << 32;
      *(_QWORD *)(result + 8) = 0;
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_23AF24914(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_23AF24930(uint64_t result)
{
  *(_QWORD *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *sub_23AF24940(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  if (a2 < 2)
  {
    v2 = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
    *result = *(unsigned int *)result;
    result[1] = v2;
  }
  else
  {
    *result = (a2 - 2);
    result[1] = 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for Syncability()
{
  return &type metadata for Syncability;
}

void sub_23AF24984(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id v7;

  v5 = a1;
  if (a1)
  {
    sub_23AA9F52C(0, &qword_2542E7560);
    v5 = (void *)sub_23B1C66F8();
  }
  if (a2)
    v6 = sub_23B1C5870();
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v5);

}

void sub_23AF24A18(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  void (*v10)(uint64_t, void *, void *, void *, void *);
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v10 = *(void (**)(uint64_t, void *, void *, void *, void *))(a1 + 32);
  sub_23AA9F52C(0, &qword_2542E7560);
  v11 = sub_23B1C6704();
  swift_retain();
  v15 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  v10(v11, a3, a4, a5, a6);
  swift_release();
  swift_bridgeObjectRelease();

}

void sub_23AF24AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  void (*v11)(uint64_t, uint64_t, uint64_t, void *, void *, void *);
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;

  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, void *, void *, void *))(a1 + 32);
  sub_23AA9F52C(0, &qword_2542E7560);
  v12 = sub_23B1C6704();
  sub_23AA9F52C(0, (unint64_t *)&unk_2542E2010);
  v13 = sub_23B1C6704();
  swift_retain();
  v16 = a5;
  v14 = a6;
  v15 = a7;
  v11(v12, v13, a4, a5, a6, a7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

id sub_23AF24C0C()
{
  void *v0;
  objc_super v2;

  sub_23AF24D94();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FPFSSearchEnumerator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_23AF24D50()
{
  return type metadata accessor for FPFSSearchEnumerator();
}

uint64_t type metadata accessor for FPFSSearchEnumerator()
{
  uint64_t result;

  result = qword_2569E7398;
  if (!qword_2569E7398)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23AF24D94()
{
  void *v0;
  char *v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;

  v1 = v0;
  if ((sub_23B0D9DF8(v1, (unsigned __int8 *)v1) & 1) == 0)
  {
    v2 = *(void (**)(uint64_t))&v1[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_keepAlive];
    if (v2)
    {
      v3 = swift_retain();
      v2(v3);
      sub_23AAB7948((uint64_t)v2);
    }
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_extensionEnumerator], sel_invalidate);
    v4 = &v1[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_backend];
    v5 = MEMORY[0x23B8615C4](&v1[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_backend]);
    if (v5)
    {
      v6 = (void *)v5;
      v7 = (void *)MEMORY[0x23B8615C4](v5 + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);

      if (v7)
      {
        v8 = objc_msgSend(v7, sel_session);

        objc_msgSend(v8, sel_asyncUnregisterLifetimeExtensionForObject_, *(_QWORD *)&v1[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_lifetimeExtender]);
        swift_unknownObjectRelease();
      }
    }
    v9 = MEMORY[0x23B8615C4](v4);
    if (v9)
    {
      v10 = (void *)v9;
      v11 = (void *)MEMORY[0x23B8615C4](v9 + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
      if (v11)
      {
        v12 = v11;
        v15 = objc_msgSend(v11, sel_log);

      }
      else
      {
        v15 = 0;
      }
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 16) = v10;
      *(_QWORD *)(v13 + 24) = v1;
      v14 = v10;
      sub_23AA814FC(v15, (uint64_t)"enumeratorHasBeenInvalidated(_:)", 32, 2, (uint64_t)sub_23AB3CCD0, v13);

      swift_release();
    }
  }
}

uint64_t sub_23AF24FF8(unint64_t a1, void *a2, void *a3, uint64_t a4, id a5, int a6, void *a7, void *a8, uint64_t (*a9)(unint64_t, void *, void *, uint64_t, id), uint64_t a10)
{
  void *v14;
  unint64_t v15;
  uint64_t (*v16)(unint64_t, void *, void *, uint64_t, id);
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  _QWORD *v46;
  id v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void *v60;
  uint64_t v61;
  NSObject *type;
  NSObject *log;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v70;
  id v71;
  uint64_t v72;

  v14 = a3;
  v15 = a1;
  v16 = a9;
  if (a5)
  {
    v17 = a5;
    v18 = a7;
    v19 = a8;
    v20 = a5;
    v21 = v18;
    v22 = v19;
    v23 = a5;
    v24 = sub_23B1C5E40();
    v25 = sub_23B1C6AA0();
    if (os_log_type_enabled(v24, v25))
    {
      v65 = a4;
      v26 = swift_slowAlloc();
      log = v24;
      v27 = (_QWORD *)swift_slowAlloc();
      v64 = swift_slowAlloc();
      v72 = v64;
      *(_DWORD *)v26 = 138412802;
      v28 = v21;
      sub_23B1C6CBC();
      *v27 = v21;

      *(_WORD *)(v26 + 12) = 2080;
      v29 = sub_23AFEE24C();
      sub_23AABEC68(v29, v30, &v72);
      sub_23B1C6CBC();

      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 22) = 2112;
      swift_getErrorValue();
      v71 = sub_23B0D9CF0(v70);
      sub_23B1C6CBC();
      v27[1] = v71;

      _os_log_impl(&dword_23AA66000, log, v25, "📖  %@: enumerating page %s failed: %@", (uint8_t *)v26, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v27, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v64, -1, -1);
      v31 = v26;
      a4 = v65;
      MEMORY[0x23B8614BC](v31, -1, -1);

    }
    else
    {

    }
    v15 = a1;
    v14 = a3;
    v32 = a2;
    v33 = a5;
  }
  else
  {
    v35 = a3;
    v36 = a7;
    v37 = a8;
    swift_bridgeObjectRetain_n();
    v38 = a2;
    v39 = v35;
    v40 = v36;
    v41 = v37;
    v42 = v38;
    v43 = sub_23B1C5E40();
    v44 = sub_23B1C6A94();
    if (os_log_type_enabled(v43, v44))
    {
      v60 = v39;
      type = v43;
      v66 = a4;
      v45 = swift_slowAlloc();
      v46 = (_QWORD *)swift_slowAlloc();
      v61 = swift_slowAlloc();
      v72 = v61;
      *(_DWORD *)v45 = 138413314;
      v47 = v40;
      sub_23B1C6CBC();
      *v46 = v40;

      *(_WORD *)(v45 + 12) = 2080;
      v48 = sub_23AFEE24C();
      sub_23AABEC68(v48, v49, &v72);
      sub_23B1C6CBC();

      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 22) = 2048;
      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        sub_23B1C7088();
        swift_bridgeObjectRelease();
      }
      v50 = 0x3E6C696E3CLL;
      swift_bridgeObjectRelease();
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 32) = 2080;
      if (a2)
      {
        v51 = sub_23AFEE24C();
        v53 = v52;
      }
      else
      {
        v53 = 0xE500000000000000;
        v51 = 0x3E6C696E3CLL;
      }
      sub_23AABEC68(v51, v53, &v72);
      sub_23B1C6CBC();

      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 42) = 2080;
      if (v14)
      {
        v54 = sub_23B1C5AD4();
        v56 = v55;
        v50 = sub_23B1C5A44();
        v58 = v57;
        sub_23AAAE53C(v54, v56);
      }
      else
      {
        v58 = 0xE500000000000000;
      }
      v32 = a2;
      sub_23AABEC68(v50, v58, &v72);
      sub_23B1C6CBC();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23AA66000, type, v44, "📖  %@: enumerating page %s done: %ld items next %s anchor:%s", (uint8_t *)v45, 0x34u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v46, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v61, -1, -1);
      MEMORY[0x23B8614BC](v45, -1, -1);

      v16 = a9;
      a4 = v66;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v32 = a2;
      v16 = a9;
    }
    v33 = 0;
  }
  return v16(v15, v32, v14, a4, v33);
}

uint64_t sub_23AF2568C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  sub_23AF25960(a1);
  return a7(a1, a2, a3, a4, a5);
}

uint64_t sub_23AF25960(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;

  v3 = (void *)MEMORY[0x23B8615C4](v1 + OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_backend);
  if (v3)
  {
    v4 = v3;
    if (objc_sync_enter(v4))
      sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)v4);
    v5 = *(char **)&v4[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend___fpfs];
    swift_retain();
    if (objc_sync_exit(v4))
      sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)v4);

    if (v5)
    {

LABEL_7:
      MEMORY[0x24BDAC7A8](v7);
      v14 = v5;
      v15 = a1;
      swift_retain();
      sub_23B08B720((uint64_t)"decorateItems(items:)", 21, 2, (uint64_t)sub_23AF2685C, (uint64_t)&v13, v8);
      swift_release();
      return swift_release();
    }
    MEMORY[0x24BDAC7A8](v6);
    v14 = v4;
    __swift_instantiateConcreteTypeFromMangledName(qword_2542E09E8);
    sub_23B1C6B48();

    v5 = v17;
    if (v17)
      goto LABEL_7;
  }
  v10 = sub_23B1C5E40();
  v11 = sub_23B1C6AA0();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_23AA66000, v10, v11, "backend or FPFS is invalidated, returning error", v12, 2u);
    MEMORY[0x23B8614BC](v12, -1, -1);
  }

  type metadata accessor for NSFileProviderError(0);
  v16 = -1002;
  sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
  sub_23AA7E38C((unint64_t *)&unk_2542E1E60, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderError, (uint64_t)&unk_23B1CC9C0);
  sub_23B1C5864();
  return swift_willThrow();
}

uint64_t sub_23AF25C00(unint64_t a1, unint64_t a2, char a3, void *a4, uint64_t a5, id a6, int a7, void *a8, uint64_t a9, unint64_t a10, uint64_t (*a11)(unint64_t, unint64_t, _QWORD, void *, uint64_t, id), uint64_t a12)
{
  id v13;
  unint64_t v15;
  uint64_t (*v17)(unint64_t, unint64_t, _QWORD, void *, uint64_t, id);
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v32;
  id v33;
  id v34;
  NSObject *v35;
  NSObject *v36;
  uint64_t v37;
  _QWORD *v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  NSObject *loga;
  os_log_t log;
  uint64_t v59;
  os_log_type_t v60;
  void *v61;
  void *v65;
  uint64_t v68;
  id v69;
  uint64_t v70[2];

  v13 = a6;
  v15 = a2;
  v17 = a11;
  if (a6)
  {
    v18 = a6;
    v19 = a8;
    sub_23AAAE668(a9, a10);
    v20 = v13;
    v21 = v19;
    sub_23AAAE668(a9, a10);
    v22 = v13;
    v23 = sub_23B1C5E40();
    v24 = sub_23B1C6AA0();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc();
      v26 = (_QWORD *)swift_slowAlloc();
      v59 = swift_slowAlloc();
      v70[0] = v59;
      *(_DWORD *)v25 = 138412802;
      loga = v23;
      v61 = v13;
      v27 = v21;
      sub_23B1C6CBC();
      *v26 = v21;

      *(_WORD *)(v25 + 12) = 2080;
      sub_23AAAE668(a9, a10);
      v28 = sub_23B1C5A44();
      v30 = v29;
      sub_23AAAE53C(a9, a10);
      sub_23AABEC68(v28, v30, v70);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      sub_23AAAE53C(a9, a10);
      sub_23AAAE53C(a9, a10);
      *(_WORD *)(v25 + 22) = 2112;
      swift_getErrorValue();
      v69 = sub_23B0D9CF0(v68);
      sub_23B1C6CBC();
      v26[1] = v69;

      _os_log_impl(&dword_23AA66000, loga, v24, "📖  %@: enumerating from change %s failed: %@", (uint8_t *)v25, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v26, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v59, -1, -1);
      MEMORY[0x23B8614BC](v25, -1, -1);

      return a11(a1, a2, a3 & 1, a4, a5, v61);
    }

    sub_23AAAE53C(a9, a10);
    sub_23AAAE53C(a9, a10);

    v52 = a1;
    v17 = a11;
    v15 = a2;
    v43 = a3;
    v53 = a4;
  }
  else
  {
    v32 = a8;
    sub_23AAAE668(a9, a10);
    v33 = a4;
    v34 = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23AAAE668(a9, a10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35 = v33;
    v36 = sub_23B1C5E40();
    v60 = sub_23B1C6A94();
    if (os_log_type_enabled(v36, v60))
    {
      v56 = v36;
      log = v35;
      v65 = a4;
      v37 = swift_slowAlloc();
      v38 = (_QWORD *)swift_slowAlloc();
      v55 = swift_slowAlloc();
      v70[0] = v55;
      *(_DWORD *)v37 = 138413570;
      v39 = v34;
      sub_23B1C6CBC();
      *v38 = v34;

      *(_WORD *)(v37 + 12) = 2080;
      sub_23AAAE668(a9, a10);
      v40 = sub_23B1C5A44();
      v42 = v41;
      sub_23AAAE53C(a9, a10);
      sub_23AABEC68(v40, v42, v70);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      sub_23AAAE53C(a9, a10);
      sub_23AAAE53C(a9, a10);
      *(_WORD *)(v37 + 22) = 2048;
      if (a1 >> 62)
      {
        swift_bridgeObjectRetain();
        sub_23B1C7088();
        swift_bridgeObjectRelease();
      }
      v43 = a3;
      swift_bridgeObjectRelease();
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 32) = 2048;
      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        sub_23B1C7088();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 42) = 2080;
      if ((a3 & 1) != 0)
        v44 = 0x6F6D20736168202CLL;
      else
        v44 = 0;
      if ((a3 & 1) != 0)
        v45 = 0xEA00000000006572;
      else
        v45 = 0xE000000000000000;
      sub_23AABEC68(v44, v45, v70);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v37 + 52) = 2080;
      if (v65)
      {
        v46 = sub_23B1C5AD4();
        v48 = v47;
        v49 = sub_23B1C5A44();
        v51 = v50;
        sub_23AAAE53C(v46, v48);
      }
      else
      {
        v51 = 0xE500000000000000;
        v49 = 0x3E6C696E3CLL;
      }
      v17 = a11;
      sub_23AABEC68(v49, v51, v70);
      sub_23B1C6CBC();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23AA66000, v56, v60, "📖  %@: enumerating from change %s done: %ld updated, %ld deleted%s, next anchor:%s", (uint8_t *)v37, 0x3Eu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v38, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v55, -1, -1);
      MEMORY[0x23B8614BC](v37, -1, -1);

      v13 = 0;
      v54 = a5;
      v53 = v65;
      v52 = a1;
      return v17(v52, v15, v43 & 1, v53, v54, v13);
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23AAAE53C(a9, a10);
    sub_23AAAE53C(a9, a10);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v43 = a3;
    v52 = a1;
    v53 = a4;
  }
  v54 = a5;
  return v17(v52, v15, v43 & 1, v53, v54, v13);
}

uint64_t sub_23AF263D4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))
{
  sub_23AF25960(a1);
  return a8(a1, a2, a3 & 1, a4, a5, a6);
}

unint64_t sub_23AF2661C()
{
  uint64_t v0;

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_lifetimeExtender), sel_requestEffectivePID);
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0xD00000000000001ELL;
}

uint64_t sub_23AF26700()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B1C5E4C();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_23AF267AC()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_23AF267BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_23B1C63E0();
  v2 = v1;
  if (v0 == sub_23B1C63E0() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_23AF26844@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_23AC4D64C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_23AF2685C()
{
  uint64_t v0;

  return sub_23AABDF04(*(_QWORD *)(v0 + 24), 0);
}

double sub_23AF26884(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 448) = 1;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_QWORD *)(a1 + 840) = 0;
  return result;
}

uint64_t sub_23AF26904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1498);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AF2694C(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v15 = *(_OWORD *)(a1 + 416);
  v16 = *(_OWORD *)(a1 + 432);
  v13 = *(_OWORD *)(a1 + 384);
  v14 = *(_OWORD *)(a1 + 400);
  v11 = *(_OWORD *)(a1 + 352);
  v12 = *(_OWORD *)(a1 + 368);
  v9 = *(_OWORD *)(a1 + 320);
  v10 = *(_OWORD *)(a1 + 336);
  v8 = *(_OWORD *)(a1 + 304);
  v7 = *(_OWORD *)(a1 + 288);
  v6 = *(_OWORD *)(a1 + 272);
  v5 = *(_OWORD *)(a1 + 256);
  v4 = *(_OWORD *)(a1 + 240);
  v3 = *(_OWORD *)(a1 + 224);
  sub_23AA86974(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(void **)(a1 + 144),
    *(void **)(a1 + 152),
    *(_OWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    (void *)v3,
    *((uint64_t *)&v3 + 1),
    (void *)v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((void **)&v10 + 1),
    (void *)v11,
    SBYTE8(v11),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((void **)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    *(_QWORD *)(a1 + 448));
  return a1;
}

uint64_t sub_23AF26B20()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_23AF26B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  _BYTE *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  objc_class *v22;
  uint64_t v24;
  void *v25;
  objc_super v26;

  v25 = a5;
  v10 = sub_23B1C5E4C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  v14 = &v5[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_keepAlive];
  *v14 = 0;
  v14[1] = 0;
  v5[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_invalidated] = 0;
  v15 = OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_changedItemsByID;
  *(_QWORD *)&v5[v15] = sub_23AAB786C(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)&v5[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_deletedItemsIDs] = MEMORY[0x24BEE4B08];
  swift_unknownObjectWeakAssign();
  *(_QWORD *)&v5[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_extensionEnumerator] = a4;
  v16 = (void *)MEMORY[0x23B8615C4](a3 + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  v17 = v5;
  swift_unknownObjectRetain();
  if (!v16 || (v18 = objc_msgSend(v16, sel_log), v16, !v18))
    v19 = (id)fp_default_log();
  sub_23B1C5E58();
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v17[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_logger], v13, v10);
  *(_QWORD *)&v17[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_observer] = a2;
  *(_QWORD *)&v17[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_lifetimeExtender] = a1;
  v20 = v25;
  *(_QWORD *)&v17[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_searchIdentifier] = v25;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v21 = v20;

  v22 = (objc_class *)type metadata accessor for FPFSSearchEnumerator();
  v26.receiver = v17;
  v26.super_class = v22;
  return objc_msgSendSuper2(&v26, sel_init);
}

void sub_23AF26D2C(void *a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  id aBlock[7];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  _Block_copy(a2);
  v5 = a1;
  if (objc_sync_enter(v5))
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)v5);
  v6 = v5[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_invalidated];
  if (objc_sync_exit(v5))
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)v5);

  if ((v6 & 1) != 0 || (v7 = MEMORY[0x23B8615C4](&v5[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_backend])) == 0)
  {
    type metadata accessor for NSFileProviderError(0);
    aBlock[6] = (id)-1002;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&unk_2542E1E60, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderError, (uint64_t)&unk_23B1CC9C0);
    sub_23B1C5864();
    v12 = (void *)sub_23B1C5870();
    ((void (**)(_QWORD, _QWORD, void *))a2)[2](a2, 0, v12);
    swift_release();

  }
  else
  {
    v8 = (void *)v7;
    v9 = *(void **)&v5[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_extensionEnumerator];
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = sub_23AB3D88C;
    v10[3] = v4;
    aBlock[4] = sub_23AA698DC;
    aBlock[5] = v10;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AAB5F54;
    aBlock[3] = &block_descriptor_34_0;
    v11 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    objc_msgSend(v9, sel_currentSyncAnchorWithCompletion_, v11);
    _Block_release(v11);
    swift_release();

    swift_unknownObjectRelease();
  }
}

void sub_23AF26F60(unint64_t a1, void *a2, void *a3, uint64_t a4, id a5, int a6, void *a7, void *a8, uint64_t a9)
{
  void *v13;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  _QWORD *v44;
  id v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  _QWORD *v61;
  os_log_type_t v62;
  uint64_t v63;
  NSObject *log;
  NSObject *type;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v71;
  id v72;
  uint64_t v73;

  v13 = a3;
  v16 = a9;
  if (a5)
  {
    v17 = a5;
    v18 = a5;
    v19 = a7;
    v20 = a8;
    v21 = a5;
    v22 = v19;
    v23 = v20;
    v24 = sub_23B1C5E40();
    v25 = sub_23B1C6AA0();
    if (os_log_type_enabled(v24, v25))
    {
      v67 = a2;
      v26 = swift_slowAlloc();
      v69 = v13;
      v27 = (_QWORD *)swift_slowAlloc();
      v66 = swift_slowAlloc();
      v73 = v66;
      *(_DWORD *)v26 = 138412802;
      log = v24;
      v28 = v22;
      sub_23B1C6CBC();
      *v27 = v22;

      *(_WORD *)(v26 + 12) = 2080;
      v29 = sub_23AFEE24C();
      sub_23AABEC68(v29, v30, &v73);
      sub_23B1C6CBC();

      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 22) = 2112;
      swift_getErrorValue();
      v72 = sub_23B0D9CF0(v71);
      sub_23B1C6CBC();
      v27[1] = v72;

      _os_log_impl(&dword_23AA66000, log, v25, "📖  %@: enumerating page %s failed: %@", (uint8_t *)v26, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      v31 = v27;
      v13 = v69;
      MEMORY[0x23B8614BC](v31, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v66, -1, -1);
      v32 = v26;
      a2 = v67;
      MEMORY[0x23B8614BC](v32, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v33 = a3;
    v34 = a7;
    v35 = a8;
    swift_bridgeObjectRetain_n();
    v36 = a2;
    v37 = v33;
    v38 = v34;
    v39 = v35;
    v40 = v36;
    v41 = sub_23B1C5E40();
    v42 = sub_23B1C6A94();
    if (os_log_type_enabled(v41, v42))
    {
      v60 = v40;
      v62 = v42;
      type = v41;
      v68 = a2;
      v43 = swift_slowAlloc();
      v44 = (_QWORD *)swift_slowAlloc();
      v63 = swift_slowAlloc();
      v73 = v63;
      *(_DWORD *)v43 = 138413314;
      v45 = v38;
      sub_23B1C6CBC();
      v61 = v44;
      *v44 = v38;

      *(_WORD *)(v43 + 12) = 2080;
      v46 = sub_23AFEE24C();
      sub_23AABEC68(v46, v47, &v73);
      sub_23B1C6CBC();

      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 22) = 2048;
      if (a1 >> 62)
      {
        swift_bridgeObjectRetain();
        sub_23B1C7088();
        swift_bridgeObjectRelease();
      }
      v48 = 0x3E6C696E3CLL;
      swift_bridgeObjectRelease();
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 32) = 2080;
      if (v68)
      {
        v49 = sub_23AFEE24C();
        v51 = v50;
      }
      else
      {
        v51 = 0xE500000000000000;
        v49 = 0x3E6C696E3CLL;
      }
      sub_23AABEC68(v49, v51, &v73);
      sub_23B1C6CBC();

      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 42) = 2080;
      v13 = a3;
      if (a3)
      {
        v52 = sub_23B1C5AD4();
        v54 = v53;
        v48 = sub_23B1C5A44();
        v56 = v55;
        v57 = v54;
        v13 = a3;
        sub_23AAAE53C(v52, v57);
      }
      else
      {
        v56 = 0xE500000000000000;
      }
      sub_23AABEC68(v48, v56, &v73);
      sub_23B1C6CBC();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23AA66000, type, v62, "📖  %@: enumerating page %s done: %ld items next %s anchor:%s", (uint8_t *)v43, 0x34u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v61, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v63, -1, -1);
      MEMORY[0x23B8614BC](v43, -1, -1);

      a2 = v68;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v13 = a3;
    }
    v16 = a9;
  }
  sub_23AA9F52C(0, &qword_2542E7560);
  v58 = (void *)sub_23B1C66F8();
  if (a5)
    v59 = (void *)sub_23B1C5870();
  else
    v59 = 0;
  (*(void (**)(uint64_t, void *, void *, void *, uint64_t, void *))(v16 + 16))(v16, v58, a2, v13, a4, v59);

}

uint64_t sub_23AF2764C(void *a1, uint64_t a2, char *a3, const void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  char *v17;
  id v18;
  char *v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  os_log_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void (**v39)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v40)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v41;
  id v42;
  char v43;
  uint64_t v44;
  void *v45;
  void (*v46)(char *, uint64_t);
  void *v47;
  _QWORD *v48;
  void *v49;
  char *v50;
  unint64_t v51;
  void *v52;
  const void *v53;
  unint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  _QWORD *v58;
  os_log_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  const void *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t aBlock[6];
  uint64_t v71;

  v63 = a2;
  v7 = sub_23B1C5E4C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v66 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v65 = (char *)&v58 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v58 - v13;
  v15 = swift_allocObject();
  v67 = v8;
  v68 = v15;
  *(_QWORD *)(v15 + 16) = a4;
  v16 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v16(v14, &a3[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_logger], v7);
  v17 = a3;
  v18 = a1;
  v19 = v17;
  v20 = v18;
  v64 = a4;
  _Block_copy(a4);
  v69 = v14;
  v21 = sub_23B1C5E40();
  v22 = sub_23B1C6A94();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc();
    v61 = v16;
    v24 = v23;
    v25 = (_QWORD *)swift_slowAlloc();
    v58 = v25;
    v60 = swift_slowAlloc();
    aBlock[0] = v60;
    *(_DWORD *)v24 = 138412546;
    v59 = v21;
    v62 = v7;
    v71 = (uint64_t)v19;
    v26 = v19;
    sub_23B1C6CBC();
    *v25 = v19;

    *(_WORD *)(v24 + 12) = 2080;
    v27 = sub_23AFEE24C();
    v71 = sub_23AABEC68(v27, v28, aBlock);
    sub_23B1C6CBC();

    v7 = v62;
    swift_bridgeObjectRelease();
    v29 = v59;
    _os_log_impl(&dword_23AA66000, v59, v22, "📖  %@: enumerating page %s", (uint8_t *)v24, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    v30 = v58;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v30, -1, -1);
    v31 = v60;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v31, -1, -1);
    v32 = v24;
    v16 = v61;
    MEMORY[0x23B8614BC](v32, -1, -1);

  }
  else
  {

  }
  v33 = v65;
  v16(v65, v69, v7);
  v16(v66, v33, v7);
  v34 = v67;
  v35 = (*(unsigned __int8 *)(v67 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
  v36 = (v9 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8;
  v38 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v34 + 32))(v38 + v35, v33, v7);
  *(_QWORD *)(v38 + v36) = v19;
  *(_QWORD *)(v38 + v37) = v20;
  v39 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v38 + ((v37 + 15) & 0xFFFFFFFFFFFFFFF8));
  v40 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v68;
  *v39 = sub_23AB3D3D8;
  v39[1] = v40;
  v41 = v19;
  v42 = v20;
  swift_retain();
  if (objc_sync_enter(v41))
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)v41);
  v43 = v41[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_invalidated];
  if (objc_sync_exit(v41))
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)v41);

  if ((v43 & 1) != 0
    || (v44 = MEMORY[0x23B8615C4](&v41[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_backend])) == 0)
  {
    type metadata accessor for NSFileProviderError(0);
    v71 = -1002;
    v51 = MEMORY[0x24BEE4AF8];
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&unk_2542E1E60, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderError, (uint64_t)&unk_23B1CC9C0);
    sub_23B1C5864();
    v52 = (void *)aBlock[0];
    v53 = v64;
    _Block_copy(v64);
    v54 = v51;
    v55 = v66;
    sub_23AF26F60(v54, 0, 0, 0, v52, (int)v66, v41, v42, (uint64_t)v53);
    _Block_release(v53);
    swift_release();

    v56 = *(void (**)(char *, uint64_t))(v67 + 8);
    v56(v55, v7);
    v56(v69, v7);
  }
  else
  {
    v45 = (void *)v44;
    v46 = *(void (**)(char *, uint64_t))(v67 + 8);
    v46(v66, v7);
    v47 = *(void **)&v41[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_extensionEnumerator];
    v48 = (_QWORD *)swift_allocObject();
    v48[2] = v41;
    v48[3] = sub_23AF28D2C;
    v48[4] = v38;
    aBlock[4] = (uint64_t)sub_23AF28E08;
    aBlock[5] = (uint64_t)v48;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_23AF24A18;
    aBlock[3] = (uint64_t)&block_descriptor_25;
    v49 = _Block_copy(aBlock);
    v50 = v41;
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    objc_msgSend(v47, sel_enumerateItemsFromPage_suggestedPageSize_reply_, v42, v63, v49);
    _Block_release(v49);
    swift_release();

    swift_unknownObjectRelease();
    v46(v69, v7);
  }
  return swift_release();
}

void sub_23AF27C2C(unint64_t a1, unint64_t a2, char a3, void *a4, uint64_t a5, id a6, int a7, void *a8, uint64_t a9, unint64_t a10, uint64_t a11)
{
  id v12;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  id v36;
  NSObject *v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  os_log_t log;
  void *type;
  uint64_t v58;
  os_log_type_t v59;
  char v60;
  void *v62;
  unint64_t v63;
  id v65;
  uint64_t v66;
  id v67;
  uint64_t v68[2];

  v12 = a6;
  if (a6)
  {
    v17 = a6;
    v18 = v12;
    v19 = a8;
    sub_23AAAE668(a9, a10);
    v20 = v12;
    v21 = v19;
    sub_23AAAE668(a9, a10);
    v22 = sub_23B1C5E40();
    v23 = sub_23B1C6AA0();
    if (os_log_type_enabled(v22, v23))
    {
      v65 = v12;
      v24 = swift_slowAlloc();
      v25 = (_QWORD *)swift_slowAlloc();
      v58 = swift_slowAlloc();
      v68[0] = v58;
      *(_DWORD *)v24 = 138412802;
      v26 = v21;
      sub_23B1C6CBC();
      *v25 = v21;

      v27 = a5;
      *(_WORD *)(v24 + 12) = 2080;
      sub_23AAAE668(a9, a10);
      v28 = sub_23B1C5A44();
      v30 = v29;
      sub_23AAAE53C(a9, a10);
      sub_23AABEC68(v28, v30, v68);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      sub_23AAAE53C(a9, a10);
      sub_23AAAE53C(a9, a10);
      *(_WORD *)(v24 + 22) = 2112;
      swift_getErrorValue();
      v67 = sub_23B0D9CF0(v66);
      v31 = a4;
      sub_23B1C6CBC();
      v25[1] = v67;

      _os_log_impl(&dword_23AA66000, v22, v23, "📖  %@: enumerating from change %s failed: %@", (uint8_t *)v24, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v25, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v58, -1, -1);
      v32 = v24;
      v12 = v65;
      MEMORY[0x23B8614BC](v32, -1, -1);

    }
    else
    {

      sub_23AAAE53C(a9, a10);
      sub_23AAAE53C(a9, a10);

      v31 = a4;
      v27 = a5;
    }
  }
  else
  {
    v33 = a8;
    sub_23AAAE668(a9, a10);
    v34 = a4;
    v35 = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23AAAE668(a9, a10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36 = v34;
    v37 = sub_23B1C5E40();
    v59 = sub_23B1C6A94();
    if (os_log_type_enabled(v37, v59))
    {
      type = v36;
      v60 = a3;
      v62 = a4;
      v38 = swift_slowAlloc();
      v39 = (_QWORD *)swift_slowAlloc();
      log = (os_log_t)swift_slowAlloc();
      v68[0] = (uint64_t)log;
      *(_DWORD *)v38 = 138413570;
      v63 = a1;
      v40 = v35;
      sub_23B1C6CBC();
      *v39 = v35;

      *(_WORD *)(v38 + 12) = 2080;
      sub_23AAAE668(a9, a10);
      v41 = sub_23B1C5A44();
      v43 = v42;
      sub_23AAAE53C(a9, a10);
      sub_23AABEC68(v41, v43, v68);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      sub_23AAAE53C(a9, a10);
      sub_23AAAE53C(a9, a10);
      *(_WORD *)(v38 + 22) = 2048;
      if (v63 >> 62)
      {
        swift_bridgeObjectRetain();
        sub_23B1C7088();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 32) = 2048;
      v31 = a4;
      if (a2 >> 62)
      {
        swift_bridgeObjectRetain();
        sub_23B1C7088();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 42) = 2080;
      if ((v60 & 1) != 0)
        v44 = 0x6F6D20736168202CLL;
      else
        v44 = 0;
      if ((v60 & 1) != 0)
        v45 = 0xEA00000000006572;
      else
        v45 = 0xE000000000000000;
      sub_23AABEC68(v44, v45, v68);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 52) = 2080;
      if (a4)
      {
        v46 = sub_23B1C5AD4();
        v48 = v47;
        v49 = sub_23B1C5A44();
        v51 = v50;
        v52 = v48;
        v31 = v62;
        sub_23AAAE53C(v46, v52);
      }
      else
      {
        v51 = 0xE500000000000000;
        v49 = 0x3E6C696E3CLL;
      }
      sub_23AABEC68(v49, v51, v68);
      sub_23B1C6CBC();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23AA66000, v37, v59, "📖  %@: enumerating from change %s done: %ld updated, %ld deleted%s, next anchor:%s", (uint8_t *)v38, 0x3Eu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v39, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](log, -1, -1);
      MEMORY[0x23B8614BC](v38, -1, -1);

      v27 = a5;
      v12 = 0;
      a3 = v60;
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23AAAE53C(a9, a10);
      sub_23AAAE53C(a9, a10);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = a5;
      v12 = 0;
      v31 = a4;
    }
  }
  sub_23AA9F52C(0, &qword_2542E7560);
  v53 = (void *)sub_23B1C66F8();
  sub_23AA9F52C(0, (unint64_t *)&unk_2542E2010);
  v54 = (void *)sub_23B1C66F8();
  if (v12)
    v55 = (void *)sub_23B1C5870();
  else
    v55 = 0;
  (*(void (**)(uint64_t, void *, void *, _QWORD, void *, uint64_t, void *))(a11 + 16))(a11, v53, v54, a3 & 1, v31, v27, v55);

}

uint64_t sub_23AF28464(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, const void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, _BYTE *, uint64_t);
  char *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  int v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t *v46;
  void (**v47)(uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t);
  void (*v48)(uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t);
  char *v49;
  char v50;
  uint64_t v51;
  void *v52;
  void (*v53)(_BYTE *, uint64_t);
  uint64_t v54;
  void *v55;
  void *v56;
  _QWORD *v57;
  void *v58;
  char *v59;
  unint64_t v60;
  void *v61;
  const void *v62;
  unint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  void (*v66)(_BYTE *, uint64_t);
  uint64_t v67;
  _BYTE v69[12];
  int v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  const void *v74;
  _BYTE *v75;
  void (*v76)(_BYTE *, _BYTE *, uint64_t);
  char *v77;
  unint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t aBlock[6];
  uint64_t v84;

  v72 = a3;
  v9 = sub_23B1C5E4C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v79 = &v69[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = MEMORY[0x24BDAC7A8](v12);
  v75 = &v69[-v14];
  MEMORY[0x24BDAC7A8](v13);
  v16 = &v69[-v15];
  v17 = swift_allocObject();
  v80 = v10;
  v81 = v17;
  *(_QWORD *)(v17 + 16) = a5;
  v18 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16);
  v82 = v9;
  v76 = v18;
  v18(v16, &a4[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_logger], v9);
  v19 = a4;
  sub_23AAAE668(a1, a2);
  v20 = v19;
  v78 = a2;
  sub_23AAAE668(a1, a2);
  v74 = a5;
  _Block_copy(a5);
  v21 = sub_23B1C5E40();
  v22 = sub_23B1C6A94();
  v23 = v22;
  v24 = os_log_type_enabled(v21, v22);
  v77 = v20;
  if (v24)
  {
    v25 = swift_slowAlloc();
    v73 = v16;
    v26 = v25;
    v27 = (_QWORD *)swift_slowAlloc();
    v71 = swift_slowAlloc();
    aBlock[0] = v71;
    *(_DWORD *)v26 = 138412546;
    v70 = v23;
    v84 = (uint64_t)v20;
    v28 = v20;
    sub_23B1C6CBC();
    *v27 = v20;

    *(_WORD *)(v26 + 12) = 2080;
    v29 = v78;
    sub_23AAAE668(a1, v78);
    v30 = sub_23B1C5A44();
    v32 = v31;
    sub_23AAAE53C(a1, v29);
    v84 = sub_23AABEC68(v30, v32, aBlock);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    sub_23AAAE53C(a1, v29);
    sub_23AAAE53C(a1, v29);
    _os_log_impl(&dword_23AA66000, v21, (os_log_type_t)v70, "📖  %@: enumerating from change %s", (uint8_t *)v26, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v27, -1, -1);
    v33 = v71;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v33, -1, -1);
    v34 = v26;
    v16 = v73;
    MEMORY[0x23B8614BC](v34, -1, -1);

  }
  else
  {

    v35 = v78;
    sub_23AAAE53C(a1, v78);
    sub_23AAAE53C(a1, v35);
  }
  v37 = v75;
  v36 = v76;
  v38 = v82;
  v76(v75, v16, v82);
  v36(v79, v37, v38);
  v39 = v80;
  v40 = (*(unsigned __int8 *)(v80 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
  v41 = (v11 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8;
  v43 = swift_allocObject();
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v39 + 32))(v43 + v40, v37, v38);
  v44 = v77;
  v45 = v78;
  *(_QWORD *)(v43 + v41) = v77;
  v46 = (uint64_t *)(v43 + v42);
  *v46 = a1;
  v46[1] = v45;
  v47 = (void (**)(uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t))(v43
                                                                                + ((v42 + 23) & 0xFFFFFFFFFFFFFFF8));
  v48 = (void (*)(uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t))v81;
  *v47 = sub_23AAB5E60;
  v47[1] = v48;
  v49 = v44;
  sub_23AAAE668(a1, v45);
  swift_retain();
  if (objc_sync_enter(v49))
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)v49);
  v50 = v49[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_invalidated];
  if (objc_sync_exit(v49))
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)v49);

  if ((v50 & 1) != 0
    || (v51 = MEMORY[0x23B8615C4](&v49[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_backend])) == 0)
  {
    type metadata accessor for NSFileProviderError(0);
    v84 = -1002;
    v60 = MEMORY[0x24BEE4AF8];
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&unk_2542E1E60, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderError, (uint64_t)&unk_23B1CC9C0);
    sub_23B1C5864();
    v61 = (void *)aBlock[0];
    v62 = v74;
    _Block_copy(v74);
    v63 = v60;
    v64 = v60;
    v65 = v79;
    sub_23AF27C2C(v63, v64, 0, 0, 0, v61, (int)v79, v49, a1, v45, (uint64_t)v62);
    _Block_release(v62);
    swift_release();

    v66 = *(void (**)(_BYTE *, uint64_t))(v80 + 8);
    v67 = v82;
    v66(v65, v82);
    v66(v16, v67);
  }
  else
  {
    v52 = (void *)v51;
    v73 = v16;
    v53 = *(void (**)(_BYTE *, uint64_t))(v80 + 8);
    v54 = v82;
    v53(v79, v82);
    v55 = *(void **)&v49[OBJC_IVAR____TtC9libfssync20FPFSSearchEnumerator_extensionEnumerator];
    swift_unknownObjectRetain();
    v56 = (void *)sub_23B1C5AA4();
    v57 = (_QWORD *)swift_allocObject();
    v57[2] = v49;
    v57[3] = sub_23AF28B78;
    v57[4] = v43;
    aBlock[4] = (uint64_t)sub_23AF28C40;
    aBlock[5] = (uint64_t)v57;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_23AF24AFC;
    aBlock[3] = (uint64_t)&block_descriptor_21;
    v58 = _Block_copy(aBlock);
    v59 = v49;
    swift_retain();
    swift_release();
    objc_msgSend(v55, sel_enumerateChangesFromToken_suggestedBatchSize_reply_, v56, v72, v58);
    _Block_release(v58);
    swift_release();

    swift_unknownObjectRelease();
    v53(v73, v54);
  }
  return swift_release();
}

uint64_t sub_23AF28AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_23B1C5E4C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  sub_23AAAE53C(*(_QWORD *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AF28B78(unint64_t a1, unint64_t a2, char a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v6;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v13 = *(_QWORD *)(sub_23B1C5E4C() - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = (*(_QWORD *)(v13 + 64) + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_23AF25C00(a1, a2, a3, a4, a5, a6, (int)v6 + (int)v14, *(void **)(v6 + v15), *(_QWORD *)(v6 + ((v15 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v6 + ((v15 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(uint64_t (**)(unint64_t, unint64_t, _QWORD, void *, uint64_t, id))(v6 + ((((v15 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v6 + ((((v15 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_23AF28C40(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return sub_23AF263D4(a1, a2, a3, a4, a5, a6, *(_QWORD *)(v6 + 16), *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v6 + 24));
}

uint64_t sub_23AF28C68()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_23AF28C8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_23B1C5E4C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AF28D2C(unint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v11 = *(_QWORD *)(sub_23B1C5E4C() - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = (*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_23AF24FF8(a1, a2, a3, a4, a5, (int)v5 + (int)v12, *(void **)(v5 + v13), *(void **)(v5 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t (**)(unint64_t, void *, void *, uint64_t, id))(v5+ ((((v13 + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v5 + ((((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t objectdestroy_12Tm()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AF28E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return sub_23AF2568C(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16), *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 24));
}

uint64_t sub_23AF28E14()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23AF28E54()
{
  uint64_t v0;

  v0 = type metadata accessor for FPFSMaterializedSetAnchor();
  MEMORY[0x24BDAC7A8](v0);
  sub_23B1C5AD4();
  __asm { BR              X10 }
}

uint64_t sub_23AF28EE4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  sub_23AAAE53C(v2, v1);
  if (!BYTE6(v1))
  {

    v14 = sub_23B1C5C54();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v3, v7, v14);
LABEL_5:
    *(_QWORD *)(v3 + *(int *)(v4 + 20)) = 0;
    return result;
  }
  *(_QWORD *)(v8 - 72) = v7;
  sub_23B1C5780();
  swift_allocObject();
  sub_23B1C5774();
  v9 = sub_23B1C5AD4();
  v11 = v10;
  sub_23AA7E38C(&qword_2569E73A8, (uint64_t (*)(uint64_t))type metadata accessor for FPFSMaterializedSetAnchor, (uint64_t)&unk_23B1DE1EC);
  sub_23B1C5768();
  if (v0)
  {
    sub_23AAAE53C(v9, v11);

    swift_release();
    v12 = sub_23B1C5C54();
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(*(_QWORD *)(v8 - 72), v12);
  }
  sub_23AAAE53C(v9, v11);
  v15 = sub_23B1C5C54();
  sub_23AA7E38C(&qword_2542E0268, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
  v16 = *(_QWORD *)(v8 - 72);
  v17 = sub_23B1C63A4();
  swift_release();

  if ((v17 & 1) == 0)
  {
    sub_23AF29154(v6);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v3, v16, v15);
    goto LABEL_5;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v16, v15);
  return sub_23AF29190(v6, v3);
}

uint64_t type metadata accessor for FPFSMaterializedSetAnchor()
{
  uint64_t result;

  result = qword_2569E7408;
  if (!qword_2569E7408)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23AF29154(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FPFSMaterializedSetAnchor();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23AF29190(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FPFSMaterializedSetAnchor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_23AF291D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23B1C5C54();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_23AF2925C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23B1C5C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23AF292B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23B1C5C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23AF29314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23B1C5C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23AF29370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23B1C5C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23AF293CC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23AF293D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B1C5C54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_23AF29414()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23AF29420(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B1C5C54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_23AF29460()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B1C5C54();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23AF294D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E7440);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AF29954();
  sub_23B1C7538();
  v8[15] = 0;
  sub_23B1C5C54();
  sub_23AA7E38C(&qword_2542E0260, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_23B1C72A4();
  if (!v1)
  {
    type metadata accessor for FPFSMaterializedSetAnchor();
    v8[14] = 1;
    sub_23B1C728C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_23AF29624@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;

  v25 = a2;
  v4 = sub_23B1C5C54();
  v5 = *(_QWORD *)(v4 - 8);
  v28 = v4;
  v29 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v26 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E7450);
  v7 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FPFSMaterializedSetAnchor();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AF29954();
  sub_23B1C7520();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v23 = v10;
  v24 = v12;
  v13 = v7;
  v14 = v29;
  v31 = 0;
  sub_23AA7E38C(&qword_2542E0270, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v15 = v26;
  v16 = v27;
  v17 = v28;
  sub_23B1C71C0();
  v18 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v19 = (uint64_t)v24;
  v18(v24, v15, v17);
  v30 = 1;
  v20 = sub_23B1C71B4();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v16);
  *(_QWORD *)(v19 + *(int *)(v23 + 20)) = v20;
  sub_23AF29998(v19, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23AF29154(v19);
}

uint64_t sub_23AF2988C()
{
  _BYTE *v0;

  if (*v0)
    return 0x726F68636E61;
  else
    return 0x444955556264;
}

uint64_t sub_23AF298B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23AF29B80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23AF298DC()
{
  sub_23AF29954();
  return sub_23B1C7544();
}

uint64_t sub_23AF29904()
{
  sub_23AF29954();
  return sub_23B1C7550();
}

uint64_t sub_23AF2992C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23AF29624(a1, a2);
}

uint64_t sub_23AF29940(_QWORD *a1)
{
  return sub_23AF294D4(a1);
}

unint64_t sub_23AF29954()
{
  unint64_t result;

  result = qword_2569E7448;
  if (!qword_2569E7448)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE300, &type metadata for FPFSMaterializedSetAnchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7448);
  }
  return result;
}

uint64_t sub_23AF29998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FPFSMaterializedSetAnchor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for FPFSMaterializedSetAnchor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23AF29A28 + 4 * byte_23B1DE1B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23AF29A5C + 4 * byte_23B1DE1B0[v4]))();
}

uint64_t sub_23AF29A5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AF29A64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23AF29A6CLL);
  return result;
}

uint64_t sub_23AF29A78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23AF29A80);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23AF29A84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AF29A8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FPFSMaterializedSetAnchor.CodingKeys()
{
  return &type metadata for FPFSMaterializedSetAnchor.CodingKeys;
}

unint64_t sub_23AF29AAC()
{
  unint64_t result;

  result = qword_2569E7458;
  if (!qword_2569E7458)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE2D8, &type metadata for FPFSMaterializedSetAnchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7458);
  }
  return result;
}

unint64_t sub_23AF29AF4()
{
  unint64_t result;

  result = qword_2569E7460;
  if (!qword_2569E7460)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE248, &type metadata for FPFSMaterializedSetAnchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7460);
  }
  return result;
}

unint64_t sub_23AF29B3C()
{
  unint64_t result;

  result = qword_2569E7468;
  if (!qword_2569E7468)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE270, &type metadata for FPFSMaterializedSetAnchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7468);
  }
  return result;
}

uint64_t sub_23AF29B80(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x444955556264 && a2 == 0xE600000000000000;
  if (v2 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F68636E61 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23AF29C60(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  result = type metadata accessor for SnapshotMutation(319, a1[2], a1[4], a4);
  if (v7 <= 0x3F)
  {
    result = type metadata accessor for SnapshotMutation(319, a1[3], a1[5], v6);
    if (v8 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_23AF29CF0(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v39;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v49 = *(_DWORD *)(v2 + 80);
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v48 = *(_DWORD *)(v4 + 80);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v47 = *(_DWORD *)(v5 + 80);
  v6 = v48 & 0xF8 | v47 | 7u;
  v7 = ((((*(_QWORD *)(v5 + 64)
         + 7
         + ((v47 + 8 + ((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v47)) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  v8 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v46 = *(_DWORD *)(v8 + 80);
  v9 = v46 | 7;
  v10 = *(_QWORD *)(v8 + 64);
  if (*(_DWORD *)(v8 + 84))
    v11 = *(_QWORD *)(v8 + 64);
  else
    v11 = v10 + 1;
  v43 = (((((((((v11
               + 7
               + ((v46
                 + 10
                 + ((((((v10
                       + ((v10
                         + v46
                         + ((v46 + 12) & ~(unint64_t)v46)) & ~(unint64_t)v46)
                       + 12) & 0xFFFFFFFFFFFFFFF8)
                     + 47) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v46)) & 0xFFFFFFFFFFFFFFF8)
             + 31) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 19) & 0xFFFFFFFFFFFFFFF8)
       + 25) & 0xFFFFFFFFFFFFFFF8;
  v12 = (((v43
         + 327
         + ((v9 + 16 + ((v3 + v6 + ((v3 + v49) & ~(unint64_t)v49)) & ~v6) + v7) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v14 = ((((v12
          + 23
          + ((v12 + 16 + (v6 | v49 | (unint64_t)v46)) & ~(v6 | v49 | (unint64_t)v46))) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v15 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v15 <= ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v15 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v15 > v13)
    v13 = v15;
  if (v13 > v14)
    v14 = v13;
  v42 = v14;
  v50 = v14 | 1;
  v16 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v45 = *(_DWORD *)(v16 + 80);
  v18 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v44 = *(_DWORD *)(v18 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = v6 | v49 | (unint64_t)v46;
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = *(_DWORD *)(v21 + 80);
  v23 = v44 & 0xF8 | v22 | 7;
  v24 = (((v43
         + 327
         + ((v9
           + 16
           + ((v17 + v23 + ((v17 + v45) & ~(unint64_t)v45)) & ~v23)
           + ((((*(_QWORD *)(v21 + 64)
               + 7
               + ((v22 + 8 + ((*(_QWORD *)(v18 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v22)) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = v24 + 23;
  v26 = ((v24 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v27 = v24 + 16;
  v28 = v23 | v45;
  v29 = v28 | v46;
  v30 = (v17 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v30 <= ((v17 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v30 = ((v17 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v30 > v26)
    v26 = v30;
  if (v26 <= ((((v25 + ((v27 + v29) & ~v29)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16)
    v31 = ((((v25 + ((v27 + v29) & ~v29)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v31 = v26;
  if ((v31 | 1) <= v50)
    v32 = v50;
  else
    v32 = v31 | 1;
  if ((v28 | v20) == 7
    && ((v48 | v49 | v47 | v46 | v45 | v44 | *(_DWORD *)(v21 + 80)) & 0x100000) == 0
    && (unint64_t)(v32 + 1) <= 0x18)
  {
    v33 = *((unsigned __int8 *)a2 + v32);
    if (v33 >= 2)
    {
      if (v32 <= 3)
        v34 = v32;
      else
        v34 = 4;
      __asm { BR              X14 }
    }
    if (v33 == 1)
    {
      v37 = *((unsigned __int8 *)a2 + v31);
      if (v37 >= 6 && (_DWORD)v31 != 0)
        v37 = *a2 + 6;
      __asm { BR              X10 }
    }
    v39 = *((unsigned __int8 *)a2 + v42);
    if (v39 >= 6 && (_DWORD)v42 != 0)
      v39 = *a2 + 6;
    __asm { BR              X10 }
  }
  v35 = *(_QWORD *)a2;
  *a1 = *(_QWORD *)a2;
  v36 = v35 + (((v28 | v20) + 16) & ~(v28 | v20));
  swift_retain();
  return v36;
}

void sub_23AF2CF00(_DWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v37;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;

  v1 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(unsigned __int8 *)(v1 + 80);
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 80) & 0xF8;
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v5 | v7 | 7;
  v9 = ((((*(_QWORD *)(v6 + 64) + 7 + ((v7 + 8 + ((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  v10 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v43 = (v11 | 7) + 16;
  v12 = *(_QWORD *)(v10 + 64);
  v13 = (v11
       + 10
       + ((((((v12 + 12 + ((v12 + v11 + ((v11 + 12) & ~v11)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v11;
  if (!*(_DWORD *)(v10 + 84))
    ++v12;
  v40 = (((((((((v12 + 7 + v13) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
       + 25) & 0xFFFFFFFFFFFFFFF8;
  v14 = (((v40 + 327 + ((v43 + ((v2 + v8 + ((v2 + v3) & ~v3)) & ~v8) + v9) & ~(v11 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((v14 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v16 = ((((v14 + 23 + ((v14 + 16 + (v8 | v3 | v11)) & ~(v8 | v3 | v11))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v17 = (v2 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v17 <= ((v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v17 = ((v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v17 > v15)
    v15 = v17;
  if (v15 > v16)
    v16 = v15;
  v39 = v16;
  v41 = v16 | 1;
  v18 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v22 = *(_DWORD *)(v21 + 80) & 0xF8;
  v23 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = v22 | v24 | 7;
  v26 = (((v40
         + 327
         + ((v43
           + ((v19 + v25 + ((v19 + v20) & ~v20)) & ~v25)
           + ((((*(_QWORD *)(v23 + 64)
               + 7
               + ((v24 + 8 + ((*(_QWORD *)(v21 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v24)) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16) & ~(v11 | 7))) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v27 = v26 + 23;
  v28 = ((v26 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v29 = v26 + 16;
  v30 = v20 | v11 | v25;
  v31 = (v19 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v31 <= ((v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v31 = ((v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v31 > v28)
    v28 = v31;
  if (v28 <= ((((v27 + ((v29 + v30) & ~v30)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16)
    v28 = ((((v27 + ((v29 + v30) & ~v30)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v32 = v28 | 1;
  if ((v28 | 1) <= v41)
    v32 = v41;
  v33 = *((unsigned __int8 *)a1 + v32);
  if (v33 >= 2)
  {
    if (v32 <= 3)
      v34 = v32;
    else
      v34 = 4;
    __asm { BR              X16 }
  }
  if (v33 == 1)
  {
    v35 = *((unsigned __int8 *)a1 + v28);
    if (v35 >= 6 && (_DWORD)v28 != 0)
      v35 = *a1 + 6;
    __asm { BR              X10 }
  }
  v37 = *((unsigned __int8 *)a1 + v39);
  if (v37 >= 6 && (_DWORD)v39 != 0)
    v37 = *a1 + 6;
  __asm { BR              X10 }
}

void sub_23AF2D464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;

  (*(void (**)(uint64_t, _QWORD))(a31 + 8))(v31, *(_QWORD *)(v32 - 144));
  JUMPOUT(0x23AF2D47CLL);
}

void sub_23AF2D48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;

  (*(void (**)(uint64_t, _QWORD))(a30 + 8))(v30, *(_QWORD *)(v31 - 152));
  JUMPOUT(0x23AF2E360);
}

void sub_23AF2E384(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v39;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v6 | v8 | 7;
  v10 = ((((*(_QWORD *)(v7 + 64) + 7 + ((v8 + 8 + ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v11 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v45 = (v12 | 7) + 16;
  v13 = *(_QWORD *)(v11 + 64);
  if (*(_DWORD *)(v11 + 84))
    v14 = *(_QWORD *)(v11 + 64);
  else
    v14 = v13 + 1;
  v43 = (((((((((v14
               + 7
               + ((v12
                 + 10
                 + ((((((v13 + ((v13 + v12 + ((v12 + 12) & ~v12)) & ~v12) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v12)) & 0xFFFFFFFFFFFFFFF8)
             + 31) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 19) & 0xFFFFFFFFFFFFFFF8)
       + 25) & 0xFFFFFFFFFFFFFFF8;
  v15 = (((v43 + 327 + ((v45 + ((v3 + v9 + ((v3 + v4) & ~v4)) & ~v9) + v10) & ~(v12 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((v15 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v17 = ((((v15 + 23 + ((v15 + 16 + (v9 | v4 | v12)) & ~(v9 | v4 | v12))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v18 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v18 <= ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v18 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v18 > v16)
    v16 = v18;
  if (v16 > v17)
    v17 = v16;
  v41 = v17;
  v42 = v17 | 1;
  v19 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v20 = *(_QWORD *)(v19 + 64);
  v21 = *(unsigned __int8 *)(v19 + 80);
  v22 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v23 = *(_DWORD *)(v22 + 80) & 0xF8;
  v24 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = v23 | v25 | 7;
  v27 = (((v43
         + 327
         + ((v45
           + ((v20 + v26 + ((v20 + v21) & ~v21)) & ~v26)
           + ((((*(_QWORD *)(v24 + 64)
               + 7
               + ((v25 + 8 + ((*(_QWORD *)(v22 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v25)) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16) & ~(v12 | 7))) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v28 = v27 + 23;
  v29 = ((v27 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v30 = v27 + 16;
  v31 = v21 | v12 | v26;
  v32 = (v20 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v32 <= ((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v32 = ((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v32 > v29)
    v29 = v32;
  if (v29 <= ((((v28 + ((v30 + v31) & ~v31)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16)
    v33 = ((((v28 + ((v30 + v31) & ~v31)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v33 = v29;
  if ((v33 | 1) <= v42)
    v34 = v42;
  else
    v34 = v33 | 1;
  v35 = *((unsigned __int8 *)a2 + v34);
  if (v35 >= 2)
  {
    if (v34 <= 3)
      v36 = v34;
    else
      v36 = 4;
    __asm { BR              X14 }
  }
  if (v35 == 1)
  {
    v37 = *((unsigned __int8 *)a2 + v33);
    if (v37 >= 6 && (_DWORD)v33 != 0)
      v37 = *a2 + 6;
    __asm { BR              X10 }
  }
  v39 = *((unsigned __int8 *)a2 + v41);
  if (v39 >= 6 && (_DWORD)v41 != 0)
    v39 = *a2 + 6;
  __asm { BR              X10 }
}

void sub_23AF2EBF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,size_t __n,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  void *v80;
  const void *v81;
  unsigned int (*v82)(const void *, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  __int128 *v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  id v124;
  void *v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  _OWORD *v131;
  __int128 *v132;
  __int128 v133;
  unint64_t v134;
  unint64_t v135;
  __int128 v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  _QWORD *v144;

  *(_QWORD *)(v43 - 128) = v37;
  v44 = v35;
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(a30 + 16);
  v46 = *(_QWORD *)(v43 - 160);
  v45(v38, v39, v46);
  v47 = (a19 + v38) & v36;
  v48 = (a19 + v39) & v36;
  v45(v47, v48, v46);
  v49 = *(_QWORD *)(v43 - 144);
  v50 = (v47 + a31 + v49) & v41;
  v51 = (v48 + a31 + v49) & v41;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a15 + 16))(v50, v51, a22);
  v52 = (_QWORD *)((a20 + v50) & 0xFFFFFFFFFFFFFFF8);
  v53 = (_QWORD *)((a20 + v51) & 0xFFFFFFFFFFFFFFF8);
  *v52 = *v53;
  v54 = ((unint64_t)v52 + a21) & v40;
  v55 = ((unint64_t)v53 + a21) & v40;
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(a16 + 16);
  swift_bridgeObjectRetain();
  v56(v54, v55, a24);
  v57 = (_QWORD *)((a23 + v54) & 0xFFFFFFFFFFFFF8);
  v58 = (_QWORD *)((a23 + v55) & 0xFFFFFFFFFFFFF8);
  *v57 = *v58;
  v59 = (_QWORD *)(((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8);
  v60 = (_QWORD *)(((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v59 = *v60;
  v59[1] = v60[1];
  v61 = (_QWORD *)(a25 + v50);
  *v61 = *(_QWORD *)(a25 + v51);
  v61[1] = *(_QWORD *)(a25 + v51 + 8);
  v62 = *(_QWORD *)(v43 - 96);
  v63 = (v62 + a25 + v50) & v44;
  v64 = (v62 + a25 + v51) & v44;
  *(_BYTE *)v63 = *(_BYTE *)v64;
  v65 = v63 | 4;
  LODWORD(v62) = *(_DWORD *)(v64 | 4);
  *(_BYTE *)(v65 + 4) = *(_BYTE *)((v64 | 4) + 4);
  *(_DWORD *)v65 = v62;
  *(_WORD *)(v63 + 10) = *(_WORD *)(v64 + 10);
  v66 = (a32 + v63) & v42;
  v67 = (a32 + v64) & v42;
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(a27 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v68(v66, v67, a28);
  v69 = (a33 + v66) & v42;
  v70 = (a33 + v67) & v42;
  v68(v69, v70, a28);
  v71 = (_BYTE *)(v69 + a34);
  *v71 = *(_BYTE *)(v70 + a34);
  v71[1] = *(_BYTE *)(v70 + a34 + 1);
  v71[2] = *(_BYTE *)(v70 + a34 + 2);
  v71[3] = *(_BYTE *)(v70 + a34 + 3);
  v71[4] = *(_BYTE *)(v70 + a34 + 4);
  v72 = (v69 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  v73 = (v70 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v72 = *(_QWORD *)v73;
  *(_QWORD *)(v72 + 8) = *(_QWORD *)(v73 + 8);
  *(_BYTE *)(v72 + 16) = *(_BYTE *)(v73 + 16);
  *(_BYTE *)(v72 + 17) = *(_BYTE *)(v73 + 17);
  *(_BYTE *)(v72 + 18) = *(_BYTE *)(v73 + 18);
  *(_BYTE *)(v72 + 19) = *(_BYTE *)(v73 + 19);
  v74 = (v72 + 27) & 0xFFFFFFFFFFFFFFF8;
  v75 = (v73 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *(_BYTE *)(v74 + 8) = *(_BYTE *)(v75 + 8);
  *(_BYTE *)(v74 + 9) = *(_BYTE *)(v75 + 9);
  *(_BYTE *)(v74 + 10) = *(_BYTE *)(v75 + 10);
  *(_BYTE *)(v74 + 11) = *(_BYTE *)(v75 + 11);
  *(_BYTE *)(v74 + 12) = *(_BYTE *)(v75 + 12);
  v76 = (_QWORD *)((v72 + 47) & 0xFFFFFFFFFFFFF8);
  v77 = (_QWORD *)((v73 + 47) & 0xFFFFFFFFFFFFF8);
  *v76 = *v77;
  v78 = ((unint64_t)v76 + 15) & 0xFFFFFFFFFFFFFFF8;
  v79 = ((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v78 = *(_QWORD *)v79;
  *(_BYTE *)(v78 + 8) = *(_BYTE *)(v79 + 8);
  *(_BYTE *)(v78 + 9) = *(_BYTE *)(v79 + 9);
  v80 = (void *)((a35 + v78) & v42);
  v81 = (const void *)((a35 + v79) & v42);
  v82 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(a27 + 48);
  swift_bridgeObjectRetain();
  if (v82(v81, 1, a28))
  {
    memcpy(v80, v81, __n);
  }
  else
  {
    v68((uint64_t)v80, (uint64_t)v81, a28);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(a27 + 56))(v80, 0, 1, a28);
  }
  v83 = *(_QWORD *)(v43 - 120);
  v84 = *(_QWORD *)(v43 - 200);
  v85 = (_QWORD *)(((unint64_t)v80 + v84) & 0xFFFFFFFFFFFFFFF8);
  v86 = (_QWORD *)(((unint64_t)v81 + v84) & 0xFFFFFFFFFFFFFFF8);
  *v85 = *v86;
  v87 = ((unint64_t)v85 + 15) & 0xFFFFFFFFFFFFFFF8;
  v88 = ((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFFFF8;
  v89 = *(_QWORD *)v88;
  *(_BYTE *)(v87 + 8) = *(_BYTE *)(v88 + 8);
  *(_QWORD *)v87 = v89;
  v90 = (_QWORD *)(((unint64_t)v85 + 31) & 0xFFFFFFFFFFFFF8);
  v91 = (_QWORD *)(((unint64_t)v86 + 31) & 0xFFFFFFFFFFFFF8);
  *v90 = *v91;
  v92 = ((unint64_t)v90 + 15) & 0xFFFFFFFFFFFFFFF8;
  v93 = (uint64_t *)(((unint64_t)v91 + 15) & 0xFFFFFFFFFFFFFFF8);
  v94 = v93[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v94 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v92 = *(_OWORD *)v93;
  }
  else
  {
    v95 = *v93;
    sub_23AAAE668(*v93, v94);
    *(_QWORD *)v92 = v95;
    *(_QWORD *)(v92 + 8) = v94;
  }
  v96 = (v92 + 19) & 0xFFFFFFFFFFFFFFF8;
  v97 = ((unint64_t)v93 + 19) & 0xFFFFFFFFFFFFFFF8;
  v98 = *(_QWORD *)v97;
  *(_BYTE *)(v96 + 8) = *(_BYTE *)(v97 + 8);
  *(_QWORD *)v96 = v98;
  *(_BYTE *)(v96 + 9) = *(_BYTE *)(v97 + 9);
  v99 = (v96 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v100 = (v97 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v101 = *(_DWORD *)v100;
  *(_BYTE *)(v99 + 4) = *(_BYTE *)(v100 + 4);
  *(_DWORD *)v99 = v101;
  v102 = (_QWORD *)((v96 + 25) & 0xFFFFFFFFFFFFFFF8);
  v103 = (_QWORD *)((v97 + 25) & 0xFFFFFFFFFFFFFFF8);
  *v102 = *v103;
  v102[1] = v103[1];
  v104 = v83 + v63;
  v105 = (__int128 *)(v83 + v64);
  v106 = *(_QWORD *)(v83 + v64 + 16);
  if (v106 >= 0xFFFFFFFF)
    LODWORD(v106) = -1;
  v107 = v106 - 1;
  swift_bridgeObjectRetain();
  v108 = *(_QWORD *)(v43 - 112);
  if (v107 < 0)
  {
    *(_QWORD *)v104 = *(_QWORD *)v105;
    *(_BYTE *)(v104 + 8) = *((_BYTE *)v105 + 8);
    *(_BYTE *)(v104 + 9) = *((_BYTE *)v105 + 9);
    v123 = (void *)*((_QWORD *)v105 + 2);
    v124 = v123;
    *(_QWORD *)(v104 + 16) = v123;
    v125 = (void *)*((_QWORD *)v105 + 3);
    v126 = v125;
    *(_QWORD *)(v104 + 24) = v125;
    *(_BYTE *)(v104 + 32) = *((_BYTE *)v105 + 32);
    *(_BYTE *)(v104 + 33) = *((_BYTE *)v105 + 33);
    *(_BYTE *)(v104 + 34) = *((_BYTE *)v105 + 34);
    *(_QWORD *)(v104 + 40) = *((_QWORD *)v105 + 5);
    *(_QWORD *)(v104 + 48) = *((_QWORD *)v105 + 6);
    *(_QWORD *)(v104 + 56) = *((_QWORD *)v105 + 7);
    v127 = *((_QWORD *)v105 + 8);
    *(_QWORD *)(v43 - 120) = v127;
    *(_QWORD *)(v104 + 64) = v127;
    *(_BYTE *)(v104 + 72) = *((_BYTE *)v105 + 72);
    *(_QWORD *)(v104 + 80) = *((_QWORD *)v105 + 10);
    *(_QWORD *)(v104 + 88) = *((_QWORD *)v105 + 11);
    v128 = *((_QWORD *)v105 + 12);
    *(_QWORD *)(v43 - 96) = v128;
    *(_QWORD *)(v104 + 96) = v128;
    *(_BYTE *)(v104 + 104) = *((_BYTE *)v105 + 104);
    *(_BYTE *)(v104 + 105) = *((_BYTE *)v105 + 105);
    *(_QWORD *)(v104 + 112) = *((_QWORD *)v105 + 14);
    *(_QWORD *)(v104 + 120) = *((_QWORD *)v105 + 15);
    *(_QWORD *)(v104 + 128) = *((_QWORD *)v105 + 16);
    *(_QWORD *)(v104 + 136) = *((_QWORD *)v105 + 17);
    *(_QWORD *)(v104 + 144) = *((_QWORD *)v105 + 18);
    *(_QWORD *)(v104 + 152) = *((_QWORD *)v105 + 19);
    *(_QWORD *)(v104 + 160) = *((_QWORD *)v105 + 20);
    *(_QWORD *)(v104 + 168) = *((_QWORD *)v105 + 21);
    *(_BYTE *)(v104 + 176) = *((_BYTE *)v105 + 176);
    *(_QWORD *)(v104 + 184) = *((_QWORD *)v105 + 23);
    v129 = *((_QWORD *)v105 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v130 = *(id *)(v43 - 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v129)
    {
      *(_QWORD *)(v104 + 192) = v129;
      *(_QWORD *)(v104 + 200) = *((_QWORD *)v105 + 25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v104 + 192) = v105[12];
    }
    v108 = *(_QWORD *)(v43 - 112);
    v121 = *(_QWORD *)(v43 - 104);
    v122 = a10;
    *(_QWORD *)(v104 + 208) = *((_QWORD *)v105 + 26);
    *(_QWORD *)(v104 + 216) = *((_QWORD *)v105 + 27);
    *(_QWORD *)(v104 + 224) = *((_QWORD *)v105 + 28);
    *(_QWORD *)(v104 + 232) = *((_QWORD *)v105 + 29);
    *(_QWORD *)(v104 + 240) = *((_QWORD *)v105 + 30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v109 = *v105;
    v110 = v105[1];
    v111 = v105[3];
    *(_OWORD *)(v104 + 32) = v105[2];
    *(_OWORD *)(v104 + 48) = v111;
    *(_OWORD *)v104 = v109;
    *(_OWORD *)(v104 + 16) = v110;
    v112 = v105[4];
    v113 = v105[5];
    v114 = v105[7];
    *(_OWORD *)(v104 + 96) = v105[6];
    *(_OWORD *)(v104 + 112) = v114;
    *(_OWORD *)(v104 + 64) = v112;
    *(_OWORD *)(v104 + 80) = v113;
    v115 = v105[8];
    v116 = v105[9];
    v117 = v105[11];
    *(_OWORD *)(v104 + 160) = v105[10];
    *(_OWORD *)(v104 + 176) = v117;
    *(_OWORD *)(v104 + 128) = v115;
    *(_OWORD *)(v104 + 144) = v116;
    v118 = v105[12];
    v119 = v105[13];
    v120 = v105[14];
    *(_QWORD *)(v104 + 240) = *((_QWORD *)v105 + 30);
    *(_OWORD *)(v104 + 208) = v119;
    *(_OWORD *)(v104 + 224) = v120;
    *(_OWORD *)(v104 + 192) = v118;
    v121 = *(_QWORD *)(v43 - 104);
    v122 = a10;
  }
  v131 = (_OWORD *)((v104 + 255) & 0xFFFFFFFFFFFFFFF8);
  v132 = (__int128 *)(((unint64_t)v105 + 255) & 0xFFFFFFFFFFFFFFF8);
  v133 = *v132;
  *(_OWORD *)((char *)v131 + 9) = *(__int128 *)((char *)v132 + 9);
  *v131 = v133;
  v134 = (v104 + 287) & 0xFFFFFFFFFFFFFFF8;
  v135 = ((unint64_t)v105 + 287) & 0xFFFFFFFFFFFFFFF8;
  v136 = *(_OWORD *)v135;
  *(_BYTE *)(v134 + 16) = *(_BYTE *)(v135 + 16);
  *(_OWORD *)v134 = v136;
  v137 = (_QWORD *)((v104 + 311) & 0xFFFFFFFFFFFFF8);
  v138 = ((unint64_t)v105 + 311) & 0xFFFFFFFFFFFFF8;
  v139 = *(_QWORD *)v138;
  v138 += 15;
  *v137 = v139;
  v140 = (_QWORD *)(((unint64_t)v137 + 15) & 0xFFFFFFFFFFFFFFF8);
  v141 = *(_QWORD *)(v138 & 0xFFFFFFFFFFFFFFF8);
  v142 = *(_QWORD *)((v138 & 0xFFFFFFFFFFFFFFF8) + 8);
  sub_23AA7F2D4(v141, v142);
  *v140 = v141;
  v140[1] = v142;
  v143 = (_QWORD *)((v121 + v122 + 7) & 0xFFFFFFFFFFFFFFF8);
  v144 = (_QWORD *)((v108 + v122 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v143 = *v144;
  v143[1] = v144[1];
  JUMPOUT(0x23AF304E4);
}

void sub_23AF2EEE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,size_t __n,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void (*v67)(unint64_t, unint64_t, _QWORD);
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  const void *v96;
  unsigned int (*v97)(const void *, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  __int128 *v121;
  unint64_t v122;
  int v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  void (*v137)(uint64_t, uint64_t, uint64_t);
  void (*v138)(unint64_t, unint64_t, _QWORD);
  uint64_t v139;
  void *v140;
  id v141;
  void *v142;
  id v143;
  void *v144;
  uint64_t v145;
  id v146;
  _OWORD *v147;
  __int128 *v148;
  __int128 v149;
  unint64_t v150;
  unint64_t v151;
  __int128 v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _BYTE *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  unint64_t v196;
  unint64_t v197;
  void *v198;
  const void *v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  unint64_t v208;
  uint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  int v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  __int128 *v222;
  unint64_t v223;
  int v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  void *v237;
  id v238;
  void *v239;
  id v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  id v244;
  _OWORD *v245;
  __int128 *v246;
  __int128 v247;
  unint64_t v248;
  unint64_t v249;
  __int128 v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  unint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  void (*v263)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v264)(const void *, uint64_t, uint64_t);
  uint64_t v266;
  uint64_t v267;
  uint64_t v270;
  uint64_t v271;
  void (*v272)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v47 - 120) = v35;
  v271 = v38;
  *(_QWORD *)(v47 - 128) = v42;
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(a29 + 16);
  v50 = *(_QWORD *)(v47 - 104);
  *(_QWORD *)(v47 - 184) = a2;
  *(_QWORD *)(v47 - 176) = a1;
  v51 = *(_QWORD *)(v47 - 168);
  *(_QWORD *)(v47 - 152) = v36;
  *(_QWORD *)(v47 - 144) = v46;
  *(_QWORD *)(v47 - 192) = v48;
  *(_QWORD *)(v47 - 160) = v39;
  v53 = v44;
  v54 = v37;
  v49(v50, v45, v51);
  v55 = (a17 + v50) & v54;
  v56 = a17 + v45;
  v57 = v40;
  v266 = v54;
  v58 = v56 & v54;
  v262 = (uint64_t)v49;
  v49(v55, v56 & v54, v51);
  v59 = *(_QWORD *)(v47 - 136);
  v60 = (v55 + v59 + v43) & v53;
  v267 = v53;
  v61 = (v58 + v59 + v43) & v53;
  v263 = *(void (**)(uint64_t, uint64_t, uint64_t))(a14 + 16);
  v263(v60, v61, a18);
  v62 = (_QWORD *)((a4 + v60) & 0xFFFFFFFFFFFFFFF8);
  v270 = a4;
  v63 = (_QWORD *)((a4 + v61) & 0xFFFFFFFFFFFFFFF8);
  *v62 = *v63;
  v64 = *(_QWORD *)(v47 - 192);
  v65 = ((unint64_t)v62 + v64) & *(_QWORD *)(v47 - 152);
  v66 = ((unint64_t)v63 + v64) & *(_QWORD *)(v47 - 152);
  v67 = *(void (**)(unint64_t, unint64_t, _QWORD))(v41 + 16);
  swift_bridgeObjectRetain();
  v261 = (uint64_t)v67;
  v67(v65, v66, *(_QWORD *)(v47 - 176));
  v68 = *(_QWORD *)(v47 - 184);
  v69 = (_QWORD *)((v68 + v65) & 0xFFFFFFFFFFFFF8);
  v70 = (_QWORD *)((v68 + v66) & 0xFFFFFFFFFFFFF8);
  *v69 = *v70;
  v71 = (_QWORD *)(((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8);
  v72 = (_QWORD *)(((unint64_t)v70 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v71 = *v72;
  v71[1] = v72[1];
  v73 = *(_QWORD *)(v47 - 160);
  v74 = (_QWORD *)(v73 + v60);
  v75 = (_QWORD *)(v73 + v61);
  *v74 = *v75;
  v74[1] = v75[1];
  v76 = *(_QWORD *)(v47 - 96);
  v77 = ((unint64_t)v74 + v76) & v57;
  *(_QWORD *)(v47 - 136) = v57;
  v78 = ((unint64_t)v75 + v76) & v57;
  *(_BYTE *)v77 = *(_BYTE *)v78;
  v79 = v77 | 4;
  LODWORD(v76) = *(_DWORD *)(v78 | 4);
  *(_BYTE *)(v79 + 4) = *(_BYTE *)((v78 | 4) + 4);
  *(_DWORD *)v79 = v76;
  *(_WORD *)(v77 + 10) = *(_WORD *)(v78 + 10);
  v80 = *(_QWORD *)(v47 - 144);
  v81 = (a32 + v77) & v80;
  v82 = (a32 + v78) & v80;
  v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(a27 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v83(v81, v82, a28);
  v84 = (a33 + v81) & v80;
  v85 = (a33 + v82) & v80;
  v272 = v83;
  v83(v84, v85, a28);
  v86 = (_BYTE *)(v84 + a34);
  *v86 = *(_BYTE *)(v85 + a34);
  v86[1] = *(_BYTE *)(v85 + a34 + 1);
  v86[2] = *(_BYTE *)(v85 + a34 + 2);
  v86[3] = *(_BYTE *)(v85 + a34 + 3);
  v86[4] = *(_BYTE *)(v85 + a34 + 4);
  v87 = (v84 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  v88 = (v85 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v87 = *(_QWORD *)v88;
  *(_QWORD *)(v87 + 8) = *(_QWORD *)(v88 + 8);
  *(_BYTE *)(v87 + 16) = *(_BYTE *)(v88 + 16);
  *(_BYTE *)(v87 + 17) = *(_BYTE *)(v88 + 17);
  *(_BYTE *)(v87 + 18) = *(_BYTE *)(v88 + 18);
  *(_BYTE *)(v87 + 19) = *(_BYTE *)(v88 + 19);
  v89 = (v87 + 27) & 0xFFFFFFFFFFFFFFF8;
  v90 = (v88 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v89 = *(_QWORD *)v90;
  *(_BYTE *)(v89 + 8) = *(_BYTE *)(v90 + 8);
  *(_BYTE *)(v89 + 9) = *(_BYTE *)(v90 + 9);
  *(_BYTE *)(v89 + 10) = *(_BYTE *)(v90 + 10);
  *(_BYTE *)(v89 + 11) = *(_BYTE *)(v90 + 11);
  *(_BYTE *)(v89 + 12) = *(_BYTE *)(v90 + 12);
  v91 = (_QWORD *)((v87 + 47) & 0xFFFFFFFFFFFFF8);
  v92 = (_QWORD *)((v88 + 47) & 0xFFFFFFFFFFFFF8);
  *v91 = *v92;
  v93 = ((unint64_t)v91 + 15) & 0xFFFFFFFFFFFFFFF8;
  v94 = ((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v93 = *(_QWORD *)v94;
  *(_BYTE *)(v93 + 8) = *(_BYTE *)(v94 + 8);
  *(_BYTE *)(v93 + 9) = *(_BYTE *)(v94 + 9);
  v95 = (void *)((a35 + v93) & v80);
  v96 = (const void *)((a35 + v94) & v80);
  v97 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(a27 + 48);
  swift_bridgeObjectRetain();
  v264 = v97;
  if (v97(v96, 1, a28))
  {
    v98 = a28;
    memcpy(v95, v96, __n);
  }
  else
  {
    v83((uint64_t)v95, (uint64_t)v96, a28);
    v98 = a28;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(a27 + 56))(v95, 0, 1, a28);
  }
  v99 = *(_QWORD *)(v47 - 200);
  v100 = (_QWORD *)(((unint64_t)v95 + v99) & 0xFFFFFFFFFFFFFFF8);
  v101 = (_QWORD *)(((unint64_t)v96 + v99) & 0xFFFFFFFFFFFFFFF8);
  *v100 = *v101;
  v102 = ((unint64_t)v100 + 15) & 0xFFFFFFFFFFFFFFF8;
  v103 = ((unint64_t)v101 + 15) & 0xFFFFFFFFFFFFFFF8;
  v104 = *(_QWORD *)v103;
  *(_BYTE *)(v102 + 8) = *(_BYTE *)(v103 + 8);
  *(_QWORD *)v102 = v104;
  v105 = (_QWORD *)(((unint64_t)v100 + 31) & 0xFFFFFFFFFFFFF8);
  v106 = (_QWORD *)(((unint64_t)v101 + 31) & 0xFFFFFFFFFFFFF8);
  *v105 = *v106;
  v107 = ((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8;
  v108 = (uint64_t *)(((unint64_t)v106 + 15) & 0xFFFFFFFFFFFFFFF8);
  v109 = v108[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v109 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v107 = *(_OWORD *)v108;
  }
  else
  {
    v110 = *v108;
    sub_23AAAE668(*v108, v109);
    *(_QWORD *)v107 = v110;
    *(_QWORD *)(v107 + 8) = v109;
  }
  v111 = (v107 + 19) & 0xFFFFFFFFFFFFFFF8;
  v112 = ((unint64_t)v108 + 19) & 0xFFFFFFFFFFFFFFF8;
  v113 = *(_QWORD *)v112;
  *(_BYTE *)(v111 + 8) = *(_BYTE *)(v112 + 8);
  *(_QWORD *)v111 = v113;
  *(_BYTE *)(v111 + 9) = *(_BYTE *)(v112 + 9);
  v114 = (v111 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v115 = (v112 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v116 = *(_DWORD *)v115;
  *(_BYTE *)(v114 + 4) = *(_BYTE *)(v115 + 4);
  *(_DWORD *)v114 = v116;
  v117 = (_QWORD *)((v111 + 25) & 0xFFFFFFFFFFFFFFF8);
  v118 = (_QWORD *)((v112 + 25) & 0xFFFFFFFFFFFFFFF8);
  *v117 = *v118;
  v117[1] = v118[1];
  v119 = *(_QWORD *)(v47 - 120);
  v120 = v77 + v119;
  v121 = (__int128 *)(v78 + v119);
  v122 = *(_QWORD *)(v78 + v119 + 16);
  if (v122 >= 0xFFFFFFFF)
    LODWORD(v122) = -1;
  v123 = v122 - 1;
  swift_bridgeObjectRetain();
  if (v123 < 0)
  {
    *(_QWORD *)v120 = *(_QWORD *)v121;
    *(_BYTE *)(v120 + 8) = *((_BYTE *)v121 + 8);
    *(_BYTE *)(v120 + 9) = *((_BYTE *)v121 + 9);
    v140 = (void *)*((_QWORD *)v121 + 2);
    v141 = v140;
    *(_QWORD *)(v120 + 16) = v140;
    v142 = (void *)*((_QWORD *)v121 + 3);
    v143 = v142;
    *(_QWORD *)(v120 + 24) = v142;
    *(_BYTE *)(v120 + 32) = *((_BYTE *)v121 + 32);
    *(_BYTE *)(v120 + 33) = *((_BYTE *)v121 + 33);
    *(_BYTE *)(v120 + 34) = *((_BYTE *)v121 + 34);
    *(_QWORD *)(v120 + 40) = *((_QWORD *)v121 + 5);
    *(_QWORD *)(v120 + 48) = *((_QWORD *)v121 + 6);
    *(_QWORD *)(v120 + 56) = *((_QWORD *)v121 + 7);
    *(_QWORD *)(v120 + 64) = *((_QWORD *)v121 + 8);
    *(_BYTE *)(v120 + 72) = *((_BYTE *)v121 + 72);
    *(_QWORD *)(v120 + 80) = *((_QWORD *)v121 + 10);
    *(_QWORD *)(v120 + 88) = *((_QWORD *)v121 + 11);
    v144 = (void *)*((_QWORD *)v121 + 12);
    *(_QWORD *)(v120 + 96) = v144;
    *(_BYTE *)(v120 + 104) = *((_BYTE *)v121 + 104);
    *(_BYTE *)(v120 + 105) = *((_BYTE *)v121 + 105);
    *(_QWORD *)(v120 + 112) = *((_QWORD *)v121 + 14);
    *(_QWORD *)(v120 + 120) = *((_QWORD *)v121 + 15);
    *(_QWORD *)(v120 + 128) = *((_QWORD *)v121 + 16);
    *(_QWORD *)(v120 + 136) = *((_QWORD *)v121 + 17);
    *(_QWORD *)(v120 + 144) = *((_QWORD *)v121 + 18);
    *(_QWORD *)(v120 + 152) = *((_QWORD *)v121 + 19);
    *(_QWORD *)(v120 + 160) = *((_QWORD *)v121 + 20);
    *(_QWORD *)(v120 + 168) = *((_QWORD *)v121 + 21);
    *(_BYTE *)(v120 + 176) = *((_BYTE *)v121 + 176);
    *(_QWORD *)(v120 + 184) = *((_QWORD *)v121 + 23);
    v145 = *((_QWORD *)v121 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v146 = v144;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v145)
    {
      *(_QWORD *)(v120 + 192) = v145;
      *(_QWORD *)(v120 + 200) = *((_QWORD *)v121 + 25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v120 + 192) = v121[12];
    }
    v136 = *(_QWORD *)(v47 - 104);
    v98 = a28;
    v139 = *(_QWORD *)(v47 - 152);
    v138 = (void (*)(unint64_t, unint64_t, _QWORD))v261;
    v137 = (void (*)(uint64_t, uint64_t, uint64_t))v262;
    *(_QWORD *)(v120 + 208) = *((_QWORD *)v121 + 26);
    *(_QWORD *)(v120 + 216) = *((_QWORD *)v121 + 27);
    *(_QWORD *)(v120 + 224) = *((_QWORD *)v121 + 28);
    *(_QWORD *)(v120 + 232) = *((_QWORD *)v121 + 29);
    *(_QWORD *)(v120 + 240) = *((_QWORD *)v121 + 30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v124 = *v121;
    v125 = v121[1];
    v126 = v121[3];
    *(_OWORD *)(v120 + 32) = v121[2];
    *(_OWORD *)(v120 + 48) = v126;
    *(_OWORD *)v120 = v124;
    *(_OWORD *)(v120 + 16) = v125;
    v127 = v121[4];
    v128 = v121[5];
    v129 = v121[7];
    *(_OWORD *)(v120 + 96) = v121[6];
    *(_OWORD *)(v120 + 112) = v129;
    *(_OWORD *)(v120 + 64) = v127;
    *(_OWORD *)(v120 + 80) = v128;
    v130 = v121[8];
    v131 = v121[9];
    v132 = v121[11];
    *(_OWORD *)(v120 + 160) = v121[10];
    *(_OWORD *)(v120 + 176) = v132;
    *(_OWORD *)(v120 + 128) = v130;
    *(_OWORD *)(v120 + 144) = v131;
    v133 = v121[12];
    v134 = v121[13];
    v135 = v121[14];
    *(_QWORD *)(v120 + 240) = *((_QWORD *)v121 + 30);
    *(_OWORD *)(v120 + 208) = v134;
    *(_OWORD *)(v120 + 224) = v135;
    *(_OWORD *)(v120 + 192) = v133;
    v136 = *(_QWORD *)(v47 - 104);
    v138 = (void (*)(unint64_t, unint64_t, _QWORD))v261;
    v137 = (void (*)(uint64_t, uint64_t, uint64_t))v262;
    v139 = *(_QWORD *)(v47 - 152);
  }
  v147 = (_OWORD *)((v120 + 255) & 0xFFFFFFFFFFFFFFF8);
  v148 = (__int128 *)(((unint64_t)v121 + 255) & 0xFFFFFFFFFFFFFFF8);
  v149 = *v148;
  *(_OWORD *)((char *)v147 + 9) = *(__int128 *)((char *)v148 + 9);
  *v147 = v149;
  v150 = (v120 + 287) & 0xFFFFFFFFFFFFFFF8;
  v151 = ((unint64_t)v121 + 287) & 0xFFFFFFFFFFFFFFF8;
  v152 = *(_OWORD *)v151;
  *(_BYTE *)(v150 + 16) = *(_BYTE *)(v151 + 16);
  *(_OWORD *)v150 = v152;
  v153 = (_QWORD *)((v120 + 311) & 0xFFFFFFFFFFFFF8);
  v154 = ((unint64_t)v121 + 311) & 0xFFFFFFFFFFFFF8;
  v155 = *(_QWORD *)v154;
  v154 += 15;
  *v153 = v155;
  v156 = (_QWORD *)(((unint64_t)v153 + 15) & 0xFFFFFFFFFFFFFFF8);
  v157 = *(_QWORD *)(v154 & 0xFFFFFFFFFFFFFFF8);
  v158 = *(_QWORD *)((v154 & 0xFFFFFFFFFFFFFFF8) + 8);
  sub_23AA7F2D4(v157, v158);
  *v156 = v157;
  v156[1] = v158;
  v159 = (a7 + v136) & a8;
  v160 = (a7 + *(_QWORD *)(v47 - 112)) & a8;
  v161 = *(_QWORD *)(v47 - 168);
  v137(v159, v160, v161);
  *(_QWORD *)(v47 - 112) = v159;
  v162 = (a17 + v159) & v266;
  *(_QWORD *)(v47 - 152) = v160;
  v163 = (a17 + v160) & v266;
  v137(v162, v163, v161);
  v164 = (a5 + v162) & v267;
  v165 = (a5 + v163) & v267;
  v263(v164, v165, a18);
  v166 = (_QWORD *)((v270 + v164) & 0xFFFFFFFFFFFFFFF8);
  v167 = (_QWORD *)((v270 + v165) & 0xFFFFFFFFFFFFFFF8);
  *v166 = *v167;
  v168 = *(_QWORD *)(v47 - 192);
  v169 = ((unint64_t)v166 + v168) & v139;
  v170 = ((unint64_t)v167 + v168) & v139;
  swift_bridgeObjectRetain();
  v138(v169, v170, *(_QWORD *)(v47 - 176));
  v171 = *(_QWORD *)(v47 - 184);
  v172 = (_QWORD *)((v171 + v169) & 0xFFFFFFFFFFFFF8);
  v173 = (_QWORD *)((v171 + v170) & 0xFFFFFFFFFFFFF8);
  *v172 = *v173;
  v174 = (_QWORD *)(((unint64_t)v172 + 15) & 0xFFFFFFFFFFFFFFF8);
  v175 = (_QWORD *)(((unint64_t)v173 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v174 = *v175;
  v174[1] = v175[1];
  v176 = *(_QWORD *)(v47 - 160);
  v177 = (_QWORD *)(v164 + v176);
  v178 = (_QWORD *)(v165 + v176);
  *v177 = *v178;
  v177[1] = v178[1];
  v179 = *(_QWORD *)(v47 - 96);
  v181 = *(_QWORD *)(v47 - 144);
  v180 = *(_QWORD *)(v47 - 136);
  v182 = ((unint64_t)v177 + v179) & v180;
  v183 = ((unint64_t)v178 + v179) & v180;
  *(_BYTE *)v182 = *(_BYTE *)v183;
  v184 = v182 | 4;
  LODWORD(v179) = *(_DWORD *)(v183 | 4);
  *(_BYTE *)(v184 + 4) = *(_BYTE *)((v183 | 4) + 4);
  *(_DWORD *)v184 = v179;
  *(_WORD *)(v182 + 10) = *(_WORD *)(v183 + 10);
  v185 = (a32 + v182) & v181;
  v186 = (a32 + v183) & v181;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v272(v185, v186, v98);
  v187 = (a33 + v185) & v181;
  v188 = (a33 + v186) & v181;
  v272(v187, v188, v98);
  v189 = (_BYTE *)(v187 + a34);
  *v189 = *(_BYTE *)(v188 + a34);
  v189[1] = *(_BYTE *)(v188 + a34 + 1);
  v189[2] = *(_BYTE *)(v188 + a34 + 2);
  v189[3] = *(_BYTE *)(v188 + a34 + 3);
  v189[4] = *(_BYTE *)(v188 + a34 + 4);
  v190 = (v187 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  v191 = (v188 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v190 = *(_QWORD *)v191;
  *(_QWORD *)(v190 + 8) = *(_QWORD *)(v191 + 8);
  *(_BYTE *)(v190 + 16) = *(_BYTE *)(v191 + 16);
  *(_BYTE *)(v190 + 17) = *(_BYTE *)(v191 + 17);
  *(_BYTE *)(v190 + 18) = *(_BYTE *)(v191 + 18);
  *(_BYTE *)(v190 + 19) = *(_BYTE *)(v191 + 19);
  v192 = (v190 + 27) & 0xFFFFFFFFFFFFFFF8;
  v193 = (v191 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v192 = *(_QWORD *)v193;
  *(_BYTE *)(v192 + 8) = *(_BYTE *)(v193 + 8);
  *(_BYTE *)(v192 + 9) = *(_BYTE *)(v193 + 9);
  *(_BYTE *)(v192 + 10) = *(_BYTE *)(v193 + 10);
  *(_BYTE *)(v192 + 11) = *(_BYTE *)(v193 + 11);
  *(_BYTE *)(v192 + 12) = *(_BYTE *)(v193 + 12);
  v194 = (_QWORD *)((v190 + 47) & 0xFFFFFFFFFFFFF8);
  v195 = (_QWORD *)((v191 + 47) & 0xFFFFFFFFFFFFF8);
  *v194 = *v195;
  v196 = ((unint64_t)v194 + 15) & 0xFFFFFFFFFFFFFFF8;
  v197 = ((unint64_t)v195 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v196 = *(_QWORD *)v197;
  *(_BYTE *)(v196 + 8) = *(_BYTE *)(v197 + 8);
  *(_BYTE *)(v196 + 9) = *(_BYTE *)(v197 + 9);
  v198 = (void *)((a35 + v196) & v181);
  v199 = (const void *)((a35 + v197) & v181);
  swift_bridgeObjectRetain();
  if (v264(v199, 1, v98))
  {
    memcpy(v198, v199, __n);
  }
  else
  {
    v272((uint64_t)v198, (uint64_t)v199, v98);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(a27 + 56))(v198, 0, 1, v98);
  }
  v200 = *(_QWORD *)(v47 - 200);
  v201 = (_QWORD *)(((unint64_t)v198 + v200) & 0xFFFFFFFFFFFFFFF8);
  v202 = (_QWORD *)(((unint64_t)v199 + v200) & 0xFFFFFFFFFFFFFFF8);
  *v201 = *v202;
  v203 = ((unint64_t)v201 + 15) & 0xFFFFFFFFFFFFFFF8;
  v204 = ((unint64_t)v202 + 15) & 0xFFFFFFFFFFFFFFF8;
  v205 = *(_QWORD *)v204;
  *(_BYTE *)(v203 + 8) = *(_BYTE *)(v204 + 8);
  *(_QWORD *)v203 = v205;
  v206 = (_QWORD *)(((unint64_t)v201 + 31) & 0xFFFFFFFFFFFFF8);
  v207 = (_QWORD *)(((unint64_t)v202 + 31) & 0xFFFFFFFFFFFFF8);
  *v206 = *v207;
  v208 = ((unint64_t)v206 + 15) & 0xFFFFFFFFFFFFFFF8;
  v209 = (uint64_t *)(((unint64_t)v207 + 15) & 0xFFFFFFFFFFFFFFF8);
  v210 = v209[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v210 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v208 = *(_OWORD *)v209;
  }
  else
  {
    v211 = *v209;
    sub_23AAAE668(*v209, v210);
    *(_QWORD *)v208 = v211;
    *(_QWORD *)(v208 + 8) = v210;
  }
  v212 = (v208 + 19) & 0xFFFFFFFFFFFFFFF8;
  v213 = ((unint64_t)v209 + 19) & 0xFFFFFFFFFFFFFFF8;
  v214 = *(_QWORD *)v213;
  *(_BYTE *)(v212 + 8) = *(_BYTE *)(v213 + 8);
  *(_QWORD *)v212 = v214;
  *(_BYTE *)(v212 + 9) = *(_BYTE *)(v213 + 9);
  v215 = (v212 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v216 = (v213 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v217 = *(_DWORD *)v216;
  *(_BYTE *)(v215 + 4) = *(_BYTE *)(v216 + 4);
  *(_DWORD *)v215 = v217;
  v218 = (_QWORD *)((v212 + 25) & 0xFFFFFFFFFFFFFFF8);
  v219 = (_QWORD *)((v213 + 25) & 0xFFFFFFFFFFFFFFF8);
  *v218 = *v219;
  v218[1] = v219[1];
  v220 = *(_QWORD *)(v47 - 120);
  v221 = v182 + v220;
  v222 = (__int128 *)(v183 + v220);
  v223 = *((_QWORD *)v222 + 2);
  if (v223 >= 0xFFFFFFFF)
    LODWORD(v223) = -1;
  v224 = v223 - 1;
  swift_bridgeObjectRetain();
  if (v224 < 0)
  {
    *(_QWORD *)v221 = *(_QWORD *)v222;
    *(_BYTE *)(v221 + 8) = *((_BYTE *)v222 + 8);
    *(_BYTE *)(v221 + 9) = *((_BYTE *)v222 + 9);
    v237 = (void *)*((_QWORD *)v222 + 2);
    v238 = v237;
    *(_QWORD *)(v221 + 16) = v237;
    v239 = (void *)*((_QWORD *)v222 + 3);
    v240 = v239;
    *(_QWORD *)(v221 + 24) = v239;
    *(_BYTE *)(v221 + 32) = *((_BYTE *)v222 + 32);
    *(_BYTE *)(v221 + 33) = *((_BYTE *)v222 + 33);
    *(_BYTE *)(v221 + 34) = *((_BYTE *)v222 + 34);
    *(_QWORD *)(v221 + 40) = *((_QWORD *)v222 + 5);
    *(_QWORD *)(v221 + 48) = *((_QWORD *)v222 + 6);
    *(_QWORD *)(v221 + 56) = *((_QWORD *)v222 + 7);
    v241 = *((_QWORD *)v222 + 8);
    *(_QWORD *)(v47 - 120) = v241;
    *(_QWORD *)(v221 + 64) = v241;
    *(_BYTE *)(v221 + 72) = *((_BYTE *)v222 + 72);
    *(_QWORD *)(v221 + 80) = *((_QWORD *)v222 + 10);
    *(_QWORD *)(v221 + 88) = *((_QWORD *)v222 + 11);
    v242 = *((_QWORD *)v222 + 12);
    *(_QWORD *)(v47 - 96) = v242;
    *(_QWORD *)(v221 + 96) = v242;
    *(_BYTE *)(v221 + 104) = *((_BYTE *)v222 + 104);
    *(_BYTE *)(v221 + 105) = *((_BYTE *)v222 + 105);
    *(_QWORD *)(v221 + 112) = *((_QWORD *)v222 + 14);
    *(_QWORD *)(v221 + 120) = *((_QWORD *)v222 + 15);
    *(_QWORD *)(v221 + 128) = *((_QWORD *)v222 + 16);
    *(_QWORD *)(v221 + 136) = *((_QWORD *)v222 + 17);
    *(_QWORD *)(v221 + 144) = *((_QWORD *)v222 + 18);
    *(_QWORD *)(v221 + 152) = *((_QWORD *)v222 + 19);
    *(_QWORD *)(v221 + 160) = *((_QWORD *)v222 + 20);
    *(_QWORD *)(v221 + 168) = *((_QWORD *)v222 + 21);
    *(_BYTE *)(v221 + 176) = *((_BYTE *)v222 + 176);
    *(_QWORD *)(v221 + 184) = *((_QWORD *)v222 + 23);
    v243 = *((_QWORD *)v222 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v244 = *(id *)(v47 - 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v243)
    {
      *(_QWORD *)(v221 + 192) = v243;
      *(_QWORD *)(v221 + 200) = *((_QWORD *)v222 + 25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v221 + 192) = v222[12];
    }
    *(_QWORD *)(v221 + 208) = *((_QWORD *)v222 + 26);
    *(_QWORD *)(v221 + 216) = *((_QWORD *)v222 + 27);
    *(_QWORD *)(v221 + 224) = *((_QWORD *)v222 + 28);
    *(_QWORD *)(v221 + 232) = *((_QWORD *)v222 + 29);
    *(_QWORD *)(v221 + 240) = *((_QWORD *)v222 + 30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v225 = *v222;
    v226 = v222[1];
    v227 = v222[3];
    *(_OWORD *)(v221 + 32) = v222[2];
    *(_OWORD *)(v221 + 48) = v227;
    *(_OWORD *)v221 = v225;
    *(_OWORD *)(v221 + 16) = v226;
    v228 = v222[4];
    v229 = v222[5];
    v230 = v222[7];
    *(_OWORD *)(v221 + 96) = v222[6];
    *(_OWORD *)(v221 + 112) = v230;
    *(_OWORD *)(v221 + 64) = v228;
    *(_OWORD *)(v221 + 80) = v229;
    v231 = v222[8];
    v232 = v222[9];
    v233 = v222[11];
    *(_OWORD *)(v221 + 160) = v222[10];
    *(_OWORD *)(v221 + 176) = v233;
    *(_OWORD *)(v221 + 128) = v231;
    *(_OWORD *)(v221 + 144) = v232;
    v234 = v222[12];
    v235 = v222[13];
    v236 = v222[14];
    *(_QWORD *)(v221 + 240) = *((_QWORD *)v222 + 30);
    *(_OWORD *)(v221 + 208) = v235;
    *(_OWORD *)(v221 + 224) = v236;
    *(_OWORD *)(v221 + 192) = v234;
  }
  v245 = (_OWORD *)((v221 + 255) & 0xFFFFFFFFFFFFFFF8);
  v246 = (__int128 *)(((unint64_t)v222 + 255) & 0xFFFFFFFFFFFFFFF8);
  v247 = *v246;
  *(_OWORD *)((char *)v245 + 9) = *(__int128 *)((char *)v246 + 9);
  *v245 = v247;
  v248 = (v221 + 287) & 0xFFFFFFFFFFFFFFF8;
  v249 = ((unint64_t)v222 + 287) & 0xFFFFFFFFFFFFFFF8;
  v250 = *(_OWORD *)v249;
  *(_BYTE *)(v248 + 16) = *(_BYTE *)(v249 + 16);
  *(_OWORD *)v248 = v250;
  v251 = (_QWORD *)((v221 + 311) & 0xFFFFFFFFFFFFF8);
  v252 = ((unint64_t)v222 + 311) & 0xFFFFFFFFFFFFF8;
  v253 = *(_QWORD *)v252;
  v252 += 15;
  *v251 = v253;
  v254 = (_QWORD *)(((unint64_t)v251 + 15) & 0xFFFFFFFFFFFFFFF8);
  v255 = *(_QWORD *)(v252 & 0xFFFFFFFFFFFFFFF8);
  v256 = *(_QWORD *)((v252 & 0xFFFFFFFFFFFFFFF8) + 8);
  sub_23AA7F2D4(v255, v256);
  *v254 = v255;
  v254[1] = v256;
  v257 = (_QWORD *)((v271 + *(_QWORD *)(v47 - 152)) & 0xFFFFFFFFFFFFF8);
  v258 = (_QWORD *)((v271 + *(_QWORD *)(v47 - 112)) & 0xFFFFFFFFFFFFF8);
  *v258 = *v257;
  v259 = (_QWORD *)(((unint64_t)v258 + 15) & 0xFFFFFFFFFFFFFFF8);
  v260 = (_QWORD *)(((unint64_t)v257 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v259 = *v260;
  v259[1] = v260[1];
  JUMPOUT(0x23AF304E4);
}

void sub_23AF2F22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v31 = *(_QWORD *)(v30 - 104);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(a29 + 16))(v31, v29, *(_QWORD *)(v30 - 168));
  v32 = *(_QWORD *)(v30 - 136);
  v33 = v32 + v31;
  v34 = v32 + v29;
  *(_BYTE *)v33 = *(_BYTE *)v34;
  v33 &= 0xFFFFFFFFFFFFFFF8;
  v34 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v33 + 8) = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v33 + 16) = *(_QWORD *)(v34 + 16);
  JUMPOUT(0x23AF304E0);
}

void sub_23AF2F280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;

  v31 = *(_QWORD *)(v30 - 104);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(a29 + 16))(v31, v29, *(_QWORD *)(v30 - 168));
  v32 = *(_QWORD *)(v30 - 136);
  v33 = (_QWORD *)((v31 + v32 + 7) & 0xFFFFFFFFFFFFFFF8);
  v34 = (_QWORD *)((v29 + v32 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v33 = *v34;
  v33[1] = v34[1];
  JUMPOUT(0x23AF304E0);
}

void sub_23AF2F2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v31 = *(_QWORD *)(v30 - 104);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(a29 + 16))(v31, v29, *(_QWORD *)(v30 - 168));
  v32 = *(_QWORD *)(v30 - 136);
  v33 = v32 + v31;
  v34 = v32 + v29;
  *(_BYTE *)v33 = *(_BYTE *)v34;
  v33 &= 0xFFFFFFFFFFFFFFF8;
  v34 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v33 + 8) = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v33 + 16) = *(_QWORD *)(v34 + 16);
  JUMPOUT(0x23AF304E0);
}

void sub_23AF2F328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;

  v31 = *(_QWORD *)(v30 - 104);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(a29 + 16))(v31, v29, *(_QWORD *)(v30 - 168));
  v32 = *(_QWORD *)(v30 - 136);
  v33 = (_QWORD *)((v31 + v32 + 7) & 0xFFFFFFFFFFFFFFF8);
  v34 = (_QWORD *)((v29 + v32 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v33 = *v34;
  v33[1] = v34[1];
  JUMPOUT(0x23AF304E0);
}

void sub_23AF2F37C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,size_t __n,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  void *v80;
  const void *v81;
  unsigned int (*v82)(const void *, uint64_t, uint64_t);
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  __int128 *v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  void *v123;
  id v124;
  void *v125;
  id v126;
  uint64_t v127;
  id v128;
  _OWORD *v129;
  __int128 *v130;
  __int128 v131;
  unint64_t v132;
  unint64_t v133;
  __int128 v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE *v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  unint64_t v176;
  unint64_t v177;
  void *v178;
  const void *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  unint64_t v189;
  uint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  int v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  __int128 *v202;
  unint64_t v203;
  int v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  void *v217;
  id v218;
  void *v219;
  id v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  id v224;
  _OWORD *v225;
  __int128 *v226;
  __int128 v227;
  unint64_t v228;
  unint64_t v229;
  __int128 v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  unint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  void (*v246)(uint64_t, uint64_t, uint64_t);
  void (*v247)(uint64_t, uint64_t, uint64_t);

  v244 = v35;
  *(_QWORD *)(v44 - 128) = v38;
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(a30 + 16);
  v46 = *(_QWORD *)(v44 - 160);
  v45(v39, v40, v46);
  v47 = (a19 + v39) & v37;
  *(_QWORD *)(v44 - 192) = v45;
  *(_QWORD *)(v44 - 184) = v37;
  v48 = (a19 + v40) & v37;
  v45(v47, v48, v46);
  v49 = *(_QWORD *)(v44 - 144);
  v50 = (v47 + a31 + v49) & v42;
  *(_QWORD *)(v44 - 176) = v42;
  v51 = (v48 + a31 + v49) & v42;
  v246 = *(void (**)(uint64_t, uint64_t, uint64_t))(a15 + 16);
  v246(v50, v51, a22);
  v52 = (_QWORD *)((a20 + v50) & 0xFFFFFFFFFFFFFFF8);
  v53 = (_QWORD *)((a20 + v51) & 0xFFFFFFFFFFFFFFF8);
  *v52 = *v53;
  v54 = ((unint64_t)v52 + a21) & v41;
  *(_QWORD *)(v44 - 168) = v41;
  v55 = ((unint64_t)v53 + a21) & v41;
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(a16 + 16);
  swift_bridgeObjectRetain();
  v247 = v56;
  v56(v54, v55, a24);
  v57 = (_QWORD *)((a23 + v54) & 0xFFFFFFFFFFFFF8);
  v58 = (_QWORD *)((a23 + v55) & 0xFFFFFFFFFFFFF8);
  *v57 = *v58;
  v59 = (_QWORD *)(((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8);
  v60 = (_QWORD *)(((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v59 = *v60;
  v59[1] = v60[1];
  v61 = (_QWORD *)(a25 + v50);
  *v61 = *(_QWORD *)(a25 + v51);
  v61[1] = *(_QWORD *)(a25 + v51 + 8);
  v62 = *(_QWORD *)(v44 - 96);
  v63 = (v62 + a25 + v50) & v36;
  *(_QWORD *)(v44 - 136) = v36;
  v64 = (v62 + a25 + v51) & v36;
  *(_BYTE *)v63 = *(_BYTE *)v64;
  v65 = v63 | 4;
  LODWORD(v62) = *(_DWORD *)(v64 | 4);
  *(_BYTE *)(v65 + 4) = *(_BYTE *)((v64 | 4) + 4);
  *(_DWORD *)v65 = v62;
  *(_WORD *)(v63 + 10) = *(_WORD *)(v64 + 10);
  v242 = v63;
  v66 = (a32 + v63) & v43;
  v67 = (a32 + v64) & v43;
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(a27 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v68(v66, v67, a28);
  v69 = (a33 + v66) & v43;
  v70 = (a33 + v67) & v43;
  v68(v69, v70, a28);
  v71 = (_BYTE *)(v69 + a34);
  *v71 = *(_BYTE *)(v70 + a34);
  v71[1] = *(_BYTE *)(v70 + a34 + 1);
  v71[2] = *(_BYTE *)(v70 + a34 + 2);
  v71[3] = *(_BYTE *)(v70 + a34 + 3);
  v71[4] = *(_BYTE *)(v70 + a34 + 4);
  v72 = (v69 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  v73 = (v70 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v72 = *(_QWORD *)v73;
  *(_QWORD *)(v72 + 8) = *(_QWORD *)(v73 + 8);
  *(_BYTE *)(v72 + 16) = *(_BYTE *)(v73 + 16);
  *(_BYTE *)(v72 + 17) = *(_BYTE *)(v73 + 17);
  *(_BYTE *)(v72 + 18) = *(_BYTE *)(v73 + 18);
  *(_BYTE *)(v72 + 19) = *(_BYTE *)(v73 + 19);
  v74 = (v72 + 27) & 0xFFFFFFFFFFFFFFF8;
  v75 = (v73 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *(_BYTE *)(v74 + 8) = *(_BYTE *)(v75 + 8);
  *(_BYTE *)(v74 + 9) = *(_BYTE *)(v75 + 9);
  *(_BYTE *)(v74 + 10) = *(_BYTE *)(v75 + 10);
  *(_BYTE *)(v74 + 11) = *(_BYTE *)(v75 + 11);
  *(_BYTE *)(v74 + 12) = *(_BYTE *)(v75 + 12);
  v76 = (_QWORD *)((v72 + 47) & 0xFFFFFFFFFFFFF8);
  v77 = (_QWORD *)((v73 + 47) & 0xFFFFFFFFFFFFF8);
  *v76 = *v77;
  v78 = ((unint64_t)v76 + 15) & 0xFFFFFFFFFFFFFFF8;
  v79 = ((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v78 = *(_QWORD *)v79;
  *(_BYTE *)(v78 + 8) = *(_BYTE *)(v79 + 8);
  *(_BYTE *)(v78 + 9) = *(_BYTE *)(v79 + 9);
  v80 = (void *)((a35 + v78) & v43);
  *(_QWORD *)(v44 - 144) = v43;
  v81 = (const void *)((a35 + v79) & v43);
  v82 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(a27 + 48);
  swift_bridgeObjectRetain();
  if (v82(v81, 1, a28))
  {
    memcpy(v80, v81, __n);
  }
  else
  {
    v68((uint64_t)v80, (uint64_t)v81, a28);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(a27 + 56))(v80, 0, 1, a28);
  }
  v83 = *(_QWORD *)(v44 - 200);
  v84 = (_QWORD *)(((unint64_t)v80 + v83) & 0xFFFFFFFFFFFFFFF8);
  v85 = (_QWORD *)(((unint64_t)v81 + v83) & 0xFFFFFFFFFFFFFFF8);
  *v84 = *v85;
  v86 = ((unint64_t)v84 + 15) & 0xFFFFFFFFFFFFFFF8;
  v87 = ((unint64_t)v85 + 15) & 0xFFFFFFFFFFFFFFF8;
  v88 = *(_QWORD *)v87;
  *(_BYTE *)(v86 + 8) = *(_BYTE *)(v87 + 8);
  *(_QWORD *)v86 = v88;
  v89 = (_QWORD *)(((unint64_t)v84 + 31) & 0xFFFFFFFFFFFFF8);
  v90 = (_QWORD *)(((unint64_t)v85 + 31) & 0xFFFFFFFFFFFFF8);
  *v89 = *v90;
  v91 = ((unint64_t)v89 + 15) & 0xFFFFFFFFFFFFFFF8;
  v92 = (uint64_t *)(((unint64_t)v90 + 15) & 0xFFFFFFFFFFFFFFF8);
  v93 = v92[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v94 = *(_QWORD *)(v44 - 168);
  if ((v93 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v91 = *(_OWORD *)v92;
  }
  else
  {
    v95 = *v92;
    sub_23AAAE668(*v92, v93);
    *(_QWORD *)v91 = v95;
    *(_QWORD *)(v91 + 8) = v93;
  }
  v96 = (v91 + 19) & 0xFFFFFFFFFFFFFFF8;
  v97 = ((unint64_t)v92 + 19) & 0xFFFFFFFFFFFFFFF8;
  v98 = *(_QWORD *)v97;
  *(_BYTE *)(v96 + 8) = *(_BYTE *)(v97 + 8);
  *(_QWORD *)v96 = v98;
  *(_BYTE *)(v96 + 9) = *(_BYTE *)(v97 + 9);
  v99 = (v96 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v100 = (v97 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v101 = *(_DWORD *)v100;
  *(_BYTE *)(v99 + 4) = *(_BYTE *)(v100 + 4);
  *(_DWORD *)v99 = v101;
  v102 = (_QWORD *)((v96 + 25) & 0xFFFFFFFFFFFFFFF8);
  v103 = (_QWORD *)((v97 + 25) & 0xFFFFFFFFFFFFFFF8);
  *v102 = *v103;
  v102[1] = v103[1];
  v104 = *(_QWORD *)(v44 - 120);
  v105 = v104 + v242;
  v106 = (__int128 *)(v104 + v64);
  v107 = *(_QWORD *)(v104 + v64 + 16);
  if (v107 >= 0xFFFFFFFF)
    LODWORD(v107) = -1;
  v108 = v107 - 1;
  swift_bridgeObjectRetain();
  v109 = *(_QWORD *)(v44 - 112);
  if (v108 < 0)
  {
    v241 = (uint64_t)v82;
    *(_QWORD *)v105 = *(_QWORD *)v106;
    *(_BYTE *)(v105 + 8) = *((_BYTE *)v106 + 8);
    *(_BYTE *)(v105 + 9) = *((_BYTE *)v106 + 9);
    v123 = (void *)*((_QWORD *)v106 + 2);
    v124 = v123;
    *(_QWORD *)(v105 + 16) = v123;
    v125 = (void *)*((_QWORD *)v106 + 3);
    v126 = v125;
    *(_QWORD *)(v105 + 24) = v125;
    *(_BYTE *)(v105 + 32) = *((_BYTE *)v106 + 32);
    *(_BYTE *)(v105 + 33) = *((_BYTE *)v106 + 33);
    *(_BYTE *)(v105 + 34) = *((_BYTE *)v106 + 34);
    *(_QWORD *)(v105 + 40) = *((_QWORD *)v106 + 5);
    *(_QWORD *)(v105 + 48) = *((_QWORD *)v106 + 6);
    *(_QWORD *)(v105 + 56) = *((_QWORD *)v106 + 7);
    *(_QWORD *)(v105 + 64) = *((_QWORD *)v106 + 8);
    *(_BYTE *)(v105 + 72) = *((_BYTE *)v106 + 72);
    *(_QWORD *)(v105 + 80) = *((_QWORD *)v106 + 10);
    *(_QWORD *)(v105 + 88) = *((_QWORD *)v106 + 11);
    v243 = (void *)*((_QWORD *)v106 + 12);
    *(_QWORD *)(v105 + 96) = v243;
    *(_BYTE *)(v105 + 104) = *((_BYTE *)v106 + 104);
    *(_BYTE *)(v105 + 105) = *((_BYTE *)v106 + 105);
    *(_QWORD *)(v105 + 112) = *((_QWORD *)v106 + 14);
    *(_QWORD *)(v105 + 120) = *((_QWORD *)v106 + 15);
    *(_QWORD *)(v105 + 128) = *((_QWORD *)v106 + 16);
    *(_QWORD *)(v105 + 136) = *((_QWORD *)v106 + 17);
    *(_QWORD *)(v105 + 144) = *((_QWORD *)v106 + 18);
    *(_QWORD *)(v105 + 152) = *((_QWORD *)v106 + 19);
    *(_QWORD *)(v105 + 160) = *((_QWORD *)v106 + 20);
    *(_QWORD *)(v105 + 168) = *((_QWORD *)v106 + 21);
    *(_BYTE *)(v105 + 176) = *((_BYTE *)v106 + 176);
    *(_QWORD *)(v105 + 184) = *((_QWORD *)v106 + 23);
    v127 = *((_QWORD *)v106 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v128 = v243;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v127)
    {
      *(_QWORD *)(v105 + 192) = v127;
      *(_QWORD *)(v105 + 200) = *((_QWORD *)v106 + 25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v105 + 192) = v106[12];
    }
    v109 = *(_QWORD *)(v44 - 112);
    v122 = *(_QWORD *)(v44 - 104);
    v82 = (unsigned int (*)(const void *, uint64_t, uint64_t))v241;
    v94 = *(_QWORD *)(v44 - 168);
    *(_QWORD *)(v105 + 208) = *((_QWORD *)v106 + 26);
    *(_QWORD *)(v105 + 216) = *((_QWORD *)v106 + 27);
    *(_QWORD *)(v105 + 224) = *((_QWORD *)v106 + 28);
    *(_QWORD *)(v105 + 232) = *((_QWORD *)v106 + 29);
    *(_QWORD *)(v105 + 240) = *((_QWORD *)v106 + 30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v110 = *v106;
    v111 = v106[1];
    v112 = v106[3];
    *(_OWORD *)(v105 + 32) = v106[2];
    *(_OWORD *)(v105 + 48) = v112;
    *(_OWORD *)v105 = v110;
    *(_OWORD *)(v105 + 16) = v111;
    v113 = v106[4];
    v114 = v106[5];
    v115 = v106[7];
    *(_OWORD *)(v105 + 96) = v106[6];
    *(_OWORD *)(v105 + 112) = v115;
    *(_OWORD *)(v105 + 64) = v113;
    *(_OWORD *)(v105 + 80) = v114;
    v116 = v106[8];
    v117 = v106[9];
    v118 = v106[11];
    *(_OWORD *)(v105 + 160) = v106[10];
    *(_OWORD *)(v105 + 176) = v118;
    *(_OWORD *)(v105 + 128) = v116;
    *(_OWORD *)(v105 + 144) = v117;
    v119 = v106[12];
    v120 = v106[13];
    v121 = v106[14];
    *(_QWORD *)(v105 + 240) = *((_QWORD *)v106 + 30);
    *(_OWORD *)(v105 + 208) = v120;
    *(_OWORD *)(v105 + 224) = v121;
    *(_OWORD *)(v105 + 192) = v119;
    v122 = *(_QWORD *)(v44 - 104);
  }
  v129 = (_OWORD *)((v105 + 255) & 0xFFFFFFFFFFFFFFF8);
  v130 = (__int128 *)(((unint64_t)v106 + 255) & 0xFFFFFFFFFFFFFFF8);
  v131 = *v130;
  *(_OWORD *)((char *)v129 + 9) = *(__int128 *)((char *)v130 + 9);
  *v129 = v131;
  v132 = (v105 + 287) & 0xFFFFFFFFFFFFFFF8;
  v133 = ((unint64_t)v106 + 287) & 0xFFFFFFFFFFFFFFF8;
  v134 = *(_OWORD *)v133;
  *(_BYTE *)(v132 + 16) = *(_BYTE *)(v133 + 16);
  *(_OWORD *)v132 = v134;
  v135 = (_QWORD *)((v105 + 311) & 0xFFFFFFFFFFFFF8);
  v136 = ((unint64_t)v106 + 311) & 0xFFFFFFFFFFFFF8;
  v137 = *(_QWORD *)v136;
  v136 += 15;
  *v135 = v137;
  v138 = (_QWORD *)(((unint64_t)v135 + 15) & 0xFFFFFFFFFFFFFFF8);
  v139 = *(_QWORD *)(v136 & 0xFFFFFFFFFFFFFFF8);
  v140 = *(_QWORD *)((v136 & 0xFFFFFFFFFFFFFFF8) + 8);
  sub_23AA7F2D4(v139, v140);
  *v138 = v139;
  v138[1] = v140;
  v141 = (a11 + v122) & v244;
  v142 = *(_QWORD *)(v44 - 160);
  v143 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 - 192);
  v143(v141, (a11 + v109) & v244, v142);
  *(_QWORD *)(v44 - 112) = v141;
  v144 = *(_QWORD *)(v44 - 184);
  v145 = (a19 + v141) & v144;
  v245 = (a11 + v109) & v244;
  v146 = (a19 + v245) & v144;
  v143(v145, v146, v142);
  v147 = *(_QWORD *)(v44 - 176);
  v148 = (a12 + v145) & v147;
  v149 = (a12 + v146) & v147;
  v246(v148, v149, a22);
  v150 = (_QWORD *)((a20 + v148) & 0xFFFFFFFFFFFFFFF8);
  v151 = (_QWORD *)((a20 + v149) & 0xFFFFFFFFFFFFFFF8);
  *v150 = *v151;
  v152 = ((unint64_t)v150 + a21) & v94;
  v153 = ((unint64_t)v151 + a21) & v94;
  swift_bridgeObjectRetain();
  v247(v152, v153, a24);
  v154 = (_QWORD *)((a23 + v152) & 0xFFFFFFFFFFFFF8);
  v155 = (_QWORD *)((a23 + v153) & 0xFFFFFFFFFFFFF8);
  *v154 = *v155;
  v156 = (_QWORD *)(((unint64_t)v154 + 15) & 0xFFFFFFFFFFFFFFF8);
  v157 = (_QWORD *)(((unint64_t)v155 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v156 = *v157;
  v156[1] = v157[1];
  v158 = (_QWORD *)(v148 + a25);
  *v158 = *(_QWORD *)(v149 + a25);
  v158[1] = *(_QWORD *)(v149 + a25 + 8);
  v159 = *(_QWORD *)(v44 - 96);
  v161 = *(_QWORD *)(v44 - 144);
  v160 = *(_QWORD *)(v44 - 136);
  v162 = (v159 + v148 + a25) & v160;
  v163 = (v159 + v149 + a25) & v160;
  *(_BYTE *)v162 = *(_BYTE *)v163;
  v164 = v162 | 4;
  LODWORD(v159) = *(_DWORD *)(v163 | 4);
  *(_BYTE *)(v164 + 4) = *(_BYTE *)((v163 | 4) + 4);
  *(_DWORD *)v164 = v159;
  *(_WORD *)(v162 + 10) = *(_WORD *)(v163 + 10);
  v165 = (a32 + v162) & v161;
  v166 = (a32 + v163) & v161;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v68(v165, v166, a28);
  v167 = (a33 + v165) & v161;
  v168 = (a33 + v166) & v161;
  v68(v167, v168, a28);
  v169 = (_BYTE *)(v167 + a34);
  *v169 = *(_BYTE *)(v168 + a34);
  v169[1] = *(_BYTE *)(v168 + a34 + 1);
  v169[2] = *(_BYTE *)(v168 + a34 + 2);
  v169[3] = *(_BYTE *)(v168 + a34 + 3);
  v169[4] = *(_BYTE *)(v168 + a34 + 4);
  v170 = (v167 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  v171 = (v168 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v170 = *(_QWORD *)v171;
  *(_QWORD *)(v170 + 8) = *(_QWORD *)(v171 + 8);
  *(_BYTE *)(v170 + 16) = *(_BYTE *)(v171 + 16);
  *(_BYTE *)(v170 + 17) = *(_BYTE *)(v171 + 17);
  *(_BYTE *)(v170 + 18) = *(_BYTE *)(v171 + 18);
  *(_BYTE *)(v170 + 19) = *(_BYTE *)(v171 + 19);
  v172 = (v170 + 27) & 0xFFFFFFFFFFFFFFF8;
  v173 = (v171 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v172 = *(_QWORD *)v173;
  *(_BYTE *)(v172 + 8) = *(_BYTE *)(v173 + 8);
  *(_BYTE *)(v172 + 9) = *(_BYTE *)(v173 + 9);
  *(_BYTE *)(v172 + 10) = *(_BYTE *)(v173 + 10);
  *(_BYTE *)(v172 + 11) = *(_BYTE *)(v173 + 11);
  *(_BYTE *)(v172 + 12) = *(_BYTE *)(v173 + 12);
  v174 = (_QWORD *)((v170 + 47) & 0xFFFFFFFFFFFFF8);
  v175 = (_QWORD *)((v171 + 47) & 0xFFFFFFFFFFFFF8);
  *v174 = *v175;
  v176 = ((unint64_t)v174 + 15) & 0xFFFFFFFFFFFFFFF8;
  v177 = ((unint64_t)v175 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v176 = *(_QWORD *)v177;
  *(_BYTE *)(v176 + 8) = *(_BYTE *)(v177 + 8);
  *(_BYTE *)(v176 + 9) = *(_BYTE *)(v177 + 9);
  v178 = (void *)((a35 + v176) & v161);
  v179 = (const void *)((a35 + v177) & v161);
  swift_bridgeObjectRetain();
  if (v82(v179, 1, a28))
  {
    memcpy(v178, v179, __n);
  }
  else
  {
    v68((uint64_t)v178, (uint64_t)v179, a28);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(a27 + 56))(v178, 0, 1, a28);
  }
  v180 = *(_QWORD *)(v44 - 120);
  v181 = *(_QWORD *)(v44 - 200);
  v182 = (_QWORD *)(((unint64_t)v178 + v181) & 0xFFFFFFFFFFFFFFF8);
  v183 = (_QWORD *)(((unint64_t)v179 + v181) & 0xFFFFFFFFFFFFFFF8);
  *v182 = *v183;
  v184 = ((unint64_t)v182 + 15) & 0xFFFFFFFFFFFFFFF8;
  v185 = ((unint64_t)v183 + 15) & 0xFFFFFFFFFFFFFFF8;
  v186 = *(_QWORD *)v185;
  *(_BYTE *)(v184 + 8) = *(_BYTE *)(v185 + 8);
  *(_QWORD *)v184 = v186;
  v187 = (_QWORD *)(((unint64_t)v182 + 31) & 0xFFFFFFFFFFFFF8);
  v188 = (_QWORD *)(((unint64_t)v183 + 31) & 0xFFFFFFFFFFFFF8);
  *v187 = *v188;
  v189 = ((unint64_t)v187 + 15) & 0xFFFFFFFFFFFFFFF8;
  v190 = (uint64_t *)(((unint64_t)v188 + 15) & 0xFFFFFFFFFFFFFFF8);
  v191 = v190[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v191 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v189 = *(_OWORD *)v190;
  }
  else
  {
    v192 = *v190;
    sub_23AAAE668(*v190, v191);
    *(_QWORD *)v189 = v192;
    *(_QWORD *)(v189 + 8) = v191;
  }
  v193 = (v189 + 19) & 0xFFFFFFFFFFFFFFF8;
  v194 = ((unint64_t)v190 + 19) & 0xFFFFFFFFFFFFFFF8;
  v195 = *(_QWORD *)v194;
  *(_BYTE *)(v193 + 8) = *(_BYTE *)(v194 + 8);
  *(_QWORD *)v193 = v195;
  *(_BYTE *)(v193 + 9) = *(_BYTE *)(v194 + 9);
  v196 = (v193 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v197 = (v194 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v198 = *(_DWORD *)v197;
  *(_BYTE *)(v196 + 4) = *(_BYTE *)(v197 + 4);
  *(_DWORD *)v196 = v198;
  v199 = (_QWORD *)((v193 + 25) & 0xFFFFFFFFFFFFFFF8);
  v200 = (_QWORD *)((v194 + 25) & 0xFFFFFFFFFFFFFFF8);
  *v199 = *v200;
  v199[1] = v200[1];
  v201 = v162 + v180;
  v202 = (__int128 *)(v163 + v180);
  v203 = *((_QWORD *)v202 + 2);
  if (v203 >= 0xFFFFFFFF)
    LODWORD(v203) = -1;
  v204 = v203 - 1;
  swift_bridgeObjectRetain();
  if (v204 < 0)
  {
    *(_QWORD *)v201 = *(_QWORD *)v202;
    *(_BYTE *)(v201 + 8) = *((_BYTE *)v202 + 8);
    *(_BYTE *)(v201 + 9) = *((_BYTE *)v202 + 9);
    v217 = (void *)*((_QWORD *)v202 + 2);
    v218 = v217;
    *(_QWORD *)(v201 + 16) = v217;
    v219 = (void *)*((_QWORD *)v202 + 3);
    v220 = v219;
    *(_QWORD *)(v201 + 24) = v219;
    *(_BYTE *)(v201 + 32) = *((_BYTE *)v202 + 32);
    *(_BYTE *)(v201 + 33) = *((_BYTE *)v202 + 33);
    *(_BYTE *)(v201 + 34) = *((_BYTE *)v202 + 34);
    *(_QWORD *)(v201 + 40) = *((_QWORD *)v202 + 5);
    *(_QWORD *)(v201 + 48) = *((_QWORD *)v202 + 6);
    *(_QWORD *)(v201 + 56) = *((_QWORD *)v202 + 7);
    v221 = *((_QWORD *)v202 + 8);
    *(_QWORD *)(v44 - 120) = v221;
    *(_QWORD *)(v201 + 64) = v221;
    *(_BYTE *)(v201 + 72) = *((_BYTE *)v202 + 72);
    *(_QWORD *)(v201 + 80) = *((_QWORD *)v202 + 10);
    *(_QWORD *)(v201 + 88) = *((_QWORD *)v202 + 11);
    v222 = *((_QWORD *)v202 + 12);
    *(_QWORD *)(v44 - 96) = v222;
    *(_QWORD *)(v201 + 96) = v222;
    *(_BYTE *)(v201 + 104) = *((_BYTE *)v202 + 104);
    *(_BYTE *)(v201 + 105) = *((_BYTE *)v202 + 105);
    *(_QWORD *)(v201 + 112) = *((_QWORD *)v202 + 14);
    *(_QWORD *)(v201 + 120) = *((_QWORD *)v202 + 15);
    *(_QWORD *)(v201 + 128) = *((_QWORD *)v202 + 16);
    *(_QWORD *)(v201 + 136) = *((_QWORD *)v202 + 17);
    *(_QWORD *)(v201 + 144) = *((_QWORD *)v202 + 18);
    *(_QWORD *)(v201 + 152) = *((_QWORD *)v202 + 19);
    *(_QWORD *)(v201 + 160) = *((_QWORD *)v202 + 20);
    *(_QWORD *)(v201 + 168) = *((_QWORD *)v202 + 21);
    *(_BYTE *)(v201 + 176) = *((_BYTE *)v202 + 176);
    *(_QWORD *)(v201 + 184) = *((_QWORD *)v202 + 23);
    v223 = *((_QWORD *)v202 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v224 = *(id *)(v44 - 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v223)
    {
      *(_QWORD *)(v201 + 192) = v223;
      *(_QWORD *)(v201 + 200) = *((_QWORD *)v202 + 25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v201 + 192) = v202[12];
    }
    *(_QWORD *)(v201 + 208) = *((_QWORD *)v202 + 26);
    *(_QWORD *)(v201 + 216) = *((_QWORD *)v202 + 27);
    *(_QWORD *)(v201 + 224) = *((_QWORD *)v202 + 28);
    *(_QWORD *)(v201 + 232) = *((_QWORD *)v202 + 29);
    *(_QWORD *)(v201 + 240) = *((_QWORD *)v202 + 30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v205 = *v202;
    v206 = v202[1];
    v207 = v202[3];
    *(_OWORD *)(v201 + 32) = v202[2];
    *(_OWORD *)(v201 + 48) = v207;
    *(_OWORD *)v201 = v205;
    *(_OWORD *)(v201 + 16) = v206;
    v208 = v202[4];
    v209 = v202[5];
    v210 = v202[7];
    *(_OWORD *)(v201 + 96) = v202[6];
    *(_OWORD *)(v201 + 112) = v210;
    *(_OWORD *)(v201 + 64) = v208;
    *(_OWORD *)(v201 + 80) = v209;
    v211 = v202[8];
    v212 = v202[9];
    v213 = v202[11];
    *(_OWORD *)(v201 + 160) = v202[10];
    *(_OWORD *)(v201 + 176) = v213;
    *(_OWORD *)(v201 + 128) = v211;
    *(_OWORD *)(v201 + 144) = v212;
    v214 = v202[12];
    v215 = v202[13];
    v216 = v202[14];
    *(_QWORD *)(v201 + 240) = *((_QWORD *)v202 + 30);
    *(_OWORD *)(v201 + 208) = v215;
    *(_OWORD *)(v201 + 224) = v216;
    *(_OWORD *)(v201 + 192) = v214;
  }
  v225 = (_OWORD *)((v201 + 255) & 0xFFFFFFFFFFFFFFF8);
  v226 = (__int128 *)(((unint64_t)v202 + 255) & 0xFFFFFFFFFFFFFFF8);
  v227 = *v226;
  *(_OWORD *)((char *)v225 + 9) = *(__int128 *)((char *)v226 + 9);
  *v225 = v227;
  v228 = (v201 + 287) & 0xFFFFFFFFFFFFFFF8;
  v229 = ((unint64_t)v202 + 287) & 0xFFFFFFFFFFFFFFF8;
  v230 = *(_OWORD *)v229;
  *(_BYTE *)(v228 + 16) = *(_BYTE *)(v229 + 16);
  *(_OWORD *)v228 = v230;
  v231 = (_QWORD *)((v201 + 311) & 0xFFFFFFFFFFFFF8);
  v232 = ((unint64_t)v202 + 311) & 0xFFFFFFFFFFFFF8;
  v233 = *(_QWORD *)v232;
  v232 += 15;
  *v231 = v233;
  v234 = (_QWORD *)(((unint64_t)v231 + 15) & 0xFFFFFFFFFFFFFFF8);
  v235 = *(_QWORD *)(v232 & 0xFFFFFFFFFFFFFFF8);
  v236 = *(_QWORD *)((v232 & 0xFFFFFFFFFFFFFFF8) + 8);
  sub_23AA7F2D4(v235, v236);
  *v234 = v235;
  v234[1] = v236;
  v237 = (_QWORD *)((a13 + *(_QWORD *)(v44 - 112)) & 0xFFFFFFFFFFFFF8);
  v238 = (_QWORD *)((a13 + v245) & 0xFFFFFFFFFFFFF8);
  *v237 = *v238;
  v239 = (_QWORD *)(((unint64_t)v237 + 15) & 0xFFFFFFFFFFFFFFF8);
  v240 = (_QWORD *)(((unint64_t)v238 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v239 = *v240;
  v239[1] = v240[1];
  JUMPOUT(0x23AF304E4);
}

void sub_23AF2F68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(a30 + 16))(v31, v32, *(_QWORD *)(v33 - 160));
  *(_BYTE *)(a31 + v31) = *(_BYTE *)(a31 + v32);
  v34 = (a31 + v31) & 0xFFFFFFFFFFFFFFF8;
  v35 = (a31 + v32) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
  *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
  JUMPOUT(0x23AF304E4);
}

void sub_23AF2F6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(a30 + 16))(v31, v32, *(_QWORD *)(v33 - 160));
  v34 = (_QWORD *)((v31 + a31 + 7) & 0xFFFFFFFFFFFFFFF8);
  v35 = (_QWORD *)((v32 + a31 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v34 = *v35;
  v34[1] = v35[1];
  JUMPOUT(0x23AF304E4);
}

void sub_23AF2F72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(a30 + 16))(v31, v32, *(_QWORD *)(v33 - 160));
  *(_BYTE *)(a31 + v31) = *(_BYTE *)(a31 + v32);
  v34 = (a31 + v31) & 0xFFFFFFFFFFFFFFF8;
  v35 = (a31 + v32) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
  *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
  JUMPOUT(0x23AF304E4);
}

void sub_23AF2F77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(a30 + 16))(v31, v32, *(_QWORD *)(v33 - 160));
  v34 = (_QWORD *)((v31 + a31 + 7) & 0xFFFFFFFFFFFFFFF8);
  v35 = (_QWORD *)((v32 + a31 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v34 = *v35;
  v34[1] = v35[1];
  JUMPOUT(0x23AF304E4);
}

_DWORD *sub_23AF31584(_DWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v37;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  uint64_t v43;

  v2 = result;
  if (result != a2)
  {
    v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v4 = *(_QWORD *)(v3 + 64);
    v5 = *(unsigned __int8 *)(v3 + 80);
    v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v7 = *(_DWORD *)(v6 + 80) & 0xF8;
    v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = v7 | v9 | 7;
    v11 = ((((*(_QWORD *)(v8 + 64) + 7 + ((v9 + 8 + ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    v12 = *(_QWORD *)(sub_23B1C5BDC() - 8);
    v13 = *(unsigned __int8 *)(v12 + 80);
    v43 = (v13 | 7) + 16;
    v14 = *(_QWORD *)(v12 + 64);
    if (*(_DWORD *)(v12 + 84))
      v15 = *(_QWORD *)(v12 + 64);
    else
      v15 = v14 + 1;
    v40 = (((((((((v15
                 + 7
                 + ((v13
                   + 10
                   + ((((((v14 + 12 + ((v14 + v13 + ((v13 + 12) & ~v13)) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v13)) & 0xFFFFFFFFFFFFFFF8)
               + 31) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 19) & 0xFFFFFFFFFFFFFFF8)
         + 25) & 0xFFFFFFFFFFFFFFF8;
    v16 = (((v40 + 327 + ((v43 + ((v4 + v10 + ((v4 + v5) & ~v5)) & ~v10) + v11) & ~(v13 | 7))) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8;
    v17 = ((v16 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    v18 = ((((v16 + 23 + ((v16 + 16 + (v10 | v5 | v13)) & ~(v10 | v5 | v13))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    v19 = (v4 & 0xFFFFFFFFFFFFFFF8) + 24;
    if (v19 <= ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
      v19 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    if (v19 > v17)
      v17 = v19;
    if (v17 > v18)
      v18 = v17;
    v42 = v2;
    v41 = v18;
    v39 = v18 | 1;
    v20 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v21 = *(_QWORD *)(v20 + 64);
    v22 = *(unsigned __int8 *)(v20 + 80);
    v23 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v24 = *(_DWORD *)(v23 + 80) & 0xF8;
    v25 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v26 = *(unsigned __int8 *)(v25 + 80);
    v27 = v24 | v26 | 7;
    v28 = (((v40
           + 327
           + ((v43
             + ((v21 + v27 + ((v21 + v22) & ~v22)) & ~v27)
             + ((((*(_QWORD *)(v25 + 64)
                 + 7
                 + ((v26 + 8 + ((*(_QWORD *)(v23 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v26)) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16) & ~(v13 | 7))) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8;
    v29 = ((v28 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    v30 = (v21 & 0xFFFFFFFFFFFFFFF8) + 24;
    if (v30 <= ((v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
      v30 = ((v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    if (v30 > v29)
      v29 = v30;
    if (v29 <= ((((v28 + 23 + ((v28 + 16 + (v22 | v13 | v27)) & ~(v22 | v13 | v27))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
              + 16)
      v31 = ((((v28 + 23 + ((v28 + 16 + (v22 | v13 | v27)) & ~(v22 | v13 | v27))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 16;
    else
      v31 = v29;
    if ((v31 | 1) <= v39)
      v32 = v39;
    else
      v32 = v31 | 1;
    v33 = *((unsigned __int8 *)v42 + v32);
    if (v33 >= 2)
    {
      if (v32 <= 3)
        v34 = v32;
      else
        v34 = 4;
      __asm { BR              X14 }
    }
    if (v33 == 1)
    {
      v35 = *((unsigned __int8 *)v42 + v31);
      if (v35 >= 6 && (_DWORD)v31 != 0)
        v35 = *v42 + 6;
      __asm { BR              X10 }
    }
    v37 = *((unsigned __int8 *)v42 + v41);
    if (v37 >= 6 && (_DWORD)v41 != 0)
      v37 = *v42 + 6;
    __asm { BR              X10 }
  }
  return result;
}

void sub_23AF33688(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,size_t __n,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  const void *v96;
  uint64_t (*v97)(const void *, uint64_t, uint64_t);
  int v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  __int128 *v122;
  unint64_t v123;
  int v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  void *v138;
  id v139;
  void *v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  _OWORD *v146;
  __int128 *v147;
  __int128 v148;
  unint64_t v149;
  unint64_t v150;
  __int128 v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(uint64_t, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(uint64_t, uint64_t, uint64_t);
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _BYTE *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  void *v199;
  const void *v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  unint64_t v209;
  uint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  int v218;
  _QWORD *v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  __int128 *v223;
  unint64_t v224;
  int v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  void *v238;
  id v239;
  void *v240;
  id v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  id v245;
  _OWORD *v246;
  __int128 *v247;
  __int128 v248;
  unint64_t v249;
  unint64_t v250;
  __int128 v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  unint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  uint64_t v262;

  v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 248) + 16);
  v55 = *(_QWORD *)(v53 - 144);
  v54(v51, v52, v55);
  *(_QWORD *)(v53 - 152) = v54;
  v54((a42 + v51) & a33, (a42 + v52) & a33, v55);
  v56 = *(_QWORD *)(v53 - 240);
  v57 = *(_QWORD *)(v53 - 112);
  v58 = (((a42 + v51) & a33) + v56 + v57) & a34;
  v59 = (((a42 + v52) & a33) + v56 + v57) & a34;
  v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(a30 + 16);
  *(_QWORD *)(v53 - 240) = v60;
  v60(v58, v59, a45);
  v61 = (_QWORD *)((a43 + v58) & 0xFFFFFFFFFFFFFFF8);
  v62 = (_QWORD *)((a43 + v59) & 0xFFFFFFFFFFFFFFF8);
  *v61 = *v62;
  v63 = *(_QWORD *)(v53 - 192);
  v64 = ((unint64_t)v61 + a44) & v63;
  v65 = ((unint64_t)v62 + a44) & v63;
  v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(a31 + 16);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v53 - 176) = v66;
  v66(v64, v65, a47);
  v67 = (_QWORD *)((a46 + v64) & 0xFFFFFFFFFFFFF8);
  v68 = (_QWORD *)((a46 + v65) & 0xFFFFFFFFFFFFF8);
  *v67 = *v68;
  v69 = (_QWORD *)(((unint64_t)v67 + 15) & 0xFFFFFFFFFFFFFFF8);
  v70 = (_QWORD *)(((unint64_t)v68 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v69 = *v70;
  v69[1] = v70[1];
  v71 = (_QWORD *)(a48 + v58);
  *v71 = *(_QWORD *)(a48 + v59);
  v71[1] = *(_QWORD *)(a48 + v59 + 8);
  v72 = *(_QWORD *)(v53 - 96);
  v73 = (v72 + a48 + v58) & v50;
  v74 = (v72 + a48 + v59) & v50;
  *(_BYTE *)v73 = *(_BYTE *)v74;
  v75 = v73 | 4;
  LODWORD(v72) = *(_DWORD *)(v74 | 4);
  *(_BYTE *)(v75 + 4) = *(_BYTE *)((v74 | 4) + 4);
  *(_DWORD *)v75 = v72;
  *(_WORD *)(v73 + 10) = *(_WORD *)(v74 + 10);
  v76 = *(_QWORD *)(v53 - 232);
  *(_QWORD *)(v53 - 256) = v74;
  *(_QWORD *)(v53 - 248) = v73;
  v77 = *(_QWORD *)(v53 - 168);
  v78 = (v76 + v73) & v77;
  v79 = (v76 + v74) & v77;
  v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(a50 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v81 = *(_QWORD *)(v53 - 128);
  v80(v78, v79, v81);
  v82 = *(_QWORD *)(v53 - 224);
  v83 = (v82 + v78) & v77;
  v84 = (v82 + v79) & v77;
  v80(v83, v84, v81);
  v85 = (_BYTE *)(v83 + a49);
  *v85 = *(_BYTE *)(v84 + a49);
  v85[1] = *(_BYTE *)(v84 + a49 + 1);
  v85[2] = *(_BYTE *)(v84 + a49 + 2);
  v85[3] = *(_BYTE *)(v84 + a49 + 3);
  v85[4] = *(_BYTE *)(v84 + a49 + 4);
  v86 = (v83 + a49 + 12) & 0xFFFFFFFFFFFFFFF8;
  v87 = (v84 + a49 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v86 = *(_QWORD *)v87;
  *(_QWORD *)(v86 + 8) = *(_QWORD *)(v87 + 8);
  *(_BYTE *)(v86 + 16) = *(_BYTE *)(v87 + 16);
  *(_BYTE *)(v86 + 17) = *(_BYTE *)(v87 + 17);
  *(_BYTE *)(v86 + 18) = *(_BYTE *)(v87 + 18);
  *(_BYTE *)(v86 + 19) = *(_BYTE *)(v87 + 19);
  v88 = (v86 + 27) & 0xFFFFFFFFFFFFFFF8;
  v89 = (v87 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v88 = *(_QWORD *)v89;
  *(_BYTE *)(v88 + 8) = *(_BYTE *)(v89 + 8);
  *(_BYTE *)(v88 + 9) = *(_BYTE *)(v89 + 9);
  *(_BYTE *)(v88 + 10) = *(_BYTE *)(v89 + 10);
  *(_BYTE *)(v88 + 11) = *(_BYTE *)(v89 + 11);
  *(_BYTE *)(v88 + 12) = *(_BYTE *)(v89 + 12);
  v90 = (_QWORD *)((v86 + 47) & 0xFFFFFFFFFFFFF8);
  v91 = (_QWORD *)((v87 + 47) & 0xFFFFFFFFFFFFF8);
  *v90 = *v91;
  v92 = ((unint64_t)v90 + 15) & 0xFFFFFFFFFFFFFFF8;
  v93 = ((unint64_t)v91 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v92 = *(_QWORD *)v93;
  *(_BYTE *)(v92 + 8) = *(_BYTE *)(v93 + 8);
  *(_BYTE *)(v92 + 9) = *(_BYTE *)(v93 + 9);
  v94 = *(_QWORD *)(v53 - 216);
  v95 = (void *)((v94 + v92) & v77);
  v96 = (const void *)((v94 + v93) & v77);
  v97 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(a50 + 48);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v53 - 200) = v97;
  v98 = v97(v96, 1, v81);
  v262 = v50;
  *(_QWORD *)(v53 - 112) = v80;
  v99 = *(_QWORD *)(v53 - 160);
  if (v98)
  {
    memcpy(v95, v96, __n);
  }
  else
  {
    v80((uint64_t)v95, (uint64_t)v96, v81);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(a50 + 56))(v95, 0, 1, v81);
  }
  v100 = *(_QWORD *)(v53 - 208);
  v101 = (_QWORD *)(((unint64_t)v95 + v100) & 0xFFFFFFFFFFFFFFF8);
  v102 = (_QWORD *)(((unint64_t)v96 + v100) & 0xFFFFFFFFFFFFFFF8);
  *v101 = *v102;
  v103 = ((unint64_t)v101 + 15) & 0xFFFFFFFFFFFFFFF8;
  v104 = ((unint64_t)v102 + 15) & 0xFFFFFFFFFFFFFFF8;
  v105 = *(_QWORD *)v104;
  *(_BYTE *)(v103 + 8) = *(_BYTE *)(v104 + 8);
  *(_QWORD *)v103 = v105;
  v106 = (_QWORD *)(((unint64_t)v101 + 31) & 0xFFFFFFFFFFFFF8);
  v107 = (_QWORD *)(((unint64_t)v102 + 31) & 0xFFFFFFFFFFFFF8);
  *v106 = *v107;
  v108 = ((unint64_t)v106 + 15) & 0xFFFFFFFFFFFFFFF8;
  v109 = (uint64_t *)(((unint64_t)v107 + 15) & 0xFFFFFFFFFFFFFFF8);
  v110 = v109[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v111 = *(_QWORD *)(v53 - 104);
  if ((v110 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v108 = *(_OWORD *)v109;
  }
  else
  {
    v112 = *v109;
    sub_23AAAE668(*v109, v110);
    *(_QWORD *)v108 = v112;
    *(_QWORD *)(v108 + 8) = v110;
  }
  v113 = (v108 + 19) & 0xFFFFFFFFFFFFFFF8;
  v114 = ((unint64_t)v109 + 19) & 0xFFFFFFFFFFFFFFF8;
  v115 = *(_QWORD *)v114;
  *(_BYTE *)(v113 + 8) = *(_BYTE *)(v114 + 8);
  *(_QWORD *)v113 = v115;
  *(_BYTE *)(v113 + 9) = *(_BYTE *)(v114 + 9);
  v116 = (v113 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v117 = (v114 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v118 = *(_DWORD *)v117;
  *(_BYTE *)(v116 + 4) = *(_BYTE *)(v117 + 4);
  *(_DWORD *)v116 = v118;
  v119 = (_QWORD *)((v113 + 25) & 0xFFFFFFFFFFFFFFF8);
  v120 = (_QWORD *)((v114 + 25) & 0xFFFFFFFFFFFFFFF8);
  *v119 = *v120;
  v119[1] = v120[1];
  v121 = v99 + *(_QWORD *)(v53 - 248);
  v122 = (__int128 *)(v99 + *(_QWORD *)(v53 - 256));
  v123 = *((_QWORD *)v122 + 2);
  if (v123 >= 0xFFFFFFFF)
    LODWORD(v123) = -1;
  v124 = v123 - 1;
  swift_bridgeObjectRetain();
  if (v124 < 0)
  {
    *(_QWORD *)v121 = *(_QWORD *)v122;
    *(_BYTE *)(v121 + 8) = *((_BYTE *)v122 + 8);
    *(_BYTE *)(v121 + 9) = *((_BYTE *)v122 + 9);
    v138 = (void *)*((_QWORD *)v122 + 2);
    v139 = v138;
    *(_QWORD *)(v121 + 16) = v138;
    v140 = (void *)*((_QWORD *)v122 + 3);
    v141 = v140;
    *(_QWORD *)(v121 + 24) = v140;
    *(_BYTE *)(v121 + 32) = *((_BYTE *)v122 + 32);
    *(_BYTE *)(v121 + 33) = *((_BYTE *)v122 + 33);
    *(_BYTE *)(v121 + 34) = *((_BYTE *)v122 + 34);
    *(_QWORD *)(v121 + 40) = *((_QWORD *)v122 + 5);
    *(_QWORD *)(v121 + 48) = *((_QWORD *)v122 + 6);
    *(_QWORD *)(v121 + 56) = *((_QWORD *)v122 + 7);
    v142 = *((_QWORD *)v122 + 8);
    *(_QWORD *)(v53 - 256) = v142;
    *(_QWORD *)(v121 + 64) = v142;
    *(_BYTE *)(v121 + 72) = *((_BYTE *)v122 + 72);
    *(_QWORD *)(v121 + 80) = *((_QWORD *)v122 + 10);
    *(_QWORD *)(v121 + 88) = *((_QWORD *)v122 + 11);
    v143 = *((_QWORD *)v122 + 12);
    *(_QWORD *)(v53 - 248) = v143;
    *(_QWORD *)(v121 + 96) = v143;
    *(_BYTE *)(v121 + 104) = *((_BYTE *)v122 + 104);
    *(_BYTE *)(v121 + 105) = *((_BYTE *)v122 + 105);
    *(_QWORD *)(v121 + 112) = *((_QWORD *)v122 + 14);
    *(_QWORD *)(v121 + 120) = *((_QWORD *)v122 + 15);
    *(_QWORD *)(v121 + 128) = *((_QWORD *)v122 + 16);
    *(_QWORD *)(v121 + 136) = *((_QWORD *)v122 + 17);
    *(_QWORD *)(v121 + 144) = *((_QWORD *)v122 + 18);
    *(_QWORD *)(v121 + 152) = *((_QWORD *)v122 + 19);
    *(_QWORD *)(v121 + 160) = *((_QWORD *)v122 + 20);
    *(_QWORD *)(v121 + 168) = *((_QWORD *)v122 + 21);
    *(_BYTE *)(v121 + 176) = *((_BYTE *)v122 + 176);
    *(_QWORD *)(v121 + 184) = *((_QWORD *)v122 + 23);
    v144 = *((_QWORD *)v122 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v145 = *(id *)(v53 - 248);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v144)
    {
      *(_QWORD *)(v121 + 192) = v144;
      *(_QWORD *)(v121 + 200) = *((_QWORD *)v122 + 25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v121 + 192) = v122[12];
    }
    v137 = *(_QWORD *)(v53 - 128);
    v51 = *(_QWORD *)(v53 - 120);
    v111 = *(_QWORD *)(v53 - 104);
    *(_QWORD *)(v121 + 208) = *((_QWORD *)v122 + 26);
    *(_QWORD *)(v121 + 216) = *((_QWORD *)v122 + 27);
    *(_QWORD *)(v121 + 224) = *((_QWORD *)v122 + 28);
    *(_QWORD *)(v121 + 232) = *((_QWORD *)v122 + 29);
    *(_QWORD *)(v121 + 240) = *((_QWORD *)v122 + 30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v125 = *v122;
    v126 = v122[1];
    v127 = v122[3];
    *(_OWORD *)(v121 + 32) = v122[2];
    *(_OWORD *)(v121 + 48) = v127;
    *(_OWORD *)v121 = v125;
    *(_OWORD *)(v121 + 16) = v126;
    v128 = v122[4];
    v129 = v122[5];
    v130 = v122[7];
    *(_OWORD *)(v121 + 96) = v122[6];
    *(_OWORD *)(v121 + 112) = v130;
    *(_OWORD *)(v121 + 64) = v128;
    *(_OWORD *)(v121 + 80) = v129;
    v131 = v122[8];
    v132 = v122[9];
    v133 = v122[11];
    *(_OWORD *)(v121 + 160) = v122[10];
    *(_OWORD *)(v121 + 176) = v133;
    *(_OWORD *)(v121 + 128) = v131;
    *(_OWORD *)(v121 + 144) = v132;
    v134 = v122[12];
    v135 = v122[13];
    v136 = v122[14];
    *(_QWORD *)(v121 + 240) = *((_QWORD *)v122 + 30);
    *(_OWORD *)(v121 + 208) = v135;
    *(_OWORD *)(v121 + 224) = v136;
    *(_OWORD *)(v121 + 192) = v134;
    v137 = *(_QWORD *)(v53 - 128);
  }
  v146 = (_OWORD *)((v121 + 255) & 0xFFFFFFFFFFFFFFF8);
  v147 = (__int128 *)(((unint64_t)v122 + 255) & 0xFFFFFFFFFFFFFFF8);
  v148 = *v147;
  *(_OWORD *)((char *)v146 + 9) = *(__int128 *)((char *)v147 + 9);
  *v146 = v148;
  v149 = (v121 + 287) & 0xFFFFFFFFFFFFFFF8;
  v150 = ((unint64_t)v122 + 287) & 0xFFFFFFFFFFFFFFF8;
  v151 = *(_OWORD *)v150;
  *(_BYTE *)(v149 + 16) = *(_BYTE *)(v150 + 16);
  *(_OWORD *)v149 = v151;
  v152 = (_QWORD *)((v121 + 311) & 0xFFFFFFFFFFFFF8);
  v153 = ((unint64_t)v122 + 311) & 0xFFFFFFFFFFFFF8;
  v154 = *(_QWORD *)v153;
  v153 += 15;
  *v152 = v154;
  v155 = (_QWORD *)(((unint64_t)v152 + 15) & 0xFFFFFFFFFFFFFFF8);
  v156 = *(_QWORD *)(v153 & 0xFFFFFFFFFFFFFFF8);
  v157 = *(_QWORD *)((v153 & 0xFFFFFFFFFFFFFFF8) + 8);
  sub_23AA7F2D4(v156, v157);
  *v155 = v156;
  v155[1] = v157;
  v158 = *(_QWORD *)(v53 - 184);
  v159 = (a23 + v51) & v158;
  v160 = (a23 + v111) & v158;
  v162 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 - 152);
  v161 = *(_QWORD *)(v53 - 144);
  v162(v159, v160, v161);
  *(_QWORD *)(v53 - 104) = v159;
  v163 = (a42 + v159) & a33;
  *(_QWORD *)(v53 - 184) = v160;
  v164 = (a42 + v160) & a33;
  v162(v163, v164, v161);
  v165 = (a25 + v163) & a34;
  v166 = (a25 + v164) & a34;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 - 240))(v165, v166, a45);
  v167 = (_QWORD *)((a43 + v165) & 0xFFFFFFFFFFFFFFF8);
  v168 = (_QWORD *)((a43 + v166) & 0xFFFFFFFFFFFFFFF8);
  *v167 = *v168;
  v169 = *(_QWORD *)(v53 - 192);
  v170 = ((unint64_t)v167 + a44) & v169;
  v171 = ((unint64_t)v168 + a44) & v169;
  swift_bridgeObjectRetain();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 - 176))(v170, v171, a47);
  v172 = (_QWORD *)((a46 + v170) & 0xFFFFFFFFFFFFF8);
  v173 = (_QWORD *)((a46 + v171) & 0xFFFFFFFFFFFFF8);
  *v172 = *v173;
  v174 = (_QWORD *)(((unint64_t)v172 + 15) & 0xFFFFFFFFFFFFFFF8);
  v175 = (_QWORD *)(((unint64_t)v173 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v174 = *v175;
  v174[1] = v175[1];
  v176 = (_QWORD *)(v165 + a48);
  *v176 = *(_QWORD *)(v166 + a48);
  v176[1] = *(_QWORD *)(v166 + a48 + 8);
  v177 = *(_QWORD *)(v53 - 96);
  v178 = (v177 + v165 + a48) & v262;
  v179 = (v177 + v166 + a48) & v262;
  *(_BYTE *)v178 = *(_BYTE *)v179;
  v180 = v178 | 4;
  LODWORD(v177) = *(_DWORD *)(v179 | 4);
  *(_BYTE *)(v180 + 4) = *(_BYTE *)((v179 | 4) + 4);
  *(_DWORD *)v180 = v177;
  *(_WORD *)(v178 + 10) = *(_WORD *)(v179 + 10);
  v181 = *(_QWORD *)(v53 - 232);
  v182 = *(_QWORD *)(v53 - 168);
  v183 = (v181 + v178) & v182;
  v184 = (v181 + v179) & v182;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v185 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 - 112);
  v185(v183, v184, v137);
  v186 = *(_QWORD *)(v53 - 224);
  v187 = (v186 + v183) & v182;
  v188 = (v186 + v184) & v182;
  v185(v187, v188, v137);
  v189 = (_BYTE *)(v187 + a49);
  *v189 = *(_BYTE *)(v188 + a49);
  v189[1] = *(_BYTE *)(v188 + a49 + 1);
  v189[2] = *(_BYTE *)(v188 + a49 + 2);
  v189[3] = *(_BYTE *)(v188 + a49 + 3);
  v189[4] = *(_BYTE *)(v188 + a49 + 4);
  v190 = (v187 + a49 + 12) & 0xFFFFFFFFFFFFFFF8;
  v191 = (v188 + a49 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v190 = *(_QWORD *)v191;
  *(_QWORD *)(v190 + 8) = *(_QWORD *)(v191 + 8);
  *(_BYTE *)(v190 + 16) = *(_BYTE *)(v191 + 16);
  *(_BYTE *)(v190 + 17) = *(_BYTE *)(v191 + 17);
  *(_BYTE *)(v190 + 18) = *(_BYTE *)(v191 + 18);
  *(_BYTE *)(v190 + 19) = *(_BYTE *)(v191 + 19);
  v192 = (v190 + 27) & 0xFFFFFFFFFFFFFFF8;
  v193 = (v191 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v192 = *(_QWORD *)v193;
  *(_BYTE *)(v192 + 8) = *(_BYTE *)(v193 + 8);
  *(_BYTE *)(v192 + 9) = *(_BYTE *)(v193 + 9);
  *(_BYTE *)(v192 + 10) = *(_BYTE *)(v193 + 10);
  *(_BYTE *)(v192 + 11) = *(_BYTE *)(v193 + 11);
  *(_BYTE *)(v192 + 12) = *(_BYTE *)(v193 + 12);
  v194 = (_QWORD *)((v190 + 47) & 0xFFFFFFFFFFFFF8);
  v195 = (_QWORD *)((v191 + 47) & 0xFFFFFFFFFFFFF8);
  *v194 = *v195;
  v196 = ((unint64_t)v194 + 15) & 0xFFFFFFFFFFFFFFF8;
  v197 = ((unint64_t)v195 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v196 = *(_QWORD *)v197;
  *(_BYTE *)(v196 + 8) = *(_BYTE *)(v197 + 8);
  *(_BYTE *)(v196 + 9) = *(_BYTE *)(v197 + 9);
  v198 = *(_QWORD *)(v53 - 216);
  v199 = (void *)((v198 + v196) & v182);
  v200 = (const void *)((v198 + v197) & v182);
  swift_bridgeObjectRetain();
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v53 - 200))(v200, 1, v137))
  {
    memcpy(v199, v200, __n);
  }
  else
  {
    v185((uint64_t)v199, (uint64_t)v200, v137);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(a50 + 56))(v199, 0, 1, v137);
  }
  v201 = *(_QWORD *)(v53 - 208);
  v202 = (_QWORD *)(((unint64_t)v199 + v201) & 0xFFFFFFFFFFFFFFF8);
  v203 = (_QWORD *)(((unint64_t)v200 + v201) & 0xFFFFFFFFFFFFFFF8);
  *v202 = *v203;
  v204 = ((unint64_t)v202 + 15) & 0xFFFFFFFFFFFFFFF8;
  v205 = ((unint64_t)v203 + 15) & 0xFFFFFFFFFFFFFFF8;
  v206 = *(_QWORD *)v205;
  *(_BYTE *)(v204 + 8) = *(_BYTE *)(v205 + 8);
  *(_QWORD *)v204 = v206;
  v207 = (_QWORD *)(((unint64_t)v202 + 31) & 0xFFFFFFFFFFFFF8);
  v208 = (_QWORD *)(((unint64_t)v203 + 31) & 0xFFFFFFFFFFFFF8);
  *v207 = *v208;
  v209 = ((unint64_t)v207 + 15) & 0xFFFFFFFFFFFFFFF8;
  v210 = (uint64_t *)(((unint64_t)v208 + 15) & 0xFFFFFFFFFFFFFFF8);
  v211 = v210[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v211 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v209 = *(_OWORD *)v210;
  }
  else
  {
    v212 = *v210;
    sub_23AAAE668(*v210, v211);
    *(_QWORD *)v209 = v212;
    *(_QWORD *)(v209 + 8) = v211;
  }
  v213 = (v209 + 19) & 0xFFFFFFFFFFFFFFF8;
  v214 = ((unint64_t)v210 + 19) & 0xFFFFFFFFFFFFFFF8;
  v215 = *(_QWORD *)v214;
  *(_BYTE *)(v213 + 8) = *(_BYTE *)(v214 + 8);
  *(_QWORD *)v213 = v215;
  *(_BYTE *)(v213 + 9) = *(_BYTE *)(v214 + 9);
  v216 = (v213 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v217 = (v214 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v218 = *(_DWORD *)v217;
  *(_BYTE *)(v216 + 4) = *(_BYTE *)(v217 + 4);
  *(_DWORD *)v216 = v218;
  v219 = (_QWORD *)((v213 + 25) & 0xFFFFFFFFFFFFFFF8);
  v220 = (_QWORD *)((v214 + 25) & 0xFFFFFFFFFFFFFFF8);
  *v219 = *v220;
  v219[1] = v220[1];
  v221 = *(_QWORD *)(v53 - 160);
  v222 = v178 + v221;
  v223 = (__int128 *)(v179 + v221);
  v224 = *(_QWORD *)(v179 + v221 + 16);
  if (v224 >= 0xFFFFFFFF)
    LODWORD(v224) = -1;
  v225 = v224 - 1;
  swift_bridgeObjectRetain();
  if (v225 < 0)
  {
    *(_QWORD *)v222 = *(_QWORD *)v223;
    *(_BYTE *)(v222 + 8) = *((_BYTE *)v223 + 8);
    *(_BYTE *)(v222 + 9) = *((_BYTE *)v223 + 9);
    v238 = (void *)*((_QWORD *)v223 + 2);
    v239 = v238;
    *(_QWORD *)(v222 + 16) = v238;
    v240 = (void *)*((_QWORD *)v223 + 3);
    v241 = v240;
    *(_QWORD *)(v222 + 24) = v240;
    *(_BYTE *)(v222 + 32) = *((_BYTE *)v223 + 32);
    *(_BYTE *)(v222 + 33) = *((_BYTE *)v223 + 33);
    *(_BYTE *)(v222 + 34) = *((_BYTE *)v223 + 34);
    *(_QWORD *)(v222 + 40) = *((_QWORD *)v223 + 5);
    *(_QWORD *)(v222 + 48) = *((_QWORD *)v223 + 6);
    *(_QWORD *)(v222 + 56) = *((_QWORD *)v223 + 7);
    v242 = *((_QWORD *)v223 + 8);
    *(_QWORD *)(v53 - 112) = v242;
    *(_QWORD *)(v222 + 64) = v242;
    *(_BYTE *)(v222 + 72) = *((_BYTE *)v223 + 72);
    *(_QWORD *)(v222 + 80) = *((_QWORD *)v223 + 10);
    *(_QWORD *)(v222 + 88) = *((_QWORD *)v223 + 11);
    v243 = *((_QWORD *)v223 + 12);
    *(_QWORD *)(v53 - 96) = v243;
    *(_QWORD *)(v222 + 96) = v243;
    *(_BYTE *)(v222 + 104) = *((_BYTE *)v223 + 104);
    *(_BYTE *)(v222 + 105) = *((_BYTE *)v223 + 105);
    *(_QWORD *)(v222 + 112) = *((_QWORD *)v223 + 14);
    *(_QWORD *)(v222 + 120) = *((_QWORD *)v223 + 15);
    *(_QWORD *)(v222 + 128) = *((_QWORD *)v223 + 16);
    *(_QWORD *)(v222 + 136) = *((_QWORD *)v223 + 17);
    *(_QWORD *)(v222 + 144) = *((_QWORD *)v223 + 18);
    *(_QWORD *)(v222 + 152) = *((_QWORD *)v223 + 19);
    *(_QWORD *)(v222 + 160) = *((_QWORD *)v223 + 20);
    *(_QWORD *)(v222 + 168) = *((_QWORD *)v223 + 21);
    *(_BYTE *)(v222 + 176) = *((_BYTE *)v223 + 176);
    *(_QWORD *)(v222 + 184) = *((_QWORD *)v223 + 23);
    v244 = *((_QWORD *)v223 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v245 = *(id *)(v53 - 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v244)
    {
      *(_QWORD *)(v222 + 192) = v244;
      *(_QWORD *)(v222 + 200) = *((_QWORD *)v223 + 25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v222 + 192) = v223[12];
    }
    *(_QWORD *)(v222 + 208) = *((_QWORD *)v223 + 26);
    *(_QWORD *)(v222 + 216) = *((_QWORD *)v223 + 27);
    *(_QWORD *)(v222 + 224) = *((_QWORD *)v223 + 28);
    *(_QWORD *)(v222 + 232) = *((_QWORD *)v223 + 29);
    *(_QWORD *)(v222 + 240) = *((_QWORD *)v223 + 30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v226 = *v223;
    v227 = v223[1];
    v228 = v223[3];
    *(_OWORD *)(v222 + 32) = v223[2];
    *(_OWORD *)(v222 + 48) = v228;
    *(_OWORD *)v222 = v226;
    *(_OWORD *)(v222 + 16) = v227;
    v229 = v223[4];
    v230 = v223[5];
    v231 = v223[7];
    *(_OWORD *)(v222 + 96) = v223[6];
    *(_OWORD *)(v222 + 112) = v231;
    *(_OWORD *)(v222 + 64) = v229;
    *(_OWORD *)(v222 + 80) = v230;
    v232 = v223[8];
    v233 = v223[9];
    v234 = v223[11];
    *(_OWORD *)(v222 + 160) = v223[10];
    *(_OWORD *)(v222 + 176) = v234;
    *(_OWORD *)(v222 + 128) = v232;
    *(_OWORD *)(v222 + 144) = v233;
    v235 = v223[12];
    v236 = v223[13];
    v237 = v223[14];
    *(_QWORD *)(v222 + 240) = *((_QWORD *)v223 + 30);
    *(_OWORD *)(v222 + 208) = v236;
    *(_OWORD *)(v222 + 224) = v237;
    *(_OWORD *)(v222 + 192) = v235;
  }
  v246 = (_OWORD *)((v222 + 255) & 0xFFFFFFFFFFFFFFF8);
  v247 = (__int128 *)(((unint64_t)v223 + 255) & 0xFFFFFFFFFFFFFFF8);
  v248 = *v247;
  *(_OWORD *)((char *)v246 + 9) = *(__int128 *)((char *)v247 + 9);
  *v246 = v248;
  v249 = (v222 + 287) & 0xFFFFFFFFFFFFFFF8;
  v250 = ((unint64_t)v223 + 287) & 0xFFFFFFFFFFFFFFF8;
  v251 = *(_OWORD *)v250;
  *(_BYTE *)(v249 + 16) = *(_BYTE *)(v250 + 16);
  *(_OWORD *)v249 = v251;
  v252 = (_QWORD *)((v222 + 311) & 0xFFFFFFFFFFFFF8);
  v253 = ((unint64_t)v223 + 311) & 0xFFFFFFFFFFFFF8;
  v254 = *(_QWORD *)v253;
  v253 += 15;
  *v252 = v254;
  v255 = (_QWORD *)(((unint64_t)v252 + 15) & 0xFFFFFFFFFFFFFFF8);
  v256 = *(_QWORD *)(v253 & 0xFFFFFFFFFFFFFFF8);
  v257 = *(_QWORD *)((v253 & 0xFFFFFFFFFFFFFFF8) + 8);
  sub_23AA7F2D4(v256, v257);
  *v255 = v256;
  v255[1] = v257;
  v258 = (_QWORD *)((a26 + *(_QWORD *)(v53 - 104)) & 0xFFFFFFFFFFFFF8);
  v259 = (_QWORD *)((a26 + *(_QWORD *)(v53 - 184)) & 0xFFFFFFFFFFFFF8);
  *v258 = *v259;
  v260 = (_QWORD *)(((unint64_t)v258 + 15) & 0xFFFFFFFFFFFFFFF8);
  v261 = (_QWORD *)(((unint64_t)v259 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v260 = *v261;
  v260[1] = v261[1];
  JUMPOUT(0x23AF33658);
}

void sub_23AF339A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 - 248) + 16))(v0, v1, *(_QWORD *)(v2 - 144));
  v3 = *(_QWORD *)(v2 - 240);
  v4 = v3 + v0;
  v5 = v3 + v1;
  *(_BYTE *)v4 = *(_BYTE *)v5;
  v4 &= 0xFFFFFFFFFFFFFFF8;
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 16);
  JUMPOUT(0x23AF33658);
}

void sub_23AF339F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 - 248) + 16))(v0, v1, *(_QWORD *)(v2 - 144));
  v3 = *(_QWORD *)(v2 - 240);
  v4 = (_QWORD *)((v0 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)((v1 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v4[1] = v5[1];
  JUMPOUT(0x23AF33658);
}

void sub_23AF33A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 - 248) + 16))(v0, v1, *(_QWORD *)(v2 - 144));
  v3 = *(_QWORD *)(v2 - 240);
  v4 = v3 + v0;
  v5 = v3 + v1;
  *(_BYTE *)v4 = *(_BYTE *)v5;
  v4 &= 0xFFFFFFFFFFFFFFF8;
  v5 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 16);
  JUMPOUT(0x23AF33658);
}

void sub_23AF33A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v2 - 248) + 16))(v0, v1, *(_QWORD *)(v2 - 144));
  v3 = *(_QWORD *)(v2 - 240);
  v4 = (_QWORD *)((v0 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)((v1 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v4[1] = v5[1];
  JUMPOUT(0x23AF33658);
}

void sub_23AF35868(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v6 | v8 | 7;
  v10 = ((((*(_QWORD *)(v7 + 64) + 7 + ((v8 + 8 + ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v11 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 | 7) + 16;
  v14 = *(_QWORD *)(v11 + 64);
  if (*(_DWORD *)(v11 + 84))
    v15 = *(_QWORD *)(v11 + 64);
  else
    v15 = v14 + 1;
  v44 = (((((((((v15
               + 7
               + ((v12
                 + 10
                 + ((((((v14 + ((v14 + v12 + ((v12 + 12) & ~v12)) & ~v12) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v12)) & 0xFFFFFFFFFFFFFFF8)
             + 31) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 19) & 0xFFFFFFFFFFFFFFF8)
       + 25) & 0xFFFFFFFFFFFFFFF8;
  v16 = (((v44 + 327 + ((v13 + ((v3 + v9 + ((v3 + v4) & ~v4)) & ~v9) + v10) & ~(v12 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((v16 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v18 = ((((v16 + 23 + ((v16 + 16 + (v9 | v4 | v12)) & ~(v9 | v4 | v12))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v19 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v19 <= ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v19 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v19 > v17)
    v17 = v19;
  if (v17 > v18)
    v18 = v17;
  v42 = v18;
  v43 = v18 | 1;
  v20 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v21 = *(_QWORD *)(v20 + 64);
  v22 = *(unsigned __int8 *)(v20 + 80);
  v23 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v24 = *(_DWORD *)(v23 + 80) & 0xF8;
  v25 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = v24 | v26 | 7;
  v28 = (((v44
         + 327
         + ((v13
           + ((v21 + v27 + ((v21 + v22) & ~v22)) & ~v27)
           + ((((*(_QWORD *)(v25 + 64)
               + 7
               + ((v26 + 8 + ((*(_QWORD *)(v23 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v26)) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16) & ~(v12 | 7))) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v29 = v28 + 23;
  v30 = ((v28 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v31 = v28 + 16;
  v32 = v22 | v12 | v27;
  v33 = (v21 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v33 <= ((v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v33 = ((v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v33 > v30)
    v30 = v33;
  if (v30 <= ((((v29 + ((v31 + v32) & ~v32)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16)
    v34 = ((((v29 + ((v31 + v32) & ~v32)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v34 = v30;
  if ((v34 | 1) <= v43)
    v35 = v43;
  else
    v35 = v34 | 1;
  v36 = *((unsigned __int8 *)a2 + v35);
  if (v36 >= 2)
  {
    if (v35 <= 3)
      v37 = v35;
    else
      v37 = 4;
    __asm { BR              X14 }
  }
  if (v36 == 1)
  {
    v38 = *((unsigned __int8 *)a2 + v34);
    if (v38 >= 6 && (_DWORD)v34 != 0)
      v38 = *a2 + 6;
    __asm { BR              X10 }
  }
  v40 = *((unsigned __int8 *)a2 + v42);
  if (v40 >= 6 && (_DWORD)v42 != 0)
    v40 = *a2 + 6;
  __asm { BR              X10 }
}

void sub_23AF36098(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,size_t __n,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  void *v77;
  const void *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _OWORD *v87;
  _OWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _OWORD *v109;
  __int128 *v110;
  __int128 v111;
  unint64_t v112;
  unint64_t v113;
  __int128 v114;
  _QWORD *v115;
  _QWORD *v116;

  *(_QWORD *)(v44 - 120) = v40;
  *(_QWORD *)(v44 - 112) = v35;
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(a29 + 32);
  v46 = v39;
  v47 = v38;
  v48 = *(_QWORD *)(v44 - 160);
  v49 = v36;
  v50 = v37;
  v45(v42, v38, v48);
  v51 = (a18 + v47) & v46;
  v45((a18 + v42) & v46, v51, v48);
  v52 = *(_QWORD *)(v44 - 152);
  v53 = (((a18 + v42) & v46) + a30 + v52) & v43;
  v54 = (v51 + a30 + v52) & v43;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a14 + 32))(v53, v54, a21);
  v55 = (_QWORD *)((a19 + v53) & 0xFFFFFFFFFFFFFFF8);
  v56 = (_QWORD *)((a19 + v54) & 0xFFFFFFFFFFFFFFF8);
  *v55 = *v56;
  v57 = ((unint64_t)v55 + a20) & v41;
  v58 = ((unint64_t)v56 + a20) & v41;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a15 + 32))(v57, v58, a23);
  v59 = (_QWORD *)((a22 + v58) & 0xFFFFFFFFFFFFF8);
  v60 = (_QWORD *)((a22 + v57) & 0xFFFFFFFFFFFFF8);
  *v60 = *v59;
  *(_OWORD *)(((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFF8);
  *(_OWORD *)(a24 + v53) = *(_OWORD *)(a24 + v54);
  v61 = (a31 + a24 + v53) & v50;
  v62 = (a31 + a24 + v54) & v50;
  *(_BYTE *)v61 = *(_BYTE *)v62;
  v63 = v61 | 4;
  v64 = *(_DWORD *)(v62 | 4);
  *(_BYTE *)(v63 + 4) = *(_BYTE *)((v62 | 4) + 4);
  *(_DWORD *)v63 = v64;
  *(_WORD *)(v61 + 10) = *(_WORD *)(v62 + 0xA);
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(a27 + 32);
  v65((a32 + v61) & v49, (a32 + v62) & v49, a26);
  v66 = (a33 + ((a32 + v61) & v49)) & v49;
  v67 = (a33 + ((a32 + v62) & v49)) & v49;
  v65(v66, v67, a26);
  v68 = (_BYTE *)(v66 + a34);
  *v68 = *(_BYTE *)(v67 + a34);
  v68[1] = *(_BYTE *)(v67 + a34 + 1);
  v68[2] = *(_BYTE *)(v67 + a34 + 2);
  v68[3] = *(_BYTE *)(v67 + a34 + 3);
  v68[4] = *(_BYTE *)(v67 + a34 + 4);
  v69 = (v66 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  v70 = (v67 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v69 = *(_OWORD *)v70;
  *(_BYTE *)(v69 + 16) = *(_BYTE *)(v70 + 16);
  *(_BYTE *)(v69 + 17) = *(_BYTE *)(v70 + 17);
  *(_BYTE *)(v69 + 18) = *(_BYTE *)(v70 + 18);
  *(_BYTE *)(v69 + 19) = *(_BYTE *)(v70 + 19);
  v71 = (v69 + 27) & 0xFFFFFFFFFFFFFFF8;
  v72 = (v70 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *(_BYTE *)(v71 + 8) = *(_BYTE *)(v72 + 8);
  *(_BYTE *)(v71 + 9) = *(_BYTE *)(v72 + 9);
  *(_BYTE *)(v71 + 10) = *(_BYTE *)(v72 + 10);
  *(_BYTE *)(v71 + 11) = *(_BYTE *)(v72 + 11);
  *(_BYTE *)(v71 + 12) = *(_BYTE *)(v72 + 12);
  v73 = (_QWORD *)((v69 + 47) & 0xFFFFFFFFFFFFF8);
  v74 = (_QWORD *)((v70 + 47) & 0xFFFFFFFFFFFFF8);
  *v73 = *v74;
  v75 = ((unint64_t)v73 + 15) & 0xFFFFFFFFFFFFFFF8;
  v76 = ((unint64_t)v74 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *(_BYTE *)(v75 + 8) = *(_BYTE *)(v76 + 8);
  *(_BYTE *)(v75 + 9) = *(_BYTE *)(v76 + 9);
  v77 = (void *)((a35 + v75) & v49);
  v78 = (const void *)((a35 + v76) & v49);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(a27 + 48))(v78, 1, a26))
  {
    memcpy(v77, v78, __n);
  }
  else
  {
    v65((uint64_t)v77, (uint64_t)v78, a26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(a27 + 56))(v77, 0, 1, a26);
  }
  v79 = *(_QWORD *)(v44 - 200);
  v80 = (_QWORD *)(((unint64_t)v77 + v79) & 0xFFFFFFFFFFFFFFF8);
  v81 = (_QWORD *)(((unint64_t)v78 + v79) & 0xFFFFFFFFFFFFFFF8);
  *v80 = *v81;
  v82 = ((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFFFF8;
  v83 = ((unint64_t)v81 + 15) & 0xFFFFFFFFFFFFFFF8;
  v84 = *(_QWORD *)v83;
  *(_BYTE *)(v82 + 8) = *(_BYTE *)(v83 + 8);
  *(_QWORD *)v82 = v84;
  v85 = (_QWORD *)(((unint64_t)v80 + 31) & 0xFFFFFFFFFFFFF8);
  v86 = (_QWORD *)(((unint64_t)v81 + 31) & 0xFFFFFFFFFFFFF8);
  *v85 = *v86;
  v87 = (_OWORD *)(((unint64_t)v85 + 15) & 0xFFFFFFFFFFFFFFF8);
  v88 = (_OWORD *)(((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v87 = *v88;
  v89 = ((unint64_t)v87 + 19) & 0xFFFFFFFFFFFFFFF8;
  v90 = ((unint64_t)v88 + 19) & 0xFFFFFFFFFFFFFFF8;
  v91 = *(_QWORD *)v90;
  *(_BYTE *)(v89 + 8) = *(_BYTE *)(v90 + 8);
  *(_QWORD *)v89 = v91;
  *(_BYTE *)(v89 + 9) = *(_BYTE *)(v90 + 9);
  v92 = (v89 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v93 = (v90 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  LODWORD(v84) = *(_DWORD *)v93;
  *(_BYTE *)(v92 + 4) = *(_BYTE *)(v93 + 4);
  *(_DWORD *)v92 = v84;
  *(_OWORD *)((v89 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v90 + 25) & 0xFFFFFFFFFFFFF8);
  v94 = *(_QWORD *)(v44 - 112);
  v95 = v94 + v61;
  v96 = (__int128 *)(v94 + v62);
  v97 = v96[7];
  v99 = v96[4];
  v98 = v96[5];
  *(_OWORD *)(v95 + 96) = v96[6];
  *(_OWORD *)(v95 + 112) = v97;
  *(_OWORD *)(v95 + 64) = v99;
  *(_OWORD *)(v95 + 80) = v98;
  v100 = v96[11];
  v102 = v96[8];
  v101 = v96[9];
  *(_OWORD *)(v95 + 160) = v96[10];
  *(_OWORD *)(v95 + 176) = v100;
  *(_OWORD *)(v95 + 128) = v102;
  *(_OWORD *)(v95 + 144) = v101;
  v104 = v96[13];
  v103 = v96[14];
  v105 = v96[12];
  *(_QWORD *)(v95 + 240) = *((_QWORD *)v96 + 30);
  *(_OWORD *)(v95 + 208) = v104;
  *(_OWORD *)(v95 + 224) = v103;
  *(_OWORD *)(v95 + 192) = v105;
  v106 = *v96;
  v107 = v96[1];
  v108 = v96[3];
  *(_OWORD *)(v95 + 32) = v96[2];
  *(_OWORD *)(v95 + 48) = v108;
  *(_OWORD *)v95 = v106;
  *(_OWORD *)(v95 + 16) = v107;
  v109 = (_OWORD *)((v95 + 255) & 0xFFFFFFFFFFFFFFF8);
  v110 = (__int128 *)(((unint64_t)v96 + 255) & 0xFFFFFFFFFFFFFFF8);
  v111 = *v110;
  *(_OWORD *)((char *)v109 + 9) = *(__int128 *)((char *)v110 + 9);
  *v109 = v111;
  v112 = (v95 + 287) & 0xFFFFFFFFFFFFFFF8;
  v113 = ((unint64_t)v96 + 287) & 0xFFFFFFFFFFFFFFF8;
  v114 = *(_OWORD *)v113;
  *(_BYTE *)(v112 + 16) = *(_BYTE *)(v113 + 16);
  *(_OWORD *)v112 = v114;
  v115 = (_QWORD *)((v95 + 311) & 0xFFFFFFFFFFFFF8);
  v116 = (_QWORD *)(((unint64_t)v96 + 311) & 0xFFFFFFFFFFFFF8);
  *v115 = *v116;
  *(_OWORD *)(((unint64_t)v115 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v116 + 15) & 0xFFFFFFFFFFFFF8);
  JUMPOUT(0x23AF37B68);
}

uint64_t sub_23AF3635C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,size_t __n,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  void *v90;
  const void *v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _OWORD *v100;
  _OWORD *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _OWORD *v122;
  __int128 *v123;
  __int128 v124;
  unint64_t v125;
  unint64_t v126;
  __int128 v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _OWORD *v146;
  _OWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  const void *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  _OWORD *v175;
  _OWORD *v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 *v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  _OWORD *v197;
  __int128 *v198;
  __int128 v199;
  unint64_t v200;
  unint64_t v201;
  __int128 v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int (*v210)(const void *, uint64_t, uint64_t);
  void (*v211)(unint64_t, unint64_t, _QWORD);
  void (*v212)(uint64_t, uint64_t, uint64_t);
  uint64_t v213;
  void (*v214)(uint64_t, uint64_t, uint64_t);
  uint64_t v215;
  uint64_t v218;
  uint64_t v219;

  v213 = v46;
  v219 = v40;
  *(_QWORD *)(v49 - 192) = v47;
  *(_QWORD *)(v49 - 120) = v44;
  *(_QWORD *)(v49 - 112) = v35;
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(a28 + 32);
  v51 = *(_QWORD *)(v49 - 104);
  *(_QWORD *)(v49 - 152) = a3;
  *(_QWORD *)(v49 - 144) = a1;
  v52 = v39;
  *(_QWORD *)(v49 - 160) = a2;
  v53 = *(_QWORD *)(v49 - 168);
  *(_QWORD *)(v49 - 136) = v37;
  *(_QWORD *)(v49 - 128) = v36;
  *(_QWORD *)(v49 - 184) = v38;
  *(_QWORD *)(v49 - 176) = a4;
  v54 = v48;
  v50(v51, v39, v53);
  v56 = (a17 + v51) & v43;
  v214 = v50;
  v215 = v43;
  v57 = (a17 + v52) & v43;
  v50(v56, v57, v53);
  v58 = (v56 + v54 + v45) & v42;
  v218 = v42;
  v59 = (v57 + v54 + v45) & v42;
  v212 = *(void (**)(uint64_t, uint64_t, uint64_t))(a13 + 32);
  v212(v58, v59, a16);
  v60 = (_QWORD *)((a5 + v58) & 0xFFFFFFFFFFFFFFF8);
  v61 = (_QWORD *)((a5 + v59) & 0xFFFFFFFFFFFFFFF8);
  *v60 = *v61;
  v62 = *(_QWORD *)(v49 - 184);
  v63 = *(_QWORD *)(v49 - 176);
  v64 = ((unint64_t)v60 + v63) & v62;
  v65 = ((unint64_t)v61 + v63) & v62;
  v211 = *(void (**)(unint64_t, unint64_t, _QWORD))(v41 + 32);
  v211(v64, v65, *(_QWORD *)(v49 - 152));
  v66 = *(_QWORD *)(v49 - 160);
  v67 = v66 + v64;
  v68 = (_QWORD *)((v66 + v65) & 0xFFFFFFFFFFFFF8);
  v67 &= 0xFFFFFFFFFFFFF8uLL;
  *(_QWORD *)v67 = *v68;
  *(_OWORD *)((v67 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v68 + 15) & 0xFFFFFFFFFFFFF8);
  v69 = *(_QWORD *)(v49 - 144);
  v70 = *(_QWORD *)(v49 - 136);
  v71 = (_OWORD *)(v69 + v58);
  v72 = (_OWORD *)(v69 + v59);
  *v71 = *v72;
  v73 = ((unint64_t)v71 + a31) & v70;
  v74 = ((unint64_t)v72 + a31) & v70;
  *(_BYTE *)v73 = *(_BYTE *)v74;
  v75 = v73 | 4;
  v76 = *(_DWORD *)(v74 | 4);
  *(_BYTE *)(v75 + 4) = *(_BYTE *)((v74 | 4) + 4);
  *(_DWORD *)v75 = v76;
  *(_WORD *)(v73 + 10) = *(_WORD *)(v74 + 0xA);
  v77 = *(_QWORD *)(v49 - 128);
  v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(a27 + 32);
  v78((a32 + v73) & v77, (a32 + v74) & v77, a26);
  v79 = (a33 + ((a32 + v73) & v77)) & v77;
  v80 = (a33 + ((a32 + v74) & v77)) & v77;
  v78(v79, v80, a26);
  v81 = (_BYTE *)(v79 + a34);
  *v81 = *(_BYTE *)(v80 + a34);
  v81[1] = *(_BYTE *)(v80 + a34 + 1);
  v81[2] = *(_BYTE *)(v80 + a34 + 2);
  v81[3] = *(_BYTE *)(v80 + a34 + 3);
  v81[4] = *(_BYTE *)(v80 + a34 + 4);
  v82 = (v79 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  v83 = (v80 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v82 = *(_OWORD *)v83;
  *(_BYTE *)(v82 + 16) = *(_BYTE *)(v83 + 16);
  *(_BYTE *)(v82 + 17) = *(_BYTE *)(v83 + 17);
  *(_BYTE *)(v82 + 18) = *(_BYTE *)(v83 + 18);
  *(_BYTE *)(v82 + 19) = *(_BYTE *)(v83 + 19);
  v84 = (v82 + 27) & 0xFFFFFFFFFFFFFFF8;
  v85 = (v83 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v84 = *(_QWORD *)v85;
  *(_BYTE *)(v84 + 8) = *(_BYTE *)(v85 + 8);
  *(_BYTE *)(v84 + 9) = *(_BYTE *)(v85 + 9);
  *(_BYTE *)(v84 + 10) = *(_BYTE *)(v85 + 10);
  *(_BYTE *)(v84 + 11) = *(_BYTE *)(v85 + 11);
  *(_BYTE *)(v84 + 12) = *(_BYTE *)(v85 + 12);
  v86 = (_QWORD *)((v82 + 47) & 0xFFFFFFFFFFFFF8);
  v87 = (_QWORD *)((v83 + 47) & 0xFFFFFFFFFFFFF8);
  *v86 = *v87;
  v88 = ((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFFFF8;
  v89 = ((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v88 = *(_QWORD *)v89;
  *(_BYTE *)(v88 + 8) = *(_BYTE *)(v89 + 8);
  *(_BYTE *)(v88 + 9) = *(_BYTE *)(v89 + 9);
  v90 = (void *)((a35 + v88) & v77);
  v91 = (const void *)((a35 + v89) & v77);
  v210 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(a27 + 48);
  if (v210(v91, 1, a26))
  {
    memcpy(v90, v91, __n);
  }
  else
  {
    v78((uint64_t)v90, (uint64_t)v91, a26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(a27 + 56))(v90, 0, 1, a26);
  }
  v92 = *(_QWORD *)(v49 - 200);
  v93 = (_QWORD *)(((unint64_t)v90 + v92) & 0xFFFFFFFFFFFFFFF8);
  v94 = (_QWORD *)(((unint64_t)v91 + v92) & 0xFFFFFFFFFFFFFFF8);
  *v93 = *v94;
  v95 = ((unint64_t)v93 + 15) & 0xFFFFFFFFFFFFFFF8;
  v96 = ((unint64_t)v94 + 15) & 0xFFFFFFFFFFFFFFF8;
  v97 = *(_QWORD *)v96;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  *(_QWORD *)v95 = v97;
  v98 = (_QWORD *)(((unint64_t)v93 + 31) & 0xFFFFFFFFFFFFF8);
  v99 = (_QWORD *)(((unint64_t)v94 + 31) & 0xFFFFFFFFFFFFF8);
  *v98 = *v99;
  v100 = (_OWORD *)(((unint64_t)v98 + 15) & 0xFFFFFFFFFFFFFFF8);
  v101 = (_OWORD *)(((unint64_t)v99 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v100 = *v101;
  v102 = ((unint64_t)v100 + 19) & 0xFFFFFFFFFFFFFFF8;
  v103 = ((unint64_t)v101 + 19) & 0xFFFFFFFFFFFFFFF8;
  v104 = *(_QWORD *)v103;
  *(_BYTE *)(v102 + 8) = *(_BYTE *)(v103 + 8);
  *(_QWORD *)v102 = v104;
  *(_BYTE *)(v102 + 9) = *(_BYTE *)(v103 + 9);
  v105 = (v102 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v106 = (v103 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  LODWORD(v97) = *(_DWORD *)v106;
  *(_BYTE *)(v105 + 4) = *(_BYTE *)(v106 + 4);
  *(_DWORD *)v105 = v97;
  *(_OWORD *)((v102 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v103 + 25) & 0xFFFFFFFFFFFFF8);
  v107 = *(_QWORD *)(v49 - 112);
  v108 = v73 + v107;
  v109 = (__int128 *)(v74 + v107);
  v110 = v109[7];
  v112 = v109[4];
  v111 = v109[5];
  *(_OWORD *)(v108 + 96) = v109[6];
  *(_OWORD *)(v108 + 112) = v110;
  *(_OWORD *)(v108 + 64) = v112;
  *(_OWORD *)(v108 + 80) = v111;
  v113 = v109[11];
  v115 = v109[8];
  v114 = v109[9];
  *(_OWORD *)(v108 + 160) = v109[10];
  *(_OWORD *)(v108 + 176) = v113;
  *(_OWORD *)(v108 + 128) = v115;
  *(_OWORD *)(v108 + 144) = v114;
  v117 = v109[13];
  v116 = v109[14];
  v118 = v109[12];
  *(_QWORD *)(v108 + 240) = *((_QWORD *)v109 + 30);
  *(_OWORD *)(v108 + 208) = v117;
  *(_OWORD *)(v108 + 224) = v116;
  *(_OWORD *)(v108 + 192) = v118;
  v119 = *v109;
  v120 = v109[1];
  v121 = v109[3];
  *(_OWORD *)(v108 + 32) = v109[2];
  *(_OWORD *)(v108 + 48) = v121;
  *(_OWORD *)v108 = v119;
  *(_OWORD *)(v108 + 16) = v120;
  v122 = (_OWORD *)((v108 + 255) & 0xFFFFFFFFFFFFFFF8);
  v123 = (__int128 *)(((unint64_t)v109 + 255) & 0xFFFFFFFFFFFFFFF8);
  v124 = *v123;
  *(_OWORD *)((char *)v122 + 9) = *(__int128 *)((char *)v123 + 9);
  *v122 = v124;
  v125 = (v108 + 287) & 0xFFFFFFFFFFFFFFF8;
  v126 = ((unint64_t)v109 + 287) & 0xFFFFFFFFFFFFFFF8;
  v127 = *(_OWORD *)v126;
  *(_BYTE *)(v125 + 16) = *(_BYTE *)(v126 + 16);
  *(_OWORD *)v125 = v127;
  v128 = (_QWORD *)((v108 + 311) & 0xFFFFFFFFFFFFF8);
  v129 = (_QWORD *)(((unint64_t)v109 + 311) & 0xFFFFFFFFFFFFF8);
  *v128 = *v129;
  *(_OWORD *)(((unint64_t)v128 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v129 + 15) & 0xFFFFFFFFFFFFF8);
  v130 = (a8 + *(_QWORD *)(v49 - 104)) & v213;
  v131 = (a8 + *(_QWORD *)(v49 - 96)) & v213;
  v132 = *(_QWORD *)(v49 - 168);
  v214(v130, v131, v132);
  v214((a17 + v130) & v215, (a17 + v131) & v215, v132);
  v133 = (a6 + ((a17 + v130) & v215)) & v218;
  v134 = (a6 + ((a17 + v131) & v215)) & v218;
  v212(v133, v134, a16);
  v135 = (_QWORD *)((a5 + v133) & 0xFFFFFFFFFFFFFFF8);
  v136 = (_QWORD *)((a5 + v134) & 0xFFFFFFFFFFFFFFF8);
  *v135 = *v136;
  v138 = *(_QWORD *)(v49 - 184);
  v137 = *(_QWORD *)(v49 - 176);
  v139 = ((unint64_t)v135 + v137) & v138;
  v140 = ((unint64_t)v136 + v137) & v138;
  v211(v139, v140, *(_QWORD *)(v49 - 152));
  v141 = *(_QWORD *)(v49 - 160);
  v142 = (_QWORD *)((v141 + v139) & 0xFFFFFFFFFFFFF8);
  v143 = (_QWORD *)((v141 + v140) & 0xFFFFFFFFFFFFF8);
  *v142 = *v143;
  *(_OWORD *)(((unint64_t)v142 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v143 + 15) & 0xFFFFFFFFFFFFF8);
  v144 = *(_QWORD *)(v49 - 144);
  v145 = *(_QWORD *)(v49 - 136);
  v146 = (_OWORD *)(v133 + v144);
  v147 = (_OWORD *)(v134 + v144);
  *v146 = *v147;
  v148 = ((unint64_t)v146 + a31) & v145;
  v149 = ((unint64_t)v147 + a31) & v145;
  *(_BYTE *)v148 = *(_BYTE *)v149;
  v150 = v148 | 4;
  v151 = *(_DWORD *)(v149 | 4);
  *(_BYTE *)(v150 + 4) = *(_BYTE *)((v149 | 4) + 4);
  *(_DWORD *)v150 = v151;
  *(_WORD *)(v148 + 10) = *(_WORD *)(v149 + 0xA);
  v152 = *(_QWORD *)(v49 - 128);
  v78((a32 + v148) & v152, (a32 + v149) & v152, a26);
  v153 = (a33 + ((a32 + v148) & v152)) & v152;
  v154 = (a33 + ((a32 + v149) & v152)) & v152;
  v78(v153, v154, a26);
  v155 = (_BYTE *)(v153 + a34);
  *v155 = *(_BYTE *)(v154 + a34);
  v155[1] = *(_BYTE *)(v154 + a34 + 1);
  v155[2] = *(_BYTE *)(v154 + a34 + 2);
  v155[3] = *(_BYTE *)(v154 + a34 + 3);
  v155[4] = *(_BYTE *)(v154 + a34 + 4);
  v156 = (v153 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  v157 = (v154 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v156 = *(_OWORD *)v157;
  *(_BYTE *)(v156 + 16) = *(_BYTE *)(v157 + 16);
  *(_BYTE *)(v156 + 17) = *(_BYTE *)(v157 + 17);
  *(_BYTE *)(v156 + 18) = *(_BYTE *)(v157 + 18);
  *(_BYTE *)(v156 + 19) = *(_BYTE *)(v157 + 19);
  v158 = (v156 + 27) & 0xFFFFFFFFFFFFFFF8;
  v159 = (v157 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v158 = *(_QWORD *)v159;
  *(_BYTE *)(v158 + 8) = *(_BYTE *)(v159 + 8);
  *(_BYTE *)(v158 + 9) = *(_BYTE *)(v159 + 9);
  *(_BYTE *)(v158 + 10) = *(_BYTE *)(v159 + 10);
  *(_BYTE *)(v158 + 11) = *(_BYTE *)(v159 + 11);
  *(_BYTE *)(v158 + 12) = *(_BYTE *)(v159 + 12);
  v160 = (_QWORD *)((v156 + 47) & 0xFFFFFFFFFFFFF8);
  v161 = (_QWORD *)((v157 + 47) & 0xFFFFFFFFFFFFF8);
  *v160 = *v161;
  v162 = ((unint64_t)v160 + 15) & 0xFFFFFFFFFFFFFFF8;
  v163 = ((unint64_t)v161 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v162 = *(_QWORD *)v163;
  *(_BYTE *)(v162 + 8) = *(_BYTE *)(v163 + 8);
  *(_BYTE *)(v162 + 9) = *(_BYTE *)(v163 + 9);
  v164 = (char *)((a35 + v162) & v152);
  v165 = (const void *)((a35 + v163) & v152);
  if (v210(v165, 1, a26))
  {
    memcpy(v164, v165, __n);
  }
  else
  {
    v78((uint64_t)v164, (uint64_t)v165, a26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(a27 + 56))(v164, 0, 1, a26);
  }
  v166 = *(_QWORD *)(v49 - 200);
  v167 = *(_QWORD *)(v49 - 192);
  v168 = (unint64_t)&v164[v166];
  v169 = (_QWORD *)(((unint64_t)v165 + v166) & 0xFFFFFFFFFFFFFFF8);
  v168 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v168 = *v169;
  v170 = (v168 + 15) & 0xFFFFFFFFFFFFFFF8;
  v171 = ((unint64_t)v169 + 15) & 0xFFFFFFFFFFFFFFF8;
  v172 = *(_QWORD *)v171;
  *(_BYTE *)(v170 + 8) = *(_BYTE *)(v171 + 8);
  *(_QWORD *)v170 = v172;
  v173 = (_QWORD *)((v168 + 31) & 0xFFFFFFFFFFFFF8);
  v174 = (_QWORD *)(((unint64_t)v169 + 31) & 0xFFFFFFFFFFFFF8);
  *v173 = *v174;
  v175 = (_OWORD *)(((unint64_t)v173 + 15) & 0xFFFFFFFFFFFFFFF8);
  v176 = (_OWORD *)(((unint64_t)v174 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v175 = *v176;
  v177 = ((unint64_t)v175 + 19) & 0xFFFFFFFFFFFFFFF8;
  v178 = ((unint64_t)v176 + 19) & 0xFFFFFFFFFFFFFFF8;
  v179 = *(_QWORD *)v178;
  *(_BYTE *)(v177 + 8) = *(_BYTE *)(v178 + 8);
  *(_QWORD *)v177 = v179;
  *(_BYTE *)(v177 + 9) = *(_BYTE *)(v178 + 9);
  v180 = (v177 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v181 = (v178 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  LODWORD(v172) = *(_DWORD *)v181;
  *(_BYTE *)(v180 + 4) = *(_BYTE *)(v181 + 4);
  *(_DWORD *)v180 = v172;
  *(_OWORD *)((v177 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v178 + 25) & 0xFFFFFFFFFFFFF8);
  v182 = *(_QWORD *)(v49 - 112);
  v183 = v148 + v182;
  v184 = (__int128 *)(v149 + v182);
  v185 = v184[7];
  v187 = v184[4];
  v186 = v184[5];
  *(_OWORD *)(v183 + 96) = v184[6];
  *(_OWORD *)(v183 + 112) = v185;
  *(_OWORD *)(v183 + 64) = v187;
  *(_OWORD *)(v183 + 80) = v186;
  v188 = v184[11];
  v190 = v184[8];
  v189 = v184[9];
  *(_OWORD *)(v183 + 160) = v184[10];
  *(_OWORD *)(v183 + 176) = v188;
  *(_OWORD *)(v183 + 128) = v190;
  *(_OWORD *)(v183 + 144) = v189;
  v192 = v184[13];
  v191 = v184[14];
  v193 = v184[12];
  *(_QWORD *)(v183 + 240) = *((_QWORD *)v184 + 30);
  *(_OWORD *)(v183 + 208) = v192;
  *(_OWORD *)(v183 + 224) = v191;
  *(_OWORD *)(v183 + 192) = v193;
  v194 = *v184;
  v195 = v184[1];
  v196 = v184[3];
  *(_OWORD *)(v183 + 32) = v184[2];
  *(_OWORD *)(v183 + 48) = v196;
  *(_OWORD *)v183 = v194;
  *(_OWORD *)(v183 + 16) = v195;
  v197 = (_OWORD *)((v183 + 255) & 0xFFFFFFFFFFFFFFF8);
  v198 = (__int128 *)(((unint64_t)v184 + 255) & 0xFFFFFFFFFFFFFFF8);
  v199 = *v198;
  *(_OWORD *)((char *)v197 + 9) = *(__int128 *)((char *)v198 + 9);
  *v197 = v199;
  v200 = (v183 + 287) & 0xFFFFFFFFFFFFFFF8;
  v201 = ((unint64_t)v184 + 287) & 0xFFFFFFFFFFFFFFF8;
  v202 = *(_OWORD *)v201;
  *(_BYTE *)(v200 + 16) = *(_BYTE *)(v201 + 16);
  *(_OWORD *)v200 = v202;
  v203 = (_QWORD *)((v183 + 311) & 0xFFFFFFFFFFFFF8);
  v204 = (_QWORD *)(((unint64_t)v184 + 311) & 0xFFFFFFFFFFFFF8);
  *v203 = *v204;
  *(_OWORD *)(((unint64_t)v203 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v204 + 15) & 0xFFFFFFFFFFFFF8);
  v205 = (_QWORD *)((v219 + v130) & 0xFFFFFFFFFFFFF8);
  v206 = (_QWORD *)((v219 + v131) & 0xFFFFFFFFFFFFF8);
  *v205 = *v206;
  v207 = *(_QWORD *)(v49 - 104);
  v208 = *(_QWORD *)(v49 - 120);
  *(_OWORD *)(((unint64_t)v205 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v206 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v207 + v167) = 1;
  *(_BYTE *)(v207 + v208) = 1;
  return v207;
}

uint64_t sub_23AF36650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = *(_QWORD *)(v32 - 104);
  v34 = v28;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(a28 + 32))(v33, v28, *(_QWORD *)(v32 - 168));
  *(_BYTE *)(v31 + v33) = *(_BYTE *)(v31 + v34);
  *(_OWORD *)(((v31 + v33) & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)(((v31 + v34) & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_BYTE *)(v33 + v30) = 2;
  *(_BYTE *)(v33 + v29) = 1;
  return v33;
}

void sub_23AF36774(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,size_t __n,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  void *v83;
  const void *v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _OWORD *v94;
  _OWORD *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _OWORD *v116;
  __int128 *v117;
  __int128 v118;
  unint64_t v119;
  unint64_t v120;
  __int128 v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  unint64_t v156;
  unint64_t v157;
  void *v158;
  const void *v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  _OWORD *v168;
  _OWORD *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 *v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  _OWORD *v190;
  __int128 *v191;
  __int128 v192;
  unint64_t v193;
  unint64_t v194;
  __int128 v195;
  _QWORD *v196;
  _QWORD *v197;
  void (*v198)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v199)(const void *, uint64_t, uint64_t);

  *(_QWORD *)(v45 - 184) = v38;
  *(_QWORD *)(v45 - 120) = v41;
  *(_QWORD *)(v45 - 112) = v35;
  v46 = v44;
  v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(a29 + 32);
  v48 = v39;
  v49 = *(_QWORD *)(v45 - 160);
  v50 = v36;
  v51 = v37;
  v47(v43, v39, v49);
  v52 = (a18 + v43) & v40;
  *(_QWORD *)(v45 - 176) = v40;
  *(_QWORD *)(v45 - 168) = v47;
  v53 = (a18 + v48) & v40;
  v47(v52, v53, v49);
  v54 = v46;
  v55 = *(_QWORD *)(v45 - 152);
  v56 = (v52 + a30 + v55) & v46;
  v57 = (v53 + a30 + v55) & v46;
  v198 = *(void (**)(uint64_t, uint64_t, uint64_t))(a14 + 32);
  v198(v56, v57, a21);
  v58 = (_QWORD *)((a19 + v56) & 0xFFFFFFFFFFFFFFF8);
  v59 = (_QWORD *)((a19 + v57) & 0xFFFFFFFFFFFFFFF8);
  *v58 = *v59;
  v60 = ((unint64_t)v58 + a20) & v42;
  *(_QWORD *)(v45 - 152) = v42;
  v61 = ((unint64_t)v59 + a20) & v42;
  v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(a15 + 32);
  *(_QWORD *)(v45 - 192) = v62;
  v62(v60, v61, a23);
  v63 = (_QWORD *)((a22 + v61) & 0xFFFFFFFFFFFFF8);
  v64 = (_QWORD *)((a22 + v60) & 0xFFFFFFFFFFFFF8);
  *v64 = *v63;
  *(_OWORD *)(((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFF8);
  *(_OWORD *)(a24 + v56) = *(_OWORD *)(a24 + v57);
  v65 = (a31 + a24 + v56) & v51;
  *(_QWORD *)(v45 - 136) = v51;
  v66 = (a31 + a24 + v57) & v51;
  *(_BYTE *)v65 = *(_BYTE *)v66;
  v67 = v65 | 4;
  v68 = *(_DWORD *)(v66 | 4);
  *(_BYTE *)(v67 + 4) = *(_BYTE *)((v66 | 4) + 4);
  *(_DWORD *)v67 = v68;
  *(_WORD *)(v65 + 10) = *(_WORD *)(v66 + 0xA);
  v69 = v65;
  v70 = (a32 + v65) & v50;
  v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(a27 + 32);
  v71(v70, (a32 + v66) & v50, a26);
  v72 = (a33 + v70) & v50;
  v73 = (a33 + ((a32 + v66) & v50)) & v50;
  v71(v72, v73, a26);
  v74 = (_BYTE *)(v72 + a34);
  *v74 = *(_BYTE *)(v73 + a34);
  v74[1] = *(_BYTE *)(v73 + a34 + 1);
  v74[2] = *(_BYTE *)(v73 + a34 + 2);
  v74[3] = *(_BYTE *)(v73 + a34 + 3);
  v74[4] = *(_BYTE *)(v73 + a34 + 4);
  v75 = (v72 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  v76 = (v73 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v75 = *(_OWORD *)v76;
  *(_BYTE *)(v75 + 16) = *(_BYTE *)(v76 + 16);
  *(_BYTE *)(v75 + 17) = *(_BYTE *)(v76 + 17);
  *(_BYTE *)(v75 + 18) = *(_BYTE *)(v76 + 18);
  *(_BYTE *)(v75 + 19) = *(_BYTE *)(v76 + 19);
  v77 = (v75 + 27) & 0xFFFFFFFFFFFFFFF8;
  v78 = (v76 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v77 = *(_QWORD *)v78;
  *(_BYTE *)(v77 + 8) = *(_BYTE *)(v78 + 8);
  *(_BYTE *)(v77 + 9) = *(_BYTE *)(v78 + 9);
  *(_BYTE *)(v77 + 10) = *(_BYTE *)(v78 + 10);
  *(_BYTE *)(v77 + 11) = *(_BYTE *)(v78 + 11);
  *(_BYTE *)(v77 + 12) = *(_BYTE *)(v78 + 12);
  v79 = (_QWORD *)((v75 + 47) & 0xFFFFFFFFFFFFF8);
  v80 = (_QWORD *)((v76 + 47) & 0xFFFFFFFFFFFFF8);
  *v79 = *v80;
  v81 = ((unint64_t)v79 + 15) & 0xFFFFFFFFFFFFFFF8;
  v82 = ((unint64_t)v80 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v81 = *(_QWORD *)v82;
  *(_BYTE *)(v81 + 8) = *(_BYTE *)(v82 + 8);
  *(_BYTE *)(v81 + 9) = *(_BYTE *)(v82 + 9);
  v83 = (void *)((a35 + v81) & v50);
  *(_QWORD *)(v45 - 128) = v50;
  v84 = (const void *)((a35 + v82) & v50);
  v199 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(a27 + 48);
  if (v199(v84, 1, a26))
  {
    memcpy(v83, v84, __n);
  }
  else
  {
    v71((uint64_t)v83, (uint64_t)v84, a26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(a27 + 56))(v83, 0, 1, a26);
  }
  v85 = v71;
  v86 = *(_QWORD *)(v45 - 200);
  v87 = (_QWORD *)(((unint64_t)v83 + v86) & 0xFFFFFFFFFFFFFFF8);
  v88 = (_QWORD *)(((unint64_t)v84 + v86) & 0xFFFFFFFFFFFFFFF8);
  *v87 = *v88;
  v89 = ((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8;
  v90 = ((unint64_t)v88 + 15) & 0xFFFFFFFFFFFFFFF8;
  v91 = *(_QWORD *)v90;
  *(_BYTE *)(v89 + 8) = *(_BYTE *)(v90 + 8);
  *(_QWORD *)v89 = v91;
  v92 = (_QWORD *)(((unint64_t)v87 + 31) & 0xFFFFFFFFFFFFF8);
  v93 = (_QWORD *)(((unint64_t)v88 + 31) & 0xFFFFFFFFFFFFF8);
  *v92 = *v93;
  v94 = (_OWORD *)(((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFFFF8);
  v95 = (_OWORD *)(((unint64_t)v93 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v94 = *v95;
  v96 = ((unint64_t)v94 + 19) & 0xFFFFFFFFFFFFFFF8;
  v97 = ((unint64_t)v95 + 19) & 0xFFFFFFFFFFFFFFF8;
  v98 = *(_QWORD *)v97;
  *(_BYTE *)(v96 + 8) = *(_BYTE *)(v97 + 8);
  *(_QWORD *)v96 = v98;
  *(_BYTE *)(v96 + 9) = *(_BYTE *)(v97 + 9);
  v99 = (v96 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v100 = (v97 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  LODWORD(v91) = *(_DWORD *)v100;
  *(_BYTE *)(v99 + 4) = *(_BYTE *)(v100 + 4);
  *(_DWORD *)v99 = v91;
  *(_OWORD *)((v96 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v97 + 25) & 0xFFFFFFFFFFFFF8);
  v101 = *(_QWORD *)(v45 - 112);
  v102 = v101 + v69;
  v103 = (__int128 *)(v101 + v66);
  v104 = v103[7];
  v106 = v103[4];
  v105 = v103[5];
  *(_OWORD *)(v102 + 96) = v103[6];
  *(_OWORD *)(v102 + 112) = v104;
  *(_OWORD *)(v102 + 64) = v106;
  *(_OWORD *)(v102 + 80) = v105;
  v107 = v103[11];
  v109 = v103[8];
  v108 = v103[9];
  *(_OWORD *)(v102 + 160) = v103[10];
  *(_OWORD *)(v102 + 176) = v107;
  *(_OWORD *)(v102 + 128) = v109;
  *(_OWORD *)(v102 + 144) = v108;
  v111 = v103[13];
  v110 = v103[14];
  v112 = v103[12];
  *(_QWORD *)(v102 + 240) = *((_QWORD *)v103 + 30);
  *(_OWORD *)(v102 + 208) = v111;
  *(_OWORD *)(v102 + 224) = v110;
  *(_OWORD *)(v102 + 192) = v112;
  v113 = *v103;
  v114 = v103[1];
  v115 = v103[3];
  *(_OWORD *)(v102 + 32) = v103[2];
  *(_OWORD *)(v102 + 48) = v115;
  *(_OWORD *)v102 = v113;
  *(_OWORD *)(v102 + 16) = v114;
  v116 = (_OWORD *)((v102 + 255) & 0xFFFFFFFFFFFFFFF8);
  v117 = (__int128 *)(((unint64_t)v103 + 255) & 0xFFFFFFFFFFFFFFF8);
  v118 = *v117;
  *(_OWORD *)((char *)v116 + 9) = *(__int128 *)((char *)v117 + 9);
  *v116 = v118;
  v119 = (v102 + 287) & 0xFFFFFFFFFFFFFFF8;
  v120 = ((unint64_t)v103 + 287) & 0xFFFFFFFFFFFFFFF8;
  v121 = *(_OWORD *)v120;
  *(_BYTE *)(v119 + 16) = *(_BYTE *)(v120 + 16);
  *(_OWORD *)v119 = v121;
  v122 = (_QWORD *)((v102 + 311) & 0xFFFFFFFFFFFFF8);
  v123 = (_QWORD *)(((unint64_t)v103 + 311) & 0xFFFFFFFFFFFFF8);
  *v122 = *v123;
  *(_OWORD *)(((unint64_t)v122 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v123 + 15) & 0xFFFFFFFFFFFFF8);
  v124 = *(_QWORD *)(v45 - 184);
  v125 = (a9 + v43) & v124;
  v126 = (a9 + *(_QWORD *)(v45 - 96)) & v124;
  v128 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 - 168);
  v127 = *(_QWORD *)(v45 - 160);
  v128(v125, v126, v127);
  v129 = *(_QWORD *)(v45 - 176);
  v130 = (a18 + v125) & v129;
  v131 = (a18 + v126) & v129;
  v128(v130, v131, v127);
  v132 = (a11 + v130) & v54;
  v133 = (a11 + v131) & v54;
  v198(v132, v133, a21);
  v134 = (_QWORD *)((a19 + v132) & 0xFFFFFFFFFFFFFFF8);
  v135 = (_QWORD *)((a19 + v133) & 0xFFFFFFFFFFFFFFF8);
  *v134 = *v135;
  v136 = *(_QWORD *)(v45 - 152);
  v137 = ((unint64_t)v134 + a20) & v136;
  v138 = ((unint64_t)v135 + a20) & v136;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 - 192))(v137, v138, a23);
  v139 = (_QWORD *)((a22 + v137) & 0xFFFFFFFFFFFFF8);
  v140 = (_QWORD *)((a22 + v138) & 0xFFFFFFFFFFFFF8);
  *v139 = *v140;
  *(_OWORD *)(((unint64_t)v139 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v140 + 15) & 0xFFFFFFFFFFFFF8);
  *(_OWORD *)(v132 + a24) = *(_OWORD *)(v133 + a24);
  v141 = *(_QWORD *)(v45 - 136);
  v142 = *(_QWORD *)(v45 - 128);
  v143 = (a31 + v132 + a24) & v141;
  v144 = (a31 + v133 + a24) & v141;
  *(_BYTE *)v143 = *(_BYTE *)v144;
  v145 = v143 | 4;
  v146 = *(_DWORD *)(v144 | 4);
  *(_BYTE *)(v145 + 4) = *(_BYTE *)((v144 | 4) + 4);
  *(_DWORD *)v145 = v146;
  *(_WORD *)(v143 + 10) = *(_WORD *)(v144 + 0xA);
  v85((a32 + v143) & v142, (a32 + v144) & v142, a26);
  v147 = (a33 + ((a32 + v143) & v142)) & v142;
  v148 = (a33 + ((a32 + v144) & v142)) & v142;
  v85(v147, v148, a26);
  v149 = (_BYTE *)(v147 + a34);
  *v149 = *(_BYTE *)(v148 + a34);
  v149[1] = *(_BYTE *)(v148 + a34 + 1);
  v149[2] = *(_BYTE *)(v148 + a34 + 2);
  v149[3] = *(_BYTE *)(v148 + a34 + 3);
  v149[4] = *(_BYTE *)(v148 + a34 + 4);
  v150 = (v147 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  v151 = (v148 + a34 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v150 = *(_OWORD *)v151;
  *(_BYTE *)(v150 + 16) = *(_BYTE *)(v151 + 16);
  *(_BYTE *)(v150 + 17) = *(_BYTE *)(v151 + 17);
  *(_BYTE *)(v150 + 18) = *(_BYTE *)(v151 + 18);
  *(_BYTE *)(v150 + 19) = *(_BYTE *)(v151 + 19);
  v152 = (v150 + 27) & 0xFFFFFFFFFFFFFFF8;
  v153 = (v151 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v152 = *(_QWORD *)v153;
  *(_BYTE *)(v152 + 8) = *(_BYTE *)(v153 + 8);
  *(_BYTE *)(v152 + 9) = *(_BYTE *)(v153 + 9);
  *(_BYTE *)(v152 + 10) = *(_BYTE *)(v153 + 10);
  *(_BYTE *)(v152 + 11) = *(_BYTE *)(v153 + 11);
  *(_BYTE *)(v152 + 12) = *(_BYTE *)(v153 + 12);
  v154 = (_QWORD *)((v150 + 47) & 0xFFFFFFFFFFFFF8);
  v155 = (_QWORD *)((v151 + 47) & 0xFFFFFFFFFFFFF8);
  *v154 = *v155;
  v156 = ((unint64_t)v154 + 15) & 0xFFFFFFFFFFFFFFF8;
  v157 = ((unint64_t)v155 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v156 = *(_QWORD *)v157;
  *(_BYTE *)(v156 + 8) = *(_BYTE *)(v157 + 8);
  *(_BYTE *)(v156 + 9) = *(_BYTE *)(v157 + 9);
  v158 = (void *)((a35 + v156) & v142);
  v159 = (const void *)((a35 + v157) & v142);
  if (v199(v159, 1, a26))
  {
    memcpy(v158, v159, __n);
  }
  else
  {
    v85((uint64_t)v158, (uint64_t)v159, a26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(a27 + 56))(v158, 0, 1, a26);
  }
  v160 = *(_QWORD *)(v45 - 200);
  v161 = (_QWORD *)(((unint64_t)v158 + v160) & 0xFFFFFFFFFFFFFFF8);
  v162 = (_QWORD *)(((unint64_t)v159 + v160) & 0xFFFFFFFFFFFFFFF8);
  *v161 = *v162;
  v163 = ((unint64_t)v161 + 15) & 0xFFFFFFFFFFFFFFF8;
  v164 = ((unint64_t)v162 + 15) & 0xFFFFFFFFFFFFFFF8;
  v165 = *(_QWORD *)v164;
  *(_BYTE *)(v163 + 8) = *(_BYTE *)(v164 + 8);
  *(_QWORD *)v163 = v165;
  v166 = (_QWORD *)(((unint64_t)v161 + 31) & 0xFFFFFFFFFFFFF8);
  v167 = (_QWORD *)(((unint64_t)v162 + 31) & 0xFFFFFFFFFFFFF8);
  *v166 = *v167;
  v168 = (_OWORD *)(((unint64_t)v166 + 15) & 0xFFFFFFFFFFFFFFF8);
  v169 = (_OWORD *)(((unint64_t)v167 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v168 = *v169;
  v170 = ((unint64_t)v168 + 19) & 0xFFFFFFFFFFFFFFF8;
  v171 = ((unint64_t)v169 + 19) & 0xFFFFFFFFFFFFFFF8;
  v172 = *(_QWORD *)v171;
  *(_BYTE *)(v170 + 8) = *(_BYTE *)(v171 + 8);
  *(_QWORD *)v170 = v172;
  *(_BYTE *)(v170 + 9) = *(_BYTE *)(v171 + 9);
  v173 = (v170 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v174 = (v171 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  LODWORD(v165) = *(_DWORD *)v174;
  *(_BYTE *)(v173 + 4) = *(_BYTE *)(v174 + 4);
  *(_DWORD *)v173 = v165;
  *(_OWORD *)((v170 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v171 + 25) & 0xFFFFFFFFFFFFF8);
  v175 = *(_QWORD *)(v45 - 112);
  v176 = v143 + v175;
  v177 = (__int128 *)(v144 + v175);
  v178 = v177[7];
  v180 = v177[4];
  v179 = v177[5];
  *(_OWORD *)(v176 + 96) = v177[6];
  *(_OWORD *)(v176 + 112) = v178;
  *(_OWORD *)(v176 + 64) = v180;
  *(_OWORD *)(v176 + 80) = v179;
  v181 = v177[11];
  v183 = v177[8];
  v182 = v177[9];
  *(_OWORD *)(v176 + 160) = v177[10];
  *(_OWORD *)(v176 + 176) = v181;
  *(_OWORD *)(v176 + 128) = v183;
  *(_OWORD *)(v176 + 144) = v182;
  v185 = v177[13];
  v184 = v177[14];
  v186 = v177[12];
  *(_QWORD *)(v176 + 240) = *((_QWORD *)v177 + 30);
  *(_OWORD *)(v176 + 208) = v185;
  *(_OWORD *)(v176 + 224) = v184;
  *(_OWORD *)(v176 + 192) = v186;
  v187 = *v177;
  v188 = v177[1];
  v189 = v177[3];
  *(_OWORD *)(v176 + 32) = v177[2];
  *(_OWORD *)(v176 + 48) = v189;
  *(_OWORD *)v176 = v187;
  *(_OWORD *)(v176 + 16) = v188;
  v190 = (_OWORD *)((v176 + 255) & 0xFFFFFFFFFFFFFFF8);
  v191 = (__int128 *)(((unint64_t)v177 + 255) & 0xFFFFFFFFFFFFFFF8);
  v192 = *v191;
  *(_OWORD *)((char *)v190 + 9) = *(__int128 *)((char *)v191 + 9);
  *v190 = v192;
  v193 = (v176 + 287) & 0xFFFFFFFFFFFFFFF8;
  v194 = ((unint64_t)v177 + 287) & 0xFFFFFFFFFFFFFFF8;
  v195 = *(_OWORD *)v194;
  *(_BYTE *)(v193 + 16) = *(_BYTE *)(v194 + 16);
  *(_OWORD *)v193 = v195;
  v196 = (_QWORD *)(((unint64_t)v177 + 311) & 0xFFFFFFFFFFFFF8);
  v197 = (_QWORD *)((v176 + 311) & 0xFFFFFFFFFFFFF8);
  *v197 = *v196;
  *(_OWORD *)(((unint64_t)v197 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v196 + 15) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)((a12 + v125) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a12 + v126) & 0xFFFFFFFFFFFFF8);
  JUMPOUT(0x23AF37B60);
}

uint64_t sub_23AF36A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = v30;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(a29 + 32))(v33, v30, *(_QWORD *)(v34 - 160));
  *(_BYTE *)(a30 + v33) = *(_BYTE *)(a30 + v35);
  *(_OWORD *)(((a30 + v33) & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)(((a30 + v35) & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_BYTE *)(v33 + v31) = 2;
  *(_BYTE *)(v33 + v32) = 0;
  return v33;
}

uint64_t sub_23AF36AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = v30;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(a29 + 32))(v33, v30, *(_QWORD *)(v34 - 160));
  *(_OWORD *)((v33 + a30 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v35 + a30 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v33 + v31) = 3;
  *(_BYTE *)(v33 + v32) = 0;
  return v33;
}

uint64_t sub_23AF36AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = v30;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(a29 + 32))(v33, v30, *(_QWORD *)(v34 - 160));
  *(_BYTE *)(a30 + v33) = *(_BYTE *)(a30 + v35);
  *(_OWORD *)(((a30 + v33) & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)(((a30 + v35) & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_BYTE *)(v33 + v31) = 4;
  *(_BYTE *)(v33 + v32) = 0;
  return v33;
}

uint64_t sub_23AF36B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = v30;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(a29 + 32))(v33, v30, *(_QWORD *)(v34 - 160));
  *(_OWORD *)((v33 + a30 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v35 + a30 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v33 + v31) = 5;
  *(_BYTE *)(v33 + v32) = 0;
  return v33;
}

_DWORD *sub_23AF37B9C(_DWORD *result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v36;
  unint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  unint64_t v41;
  uint64_t v42;

  if (result != a2)
  {
    v40 = result;
    v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v3 = *(_QWORD *)(v2 + 64);
    v4 = *(unsigned __int8 *)(v2 + 80);
    v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v6 = *(_DWORD *)(v5 + 80) & 0xF8;
    v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v8 = *(unsigned __int8 *)(v7 + 80);
    v9 = v6 | v8 | 7;
    v10 = ((((*(_QWORD *)(v7 + 64) + 7 + ((v8 + 8 + ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    v11 = *(_QWORD *)(sub_23B1C5BDC() - 8);
    v12 = *(unsigned __int8 *)(v11 + 80);
    v42 = (v12 | 7) + 16;
    v13 = *(_QWORD *)(v11 + 64);
    if (*(_DWORD *)(v11 + 84))
      v14 = *(_QWORD *)(v11 + 64);
    else
      v14 = v13 + 1;
    v38 = ((((((((((v14
                  + 7
                  + ((v12
                    + 10
                    + ((((((v13 + 12 + ((v13 + v12 + ((v12 + 12) & ~v12)) & ~v12)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v12)) & 0xFFFFFFFFFFFFFFF8)
                + 31) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 19) & 0xFFFFFFFFFFFFFFF8)
          + 25) & 0xFFFFFFFFFFFFFFF8)
        + 327;
    v15 = (((v38 + ((v42 + ((v3 + v9 + ((v3 + v4) & ~v4)) & ~v9) + v10) & ~(v12 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    v16 = ((v15 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    v17 = ((((v15 + 23 + ((v15 + 16 + (v9 | v4 | v12)) & ~(v9 | v4 | v12))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    v18 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
    if (v18 <= ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
      v18 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    if (v18 > v16)
      v16 = v18;
    if (v16 > v17)
      v17 = v16;
    v41 = v17;
    v39 = v17 | 1;
    v19 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v20 = *(_QWORD *)(v19 + 64);
    v21 = *(unsigned __int8 *)(v19 + 80);
    v22 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v23 = *(_DWORD *)(v22 + 80) & 0xF8;
    v24 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v25 = *(unsigned __int8 *)(v24 + 80);
    v26 = v23 | v25 | 7;
    v27 = (((v38
           + ((v42
             + ((v20 + v26 + ((v20 + v21) & ~v21)) & ~v26)
             + ((((*(_QWORD *)(v24 + 64)
                 + 7
                 + ((v25 + 8 + ((*(_QWORD *)(v22 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v25)) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16) & ~(v12 | 7))) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8;
    v28 = ((v27 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    v29 = (v20 & 0xFFFFFFFFFFFFFFF8) + 24;
    if (v29 <= ((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
      v29 = ((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    if (v29 > v28)
      v28 = v29;
    if (v28 <= ((((v27 + 23 + ((v27 + 16 + (v21 | v12 | v26)) & ~(v21 | v12 | v26))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
              + 16)
      v30 = ((((v27 + 23 + ((v27 + 16 + (v21 | v12 | v26)) & ~(v21 | v12 | v26))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 16;
    else
      v30 = v28;
    if ((v30 | 1) <= v39)
      v31 = v39;
    else
      v31 = v30 | 1;
    v32 = *((unsigned __int8 *)v40 + v31);
    if (v32 >= 2)
    {
      if (v31 <= 3)
        v33 = v31;
      else
        v33 = 4;
      __asm { BR              X14 }
    }
    if (v32 == 1)
    {
      v34 = *((unsigned __int8 *)v40 + v30);
      if (v34 >= 6 && (_DWORD)v30 != 0)
        v34 = *v40 + 6;
      __asm { BR              X10 }
    }
    v36 = *((unsigned __int8 *)v40 + v41);
    if (v36 >= 6 && (_DWORD)v41 != 0)
      v36 = *v40 + 6;
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_23AF3AF6C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t AssociatedTypeWitness;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  int v40;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v51 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 80) & 0xF8;
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v5 | v7 | 7;
  v9 = (((*(_QWORD *)(v6 + 64) + ((v7 + ((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v46 = *(_DWORD *)(v10 + 84);
  v12 = v11;
  v47 = v11 + 16;
  v50 = (((((v3 + v51) & ~v51) + v3 + v8) & ~v8) + v47 + v9 + 16) & (v11 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8);
  v13 = *(_QWORD *)(v10 + 64);
  v48 = v11 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v49 = (v12
       + ((((((v13
             + ((v13 + v12 + ((v11 + 12) & ~(unint64_t)v11)) & ~v12)
             + 12) & 0xFFFFFFFFFFFFFFF8)
           + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 10) & ~v12;
  v14 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v18 = *(_DWORD *)(v17 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v20 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  v21 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = v18 & 0xF8 | v23 | 7;
  v25 = (((((v15 + v16) & ~v16) + v15 + v24) & ~v24)
       + v47
       + ((((*(_QWORD *)(v22 + 64) + ((v23 + ((*(_QWORD *)(v17 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v23) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16) & v48;
  v26 = v16 | v12 | v24;
  v27 = (v15 & 0xFFFFFFFFFFFFFFF8) + 24;
  v28 = ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v46)
    v29 = v13;
  else
    v29 = v13 + 1;
  v30 = ((((((((((v29 + v49 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  v31 = (((v30 + v50) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v32 = ((((v31 + 23 + ((v31 + (v8 | v51 | v12) + 16) & ~(v8 | v51 | v12))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v32 <= ((v31 + 23) & 0xFFFFFFFFFFFFFFF8) + 16)
    v32 = ((v31 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v20 > v32)
    v32 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v21 > v32)
    v32 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v20 <= v32)
    v20 = v32;
  if (v21 > v20)
    v20 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v33 = (((v30 + v25) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v34 = ((v33 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v35 = ((((v33 + 23 + ((v33 + v26 + 16) & ~v26)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v35 <= v34)
    v35 = v34;
  if (v27 > v35)
    v35 = (v15 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v28 > v35)
    v35 = ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v27 <= v35)
    v27 = v35;
  if (v28 > v27)
    v27 = ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v36 = v27 + 1;
  if (v36 <= v20 + 1)
    v37 = v20 + 1;
  else
    v37 = v36;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_45;
  v38 = v37 + 1;
  v39 = 8 * (v37 + 1);
  if ((v37 + 1) <= 3)
  {
    v42 = ((a2 + ~(-1 << v39) - 254) >> v39) + 1;
    if (HIWORD(v42))
    {
      v40 = *(_DWORD *)(a1 + v38);
      if (!v40)
        goto LABEL_45;
      goto LABEL_38;
    }
    if (v42 > 0xFF)
    {
      v40 = *(unsigned __int16 *)(a1 + v38);
      if (!*(_WORD *)(a1 + v38))
        goto LABEL_45;
      goto LABEL_38;
    }
    if (v42 < 2)
    {
LABEL_45:
      v44 = *(unsigned __int8 *)(a1 + v37);
      if (v44 >= 2)
        return (v44 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v40 = *(unsigned __int8 *)(a1 + v38);
  if (!*(_BYTE *)(a1 + v38))
    goto LABEL_45;
LABEL_38:
  v43 = (v40 - 1) << v39;
  if (v38 > 3)
    v43 = 0;
  if ((_DWORD)v38)
  {
    if (v38 > 3)
      LODWORD(v38) = 4;
    __asm { BR              X11 }
  }
  return (v43 + 255);
}

void sub_23AF3B440(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t AssociatedTypeWitness;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v51 = *(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v6 | v8 | 7;
  v10 = (((*(_QWORD *)(v7 + 64) + ((v8 + ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v46 = *(_DWORD *)(v11 + 84);
  v13 = v12;
  v47 = v12 + 16;
  v50 = (((((v4 + v51) & ~v51) + v4 + v9) & ~v9) + v47 + v10 + 16) & (v12 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8);
  v14 = *(_QWORD *)(v11 + 64);
  v48 = v12 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v49 = (v13
       + ((((((v14
             + ((v14 + v13 + ((v12 + 12) & ~(unint64_t)v12)) & ~v13)
             + 12) & 0xFFFFFFFFFFFFFFF8)
           + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 10) & ~v13;
  v15 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v19 = *(_DWORD *)(v18 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = (v4 & 0xFFFFFFFFFFFFFFF8) + 24;
  v22 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = v19 & 0xF8 | v24 | 7;
  v26 = (((((v16 + v17) & ~v17) + v16 + v25) & ~v25)
       + v47
       + ((((*(_QWORD *)(v23 + 64) + ((v24 + ((*(_QWORD *)(v18 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v24) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16) & v48;
  v27 = v17 | v13 | v25;
  v28 = (v16 & 0xFFFFFFFFFFFFFFF8) + 24;
  v29 = ((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v46)
    v30 = v14;
  else
    v30 = v14 + 1;
  v31 = ((((((((((v30 + v49 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  v32 = (((v31 + v50) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = ((((v32 + 23 + ((v32 + (v9 | v51 | v13) + 16) & ~(v9 | v51 | v13))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v33 <= ((v32 + 23) & 0xFFFFFFFFFFFFFFF8) + 16)
    v33 = ((v32 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v21 > v33)
    v33 = (v4 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v22 > v33)
    v33 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v21 <= v33)
    v21 = v33;
  if (v22 > v21)
    v21 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v34 = (((v31 + v26) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = ((v34 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v36 = ((((v34 + 23 + ((v34 + v27 + 16) & ~v27)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v36 <= v35)
    v36 = v35;
  if (v28 > v36)
    v36 = (v16 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v29 > v36)
    v36 = ((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v28 <= v36)
    v28 = v36;
  if (v29 > v28)
    v28 = ((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v37 = v28 + 1;
  if (v37 <= v21 + 1)
    v38 = v21 + 1;
  else
    v38 = v37;
  v39 = v38 + 1;
  if (a3 < 0xFF)
  {
    v42 = 0;
    v40 = a1;
    v41 = a2;
  }
  else
  {
    v40 = a1;
    v41 = a2;
    if (v39 <= 3)
    {
      v44 = ((a3 + ~(-1 << (8 * v39)) - 254) >> (8 * v39)) + 1;
      if (HIWORD(v44))
      {
        v42 = 4u;
      }
      else if (v44 >= 0x100)
      {
        v42 = 2;
      }
      else
      {
        v42 = v44 > 1;
      }
    }
    else
    {
      v42 = 1u;
    }
  }
  if (v41 <= 0xFE)
    __asm { BR              X11 }
  v43 = v41 - 255;
  if (v39 < 4)
  {
    if ((_DWORD)v38 != -1)
    {
      v45 = v43 & ~(-1 << (8 * v39));
      bzero(v40, v39);
      if ((_DWORD)v39 == 3)
      {
        *(_WORD *)v40 = v45;
        v40[2] = BYTE2(v45);
      }
      else if ((_DWORD)v39 == 2)
      {
        *(_WORD *)v40 = v45;
      }
      else
      {
        *v40 = v45;
      }
    }
  }
  else
  {
    bzero(v40, v38 + 1);
    *(_DWORD *)v40 = v43;
  }
  __asm { BR              X10 }
}

uint64_t sub_23AF3B990(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v1 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(unsigned __int8 *)(v1 + 80);
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 80) & 0xF8;
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v5 | v7 | 7;
  v9 = (((*(_QWORD *)(v6 + 64) + ((v7 + ((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v12 = *(_DWORD *)(v10 + 80);
  v37 = *(_DWORD *)(v10 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v13 = (((((v2 + v3) & ~v3) + v2 + v8) & ~v8) + v12 + 16 + v9 + 16) & v37;
  v14 = *(_QWORD *)(v10 + 64);
  v15 = (v12
       + ((((((v14 + ((v14 + v12 + ((v12 + 12) & ~v12)) & ~v12) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 10) & ~v12;
  if (!v11)
    ++v14;
  v16 = ((((((((((v14 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  v17 = (((v16 + v13) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((v17 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v19 = ((((v17 + 23 + ((v17 + (v8 | v3 | v12) + 16) & ~(v8 | v3 | v12))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v20 = (v2 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v20 <= ((v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v20 = ((v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v20 <= v18)
    v20 = v18;
  if (v20 > v19)
    v19 = v20;
  v36 = v19 | 1;
  v21 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v22 = *(_QWORD *)(v21 + 64);
  v23 = *(unsigned __int8 *)(v21 + 80);
  v24 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v25 = *(_DWORD *)(v24 + 80) & 0xF8;
  v26 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = v25 | v27 | 7;
  v29 = (((v16
         + ((((((v22 + v23) & ~v23) + v22 + v28) & ~v28)
           + v12
           + 16
           + ((((*(_QWORD *)(v26 + 64) + ((v27 + ((*(_QWORD *)(v24 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v27) + 7) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16) & v37)) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v30 = ((v29 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v31 = ((((v29 + 23 + ((v29 + (v23 | v12 | v28) + 16) & ~(v23 | v12 | v28))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if ((v22 & 0xFFFFFFFFFFFFFFF8) + 24 <= ((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v32 = ((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v32 = (v22 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v32 <= v30)
    v32 = v30;
  if (v32 > v31)
    v31 = v32;
  v33 = v31 | 1;
  if (v33 <= v36)
    v33 = v36;
  result = *(unsigned __int8 *)(a1 + v33);
  if (result >= 2)
  {
    if (v33 <= 3)
      v35 = v33;
    else
      v35 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_23AF3BDC0(_BYTE *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  size_t v41;
  char v42;
  int v43;
  unint64_t v44;
  size_t v45;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v6 | v8 | 7;
  v10 = (((*(_QWORD *)(v7 + 64) + ((v8 + ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v12 = *(_DWORD *)(v11 + 84);
  v13 = *(_DWORD *)(v11 + 80);
  v44 = *(_DWORD *)(v11 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)(v11 + 64);
  v15 = (v13
       + ((((((v14 + ((v14 + v13 + ((v13 + 12) & ~v13)) & ~v13) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 10) & ~v13;
  if (!v12)
    ++v14;
  v16 = ((((((((((v14 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  v17 = (((v16 + ((((((v3 + v4) & ~v4) + v3 + v9) & ~v9) + v13 + 16 + v10 + 16) & v44)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((v17 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v19 = ((((v17 + 23 + ((v17 + (v9 | v4 | v13) + 16) & ~(v9 | v4 | v13))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v19 <= v18)
    v19 = v18;
  v20 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v20 > v19)
    v19 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  v21 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v21 > v19)
    v19 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v20 > v19)
    v19 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v21 > v19)
    v19 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v45 = v19 + 1;
  v22 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v23 = *(_QWORD *)(v22 + 64);
  v24 = *(unsigned __int8 *)(v22 + 80);
  v25 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v26 = *(_DWORD *)(v25 + 80) & 0xF8;
  result = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(result - 8);
  v29 = *(unsigned __int8 *)(v28 + 80);
  v30 = v26 | v29 | 7;
  v31 = (((v16
         + ((((((v23 + v24) & ~v24) + v23 + v30) & ~v30)
           + v13
           + 16
           + ((((*(_QWORD *)(v28 + 64) + ((v29 + ((*(_QWORD *)(v25 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v29) + 7) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16) & v44)) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v32 = v31 + 23;
  v33 = ((v31 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v34 = (v31 + (v24 | v13 | v30) + 16) & ~(v24 | v13 | v30);
  if (a2 > 1)
  {
    v38 = ((((v32 + v34) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
    v39 = (v23 & 0xFFFFFFFFFFFFFFF8) + 24;
    if (v39 <= ((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
      v39 = ((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    if (v39 > v38)
      v38 = v39;
    if (v38 > v33)
      v33 = v38;
    v40 = v33 | 1;
    if (v40 <= v45)
      v41 = v45;
    else
      v41 = v40;
    if (v41 <= 3)
      v42 = ((a2 - 2) >> (8 * v41)) + 2;
    else
      v42 = 2;
    a1[v41] = v42;
    if (v41 >= 4)
      v43 = 4;
    else
      v43 = v41;
    bzero(a1, v41);
    __asm { BR              X10 }
  }
  v35 = ((((v32 + v34) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if ((v23 & 0xFFFFFFFFFFFFFFF8) + 24 <= ((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v36 = ((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v36 = (v23 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v36 > v35)
    v35 = v36;
  if (v35 > v33)
    v33 = v35;
  v37 = v33 | 1;
  if (v37 <= v45)
    v37 = v45;
  a1[v37] = a2;
  return result;
}

void type metadata accessor for Mutation()
{
  JUMPOUT(0x23B861318);
}

uint64_t sub_23AF3C274(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v5 = v4;
  v7 = type metadata accessor for SnapshotMutation(0, a1[3], a1[5], a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v24 - v9;
  v12 = type metadata accessor for SnapshotMutation(0, a1[2], a1[4], v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v24 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t *))(v19 + 16))(v18, v5, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v18, v7);
    sub_23AF4D8DC(v7);
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v18, v12);
    sub_23AF4D8DC(v12);
    v21 = v22;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  return v21;
}

uint64_t sub_23AF3C3FC(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  id v9;

  v7 = *(void **)(v3 + 216);
  v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = v3;
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 40) = a3;
  v9 = v7;
  swift_retain();
  swift_retain();
  sub_23AA814FC(0, (uint64_t)"performWithDiskDiagnosticAttributes(for:block:)", 47, 2, (uint64_t)sub_23ACF43B0, v8);

  return swift_release();
}

uint64_t sub_23AF3C4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  _QWORD *v8;
  id v9;

  v7 = *(void **)(v3 + 216);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = v3;
  v8[4] = a2;
  v8[5] = a3;
  v9 = v7;
  swift_retain();
  swift_retain();
  sub_23AA814FC(0, (uint64_t)"performWithDiskDiagnosticAttributes(by:block:)", 46, 2, (uint64_t)sub_23ACF4428, (uint64_t)v8);

  return swift_release();
}

uint64_t sub_23AF3C540(int a1, _QWORD *a2, void (*a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  swift_retain();
  if (objc_sync_enter(a2))
LABEL_6:
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)a2);
  v6 = a2[20];
  swift_retain();
  if (objc_sync_exit(a2))
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)a2);
  swift_release();
  v7 = *(unsigned int *)(v6 + 16);
  swift_release();
  v14[0] = 0;
  v9[0] = 0;
  v9[1] = 0;
  v10 = a1;
  v12 = 0;
  v11 = 0;
  v13 = 0;
  sub_23B0E39D4((uint64_t)v9, v7, 2129920, 0, (uint64_t)v14, (uint64_t)sub_23AF3E038, (uint64_t)a2);
  a2 = (_QWORD *)v14[0];
  if (!v14[0])
  {
    __break(1u);
    goto LABEL_6;
  }
  a3(v14[0], 0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AF3C6EC(uint64_t a1, _QWORD *a2, void (*a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  swift_retain();
  if (objc_sync_enter(a2))
LABEL_6:
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)a2);
  v6 = a2[20];
  swift_retain();
  if (objc_sync_exit(a2))
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)a2);
  swift_release();
  v7 = *(unsigned int *)(v6 + 16);
  swift_release();
  v12[0] = 0;
  v9 = a1;
  v10 = 0u;
  v11 = 0u;
  sub_23B0E39D4((uint64_t)&v9, v7, 2129920, 0, (uint64_t)v12, (uint64_t)sub_23AF3E038, (uint64_t)a2);
  a2 = (_QWORD *)v12[0];
  if (!v12[0])
  {
    __break(1u);
    goto LABEL_6;
  }
  a3(v12[0], 0);
  return swift_bridgeObjectRelease();
}

void sub_23AF3C890(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  _QWORD v22[2];
  id v23[2];

  v23[1] = *(id *)MEMORY[0x24BDAC8D0];
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)swift_retain();
  if (objc_sync_enter(v9))
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)a2);
  v10 = a2[20];
  swift_retain();
  if (objc_sync_exit(a2))
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)a2);
  swift_release();
  v11 = v10 + OBJC_IVAR____TtC9libfssync14VFSLookupScope_trashURL;
  v12 = sub_23B1C5A08();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v8, v11, v12);
  swift_release();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
  v14 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12) != 1)
  {
    v14 = (void *)sub_23B1C5954();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v12);
  }
  v15 = objc_msgSend(objc_allocWithZone((Class)FPDiagnosticCollector), sel_initWithFD_trashURL_, a1, v14);

  v23[0] = 0;
  if (objc_msgSend(v15, sel_collectDiagnosticDiskAttributesWithError_, v23))
  {
    v16 = v23[0];
    v17 = objc_msgSend(v15, sel_diagnostic);
    if (v17)
    {
      v18 = v17;
      type metadata accessor for FPDiagnosticAttributeKey(0);
      sub_23AA9F52C(0, &qword_2542E2030);
      sub_23AA7E38C(&qword_2569E2078, (uint64_t (*)(uint64_t))type metadata accessor for FPDiagnosticAttributeKey, (uint64_t)&unk_23B1CE08C);
      v19 = sub_23B1C620C();

      v20 = sub_23AF3CBBC(v19);
      swift_bridgeObjectRelease();

      *a3 = v20;
      return;
    }
    type metadata accessor for NSFileProviderError(0);
    v22[1] = -1005;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&unk_2542E1E60, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderError, (uint64_t)&unk_23B1CC9C0);
    sub_23B1C5864();
  }
  else
  {
    v21 = v23[0];
    sub_23B1C587C();

  }
  swift_willThrow();

}

id sub_23AF3CBBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  char v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void **v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id *v23;
  void *v24;
  id *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  void *v78;
  id v79;
  id v80;
  id v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  id v131;
  id v132;
  id v133;
  id v134;
  id v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  __int128 v150;
  char *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  id v160;
  _QWORD *v161;
  uint64_t v162;
  char v163;
  void (*v164)(void **__return_ptr, _QWORD **);
  void *v165;
  id v166;
  id v167;
  NSObject *v168;
  os_log_type_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  _QWORD *v178;
  char isUniquelyReferenced_nonNull_native;
  char v180;
  unint64_t v181;
  uint64_t v182;
  _BOOL8 v183;
  uint64_t v184;
  char v185;
  id v186;
  unint64_t v187;
  char v188;
  _QWORD *v189;
  uint64_t v190;
  id v191;
  id v192;
  _QWORD *v193;
  uint64_t v194;
  BOOL v195;
  uint64_t v196;
  id result;
  id v198;
  id v199;
  id v200;
  id v201;
  id v202;
  id v203;
  id v204;
  id v205;
  id v206;
  id v207;
  id v208;
  id v209;
  id v210;
  id v211;
  id v212;
  id v213;
  id v214;
  id v215;
  id v216;
  id v217;
  id v218;
  id v219;
  id v220;
  id v221;
  id v222;
  id v223;
  id v224;
  id v225;
  id v226;
  _QWORD *v227;
  uint64_t v228;
  id v229;
  __int128 v230;
  uint64_t v231;
  char *v232;
  id v233;
  uint64_t v234;
  uint64_t v235;
  id v236;
  void *v237;
  _QWORD *v238;

  v2 = v1;
  v4 = sub_23B1C5E4C();
  v234 = *(_QWORD *)(v4 - 8);
  v235 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v232 = (char *)&v198 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void *)*MEMORY[0x24BDC7F70];
  v7 = *(_QWORD *)(a1 + 16);
  swift_retain();
  v231 = a1;
  v228 = v2;
  if (!v7)
    goto LABEL_7;
  v8 = v6;
  v9 = sub_23AA88CF8(v8);
  if ((v10 & 1) == 0)
  {

LABEL_7:
    v227 = 0;
    goto LABEL_8;
  }
  v11 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v9);

  objc_opt_self();
  v12 = (_QWORD *)swift_dynamicCastObjCClass();
  if (!v12)
  {

    goto LABEL_7;
  }
  v227 = v12;
LABEL_8:
  __swift_instantiateConcreteTypeFromMangledName(&qword_2569E7470);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_23B1DE490;
  v14 = (void *)*MEMORY[0x24BDC7FD0];
  *(_QWORD *)(v13 + 32) = *MEMORY[0x24BDC7FD0];
  *(_QWORD *)(v13 + 40) = sub_23AF3DE80;
  v15 = (void *)*MEMORY[0x24BDC7FE0];
  *(_QWORD *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 56) = v15;
  *(_QWORD *)(v13 + 64) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 72) = 0;
  v16 = (void *)*MEMORY[0x24BDC7FD8];
  *(_QWORD *)(v13 + 80) = *MEMORY[0x24BDC7FD8];
  *(_QWORD *)(v13 + 88) = sub_23AF3DE80;
  v17 = (void *)*MEMORY[0x24BDC7FC8];
  *(_QWORD *)(v13 + 96) = 0;
  *(_QWORD *)(v13 + 104) = v17;
  *(_QWORD *)(v13 + 112) = sub_23AF3DE8C;
  *(_QWORD *)(v13 + 120) = 0;
  v18 = (void **)MEMORY[0x24BDC7F30];
  v199 = (id)*MEMORY[0x24BDC7F98];
  *(_QWORD *)(v13 + 128) = v199;
  *(_QWORD *)(v13 + 136) = sub_23AF3DE80;
  v19 = *v18;
  *(_QWORD *)(v13 + 144) = 0;
  *(_QWORD *)(v13 + 152) = v19;
  v200 = v19;
  *(_QWORD *)(v13 + 160) = sub_23AF3DE94;
  *(_QWORD *)(v13 + 168) = 0;
  v201 = (id)*MEMORY[0x24BDC7F38];
  *(_QWORD *)(v13 + 176) = v201;
  *(_QWORD *)(v13 + 184) = sub_23AF3DE8C;
  v20 = (void *)*MEMORY[0x24BDC7FA0];
  *(_QWORD *)(v13 + 192) = 0;
  *(_QWORD *)(v13 + 200) = v20;
  v202 = v20;
  *(_QWORD *)(v13 + 208) = sub_23AF3DE94;
  *(_QWORD *)(v13 + 216) = 0;
  v203 = (id)*MEMORY[0x24BDC7F68];
  *(_QWORD *)(v13 + 224) = v203;
  *(_QWORD *)(v13 + 232) = sub_23AF3DE80;
  v21 = (void *)*MEMORY[0x24BDC7FC0];
  *(_QWORD *)(v13 + 240) = 0;
  *(_QWORD *)(v13 + 248) = v21;
  v204 = v21;
  *(_QWORD *)(v13 + 256) = sub_23AF3DEC4;
  *(_QWORD *)(v13 + 264) = 0;
  v205 = (id)*MEMORY[0x24BDC7F28];
  *(_QWORD *)(v13 + 272) = v205;
  *(_QWORD *)(v13 + 280) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 288) = 0;
  *(_QWORD *)(v13 + 296) = v6;
  *(_QWORD *)(v13 + 304) = sub_23AAED18C;
  *(_QWORD *)(v13 + 312) = 0;
  v206 = (id)*MEMORY[0x24BDC7F58];
  *(_QWORD *)(v13 + 320) = v206;
  *(_QWORD *)(v13 + 328) = sub_23AF3DE80;
  v22 = (void *)*MEMORY[0x24BDC7F88];
  *(_QWORD *)(v13 + 336) = 0;
  *(_QWORD *)(v13 + 344) = v22;
  v207 = v22;
  v23 = (id *)MEMORY[0x24BDC7F60];
  *(_QWORD *)(v13 + 352) = sub_23AF3DEEC;
  *(_QWORD *)(v13 + 360) = 0;
  v208 = *v23;
  *(_QWORD *)(v13 + 368) = v208;
  *(_QWORD *)(v13 + 376) = sub_23AF3DE80;
  v24 = (void *)*MEMORY[0x24BDC7F48];
  *(_QWORD *)(v13 + 384) = 0;
  *(_QWORD *)(v13 + 392) = v24;
  v209 = v24;
  v25 = (id *)MEMORY[0x24BDC7F78];
  *(_QWORD *)(v13 + 400) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 408) = 0;
  v210 = *v25;
  *(_QWORD *)(v13 + 416) = v210;
  *(_QWORD *)(v13 + 424) = sub_23AF3DE8C;
  v26 = (void *)*MEMORY[0x24BDC7F90];
  *(_QWORD *)(v13 + 432) = 0;
  *(_QWORD *)(v13 + 440) = v26;
  v211 = v26;
  *(_QWORD *)(v13 + 448) = sub_23AF3DF14;
  *(_QWORD *)(v13 + 456) = 0;
  v212 = (id)*MEMORY[0x24BDC7FB0];
  *(_QWORD *)(v13 + 464) = v212;
  *(_QWORD *)(v13 + 472) = sub_23AF3DF14;
  v27 = (void *)*MEMORY[0x24BDC7FB8];
  *(_QWORD *)(v13 + 480) = 0;
  *(_QWORD *)(v13 + 488) = v27;
  v213 = v27;
  *(_QWORD *)(v13 + 496) = sub_23AF3DF14;
  *(_QWORD *)(v13 + 504) = 0;
  v28 = (void *)*MEMORY[0x24BDC7F50];
  v198 = v6;
  v215 = v28;
  *(_QWORD *)(v13 + 512) = v28;
  *(_QWORD *)(v13 + 520) = sub_23AF3DF44;
  *(_QWORD *)(v13 + 528) = 0;
  v217 = (id)*MEMORY[0x24BDC7F80];
  *(_QWORD *)(v13 + 536) = v217;
  *(_QWORD *)(v13 + 544) = sub_23AF3DE8C;
  *(_QWORD *)(v13 + 552) = 0;
  v29 = (void *)*MEMORY[0x24BDC7F40];
  v30 = swift_allocObject();
  v31 = v228;
  *(_QWORD *)(v30 + 16) = sub_23AF3E050;
  *(_QWORD *)(v30 + 24) = v31;
  v218 = v29;
  *(_QWORD *)(v13 + 560) = v29;
  *(_QWORD *)(v13 + 568) = sub_23AF3E058;
  *(_QWORD *)(v13 + 576) = v30;
  v214 = (id)*MEMORY[0x24BDC7FA8];
  *(_QWORD *)(v13 + 584) = v214;
  *(_QWORD *)(v13 + 592) = sub_23AF3DEEC;
  *(_QWORD *)(v13 + 600) = 0;
  v216 = (id)*MEMORY[0x24BDC7EE0];
  *(_QWORD *)(v13 + 608) = v216;
  *(_QWORD *)(v13 + 616) = sub_23AF3DF44;
  *(_QWORD *)(v13 + 624) = 0;
  v32 = (void *)*MEMORY[0x24BDC7ED0];
  *(_QWORD *)(v13 + 632) = *MEMORY[0x24BDC7ED0];
  *(_QWORD *)(v13 + 640) = sub_23AF3DE8C;
  *(_QWORD *)(v13 + 648) = 0;
  v219 = (id)*MEMORY[0x24BDC7F00];
  *(_QWORD *)(v13 + 656) = v219;
  *(_QWORD *)(v13 + 664) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 672) = 0;
  v220 = (id)*MEMORY[0x24BDC7EF0];
  *(_QWORD *)(v13 + 680) = v220;
  *(_QWORD *)(v13 + 688) = sub_23AF3DF44;
  *(_QWORD *)(v13 + 696) = 0;
  v221 = (id)*MEMORY[0x24BDC7EE8];
  *(_QWORD *)(v13 + 704) = v221;
  *(_QWORD *)(v13 + 712) = sub_23AF3DF44;
  *(_QWORD *)(v13 + 720) = 0;
  v222 = (id)*MEMORY[0x24BDC7EC8];
  *(_QWORD *)(v13 + 728) = v222;
  *(_QWORD *)(v13 + 736) = sub_23AF3DFA8;
  *(_QWORD *)(v13 + 744) = 0;
  v223 = (id)*MEMORY[0x24BDC7EF8];
  *(_QWORD *)(v13 + 752) = v223;
  *(_QWORD *)(v13 + 760) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 768) = 0;
  v224 = (id)*MEMORY[0x24BDC7ED8];
  *(_QWORD *)(v13 + 776) = v224;
  *(_QWORD *)(v13 + 784) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 792) = 0;
  v225 = (id)*MEMORY[0x24BDC8010];
  *(_QWORD *)(v13 + 800) = v225;
  *(_QWORD *)(v13 + 808) = sub_23AF3DE8C;
  *(_QWORD *)(v13 + 816) = 0;
  v226 = (id)*MEMORY[0x24BDC8000];
  *(_QWORD *)(v13 + 824) = v226;
  *(_QWORD *)(v13 + 832) = sub_23AF3DE8C;
  *(_QWORD *)(v13 + 840) = 0;
  v229 = (id)*MEMORY[0x24BDC8008];
  *(_QWORD *)(v13 + 848) = v229;
  *(_QWORD *)(v13 + 856) = sub_23AF3DE8C;
  *(_QWORD *)(v13 + 864) = 0;
  *(_QWORD *)&v230 = *MEMORY[0x24BDC7FF8];
  *(_QWORD *)(v13 + 872) = v230;
  *(_QWORD *)(v13 + 880) = sub_23AF3DE8C;
  *(_QWORD *)(v13 + 888) = 0;
  v233 = (id)*MEMORY[0x24BDC7FF0];
  *(_QWORD *)(v13 + 896) = v233;
  *(_QWORD *)(v13 + 904) = sub_23AF3DF44;
  *(_QWORD *)(v13 + 912) = 0;
  v236 = (id)*MEMORY[0x24BDC7FE8];
  *(_QWORD *)(v13 + 920) = v236;
  *(_QWORD *)(v13 + 928) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 936) = 0;
  v33 = (void *)*MEMORY[0x24BDC7F10];
  *(_QWORD *)(v13 + 944) = *MEMORY[0x24BDC7F10];
  *(_QWORD *)(v13 + 952) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 960) = 0;
  v34 = (void *)*MEMORY[0x24BDC7F18];
  v35 = v227;
  if (v227)
  {
    v36 = v14;
    v37 = v15;
    v38 = v16;
    v39 = v17;
    v40 = v199;
    v41 = v200;
    v42 = v201;
    v43 = v202;
    v44 = v203;
    v45 = v204;
    v46 = v205;
    v47 = v198;
    v48 = v206;
    v49 = v207;
    v50 = v208;
    v51 = v209;
    v52 = v210;
    v53 = v211;
    v54 = v212;
    v55 = v213;
    v56 = v215;
    v57 = v217;
    v58 = v218;
    v59 = v228;
    swift_retain();
    v60 = v214;
    v61 = v216;
    v62 = v32;
    v63 = v219;
    v64 = v220;
    v65 = v221;
    v66 = v222;
    v67 = v223;
    v68 = v224;
    v69 = v225;
    v70 = v226;
    v71 = v229;
    v72 = (id)v230;
    v73 = v233;
    v74 = v236;
    v75 = v33;
    v76 = v34;
    v77 = objc_msgSend(v35, sel_unsignedLongLongValue);
    v35 = (_QWORD *)swift_allocObject();
    v35[2] = v77;
    v78 = sub_23AF3E0B8;
  }
  else
  {
    v79 = v14;
    v80 = v15;
    v81 = v16;
    v82 = v17;
    v83 = v199;
    v84 = v200;
    v85 = v201;
    v86 = v202;
    v87 = v203;
    v88 = v204;
    v89 = v205;
    v90 = v198;
    v91 = v206;
    v92 = v207;
    v93 = v208;
    v94 = v209;
    v95 = v210;
    v96 = v211;
    v97 = v212;
    v98 = v213;
    v99 = v215;
    v100 = v217;
    v101 = v218;
    v59 = v228;
    swift_retain();
    v102 = v214;
    v103 = v216;
    v104 = v32;
    v105 = v219;
    v106 = v220;
    v107 = v221;
    v108 = v222;
    v109 = v223;
    v110 = v224;
    v111 = v225;
    v112 = v226;
    v113 = v229;
    v114 = (id)v230;
    v115 = v233;
    v116 = v236;
    v117 = v33;
    v118 = v34;
    v78 = sub_23AAEC8DC;
  }
  v119 = swift_allocObject();
  *(_QWORD *)(v119 + 16) = v78;
  *(_QWORD *)(v119 + 24) = v35;
  *(_QWORD *)(v13 + 968) = v34;
  *(_QWORD *)(v13 + 976) = sub_23AF3E238;
  *(_QWORD *)(v13 + 984) = v119;
  v236 = (id)*MEMORY[0x24BDC7F08];
  *(_QWORD *)(v13 + 992) = v236;
  *(_QWORD *)(v13 + 1000) = sub_23AF3DE94;
  *(_QWORD *)(v13 + 1008) = 0;
  v233 = (id)*MEMORY[0x24BDC7F20];
  v120 = v233;
  v121 = swift_allocObject();
  *(_QWORD *)(v121 + 16) = sub_23AF3E050;
  *(_QWORD *)(v121 + 24) = v59;
  *(_QWORD *)(v13 + 1016) = v120;
  *(_QWORD *)(v13 + 1024) = sub_23AF3E238;
  *(_QWORD *)(v13 + 1032) = v121;
  *(_QWORD *)&v230 = *MEMORY[0x24BDC7DC0];
  *(_QWORD *)(v13 + 1040) = v230;
  *(_QWORD *)(v13 + 1048) = sub_23AF3DF44;
  *(_QWORD *)(v13 + 1056) = 0;
  v122 = (void *)*MEMORY[0x24BDC7DD8];
  *(_QWORD *)(v13 + 1064) = *MEMORY[0x24BDC7DD8];
  *(_QWORD *)(v13 + 1072) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 1080) = 0;
  v123 = (void *)*MEMORY[0x24BDC7DC8];
  *(_QWORD *)(v13 + 1088) = *MEMORY[0x24BDC7DC8];
  *(_QWORD *)(v13 + 1096) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 1104) = 0;
  v124 = (void *)*MEMORY[0x24BDC7DE0];
  *(_QWORD *)(v13 + 1112) = *MEMORY[0x24BDC7DE0];
  *(_QWORD *)(v13 + 1120) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 1128) = 0;
  v125 = (void *)*MEMORY[0x24BDC7DD0];
  *(_QWORD *)(v13 + 1136) = *MEMORY[0x24BDC7DD0];
  *(_QWORD *)(v13 + 1144) = sub_23AF3DE8C;
  *(_QWORD *)(v13 + 1152) = 0;
  v126 = (void *)*MEMORY[0x24BDC7EB0];
  *(_QWORD *)(v13 + 1160) = *MEMORY[0x24BDC7EB0];
  *(_QWORD *)(v13 + 1168) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 1176) = 0;
  v127 = (void *)*MEMORY[0x24BDC7EA8];
  *(_QWORD *)(v13 + 1184) = *MEMORY[0x24BDC7EA8];
  *(_QWORD *)(v13 + 1192) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 1200) = 0;
  v128 = (void *)*MEMORY[0x24BDC7EA0];
  *(_QWORD *)(v13 + 1208) = *MEMORY[0x24BDC7EA0];
  *(_QWORD *)(v13 + 1216) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 1224) = 0;
  v129 = (void *)*MEMORY[0x24BDC7EC0];
  *(_QWORD *)(v13 + 1232) = *MEMORY[0x24BDC7EC0];
  *(_QWORD *)(v13 + 1240) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 1248) = 0;
  v130 = (void *)*MEMORY[0x24BDC7EB8];
  *(_QWORD *)(v13 + 1256) = *MEMORY[0x24BDC7EB8];
  *(_QWORD *)(v13 + 1264) = sub_23AF3DE80;
  *(_QWORD *)(v13 + 1272) = 0;
  swift_retain();
  v131 = v236;
  v132 = v233;
  v133 = (id)v230;
  v134 = v122;
  v135 = v123;
  v136 = v124;
  v137 = v125;
  v138 = v126;
  v139 = v127;
  v140 = v128;
  v141 = v129;
  v142 = v130;
  v143 = sub_23AAEC670(v13);
  v144 = v231;
  v145 = *(_QWORD *)(v231 + 64);
  v233 = (id)(v231 + 64);
  v146 = 1 << *(_BYTE *)(v231 + 32);
  v147 = -1;
  if (v146 < 64)
    v147 = ~(-1 << v146);
  v148 = v147 & v145;
  v236 = (id)((unint64_t)(v146 + 63) >> 6);
  swift_bridgeObjectRetain();
  v149 = 0;
  v226 = (id)MEMORY[0x24BEE4B00];
  *(_QWORD *)&v150 = 136315138;
  v230 = v150;
  v229 = (id)(MEMORY[0x24BEE4AD8] + 8);
  v151 = v232;
  while (1)
  {
    if (v148)
    {
      v152 = __clz(__rbit64(v148));
      v148 &= v148 - 1;
      v153 = v152 | (v149 << 6);
      goto LABEL_32;
    }
    v154 = v149 + 1;
    if (__OFADD__(v149, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    if (v154 >= (uint64_t)v236)
      goto LABEL_50;
    v155 = *((_QWORD *)v233 + v154);
    ++v149;
    if (!v155)
    {
      v149 = v154 + 1;
      if (v154 + 1 >= (uint64_t)v236)
        goto LABEL_50;
      v155 = *((_QWORD *)v233 + v149);
      if (!v155)
      {
        v149 = v154 + 2;
        if (v154 + 2 >= (uint64_t)v236)
          goto LABEL_50;
        v155 = *((_QWORD *)v233 + v149);
        if (!v155)
          break;
      }
    }
LABEL_31:
    v148 = (v155 - 1) & v155;
    v153 = __clz(__rbit64(v155)) + (v149 << 6);
LABEL_32:
    v157 = 8 * v153;
    v158 = *(void **)(*(_QWORD *)(v144 + 56) + v157);
    v159 = *(_QWORD *)(v143 + 16);
    v160 = *(id *)(*(_QWORD *)(v144 + 48) + v157);
    v161 = v158;
    if (v159 && (v162 = sub_23AA88CF8(v160), (v163 & 1) != 0))
    {
      v164 = *(void (**)(void **__return_ptr, _QWORD **))(*(_QWORD *)(v143 + 56) + 16 * v162);
      v238 = v161;
      swift_retain();
      v164(&v237, &v238);
      swift_release();
      v165 = v237;
      if (v237)
      {
        v175 = (void *)sub_23B1C63E0();
        v177 = v176;
        v224 = v165;
        v178 = v226;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v238 = v178;
        v223 = v175;
        v225 = v177;
        v181 = sub_23AAAF4C4((uint64_t)v175, (uint64_t)v177);
        v182 = v178[2];
        v183 = (v180 & 1) == 0;
        v184 = v182 + v183;
        if (__OFADD__(v182, v183))
          goto LABEL_53;
        v185 = v180;
        if (v178[3] >= v184)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_23B18A520();
          v186 = v225;
        }
        else
        {
          sub_23AD17140(v184, isUniquelyReferenced_nonNull_native);
          v186 = v225;
          v187 = sub_23AAAF4C4((uint64_t)v223, (uint64_t)v225);
          if ((v185 & 1) != (v188 & 1))
            goto LABEL_55;
          v181 = v187;
        }
        v189 = v238;
        v226 = v238;
        if ((v185 & 1) != 0)
        {
          v190 = v238[7];

          v191 = v224;
          *(_QWORD *)(v190 + 8 * v181) = v224;
          v192 = v191;
        }
        else
        {
          v238[(v181 >> 6) + 8] |= 1 << v181;
          v193 = (_QWORD *)(v189[6] + 16 * v181);
          v192 = v224;
          *v193 = v223;
          v193[1] = v186;
          *(_QWORD *)(v189[7] + 8 * v181) = v192;
          v194 = v189[2];
          v195 = __OFADD__(v194, 1);
          v196 = v194 + 1;
          if (v195)
            goto LABEL_54;
          v189[2] = v196;
          swift_bridgeObjectRetain();
        }
        v151 = v232;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {

      }
    }
    else
    {
      v166 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      v167 = v160;
      v168 = sub_23B1C5E40();
      v169 = sub_23B1C6AAC();
      if (os_log_type_enabled(v168, v169))
      {
        v170 = swift_slowAlloc();
        v171 = (_QWORD *)swift_slowAlloc();
        v238 = v171;
        *(_DWORD *)v170 = v230;
        v172 = sub_23B1C63E0();
        *(_QWORD *)(v170 + 4) = sub_23AABEC68(v172, v173, (uint64_t *)&v238);

        v144 = v231;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23AA66000, v168, v169, "Ignoring entry %s in telemetry: unknown entry", (uint8_t *)v170, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v171, -1, -1);
        v174 = v170;
        v151 = v232;
        MEMORY[0x23B8614BC](v174, -1, -1);

      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v234 + 8))(v151, v235);
    }
  }
  v156 = v154 + 3;
  if (v156 >= (uint64_t)v236)
  {
LABEL_50:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    return v226;
  }
  v155 = *((_QWORD *)v233 + v156);
  if (v155)
  {
    v149 = v156;
    goto LABEL_31;
  }
  while (1)
  {
    v149 = v156 + 1;
    if (__OFADD__(v156, 1))
      break;
    if (v149 >= (uint64_t)v236)
      goto LABEL_50;
    v155 = *((_QWORD *)v233 + v149);
    ++v156;
    if (v155)
      goto LABEL_31;
  }
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  result = (id)sub_23B1C7418();
  __break(1u);
  return result;
}

id sub_23AF3DB34()
{
  id result;
  uint64_t v1;
  id v2;
  uint64_t v3;

  objc_opt_self();
  result = (id)swift_dynamicCastObjCClass();
  if (result)
  {
    v1 = (uint64_t)objc_msgSend(result, sel_integerValue);
    if (v1 == getuid())
    {
      return objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, 0);
    }
    else if (v1)
    {
      v2 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
      if (v1 > 999)
        v3 = 3;
      else
        v3 = 2;
      return objc_msgSend(v2, sel_initWithInteger_, v3);
    }
    else
    {
      return objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, 1);
    }
  }
  return result;
}

id sub_23AF3DBE4(uint64_t a1, _QWORD *a2)
{
  id result;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  uint64_t v13;

  objc_opt_self();
  result = (id)swift_dynamicCastObjCClass();
  if (!result)
    return result;
  v4 = objc_msgSend(result, sel_unsignedLongLongValue);
  v5 = (void *)swift_retain();
  if (objc_sync_enter(v5))
    goto LABEL_13;
  v6 = a2[20];
  swift_retain();
  if (objc_sync_exit(a2))
    goto LABEL_14;
  swift_release();
  v7 = *(id *)(v6 + 24);
  swift_release();
  if (v4 == v7)
    return objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, 0);
  v8 = (void *)swift_retain();
  if (objc_sync_enter(v8))
LABEL_13:
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)a2);
  v9 = a2[20];
  swift_retain();
  if (objc_sync_exit(a2))
LABEL_14:
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)a2);
  swift_release();
  v10 = *(_QWORD *)(v9 + 32);
  swift_bridgeObjectRetain();
  swift_release();
  v11 = sub_23AA940DC((uint64_t)v4, v10);
  swift_bridgeObjectRelease();
  v12 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
  if ((v11 & 1) != 0)
    v13 = 1;
  else
    v13 = 2;
  return objc_msgSend(v12, sel_initWithInteger_, v13);
}

id sub_23AF3DD5C(void *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v7;
  uint64_t v8;

  objc_opt_self();
  v2 = swift_dynamicCastObjCClass();
  if (!v2)
    return 0;
  v3 = (void *)v2;
  v4 = a1;
  if (objc_msgSend(v3, sel_integerValue) == (id)128)
  {

    v5 = v4;
    return v4;
  }
  sub_23B0DC740(2);
  v8 = v7;

  return (id)v8;
}

id sub_23AF3DDE4(uint64_t a1, id a2)
{
  id result;
  id v4;
  id v5;
  id v6;
  uint64_t v7;

  objc_opt_self();
  result = (id)swift_dynamicCastObjCClass();
  if (result)
  {
    v4 = objc_msgSend(result, sel_unsignedLongLongValue);
    if (v4 == a2)
    {
      return objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, 0);
    }
    else
    {
      v5 = v4;
      v6 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
      if (v5 <= a2)
        v7 = 2;
      else
        v7 = 1;
      return objc_msgSend(v6, sel_initWithInteger_, v7);
    }
  }
  return result;
}

id sub_23AF3DE80@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = v2;
  return v2;
}

void sub_23AF3DE8C(uint64_t *a1@<X8>)
{
  sub_23AF3DF4C(1, a1);
}

id sub_23AF3DE94@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = sub_23AF3E0C0(*a1, 8, 8);
  *a2 = result;
  return result;
}

id sub_23AF3DEC4@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_23AF3DB34();
  *a1 = result;
  return result;
}

id sub_23AF3DEEC@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = sub_23AF3DD5C(*a1);
  *a2 = result;
  return result;
}

id sub_23AF3DF14@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = sub_23AF3E0C0(*a1, 16, 8);
  *a2 = result;
  return result;
}

void sub_23AF3DF44(uint64_t *a1@<X8>)
{
  sub_23AF3DF4C(2, a1);
}

void sub_23AF3DF4C(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  objc_opt_self();
  v4 = swift_dynamicCastObjCClass();
  if (v4)
    sub_23B0DC740(a1);
  *a2 = v4;
}

void *sub_23AF3DFA8@<X0>(uint64_t *a1@<X8>)
{
  void *result;
  id v3;
  uint64_t v4;

  objc_opt_self();
  result = (void *)swift_dynamicCastObjCClass();
  if (result)
  {
    v3 = objc_msgSend(result, sel_fp_obfuscatedFilename);
    sub_23B1C63E0();

    v4 = sub_23B1C63BC();
    result = (void *)swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_23AF3E038(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  sub_23AF3C890(a1, v2, a2);
}

id sub_23AF3E050(uint64_t a1)
{
  _QWORD *v1;

  return sub_23AF3DBE4(a1, v1);
}

uint64_t sub_23AF3E058@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_23AF3E084()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AF3E0A8()
{
  return swift_deallocObject();
}

id sub_23AF3E0B8(uint64_t a1)
{
  uint64_t v1;

  return sub_23AF3DDE4(a1, *(id *)(v1 + 16));
}

id sub_23AF3E0C0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  long double v11;
  double v12;
  double v13;
  uint64_t v14;

  objc_opt_self();
  v6 = swift_dynamicCastObjCClass();
  if (v6)
  {
    v7 = (void *)v6;
    v8 = a1;
    if (objc_msgSend(v7, sel_integerValue))
    {
      sub_23AA9F52C(0, (unint64_t *)&qword_2542E7568);
      v9 = (id)sub_23B1C6C38();
LABEL_15:
      v10 = v9;

      return v10;
    }
    objc_msgSend(v7, sel_doubleValue);
    if (a2 < 2)
LABEL_20:
      sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/tree/VFSFileTree+DiagnosticCollection.swift", 144, 2, 13);
    v12 = log(v11);
    v13 = v12 / log((double)a2);
    if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) == 0)
    {

      return 0;
    }
    if (v13 <= -9.22337204e18)
    {
      __break(1u);
    }
    else if (v13 < 9.22337204e18)
    {
      if (!__OFSUB__(a3, 1))
      {
        if (a3 - 1 >= ((uint64_t)v13 & ~((uint64_t)v13 >> 63)))
          v14 = (uint64_t)v13 & ~((uint64_t)v13 >> 63);
        else
          v14 = a3 - 1;
        v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v14);
        goto LABEL_15;
      }
      goto LABEL_19;
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  return 0;
}

ValueMetadata *type metadata accessor for NSecTimestamp()
{
  return &type metadata for NSecTimestamp;
}

ValueMetadata *type metadata accessor for NSecTimeInterval()
{
  return &type metadata for NSecTimeInterval;
}

unint64_t sub_23AF3E268()
{
  unint64_t result;

  result = qword_2569E7478;
  if (!qword_2569E7478)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE5D4, &type metadata for NSecTimeInterval);
    atomic_store(result, (unint64_t *)&qword_2569E7478);
  }
  return result;
}

uint64_t sub_23AF3E2AC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (a2 == 0x7FFFFFFFFFFFFFFFLL)
    return 0x726576656ELL;
  v2 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    sub_23AB55910();
    v4 = sub_23B1C6D70();
    result = sub_23B1C64F4();
    if ((v2 & 0x8000000000000000) == 0 || (v3 = __OFSUB__(0, v2), v2 = -v2, !v3))
    {
      sub_23AF3E770(v2);
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      sub_23B1C64F4();
      return v4;
    }
  }
  __break(1u);
  return result;
}

_QWORD *sub_23AF3E3BC(_QWORD *result, _QWORD *a2)
{
  if (!__OFSUB__(*a2, *result))
    return (_QWORD *)(*a2 == *result);
  __break(1u);
  return result;
}

_QWORD *sub_23AF3E3D8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  if (__OFSUB__(*result, *v2))
    __break(1u);
  else
    *a2 = *result - *v2;
  return result;
}

_QWORD *sub_23AF3E3F4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  if (__OFADD__(*v2, *result))
    __break(1u);
  else
    *a2 = *v2 + *result;
  return result;
}

_QWORD *sub_23AF3E410(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  if (__OFADD__(*a4, *a6))
  {
    __break(1u);
  }
  else
  {
    *result = *a4 + *a6;
    return 0;
  }
  return result;
}

uint64_t sub_23AF3E434()
{
  uint64_t *v0;
  uint64_t result;
  uint64_t v2;
  BOOL v3;

  result = *v0;
  if ((*v0 & 0x8000000000000000) == 0)
  {
    v2 = 0;
LABEL_5:
    sub_23AF3E770(result);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v2;
  }
  v3 = __OFSUB__(0, result);
  result = -result;
  if (!v3)
  {
    v2 = 45;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23AF3E4A4(_QWORD *result, _QWORD *a2)
{
  if (!__OFSUB__(*a2, *result))
    return (_QWORD *)(*a2 - *result > 0);
  __break(1u);
  return result;
}

_QWORD *sub_23AF3E4C4(_QWORD *result, _QWORD *a2)
{
  if (!__OFSUB__(*result, *a2))
    return (_QWORD *)(*result - *a2 < 1);
  __break(1u);
  return result;
}

_QWORD *sub_23AF3E4E4(_QWORD *result, _QWORD *a2)
{
  if (!__OFSUB__(*a2, *result))
    return (_QWORD *)(*a2 - *result < 1);
  __break(1u);
  return result;
}

_QWORD *sub_23AF3E504(_QWORD *result, _QWORD *a2)
{
  if (!__OFSUB__(*result, *a2))
    return (_QWORD *)(*result - *a2 > 0);
  __break(1u);
  return result;
}

uint64_t sub_23AF3E524()
{
  return MEMORY[0x24BEE17E8];
}

unint64_t sub_23AF3E534()
{
  unint64_t result;

  result = qword_2569E7480;
  if (!qword_2569E7480)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE4D4, &type metadata for NSecTimeInterval);
    atomic_store(result, (unint64_t *)&qword_2569E7480);
  }
  return result;
}

uint64_t sub_23AF3E578()
{
  return MEMORY[0x24BEE1780];
}

uint64_t sub_23AF3E584()
{
  return MEMORY[0x24BEE17C0];
}

BOOL sub_23AF3E590(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_23AF3E5A4(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_23AF3E5B8(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_23AF3E5CC(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

uint64_t sub_23AF3E5E0()
{
  sub_23AB55910();
  return sub_23B1C6D70();
}

uint64_t sub_23AF3E63C()
{
  sub_23AF3E72C();
  return sub_23B1C66C8();
}

uint64_t sub_23AF3E698()
{
  sub_23AF3E72C();
  return sub_23B1C6674();
}

unint64_t sub_23AF3E6E8()
{
  unint64_t result;

  result = qword_2569E7488;
  if (!qword_2569E7488)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE6F4, &type metadata for NSecTimestamp);
    atomic_store(result, (unint64_t *)&qword_2569E7488);
  }
  return result;
}

unint64_t sub_23AF3E72C()
{
  unint64_t result;

  result = qword_2542E21F8;
  if (!qword_2542E21F8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE71C, &type metadata for NSecTimestamp);
    atomic_store(result, (unint64_t *)&qword_2542E21F8);
  }
  return result;
}

uint64_t sub_23AF3E770(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  if (a1 < 60000000000 && (v1 = a1 / 1000000 % 1000, a1 <= 999999999))
  {
    v3 = sub_23B1C7304();
    if (v1 >= 1)
    {
      sub_23B1C64F4();
      sub_23B1C7304();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v3 = sub_23B1C7304();
    sub_23B1C64F4();
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  sub_23B1C64F4();
  return v3;
}

uint64_t sub_23AF3EA84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double v4;
  double v5;
  uint64_t result;
  double v7;
  uint64_t v8;

  v0 = sub_23B1C5BDC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B1C5BD0();
  sub_23B1C5B94();
  v5 = v4;
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v7 = v5 * 1000000000.0;
  if ((~COERCE__INT64(v5 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v7 < 9.22337204e18)
    return (uint64_t)v7;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_23AF3EB5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t (*v15)(char *, uint64_t);
  uint64_t result;
  double v17;
  uint64_t v18;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23B1C5BDC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v18 - v10;
  sub_23AB6E30C(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_23AB6E2CC(a1);
    sub_23AB6E2CC((uint64_t)v4);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  sub_23B1C5B94();
  v14 = v13;
  v15 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  result = v15(v9, v5);
  v17 = v14 * 1000000000.0;
  if ((~COERCE__INT64(v14 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v17 < 9.22337204e18)
  {
    v12 = (uint64_t)v17;
    sub_23AB6E2CC(a1);
    v15(v11, v5);
    return v12;
  }
LABEL_10:
  __break(1u);
  return result;
}

_QWORD *sub_23AF3ED24(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23B1C5C54();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_23AF3EDC0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_23B1C5C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_23AF3EE30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = sub_23B1C5C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_23AF3EEA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_23B1C5C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_23AF3EF14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_23B1C5C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_23AF3EF84()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23AF3EF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_23B1C5C54();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_23AF3F01C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23AF3F028(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_23B1C5C54();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for FPFSPendingSetAnchor()
{
  uint64_t result;

  result = qword_2569E74E8;
  if (!qword_2569E74E8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23AF3F0DC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B1C5C54();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23AF3F15C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E7528);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AF3F710();
  sub_23B1C7538();
  v12 = 0;
  sub_23B1C5C54();
  sub_23AEB6C8C(&qword_2542E0260, MEMORY[0x24BDCEA70]);
  sub_23B1C72A4();
  if (!v2)
  {
    v11 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for FPFSPendingSetAnchor() + 20));
    v10[15] = 1;
    sub_23AD7D418();
    sub_23B1C72A4();
    v10[14] = 2;
    sub_23B1C728C();
    v10[13] = 3;
    sub_23B1C7280();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_23AF3F318@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v21 = a2;
  v3 = sub_23B1C5C54();
  v22 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v25 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E7538);
  v5 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for FPFSPendingSetAnchor();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AF3F710();
  v23 = v7;
  v11 = (uint64_t)v26;
  sub_23B1C7520();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v12 = v5;
  v26 = a1;
  v13 = (uint64_t)v10;
  v14 = v22;
  v31 = 0;
  sub_23AEB6C8C(&qword_2542E0270, MEMORY[0x24BDCEAA8]);
  v15 = v24;
  v16 = v23;
  sub_23B1C71C0();
  v17 = v3;
  v18 = v13;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v13, v25, v17);
  v30 = 1;
  sub_23AD7D3D4();
  sub_23B1C71C0();
  *(_QWORD *)(v13 + v8[5]) = v27;
  v29 = 2;
  *(_QWORD *)(v13 + v8[6]) = sub_23B1C71B4();
  v28 = 3;
  LOBYTE(v13) = sub_23B1C71A8();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v15);
  *(_BYTE *)(v18 + v8[7]) = v13 & 1;
  sub_23AF3F754(v18, v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return sub_23AF3F798(v18);
}

uint64_t sub_23AF3F5E8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23AF3F624 + 4 * byte_23B1DE760[*v0]))(0x53676E69646E6570, 0xEE00444955557465);
}

unint64_t sub_23AF3F624()
{
  return 0xD000000000000015;
}

uint64_t sub_23AF3F644()
{
  return 0x74657366666FLL;
}

unint64_t sub_23AF3F658()
{
  return 0xD000000000000012;
}

uint64_t sub_23AF3F674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23AF3F978(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23AF3F698()
{
  sub_23AF3F710();
  return sub_23B1C7544();
}

uint64_t sub_23AF3F6C0()
{
  sub_23AF3F710();
  return sub_23B1C7550();
}

uint64_t sub_23AF3F6E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23AF3F318(a1, a2);
}

uint64_t sub_23AF3F6FC(_QWORD *a1)
{
  return sub_23AF3F15C(a1);
}

unint64_t sub_23AF3F710()
{
  unint64_t result;

  result = qword_2569E7530;
  if (!qword_2569E7530)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE8C4, &type metadata for FPFSPendingSetAnchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7530);
  }
  return result;
}

uint64_t sub_23AF3F754(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FPFSPendingSetAnchor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AF3F798(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FPFSPendingSetAnchor();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for FPFSPendingSetAnchor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23AF3F820 + 4 * byte_23B1DE769[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23AF3F854 + 4 * byte_23B1DE764[v4]))();
}

uint64_t sub_23AF3F854(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AF3F85C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23AF3F864);
  return result;
}

uint64_t sub_23AF3F870(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23AF3F878);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23AF3F87C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AF3F884(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FPFSPendingSetAnchor.CodingKeys()
{
  return &type metadata for FPFSPendingSetAnchor.CodingKeys;
}

unint64_t sub_23AF3F8A4()
{
  unint64_t result;

  result = qword_2569E7540;
  if (!qword_2569E7540)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE89C, &type metadata for FPFSPendingSetAnchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7540);
  }
  return result;
}

unint64_t sub_23AF3F8EC()
{
  unint64_t result;

  result = qword_2569E7548;
  if (!qword_2569E7548)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE80C, &type metadata for FPFSPendingSetAnchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7548);
  }
  return result;
}

unint64_t sub_23AF3F934()
{
  unint64_t result;

  result = qword_2569E7550;
  if (!qword_2569E7550)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE834, &type metadata for FPFSPendingSetAnchor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7550);
  }
  return result;
}

uint64_t sub_23AF3F978(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x53676E69646E6570 && a2 == 0xEE00444955557465;
  if (v2 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023B20F140 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74657366666FLL && a2 == 0xE600000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023B20F160)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23AF3FB44@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = a2;
  *(_DWORD *)(a7 + 16) = a3;
  *(_DWORD *)(a7 + 20) = a4;
  *(_QWORD *)(a7 + 24) = a5;
  *(_QWORD *)(a7 + 32) = a6;
  return result;
}

uint64_t sub_23AF3FB54(uint64_t (*a1)(__int128 *))
{
  __int128 *v1;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];
  _QWORD v10[2];

  v7 = 0;
  v8 = 0;
  v5 = *v1;
  v6 = *((_QWORD *)v1 + 2);
  sub_23AF4060C((uint64_t)v1 + 24, (uint64_t)v9);
  v3 = sub_23AF4060C((uint64_t)v9, (uint64_t)v10);
  if (v10[1])
  {
    MEMORY[0x24BDAC7A8](v3);
    return sub_23B1C6464();
  }
  else
  {
    v7 = 0;
    return a1(&v5);
  }
}

uint64_t sub_23AF3FC34()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_23AF3FC3C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t sub_23AF3FC44(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*sub_23AF3FC4C())()
{
  return nullsub_1;
}

uint64_t sub_23AF3FC5C()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

uint64_t sub_23AF3FC64(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*sub_23AF3FC6C())()
{
  return nullsub_1;
}

uint64_t sub_23AF3FC7C()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20);
}

uint64_t sub_23AF3FC84(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 20) = result;
  return result;
}

uint64_t (*sub_23AF3FC8C())()
{
  return nullsub_1;
}

uint64_t sub_23AF3FC9C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23AF3FCC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*sub_23AF3FCFC())()
{
  return nullsub_1;
}

BOOL sub_23AF3FD0C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8) && *(_QWORD *)(v0 + 32) != 0;
}

uint64_t sub_23AF3FD30()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23AF3FD5C + 4 * byte_23B1DE914[*v0]))(0x4449656C6966, 0xE600000000000000);
}

uint64_t sub_23AF3FD5C()
{
  return 0x4449746E65726170;
}

uint64_t sub_23AF3FD74()
{
  return 0x4449636F64;
}

uint64_t sub_23AF3FD88()
{
  return 0x746E756F436E6567;
}

uint64_t sub_23AF3FDA0()
{
  return 1701667182;
}

uint64_t sub_23AF3FDB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23AF40654(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23AF3FDD4()
{
  sub_23AF405C8();
  return sub_23B1C7544();
}

uint64_t sub_23AF3FDFC()
{
  sub_23AF405C8();
  return sub_23B1C7550();
}

uint64_t sub_23AF3FE24(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  char v11[16];
  _BYTE v12[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E7558);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AF405C8();
  sub_23B1C7538();
  v11[0] = 0;
  sub_23B1C72E0();
  if (!v2)
  {
    v11[0] = 1;
    sub_23B1C72E0();
    v11[0] = 2;
    sub_23B1C72D4();
    v11[0] = 3;
    sub_23B1C72D4();
    sub_23AF4060C(v3 + 24, (uint64_t)v12);
    sub_23AF4060C((uint64_t)v12, (uint64_t)v11);
    v10[15] = 4;
    sub_23AB5EA4C();
    sub_23B1C7238();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

double sub_23AF3FFD8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_23AF40850(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_23AF4001C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_23AF402D4((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_23AF40064(_QWORD *a1)
{
  return sub_23AF3FE24(a1);
}

uint64_t sub_23AF4009C@<X0>(uint64_t a1@<X2>, _DWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v10[6];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = sub_23AF40DA4;
  *(_QWORD *)(v5 + 24) = v4;
  v10[4] = sub_23AA698DC;
  v10[5] = v5;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_23AA698B0;
  v10[3] = &block_descriptor_22;
  v6 = _Block_copy(v10);
  swift_retain();
  swift_release();
  sub_23B1C6458();
  v7 = fpfs_gethandle_at();
  swift_release();
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    *a2 = v7;
  return result;
}

uint64_t sub_23AF401F8(__int128 *a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  if (*((_QWORD *)a1 + 3))
  {
    v14 = *a1;
    sub_23B1C650C();
    sub_23AAA420C();
    v5 = sub_23B1C6CF8();
    v7 = v6;
    swift_bridgeObjectRelease();
    v3 = v14;
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a2[4];
  *(_OWORD *)a2 = v3;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v7;
  sub_23AF40DBC(v8, v9, v10, v11, v12);
  return 0;
}

uint64_t sub_23AF402D4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;

  if (*(_QWORD *)a1 != *(_QWORD *)a2
    || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  if (!v4)
    return !v5;
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  sub_23AF40DD0(a1);
  sub_23AF40DD0(a1);
  sub_23AF40DD0(a2);
  v8 = sub_23AAAE580(v6, v4);
  if (v9)
  {
    if (v8 == 12565487 && v9 == 0xA300000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_14:
      swift_bridgeObjectRetain();
      v12 = sub_23B1C64B8();
      v13 = sub_23AA8A1BC(v12, v6, v4);
      v15 = v14;
      v17 = v16;
      v19 = v18;
      sub_23AC03E50(a1);
      v6 = MEMORY[0x23B85ED8C](v13, v15, v17, v19);
      v4 = v20;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    v11 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      goto LABEL_14;
  }
  swift_bridgeObjectRetain();
LABEL_16:
  swift_bridgeObjectRetain();
  v21 = sub_23AAAE580(v7, v5);
  v23 = v22;
  sub_23AC03E50(a2);
  if (!v23)
    goto LABEL_22;
  if (v21 != 12565487 || v23 != 0xA300000000000000)
  {
    v24 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
      goto LABEL_21;
LABEL_22:
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
LABEL_21:
  swift_bridgeObjectRetain();
  v25 = sub_23B1C64B8();
  v26 = sub_23AA8A1BC(v25, v7, v5);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_23AC03E50(a2);
  v7 = MEMORY[0x23B85ED8C](v26, v28, v30, v32);
  v5 = v33;
  swift_bridgeObjectRelease();
LABEL_23:
  if (v6 == v7 && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
    sub_23AC03E50(a2);
    sub_23AC03E50(a1);
    sub_23AC03E50(a1);
    return 1;
  }
  v34 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23AC03E50(a2);
  sub_23AC03E50(a1);
  sub_23AC03E50(a1);
  return (v34 & 1) != 0;
}

unint64_t sub_23AF405C8()
{
  unint64_t result;

  result = qword_2569E7560;
  if (!qword_2569E7560)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DEA7C, &type metadata for VFSItemHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7560);
  }
  return result;
}

uint64_t sub_23AF4060C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_2542E72C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AF40654(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4449656C6966 && a2 == 0xE600000000000000;
  if (v2 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4449746E65726170 && a2 == 0xE800000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4449636F64 && a2 == 0xE500000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E756F436E6567 && a2 == 0xE800000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23AF40850@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E7580);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AF405C8();
  sub_23B1C7520();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v17) = 0;
  v9 = sub_23B1C71FC();
  LOBYTE(v17) = 1;
  v10 = sub_23B1C71FC();
  LOBYTE(v17) = 2;
  v19 = sub_23B1C71F0();
  LOBYTE(v17) = 3;
  v16 = sub_23B1C71F0();
  v20 = 4;
  sub_23AA7E3CC();
  sub_23B1C7160();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v11 = v17;
  v12 = v18;
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  v14 = v16;
  *(_DWORD *)(a2 + 16) = v19;
  *(_DWORD *)(a2 + 20) = v14;
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 32) = v12;
  return result;
}

uint64_t destroy for VFSItemHandle()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VFSItemHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VFSItemHandle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VFSItemHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VFSItemHandle(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VFSItemHandle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for VFSItemHandle()
{
  return &type metadata for VFSItemHandle;
}

uint64_t storeEnumTagSinglePayload for VFSItemHandle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23AF40C3C + 4 * byte_23B1DE91E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23AF40C70 + 4 * byte_23B1DE919[v4]))();
}

uint64_t sub_23AF40C70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AF40C78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23AF40C80);
  return result;
}

uint64_t sub_23AF40C8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23AF40C94);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23AF40C98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AF40CA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VFSItemHandle.CodingKeys()
{
  return &type metadata for VFSItemHandle.CodingKeys;
}

unint64_t sub_23AF40CC0()
{
  unint64_t result;

  result = qword_2569E7568;
  if (!qword_2569E7568)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DEA54, &type metadata for VFSItemHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7568);
  }
  return result;
}

unint64_t sub_23AF40D08()
{
  unint64_t result;

  result = qword_2569E7570;
  if (!qword_2569E7570)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE9C4, &type metadata for VFSItemHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7570);
  }
  return result;
}

unint64_t sub_23AF40D50()
{
  unint64_t result;

  result = qword_2569E7578;
  if (!qword_2569E7578)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE9EC, &type metadata for VFSItemHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E7578);
  }
  return result;
}

uint64_t sub_23AF40D94()
{
  return swift_deallocObject();
}

uint64_t sub_23AF40DA4(__int128 *a1)
{
  uint64_t v1;

  return sub_23AF401F8(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_23AF40DAC()
{
  return swift_deallocObject();
}

uint64_t sub_23AF40DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23AF40DD0(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23AF40DF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(uint64_t (**)(uint64_t))(v1 + 32);
  *(_QWORD *)(v2 + 24) = a1;
  return v3(v2);
}

double sub_23AF40E24@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v5;
  char v6;
  double result;

  if (*(_QWORD *)(a2 + 16) && (v5 = sub_23ACD5A68(a1), (v6 & 1) != 0))
  {
    sub_23AAA15AC(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_23AF40E74(uint64_t a1, uint64_t a2)
{
  return sub_23AF40E8C(a1, a2, (uint64_t (*)(void))sub_23ACD61DC);
}

uint64_t sub_23AF40E80(uint64_t a1, uint64_t a2)
{
  return sub_23AF40E8C(a1, a2, (uint64_t (*)(void))sub_23ACD61E8);
}

uint64_t sub_23AF40E8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  char v5;

  if (*(_QWORD *)(a2 + 16) && (v4 = a3(), (v5 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v4);
  else
    return 0;
}

uint64_t sub_23AF40ED0(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)(a2 + 16) && (sub_23AA88CF8(a1), (v2 & 1) != 0))
    return swift_retain();
  else
    return 0;
}

uint64_t sub_23AF40F10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  id v17;
  char *v18;
  char *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  char isEscapingClosureAtFileLocation;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t aBlock;
  unint64_t v49;
  id (*v50)(uint64_t, void *);
  void *v51;
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v39 = a2;
  v55 = *MEMORY[0x24BDAC8D0];
  v3 = sub_23B1C5DC8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v38 - v11;
  v13 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v13);
  v47 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v15 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v12, 1, 1, v3);
  aBlock = 0x2070756B6F6F6CLL;
  v49 = 0xE700000000000000;
  v45 = a1;
  v54 = a1;
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  v16 = v49;
  v43 = aBlock;
  v44 = v12;
  sub_23AA8EFC8((uint64_t)v12, (uint64_t)v10, (uint64_t *)&unk_2542E67B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    v17 = v15;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v10, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
  }
  v18 = v47;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v47, v6, v3);
  v41 = *(int *)(v13 + 20);
  *(_QWORD *)&v18[v41] = v15;
  v19 = &v18[*(int *)(v13 + 24)];
  *(_QWORD *)v19 = "SQLDB: Lookup item by fileID";
  *((_QWORD *)v19 + 1) = 28;
  v42 = v19;
  v19[16] = 2;
  v20 = v15;
  swift_bridgeObjectRetain();
  sub_23B1C6BE4();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5620);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v21 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v21 + 64) = sub_23AAA0D14();
  *(_QWORD *)(v21 + 32) = v43;
  *(_QWORD *)(v21 + 40) = v16;
  sub_23B1C5D98();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_bridgeObjectRelease();
  sub_23AA8A05C((uint64_t)v44, (uint64_t *)&unk_2542E67B8);
  v22 = v46;
  v23 = *(void **)(v46 + qword_2542EDF00);
  v24 = swift_allocObject();
  v25 = v45;
  *(_QWORD *)(v24 + 16) = v22;
  *(_QWORD *)(v24 + 24) = v25;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = sub_23AF438B8;
  *(_QWORD *)(v26 + 24) = v24;
  v52 = sub_23AA698D4;
  v53 = v26;
  aBlock = MEMORY[0x24BDAC760];
  v49 = 1107296256;
  v50 = sub_23AA9432C;
  v51 = &block_descriptor_23;
  v27 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v28 = objc_msgSend(v23, sel_fetchSwift_error_, v27, &aBlock);
  _Block_release(v27);
  v29 = (id)aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (!v28)
  {
    sub_23B1C587C();

    swift_willThrow();
    goto LABEL_15;
  }
  if ((objc_msgSend(v28, sel_next) & 1) == 0)
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v39, 1, 1, v34);
LABEL_14:

    goto LABEL_15;
  }
  v31 = sub_23AAAF608();
  v33 = v39;
  v32 = v40;
  sub_23AAAF634(v31, v28, 0, v39);
  if (!v32)
  {
    swift_bridgeObjectRelease();
    v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v33, 0, 1, v35);
    goto LABEL_14;
  }

  swift_bridgeObjectRelease();
LABEL_15:
  sub_23B1C6BD8();
  v36 = (uint64_t)v47;
  sub_23B1C5DA4();
  sub_23AA8A020(v36);
  return swift_release();
}

uint64_t sub_23AF41498(void *a1)
{
  void *v2;
  id v3;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v2 = (void *)sub_23B1C7514();
  v3 = objc_msgSend(a1, sel_bindObjectParameter_, v2);

  sub_23B1C63E0();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

void *sub_23AF41654()
{
  uint64_t v0;
  void *result;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void **__return_ptr, uint64_t, const char *, uint64_t, uint64_t, _QWORD *(*)@<X0>(uint64_t@<X8>), uint64_t, uint64_t);
  uint64_t v5;
  void *v6;
  char v7;

  if (*(_BYTE *)(v0 + 72) != 1)
    return *(void **)(v0 + 64);
  swift_beginAccess();
  result = (void *)sub_23AB55AD0(*(_QWORD *)(v0 + 16));
  if (!result)
  {
LABEL_7:
    *(_QWORD *)(v0 + 64) = result;
    *(_BYTE *)(v0 + 72) = 0;
    return result;
  }
  v3 = v2;

  result = (void *)swift_weakLoadStrong();
  if (result)
  {
    v4 = *(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t, uint64_t, _QWORD *(*)@<X0>(uint64_t@<X8>), uint64_t, uint64_t))(*(_QWORD *)result + 424);
    v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E74F0);
    v4(&v6, 1, "itemCount", 9, 2, sub_23AF438EC, v3, v5);
    swift_release();
    swift_release();
    if (v7)
      result = 0;
    else
      result = v6;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23AF41744@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  _QWORD *result;

  result = sub_23B07FC80();
  if (v1)
  {

    result = 0;
  }
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v1 != 0;
  return result;
}

uint64_t sub_23AF41798@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  char v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  char v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t Strong;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;

  v78 = a2;
  v81 = (char *)a3;
  v4 = (_QWORD *)sub_23B1C5E4C();
  v5 = *(v4 - 1);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = *(_QWORD *)a1;
  v76 = *(_QWORD *)(a1 + 8);
  v11 = *(unsigned int *)(a1 + 16);
  if (*(_QWORD *)(a1 + 24))
  {
    v87 = sub_23B1C650C();
    v88 = v12;
    v85 = 58;
    v86 = 0xE100000000000000;
    v83 = 47;
    v84 = 0xE100000000000000;
    sub_23AAA420C();
    v77 = sub_23B1C6CF8();
    v82 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    v77 = 0;
    v82 = 0;
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(v10, 1, 1, v14);
  switch(*(_DWORD *)(a1 + 40))
  {
    case 1:
    case 3:
      v16 = v80;
      if ((_DWORD)v11)
      {
        v17 = (uint64_t)v10;
        v18 = 0;
        v89 = v11;
LABEL_9:
        v90 = v18;
        v19 = v79;
        swift_beginAccess();
        v20 = *(_QWORD *)(v19 + 16);
        v21 = v82;
        if (!*(_QWORD *)(v20 + 16))
          goto LABEL_48;
        v22 = v78;
        swift_bridgeObjectRetain();
        v23 = sub_23AA88CF8(v22);
        if ((v24 & 1) == 0)
        {

          swift_bridgeObjectRelease();
LABEL_48:
          swift_beginAccess();
          sub_23ADE11A4(&v91, v16);
          swift_endAccess();
          swift_bridgeObjectRelease();
          return sub_23AA724E8(v17, (uint64_t)v81, (uint64_t *)&unk_2542E4750);
        }
        v25 = *(void **)(*(_QWORD *)(v20 + 56) + 8 * v23);
        swift_retain();

        swift_bridgeObjectRelease();
        swift_beginAccess();
        v26 = *(_QWORD *)(v19 + 24);
        if (*(_QWORD *)(v26 + 16))
        {
          v27 = v22;
          swift_bridgeObjectRetain();
          v28 = sub_23AA88CF8(v27);
          if ((v29 & 1) == 0)
          {

            swift_bridgeObjectRelease();
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)v4);
          }
          v4 = *(_QWORD **)(*(_QWORD *)(v26 + 56) + 8 * v28);
          swift_retain_n();

          swift_bridgeObjectRelease();
          if (objc_sync_enter(v4))
            goto LABEL_54;
          v78 = v25;
          v30 = v4[20];
          swift_retain();
          if (objc_sync_exit(v4))
            sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)v4);
          swift_release();
          v31 = *(_QWORD *)(v30 + 24);
          v32 = swift_release();
          if (v16 == v31)
          {
            (*(void (**)(uint64_t *__return_ptr, uint64_t))(**((_QWORD **)v78 + 2) + 96))(&v85, v32);
            v89 = v85;
            v90 = v86;
          }
          if (v76 != v31)
            goto LABEL_46;
          v33 = qword_2542E5360;
          swift_bridgeObjectRetain();
          if (v33 == -1)
          {
            if (!v21)
              goto LABEL_46;
            goto LABEL_20;
          }
        }
        else
        {
          __break(1u);
        }
        swift_once();
        if (!v21)
          goto LABEL_46;
LABEL_20:
        v34 = *((_QWORD *)&xmmword_2542EDE40 + 1);
        v76 = xmmword_2542EDE40;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        v35 = sub_23AAAE580(v77, v21);
        v37 = v36;
        swift_bridgeObjectRelease();
        if (v37)
        {
          if (v35 == 12565487 && v37 == 0xA300000000000000)
          {
            swift_bridgeObjectRelease();
LABEL_32:
            v45 = v82;
            swift_bridgeObjectRetain();
            v46 = v77;
            v47 = sub_23B1C64B8();
            v48 = sub_23AA8A1BC(v47, v46, v45);
            v50 = v49;
            v52 = v51;
            v54 = v53;
            swift_bridgeObjectRelease();
            v77 = MEMORY[0x23B85ED8C](v48, v50, v52, v54);
            v75 = v55;
            swift_bridgeObjectRelease();
            goto LABEL_34;
          }
          v44 = sub_23B1C7388();
          swift_bridgeObjectRelease();
          if ((v44 & 1) != 0)
            goto LABEL_32;
        }
        v75 = swift_bridgeObjectRetain();
LABEL_34:
        swift_bridgeObjectRetain();
        v56 = v76;
        v57 = sub_23AAAE580(v76, v34);
        v59 = v58;
        swift_bridgeObjectRelease();
        if (v59)
        {
          if (v57 == 12565487 && v59 == 0xA300000000000000)
          {
            swift_bridgeObjectRelease();
LABEL_39:
            swift_bridgeObjectRetain();
            v61 = sub_23B1C64B8();
            v62 = sub_23AA8A1BC(v61, v56, v34);
            v64 = v63;
            v66 = v65;
            v68 = v67;
            swift_bridgeObjectRelease();
            v56 = MEMORY[0x23B85ED8C](v62, v64, v66, v68);
            v70 = v69;
            swift_bridgeObjectRelease();
            goto LABEL_41;
          }
          v60 = sub_23B1C7388();
          swift_bridgeObjectRelease();
          if ((v60 & 1) != 0)
            goto LABEL_39;
        }
        swift_bridgeObjectRetain();
        v70 = v34;
LABEL_41:
        v16 = v80;
        if (v77 == v56 && v75 == v70)
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          v71 = swift_bridgeObjectRelease_n();
        }
        else
        {
          LODWORD(v80) = sub_23B1C7388();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v71 = swift_bridgeObjectRelease();
          if ((v80 & 1) == 0)
            goto LABEL_46;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(**((_QWORD **)v78 + 2) + 104))(&v85, v71);
        v89 = v85;
        v90 = v86;
LABEL_46:
        Strong = swift_weakLoadStrong();
        if (Strong)
        {
          v73 = MEMORY[0x24BDAC7A8](Strong);
          (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t (*)()))(*(_QWORD *)v73 + 424))(1, "fetchItem(with:inDomainID:)", 27, 2, sub_23AF438D0);
          swift_release();
          swift_release();
          swift_release();
          goto LABEL_48;
        }
        goto LABEL_53;
      }
      swift_bridgeObjectRelease();
      v15(v81, 1, 1, v14);
      v42 = (uint64_t)v10;
      return sub_23AA8A05C(v42, (uint64_t *)&unk_2542E4750);
    case 2:
    case 4:
      v16 = v80;
      if (!v80)
      {
        swift_bridgeObjectRelease();
        v15(v81, 1, 1, v14);
        return sub_23AA8A05C((uint64_t)v10, (uint64_t *)&unk_2542E4750);
      }
      v17 = (uint64_t)v10;
      v89 = v80;
      v18 = 1;
      goto LABEL_9;
    default:
      v80 = (uint64_t)v10;
      swift_bridgeObjectRelease();
      v38 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      v39 = sub_23B1C5E40();
      v40 = sub_23B1C6A94();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v41 = 0;
        _os_log_impl(&dword_23AA66000, v39, v40, "Item kind undefined.", v41, 2u);
        MEMORY[0x23B8614BC](v41, -1, -1);
      }

      (*(void (**)(char *, _QWORD *))(v5 + 8))(v7, v4);
      v15(v81, 1, 1, v14);
      v42 = v80;
      return sub_23AA8A05C(v42, (uint64_t *)&unk_2542E4750);
  }
}

uint64_t sub_23AF42038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;

  v6 = sub_23B1C5E4C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B07EA48(*(_QWORD *)a3, *(unsigned __int8 *)(a3 + 8), 0, (uint64_t)v12);
  if (!v3)
    return sub_23AB3C88C((uint64_t)v12, a1);
  v13 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v14 = v3;
  v15 = sub_23B1C5E40();
  v16 = sub_23B1C6AA0();
  if (os_log_type_enabled(v15, v16))
  {
    v24 = v6;
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v23 = v7;
    v19 = (_QWORD *)v18;
    *(_DWORD *)v17 = 138412290;
    swift_getErrorValue();
    v20 = sub_23B0D9CF0(v26);
    v25 = v20;
    v6 = v24;
    sub_23B1C6CBC();
    *v19 = v20;

    _os_log_impl(&dword_23AA66000, v15, v16, "Error fetching the item in the FSSnapshot: %@", v17, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    v21 = v19;
    v7 = v23;
    MEMORY[0x23B8614BC](v21, -1, -1);
    MEMORY[0x23B8614BC](v17, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

BOOL sub_23AF42298(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  double v16;

  swift_beginAccess();
  if ((sub_23ADF8180(a1, *(_QWORD *)(v5 + 32)) & 1) != 0)
    return 1;
  swift_beginAccess();
  v12 = sub_23ADF8180(a1, *(_QWORD *)(v5 + 40));
  if ((v12 & 1) != 0)
    return 0;
  v13 = *(_QWORD *)(v5 + 48);
  v14 = *(unsigned __int8 *)(v5 + 56);
  if (v14 == 1 && v13)
    return 1;
  v15 = a3 & 1 & v14;
  if ((a3 & 1) != 0)
    a2 = *(_QWORD *)(v5 + 48);
  if (v15 != 1)
  {
LABEL_13:
    if (a2 < 1)
      return 0;
    if ((a5 & 1) != 0)
      goto LABEL_15;
    goto LABEL_16;
  }
  if (v13)
  {
    v12 = (uint64_t)sub_23AF41654();
    a2 = v12;
    goto LABEL_13;
  }
  a2 = 0x7FFFFFFFLL;
  if ((a5 & 1) != 0)
  {
LABEL_15:
    v12 = (uint64_t)sub_23AF41654();
    a4 = v12;
  }
LABEL_16:
  if (a4 >= 1)
  {
    if (a4 >= (unint64_t)a2)
    {
      sub_23AF4315C(v12, 0.0, 1.0);
      return v16 < (double)a2 / (double)a4;
    }
    return 1;
  }
  return 0;
}

uint64_t sub_23AF423B8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD, uint64_t), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void *v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v45[2];
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, _QWORD, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v49 = a3;
  v50 = a5;
  v51 = a4;
  v6 = sub_23B1C5E4C();
  v57 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v52 = (char *)v45 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v47 = (uint64_t)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v45 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)v45 - v21;
  v53 = v12;
  v54 = v11;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))((char *)v45 - v21, 1, 1, v11);
  v56 = a2;
  v23 = v55;
  sub_23AF40F10(a2, (uint64_t)v20);
  if (v23)
  {
    v55 = (void *)v6;
    v24 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v25 = v23;
    v26 = sub_23B1C5E40();
    v27 = sub_23B1C6AA0();
    v28 = v9;
    if (os_log_type_enabled(v26, v27))
    {
      v29 = swift_slowAlloc();
      v30 = swift_slowAlloc();
      v46 = v9;
      v31 = (_QWORD *)v30;
      *(_DWORD *)v29 = 134349314;
      v59 = v56;
      sub_23B1C6CBC();
      *(_WORD *)(v29 + 12) = 2114;
      v45[1] = v29 + 14;
      swift_getErrorValue();
      v32 = sub_23B0D9CF0(v58);
      v59 = (uint64_t)v32;
      sub_23B1C6CBC();
      *v31 = v32;

      _os_log_impl(&dword_23AA66000, v26, v27, "Error retrieving item %{public}llu error: %{public}@", (uint8_t *)v29, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      v33 = v31;
      v28 = v46;
      MEMORY[0x23B8614BC](v33, -1, -1);
      MEMORY[0x23B8614BC](v29, -1, -1);

    }
    else
    {

    }
    v34 = v54;
    v6 = (uint64_t)v55;
    v35 = v53;
    (*(void (**)(char *, void *))(v57 + 8))(v28, v55);
  }
  else
  {
    sub_23AA8A05C((uint64_t)v22, (uint64_t *)&unk_2542E4750);
    sub_23AA724E8((uint64_t)v20, (uint64_t)v22, (uint64_t *)&unk_2542E4750);
    v35 = v53;
    v34 = v54;
  }
  sub_23AA8EFC8((uint64_t)v22, (uint64_t)v17, (uint64_t *)&unk_2542E4750);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v17, 1, v34) == 1)
  {
    sub_23AA8A05C((uint64_t)v17, (uint64_t *)&unk_2542E4750);
    v36 = (id)fpfs_current_or_default_log();
    v37 = v52;
    sub_23B1C5E58();
    v38 = sub_23B1C5E40();
    v39 = sub_23B1C6AA0();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v40 = 134349056;
      v59 = v56;
      sub_23B1C6CBC();
      _os_log_impl(&dword_23AA66000, v38, v39, "Enumeration returned a fileID for which no item can be found: %{public}llu", v40, 0xCu);
      MEMORY[0x23B8614BC](v40, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v57 + 8))(v37, v6);
  }
  else
  {
    v41 = v47;
    sub_23AA724E8((uint64_t)v17, v47, (uint64_t *)&unk_2542E6B00);
    v42 = v48;
    swift_beginAccess();
    v43 = sub_23ADF8180(v56, *(_QWORD *)(v42 + 32));
    v51(v41, v43 & 1, v49);
    sub_23AA8A05C(v41, (uint64_t *)&unk_2542E6B00);
  }
  return sub_23AA8A05C((uint64_t)v22, (uint64_t *)&unk_2542E4750);
}

uint64_t sub_23AF4289C(int a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t i;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, uint64_t, uint64_t, uint64_t (*)(), uint64_t *, uint64_t);
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  id v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;

  v5 = v4;
  v6 = v3;
  v49 = a3;
  v48 = a2;
  v8 = *(_QWORD *)(v3 + 48);
  v40 = *(unsigned __int8 *)(v3 + 56);
  v43 = v8;
  if (v40 == 1)
    v9 = v8 == 0;
  else
    v9 = (uint64_t)sub_23AF41654() < v8;
  swift_beginAccess();
  v10 = *(_QWORD *)(v6 + 16);
  v11 = *(_QWORD *)(v10 + 64);
  v41 = v10 + 64;
  v12 = 1 << *(_BYTE *)(v10 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v42 = (unint64_t)(v12 + 63) >> 6;
  v44 = a1 | v9;
  v45 = v10;
  result = swift_bridgeObjectRetain();
  v16 = 0;
  v39 = MEMORY[0x24BEE4AE0] + 8;
  if (!v14)
    goto LABEL_8;
LABEL_7:
  v17 = __clz(__rbit64(v14));
  v18 = (v14 - 1) & v14;
  for (i = v17 | (v16 << 6); ; i = __clz(__rbit64(v21)) + (v16 << 6))
  {
    v23 = 8 * i;
    v24 = *(void **)(*(_QWORD *)(v45 + 48) + v23);
    v25 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + v23);
    v46 = v24;
    v47 = v18;
    if ((v44 & 1) != 0)
    {
      result = swift_weakLoadStrong();
      if (!result)
        goto LABEL_50;
      v26 = MEMORY[0x24BDAC7A8](result);
      v34 = v25;
      v35 = v48;
      v36 = v49;
      v37 = v6;
      v38 = v24;
      v27 = *(void (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t (*)(), uint64_t *, uint64_t))(*(_QWORD *)v26 + 424);
      v28 = v24;
      swift_retain();
      v29 = v5;
      v27(1, "enumerateItems(forceExhaustive:_:)", 34, 2, sub_23AF4311C, &v33, v39);
    }
    else
    {
      v28 = v24;
      swift_retain();
      result = v43;
      if (v40)
      {
        if (!v43)
        {
          v30 = 0x3FFFFFFFLL;
LABEL_33:
          while (v30)
          {
            result = swift_weakLoadStrong();
            if (!result)
              goto LABEL_49;
            v31 = MEMORY[0x24BDAC7A8](result);
            v34 = v6;
            v35 = v25;
            v36 = v28;
            v37 = v48;
            v38 = v49;
            (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t (*)()))(*(_QWORD *)v31 + 424))(1, "enumerateItems(forceExhaustive:_:)", 34, 2, sub_23AF430E4);
            result = swift_release();
            if (v5)
              goto LABEL_43;
            if (!--v30)
              goto LABEL_37;
          }
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        result = (uint64_t)sub_23AF41654();
      }
      if (result < -1)
        goto LABEL_46;
      if ((unint64_t)(result + 1) >= 3)
      {
        v30 = (unint64_t)result >> 1;
        goto LABEL_33;
      }
LABEL_37:
      result = swift_weakLoadStrong();
      if (!result)
        goto LABEL_51;
      v32 = MEMORY[0x24BDAC7A8](result);
      v34 = v25;
      v35 = v6;
      v36 = v28;
      v37 = v48;
      v38 = v49;
      v29 = v5;
      (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t (*)()))(*(_QWORD *)v32 + 424))(1, "enumerateItems(forceExhaustive:_:)", 34, 2, sub_23AF43100);
    }
    v5 = v29;
    if (v29)
      break;
    swift_release();

    result = swift_release();
    v14 = v47;
    if (v47)
      goto LABEL_7;
LABEL_8:
    if (__OFADD__(v16++, 1))
      goto LABEL_47;
    if (v16 >= v42)
      return swift_release();
    v21 = *(_QWORD *)(v41 + 8 * v16);
    if (!v21)
    {
      v22 = v16 + 1;
      if (v16 + 1 >= v42)
        return swift_release();
      v21 = *(_QWORD *)(v41 + 8 * v22);
      if (!v21)
      {
        v22 = v16 + 2;
        if (v16 + 2 >= v42)
          return swift_release();
        v21 = *(_QWORD *)(v41 + 8 * v22);
        if (!v21)
        {
          v22 = v16 + 3;
          if (v16 + 3 >= v42)
            return swift_release();
          v21 = *(_QWORD *)(v41 + 8 * v22);
          if (!v21)
          {
            while (1)
            {
              v16 = v22 + 1;
              if (__OFADD__(v22, 1))
                break;
              if (v16 >= v42)
                return swift_release();
              v21 = *(_QWORD *)(v41 + 8 * v16);
              ++v22;
              if (v21)
                goto LABEL_18;
            }
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
            return result;
          }
        }
      }
      v16 = v22;
    }
LABEL_18:
    v18 = (v21 - 1) & v21;
  }
  swift_release();
LABEL_43:

  swift_release();
  return swift_release();
}

void sub_23AF42CF4(uint64_t a1, void (*a2)(char *, _QWORD, uint64_t), uint64_t a3, uint64_t a4, void *a5)
{
  id v10;

  swift_retain();
  swift_retain();
  v10 = a5;
  sub_23AEF74C0(a1, a2, a3, a4, (uint64_t)v10);

}

uint64_t sub_23AF42D74(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD, uint64_t), uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  result = swift_beginAccess();
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    v13 = sub_23AFEC440(v12);
    result = sub_23B191CC0(v11);
    if ((v13 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v16 = v15;
      v30 = a2;
      v31 = a3;
      v17 = v15 & 1;
      if (v13)
      {
        v28 = a4;
        v29 = a5;
        v18 = result;
        v19 = v14;
        sub_23AAB75B0(result, v14, v15 & 1);
        v26 = v18;
        v27 = v19;
        do
        {
          v20 = v19;
          v21 = v18;
          v22 = v17 & 1;
          v18 = sub_23B191D64(v18, v19, v17 & 1, v11);
          v19 = v23;
          v17 = v24 & 1;
          sub_23AB3D0AC(v21, v20, v22);
          --v13;
        }
        while (v13);
        sub_23AB3D0AC(v26, v27, v16 & 1);
        a5 = v29;
        a4 = v28;
      }
      else
      {
        v18 = result;
        v19 = v14;
      }
      v25 = sub_23B191E4C(v18, v19, v17, v11);
      sub_23AB3D0AC(v18, v19, v17);
      swift_bridgeObjectRelease();
      return sub_23AF423B8(v30, v25, v31, a4, a5);
    }
  }
  return result;
}

uint64_t sub_23AF42EF8(uint64_t a1, uint64_t a2, void *a3, void (*a4)(char *, _QWORD, id), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v10 = *(_QWORD *)(a2 + 48);
  if (*(_BYTE *)(a2 + 56) == 1)
  {
    if (v10)
      v10 = (uint64_t)sub_23AF41654();
    else
      v10 = 0x7FFFFFFFLL;
  }
  if (v10 >= 0)
    v11 = v10;
  else
    v11 = v10 + 1;
  v12 = v11 >> 1;
  swift_retain();
  v13 = a3;
  swift_retain();
  sub_23AEF70A8(v12, a1, (uint64_t *)a2, v13, a4, a5);
  return swift_release();
}

uint64_t sub_23AF42FB4@<X0>(int a1@<W0>, BOOL *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t result;

  sub_23AAA420C();
  sub_23B1C6CF8();
  v4 = sub_23B1C6458();
  swift_bridgeObjectRelease();
  v5 = faccessat(a1, (const char *)(v4 + 32), 0, 32);
  result = swift_release();
  *a2 = v5 == 0;
  return result;
}

uint64_t sub_23AF43088()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FSSnapshotChecker()
{
  return objc_opt_self();
}

uint64_t sub_23AF430E4()
{
  return sub_23AF43138((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AF42D74);
}

uint64_t sub_23AF43100()
{
  return sub_23AF43138((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AF42EF8);
}

uint64_t sub_23AF4311C()
{
  return sub_23AF43138((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AF42CF4);
}

uint64_t sub_23AF43138(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_23AF4315C(uint64_t result, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = MEMORY[0x23B8614D4](&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3)
    return sub_23AF4315C(v6, a2, a3);
  return result;
}

uint64_t sub_23AF43204(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = sub_23B1C5E4C();
  MEMORY[0x24BDAC7A8](v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  v6 = MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = (void *)swift_retain();
  if (objc_sync_enter(v8))
LABEL_6:
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)a2);
  v9 = a2[20];
  swift_retain();
  if (objc_sync_exit(a2))
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)a2);
  swift_release();
  v10 = *(unsigned int *)(v9 + 16);
  swift_release();
  LOBYTE(v12) = 2;
  v13 = v7;
  v14 = 0u;
  v15 = 0u;
  sub_23B0E327C((uint64_t)&v13, v10, 2129920, 0, (uint64_t)&v12, (uint64_t)sub_23AB6FFCC, 0);
  if (v12 == 2)
  {
    __break(1u);
    __break(1u);
    goto LABEL_6;
  }
  return v12 & 1;
}

uint64_t sub_23AF4387C@<X0>(int a1@<W0>, BOOL *a2@<X8>)
{
  return sub_23AF42FB4(a1, a2);
}

uint64_t sub_23AF43894()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AF438B8(void *a1)
{
  return sub_23AF41498(a1);
}

uint64_t sub_23AF438C0()
{
  return swift_deallocObject();
}

uint64_t sub_23AF438D0()
{
  uint64_t *v0;

  return sub_23AF42038(v0[2], v0[3], v0[4]);
}

_QWORD *sub_23AF438EC@<X0>(uint64_t a1@<X8>)
{
  return sub_23AF41744(a1);
}

void sub_23AF43904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unsigned int v13;
  id v14;
  id v15;
  int v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD *v28;
  id v29;
  uint8_t *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = v0;
  v35 = *MEMORY[0x24BDAC8D0];
  v2 = sub_23B1C5E4C();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v30 - v7;
  if ((*(_BYTE *)(v0 + 33) & 1) == 0)
  {
    v9 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v11 = *(void **)(v1 + 16);
    v10 = *(_QWORD *)(v1 + 24);
    v12 = (void *)sub_23B1C63BC();
    v32 = 0;
    v13 = objc_msgSend(v9, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v12, 1, 0, &v32);

    v14 = v32;
    if (v13)
    {
      v32 = v11;
      v33 = v10;
      swift_bridgeObjectRetain();
      sub_23B1C64F4();
      sub_23B1C6458();
      v15 = v14;
      swift_bridgeObjectRelease();
      fpfs_removeat();
      swift_release();
      v32 = v11;
      v33 = v10;
      swift_bridgeObjectRetain();
      sub_23B1C64F4();
      sub_23B1C6458();
      swift_bridgeObjectRelease();
      fpfs_removeat();
      swift_release();
      v32 = v11;
      v33 = v10;
      swift_bridgeObjectRetain();
      sub_23B1C64F4();
      sub_23B1C6458();
      swift_bridgeObjectRelease();
      v16 = sub_23B1C5E7C();
      swift_release();
      if ((v16 & 0x80000000) == 0)
      {
        fpfs_track_document();
        close(v16);
      }
      *(_BYTE *)(v1 + 33) = 1;
      if (*(_BYTE *)(v1 + 34) == 1)
      {
        v17 = (id)fpfs_current_or_default_log();
        sub_23B1C5E58();
        v18 = sub_23B1C5E40();
        v19 = sub_23B1C6AB8();
        if (os_log_type_enabled(v18, v19))
        {
          v20 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v20 = 0;
          _os_log_impl(&dword_23AA66000, v18, v19, "💀 tombstone slayer setup succeeded after previous failure", v20, 2u);
          MEMORY[0x23B8614BC](v20, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
        *(_BYTE *)(v1 + 34) = 0;
      }
    }
    else
    {
      v21 = v32;
      v22 = (void *)sub_23B1C587C();

      swift_willThrow();
      if ((*(_BYTE *)(v1 + 34) & 1) != 0)
      {

      }
      else
      {
        v23 = (id)fpfs_current_or_default_log();
        sub_23B1C5E58();
        v24 = v22;
        v25 = sub_23B1C5E40();
        v26 = sub_23B1C6AAC();
        if (os_log_type_enabled(v25, v26))
        {
          v27 = (uint8_t *)swift_slowAlloc();
          v28 = (_QWORD *)swift_slowAlloc();
          v31 = v2;
          *(_DWORD *)v27 = 138412290;
          v30 = v27 + 4;
          swift_getErrorValue();
          v29 = sub_23B0D9CF0(v34);
          v32 = v29;
          v2 = v31;
          sub_23B1C6CBC();
          *v28 = v29;

          _os_log_impl(&dword_23AA66000, v25, v26, "💀 cannot setup tombstone slayer: %@", v27, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
          swift_arrayDestroy();
          MEMORY[0x23B8614BC](v28, -1, -1);
          MEMORY[0x23B8614BC](v27, -1, -1);

        }
        else
        {

        }
        (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
        *(_BYTE *)(v1 + 34) = 1;
      }
    }
  }
}

uint64_t sub_23AF43D80()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  sub_23B1C6458();
  swift_bridgeObjectRelease();
  fpfs_removeat();
  swift_release();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  sub_23B1C6458();
  swift_bridgeObjectRelease();
  fpfs_removeat();
  swift_release();
  sub_23B1C6458();
  fpfs_removeat();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23AF43E68()
{
  sub_23AF43D80();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DocumentTrackingTombstoneSlayer()
{
  return objc_opt_self();
}

uint64_t sub_23AF43EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = sub_23B1C5E4C();
  v2 = MEMORY[0x24BDAC7A8](v1);
  MEMORY[0x24BDAC7A8](v2);
  sub_23AF43904();
  result = sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AF442EC);
  *(_BYTE *)(v0 + 32) = (*(_BYTE *)(v0 + 32) & 1) == 0;
  return result;
}

uint64_t sub_23AF441B4@<X0>(int *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;

  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  v2 = sub_23B1C6458();
  swift_bridgeObjectRelease();
  v3 = sub_23B1C6458();
  swift_bridgeObjectRelease();
  v4 = renameatx_np(-2, (const char *)(v2 + 32), -2, (const char *)(v3 + 32), 4u);
  swift_release();
  result = swift_release();
  *a1 = v4;
  return result;
}

uint64_t sub_23AF442EC@<X0>(int *a1@<X8>)
{
  return sub_23AF441B4(a1);
}

uint64_t sub_23AF44304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  char v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t *v23;

  result = type metadata accessor for SnapshotItem(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    v6 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v18 = &v17;
    v12 = v6;
    v13 = v6;
    v14 = MEMORY[0x24BEE0178] + 64;
    v15 = &unk_23B1DEC28;
    swift_getTupleTypeLayout();
    v19 = &v16;
    result = swift_getAssociatedTypeWitness();
    if (v7 <= 0x3F)
    {
      swift_getTupleTypeLayout3();
      v20 = &v11;
      swift_getTupleTypeLayout2();
      v21 = &v10;
      swift_getTupleTypeLayout3();
      v22 = &v9;
      swift_getTupleTypeLayout2();
      v23 = &v8;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_23AF44480(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v23;
  int v25;
  uint64_t v28;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v25 = *(_DWORD *)(v2 + 80);
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v5 & 0xF8 | v7 | 7u;
  v9 = ((((*(_QWORD *)(v6 + 64)
         + 7
         + ((v7 + 8 + ((*(_QWORD *)(v4 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 16;
  v10 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  if (*(_DWORD *)(v10 + 84))
    v13 = *(_QWORD *)(v10 + 64);
  else
    v13 = v12 + 1;
  v14 = ((((((v11 | 7)
           + 16
           + ((v3 + v8 + ((v3 + v25) & ~(unint64_t)v25)) & ~v8)
           + v9) & ~(v11 | 7))
         + ((((((((((v13
                   + 7
                   + ((v11
                     + 10
                     + ((((((v12 + ((v12 + v11 + ((v11 + 12) & ~v11)) & ~v11) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v11)) & 0xFFFFFFFFFFFFFFF8)
                 + 31) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 19) & 0xFFFFFFFFFFFFFFF8)
           + 25) & 0xFFFFFFFFFFFFFFF8)
         + 16
         + 311) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = v14 + 23;
  v16 = ((v14 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v17 = v14 + 16;
  v18 = v8 | v25 | v11;
  v19 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v19 <= ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v19 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v19 > v16)
    v16 = v19;
  if (v16 <= ((((v15 + ((v17 + v18) & ~v18)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16)
    v20 = ((((v15 + ((v17 + v18) & ~v18)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v20 = v16;
  if (v18 == 7 && ((v5 | v25 | v7 | *(_DWORD *)(v10 + 80)) & 0x100000) == 0 && (v20 | 1) <= 0x18)
  {
    v21 = *((unsigned __int8 *)a2 + v20);
    if (v21 >= 6 && (_DWORD)v20 != 0)
      v21 = *a2 + 6;
    __asm { BR              X10 }
  }
  v23 = *(_QWORD *)a2;
  *a1 = *(_QWORD *)a2;
  v28 = v23 + ((v18 + 16) & ~v18);
  swift_retain();
  return v28;
}

void sub_23AF45DBC(_DWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v6 | v8 | 7;
  v10 = ((((*(_QWORD *)(v7 + 64) + 7 + ((v8 + 8 + ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v11 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 64);
  v14 = (v12
       + 10
       + ((((((v13 + 12 + ((v13 + v12 + ((v12 + 12) & ~v12)) & ~v12)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v12;
  if (!*(_DWORD *)(v11 + 84))
    ++v13;
  v15 = ((((((v12 | 7) + 16 + ((v3 + v9 + ((v3 + v4) & ~v4)) & ~v9) + v10) & ~(v12 | 7))
         + ((((((((((v13 + 7 + v14) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 19) & 0xFFFFFFFFFFFFFFF8)
           + 25) & 0xFFFFFFFFFFFFFFF8)
         + 16
         + 311) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = ((v15 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v17 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  v18 = ((((v15 + 23 + ((v15 + 16 + (v9 | v4 | v12)) & ~(v9 | v4 | v12))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v17 <= ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v17 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v17 > v16)
    v16 = v17;
  if (v16 > v18)
    v18 = v16;
  v19 = *((unsigned __int8 *)a1 + v18);
  if (v19 >= 6 && (_DWORD)v18 != 0)
    v19 = *a1 + 6;
  __asm { BR              X10 }
}

uint64_t sub_23AF46040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 96));
  return swift_bridgeObjectRelease();
}

void sub_23AF4682C(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8;
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 | v9 | 7;
  v11 = ((((*(_QWORD *)(v8 + 64) + 7 + ((v9 + 8 + ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v12 = sub_23B1C5BDC();
  v13 = a2;
  v14 = *(_QWORD *)(v12 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = *(_QWORD *)(v14 + 64);
  if (*(_DWORD *)(v14 + 84))
    v17 = *(_QWORD *)(v14 + 64);
  else
    v17 = v16 + 1;
  v18 = ((((((v15 | 7) + 16 + ((v4 + v10 + ((v4 + v5) & ~v5)) & ~v10) + v11) & ~(v15 | 7))
         + ((((((((((v17
                   + 7
                   + ((v15
                     + 10
                     + ((((((v16 + ((v16 + v15 + ((v15 + 12) & ~v15)) & ~v15) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v15)) & 0xFFFFFFFFFFFFFFF8)
                 + 31) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 19) & 0xFFFFFFFFFFFFFFF8)
           + 25) & 0xFFFFFFFFFFFFFFF8)
         + 16
         + 311) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = v18 + 23;
  v20 = ((v18 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v21 = v18 + 16;
  v22 = v10 | v5 | v15;
  v23 = (v4 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v23 <= ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v23 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v23 > v20)
    v20 = v23;
  if (v20 <= ((((v19 + ((v21 + v22) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16)
    v24 = ((((v19 + ((v21 + v22) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v24 = v20;
  v25 = *((unsigned __int8 *)v13 + v24);
  if (v25 >= 6 && (_DWORD)v24 != 0)
    v25 = *v13 + 6;
  __asm { BR              X10 }
}

uint64_t sub_23AF46AAC(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,size_t __n,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  void (*v94)(unint64_t, unint64_t, _QWORD);
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  void (*v109)(unint64_t, unint64_t, uint64_t);
  uint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  unint64_t v119;
  unint64_t v120;
  void *v121;
  const void *v122;
  unsigned int (*v123)(const void *, uint64_t, uint64_t);
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  uint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  int v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  __int128 *v146;
  unint64_t v147;
  int v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  void *v161;
  id v162;
  void *v163;
  id v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  id v168;
  _OWORD *v169;
  __int128 *v170;
  __int128 v171;
  unint64_t v172;
  unint64_t v173;
  __int128 v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v195;

  *(_QWORD *)(v73 - 184) = v65;
  *(_QWORD *)(v73 - 192) = v64;
  v188 = v68;
  v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16);
  v75 = *(_QWORD *)(v73 - 104);
  v76 = *(_QWORD *)(v73 - 96);
  v77 = v63;
  v195 = v66;
  v189 = v61;
  v190 = v60;
  v79 = v62;
  v74(v76, v63, v75);
  v80 = v74;
  v81 = *(_QWORD *)(v73 - 160);
  v82 = (v81 + v76) & v71;
  v187 = v77;
  v83 = (v81 + v77) & v71;
  v80(v82, v83, v75);
  v84 = (v82 + v72 + v67) & v79;
  v85 = v83 + v72 + v67;
  v86 = a2;
  v87 = v85 & v79;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v69 + 16))(v84, v85 & v79, *(_QWORD *)(v73 - 136));
  v88 = *(_QWORD *)(v73 - 152);
  v89 = *(_QWORD *)(v73 - 144);
  v90 = (_QWORD *)((v88 + v84) & 0xFFFFFFFFFFFFFFF8);
  v91 = (_QWORD *)((v88 + v87) & 0xFFFFFFFFFFFFFFF8);
  *v90 = *v91;
  v92 = ((unint64_t)v90 + v89) & v189;
  v93 = ((unint64_t)v91 + v89) & v189;
  v94 = *(void (**)(unint64_t, unint64_t, _QWORD))(*(_QWORD *)(v73 - 176) + 16);
  swift_bridgeObjectRetain();
  v94(v92, v93, *(_QWORD *)(v73 - 120));
  v95 = *(_QWORD *)(v73 - 128);
  v96 = (_QWORD *)((v95 + v92) & 0xFFFFFFFFFFFFF8);
  v97 = (_QWORD *)((v95 + v93) & 0xFFFFFFFFFFFFF8);
  *v96 = *v97;
  v98 = (_QWORD *)(((unint64_t)v96 + 15) & 0xFFFFFFFFFFFFFFF8);
  v99 = (_QWORD *)(((unint64_t)v97 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v98 = *v99;
  v98[1] = v99[1];
  v100 = *(_QWORD *)(v73 - 112);
  v101 = (_QWORD *)(v100 + v84);
  v102 = (_QWORD *)(v100 + v87);
  *v101 = *v102;
  v101[1] = v102[1];
  v103 = ((unint64_t)v101 + a8) & v190;
  v104 = ((unint64_t)v102 + a8) & v190;
  *(_BYTE *)v103 = *(_BYTE *)v104;
  v105 = v103 | 4;
  v106 = *(_DWORD *)(v104 | 4);
  *(_BYTE *)(v105 + 4) = *(_BYTE *)((v104 | 4) + 4);
  *(_DWORD *)v105 = v106;
  *(_WORD *)(v103 + 10) = *(_WORD *)(v104 + 0xA);
  v107 = (a7 + v103) & v195;
  v108 = (a7 + v104) & v195;
  v109 = *(void (**)(unint64_t, unint64_t, uint64_t))(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v110 = *(_QWORD *)(v73 - 168);
  v109(v107, v108, v110);
  v111 = (a6 + v108) & v195;
  v109((a6 + v107) & v195, v111, v110);
  v112 = (_BYTE *)(((a6 + v107) & v195) + a5);
  *v112 = *(_BYTE *)(v111 + a5);
  v112[1] = *(_BYTE *)(v111 + a5 + 1);
  v112[2] = *(_BYTE *)(v111 + a5 + 2);
  v112[3] = *(_BYTE *)(v111 + a5 + 3);
  v112[4] = *(_BYTE *)(v111 + a5 + 4);
  v113 = (unint64_t)(v112 + 12) & 0xFFFFFFFFFFFFFFF8;
  v114 = (v111 + a5 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v113 = *(_QWORD *)v114;
  *(_QWORD *)(v113 + 8) = *(_QWORD *)(v114 + 8);
  *(_BYTE *)(v113 + 16) = *(_BYTE *)(v114 + 16);
  *(_BYTE *)(v113 + 17) = *(_BYTE *)(v114 + 17);
  *(_BYTE *)(v113 + 18) = *(_BYTE *)(v114 + 18);
  *(_BYTE *)(v113 + 19) = *(_BYTE *)(v114 + 19);
  v115 = (v113 + 27) & 0xFFFFFFFFFFFFFFF8;
  v116 = (v114 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v115 = *(_QWORD *)v116;
  *(_BYTE *)(v115 + 8) = *(_BYTE *)(v116 + 8);
  *(_BYTE *)(v115 + 9) = *(_BYTE *)(v116 + 9);
  *(_BYTE *)(v115 + 10) = *(_BYTE *)(v116 + 10);
  *(_BYTE *)(v115 + 11) = *(_BYTE *)(v116 + 11);
  *(_BYTE *)(v115 + 12) = *(_BYTE *)(v116 + 12);
  v117 = (_QWORD *)((v113 + 47) & 0xFFFFFFFFFFFFF8);
  v118 = (_QWORD *)((v114 + 47) & 0xFFFFFFFFFFFFF8);
  *v117 = *v118;
  v119 = ((unint64_t)v117 + 15) & 0xFFFFFFFFFFFFFFF8;
  v120 = ((unint64_t)v118 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v119 = *(_QWORD *)v120;
  *(_BYTE *)(v119 + 8) = *(_BYTE *)(v120 + 8);
  *(_BYTE *)(v119 + 9) = *(_BYTE *)(v120 + 9);
  v121 = (void *)((a4 + v119) & v195);
  v122 = (const void *)((a4 + v120) & v195);
  v123 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v86 + 48);
  swift_bridgeObjectRetain();
  if (v123(v122, 1, v110))
  {
    memcpy(v121, v122, a3);
  }
  else
  {
    v109((unint64_t)v121, (unint64_t)v122, v110);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v121, 0, 1, v110);
  }
  v124 = (_QWORD *)(((unint64_t)v121 + a1) & 0xFFFFFFFFFFFFFFF8);
  v125 = (_QWORD *)(((unint64_t)v122 + a1) & 0xFFFFFFFFFFFFFFF8);
  *v124 = *v125;
  v126 = ((unint64_t)v124 + 15) & 0xFFFFFFFFFFFFFFF8;
  v127 = ((unint64_t)v125 + 15) & 0xFFFFFFFFFFFFFFF8;
  v128 = *(_QWORD *)v127;
  *(_BYTE *)(v126 + 8) = *(_BYTE *)(v127 + 8);
  *(_QWORD *)v126 = v128;
  v129 = (_QWORD *)(((unint64_t)v124 + 31) & 0xFFFFFFFFFFFFF8);
  v130 = (_QWORD *)(((unint64_t)v125 + 31) & 0xFFFFFFFFFFFFF8);
  *v129 = *v130;
  v131 = ((unint64_t)v129 + 15) & 0xFFFFFFFFFFFFFFF8;
  v132 = (uint64_t *)(((unint64_t)v130 + 15) & 0xFFFFFFFFFFFFFFF8);
  v133 = v132[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v133 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v131 = *(_OWORD *)v132;
  }
  else
  {
    v134 = *v132;
    sub_23AAAE668(*v132, v133);
    *(_QWORD *)v131 = v134;
    *(_QWORD *)(v131 + 8) = v133;
  }
  v135 = v188;
  v136 = (v131 + 19) & 0xFFFFFFFFFFFFFFF8;
  v137 = ((unint64_t)v132 + 19) & 0xFFFFFFFFFFFFFFF8;
  v138 = *(_QWORD *)v137;
  *(_BYTE *)(v136 + 8) = *(_BYTE *)(v137 + 8);
  *(_QWORD *)v136 = v138;
  *(_BYTE *)(v136 + 9) = *(_BYTE *)(v137 + 9);
  v139 = (v136 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v140 = (v137 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v141 = *(_DWORD *)v140;
  *(_BYTE *)(v139 + 4) = *(_BYTE *)(v140 + 4);
  *(_DWORD *)v139 = v141;
  v142 = (_QWORD *)((v136 + 25) & 0xFFFFFFFFFFFFFFF8);
  v143 = (_QWORD *)((v137 + 25) & 0xFFFFFFFFFFFFFFF8);
  *v142 = *v143;
  v142[1] = v143[1];
  v144 = *(_QWORD *)(v73 - 192);
  v145 = v144 + v103;
  v146 = (__int128 *)(v144 + v104);
  v147 = *(_QWORD *)(v144 + v104 + 16);
  if (v147 >= 0xFFFFFFFF)
    LODWORD(v147) = -1;
  v148 = v147 - 1;
  swift_bridgeObjectRetain();
  if (v148 < 0)
  {
    *(_QWORD *)v145 = *(_QWORD *)v146;
    *(_BYTE *)(v145 + 8) = *((_BYTE *)v146 + 8);
    *(_BYTE *)(v145 + 9) = *((_BYTE *)v146 + 9);
    v161 = (void *)*((_QWORD *)v146 + 2);
    v162 = v161;
    *(_QWORD *)(v145 + 16) = v161;
    v163 = (void *)*((_QWORD *)v146 + 3);
    v164 = v163;
    *(_QWORD *)(v145 + 24) = v163;
    *(_BYTE *)(v145 + 32) = *((_BYTE *)v146 + 32);
    *(_BYTE *)(v145 + 33) = *((_BYTE *)v146 + 33);
    *(_BYTE *)(v145 + 34) = *((_BYTE *)v146 + 34);
    *(_QWORD *)(v145 + 40) = *((_QWORD *)v146 + 5);
    *(_QWORD *)(v145 + 48) = *((_QWORD *)v146 + 6);
    *(_QWORD *)(v145 + 56) = *((_QWORD *)v146 + 7);
    v165 = *((_QWORD *)v146 + 8);
    *(_QWORD *)(v73 - 112) = v165;
    *(_QWORD *)(v145 + 64) = v165;
    *(_BYTE *)(v145 + 72) = *((_BYTE *)v146 + 72);
    *(_QWORD *)(v145 + 80) = *((_QWORD *)v146 + 10);
    *(_QWORD *)(v145 + 88) = *((_QWORD *)v146 + 11);
    v166 = *((_QWORD *)v146 + 12);
    *(_QWORD *)(v73 - 104) = v166;
    *(_QWORD *)(v145 + 96) = v166;
    *(_BYTE *)(v145 + 104) = *((_BYTE *)v146 + 104);
    *(_BYTE *)(v145 + 105) = *((_BYTE *)v146 + 105);
    *(_QWORD *)(v145 + 112) = *((_QWORD *)v146 + 14);
    *(_QWORD *)(v145 + 120) = *((_QWORD *)v146 + 15);
    *(_QWORD *)(v145 + 128) = *((_QWORD *)v146 + 16);
    *(_QWORD *)(v145 + 136) = *((_QWORD *)v146 + 17);
    *(_QWORD *)(v145 + 144) = *((_QWORD *)v146 + 18);
    *(_QWORD *)(v145 + 152) = *((_QWORD *)v146 + 19);
    *(_QWORD *)(v145 + 160) = *((_QWORD *)v146 + 20);
    *(_QWORD *)(v145 + 168) = *((_QWORD *)v146 + 21);
    *(_BYTE *)(v145 + 176) = *((_BYTE *)v146 + 176);
    *(_QWORD *)(v145 + 184) = *((_QWORD *)v146 + 23);
    v167 = *((_QWORD *)v146 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v168 = *(id *)(v73 - 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v167)
    {
      *(_QWORD *)(v145 + 192) = v167;
      *(_QWORD *)(v145 + 200) = *((_QWORD *)v146 + 25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v145 + 192) = v146[12];
    }
    v135 = v188;
    *(_QWORD *)(v145 + 208) = *((_QWORD *)v146 + 26);
    *(_QWORD *)(v145 + 216) = *((_QWORD *)v146 + 27);
    *(_QWORD *)(v145 + 224) = *((_QWORD *)v146 + 28);
    *(_QWORD *)(v145 + 232) = *((_QWORD *)v146 + 29);
    *(_QWORD *)(v145 + 240) = *((_QWORD *)v146 + 30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v149 = *v146;
    v150 = v146[1];
    v151 = v146[3];
    *(_OWORD *)(v145 + 32) = v146[2];
    *(_OWORD *)(v145 + 48) = v151;
    *(_OWORD *)v145 = v149;
    *(_OWORD *)(v145 + 16) = v150;
    v152 = v146[4];
    v153 = v146[5];
    v154 = v146[7];
    *(_OWORD *)(v145 + 96) = v146[6];
    *(_OWORD *)(v145 + 112) = v154;
    *(_OWORD *)(v145 + 64) = v152;
    *(_OWORD *)(v145 + 80) = v153;
    v155 = v146[8];
    v156 = v146[9];
    v157 = v146[11];
    *(_OWORD *)(v145 + 160) = v146[10];
    *(_OWORD *)(v145 + 176) = v157;
    *(_OWORD *)(v145 + 128) = v155;
    *(_OWORD *)(v145 + 144) = v156;
    v158 = v146[12];
    v159 = v146[13];
    v160 = v146[14];
    *(_QWORD *)(v145 + 240) = *((_QWORD *)v146 + 30);
    *(_OWORD *)(v145 + 208) = v159;
    *(_OWORD *)(v145 + 224) = v160;
    *(_OWORD *)(v145 + 192) = v158;
  }
  v169 = (_OWORD *)((v145 + 255) & 0xFFFFFFFFFFFFFFF8);
  v170 = (__int128 *)(((unint64_t)v146 + 255) & 0xFFFFFFFFFFFFFFF8);
  v171 = *v170;
  *(_OWORD *)((char *)v169 + 9) = *(__int128 *)((char *)v170 + 9);
  *v169 = v171;
  v172 = (v145 + 287) & 0xFFFFFFFFFFFFFFF8;
  v173 = ((unint64_t)v146 + 287) & 0xFFFFFFFFFFFFFFF8;
  v174 = *(_OWORD *)v173;
  *(_BYTE *)(v172 + 16) = *(_BYTE *)(v173 + 16);
  *(_OWORD *)v172 = v174;
  v175 = (_QWORD *)((v145 + 311) & 0xFFFFFFFFFFFFF8);
  v176 = ((unint64_t)v146 + 311) & 0xFFFFFFFFFFFFF8;
  v177 = *(_QWORD *)v176;
  v176 += 15;
  *v175 = v177;
  v178 = (_QWORD *)(((unint64_t)v175 + 15) & 0xFFFFFFFFFFFFFFF8);
  v179 = *(_QWORD *)(v176 & 0xFFFFFFFFFFFFFFF8);
  v180 = *(_QWORD *)((v176 & 0xFFFFFFFFFFFFFFF8) + 8);
  sub_23AA7F2D4(v179, v180);
  *v178 = v179;
  v178[1] = v180;
  v181 = *(_QWORD *)(v73 - 96);
  v182 = *(_QWORD *)(v73 - 184);
  v183 = (_QWORD *)((v181 + v182 + 7) & 0xFFFFFFFFFFFFFFF8);
  v184 = (_QWORD *)((v187 + v182 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v183 = *v184;
  v183[1] = v184[1];
  *(_BYTE *)(v181 + v135) = 0;
  swift_bridgeObjectRetain();
  return v181;
}

_DWORD *sub_23AF480E0(_DWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;

  v2 = result;
  if (result != a2)
  {
    v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v4 = *(_QWORD *)(v3 + 64);
    v5 = *(unsigned __int8 *)(v3 + 80);
    v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v7 = *(_DWORD *)(v6 + 80) & 0xF8;
    v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = v7 | v9 | 7;
    v11 = ((((*(_QWORD *)(v8 + 64) + 7 + ((v9 + 8 + ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    v12 = *(_QWORD *)(sub_23B1C5BDC() - 8);
    v13 = *(unsigned __int8 *)(v12 + 80);
    v14 = *(_QWORD *)(v12 + 64);
    if (*(_DWORD *)(v12 + 84))
      v15 = *(_QWORD *)(v12 + 64);
    else
      v15 = v14 + 1;
    v16 = ((((((v13 | 7) + 16 + ((v4 + v10 + ((v4 + v5) & ~v5)) & ~v10) + v11) & ~(v13 | 7))
           + ((((((((((v15
                     + 7
                     + ((v13
                       + 10
                       + ((((((v14 + 12 + ((v14 + v13 + ((v13 + 12) & ~v13)) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                         + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v13)) & 0xFFFFFFFFFFFFFFF8)
                   + 31) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 19) & 0xFFFFFFFFFFFFFFF8)
             + 25) & 0xFFFFFFFFFFFFFFF8)
           + 16
           + 311) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8;
    v17 = ((v16 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    v18 = (v4 & 0xFFFFFFFFFFFFFFF8) + 24;
    if (v18 <= ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
      v18 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    if (v18 > v17)
      v17 = v18;
    if (v17 <= ((((v16 + 23 + ((v16 + 16 + (v10 | v5 | v13)) & ~(v10 | v5 | v13))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
              + 16)
      v19 = ((((v16 + 23 + ((v16 + 16 + (v10 | v5 | v13)) & ~(v10 | v5 | v13))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 16;
    else
      v19 = v17;
    v20 = *((unsigned __int8 *)v2 + v19);
    if (v20 >= 6 && (_DWORD)v19 != 0)
      v20 = *v2 + 6;
    __asm { BR              X10 }
  }
  return result;
}

void sub_23AF4A1A8(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8;
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 | v9 | 7;
  v11 = ((((*(_QWORD *)(v8 + 64) + 7 + ((v9 + 8 + ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v12 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 64);
  if (*(_DWORD *)(v12 + 84))
    v15 = *(_QWORD *)(v12 + 64);
  else
    v15 = v14 + 1;
  v16 = ((((((v13 | 7) + 16 + ((v4 + v10 + ((v4 + v5) & ~v5)) & ~v10) + v11) & ~(v13 | 7))
         + ((((((((((v15
                   + 7
                   + ((v13
                     + 10
                     + ((((((v14 + ((v14 + v13 + ((v13 + 12) & ~v13)) & ~v13) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v13)) & 0xFFFFFFFFFFFFFFF8)
                 + 31) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 19) & 0xFFFFFFFFFFFFFFF8)
           + 25) & 0xFFFFFFFFFFFFFFF8)
         + 16
         + 311) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = ((v16 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v18 = (v4 & 0xFFFFFFFFFFFFFFF8) + 24;
  v19 = ((((v16 + 23 + ((v16 + 16 + (v10 | v5 | v13)) & ~(v10 | v5 | v13))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v18 <= ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v18 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v18 > v17)
    v17 = v18;
  if (v17 > v19)
    v19 = v17;
  v20 = *((unsigned __int8 *)a2 + v19);
  if (v20 >= 6 && (_DWORD)v19 != 0)
    v20 = *a2 + 6;
  __asm { BR              X10 }
}

uint64_t sub_23AF4A424(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, size_t __n, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _OWORD *v92;
  _OWORD *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  void (*v98)(unint64_t, unint64_t, uint64_t);
  unint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v109;
  void *v110;
  const void *v111;
  _QWORD *v112;
  _QWORD *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  _OWORD *v119;
  _OWORD *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  _OWORD *v139;
  __int128 *v140;
  __int128 v141;
  unint64_t v142;
  unint64_t v143;
  __int128 v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t result;
  size_t v148;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v159;
  uint64_t v161;
  uint64_t v162;

  *(_QWORD *)(v69 - 168) = v70;
  v148 = v59;
  v161 = v58;
  v162 = v57;
  v153 = v54;
  v71 = v67;
  v72 = *(_QWORD *)(v69 - 96);
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32);
  v150 = v61;
  v74 = *(_QWORD *)(v69 - 104);
  v159 = v60;
  v154 = v55;
  v151 = v56;
  v73(v72, v64, v74);
  v76 = v73;
  v77 = *(_QWORD *)(v69 - 160);
  v78 = (v77 + v72) & v71;
  v152 = v64;
  v79 = (v77 + v64) & v71;
  v76(v78, v79, v74);
  v80 = (v78 + v68 + v62) & v150;
  v81 = (v79 + v68 + v62) & v150;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v65 + 32))(v80, v81, *(_QWORD *)(v69 - 136));
  v82 = *(_QWORD *)(v69 - 152);
  v83 = (_QWORD *)((v82 + v80) & 0xFFFFFFFFFFFFFFF8);
  v84 = (_QWORD *)((v82 + v81) & 0xFFFFFFFFFFFFFFF8);
  *v83 = *v84;
  v85 = *(_QWORD *)(v69 - 144);
  v86 = ((unint64_t)v83 + v85) & v151;
  v87 = ((unint64_t)v84 + v85) & v151;
  (*(void (**)(unint64_t, unint64_t, _QWORD))(v63 + 32))(v86, v87, *(_QWORD *)(v69 - 120));
  v88 = *(_QWORD *)(v69 - 128);
  v89 = v88 + v86;
  v90 = (_QWORD *)((v88 + v87) & 0xFFFFFFFFFFFFF8);
  v89 &= 0xFFFFFFFFFFFFF8uLL;
  *(_QWORD *)v89 = *v90;
  *(_OWORD *)((v89 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v90 + 15) & 0xFFFFFFFFFFFFF8);
  v91 = *(_QWORD *)(v69 - 112);
  v92 = (_OWORD *)(v91 + v80);
  v93 = (_OWORD *)(v91 + v81);
  *v92 = *v93;
  v94 = ((unint64_t)v92 + a7) & v154;
  v95 = ((unint64_t)v93 + a7) & v154;
  *(_BYTE *)v94 = *(_BYTE *)v95;
  v96 = v94 | 4;
  v97 = *(_DWORD *)(v95 | 4);
  *(_BYTE *)(v96 + 4) = *(_BYTE *)((v95 | 4) + 4);
  *(_DWORD *)v96 = v97;
  *(_WORD *)(v94 + 10) = *(_WORD *)(v95 + 0xA);
  v98 = *(void (**)(unint64_t, unint64_t, uint64_t))(a4 + 32);
  v98((a6 + v94) & v159, (a6 + v95) & v159, a1);
  v99 = (a5 + ((a6 + v94) & v159)) & v159;
  v100 = (a5 + ((a6 + v95) & v159)) & v159;
  v98(v99, v100, a1);
  v101 = (_BYTE *)(v99 + a8);
  *v101 = *(_BYTE *)(v100 + a8);
  v101[1] = *(_BYTE *)(v100 + a8 + 1);
  v101[2] = *(_BYTE *)(v100 + a8 + 2);
  v101[3] = *(_BYTE *)(v100 + a8 + 3);
  v101[4] = *(_BYTE *)(v100 + a8 + 4);
  v102 = (v99 + a8 + 12) & 0xFFFFFFFFFFFFFFF8;
  v103 = (v100 + a8 + 12) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v102 = *(_OWORD *)v103;
  *(_BYTE *)(v102 + 16) = *(_BYTE *)(v103 + 16);
  *(_BYTE *)(v102 + 17) = *(_BYTE *)(v103 + 17);
  *(_BYTE *)(v102 + 18) = *(_BYTE *)(v103 + 18);
  *(_BYTE *)(v102 + 19) = *(_BYTE *)(v103 + 19);
  v104 = (v102 + 27) & 0xFFFFFFFFFFFFFFF8;
  v105 = (v103 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v104 = *(_QWORD *)v105;
  *(_BYTE *)(v104 + 8) = *(_BYTE *)(v105 + 8);
  *(_BYTE *)(v104 + 9) = *(_BYTE *)(v105 + 9);
  *(_BYTE *)(v104 + 10) = *(_BYTE *)(v105 + 10);
  *(_BYTE *)(v104 + 11) = *(_BYTE *)(v105 + 11);
  *(_BYTE *)(v104 + 12) = *(_BYTE *)(v105 + 12);
  v106 = (_QWORD *)((v102 + 47) & 0xFFFFFFFFFFFFF8);
  v107 = (_QWORD *)((v103 + 47) & 0xFFFFFFFFFFFFF8);
  *v106 = *v107;
  v108 = ((unint64_t)v106 + 15) & 0xFFFFFFFFFFFFFFF8;
  v109 = ((unint64_t)v107 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v108 = *(_QWORD *)v109;
  *(_BYTE *)(v108 + 8) = *(_BYTE *)(v109 + 8);
  *(_BYTE *)(v108 + 9) = *(_BYTE *)(v109 + 9);
  v110 = (void *)((a2 + v108) & v159);
  v111 = (const void *)((a2 + v109) & v159);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(a4 + 48))(v111, 1, a1))
  {
    memcpy(v110, v111, v148);
  }
  else
  {
    v98((unint64_t)v110, (unint64_t)v111, a1);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(a4 + 56))(v110, 0, 1, a1);
  }
  v112 = (_QWORD *)(((unint64_t)v110 + v161) & 0xFFFFFFFFFFFFFFF8);
  v113 = (_QWORD *)(((unint64_t)v111 + v161) & 0xFFFFFFFFFFFFFFF8);
  *v112 = *v113;
  v114 = ((unint64_t)v112 + 15) & 0xFFFFFFFFFFFFFFF8;
  v115 = ((unint64_t)v113 + 15) & 0xFFFFFFFFFFFFFFF8;
  v116 = *(_QWORD *)v115;
  *(_BYTE *)(v114 + 8) = *(_BYTE *)(v115 + 8);
  *(_QWORD *)v114 = v116;
  v117 = (_QWORD *)(((unint64_t)v112 + 31) & 0xFFFFFFFFFFFFF8);
  v118 = (_QWORD *)(((unint64_t)v113 + 31) & 0xFFFFFFFFFFFFF8);
  *v117 = *v118;
  v119 = (_OWORD *)(((unint64_t)v117 + 15) & 0xFFFFFFFFFFFFFFF8);
  v120 = (_OWORD *)(((unint64_t)v118 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v119 = *v120;
  v121 = ((unint64_t)v119 + 19) & 0xFFFFFFFFFFFFFFF8;
  v122 = ((unint64_t)v120 + 19) & 0xFFFFFFFFFFFFFFF8;
  v123 = *(_QWORD *)v122;
  *(_BYTE *)(v121 + 8) = *(_BYTE *)(v122 + 8);
  *(_QWORD *)v121 = v123;
  *(_BYTE *)(v121 + 9) = *(_BYTE *)(v122 + 9);
  v124 = (v121 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  v125 = (v122 + 13) & 0xFFFFFFFFFFFFFFFCLL;
  LODWORD(v116) = *(_DWORD *)v125;
  *(_BYTE *)(v124 + 4) = *(_BYTE *)(v125 + 4);
  *(_DWORD *)v124 = v116;
  *(_OWORD *)((v121 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v122 + 25) & 0xFFFFFFFFFFFFF8);
  v126 = v162 + v94;
  v127 = *(_OWORD *)(v162 + v95 + 112);
  v129 = *(_OWORD *)(v162 + v95 + 64);
  v128 = *(_OWORD *)(v162 + v95 + 80);
  *(_OWORD *)(v126 + 96) = *(_OWORD *)(v162 + v95 + 96);
  *(_OWORD *)(v126 + 112) = v127;
  *(_OWORD *)(v126 + 64) = v129;
  *(_OWORD *)(v126 + 80) = v128;
  v130 = *(_OWORD *)(v162 + v95 + 176);
  v132 = *(_OWORD *)(v162 + v95 + 128);
  v131 = *(_OWORD *)(v162 + v95 + 144);
  *(_OWORD *)(v126 + 160) = *(_OWORD *)(v162 + v95 + 160);
  *(_OWORD *)(v126 + 176) = v130;
  *(_OWORD *)(v126 + 128) = v132;
  *(_OWORD *)(v126 + 144) = v131;
  v134 = *(_OWORD *)(v162 + v95 + 208);
  v133 = *(_OWORD *)(v162 + v95 + 224);
  v135 = *(_OWORD *)(v162 + v95 + 192);
  *(_QWORD *)(v126 + 240) = *(_QWORD *)(v162 + v95 + 240);
  *(_OWORD *)(v126 + 208) = v134;
  *(_OWORD *)(v126 + 224) = v133;
  *(_OWORD *)(v126 + 192) = v135;
  v136 = *(_OWORD *)(v162 + v95);
  v137 = *(_OWORD *)(v162 + v95 + 16);
  v138 = *(_OWORD *)(v162 + v95 + 48);
  *(_OWORD *)(v126 + 32) = *(_OWORD *)(v162 + v95 + 32);
  *(_OWORD *)(v126 + 48) = v138;
  *(_OWORD *)v126 = v136;
  *(_OWORD *)(v126 + 16) = v137;
  v139 = (_OWORD *)((v162 + v94 + 255) & 0xFFFFFFFFFFFFFFF8);
  v140 = (__int128 *)((v162 + v95 + 255) & 0xFFFFFFFFFFFFFFF8);
  v141 = *v140;
  *(_OWORD *)((char *)v139 + 9) = *(__int128 *)((char *)v140 + 9);
  *v139 = v141;
  v142 = (v162 + v94 + 287) & 0xFFFFFFFFFFFFFFF8;
  v143 = (v162 + v95 + 287) & 0xFFFFFFFFFFFFFFF8;
  v144 = *(_OWORD *)v143;
  *(_BYTE *)(v142 + 16) = *(_BYTE *)(v143 + 16);
  *(_OWORD *)v142 = v144;
  v145 = (_QWORD *)((v162 + v94 + 311) & 0xFFFFFFFFFFFFF8);
  v146 = (_QWORD *)((v162 + v95 + 311) & 0xFFFFFFFFFFFFF8);
  *v145 = *v146;
  *(_OWORD *)(((unint64_t)v145 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v146 + 15) & 0xFFFFFFFFFFFFF8);
  *(_OWORD *)((*(_QWORD *)(v69 - 96) + *(_QWORD *)(v69 - 168) + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v152 + *(_QWORD *)(v69 - 168) + 7) & 0xFFFFFFFFFFFFFFF8);
  result = *(_QWORD *)(v69 - 96);
  *(_BYTE *)(result + v153) = 0;
  return result;
}

_DWORD *sub_23AF4B334(_DWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;

  v2 = result;
  if (result != a2)
  {
    v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v4 = *(_QWORD *)(v3 + 64);
    v5 = *(unsigned __int8 *)(v3 + 80);
    v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v7 = *(_DWORD *)(v6 + 80) & 0xF8;
    v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = v7 | v9 | 7;
    v11 = ((((*(_QWORD *)(v8 + 64) + 7 + ((v9 + 8 + ((*(_QWORD *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    v12 = *(_QWORD *)(sub_23B1C5BDC() - 8);
    v13 = *(unsigned __int8 *)(v12 + 80);
    v14 = *(_QWORD *)(v12 + 64);
    if (*(_DWORD *)(v12 + 84))
      v15 = *(_QWORD *)(v12 + 64);
    else
      v15 = v14 + 1;
    v16 = ((((((v13 | 7) + 16 + ((v4 + v10 + ((v4 + v5) & ~v5)) & ~v10) + v11) & ~(v13 | 7))
           + ((((((((((v15
                     + 7
                     + ((v13
                       + 10
                       + ((((((v14 + 12 + ((v14 + v13 + ((v13 + 12) & ~v13)) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                         + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v13)) & 0xFFFFFFFFFFFFFFF8)
                   + 31) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 19) & 0xFFFFFFFFFFFFFFF8)
             + 25) & 0xFFFFFFFFFFFFFFF8)
           + 16
           + 311) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8;
    v17 = ((v16 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    v18 = (v4 & 0xFFFFFFFFFFFFFFF8) + 24;
    if (v18 <= ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
      v18 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    if (v18 > v17)
      v17 = v18;
    if (v17 <= ((((v16 + 23 + ((v16 + 16 + (v10 | v5 | v13)) & ~(v10 | v5 | v13))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
              + 16)
      v19 = ((((v16 + 23 + ((v16 + 16 + (v10 | v5 | v13)) & ~(v10 | v5 | v13))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 16;
    else
      v19 = v17;
    v20 = *((unsigned __int8 *)v2 + v19);
    if (v20 >= 6 && (_DWORD)v19 != 0)
      v20 = *v2 + 6;
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_23AF4CCDC(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  int v29;
  unsigned int v31;
  int v32;
  unsigned int v33;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 | v10 | 7;
  v12 = (((*(_QWORD *)(v9 + 64) + ((v10 + ((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v14 = *(_DWORD *)(v13 + 84);
  v15 = *(_DWORD *)(v13 + 80);
  v16 = (((((v5 + v6) & ~v6) + v5 + v11) & ~v11) + v15 + v12 + 32) & (*(_DWORD *)(v13 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8);
  v17 = *(_QWORD *)(v13 + 64);
  v18 = (v15
       + ((((((v17 + ((v17 + v15 + ((v15 + 12) & ~v15)) & ~v15) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 10) & ~v15;
  v19 = v14 == 0;
  v20 = v11 | v6 | v15;
  v21 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  v22 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v19)
    ++v17;
  v23 = (((v16
         + ((((((((((v17 + v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 19) & 0xFFFFFFFFFFFFFFF8)
           + 25) & 0xFFFFFFFFFFFFFFF8)
         + 327) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((v23 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v25 = ((((v23 + 23 + ((v23 + v20 + 16) & ~v20)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v25 <= v24)
    v25 = v24;
  if (v21 > v25)
    v25 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v22 > v25)
    v25 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v21 > v25)
    v25 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v22 <= v25)
    v26 = v25;
  else
    v26 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_32;
  v27 = v26 + 1;
  v28 = 8 * (v26 + 1);
  if ((v26 + 1) <= 3)
  {
    v31 = ((a2 + ~(-1 << v28) - 250) >> v28) + 1;
    if (HIWORD(v31))
    {
      v29 = *(_DWORD *)(a1 + v27);
      if (!v29)
        goto LABEL_32;
      goto LABEL_25;
    }
    if (v31 > 0xFF)
    {
      v29 = *(unsigned __int16 *)(a1 + v27);
      if (!*(_WORD *)(a1 + v27))
        goto LABEL_32;
      goto LABEL_25;
    }
    if (v31 < 2)
    {
LABEL_32:
      v33 = *(unsigned __int8 *)(a1 + v26);
      if (v33 >= 6)
        return (v33 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v29 = *(unsigned __int8 *)(a1 + v27);
  if (!*(_BYTE *)(a1 + v27))
    goto LABEL_32;
LABEL_25:
  v32 = (v29 - 1) << v28;
  if (v27 > 3)
    v32 = 0;
  if ((_DWORD)v27)
  {
    if (v27 > 3)
      LODWORD(v27) = 4;
    __asm { BR              X11 }
  }
  return (v32 + 251);
}

void sub_23AF4D000(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;

  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8;
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v9 | v11 | 7;
  v13 = (((*(_QWORD *)(v10 + 64) + ((v11 + ((*(_QWORD *)(v8 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v15 = *(_DWORD *)(v14 + 84);
  v16 = *(_DWORD *)(v14 + 80);
  v17 = (((((v6 + v7) & ~v7) + v6 + v12) & ~v12) + v16 + v13 + 32) & (*(_DWORD *)(v14 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8);
  v18 = *(_QWORD *)(v14 + 64);
  v19 = (v16
       + ((((((v18 + ((v18 + v16 + ((v16 + 12) & ~v16)) & ~v16) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 10) & ~v16;
  v20 = v15 == 0;
  v21 = v12 | v7 | v16;
  v22 = (v6 & 0xFFFFFFFFFFFFFFF8) + 24;
  v23 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v20)
    ++v18;
  v24 = (((v17
         + ((((((((((v18 + v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 19) & 0xFFFFFFFFFFFFFFF8)
           + 25) & 0xFFFFFFFFFFFFFFF8)
         + 327) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((v24 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v26 = ((((v24 + 23 + ((v24 + v21 + 16) & ~v21)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v26 <= v25)
    v26 = v25;
  if (v22 > v26)
    v26 = (v6 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v23 > v26)
    v26 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v22 > v26)
    v26 = (v6 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v23 > v26)
    v26 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v27 = v26 + 1;
  if (a3 < 0xFB)
  {
    v29 = 0;
    v28 = a1;
  }
  else
  {
    v28 = a1;
    if (v27 <= 3)
    {
      v31 = ((a3 + ~(-1 << (8 * v27)) - 250) >> (8 * v27)) + 1;
      if (HIWORD(v31))
      {
        v29 = 4u;
      }
      else if (v31 >= 0x100)
      {
        v29 = 2;
      }
      else
      {
        v29 = v31 > 1;
      }
    }
    else
    {
      v29 = 1u;
    }
  }
  if (a2 <= 0xFA)
    __asm { BR              X11 }
  v30 = a2 - 251;
  if (v27 < 4)
  {
    if ((_DWORD)v26 != -1)
    {
      v32 = v30 & ~(-1 << (8 * v27));
      bzero(v28, v27);
      if ((_DWORD)v27 == 3)
      {
        *(_WORD *)v28 = v32;
        v28[2] = BYTE2(v32);
      }
      else if ((_DWORD)v27 == 2)
      {
        *(_WORD *)v28 = v32;
      }
      else
      {
        *v28 = v32;
      }
    }
  }
  else
  {
    bzero(v28, v26 + 1);
    *(_DWORD *)v28 = v30;
  }
  __asm { BR              X10 }
}

uint64_t sub_23AF4D3A8(_DWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v6 | v8 | 7;
  v10 = (((*(_QWORD *)(v7 + 64) + ((v8 + ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v12 = *(_DWORD *)(v11 + 84);
  v13 = *(_DWORD *)(v11 + 80);
  v14 = (((((v3 + v4) & ~v4) + v3 + v9) & ~v9) + v13 + v10 + 32) & (*(_DWORD *)(v11 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8);
  v15 = *(_QWORD *)(v11 + 64);
  v16 = (v13
       + ((((((v15 + ((v15 + v13 + ((v13 + 12) & ~v13)) & ~v13) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 10) & ~v13;
  if (!v12)
    ++v15;
  v17 = (((v14
         + ((((((((((v15 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 19) & 0xFFFFFFFFFFFFFFF8)
           + 25) & 0xFFFFFFFFFFFFFFF8)
         + 327) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((v17 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v19 = ((((v17 + 23 + ((v17 + (v9 | v4 | v13) + 16) & ~(v9 | v4 | v13))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if ((v3 & 0xFFFFFFFFFFFFFFF8) + 24 <= ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v20 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v20 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v20 <= v18)
    v20 = v18;
  if (v20 > v19)
    v19 = v20;
  result = *((unsigned __int8 *)a1 + v19);
  if (result >= 6 && (_DWORD)v19 != 0)
    return (*a1 + 6);
  return result;
}

uint64_t sub_23AF4D5DC(_BYTE *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  char v29;
  int v30;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 | v10 | 7;
  v12 = (((*(_QWORD *)(v9 + 64) + ((v10 + ((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  result = sub_23B1C5BDC();
  v14 = *(_QWORD *)(result - 8);
  v15 = *(_DWORD *)(v14 + 84);
  v16 = *(_DWORD *)(v14 + 80);
  v17 = (((((v5 + v6) & ~v6) + v5 + v11) & ~v11) + v16 + v12 + 32) & (*(_DWORD *)(v14 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8);
  v18 = *(_QWORD *)(v14 + 64);
  v19 = (v16
       + ((((((v18 + ((v18 + v16 + ((v16 + 12) & ~v16)) & ~v16) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 10) & ~v16;
  if (!v15)
    ++v18;
  v20 = (((v17
         + ((((((((((v18 + v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 19) & 0xFFFFFFFFFFFFFFF8)
           + 25) & 0xFFFFFFFFFFFFFFF8)
         + 327) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = v20 + 23;
  v22 = ((v20 + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  v23 = (v20 + (v11 | v6 | v16) + 16) & ~(v11 | v6 | v16);
  if (a2 > 5)
  {
    v26 = ((((v21 + v23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
    v27 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
    if (v27 <= ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
      v27 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    if (v27 > v26)
      v26 = v27;
    if (v26 <= v22)
      v28 = v22;
    else
      v28 = v26;
    if ((_DWORD)v28)
      v29 = 6;
    else
      v29 = ((a2 - 6) >> (8 * v28)) + 6;
    a1[v28] = v29;
    if (v28 >= 4)
      v30 = 4;
    else
      v30 = v28;
    bzero(a1, v28);
    __asm { BR              X10 }
  }
  v24 = ((((v21 + v23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if ((v5 & 0xFFFFFFFFFFFFFFF8) + 24 <= ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16)
    v25 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  else
    v25 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v25 > v24)
    v24 = v25;
  if (v24 > v22)
    v22 = v24;
  a1[v22] = a2;
  return result;
}

uint64_t type metadata accessor for SnapshotMutation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SnapshotMutation);
}

void sub_23AF4D8DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD v16[8];

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16[3] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v16[2] = (char *)v16 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v11 = type metadata accessor for SnapshotItem(0, v4, v5, v10);
  v16[1] = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  v15 = (char *)sub_23AF4DA40 + 4 * word_23B1DEBF0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23AF4DA40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_getTupleTypeMetadata2();
  v4 = *(_QWORD *)(v3 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v0, v1);
  *(_QWORD *)(v3 - 112) = 0;
  *(_QWORD *)(v3 - 104) = 0xE000000000000000;
  sub_23B1C64F4();
  MEMORY[0x23B8613CC](&unk_23B1DD494, v1);
  sub_23B1C7340();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v3 - 112);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v1);
  return v5;
}

uint64_t sub_23AF4E090(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *);
  int EnumCaseMultiPayload;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  _QWORD v26[4];

  v2 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = (char *)v26 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v26 - v9;
  v11 = *(void (**)(char *))(v2 + 16);
  v11((char *)v26 - v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v14 = ((uint64_t (*)(char *, char *, uint64_t))v11)(v5, v10, a1);
    MEMORY[0x24BDAC7A8](v14);
    strcpy((char *)&v26[-4], "from to  reason ");
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(_QWORD *)(a1 + 24);
    v26[0] = type metadata accessor for SnapshotItem(255, v15, v16, v17);
    v26[1] = v26[0];
    v26[2] = &type metadata for Fields;
    v26[3] = MEMORY[0x24BEE0D00];
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    v19 = &v5[*(int *)(TupleTypeMetadata + 48)];
    v20 = *(_QWORD *)&v5[*(int *)(TupleTypeMetadata + 64)];
    swift_bridgeObjectRelease();
    v22 = type metadata accessor for SnapshotItem(0, v15, v16, v21);
    v23 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
    v23(v19, v22);
    v23(v5, v22);
    if (!v20)
      goto LABEL_6;
  }
  else if (EnumCaseMultiPayload == 5)
  {
    ((void (*)(char *, char *, uint64_t))v11)(v8, v10, a1);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_getTupleTypeMetadata2();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v8, AssociatedTypeWitness);
LABEL_6:
    (*(void (**)(char *, uint64_t))(v2 + 8))(v10, a1);
    return sub_23B1C6A94();
  }
  v24 = sub_23B1C6AB8();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v10, a1);
  return v24;
}

void sub_23AF4E320()
{
  type metadata accessor for ReconciliationID();
}

void sub_23AF4E3A4()
{
  swift_allocObject();
  sub_23AF4E3E0();
}

uint64_t sub_23AF4E3D0()
{
  uint64_t v0;

  return v0;
}

void sub_23AF4E3E0()
{
  uint64_t v0;

  *(_BYTE *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128)) = 0;
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23AF4E428(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v1, a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 112), v1, a1);
  return v2;
}

void sub_23AF4E47C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[9];
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v13 = a2;
  v12[7] = a1;
  v14 = a3;
  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 80);
  v6 = sub_23B1C6C98();
  v12[4] = *(_QWORD *)(v6 - 8);
  v12[5] = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v12[8] = (char *)v12 - v8;
  v12[6] = *(_QWORD *)(v5 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v12[3] = (char *)v12 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v4 + 88);
  MEMORY[0x24BDAC7A8](v9);
  v15 = v5;
  v16 = v11;
  v17 = *(_OWORD *)(v4 + 96);
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23AF4E56C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v9 = *(_QWORD *)(a1 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v11 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v30 - v14;
  v16 = *(_QWORD *)(v5 + 128);
  if (*(_BYTE *)(v2 + v16) == 1 && (*(_DWORD *)(v7 - 152) & 1) == 0)
  {
    v17 = v2 + *(_QWORD *)(v5 + 120);
    swift_beginAccess();
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v9 + 16))(*(_QWORD *)(v7 - 144), v17, a1);
  }
  *(_QWORD *)(v7 - 216) = v13;
  *(_QWORD *)(v7 - 208) = v12;
  *(_BYTE *)(v2 + v16) = 1;
  v19 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 120);
  swift_beginAccess();
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  *(_QWORD *)(v7 - 152) = v19;
  v20(v15, v19, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v6, v15, v4);
    v21 = *(_QWORD *)(v7 - 160);
    v22 = *(_QWORD *)(v7 - 72);
    (*(void (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v7 - 168) + 16) + 152))(v6);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v6, v4);
    if (v22)
      return result;
    v23 = *(_QWORD *)(v7 - 176);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v3) != 1)
    {
      v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
      v27 = *(_QWORD *)(v7 - 200);
      v26(v27, v21, v3);
      v28 = *(_QWORD *)(v7 - 216);
      v26(v28, v27, v3);
      swift_storeEnumTagMultiPayload();
      v29 = *(_QWORD *)(v7 - 208);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v29, v28, a1);
      v25 = *(_QWORD *)(v7 - 152);
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v25, v29, a1);
      swift_endAccess();
      v24 = *(_QWORD *)(v7 - 144);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(v24, v25, a1);
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 192) + 8))(v21, *(_QWORD *)(v7 - 184));
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, a1);
  }
  v25 = *(_QWORD *)(v7 - 152);
  v24 = *(_QWORD *)(v7 - 144);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(v24, v25, a1);
}

void sub_23AF4E7D4(uint64_t a1)
{
  uint64_t v1;

  v1 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23AF4E87C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v17 - v10;
  v12 = v2 + *(_QWORD *)(v6 + 120);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = *(_QWORD *)(v7 - 136);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v3, v11, v1);
    *(_QWORD *)(v7 - 128) = 0;
    *(_QWORD *)(v7 - 120) = 0xE000000000000000;
    sub_23B1C7340();
    v14 = *(_QWORD *)(v7 - 128);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v3, v1);
  }
  else
  {
    v15 = *(_QWORD *)(v7 - 144);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v5, v11, v4);
    *(_QWORD *)(v7 - 128) = 0;
    *(_QWORD *)(v7 - 120) = 0xE000000000000000;
    sub_23B1C7340();
    v14 = *(_QWORD *)(v7 - 128);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v5, v4);
  }
  return v14;
}

void sub_23AF4E9A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v9[3] = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v9[2] = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v2[10];
  v9[1] = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = v2[12];
  v8 = v2[13];
  v9[4] = v6;
  v9[5] = v3;
  v9[6] = v7;
  v9[7] = v8;
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23AF4EA50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v19;

  v10 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v19 - v11;
  v13 = v2 + *(_QWORD *)(v7 + 120);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = *(_QWORD *)(v8 - 128);
    v15 = *(_QWORD *)(v8 - 120);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14, v12, v1);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 64))(v1, v6);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v1);
  }
  else
  {
    v17 = *(_QWORD *)(v8 - 136);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v4, v12, v3);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 64))(v3, v5);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v4, v3);
  }
  return v16 & 1;
}

void sub_23AF4EB60(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[8];

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v9[3] = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v9[2] = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v2[10];
  v9[1] = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = v2[12];
  v8 = v2[13];
  v9[4] = v6;
  v9[5] = v3;
  v9[6] = v7;
  v9[7] = v8;
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23AF4EC08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v19;

  v10 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v19 - v11;
  v13 = v2 + *(_QWORD *)(v7 + 120);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = *(_QWORD *)(v8 - 128);
    v15 = *(_QWORD *)(v8 - 120);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14, v12, v1);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 72))(v1, v6);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v1);
  }
  else
  {
    v17 = *(_QWORD *)(v8 - 136);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v4, v12, v3);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 72))(v3, v5);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v4, v3);
  }
  return v16 & 1;
}

void sub_23AF4ED18()
{
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23AF4ED60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[64];

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = &v13[-v7];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(&v13[-v7], v2 + *(_QWORD *)(v3 + 112), a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v10 = *(_QWORD *)(v4 - 96);
  v11 = *(_QWORD *)(v10 - 8);
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(uint64_t, _BYTE *, _QWORD))(v11 + 32))(v1, v8, *(_QWORD *)(v4 - 96));
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v1, 0, 1, v10);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v11 + 56))(v1, 1, 1, *(_QWORD *)(v4 - 96));
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, a1);
  }
}

void sub_23AF4EE34()
{
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23AF4EE6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v14 - v7;
  v9 = v2 + *(_QWORD *)(v3 + 120);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v11 = *(_QWORD *)(v4 - 96);
  v12 = *(_QWORD *)(v11 - 8);
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v12 + 56))(v1, 1, 1, *(_QWORD *)(v4 - 96));
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a1);
  }
  else
  {
    (*(void (**)(uint64_t, char *, _QWORD))(v12 + 32))(v1, v8, *(_QWORD *)(v4 - 96));
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v1, 0, 1, v11);
  }
}

void sub_23AF4EF58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23AAB1264(a1 + *(_QWORD *)(*(_QWORD *)a1 + 112), a2 + *(_QWORD *)(*(_QWORD *)a2 + 112), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
}

void sub_23AF4EF7C()
{
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23AF4EFB0(uint64_t a1)
{
  uint64_t v1;

  return sub_23AA99324(v1, a1);
}

void type metadata accessor for FPFSID()
{
  JUMPOUT(0x23B861318);
}

void sub_23AF4EFD8()
{
  sub_23B1C74A8();
  sub_23AF4EF7C();
}

uint64_t sub_23AF4EFFC()
{
  return sub_23B1C74E4();
}

void sub_23AF4F014()
{
  sub_23AF4EFD8();
}

void sub_23AF4F034()
{
  sub_23AF4EF7C();
}

void sub_23AF4F054()
{
  sub_23B1C74A8();
  sub_23AF4EF7C();
}

uint64_t sub_23AF4F078()
{
  return sub_23B1C74E4();
}

void sub_23AF4F090(uint64_t a1)
{
  sub_23AF4E7D4(a1);
}

void sub_23AF4F0B0(uint64_t *a1, uint64_t *a2)
{
  sub_23AF4EF58(*a1, *a2);
}

void sub_23AF4F0BC()
{
  JUMPOUT(0x23B8613CCLL);
}

uint64_t sub_23AF4F0CC(uint64_t result, uint64_t a2)
{
  if (!(_BYTE)result)
    return 0;
  if (!(_BYTE)a2)
    return a2;
  if (a2 == 1)
  {
    if (result <= 4u)
      return 4;
    else
      return result;
  }
  else if (result <= a2)
  {
    return a2;
  }
  else
  {
    return result;
  }
}

uint64_t sub_23AF4F118(char a1)
{
  return qword_23B1DEEE0[a1];
}

uint64_t sub_23AF4F130(uint64_t a1)
{
  unsigned int v2;

  if (a1 == 1002 || a1 == 3)
    v2 = 5;
  else
    v2 = 4;
  if (a1 == 500)
    return 0;
  else
    return v2;
}

uint64_t sub_23AF4F14C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23AF4F188 + 4 * byte_23B1DED90[a1]))(0x74636976456E6F6ELL, 0xEC000000656C6261);
}

uint64_t sub_23AF4F188()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_23AF4F1A0()
{
  return 7827308;
}

uint64_t sub_23AF4F1B0()
{
  return 6579565;
}

uint64_t sub_23AF4F1C0()
{
  return 1751607656;
}

uint64_t sub_23AF4F1D0()
{
  return 21843;
}

uint64_t sub_23AF4F1DC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23AF4F214 + 4 * byte_23B1DED96[*v0]))(0x74636976456E6F6ELL, 0xEC000000656C6261);
}

uint64_t sub_23AF4F214()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_23AF4F22C()
{
  return 7827308;
}

uint64_t sub_23AF4F23C()
{
  return 6579565;
}

uint64_t sub_23AF4F24C()
{
  return 1751607656;
}

uint64_t sub_23AF4F25C()
{
  return 21843;
}

uint64_t sub_23AF4F268()
{
  sub_23AF4F368();
  return sub_23B1C66C8();
}

uint64_t sub_23AF4F2C4()
{
  sub_23AF4F368();
  return sub_23B1C6674();
}

unint64_t sub_23AF4F314()
{
  unint64_t result;

  result = qword_2569E7588;
  if (!qword_2569E7588)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DEE20, &type metadata for EvictionUrgency);
    atomic_store(result, (unint64_t *)&qword_2569E7588);
  }
  return result;
}

ValueMetadata *type metadata accessor for EvictionUrgency()
{
  return &type metadata for EvictionUrgency;
}

unint64_t sub_23AF4F368()
{
  unint64_t result;

  result = qword_2569E7590;
  if (!qword_2569E7590)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DEDE8, &type metadata for EvictionUrgency);
    atomic_store(result, (unint64_t *)&qword_2569E7590);
  }
  return result;
}

uint64_t sub_23AF4F3AC(uint64_t (*a1)(uint64_t, uint64_t))
{
  const char *v2;
  const char *v3;
  int64_t v4;
  int64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (const char *)fpfs_fileattrs_fullpath();
  if (!v2)
    return a1(0, 0);
  v3 = v2;
  v4 = strlen(v2);
  if (v4 < 1)
    return a1(0, 0);
  v5 = v4;
  v6 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v7 = objc_msgSend(v6, sel_stringWithFileSystemRepresentation_length_, v3, v5);

  v8 = sub_23B1C63E0();
  v10 = v9;

  a1(v8, v10);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AF4F4B0(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a3 + 24);
  if (!v4)
    return a1(0, 0);
  v5 = strlen(*(const char **)(a3 + 24));
  if (v5 < 1)
    return a1(0, 0);
  v6 = v5;
  v7 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v8 = objc_msgSend(v7, sel_stringWithFileSystemRepresentation_length_, v4, v6);

  v9 = sub_23B1C63E0();
  v11 = v10;

  a1(v9, v11);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AF4F5A8(uint64_t a1, _BYTE *a2, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, void **a6)
{
  void *v6;
  const char *v11;
  const char *v12;
  int64_t v13;
  int64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t result;
  uint64_t v22;

  v11 = (const char *)fpfs_fileattrs_fullpath();
  if (v11 && (v12 = v11, v13 = strlen(v11), v13 > 0))
  {
    v14 = v13;
    v15 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v16 = objc_msgSend(v15, sel_stringWithFileSystemRepresentation_length_, v12, v14);

    v17 = sub_23B1C63E0();
    v19 = v18;

    a3(&v22, a5, v17, v19);
    if (v6)
    {
      v20 = *a6;
      *a6 = v6;

    }
    else
    {
      *a2 = 0;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF4F714(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, void **a6)
{
  void *v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  const char *v14;
  const char *v15;
  int64_t v16;
  int64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v11 = __swift_instantiateConcreteTypeFromMangledName(qword_2542E5250);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (const char *)fpfs_fileattrs_fullpath();
  if (v14 && (v15 = v14, v27 = a2, v16 = strlen(v14), v16 > 0))
  {
    v17 = v16;
    v18 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v19 = objc_msgSend(v18, sel_stringWithFileSystemRepresentation_length_, v15, v17);

    v20 = sub_23B1C63E0();
    v22 = v21;

    a3(a5, v20, v22);
    if (v6)
    {
      v23 = *a6;
      *a6 = v6;

    }
    else
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E72C0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v13, 0, 1, v24);
      sub_23AA8A660((uint64_t)v13, v27, qword_2542E5250);
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF4F8F8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, void **a6)
{
  void *v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  const char *v14;
  const char *v15;
  int64_t v16;
  int64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E72C0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (const char *)fpfs_fileattrs_fullpath();
  if (v14 && (v15 = v14, v27 = a2, v16 = strlen(v14), v16 > 0))
  {
    v17 = v16;
    v18 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v19 = objc_msgSend(v18, sel_stringWithFileSystemRepresentation_length_, v15, v17);

    v20 = sub_23B1C63E0();
    v22 = v21;

    a3(a5, v20, v22);
    if (v6)
    {
      v23 = *a6;
      *a6 = v6;

    }
    else
    {
      v24 = type metadata accessor for VFSItem(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v13, 0, 1, v24);
      sub_23AA8A660((uint64_t)v13, v27, &qword_2542E72C0);
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for JobReason()
{
  return &type metadata for JobReason;
}

uint64_t sub_23AF4FAE8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  result = 0;
  if (a1 >= 0x400000)
  {
    if (a1 <= 0xFFFFFFFFLL)
    {
      if (a1 > 0x7FFFFFF)
      {
        if (a1 <= 0x1FFFFFFF)
        {
          if (a1 == 0x10000000)
            v25 = 0xD000000000000012;
          else
            v25 = 0;
          if (a1 == 0x8000000)
            return 0x55746E65746E6F63;
          else
            return v25;
        }
        else
        {
          v15 = 0x65766F4D6D657469;
          if (a1 != 0x80000000)
            v15 = 0;
          if (a1 == 0x40000000)
            v16 = 0xD00000000000001BLL;
          else
            v16 = v15;
          if (a1 == 0x20000000)
            return 0xD000000000000014;
          else
            return v16;
        }
      }
      else
      {
        v5 = 0x67696E556D657469;
        if (a1 != 0x4000000)
          v5 = 0;
        if (a1 == 0x2000000)
          v6 = 0x6F6E67496D657469;
        else
          v6 = v5;
        if (a1 == 0x1000000)
          v7 = 0x756F72676B636162;
        else
          v7 = v6;
        v8 = 0x72654D736D657469;
        v9 = 0x7571655272657375;
        if (a1 != 0x800000)
          v9 = 0;
        if (a1 != 0x400000)
          v8 = v9;
        if (a1 <= 0xFFFFFF)
          return v8;
        else
          return v7;
      }
    }
    if (a1 <= 0x1FFFFFFFFFLL)
    {
      if (a1 <= 0x3FFFFFFFFLL)
      {
        v24 = 0xD00000000000001ALL;
        if (a1 != 0x200000000)
          v24 = 0;
        if (a1 == 0x100000000)
          return 0xD00000000000001BLL;
        else
          return v24;
      }
      if (a1 == 0x400000000)
        return 0x74616C7563657073;
      v12 = 0x800000000;
      v13 = 0xD00000000000001ALL;
      v14 = 0x1000000000;
    }
    else
    {
      if (a1 <= 0xFFFFFFFFFFLL)
      {
        if (a1 == 0x2000000000)
          return 0x64616F6C70756572;
        if (a1 != 0x4000000000)
        {
          if (a1 == 0x8000000000)
            return 0xD00000000000001ELL;
          return result;
        }
        return 0x74616C7563657073;
      }
      if (a1 == 0x10000000000)
        return 0x684364656E6E6970;
      v12 = 0x20000000000;
      v13 = 0xD000000000000011;
      v14 = 0x40000000000;
    }
    if (a1 == v14)
      v22 = 0xD000000000000013;
    else
      v22 = 0;
    if (a1 == v12)
      return v13;
    else
      return v22;
  }
  if (a1 <= 1023)
  {
    if (a1 > 127)
    {
      v17 = 0xD000000000000012;
      v18 = 0x697665526D657469;
      if (a1 != 512)
        v18 = 0;
      if (a1 == 256)
        v19 = 0xD000000000000014;
      else
        v19 = v18;
      v20 = a1 == 128;
      goto LABEL_70;
    }
    switch(a1)
    {
      case 1:
        result = 0x6C6169726574616DLL;
        break;
      case 2:
        result = 0x6E6F697463697665;
        break;
      case 4:
      case 8:
        result = 0xD000000000000013;
        break;
      case 16:
        result = 0x6F4E7265646C6F66;
        break;
      case 32:
        result = 0xD000000000000014;
        break;
      case 64:
        result = 0xD000000000000016;
        break;
      default:
        return result;
    }
  }
  else
  {
    if (a1 >= 0x8000)
    {
      if (a1 < 0x40000)
      {
        v3 = 0x6F706D496B736964;
        v4 = 0x6F706D496B736964;
        if (a1 != 0x20000)
          v4 = 0;
        if (a1 != 0x10000)
          v3 = v4;
        if (a1 == 0x8000)
          return 0x65526D6165727473;
        else
          return v3;
      }
      v17 = 0xD000000000000010;
      v19 = 0xD000000000000015;
      v21 = 0x6165726C4179616DLL;
      if (a1 != 0x200000)
        v21 = 0;
      if (a1 != 0x80000)
        v19 = v21;
      v20 = a1 == 0x40000;
LABEL_70:
      if (v20)
        return v17;
      else
        return v19;
    }
    if (a1 <= 4095)
    {
      if (a1 == 2048)
        v23 = 0xD000000000000011;
      else
        v23 = 0;
      if (a1 == 1024)
        return 0xD000000000000011;
      else
        return v23;
    }
    else
    {
      v10 = 0xD00000000000001FLL;
      v11 = 0xD000000000000011;
      if (a1 != 0x4000)
        v11 = 0;
      if (a1 != 0x2000)
        v10 = v11;
      if (a1 == 4096)
        return 0xD000000000000013;
      else
        return v10;
    }
  }
  return result;
}

uint64_t sub_23AF501F8()
{
  uint64_t *v0;

  return sub_23AF4FAE8(*v0);
}

uint64_t sub_23AF50200()
{
  unint64_t *v0;

  return sub_23AF1650C(*v0);
}

uint64_t sub_23AF50208()
{
  uint64_t *v0;

  return sub_23AFD4DA8(*v0);
}

unint64_t sub_23AF50214()
{
  unint64_t result;

  result = qword_2569E7598;
  if (!qword_2569E7598)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DEFD4, &type metadata for JobReason);
    atomic_store(result, (unint64_t *)&qword_2569E7598);
  }
  return result;
}

unint64_t sub_23AF5025C()
{
  unint64_t result;

  result = qword_2569E75A0;
  if (!qword_2569E75A0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DEFA4, &type metadata for JobReason);
    atomic_store(result, (unint64_t *)&qword_2569E75A0);
  }
  return result;
}

unint64_t sub_23AF502A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2569E75A8;
  if (!qword_2569E75A8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2569E75B0);
    result = MEMORY[0x23B8613CC](&unk_23B1DD070, v1);
    atomic_store(result, (unint64_t *)&qword_2569E75A8);
  }
  return result;
}

unint64_t sub_23AF502F4()
{
  unint64_t result;

  result = qword_2569E75B8;
  if (!qword_2569E75B8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DEFFC, &type metadata for JobReason);
    atomic_store(result, (unint64_t *)&qword_2569E75B8);
  }
  return result;
}

unint64_t sub_23AF5033C()
{
  unint64_t result;

  result = qword_2569E75C0;
  if (!qword_2569E75C0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DF034, &type metadata for JobReason);
    atomic_store(result, (unint64_t *)&qword_2569E75C0);
  }
  return result;
}

uint64_t sub_23AF50380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23AD83400(a1, a2, a3, (uint64_t (*)(void))sub_23AF50394, (uint64_t (*)(void))sub_23AF503D8);
}

unint64_t sub_23AF50394()
{
  unint64_t result;

  result = qword_2569E75E8;
  if (!qword_2569E75E8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DF164, &type metadata for JobReason);
    atomic_store(result, (unint64_t *)&qword_2569E75E8);
  }
  return result;
}

unint64_t sub_23AF503D8()
{
  unint64_t result;

  result = qword_2569E75F0;
  if (!qword_2569E75F0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DF0FC, &type metadata for JobReason);
    atomic_store(result, (unint64_t *)&qword_2569E75F0);
  }
  return result;
}

uint64_t sub_23AF5041C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23AD83400(a1, a2, a3, (uint64_t (*)(void))sub_23AF50430, (uint64_t (*)(void))sub_23AF50474);
}

unint64_t sub_23AF50430()
{
  unint64_t result;

  result = qword_2569E75F8;
  if (!qword_2569E75F8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DF19C, &type metadata for JobReason);
    atomic_store(result, (unint64_t *)&qword_2569E75F8);
  }
  return result;
}

unint64_t sub_23AF50474()
{
  unint64_t result;

  result = qword_2569E7600;
  if (!qword_2569E7600)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DF1C4, &type metadata for JobReason);
    atomic_store(result, (unint64_t *)&qword_2569E7600);
  }
  return result;
}

unint64_t sub_23AF504B8()
{
  return 0xD000000000000021;
}

uint64_t sub_23AF504D4(unint64_t a1)
{
  if (!(a1 >> 62))
    return 1;
  if (a1 >> 62 == 1)
    return 2;
  return *(_QWORD *)((_UNKNOWN *)((char *)&unk_23B1DF2B0 + (a1 & 0xFFFFFFFFFFFFF8)) + 0x8000000000000000);
}

unint64_t sub_23AF50510(unint64_t a1)
{
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v14[2];
  __int128 v15;
  unint64_t v16;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE850);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23B1CA760;
  *(_QWORD *)(inited + 32) = sub_23B1C63E0();
  *(_QWORD *)(inited + 40) = v3;
  *(_QWORD *)&v15 = a1;
  sub_23ACF2110(a1);
  v4 = sub_23B1C6434();
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 56) = v5;
  v6 = sub_23AAE9EB4(inited);
  if (!(a1 >> 62))
  {
    v7 = sub_23B1C63E0();
    v9 = v8;
    v10 = (id)a1;
    v11 = sub_23B1C5870();
    v16 = sub_23AB6CDB0();
    *(_QWORD *)&v15 = v11;
    sub_23AAA159C(&v15, v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_23AD1A024(v14, v7, v9, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23ACF212C(a1);
  }
  return v6;
}

uint64_t sub_23AF50648()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 >> 62;
  if (!(_DWORD)v1)
    return 1;
  if ((_DWORD)v1 == 1)
    return 2;
  return *(_QWORD *)((_UNKNOWN *)((char *)&unk_23B1DF2B0 + (*v0 & 0xFFFFFFFFFFFFF8)) + 0x8000000000000000);
}

unint64_t sub_23AF50688()
{
  unint64_t *v0;

  return sub_23AF50510(*v0);
}

uint64_t sub_23AF50690()
{
  sub_23AF50794();
  return sub_23B1C7430();
}

uint64_t sub_23AF506B8()
{
  sub_23AF50794();
  return sub_23B1C7424();
}

unint64_t *initializeBufferWithCopyOfBuffer for FPCKPendingSetInternalError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_23ACF2110(*a2);
  *a1 = v3;
  return a1;
}

void destroy for FPCKPendingSetInternalError(unint64_t *a1)
{
  sub_23ACF212C(*a1);
}

unint64_t *assignWithCopy for FPCKPendingSetInternalError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_23ACF2110(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_23ACF212C(v4);
  return a1;
}

unint64_t *assignWithTake for FPCKPendingSetInternalError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_23ACF212C(v3);
  return a1;
}

ValueMetadata *type metadata accessor for FPCKPendingSetInternalError()
{
  return &type metadata for FPCKPendingSetInternalError;
}

unint64_t sub_23AF50794()
{
  unint64_t result;

  result = qword_2569E7608[0];
  if (!qword_2569E7608[0])
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DF200, &type metadata for FPCKPendingSetInternalError);
    atomic_store(result, qword_2569E7608);
  }
  return result;
}

uint64_t sub_23AF507DC()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23AF50854(_QWORD *a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedConformanceWitness;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = sub_23B1C6C98();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v31 - v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = sub_23B1C68F0();
  v10 = a1[3];
  v11 = a1[4];
  v12 = __swift_project_boxed_opaque_existential_1(a1, v10);
  if ((v9 & 1) != 0)
    return sub_23AEBD130(0xD000000000000015, 0x800000023B205260, v10, v11);
  v40 = 0;
  v41 = 0xE000000000000000;
  v37 = v12;
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  v40 = 0xD000000000000014;
  v41 = 0x800000023B201CB0;
  v38 = sub_23B1C68C0();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23AEBD130(v40, v41, v10, v11);
  swift_bridgeObjectRelease();
  v36 = AssociatedConformanceWitness;
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_23B1C6E18();
    result = sub_23B1C68FC();
    a2 = v40;
    v33 = v41;
    v14 = v42;
    v35 = v43;
    v15 = v44;
  }
  else
  {
    v16 = -1 << *(_BYTE *)(a2 + 32);
    v17 = *(_QWORD *)(a2 + 56);
    v33 = a2 + 56;
    v18 = ~v16;
    v19 = -v16;
    if (v19 < 64)
      v20 = ~(-1 << v19);
    else
      v20 = -1;
    v15 = v20 & v17;
    result = swift_bridgeObjectRetain();
    v14 = v18;
    v35 = 0;
  }
  v34 = a2 & 0x7FFFFFFFFFFFFFFFLL;
  v31 = v14;
  v32 = (unint64_t)(v14 + 64) >> 6;
  v37 = (_QWORD *)a2;
  while (a2 < 0)
  {
    if (!sub_23B1C6E3C())
      goto LABEL_29;
    sub_23B1C7358();
    swift_unknownObjectRelease();
    v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
LABEL_12:
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v7, 0, 1, AssociatedTypeWitness);
    v26 = a1[3];
    v25 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v26);
    v38 = 0;
    v39 = 0xE000000000000000;
    sub_23B1C64F4();
    sub_23B1C7340();
    sub_23AEBD130(v38, v39, v26, v25);
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v7, AssociatedTypeWitness);
    a2 = (uint64_t)v37;
  }
  if (v15)
  {
    v21 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v22 = v21 | (v35 << 6);
LABEL_11:
    v23 = *(_QWORD *)(a2 + 48);
    v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v24 + 16))(v7, v23 + *(_QWORD *)(v24 + 72) * v22, AssociatedTypeWitness);
    goto LABEL_12;
  }
  v27 = v35 + 1;
  if (!__OFADD__(v35, 1))
  {
    if (v27 >= v32)
      goto LABEL_29;
    v28 = *(_QWORD *)(v33 + 8 * v27);
    v29 = v35 + 1;
    if (!v28)
    {
      v29 = v35 + 2;
      if (v35 + 2 >= v32)
        goto LABEL_29;
      v28 = *(_QWORD *)(v33 + 8 * v29);
      if (!v28)
      {
        v29 = v35 + 3;
        if (v35 + 3 >= v32)
          goto LABEL_29;
        v28 = *(_QWORD *)(v33 + 8 * v29);
        if (!v28)
        {
          v30 = v35 + 4;
          while (v32 != v30)
          {
            v28 = *(_QWORD *)(v33 + 8 * v30++);
            if (v28)
            {
              v29 = v30 - 1;
              goto LABEL_26;
            }
          }
LABEL_29:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v7, 1, 1, AssociatedTypeWitness);
          return sub_23ACF19B8();
        }
      }
    }
LABEL_26:
    v15 = (v28 - 1) & v28;
    v22 = __clz(__rbit64(v28)) + (v29 << 6);
    v35 = v29;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_23AF50CB8(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x4953466465727474 && a2 == 0xEE007344496D6574)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23AF50D60(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v12 = a2;
  v5 = type metadata accessor for StuckDeletionState.CodingKeys(255, a3, a4, a4);
  MEMORY[0x23B8613CC](&unk_23B1DF548, v5);
  v6 = sub_23B1C72EC();
  v13 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v12 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23B1C7538();
  v14[2] = v12;
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = sub_23B1C6920();
  v14[0] = *(_QWORD *)(AssociatedConformanceWitness + 24);
  MEMORY[0x23B8613CC](MEMORY[0x24BEE1700], v10, v14);
  sub_23B1C72A4();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v8, v6);
}

uint64_t sub_23AF50F04()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t AssociatedConformanceWitness;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = sub_23B1C6758();
  if (MEMORY[0x23B85F0EC](v1, AssociatedTypeWitness))
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v3 = sub_23AF518D4(v1, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 32));
  }
  else
  {
    v3 = MEMORY[0x24BEE4B08];
  }
  swift_bridgeObjectRelease();
  return v3;
}

_QWORD *sub_23AF50FB4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  v5 = type metadata accessor for StuckDeletionState.CodingKeys(255, a2, a3, a4);
  MEMORY[0x23B8613CC](&unk_23B1DF548, v5);
  v6 = sub_23B1C7208();
  v18 = *(_QWORD *)(v6 - 8);
  v19 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_23B1C6758();
  if (MEMORY[0x23B85F0EC](v10, AssociatedTypeWitness))
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    sub_23AF518D4(v10, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 32));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v12 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v13 = v20;
  sub_23B1C7520();
  if (!v13)
  {
    v14 = swift_getAssociatedConformanceWitness();
    v15 = sub_23B1C6920();
    v21[0] = *(_QWORD *)(v14 + 16);
    MEMORY[0x23B8613CC](MEMORY[0x24BEE1720], v15, v21);
    v16 = v19;
    sub_23B1C71C0();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v16);
    v12 = (_QWORD *)v21[2];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v12;
}

uint64_t sub_23AF511E4()
{
  return 0x4953466465727474;
}

uint64_t sub_23AF51208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23AF50CB8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23AF51238(uint64_t a1)
{
  MEMORY[0x23B8613CC](&unk_23B1DF548, a1);
  return sub_23B1C7544();
}

uint64_t sub_23AF5126C(uint64_t a1)
{
  MEMORY[0x23B8613CC](&unk_23B1DF548, a1);
  return sub_23B1C7550();
}

_QWORD *sub_23AF512A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  result = sub_23AF50FB4(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
  if (!v4)
    *a4 = result;
  return result;
}

uint64_t sub_23AF512D0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_23AF50D60(a1, *v2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_23AF512F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_23AF50F04();
  *a1 = result;
  return result;
}

uint64_t sub_23AF51320(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = v1;
  sub_23ADB0190((uint64_t)&v9);
  sub_23AF50854(a1, v9);
  swift_bridgeObjectRelease();
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  sub_23AEBD130(0xD000000000000020, 0x800000023B205230, v4, v5);
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  return sub_23AEBD1D4(8224, 0xE200000000000000, (void (*)(_QWORD *))sub_23AF51BDC, v2, v6, MEMORY[0x24BEE4AE0] + 8, v7);
}

uint64_t sub_23AF51400(_QWORD *a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v29 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = sub_23B1C6C98();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v23 - v5;
  v7 = *(_QWORD *)(a2 + 88);
  if ((v7 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_23B1C6E18();
    swift_getAssociatedConformanceWitness();
    result = sub_23B1C68FC();
    v7 = v33;
    v24 = v34;
    v9 = v35;
    v27 = v36;
    v10 = v37;
  }
  else
  {
    v11 = -1 << *(_BYTE *)(v7 + 32);
    v12 = *(_QWORD *)(v7 + 56);
    v24 = v7 + 56;
    v13 = ~v11;
    v14 = -v11;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v10 = v15 & v12;
    result = swift_bridgeObjectRetain();
    v9 = v13;
    v27 = 0;
  }
  v23 = v9;
  v25 = v7 & 0x7FFFFFFFFFFFFFFFLL;
  v26 = (unint64_t)(v9 + 64) >> 6;
  v28 = v7;
  while (v7 < 0)
  {
    if (!sub_23B1C6E3C())
      goto LABEL_27;
    v30 = v10;
    sub_23B1C7358();
    swift_unknownObjectRelease();
    v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
LABEL_10:
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v6, 0, 1, AssociatedTypeWitness);
    v18 = v29[3];
    v38 = v29[4];
    __swift_project_boxed_opaque_existential_1(v29, v18);
    v31 = 0;
    v32 = 0xE000000000000000;
    sub_23B1C64F4();
    swift_getAssociatedConformanceWitness();
    sub_23B1C7340();
    sub_23AEBD130(v31, v32, v18, v38);
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, AssociatedTypeWitness);
    v7 = v28;
    v10 = v30;
  }
  if (v10)
  {
    v30 = (v10 - 1) & v10;
    v16 = __clz(__rbit64(v10)) | (v27 << 6);
LABEL_9:
    v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v6, *(_QWORD *)(v7 + 48) + *(_QWORD *)(v17 + 72) * v16, AssociatedTypeWitness);
    goto LABEL_10;
  }
  v19 = v27 + 1;
  if (!__OFADD__(v27, 1))
  {
    if (v19 >= v26)
      goto LABEL_27;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    v21 = v27 + 1;
    if (!v20)
    {
      v21 = v27 + 2;
      if (v27 + 2 >= v26)
        goto LABEL_27;
      v20 = *(_QWORD *)(v24 + 8 * v21);
      if (!v20)
      {
        v21 = v27 + 3;
        if (v27 + 3 >= v26)
          goto LABEL_27;
        v20 = *(_QWORD *)(v24 + 8 * v21);
        if (!v20)
        {
          v22 = v27 + 4;
          while (v26 != v22)
          {
            v20 = *(_QWORD *)(v24 + 8 * v22++);
            if (v20)
            {
              v21 = v22 - 1;
              goto LABEL_24;
            }
          }
LABEL_27:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v6, 1, 1, AssociatedTypeWitness);
          return sub_23ACF19B8();
        }
      }
    }
LABEL_24:
    v30 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v21 << 6);
    v27 = v21;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_23AF51798()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 96))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_23B1C6BCC();
    swift_unknownObjectRelease();
    if (*(_QWORD *)(v0 + 96))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_23B1C6BA8();
      swift_unknownObjectRelease();
    }
  }
  *(_QWORD *)(v0 + 96) = 0;
  return swift_unknownObjectRelease();
}

uint64_t sub_23AF51824()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t *sub_23AF51850()
{
  uint64_t *v0;

  v0 = sub_23ADB0144();
  swift_release();

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_23AF51894()
{
  sub_23AF51850();
  return swift_deallocClassInstance();
}

void type metadata accessor for StuckDeletionMonitor()
{
  JUMPOUT(0x23B861318);
}

uint64_t type metadata accessor for StuckDeletionState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StuckDeletionState);
}

uint64_t type metadata accessor for StuckDeletionState.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StuckDeletionState.CodingKeys);
}

uint64_t sub_23AF518D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, unint64_t, uint64_t);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = a1;
  v45 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v44 = (char *)&v37 - v10;
  v37 = v11;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v37 - v13;
  if (MEMORY[0x23B85F0B0](v12))
  {
    sub_23B1C6EE4();
    v15 = sub_23B1C6ED8();
  }
  else
  {
    v15 = MEMORY[0x24BEE4B08];
  }
  v40 = MEMORY[0x23B85F0EC](v5, a2);
  if (!v40)
    return v15;
  v16 = 0;
  v43 = v15 + 56;
  v38 = v14;
  v39 = v5;
  while (1)
  {
    v17 = sub_23B1C6770();
    sub_23B1C6734();
    if ((v17 & 1) != 0)
    {
      v18 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      v18(v14, v5+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v16, a2);
      v19 = __OFADD__(v16, 1);
      v20 = v16 + 1;
      if (v19)
        goto LABEL_20;
    }
    else
    {
      result = sub_23B1C6F38();
      if (v37 != 8)
        goto LABEL_23;
      v46 = result;
      v18 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
      v18(v14, (unint64_t)&v46, a2);
      swift_unknownObjectRelease();
      v19 = __OFADD__(v16, 1);
      v20 = v16 + 1;
      if (v19)
      {
LABEL_20:
        __break(1u);
        return v15;
      }
    }
    v21 = v45;
    v41 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v42 = v20;
    v41(v44, v14, a2);
    v22 = sub_23B1C62CC();
    v23 = -1 << *(_BYTE *)(v15 + 32);
    v24 = v22 & ~v23;
    v25 = v24 >> 6;
    v26 = *(_QWORD *)(v43 + 8 * (v24 >> 6));
    v27 = 1 << v24;
    v28 = *(_QWORD *)(v21 + 72);
    if (((1 << v24) & v26) != 0)
    {
      v29 = ~v23;
      do
      {
        v18(v8, *(_QWORD *)(v15 + 48) + v28 * v24, a2);
        v30 = a3;
        v31 = sub_23B1C63A4();
        v32 = *(void (**)(char *, uint64_t))(v45 + 8);
        v32(v8, a2);
        if ((v31 & 1) != 0)
        {
          v32(v44, a2);
          a3 = v30;
          v14 = v38;
          v5 = v39;
          goto LABEL_7;
        }
        v24 = (v24 + 1) & v29;
        v25 = v24 >> 6;
        v26 = *(_QWORD *)(v43 + 8 * (v24 >> 6));
        v27 = 1 << v24;
        a3 = v30;
      }
      while ((v26 & (1 << v24)) != 0);
      v14 = v38;
      v5 = v39;
    }
    v33 = v44;
    *(_QWORD *)(v43 + 8 * v25) = v27 | v26;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v41)(*(_QWORD *)(v15 + 48) + v28 * v24, v33, a2);
    v35 = *(_QWORD *)(v15 + 16);
    v19 = __OFADD__(v35, 1);
    v36 = v35 + 1;
    if (v19)
      break;
    *(_QWORD *)(v15 + 16) = v36;
LABEL_7:
    v16 = v42;
    if (v42 == v40)
      return v15;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_23AF51BDC(_QWORD *a1)
{
  uint64_t v1;

  return sub_23AF51400(a1, v1);
}

uint64_t sub_23AF51BF4(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23AF51C34 + 4 * byte_23B1DF320[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23AF51C54 + 4 * byte_23B1DF325[v4]))();
}

_BYTE *sub_23AF51C34(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23AF51C54(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23AF51C5C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23AF51C64(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23AF51C6C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23AF51C74(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_23AF51C80()
{
  JUMPOUT(0x23B8613CCLL);
}

void sub_23AF51C90()
{
  JUMPOUT(0x23B8613CCLL);
}

void sub_23AF51CA0()
{
  JUMPOUT(0x23B8613CCLL);
}

uint64_t sub_23AF51CB0()
{
  return swift_initClassMetadata2();
}

unint64_t sub_23AF51D34()
{
  return 0xD000000000000221;
}

unint64_t sub_23AF51D50()
{
  return 0xD000000000000073;
}

unint64_t sub_23AF51D6C()
{
  return 0xD000000000000092;
}

unint64_t sub_23AF51D88()
{
  return 0xD000000000000086;
}

unint64_t sub_23AF51DA4()
{
  return 0xD00000000000006ELL;
}

unint64_t sub_23AF51DC0()
{
  return 0xD00000000000003CLL;
}

void sub_23AF51DE0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_23B1C545C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B1C5390();
  v7 = sub_23B1C5A08();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
  v8 = (void *)sub_23B1C5468();
  sub_23AA8A05C((uint64_t)v2, (uint64_t *)&unk_2542E6740);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

  qword_2542EDCF8 = (uint64_t)&unk_250BDED68;
}

void sub_23AF51EF4()
{
  qword_2542EDE28 = (uint64_t)&unk_250BDDB40;
}

void sub_23AF51F08()
{
  qword_2542EDBF8 = (uint64_t)&unk_250BDE8C8;
}

void sub_23AF51F1C()
{
  qword_256A079C8 = (uint64_t)&unk_250BDE898;
}

uint64_t sub_23AF51F34()
{
  sub_23AB55910();
  sub_23B1C659C();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 74;
}

uint64_t sub_23AF51FA0()
{
  return 1280267850;
}

BOOL sub_23AF51FB0()
{
  return sub_23AB71A94() || sub_23AB71A94();
}

void sub_23AF51FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  id v10;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v2 + 16);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v2;
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = a2;
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = sub_23AEB1678;
  v7[3] = v6;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v7;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_113;
  v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v9 = objc_msgSend(v5, sel_fetchSwift_error_, v8, aBlock);
  _Block_release(v8);
  v10 = aBlock[0];
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v6 & 1) != 0)
    __break(1u);
  if (v9)
  {
    if (objc_msgSend(v9, sel_next))
    {
      MEMORY[0x23B8601A8]();
      sub_23AF52230();
    }
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
}

void sub_23AF52230()
{
  type metadata accessor for FSOrFPJob();
}

uint64_t sub_23AF5226C(uint64_t a1)
{
  void (*v1)(uint64_t);
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = MEMORY[0x23B8613CC](&unk_23B1E3744, a1);
  result = sub_23AABEBB8(v2, 0, a1, v5, (uint64_t)&v7);
  if (!v3)
  {
    v1(v7);
    return swift_release();
  }
  return result;
}

uint64_t sub_23AF522E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 v8;
  void *v9;
  id v10;
  id v11;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v2 + 16);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = (_QWORD *)swift_allocObject();
  v8 = v7;
  v7[2] = sub_23AF5C1B8;
  v7[3] = v6;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v7;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_103;
  v9 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v10 = objc_msgSend(v5, sel_fetchSwift_error_, v9, aBlock);
  _Block_release(v9);
  v11 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v10)
  {
    v8 = objc_msgSend(v10, sel_next);
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v8 & 1;
}

unint64_t sub_23AF524A8(uint64_t a1, void (*a2)(uint64_t))
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  a2(a1);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0xD00000000000001CLL;
}

unint64_t sub_23AF52558(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23AF51FF4(a1, a2);
  if (v2)
    sub_23AB22830(0xF000000000000007);
  return 0xF000000000000007;
}

unint64_t sub_23AF525CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t result;

  result = sub_23AF52558(a1, a2);
  if (!v2)
  {
    if ((~result & 0xF000000000000007) != 0)
    {
      if ((result & 0x8000000000000000) != 0)
      {
        result = sub_23B1C704C();
        __break(1u);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_23AF52650(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = sub_23AF52558(a1, a2);
  if (v2)
    return v4;
  if ((~v3 & 0xF000000000000007) == 0)
    return 0;
  if ((v3 & 0x8000000000000000) != 0)
    return v3 & 0x7FFFFFFFFFFFFFFFLL;
  result = sub_23B1C704C();
  __break(1u);
  return result;
}

uint64_t sub_23AF526DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  unsigned __int8 v10;
  id v11;
  id v12;
  uint64_t result;
  id aBlock[7];

  v3 = v2;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v6 = *(void **)(v3 + 16);
  objc_msgSend(v6, sel_assertOnQueue);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v3;
  *(_QWORD *)(v7 + 24) = a1;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = sub_23AF5C150;
  v8[3] = v7;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v8;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_93;
  v9 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v10 = objc_msgSend(v6, sel_executeSwift_error_, v9, aBlock);
  _Block_release(v9);
  v11 = aBlock[0];
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v9 & 1) != 0)
    __break(1u);
  if ((v10 & 1) != 0)
  {
    v12 = objc_msgSend(v6, sel_lastInsertedRowID);
    a2[3] = &type metadata for SQLJobID;
    a2[4] = sub_23AEB16D8();
    result = swift_release();
    *a2 = v12;
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    return swift_release();
  }
  return result;
}

void sub_23AF528DC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v4 = (_QWORD *)*a2;
  v15 = 0;
  v16 = 0xE000000000000000;
  sub_23B1C6EFC();
  v19 = 0;
  v20 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = v4[69];
  v6 = v4[70];
  v7 = v4[71];
  v8 = v4[72];
  sub_23AF1E364(a3);
  v18 = MEMORY[0x24BEE1768];
  v15 = v9;
  sub_23AA94C90((uint64_t)&v15);
  v11 = v10;
  sub_23AA8A05C((uint64_t)&v15, qword_2542E5640);
  if (v11)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v12 = sub_23AF1E364(a3);
    v18 = MEMORY[0x24BEE1E88];
    v15 = v12;
    sub_23AA94C90((uint64_t)&v15);
    v14 = v13;
    sub_23AA8A05C((uint64_t)&v15, qword_2542E5640);
    if (v14)
    {
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      sub_23B1C64F4();
      swift_retain();
      v15 = v5;
      v16 = v6;
      v17 = v7;
      v18 = v8;
      type metadata accessor for FSOrFPJob();
    }
  }
  sub_23B1C704C();
  __break(1u);
}

uint64_t sub_23AF52B98(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  void *v15;
  char isEscapingClosureAtFileLocation;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  uint64_t (*v21)(id);
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  id aBlock;
  uint64_t v42;
  id (*v43)(uint64_t, void *);
  void *v44;
  uint64_t (*v45)();
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD **)v1;
  v4 = *(id *)(v1 + 16);
  objc_msgSend(v4, sel_assertOnQueue);
  v5 = v3[69];
  v6 = v3[70];
  v7 = v3[71];
  v8 = v3[72];
  sub_23AF1E3F4(a1, (uint64_t)&aBlock);
  if (!v44)
  {
    sub_23AA8A05C((uint64_t)&aBlock, &qword_2542E16F0);
LABEL_36:
    sub_23AFF0544((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/SQLJobRegistry.swift", 133, 2, 187);
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E16E0);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_36;
  v9 = v40;
  v10 = sub_23AF1E7EC(a1);
  if (v12 == 3 || (v12 == 4 ? (v13 = (v10 & 0xFFFFFFFFFFFFFFFELL | v11) == 0) : (v13 = 0), v13))
  {
    if (*(_BYTE *)(v1 + 48) == 1)
    {
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = v40;
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = sub_23AEB1918;
      *(_QWORD *)(v5 + 24) = v14;
      v45 = sub_23AA956C8;
      v46 = v5;
      aBlock = (id)MEMORY[0x24BDAC760];
      v42 = 1107296256;
      v43 = sub_23AA9432C;
      v44 = &block_descriptor_83;
      v15 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      aBlock = 0;
      v9 = objc_msgSend(v4, sel_executeSwift_error_, v15, &aBlock);
      _Block_release(v15);
      a1 = (uint64_t)aBlock;
      v4 = aBlock;
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0)
      {
LABEL_24:
        if ((_DWORD)v9)
          return swift_release();
        sub_23B1C587C();

        swift_willThrow();
        return swift_release();
      }
      __break(1u);
    }
  }
  v17 = (void *)sub_23AF1E7EC(a1);
  if (v19 != 1)
    goto LABEL_23;
  v20 = v17;
  if (!v17)
  {
    sub_23AAAE478(0, v18, 1);
    goto LABEL_23;
  }
  v39 = v4;
  v21 = *(uint64_t (**)(id))(*(_QWORD *)v17 + 88);
  v22 = v18;
  v23 = sub_23AAAE478(v17, v18, 1);
  v24 = v21(v23);
  if (v26 != 3 || v24 != 1 || v25 != 0)
  {
    sub_23AB7C0C4(v24, v25, v26);
    sub_23AAAEE10(v20, v22, 1);
    v4 = v39;
LABEL_23:
    v29 = (_QWORD *)swift_allocObject();
    v29[2] = v5;
    v29[3] = v6;
    v29[4] = v7;
    v29[5] = v8;
    v29[6] = a1;
    v29[7] = v9;
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = sub_23AF5C09C;
    *(_QWORD *)(v30 + 24) = v29;
    v45 = sub_23AA956C8;
    v46 = v30;
    aBlock = (id)MEMORY[0x24BDAC760];
    v42 = 1107296256;
    v43 = sub_23AA9432C;
    v44 = &block_descriptor_63_1;
    v31 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    LODWORD(v9) = objc_msgSend(v4, sel_executeSwift_error_, v31, &aBlock);
    _Block_release(v31);
    v4 = aBlock;
    LOBYTE(v31) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v31 & 1) == 0)
      goto LABEL_24;
    __break(1u);
LABEL_34:
    __break(1u);
  }
  v38 = v20;
  v33 = (_QWORD *)swift_allocObject();
  v33[2] = v5;
  v33[3] = v6;
  v33[4] = v7;
  v33[5] = v8;
  v33[6] = a1;
  v33[7] = v9;
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = sub_23AF5C0E4;
  *(_QWORD *)(v34 + 24) = v33;
  v45 = sub_23AA956C8;
  v46 = v34;
  aBlock = (id)MEMORY[0x24BDAC760];
  v42 = 1107296256;
  v43 = sub_23AA9432C;
  v44 = &block_descriptor_73;
  v35 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v36 = objc_msgSend(v39, sel_executeSwift_error_, v35, &aBlock);
  _Block_release(v35);
  v37 = aBlock;
  LOBYTE(v35) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v35 & 1) != 0)
    goto LABEL_34;
  if (v36)
  {
    sub_23AAAEE10(v38, v22, 1);
    return swift_release();
  }
  sub_23B1C587C();

  swift_willThrow();
  sub_23AAAEE10(v38, v22, 1);
  return swift_release();
}

unint64_t sub_23AF53118(uint64_t a1, uint64_t a2)
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  sub_23AC396B8(a2, 0);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0xD000000000000022;
}

uint64_t sub_23AF531A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v17[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v19 = 0;
  v20 = 0xE000000000000000;
  sub_23B1C64F4();
  v4 = (void *)sub_23AF1E7EC(a2);
  v6 = v5;
  v8 = v7;
  sub_23AAAE478(v4, v5, v7);
  sub_23ADFDFE8(v4, v6, v8, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_23AAAEE10(v4, v6, v8);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AF1E364(a2);
  v18 = MEMORY[0x24BEE1768];
  v17[0] = v9;
  sub_23AA94C90((uint64_t)v17);
  v11 = v10;
  sub_23AA8A05C((uint64_t)v17, qword_2542E5640);
  if (!v11)
    goto LABEL_4;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v12 = sub_23AF1E364(a2);
  v18 = MEMORY[0x24BEE1E88];
  v17[0] = v12;
  sub_23AA94C90((uint64_t)v17);
  v14 = v13;
  sub_23AA8A05C((uint64_t)v17, qword_2542E5640);
  if (v14)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23AC396B8(a3, 0);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v19;
  }
  else
  {
LABEL_4:
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

unint64_t sub_23AF5349C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  char v8;
  char v9;

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  v5 = (void *)sub_23AF1E7EC(a2);
  v7 = v6;
  v9 = v8;
  sub_23AAAE478(v5, v6, v8);
  sub_23ADFDFE8(v5, v7, v9, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_23AAAEE10(v5, v7, v9);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AC396B8(a3, 0);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0xD000000000000013;
}

void sub_23AF53600()
{
  type metadata accessor for PersistenceTrigger();
}

void sub_23AF53658(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[64];

  *(_QWORD *)(v3 - 264) = a1;
  *(_QWORD *)(v3 - 272) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v3 - 280) = &v15[-v4];
  v5 = sub_23B1C5DC8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  *(_QWORD *)(v3 - 160) = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v15[-v10];
  v12 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v12);
  *(_QWORD *)(v3 - 184) = &v15[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_2542E6818 != -1)
    swift_once();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v11, 1, 1, v5);
  *(_QWORD *)(v3 - 104) = 0;
  *(_QWORD *)(v3 - 96) = 0xE000000000000000;
  sub_23B1C64F4();
  *(_QWORD *)(v3 - 72) = *(_QWORD *)(v3 - 152);
  v14 = *(_QWORD *)(v3 - 176);
  *(_QWORD *)(v3 - 144) = *(_QWORD *)(v3 - 168);
  *(_QWORD *)(v3 - 136) = v14;
  *(_QWORD *)(v3 - 248) = v2;
  *(_QWORD *)(v3 - 240) = v1;
  *(_QWORD *)(v3 - 128) = v1;
  *(_QWORD *)(v3 - 120) = v2;
  type metadata accessor for FSOrFPJob();
}

void sub_23AF542A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 272) + 8))(v0, v1);
  if (swift_weakLoadStrong())
  {
    v3 = sub_23AFB5D38();
    swift_release();
    if (v3)
    {
      if (swift_weakLoadStrong())
        JUMPOUT(0x23AF54308);
      __break(1u);
      JUMPOUT(0x23AF543F8);
    }
    JUMPOUT(0x23AF54360);
  }
  JUMPOUT(0x23AF54340);
}

void sub_23AF54414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a3 + a4;
  if (__OFADD__(a3, a4))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (__OFADD__(v6, a5))
  {
LABEL_8:
    __break(1u);
    JUMPOUT(0x23AF5468CLL);
  }
  if (!(v6 + a5)
    || (v7 = MEMORY[0x24BDAC7A8](a1), MEMORY[0x24BDAC7A8](v7), sub_23AF51FF4((uint64_t)sub_23AF5C034, v8), !v5))
  {
    type metadata accessor for SchedulableJob();
  }
}

uint64_t sub_23AF54690(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  id v7;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  swift_bridgeObjectRetain();
  v6 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE7C0);
  sub_23AAB5A28((unint64_t *)&unk_2542E2068, (uint64_t *)&unk_2542DE7C0, MEMORY[0x24BEE2B40]);
  sub_23AAA420C();
  sub_23B1C6644();
  swift_release();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v7 = objc_msgSend(v6, sel_bindLongParameter_, a4);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

void sub_23AF54928(uint64_t a1)
{
  uint64_t v2;
  char *v3;

  v2 = sub_23B1C5E4C();
  MEMORY[0x24BDAC7A8](v2);
  v3 = (char *)&loc_23AF549CC + *((int *)qword_23AF54CC8 + sub_23AF1E398(a1));
  __asm { BR              X10 }
}

uint64_t sub_23AF549DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8_t *v12;
  uint64_t v13;

  v3 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  swift_retain_n();
  v4 = sub_23B1C5E40();
  v5 = sub_23B1C6AAC();
  v6 = v5;
  if (os_log_type_enabled(v4, v5))
  {
    v7 = swift_slowAlloc();
    *(_DWORD *)(v2 - 148) = v6;
    v8 = (_DWORD *)v7;
    v9 = swift_slowAlloc();
    *(_QWORD *)(v2 - 144) = v9;
    *(_QWORD *)(v2 - 112) = v9;
    *(_QWORD *)(v2 - 160) = v8;
    *v8 = 136315138;
    *(_QWORD *)(v2 - 168) = v8 + 1;
    *(_BYTE *)(v2 - 72) = sub_23AF1E398(v1);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2569E7798);
    v10 = sub_23B1C6434();
    *(_QWORD *)(v2 - 72) = sub_23AABEC68(v10, v11, (uint64_t *)(v2 - 112));
    sub_23B1C6CBC();
    swift_release_n();
    swift_bridgeObjectRelease();
    v12 = *(uint8_t **)(v2 - 160);
    _os_log_impl(&dword_23AA66000, v4, (os_log_type_t)*(_DWORD *)(v2 - 148), "unexpected %s job in fetchRunnableJobs", v12, 0xCu);
    v13 = *(_QWORD *)(v2 - 144);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v13, -1, -1);
    MEMORY[0x23B8614BC](v12, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 136) + 8))(v0, *(_QWORD *)(v2 - 128));
  return 1;
}

void sub_23AF54CF0()
{
  type metadata accessor for SchedulableJob();
}

void sub_23AF554C0()
{
  sub_23AF54CF0();
}

char *sub_23AF554E4(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return sub_23ABF0998(a2, a3, a4 & 1);
}

_QWORD *sub_23AF55524(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_23ABEED9C(a1, a2, a3 & 1, a4);
}

_QWORD *sub_23AF55548(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_23ABEED9C(a1, a2, a3 & 1, a4);
}

void sub_23AF5556C()
{
  type metadata accessor for TestingOperation();
}

uint64_t sub_23AF555BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 72) = sub_23B1C6758();
  *(_QWORD *)(v2 - 144) = v1;
  *(_QWORD *)(v2 - 136) = v2 - 72;
  sub_23AF51FF4((uint64_t)sub_23ABEFC98, 0);
  if (!v0)
    sub_23ABEFC00();
  return swift_bridgeObjectRelease();
}

void sub_23AF556E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_23B1C67DC();
  v4 = MEMORY[0x23B8613CC](MEMORY[0x24BEE12E0], v3);
  v6 = sub_23AD7E264((void (*)(char *, char *))sub_23AF5BE64, v1, v3, v0, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v5);
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 - 112) = v6;
  sub_23B1C67A0();
  JUMPOUT(0x23AF55670);
}

void sub_23AF5577C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[11];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v11[7] = a3;
  v17 = a2;
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 560);
  v6 = *(_QWORD *)(*a2 + 576);
  v7 = type metadata accessor for SnapshotItem(255, v5, v6, a4);
  v12 = sub_23B1C6C98();
  v11[8] = *(_QWORD *)(v12 - 8);
  v8 = MEMORY[0x24BDAC7A8](v12);
  v11[10] = (char *)v11 - v9;
  v11[9] = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = *(_QWORD *)(v4 + 568);
  v13 = *(_QWORD *)(v4 + 552);
  v14 = v5;
  v15 = v10;
  v16 = v6;
  type metadata accessor for TestingOperation();
}

void sub_23AF55854(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE v17[96];

  *(_QWORD *)(v7 - 200) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v7 - 192) = &v17[-v8];
  type metadata accessor for SnapshotItem(255, v3, v5, v9);
  v10 = sub_23B1C6C98();
  v11 = MEMORY[0x24BDAC7A8](v10);
  *(_QWORD *)(v7 - 128) = &v17[-v12];
  v13 = MEMORY[0x24BDAC7A8](v11);
  v16 = &v17[-v15];
  *(_QWORD *)(v7 - 184) = v1;
  *(_QWORD *)(v7 - 176) = v4;
  *(_QWORD *)(v7 - 208) = v3;
  if ((v2 & 0x8000000000000000) == 0)
  {
    *(_QWORD *)(v7 - 152) = v14;
    *(_QWORD *)(v7 - 144) = v13;
    *(_QWORD *)(v7 - 136) = v16;
    *(_QWORD *)(v7 - 112) = v3;
    *(_QWORD *)(v7 - 104) = v1;
    *(_QWORD *)(v7 - 96) = v5;
    *(_QWORD *)(v7 - 88) = v4;
    type metadata accessor for Bouncing.BounceItem();
  }
  *(_QWORD *)(v7 - 128) = v6;
  *(_QWORD *)(v7 - 112) = v1;
  *(_QWORD *)(v7 - 104) = v3;
  *(_QWORD *)(v7 - 96) = v4;
  *(_QWORD *)(v7 - 88) = v5;
  type metadata accessor for Bouncing.BounceItem();
}

uint64_t sub_23AF559E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  int *TupleTypeMetadata;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[24];
  _BYTE v36[96];

  Strong = swift_dynamicCastClass();
  if (!Strong)
  {
LABEL_12:
    MEMORY[0x24BDAC7A8](Strong);
    v33 = *(_QWORD *)(v4 - 184);
    *(_QWORD *)&v36[-48] = *(_QWORD *)(v4 - 208);
    *(_QWORD *)&v36[-40] = v33;
    v34 = *(_QWORD *)(v4 - 176);
    *(_QWORD *)v35 = v3;
    *(_QWORD *)&v35[8] = v34;
    *(_QWORD *)&v35[16] = v0;
    sub_23AFF56B8((uint64_t (*)(uint64_t))sub_23AF5BE8C, (uint64_t)&v36[-64], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/SQLJobRegistry.swift", 133, 2, 520);
  }
  v6 = Strong;
  *(_QWORD *)(v4 - 216) = v3;
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = v2;
  v8 = *(_QWORD *)(Strong + 40);
  swift_retain();
  swift_retain();
  swift_release();
  v9 = v6 + *(_QWORD *)(*(_QWORD *)v6 + 536);
  v10 = *(_QWORD *)(v4 - 120);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 240))(v9, 1);
  v11 = *(_QWORD *)(v4 - 136);
  if (v10)
  {
    swift_release();
    swift_release();
  }
  else
  {
    v12 = *(_QWORD *)(v4 - 152);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v7, 1, v1) == 1)
    {
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 160) + 8))(v7, v11);
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v12 + 32))(*(_QWORD *)(v4 - 128), v7, v1);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 296))(v9);
      *(_QWORD *)(v4 - 72) = 0;
      if ((v14 & 1) == 0)
      {
        *(_QWORD *)(v4 - 144) = v36;
        v15 = v1;
        strcpy(v35, " item newName version ");
        *(_QWORD *)(v4 - 120) = MEMORY[0x24BDAC7A8](v13);
        v17 = *(_QWORD *)(v4 - 184);
        v16 = *(_QWORD *)(v4 - 176);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        v19 = *(_QWORD *)(v4 - 136);
        *(_QWORD *)(v4 - 112) = AssociatedTypeWitness;
        *(_QWORD *)(v4 - 104) = v19;
        v20 = MEMORY[0x24BEE1E88];
        *(_QWORD *)(v4 - 96) = &type metadata for Filename;
        *(_QWORD *)(v4 - 88) = v20;
        TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
        v22 = *(_QWORD *)(v4 - 192);
        v23 = v22 + TupleTypeMetadata[12];
        *(_QWORD *)(v4 - 144) = v22 + TupleTypeMetadata[16];
        *(_QWORD *)(v4 - 136) = TupleTypeMetadata[20];
        v24 = swift_getAssociatedTypeWitness();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v9, v24);
        v25 = *(_QWORD *)(v4 - 152);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 16))(v23, *(_QWORD *)(v4 - 128), v15);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v23, 0, 1, v15);
        v26 = (uint64_t *)(v6 + *(_QWORD *)(*(_QWORD *)v6 + 552));
        v27 = *v26;
        v28 = v26[1];
        v29 = *(_QWORD **)(v4 - 144);
        *v29 = v27;
        v29[1] = v28;
        *(_QWORD *)(v22 + *(_QWORD *)(v4 - 136)) = *(_QWORD *)(v4 - 120);
        v30 = *(_QWORD *)(v4 - 208);
        *(_QWORD *)(v4 - 112) = v17;
        *(_QWORD *)(v4 - 104) = v30;
        v31 = *(_QWORD *)(v4 - 216);
        *(_QWORD *)(v4 - 96) = v16;
        *(_QWORD *)(v4 - 88) = v31;
        type metadata accessor for DirectionalTestingOperation();
      }
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 152) + 8))(*(_QWORD *)(v4 - 128), v1);
      swift_release();
      swift_release();
    }
  }
  return 1;
}

void sub_23AF55D48()
{
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  sub_23B1C67DC();
  swift_bridgeObjectRetain();
  sub_23B1C67AC();
  swift_release();
  swift_release();
  JUMPOUT(0x23AF55DB0);
}

void sub_23AF55F40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  sub_23B1C67DC();
  swift_bridgeObjectRetain();
  sub_23B1C67AC();
  swift_release();
  swift_release();
  (*(void (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 128), v0);
  JUMPOUT(0x23AF56000);
}

void sub_23AF5608C()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  type metadata accessor for FSOrFPJob();
}

uint64_t sub_23AF5610C(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x23B8613CC](&unk_23B1DDB60, a1);
  sub_23B1C7340();
  sub_23B1C64F4();
  return v2;
}

void sub_23AF56160()
{
  type metadata accessor for TestingOperation();
}

void sub_23AF56198(_QWORD *a1)
{
  sub_23AF89094(a1);
}

uint64_t sub_23AF561B0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  _QWORD *v6;
  void *v7;
  id v8;
  id v9;
  char isEscapingClosureAtFileLocation;
  char v11;
  char v13;
  id aBlock[7];

  v3 = v1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v1 + 16);
  v6 = (_QWORD *)swift_allocObject();
  LOBYTE(v1) = (_BYTE)v6;
  v6[2] = sub_23AF5BE14;
  v6[3] = v3;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v6;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_44;
  v7 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v8 = objc_msgSend(v5, sel_fetchSwift_error_, v7, aBlock);
  _Block_release(v7);
  v9 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v8)
  {
    if ((objc_msgSend(v8, sel_next) & 1) != 0)
      goto LABEL_4;
    v1 = *(_QWORD *)(v3 + 24);
    v11 = sub_23ABF0058();
    if (v2)
    {
      swift_release();

      return v1 & 1;
    }
    if ((v11 & 1) != 0 || (v13 = sub_23ABF0058(), (v13 & 1) != 0))
    {
LABEL_4:
      swift_release();

      LOBYTE(v1) = 1;
    }
    else if ((a1 & 1) != 0)
    {
      LOBYTE(v1) = sub_23B1BCA54();
      swift_release();

    }
    else
    {
      swift_release();

      LOBYTE(v1) = 0;
    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v1 & 1;
}

uint64_t sub_23AF563E4()
{
  uint64_t result;
  char v1;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = sub_23AFB5D28();
    swift_release();
    sub_23B1C6EFC();
    if (v1 < 0)
    {
      swift_bridgeObjectRelease();
      sub_23B1C7304();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_23B1C64F4();
      sub_23B1C7304();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      sub_23B1C64F4();
      sub_23B1C7304();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      sub_23B1C64F4();
    }
    sub_23B1C6EFC();
    sub_23B1C64F4();
    if (qword_2569E12E8 != -1)
      swift_once();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5540);
    sub_23AAB5A28(&qword_2542E75B0, (uint64_t *)&unk_2542E5540, MEMORY[0x24BEE2B40]);
    sub_23AAA420C();
    sub_23B1C6644();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*sub_23AF56700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  _QWORD *v4;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = a1 & 1;
  v8 = (_QWORD *)*v4;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = (v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v8[69];
  *(_QWORD *)(v14 + 24) = v8[70];
  *(_QWORD *)(v14 + 32) = a3;
  *(_QWORD *)(v14 + 40) = v8[71];
  *(_QWORD *)(v14 + 48) = v8[72];
  *(_QWORD *)(v14 + 56) = a4;
  *(_BYTE *)(v14 + 64) = v7;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v12, v11, a3);
  *(_QWORD *)(v14 + v13) = v4;
  swift_retain();
  return sub_23AF5BFEC;
}

uint64_t sub_23AF56804(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  uint64_t (*v18)@<X0>(uint64_t *@<X8>);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v16 = (uint64_t (*)())0xE000000000000000;
  sub_23B1C6EFC();
  v22 = 0;
  v23 = 0xE000000000000000;
  sub_23B1C64F4();
  v18 = (uint64_t (*)@<X0>(uint64_t *@<X8>))MEMORY[0x24BEE1768];
  v15 = a2 & 1;
  sub_23AA94C90((uint64_t)&v15);
  v12 = v11;
  sub_23AA8A05C((uint64_t)&v15, qword_2542E5640);
  if (v12)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 + 40) + 32))(a1, a5);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v13 = *(_QWORD *)(a4 + 96);
    v20 = 40;
    v21 = 0xE100000000000000;
    v15 = v13;
    v16 = (uint64_t (*)())sub_23AF5BA6C;
    v17 = 0;
    v18 = sub_23AF5BA84;
    v19 = 0;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE7A0);
    sub_23AAB5A28(&qword_2542E2040, (uint64_t *)&unk_2542DE7A0, MEMORY[0x24BEE2B40]);
    sub_23AAA420C();
    sub_23B1C6644();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    if (qword_2542E5078 != -1)
      swift_once();
    v20 = 40;
    v21 = 0xE100000000000000;
    v15 = qword_2542EDE28;
    v16 = sub_23AAB6448;
    v17 = 0;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5540);
    sub_23AAB5A28(&qword_2542E75B0, (uint64_t *)&unk_2542E5540, MEMORY[0x24BEE2B40]);
    sub_23B1C6644();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v22;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t (*sub_23AF56B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  _QWORD *v4;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v7 = a1 & 1;
  v8 = (_QWORD *)*v4;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v11);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = (v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v8[69];
  *(_QWORD *)(v14 + 24) = v8[70];
  *(_QWORD *)(v14 + 32) = a3;
  *(_QWORD *)(v14 + 40) = v8[71];
  *(_QWORD *)(v14 + 48) = v8[72];
  *(_QWORD *)(v14 + 56) = a4;
  *(_BYTE *)(v14 + 64) = v7;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v12, v11, a3);
  *(_QWORD *)(v14 + v13) = v4;
  swift_retain();
  return sub_23AF5BF70;
}

uint64_t sub_23AF56C78(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  uint64_t (*v18)@<X0>(uint64_t *@<X8>);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v16 = (uint64_t (*)())0xE000000000000000;
  sub_23B1C6EFC();
  v22 = 0;
  v23 = 0xE000000000000000;
  sub_23B1C64F4();
  v18 = (uint64_t (*)@<X0>(uint64_t *@<X8>))MEMORY[0x24BEE1768];
  v15 = a2 & 1;
  sub_23AA94C90((uint64_t)&v15);
  v12 = v11;
  sub_23AA8A05C((uint64_t)&v15, qword_2542E5640);
  if (v12)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 + 40) + 32))(a1, a5);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v13 = *(_QWORD *)(a4 + 96);
    v20 = 40;
    v21 = 0xE100000000000000;
    v15 = v13;
    v16 = (uint64_t (*)())sub_23AF5BA6C;
    v17 = 0;
    v18 = sub_23AF5BA84;
    v19 = 0;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE7A0);
    sub_23AAB5A28(&qword_2542E2040, (uint64_t *)&unk_2542DE7A0, MEMORY[0x24BEE2B40]);
    sub_23AAA420C();
    sub_23B1C6644();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    if (qword_2542E5078 != -1)
      swift_once();
    v20 = 40;
    v21 = 0xE100000000000000;
    v15 = qword_2542EDE28;
    v16 = sub_23AAB6448;
    v17 = 0;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5540);
    sub_23AAB5A28(&qword_2542E75B0, (uint64_t *)&unk_2542E5540, MEMORY[0x24BEE2B40]);
    sub_23B1C6644();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v15 = 3;
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v15 = 8;
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v15 = 1;
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    return v22;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF570E8(uint64_t a1)
{
  return sub_23AF5725C(a1, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_23AF56700, (uint64_t)sub_23AF5BFEC) & 1;
}

uint64_t sub_23AF57110(uint64_t a1)
{
  return sub_23AF57160(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23AF56700, (uint64_t)sub_23AF5BFEC) & 1;
}

uint64_t sub_23AF57138(uint64_t a1)
{
  return sub_23AF57160(a1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_23AF56B74, (uint64_t)sub_23AF5BF70) & 1;
}

uint64_t sub_23AF57160(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  char v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  a2(1, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  v9 = sub_23AF522E4(a3, v8);
  swift_release();
  return v9 & 1;
}

uint64_t sub_23AF57234(uint64_t a1)
{
  return sub_23AF5725C(a1, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_23AF56B74, (uint64_t)sub_23AF5BF70) & 1;
}

uint64_t sub_23AF5725C(uint64_t a1, void (*a2)(_QWORD, uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  char v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  a2(0, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  v9 = sub_23AF522E4(a3, v8);
  swift_release();
  return v9 & 1;
}

uint64_t sub_23AF57330(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_23AF56700(0, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  v6 = sub_23AF525CC((uint64_t)sub_23AF5BFEC, v5);
  if (v1)
    return swift_release();
  v8 = v6;
  swift_release();
  if (v8)
    type metadata accessor for Propagation.PropagationJob();
  return 0;
}

uint64_t sub_23AF57448(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_23AF56700(1, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  v6 = sub_23AF52650((uint64_t)sub_23AF5BFEC, v5);
  if (v1)
    return swift_release();
  v8 = v6;
  swift_release();
  if (v8)
    type metadata accessor for Propagation.PropagationJob();
  return 0;
}

uint64_t sub_23AF57560(uint64_t a1, char a2)
{
  return sub_23ABF10D8(a2) & 1;
}

uint64_t sub_23AF57598()
{
  return sub_23ABF1540() & 1;
}

uint64_t sub_23AF575D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v3 = v1;
  v18[1] = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = sub_23B1C6C98();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v18 - v9;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)v18 - v12;
  result = swift_weakLoadStrong();
  if (result)
  {
    v15 = *(_QWORD *)(result + 16);
    swift_retain();
    swift_release();
    v16 = a1;
    v17 = v15;
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 152))(v16);
    swift_release();
    if (!v2)
    {
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        return 0;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, AssociatedTypeWitness);
        v17 = sub_23B1BC608((uint64_t)v13);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
      }
    }
    return v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23AF577A0()
{
  type metadata accessor for ItemJob();
}

void sub_23AF577F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;

  swift_getMetatypeMetadata();
  sub_23B1C67DC();
  sub_23B1C6C98();
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1EE0);
  sub_23B0C6934((void (*)(char *, char *))sub_23AF5BDF4, (uint64_t)&a9, MEMORY[0x24BEE4078], v15, v16, (uint64_t)&a15);
  sub_23AAB97C0();
}

uint64_t sub_23AF5786C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void sub_23AF5789C()
{
  type metadata accessor for ItemJob();
}

uint64_t sub_23AF578DC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  swift_getMetatypeMetadata();
  v1 = sub_23B1C67DC();
  v2 = MEMORY[0x23B8613CC](MEMORY[0x24BEE12E0], v1);
  result = sub_23AD7E264((void (*)(char *, char *))sub_23AABB7E8, (uint64_t)&v5, v1, (uint64_t)&type metadata for JobCode, MEMORY[0x24BEE4078], v2, MEMORY[0x24BEE40A8], v3);
  *v0 = result;
  return result;
}

void sub_23AF57950()
{
  sub_23AA6FB08();
}

uint64_t sub_23AF5797C(int a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_23ABEC374(v2, a1, v1) & 1;
}

void sub_23AF579AC()
{
  sub_23AA6FB08();
}

uint64_t sub_23AF579D8(int a1)
{
  uint64_t v1;
  uint64_t v2;

  return sub_23ABEC374(v2, a1, v1) & 1;
}

uint64_t sub_23AF57A08(int a1, uint64_t a2, unint64_t a3, int a4)
{
  swift_retain();
  LOBYTE(a4) = sub_23AB78AF8(a1, a2, a3, a4);
  swift_release();
  return a4 & 1;
}

uint64_t sub_23AF57A7C(int a1, uint64_t a2, unint64_t a3, int a4)
{
  swift_retain();
  LOBYTE(a4) = sub_23AB78AF8(a1, a2, a3, a4);
  swift_release();
  return a4 & 1;
}

void sub_23AF57AF0(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = sub_23B1C6C98();
  v3 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v8 - v4;
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v8 = a1;
  v7((char *)&v8 - v4, a1, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v5, 0, 1, AssociatedTypeWitness);
  swift_retain();
  sub_23AB6FDF4(5);
}

void sub_23AF57CB0(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = sub_23B1C6C98();
  v3 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v8 - v4;
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v8 = a1;
  v7((char *)&v8 - v4, a1, AssociatedTypeWitness);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v5, 0, 1, AssociatedTypeWitness);
  swift_retain();
  sub_23AB6FDF4(5);
}

uint64_t sub_23AF57E70(uint64_t a1)
{
  return sub_23AF57EA8(a1, (void (*)(uint64_t))sub_23AB795F4);
}

uint64_t sub_23AF57E8C(uint64_t a1)
{
  return sub_23AF57EA8(a1, (void (*)(uint64_t))sub_23AB7942C);
}

uint64_t sub_23AF57EA8(uint64_t a1, void (*a2)(uint64_t))
{
  swift_retain();
  a2(a1);
  return swift_release();
}

void sub_23AF57EF8(char *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;

  v7 = sub_23B1C5BDC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    sub_23B1C5BD0();
    sub_23B1C5B94();
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v13 = v12 * 1000000000.0;
    if ((~COERCE__INT64(v12 * 1000000000.0) & 0x7FF0000000000000) != 0)
    {
      if (v13 > -9.22337204e18)
      {
        if (v13 < 9.22337204e18)
        {
          sub_23B1B6F30(a1, a3, (uint64_t)v13);
          if (v3)
            return;
          goto LABEL_6;
        }
LABEL_11:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_6:
  if (a2)
    sub_23B1B8340((uint64_t)a1, a2);
}

void sub_23AF58040()
{
  sub_23B1C704C();
  __break(1u);
}

uint64_t sub_23AF58098()
{
  uint64_t v0;
  char v1;

  swift_retain();
  v1 = sub_23AB74E1C();
  swift_release();
  if (!v0)
  {
    if ((v1 & 1) != 0)
    {
      v1 = 1;
    }
    else
    {
      swift_retain();
      v1 = sub_23AB74E1C();
      swift_release();
    }
  }
  return v1 & 1;
}

uint64_t sub_23AF58130()
{
  uint64_t v0;
  uint64_t result;

  swift_retain();
  sub_23AB74968();
  result = swift_release();
  if (!v0)
  {
    swift_retain();
    sub_23AB74968();
    return swift_release();
  }
  return result;
}

uint64_t sub_23AF581A0()
{
  swift_retain();
  sub_23AB6FF5C();
  swift_release();
  swift_retain();
  sub_23AB6FF5C();
  return swift_release();
}

void sub_23AF581F0()
{
  type metadata accessor for FSOrFPJob();
}

uint64_t sub_23AF58244(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  *(_QWORD *)(v5 - 72) = sub_23B1C6758();
  v13 = 0;
  v14 = 1;
  v10 = v4;
  v11 = v3 & 1;
  v12 = 100;
  sub_23AF51FF4((uint64_t)sub_23ABF6CA4, (uint64_t)&v9);
  if (!v1)
  {
    v2 = *(_QWORD *)(v5 - 72);
    v7 = swift_bridgeObjectRetain();
    MEMORY[0x23B85F0B0](v7, a1);
  }
  swift_bridgeObjectRelease();
  return v2;
}

void sub_23AF58328()
{
  swift_retain();
  type metadata accessor for FSOrFPJob();
}

uint64_t sub_23AF58384()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  _QWORD v5[16];

  sub_23B1C67DC();
  sub_23B1C67AC();
  sub_23AF1E3F4(v1, (uint64_t)v5);
  if (!v5[3])
  {
    sub_23AA8A05C((uint64_t)v5, &qword_2542E16F0);
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E16E0);
  if (!swift_dynamicCast())
  {
LABEL_5:
    v3 = 0;
    v2 = 1;
    goto LABEL_6;
  }
  v2 = 0;
  v3 = v5[5];
LABEL_6:
  *(_QWORD *)v0 = v3;
  *(_BYTE *)(v0 + 8) = v2;
  return 1;
}

void sub_23AF5843C()
{
  sub_23ABEDFF4();
}

uint64_t sub_23AF58454@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if (v1)
    return a1;
  return result;
}

void sub_23AF58470()
{
  sub_23ABEDFF4();
}

uint64_t sub_23AF58488@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if (v1)
    return a1;
  return result;
}

void sub_23AF584A4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    type metadata accessor for Job();
  type metadata accessor for Job();
}

void sub_23AF58560()
{
  char v0;

  sub_23B06B84C(v0);
  type metadata accessor for ItemJob();
}

void sub_23AF58584()
{
  if (swift_dynamicCastMetatype())
    JUMPOUT(0x23AF58598);
  JUMPOUT(0x23AF585B4);
}

uint64_t sub_23AF5874C(uint64_t a1, char a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v12[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v14 = 0;
  v15 = 0xE000000000000000;
  sub_23B1C64F4();
  v12[0] = 2;
  v5 = MEMORY[0x24BEE1768];
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v6 = qword_23B1DF778[a2];
  v13 = v5;
  v12[0] = v6;
  sub_23AA94C90((uint64_t)v12);
  v8 = v7;
  sub_23AA8A05C((uint64_t)v12, qword_2542E5640);
  if (!v8)
    goto LABEL_4;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v13 = v5;
  v12[0] = a3 & 1;
  sub_23AA94C90((uint64_t)v12);
  v10 = v9;
  sub_23AA8A05C((uint64_t)v12, qword_2542E5640);
  if (v10)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v14;
  }
  else
  {
LABEL_4:
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF58948()
{
  return sub_23ABF33F8() & 1;
}

uint64_t sub_23AF5896C()
{
  uint64_t v0;
  char v1;

  v1 = sub_23ABF3924();
  if (!v0)
  {
    if ((v1 & 1) != 0)
      v1 = 1;
    else
      v1 = sub_23ABF3924();
  }
  return v1 & 1;
}

_QWORD *sub_23AF589B4()
{
  return sub_23ABEE42C();
}

_QWORD *sub_23AF589D8(uint64_t a1)
{
  return sub_23ABEE814(a1);
}

void sub_23AF589FC(uint64_t a1, uint64_t a2)
{
  sub_23ABEF3B8(a1, a2);
}

uint64_t sub_23AF58A20()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *v0;
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_23AFDB428();
    swift_retain();
    v3 = swift_release();
    sub_23ABD4850(v3, v4, v5, v6);
    swift_release();
    v39 = v41;
    v40 = v42;
    v8 = type metadata accessor for JobLockRule(255, v1[69], v1[71], v7);
    MEMORY[0x23B8613CC](&unk_23B1D15E8, v8);
    v9 = sub_23B1C6260();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542E1EC8);
    MEMORY[0x23B8613CC](MEMORY[0x24BEE03C0], v9);
    v10 = sub_23B1C7010();
    MEMORY[0x23B8613CC](MEMORY[0x24BEE2B40], v10);
    sub_23AAB5A28((unint64_t *)&qword_2542E1ED0, &qword_2542E1EC8, MEMORY[0x24BEE12C8]);
    v11 = sub_23B1C7004();
    MEMORY[0x23B8613CC](MEMORY[0x24BEE2AC8], v11);
    v12 = sub_23B1C6F20();
    v43 = MEMORY[0x23B8613CC](MEMORY[0x24BEE03C8], v9);
    v13 = MEMORY[0x23B8613CC](MEMORY[0x24BEE2B50], v10, &v43);
    v14 = sub_23AAB5A28(&qword_2542E1ED8, &qword_2542E1EC8, MEMORY[0x24BEE12E0]);
    v38[0] = v13;
    v38[1] = v14;
    v37 = MEMORY[0x23B8613CC](MEMORY[0x24BEE2AD0], v11, v38);
    v15 = MEMORY[0x23B8613CC](MEMORY[0x24BEE25A8], v12, &v37);
    v33 = sub_23AD7E264((void (*)(char *, char *))sub_23AF58EBC, 0, v12, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v15, MEMORY[0x24BEE40A8], v16);
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_weakLoadStrong();
    if (result)
    {
      sub_23AFDB430();
      swift_retain();
      v17 = swift_release();
      sub_23ABD4850(v17, v18, v19, v20);
      swift_release();
      v39 = v41;
      v40 = v42;
      v22 = type metadata accessor for JobLockRule(255, v1[70], v1[72], v21);
      MEMORY[0x23B8613CC](&unk_23B1D15E8, v22);
      v23 = sub_23B1C6260();
      MEMORY[0x23B8613CC](MEMORY[0x24BEE03C0], v23);
      v24 = sub_23B1C7010();
      MEMORY[0x23B8613CC](MEMORY[0x24BEE2B40], v24);
      v25 = sub_23B1C7004();
      MEMORY[0x23B8613CC](MEMORY[0x24BEE2AC8], v25);
      v26 = sub_23B1C6F20();
      v36 = MEMORY[0x23B8613CC](MEMORY[0x24BEE03C8], v23);
      v35[0] = MEMORY[0x23B8613CC](MEMORY[0x24BEE2B50], v24, &v36);
      v35[1] = v14;
      v34 = MEMORY[0x23B8613CC](MEMORY[0x24BEE2AD0], v25, v35);
      v27 = MEMORY[0x23B8613CC](MEMORY[0x24BEE25A8], v26, &v34);
      v29 = sub_23AD7E264((void (*)(char *, char *))sub_23AF58EBC, 0, v26, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v27, MEMORY[0x24BEE40A8], v28);
      swift_bridgeObjectRelease();
      swift_release();
      *(_QWORD *)&v41 = v33;
      sub_23AD7E108(v29);
      sub_23ABE4E64(v41);
      v30 = swift_bridgeObjectRelease();
      v31 = MEMORY[0x24BDAC7A8](v30);
      MEMORY[0x24BDAC7A8](v31);
      sub_23AF51FF4((uint64_t)sub_23AF5BF44, v32);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23AF58EBC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23ABF5A50(a1, a2);
}

uint64_t sub_23AF58ED0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[4];
  uint64_t v7;
  unint64_t v8;

  v6[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v7 = 0;
  v8 = 0xE000000000000000;
  sub_23B1C64F4();
  v6[3] = MEMORY[0x24BEE1768];
  v6[0] = a2 & 1;
  sub_23AA94C90((uint64_t)v6);
  v4 = v3;
  sub_23AA8A05C((uint64_t)v6, qword_2542E5640);
  if (v4)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    return v7;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23AF59000(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v7 = *(_QWORD *)(*(_QWORD *)a3 + 552);
  v8 = *(_QWORD *)(*(_QWORD *)a3 + 560);
  v18 = *(_QWORD *)(*(_QWORD *)a3 + 568);
  v17 = *(_QWORD *)(*(_QWORD *)a3 + 576);
  sub_23AF1E3F4(a1, (uint64_t)&v19);
  v9 = v22;
  if (v22)
  {
    v10 = v23;
    __swift_project_boxed_opaque_existential_1(&v19, v22);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
    v13 = v12;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
    sub_23AA7E798(v11, v13, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23AA8A05C((uint64_t)&v19, &qword_2542E16F0);
  }
  result = swift_weakLoadStrong();
  if (result)
  {
    v15 = sub_23AFB6588(a1);
    swift_release();
    __swift_project_boxed_opaque_existential_1(a4, a4[3]);
    sub_23B1C64F4();
    if (v15 < 0)
    {
      v24 = v15 & 0x7FFFFFFFFFFFFFFFLL;
      v19 = v8;
      v20 = v7;
      v21 = v17;
      v16 = v18;
    }
    else
    {
      v24 = v15;
      v19 = v7;
      v20 = v8;
      v21 = v18;
      v16 = v17;
    }
    v22 = v16;
    type metadata accessor for Job();
  }
  __break(1u);
  return result;
}

uint64_t sub_23AF59270(char a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  char v31;

  v3 = v2;
  result = swift_weakLoadStrong();
  v7 = MEMORY[0x24BEE4AE0];
  if ((a1 & 1) != 0)
  {
    if (result)
    {
      sub_23AFDB430();
      swift_retain();
      swift_release();
      v17 = sub_23AAB79AC();
      swift_release();
      if ((v17 & 1) == 0)
      {
        v18 = a2[3];
        v19 = a2[4];
        __swift_project_boxed_opaque_existential_1(a2, v18);
        sub_23AEBD130(0xD000000000000018, 0x800000023B20FDD0, v18, v19);
        v20 = a2[3];
        v21 = a2[4];
        __swift_project_boxed_opaque_existential_1(a2, v20);
        sub_23AEBD1D4(8224, 0xE200000000000000, (void (*)(_QWORD *))sub_23AF5BD10, v3, v20, v7 + 8, v21);
      }
      goto LABEL_9;
    }
  }
  else
  {
    if (result)
    {
      sub_23AFDB428();
      swift_retain();
      swift_release();
      v8 = sub_23AAB79AC();
      swift_release();
      if ((v8 & 1) == 0)
      {
        v9 = a2[3];
        v10 = a2[4];
        __swift_project_boxed_opaque_existential_1(a2, v9);
        sub_23AEBD130(0xD000000000000018, 0x800000023B20FDD0, v9, v10);
        v11 = a2[3];
        v12 = a2[4];
        __swift_project_boxed_opaque_existential_1(a2, v11);
        sub_23AEBD1D4(8224, 0xE200000000000000, (void (*)(_QWORD *))sub_23AF5BD5C, v3, v11, v7 + 8, v12);
      }
      v13 = a2[3];
      v14 = a2[4];
      __swift_project_boxed_opaque_existential_1(a2, v13);
      sub_23AEBD130(0x72676B636162202BLL, 0xEC000000646E756FLL, v13, v14);
      v15 = a2[3];
      v16 = a2[4];
      __swift_project_boxed_opaque_existential_1(a2, v15);
      sub_23AEBD1D4(8224, 0xE200000000000000, sub_23AF5BD7C, v3, v15, v7 + 8, v16);
LABEL_9:
      v22 = a1 & 1;
      swift_retain();
      sub_23AB797B4(a2);
      swift_release();
      v23 = a2[3];
      v24 = a2[4];
      __swift_project_boxed_opaque_existential_1(a2, v23);
      sub_23AEBD130(0xD000000000000012, 0x800000023B20FDF0, v23, v24);
      v25 = a2[3];
      v26 = a2[4];
      v27 = __swift_project_boxed_opaque_existential_1(a2, v25);
      MEMORY[0x24BDAC7A8](v27);
      v30[2] = v3;
      v31 = v22;
      sub_23AEBD1D4(8224, 0xE200000000000000, (void (*)(_QWORD *))sub_23AF5BD30, (uint64_t)v30, v25, v7 + 8, v26);
      v28 = a2[3];
      v29 = a2[4];
      __swift_project_boxed_opaque_existential_1(a2, v28);
      sub_23AEBD130(0x6A206D657469202BLL, 0xEB0000000073626FLL, v28, v29);
      return sub_23ABF5778((uint64_t)a2);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23AF5967C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    a3();
    swift_retain();
    swift_release();
    sub_23ABD4C58();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23AF596EC(uint64_t a1, char a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  __int128 *v9;
  _BYTE v10[16];
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v9 = (__int128 *)(*v7 + 552);
  v20 = 0;
  v19 = a2 & 1 ^ (a3 < 3u);
  v11 = *v9;
  v12 = a6;
  v13 = v9[1];
  v14 = a7;
  v15 = &v19;
  v16 = a4;
  v17 = a3;
  v18 = a5;
  sub_23AF51FF4((uint64_t)sub_23AF5BEE0, (uint64_t)v10);
  if (!v8 && v20 >= 1)
  {
    if (swift_weakLoadStrong())
    {
      sub_23AFB0B90();
      swift_release();
    }
  }
}

uint64_t sub_23AF597C8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v26[0] = 0;
  v26[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v28 = 0;
  v29 = 0xE000000000000000;
  sub_23B1C64F4();
  v15 = *a2;
  v16 = MEMORY[0x24BEE1768];
  v27 = MEMORY[0x24BEE1768];
  v26[0] = v15;
  sub_23AA94C90((uint64_t)v26);
  v18 = v17;
  sub_23AA8A05C((uint64_t)v26, qword_2542E5640);
  if (!v18)
    goto LABEL_5;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a11 + 40) + 32))(a1, a8);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v19 = qword_23B1DF778[a4];
  v27 = v16;
  v26[0] = v19;
  sub_23AA94C90((uint64_t)v26);
  v21 = v20;
  sub_23AA8A05C((uint64_t)v26, qword_2542E5640);
  if (!v21)
    goto LABEL_5;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v26[0] = 0;
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v27 = v16;
  v26[0] = a5;
  sub_23AA94C90((uint64_t)v26);
  v23 = v22;
  sub_23AA8A05C((uint64_t)v26, qword_2542E5640);
  if (v23)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v28;
  }
  else
  {
LABEL_5:
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

void sub_23AF59A7C()
{
  type metadata accessor for PersistenceTrigger();
}

void sub_23AF59AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v14 = sub_23B1C6C98();
  MEMORY[0x24BDAC7A8](v14);
  *(_QWORD *)(v13 - 176) = (char *)&a9 - v15;
  *(_QWORD *)(v13 - 136) = v11;
  *(_QWORD *)(v13 - 128) = v9;
  *(_QWORD *)(v13 - 112) = v11;
  *(_QWORD *)(v13 - 104) = v9;
  *(_QWORD *)(v13 - 144) = v12;
  *(_QWORD *)(v13 - 96) = v12;
  *(_QWORD *)(v13 - 88) = v10;
  *(_QWORD *)(v13 - 72) = v10;
  type metadata accessor for PersistenceTrigger();
}

void sub_23AF59B38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23B1C6C98();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v12 - v7;
  *(_QWORD *)(v4 - 168) = v3;
  if ((v3 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a1 - 8);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 16))(v8, *(_QWORD *)(v4 - 120), a1);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v8, 0, 1, a1);
    if (swift_weakLoadStrong())
    {
      v10 = *(_QWORD *)(v4 - 128);
      *(_QWORD *)(v4 - 112) = *(_QWORD *)(v4 - 136);
      *(_QWORD *)(v4 - 104) = v10;
      v11 = *(_QWORD *)(v4 - 72);
      *(_QWORD *)(v4 - 96) = *(_QWORD *)(v4 - 144);
      *(_QWORD *)(v4 - 88) = v11;
      type metadata accessor for JobRegistry();
    }
    __break(1u);
    JUMPOUT(0x23AF5A3B4);
  }
  *(_QWORD *)(v4 - 208) = v2;
  *(_QWORD *)(v4 - 200) = v1;
  swift_retain();
  sub_23ABBE23C();
}

void sub_23AF5A3E0()
{
  type metadata accessor for PersistenceTrigger();
}

void sub_23AF5A448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v13 - 192) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v13 - 184) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v13 - 168) = (char *)&a9 - v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v13 - 208) = *(_QWORD *)(AssociatedTypeWitness - 8);
  *(_QWORD *)(v13 - 200) = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  *(_QWORD *)(v13 - 216) = (char *)&a9 - v16;
  v17 = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v13 - 232) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v13 - 224) = v17;
  MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)(v13 - 240) = (char *)&a9 - v18;
  *(_QWORD *)(v13 - 136) = v9;
  *(_QWORD *)(v13 - 128) = v11;
  *(_QWORD *)(v13 - 120) = v10;
  *(_QWORD *)(v13 - 112) = v12;
  type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
}

void sub_23AF5A52C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_getTupleTypeMetadata2();
  v5 = sub_23B1C6C98();
  MEMORY[0x24BDAC7A8](v5);
  *(_QWORD *)(v4 - 136) = v0;
  *(_QWORD *)(v4 - 128) = v2;
  *(_QWORD *)(v4 - 120) = v1;
  *(_QWORD *)(v4 - 112) = v3;
  type metadata accessor for PersistenceTrigger();
}

void sub_23AF5A598(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 176) = a1;
  *(_QWORD *)(v3 - 160) = v1;
  sub_23ABC7F10(a1, v2);
}

uint64_t sub_23AF5A5AC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int EnumCaseMultiPayload;
  unsigned __int8 v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  unsigned __int8 v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned int v25;
  id v26;
  char isEscapingClosureAtFileLocation;
  void *v28;
  unsigned int v29;
  id v30;

  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 48))(v1, 1, v0) == 1)
    goto LABEL_2;
  v3 = *v1;
  v4 = (unsigned __int8 *)v1 + *(int *)(v0 + 48);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v6 = *v4;
      v7 = *(_QWORD *)(v2 - 200);
      v8 = &v4[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      v10 = *(_QWORD *)(v2 - 216);
      v9 = *(_QWORD *)(v2 - 208);
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v9 + 32))(v10, v8, v7);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v12 = *(_QWORD *)(v2 - 152);
      sub_23AF596EC(*(_QWORD *)(v2 - 160), 1, v6, v10, v3, v7, AssociatedConformanceWitness);
      if (!v12)
      {
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v7);
        goto LABEL_2;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v7);
    }
    v21 = *(void **)(*(_QWORD *)(v2 - 144) + 16);
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = v3;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = sub_23AEB1604;
    *(_QWORD *)(v23 + 24) = v22;
    *(_QWORD *)(v2 - 104) = sub_23AA698D4;
    *(_QWORD *)(v2 - 96) = v23;
    *(_QWORD *)(v2 - 136) = MEMORY[0x24BDAC760];
    *(_QWORD *)(v2 - 128) = 1107296256;
    *(_QWORD *)(v2 - 120) = sub_23AA9432C;
    *(_QWORD *)(v2 - 112) = &block_descriptor_24_0;
    v24 = _Block_copy((const void *)(v2 - 136));
    swift_retain();
    swift_release();
    *(_QWORD *)(v2 - 136) = 0;
    v25 = objc_msgSend(v21, sel_executeSwift_error_, v24, v2 - 136);
    _Block_release(v24);
    v26 = *(id *)(v2 - 136);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      if (!v25)
      {
        sub_23B1C587C();

LABEL_23:
        swift_willThrow();
        return swift_release();
      }
      if (!objc_msgSend(v21, sel_changes))
        goto LABEL_2;
      *(_QWORD *)(v2 - 104) = sub_23ADFA244;
      *(_QWORD *)(v2 - 96) = 0;
      *(_QWORD *)(v2 - 136) = MEMORY[0x24BDAC760];
      *(_QWORD *)(v2 - 128) = 1107296256;
      *(_QWORD *)(v2 - 120) = sub_23AA9432C;
      *(_QWORD *)(v2 - 112) = &block_descriptor_27_1;
      v28 = _Block_copy((const void *)(v2 - 136));
      swift_release();
      *(_QWORD *)(v2 - 136) = 0;
      v29 = objc_msgSend(v21, sel_executeSwift_error_, v28, v2 - 136);
      _Block_release(v28);
      v30 = *(id *)(v2 - 136);
      if ((swift_isEscapingClosureAtFileLocation() & 1) == 0)
      {
        if (v29)
        {
          if (objc_msgSend(v21, sel_changes))
          {
            if (swift_weakLoadStrong())
            {
              sub_23AFB0B90();
              swift_release();
            }
          }
LABEL_2:
          sub_23ABF2104();
        }
        sub_23B1C587C();

        goto LABEL_23;
      }
    }
    __break(1u);
  }
  v14 = *v4;
  v15 = *(_QWORD *)(v2 - 224);
  v16 = &v4[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  v18 = *(_QWORD *)(v2 - 240);
  v17 = *(_QWORD *)(v2 - 232);
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v17 + 32))(v18, v16, v15);
  v19 = swift_getAssociatedConformanceWitness();
  v20 = *(_QWORD *)(v2 - 152);
  sub_23AF596EC(*(_QWORD *)(v2 - 160), 0, v14, v18, v3, v15, v19);
  if (!v20)
  {
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v15);
    goto LABEL_2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v18, v15);
}

uint64_t sub_23AF5AAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v9[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v11 = 0;
  v12 = 0xE000000000000000;
  sub_23B1C64F4();
  v3 = MEMORY[0x24BEE1768];
  v10 = MEMORY[0x24BEE1768];
  v9[0] = a2;
  sub_23AA94C90((uint64_t)v9);
  v5 = v4;
  sub_23AA8A05C((uint64_t)v9, qword_2542E5640);
  if (!v5)
    goto LABEL_4;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v9[0] = 0;
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v10 = v3;
  v9[0] = a2;
  sub_23AA94C90((uint64_t)v9);
  v7 = v6;
  sub_23AA8A05C((uint64_t)v9, qword_2542E5640);
  if (v7)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v11;
  }
  else
  {
LABEL_4:
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

void sub_23AF5AC74()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  unsigned int v4;
  id v5;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  sub_23ABF2D58();
  if (!v1)
  {
    sub_23ABF2D58();
    sub_23B1B3EE8();
    sub_23AF51FF4((uint64_t)sub_23ABF2F1C, 0);
    v2 = *(void **)(v0 + 16);
    aBlock[4] = sub_23AF51DDC;
    aBlock[5] = 0;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_18_0;
    v3 = _Block_copy(aBlock);
    swift_release();
    aBlock[0] = 0;
    v4 = objc_msgSend(v2, sel_executeSwift_error_, v3, aBlock);
    _Block_release(v3);
    v5 = aBlock[0];
    if ((swift_isEscapingClosureAtFileLocation() & 1) != 0)
      __break(1u);
    if (!v4)
    {
      sub_23B1C587C();

      swift_willThrow();
    }
  }
}

void sub_23AF5ADFC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  _QWORD v28[6];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v32 = a2;
  v4 = *a2;
  v5 = sub_23B1C5BDC();
  v31 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23B1C5E4C();
  v29 = *(_QWORD *)(v8 - 8);
  v30 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  swift_retain();
  v12 = sub_23B1C5E40();
  v13 = sub_23B1C6A88();
  v14 = os_log_type_enabled(v12, v13);
  v28[5] = v4;
  if (v14)
  {
    v15 = swift_slowAlloc();
    v28[4] = v5;
    v16 = (_DWORD *)v15;
    v17 = swift_slowAlloc();
    v28[3] = v7;
    v28[2] = v2;
    *v16 = 136446210;
    v33 = v17;
    v28[1] = v16 + 1;
    sub_23AF1E6D4();
  }

  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v30);
  sub_23AB7BFCC();
  v18 = swift_allocError();
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_BYTE *)(v19 + 16) = -1;
  if (a1 < 0)
  {
    v21 = *(void **)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 0x58);
    v20 = *(void **)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 0x60);
    *(_QWORD *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 0x58) = v18;
    *(_QWORD *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 0x60) = 0;
    v22 = *(_BYTE *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 0x68);
    *(_BYTE *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 0x68) = 3;
  }
  else
  {
    v21 = *(void **)(a1 + 88);
    v20 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 88) = v18;
    *(_QWORD *)(a1 + 96) = 0;
    v22 = *(_BYTE *)(a1 + 104);
    *(_BYTE *)(a1 + 104) = 3;
  }
  sub_23AAAEE10(v21, v20, v22);
  swift_retain();
  sub_23B1C5BD0();
  sub_23B1C5B94();
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v5);
  v27 = v24 * 1000000000.0;
  if ((~COERCE__INT64(v24 * 1000000000.0) & 0x7FF0000000000000) != 0)
  {
    if (v27 > -9.22337204e18)
    {
      if (v27 < 9.22337204e18)
        sub_23AB777F4(a1, (uint64_t)v27, v25, v26);
LABEL_12:
      __break(1u);
      JUMPOUT(0x23AF5B238);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  goto LABEL_12;
}

uint64_t sub_23AF5B244()
{
  sub_23ABF33D8();
  sub_23ABF33D8();
  return sub_23B1B48D4();
}

void sub_23AF5B278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  id v4;
  char v5;
  uint64_t v6;

  v0 = sub_23B1C60EC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (uint64_t *)((char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (swift_weakLoadStrong())
  {
    v4 = (id)sub_23AFD7BC0();
    swift_release();
    *v3 = v4;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE5610], v0);
    v5 = sub_23B1C6104();
    (*(void (**)(_QWORD *, uint64_t))(v1 + 8))(v3, v0);
    if ((v5 & 1) != 0)
    {
      sub_23B1B4E3C();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_23AF5B368()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AF5B3BC()
{
  uint64_t v0;

  v0 = sub_23ABD8C28();

  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23AF5B428()
{
  sub_23AF5B3BC();
  return swift_deallocClassInstance();
}

void type metadata accessor for SQLJobRegistry()
{
  JUMPOUT(0x23B861318);
}

void sub_23AF5B450()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E2138);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_23B1D3B90;
  type metadata accessor for SQLItemJobRegistry();
}

void sub_23AF5B4C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[7] = a1;
  v1[8] = &off_250BE5580;
  v1[4] = v2;
  type metadata accessor for SQLItemJobRegistry();
}

void sub_23AF5B4EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[12] = a1;
  v1[13] = v3;
  v1[9] = v2;
  type metadata accessor for SQLBackgroundDownloader();
}

_QWORD *sub_23AF5B50C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[17] = a1;
  v1[18] = &off_250C1C040;
  v1[14] = v2;
  swift_retain();
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t sub_23AF5B558()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  unsigned int v4;
  id v5;
  void *v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  id v14;
  uint64_t result;
  id aBlock;
  uint64_t v17;
  id (*v18)(uint64_t, void *);
  void *v19;
  unint64_t (*v20)();
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 16);
  v20 = sub_23AF51D34;
  v21 = 0;
  v2 = (void *)MEMORY[0x24BDAC760];
  aBlock = (id)MEMORY[0x24BDAC760];
  v17 = 1107296256;
  v18 = sub_23AA9432C;
  v19 = &block_descriptor_3_1;
  v3 = _Block_copy(&aBlock);
  swift_release();
  aBlock = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, &aBlock);
  _Block_release(v3);
  v5 = aBlock;
  if ((swift_isEscapingClosureAtFileLocation() & 1) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (!v4)
  {
LABEL_12:
    sub_23B1C587C();

    return swift_willThrow();
  }
  v20 = sub_23AF51D50;
  v21 = 0;
  aBlock = v2;
  v17 = 1107296256;
  v18 = sub_23AA9432C;
  v19 = &block_descriptor_6;
  v6 = _Block_copy(&aBlock);
  swift_release();
  aBlock = 0;
  v7 = objc_msgSend(v1, sel_executeSwift_error_, v6, &aBlock);
  _Block_release(v6);
  v5 = aBlock;
  if ((swift_isEscapingClosureAtFileLocation() & 1) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v7)
    goto LABEL_12;
  v20 = sub_23AF51D6C;
  v21 = 0;
  aBlock = v2;
  v17 = 1107296256;
  v18 = sub_23AA9432C;
  v19 = &block_descriptor_9_1;
  v8 = _Block_copy(&aBlock);
  swift_release();
  aBlock = 0;
  v9 = objc_msgSend(v1, sel_executeSwift_error_, v8, &aBlock);
  _Block_release(v8);
  v5 = aBlock;
  if ((swift_isEscapingClosureAtFileLocation() & 1) != 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (!v9)
    goto LABEL_12;
  v20 = sub_23AF51D88;
  v21 = 0;
  aBlock = v2;
  v17 = 1107296256;
  v18 = sub_23AA9432C;
  v19 = &block_descriptor_12_1;
  v10 = _Block_copy(&aBlock);
  swift_release();
  aBlock = 0;
  v11 = objc_msgSend(v1, sel_executeSwift_error_, v10, &aBlock);
  _Block_release(v10);
  v5 = aBlock;
  if ((swift_isEscapingClosureAtFileLocation() & 1) != 0)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  if (!v11)
    goto LABEL_12;
  v20 = sub_23AF51DA4;
  v21 = 0;
  aBlock = v2;
  v17 = 1107296256;
  v18 = sub_23AA9432C;
  v19 = &block_descriptor_15_0;
  v12 = _Block_copy(&aBlock);
  swift_release();
  aBlock = 0;
  v13 = objc_msgSend(v1, sel_executeSwift_error_, v12, &aBlock);
  _Block_release(v12);
  v14 = aBlock;
  result = swift_isEscapingClosureAtFileLocation();
  if ((result & 1) != 0)
    goto LABEL_19;
  if (v13)
    return result;
  sub_23B1C587C();

  return swift_willThrow();
}

uint64_t sub_23AF5B8E8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  unsigned int v3;
  id v4;
  uint64_t result;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 16);
  aBlock[4] = sub_23AF51DC0;
  aBlock[5] = 0;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_24;
  v2 = _Block_copy(aBlock);
  swift_release();
  aBlock[0] = 0;
  v3 = objc_msgSend(v1, sel_executeSwift_error_, v2, aBlock);
  _Block_release(v2);
  v4 = aBlock[0];
  result = swift_isEscapingClosureAtFileLocation();
  if ((result & 1) != 0)
    __break(1u);
  if (!v3)
  {
    sub_23B1C587C();

    return swift_willThrow();
  }
  return result;
}

void sub_23AF5BA0C()
{
  sub_23AF5B450();
}

uint64_t sub_23AF5BA2C()
{
  return sub_23AF5B558();
}

uint64_t sub_23AF5BA4C()
{
  return sub_23AF5B8E8();
}

char *sub_23AF5BA6C@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = qword_23B1DF778[*result];
  return result;
}

uint64_t sub_23AF5BA84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_23B1C7304();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23AF5BACC()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AF5BBE0(uint64_t a1)
{
  _QWORD *v1;
  char v2;

  sub_23AF5ADFC(a1, v1);
  return v2 & 1;
}

uint64_t sub_23AF5BBFC()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AF5BCF0()
{
  return swift_deallocObject();
}

uint64_t sub_23AF5BD00()
{
  return swift_deallocObject();
}

uint64_t sub_23AF5BD10(uint64_t a1)
{
  uint64_t v1;

  return sub_23AF5967C(a1, v1, (void (*)(void))sub_23AFDB430);
}

uint64_t sub_23AF5BD30()
{
  return sub_23AF58A20();
}

uint64_t sub_23AF5BD5C(uint64_t a1)
{
  uint64_t v1;

  return sub_23AF5967C(a1, v1, (void (*)(void))sub_23AFDB428);
}

void sub_23AF5BD7C(_QWORD *a1)
{
  sub_23B1BD114(a1);
}

uint64_t sub_23AF5BDA4()
{
  return swift_deallocObject();
}

uint64_t sub_23AF5BDB4(uint64_t a1)
{
  uint64_t v1;

  return sub_23AF5874C(a1, *(_BYTE *)(v1 + 16), *(_BYTE *)(v1 + 17));
}

uint64_t sub_23AF5BDC0()
{
  return swift_deallocObject();
}

void sub_23AF5BDD0()
{
  sub_23AF58328();
}

uint64_t sub_23AF5BDE8(char a1)
{
  return a1 & 1;
}

void sub_23AF5BDF4()
{
  sub_23AF5789C();
}

uint64_t sub_23AF5BE14()
{
  return sub_23AF563E4();
}

uint64_t sub_23AF5BE1C()
{
  return swift_deallocObject();
}

void sub_23AF5BE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_23AF5577C(a1, *(uint64_t **)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t sub_23AF5BE3C(char a1)
{
  return a1 & 1;
}

uint64_t sub_23AF5BE4C()
{
  return 32;
}

__n128 sub_23AF5BE58(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_23AF5BE64()
{
  return swift_getAtKeyPath();
}

void sub_23AF5BE8C()
{
  sub_23AF5608C();
}

unint64_t sub_23AF5BE9C()
{
  unint64_t result;

  result = qword_2569E7790;
  if (!qword_2569E7790)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DF73C, &type metadata for SQLVolatileJobID);
    atomic_store(result, (unint64_t *)&qword_2569E7790);
  }
  return result;
}

uint64_t sub_23AF5BEE0(uint64_t a1)
{
  uint64_t v1;

  return sub_23AF597C8(a1, *(unsigned __int8 **)(v1 + 64), *(_QWORD *)(v1 + 72), *(_BYTE *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

void sub_23AF5BF20()
{
  sub_23AF59A7C();
}

uint64_t sub_23AF5BF38(char a1)
{
  return a1 & 1;
}

uint64_t sub_23AF5BF44(uint64_t a1)
{
  uint64_t v1;

  return sub_23AF58ED0(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_23AF5BF4C(uint64_t a1)
{
  uint64_t v1;

  return sub_23AF59000(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32)) & 1;
}

uint64_t sub_23AF5BF70(uint64_t a1)
{
  return sub_23AF5BFF8(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))sub_23AF56C78);
}

uint64_t objectdestroy_46Tm_0()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80)));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AF5BFEC(uint64_t a1)
{
  return sub_23AF5BFF8(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD))sub_23AF56804);
}

uint64_t sub_23AF5BFF8(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 32) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 65) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return a2(a1, *(unsigned __int8 *)(v2 + 64), v2 + v4, *(_QWORD *)(v2 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23AF5C034(void *a1)
{
  uint64_t v1;

  return sub_23AF54690(a1, *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_23AF5C040(uint64_t a1)
{
  char v1;

  sub_23AF54928(a1);
  return v1 & 1;
}

uint64_t sub_23AF5C074()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_23AF5C09C(uint64_t a1)
{
  return sub_23AAFAA24(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AF5349C);
}

uint64_t sub_23AF5C0A8()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_55Tm()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AF5C0E4(uint64_t a1)
{
  return sub_23AAFAA24(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AF531A8);
}

uint64_t sub_23AF5C0F0()
{
  return swift_deallocObject();
}

uint64_t sub_23AF5C100()
{
  return swift_deallocObject();
}

uint64_t sub_23AF5C110()
{
  return swift_deallocObject();
}

uint64_t sub_23AF5C120()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23AF5C150(uint64_t a1)
{
  uint64_t v1;

  sub_23AF528DC(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23AF5C158()
{
  return swift_deallocObject();
}

uint64_t sub_23AF5C168(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = *(uint64_t **)(v1 + 48);
  v3 = *v2;
  *v2 = a1;
  swift_retain();
  sub_23AB22830(v3);
  return 0;
}

uint64_t sub_23AF5C1A8()
{
  return swift_deallocObject();
}

unint64_t sub_23AF5C1B8(uint64_t a1)
{
  uint64_t v1;

  return sub_23AF524A8(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_23AF5C1C0()
{
  return swift_deallocObject();
}

uint64_t sub_23AF5C1D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AF5C1F4()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for SQLVolatileJobID()
{
  return &type metadata for SQLVolatileJobID;
}

ValueMetadata *type metadata accessor for SQLJobID()
{
  return &type metadata for SQLJobID;
}

unint64_t sub_23AF5C224(uint64_t a1)
{
  unint64_t result;

  result = sub_23AF5C248();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23AF5C248()
{
  unint64_t result;

  result = qword_2569E77A0;
  if (!qword_2569E77A0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DF714, &type metadata for SQLVolatileJobID);
    atomic_store(result, (unint64_t *)&qword_2569E77A0);
  }
  return result;
}

unint64_t sub_23AF5C28C(uint64_t a1)
{
  unint64_t result;

  result = sub_23AF5C2B0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23AF5C2B0()
{
  unint64_t result;

  result = qword_2542E3560;
  if (!qword_2542E3560)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DF6EC, &type metadata for SQLJobID);
    atomic_store(result, (unint64_t *)&qword_2542E3560);
  }
  return result;
}

char *sub_23AF5C360(uint64_t a1, uint64_t a2)
{
  char *v4;

  v4 = (char *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 80) - 8) + 56))(&v4[*(_QWORD *)(*(_QWORD *)v4 + 96)], 1, 1);
  *((_QWORD *)v4 + 2) = a1;
  *((_QWORD *)v4 + 3) = a2;
  return v4;
}

uint64_t sub_23AF5C3C8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  _BYTE v17[24];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = sub_23B1C6C98();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v11 = &v17[-v10];
  v12 = (char *)v1 + *(_QWORD *)(v3 + 96);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v6 + 16))(v11, v12, v5);
  v13 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v4) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v13 + 32))(a1, v11, v4);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
  v14 = (void (*)(uint64_t))v1[2];
  v15 = swift_retain();
  v14(v15);
  swift_release();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v9, a1, v4);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v4);
  swift_beginAccess();
  (*(void (**)(char *, _BYTE *, uint64_t))(v6 + 40))(v12, v9, v5);
  return swift_endAccess();
}

uint64_t sub_23AF5C55C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = sub_23B1C6C98();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v11 - v6;
  v8 = *(_QWORD *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))((char *)&v11 - v6, a1, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v7, 0, 1, v3);
  v9 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v9, v7, v4);
  return swift_endAccess();
}

void (*sub_23AF5C644(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v7 = malloc(v6);
  v3[4] = v7;
  sub_23AF5C3C8((uint64_t)v7);
  return sub_23AF5C6C4;
}

void sub_23AF5C6C4(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = v2[1];
    v6 = v2[2];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    sub_23AF5C55C((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    sub_23AF5C55C(*(_QWORD *)(*(_QWORD *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

char *sub_23AF5C750(uint64_t a1, uint64_t a2)
{
  char *v2;

  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 80) - 8) + 56))(&v2[*(_QWORD *)(*(_QWORD *)v2 + 96)], 1, 1);
  *((_QWORD *)v2 + 2) = a1;
  *((_QWORD *)v2 + 3) = a2;
  return v2;
}

uint64_t sub_23AF5C7A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  v2 = sub_23B1C6C98();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_23AF5C800()
{
  sub_23AF5C7A4();
  return swift_deallocClassInstance();
}

uint64_t sub_23AF5C824()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B1C6C98();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for Lazy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Lazy);
}

void sub_23AF5C8B0()
{
  type metadata accessor for DirectionalTestingOperation();
}

_QWORD *sub_23AF5C960(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(void *, const void *, uint64_t);
  _QWORD *v79;
  void *v80;
  const void *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  size_t v85;
  uint64_t v86;
  void (*v87)(void *, const void *, uint64_t);
  _QWORD *v88;
  const void *v89;
  int v90;
  uint64_t v91;
  size_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  const void *v96;
  uint64_t v97;
  void (*v98)(void *, const void *, uint64_t);
  _QWORD *v99;
  void *v100;
  const void *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  char v106;
  void *v107;
  const void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(void *, const void *, uint64_t);
  _QWORD *v113;
  const void *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(void *, const void *, uint64_t);
  _QWORD *v123;
  const void *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  void *v132;
  const void *v133;
  uint64_t v134;
  void (*v135)(void *, const void *, uint64_t);
  _QWORD *v136;
  const void *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  char v143;
  void *v144;
  const void *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  int v160;
  uint64_t *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  int v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  void *v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  void (*v179)(unint64_t, unint64_t, uint64_t);
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  size_t v185;
  size_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  void (*v191)(uint64_t, uint64_t, uint64_t);
  unint64_t v192;
  unint64_t v193;
  _BYTE *v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  unint64_t v201;
  unint64_t v202;
  void *v203;
  const void *v204;
  unsigned int (*v205)(const void *, uint64_t, uint64_t);
  void *v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  void (*v216)(unint64_t, unint64_t, uint64_t);
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  size_t v222;
  size_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  void (*v228)(uint64_t, uint64_t, uint64_t);
  unint64_t v229;
  unint64_t v230;
  _BYTE *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  unint64_t v238;
  unint64_t v239;
  void *v240;
  const void *v241;
  unsigned int (*v242)(const void *, uint64_t, uint64_t);
  size_t v243;
  unint64_t v244;
  size_t v245;
  unint64_t v246;
  void *v247;
  uint64_t v248;
  size_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  _QWORD *v254;
  _QWORD *v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  void (*v259)(unint64_t, unint64_t, uint64_t);
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  _QWORD *v264;
  size_t v265;
  size_t v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  void (*v271)(uint64_t, uint64_t, uint64_t);
  unint64_t v272;
  unint64_t v273;
  _BYTE *v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  _QWORD *v279;
  _QWORD *v280;
  unint64_t v281;
  unint64_t v282;
  void *v283;
  const void *v284;
  unsigned int (*v285)(const void *, uint64_t, uint64_t);
  size_t v286;
  unint64_t v287;
  size_t v288;
  unint64_t v289;
  size_t v290;
  unint64_t v291;
  size_t v292;
  unint64_t v293;
  _QWORD *v294;
  unint64_t v295;
  unint64_t v296;
  void (*v297)(unint64_t, unint64_t, uint64_t);
  _QWORD *v298;
  _QWORD *v299;
  _QWORD *v300;
  _QWORD *v301;
  char *v302;
  void *v303;
  char v304;
  size_t v305;
  uint64_t v306;
  _QWORD *v307;
  unint64_t v308;
  unint64_t v309;
  void (*v310)(unint64_t, unint64_t, uint64_t);
  _QWORD *v311;
  _QWORD *v312;
  _QWORD *v313;
  _QWORD *v314;
  char *v315;
  void *v316;
  id v317;
  _QWORD *v318;
  _QWORD *v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  _QWORD *v323;
  _QWORD *v324;
  unint64_t v325;
  uint64_t *v326;
  unint64_t v327;
  _QWORD *v328;
  _QWORD *v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  _QWORD *v334;
  unint64_t v335;
  uint64_t *v336;
  unint64_t v337;
  _QWORD *v338;
  _QWORD *v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  _QWORD *v344;
  unint64_t v345;
  uint64_t *v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  int v354;
  _QWORD *v355;
  _QWORD *v356;
  size_t v357;
  size_t v358;
  unint64_t v359;
  int v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  int v379;
  _QWORD *v380;
  _QWORD *v381;
  size_t v382;
  size_t v383;
  unint64_t v384;
  int v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t v402;
  unint64_t v403;
  int v404;
  _QWORD *v405;
  _QWORD *v406;
  size_t v407;
  size_t v408;
  unint64_t v409;
  int v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  void *v423;
  id v424;
  void *v425;
  id v426;
  uint64_t v427;
  id v428;
  void *v429;
  id v430;
  void *v431;
  id v432;
  uint64_t v433;
  id v434;
  void *v435;
  id v436;
  void *v437;
  id v438;
  uint64_t v439;
  id v440;
  unint64_t *v441;
  unint64_t v442;
  unint64_t *v443;
  unint64_t v444;
  unint64_t *v445;
  unint64_t v446;
  unint64_t *v447;
  unint64_t v448;
  unint64_t *v449;
  unint64_t v450;
  unint64_t *v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t (*v454)(unint64_t);
  unint64_t v455;
  uint64_t (*v456)(unint64_t);
  unint64_t v457;
  uint64_t (*v458)(unint64_t);
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  size_t v463;
  const void *v464;
  void (*v465)(void *, const void *, uint64_t);
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  unint64_t v469;
  _QWORD *v470;
  _QWORD *v471;
  unint64_t v472;
  unint64_t v473;
  void (*v474)(unint64_t, unint64_t, uint64_t);
  _QWORD *v475;
  _QWORD *v476;
  _QWORD *v477;
  _QWORD *v478;
  _QWORD *v479;
  size_t v480;
  size_t v481;
  uint64_t v482;
  int v483;
  unint64_t v484;
  unint64_t v485;
  void (*v486)(unint64_t, unint64_t, uint64_t);
  unint64_t v487;
  unint64_t v488;
  _BYTE *v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  _QWORD *v494;
  _QWORD *v495;
  unint64_t v496;
  unint64_t v497;
  void *v498;
  const void *v499;
  unsigned int (*v500)(const void *, uint64_t, uint64_t);
  _QWORD *v501;
  _QWORD *v502;
  unint64_t v503;
  unint64_t v504;
  uint64_t v505;
  _QWORD *v506;
  _QWORD *v507;
  unint64_t v508;
  uint64_t *v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  unint64_t v513;
  uint64_t v514;
  unint64_t v515;
  unint64_t v516;
  int v517;
  _QWORD *v518;
  _QWORD *v519;
  unint64_t v520;
  unint64_t v521;
  unint64_t v522;
  int v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  void *v536;
  id v537;
  void *v538;
  id v539;
  uint64_t v540;
  id v541;
  void *v542;
  unint64_t v543;
  uint64_t v544;
  size_t v545;
  const void *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  unint64_t v551;
  _QWORD *v552;
  _QWORD *v553;
  unint64_t v554;
  unint64_t v555;
  void (*v556)(unint64_t, unint64_t, uint64_t);
  _QWORD *v557;
  _QWORD *v558;
  _QWORD *v559;
  _QWORD *v560;
  _QWORD *v561;
  size_t v562;
  size_t v563;
  uint64_t v564;
  int v565;
  unint64_t v566;
  unint64_t v567;
  void (*v568)(unint64_t, unint64_t, uint64_t);
  unint64_t v569;
  unint64_t v570;
  _BYTE *v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  unint64_t v575;
  _QWORD *v576;
  _QWORD *v577;
  unint64_t v578;
  unint64_t v579;
  void *v580;
  const void *v581;
  unsigned int (*v582)(const void *, uint64_t, uint64_t);
  _QWORD *v583;
  _QWORD *v584;
  unint64_t v585;
  unint64_t v586;
  uint64_t v587;
  _QWORD *v588;
  _QWORD *v589;
  unint64_t v590;
  uint64_t *v591;
  unint64_t v592;
  uint64_t v593;
  unint64_t v594;
  unint64_t v595;
  uint64_t v596;
  unint64_t v597;
  unint64_t v598;
  int v599;
  _QWORD *v600;
  _QWORD *v601;
  unint64_t v602;
  __int128 *v603;
  unint64_t v604;
  int v605;
  __int128 v606;
  __int128 v607;
  __int128 v608;
  __int128 v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  void *v618;
  id v619;
  void *v620;
  id v621;
  uint64_t v622;
  id v623;
  unint64_t v624;
  size_t v625;
  const void *v626;
  void (*v627)(void *, const void *, uint64_t);
  uint64_t v628;
  uint64_t v629;
  unint64_t v630;
  unint64_t v631;
  _QWORD *v632;
  _QWORD *v633;
  unint64_t v634;
  unint64_t v635;
  void (*v636)(unint64_t, unint64_t, uint64_t);
  _QWORD *v637;
  _QWORD *v638;
  _QWORD *v639;
  _QWORD *v640;
  _QWORD *v641;
  size_t v642;
  size_t v643;
  uint64_t v644;
  int v645;
  unint64_t v646;
  unint64_t v647;
  void (*v648)(unint64_t, unint64_t, uint64_t);
  unint64_t v649;
  unint64_t v650;
  _BYTE *v651;
  unint64_t v652;
  unint64_t v653;
  unint64_t v654;
  unint64_t v655;
  _QWORD *v656;
  _QWORD *v657;
  unint64_t v658;
  unint64_t v659;
  void *v660;
  const void *v661;
  unsigned int (*v662)(const void *, uint64_t, uint64_t);
  _QWORD *v663;
  _QWORD *v664;
  unint64_t v665;
  unint64_t v666;
  uint64_t v667;
  _QWORD *v668;
  _QWORD *v669;
  unint64_t v670;
  uint64_t *v671;
  unint64_t v672;
  uint64_t v673;
  unint64_t v674;
  unint64_t v675;
  uint64_t v676;
  unint64_t v677;
  unint64_t v678;
  int v679;
  _QWORD *v680;
  _QWORD *v681;
  unint64_t v682;
  unint64_t v683;
  unint64_t v684;
  int v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  void *v698;
  id v699;
  void *v700;
  id v701;
  uint64_t v702;
  id v703;
  _OWORD *v704;
  __int128 *v705;
  __int128 v706;
  unint64_t v707;
  unint64_t v708;
  __int128 v709;
  _QWORD *v710;
  uint64_t v711;
  uint64_t v712;
  _QWORD *v713;
  uint64_t v714;
  unint64_t v715;
  unint64_t v716;
  _QWORD *v717;
  _QWORD *v718;
  _OWORD *v719;
  __int128 *v720;
  __int128 v721;
  unint64_t v722;
  unint64_t v723;
  __int128 v724;
  _QWORD *v725;
  uint64_t v726;
  uint64_t v727;
  _QWORD *v728;
  uint64_t v729;
  unint64_t v730;
  unint64_t v731;
  _QWORD *v732;
  _QWORD *v733;
  void *v734;
  id v735;
  _OWORD *v736;
  __int128 *v737;
  __int128 v738;
  unint64_t v739;
  unint64_t v740;
  __int128 v741;
  _QWORD *v742;
  uint64_t v743;
  uint64_t v744;
  _QWORD *v745;
  uint64_t v746;
  unint64_t v747;
  unint64_t v748;
  void *v749;
  const void *v750;
  char *v751;
  char *v752;
  int v753;
  uint64_t *v754;
  uint64_t v755;
  _QWORD *v756;
  unint64_t v757;
  unint64_t v758;
  void (*v759)(unint64_t, unint64_t, uint64_t);
  _QWORD *v760;
  _QWORD *v761;
  _QWORD *v762;
  _QWORD *v763;
  _QWORD *v764;
  _QWORD *v765;
  id v766;
  _QWORD *result;
  _OWORD *v768;
  __int128 *v769;
  __int128 v770;
  unint64_t v771;
  unint64_t v772;
  __int128 v773;
  _QWORD *v774;
  uint64_t v775;
  uint64_t v776;
  _QWORD *v777;
  uint64_t v778;
  unint64_t v779;
  unint64_t v780;
  _QWORD *v781;
  _QWORD *v782;
  void *v783;
  id v784;
  _OWORD *v785;
  __int128 *v786;
  __int128 v787;
  unint64_t v788;
  unint64_t v789;
  __int128 v790;
  _QWORD *v791;
  uint64_t v792;
  uint64_t v793;
  _QWORD *v794;
  uint64_t v795;
  unint64_t v796;
  unint64_t v797;
  void *v798;
  const void *v799;
  uint64_t v800;
  char *v801;
  char *v802;
  int v803;
  uint64_t *v804;
  uint64_t v805;
  size_t v806;
  uint64_t v807;
  _QWORD *v808;
  unint64_t v809;
  unint64_t v810;
  void (*v811)(unint64_t, unint64_t, uint64_t);
  _QWORD *v812;
  _QWORD *v813;
  _QWORD *v814;
  _QWORD *v815;
  _QWORD *v816;
  _QWORD *v817;
  void *v818;
  id v819;
  _OWORD *v820;
  __int128 *v821;
  __int128 v822;
  unint64_t v823;
  unint64_t v824;
  __int128 v825;
  _QWORD *v826;
  uint64_t v827;
  uint64_t v828;
  _QWORD *v829;
  uint64_t v830;
  unint64_t v831;
  unint64_t v832;
  _QWORD *v833;
  _QWORD *v834;
  size_t v835;
  size_t v836;
  unsigned int v837;
  unsigned int v838;
  uint64_t v839;
  unint64_t v840;
  uint64_t v841;
  size_t v842;
  size_t v843;
  unsigned int v844;
  unsigned int v845;
  unint64_t __n;
  unint64_t v847;
  uint64_t v848;
  size_t v849;
  size_t v850;
  size_t v851;
  uint64_t v852;
  size_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  unsigned int v857;
  unsigned int v858;
  uint64_t v859;
  unsigned int v860;
  unint64_t v861;
  unsigned int v862;
  unint64_t v863;
  unsigned int v864;
  unsigned int v865;
  unint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  unsigned int v872;
  unsigned int v873;
  uint64_t v874;
  uint64_t v875;
  unint64_t v876;
  uint64_t v877;
  uint64_t v878;
  size_t v879;
  uint64_t v880;
  unint64_t v881;
  size_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t AssociatedTypeWitness;
  uint64_t v888;
  uint64_t v889;
  int v890;
  unint64_t v891;
  unint64_t v892;
  int v893;
  unint64_t v894;
  unint64_t v895;
  uint64_t v896;
  unint64_t v897;
  int v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  int v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  int v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  int v915;
  unsigned int v916;
  const void *v917;
  unint64_t v918;
  unint64_t v919;
  uint64_t v920;
  unint64_t v921;
  size_t v922;
  unint64_t v923;
  unint64_t v924;
  unint64_t v925;
  unint64_t v926;
  uint64_t v927;
  uint64_t v928;
  unsigned int v929;
  uint64_t v930;
  void *v931;
  uint64_t v932;
  unint64_t v933;
  uint64_t v934;
  unint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  void *v943;
  const void *v944;
  const void *v945;
  unint64_t v946;
  uint64_t v947;
  unsigned int v948;
  unint64_t v949;
  unint64_t v950;
  unint64_t v951;
  const void *v952;
  const void *v953;
  const void *v954;
  size_t v955;
  void *v956;
  void *v957;
  size_t v958;
  void *v959;
  size_t v960;
  void *v961;
  size_t v962;
  void *v963;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  void *v969;
  uint64_t v970;
  uint64_t v971;
  void *v972;
  void *v973;
  void *v974;
  void *v975;

  v936 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v915 = *(_DWORD *)(v4 + 80);
  v870 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v870 - 8);
  v909 = *(_DWORD *)(v6 + 80);
  v856 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v856 - 8);
  v904 = *(_DWORD *)(v7 + 80);
  v8 = v909 & 0xF8 | v904 | 7u;
  v9 = v8 | v915;
  v934 = v9;
  v878 = sub_23B1C5BDC();
  v10 = *(_QWORD *)(v878 - 8);
  v11 = *(_DWORD *)(v10 + 84);
  v898 = *(_DWORD *)(v10 + 80);
  v12 = v898 | 7;
  v884 = v4;
  v13 = *(_DWORD *)(v7 + 84);
  v858 = *(_DWORD *)(v6 + 84);
  if (v858 > v13)
    v13 = *(_DWORD *)(v6 + 84);
  v845 = v13;
  if (v13 <= 0x7FFFFFFE)
    v13 = 2147483646;
  v948 = *(_DWORD *)(v4 + 84);
  v873 = v13;
  if (v13 <= v948)
    v13 = *(_DWORD *)(v4 + 84);
  if (v11 <= 0x7FFFFFFE)
    v14 = 2147483646;
  else
    v14 = *(_DWORD *)(v10 + 84);
  v929 = v14;
  if (v13 <= v14)
    v13 = v14;
  v838 = v13;
  if (v13 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  v865 = v13;
  v860 = *(_DWORD *)(v10 + 84);
  v15 = v11 == 0;
  v942 = v915;
  v876 = v5 + v915;
  v927 = v909 & 0xF8 | v904 | 7u;
  v877 = v5 + v8;
  v869 = v6;
  v874 = *(_QWORD *)(v6 + 64) + 7;
  v854 = v904 + 8;
  v855 = v7;
  v888 = v904;
  v848 = *(_QWORD *)(v7 + 64) + 7;
  v955 = ((((v848 + ((v854 + (v874 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v904)) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v932 = *(_DWORD *)(v10 + 80) | 7;
  v947 = v12 + 16;
  v859 = v898 + 12;
  v880 = *(_QWORD *)(v878 - 8);
  v16 = *(_QWORD *)(v10 + 64);
  v853 = v16 + v898;
  v835 = v16 + 12;
  v17 = (v898
       + 10
       + ((((((v16
             + 12
             + ((v853 + (v859 & ~(unint64_t)v898)) & ~(unint64_t)v898)) & 0xFFFFFFFFFFFFFFF8)
           + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v898;
  v879 = v16;
  if (v15)
    ++v16;
  v881 = v17;
  v882 = v16;
  v851 = v16 + 7;
  v852 = v898 + 10;
  v946 = ((((((((((v16 + 7 + v17) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
           + 19) & 0xFFFFFFFFFFFFFFF8)
         + 25) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v866 = (v12 + 16 + ((v5 + v8 + ((v5 + v915) & ~(unint64_t)v915)) & ~v8) + v955) & ~v12;
  v863 = (v9 | v898) + v5;
  v883 = v9 | v898;
  v847 = ((((v866 + v946 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v18 = v847 + (v863 & ~v883);
  v921 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(_QWORD *)(a3 + 24);
  v886 = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(v886 - 8);
  v21 = *(_DWORD *)(v20 + 84);
  v893 = *(_DWORD *)(v20 + 80);
  v918 = (v18 + v893) & ~(unint64_t)v893;
  v885 = v20;
  v22 = *(_QWORD *)(v20 + 64);
  if (v21)
    v23 = *(_QWORD *)(v20 + 64);
  else
    v23 = v22 + 1;
  v868 = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(v868 - 8);
  v890 = *(_DWORD *)(v24 + 80);
  v871 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v871 - 8);
  v26 = *(_DWORD *)(v25 + 80);
  v27 = v890 & 0xF8 | v26 | 7;
  v28 = *(_DWORD *)(v24 + 84);
  v857 = v28;
  if (v28 <= *(_DWORD *)(v25 + 84))
    v28 = *(_DWORD *)(v25 + 84);
  v844 = v28;
  if (v28 <= 0x7FFFFFFE)
    v29 = 2147483646;
  else
    v29 = v28;
  v867 = v24;
  v30 = *(_QWORD *)(v24 + 64) + 7;
  v31 = *(_QWORD *)(v25 + 64) + 7;
  v32 = ((((v31 + ((v26 + 8 + (v30 & 0xFFFFFFFFFFFFFFF8)) & ~v26)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v843 = v23;
  v33 = ((((((v23 + v27 + v918) & ~v27) + v32 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v840 = v5 + v893;
  v850 = v23 + v27;
  v34 = *(_QWORD *)(v936 - 8);
  v35 = *(_DWORD *)(v34 + 80);
  v839 = v5 + v35;
  if (*(_DWORD *)(v34 + 84))
    v36 = *(_QWORD *)(v34 + 64);
  else
    v36 = *(_QWORD *)(v34 + 64) + 1;
  v836 = v36;
  v37 = ((v5 + v35) & ~v35) + v36;
  v38 = ((v921 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v5 > v38)
    v38 = v5;
  if (v33 <= v32
            + ((v23 + v27 + ((v5 + v893) & ~(unint64_t)v893)) & ~v27)
            + 16)
    v33 = v32 + ((v23 + v27 + ((v5 + v893) & ~(unint64_t)v893)) & ~v27) + 16;
  if (((v921 + 23) & 0xFFFFFFFFFFFFFFF8) + 8 <= v37)
    v39 = v37;
  else
    v39 = ((v921 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v38 > v33)
    v33 = v38;
  if (v33 <= v39)
    v40 = v39;
  else
    v40 = v33;
  v41 = v27 | v893 | (unint64_t)v898;
  v872 = v29;
  v864 = v21;
  if (v29 <= v21)
    v42 = v21;
  else
    v42 = v29;
  v43 = v909 & 0xF8 | v904 | 7u;
  if (v42 <= v929)
    v42 = v929;
  v837 = v42;
  if (v42 <= 0x7FFFFFFF)
    v42 = 0x7FFFFFFF;
  v862 = v42;
  v930 = v893;
  v919 = v22 + v893;
  if (v948)
    v44 = v5;
  else
    v44 = v5 + 1;
  v841 = v19;
  v45 = *(_QWORD *)(v19 - 8);
  v875 = v22 + v27;
  v922 = ((((v31 + ((v26 + 8 + (v30 & 0xFFFFFFFFFFFFFFF8)) & ~v26)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v46 = (v947 + ((v22 + v27 + ((v22 + v893) & ~(unint64_t)v893)) & ~v27) + v32) & ~v932;
  v861 = v41 + v22;
  __n = ((((v46 + v946 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v47 = __n + ((v41 + v22) & ~v41);
  v48 = (v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  v49 = ((v48 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v842 = v44;
  v50 = ((((((v44 + v927 + ((v47 + v915) & ~(unint64_t)v915)) & ~v927)
          + v955
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v51 = v22 + v915;
  v849 = v44 + v927;
  v52 = ((v44 + v927 + (v51 & ~(unint64_t)v915)) & ~v927) + v955 + 16;
  if (*(_DWORD *)(v45 + 84))
    v53 = *(_QWORD *)(v45 + 64);
  else
    v53 = *(_QWORD *)(v45 + 64) + 1;
  if (v22 > v49)
    v49 = v22;
  if (v50 > v52)
    v52 = v50;
  v54 = *(_DWORD *)(v45 + 80);
  v55 = v22 + v54;
  v56 = (v22 + v54) & ~v54;
  v57 = v53;
  v58 = v56 + v53;
  if (((v48 + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > v58)
    v58 = ((v48 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v49 <= v52)
    v49 = v52;
  if (v49 <= v58)
    v59 = v58;
  else
    v59 = v49;
  v60 = v59;
  v61 = v59 + 1;
  v62 = v934 | v41 | v35 | v54;
  v923 = v40;
  if (v61 <= v40 + 1)
    v63 = v40 + 1;
  else
    v63 = v61;
  if (v62 == 7
    && ((v909 | v915 | v904 | v898 | v893 | v890 | *(_DWORD *)(v25 + 80) | *(_DWORD *)(v34 + 80) | *(_DWORD *)(v45 + 80)) & 0x100000) == 0
    && v63 + 1 <= 0x18)
  {
    v64 = a2;
    v65 = *((unsigned __int8 *)a2 + v63);
    if (v65 >= 2)
    {
      if (v63 <= 3)
        v66 = v63;
      else
        v66 = 4;
      __asm { BR              X17 }
    }
    v916 = *(_DWORD *)(v25 + 84);
    v69 = ~v927;
    v70 = ~(unint64_t)v904;
    v928 = ~v932;
    v71 = ~(unint64_t)v898;
    v933 = ~(unint64_t)v893;
    v935 = v63;
    if (v65 == 1)
    {
      v75 = ~v41;
      v76 = ~v54;
      switch(*((_BYTE *)a2 + v60))
      {
        case 0:
          v77 = ~v27;
          v905 = v30;
          v910 = ~v26;
          v937 = v26 + 8;
          v966 = *(_QWORD *)(v871 - 8);
          v899 = *(_QWORD *)(v25 + 64) + 7;
          v949 = v46;
          v78 = *(void (**)(void *, const void *, uint64_t))(v885 + 16);
          v79 = v64;
          ((void (*)(_QWORD *))v78)(a1);
          v80 = (void *)(((unint64_t)a1 + v861) & v75);
          v81 = (const void *)(((unint64_t)v79 + v861) & v75);
          if (v864 == v862)
          {
            v82 = (*(uint64_t (**)(const void *))(v885 + 48))(v81);
            v83 = v880;
LABEL_89:
            v84 = v77;
            v68 = a1;
            goto LABEL_90;
          }
          v146 = ((unint64_t)v81 + v919) & v933;
          v84 = v77;
          v147 = (v875 + v146) & v77;
          v83 = v880;
          if (v872 == v862)
          {
            if (v857 == v872)
            {
              v82 = (*(uint64_t (**)(unint64_t))(v867 + 48))((v875 + v146) & v77);
              v83 = v880;
              goto LABEL_89;
            }
            v441 = (unint64_t *)((v905 + v147) & 0xFFFFFFFFFFFFFFF8);
            v68 = a1;
            if (v844 <= 0x7FFFFFFE)
            {
              v442 = *v441;
              goto LABEL_384;
            }
            v453 = ((unint64_t)v441 + v937) & v910;
            v454 = *(uint64_t (**)(unint64_t))(v966 + 48);
          }
          else
          {
            v243 = v922 + v147;
            v68 = a1;
            if ((v837 & 0x80000000) == 0)
            {
              v244 = *(_QWORD *)(v243 + 8);
              if (v244 >= 0xFFFFFFFF)
                LODWORD(v244) = -1;
              v82 = v244 + 1;
LABEL_90:
              if (v82)
              {
LABEL_91:
                memcpy(v80, v81, __n);
LABEL_92:
                v85 = v882;
                goto LABEL_333;
              }
              v146 = ((unint64_t)v81 + v919) & v933;
              v147 = (v875 + v146) & v84;
LABEL_168:
              v925 = v60;
              v206 = v80;
              v945 = v81;
              v207 = v80;
              v208 = v84;
              v209 = v83;
              v78(v206, v81, v886);
              v957 = v207;
              v78((void *)(((unint64_t)v207 + v919) & v933), (const void *)v146, v886);
              v210 = (v875 + (((unint64_t)v207 + v919) & v933)) & v208;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v867 + 16))(v210, v147, v868);
              v211 = (_QWORD *)((v905 + v210) & 0xFFFFFFFFFFFFFFF8);
              v212 = (_QWORD *)((v905 + v147) & 0xFFFFFFFFFFFFFFF8);
              *v211 = *v212;
              v213 = ((unint64_t)v211 + v937) & v910;
              v214 = v71;
              v215 = ((unint64_t)v212 + v937) & v910;
              v216 = *(void (**)(unint64_t, unint64_t, uint64_t))(v966 + 16);
              swift_bridgeObjectRetain();
              v216(v213, v215, v871);
              v217 = (_QWORD *)((v899 + v213) & 0xFFFFFFFFFFFFF8);
              v218 = (_QWORD *)((v899 + v215) & 0xFFFFFFFFFFFFF8);
              *v217 = *v218;
              v219 = (_QWORD *)(((unint64_t)v217 + 15) & 0xFFFFFFFFFFFFFFF8);
              v220 = (_QWORD *)(((unint64_t)v218 + 15) & 0xFFFFFFFFFFFFFFF8);
              *v219 = *v220;
              v219[1] = v220[1];
              v221 = (_QWORD *)(v922 + v210);
              *v221 = *(_QWORD *)(v922 + v147);
              v221[1] = *(_QWORD *)(v922 + v147 + 8);
              v222 = (v947 + v922 + v210) & v928;
              v223 = (v947 + v922 + v147) & v928;
              *(_BYTE *)v222 = *(_BYTE *)v223;
              v224 = v222 | 4;
              v225 = *(_DWORD *)(v223 | 4);
              *(_BYTE *)(v224 + 4) = *(_BYTE *)((v223 | 4) + 4);
              *(_DWORD *)v224 = v225;
              *(_WORD *)(v222 + 10) = *(_WORD *)(v223 + 0xA);
              v226 = (v859 + v222) & v214;
              v227 = (v859 + v223) & v214;
              v228 = *(void (**)(uint64_t, uint64_t, uint64_t))(v209 + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v228(v226, v227, v878);
              v229 = (v853 + v226) & v214;
              v230 = (v853 + v227) & v214;
              v228(v229, v230, v878);
              v231 = (_BYTE *)(v229 + v879);
              *v231 = *(_BYTE *)(v230 + v879);
              v231[1] = *(_BYTE *)(v230 + v879 + 1);
              v231[2] = *(_BYTE *)(v230 + v879 + 2);
              v231[3] = *(_BYTE *)(v230 + v879 + 3);
              v231[4] = *(_BYTE *)(v230 + v879 + 4);
              v232 = (v229 + v879 + 12) & 0xFFFFFFFFFFFFFFF8;
              v233 = (v230 + v879 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v232 = *(_QWORD *)v233;
              *(_QWORD *)(v232 + 8) = *(_QWORD *)(v233 + 8);
              *(_BYTE *)(v232 + 16) = *(_BYTE *)(v233 + 16);
              *(_BYTE *)(v232 + 17) = *(_BYTE *)(v233 + 17);
              *(_BYTE *)(v232 + 18) = *(_BYTE *)(v233 + 18);
              *(_BYTE *)(v232 + 19) = *(_BYTE *)(v233 + 19);
              v234 = (v232 + 27) & 0xFFFFFFFFFFFFFFF8;
              v235 = (v233 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v234 = *(_QWORD *)v235;
              *(_BYTE *)(v234 + 8) = *(_BYTE *)(v235 + 8);
              *(_BYTE *)(v234 + 9) = *(_BYTE *)(v235 + 9);
              *(_BYTE *)(v234 + 10) = *(_BYTE *)(v235 + 10);
              *(_BYTE *)(v234 + 11) = *(_BYTE *)(v235 + 11);
              *(_BYTE *)(v234 + 12) = *(_BYTE *)(v235 + 12);
              v236 = (_QWORD *)((v232 + 47) & 0xFFFFFFFFFFFFF8);
              v237 = (_QWORD *)((v233 + 47) & 0xFFFFFFFFFFFFF8);
              *v236 = *v237;
              v238 = ((unint64_t)v236 + 15) & 0xFFFFFFFFFFFFFFF8;
              v239 = ((unint64_t)v237 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v238 = *(_QWORD *)v239;
              *(_BYTE *)(v238 + 8) = *(_BYTE *)(v239 + 8);
              *(_BYTE *)(v238 + 9) = *(_BYTE *)(v239 + 9);
              v240 = (void *)((v852 + v238) & v214);
              v241 = (const void *)((v852 + v239) & v214);
              v242 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v209 + 48);
              swift_bridgeObjectRetain();
              if (v242(v241, 1, v878))
              {
                memcpy(v240, v241, v882);
              }
              else
              {
                v228((uint64_t)v240, (uint64_t)v241, v878);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v209 + 56))(v240, 0, 1, v878);
              }
              v80 = v957;
              v328 = (_QWORD *)(((unint64_t)v240 + v851) & 0xFFFFFFFFFFFFFFF8);
              v329 = (_QWORD *)(((unint64_t)v241 + v851) & 0xFFFFFFFFFFFFFFF8);
              *v328 = *v329;
              v330 = ((unint64_t)v328 + 15) & 0xFFFFFFFFFFFFFFF8;
              v331 = ((unint64_t)v329 + 15) & 0xFFFFFFFFFFFFFFF8;
              v332 = *(_QWORD *)v331;
              *(_BYTE *)(v330 + 8) = *(_BYTE *)(v331 + 8);
              *(_QWORD *)v330 = v332;
              v333 = (_QWORD *)(((unint64_t)v328 + 31) & 0xFFFFFFFFFFFFF8);
              v334 = (_QWORD *)(((unint64_t)v329 + 31) & 0xFFFFFFFFFFFFF8);
              *v333 = *v334;
              v335 = ((unint64_t)v333 + 15) & 0xFFFFFFFFFFFFFFF8;
              v336 = (uint64_t *)(((unint64_t)v334 + 15) & 0xFFFFFFFFFFFFFFF8);
              v337 = v336[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if ((v337 & 0x3000000000000000) != 0)
              {
                *(_OWORD *)v335 = *(_OWORD *)v336;
              }
              else
              {
                v373 = *v336;
                sub_23AAAE668(*v336, v337);
                *(_QWORD *)v335 = v373;
                *(_QWORD *)(v335 + 8) = v337;
              }
              v374 = (v335 + 19) & 0xFFFFFFFFFFFFFFF8;
              v375 = ((unint64_t)v336 + 19) & 0xFFFFFFFFFFFFFFF8;
              v376 = *(_QWORD *)v375;
              *(_BYTE *)(v374 + 8) = *(_BYTE *)(v375 + 8);
              *(_QWORD *)v374 = v376;
              *(_BYTE *)(v374 + 9) = *(_BYTE *)(v375 + 9);
              v377 = (v374 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v378 = (v375 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v379 = *(_DWORD *)v378;
              *(_BYTE *)(v377 + 4) = *(_BYTE *)(v378 + 4);
              *(_DWORD *)v377 = v379;
              v380 = (_QWORD *)((v374 + 25) & 0xFFFFFFFFFFFFFFF8);
              v381 = (_QWORD *)((v375 + 25) & 0xFFFFFFFFFFFFFFF8);
              *v380 = *v381;
              v380[1] = v381[1];
              v382 = v222 + v946;
              v383 = v223 + v946;
              v384 = *(_QWORD *)(v223 + v946 + 16);
              if (v384 >= 0xFFFFFFFF)
                LODWORD(v384) = -1;
              v385 = v384 - 1;
              swift_bridgeObjectRetain();
              if (v385 < 0)
              {
                *(_QWORD *)v382 = *(_QWORD *)v383;
                *(_BYTE *)(v382 + 8) = *(_BYTE *)(v383 + 8);
                *(_BYTE *)(v382 + 9) = *(_BYTE *)(v383 + 9);
                v429 = *(void **)(v383 + 16);
                v430 = v429;
                *(_QWORD *)(v382 + 16) = v429;
                v431 = *(void **)(v383 + 24);
                v432 = v431;
                *(_QWORD *)(v382 + 24) = v431;
                *(_BYTE *)(v382 + 32) = *(_BYTE *)(v383 + 32);
                *(_BYTE *)(v382 + 33) = *(_BYTE *)(v383 + 33);
                *(_BYTE *)(v382 + 34) = *(_BYTE *)(v383 + 34);
                *(_QWORD *)(v382 + 40) = *(_QWORD *)(v383 + 40);
                *(_QWORD *)(v382 + 48) = *(_QWORD *)(v383 + 48);
                *(_QWORD *)(v382 + 56) = *(_QWORD *)(v383 + 56);
                *(_QWORD *)(v382 + 64) = *(_QWORD *)(v383 + 64);
                *(_BYTE *)(v382 + 72) = *(_BYTE *)(v383 + 72);
                *(_QWORD *)(v382 + 80) = *(_QWORD *)(v383 + 80);
                *(_QWORD *)(v382 + 88) = *(_QWORD *)(v383 + 88);
                v974 = *(void **)(v383 + 96);
                *(_QWORD *)(v382 + 96) = v974;
                *(_BYTE *)(v382 + 104) = *(_BYTE *)(v383 + 104);
                *(_BYTE *)(v382 + 105) = *(_BYTE *)(v383 + 105);
                *(_QWORD *)(v382 + 112) = *(_QWORD *)(v383 + 112);
                *(_QWORD *)(v382 + 120) = *(_QWORD *)(v383 + 120);
                *(_QWORD *)(v382 + 128) = *(_QWORD *)(v383 + 128);
                *(_QWORD *)(v382 + 136) = *(_QWORD *)(v383 + 136);
                *(_QWORD *)(v382 + 144) = *(_QWORD *)(v383 + 144);
                *(_QWORD *)(v382 + 152) = *(_QWORD *)(v383 + 152);
                *(_QWORD *)(v382 + 160) = *(_QWORD *)(v383 + 160);
                *(_QWORD *)(v382 + 168) = *(_QWORD *)(v383 + 168);
                *(_BYTE *)(v382 + 176) = *(_BYTE *)(v383 + 176);
                *(_QWORD *)(v382 + 184) = *(_QWORD *)(v383 + 184);
                v433 = *(_QWORD *)(v383 + 192);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v434 = v974;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v433)
                {
                  *(_QWORD *)(v382 + 192) = v433;
                  *(_QWORD *)(v382 + 200) = *(_QWORD *)(v383 + 200);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  *(_OWORD *)(v382 + 192) = *(_OWORD *)(v383 + 192);
                }
                v80 = v957;
                v68 = a1;
                v60 = v925;
                v81 = v945;
                *(_QWORD *)(v382 + 208) = *(_QWORD *)(v383 + 208);
                *(_QWORD *)(v382 + 216) = *(_QWORD *)(v383 + 216);
                *(_QWORD *)(v382 + 224) = *(_QWORD *)(v383 + 224);
                *(_QWORD *)(v382 + 232) = *(_QWORD *)(v383 + 232);
                *(_QWORD *)(v382 + 240) = *(_QWORD *)(v383 + 240);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                v386 = *(_OWORD *)v383;
                v387 = *(_OWORD *)(v383 + 16);
                v388 = *(_OWORD *)(v383 + 48);
                *(_OWORD *)(v382 + 32) = *(_OWORD *)(v383 + 32);
                *(_OWORD *)(v382 + 48) = v388;
                *(_OWORD *)v382 = v386;
                *(_OWORD *)(v382 + 16) = v387;
                v389 = *(_OWORD *)(v383 + 64);
                v390 = *(_OWORD *)(v383 + 80);
                v391 = *(_OWORD *)(v383 + 112);
                *(_OWORD *)(v382 + 96) = *(_OWORD *)(v383 + 96);
                *(_OWORD *)(v382 + 112) = v391;
                *(_OWORD *)(v382 + 64) = v389;
                *(_OWORD *)(v382 + 80) = v390;
                v392 = *(_OWORD *)(v383 + 128);
                v393 = *(_OWORD *)(v383 + 144);
                v394 = *(_OWORD *)(v383 + 176);
                *(_OWORD *)(v382 + 160) = *(_OWORD *)(v383 + 160);
                *(_OWORD *)(v382 + 176) = v394;
                *(_OWORD *)(v382 + 128) = v392;
                *(_OWORD *)(v382 + 144) = v393;
                v395 = *(_OWORD *)(v383 + 192);
                v396 = *(_OWORD *)(v383 + 208);
                v397 = *(_OWORD *)(v383 + 224);
                *(_QWORD *)(v382 + 240) = *(_QWORD *)(v383 + 240);
                *(_OWORD *)(v382 + 208) = v396;
                *(_OWORD *)(v382 + 224) = v397;
                *(_OWORD *)(v382 + 192) = v395;
                v60 = v925;
                v81 = v945;
              }
              v719 = (_OWORD *)((v382 + 255) & 0xFFFFFFFFFFFFFFF8);
              v720 = (__int128 *)((v383 + 255) & 0xFFFFFFFFFFFFFFF8);
              v721 = *v720;
              *(_OWORD *)((char *)v719 + 9) = *(__int128 *)((char *)v720 + 9);
              *v719 = v721;
              v722 = (v382 + 287) & 0xFFFFFFFFFFFFFFF8;
              v723 = (v383 + 287) & 0xFFFFFFFFFFFFFFF8;
              v724 = *(_OWORD *)v723;
              *(_BYTE *)(v722 + 16) = *(_BYTE *)(v723 + 16);
              *(_OWORD *)v722 = v724;
              v725 = (_QWORD *)((v382 + 311) & 0xFFFFFFFFFFFFF8);
              v726 = (v383 + 311) & 0xFFFFFFFFFFFFF8;
              v727 = *(_QWORD *)v726;
              v726 += 15;
              *v725 = v727;
              v728 = (_QWORD *)(((unint64_t)v725 + 15) & 0xFFFFFFFFFFFFFFF8);
              v729 = *(_QWORD *)(v726 & 0xFFFFFFFFFFFFFFF8);
              v730 = *(_QWORD *)((v726 & 0xFFFFFFFFFFFFFFF8) + 8);
              sub_23AA7F2D4(v729, v730);
              *v728 = v729;
              v728[1] = v730;
              v85 = v879;
              if (!v860)
                goto LABEL_92;
LABEL_333:
              v731 = ((((v949
                       + ((((((((((v881 + v85 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                           + 19) & 0xFFFFFFFFFFFFFFF8)
                         + 25) & 0xFFFFFFFFFFFFFFF8)
                       + 327) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 16;
              v732 = (_QWORD *)(((unint64_t)v80 + v731) & 0xFFFFFFFFFFFFFFF8);
              v733 = (_QWORD *)(((unint64_t)v81 + v731) & 0xFFFFFFFFFFFFFFF8);
              *v732 = *v733;
              v734 = *(void **)(((unint64_t)v733 + 15) & 0xFFFFFFFFFFFFF8);
              *(_QWORD *)(((unint64_t)v732 + 15) & 0xFFFFFFFFFFFFF8) = v734;
              *((_BYTE *)v68 + v60) = 0;
              v735 = v734;
              goto LABEL_354;
            }
            v453 = (v859 + ((v947 + v243) & v928)) & v71;
            if (v860 <= 0x7FFFFFFD)
            {
              v442 = *(_QWORD *)(((v835 + ((v853 + v453) & v71)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_384:
              if (v442 >= 0xFFFFFFFF)
                LODWORD(v442) = -1;
              if ((v442 + 1) >= 2)
                goto LABEL_91;
              goto LABEL_168;
            }
            v454 = *(uint64_t (**)(unint64_t))(v880 + 48);
          }
          v82 = v454(v453);
          v83 = v880;
          v84 = v77;
          goto LABEL_90;
        case 1:
          v889 = ~v942;
          v86 = ~v27;
          v906 = v30;
          v911 = ~v26;
          v894 = v70;
          v900 = *(_QWORD *)(v25 + 64) + 7;
          v938 = v26 + 8;
          v967 = *(_QWORD *)(v871 - 8);
          v950 = v46;
          v87 = *(void (**)(void *, const void *, uint64_t))(v885 + 16);
          v88 = v64;
          ((void (*)(_QWORD *))v87)(a1);
          v931 = (void *)(((unint64_t)a1 + v861) & v75);
          v89 = (const void *)(((unint64_t)v88 + v861) & v75);
          if (v864 == v862)
          {
            v90 = (*(uint64_t (**)(const void *))(v885 + 48))(v89);
            v91 = v880;
            v92 = v955;
            v68 = a1;
LABEL_95:
            v93 = v86;
LABEL_178:
            if (v90)
            {
LABEL_179:
              v247 = v931;
              memcpy(v931, v89, __n);
              v248 = v874;
LABEL_180:
              v249 = v882;
              goto LABEL_337;
            }
            v148 = ((unint64_t)v89 + v919) & v933;
            v149 = (v875 + v148) & v93;
LABEL_182:
            v926 = v60;
            v917 = v89;
            v250 = v93;
            v251 = v91;
            v87(v931, v89, v886);
            v252 = ((unint64_t)v931 + v919) & v933;
            v87((void *)v252, (const void *)v148, v886);
            v253 = (v875 + v252) & v250;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v867 + 16))(v253, v149, v868);
            v254 = (_QWORD *)((v906 + v253) & 0xFFFFFFFFFFFFFFF8);
            v255 = (_QWORD *)((v906 + v149) & 0xFFFFFFFFFFFFFFF8);
            *v254 = *v255;
            v256 = ((unint64_t)v254 + v938) & v911;
            v257 = v71;
            v258 = ((unint64_t)v255 + v938) & v911;
            v259 = *(void (**)(unint64_t, unint64_t, uint64_t))(v967 + 16);
            swift_bridgeObjectRetain();
            v259(v256, v258, v871);
            v260 = (_QWORD *)((v900 + v256) & 0xFFFFFFFFFFFFF8);
            v261 = (_QWORD *)((v900 + v258) & 0xFFFFFFFFFFFFF8);
            *v260 = *v261;
            v262 = (_QWORD *)(((unint64_t)v260 + 15) & 0xFFFFFFFFFFFFFFF8);
            v263 = (_QWORD *)(((unint64_t)v261 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v262 = *v263;
            v262[1] = v263[1];
            v264 = (_QWORD *)(v922 + v253);
            *v264 = *(_QWORD *)(v922 + v149);
            v264[1] = *(_QWORD *)(v922 + v149 + 8);
            v265 = (v947 + v922 + v253) & v928;
            v266 = (v947 + v922 + v149) & v928;
            *(_BYTE *)v265 = *(_BYTE *)v266;
            v267 = v265 | 4;
            v268 = *(_DWORD *)(v266 | 4);
            *(_BYTE *)(v267 + 4) = *(_BYTE *)((v266 | 4) + 4);
            *(_DWORD *)v267 = v268;
            *(_WORD *)(v265 + 10) = *(_WORD *)(v266 + 0xA);
            v269 = (v859 + v265) & v257;
            v270 = (v859 + v266) & v257;
            v271 = *(void (**)(uint64_t, uint64_t, uint64_t))(v251 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v271(v269, v270, v878);
            v272 = (v853 + v269) & v257;
            v273 = (v853 + v270) & v257;
            v271(v272, v273, v878);
            v274 = (_BYTE *)(v272 + v879);
            *v274 = *(_BYTE *)(v273 + v879);
            v274[1] = *(_BYTE *)(v273 + v879 + 1);
            v274[2] = *(_BYTE *)(v273 + v879 + 2);
            v274[3] = *(_BYTE *)(v273 + v879 + 3);
            v274[4] = *(_BYTE *)(v273 + v879 + 4);
            v275 = (v272 + v879 + 12) & 0xFFFFFFFFFFFFFFF8;
            v276 = (v273 + v879 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v275 = *(_QWORD *)v276;
            *(_QWORD *)(v275 + 8) = *(_QWORD *)(v276 + 8);
            *(_BYTE *)(v275 + 16) = *(_BYTE *)(v276 + 16);
            *(_BYTE *)(v275 + 17) = *(_BYTE *)(v276 + 17);
            *(_BYTE *)(v275 + 18) = *(_BYTE *)(v276 + 18);
            *(_BYTE *)(v275 + 19) = *(_BYTE *)(v276 + 19);
            v277 = (v275 + 27) & 0xFFFFFFFFFFFFFFF8;
            v278 = (v276 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v277 = *(_QWORD *)v278;
            *(_BYTE *)(v277 + 8) = *(_BYTE *)(v278 + 8);
            *(_BYTE *)(v277 + 9) = *(_BYTE *)(v278 + 9);
            *(_BYTE *)(v277 + 10) = *(_BYTE *)(v278 + 10);
            *(_BYTE *)(v277 + 11) = *(_BYTE *)(v278 + 11);
            *(_BYTE *)(v277 + 12) = *(_BYTE *)(v278 + 12);
            v279 = (_QWORD *)((v275 + 47) & 0xFFFFFFFFFFFFF8);
            v280 = (_QWORD *)((v276 + 47) & 0xFFFFFFFFFFFFF8);
            *v279 = *v280;
            v281 = ((unint64_t)v279 + 15) & 0xFFFFFFFFFFFFFFF8;
            v282 = ((unint64_t)v280 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v281 = *(_QWORD *)v282;
            *(_BYTE *)(v281 + 8) = *(_BYTE *)(v282 + 8);
            *(_BYTE *)(v281 + 9) = *(_BYTE *)(v282 + 9);
            v283 = (void *)((v852 + v281) & v257);
            v284 = (const void *)((v852 + v282) & v257);
            v285 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v251 + 48);
            swift_bridgeObjectRetain();
            if (v285(v284, 1, v878))
            {
              memcpy(v283, v284, v882);
            }
            else
            {
              v271((uint64_t)v283, (uint64_t)v284, v878);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v251 + 56))(v283, 0, 1, v878);
            }
            v92 = v955;
            v338 = (_QWORD *)(((unint64_t)v283 + v851) & 0xFFFFFFFFFFFFFFF8);
            v339 = (_QWORD *)(((unint64_t)v284 + v851) & 0xFFFFFFFFFFFFFFF8);
            *v338 = *v339;
            v340 = ((unint64_t)v338 + 15) & 0xFFFFFFFFFFFFFFF8;
            v341 = ((unint64_t)v339 + 15) & 0xFFFFFFFFFFFFFFF8;
            v342 = *(_QWORD *)v341;
            *(_BYTE *)(v340 + 8) = *(_BYTE *)(v341 + 8);
            *(_QWORD *)v340 = v342;
            v343 = (_QWORD *)(((unint64_t)v338 + 31) & 0xFFFFFFFFFFFFF8);
            v344 = (_QWORD *)(((unint64_t)v339 + 31) & 0xFFFFFFFFFFFFF8);
            *v343 = *v344;
            v345 = ((unint64_t)v343 + 15) & 0xFFFFFFFFFFFFFFF8;
            v346 = (uint64_t *)(((unint64_t)v344 + 15) & 0xFFFFFFFFFFFFFFF8);
            v347 = v346[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((v347 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)v345 = *(_OWORD *)v346;
            }
            else
            {
              v398 = *v346;
              sub_23AAAE668(*v346, v347);
              *(_QWORD *)v345 = v398;
              *(_QWORD *)(v345 + 8) = v347;
            }
            v399 = (v345 + 19) & 0xFFFFFFFFFFFFFFF8;
            v400 = ((unint64_t)v346 + 19) & 0xFFFFFFFFFFFFFFF8;
            v401 = *(_QWORD *)v400;
            *(_BYTE *)(v399 + 8) = *(_BYTE *)(v400 + 8);
            *(_QWORD *)v399 = v401;
            *(_BYTE *)(v399 + 9) = *(_BYTE *)(v400 + 9);
            v402 = (v399 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v403 = (v400 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v404 = *(_DWORD *)v403;
            *(_BYTE *)(v402 + 4) = *(_BYTE *)(v403 + 4);
            *(_DWORD *)v402 = v404;
            v405 = (_QWORD *)((v399 + 25) & 0xFFFFFFFFFFFFFFF8);
            v406 = (_QWORD *)((v400 + 25) & 0xFFFFFFFFFFFFFFF8);
            *v405 = *v406;
            v405[1] = v406[1];
            v407 = v265 + v946;
            v408 = v266 + v946;
            v409 = *(_QWORD *)(v266 + v946 + 16);
            if (v409 >= 0xFFFFFFFF)
              LODWORD(v409) = -1;
            v410 = v409 - 1;
            swift_bridgeObjectRetain();
            if (v410 < 0)
            {
              *(_QWORD *)v407 = *(_QWORD *)v408;
              *(_BYTE *)(v407 + 8) = *(_BYTE *)(v408 + 8);
              *(_BYTE *)(v407 + 9) = *(_BYTE *)(v408 + 9);
              v435 = *(void **)(v408 + 16);
              v436 = v435;
              *(_QWORD *)(v407 + 16) = v435;
              v437 = *(void **)(v408 + 24);
              v438 = v437;
              *(_QWORD *)(v407 + 24) = v437;
              *(_BYTE *)(v407 + 32) = *(_BYTE *)(v408 + 32);
              *(_BYTE *)(v407 + 33) = *(_BYTE *)(v408 + 33);
              *(_BYTE *)(v407 + 34) = *(_BYTE *)(v408 + 34);
              *(_QWORD *)(v407 + 40) = *(_QWORD *)(v408 + 40);
              *(_QWORD *)(v407 + 48) = *(_QWORD *)(v408 + 48);
              *(_QWORD *)(v407 + 56) = *(_QWORD *)(v408 + 56);
              *(_QWORD *)(v407 + 64) = *(_QWORD *)(v408 + 64);
              *(_BYTE *)(v407 + 72) = *(_BYTE *)(v408 + 72);
              *(_QWORD *)(v407 + 80) = *(_QWORD *)(v408 + 80);
              *(_QWORD *)(v407 + 88) = *(_QWORD *)(v408 + 88);
              v975 = *(void **)(v408 + 96);
              *(_QWORD *)(v407 + 96) = v975;
              *(_BYTE *)(v407 + 104) = *(_BYTE *)(v408 + 104);
              *(_BYTE *)(v407 + 105) = *(_BYTE *)(v408 + 105);
              *(_QWORD *)(v407 + 112) = *(_QWORD *)(v408 + 112);
              *(_QWORD *)(v407 + 120) = *(_QWORD *)(v408 + 120);
              *(_QWORD *)(v407 + 128) = *(_QWORD *)(v408 + 128);
              *(_QWORD *)(v407 + 136) = *(_QWORD *)(v408 + 136);
              *(_QWORD *)(v407 + 144) = *(_QWORD *)(v408 + 144);
              *(_QWORD *)(v407 + 152) = *(_QWORD *)(v408 + 152);
              *(_QWORD *)(v407 + 160) = *(_QWORD *)(v408 + 160);
              *(_QWORD *)(v407 + 168) = *(_QWORD *)(v408 + 168);
              *(_BYTE *)(v407 + 176) = *(_BYTE *)(v408 + 176);
              *(_QWORD *)(v407 + 184) = *(_QWORD *)(v408 + 184);
              v439 = *(_QWORD *)(v408 + 192);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v440 = v975;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v439)
              {
                *(_QWORD *)(v407 + 192) = v439;
                *(_QWORD *)(v407 + 200) = *(_QWORD *)(v408 + 200);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v407 + 192) = *(_OWORD *)(v408 + 192);
              }
              v92 = v955;
              v68 = a1;
              v249 = v879;
              v60 = v926;
              v248 = v874;
              v89 = v917;
              *(_QWORD *)(v407 + 208) = *(_QWORD *)(v408 + 208);
              *(_QWORD *)(v407 + 216) = *(_QWORD *)(v408 + 216);
              *(_QWORD *)(v407 + 224) = *(_QWORD *)(v408 + 224);
              *(_QWORD *)(v407 + 232) = *(_QWORD *)(v408 + 232);
              *(_QWORD *)(v407 + 240) = *(_QWORD *)(v408 + 240);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              v411 = *(_OWORD *)v408;
              v412 = *(_OWORD *)(v408 + 16);
              v413 = *(_OWORD *)(v408 + 48);
              *(_OWORD *)(v407 + 32) = *(_OWORD *)(v408 + 32);
              *(_OWORD *)(v407 + 48) = v413;
              *(_OWORD *)v407 = v411;
              *(_OWORD *)(v407 + 16) = v412;
              v414 = *(_OWORD *)(v408 + 64);
              v415 = *(_OWORD *)(v408 + 80);
              v416 = *(_OWORD *)(v408 + 112);
              *(_OWORD *)(v407 + 96) = *(_OWORD *)(v408 + 96);
              *(_OWORD *)(v407 + 112) = v416;
              *(_OWORD *)(v407 + 64) = v414;
              *(_OWORD *)(v407 + 80) = v415;
              v417 = *(_OWORD *)(v408 + 128);
              v418 = *(_OWORD *)(v408 + 144);
              v419 = *(_OWORD *)(v408 + 176);
              *(_OWORD *)(v407 + 160) = *(_OWORD *)(v408 + 160);
              *(_OWORD *)(v407 + 176) = v419;
              *(_OWORD *)(v407 + 128) = v417;
              *(_OWORD *)(v407 + 144) = v418;
              v420 = *(_OWORD *)(v408 + 192);
              v421 = *(_OWORD *)(v408 + 208);
              v422 = *(_OWORD *)(v408 + 224);
              *(_QWORD *)(v407 + 240) = *(_QWORD *)(v408 + 240);
              *(_OWORD *)(v407 + 208) = v421;
              *(_OWORD *)(v407 + 224) = v422;
              *(_OWORD *)(v407 + 192) = v420;
              v249 = v879;
              v60 = v926;
              v248 = v874;
              v89 = v917;
            }
            v736 = (_OWORD *)((v407 + 255) & 0xFFFFFFFFFFFFFFF8);
            v737 = (__int128 *)((v408 + 255) & 0xFFFFFFFFFFFFFFF8);
            v738 = *v737;
            *(_OWORD *)((char *)v736 + 9) = *(__int128 *)((char *)v737 + 9);
            *v736 = v738;
            v739 = (v407 + 287) & 0xFFFFFFFFFFFFFFF8;
            v740 = (v408 + 287) & 0xFFFFFFFFFFFFFFF8;
            v741 = *(_OWORD *)v740;
            *(_BYTE *)(v739 + 16) = *(_BYTE *)(v740 + 16);
            *(_OWORD *)v739 = v741;
            v742 = (_QWORD *)((v407 + 311) & 0xFFFFFFFFFFFFF8);
            v743 = (v408 + 311) & 0xFFFFFFFFFFFFF8;
            v744 = *(_QWORD *)v743;
            v743 += 15;
            *v742 = v744;
            v745 = (_QWORD *)(((unint64_t)v742 + 15) & 0xFFFFFFFFFFFFFFF8);
            v746 = *(_QWORD *)(v743 & 0xFFFFFFFFFFFFFFF8);
            v747 = *(_QWORD *)((v743 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_23AA7F2D4(v746, v747);
            *v745 = v746;
            v745[1] = v747;
            v247 = v931;
            if (!v860)
              goto LABEL_180;
LABEL_337:
            v748 = ((((v950
                     + ((((((((((v881 + v249 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 19) & 0xFFFFFFFFFFFFFFF8)
                       + 25) & 0xFFFFFFFFFFFFFFF8)
                     + 327) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 16;
            v749 = (void *)(((unint64_t)v247 + v942 + v748) & v889);
            v750 = (const void *)(((unint64_t)v89 + v942 + v748) & v889);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v884 + 48))(v750, 1, AssociatedTypeWitness))
            {
              memcpy(v749, v750, v842);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v884 + 16))(v749, v750, AssociatedTypeWitness);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v884 + 56))(v749, 0, 1, AssociatedTypeWitness);
            }
            v751 = (char *)(((unint64_t)v749 + v849) & v69);
            v752 = (char *)(((unint64_t)v750 + v849) & v69);
            if (v858 == v873)
            {
              v753 = (*(uint64_t (**)(unint64_t))(v869 + 48))(((unint64_t)v750 + v849) & v69);
            }
            else
            {
              v754 = (uint64_t *)((unint64_t)&v752[v248] & 0xFFFFFFFFFFFFFFF8);
              if (v845 <= 0x7FFFFFFE)
              {
                v755 = *v754;
                if ((unint64_t)*v754 >= 0xFFFFFFFF)
                  LODWORD(v755) = -1;
                if ((v755 + 1) >= 2)
                  goto LABEL_349;
                goto LABEL_351;
              }
              v753 = (*(uint64_t (**)(unint64_t))(v855 + 48))(((unint64_t)v754 + v854) & v894);
            }
            if (v753)
            {
LABEL_349:
              memcpy(v751, v752, v92);
LABEL_352:
              *(_QWORD *)&v751[v92] = *(_QWORD *)&v752[v92];
              v764 = (_QWORD *)((unint64_t)&v751[v92 + 15] & 0xFFFFFFFFFFFFF8);
              v765 = (_QWORD *)((unint64_t)&v752[v92 + 15] & 0xFFFFFFFFFFFFFFF8);
              *v764 = *v765;
              v303 = *(void **)(((unint64_t)v765 + 15) & 0xFFFFFFFFFFFFF8);
              *(_QWORD *)(((unint64_t)v764 + 15) & 0xFFFFFFFFFFFFF8) = v303;
              v304 = 1;
LABEL_353:
              *((_BYTE *)v68 + v60) = v304;
              v766 = v303;
              goto LABEL_354;
            }
            v754 = (uint64_t *)((unint64_t)&v752[v248] & 0xFFFFFFFFFFFFFFF8);
LABEL_351:
            (*(void (**)(char *, char *, uint64_t))(v869 + 16))(v751, v752, v870);
            v756 = (_QWORD *)((unint64_t)&v751[v248] & 0xFFFFFFFFFFFFFFF8);
            *v756 = *v754;
            v757 = ((unint64_t)v756 + v854) & v894;
            v758 = ((unint64_t)v754 + v854) & v894;
            v759 = *(void (**)(unint64_t, unint64_t, uint64_t))(v855 + 16);
            swift_bridgeObjectRetain();
            v759(v757, v758, v856);
            v760 = (_QWORD *)((v848 + v757) & 0xFFFFFFFFFFFFF8);
            v761 = (_QWORD *)((v848 + v758) & 0xFFFFFFFFFFFFF8);
            *v760 = *v761;
            v762 = (_QWORD *)(((unint64_t)v760 + 15) & 0xFFFFFFFFFFFFFFF8);
            v763 = (_QWORD *)(((unint64_t)v761 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v762 = *v763;
            v762[1] = v763[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_352;
          }
          v148 = ((unint64_t)v89 + v919) & v933;
          v93 = v86;
          v149 = (v875 + v148) & v86;
          v91 = v880;
          if (v872 == v862)
          {
            if (v857 == v872)
            {
              v90 = (*(uint64_t (**)(unint64_t))(v867 + 48))((v875 + v148) & v86);
              v91 = v880;
              v93 = v86;
              v92 = v955;
              v68 = a1;
              goto LABEL_178;
            }
            v443 = (unint64_t *)((v906 + v149) & 0xFFFFFFFFFFFFFFF8);
            v92 = v955;
            v68 = a1;
            if (v844 <= 0x7FFFFFFE)
            {
              v444 = *v443;
              goto LABEL_389;
            }
            v455 = ((unint64_t)v443 + v938) & v911;
            v456 = *(uint64_t (**)(unint64_t))(v967 + 48);
          }
          else
          {
            v245 = v922 + v149;
            v68 = a1;
            if ((v837 & 0x80000000) == 0)
            {
              v246 = *(_QWORD *)(v245 + 8);
              if (v246 >= 0xFFFFFFFF)
                LODWORD(v246) = -1;
              v90 = v246 + 1;
              v92 = v955;
              goto LABEL_178;
            }
            v455 = (v859 + ((v947 + v245) & v928)) & v71;
            v92 = v955;
            if (v860 <= 0x7FFFFFFD)
            {
              v444 = *(_QWORD *)(((v835 + ((v853 + v455) & v71)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_389:
              if (v444 >= 0xFFFFFFFF)
                LODWORD(v444) = -1;
              if ((v444 + 1) >= 2)
                goto LABEL_179;
              goto LABEL_182;
            }
            v456 = *(uint64_t (**)(unint64_t))(v880 + 48);
          }
          v90 = v456(v455);
          v91 = v880;
          goto LABEL_95;
        case 2:
          v94 = ~(unint64_t)v904;
          (*(void (**)(_QWORD *))(v885 + 16))(a1);
          v95 = (void *)(((unint64_t)a1 + v51) & ~v942);
          v96 = (const void *)(((unint64_t)a2 + v51) & ~v942);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v884 + 48))(v96, 1, AssociatedTypeWitness))
          {
            memcpy(v95, v96, v842);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v884 + 16))(v95, v96, AssociatedTypeWitness);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v884 + 56))(v95, 0, 1, AssociatedTypeWitness);
          }
          v158 = (char *)(((unint64_t)v95 + v849) & v69);
          v159 = (char *)(((unint64_t)v96 + v849) & v69);
          v68 = a1;
          if (v858 == v873)
          {
            v160 = (*(uint64_t (**)(unint64_t))(v869 + 48))(((unint64_t)v96 + v849) & v69);
          }
          else
          {
            v161 = (uint64_t *)((unint64_t)&v159[v874] & 0xFFFFFFFFFFFFFFF8);
            if (v845 <= 0x7FFFFFFE)
            {
              v162 = *v161;
              if ((unint64_t)*v161 >= 0xFFFFFFFF)
                LODWORD(v162) = -1;
              if ((v162 + 1) >= 2)
                goto LABEL_202;
              goto LABEL_204;
            }
            v160 = (*(uint64_t (**)(unint64_t))(v855 + 48))(((unint64_t)v161 + v854) & v94);
          }
          if (v160)
          {
LABEL_202:
            memcpy(v158, v159, v955);
            goto LABEL_205;
          }
          v161 = (uint64_t *)((unint64_t)&v159[v874] & 0xFFFFFFFFFFFFFFF8);
LABEL_204:
          (*(void (**)(char *, char *, uint64_t))(v869 + 16))(v158, v159, v870);
          v294 = (_QWORD *)((unint64_t)&v158[v874] & 0xFFFFFFFFFFFFFFF8);
          *v294 = *v161;
          v295 = ((unint64_t)v294 + v854) & v94;
          v296 = ((unint64_t)v161 + v854) & v94;
          v297 = *(void (**)(unint64_t, unint64_t, uint64_t))(v855 + 16);
          swift_bridgeObjectRetain();
          v297(v295, v296, v856);
          v298 = (_QWORD *)((v848 + v295) & 0xFFFFFFFFFFFFF8);
          v299 = (_QWORD *)((v848 + v296) & 0xFFFFFFFFFFFFF8);
          *v298 = *v299;
          v300 = (_QWORD *)(((unint64_t)v298 + 15) & 0xFFFFFFFFFFFFFFF8);
          v301 = (_QWORD *)(((unint64_t)v299 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v300 = *v301;
          v300[1] = v301[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_205:
          v302 = &v158[v955];
          *v302 = v159[v955];
          v303 = *(void **)&v159[v955 + 8];
          *((_QWORD *)v302 + 1) = v303;
          v304 = 2;
          goto LABEL_353;
        case 3:
          v97 = ~v27;
          v907 = v30;
          v912 = ~v26;
          v939 = v26 + 8;
          v968 = *(_QWORD *)(v871 - 8);
          v901 = *(_QWORD *)(v25 + 64) + 7;
          v951 = v46;
          v98 = *(void (**)(void *, const void *, uint64_t))(v885 + 16);
          v99 = v64;
          ((void (*)(_QWORD *))v98)(a1);
          v100 = (void *)(((unint64_t)a1 + v861) & v75);
          v101 = (const void *)(((unint64_t)v99 + v861) & v75);
          if (v864 == v862)
          {
            v102 = (*(uint64_t (**)(const void *))(v885 + 48))(v101);
            v103 = v880;
LABEL_100:
            v104 = v97;
            v68 = a1;
LABEL_101:
            if (v102)
            {
LABEL_102:
              memcpy(v100, v101, __n);
              goto LABEL_103;
            }
            v150 = ((unint64_t)v101 + v919) & v933;
            v151 = (v875 + v150) & v104;
LABEL_165:
            v924 = v60;
            v169 = v100;
            v944 = v101;
            v170 = v100;
            v171 = v104;
            v172 = v103;
            v98(v169, v101, v886);
            v956 = v170;
            v98((void *)(((unint64_t)v170 + v919) & v933), (const void *)v150, v886);
            v173 = (v875 + (((unint64_t)v170 + v919) & v933)) & v171;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v867 + 16))(v173, v151, v868);
            v174 = (_QWORD *)((v907 + v173) & 0xFFFFFFFFFFFFFFF8);
            v175 = (_QWORD *)((v907 + v151) & 0xFFFFFFFFFFFFFFF8);
            *v174 = *v175;
            v176 = ((unint64_t)v174 + v939) & v912;
            v177 = v71;
            v178 = ((unint64_t)v175 + v939) & v912;
            v179 = *(void (**)(unint64_t, unint64_t, uint64_t))(v968 + 16);
            swift_bridgeObjectRetain();
            v179(v176, v178, v871);
            v180 = (_QWORD *)((v901 + v176) & 0xFFFFFFFFFFFFF8);
            v181 = (_QWORD *)((v901 + v178) & 0xFFFFFFFFFFFFF8);
            *v180 = *v181;
            v182 = (_QWORD *)(((unint64_t)v180 + 15) & 0xFFFFFFFFFFFFFFF8);
            v183 = (_QWORD *)(((unint64_t)v181 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v182 = *v183;
            v182[1] = v183[1];
            v184 = (_QWORD *)(v922 + v173);
            *v184 = *(_QWORD *)(v922 + v151);
            v184[1] = *(_QWORD *)(v922 + v151 + 8);
            v185 = (v947 + v922 + v173) & v928;
            v186 = (v947 + v922 + v151) & v928;
            *(_BYTE *)v185 = *(_BYTE *)v186;
            v187 = v185 | 4;
            v188 = *(_DWORD *)(v186 | 4);
            *(_BYTE *)(v187 + 4) = *(_BYTE *)((v186 | 4) + 4);
            *(_DWORD *)v187 = v188;
            *(_WORD *)(v185 + 10) = *(_WORD *)(v186 + 0xA);
            v189 = (v859 + v185) & v177;
            v190 = (v859 + v186) & v177;
            v191 = *(void (**)(uint64_t, uint64_t, uint64_t))(v172 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v191(v189, v190, v878);
            v192 = (v853 + v189) & v177;
            v193 = (v853 + v190) & v177;
            v191(v192, v193, v878);
            v194 = (_BYTE *)(v192 + v879);
            *v194 = *(_BYTE *)(v193 + v879);
            v194[1] = *(_BYTE *)(v193 + v879 + 1);
            v194[2] = *(_BYTE *)(v193 + v879 + 2);
            v194[3] = *(_BYTE *)(v193 + v879 + 3);
            v194[4] = *(_BYTE *)(v193 + v879 + 4);
            v195 = (v192 + v879 + 12) & 0xFFFFFFFFFFFFFFF8;
            v196 = (v193 + v879 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v195 = *(_QWORD *)v196;
            *(_QWORD *)(v195 + 8) = *(_QWORD *)(v196 + 8);
            *(_BYTE *)(v195 + 16) = *(_BYTE *)(v196 + 16);
            *(_BYTE *)(v195 + 17) = *(_BYTE *)(v196 + 17);
            *(_BYTE *)(v195 + 18) = *(_BYTE *)(v196 + 18);
            *(_BYTE *)(v195 + 19) = *(_BYTE *)(v196 + 19);
            v197 = (v195 + 27) & 0xFFFFFFFFFFFFFFF8;
            v198 = (v196 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v197 = *(_QWORD *)v198;
            *(_BYTE *)(v197 + 8) = *(_BYTE *)(v198 + 8);
            *(_BYTE *)(v197 + 9) = *(_BYTE *)(v198 + 9);
            *(_BYTE *)(v197 + 10) = *(_BYTE *)(v198 + 10);
            *(_BYTE *)(v197 + 11) = *(_BYTE *)(v198 + 11);
            *(_BYTE *)(v197 + 12) = *(_BYTE *)(v198 + 12);
            v199 = (_QWORD *)((v195 + 47) & 0xFFFFFFFFFFFFF8);
            v200 = (_QWORD *)((v196 + 47) & 0xFFFFFFFFFFFFF8);
            *v199 = *v200;
            v201 = ((unint64_t)v199 + 15) & 0xFFFFFFFFFFFFFFF8;
            v202 = ((unint64_t)v200 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v201 = *(_QWORD *)v202;
            *(_BYTE *)(v201 + 8) = *(_BYTE *)(v202 + 8);
            *(_BYTE *)(v201 + 9) = *(_BYTE *)(v202 + 9);
            v203 = (void *)((v852 + v201) & v177);
            v204 = (const void *)((v852 + v202) & v177);
            v205 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v172 + 48);
            swift_bridgeObjectRetain();
            if (v205(v204, 1, v878))
            {
              memcpy(v203, v204, v882);
            }
            else
            {
              v191((uint64_t)v203, (uint64_t)v204, v878);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v172 + 56))(v203, 0, 1, v878);
            }
            v100 = v956;
            v318 = (_QWORD *)(((unint64_t)v203 + v851) & 0xFFFFFFFFFFFFFFF8);
            v319 = (_QWORD *)(((unint64_t)v204 + v851) & 0xFFFFFFFFFFFFFFF8);
            *v318 = *v319;
            v320 = ((unint64_t)v318 + 15) & 0xFFFFFFFFFFFFFFF8;
            v321 = ((unint64_t)v319 + 15) & 0xFFFFFFFFFFFFFFF8;
            v322 = *(_QWORD *)v321;
            *(_BYTE *)(v320 + 8) = *(_BYTE *)(v321 + 8);
            *(_QWORD *)v320 = v322;
            v323 = (_QWORD *)(((unint64_t)v318 + 31) & 0xFFFFFFFFFFFFF8);
            v324 = (_QWORD *)(((unint64_t)v319 + 31) & 0xFFFFFFFFFFFFF8);
            *v323 = *v324;
            v325 = ((unint64_t)v323 + 15) & 0xFFFFFFFFFFFFFFF8;
            v326 = (uint64_t *)(((unint64_t)v324 + 15) & 0xFFFFFFFFFFFFFFF8);
            v327 = v326[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((v327 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)v325 = *(_OWORD *)v326;
            }
            else
            {
              v348 = *v326;
              sub_23AAAE668(*v326, v327);
              *(_QWORD *)v325 = v348;
              *(_QWORD *)(v325 + 8) = v327;
            }
            v349 = (v325 + 19) & 0xFFFFFFFFFFFFFFF8;
            v350 = ((unint64_t)v326 + 19) & 0xFFFFFFFFFFFFFFF8;
            v351 = *(_QWORD *)v350;
            *(_BYTE *)(v349 + 8) = *(_BYTE *)(v350 + 8);
            *(_QWORD *)v349 = v351;
            *(_BYTE *)(v349 + 9) = *(_BYTE *)(v350 + 9);
            v352 = (v349 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v353 = (v350 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v354 = *(_DWORD *)v353;
            *(_BYTE *)(v352 + 4) = *(_BYTE *)(v353 + 4);
            *(_DWORD *)v352 = v354;
            v355 = (_QWORD *)((v349 + 25) & 0xFFFFFFFFFFFFFFF8);
            v356 = (_QWORD *)((v350 + 25) & 0xFFFFFFFFFFFFFFF8);
            *v355 = *v356;
            v355[1] = v356[1];
            v357 = v185 + v946;
            v358 = v186 + v946;
            v359 = *(_QWORD *)(v186 + v946 + 16);
            if (v359 >= 0xFFFFFFFF)
              LODWORD(v359) = -1;
            v360 = v359 - 1;
            swift_bridgeObjectRetain();
            if (v360 < 0)
            {
              *(_QWORD *)v357 = *(_QWORD *)v358;
              *(_BYTE *)(v357 + 8) = *(_BYTE *)(v358 + 8);
              *(_BYTE *)(v357 + 9) = *(_BYTE *)(v358 + 9);
              v423 = *(void **)(v358 + 16);
              v424 = v423;
              *(_QWORD *)(v357 + 16) = v423;
              v425 = *(void **)(v358 + 24);
              v426 = v425;
              *(_QWORD *)(v357 + 24) = v425;
              *(_BYTE *)(v357 + 32) = *(_BYTE *)(v358 + 32);
              *(_BYTE *)(v357 + 33) = *(_BYTE *)(v358 + 33);
              *(_BYTE *)(v357 + 34) = *(_BYTE *)(v358 + 34);
              *(_QWORD *)(v357 + 40) = *(_QWORD *)(v358 + 40);
              *(_QWORD *)(v357 + 48) = *(_QWORD *)(v358 + 48);
              *(_QWORD *)(v357 + 56) = *(_QWORD *)(v358 + 56);
              *(_QWORD *)(v357 + 64) = *(_QWORD *)(v358 + 64);
              *(_BYTE *)(v357 + 72) = *(_BYTE *)(v358 + 72);
              *(_QWORD *)(v357 + 80) = *(_QWORD *)(v358 + 80);
              *(_QWORD *)(v357 + 88) = *(_QWORD *)(v358 + 88);
              v973 = *(void **)(v358 + 96);
              *(_QWORD *)(v357 + 96) = v973;
              *(_BYTE *)(v357 + 104) = *(_BYTE *)(v358 + 104);
              *(_BYTE *)(v357 + 105) = *(_BYTE *)(v358 + 105);
              *(_QWORD *)(v357 + 112) = *(_QWORD *)(v358 + 112);
              *(_QWORD *)(v357 + 120) = *(_QWORD *)(v358 + 120);
              *(_QWORD *)(v357 + 128) = *(_QWORD *)(v358 + 128);
              *(_QWORD *)(v357 + 136) = *(_QWORD *)(v358 + 136);
              *(_QWORD *)(v357 + 144) = *(_QWORD *)(v358 + 144);
              *(_QWORD *)(v357 + 152) = *(_QWORD *)(v358 + 152);
              *(_QWORD *)(v357 + 160) = *(_QWORD *)(v358 + 160);
              *(_QWORD *)(v357 + 168) = *(_QWORD *)(v358 + 168);
              *(_BYTE *)(v357 + 176) = *(_BYTE *)(v358 + 176);
              *(_QWORD *)(v357 + 184) = *(_QWORD *)(v358 + 184);
              v427 = *(_QWORD *)(v358 + 192);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v428 = v973;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v427)
              {
                *(_QWORD *)(v357 + 192) = v427;
                *(_QWORD *)(v357 + 200) = *(_QWORD *)(v358 + 200);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v357 + 192) = *(_OWORD *)(v358 + 192);
              }
              v100 = v956;
              v68 = a1;
              v60 = v924;
              v101 = v944;
              *(_QWORD *)(v357 + 208) = *(_QWORD *)(v358 + 208);
              *(_QWORD *)(v357 + 216) = *(_QWORD *)(v358 + 216);
              *(_QWORD *)(v357 + 224) = *(_QWORD *)(v358 + 224);
              *(_QWORD *)(v357 + 232) = *(_QWORD *)(v358 + 232);
              *(_QWORD *)(v357 + 240) = *(_QWORD *)(v358 + 240);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              v361 = *(_OWORD *)v358;
              v362 = *(_OWORD *)(v358 + 16);
              v363 = *(_OWORD *)(v358 + 48);
              *(_OWORD *)(v357 + 32) = *(_OWORD *)(v358 + 32);
              *(_OWORD *)(v357 + 48) = v363;
              *(_OWORD *)v357 = v361;
              *(_OWORD *)(v357 + 16) = v362;
              v364 = *(_OWORD *)(v358 + 64);
              v365 = *(_OWORD *)(v358 + 80);
              v366 = *(_OWORD *)(v358 + 112);
              *(_OWORD *)(v357 + 96) = *(_OWORD *)(v358 + 96);
              *(_OWORD *)(v357 + 112) = v366;
              *(_OWORD *)(v357 + 64) = v364;
              *(_OWORD *)(v357 + 80) = v365;
              v367 = *(_OWORD *)(v358 + 128);
              v368 = *(_OWORD *)(v358 + 144);
              v369 = *(_OWORD *)(v358 + 176);
              *(_OWORD *)(v357 + 160) = *(_OWORD *)(v358 + 160);
              *(_OWORD *)(v357 + 176) = v369;
              *(_OWORD *)(v357 + 128) = v367;
              *(_OWORD *)(v357 + 144) = v368;
              v370 = *(_OWORD *)(v358 + 192);
              v371 = *(_OWORD *)(v358 + 208);
              v372 = *(_OWORD *)(v358 + 224);
              *(_QWORD *)(v357 + 240) = *(_QWORD *)(v358 + 240);
              *(_OWORD *)(v357 + 208) = v371;
              *(_OWORD *)(v357 + 224) = v372;
              *(_OWORD *)(v357 + 192) = v370;
              v60 = v924;
              v101 = v944;
            }
            v704 = (_OWORD *)((v357 + 255) & 0xFFFFFFFFFFFFFFF8);
            v705 = (__int128 *)((v358 + 255) & 0xFFFFFFFFFFFFFFF8);
            v706 = *v705;
            *(_OWORD *)((char *)v704 + 9) = *(__int128 *)((char *)v705 + 9);
            *v704 = v706;
            v707 = (v357 + 287) & 0xFFFFFFFFFFFFFFF8;
            v708 = (v358 + 287) & 0xFFFFFFFFFFFFFFF8;
            v709 = *(_OWORD *)v708;
            *(_BYTE *)(v707 + 16) = *(_BYTE *)(v708 + 16);
            *(_OWORD *)v707 = v709;
            v710 = (_QWORD *)((v357 + 311) & 0xFFFFFFFFFFFFF8);
            v711 = (v358 + 311) & 0xFFFFFFFFFFFFF8;
            v712 = *(_QWORD *)v711;
            v711 += 15;
            *v710 = v712;
            v713 = (_QWORD *)(((unint64_t)v710 + 15) & 0xFFFFFFFFFFFFFFF8);
            v714 = *(_QWORD *)(v711 & 0xFFFFFFFFFFFFFFF8);
            v715 = *(_QWORD *)((v711 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_23AA7F2D4(v714, v715);
            *v713 = v714;
            v713[1] = v715;
            v105 = v879;
            if (v860)
            {
LABEL_329:
              v716 = ((((v951
                       + ((((((((((v881 + v105 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                           + 19) & 0xFFFFFFFFFFFFFFF8)
                         + 25) & 0xFFFFFFFFFFFFFFF8)
                       + 327) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 16;
              v717 = (_QWORD *)(((unint64_t)v100 + v716) & 0xFFFFFFFFFFFFFFF8);
              v718 = (_QWORD *)(((unint64_t)v101 + v716) & 0xFFFFFFFFFFFFFFF8);
              *v717 = *v718;
              v717[1] = v718[1];
              *(_QWORD *)(((unint64_t)v717 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v718 + 23) & 0xFFFFFFFFFFFFF8);
              *((_BYTE *)v68 + v60) = 3;
              swift_bridgeObjectRetain();
LABEL_354:
              *((_BYTE *)v68 + v935) = 1;
              return v68;
            }
LABEL_103:
            v105 = v882;
            goto LABEL_329;
          }
          v150 = ((unint64_t)v101 + v919) & v933;
          v104 = v97;
          v151 = (v875 + v150) & v97;
          v103 = v880;
          if (v872 == v862)
          {
            if (v857 == v872)
            {
              v102 = (*(uint64_t (**)(unint64_t))(v867 + 48))((v875 + v150) & v97);
              v103 = v880;
              goto LABEL_100;
            }
            v445 = (unint64_t *)((v907 + v151) & 0xFFFFFFFFFFFFFFF8);
            v68 = a1;
            if (v844 <= 0x7FFFFFFE)
            {
              v446 = *v445;
              goto LABEL_394;
            }
            v457 = ((unint64_t)v445 + v939) & v912;
            v458 = *(uint64_t (**)(unint64_t))(v968 + 48);
          }
          else
          {
            v286 = v922 + v151;
            v68 = a1;
            if ((v837 & 0x80000000) == 0)
            {
              v287 = *(_QWORD *)(v286 + 8);
              if (v287 >= 0xFFFFFFFF)
                LODWORD(v287) = -1;
              v102 = v287 + 1;
              goto LABEL_101;
            }
            v457 = (v859 + ((v947 + v286) & v928)) & v71;
            if (v860 <= 0x7FFFFFFD)
            {
              v446 = *(_QWORD *)(((v835 + ((v853 + v457) & v71)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_394:
              if (v446 >= 0xFFFFFFFF)
                LODWORD(v446) = -1;
              if ((v446 + 1) >= 2)
                goto LABEL_102;
              goto LABEL_165;
            }
            v458 = *(uint64_t (**)(unint64_t))(v880 + 48);
          }
          v102 = v458(v457);
          v103 = v880;
          v104 = v97;
          goto LABEL_101;
        case 4:
          v68 = a1;
          (*(void (**)(_QWORD *))(v885 + 16))(a1);
          v106 = 4;
          goto LABEL_159;
        case 5:
          v68 = a1;
          (*(void (**)(_QWORD *))(v885 + 16))(a1);
          v106 = 5;
          goto LABEL_159;
        case 6:
          (*(void (**)(_QWORD *))(v885 + 16))(a1);
          v68 = a1;
          v107 = (void *)(((unint64_t)a1 + v55) & v76);
          v108 = (const void *)(((unint64_t)a2 + v55) & v76);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v45 + 48))(v108, 1, v841))
          {
            memcpy(v107, v108, v57);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v45 + 16))(v107, v108, v841);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v107, 0, 1, v841);
          }
          v106 = 6;
          goto LABEL_159;
        case 7:
          v68 = a1;
          (*(void (**)(_QWORD *))(v885 + 16))(a1);
          v106 = 7;
LABEL_159:
          *((_BYTE *)v68 + v60) = v106;
          goto LABEL_354;
        default:
          if (v60 <= 3)
            v72 = v60;
          else
            v72 = 4;
          __asm { BR              X14 }
          return result;
      }
    }
    v73 = v923;
    v109 = ~v883;
    v110 = ~v35;
    switch(*((_BYTE *)a2 + v923))
    {
      case 0:
        v111 = ~v43;
        v895 = ~(unint64_t)v904;
        v112 = *(void (**)(void *, const void *, uint64_t))(v884 + 16);
        v68 = a1;
        v113 = a2;
        ((void (*)(_QWORD *))v112)(a1);
        v969 = (void *)(((unint64_t)a1 + v863) & v109);
        v114 = (const void *)(((unint64_t)v113 + v863) & v109);
        v891 = ~(unint64_t)v898;
        if (v948 == v865)
        {
          v115 = (*(uint64_t (**)(const void *))(v884 + 48))(v114);
          v116 = v880;
          v117 = v69;
          v118 = ~v942;
          v119 = v969;
          goto LABEL_274;
        }
        v118 = ~v942;
        v152 = ((unint64_t)v114 + v876) & ~v942;
        v117 = v69;
        v153 = (v877 + v152) & v69;
        if (v873 == v865)
        {
          v116 = v880;
          if (v858 == v873)
          {
            v115 = (*(uint64_t (**)(unint64_t))(v869 + 48))((v877 + v152) & v111);
            v118 = ~v942;
            v117 = v69;
            v119 = v969;
            goto LABEL_274;
          }
          v447 = (unint64_t *)((v874 + v153) & 0xFFFFFFFFFFFFFFF8);
          v119 = v969;
          if (v845 <= 0x7FFFFFFE)
          {
            v448 = *v447;
            goto LABEL_399;
          }
          v115 = (*(uint64_t (**)(unint64_t))(v855 + 48))(((unint64_t)v447 + v854) & v895);
        }
        else
        {
          v288 = v955 + v153;
          v116 = v880;
          if ((v838 & 0x80000000) == 0)
          {
            v289 = *(_QWORD *)(v288 + 8);
            if (v289 >= 0xFFFFFFFF)
              LODWORD(v289) = -1;
            v115 = v289 + 1;
            v119 = v969;
LABEL_274:
            if (v115)
            {
LABEL_275:
              memcpy(v119, v114, v847);
              v462 = v881;
LABEL_276:
              v463 = v882;
              goto LABEL_359;
            }
            v152 = ((unint64_t)v114 + v876) & v118;
            v153 = (v877 + v152) & v117;
LABEL_278:
            v952 = v114;
            v464 = v114;
            v465 = v112;
            v466 = v117;
            v467 = v118;
            v465(v119, v464, AssociatedTypeWitness);
            v468 = ((unint64_t)v119 + v876) & v467;
            v465((void *)v468, (const void *)v152, AssociatedTypeWitness);
            v469 = (v877 + v468) & v466;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v869 + 16))(v469, v153, v870);
            v470 = (_QWORD *)((v874 + v469) & 0xFFFFFFFFFFFFFFF8);
            v471 = (_QWORD *)((v874 + v153) & 0xFFFFFFFFFFFFFFF8);
            *v470 = *v471;
            v472 = ((unint64_t)v470 + v854) & v895;
            v473 = ((unint64_t)v471 + v854) & v895;
            v474 = *(void (**)(unint64_t, unint64_t, uint64_t))(v855 + 16);
            swift_bridgeObjectRetain();
            v474(v472, v473, v856);
            v475 = (_QWORD *)((v848 + v472) & 0xFFFFFFFFFFFFF8);
            v476 = (_QWORD *)((v848 + v473) & 0xFFFFFFFFFFFFF8);
            *v475 = *v476;
            v477 = (_QWORD *)(((unint64_t)v475 + 15) & 0xFFFFFFFFFFFFFFF8);
            v478 = (_QWORD *)(((unint64_t)v476 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v477 = *v478;
            v477[1] = v478[1];
            v479 = (_QWORD *)(v955 + v469);
            *v479 = *(_QWORD *)(v955 + v153);
            v479[1] = *(_QWORD *)(v955 + v153 + 8);
            v480 = (v947 + v955 + v469) & v928;
            v481 = (v947 + v955 + v153) & v928;
            *(_BYTE *)v480 = *(_BYTE *)v481;
            v482 = v480 | 4;
            v483 = *(_DWORD *)(v481 | 4);
            *(_BYTE *)(v482 + 4) = *(_BYTE *)((v481 | 4) + 4);
            *(_DWORD *)v482 = v483;
            *(_WORD *)(v480 + 10) = *(_WORD *)(v481 + 0xA);
            v958 = v480;
            v484 = (v859 + v480) & v891;
            v485 = (v859 + v481) & v891;
            v486 = *(void (**)(unint64_t, unint64_t, uint64_t))(v116 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v486(v484, v485, v878);
            v487 = (v853 + v484) & v891;
            v488 = (v853 + v485) & v891;
            v486(v487, v488, v878);
            v489 = (_BYTE *)(v487 + v879);
            *v489 = *(_BYTE *)(v488 + v879);
            v489[1] = *(_BYTE *)(v488 + v879 + 1);
            v489[2] = *(_BYTE *)(v488 + v879 + 2);
            v489[3] = *(_BYTE *)(v488 + v879 + 3);
            v489[4] = *(_BYTE *)(v488 + v879 + 4);
            v490 = (v487 + v879 + 12) & 0xFFFFFFFFFFFFFFF8;
            v491 = (v488 + v879 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v490 = *(_QWORD *)v491;
            *(_QWORD *)(v490 + 8) = *(_QWORD *)(v491 + 8);
            *(_BYTE *)(v490 + 16) = *(_BYTE *)(v491 + 16);
            *(_BYTE *)(v490 + 17) = *(_BYTE *)(v491 + 17);
            *(_BYTE *)(v490 + 18) = *(_BYTE *)(v491 + 18);
            *(_BYTE *)(v490 + 19) = *(_BYTE *)(v491 + 19);
            v492 = (v490 + 27) & 0xFFFFFFFFFFFFFFF8;
            v493 = (v491 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v492 = *(_QWORD *)v493;
            *(_BYTE *)(v492 + 8) = *(_BYTE *)(v493 + 8);
            *(_BYTE *)(v492 + 9) = *(_BYTE *)(v493 + 9);
            *(_BYTE *)(v492 + 10) = *(_BYTE *)(v493 + 10);
            *(_BYTE *)(v492 + 11) = *(_BYTE *)(v493 + 11);
            *(_BYTE *)(v492 + 12) = *(_BYTE *)(v493 + 12);
            v494 = (_QWORD *)((v490 + 47) & 0xFFFFFFFFFFFFF8);
            v495 = (_QWORD *)((v491 + 47) & 0xFFFFFFFFFFFFF8);
            *v494 = *v495;
            v496 = ((unint64_t)v494 + 15) & 0xFFFFFFFFFFFFFFF8;
            v497 = ((unint64_t)v495 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v496 = *(_QWORD *)v497;
            *(_BYTE *)(v496 + 8) = *(_BYTE *)(v497 + 8);
            *(_BYTE *)(v496 + 9) = *(_BYTE *)(v497 + 9);
            v498 = (void *)((v852 + v496) & v891);
            v499 = (const void *)((v852 + v497) & v891);
            v500 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v116 + 48);
            swift_bridgeObjectRetain();
            if (v500(v499, 1, v878))
            {
              memcpy(v498, v499, v882);
            }
            else
            {
              v486((unint64_t)v498, (unint64_t)v499, v878);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v498, 0, 1, v878);
            }
            v501 = (_QWORD *)(((unint64_t)v498 + v851) & 0xFFFFFFFFFFFFFFF8);
            v502 = (_QWORD *)(((unint64_t)v499 + v851) & 0xFFFFFFFFFFFFFFF8);
            *v501 = *v502;
            v503 = ((unint64_t)v501 + 15) & 0xFFFFFFFFFFFFFFF8;
            v504 = ((unint64_t)v502 + 15) & 0xFFFFFFFFFFFFFFF8;
            v505 = *(_QWORD *)v504;
            *(_BYTE *)(v503 + 8) = *(_BYTE *)(v504 + 8);
            *(_QWORD *)v503 = v505;
            v506 = (_QWORD *)(((unint64_t)v501 + 31) & 0xFFFFFFFFFFFFF8);
            v507 = (_QWORD *)(((unint64_t)v502 + 31) & 0xFFFFFFFFFFFFF8);
            *v506 = *v507;
            v508 = ((unint64_t)v506 + 15) & 0xFFFFFFFFFFFFFFF8;
            v509 = (uint64_t *)(((unint64_t)v507 + 15) & 0xFFFFFFFFFFFFFFF8);
            v510 = v509[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((v510 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)v508 = *(_OWORD *)v509;
            }
            else
            {
              v511 = *v509;
              sub_23AAAE668(*v509, v510);
              *(_QWORD *)v508 = v511;
              *(_QWORD *)(v508 + 8) = v510;
            }
            v512 = (v508 + 19) & 0xFFFFFFFFFFFFFFF8;
            v513 = ((unint64_t)v509 + 19) & 0xFFFFFFFFFFFFFFF8;
            v514 = *(_QWORD *)v513;
            *(_BYTE *)(v512 + 8) = *(_BYTE *)(v513 + 8);
            *(_QWORD *)v512 = v514;
            *(_BYTE *)(v512 + 9) = *(_BYTE *)(v513 + 9);
            v515 = (v512 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v516 = (v513 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v517 = *(_DWORD *)v516;
            *(_BYTE *)(v515 + 4) = *(_BYTE *)(v516 + 4);
            *(_DWORD *)v515 = v517;
            v518 = (_QWORD *)((v512 + 25) & 0xFFFFFFFFFFFFFFF8);
            v519 = (_QWORD *)((v513 + 25) & 0xFFFFFFFFFFFFFFF8);
            *v518 = *v519;
            v518[1] = v519[1];
            v520 = v946 + v958;
            v521 = v946 + v481;
            v522 = *(_QWORD *)(v946 + v481 + 16);
            if (v522 >= 0xFFFFFFFF)
              LODWORD(v522) = -1;
            v523 = v522 - 1;
            swift_bridgeObjectRetain();
            if (v523 < 0)
            {
              *(_QWORD *)v520 = *(_QWORD *)v521;
              *(_BYTE *)(v520 + 8) = *(_BYTE *)(v521 + 8);
              *(_BYTE *)(v520 + 9) = *(_BYTE *)(v521 + 9);
              v536 = *(void **)(v521 + 16);
              v537 = v536;
              *(_QWORD *)(v520 + 16) = v536;
              v538 = *(void **)(v521 + 24);
              v539 = v538;
              *(_QWORD *)(v520 + 24) = v538;
              *(_BYTE *)(v520 + 32) = *(_BYTE *)(v521 + 32);
              *(_BYTE *)(v520 + 33) = *(_BYTE *)(v521 + 33);
              *(_BYTE *)(v520 + 34) = *(_BYTE *)(v521 + 34);
              *(_QWORD *)(v520 + 40) = *(_QWORD *)(v521 + 40);
              *(_QWORD *)(v520 + 48) = *(_QWORD *)(v521 + 48);
              *(_QWORD *)(v520 + 56) = *(_QWORD *)(v521 + 56);
              *(_QWORD *)(v520 + 64) = *(_QWORD *)(v521 + 64);
              *(_BYTE *)(v520 + 72) = *(_BYTE *)(v521 + 72);
              *(_QWORD *)(v520 + 80) = *(_QWORD *)(v521 + 80);
              *(_QWORD *)(v520 + 88) = *(_QWORD *)(v521 + 88);
              v959 = *(void **)(v521 + 96);
              *(_QWORD *)(v520 + 96) = v959;
              *(_BYTE *)(v520 + 104) = *(_BYTE *)(v521 + 104);
              *(_BYTE *)(v520 + 105) = *(_BYTE *)(v521 + 105);
              *(_QWORD *)(v520 + 112) = *(_QWORD *)(v521 + 112);
              *(_QWORD *)(v520 + 120) = *(_QWORD *)(v521 + 120);
              *(_QWORD *)(v520 + 128) = *(_QWORD *)(v521 + 128);
              *(_QWORD *)(v520 + 136) = *(_QWORD *)(v521 + 136);
              *(_QWORD *)(v520 + 144) = *(_QWORD *)(v521 + 144);
              *(_QWORD *)(v520 + 152) = *(_QWORD *)(v521 + 152);
              *(_QWORD *)(v520 + 160) = *(_QWORD *)(v521 + 160);
              *(_QWORD *)(v520 + 168) = *(_QWORD *)(v521 + 168);
              *(_BYTE *)(v520 + 176) = *(_BYTE *)(v521 + 176);
              *(_QWORD *)(v520 + 184) = *(_QWORD *)(v521 + 184);
              v540 = *(_QWORD *)(v521 + 192);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v541 = v959;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v540)
              {
                *(_QWORD *)(v520 + 192) = v540;
                *(_QWORD *)(v520 + 200) = *(_QWORD *)(v521 + 200);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v520 + 192) = *(_OWORD *)(v521 + 192);
              }
              v68 = a1;
              v462 = v881;
              v73 = v923;
              *(_QWORD *)(v520 + 208) = *(_QWORD *)(v521 + 208);
              *(_QWORD *)(v520 + 216) = *(_QWORD *)(v521 + 216);
              *(_QWORD *)(v520 + 224) = *(_QWORD *)(v521 + 224);
              *(_QWORD *)(v520 + 232) = *(_QWORD *)(v521 + 232);
              *(_QWORD *)(v520 + 240) = *(_QWORD *)(v521 + 240);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              v524 = *(_OWORD *)v521;
              v525 = *(_OWORD *)(v521 + 16);
              v526 = *(_OWORD *)(v521 + 48);
              *(_OWORD *)(v520 + 32) = *(_OWORD *)(v521 + 32);
              *(_OWORD *)(v520 + 48) = v526;
              *(_OWORD *)v520 = v524;
              *(_OWORD *)(v520 + 16) = v525;
              v527 = *(_OWORD *)(v521 + 64);
              v528 = *(_OWORD *)(v521 + 80);
              v529 = *(_OWORD *)(v521 + 112);
              *(_OWORD *)(v520 + 96) = *(_OWORD *)(v521 + 96);
              *(_OWORD *)(v520 + 112) = v529;
              *(_OWORD *)(v520 + 64) = v527;
              *(_OWORD *)(v520 + 80) = v528;
              v530 = *(_OWORD *)(v521 + 128);
              v531 = *(_OWORD *)(v521 + 144);
              v532 = *(_OWORD *)(v521 + 176);
              *(_OWORD *)(v520 + 160) = *(_OWORD *)(v521 + 160);
              *(_OWORD *)(v520 + 176) = v532;
              *(_OWORD *)(v520 + 128) = v530;
              *(_OWORD *)(v520 + 144) = v531;
              v533 = *(_OWORD *)(v521 + 192);
              v534 = *(_OWORD *)(v521 + 208);
              v535 = *(_OWORD *)(v521 + 224);
              *(_QWORD *)(v520 + 240) = *(_QWORD *)(v521 + 240);
              *(_OWORD *)(v520 + 208) = v534;
              *(_OWORD *)(v520 + 224) = v535;
              *(_OWORD *)(v520 + 192) = v533;
              v462 = v881;
              v73 = v923;
            }
            v768 = (_OWORD *)((v520 + 255) & 0xFFFFFFFFFFFFFFF8);
            v769 = (__int128 *)((v521 + 255) & 0xFFFFFFFFFFFFFFF8);
            v770 = *v769;
            *(_OWORD *)((char *)v768 + 9) = *(__int128 *)((char *)v769 + 9);
            *v768 = v770;
            v771 = (v520 + 287) & 0xFFFFFFFFFFFFFFF8;
            v772 = (v521 + 287) & 0xFFFFFFFFFFFFFFF8;
            v773 = *(_OWORD *)v772;
            *(_BYTE *)(v771 + 16) = *(_BYTE *)(v772 + 16);
            *(_OWORD *)v771 = v773;
            v774 = (_QWORD *)((v520 + 311) & 0xFFFFFFFFFFFFF8);
            v775 = (v521 + 311) & 0xFFFFFFFFFFFFF8;
            v776 = *(_QWORD *)v775;
            v775 += 15;
            *v774 = v776;
            v777 = (_QWORD *)(((unint64_t)v774 + 15) & 0xFFFFFFFFFFFFFFF8);
            v778 = *(_QWORD *)(v775 & 0xFFFFFFFFFFFFFFF8);
            v779 = *(_QWORD *)((v775 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_23AA7F2D4(v778, v779);
            *v777 = v778;
            v777[1] = v779;
            v463 = v879;
            v119 = v969;
            v114 = v952;
            if (!v860)
              goto LABEL_276;
LABEL_359:
            v780 = ((((v866
                     + ((((((((((v462 + v463 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 19) & 0xFFFFFFFFFFFFFFF8)
                       + 25) & 0xFFFFFFFFFFFFFFF8)
                     + 327) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 16;
            v781 = (_QWORD *)(((unint64_t)v119 + v780) & 0xFFFFFFFFFFFFFFF8);
            v782 = (_QWORD *)(((unint64_t)v114 + v780) & 0xFFFFFFFFFFFFFFF8);
            *v781 = *v782;
            v783 = *(void **)(((unint64_t)v782 + 15) & 0xFFFFFFFFFFFFF8);
            *(_QWORD *)(((unint64_t)v781 + 15) & 0xFFFFFFFFFFFFF8) = v783;
            *((_BYTE *)v68 + v73) = 0;
            v784 = v783;
            goto LABEL_163;
          }
          v459 = (v859 + ((v947 + v288) & v928)) & v891;
          v119 = v969;
          if (v860 <= 0x7FFFFFFD)
          {
            v448 = *(_QWORD *)(((v835 + ((v853 + v459) & v891)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_399:
            if (v448 >= 0xFFFFFFFF)
              LODWORD(v448) = -1;
            if ((v448 + 1) >= 2)
              goto LABEL_275;
            goto LABEL_278;
          }
          v115 = (*(uint64_t (**)(unint64_t))(v880 + 48))(v459);
        }
        v118 = ~v942;
        v117 = v69;
        goto LABEL_274;
      case 1:
        v120 = ~v942;
        v920 = ~v27;
        v121 = ~v43;
        v908 = v30;
        v913 = ~v26;
        v896 = ~v888;
        v902 = *(_QWORD *)(v25 + 64) + 7;
        v940 = v26 + 8;
        v970 = *(_QWORD *)(v871 - 8);
        v122 = *(void (**)(void *, const void *, uint64_t))(v884 + 16);
        v123 = v64;
        ((void (*)(_QWORD *))v122)(a1);
        v943 = (void *)(((unint64_t)a1 + v863) & v109);
        v124 = (const void *)(((unint64_t)v123 + v863) & v109);
        if (v948 == v865)
        {
          v125 = (*(uint64_t (**)(unint64_t))(v884 + 48))(((unint64_t)v123 + v863) & v109);
          v126 = v880;
          v127 = v69;
          v128 = v120;
LABEL_292:
          if (v125)
          {
LABEL_293:
            v542 = v943;
            memcpy(v943, v124, v847);
            v543 = v881;
            v544 = v885;
LABEL_294:
            v545 = v882;
            goto LABEL_363;
          }
          v154 = ((unint64_t)v124 + v876) & v128;
          v155 = (v877 + v154) & v127;
LABEL_296:
          v953 = v124;
          v546 = v124;
          v547 = v127;
          v548 = v128;
          v122(v943, v546, AssociatedTypeWitness);
          v549 = v126;
          v550 = ((unint64_t)v943 + v876) & v548;
          v122((void *)v550, (const void *)v154, AssociatedTypeWitness);
          v551 = (v877 + v550) & v547;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v869 + 16))(v551, v155, v870);
          v552 = (_QWORD *)((v874 + v551) & 0xFFFFFFFFFFFFFFF8);
          v553 = (_QWORD *)((v874 + v155) & 0xFFFFFFFFFFFFFFF8);
          *v552 = *v553;
          v554 = ((unint64_t)v552 + v854) & v896;
          v555 = ((unint64_t)v553 + v854) & v896;
          v556 = *(void (**)(unint64_t, unint64_t, uint64_t))(v855 + 16);
          swift_bridgeObjectRetain();
          v556(v554, v555, v856);
          v557 = (_QWORD *)((v848 + v554) & 0xFFFFFFFFFFFFF8);
          v558 = (_QWORD *)((v848 + v555) & 0xFFFFFFFFFFFFF8);
          *v557 = *v558;
          v559 = (_QWORD *)(((unint64_t)v557 + 15) & 0xFFFFFFFFFFFFFFF8);
          v560 = (_QWORD *)(((unint64_t)v558 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v559 = *v560;
          v559[1] = v560[1];
          v561 = (_QWORD *)(v955 + v551);
          *v561 = *(_QWORD *)(v955 + v155);
          v561[1] = *(_QWORD *)(v955 + v155 + 8);
          v562 = (v947 + v955 + v551) & v928;
          v563 = (v947 + v955 + v155) & v928;
          *(_BYTE *)v562 = *(_BYTE *)v563;
          v564 = v562 | 4;
          v565 = *(_DWORD *)(v563 | 4);
          *(_BYTE *)(v564 + 4) = *(_BYTE *)((v563 | 4) + 4);
          *(_DWORD *)v564 = v565;
          *(_WORD *)(v562 + 10) = *(_WORD *)(v563 + 0xA);
          v566 = (v859 + v562) & v71;
          v960 = v563;
          v567 = (v859 + v563) & v71;
          v568 = *(void (**)(unint64_t, unint64_t, uint64_t))(v549 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v568(v566, v567, v878);
          v569 = (v853 + v566) & v71;
          v570 = (v853 + v567) & v71;
          v568(v569, v570, v878);
          v571 = (_BYTE *)(v569 + v879);
          *v571 = *(_BYTE *)(v570 + v879);
          v571[1] = *(_BYTE *)(v570 + v879 + 1);
          v571[2] = *(_BYTE *)(v570 + v879 + 2);
          v571[3] = *(_BYTE *)(v570 + v879 + 3);
          v571[4] = *(_BYTE *)(v570 + v879 + 4);
          v572 = (v569 + v879 + 12) & 0xFFFFFFFFFFFFFFF8;
          v573 = (v570 + v879 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v572 = *(_QWORD *)v573;
          *(_QWORD *)(v572 + 8) = *(_QWORD *)(v573 + 8);
          *(_BYTE *)(v572 + 16) = *(_BYTE *)(v573 + 16);
          *(_BYTE *)(v572 + 17) = *(_BYTE *)(v573 + 17);
          *(_BYTE *)(v572 + 18) = *(_BYTE *)(v573 + 18);
          *(_BYTE *)(v572 + 19) = *(_BYTE *)(v573 + 19);
          v574 = (v572 + 27) & 0xFFFFFFFFFFFFFFF8;
          v575 = (v573 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v574 = *(_QWORD *)v575;
          *(_BYTE *)(v574 + 8) = *(_BYTE *)(v575 + 8);
          *(_BYTE *)(v574 + 9) = *(_BYTE *)(v575 + 9);
          *(_BYTE *)(v574 + 10) = *(_BYTE *)(v575 + 10);
          *(_BYTE *)(v574 + 11) = *(_BYTE *)(v575 + 11);
          *(_BYTE *)(v574 + 12) = *(_BYTE *)(v575 + 12);
          v576 = (_QWORD *)((v572 + 47) & 0xFFFFFFFFFFFFF8);
          v577 = (_QWORD *)((v573 + 47) & 0xFFFFFFFFFFFFF8);
          *v576 = *v577;
          v578 = ((unint64_t)v576 + 15) & 0xFFFFFFFFFFFFFFF8;
          v579 = ((unint64_t)v577 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v578 = *(_QWORD *)v579;
          *(_BYTE *)(v578 + 8) = *(_BYTE *)(v579 + 8);
          *(_BYTE *)(v578 + 9) = *(_BYTE *)(v579 + 9);
          v580 = (void *)((v852 + v578) & v71);
          v581 = (const void *)((v852 + v579) & v71);
          v582 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v549 + 48);
          swift_bridgeObjectRetain();
          if (v582(v581, 1, v878))
          {
            memcpy(v580, v581, v882);
          }
          else
          {
            v568((unint64_t)v580, (unint64_t)v581, v878);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v549 + 56))(v580, 0, 1, v878);
          }
          v544 = v885;
          v583 = (_QWORD *)(((unint64_t)v580 + v851) & 0xFFFFFFFFFFFFFFF8);
          v584 = (_QWORD *)(((unint64_t)v581 + v851) & 0xFFFFFFFFFFFFFFF8);
          *v583 = *v584;
          v585 = ((unint64_t)v583 + 15) & 0xFFFFFFFFFFFFFFF8;
          v586 = ((unint64_t)v584 + 15) & 0xFFFFFFFFFFFFFFF8;
          v587 = *(_QWORD *)v586;
          *(_BYTE *)(v585 + 8) = *(_BYTE *)(v586 + 8);
          *(_QWORD *)v585 = v587;
          v588 = (_QWORD *)(((unint64_t)v583 + 31) & 0xFFFFFFFFFFFFF8);
          v589 = (_QWORD *)(((unint64_t)v584 + 31) & 0xFFFFFFFFFFFFF8);
          *v588 = *v589;
          v590 = ((unint64_t)v588 + 15) & 0xFFFFFFFFFFFFFFF8;
          v591 = (uint64_t *)(((unint64_t)v589 + 15) & 0xFFFFFFFFFFFFFFF8);
          v592 = v591[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v592 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v590 = *(_OWORD *)v591;
          }
          else
          {
            v593 = *v591;
            sub_23AAAE668(*v591, v592);
            *(_QWORD *)v590 = v593;
            *(_QWORD *)(v590 + 8) = v592;
          }
          v594 = (v590 + 19) & 0xFFFFFFFFFFFFFFF8;
          v595 = ((unint64_t)v591 + 19) & 0xFFFFFFFFFFFFFFF8;
          v596 = *(_QWORD *)v595;
          *(_BYTE *)(v594 + 8) = *(_BYTE *)(v595 + 8);
          *(_QWORD *)v594 = v596;
          *(_BYTE *)(v594 + 9) = *(_BYTE *)(v595 + 9);
          v597 = (v594 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v598 = (v595 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v599 = *(_DWORD *)v598;
          *(_BYTE *)(v597 + 4) = *(_BYTE *)(v598 + 4);
          *(_DWORD *)v597 = v599;
          v600 = (_QWORD *)((v594 + 25) & 0xFFFFFFFFFFFFFFF8);
          v601 = (_QWORD *)((v595 + 25) & 0xFFFFFFFFFFFFFFF8);
          *v600 = *v601;
          v600[1] = v601[1];
          v602 = v946 + v562;
          v603 = (__int128 *)(v946 + v960);
          v604 = *(_QWORD *)(v946 + v960 + 16);
          if (v604 >= 0xFFFFFFFF)
            LODWORD(v604) = -1;
          v605 = v604 - 1;
          swift_bridgeObjectRetain();
          if (v605 < 0)
          {
            *(_QWORD *)v602 = *(_QWORD *)v603;
            *(_BYTE *)(v602 + 8) = *((_BYTE *)v603 + 8);
            *(_BYTE *)(v602 + 9) = *((_BYTE *)v603 + 9);
            v618 = (void *)*((_QWORD *)v603 + 2);
            v619 = v618;
            *(_QWORD *)(v602 + 16) = v618;
            v620 = (void *)*((_QWORD *)v603 + 3);
            v621 = v620;
            *(_QWORD *)(v602 + 24) = v620;
            *(_BYTE *)(v602 + 32) = *((_BYTE *)v603 + 32);
            *(_BYTE *)(v602 + 33) = *((_BYTE *)v603 + 33);
            *(_BYTE *)(v602 + 34) = *((_BYTE *)v603 + 34);
            *(_QWORD *)(v602 + 40) = *((_QWORD *)v603 + 5);
            *(_QWORD *)(v602 + 48) = *((_QWORD *)v603 + 6);
            *(_QWORD *)(v602 + 56) = *((_QWORD *)v603 + 7);
            *(_QWORD *)(v602 + 64) = *((_QWORD *)v603 + 8);
            *(_BYTE *)(v602 + 72) = *((_BYTE *)v603 + 72);
            *(_QWORD *)(v602 + 80) = *((_QWORD *)v603 + 10);
            *(_QWORD *)(v602 + 88) = *((_QWORD *)v603 + 11);
            v961 = (void *)*((_QWORD *)v603 + 12);
            *(_QWORD *)(v602 + 96) = v961;
            *(_BYTE *)(v602 + 104) = *((_BYTE *)v603 + 104);
            *(_BYTE *)(v602 + 105) = *((_BYTE *)v603 + 105);
            *(_QWORD *)(v602 + 112) = *((_QWORD *)v603 + 14);
            *(_QWORD *)(v602 + 120) = *((_QWORD *)v603 + 15);
            *(_QWORD *)(v602 + 128) = *((_QWORD *)v603 + 16);
            *(_QWORD *)(v602 + 136) = *((_QWORD *)v603 + 17);
            *(_QWORD *)(v602 + 144) = *((_QWORD *)v603 + 18);
            *(_QWORD *)(v602 + 152) = *((_QWORD *)v603 + 19);
            *(_QWORD *)(v602 + 160) = *((_QWORD *)v603 + 20);
            *(_QWORD *)(v602 + 168) = *((_QWORD *)v603 + 21);
            *(_BYTE *)(v602 + 176) = *((_BYTE *)v603 + 176);
            *(_QWORD *)(v602 + 184) = *((_QWORD *)v603 + 23);
            v622 = *((_QWORD *)v603 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v623 = v961;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v622)
            {
              *(_QWORD *)(v602 + 192) = v622;
              *(_QWORD *)(v602 + 200) = *((_QWORD *)v603 + 25);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v602 + 192) = v603[12];
            }
            v543 = v881;
            v544 = v885;
            *(_QWORD *)(v602 + 208) = *((_QWORD *)v603 + 26);
            *(_QWORD *)(v602 + 216) = *((_QWORD *)v603 + 27);
            *(_QWORD *)(v602 + 224) = *((_QWORD *)v603 + 28);
            *(_QWORD *)(v602 + 232) = *((_QWORD *)v603 + 29);
            *(_QWORD *)(v602 + 240) = *((_QWORD *)v603 + 30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v606 = *v603;
            v607 = v603[1];
            v608 = v603[3];
            *(_OWORD *)(v602 + 32) = v603[2];
            *(_OWORD *)(v602 + 48) = v608;
            *(_OWORD *)v602 = v606;
            *(_OWORD *)(v602 + 16) = v607;
            v609 = v603[4];
            v610 = v603[5];
            v611 = v603[7];
            *(_OWORD *)(v602 + 96) = v603[6];
            *(_OWORD *)(v602 + 112) = v611;
            *(_OWORD *)(v602 + 64) = v609;
            *(_OWORD *)(v602 + 80) = v610;
            v612 = v603[8];
            v613 = v603[9];
            v614 = v603[11];
            *(_OWORD *)(v602 + 160) = v603[10];
            *(_OWORD *)(v602 + 176) = v614;
            *(_OWORD *)(v602 + 128) = v612;
            *(_OWORD *)(v602 + 144) = v613;
            v615 = v603[12];
            v616 = v603[13];
            v617 = v603[14];
            *(_QWORD *)(v602 + 240) = *((_QWORD *)v603 + 30);
            *(_OWORD *)(v602 + 208) = v616;
            *(_OWORD *)(v602 + 224) = v617;
            *(_OWORD *)(v602 + 192) = v615;
            v543 = v881;
          }
          v785 = (_OWORD *)((v602 + 255) & 0xFFFFFFFFFFFFFFF8);
          v786 = (__int128 *)(((unint64_t)v603 + 255) & 0xFFFFFFFFFFFFFFF8);
          v787 = *v786;
          *(_OWORD *)((char *)v785 + 9) = *(__int128 *)((char *)v786 + 9);
          *v785 = v787;
          v788 = (v602 + 287) & 0xFFFFFFFFFFFFFFF8;
          v789 = ((unint64_t)v603 + 287) & 0xFFFFFFFFFFFFFFF8;
          v790 = *(_OWORD *)v789;
          *(_BYTE *)(v788 + 16) = *(_BYTE *)(v789 + 16);
          *(_OWORD *)v788 = v790;
          v791 = (_QWORD *)((v602 + 311) & 0xFFFFFFFFFFFFF8);
          v792 = ((unint64_t)v603 + 311) & 0xFFFFFFFFFFFFF8;
          v793 = *(_QWORD *)v792;
          v792 += 15;
          *v791 = v793;
          v794 = (_QWORD *)(((unint64_t)v791 + 15) & 0xFFFFFFFFFFFFFFF8);
          v795 = *(_QWORD *)(v792 & 0xFFFFFFFFFFFFFFF8);
          v796 = *(_QWORD *)((v792 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_23AA7F2D4(v795, v796);
          *v794 = v795;
          v794[1] = v796;
          v545 = v879;
          v124 = v953;
          v542 = v943;
          if (!v860)
            goto LABEL_294;
LABEL_363:
          v797 = ((((v866
                   + ((((((((((v543 + v545 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 19) & 0xFFFFFFFFFFFFFFF8)
                     + 25) & 0xFFFFFFFFFFFFFFF8)
                   + 327) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 16;
          v798 = (void *)(((unint64_t)v542 + v930 + v797) & v933);
          v799 = (const void *)(((unint64_t)v124 + v930 + v797) & v933);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v544 + 48))(v799, 1, v886))
          {
            memcpy(v798, v799, v843);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v544 + 16))(v798, v799, v886);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v544 + 56))(v798, 0, 1, v886);
          }
          v800 = v908;
          v801 = (char *)(((unint64_t)v798 + v850) & v920);
          v802 = (char *)(((unint64_t)v799 + v850) & v920);
          if (v857 == v872)
          {
            v803 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v867 + 48))(((unint64_t)v799 + v850) & v920, v857, v868);
            v68 = a1;
          }
          else
          {
            v804 = (uint64_t *)((unint64_t)&v802[v908] & 0xFFFFFFFFFFFFFFF8);
            v68 = a1;
            if (v844 <= 0x7FFFFFFE)
            {
              v805 = *v804;
              if ((unint64_t)*v804 >= 0xFFFFFFFF)
                LODWORD(v805) = -1;
              if ((v805 + 1) >= 2)
                goto LABEL_375;
              goto LABEL_377;
            }
            v803 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v970 + 48))(((unint64_t)v804 + v940) & v913, v916, v871);
          }
          v800 = v908;
          if (v803)
          {
LABEL_375:
            v806 = v922;
            memcpy(v801, v802, v922);
LABEL_378:
            *(_QWORD *)&v801[v806] = *(_QWORD *)&v802[v806];
            v816 = (_QWORD *)((unint64_t)&v801[v806 + 15] & 0xFFFFFFFFFFFFF8);
            v817 = (_QWORD *)((unint64_t)&v802[v806 + 15] & 0xFFFFFFFFFFFFFFF8);
            *v816 = *v817;
            v818 = *(void **)(((unint64_t)v817 + 15) & 0xFFFFFFFFFFFFF8);
            *(_QWORD *)(((unint64_t)v816 + 15) & 0xFFFFFFFFFFFFF8) = v818;
            *((_BYTE *)v68 + v923) = 1;
            v819 = v818;
LABEL_163:
            *((_BYTE *)v68 + v935) = 0;
            return v68;
          }
          v804 = (uint64_t *)((unint64_t)&v802[v908] & 0xFFFFFFFFFFFFFFF8);
LABEL_377:
          v807 = v800;
          (*(void (**)(char *, char *, uint64_t))(v867 + 16))(v801, v802, v868);
          v808 = (_QWORD *)((unint64_t)&v801[v807] & 0xFFFFFFFFFFFFFFF8);
          *v808 = *v804;
          v809 = ((unint64_t)v808 + v940) & v913;
          v810 = ((unint64_t)v804 + v940) & v913;
          v811 = *(void (**)(unint64_t, unint64_t, uint64_t))(v970 + 16);
          swift_bridgeObjectRetain();
          v811(v809, v810, v871);
          v812 = (_QWORD *)((v902 + v809) & 0xFFFFFFFFFFFFF8);
          v813 = (_QWORD *)((v902 + v810) & 0xFFFFFFFFFFFFF8);
          *v812 = *v813;
          v814 = (_QWORD *)(((unint64_t)v812 + 15) & 0xFFFFFFFFFFFFFFF8);
          v815 = (_QWORD *)(((unint64_t)v813 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v814 = *v815;
          v814[1] = v815[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v806 = v922;
          goto LABEL_378;
        }
        v128 = v120;
        v154 = ((unint64_t)v124 + v876) & v120;
        v127 = v69;
        v155 = (v877 + v154) & v69;
        if (v873 == v865)
        {
          v126 = v880;
          if (v858 == v873)
          {
            v125 = (*(uint64_t (**)(unint64_t))(v869 + 48))((v877 + v154) & v121);
LABEL_291:
            v128 = v120;
            v127 = v69;
            goto LABEL_292;
          }
          v449 = (unint64_t *)((v874 + v155) & 0xFFFFFFFFFFFFFFF8);
          if (v845 > 0x7FFFFFFE)
          {
            v125 = (*(uint64_t (**)(unint64_t))(v855 + 48))(((unint64_t)v449 + v854) & v896);
            goto LABEL_291;
          }
          v450 = *v449;
        }
        else
        {
          v290 = v955 + v155;
          v126 = v880;
          if ((v838 & 0x80000000) == 0)
          {
            v291 = *(_QWORD *)(v290 + 8);
            if (v291 >= 0xFFFFFFFF)
              LODWORD(v291) = -1;
            v125 = v291 + 1;
            goto LABEL_292;
          }
          v460 = (v859 + ((v947 + v290) & v928)) & v71;
          if (v860 > 0x7FFFFFFD)
          {
            v125 = (*(uint64_t (**)(unint64_t))(v880 + 48))(v460);
            goto LABEL_291;
          }
          v450 = *(_QWORD *)(((v835 + ((v853 + v460) & v71)) & 0xFFFFFFFFFFFFF8) + 8);
        }
        if (v450 >= 0xFFFFFFFF)
          LODWORD(v450) = -1;
        if ((v450 + 1) >= 2)
          goto LABEL_293;
        goto LABEL_296;
      case 2:
        v129 = ~v27;
        v914 = ~v26;
        v130 = v30;
        v941 = v26 + 8;
        v971 = *(_QWORD *)(v871 - 8);
        v903 = *(_QWORD *)(v25 + 64) + 7;
        v131 = v64;
        (*(void (**)(_QWORD *))(v884 + 16))(a1);
        v132 = (void *)(((unint64_t)a1 + v840) & v933);
        v133 = (const void *)(((unint64_t)v131 + v840) & v933);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v885 + 48))(v133, 1, v886))
        {
          memcpy(v132, v133, v843);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v885 + 16))(v132, v133, v886);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v885 + 56))(v132, 0, 1, v886);
        }
        v163 = (char *)(((unint64_t)v132 + v850) & v129);
        v164 = (char *)(((unint64_t)v133 + v850) & v129);
        if (v857 == v872)
        {
          v165 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v867 + 48))(((unint64_t)v133 + v850) & v129, v857, v868);
          v166 = v130;
          v68 = a1;
        }
        else
        {
          v167 = (uint64_t *)((unint64_t)&v164[v130] & 0xFFFFFFFFFFFFFFF8);
          v68 = a1;
          if (v844 <= 0x7FFFFFFE)
          {
            v166 = v130;
            v168 = *v167;
            if ((unint64_t)*v167 >= 0xFFFFFFFF)
              LODWORD(v168) = -1;
            if ((v168 + 1) >= 2)
              goto LABEL_208;
            goto LABEL_210;
          }
          v165 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v971 + 48))(((unint64_t)v167 + v941) & v914, v916, v871);
          v166 = v130;
        }
        if (v165)
        {
LABEL_208:
          v305 = v922;
          memcpy(v163, v164, v922);
          goto LABEL_211;
        }
        v167 = (uint64_t *)((unint64_t)&v164[v166] & 0xFFFFFFFFFFFFFFF8);
LABEL_210:
        v306 = v166;
        (*(void (**)(char *, char *, uint64_t))(v867 + 16))(v163, v164, v868);
        v307 = (_QWORD *)((unint64_t)&v163[v306] & 0xFFFFFFFFFFFFFFF8);
        *v307 = *v167;
        v308 = ((unint64_t)v307 + v941) & v914;
        v309 = ((unint64_t)v167 + v941) & v914;
        v310 = *(void (**)(unint64_t, unint64_t, uint64_t))(v971 + 16);
        swift_bridgeObjectRetain();
        v310(v308, v309, v871);
        v311 = (_QWORD *)((v903 + v308) & 0xFFFFFFFFFFFFF8);
        v312 = (_QWORD *)((v903 + v309) & 0xFFFFFFFFFFFFF8);
        *v311 = *v312;
        v313 = (_QWORD *)(((unint64_t)v311 + 15) & 0xFFFFFFFFFFFFFFF8);
        v314 = (_QWORD *)(((unint64_t)v312 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v313 = *v314;
        v313[1] = v314[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v305 = v922;
LABEL_211:
        v315 = &v163[v305];
        *v315 = v164[v305];
        v316 = *(void **)&v164[v305 + 8];
        *((_QWORD *)v315 + 1) = v316;
        *((_BYTE *)v68 + v923) = 2;
        v317 = v316;
        goto LABEL_163;
      case 3:
        v134 = ~v43;
        v897 = ~(unint64_t)v904;
        v135 = *(void (**)(void *, const void *, uint64_t))(v884 + 16);
        v68 = a1;
        v136 = a2;
        ((void (*)(_QWORD *))v135)(a1);
        v972 = (void *)(((unint64_t)a1 + v863) & v109);
        v137 = (const void *)(((unint64_t)v136 + v863) & v109);
        v892 = ~(unint64_t)v898;
        if (v948 == v865)
        {
          v138 = (*(uint64_t (**)(const void *))(v884 + 48))(v137);
          v139 = v880;
          v140 = v69;
          v141 = ~v942;
          v142 = v972;
LABEL_310:
          if (v138)
          {
LABEL_311:
            memcpy(v142, v137, v847);
            v624 = v881;
            goto LABEL_312;
          }
          v156 = ((unint64_t)v137 + v876) & v141;
          v157 = (v877 + v156) & v140;
LABEL_314:
          v954 = v137;
          v626 = v137;
          v627 = v135;
          v628 = v140;
          v629 = v141;
          v627(v142, v626, AssociatedTypeWitness);
          v630 = ((unint64_t)v142 + v876) & v629;
          v627((void *)v630, (const void *)v156, AssociatedTypeWitness);
          v631 = (v877 + v630) & v628;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v869 + 16))(v631, v157, v870);
          v632 = (_QWORD *)((v874 + v631) & 0xFFFFFFFFFFFFFFF8);
          v633 = (_QWORD *)((v874 + v157) & 0xFFFFFFFFFFFFFFF8);
          *v632 = *v633;
          v634 = ((unint64_t)v632 + v854) & v897;
          v635 = ((unint64_t)v633 + v854) & v897;
          v636 = *(void (**)(unint64_t, unint64_t, uint64_t))(v855 + 16);
          swift_bridgeObjectRetain();
          v636(v634, v635, v856);
          v637 = (_QWORD *)((v848 + v634) & 0xFFFFFFFFFFFFF8);
          v638 = (_QWORD *)((v848 + v635) & 0xFFFFFFFFFFFFF8);
          *v637 = *v638;
          v639 = (_QWORD *)(((unint64_t)v637 + 15) & 0xFFFFFFFFFFFFFFF8);
          v640 = (_QWORD *)(((unint64_t)v638 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v639 = *v640;
          v639[1] = v640[1];
          v641 = (_QWORD *)(v955 + v631);
          *v641 = *(_QWORD *)(v955 + v157);
          v641[1] = *(_QWORD *)(v955 + v157 + 8);
          v642 = (v947 + v955 + v631) & v928;
          v643 = (v947 + v955 + v157) & v928;
          *(_BYTE *)v642 = *(_BYTE *)v643;
          v644 = v642 | 4;
          v645 = *(_DWORD *)(v643 | 4);
          *(_BYTE *)(v644 + 4) = *(_BYTE *)((v643 | 4) + 4);
          *(_DWORD *)v644 = v645;
          *(_WORD *)(v642 + 10) = *(_WORD *)(v643 + 0xA);
          v962 = v642;
          v646 = (v859 + v642) & v892;
          v647 = (v859 + v643) & v892;
          v648 = *(void (**)(unint64_t, unint64_t, uint64_t))(v139 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v648(v646, v647, v878);
          v649 = (v853 + v646) & v892;
          v650 = (v853 + v647) & v892;
          v648(v649, v650, v878);
          v651 = (_BYTE *)(v649 + v879);
          *v651 = *(_BYTE *)(v650 + v879);
          v651[1] = *(_BYTE *)(v650 + v879 + 1);
          v651[2] = *(_BYTE *)(v650 + v879 + 2);
          v651[3] = *(_BYTE *)(v650 + v879 + 3);
          v651[4] = *(_BYTE *)(v650 + v879 + 4);
          v652 = (v649 + v879 + 12) & 0xFFFFFFFFFFFFFFF8;
          v653 = (v650 + v879 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v652 = *(_QWORD *)v653;
          *(_QWORD *)(v652 + 8) = *(_QWORD *)(v653 + 8);
          *(_BYTE *)(v652 + 16) = *(_BYTE *)(v653 + 16);
          *(_BYTE *)(v652 + 17) = *(_BYTE *)(v653 + 17);
          *(_BYTE *)(v652 + 18) = *(_BYTE *)(v653 + 18);
          *(_BYTE *)(v652 + 19) = *(_BYTE *)(v653 + 19);
          v654 = (v652 + 27) & 0xFFFFFFFFFFFFFFF8;
          v655 = (v653 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v654 = *(_QWORD *)v655;
          *(_BYTE *)(v654 + 8) = *(_BYTE *)(v655 + 8);
          *(_BYTE *)(v654 + 9) = *(_BYTE *)(v655 + 9);
          *(_BYTE *)(v654 + 10) = *(_BYTE *)(v655 + 10);
          *(_BYTE *)(v654 + 11) = *(_BYTE *)(v655 + 11);
          *(_BYTE *)(v654 + 12) = *(_BYTE *)(v655 + 12);
          v656 = (_QWORD *)((v652 + 47) & 0xFFFFFFFFFFFFF8);
          v657 = (_QWORD *)((v653 + 47) & 0xFFFFFFFFFFFFF8);
          *v656 = *v657;
          v658 = ((unint64_t)v656 + 15) & 0xFFFFFFFFFFFFFFF8;
          v659 = ((unint64_t)v657 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v658 = *(_QWORD *)v659;
          *(_BYTE *)(v658 + 8) = *(_BYTE *)(v659 + 8);
          *(_BYTE *)(v658 + 9) = *(_BYTE *)(v659 + 9);
          v660 = (void *)((v852 + v658) & v892);
          v661 = (const void *)((v852 + v659) & v892);
          v662 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v139 + 48);
          swift_bridgeObjectRetain();
          if (v662(v661, 1, v878))
          {
            memcpy(v660, v661, v882);
          }
          else
          {
            v648((unint64_t)v660, (unint64_t)v661, v878);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v660, 0, 1, v878);
          }
          v663 = (_QWORD *)(((unint64_t)v660 + v851) & 0xFFFFFFFFFFFFFFF8);
          v664 = (_QWORD *)(((unint64_t)v661 + v851) & 0xFFFFFFFFFFFFFFF8);
          *v663 = *v664;
          v665 = ((unint64_t)v663 + 15) & 0xFFFFFFFFFFFFFFF8;
          v666 = ((unint64_t)v664 + 15) & 0xFFFFFFFFFFFFFFF8;
          v667 = *(_QWORD *)v666;
          *(_BYTE *)(v665 + 8) = *(_BYTE *)(v666 + 8);
          *(_QWORD *)v665 = v667;
          v668 = (_QWORD *)(((unint64_t)v663 + 31) & 0xFFFFFFFFFFFFF8);
          v669 = (_QWORD *)(((unint64_t)v664 + 31) & 0xFFFFFFFFFFFFF8);
          *v668 = *v669;
          v670 = ((unint64_t)v668 + 15) & 0xFFFFFFFFFFFFFFF8;
          v671 = (uint64_t *)(((unint64_t)v669 + 15) & 0xFFFFFFFFFFFFFFF8);
          v672 = v671[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v672 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v670 = *(_OWORD *)v671;
          }
          else
          {
            v673 = *v671;
            sub_23AAAE668(*v671, v672);
            *(_QWORD *)v670 = v673;
            *(_QWORD *)(v670 + 8) = v672;
          }
          v674 = (v670 + 19) & 0xFFFFFFFFFFFFFFF8;
          v675 = ((unint64_t)v671 + 19) & 0xFFFFFFFFFFFFFFF8;
          v676 = *(_QWORD *)v675;
          *(_BYTE *)(v674 + 8) = *(_BYTE *)(v675 + 8);
          *(_QWORD *)v674 = v676;
          *(_BYTE *)(v674 + 9) = *(_BYTE *)(v675 + 9);
          v677 = (v674 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v678 = (v675 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v679 = *(_DWORD *)v678;
          *(_BYTE *)(v677 + 4) = *(_BYTE *)(v678 + 4);
          *(_DWORD *)v677 = v679;
          v680 = (_QWORD *)((v674 + 25) & 0xFFFFFFFFFFFFFFF8);
          v681 = (_QWORD *)((v675 + 25) & 0xFFFFFFFFFFFFFFF8);
          *v680 = *v681;
          v680[1] = v681[1];
          v682 = v946 + v962;
          v683 = v946 + v643;
          v684 = *(_QWORD *)(v946 + v643 + 16);
          if (v684 >= 0xFFFFFFFF)
            LODWORD(v684) = -1;
          v685 = v684 - 1;
          swift_bridgeObjectRetain();
          if (v685 < 0)
          {
            *(_QWORD *)v682 = *(_QWORD *)v683;
            *(_BYTE *)(v682 + 8) = *(_BYTE *)(v683 + 8);
            *(_BYTE *)(v682 + 9) = *(_BYTE *)(v683 + 9);
            v698 = *(void **)(v683 + 16);
            v699 = v698;
            *(_QWORD *)(v682 + 16) = v698;
            v700 = *(void **)(v683 + 24);
            v701 = v700;
            *(_QWORD *)(v682 + 24) = v700;
            *(_BYTE *)(v682 + 32) = *(_BYTE *)(v683 + 32);
            *(_BYTE *)(v682 + 33) = *(_BYTE *)(v683 + 33);
            *(_BYTE *)(v682 + 34) = *(_BYTE *)(v683 + 34);
            *(_QWORD *)(v682 + 40) = *(_QWORD *)(v683 + 40);
            *(_QWORD *)(v682 + 48) = *(_QWORD *)(v683 + 48);
            *(_QWORD *)(v682 + 56) = *(_QWORD *)(v683 + 56);
            *(_QWORD *)(v682 + 64) = *(_QWORD *)(v683 + 64);
            *(_BYTE *)(v682 + 72) = *(_BYTE *)(v683 + 72);
            *(_QWORD *)(v682 + 80) = *(_QWORD *)(v683 + 80);
            *(_QWORD *)(v682 + 88) = *(_QWORD *)(v683 + 88);
            v963 = *(void **)(v683 + 96);
            *(_QWORD *)(v682 + 96) = v963;
            *(_BYTE *)(v682 + 104) = *(_BYTE *)(v683 + 104);
            *(_BYTE *)(v682 + 105) = *(_BYTE *)(v683 + 105);
            *(_QWORD *)(v682 + 112) = *(_QWORD *)(v683 + 112);
            *(_QWORD *)(v682 + 120) = *(_QWORD *)(v683 + 120);
            *(_QWORD *)(v682 + 128) = *(_QWORD *)(v683 + 128);
            *(_QWORD *)(v682 + 136) = *(_QWORD *)(v683 + 136);
            *(_QWORD *)(v682 + 144) = *(_QWORD *)(v683 + 144);
            *(_QWORD *)(v682 + 152) = *(_QWORD *)(v683 + 152);
            *(_QWORD *)(v682 + 160) = *(_QWORD *)(v683 + 160);
            *(_QWORD *)(v682 + 168) = *(_QWORD *)(v683 + 168);
            *(_BYTE *)(v682 + 176) = *(_BYTE *)(v683 + 176);
            *(_QWORD *)(v682 + 184) = *(_QWORD *)(v683 + 184);
            v702 = *(_QWORD *)(v683 + 192);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v703 = v963;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v702)
            {
              *(_QWORD *)(v682 + 192) = v702;
              *(_QWORD *)(v682 + 200) = *(_QWORD *)(v683 + 200);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v682 + 192) = *(_OWORD *)(v683 + 192);
            }
            v68 = a1;
            v624 = v881;
            v73 = v923;
            *(_QWORD *)(v682 + 208) = *(_QWORD *)(v683 + 208);
            *(_QWORD *)(v682 + 216) = *(_QWORD *)(v683 + 216);
            *(_QWORD *)(v682 + 224) = *(_QWORD *)(v683 + 224);
            *(_QWORD *)(v682 + 232) = *(_QWORD *)(v683 + 232);
            *(_QWORD *)(v682 + 240) = *(_QWORD *)(v683 + 240);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v686 = *(_OWORD *)v683;
            v687 = *(_OWORD *)(v683 + 16);
            v688 = *(_OWORD *)(v683 + 48);
            *(_OWORD *)(v682 + 32) = *(_OWORD *)(v683 + 32);
            *(_OWORD *)(v682 + 48) = v688;
            *(_OWORD *)v682 = v686;
            *(_OWORD *)(v682 + 16) = v687;
            v689 = *(_OWORD *)(v683 + 64);
            v690 = *(_OWORD *)(v683 + 80);
            v691 = *(_OWORD *)(v683 + 112);
            *(_OWORD *)(v682 + 96) = *(_OWORD *)(v683 + 96);
            *(_OWORD *)(v682 + 112) = v691;
            *(_OWORD *)(v682 + 64) = v689;
            *(_OWORD *)(v682 + 80) = v690;
            v692 = *(_OWORD *)(v683 + 128);
            v693 = *(_OWORD *)(v683 + 144);
            v694 = *(_OWORD *)(v683 + 176);
            *(_OWORD *)(v682 + 160) = *(_OWORD *)(v683 + 160);
            *(_OWORD *)(v682 + 176) = v694;
            *(_OWORD *)(v682 + 128) = v692;
            *(_OWORD *)(v682 + 144) = v693;
            v695 = *(_OWORD *)(v683 + 192);
            v696 = *(_OWORD *)(v683 + 208);
            v697 = *(_OWORD *)(v683 + 224);
            *(_QWORD *)(v682 + 240) = *(_QWORD *)(v683 + 240);
            *(_OWORD *)(v682 + 208) = v696;
            *(_OWORD *)(v682 + 224) = v697;
            *(_OWORD *)(v682 + 192) = v695;
            v624 = v881;
            v73 = v923;
          }
          v820 = (_OWORD *)((v682 + 255) & 0xFFFFFFFFFFFFFFF8);
          v821 = (__int128 *)((v683 + 255) & 0xFFFFFFFFFFFFFFF8);
          v822 = *v821;
          *(_OWORD *)((char *)v820 + 9) = *(__int128 *)((char *)v821 + 9);
          *v820 = v822;
          v823 = (v682 + 287) & 0xFFFFFFFFFFFFFFF8;
          v824 = (v683 + 287) & 0xFFFFFFFFFFFFFFF8;
          v825 = *(_OWORD *)v824;
          *(_BYTE *)(v823 + 16) = *(_BYTE *)(v824 + 16);
          *(_OWORD *)v823 = v825;
          v826 = (_QWORD *)((v682 + 311) & 0xFFFFFFFFFFFFF8);
          v827 = (v683 + 311) & 0xFFFFFFFFFFFFF8;
          v828 = *(_QWORD *)v827;
          v827 += 15;
          *v826 = v828;
          v829 = (_QWORD *)(((unint64_t)v826 + 15) & 0xFFFFFFFFFFFFFFF8);
          v830 = *(_QWORD *)(v827 & 0xFFFFFFFFFFFFFFF8);
          v831 = *(_QWORD *)((v827 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_23AA7F2D4(v830, v831);
          *v829 = v830;
          v829[1] = v831;
          v625 = v879;
          v142 = v972;
          v137 = v954;
          if (v860)
          {
LABEL_382:
            v832 = ((((v866
                     + ((((((((((v624 + v625 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 19) & 0xFFFFFFFFFFFFFFF8)
                       + 25) & 0xFFFFFFFFFFFFFFF8)
                     + 327) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 16;
            v833 = (_QWORD *)(((unint64_t)v142 + v832) & 0xFFFFFFFFFFFFFFF8);
            v834 = (_QWORD *)(((unint64_t)v137 + v832) & 0xFFFFFFFFFFFFFFF8);
            *v833 = *v834;
            v833[1] = v834[1];
            *(_QWORD *)(((unint64_t)v833 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v834 + 23) & 0xFFFFFFFFFFFFF8);
            *((_BYTE *)v68 + v73) = 3;
            swift_bridgeObjectRetain();
            goto LABEL_163;
          }
LABEL_312:
          v625 = v882;
          goto LABEL_382;
        }
        v141 = ~v942;
        v156 = ((unint64_t)v137 + v876) & ~v942;
        v140 = v69;
        v157 = (v877 + v156) & v69;
        if (v873 == v865)
        {
          v139 = v880;
          if (v858 == v873)
          {
            v138 = (*(uint64_t (**)(unint64_t))(v869 + 48))((v877 + v156) & v134);
            v141 = ~v942;
            v140 = v69;
            v142 = v972;
            goto LABEL_310;
          }
          v451 = (unint64_t *)((v874 + v157) & 0xFFFFFFFFFFFFFFF8);
          v142 = v972;
          if (v845 <= 0x7FFFFFFE)
          {
            v452 = *v451;
            goto LABEL_409;
          }
          v138 = (*(uint64_t (**)(unint64_t))(v855 + 48))(((unint64_t)v451 + v854) & v897);
        }
        else
        {
          v292 = v955 + v157;
          v139 = v880;
          if ((v838 & 0x80000000) == 0)
          {
            v293 = *(_QWORD *)(v292 + 8);
            if (v293 >= 0xFFFFFFFF)
              LODWORD(v293) = -1;
            v138 = v293 + 1;
            v142 = v972;
            goto LABEL_310;
          }
          v461 = (v859 + ((v947 + v292) & v928)) & v892;
          v142 = v972;
          if (v860 <= 0x7FFFFFFD)
          {
            v452 = *(_QWORD *)(((v835 + ((v853 + v461) & v892)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_409:
            if (v452 >= 0xFFFFFFFF)
              LODWORD(v452) = -1;
            if ((v452 + 1) >= 2)
              goto LABEL_311;
            goto LABEL_314;
          }
          v138 = (*(uint64_t (**)(unint64_t))(v880 + 48))(v461);
        }
        v141 = ~v942;
        v140 = v69;
        goto LABEL_310;
      case 4:
        v68 = a1;
        (*(void (**)(_QWORD *))(v884 + 16))(a1);
        v143 = 4;
        goto LABEL_162;
      case 5:
        v68 = a1;
        (*(void (**)(_QWORD *))(v884 + 16))(a1);
        v143 = 5;
        goto LABEL_162;
      case 6:
        v68 = a1;
        (*(void (**)(_QWORD *))(v884 + 16))(a1);
        v144 = (void *)(((unint64_t)a1 + v839) & v110);
        v145 = (const void *)(((unint64_t)a2 + v839) & v110);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48))(v145, 1, v936))
        {
          memcpy(v144, v145, v836);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v144, v145, v936);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v144, 0, 1, v936);
        }
        v143 = 6;
        goto LABEL_162;
      case 7:
        v68 = a1;
        (*(void (**)(_QWORD *))(v884 + 16))(a1);
        v143 = 7;
LABEL_162:
        *((_BYTE *)v68 + v923) = v143;
        goto LABEL_163;
      default:
        if (v923 <= 3)
          v74 = v923;
        else
          v74 = 4;
        __asm { BR              X13 }
        return result;
    }
  }
  v67 = *a2;
  *a1 = *a2;
  v68 = (_QWORD *)(v67 + ((v62 + 16) & ~v62));
  swift_retain();
  return v68;
}

void sub_23AF61438(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  void (*v79)(void);
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  void (*v86)(unint64_t, uint64_t);
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  void (*v96)(void);
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void (*v105)(unint64_t, uint64_t);
  unint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(void);
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void (*v126)(unint64_t, uint64_t);
  unint64_t v127;
  unint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(void);
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(void);
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(void);
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  void *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  void (*v207)(unint64_t, uint64_t);
  unint64_t v208;
  unint64_t v209;
  uint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  void *v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  void (*v217)(unint64_t, uint64_t);
  unint64_t v218;
  unint64_t v219;
  uint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  int v227;
  uint64_t *v228;
  uint64_t v229;
  unint64_t v230;
  void (*v231)(unint64_t, uint64_t);
  unint64_t v232;
  unint64_t v233;
  uint64_t *v234;
  unint64_t v235;
  unint64_t v236;
  void *v237;
  uint64_t v238;
  unint64_t v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int v279;
  unint64_t v280;
  unsigned int v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t AssociatedTypeWitness;
  uint64_t v293;
  unint64_t v294;
  unsigned int v295;
  unint64_t v296;
  unsigned int v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unsigned int v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unsigned int v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;

  v318 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v286 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v286 - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8;
  v274 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v274 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 | v9 | 7;
  v271 = sub_23B1C5BDC();
  v11 = *(_QWORD *)(v271 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v12 | 7;
  v14 = v10 | v5 | v12;
  v291 = v3;
  v15 = *(_DWORD *)(v8 + 84);
  v242 = v15;
  v276 = *(_DWORD *)(v6 + 84);
  if (v276 > v15)
    v15 = *(_DWORD *)(v6 + 84);
  v261 = v15;
  if (v15 <= 0x7FFFFFFE)
    v15 = 2147483646;
  v329 = *(_DWORD *)(v3 + 84);
  v287 = v15;
  if (v15 <= v329)
    v15 = *(_DWORD *)(v3 + 84);
  v16 = *(_DWORD *)(v11 + 84);
  if (v16 <= 0x7FFFFFFE)
    v17 = 2147483646;
  else
    v17 = *(_DWORD *)(v11 + 84);
  v323 = v17;
  if (v15 <= v17)
    v15 = v17;
  v244 = v15;
  if (v15 <= 0x7FFFFFFF)
    v15 = 0x7FFFFFFF;
  v281 = v15;
  v240 = *(_DWORD *)(v11 + 84);
  v18 = v16 == 0;
  v331 = v5;
  v267 = v4 + v5;
  v302 = v10;
  v327 = v4 + v10;
  v285 = v6;
  v288 = *(_QWORD *)(v6 + 64) + 7;
  v272 = v9 + 8;
  v316 = v9;
  v273 = v8;
  v326 = ((((*(_QWORD *)(v8 + 64) + 7 + ((v9 + 8 + (v288 & 0xFFFFFFFFFFFFFFF8)) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v301 = v12 | 7;
  v328 = v13 + 16;
  v277 = v12 + 12;
  v270 = *(_QWORD *)(v271 - 8);
  v19 = *(_QWORD *)(v11 + 64);
  v268 = v19 + v12;
  v269 = v19 + 12;
  v20 = (v12
       + 10
       + ((((((v19 + 12 + ((v19 + v12 + ((v12 + 12) & ~v12)) & ~v12)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v12;
  if (v18)
    ++v19;
  v263 = v12 + 10;
  v264 = v19 + 7;
  v308 = (((((((((v19 + 7 + v20) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8;
  v289 = v10 | v5 | v12;
  v280 = v14 + v4;
  v282 = ((((v308 + 327 + ((v13 + 16 + ((v4 + v10 + ((v4 + v5) & ~v5)) & ~v10) + v326) & ~v13)) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v21 = v282 + ((v14 + v4) & ~v14);
  v296 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)(a2 + 24);
  v23 = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v293 = v23;
  v294 = (v21 + v25) & ~v25;
  v26 = *(_DWORD *)(v24 + 84);
  v290 = v24;
  v27 = *(_QWORD *)(v24 + 64);
  v284 = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(v284 - 8);
  v29 = *(_DWORD *)(v28 + 80);
  v278 = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(v278 - 8);
  v31 = *(_DWORD *)(v30 + 84);
  v241 = v31;
  v275 = *(_DWORD *)(v28 + 84);
  if (v275 > v31)
    v31 = *(_DWORD *)(v28 + 84);
  v260 = v31;
  if (v31 <= 0x7FFFFFFE)
    v32 = 2147483646;
  else
    v32 = v31;
  v33 = *(unsigned __int8 *)(v30 + 80);
  v34 = v29 & 0xF8 | v33 | 7;
  v283 = v28;
  v35 = *(_QWORD *)(v28 + 64) + 7;
  v36 = *(_QWORD *)(v30 + 64) + 7;
  v37 = ((((v36 + ((v33 + 8 + (v35 & 0xFFFFFFFFFFFFFFF8)) & ~v33)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v38 = v27 + v34;
  if (v26)
    v39 = v27 + v34;
  else
    v39 = v38 + 1;
  v40 = ((((((v39 + v294) & ~v34) + v37 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v255 = v4 + v25;
  v262 = v39;
  v41 = v37 + ((v39 + ((v4 + v25) & ~v25)) & ~v34) + 16;
  v42 = *(_QWORD *)(v318 - 8);
  v43 = *(unsigned __int8 *)(v42 + 80);
  v250 = v4 + v43;
  if (*(_DWORD *)(v42 + 84))
    v44 = *(_QWORD *)(v42 + 64);
  else
    v44 = *(_QWORD *)(v42 + 64) + 1;
  v45 = v44 + ((v4 + v43) & ~v43);
  v46 = ((v296 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v4 > v46)
    v46 = v4;
  if (v40 <= v41)
    v40 = v41;
  if (((v296 + 23) & 0xFFFFFFFFFFFFFFF8) + 8 <= v45)
    v47 = v45;
  else
    v47 = ((v296 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v46 > v40)
    v40 = v46;
  if (v40 > v47)
    v47 = v40;
  v48 = v25 | v12 | v34;
  v297 = v32;
  v295 = v26;
  if (v32 <= v26)
    v49 = v26;
  else
    v49 = v32;
  if (v49 <= v323)
    v49 = v323;
  v243 = v49;
  if (v49 <= 0x7FFFFFFF)
    v49 = 0x7FFFFFFF;
  v279 = v49;
  v324 = v25;
  v265 = v27 + v25;
  v266 = v27 + v34;
  v298 = ((((v36 + ((v33 + 8 + (v35 & 0xFFFFFFFFFFFFFFF8)) & ~v33)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v50 = v308 + 327 + ((v328 + ((v38 + ((v27 + v25) & ~v25)) & ~v34) + v37) & ~v301);
  if (v329)
    v51 = v327;
  else
    v51 = v327 + 1;
  v245 = v22;
  v52 = *(_QWORD *)(v22 - 8);
  v53 = *(unsigned __int8 *)(v52 + 80);
  v54 = v27 + v53;
  v55 = *(_QWORD *)(v52 + 64);
  if (!*(_DWORD *)(v52 + 84))
    ++v55;
  v56 = v55 + ((v27 + v53) & ~v53);
  v57 = v48 + v27;
  v58 = (((v50 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v59 = v58 + ((v48 + v27) & ~v48);
  v60 = ((v59 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v61 = ((((((v51 + ((v59 + v331) & ~v331)) & ~v302) + v326 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v27 > v60)
    v60 = v27;
  v62 = v27 + v331;
  v299 = v51;
  if (v61 <= ((v51 + ((v27 + v331) & ~v331)) & ~v302) + v326 + 16)
    v61 = ((v51 + (v62 & ~v331)) & ~v302) + v326 + 16;
  v63 = ((v59 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v63 <= v56)
    v63 = v56;
  if (v60 <= v61)
    v64 = v61;
  else
    v64 = v60;
  if (v64 > v63)
    v63 = v64;
  v65 = v63 + 1;
  if (v63 + 1 <= v47 + 1)
    v65 = v47 + 1;
  v66 = a1;
  v67 = *(unsigned __int8 *)(a1 + v65);
  if (v67 >= 2)
  {
    if (v65 <= 3)
      v68 = v65;
    else
      v68 = 4;
    __asm { BR              X2 }
  }
  v69 = ~v302;
  v70 = ~v316;
  v71 = ~v12;
  v317 = ~v324;
  if (v67 != 1)
  {
    v135 = ~v289;
    v136 = ~v43;
    switch(*(_BYTE *)(a1 + v47))
    {
      case 0:
        v252 = v70;
        v312 = v308 + 16;
        v320 = ~v301;
        v137 = *(void (**)(void))(v291 + 8);
        v137();
        v80 = (v280 + a1) & v135;
        if (v329 == v281)
        {
          v138 = (*(uint64_t (**)(uint64_t))(v291 + 48))(v80);
          v139 = ~v302;
          v140 = ~v331;
LABEL_264:
          if (v138)
            goto LABEL_277;
          v163 = (v267 + v80) & v140;
          v164 = (v327 + v163) & v139;
          goto LABEL_266;
        }
        v163 = (v267 + v80) & ~v331;
        v164 = (v327 + v163) & v69;
        if (v287 == v281)
        {
          if (v276 == v287)
          {
            v138 = (*(uint64_t (**)(uint64_t))(v285 + 48))((v327 + v163) & v69);
LABEL_263:
            v140 = ~v331;
            v139 = ~v302;
            goto LABEL_264;
          }
          v192 = (unint64_t *)((v288 + v164) & 0xFFFFFFFFFFFFFFF8);
          if (v261 > 0x7FFFFFFE)
          {
            v138 = (*(uint64_t (**)(unint64_t))(v273 + 48))(((unint64_t)v192 + v272) & v252);
            goto LABEL_263;
          }
          v193 = *v192;
        }
        else
        {
          v179 = v326 + v164;
          if ((v244 & 0x80000000) == 0)
          {
            v140 = ~v331;
            v139 = ~v302;
            v180 = *(_QWORD *)(v179 + 8);
            if (v180 >= 0xFFFFFFFF)
              LODWORD(v180) = -1;
            v138 = v180 + 1;
            goto LABEL_264;
          }
          v204 = (v277 + ((v328 + v179) & v320)) & v71;
          if (v240 > 0x7FFFFFFD)
          {
            v138 = (*(uint64_t (**)(uint64_t))(v270 + 48))(v204);
            goto LABEL_263;
          }
          v193 = *(_QWORD *)(((v269 + ((v268 + v204) & v71)) & 0xFFFFFFFFFFFFF8) + 8);
        }
        if (v193 >= 0xFFFFFFFF)
          LODWORD(v193) = -1;
        if ((v193 + 1) >= 2)
        {
LABEL_277:
          v94 = v282;
          goto LABEL_278;
        }
LABEL_266:
        ((void (*)(uint64_t, uint64_t))v137)(v80, AssociatedTypeWitness);
        ((void (*)(uint64_t, uint64_t))v137)(v163, AssociatedTypeWitness);
        (*(void (**)(uint64_t, uint64_t))(v285 + 8))(v164, v286);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v273 + 8))((v272 + ((v288 + v164) & 0xFFFFFFFFFFFFFFF8)) & v252, v274);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v206 = (v328 + v326 + v164) & v320;
        v207 = *(void (**)(unint64_t, uint64_t))(v270 + 8);
        v207((v277 + v206) & v71, v271);
        v208 = (v268 + ((v277 + v206) & v71)) & v71;
        v207(v208, v271);
        swift_bridgeObjectRelease();
        v209 = (v263
              + ((((((v269 + v208) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v71;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v270 + 48))(v209, 1, v271))
          v207(v209, v271);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v210 = (uint64_t *)((((((v264 + v209) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        v211 = v210[1];
        if ((v211 & 0x3000000000000000) == 0)
          sub_23AAAE53C(*v210, v211);
        swift_bridgeObjectRelease();
        v212 = v312 + v206;
        v213 = *(void **)(v312 + v206 + 16);
        LODWORD(v214) = -1;
        if ((unint64_t)v213 < 0xFFFFFFFF)
          v214 = *(_QWORD *)(v212 + 16);
        if ((int)v214 - 1 < 0)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v212 + 192))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_23AAA12F0(*(_QWORD *)((((v212 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v212 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
        goto LABEL_277;
      case 1:
        v300 = v71;
        v141 = ~v331;
        v332 = ~v34;
        v142 = ~v302;
        v249 = ~v33;
        v253 = v70;
        v313 = v308 + 16;
        v321 = ~v301;
        v259 = v33 + 8;
        v306 = *(_QWORD *)(v278 - 8);
        v143 = *(void (**)(void))(v291 + 8);
        v143();
        v144 = (v280 + a1) & v135;
        if (v329 == v281)
        {
          v145 = (*(uint64_t (**)(uint64_t))(v291 + 48))(v144);
          v146 = v69;
          v147 = v141;
LABEL_281:
          v196 = v300;
          goto LABEL_282;
        }
        v165 = (v267 + v144) & v141;
        v166 = (v327 + v165) & v69;
        if (v287 == v281)
        {
          if (v276 == v287)
          {
            v145 = (*(uint64_t (**)(uint64_t))(v285 + 48))((v327 + v165) & v69);
LABEL_280:
            v147 = v141;
            v146 = v69;
            goto LABEL_281;
          }
          v194 = (unint64_t *)((v288 + v166) & 0xFFFFFFFFFFFFFFF8);
          if (v261 > 0x7FFFFFFE)
          {
            v145 = (*(uint64_t (**)(unint64_t))(v273 + 48))(((unint64_t)v194 + v272) & v253);
            goto LABEL_280;
          }
          v195 = *v194;
          if (v195 >= 0xFFFFFFFF)
            LODWORD(v195) = -1;
          v196 = v300;
          if ((v195 + 1) >= 2)
          {
LABEL_295:
            v225 = (v144 + v324 + v282) & v317;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v290 + 48))(v225, 1, v293))
              (*(void (**)(unint64_t, uint64_t))(v290 + 8))(v225, v293);
            v226 = (v262 + v225) & v332;
            if (v275 == v297)
            {
              v227 = (*(uint64_t (**)(unint64_t))(v283 + 48))(v226);
            }
            else
            {
              v228 = (uint64_t *)((v35 + v226) & 0xFFFFFFFFFFFFFFF8);
              if (v260 <= 0x7FFFFFFE)
              {
                v229 = *v228;
                if ((unint64_t)*v228 >= 0xFFFFFFFF)
                  LODWORD(v229) = -1;
                if ((v229 + 1) >= 2)
                  goto LABEL_308;
                goto LABEL_307;
              }
              v227 = (*(uint64_t (**)(unint64_t))(v306 + 48))(((unint64_t)v228 + v259) & v249);
            }
            if (v227)
            {
LABEL_308:
              v175 = v226 + v298;
              goto LABEL_309;
            }
            v228 = (uint64_t *)((v35 + v226) & 0xFFFFFFFFFFFFFFF8);
LABEL_307:
            (*(void (**)(unint64_t, uint64_t))(v283 + 8))(v226, v284);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v306 + 8))(((unint64_t)v228 + v259) & v249, v278);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_308;
          }
        }
        else
        {
          v181 = v326 + v166;
          if ((v244 & 0x80000000) == 0)
          {
            v147 = v141;
            v146 = v69;
            v182 = *(_QWORD *)(v181 + 8);
            if (v182 >= 0xFFFFFFFF)
              LODWORD(v182) = -1;
            v145 = v182 + 1;
            goto LABEL_281;
          }
          v205 = (v277 + ((v328 + v181) & v321)) & v300;
          if (v240 > 0x7FFFFFFD)
          {
            v145 = (*(uint64_t (**)(uint64_t))(v270 + 48))(v205);
            v147 = v141;
            v146 = v142;
            v196 = v300;
LABEL_282:
            if (v145)
              goto LABEL_295;
            v165 = (v267 + v144) & v147;
            v166 = (v327 + v165) & v146;
            goto LABEL_284;
          }
          v239 = *(_QWORD *)(((v269 + ((v268 + v205) & v300)) & 0xFFFFFFFFFFFFF8) + 8);
          if (v239 >= 0xFFFFFFFF)
            LODWORD(v239) = -1;
          v196 = v300;
          if ((v239 + 1) >= 2)
            goto LABEL_295;
        }
LABEL_284:
        ((void (*)(uint64_t, uint64_t))v143)(v144, AssociatedTypeWitness);
        ((void (*)(uint64_t, uint64_t))v143)(v165, AssociatedTypeWitness);
        (*(void (**)(uint64_t, uint64_t))(v285 + 8))(v166, v286);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v273 + 8))((v272 + ((v288 + v166) & 0xFFFFFFFFFFFFFFF8)) & v253, v274);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v216 = (v328 + v326 + v166) & v321;
        v217 = *(void (**)(unint64_t, uint64_t))(v270 + 8);
        v217((v277 + v216) & v196, v271);
        v218 = (v268 + ((v277 + v216) & v196)) & v196;
        v217(v218, v271);
        swift_bridgeObjectRelease();
        v219 = (v263
              + ((((((v269 + v218) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v196;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v270 + 48))(v219, 1, v271))
          v217(v219, v271);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v220 = (uint64_t *)((((((v264 + v219) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        v221 = v220[1];
        if ((v221 & 0x3000000000000000) == 0)
          sub_23AAAE53C(*v220, v221);
        swift_bridgeObjectRelease();
        v222 = v313 + v216;
        v223 = *(void **)(v222 + 16);
        LODWORD(v224) = -1;
        if ((unint64_t)v223 < 0xFFFFFFFF)
          v224 = *(_QWORD *)(v222 + 16);
        if ((int)v224 - 1 < 0)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v222 + 192))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_23AAA12F0(*(_QWORD *)((((v222 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v222 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
        goto LABEL_295;
      case 2:
        v148 = ~v34;
        v149 = ~v33;
        v150 = v33 + 8;
        v307 = *(_QWORD *)(v278 - 8);
        (*(void (**)(void))(v291 + 8))();
        v151 = (v255 + a1) & v317;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v290 + 48))(v151, 1, v293))
          (*(void (**)(uint64_t, uint64_t))(v290 + 8))(v151, v293);
        v152 = (v262 + v151) & v148;
        if (v275 == v297)
        {
          if ((*(unsigned int (**)(uint64_t))(v283 + 48))(v152))
            goto LABEL_224;
        }
        else
        {
          v167 = (uint64_t *)((v35 + v152) & 0xFFFFFFFFFFFFFFF8);
          if (v260 <= 0x7FFFFFFE)
          {
            v168 = *v167;
            if ((unint64_t)*v167 >= 0xFFFFFFFF)
              LODWORD(v168) = -1;
            if ((v168 + 1) >= 2)
            {
LABEL_224:
              v176 = v298 + v152;
LABEL_225:
              v183 = *(void **)(v176 + 8);
LABEL_311:

              return;
            }
LABEL_223:
            (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v152, v284);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v307 + 8))(((unint64_t)v167 + v150) & v149, v278);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_224;
          }
          if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v307 + 48))(((unint64_t)v167 + v150) & v149, v241, v278))
          {
            goto LABEL_224;
          }
        }
        v167 = (uint64_t *)((v35 + v152) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_223;
      case 3:
        v254 = v70;
        v314 = v308 + 16;
        v322 = ~v301;
        v153 = *(void (**)(void))(v291 + 8);
        v153();
        v154 = (v280 + a1) & v135;
        if (v329 == v281)
        {
          v155 = (*(uint64_t (**)(uint64_t))(v291 + 48))(v154);
          v156 = ~v302;
          v157 = ~v331;
LABEL_314:
          if (v155)
            goto LABEL_327;
          v169 = (v267 + v154) & v157;
          v170 = (v327 + v169) & v156;
          goto LABEL_316;
        }
        v169 = (v267 + v154) & ~v331;
        v170 = (v327 + v169) & v69;
        if (v287 == v281)
        {
          if (v276 == v287)
          {
            v155 = (*(uint64_t (**)(uint64_t))(v285 + 48))((v327 + v169) & v69);
LABEL_313:
            v157 = ~v331;
            v156 = ~v302;
            goto LABEL_314;
          }
          v197 = (unint64_t *)((v288 + v170) & 0xFFFFFFFFFFFFFFF8);
          if (v261 > 0x7FFFFFFE)
          {
            v155 = (*(uint64_t (**)(unint64_t))(v273 + 48))(((unint64_t)v197 + v272) & v254);
            goto LABEL_313;
          }
          v198 = *v197;
        }
        else
        {
          v184 = v326 + v170;
          if ((v244 & 0x80000000) == 0)
          {
            v157 = ~v331;
            v156 = ~v302;
            v185 = *(_QWORD *)(v184 + 8);
            if (v185 >= 0xFFFFFFFF)
              LODWORD(v185) = -1;
            v155 = v185 + 1;
            goto LABEL_314;
          }
          v200 = (v277 + ((v328 + v184) & v322)) & v71;
          if (v240 > 0x7FFFFFFD)
          {
            v155 = (*(uint64_t (**)(uint64_t))(v270 + 48))(v200);
            goto LABEL_313;
          }
          v198 = *(_QWORD *)(((v269 + ((v268 + v200) & v71)) & 0xFFFFFFFFFFFFF8) + 8);
        }
        if (v198 >= 0xFFFFFFFF)
          LODWORD(v198) = -1;
        if ((v198 + 1) >= 2)
          goto LABEL_327;
LABEL_316:
        ((void (*)(uint64_t, uint64_t))v153)(v154, AssociatedTypeWitness);
        ((void (*)(uint64_t, uint64_t))v153)(v169, AssociatedTypeWitness);
        (*(void (**)(uint64_t, uint64_t))(v285 + 8))(v170, v286);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v273 + 8))((v272 + ((v288 + v170) & 0xFFFFFFFFFFFFFFF8)) & v254, v274);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v230 = (v328 + v326 + v170) & v322;
        v231 = *(void (**)(unint64_t, uint64_t))(v270 + 8);
        v231((v277 + v230) & v71, v271);
        v232 = (v268 + ((v277 + v230) & v71)) & v71;
        v231(v232, v271);
        swift_bridgeObjectRelease();
        v233 = (v263
              + ((((((v269 + v232) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v71;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v270 + 48))(v233, 1, v271))
          v231(v233, v271);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v234 = (uint64_t *)((((((v264 + v233) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        v235 = v234[1];
        if ((v235 & 0x3000000000000000) == 0)
          sub_23AAAE53C(*v234, v235);
        swift_bridgeObjectRelease();
        v236 = v314 + v230;
        v237 = *(void **)(v314 + v230 + 16);
        LODWORD(v238) = -1;
        if ((unint64_t)v237 < 0xFFFFFFFF)
          v238 = *(_QWORD *)(v236 + 16);
        if ((int)v238 - 1 < 0)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v236 + 192))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_23AAA12F0(*(_QWORD *)((((v236 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v236 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
        goto LABEL_327;
      case 4:
      case 5:
      case 7:
        v76 = *(void (**)(uint64_t, uint64_t))(v291 + 8);
        v77 = AssociatedTypeWitness;
        goto LABEL_143;
      case 6:
        (*(void (**)(void))(v291 + 8))();
        v158 = (v250 + a1) & v136;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v158, 1, v318))
          return;
        v76 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
        v66 = v158;
        v77 = v318;
LABEL_143:
        v76(v66, v77);
        return;
      default:
        if (v47 <= 3)
          v73 = v47;
        else
          v73 = 4;
        __asm { BR              X14 }
        return;
    }
  }
  v330 = v58;
  v319 = ~v301;
  v74 = ~v48;
  v75 = ~v53;
  switch(*(_BYTE *)(a1 + v63))
  {
    case 0:
      v78 = ~v34;
      v246 = ~v33;
      v309 = v308 + 16;
      v256 = v33 + 8;
      v303 = *(_QWORD *)(v278 - 8);
      v79 = *(void (**)(void))(v290 + 8);
      v79();
      v80 = (v57 + a1) & v74;
      if (v295 == v279)
      {
        v81 = (*(uint64_t (**)(unint64_t))(v290 + 48))((v57 + a1) & v74);
        goto LABEL_83;
      }
      v83 = (v265 + v80) & v317;
      v84 = (v266 + v83) & v78;
      if (v297 == v279)
      {
        if (v275 == v297)
        {
          v81 = (*(uint64_t (**)(uint64_t))(v283 + 48))((v266 + v83) & v78);
          goto LABEL_83;
        }
        v186 = (unint64_t *)((v35 + v84) & 0xFFFFFFFFFFFFFFF8);
        if (v260 <= 0x7FFFFFFE)
        {
          v187 = *v186;
          goto LABEL_339;
        }
        v81 = (*(uint64_t (**)(unint64_t))(v303 + 48))(((unint64_t)v186 + v256) & v246);
      }
      else
      {
        v171 = v298 + v84;
        if ((v243 & 0x80000000) == 0)
        {
          v82 = v78;
          v172 = *(_QWORD *)(v171 + 8);
          if (v172 >= 0xFFFFFFFF)
            LODWORD(v172) = -1;
          if ((_DWORD)v172 == -1)
          {
LABEL_84:
            v83 = (v265 + v80) & v317;
            v84 = (v266 + v83) & v82;
LABEL_85:
            ((void (*)(uint64_t, uint64_t))v79)(v80, v293);
            ((void (*)(uint64_t, uint64_t))v79)(v83, v293);
            (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v84, v284);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v303 + 8))((v256 + ((v35 + v84) & 0xFFFFFFFFFFFFFFF8)) & v246, v278);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v85 = (v328 + v298 + v84) & v319;
            v86 = *(void (**)(unint64_t, uint64_t))(v270 + 8);
            v86((v277 + v85) & v71, v271);
            v87 = (v268 + ((v277 + v85) & v71)) & v71;
            v86(v87, v271);
            swift_bridgeObjectRelease();
            v88 = (v263
                 + ((((((v269 + v87) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v71;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v270 + 48))(v88, 1, v271))
              v86(v88, v271);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v89 = (uint64_t *)((((((v264 + v88) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            v90 = v89[1];
            if ((v90 & 0x3000000000000000) == 0)
              sub_23AAAE53C(*v89, v90);
            swift_bridgeObjectRelease();
            v91 = v85 + v309;
            v92 = *(void **)(v85 + v309 + 16);
            LODWORD(v93) = -1;
            if ((unint64_t)v92 < 0xFFFFFFFF)
              v93 = *(_QWORD *)(v91 + 16);
            if ((int)v93 - 1 < 0)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(_QWORD *)(v91 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_23AAA12F0(*(_QWORD *)((((v91 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v91 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            goto LABEL_96;
          }
          goto LABEL_96;
        }
        v201 = (v277 + ((v328 + v171) & v319)) & v71;
        if (v240 <= 0x7FFFFFFD)
        {
          v187 = *(_QWORD *)(((v269 + ((v268 + v201) & v71)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_339:
          if (v187 >= 0xFFFFFFFF)
            LODWORD(v187) = -1;
          if ((v187 + 1) < 2)
            goto LABEL_85;
LABEL_96:
          v94 = v330;
LABEL_278:
          v215 = v80 + v94;
LABEL_310:
          v183 = *(void **)(((v215 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
          goto LABEL_311;
        }
        v81 = (*(uint64_t (**)(uint64_t))(v270 + 48))(v201);
      }
LABEL_83:
      v82 = v78;
      if (v81)
        goto LABEL_96;
      goto LABEL_84;
    case 1:
      v95 = ~v34;
      v325 = ~v302;
      v247 = ~v33;
      v251 = v70;
      v310 = v308 + 16;
      v257 = v33 + 8;
      v304 = *(_QWORD *)(v278 - 8);
      v96 = *(void (**)(void))(v290 + 8);
      v96();
      v97 = (v57 + a1) & v74;
      if (v295 == v279)
      {
        v98 = (*(uint64_t (**)(unint64_t))(v290 + 48))((v57 + a1) & v74);
LABEL_99:
        v99 = v95;
        goto LABEL_100;
      }
      v102 = (v265 + v97) & v317;
      v103 = (v266 + v102) & v95;
      if (v297 == v279)
      {
        if (v275 == v297)
        {
          v98 = (*(uint64_t (**)(uint64_t))(v283 + 48))((v266 + v102) & v95);
          goto LABEL_99;
        }
        v188 = (unint64_t *)((v35 + v103) & 0xFFFFFFFFFFFFFFF8);
        v101 = v299;
        if (v260 <= 0x7FFFFFFE)
        {
          v189 = *v188;
          goto LABEL_344;
        }
        v203 = (*(uint64_t (**)(unint64_t))(v304 + 48))(((unint64_t)v188 + v257) & v247);
      }
      else
      {
        v173 = v298 + v103;
        if ((v243 & 0x80000000) == 0)
        {
          v99 = v95;
          v174 = *(_QWORD *)(v173 + 8);
          if (v174 >= 0xFFFFFFFF)
            LODWORD(v174) = -1;
          v98 = v174 + 1;
LABEL_100:
          v100 = ~v331;
          v101 = v299;
          if (v98)
            goto LABEL_113;
LABEL_101:
          v102 = (v265 + v97) & v317;
          v103 = (v266 + v102) & v99;
LABEL_102:
          ((void (*)(uint64_t, uint64_t))v96)(v97, v293);
          ((void (*)(uint64_t, uint64_t))v96)(v102, v293);
          (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v103, v284);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v304 + 8))((v257 + ((v35 + v103) & 0xFFFFFFFFFFFFFFF8)) & v247, v278);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v104 = (v328 + v298 + v103) & v319;
          v105 = *(void (**)(unint64_t, uint64_t))(v270 + 8);
          v105((v277 + v104) & v71, v271);
          v106 = (v268 + ((v277 + v104) & v71)) & v71;
          v105(v106, v271);
          swift_bridgeObjectRelease();
          v107 = (v263
                + ((((((v269 + v106) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v71;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v270 + 48))(v107, 1, v271))
            v105(v107, v271);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v108 = (uint64_t *)((((((v264 + v107) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
          v109 = v108[1];
          if ((v109 & 0x3000000000000000) == 0)
            sub_23AAAE53C(*v108, v109);
          swift_bridgeObjectRelease();
          v110 = v104 + v310;
          v111 = *(void **)(v104 + v310 + 16);
          LODWORD(v112) = -1;
          if ((unint64_t)v111 < 0xFFFFFFFF)
            v112 = *(_QWORD *)(v110 + 16);
          if ((int)v112 - 1 < 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v110 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_23AAA12F0(*(_QWORD *)((((v110 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v110 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          v100 = ~v331;
          goto LABEL_113;
        }
        v202 = (v277 + ((v328 + v173) & v319)) & v71;
        v101 = v299;
        if (v240 <= 0x7FFFFFFD)
        {
          v189 = *(_QWORD *)(((v269 + ((v268 + v202) & v71)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_344:
          if (v189 >= 0xFFFFFFFF)
            LODWORD(v189) = -1;
          v100 = ~v331;
          if ((v189 + 1) < 2)
            goto LABEL_102;
LABEL_113:
          v113 = (v97 + v331 + v330) & v100;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v291 + 48))(v113, 1, AssociatedTypeWitness))(*(void (**)(unint64_t, uint64_t))(v291 + 8))(v113, AssociatedTypeWitness);
          v114 = (v101 + v113) & v325;
          if (v276 == v287)
          {
            if (!(*(unsigned int (**)(unint64_t))(v285 + 48))(v114))
              goto LABEL_201;
          }
          else
          {
            v159 = (uint64_t *)((v288 + v114) & 0xFFFFFFFFFFFFFFF8);
            if (v261 <= 0x7FFFFFFE)
            {
              v160 = *v159;
              if ((unint64_t)*v159 >= 0xFFFFFFFF)
                LODWORD(v160) = -1;
              if ((v160 + 1) >= 2)
                goto LABEL_203;
              goto LABEL_202;
            }
            if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v273 + 48))(((unint64_t)v159 + v272) & v251, v242, v274))
            {
LABEL_201:
              v159 = (uint64_t *)((v288 + v114) & 0xFFFFFFFFFFFFFFF8);
LABEL_202:
              (*(void (**)(unint64_t, uint64_t))(v285 + 8))(v114, v286);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v273 + 8))(((unint64_t)v159 + v272) & v251, v274);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
          }
LABEL_203:
          v175 = v114 + v326;
LABEL_309:
          v215 = v175 + 15;
          goto LABEL_310;
        }
        v203 = (*(uint64_t (**)(uint64_t))(v270 + 48))(v202);
      }
      v99 = v95;
      v100 = ~v331;
      if (v203)
        goto LABEL_113;
      goto LABEL_101;
    case 2:
      v115 = v70;
      (*(void (**)(void))(v290 + 8))();
      v116 = (v62 + a1) & ~v331;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v291 + 48))(v116, 1, AssociatedTypeWitness))
        (*(void (**)(uint64_t, uint64_t))(v291 + 8))(v116, AssociatedTypeWitness);
      v117 = (v299 + v116) & v69;
      if (v276 == v287)
      {
        if ((*(unsigned int (**)(uint64_t))(v285 + 48))(v117))
          goto LABEL_207;
LABEL_205:
        v161 = (uint64_t *)((v288 + v117) & 0xFFFFFFFFFFFFFFF8);
LABEL_206:
        (*(void (**)(uint64_t, uint64_t))(v285 + 8))(v117, v286);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v273 + 8))(((unint64_t)v161 + v272) & v115, v274);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_207;
      }
      v161 = (uint64_t *)((v288 + v117) & 0xFFFFFFFFFFFFFFF8);
      if (v261 > 0x7FFFFFFE)
      {
        if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v273 + 48))(((unint64_t)v161 + v272) & v115, v242, v274))
        {
          goto LABEL_207;
        }
        goto LABEL_205;
      }
      v162 = *v161;
      if ((unint64_t)*v161 >= 0xFFFFFFFF)
        LODWORD(v162) = -1;
      if ((v162 + 1) < 2)
        goto LABEL_206;
LABEL_207:
      v176 = v117 + v326;
      goto LABEL_225;
    case 3:
      v118 = ~v34;
      v248 = ~v33;
      v311 = v308 + 16;
      v258 = v33 + 8;
      v305 = *(_QWORD *)(v278 - 8);
      v119 = *(void (**)(void))(v290 + 8);
      v119();
      v120 = (v57 + a1) & v74;
      if (v295 == v279)
      {
        v121 = (*(uint64_t (**)(unint64_t))(v290 + 48))((v57 + a1) & v74);
        goto LABEL_125;
      }
      v123 = (v265 + v120) & v317;
      v124 = (v266 + v123) & v118;
      if (v297 == v279)
      {
        if (v275 == v297)
        {
          v121 = (*(uint64_t (**)(uint64_t))(v283 + 48))((v266 + v123) & v118);
          goto LABEL_125;
        }
        v190 = (unint64_t *)((v35 + v124) & 0xFFFFFFFFFFFFFFF8);
        if (v260 <= 0x7FFFFFFE)
        {
          v191 = *v190;
          goto LABEL_329;
        }
        v121 = (*(uint64_t (**)(unint64_t))(v305 + 48))(((unint64_t)v190 + v258) & v248);
        goto LABEL_125;
      }
      v177 = v298 + v124;
      if ((v243 & 0x80000000) != 0)
      {
        v199 = (v277 + ((v328 + v177) & v319)) & v71;
        if (v240 <= 0x7FFFFFFD)
        {
          v191 = *(_QWORD *)(((v269 + ((v268 + v199) & v71)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_329:
          if (v191 >= 0xFFFFFFFF)
            LODWORD(v191) = -1;
          if ((v191 + 1) < 2)
            goto LABEL_127;
          goto LABEL_327;
        }
        v121 = (*(uint64_t (**)(uint64_t))(v270 + 48))(v199);
LABEL_125:
        v122 = v118;
        if (v121)
          goto LABEL_327;
        goto LABEL_126;
      }
      v122 = v118;
      v178 = *(_QWORD *)(v177 + 8);
      if (v178 >= 0xFFFFFFFF)
        LODWORD(v178) = -1;
      if ((_DWORD)v178 == -1)
      {
LABEL_126:
        v123 = (v265 + v120) & v317;
        v124 = (v266 + v123) & v122;
LABEL_127:
        ((void (*)(uint64_t, uint64_t))v119)(v120, v293);
        ((void (*)(uint64_t, uint64_t))v119)(v123, v293);
        (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v124, v284);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v305 + 8))((v258 + ((v35 + v124) & 0xFFFFFFFFFFFFFFF8)) & v248, v278);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v125 = (v328 + v298 + v124) & v319;
        v126 = *(void (**)(unint64_t, uint64_t))(v270 + 8);
        v126((v277 + v125) & v71, v271);
        v127 = (v268 + ((v277 + v125) & v71)) & v71;
        v126(v127, v271);
        swift_bridgeObjectRelease();
        v128 = (v263
              + ((((((v269 + v127) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v71;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v270 + 48))(v128, 1, v271))
          v126(v128, v271);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v129 = (uint64_t *)((((((v264 + v128) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        v130 = v129[1];
        if ((v130 & 0x3000000000000000) == 0)
          sub_23AAAE53C(*v129, v130);
        swift_bridgeObjectRelease();
        v131 = v125 + v311;
        v132 = *(void **)(v125 + v311 + 16);
        LODWORD(v133) = -1;
        if ((unint64_t)v132 < 0xFFFFFFFF)
          v133 = *(_QWORD *)(v131 + 16);
        if ((int)v133 - 1 < 0)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v131 + 192))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_23AAA12F0(*(_QWORD *)((((v131 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v131 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
      }
LABEL_327:
      swift_bridgeObjectRelease();
      return;
    case 4:
    case 5:
    case 7:
      v76 = *(void (**)(uint64_t, uint64_t))(v290 + 8);
      v77 = v293;
      goto LABEL_143;
    case 6:
      (*(void (**)(void))(v290 + 8))();
      v134 = (v54 + a1) & v75;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v134, 1, v245))
        return;
      v76 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v66 = v134;
      v77 = v245;
      goto LABEL_143;
    default:
      if (v63 <= 3)
        v72 = v63;
      else
        v72 = 4;
      __asm { BR              X15 }
      return;
  }
}

uint64_t sub_23AF63A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  size_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  size_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t);
  uint64_t v83;
  uint64_t (*v84)(void);
  int v85;
  void *v86;
  const void *v87;
  size_t v88;
  unint64_t v89;
  void (*v90)(uint64_t);
  uint64_t v91;
  const void *v92;
  int v93;
  unint64_t v94;
  const void *v95;
  void *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void *v100;
  const void *v101;
  uint64_t v102;
  unint64_t v103;
  void (*v104)(uint64_t);
  uint64_t v105;
  uint64_t (*v106)(void);
  int v107;
  unint64_t v108;
  void *v109;
  const void *v110;
  size_t v111;
  char v112;
  unint64_t v113;
  uint64_t v114;
  const void *v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t);
  uint64_t v121;
  void *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t);
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void *v134;
  const void *v135;
  uint64_t v136;
  void (*v137)(uint64_t);
  uint64_t v138;
  void *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  _BYTE *v158;
  uint64_t *v159;
  uint64_t v160;
  char *v161;
  _BYTE *v162;
  int v163;
  size_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  unint64_t v172;
  unint64_t v173;
  void (*v174)(unint64_t, unint64_t, uint64_t);
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  int v183;
  unint64_t v184;
  unint64_t v185;
  void (*v186)(unint64_t, unint64_t, uint64_t);
  size_t v187;
  size_t v188;
  _BYTE *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  unint64_t v196;
  unint64_t v197;
  void *v198;
  const void *v199;
  unsigned int (*v200)(const void *, uint64_t, uint64_t);
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  size_t v207;
  unint64_t v208;
  size_t v209;
  unint64_t v210;
  size_t v211;
  unint64_t v212;
  size_t v213;
  _QWORD *v214;
  unint64_t v215;
  unint64_t v216;
  void (*v217)(unint64_t, unint64_t, uint64_t);
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  char *v222;
  void *v223;
  id v224;
  int v225;
  size_t v226;
  unint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  unint64_t v230;
  unint64_t v231;
  void (*v232)(unint64_t, unint64_t, uint64_t);
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  char *v237;
  void *v238;
  char v239;
  _QWORD *v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  unint64_t v247;
  uint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  int v256;
  _QWORD *v257;
  _QWORD *v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  int v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  void *v275;
  id v276;
  void *v277;
  id v278;
  uint64_t v279;
  id v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  BOOL v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  size_t v298;
  size_t v299;
  size_t v300;
  size_t v301;
  unint64_t v302;
  unint64_t v303;
  _QWORD *v304;
  _QWORD *v305;
  unint64_t v306;
  unint64_t v307;
  void (*v308)(unint64_t, unint64_t, uint64_t);
  _QWORD *v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  _QWORD *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  unint64_t v318;
  uint64_t v319;
  void (*v320)(unint64_t, uint64_t, uint64_t);
  size_t v321;
  size_t v322;
  _BYTE *v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  _QWORD *v328;
  _QWORD *v329;
  unint64_t v330;
  unint64_t v331;
  void *v332;
  const void *v333;
  unsigned int (*v334)(const void *, uint64_t, uint64_t);
  _QWORD *v335;
  _QWORD *v336;
  unint64_t v337;
  unint64_t v338;
  uint64_t v339;
  _QWORD *v340;
  _QWORD *v341;
  unint64_t v342;
  uint64_t *v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  int v351;
  _QWORD *v352;
  _QWORD *v353;
  unint64_t v354;
  __int128 *v355;
  unint64_t v356;
  int v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  void *v370;
  id v371;
  void *v372;
  id v373;
  id v374;
  unint64_t v375;
  unint64_t v376;
  _QWORD *v377;
  _QWORD *v378;
  unint64_t v379;
  unint64_t v380;
  void (*v381)(unint64_t, unint64_t, uint64_t);
  _QWORD *v382;
  _QWORD *v383;
  _QWORD *v384;
  _QWORD *v385;
  _QWORD *v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  unint64_t v391;
  uint64_t v392;
  void (*v393)(unint64_t, uint64_t, uint64_t);
  size_t v394;
  size_t v395;
  _BYTE *v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t v400;
  _QWORD *v401;
  _QWORD *v402;
  unint64_t v403;
  unint64_t v404;
  void *v405;
  const void *v406;
  unsigned int (*v407)(const void *, uint64_t, uint64_t);
  _QWORD *v408;
  _QWORD *v409;
  unint64_t v410;
  unint64_t v411;
  uint64_t v412;
  _QWORD *v413;
  _QWORD *v414;
  unint64_t v415;
  uint64_t *v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  unint64_t v423;
  int v424;
  _QWORD *v425;
  _QWORD *v426;
  unint64_t v427;
  __int128 *v428;
  unint64_t v429;
  int v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  void *v443;
  id v444;
  void *v445;
  id v446;
  uint64_t v447;
  id v448;
  const void *v449;
  size_t v450;
  unint64_t v451;
  unint64_t v452;
  _QWORD *v453;
  _QWORD *v454;
  unint64_t v455;
  unint64_t v456;
  void (*v457)(unint64_t, unint64_t, uint64_t);
  _QWORD *v458;
  _QWORD *v459;
  _QWORD *v460;
  _QWORD *v461;
  _QWORD *v462;
  size_t v463;
  size_t v464;
  uint64_t v465;
  int v466;
  size_t v467;
  size_t v468;
  void (*v469)(size_t, size_t, uint64_t);
  size_t v470;
  size_t v471;
  _BYTE *v472;
  unint64_t v473;
  unint64_t v474;
  unint64_t v475;
  unint64_t v476;
  _QWORD *v477;
  _QWORD *v478;
  unint64_t v479;
  unint64_t v480;
  void *v481;
  const void *v482;
  unsigned int (*v483)(const void *, uint64_t, uint64_t);
  _QWORD *v484;
  _QWORD *v485;
  unint64_t v486;
  unint64_t v487;
  uint64_t v488;
  _QWORD *v489;
  _QWORD *v490;
  unint64_t v491;
  uint64_t *v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t v498;
  unint64_t v499;
  int v500;
  _QWORD *v501;
  _QWORD *v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  int v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  void *v519;
  id v520;
  void *v521;
  id v522;
  uint64_t v523;
  id v524;
  void *v525;
  const void *v526;
  size_t v527;
  unint64_t v528;
  unint64_t v529;
  _QWORD *v530;
  _QWORD *v531;
  unint64_t v532;
  unint64_t v533;
  void (*v534)(unint64_t, unint64_t, uint64_t);
  _QWORD *v535;
  _QWORD *v536;
  _QWORD *v537;
  _QWORD *v538;
  _QWORD *v539;
  size_t v540;
  size_t v541;
  uint64_t v542;
  int v543;
  size_t v544;
  size_t v545;
  void (*v546)(size_t, size_t, uint64_t);
  size_t v547;
  size_t v548;
  _BYTE *v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  unint64_t v553;
  _QWORD *v554;
  _QWORD *v555;
  unint64_t v556;
  unint64_t v557;
  void *v558;
  const void *v559;
  unsigned int (*v560)(const void *, uint64_t, uint64_t);
  _QWORD *v561;
  _QWORD *v562;
  unint64_t v563;
  unint64_t v564;
  uint64_t v565;
  _QWORD *v566;
  _QWORD *v567;
  unint64_t v568;
  uint64_t *v569;
  unint64_t v570;
  uint64_t v571;
  unint64_t v572;
  unint64_t v573;
  uint64_t v574;
  unint64_t v575;
  unint64_t v576;
  int v577;
  _QWORD *v578;
  _QWORD *v579;
  unint64_t v580;
  __int128 *v581;
  unint64_t v582;
  int v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  void *v596;
  id v597;
  void *v598;
  id v599;
  id v600;
  const void *v601;
  size_t v602;
  unint64_t v603;
  unint64_t v604;
  _QWORD *v605;
  _QWORD *v606;
  unint64_t v607;
  unint64_t v608;
  void (*v609)(unint64_t, unint64_t, uint64_t);
  _QWORD *v610;
  _QWORD *v611;
  _QWORD *v612;
  _QWORD *v613;
  _QWORD *v614;
  size_t v615;
  size_t v616;
  uint64_t v617;
  int v618;
  size_t v619;
  size_t v620;
  void (*v621)(size_t, size_t, uint64_t);
  size_t v622;
  size_t v623;
  _BYTE *v624;
  unint64_t v625;
  unint64_t v626;
  unint64_t v627;
  unint64_t v628;
  _QWORD *v629;
  _QWORD *v630;
  unint64_t v631;
  unint64_t v632;
  void *v633;
  const void *v634;
  unsigned int (*v635)(const void *, uint64_t, uint64_t);
  _QWORD *v636;
  _QWORD *v637;
  unint64_t v638;
  unint64_t v639;
  uint64_t v640;
  _QWORD *v641;
  _QWORD *v642;
  unint64_t v643;
  uint64_t *v644;
  unint64_t v645;
  uint64_t v646;
  unint64_t v647;
  unint64_t v648;
  uint64_t v649;
  unint64_t v650;
  unint64_t v651;
  int v652;
  _QWORD *v653;
  _QWORD *v654;
  unint64_t v655;
  unint64_t v656;
  unint64_t v657;
  int v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  __int128 v663;
  __int128 v664;
  __int128 v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  void *v671;
  id v672;
  void *v673;
  id v674;
  uint64_t v675;
  id v676;
  _OWORD *v677;
  __int128 *v678;
  __int128 v679;
  unint64_t v680;
  unint64_t v681;
  __int128 v682;
  _QWORD *v683;
  uint64_t v684;
  uint64_t v685;
  _QWORD *v686;
  uint64_t v687;
  unint64_t v688;
  unint64_t v689;
  _QWORD *v690;
  _QWORD *v691;
  void *v692;
  id v693;
  _OWORD *v694;
  __int128 *v695;
  __int128 v696;
  unint64_t v697;
  unint64_t v698;
  __int128 v699;
  _QWORD *v700;
  uint64_t v701;
  uint64_t v702;
  _QWORD *v703;
  uint64_t v704;
  unint64_t v705;
  unint64_t v706;
  void *v707;
  const void *v708;
  char *v709;
  char *v710;
  _QWORD *v711;
  uint64_t v712;
  size_t v713;
  _QWORD *v714;
  unint64_t v715;
  unint64_t v716;
  void (*v717)(unint64_t, unint64_t, uint64_t);
  _QWORD *v718;
  _QWORD *v719;
  _QWORD *v720;
  _QWORD *v721;
  _QWORD *v722;
  _QWORD *v723;
  void *v724;
  id v725;
  _OWORD *v726;
  __int128 *v727;
  __int128 v728;
  unint64_t v729;
  unint64_t v730;
  __int128 v731;
  _QWORD *v732;
  uint64_t v733;
  uint64_t v734;
  _QWORD *v735;
  uint64_t v736;
  unint64_t v737;
  unint64_t v738;
  _QWORD *v739;
  _QWORD *v740;
  _OWORD *v741;
  __int128 *v742;
  __int128 v743;
  unint64_t v744;
  unint64_t v745;
  __int128 v746;
  _QWORD *v747;
  uint64_t v748;
  uint64_t v749;
  _QWORD *v750;
  uint64_t v751;
  unint64_t v752;
  unint64_t v753;
  _QWORD *v754;
  _QWORD *v755;
  void *v756;
  id v757;
  _OWORD *v758;
  __int128 *v759;
  __int128 v760;
  unint64_t v761;
  unint64_t v762;
  __int128 v763;
  _QWORD *v764;
  uint64_t v765;
  uint64_t v766;
  _QWORD *v767;
  uint64_t v768;
  unint64_t v769;
  unint64_t v770;
  void *v771;
  const void *v772;
  size_t v773;
  char *v774;
  char *v775;
  int v776;
  uint64_t *v777;
  uint64_t v778;
  size_t v779;
  size_t v780;
  size_t v781;
  _QWORD *v782;
  unint64_t v783;
  unint64_t v784;
  void (*v785)(unint64_t, unint64_t, uint64_t);
  _QWORD *v786;
  _QWORD *v787;
  _QWORD *v788;
  _QWORD *v789;
  _QWORD *v790;
  _QWORD *v791;
  id v792;
  _OWORD *v793;
  __int128 *v794;
  __int128 v795;
  unint64_t v796;
  unint64_t v797;
  __int128 v798;
  _QWORD *v799;
  uint64_t v800;
  uint64_t v801;
  _QWORD *v802;
  uint64_t v803;
  unint64_t v804;
  unint64_t v805;
  _QWORD *v806;
  _QWORD *v807;
  uint64_t result;
  unint64_t v809;
  unint64_t v810;
  size_t v811;
  size_t v812;
  size_t v813;
  size_t v814;
  unsigned int v815;
  unsigned int v816;
  unsigned int v817;
  unsigned int v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  size_t v834;
  size_t v835;
  unsigned int v836;
  unsigned int v837;
  unint64_t __n;
  unint64_t v839;
  uint64_t v840;
  size_t v841;
  size_t v842;
  size_t v843;
  uint64_t v844;
  size_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  unsigned int v851;
  unsigned int v852;
  uint64_t v853;
  unsigned int v854;
  unint64_t v855;
  unsigned int v856;
  unint64_t v857;
  unsigned int v858;
  unsigned int v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  unsigned int v865;
  unsigned int v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  size_t v872;
  size_t v873;
  unint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  const void *v882;
  uint64_t v883;
  uint64_t AssociatedTypeWitness;
  void *v885;
  uint64_t v886;
  unint64_t v887;
  uint64_t v888;
  const void *v889;
  unint64_t v890;
  unint64_t v891;
  void *v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v902;
  void *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  unint64_t v913;
  unint64_t v914;
  unint64_t v915;
  unint64_t v917;
  uint64_t v918;
  unint64_t v919;
  void *v920;
  unint64_t v921;
  void *v922;
  uint64_t v923;
  unsigned int v924;
  unint64_t v925;
  unint64_t v926;
  unint64_t v927;
  void *v928;
  void *v929;
  size_t v930;
  const void *v931;
  void *v932;
  size_t v933;
  void *v934;
  size_t v935;
  void *v936;
  size_t v937;
  void *v938;
  unsigned int v939;
  unint64_t v940;
  uint64_t v941;
  unint64_t v942;
  const void *v943;
  const void *v944;
  unint64_t v945;
  const void *v946;
  unint64_t v947;
  void *v948;

  v906 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v864 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v864 - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  v850 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v850 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 | v10 | 7;
  v846 = sub_23B1C5BDC();
  v12 = *(_QWORD *)(v846 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v13 | 7;
  v15 = v11 | v6 | v13;
  v883 = v4;
  v16 = *(_DWORD *)(v9 + 84);
  v816 = v16;
  v852 = *(_DWORD *)(v7 + 84);
  if (v852 > v16)
    v16 = *(_DWORD *)(v7 + 84);
  v837 = v16;
  if (v16 <= 0x7FFFFFFE)
    v16 = 2147483646;
  v924 = *(_DWORD *)(v4 + 84);
  v866 = v16;
  if (v16 <= v924)
    v16 = *(_DWORD *)(v4 + 84);
  v17 = *(_DWORD *)(v12 + 84);
  if (v17 <= 0x7FFFFFFE)
    v18 = 2147483646;
  else
    v18 = *(_DWORD *)(v12 + 84);
  v939 = v18;
  if (v16 <= v18)
    v16 = v18;
  v818 = v16;
  if (v16 <= 0x7FFFFFFF)
    v16 = 0x7FFFFFFF;
  v859 = v16;
  v854 = *(_DWORD *)(v12 + 84);
  v19 = v17 == 0;
  v941 = v6;
  v869 = v5 + v6;
  v899 = v11;
  v870 = v5 + v11;
  v863 = v7;
  v871 = *(_QWORD *)(v7 + 64) + 7;
  v848 = v10 + 8;
  v904 = v10;
  v849 = v9;
  v840 = *(_QWORD *)(v9 + 64) + 7;
  v930 = ((((v840 + ((v10 + 8 + (v871 & 0xFFFFFFFFFFFFFFF8)) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v893 = v13 | 7;
  v918 = v14 + 16;
  v853 = v13 + 12;
  v867 = *(_QWORD *)(v846 - 8);
  v20 = *(_QWORD *)(v12 + 64);
  v845 = v20 + v13;
  v811 = v20 + 12;
  v844 = v13 + 10;
  v21 = (v13
       + 10
       + ((((((v20 + 12 + ((v20 + v13 + ((v13 + 12) & ~v13)) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v13;
  v872 = v20;
  if (v19)
    ++v20;
  v873 = v20;
  v874 = v21;
  v843 = v20 + 7;
  v917 = ((((((((((v20 + 7 + v21) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
           + 19) & 0xFFFFFFFFFFFFFFF8)
         + 25) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v860 = (v14 + 16 + ((v5 + v11 + ((v5 + v6) & ~v6)) & ~v11) + v930) & ~v14;
  v875 = v11 | v6 | v13;
  v857 = v15 + v5;
  v839 = ((((v860 + v917 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v22 = v839 + ((v15 + v5) & ~v15);
  v890 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_QWORD *)(a3 + 24);
  v24 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v886 = v24;
  v887 = (v22 + v26) & ~v26;
  v27 = *(_DWORD *)(v25 + 84);
  v881 = v25;
  v28 = *(_QWORD *)(v25 + 64);
  if (v27)
    v29 = *(_QWORD *)(v25 + 64);
  else
    v29 = v28 + 1;
  v862 = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(v862 - 8);
  v31 = *(_DWORD *)(v30 + 80) & 0xF8;
  v847 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v847 - 8);
  v33 = *(unsigned __int8 *)(v32 + 80);
  v34 = v31 | v33 | 7;
  v35 = *(_DWORD *)(v32 + 84);
  v815 = v35;
  v851 = *(_DWORD *)(v30 + 84);
  if (v851 > v35)
    v35 = *(_DWORD *)(v30 + 84);
  v836 = v35;
  if (v35 <= 0x7FFFFFFE)
    v36 = 2147483646;
  else
    v36 = v35;
  v861 = v30;
  v37 = *(_QWORD *)(v30 + 64) + 7;
  v38 = *(_QWORD *)(v32 + 64) + 7;
  v39 = ((((v38 + ((v33 + 8 + (v37 & 0xFFFFFFFFFFFFFFF8)) & ~v33)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v835 = v29;
  v40 = ((((((v29 + v34 + v887) & ~v34) + v39 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v824 = v5 + v26;
  v842 = v29 + v34;
  v41 = *(_QWORD *)(v906 - 8);
  v42 = *(unsigned __int8 *)(v41 + 80);
  v819 = v5 + v42;
  if (*(_DWORD *)(v41 + 84))
    v43 = *(_QWORD *)(v41 + 64);
  else
    v43 = *(_QWORD *)(v41 + 64) + 1;
  v812 = v43;
  v44 = ((v5 + v42) & ~v42) + v43;
  v45 = ((v890 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v5 > v45)
    v45 = v5;
  if (v40 <= v39 + ((v29 + v34 + ((v5 + v26) & ~v26)) & ~v34) + 16)
    v40 = v39 + ((v29 + v34 + ((v5 + v26) & ~v26)) & ~v34) + 16;
  if (((v890 + 23) & 0xFFFFFFFFFFFFFFF8) + 8 <= v44)
    v46 = v44;
  else
    v46 = ((v890 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v45 > v40)
    v40 = v45;
  if (v40 <= v46)
    v47 = v46;
  else
    v47 = v40;
  v48 = v26 | v13 | v34;
  v855 = v48 + v28;
  v865 = v36;
  v858 = v27;
  if (v36 <= v27)
    v49 = v27;
  else
    v49 = v36;
  if (v49 <= v939)
    v49 = v939;
  v817 = v49;
  if (v49 <= 0x7FFFFFFF)
    v49 = 0x7FFFFFFF;
  v856 = v49;
  v912 = v26;
  v868 = v28 + v26;
  v888 = v28 + v34;
  v50 = (v918 + ((v28 + v34 + ((v28 + v26) & ~v26)) & ~v34) + v39) & ~v893;
  if (v924)
    v51 = v5;
  else
    v51 = v5 + 1;
  v829 = v23;
  v52 = *(_QWORD *)(v23 - 8);
  __n = ((((v50 + v917 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v53 = __n + ((v48 + v28) & ~v48);
  v54 = ((v53 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v55 = v941;
  v834 = v51;
  v56 = v899;
  v57 = ((((((v51 + v56 + ((v53 + v55) & ~v55)) & ~v56) + v930 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v58 = v28 + v941;
  v841 = v51 + v899;
  v59 = v899;
  v60 = ((v51 + v56 + ((v28 + v55) & ~v55)) & ~v56) + v930 + 16;
  if (*(_DWORD *)(v52 + 84))
    v61 = *(_QWORD *)(v52 + 64);
  else
    v61 = *(_QWORD *)(v52 + 64) + 1;
  if (v28 > v54)
    v54 = v28;
  if (v57 <= v60)
    v57 = v60;
  v62 = ((v53 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v63 = *(unsigned __int8 *)(v52 + 80);
  v64 = v28 + v63;
  if (v62 <= ((v28 + v63) & ~v63) + v61)
    v62 = ((v28 + v63) & ~v63) + v61;
  if (v54 <= v57)
    v54 = v57;
  if (v54 <= v62)
    v65 = v62;
  else
    v65 = v54;
  v66 = a2;
  v891 = v47;
  if (v65 + 1 <= v47 + 1)
    v67 = v47 + 1;
  else
    v67 = v65 + 1;
  v68 = *(unsigned __int8 *)(a2 + v67);
  v940 = v67;
  if (v68 >= 2)
  {
    if (v67 <= 3)
      v69 = v67;
    else
      v69 = 4;
    __asm { BR              X17 }
  }
  v902 = ~v941;
  v70 = ~v904;
  v900 = ~v13;
  v71 = ~v912;
  v905 = ~v34;
  if (v68 != 1)
  {
    v74 = AssociatedTypeWitness;
    v75 = a1;
    v76 = v940;
    v117 = ~v875;
    v118 = ~v42;
    switch(*(_BYTE *)(v66 + v47))
    {
      case 0:
        v119 = ~v59;
        v908 = ~v893;
        v821 = v70;
        v120 = *(void (**)(uint64_t))(v883 + 16);
        v121 = v66;
        v120(a1);
        v122 = (void *)((v857 + a1) & v117);
        v944 = (const void *)((v857 + v121) & v117);
        if (v924 == v859)
        {
          v123 = (*(uint64_t (**)(void))(v883 + 48))();
          v124 = v902;
LABEL_270:
          if (v123)
          {
LABEL_271:
            v449 = v944;
            memcpy(v122, v944, v839);
LABEL_272:
            v450 = v873;
            goto LABEL_350;
          }
          v151 = ((unint64_t)v944 + v869) & v124;
          v152 = (v870 + v151) & v119;
          goto LABEL_274;
        }
        v124 = v902;
        v151 = (v869 + ((v857 + v121) & v117)) & v902;
        v152 = (v870 + v151) & v119;
        if (v866 == v859)
        {
          if (v852 == v866)
          {
            v123 = (*(uint64_t (**)(unint64_t))(v863 + 48))((v870 + v151) & v119);
            goto LABEL_270;
          }
          v288 = (unint64_t *)((v871 + v152) & 0xFFFFFFFFFFFFFFF8);
          if (v837 > 0x7FFFFFFE)
          {
            v123 = (*(uint64_t (**)(unint64_t))(v849 + 48))(((unint64_t)v288 + v848) & v821);
            goto LABEL_270;
          }
          v289 = *v288;
        }
        else
        {
          v207 = v930 + v152;
          if ((v818 & 0x80000000) == 0)
          {
            v208 = *(_QWORD *)(v207 + 8);
            if (v208 >= 0xFFFFFFFF)
              LODWORD(v208) = -1;
            v123 = v208 + 1;
            goto LABEL_270;
          }
          v298 = (v853 + ((v918 + v207) & v908)) & v900;
          if (v854 > 0x7FFFFFFD)
          {
            v123 = (*(uint64_t (**)(size_t))(v867 + 48))(v298);
            goto LABEL_270;
          }
          v289 = *(_QWORD *)(((v811 + ((v845 + v298) & v900)) & 0xFFFFFFFFFFFFF8) + 8);
        }
        if (v289 >= 0xFFFFFFFF)
          LODWORD(v289) = -1;
        if ((v289 + 1) >= 2)
          goto LABEL_271;
LABEL_274:
        ((void (*)(void *, const void *, uint64_t))v120)(v122, v944, AssociatedTypeWitness);
        v928 = v122;
        v451 = ((unint64_t)v122 + v869) & v124;
        ((void (*)(unint64_t, unint64_t, uint64_t))v120)(v451, v151, AssociatedTypeWitness);
        v452 = (v870 + v451) & v119;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v863 + 16))(v452, v152, v864);
        v453 = (_QWORD *)((v871 + v452) & 0xFFFFFFFFFFFFFFF8);
        v454 = (_QWORD *)((v871 + v152) & 0xFFFFFFFFFFFFFFF8);
        *v453 = *v454;
        v455 = ((unint64_t)v453 + v848) & v821;
        v456 = ((unint64_t)v454 + v848) & v821;
        v457 = *(void (**)(unint64_t, unint64_t, uint64_t))(v849 + 16);
        swift_bridgeObjectRetain();
        v457(v455, v456, v850);
        v458 = (_QWORD *)((v840 + v455) & 0xFFFFFFFFFFFFF8);
        v459 = (_QWORD *)((v840 + v456) & 0xFFFFFFFFFFFFF8);
        *v458 = *v459;
        v460 = (_QWORD *)(((unint64_t)v458 + 15) & 0xFFFFFFFFFFFFFFF8);
        v461 = (_QWORD *)(((unint64_t)v459 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v460 = *v461;
        v460[1] = v461[1];
        v462 = (_QWORD *)(v930 + v452);
        *v462 = *(_QWORD *)(v930 + v152);
        v462[1] = *(_QWORD *)(v930 + v152 + 8);
        v463 = (v918 + v930 + v452) & v908;
        v464 = (v918 + v930 + v152) & v908;
        *(_BYTE *)v463 = *(_BYTE *)v464;
        v465 = v463 | 4;
        v466 = *(_DWORD *)(v464 | 4);
        *(_BYTE *)(v465 + 4) = *(_BYTE *)((v464 | 4) + 4);
        *(_DWORD *)v465 = v466;
        *(_WORD *)(v463 + 10) = *(_WORD *)(v464 + 0xA);
        v933 = v463;
        v467 = (v853 + v463) & v900;
        v468 = (v853 + v464) & v900;
        v469 = *(void (**)(size_t, size_t, uint64_t))(v867 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v469(v467, v468, v846);
        v470 = (v845 + v467) & v900;
        v471 = (v845 + v468) & v900;
        v469(v470, v471, v846);
        v472 = (_BYTE *)(v470 + v872);
        *v472 = *(_BYTE *)(v471 + v872);
        v472[1] = *(_BYTE *)(v471 + v872 + 1);
        v472[2] = *(_BYTE *)(v471 + v872 + 2);
        v472[3] = *(_BYTE *)(v471 + v872 + 3);
        v472[4] = *(_BYTE *)(v471 + v872 + 4);
        v473 = (v470 + v872 + 12) & 0xFFFFFFFFFFFFFFF8;
        v474 = (v471 + v872 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v473 = *(_QWORD *)v474;
        *(_QWORD *)(v473 + 8) = *(_QWORD *)(v474 + 8);
        *(_BYTE *)(v473 + 16) = *(_BYTE *)(v474 + 16);
        *(_BYTE *)(v473 + 17) = *(_BYTE *)(v474 + 17);
        *(_BYTE *)(v473 + 18) = *(_BYTE *)(v474 + 18);
        *(_BYTE *)(v473 + 19) = *(_BYTE *)(v474 + 19);
        v475 = (v473 + 27) & 0xFFFFFFFFFFFFFFF8;
        v476 = (v474 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v475 = *(_QWORD *)v476;
        *(_BYTE *)(v475 + 8) = *(_BYTE *)(v476 + 8);
        *(_BYTE *)(v475 + 9) = *(_BYTE *)(v476 + 9);
        *(_BYTE *)(v475 + 10) = *(_BYTE *)(v476 + 10);
        *(_BYTE *)(v475 + 11) = *(_BYTE *)(v476 + 11);
        *(_BYTE *)(v475 + 12) = *(_BYTE *)(v476 + 12);
        v477 = (_QWORD *)((v473 + 47) & 0xFFFFFFFFFFFFF8);
        v478 = (_QWORD *)((v474 + 47) & 0xFFFFFFFFFFFFF8);
        *v477 = *v478;
        v479 = ((unint64_t)v477 + 15) & 0xFFFFFFFFFFFFFFF8;
        v480 = ((unint64_t)v478 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v479 = *(_QWORD *)v480;
        *(_BYTE *)(v479 + 8) = *(_BYTE *)(v480 + 8);
        *(_BYTE *)(v479 + 9) = *(_BYTE *)(v480 + 9);
        v481 = (void *)((v844 + v479) & v900);
        v482 = (const void *)((v844 + v480) & v900);
        v483 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v867 + 48);
        swift_bridgeObjectRetain();
        if (v483(v482, 1, v846))
        {
          memcpy(v481, v482, v873);
        }
        else
        {
          v469((size_t)v481, (size_t)v482, v846);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v867 + 56))(v481, 0, 1, v846);
        }
        v484 = (_QWORD *)(((unint64_t)v481 + v843) & 0xFFFFFFFFFFFFFFF8);
        v485 = (_QWORD *)(((unint64_t)v482 + v843) & 0xFFFFFFFFFFFFFFF8);
        *v484 = *v485;
        v486 = ((unint64_t)v484 + 15) & 0xFFFFFFFFFFFFFFF8;
        v487 = ((unint64_t)v485 + 15) & 0xFFFFFFFFFFFFFFF8;
        v488 = *(_QWORD *)v487;
        *(_BYTE *)(v486 + 8) = *(_BYTE *)(v487 + 8);
        *(_QWORD *)v486 = v488;
        v489 = (_QWORD *)(((unint64_t)v484 + 31) & 0xFFFFFFFFFFFFF8);
        v490 = (_QWORD *)(((unint64_t)v485 + 31) & 0xFFFFFFFFFFFFF8);
        *v489 = *v490;
        v491 = ((unint64_t)v489 + 15) & 0xFFFFFFFFFFFFFFF8;
        v492 = (uint64_t *)(((unint64_t)v490 + 15) & 0xFFFFFFFFFFFFFFF8);
        v493 = v492[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((v493 & 0x3000000000000000) != 0)
        {
          *(_OWORD *)v491 = *(_OWORD *)v492;
        }
        else
        {
          v494 = *v492;
          sub_23AAAE668(*v492, v493);
          *(_QWORD *)v491 = v494;
          *(_QWORD *)(v491 + 8) = v493;
        }
        v495 = (v491 + 19) & 0xFFFFFFFFFFFFFFF8;
        v496 = ((unint64_t)v492 + 19) & 0xFFFFFFFFFFFFFFF8;
        v497 = *(_QWORD *)v496;
        *(_BYTE *)(v495 + 8) = *(_BYTE *)(v496 + 8);
        *(_QWORD *)v495 = v497;
        *(_BYTE *)(v495 + 9) = *(_BYTE *)(v496 + 9);
        v498 = (v495 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v499 = (v496 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v500 = *(_DWORD *)v499;
        *(_BYTE *)(v498 + 4) = *(_BYTE *)(v499 + 4);
        *(_DWORD *)v498 = v500;
        v501 = (_QWORD *)((v495 + 25) & 0xFFFFFFFFFFFFFFF8);
        v502 = (_QWORD *)((v496 + 25) & 0xFFFFFFFFFFFFFFF8);
        *v501 = *v502;
        v501[1] = v502[1];
        v503 = v917 + v933;
        v504 = v917 + v464;
        v505 = *(_QWORD *)(v917 + v464 + 16);
        if (v505 >= 0xFFFFFFFF)
          LODWORD(v505) = -1;
        v506 = v505 - 1;
        swift_bridgeObjectRetain();
        if (v506 < 0)
        {
          *(_QWORD *)v503 = *(_QWORD *)v504;
          *(_BYTE *)(v503 + 8) = *(_BYTE *)(v504 + 8);
          *(_BYTE *)(v503 + 9) = *(_BYTE *)(v504 + 9);
          v519 = *(void **)(v504 + 16);
          v520 = v519;
          *(_QWORD *)(v503 + 16) = v519;
          v521 = *(void **)(v504 + 24);
          v522 = v521;
          *(_QWORD *)(v503 + 24) = v521;
          *(_BYTE *)(v503 + 32) = *(_BYTE *)(v504 + 32);
          *(_BYTE *)(v503 + 33) = *(_BYTE *)(v504 + 33);
          *(_BYTE *)(v503 + 34) = *(_BYTE *)(v504 + 34);
          *(_QWORD *)(v503 + 40) = *(_QWORD *)(v504 + 40);
          *(_QWORD *)(v503 + 48) = *(_QWORD *)(v504 + 48);
          *(_QWORD *)(v503 + 56) = *(_QWORD *)(v504 + 56);
          *(_QWORD *)(v503 + 64) = *(_QWORD *)(v504 + 64);
          *(_BYTE *)(v503 + 72) = *(_BYTE *)(v504 + 72);
          *(_QWORD *)(v503 + 80) = *(_QWORD *)(v504 + 80);
          *(_QWORD *)(v503 + 88) = *(_QWORD *)(v504 + 88);
          v934 = *(void **)(v504 + 96);
          *(_QWORD *)(v503 + 96) = v934;
          *(_BYTE *)(v503 + 104) = *(_BYTE *)(v504 + 104);
          *(_BYTE *)(v503 + 105) = *(_BYTE *)(v504 + 105);
          *(_QWORD *)(v503 + 112) = *(_QWORD *)(v504 + 112);
          *(_QWORD *)(v503 + 120) = *(_QWORD *)(v504 + 120);
          *(_QWORD *)(v503 + 128) = *(_QWORD *)(v504 + 128);
          *(_QWORD *)(v503 + 136) = *(_QWORD *)(v504 + 136);
          *(_QWORD *)(v503 + 144) = *(_QWORD *)(v504 + 144);
          *(_QWORD *)(v503 + 152) = *(_QWORD *)(v504 + 152);
          *(_QWORD *)(v503 + 160) = *(_QWORD *)(v504 + 160);
          *(_QWORD *)(v503 + 168) = *(_QWORD *)(v504 + 168);
          *(_BYTE *)(v503 + 176) = *(_BYTE *)(v504 + 176);
          *(_QWORD *)(v503 + 184) = *(_QWORD *)(v504 + 184);
          v523 = *(_QWORD *)(v504 + 192);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v524 = v934;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v523)
          {
            *(_QWORD *)(v503 + 192) = v523;
            *(_QWORD *)(v503 + 200) = *(_QWORD *)(v504 + 200);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(v503 + 192) = *(_OWORD *)(v504 + 192);
          }
          v75 = a1;
          v450 = v872;
          *(_QWORD *)(v503 + 208) = *(_QWORD *)(v504 + 208);
          *(_QWORD *)(v503 + 216) = *(_QWORD *)(v504 + 216);
          *(_QWORD *)(v503 + 224) = *(_QWORD *)(v504 + 224);
          *(_QWORD *)(v503 + 232) = *(_QWORD *)(v504 + 232);
          *(_QWORD *)(v503 + 240) = *(_QWORD *)(v504 + 240);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v507 = *(_OWORD *)v504;
          v508 = *(_OWORD *)(v504 + 16);
          v509 = *(_OWORD *)(v504 + 48);
          *(_OWORD *)(v503 + 32) = *(_OWORD *)(v504 + 32);
          *(_OWORD *)(v503 + 48) = v509;
          *(_OWORD *)v503 = v507;
          *(_OWORD *)(v503 + 16) = v508;
          v510 = *(_OWORD *)(v504 + 64);
          v511 = *(_OWORD *)(v504 + 80);
          v512 = *(_OWORD *)(v504 + 112);
          *(_OWORD *)(v503 + 96) = *(_OWORD *)(v504 + 96);
          *(_OWORD *)(v503 + 112) = v512;
          *(_OWORD *)(v503 + 64) = v510;
          *(_OWORD *)(v503 + 80) = v511;
          v513 = *(_OWORD *)(v504 + 128);
          v514 = *(_OWORD *)(v504 + 144);
          v515 = *(_OWORD *)(v504 + 176);
          *(_OWORD *)(v503 + 160) = *(_OWORD *)(v504 + 160);
          *(_OWORD *)(v503 + 176) = v515;
          *(_OWORD *)(v503 + 128) = v513;
          *(_OWORD *)(v503 + 144) = v514;
          v516 = *(_OWORD *)(v504 + 192);
          v517 = *(_OWORD *)(v504 + 208);
          v518 = *(_OWORD *)(v504 + 224);
          *(_QWORD *)(v503 + 240) = *(_QWORD *)(v504 + 240);
          *(_OWORD *)(v503 + 208) = v517;
          *(_OWORD *)(v503 + 224) = v518;
          *(_OWORD *)(v503 + 192) = v516;
          v75 = a1;
          v450 = v872;
        }
        v741 = (_OWORD *)((v503 + 255) & 0xFFFFFFFFFFFFFFF8);
        v742 = (__int128 *)((v504 + 255) & 0xFFFFFFFFFFFFFFF8);
        v743 = *v742;
        *(_OWORD *)((char *)v741 + 9) = *(__int128 *)((char *)v742 + 9);
        *v741 = v743;
        v744 = (v503 + 287) & 0xFFFFFFFFFFFFFFF8;
        v745 = (v504 + 287) & 0xFFFFFFFFFFFFFFF8;
        v746 = *(_OWORD *)v745;
        *(_BYTE *)(v744 + 16) = *(_BYTE *)(v745 + 16);
        *(_OWORD *)v744 = v746;
        v747 = (_QWORD *)((v503 + 311) & 0xFFFFFFFFFFFFF8);
        v748 = (v504 + 311) & 0xFFFFFFFFFFFFF8;
        v749 = *(_QWORD *)v748;
        v748 += 15;
        *v747 = v749;
        v750 = (_QWORD *)(((unint64_t)v747 + 15) & 0xFFFFFFFFFFFFFFF8);
        v751 = *(_QWORD *)(v748 & 0xFFFFFFFFFFFFFFF8);
        v752 = *(_QWORD *)((v748 & 0xFFFFFFFFFFFFFFF8) + 8);
        sub_23AA7F2D4(v751, v752);
        *v750 = v751;
        v750[1] = v752;
        v76 = v940;
        v449 = v944;
        v122 = v928;
        if (!v854)
          goto LABEL_272;
LABEL_350:
        v753 = ((((v860
                 + ((((((((((v874 + v450 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 19) & 0xFFFFFFFFFFFFFFF8)
                   + 25) & 0xFFFFFFFFFFFFFFF8)
                 + 327) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        v754 = (_QWORD *)(((unint64_t)v122 + v753) & 0xFFFFFFFFFFFFFFF8);
        v755 = (_QWORD *)(((unint64_t)v449 + v753) & 0xFFFFFFFFFFFFFFF8);
        *v754 = *v755;
        v756 = *(void **)(((unint64_t)v755 + 15) & 0xFFFFFFFFFFFFF8);
        *(_QWORD *)(((unint64_t)v754 + 15) & 0xFFFFFFFFFFFFF8) = v756;
        *(_BYTE *)(v75 + v891) = 0;
        v757 = v756;
LABEL_375:
        v116 = 0;
        goto LABEL_376;
      case 1:
        v125 = ~v59;
        v909 = ~v893;
        v897 = ~v33;
        v822 = v70;
        v828 = *(_QWORD *)(v847 - 8);
        v814 = v37;
        v832 = v33 + 8;
        v879 = *(_QWORD *)(v32 + 64) + 7;
        v945 = ((((v38 + ((v33 + 8 + (v37 & 0xFFFFFFFFFFFFFFF8)) & ~v33)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        v126 = *(void (**)(uint64_t))(v883 + 16);
        v127 = v66;
        v126(a1);
        v885 = (void *)((v857 + a1) & v117);
        v889 = (const void *)((v857 + v127) & v117);
        if (v924 == v859)
        {
          v128 = (*(uint64_t (**)(void))(v883 + 48))();
          v129 = v902;
LABEL_287:
          if (v128)
          {
LABEL_288:
            v525 = v885;
            v526 = v889;
            memcpy(v885, v889, v839);
LABEL_289:
            v527 = v873;
            goto LABEL_354;
          }
          v153 = ((unint64_t)v889 + v869) & v129;
          v154 = (v870 + v153) & v125;
LABEL_291:
          ((void (*)(void *, const void *, uint64_t))v126)(v885, v889, v74);
          v528 = ((unint64_t)v885 + v869) & v129;
          ((void (*)(unint64_t, unint64_t, uint64_t))v126)(v528, v153, v74);
          v529 = (v870 + v528) & v125;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v863 + 16))(v529, v154, v864);
          v530 = (_QWORD *)((v871 + v529) & 0xFFFFFFFFFFFFFFF8);
          v531 = (_QWORD *)((v871 + v154) & 0xFFFFFFFFFFFFFFF8);
          *v530 = *v531;
          v532 = ((unint64_t)v530 + v848) & v822;
          v533 = ((unint64_t)v531 + v848) & v822;
          v534 = *(void (**)(unint64_t, unint64_t, uint64_t))(v849 + 16);
          swift_bridgeObjectRetain();
          v534(v532, v533, v850);
          v535 = (_QWORD *)((v840 + v532) & 0xFFFFFFFFFFFFF8);
          v536 = (_QWORD *)((v840 + v533) & 0xFFFFFFFFFFFFF8);
          *v535 = *v536;
          v537 = (_QWORD *)(((unint64_t)v535 + 15) & 0xFFFFFFFFFFFFFFF8);
          v538 = (_QWORD *)(((unint64_t)v536 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v537 = *v538;
          v537[1] = v538[1];
          v539 = (_QWORD *)(v930 + v529);
          *v539 = *(_QWORD *)(v930 + v154);
          v539[1] = *(_QWORD *)(v930 + v154 + 8);
          v540 = (v918 + v930 + v529) & v909;
          v541 = (v918 + v930 + v154) & v909;
          *(_BYTE *)v540 = *(_BYTE *)v541;
          v542 = v540 | 4;
          v543 = *(_DWORD *)(v541 | 4);
          *(_BYTE *)(v542 + 4) = *(_BYTE *)((v541 | 4) + 4);
          *(_DWORD *)v542 = v543;
          *(_WORD *)(v540 + 10) = *(_WORD *)(v541 + 0xA);
          v544 = (v853 + v540) & v900;
          v935 = v541;
          v545 = (v853 + v541) & v900;
          v546 = *(void (**)(size_t, size_t, uint64_t))(v867 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v546(v544, v545, v846);
          v547 = (v845 + v544) & v900;
          v548 = (v845 + v545) & v900;
          v546(v547, v548, v846);
          v549 = (_BYTE *)(v547 + v872);
          *v549 = *(_BYTE *)(v548 + v872);
          v549[1] = *(_BYTE *)(v548 + v872 + 1);
          v549[2] = *(_BYTE *)(v548 + v872 + 2);
          v549[3] = *(_BYTE *)(v548 + v872 + 3);
          v549[4] = *(_BYTE *)(v548 + v872 + 4);
          v550 = (v547 + v872 + 12) & 0xFFFFFFFFFFFFFFF8;
          v551 = (v548 + v872 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v550 = *(_QWORD *)v551;
          *(_QWORD *)(v550 + 8) = *(_QWORD *)(v551 + 8);
          *(_BYTE *)(v550 + 16) = *(_BYTE *)(v551 + 16);
          *(_BYTE *)(v550 + 17) = *(_BYTE *)(v551 + 17);
          *(_BYTE *)(v550 + 18) = *(_BYTE *)(v551 + 18);
          *(_BYTE *)(v550 + 19) = *(_BYTE *)(v551 + 19);
          v552 = (v550 + 27) & 0xFFFFFFFFFFFFFFF8;
          v553 = (v551 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v552 = *(_QWORD *)v553;
          *(_BYTE *)(v552 + 8) = *(_BYTE *)(v553 + 8);
          *(_BYTE *)(v552 + 9) = *(_BYTE *)(v553 + 9);
          *(_BYTE *)(v552 + 10) = *(_BYTE *)(v553 + 10);
          *(_BYTE *)(v552 + 11) = *(_BYTE *)(v553 + 11);
          *(_BYTE *)(v552 + 12) = *(_BYTE *)(v553 + 12);
          v554 = (_QWORD *)((v550 + 47) & 0xFFFFFFFFFFFFF8);
          v555 = (_QWORD *)((v551 + 47) & 0xFFFFFFFFFFFFF8);
          *v554 = *v555;
          v556 = ((unint64_t)v554 + 15) & 0xFFFFFFFFFFFFFFF8;
          v557 = ((unint64_t)v555 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v556 = *(_QWORD *)v557;
          *(_BYTE *)(v556 + 8) = *(_BYTE *)(v557 + 8);
          *(_BYTE *)(v556 + 9) = *(_BYTE *)(v557 + 9);
          v558 = (void *)((v844 + v556) & v900);
          v559 = (const void *)((v844 + v557) & v900);
          v560 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v867 + 48);
          swift_bridgeObjectRetain();
          if (v560(v559, 1, v846))
          {
            memcpy(v558, v559, v873);
          }
          else
          {
            v546((size_t)v558, (size_t)v559, v846);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v867 + 56))(v558, 0, 1, v846);
          }
          v561 = (_QWORD *)(((unint64_t)v558 + v843) & 0xFFFFFFFFFFFFFFF8);
          v562 = (_QWORD *)(((unint64_t)v559 + v843) & 0xFFFFFFFFFFFFFFF8);
          *v561 = *v562;
          v563 = ((unint64_t)v561 + 15) & 0xFFFFFFFFFFFFFFF8;
          v564 = ((unint64_t)v562 + 15) & 0xFFFFFFFFFFFFFFF8;
          v565 = *(_QWORD *)v564;
          *(_BYTE *)(v563 + 8) = *(_BYTE *)(v564 + 8);
          *(_QWORD *)v563 = v565;
          v566 = (_QWORD *)(((unint64_t)v561 + 31) & 0xFFFFFFFFFFFFF8);
          v567 = (_QWORD *)(((unint64_t)v562 + 31) & 0xFFFFFFFFFFFFF8);
          *v566 = *v567;
          v568 = ((unint64_t)v566 + 15) & 0xFFFFFFFFFFFFFFF8;
          v569 = (uint64_t *)(((unint64_t)v567 + 15) & 0xFFFFFFFFFFFFFFF8);
          v570 = v569[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v570 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v568 = *(_OWORD *)v569;
          }
          else
          {
            v571 = *v569;
            sub_23AAAE668(*v569, v570);
            *(_QWORD *)v568 = v571;
            *(_QWORD *)(v568 + 8) = v570;
          }
          v76 = v940;
          v572 = (v568 + 19) & 0xFFFFFFFFFFFFFFF8;
          v573 = ((unint64_t)v569 + 19) & 0xFFFFFFFFFFFFFFF8;
          v574 = *(_QWORD *)v573;
          *(_BYTE *)(v572 + 8) = *(_BYTE *)(v573 + 8);
          *(_QWORD *)v572 = v574;
          *(_BYTE *)(v572 + 9) = *(_BYTE *)(v573 + 9);
          v575 = (v572 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v576 = (v573 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v577 = *(_DWORD *)v576;
          *(_BYTE *)(v575 + 4) = *(_BYTE *)(v576 + 4);
          *(_DWORD *)v575 = v577;
          v578 = (_QWORD *)((v572 + 25) & 0xFFFFFFFFFFFFFFF8);
          v579 = (_QWORD *)((v573 + 25) & 0xFFFFFFFFFFFFFFF8);
          *v578 = *v579;
          v578[1] = v579[1];
          v580 = v917 + v540;
          v581 = (__int128 *)(v917 + v935);
          v582 = *(_QWORD *)(v917 + v935 + 16);
          if (v582 >= 0xFFFFFFFF)
            LODWORD(v582) = -1;
          v583 = v582 - 1;
          swift_bridgeObjectRetain();
          if (v583 < 0)
          {
            *(_QWORD *)v580 = *(_QWORD *)v581;
            *(_BYTE *)(v580 + 8) = *((_BYTE *)v581 + 8);
            *(_BYTE *)(v580 + 9) = *((_BYTE *)v581 + 9);
            v596 = (void *)*((_QWORD *)v581 + 2);
            v597 = v596;
            *(_QWORD *)(v580 + 16) = v596;
            v598 = (void *)*((_QWORD *)v581 + 3);
            v599 = v598;
            *(_QWORD *)(v580 + 24) = v598;
            *(_BYTE *)(v580 + 32) = *((_BYTE *)v581 + 32);
            *(_BYTE *)(v580 + 33) = *((_BYTE *)v581 + 33);
            *(_BYTE *)(v580 + 34) = *((_BYTE *)v581 + 34);
            *(_QWORD *)(v580 + 40) = *((_QWORD *)v581 + 5);
            *(_QWORD *)(v580 + 48) = *((_QWORD *)v581 + 6);
            *(_QWORD *)(v580 + 56) = *((_QWORD *)v581 + 7);
            *(_QWORD *)(v580 + 64) = *((_QWORD *)v581 + 8);
            *(_BYTE *)(v580 + 72) = *((_BYTE *)v581 + 72);
            *(_QWORD *)(v580 + 80) = *((_QWORD *)v581 + 10);
            *(_QWORD *)(v580 + 88) = *((_QWORD *)v581 + 11);
            v936 = (void *)*((_QWORD *)v581 + 12);
            *(_QWORD *)(v580 + 96) = v936;
            *(_BYTE *)(v580 + 104) = *((_BYTE *)v581 + 104);
            *(_BYTE *)(v580 + 105) = *((_BYTE *)v581 + 105);
            *(_QWORD *)(v580 + 112) = *((_QWORD *)v581 + 14);
            *(_QWORD *)(v580 + 120) = *((_QWORD *)v581 + 15);
            *(_QWORD *)(v580 + 128) = *((_QWORD *)v581 + 16);
            *(_QWORD *)(v580 + 136) = *((_QWORD *)v581 + 17);
            *(_QWORD *)(v580 + 144) = *((_QWORD *)v581 + 18);
            *(_QWORD *)(v580 + 152) = *((_QWORD *)v581 + 19);
            *(_QWORD *)(v580 + 160) = *((_QWORD *)v581 + 20);
            *(_QWORD *)(v580 + 168) = *((_QWORD *)v581 + 21);
            *(_BYTE *)(v580 + 176) = *((_BYTE *)v581 + 176);
            *(_QWORD *)(v580 + 184) = *((_QWORD *)v581 + 23);
            v923 = *((_QWORD *)v581 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v600 = v936;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v923)
            {
              *(_QWORD *)(v580 + 192) = v923;
              *(_QWORD *)(v580 + 200) = *((_QWORD *)v581 + 25);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v580 + 192) = v581[12];
            }
            v76 = v940;
            v527 = v872;
            *(_QWORD *)(v580 + 208) = *((_QWORD *)v581 + 26);
            *(_QWORD *)(v580 + 216) = *((_QWORD *)v581 + 27);
            *(_QWORD *)(v580 + 224) = *((_QWORD *)v581 + 28);
            *(_QWORD *)(v580 + 232) = *((_QWORD *)v581 + 29);
            *(_QWORD *)(v580 + 240) = *((_QWORD *)v581 + 30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v584 = *v581;
            v585 = v581[1];
            v586 = v581[3];
            *(_OWORD *)(v580 + 32) = v581[2];
            *(_OWORD *)(v580 + 48) = v586;
            *(_OWORD *)v580 = v584;
            *(_OWORD *)(v580 + 16) = v585;
            v587 = v581[4];
            v588 = v581[5];
            v589 = v581[7];
            *(_OWORD *)(v580 + 96) = v581[6];
            *(_OWORD *)(v580 + 112) = v589;
            *(_OWORD *)(v580 + 64) = v587;
            *(_OWORD *)(v580 + 80) = v588;
            v590 = v581[8];
            v591 = v581[9];
            v592 = v581[11];
            *(_OWORD *)(v580 + 160) = v581[10];
            *(_OWORD *)(v580 + 176) = v592;
            *(_OWORD *)(v580 + 128) = v590;
            *(_OWORD *)(v580 + 144) = v591;
            v593 = v581[12];
            v594 = v581[13];
            v595 = v581[14];
            *(_QWORD *)(v580 + 240) = *((_QWORD *)v581 + 30);
            *(_OWORD *)(v580 + 208) = v594;
            *(_OWORD *)(v580 + 224) = v595;
            *(_OWORD *)(v580 + 192) = v593;
            v527 = v872;
          }
          v758 = (_OWORD *)((v580 + 255) & 0xFFFFFFFFFFFFFFF8);
          v759 = (__int128 *)(((unint64_t)v581 + 255) & 0xFFFFFFFFFFFFFFF8);
          v760 = *v759;
          *(_OWORD *)((char *)v758 + 9) = *(__int128 *)((char *)v759 + 9);
          *v758 = v760;
          v761 = (v580 + 287) & 0xFFFFFFFFFFFFFFF8;
          v762 = ((unint64_t)v581 + 287) & 0xFFFFFFFFFFFFFFF8;
          v763 = *(_OWORD *)v762;
          *(_BYTE *)(v761 + 16) = *(_BYTE *)(v762 + 16);
          *(_OWORD *)v761 = v763;
          v764 = (_QWORD *)((v580 + 311) & 0xFFFFFFFFFFFFF8);
          v765 = ((unint64_t)v581 + 311) & 0xFFFFFFFFFFFFF8;
          v766 = *(_QWORD *)v765;
          v765 += 15;
          *v764 = v766;
          v767 = (_QWORD *)(((unint64_t)v764 + 15) & 0xFFFFFFFFFFFFFFF8);
          v768 = *(_QWORD *)(v765 & 0xFFFFFFFFFFFFFFF8);
          v769 = *(_QWORD *)((v765 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_23AA7F2D4(v768, v769);
          *v767 = v768;
          v767[1] = v769;
          v75 = a1;
          v526 = v889;
          v525 = v885;
          if (!v854)
            goto LABEL_289;
LABEL_354:
          v770 = ((((v860
                   + ((((((((((v874 + v527 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 19) & 0xFFFFFFFFFFFFFFF8)
                     + 25) & 0xFFFFFFFFFFFFFFF8)
                   + 327) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 16;
          v771 = (void *)(((unint64_t)v525 + v912 + v770) & v71);
          v772 = (const void *)(((unint64_t)v526 + v912 + v770) & v71);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v881 + 48))(v772, 1, v886))
          {
            memcpy(v771, v772, v835);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v881 + 16))(v771, v772, v886);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v881 + 56))(v771, 0, 1, v886);
          }
          v773 = v814;
          v774 = (char *)(((unint64_t)v771 + v842) & v905);
          v775 = (char *)(((unint64_t)v772 + v842) & v905);
          if (v851 == v865)
          {
            v776 = (*(uint64_t (**)(char *))(v861 + 48))(v775);
          }
          else
          {
            v777 = (uint64_t *)((unint64_t)&v775[v814] & 0xFFFFFFFFFFFFFFF8);
            if (v836 <= 0x7FFFFFFE)
            {
              v778 = *v777;
              if ((unint64_t)*v777 >= 0xFFFFFFFF)
                LODWORD(v778) = -1;
              v779 = v945;
              if ((v778 + 1) >= 2)
                goto LABEL_366;
              goto LABEL_368;
            }
            v776 = (*(uint64_t (**)(unint64_t))(v828 + 48))(((unint64_t)v777 + v832) & v897);
          }
          v779 = v945;
          v773 = v814;
          if (v776)
          {
LABEL_366:
            v780 = v779;
            memcpy(v774, v775, v779);
            v227 = v891;
LABEL_369:
            *(_QWORD *)&v774[v780] = *(_QWORD *)&v775[v780];
            v790 = (_QWORD *)((unint64_t)&v774[v780 + 15] & 0xFFFFFFFFFFFFF8);
            v791 = (_QWORD *)((unint64_t)&v775[v780 + 15] & 0xFFFFFFFFFFFFFFF8);
            *v790 = *v791;
            v238 = *(void **)(((unint64_t)v791 + 15) & 0xFFFFFFFFFFFFF8);
            *(_QWORD *)(((unint64_t)v790 + 15) & 0xFFFFFFFFFFFFF8) = v238;
            v239 = 1;
LABEL_370:
            *(_BYTE *)(v75 + v227) = v239;
            v792 = v238;
            goto LABEL_375;
          }
          v777 = (uint64_t *)((unint64_t)&v775[v814] & 0xFFFFFFFFFFFFFFF8);
LABEL_368:
          v780 = v779;
          v781 = v773;
          (*(void (**)(char *, char *, uint64_t))(v861 + 16))(v774, v775, v862);
          v782 = (_QWORD *)((unint64_t)&v774[v781] & 0xFFFFFFFFFFFFFFF8);
          *v782 = *v777;
          v783 = ((unint64_t)v782 + v832) & v897;
          v784 = ((unint64_t)v777 + v832) & v897;
          v785 = *(void (**)(unint64_t, unint64_t, uint64_t))(v828 + 16);
          swift_bridgeObjectRetain();
          v785(v783, v784, v847);
          v227 = v891;
          v786 = (_QWORD *)((v879 + v783) & 0xFFFFFFFFFFFFF8);
          v787 = (_QWORD *)((v879 + v784) & 0xFFFFFFFFFFFFF8);
          *v786 = *v787;
          v788 = (_QWORD *)(((unint64_t)v786 + 15) & 0xFFFFFFFFFFFFFFF8);
          v789 = (_QWORD *)(((unint64_t)v787 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v788 = *v789;
          v788[1] = v789[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_369;
        }
        v129 = v902;
        v153 = (v869 + ((v857 + v127) & v117)) & v902;
        v154 = (v870 + v153) & v125;
        if (v866 == v859)
        {
          if (v852 == v866)
          {
            v128 = (*(uint64_t (**)(unint64_t))(v863 + 48))((v870 + v153) & v125);
            goto LABEL_287;
          }
          v290 = (unint64_t *)((v871 + v154) & 0xFFFFFFFFFFFFFFF8);
          if (v837 > 0x7FFFFFFE)
          {
            v128 = (*(uint64_t (**)(unint64_t))(v849 + 48))(((unint64_t)v290 + v848) & v822);
            goto LABEL_287;
          }
          v291 = *v290;
        }
        else
        {
          v209 = v930 + v154;
          if ((v818 & 0x80000000) == 0)
          {
            v210 = *(_QWORD *)(v209 + 8);
            if (v210 >= 0xFFFFFFFF)
              LODWORD(v210) = -1;
            v128 = v210 + 1;
            goto LABEL_287;
          }
          v299 = (v853 + ((v918 + v209) & v909)) & v900;
          if (v854 > 0x7FFFFFFD)
          {
            v128 = (*(uint64_t (**)(size_t))(v867 + 48))(v299);
            goto LABEL_287;
          }
          v291 = *(_QWORD *)(((v811 + ((v845 + v299) & v900)) & 0xFFFFFFFFFFFFF8) + 8);
        }
        if (v291 >= 0xFFFFFFFF)
          LODWORD(v291) = -1;
        if ((v291 + 1) >= 2)
          goto LABEL_288;
        goto LABEL_291;
      case 2:
        v898 = ~v33;
        v130 = v37;
        v833 = v33 + 8;
        v131 = *(_QWORD *)(v847 - 8);
        v880 = *(_QWORD *)(v32 + 64) + 7;
        v132 = ((((v38 + ((v33 + 8 + (v37 & 0xFFFFFFFFFFFFFFF8)) & ~v33)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        v133 = v66;
        (*(void (**)(uint64_t))(v883 + 16))(a1);
        v134 = (void *)((v824 + a1) & v71);
        v135 = (const void *)((v824 + v133) & v71);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v881 + 48))(v135, 1, v886))
        {
          memcpy(v134, v135, v835);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v881 + 16))(v134, v135, v886);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v881 + 56))(v134, 0, 1, v886);
        }
        v161 = (char *)(((unint64_t)v134 + v842) & v905);
        v162 = (_BYTE *)(((unint64_t)v135 + v842) & v905);
        if (v851 == v865)
        {
          v163 = (*(uint64_t (**)(_BYTE *))(v861 + 48))(v162);
          v164 = v132;
          v165 = v130;
          if (!v163)
            goto LABEL_193;
        }
        else
        {
          v166 = (uint64_t *)((unint64_t)&v162[v130] & 0xFFFFFFFFFFFFFFF8);
          if (v836 > 0x7FFFFFFE)
          {
            v225 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v131 + 48))(((unint64_t)v166 + v833) & v898, v815, v847);
            v165 = v130;
            v164 = v132;
            if (!v225)
            {
LABEL_193:
              v166 = (uint64_t *)((unint64_t)&v162[v165] & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_194;
            }
          }
          else
          {
            v165 = v130;
            v167 = *v166;
            if ((unint64_t)*v166 >= 0xFFFFFFFF)
              LODWORD(v167) = -1;
            v164 = v132;
            if ((v167 + 1) < 2)
            {
LABEL_194:
              v226 = v164;
              v228 = v165;
              (*(void (**)(char *, _BYTE *, uint64_t))(v861 + 16))(v161, v162, v862);
              v229 = (_QWORD *)((unint64_t)&v161[v228] & 0xFFFFFFFFFFFFFFF8);
              *v229 = *v166;
              v230 = ((unint64_t)v229 + v833) & v898;
              v231 = ((unint64_t)v166 + v833) & v898;
              v232 = *(void (**)(unint64_t, unint64_t, uint64_t))(v131 + 16);
              swift_bridgeObjectRetain();
              v232(v230, v231, v847);
              v227 = v891;
              v233 = (_QWORD *)((v880 + v230) & 0xFFFFFFFFFFFFF8);
              v234 = (_QWORD *)((v880 + v231) & 0xFFFFFFFFFFFFF8);
              *v233 = *v234;
              v235 = (_QWORD *)(((unint64_t)v233 + 15) & 0xFFFFFFFFFFFFFFF8);
              v236 = (_QWORD *)(((unint64_t)v234 + 15) & 0xFFFFFFFFFFFFFFF8);
              *v235 = *v236;
              v235[1] = v236[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
LABEL_195:
              v237 = &v161[v226];
              *v237 = v162[v226];
              v238 = *(void **)&v162[v226 + 8];
              *((_QWORD *)v237 + 1) = v238;
              v239 = 2;
              goto LABEL_370;
            }
          }
        }
        v226 = v164;
        memcpy(v161, v162, v164);
        v227 = v891;
        goto LABEL_195;
      case 3:
        v136 = ~v59;
        v910 = ~v893;
        v823 = v70;
        v137 = *(void (**)(uint64_t))(v883 + 16);
        v138 = v66;
        v137(a1);
        v139 = (void *)((v857 + a1) & v117);
        v946 = (const void *)((v857 + v138) & v117);
        if (v924 == v859)
        {
          v140 = (*(uint64_t (**)(void))(v883 + 48))();
          v141 = v902;
LABEL_304:
          if (v140)
          {
LABEL_305:
            v601 = v946;
            memcpy(v139, v946, v839);
            goto LABEL_306;
          }
          v155 = ((unint64_t)v946 + v869) & v141;
          v156 = (v870 + v155) & v136;
LABEL_308:
          ((void (*)(void *, const void *, uint64_t))v137)(v139, v946, AssociatedTypeWitness);
          v929 = v139;
          v603 = ((unint64_t)v139 + v869) & v141;
          ((void (*)(unint64_t, unint64_t, uint64_t))v137)(v603, v155, AssociatedTypeWitness);
          v604 = (v870 + v603) & v136;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v863 + 16))(v604, v156, v864);
          v605 = (_QWORD *)((v871 + v604) & 0xFFFFFFFFFFFFFFF8);
          v606 = (_QWORD *)((v871 + v156) & 0xFFFFFFFFFFFFFFF8);
          *v605 = *v606;
          v607 = ((unint64_t)v605 + v848) & v823;
          v608 = ((unint64_t)v606 + v848) & v823;
          v609 = *(void (**)(unint64_t, unint64_t, uint64_t))(v849 + 16);
          swift_bridgeObjectRetain();
          v609(v607, v608, v850);
          v610 = (_QWORD *)((v840 + v607) & 0xFFFFFFFFFFFFF8);
          v611 = (_QWORD *)((v840 + v608) & 0xFFFFFFFFFFFFF8);
          *v610 = *v611;
          v612 = (_QWORD *)(((unint64_t)v610 + 15) & 0xFFFFFFFFFFFFFFF8);
          v613 = (_QWORD *)(((unint64_t)v611 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v612 = *v613;
          v612[1] = v613[1];
          v614 = (_QWORD *)(v930 + v604);
          *v614 = *(_QWORD *)(v930 + v156);
          v614[1] = *(_QWORD *)(v930 + v156 + 8);
          v615 = (v918 + v930 + v604) & v910;
          v616 = (v918 + v930 + v156) & v910;
          *(_BYTE *)v615 = *(_BYTE *)v616;
          v617 = v615 | 4;
          v618 = *(_DWORD *)(v616 | 4);
          *(_BYTE *)(v617 + 4) = *(_BYTE *)((v616 | 4) + 4);
          *(_DWORD *)v617 = v618;
          *(_WORD *)(v615 + 10) = *(_WORD *)(v616 + 0xA);
          v937 = v615;
          v619 = (v853 + v615) & v900;
          v620 = (v853 + v616) & v900;
          v621 = *(void (**)(size_t, size_t, uint64_t))(v867 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v621(v619, v620, v846);
          v622 = (v845 + v619) & v900;
          v623 = (v845 + v620) & v900;
          v621(v622, v623, v846);
          v624 = (_BYTE *)(v622 + v872);
          *v624 = *(_BYTE *)(v623 + v872);
          v624[1] = *(_BYTE *)(v623 + v872 + 1);
          v624[2] = *(_BYTE *)(v623 + v872 + 2);
          v624[3] = *(_BYTE *)(v623 + v872 + 3);
          v624[4] = *(_BYTE *)(v623 + v872 + 4);
          v625 = (v622 + v872 + 12) & 0xFFFFFFFFFFFFFFF8;
          v626 = (v623 + v872 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v625 = *(_QWORD *)v626;
          *(_QWORD *)(v625 + 8) = *(_QWORD *)(v626 + 8);
          *(_BYTE *)(v625 + 16) = *(_BYTE *)(v626 + 16);
          *(_BYTE *)(v625 + 17) = *(_BYTE *)(v626 + 17);
          *(_BYTE *)(v625 + 18) = *(_BYTE *)(v626 + 18);
          *(_BYTE *)(v625 + 19) = *(_BYTE *)(v626 + 19);
          v627 = (v625 + 27) & 0xFFFFFFFFFFFFFFF8;
          v628 = (v626 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v627 = *(_QWORD *)v628;
          *(_BYTE *)(v627 + 8) = *(_BYTE *)(v628 + 8);
          *(_BYTE *)(v627 + 9) = *(_BYTE *)(v628 + 9);
          *(_BYTE *)(v627 + 10) = *(_BYTE *)(v628 + 10);
          *(_BYTE *)(v627 + 11) = *(_BYTE *)(v628 + 11);
          *(_BYTE *)(v627 + 12) = *(_BYTE *)(v628 + 12);
          v629 = (_QWORD *)((v625 + 47) & 0xFFFFFFFFFFFFF8);
          v630 = (_QWORD *)((v626 + 47) & 0xFFFFFFFFFFFFF8);
          *v629 = *v630;
          v631 = ((unint64_t)v629 + 15) & 0xFFFFFFFFFFFFFFF8;
          v632 = ((unint64_t)v630 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v631 = *(_QWORD *)v632;
          *(_BYTE *)(v631 + 8) = *(_BYTE *)(v632 + 8);
          *(_BYTE *)(v631 + 9) = *(_BYTE *)(v632 + 9);
          v633 = (void *)((v844 + v631) & v900);
          v634 = (const void *)((v844 + v632) & v900);
          v635 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v867 + 48);
          swift_bridgeObjectRetain();
          if (v635(v634, 1, v846))
          {
            memcpy(v633, v634, v873);
          }
          else
          {
            v621((size_t)v633, (size_t)v634, v846);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v867 + 56))(v633, 0, 1, v846);
          }
          v636 = (_QWORD *)(((unint64_t)v633 + v843) & 0xFFFFFFFFFFFFFFF8);
          v637 = (_QWORD *)(((unint64_t)v634 + v843) & 0xFFFFFFFFFFFFFFF8);
          *v636 = *v637;
          v638 = ((unint64_t)v636 + 15) & 0xFFFFFFFFFFFFFFF8;
          v639 = ((unint64_t)v637 + 15) & 0xFFFFFFFFFFFFFFF8;
          v640 = *(_QWORD *)v639;
          *(_BYTE *)(v638 + 8) = *(_BYTE *)(v639 + 8);
          *(_QWORD *)v638 = v640;
          v641 = (_QWORD *)(((unint64_t)v636 + 31) & 0xFFFFFFFFFFFFF8);
          v642 = (_QWORD *)(((unint64_t)v637 + 31) & 0xFFFFFFFFFFFFF8);
          *v641 = *v642;
          v643 = ((unint64_t)v641 + 15) & 0xFFFFFFFFFFFFFFF8;
          v644 = (uint64_t *)(((unint64_t)v642 + 15) & 0xFFFFFFFFFFFFFFF8);
          v645 = v644[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v645 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v643 = *(_OWORD *)v644;
          }
          else
          {
            v646 = *v644;
            sub_23AAAE668(*v644, v645);
            *(_QWORD *)v643 = v646;
            *(_QWORD *)(v643 + 8) = v645;
          }
          v647 = (v643 + 19) & 0xFFFFFFFFFFFFFFF8;
          v648 = ((unint64_t)v644 + 19) & 0xFFFFFFFFFFFFFFF8;
          v649 = *(_QWORD *)v648;
          *(_BYTE *)(v647 + 8) = *(_BYTE *)(v648 + 8);
          *(_QWORD *)v647 = v649;
          *(_BYTE *)(v647 + 9) = *(_BYTE *)(v648 + 9);
          v650 = (v647 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v651 = (v648 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v652 = *(_DWORD *)v651;
          *(_BYTE *)(v650 + 4) = *(_BYTE *)(v651 + 4);
          *(_DWORD *)v650 = v652;
          v653 = (_QWORD *)((v647 + 25) & 0xFFFFFFFFFFFFFFF8);
          v654 = (_QWORD *)((v648 + 25) & 0xFFFFFFFFFFFFFFF8);
          *v653 = *v654;
          v653[1] = v654[1];
          v655 = v917 + v937;
          v656 = v917 + v616;
          v657 = *(_QWORD *)(v917 + v616 + 16);
          if (v657 >= 0xFFFFFFFF)
            LODWORD(v657) = -1;
          v658 = v657 - 1;
          swift_bridgeObjectRetain();
          if (v658 < 0)
          {
            *(_QWORD *)v655 = *(_QWORD *)v656;
            *(_BYTE *)(v655 + 8) = *(_BYTE *)(v656 + 8);
            *(_BYTE *)(v655 + 9) = *(_BYTE *)(v656 + 9);
            v671 = *(void **)(v656 + 16);
            v672 = v671;
            *(_QWORD *)(v655 + 16) = v671;
            v673 = *(void **)(v656 + 24);
            v674 = v673;
            *(_QWORD *)(v655 + 24) = v673;
            *(_BYTE *)(v655 + 32) = *(_BYTE *)(v656 + 32);
            *(_BYTE *)(v655 + 33) = *(_BYTE *)(v656 + 33);
            *(_BYTE *)(v655 + 34) = *(_BYTE *)(v656 + 34);
            *(_QWORD *)(v655 + 40) = *(_QWORD *)(v656 + 40);
            *(_QWORD *)(v655 + 48) = *(_QWORD *)(v656 + 48);
            *(_QWORD *)(v655 + 56) = *(_QWORD *)(v656 + 56);
            *(_QWORD *)(v655 + 64) = *(_QWORD *)(v656 + 64);
            *(_BYTE *)(v655 + 72) = *(_BYTE *)(v656 + 72);
            *(_QWORD *)(v655 + 80) = *(_QWORD *)(v656 + 80);
            *(_QWORD *)(v655 + 88) = *(_QWORD *)(v656 + 88);
            v938 = *(void **)(v656 + 96);
            *(_QWORD *)(v655 + 96) = v938;
            *(_BYTE *)(v655 + 104) = *(_BYTE *)(v656 + 104);
            *(_BYTE *)(v655 + 105) = *(_BYTE *)(v656 + 105);
            *(_QWORD *)(v655 + 112) = *(_QWORD *)(v656 + 112);
            *(_QWORD *)(v655 + 120) = *(_QWORD *)(v656 + 120);
            *(_QWORD *)(v655 + 128) = *(_QWORD *)(v656 + 128);
            *(_QWORD *)(v655 + 136) = *(_QWORD *)(v656 + 136);
            *(_QWORD *)(v655 + 144) = *(_QWORD *)(v656 + 144);
            *(_QWORD *)(v655 + 152) = *(_QWORD *)(v656 + 152);
            *(_QWORD *)(v655 + 160) = *(_QWORD *)(v656 + 160);
            *(_QWORD *)(v655 + 168) = *(_QWORD *)(v656 + 168);
            *(_BYTE *)(v655 + 176) = *(_BYTE *)(v656 + 176);
            *(_QWORD *)(v655 + 184) = *(_QWORD *)(v656 + 184);
            v675 = *(_QWORD *)(v656 + 192);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v676 = v938;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v675)
            {
              *(_QWORD *)(v655 + 192) = v675;
              *(_QWORD *)(v655 + 200) = *(_QWORD *)(v656 + 200);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v655 + 192) = *(_OWORD *)(v656 + 192);
            }
            v75 = a1;
            v602 = v872;
            *(_QWORD *)(v655 + 208) = *(_QWORD *)(v656 + 208);
            *(_QWORD *)(v655 + 216) = *(_QWORD *)(v656 + 216);
            *(_QWORD *)(v655 + 224) = *(_QWORD *)(v656 + 224);
            *(_QWORD *)(v655 + 232) = *(_QWORD *)(v656 + 232);
            *(_QWORD *)(v655 + 240) = *(_QWORD *)(v656 + 240);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v659 = *(_OWORD *)v656;
            v660 = *(_OWORD *)(v656 + 16);
            v661 = *(_OWORD *)(v656 + 48);
            *(_OWORD *)(v655 + 32) = *(_OWORD *)(v656 + 32);
            *(_OWORD *)(v655 + 48) = v661;
            *(_OWORD *)v655 = v659;
            *(_OWORD *)(v655 + 16) = v660;
            v662 = *(_OWORD *)(v656 + 64);
            v663 = *(_OWORD *)(v656 + 80);
            v664 = *(_OWORD *)(v656 + 112);
            *(_OWORD *)(v655 + 96) = *(_OWORD *)(v656 + 96);
            *(_OWORD *)(v655 + 112) = v664;
            *(_OWORD *)(v655 + 64) = v662;
            *(_OWORD *)(v655 + 80) = v663;
            v665 = *(_OWORD *)(v656 + 128);
            v666 = *(_OWORD *)(v656 + 144);
            v667 = *(_OWORD *)(v656 + 176);
            *(_OWORD *)(v655 + 160) = *(_OWORD *)(v656 + 160);
            *(_OWORD *)(v655 + 176) = v667;
            *(_OWORD *)(v655 + 128) = v665;
            *(_OWORD *)(v655 + 144) = v666;
            v668 = *(_OWORD *)(v656 + 192);
            v669 = *(_OWORD *)(v656 + 208);
            v670 = *(_OWORD *)(v656 + 224);
            *(_QWORD *)(v655 + 240) = *(_QWORD *)(v656 + 240);
            *(_OWORD *)(v655 + 208) = v669;
            *(_OWORD *)(v655 + 224) = v670;
            *(_OWORD *)(v655 + 192) = v668;
            v75 = a1;
            v602 = v872;
          }
          v793 = (_OWORD *)((v655 + 255) & 0xFFFFFFFFFFFFFFF8);
          v794 = (__int128 *)((v656 + 255) & 0xFFFFFFFFFFFFFFF8);
          v795 = *v794;
          *(_OWORD *)((char *)v793 + 9) = *(__int128 *)((char *)v794 + 9);
          *v793 = v795;
          v796 = (v655 + 287) & 0xFFFFFFFFFFFFFFF8;
          v797 = (v656 + 287) & 0xFFFFFFFFFFFFFFF8;
          v798 = *(_OWORD *)v797;
          *(_BYTE *)(v796 + 16) = *(_BYTE *)(v797 + 16);
          *(_OWORD *)v796 = v798;
          v799 = (_QWORD *)((v655 + 311) & 0xFFFFFFFFFFFFF8);
          v800 = (v656 + 311) & 0xFFFFFFFFFFFFF8;
          v801 = *(_QWORD *)v800;
          v800 += 15;
          *v799 = v801;
          v802 = (_QWORD *)(((unint64_t)v799 + 15) & 0xFFFFFFFFFFFFFFF8);
          v803 = *(_QWORD *)(v800 & 0xFFFFFFFFFFFFFFF8);
          v804 = *(_QWORD *)((v800 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_23AA7F2D4(v803, v804);
          *v802 = v803;
          v802[1] = v804;
          v76 = v940;
          v601 = v946;
          v139 = v929;
          if (v854)
          {
LABEL_374:
            v805 = ((((v860
                     + ((((((((((v874 + v602 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 19) & 0xFFFFFFFFFFFFFFF8)
                       + 25) & 0xFFFFFFFFFFFFFFF8)
                     + 327) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 16;
            v806 = (_QWORD *)(((unint64_t)v139 + v805) & 0xFFFFFFFFFFFFFFF8);
            v807 = (_QWORD *)(((unint64_t)v601 + v805) & 0xFFFFFFFFFFFFFFF8);
            *v806 = *v807;
            v806[1] = v807[1];
            *(_QWORD *)(((unint64_t)v806 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v807 + 23) & 0xFFFFFFFFFFFFF8);
            *(_BYTE *)(v75 + v891) = 3;
            swift_bridgeObjectRetain();
            goto LABEL_375;
          }
LABEL_306:
          v602 = v873;
          goto LABEL_374;
        }
        v141 = v902;
        v155 = (v869 + ((v857 + v138) & v117)) & v902;
        v156 = (v870 + v155) & v136;
        if (v866 == v859)
        {
          if (v852 == v866)
          {
            v140 = (*(uint64_t (**)(unint64_t))(v863 + 48))((v870 + v155) & v136);
            goto LABEL_304;
          }
          v292 = (unint64_t *)((v871 + v156) & 0xFFFFFFFFFFFFFFF8);
          if (v837 > 0x7FFFFFFE)
          {
            v140 = (*(uint64_t (**)(unint64_t))(v849 + 48))(((unint64_t)v292 + v848) & v823);
            goto LABEL_304;
          }
          v293 = *v292;
        }
        else
        {
          v211 = v930 + v156;
          if ((v818 & 0x80000000) == 0)
          {
            v212 = *(_QWORD *)(v211 + 8);
            if (v212 >= 0xFFFFFFFF)
              LODWORD(v212) = -1;
            v140 = v212 + 1;
            goto LABEL_304;
          }
          v300 = (v853 + ((v918 + v211) & v910)) & v900;
          if (v854 > 0x7FFFFFFD)
          {
            v140 = (*(uint64_t (**)(size_t))(v867 + 48))(v300);
            goto LABEL_304;
          }
          v293 = *(_QWORD *)(((v811 + ((v845 + v300) & v900)) & 0xFFFFFFFFFFFFF8) + 8);
        }
        if (v293 >= 0xFFFFFFFF)
          LODWORD(v293) = -1;
        if ((v293 + 1) >= 2)
          goto LABEL_305;
        goto LABEL_308;
      case 4:
        (*(void (**)(uint64_t))(v883 + 16))(a1);
        v116 = 0;
        *(_BYTE *)(a1 + v891) = 4;
        goto LABEL_376;
      case 5:
        (*(void (**)(uint64_t))(v883 + 16))(a1);
        v116 = 0;
        *(_BYTE *)(a1 + v891) = 5;
        goto LABEL_376;
      case 6:
        v142 = v66;
        (*(void (**)(uint64_t))(v883 + 16))(a1);
        v143 = (void *)((v819 + a1) & v118);
        v144 = (const void *)((v819 + v142) & v118);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48))(v144, 1, v906))
        {
          memcpy(v143, v144, v812);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v41 + 16))(v143, v144, v906);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v143, 0, 1, v906);
        }
        v116 = 0;
        *(_BYTE *)(a1 + v891) = 6;
        goto LABEL_376;
      case 7:
        (*(void (**)(uint64_t))(v883 + 16))(a1);
        v116 = 0;
        *(_BYTE *)(a1 + v891) = 7;
        goto LABEL_376;
      default:
        if (v47 <= 3)
          v73 = v47;
        else
          v73 = 4;
        __asm { BR              X13 }
        return result;
    }
  }
  v77 = ~v59;
  v907 = ~v893;
  v78 = ~v48;
  v79 = ~v63;
  switch(*(_BYTE *)(v66 + v65))
  {
    case 0:
      v894 = ~v33;
      v80 = v37;
      v81 = v33 + 8;
      v825 = *(_QWORD *)(v847 - 8);
      v876 = *(_QWORD *)(v32 + 64) + 7;
      v942 = ((((v38 + ((v33 + 8 + (v37 & 0xFFFFFFFFFFFFFFF8)) & ~v33)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16;
      v913 = v50;
      v925 = v65;
      v82 = *(void (**)(uint64_t))(v881 + 16);
      v83 = v66;
      v82(a1);
      v903 = (void *)((v855 + a1) & v78);
      v931 = (const void *)((v855 + v83) & v78);
      if (v858 == v856)
      {
        v84 = *(uint64_t (**)(void))(v881 + 48);
LABEL_85:
        v85 = v84();
        v75 = a1;
        goto LABEL_86;
      }
      v145 = (v868 + ((v855 + v83) & v78)) & v71;
      v146 = (v888 + v145) & v905;
      if (v865 == v856)
      {
        if (v851 == v865)
        {
          v84 = *(uint64_t (**)(void))(v861 + 48);
          goto LABEL_85;
        }
        v281 = (unint64_t *)((v80 + v146) & 0xFFFFFFFFFFFFFFF8);
        v75 = a1;
        if (v836 <= 0x7FFFFFFE)
        {
          v282 = *v281;
          goto LABEL_378;
        }
        v85 = (*(uint64_t (**)(unint64_t))(v825 + 48))(((unint64_t)v281 + v81) & v894);
      }
      else
      {
        v201 = v942 + v146;
        if ((v817 & 0x80000000) != 0)
        {
          v294 = (v853 + ((v918 + v201) & v907)) & v900;
          v75 = a1;
          if (v854 <= 0x7FFFFFFD)
          {
            v282 = *(_QWORD *)(((v811 + ((v845 + v294) & v900)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_378:
            if (v282 >= 0xFFFFFFFF)
              LODWORD(v282) = -1;
            v76 = v940;
            if ((v282 + 1) >= 2)
              goto LABEL_87;
            goto LABEL_160;
          }
          v85 = (*(uint64_t (**)(uint64_t))(v867 + 48))(v294);
        }
        else
        {
          v202 = *(_QWORD *)(v201 + 8);
          if (v202 >= 0xFFFFFFFF)
            LODWORD(v202) = -1;
          v85 = v202 + 1;
          v75 = a1;
        }
      }
LABEL_86:
      v76 = v940;
      if (v85)
      {
LABEL_87:
        v86 = v903;
        v87 = v931;
        memcpy(v903, v931, __n);
LABEL_88:
        v88 = v873;
        goto LABEL_323;
      }
      v145 = ((unint64_t)v931 + v868) & v71;
      v146 = (v888 + v145) & v905;
LABEL_160:
      ((void (*)(void *, const void *, uint64_t))v82)(v903, v931, v886);
      v168 = ((unint64_t)v903 + v868) & v71;
      ((void (*)(unint64_t, unint64_t, uint64_t))v82)(v168, v145, v886);
      v169 = (v888 + v168) & v905;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v861 + 16))(v169, v146, v862);
      v170 = (_QWORD *)((v80 + v169) & 0xFFFFFFFFFFFFFFF8);
      v171 = (_QWORD *)((v80 + v146) & 0xFFFFFFFFFFFFFFF8);
      *v170 = *v171;
      v172 = ((unint64_t)v170 + v81) & v894;
      v173 = ((unint64_t)v171 + v81) & v894;
      v174 = *(void (**)(unint64_t, unint64_t, uint64_t))(v825 + 16);
      swift_bridgeObjectRetain();
      v174(v172, v173, v847);
      v175 = (_QWORD *)((v876 + v172) & 0xFFFFFFFFFFFFF8);
      v176 = (_QWORD *)((v876 + v173) & 0xFFFFFFFFFFFFF8);
      *v175 = *v176;
      v177 = (_QWORD *)(((unint64_t)v175 + 15) & 0xFFFFFFFFFFFFFFF8);
      v178 = (_QWORD *)(((unint64_t)v176 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v177 = *v178;
      v177[1] = v178[1];
      v179 = (_QWORD *)(v942 + v169);
      *v179 = *(_QWORD *)(v942 + v146);
      v179[1] = *(_QWORD *)(v942 + v146 + 8);
      v180 = (v918 + v942 + v169) & v907;
      v181 = (v918 + v942 + v146) & v907;
      *(_BYTE *)v180 = *(_BYTE *)v181;
      v182 = v180 | 4;
      v183 = *(_DWORD *)(v181 | 4);
      *(_BYTE *)(v182 + 4) = *(_BYTE *)((v181 | 4) + 4);
      *(_DWORD *)v182 = v183;
      *(_WORD *)(v180 + 10) = *(_WORD *)(v181 + 0xA);
      v947 = v180;
      v184 = (v853 + v180) & v900;
      v185 = (v853 + v181) & v900;
      v186 = *(void (**)(unint64_t, unint64_t, uint64_t))(v867 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v186(v184, v185, v846);
      v187 = (v845 + v184) & v900;
      v188 = (v845 + v185) & v900;
      v186(v187, v188, v846);
      v189 = (_BYTE *)(v187 + v872);
      *v189 = *(_BYTE *)(v188 + v872);
      v189[1] = *(_BYTE *)(v188 + v872 + 1);
      v189[2] = *(_BYTE *)(v188 + v872 + 2);
      v189[3] = *(_BYTE *)(v188 + v872 + 3);
      v189[4] = *(_BYTE *)(v188 + v872 + 4);
      v190 = (v187 + v872 + 12) & 0xFFFFFFFFFFFFFFF8;
      v191 = (v188 + v872 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v190 = *(_QWORD *)v191;
      *(_QWORD *)(v190 + 8) = *(_QWORD *)(v191 + 8);
      *(_BYTE *)(v190 + 16) = *(_BYTE *)(v191 + 16);
      *(_BYTE *)(v190 + 17) = *(_BYTE *)(v191 + 17);
      *(_BYTE *)(v190 + 18) = *(_BYTE *)(v191 + 18);
      *(_BYTE *)(v190 + 19) = *(_BYTE *)(v191 + 19);
      v192 = (v190 + 27) & 0xFFFFFFFFFFFFFFF8;
      v193 = (v191 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v192 = *(_QWORD *)v193;
      *(_BYTE *)(v192 + 8) = *(_BYTE *)(v193 + 8);
      *(_BYTE *)(v192 + 9) = *(_BYTE *)(v193 + 9);
      *(_BYTE *)(v192 + 10) = *(_BYTE *)(v193 + 10);
      *(_BYTE *)(v192 + 11) = *(_BYTE *)(v193 + 11);
      *(_BYTE *)(v192 + 12) = *(_BYTE *)(v193 + 12);
      v194 = (_QWORD *)((v190 + 47) & 0xFFFFFFFFFFFFF8);
      v195 = (_QWORD *)((v191 + 47) & 0xFFFFFFFFFFFFF8);
      *v194 = *v195;
      v196 = ((unint64_t)v194 + 15) & 0xFFFFFFFFFFFFFFF8;
      v197 = ((unint64_t)v195 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v196 = *(_QWORD *)v197;
      *(_BYTE *)(v196 + 8) = *(_BYTE *)(v197 + 8);
      *(_BYTE *)(v196 + 9) = *(_BYTE *)(v197 + 9);
      v198 = (void *)((v844 + v196) & v900);
      v199 = (const void *)((v844 + v197) & v900);
      v200 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v867 + 48);
      swift_bridgeObjectRetain();
      if (v200(v199, 1, v846))
      {
        memcpy(v198, v199, v873);
      }
      else
      {
        v186((unint64_t)v198, (unint64_t)v199, v846);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v867 + 56))(v198, 0, 1, v846);
      }
      v240 = (_QWORD *)(((unint64_t)v198 + v843) & 0xFFFFFFFFFFFFFFF8);
      v241 = (_QWORD *)(((unint64_t)v199 + v843) & 0xFFFFFFFFFFFFFFF8);
      *v240 = *v241;
      v242 = ((unint64_t)v240 + 15) & 0xFFFFFFFFFFFFFFF8;
      v243 = ((unint64_t)v241 + 15) & 0xFFFFFFFFFFFFFFF8;
      v244 = *(_QWORD *)v243;
      *(_BYTE *)(v242 + 8) = *(_BYTE *)(v243 + 8);
      *(_QWORD *)v242 = v244;
      v245 = (_QWORD *)(((unint64_t)v240 + 31) & 0xFFFFFFFFFFFFF8);
      v246 = (_QWORD *)(((unint64_t)v241 + 31) & 0xFFFFFFFFFFFFF8);
      *v245 = *v246;
      v247 = ((unint64_t)v245 + 15) & 0xFFFFFFFFFFFFFFF8;
      v248 = (uint64_t *)(((unint64_t)v246 + 15) & 0xFFFFFFFFFFFFFFF8);
      v249 = v248[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v249 & 0x3000000000000000) != 0)
      {
        *(_OWORD *)v247 = *(_OWORD *)v248;
      }
      else
      {
        v250 = *v248;
        sub_23AAAE668(*v248, v249);
        *(_QWORD *)v247 = v250;
        *(_QWORD *)(v247 + 8) = v249;
      }
      v251 = (v247 + 19) & 0xFFFFFFFFFFFFFFF8;
      v252 = ((unint64_t)v248 + 19) & 0xFFFFFFFFFFFFFFF8;
      v253 = *(_QWORD *)v252;
      *(_BYTE *)(v251 + 8) = *(_BYTE *)(v252 + 8);
      *(_QWORD *)v251 = v253;
      *(_BYTE *)(v251 + 9) = *(_BYTE *)(v252 + 9);
      v254 = (v251 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v255 = (v252 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v256 = *(_DWORD *)v255;
      *(_BYTE *)(v254 + 4) = *(_BYTE *)(v255 + 4);
      *(_DWORD *)v254 = v256;
      v257 = (_QWORD *)((v251 + 25) & 0xFFFFFFFFFFFFFFF8);
      v258 = (_QWORD *)((v252 + 25) & 0xFFFFFFFFFFFFFFF8);
      *v257 = *v258;
      v257[1] = v258[1];
      v259 = v947 + v917;
      v260 = v181 + v917;
      v261 = *(_QWORD *)(v181 + v917 + 16);
      if (v261 >= 0xFFFFFFFF)
        LODWORD(v261) = -1;
      v262 = v261 - 1;
      swift_bridgeObjectRetain();
      if (v262 < 0)
      {
        *(_QWORD *)v259 = *(_QWORD *)v260;
        *(_BYTE *)(v259 + 8) = *(_BYTE *)(v260 + 8);
        *(_BYTE *)(v259 + 9) = *(_BYTE *)(v260 + 9);
        v275 = *(void **)(v260 + 16);
        v276 = v275;
        *(_QWORD *)(v259 + 16) = v275;
        v277 = *(void **)(v260 + 24);
        v278 = v277;
        *(_QWORD *)(v259 + 24) = v277;
        *(_BYTE *)(v259 + 32) = *(_BYTE *)(v260 + 32);
        *(_BYTE *)(v259 + 33) = *(_BYTE *)(v260 + 33);
        *(_BYTE *)(v259 + 34) = *(_BYTE *)(v260 + 34);
        *(_QWORD *)(v259 + 40) = *(_QWORD *)(v260 + 40);
        *(_QWORD *)(v259 + 48) = *(_QWORD *)(v260 + 48);
        *(_QWORD *)(v259 + 56) = *(_QWORD *)(v260 + 56);
        *(_QWORD *)(v259 + 64) = *(_QWORD *)(v260 + 64);
        *(_BYTE *)(v259 + 72) = *(_BYTE *)(v260 + 72);
        *(_QWORD *)(v259 + 80) = *(_QWORD *)(v260 + 80);
        *(_QWORD *)(v259 + 88) = *(_QWORD *)(v260 + 88);
        v948 = *(void **)(v260 + 96);
        *(_QWORD *)(v259 + 96) = v948;
        *(_BYTE *)(v259 + 104) = *(_BYTE *)(v260 + 104);
        *(_BYTE *)(v259 + 105) = *(_BYTE *)(v260 + 105);
        *(_QWORD *)(v259 + 112) = *(_QWORD *)(v260 + 112);
        *(_QWORD *)(v259 + 120) = *(_QWORD *)(v260 + 120);
        *(_QWORD *)(v259 + 128) = *(_QWORD *)(v260 + 128);
        *(_QWORD *)(v259 + 136) = *(_QWORD *)(v260 + 136);
        *(_QWORD *)(v259 + 144) = *(_QWORD *)(v260 + 144);
        *(_QWORD *)(v259 + 152) = *(_QWORD *)(v260 + 152);
        *(_QWORD *)(v259 + 160) = *(_QWORD *)(v260 + 160);
        *(_QWORD *)(v259 + 168) = *(_QWORD *)(v260 + 168);
        *(_BYTE *)(v259 + 176) = *(_BYTE *)(v260 + 176);
        *(_QWORD *)(v259 + 184) = *(_QWORD *)(v260 + 184);
        v279 = *(_QWORD *)(v260 + 192);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v280 = v948;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v279)
        {
          *(_QWORD *)(v259 + 192) = v279;
          *(_QWORD *)(v259 + 200) = *(_QWORD *)(v260 + 200);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v259 + 192) = *(_OWORD *)(v260 + 192);
        }
        v75 = a1;
        v76 = v940;
        v86 = v903;
        *(_QWORD *)(v259 + 208) = *(_QWORD *)(v260 + 208);
        *(_QWORD *)(v259 + 216) = *(_QWORD *)(v260 + 216);
        *(_QWORD *)(v259 + 224) = *(_QWORD *)(v260 + 224);
        *(_QWORD *)(v259 + 232) = *(_QWORD *)(v260 + 232);
        *(_QWORD *)(v259 + 240) = *(_QWORD *)(v260 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v263 = *(_OWORD *)v260;
        v264 = *(_OWORD *)(v260 + 16);
        v265 = *(_OWORD *)(v260 + 48);
        *(_OWORD *)(v259 + 32) = *(_OWORD *)(v260 + 32);
        *(_OWORD *)(v259 + 48) = v265;
        *(_OWORD *)v259 = v263;
        *(_OWORD *)(v259 + 16) = v264;
        v266 = *(_OWORD *)(v260 + 64);
        v267 = *(_OWORD *)(v260 + 80);
        v268 = *(_OWORD *)(v260 + 112);
        *(_OWORD *)(v259 + 96) = *(_OWORD *)(v260 + 96);
        *(_OWORD *)(v259 + 112) = v268;
        *(_OWORD *)(v259 + 64) = v266;
        *(_OWORD *)(v259 + 80) = v267;
        v269 = *(_OWORD *)(v260 + 128);
        v270 = *(_OWORD *)(v260 + 144);
        v271 = *(_OWORD *)(v260 + 176);
        *(_OWORD *)(v259 + 160) = *(_OWORD *)(v260 + 160);
        *(_OWORD *)(v259 + 176) = v271;
        *(_OWORD *)(v259 + 128) = v269;
        *(_OWORD *)(v259 + 144) = v270;
        v272 = *(_OWORD *)(v260 + 192);
        v273 = *(_OWORD *)(v260 + 208);
        v274 = *(_OWORD *)(v260 + 224);
        *(_QWORD *)(v259 + 240) = *(_QWORD *)(v260 + 240);
        *(_OWORD *)(v259 + 208) = v273;
        *(_OWORD *)(v259 + 224) = v274;
        *(_OWORD *)(v259 + 192) = v272;
        v76 = v940;
        v86 = v903;
      }
      v677 = (_OWORD *)((v259 + 255) & 0xFFFFFFFFFFFFFFF8);
      v678 = (__int128 *)((v260 + 255) & 0xFFFFFFFFFFFFFFF8);
      v679 = *v678;
      *(_OWORD *)((char *)v677 + 9) = *(__int128 *)((char *)v678 + 9);
      *v677 = v679;
      v680 = (v259 + 287) & 0xFFFFFFFFFFFFFFF8;
      v681 = (v260 + 287) & 0xFFFFFFFFFFFFFFF8;
      v682 = *(_OWORD *)v681;
      *(_BYTE *)(v680 + 16) = *(_BYTE *)(v681 + 16);
      *(_OWORD *)v680 = v682;
      v683 = (_QWORD *)((v259 + 311) & 0xFFFFFFFFFFFFF8);
      v684 = (v260 + 311) & 0xFFFFFFFFFFFFF8;
      v685 = *(_QWORD *)v684;
      v684 += 15;
      *v683 = v685;
      v686 = (_QWORD *)(((unint64_t)v683 + 15) & 0xFFFFFFFFFFFFFFF8);
      v687 = *(_QWORD *)(v684 & 0xFFFFFFFFFFFFFFF8);
      v688 = *(_QWORD *)((v684 & 0xFFFFFFFFFFFFFFF8) + 8);
      sub_23AA7F2D4(v687, v688);
      *v686 = v687;
      v686[1] = v688;
      v88 = v872;
      v87 = v931;
      if (!v854)
        goto LABEL_88;
LABEL_323:
      v689 = ((((v913
               + ((((((((((v874 + v88 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 19) & 0xFFFFFFFFFFFFFFF8)
                 + 25) & 0xFFFFFFFFFFFFFFF8)
               + 327) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16;
      v690 = (_QWORD *)(((unint64_t)v86 + v689) & 0xFFFFFFFFFFFFFFF8);
      v691 = (_QWORD *)(((unint64_t)v87 + v689) & 0xFFFFFFFFFFFFFFF8);
      *v690 = *v691;
      v692 = *(void **)(((unint64_t)v691 + 15) & 0xFFFFFFFFFFFFF8);
      *(_QWORD *)(((unint64_t)v690 + 15) & 0xFFFFFFFFFFFFF8) = v692;
      *(_BYTE *)(v75 + v925) = 0;
      v693 = v692;
      v116 = 1;
LABEL_376:
      *(_BYTE *)(v75 + v76) = v116;
      return v75;
    case 1:
      v895 = ~v33;
      v820 = v70;
      v826 = *(_QWORD *)(v847 - 8);
      v813 = v37;
      v830 = v33 + 8;
      v877 = *(_QWORD *)(v32 + 64) + 7;
      v89 = ((((v38 + ((v33 + 8 + (v37 & 0xFFFFFFFFFFFFFFF8)) & ~v33)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 16;
      v914 = v50;
      v926 = v65;
      v90 = *(void (**)(uint64_t))(v881 + 16);
      v75 = a1;
      v91 = v66;
      v90(a1);
      v892 = (void *)((v855 + a1) & v78);
      v92 = (const void *)((v855 + v91) & v78);
      if (v858 == v856)
      {
        v93 = (*(uint64_t (**)(const void *))(v881 + 48))(v92);
        v94 = v89;
        v95 = v92;
        v96 = (void *)((v855 + a1) & v78);
        v76 = v940;
LABEL_238:
        if (v93)
        {
LABEL_239:
          memcpy(v96, v95, __n);
LABEL_240:
          v301 = v873;
          goto LABEL_327;
        }
        v147 = ((unint64_t)v95 + v868) & v71;
        v148 = (v888 + v147) & v905;
LABEL_242:
        v882 = v95;
        v302 = v94;
        ((void (*)(void *, const void *, uint64_t))v90)(v96, v95, v886);
        ((void (*)(unint64_t, unint64_t, uint64_t))v90)(((unint64_t)v96 + v868) & v71, v147, v886);
        v303 = (v888 + (((unint64_t)v96 + v868) & v71)) & v905;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v861 + 16))(v303, v148, v862);
        v304 = (_QWORD *)((v813 + v303) & 0xFFFFFFFFFFFFFFF8);
        v305 = (_QWORD *)((v813 + v148) & 0xFFFFFFFFFFFFFFF8);
        *v304 = *v305;
        v306 = ((unint64_t)v304 + v830) & v895;
        v307 = ((unint64_t)v305 + v830) & v895;
        v308 = *(void (**)(unint64_t, unint64_t, uint64_t))(v826 + 16);
        swift_bridgeObjectRetain();
        v308(v306, v307, v847);
        v309 = (_QWORD *)((v877 + v306) & 0xFFFFFFFFFFFFF8);
        v310 = (_QWORD *)((v877 + v307) & 0xFFFFFFFFFFFFF8);
        *v309 = *v310;
        v311 = (_QWORD *)(((unint64_t)v309 + 15) & 0xFFFFFFFFFFFFFFF8);
        v312 = (_QWORD *)(((unint64_t)v310 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v311 = *v312;
        v311[1] = v312[1];
        v313 = (_QWORD *)(v302 + v303);
        *v313 = *(_QWORD *)(v302 + v148);
        v313[1] = *(_QWORD *)(v302 + v148 + 8);
        v314 = (v918 + v302 + v303) & v907;
        v315 = (v918 + v302 + v148) & v907;
        *(_BYTE *)v314 = *(_BYTE *)v315;
        v316 = v314 | 4;
        v317 = *(_DWORD *)(v315 | 4);
        *(_BYTE *)(v316 + 4) = *(_BYTE *)((v315 | 4) + 4);
        *(_DWORD *)v316 = v317;
        *(_WORD *)(v314 + 10) = *(_WORD *)(v315 + 0xA);
        v919 = v314;
        v318 = (v853 + v314) & v900;
        v319 = (v853 + v315) & v900;
        v320 = *(void (**)(unint64_t, uint64_t, uint64_t))(v867 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v320(v318, v319, v846);
        v321 = (v845 + v318) & v900;
        v322 = (v845 + v319) & v900;
        v320(v321, v322, v846);
        v323 = (_BYTE *)(v321 + v872);
        *v323 = *(_BYTE *)(v322 + v872);
        v323[1] = *(_BYTE *)(v322 + v872 + 1);
        v323[2] = *(_BYTE *)(v322 + v872 + 2);
        v323[3] = *(_BYTE *)(v322 + v872 + 3);
        v323[4] = *(_BYTE *)(v322 + v872 + 4);
        v324 = (v321 + v872 + 12) & 0xFFFFFFFFFFFFFFF8;
        v325 = (v322 + v872 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v324 = *(_QWORD *)v325;
        *(_QWORD *)(v324 + 8) = *(_QWORD *)(v325 + 8);
        *(_BYTE *)(v324 + 16) = *(_BYTE *)(v325 + 16);
        *(_BYTE *)(v324 + 17) = *(_BYTE *)(v325 + 17);
        *(_BYTE *)(v324 + 18) = *(_BYTE *)(v325 + 18);
        *(_BYTE *)(v324 + 19) = *(_BYTE *)(v325 + 19);
        v326 = (v324 + 27) & 0xFFFFFFFFFFFFFFF8;
        v327 = (v325 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v326 = *(_QWORD *)v327;
        *(_BYTE *)(v326 + 8) = *(_BYTE *)(v327 + 8);
        *(_BYTE *)(v326 + 9) = *(_BYTE *)(v327 + 9);
        *(_BYTE *)(v326 + 10) = *(_BYTE *)(v327 + 10);
        *(_BYTE *)(v326 + 11) = *(_BYTE *)(v327 + 11);
        *(_BYTE *)(v326 + 12) = *(_BYTE *)(v327 + 12);
        v328 = (_QWORD *)((v324 + 47) & 0xFFFFFFFFFFFFF8);
        v329 = (_QWORD *)((v325 + 47) & 0xFFFFFFFFFFFFF8);
        *v328 = *v329;
        v330 = ((unint64_t)v328 + 15) & 0xFFFFFFFFFFFFFFF8;
        v331 = ((unint64_t)v329 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v330 = *(_QWORD *)v331;
        *(_BYTE *)(v330 + 8) = *(_BYTE *)(v331 + 8);
        *(_BYTE *)(v330 + 9) = *(_BYTE *)(v331 + 9);
        v332 = (void *)((v844 + v330) & v900);
        v333 = (const void *)((v844 + v331) & v900);
        v334 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v867 + 48);
        swift_bridgeObjectRetain();
        if (v334(v333, 1, v846))
        {
          memcpy(v332, v333, v873);
        }
        else
        {
          v320((unint64_t)v332, (uint64_t)v333, v846);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v867 + 56))(v332, 0, 1, v846);
        }
        v335 = (_QWORD *)(((unint64_t)v332 + v843) & 0xFFFFFFFFFFFFFFF8);
        v336 = (_QWORD *)(((unint64_t)v333 + v843) & 0xFFFFFFFFFFFFFFF8);
        *v335 = *v336;
        v337 = ((unint64_t)v335 + 15) & 0xFFFFFFFFFFFFFFF8;
        v338 = ((unint64_t)v336 + 15) & 0xFFFFFFFFFFFFFFF8;
        v339 = *(_QWORD *)v338;
        *(_BYTE *)(v337 + 8) = *(_BYTE *)(v338 + 8);
        *(_QWORD *)v337 = v339;
        v340 = (_QWORD *)(((unint64_t)v335 + 31) & 0xFFFFFFFFFFFFF8);
        v341 = (_QWORD *)(((unint64_t)v336 + 31) & 0xFFFFFFFFFFFFF8);
        *v340 = *v341;
        v342 = ((unint64_t)v340 + 15) & 0xFFFFFFFFFFFFFFF8;
        v343 = (uint64_t *)(((unint64_t)v341 + 15) & 0xFFFFFFFFFFFFFFF8);
        v344 = v343[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((v344 & 0x3000000000000000) != 0)
        {
          *(_OWORD *)v342 = *(_OWORD *)v343;
        }
        else
        {
          v345 = *v343;
          sub_23AAAE668(*v343, v344);
          *(_QWORD *)v342 = v345;
          *(_QWORD *)(v342 + 8) = v344;
        }
        v76 = v940;
        v346 = (v342 + 19) & 0xFFFFFFFFFFFFFFF8;
        v347 = ((unint64_t)v343 + 19) & 0xFFFFFFFFFFFFFFF8;
        v348 = *(_QWORD *)v347;
        *(_BYTE *)(v346 + 8) = *(_BYTE *)(v347 + 8);
        *(_QWORD *)v346 = v348;
        *(_BYTE *)(v346 + 9) = *(_BYTE *)(v347 + 9);
        v349 = (v346 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v350 = (v347 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v351 = *(_DWORD *)v350;
        *(_BYTE *)(v349 + 4) = *(_BYTE *)(v350 + 4);
        *(_DWORD *)v349 = v351;
        v352 = (_QWORD *)((v346 + 25) & 0xFFFFFFFFFFFFFFF8);
        v353 = (_QWORD *)((v347 + 25) & 0xFFFFFFFFFFFFFFF8);
        *v352 = *v353;
        v352[1] = v353[1];
        v354 = v919 + v917;
        v355 = (__int128 *)(v315 + v917);
        v356 = *(_QWORD *)(v315 + v917 + 16);
        if (v356 >= 0xFFFFFFFF)
          LODWORD(v356) = -1;
        v357 = v356 - 1;
        swift_bridgeObjectRetain();
        if (v357 < 0)
        {
          *(_QWORD *)v354 = *(_QWORD *)v355;
          *(_BYTE *)(v354 + 8) = *((_BYTE *)v355 + 8);
          *(_BYTE *)(v354 + 9) = *((_BYTE *)v355 + 9);
          v370 = (void *)*((_QWORD *)v355 + 2);
          v371 = v370;
          *(_QWORD *)(v354 + 16) = v370;
          v372 = (void *)*((_QWORD *)v355 + 3);
          v373 = v372;
          *(_QWORD *)(v354 + 24) = v372;
          *(_BYTE *)(v354 + 32) = *((_BYTE *)v355 + 32);
          *(_BYTE *)(v354 + 33) = *((_BYTE *)v355 + 33);
          *(_BYTE *)(v354 + 34) = *((_BYTE *)v355 + 34);
          *(_QWORD *)(v354 + 40) = *((_QWORD *)v355 + 5);
          *(_QWORD *)(v354 + 48) = *((_QWORD *)v355 + 6);
          *(_QWORD *)(v354 + 56) = *((_QWORD *)v355 + 7);
          *(_QWORD *)(v354 + 64) = *((_QWORD *)v355 + 8);
          *(_BYTE *)(v354 + 72) = *((_BYTE *)v355 + 72);
          *(_QWORD *)(v354 + 80) = *((_QWORD *)v355 + 10);
          *(_QWORD *)(v354 + 88) = *((_QWORD *)v355 + 11);
          v920 = (void *)*((_QWORD *)v355 + 12);
          *(_QWORD *)(v354 + 96) = v920;
          *(_BYTE *)(v354 + 104) = *((_BYTE *)v355 + 104);
          *(_BYTE *)(v354 + 105) = *((_BYTE *)v355 + 105);
          *(_QWORD *)(v354 + 112) = *((_QWORD *)v355 + 14);
          *(_QWORD *)(v354 + 120) = *((_QWORD *)v355 + 15);
          *(_QWORD *)(v354 + 128) = *((_QWORD *)v355 + 16);
          *(_QWORD *)(v354 + 136) = *((_QWORD *)v355 + 17);
          *(_QWORD *)(v354 + 144) = *((_QWORD *)v355 + 18);
          *(_QWORD *)(v354 + 152) = *((_QWORD *)v355 + 19);
          *(_QWORD *)(v354 + 160) = *((_QWORD *)v355 + 20);
          *(_QWORD *)(v354 + 168) = *((_QWORD *)v355 + 21);
          *(_BYTE *)(v354 + 176) = *((_BYTE *)v355 + 176);
          *(_QWORD *)(v354 + 184) = *((_QWORD *)v355 + 23);
          v911 = *((_QWORD *)v355 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v374 = v920;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v911)
          {
            *(_QWORD *)(v354 + 192) = v911;
            *(_QWORD *)(v354 + 200) = *((_QWORD *)v355 + 25);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(v354 + 192) = v355[12];
          }
          v76 = v940;
          v301 = v872;
          v96 = v892;
          *(_QWORD *)(v354 + 208) = *((_QWORD *)v355 + 26);
          *(_QWORD *)(v354 + 216) = *((_QWORD *)v355 + 27);
          *(_QWORD *)(v354 + 224) = *((_QWORD *)v355 + 28);
          *(_QWORD *)(v354 + 232) = *((_QWORD *)v355 + 29);
          *(_QWORD *)(v354 + 240) = *((_QWORD *)v355 + 30);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v358 = *v355;
          v359 = v355[1];
          v360 = v355[3];
          *(_OWORD *)(v354 + 32) = v355[2];
          *(_OWORD *)(v354 + 48) = v360;
          *(_OWORD *)v354 = v358;
          *(_OWORD *)(v354 + 16) = v359;
          v361 = v355[4];
          v362 = v355[5];
          v363 = v355[7];
          *(_OWORD *)(v354 + 96) = v355[6];
          *(_OWORD *)(v354 + 112) = v363;
          *(_OWORD *)(v354 + 64) = v361;
          *(_OWORD *)(v354 + 80) = v362;
          v364 = v355[8];
          v365 = v355[9];
          v366 = v355[11];
          *(_OWORD *)(v354 + 160) = v355[10];
          *(_OWORD *)(v354 + 176) = v366;
          *(_OWORD *)(v354 + 128) = v364;
          *(_OWORD *)(v354 + 144) = v365;
          v367 = v355[12];
          v368 = v355[13];
          v369 = v355[14];
          *(_QWORD *)(v354 + 240) = *((_QWORD *)v355 + 30);
          *(_OWORD *)(v354 + 208) = v368;
          *(_OWORD *)(v354 + 224) = v369;
          *(_OWORD *)(v354 + 192) = v367;
          v301 = v872;
          v96 = v892;
        }
        v694 = (_OWORD *)((v354 + 255) & 0xFFFFFFFFFFFFFFF8);
        v695 = (__int128 *)(((unint64_t)v355 + 255) & 0xFFFFFFFFFFFFFFF8);
        v696 = *v695;
        *(_OWORD *)((char *)v694 + 9) = *(__int128 *)((char *)v695 + 9);
        *v694 = v696;
        v697 = (v354 + 287) & 0xFFFFFFFFFFFFFFF8;
        v698 = ((unint64_t)v355 + 287) & 0xFFFFFFFFFFFFFFF8;
        v699 = *(_OWORD *)v698;
        *(_BYTE *)(v697 + 16) = *(_BYTE *)(v698 + 16);
        *(_OWORD *)v697 = v699;
        v700 = (_QWORD *)((v354 + 311) & 0xFFFFFFFFFFFFF8);
        v701 = ((unint64_t)v355 + 311) & 0xFFFFFFFFFFFFF8;
        v702 = *(_QWORD *)v701;
        v701 += 15;
        *v700 = v702;
        v703 = (_QWORD *)(((unint64_t)v700 + 15) & 0xFFFFFFFFFFFFFFF8);
        v704 = *(_QWORD *)(v701 & 0xFFFFFFFFFFFFFFF8);
        v705 = *(_QWORD *)((v701 & 0xFFFFFFFFFFFFFFF8) + 8);
        sub_23AA7F2D4(v704, v705);
        *v703 = v704;
        v703[1] = v705;
        v75 = a1;
        v95 = v882;
        if (!v854)
          goto LABEL_240;
LABEL_327:
        v706 = ((((v914
                 + ((((((((((v874 + v301 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 19) & 0xFFFFFFFFFFFFFFF8)
                   + 25) & 0xFFFFFFFFFFFFFFF8)
                 + 327) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        v707 = (void *)(((unint64_t)v96 + v941 + v706) & v902);
        v708 = (const void *)(((unint64_t)v95 + v941 + v706) & v902);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v883 + 48))(v708, 1, AssociatedTypeWitness))
        {
          memcpy(v707, v708, v834);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v883 + 16))(v707, v708, AssociatedTypeWitness);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v883 + 56))(v707, 0, 1, AssociatedTypeWitness);
        }
        v709 = (char *)(((unint64_t)v707 + v841) & v77);
        v710 = (char *)(((unint64_t)v708 + v841) & v77);
        if (v852 == v866)
        {
          if (!(*(unsigned int (**)(char *))(v863 + 48))(v710))
            goto LABEL_340;
        }
        else
        {
          v711 = (_QWORD *)((unint64_t)&v710[v871] & 0xFFFFFFFFFFFFFFF8);
          if (v837 > 0x7FFFFFFE)
          {
            if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v849 + 48))(((unint64_t)v711 + v848) & v820, v816, v850))
            {
LABEL_340:
              v711 = (_QWORD *)((unint64_t)&v710[v871] & 0xFFFFFFFFFFFFFFF8);
LABEL_341:
              (*(void (**)(char *, char *, uint64_t))(v863 + 16))(v709, v710, v864);
              v714 = (_QWORD *)((unint64_t)&v709[v871] & 0xFFFFFFFFFFFFFFF8);
              *v714 = *v711;
              v715 = ((unint64_t)v714 + v848) & v820;
              v716 = ((unint64_t)v711 + v848) & v820;
              v717 = *(void (**)(unint64_t, unint64_t, uint64_t))(v849 + 16);
              swift_bridgeObjectRetain();
              v717(v715, v716, v850);
              v718 = (_QWORD *)((v840 + v715) & 0xFFFFFFFFFFFFF8);
              v719 = (_QWORD *)((v840 + v716) & 0xFFFFFFFFFFFFF8);
              *v718 = *v719;
              v720 = (_QWORD *)(((unint64_t)v718 + 15) & 0xFFFFFFFFFFFFFFF8);
              v721 = (_QWORD *)(((unint64_t)v719 + 15) & 0xFFFFFFFFFFFFFFF8);
              *v720 = *v721;
              v720[1] = v721[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v713 = v930;
              goto LABEL_342;
            }
          }
          else
          {
            v712 = *v711;
            if (*v711 >= 0xFFFFFFFFuLL)
              LODWORD(v712) = -1;
            if ((v712 + 1) < 2)
              goto LABEL_341;
          }
        }
        v713 = v930;
        memcpy(v709, v710, v930);
LABEL_342:
        *(_QWORD *)&v709[v713] = *(_QWORD *)&v710[v713];
        v722 = (_QWORD *)((unint64_t)&v709[v713 + 15] & 0xFFFFFFFFFFFFF8);
        v723 = (_QWORD *)((unint64_t)&v710[v713 + 15] & 0xFFFFFFFFFFFFFFF8);
        *v722 = *v723;
        v724 = *(void **)(((unint64_t)v723 + 15) & 0xFFFFFFFFFFFFF8);
        *(_QWORD *)(((unint64_t)v722 + 15) & 0xFFFFFFFFFFFFF8) = v724;
        v116 = 1;
        *(_BYTE *)(v75 + v926) = 1;
        v725 = v724;
        goto LABEL_376;
      }
      v147 = ((unint64_t)v92 + v868) & v71;
      v148 = (v888 + v147) & v905;
      v95 = v92;
      if (v865 == v856)
      {
        v76 = v940;
        if (v851 == v865)
        {
          v93 = (*(uint64_t (**)(unint64_t))(v861 + 48))((v888 + v147) & v905);
          v94 = v89;
          v96 = v892;
          goto LABEL_238;
        }
        v283 = (unint64_t *)((v813 + v148) & 0xFFFFFFFFFFFFFFF8);
        v96 = v892;
        if (v836 <= 0x7FFFFFFE)
        {
          v284 = *v283;
          if (v284 >= 0xFFFFFFFF)
            LODWORD(v284) = -1;
          v94 = v89;
          if ((v284 + 1) >= 2)
            goto LABEL_239;
          goto LABEL_242;
        }
        v93 = (*(uint64_t (**)(unint64_t))(v826 + 48))(((unint64_t)v283 + v830) & v895);
      }
      else
      {
        v94 = v89;
        v203 = v89 + v148;
        v76 = v940;
        if ((v817 & 0x80000000) == 0)
        {
          v204 = *(_QWORD *)(v203 + 8);
          if (v204 >= 0xFFFFFFFF)
            LODWORD(v204) = -1;
          v93 = v204 + 1;
          v96 = v892;
          goto LABEL_238;
        }
        v295 = (v853 + ((v918 + v203) & v907)) & v900;
        v96 = v892;
        if (v854 <= 0x7FFFFFFD)
        {
          v809 = *(_QWORD *)(((v811 + ((v845 + v295) & v900)) & 0xFFFFFFFFFFFFF8) + 8);
          if (v809 >= 0xFFFFFFFF)
            LODWORD(v809) = -1;
          if ((v809 + 1) >= 2)
            goto LABEL_239;
          goto LABEL_242;
        }
        v93 = (*(uint64_t (**)(uint64_t))(v867 + 48))(v295);
      }
      v94 = v89;
      goto LABEL_238;
    case 2:
      v97 = v70;
      v98 = v65;
      v75 = a1;
      v99 = v66;
      (*(void (**)(uint64_t))(v881 + 16))(a1);
      v100 = (void *)((v58 + a1) & v902);
      v101 = (const void *)((v58 + v99) & v902);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v883 + 48))(v101, 1, AssociatedTypeWitness))
      {
        memcpy(v100, v101, v834);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v883 + 16))(v100, v101, AssociatedTypeWitness);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v883 + 56))(v100, 0, 1, AssociatedTypeWitness);
      }
      v76 = v940;
      v157 = (char *)(((unint64_t)v100 + v841) & v77);
      v158 = (_BYTE *)(((unint64_t)v101 + v841) & v77);
      if (v852 == v866)
      {
        if (!(*(unsigned int (**)(_BYTE *))(v863 + 48))(v158))
          goto LABEL_188;
      }
      else
      {
        v159 = (uint64_t *)((unint64_t)&v158[v871] & 0xFFFFFFFFFFFFFFF8);
        if (v837 > 0x7FFFFFFE)
        {
          if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v849 + 48))(((unint64_t)v159 + v848) & v97, v816, v850))
          {
LABEL_188:
            v159 = (uint64_t *)((unint64_t)&v158[v871] & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_189;
          }
        }
        else
        {
          v160 = *v159;
          if ((unint64_t)*v159 >= 0xFFFFFFFF)
            LODWORD(v160) = -1;
          if ((v160 + 1) < 2)
          {
LABEL_189:
            (*(void (**)(char *, _BYTE *, uint64_t))(v863 + 16))(v157, v158, v864);
            v214 = (_QWORD *)((unint64_t)&v157[v871] & 0xFFFFFFFFFFFFFFF8);
            *v214 = *v159;
            v215 = ((unint64_t)v214 + v848) & v97;
            v216 = ((unint64_t)v159 + v848) & v97;
            v217 = *(void (**)(unint64_t, unint64_t, uint64_t))(v849 + 16);
            swift_bridgeObjectRetain();
            v217(v215, v216, v850);
            v218 = (_QWORD *)((v840 + v215) & 0xFFFFFFFFFFFFF8);
            v219 = (_QWORD *)((v840 + v216) & 0xFFFFFFFFFFFFF8);
            *v218 = *v219;
            v220 = (_QWORD *)(((unint64_t)v218 + 15) & 0xFFFFFFFFFFFFFFF8);
            v221 = (_QWORD *)(((unint64_t)v219 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v220 = *v221;
            v220[1] = v221[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v213 = v930;
LABEL_190:
            v222 = &v157[v213];
            *v222 = v158[v213];
            v223 = *(void **)&v158[v213 + 8];
            *((_QWORD *)v222 + 1) = v223;
            *(_BYTE *)(a1 + v98) = 2;
            v224 = v223;
            v116 = 1;
            goto LABEL_376;
          }
        }
      }
      v213 = v930;
      memcpy(v157, v158, v930);
      goto LABEL_190;
    case 3:
      v896 = ~v33;
      v102 = v37;
      v827 = *(_QWORD *)(v847 - 8);
      v831 = v33 + 8;
      v878 = *(_QWORD *)(v32 + 64) + 7;
      v103 = ((((v38 + ((v33 + 8 + (v37 & 0xFFFFFFFFFFFFFFF8)) & ~v33)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16;
      v915 = v50;
      v927 = v65;
      v104 = *(void (**)(uint64_t))(v881 + 16);
      v105 = v66;
      v104(a1);
      v932 = (void *)((v855 + a1) & v78);
      v943 = (const void *)((v855 + v105) & v78);
      if (v858 == v856)
      {
        v106 = *(uint64_t (**)(void))(v881 + 48);
LABEL_95:
        v107 = v106();
        v108 = v103;
        goto LABEL_96;
      }
      v149 = (v868 + ((v855 + v105) & v78)) & v71;
      v150 = (v888 + v149) & v905;
      if (v865 == v856)
      {
        if (v851 == v865)
        {
          v106 = *(uint64_t (**)(void))(v861 + 48);
          goto LABEL_95;
        }
        v285 = (unint64_t *)((v102 + v150) & 0xFFFFFFFFFFFFFFF8);
        v75 = a1;
        if (v836 <= 0x7FFFFFFE)
        {
          v286 = *v285;
          if (v286 >= 0xFFFFFFFF)
            LODWORD(v286) = -1;
          v287 = (v286 + 1) >= 2;
          v108 = v103;
          goto LABEL_389;
        }
        v297 = (*(uint64_t (**)(unint64_t))(v827 + 48))(((unint64_t)v285 + v831) & v896);
      }
      else
      {
        v108 = v103;
        v205 = v103 + v150;
        if ((v817 & 0x80000000) == 0)
        {
          v206 = *(_QWORD *)(v205 + 8);
          if (v206 >= 0xFFFFFFFF)
            LODWORD(v206) = -1;
          v107 = v206 + 1;
LABEL_96:
          v109 = v932;
          v75 = a1;
          v76 = v940;
          if (v107)
          {
LABEL_97:
            v110 = v943;
            memcpy(v109, v943, __n);
            goto LABEL_98;
          }
          goto LABEL_256;
        }
        v296 = (v853 + ((v918 + v205) & v907)) & v900;
        v75 = a1;
        if (v854 <= 0x7FFFFFFD)
        {
          v810 = *(_QWORD *)(((v811 + ((v845 + v296) & v900)) & 0xFFFFFFFFFFFFF8) + 8);
          if (v810 >= 0xFFFFFFFF)
            LODWORD(v810) = -1;
          v287 = (v810 + 1) >= 2;
LABEL_389:
          v109 = v932;
          v76 = v940;
          if (v287)
            goto LABEL_97;
LABEL_257:
          v375 = v108;
          ((void (*)(void *, const void *, uint64_t))v104)(v109, v943, v886);
          ((void (*)(unint64_t, unint64_t, uint64_t))v104)(((unint64_t)v109 + v868) & v71, v149, v886);
          v376 = (v888 + (((unint64_t)v109 + v868) & v71)) & v905;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v861 + 16))(v376, v150, v862);
          v377 = (_QWORD *)((v102 + v376) & 0xFFFFFFFFFFFFFFF8);
          v378 = (_QWORD *)((v102 + v150) & 0xFFFFFFFFFFFFFFF8);
          *v377 = *v378;
          v379 = ((unint64_t)v377 + v831) & v896;
          v380 = ((unint64_t)v378 + v831) & v896;
          v381 = *(void (**)(unint64_t, unint64_t, uint64_t))(v827 + 16);
          swift_bridgeObjectRetain();
          v381(v379, v380, v847);
          v382 = (_QWORD *)((v878 + v379) & 0xFFFFFFFFFFFFF8);
          v383 = (_QWORD *)((v878 + v380) & 0xFFFFFFFFFFFFF8);
          *v382 = *v383;
          v384 = (_QWORD *)(((unint64_t)v382 + 15) & 0xFFFFFFFFFFFFFFF8);
          v385 = (_QWORD *)(((unint64_t)v383 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v384 = *v385;
          v384[1] = v385[1];
          v386 = (_QWORD *)(v375 + v376);
          *v386 = *(_QWORD *)(v375 + v150);
          v386[1] = *(_QWORD *)(v375 + v150 + 8);
          v387 = (v918 + v375 + v376) & v907;
          v388 = (v918 + v375 + v150) & v907;
          *(_BYTE *)v387 = *(_BYTE *)v388;
          v389 = v387 | 4;
          v390 = *(_DWORD *)(v388 | 4);
          *(_BYTE *)(v389 + 4) = *(_BYTE *)((v388 | 4) + 4);
          *(_DWORD *)v389 = v390;
          *(_WORD *)(v387 + 10) = *(_WORD *)(v388 + 0xA);
          v921 = v387;
          v391 = (v853 + v387) & v900;
          v392 = (v853 + v388) & v900;
          v393 = *(void (**)(unint64_t, uint64_t, uint64_t))(v867 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v393(v391, v392, v846);
          v394 = (v845 + v391) & v900;
          v395 = (v845 + v392) & v900;
          v393(v394, v395, v846);
          v396 = (_BYTE *)(v394 + v872);
          *v396 = *(_BYTE *)(v395 + v872);
          v396[1] = *(_BYTE *)(v395 + v872 + 1);
          v396[2] = *(_BYTE *)(v395 + v872 + 2);
          v396[3] = *(_BYTE *)(v395 + v872 + 3);
          v396[4] = *(_BYTE *)(v395 + v872 + 4);
          v397 = (v394 + v872 + 12) & 0xFFFFFFFFFFFFFFF8;
          v398 = (v395 + v872 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v397 = *(_QWORD *)v398;
          *(_QWORD *)(v397 + 8) = *(_QWORD *)(v398 + 8);
          *(_BYTE *)(v397 + 16) = *(_BYTE *)(v398 + 16);
          *(_BYTE *)(v397 + 17) = *(_BYTE *)(v398 + 17);
          *(_BYTE *)(v397 + 18) = *(_BYTE *)(v398 + 18);
          *(_BYTE *)(v397 + 19) = *(_BYTE *)(v398 + 19);
          v399 = (v397 + 27) & 0xFFFFFFFFFFFFFFF8;
          v400 = (v398 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v399 = *(_QWORD *)v400;
          *(_BYTE *)(v399 + 8) = *(_BYTE *)(v400 + 8);
          *(_BYTE *)(v399 + 9) = *(_BYTE *)(v400 + 9);
          *(_BYTE *)(v399 + 10) = *(_BYTE *)(v400 + 10);
          *(_BYTE *)(v399 + 11) = *(_BYTE *)(v400 + 11);
          *(_BYTE *)(v399 + 12) = *(_BYTE *)(v400 + 12);
          v401 = (_QWORD *)((v397 + 47) & 0xFFFFFFFFFFFFF8);
          v402 = (_QWORD *)((v398 + 47) & 0xFFFFFFFFFFFFF8);
          *v401 = *v402;
          v403 = ((unint64_t)v401 + 15) & 0xFFFFFFFFFFFFFFF8;
          v404 = ((unint64_t)v402 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v403 = *(_QWORD *)v404;
          *(_BYTE *)(v403 + 8) = *(_BYTE *)(v404 + 8);
          *(_BYTE *)(v403 + 9) = *(_BYTE *)(v404 + 9);
          v405 = (void *)((v844 + v403) & v900);
          v406 = (const void *)((v844 + v404) & v900);
          v407 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v867 + 48);
          swift_bridgeObjectRetain();
          if (v407(v406, 1, v846))
          {
            memcpy(v405, v406, v873);
          }
          else
          {
            v393((unint64_t)v405, (uint64_t)v406, v846);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v867 + 56))(v405, 0, 1, v846);
          }
          v408 = (_QWORD *)(((unint64_t)v405 + v843) & 0xFFFFFFFFFFFFFFF8);
          v409 = (_QWORD *)(((unint64_t)v406 + v843) & 0xFFFFFFFFFFFFFFF8);
          *v408 = *v409;
          v410 = ((unint64_t)v408 + 15) & 0xFFFFFFFFFFFFFFF8;
          v411 = ((unint64_t)v409 + 15) & 0xFFFFFFFFFFFFFFF8;
          v412 = *(_QWORD *)v411;
          *(_BYTE *)(v410 + 8) = *(_BYTE *)(v411 + 8);
          *(_QWORD *)v410 = v412;
          v413 = (_QWORD *)(((unint64_t)v408 + 31) & 0xFFFFFFFFFFFFF8);
          v414 = (_QWORD *)(((unint64_t)v409 + 31) & 0xFFFFFFFFFFFFF8);
          *v413 = *v414;
          v415 = ((unint64_t)v413 + 15) & 0xFFFFFFFFFFFFFFF8;
          v416 = (uint64_t *)(((unint64_t)v414 + 15) & 0xFFFFFFFFFFFFFFF8);
          v417 = v416[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v417 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v415 = *(_OWORD *)v416;
          }
          else
          {
            v418 = *v416;
            sub_23AAAE668(*v416, v417);
            *(_QWORD *)v415 = v418;
            *(_QWORD *)(v415 + 8) = v417;
          }
          v419 = (v415 + 19) & 0xFFFFFFFFFFFFFFF8;
          v420 = ((unint64_t)v416 + 19) & 0xFFFFFFFFFFFFFFF8;
          v421 = *(_QWORD *)v420;
          *(_BYTE *)(v419 + 8) = *(_BYTE *)(v420 + 8);
          *(_QWORD *)v419 = v421;
          *(_BYTE *)(v419 + 9) = *(_BYTE *)(v420 + 9);
          v422 = (v419 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v423 = (v420 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v424 = *(_DWORD *)v423;
          *(_BYTE *)(v422 + 4) = *(_BYTE *)(v423 + 4);
          *(_DWORD *)v422 = v424;
          v425 = (_QWORD *)((v419 + 25) & 0xFFFFFFFFFFFFFFF8);
          v426 = (_QWORD *)((v420 + 25) & 0xFFFFFFFFFFFFFFF8);
          *v425 = *v426;
          v425[1] = v426[1];
          v427 = v921 + v917;
          v428 = (__int128 *)(v388 + v917);
          v429 = *(_QWORD *)(v388 + v917 + 16);
          if (v429 >= 0xFFFFFFFF)
            LODWORD(v429) = -1;
          v430 = v429 - 1;
          swift_bridgeObjectRetain();
          if (v430 < 0)
          {
            *(_QWORD *)v427 = *(_QWORD *)v428;
            *(_BYTE *)(v427 + 8) = *((_BYTE *)v428 + 8);
            *(_BYTE *)(v427 + 9) = *((_BYTE *)v428 + 9);
            v443 = (void *)*((_QWORD *)v428 + 2);
            v444 = v443;
            *(_QWORD *)(v427 + 16) = v443;
            v445 = (void *)*((_QWORD *)v428 + 3);
            v446 = v445;
            *(_QWORD *)(v427 + 24) = v445;
            *(_BYTE *)(v427 + 32) = *((_BYTE *)v428 + 32);
            *(_BYTE *)(v427 + 33) = *((_BYTE *)v428 + 33);
            *(_BYTE *)(v427 + 34) = *((_BYTE *)v428 + 34);
            *(_QWORD *)(v427 + 40) = *((_QWORD *)v428 + 5);
            *(_QWORD *)(v427 + 48) = *((_QWORD *)v428 + 6);
            *(_QWORD *)(v427 + 56) = *((_QWORD *)v428 + 7);
            *(_QWORD *)(v427 + 64) = *((_QWORD *)v428 + 8);
            *(_BYTE *)(v427 + 72) = *((_BYTE *)v428 + 72);
            *(_QWORD *)(v427 + 80) = *((_QWORD *)v428 + 10);
            *(_QWORD *)(v427 + 88) = *((_QWORD *)v428 + 11);
            v922 = (void *)*((_QWORD *)v428 + 12);
            *(_QWORD *)(v427 + 96) = v922;
            *(_BYTE *)(v427 + 104) = *((_BYTE *)v428 + 104);
            *(_BYTE *)(v427 + 105) = *((_BYTE *)v428 + 105);
            *(_QWORD *)(v427 + 112) = *((_QWORD *)v428 + 14);
            *(_QWORD *)(v427 + 120) = *((_QWORD *)v428 + 15);
            *(_QWORD *)(v427 + 128) = *((_QWORD *)v428 + 16);
            *(_QWORD *)(v427 + 136) = *((_QWORD *)v428 + 17);
            *(_QWORD *)(v427 + 144) = *((_QWORD *)v428 + 18);
            *(_QWORD *)(v427 + 152) = *((_QWORD *)v428 + 19);
            *(_QWORD *)(v427 + 160) = *((_QWORD *)v428 + 20);
            *(_QWORD *)(v427 + 168) = *((_QWORD *)v428 + 21);
            *(_BYTE *)(v427 + 176) = *((_BYTE *)v428 + 176);
            *(_QWORD *)(v427 + 184) = *((_QWORD *)v428 + 23);
            v447 = *((_QWORD *)v428 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v448 = v922;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v447)
            {
              *(_QWORD *)(v427 + 192) = v447;
              *(_QWORD *)(v427 + 200) = *((_QWORD *)v428 + 25);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v427 + 192) = v428[12];
            }
            v75 = a1;
            v76 = v940;
            *(_QWORD *)(v427 + 208) = *((_QWORD *)v428 + 26);
            *(_QWORD *)(v427 + 216) = *((_QWORD *)v428 + 27);
            *(_QWORD *)(v427 + 224) = *((_QWORD *)v428 + 28);
            *(_QWORD *)(v427 + 232) = *((_QWORD *)v428 + 29);
            *(_QWORD *)(v427 + 240) = *((_QWORD *)v428 + 30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v431 = *v428;
            v432 = v428[1];
            v433 = v428[3];
            *(_OWORD *)(v427 + 32) = v428[2];
            *(_OWORD *)(v427 + 48) = v433;
            *(_OWORD *)v427 = v431;
            *(_OWORD *)(v427 + 16) = v432;
            v434 = v428[4];
            v435 = v428[5];
            v436 = v428[7];
            *(_OWORD *)(v427 + 96) = v428[6];
            *(_OWORD *)(v427 + 112) = v436;
            *(_OWORD *)(v427 + 64) = v434;
            *(_OWORD *)(v427 + 80) = v435;
            v437 = v428[8];
            v438 = v428[9];
            v439 = v428[11];
            *(_OWORD *)(v427 + 160) = v428[10];
            *(_OWORD *)(v427 + 176) = v439;
            *(_OWORD *)(v427 + 128) = v437;
            *(_OWORD *)(v427 + 144) = v438;
            v440 = v428[12];
            v441 = v428[13];
            v442 = v428[14];
            *(_QWORD *)(v427 + 240) = *((_QWORD *)v428 + 30);
            *(_OWORD *)(v427 + 208) = v441;
            *(_OWORD *)(v427 + 224) = v442;
            *(_OWORD *)(v427 + 192) = v440;
            v76 = v940;
          }
          v726 = (_OWORD *)((v427 + 255) & 0xFFFFFFFFFFFFFFF8);
          v727 = (__int128 *)(((unint64_t)v428 + 255) & 0xFFFFFFFFFFFFFFF8);
          v728 = *v727;
          *(_OWORD *)((char *)v726 + 9) = *(__int128 *)((char *)v727 + 9);
          *v726 = v728;
          v729 = (v427 + 287) & 0xFFFFFFFFFFFFFFF8;
          v730 = ((unint64_t)v428 + 287) & 0xFFFFFFFFFFFFFFF8;
          v731 = *(_OWORD *)v730;
          *(_BYTE *)(v729 + 16) = *(_BYTE *)(v730 + 16);
          *(_OWORD *)v729 = v731;
          v732 = (_QWORD *)((v427 + 311) & 0xFFFFFFFFFFFFF8);
          v733 = ((unint64_t)v428 + 311) & 0xFFFFFFFFFFFFF8;
          v734 = *(_QWORD *)v733;
          v733 += 15;
          *v732 = v734;
          v735 = (_QWORD *)(((unint64_t)v732 + 15) & 0xFFFFFFFFFFFFFFF8);
          v736 = *(_QWORD *)(v733 & 0xFFFFFFFFFFFFFFF8);
          v737 = *(_QWORD *)((v733 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_23AA7F2D4(v736, v737);
          *v735 = v736;
          v735[1] = v737;
          v111 = v872;
          v109 = v932;
          v110 = v943;
          if (v854)
          {
LABEL_346:
            v738 = ((((v915
                     + ((((((((((v874 + v111 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 19) & 0xFFFFFFFFFFFFFFF8)
                       + 25) & 0xFFFFFFFFFFFFFFF8)
                     + 327) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 16;
            v739 = (_QWORD *)(((unint64_t)v109 + v738) & 0xFFFFFFFFFFFFFFF8);
            v740 = (_QWORD *)(((unint64_t)v110 + v738) & 0xFFFFFFFFFFFFFFF8);
            *v739 = *v740;
            v739[1] = v740[1];
            *(_QWORD *)(((unint64_t)v739 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v740 + 23) & 0xFFFFFFFFFFFFF8);
            *(_BYTE *)(v75 + v927) = 3;
            swift_bridgeObjectRetain();
            v116 = 1;
            goto LABEL_376;
          }
LABEL_98:
          v111 = v873;
          goto LABEL_346;
        }
        v297 = (*(uint64_t (**)(uint64_t))(v867 + 48))(v296);
      }
      v108 = v103;
      v109 = v932;
      v76 = v940;
      if (v297)
        goto LABEL_97;
LABEL_256:
      v149 = ((unint64_t)v943 + v868) & v71;
      v150 = (v888 + v149) & v905;
      goto LABEL_257;
    case 4:
      v75 = a1;
      (*(void (**)(uint64_t))(v881 + 16))(a1);
      v112 = 4;
      goto LABEL_104;
    case 5:
      v75 = a1;
      (*(void (**)(uint64_t))(v881 + 16))(a1);
      v112 = 5;
      goto LABEL_104;
    case 6:
      v113 = v65;
      v114 = v66;
      (*(void (**)(uint64_t))(v881 + 16))(a1);
      v115 = (const void *)((v64 + v114) & v79);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v52 + 48))(v115, 1, v829))
      {
        memcpy((void *)((v64 + a1) & v79), v115, v61);
      }
      else
      {
        (*(void (**)(uint64_t, const void *, uint64_t))(v52 + 16))((v64 + a1) & v79, v115, v829);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))((v64 + a1) & v79, 0, 1, v829);
      }
      v75 = a1;
      v76 = v940;
      *(_BYTE *)(a1 + v113) = 6;
      v116 = 1;
      goto LABEL_376;
    case 7:
      v75 = a1;
      (*(void (**)(uint64_t))(v881 + 16))(a1);
      v112 = 7;
LABEL_104:
      *(_BYTE *)(a1 + v65) = v112;
      v116 = 1;
      v76 = v940;
      goto LABEL_376;
    default:
      if (v65 <= 3)
        v72 = v65;
      else
        v72 = 4;
      __asm { BR              X14 }
      return result;
  }
}

uint64_t sub_23AF6844C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  size_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  size_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t (*v72)(unint64_t);
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  size_t v77;
  void (*v78)(size_t, uint64_t);
  size_t v79;
  size_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  size_t v86;
  void *v87;
  uint64_t v88;
  unint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t (*v92)(unint64_t);
  unint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  void (*v98)(size_t, uint64_t);
  size_t v99;
  size_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  size_t v106;
  void *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  size_t v114;
  int v115;
  void (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  uint64_t (*v118)(unint64_t);
  unint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  size_t v123;
  void (*v124)(size_t, uint64_t);
  size_t v125;
  size_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  size_t v132;
  void *v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t);
  uint64_t (*v136)(unint64_t);
  unint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  size_t v141;
  void (*v142)(size_t, uint64_t);
  size_t v143;
  size_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t);
  uint64_t v155;
  uint64_t (*v156)(unint64_t);
  unint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  size_t v161;
  void (*v162)(size_t, uint64_t);
  size_t v163;
  size_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  unint64_t v173;
  int v174;
  uint64_t v175;
  size_t v176;
  int v177;
  void (*v178)(uint64_t, uint64_t);
  uint64_t v179;
  uint64_t (*v180)(unint64_t);
  unint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  size_t v185;
  void (*v186)(size_t, uint64_t);
  size_t v187;
  size_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  size_t v205;
  unint64_t v206;
  size_t v207;
  unint64_t v208;
  unint64_t v209;
  size_t v210;
  size_t v211;
  unint64_t v212;
  size_t v213;
  unint64_t v214;
  size_t v215;
  unint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void (*v222)(uint64_t, uint64_t, uint64_t);
  const void *v223;
  int v224;
  void *v225;
  unint64_t v226;
  size_t v227;
  void (*v228)(uint64_t, uint64_t, uint64_t);
  void *v229;
  const void *v230;
  int v231;
  unint64_t v232;
  size_t v233;
  size_t v234;
  uint64_t v235;
  unint64_t v236;
  void *v237;
  const void *v238;
  void (*v239)(uint64_t, uint64_t, uint64_t);
  const void *v240;
  int v241;
  void *v242;
  unint64_t v243;
  size_t v244;
  char v245;
  void *v246;
  const void *v247;
  void (*v248)(uint64_t, uint64_t, uint64_t);
  void *v249;
  const void *v250;
  int v251;
  unint64_t v252;
  size_t v253;
  void (*v254)(uint64_t, uint64_t, uint64_t);
  const void *v255;
  int v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  size_t v260;
  size_t v261;
  void *v262;
  const void *v263;
  void (*v264)(uint64_t, uint64_t, uint64_t);
  void *v265;
  const void *v266;
  int v267;
  unint64_t v268;
  size_t v269;
  char v270;
  void *v271;
  const void *v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  char *v285;
  _BYTE *v286;
  int v287;
  uint64_t *v288;
  uint64_t v289;
  char *v290;
  char *v291;
  int v292;
  uint64_t *v293;
  uint64_t v294;
  size_t v295;
  unint64_t v296;
  size_t v297;
  unint64_t v298;
  size_t v299;
  unint64_t v300;
  unint64_t v301;
  _QWORD *v302;
  _QWORD *v303;
  unint64_t v304;
  unint64_t v305;
  void (*v306)(unint64_t, unint64_t, uint64_t);
  _QWORD *v307;
  _QWORD *v308;
  _QWORD *v309;
  _QWORD *v310;
  _QWORD *v311;
  size_t v312;
  size_t v313;
  uint64_t v314;
  int v315;
  size_t v316;
  size_t v317;
  void (*v318)(size_t, size_t, uint64_t);
  size_t v319;
  size_t v320;
  _BYTE *v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  _QWORD *v326;
  _QWORD *v327;
  unint64_t v328;
  unint64_t v329;
  void *v330;
  const void *v331;
  unsigned int (*v332)(const void *, uint64_t, uint64_t);
  size_t v333;
  unint64_t v334;
  size_t v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  _QWORD *v339;
  _QWORD *v340;
  unint64_t v341;
  unint64_t v342;
  void (*v343)(unint64_t, unint64_t, uint64_t);
  _QWORD *v344;
  _QWORD *v345;
  _QWORD *v346;
  _QWORD *v347;
  _QWORD *v348;
  size_t v349;
  size_t v350;
  uint64_t v351;
  int v352;
  size_t v353;
  size_t v354;
  void (*v355)(size_t, size_t, uint64_t);
  size_t v356;
  size_t v357;
  _BYTE *v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  _QWORD *v363;
  _QWORD *v364;
  unint64_t v365;
  unint64_t v366;
  void *v367;
  const void *v368;
  unsigned int (*v369)(const void *, uint64_t, uint64_t);
  size_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  _QWORD *v374;
  _QWORD *v375;
  unint64_t v376;
  unint64_t v377;
  void (*v378)(unint64_t, unint64_t, uint64_t);
  _QWORD *v379;
  _QWORD *v380;
  _QWORD *v381;
  _QWORD *v382;
  _QWORD *v383;
  size_t v384;
  size_t v385;
  uint64_t v386;
  int v387;
  size_t v388;
  size_t v389;
  void (*v390)(size_t, size_t, uint64_t);
  size_t v391;
  size_t v392;
  _BYTE *v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  _QWORD *v398;
  _QWORD *v399;
  unint64_t v400;
  unint64_t v401;
  void *v402;
  const void *v403;
  unsigned int (*v404)(const void *, uint64_t, uint64_t);
  size_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  _QWORD *v409;
  _QWORD *v410;
  unint64_t v411;
  unint64_t v412;
  void (*v413)(unint64_t, unint64_t, uint64_t);
  _QWORD *v414;
  _QWORD *v415;
  _QWORD *v416;
  _QWORD *v417;
  _QWORD *v418;
  size_t v419;
  size_t v420;
  uint64_t v421;
  int v422;
  size_t v423;
  size_t v424;
  void (*v425)(size_t, size_t, uint64_t);
  size_t v426;
  size_t v427;
  _BYTE *v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  _QWORD *v433;
  _QWORD *v434;
  unint64_t v435;
  unint64_t v436;
  void *v437;
  const void *v438;
  unsigned int (*v439)(const void *, uint64_t, uint64_t);
  _QWORD *v440;
  unint64_t v441;
  unint64_t v442;
  void (*v443)(unint64_t, unint64_t, uint64_t);
  _QWORD *v444;
  _QWORD *v445;
  _QWORD *v446;
  _QWORD *v447;
  char *v448;
  void *v449;
  id v450;
  _QWORD *v451;
  unint64_t v452;
  unint64_t v453;
  void (*v454)(unint64_t, unint64_t, uint64_t);
  _QWORD *v455;
  _QWORD *v456;
  _QWORD *v457;
  _QWORD *v458;
  char *v459;
  void *v460;
  char v461;
  _QWORD *v462;
  _QWORD *v463;
  unint64_t v464;
  unint64_t v465;
  uint64_t v466;
  _QWORD *v467;
  _QWORD *v468;
  unint64_t v469;
  uint64_t *v470;
  unint64_t v471;
  _QWORD *v472;
  _QWORD *v473;
  unint64_t v474;
  unint64_t v475;
  uint64_t v476;
  _QWORD *v477;
  _QWORD *v478;
  unint64_t v479;
  uint64_t *v480;
  unint64_t v481;
  _QWORD *v482;
  _QWORD *v483;
  unint64_t v484;
  unint64_t v485;
  uint64_t v486;
  _QWORD *v487;
  _QWORD *v488;
  unint64_t v489;
  uint64_t *v490;
  unint64_t v491;
  _QWORD *v492;
  _QWORD *v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  _QWORD *v497;
  _QWORD *v498;
  unint64_t v499;
  uint64_t *v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t v503;
  unint64_t v504;
  uint64_t v505;
  unint64_t v506;
  unint64_t v507;
  int v508;
  _QWORD *v509;
  _QWORD *v510;
  size_t v511;
  size_t v512;
  unint64_t v513;
  int v514;
  __int128 v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  uint64_t v527;
  unint64_t v528;
  unint64_t v529;
  uint64_t v530;
  unint64_t v531;
  unint64_t v532;
  int v533;
  _QWORD *v534;
  _QWORD *v535;
  unint64_t v536;
  __int128 *v537;
  unint64_t v538;
  int v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  uint64_t v552;
  unint64_t v553;
  unint64_t v554;
  uint64_t v555;
  unint64_t v556;
  unint64_t v557;
  int v558;
  _QWORD *v559;
  _QWORD *v560;
  unint64_t v561;
  unint64_t v562;
  unint64_t v563;
  int v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  uint64_t v577;
  unint64_t v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unint64_t v582;
  int v583;
  _QWORD *v584;
  _QWORD *v585;
  unint64_t v586;
  __int128 *v587;
  unint64_t v588;
  int v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  void *v602;
  id v603;
  void *v604;
  id v605;
  uint64_t v606;
  id v607;
  void *v608;
  id v609;
  void *v610;
  id v611;
  uint64_t v612;
  id v613;
  void *v614;
  id v615;
  void *v616;
  id v617;
  uint64_t v618;
  id v619;
  void *v620;
  id v621;
  void *v622;
  id v623;
  uint64_t v624;
  id v625;
  unint64_t *v626;
  unint64_t v627;
  unint64_t *v628;
  unint64_t v629;
  unint64_t *v630;
  unint64_t v631;
  unint64_t *v632;
  unint64_t v633;
  unint64_t *v634;
  unint64_t v635;
  unint64_t *v636;
  unint64_t v637;
  unint64_t *v638;
  unint64_t v639;
  unint64_t *v640;
  unint64_t v641;
  unint64_t *v642;
  unint64_t v643;
  unint64_t *v644;
  unint64_t v645;
  unint64_t *v646;
  unint64_t v647;
  unint64_t *v648;
  unint64_t v649;
  size_t v650;
  int v651;
  size_t v652;
  size_t v653;
  int v654;
  size_t v655;
  size_t v656;
  size_t v657;
  unint64_t v658;
  _QWORD *v659;
  _QWORD *v660;
  unint64_t v661;
  unint64_t v662;
  void (*v663)(unint64_t, unint64_t, uint64_t);
  _QWORD *v664;
  _QWORD *v665;
  _QWORD *v666;
  _QWORD *v667;
  _QWORD *v668;
  size_t v669;
  size_t v670;
  uint64_t v671;
  int v672;
  size_t v673;
  size_t v674;
  void (*v675)(size_t, size_t, uint64_t);
  size_t v676;
  size_t v677;
  _BYTE *v678;
  unint64_t v679;
  unint64_t v680;
  unint64_t v681;
  unint64_t v682;
  _QWORD *v683;
  _QWORD *v684;
  unint64_t v685;
  unint64_t v686;
  void *v687;
  const void *v688;
  unsigned int (*v689)(const void *, uint64_t, uint64_t);
  _QWORD *v690;
  _QWORD *v691;
  unint64_t v692;
  unint64_t v693;
  uint64_t v694;
  _QWORD *v695;
  _QWORD *v696;
  unint64_t v697;
  uint64_t *v698;
  unint64_t v699;
  uint64_t v700;
  unint64_t v701;
  unint64_t v702;
  uint64_t v703;
  unint64_t v704;
  unint64_t v705;
  int v706;
  _QWORD *v707;
  _QWORD *v708;
  size_t v709;
  size_t v710;
  unint64_t v711;
  int v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  void *v725;
  id v726;
  void *v727;
  id v728;
  uint64_t v729;
  id v730;
  unint64_t v731;
  _QWORD *v732;
  _QWORD *v733;
  unint64_t v734;
  unint64_t v735;
  void (*v736)(unint64_t, unint64_t, uint64_t);
  _QWORD *v737;
  _QWORD *v738;
  _QWORD *v739;
  _QWORD *v740;
  _QWORD *v741;
  size_t v742;
  size_t v743;
  uint64_t v744;
  int v745;
  size_t v746;
  size_t v747;
  void (*v748)(size_t, size_t, uint64_t);
  size_t v749;
  size_t v750;
  _BYTE *v751;
  unint64_t v752;
  unint64_t v753;
  unint64_t v754;
  unint64_t v755;
  _QWORD *v756;
  _QWORD *v757;
  unint64_t v758;
  unint64_t v759;
  void *v760;
  const void *v761;
  unsigned int (*v762)(const void *, uint64_t, uint64_t);
  _QWORD *v763;
  _QWORD *v764;
  unint64_t v765;
  unint64_t v766;
  uint64_t v767;
  _QWORD *v768;
  _QWORD *v769;
  unint64_t v770;
  uint64_t *v771;
  unint64_t v772;
  uint64_t v773;
  unint64_t v774;
  unint64_t v775;
  uint64_t v776;
  unint64_t v777;
  unint64_t v778;
  int v779;
  _QWORD *v780;
  _QWORD *v781;
  size_t v782;
  size_t v783;
  unint64_t v784;
  int v785;
  __int128 v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  void *v798;
  id v799;
  void *v800;
  id v801;
  uint64_t v802;
  id v803;
  _OWORD *v804;
  __int128 *v805;
  __int128 v806;
  unint64_t v807;
  unint64_t v808;
  __int128 v809;
  _QWORD *v810;
  uint64_t v811;
  uint64_t v812;
  _QWORD *v813;
  uint64_t v814;
  unint64_t v815;
  unint64_t v816;
  void *v817;
  const void *v818;
  char *v819;
  char *v820;
  int v821;
  uint64_t *v822;
  uint64_t v823;
  _QWORD *v824;
  unint64_t v825;
  unint64_t v826;
  void (*v827)(unint64_t, unint64_t, uint64_t);
  _QWORD *v828;
  _QWORD *v829;
  _QWORD *v830;
  _QWORD *v831;
  _QWORD *v832;
  _QWORD *v833;
  void *v834;
  id v835;
  _OWORD *v836;
  __int128 *v837;
  __int128 v838;
  unint64_t v839;
  unint64_t v840;
  __int128 v841;
  _QWORD *v842;
  uint64_t v843;
  uint64_t v844;
  _QWORD *v845;
  uint64_t v846;
  unint64_t v847;
  unint64_t v848;
  _QWORD *v849;
  _QWORD *v850;
  void *v851;
  id v852;
  _OWORD *v853;
  __int128 *v854;
  __int128 v855;
  unint64_t v856;
  unint64_t v857;
  __int128 v858;
  _QWORD *v859;
  uint64_t v860;
  uint64_t v861;
  _QWORD *v862;
  uint64_t v863;
  unint64_t v864;
  unint64_t v865;
  void *v866;
  const void *v867;
  char *v868;
  char *v869;
  int v870;
  uint64_t *v871;
  uint64_t v872;
  _QWORD *v873;
  unint64_t v874;
  unint64_t v875;
  void (*v876)(unint64_t, unint64_t, uint64_t);
  _QWORD *v877;
  _QWORD *v878;
  _QWORD *v879;
  _QWORD *v880;
  _QWORD *v881;
  _QWORD *v882;
  id v883;
  _OWORD *v884;
  __int128 *v885;
  __int128 v886;
  unint64_t v887;
  unint64_t v888;
  __int128 v889;
  _QWORD *v890;
  uint64_t v891;
  uint64_t v892;
  _QWORD *v893;
  uint64_t v894;
  unint64_t v895;
  unint64_t v896;
  _QWORD *v897;
  _QWORD *v898;
  uint64_t result;
  _OWORD *v900;
  __int128 *v901;
  __int128 v902;
  unint64_t v903;
  unint64_t v904;
  __int128 v905;
  _QWORD *v906;
  uint64_t v907;
  uint64_t v908;
  _QWORD *v909;
  uint64_t v910;
  unint64_t v911;
  unint64_t v912;
  _QWORD *v913;
  _QWORD *v914;
  void *v915;
  id v916;
  _OWORD *v917;
  __int128 *v918;
  __int128 v919;
  unint64_t v920;
  unint64_t v921;
  __int128 v922;
  _QWORD *v923;
  uint64_t v924;
  uint64_t v925;
  _QWORD *v926;
  uint64_t v927;
  unint64_t v928;
  unint64_t v929;
  _QWORD *v930;
  _QWORD *v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  unint64_t v936;
  unint64_t v937;
  unint64_t v938;
  unint64_t v939;
  unint64_t v940;
  unint64_t v941;
  unint64_t v942;
  unint64_t v943;
  unint64_t v944;
  unint64_t v945;
  uint64_t v946;
  size_t v947;
  size_t v948;
  size_t v949;
  size_t v950;
  unsigned int v951;
  unsigned int v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  unsigned int v961;
  unsigned int v962;
  size_t v963;
  uint64_t v964;
  unint64_t v965;
  unsigned int v966;
  uint64_t v967;
  uint64_t v968;
  size_t v969;
  size_t v970;
  size_t v971;
  uint64_t v972;
  size_t v973;
  unint64_t __n;
  unint64_t v975;
  size_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  unsigned int v986;
  unsigned int v987;
  uint64_t v988;
  uint64_t v989;
  unint64_t v990;
  uint64_t v991;
  uint64_t v992;
  unint64_t v993;
  int v994;
  unint64_t v995;
  unsigned int v996;
  unsigned int v997;
  size_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  unsigned int v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  unint64_t v1010;
  uint64_t v1011;
  unint64_t v1012;
  size_t v1013;
  uint64_t v1014;
  unsigned int v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  unsigned int v1023;
  uint64_t v1024;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  const void *v1030;
  uint64_t v1031;
  uint64_t v1032;
  unint64_t v1033;
  uint64_t v1034;
  uint64_t AssociatedTypeWitness;
  void *v1036;
  size_t v1037;
  size_t v1038;
  unsigned int v1039;
  size_t v1040;
  size_t v1041;
  size_t v1042;
  size_t v1043;
  void *v1044;
  void *v1045;
  void *v1046;
  uint64_t v1047;
  size_t v1048;
  void *v1049;
  size_t v1050;
  void *v1051;
  size_t v1052;
  void *v1053;
  uint64_t v1054;
  const void *v1055;
  const void *v1056;
  unint64_t v1057;
  unint64_t v1058;
  unint64_t v1059;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(unsigned __int8 *)(v6 + 80);
    v1029 = v5;
    v1005 = swift_getAssociatedTypeWitness();
    v9 = *(_QWORD *)(v1005 - 8);
    v10 = *(_DWORD *)(v9 + 80) & 0xF8;
    v985 = swift_getAssociatedTypeWitness();
    v11 = *(_QWORD *)(v985 - 8);
    v12 = *(unsigned __int8 *)(v11 + 80);
    v13 = v10 | v12 | 7;
    v977 = sub_23B1C5BDC();
    v14 = *(_QWORD *)(v977 - 8);
    v15 = *(unsigned __int8 *)(v14 + 80);
    v16 = v15 | 7;
    v17 = v13 | v8 | v15;
    v1031 = v6;
    v18 = *(_DWORD *)(v11 + 84);
    v987 = *(_DWORD *)(v9 + 84);
    if (v987 > v18)
      v18 = *(_DWORD *)(v9 + 84);
    v962 = v18;
    if (v18 <= 0x7FFFFFFE)
      v18 = 2147483646;
    v1039 = *(_DWORD *)(v6 + 84);
    v1006 = v18;
    if (v18 <= v1039)
      v18 = *(_DWORD *)(v6 + 84);
    v19 = *(_DWORD *)(v14 + 84);
    if (v19 <= 0x7FFFFFFE)
      v20 = 2147483646;
    else
      v20 = *(_DWORD *)(v14 + 84);
    v1023 = v20;
    if (v18 <= v20)
      v18 = v20;
    v952 = v18;
    if (v18 <= 0x7FFFFFFF)
      v18 = 0x7FFFFFFF;
    v997 = v18;
    v966 = *(_DWORD *)(v14 + 84);
    v21 = v19 == 0;
    v1054 = v8;
    v1000 = v7 + v8;
    v1014 = v13;
    v1001 = v7 + v13;
    v1004 = v9;
    v1008 = *(_QWORD *)(v9 + 64) + 7;
    v983 = v12 + 8;
    v984 = v11;
    v968 = *(_QWORD *)(v11 + 64) + 7;
    v1040 = ((((v968 + ((v12 + 8 + (v1008 & 0xFFFFFFFFFFFFFFF8)) & ~v12)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 16;
    v1017 = v15 | 7;
    v1034 = v16 + 16;
    v989 = v15 + 12;
    v1009 = *(_QWORD *)(v977 - 8);
    v22 = *(_QWORD *)(v14 + 64);
    v976 = v22 + v15;
    v963 = v22 + 12;
    v971 = v22;
    v972 = v15 + 10;
    v23 = (v15
         + 10
         + ((((((v22 + 12 + ((v22 + v15 + ((v15 + 12) & ~v15)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v15;
    if (v21)
      ++v22;
    v998 = v22;
    v990 = v23;
    v973 = v22 + 7;
    v1033 = ((((((((((v22 + 7 + v23) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
              + 19) & 0xFFFFFFFFFFFFFFF8)
            + 25) & 0xFFFFFFFFFFFFFFF8)
          + 16;
    v964 = (v16 + 16 + ((v7 + v13 + ((v7 + v8) & ~v8)) & ~v13) + v1040) & ~v16;
    v995 = v17 + v7;
    v1019 = v13 | v8 | v15;
    v975 = ((((v964 + v1033 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
    v24 = v975 + ((v17 + v7) & ~v17);
    v1012 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    v1022 = v3;
    v25 = *(_QWORD *)(a3 + 24);
    v1047 = swift_getAssociatedTypeWitness();
    v26 = *(_QWORD *)(v1047 - 8);
    v27 = *(unsigned __int8 *)(v26 + 80);
    v1010 = (v24 + v27) & ~v27;
    v28 = *(_DWORD *)(v26 + 84);
    v1032 = v26;
    v29 = *(_QWORD *)(v26 + 64);
    if (v28)
      v30 = *(_QWORD *)(v26 + 64);
    else
      v30 = v29 + 1;
    v1003 = swift_getAssociatedTypeWitness();
    v31 = *(_QWORD *)(v1003 - 8);
    v32 = *(_DWORD *)(v31 + 80) & 0xF8;
    v982 = swift_getAssociatedTypeWitness();
    v33 = *(_QWORD *)(v982 - 8);
    v34 = *(unsigned __int8 *)(v33 + 80);
    v35 = v32 | v34 | 7;
    v36 = *(_DWORD *)(v31 + 84);
    v37 = *(_DWORD *)(v33 + 84);
    if (v36 > v37)
      v37 = *(_DWORD *)(v31 + 84);
    v961 = v37;
    if (v37 <= 0x7FFFFFFE)
      v38 = 2147483646;
    else
      v38 = v37;
    v1002 = v31;
    v1007 = *(_QWORD *)(v31 + 64) + 7;
    v980 = v34 + 8;
    v981 = *(_QWORD *)(v982 - 8);
    v967 = *(_QWORD *)(v33 + 64) + 7;
    v39 = ((((v967 + ((v34 + 8 + (v1007 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    v950 = v30;
    v40 = ((((((v30 + v35 + v1010) & ~v35) + v39 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    v958 = v7 + v27;
    v970 = v30 + v35;
    v41 = v39 + ((v30 + v35 + ((v7 + v27) & ~v27)) & ~v35) + 16;
    v42 = *(_QWORD *)(v1029 - 8);
    v43 = *(unsigned __int8 *)(v42 + 80);
    v957 = v7 + v43;
    if (*(_DWORD *)(v42 + 84))
      v44 = *(_QWORD *)(v42 + 64);
    else
      v44 = *(_QWORD *)(v42 + 64) + 1;
    v45 = ((v1012 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v7 > v45)
      v45 = v7;
    v3 = v1022;
    if (v40 <= v41)
      v40 = v41;
    if (((v1012 + 23) & 0xFFFFFFFFFFFFFFF8) + 8 <= ((v7 + v43) & ~v43) + v44)
      v46 = ((v7 + v43) & ~v43) + v44;
    else
      v46 = ((v1012 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v45 > v40)
      v40 = v45;
    if (v40 <= v46)
      v47 = v46;
    else
      v47 = v40;
    v48 = v27 | v15 | v35;
    v993 = v48 + v29;
    v996 = v28;
    if (v38 <= v28)
      v49 = v28;
    else
      v49 = v38;
    if (v49 <= v1023)
      v49 = v1023;
    v951 = v49;
    if (v49 <= 0x7FFFFFFF)
      v50 = 0x7FFFFFFF;
    else
      v50 = v49;
    v1024 = v27;
    v999 = v29 + v27;
    v1011 = v29 + v35;
    v1013 = ((((v967 + ((v34 + 8 + (v1007 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 16;
    v51 = (v1034 + ((v29 + v35 + ((v29 + v27) & ~v27)) & ~v35) + v39) & ~v1017;
    if (v1039)
      v52 = v7;
    else
      v52 = v7 + 1;
    v960 = v25;
    v53 = *(_QWORD *)(v25 - 8);
    __n = ((((v51 + v1033 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
    v54 = __n + ((v48 + v29) & ~v48);
    v55 = ((v54 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    v56 = ((((((v52 + v1014 + ((v54 + v1054) & ~v1054)) & ~v1014) + v1040 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    v956 = v29 + v1054;
    v969 = v52 + v1014;
    if (*(_DWORD *)(v53 + 84))
      v57 = *(_QWORD *)(v53 + 64);
    else
      v57 = *(_QWORD *)(v53 + 64) + 1;
    if (v29 > v55)
      v55 = v29;
    if (v56 <= ((v52 + v1014 + ((v29 + v1054) & ~v1054)) & ~v1014) + v1040 + 16)
      v56 = ((v52 + v1014 + ((v29 + v1054) & ~v1054)) & ~v1014) + v1040 + 16;
    v58 = ((v54 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    v59 = *(unsigned __int8 *)(v53 + 80);
    v955 = v29 + v59;
    if (v58 <= ((v29 + v59) & ~v59) + v57)
      v58 = ((v29 + v59) & ~v59) + v57;
    if (v55 <= v56)
      v55 = v56;
    if (v55 <= v58)
      v60 = v58;
    else
      v60 = v55;
    if (v60 + 1 <= v47 + 1)
      v61 = v47 + 1;
    else
      v61 = v60 + 1;
    v62 = *(unsigned __int8 *)(v1022 + v61);
    v959 = *(_QWORD *)(v25 - 8);
    if (v62 >= 2)
    {
      if (v61 <= 3)
        v63 = v61;
      else
        v63 = 4;
      __asm { BR              X17 }
    }
    v64 = v61;
    v65 = v1047;
    v66 = a2;
    v992 = ~v1019;
    v1016 = ~v1054;
    v1020 = ~v1014;
    v979 = ~v12;
    v988 = ~v1017;
    v67 = ~v15;
    v1018 = ~v1024;
    v1021 = ~v35;
    v978 = ~v34;
    v954 = ~v43;
    v991 = ~v48;
    v953 = ~v59;
    v986 = v36;
    v1015 = v38;
    v994 = v50;
    v965 = v51;
    v948 = v44;
    v949 = v52;
    v947 = v57;
    if (v62 == 1)
    {
      switch(*(_BYTE *)(v1022 + v60))
      {
        case 0:
          v946 = *(_QWORD *)(v1029 - 8);
          v70 = *(void (**)(uint64_t, uint64_t))(v1032 + 8);
          v70(v1022, v1047);
          v71 = (v993 + v1022) & v991;
          if (v996 == v994)
          {
            v72 = *(uint64_t (**)(unint64_t))(v1032 + 48);
            v73 = (v993 + v1022) & v991;
            goto LABEL_88;
          }
          v75 = (v999 + v71) & v1018;
          v76 = (v1011 + v75) & v1021;
          if (v1015 == v994)
          {
            if (v986 == v1015)
            {
              v72 = *(uint64_t (**)(unint64_t))(v1002 + 48);
              v73 = (v1011 + v75) & v1021;
              goto LABEL_88;
            }
            v626 = (unint64_t *)((v1007 + v76) & 0xFFFFFFFFFFFFFFF8);
            if (v961 <= 0x7FFFFFFE)
            {
              v627 = *v626;
              goto LABEL_685;
            }
            v73 = ((unint64_t)v626 + v980) & v978;
            v72 = *(uint64_t (**)(unint64_t))(v981 + 48);
          }
          else
          {
            v205 = v1013 + v76;
            if ((v951 & 0x80000000) == 0)
            {
              v206 = *(_QWORD *)(v205 + 8);
              if (v206 >= 0xFFFFFFFF)
                LODWORD(v206) = -1;
              if ((_DWORD)v206 == -1)
              {
LABEL_89:
                v75 = (v999 + v71) & v1018;
                v76 = (v1011 + v75) & v1021;
LABEL_90:
                v937 = v60;
                v932 = v71;
                v70(v71, v1047);
                v70(v75, v1047);
                (*(void (**)(uint64_t, uint64_t))(v1002 + 8))(v76, v1003);
                swift_bridgeObjectRelease();
                (*(void (**)(unint64_t, uint64_t))(v981 + 8))((v980 + ((v1007 + v76) & 0xFFFFFFFFFFFFFFF8)) & v978, v982);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v77 = (v1034 + v1013 + v76) & v988;
                v78 = *(void (**)(size_t, uint64_t))(v1009 + 8);
                v78((v989 + v77) & v67, v977);
                v79 = (v976 + ((v989 + v77) & v67)) & v67;
                v78(v79, v977);
                v80 = v963 + v79;
                v81 = v67;
                v82 = v80 & 0xFFFFFFFFFFFFFFF8;
                swift_bridgeObjectRelease();
                v83 = v82 + 47;
                v67 = v81;
                v84 = (v972 + (((v83 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v81;
                if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1009 + 48))(v84, 1, v977))
                  v78(v84, v977);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v85 = *(_QWORD *)(((((((v973 + v84) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 8);
                if ((v85 & 0x3000000000000000) == 0)
                  sub_23AAAE53C(*(_QWORD *)((((((v973 + v84) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v85);
                swift_bridgeObjectRelease();
                v86 = v77 + v1033;
                v87 = *(void **)(v86 + 16);
                LODWORD(v88) = -1;
                if ((unint64_t)v87 < 0xFFFFFFFF)
                  v88 = *(_QWORD *)(v86 + 16);
                v60 = v937;
                v66 = a2;
                if ((int)v88 - 1 < 0)
                {

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (*(_QWORD *)(v86 + 192))
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                  }
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                sub_23AAA12F0(*(_QWORD *)((((v86 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v86 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
                v71 = v932;
                goto LABEL_101;
              }
              goto LABEL_101;
            }
            v73 = (v989 + ((v1034 + v205) & v988)) & v67;
            if (v966 <= 0x7FFFFFFD)
            {
              v627 = *(_QWORD *)(((v963 + ((v976 + v73) & v67)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_685:
              if (v627 >= 0xFFFFFFFF)
                LODWORD(v627) = -1;
              if ((v627 + 1) < 2)
                goto LABEL_90;
LABEL_101:
              v89 = __n;
LABEL_162:
              v153 = v71 + v89;
LABEL_283:

              goto LABEL_284;
            }
            v72 = *(uint64_t (**)(unint64_t))(v1009 + 48);
          }
LABEL_88:
          v74 = v72(v73);
          v71 = (v993 + v1022) & v991;
          if (v74)
            goto LABEL_101;
          goto LABEL_89;
        case 1:
          v946 = *(_QWORD *)(v1029 - 8);
          v90 = *(void (**)(uint64_t, uint64_t))(v1032 + 8);
          v90(v1022, v1047);
          v91 = (v993 + v1022) & v991;
          if (v996 == v994)
          {
            v92 = *(uint64_t (**)(unint64_t))(v1032 + 48);
            v93 = (v993 + v1022) & v991;
            goto LABEL_104;
          }
          v95 = (v999 + v91) & v1018;
          v96 = (v1011 + v95) & v1021;
          if (v1015 == v994)
          {
            if (v986 == v1015)
            {
              v92 = *(uint64_t (**)(unint64_t))(v1002 + 48);
              v93 = (v1011 + v95) & v1021;
              goto LABEL_104;
            }
            v628 = (unint64_t *)((v1007 + v96) & 0xFFFFFFFFFFFFFFF8);
            if (v961 <= 0x7FFFFFFE)
            {
              v629 = *v628;
              goto LABEL_690;
            }
            v93 = ((unint64_t)v628 + v980) & v978;
            v92 = *(uint64_t (**)(unint64_t))(v981 + 48);
          }
          else
          {
            v207 = v1013 + v96;
            if ((v951 & 0x80000000) == 0)
            {
              v208 = *(_QWORD *)(v207 + 8);
              if (v208 >= 0xFFFFFFFF)
                LODWORD(v208) = -1;
              if ((_DWORD)v208 == -1)
              {
LABEL_105:
                v95 = (v999 + v91) & v1018;
                v96 = (v1011 + v95) & v1021;
LABEL_106:
                v938 = v60;
                v933 = v91;
                v90(v91, v1047);
                v90(v95, v1047);
                (*(void (**)(uint64_t, uint64_t))(v1002 + 8))(v96, v1003);
                swift_bridgeObjectRelease();
                (*(void (**)(unint64_t, uint64_t))(v981 + 8))((v980 + ((v1007 + v96) & 0xFFFFFFFFFFFFFFF8)) & v978, v982);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v97 = (v1034 + v1013 + v96) & v988;
                v98 = *(void (**)(size_t, uint64_t))(v1009 + 8);
                v98((v989 + v97) & v67, v977);
                v99 = (v976 + ((v989 + v97) & v67)) & v67;
                v98(v99, v977);
                v100 = v963 + v99;
                v101 = v67;
                v102 = v100 & 0xFFFFFFFFFFFFFFF8;
                swift_bridgeObjectRelease();
                v103 = v102 + 47;
                v67 = v101;
                v104 = (v972 + (((v103 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v101;
                if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1009 + 48))(v104, 1, v977))
                  v98(v104, v977);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v105 = *(_QWORD *)(((((((v973 + v104) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                 + 8);
                if ((v105 & 0x3000000000000000) == 0)
                  sub_23AAAE53C(*(_QWORD *)((((((v973 + v104) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v105);
                swift_bridgeObjectRelease();
                v106 = v97 + v1033;
                v107 = *(void **)(v106 + 16);
                LODWORD(v108) = -1;
                if ((unint64_t)v107 < 0xFFFFFFFF)
                  v108 = *(_QWORD *)(v106 + 16);
                v60 = v938;
                v66 = a2;
                if ((int)v108 - 1 < 0)
                {

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (*(_QWORD *)(v106 + 192))
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                  }
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                sub_23AAA12F0(*(_QWORD *)((((v106 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v106 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
                v91 = v933;
              }
LABEL_117:
              v109 = (v91 + v1054 + __n) & v1016;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1031 + 48))(v109, 1, AssociatedTypeWitness))(*(void (**)(unint64_t, uint64_t))(v1031 + 8))(v109, AssociatedTypeWitness);
              v110 = (v969 + v109) & v1020;
              if (v987 == v1006)
              {
                v111 = (*(uint64_t (**)(size_t))(v1004 + 48))((v969 + v109) & v1020);
              }
              else
              {
                v197 = (uint64_t *)((v1008 + v110) & 0xFFFFFFFFFFFFFFF8);
                if (v962 <= 0x7FFFFFFE)
                {
                  v198 = *v197;
                  if ((unint64_t)*v197 >= 0xFFFFFFFF)
                    LODWORD(v198) = -1;
                  if ((v198 + 1) >= 2)
                    goto LABEL_256;
                  goto LABEL_255;
                }
                v111 = (*(uint64_t (**)(unint64_t))(v984 + 48))(((unint64_t)v197 + v983) & v979);
              }
              if (v111)
              {
LABEL_256:
                v209 = ((((v968 + ((v12 + 8 + (v1008 & 0xFFFFFFFFFFFFFFF8)) & ~v12)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 16;
LABEL_282:
                v153 = v110 + v209 + 15;
                goto LABEL_283;
              }
              v197 = (uint64_t *)((v1008 + v110) & 0xFFFFFFFFFFFFFFF8);
LABEL_255:
              (*(void (**)(unint64_t, uint64_t))(v1004 + 8))(v110, v1005);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v984 + 8))(((unint64_t)v197 + v983) & v979, v985);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_256;
            }
            v93 = (v989 + ((v1034 + v207) & v988)) & v67;
            if (v966 <= 0x7FFFFFFD)
            {
              v629 = *(_QWORD *)(((v963 + ((v976 + v93) & v67)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_690:
              if (v629 >= 0xFFFFFFFF)
                LODWORD(v629) = -1;
              if ((v629 + 1) < 2)
                goto LABEL_106;
              goto LABEL_117;
            }
            v92 = *(uint64_t (**)(unint64_t))(v1009 + 48);
          }
LABEL_104:
          v94 = v92(v93);
          v91 = (v993 + v1022) & v991;
          if (v94)
            goto LABEL_117;
          goto LABEL_105;
        case 2:
          v1026 = v67;
          v112 = *(_QWORD *)(v1029 - 8);
          (*(void (**)(uint64_t, uint64_t))(v1032 + 8))(v1022, v1047);
          v113 = (v956 + v1022) & v1016;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1031 + 48))(v113, 1, AssociatedTypeWitness))(*(void (**)(uint64_t, uint64_t))(v1031 + 8))(v113, AssociatedTypeWitness);
          v114 = (v969 + v113) & v1020;
          if (v987 == v1006)
          {
            v115 = (*(uint64_t (**)(size_t))(v1004 + 48))((v969 + v113) & v1020);
LABEL_258:
            if (v115)
              goto LABEL_261;
            v199 = (uint64_t *)((v1008 + v114) & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_260;
          }
          v199 = (uint64_t *)((v1008 + v114) & 0xFFFFFFFFFFFFFFF8);
          if (v962 > 0x7FFFFFFE)
          {
            v115 = (*(uint64_t (**)(unint64_t))(v984 + 48))(((unint64_t)v199 + v983) & v979);
            goto LABEL_258;
          }
          v200 = *v199;
          if ((unint64_t)*v199 >= 0xFFFFFFFF)
            LODWORD(v200) = -1;
          if ((v200 + 1) < 2)
          {
LABEL_260:
            (*(void (**)(size_t, uint64_t))(v1004 + 8))(v114, v1005);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v984 + 8))(((unint64_t)v199 + v983) & v979, v985);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
LABEL_261:
          v210 = v114 + v1040;
          goto LABEL_290;
        case 3:
          v946 = *(_QWORD *)(v1029 - 8);
          v116 = *(void (**)(uint64_t, uint64_t))(v1032 + 8);
          v116(v1022, v1047);
          v117 = (v993 + v1022) & v991;
          if (v996 == v994)
          {
            v118 = *(uint64_t (**)(unint64_t))(v1032 + 48);
            v119 = (v993 + v1022) & v991;
            goto LABEL_127;
          }
          v121 = (v999 + v117) & v1018;
          v122 = (v1011 + v121) & v1021;
          if (v1015 == v994)
          {
            if (v986 == v1015)
            {
              v118 = *(uint64_t (**)(unint64_t))(v1002 + 48);
              v119 = (v1011 + v121) & v1021;
              goto LABEL_127;
            }
            v630 = (unint64_t *)((v1007 + v122) & 0xFFFFFFFFFFFFFFF8);
            if (v961 <= 0x7FFFFFFE)
            {
              v631 = *v630;
              goto LABEL_635;
            }
            v119 = ((unint64_t)v630 + v980) & v978;
            v118 = *(uint64_t (**)(unint64_t))(v981 + 48);
          }
          else
          {
            v211 = v1013 + v122;
            if ((v951 & 0x80000000) == 0)
            {
              v212 = *(_QWORD *)(v211 + 8);
              if (v212 >= 0xFFFFFFFF)
                LODWORD(v212) = -1;
              if ((_DWORD)v212 == -1)
              {
LABEL_128:
                v121 = (v999 + v117) & v1018;
                v122 = (v1011 + v121) & v1021;
LABEL_129:
                v939 = v60;
                v116(v117, v1047);
                v116(v121, v1047);
                (*(void (**)(uint64_t, uint64_t))(v1002 + 8))(v122, v1003);
                swift_bridgeObjectRelease();
                (*(void (**)(unint64_t, uint64_t))(v981 + 8))((v980 + ((v1007 + v122) & 0xFFFFFFFFFFFFFFF8)) & v978, v982);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v123 = (v1034 + v1013 + v122) & v988;
                v124 = *(void (**)(size_t, uint64_t))(v1009 + 8);
                v124((v989 + v123) & v67, v977);
                v125 = (v976 + ((v989 + v123) & v67)) & v67;
                v124(v125, v977);
                v126 = v963 + v125;
                v127 = v67;
                v128 = v126 & 0xFFFFFFFFFFFFFFF8;
                swift_bridgeObjectRelease();
                v129 = v128 + 47;
                v67 = v127;
                v130 = (v972 + (((v129 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v127;
                if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1009 + 48))(v130, 1, v977))
                  v124(v130, v977);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v131 = *(_QWORD *)(((((((v973 + v130) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                 + 8);
                if ((v131 & 0x3000000000000000) == 0)
                  sub_23AAAE53C(*(_QWORD *)((((((v973 + v130) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v131);
                swift_bridgeObjectRelease();
                v132 = v123 + v1033;
                v133 = *(void **)(v132 + 16);
                LODWORD(v134) = -1;
                if ((unint64_t)v133 < 0xFFFFFFFF)
                  v134 = *(_QWORD *)(v132 + 16);
                v60 = v939;
                v66 = a2;
                if ((int)v134 - 1 < 0)
                {

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (*(_QWORD *)(v132 + 192))
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                  }
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                sub_23AAA12F0(*(_QWORD *)((((v132 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v132 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
              }
LABEL_201:
              swift_bridgeObjectRelease();
LABEL_284:
              v65 = v1047;
              v42 = v946;
LABEL_291:
              v217 = *(unsigned __int8 *)(v66 + v64);
              if (v217 >= 2)
              {
                if (v64 <= 3)
                  v218 = v64;
                else
                  v218 = 4;
                __asm { BR              X12 }
              }
              if (v217 == 1)
              {
                switch(*(_BYTE *)(v66 + v60))
                {
                  case 0:
                    v222 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1032 + 16);
                    v222(v1022, v66, v65);
                    v223 = (const void *)((v993 + v66) & v991);
                    v1055 = v223;
                    if (v996 == v994)
                    {
                      v224 = (*(uint64_t (**)(unint64_t))(v1032 + 48))((v993 + v66) & v991);
LABEL_310:
                      v223 = (const void *)((v993 + v66) & v991);
                      goto LABEL_311;
                    }
                    v273 = ((unint64_t)v223 + v999) & v1018;
                    v274 = (v1011 + v273) & v1021;
                    if (v1015 == v994)
                    {
                      if (v986 == v1015)
                      {
                        v224 = (*(uint64_t (**)(unint64_t))(v1002 + 48))((v1011 + v273) & v1021);
                        goto LABEL_310;
                      }
                      v638 = (unint64_t *)((v1007 + v274) & 0xFFFFFFFFFFFFFFF8);
                      v225 = (void *)((v993 + v1022) & v991);
                      if (v961 <= 0x7FFFFFFE)
                      {
                        v639 = *v638;
LABEL_655:
                        if (v639 >= 0xFFFFFFFF)
                          LODWORD(v639) = -1;
                        if ((v639 + 1) >= 2)
                          goto LABEL_312;
LABEL_545:
                        v944 = v60;
                        v222((uint64_t)v225, (uint64_t)v223, v1047);
                        v222(((unint64_t)v225 + v999) & v1018, v273, v1047);
                        v658 = (v1011 + (((unint64_t)v225 + v999) & v1018)) & v1021;
                        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1002 + 16))(v658, v274, v1003);
                        v659 = (_QWORD *)((v1007 + v658) & 0xFFFFFFFFFFFFFFF8);
                        v660 = (_QWORD *)((v1007 + v274) & 0xFFFFFFFFFFFFFFF8);
                        *v659 = *v660;
                        v661 = ((unint64_t)v659 + v980) & v978;
                        v662 = ((unint64_t)v660 + v980) & v978;
                        v663 = *(void (**)(unint64_t, unint64_t, uint64_t))(v981 + 16);
                        swift_bridgeObjectRetain();
                        v663(v661, v662, v982);
                        v664 = (_QWORD *)((v967 + v661) & 0xFFFFFFFFFFFFF8);
                        v665 = (_QWORD *)((v967 + v662) & 0xFFFFFFFFFFFFF8);
                        *v664 = *v665;
                        v666 = (_QWORD *)(((unint64_t)v664 + 15) & 0xFFFFFFFFFFFFFFF8);
                        v667 = (_QWORD *)(((unint64_t)v665 + 15) & 0xFFFFFFFFFFFFFFF8);
                        *v666 = *v667;
                        v666[1] = v667[1];
                        v668 = (_QWORD *)(v1013 + v658);
                        *v668 = *(_QWORD *)(v1013 + v274);
                        v668[1] = *(_QWORD *)(v1013 + v274 + 8);
                        v669 = (v1034 + v1013 + v658) & v988;
                        v670 = (v1034 + v1013 + v274) & v988;
                        *(_BYTE *)v669 = *(_BYTE *)v670;
                        v671 = v669 | 4;
                        v672 = *(_DWORD *)(v670 | 4);
                        *(_BYTE *)(v671 + 4) = *(_BYTE *)((v670 | 4) + 4);
                        *(_DWORD *)v671 = v672;
                        *(_WORD *)(v669 + 10) = *(_WORD *)(v670 + 0xA);
                        v1050 = v669;
                        v673 = (v989 + v669) & v67;
                        v674 = (v989 + v670) & v67;
                        v675 = *(void (**)(size_t, size_t, uint64_t))(v1009 + 16);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        v675(v673, v674, v977);
                        v676 = (v976 + v673) & v67;
                        v677 = (v976 + v674) & v67;
                        v675(v676, v677, v977);
                        v678 = (_BYTE *)(v676 + v971);
                        *v678 = *(_BYTE *)(v677 + v971);
                        v678[1] = *(_BYTE *)(v677 + v971 + 1);
                        v678[2] = *(_BYTE *)(v677 + v971 + 2);
                        v678[3] = *(_BYTE *)(v677 + v971 + 3);
                        v678[4] = *(_BYTE *)(v677 + v971 + 4);
                        v679 = (v676 + v971 + 12) & 0xFFFFFFFFFFFFFFF8;
                        v680 = (v677 + v971 + 12) & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v679 = *(_QWORD *)v680;
                        *(_QWORD *)(v679 + 8) = *(_QWORD *)(v680 + 8);
                        *(_BYTE *)(v679 + 16) = *(_BYTE *)(v680 + 16);
                        *(_BYTE *)(v679 + 17) = *(_BYTE *)(v680 + 17);
                        *(_BYTE *)(v679 + 18) = *(_BYTE *)(v680 + 18);
                        *(_BYTE *)(v679 + 19) = *(_BYTE *)(v680 + 19);
                        v681 = (v679 + 27) & 0xFFFFFFFFFFFFFFF8;
                        v682 = (v680 + 27) & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v681 = *(_QWORD *)v682;
                        *(_BYTE *)(v681 + 8) = *(_BYTE *)(v682 + 8);
                        *(_BYTE *)(v681 + 9) = *(_BYTE *)(v682 + 9);
                        *(_BYTE *)(v681 + 10) = *(_BYTE *)(v682 + 10);
                        *(_BYTE *)(v681 + 11) = *(_BYTE *)(v682 + 11);
                        *(_BYTE *)(v681 + 12) = *(_BYTE *)(v682 + 12);
                        v683 = (_QWORD *)((v679 + 47) & 0xFFFFFFFFFFFFF8);
                        v684 = (_QWORD *)((v680 + 47) & 0xFFFFFFFFFFFFF8);
                        *v683 = *v684;
                        v685 = ((unint64_t)v683 + 15) & 0xFFFFFFFFFFFFFFF8;
                        v686 = ((unint64_t)v684 + 15) & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v685 = *(_QWORD *)v686;
                        *(_BYTE *)(v685 + 8) = *(_BYTE *)(v686 + 8);
                        *(_BYTE *)(v685 + 9) = *(_BYTE *)(v686 + 9);
                        v687 = (void *)((v972 + v685) & v67);
                        v688 = (const void *)((v972 + v686) & v67);
                        v689 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1009 + 48);
                        swift_bridgeObjectRetain();
                        if (v689(v688, 1, v977))
                        {
                          memcpy(v687, v688, v998);
                        }
                        else
                        {
                          v675((size_t)v687, (size_t)v688, v977);
                          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1009 + 56))(v687, 0, 1, v977);
                        }
                        v690 = (_QWORD *)(((unint64_t)v687 + v973) & 0xFFFFFFFFFFFFFFF8);
                        v691 = (_QWORD *)(((unint64_t)v688 + v973) & 0xFFFFFFFFFFFFFFF8);
                        *v690 = *v691;
                        v692 = ((unint64_t)v690 + 15) & 0xFFFFFFFFFFFFFFF8;
                        v693 = ((unint64_t)v691 + 15) & 0xFFFFFFFFFFFFFFF8;
                        v694 = *(_QWORD *)v693;
                        *(_BYTE *)(v692 + 8) = *(_BYTE *)(v693 + 8);
                        *(_QWORD *)v692 = v694;
                        v695 = (_QWORD *)(((unint64_t)v690 + 31) & 0xFFFFFFFFFFFFF8);
                        v696 = (_QWORD *)(((unint64_t)v691 + 31) & 0xFFFFFFFFFFFFF8);
                        *v695 = *v696;
                        v697 = ((unint64_t)v695 + 15) & 0xFFFFFFFFFFFFFFF8;
                        v698 = (uint64_t *)(((unint64_t)v696 + 15) & 0xFFFFFFFFFFFFFFF8);
                        v699 = v698[1];
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        if ((v699 & 0x3000000000000000) != 0)
                        {
                          *(_OWORD *)v697 = *(_OWORD *)v698;
                        }
                        else
                        {
                          v700 = *v698;
                          sub_23AAAE668(*v698, v699);
                          *(_QWORD *)v697 = v700;
                          *(_QWORD *)(v697 + 8) = v699;
                        }
                        v701 = (v697 + 19) & 0xFFFFFFFFFFFFFFF8;
                        v702 = ((unint64_t)v698 + 19) & 0xFFFFFFFFFFFFFFF8;
                        v703 = *(_QWORD *)v702;
                        *(_BYTE *)(v701 + 8) = *(_BYTE *)(v702 + 8);
                        *(_QWORD *)v701 = v703;
                        *(_BYTE *)(v701 + 9) = *(_BYTE *)(v702 + 9);
                        v704 = (v701 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                        v705 = (v702 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                        v706 = *(_DWORD *)v705;
                        *(_BYTE *)(v704 + 4) = *(_BYTE *)(v705 + 4);
                        *(_DWORD *)v704 = v706;
                        v707 = (_QWORD *)((v701 + 25) & 0xFFFFFFFFFFFFFFF8);
                        v708 = (_QWORD *)((v702 + 25) & 0xFFFFFFFFFFFFFFF8);
                        *v707 = *v708;
                        v707[1] = v708[1];
                        v709 = v1050 + v1033;
                        v710 = v670 + v1033;
                        v711 = *(_QWORD *)(v670 + v1033 + 16);
                        if (v711 >= 0xFFFFFFFF)
                          LODWORD(v711) = -1;
                        v712 = v711 - 1;
                        swift_bridgeObjectRetain();
                        if (v712 < 0)
                        {
                          *(_QWORD *)v709 = *(_QWORD *)v710;
                          *(_BYTE *)(v709 + 8) = *(_BYTE *)(v710 + 8);
                          *(_BYTE *)(v709 + 9) = *(_BYTE *)(v710 + 9);
                          v725 = *(void **)(v710 + 16);
                          v726 = v725;
                          *(_QWORD *)(v709 + 16) = v725;
                          v727 = *(void **)(v710 + 24);
                          v728 = v727;
                          *(_QWORD *)(v709 + 24) = v727;
                          *(_BYTE *)(v709 + 32) = *(_BYTE *)(v710 + 32);
                          *(_BYTE *)(v709 + 33) = *(_BYTE *)(v710 + 33);
                          *(_BYTE *)(v709 + 34) = *(_BYTE *)(v710 + 34);
                          *(_QWORD *)(v709 + 40) = *(_QWORD *)(v710 + 40);
                          *(_QWORD *)(v709 + 48) = *(_QWORD *)(v710 + 48);
                          *(_QWORD *)(v709 + 56) = *(_QWORD *)(v710 + 56);
                          *(_QWORD *)(v709 + 64) = *(_QWORD *)(v710 + 64);
                          *(_BYTE *)(v709 + 72) = *(_BYTE *)(v710 + 72);
                          *(_QWORD *)(v709 + 80) = *(_QWORD *)(v710 + 80);
                          *(_QWORD *)(v709 + 88) = *(_QWORD *)(v710 + 88);
                          v1051 = *(void **)(v710 + 96);
                          *(_QWORD *)(v709 + 96) = v1051;
                          *(_BYTE *)(v709 + 104) = *(_BYTE *)(v710 + 104);
                          *(_BYTE *)(v709 + 105) = *(_BYTE *)(v710 + 105);
                          *(_QWORD *)(v709 + 112) = *(_QWORD *)(v710 + 112);
                          *(_QWORD *)(v709 + 120) = *(_QWORD *)(v710 + 120);
                          *(_QWORD *)(v709 + 128) = *(_QWORD *)(v710 + 128);
                          *(_QWORD *)(v709 + 136) = *(_QWORD *)(v710 + 136);
                          *(_QWORD *)(v709 + 144) = *(_QWORD *)(v710 + 144);
                          *(_QWORD *)(v709 + 152) = *(_QWORD *)(v710 + 152);
                          *(_QWORD *)(v709 + 160) = *(_QWORD *)(v710 + 160);
                          *(_QWORD *)(v709 + 168) = *(_QWORD *)(v710 + 168);
                          *(_BYTE *)(v709 + 176) = *(_BYTE *)(v710 + 176);
                          *(_QWORD *)(v709 + 184) = *(_QWORD *)(v710 + 184);
                          v729 = *(_QWORD *)(v710 + 192);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          v730 = v1051;
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          if (v729)
                          {
                            *(_QWORD *)(v709 + 192) = v729;
                            *(_QWORD *)(v709 + 200) = *(_QWORD *)(v710 + 200);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                          }
                          else
                          {
                            *(_OWORD *)(v709 + 192) = *(_OWORD *)(v710 + 192);
                          }
                          v3 = v1022;
                          v226 = v990;
                          v227 = v971;
                          v225 = (void *)((v993 + v1022) & v991);
                          *(_QWORD *)(v709 + 208) = *(_QWORD *)(v710 + 208);
                          *(_QWORD *)(v709 + 216) = *(_QWORD *)(v710 + 216);
                          *(_QWORD *)(v709 + 224) = *(_QWORD *)(v710 + 224);
                          *(_QWORD *)(v709 + 232) = *(_QWORD *)(v710 + 232);
                          *(_QWORD *)(v709 + 240) = *(_QWORD *)(v710 + 240);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                        }
                        else
                        {
                          v713 = *(_OWORD *)v710;
                          v714 = *(_OWORD *)(v710 + 16);
                          v715 = *(_OWORD *)(v710 + 48);
                          *(_OWORD *)(v709 + 32) = *(_OWORD *)(v710 + 32);
                          *(_OWORD *)(v709 + 48) = v715;
                          *(_OWORD *)v709 = v713;
                          *(_OWORD *)(v709 + 16) = v714;
                          v716 = *(_OWORD *)(v710 + 64);
                          v717 = *(_OWORD *)(v710 + 80);
                          v718 = *(_OWORD *)(v710 + 112);
                          *(_OWORD *)(v709 + 96) = *(_OWORD *)(v710 + 96);
                          *(_OWORD *)(v709 + 112) = v718;
                          *(_OWORD *)(v709 + 64) = v716;
                          *(_OWORD *)(v709 + 80) = v717;
                          v719 = *(_OWORD *)(v710 + 128);
                          v720 = *(_OWORD *)(v710 + 144);
                          v721 = *(_OWORD *)(v710 + 176);
                          *(_OWORD *)(v709 + 160) = *(_OWORD *)(v710 + 160);
                          *(_OWORD *)(v709 + 176) = v721;
                          *(_OWORD *)(v709 + 128) = v719;
                          *(_OWORD *)(v709 + 144) = v720;
                          v722 = *(_OWORD *)(v710 + 192);
                          v723 = *(_OWORD *)(v710 + 208);
                          v724 = *(_OWORD *)(v710 + 224);
                          *(_QWORD *)(v709 + 240) = *(_QWORD *)(v710 + 240);
                          *(_OWORD *)(v709 + 208) = v723;
                          *(_OWORD *)(v709 + 224) = v724;
                          *(_OWORD *)(v709 + 192) = v722;
                          v226 = v990;
                          v227 = v971;
                          v225 = (void *)((v993 + v1022) & v991);
                        }
                        v900 = (_OWORD *)((v709 + 255) & 0xFFFFFFFFFFFFFFF8);
                        v901 = (__int128 *)((v710 + 255) & 0xFFFFFFFFFFFFFFF8);
                        v902 = *v901;
                        *(_OWORD *)((char *)v900 + 9) = *(__int128 *)((char *)v901 + 9);
                        *v900 = v902;
                        v903 = (v709 + 287) & 0xFFFFFFFFFFFFFFF8;
                        v904 = (v710 + 287) & 0xFFFFFFFFFFFFFFF8;
                        v905 = *(_OWORD *)v904;
                        *(_BYTE *)(v903 + 16) = *(_BYTE *)(v904 + 16);
                        *(_OWORD *)v903 = v905;
                        v906 = (_QWORD *)((v709 + 311) & 0xFFFFFFFFFFFFF8);
                        v907 = (v710 + 311) & 0xFFFFFFFFFFFFF8;
                        v908 = *(_QWORD *)v907;
                        v907 += 15;
                        *v906 = v908;
                        v909 = (_QWORD *)(((unint64_t)v906 + 15) & 0xFFFFFFFFFFFFFFF8);
                        v910 = *(_QWORD *)(v907 & 0xFFFFFFFFFFFFFFF8);
                        v911 = *(_QWORD *)((v907 & 0xFFFFFFFFFFFFFFF8) + 8);
                        sub_23AA7F2D4(v910, v911);
                        *v909 = v910;
                        v909[1] = v911;
                        v60 = v944;
                        if (!v966)
                          goto LABEL_313;
LABEL_629:
                        v912 = ((((v965
                                 + ((((((((((v226 + v227 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                     + 19) & 0xFFFFFFFFFFFFFFF8)
                                   + 25) & 0xFFFFFFFFFFFFFFF8)
                                 + 327) & 0xFFFFFFFFFFFFFFF8)
                               + 15) & 0xFFFFFFFFFFFFFFF8)
                             + 16;
                        v913 = (_QWORD *)(((unint64_t)v225 + v912) & 0xFFFFFFFFFFFFFFF8);
                        v914 = (_QWORD *)(((unint64_t)v1055 + v912) & 0xFFFFFFFFFFFFFFF8);
                        *v913 = *v914;
                        v915 = *(void **)(((unint64_t)v914 + 15) & 0xFFFFFFFFFFFFF8);
                        *(_QWORD *)(((unint64_t)v913 + 15) & 0xFFFFFFFFFFFFF8) = v915;
                        *(_BYTE *)(v3 + v60) = 0;
                        v916 = v915;
                        goto LABEL_392;
                      }
                      v651 = (*(uint64_t (**)(unint64_t))(v981 + 48))(((unint64_t)v638 + v980) & v978);
                    }
                    else
                    {
                      v297 = v1013 + v274;
                      if ((v951 & 0x80000000) == 0)
                      {
                        v298 = *(_QWORD *)(v297 + 8);
                        if (v298 >= 0xFFFFFFFF)
                          LODWORD(v298) = -1;
                        v224 = v298 + 1;
LABEL_311:
                        v225 = (void *)((v993 + v1022) & v991);
                        if (v224)
                        {
LABEL_312:
                          memcpy(v225, v223, __n);
                          v226 = v990;
LABEL_313:
                          v227 = v998;
                          goto LABEL_629;
                        }
                        goto LABEL_544;
                      }
                      v650 = (v989 + ((v1034 + v297) & v988)) & v67;
                      v225 = (void *)((v993 + v1022) & v991);
                      if (v966 <= 0x7FFFFFFD)
                      {
                        v639 = *(_QWORD *)(((v963 + ((v976 + v650) & v67)) & 0xFFFFFFFFFFFFF8) + 8);
                        goto LABEL_655;
                      }
                      v651 = (*(uint64_t (**)(size_t))(v1009 + 48))(v650);
                    }
                    v223 = v1055;
                    if (v651)
                      goto LABEL_312;
LABEL_544:
                    v273 = ((unint64_t)v223 + v999) & v1018;
                    v274 = (v1011 + v273) & v1021;
                    goto LABEL_545;
                  case 1:
                    v1027 = v67;
                    v228 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1032 + 16);
                    v228(v1022, v66, v65);
                    v229 = (void *)((v993 + v1022) & v991);
                    v230 = (const void *)((v993 + v66) & v991);
                    v943 = v60;
                    if (v996 == v994)
                    {
                      v231 = (*(uint64_t (**)(const void *))(v1032 + 48))(v230);
                      goto LABEL_316;
                    }
                    v275 = ((unint64_t)v230 + v999) & v1018;
                    v276 = (v1011 + v275) & v1021;
                    if (v1015 == v994)
                    {
                      if (v986 == v1015)
                      {
                        v231 = (*(uint64_t (**)(unint64_t))(v1002 + 48))((v1011 + v275) & v1021);
                        goto LABEL_316;
                      }
                      v640 = (unint64_t *)((v1007 + v276) & 0xFFFFFFFFFFFFFFF8);
                      if (v961 <= 0x7FFFFFFE)
                      {
                        v641 = *v640;
                        goto LABEL_660;
                      }
                      v231 = (*(uint64_t (**)(unint64_t))(v981 + 48))(((unint64_t)v640 + v980) & v978);
                    }
                    else
                    {
                      v299 = v1013 + v276;
                      if ((v951 & 0x80000000) == 0)
                      {
                        v300 = *(_QWORD *)(v299 + 8);
                        if (v300 >= 0xFFFFFFFF)
                          LODWORD(v300) = -1;
                        if ((_DWORD)v300 != -1)
                          goto LABEL_317;
LABEL_408:
                        v275 = ((unint64_t)v230 + v999) & v1018;
                        v276 = (v1011 + v275) & v1021;
                        goto LABEL_409;
                      }
                      v652 = (v989 + ((v1034 + v299) & v988)) & v1027;
                      if (v966 <= 0x7FFFFFFD)
                      {
                        v641 = *(_QWORD *)(((v963 + ((v976 + v652) & v1027)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_660:
                        if (v641 >= 0xFFFFFFFF)
                          LODWORD(v641) = -1;
                        if ((v641 + 1) >= 2)
                          goto LABEL_317;
LABEL_409:
                        v228((uint64_t)v229, (uint64_t)v230, v1047);
                        v228(((unint64_t)v229 + v999) & v1018, v275, v1047);
                        v301 = (v1011 + (((unint64_t)v229 + v999) & v1018)) & v1021;
                        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1002 + 16))(v301, v276, v1003);
                        v302 = (_QWORD *)((v1007 + v301) & 0xFFFFFFFFFFFFFFF8);
                        v303 = (_QWORD *)((v1007 + v276) & 0xFFFFFFFFFFFFFFF8);
                        *v302 = *v303;
                        v304 = ((unint64_t)v302 + v980) & v978;
                        v305 = ((unint64_t)v303 + v980) & v978;
                        v306 = *(void (**)(unint64_t, unint64_t, uint64_t))(v981 + 16);
                        swift_bridgeObjectRetain();
                        v306(v304, v305, v982);
                        v307 = (_QWORD *)((v967 + v304) & 0xFFFFFFFFFFFFF8);
                        v308 = (_QWORD *)((v967 + v305) & 0xFFFFFFFFFFFFF8);
                        *v307 = *v308;
                        v309 = (_QWORD *)(((unint64_t)v307 + 15) & 0xFFFFFFFFFFFFFFF8);
                        v310 = (_QWORD *)(((unint64_t)v308 + 15) & 0xFFFFFFFFFFFFFFF8);
                        *v309 = *v310;
                        v309[1] = v310[1];
                        v311 = (_QWORD *)(v1013 + v301);
                        *v311 = *(_QWORD *)(v1013 + v276);
                        v311[1] = *(_QWORD *)(v1013 + v276 + 8);
                        v312 = (v1034 + v1013 + v301) & v988;
                        v313 = (v1034 + v1013 + v276) & v988;
                        *(_BYTE *)v312 = *(_BYTE *)v313;
                        v314 = v312 | 4;
                        v315 = *(_DWORD *)(v313 | 4);
                        *(_BYTE *)(v314 + 4) = *(_BYTE *)((v313 | 4) + 4);
                        *(_DWORD *)v314 = v315;
                        *(_WORD *)(v312 + 10) = *(_WORD *)(v313 + 0xA);
                        v1048 = v312;
                        v316 = (v989 + v312) & v1027;
                        v317 = (v989 + v313) & v1027;
                        v318 = *(void (**)(size_t, size_t, uint64_t))(v1009 + 16);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        v318(v316, v317, v977);
                        v319 = (v976 + v316) & v1027;
                        v320 = (v976 + v317) & v1027;
                        v318(v319, v320, v977);
                        v321 = (_BYTE *)(v319 + v971);
                        *v321 = *(_BYTE *)(v320 + v971);
                        v321[1] = *(_BYTE *)(v320 + v971 + 1);
                        v321[2] = *(_BYTE *)(v320 + v971 + 2);
                        v321[3] = *(_BYTE *)(v320 + v971 + 3);
                        v321[4] = *(_BYTE *)(v320 + v971 + 4);
                        v322 = (v319 + v971 + 12) & 0xFFFFFFFFFFFFFFF8;
                        v323 = (v320 + v971 + 12) & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v322 = *(_QWORD *)v323;
                        *(_QWORD *)(v322 + 8) = *(_QWORD *)(v323 + 8);
                        *(_BYTE *)(v322 + 16) = *(_BYTE *)(v323 + 16);
                        *(_BYTE *)(v322 + 17) = *(_BYTE *)(v323 + 17);
                        *(_BYTE *)(v322 + 18) = *(_BYTE *)(v323 + 18);
                        *(_BYTE *)(v322 + 19) = *(_BYTE *)(v323 + 19);
                        v324 = (v322 + 27) & 0xFFFFFFFFFFFFFFF8;
                        v325 = (v323 + 27) & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v324 = *(_QWORD *)v325;
                        *(_BYTE *)(v324 + 8) = *(_BYTE *)(v325 + 8);
                        *(_BYTE *)(v324 + 9) = *(_BYTE *)(v325 + 9);
                        *(_BYTE *)(v324 + 10) = *(_BYTE *)(v325 + 10);
                        *(_BYTE *)(v324 + 11) = *(_BYTE *)(v325 + 11);
                        *(_BYTE *)(v324 + 12) = *(_BYTE *)(v325 + 12);
                        v326 = (_QWORD *)((v322 + 47) & 0xFFFFFFFFFFFFF8);
                        v327 = (_QWORD *)((v323 + 47) & 0xFFFFFFFFFFFFF8);
                        *v326 = *v327;
                        v328 = ((unint64_t)v326 + 15) & 0xFFFFFFFFFFFFFFF8;
                        v329 = ((unint64_t)v327 + 15) & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v328 = *(_QWORD *)v329;
                        *(_BYTE *)(v328 + 8) = *(_BYTE *)(v329 + 8);
                        *(_BYTE *)(v328 + 9) = *(_BYTE *)(v329 + 9);
                        v330 = (void *)((v972 + v328) & v1027);
                        v331 = (const void *)((v972 + v329) & v1027);
                        v332 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1009 + 48);
                        swift_bridgeObjectRetain();
                        if (v332(v331, 1, v977))
                        {
                          memcpy(v330, v331, v998);
                        }
                        else
                        {
                          v318((size_t)v330, (size_t)v331, v977);
                          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1009 + 56))(v330, 0, 1, v977);
                        }
                        v462 = (_QWORD *)(((unint64_t)v330 + v973) & 0xFFFFFFFFFFFFFFF8);
                        v463 = (_QWORD *)(((unint64_t)v331 + v973) & 0xFFFFFFFFFFFFFFF8);
                        *v462 = *v463;
                        v464 = ((unint64_t)v462 + 15) & 0xFFFFFFFFFFFFFFF8;
                        v465 = ((unint64_t)v463 + 15) & 0xFFFFFFFFFFFFFFF8;
                        v466 = *(_QWORD *)v465;
                        *(_BYTE *)(v464 + 8) = *(_BYTE *)(v465 + 8);
                        *(_QWORD *)v464 = v466;
                        v467 = (_QWORD *)(((unint64_t)v462 + 31) & 0xFFFFFFFFFFFFF8);
                        v468 = (_QWORD *)(((unint64_t)v463 + 31) & 0xFFFFFFFFFFFFF8);
                        *v467 = *v468;
                        v469 = ((unint64_t)v467 + 15) & 0xFFFFFFFFFFFFFFF8;
                        v470 = (uint64_t *)(((unint64_t)v468 + 15) & 0xFFFFFFFFFFFFFFF8);
                        v471 = v470[1];
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        v936 = v64;
                        if ((v471 & 0x3000000000000000) != 0)
                        {
                          *(_OWORD *)v469 = *(_OWORD *)v470;
                        }
                        else
                        {
                          v502 = *v470;
                          sub_23AAAE668(*v470, v471);
                          *(_QWORD *)v469 = v502;
                          *(_QWORD *)(v469 + 8) = v471;
                        }
                        v503 = (v469 + 19) & 0xFFFFFFFFFFFFFFF8;
                        v504 = ((unint64_t)v470 + 19) & 0xFFFFFFFFFFFFFFF8;
                        v505 = *(_QWORD *)v504;
                        *(_BYTE *)(v503 + 8) = *(_BYTE *)(v504 + 8);
                        *(_QWORD *)v503 = v505;
                        *(_BYTE *)(v503 + 9) = *(_BYTE *)(v504 + 9);
                        v506 = (v503 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                        v507 = (v504 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                        v508 = *(_DWORD *)v507;
                        *(_BYTE *)(v506 + 4) = *(_BYTE *)(v507 + 4);
                        *(_DWORD *)v506 = v508;
                        v509 = (_QWORD *)((v503 + 25) & 0xFFFFFFFFFFFFFFF8);
                        v510 = (_QWORD *)((v504 + 25) & 0xFFFFFFFFFFFFFFF8);
                        *v509 = *v510;
                        v509[1] = v510[1];
                        v511 = v1048 + v1033;
                        v512 = v313 + v1033;
                        v513 = *(_QWORD *)(v313 + v1033 + 16);
                        if (v513 >= 0xFFFFFFFF)
                          LODWORD(v513) = -1;
                        v514 = v513 - 1;
                        swift_bridgeObjectRetain();
                        if (v514 < 0)
                        {
                          *(_QWORD *)v511 = *(_QWORD *)v512;
                          *(_BYTE *)(v511 + 8) = *(_BYTE *)(v512 + 8);
                          *(_BYTE *)(v511 + 9) = *(_BYTE *)(v512 + 9);
                          v602 = *(void **)(v512 + 16);
                          v603 = v602;
                          *(_QWORD *)(v511 + 16) = v602;
                          v604 = *(void **)(v512 + 24);
                          v605 = v604;
                          *(_QWORD *)(v511 + 24) = v604;
                          *(_BYTE *)(v511 + 32) = *(_BYTE *)(v512 + 32);
                          *(_BYTE *)(v511 + 33) = *(_BYTE *)(v512 + 33);
                          *(_BYTE *)(v511 + 34) = *(_BYTE *)(v512 + 34);
                          *(_QWORD *)(v511 + 40) = *(_QWORD *)(v512 + 40);
                          *(_QWORD *)(v511 + 48) = *(_QWORD *)(v512 + 48);
                          *(_QWORD *)(v511 + 56) = *(_QWORD *)(v512 + 56);
                          *(_QWORD *)(v511 + 64) = *(_QWORD *)(v512 + 64);
                          *(_BYTE *)(v511 + 72) = *(_BYTE *)(v512 + 72);
                          *(_QWORD *)(v511 + 80) = *(_QWORD *)(v512 + 80);
                          *(_QWORD *)(v511 + 88) = *(_QWORD *)(v512 + 88);
                          v1049 = *(void **)(v512 + 96);
                          *(_QWORD *)(v511 + 96) = v1049;
                          *(_BYTE *)(v511 + 104) = *(_BYTE *)(v512 + 104);
                          *(_BYTE *)(v511 + 105) = *(_BYTE *)(v512 + 105);
                          *(_QWORD *)(v511 + 112) = *(_QWORD *)(v512 + 112);
                          *(_QWORD *)(v511 + 120) = *(_QWORD *)(v512 + 120);
                          *(_QWORD *)(v511 + 128) = *(_QWORD *)(v512 + 128);
                          *(_QWORD *)(v511 + 136) = *(_QWORD *)(v512 + 136);
                          *(_QWORD *)(v511 + 144) = *(_QWORD *)(v512 + 144);
                          *(_QWORD *)(v511 + 152) = *(_QWORD *)(v512 + 152);
                          *(_QWORD *)(v511 + 160) = *(_QWORD *)(v512 + 160);
                          *(_QWORD *)(v511 + 168) = *(_QWORD *)(v512 + 168);
                          *(_BYTE *)(v511 + 176) = *(_BYTE *)(v512 + 176);
                          *(_QWORD *)(v511 + 184) = *(_QWORD *)(v512 + 184);
                          v606 = *(_QWORD *)(v512 + 192);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          v607 = v1049;
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          if (v606)
                          {
                            *(_QWORD *)(v511 + 192) = v606;
                            *(_QWORD *)(v511 + 200) = *(_QWORD *)(v512 + 200);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                          }
                          else
                          {
                            *(_OWORD *)(v511 + 192) = *(_OWORD *)(v512 + 192);
                          }
                          v3 = v1022;
                          v232 = v990;
                          v234 = v971;
                          v233 = v1040;
                          *(_QWORD *)(v511 + 208) = *(_QWORD *)(v512 + 208);
                          *(_QWORD *)(v511 + 216) = *(_QWORD *)(v512 + 216);
                          *(_QWORD *)(v511 + 224) = *(_QWORD *)(v512 + 224);
                          *(_QWORD *)(v511 + 232) = *(_QWORD *)(v512 + 232);
                          *(_QWORD *)(v511 + 240) = *(_QWORD *)(v512 + 240);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                        }
                        else
                        {
                          v515 = *(_OWORD *)v512;
                          v516 = *(_OWORD *)(v512 + 16);
                          v517 = *(_OWORD *)(v512 + 48);
                          *(_OWORD *)(v511 + 32) = *(_OWORD *)(v512 + 32);
                          *(_OWORD *)(v511 + 48) = v517;
                          *(_OWORD *)v511 = v515;
                          *(_OWORD *)(v511 + 16) = v516;
                          v518 = *(_OWORD *)(v512 + 64);
                          v519 = *(_OWORD *)(v512 + 80);
                          v520 = *(_OWORD *)(v512 + 112);
                          *(_OWORD *)(v511 + 96) = *(_OWORD *)(v512 + 96);
                          *(_OWORD *)(v511 + 112) = v520;
                          *(_OWORD *)(v511 + 64) = v518;
                          *(_OWORD *)(v511 + 80) = v519;
                          v521 = *(_OWORD *)(v512 + 128);
                          v522 = *(_OWORD *)(v512 + 144);
                          v523 = *(_OWORD *)(v512 + 176);
                          *(_OWORD *)(v511 + 160) = *(_OWORD *)(v512 + 160);
                          *(_OWORD *)(v511 + 176) = v523;
                          *(_OWORD *)(v511 + 128) = v521;
                          *(_OWORD *)(v511 + 144) = v522;
                          v524 = *(_OWORD *)(v512 + 192);
                          v525 = *(_OWORD *)(v512 + 208);
                          v526 = *(_OWORD *)(v512 + 224);
                          *(_QWORD *)(v511 + 240) = *(_QWORD *)(v512 + 240);
                          *(_OWORD *)(v511 + 208) = v525;
                          *(_OWORD *)(v511 + 224) = v526;
                          *(_OWORD *)(v511 + 192) = v524;
                          v232 = v990;
                          v234 = v971;
                          v233 = v1040;
                        }
                        v804 = (_OWORD *)((v511 + 255) & 0xFFFFFFFFFFFFFFF8);
                        v805 = (__int128 *)((v512 + 255) & 0xFFFFFFFFFFFFFFF8);
                        v806 = *v805;
                        *(_OWORD *)((char *)v804 + 9) = *(__int128 *)((char *)v805 + 9);
                        *v804 = v806;
                        v807 = (v511 + 287) & 0xFFFFFFFFFFFFFFF8;
                        v808 = (v512 + 287) & 0xFFFFFFFFFFFFFFF8;
                        v809 = *(_OWORD *)v808;
                        *(_BYTE *)(v807 + 16) = *(_BYTE *)(v808 + 16);
                        *(_OWORD *)v807 = v809;
                        v810 = (_QWORD *)((v511 + 311) & 0xFFFFFFFFFFFFF8);
                        v811 = (v512 + 311) & 0xFFFFFFFFFFFFF8;
                        v812 = *(_QWORD *)v811;
                        v811 += 15;
                        *v810 = v812;
                        v813 = (_QWORD *)(((unint64_t)v810 + 15) & 0xFFFFFFFFFFFFFFF8);
                        v814 = *(_QWORD *)(v811 & 0xFFFFFFFFFFFFFFF8);
                        v815 = *(_QWORD *)((v811 & 0xFFFFFFFFFFFFFFF8) + 8);
                        sub_23AA7F2D4(v814, v815);
                        *v813 = v814;
                        v813[1] = v815;
                        v64 = v936;
                        if (!v966)
                          goto LABEL_318;
LABEL_579:
                        v816 = ((((v965
                                 + ((((((((((v232 + v234 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                     + 19) & 0xFFFFFFFFFFFFFFF8)
                                   + 25) & 0xFFFFFFFFFFFFFFF8)
                                 + 327) & 0xFFFFFFFFFFFFFFF8)
                               + 15) & 0xFFFFFFFFFFFFFFF8)
                             + 16;
                        v817 = (void *)((((v993 + v1022) & v991) + v1054 + v816) & v1016);
                        v818 = (const void *)(((unint64_t)v230 + v1054 + v816) & v1016);
                        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1031 + 48))(v818, 1, AssociatedTypeWitness))
                        {
                          memcpy(v817, v818, v949);
                        }
                        else
                        {
                          (*(void (**)(void *, const void *, uint64_t))(v1031 + 16))(v817, v818, AssociatedTypeWitness);
                          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1031 + 56))(v817, 0, 1, AssociatedTypeWitness);
                        }
                        v819 = (char *)(((unint64_t)v817 + v969) & v1020);
                        v820 = (char *)(((unint64_t)v818 + v969) & v1020);
                        if (v987 == v1006)
                        {
                          v821 = (*(uint64_t (**)(unint64_t))(v1004 + 48))(((unint64_t)v818
                                                                                           + v969) & v1020);
                        }
                        else
                        {
                          v822 = (uint64_t *)((unint64_t)&v820[v1008] & 0xFFFFFFFFFFFFFFF8);
                          if (v962 <= 0x7FFFFFFE)
                          {
                            v823 = *v822;
                            if ((unint64_t)*v822 >= 0xFFFFFFFF)
                              LODWORD(v823) = -1;
                            if ((v823 + 1) >= 2)
                              goto LABEL_591;
                            goto LABEL_593;
                          }
                          v821 = (*(uint64_t (**)(unint64_t))(v984 + 48))(((unint64_t)v822 + v983) & v979);
                        }
                        if (v821)
                        {
LABEL_591:
                          memcpy(v819, v820, v233);
LABEL_594:
                          *(_QWORD *)&v819[v233] = *(_QWORD *)&v820[v233];
                          v832 = (_QWORD *)((unint64_t)&v819[v233 + 15] & 0xFFFFFFFFFFFFF8);
                          v833 = (_QWORD *)((unint64_t)&v820[v233 + 15] & 0xFFFFFFFFFFFFFFF8);
                          *v832 = *v833;
                          v834 = *(void **)(((unint64_t)v833 + 15) & 0xFFFFFFFFFFFFF8);
                          *(_QWORD *)(((unint64_t)v832 + 15) & 0xFFFFFFFFFFFFF8) = v834;
                          v270 = 1;
                          *(_BYTE *)(v3 + v943) = 1;
                          v835 = v834;
                          goto LABEL_624;
                        }
                        v822 = (uint64_t *)((unint64_t)&v820[v1008] & 0xFFFFFFFFFFFFFFF8);
LABEL_593:
                        (*(void (**)(char *, char *, uint64_t))(v1004 + 16))(v819, v820, v1005);
                        v824 = (_QWORD *)((unint64_t)&v819[v1008] & 0xFFFFFFFFFFFFFFF8);
                        *v824 = *v822;
                        v825 = ((unint64_t)v824 + v983) & v979;
                        v826 = ((unint64_t)v822 + v983) & v979;
                        v827 = *(void (**)(unint64_t, unint64_t, uint64_t))(v984 + 16);
                        swift_bridgeObjectRetain();
                        v827(v825, v826, v985);
                        v828 = (_QWORD *)((v968 + v825) & 0xFFFFFFFFFFFFF8);
                        v829 = (_QWORD *)((v968 + v826) & 0xFFFFFFFFFFFFF8);
                        *v828 = *v829;
                        v830 = (_QWORD *)(((unint64_t)v828 + 15) & 0xFFFFFFFFFFFFFFF8);
                        v831 = (_QWORD *)(((unint64_t)v829 + 15) & 0xFFFFFFFFFFFFFFF8);
                        *v830 = *v831;
                        v830[1] = v831[1];
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        goto LABEL_594;
                      }
                      v231 = (*(uint64_t (**)(size_t))(v1009 + 48))(v652);
                    }
LABEL_316:
                    if (v231)
                    {
LABEL_317:
                      memcpy(v229, v230, __n);
                      v232 = v990;
                      v233 = v1040;
LABEL_318:
                      v234 = v998;
                      goto LABEL_579;
                    }
                    goto LABEL_408;
                  case 2:
                    v235 = v65;
                    v236 = v60;
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1032 + 16))(v1022, v66, v235);
                    v237 = (void *)((v956 + v1022) & v1016);
                    v238 = (const void *)((v956 + v66) & v1016);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1031 + 48))(v238, 1, AssociatedTypeWitness))
                    {
                      memcpy(v237, v238, v949);
                    }
                    else
                    {
                      (*(void (**)(void *, const void *, uint64_t))(v1031 + 16))(v237, v238, AssociatedTypeWitness);
                      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1031 + 56))(v237, 0, 1, AssociatedTypeWitness);
                    }
                    v285 = (char *)(((unint64_t)v237 + v969) & v1020);
                    v286 = (_BYTE *)(((unint64_t)v238 + v969) & v1020);
                    if (v987 == v1006)
                    {
                      v287 = (*(uint64_t (**)(_BYTE *))(v1004 + 48))(v286);
                    }
                    else
                    {
                      v288 = (uint64_t *)((unint64_t)&v286[v1008] & 0xFFFFFFFFFFFFFFF8);
                      if (v962 <= 0x7FFFFFFE)
                      {
                        v289 = *v288;
                        if ((unint64_t)*v288 >= 0xFFFFFFFF)
                          LODWORD(v289) = -1;
                        if ((v289 + 1) >= 2)
                          goto LABEL_438;
LABEL_440:
                        (*(void (**)(char *, _BYTE *, uint64_t))(v1004 + 16))(v285, v286, v1005);
                        v440 = (_QWORD *)((unint64_t)&v285[v1008] & 0xFFFFFFFFFFFFFFF8);
                        *v440 = *v288;
                        v441 = ((unint64_t)v440 + v983) & v979;
                        v442 = ((unint64_t)v288 + v983) & v979;
                        v443 = *(void (**)(unint64_t, unint64_t, uint64_t))(v984 + 16);
                        swift_bridgeObjectRetain();
                        v443(v441, v442, v985);
                        v444 = (_QWORD *)((v968 + v441) & 0xFFFFFFFFFFFFF8);
                        v445 = (_QWORD *)((v968 + v442) & 0xFFFFFFFFFFFFF8);
                        *v444 = *v445;
                        v446 = (_QWORD *)(((unint64_t)v444 + 15) & 0xFFFFFFFFFFFFFFF8);
                        v447 = (_QWORD *)(((unint64_t)v445 + 15) & 0xFFFFFFFFFFFFFFF8);
                        *v446 = *v447;
                        v446[1] = v447[1];
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
LABEL_441:
                        v448 = &v285[v1040];
                        *v448 = v286[v1040];
                        v449 = *(void **)&v286[v1040 + 8];
                        *((_QWORD *)v448 + 1) = v449;
                        *(_BYTE *)(v1022 + v236) = 2;
                        v450 = v449;
                        goto LABEL_392;
                      }
                      v287 = (*(uint64_t (**)(unint64_t))(v984 + 48))(((unint64_t)v288 + v983) & v979);
                    }
                    if (v287)
                    {
LABEL_438:
                      memcpy(v285, v286, v1040);
                      goto LABEL_441;
                    }
                    v288 = (uint64_t *)((unint64_t)&v286[v1008] & 0xFFFFFFFFFFFFFFF8);
                    goto LABEL_440;
                  case 3:
                    v239 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1032 + 16);
                    v239(v1022, v66, v65);
                    v240 = (const void *)((v993 + v66) & v991);
                    v1056 = v240;
                    if (v996 == v994)
                    {
                      v241 = (*(uint64_t (**)(unint64_t))(v1032 + 48))((v993 + v66) & v991);
LABEL_323:
                      v240 = (const void *)((v993 + v66) & v991);
                      goto LABEL_324;
                    }
                    v277 = ((unint64_t)v240 + v999) & v1018;
                    v278 = (v1011 + v277) & v1021;
                    if (v1015 == v994)
                    {
                      if (v986 == v1015)
                      {
                        v241 = (*(uint64_t (**)(unint64_t))(v1002 + 48))((v1011 + v277) & v1021);
                        goto LABEL_323;
                      }
                      v642 = (unint64_t *)((v1007 + v278) & 0xFFFFFFFFFFFFFFF8);
                      v242 = (void *)((v993 + v1022) & v991);
                      if (v961 <= 0x7FFFFFFE)
                      {
                        v643 = *v642;
                        goto LABEL_665;
                      }
                      v654 = (*(uint64_t (**)(unint64_t))(v981 + 48))(((unint64_t)v642 + v980) & v978);
                    }
                    else
                    {
                      v333 = v1013 + v278;
                      if ((v951 & 0x80000000) == 0)
                      {
                        v334 = *(_QWORD *)(v333 + 8);
                        if (v334 >= 0xFFFFFFFF)
                          LODWORD(v334) = -1;
                        v241 = v334 + 1;
LABEL_324:
                        v242 = (void *)((v993 + v1022) & v991);
                        if (v241)
                        {
LABEL_325:
                          memcpy(v242, v240, __n);
                          v243 = v990;
                          goto LABEL_326;
                        }
                        goto LABEL_560;
                      }
                      v653 = (v989 + ((v1034 + v333) & v988)) & v67;
                      v242 = (void *)((v993 + v1022) & v991);
                      if (v966 <= 0x7FFFFFFD)
                      {
                        v643 = *(_QWORD *)(((v963 + ((v976 + v653) & v67)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_665:
                        if (v643 >= 0xFFFFFFFF)
                          LODWORD(v643) = -1;
                        if ((v643 + 1) >= 2)
                          goto LABEL_325;
LABEL_561:
                        v945 = v60;
                        v239((uint64_t)v242, (uint64_t)v240, v1047);
                        v239(((unint64_t)v242 + v999) & v1018, v277, v1047);
                        v731 = (v1011 + (((unint64_t)v242 + v999) & v1018)) & v1021;
                        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1002 + 16))(v731, v278, v1003);
                        v732 = (_QWORD *)((v1007 + v731) & 0xFFFFFFFFFFFFFFF8);
                        v733 = (_QWORD *)((v1007 + v278) & 0xFFFFFFFFFFFFFFF8);
                        *v732 = *v733;
                        v734 = ((unint64_t)v732 + v980) & v978;
                        v735 = ((unint64_t)v733 + v980) & v978;
                        v736 = *(void (**)(unint64_t, unint64_t, uint64_t))(v981 + 16);
                        swift_bridgeObjectRetain();
                        v736(v734, v735, v982);
                        v737 = (_QWORD *)((v967 + v734) & 0xFFFFFFFFFFFFF8);
                        v738 = (_QWORD *)((v967 + v735) & 0xFFFFFFFFFFFFF8);
                        *v737 = *v738;
                        v739 = (_QWORD *)(((unint64_t)v737 + 15) & 0xFFFFFFFFFFFFFFF8);
                        v740 = (_QWORD *)(((unint64_t)v738 + 15) & 0xFFFFFFFFFFFFFFF8);
                        *v739 = *v740;
                        v739[1] = v740[1];
                        v741 = (_QWORD *)(v1013 + v731);
                        *v741 = *(_QWORD *)(v1013 + v278);
                        v741[1] = *(_QWORD *)(v1013 + v278 + 8);
                        v742 = (v1034 + v1013 + v731) & v988;
                        v743 = (v1034 + v1013 + v278) & v988;
                        *(_BYTE *)v742 = *(_BYTE *)v743;
                        v744 = v742 | 4;
                        v745 = *(_DWORD *)(v743 | 4);
                        *(_BYTE *)(v744 + 4) = *(_BYTE *)((v743 | 4) + 4);
                        *(_DWORD *)v744 = v745;
                        *(_WORD *)(v742 + 10) = *(_WORD *)(v743 + 0xA);
                        v1052 = v742;
                        v746 = (v989 + v742) & v67;
                        v747 = (v989 + v743) & v67;
                        v748 = *(void (**)(size_t, size_t, uint64_t))(v1009 + 16);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        v748(v746, v747, v977);
                        v749 = (v976 + v746) & v67;
                        v750 = (v976 + v747) & v67;
                        v748(v749, v750, v977);
                        v751 = (_BYTE *)(v749 + v971);
                        *v751 = *(_BYTE *)(v750 + v971);
                        v751[1] = *(_BYTE *)(v750 + v971 + 1);
                        v751[2] = *(_BYTE *)(v750 + v971 + 2);
                        v751[3] = *(_BYTE *)(v750 + v971 + 3);
                        v751[4] = *(_BYTE *)(v750 + v971 + 4);
                        v752 = (v749 + v971 + 12) & 0xFFFFFFFFFFFFFFF8;
                        v753 = (v750 + v971 + 12) & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v752 = *(_QWORD *)v753;
                        *(_QWORD *)(v752 + 8) = *(_QWORD *)(v753 + 8);
                        *(_BYTE *)(v752 + 16) = *(_BYTE *)(v753 + 16);
                        *(_BYTE *)(v752 + 17) = *(_BYTE *)(v753 + 17);
                        *(_BYTE *)(v752 + 18) = *(_BYTE *)(v753 + 18);
                        *(_BYTE *)(v752 + 19) = *(_BYTE *)(v753 + 19);
                        v754 = (v752 + 27) & 0xFFFFFFFFFFFFFFF8;
                        v755 = (v753 + 27) & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v754 = *(_QWORD *)v755;
                        *(_BYTE *)(v754 + 8) = *(_BYTE *)(v755 + 8);
                        *(_BYTE *)(v754 + 9) = *(_BYTE *)(v755 + 9);
                        *(_BYTE *)(v754 + 10) = *(_BYTE *)(v755 + 10);
                        *(_BYTE *)(v754 + 11) = *(_BYTE *)(v755 + 11);
                        *(_BYTE *)(v754 + 12) = *(_BYTE *)(v755 + 12);
                        v756 = (_QWORD *)((v752 + 47) & 0xFFFFFFFFFFFFF8);
                        v757 = (_QWORD *)((v753 + 47) & 0xFFFFFFFFFFFFF8);
                        *v756 = *v757;
                        v758 = ((unint64_t)v756 + 15) & 0xFFFFFFFFFFFFFFF8;
                        v759 = ((unint64_t)v757 + 15) & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v758 = *(_QWORD *)v759;
                        *(_BYTE *)(v758 + 8) = *(_BYTE *)(v759 + 8);
                        *(_BYTE *)(v758 + 9) = *(_BYTE *)(v759 + 9);
                        v760 = (void *)((v972 + v758) & v67);
                        v761 = (const void *)((v972 + v759) & v67);
                        v762 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1009 + 48);
                        swift_bridgeObjectRetain();
                        if (v762(v761, 1, v977))
                        {
                          memcpy(v760, v761, v998);
                        }
                        else
                        {
                          v748((size_t)v760, (size_t)v761, v977);
                          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1009 + 56))(v760, 0, 1, v977);
                        }
                        v763 = (_QWORD *)(((unint64_t)v760 + v973) & 0xFFFFFFFFFFFFFFF8);
                        v764 = (_QWORD *)(((unint64_t)v761 + v973) & 0xFFFFFFFFFFFFFFF8);
                        *v763 = *v764;
                        v765 = ((unint64_t)v763 + 15) & 0xFFFFFFFFFFFFFFF8;
                        v766 = ((unint64_t)v764 + 15) & 0xFFFFFFFFFFFFFFF8;
                        v767 = *(_QWORD *)v766;
                        *(_BYTE *)(v765 + 8) = *(_BYTE *)(v766 + 8);
                        *(_QWORD *)v765 = v767;
                        v768 = (_QWORD *)(((unint64_t)v763 + 31) & 0xFFFFFFFFFFFFF8);
                        v769 = (_QWORD *)(((unint64_t)v764 + 31) & 0xFFFFFFFFFFFFF8);
                        *v768 = *v769;
                        v770 = ((unint64_t)v768 + 15) & 0xFFFFFFFFFFFFFFF8;
                        v771 = (uint64_t *)(((unint64_t)v769 + 15) & 0xFFFFFFFFFFFFFFF8);
                        v772 = v771[1];
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        if ((v772 & 0x3000000000000000) != 0)
                        {
                          *(_OWORD *)v770 = *(_OWORD *)v771;
                        }
                        else
                        {
                          v773 = *v771;
                          sub_23AAAE668(*v771, v772);
                          *(_QWORD *)v770 = v773;
                          *(_QWORD *)(v770 + 8) = v772;
                        }
                        v774 = (v770 + 19) & 0xFFFFFFFFFFFFFFF8;
                        v775 = ((unint64_t)v771 + 19) & 0xFFFFFFFFFFFFFFF8;
                        v776 = *(_QWORD *)v775;
                        *(_BYTE *)(v774 + 8) = *(_BYTE *)(v775 + 8);
                        *(_QWORD *)v774 = v776;
                        *(_BYTE *)(v774 + 9) = *(_BYTE *)(v775 + 9);
                        v777 = (v774 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                        v778 = (v775 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                        v779 = *(_DWORD *)v778;
                        *(_BYTE *)(v777 + 4) = *(_BYTE *)(v778 + 4);
                        *(_DWORD *)v777 = v779;
                        v780 = (_QWORD *)((v774 + 25) & 0xFFFFFFFFFFFFFFF8);
                        v781 = (_QWORD *)((v775 + 25) & 0xFFFFFFFFFFFFFFF8);
                        *v780 = *v781;
                        v780[1] = v781[1];
                        v782 = v1052 + v1033;
                        v783 = v743 + v1033;
                        v784 = *(_QWORD *)(v743 + v1033 + 16);
                        if (v784 >= 0xFFFFFFFF)
                          LODWORD(v784) = -1;
                        v785 = v784 - 1;
                        swift_bridgeObjectRetain();
                        if (v785 < 0)
                        {
                          *(_QWORD *)v782 = *(_QWORD *)v783;
                          *(_BYTE *)(v782 + 8) = *(_BYTE *)(v783 + 8);
                          *(_BYTE *)(v782 + 9) = *(_BYTE *)(v783 + 9);
                          v798 = *(void **)(v783 + 16);
                          v799 = v798;
                          *(_QWORD *)(v782 + 16) = v798;
                          v800 = *(void **)(v783 + 24);
                          v801 = v800;
                          *(_QWORD *)(v782 + 24) = v800;
                          *(_BYTE *)(v782 + 32) = *(_BYTE *)(v783 + 32);
                          *(_BYTE *)(v782 + 33) = *(_BYTE *)(v783 + 33);
                          *(_BYTE *)(v782 + 34) = *(_BYTE *)(v783 + 34);
                          *(_QWORD *)(v782 + 40) = *(_QWORD *)(v783 + 40);
                          *(_QWORD *)(v782 + 48) = *(_QWORD *)(v783 + 48);
                          *(_QWORD *)(v782 + 56) = *(_QWORD *)(v783 + 56);
                          *(_QWORD *)(v782 + 64) = *(_QWORD *)(v783 + 64);
                          *(_BYTE *)(v782 + 72) = *(_BYTE *)(v783 + 72);
                          *(_QWORD *)(v782 + 80) = *(_QWORD *)(v783 + 80);
                          *(_QWORD *)(v782 + 88) = *(_QWORD *)(v783 + 88);
                          v1053 = *(void **)(v783 + 96);
                          *(_QWORD *)(v782 + 96) = v1053;
                          *(_BYTE *)(v782 + 104) = *(_BYTE *)(v783 + 104);
                          *(_BYTE *)(v782 + 105) = *(_BYTE *)(v783 + 105);
                          *(_QWORD *)(v782 + 112) = *(_QWORD *)(v783 + 112);
                          *(_QWORD *)(v782 + 120) = *(_QWORD *)(v783 + 120);
                          *(_QWORD *)(v782 + 128) = *(_QWORD *)(v783 + 128);
                          *(_QWORD *)(v782 + 136) = *(_QWORD *)(v783 + 136);
                          *(_QWORD *)(v782 + 144) = *(_QWORD *)(v783 + 144);
                          *(_QWORD *)(v782 + 152) = *(_QWORD *)(v783 + 152);
                          *(_QWORD *)(v782 + 160) = *(_QWORD *)(v783 + 160);
                          *(_QWORD *)(v782 + 168) = *(_QWORD *)(v783 + 168);
                          *(_BYTE *)(v782 + 176) = *(_BYTE *)(v783 + 176);
                          *(_QWORD *)(v782 + 184) = *(_QWORD *)(v783 + 184);
                          v802 = *(_QWORD *)(v783 + 192);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          v803 = v1053;
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          if (v802)
                          {
                            *(_QWORD *)(v782 + 192) = v802;
                            *(_QWORD *)(v782 + 200) = *(_QWORD *)(v783 + 200);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                          }
                          else
                          {
                            *(_OWORD *)(v782 + 192) = *(_OWORD *)(v783 + 192);
                          }
                          v3 = v1022;
                          v243 = v990;
                          v244 = v971;
                          v242 = (void *)((v993 + v1022) & v991);
                          *(_QWORD *)(v782 + 208) = *(_QWORD *)(v783 + 208);
                          *(_QWORD *)(v782 + 216) = *(_QWORD *)(v783 + 216);
                          *(_QWORD *)(v782 + 224) = *(_QWORD *)(v783 + 224);
                          *(_QWORD *)(v782 + 232) = *(_QWORD *)(v783 + 232);
                          *(_QWORD *)(v782 + 240) = *(_QWORD *)(v783 + 240);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                        }
                        else
                        {
                          v786 = *(_OWORD *)v783;
                          v787 = *(_OWORD *)(v783 + 16);
                          v788 = *(_OWORD *)(v783 + 48);
                          *(_OWORD *)(v782 + 32) = *(_OWORD *)(v783 + 32);
                          *(_OWORD *)(v782 + 48) = v788;
                          *(_OWORD *)v782 = v786;
                          *(_OWORD *)(v782 + 16) = v787;
                          v789 = *(_OWORD *)(v783 + 64);
                          v790 = *(_OWORD *)(v783 + 80);
                          v791 = *(_OWORD *)(v783 + 112);
                          *(_OWORD *)(v782 + 96) = *(_OWORD *)(v783 + 96);
                          *(_OWORD *)(v782 + 112) = v791;
                          *(_OWORD *)(v782 + 64) = v789;
                          *(_OWORD *)(v782 + 80) = v790;
                          v792 = *(_OWORD *)(v783 + 128);
                          v793 = *(_OWORD *)(v783 + 144);
                          v794 = *(_OWORD *)(v783 + 176);
                          *(_OWORD *)(v782 + 160) = *(_OWORD *)(v783 + 160);
                          *(_OWORD *)(v782 + 176) = v794;
                          *(_OWORD *)(v782 + 128) = v792;
                          *(_OWORD *)(v782 + 144) = v793;
                          v795 = *(_OWORD *)(v783 + 192);
                          v796 = *(_OWORD *)(v783 + 208);
                          v797 = *(_OWORD *)(v783 + 224);
                          *(_QWORD *)(v782 + 240) = *(_QWORD *)(v783 + 240);
                          *(_OWORD *)(v782 + 208) = v796;
                          *(_OWORD *)(v782 + 224) = v797;
                          *(_OWORD *)(v782 + 192) = v795;
                          v243 = v990;
                          v244 = v971;
                          v242 = (void *)((v993 + v1022) & v991);
                        }
                        v917 = (_OWORD *)((v782 + 255) & 0xFFFFFFFFFFFFFFF8);
                        v918 = (__int128 *)((v783 + 255) & 0xFFFFFFFFFFFFFFF8);
                        v919 = *v918;
                        *(_OWORD *)((char *)v917 + 9) = *(__int128 *)((char *)v918 + 9);
                        *v917 = v919;
                        v920 = (v782 + 287) & 0xFFFFFFFFFFFFFFF8;
                        v921 = (v783 + 287) & 0xFFFFFFFFFFFFFFF8;
                        v922 = *(_OWORD *)v921;
                        *(_BYTE *)(v920 + 16) = *(_BYTE *)(v921 + 16);
                        *(_OWORD *)v920 = v922;
                        v923 = (_QWORD *)((v782 + 311) & 0xFFFFFFFFFFFFF8);
                        v924 = (v783 + 311) & 0xFFFFFFFFFFFFF8;
                        v925 = *(_QWORD *)v924;
                        v924 += 15;
                        *v923 = v925;
                        v926 = (_QWORD *)(((unint64_t)v923 + 15) & 0xFFFFFFFFFFFFFFF8);
                        v927 = *(_QWORD *)(v924 & 0xFFFFFFFFFFFFFFF8);
                        v928 = *(_QWORD *)((v924 & 0xFFFFFFFFFFFFFFF8) + 8);
                        sub_23AA7F2D4(v927, v928);
                        *v926 = v927;
                        v926[1] = v928;
                        v60 = v945;
                        if (v966)
                        {
LABEL_633:
                          v929 = ((((v965
                                   + ((((((((((v243 + v244 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
                                         + 15) & 0xFFFFFFFFFFFFFFF8)
                                       + 19) & 0xFFFFFFFFFFFFFFF8)
                                     + 25) & 0xFFFFFFFFFFFFFFF8)
                                   + 327) & 0xFFFFFFFFFFFFFFF8)
                                 + 15) & 0xFFFFFFFFFFFFFFF8)
                               + 16;
                          v930 = (_QWORD *)(((unint64_t)v242 + v929) & 0xFFFFFFFFFFFFFFF8);
                          v931 = (_QWORD *)(((unint64_t)v1056 + v929) & 0xFFFFFFFFFFFFFFF8);
                          *v930 = *v931;
                          v930[1] = v931[1];
                          *(_QWORD *)(((unint64_t)v930 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v931 + 23) & 0xFFFFFFFFFFFFF8);
                          *(_BYTE *)(v3 + v60) = 3;
                          swift_bridgeObjectRetain();
LABEL_392:
                          v270 = 1;
LABEL_624:
                          *(_BYTE *)(v3 + v64) = v270;
                          return v3;
                        }
LABEL_326:
                        v244 = v998;
                        goto LABEL_633;
                      }
                      v654 = (*(uint64_t (**)(size_t))(v1009 + 48))(v653);
                    }
                    v240 = v1056;
                    if (v654)
                      goto LABEL_325;
LABEL_560:
                    v277 = ((unint64_t)v240 + v999) & v1018;
                    v278 = (v1011 + v277) & v1021;
                    goto LABEL_561;
                  case 4:
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1032 + 16))(v1022, v66, v65);
                    v245 = 4;
                    goto LABEL_391;
                  case 5:
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1032 + 16))(v1022, v66, v65);
                    v245 = 5;
                    goto LABEL_391;
                  case 6:
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1032 + 16))(v1022, v66, v65);
                    v246 = (void *)((v955 + v1022) & v953);
                    v247 = (const void *)((v955 + v66) & v953);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v959 + 48))(v247, 1, v960))
                    {
                      memcpy(v246, v247, v947);
                    }
                    else
                    {
                      (*(void (**)(void *, const void *, uint64_t))(v959 + 16))(v246, v247, v960);
                      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v959 + 56))(v246, 0, 1, v960);
                    }
                    v245 = 6;
                    goto LABEL_391;
                  case 7:
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1032 + 16))(v1022, v66, v65);
                    v245 = 7;
LABEL_391:
                    *(_BYTE *)(v1022 + v60) = v245;
                    goto LABEL_392;
                  default:
                    if (v60 <= 3)
                      v219 = v60;
                    else
                      v219 = 4;
                    __asm { BR              X12 }
                    return result;
                }
              }
              v221 = AssociatedTypeWitness;
              switch(*(_BYTE *)(v66 + v47))
              {
                case 0:
                  v248 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1031 + 16);
                  v248(v1022, v66, AssociatedTypeWitness);
                  v249 = (void *)((v995 + v1022) & v992);
                  v250 = (const void *)((v995 + v66) & v992);
                  if (v1039 == v997)
                  {
                    v251 = (*(uint64_t (**)(const void *))(v1031 + 48))(v250);
                    goto LABEL_335;
                  }
                  v279 = ((unint64_t)v250 + v1000) & v1016;
                  v280 = (v1001 + v279) & v1020;
                  if (v1006 == v997)
                  {
                    if (v987 == v1006)
                    {
                      v251 = (*(uint64_t (**)(unint64_t))(v1004 + 48))((v1001 + v279) & v1020);
                      goto LABEL_335;
                    }
                    v644 = (unint64_t *)((v1008 + v280) & 0xFFFFFFFFFFFFFFF8);
                    if (v962 <= 0x7FFFFFFE)
                    {
                      v645 = *v644;
                      goto LABEL_670;
                    }
                    v251 = (*(uint64_t (**)(unint64_t))(v984 + 48))(((unint64_t)v644 + v983) & v979);
                  }
                  else
                  {
                    v335 = v1040 + v280;
                    if ((v952 & 0x80000000) == 0)
                    {
                      v336 = *(_QWORD *)(v335 + 8);
                      if (v336 >= 0xFFFFFFFF)
                        LODWORD(v336) = -1;
                      if ((_DWORD)v336 != -1)
                        goto LABEL_336;
LABEL_419:
                      v279 = ((unint64_t)v250 + v1000) & v1016;
                      v280 = (v1001 + v279) & v1020;
LABEL_420:
                      v1057 = v47;
                      v248((uint64_t)v249, (uint64_t)v250, AssociatedTypeWitness);
                      v337 = ((unint64_t)v249 + v1000) & v1016;
                      v248(v337, v279, AssociatedTypeWitness);
                      v338 = (v1001 + v337) & v1020;
                      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1004 + 16))(v338, v280, v1005);
                      v339 = (_QWORD *)((v1008 + v338) & 0xFFFFFFFFFFFFFFF8);
                      v340 = (_QWORD *)((v1008 + v280) & 0xFFFFFFFFFFFFFFF8);
                      *v339 = *v340;
                      v341 = ((unint64_t)v339 + v983) & v979;
                      v342 = ((unint64_t)v340 + v983) & v979;
                      v343 = *(void (**)(unint64_t, unint64_t, uint64_t))(v984 + 16);
                      swift_bridgeObjectRetain();
                      v343(v341, v342, v985);
                      v344 = (_QWORD *)((v968 + v341) & 0xFFFFFFFFFFFFF8);
                      v345 = (_QWORD *)((v968 + v342) & 0xFFFFFFFFFFFFF8);
                      *v344 = *v345;
                      v346 = (_QWORD *)(((unint64_t)v344 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v347 = (_QWORD *)(((unint64_t)v345 + 15) & 0xFFFFFFFFFFFFFFF8);
                      *v346 = *v347;
                      v346[1] = v347[1];
                      v348 = (_QWORD *)(v1040 + v338);
                      *v348 = *(_QWORD *)(v1040 + v280);
                      v348[1] = *(_QWORD *)(v1040 + v280 + 8);
                      v349 = (v1034 + v1040 + v338) & v988;
                      v350 = (v1034 + v1040 + v280) & v988;
                      *(_BYTE *)v349 = *(_BYTE *)v350;
                      v351 = v349 | 4;
                      v352 = *(_DWORD *)(v350 | 4);
                      *(_BYTE *)(v351 + 4) = *(_BYTE *)((v350 | 4) + 4);
                      *(_DWORD *)v351 = v352;
                      *(_WORD *)(v349 + 10) = *(_WORD *)(v350 + 0xA);
                      v1041 = v349;
                      v353 = (v989 + v349) & v67;
                      v1037 = v350;
                      v354 = (v989 + v350) & v67;
                      v355 = *(void (**)(size_t, size_t, uint64_t))(v1009 + 16);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      v355(v353, v354, v977);
                      v356 = (v976 + v353) & v67;
                      v357 = (v976 + v354) & v67;
                      v355(v356, v357, v977);
                      v358 = (_BYTE *)(v356 + v971);
                      *v358 = *(_BYTE *)(v357 + v971);
                      v358[1] = *(_BYTE *)(v357 + v971 + 1);
                      v358[2] = *(_BYTE *)(v357 + v971 + 2);
                      v358[3] = *(_BYTE *)(v357 + v971 + 3);
                      v358[4] = *(_BYTE *)(v357 + v971 + 4);
                      v359 = (v356 + v971 + 12) & 0xFFFFFFFFFFFFFFF8;
                      v360 = (v357 + v971 + 12) & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v359 = *(_QWORD *)v360;
                      *(_QWORD *)(v359 + 8) = *(_QWORD *)(v360 + 8);
                      *(_BYTE *)(v359 + 16) = *(_BYTE *)(v360 + 16);
                      *(_BYTE *)(v359 + 17) = *(_BYTE *)(v360 + 17);
                      *(_BYTE *)(v359 + 18) = *(_BYTE *)(v360 + 18);
                      *(_BYTE *)(v359 + 19) = *(_BYTE *)(v360 + 19);
                      v361 = (v359 + 27) & 0xFFFFFFFFFFFFFFF8;
                      v362 = (v360 + 27) & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v361 = *(_QWORD *)v362;
                      *(_BYTE *)(v361 + 8) = *(_BYTE *)(v362 + 8);
                      *(_BYTE *)(v361 + 9) = *(_BYTE *)(v362 + 9);
                      *(_BYTE *)(v361 + 10) = *(_BYTE *)(v362 + 10);
                      *(_BYTE *)(v361 + 11) = *(_BYTE *)(v362 + 11);
                      *(_BYTE *)(v361 + 12) = *(_BYTE *)(v362 + 12);
                      v363 = (_QWORD *)((v359 + 47) & 0xFFFFFFFFFFFFF8);
                      v364 = (_QWORD *)((v360 + 47) & 0xFFFFFFFFFFFFF8);
                      *v363 = *v364;
                      v365 = ((unint64_t)v363 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v366 = ((unint64_t)v364 + 15) & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v365 = *(_QWORD *)v366;
                      *(_BYTE *)(v365 + 8) = *(_BYTE *)(v366 + 8);
                      *(_BYTE *)(v365 + 9) = *(_BYTE *)(v366 + 9);
                      v367 = (void *)((v972 + v365) & v67);
                      v368 = (const void *)((v972 + v366) & v67);
                      v369 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1009 + 48);
                      swift_bridgeObjectRetain();
                      if (v369(v368, 1, v977))
                      {
                        memcpy(v367, v368, v998);
                      }
                      else
                      {
                        v355((size_t)v367, (size_t)v368, v977);
                        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1009 + 56))(v367, 0, 1, v977);
                      }
                      v472 = (_QWORD *)(((unint64_t)v367 + v973) & 0xFFFFFFFFFFFFFFF8);
                      v473 = (_QWORD *)(((unint64_t)v368 + v973) & 0xFFFFFFFFFFFFFFF8);
                      *v472 = *v473;
                      v474 = ((unint64_t)v472 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v475 = ((unint64_t)v473 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v476 = *(_QWORD *)v475;
                      *(_BYTE *)(v474 + 8) = *(_BYTE *)(v475 + 8);
                      *(_QWORD *)v474 = v476;
                      v477 = (_QWORD *)(((unint64_t)v472 + 31) & 0xFFFFFFFFFFFFF8);
                      v478 = (_QWORD *)(((unint64_t)v473 + 31) & 0xFFFFFFFFFFFFF8);
                      *v477 = *v478;
                      v479 = ((unint64_t)v477 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v480 = (uint64_t *)(((unint64_t)v478 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v481 = v480[1];
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      if ((v481 & 0x3000000000000000) != 0)
                      {
                        *(_OWORD *)v479 = *(_OWORD *)v480;
                      }
                      else
                      {
                        v527 = *v480;
                        sub_23AAAE668(*v480, v481);
                        *(_QWORD *)v479 = v527;
                        *(_QWORD *)(v479 + 8) = v481;
                      }
                      v47 = v1057;
                      v528 = (v479 + 19) & 0xFFFFFFFFFFFFFFF8;
                      v529 = ((unint64_t)v480 + 19) & 0xFFFFFFFFFFFFFFF8;
                      v530 = *(_QWORD *)v529;
                      *(_BYTE *)(v528 + 8) = *(_BYTE *)(v529 + 8);
                      *(_QWORD *)v528 = v530;
                      *(_BYTE *)(v528 + 9) = *(_BYTE *)(v529 + 9);
                      v531 = (v528 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                      v532 = (v529 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                      v533 = *(_DWORD *)v532;
                      *(_BYTE *)(v531 + 4) = *(_BYTE *)(v532 + 4);
                      *(_DWORD *)v531 = v533;
                      v534 = (_QWORD *)((v528 + 25) & 0xFFFFFFFFFFFFFFF8);
                      v535 = (_QWORD *)((v529 + 25) & 0xFFFFFFFFFFFFFFF8);
                      *v534 = *v535;
                      v534[1] = v535[1];
                      v536 = v1033 + v1041;
                      v537 = (__int128 *)(v1033 + v1037);
                      v538 = *(_QWORD *)(v1033 + v1037 + 16);
                      if (v538 >= 0xFFFFFFFF)
                        LODWORD(v538) = -1;
                      v539 = v538 - 1;
                      swift_bridgeObjectRetain();
                      if (v539 < 0)
                      {
                        *(_QWORD *)v536 = *(_QWORD *)v537;
                        *(_BYTE *)(v536 + 8) = *((_BYTE *)v537 + 8);
                        *(_BYTE *)(v536 + 9) = *((_BYTE *)v537 + 9);
                        v608 = (void *)*((_QWORD *)v537 + 2);
                        v609 = v608;
                        *(_QWORD *)(v536 + 16) = v608;
                        v610 = (void *)*((_QWORD *)v537 + 3);
                        v611 = v610;
                        *(_QWORD *)(v536 + 24) = v610;
                        *(_BYTE *)(v536 + 32) = *((_BYTE *)v537 + 32);
                        *(_BYTE *)(v536 + 33) = *((_BYTE *)v537 + 33);
                        *(_BYTE *)(v536 + 34) = *((_BYTE *)v537 + 34);
                        *(_QWORD *)(v536 + 40) = *((_QWORD *)v537 + 5);
                        *(_QWORD *)(v536 + 48) = *((_QWORD *)v537 + 6);
                        *(_QWORD *)(v536 + 56) = *((_QWORD *)v537 + 7);
                        *(_QWORD *)(v536 + 64) = *((_QWORD *)v537 + 8);
                        *(_BYTE *)(v536 + 72) = *((_BYTE *)v537 + 72);
                        *(_QWORD *)(v536 + 80) = *((_QWORD *)v537 + 10);
                        *(_QWORD *)(v536 + 88) = *((_QWORD *)v537 + 11);
                        v1044 = (void *)*((_QWORD *)v537 + 12);
                        *(_QWORD *)(v536 + 96) = v1044;
                        *(_BYTE *)(v536 + 104) = *((_BYTE *)v537 + 104);
                        *(_BYTE *)(v536 + 105) = *((_BYTE *)v537 + 105);
                        *(_QWORD *)(v536 + 112) = *((_QWORD *)v537 + 14);
                        *(_QWORD *)(v536 + 120) = *((_QWORD *)v537 + 15);
                        *(_QWORD *)(v536 + 128) = *((_QWORD *)v537 + 16);
                        *(_QWORD *)(v536 + 136) = *((_QWORD *)v537 + 17);
                        *(_QWORD *)(v536 + 144) = *((_QWORD *)v537 + 18);
                        *(_QWORD *)(v536 + 152) = *((_QWORD *)v537 + 19);
                        *(_QWORD *)(v536 + 160) = *((_QWORD *)v537 + 20);
                        *(_QWORD *)(v536 + 168) = *((_QWORD *)v537 + 21);
                        *(_BYTE *)(v536 + 176) = *((_BYTE *)v537 + 176);
                        *(_QWORD *)(v536 + 184) = *((_QWORD *)v537 + 23);
                        v612 = *((_QWORD *)v537 + 24);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        v613 = v1044;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        if (v612)
                        {
                          *(_QWORD *)(v536 + 192) = v612;
                          *(_QWORD *)(v536 + 200) = *((_QWORD *)v537 + 25);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                        }
                        else
                        {
                          *(_OWORD *)(v536 + 192) = v537[12];
                        }
                        v3 = v1022;
                        v252 = v990;
                        v253 = v971;
                        v47 = v1057;
                        *(_QWORD *)(v536 + 208) = *((_QWORD *)v537 + 26);
                        *(_QWORD *)(v536 + 216) = *((_QWORD *)v537 + 27);
                        *(_QWORD *)(v536 + 224) = *((_QWORD *)v537 + 28);
                        *(_QWORD *)(v536 + 232) = *((_QWORD *)v537 + 29);
                        *(_QWORD *)(v536 + 240) = *((_QWORD *)v537 + 30);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        v540 = *v537;
                        v541 = v537[1];
                        v542 = v537[3];
                        *(_OWORD *)(v536 + 32) = v537[2];
                        *(_OWORD *)(v536 + 48) = v542;
                        *(_OWORD *)v536 = v540;
                        *(_OWORD *)(v536 + 16) = v541;
                        v543 = v537[4];
                        v544 = v537[5];
                        v545 = v537[7];
                        *(_OWORD *)(v536 + 96) = v537[6];
                        *(_OWORD *)(v536 + 112) = v545;
                        *(_OWORD *)(v536 + 64) = v543;
                        *(_OWORD *)(v536 + 80) = v544;
                        v546 = v537[8];
                        v547 = v537[9];
                        v548 = v537[11];
                        *(_OWORD *)(v536 + 160) = v537[10];
                        *(_OWORD *)(v536 + 176) = v548;
                        *(_OWORD *)(v536 + 128) = v546;
                        *(_OWORD *)(v536 + 144) = v547;
                        v549 = v537[12];
                        v550 = v537[13];
                        v551 = v537[14];
                        *(_QWORD *)(v536 + 240) = *((_QWORD *)v537 + 30);
                        *(_OWORD *)(v536 + 208) = v550;
                        *(_OWORD *)(v536 + 224) = v551;
                        *(_OWORD *)(v536 + 192) = v549;
                        v252 = v990;
                        v253 = v971;
                      }
                      v836 = (_OWORD *)((v536 + 255) & 0xFFFFFFFFFFFFFFF8);
                      v837 = (__int128 *)(((unint64_t)v537 + 255) & 0xFFFFFFFFFFFFFFF8);
                      v838 = *v837;
                      *(_OWORD *)((char *)v836 + 9) = *(__int128 *)((char *)v837 + 9);
                      *v836 = v838;
                      v839 = (v536 + 287) & 0xFFFFFFFFFFFFFFF8;
                      v840 = ((unint64_t)v537 + 287) & 0xFFFFFFFFFFFFFFF8;
                      v841 = *(_OWORD *)v840;
                      *(_BYTE *)(v839 + 16) = *(_BYTE *)(v840 + 16);
                      *(_OWORD *)v839 = v841;
                      v842 = (_QWORD *)((v536 + 311) & 0xFFFFFFFFFFFFF8);
                      v843 = ((unint64_t)v537 + 311) & 0xFFFFFFFFFFFFF8;
                      v844 = *(_QWORD *)v843;
                      v843 += 15;
                      *v842 = v844;
                      v845 = (_QWORD *)(((unint64_t)v842 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v846 = *(_QWORD *)(v843 & 0xFFFFFFFFFFFFFFF8);
                      v847 = *(_QWORD *)((v843 & 0xFFFFFFFFFFFFFFF8) + 8);
                      sub_23AA7F2D4(v846, v847);
                      *v845 = v846;
                      v845[1] = v847;
                      if (!v966)
                        goto LABEL_337;
LABEL_598:
                      v848 = ((((v964
                               + ((((((((((v252 + v253 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                   + 19) & 0xFFFFFFFFFFFFFFF8)
                                 + 25) & 0xFFFFFFFFFFFFFFF8)
                               + 327) & 0xFFFFFFFFFFFFFFF8)
                             + 15) & 0xFFFFFFFFFFFFFFF8)
                           + 16;
                      v849 = (_QWORD *)((((v995 + v1022) & v992) + v848) & 0xFFFFFFFFFFFFFFF8);
                      v850 = (_QWORD *)(((unint64_t)v250 + v848) & 0xFFFFFFFFFFFFFFF8);
                      *v849 = *v850;
                      v851 = *(void **)(((unint64_t)v850 + 15) & 0xFFFFFFFFFFFFF8);
                      *(_QWORD *)(((unint64_t)v849 + 15) & 0xFFFFFFFFFFFFF8) = v851;
                      *(_BYTE *)(v3 + v47) = 0;
                      v852 = v851;
LABEL_623:
                      v270 = 0;
                      goto LABEL_624;
                    }
                    v655 = (v989 + ((v1034 + v335) & v988)) & v67;
                    if (v966 <= 0x7FFFFFFD)
                    {
                      v645 = *(_QWORD *)(((v963 + ((v976 + v655) & v67)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_670:
                      if (v645 >= 0xFFFFFFFF)
                        LODWORD(v645) = -1;
                      if ((v645 + 1) >= 2)
                        goto LABEL_336;
                      goto LABEL_420;
                    }
                    v251 = (*(uint64_t (**)(size_t))(v1009 + 48))(v655);
                  }
LABEL_335:
                  if (v251)
                  {
LABEL_336:
                    memcpy(v249, v250, v975);
                    v252 = v990;
LABEL_337:
                    v253 = v998;
                    goto LABEL_598;
                  }
                  goto LABEL_419;
                case 1:
                  v1028 = v67;
                  v254 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1031 + 16);
                  v254(v1022, v66, AssociatedTypeWitness);
                  v1036 = (void *)((v995 + v1022) & v992);
                  v255 = (const void *)((v995 + v66) & v992);
                  v1030 = v255;
                  if (v1039 == v997)
                  {
                    v256 = (*(uint64_t (**)(unint64_t))(v1031 + 48))((v995 + v66) & v992);
                    goto LABEL_340;
                  }
                  v281 = ((unint64_t)v255 + v1000) & v1016;
                  v282 = (v1001 + v281) & v1020;
                  if (v1006 == v997)
                  {
                    if (v987 == v1006)
                    {
                      v256 = (*(uint64_t (**)(unint64_t))(v1004 + 48))((v1001 + v281) & v1020);
                      goto LABEL_340;
                    }
                    v646 = (unint64_t *)((v1008 + v282) & 0xFFFFFFFFFFFFFFF8);
                    if (v962 <= 0x7FFFFFFE)
                    {
                      v647 = *v646;
                      goto LABEL_675;
                    }
                    v256 = (*(uint64_t (**)(unint64_t))(v984 + 48))(((unint64_t)v646 + v983) & v979);
                  }
                  else
                  {
                    v370 = v1040 + v282;
                    if ((v952 & 0x80000000) == 0)
                    {
                      v371 = *(_QWORD *)(v370 + 8);
                      if (v371 >= 0xFFFFFFFF)
                        LODWORD(v371) = -1;
                      if ((_DWORD)v371 != -1)
                        goto LABEL_341;
LABEL_426:
                      v281 = ((unint64_t)v255 + v1000) & v1016;
                      v282 = (v1001 + v281) & v1020;
                      goto LABEL_427;
                    }
                    v656 = (v989 + ((v1034 + v370) & v988)) & v1028;
                    if (v966 <= 0x7FFFFFFD)
                    {
                      v647 = *(_QWORD *)(((v963 + ((v976 + v656) & v1028)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_675:
                      if (v647 >= 0xFFFFFFFF)
                        LODWORD(v647) = -1;
                      if ((v647 + 1) >= 2)
                        goto LABEL_341;
LABEL_427:
                      v1058 = v47;
                      v254((uint64_t)v1036, (uint64_t)v255, v221);
                      v372 = ((unint64_t)v1036 + v1000) & v1016;
                      v254(v372, v281, v221);
                      v373 = (v1001 + v372) & v1020;
                      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1004 + 16))(v373, v282, v1005);
                      v374 = (_QWORD *)((v1008 + v373) & 0xFFFFFFFFFFFFFFF8);
                      v375 = (_QWORD *)((v1008 + v282) & 0xFFFFFFFFFFFFFFF8);
                      *v374 = *v375;
                      v376 = ((unint64_t)v374 + v983) & v979;
                      v377 = ((unint64_t)v375 + v983) & v979;
                      v378 = *(void (**)(unint64_t, unint64_t, uint64_t))(v984 + 16);
                      swift_bridgeObjectRetain();
                      v378(v376, v377, v985);
                      v379 = (_QWORD *)((v968 + v376) & 0xFFFFFFFFFFFFF8);
                      v380 = (_QWORD *)((v968 + v377) & 0xFFFFFFFFFFFFF8);
                      *v379 = *v380;
                      v381 = (_QWORD *)(((unint64_t)v379 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v382 = (_QWORD *)(((unint64_t)v380 + 15) & 0xFFFFFFFFFFFFFFF8);
                      *v381 = *v382;
                      v381[1] = v382[1];
                      v383 = (_QWORD *)(v1040 + v373);
                      *v383 = *(_QWORD *)(v1040 + v282);
                      v383[1] = *(_QWORD *)(v1040 + v282 + 8);
                      v384 = (v1034 + v1040 + v373) & v988;
                      v385 = (v1034 + v1040 + v282) & v988;
                      *(_BYTE *)v384 = *(_BYTE *)v385;
                      v386 = v384 | 4;
                      v387 = *(_DWORD *)(v385 | 4);
                      *(_BYTE *)(v386 + 4) = *(_BYTE *)((v385 | 4) + 4);
                      *(_DWORD *)v386 = v387;
                      *(_WORD *)(v384 + 10) = *(_WORD *)(v385 + 0xA);
                      v1042 = v384;
                      v388 = (v989 + v384) & v1028;
                      v389 = (v989 + v385) & v1028;
                      v390 = *(void (**)(size_t, size_t, uint64_t))(v1009 + 16);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      v390(v388, v389, v977);
                      v391 = (v976 + v388) & v1028;
                      v392 = (v976 + v389) & v1028;
                      v390(v391, v392, v977);
                      v393 = (_BYTE *)(v391 + v971);
                      *v393 = *(_BYTE *)(v392 + v971);
                      v393[1] = *(_BYTE *)(v392 + v971 + 1);
                      v393[2] = *(_BYTE *)(v392 + v971 + 2);
                      v393[3] = *(_BYTE *)(v392 + v971 + 3);
                      v393[4] = *(_BYTE *)(v392 + v971 + 4);
                      v394 = (v391 + v971 + 12) & 0xFFFFFFFFFFFFFFF8;
                      v395 = (v392 + v971 + 12) & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v394 = *(_QWORD *)v395;
                      *(_QWORD *)(v394 + 8) = *(_QWORD *)(v395 + 8);
                      *(_BYTE *)(v394 + 16) = *(_BYTE *)(v395 + 16);
                      *(_BYTE *)(v394 + 17) = *(_BYTE *)(v395 + 17);
                      *(_BYTE *)(v394 + 18) = *(_BYTE *)(v395 + 18);
                      *(_BYTE *)(v394 + 19) = *(_BYTE *)(v395 + 19);
                      v396 = (v394 + 27) & 0xFFFFFFFFFFFFFFF8;
                      v397 = (v395 + 27) & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v396 = *(_QWORD *)v397;
                      *(_BYTE *)(v396 + 8) = *(_BYTE *)(v397 + 8);
                      *(_BYTE *)(v396 + 9) = *(_BYTE *)(v397 + 9);
                      *(_BYTE *)(v396 + 10) = *(_BYTE *)(v397 + 10);
                      *(_BYTE *)(v396 + 11) = *(_BYTE *)(v397 + 11);
                      *(_BYTE *)(v396 + 12) = *(_BYTE *)(v397 + 12);
                      v398 = (_QWORD *)((v394 + 47) & 0xFFFFFFFFFFFFF8);
                      v399 = (_QWORD *)((v395 + 47) & 0xFFFFFFFFFFFFF8);
                      *v398 = *v399;
                      v400 = ((unint64_t)v398 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v401 = ((unint64_t)v399 + 15) & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v400 = *(_QWORD *)v401;
                      *(_BYTE *)(v400 + 8) = *(_BYTE *)(v401 + 8);
                      *(_BYTE *)(v400 + 9) = *(_BYTE *)(v401 + 9);
                      v402 = (void *)((v972 + v400) & v1028);
                      v403 = (const void *)((v972 + v401) & v1028);
                      v404 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1009 + 48);
                      swift_bridgeObjectRetain();
                      if (v404(v403, 1, v977))
                      {
                        memcpy(v402, v403, v998);
                      }
                      else
                      {
                        v390((size_t)v402, (size_t)v403, v977);
                        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1009 + 56))(v402, 0, 1, v977);
                      }
                      v482 = (_QWORD *)(((unint64_t)v402 + v973) & 0xFFFFFFFFFFFFFFF8);
                      v483 = (_QWORD *)(((unint64_t)v403 + v973) & 0xFFFFFFFFFFFFFFF8);
                      *v482 = *v483;
                      v484 = ((unint64_t)v482 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v485 = ((unint64_t)v483 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v486 = *(_QWORD *)v485;
                      *(_BYTE *)(v484 + 8) = *(_BYTE *)(v485 + 8);
                      *(_QWORD *)v484 = v486;
                      v487 = (_QWORD *)(((unint64_t)v482 + 31) & 0xFFFFFFFFFFFFF8);
                      v488 = (_QWORD *)(((unint64_t)v483 + 31) & 0xFFFFFFFFFFFFF8);
                      *v487 = *v488;
                      v489 = ((unint64_t)v487 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v490 = (uint64_t *)(((unint64_t)v488 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v491 = v490[1];
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      if ((v491 & 0x3000000000000000) != 0)
                      {
                        *(_OWORD *)v489 = *(_OWORD *)v490;
                      }
                      else
                      {
                        v552 = *v490;
                        sub_23AAAE668(*v490, v491);
                        *(_QWORD *)v489 = v552;
                        *(_QWORD *)(v489 + 8) = v491;
                      }
                      v553 = (v489 + 19) & 0xFFFFFFFFFFFFFFF8;
                      v554 = ((unint64_t)v490 + 19) & 0xFFFFFFFFFFFFFFF8;
                      v555 = *(_QWORD *)v554;
                      *(_BYTE *)(v553 + 8) = *(_BYTE *)(v554 + 8);
                      *(_QWORD *)v553 = v555;
                      *(_BYTE *)(v553 + 9) = *(_BYTE *)(v554 + 9);
                      v556 = (v553 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                      v557 = (v554 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                      v558 = *(_DWORD *)v557;
                      *(_BYTE *)(v556 + 4) = *(_BYTE *)(v557 + 4);
                      *(_DWORD *)v556 = v558;
                      v559 = (_QWORD *)((v553 + 25) & 0xFFFFFFFFFFFFFFF8);
                      v560 = (_QWORD *)((v554 + 25) & 0xFFFFFFFFFFFFFFF8);
                      *v559 = *v560;
                      v559[1] = v560[1];
                      v561 = v1033 + v1042;
                      v562 = v1033 + v385;
                      v563 = *(_QWORD *)(v1033 + v385 + 16);
                      if (v563 >= 0xFFFFFFFF)
                        LODWORD(v563) = -1;
                      v564 = v563 - 1;
                      swift_bridgeObjectRetain();
                      if (v564 < 0)
                      {
                        *(_QWORD *)v561 = *(_QWORD *)v562;
                        *(_BYTE *)(v561 + 8) = *(_BYTE *)(v562 + 8);
                        *(_BYTE *)(v561 + 9) = *(_BYTE *)(v562 + 9);
                        v614 = *(void **)(v562 + 16);
                        v615 = v614;
                        *(_QWORD *)(v561 + 16) = v614;
                        v616 = *(void **)(v562 + 24);
                        v617 = v616;
                        *(_QWORD *)(v561 + 24) = v616;
                        *(_BYTE *)(v561 + 32) = *(_BYTE *)(v562 + 32);
                        *(_BYTE *)(v561 + 33) = *(_BYTE *)(v562 + 33);
                        *(_BYTE *)(v561 + 34) = *(_BYTE *)(v562 + 34);
                        *(_QWORD *)(v561 + 40) = *(_QWORD *)(v562 + 40);
                        *(_QWORD *)(v561 + 48) = *(_QWORD *)(v562 + 48);
                        *(_QWORD *)(v561 + 56) = *(_QWORD *)(v562 + 56);
                        *(_QWORD *)(v561 + 64) = *(_QWORD *)(v562 + 64);
                        *(_BYTE *)(v561 + 72) = *(_BYTE *)(v562 + 72);
                        *(_QWORD *)(v561 + 80) = *(_QWORD *)(v562 + 80);
                        *(_QWORD *)(v561 + 88) = *(_QWORD *)(v562 + 88);
                        v1045 = *(void **)(v562 + 96);
                        *(_QWORD *)(v561 + 96) = v1045;
                        *(_BYTE *)(v561 + 104) = *(_BYTE *)(v562 + 104);
                        *(_BYTE *)(v561 + 105) = *(_BYTE *)(v562 + 105);
                        *(_QWORD *)(v561 + 112) = *(_QWORD *)(v562 + 112);
                        *(_QWORD *)(v561 + 120) = *(_QWORD *)(v562 + 120);
                        *(_QWORD *)(v561 + 128) = *(_QWORD *)(v562 + 128);
                        *(_QWORD *)(v561 + 136) = *(_QWORD *)(v562 + 136);
                        *(_QWORD *)(v561 + 144) = *(_QWORD *)(v562 + 144);
                        *(_QWORD *)(v561 + 152) = *(_QWORD *)(v562 + 152);
                        *(_QWORD *)(v561 + 160) = *(_QWORD *)(v562 + 160);
                        *(_QWORD *)(v561 + 168) = *(_QWORD *)(v562 + 168);
                        *(_BYTE *)(v561 + 176) = *(_BYTE *)(v562 + 176);
                        *(_QWORD *)(v561 + 184) = *(_QWORD *)(v562 + 184);
                        v618 = *(_QWORD *)(v562 + 192);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        v619 = v1045;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        if (v618)
                        {
                          *(_QWORD *)(v561 + 192) = v618;
                          *(_QWORD *)(v561 + 200) = *(_QWORD *)(v562 + 200);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                        }
                        else
                        {
                          *(_OWORD *)(v561 + 192) = *(_OWORD *)(v562 + 192);
                        }
                        v3 = v1022;
                        v258 = v990;
                        v261 = v971;
                        v259 = v964;
                        v260 = v1013;
                        *(_QWORD *)(v561 + 208) = *(_QWORD *)(v562 + 208);
                        *(_QWORD *)(v561 + 216) = *(_QWORD *)(v562 + 216);
                        *(_QWORD *)(v561 + 224) = *(_QWORD *)(v562 + 224);
                        *(_QWORD *)(v561 + 232) = *(_QWORD *)(v562 + 232);
                        *(_QWORD *)(v561 + 240) = *(_QWORD *)(v562 + 240);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        v565 = *(_OWORD *)v562;
                        v566 = *(_OWORD *)(v562 + 16);
                        v567 = *(_OWORD *)(v562 + 48);
                        *(_OWORD *)(v561 + 32) = *(_OWORD *)(v562 + 32);
                        *(_OWORD *)(v561 + 48) = v567;
                        *(_OWORD *)v561 = v565;
                        *(_OWORD *)(v561 + 16) = v566;
                        v568 = *(_OWORD *)(v562 + 64);
                        v569 = *(_OWORD *)(v562 + 80);
                        v570 = *(_OWORD *)(v562 + 112);
                        *(_OWORD *)(v561 + 96) = *(_OWORD *)(v562 + 96);
                        *(_OWORD *)(v561 + 112) = v570;
                        *(_OWORD *)(v561 + 64) = v568;
                        *(_OWORD *)(v561 + 80) = v569;
                        v571 = *(_OWORD *)(v562 + 128);
                        v572 = *(_OWORD *)(v562 + 144);
                        v573 = *(_OWORD *)(v562 + 176);
                        *(_OWORD *)(v561 + 160) = *(_OWORD *)(v562 + 160);
                        *(_OWORD *)(v561 + 176) = v573;
                        *(_OWORD *)(v561 + 128) = v571;
                        *(_OWORD *)(v561 + 144) = v572;
                        v574 = *(_OWORD *)(v562 + 192);
                        v575 = *(_OWORD *)(v562 + 208);
                        v576 = *(_OWORD *)(v562 + 224);
                        *(_QWORD *)(v561 + 240) = *(_QWORD *)(v562 + 240);
                        *(_OWORD *)(v561 + 208) = v575;
                        *(_OWORD *)(v561 + 224) = v576;
                        *(_OWORD *)(v561 + 192) = v574;
                        v258 = v990;
                        v261 = v971;
                        v259 = v964;
                        v260 = v1013;
                      }
                      v853 = (_OWORD *)((v561 + 255) & 0xFFFFFFFFFFFFFFF8);
                      v854 = (__int128 *)((v562 + 255) & 0xFFFFFFFFFFFFFFF8);
                      v855 = *v854;
                      *(_OWORD *)((char *)v853 + 9) = *(__int128 *)((char *)v854 + 9);
                      *v853 = v855;
                      v856 = (v561 + 287) & 0xFFFFFFFFFFFFFFF8;
                      v857 = (v562 + 287) & 0xFFFFFFFFFFFFFFF8;
                      v858 = *(_OWORD *)v857;
                      *(_BYTE *)(v856 + 16) = *(_BYTE *)(v857 + 16);
                      *(_OWORD *)v856 = v858;
                      v859 = (_QWORD *)((v561 + 311) & 0xFFFFFFFFFFFFF8);
                      v860 = (v562 + 311) & 0xFFFFFFFFFFFFF8;
                      v861 = *(_QWORD *)v860;
                      v860 += 15;
                      *v859 = v861;
                      v862 = (_QWORD *)(((unint64_t)v859 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v863 = *(_QWORD *)(v860 & 0xFFFFFFFFFFFFFFF8);
                      v864 = *(_QWORD *)((v860 & 0xFFFFFFFFFFFFFFF8) + 8);
                      sub_23AA7F2D4(v863, v864);
                      *v862 = v863;
                      v862[1] = v864;
                      v47 = v1058;
                      v257 = (v995 + v1022) & v992;
                      if (!v966)
                        goto LABEL_342;
LABEL_602:
                      v865 = ((((v259
                               + ((((((((((v258 + v261 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                   + 19) & 0xFFFFFFFFFFFFFFF8)
                                 + 25) & 0xFFFFFFFFFFFFFFF8)
                               + 327) & 0xFFFFFFFFFFFFFFF8)
                             + 15) & 0xFFFFFFFFFFFFFFF8)
                           + 16;
                      v866 = (void *)((v257 + v1024 + v865) & v1018);
                      v867 = (const void *)(((unint64_t)v1030 + v1024 + v865) & v1018);
                      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1032 + 48))(v867, 1, v1047))
                      {
                        memcpy(v866, v867, v950);
                      }
                      else
                      {
                        (*(void (**)(void *, const void *, uint64_t))(v1032 + 16))(v866, v867, v1047);
                        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1032 + 56))(v866, 0, 1, v1047);
                      }
                      v868 = (char *)(((unint64_t)v866 + v970) & v1021);
                      v869 = (char *)(((unint64_t)v867 + v970) & v1021);
                      if (v986 == v1015)
                      {
                        v870 = (*(uint64_t (**)(unint64_t))(v1002 + 48))(((unint64_t)v867 + v970) & v1021);
                      }
                      else
                      {
                        v871 = (uint64_t *)((unint64_t)&v869[v1007] & 0xFFFFFFFFFFFFFFF8);
                        if (v961 <= 0x7FFFFFFE)
                        {
                          v872 = *v871;
                          if ((unint64_t)*v871 >= 0xFFFFFFFF)
                            LODWORD(v872) = -1;
                          if ((v872 + 1) >= 2)
                            goto LABEL_614;
                          goto LABEL_616;
                        }
                        v870 = (*(uint64_t (**)(unint64_t))(v981 + 48))(((unint64_t)v871 + v980) & v978);
                      }
                      if (v870)
                      {
LABEL_614:
                        memcpy(v868, v869, v260);
LABEL_617:
                        *(_QWORD *)&v868[v260] = *(_QWORD *)&v869[v260];
                        v881 = (_QWORD *)((unint64_t)&v868[v260 + 15] & 0xFFFFFFFFFFFFF8);
                        v882 = (_QWORD *)((unint64_t)&v869[v260 + 15] & 0xFFFFFFFFFFFFFFF8);
                        *v881 = *v882;
                        v460 = *(void **)(((unint64_t)v882 + 15) & 0xFFFFFFFFFFFFF8);
                        *(_QWORD *)(((unint64_t)v881 + 15) & 0xFFFFFFFFFFFFF8) = v460;
                        v461 = 1;
LABEL_618:
                        *(_BYTE *)(v3 + v47) = v461;
                        v883 = v460;
                        goto LABEL_623;
                      }
                      v871 = (uint64_t *)((unint64_t)&v869[v1007] & 0xFFFFFFFFFFFFFFF8);
LABEL_616:
                      (*(void (**)(char *, char *, uint64_t))(v1002 + 16))(v868, v869, v1003);
                      v873 = (_QWORD *)((unint64_t)&v868[v1007] & 0xFFFFFFFFFFFFFFF8);
                      *v873 = *v871;
                      v874 = ((unint64_t)v873 + v980) & v978;
                      v875 = ((unint64_t)v871 + v980) & v978;
                      v876 = *(void (**)(unint64_t, unint64_t, uint64_t))(v981 + 16);
                      swift_bridgeObjectRetain();
                      v876(v874, v875, v982);
                      v877 = (_QWORD *)((v967 + v874) & 0xFFFFFFFFFFFFF8);
                      v878 = (_QWORD *)((v967 + v875) & 0xFFFFFFFFFFFFF8);
                      *v877 = *v878;
                      v879 = (_QWORD *)(((unint64_t)v877 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v880 = (_QWORD *)(((unint64_t)v878 + 15) & 0xFFFFFFFFFFFFFFF8);
                      *v879 = *v880;
                      v879[1] = v880[1];
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      goto LABEL_617;
                    }
                    v256 = (*(uint64_t (**)(size_t))(v1009 + 48))(v656);
                  }
LABEL_340:
                  if (v256)
                  {
LABEL_341:
                    v257 = (v995 + v1022) & v992;
                    memcpy(v1036, v255, v975);
                    v258 = v990;
                    v259 = v964;
                    v260 = v1013;
LABEL_342:
                    v261 = v998;
                    goto LABEL_602;
                  }
                  goto LABEL_426;
                case 2:
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1031 + 16))(v1022, v66, AssociatedTypeWitness);
                  v262 = (void *)((v958 + v1022) & v1018);
                  v263 = (const void *)((v958 + v66) & v1018);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1032 + 48))(v263, 1, v65))
                  {
                    memcpy(v262, v263, v950);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v1032 + 16))(v262, v263, v65);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1032 + 56))(v262, 0, 1, v65);
                  }
                  v290 = (char *)(((unint64_t)v262 + v970) & v1021);
                  v291 = (char *)(((unint64_t)v263 + v970) & v1021);
                  if (v986 == v1015)
                  {
                    v292 = (*(uint64_t (**)(char *))(v1002 + 48))(v291);
                  }
                  else
                  {
                    v293 = (uint64_t *)((unint64_t)&v291[v1007] & 0xFFFFFFFFFFFFFFF8);
                    if (v961 <= 0x7FFFFFFE)
                    {
                      v294 = *v293;
                      if ((unint64_t)*v293 >= 0xFFFFFFFF)
                        LODWORD(v294) = -1;
                      if ((v294 + 1) >= 2)
                        goto LABEL_444;
                      goto LABEL_446;
                    }
                    v292 = (*(uint64_t (**)(unint64_t))(v981 + 48))(((unint64_t)v293 + v980) & v978);
                  }
                  if (v292)
                  {
LABEL_444:
                    memcpy(v290, v291, v1013);
                    goto LABEL_447;
                  }
                  v293 = (uint64_t *)((unint64_t)&v291[v1007] & 0xFFFFFFFFFFFFFFF8);
LABEL_446:
                  (*(void (**)(char *, char *, uint64_t))(v1002 + 16))(v290, v291, v1003);
                  v451 = (_QWORD *)((unint64_t)&v290[v1007] & 0xFFFFFFFFFFFFFFF8);
                  *v451 = *v293;
                  v452 = ((unint64_t)v451 + v980) & v978;
                  v453 = ((unint64_t)v293 + v980) & v978;
                  v454 = *(void (**)(unint64_t, unint64_t, uint64_t))(v981 + 16);
                  swift_bridgeObjectRetain();
                  v454(v452, v453, v982);
                  v455 = (_QWORD *)((v967 + v452) & 0xFFFFFFFFFFFFF8);
                  v456 = (_QWORD *)((v967 + v453) & 0xFFFFFFFFFFFFF8);
                  *v455 = *v456;
                  v457 = (_QWORD *)(((unint64_t)v455 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v458 = (_QWORD *)(((unint64_t)v456 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v457 = *v458;
                  v457[1] = v458[1];
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
LABEL_447:
                  v459 = &v290[v1013];
                  *v459 = v291[v1013];
                  v460 = *(void **)&v291[v1013 + 8];
                  *((_QWORD *)v459 + 1) = v460;
                  v461 = 2;
                  goto LABEL_618;
                case 3:
                  v264 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1031 + 16);
                  v264(v1022, v66, AssociatedTypeWitness);
                  v265 = (void *)((v995 + v1022) & v992);
                  v266 = (const void *)((v995 + v66) & v992);
                  if (v1039 == v997)
                  {
                    v267 = (*(uint64_t (**)(const void *))(v1031 + 48))(v266);
                    goto LABEL_347;
                  }
                  v283 = ((unint64_t)v266 + v1000) & v1016;
                  v284 = (v1001 + v283) & v1020;
                  if (v1006 == v997)
                  {
                    if (v987 == v1006)
                    {
                      v267 = (*(uint64_t (**)(unint64_t))(v1004 + 48))((v1001 + v283) & v1020);
                      goto LABEL_347;
                    }
                    v648 = (unint64_t *)((v1008 + v284) & 0xFFFFFFFFFFFFFFF8);
                    if (v962 <= 0x7FFFFFFE)
                    {
                      v649 = *v648;
                      goto LABEL_680;
                    }
                    v267 = (*(uint64_t (**)(unint64_t))(v984 + 48))(((unint64_t)v648 + v983) & v979);
                  }
                  else
                  {
                    v405 = v1040 + v284;
                    if ((v952 & 0x80000000) == 0)
                    {
                      v406 = *(_QWORD *)(v405 + 8);
                      if (v406 >= 0xFFFFFFFF)
                        LODWORD(v406) = -1;
                      if ((_DWORD)v406 != -1)
                        goto LABEL_348;
LABEL_433:
                      v283 = ((unint64_t)v266 + v1000) & v1016;
                      v284 = (v1001 + v283) & v1020;
                      goto LABEL_434;
                    }
                    v657 = (v989 + ((v1034 + v405) & v988)) & v67;
                    if (v966 <= 0x7FFFFFFD)
                    {
                      v649 = *(_QWORD *)(((v963 + ((v976 + v657) & v67)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_680:
                      if (v649 >= 0xFFFFFFFF)
                        LODWORD(v649) = -1;
                      if ((v649 + 1) >= 2)
                        goto LABEL_348;
LABEL_434:
                      v1059 = v47;
                      v264((uint64_t)v265, (uint64_t)v266, AssociatedTypeWitness);
                      v407 = ((unint64_t)v265 + v1000) & v1016;
                      v264(v407, v283, AssociatedTypeWitness);
                      v408 = (v1001 + v407) & v1020;
                      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1004 + 16))(v408, v284, v1005);
                      v409 = (_QWORD *)((v1008 + v408) & 0xFFFFFFFFFFFFFFF8);
                      v410 = (_QWORD *)((v1008 + v284) & 0xFFFFFFFFFFFFFFF8);
                      *v409 = *v410;
                      v411 = ((unint64_t)v409 + v983) & v979;
                      v412 = ((unint64_t)v410 + v983) & v979;
                      v413 = *(void (**)(unint64_t, unint64_t, uint64_t))(v984 + 16);
                      swift_bridgeObjectRetain();
                      v413(v411, v412, v985);
                      v414 = (_QWORD *)((v968 + v411) & 0xFFFFFFFFFFFFF8);
                      v415 = (_QWORD *)((v968 + v412) & 0xFFFFFFFFFFFFF8);
                      *v414 = *v415;
                      v416 = (_QWORD *)(((unint64_t)v414 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v417 = (_QWORD *)(((unint64_t)v415 + 15) & 0xFFFFFFFFFFFFFFF8);
                      *v416 = *v417;
                      v416[1] = v417[1];
                      v418 = (_QWORD *)(v1040 + v408);
                      *v418 = *(_QWORD *)(v1040 + v284);
                      v418[1] = *(_QWORD *)(v1040 + v284 + 8);
                      v419 = (v1034 + v1040 + v408) & v988;
                      v420 = (v1034 + v1040 + v284) & v988;
                      *(_BYTE *)v419 = *(_BYTE *)v420;
                      v421 = v419 | 4;
                      v422 = *(_DWORD *)(v420 | 4);
                      *(_BYTE *)(v421 + 4) = *(_BYTE *)((v420 | 4) + 4);
                      *(_DWORD *)v421 = v422;
                      *(_WORD *)(v419 + 10) = *(_WORD *)(v420 + 0xA);
                      v1043 = v419;
                      v423 = (v989 + v419) & v67;
                      v1038 = v420;
                      v424 = (v989 + v420) & v67;
                      v425 = *(void (**)(size_t, size_t, uint64_t))(v1009 + 16);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      v425(v423, v424, v977);
                      v426 = (v976 + v423) & v67;
                      v427 = (v976 + v424) & v67;
                      v425(v426, v427, v977);
                      v428 = (_BYTE *)(v426 + v971);
                      *v428 = *(_BYTE *)(v427 + v971);
                      v428[1] = *(_BYTE *)(v427 + v971 + 1);
                      v428[2] = *(_BYTE *)(v427 + v971 + 2);
                      v428[3] = *(_BYTE *)(v427 + v971 + 3);
                      v428[4] = *(_BYTE *)(v427 + v971 + 4);
                      v429 = (v426 + v971 + 12) & 0xFFFFFFFFFFFFFFF8;
                      v430 = (v427 + v971 + 12) & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v429 = *(_QWORD *)v430;
                      *(_QWORD *)(v429 + 8) = *(_QWORD *)(v430 + 8);
                      *(_BYTE *)(v429 + 16) = *(_BYTE *)(v430 + 16);
                      *(_BYTE *)(v429 + 17) = *(_BYTE *)(v430 + 17);
                      *(_BYTE *)(v429 + 18) = *(_BYTE *)(v430 + 18);
                      *(_BYTE *)(v429 + 19) = *(_BYTE *)(v430 + 19);
                      v431 = (v429 + 27) & 0xFFFFFFFFFFFFFFF8;
                      v432 = (v430 + 27) & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v431 = *(_QWORD *)v432;
                      *(_BYTE *)(v431 + 8) = *(_BYTE *)(v432 + 8);
                      *(_BYTE *)(v431 + 9) = *(_BYTE *)(v432 + 9);
                      *(_BYTE *)(v431 + 10) = *(_BYTE *)(v432 + 10);
                      *(_BYTE *)(v431 + 11) = *(_BYTE *)(v432 + 11);
                      *(_BYTE *)(v431 + 12) = *(_BYTE *)(v432 + 12);
                      v433 = (_QWORD *)((v429 + 47) & 0xFFFFFFFFFFFFF8);
                      v434 = (_QWORD *)((v430 + 47) & 0xFFFFFFFFFFFFF8);
                      *v433 = *v434;
                      v435 = ((unint64_t)v433 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v436 = ((unint64_t)v434 + 15) & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v435 = *(_QWORD *)v436;
                      *(_BYTE *)(v435 + 8) = *(_BYTE *)(v436 + 8);
                      *(_BYTE *)(v435 + 9) = *(_BYTE *)(v436 + 9);
                      v437 = (void *)((v972 + v435) & v67);
                      v438 = (const void *)((v972 + v436) & v67);
                      v439 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1009 + 48);
                      swift_bridgeObjectRetain();
                      if (v439(v438, 1, v977))
                      {
                        memcpy(v437, v438, v998);
                      }
                      else
                      {
                        v425((size_t)v437, (size_t)v438, v977);
                        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1009 + 56))(v437, 0, 1, v977);
                      }
                      v492 = (_QWORD *)(((unint64_t)v437 + v973) & 0xFFFFFFFFFFFFFFF8);
                      v493 = (_QWORD *)(((unint64_t)v438 + v973) & 0xFFFFFFFFFFFFFFF8);
                      *v492 = *v493;
                      v494 = ((unint64_t)v492 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v495 = ((unint64_t)v493 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v496 = *(_QWORD *)v495;
                      *(_BYTE *)(v494 + 8) = *(_BYTE *)(v495 + 8);
                      *(_QWORD *)v494 = v496;
                      v497 = (_QWORD *)(((unint64_t)v492 + 31) & 0xFFFFFFFFFFFFF8);
                      v498 = (_QWORD *)(((unint64_t)v493 + 31) & 0xFFFFFFFFFFFFF8);
                      *v497 = *v498;
                      v499 = ((unint64_t)v497 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v500 = (uint64_t *)(((unint64_t)v498 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v501 = v500[1];
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      if ((v501 & 0x3000000000000000) != 0)
                      {
                        *(_OWORD *)v499 = *(_OWORD *)v500;
                      }
                      else
                      {
                        v577 = *v500;
                        sub_23AAAE668(*v500, v501);
                        *(_QWORD *)v499 = v577;
                        *(_QWORD *)(v499 + 8) = v501;
                      }
                      v47 = v1059;
                      v578 = (v499 + 19) & 0xFFFFFFFFFFFFFFF8;
                      v579 = ((unint64_t)v500 + 19) & 0xFFFFFFFFFFFFFFF8;
                      v580 = *(_QWORD *)v579;
                      *(_BYTE *)(v578 + 8) = *(_BYTE *)(v579 + 8);
                      *(_QWORD *)v578 = v580;
                      *(_BYTE *)(v578 + 9) = *(_BYTE *)(v579 + 9);
                      v581 = (v578 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                      v582 = (v579 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                      v583 = *(_DWORD *)v582;
                      *(_BYTE *)(v581 + 4) = *(_BYTE *)(v582 + 4);
                      *(_DWORD *)v581 = v583;
                      v584 = (_QWORD *)((v578 + 25) & 0xFFFFFFFFFFFFFFF8);
                      v585 = (_QWORD *)((v579 + 25) & 0xFFFFFFFFFFFFFFF8);
                      *v584 = *v585;
                      v584[1] = v585[1];
                      v586 = v1033 + v1043;
                      v587 = (__int128 *)(v1033 + v1038);
                      v588 = *(_QWORD *)(v1033 + v1038 + 16);
                      if (v588 >= 0xFFFFFFFF)
                        LODWORD(v588) = -1;
                      v589 = v588 - 1;
                      swift_bridgeObjectRetain();
                      if (v589 < 0)
                      {
                        *(_QWORD *)v586 = *(_QWORD *)v587;
                        *(_BYTE *)(v586 + 8) = *((_BYTE *)v587 + 8);
                        *(_BYTE *)(v586 + 9) = *((_BYTE *)v587 + 9);
                        v620 = (void *)*((_QWORD *)v587 + 2);
                        v621 = v620;
                        *(_QWORD *)(v586 + 16) = v620;
                        v622 = (void *)*((_QWORD *)v587 + 3);
                        v623 = v622;
                        *(_QWORD *)(v586 + 24) = v622;
                        *(_BYTE *)(v586 + 32) = *((_BYTE *)v587 + 32);
                        *(_BYTE *)(v586 + 33) = *((_BYTE *)v587 + 33);
                        *(_BYTE *)(v586 + 34) = *((_BYTE *)v587 + 34);
                        *(_QWORD *)(v586 + 40) = *((_QWORD *)v587 + 5);
                        *(_QWORD *)(v586 + 48) = *((_QWORD *)v587 + 6);
                        *(_QWORD *)(v586 + 56) = *((_QWORD *)v587 + 7);
                        *(_QWORD *)(v586 + 64) = *((_QWORD *)v587 + 8);
                        *(_BYTE *)(v586 + 72) = *((_BYTE *)v587 + 72);
                        *(_QWORD *)(v586 + 80) = *((_QWORD *)v587 + 10);
                        *(_QWORD *)(v586 + 88) = *((_QWORD *)v587 + 11);
                        v1046 = (void *)*((_QWORD *)v587 + 12);
                        *(_QWORD *)(v586 + 96) = v1046;
                        *(_BYTE *)(v586 + 104) = *((_BYTE *)v587 + 104);
                        *(_BYTE *)(v586 + 105) = *((_BYTE *)v587 + 105);
                        *(_QWORD *)(v586 + 112) = *((_QWORD *)v587 + 14);
                        *(_QWORD *)(v586 + 120) = *((_QWORD *)v587 + 15);
                        *(_QWORD *)(v586 + 128) = *((_QWORD *)v587 + 16);
                        *(_QWORD *)(v586 + 136) = *((_QWORD *)v587 + 17);
                        *(_QWORD *)(v586 + 144) = *((_QWORD *)v587 + 18);
                        *(_QWORD *)(v586 + 152) = *((_QWORD *)v587 + 19);
                        *(_QWORD *)(v586 + 160) = *((_QWORD *)v587 + 20);
                        *(_QWORD *)(v586 + 168) = *((_QWORD *)v587 + 21);
                        *(_BYTE *)(v586 + 176) = *((_BYTE *)v587 + 176);
                        *(_QWORD *)(v586 + 184) = *((_QWORD *)v587 + 23);
                        v624 = *((_QWORD *)v587 + 24);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        v625 = v1046;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        if (v624)
                        {
                          *(_QWORD *)(v586 + 192) = v624;
                          *(_QWORD *)(v586 + 200) = *((_QWORD *)v587 + 25);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                        }
                        else
                        {
                          *(_OWORD *)(v586 + 192) = v587[12];
                        }
                        v3 = v1022;
                        v268 = v990;
                        v269 = v971;
                        v47 = v1059;
                        *(_QWORD *)(v586 + 208) = *((_QWORD *)v587 + 26);
                        *(_QWORD *)(v586 + 216) = *((_QWORD *)v587 + 27);
                        *(_QWORD *)(v586 + 224) = *((_QWORD *)v587 + 28);
                        *(_QWORD *)(v586 + 232) = *((_QWORD *)v587 + 29);
                        *(_QWORD *)(v586 + 240) = *((_QWORD *)v587 + 30);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        v590 = *v587;
                        v591 = v587[1];
                        v592 = v587[3];
                        *(_OWORD *)(v586 + 32) = v587[2];
                        *(_OWORD *)(v586 + 48) = v592;
                        *(_OWORD *)v586 = v590;
                        *(_OWORD *)(v586 + 16) = v591;
                        v593 = v587[4];
                        v594 = v587[5];
                        v595 = v587[7];
                        *(_OWORD *)(v586 + 96) = v587[6];
                        *(_OWORD *)(v586 + 112) = v595;
                        *(_OWORD *)(v586 + 64) = v593;
                        *(_OWORD *)(v586 + 80) = v594;
                        v596 = v587[8];
                        v597 = v587[9];
                        v598 = v587[11];
                        *(_OWORD *)(v586 + 160) = v587[10];
                        *(_OWORD *)(v586 + 176) = v598;
                        *(_OWORD *)(v586 + 128) = v596;
                        *(_OWORD *)(v586 + 144) = v597;
                        v599 = v587[12];
                        v600 = v587[13];
                        v601 = v587[14];
                        *(_QWORD *)(v586 + 240) = *((_QWORD *)v587 + 30);
                        *(_OWORD *)(v586 + 208) = v600;
                        *(_OWORD *)(v586 + 224) = v601;
                        *(_OWORD *)(v586 + 192) = v599;
                        v268 = v990;
                        v269 = v971;
                      }
                      v884 = (_OWORD *)((v586 + 255) & 0xFFFFFFFFFFFFFFF8);
                      v885 = (__int128 *)(((unint64_t)v587 + 255) & 0xFFFFFFFFFFFFFFF8);
                      v886 = *v885;
                      *(_OWORD *)((char *)v884 + 9) = *(__int128 *)((char *)v885 + 9);
                      *v884 = v886;
                      v887 = (v586 + 287) & 0xFFFFFFFFFFFFFFF8;
                      v888 = ((unint64_t)v587 + 287) & 0xFFFFFFFFFFFFFFF8;
                      v889 = *(_OWORD *)v888;
                      *(_BYTE *)(v887 + 16) = *(_BYTE *)(v888 + 16);
                      *(_OWORD *)v887 = v889;
                      v890 = (_QWORD *)((v586 + 311) & 0xFFFFFFFFFFFFF8);
                      v891 = ((unint64_t)v587 + 311) & 0xFFFFFFFFFFFFF8;
                      v892 = *(_QWORD *)v891;
                      v891 += 15;
                      *v890 = v892;
                      v893 = (_QWORD *)(((unint64_t)v890 + 15) & 0xFFFFFFFFFFFFFFF8);
                      v894 = *(_QWORD *)(v891 & 0xFFFFFFFFFFFFFFF8);
                      v895 = *(_QWORD *)((v891 & 0xFFFFFFFFFFFFFFF8) + 8);
                      sub_23AA7F2D4(v894, v895);
                      *v893 = v894;
                      v893[1] = v895;
                      if (v966)
                      {
LABEL_622:
                        v896 = ((((v964
                                 + ((((((((((v268 + v269 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                     + 19) & 0xFFFFFFFFFFFFFFF8)
                                   + 25) & 0xFFFFFFFFFFFFFFF8)
                                 + 327) & 0xFFFFFFFFFFFFFFF8)
                               + 15) & 0xFFFFFFFFFFFFFFF8)
                             + 16;
                        v897 = (_QWORD *)((((v995 + v1022) & v992) + v896) & 0xFFFFFFFFFFFFFFF8);
                        v898 = (_QWORD *)(((unint64_t)v266 + v896) & 0xFFFFFFFFFFFFFFF8);
                        *v897 = *v898;
                        v897[1] = v898[1];
                        *(_QWORD *)(((unint64_t)v897 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v898 + 23) & 0xFFFFFFFFFFFFF8);
                        *(_BYTE *)(v3 + v47) = 3;
                        swift_bridgeObjectRetain();
                        goto LABEL_623;
                      }
LABEL_349:
                      v269 = v998;
                      goto LABEL_622;
                    }
                    v267 = (*(uint64_t (**)(size_t))(v1009 + 48))(v657);
                  }
LABEL_347:
                  if (v267)
                  {
LABEL_348:
                    memcpy(v265, v266, v975);
                    v268 = v990;
                    goto LABEL_349;
                  }
                  goto LABEL_433;
                case 4:
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1031 + 16))(v1022, v66, AssociatedTypeWitness);
                  v270 = 0;
                  *(_BYTE *)(v1022 + v47) = 4;
                  goto LABEL_624;
                case 5:
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1031 + 16))(v1022, v66, AssociatedTypeWitness);
                  v270 = 0;
                  *(_BYTE *)(v1022 + v47) = 5;
                  goto LABEL_624;
                case 6:
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1031 + 16))(v1022, v66, AssociatedTypeWitness);
                  v271 = (void *)((v957 + v1022) & v954);
                  v272 = (const void *)((v957 + v66) & v954);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48))(v272, 1, v1029))
                  {
                    memcpy(v271, v272, v948);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v42 + 16))(v271, v272, v1029);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v271, 0, 1, v1029);
                  }
                  v270 = 0;
                  *(_BYTE *)(v1022 + v47) = 6;
                  goto LABEL_624;
                case 7:
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1031 + 16))(v1022, v66, AssociatedTypeWitness);
                  v270 = 0;
                  *(_BYTE *)(v1022 + v47) = 7;
                  goto LABEL_624;
                default:
                  if (v47 <= 3)
                    v220 = v47;
                  else
                    v220 = 4;
                  __asm { BR              X12 }
                  return result;
              }
            }
            v119 = (v989 + ((v1034 + v211) & v988)) & v67;
            if (v966 <= 0x7FFFFFFD)
            {
              v631 = *(_QWORD *)(((v963 + ((v976 + v119) & v67)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_635:
              if (v631 >= 0xFFFFFFFF)
                LODWORD(v631) = -1;
              if ((v631 + 1) < 2)
                goto LABEL_129;
              goto LABEL_201;
            }
            v118 = *(uint64_t (**)(unint64_t))(v1009 + 48);
          }
LABEL_127:
          v120 = v118(v119);
          v117 = (v993 + v1022) & v991;
          if (v120)
            goto LABEL_201;
          goto LABEL_128;
        case 4:
        case 5:
        case 7:
          (*(void (**)(uint64_t, uint64_t))(v1032 + 8))(v1022, v1047);
          goto LABEL_291;
        case 6:
          (*(void (**)(uint64_t, uint64_t))(v1032 + 8))(v1022, v1047);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v959 + 48))((v955 + v1022) & v953, 1, v960))(*(void (**)(uint64_t, uint64_t))(v959 + 8))((v955 + v1022) & v953, v960);
          goto LABEL_291;
        default:
          if (v60 <= 3)
            v68 = v60;
          else
            v68 = 4;
          __asm { BR              X12 }
          return result;
      }
    }
    switch(*(_BYTE *)(v1022 + v47))
    {
      case 0:
        v946 = *(_QWORD *)(v1029 - 8);
        v135 = *(void (**)(uint64_t, uint64_t))(v1031 + 8);
        v135(v1022, AssociatedTypeWitness);
        v71 = (v995 + v1022) & v992;
        if (v1039 == v997)
        {
          v136 = *(uint64_t (**)(unint64_t))(v1031 + 48);
          v137 = (v995 + v1022) & v992;
          goto LABEL_148;
        }
        v139 = (v1000 + v71) & v1016;
        v140 = (v1001 + v139) & v1020;
        if (v1006 == v997)
        {
          if (v987 == v1006)
          {
            v136 = *(uint64_t (**)(unint64_t))(v1004 + 48);
            v137 = (v1001 + v139) & v1020;
            goto LABEL_148;
          }
          v632 = (unint64_t *)((v1008 + v140) & 0xFFFFFFFFFFFFFFF8);
          if (v962 <= 0x7FFFFFFE)
          {
            v633 = *v632;
            goto LABEL_640;
          }
          v137 = ((unint64_t)v632 + v983) & v979;
          v136 = *(uint64_t (**)(unint64_t))(v984 + 48);
        }
        else
        {
          v213 = v1040 + v140;
          if ((v952 & 0x80000000) == 0)
          {
            v214 = *(_QWORD *)(v213 + 8);
            if (v214 >= 0xFFFFFFFF)
              LODWORD(v214) = -1;
            if ((_DWORD)v214 == -1)
            {
LABEL_149:
              v139 = (v1000 + v71) & v1016;
              v140 = (v1001 + v139) & v1020;
LABEL_150:
              v940 = v60;
              v934 = v71;
              v135(v71, AssociatedTypeWitness);
              v135(v139, AssociatedTypeWitness);
              (*(void (**)(uint64_t, uint64_t))(v1004 + 8))(v140, v1005);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v984 + 8))((v983 + ((v1008 + v140) & 0xFFFFFFFFFFFFFFF8)) & v979, v985);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v141 = (v1034 + v1040 + v140) & v988;
              v142 = *(void (**)(size_t, uint64_t))(v1009 + 8);
              v142((v989 + v141) & v67, v977);
              v143 = (v976 + ((v989 + v141) & v67)) & v67;
              v142(v143, v977);
              v144 = v963 + v143;
              v145 = v67;
              v146 = v144 & 0xFFFFFFFFFFFFFFF8;
              swift_bridgeObjectRelease();
              v147 = v146 + 47;
              v67 = v145;
              v148 = (v972 + (((v147 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v145;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1009 + 48))(v148, 1, v977))
                v142(v148, v977);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v149 = *(_QWORD *)(((((((v973 + v148) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                               + 8);
              if ((v149 & 0x3000000000000000) == 0)
                sub_23AAAE53C(*(_QWORD *)((((((v973 + v148) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v149);
              swift_bridgeObjectRelease();
              v150 = v1033 + v141;
              v151 = *(void **)(v150 + 16);
              LODWORD(v152) = -1;
              if ((unint64_t)v151 < 0xFFFFFFFF)
                v152 = *(_QWORD *)(v150 + 16);
              v60 = v940;
              v66 = a2;
              if ((int)v152 - 1 < 0)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(v150 + 192))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              sub_23AAA12F0(*(_QWORD *)((((v150 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v150 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
              v71 = v934;
            }
LABEL_161:
            v89 = ((((v964 + v1033 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
            goto LABEL_162;
          }
          v137 = (v989 + ((v1034 + v213) & v988)) & v67;
          if (v966 <= 0x7FFFFFFD)
          {
            v633 = *(_QWORD *)(((v963 + ((v976 + v137) & v67)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_640:
            if (v633 >= 0xFFFFFFFF)
              LODWORD(v633) = -1;
            if ((v633 + 1) < 2)
              goto LABEL_150;
            goto LABEL_161;
          }
          v136 = *(uint64_t (**)(unint64_t))(v1009 + 48);
        }
LABEL_148:
        v138 = v136(v137);
        v71 = (v995 + v1022) & v992;
        if (v138)
          goto LABEL_161;
        goto LABEL_149;
      case 1:
        v946 = *(_QWORD *)(v1029 - 8);
        v154 = *(void (**)(uint64_t, uint64_t))(v1031 + 8);
        v154(v1022, AssociatedTypeWitness);
        v155 = (v995 + v1022) & v992;
        if (v1039 == v997)
        {
          v156 = *(uint64_t (**)(unint64_t))(v1031 + 48);
          v157 = (v995 + v1022) & v992;
          goto LABEL_165;
        }
        v159 = (v1000 + v155) & v1016;
        v160 = (v1001 + v159) & v1020;
        if (v1006 == v997)
        {
          if (v987 == v1006)
          {
            v156 = *(uint64_t (**)(unint64_t))(v1004 + 48);
            v157 = (v1001 + v159) & v1020;
            goto LABEL_165;
          }
          v634 = (unint64_t *)((v1008 + v160) & 0xFFFFFFFFFFFFFFF8);
          if (v962 <= 0x7FFFFFFE)
          {
            v635 = *v634;
            goto LABEL_645;
          }
          v157 = ((unint64_t)v634 + v983) & v979;
          v156 = *(uint64_t (**)(unint64_t))(v984 + 48);
        }
        else
        {
          v215 = v1040 + v160;
          if ((v952 & 0x80000000) == 0)
          {
            v216 = *(_QWORD *)(v215 + 8);
            if (v216 >= 0xFFFFFFFF)
              LODWORD(v216) = -1;
            if ((_DWORD)v216 == -1)
            {
LABEL_166:
              v159 = (v1000 + v155) & v1016;
              v160 = (v1001 + v159) & v1020;
LABEL_167:
              v941 = v60;
              v935 = v155;
              v154(v155, AssociatedTypeWitness);
              v154(v159, AssociatedTypeWitness);
              (*(void (**)(uint64_t, uint64_t))(v1004 + 8))(v160, v1005);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v984 + 8))((v983 + ((v1008 + v160) & 0xFFFFFFFFFFFFFFF8)) & v979, v985);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v161 = (v1034 + v1040 + v160) & v988;
              v162 = *(void (**)(size_t, uint64_t))(v1009 + 8);
              v162((v989 + v161) & v67, v977);
              v163 = (v976 + ((v989 + v161) & v67)) & v67;
              v162(v163, v977);
              v164 = v963 + v163;
              v165 = v67;
              v166 = v164 & 0xFFFFFFFFFFFFFFF8;
              swift_bridgeObjectRelease();
              v167 = v166 + 47;
              v67 = v165;
              v168 = (v972 + (((v167 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v165;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1009 + 48))(v168, 1, v977))
                v162(v168, v977);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v169 = *(_QWORD *)(((((((v973 + v168) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                               + 8);
              if ((v169 & 0x3000000000000000) == 0)
                sub_23AAAE53C(*(_QWORD *)((((((v973 + v168) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v169);
              swift_bridgeObjectRelease();
              v170 = v1033 + v161;
              v171 = *(void **)(v170 + 16);
              LODWORD(v172) = -1;
              if ((unint64_t)v171 < 0xFFFFFFFF)
                v172 = *(_QWORD *)(v170 + 16);
              v60 = v941;
              v66 = a2;
              if ((int)v172 - 1 < 0)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(v170 + 192))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              sub_23AAA12F0(*(_QWORD *)((((v170 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v170 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
              v155 = v935;
            }
LABEL_178:
            v173 = (v155 + v1024 + v975) & v1018;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1032 + 48))(v173, 1, v1047))
              (*(void (**)(unint64_t, uint64_t))(v1032 + 8))(v173, v1047);
            v110 = (v970 + v173) & v1021;
            if (v986 == v1015)
            {
              v174 = (*(uint64_t (**)(size_t))(v1002 + 48))((v970 + v173) & v1021);
            }
            else
            {
              v201 = (uint64_t *)((v1007 + v110) & 0xFFFFFFFFFFFFFFF8);
              if (v961 <= 0x7FFFFFFE)
              {
                v202 = *v201;
                if ((unint64_t)*v201 >= 0xFFFFFFFF)
                  LODWORD(v202) = -1;
                if ((v202 + 1) >= 2)
                  goto LABEL_281;
                goto LABEL_280;
              }
              v174 = (*(uint64_t (**)(unint64_t))(v981 + 48))(((unint64_t)v201 + v980) & v978);
            }
            if (v174)
            {
LABEL_281:
              v209 = v1013;
              goto LABEL_282;
            }
            v201 = (uint64_t *)((v1007 + v110) & 0xFFFFFFFFFFFFFFF8);
LABEL_280:
            (*(void (**)(unint64_t, uint64_t))(v1002 + 8))(v110, v1003);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v981 + 8))(((unint64_t)v201 + v980) & v978, v982);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_281;
          }
          v157 = (v989 + ((v1034 + v215) & v988)) & v67;
          if (v966 <= 0x7FFFFFFD)
          {
            v635 = *(_QWORD *)(((v963 + ((v976 + v157) & v67)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_645:
            if (v635 >= 0xFFFFFFFF)
              LODWORD(v635) = -1;
            if ((v635 + 1) < 2)
              goto LABEL_167;
            goto LABEL_178;
          }
          v156 = *(uint64_t (**)(unint64_t))(v1009 + 48);
        }
LABEL_165:
        v158 = v156(v157);
        v155 = (v995 + v1022) & v992;
        if (v158)
          goto LABEL_178;
        goto LABEL_166;
      case 2:
        v1026 = v67;
        (*(void (**)(uint64_t, uint64_t))(v1031 + 8))(v1022, AssociatedTypeWitness);
        v175 = (v958 + v1022) & v1018;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1032 + 48))(v175, 1, v1047))
          (*(void (**)(uint64_t, uint64_t))(v1032 + 8))(v175, v1047);
        v112 = v42;
        v176 = (v970 + v175) & v1021;
        if (v986 == v1015)
        {
          v177 = (*(uint64_t (**)(size_t))(v1002 + 48))((v970 + v175) & v1021);
        }
        else
        {
          v203 = (uint64_t *)((v1007 + v176) & 0xFFFFFFFFFFFFFFF8);
          if (v961 <= 0x7FFFFFFE)
          {
            v204 = *v203;
            if ((unint64_t)*v203 >= 0xFFFFFFFF)
              LODWORD(v204) = -1;
            if ((v204 + 1) >= 2)
            {
LABEL_289:
              v210 = v1013 + v176;
LABEL_290:

              v65 = v1047;
              v42 = v112;
              v67 = v1026;
              goto LABEL_291;
            }
LABEL_288:
            (*(void (**)(size_t, uint64_t))(v1002 + 8))(v176, v1003);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v981 + 8))(((unint64_t)v203 + v980) & v978, v982);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_289;
          }
          v177 = (*(uint64_t (**)(unint64_t))(v981 + 48))(((unint64_t)v203 + v980) & v978);
        }
        if (v177)
          goto LABEL_289;
        v203 = (uint64_t *)((v1007 + v176) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_288;
      case 3:
        v946 = *(_QWORD *)(v1029 - 8);
        v178 = *(void (**)(uint64_t, uint64_t))(v1031 + 8);
        v178(v1022, AssociatedTypeWitness);
        v179 = (v995 + v1022) & v992;
        if (v1039 == v997)
        {
          v180 = *(uint64_t (**)(unint64_t))(v1031 + 48);
          v181 = (v995 + v1022) & v992;
          goto LABEL_188;
        }
        v183 = (v1000 + v179) & v1016;
        v184 = (v1001 + v183) & v1020;
        if (v1006 == v997)
        {
          if (v987 == v1006)
          {
            v180 = *(uint64_t (**)(unint64_t))(v1004 + 48);
            v181 = (v1001 + v183) & v1020;
            goto LABEL_188;
          }
          v636 = (unint64_t *)((v1008 + v184) & 0xFFFFFFFFFFFFFFF8);
          if (v962 <= 0x7FFFFFFE)
          {
            v637 = *v636;
            goto LABEL_650;
          }
          v181 = ((unint64_t)v636 + v983) & v979;
          v180 = *(uint64_t (**)(unint64_t))(v984 + 48);
        }
        else
        {
          v295 = v1040 + v184;
          if ((v952 & 0x80000000) == 0)
          {
            v296 = *(_QWORD *)(v295 + 8);
            if (v296 >= 0xFFFFFFFF)
              LODWORD(v296) = -1;
            if ((_DWORD)v296 != -1)
              goto LABEL_201;
            goto LABEL_189;
          }
          v181 = (v989 + ((v1034 + v295) & v988)) & v67;
          if (v966 <= 0x7FFFFFFD)
          {
            v637 = *(_QWORD *)(((v963 + ((v976 + v181) & v67)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_650:
            if (v637 >= 0xFFFFFFFF)
              LODWORD(v637) = -1;
            if ((v637 + 1) >= 2)
              goto LABEL_201;
LABEL_190:
            v942 = v60;
            v178(v179, AssociatedTypeWitness);
            v178(v183, AssociatedTypeWitness);
            (*(void (**)(uint64_t, uint64_t))(v1004 + 8))(v184, v1005);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v984 + 8))((v983 + ((v1008 + v184) & 0xFFFFFFFFFFFFFFF8)) & v979, v985);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v185 = (v1034 + v1040 + v184) & v988;
            v186 = *(void (**)(size_t, uint64_t))(v1009 + 8);
            v186((v989 + v185) & v67, v977);
            v187 = (v976 + ((v989 + v185) & v67)) & v67;
            v186(v187, v977);
            v188 = v963 + v187;
            v189 = v67;
            v190 = v188 & 0xFFFFFFFFFFFFFFF8;
            swift_bridgeObjectRelease();
            v191 = v190 + 47;
            v67 = v189;
            v192 = (v972 + (((v191 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v189;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1009 + 48))(v192, 1, v977))
              v186(v192, v977);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v193 = *(_QWORD *)(((((((v973 + v192) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                             + 8);
            if ((v193 & 0x3000000000000000) == 0)
              sub_23AAAE53C(*(_QWORD *)((((((v973 + v192) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v193);
            swift_bridgeObjectRelease();
            v194 = v1033 + v185;
            v195 = *(void **)(v194 + 16);
            LODWORD(v196) = -1;
            if ((unint64_t)v195 < 0xFFFFFFFF)
              v196 = *(_QWORD *)(v194 + 16);
            v60 = v942;
            v66 = a2;
            if ((int)v196 - 1 < 0)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(_QWORD *)(v194 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_23AAA12F0(*(_QWORD *)((((v194 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v194 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            goto LABEL_201;
          }
          v180 = *(uint64_t (**)(unint64_t))(v1009 + 48);
        }
LABEL_188:
        v182 = v180(v181);
        v179 = (v995 + v1022) & v992;
        if (v182)
          goto LABEL_201;
LABEL_189:
        v183 = (v1000 + v179) & v1016;
        v184 = (v1001 + v183) & v1020;
        goto LABEL_190;
      case 4:
      case 5:
      case 7:
        (*(void (**)(uint64_t, uint64_t))(v1031 + 8))(v1022, AssociatedTypeWitness);
        goto LABEL_291;
      case 6:
        (*(void (**)(uint64_t, uint64_t))(v1031 + 8))(v1022, AssociatedTypeWitness);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))((v957 + v1022) & v954, 1, v1029))
          (*(void (**)(uint64_t, uint64_t))(v42 + 8))((v957 + v1022) & v954, v1029);
        goto LABEL_291;
      default:
        if (v47 <= 3)
          v69 = v47;
        else
          v69 = 4;
        __asm { BR              X12 }
        return result;
    }
  }
  return v3;
}

uint64_t sub_23AF6ED7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  size_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  size_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  const void *v82;
  int v83;
  void *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void (*v91)(uint64_t);
  uint64_t v92;
  const void *v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const void *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  const void *v108;
  int v109;
  void *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  char v116;
  uint64_t v117;
  void *v118;
  const void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t);
  uint64_t v125;
  const void *v126;
  int v127;
  unint64_t v128;
  char *v129;
  const void *v130;
  unint64_t v131;
  uint64_t v132;
  size_t v133;
  uint64_t v134;
  void (*v135)(uint64_t);
  uint64_t v136;
  const void *v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  size_t v144;
  uint64_t v145;
  void *v146;
  const void *v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(uint64_t);
  uint64_t v151;
  const void *v152;
  int v153;
  char *v154;
  const void *v155;
  unint64_t v156;
  uint64_t v157;
  size_t v158;
  uint64_t v159;
  void *v160;
  const void *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  _BYTE *v175;
  uint64_t *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  int v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t result;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  size_t v191;
  unint64_t v192;
  size_t v193;
  unint64_t v194;
  size_t v195;
  unint64_t v196;
  _QWORD *v197;
  unint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  char *v202;
  size_t v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  unint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  char *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  size_t v226;
  int v227;
  size_t v228;
  size_t v229;
  int v230;
  const void *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  size_t v235;
  unint64_t v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  void (*v251)(uint64_t, uint64_t, uint64_t);
  size_t v252;
  size_t v253;
  _BYTE *v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  unint64_t v261;
  unint64_t v262;
  void *v263;
  const void *v264;
  _QWORD *v265;
  _QWORD *v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  _OWORD *v272;
  _OWORD *v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  _OWORD *v292;
  __int128 *v293;
  __int128 v294;
  unint64_t v295;
  unint64_t v296;
  __int128 v297;
  _QWORD *v298;
  _QWORD *v299;
  unint64_t v300;
  _QWORD *v301;
  _QWORD *v302;
  void *v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  size_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  _QWORD *v312;
  _QWORD *v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  _QWORD *v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  void (*v323)(uint64_t, uint64_t, uint64_t);
  size_t v324;
  size_t v325;
  _BYTE *v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  _QWORD *v331;
  _QWORD *v332;
  unint64_t v333;
  unint64_t v334;
  void *v335;
  const void *v336;
  _QWORD *v337;
  _QWORD *v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  _QWORD *v343;
  _OWORD *v344;
  _OWORD *v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  _OWORD *v364;
  __int128 *v365;
  __int128 v366;
  unint64_t v367;
  unint64_t v368;
  __int128 v369;
  _QWORD *v370;
  _QWORD *v371;
  unint64_t v372;
  void *v373;
  const void *v374;
  char *v375;
  char *v376;
  _QWORD *v377;
  uint64_t v378;
  _QWORD *v379;
  unint64_t v380;
  unint64_t v381;
  _QWORD *v382;
  _QWORD *v383;
  _QWORD *v384;
  _QWORD *v385;
  const void *v386;
  unint64_t v387;
  unint64_t v388;
  size_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  _QWORD *v394;
  _QWORD *v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  _QWORD *v399;
  _QWORD *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  int v404;
  void (*v405)(uint64_t, uint64_t, uint64_t);
  size_t v406;
  size_t v407;
  _BYTE *v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  _QWORD *v413;
  _QWORD *v414;
  unint64_t v415;
  unint64_t v416;
  void *v417;
  const void *v418;
  _QWORD *v419;
  _QWORD *v420;
  unint64_t v421;
  unint64_t v422;
  uint64_t v423;
  _QWORD *v424;
  _QWORD *v425;
  _OWORD *v426;
  _OWORD *v427;
  unint64_t v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  _OWORD *v446;
  __int128 *v447;
  __int128 v448;
  unint64_t v449;
  unint64_t v450;
  __int128 v451;
  _QWORD *v452;
  _QWORD *v453;
  unint64_t v454;
  _OWORD *v455;
  _OWORD *v456;
  unint64_t v457;
  uint64_t v458;
  unint64_t v459;
  unint64_t v460;
  _QWORD *v461;
  _QWORD *v462;
  unint64_t v463;
  unint64_t v464;
  _QWORD *v465;
  _QWORD *v466;
  size_t v467;
  size_t v468;
  uint64_t v469;
  int v470;
  void (*v471)(size_t, size_t, uint64_t);
  size_t v472;
  size_t v473;
  _BYTE *v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  _QWORD *v479;
  _QWORD *v480;
  unint64_t v481;
  unint64_t v482;
  void *v483;
  const void *v484;
  _QWORD *v485;
  _QWORD *v486;
  unint64_t v487;
  unint64_t v488;
  uint64_t v489;
  _QWORD *v490;
  _QWORD *v491;
  _OWORD *v492;
  _OWORD *v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unint64_t v498;
  unint64_t v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  _OWORD *v512;
  __int128 *v513;
  __int128 v514;
  unint64_t v515;
  unint64_t v516;
  __int128 v517;
  _QWORD *v518;
  _QWORD *v519;
  unint64_t v520;
  _QWORD *v521;
  _QWORD *v522;
  void *v523;
  const void *v524;
  unint64_t v525;
  uint64_t v526;
  size_t v527;
  unint64_t v528;
  unint64_t v529;
  _QWORD *v530;
  _QWORD *v531;
  unint64_t v532;
  unint64_t v533;
  _QWORD *v534;
  _QWORD *v535;
  size_t v536;
  size_t v537;
  uint64_t v538;
  int v539;
  void (*v540)(size_t, size_t, uint64_t);
  size_t v541;
  size_t v542;
  _BYTE *v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  unint64_t v547;
  _QWORD *v548;
  _QWORD *v549;
  unint64_t v550;
  unint64_t v551;
  void *v552;
  const void *v553;
  _QWORD *v554;
  _QWORD *v555;
  unint64_t v556;
  unint64_t v557;
  uint64_t v558;
  _QWORD *v559;
  _QWORD *v560;
  _OWORD *v561;
  _OWORD *v562;
  unint64_t v563;
  unint64_t v564;
  uint64_t v565;
  unint64_t v566;
  unint64_t v567;
  unint64_t v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  _OWORD *v581;
  __int128 *v582;
  __int128 v583;
  unint64_t v584;
  unint64_t v585;
  __int128 v586;
  _QWORD *v587;
  _QWORD *v588;
  unint64_t v589;
  void *v590;
  const void *v591;
  uint64_t v592;
  char *v593;
  char *v594;
  int v595;
  uint64_t *v596;
  uint64_t v597;
  size_t v598;
  uint64_t v599;
  _QWORD *v600;
  unint64_t v601;
  unint64_t v602;
  _QWORD *v603;
  _QWORD *v604;
  _QWORD *v605;
  _QWORD *v606;
  unint64_t v607;
  uint64_t v608;
  unint64_t v609;
  unint64_t v610;
  _QWORD *v611;
  _QWORD *v612;
  unint64_t v613;
  unint64_t v614;
  _QWORD *v615;
  _QWORD *v616;
  size_t v617;
  size_t v618;
  uint64_t v619;
  int v620;
  void (*v621)(size_t, size_t, uint64_t);
  size_t v622;
  size_t v623;
  _BYTE *v624;
  unint64_t v625;
  unint64_t v626;
  unint64_t v627;
  unint64_t v628;
  _QWORD *v629;
  _QWORD *v630;
  unint64_t v631;
  unint64_t v632;
  void *v633;
  const void *v634;
  _QWORD *v635;
  _QWORD *v636;
  unint64_t v637;
  unint64_t v638;
  uint64_t v639;
  _QWORD *v640;
  _QWORD *v641;
  _OWORD *v642;
  _OWORD *v643;
  unint64_t v644;
  unint64_t v645;
  uint64_t v646;
  unint64_t v647;
  unint64_t v648;
  unint64_t v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  __int128 v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  _OWORD *v662;
  __int128 *v663;
  __int128 v664;
  unint64_t v665;
  unint64_t v666;
  __int128 v667;
  _QWORD *v668;
  _QWORD *v669;
  unint64_t v670;
  _OWORD *v671;
  _OWORD *v672;
  unint64_t v673;
  unint64_t v674;
  unint64_t v675;
  size_t v676;
  size_t v677;
  size_t v678;
  unsigned int v679;
  unsigned int v680;
  unsigned int v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  size_t __n;
  size_t v690;
  unsigned int v691;
  unsigned int v692;
  unint64_t v693;
  unint64_t v694;
  uint64_t v695;
  size_t v696;
  size_t v697;
  size_t v698;
  uint64_t v699;
  size_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  unsigned int v705;
  unsigned int v706;
  uint64_t v707;
  unsigned int v708;
  uint64_t v709;
  unint64_t v710;
  unsigned int v711;
  unint64_t v712;
  unsigned int v713;
  unsigned int v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  unsigned int v719;
  unsigned int v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  size_t v729;
  unint64_t v730;
  size_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t AssociatedTypeWitness;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  unint64_t v742;
  uint64_t v743;
  size_t v744;
  unint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  unint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  char *v772;
  char *v773;
  uint64_t v774;
  void (*v775)(uint64_t);
  void (*v776)(uint64_t);
  const void *v777;
  void *v778;
  const void *v779;
  unint64_t v780;
  uint64_t v781;
  unsigned int v782;
  void *v783;
  void *v784;
  void *v785;
  size_t v786;
  const void *v787;
  const void *v788;
  unsigned int v790;
  unint64_t v791;
  unint64_t v792;
  unint64_t v793;
  unint64_t v794;

  v763 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v718 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v718 - 8);
  v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  v704 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v704 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v8 | v10 | 7;
  v721 = sub_23B1C5BDC();
  v12 = *(_QWORD *)(v721 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v13 | 7;
  v15 = v11 | v6 | v13;
  v740 = v4;
  v16 = *(_DWORD *)(v9 + 84);
  v679 = v16;
  v706 = *(_DWORD *)(v7 + 84);
  if (v706 > v16)
    v16 = *(_DWORD *)(v7 + 84);
  v692 = v16;
  if (v16 <= 0x7FFFFFFE)
    v16 = 2147483646;
  v782 = *(_DWORD *)(v4 + 84);
  v720 = v16;
  if (v16 <= v782)
    v16 = *(_DWORD *)(v4 + 84);
  v17 = *(_DWORD *)(v12 + 84);
  if (v17 <= 0x7FFFFFFE)
    v18 = 2147483646;
  else
    v18 = *(_DWORD *)(v12 + 84);
  v790 = v18;
  if (v16 <= v18)
    v16 = v18;
  v681 = v16;
  if (v16 <= 0x7FFFFFFF)
    v16 = 0x7FFFFFFF;
  v714 = v16;
  v708 = *(_DWORD *)(v12 + 84);
  v19 = v17 == 0;
  v774 = v6;
  v724 = v5 + v6;
  v753 = v11;
  v725 = v5 + v11;
  v717 = v7;
  v727 = *(_QWORD *)(v7 + 64) + 7;
  v702 = v10 + 8;
  v761 = v10;
  v703 = v9;
  v695 = *(_QWORD *)(v9 + 64) + 7;
  v786 = ((((v695 + ((v10 + 8 + (v727 & 0xFFFFFFFFFFFFFFF8)) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v747 = v13 | 7;
  v781 = v14 + 16;
  v20 = (v14 + 16 + ((v5 + v11 + ((v5 + v6) & ~v6)) & ~v11) + v786) & ~(v13 | 7);
  v707 = v13 + 12;
  v21 = *(_QWORD *)(v12 + 64);
  v700 = v21 + v13;
  v676 = v21 + 12;
  v699 = v13 + 10;
  v22 = (v13
       + 10
       + ((((((v21 + 12 + ((v21 + v13 + ((v13 + 12) & ~v13)) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v13;
  v728 = *(_QWORD *)(v721 - 8);
  v729 = v21;
  if (v19)
    ++v21;
  v731 = v21;
  v730 = v22;
  v698 = v21 + 7;
  v780 = ((((((((((v21 + 7 + v22) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
           + 19) & 0xFFFFFFFFFFFFFFF8)
         + 25) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v709 = v20;
  v732 = v11 | v6 | v13;
  v712 = v15 + v5;
  v694 = ((((v20 + v780 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v23 = v694 + ((v15 + v5) & ~v15);
  v745 = (v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(_QWORD *)(a3 + 24);
  v25 = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v741 = v25;
  v742 = (v23 + v27) & ~v27;
  v28 = *(_DWORD *)(v26 + 84);
  v737 = v26;
  v29 = *(_QWORD *)(v26 + 64);
  if (v28)
    v30 = *(_QWORD *)(v26 + 64);
  else
    v30 = v29 + 1;
  v716 = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(v716 - 8);
  v32 = *(_DWORD *)(v31 + 80) & 0xF8;
  v701 = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(v701 - 8);
  v34 = *(unsigned __int8 *)(v33 + 80);
  v35 = v32 | v34 | 7;
  v36 = *(_DWORD *)(v33 + 84);
  v705 = *(_DWORD *)(v31 + 84);
  if (v705 > v36)
    v36 = *(_DWORD *)(v31 + 84);
  v691 = v36;
  if (v36 <= 0x7FFFFFFE)
    v37 = 2147483646;
  else
    v37 = v36;
  v715 = v31;
  v38 = *(_QWORD *)(v31 + 64) + 7;
  v39 = *(_QWORD *)(v33 + 64) + 7;
  v40 = ((((v39 + ((v34 + 8 + (v38 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v690 = v30;
  v41 = ((((((v30 + v35 + v742) & ~v35) + v40 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v683 = v5 + v27;
  v697 = v30 + v35;
  v42 = *(_QWORD *)(v763 - 8);
  v43 = *(unsigned __int8 *)(v42 + 80);
  v682 = v5 + v43;
  if (*(_DWORD *)(v42 + 84))
    v44 = *(_QWORD *)(v42 + 64);
  else
    v44 = *(_QWORD *)(v42 + 64) + 1;
  v678 = v44;
  v45 = ((v5 + v43) & ~v43) + v44;
  v46 = ((v745 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v5 > v46)
    v46 = v5;
  if (v41 <= v40 + ((v30 + v35 + ((v5 + v27) & ~v27)) & ~v35) + 16)
    v41 = v40 + ((v30 + v35 + ((v5 + v27) & ~v27)) & ~v35) + 16;
  if (((v745 + 23) & 0xFFFFFFFFFFFFFFF8) + 8 <= v45)
    v47 = v45;
  else
    v47 = ((v745 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v46 > v41)
    v41 = v46;
  if (v41 <= v47)
    v48 = v47;
  else
    v48 = v41;
  v49 = v27 | v13 | v35;
  v710 = v49 + v29;
  v719 = v37;
  v713 = v28;
  if (v37 <= v28)
    v50 = v28;
  else
    v50 = v37;
  if (v50 <= v790)
    v50 = v790;
  v680 = v50;
  if (v50 <= 0x7FFFFFFF)
    v50 = 0x7FFFFFFF;
  v711 = v50;
  v770 = v27;
  v722 = v29 + v27;
  v51 = v48;
  v743 = v29 + v35;
  v52 = v13 | 7;
  v53 = (v781 + ((v29 + v35 + ((v29 + v27) & ~v27)) & ~v35) + v40) & ~v747;
  if (v782)
    v54 = v5;
  else
    v54 = v5 + 1;
  v688 = v24;
  v55 = *(_QWORD *)(v24 - 8);
  v693 = ((((v53 + v780 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v56 = v693 + ((v49 + v29) & ~v49);
  v57 = ((v56 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  __n = v54;
  v58 = ((((((v54 + v753 + ((v56 + v774) & ~v774)) & ~v753) + v786 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v59 = v29 + v774;
  v696 = v54 + v753;
  v60 = ((v54 + v753 + ((v29 + v774) & ~v774)) & ~v753) + v786 + 16;
  if (*(_DWORD *)(v55 + 84))
    v61 = *(_QWORD *)(v55 + 64);
  else
    v61 = *(_QWORD *)(v55 + 64) + 1;
  if (v29 > v57)
    v57 = v29;
  if (v58 <= v60)
    v58 = v60;
  v62 = ((v56 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v63 = *(unsigned __int8 *)(v55 + 80);
  v64 = v29 + v63;
  v677 = v61;
  if (v62 <= ((v29 + v63) & ~v63) + v61)
    v62 = ((v29 + v63) & ~v63) + v61;
  if (v57 <= v58)
    v57 = v58;
  if (v57 <= v62)
    v65 = v62;
  else
    v65 = v57;
  v66 = a2;
  v791 = v51;
  if (v65 + 1 <= v51 + 1)
    v67 = v51 + 1;
  else
    v67 = v65 + 1;
  v68 = *(unsigned __int8 *)(a2 + v67);
  if (v68 >= 2)
  {
    if (v67 <= 3)
      v69 = v67;
    else
      v69 = 4;
    __asm { BR              X17 }
  }
  v746 = ~v774;
  v70 = ~v753;
  v71 = ~v761;
  v72 = ~v13;
  v760 = v67;
  v762 = ~v770;
  if (v68 == 1)
  {
    v77 = ~v49;
    v78 = ~v63;
    switch(*(_BYTE *)(v66 + v65))
    {
      case 0:
        v79 = ~v35;
        v748 = ~v34;
        v764 = ~v52;
        v733 = v38;
        v792 = v53;
        v684 = v34 + 8;
        v754 = *(_QWORD *)(v701 - 8);
        v80 = ((((v39 + ((v34 + 8 + (v38 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
        v81 = v66;
        v775 = *(void (**)(uint64_t))(v737 + 32);
        v775(a1);
        v783 = (void *)((v710 + a1) & v77);
        v82 = (const void *)((v710 + v81) & v77);
        v787 = v82;
        v673 = v65;
        if (v713 == v711)
        {
          v83 = (*(uint64_t (**)(unint64_t))(v737 + 48))((v710 + v81) & v77);
          v84 = (void *)((v710 + a1) & v77);
          v82 = v787;
          v85 = v728;
          v86 = v40;
          v87 = v79;
          v88 = ~v770;
          goto LABEL_223;
        }
        v88 = ~v770;
        v162 = ((unint64_t)v82 + v722) & v762;
        v87 = v79;
        v163 = (v743 + v162) & v79;
        if (v719 == v711)
        {
          v85 = v728;
          if (v705 == v719)
          {
            v83 = (*(uint64_t (**)(unint64_t))(v715 + 48))((v743 + v162) & v79);
            v84 = (void *)((v710 + a1) & v77);
            v82 = v787;
LABEL_222:
            v87 = v79;
            v86 = v80;
            goto LABEL_223;
          }
          v211 = (unint64_t *)((v733 + v163) & 0xFFFFFFFFFFFFFFF8);
          v84 = (void *)((v710 + a1) & v77);
          if (v691 <= 0x7FFFFFFE)
          {
            v212 = *v211;
            goto LABEL_313;
          }
          v83 = (*(uint64_t (**)(unint64_t))(v754 + 48))(((unint64_t)v211 + v684) & v748);
        }
        else
        {
          v185 = v80 + v163;
          v85 = v728;
          if ((v680 & 0x80000000) == 0)
          {
            v86 = v80;
            v186 = *(_QWORD *)(v185 + 8);
            if (v186 >= 0xFFFFFFFF)
              LODWORD(v186) = -1;
            v83 = v186 + 1;
            v84 = (void *)((v710 + a1) & v77);
LABEL_223:
            if (v83)
            {
LABEL_224:
              memcpy(v84, v82, v693);
              v231 = v787;
              v232 = v730;
              v233 = v673;
              v234 = v792;
              v128 = v760;
LABEL_225:
              v235 = v731;
              goto LABEL_231;
            }
            v162 = ((unint64_t)v82 + v722) & v88;
            v163 = (v743 + v162) & v87;
LABEL_227:
            v236 = v86;
            v237 = v87;
            ((void (*)(void *, const void *, uint64_t))v775)(v84, v82, v741);
            v238 = ((unint64_t)v84 + v722) & v88;
            ((void (*)(unint64_t, unint64_t, uint64_t))v775)(v238, v162, v741);
            v239 = (v743 + v238) & v237;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v715 + 32))(v239, v163, v716);
            v240 = (_QWORD *)((v733 + v239) & 0xFFFFFFFFFFFFFFF8);
            v241 = (_QWORD *)((v733 + v163) & 0xFFFFFFFFFFFFFFF8);
            *v240 = *v241;
            v242 = v72;
            v243 = ((unint64_t)v240 + v684) & v748;
            v244 = ((unint64_t)v241 + v684) & v748;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v754 + 32))(v243, v244, v701);
            v245 = (_QWORD *)((v39 + v244) & 0xFFFFFFFFFFFFF8);
            v246 = (_QWORD *)((v39 + v243) & 0xFFFFFFFFFFFFF8);
            *v246 = *v245;
            *(_OWORD *)(((unint64_t)v246 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v245 + 15) & 0xFFFFFFFFFFFFF8);
            *(_OWORD *)(v236 + v239) = *(_OWORD *)(v236 + v163);
            v247 = (v781 + v236 + v239) & v764;
            v248 = (v781 + v236 + v163) & v764;
            *(_BYTE *)v247 = *(_BYTE *)v248;
            v249 = v247 | 4;
            v250 = *(_DWORD *)(v248 | 4);
            *(_BYTE *)(v249 + 4) = *(_BYTE *)((v248 | 4) + 4);
            *(_DWORD *)v249 = v250;
            *(_WORD *)(v247 + 10) = *(_WORD *)(v248 + 0xA);
            v251 = *(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 32);
            v251((v707 + v247) & v242, (v707 + v248) & v242, v721);
            v252 = (v700 + ((v707 + v247) & v242)) & v242;
            v253 = (v700 + ((v707 + v248) & v242)) & v242;
            v251(v252, v253, v721);
            v254 = (_BYTE *)(v252 + v729);
            *v254 = *(_BYTE *)(v253 + v729);
            v254[1] = *(_BYTE *)(v253 + v729 + 1);
            v254[2] = *(_BYTE *)(v253 + v729 + 2);
            v254[3] = *(_BYTE *)(v253 + v729 + 3);
            v254[4] = *(_BYTE *)(v253 + v729 + 4);
            v255 = (v252 + v729 + 12) & 0xFFFFFFFFFFFFFFF8;
            v256 = (v253 + v729 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)v255 = *(_OWORD *)v256;
            *(_BYTE *)(v255 + 16) = *(_BYTE *)(v256 + 16);
            *(_BYTE *)(v255 + 17) = *(_BYTE *)(v256 + 17);
            *(_BYTE *)(v255 + 18) = *(_BYTE *)(v256 + 18);
            *(_BYTE *)(v255 + 19) = *(_BYTE *)(v256 + 19);
            v257 = (v255 + 27) & 0xFFFFFFFFFFFFFFF8;
            v258 = (v256 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v257 = *(_QWORD *)v258;
            *(_BYTE *)(v257 + 8) = *(_BYTE *)(v258 + 8);
            *(_BYTE *)(v257 + 9) = *(_BYTE *)(v258 + 9);
            *(_BYTE *)(v257 + 10) = *(_BYTE *)(v258 + 10);
            *(_BYTE *)(v257 + 11) = *(_BYTE *)(v258 + 11);
            *(_BYTE *)(v257 + 12) = *(_BYTE *)(v258 + 12);
            v259 = (_QWORD *)((v255 + 47) & 0xFFFFFFFFFFFFF8);
            v260 = (_QWORD *)((v256 + 47) & 0xFFFFFFFFFFFFF8);
            *v259 = *v260;
            v261 = ((unint64_t)v259 + 15) & 0xFFFFFFFFFFFFFFF8;
            v262 = ((unint64_t)v260 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v261 = *(_QWORD *)v262;
            *(_BYTE *)(v261 + 8) = *(_BYTE *)(v262 + 8);
            *(_BYTE *)(v261 + 9) = *(_BYTE *)(v262 + 9);
            v263 = (void *)((v699 + v261) & v242);
            v264 = (const void *)((v699 + v262) & v242);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v85 + 48))(v264, 1, v721))
            {
              memcpy(v263, v264, v731);
            }
            else
            {
              v251((uint64_t)v263, (uint64_t)v264, v721);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v263, 0, 1, v721);
            }
            v235 = v729;
            v232 = v730;
            v233 = v673;
            v234 = v792;
            v128 = v760;
            v231 = v787;
            v265 = (_QWORD *)(((unint64_t)v263 + v698) & 0xFFFFFFFFFFFFFFF8);
            v266 = (_QWORD *)(((unint64_t)v264 + v698) & 0xFFFFFFFFFFFFFFF8);
            *v265 = *v266;
            v267 = ((unint64_t)v265 + 15) & 0xFFFFFFFFFFFFFFF8;
            v268 = ((unint64_t)v266 + 15) & 0xFFFFFFFFFFFFFFF8;
            v269 = *(_QWORD *)v268;
            *(_BYTE *)(v267 + 8) = *(_BYTE *)(v268 + 8);
            *(_QWORD *)v267 = v269;
            v270 = (_QWORD *)(((unint64_t)v265 + 31) & 0xFFFFFFFFFFFFF8);
            v271 = (_QWORD *)(((unint64_t)v266 + 31) & 0xFFFFFFFFFFFFF8);
            *v270 = *v271;
            v272 = (_OWORD *)(((unint64_t)v270 + 15) & 0xFFFFFFFFFFFFFFF8);
            v273 = (_OWORD *)(((unint64_t)v271 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v272 = *v273;
            v274 = ((unint64_t)v272 + 19) & 0xFFFFFFFFFFFFFFF8;
            v275 = ((unint64_t)v273 + 19) & 0xFFFFFFFFFFFFFFF8;
            v276 = *(_QWORD *)v275;
            *(_BYTE *)(v274 + 8) = *(_BYTE *)(v275 + 8);
            *(_QWORD *)v274 = v276;
            *(_BYTE *)(v274 + 9) = *(_BYTE *)(v275 + 9);
            v277 = (v274 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v278 = (v275 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v269) = *(_DWORD *)v278;
            *(_BYTE *)(v277 + 4) = *(_BYTE *)(v278 + 4);
            *(_DWORD *)v277 = v269;
            *(_OWORD *)((v274 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v275 + 25) & 0xFFFFFFFFFFFFF8);
            v279 = v247 + v780;
            v280 = *(_OWORD *)(v248 + v780 + 112);
            v282 = *(_OWORD *)(v248 + v780 + 64);
            v281 = *(_OWORD *)(v248 + v780 + 80);
            *(_OWORD *)(v279 + 96) = *(_OWORD *)(v248 + v780 + 96);
            *(_OWORD *)(v279 + 112) = v280;
            *(_OWORD *)(v279 + 64) = v282;
            *(_OWORD *)(v279 + 80) = v281;
            v283 = *(_OWORD *)(v248 + v780 + 176);
            v285 = *(_OWORD *)(v248 + v780 + 128);
            v284 = *(_OWORD *)(v248 + v780 + 144);
            *(_OWORD *)(v279 + 160) = *(_OWORD *)(v248 + v780 + 160);
            *(_OWORD *)(v279 + 176) = v283;
            *(_OWORD *)(v279 + 128) = v285;
            *(_OWORD *)(v279 + 144) = v284;
            v287 = *(_OWORD *)(v248 + v780 + 208);
            v286 = *(_OWORD *)(v248 + v780 + 224);
            v288 = *(_OWORD *)(v248 + v780 + 192);
            *(_QWORD *)(v279 + 240) = *(_QWORD *)(v248 + v780 + 240);
            *(_OWORD *)(v279 + 208) = v287;
            *(_OWORD *)(v279 + 224) = v286;
            *(_OWORD *)(v279 + 192) = v288;
            v289 = *(_OWORD *)(v248 + v780);
            v290 = *(_OWORD *)(v248 + v780 + 16);
            v291 = *(_OWORD *)(v248 + v780 + 48);
            *(_OWORD *)(v279 + 32) = *(_OWORD *)(v248 + v780 + 32);
            *(_OWORD *)(v279 + 48) = v291;
            *(_OWORD *)v279 = v289;
            *(_OWORD *)(v279 + 16) = v290;
            v292 = (_OWORD *)((v247 + v780 + 255) & 0xFFFFFFFFFFFFFFF8);
            v293 = (__int128 *)((v248 + v780 + 255) & 0xFFFFFFFFFFFFFFF8);
            v294 = *v293;
            *(_OWORD *)((char *)v292 + 9) = *(__int128 *)((char *)v293 + 9);
            *v292 = v294;
            v295 = (v247 + v780 + 287) & 0xFFFFFFFFFFFFFFF8;
            v296 = (v248 + v780 + 287) & 0xFFFFFFFFFFFFFFF8;
            v297 = *(_OWORD *)v296;
            *(_BYTE *)(v295 + 16) = *(_BYTE *)(v296 + 16);
            *(_OWORD *)v295 = v297;
            v298 = (_QWORD *)((v247 + v780 + 311) & 0xFFFFFFFFFFFFF8);
            v299 = (_QWORD *)((v248 + v780 + 311) & 0xFFFFFFFFFFFFF8);
            *v298 = *v299;
            *(_OWORD *)(((unint64_t)v298 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v299 + 15) & 0xFFFFFFFFFFFFF8);
            v84 = v783;
            if (!v708)
              goto LABEL_225;
LABEL_231:
            v116 = 0;
            v300 = ((((v234
                     + ((((((((((v232 + v235 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 19) & 0xFFFFFFFFFFFFFFF8)
                       + 25) & 0xFFFFFFFFFFFFFFF8)
                     + 327) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 16;
            v301 = (_QWORD *)(((unint64_t)v84 + v300) & 0xFFFFFFFFFFFFFFF8);
            v302 = (_QWORD *)(((unint64_t)v231 + v300) & 0xFFFFFFFFFFFFFFF8);
            *v301 = *v302;
            *(_QWORD *)(((unint64_t)v301 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v302 + 15) & 0xFFFFFFFFFFFFF8);
            v115 = 1;
            goto LABEL_270;
          }
          v84 = (void *)((v710 + a1) & v77);
          v223 = (v707 + ((v781 + v185) & v764)) & v72;
          if (v708 <= 0x7FFFFFFD)
          {
            v212 = *(_QWORD *)(((v676 + ((v700 + v223) & v72)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_313:
            if (v212 >= 0xFFFFFFFF)
              LODWORD(v212) = -1;
            v86 = v80;
            if ((v212 + 1) >= 2)
              goto LABEL_224;
            goto LABEL_227;
          }
          v83 = (*(uint64_t (**)(uint64_t))(v728 + 48))(v223);
        }
        v82 = v787;
        goto LABEL_222;
      case 1:
        v89 = ~v35;
        v765 = ~v747;
        v771 = ~v753;
        v749 = ~v34;
        v726 = v71;
        v734 = v38;
        v793 = v53;
        v685 = v34 + 8;
        v755 = *(_QWORD *)(v701 - 8);
        v90 = ((((v39 + ((v34 + 8 + (v38 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
        v674 = v65;
        v91 = *(void (**)(uint64_t))(v737 + 32);
        v92 = v66;
        v91(a1);
        v784 = (void *)((v710 + a1) & v77);
        v93 = (const void *)((v710 + v92) & v77);
        if (v713 == v711)
        {
          v94 = (*(uint64_t (**)(const void *))(v737 + 48))(v93);
          v95 = v728;
          v96 = v40;
          v97 = v771;
          v98 = v89;
          v99 = v762;
          v100 = v740;
LABEL_234:
          if (v94)
          {
LABEL_235:
            v303 = v784;
            memcpy(v784, v93, v693);
            v304 = v730;
            v305 = v793;
            v306 = AssociatedTypeWitness;
LABEL_236:
            v307 = v731;
            goto LABEL_242;
          }
          v164 = ((unint64_t)v93 + v722) & v99;
          v165 = (v743 + v164) & v98;
LABEL_238:
          v308 = v96;
          v309 = v98;
          v91((uint64_t)v784);
          v310 = ((unint64_t)v784 + v722) & v99;
          ((void (*)(unint64_t, unint64_t, uint64_t))v91)(v310, v164, v741);
          v311 = (v743 + v310) & v309;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v715 + 32))(v311, v165, v716);
          v312 = (_QWORD *)((v734 + v311) & 0xFFFFFFFFFFFFFFF8);
          v313 = (_QWORD *)((v734 + v165) & 0xFFFFFFFFFFFFFFF8);
          *v312 = *v313;
          v314 = v72;
          v315 = ((unint64_t)v312 + v685) & v749;
          v316 = ((unint64_t)v313 + v685) & v749;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v755 + 32))(v315, v316, v701);
          v317 = (_QWORD *)((v39 + v316) & 0xFFFFFFFFFFFFF8);
          v318 = (_QWORD *)((v39 + v315) & 0xFFFFFFFFFFFFF8);
          *v318 = *v317;
          *(_OWORD *)(((unint64_t)v318 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v317 + 15) & 0xFFFFFFFFFFFFF8);
          *(_OWORD *)(v308 + v311) = *(_OWORD *)(v308 + v165);
          v319 = (v781 + v308 + v311) & v765;
          v320 = (v781 + v308 + v165) & v765;
          *(_BYTE *)v319 = *(_BYTE *)v320;
          v321 = v319 | 4;
          v322 = *(_DWORD *)(v320 | 4);
          *(_BYTE *)(v321 + 4) = *(_BYTE *)((v320 | 4) + 4);
          *(_DWORD *)v321 = v322;
          *(_WORD *)(v319 + 10) = *(_WORD *)(v320 + 10);
          v323 = *(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 32);
          v323((v707 + v319) & v314, (v707 + v320) & v314, v721);
          v324 = (v700 + ((v707 + v319) & v314)) & v314;
          v325 = (v700 + ((v707 + v320) & v314)) & v314;
          v323(v324, v325, v721);
          v326 = (_BYTE *)(v324 + v729);
          *v326 = *(_BYTE *)(v325 + v729);
          v326[1] = *(_BYTE *)(v325 + v729 + 1);
          v326[2] = *(_BYTE *)(v325 + v729 + 2);
          v326[3] = *(_BYTE *)(v325 + v729 + 3);
          v326[4] = *(_BYTE *)(v325 + v729 + 4);
          v327 = (v324 + v729 + 12) & 0xFFFFFFFFFFFFFFF8;
          v328 = (v325 + v729 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_OWORD *)v327 = *(_OWORD *)v328;
          *(_BYTE *)(v327 + 16) = *(_BYTE *)(v328 + 16);
          *(_BYTE *)(v327 + 17) = *(_BYTE *)(v328 + 17);
          *(_BYTE *)(v327 + 18) = *(_BYTE *)(v328 + 18);
          *(_BYTE *)(v327 + 19) = *(_BYTE *)(v328 + 19);
          v329 = (v327 + 27) & 0xFFFFFFFFFFFFFFF8;
          v330 = (v328 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v329 = *(_QWORD *)v330;
          *(_BYTE *)(v329 + 8) = *(_BYTE *)(v330 + 8);
          *(_BYTE *)(v329 + 9) = *(_BYTE *)(v330 + 9);
          *(_BYTE *)(v329 + 10) = *(_BYTE *)(v330 + 10);
          *(_BYTE *)(v329 + 11) = *(_BYTE *)(v330 + 11);
          *(_BYTE *)(v329 + 12) = *(_BYTE *)(v330 + 12);
          v331 = (_QWORD *)((v327 + 47) & 0xFFFFFFFFFFFFF8);
          v332 = (_QWORD *)((v328 + 47) & 0xFFFFFFFFFFFFF8);
          *v331 = *v332;
          v333 = ((unint64_t)v331 + 15) & 0xFFFFFFFFFFFFFFF8;
          v334 = ((unint64_t)v332 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v333 = *(_QWORD *)v334;
          *(_BYTE *)(v333 + 8) = *(_BYTE *)(v334 + 8);
          *(_BYTE *)(v333 + 9) = *(_BYTE *)(v334 + 9);
          v335 = (void *)((v699 + v333) & v314);
          v336 = (const void *)((v699 + v334) & v314);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v95 + 48))(v336, 1, v721))
          {
            memcpy(v335, v336, v731);
          }
          else
          {
            v323((uint64_t)v335, (uint64_t)v336, v721);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v335, 0, 1, v721);
          }
          v307 = v729;
          v304 = v730;
          v305 = v793;
          v306 = AssociatedTypeWitness;
          v100 = v740;
          v303 = v784;
          v337 = (_QWORD *)(((unint64_t)v335 + v698) & 0xFFFFFFFFFFFFFFF8);
          v338 = (_QWORD *)(((unint64_t)v336 + v698) & 0xFFFFFFFFFFFFFFF8);
          *v337 = *v338;
          v339 = ((unint64_t)v337 + 15) & 0xFFFFFFFFFFFFFFF8;
          v340 = ((unint64_t)v338 + 15) & 0xFFFFFFFFFFFFFFF8;
          v341 = *(_QWORD *)v340;
          *(_BYTE *)(v339 + 8) = *(_BYTE *)(v340 + 8);
          *(_QWORD *)v339 = v341;
          v342 = (_QWORD *)(((unint64_t)v337 + 31) & 0xFFFFFFFFFFFFF8);
          v343 = (_QWORD *)(((unint64_t)v338 + 31) & 0xFFFFFFFFFFFFF8);
          *v342 = *v343;
          v344 = (_OWORD *)(((unint64_t)v342 + 15) & 0xFFFFFFFFFFFFFFF8);
          v345 = (_OWORD *)(((unint64_t)v343 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v344 = *v345;
          v346 = ((unint64_t)v344 + 19) & 0xFFFFFFFFFFFFFFF8;
          v347 = ((unint64_t)v345 + 19) & 0xFFFFFFFFFFFFFFF8;
          v348 = *(_QWORD *)v347;
          *(_BYTE *)(v346 + 8) = *(_BYTE *)(v347 + 8);
          *(_QWORD *)v346 = v348;
          *(_BYTE *)(v346 + 9) = *(_BYTE *)(v347 + 9);
          v349 = (v346 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v350 = (v347 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          LODWORD(v341) = *(_DWORD *)v350;
          *(_BYTE *)(v349 + 4) = *(_BYTE *)(v350 + 4);
          *(_DWORD *)v349 = v341;
          *(_OWORD *)((v346 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v347 + 25) & 0xFFFFFFFFFFFFF8);
          v351 = v319 + v780;
          v352 = *(_OWORD *)(v320 + v780 + 112);
          v354 = *(_OWORD *)(v320 + v780 + 64);
          v353 = *(_OWORD *)(v320 + v780 + 80);
          *(_OWORD *)(v351 + 96) = *(_OWORD *)(v320 + v780 + 96);
          *(_OWORD *)(v351 + 112) = v352;
          *(_OWORD *)(v351 + 64) = v354;
          *(_OWORD *)(v351 + 80) = v353;
          v355 = *(_OWORD *)(v320 + v780 + 176);
          v357 = *(_OWORD *)(v320 + v780 + 128);
          v356 = *(_OWORD *)(v320 + v780 + 144);
          *(_OWORD *)(v351 + 160) = *(_OWORD *)(v320 + v780 + 160);
          *(_OWORD *)(v351 + 176) = v355;
          *(_OWORD *)(v351 + 128) = v357;
          *(_OWORD *)(v351 + 144) = v356;
          v359 = *(_OWORD *)(v320 + v780 + 208);
          v358 = *(_OWORD *)(v320 + v780 + 224);
          v360 = *(_OWORD *)(v320 + v780 + 192);
          *(_QWORD *)(v351 + 240) = *(_QWORD *)(v320 + v780 + 240);
          *(_OWORD *)(v351 + 208) = v359;
          *(_OWORD *)(v351 + 224) = v358;
          *(_OWORD *)(v351 + 192) = v360;
          v361 = *(_OWORD *)(v320 + v780);
          v362 = *(_OWORD *)(v320 + v780 + 16);
          v363 = *(_OWORD *)(v320 + v780 + 48);
          *(_OWORD *)(v351 + 32) = *(_OWORD *)(v320 + v780 + 32);
          *(_OWORD *)(v351 + 48) = v363;
          *(_OWORD *)v351 = v361;
          *(_OWORD *)(v351 + 16) = v362;
          v364 = (_OWORD *)((v319 + v780 + 255) & 0xFFFFFFFFFFFFFFF8);
          v365 = (__int128 *)((v320 + v780 + 255) & 0xFFFFFFFFFFFFFFF8);
          v366 = *v365;
          *(_OWORD *)((char *)v364 + 9) = *(__int128 *)((char *)v365 + 9);
          *v364 = v366;
          v367 = (v319 + v780 + 287) & 0xFFFFFFFFFFFFFFF8;
          v368 = (v320 + v780 + 287) & 0xFFFFFFFFFFFFFFF8;
          v369 = *(_OWORD *)v368;
          *(_BYTE *)(v367 + 16) = *(_BYTE *)(v368 + 16);
          *(_OWORD *)v367 = v369;
          v370 = (_QWORD *)((v319 + v780 + 311) & 0xFFFFFFFFFFFFF8);
          v371 = (_QWORD *)((v320 + v780 + 311) & 0xFFFFFFFFFFFFF8);
          *v370 = *v371;
          *(_OWORD *)(((unint64_t)v370 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v371 + 15) & 0xFFFFFFFFFFFFF8);
          v97 = v771;
          if (!v708)
            goto LABEL_236;
LABEL_242:
          v372 = ((((v305
                   + ((((((((((v304 + v307 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 19) & 0xFFFFFFFFFFFFFFF8)
                     + 25) & 0xFFFFFFFFFFFFFFF8)
                   + 327) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 16;
          v373 = (void *)(((unint64_t)v303 + v774 + v372) & v746);
          v374 = (const void *)(((unint64_t)v93 + v774 + v372) & v746);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v100 + 48))(v374, 1, v306))
          {
            memcpy(v373, v374, __n);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v100 + 32))(v373, v374, v306);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v373, 0, 1, v306);
          }
          v128 = v760;
          v375 = (char *)(((unint64_t)v373 + v696) & v97);
          v376 = (char *)(((unint64_t)v374 + v696) & v97);
          if (v706 == v720)
          {
            if (!(*(unsigned int (**)(unint64_t))(v717 + 48))(((unint64_t)v374 + v696) & v97))
              goto LABEL_255;
          }
          else
          {
            v377 = (_QWORD *)((unint64_t)&v376[v727] & 0xFFFFFFFFFFFFFFF8);
            if (v692 > 0x7FFFFFFE)
            {
              if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v703 + 48))(((unint64_t)v377 + v702) & v726, v679, v704))
              {
LABEL_255:
                v377 = (_QWORD *)((unint64_t)&v376[v727] & 0xFFFFFFFFFFFFFFF8);
LABEL_256:
                (*(void (**)(char *, char *, uint64_t))(v717 + 32))(v375, v376, v718);
                v379 = (_QWORD *)((unint64_t)&v375[v727] & 0xFFFFFFFFFFFFFFF8);
                *v379 = *v377;
                v380 = ((unint64_t)v379 + v702) & v726;
                v381 = ((unint64_t)v377 + v702) & v726;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v703 + 32))(v380, v381, v704);
                v382 = (_QWORD *)((v695 + v380) & 0xFFFFFFFFFFFFF8);
                v383 = (_QWORD *)((v695 + v381) & 0xFFFFFFFFFFFFF8);
                *v382 = *v383;
                *(_OWORD *)(((unint64_t)v382 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v383
                                                                                             + 15) & 0xFFFFFFFFFFFFF8);
                goto LABEL_257;
              }
            }
            else
            {
              v378 = *v377;
              if (*v377 >= 0xFFFFFFFFuLL)
                LODWORD(v378) = -1;
              if ((v378 + 1) < 2)
                goto LABEL_256;
            }
          }
          memcpy(v375, v376, v786);
LABEL_257:
          *(_QWORD *)&v375[v786] = *(_QWORD *)&v376[v786];
          v384 = (_QWORD *)((unint64_t)&v375[v786 + 15] & 0xFFFFFFFFFFFFF8);
          v385 = (_QWORD *)((unint64_t)&v376[v786 + 15] & 0xFFFFFFFFFFFFFFF8);
          *v384 = *v385;
          *(_QWORD *)(((unint64_t)v384 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v385 + 15) & 0xFFFFFFFFFFFFF8);
          v116 = 1;
          v791 = v674;
          v115 = 1;
          v75 = a1;
          goto LABEL_157;
        }
        v99 = v762;
        v164 = ((unint64_t)v93 + v722) & v762;
        v98 = v89;
        v165 = (v743 + v164) & v89;
        if (v719 == v711)
        {
          v95 = v728;
          if (v705 == v719)
          {
            v94 = (*(uint64_t (**)(unint64_t))(v715 + 48))((v743 + v164) & v89);
            v98 = v89;
            v96 = v40;
LABEL_168:
            v97 = v771;
            v100 = v740;
            goto LABEL_234;
          }
          v213 = (unint64_t *)((v734 + v165) & 0xFFFFFFFFFFFFFFF8);
          v100 = v740;
          if (v691 <= 0x7FFFFFFE)
          {
            v214 = *v213;
            goto LABEL_318;
          }
          v94 = (*(uint64_t (**)(unint64_t))(v755 + 48))(((unint64_t)v213 + v685) & v749);
        }
        else
        {
          v187 = v40 + v165;
          v95 = v728;
          if ((v680 & 0x80000000) == 0)
          {
            v96 = v40;
            v188 = *(_QWORD *)(v187 + 8);
            if (v188 >= 0xFFFFFFFF)
              LODWORD(v188) = -1;
            v94 = v188 + 1;
            goto LABEL_168;
          }
          v224 = (v707 + ((v781 + v187) & v765)) & v72;
          v100 = v740;
          if (v708 <= 0x7FFFFFFD)
          {
            v214 = *(_QWORD *)(((v676 + ((v700 + v224) & v72)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_318:
            if (v214 >= 0xFFFFFFFF)
              LODWORD(v214) = -1;
            v96 = v90;
            v97 = v771;
            if ((v214 + 1) >= 2)
              goto LABEL_235;
            goto LABEL_238;
          }
          v94 = (*(uint64_t (**)(uint64_t))(v728 + 48))(v224);
        }
        v98 = v89;
        v96 = v90;
        v97 = v771;
        goto LABEL_234;
      case 2:
        v101 = v71;
        v102 = v66;
        (*(void (**)(uint64_t))(v737 + 32))(a1);
        v103 = (void *)((v59 + a1) & v746);
        v104 = (const void *)((v59 + v102) & v746);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v740 + 48))(v104, 1, AssociatedTypeWitness))
        {
          memcpy(v103, v104, __n);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v740 + 32))(v103, v104, AssociatedTypeWitness);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v740 + 56))(v103, 0, 1, AssociatedTypeWitness);
        }
        v75 = a1;
        v128 = v760;
        v174 = (char *)(((unint64_t)v103 + v696) & v70);
        v175 = (_BYTE *)(((unint64_t)v104 + v696) & v70);
        if (v706 == v720)
        {
          if (!(*(unsigned int (**)(unint64_t))(v717 + 48))(((unint64_t)v104 + v696) & v70))
            goto LABEL_187;
        }
        else
        {
          v176 = (uint64_t *)((unint64_t)&v175[v727] & 0xFFFFFFFFFFFFFFF8);
          if (v692 > 0x7FFFFFFE)
          {
            if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v703 + 48))(((unint64_t)v176 + v702) & v101, v679, v704))
            {
LABEL_187:
              v176 = (uint64_t *)((unint64_t)&v175[v727] & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_188;
            }
          }
          else
          {
            v177 = *v176;
            if ((unint64_t)*v176 >= 0xFFFFFFFF)
              LODWORD(v177) = -1;
            if ((v177 + 1) < 2)
            {
LABEL_188:
              (*(void (**)(char *, _BYTE *, uint64_t))(v717 + 32))(v174, v175, v718);
              v197 = (_QWORD *)((unint64_t)&v174[v727] & 0xFFFFFFFFFFFFFFF8);
              *v197 = *v176;
              v198 = ((unint64_t)v197 + v702) & v101;
              v199 = ((unint64_t)v176 + v702) & v101;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v703 + 32))(v198, v199, v704);
              v200 = (_QWORD *)((v695 + v198) & 0xFFFFFFFFFFFFF8);
              v201 = (_QWORD *)((v695 + v199) & 0xFFFFFFFFFFFFF8);
              *v200 = *v201;
              *(_OWORD *)(((unint64_t)v200 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v201 + 15) & 0xFFFFFFFFFFFFF8);
LABEL_189:
              v202 = &v174[v786];
              *v202 = v175[v786];
              *((_QWORD *)v202 + 1) = *(_QWORD *)&v175[v786 + 8];
              v115 = 1;
              v116 = 2;
              v791 = v65;
              goto LABEL_157;
            }
          }
        }
        memcpy(v174, v175, v786);
        goto LABEL_189;
      case 3:
        v105 = ~v35;
        v750 = ~v34;
        v766 = ~v52;
        v735 = v38;
        v794 = v53;
        v686 = v34 + 8;
        v756 = *(_QWORD *)(v701 - 8);
        v106 = ((((v39 + ((v34 + 8 + (v38 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        v107 = v66;
        v776 = *(void (**)(uint64_t))(v737 + 32);
        v776(a1);
        v785 = (void *)((v710 + a1) & v77);
        v108 = (const void *)((v710 + v107) & v77);
        v788 = v108;
        v675 = v65;
        if (v713 == v711)
        {
          v109 = (*(uint64_t (**)(unint64_t))(v737 + 48))((v710 + v107) & v77);
          v110 = (void *)((v710 + a1) & v77);
          v108 = v788;
          v111 = v728;
          v112 = v40;
          v113 = v105;
          v114 = ~v770;
LABEL_261:
          if (v109)
          {
LABEL_262:
            memcpy(v110, v108, v693);
            v386 = v788;
            v387 = v730;
            v233 = v675;
            v388 = v794;
            v128 = v760;
            goto LABEL_263;
          }
          v166 = ((unint64_t)v108 + v722) & v114;
          v167 = (v743 + v166) & v113;
LABEL_265:
          v390 = v112;
          v391 = v113;
          ((void (*)(void *, const void *, uint64_t))v776)(v110, v108, v741);
          v392 = ((unint64_t)v110 + v722) & v114;
          ((void (*)(unint64_t, unint64_t, uint64_t))v776)(v392, v166, v741);
          v393 = (v743 + v392) & v391;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v715 + 32))(v393, v167, v716);
          v394 = (_QWORD *)((v735 + v393) & 0xFFFFFFFFFFFFFFF8);
          v395 = (_QWORD *)((v735 + v167) & 0xFFFFFFFFFFFFFFF8);
          *v394 = *v395;
          v396 = v72;
          v397 = ((unint64_t)v394 + v686) & v750;
          v398 = ((unint64_t)v395 + v686) & v750;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v756 + 32))(v397, v398, v701);
          v399 = (_QWORD *)((v39 + v398) & 0xFFFFFFFFFFFFF8);
          v400 = (_QWORD *)((v39 + v397) & 0xFFFFFFFFFFFFF8);
          *v400 = *v399;
          *(_OWORD *)(((unint64_t)v400 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v399 + 15) & 0xFFFFFFFFFFFFF8);
          *(_OWORD *)(v390 + v393) = *(_OWORD *)(v390 + v167);
          v401 = (v781 + v390 + v393) & v766;
          v402 = (v781 + v390 + v167) & v766;
          *(_BYTE *)v401 = *(_BYTE *)v402;
          v403 = v401 | 4;
          v404 = *(_DWORD *)(v402 | 4);
          *(_BYTE *)(v403 + 4) = *(_BYTE *)((v402 | 4) + 4);
          *(_DWORD *)v403 = v404;
          *(_WORD *)(v401 + 10) = *(_WORD *)(v402 + 0xA);
          v405 = *(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 32);
          v405((v707 + v401) & v396, (v707 + v402) & v396, v721);
          v406 = (v700 + ((v707 + v401) & v396)) & v396;
          v407 = (v700 + ((v707 + v402) & v396)) & v396;
          v405(v406, v407, v721);
          v408 = (_BYTE *)(v406 + v729);
          *v408 = *(_BYTE *)(v407 + v729);
          v408[1] = *(_BYTE *)(v407 + v729 + 1);
          v408[2] = *(_BYTE *)(v407 + v729 + 2);
          v408[3] = *(_BYTE *)(v407 + v729 + 3);
          v408[4] = *(_BYTE *)(v407 + v729 + 4);
          v409 = (v406 + v729 + 12) & 0xFFFFFFFFFFFFFFF8;
          v410 = (v407 + v729 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_OWORD *)v409 = *(_OWORD *)v410;
          *(_BYTE *)(v409 + 16) = *(_BYTE *)(v410 + 16);
          *(_BYTE *)(v409 + 17) = *(_BYTE *)(v410 + 17);
          *(_BYTE *)(v409 + 18) = *(_BYTE *)(v410 + 18);
          *(_BYTE *)(v409 + 19) = *(_BYTE *)(v410 + 19);
          v411 = (v409 + 27) & 0xFFFFFFFFFFFFFFF8;
          v412 = (v410 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v411 = *(_QWORD *)v412;
          *(_BYTE *)(v411 + 8) = *(_BYTE *)(v412 + 8);
          *(_BYTE *)(v411 + 9) = *(_BYTE *)(v412 + 9);
          *(_BYTE *)(v411 + 10) = *(_BYTE *)(v412 + 10);
          *(_BYTE *)(v411 + 11) = *(_BYTE *)(v412 + 11);
          *(_BYTE *)(v411 + 12) = *(_BYTE *)(v412 + 12);
          v413 = (_QWORD *)((v409 + 47) & 0xFFFFFFFFFFFFF8);
          v414 = (_QWORD *)((v410 + 47) & 0xFFFFFFFFFFFFF8);
          *v413 = *v414;
          v415 = ((unint64_t)v413 + 15) & 0xFFFFFFFFFFFFFFF8;
          v416 = ((unint64_t)v414 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v415 = *(_QWORD *)v416;
          *(_BYTE *)(v415 + 8) = *(_BYTE *)(v416 + 8);
          *(_BYTE *)(v415 + 9) = *(_BYTE *)(v416 + 9);
          v417 = (void *)((v699 + v415) & v396);
          v418 = (const void *)((v699 + v416) & v396);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v111 + 48))(v418, 1, v721))
          {
            memcpy(v417, v418, v731);
          }
          else
          {
            v405((uint64_t)v417, (uint64_t)v418, v721);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v417, 0, 1, v721);
          }
          v389 = v729;
          v387 = v730;
          v233 = v675;
          v388 = v794;
          v128 = v760;
          v386 = v788;
          v419 = (_QWORD *)(((unint64_t)v417 + v698) & 0xFFFFFFFFFFFFFFF8);
          v420 = (_QWORD *)(((unint64_t)v418 + v698) & 0xFFFFFFFFFFFFFFF8);
          *v419 = *v420;
          v421 = ((unint64_t)v419 + 15) & 0xFFFFFFFFFFFFFFF8;
          v422 = ((unint64_t)v420 + 15) & 0xFFFFFFFFFFFFFFF8;
          v423 = *(_QWORD *)v422;
          *(_BYTE *)(v421 + 8) = *(_BYTE *)(v422 + 8);
          *(_QWORD *)v421 = v423;
          v424 = (_QWORD *)(((unint64_t)v419 + 31) & 0xFFFFFFFFFFFFF8);
          v425 = (_QWORD *)(((unint64_t)v420 + 31) & 0xFFFFFFFFFFFFF8);
          *v424 = *v425;
          v426 = (_OWORD *)(((unint64_t)v424 + 15) & 0xFFFFFFFFFFFFFFF8);
          v427 = (_OWORD *)(((unint64_t)v425 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v426 = *v427;
          v428 = ((unint64_t)v426 + 19) & 0xFFFFFFFFFFFFFFF8;
          v429 = ((unint64_t)v427 + 19) & 0xFFFFFFFFFFFFFFF8;
          v430 = *(_QWORD *)v429;
          *(_BYTE *)(v428 + 8) = *(_BYTE *)(v429 + 8);
          *(_QWORD *)v428 = v430;
          *(_BYTE *)(v428 + 9) = *(_BYTE *)(v429 + 9);
          v431 = (v428 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v432 = (v429 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          LODWORD(v423) = *(_DWORD *)v432;
          *(_BYTE *)(v431 + 4) = *(_BYTE *)(v432 + 4);
          *(_DWORD *)v431 = v423;
          *(_OWORD *)((v428 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v429 + 25) & 0xFFFFFFFFFFFFF8);
          v433 = v401 + v780;
          v434 = *(_OWORD *)(v402 + v780 + 112);
          v436 = *(_OWORD *)(v402 + v780 + 64);
          v435 = *(_OWORD *)(v402 + v780 + 80);
          *(_OWORD *)(v433 + 96) = *(_OWORD *)(v402 + v780 + 96);
          *(_OWORD *)(v433 + 112) = v434;
          *(_OWORD *)(v433 + 64) = v436;
          *(_OWORD *)(v433 + 80) = v435;
          v437 = *(_OWORD *)(v402 + v780 + 176);
          v439 = *(_OWORD *)(v402 + v780 + 128);
          v438 = *(_OWORD *)(v402 + v780 + 144);
          *(_OWORD *)(v433 + 160) = *(_OWORD *)(v402 + v780 + 160);
          *(_OWORD *)(v433 + 176) = v437;
          *(_OWORD *)(v433 + 128) = v439;
          *(_OWORD *)(v433 + 144) = v438;
          v441 = *(_OWORD *)(v402 + v780 + 208);
          v440 = *(_OWORD *)(v402 + v780 + 224);
          v442 = *(_OWORD *)(v402 + v780 + 192);
          *(_QWORD *)(v433 + 240) = *(_QWORD *)(v402 + v780 + 240);
          *(_OWORD *)(v433 + 208) = v441;
          *(_OWORD *)(v433 + 224) = v440;
          *(_OWORD *)(v433 + 192) = v442;
          v443 = *(_OWORD *)(v402 + v780);
          v444 = *(_OWORD *)(v402 + v780 + 16);
          v445 = *(_OWORD *)(v402 + v780 + 48);
          *(_OWORD *)(v433 + 32) = *(_OWORD *)(v402 + v780 + 32);
          *(_OWORD *)(v433 + 48) = v445;
          *(_OWORD *)v433 = v443;
          *(_OWORD *)(v433 + 16) = v444;
          v446 = (_OWORD *)((v401 + v780 + 255) & 0xFFFFFFFFFFFFFFF8);
          v447 = (__int128 *)((v402 + v780 + 255) & 0xFFFFFFFFFFFFFFF8);
          v448 = *v447;
          *(_OWORD *)((char *)v446 + 9) = *(__int128 *)((char *)v447 + 9);
          *v446 = v448;
          v449 = (v401 + v780 + 287) & 0xFFFFFFFFFFFFFFF8;
          v450 = (v402 + v780 + 287) & 0xFFFFFFFFFFFFFFF8;
          v451 = *(_OWORD *)v450;
          *(_BYTE *)(v449 + 16) = *(_BYTE *)(v450 + 16);
          *(_OWORD *)v449 = v451;
          v452 = (_QWORD *)((v401 + v780 + 311) & 0xFFFFFFFFFFFFF8);
          v453 = (_QWORD *)((v402 + v780 + 311) & 0xFFFFFFFFFFFFF8);
          *v452 = *v453;
          *(_OWORD *)(((unint64_t)v452 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v453 + 15) & 0xFFFFFFFFFFFFF8);
          v110 = v785;
          if (v708)
          {
LABEL_269:
            v454 = ((((v388
                     + ((((((((((v387 + v389 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 19) & 0xFFFFFFFFFFFFFFF8)
                       + 25) & 0xFFFFFFFFFFFFFFF8)
                     + 327) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 16;
            v455 = (_OWORD *)(((unint64_t)v110 + v454) & 0xFFFFFFFFFFFFFFF8);
            v456 = (_OWORD *)(((unint64_t)v386 + v454) & 0xFFFFFFFFFFFFFFF8);
            *v455 = *v456;
            *(_QWORD *)(((unint64_t)v455 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v456 + 23) & 0xFFFFFFFFFFFFF8);
            v115 = 1;
            v116 = 3;
LABEL_270:
            v791 = v233;
            v75 = a1;
            goto LABEL_157;
          }
LABEL_263:
          v389 = v731;
          goto LABEL_269;
        }
        v114 = ~v770;
        v166 = ((unint64_t)v108 + v722) & v762;
        v113 = v105;
        v167 = (v743 + v166) & v105;
        if (v719 == v711)
        {
          v111 = v728;
          if (v705 == v719)
          {
            v109 = (*(uint64_t (**)(unint64_t))(v715 + 48))((v743 + v166) & v105);
            v110 = (void *)((v710 + a1) & v77);
            v108 = v788;
LABEL_260:
            v113 = v105;
            v112 = v106;
            goto LABEL_261;
          }
          v215 = (unint64_t *)((v735 + v167) & 0xFFFFFFFFFFFFFFF8);
          v110 = (void *)((v710 + a1) & v77);
          if (v691 <= 0x7FFFFFFE)
          {
            v216 = *v215;
            goto LABEL_323;
          }
          v109 = (*(uint64_t (**)(unint64_t))(v756 + 48))(((unint64_t)v215 + v686) & v750);
        }
        else
        {
          v189 = v106 + v167;
          v111 = v728;
          if ((v680 & 0x80000000) == 0)
          {
            v112 = v106;
            v190 = *(_QWORD *)(v189 + 8);
            if (v190 >= 0xFFFFFFFF)
              LODWORD(v190) = -1;
            v109 = v190 + 1;
            v110 = (void *)((v710 + a1) & v77);
            goto LABEL_261;
          }
          v110 = (void *)((v710 + a1) & v77);
          v225 = (v707 + ((v781 + v189) & v766)) & v72;
          if (v708 <= 0x7FFFFFFD)
          {
            v216 = *(_QWORD *)(((v676 + ((v700 + v225) & v72)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_323:
            if (v216 >= 0xFFFFFFFF)
              LODWORD(v216) = -1;
            v112 = v106;
            if ((v216 + 1) >= 2)
              goto LABEL_262;
            goto LABEL_265;
          }
          v109 = (*(uint64_t (**)(uint64_t))(v728 + 48))(v225);
        }
        v108 = v788;
        goto LABEL_260;
      case 4:
        v75 = a1;
        (*(void (**)(uint64_t))(v737 + 32))(a1);
        v115 = 1;
        v116 = 4;
        goto LABEL_155;
      case 5:
        v75 = a1;
        (*(void (**)(uint64_t))(v737 + 32))(a1);
        v115 = 1;
        v116 = 5;
        goto LABEL_155;
      case 6:
        v75 = a1;
        v117 = v66;
        (*(void (**)(uint64_t))(v737 + 32))(a1);
        v118 = (void *)((v64 + a1) & v78);
        v119 = (const void *)((v64 + v117) & v78);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v55 + 48))(v119, 1, v688))
        {
          memcpy(v118, v119, v677);
          v115 = 1;
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v55 + 32))(v118, v119, v688);
          v115 = 1;
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v118, 0, 1, v688);
        }
        v116 = 6;
        goto LABEL_155;
      case 7:
        v75 = a1;
        (*(void (**)(uint64_t))(v737 + 32))(a1);
        v115 = 1;
        v116 = 7;
LABEL_155:
        v791 = v65;
        goto LABEL_156;
      default:
        if (v65 <= 3)
          v73 = v65;
        else
          v73 = 4;
        __asm { BR              X14 }
        return result;
    }
  }
  v75 = a1;
  v76 = AssociatedTypeWitness;
  v120 = ~v732;
  v121 = ~v43;
  switch(*(_BYTE *)(v66 + v51))
  {
    case 0:
      v122 = ~v753;
      v767 = ~v747;
      v123 = v71;
      v124 = *(void (**)(uint64_t))(v740 + 32);
      v125 = v66;
      v124(a1);
      v772 = (char *)((v712 + a1) & v120);
      v126 = (const void *)((v712 + v125) & v120);
      v777 = v126;
      if (v782 == v714)
      {
        v127 = (*(uint64_t (**)(unint64_t))(v740 + 48))((v712 + v125) & v120);
LABEL_99:
        v126 = v777;
        goto LABEL_100;
      }
      v168 = ((unint64_t)v126 + v724) & v746;
      v169 = (v725 + v168) & v122;
      if (v720 == v714)
      {
        if (v706 == v720)
        {
          v127 = (*(uint64_t (**)(unint64_t))(v717 + 48))((v725 + v168) & v122);
          goto LABEL_99;
        }
        v217 = (unint64_t *)((v727 + v169) & 0xFFFFFFFFFFFFFFF8);
        v128 = v760;
        v129 = (char *)((v712 + a1) & v120);
        if (v692 <= 0x7FFFFFFE)
        {
          v218 = *v217;
          goto LABEL_328;
        }
        v227 = (*(uint64_t (**)(unint64_t))(v703 + 48))(((unint64_t)v217 + v702) & v123);
      }
      else
      {
        v191 = v786 + v169;
        if ((v681 & 0x80000000) == 0)
        {
          v192 = *(_QWORD *)(v191 + 8);
          if (v192 >= 0xFFFFFFFF)
            LODWORD(v192) = -1;
          v127 = v192 + 1;
LABEL_100:
          v128 = v760;
          v129 = (char *)((v712 + a1) & v120);
          if (v127)
          {
LABEL_101:
            memcpy(v129, v126, v694);
            v130 = v777;
            v131 = v730;
            v132 = v709;
            goto LABEL_102;
          }
          goto LABEL_273;
        }
        v129 = (char *)((v712 + a1) & v120);
        v226 = (v707 + ((v781 + v191) & v767)) & v72;
        v128 = v760;
        if (v708 <= 0x7FFFFFFD)
        {
          v218 = *(_QWORD *)(((v676 + ((v700 + v226) & v72)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_328:
          if (v218 >= 0xFFFFFFFF)
            LODWORD(v218) = -1;
          if ((v218 + 1) >= 2)
            goto LABEL_101;
LABEL_274:
          ((void (*)(char *, const void *, uint64_t))v124)(v129, v126, AssociatedTypeWitness);
          v457 = (unint64_t)&v129[v724];
          v458 = v72;
          v459 = v457 & v746;
          ((void (*)(unint64_t, unint64_t, uint64_t))v124)(v457 & v746, v168, AssociatedTypeWitness);
          v460 = (v725 + v459) & v122;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v717 + 32))(v460, v169, v718);
          v461 = (_QWORD *)((v727 + v460) & 0xFFFFFFFFFFFFFFF8);
          v462 = (_QWORD *)((v727 + v169) & 0xFFFFFFFFFFFFFFF8);
          *v461 = *v462;
          v463 = ((unint64_t)v461 + v702) & v123;
          v464 = ((unint64_t)v462 + v702) & v123;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v703 + 32))(v463, v464, v704);
          v465 = (_QWORD *)((v695 + v464) & 0xFFFFFFFFFFFFF8);
          v466 = (_QWORD *)((v695 + v463) & 0xFFFFFFFFFFFFF8);
          *v466 = *v465;
          *(_OWORD *)(((unint64_t)v466 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v465 + 15) & 0xFFFFFFFFFFFFF8);
          *(_OWORD *)(v786 + v460) = *(_OWORD *)(v786 + v169);
          v467 = (v781 + v786 + v460) & v767;
          v468 = (v781 + v786 + v169) & v767;
          *(_BYTE *)v467 = *(_BYTE *)v468;
          v469 = v467 | 4;
          v470 = *(_DWORD *)(v468 | 4);
          *(_BYTE *)(v469 + 4) = *(_BYTE *)((v468 | 4) + 4);
          *(_DWORD *)v469 = v470;
          *(_WORD *)(v467 + 10) = *(_WORD *)(v468 + 0xA);
          v471 = *(void (**)(size_t, size_t, uint64_t))(v728 + 32);
          v471((v707 + v467) & v458, (v707 + v468) & v458, v721);
          v472 = (v700 + ((v707 + v467) & v458)) & v458;
          v473 = (v700 + ((v707 + v468) & v458)) & v458;
          v471(v472, v473, v721);
          v474 = (_BYTE *)(v472 + v729);
          *v474 = *(_BYTE *)(v473 + v729);
          v474[1] = *(_BYTE *)(v473 + v729 + 1);
          v474[2] = *(_BYTE *)(v473 + v729 + 2);
          v474[3] = *(_BYTE *)(v473 + v729 + 3);
          v474[4] = *(_BYTE *)(v473 + v729 + 4);
          v475 = (v472 + v729 + 12) & 0xFFFFFFFFFFFFFFF8;
          v476 = (v473 + v729 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_OWORD *)v475 = *(_OWORD *)v476;
          *(_BYTE *)(v475 + 16) = *(_BYTE *)(v476 + 16);
          *(_BYTE *)(v475 + 17) = *(_BYTE *)(v476 + 17);
          *(_BYTE *)(v475 + 18) = *(_BYTE *)(v476 + 18);
          *(_BYTE *)(v475 + 19) = *(_BYTE *)(v476 + 19);
          v477 = (v475 + 27) & 0xFFFFFFFFFFFFFFF8;
          v478 = (v476 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v477 = *(_QWORD *)v478;
          *(_BYTE *)(v477 + 8) = *(_BYTE *)(v478 + 8);
          *(_BYTE *)(v477 + 9) = *(_BYTE *)(v478 + 9);
          *(_BYTE *)(v477 + 10) = *(_BYTE *)(v478 + 10);
          *(_BYTE *)(v477 + 11) = *(_BYTE *)(v478 + 11);
          *(_BYTE *)(v477 + 12) = *(_BYTE *)(v478 + 12);
          v479 = (_QWORD *)((v475 + 47) & 0xFFFFFFFFFFFFF8);
          v480 = (_QWORD *)((v476 + 47) & 0xFFFFFFFFFFFFF8);
          *v479 = *v480;
          v481 = ((unint64_t)v479 + 15) & 0xFFFFFFFFFFFFFFF8;
          v482 = ((unint64_t)v480 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v481 = *(_QWORD *)v482;
          *(_BYTE *)(v481 + 8) = *(_BYTE *)(v482 + 8);
          *(_BYTE *)(v481 + 9) = *(_BYTE *)(v482 + 9);
          v483 = (void *)((v699 + v481) & v458);
          v484 = (const void *)((v699 + v482) & v458);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v728 + 48))(v484, 1, v721))
          {
            memcpy(v483, v484, v731);
          }
          else
          {
            v471((size_t)v483, (size_t)v484, v721);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v728 + 56))(v483, 0, 1, v721);
          }
          v133 = v729;
          v131 = v730;
          v130 = v777;
          v132 = v709;
          v129 = v772;
          v485 = (_QWORD *)(((unint64_t)v483 + v698) & 0xFFFFFFFFFFFFFFF8);
          v486 = (_QWORD *)(((unint64_t)v484 + v698) & 0xFFFFFFFFFFFFFFF8);
          *v485 = *v486;
          v487 = ((unint64_t)v485 + 15) & 0xFFFFFFFFFFFFFFF8;
          v488 = ((unint64_t)v486 + 15) & 0xFFFFFFFFFFFFFFF8;
          v489 = *(_QWORD *)v488;
          *(_BYTE *)(v487 + 8) = *(_BYTE *)(v488 + 8);
          *(_QWORD *)v487 = v489;
          v490 = (_QWORD *)(((unint64_t)v485 + 31) & 0xFFFFFFFFFFFFF8);
          v491 = (_QWORD *)(((unint64_t)v486 + 31) & 0xFFFFFFFFFFFFF8);
          *v490 = *v491;
          v492 = (_OWORD *)(((unint64_t)v490 + 15) & 0xFFFFFFFFFFFFFFF8);
          v493 = (_OWORD *)(((unint64_t)v491 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v492 = *v493;
          v494 = ((unint64_t)v492 + 19) & 0xFFFFFFFFFFFFFFF8;
          v495 = ((unint64_t)v493 + 19) & 0xFFFFFFFFFFFFFFF8;
          v496 = *(_QWORD *)v495;
          *(_BYTE *)(v494 + 8) = *(_BYTE *)(v495 + 8);
          *(_QWORD *)v494 = v496;
          *(_BYTE *)(v494 + 9) = *(_BYTE *)(v495 + 9);
          v497 = (v494 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v498 = (v495 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          LODWORD(v489) = *(_DWORD *)v498;
          *(_BYTE *)(v497 + 4) = *(_BYTE *)(v498 + 4);
          *(_DWORD *)v497 = v489;
          *(_OWORD *)((v494 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v495 + 25) & 0xFFFFFFFFFFFFF8);
          v499 = v780 + v467;
          v500 = *(_OWORD *)(v780 + v468 + 112);
          v502 = *(_OWORD *)(v780 + v468 + 64);
          v501 = *(_OWORD *)(v780 + v468 + 80);
          *(_OWORD *)(v499 + 96) = *(_OWORD *)(v780 + v468 + 96);
          *(_OWORD *)(v499 + 112) = v500;
          *(_OWORD *)(v499 + 64) = v502;
          *(_OWORD *)(v499 + 80) = v501;
          v503 = *(_OWORD *)(v780 + v468 + 176);
          v505 = *(_OWORD *)(v780 + v468 + 128);
          v504 = *(_OWORD *)(v780 + v468 + 144);
          *(_OWORD *)(v499 + 160) = *(_OWORD *)(v780 + v468 + 160);
          *(_OWORD *)(v499 + 176) = v503;
          *(_OWORD *)(v499 + 128) = v505;
          *(_OWORD *)(v499 + 144) = v504;
          v507 = *(_OWORD *)(v780 + v468 + 208);
          v506 = *(_OWORD *)(v780 + v468 + 224);
          v508 = *(_OWORD *)(v780 + v468 + 192);
          *(_QWORD *)(v499 + 240) = *(_QWORD *)(v780 + v468 + 240);
          *(_OWORD *)(v499 + 208) = v507;
          *(_OWORD *)(v499 + 224) = v506;
          *(_OWORD *)(v499 + 192) = v508;
          v509 = *(_OWORD *)(v780 + v468);
          v510 = *(_OWORD *)(v780 + v468 + 16);
          v511 = *(_OWORD *)(v780 + v468 + 48);
          *(_OWORD *)(v499 + 32) = *(_OWORD *)(v780 + v468 + 32);
          *(_OWORD *)(v499 + 48) = v511;
          *(_OWORD *)v499 = v509;
          *(_OWORD *)(v499 + 16) = v510;
          v512 = (_OWORD *)((v780 + v467 + 255) & 0xFFFFFFFFFFFFFFF8);
          v513 = (__int128 *)((v780 + v468 + 255) & 0xFFFFFFFFFFFFFFF8);
          v514 = *v513;
          *(_OWORD *)((char *)v512 + 9) = *(__int128 *)((char *)v513 + 9);
          *v512 = v514;
          v515 = (v780 + v467 + 287) & 0xFFFFFFFFFFFFFFF8;
          v516 = (v780 + v468 + 287) & 0xFFFFFFFFFFFFFFF8;
          v517 = *(_OWORD *)v516;
          *(_BYTE *)(v515 + 16) = *(_BYTE *)(v516 + 16);
          *(_OWORD *)v515 = v517;
          v518 = (_QWORD *)((v780 + v467 + 311) & 0xFFFFFFFFFFFFF8);
          v519 = (_QWORD *)((v780 + v468 + 311) & 0xFFFFFFFFFFFFF8);
          *v518 = *v519;
          *(_OWORD *)(((unint64_t)v518 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v519 + 15) & 0xFFFFFFFFFFFFF8);
          if (v708)
          {
LABEL_278:
            v116 = 0;
            v115 = 0;
            v520 = ((((v132
                     + ((((((((((v131 + v133 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 19) & 0xFFFFFFFFFFFFFFF8)
                       + 25) & 0xFFFFFFFFFFFFFFF8)
                     + 327) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 16;
            v521 = (_QWORD *)((unint64_t)&v129[v520] & 0xFFFFFFFFFFFFFFF8);
            v522 = (_QWORD *)(((unint64_t)v130 + v520) & 0xFFFFFFFFFFFFFFF8);
            *v521 = *v522;
            *(_QWORD *)(((unint64_t)v521 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v522 + 15) & 0xFFFFFFFFFFFFF8);
            v75 = a1;
            goto LABEL_157;
          }
LABEL_102:
          v133 = v731;
          goto LABEL_278;
        }
        v227 = (*(uint64_t (**)(size_t))(v728 + 48))(v226);
      }
      v126 = v777;
      if (v227)
        goto LABEL_101;
LABEL_273:
      v168 = ((unint64_t)v126 + v724) & v746;
      v169 = (v725 + v168) & v122;
      goto LABEL_274;
    case 1:
      v739 = ~v35;
      v751 = ~v34;
      v768 = ~v52;
      v134 = v71;
      v736 = v38;
      v687 = v34 + 8;
      v757 = *(_QWORD *)(v701 - 8);
      v744 = ((((v39 + ((v34 + 8 + (v38 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16;
      v723 = v72;
      v135 = *(void (**)(uint64_t))(v740 + 32);
      v136 = v66;
      v135(a1);
      v778 = (void *)((v712 + a1) & v120);
      v137 = (const void *)((v712 + v136) & v120);
      if (v782 == v714)
      {
        v138 = v70;
        v139 = (*(uint64_t (**)(const void *))(v740 + 48))(v137);
        v140 = v741;
LABEL_280:
        if (v139)
        {
LABEL_281:
          v523 = v778;
          v524 = v137;
          memcpy(v778, v137, v694);
          v525 = v730;
          v526 = v709;
LABEL_282:
          v527 = v731;
          goto LABEL_288;
        }
        v170 = ((unint64_t)v137 + v724) & v746;
        v171 = (v725 + v170) & v138;
LABEL_284:
        ((void (*)(void *, const void *, uint64_t))v135)(v778, v137, v76);
        v528 = ((unint64_t)v778 + v724) & v746;
        ((void (*)(unint64_t, unint64_t, uint64_t))v135)(v528, v170, v76);
        v529 = (v725 + v528) & v138;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v717 + 32))(v529, v171, v718);
        v530 = (_QWORD *)((v727 + v529) & 0xFFFFFFFFFFFFFFF8);
        v531 = (_QWORD *)((v727 + v171) & 0xFFFFFFFFFFFFFFF8);
        *v530 = *v531;
        v532 = ((unint64_t)v530 + v702) & v134;
        v533 = ((unint64_t)v531 + v702) & v134;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v703 + 32))(v532, v533, v704);
        v534 = (_QWORD *)((v695 + v533) & 0xFFFFFFFFFFFFF8);
        v535 = (_QWORD *)((v695 + v532) & 0xFFFFFFFFFFFFF8);
        *v535 = *v534;
        *(_OWORD *)(((unint64_t)v535 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v534 + 15) & 0xFFFFFFFFFFFFF8);
        *(_OWORD *)(v786 + v529) = *(_OWORD *)(v786 + v171);
        v536 = (v781 + v786 + v529) & v768;
        v537 = (v781 + v786 + v171) & v768;
        *(_BYTE *)v536 = *(_BYTE *)v537;
        v538 = v536 | 4;
        v539 = *(_DWORD *)(v537 | 4);
        *(_BYTE *)(v538 + 4) = *(_BYTE *)((v537 | 4) + 4);
        *(_DWORD *)v538 = v539;
        *(_WORD *)(v536 + 10) = *(_WORD *)(v537 + 0xA);
        v540 = *(void (**)(size_t, size_t, uint64_t))(v728 + 32);
        v540((v707 + v536) & v723, (v707 + v537) & v723, v721);
        v541 = (v700 + ((v707 + v536) & v723)) & v723;
        v542 = (v700 + ((v707 + v537) & v723)) & v723;
        v540(v541, v542, v721);
        v543 = (_BYTE *)(v541 + v729);
        *v543 = *(_BYTE *)(v542 + v729);
        v543[1] = *(_BYTE *)(v542 + v729 + 1);
        v543[2] = *(_BYTE *)(v542 + v729 + 2);
        v543[3] = *(_BYTE *)(v542 + v729 + 3);
        v543[4] = *(_BYTE *)(v542 + v729 + 4);
        v544 = (v541 + v729 + 12) & 0xFFFFFFFFFFFFFFF8;
        v545 = (v542 + v729 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)v544 = *(_OWORD *)v545;
        *(_BYTE *)(v544 + 16) = *(_BYTE *)(v545 + 16);
        *(_BYTE *)(v544 + 17) = *(_BYTE *)(v545 + 17);
        *(_BYTE *)(v544 + 18) = *(_BYTE *)(v545 + 18);
        *(_BYTE *)(v544 + 19) = *(_BYTE *)(v545 + 19);
        v546 = (v544 + 27) & 0xFFFFFFFFFFFFFFF8;
        v547 = (v545 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v546 = *(_QWORD *)v547;
        *(_BYTE *)(v546 + 8) = *(_BYTE *)(v547 + 8);
        *(_BYTE *)(v546 + 9) = *(_BYTE *)(v547 + 9);
        *(_BYTE *)(v546 + 10) = *(_BYTE *)(v547 + 10);
        *(_BYTE *)(v546 + 11) = *(_BYTE *)(v547 + 11);
        *(_BYTE *)(v546 + 12) = *(_BYTE *)(v547 + 12);
        v548 = (_QWORD *)((v544 + 47) & 0xFFFFFFFFFFFFF8);
        v549 = (_QWORD *)((v545 + 47) & 0xFFFFFFFFFFFFF8);
        *v548 = *v549;
        v550 = ((unint64_t)v548 + 15) & 0xFFFFFFFFFFFFFFF8;
        v551 = ((unint64_t)v549 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v550 = *(_QWORD *)v551;
        *(_BYTE *)(v550 + 8) = *(_BYTE *)(v551 + 8);
        *(_BYTE *)(v550 + 9) = *(_BYTE *)(v551 + 9);
        v552 = (void *)((v699 + v550) & v723);
        v553 = (const void *)((v699 + v551) & v723);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v728 + 48))(v553, 1, v721))
        {
          memcpy(v552, v553, v731);
        }
        else
        {
          v540((size_t)v552, (size_t)v553, v721);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v728 + 56))(v552, 0, 1, v721);
        }
        v527 = v729;
        v525 = v730;
        v523 = v778;
        v526 = v709;
        v140 = v741;
        v524 = v137;
        v554 = (_QWORD *)(((unint64_t)v552 + v698) & 0xFFFFFFFFFFFFFFF8);
        v555 = (_QWORD *)(((unint64_t)v553 + v698) & 0xFFFFFFFFFFFFFFF8);
        *v554 = *v555;
        v556 = ((unint64_t)v554 + 15) & 0xFFFFFFFFFFFFFFF8;
        v557 = ((unint64_t)v555 + 15) & 0xFFFFFFFFFFFFFFF8;
        v558 = *(_QWORD *)v557;
        *(_BYTE *)(v556 + 8) = *(_BYTE *)(v557 + 8);
        *(_QWORD *)v556 = v558;
        v559 = (_QWORD *)(((unint64_t)v554 + 31) & 0xFFFFFFFFFFFFF8);
        v560 = (_QWORD *)(((unint64_t)v555 + 31) & 0xFFFFFFFFFFFFF8);
        *v559 = *v560;
        v561 = (_OWORD *)(((unint64_t)v559 + 15) & 0xFFFFFFFFFFFFFFF8);
        v562 = (_OWORD *)(((unint64_t)v560 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v561 = *v562;
        v563 = ((unint64_t)v561 + 19) & 0xFFFFFFFFFFFFFFF8;
        v564 = ((unint64_t)v562 + 19) & 0xFFFFFFFFFFFFFFF8;
        v565 = *(_QWORD *)v564;
        *(_BYTE *)(v563 + 8) = *(_BYTE *)(v564 + 8);
        *(_QWORD *)v563 = v565;
        *(_BYTE *)(v563 + 9) = *(_BYTE *)(v564 + 9);
        v566 = (v563 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v567 = (v564 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        LODWORD(v558) = *(_DWORD *)v567;
        *(_BYTE *)(v566 + 4) = *(_BYTE *)(v567 + 4);
        *(_DWORD *)v566 = v558;
        *(_OWORD *)((v563 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v564 + 25) & 0xFFFFFFFFFFFFF8);
        v568 = v780 + v536;
        v569 = *(_OWORD *)(v780 + v537 + 112);
        v571 = *(_OWORD *)(v780 + v537 + 64);
        v570 = *(_OWORD *)(v780 + v537 + 80);
        *(_OWORD *)(v568 + 96) = *(_OWORD *)(v780 + v537 + 96);
        *(_OWORD *)(v568 + 112) = v569;
        *(_OWORD *)(v568 + 64) = v571;
        *(_OWORD *)(v568 + 80) = v570;
        v572 = *(_OWORD *)(v780 + v537 + 176);
        v574 = *(_OWORD *)(v780 + v537 + 128);
        v573 = *(_OWORD *)(v780 + v537 + 144);
        *(_OWORD *)(v568 + 160) = *(_OWORD *)(v780 + v537 + 160);
        *(_OWORD *)(v568 + 176) = v572;
        *(_OWORD *)(v568 + 128) = v574;
        *(_OWORD *)(v568 + 144) = v573;
        v576 = *(_OWORD *)(v780 + v537 + 208);
        v575 = *(_OWORD *)(v780 + v537 + 224);
        v577 = *(_OWORD *)(v780 + v537 + 192);
        *(_QWORD *)(v568 + 240) = *(_QWORD *)(v780 + v537 + 240);
        *(_OWORD *)(v568 + 208) = v576;
        *(_OWORD *)(v568 + 224) = v575;
        *(_OWORD *)(v568 + 192) = v577;
        v578 = *(_OWORD *)(v780 + v537);
        v579 = *(_OWORD *)(v780 + v537 + 16);
        v580 = *(_OWORD *)(v780 + v537 + 48);
        *(_OWORD *)(v568 + 32) = *(_OWORD *)(v780 + v537 + 32);
        *(_OWORD *)(v568 + 48) = v580;
        *(_OWORD *)v568 = v578;
        *(_OWORD *)(v568 + 16) = v579;
        v581 = (_OWORD *)((v780 + v536 + 255) & 0xFFFFFFFFFFFFFFF8);
        v582 = (__int128 *)((v780 + v537 + 255) & 0xFFFFFFFFFFFFFFF8);
        v583 = *v582;
        *(_OWORD *)((char *)v581 + 9) = *(__int128 *)((char *)v582 + 9);
        *v581 = v583;
        v584 = (v780 + v536 + 287) & 0xFFFFFFFFFFFFFFF8;
        v585 = (v780 + v537 + 287) & 0xFFFFFFFFFFFFFFF8;
        v586 = *(_OWORD *)v585;
        *(_BYTE *)(v584 + 16) = *(_BYTE *)(v585 + 16);
        *(_OWORD *)v584 = v586;
        v587 = (_QWORD *)((v780 + v536 + 311) & 0xFFFFFFFFFFFFF8);
        v588 = (_QWORD *)((v780 + v537 + 311) & 0xFFFFFFFFFFFFF8);
        *v587 = *v588;
        *(_OWORD *)(((unint64_t)v587 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v588 + 15) & 0xFFFFFFFFFFFFF8);
        v75 = a1;
        if (!v708)
          goto LABEL_282;
LABEL_288:
        v589 = ((((v526
                 + ((((((((((v525 + v527 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 19) & 0xFFFFFFFFFFFFFFF8)
                   + 25) & 0xFFFFFFFFFFFFFFF8)
                 + 327) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        v590 = (void *)(((unint64_t)v523 + v770 + v589) & v762);
        v591 = (const void *)(((unint64_t)v524 + v770 + v589) & v762);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v737 + 48))(v591, 1, v140))
        {
          memcpy(v590, v591, v690);
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v737 + 32))(v590, v591, v140);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v737 + 56))(v590, 0, 1, v140);
        }
        v592 = v736;
        v128 = v760;
        v593 = (char *)(((unint64_t)v590 + v697) & v739);
        v594 = (char *)(((unint64_t)v591 + v697) & v739);
        if (v705 == v719)
        {
          v595 = (*(uint64_t (**)(unint64_t))(v715 + 48))(((unint64_t)v591 + v697) & v739);
        }
        else
        {
          v596 = (uint64_t *)((unint64_t)&v594[v736] & 0xFFFFFFFFFFFFFFF8);
          if (v691 <= 0x7FFFFFFE)
          {
            v597 = *v596;
            if ((unint64_t)*v596 >= 0xFFFFFFFF)
              LODWORD(v597) = -1;
            if ((v597 + 1) >= 2)
              goto LABEL_300;
            goto LABEL_302;
          }
          v595 = (*(uint64_t (**)(unint64_t))(v757 + 48))(((unint64_t)v596 + v687) & v751);
        }
        v592 = v736;
        if (v595)
        {
LABEL_300:
          v598 = v744;
          memcpy(v593, v594, v744);
LABEL_303:
          v115 = 0;
          *(_QWORD *)&v593[v598] = *(_QWORD *)&v594[v598];
          v605 = (_QWORD *)((unint64_t)&v593[v598 + 15] & 0xFFFFFFFFFFFFF8);
          v606 = (_QWORD *)((unint64_t)&v594[v598 + 15] & 0xFFFFFFFFFFFFFFF8);
          *v605 = *v606;
          *(_QWORD *)(((unint64_t)v605 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v606 + 15) & 0xFFFFFFFFFFFFF8);
          v116 = 1;
          goto LABEL_157;
        }
        v596 = (uint64_t *)((unint64_t)&v594[v736] & 0xFFFFFFFFFFFFFFF8);
LABEL_302:
        v599 = v592;
        (*(void (**)(char *, char *, uint64_t))(v715 + 32))(v593, v594, v716);
        v600 = (_QWORD *)((unint64_t)&v593[v599] & 0xFFFFFFFFFFFFFFF8);
        *v600 = *v596;
        v601 = ((unint64_t)v600 + v687) & v751;
        v602 = ((unint64_t)v596 + v687) & v751;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v757 + 32))(v601, v602, v701);
        v603 = (_QWORD *)((v39 + v601) & 0xFFFFFFFFFFFFF8);
        v604 = (_QWORD *)((v39 + v602) & 0xFFFFFFFFFFFFF8);
        *v603 = *v604;
        *(_OWORD *)(((unint64_t)v603 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v604 + 15) & 0xFFFFFFFFFFFFF8);
        v598 = v744;
        goto LABEL_303;
      }
      v170 = ((unint64_t)v137 + v724) & v746;
      v138 = v70;
      v171 = (v725 + v170) & v70;
      if (v720 == v714)
      {
        v140 = v741;
        if (v706 == v720)
        {
          v139 = (*(uint64_t (**)(unint64_t))(v717 + 48))(v171);
          goto LABEL_280;
        }
        v219 = (unint64_t *)((v727 + v171) & 0xFFFFFFFFFFFFFFF8);
        if (v692 > 0x7FFFFFFE)
        {
          v139 = (*(uint64_t (**)(unint64_t))(v703 + 48))(((unint64_t)v219 + v702) & v134);
          goto LABEL_280;
        }
        v220 = *v219;
      }
      else
      {
        v193 = v786 + v171;
        v140 = v741;
        if ((v681 & 0x80000000) == 0)
        {
          v194 = *(_QWORD *)(v193 + 8);
          if (v194 >= 0xFFFFFFFF)
            LODWORD(v194) = -1;
          v139 = v194 + 1;
          goto LABEL_280;
        }
        v228 = (v707 + ((v781 + v193) & v768)) & v723;
        if (v708 > 0x7FFFFFFD)
        {
          v139 = (*(uint64_t (**)(size_t))(v728 + 48))(v228);
          goto LABEL_280;
        }
        v220 = *(_QWORD *)(((v676 + ((v700 + v228) & v723)) & 0xFFFFFFFFFFFFF8) + 8);
      }
      if (v220 >= 0xFFFFFFFF)
        LODWORD(v220) = -1;
      if ((v220 + 1) >= 2)
        goto LABEL_281;
      goto LABEL_284;
    case 2:
      v141 = ~v35;
      v752 = ~v34;
      v758 = *(_QWORD *)(v701 - 8);
      v142 = v38;
      v143 = v34 + 8;
      v144 = ((((v39 + ((v34 + 8 + (v38 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16;
      v145 = v66;
      (*(void (**)(uint64_t))(v740 + 32))(a1);
      v146 = (void *)((v683 + a1) & v762);
      v147 = (const void *)((v683 + v145) & v762);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v737 + 48))(v147, 1, v741))
      {
        memcpy(v146, v147, v690);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v737 + 32))(v146, v147, v741);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v737 + 56))(v146, 0, 1, v741);
      }
      v178 = (char *)(((unint64_t)v146 + v697) & v141);
      v179 = (char *)(((unint64_t)v147 + v697) & v141);
      v128 = v760;
      if (v705 == v719)
      {
        v180 = (*(uint64_t (**)(char *))(v715 + 48))(v179);
      }
      else
      {
        v181 = (uint64_t *)((unint64_t)&v179[v142] & 0xFFFFFFFFFFFFFFF8);
        if (v691 <= 0x7FFFFFFE)
        {
          v182 = v142;
          v183 = *v181;
          if ((unint64_t)*v181 >= 0xFFFFFFFF)
            LODWORD(v183) = -1;
          if ((v183 + 1) >= 2)
            goto LABEL_192;
          goto LABEL_194;
        }
        v180 = (*(uint64_t (**)(unint64_t))(v758 + 48))(((unint64_t)v181 + v143) & v752);
      }
      v182 = v142;
      if (v180)
      {
LABEL_192:
        v203 = v144;
        memcpy(v178, v179, v144);
        goto LABEL_195;
      }
      v181 = (uint64_t *)((unint64_t)&v179[v142] & 0xFFFFFFFFFFFFFFF8);
LABEL_194:
      v204 = v182;
      (*(void (**)(char *, char *, uint64_t))(v715 + 32))(v178, v179, v716);
      v205 = (_QWORD *)((unint64_t)&v178[v204] & 0xFFFFFFFFFFFFFFF8);
      *v205 = *v181;
      v206 = ((unint64_t)v205 + v143) & v752;
      v207 = ((unint64_t)v181 + v143) & v752;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v758 + 32))(v206, v207, v701);
      v208 = (_QWORD *)((v39 + v206) & 0xFFFFFFFFFFFFF8);
      v209 = (_QWORD *)((v39 + v207) & 0xFFFFFFFFFFFFF8);
      *v208 = *v209;
      *(_OWORD *)(((unint64_t)v208 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v209 + 15) & 0xFFFFFFFFFFFFF8);
      v203 = v144;
LABEL_195:
      v115 = 0;
      v210 = &v178[v203];
      *v210 = v179[v203];
      *((_QWORD *)v210 + 1) = *(_QWORD *)&v179[v203 + 8];
      v116 = 2;
LABEL_157:
      *(_BYTE *)(v75 + v791) = v116;
      *(_BYTE *)(v75 + v128) = v115;
      return v75;
    case 3:
      v148 = ~v753;
      v769 = ~v747;
      v149 = v71;
      v150 = *(void (**)(uint64_t))(v740 + 32);
      v151 = v66;
      v150(a1);
      v773 = (char *)((v712 + a1) & v120);
      v152 = (const void *)((v712 + v151) & v120);
      v779 = v152;
      if (v782 == v714)
      {
        v153 = (*(uint64_t (**)(unint64_t))(v740 + 48))((v712 + v151) & v120);
LABEL_109:
        v152 = v779;
        goto LABEL_110;
      }
      v172 = ((unint64_t)v152 + v724) & v746;
      v173 = (v725 + v172) & v148;
      if (v720 == v714)
      {
        if (v706 == v720)
        {
          v153 = (*(uint64_t (**)(unint64_t))(v717 + 48))((v725 + v172) & v148);
          goto LABEL_109;
        }
        v221 = (unint64_t *)((v727 + v173) & 0xFFFFFFFFFFFFFFF8);
        v128 = v760;
        v154 = (char *)((v712 + a1) & v120);
        if (v692 <= 0x7FFFFFFE)
        {
          v222 = *v221;
          goto LABEL_338;
        }
        v230 = (*(uint64_t (**)(unint64_t))(v703 + 48))(((unint64_t)v221 + v702) & v149);
      }
      else
      {
        v195 = v786 + v173;
        if ((v681 & 0x80000000) == 0)
        {
          v196 = *(_QWORD *)(v195 + 8);
          if (v196 >= 0xFFFFFFFF)
            LODWORD(v196) = -1;
          v153 = v196 + 1;
LABEL_110:
          v128 = v760;
          v154 = (char *)((v712 + a1) & v120);
          if (v153)
          {
LABEL_111:
            memcpy(v154, v152, v694);
            v155 = v779;
            v156 = v730;
            v157 = v709;
            goto LABEL_112;
          }
          goto LABEL_306;
        }
        v154 = (char *)((v712 + a1) & v120);
        v229 = (v707 + ((v781 + v195) & v769)) & v72;
        v128 = v760;
        if (v708 <= 0x7FFFFFFD)
        {
          v222 = *(_QWORD *)(((v676 + ((v700 + v229) & v72)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_338:
          if (v222 >= 0xFFFFFFFF)
            LODWORD(v222) = -1;
          if ((v222 + 1) >= 2)
            goto LABEL_111;
LABEL_307:
          ((void (*)(char *, const void *, uint64_t))v150)(v154, v152, AssociatedTypeWitness);
          v607 = (unint64_t)&v154[v724];
          v608 = v72;
          v609 = v607 & v746;
          ((void (*)(unint64_t, unint64_t, uint64_t))v150)(v607 & v746, v172, AssociatedTypeWitness);
          v610 = (v725 + v609) & v148;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v717 + 32))(v610, v173, v718);
          v611 = (_QWORD *)((v727 + v610) & 0xFFFFFFFFFFFFFFF8);
          v612 = (_QWORD *)((v727 + v173) & 0xFFFFFFFFFFFFFFF8);
          *v611 = *v612;
          v613 = ((unint64_t)v611 + v702) & v149;
          v614 = ((unint64_t)v612 + v702) & v149;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v703 + 32))(v613, v614, v704);
          v615 = (_QWORD *)((v695 + v614) & 0xFFFFFFFFFFFFF8);
          v616 = (_QWORD *)((v695 + v613) & 0xFFFFFFFFFFFFF8);
          *v616 = *v615;
          *(_OWORD *)(((unint64_t)v616 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v615 + 15) & 0xFFFFFFFFFFFFF8);
          *(_OWORD *)(v786 + v610) = *(_OWORD *)(v786 + v173);
          v617 = (v781 + v786 + v610) & v769;
          v618 = (v781 + v786 + v173) & v769;
          *(_BYTE *)v617 = *(_BYTE *)v618;
          v619 = v617 | 4;
          v620 = *(_DWORD *)(v618 | 4);
          *(_BYTE *)(v619 + 4) = *(_BYTE *)((v618 | 4) + 4);
          *(_DWORD *)v619 = v620;
          *(_WORD *)(v617 + 10) = *(_WORD *)(v618 + 0xA);
          v621 = *(void (**)(size_t, size_t, uint64_t))(v728 + 32);
          v621((v707 + v617) & v608, (v707 + v618) & v608, v721);
          v622 = (v700 + ((v707 + v617) & v608)) & v608;
          v623 = (v700 + ((v707 + v618) & v608)) & v608;
          v621(v622, v623, v721);
          v624 = (_BYTE *)(v622 + v729);
          *v624 = *(_BYTE *)(v623 + v729);
          v624[1] = *(_BYTE *)(v623 + v729 + 1);
          v624[2] = *(_BYTE *)(v623 + v729 + 2);
          v624[3] = *(_BYTE *)(v623 + v729 + 3);
          v624[4] = *(_BYTE *)(v623 + v729 + 4);
          v625 = (v622 + v729 + 12) & 0xFFFFFFFFFFFFFFF8;
          v626 = (v623 + v729 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_OWORD *)v625 = *(_OWORD *)v626;
          *(_BYTE *)(v625 + 16) = *(_BYTE *)(v626 + 16);
          *(_BYTE *)(v625 + 17) = *(_BYTE *)(v626 + 17);
          *(_BYTE *)(v625 + 18) = *(_BYTE *)(v626 + 18);
          *(_BYTE *)(v625 + 19) = *(_BYTE *)(v626 + 19);
          v627 = (v625 + 27) & 0xFFFFFFFFFFFFFFF8;
          v628 = (v626 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v627 = *(_QWORD *)v628;
          *(_BYTE *)(v627 + 8) = *(_BYTE *)(v628 + 8);
          *(_BYTE *)(v627 + 9) = *(_BYTE *)(v628 + 9);
          *(_BYTE *)(v627 + 10) = *(_BYTE *)(v628 + 10);
          *(_BYTE *)(v627 + 11) = *(_BYTE *)(v628 + 11);
          *(_BYTE *)(v627 + 12) = *(_BYTE *)(v628 + 12);
          v629 = (_QWORD *)((v625 + 47) & 0xFFFFFFFFFFFFF8);
          v630 = (_QWORD *)((v626 + 47) & 0xFFFFFFFFFFFFF8);
          *v629 = *v630;
          v631 = ((unint64_t)v629 + 15) & 0xFFFFFFFFFFFFFFF8;
          v632 = ((unint64_t)v630 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v631 = *(_QWORD *)v632;
          *(_BYTE *)(v631 + 8) = *(_BYTE *)(v632 + 8);
          *(_BYTE *)(v631 + 9) = *(_BYTE *)(v632 + 9);
          v633 = (void *)((v699 + v631) & v608);
          v634 = (const void *)((v699 + v632) & v608);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v728 + 48))(v634, 1, v721))
          {
            memcpy(v633, v634, v731);
          }
          else
          {
            v621((size_t)v633, (size_t)v634, v721);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v728 + 56))(v633, 0, 1, v721);
          }
          v158 = v729;
          v156 = v730;
          v155 = v779;
          v157 = v709;
          v154 = v773;
          v635 = (_QWORD *)(((unint64_t)v633 + v698) & 0xFFFFFFFFFFFFFFF8);
          v636 = (_QWORD *)(((unint64_t)v634 + v698) & 0xFFFFFFFFFFFFFFF8);
          *v635 = *v636;
          v637 = ((unint64_t)v635 + 15) & 0xFFFFFFFFFFFFFFF8;
          v638 = ((unint64_t)v636 + 15) & 0xFFFFFFFFFFFFFFF8;
          v639 = *(_QWORD *)v638;
          *(_BYTE *)(v637 + 8) = *(_BYTE *)(v638 + 8);
          *(_QWORD *)v637 = v639;
          v640 = (_QWORD *)(((unint64_t)v635 + 31) & 0xFFFFFFFFFFFFF8);
          v641 = (_QWORD *)(((unint64_t)v636 + 31) & 0xFFFFFFFFFFFFF8);
          *v640 = *v641;
          v642 = (_OWORD *)(((unint64_t)v640 + 15) & 0xFFFFFFFFFFFFFFF8);
          v643 = (_OWORD *)(((unint64_t)v641 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v642 = *v643;
          v644 = ((unint64_t)v642 + 19) & 0xFFFFFFFFFFFFFFF8;
          v645 = ((unint64_t)v643 + 19) & 0xFFFFFFFFFFFFFFF8;
          v646 = *(_QWORD *)v645;
          *(_BYTE *)(v644 + 8) = *(_BYTE *)(v645 + 8);
          *(_QWORD *)v644 = v646;
          *(_BYTE *)(v644 + 9) = *(_BYTE *)(v645 + 9);
          v647 = (v644 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v648 = (v645 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          LODWORD(v639) = *(_DWORD *)v648;
          *(_BYTE *)(v647 + 4) = *(_BYTE *)(v648 + 4);
          *(_DWORD *)v647 = v639;
          *(_OWORD *)((v644 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v645 + 25) & 0xFFFFFFFFFFFFF8);
          v649 = v780 + v617;
          v650 = *(_OWORD *)(v780 + v618 + 112);
          v652 = *(_OWORD *)(v780 + v618 + 64);
          v651 = *(_OWORD *)(v780 + v618 + 80);
          *(_OWORD *)(v649 + 96) = *(_OWORD *)(v780 + v618 + 96);
          *(_OWORD *)(v649 + 112) = v650;
          *(_OWORD *)(v649 + 64) = v652;
          *(_OWORD *)(v649 + 80) = v651;
          v653 = *(_OWORD *)(v780 + v618 + 176);
          v655 = *(_OWORD *)(v780 + v618 + 128);
          v654 = *(_OWORD *)(v780 + v618 + 144);
          *(_OWORD *)(v649 + 160) = *(_OWORD *)(v780 + v618 + 160);
          *(_OWORD *)(v649 + 176) = v653;
          *(_OWORD *)(v649 + 128) = v655;
          *(_OWORD *)(v649 + 144) = v654;
          v657 = *(_OWORD *)(v780 + v618 + 208);
          v656 = *(_OWORD *)(v780 + v618 + 224);
          v658 = *(_OWORD *)(v780 + v618 + 192);
          *(_QWORD *)(v649 + 240) = *(_QWORD *)(v780 + v618 + 240);
          *(_OWORD *)(v649 + 208) = v657;
          *(_OWORD *)(v649 + 224) = v656;
          *(_OWORD *)(v649 + 192) = v658;
          v659 = *(_OWORD *)(v780 + v618);
          v660 = *(_OWORD *)(v780 + v618 + 16);
          v661 = *(_OWORD *)(v780 + v618 + 48);
          *(_OWORD *)(v649 + 32) = *(_OWORD *)(v780 + v618 + 32);
          *(_OWORD *)(v649 + 48) = v661;
          *(_OWORD *)v649 = v659;
          *(_OWORD *)(v649 + 16) = v660;
          v662 = (_OWORD *)((v780 + v617 + 255) & 0xFFFFFFFFFFFFFFF8);
          v663 = (__int128 *)((v780 + v618 + 255) & 0xFFFFFFFFFFFFFFF8);
          v664 = *v663;
          *(_OWORD *)((char *)v662 + 9) = *(__int128 *)((char *)v663 + 9);
          *v662 = v664;
          v665 = (v780 + v617 + 287) & 0xFFFFFFFFFFFFFFF8;
          v666 = (v780 + v618 + 287) & 0xFFFFFFFFFFFFFFF8;
          v667 = *(_OWORD *)v666;
          *(_BYTE *)(v665 + 16) = *(_BYTE *)(v666 + 16);
          *(_OWORD *)v665 = v667;
          v668 = (_QWORD *)((v780 + v617 + 311) & 0xFFFFFFFFFFFFF8);
          v669 = (_QWORD *)((v780 + v618 + 311) & 0xFFFFFFFFFFFFF8);
          *v668 = *v669;
          *(_OWORD *)(((unint64_t)v668 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v669 + 15) & 0xFFFFFFFFFFFFF8);
          if (v708)
          {
LABEL_311:
            v115 = 0;
            v670 = ((((v157
                     + ((((((((((v156 + v158 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 19) & 0xFFFFFFFFFFFFFFF8)
                       + 25) & 0xFFFFFFFFFFFFFFF8)
                     + 327) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 16;
            v671 = (_OWORD *)((unint64_t)&v154[v670] & 0xFFFFFFFFFFFFFFF8);
            v672 = (_OWORD *)(((unint64_t)v155 + v670) & 0xFFFFFFFFFFFFFFF8);
            *v671 = *v672;
            *(_QWORD *)(((unint64_t)v671 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v672 + 23) & 0xFFFFFFFFFFFFF8);
            v116 = 3;
            v75 = a1;
            goto LABEL_157;
          }
LABEL_112:
          v158 = v731;
          goto LABEL_311;
        }
        v230 = (*(uint64_t (**)(size_t))(v728 + 48))(v229);
      }
      v152 = v779;
      if (v230)
        goto LABEL_111;
LABEL_306:
      v172 = ((unint64_t)v152 + v724) & v746;
      v173 = (v725 + v172) & v148;
      goto LABEL_307;
    case 4:
      (*(void (**)(uint64_t))(v740 + 32))(a1);
      v115 = 0;
      v116 = 4;
      goto LABEL_156;
    case 5:
      (*(void (**)(uint64_t))(v740 + 32))(a1);
      v115 = 0;
      v116 = 5;
      goto LABEL_156;
    case 6:
      v159 = v66;
      (*(void (**)(uint64_t))(v740 + 32))(a1);
      v160 = (void *)((v682 + a1) & v121);
      v161 = (const void *)((v682 + v159) & v121);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48))(v161, 1, v763))
      {
        memcpy(v160, v161, v678);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v42 + 32))(v160, v161, v763);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v160, 0, 1, v763);
      }
      v115 = 0;
      v116 = 6;
      goto LABEL_156;
    case 7:
      (*(void (**)(uint64_t))(v740 + 32))(a1);
      v115 = 0;
      v116 = 7;
LABEL_156:
      v128 = v760;
      goto LABEL_157;
    default:
      if (v51 <= 3)
        v74 = v51;
      else
        v74 = 4;
      __asm { BR              X13 }
      return result;
  }
}

