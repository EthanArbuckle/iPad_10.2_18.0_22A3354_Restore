void sub_23AB10AA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(v4 - 256);
  v6 = *(_QWORD *)(v4 - 248);
  v7 = *(_QWORD *)(v4 - 240);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v2 + *(int *)(a1 + 52), v7);
  v8 = *(_QWORD *)(v4 - 200);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v3) != 1)
  {
    v9 = *(_QWORD *)(v4 - 312);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v9, v6, v3);
    sub_23AB52A54(*(_QWORD *)(v4 - 152));
    v10 = v1;
    v11 = *(_QWORD *)(v4 - 184);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v9, v3);
    swift_storeEnumTagMultiPayload();
    sub_23AAB1264(v10, v11, *(_QWORD *)(v4 - 144), v3);
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
}

void sub_23AB10E88(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  void (*v11)(_QWORD, uint64_t);

  v9 = *(void (**)(uint64_t, uint64_t))(v7 - 168);
  v9(v3, v5);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 304) + 8);
  v10(*(_QWORD *)(v7 - 376), v6);
  v10(*(_QWORD *)(v7 - 368), v6);
  v11 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v7 - 200) + 8);
  v11(*(_QWORD *)(v7 - 320), v4);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v7 - 128) + 8))(*(_QWORD *)(v7 - 224), *(_QWORD *)(v7 - 152));
  v11(*(_QWORD *)(v7 - 312), v4);
  v9(v1, v5);
  v10(v2, v6);
  if ((a1 & 1) != 0)
    JUMPOUT(0x23AB10F24);
  JUMPOUT(0x23AB10E44);
}

void sub_23AB10F48(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = a1;
  *(_BYTE *)(a3 + 8) = a2 & 1;
  type metadata accessor for ReconciliationTable.CachedEntry();
}

void sub_23AB10FB4()
{
  type metadata accessor for ItemReconciliation();
}

uint64_t sub_23AB10FD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32);
  v8(v6, v4, a1);
  v8(v1 + v5[14], v3, a1);
  v9 = (_QWORD *)(v1 + v5[15]);
  *v9 = v2;
  v9[1] = v14;
  v10 = v1 + v5[16];
  *(_QWORD *)v10 = v15;
  *(_BYTE *)(v10 + 8) = v16;
  v11 = v1 + v5[17];
  v12 = sub_23B1C6C98();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, v17, v12);
}

void sub_23AB11078()
{
  type metadata accessor for ReconciliationTable.CachedEntry();
}

void type metadata accessor for ReconciliationTable.CachedEntry()
{
  JUMPOUT(0x23B861318);
}

uint64_t sub_23AB12138(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  _QWORD *v12;
  id v13;
  uint8_t *v14;
  _QWORD v16[2];

  v2 = sub_23B1C5E4C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v7 = a1;
  v8 = sub_23B1C5E40();
  v9 = sub_23B1C6A88();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v16[0] = v2;
    v11 = (uint8_t *)v10;
    v12 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v11 = 138412290;
    v13 = -[NSObject leave](v7, sel_leave);
    v16[1] = v13;
    sub_23B1C6CBC();
    *v12 = v13;

    _os_log_impl(&dword_23AA66000, v8, v9, "%@", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v12, -1, -1);
    v14 = v11;
    v2 = v16[0];
    MEMORY[0x23B8614BC](v14, -1, -1);
  }
  else
  {

    v8 = v7;
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_23AB122F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  double v7;
  double v8;
  double v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;

  v2 = sub_23B1C5BDC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 0)
    goto LABEL_7;
  result = swift_weakLoadStrong();
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  swift_retain();
  sub_23B1C5BD0();
  sub_23B1C5B94();
  v8 = v7;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v9 = v8 * 1000000000.0;
  if ((~COERCE__INT64(v8 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v9 < 9.22337204e18)
  {
LABEL_11:
    sub_23AEBEFD4(a1);
    swift_release();
    return swift_release();
  }
  __break(1u);
LABEL_7:
  result = swift_weakLoadStrong();
  if (result)
  {
    a1 &= ~0x8000000000000000;
    v10 = *(void (**)(uint64_t))(*(_QWORD *)result + 176);
    v11 = swift_retain();
    v10(v11);
    swift_release();
    sub_23B1C5BD0();
    sub_23B1C5B94();
    v13 = v12;
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v14 = v13 * 1000000000.0;
    if ((~COERCE__INT64(v13 * 1000000000.0) & 0x7FF0000000000000) != 0)
    {
      if (v14 > -9.22337204e18)
      {
        if (v14 < 9.22337204e18)
          goto LABEL_11;
        goto LABEL_16;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
LABEL_18:
  __break(1u);
  return result;
}

void sub_23AB124D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23AB125BC()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_23AB125EC()
{
  type metadata accessor for ItemReconciliation();
}

void sub_23AB14568()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
}

void sub_23AB1463C()
{
  uint64_t v0;

  v0 = sub_23B1C6C98();
  MEMORY[0x24BDAC7A8](v0);
  sub_23AB146D0();
}

uint64_t sub_23AB14688(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!v2)
  {
    v1 = a1 & 1;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  }
  return v1;
}

void sub_23AB146D0()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

void sub_23AB147CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9[205] = a1;
  v9[10] = swift_getTupleTypeMetadata2();
  v14 = sub_23B1C6C98();
  v9[8] = *(_QWORD *)(v14 - 8);
  v9[9] = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v9[11] = (char *)&a9 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v9[7] = (char *)&a9 - v17;
  v18 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v18);
  v9[18] = (char *)&a9 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_23B1C5474();
  v9[21] = v20;
  v9[19] = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v9[16] = (char *)&a9 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v13 - 232) = v10;
  *(_QWORD *)(v13 - 224) = v12;
  v9[269] = v12;
  *(_QWORD *)(v13 - 216) = v9[268];
  *(_QWORD *)(v13 - 208) = v11;
  v9[267] = v11;
  type metadata accessor for TestingOperation();
}

void sub_23AB148EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9[116] = a1;
  v9[92] = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9[17] = (char *)&a9 - v15;
  *(_QWORD *)(v14 - 232) = v12;
  *(_QWORD *)(v14 - 224) = v13;
  *(_QWORD *)(v14 - 216) = v10;
  *(_QWORD *)(v14 - 208) = v11;
  type metadata accessor for PersistenceTrigger();
}

void sub_23AB14938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v9[270] = sub_23B1C6C98();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9[150] = TupleTypeMetadata2;
  v9[135] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9[154] = (char *)&a9 - v17;
  v18 = type metadata accessor for ItemMetadata();
  v9[142] = v18;
  MEMORY[0x24BDAC7A8](v18);
  v9[141] = (char *)&a9 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[274] = v14;
  v9[275] = sub_23B1C6C98();
  v20 = swift_getTupleTypeMetadata2();
  v9[73] = v20;
  v9[51] = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v9[71] = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v9[58] = (char *)&a9 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v9[35] = (char *)&a9 - v25;
  v9[41] = type metadata accessor for FileTreeError(255, v13, v11, v26);
  v27 = sub_23B1C6C98();
  v9[33] = *(_QWORD *)(v27 - 8);
  v9[34] = v27;
  MEMORY[0x24BDAC7A8](v27);
  v9[54] = (char *)&a9 - v28;
  v29 = v9[272];
  sub_23B1C6C98();
  v30 = swift_getTupleTypeMetadata2();
  v9[102] = v30;
  v9[90] = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v9[119] = (char *)&a9 - v31;
  *(_QWORD *)(v15 - 232) = v14;
  *(_QWORD *)(v15 - 224) = v29;
  v9[259] = v12;
  *(_QWORD *)(v15 - 216) = v12;
  *(_QWORD *)(v15 - 208) = v10;
  v9[217] = v10;
  type metadata accessor for ReconciliationID();
}

void sub_23AB14B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v9[264] = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9[72] = (char *)&a9 - v14;
  v9[265] = v15;
  v16 = sub_23B1C6C98();
  v9[211] = v16;
  v9[210] = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v9[96] = (char *)&a9 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v9[128] = (char *)&a9 - v19;
  v20 = v9[269];
  v21 = v9[267];
  v23 = type metadata accessor for SnapshotItem(0, v20, v21, v22);
  v9[223] = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v9[83] = (char *)&a9 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v9[82] = (char *)&a9 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v9[69] = (char *)&a9 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v9[68] = (char *)&a9 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v9[186] = (char *)&a9 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v9[172] = (char *)&a9 - v34;
  v36 = type metadata accessor for SnapshotItem(0, v11, v12, v35);
  v9[215] = *(_QWORD *)(v36 - 8);
  v37 = MEMORY[0x24BDAC7A8](v36);
  v9[6] = (char *)&a9 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x24BDAC7A8](v37);
  v9[45] = (char *)&a9 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v9[53] = (char *)&a9 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v9[67] = (char *)&a9 - v44;
  v45 = MEMORY[0x24BDAC7A8](v43);
  v9[65] = (char *)&a9 - v46;
  v47 = MEMORY[0x24BDAC7A8](v45);
  v9[70] = (char *)&a9 - v48;
  v49 = MEMORY[0x24BDAC7A8](v47);
  v9[81] = (char *)&a9 - v50;
  v51 = MEMORY[0x24BDAC7A8](v49);
  v9[66] = (char *)&a9 - v52;
  v53 = MEMORY[0x24BDAC7A8](v51);
  v9[174] = (char *)&a9 - v54;
  v55 = MEMORY[0x24BDAC7A8](v53);
  v9[190] = (char *)&a9 - v56;
  v57 = MEMORY[0x24BDAC7A8](v55);
  v9[191] = (char *)&a9 - v58;
  v59 = MEMORY[0x24BDAC7A8](v57);
  v9[103] = (char *)&a9 - v60;
  v9[104] = v61;
  MEMORY[0x24BDAC7A8](v59);
  v9[163] = (char *)&a9 - v62;
  v9[216] = v63;
  v64 = sub_23B1C6C98();
  v9[219] = v64;
  v9[212] = *(_QWORD *)(v64 - 8);
  v65 = MEMORY[0x24BDAC7A8](v64);
  v9[80] = (char *)&a9 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = MEMORY[0x24BDAC7A8](v65);
  v9[169] = (char *)&a9 - v68;
  v69 = MEMORY[0x24BDAC7A8](v67);
  v9[200] = (char *)&a9 - v70;
  v71 = MEMORY[0x24BDAC7A8](v69);
  v9[159] = (char *)&a9 - v72;
  v73 = MEMORY[0x24BDAC7A8](v71);
  v9[115] = (char *)&a9 - v74;
  v75 = MEMORY[0x24BDAC7A8](v73);
  v9[158] = (char *)&a9 - v76;
  v77 = MEMORY[0x24BDAC7A8](v75);
  v9[188] = (char *)&a9 - v78;
  v9[254] = v10;
  v9[252] = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v77);
  v9[112] = (char *)&a9 - v79;
  v80 = sub_23B1C5E4C();
  v9[114] = v80;
  v9[113] = *(_QWORD *)(v80 - 8);
  v81 = MEMORY[0x24BDAC7A8](v80);
  v9[40] = (char *)&a9 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = MEMORY[0x24BDAC7A8](v81);
  v9[39] = (char *)&a9 - v84;
  v85 = MEMORY[0x24BDAC7A8](v83);
  v9[37] = (char *)&a9 - v86;
  v87 = MEMORY[0x24BDAC7A8](v85);
  v9[38] = (char *)&a9 - v88;
  v89 = MEMORY[0x24BDAC7A8](v87);
  v9[36] = (char *)&a9 - v90;
  v91 = MEMORY[0x24BDAC7A8](v89);
  v9[32] = (char *)&a9 - v92;
  v93 = MEMORY[0x24BDAC7A8](v91);
  v9[134] = (char *)&a9 - v94;
  v95 = MEMORY[0x24BDAC7A8](v93);
  v9[93] = (char *)&a9 - v96;
  MEMORY[0x24BDAC7A8](v95);
  v9[55] = (char *)&a9 - v97;
  v9[221] = v23;
  v98 = sub_23B1C6C98();
  v9[227] = v98;
  v9[222] = *(_QWORD *)(v98 - 8);
  v99 = MEMORY[0x24BDAC7A8](v98);
  v9[171] = (char *)&a9 - ((v100 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = MEMORY[0x24BDAC7A8](v99);
  v9[145] = (char *)&a9 - v102;
  MEMORY[0x24BDAC7A8](v101);
  v9[111] = (char *)&a9 - v103;
  v105 = type metadata accessor for ItemReconciliationHalf(0, v11, v12, v104);
  v9[243] = v105;
  v9[118] = *(_QWORD *)(v105 - 8);
  MEMORY[0x24BDAC7A8](v105);
  v9[117] = (char *)&a9 - v106;
  v108 = type metadata accessor for ItemReconciliationHalf(0, v20, v21, v107);
  v9[241] = v108;
  v9[196] = *(_QWORD *)(v108 - 8);
  v109 = MEMORY[0x24BDAC7A8](v108);
  v9[99] = (char *)&a9 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v109);
  v9[198] = (char *)&a9 - v111;
  *(_QWORD *)(v13 - 232) = v20;
  *(_QWORD *)(v13 - 224) = v11;
  *(_QWORD *)(v13 - 216) = v21;
  *(_QWORD *)(v13 - 208) = v12;
  type metadata accessor for ItemReconciliation();
}

void sub_23AB15264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v18 = sub_23B1C6C98();
  v9[122] = v18;
  v9[121] = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v9[123] = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v9[161] = (char *)&a9 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v9[87] = (char *)&a9 - v24;
  v9[149] = a1;
  v9[148] = *(_QWORD *)(a1 - 8);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v9[100] = (char *)&a9 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v9[130] = (char *)&a9 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v9[48] = (char *)&a9 - v30;
  v9[258] = v12;
  v9[257] = *(_QWORD *)(v12 - 8);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v9[110] = (char *)&a9 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v31);
  v9[44] = (char *)&a9 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v9[29] = (char *)&a9 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v9[28] = (char *)&a9 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v9[27] = (char *)&a9 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v9[26] = (char *)&a9 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v9[97] = (char *)&a9 - v44;
  v45 = MEMORY[0x24BDAC7A8](v43);
  v9[109] = (char *)&a9 - v46;
  v47 = MEMORY[0x24BDAC7A8](v45);
  v9[108] = (char *)&a9 - v48;
  v49 = MEMORY[0x24BDAC7A8](v47);
  v9[152] = (char *)&a9 - v50;
  v51 = MEMORY[0x24BDAC7A8](v49);
  v9[101] = (char *)&a9 - v52;
  v53 = MEMORY[0x24BDAC7A8](v51);
  v9[239] = (char *)&a9 - v54;
  v55 = MEMORY[0x24BDAC7A8](v53);
  v9[247] = (char *)&a9 - v56;
  v57 = MEMORY[0x24BDAC7A8](v55);
  v9[253] = (char *)&a9 - v58;
  v59 = MEMORY[0x24BDAC7A8](v57);
  v9[153] = (char *)&a9 - v60;
  v61 = MEMORY[0x24BDAC7A8](v59);
  v9[181] = (char *)&a9 - v62;
  v63 = MEMORY[0x24BDAC7A8](v61);
  v9[89] = (char *)&a9 - v64;
  v65 = MEMORY[0x24BDAC7A8](v63);
  v9[137] = (char *)&a9 - v66;
  v67 = MEMORY[0x24BDAC7A8](v65);
  v9[208] = (char *)&a9 - v68;
  v69 = MEMORY[0x24BDAC7A8](v67);
  v9[125] = (char *)&a9 - v70;
  v71 = MEMORY[0x24BDAC7A8](v69);
  v9[185] = (char *)&a9 - v72;
  v73 = *(_QWORD *)(v14 - 8);
  v9[261] = v73;
  v74 = *(_QWORD *)(v73 + 64);
  v75 = MEMORY[0x24BDAC7A8](v71);
  v9[4] = (char *)&a9 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = MEMORY[0x24BDAC7A8](v75);
  v9[31] = (char *)&a9 - v77;
  v78 = MEMORY[0x24BDAC7A8](v76);
  v9[30] = (char *)&a9 - v79;
  v80 = MEMORY[0x24BDAC7A8](v78);
  v9[124] = (char *)&a9 - v81;
  v82 = MEMORY[0x24BDAC7A8](v80);
  v9[107] = (char *)&a9 - v83;
  v84 = MEMORY[0x24BDAC7A8](v82);
  v9[139] = (char *)&a9 - v85;
  v86 = MEMORY[0x24BDAC7A8](v84);
  v9[98] = (char *)&a9 - v87;
  v88 = MEMORY[0x24BDAC7A8](v86);
  v9[203] = (char *)&a9 - v89;
  v90 = MEMORY[0x24BDAC7A8](v88);
  v9[237] = (char *)&a9 - v91;
  v92 = MEMORY[0x24BDAC7A8](v90);
  v9[170] = (char *)&a9 - v93;
  v94 = MEMORY[0x24BDAC7A8](v92);
  v9[248] = (char *)&a9 - v95;
  v96 = MEMORY[0x24BDAC7A8](v94);
  v9[232] = (char *)&a9 - v97;
  v98 = MEMORY[0x24BDAC7A8](v96);
  v9[255] = (char *)&a9 - v99;
  v100 = MEMORY[0x24BDAC7A8](v98);
  v9[138] = (char *)&a9 - v101;
  v102 = MEMORY[0x24BDAC7A8](v100);
  v9[183] = (char *)&a9 - v103;
  v104 = MEMORY[0x24BDAC7A8](v102);
  v9[95] = (char *)&a9 - v105;
  v106 = MEMORY[0x24BDAC7A8](v104);
  v9[192] = (char *)&a9 - v107;
  v108 = MEMORY[0x24BDAC7A8](v106);
  v9[197] = (char *)&a9 - v109;
  v110 = MEMORY[0x24BDAC7A8](v108);
  v9[88] = (char *)&a9 - v111;
  MEMORY[0x24BDAC7A8](v110);
  v9[175] = (char *)&a9 - v112;
  v9[180] = v13;
  *(_QWORD *)(v16 - 232) = v13;
  *(_QWORD *)(v16 - 224) = v11;
  *(_QWORD *)(v16 - 216) = v15;
  *(_QWORD *)(v16 - 208) = v10;
  type metadata accessor for ItemReconciliation();
}

uint64_t sub_23AB158C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _BYTE *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  uint64_t v194;
  uint64_t v195;
  _BYTE *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE *v211;
  uint64_t v212;
  uint64_t v213;
  _BYTE *v214;
  uint64_t v215;
  void (*v216)(_BYTE *, uint64_t);
  uint64_t v217;
  unsigned int (*v218)(_BYTE *, uint64_t, uint64_t);
  void (*v220)(_BYTE *, _BYTE *, uint64_t);
  BOOL v221;
  uint64_t v222;
  char v223;
  void (*v224)(_BYTE *, _BYTE *, uint64_t);
  void (*v225)(_BYTE *, uint64_t);
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void (*v229)(uint64_t);
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  _BYTE *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  void (*v246)(uint64_t, uint64_t, uint64_t);
  uint64_t v247;
  uint64_t v248;
  BOOL v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  uint64_t v253;
  BOOL v254;
  uint64_t v255;
  void (*v256)(uint64_t, uint64_t, uint64_t);
  uint64_t v257;
  BOOL v258;
  void (*v259)(uint64_t, uint64_t);
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  void (*v266)(uint64_t, uint64_t, uint64_t);
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  BOOL v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void (*v278)(uint64_t, uint64_t, uint64_t);
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  uint64_t (*v284)(uint64_t, _QWORD);
  uint64_t v285;
  void (*v286)(uint64_t, uint64_t);
  uint64_t v287;
  uint64_t v288;
  char v289;
  int v290;
  uint64_t v291;
  void (*v292)(uint64_t, uint64_t, uint64_t);
  uint64_t v293;
  uint64_t v294;
  uint64_t (*v295)(uint64_t, uint64_t, uint64_t);
  uint64_t v296;
  int v297;
  void (*v298)(uint64_t, uint64_t, uint64_t);
  uint64_t v299;
  uint64_t v300;
  void (*v301)(uint64_t, uint64_t, uint64_t);
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  void (*v311)(uint64_t, uint64_t, uint64_t);
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char v318;
  char v319;
  int EnumCaseMultiPayload;
  uint64_t v321;
  uint64_t TupleTypeMetadata3;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  void (*v327)(uint64_t, uint64_t);
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char v333;
  void (*v334)(uint64_t, uint64_t);
  void (*v335)(uint64_t, uint64_t, uint64_t);
  uint64_t v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  char v344;
  void (*v345)(uint64_t, uint64_t);
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  void (*v349)(uint64_t, uint64_t, uint64_t);
  uint64_t v350;
  uint64_t v351;
  unsigned int (*v352)(uint64_t, uint64_t, _QWORD);
  uint64_t v353;
  BOOL v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _BYTE *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  void (*v363)(uint64_t, uint64_t);
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t TupleTypeMetadata;
  uint64_t v368;
  uint64_t v369;
  void (*v370)(uint64_t, uint64_t);
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t TupleTypeMetadata2;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  void (*v384)(uint64_t, uint64_t);
  void (*v385)(uint64_t, uint64_t);
  uint64_t v386;
  uint64_t v387;
  void (*v388)(uint64_t, uint64_t, uint64_t);
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t (*v393)(uint64_t);
  uint64_t v394;
  char v395;
  uint64_t v396;
  uint64_t v397;
  BOOL v398;
  uint64_t v399;
  uint64_t v400;
  BOOL v401;
  void (*v402)(_QWORD, uint64_t);
  uint64_t v403;
  _BOOL8 v404;
  uint64_t v405;
  char v406;
  uint64_t v407;
  uint64_t v408;
  _OWORD *v409;
  uint64_t v410;
  uint64_t v411;
  void (*v412)(uint64_t, _QWORD);
  uint64_t v413;
  int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  char v420;
  void (*v421)(_BYTE *, uint64_t);
  void (*v422)(uint64_t, uint64_t);
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  char v428;
  void (*v429)(uint64_t, uint64_t);
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unsigned int (*v433)(void);
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  char v441;
  void (*v442)(_QWORD, uint64_t);
  uint64_t v443;
  uint64_t v444;
  BOOL v445;
  uint64_t v446;
  uint64_t v447;
  char v448;
  uint64_t v449;
  char v450;
  int v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  BOOL v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  BOOL v463;
  uint64_t v464;
  int v465;
  void (*v466)(_QWORD, uint64_t);
  uint64_t v467;
  uint64_t v468;
  int v469;
  void (*v470)(uint64_t, uint64_t);
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  void (*v475)(_QWORD, uint64_t);
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  uint64_t v482;
  char v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  void (*v488)(uint64_t, uint64_t);
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  char v496;
  uint64_t v497;
  uint64_t v498;
  char v499;
  void (*v500)(_BYTE *, uint64_t);
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  void (*v504)(uint64_t, uint64_t);
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  void (*v514)(uint64_t, uint64_t);
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  _BYTE *v520;
  uint64_t v521;
  char v522;
  uint64_t v523;
  char v524;
  uint64_t v525;
  char v526;
  uint64_t v527;
  _BYTE *v528;
  uint64_t v529;
  uint64_t v530;
  char v531;
  uint64_t v532;
  char v533;
  uint64_t v534;
  BOOL v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  _OWORD *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  _OWORD *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  char v553;
  void (*v554)(uint64_t, uint64_t);
  BOOL v555;
  void (*v556)(uint64_t, uint64_t);
  uint64_t v557;
  uint64_t v558;
  uint64_t inited;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  void (*v567)(void);
  void (*v568)(_QWORD, uint64_t);
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  char v572;
  char v573;
  void (*v574)(_QWORD, uint64_t);
  uint64_t v575;
  _BYTE v576[80];

  v4 = sub_23B1C6C98();
  v1[225] = v4;
  v1[220] = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v1[47] = &v576[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = MEMORY[0x24BDAC7A8](v5);
  v1[43] = &v576[-v8];
  v9 = MEMORY[0x24BDAC7A8](v7);
  v1[168] = &v576[-v10];
  v11 = MEMORY[0x24BDAC7A8](v9);
  v1[182] = &v576[-v12];
  v13 = MEMORY[0x24BDAC7A8](v11);
  v1[166] = &v576[-v14];
  v15 = MEMORY[0x24BDAC7A8](v13);
  v1[177] = &v576[-v16];
  v17 = MEMORY[0x24BDAC7A8](v15);
  v1[206] = &v576[-v18];
  v19 = MEMORY[0x24BDAC7A8](v17);
  v1[146] = &v576[-v20];
  v21 = MEMORY[0x24BDAC7A8](v19);
  v1[184] = &v576[-v22];
  v23 = MEMORY[0x24BDAC7A8](v21);
  v1[207] = &v576[-v24];
  v25 = MEMORY[0x24BDAC7A8](v23);
  v1[147] = &v576[-v26];
  v27 = MEMORY[0x24BDAC7A8](v25);
  v1[230] = &v576[-v28];
  v1[256] = *(_QWORD *)(v1[270] - 8);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v1[5] = &v576[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v31 = MEMORY[0x24BDAC7A8](v29);
  v1[144] = &v576[-v32];
  v33 = MEMORY[0x24BDAC7A8](v31);
  v1[179] = &v576[-v34];
  v35 = MEMORY[0x24BDAC7A8](v33);
  v1[199] = &v576[-v36];
  v37 = MEMORY[0x24BDAC7A8](v35);
  v1[86] = &v576[-v38];
  v39 = MEMORY[0x24BDAC7A8](v37);
  v1[127] = &v576[-v40];
  v41 = MEMORY[0x24BDAC7A8](v39);
  v1[140] = &v576[-v42];
  v43 = MEMORY[0x24BDAC7A8](v41);
  v1[204] = &v576[-v44];
  v45 = MEMORY[0x24BDAC7A8](v43);
  v1[214] = &v576[-v46];
  v47 = MEMORY[0x24BDAC7A8](v45);
  v1[218] = &v576[-v48];
  v49 = MEMORY[0x24BDAC7A8](v47);
  v1[224] = &v576[-v50];
  v51 = MEMORY[0x24BDAC7A8](v49);
  v1[160] = &v576[-v52];
  v53 = MEMORY[0x24BDAC7A8](v51);
  v1[173] = &v576[-v54];
  v55 = MEMORY[0x24BDAC7A8](v53);
  v1[201] = &v576[-v56];
  v57 = MEMORY[0x24BDAC7A8](v55);
  v1[209] = &v576[-v58];
  v59 = MEMORY[0x24BDAC7A8](v57);
  v1[229] = &v576[-v60];
  v61 = MEMORY[0x24BDAC7A8](v59);
  v1[236] = &v576[-v62];
  v63 = MEMORY[0x24BDAC7A8](v61);
  v1[228] = &v576[-v64];
  v65 = MEMORY[0x24BDAC7A8](v63);
  v1[234] = &v576[-v66];
  v67 = MEMORY[0x24BDAC7A8](v65);
  v1[235] = &v576[-v68];
  v69 = MEMORY[0x24BDAC7A8](v67);
  v1[238] = &v576[-v70];
  v71 = MEMORY[0x24BDAC7A8](v69);
  v1[156] = &v576[-v72];
  v73 = MEMORY[0x24BDAC7A8](v71);
  v1[162] = &v576[-v74];
  v75 = MEMORY[0x24BDAC7A8](v73);
  v1[242] = &v576[-v76];
  v77 = MEMORY[0x24BDAC7A8](v75);
  v1[245] = &v576[-v78];
  v1[260] = a1;
  v1[249] = *(_QWORD *)(a1 - 8);
  v79 = MEMORY[0x24BDAC7A8](v77);
  v1[3] = &v576[-((v80 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v81 = MEMORY[0x24BDAC7A8](v79);
  v1[2] = &v576[-v82];
  v83 = MEMORY[0x24BDAC7A8](v81);
  v1[176] = &v576[-v84];
  v85 = MEMORY[0x24BDAC7A8](v83);
  v1[57] = &v576[-v86];
  v87 = MEMORY[0x24BDAC7A8](v85);
  v1[56] = &v576[-v88];
  v89 = MEMORY[0x24BDAC7A8](v87);
  v1[64] = &v576[-v90];
  v91 = MEMORY[0x24BDAC7A8](v89);
  v1[157] = &v576[-v92];
  v93 = MEMORY[0x24BDAC7A8](v91);
  v1[91] = &v576[-v94];
  v95 = MEMORY[0x24BDAC7A8](v93);
  v1[129] = &v576[-v96];
  v97 = MEMORY[0x24BDAC7A8](v95);
  v1[151] = &v576[-v98];
  v99 = MEMORY[0x24BDAC7A8](v97);
  v1[164] = &v576[-v100];
  v101 = MEMORY[0x24BDAC7A8](v99);
  v1[165] = &v576[-v102];
  v103 = MEMORY[0x24BDAC7A8](v101);
  v1[202] = &v576[-v104];
  v105 = MEMORY[0x24BDAC7A8](v103);
  v1[77] = &v576[-v106];
  v107 = MEMORY[0x24BDAC7A8](v105);
  v1[132] = &v576[-v108];
  v109 = MEMORY[0x24BDAC7A8](v107);
  v1[187] = &v576[-v110];
  v111 = MEMORY[0x24BDAC7A8](v109);
  v1[244] = &v576[-v112];
  v1[78] = v113;
  v114 = MEMORY[0x24BDAC7A8](v111);
  v1[246] = &v576[-v115];
  v116 = MEMORY[0x24BDAC7A8](v114);
  v1[79] = &v576[-((v117 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v118 = MEMORY[0x24BDAC7A8](v116);
  v1[76] = &v576[-v119];
  v120 = MEMORY[0x24BDAC7A8](v118);
  v1[74] = &v576[-v121];
  v122 = MEMORY[0x24BDAC7A8](v120);
  v1[52] = &v576[-v123];
  v124 = MEMORY[0x24BDAC7A8](v122);
  v1[75] = &v576[-v125];
  v126 = MEMORY[0x24BDAC7A8](v124);
  v1[61] = &v576[-v127];
  v128 = MEMORY[0x24BDAC7A8](v126);
  v1[50] = &v576[-v129];
  v130 = MEMORY[0x24BDAC7A8](v128);
  v1[62] = &v576[-v131];
  v132 = MEMORY[0x24BDAC7A8](v130);
  v1[63] = &v576[-v133];
  v134 = MEMORY[0x24BDAC7A8](v132);
  v1[25] = &v576[-v135];
  v136 = MEMORY[0x24BDAC7A8](v134);
  v1[24] = &v576[-v137];
  v138 = MEMORY[0x24BDAC7A8](v136);
  v1[23] = &v576[-v139];
  v140 = MEMORY[0x24BDAC7A8](v138);
  v1[20] = &v576[-v141];
  v142 = MEMORY[0x24BDAC7A8](v140);
  v1[15] = &v576[-v143];
  v144 = MEMORY[0x24BDAC7A8](v142);
  v1[14] = &v576[-v145];
  v146 = MEMORY[0x24BDAC7A8](v144);
  v1[13] = &v576[-v147];
  v148 = MEMORY[0x24BDAC7A8](v146);
  v1[12] = &v576[-v149];
  v150 = MEMORY[0x24BDAC7A8](v148);
  v1[94] = &v576[-v151];
  v152 = MEMORY[0x24BDAC7A8](v150);
  v1[213] = &v576[-v153];
  v154 = MEMORY[0x24BDAC7A8](v152);
  v1[143] = &v576[-v155];
  v156 = MEMORY[0x24BDAC7A8](v154);
  v1[155] = &v576[-v157];
  v158 = MEMORY[0x24BDAC7A8](v156);
  v1[194] = &v576[-v159];
  v160 = MEMORY[0x24BDAC7A8](v158);
  v1[240] = &v576[-v161];
  v162 = MEMORY[0x24BDAC7A8](v160);
  v164 = &v576[-v163];
  v165 = v1[274];
  v166 = *(_QWORD **)(v165 - 8);
  v167 = MEMORY[0x24BDAC7A8](v162);
  v1[49] = &v576[-((v168 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v169 = MEMORY[0x24BDAC7A8](v167);
  v1[42] = &v576[-v170];
  v171 = MEMORY[0x24BDAC7A8](v169);
  v1[46] = &v576[-v172];
  v173 = MEMORY[0x24BDAC7A8](v171);
  v1[59] = &v576[-v174];
  v175 = MEMORY[0x24BDAC7A8](v173);
  v1[60] = &v576[-v176];
  v177 = MEMORY[0x24BDAC7A8](v175);
  v1[22] = &v576[-v178];
  v179 = MEMORY[0x24BDAC7A8](v177);
  v1[84] = &v576[-v180];
  v181 = MEMORY[0x24BDAC7A8](v179);
  v1[85] = &v576[-v182];
  v183 = MEMORY[0x24BDAC7A8](v181);
  v1[133] = &v576[-v184];
  v185 = MEMORY[0x24BDAC7A8](v183);
  v1[189] = &v576[-v186];
  v187 = MEMORY[0x24BDAC7A8](v185);
  v1[131] = &v576[-v188];
  v189 = MEMORY[0x24BDAC7A8](v187);
  v1[136] = &v576[-v190];
  v191 = MEMORY[0x24BDAC7A8](v189);
  v193 = &v576[-v192];
  v194 = MEMORY[0x24BDAC7A8](v191);
  v196 = &v576[-v195];
  v197 = MEMORY[0x24BDAC7A8](v194);
  v1[106] = &v576[-v198];
  v199 = MEMORY[0x24BDAC7A8](v197);
  v1[178] = &v576[-v200];
  v201 = MEMORY[0x24BDAC7A8](v199);
  v1[167] = &v576[-v202];
  v203 = MEMORY[0x24BDAC7A8](v201);
  v1[126] = &v576[-v204];
  v205 = MEMORY[0x24BDAC7A8](v203);
  v1[193] = &v576[-v206];
  v207 = MEMORY[0x24BDAC7A8](v205);
  v1[226] = &v576[-v208];
  v209 = MEMORY[0x24BDAC7A8](v207);
  v211 = &v576[-v210];
  v1[105] = v212;
  MEMORY[0x24BDAC7A8](v209);
  v214 = &v576[-v213];
  v1[262] = v215;
  v216 = *(void (**)(_BYTE *, uint64_t))(v215 + 16);
  v217 = v1[273];
  v1[195] = v216;
  v216(v164, v217);
  v218 = (unsigned int (*)(_BYTE *, uint64_t, uint64_t))v166[6];
  v1[231] = v218;
  if (v218(v164, 1, v165) == 1)
  {
    (*(void (**)(_BYTE *, _QWORD))(v1[262] + 8))(v164, v1[275]);
LABEL_3:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[264] + 56))(v1[263], 1, 1, v1[265]);
    return 0;
  }
  v220 = (void (*)(_BYTE *, _BYTE *, uint64_t))v166[4];
  *v1 = v220;
  v220(v214, v164, v165);
  v221 = sub_23AC37674(2, v1[266]);
  v1[233] = v214;
  if (!v221)
  {
    v1[1] = v166;
    if (sub_23AC37674(4, v1[266]))
    {
      v226 = v1[260];
      v227 = v1[273];
      v228 = v1[257];
      v229 = *(void (**)(uint64_t))(v228 + 16);
      v230 = v1[253];
      v1[275] = v227 + *(int *)(v226 + 52);
      v231 = v1[258];
      v229(v230);
      v232 = v1[261];
      v233 = v1[272];
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v232 + 48))(v230, 1, v233) == 1)
      {
        (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
        (*(void (**)(uint64_t, uint64_t))(v228 + 8))(v230, v231);
LABEL_48:
        v289 = 1;
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[264] + 56))(v1[263], 1, 1, v1[265]);
        return v289 & 1;
      }
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v232 + 32))(v1[255], v230, v233);
      v244 = *(unsigned __int8 *)(v227 + *(int *)(v226 + 56));
      if (v244 != 4 && sub_23AC37B08(v244, 1))
      {
        v245 = v1[256];
        v246 = *(void (**)(uint64_t, uint64_t, uint64_t))(v245 + 16);
        v247 = v1[238];
        v248 = v1[270];
        v246(v247, v1[250], v248);
        if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v1[252] + 48))(v247, 1, v1[254]) == 1)
        {
LABEL_21:
          (*(void (**)(uint64_t, uint64_t))(v245 + 8))(v247, v248);
          v249 = sub_23AA9F3C4(16, *(_QWORD *)(v1[275] + *(int *)(v1[241] + 36)));
          v250 = v1[232];
          (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[261] + 16))(v250, v1[255], v1[272]);
          if (v249)
          {
            v251 = 1;
LABEL_123:
            v402 = *(void (**)(_QWORD, uint64_t))(v1[261] + 8);
            v403 = v1[272];
            v402(v1[232], v403);
            v404 = (v251 & 1) == 0;
            v316 = v1[233];
            v405 = v1[271];
            v406 = (*(uint64_t (**)(uint64_t, _BOOL8))(**(_QWORD **)(v1[251] + 32) + 416))(v316, v404);
            v1[271] = v405;
            if (v405)
            {
              v402(v1[255], v403);
              goto LABEL_125;
            }
            v319 = v406;
            v402(v1[255], v403);
            goto LABEL_127;
          }
          v343 = v1[271];
          v344 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v1[251] + 40) + 464))(v250);
          v1[271] = v343;
          if (!v343)
          {
            v251 = v344;
            goto LABEL_123;
          }
          v345 = *(void (**)(uint64_t, uint64_t))(v1[261] + 8);
          v346 = v1[272];
          v345(v250, v346);
          v345(v1[255], v346);
LABEL_158:
          v284 = *(uint64_t (**)(uint64_t, _QWORD))(v1[1] + 8);
          v285 = v1[233];
          return v284(v285, v1[274]);
        }
        v246(v1[235], v247, v248);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload != 5)
        {
          if (EnumCaseMultiPayload == 12)
          {
            __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542DE880);
            TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
            v376 = v1[235];

            v377 = v1[265];
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[255], v1[272]);
              (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
              (*(void (**)(uint64_t, uint64_t))(v1[264] + 8))(v376, v377);
              goto LABEL_198;
            }
            v414 = *(unsigned __int8 *)(v376 + *(int *)(swift_getTupleTypeMetadata2() + 48));
            if (v414 != 23 && v414)
            {
              (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[255], v1[272]);
              (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
              (*(void (**)(_QWORD, _QWORD))(v1[264] + 8))(v1[235], v1[265]);
              goto LABEL_198;
            }
            (*(void (**)(_QWORD, _QWORD))(v1[264] + 8))(v1[235], v1[265]);
          }
          else
          {
            if (EnumCaseMultiPayload != 6)
            {
              (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[255], v1[272]);
              (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
              (*(void (**)(_QWORD, _QWORD))(v1[252] + 8))(v1[235], v1[254]);
              goto LABEL_198;
            }
            v321 = v1[227];
            TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
            v323 = v1[235];
            v324 = v323 + *(int *)(TupleTypeMetadata3 + 48);
            v325 = v1[223];
            v326 = v1[221];
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v325 + 48))(v324, 1, v326) == 1)
            {
              (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[255], v1[272]);
              (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
              v327 = *(void (**)(uint64_t, uint64_t))(v1[222] + 8);
              v327(v324, v321);
              v327(v323, v321);
LABEL_198:
              (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[264] + 56))(v1[263], 1, 1, v1[265]);
              v412 = *(void (**)(uint64_t, _QWORD))(v1[256] + 8);
              v413 = v1[238];
              goto LABEL_199;
            }
            v424 = v1[261];
            v425 = v1[192];
            v426 = v1[272];
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v424 + 16))(v425, v324 + *(int *)(v326 + 36), v426);
            (*(void (**)(uint64_t, uint64_t))(v325 + 8))(v324, v326);
            v427 = v1[255];
            v428 = sub_23B1C63A4();
            v429 = *(void (**)(uint64_t, uint64_t))(v424 + 8);
            v429(v425, v426);
            if ((v428 & 1) == 0)
            {
              v429(v427, v426);
              (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
              (*(void (**)(_QWORD, _QWORD))(v1[222] + 8))(v1[235], v1[227]);
              goto LABEL_198;
            }
            (*(void (**)(_QWORD, _QWORD))(v1[222] + 8))(v1[235], v1[227]);
          }
LABEL_150:
          v248 = v1[270];
          v245 = v1[256];
          v247 = v1[238];
          goto LABEL_21;
        }
        v378 = v1[219];
        v379 = swift_getTupleTypeMetadata3();
        v380 = v1[235];
        v381 = v380 + *(int *)(v379 + 48);
        v382 = v1[215];
        v383 = v1[216];
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v382 + 48))(v380, 1, v383) == 1)
        {
          (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[255], v1[272]);
          (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
          v384 = *(void (**)(uint64_t, uint64_t))(v1[212] + 8);
          v384(v381, v378);
          v384(v380, v378);
          goto LABEL_198;
        }
        v1[273] = v381;
        v415 = *(_QWORD *)(v380 + *(int *)(v379 + 64));
        v416 = v1[191];
        (*(void (**)(void))(v382 + 32))();
        LOBYTE(v415) = sub_23AA9F3D0(2, v415);
        v417 = v1[190];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v382 + 16))(v417, v416, v383);
        v418 = v1[1];
        v419 = v1[274];
        (*(void (**)(_BYTE *, _QWORD, uint64_t))(v418 + 16))(v196, v1[233], v419);
        if ((v415 & 1) != 0)
        {
          v420 = sub_23B1C63A4();
          v421 = *(void (**)(_BYTE *, uint64_t))(v418 + 8);
          v421(v196, v419);
          v422 = *(void (**)(uint64_t, uint64_t))(v382 + 8);
          v422(v417, v383);
          v422(v416, v383);
          if ((v420 & 1) != 0)
          {
            (*(void (**)(_QWORD, _QWORD))(v1[212] + 8))(v1[273], v1[219]);
            goto LABEL_150;
          }
        }
        else
        {
          v421 = *(void (**)(_BYTE *, uint64_t))(v418 + 8);
          v421(v196, v419);
          v470 = *(void (**)(uint64_t, uint64_t))(v382 + 8);
          v470(v417, v383);
          v470(v416, v383);
        }
        (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[255], v1[272]);
        v421((_BYTE *)v1[233], v419);
        (*(void (**)(_QWORD, _QWORD))(v1[212] + 8))(v1[273], v1[219]);
        goto LABEL_198;
      }
      (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[255], v1[272]);
      goto LABEL_46;
    }
    if (sub_23AC37674(8, v1[266]))
    {
      v237 = v1[260];
      v238 = v1[273];
      v239 = v1[257];
      v240 = v1[247];
      v241 = v1[258];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v239 + 16))(v240, v238 + *(int *)(v237 + 52), v241);
      v242 = v1[261];
      v243 = v1[272];
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v242 + 48))(v240, 1, v243) == 1)
      {
        (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
        (*(void (**)(uint64_t, uint64_t))(v239 + 8))(v240, v241);
        goto LABEL_48;
      }
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v242 + 32))(v1[248], v240, v243);
      v265 = *(unsigned __int8 *)(v238 + *(int *)(v237 + 56));
      if (v265 != 4 && sub_23AC37B08(v265, 1))
      {
        v266 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1[256] + 16);
        v267 = v1[234];
        v268 = v1[270];
        v266(v267, v1[250], v268);
        if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v1[252] + 48))(v267, 1, v1[254]) != 1)
        {
          v266(v1[228], v267, v268);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 6u:
              v430 = swift_getTupleTypeMetadata3();
              v431 = v1[228] + *(int *)(v430 + 48);
              v432 = v1[223];
              v433 = *(unsigned int (**)(void))(v432 + 48);
              v434 = v1[221];
              if (v433() == 1)
                goto LABEL_218;
              v1[275] = v431;
              v435 = *(_QWORD *)(v1[228] + *(int *)(v430 + 64));
              v436 = v1[171];
              (*(void (**)(uint64_t))(v1[222] + 16))(v436);
              LOBYTE(v435) = sub_23AA9F3D0(2, v435);
              v437 = v1[172];
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v432 + 32))(v437, v436, v434);
              v438 = v1[261];
              v439 = v1[170];
              v440 = v1[272];
              (*(void (**)(uint64_t, _QWORD, uint64_t))(v438 + 16))(v439, v1[248], v440);
              if ((v435 & 1) != 0)
              {
                v441 = sub_23B1C63A4();
                (*(void (**)(uint64_t, uint64_t))(v438 + 8))(v439, v440);
                (*(void (**)(uint64_t, uint64_t))(v432 + 8))(v437, v434);
                v431 = v1[275];
                if ((v441 & 1) != 0)
                {
                  v442 = *(void (**)(_QWORD, uint64_t))(v1[222] + 8);
                  v443 = v1[227];
                  v442(v1[275], v443);
                  v442(v1[228], v443);
                  break;
                }
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t))(v438 + 8))(v439, v440);
                (*(void (**)(uint64_t, uint64_t))(v432 + 8))(v437, v434);
                v431 = v1[275];
              }
LABEL_218:
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v433)(v431, 1, v434) == 1)
              {
                (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[248], v1[272]);
                (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
                v488 = *(void (**)(uint64_t, uint64_t))(v1[222] + 8);
                v489 = v431;
                v490 = v1[227];
                v488(v489, v490);
                v488(v1[228], v490);
LABEL_220:
                (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[264] + 56))(v1[263], 1, 1, v1[265]);
                v412 = *(void (**)(uint64_t, _QWORD))(v1[256] + 8);
                v413 = v1[234];
                goto LABEL_199;
              }
              v491 = v1[223];
              v492 = v1[186];
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v491 + 32))(v492, v431, v434);
              v493 = v1[248];
              v494 = v1[272];
              if ((sub_23B1C63A4() & 1) == 0)
              {
                (*(void (**)(uint64_t, uint64_t))(v491 + 8))(v492, v434);
                (*(void (**)(uint64_t, uint64_t))(v1[261] + 8))(v493, v494);
                (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
                (*(void (**)(_QWORD, _QWORD))(v1[222] + 8))(v1[228], v1[227]);
                goto LABEL_220;
              }
              if (!sub_23AA9F3C4(2, *(_QWORD *)(v1[273] + *(int *)(v1[243] + 36))))
                sub_23AB003A0();
              (*(void (**)(_QWORD, _QWORD))(v1[223] + 8))(v1[186], v1[221]);
              (*(void (**)(_QWORD, _QWORD))(v1[222] + 8))(v1[228], v1[227]);
              break;
            case 8u:
            case 0x20u:
              (*(void (**)(_QWORD, _QWORD))(v1[252] + 8))(v1[228], v1[254]);
              break;
            case 0x15u:
              swift_release();
              break;
            default:
              (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[248], v1[272]);
              (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
              (*(void (**)(_QWORD, _QWORD))(v1[252] + 8))(v1[228], v1[254]);
              goto LABEL_220;
          }
        }
        (*(void (**)(_QWORD, _QWORD))(v1[256] + 8))(v1[234], v1[270]);
        v444 = *(_QWORD *)(v1[251] + 40);
        v445 = sub_23AA9F3C4(2, *(_QWORD *)(v1[273] + *(int *)(v1[243] + 36)));
        v446 = v1[248];
        v447 = v1[271];
        v448 = (*(uint64_t (**)(uint64_t, BOOL))(*(_QWORD *)v444 + 384))(v446, v445);
        v1[271] = v447;
        if (v447)
        {
          (*(void (**)(uint64_t, _QWORD))(v1[261] + 8))(v446, v1[272]);
          goto LABEL_158;
        }
        if ((v448 & 1) == 0)
        {
          v316 = v1[233];
          v449 = v1[271];
          v450 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v1[251] + 32) + 392))(v316);
          v1[271] = v449;
          if (v449)
          {
            (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[248], v1[272]);
            goto LABEL_125;
          }
          v319 = v450;
          (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[248], v1[272]);
LABEL_127:
          (*(void (**)(uint64_t, _QWORD))(v1[1] + 8))(v316, v1[274]);
          goto LABEL_128;
        }
        (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[248], v1[272]);
LABEL_162:
        (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
        goto LABEL_3;
      }
      (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[248], v1[272]);
      goto LABEL_46;
    }
    if (sub_23AC37674(16, v1[266]))
    {
      v260 = v1[257];
      v261 = v1[239];
      v262 = v1[258];
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v260 + 16))(v261, v1[273] + *(int *)(v1[260] + 52), v262);
      v263 = v1[261];
      v264 = v1[272];
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v263 + 48))(v261, 1, v264) == 1)
      {
        (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
        (*(void (**)(uint64_t, uint64_t))(v260 + 8))(v261, v262);
        goto LABEL_48;
      }
      v298 = *(void (**)(uint64_t, uint64_t, uint64_t))(v263 + 32);
      v299 = v1[237];
      v298(v299, v261, v264);
      v300 = v1[256];
      v301 = *(void (**)(uint64_t, uint64_t, uint64_t))(v300 + 16);
      v302 = v1[236];
      v303 = v1[270];
      v301(v302, v1[250], v303);
      v304 = v1[254];
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1[252] + 48))(v302, 1, v304) == 1)
        goto LABEL_57;
      v328 = v1[229];
      v301(v328, v302, v303);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        v329 = v1[265];
        v330 = v328 + *(int *)(swift_getTupleTypeMetadata2() + 48);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v331 = v1[203];
          v332 = v1[272];
          v298(v331, v330, v332);
          v299 = v1[237];
          v333 = sub_23B1C63A4();
          v334 = *(void (**)(uint64_t, uint64_t))(v1[261] + 8);
          v334(v331, v332);
          if ((v333 & 1) != 0)
          {
            (*(void (**)(_QWORD, _QWORD))(v1[264] + 8))(v1[229], v1[265]);
            v303 = v1[270];
            v300 = v1[256];
            v302 = v1[236];
LABEL_57:
            (*(void (**)(uint64_t, uint64_t))(v300 + 8))(v302, v303);
            v305 = v1[271];
            v306 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v1[251] + 40) + 400))(v299);
            v1[271] = v305;
            if (v305)
            {
              (*(void (**)(uint64_t, _QWORD))(v1[261] + 8))(v299, v1[272]);
              goto LABEL_158;
            }
            v319 = v306;
            (*(void (**)(uint64_t, _QWORD))(v1[261] + 8))(v299, v1[272]);
            goto LABEL_89;
          }
          v334(v299, v332);
          (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
          v347 = v1[264];
          v329 = v1[265];
          (*(void (**)(_QWORD, uint64_t))(v347 + 8))(v1[229], v329);
        }
        else
        {
          (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[237], v1[272]);
          (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
          v347 = v1[264];
          v385 = *(void (**)(uint64_t, uint64_t))(v347 + 8);
          v385(v330, v329);
          v385(v328, v329);
        }
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[237], v1[272]);
        (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
        (*(void (**)(uint64_t, uint64_t))(v1[252] + 8))(v328, v304);
        v329 = v1[265];
        v347 = v1[264];
      }
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v347 + 56))(v1[263], 1, 1, v329);
      v412 = *(void (**)(uint64_t, _QWORD))(v1[256] + 8);
      v413 = v1[236];
LABEL_199:
      v412(v413, v1[270]);
      return 0;
    }
    if (sub_23AC37674(256, v1[266]))
    {
      v272 = v1[251];
      v273 = (*(uint64_t (**)(void))(*(_QWORD *)v272 + 152))();
      if (sub_23AA9F3D0(256, v273))
        goto LABEL_46;
      v274 = v1[271];
      v275 = sub_23B0C744C(v272, v1[260]);
      v1[271] = v274;
      if (v274)
        goto LABEL_158;
      v276 = v275;
      if (v275 == 70)
        goto LABEL_46;
      v277 = v1[256];
      v278 = *(void (**)(uint64_t, uint64_t, uint64_t))(v277 + 16);
      v279 = v1[209];
      v280 = v1[270];
      v278(v279, v1[250], v280);
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v1[252] + 48))(v279, 1, v1[254]) == 1)
      {
LABEL_43:
        (*(void (**)(uint64_t, uint64_t))(v277 + 8))(v279, v280);
        v281 = v1[233];
        v282 = v1[271];
        v283 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v1[251] + 24) + 328))(v276, v281, *(_QWORD *)(v1[273] + *(int *)(v1[260] + 64)), 0);
        v1[271] = v282;
        if (v282)
        {
          v284 = *(uint64_t (**)(uint64_t, _QWORD))(v1[1] + 8);
          v285 = v281;
          return v284(v285, v1[274]);
        }
        if ((v283 & 1) == 0)
        {
          v473 = v1[269];
          *(_QWORD *)(v2 - 232) = v1[180];
          *(_QWORD *)(v2 - 224) = v473;
          v474 = v1[267];
          *(_QWORD *)(v2 - 216) = v1[268];
          *(_QWORD *)(v2 - 208) = v474;
          type metadata accessor for Ingestion.FetchItemMetadata();
        }
        goto LABEL_162;
      }
      v278(v1[201], v279, v280);
      v451 = swift_getEnumCaseMultiPayload();
      if (v451 == 21)
      {
        if ((*(_QWORD *)v1[201] & 0x8000000000000000) == 0)
        {
          v477 = v1[269];
          *(_QWORD *)(v2 - 232) = v1[180];
          *(_QWORD *)(v2 - 224) = v477;
          v478 = v1[267];
          *(_QWORD *)(v2 - 216) = v1[268];
          *(_QWORD *)(v2 - 208) = v478;
          type metadata accessor for Ingestion.FaultDirectoryInTree();
        }
        swift_release();
        (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
      }
      else if (v451 == 13)
      {
        v452 = v1[265];
        v453 = swift_getTupleTypeMetadata2();
        v454 = v1[201];
        v455 = *(unsigned __int8 *)(v454 + *(int *)(v453 + 48));
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
          (*(void (**)(uint64_t, uint64_t))(v1[264] + 8))(v454, v452);
        }
        else
        {
          v497 = v1[1];
          v498 = v1[274];
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v497 + 16))(v193, v454, v498);
          v499 = sub_23B1C63A4();
          v500 = *(void (**)(_BYTE *, uint64_t))(v497 + 8);
          v500(v193, v498);
          if ((v499 & 1) != 0 && sub_23AC37A40(v276, v455))
          {
            v500((_BYTE *)v1[201], v1[274]);
            v280 = v1[270];
            v277 = v1[256];
            v279 = v1[209];
            goto LABEL_43;
          }
          if (v455 == 3)
          {
            v520 = (_BYTE *)v1[136];
            v521 = v1[274];
            ((void (*)(_BYTE *, _QWORD, uint64_t))*v1)(v520, v1[201], v521);
            v522 = sub_23B1C63A4();
            v500(v520, v521);
            v280 = v1[270];
            v277 = v1[256];
            v279 = v1[209];
            if ((v522 & 1) != 0)
              goto LABEL_43;
            v500((_BYTE *)v1[233], v1[274]);
          }
          else
          {
            v549 = v1[274];
            v500((_BYTE *)v1[233], v549);
            v500((_BYTE *)v1[201], v549);
          }
        }
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
        (*(void (**)(_QWORD, _QWORD))(v1[252] + 8))(v1[201], v1[254]);
      }
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[264] + 56))(v1[263], 1, 1, v1[265]);
      v412 = *(void (**)(uint64_t, _QWORD))(v1[256] + 8);
      v413 = v1[209];
      goto LABEL_199;
    }
    if (sub_23AC37674(0x40000, v1[266]))
    {
      v307 = v1[273] + *(int *)(v1[243] + 64);
      if (*(_BYTE *)(v307 + 16) || !sub_23AA9F3D0(256, *(_QWORD *)v307))
        goto LABEL_46;
      v308 = v1[271];
      v309 = sub_23B0C744C(v1[251], v1[260]);
      v1[271] = v308;
      if (v308)
        goto LABEL_158;
      v310 = v309;
      if (v309 == 70)
        goto LABEL_46;
      v311 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1[256] + 16);
      v312 = v1[173];
      v313 = v1[270];
      v311(v312, v1[250], v313);
      v314 = v1[254];
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1[252] + 48))(v312, 1, v314) == 1)
      {
LABEL_65:
        (*(void (**)(uint64_t, uint64_t))(v1[256] + 8))(v312, v313);
        v315 = v310;
        v316 = v1[233];
        v317 = v1[271];
        v318 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(v1[251] + 24) + 328))(v315, v316, *(_QWORD *)(v1[273] + *(int *)(v1[260] + 64)), 1);
        v1[271] = v317;
        if (v317)
        {
LABEL_125:
          v284 = *(uint64_t (**)(uint64_t, _QWORD))(v1[1] + 8);
          v285 = v316;
          return v284(v285, v1[274]);
        }
        v319 = v318;
        goto LABEL_127;
      }
      v495 = v1[160];
      v311(v495, v312, v313);
      if (swift_getEnumCaseMultiPayload() == 13)
      {
        v496 = *(_BYTE *)(v495 + *(int *)(swift_getTupleTypeMetadata2() + 48));
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
          (*(void (**)(uint64_t, _QWORD))(v1[264] + 8))(v495, v1[265]);
        }
        else
        {
          v550 = v1[131];
          v551 = v495;
          v552 = v1[274];
          ((void (*)(uint64_t, uint64_t, uint64_t))*v1)(v550, v551, v552);
          v553 = sub_23B1C63A4();
          v554 = *(void (**)(uint64_t, uint64_t))(v1[1] + 8);
          v554(v550, v552);
          if ((v553 & 1) != 0)
          {
            v555 = sub_23AC37A40(v310, v496);
            v313 = v1[270];
            v312 = v1[173];
            if (v555)
              goto LABEL_65;
          }
          v554(v1[233], v1[274]);
        }
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
        (*(void (**)(uint64_t, uint64_t))(v1[252] + 8))(v495, v314);
      }
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[264] + 56))(v1[263], 1, 1, v1[265]);
      v412 = *(void (**)(uint64_t, _QWORD))(v1[256] + 8);
      v413 = v1[173];
      goto LABEL_199;
    }
    if (sub_23AC37674(512, v1[266]))
    {
      v335 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1[256] + 16);
      v336 = v1[224];
      v337 = v1[270];
      v335(v336, v1[250], v337);
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v1[252] + 48))(v336, 1, v1[254]) != 1)
      {
        v335(v1[218], v336, v337);
        v338 = swift_getEnumCaseMultiPayload();
        if (v338 == 22)
        {
          v456 = sub_23AC37E20(*(unsigned __int8 *)(*(_QWORD *)(v1[251] + 32) + 32), *(unsigned __int8 *)v1[218]);
          v337 = v1[270];
          v336 = v1[224];
          if (v456)
            goto LABEL_171;
          (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
        }
        else
        {
          if (v338 == 18)
          {
            v339 = v1[274];
            v340 = v1[272];
            v341 = swift_getTupleTypeMetadata2();
            v342 = v1[218];
            (*(void (**)(uint64_t, uint64_t))(v1[261] + 8))(v342 + *(int *)(v341 + 48), v340);
            (*(void (**)(uint64_t, uint64_t))(v1[1] + 8))(v342, v339);
            v337 = v1[270];
            v336 = v1[224];
            goto LABEL_171;
          }
          (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
          (*(void (**)(_QWORD, _QWORD))(v1[252] + 8))(v1[218], v1[254]);
        }
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[264] + 56))(v1[263], 1, 1, v1[265]);
        v412 = *(void (**)(uint64_t, _QWORD))(v1[256] + 8);
        v413 = v1[224];
        goto LABEL_199;
      }
LABEL_171:
      (*(void (**)(uint64_t, uint64_t))(v1[256] + 8))(v336, v337);
      v457 = v1[213];
      v458 = v1[233];
      v459 = v1[271];
      (*(void (**)(uint64_t))(**(_QWORD **)(v1[251] + 32) + 280))(v458);
      v1[271] = v459;
      if (v459)
      {
        v284 = *(uint64_t (**)(uint64_t, _QWORD))(v1[1] + 8);
        v285 = v458;
        return v284(v285, v1[274]);
      }
      v460 = v1[274];
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v1[231])(v457, 1, v460) != 1)
      {
        ((void (*)(_QWORD, uint64_t, uint64_t))*v1)(v1[189], v457, v460);
        sub_23AB00114();
      }
      (*(void (**)(_QWORD, uint64_t))(v1[1] + 8))(v1[233], v460);
      v286 = *(void (**)(uint64_t, uint64_t))(v1[262] + 8);
      v287 = v457;
      goto LABEL_175;
    }
    if (!sub_23AC37674(1024, v1[266]))
    {
      if (sub_23AC37674(4096, v1[266]))
      {
        v386 = v1[251];
        sub_23AFEFC2C((uint64_t (*)(void))sub_23AB229BC, v386, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/interfaces/persistence/ReconciliationTable.swift", 121, 2, 2052);
        v387 = v1[256];
        v388 = *(void (**)(uint64_t, uint64_t, uint64_t))(v387 + 16);
        v389 = v1[199];
        v390 = v1[270];
        v388(v389, v1[250], v390);
        v391 = v1[254];
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1[252] + 48))(v389, 1, v391) != 1)
        {
          v468 = v1[179];
          v388(v468, v389, v390);
          if (swift_getEnumCaseMultiPayload() != 25
            || (v391 = v1[265], v469 = swift_getEnumCaseMultiPayload(), v1[252] = v1[264], v469 != 1))
          {
            (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
            (*(void (**)(uint64_t, uint64_t))(v1[252] + 8))(v468, v391);
            (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[264] + 56))(v1[263], 1, 1, v1[265]);
            v412 = *(void (**)(uint64_t, _QWORD))(v1[256] + 8);
            v413 = v1[199];
            goto LABEL_199;
          }
          (*(void (**)(uint64_t, _QWORD))(v1[264] + 8))(v468, v1[265]);
          v386 = v1[251];
          v390 = v1[270];
          v387 = v1[256];
          v389 = v1[199];
        }
        (*(void (**)(uint64_t, uint64_t))(v387 + 8))(v389, v390);
        v392 = *(_QWORD *)(v386 + 40);
        v393 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v392 + 16) + 768);
        v394 = swift_retain();
        v395 = v393(v394);
        swift_release();
        if ((v395 & 1) == 0 && *(_BYTE *)(v392 + 33) == 1)
          goto LABEL_46;
        v396 = v1[260];
        v397 = v1[273];
        v398 = sub_23B0C6AC4(v396);
        v399 = v1[249];
        v400 = v1[176];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v399 + 16))(v400, v397, v396);
        if (v398)
        {
          v401 = sub_23AA9F3C4(16, *(_QWORD *)(v400 + *(int *)(v396 + 52) + *(int *)(v1[241] + 36)));
          (*(void (**)(uint64_t, uint64_t))(v399 + 8))(v400, v396);
          if (v401)
            goto LABEL_46;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t))(v399 + 8))(v400, v396);
        }
        v484 = v1[169];
        v316 = v1[233];
        v485 = v1[271];
        (*(void (**)(uint64_t, uint64_t))(**(_QWORD **)(v1[251] + 32) + 240))(v316, 1);
        v1[271] = v485;
        if (!v485)
        {
          (*(void (**)(uint64_t, _QWORD))(v1[1] + 8))(v316, v1[274]);
          v486 = v1[215];
          v487 = v1[216];
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v486 + 48))(v484, 1, v487) == 1)
          {
            (*(void (**)(uint64_t, _QWORD))(v1[212] + 8))(v484, v1[219]);
            goto LABEL_3;
          }
          v523 = v1[141];
          sub_23AA9BA80(v484 + *(int *)(v487 + 48), v523);
          (*(void (**)(uint64_t, uint64_t))(v486 + 8))(v484, v487);
          v524 = *(_BYTE *)(v523 + *(int *)(v1[142] + 84));
          sub_23AA9F854(v523);
          if (!sub_23AA9F51C(v524, 0))
            goto LABEL_3;
          goto LABEL_48;
        }
        goto LABEL_125;
      }
      if (sub_23AC37674(0x2000, v1[266]))
      {
        v423 = (*(uint64_t (**)(void))(*(_QWORD *)v1[251] + 152))();
        if (sub_23AA9F3D0(128, v423)
          && !sub_23AC37674(*(_QWORD *)(v1[273] + *(int *)(v1[243] + 40)), 0x20000000000))
        {
          sub_23B0C8A64(v1[251], v1[260]);
        }
        goto LABEL_46;
      }
      if (sub_23AC37674(0x4000, v1[266]))
      {
        if (sub_23AE4F6B4())
        {
          v471 = v1[269];
          *(_QWORD *)(v2 - 232) = v1[180];
          *(_QWORD *)(v2 - 224) = v471;
          v472 = v1[267];
          *(_QWORD *)(v2 - 216) = v1[268];
          *(_QWORD *)(v2 - 208) = v472;
          type metadata accessor for Materialization.MaterializeIgnoredItem();
        }
        goto LABEL_46;
      }
      if (sub_23AC37674(0x8000, v1[266]))
      {
        v479 = v1[251];
        v480 = *(_QWORD *)(v479 + 32);
        if (!sub_23AE4F6B4())
        {
          v525 = v1[271];
          v526 = sub_23B0C744C(v479, v1[260]);
          v1[271] = v525;
          if (v525)
            goto LABEL_158;
          if (v526 != 70)
          {
            switch(v526)
            {
              case 0:
                if (*(_BYTE *)(*(_QWORD *)(v1[251] + 40) + 33) == 1)
                  goto LABEL_46;
                v527 = v1[271];
                (*(void (**)(_QWORD))(*(_QWORD *)v480 + 280))(v1[233]);
                v1[271] = v527;
                if (v527)
                  goto LABEL_158;
                if (((unsigned int (*)(_QWORD, uint64_t, _QWORD))v1[231])(v1[74], 1, v1[274]) != 1)
                {
                  ((void (*)(_QWORD, _QWORD, _QWORD))*v1)(v1[46], v1[74], v1[274]);
                  sub_23AB00114();
                }
                (*(void (**)(_QWORD, _QWORD))(v1[262] + 8))(v1[74], v1[275]);
LABEL_264:
                v528 = *(_BYTE **)(v1[251] + 40);
                if (v528[33] == 1)
                  goto LABEL_46;
                v529 = v1[271];
                (*(void (**)(_QWORD))(*(_QWORD *)v480 + 280))(v1[233]);
                v1[271] = v529;
                if (v529)
                  goto LABEL_158;
                if (((unsigned int (*)(_QWORD, uint64_t, _QWORD))v1[231])(v1[76], 1, v1[274]) == 1)
                {
                  (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
                  v286 = *(void (**)(uint64_t, uint64_t))(v1[262] + 8);
                  v287 = v1[76];
                  goto LABEL_175;
                }
                v565 = v1[42];
                ((void (*)(uint64_t, _QWORD, _QWORD))*v1)(v565, v1[76], v1[274]);
                v566 = v1[271];
                (*(void (**)(uint64_t))(**(_QWORD **)(v1[251] + 16) + 160))(v565);
                v1[271] = v566;
                if (v566)
                  goto LABEL_300;
                if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(v1[261] + 48))(v1[44], 1, v1[272]) == 1)
                {
                  v568 = *(void (**)(_QWORD, uint64_t))(v1[1] + 8);
                  v569 = v1[274];
                  v568(v1[42], v569);
                  v568(v1[233], v569);
                  (*(void (**)(_QWORD, _QWORD))(v1[257] + 8))(v1[44], v1[258]);
                  goto LABEL_48;
                }
                v570 = v1[4];
                (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[261] + 32))(v570, v1[44], v1[272]);
                v571 = v1[271];
                v572 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v528 + 456))(v570);
                v1[271] = v571;
                if (v571)
                {
                  (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[4], v1[272]);
LABEL_300:
                  v567 = *(void (**)(void))(v1[1] + 8);
                  v558 = v1[274];
                  v567();
                  return ((uint64_t (*)(_QWORD, uint64_t))v567)(v1[233], v558);
                }
                v573 = v572;
                (*(void (**)(_QWORD, _QWORD))(v1[261] + 8))(v1[4], v1[272]);
                v574 = *(void (**)(_QWORD, uint64_t))(v1[1] + 8);
                v575 = v1[274];
                v574(v1[42], v575);
                v574(v1[233], v575);
                if ((v573 & 1) != 0)
                  goto LABEL_3;
                break;
              case 6:
              case 12:
              case 23:
                goto LABEL_46;
              default:
                goto LABEL_264;
            }
            goto LABEL_48;
          }
          goto LABEL_46;
        }
        v481 = *(unsigned __int8 *)(v1[273] + *(int *)(v1[243] + 56));
        if (v481 != 6 && sub_23AA9F51C(v481, 0))
        {
LABEL_46:
          v286 = *(void (**)(uint64_t, uint64_t))(v1[1] + 8);
          v287 = v1[233];
          v288 = v1[274];
LABEL_47:
          v286(v287, v288);
          goto LABEL_48;
        }
        if (sub_23AA9F3C4(16, *(_QWORD *)(v1[273] + *(int *)(v1[243] + 36))))
          goto LABEL_162;
        v482 = v1[271];
        v483 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v480 + 464))(v1[233]);
        v1[271] = v482;
        if (v482)
          goto LABEL_158;
        v319 = v483;
LABEL_89:
        (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
LABEL_128:
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[264] + 56))(v1[263], 1, 1, v1[265]);
        v289 = v319 ^ 1;
        return v289 & 1;
      }
      if (sub_23AC37674(0x80000, v1[266]))
      {
        if (sub_23AE4F6B4())
        {
          v289 = ((*(uint64_t (**)(void))(*(_QWORD *)v1[251] + 160))() & 1) == 0;
          (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[264] + 56))(v1[263], 1, 1, v1[265]);
          return v289 & 1;
        }
        goto LABEL_46;
      }
      if (!sub_23AC37674(0x100000, v1[266]))
      {
        sub_23B1C704C();
        __break(1u);
        JUMPOUT(0x23AB21364);
      }
      v530 = v1[271];
      v531 = sub_23B0C744C(v1[251], v1[260]);
      v1[271] = v530;
      if (v530)
        goto LABEL_158;
      v533 = v531;
      if (v531 == 70)
        goto LABEL_46;
      switch(v531)
      {
        case 0:
        case 1:
        case 2:
          v534 = v532;
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[261] + 56))(v1[110], 1, 1, v1[272]);
          v535 = sub_23AC37A40(v533, 1);
          if (v535 && sub_23AA9F3D0(2, v534) || sub_23AC37A40(v533, 0))
            sub_23AB21B50((uint64_t *)v1[251], v1[233], v1[110]);
          if (v535)
          {
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E2120);
            inited = swift_initStackObject();
            v560 = sub_23B1A1F64(inited, 3);
            *(_OWORD *)v561 = xmmword_23B1CE630;
            *(_QWORD *)(v561 + 16) = 1;
            v562 = nullsub_1(v560);
            v563 = sub_23AFD7BC8(v562);
            swift_bridgeObjectRelease();
            if ((sub_23AA9F56C(v563, v534) & 1) == 0)
              goto LABEL_293;
          }
          if (sub_23AC37A40(v533, 2))
LABEL_293:
            sub_23AB22014();
          (*(void (**)(_QWORD, _QWORD))(v1[257] + 8))(v1[110], v1[258]);
          goto LABEL_46;
        case 12:
          v564 = v1[271];
          (*(void (**)(_QWORD))(**(_QWORD **)(v1[251] + 32) + 280))(v1[233]);
          v1[271] = v564;
          if (v564)
            goto LABEL_158;
          if (((unsigned int (*)(_QWORD, uint64_t, _QWORD))v1[231])(v1[79], 1, v1[274]) != 1)
          {
            ((void (*)(_QWORD, _QWORD, _QWORD))*v1)(v1[49], v1[79], v1[274]);
            sub_23AB00114();
          }
          (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
          v286 = *(void (**)(uint64_t, uint64_t))(v1[262] + 8);
          v287 = v1[79];
          break;
        default:
          goto LABEL_46;
      }
LABEL_175:
      v288 = v1[275];
      goto LABEL_47;
    }
    v348 = v1[256];
    v349 = *(void (**)(uint64_t, uint64_t, uint64_t))(v348 + 16);
    v350 = v1[214];
    v351 = v1[270];
    v349(v350, v1[250], v351);
    v352 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v1[252] + 48);
    if (v352(v350, 1, v1[254]) != 1)
    {
      v349(v1[204], v350, v351);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 5u:
          v507 = swift_getTupleTypeMetadata3();
          v502 = v1[204];
          v503 = v502 + *(int *)(v507 + 48);
          if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v1[215] + 48))(v502, 1, v1[216]) == 1)
          {
            (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
            v504 = *(void (**)(uint64_t, uint64_t))(v1[212] + 8);
            v508 = v503;
            v506 = v1[219];
            v504(v508, v506);
            goto LABEL_240;
          }
          v543 = *(_QWORD *)(v502 + *(int *)(v507 + 64));
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E2120);
          v544 = swift_initStackObject();
          v545 = sub_23B1A1F64(v544, 2);
          *v546 = xmmword_23B1CE640;
          v547 = nullsub_1(v545);
          v548 = sub_23AFD7BC8(v547);
          swift_bridgeObjectRelease();
          if ((sub_23AA9F56C(v548, v543) & 1) != 0)
          {
            (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
            v504 = *(void (**)(uint64_t, uint64_t))(v1[212] + 8);
            v542 = v1[219];
            v504(v1[204], v542);
            goto LABEL_280;
          }
          v556 = *(void (**)(uint64_t, uint64_t))(v1[212] + 8);
          v557 = v1[219];
          v556(v1[204], v557);
          goto LABEL_289;
        case 6u:
          v501 = swift_getTupleTypeMetadata3();
          v502 = v1[204];
          v503 = v502 + *(int *)(v501 + 48);
          if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v1[223] + 48))(v502, 1, v1[221]) == 1)
          {
            (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
            v504 = *(void (**)(uint64_t, uint64_t))(v1[222] + 8);
            v505 = v503;
            v506 = v1[227];
            v504(v505, v506);
LABEL_240:
            v509 = v502;
            v510 = v506;
LABEL_281:
            v504(v509, v510);
LABEL_282:
            (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[264] + 56))(v1[263], 1, 1, v1[265]);
            v412 = *(void (**)(uint64_t, _QWORD))(v1[256] + 8);
            v413 = v1[214];
            goto LABEL_199;
          }
          v536 = *(_QWORD *)(v502 + *(int *)(v501 + 64));
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E2120);
          v537 = swift_initStackObject();
          v538 = sub_23B1A1F64(v537, 2);
          *v539 = xmmword_23B1CE640;
          v540 = nullsub_1(v538);
          v541 = sub_23AFD7BC8(v540);
          swift_bridgeObjectRelease();
          if ((sub_23AA9F56C(v541, v536) & 1) != 0)
          {
            (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
            v504 = *(void (**)(uint64_t, uint64_t))(v1[222] + 8);
            v542 = v1[227];
            v504(v1[204], v542);
LABEL_280:
            v509 = v503;
            v510 = v542;
            goto LABEL_281;
          }
          v556 = *(void (**)(uint64_t, uint64_t))(v1[222] + 8);
          v557 = v1[227];
          v556(v1[204], v557);
LABEL_289:
          v556(v503, v557);
LABEL_242:
          v351 = v1[270];
          v348 = v1[256];
          v350 = v1[214];
          break;
        case 8u:
        case 0x21u:
          (*(void (**)(_QWORD, _QWORD))(v1[252] + 8))(v1[204], v1[254]);
          goto LABEL_242;
        case 0xCu:
          __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542DE880);
          v511 = v1[205];
          v512 = swift_getTupleTypeMetadata2();
          v513 = v1[204];

          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v511 - 8) + 8))(v513, v511);
          goto LABEL_242;
        case 0x14u:
        case 0x15u:
          swift_release();
          goto LABEL_242;
        case 0x26u:
          (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
          v289 = 1;
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[264] + 56))(v1[263], 1, 1, v1[265]);
          (*(void (**)(_QWORD, _QWORD))(v1[252] + 8))(v1[204], v1[254]);
          (*(void (**)(_QWORD, _QWORD))(v1[256] + 8))(v1[214], v1[270]);
          return v289 & 1;
        default:
          (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
          (*(void (**)(_QWORD, _QWORD))(v1[252] + 8))(v1[204], v1[254]);
          goto LABEL_282;
      }
    }
    v514 = *(void (**)(uint64_t, uint64_t))(v348 + 8);
    v514(v350, v351);
    v515 = *(_QWORD *)(v1[251] + 32);
    v516 = v1[200];
    v316 = v1[233];
    v517 = v1[271];
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v515 + 240))(v316, 1);
    v1[271] = v517;
    if (!v517)
    {
      v1[266] = v515;
      v518 = v1[215];
      v519 = v1[216];
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v518 + 48))(v516, 1, v519) != 1)
      {
        v1[255] = v352;
        v1[253] = v514;
        v1[256] = v349;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v518 + 32))(v1[174], v516, v519);
        sub_23AB00114();
      }
      (*(void (**)(_QWORD, _QWORD))(v1[1] + 8))(v1[233], v1[274]);
      (*(void (**)(uint64_t, _QWORD))(v1[212] + 8))(v516, v1[219]);
      goto LABEL_48;
    }
    goto LABEL_125;
  }
  v222 = v1[259];
  v223 = (*(uint64_t (**)(uint64_t, uint64_t))(v222 + 64))(v165, v222);
  v224 = (void (*)(_BYTE *, _BYTE *, uint64_t))v166[2];
  v1[266] = v224;
  v224(v211, v214, v165);
  if ((v223 & 1) != 0)
  {
    v225 = (void (*)(_BYTE *, uint64_t))v166[1];
    v225(v211, v165);
LABEL_13:
    v235 = (_BYTE *)v1[233];
    v236 = v165;
LABEL_14:
    v225(v235, v236);
    goto LABEL_48;
  }
  v234 = (*(uint64_t (**)(uint64_t, uint64_t))(v222 + 72))(v165, v222);
  v1[1] = v166;
  v225 = (void (*)(_BYTE *, uint64_t))v166[1];
  v225(v211, v165);
  if ((v234 & 1) != 0)
  {
    v165 = v1[274];
    goto LABEL_13;
  }
  v252 = v1[260];
  v253 = v1[273];
  v254 = sub_23B0C6AC4(v252);
  v255 = v1[249];
  v256 = *(void (**)(uint64_t, uint64_t, uint64_t))(v255 + 16);
  v257 = v1[246];
  v256(v257, v253, v252);
  if (v254)
  {
    v258 = sub_23AA9F3D0(2, *(_QWORD *)(v257 + *(int *)(v1[243] + 40)));
    v259 = *(void (**)(uint64_t, uint64_t))(v255 + 8);
    v259(v257, v252);
    if (!v258)
    {
LABEL_52:
      v235 = (_BYTE *)v1[233];
      v236 = v1[274];
      goto LABEL_14;
    }
  }
  else
  {
    v259 = *(void (**)(uint64_t, uint64_t))(v255 + 8);
    v259(v257, v252);
  }
  v269 = v1[273];
  v270 = sub_23B0C6AC4(v252);
  v271 = v1[244];
  v256(v271, v269, v252);
  if (v270)
  {
    v259(v271, v252);
  }
  else
  {
    v290 = *(unsigned __int8 *)(v271 + *(int *)(v252 + 52) + *(int *)(v1[241] + 44));
    v259(v271, v252);
    if (v290 != 3 && sub_23AA9F51C(v290, 2))
      goto LABEL_52;
  }
  v291 = v1[256];
  v292 = *(void (**)(uint64_t, uint64_t, uint64_t))(v291 + 16);
  v293 = v1[245];
  v294 = v1[270];
  v292(v293, v1[250], v294);
  v295 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1[252] + 48);
  v296 = v1[254];
  v1[248] = v295;
  v297 = v295(v293, 1, v296);
  v1[253] = v292;
  if (v297 == 1)
    goto LABEL_104;
  v292(v1[242], v293, v294);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v355 = v1[274];
      v356 = v1[272];
      v357 = swift_getTupleTypeMetadata2();
      v358 = (_BYTE *)v1[242];
      (*(void (**)(_BYTE *, uint64_t))(v1[261] + 8))(&v358[*(int *)(v357 + 48)], v356);
      v225(v358, v355);
      goto LABEL_103;
    case 2u:
    case 7u:
      (*(void (**)(_QWORD, _QWORD))(v1[252] + 8))(v1[242], v1[254]);
      goto LABEL_103;
    case 6u:
      v359 = v1[227];
      v360 = swift_getTupleTypeMetadata3();
      v361 = v1[242];
      v362 = v361 + *(int *)(v360 + 48);
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v1[223] + 48))(v361, 1, v1[221]) == 1)
      {
        v225((_BYTE *)v1[233], v1[274]);
        v363 = *(void (**)(uint64_t, uint64_t))(v1[222] + 8);
        v363(v362, v359);
        v364 = v361;
LABEL_132:
        v363(v364, v359);
        goto LABEL_134;
      }
      v1[247] = *(_QWORD *)(v361 + *(int *)(v360 + 64));
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E2120);
      v407 = swift_allocObject();
      v408 = sub_23B1A1F64(v407, 2);
      *v409 = xmmword_23B1CE640;
      v410 = nullsub_1(v408);
      v411 = sub_23AFD7BC8(v410);
      swift_bridgeObjectRelease();
      if ((sub_23AA9F56C(v411, v1[247]) & 1) != 0)
      {
        v225((_BYTE *)v1[233], v1[274]);
        v363 = *(void (**)(uint64_t, uint64_t))(v1[222] + 8);
        v359 = v1[227];
        v363(v361, v359);
        v364 = v362;
        goto LABEL_132;
      }
      v1[247] = v362;
      v461 = v1[260];
      v462 = v1[273];
      v463 = sub_23B0C6AC4(v461);
      v464 = v1[187];
      v256(v464, v462, v461);
      if (!v463)
      {
        v259(v464, v461);
        goto LABEL_201;
      }
      v465 = *(unsigned __int8 *)(v464 + *(int *)(v461 + 56));
      v259(v464, v461);
      if (v465 == 4 || !sub_23AC37B08(v465, 1))
      {
LABEL_201:
        v225((_BYTE *)v1[233], v1[274]);
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[264] + 56))(v1[263], 1, 1, v1[265]);
        v475 = *(void (**)(_QWORD, uint64_t))(v1[222] + 8);
        v476 = v1[227];
        v475(v1[242], v476);
        v475(v1[247], v476);
LABEL_135:
        v412 = *(void (**)(uint64_t, _QWORD))(v1[256] + 8);
        v413 = v1[245];
        goto LABEL_199;
      }
      v466 = *(void (**)(_QWORD, uint64_t))(v1[222] + 8);
      v467 = v1[227];
      v466(v1[242], v467);
      v466(v1[247], v467);
LABEL_103:
      v294 = v1[270];
      v291 = v1[256];
      v293 = v1[245];
LABEL_104:
      v1[255] = v225;
      v370 = *(void (**)(uint64_t, uint64_t))(v291 + 8);
      v370(v293, v294);
      v371 = v1[240];
      v372 = v1[233];
      v373 = v1[271];
      (*(void (**)(uint64_t))(**(_QWORD **)(v1[251] + 32) + 280))(v372);
      v1[271] = v373;
      if (!v373)
      {
        v374 = v1[274];
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v1[231])(v371, 1, v374) != 1)
        {
          v1[247] = v370;
          v1[256] = v259;
          ((void (*)(_QWORD, uint64_t, uint64_t))*v1)(v1[226], v371, v374);
          sub_23AB00114();
        }
        ((void (*)(_QWORD, uint64_t))v1[255])(v1[233], v374);
        (*(void (**)(uint64_t, _QWORD))(v1[262] + 8))(v371, v1[275]);
        goto LABEL_3;
      }
      return ((uint64_t (*)(uint64_t, _QWORD))v1[255])(v372, v1[274]);
    case 0xAu:
      v365 = v1[265];
      v366 = v1[211];
      *(_QWORD *)(v2 - 232) = v365;
      *(_QWORD *)(v2 - 224) = v366;
      *(_QWORD *)(v2 - 216) = &type metadata for ContentStatus;
      *(_QWORD *)(v2 - 208) = &type metadata for ContentStatus;
      TupleTypeMetadata = swift_getTupleTypeMetadata();
      v368 = v1[242];
      v369 = v368 + *(int *)(TupleTypeMetadata + 48);
      if (*(_BYTE *)(v368 + *(int *)(TupleTypeMetadata + 80)) == 2)
      {
        (*(void (**)(uint64_t, uint64_t))(v1[210] + 8))(v368 + *(int *)(TupleTypeMetadata + 48), v366);
        (*(void (**)(uint64_t, uint64_t))(v1[264] + 8))(v368, v365);
        goto LABEL_103;
      }
      v225((_BYTE *)v1[233], v1[274]);
      (*(void (**)(uint64_t, uint64_t))(v1[210] + 8))(v369, v366);
      (*(void (**)(uint64_t, uint64_t))(v1[264] + 8))(v368, v365);
      goto LABEL_134;
    case 0x16u:
      if (*(_BYTE *)v1[242] != 1)
      {
        v225((_BYTE *)v1[233], v1[274]);
LABEL_134:
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[264] + 56))(v1[263], 1, 1, v1[265]);
        goto LABEL_135;
      }
      v353 = (*(uint64_t (**)(void))(*(_QWORD *)v1[251] + 152))();
      v354 = sub_23AA9F3D0(0x4000, v353);
      v294 = v1[270];
      v291 = v1[256];
      v293 = v1[245];
      if (!v354
        || !sub_23B0C6AC4(v1[260])
        || !sub_23AA9F3C4(128, *(_QWORD *)(v1[273] + *(int *)(v1[260] + 52) + *(int *)(v1[241] + 36)))
        || !sub_23AA9F3D0(2, *(_QWORD *)(v1[273] + *(int *)(v1[243] + 40))))
      {
        v225((_BYTE *)v1[233], v1[274]);
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v1[264] + 56))(v1[263], 1, 1, v1[265]);
        (*(void (**)(uint64_t, uint64_t))(v291 + 8))(v293, v294);
        return 0;
      }
      goto LABEL_104;
    case 0x1Au:
      (*(void (**)(_QWORD, _QWORD))(v1[264] + 8))(v1[242], v1[265]);
      goto LABEL_103;
    default:
      v225((_BYTE *)v1[233], v1[274]);
      (*(void (**)(_QWORD, _QWORD))(v1[252] + 8))(v1[242], v1[254]);
      goto LABEL_134;
  }
}

void sub_23AB21694()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  v0 = sub_23B1C6C98();
  MEMORY[0x24BDAC7A8](v0);
  type metadata accessor for ItemReconciliation();
}

uint64_t sub_23AB21738(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v4 + *(int *)(a1 + 52), v5);
  v7 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v3, 1, v2);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v1, v3, v2);
  __break(1u);
  return result;
}

void sub_23AB217A8()
{
  type metadata accessor for ItemReconciliation();
}

uint64_t sub_23AB217F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[96];

  *(_QWORD *)(v5 - 160) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v5 - 144) = &v35[-v7];
  *(_QWORD *)(v5 - 136) = v2;
  *(_QWORD *)(v5 - 128) = v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = sub_23B1C6C98();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = &v35[-v12];
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v11);
  v16 = &v35[-v15];
  *(_QWORD *)(v5 - 120) = a1;
  v17 = *(int *)(a1 + 52);
  *(_QWORD *)(v5 - 152) = v4;
  v18 = v4 + v17;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v13, v4 + v17, v9);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
    return 0;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v16, v13, AssociatedTypeWitness);
  v20 = sub_23AE4F6B4();
  v22 = v3;
  v24 = *(_QWORD *)(v5 - 136);
  v23 = *(_QWORD *)(v5 - 128);
  if (v20)
  {
    v25 = v18
        + *(int *)(type metadata accessor for ItemReconciliationHalf(0, *(_QWORD *)(v5 - 128), *(_QWORD *)(v5 - 136), v21)+ 64);
    if (!*(_BYTE *)(v25 + 16) && (*(_BYTE *)(v25 + 1) & 1) != 0)
    {
      (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
      return 0;
    }
  }
  *(_QWORD *)(v5 - 192) = v14;
  *(_QWORD *)(v5 - 184) = v16;
  v26 = (*(uint64_t (**)(void))(*(_QWORD *)v22 + 176))();
  v27 = *(_QWORD *)(v5 - 144);
  v19 = *(_QWORD *)(v5 - 120);
  v28 = *(_QWORD *)(v5 - 72);
  sub_23B0C9750(v26, (_QWORD *)v19, v27);
  if (v28)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 192) + 8))(*(_QWORD *)(v5 - 184), AssociatedTypeWitness);
    swift_release();
  }
  else
  {
    swift_release();
    v29 = v27 + *(int *)(v19 + 52);
    v31 = type metadata accessor for ItemReconciliationHalf(0, v23, v24, v30);
    if (*(_QWORD *)(v29 + *(int *)(v31 + 36)))
    {
      if (qword_2542E7190 != -1)
        swift_once();
      v19 = qword_2542EDE38;
    }
    else
    {
      v19 = *(_QWORD *)(v29 + *(int *)(v31 + 40)) & 3;
      if (!v19)
      {
        v33 = *(_QWORD *)(v5 - 168);
        *(_QWORD *)(v5 - 112) = v23;
        *(_QWORD *)(v5 - 104) = v33;
        v34 = *(_QWORD *)(v5 - 176);
        *(_QWORD *)(v5 - 96) = v24;
        *(_QWORD *)(v5 - 88) = v34;
        type metadata accessor for Ingestion.FetchItemMetadata();
      }
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 160) + 8))(v27, *(_QWORD *)(v5 - 120));
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v5 - 192) + 8))(*(_QWORD *)(v5 - 184), AssociatedTypeWitness);
  }
  return v19;
}

unint64_t sub_23AB21B34()
{
  return 0xD000000000000033;
}

void sub_23AB21B50(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v17 = a3;
  v23 = a2;
  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 104);
  v5 = *(_QWORD *)(*a1 + 88);
  swift_getAssociatedTypeWitness();
  v12 = sub_23B1C6C98();
  v16 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v11 - v6;
  v18 = type metadata accessor for ItemReconciliationHalf(0, v5, v4, v7);
  v14 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v13 = (char *)&v11 - v8;
  v9 = *(_QWORD *)(v3 + 80);
  v10 = *(_QWORD *)(v3 + 96);
  v19 = v9;
  v20 = v5;
  v21 = v10;
  v22 = v4;
  type metadata accessor for ItemReconciliation();
}

uint64_t sub_23AB21C54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  _BYTE v24[96];

  v6 = sub_23B1C6C98();
  *(_QWORD *)(v4 - 192) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 - 184) = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v4 - 160) = &v24[-v8];
  *(_QWORD *)(v4 - 136) = *(_QWORD *)(a1 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  *(_QWORD *)(v4 - 176) = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  *(_QWORD *)(v4 - 168) = &v24[-v11];
  *(_QWORD *)(v4 - 152) = v1;
  *(_QWORD *)(v4 - 144) = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = sub_23B1C6C98();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v24[-v16];
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = &v24[-v19];
  v21 = *(_QWORD *)(v4 - 128);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 280))(*(_QWORD *)(v4 - 72));
  if (!v21)
  {
    *(_QWORD *)(v4 - 128) = v20;
    *(_QWORD *)(v4 - 256) = v2;
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v17, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v17, v13);
      return 1;
    }
    else
    {
      v23 = *(_QWORD *)(v4 - 128);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v18 + 32))(v23, v17, AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      if ((sub_23B1C63A4() & 1) == 0)
        sub_23AB00114();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v23, AssociatedTypeWitness);
      return 1;
    }
  }
  return result;
}

void sub_23AB21E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (v0)
  {
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v5);
    JUMPOUT(0x23AB21D90);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v1) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v5);
    JUMPOUT(0x23AB21DC8);
  }
  *(_QWORD *)(v7 - 72) = 0;
  v8 = *(_QWORD *)(v7 - 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v8, v3, v1);
  v9 = sub_23B0C6AC4(v1);
  v10 = *(_QWORD *)(v7 - 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, v8, v1);
  if (v9)
  {
    v11 = *(_QWORD *)(v7 - 200);
    v12 = v10;
    v13 = *(unsigned __int8 *)(v10 + *(int *)(v1 + 52) + *(int *)(v11 + 52));
    v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v14(v12, v1);
    (*(void (**)(_QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(v7 - 128), v5);
    if (v13 == 1)
    {
      v14(v8, v1);
      goto LABEL_12;
    }
  }
  else
  {
    v14 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v14(v10, v1);
    (*(void (**)(_QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(v7 - 128), v5);
    v11 = *(_QWORD *)(v7 - 200);
  }
  v16 = *(_QWORD *)(v7 - 240);
  v15 = *(_QWORD *)(v7 - 232);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v16, v8 + *(int *)(v1 + 52), v11);
  v14(v8, v1);
  v18 = *(_QWORD *)(v7 - 224);
  v17 = *(_QWORD *)(v7 - 216);
  v19 = *(_QWORD *)(v7 - 248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v18, v16, v19);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v11);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v17 + 40))(*(_QWORD *)(v7 - 208), v18, v19);
LABEL_12:
  JUMPOUT(0x23AB21E48);
}

void sub_23AB22014()
{
  type metadata accessor for ItemReconciliation();
}

void sub_23AB22064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v14 = sub_23B1C6C98();
  *(_QWORD *)(v12 - 256) = v14;
  *(_QWORD *)(v12 - 264) = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  *(_QWORD *)(v12 - 216) = (char *)&a9 - v16;
  *(_QWORD *)(v12 - 248) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v12 - 240) = a1;
  MEMORY[0x24BDAC7A8](v15);
  *(_QWORD *)(v12 - 272) = (char *)&a9 - v17;
  swift_getAssociatedTypeWitness();
  sub_23B1C6C98();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v12 - 176) = TupleTypeMetadata2;
  *(_QWORD *)(v12 - 224) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v19 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  *(_QWORD *)(v12 - 168) = (char *)&a9 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  *(_QWORD *)(v12 - 184) = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  *(_QWORD *)(v12 - 208) = (char *)&a9 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  *(_QWORD *)(v12 - 200) = (char *)&a9 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v29 = MEMORY[0x24BDAC7A8](v28);
  *(_QWORD *)(v12 - 232) = (char *)&a9 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x24BDAC7A8](v29);
  *(_QWORD *)(v12 - 152) = (char *)&a9 - v32;
  MEMORY[0x24BDAC7A8](v31);
  *(_QWORD *)(v12 - 120) = *(_QWORD *)(v12 - 136);
  *(_QWORD *)(v12 - 112) = v10;
  *(_QWORD *)(v12 - 136) = v10;
  *(_QWORD *)(v12 - 104) = v11;
  *(_QWORD *)(v12 - 96) = v9;
  *(_QWORD *)(v12 - 160) = v9;
  type metadata accessor for ItemReconciliation();
}

uint64_t sub_23AB2229C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(_QWORD, uint64_t);
  void (*v12)(uint64_t, uint64_t, uint64_t);
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);

  v9 = *(void (**)(void))(v1 + 16);
  ((void (*)(uint64_t, _QWORD, uint64_t))v9)(v7, *(_QWORD *)(v8 - 128) + *(int *)(a1 + 52), v6);
  v10 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v2[6];
  if (v10(v7, 1, v3) != 1)
  {
    *(_QWORD *)(v8 - 280) = v1;
    v12 = (void (*)(uint64_t, uint64_t, uint64_t))v2[4];
    v12(v4, v7, v3);
    v13 = *(void (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v8 - 144) + 40) + 280);
    *(_QWORD *)(v8 - 128) = v4;
    v14 = *(_QWORD *)(v8 - 72);
    v13(v4);
    if (v14)
    {
      v11 = (void (*)(_QWORD, uint64_t))v2[1];
      v11(*(_QWORD *)(v8 - 128), v3);
      return (uint64_t)v11;
    }
    *(_QWORD *)(v8 - 72) = v2;
    v15 = v3;
    if (v10(v5, 1, v3) == 1)
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v8 - 72) + 8))(*(_QWORD *)(v8 - 128), v3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 280) + 8))(v5, v6);
      return 1;
    }
    v16 = *(_QWORD *)(v8 - 152);
    v12(v16, v5, v3);
    v17 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 32) + 8);
    v18 = *(_QWORD *)(v8 - 128);
    if ((sub_23B1C63A4() & 1) != 0)
    {
      v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 72) + 8);
      v19(v16, v15);
      v19(v18, v15);
      return 1;
    }
    *(_QWORD *)(v8 - 296) = v17;
    *(_QWORD *)(v8 - 288) = v12;
    v20 = *(_QWORD *)(v8 - 72);
    v21 = *(_QWORD *)(v8 - 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v21, v16, v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v21, 0, 1, v15);
    v22 = v6;
    v23 = v21;
    v24 = *(_QWORD *)(v8 - 208);
    v9();
    v25 = *(_QWORD *)(v8 - 168);
    v26 = v25 + *(int *)(*(_QWORD *)(v8 - 176) + 48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v9)(v25, v23, v22);
    ((void (*)(uint64_t, uint64_t, uint64_t))v9)(v26, v24, v22);
    if (v10(v25, 1, v15) == 1)
    {
      v27 = v24;
      v28 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 280) + 8);
      v28(v27, v22);
      v28(v23, v22);
      v29 = v15;
      if (v10(v26, 1, v15) == 1)
      {
        v28(*(_QWORD *)(v8 - 168), v22);
        v30 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 72) + 8);
        v30(*(_QWORD *)(v8 - 152), v15);
LABEL_17:
        v30(*(_QWORD *)(v8 - 128), v29);
        return 1;
      }
    }
    else
    {
      ((void (*)(_QWORD, uint64_t, uint64_t))v9)(*(_QWORD *)(v8 - 184), v25, v22);
      if (v10(v26, 1, v15) != 1)
      {
        v32 = *(_QWORD *)(v8 - 232);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 288))(v32, v26, v15);
        *(_DWORD *)(v8 - 176) = sub_23B1C63A4();
        v33 = v24;
        v30 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 72) + 8);
        v30(v32, v15);
        v34 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 280) + 8);
        v34(v33, v22);
        v34(v23, v22);
        v29 = v15;
        v30(*(_QWORD *)(v8 - 184), v15);
        v34(v25, v22);
        if ((*(_DWORD *)(v8 - 176) & 1) != 0)
        {
          v30(*(_QWORD *)(v8 - 152), v15);
          goto LABEL_17;
        }
LABEL_20:
        sub_23AB003A0();
      }
      v31 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 280) + 8);
      v31(v24, v22);
      v31(v23, v22);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v8 - 72) + 8))(*(_QWORD *)(v8 - 184), v15);
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v8 - 224) + 8))(*(_QWORD *)(v8 - 168), *(_QWORD *)(v8 - 176));
    goto LABEL_20;
  }
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v7, v6);
  return 1;
}

void sub_23AB22690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  if (v0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 72) + 8))(v3, v1);
    JUMPOUT(0x23AB22340);
  }
  v6 = *(_QWORD *)(v4 - 248);
  v5 = *(_QWORD *)(v4 - 240);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v5) == 1)
  {
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 72) + 8);
    v7(v3, v1);
    v7(*(_QWORD *)(v4 - 128), v1);
    JUMPOUT(0x23AB22398);
  }
  v8 = *(_QWORD *)(v4 - 272);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v8, v2, v5);
  type metadata accessor for ItemReconciliationHalf(0, *(_QWORD *)(v4 - 136), *(_QWORD *)(v4 - 160), v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 72) + 8);
  v10(v3, v1);
  v10(*(_QWORD *)(v4 - 128), v1);
  JUMPOUT(0x23AB22650);
}

unint64_t sub_23AB2277C(unint64_t result, uint64_t a2, void *a3)
{
  if ((result & 0x8000000000000000) == 0)
    return (unint64_t)a3;
  return result;
}

void sub_23AB22788(uint64_t a1, uint64_t a2, void *a3)
{
  if ((a1 & 0x8000000000000000) == 0)

}

uint64_t sub_23AB22794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(void);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a3 - 8);
  v5 = (void (*)(void))MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5();
  v8 = sub_23B1C7304();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a3);
  return v8;
}

uint64_t sub_23AB22830(uint64_t result)
{
  if ((~result & 0xF000000000000007) != 0)
    return swift_release();
  return result;
}

void (*sub_23AB22848(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  uint64_t v8;
  size_t v9;
  void *v10;
  char v11;
  void (*result)(_QWORD *);

  v8 = *(_QWORD *)(a4 - 8);
  a1[1] = a4;
  a1[2] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v10 = malloc(v9);
  a1[3] = v10;
  v11 = sub_23B1C6770();
  sub_23B1C6734();
  if ((v11 & 1) != 0)
  {
    (*(void (**)(void *, unint64_t, uint64_t))(v8 + 16))(v10, a3+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * a2, a4);
    return sub_23AB22944;
  }
  result = (void (*)(_QWORD *))sub_23B1C6F38();
  if (v9 == 8)
  {
    *a1 = result;
    (*(void (**)(void *, _QWORD *, uint64_t))(v8 + 16))(v10, a1, a4);
    swift_unknownObjectRelease();
    return sub_23AB22944;
  }
  __break(1u);
  return result;
}

void sub_23AB22944(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[3];
  (*(void (**)(void *, _QWORD))(a1[2] + 8))(v1, a1[1]);
  free(v1);
}

unint64_t sub_23AB22974()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2569E8150;
  if (!qword_2569E8150)
  {
    v1 = sub_23B1C5474();
    result = MEMORY[0x23B8613CC](MEMORY[0x24BDCAEE0], v1);
    atomic_store(result, (unint64_t *)&qword_2569E8150);
  }
  return result;
}

BOOL sub_23AB229BC()
{
  return !sub_23AE4F6B4();
}

uint64_t sub_23AB229EC()
{
  uint64_t *v0;

  return sub_23AB22794(v0[4], v0[5], v0[2]);
}

uint64_t sub_23AB229F8()
{
  return swift_deallocObject();
}

_BYTE **sub_23AB22A08(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_23AFF5C88(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_23AB22A10()
{
  return swift_deallocObject();
}

uint64_t sub_23AB22A20()
{
  uint64_t v0;

  return sub_23ADACBA4(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23AB22A28(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_23AFF5C98(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_23AB22A34()
{
  return swift_deallocObject();
}

uint64_t sub_23AB22A44()
{
  return swift_deallocObject();
}

uint64_t sub_23AB22A58()
{
  return swift_deallocObject();
}

uint64_t sub_23AB22A68()
{
  return swift_deallocObject();
}

uint64_t sub_23AB22A7C()
{
  return swift_deallocObject();
}

uint64_t sub_23AB22A8C()
{
  return swift_deallocObject();
}

uint64_t sub_23AB22AA0()
{
  return swift_deallocObject();
}

uint64_t sub_23AB22AB0()
{
  return swift_deallocObject();
}

uint64_t sub_23AB22AC0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AB22AE4(uint64_t a1, unint64_t a2)
{
  if ((unint64_t)a1 < 0xFFFFFFFF00000000 || (a2 & 0xF000000000000007) != 0)
    return sub_23AAA12F0(a1, a2);
  return a1;
}

uint64_t sub_23AB22B04()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AB22B28()
{
  return swift_deallocObject();
}

uint64_t sub_23AB22B38()
{
  return swift_deallocObject();
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)), AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23AB22BC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v1+ ((*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)), AssociatedTypeWitness);
}

void sub_23AB22C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v5 = type metadata accessor for SnapshotItem(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 32), a4);
  v6 = v4
     + ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8);
  v8(v6, AssociatedTypeWitness);
  v8(v6 + *(int *)(v5 + 36), AssociatedTypeWitness);
  v9 = v6 + *(int *)(v5 + 40);
  v10 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FileItemVersion();
}

uint64_t sub_23AB22D74(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3 + *(int *)(a1 + 56), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v2 + v1[12];
  v7 = (int *)type metadata accessor for ItemMetadata();
  v8 = v6 + v7[7];
  v9 = sub_23B1C5BDC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  v11(v6 + v7[8], v9);
  swift_bridgeObjectRelease();
  v12 = v6 + v7[29];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v9))
    v11(v12, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = (uint64_t *)(v6 + v7[33]);
  v14 = v13[1];
  if (v14 >> 60 != 15)
    sub_23AAAE53C(*v13, v14);
  swift_bridgeObjectRelease();
  v15 = v2 + v1[13];
  v16 = *(void **)(v15 + 16);
  if (v16 != (void *)1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v15 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_23AAA12F0(*(_QWORD *)(v2 + v1[17]), *(_QWORD *)(v2 + v1[17] + 8));
  return swift_deallocObject();
}

uint64_t sub_23AB22F74@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for SnapshotItem(0, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 32), a1);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2+ ((*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80)), v4);
}

uint64_t sub_23AB22FC0()
{
  return swift_deallocObject();
}

uint64_t sub_23AB22FD0()
{
  return swift_deallocObject();
}

uint64_t sub_23AB22FE0()
{
  return swift_deallocObject();
}

uint64_t sub_23AB22FF0()
{
  return swift_deallocObject();
}

uint64_t sub_23AB23010()
{
  return swift_deallocObject();
}

uint64_t sub_23AB23020()
{
  return swift_deallocObject();
}

uint64_t sub_23AB23030()
{
  return swift_deallocObject();
}

uint64_t sub_23AB23040()
{
  return swift_deallocObject();
}

void objectdestroy_179Tm()
{
  type metadata accessor for ItemReconciliation();
}

void sub_23AB23094(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;

  v4 = v1
     + ((*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, AssociatedTypeWitness))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, AssociatedTypeWitness);
  type metadata accessor for ItemReconciliationHalf(0, v2, v3, v7);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FileItemVersion();
}

void sub_23AB231BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t v27;
  uint64_t v28;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v19, 1, a1))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v19, v15);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19 + *(int *)(a1 + 56), v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_23AAAEE10(*(void **)(v16 + v18[16]), *(id *)(v16 + v18[16] + 8), *(_BYTE *)(v16 + v18[16] + 16));
  v22 = v16 + v18[17];
  v23 = *(_QWORD *)(v22 + 16);
  if (v23 >> 60 != 11 && v23 >> 60 != 15)
    sub_23AAAE53C(*(_QWORD *)(v22 + 8), v23);

  v25 = v16 + *(int *)(a15 + 52);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, AssociatedTypeWitness))
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, AssociatedTypeWitness);
  type metadata accessor for ItemReconciliationHalf(0, a10, v17, v28);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FileItemVersion();
}

uint64_t sub_23AB2338C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48))(v4, 1, a1))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v4, v1);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + *(int *)(a1 + 56), v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_23AAAEE10(*(void **)(v2 + v3[16]), *(id *)(v2 + v3[16] + 8), *(_BYTE *)(v2 + v3[16] + 16));
  v7 = v2 + v3[17];
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 >> 60 != 11 && v8 >> 60 != 15)
    sub_23AAAE53C(*(_QWORD *)(v7 + 8), v8);

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23AB23498()
{
  type metadata accessor for ItemReconciliation();
}

void sub_23AB234D0()
{
  sub_23AB21694();
}

uint64_t objectdestroy_186Tm()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)), AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23AB23590@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v1+ ((*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80)), AssociatedTypeWitness);
}

uint64_t sub_23AB235EC()
{
  return swift_deallocObject();
}

uint64_t sub_23AB235FC()
{
  return swift_deallocObject();
}

uint64_t sub_23AB2360C()
{
  return swift_deallocObject();
}

uint64_t sub_23AB2361C()
{
  return swift_deallocObject();
}

void sub_23AB2362C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23AB124D8(a1, a2);
}

void sub_23AB2364C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v23 = a2;
  v19 = a3;
  v3 = *a3;
  v4 = *(_QWORD *)(*a3 + 104);
  v5 = *(_QWORD *)(*a3 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = sub_23B1C6C98();
  v17[4] = *(_QWORD *)(v18 - 8);
  v7 = MEMORY[0x24BDAC7A8](v18);
  v17[5] = (char *)v17 - v8;
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17[2] = AssociatedTypeWitness;
  v17[3] = v9;
  MEMORY[0x24BDAC7A8](v7);
  v17[1] = (char *)v17 - v10;
  v11 = *(_QWORD *)(v3 + 80);
  v12 = *(_QWORD *)(v3 + 96);
  v14 = type metadata accessor for ItemReconciliationHalf(0, v11, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v21 = v14;
  v22 = v15;
  MEMORY[0x24BDAC7A8](v14);
  v20 = (char *)v17 - v16;
  v24 = v11;
  v25 = v5;
  v26 = v12;
  v27 = v4;
  type metadata accessor for ItemReconciliation();
}

uint64_t sub_23AB23780(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[96];

  v4 = sub_23B1C6C98();
  *(_QWORD *)(v2 - 136) = v4;
  *(_QWORD *)(v2 - 120) = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v34[-v5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = sub_23B1C6C98();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = &v34[-v11];
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v10);
  v15 = &v34[-v14];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v12, v1, v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
  v17 = *(_QWORD *)(v2 - 144);
  *(_QWORD *)(v2 - 224) = v1;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v13 + 32))(v15, v12, AssociatedTypeWitness);
  v18 = *(_QWORD *)(v2 - 136);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 120) + 16))(v6, *(_QWORD *)(v2 - 128), v18);
  v19 = *(_QWORD *)(a1 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v6, 1, a1) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v2 - 120) + 8))(v6, v18);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  }
  *(_QWORD *)(v2 - 136) = v13;
  *(_QWORD *)(v2 - 128) = AssociatedTypeWitness;
  *(_QWORD *)(v2 - 120) = v15;
  v20 = *(_QWORD *)(v2 - 160);
  v21 = *(_QWORD *)(v2 - 152);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v17 + 16))(v20, v6, v21);
  (*(void (**)(_BYTE *, uint64_t))(v19 + 8))(v6, a1);
  v22 = v20 + *(int *)(v21 + 64);
  v23 = *(id *)v22;
  v24 = *(void **)(v22 + 8);
  v25 = *(unsigned __int8 *)(v22 + 16);
  sub_23AAAE478(*(id *)v22, v24, *(_BYTE *)(v22 + 16));
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v20, v21);
  if (v25)
  {
    sub_23AAAEE10(v23, v24, v25);
  }
  else
  {
    sub_23AAAEE10(v23, v24, 0);
    if (((unsigned __int16)v23 & 0x100) != 0)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(v2 - 168) + 24);
      v27 = *(_QWORD *)(v2 - 72);
      (*(void (**)(_QWORD))(*(_QWORD *)v26 + 360))(*(_QWORD *)(v2 - 120));
      if (!v27)
      {
        v29 = *(_QWORD *)(v2 - 192);
        v28 = *(_QWORD *)(v2 - 184);
        v30 = *(_QWORD *)(v2 - 176);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 16))(v28, *(_QWORD *)(v2 - 224) + *(int *)(a1 + 52), v30);
        v31 = *(_QWORD *)(v2 - 208);
        v32 = *(_QWORD *)(v2 - 200);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v28, 1, v31) == 1)
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 - 136) + 8))(*(_QWORD *)(v2 - 120), *(_QWORD *)(v2 - 128));
          return (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
        }
        v33 = *(_QWORD *)(v2 - 216);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v33, v28, v31);
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 368))(v33);
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v31);
      }
    }
  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 - 136) + 8))(*(_QWORD *)(v2 - 120), *(_QWORD *)(v2 - 128));
}

unint64_t sub_23AB23A94()
{
  unint64_t result;

  result = qword_2569E22B0[0];
  if (!qword_2569E22B0[0])
  {
    result = MEMORY[0x23B8613CC](&unk_23B1E1760, &type metadata for DatabaseError);
    atomic_store(result, qword_2569E22B0);
  }
  return result;
}

void sub_23AB23AD8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23AB07908(a1, a2);
}

void sub_23AB23AFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23AB0972C(a1, a2);
}

void sub_23AB23B1C(uint64_t a1)
{
  uint64_t v1;

  sub_23AB09634(a1, *(_QWORD *)(v1 + 48));
}

uint64_t sub_23AB23B34(char a1)
{
  return a1 & 1;
}

void sub_23AB23B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  _QWORD v13[4];
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v16 = a4;
  v17 = a2;
  v18 = a3;
  v19 = a1;
  v14 = sub_23B1C5E4C();
  v13[3] = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v15 = (char *)v13 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a5;
  v21 = a6;
  v22 = a7;
  v23 = a8;
  type metadata accessor for ItemReconciliation();
}

void sub_23AB23BE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  void (*v56)(_BYTE *, _BYTE *, uint64_t);
  void (*v57)(_BYTE *, uint64_t, uint64_t);
  uint64_t v58;
  void (*v59)(_BYTE *, _QWORD, uint64_t, uint64_t);
  _BYTE *v60;
  uint64_t (*v61)(_BYTE *, uint64_t, uint64_t);
  int v62;
  void (*v63)(_BYTE *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v68)(uint64_t, uint64_t, uint64_t);
  void (*v69)(_BYTE *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t (*v78)(_BYTE *, uint64_t, uint64_t);
  int v79;
  uint64_t v80;
  void (*v81)(_BYTE *, uint64_t);
  uint64_t v82;
  _BYTE *v83;
  int v84;
  _BYTE *v85;
  uint64_t v86;
  _BYTE *v87;
  char v88;
  void (*v89)(_BYTE *, uint64_t);
  void (*v90)(uint64_t);
  uint64_t v91;
  _QWORD *v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t, uint64_t);
  void (*v100)(uint64_t, uint64_t);
  int v101;
  uint64_t v102;
  void (*v103)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v104)(uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  void (*v126)(uint64_t, uint64_t);
  void (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, uint64_t);
  void (*v132)(uint64_t, uint64_t);
  void (*v133)(_QWORD, uint64_t);
  _BYTE v134[96];

  *(_QWORD *)(v5 - 152) = a1;
  *(_QWORD *)(v5 - 328) = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v5 - 464) = &v134[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v5 - 336) = &v134[-v9];
  MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v5 - 440) = &v134[-v10];
  *(_QWORD *)(v5 - 264) = v1;
  *(_QWORD *)(v5 - 272) = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v5 - 160) = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  *(_QWORD *)(v5 - 376) = &v134[-v12];
  *(_QWORD *)(v5 - 352) = v13;
  v14 = sub_23B1C6C98();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v5 - 144) = TupleTypeMetadata2;
  *(_QWORD *)(v5 - 392) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v16 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  *(_QWORD *)(v5 - 344) = &v134[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v5 - 224) = &v134[-v19];
  *(_QWORD *)(v5 - 216) = v14;
  *(_QWORD *)(v5 - 232) = *(_QWORD *)(v14 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v5 - 400) = &v134[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v5 - 176) = &v134[-v23];
  v24 = MEMORY[0x24BDAC7A8](v22);
  *(_QWORD *)(v5 - 168) = &v134[-v25];
  v26 = MEMORY[0x24BDAC7A8](v24);
  *(_QWORD *)(v5 - 408) = &v134[-v27];
  v28 = MEMORY[0x24BDAC7A8](v26);
  *(_QWORD *)(v5 - 248) = &v134[-v29];
  MEMORY[0x24BDAC7A8](v28);
  *(_QWORD *)(v5 - 240) = &v134[-v30];
  *(_QWORD *)(v5 - 280) = v3;
  *(_QWORD *)(v5 - 288) = v4;
  v31 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD **)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  *(_QWORD *)(v5 - 384) = &v134[-v33];
  v34 = sub_23B1C6C98();
  v35 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v5 - 416) = *(_QWORD *)(v35 - 8);
  v36 = MEMORY[0x24BDAC7A8](v35);
  *(_QWORD *)(v5 - 360) = &v134[-((v37 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v38 = MEMORY[0x24BDAC7A8](v36);
  v40 = &v134[-v39];
  v41 = *(_QWORD *)(v34 - 8);
  v42 = MEMORY[0x24BDAC7A8](v38);
  *(_QWORD *)(v5 - 424) = &v134[-((v43 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v44 = MEMORY[0x24BDAC7A8](v42);
  *(_QWORD *)(v5 - 208) = &v134[-v45];
  v46 = MEMORY[0x24BDAC7A8](v44);
  *(_QWORD *)(v5 - 200) = &v134[-v47];
  v48 = MEMORY[0x24BDAC7A8](v46);
  v50 = &v134[-v49];
  v51 = MEMORY[0x24BDAC7A8](v48);
  v53 = &v134[-v52];
  MEMORY[0x24BDAC7A8](v51);
  v55 = &v134[-v54];
  v56 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 16);
  v56(&v134[-v54], *(_BYTE **)(v5 - 136), v34);
  v57 = (void (*)(_BYTE *, uint64_t, uint64_t))v32[2];
  v58 = *(_QWORD *)(v5 - 192);
  *(_QWORD *)(v5 - 312) = v57;
  v57(v53, v58, v31);
  v59 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v32[7];
  *(_QWORD *)(v5 - 304) = v59;
  v59(v53, 0, 1, v31);
  *(_QWORD *)(v5 - 256) = v35;
  v60 = &v40[*(int *)(v35 + 48)];
  v56(v40, v55, v34);
  v56(v60, v53, v34);
  *(_QWORD *)(v5 - 296) = v32;
  v61 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t))v32[6];
  v62 = v61(v40, 1, v31);
  *(_QWORD *)(v5 - 368) = v61;
  if (v62 == 1)
  {
    v63 = *(void (**)(_BYTE *, uint64_t))(v41 + 8);
    v63(v53, v34);
    v63(v55, v34);
    if (v61(v60, 1, v31) == 1)
    {
      v63(v40, v34);
      v64 = *(_QWORD *)(v5 - 136);
      v65 = *(_QWORD *)(v5 - 192);
      v66 = *(_QWORD *)(v5 - 352);
      v67 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 - 304);
      v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 312);
      goto LABEL_8;
    }
  }
  else
  {
    v56(v50, v40, v34);
    if (v61(v60, 1, v31) != 1)
    {
      v109 = *(_QWORD *)(v5 - 384);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v5 - 296) + 32))(v109, v60, v31);
      swift_getAssociatedConformanceWitness();
      *(_DWORD *)(v5 - 468) = sub_23B1C63A4();
      v110 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 296) + 8);
      v110(v109, v31);
      v63 = *(void (**)(_BYTE *, uint64_t))(v41 + 8);
      v63(v53, v34);
      v63(v55, v34);
      v110((uint64_t)v50, v31);
      v63(v40, v34);
      v64 = *(_QWORD *)(v5 - 136);
      v65 = *(_QWORD *)(v5 - 192);
      v66 = *(_QWORD *)(v5 - 352);
      v67 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 - 304);
      v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 312);
      if ((*(_DWORD *)(v5 - 468) & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v5 - 192) = v63;
        v74 = *(_BYTE **)(v5 - 200);
        v56(v74, (_BYTE *)v64, v34);
        v75 = *(_BYTE **)(v5 - 208);
        v68((uint64_t)v75, v65, v31);
        v67((uint64_t)v75, 0, 1, v31);
        v76 = *(_BYTE **)(v5 - 360);
        v77 = &v76[*(int *)(*(_QWORD *)(v5 - 256) + 48)];
        v56(v76, v74, v34);
        v56(v77, v75, v34);
        v78 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 - 368);
        if (v78(v76, 1, v31) == 1)
        {
          v79 = v78(v77, 1, v31);
          v80 = *(_QWORD *)(v5 - 240);
          v81 = *(void (**)(_BYTE *, uint64_t))(v5 - 192);
          if (v79 == 1)
          {
            v81(v76, v34);
            v81(*(_BYTE **)(v5 - 208), v34);
            v81(*(_BYTE **)(v5 - 200), v34);
            v82 = *(_QWORD *)(v5 - 232);
            goto LABEL_13;
          }
        }
        else
        {
          v83 = *(_BYTE **)(v5 - 424);
          v56(v83, v76, v34);
          v84 = v78(v77, 1, v31);
          v85 = v76;
          v81 = *(void (**)(_BYTE *, uint64_t))(v5 - 192);
          if (v84 != 1)
          {
            v86 = *(_QWORD *)(v5 - 296);
            v87 = *(_BYTE **)(v5 - 384);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v86 + 32))(v87, v77, v31);
            swift_getAssociatedConformanceWitness();
            v88 = sub_23B1C63A4();
            v89 = *(void (**)(_BYTE *, uint64_t))(v86 + 8);
            v89(v83, v31);
            v89(v87, v31);
            v81(v85, v34);
            v81(*(_BYTE **)(v5 - 208), v34);
            v81(*(_BYTE **)(v5 - 200), v34);
            v80 = *(_QWORD *)(v5 - 240);
            v82 = *(_QWORD *)(v5 - 232);
            if ((v88 & 1) != 0)
            {
LABEL_13:
              v90 = *(void (**)(uint64_t))(v82 + 16);
              *(_QWORD *)(v5 - 200) = v64 + *(int *)(*(_QWORD *)(v5 - 152) + 52);
              v91 = *(_QWORD *)(v5 - 216);
              v90(v80);
              v92 = *(_QWORD **)(v5 - 160);
              v93 = (void (*)(uint64_t, uint64_t, uint64_t))v92[2];
              v94 = *(_QWORD *)(v5 - 248);
              v95 = *(_QWORD *)(v5 - 184);
              *(_QWORD *)(v5 - 256) = v93;
              v93(v94, v95, v66);
              v96 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v92[7];
              *(_QWORD *)(v5 - 208) = v96;
              v96(v94, 0, 1, v66);
              v97 = *(_QWORD *)(v5 - 224);
              v98 = v97 + *(int *)(*(_QWORD *)(v5 - 144) + 48);
              ((void (*)(uint64_t, uint64_t, uint64_t))v90)(v97, v80, v91);
              ((void (*)(uint64_t, uint64_t, uint64_t))v90)(v98, v94, v91);
              v99 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v92[6];
              if (v99(v97, 1, v66) == 1)
              {
                v100 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
                v100(v94, v91);
                v100(v80, v91);
                v101 = v99(v98, 1, v66);
                *(_QWORD *)(v5 - 192) = v100;
                if (v101 == 1)
                {
                  v100(*(_QWORD *)(v5 - 224), v91);
                  v103 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 - 208);
                  v102 = *(_QWORD *)(v5 - 200);
                  v104 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 256);
                  v105 = *(_QWORD *)(v5 - 184);
                  goto LABEL_23;
                }
                v97 = *(_QWORD *)(v5 - 224);
              }
              else
              {
                v106 = *(_QWORD *)(v5 - 408);
                ((void (*)(uint64_t, uint64_t, uint64_t))v90)(v106, v97, v91);
                if (v99(v98, 1, v66) != 1)
                {
                  v128 = *(_QWORD *)(v5 - 160);
                  v129 = *(_QWORD *)(v5 - 376);
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 32))(v129, v98, v66);
                  swift_getAssociatedConformanceWitness();
                  *(_DWORD *)(v5 - 280) = sub_23B1C63A4();
                  v130 = v97;
                  v131 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
                  v105 = *(_QWORD *)(v5 - 184);
                  v131(v129, v66);
                  v132 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 232) + 8);
                  v132(*(_QWORD *)(v5 - 248), v91);
                  v132(*(_QWORD *)(v5 - 240), v91);
                  v131(v106, v66);
                  *(_QWORD *)(v5 - 192) = v132;
                  v132(v130, v91);
                  v103 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 - 208);
                  v102 = *(_QWORD *)(v5 - 200);
                  v104 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 256);
                  if ((*(_DWORD *)(v5 - 280) & 1) != 0)
                  {
LABEL_23:
                    v115 = *(_QWORD *)(v5 - 168);
                    ((void (*)(uint64_t, uint64_t, uint64_t))v90)(v115, v102, v91);
                    v116 = *(_QWORD *)(v5 - 176);
                    v104(v116, v105, v66);
                    v103(v116, 0, 1, v66);
                    v117 = *(_QWORD *)(v5 - 344);
                    v118 = v117 + *(int *)(*(_QWORD *)(v5 - 144) + 48);
                    ((void (*)(uint64_t, uint64_t, uint64_t))v90)(v117, v115, v91);
                    ((void (*)(uint64_t, uint64_t, uint64_t))v90)(v118, v116, v91);
                    if (v99(v117, 1, v66) == 1)
                    {
                      if (v99(v118, 1, v66) == 1)
                      {
                        v119 = *(void (**)(uint64_t, uint64_t))(v5 - 192);
                        v119(v117, v91);
                        v119(*(_QWORD *)(v5 - 176), v91);
                        v119(*(_QWORD *)(v5 - 168), v91);
                        v120 = *(_QWORD *)(v5 - 152);
                        v121 = *(_QWORD *)(v5 - 136);
                        goto LABEL_28;
                      }
                    }
                    else
                    {
                      v122 = *(_QWORD *)(v5 - 400);
                      ((void (*)(uint64_t, uint64_t, uint64_t))v90)(v122, v117, v91);
                      if (v99(v118, 1, v66) != 1)
                      {
                        v123 = *(_QWORD *)(v5 - 160);
                        v124 = *(_QWORD *)(v5 - 376);
                        (*(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 32))(v124, v118, v66);
                        swift_getAssociatedConformanceWitness();
                        v125 = sub_23B1C63A4();
                        v126 = *(void (**)(uint64_t, uint64_t))(v123 + 8);
                        v126(v122, v66);
                        v126(v124, v66);
                        v127 = *(void (**)(uint64_t, uint64_t))(v5 - 192);
                        v127(v117, v91);
                        v127(*(_QWORD *)(v5 - 176), v91);
                        v127(*(_QWORD *)(v5 - 168), v91);
                        v120 = *(_QWORD *)(v5 - 152);
                        v121 = *(_QWORD *)(v5 - 136);
                        if ((v125 & 1) != 0)
LABEL_28:
                          __asm { BR              X10 }
LABEL_36:
                        sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/interfaces/persistence/ReconciliationTable.swift", 121, 2, 339);
                      }
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 160) + 8))(v122, v66);
                    }
                    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 392) + 8))(v117, *(_QWORD *)(v5 - 144));
                    v133 = *(void (**)(_QWORD, uint64_t))(v5 - 192);
                    v133(*(_QWORD *)(v5 - 176), v91);
                    v133(*(_QWORD *)(v5 - 168), v91);
                    goto LABEL_36;
                  }
LABEL_22:
                  v112 = *(_QWORD *)(v5 - 272);
                  v113 = *(_QWORD *)(v5 - 264);
                  v114 = type metadata accessor for ItemReconciliationHalf(0, v112, v113, v111);
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 8))(v102, v114);
                  sub_23B0C6760(v112, v113, v102);
                }
                v107 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 232) + 8);
                v107(*(_QWORD *)(v5 - 248), v91);
                v108 = *(_QWORD *)(v5 - 240);
                *(_QWORD *)(v5 - 192) = v107;
                v107(v108, v91);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 160) + 8))(v106, v66);
              }
              v102 = *(_QWORD *)(v5 - 200);
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 392) + 8))(v97, *(_QWORD *)(v5 - 144));
              goto LABEL_22;
            }
LABEL_33:
            sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/interfaces/persistence/ReconciliationTable.swift", 121, 2, 326);
          }
          (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 296) + 8))(v83, v31);
        }
        (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v5 - 416) + 8))(v76, *(_QWORD *)(v5 - 256));
        v81(*(_BYTE **)(v5 - 208), v34);
        v81(*(_BYTE **)(v5 - 200), v34);
        goto LABEL_33;
      }
LABEL_7:
      v71 = *(_QWORD *)(v5 - 288);
      v72 = *(_QWORD *)(v5 - 280);
      v73 = type metadata accessor for ItemReconciliationHalf(0, v71, v72, v70);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 8))(v64, v73);
      sub_23B0C6760(v71, v72, v64);
    }
    v69 = *(void (**)(_BYTE *, uint64_t))(v41 + 8);
    v69(v53, v34);
    v69(v55, v34);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 296) + 8))(v50, v31);
  }
  v64 = *(_QWORD *)(v5 - 136);
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)(v5 - 416) + 8))(v40, *(_QWORD *)(v5 - 256));
  goto LABEL_7;
}

uint64_t sub_23AB24D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  char *v23;
  _QWORD v24[4];
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;

  v32 = a2;
  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 88);
  v26 = *(_QWORD *)(*(_QWORD *)a2 + 104);
  v31 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = sub_23B1C6C98();
  v28 = *(_QWORD *)(v6 - 8);
  v29 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v27 = (char *)v24 - v8;
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = *(_QWORD *)(v3 + 96);
  v10 = *(_QWORD *)(v3 + 80);
  v24[3] = (char *)v24 - v11;
  v25 = v9;
  v12 = swift_getAssociatedTypeWitness();
  v13 = sub_23B1C6C98();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v24 - v16;
  v18 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v24 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v12) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v24[1] = a1;
  v24[2] = AssociatedTypeWitness;
  v22 = v31;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v17, v12);
  v23 = v37;
  (*(void (**)(char *))(**(_QWORD **)(v32 + 24) + 376))(v20);
  if (!v23)
  {
    v32 = v12;
    v33 = v10;
    v37 = v20;
    v34 = v22;
    v35 = v25;
    v36 = v26;
    type metadata accessor for ItemReconciliation();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v12);
}

uint64_t sub_23AB25094()
{
  return swift_allocateGenericValueMetadata();
}

void sub_23AB2509C()
{
  type metadata accessor for ItemReconciliation();
}

uint64_t sub_23AB2515C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  const void *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  void (*v54)(unint64_t, unint64_t, uint64_t);
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  void *v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  __int128 v76;
  _QWORD *v77;
  void **v78;
  void *v79;
  void *v80;
  const void *v81;
  unsigned int (*v82)(const void *, uint64_t, uint64_t);
  id v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  const void *v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t v94;
  void (*v95)(unint64_t, unint64_t, uint64_t);
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  void *v104;
  void *v105;
  char v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  size_t v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  __int128 v118;
  _QWORD *v119;
  void **v120;
  void *v121;
  unint64_t v122;
  unint64_t v123;
  _OWORD *v124;
  _OWORD *v125;
  unint64_t v126;
  unint64_t v127;
  void *v128;
  const void *v129;
  id v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  unint64_t v141;
  void (*v142)(unint64_t, unint64_t, uint64_t);
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  void *v153;
  char v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  uint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  __int128 v165;
  _QWORD *v166;
  void **v167;
  void *v168;
  void *v169;
  const void *v170;
  id v171;
  _QWORD *v172;
  _QWORD *v173;
  unint64_t v174;
  unint64_t v175;
  void *v176;
  const void *v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  unint64_t v181;
  unint64_t v182;
  void (*v183)(unint64_t, unint64_t, uint64_t);
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void *v192;
  void *v193;
  char v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  int v201;
  uint64_t v202;
  uint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  __int128 v206;
  _QWORD *v207;
  void **v208;
  void *v209;
  unint64_t v210;
  unint64_t v211;
  _OWORD *v212;
  _OWORD *v213;
  unint64_t v214;
  unint64_t v215;
  _OWORD *v216;
  _OWORD *v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  void *v221;
  const void *v222;
  id v223;
  uint64_t v224;
  unsigned int v225;
  unint64_t v226;
  unint64_t v227;
  unsigned int v228;
  unint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  size_t v233;
  _QWORD *v234;
  _QWORD *v235;
  unint64_t v236;
  unint64_t v237;
  char *v238;
  const void *v239;
  _QWORD *v240;
  uint64_t v241;
  _QWORD *v242;
  unint64_t v243;
  unint64_t v244;
  void (*v245)(unint64_t, unint64_t, uint64_t);
  _QWORD *v246;
  unint64_t v247;
  _QWORD *v248;
  _QWORD *v249;
  _BYTE *v250;
  _BYTE *v251;
  uint64_t v252;
  char v253;
  uint64_t v254;
  _BYTE *v255;
  _BYTE *v256;
  uint64_t v257;
  char *v258;
  unint64_t v259;
  void *v260;
  void *v261;
  char v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  uint64_t v269;
  uint64_t *v270;
  unint64_t v271;
  uint64_t v272;
  __int128 v273;
  _QWORD *v274;
  void **v275;
  void *v276;
  void *v277;
  const void *v278;
  id v279;
  _QWORD *v280;
  _QWORD *v281;
  unint64_t v282;
  unint64_t v283;
  void *v284;
  const void *v285;
  uint64_t *v286;
  uint64_t v287;
  unint64_t v288;
  _QWORD *v289;
  unint64_t v290;
  unint64_t v291;
  void (*v292)(unint64_t, unint64_t, uint64_t);
  _QWORD *v293;
  _QWORD *v294;
  _QWORD *v295;
  _QWORD *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  void *v301;
  void *v302;
  char v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  uint64_t *v310;
  unint64_t v311;
  uint64_t v312;
  __int128 v313;
  _QWORD *v314;
  void **v315;
  void *v316;
  unint64_t v317;
  unint64_t v318;
  _OWORD *v319;
  _OWORD *v320;
  unint64_t v321;
  unint64_t v322;
  id v323;
  unint64_t v325;
  int v326;
  unsigned int v327;
  unsigned int v328;
  int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  int v339;
  unsigned int v340;
  uint64_t v341;
  uint64_t v342;
  size_t __n;
  size_t v344;
  size_t v345;
  unint64_t v346;
  unsigned int (*v347)(const void *, uint64_t, uint64_t);
  uint64_t v348;
  unsigned int (*v349)(const void *, uint64_t, uint64_t);
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  uint64_t v354;
  unsigned int v355;
  size_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int v360;
  unsigned int v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v367;
  size_t v368;
  int v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  int v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t AssociatedTypeWitness;
  uint64_t v393;
  uint64_t v394;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v384 = *(_DWORD *)(v2 + 80);
  v386 = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(v386 - 8);
  v381 = *(_DWORD *)(v3 + 80);
  v362 = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(v362 - 8);
  v373 = *(_DWORD *)(v4 + 80);
  v375 = v373;
  v369 = v381 & 0xF8 | v373;
  v389 = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(v389 - 8);
  v371 = *(_DWORD *)(v5 + 80);
  v383 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v383 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v359 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v359 - 8);
  v379 = *(_DWORD *)(v8 + 80);
  v377 = v7 & 0xF8 | v379 | 7;
  v9 = v377 | v371 & 0xF8;
  v10 = v369 | v384 & 0xF8 | v9;
  v11 = *(_DWORD *)(v2 + 84);
  v357 = v2;
  if (v11)
    v12 = *(_QWORD *)(v2 + 64);
  else
    v12 = *(_QWORD *)(v2 + 64) + 1;
  v394 = v3;
  v13 = *(_DWORD *)(v3 + 84);
  v390 = v4;
  v14 = *(_DWORD *)(v4 + 84);
  if (v13 <= v14)
    v15 = *(_DWORD *)(v4 + 84);
  else
    v15 = *(_DWORD *)(v3 + 84);
  v355 = v15;
  if (v15 <= 0x7FFFFFFE)
    v16 = 2147483646;
  else
    v16 = v15;
  v17 = *(_DWORD *)(v5 + 84);
  v358 = v5;
  if (v17)
    v18 = *(_QWORD *)(v5 + 64);
  else
    v18 = *(_QWORD *)(v5 + 64) + 1;
  v393 = v6;
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v8 + 84))
    v19 = *(_DWORD *)(v8 + 84);
  else
    v19 = *(_DWORD *)(v6 + 84);
  v353 = v19;
  if (v19 <= 0x7FFFFFFE)
    v20 = 2147483646;
  else
    v20 = v19;
  if (v11)
    v21 = v11 - 1;
  else
    v21 = 0;
  v387 = v20;
  v388 = v16;
  if (v21 <= v16 - 1)
    v22 = v16 - 1;
  else
    v22 = v21;
  if (v22 <= 0x7FFFFFFE)
    v23 = 2147483646;
  else
    v23 = v22;
  if (v17)
    v24 = v17 - 1;
  else
    v24 = 0;
  v25 = v20 - 1;
  if (v24 <= v20 - 1)
    v26 = v20 - 1;
  else
    v26 = v24;
  if (v26 <= 0x7FFFFFFE)
    v27 = 2147483646;
  else
    v27 = v26;
  if (v27 <= v23)
    v28 = v23;
  else
    v28 = v27;
  if (v28 <= 0x7FFFFFFF)
    v29 = 0x7FFFFFFF;
  else
    v29 = v28;
  v30 = ~v10;
  if ((_DWORD)v10 != 7)
    goto LABEL_48;
  if (((v381 | v384 | v373 | v371 | v7 | *(_DWORD *)(v8 + 80)) & 0x100000) != 0)
    goto LABEL_48;
  v31 = v369 | 7u;
  v385 = *(_QWORD *)(v394 + 64) + 7;
  v352 = v373 + 8;
  v341 = *(_QWORD *)(v390 + 64) + 7;
  v368 = ((((v341 + ((v352 + (v385 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v373)) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v370 = v12 + 7;
  v372 = v31 + 9;
  v346 = ((((((((v31 + 9 + ((((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v31) + v368 + 34) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  v354 = v346 + v9;
  v382 = *(_QWORD *)(v6 + 64) + 7;
  v351 = v379 + 8;
  v342 = *(_QWORD *)(v8 + 64) + 7;
  v32 = (((v342 + ((v379 + 8 + (v382 & 0xFFFFFFFFFFFFFFF8)) & ~v379)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v364 = v18 + 7;
  v365 = v377 + 9;
  v374 = ((((((((v377 + 9 + ((((v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v377) + v32 + 16 + 34) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  v33 = (((v374 + ((v346 + v9) & ~v9) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  v34 = v33 + 8;
  v35 = (v33 + 8 + v10 + ((v10 + 9) & ~v10)) & ~v10;
  v36 = v33 + 15;
  v345 = v34;
  if (((v10 + 9 + ((((v36 + v35) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v10) + v34 > 0x18)
  {
LABEL_48:
    v40 = *a2;
    *(_QWORD *)a1 = *a2;
    v41 = v40 + ((v10 + 16) & v30);
    swift_retain();
    return v41;
  }
  v337 = v36;
  v338 = v10 + 9;
  v339 = v29;
  v340 = v23;
  v331 = v21;
  v332 = v27;
  v328 = v24;
  v329 = v16 - 1;
  v326 = v25;
  v327 = v17;
  v330 = *(_DWORD *)(v2 + 84);
  __n = v12;
  v360 = v13;
  v361 = *(_DWORD *)(v6 + 84);
  v333 = *(_DWORD *)(v8 + 84);
  v334 = v14;
  v356 = v32 + 16;
  v363 = ~v31;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v37 = (uint64_t)a2 + v10;
  v335 = a1 + v10 + 9;
  v38 = (void *)(v335 & v30);
  v367 = ~v10;
  v336 = v37 + 9;
  v39 = (const void *)((v37 + 9) & v30);
  v349 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v2 + 48);
  v344 = v18;
  v325 = (((v341 + ((v375 + 8 + (v385 & 0xFFFFFFFFFFFFFFF8)) & ~v375)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v349(v39, 1, AssociatedTypeWitness))
  {
    memcpy(v38, v39, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v2 + 16))(v38, v39, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v2 + 56))(v38, 0, 1, AssociatedTypeWitness);
  }
  v42 = (_QWORD *)(((unint64_t)v38 + v370) & 0xFFFFFFFFFFFFF8);
  v43 = (_QWORD *)(((unint64_t)v39 + v370) & 0xFFFFFFFFFFFFFFF8);
  *v42 = *v43;
  v350 = ~v375;
  v44 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
  v45 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
  v46 = (void *)((v372 + v44) & v363);
  v47 = (const void *)((v372 + v45) & v363);
  v348 = v8;
  if (v360 == v388)
  {
    if (!(*(unsigned int (**)(unint64_t))(v394 + 48))((v372 + v45) & v363))
      goto LABEL_60;
  }
  else
  {
    v48 = (_QWORD *)(((unint64_t)v47 + v385) & 0xFFFFFFFFFFFFFFF8);
    if (v355 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v390 + 48))(((unint64_t)v48 + v352) & v350, v334, v362))
      {
LABEL_60:
        v48 = (_QWORD *)(((unint64_t)v47 + v385) & 0xFFFFFFFFFFFFFFF8);
LABEL_61:
        (*(void (**)(void *, const void *, uint64_t))(v394 + 16))(v46, v47, v386);
        v51 = (_QWORD *)(((unint64_t)v46 + v385) & 0xFFFFFFFFFFFFFFF8);
        *v51 = *v48;
        v52 = ((unint64_t)v51 + v352) & v350;
        v53 = ((unint64_t)v48 + v352) & v350;
        v54 = *(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 16);
        swift_bridgeObjectRetain();
        v54(v52, v53, v362);
        v55 = (_QWORD *)((v341 + v52) & 0xFFFFFFFFFFFFF8);
        v56 = (_QWORD *)((v341 + v53) & 0xFFFFFFFFFFFFF8);
        *v55 = *v56;
        v57 = (_QWORD *)(((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8);
        v58 = (_QWORD *)(((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v57 = *v58;
        v57[1] = v58[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v50 = ((((v341 + ((v375 + 8 + (v385 & 0xFFFFFFFFFFFFFFF8)) & ~v375)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
        goto LABEL_62;
      }
    }
    else
    {
      v49 = *v48;
      if (*v48 >= 0xFFFFFFFFuLL)
        LODWORD(v49) = -1;
      if ((v49 + 1) < 2)
        goto LABEL_61;
    }
  }
  v50 = ((((v341 + ((v375 + 8 + (v385 & 0xFFFFFFFFFFFFFFF8)) & ~v375)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  memcpy(v46, v47, v368);
LABEL_62:
  v59 = (uint64_t)v47 + v50 + 10;
  v60 = (uint64_t)v47 + v50 + 34;
  *((_BYTE *)v46 + v50) = *((_BYTE *)v47 + v50);
  v61 = (uint64_t)v46 + v50 + 34;
  *(_BYTE *)(((unint64_t)v46 + v50) | 1) = *(_BYTE *)(((unint64_t)v47 + v50) | 1);
  v376 = ~v9;
  *(_BYTE *)(((unint64_t)v46 + v50) | 2) = *(_BYTE *)(((unint64_t)v47 + v50) | 2);
  v62 = ((unint64_t)v46 + v50 + 10) & 0xFFFFFFFFFFFFFFF8;
  v63 = *(void **)(v59 & 0xFFFFFFFFFFFFFFF8);
  v64 = *(void **)((v59 & 0xFFFFFFFFFFFFFFF8) + 8);
  v65 = *(_BYTE *)((v59 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_23AAAE478(v63, v64, v65);
  *(_QWORD *)v62 = v63;
  *(_QWORD *)(v62 + 8) = v64;
  *(_BYTE *)(v62 + 16) = v65;
  v66 = v61 & 0xFFFFFFFFFFFFFFF8;
  v67 = v60 & 0xFFFFFFFFFFFFFFF8;
  v68 = *(_QWORD *)(v67 + 16) >> 60;
  if (!(4 * (v68 & 3)) || ((v68 >> 2) & 0xFFFFFFF3 | (4 * (v68 & 3))) == 0xF)
  {
    v73 = (uint64_t *)(v67 + 8);
    *(_QWORD *)v66 = *(_QWORD *)v67;
    v74 = *(_QWORD *)(v67 + 16);
    v72 = v389;
    if (v74 >> 60 == 15)
    {
      *(_OWORD *)(v66 + 8) = *(_OWORD *)v73;
    }
    else
    {
      v75 = *v73;
      sub_23AAAE668(*v73, *(_QWORD *)(v67 + 16));
      *(_QWORD *)(v66 + 8) = v75;
      *(_QWORD *)(v66 + 16) = v74;
    }
    v76 = *(_OWORD *)(v67 + 24);
    *(_BYTE *)(v66 + 40) = *(_BYTE *)(v67 + 40);
    *(_OWORD *)(v66 + 24) = v76;
    *(_QWORD *)(v66 + 48) = *(_QWORD *)(v67 + 48);
  }
  else
  {
    v69 = *(_OWORD *)v67;
    v70 = *(_OWORD *)(v67 + 16);
    v71 = *(_OWORD *)(v67 + 32);
    *(_QWORD *)(v66 + 48) = *(_QWORD *)(v67 + 48);
    *(_OWORD *)(v66 + 16) = v70;
    *(_OWORD *)(v66 + 32) = v71;
    *(_OWORD *)v66 = v69;
    v72 = v389;
  }
  v77 = (_QWORD *)((v66 + 63) & 0xFFFFFFFFFFFFF8);
  v78 = (void **)((v67 + 63) & 0xFFFFFFFFFFFFFFF8);
  v79 = *v78;
  *v77 = *v78;
  v378 = ~v377;
  *(_QWORD *)(((unint64_t)v77 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v78 + 15) & 0xFFFFFFFFFFFFF8);
  v80 = (void *)(((unint64_t)v38 + v9 + v346) & v376);
  v81 = (const void *)(((unint64_t)v39 + v9 + v346) & v376);
  v82 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v358 + 48);
  v83 = v79;
  v347 = v82;
  if (v82(v81, 1, v72))
  {
    memcpy(v80, v81, v344);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v358 + 16))(v80, v81, v72);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v358 + 56))(v80, 0, 1, v72);
  }
  v84 = (_QWORD *)(((unint64_t)v80 + v364) & 0xFFFFFFFFFFFFF8);
  v85 = (_QWORD *)(((unint64_t)v81 + v364) & 0xFFFFFFFFFFFFFFF8);
  *v84 = *v85;
  v380 = ~v379;
  v86 = ((unint64_t)v84 + 15) & 0xFFFFFFFFFFFFFFF8;
  v87 = ((unint64_t)v85 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v86 = *(_QWORD *)v87;
  *(_BYTE *)(v86 + 8) = *(_BYTE *)(v87 + 8);
  v88 = (char *)((v365 + v86) & v378);
  v89 = (const void *)((v365 + v87) & v378);
  if (v361 == v387)
  {
    if (!(*(unsigned int (**)(unint64_t))(v393 + 48))((v365 + v87) & v378))
      goto LABEL_82;
  }
  else
  {
    v90 = (_QWORD *)(((unint64_t)v89 + v382) & 0xFFFFFFFFFFFFFFF8);
    if (v353 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v348 + 48))(((unint64_t)v90 + v351) & v380, v333, v359))
      {
LABEL_82:
        v90 = (_QWORD *)(((unint64_t)v89 + v382) & 0xFFFFFFFFFFFFFFF8);
LABEL_83:
        (*(void (**)(char *, const void *, uint64_t))(v393 + 16))(v88, v89, v383);
        v92 = (_QWORD *)((unint64_t)&v88[v382] & 0xFFFFFFFFFFFFFFF8);
        *v92 = *v90;
        v93 = ((unint64_t)v92 + v351) & v380;
        v94 = ((unint64_t)v90 + v351) & v380;
        v95 = *(void (**)(unint64_t, unint64_t, uint64_t))(v348 + 16);
        swift_bridgeObjectRetain();
        v95(v93, v94, v359);
        v96 = (_QWORD *)((v342 + v93) & 0xFFFFFFFFFFFFF8);
        v97 = (_QWORD *)((v342 + v94) & 0xFFFFFFFFFFFFF8);
        *v96 = *v97;
        v98 = (_QWORD *)(((unint64_t)v96 + 15) & 0xFFFFFFFFFFFFFFF8);
        v99 = (_QWORD *)(((unint64_t)v97 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v98 = *v99;
        v98[1] = v99[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_84;
      }
    }
    else
    {
      v91 = *v90;
      if (*v90 >= 0xFFFFFFFFuLL)
        LODWORD(v91) = -1;
      if ((v91 + 1) < 2)
        goto LABEL_83;
    }
  }
  memcpy(v88, v89, v356);
LABEL_84:
  v100 = (uint64_t)v89 + v356 + 10;
  v101 = (uint64_t)v89 + v356 + 34;
  v102 = &v88[v356];
  *v102 = *((_BYTE *)v89 + v356);
  *(_BYTE *)((unint64_t)&v88[v356] | 1) = *(_BYTE *)(((unint64_t)v89 + v356) | 1);
  *(_BYTE *)((unint64_t)&v88[v356] | 2) = *(_BYTE *)(((unint64_t)v89 + v356) | 2);
  v103 = (unint64_t)&v88[v356 + 10] & 0xFFFFFFFFFFFFFFF8;
  v104 = *(void **)(v100 & 0xFFFFFFFFFFFFFFF8);
  v105 = *(void **)((v100 & 0xFFFFFFFFFFFFFFF8) + 8);
  v106 = *(_BYTE *)((v100 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_23AAAE478(v104, v105, v106);
  *(_QWORD *)v103 = v104;
  *(_QWORD *)(v103 + 8) = v105;
  *(_BYTE *)(v103 + 16) = v106;
  v107 = (unint64_t)(v102 + 34) & 0xFFFFFFFFFFFFFFF8;
  v108 = v101 & 0xFFFFFFFFFFFFFFF8;
  v109 = *(_QWORD *)(v108 + 16) >> 60;
  if (!(4 * (v109 & 3)) || ((v109 >> 2) & 0xFFFFFFF3 | (4 * (v109 & 3))) == 0xF)
  {
    v115 = (uint64_t *)(v108 + 8);
    *(_QWORD *)v107 = *(_QWORD *)v108;
    v116 = *(_QWORD *)(v108 + 16);
    v114 = ~v10;
    if (v116 >> 60 == 15)
    {
      *(_OWORD *)(v107 + 8) = *(_OWORD *)v115;
    }
    else
    {
      v117 = *v115;
      sub_23AAAE668(*v115, *(_QWORD *)(v108 + 16));
      *(_QWORD *)(v107 + 8) = v117;
      *(_QWORD *)(v107 + 16) = v116;
    }
    v113 = v32 + 16;
    v118 = *(_OWORD *)(v108 + 24);
    *(_BYTE *)(v107 + 40) = *(_BYTE *)(v108 + 40);
    *(_OWORD *)(v107 + 24) = v118;
    *(_QWORD *)(v107 + 48) = *(_QWORD *)(v108 + 48);
  }
  else
  {
    v110 = *(_OWORD *)v108;
    v111 = *(_OWORD *)(v108 + 16);
    v112 = *(_OWORD *)(v108 + 32);
    *(_QWORD *)(v107 + 48) = *(_QWORD *)(v108 + 48);
    *(_OWORD *)(v107 + 16) = v111;
    *(_OWORD *)(v107 + 32) = v112;
    *(_OWORD *)v107 = v110;
    v113 = v32 + 16;
    v114 = ~v10;
  }
  v119 = (_QWORD *)((v107 + 63) & 0xFFFFFFFFFFFFF8);
  v120 = (void **)((v108 + 63) & 0xFFFFFFFFFFFFFFF8);
  v121 = *v120;
  *v119 = *v120;
  *(_QWORD *)(((unint64_t)v119 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v120 + 15) & 0xFFFFFFFFFFFFF8);
  *((_BYTE *)v80 + v374) = *((_BYTE *)v81 + v374);
  v122 = ((unint64_t)v80 + v374) & 0xFFFFFFFFFFFFFFF8;
  v123 = ((unint64_t)v81 + v374) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v122 + 8) = *(_QWORD *)(v123 + 8);
  v124 = (_OWORD *)((v122 + 23) & 0xFFFFFFFFFFFFFFF8);
  v125 = (_OWORD *)((v123 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v124 = *v125;
  v126 = ((unint64_t)v124 + 23) & 0xFFFFFFFFFFFFFFF8;
  v127 = ((unint64_t)v125 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v126 = *(_QWORD *)v127;
  *(_BYTE *)(v126 + 8) = *(_BYTE *)(v127 + 8);
  *(_QWORD *)(((unint64_t)v124 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v125 + 39) & 0xFFFFFFFFFFFFF8);
  v128 = (void *)(((v335 | v10) + v345) & v114);
  v129 = (const void *)(((v336 | v10) + v345) & v114);
  v130 = v121;
  swift_bridgeObjectRetain();
  if (v349(v129, 1, AssociatedTypeWitness))
  {
    memcpy(v128, v129, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v357 + 16))(v128, v129, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v357 + 56))(v128, 0, 1, AssociatedTypeWitness);
  }
  v131 = (_QWORD *)(((unint64_t)v128 + v370) & 0xFFFFFFFFFFFFF8);
  v132 = (_QWORD *)(((unint64_t)v129 + v370) & 0xFFFFFFFFFFFFFFF8);
  *v131 = *v132;
  v133 = ((unint64_t)v131 + 15) & 0xFFFFFFFFFFFFFFF8;
  v134 = ((unint64_t)v132 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v133 = *(_QWORD *)v134;
  *(_BYTE *)(v133 + 8) = *(_BYTE *)(v134 + 8);
  v135 = (char *)((v372 + v133) & v363);
  v136 = (char *)((v372 + v134) & v363);
  if (v360 == v388)
  {
    if (!(*(unsigned int (**)(unint64_t))(v394 + 48))((v372 + v134) & v363))
      goto LABEL_104;
  }
  else
  {
    v137 = (_QWORD *)((unint64_t)&v136[v385] & 0xFFFFFFFFFFFFFFF8);
    if (v355 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v390 + 48))(((unint64_t)v137 + v352) & v350, v334, v362))
      {
LABEL_104:
        v137 = (_QWORD *)((unint64_t)&v136[v385] & 0xFFFFFFFFFFFFFFF8);
LABEL_105:
        (*(void (**)(char *, char *, uint64_t))(v394 + 16))(v135, v136, v386);
        v139 = (_QWORD *)((unint64_t)&v135[v385] & 0xFFFFFFFFFFFFFFF8);
        *v139 = *v137;
        v140 = ((unint64_t)v139 + v352) & v350;
        v141 = ((unint64_t)v137 + v352) & v350;
        v142 = *(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 16);
        swift_bridgeObjectRetain();
        v142(v140, v141, v362);
        v143 = (_QWORD *)((v341 + v140) & 0xFFFFFFFFFFFFF8);
        v144 = (_QWORD *)((v341 + v141) & 0xFFFFFFFFFFFFF8);
        *v143 = *v144;
        v145 = (_QWORD *)(((unint64_t)v143 + 15) & 0xFFFFFFFFFFFFFFF8);
        v146 = (_QWORD *)(((unint64_t)v144 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v145 = *v146;
        v145[1] = v146[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_106;
      }
    }
    else
    {
      v138 = *v137;
      if (*v137 >= 0xFFFFFFFFuLL)
        LODWORD(v138) = -1;
      if ((v138 + 1) < 2)
        goto LABEL_105;
    }
  }
  memcpy(v135, v136, v368);
LABEL_106:
  v147 = (unint64_t)&v135[v368];
  v148 = (uint64_t)&v136[v368 + 10];
  v149 = &v136[v368];
  *(_BYTE *)v147 = v136[v368];
  v150 = (uint64_t)&v135[v368 + 34];
  *(_BYTE *)(v147 | 1) = *(_BYTE *)((unint64_t)&v136[v368] | 1);
  *(_BYTE *)(v147 | 2) = *(_BYTE *)((unint64_t)&v136[v368] | 2);
  v151 = (unint64_t)&v135[v368 + 10] & 0xFFFFFFFFFFFFFFF8;
  v152 = *(void **)(v148 & 0xFFFFFFFFFFFFFFF8);
  v153 = *(void **)((v148 & 0xFFFFFFFFFFFFFFF8) + 8);
  v154 = *(_BYTE *)((v148 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_23AAAE478(v152, v153, v154);
  *(_QWORD *)v151 = v152;
  *(_QWORD *)(v151 + 8) = v153;
  *(_BYTE *)(v151 + 16) = v154;
  v155 = v150 & 0xFFFFFFFFFFFFFFF8;
  v156 = (unint64_t)(v149 + 34) & 0xFFFFFFFFFFFFFFF8;
  v157 = *(_QWORD *)(v156 + 16) >> 60;
  if (!(4 * (v157 & 3)) || ((v157 >> 2) & 0xFFFFFFF3 | (4 * (v157 & 3))) == 0xF)
  {
    v162 = (uint64_t *)(v156 + 8);
    *(_QWORD *)v155 = *(_QWORD *)v156;
    v163 = *(_QWORD *)(v156 + 16);
    v161 = v389;
    if (v163 >> 60 == 15)
    {
      *(_OWORD *)(v155 + 8) = *(_OWORD *)v162;
    }
    else
    {
      v164 = *v162;
      sub_23AAAE668(*v162, *(_QWORD *)(v156 + 16));
      *(_QWORD *)(v155 + 8) = v164;
      *(_QWORD *)(v155 + 16) = v163;
    }
    v165 = *(_OWORD *)(v156 + 24);
    *(_BYTE *)(v155 + 40) = *(_BYTE *)(v156 + 40);
    *(_OWORD *)(v155 + 24) = v165;
    *(_QWORD *)(v155 + 48) = *(_QWORD *)(v156 + 48);
  }
  else
  {
    v158 = *(_OWORD *)v156;
    v159 = *(_OWORD *)(v156 + 16);
    v160 = *(_OWORD *)(v156 + 32);
    *(_QWORD *)(v155 + 48) = *(_QWORD *)(v156 + 48);
    *(_OWORD *)(v155 + 16) = v159;
    *(_OWORD *)(v155 + 32) = v160;
    *(_OWORD *)v155 = v158;
    v161 = v389;
  }
  v166 = (_QWORD *)((v155 + 63) & 0xFFFFFFFFFFFFF8);
  v167 = (void **)((v156 + 63) & 0xFFFFFFFFFFFFFFF8);
  v168 = *v167;
  *v166 = *v167;
  *(_QWORD *)(((unint64_t)v166 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v167 + 15) & 0xFFFFFFFFFFFFF8);
  v169 = (void *)(((unint64_t)v128 + v354) & v376);
  v170 = (const void *)(((unint64_t)v129 + v354) & v376);
  v171 = v168;
  if (v347(v170, 1, v161))
  {
    memcpy(v169, v170, v344);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v358 + 16))(v169, v170, v161);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v358 + 56))(v169, 0, 1, v161);
  }
  v172 = (_QWORD *)(((unint64_t)v169 + v364) & 0xFFFFFFFFFFFFF8);
  v173 = (_QWORD *)(((unint64_t)v170 + v364) & 0xFFFFFFFFFFFFFFF8);
  *v172 = *v173;
  v174 = ((unint64_t)v172 + 15) & 0xFFFFFFFFFFFFFFF8;
  v175 = ((unint64_t)v173 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v174 = *(_QWORD *)v175;
  *(_BYTE *)(v174 + 8) = *(_BYTE *)(v175 + 8);
  v176 = (void *)((v365 + v174) & v378);
  v177 = (const void *)((v365 + v175) & v378);
  if (v361 == v387)
  {
    if (!(*(unsigned int (**)(unint64_t))(v393 + 48))((v365 + v175) & v378))
      goto LABEL_126;
  }
  else
  {
    v178 = (_QWORD *)(((unint64_t)v177 + v382) & 0xFFFFFFFFFFFFFFF8);
    if (v353 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v348 + 48))(((unint64_t)v178 + v351) & v380, v333, v359))
      {
LABEL_126:
        v178 = (_QWORD *)(((unint64_t)v177 + v382) & 0xFFFFFFFFFFFFFFF8);
LABEL_127:
        (*(void (**)(void *, const void *, uint64_t))(v393 + 16))(v176, v177, v383);
        v180 = (_QWORD *)(((unint64_t)v176 + v382) & 0xFFFFFFFFFFFFFFF8);
        *v180 = *v178;
        v181 = ((unint64_t)v180 + v351) & v380;
        v182 = ((unint64_t)v178 + v351) & v380;
        v183 = *(void (**)(unint64_t, unint64_t, uint64_t))(v348 + 16);
        swift_bridgeObjectRetain();
        v183(v181, v182, v359);
        v184 = (_QWORD *)((v342 + v181) & 0xFFFFFFFFFFFFF8);
        v185 = (_QWORD *)((v342 + v182) & 0xFFFFFFFFFFFFF8);
        *v184 = *v185;
        v186 = (_QWORD *)(((unint64_t)v184 + 15) & 0xFFFFFFFFFFFFFFF8);
        v187 = (_QWORD *)(((unint64_t)v185 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v186 = *v187;
        v186[1] = v187[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_128;
      }
    }
    else
    {
      v179 = *v178;
      if (*v178 >= 0xFFFFFFFFuLL)
        LODWORD(v179) = -1;
      if ((v179 + 1) < 2)
        goto LABEL_127;
    }
  }
  memcpy(v176, v177, v113);
LABEL_128:
  v188 = (uint64_t)v177 + v113 + 10;
  v189 = (uint64_t)v177 + v113 + 34;
  *((_BYTE *)v176 + v113) = *((_BYTE *)v177 + v113);
  v190 = (uint64_t)v176 + v113 + 34;
  *(_BYTE *)(((unint64_t)v176 + v113) | 1) = *(_BYTE *)(((unint64_t)v177 + v113) | 1);
  *(_BYTE *)(((unint64_t)v176 + v113) | 2) = *(_BYTE *)(((unint64_t)v177 + v113) | 2);
  v191 = ((unint64_t)v176 + v113 + 10) & 0xFFFFFFFFFFFFFFF8;
  v192 = *(void **)(v188 & 0xFFFFFFFFFFFFFFF8);
  v193 = *(void **)((v188 & 0xFFFFFFFFFFFFFFF8) + 8);
  v194 = *(_BYTE *)((v188 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_23AAAE478(v192, v193, v194);
  *(_QWORD *)v191 = v192;
  *(_QWORD *)(v191 + 8) = v193;
  *(_BYTE *)(v191 + 16) = v194;
  v195 = v190 & 0xFFFFFFFFFFFFFFF8;
  v196 = v189 & 0xFFFFFFFFFFFFFFF8;
  v197 = *(_QWORD *)((v189 & 0xFFFFFFFFFFFFFFF8) + 16) >> 60;
  if (!(4 * (v197 & 3)) || ((v197 >> 2) & 0xFFFFFFF3 | (4 * (v197 & 3))) == 0xF)
  {
    v203 = (uint64_t *)(v196 + 8);
    *(_QWORD *)v195 = *(_QWORD *)v196;
    v204 = *(_QWORD *)(v196 + 16);
    v201 = v339;
    v202 = v338;
    if (v204 >> 60 == 15)
    {
      *(_OWORD *)(v195 + 8) = *(_OWORD *)v203;
    }
    else
    {
      v205 = *v203;
      sub_23AAAE668(*v203, *(_QWORD *)(v196 + 16));
      *(_QWORD *)(v195 + 8) = v205;
      *(_QWORD *)(v195 + 16) = v204;
    }
    v206 = *(_OWORD *)(v196 + 24);
    *(_BYTE *)(v195 + 40) = *(_BYTE *)(v196 + 40);
    *(_OWORD *)(v195 + 24) = v206;
    *(_QWORD *)(v195 + 48) = *(_QWORD *)(v196 + 48);
  }
  else
  {
    v198 = *(_OWORD *)v196;
    v199 = *(_OWORD *)(v196 + 16);
    v200 = *(_OWORD *)(v196 + 32);
    *(_QWORD *)(v195 + 48) = *(_QWORD *)(v196 + 48);
    *(_OWORD *)(v195 + 16) = v199;
    *(_OWORD *)(v195 + 32) = v200;
    *(_OWORD *)v195 = v198;
    v201 = v339;
    v202 = v338;
  }
  v207 = (_QWORD *)((v195 + 63) & 0xFFFFFFFFFFFFF8);
  v208 = (void **)((v196 + 63) & 0xFFFFFFFFFFFFFFF8);
  v209 = *v208;
  *v207 = *v208;
  *(_QWORD *)(((unint64_t)v207 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v208 + 15) & 0xFFFFFFFFFFFFF8);
  *((_BYTE *)v169 + v374) = *((_BYTE *)v170 + v374);
  v210 = ((unint64_t)v169 + v374) & 0xFFFFFFFFFFFFFFF8;
  v211 = ((unint64_t)v170 + v374) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v210 + 8) = *(_QWORD *)(v211 + 8);
  v212 = (_OWORD *)((v210 + 23) & 0xFFFFFFFFFFFFFFF8);
  v213 = (_OWORD *)((v211 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v212 = *v213;
  v214 = ((unint64_t)v212 + 23) & 0xFFFFFFFFFFFFFFF8;
  v215 = ((unint64_t)v213 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v214 = *(_QWORD *)v215;
  *(_BYTE *)(v214 + 8) = *(_BYTE *)(v215 + 8);
  *(_QWORD *)(((unint64_t)v212 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v213 + 39) & 0xFFFFFFFFFFFFF8);
  v216 = (_OWORD *)(((unint64_t)v128 + v337) & 0xFFFFFFFFFFFFFFF8);
  v217 = (_OWORD *)(((unint64_t)v129 + v337) & 0xFFFFFFFFFFFFFFF8);
  *v216 = *v217;
  v218 = ((unint64_t)v216 + 23) & 0xFFFFFFFFFFFFFFF8;
  v219 = ((unint64_t)v217 + 23) & 0xFFFFFFFFFFFFFFF8;
  v220 = *(_QWORD *)v219;
  *(_BYTE *)(v218 + 8) = *(_BYTE *)(v219 + 8);
  *(_QWORD *)v218 = v220;
  v221 = (void *)((v202 + v218) & v367);
  v222 = (const void *)((v202 + v219) & v367);
  v223 = v209;
  swift_bridgeObjectRetain();
  if (v340 == v201)
  {
    if (v331 == v340)
    {
      v224 = AssociatedTypeWitness;
      v41 = a1;
      if (v330 < 2)
        goto LABEL_169;
      v225 = ((uint64_t (*)(const void *))v349)(v222);
LABEL_143:
      if (v225 >= 2)
        goto LABEL_171;
      goto LABEL_169;
    }
    v227 = (v372 + (((((unint64_t)v222 + v370) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v363;
    if (v329 == v340)
    {
      if (v360 == v388)
      {
        v228 = (*(uint64_t (**)(unint64_t))(v394 + 48))(v227);
        v224 = AssociatedTypeWitness;
        v41 = a1;
        goto LABEL_168;
      }
      v230 = (unint64_t *)((v385 + v227) & 0xFFFFFFFFFFFFFFF8);
      v224 = AssociatedTypeWitness;
      v41 = a1;
      if (v355 > 0x7FFFFFFE)
      {
        v228 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v390 + 48))(((unint64_t)v230 + v352) & v350, v334, v362);
        goto LABEL_168;
      }
LABEL_162:
      v232 = *v230;
      if (v232 >= 0xFFFFFFFF)
        v228 = -1;
      else
        v228 = v232;
      if (v228 + 1 < 2)
        goto LABEL_169;
      goto LABEL_168;
    }
    v229 = v325;
LABEL_157:
    v231 = *(_QWORD *)((((v229 + v227 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
    if (v231 >= 0xFFFFFFFF)
      LODWORD(v231) = -1;
    v224 = AssociatedTypeWitness;
    v41 = a1;
    if ((v231 + 1) >= 2)
      goto LABEL_171;
    goto LABEL_169;
  }
  v226 = ((unint64_t)v222 + v354) & v376;
  if (v332 != v201)
  {
    v224 = AssociatedTypeWitness;
    v41 = a1;
    if (*(_QWORD *)(((v226 + v374) & 0xFFFFFFFFFFFFF8) + 8) < 0xFFFFFFFFuLL)
      goto LABEL_171;
    goto LABEL_169;
  }
  if (v328 == v332)
  {
    v224 = AssociatedTypeWitness;
    v41 = a1;
    if (v327 < 2)
      goto LABEL_169;
    v225 = ((uint64_t (*)(unint64_t))v347)(v226);
    goto LABEL_143;
  }
  v227 = (v365 + ((((v364 + v226) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v378;
  if (v326 != v332)
  {
    v229 = v32;
    goto LABEL_157;
  }
  v224 = AssociatedTypeWitness;
  v41 = a1;
  if (v361 == v387)
  {
    v228 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v393 + 48))(v227, v361, v383);
    goto LABEL_168;
  }
  v230 = (unint64_t *)((v382 + v227) & 0xFFFFFFFFFFFFFFF8);
  if (v353 <= 0x7FFFFFFE)
    goto LABEL_162;
  v228 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v348 + 48))(((unint64_t)v230 + v351) & v380, v333, v359);
LABEL_168:
  if (v228 >= 2)
  {
LABEL_171:
    memcpy(v221, v222, v345);
    return v41;
  }
LABEL_169:
  if (v349(v222, 1, v224))
  {
    memcpy(v221, v222, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v357 + 16))(v221, v222, v224);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v357 + 56))(v221, 0, 1, v224);
  }
  v233 = v368;
  v234 = (_QWORD *)(((unint64_t)v221 + v370) & 0xFFFFFFFFFFFFF8);
  v235 = (_QWORD *)(((unint64_t)v222 + v370) & 0xFFFFFFFFFFFFFFF8);
  *v234 = *v235;
  v236 = ((unint64_t)v234 + 15) & 0xFFFFFFFFFFFFFFF8;
  v237 = ((unint64_t)v235 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v236 = *(_QWORD *)v237;
  *(_BYTE *)(v236 + 8) = *(_BYTE *)(v237 + 8);
  v238 = (char *)((v372 + v236) & v363);
  v239 = (const void *)((v372 + v237) & v363);
  if (v360 == v388)
  {
    if (!(*(unsigned int (**)(unint64_t))(v394 + 48))((v372 + v237) & v363))
      goto LABEL_183;
  }
  else
  {
    v240 = (_QWORD *)(((unint64_t)v239 + v385) & 0xFFFFFFFFFFFFFFF8);
    if (v355 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v390 + 48))(((unint64_t)v240 + v352) & v350, v334, v362))
      {
LABEL_183:
        v240 = (_QWORD *)(((unint64_t)v239 + v385) & 0xFFFFFFFFFFFFFFF8);
LABEL_184:
        (*(void (**)(char *, const void *, uint64_t))(v394 + 16))(v238, v239, v386);
        v242 = (_QWORD *)((unint64_t)&v238[v385] & 0xFFFFFFFFFFFFFFF8);
        *v242 = *v240;
        v243 = ((unint64_t)v242 + v352) & v350;
        v244 = ((unint64_t)v240 + v352) & v350;
        v245 = *(void (**)(unint64_t, unint64_t, uint64_t))(v390 + 16);
        swift_bridgeObjectRetain();
        v245(v243, v244, v362);
        v246 = (_QWORD *)((v341 + v243) & 0xFFFFFFFFFFFFF8);
        v247 = v341 + v244;
        v233 = v368;
        v247 &= 0xFFFFFFFFFFFFF8uLL;
        *v246 = *(_QWORD *)v247;
        v248 = (_QWORD *)(((unint64_t)v246 + 15) & 0xFFFFFFFFFFFFFFF8);
        v249 = (_QWORD *)((v247 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v248 = *v249;
        v248[1] = v249[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_185;
      }
    }
    else
    {
      v241 = *v240;
      if (*v240 >= 0xFFFFFFFFuLL)
        LODWORD(v241) = -1;
      if ((v241 + 1) < 2)
        goto LABEL_184;
    }
  }
  memcpy(v238, v239, v368);
LABEL_185:
  v250 = (_BYTE *)(((unint64_t)v239 + v233) | 1);
  v251 = (_BYTE *)(((unint64_t)v239 + v233) | 2);
  v252 = (uint64_t)v239 + v233 + 10;
  v254 = (uint64_t)v239 + v233 + 34;
  v253 = *((_BYTE *)v239 + v233);
  v255 = (_BYTE *)((unint64_t)&v238[v233] | 1);
  v256 = (_BYTE *)((unint64_t)&v238[v233] | 2);
  v257 = (uint64_t)&v238[v233 + 10];
  v258 = &v238[v233];
  *v258 = v253;
  *v255 = *v250;
  *v256 = *v251;
  v259 = v257 & 0xFFFFFFFFFFFFFFF8;
  v260 = *(void **)(v252 & 0xFFFFFFFFFFFFFFF8);
  v261 = *(void **)((v252 & 0xFFFFFFFFFFFFFFF8) + 8);
  v262 = *(_BYTE *)((v252 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_23AAAE478(v260, v261, v262);
  *(_QWORD *)v259 = v260;
  *(_QWORD *)(v259 + 8) = v261;
  *(_BYTE *)(v259 + 16) = v262;
  v263 = (unint64_t)(v258 + 34) & 0xFFFFFFFFFFFFFFF8;
  v264 = v254 & 0xFFFFFFFFFFFFFFF8;
  v265 = *(_QWORD *)(v264 + 16) >> 60;
  if (!(4 * (v265 & 3)) || ((v265 >> 2) & 0xFFFFFFF3 | (4 * (v265 & 3))) == 0xF)
  {
    v270 = (uint64_t *)(v264 + 8);
    *(_QWORD *)v263 = *(_QWORD *)v264;
    v271 = *(_QWORD *)(v264 + 16);
    v269 = v389;
    if (v271 >> 60 == 15)
    {
      *(_OWORD *)(v263 + 8) = *(_OWORD *)v270;
    }
    else
    {
      v272 = *v270;
      sub_23AAAE668(*v270, *(_QWORD *)(v264 + 16));
      *(_QWORD *)(v263 + 8) = v272;
      *(_QWORD *)(v263 + 16) = v271;
    }
    v273 = *(_OWORD *)(v264 + 24);
    *(_BYTE *)(v263 + 40) = *(_BYTE *)(v264 + 40);
    *(_OWORD *)(v263 + 24) = v273;
    *(_QWORD *)(v263 + 48) = *(_QWORD *)(v264 + 48);
  }
  else
  {
    v266 = *(_OWORD *)v264;
    v267 = *(_OWORD *)(v264 + 16);
    v268 = *(_OWORD *)(v264 + 32);
    *(_QWORD *)(v263 + 48) = *(_QWORD *)(v264 + 48);
    *(_OWORD *)(v263 + 16) = v267;
    *(_OWORD *)(v263 + 32) = v268;
    *(_OWORD *)v263 = v266;
    v269 = v389;
  }
  v274 = (_QWORD *)((v263 + 63) & 0xFFFFFFFFFFFFF8);
  v275 = (void **)((v264 + 63) & 0xFFFFFFFFFFFFFFF8);
  v276 = *v275;
  *v274 = *v275;
  *(_QWORD *)(((unint64_t)v274 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v275 + 15) & 0xFFFFFFFFFFFFF8);
  v277 = (void *)(((unint64_t)v221 + v354) & v376);
  v278 = (const void *)(((unint64_t)v222 + v354) & v376);
  v279 = v276;
  if (v347(v278, 1, v269))
  {
    memcpy(v277, v278, v344);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v358 + 16))(v277, v278, v269);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v358 + 56))(v277, 0, 1, v269);
  }
  v280 = (_QWORD *)(((unint64_t)v277 + v364) & 0xFFFFFFFFFFFFF8);
  v281 = (_QWORD *)(((unint64_t)v278 + v364) & 0xFFFFFFFFFFFFFFF8);
  *v280 = *v281;
  v282 = ((unint64_t)v280 + 15) & 0xFFFFFFFFFFFFFFF8;
  v283 = ((unint64_t)v281 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v282 = *(_QWORD *)v283;
  *(_BYTE *)(v282 + 8) = *(_BYTE *)(v283 + 8);
  v284 = (void *)((v365 + v282) & v378);
  v285 = (const void *)((v365 + v283) & v378);
  if (v361 == v387)
  {
    if (!(*(unsigned int (**)(unint64_t))(v393 + 48))((v365 + v283) & v378))
      goto LABEL_205;
LABEL_204:
    v288 = v32 + 16;
    memcpy(v284, v285, v356);
    goto LABEL_207;
  }
  v286 = (uint64_t *)(((unint64_t)v285 + v382) & 0xFFFFFFFFFFFFFFF8);
  if (v353 <= 0x7FFFFFFE)
  {
    v287 = *v286;
    if ((unint64_t)*v286 >= 0xFFFFFFFF)
      LODWORD(v287) = -1;
    if ((v287 + 1) < 2)
      goto LABEL_206;
    goto LABEL_204;
  }
  if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v348 + 48))(((unint64_t)v286 + v351) & v380, v333, v359))
  {
    goto LABEL_204;
  }
LABEL_205:
  v286 = (uint64_t *)(((unint64_t)v285 + v382) & 0xFFFFFFFFFFFFFFF8);
LABEL_206:
  (*(void (**)(void *, const void *, uint64_t))(v393 + 16))(v284, v285, v383);
  v289 = (_QWORD *)(((unint64_t)v284 + v382) & 0xFFFFFFFFFFFFFFF8);
  *v289 = *v286;
  v290 = ((unint64_t)v289 + v351) & v380;
  v291 = ((unint64_t)v286 + v351) & v380;
  v292 = *(void (**)(unint64_t, unint64_t, uint64_t))(v348 + 16);
  swift_bridgeObjectRetain();
  v292(v290, v291, v359);
  v293 = (_QWORD *)((v342 + v290) & 0xFFFFFFFFFFFFF8);
  v294 = (_QWORD *)((v342 + v291) & 0xFFFFFFFFFFFFF8);
  *v293 = *v294;
  v295 = (_QWORD *)(((unint64_t)v293 + 15) & 0xFFFFFFFFFFFFFFF8);
  v296 = (_QWORD *)(((unint64_t)v294 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v295 = *v296;
  v295[1] = v296[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v288 = v32 + 16;
LABEL_207:
  v297 = (uint64_t)v285 + v288 + 10;
  v298 = (uint64_t)v285 + v288 + 34;
  *((_BYTE *)v284 + v288) = *((_BYTE *)v285 + v288);
  v299 = (uint64_t)v284 + v288 + 34;
  *(_BYTE *)(((unint64_t)v284 + v288) | 1) = *(_BYTE *)(((unint64_t)v285 + v288) | 1);
  *(_BYTE *)(((unint64_t)v284 + v288) | 2) = *(_BYTE *)(((unint64_t)v285 + v288) | 2);
  v300 = ((unint64_t)v284 + v288 + 10) & 0xFFFFFFFFFFFFFFF8;
  v301 = *(void **)(v297 & 0xFFFFFFFFFFFFFFF8);
  v302 = *(void **)((v297 & 0xFFFFFFFFFFFFFFF8) + 8);
  v303 = *(_BYTE *)((v297 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_23AAAE478(v301, v302, v303);
  *(_QWORD *)v300 = v301;
  *(_QWORD *)(v300 + 8) = v302;
  *(_BYTE *)(v300 + 16) = v303;
  v304 = v299 & 0xFFFFFFFFFFFFFFF8;
  v305 = v298 & 0xFFFFFFFFFFFFFFF8;
  v306 = *(_QWORD *)(v305 + 16) >> 60;
  if (!(4 * (v306 & 3)) || ((v306 >> 2) & 0xFFFFFFF3 | (4 * (v306 & 3))) == 0xF)
  {
    v310 = (uint64_t *)(v305 + 8);
    *(_QWORD *)v304 = *(_QWORD *)v305;
    v311 = *(_QWORD *)(v305 + 16);
    if (v311 >> 60 == 15)
    {
      *(_OWORD *)(v304 + 8) = *(_OWORD *)v310;
    }
    else
    {
      v312 = *v310;
      sub_23AAAE668(*v310, *(_QWORD *)(v305 + 16));
      *(_QWORD *)(v304 + 8) = v312;
      *(_QWORD *)(v304 + 16) = v311;
    }
    v313 = *(_OWORD *)(v305 + 24);
    *(_BYTE *)(v304 + 40) = *(_BYTE *)(v305 + 40);
    *(_OWORD *)(v304 + 24) = v313;
    *(_QWORD *)(v304 + 48) = *(_QWORD *)(v305 + 48);
  }
  else
  {
    v307 = *(_OWORD *)v305;
    v308 = *(_OWORD *)(v305 + 16);
    v309 = *(_OWORD *)(v305 + 32);
    *(_QWORD *)(v304 + 48) = *(_QWORD *)(v305 + 48);
    *(_OWORD *)(v304 + 16) = v308;
    *(_OWORD *)(v304 + 32) = v309;
    *(_OWORD *)v304 = v307;
  }
  v314 = (_QWORD *)((v304 + 63) & 0xFFFFFFFFFFFFF8);
  v315 = (void **)((v305 + 63) & 0xFFFFFFFFFFFFFFF8);
  v316 = *v315;
  *v314 = *v315;
  *(_QWORD *)(((unint64_t)v314 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v315 + 15) & 0xFFFFFFFFFFFFF8);
  *((_BYTE *)v277 + v374) = *((_BYTE *)v278 + v374);
  v317 = ((unint64_t)v277 + v374) & 0xFFFFFFFFFFFFFFF8;
  v318 = ((unint64_t)v278 + v374) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v317 + 8) = *(_QWORD *)(v318 + 8);
  v319 = (_OWORD *)((v317 + 23) & 0xFFFFFFFFFFFFFFF8);
  v320 = (_OWORD *)((v318 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v319 = *v320;
  v321 = ((unint64_t)v319 + 23) & 0xFFFFFFFFFFFFFFF8;
  v322 = ((unint64_t)v320 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v321 = *(_QWORD *)v322;
  *(_BYTE *)(v321 + 8) = *(_BYTE *)(v322 + 8);
  *(_QWORD *)(((unint64_t)v319 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v320 + 39) & 0xFFFFFFFFFFFFF8);
  v323 = v316;
  swift_bridgeObjectRetain();
  return v41;
}

unint64_t sub_23AB26E28(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t result;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  BOOL v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unsigned int (*v120)(unint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  unsigned int (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v116 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v2 = *(_DWORD *)(v116 + 80) & 0xF8;
  v136 = swift_getAssociatedTypeWitness();
  v137 = *(_QWORD *)(v136 - 8);
  v3 = *(_DWORD *)(v137 + 80) & 0xF8;
  v129 = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(v129 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = v3 | v5;
  v7 = v3 | v5 | 7;
  v8 = v6 | v2;
  v147 = swift_getAssociatedTypeWitness();
  v117 = *(_QWORD *)(v147 - 8);
  v9 = *(_DWORD *)(v117 + 80) & 0xF8;
  v135 = swift_getAssociatedTypeWitness();
  v146 = *(_QWORD *)(v135 - 8);
  v10 = *(_DWORD *)(v146 + 80) & 0xF8;
  v123 = swift_getAssociatedTypeWitness();
  v139 = *(_QWORD *)(v123 - 8);
  v142 = *(unsigned __int8 *)(v139 + 80);
  v11 = v10 | v142 | 7;
  v12 = v11 | v9;
  v13 = v8 | v12;
  v110 = v13 + 9;
  v133 = v13;
  v108 = v13 + 9 + a1;
  v14 = v108 & ~v13;
  v130 = AssociatedTypeWitness;
  v126 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
  if (!v126(v14, 1, AssociatedTypeWitness))
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v14, AssociatedTypeWitness);
  if (*(_DWORD *)(v116 + 84))
    v15 = *(_QWORD *)(v116 + 64);
  else
    v15 = *(_QWORD *)(v116 + 64) + 1;
  v145 = v7 + 9;
  v16 = (v7 + 9 + (((((v14 | 7) + v15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  v17 = *(unsigned int *)(v137 + 84);
  v104 = *(_DWORD *)(v4 + 84);
  if (v17 <= v104)
    v18 = *(_DWORD *)(v4 + 84);
  else
    v18 = *(_DWORD *)(v137 + 84);
  if (v18 <= 0x7FFFFFFE)
    v19 = 2147483646;
  else
    v19 = v18;
  v20 = *(_QWORD *)(v137 + 64) + 7;
  v128 = ~v5;
  v127 = v5 + 8;
  v112 = *(_QWORD *)(v4 + 64) + 7;
  v21 = ((((v112 + ((v5 + 8 + (v20 & 0xFFFFFFFFFFFFFFF8)) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v141 = v19;
  v114 = v4;
  v115 = v20;
  v125 = *(_DWORD *)(v137 + 84);
  v106 = v18;
  v111 = *(_DWORD *)(v116 + 84);
  v102 = (((v112 + ((v5 + 8 + (v20 & 0xFFFFFFFFFFFFFFF8)) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if ((_DWORD)v17 == v19)
  {
    v22 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v137 + 48))((v7 + 9 + (((((v14 | 7) + v15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v7, v17, v136);
LABEL_20:
    v25 = v142;
    if (v22)
      goto LABEL_23;
    v23 = (uint64_t *)((v115 + v16) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_22;
  }
  v23 = (uint64_t *)((v20 + v16) & 0xFFFFFFFFFFFFFFF8);
  if (v18 > 0x7FFFFFFE)
  {
    v22 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v4 + 48))(((unint64_t)v23 + v127) & v128, v104, v129);
    goto LABEL_20;
  }
  v24 = *v23;
  if ((unint64_t)*v23 >= 0xFFFFFFFF)
    LODWORD(v24) = -1;
  v25 = v142;
  if ((v24 + 1) < 2)
  {
LABEL_22:
    (*(void (**)(unint64_t, uint64_t))(v137 + 8))((v7 + 9 + (((((v14 | 7) + v15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v7, v136);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v114 + 8))(((unint64_t)v23 + v127) & v128, v129);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_23:
  v143 = ~v7;
  sub_23AAAEE10(*(void **)((v21 + v16 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v21 + v16 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v21 + v16 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
  v26 = (v21 + v16 + 34) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_QWORD *)(v26 + 16);
  v28 = ((4 * (v27 >> 60)) & 0xC | ((v27 >> 60) >> 2)) != 0xF && ((4 * (v27 >> 60)) & 0xC) != 0;
  if (v27 >> 60 != 15 && !v28)
    sub_23AAAE53C(*(_QWORD *)(v26 + 8), v27);

  v131 = v15 + 7;
  v119 = v21;
  v29 = ((((((((v145 + ((((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v143) + v21 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v120 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v117 + 48);
  if (!v120((v14 + v12 + v29) & ~v12, 1, v147))
    (*(void (**)(unint64_t, uint64_t))(v117 + 8))((v14 + v12 + v29) & ~v12, v147);
  if (*(_DWORD *)(v117 + 84))
    v30 = *(_QWORD *)(v117 + 64);
  else
    v30 = *(_QWORD *)(v117 + 64) + 1;
  v31 = v11 + 9;
  v32 = v11;
  v33 = (v11 + 9 + ((((((v14 + v12 + v29) & ~v12 | 7) + v30) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v11;
  v34 = *(_DWORD *)(v146 + 84);
  v103 = *(_DWORD *)(v139 + 84);
  if (v34 <= v103)
    v35 = *(_DWORD *)(v139 + 84);
  else
    v35 = *(_DWORD *)(v146 + 84);
  if (v35 <= 0x7FFFFFFE)
    v36 = 2147483646;
  else
    v36 = v35;
  v37 = *(_QWORD *)(v146 + 64) + 7;
  v122 = ~v25;
  v121 = v25 + 8;
  v38 = (((*(_QWORD *)(v139 + 64) + 7 + ((v25 + 8 + (v37 & 0xFFFFFFFFFFFFFFF8)) & ~v25)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v39 = v38 + 16;
  v138 = v36;
  v105 = v35;
  v109 = *(_DWORD *)(v117 + 84);
  v101 = v38;
  v107 = *(_DWORD *)(v146 + 84);
  if (v34 == v36)
  {
    if ((*(unsigned int (**)(unint64_t))(v146 + 48))(v33))
      goto LABEL_51;
LABEL_49:
    v40 = (uint64_t *)((v37 + v33) & 0xFFFFFFFFFFFFFFF8);
LABEL_50:
    (*(void (**)(unint64_t, uint64_t))(v146 + 8))(v33, v135);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v139 + 8))(((unint64_t)v40 + v121) & v122, v123);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  v40 = (uint64_t *)((v37 + v33) & 0xFFFFFFFFFFFFFFF8);
  if (v35 > 0x7FFFFFFE)
  {
    if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v139 + 48))(((unint64_t)v40 + v121) & v122, v103, v123))
    {
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  v41 = *v40;
  if ((unint64_t)*v40 >= 0xFFFFFFFF)
    LODWORD(v41) = -1;
  if ((v41 + 1) < 2)
    goto LABEL_50;
LABEL_51:
  v113 = v37;
  v132 = ~v133;
  v42 = ~v12;
  v140 = ~v32;
  sub_23AAAEE10(*(void **)((v39 + v33 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v39 + v33 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v39 + v33 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
  v43 = (v39 + v33 + 34) & 0xFFFFFFFFFFFFFFF8;
  v44 = *(_QWORD *)(v43 + 16);
  v45 = ((4 * (v44 >> 60)) & 0xC | ((v44 >> 60) >> 2)) != 0xF && ((4 * (v44 >> 60)) & 0xC) != 0;
  if (v44 >> 60 != 15 && !v45)
    sub_23AAAE53C(*(_QWORD *)(v43 + 8), v44);

  v124 = v30 + 7;
  v118 = v39;
  swift_bridgeObjectRelease();
  v46 = v29 + v12;
  v47 = ((((((((v31 + ((((v30 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v140) + v39 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v48 = ((((((v47 + (v46 & v42)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  v49 = ((v108 | v133) + v48) & v132;
  v50 = v130;
  if (!v126(v49, 1, v130))
    (*(void (**)(unint64_t, uint64_t))(v116 + 8))(v49, v130);
  v51 = (v145 + ((((v131 + v49) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v143;
  if (v125 == v141)
  {
    if ((*(unsigned int (**)(unint64_t))(v137 + 48))((v145
                                                                       + ((((v131 + v49) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v143))
      goto LABEL_70;
LABEL_68:
    v52 = (uint64_t *)((v115 + v51) & 0xFFFFFFFFFFFFFFF8);
LABEL_69:
    (*(void (**)(unint64_t, uint64_t))(v137 + 8))(v51, v136);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v114 + 8))(((unint64_t)v52 + v127) & v128, v129);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_70;
  }
  v52 = (uint64_t *)((v115 + v51) & 0xFFFFFFFFFFFFFFF8);
  if (v106 > 0x7FFFFFFE)
  {
    if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v114 + 48))(((unint64_t)v52 + v127) & v128, v104, v129))
    {
      goto LABEL_70;
    }
    goto LABEL_68;
  }
  v53 = *v52;
  if ((unint64_t)*v52 >= 0xFFFFFFFF)
    LODWORD(v53) = -1;
  if ((v53 + 1) < 2)
    goto LABEL_69;
LABEL_70:
  sub_23AAAEE10(*(void **)((v51 + v119 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v51 + v119 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v51 + v119 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
  v54 = (v51 + v119 + 34) & 0xFFFFFFFFFFFFFFF8;
  v55 = *(_QWORD *)(v54 + 16);
  v56 = ((4 * (v55 >> 60)) & 0xC | ((v55 >> 60) >> 2)) != 0xF && ((4 * (v55 >> 60)) & 0xC) != 0;
  if (v55 >> 60 != 15 && !v56)
    sub_23AAAE53C(*(_QWORD *)(v54 + 8), v55);

  v134 = v46;
  v57 = v46 + v49;
  v58 = v42;
  v59 = v57 & v42;
  if (!v120(v57 & v42, 1, v147))
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v59, v147);
  v60 = v31;
  v61 = (v31 + ((((v124 + v59) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v140;
  if (v107 == v138)
  {
    if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v146 + 48))(v61, v107, v135))
      goto LABEL_89;
LABEL_87:
    v62 = (uint64_t *)((v113 + v61) & 0xFFFFFFFFFFFFFFF8);
LABEL_88:
    (*(void (**)(unint64_t, uint64_t))(v146 + 8))(v61, v135);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v139 + 8))(((unint64_t)v62 + v121) & v122, v123);
    v50 = v130;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_89;
  }
  v62 = (uint64_t *)((v113 + v61) & 0xFFFFFFFFFFFFFFF8);
  if (v105 > 0x7FFFFFFE)
  {
    if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v139 + 48))(((unint64_t)v62 + v121) & v122, v103, v123))
    {
      goto LABEL_89;
    }
    goto LABEL_87;
  }
  v63 = *v62;
  if ((unint64_t)*v62 >= 0xFFFFFFFF)
    LODWORD(v63) = -1;
  if ((v63 + 1) < 2)
    goto LABEL_88;
LABEL_89:
  sub_23AAAEE10(*(void **)((v61 + v118 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v61 + v118 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v61 + v118 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
  v64 = (v61 + v118 + 34) & 0xFFFFFFFFFFFFFFF8;
  v65 = *(_QWORD *)(v64 + 16);
  v66 = ((4 * (v65 >> 60)) & 0xC | ((v65 >> 60) >> 2)) != 0xF && ((4 * (v65 >> 60)) & 0xC) != 0;
  if (v65 >> 60 != 15 && !v66)
    sub_23AAAE53C(*(_QWORD *)(v64 + 8), v65);

  swift_bridgeObjectRelease();
  v67 = (v110 + ((((v49 + v48) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & v132;
  if (v111)
    v68 = v111 - 1;
  else
    v68 = 0;
  if (v68 <= v141 - 1)
    v69 = v141 - 1;
  else
    v69 = v68;
  if (v69 <= 0x7FFFFFFE)
    v70 = 2147483646;
  else
    v70 = v69;
  if (v109)
    v71 = v109 - 1;
  else
    v71 = 0;
  if (v71 <= v138 - 1)
    v72 = v138 - 1;
  else
    v72 = v71;
  if (v72 <= 0x7FFFFFFE)
    v73 = 2147483646;
  else
    v73 = v72;
  if (v73 <= v70)
    v74 = v70;
  else
    v74 = v73;
  if (v74 <= 0x7FFFFFFF)
    v74 = 0x7FFFFFFF;
  v75 = v60;
  if (v70 == v74)
  {
    if (v68 == v70)
    {
      v76 = v58;
      if (v111 < 2)
        goto LABEL_159;
      result = ((uint64_t (*)(unint64_t, _QWORD, uint64_t))v126)(v67, v111, v50);
LABEL_126:
      if (result >= 2)
        return result;
      goto LABEL_159;
    }
    result = (v145 + ((((v131 + v67) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v143;
    if (v141 - 1 == v70)
    {
      if (v125 == v141)
      {
        result = (*(uint64_t (**)(unint64_t))(v137 + 48))(result);
      }
      else
      {
        v79 = (unint64_t *)((v115 + result) & 0xFFFFFFFFFFFFFFF8);
        if (v106 <= 0x7FFFFFFE)
        {
          v80 = *v79;
          if (v80 >= 0xFFFFFFFF)
            result = 0xFFFFFFFFLL;
          else
            result = v80;
          v76 = v58;
          if ((result + 1) < 2)
            goto LABEL_159;
          goto LABEL_158;
        }
        result = (*(uint64_t (**)(unint64_t))(v114 + 48))(((unint64_t)v79 + v127) & v128);
      }
      v76 = v58;
LABEL_158:
      if (result >= 2)
        return result;
      goto LABEL_159;
    }
    v78 = *(_QWORD *)((((v102 + result + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
    if (v78 >= 0xFFFFFFFF)
      LODWORD(v78) = -1;
    v76 = v58;
    if ((v78 + 1) < 2)
      goto LABEL_159;
  }
  else
  {
    v76 = v58;
    result = (v134 + v67) & v58;
    if (v73 != v74)
    {
      if (*(_QWORD *)(((result + v47) & 0xFFFFFFFFFFFFF8) + 8) < 0xFFFFFFFFuLL)
        return result;
LABEL_159:
      if (!v126(v67, 1, v50))
        (*(void (**)(unint64_t, uint64_t))(v116 + 8))(v67, v50);
      v84 = (v145 + ((((v131 + v67) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v143;
      if (v125 == v141)
      {
        if ((*(unsigned int (**)(unint64_t))(v137 + 48))((v145
                                                                           + ((((v131 + v67) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v143))
          goto LABEL_172;
      }
      else
      {
        v85 = (uint64_t *)((v115 + v84) & 0xFFFFFFFFFFFFFFF8);
        if (v106 <= 0x7FFFFFFE)
        {
          v86 = *v85;
          if ((unint64_t)*v85 >= 0xFFFFFFFF)
            LODWORD(v86) = -1;
          if ((v86 + 1) >= 2)
          {
LABEL_172:
            v87 = v84 + v119;
            sub_23AAAEE10(*(void **)((v87 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v87 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v87 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
            v88 = (v87 + 34) & 0xFFFFFFFFFFFFFFF8;
            v89 = *(_QWORD *)(v88 + 16);
            v90 = ((4 * (v89 >> 60)) & 0xC | ((v89 >> 60) >> 2)) != 0xF && ((4 * (v89 >> 60)) & 0xC) != 0;
            if (v89 >> 60 != 15 && !v90)
              sub_23AAAE53C(*(_QWORD *)(v88 + 8), v89);

            v91 = (v134 + v67) & v76;
            if (!v120(v91, 1, v147))
              (*(void (**)(unint64_t, uint64_t))(v117 + 8))(v91, v147);
            v92 = (v75 + ((((v124 + v91) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v140;
            if (v107 == v138)
            {
              v93 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v146 + 48))((v75 + ((((v124 + v91) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v140, v107, v135);
            }
            else
            {
              v94 = (uint64_t *)((v113 + v92) & 0xFFFFFFFFFFFFFFF8);
              if (v105 <= 0x7FFFFFFE)
              {
                v95 = *v94;
                if ((unint64_t)*v94 >= 0xFFFFFFFF)
                  LODWORD(v95) = -1;
                v96 = v118;
                if ((v95 + 1) >= 2)
                  goto LABEL_191;
                goto LABEL_190;
              }
              v93 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v139 + 48))(((unint64_t)v94 + v121) & v122, v103, v123);
            }
            v96 = v118;
            if (v93)
            {
LABEL_191:
              v97 = v92 + v96;
              sub_23AAAEE10(*(void **)((v97 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v97 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v97 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
              v98 = (v97 + 34) & 0xFFFFFFFFFFFFFFF8;
              v99 = *(_QWORD *)(v98 + 16);
              v100 = ((4 * (v99 >> 60)) & 0xC | ((v99 >> 60) >> 2)) != 0xF
                  && ((4 * (v99 >> 60)) & 0xC) != 0;
              if (v99 >> 60 != 15 && !v100)
                sub_23AAAE53C(*(_QWORD *)(v98 + 8), v99);

              return swift_bridgeObjectRelease();
            }
            v94 = (uint64_t *)((v113 + v92) & 0xFFFFFFFFFFFFFFF8);
LABEL_190:
            (*(void (**)(unint64_t, uint64_t))(v146 + 8))(v92, v135);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v139 + 8))(((unint64_t)v94 + v121) & v122, v123);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_191;
          }
LABEL_171:
          (*(void (**)(unint64_t, uint64_t))(v137 + 8))(v84, v136);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v114 + 8))(((unint64_t)v85 + v127) & v128, v129);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_172;
        }
        if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v114 + 48))(((unint64_t)v85 + v127) & v128, v104, v129))
        {
          goto LABEL_172;
        }
      }
      v85 = (uint64_t *)((v115 + v84) & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_171;
    }
    if (v71 == v73)
    {
      if (v109 < 2)
        goto LABEL_159;
      result = ((uint64_t (*)(unint64_t, _QWORD, uint64_t))v120)(result, v109, v147);
      goto LABEL_126;
    }
    result = (v75 + ((((v124 + result) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v140;
    if (v138 - 1 == v73)
    {
      if (v107 == v138)
      {
        result = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v146 + 48))(result, v107, v135);
      }
      else
      {
        v82 = (unint64_t *)((v113 + result) & 0xFFFFFFFFFFFFFFF8);
        if (v105 <= 0x7FFFFFFE)
        {
          v83 = *v82;
          if (v83 >= 0xFFFFFFFF)
            result = 0xFFFFFFFFLL;
          else
            result = v83;
          if ((result + 1) < 2)
            goto LABEL_159;
          goto LABEL_158;
        }
        result = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v139 + 48))(((unint64_t)v82 + v121) & v122, v103, v123);
      }
      if (result >= 2)
        return result;
      goto LABEL_159;
    }
    v81 = *(_QWORD *)((((v101 + result + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
    if (v81 >= 0xFFFFFFFF)
      LODWORD(v81) = -1;
    if ((v81 + 1) < 2)
      goto LABEL_159;
  }
  return result;
}

uint64_t sub_23AB27F24(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  const void *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  size_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(unint64_t, unint64_t, uint64_t);
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t *v60;
  unint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  uint64_t v69;
  __int128 v70;
  _QWORD *v71;
  void **v72;
  void *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int (*v77)(const void *, uint64_t, uint64_t);
  id v78;
  unsigned int v79;
  size_t v80;
  size_t v81;
  size_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  void (*v100)(unint64_t, unint64_t, uint64_t);
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  unint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  void *v112;
  void *v113;
  char v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  __int128 v126;
  _QWORD *v127;
  void **v128;
  void *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  _OWORD *v133;
  _OWORD *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  const void *v140;
  id v141;
  _QWORD *v142;
  _QWORD *v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  unint64_t v152;
  void (*v153)(unint64_t, unint64_t, uint64_t);
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  unint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  void *v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  __int128 v175;
  _QWORD *v176;
  void **v177;
  void *v178;
  void *v179;
  const void *v180;
  id v181;
  _QWORD *v182;
  _QWORD *v183;
  unint64_t v184;
  unint64_t v185;
  void *v186;
  char *v187;
  _QWORD *v188;
  uint64_t v189;
  size_t v190;
  _QWORD *v191;
  unint64_t v192;
  unint64_t v193;
  void (*v194)(unint64_t, unint64_t, uint64_t);
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _BYTE *v199;
  _BYTE *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  unint64_t v204;
  void *v205;
  void *v206;
  char v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  uint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  __int128 v217;
  _QWORD *v218;
  void **v219;
  void *v220;
  unint64_t v221;
  unint64_t v222;
  _OWORD *v223;
  _OWORD *v224;
  unint64_t v225;
  unint64_t v226;
  _OWORD *v227;
  _OWORD *v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  const void *v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  int v240;
  id v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  unsigned int v245;
  unint64_t v246;
  unint64_t v247;
  unsigned int v248;
  unint64_t v249;
  unint64_t v250;
  BOOL v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  unint64_t v259;
  unint64_t v260;
  void *v261;
  char *v262;
  _QWORD *v263;
  uint64_t v264;
  size_t v265;
  _QWORD *v266;
  unint64_t v267;
  unint64_t v268;
  void (*v269)(unint64_t, unint64_t, uint64_t);
  _QWORD *v270;
  _QWORD *v271;
  _QWORD *v272;
  _QWORD *v273;
  _BYTE *v274;
  _BYTE *v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  unint64_t v279;
  void *v280;
  void *v281;
  char v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  uint64_t v289;
  uint64_t *v290;
  unint64_t v291;
  uint64_t v292;
  __int128 v293;
  _QWORD *v294;
  void **v295;
  void *v296;
  void *v297;
  const void *v298;
  id v299;
  _QWORD *v300;
  _QWORD *v301;
  unint64_t v302;
  unint64_t v303;
  void *v304;
  const void *v305;
  uint64_t *v306;
  uint64_t v307;
  size_t v308;
  _QWORD *v309;
  unint64_t v310;
  unint64_t v311;
  void (*v312)(unint64_t, unint64_t, uint64_t);
  _QWORD *v313;
  _QWORD *v314;
  _QWORD *v315;
  _QWORD *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  void *v321;
  void *v322;
  char v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  uint64_t *v330;
  unint64_t v331;
  uint64_t v332;
  __int128 v333;
  _QWORD *v334;
  void **v335;
  void *v336;
  unint64_t v337;
  unint64_t v338;
  _OWORD *v339;
  _OWORD *v340;
  unint64_t v341;
  unint64_t v342;
  id v343;
  unint64_t v345;
  unint64_t v346;
  size_t __n;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int v360;
  unsigned int v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  unsigned int (*v365)(const void *, uint64_t, uint64_t);
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  size_t v370;
  unsigned int (*v371)(unint64_t, uint64_t, uint64_t);
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  size_t v377;
  unint64_t v378;
  uint64_t v379;
  void *v380;
  uint64_t v381;
  size_t v382;
  size_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  size_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  size_t v404;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v363 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_DWORD *)(v363 + 80) & 0xF8;
  v385 = swift_getAssociatedTypeWitness();
  v388 = *(_QWORD *)(v385 - 8);
  v6 = *(_DWORD *)(v388 + 80) & 0xF8;
  v375 = swift_getAssociatedTypeWitness();
  v396 = *(_QWORD *)(v375 - 8);
  v399 = *(unsigned __int8 *)(v396 + 80);
  v403 = v6 | v399 | 7;
  v7 = v6 | v399 | v5;
  v387 = swift_getAssociatedTypeWitness();
  v362 = *(_QWORD *)(v387 - 8);
  v8 = *(_DWORD *)(v362 + 80) & 0xF8;
  v384 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v384 - 8);
  v10 = *(_DWORD *)(v9 + 80) & 0xF8;
  v368 = swift_getAssociatedTypeWitness();
  v391 = *(_QWORD *)(v368 - 8);
  v401 = *(unsigned __int8 *)(v391 + 80);
  v392 = v10 | v401 | 7;
  v11 = v392 | v8;
  v12 = v7 | v11;
  v351 = a1;
  v13 = (v12 + 9 + a1) & ~v12;
  v14 = v12 + 9 + a2;
  v379 = v12;
  v15 = v14 & ~v12;
  v371 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v363 + 48);
  v372 = AssociatedTypeWitness;
  v354 = v14;
  v355 = v12 + 9;
  v353 = v12 + 9 + a1;
  if (v371(v15, 1, AssociatedTypeWitness))
  {
    v16 = *(_DWORD *)(v363 + 84);
    v17 = *(_QWORD *)(v363 + 64);
    if (v16)
      v18 = *(_QWORD *)(v363 + 64);
    else
      v18 = v17 + 1;
    memcpy((void *)v13, (const void *)v15, v18);
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v363 + 16))(v13, v15, AssociatedTypeWitness);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v363 + 56))(v13, 0, 1, AssociatedTypeWitness);
    v16 = *(_DWORD *)(v363 + 84);
    v17 = *(_QWORD *)(v363 + 64);
  }
  v19 = v399;
  if (v16)
    v20 = v17;
  else
    v20 = v17 + 1;
  v383 = v20;
  v21 = (_QWORD *)(((v15 | 7) + v20) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((v13 | 7) + v20) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v21;
  v23 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  v25 = v403;
  v26 = (char *)((v25 + 9 + v23) & ~v25);
  v398 = v403 + 9;
  v27 = (const void *)((v25 + 9 + v24) & ~v25);
  v28 = *(_DWORD *)(v388 + 84);
  v349 = *(_DWORD *)(v396 + 84);
  if (v28 <= v349)
    v29 = *(_DWORD *)(v396 + 84);
  else
    v29 = *(_DWORD *)(v388 + 84);
  if (v29 <= 0x7FFFFFFE)
    v30 = 2147483646;
  else
    v30 = v29;
  v31 = *(_QWORD *)(v388 + 64) + 7;
  v374 = ~v399;
  v373 = v399 + 8;
  v358 = *(_QWORD *)(v396 + 64) + 7;
  v32 = ((((v358 + ((v399 + 8 + (v31 & 0xFFFFFFFFFFFFFFF8)) & ~v399)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v395 = v30;
  v386 = v9;
  v400 = v32;
  v390 = v31;
  v369 = *(_DWORD *)(v388 + 84);
  v350 = v29;
  v356 = v16;
  v346 = (((v358 + ((v19 + 8 + (v31 & 0xFFFFFFFFFFFFFFF8)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v28 == v30)
  {
    if (!(*(unsigned int (**)(const void *))(v388 + 48))(v27))
      goto LABEL_26;
LABEL_25:
    memcpy(v26, v27, v32);
    goto LABEL_28;
  }
  v33 = (uint64_t *)(((unint64_t)v27 + v31) & 0xFFFFFFFFFFFFFFF8);
  if (v29 <= 0x7FFFFFFE)
  {
    v34 = *v33;
    if ((unint64_t)*v33 >= 0xFFFFFFFF)
      LODWORD(v34) = -1;
    if ((v34 + 1) < 2)
      goto LABEL_27;
    goto LABEL_25;
  }
  if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v396 + 48))(((unint64_t)v33 + v373) & v374, v349, v375))
  {
    goto LABEL_25;
  }
LABEL_26:
  v33 = (uint64_t *)(((unint64_t)v27 + v390) & 0xFFFFFFFFFFFFFFF8);
LABEL_27:
  (*(void (**)(char *, const void *, uint64_t))(v388 + 16))(v26, v27, v385);
  v35 = (_QWORD *)((unint64_t)&v26[v390] & 0xFFFFFFFFFFFFFFF8);
  *v35 = *v33;
  v36 = ((unint64_t)v35 + v373) & v374;
  v37 = ((unint64_t)v33 + v373) & v374;
  v38 = *(void (**)(unint64_t, unint64_t, uint64_t))(v396 + 16);
  swift_bridgeObjectRetain();
  v38(v36, v37, v375);
  v32 = v400;
  v39 = (_QWORD *)((v358 + v36) & 0xFFFFFFFFFFFFF8);
  v40 = (_QWORD *)((v358 + v37) & 0xFFFFFFFFFFFFF8);
  *v39 = *v40;
  v41 = (_QWORD *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
  v42 = (_QWORD *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v41 = *v42;
  v41[1] = v42[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_28:
  v43 = (_BYTE *)(((unint64_t)v27 + v32) | 1);
  v44 = (_BYTE *)(((unint64_t)v27 + v32) | 2);
  v45 = (uint64_t)v27 + v32 + 10;
  v47 = (uint64_t)v27 + v32 + 34;
  v46 = *((_BYTE *)v27 + v32);
  v48 = (_BYTE *)((unint64_t)&v26[v32] | 1);
  v49 = (_BYTE *)((unint64_t)&v26[v32] | 2);
  v50 = (uint64_t)&v26[v32 + 10];
  v51 = &v26[v32];
  *v51 = v46;
  *v48 = *v43;
  v397 = ~v403;
  *v49 = *v44;
  v52 = v50 & 0xFFFFFFFFFFFFFFF8;
  v53 = *(void **)(v45 & 0xFFFFFFFFFFFFFFF8);
  v54 = *(void **)((v45 & 0xFFFFFFFFFFFFFFF8) + 8);
  v55 = *(_BYTE *)((v45 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_23AAAE478(v53, v54, v55);
  *(_QWORD *)v52 = v53;
  *(_QWORD *)(v52 + 8) = v54;
  *(_BYTE *)(v52 + 16) = v55;
  v56 = (unint64_t)(v51 + 34) & 0xFFFFFFFFFFFFFFF8;
  v57 = v47 & 0xFFFFFFFFFFFFFFF8;
  v58 = *(_QWORD *)(v57 + 16) >> 60;
  if (4 * (v58 & 3))
    v59 = ((v58 >> 2) & 0xFFFFFFF3 | (4 * (v58 & 3))) == 15;
  else
    v59 = 1;
  if (v59)
  {
    v60 = (uint64_t *)(v57 + 8);
    *(_QWORD *)v56 = *(_QWORD *)v57;
    v61 = *(_QWORD *)(v57 + 16);
    if (v61 >> 60 == 15)
    {
      *(_OWORD *)(v56 + 8) = *(_OWORD *)v60;
    }
    else
    {
      v69 = *v60;
      sub_23AAAE668(*v60, *(_QWORD *)(v57 + 16));
      *(_QWORD *)(v56 + 8) = v69;
      *(_QWORD *)(v56 + 16) = v61;
    }
    v66 = v386;
    v65 = v387;
    v67 = v362;
    v68 = v400;
    v70 = *(_OWORD *)(v57 + 24);
    *(_BYTE *)(v56 + 40) = *(_BYTE *)(v57 + 40);
    *(_OWORD *)(v56 + 24) = v70;
    *(_QWORD *)(v56 + 48) = *(_QWORD *)(v57 + 48);
  }
  else
  {
    v62 = *(_OWORD *)v57;
    v63 = *(_OWORD *)(v57 + 16);
    v64 = *(_OWORD *)(v57 + 32);
    *(_QWORD *)(v56 + 48) = *(_QWORD *)(v57 + 48);
    *(_OWORD *)(v56 + 16) = v63;
    *(_OWORD *)(v56 + 32) = v64;
    *(_OWORD *)v56 = v62;
    v66 = v386;
    v65 = v387;
    v67 = v362;
    v68 = v400;
  }
  v71 = (_QWORD *)((v56 + 63) & 0xFFFFFFFFFFFFF8);
  v72 = (void **)((v57 + 63) & 0xFFFFFFFFFFFFFFF8);
  v73 = *v72;
  *v71 = *v72;
  *(_QWORD *)(((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFF8);
  v377 = v383 + 7;
  v74 = ((((((((v398 + ((((v383 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v397) + v68 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v75 = (v13 + v11 + v74) & ~v11;
  v76 = (v15 + v11 + v74) & ~v11;
  v77 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v67 + 48);
  v78 = v73;
  v365 = v77;
  if (v77((const void *)v76, 1, v65))
  {
    v79 = *(_DWORD *)(v67 + 84);
    v80 = *(_QWORD *)(v67 + 64);
    if (v79)
      v81 = *(_QWORD *)(v67 + 64);
    else
      v81 = v80 + 1;
    memcpy((void *)v75, (const void *)v76, v81);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v67 + 16))(v75, v76, v65);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56))(v75, 0, 1, v65);
    v79 = *(_DWORD *)(v67 + 84);
    v80 = *(_QWORD *)(v67 + 64);
  }
  v360 = v79;
  if (v79)
    v82 = v80;
  else
    v82 = v80 + 1;
  v382 = v82;
  v83 = (_QWORD *)(((v76 | 7) + v82) & 0xFFFFFFFFFFFFFFF8);
  v84 = (_QWORD *)(((v75 | 7) + v82) & 0xFFFFFFFFFFFFFFF8);
  *v84 = *v83;
  v85 = ((unint64_t)v84 + 15) & 0xFFFFFFFFFFFFFFF8;
  v86 = ((unint64_t)v83 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v85 = *(_QWORD *)v86;
  *(_BYTE *)(v85 + 8) = *(_BYTE *)(v86 + 8);
  v87 = v392;
  v88 = (char *)((v87 + 9 + v85) & ~v87);
  v394 = v392 + 9;
  v89 = (char *)((v87 + 9 + v86) & ~v87);
  v90 = *(_DWORD *)(v66 + 84);
  v348 = *(_DWORD *)(v391 + 84);
  if (v90 <= v348)
    v91 = *(_DWORD *)(v391 + 84);
  else
    v91 = *(_DWORD *)(v66 + 84);
  if (v91 <= 0x7FFFFFFE)
    v92 = 2147483646;
  else
    v92 = v91;
  v93 = *(_QWORD *)(v66 + 64) + 7;
  v367 = ~v401;
  v366 = v401 + 8;
  v357 = *(_QWORD *)(v391 + 64) + 7;
  v404 = ((((v357 + ((v401 + 8 + (v93 & 0xFFFFFFFFFFFFFFF8)) & ~v401)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v389 = v92;
  v364 = *(_DWORD *)(v66 + 84);
  v376 = v93;
  v361 = v91;
  v345 = (((v357 + ((v401 + 8 + (v93 & 0xFFFFFFFFFFFFFFF8)) & ~v401)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v90 == v92)
  {
    if (!(*(unsigned int (**)(char *))(v66 + 48))(v89))
      goto LABEL_62;
  }
  else
  {
    v94 = (_QWORD *)((unint64_t)&v89[v93] & 0xFFFFFFFFFFFFFFF8);
    if (v91 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v391 + 48))(((unint64_t)v94 + v366) & v367, v348, v368))
      {
LABEL_62:
        v94 = (_QWORD *)((unint64_t)&v89[v93] & 0xFFFFFFFFFFFFFFF8);
LABEL_63:
        (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v88, v89, v384);
        v97 = (_QWORD *)((unint64_t)&v88[v93] & 0xFFFFFFFFFFFFFFF8);
        *v97 = *v94;
        v98 = ((unint64_t)v97 + v366) & v367;
        v99 = ((unint64_t)v94 + v366) & v367;
        v100 = *(void (**)(unint64_t, unint64_t, uint64_t))(v391 + 16);
        swift_bridgeObjectRetain();
        v100(v98, v99, v368);
        v101 = (_QWORD *)((v357 + v98) & 0xFFFFFFFFFFFFF8);
        v102 = (_QWORD *)((v357 + v99) & 0xFFFFFFFFFFFFF8);
        *v101 = *v102;
        v103 = (_QWORD *)(((unint64_t)v101 + 15) & 0xFFFFFFFFFFFFFFF8);
        v104 = (_QWORD *)(((unint64_t)v102 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v103 = *v104;
        v103[1] = v104[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v96 = v404;
        goto LABEL_64;
      }
    }
    else
    {
      v95 = *v94;
      if (*v94 >= 0xFFFFFFFFuLL)
        LODWORD(v95) = -1;
      if ((v95 + 1) < 2)
        goto LABEL_63;
    }
  }
  v96 = ((((v357 + ((v401 + 8 + (v93 & 0xFFFFFFFFFFFFFFF8)) & ~v401)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  memcpy(v88, v89, v404);
LABEL_64:
  v105 = (unint64_t)&v88[v96];
  v106 = (_BYTE *)((unint64_t)&v89[v96] | 1);
  v107 = (_BYTE *)((unint64_t)&v89[v96] | 2);
  v108 = (uint64_t)&v89[v96 + 10];
  v109 = &v89[v96];
  *(_BYTE *)v105 = *v109;
  v110 = v105 + 34;
  *(_BYTE *)(v105 | 1) = *v106;
  v381 = ~v379;
  v402 = ~v11;
  v393 = ~v392;
  *(_BYTE *)(v105 | 2) = *v107;
  v111 = (v105 + 10) & 0xFFFFFFFFFFFFFFF8;
  v112 = *(void **)(v108 & 0xFFFFFFFFFFFFFFF8);
  v113 = *(void **)((v108 & 0xFFFFFFFFFFFFFFF8) + 8);
  v114 = *(_BYTE *)((v108 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_23AAAE478(v112, v113, v114);
  *(_QWORD *)v111 = v112;
  *(_QWORD *)(v111 + 8) = v113;
  *(_BYTE *)(v111 + 16) = v114;
  v115 = v110 & 0xFFFFFFFFFFFFFFF8;
  v116 = (unint64_t)(v109 + 34) & 0xFFFFFFFFFFFFFFF8;
  v117 = *(_QWORD *)(v116 + 16) >> 60;
  if (!(4 * (v117 & 3)) || ((v117 >> 2) & 0xFFFFFFF3 | (4 * (v117 & 3))) == 0xF)
  {
    v123 = (uint64_t *)(v116 + 8);
    *(_QWORD *)v115 = *(_QWORD *)v116;
    v124 = *(_QWORD *)(v116 + 16);
    v121 = v388;
    if (v124 >> 60 == 15)
    {
      *(_OWORD *)(v115 + 8) = *(_OWORD *)v123;
    }
    else
    {
      v125 = *v123;
      sub_23AAAE668(*v123, *(_QWORD *)(v116 + 16));
      *(_QWORD *)(v115 + 8) = v125;
      *(_QWORD *)(v115 + 16) = v124;
    }
    v122 = v353;
    v126 = *(_OWORD *)(v116 + 24);
    *(_BYTE *)(v115 + 40) = *(_BYTE *)(v116 + 40);
    *(_OWORD *)(v115 + 24) = v126;
    *(_QWORD *)(v115 + 48) = *(_QWORD *)(v116 + 48);
  }
  else
  {
    v118 = *(_OWORD *)v116;
    v119 = *(_OWORD *)(v116 + 16);
    v120 = *(_OWORD *)(v116 + 32);
    *(_QWORD *)(v115 + 48) = *(_QWORD *)(v116 + 48);
    *(_OWORD *)(v115 + 16) = v119;
    *(_OWORD *)(v115 + 32) = v120;
    *(_OWORD *)v115 = v118;
    v121 = v388;
    v122 = v353;
  }
  v127 = (_QWORD *)((v115 + 63) & 0xFFFFFFFFFFFFF8);
  v128 = (void **)((v116 + 63) & 0xFFFFFFFFFFFFFFF8);
  v129 = *v128;
  *v127 = *v128;
  *(_QWORD *)(((unint64_t)v127 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v128 + 15) & 0xFFFFFFFFFFFFF8);
  v370 = v382 + 7;
  v130 = ((((((((v394 + ((((v382 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v393) + v404 + 34) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  *(_BYTE *)(v130 + v75) = *(_BYTE *)(v130 + v76);
  v131 = (v130 + v75) & 0xFFFFFFFFFFFFFFF8;
  v132 = (v130 + v76) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v131 + 8) = *(_QWORD *)(v132 + 8);
  v133 = (_OWORD *)((v131 + 23) & 0xFFFFFFFFFFFFFFF8);
  v134 = (_OWORD *)((v132 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v133 = *v134;
  v135 = ((unint64_t)v133 + 23) & 0xFFFFFFFFFFFFFFF8;
  v136 = ((unint64_t)v134 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v135 = *(_QWORD *)v136;
  *(_BYTE *)(v135 + 8) = *(_BYTE *)(v136 + 8);
  *(_QWORD *)(((unint64_t)v133 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v134 + 39) & 0xFFFFFFFFFFFFF8);
  v137 = v74 + v11;
  v378 = v130;
  v138 = (((((v130 + (v137 & v402)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  v139 = (void *)(((v122 | v379) + v138 + 8) & v381);
  v140 = (const void *)(((v354 | v379) + v138 + 8) & v381);
  v141 = v129;
  swift_bridgeObjectRetain();
  v352 = v138;
  if (v371((unint64_t)v140, 1, v372))
  {
    memcpy(v139, v140, v383);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v363 + 16))(v139, v140, v372);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v363 + 56))(v139, 0, 1, v372);
  }
  v142 = (_QWORD *)(((unint64_t)v139 + v377) & 0xFFFFFFFFFFFFF8);
  v143 = (_QWORD *)(((unint64_t)v140 + v377) & 0xFFFFFFFFFFFFFFF8);
  *v142 = *v143;
  v144 = ((unint64_t)v142 + 15) & 0xFFFFFFFFFFFFFFF8;
  v145 = ((unint64_t)v143 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v144 = *(_QWORD *)v145;
  *(_BYTE *)(v144 + 8) = *(_BYTE *)(v145 + 8);
  v146 = (char *)((v398 + v144) & v397);
  v147 = (char *)((v398 + v145) & v397);
  __n = v138 + 8;
  if (v369 == v395)
  {
    if (!(*(unsigned int (**)(unint64_t))(v121 + 48))((v398 + v145) & v397))
      goto LABEL_84;
  }
  else
  {
    v148 = (_QWORD *)((unint64_t)&v147[v390] & 0xFFFFFFFFFFFFFFF8);
    if (v350 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v396 + 48))(((unint64_t)v148 + v373) & v374, v349, v375))
      {
LABEL_84:
        v148 = (_QWORD *)((unint64_t)&v147[v390] & 0xFFFFFFFFFFFFFFF8);
LABEL_85:
        (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v146, v147, v385);
        v150 = (_QWORD *)((unint64_t)&v146[v390] & 0xFFFFFFFFFFFFFFF8);
        *v150 = *v148;
        v151 = ((unint64_t)v150 + v373) & v374;
        v152 = ((unint64_t)v148 + v373) & v374;
        v153 = *(void (**)(unint64_t, unint64_t, uint64_t))(v396 + 16);
        swift_bridgeObjectRetain();
        v153(v151, v152, v375);
        v154 = (_QWORD *)((v358 + v151) & 0xFFFFFFFFFFFFF8);
        v155 = (_QWORD *)((v358 + v152) & 0xFFFFFFFFFFFFF8);
        *v154 = *v155;
        v156 = (_QWORD *)(((unint64_t)v154 + 15) & 0xFFFFFFFFFFFFFFF8);
        v157 = (_QWORD *)(((unint64_t)v155 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v156 = *v157;
        v156[1] = v157[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_86;
      }
    }
    else
    {
      v149 = *v148;
      if (*v148 >= 0xFFFFFFFFuLL)
        LODWORD(v149) = -1;
      if ((v149 + 1) < 2)
        goto LABEL_85;
    }
  }
  memcpy(v146, v147, v400);
LABEL_86:
  v158 = (unint64_t)&v146[v400];
  v159 = (uint64_t)&v147[v400 + 10];
  v160 = &v147[v400];
  *(_BYTE *)v158 = v147[v400];
  v161 = (uint64_t)&v146[v400 + 34];
  *(_BYTE *)(v158 | 1) = *(_BYTE *)((unint64_t)&v147[v400] | 1);
  *(_BYTE *)(v158 | 2) = *(_BYTE *)((unint64_t)&v147[v400] | 2);
  v162 = (unint64_t)&v146[v400 + 10] & 0xFFFFFFFFFFFFFFF8;
  v163 = *(void **)(v159 & 0xFFFFFFFFFFFFFFF8);
  v164 = *(void **)((v159 & 0xFFFFFFFFFFFFFFF8) + 8);
  v165 = *(_BYTE *)((v159 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_23AAAE478(v163, v164, v165);
  *(_QWORD *)v162 = v163;
  *(_QWORD *)(v162 + 8) = v164;
  *(_BYTE *)(v162 + 16) = v165;
  v166 = v161 & 0xFFFFFFFFFFFFFFF8;
  v167 = (unint64_t)(v160 + 34) & 0xFFFFFFFFFFFFFFF8;
  v168 = *(_QWORD *)(v167 + 16) >> 60;
  if (!(4 * (v168 & 3)) || ((v168 >> 2) & 0xFFFFFFF3 | (4 * (v168 & 3))) == 0xF)
  {
    v172 = (uint64_t *)(v167 + 8);
    *(_QWORD *)v166 = *(_QWORD *)v167;
    v173 = *(_QWORD *)(v167 + 16);
    if (v173 >> 60 == 15)
    {
      *(_OWORD *)(v166 + 8) = *(_OWORD *)v172;
    }
    else
    {
      v174 = *v172;
      sub_23AAAE668(*v172, *(_QWORD *)(v167 + 16));
      *(_QWORD *)(v166 + 8) = v174;
      *(_QWORD *)(v166 + 16) = v173;
    }
    v175 = *(_OWORD *)(v167 + 24);
    *(_BYTE *)(v166 + 40) = *(_BYTE *)(v167 + 40);
    *(_OWORD *)(v166 + 24) = v175;
    *(_QWORD *)(v166 + 48) = *(_QWORD *)(v167 + 48);
  }
  else
  {
    v169 = *(_OWORD *)v167;
    v170 = *(_OWORD *)(v167 + 16);
    v171 = *(_OWORD *)(v167 + 32);
    *(_QWORD *)(v166 + 48) = *(_QWORD *)(v167 + 48);
    *(_OWORD *)(v166 + 16) = v170;
    *(_OWORD *)(v166 + 32) = v171;
    *(_OWORD *)v166 = v169;
  }
  v176 = (_QWORD *)((v166 + 63) & 0xFFFFFFFFFFFFF8);
  v177 = (void **)((v167 + 63) & 0xFFFFFFFFFFFFFFF8);
  v178 = *v177;
  *v176 = *v177;
  *(_QWORD *)(((unint64_t)v176 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v177 + 15) & 0xFFFFFFFFFFFFF8);
  v179 = (void *)(((unint64_t)v139 + v137) & v402);
  v180 = (const void *)(((unint64_t)v140 + v137) & v402);
  v181 = v178;
  if (v365(v180, 1, v387))
  {
    memcpy(v179, v180, v382);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v362 + 16))(v179, v180, v387);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v362 + 56))(v179, 0, 1, v387);
  }
  v182 = (_QWORD *)(((unint64_t)v179 + v370) & 0xFFFFFFFFFFFFF8);
  v183 = (_QWORD *)(((unint64_t)v180 + v370) & 0xFFFFFFFFFFFFFFF8);
  *v182 = *v183;
  v184 = ((unint64_t)v182 + 15) & 0xFFFFFFFFFFFFFFF8;
  v185 = ((unint64_t)v183 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v184 = *(_QWORD *)v185;
  *(_BYTE *)(v184 + 8) = *(_BYTE *)(v185 + 8);
  v186 = (void *)((v394 + v184) & v393);
  v187 = (char *)((v394 + v185) & v393);
  v359 = v137;
  if (v364 == v389)
  {
    if (!(*(unsigned int (**)(unint64_t))(v386 + 48))((v394 + v185) & v393))
      goto LABEL_106;
  }
  else
  {
    v188 = (_QWORD *)((unint64_t)&v187[v376] & 0xFFFFFFFFFFFFFFF8);
    if (v361 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v391 + 48))(((unint64_t)v188 + v366) & v367, v348, v368))
      {
LABEL_106:
        v188 = (_QWORD *)((unint64_t)&v187[v376] & 0xFFFFFFFFFFFFFFF8);
LABEL_107:
        (*(void (**)(void *, char *, uint64_t))(v386 + 16))(v186, v187, v384);
        v191 = (_QWORD *)(((unint64_t)v186 + v376) & 0xFFFFFFFFFFFFFFF8);
        *v191 = *v188;
        v192 = ((unint64_t)v191 + v366) & v367;
        v193 = ((unint64_t)v188 + v366) & v367;
        v194 = *(void (**)(unint64_t, unint64_t, uint64_t))(v391 + 16);
        swift_bridgeObjectRetain();
        v194(v192, v193, v368);
        v195 = (_QWORD *)((v357 + v192) & 0xFFFFFFFFFFFFF8);
        v196 = (_QWORD *)((v357 + v193) & 0xFFFFFFFFFFFFF8);
        *v195 = *v196;
        v197 = (_QWORD *)(((unint64_t)v195 + 15) & 0xFFFFFFFFFFFFFFF8);
        v198 = (_QWORD *)(((unint64_t)v196 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v197 = *v198;
        v197[1] = v198[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v190 = v404;
        goto LABEL_108;
      }
    }
    else
    {
      v189 = *v188;
      if (*v188 >= 0xFFFFFFFFuLL)
        LODWORD(v189) = -1;
      if ((v189 + 1) < 2)
        goto LABEL_107;
    }
  }
  v190 = v404;
  memcpy(v186, v187, v404);
LABEL_108:
  v199 = (_BYTE *)((unint64_t)&v187[v190] | 1);
  v200 = (_BYTE *)((unint64_t)&v187[v190] | 2);
  v201 = (uint64_t)&v187[v190 + 10];
  v202 = &v187[v190];
  *((_BYTE *)v186 + v190) = *v202;
  v203 = (uint64_t)v186 + v190 + 34;
  *(_BYTE *)(((unint64_t)v186 + v190) | 1) = *v199;
  *(_BYTE *)(((unint64_t)v186 + v190) | 2) = *v200;
  v204 = ((unint64_t)v186 + v190 + 10) & 0xFFFFFFFFFFFFFFF8;
  v205 = *(void **)(v201 & 0xFFFFFFFFFFFFFFF8);
  v206 = *(void **)((v201 & 0xFFFFFFFFFFFFFFF8) + 8);
  v207 = *(_BYTE *)((v201 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_23AAAE478(v205, v206, v207);
  *(_QWORD *)v204 = v205;
  *(_QWORD *)(v204 + 8) = v206;
  *(_BYTE *)(v204 + 16) = v207;
  v208 = v203 & 0xFFFFFFFFFFFFFFF8;
  v209 = (unint64_t)(v202 + 34) & 0xFFFFFFFFFFFFFFF8;
  v210 = *(_QWORD *)(v209 + 16) >> 60;
  if (!(4 * (v210 & 3)) || ((v210 >> 2) & 0xFFFFFFF3 | (4 * (v210 & 3))) == 0xF)
  {
    v214 = (uint64_t *)(v209 + 8);
    *(_QWORD *)v208 = *(_QWORD *)v209;
    v215 = *(_QWORD *)(v209 + 16);
    if (v215 >> 60 == 15)
    {
      *(_OWORD *)(v208 + 8) = *(_OWORD *)v214;
    }
    else
    {
      v216 = *v214;
      sub_23AAAE668(*v214, *(_QWORD *)(v209 + 16));
      *(_QWORD *)(v208 + 8) = v216;
      *(_QWORD *)(v208 + 16) = v215;
    }
    v217 = *(_OWORD *)(v209 + 24);
    *(_BYTE *)(v208 + 40) = *(_BYTE *)(v209 + 40);
    *(_OWORD *)(v208 + 24) = v217;
    *(_QWORD *)(v208 + 48) = *(_QWORD *)(v209 + 48);
  }
  else
  {
    v211 = *(_OWORD *)v209;
    v212 = *(_OWORD *)(v209 + 16);
    v213 = *(_OWORD *)(v209 + 32);
    *(_QWORD *)(v208 + 48) = *(_QWORD *)(v209 + 48);
    *(_OWORD *)(v208 + 16) = v212;
    *(_OWORD *)(v208 + 32) = v213;
    *(_OWORD *)v208 = v211;
  }
  v218 = (_QWORD *)((v208 + 63) & 0xFFFFFFFFFFFFF8);
  v219 = (void **)((v209 + 63) & 0xFFFFFFFFFFFFFFF8);
  v220 = *v219;
  *v218 = *v219;
  *(_QWORD *)(((unint64_t)v218 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v219 + 15) & 0xFFFFFFFFFFFFF8);
  *((_BYTE *)v179 + v378) = *((_BYTE *)v180 + v378);
  v221 = ((unint64_t)v179 + v378) & 0xFFFFFFFFFFFFFFF8;
  v222 = ((unint64_t)v180 + v378) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v221 + 8) = *(_QWORD *)(v222 + 8);
  v223 = (_OWORD *)((v221 + 23) & 0xFFFFFFFFFFFFFFF8);
  v224 = (_OWORD *)((v222 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v223 = *v224;
  v225 = ((unint64_t)v223 + 23) & 0xFFFFFFFFFFFFFFF8;
  v226 = ((unint64_t)v224 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v225 = *(_QWORD *)v226;
  *(_BYTE *)(v225 + 8) = *(_BYTE *)(v226 + 8);
  *(_QWORD *)(((unint64_t)v223 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v224 + 39) & 0xFFFFFFFFFFFFF8);
  v227 = (_OWORD *)(((unint64_t)v139 + v352 + 15) & 0xFFFFFFFFFFFFFFF8);
  v228 = (_OWORD *)(((unint64_t)v140 + v352 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v227 = *v228;
  v229 = ((unint64_t)v227 + 23) & 0xFFFFFFFFFFFFFFF8;
  v230 = ((unint64_t)v228 + 23) & 0xFFFFFFFFFFFFFFF8;
  v231 = *(_QWORD *)v230;
  *(_BYTE *)(v229 + 8) = *(_BYTE *)(v230 + 8);
  *(_QWORD *)v229 = v231;
  v380 = (void *)((v355 + v229) & v381);
  v232 = (const void *)((v355 + v230) & v381);
  if (v356)
    v233 = v356 - 1;
  else
    v233 = 0;
  if (v233 <= v395 - 1)
    v234 = v395 - 1;
  else
    v234 = v233;
  if (v234 <= 0x7FFFFFFE)
    v235 = 2147483646;
  else
    v235 = v234;
  if (v360)
    v236 = v360 - 1;
  else
    v236 = 0;
  if (v236 <= v389 - 1)
    v237 = v389 - 1;
  else
    v237 = v236;
  if (v237 <= 0x7FFFFFFE)
    v238 = 2147483646;
  else
    v238 = v237;
  if (v238 <= v235)
    v239 = v235;
  else
    v239 = v238;
  if (v239 <= 0x7FFFFFFF)
    v240 = 0x7FFFFFFF;
  else
    v240 = v239;
  v241 = v220;
  swift_bridgeObjectRetain();
  if (v235 != v240)
  {
    v246 = ((unint64_t)v232 + v359) & v402;
    v243 = v390;
    if (v238 != v240)
    {
      v244 = v380;
      v242 = v351;
      if (*(_QWORD *)(((v246 + v378) & 0xFFFFFFFFFFFFF8) + 8) < 0xFFFFFFFFuLL)
        goto LABEL_227;
      goto LABEL_181;
    }
    if (v236 == v238)
    {
      v242 = v351;
      v244 = v380;
      if (v360 < 2)
        goto LABEL_181;
      v245 = v365((const void *)v246, v360, v387);
      goto LABEL_147;
    }
    v249 = (v394 + ((((v370 + v246) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v393;
    if (v389 - 1 == v238)
    {
      if (v364 != v389)
      {
        v255 = (unint64_t *)((v376 + v249) & 0xFFFFFFFFFFFFFFF8);
        v242 = v351;
        v244 = v380;
        if (v361 > 0x7FFFFFFE)
        {
          if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v391 + 48))(((unint64_t)v255 + v366) & v367, v348, v368) < 2)goto LABEL_181;
LABEL_227:
          memcpy(v244, v232, __n);
          return v242;
        }
        v256 = *v255;
        if (v256 >= 0xFFFFFFFF)
          v248 = -1;
        else
          v248 = v256;
        if (v248 + 1 < 2)
          goto LABEL_181;
LABEL_180:
        if (v248 < 2)
          goto LABEL_181;
        goto LABEL_227;
      }
      v248 = (*(uint64_t (**)(unint64_t))(v386 + 48))(v249);
      v242 = v351;
LABEL_179:
      v244 = v380;
      goto LABEL_180;
    }
    v254 = *(_QWORD *)((((v345 + v249 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
    if (v254 >= 0xFFFFFFFF)
      LODWORD(v254) = -1;
    v251 = (v254 + 1) >= 2;
    v242 = v351;
LABEL_169:
    v244 = v380;
    if (v251)
      goto LABEL_227;
    goto LABEL_181;
  }
  v242 = v351;
  if (v233 != v235)
  {
    v247 = (v398 + (((((unint64_t)v232 + v377) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v397;
    if (v395 - 1 == v235)
    {
      if (v369 == v395)
      {
        v248 = (*(uint64_t (**)(unint64_t))(v388 + 48))(v247);
        v243 = v390;
      }
      else
      {
        v243 = v390;
        v252 = (unint64_t *)((v390 + v247) & 0xFFFFFFFFFFFFFFF8);
        if (v350 <= 0x7FFFFFFE)
        {
          v253 = *v252;
          if (v253 >= 0xFFFFFFFF)
            v248 = -1;
          else
            v248 = v253;
          v244 = v380;
          if (v248 + 1 < 2)
            goto LABEL_181;
          goto LABEL_180;
        }
        v248 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v396 + 48))(((unint64_t)v252 + v373) & v374, v349, v375);
      }
      goto LABEL_179;
    }
    v250 = *(_QWORD *)((((v346 + v247 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
    if (v250 >= 0xFFFFFFFF)
      LODWORD(v250) = -1;
    v251 = (v250 + 1) >= 2;
    v243 = v390;
    goto LABEL_169;
  }
  v243 = v390;
  v244 = v380;
  if (v356 < 2)
    goto LABEL_181;
  v245 = v371((unint64_t)v232, v356, v372);
LABEL_147:
  if (v245 >= 2)
    goto LABEL_227;
LABEL_181:
  if (v371((unint64_t)v232, 1, v372))
  {
    memcpy(v244, v232, v383);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v363 + 16))(v244, v232, v372);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v363 + 56))(v244, 0, 1, v372);
  }
  v257 = (_QWORD *)(((unint64_t)v244 + v377) & 0xFFFFFFFFFFFFF8);
  v258 = (_QWORD *)(((unint64_t)v232 + v377) & 0xFFFFFFFFFFFFFFF8);
  *v257 = *v258;
  v259 = ((unint64_t)v257 + 15) & 0xFFFFFFFFFFFFFFF8;
  v260 = ((unint64_t)v258 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v259 = *(_QWORD *)v260;
  *(_BYTE *)(v259 + 8) = *(_BYTE *)(v260 + 8);
  v261 = (void *)((v398 + v259) & v397);
  v262 = (char *)((v398 + v260) & v397);
  if (v369 == v395)
  {
    if (!(*(unsigned int (**)(unint64_t))(v388 + 48))((v398 + v260) & v397))
      goto LABEL_194;
  }
  else
  {
    v263 = (_QWORD *)((unint64_t)&v262[v243] & 0xFFFFFFFFFFFFFFF8);
    if (v350 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v396 + 48))(((unint64_t)v263 + v373) & v374, v349, v375))
      {
LABEL_194:
        v263 = (_QWORD *)((unint64_t)&v262[v243] & 0xFFFFFFFFFFFFFFF8);
LABEL_195:
        (*(void (**)(void *, char *, uint64_t))(v388 + 16))(v261, v262, v385);
        v266 = (_QWORD *)(((unint64_t)v261 + v243) & 0xFFFFFFFFFFFFFFF8);
        *v266 = *v263;
        v267 = ((unint64_t)v266 + v373) & v374;
        v268 = ((unint64_t)v263 + v373) & v374;
        v269 = *(void (**)(unint64_t, unint64_t, uint64_t))(v396 + 16);
        swift_bridgeObjectRetain();
        v269(v267, v268, v375);
        v270 = (_QWORD *)((v358 + v267) & 0xFFFFFFFFFFFFF8);
        v271 = (_QWORD *)((v358 + v268) & 0xFFFFFFFFFFFFF8);
        *v270 = *v271;
        v272 = (_QWORD *)(((unint64_t)v270 + 15) & 0xFFFFFFFFFFFFFFF8);
        v273 = (_QWORD *)(((unint64_t)v271 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v272 = *v273;
        v272[1] = v273[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v265 = v400;
        goto LABEL_196;
      }
    }
    else
    {
      v264 = *v263;
      if (*v263 >= 0xFFFFFFFFuLL)
        LODWORD(v264) = -1;
      if ((v264 + 1) < 2)
        goto LABEL_195;
    }
  }
  v265 = v400;
  memcpy(v261, v262, v400);
LABEL_196:
  v274 = (_BYTE *)((unint64_t)&v262[v265] | 1);
  v275 = (_BYTE *)((unint64_t)&v262[v265] | 2);
  v276 = (uint64_t)&v262[v265 + 10];
  v277 = &v262[v265];
  *((_BYTE *)v261 + v265) = *v277;
  v278 = (uint64_t)v261 + v265 + 34;
  *(_BYTE *)(((unint64_t)v261 + v265) | 1) = *v274;
  *(_BYTE *)(((unint64_t)v261 + v265) | 2) = *v275;
  v279 = ((unint64_t)v261 + v265 + 10) & 0xFFFFFFFFFFFFFFF8;
  v280 = *(void **)(v276 & 0xFFFFFFFFFFFFFFF8);
  v281 = *(void **)((v276 & 0xFFFFFFFFFFFFFFF8) + 8);
  v282 = *(_BYTE *)((v276 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_23AAAE478(v280, v281, v282);
  *(_QWORD *)v279 = v280;
  *(_QWORD *)(v279 + 8) = v281;
  *(_BYTE *)(v279 + 16) = v282;
  v283 = v278 & 0xFFFFFFFFFFFFFFF8;
  v284 = (unint64_t)(v277 + 34) & 0xFFFFFFFFFFFFFFF8;
  v285 = *(_QWORD *)(v284 + 16) >> 60;
  if (!(4 * (v285 & 3)) || ((v285 >> 2) & 0xFFFFFFF3 | (4 * (v285 & 3))) == 0xF)
  {
    v290 = (uint64_t *)(v284 + 8);
    *(_QWORD *)v283 = *(_QWORD *)v284;
    v291 = *(_QWORD *)(v284 + 16);
    v289 = v376;
    if (v291 >> 60 == 15)
    {
      *(_OWORD *)(v283 + 8) = *(_OWORD *)v290;
    }
    else
    {
      v292 = *v290;
      sub_23AAAE668(*v290, *(_QWORD *)(v284 + 16));
      *(_QWORD *)(v283 + 8) = v292;
      *(_QWORD *)(v283 + 16) = v291;
    }
    v293 = *(_OWORD *)(v284 + 24);
    *(_BYTE *)(v283 + 40) = *(_BYTE *)(v284 + 40);
    *(_OWORD *)(v283 + 24) = v293;
    *(_QWORD *)(v283 + 48) = *(_QWORD *)(v284 + 48);
  }
  else
  {
    v286 = *(_OWORD *)v284;
    v287 = *(_OWORD *)(v284 + 16);
    v288 = *(_OWORD *)(v284 + 32);
    *(_QWORD *)(v283 + 48) = *(_QWORD *)(v284 + 48);
    *(_OWORD *)(v283 + 16) = v287;
    *(_OWORD *)(v283 + 32) = v288;
    *(_OWORD *)v283 = v286;
    v289 = v376;
  }
  v294 = (_QWORD *)((v283 + 63) & 0xFFFFFFFFFFFFF8);
  v295 = (void **)((v284 + 63) & 0xFFFFFFFFFFFFFFF8);
  v296 = *v295;
  *v294 = *v295;
  *(_QWORD *)(((unint64_t)v294 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v295 + 15) & 0xFFFFFFFFFFFFF8);
  v297 = (void *)(((unint64_t)v244 + v359) & v402);
  v298 = (const void *)(((unint64_t)v232 + v359) & v402);
  v299 = v296;
  if (v365(v298, 1, v387))
  {
    memcpy(v297, v298, v382);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v362 + 16))(v297, v298, v387);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v362 + 56))(v297, 0, 1, v387);
  }
  v300 = (_QWORD *)(((unint64_t)v297 + v370) & 0xFFFFFFFFFFFFF8);
  v301 = (_QWORD *)(((unint64_t)v298 + v370) & 0xFFFFFFFFFFFFFFF8);
  *v300 = *v301;
  v302 = ((unint64_t)v300 + 15) & 0xFFFFFFFFFFFFFFF8;
  v303 = ((unint64_t)v301 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v302 = *(_QWORD *)v303;
  *(_BYTE *)(v302 + 8) = *(_BYTE *)(v303 + 8);
  v304 = (void *)((v394 + v302) & v393);
  v305 = (const void *)((v394 + v303) & v393);
  if (v364 == v389)
  {
    if (!(*(unsigned int (**)(unint64_t))(v386 + 48))((v394 + v303) & v393))
      goto LABEL_216;
LABEL_215:
    v308 = v404;
    memcpy(v304, v305, v404);
    goto LABEL_218;
  }
  v306 = (uint64_t *)(((unint64_t)v305 + v289) & 0xFFFFFFFFFFFFFFF8);
  if (v361 <= 0x7FFFFFFE)
  {
    v307 = *v306;
    if ((unint64_t)*v306 >= 0xFFFFFFFF)
      LODWORD(v307) = -1;
    if ((v307 + 1) < 2)
      goto LABEL_217;
    goto LABEL_215;
  }
  if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v391 + 48))(((unint64_t)v306 + v366) & v367, v348, v368))
  {
    goto LABEL_215;
  }
LABEL_216:
  v306 = (uint64_t *)(((unint64_t)v305 + v289) & 0xFFFFFFFFFFFFFFF8);
LABEL_217:
  (*(void (**)(void *, const void *, uint64_t))(v386 + 16))(v304, v305, v384);
  v309 = (_QWORD *)(((unint64_t)v304 + v289) & 0xFFFFFFFFFFFFFFF8);
  *v309 = *v306;
  v310 = ((unint64_t)v309 + v366) & v367;
  v311 = ((unint64_t)v306 + v366) & v367;
  v312 = *(void (**)(unint64_t, unint64_t, uint64_t))(v391 + 16);
  swift_bridgeObjectRetain();
  v312(v310, v311, v368);
  v313 = (_QWORD *)((v357 + v310) & 0xFFFFFFFFFFFFF8);
  v314 = (_QWORD *)((v357 + v311) & 0xFFFFFFFFFFFFF8);
  *v313 = *v314;
  v315 = (_QWORD *)(((unint64_t)v313 + 15) & 0xFFFFFFFFFFFFFFF8);
  v316 = (_QWORD *)(((unint64_t)v314 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v315 = *v316;
  v315[1] = v316[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v308 = v404;
LABEL_218:
  v317 = (uint64_t)v305 + v308 + 10;
  v318 = (uint64_t)v305 + v308 + 34;
  *((_BYTE *)v304 + v308) = *((_BYTE *)v305 + v308);
  v319 = (uint64_t)v304 + v308 + 34;
  *(_BYTE *)(((unint64_t)v304 + v308) | 1) = *(_BYTE *)(((unint64_t)v305 + v308) | 1);
  *(_BYTE *)(((unint64_t)v304 + v308) | 2) = *(_BYTE *)(((unint64_t)v305 + v308) | 2);
  v320 = ((unint64_t)v304 + v308 + 10) & 0xFFFFFFFFFFFFFFF8;
  v321 = *(void **)(v317 & 0xFFFFFFFFFFFFFFF8);
  v322 = *(void **)((v317 & 0xFFFFFFFFFFFFFFF8) + 8);
  v323 = *(_BYTE *)((v317 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_23AAAE478(v321, v322, v323);
  *(_QWORD *)v320 = v321;
  *(_QWORD *)(v320 + 8) = v322;
  *(_BYTE *)(v320 + 16) = v323;
  v324 = v319 & 0xFFFFFFFFFFFFFFF8;
  v325 = v318 & 0xFFFFFFFFFFFFFFF8;
  v326 = *(_QWORD *)(v325 + 16) >> 60;
  if (!(4 * (v326 & 3)) || ((v326 >> 2) & 0xFFFFFFF3 | (4 * (v326 & 3))) == 0xF)
  {
    v330 = (uint64_t *)(v325 + 8);
    *(_QWORD *)v324 = *(_QWORD *)v325;
    v331 = *(_QWORD *)(v325 + 16);
    if (v331 >> 60 == 15)
    {
      *(_OWORD *)(v324 + 8) = *(_OWORD *)v330;
    }
    else
    {
      v332 = *v330;
      sub_23AAAE668(*v330, *(_QWORD *)(v325 + 16));
      *(_QWORD *)(v324 + 8) = v332;
      *(_QWORD *)(v324 + 16) = v331;
    }
    v333 = *(_OWORD *)(v325 + 24);
    *(_BYTE *)(v324 + 40) = *(_BYTE *)(v325 + 40);
    *(_OWORD *)(v324 + 24) = v333;
    *(_QWORD *)(v324 + 48) = *(_QWORD *)(v325 + 48);
  }
  else
  {
    v327 = *(_OWORD *)v325;
    v328 = *(_OWORD *)(v325 + 16);
    v329 = *(_OWORD *)(v325 + 32);
    *(_QWORD *)(v324 + 48) = *(_QWORD *)(v325 + 48);
    *(_OWORD *)(v324 + 16) = v328;
    *(_OWORD *)(v324 + 32) = v329;
    *(_OWORD *)v324 = v327;
  }
  v334 = (_QWORD *)((v324 + 63) & 0xFFFFFFFFFFFFF8);
  v335 = (void **)((v325 + 63) & 0xFFFFFFFFFFFFFFF8);
  v336 = *v335;
  *v334 = *v335;
  *(_QWORD *)(((unint64_t)v334 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v335 + 15) & 0xFFFFFFFFFFFFF8);
  *((_BYTE *)v297 + v378) = *((_BYTE *)v298 + v378);
  v337 = ((unint64_t)v297 + v378) & 0xFFFFFFFFFFFFFFF8;
  v338 = ((unint64_t)v298 + v378) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v337 + 8) = *(_QWORD *)(v338 + 8);
  v339 = (_OWORD *)((v337 + 23) & 0xFFFFFFFFFFFFFFF8);
  v340 = (_OWORD *)((v338 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v339 = *v340;
  v341 = ((unint64_t)v339 + 23) & 0xFFFFFFFFFFFFFFF8;
  v342 = ((unint64_t)v340 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v341 = *(_QWORD *)v342;
  *(_BYTE *)(v341 + 8) = *(_BYTE *)(v342 + 8);
  *(_QWORD *)(((unint64_t)v339 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v340 + 39) & 0xFFFFFFFFFFFFF8);
  v343 = v336;
  swift_bridgeObjectRetain();
  return v242;
}

uint64_t sub_23AB29B48(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  int v19;
  unint64_t v20;
  int v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  size_t v38;
  uint64_t (*v39)(void *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t (*v48)(unint64_t, _QWORD, uint64_t);
  int v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  void (*v54)(unint64_t, unint64_t, uint64_t);
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  id v68;
  void *v69;
  char v70;
  void *v71;
  void *v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  BOOL v83;
  unint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  __int128 v93;
  void **v94;
  void **v95;
  void *v96;
  void *v97;
  id v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t (*v102)(unint64_t, uint64_t, uint64_t);
  int v103;
  int v104;
  size_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  uint64_t (*v119)(void *, uint64_t, uint64_t);
  int v120;
  int v121;
  char *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  unint64_t v130;
  uint64_t (*v131)(unint64_t, _QWORD, uint64_t);
  int v132;
  unint64_t v133;
  unint64_t v134;
  void (*v135)(unint64_t, unint64_t, uint64_t);
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _BYTE *v147;
  _BYTE *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  void *v155;
  char v156;
  void *v157;
  void *v158;
  char v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  unint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  __int128 v182;
  void **v183;
  void **v184;
  void *v185;
  void *v186;
  id v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  void *v197;
  const void *v198;
  int v199;
  _QWORD *v200;
  _QWORD *v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  const void *v205;
  uint64_t (*v206)(char *, uint64_t, uint64_t);
  uint64_t v207;
  int v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t *v214;
  uint64_t v215;
  unsigned int v216;
  unint64_t v217;
  int v218;
  unint64_t v219;
  unint64_t v220;
  void (*v221)(unint64_t, unint64_t, uint64_t);
  _QWORD *v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  unint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  _BYTE *v231;
  _BYTE *v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  _BYTE *v236;
  _BYTE *v237;
  uint64_t v238;
  char *v239;
  unint64_t v240;
  void *v241;
  void *v242;
  char v243;
  void *v244;
  void *v245;
  char v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t *v249;
  unint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  int v253;
  int v254;
  int v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  __int128 v267;
  void **v268;
  void **v269;
  void *v270;
  void *v271;
  id v272;
  char *v273;
  char *v274;
  int v275;
  _QWORD *v276;
  _QWORD *v277;
  unint64_t v278;
  unint64_t v279;
  char *v280;
  const void *v281;
  uint64_t (*v282)(char *, uint64_t, uint64_t);
  uint64_t v283;
  int v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t *v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  unint64_t v294;
  int v295;
  unint64_t v296;
  unint64_t v297;
  void (*v298)(unint64_t, unint64_t, uint64_t);
  _QWORD *v299;
  _QWORD *v300;
  _QWORD *v301;
  _QWORD *v302;
  unint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  uint64_t v306;
  _QWORD *v307;
  _BYTE *v308;
  _BYTE *v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  _BYTE *v313;
  _BYTE *v314;
  uint64_t v315;
  char *v316;
  unint64_t v317;
  void *v318;
  void *v319;
  char v320;
  void *v321;
  void *v322;
  char v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t *v326;
  unint64_t v327;
  uint64_t *v328;
  uint64_t v329;
  int v330;
  int v331;
  int v332;
  unint64_t v333;
  uint64_t v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  unsigned int v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  __int128 v343;
  void **v344;
  void **v345;
  void *v346;
  void *v347;
  id v348;
  unint64_t v349;
  unint64_t v350;
  _QWORD *v351;
  _QWORD *v352;
  unint64_t v353;
  unint64_t v354;
  _QWORD *v355;
  _QWORD *v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  void *v360;
  const void *v361;
  uint64_t v362;
  uint64_t v363;
  unsigned int v364;
  int v365;
  unsigned int v366;
  unsigned int v367;
  unsigned int v368;
  int v369;
  unsigned int v370;
  unsigned int v371;
  unsigned int v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unsigned int v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  size_t v381;
  unsigned int v382;
  unint64_t v383;
  unsigned int v384;
  unint64_t v385;
  unsigned int v386;
  unint64_t v387;
  unint64_t *v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t *v391;
  unint64_t v392;
  unsigned int v393;
  unsigned int v394;
  unint64_t v395;
  unsigned int v396;
  unint64_t v397;
  unsigned int v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t *v401;
  unint64_t *v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t *v411;
  unint64_t v412;
  _QWORD *v413;
  _QWORD *v414;
  unint64_t v415;
  unint64_t v416;
  char *v417;
  const void *v418;
  _QWORD *v419;
  uint64_t v420;
  _QWORD *v421;
  unint64_t v422;
  unint64_t v423;
  void (*v424)(unint64_t, unint64_t, uint64_t);
  _QWORD *v425;
  _QWORD *v426;
  _QWORD *v427;
  _QWORD *v428;
  _BYTE *v429;
  _BYTE *v430;
  uint64_t v431;
  char v432;
  uint64_t v433;
  _BYTE *v434;
  _BYTE *v435;
  uint64_t v436;
  char *v437;
  unint64_t v438;
  void *v439;
  void *v440;
  char v441;
  unint64_t v442;
  unint64_t v443;
  uint64_t v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  uint64_t *v448;
  unint64_t v449;
  uint64_t v450;
  __int128 v451;
  _QWORD *v452;
  void **v453;
  void *v454;
  void *v455;
  void *v456;
  id v457;
  _QWORD *v458;
  _QWORD *v459;
  unint64_t v460;
  unint64_t v461;
  _BYTE *v462;
  _BYTE *v463;
  _QWORD *v464;
  uint64_t v465;
  unint64_t v466;
  _QWORD *v467;
  unint64_t v468;
  unint64_t v469;
  void (*v470)(unint64_t, unint64_t, uint64_t);
  _QWORD *v471;
  _QWORD *v472;
  _QWORD *v473;
  _QWORD *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t v478;
  void *v479;
  void *v480;
  char v481;
  unint64_t v482;
  unint64_t v483;
  uint64_t v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  uint64_t v488;
  uint64_t *v489;
  unint64_t v490;
  uint64_t v491;
  __int128 v492;
  _QWORD *v493;
  void **v494;
  void *v495;
  unint64_t v496;
  unint64_t v497;
  _OWORD *v498;
  _OWORD *v499;
  unint64_t v500;
  unint64_t v501;
  id v502;
  int v503;
  int v504;
  unint64_t v505;
  int v506;
  _QWORD *v507;
  _QWORD *v508;
  unint64_t v509;
  unint64_t v510;
  _BYTE *v511;
  _BYTE *v512;
  uint64_t (*v513)(_BYTE *, uint64_t, uint64_t);
  uint64_t v514;
  int v515;
  unint64_t v516;
  uint64_t *v517;
  uint64_t v518;
  unsigned int v519;
  uint64_t *v520;
  uint64_t v521;
  unsigned int v522;
  uint64_t *v523;
  uint64_t v524;
  size_t v525;
  unint64_t v526;
  int v527;
  uint64_t v528;
  int v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  BOOL v533;
  unint64_t v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t *v537;
  uint64_t v538;
  unint64_t v539;
  unint64_t v540;
  unint64_t v541;
  BOOL v542;
  unint64_t v543;
  unint64_t v544;
  void (*v545)(unint64_t, unint64_t, uint64_t);
  _QWORD *v546;
  _QWORD *v547;
  _QWORD *v548;
  _QWORD *v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  _QWORD *v553;
  uint64_t v554;
  uint64_t v555;
  _QWORD *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  unint64_t v560;
  void *v561;
  void *v562;
  char v563;
  void *v564;
  void *v565;
  char v566;
  unint64_t v567;
  unint64_t v568;
  uint64_t *v569;
  unint64_t v570;
  uint64_t *v571;
  uint64_t v572;
  int v573;
  int v574;
  int v575;
  unint64_t v576;
  uint64_t v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  uint64_t v581;
  uint64_t v582;
  unint64_t v583;
  __int128 v584;
  void **v585;
  void **v586;
  void *v587;
  void *v588;
  id v589;
  char *v590;
  char *v591;
  int v592;
  int v593;
  _QWORD *v594;
  _QWORD *v595;
  unint64_t v596;
  unint64_t v597;
  _BYTE *v598;
  _BYTE *v599;
  uint64_t (*v600)(_BYTE *, uint64_t, uint64_t);
  uint64_t v601;
  int v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t *v605;
  uint64_t v606;
  unsigned int v607;
  uint64_t *v608;
  uint64_t v609;
  unsigned int v610;
  unint64_t v611;
  int v612;
  unint64_t v613;
  unint64_t v614;
  void (*v615)(unint64_t, unint64_t, uint64_t);
  _QWORD *v616;
  _QWORD *v617;
  _QWORD *v618;
  _QWORD *v619;
  unint64_t v620;
  unint64_t v621;
  unint64_t v622;
  _QWORD *v623;
  uint64_t v624;
  uint64_t v625;
  _QWORD *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unint64_t v630;
  void *v631;
  void *v632;
  char v633;
  void *v634;
  void *v635;
  char v636;
  unint64_t v637;
  unint64_t v638;
  uint64_t *v639;
  unint64_t v640;
  uint64_t *v641;
  uint64_t v642;
  int v643;
  int v644;
  int v645;
  unint64_t v646;
  uint64_t v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  __int128 v654;
  void **v655;
  void **v656;
  void *v657;
  void *v658;
  id v659;
  unint64_t v660;
  unint64_t v661;
  _QWORD *v662;
  _QWORD *v663;
  unint64_t v664;
  unint64_t v665;
  unint64_t v667;
  unint64_t v668;
  unsigned int v669;
  unsigned int v670;
  unsigned int v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  unint64_t v675;
  unint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  unsigned int v680;
  unsigned int v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  unsigned int v686;
  uint64_t v687;
  uint64_t v688;
  unsigned int v689;
  uint64_t (*v690)(char *, uint64_t, uint64_t);
  unsigned int v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  size_t __n;
  size_t v696;
  uint64_t v697;
  unint64_t v698;
  size_t v699;
  uint64_t (*v700)(void);
  size_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  size_t v709;
  int v710;
  uint64_t v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  int v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  size_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8;
  v720 = swift_getAssociatedTypeWitness();
  v727 = *(_QWORD *)(v720 - 8);
  v8 = *(_DWORD *)(v727 + 80) & 0xF8;
  v708 = swift_getAssociatedTypeWitness();
  v726 = *(_QWORD *)(v708 - 8);
  v722 = *(unsigned __int8 *)(v726 + 80);
  v730 = v8 | v722 | 7;
  v9 = v8 | v722 | v7;
  v724 = swift_getAssociatedTypeWitness();
  v697 = *(_QWORD *)(v724 - 8);
  v10 = *(_DWORD *)(v697 + 80) & 0xF8;
  v719 = swift_getAssociatedTypeWitness();
  v732 = *(_QWORD *)(v719 - 8);
  v11 = *(_DWORD *)(v732 + 80) & 0xF8;
  v12 = v6;
  v704 = swift_getAssociatedTypeWitness();
  v725 = *(_QWORD *)(v704 - 8);
  v716 = *(unsigned __int8 *)(v725 + 80);
  v13 = v11 | v716 | 7;
  v711 = v13 | v10;
  v14 = v9 | v711;
  v15 = AssociatedTypeWitness;
  v672 = a1;
  v673 = v14 + 9;
  v16 = v14 + 9 + a1;
  v17 = (uint64_t)a2 + v14 + 9;
  v18 = *(uint64_t (**)(void))(v12 + 48);
  v728 = v16 & ~v14;
  v19 = v18();
  v20 = v17 & ~v14;
  v700 = v18;
  v21 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v18)(v20, 1, AssociatedTypeWitness);
  v693 = v14;
  v684 = v17;
  v714 = v13;
  if (v19)
  {
    if (v21)
    {
      if (*(_DWORD *)(v12 + 84))
        v22 = *(_QWORD *)(v12 + 64);
      else
        v22 = *(_QWORD *)(v12 + 64) + 1;
      v23 = v16 & ~v14;
      goto LABEL_11;
    }
    v23 = v16 & ~v14;
    v24 = v17 & ~v14;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16))(v728, v24, AssociatedTypeWitness);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v728, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    if (v21)
    {
      v23 = v16 & ~v14;
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v728, AssociatedTypeWitness);
      if (*(_DWORD *)(v12 + 84))
        v22 = *(_QWORD *)(v12 + 64);
      else
        v22 = *(_QWORD *)(v12 + 64) + 1;
LABEL_11:
      v24 = v17 & ~v14;
      memcpy((void *)v23, (const void *)v24, v22);
      goto LABEL_14;
    }
    v23 = v16 & ~v14;
    v24 = v17 & ~v14;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 24))(v728, v24, AssociatedTypeWitness);
  }
LABEL_14:
  v25 = v722;
  v681 = *(_DWORD *)(v12 + 84);
  v679 = v12;
  if (v681)
    v26 = *(_QWORD *)(v12 + 64);
  else
    v26 = *(_QWORD *)(v12 + 64) + 1;
  __n = v26;
  v27 = (_QWORD *)(((v24 | 7) + v26) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_QWORD *)(((v23 | 7) + v26) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v27;
  v29 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  v30 = ((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = *(_BYTE *)(v30 + 8);
  v31 = v730;
  v32 = (void *)((v31 + 9 + v29) & ~v31);
  v723 = v730 + 9;
  v33 = (void *)((v31 + 9 + v30) & ~v31);
  v34 = *(unsigned int *)(v727 + 84);
  v670 = *(_DWORD *)(v726 + 84);
  if (v34 <= v670)
    v35 = *(_DWORD *)(v726 + 84);
  else
    v35 = *(_DWORD *)(v727 + 84);
  if (v35 <= 0x7FFFFFFE)
    v36 = 2147483646;
  else
    v36 = v35;
  v37 = *(_QWORD *)(v727 + 64) + 7;
  v707 = ~v25;
  v706 = v25 + 8;
  v687 = *(_QWORD *)(v726 + 64) + 7;
  v668 = (((v687 + ((v25 + 8 + (v37 & 0xFFFFFFFFFFFFFFF8)) & ~v25)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v38 = v668 + 16;
  v718 = v36;
  v709 = v668 + 16;
  v713 = v37;
  v692 = v15;
  v691 = *(_DWORD *)(v727 + 84);
  v686 = v35;
  v682 = v16;
  if ((_DWORD)v34 == v36)
  {
    v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v727 + 48);
    v40 = v39(v32, v34, v720);
    v41 = v39(v33, v34, v720);
    if (v40)
      goto LABEL_25;
LABEL_36:
    v42 = (uint64_t *)(((unint64_t)v32 + v713) & 0xFFFFFFFFFFFFFFF8);
    if (v41)
      goto LABEL_37;
    v43 = (uint64_t *)(((unint64_t)v33 + v713) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_42;
  }
  v42 = (uint64_t *)(((unint64_t)v32 + v37) & 0xFFFFFFFFFFFFFFF8);
  if (v35 > 0x7FFFFFFE)
  {
    v48 = *(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v726 + 48);
    v49 = v48(((unint64_t)v42 + v706) & v707, v670, v708);
    v50 = v37;
    v51 = v49;
    v24 = v20;
    v38 = v668 + 16;
    v41 = v48((v706 + (((unint64_t)v33 + v50) & 0xFFFFFFFFFFFFFFF8)) & v707, v670, v708);
    if (v51)
    {
LABEL_25:
      if (!v41)
      {
        v42 = (uint64_t *)(((unint64_t)v32 + v713) & 0xFFFFFFFFFFFFFFF8);
        v43 = (uint64_t *)(((unint64_t)v33 + v713) & 0xFFFFFFFFFFFFFFF8);
LABEL_39:
        (*(void (**)(void *, void *, uint64_t))(v727 + 16))(v32, v33, v720);
        *v42 = *v43;
        v52 = ((unint64_t)v42 + v706) & v707;
        v53 = ((unint64_t)v43 + v706) & v707;
        v54 = *(void (**)(unint64_t, unint64_t, uint64_t))(v726 + 16);
        swift_bridgeObjectRetain();
        v54(v52, v53, v708);
        v55 = (_QWORD *)((v687 + v52) & 0xFFFFFFFFFFFFF8);
        v56 = (_QWORD *)((v687 + v53) & 0xFFFFFFFFFFFFF8);
        *v55 = *v56;
        v57 = (_QWORD *)(((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8);
        v58 = (_QWORD *)(((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v57 = *v58;
        v57[1] = v58[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_43;
      }
      goto LABEL_40;
    }
    goto LABEL_36;
  }
  v44 = *v42;
  if ((unint64_t)*v42 >= 0xFFFFFFFF)
    LODWORD(v44) = -1;
  v45 = v44 + 1;
  v43 = (uint64_t *)(((unint64_t)v33 + v37) & 0xFFFFFFFFFFFFFFF8);
  v46 = *v43;
  if ((unint64_t)*v43 >= 0xFFFFFFFF)
    LODWORD(v46) = -1;
  v47 = v46 + 1;
  if (v45 >= 2)
  {
    if (v47 < 2)
      goto LABEL_39;
    goto LABEL_40;
  }
  if (v47 >= 2)
  {
LABEL_37:
    (*(void (**)(void *, uint64_t))(v727 + 8))(v32, v720);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v726 + 8))(((unint64_t)v42 + v706) & v707, v708);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_40:
    memcpy(v32, v33, v38);
    goto LABEL_43;
  }
LABEL_42:
  (*(void (**)(void *, void *, uint64_t))(v727 + 24))(v32, v33, v720);
  *v42 = *v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v59 = ((unint64_t)v42 + v706) & v707;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v726 + 24))(v59, ((unint64_t)v43 + v706) & v707, v708);
  v60 = (_QWORD *)((v687 + v59) & 0xFFFFFFFFFFFFFFF8);
  v61 = (v687 + (((unint64_t)v43 + v706) & v707)) & 0xFFFFFFFFFFFFF8;
  v62 = *(_QWORD *)v61;
  v61 += 15;
  *v60 = v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63 = (_QWORD *)(((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v63 = *(_QWORD *)(v61 & 0xFFFFFFFFFFFFFFF8);
  v63[1] = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_43:
  v64 = (uint64_t)v33 + v38 + 34;
  *((_BYTE *)v32 + v38) = *((_BYTE *)v33 + v38);
  v65 = (uint64_t)v32 + v38 + 34;
  *(_BYTE *)(((unint64_t)v32 + v38) | 1) = *(_BYTE *)(((unint64_t)v33 + v38) | 1);
  v721 = ~v730;
  *(_BYTE *)(((unint64_t)v32 + v38) | 2) = *(_BYTE *)(((unint64_t)v33 + v38) | 2);
  v66 = ((unint64_t)v32 + v38 + 10) & 0xFFFFFFFFFFFFFFF8;
  v67 = ((unint64_t)v33 + v38 + 10) & 0xFFFFFFFFFFFFFFF8;
  v68 = *(id *)v67;
  v69 = *(void **)(v67 + 8);
  v70 = *(_BYTE *)(v67 + 16);
  sub_23AAAE478(*(id *)v67, v69, v70);
  v71 = *(void **)v66;
  v72 = *(void **)(v66 + 8);
  *(_QWORD *)v66 = v68;
  *(_QWORD *)(v66 + 8) = v69;
  v73 = *(_BYTE *)(v66 + 16);
  *(_BYTE *)(v66 + 16) = v70;
  sub_23AAAEE10(v71, v72, v73);
  v74 = v65 & 0xFFFFFFFFFFFFFFF8;
  v75 = v64 & 0xFFFFFFFFFFFFFFF8;
  v76 = (uint64_t *)(v74 + 8);
  v77 = *(_QWORD *)(v74 + 16);
  v78 = (uint64_t *)((v64 & 0xFFFFFFFFFFFFFFF8) + 8);
  v79 = *(_QWORD *)(v75 + 16) >> 60;
  v83 = ((4 * (_DWORD)v79) & 0xC) == 0;
  v80 = (4 * v79) & 0xC | (v79 >> 2);
  v81 = v83;
  if (v80 == 15)
    v82 = 1;
  else
    v82 = v81;
  if (4 * ((v77 >> 60) & 3))
    v83 = (((v77 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v77 >> 60) & 3))) == 15;
  else
    v83 = 1;
  if (!v83)
  {
    if (v82)
    {
      *(_QWORD *)v74 = *(_QWORD *)v75;
      v84 = *(_QWORD *)(v75 + 16);
      goto LABEL_60;
    }
LABEL_64:
    v85 = *(_OWORD *)v75;
    v86 = *(_OWORD *)(v75 + 16);
    v87 = *(_OWORD *)(v75 + 32);
    *(_QWORD *)(v74 + 48) = *(_QWORD *)(v75 + 48);
    *(_OWORD *)(v74 + 16) = v86;
    *(_OWORD *)(v74 + 32) = v87;
    *(_OWORD *)v74 = v85;
    v88 = v716;
    goto LABEL_68;
  }
  if (!v82)
  {
    if (v77 >> 60 != 15)
      sub_23AAAE53C(*v76, v77);
    goto LABEL_64;
  }
  *(_QWORD *)v74 = *(_QWORD *)v75;
  v84 = *(_QWORD *)(v75 + 16);
  if (v77 >> 60 != 15)
  {
    if (v84 >> 60 != 15)
    {
      v90 = *v78;
      sub_23AAAE668(*v78, *(_QWORD *)(v75 + 16));
      v91 = *(_QWORD *)(v74 + 8);
      v92 = *(_QWORD *)(v74 + 16);
      *(_QWORD *)(v74 + 8) = v90;
      *(_QWORD *)(v74 + 16) = v84;
      sub_23AAAE53C(v91, v92);
      goto LABEL_67;
    }
    sub_23AB2D750(v74 + 8);
    goto LABEL_61;
  }
LABEL_60:
  if (v84 >> 60 != 15)
  {
    v89 = *v78;
    sub_23AAAE668(*v78, v84);
    *(_QWORD *)(v74 + 8) = v89;
    *(_QWORD *)(v74 + 16) = v84;
    goto LABEL_67;
  }
LABEL_61:
  *(_OWORD *)v76 = *(_OWORD *)v78;
LABEL_67:
  v88 = v716;
  v93 = *(_OWORD *)(v75 + 24);
  *(_BYTE *)(v74 + 40) = *(_BYTE *)(v75 + 40);
  *(_OWORD *)(v74 + 24) = v93;
  *(_QWORD *)(v74 + 48) = *(_QWORD *)(v75 + 48);
LABEL_68:
  v94 = (void **)((v74 + 63) & 0xFFFFFFFFFFFFFFF8);
  v95 = (void **)((v75 + 63) & 0xFFFFFFFFFFFFFFF8);
  v96 = *v95;
  v97 = *v94;
  *v94 = *v95;
  v98 = v96;

  *(_QWORD *)(((unint64_t)v94 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v95 + 15) & 0xFFFFFFFFFFFFF8);
  v701 = __n + 7;
  v99 = ((((((((v723 + ((((__n + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v721) + v38 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v100 = (v728 + v711 + v99) & ~v711;
  v101 = (v24 + v711 + v99) & ~v711;
  v102 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v697 + 48);
  v103 = v102(v100, 1, v724);
  v690 = (uint64_t (*)(char *, uint64_t, uint64_t))v102;
  v104 = v102(v101, 1, v724);
  if (v103)
  {
    if (!v104)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v697 + 16))(v100, v101, v724);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v697 + 56))(v100, 0, 1, v724);
      goto LABEL_77;
    }
  }
  else
  {
    if (!v104)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v697 + 24))(v100, v101, v724);
      goto LABEL_77;
    }
    (*(void (**)(unint64_t, uint64_t))(v697 + 8))(v100, v724);
  }
  if (*(_DWORD *)(v697 + 84))
    v105 = *(_QWORD *)(v697 + 64);
  else
    v105 = *(_QWORD *)(v697 + 64) + 1;
  memcpy((void *)v100, (const void *)v101, v105);
LABEL_77:
  v106 = v732;
  v680 = *(_DWORD *)(v697 + 84);
  if (v680)
    v107 = *(_QWORD *)(v697 + 64);
  else
    v107 = *(_QWORD *)(v697 + 64) + 1;
  v698 = (v728 + v711 + v99) & ~v711;
  v674 = v101;
  v696 = v107;
  v108 = (_QWORD *)(((v101 | 7) + v107) & 0xFFFFFFFFFFFFFFF8);
  v109 = (_QWORD *)(((v100 | 7) + v107) & 0xFFFFFFFFFFFFFFF8);
  *v109 = *v108;
  v110 = ((unint64_t)v109 + 15) & 0xFFFFFFFFFFFFFFF8;
  v111 = ((unint64_t)v108 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v110 = *(_QWORD *)v111;
  *(_BYTE *)(v110 + 8) = *(_BYTE *)(v111 + 8);
  v112 = v714;
  v113 = (void *)((v112 + 9 + v110) & ~v112);
  v717 = v714 + 9;
  v114 = (v112 + 9 + v111) & ~v112;
  v115 = *(unsigned int *)(v732 + 84);
  v669 = *(_DWORD *)(v725 + 84);
  if (v115 <= v669)
    v116 = *(_DWORD *)(v725 + 84);
  else
    v116 = *(_DWORD *)(v732 + 84);
  if (v116 <= 0x7FFFFFFE)
    v117 = 2147483646;
  else
    v117 = v116;
  v118 = *(_QWORD *)(v732 + 64) + 7;
  v703 = ~v88;
  v702 = v88 + 8;
  v688 = *(_QWORD *)(v725 + 64) + 7;
  v667 = (((v688 + ((v88 + 8 + (v118 & 0xFFFFFFFFFFFFFFF8)) & ~v88)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v729 = v667 + 16;
  v710 = v117;
  v705 = v118;
  v689 = *(_DWORD *)(v732 + 84);
  v676 = v99;
  if ((_DWORD)v115 == v117)
  {
    v119 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v732 + 48);
    v120 = v119(v113, v115, v719);
    v121 = v119((void *)v114, v115, v719);
    v122 = (char *)v114;
    v123 = v693;
    if (v120)
      goto LABEL_88;
    goto LABEL_99;
  }
  v122 = (char *)((v714 + 9 + v111) & ~v714);
  v124 = (uint64_t *)(((unint64_t)v113 + v118) & 0xFFFFFFFFFFFFFFF8);
  if (v116 <= 0x7FFFFFFE)
  {
    v126 = *v124;
    if ((unint64_t)*v124 >= 0xFFFFFFFF)
      LODWORD(v126) = -1;
    v127 = v126 + 1;
    v125 = (uint64_t *)((v118 + v114) & 0xFFFFFFFFFFFFFFF8);
    v128 = *v125;
    if ((unint64_t)*v125 >= 0xFFFFFFFF)
      LODWORD(v128) = -1;
    v129 = v128 + 1;
    if (v127 >= 2)
    {
      v123 = v693;
      if (v129 < 2)
        goto LABEL_104;
LABEL_105:
      v140 = v667 + 16;
      memcpy(v113, v122, v729);
      goto LABEL_109;
    }
    v123 = v693;
    if (v129 >= 2)
    {
LABEL_101:
      (*(void (**)(void *, uint64_t))(v106 + 8))(v113, v719);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v725 + 8))(((unint64_t)v124 + v702) & v703, v704);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_105;
    }
LABEL_107:
    (*(void (**)(void *, char *, uint64_t))(v106 + 24))(v113, v122, v719);
    *v124 = *v125;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v141 = ((unint64_t)v124 + v702) & v703;
    v142 = ((unint64_t)v125 + v702) & v703;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v725 + 24))(v141, v142, v704);
    v143 = (_QWORD *)((v688 + v141) & 0xFFFFFFFFFFFFFFF8);
    v144 = (v688 + v142) & 0xFFFFFFFFFFFFF8;
    v145 = *(_QWORD *)v144;
    v144 += 15;
    *v143 = v145;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v146 = (_QWORD *)(((unint64_t)v143 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v146 = *(_QWORD *)(v144 & 0xFFFFFFFFFFFFFFF8);
    v146[1] = *(_QWORD *)((v144 & 0xFFFFFFFFFFFFFFF8) + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_108;
  }
  v130 = ((unint64_t)v124 + v702) & v703;
  v131 = *(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v725 + 48);
  v132 = v131(v130, v669, v704);
  v123 = v693;
  v121 = v131((v702 + ((unint64_t)&v122[v118] & 0xFFFFFFFFFFFFFFF8)) & v703, v669, v704);
  if (!v132)
  {
LABEL_99:
    v124 = (uint64_t *)(((unint64_t)v113 + v118) & 0xFFFFFFFFFFFFFFF8);
    if (v121)
    {
      v106 = v732;
      goto LABEL_101;
    }
    v125 = (uint64_t *)((unint64_t)&v122[v118] & 0xFFFFFFFFFFFFFFF8);
    v106 = v732;
    goto LABEL_107;
  }
LABEL_88:
  if (v121)
    goto LABEL_105;
  v124 = (uint64_t *)(((unint64_t)v113 + v118) & 0xFFFFFFFFFFFFFFF8);
  v125 = (uint64_t *)((unint64_t)&v122[v118] & 0xFFFFFFFFFFFFFFF8);
LABEL_104:
  (*(void (**)(void *, char *, uint64_t))(v732 + 16))(v113, v122, v719);
  *v124 = *v125;
  v133 = ((unint64_t)v124 + v702) & v703;
  v134 = ((unint64_t)v125 + v702) & v703;
  v135 = *(void (**)(unint64_t, unint64_t, uint64_t))(v725 + 16);
  swift_bridgeObjectRetain();
  v135(v133, v134, v704);
  v136 = (_QWORD *)((v688 + v133) & 0xFFFFFFFFFFFFF8);
  v137 = (_QWORD *)((v688 + v134) & 0xFFFFFFFFFFFFF8);
  *v136 = *v137;
  v138 = (_QWORD *)(((unint64_t)v136 + 15) & 0xFFFFFFFFFFFFFFF8);
  v139 = (_QWORD *)(((unint64_t)v137 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v138 = *v139;
  v138[1] = v139[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_108:
  v140 = v667 + 16;
LABEL_109:
  v147 = (_BYTE *)((unint64_t)&v122[v140] | 1);
  v148 = (_BYTE *)((unint64_t)&v122[v140] | 2);
  v149 = (uint64_t)&v122[v140 + 10];
  v150 = &v122[v140];
  *((_BYTE *)v113 + v140) = *v150;
  v151 = (uint64_t)v113 + v140 + 34;
  *(_BYTE *)(((unint64_t)v113 + v140) | 1) = *v147;
  v152 = ~v123;
  v731 = ~v711;
  v715 = ~v714;
  *(_BYTE *)(((unint64_t)v113 + v140) | 2) = *v148;
  v153 = ((unint64_t)v113 + v140 + 10) & 0xFFFFFFFFFFFFFFF8;
  v154 = *(void **)(v149 & 0xFFFFFFFFFFFFFFF8);
  v155 = *(void **)((v149 & 0xFFFFFFFFFFFFFFF8) + 8);
  v156 = *(_BYTE *)((v149 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_23AAAE478(v154, v155, v156);
  v157 = *(void **)v153;
  v158 = *(void **)(v153 + 8);
  *(_QWORD *)v153 = v154;
  *(_QWORD *)(v153 + 8) = v155;
  v159 = *(_BYTE *)(v153 + 16);
  *(_BYTE *)(v153 + 16) = v156;
  sub_23AAAEE10(v157, v158, v159);
  v160 = v151 & 0xFFFFFFFFFFFFFFF8;
  v161 = (unint64_t)(v150 + 34) & 0xFFFFFFFFFFFFFFF8;
  v162 = (uint64_t *)((v151 & 0xFFFFFFFFFFFFFFF8) + 8);
  v163 = *(_QWORD *)((v151 & 0xFFFFFFFFFFFFFFF8) + 16);
  v164 = (uint64_t *)(v161 + 8);
  v165 = *(_QWORD *)(v161 + 16) >> 60;
  v83 = ((4 * (_DWORD)v165) & 0xC) == 0;
  v166 = (4 * v165) & 0xC | (v165 >> 2);
  v167 = v83;
  if (v166 == 15)
    v168 = 1;
  else
    v168 = v167;
  v671 = v116;
  if (4 * ((v163 >> 60) & 3) && (((v163 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v163 >> 60) & 3))) != 0xF)
  {
    if (v168)
    {
      *(_QWORD *)v160 = *(_QWORD *)v161;
      v169 = *(_QWORD *)(v161 + 16);
      if (v169 >> 60 == 15)
      {
        *(_OWORD *)v162 = *(_OWORD *)v164;
      }
      else
      {
        v178 = *v164;
        sub_23AAAE668(*v164, *(_QWORD *)(v161 + 16));
        *(_QWORD *)(v160 + 8) = v178;
        *(_QWORD *)(v160 + 16) = v169;
      }
      v170 = v732;
      goto LABEL_133;
    }
LABEL_127:
    v173 = *(_OWORD *)v161;
    v174 = *(_OWORD *)(v161 + 16);
    v175 = *(_OWORD *)(v161 + 32);
    *(_QWORD *)(v160 + 48) = *(_QWORD *)(v161 + 48);
    *(_OWORD *)(v160 + 16) = v174;
    *(_OWORD *)(v160 + 32) = v175;
    *(_OWORD *)v160 = v173;
    v170 = v732;
    v176 = v667 + 16;
    v177 = v698;
    goto LABEL_134;
  }
  if (!v168)
  {
    if (v163 >> 60 != 15)
      sub_23AAAE53C(*v162, v163);
    goto LABEL_127;
  }
  *(_QWORD *)v160 = *(_QWORD *)v161;
  v171 = *(_QWORD *)(v161 + 16);
  if (v163 >> 60 != 15)
  {
    v170 = v732;
    if (v171 >> 60 != 15)
    {
      v179 = *v164;
      sub_23AAAE668(*v164, *(_QWORD *)(v161 + 16));
      v180 = *(_QWORD *)(v160 + 8);
      v181 = *(_QWORD *)(v160 + 16);
      *(_QWORD *)(v160 + 8) = v179;
      *(_QWORD *)(v160 + 16) = v171;
      sub_23AAAE53C(v180, v181);
      goto LABEL_133;
    }
    sub_23AB2D750((uint64_t)v162);
    goto LABEL_131;
  }
  v170 = v732;
  if (v171 >> 60 == 15)
  {
LABEL_131:
    *(_OWORD *)v162 = *(_OWORD *)v164;
    goto LABEL_133;
  }
  v172 = *v164;
  sub_23AAAE668(*v164, *(_QWORD *)(v161 + 16));
  *(_QWORD *)(v160 + 8) = v172;
  *(_QWORD *)(v160 + 16) = v171;
LABEL_133:
  v176 = v667 + 16;
  v177 = v698;
  v182 = *(_OWORD *)(v161 + 24);
  *(_BYTE *)(v160 + 40) = *(_BYTE *)(v161 + 40);
  *(_OWORD *)(v160 + 24) = v182;
  *(_QWORD *)(v160 + 48) = *(_QWORD *)(v161 + 48);
LABEL_134:
  v183 = (void **)((v160 + 63) & 0xFFFFFFFFFFFFFFF8);
  v184 = (void **)((v161 + 63) & 0xFFFFFFFFFFFFFFF8);
  v185 = *v184;
  v186 = *v183;
  *v183 = *v184;
  v187 = v185;

  *(_QWORD *)(((unint64_t)v183 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v184 + 15) & 0xFFFFFFFFFFFFF8);
  v699 = v696 + 7;
  v188 = ((((((((v717 + ((((v696 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v715) + v176 + 34) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  *(_BYTE *)(v188 + v177) = *(_BYTE *)(v188 + v674);
  v189 = (v188 + v177) & 0xFFFFFFFFFFFFFFF8;
  v190 = (v188 + v674) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v189 + 8) = *(_QWORD *)(v190 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v191 = (_QWORD *)((v189 + 23) & 0xFFFFFFFFFFFFFFF8);
  v192 = (_QWORD *)((v190 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v191 = *v192;
  v191[1] = v192[1];
  v193 = ((unint64_t)v191 + 23) & 0xFFFFFFFFFFFFFFF8;
  v194 = ((unint64_t)v192 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v193 = *(_QWORD *)v194;
  *(_BYTE *)(v193 + 8) = *(_BYTE *)(v194 + 8);
  *(_QWORD *)(((unint64_t)v191 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v192 + 39) & 0xFFFFFFFFFFFFF8);
  v195 = v676 + v711;
  v196 = (v676 + v711) & v731;
  v712 = v188;
  v675 = (((((v188 + v196) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  v197 = (void *)(((v682 | v123) + v675 + 8) & v152);
  v198 = (const void *)(((v684 | v123) + v675 + 8) & v152);
  LODWORD(v183) = ((uint64_t (*)(void *, uint64_t, uint64_t))v700)(v197, 1, v692);
  v199 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v700)(v198, 1, v692);
  v678 = ~v123;
  if ((_DWORD)v183)
  {
    if (!v199)
    {
      (*(void (**)(void *, const void *, uint64_t))(v679 + 16))(v197, v198, v692);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v679 + 56))(v197, 0, 1, v692);
      goto LABEL_140;
    }
    goto LABEL_139;
  }
  if (v199)
  {
    (*(void (**)(void *, uint64_t))(v679 + 8))(v197, v692);
LABEL_139:
    memcpy(v197, v198, __n);
    goto LABEL_140;
  }
  (*(void (**)(void *, const void *, uint64_t))(v679 + 24))(v197, v198, v692);
LABEL_140:
  v200 = (_QWORD *)(((unint64_t)v197 + v701) & 0xFFFFFFFFFFFFF8);
  v694 = ((v684 | v123) + v675 + 8) & v152;
  v201 = (_QWORD *)(((unint64_t)v198 + v701) & 0xFFFFFFFFFFFFFFF8);
  *v200 = *v201;
  v202 = ((unint64_t)v200 + 15) & 0xFFFFFFFFFFFFFFF8;
  v203 = ((unint64_t)v201 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v202 = *(_QWORD *)v203;
  *(_BYTE *)(v202 + 8) = *(_BYTE *)(v203 + 8);
  v204 = (char *)((v723 + v202) & v721);
  v205 = (const void *)((v723 + v203) & v721);
  v683 = ((v682 | v123) + v675 + 8) & v152;
  v685 = v195;
  if (v691 == v718)
  {
    v206 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v727 + 48);
    v207 = v720;
    v208 = v206(v204, v691, v720);
    v209 = (unint64_t)v205;
    v210 = v691;
  }
  else
  {
    v211 = (uint64_t *)((unint64_t)&v204[v713] & 0xFFFFFFFFFFFFFFF8);
    if (v686 <= 0x7FFFFFFE)
    {
      v212 = *v211;
      if ((unint64_t)*v211 >= 0xFFFFFFFF)
        LODWORD(v212) = -1;
      v213 = v212 + 1;
      v214 = (uint64_t *)(((unint64_t)v205 + v713) & 0xFFFFFFFFFFFFFFF8);
      v215 = *v214;
      if ((unint64_t)*v214 >= 0xFFFFFFFF)
        LODWORD(v215) = -1;
      v216 = v215 + 1;
      if (v213 >= 2)
      {
        if (v216 < 2)
          goto LABEL_158;
LABEL_159:
        v226 = v668 + 16;
        memcpy(v204, v205, v709);
        goto LABEL_163;
      }
      if (v216 >= 2)
      {
LABEL_155:
        (*(void (**)(char *, uint64_t))(v727 + 8))(v204, v720);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v726 + 8))(((unint64_t)v211 + v706) & v707, v708);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_159;
      }
LABEL_161:
      (*(void (**)(char *, const void *, uint64_t))(v727 + 24))(v204, v205, v720);
      *v211 = *v214;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v726 + 24))(((unint64_t)v211 + v706) & v707, ((unint64_t)v214 + v706) & v707, v708);
      v227 = (_QWORD *)((v687 + (((unint64_t)v211 + v706) & v707)) & 0xFFFFFFFFFFFFFFF8);
      v228 = (v687 + (((unint64_t)v214 + v706) & v707)) & 0xFFFFFFFFFFFFF8;
      v229 = *(_QWORD *)v228;
      v228 += 15;
      *v227 = v229;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v230 = (_QWORD *)(((unint64_t)v227 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v230 = *(_QWORD *)(v228 & 0xFFFFFFFFFFFFFFF8);
      v230[1] = *(_QWORD *)((v228 & 0xFFFFFFFFFFFFFFF8) + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_162;
    }
    v207 = v708;
    v217 = ((unint64_t)v211 + v706) & v707;
    v206 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v726 + 48);
    v208 = v206((char *)v217, v670, v708);
    v209 = (v706 + (((unint64_t)v205 + v713) & 0xFFFFFFFFFFFFFFF8)) & v707;
    v210 = v670;
  }
  v218 = v206((char *)v209, v210, v207);
  if (!v208)
  {
    v211 = (uint64_t *)((unint64_t)&v204[v713] & 0xFFFFFFFFFFFFFFF8);
    if (v218)
      goto LABEL_155;
    v214 = (uint64_t *)(((unint64_t)v205 + v713) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_161;
  }
  if (v218)
    goto LABEL_159;
  v211 = (uint64_t *)((unint64_t)&v204[v713] & 0xFFFFFFFFFFFFFFF8);
  v214 = (uint64_t *)(((unint64_t)v205 + v713) & 0xFFFFFFFFFFFFFFF8);
LABEL_158:
  (*(void (**)(char *, const void *, uint64_t))(v727 + 16))(v204, v205, v720);
  *v211 = *v214;
  v219 = ((unint64_t)v211 + v706) & v707;
  v220 = ((unint64_t)v214 + v706) & v707;
  v221 = *(void (**)(unint64_t, unint64_t, uint64_t))(v726 + 16);
  swift_bridgeObjectRetain();
  v221(v219, v220, v708);
  v222 = (_QWORD *)((v687 + v219) & 0xFFFFFFFFFFFFF8);
  v223 = (_QWORD *)((v687 + v220) & 0xFFFFFFFFFFFFF8);
  *v222 = *v223;
  v224 = (_QWORD *)(((unint64_t)v222 + 15) & 0xFFFFFFFFFFFFFFF8);
  v225 = (_QWORD *)(((unint64_t)v223 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v224 = *v225;
  v224[1] = v225[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_162:
  v226 = v668 + 16;
LABEL_163:
  v231 = (_BYTE *)(((unint64_t)v205 + v226) | 1);
  v232 = (_BYTE *)(((unint64_t)v205 + v226) | 2);
  v233 = (uint64_t)v205 + v226 + 10;
  v235 = (uint64_t)v205 + v226 + 34;
  v234 = *((_BYTE *)v205 + v226);
  v236 = (_BYTE *)((unint64_t)&v204[v226] | 1);
  v237 = (_BYTE *)((unint64_t)&v204[v226] | 2);
  v238 = (uint64_t)&v204[v226 + 10];
  v239 = &v204[v226];
  *v239 = v234;
  *v236 = *v231;
  *v237 = *v232;
  v240 = v238 & 0xFFFFFFFFFFFFFFF8;
  v241 = *(void **)(v233 & 0xFFFFFFFFFFFFFFF8);
  v242 = *(void **)((v233 & 0xFFFFFFFFFFFFFFF8) + 8);
  v243 = *(_BYTE *)((v233 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_23AAAE478(v241, v242, v243);
  v244 = *(void **)v240;
  v245 = *(void **)(v240 + 8);
  *(_QWORD *)v240 = v241;
  *(_QWORD *)(v240 + 8) = v242;
  v246 = *(_BYTE *)(v240 + 16);
  *(_BYTE *)(v240 + 16) = v243;
  sub_23AAAEE10(v244, v245, v246);
  v247 = (unint64_t)(v239 + 34) & 0xFFFFFFFFFFFFFFF8;
  v248 = v235 & 0xFFFFFFFFFFFFFFF8;
  v249 = (uint64_t *)(v247 + 8);
  v250 = *(_QWORD *)(v247 + 16);
  v251 = (uint64_t *)((v235 & 0xFFFFFFFFFFFFFFF8) + 8);
  v252 = *(_QWORD *)(v248 + 16) >> 60;
  v83 = ((4 * (_DWORD)v252) & 0xC) == 0;
  v253 = (4 * v252) & 0xC | (v252 >> 2);
  v254 = v83;
  if (v253 == 15)
    v255 = 1;
  else
    v255 = v254;
  if (4 * ((v250 >> 60) & 3) && (((v250 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v250 >> 60) & 3))) != 0xF)
  {
    if (v255)
    {
      *(_QWORD *)v247 = *(_QWORD *)v248;
      v256 = *(_QWORD *)(v248 + 16);
      if (v256 >> 60 == 15)
      {
        *(_OWORD *)v249 = *(_OWORD *)v251;
      }
      else
      {
        v263 = *v251;
        sub_23AAAE668(*v251, *(_QWORD *)(v248 + 16));
        *(_QWORD *)(v247 + 8) = v263;
        *(_QWORD *)(v247 + 16) = v256;
      }
      v257 = v683;
      goto LABEL_187;
    }
LABEL_181:
    v260 = *(_OWORD *)v248;
    v261 = *(_OWORD *)(v248 + 16);
    v262 = *(_OWORD *)(v248 + 32);
    *(_QWORD *)(v247 + 48) = *(_QWORD *)(v248 + 48);
    *(_OWORD *)(v247 + 16) = v261;
    *(_OWORD *)(v247 + 32) = v262;
    *(_OWORD *)v247 = v260;
    v257 = v683;
    goto LABEL_188;
  }
  if (!v255)
  {
    if (v250 >> 60 != 15)
      sub_23AAAE53C(*v249, v250);
    goto LABEL_181;
  }
  *(_QWORD *)v247 = *(_QWORD *)v248;
  v258 = *(_QWORD *)(v248 + 16);
  if (v250 >> 60 != 15)
  {
    v257 = v683;
    if (v258 >> 60 != 15)
    {
      v264 = *v251;
      sub_23AAAE668(*v251, *(_QWORD *)(v248 + 16));
      v265 = *(_QWORD *)(v247 + 8);
      v266 = *(_QWORD *)(v247 + 16);
      *(_QWORD *)(v247 + 8) = v264;
      *(_QWORD *)(v247 + 16) = v258;
      sub_23AAAE53C(v265, v266);
      goto LABEL_187;
    }
    sub_23AB2D750(v247 + 8);
    goto LABEL_185;
  }
  v257 = v683;
  if (v258 >> 60 == 15)
  {
LABEL_185:
    *(_OWORD *)v249 = *(_OWORD *)v251;
    goto LABEL_187;
  }
  v259 = *v251;
  sub_23AAAE668(*v251, *(_QWORD *)(v248 + 16));
  *(_QWORD *)(v247 + 8) = v259;
  *(_QWORD *)(v247 + 16) = v258;
LABEL_187:
  v267 = *(_OWORD *)(v248 + 24);
  *(_BYTE *)(v247 + 40) = *(_BYTE *)(v248 + 40);
  *(_OWORD *)(v247 + 24) = v267;
  *(_QWORD *)(v247 + 48) = *(_QWORD *)(v248 + 48);
LABEL_188:
  v268 = (void **)((v247 + 63) & 0xFFFFFFFFFFFFFFF8);
  v269 = (void **)((v248 + 63) & 0xFFFFFFFFFFFFFFF8);
  v270 = *v269;
  v271 = *v268;
  *v268 = *v269;
  v272 = v270;

  *(_QWORD *)(((unint64_t)v268 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v269 + 15) & 0xFFFFFFFFFFFFF8);
  v273 = (char *)((v195 + v257) & v731);
  v274 = (char *)((v195 + v694) & v731);
  LODWORD(v271) = v690(v273, 1, v724);
  v275 = v690(v274, 1, v724);
  if ((_DWORD)v271)
  {
    if (!v275)
    {
      (*(void (**)(char *, char *, uint64_t))(v697 + 16))(v273, v274, v724);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v697 + 56))(v273, 0, 1, v724);
      goto LABEL_194;
    }
    goto LABEL_193;
  }
  if (v275)
  {
    (*(void (**)(char *, uint64_t))(v697 + 8))(v273, v724);
LABEL_193:
    memcpy(v273, v274, v696);
    goto LABEL_194;
  }
  (*(void (**)(char *, char *, uint64_t))(v697 + 24))(v273, v274, v724);
LABEL_194:
  v276 = (_QWORD *)((unint64_t)&v273[v699] & 0xFFFFFFFFFFFFF8);
  v277 = (_QWORD *)((unint64_t)&v274[v699] & 0xFFFFFFFFFFFFFFF8);
  *v276 = *v277;
  v278 = ((unint64_t)v276 + 15) & 0xFFFFFFFFFFFFFFF8;
  v279 = ((unint64_t)v277 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v278 = *(_QWORD *)v279;
  *(_BYTE *)(v278 + 8) = *(_BYTE *)(v279 + 8);
  v280 = (char *)((v717 + v278) & v715);
  v281 = (const void *)((v717 + v279) & v715);
  v677 = (v195 + v694) & v731;
  if (v689 == v710)
  {
    v282 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v170 + 48);
    v283 = v719;
    v284 = v282(v280, v689, v719);
    v285 = (unint64_t)v281;
    v286 = v689;
  }
  else
  {
    v287 = (uint64_t *)((unint64_t)&v280[v705] & 0xFFFFFFFFFFFFFFF8);
    if (v671 <= 0x7FFFFFFE)
    {
      v288 = *v287;
      if ((unint64_t)*v287 >= 0xFFFFFFFF)
        LODWORD(v288) = -1;
      v289 = v288 + 1;
      v290 = (uint64_t *)(((unint64_t)v281 + v705) & 0xFFFFFFFFFFFFFFF8);
      v291 = *v290;
      if ((unint64_t)*v290 >= 0xFFFFFFFF)
        LODWORD(v291) = -1;
      v292 = v291 + 1;
      if (v289 >= 2)
      {
        v293 = v673;
        if (v292 < 2)
          goto LABEL_213;
LABEL_214:
        v303 = v667 + 16;
        memcpy(v280, v281, v729);
        goto LABEL_218;
      }
      v293 = v673;
      if (v292 >= 2)
      {
LABEL_210:
        (*(void (**)(char *, uint64_t))(v170 + 8))(v280, v719);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v725 + 8))(((unint64_t)v287 + v702) & v703, v704);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_214;
      }
LABEL_216:
      (*(void (**)(char *, const void *, uint64_t))(v170 + 24))(v280, v281, v719);
      *v287 = *v290;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v725 + 24))(((unint64_t)v287 + v702) & v703, ((unint64_t)v290 + v702) & v703, v704);
      v304 = (_QWORD *)((v688 + (((unint64_t)v287 + v702) & v703)) & 0xFFFFFFFFFFFFFFF8);
      v305 = (v688 + (((unint64_t)v290 + v702) & v703)) & 0xFFFFFFFFFFFFF8;
      v306 = *(_QWORD *)v305;
      v305 += 15;
      *v304 = v306;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v307 = (_QWORD *)(((unint64_t)v304 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v307 = *(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF8);
      v307[1] = *(_QWORD *)((v305 & 0xFFFFFFFFFFFFFFF8) + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_217;
    }
    v294 = ((unint64_t)v287 + v702) & v703;
    v282 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v725 + 48);
    v283 = v704;
    v284 = v282((char *)v294, v669, v704);
    v285 = (v702 + (((unint64_t)v281 + v705) & 0xFFFFFFFFFFFFFFF8)) & v703;
    v286 = v669;
    v257 = v683;
  }
  v295 = v282((char *)v285, v286, v283);
  v293 = v673;
  if (!v284)
  {
    v287 = (uint64_t *)((unint64_t)&v280[v705] & 0xFFFFFFFFFFFFFFF8);
    if (v295)
    {
      v170 = v732;
      goto LABEL_210;
    }
    v290 = (uint64_t *)(((unint64_t)v281 + v705) & 0xFFFFFFFFFFFFFFF8);
    v170 = v732;
    goto LABEL_216;
  }
  if (v295)
    goto LABEL_214;
  v287 = (uint64_t *)((unint64_t)&v280[v705] & 0xFFFFFFFFFFFFFFF8);
  v290 = (uint64_t *)(((unint64_t)v281 + v705) & 0xFFFFFFFFFFFFFFF8);
LABEL_213:
  (*(void (**)(char *, const void *, uint64_t))(v732 + 16))(v280, v281, v719);
  *v287 = *v290;
  v296 = ((unint64_t)v287 + v702) & v703;
  v297 = ((unint64_t)v290 + v702) & v703;
  v298 = *(void (**)(unint64_t, unint64_t, uint64_t))(v725 + 16);
  swift_bridgeObjectRetain();
  v298(v296, v297, v704);
  v299 = (_QWORD *)((v688 + v296) & 0xFFFFFFFFFFFFF8);
  v300 = (_QWORD *)((v688 + v297) & 0xFFFFFFFFFFFFF8);
  *v299 = *v300;
  v301 = (_QWORD *)(((unint64_t)v299 + 15) & 0xFFFFFFFFFFFFFFF8);
  v302 = (_QWORD *)(((unint64_t)v300 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v301 = *v302;
  v301[1] = v302[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_217:
  v303 = v667 + 16;
LABEL_218:
  v308 = (_BYTE *)(((unint64_t)v281 + v303) | 1);
  v309 = (_BYTE *)(((unint64_t)v281 + v303) | 2);
  v310 = (uint64_t)v281 + v303 + 10;
  v312 = (uint64_t)v281 + v303 + 34;
  v311 = *((_BYTE *)v281 + v303);
  v313 = (_BYTE *)((unint64_t)&v280[v303] | 1);
  v314 = (_BYTE *)((unint64_t)&v280[v303] | 2);
  v315 = (uint64_t)&v280[v303 + 10];
  v316 = &v280[v303];
  *v316 = v311;
  *v313 = *v308;
  *v314 = *v309;
  v317 = v315 & 0xFFFFFFFFFFFFFFF8;
  v318 = *(void **)(v310 & 0xFFFFFFFFFFFFFFF8);
  v319 = *(void **)((v310 & 0xFFFFFFFFFFFFFFF8) + 8);
  v320 = *(_BYTE *)((v310 & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_23AAAE478(v318, v319, v320);
  v321 = *(void **)v317;
  v322 = *(void **)(v317 + 8);
  *(_QWORD *)v317 = v318;
  *(_QWORD *)(v317 + 8) = v319;
  v323 = *(_BYTE *)(v317 + 16);
  *(_BYTE *)(v317 + 16) = v320;
  sub_23AAAEE10(v321, v322, v323);
  v324 = (unint64_t)(v316 + 34) & 0xFFFFFFFFFFFFFFF8;
  v325 = v312 & 0xFFFFFFFFFFFFFFF8;
  v326 = (uint64_t *)(v324 + 8);
  v327 = *(_QWORD *)(v324 + 16);
  v328 = (uint64_t *)((v312 & 0xFFFFFFFFFFFFFFF8) + 8);
  v329 = *(_QWORD *)(v325 + 16) >> 60;
  v83 = ((4 * (_DWORD)v329) & 0xC) == 0;
  v330 = (4 * v329) & 0xC | (v329 >> 2);
  v331 = v83;
  if (v330 == 15)
    v332 = 1;
  else
    v332 = v331;
  if (4 * ((v327 >> 60) & 3) && (((v327 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v327 >> 60) & 3))) != 0xF)
  {
    if (v332)
    {
      *(_QWORD *)v324 = *(_QWORD *)v325;
      v333 = *(_QWORD *)(v325 + 16);
      goto LABEL_230;
    }
LABEL_234:
    v335 = *(_OWORD *)v325;
    v336 = *(_OWORD *)(v325 + 16);
    v337 = *(_OWORD *)(v325 + 32);
    *(_QWORD *)(v324 + 48) = *(_QWORD *)(v325 + 48);
    *(_OWORD *)(v324 + 16) = v336;
    *(_OWORD *)(v324 + 32) = v337;
    *(_OWORD *)v324 = v335;
    v338 = v686;
    v339 = v675;
    goto LABEL_240;
  }
  if (!v332)
  {
    if (v327 >> 60 != 15)
      sub_23AAAE53C(*v326, v327);
    goto LABEL_234;
  }
  *(_QWORD *)v324 = *(_QWORD *)v325;
  v333 = *(_QWORD *)(v325 + 16);
  if (v327 >> 60 != 15)
  {
    if (v333 >> 60 != 15)
    {
      v340 = *v328;
      sub_23AAAE668(*v328, *(_QWORD *)(v325 + 16));
      v341 = *(_QWORD *)(v324 + 8);
      v342 = *(_QWORD *)(v324 + 16);
      *(_QWORD *)(v324 + 8) = v340;
      *(_QWORD *)(v324 + 16) = v333;
      sub_23AAAE53C(v341, v342);
      goto LABEL_239;
    }
    sub_23AB2D750(v324 + 8);
    goto LABEL_237;
  }
LABEL_230:
  if (v333 >> 60 == 15)
  {
LABEL_237:
    *(_OWORD *)v326 = *(_OWORD *)v328;
    goto LABEL_239;
  }
  v334 = *v328;
  sub_23AAAE668(*v328, v333);
  *(_QWORD *)(v324 + 8) = v334;
  *(_QWORD *)(v324 + 16) = v333;
LABEL_239:
  v338 = v686;
  v339 = v675;
  v343 = *(_OWORD *)(v325 + 24);
  *(_BYTE *)(v324 + 40) = *(_BYTE *)(v325 + 40);
  *(_OWORD *)(v324 + 24) = v343;
  *(_QWORD *)(v324 + 48) = *(_QWORD *)(v325 + 48);
LABEL_240:
  v344 = (void **)((v324 + 63) & 0xFFFFFFFFFFFFFFF8);
  v345 = (void **)((v325 + 63) & 0xFFFFFFFFFFFFFFF8);
  v346 = *v345;
  v347 = *v344;
  *v344 = *v345;
  v348 = v346;

  *(_QWORD *)(((unint64_t)v344 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v345 + 15) & 0xFFFFFFFFFFFFF8);
  v349 = (unint64_t)&v273[v712];
  *(_BYTE *)v349 = *(_BYTE *)(v677 + v712);
  v350 = (v677 + v712) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)((v349 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)(v350 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v351 = (_QWORD *)((((unint64_t)&v273[v712] & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  v352 = (_QWORD *)((v350 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v351 = *v352;
  v351[1] = v352[1];
  v353 = ((unint64_t)v351 + 23) & 0xFFFFFFFFFFFFFFF8;
  v354 = ((unint64_t)v352 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v353 = *(_QWORD *)v354;
  *(_BYTE *)(v353 + 8) = *(_BYTE *)(v354 + 8);
  *(_QWORD *)(((unint64_t)v351 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v352 + 39) & 0xFFFFFFFFFFFFF8);
  v355 = (_QWORD *)((v339 + 15 + v257) & 0xFFFFFFFFFFFFFFF8);
  v356 = (_QWORD *)((v339 + 15 + v694) & 0xFFFFFFFFFFFFFFF8);
  *v355 = *v356;
  v355[1] = v356[1];
  v357 = ((unint64_t)v355 + 23) & 0xFFFFFFFFFFFFFFF8;
  v358 = ((unint64_t)v356 + 23) & 0xFFFFFFFFFFFFFFF8;
  v359 = *(_QWORD *)v358;
  *(_BYTE *)(v357 + 8) = *(_BYTE *)(v358 + 8);
  *(_QWORD *)v357 = v359;
  v360 = (void *)((v293 + v357) & v678);
  v361 = (const void *)((v293 + v358) & v678);
  v363 = v680;
  v362 = v681;
  if (v681)
    v364 = v681 - 1;
  else
    v364 = 0;
  v365 = v718 - 1;
  if (v364 <= v718 - 1)
    v366 = v718 - 1;
  else
    v366 = v364;
  if (v366 <= 0x7FFFFFFE)
    v367 = 2147483646;
  else
    v367 = v366;
  if (v680)
    v368 = v680 - 1;
  else
    v368 = 0;
  v369 = v710 - 1;
  if (v368 <= v710 - 1)
    v370 = v710 - 1;
  else
    v370 = v368;
  if (v370 <= 0x7FFFFFFE)
    v371 = 2147483646;
  else
    v371 = v370;
  if (v371 <= v367)
    v372 = v367;
  else
    v372 = v371;
  if (v372 <= 0x7FFFFFFF)
    v373 = 0x7FFFFFFF;
  else
    v373 = v372;
  if (v367 == v373)
  {
    if (v364 == v367)
    {
      v374 = v713;
      v375 = v692;
      v376 = v691;
      if (v681 >= 2)
      {
        v377 = ((uint64_t (*)(void *))v700)(v360);
        v362 = v681;
        if (v377 >= 2)
          goto LABEL_307;
      }
      goto LABEL_304;
    }
    v383 = (v723 + (((((unint64_t)v360 + v701) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v721;
    if (v365 != v367)
    {
      v387 = *(_QWORD *)((((v668 + v383 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
      if (v387 >= 0xFFFFFFFF)
        LODWORD(v387) = -1;
      v374 = v713;
      v375 = v692;
      v376 = v691;
      if ((v387 + 1) >= 2)
      {
LABEL_307:
        if (v364 == v367)
        {
          v381 = v668 + 16;
          v378 = v685;
          if (v362 < 2)
            goto LABEL_381;
          v394 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v700)(v361, v362, v375);
LABEL_345:
          if (v394 >= 2)
            goto LABEL_571;
LABEL_381:
          if (((unsigned int (*)(const void *, uint64_t, uint64_t))v700)(v361, 1, v375))
          {
            memcpy(v360, v361, __n);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v679 + 16))(v360, v361, v375);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v679 + 56))(v360, 0, 1, v375);
          }
          v413 = (_QWORD *)(((unint64_t)v360 + v701) & 0xFFFFFFFFFFFFF8);
          v414 = (_QWORD *)(((unint64_t)v361 + v701) & 0xFFFFFFFFFFFFFFF8);
          *v413 = *v414;
          v415 = ((unint64_t)v413 + 15) & 0xFFFFFFFFFFFFFFF8;
          v416 = ((unint64_t)v414 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v415 = *(_QWORD *)v416;
          *(_BYTE *)(v415 + 8) = *(_BYTE *)(v416 + 8);
          v417 = (char *)((v723 + v415) & v721);
          v418 = (const void *)((v723 + v416) & v721);
          if ((_DWORD)v376 == v718)
          {
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v727 + 48))((v723 + v416) & v721, v376, v720))goto LABEL_394;
          }
          else
          {
            v419 = (_QWORD *)(((unint64_t)v418 + v374) & 0xFFFFFFFFFFFFFFF8);
            if (v338 > 0x7FFFFFFE)
            {
              if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v726 + 48))(((unint64_t)v419 + v706) & v707, v670, v708))
              {
LABEL_394:
                v419 = (_QWORD *)(((unint64_t)v418 + v374) & 0xFFFFFFFFFFFFFFF8);
LABEL_395:
                (*(void (**)(char *, const void *, uint64_t))(v727 + 16))(v417, v418, v720);
                v421 = (_QWORD *)((unint64_t)&v417[v374] & 0xFFFFFFFFFFFFFFF8);
                *v421 = *v419;
                v422 = ((unint64_t)v421 + v706) & v707;
                v423 = ((unint64_t)v419 + v706) & v707;
                v424 = *(void (**)(unint64_t, unint64_t, uint64_t))(v726 + 16);
                swift_bridgeObjectRetain();
                v424(v422, v423, v708);
                v381 = v668 + 16;
                v425 = (_QWORD *)((v687 + v422) & 0xFFFFFFFFFFFFF8);
                v426 = (_QWORD *)((v687 + v423) & 0xFFFFFFFFFFFFF8);
                *v425 = *v426;
                v427 = (_QWORD *)(((unint64_t)v425 + 15) & 0xFFFFFFFFFFFFFFF8);
                v428 = (_QWORD *)(((unint64_t)v426 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v427 = *v428;
                v427[1] = v428[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                goto LABEL_396;
              }
            }
            else
            {
              v420 = *v419;
              if (*v419 >= 0xFFFFFFFFuLL)
                LODWORD(v420) = -1;
              if ((v420 + 1) < 2)
                goto LABEL_395;
            }
          }
          memcpy(v417, v418, v381);
LABEL_396:
          v429 = (_BYTE *)(((unint64_t)v418 + v381) | 1);
          v430 = (_BYTE *)(((unint64_t)v418 + v381) | 2);
          v431 = (uint64_t)v418 + v381 + 10;
          v433 = (uint64_t)v418 + v381 + 34;
          v432 = *((_BYTE *)v418 + v381);
          v434 = (_BYTE *)((unint64_t)&v417[v381] | 1);
          v435 = (_BYTE *)((unint64_t)&v417[v381] | 2);
          v436 = (uint64_t)&v417[v381 + 10];
          v437 = &v417[v381];
          *v437 = v432;
          *v434 = *v429;
          *v435 = *v430;
          v438 = v436 & 0xFFFFFFFFFFFFFFF8;
          v439 = *(void **)(v431 & 0xFFFFFFFFFFFFFFF8);
          v440 = *(void **)((v431 & 0xFFFFFFFFFFFFFFF8) + 8);
          v441 = *(_BYTE *)((v431 & 0xFFFFFFFFFFFFFFF8) + 16);
          sub_23AAAE478(v439, v440, v441);
          *(_QWORD *)v438 = v439;
          *(_QWORD *)(v438 + 8) = v440;
          *(_BYTE *)(v438 + 16) = v441;
          v442 = (unint64_t)(v437 + 34) & 0xFFFFFFFFFFFFFFF8;
          v443 = v433 & 0xFFFFFFFFFFFFFFF8;
          v444 = *(_QWORD *)(v443 + 16) >> 60;
          if (!(4 * (v444 & 3)) || ((v444 >> 2) & 0xFFFFFFF3 | (4 * (v444 & 3))) == 0xF)
          {
            v448 = (uint64_t *)(v443 + 8);
            *(_QWORD *)v442 = *(_QWORD *)v443;
            v449 = *(_QWORD *)(v443 + 16);
            if (v449 >> 60 == 15)
            {
              *(_OWORD *)(v442 + 8) = *(_OWORD *)v448;
            }
            else
            {
              v450 = *v448;
              sub_23AAAE668(*v448, *(_QWORD *)(v443 + 16));
              *(_QWORD *)(v442 + 8) = v450;
              *(_QWORD *)(v442 + 16) = v449;
            }
            v451 = *(_OWORD *)(v443 + 24);
            *(_BYTE *)(v442 + 40) = *(_BYTE *)(v443 + 40);
            *(_OWORD *)(v442 + 24) = v451;
            *(_QWORD *)(v442 + 48) = *(_QWORD *)(v443 + 48);
          }
          else
          {
            v445 = *(_OWORD *)v443;
            v446 = *(_OWORD *)(v443 + 16);
            v447 = *(_OWORD *)(v443 + 32);
            *(_QWORD *)(v442 + 48) = *(_QWORD *)(v443 + 48);
            *(_OWORD *)(v442 + 16) = v446;
            *(_OWORD *)(v442 + 32) = v447;
            *(_OWORD *)v442 = v445;
          }
          v452 = (_QWORD *)((v442 + 63) & 0xFFFFFFFFFFFFF8);
          v453 = (void **)((v443 + 63) & 0xFFFFFFFFFFFFFFF8);
          v454 = *v453;
          *v452 = *v453;
          *(_QWORD *)(((unint64_t)v452 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v453 + 15) & 0xFFFFFFFFFFFFF8);
          v455 = (void *)(((unint64_t)v360 + v378) & v731);
          v456 = (void *)(((unint64_t)v361 + v378) & v731);
          v457 = v454;
          if (v690((char *)v456, 1, v724))
          {
            memcpy(v455, v456, v696);
          }
          else
          {
            (*(void (**)(void *, void *, uint64_t))(v697 + 16))(v455, v456, v724);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v697 + 56))(v455, 0, 1, v724);
          }
          v458 = (_QWORD *)(((unint64_t)v455 + v699) & 0xFFFFFFFFFFFFF8);
          v459 = (_QWORD *)(((unint64_t)v456 + v699) & 0xFFFFFFFFFFFFFFF8);
          *v458 = *v459;
          v460 = ((unint64_t)v458 + 15) & 0xFFFFFFFFFFFFFFF8;
          v461 = ((unint64_t)v459 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v460 = *(_QWORD *)v461;
          *(_BYTE *)(v460 + 8) = *(_BYTE *)(v461 + 8);
          v462 = (_BYTE *)((v717 + v460) & v715);
          v463 = (_BYTE *)((v717 + v461) & v715);
          if (v689 == v710)
          {
            if (!(*(unsigned int (**)(unint64_t))(v732 + 48))((v717 + v461) & v715))
              goto LABEL_416;
          }
          else
          {
            v464 = (_QWORD *)((unint64_t)&v463[v705] & 0xFFFFFFFFFFFFFFF8);
            if (v671 > 0x7FFFFFFE)
            {
              if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v725 + 48))(((unint64_t)v464 + v702) & v703, v669, v704))
              {
LABEL_416:
                v464 = (_QWORD *)((unint64_t)&v463[v705] & 0xFFFFFFFFFFFFFFF8);
LABEL_417:
                (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v732 + 16))(v462, v463, v719);
                v467 = (_QWORD *)((unint64_t)&v462[v705] & 0xFFFFFFFFFFFFFFF8);
                *v467 = *v464;
                v468 = ((unint64_t)v467 + v702) & v703;
                v469 = ((unint64_t)v464 + v702) & v703;
                v470 = *(void (**)(unint64_t, unint64_t, uint64_t))(v725 + 16);
                swift_bridgeObjectRetain();
                v470(v468, v469, v704);
                v471 = (_QWORD *)((v688 + v468) & 0xFFFFFFFFFFFFF8);
                v472 = (_QWORD *)((v688 + v469) & 0xFFFFFFFFFFFFF8);
                *v471 = *v472;
                v473 = (_QWORD *)(((unint64_t)v471 + 15) & 0xFFFFFFFFFFFFFFF8);
                v474 = (_QWORD *)(((unint64_t)v472 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v473 = *v474;
                v473[1] = v474[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v466 = v667 + 16;
LABEL_418:
                v475 = (uint64_t)&v463[v466 + 10];
                v476 = (uint64_t)&v463[v466 + 34];
                v462[v466] = v463[v466];
                v477 = (uint64_t)&v462[v466 + 34];
                *(_BYTE *)((unint64_t)&v462[v466] | 1) = *(_BYTE *)((unint64_t)&v463[v466] | 1);
                *(_BYTE *)((unint64_t)&v462[v466] | 2) = *(_BYTE *)((unint64_t)&v463[v466] | 2);
                v478 = (unint64_t)&v462[v466 + 10] & 0xFFFFFFFFFFFFFFF8;
                v479 = *(void **)(v475 & 0xFFFFFFFFFFFFFFF8);
                v480 = *(void **)((v475 & 0xFFFFFFFFFFFFFFF8) + 8);
                v481 = *(_BYTE *)((v475 & 0xFFFFFFFFFFFFFFF8) + 16);
                sub_23AAAE478(v479, v480, v481);
                *(_QWORD *)v478 = v479;
                *(_QWORD *)(v478 + 8) = v480;
                *(_BYTE *)(v478 + 16) = v481;
                v482 = v477 & 0xFFFFFFFFFFFFFFF8;
                v483 = v476 & 0xFFFFFFFFFFFFFFF8;
                v484 = *(_QWORD *)(v483 + 16) >> 60;
                if (!(4 * (v484 & 3)) || ((v484 >> 2) & 0xFFFFFFF3 | (4 * (v484 & 3))) == 0xF)
                {
                  v489 = (uint64_t *)(v483 + 8);
                  *(_QWORD *)v482 = *(_QWORD *)v483;
                  v490 = *(_QWORD *)(v483 + 16);
                  if (v490 >> 60 == 15)
                  {
                    *(_OWORD *)(v482 + 8) = *(_OWORD *)v489;
                  }
                  else
                  {
                    v491 = *v489;
                    sub_23AAAE668(*v489, *(_QWORD *)(v483 + 16));
                    *(_QWORD *)(v482 + 8) = v491;
                    *(_QWORD *)(v482 + 16) = v490;
                  }
                  v488 = v672;
                  v492 = *(_OWORD *)(v483 + 24);
                  *(_BYTE *)(v482 + 40) = *(_BYTE *)(v483 + 40);
                  *(_OWORD *)(v482 + 24) = v492;
                  *(_QWORD *)(v482 + 48) = *(_QWORD *)(v483 + 48);
                }
                else
                {
                  v485 = *(_OWORD *)v483;
                  v486 = *(_OWORD *)(v483 + 16);
                  v487 = *(_OWORD *)(v483 + 32);
                  *(_QWORD *)(v482 + 48) = *(_QWORD *)(v483 + 48);
                  *(_OWORD *)(v482 + 16) = v486;
                  *(_OWORD *)(v482 + 32) = v487;
                  *(_OWORD *)v482 = v485;
                  v488 = v672;
                }
                v493 = (_QWORD *)((v482 + 63) & 0xFFFFFFFFFFFFF8);
                v494 = (void **)((v483 + 63) & 0xFFFFFFFFFFFFFFF8);
                v495 = *v494;
                *v493 = *v494;
                *(_QWORD *)(((unint64_t)v493 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v494
                                                                                             + 15) & 0xFFFFFFFFFFFFF8);
                *((_BYTE *)v455 + v712) = *((_BYTE *)v456 + v712);
                v496 = ((unint64_t)v455 + v712) & 0xFFFFFFFFFFFFFFF8;
                v497 = ((unint64_t)v456 + v712) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v496 + 8) = *(_QWORD *)(v497 + 8);
                v498 = (_OWORD *)((v496 + 23) & 0xFFFFFFFFFFFFFFF8);
                v499 = (_OWORD *)((v497 + 23) & 0xFFFFFFFFFFFFFFF8);
                *v498 = *v499;
                v500 = ((unint64_t)v498 + 23) & 0xFFFFFFFFFFFFFFF8;
                v501 = ((unint64_t)v499 + 23) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v500 = *(_QWORD *)v501;
                *(_BYTE *)(v500 + 8) = *(_BYTE *)(v501 + 8);
                *(_QWORD *)(((unint64_t)v498 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v499
                                                                                             + 39) & 0xFFFFFFFFFFFFF8);
                v502 = v495;
                swift_bridgeObjectRetain();
                return v488;
              }
            }
            else
            {
              v465 = *v464;
              if (*v464 >= 0xFFFFFFFFuLL)
                LODWORD(v465) = -1;
              if ((v465 + 1) < 2)
                goto LABEL_417;
            }
          }
          v466 = v667 + 16;
          memcpy(v462, v463, v729);
          goto LABEL_418;
        }
        v397 = (v723 + (((((unint64_t)v361 + v701) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v721;
        v378 = v685;
        if (v365 != v367)
        {
          v400 = *(_QWORD *)((((v668 + v397 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
          if (v400 >= 0xFFFFFFFF)
            LODWORD(v400) = -1;
          v381 = v668 + 16;
          if ((v400 + 1) >= 2)
            goto LABEL_571;
          goto LABEL_381;
        }
        if ((_DWORD)v376 == v718)
        {
          v398 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v727 + 48))(v397, v376, v720);
        }
        else
        {
          v402 = (unint64_t *)((v374 + v397) & 0xFFFFFFFFFFFFFFF8);
          if (v338 <= 0x7FFFFFFE)
          {
            v403 = *v402;
            if (v403 >= 0xFFFFFFFF)
              v398 = -1;
            else
              v398 = v403;
            v381 = v668 + 16;
            if (v398 + 1 < 2)
              goto LABEL_381;
            goto LABEL_380;
          }
          v398 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v726 + 48))(((unint64_t)v402 + v706) & v707, v670, v708);
        }
        v381 = v668 + 16;
LABEL_380:
        if (v398 < 2)
          goto LABEL_381;
        goto LABEL_571;
      }
      goto LABEL_304;
    }
    v376 = v691;
    if (v691 == v718)
    {
      v384 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v727 + 48))(v383, v691, v720);
      v362 = v681;
      v374 = v713;
      v375 = v692;
    }
    else
    {
      v374 = v713;
      v388 = (unint64_t *)((v713 + v383) & 0xFFFFFFFFFFFFFFF8);
      v375 = v692;
      if (v338 > 0x7FFFFFFE)
      {
        v384 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v726 + 48))(((unint64_t)v388 + v706) & v707, v670, v708);
        v362 = v681;
      }
      else
      {
        v389 = *v388;
        if (v389 >= 0xFFFFFFFF)
          v384 = -1;
        else
          v384 = v389;
        if (v384 + 1 < 2)
        {
LABEL_304:
          if (v364 == v367)
          {
            v380 = v724;
            v381 = v668 + 16;
            v378 = v685;
            if (v362 < 2)
              goto LABEL_428;
            v393 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v700)(v361, v362, v375);
LABEL_339:
            if (v393 >= 2)
              goto LABEL_431;
LABEL_428:
            v503 = ((uint64_t (*)(void *, uint64_t, uint64_t))v700)(v360, 1, v375);
            v504 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v700)(v361, 1, v375);
            if (v503)
            {
              if (!v504)
              {
                (*(void (**)(void *, const void *, uint64_t))(v679 + 16))(v360, v361, v375);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v679 + 56))(v360, 0, 1, v375);
                goto LABEL_438;
              }
            }
            else
            {
              if (!v504)
              {
                (*(void (**)(void *, const void *, uint64_t))(v679 + 24))(v360, v361, v375);
LABEL_438:
                v507 = (_QWORD *)(((unint64_t)v360 + v701) & 0xFFFFFFFFFFFFF8);
                v508 = (_QWORD *)(((unint64_t)v361 + v701) & 0xFFFFFFFFFFFFFFF8);
                *v507 = *v508;
                v509 = ((unint64_t)v507 + 15) & 0xFFFFFFFFFFFFFFF8;
                v510 = ((unint64_t)v508 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v509 = *(_QWORD *)v510;
                *(_BYTE *)(v509 + 8) = *(_BYTE *)(v510 + 8);
                v511 = (_BYTE *)((v723 + v509) & v721);
                v512 = (_BYTE *)((v723 + v510) & v721);
                if ((_DWORD)v376 == v718)
                {
                  v513 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v727 + 48);
                  v514 = v720;
                  v515 = v513(v511, v376, v720);
                  v516 = (unint64_t)v512;
                }
                else
                {
                  v517 = (uint64_t *)((unint64_t)&v511[v374] & 0xFFFFFFFFFFFFFFF8);
                  if (v338 <= 0x7FFFFFFE)
                  {
                    v518 = *v517;
                    if ((unint64_t)*v517 >= 0xFFFFFFFF)
                      LODWORD(v518) = -1;
                    v519 = v518 + 1;
                    v520 = (uint64_t *)((unint64_t)&v512[v374] & 0xFFFFFFFFFFFFFFF8);
                    v521 = *v520;
                    if ((unint64_t)*v520 >= 0xFFFFFFFF)
                      LODWORD(v521) = -1;
                    v522 = v521 + 1;
                    if (v519 >= 2)
                    {
                      if (v522 < 2)
                        goto LABEL_491;
                      goto LABEL_492;
                    }
                    if (v522 >= 2)
                    {
LABEL_458:
                      (*(void (**)(_BYTE *, uint64_t))(v727 + 8))(v511, v720);
                      swift_bridgeObjectRelease();
                      (*(void (**)(unint64_t, uint64_t))(v726 + 8))(((unint64_t)v517 + v706) & v707, v708);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      goto LABEL_492;
                    }
LABEL_494:
                    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v727 + 24))(v511, v512, v720);
                    *v517 = *v520;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    v551 = ((unint64_t)v517 + v706) & v707;
                    v552 = ((unint64_t)v520 + v706) & v707;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v726 + 24))(v551, v552, v708);
                    v553 = (_QWORD *)((v687 + v551) & 0xFFFFFFFFFFFFFFF8);
                    v554 = (v687 + v552) & 0xFFFFFFFFFFFFF8;
                    v555 = *(_QWORD *)v554;
                    v554 += 15;
                    *v553 = v555;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    v556 = (_QWORD *)(((unint64_t)v553 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *v556 = *(_QWORD *)(v554 & 0xFFFFFFFFFFFFFFF8);
                    v556[1] = *(_QWORD *)((v554 & 0xFFFFFFFFFFFFFFF8) + 8);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    goto LABEL_495;
                  }
                  v514 = v708;
                  v526 = ((unint64_t)v517 + v706) & v707;
                  v513 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v726 + 48);
                  v376 = v670;
                  v527 = v513((_BYTE *)v526, v670, v708);
                  v528 = v374;
                  v515 = v527;
                  v516 = (v706 + ((unint64_t)&v512[v528] & 0xFFFFFFFFFFFFFFF8)) & v707;
                  v378 = v685;
                }
                v529 = v513((_BYTE *)v516, v376, v514);
                if (v515)
                {
                  if (!v529)
                  {
                    v517 = (uint64_t *)((unint64_t)&v511[v713] & 0xFFFFFFFFFFFFFFF8);
                    v520 = (uint64_t *)((unint64_t)&v512[v713] & 0xFFFFFFFFFFFFFFF8);
LABEL_491:
                    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v727 + 16))(v511, v512, v720);
                    *v517 = *v520;
                    v543 = ((unint64_t)v517 + v706) & v707;
                    v544 = ((unint64_t)v520 + v706) & v707;
                    v545 = *(void (**)(unint64_t, unint64_t, uint64_t))(v726 + 16);
                    swift_bridgeObjectRetain();
                    v545(v543, v544, v708);
                    v546 = (_QWORD *)((v687 + v543) & 0xFFFFFFFFFFFFF8);
                    v547 = (_QWORD *)((v687 + v544) & 0xFFFFFFFFFFFFF8);
                    *v546 = *v547;
                    v548 = (_QWORD *)(((unint64_t)v546 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v549 = (_QWORD *)(((unint64_t)v547 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *v548 = *v549;
                    v548[1] = v549[1];
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
LABEL_495:
                    v550 = v668 + 16;
LABEL_496:
                    v557 = (uint64_t)&v512[v550 + 10];
                    v558 = (uint64_t)&v512[v550 + 34];
                    v511[v550] = v512[v550];
                    v559 = (uint64_t)&v511[v550 + 34];
                    *(_BYTE *)((unint64_t)&v511[v550] | 1) = *(_BYTE *)((unint64_t)&v512[v550] | 1);
                    *(_BYTE *)((unint64_t)&v511[v550] | 2) = *(_BYTE *)((unint64_t)&v512[v550] | 2);
                    v560 = (unint64_t)&v511[v550 + 10] & 0xFFFFFFFFFFFFFFF8;
                    v561 = *(void **)(v557 & 0xFFFFFFFFFFFFFFF8);
                    v562 = *(void **)((v557 & 0xFFFFFFFFFFFFFFF8) + 8);
                    v563 = *(_BYTE *)((v557 & 0xFFFFFFFFFFFFFFF8) + 16);
                    sub_23AAAE478(v561, v562, v563);
                    v564 = *(void **)v560;
                    v565 = *(void **)(v560 + 8);
                    *(_QWORD *)v560 = v561;
                    *(_QWORD *)(v560 + 8) = v562;
                    v566 = *(_BYTE *)(v560 + 16);
                    *(_BYTE *)(v560 + 16) = v563;
                    sub_23AAAEE10(v564, v565, v566);
                    v567 = v559 & 0xFFFFFFFFFFFFFFF8;
                    v568 = v558 & 0xFFFFFFFFFFFFFFF8;
                    v569 = (uint64_t *)((v559 & 0xFFFFFFFFFFFFFFF8) + 8);
                    v570 = *(_QWORD *)((v559 & 0xFFFFFFFFFFFFFFF8) + 16);
                    v571 = (uint64_t *)(v568 + 8);
                    v572 = *(_QWORD *)(v568 + 16) >> 60;
                    v83 = ((4 * (_DWORD)v572) & 0xC) == 0;
                    v573 = (4 * v572) & 0xC | (v572 >> 2);
                    v574 = v83;
                    if (v573 == 15)
                      v575 = 1;
                    else
                      v575 = v574;
                    if (!(4 * ((v570 >> 60) & 3))
                      || (((v570 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v570 >> 60) & 3))) == 0xF)
                    {
                      if (v575)
                      {
                        *(_QWORD *)v567 = *(_QWORD *)v568;
                        v576 = *(_QWORD *)(v568 + 16);
                        if (v570 >> 60 != 15)
                        {
                          if (v576 >> 60 != 15)
                          {
                            v581 = *v571;
                            sub_23AAAE668(*v571, *(_QWORD *)(v568 + 16));
                            v582 = *(_QWORD *)(v567 + 8);
                            v583 = *(_QWORD *)(v567 + 16);
                            *(_QWORD *)(v567 + 8) = v581;
                            *(_QWORD *)(v567 + 16) = v576;
                            sub_23AAAE53C(v582, v583);
                            goto LABEL_517;
                          }
                          sub_23AB2D750((uint64_t)v569);
                          goto LABEL_515;
                        }
LABEL_508:
                        if (v576 >> 60 != 15)
                        {
                          v577 = *v571;
                          sub_23AAAE668(*v571, v576);
                          *(_QWORD *)(v567 + 8) = v577;
                          *(_QWORD *)(v567 + 16) = v576;
LABEL_517:
                          v584 = *(_OWORD *)(v568 + 24);
                          *(_BYTE *)(v567 + 40) = *(_BYTE *)(v568 + 40);
                          *(_OWORD *)(v567 + 24) = v584;
                          *(_QWORD *)(v567 + 48) = *(_QWORD *)(v568 + 48);
LABEL_518:
                          v585 = (void **)((v567 + 63) & 0xFFFFFFFFFFFFFFF8);
                          v586 = (void **)((v568 + 63) & 0xFFFFFFFFFFFFFFF8);
                          v587 = *v586;
                          v588 = *v585;
                          *v585 = *v586;
                          v589 = v587;

                          *(_QWORD *)(((unint64_t)v585 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v586 + 15) & 0xFFFFFFFFFFFFF8);
                          v590 = (char *)(((unint64_t)v360 + v378) & v731);
                          v591 = (char *)(((unint64_t)v361 + v378) & v731);
                          v592 = v690(v590, 1, v724);
                          v593 = v690(v591, 1, v724);
                          if (v592)
                          {
                            if (!v593)
                            {
                              (*(void (**)(char *, char *, uint64_t))(v697 + 16))(v590, v591, v724);
                              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v697 + 56))(v590, 0, 1, v724);
                              goto LABEL_524;
                            }
                          }
                          else
                          {
                            if (!v593)
                            {
                              (*(void (**)(char *, char *, uint64_t))(v697 + 24))(v590, v591, v724);
LABEL_524:
                              v594 = (_QWORD *)((unint64_t)&v590[v699] & 0xFFFFFFFFFFFFF8);
                              v595 = (_QWORD *)((unint64_t)&v591[v699] & 0xFFFFFFFFFFFFFFF8);
                              *v594 = *v595;
                              v596 = ((unint64_t)v594 + 15) & 0xFFFFFFFFFFFFFFF8;
                              v597 = ((unint64_t)v595 + 15) & 0xFFFFFFFFFFFFFFF8;
                              *(_QWORD *)v596 = *(_QWORD *)v597;
                              *(_BYTE *)(v596 + 8) = *(_BYTE *)(v597 + 8);
                              v598 = (_BYTE *)((v717 + v596) & v715);
                              v599 = (_BYTE *)((v717 + v597) & v715);
                              if (v689 == v710)
                              {
                                v600 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v732 + 48);
                                v601 = v719;
                                v602 = v600(v598, v689, v719);
                                v603 = (unint64_t)v599;
                                v604 = v689;
                              }
                              else
                              {
                                v605 = (uint64_t *)((unint64_t)&v598[v705] & 0xFFFFFFFFFFFFFFF8);
                                if (v671 <= 0x7FFFFFFE)
                                {
                                  v606 = *v605;
                                  if ((unint64_t)*v605 >= 0xFFFFFFFF)
                                    LODWORD(v606) = -1;
                                  v607 = v606 + 1;
                                  v608 = (uint64_t *)((unint64_t)&v599[v705] & 0xFFFFFFFFFFFFFFF8);
                                  v609 = *v608;
                                  if ((unint64_t)*v608 >= 0xFFFFFFFF)
                                    LODWORD(v609) = -1;
                                  v610 = v609 + 1;
                                  if (v607 >= 2)
                                  {
                                    if (v610 < 2)
                                      goto LABEL_542;
                                    goto LABEL_543;
                                  }
                                  if (v610 >= 2)
                                  {
LABEL_539:
                                    (*(void (**)(_BYTE *, uint64_t))(v732 + 8))(v598, v719);
                                    swift_bridgeObjectRelease();
                                    (*(void (**)(unint64_t, uint64_t))(v725 + 8))(((unint64_t)v605 + v702) & v703, v704);
                                    swift_bridgeObjectRelease();
                                    swift_bridgeObjectRelease();
                                    goto LABEL_543;
                                  }
LABEL_545:
                                  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v732 + 24))(v598, v599, v719);
                                  *v605 = *v608;
                                  swift_bridgeObjectRetain();
                                  swift_bridgeObjectRelease();
                                  v621 = ((unint64_t)v605 + v702) & v703;
                                  v622 = ((unint64_t)v608 + v702) & v703;
                                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v725 + 24))(v621, v622, v704);
                                  v623 = (_QWORD *)((v688 + v621) & 0xFFFFFFFFFFFFFFF8);
                                  v624 = (v688 + v622) & 0xFFFFFFFFFFFFF8;
                                  v625 = *(_QWORD *)v624;
                                  v624 += 15;
                                  *v623 = v625;
                                  swift_bridgeObjectRetain();
                                  swift_bridgeObjectRelease();
                                  v626 = (_QWORD *)(((unint64_t)v623 + 15) & 0xFFFFFFFFFFFFFFF8);
                                  *v626 = *(_QWORD *)(v624 & 0xFFFFFFFFFFFFFFF8);
                                  v626[1] = *(_QWORD *)((v624 & 0xFFFFFFFFFFFFFFF8) + 8);
                                  swift_bridgeObjectRetain();
                                  swift_bridgeObjectRelease();
                                  goto LABEL_546;
                                }
                                v611 = ((unint64_t)v605 + v702) & v703;
                                v600 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v725 + 48);
                                v601 = v704;
                                v602 = v600((_BYTE *)v611, v669, v704);
                                v603 = (v702 + ((unint64_t)&v599[v705] & 0xFFFFFFFFFFFFFFF8)) & v703;
                                v604 = v669;
                              }
                              v612 = v600((_BYTE *)v603, v604, v601);
                              if (v602)
                              {
                                if (!v612)
                                {
                                  v605 = (uint64_t *)((unint64_t)&v598[v705] & 0xFFFFFFFFFFFFFFF8);
                                  v608 = (uint64_t *)((unint64_t)&v599[v705] & 0xFFFFFFFFFFFFFFF8);
LABEL_542:
                                  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v732 + 16))(v598, v599, v719);
                                  *v605 = *v608;
                                  v613 = ((unint64_t)v605 + v702) & v703;
                                  v614 = ((unint64_t)v608 + v702) & v703;
                                  v615 = *(void (**)(unint64_t, unint64_t, uint64_t))(v725 + 16);
                                  swift_bridgeObjectRetain();
                                  v615(v613, v614, v704);
                                  v616 = (_QWORD *)((v688 + v613) & 0xFFFFFFFFFFFFF8);
                                  v617 = (_QWORD *)((v688 + v614) & 0xFFFFFFFFFFFFF8);
                                  *v616 = *v617;
                                  v618 = (_QWORD *)(((unint64_t)v616 + 15) & 0xFFFFFFFFFFFFFFF8);
                                  v619 = (_QWORD *)(((unint64_t)v617 + 15) & 0xFFFFFFFFFFFFFFF8);
                                  *v618 = *v619;
                                  v618[1] = v619[1];
                                  swift_bridgeObjectRetain();
                                  swift_bridgeObjectRetain();
LABEL_546:
                                  v620 = v667 + 16;
LABEL_547:
                                  v627 = (uint64_t)&v599[v620 + 10];
                                  v628 = (uint64_t)&v599[v620 + 34];
                                  v598[v620] = v599[v620];
                                  v629 = (uint64_t)&v598[v620 + 34];
                                  *(_BYTE *)((unint64_t)&v598[v620] | 1) = *(_BYTE *)((unint64_t)&v599[v620] | 1);
                                  *(_BYTE *)((unint64_t)&v598[v620] | 2) = *(_BYTE *)((unint64_t)&v599[v620] | 2);
                                  v630 = (unint64_t)&v598[v620 + 10] & 0xFFFFFFFFFFFFFFF8;
                                  v631 = *(void **)(v627 & 0xFFFFFFFFFFFFFFF8);
                                  v632 = *(void **)((v627 & 0xFFFFFFFFFFFFFFF8) + 8);
                                  v633 = *(_BYTE *)((v627 & 0xFFFFFFFFFFFFFFF8) + 16);
                                  sub_23AAAE478(v631, v632, v633);
                                  v634 = *(void **)v630;
                                  v635 = *(void **)(v630 + 8);
                                  *(_QWORD *)v630 = v631;
                                  *(_QWORD *)(v630 + 8) = v632;
                                  v636 = *(_BYTE *)(v630 + 16);
                                  *(_BYTE *)(v630 + 16) = v633;
                                  sub_23AAAEE10(v634, v635, v636);
                                  v637 = v629 & 0xFFFFFFFFFFFFFFF8;
                                  v638 = v628 & 0xFFFFFFFFFFFFFFF8;
                                  v639 = (uint64_t *)((v629 & 0xFFFFFFFFFFFFFFF8) + 8);
                                  v640 = *(_QWORD *)((v629 & 0xFFFFFFFFFFFFFFF8) + 16);
                                  v641 = (uint64_t *)(v638 + 8);
                                  v642 = *(_QWORD *)(v638 + 16) >> 60;
                                  v83 = ((4 * (_DWORD)v642) & 0xC) == 0;
                                  v643 = (4 * v642) & 0xC | (v642 >> 2);
                                  v644 = v83;
                                  if (v643 == 15)
                                    v645 = 1;
                                  else
                                    v645 = v644;
                                  if (!(4 * ((v640 >> 60) & 3))
                                    || (((v640 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v640 >> 60) & 3))) == 0xF)
                                  {
                                    if (v645)
                                    {
                                      *(_QWORD *)v637 = *(_QWORD *)v638;
                                      v646 = *(_QWORD *)(v638 + 16);
                                      if (v640 >> 60 != 15)
                                      {
                                        if (v646 >> 60 != 15)
                                        {
                                          v651 = *v641;
                                          sub_23AAAE668(*v641, *(_QWORD *)(v638 + 16));
                                          v652 = *(_QWORD *)(v637 + 8);
                                          v653 = *(_QWORD *)(v637 + 16);
                                          *(_QWORD *)(v637 + 8) = v651;
                                          *(_QWORD *)(v637 + 16) = v646;
                                          sub_23AAAE53C(v652, v653);
                                          goto LABEL_568;
                                        }
                                        sub_23AB2D750((uint64_t)v639);
                                        goto LABEL_566;
                                      }
LABEL_559:
                                      if (v646 >> 60 != 15)
                                      {
                                        v647 = *v641;
                                        sub_23AAAE668(*v641, v646);
                                        *(_QWORD *)(v637 + 8) = v647;
                                        *(_QWORD *)(v637 + 16) = v646;
LABEL_568:
                                        v488 = v672;
                                        v654 = *(_OWORD *)(v638 + 24);
                                        *(_BYTE *)(v637 + 40) = *(_BYTE *)(v638 + 40);
                                        *(_OWORD *)(v637 + 24) = v654;
                                        *(_QWORD *)(v637 + 48) = *(_QWORD *)(v638 + 48);
                                        goto LABEL_569;
                                      }
LABEL_566:
                                      *(_OWORD *)v639 = *(_OWORD *)v641;
                                      goto LABEL_568;
                                    }
                                    if (v640 >> 60 != 15)
                                      sub_23AAAE53C(*v639, v640);
                                  }
                                  else if (v645)
                                  {
                                    *(_QWORD *)v637 = *(_QWORD *)v638;
                                    v646 = *(_QWORD *)(v638 + 16);
                                    goto LABEL_559;
                                  }
                                  v648 = *(_OWORD *)v638;
                                  v649 = *(_OWORD *)(v638 + 16);
                                  v650 = *(_OWORD *)(v638 + 32);
                                  *(_QWORD *)(v637 + 48) = *(_QWORD *)(v638 + 48);
                                  *(_OWORD *)(v637 + 16) = v649;
                                  *(_OWORD *)(v637 + 32) = v650;
                                  *(_OWORD *)v637 = v648;
                                  v488 = v672;
LABEL_569:
                                  v655 = (void **)((v637 + 63) & 0xFFFFFFFFFFFFFFF8);
                                  v656 = (void **)((v638 + 63) & 0xFFFFFFFFFFFFFFF8);
                                  v657 = *v656;
                                  v658 = *v655;
                                  *v655 = *v656;
                                  v659 = v657;

                                  *(_QWORD *)(((unint64_t)v655 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v656 + 15) & 0xFFFFFFFFFFFFF8);
                                  v660 = (unint64_t)&v590[v712];
                                  *(_BYTE *)v660 = v591[v712];
                                  v661 = (unint64_t)&v591[v712] & 0xFFFFFFFFFFFFFFF8;
                                  *(_QWORD *)((v660 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_QWORD *)(v661 + 8);
                                  swift_bridgeObjectRetain();
                                  swift_bridgeObjectRelease();
                                  v662 = (_QWORD *)((((unint64_t)&v590[v712] & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
                                  v663 = (_QWORD *)((v661 + 23) & 0xFFFFFFFFFFFFFFF8);
                                  *v662 = *v663;
                                  v662[1] = v663[1];
                                  v664 = ((unint64_t)v662 + 23) & 0xFFFFFFFFFFFFFFF8;
                                  v665 = ((unint64_t)v663 + 23) & 0xFFFFFFFFFFFFFFF8;
                                  *(_QWORD *)v664 = *(_QWORD *)v665;
                                  *(_BYTE *)(v664 + 8) = *(_BYTE *)(v665 + 8);
                                  *(_QWORD *)(((unint64_t)v662 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v663 + 39) & 0xFFFFFFFFFFFFF8);
                                  return v488;
                                }
LABEL_543:
                                v620 = v667 + 16;
                                memcpy(v598, v599, v729);
                                goto LABEL_547;
                              }
                              v605 = (uint64_t *)((unint64_t)&v598[v705] & 0xFFFFFFFFFFFFFFF8);
                              if (v612)
                                goto LABEL_539;
                              v608 = (uint64_t *)((unint64_t)&v599[v705] & 0xFFFFFFFFFFFFFFF8);
                              goto LABEL_545;
                            }
                            (*(void (**)(char *, uint64_t))(v697 + 8))(v590, v724);
                          }
                          memcpy(v590, v591, v696);
                          goto LABEL_524;
                        }
LABEL_515:
                        *(_OWORD *)v569 = *(_OWORD *)v571;
                        goto LABEL_517;
                      }
                      if (v570 >> 60 != 15)
                        sub_23AAAE53C(*v569, v570);
                    }
                    else if (v575)
                    {
                      *(_QWORD *)v567 = *(_QWORD *)v568;
                      v576 = *(_QWORD *)(v568 + 16);
                      goto LABEL_508;
                    }
                    v578 = *(_OWORD *)v568;
                    v579 = *(_OWORD *)(v568 + 16);
                    v580 = *(_OWORD *)(v568 + 32);
                    *(_QWORD *)(v567 + 48) = *(_QWORD *)(v568 + 48);
                    *(_OWORD *)(v567 + 16) = v579;
                    *(_OWORD *)(v567 + 32) = v580;
                    *(_OWORD *)v567 = v578;
                    goto LABEL_518;
                  }
LABEL_492:
                  v550 = v668 + 16;
                  memcpy(v511, v512, v709);
                  goto LABEL_496;
                }
                v517 = (uint64_t *)((unint64_t)&v511[v713] & 0xFFFFFFFFFFFFFFF8);
                if (v529)
                  goto LABEL_458;
                v520 = (uint64_t *)((unint64_t)&v512[v713] & 0xFFFFFFFFFFFFFFF8);
                goto LABEL_494;
              }
              (*(void (**)(void *, uint64_t))(v679 + 8))(v360, v375);
            }
            memcpy(v360, v361, __n);
            goto LABEL_438;
          }
          v395 = (v723 + (((((unint64_t)v361 + v701) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v721;
          if (v365 == v367)
          {
            v380 = v724;
            v381 = v668 + 16;
            v378 = v685;
            if ((_DWORD)v376 == v718)
            {
              v396 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v727 + 48))(v395, v376, v720);
              goto LABEL_427;
            }
            v401 = (unint64_t *)((v374 + v395) & 0xFFFFFFFFFFFFFFF8);
            if (v338 > 0x7FFFFFFE)
            {
              v396 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v726 + 48))(((unint64_t)v401 + v706) & v707, v670, v708);
              goto LABEL_427;
            }
LABEL_367:
            v410 = *v401;
            if (v410 >= 0xFFFFFFFF)
              v396 = -1;
            else
              v396 = v410;
            if (v396 + 1 < 2)
              goto LABEL_428;
            goto LABEL_427;
          }
          v399 = *(_QWORD *)((((v668 + v395 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
          if (v399 >= 0xFFFFFFFF)
            LODWORD(v399) = -1;
          v380 = v724;
          v381 = v668 + 16;
          v378 = v685;
          if ((v399 + 1) < 2)
            goto LABEL_428;
          goto LABEL_431;
        }
      }
    }
    if (v384 >= 2)
      goto LABEL_307;
    goto LABEL_304;
  }
  v378 = v685;
  v379 = ((unint64_t)v360 + v685) & v731;
  if (v371 != v373)
  {
    v380 = v724;
    v381 = v668 + 16;
    if (*(_QWORD *)(((v379 + v712) & 0xFFFFFFFFFFFFF8) + 8) <= 0xFFFFFFFEuLL)
      goto LABEL_341;
    goto LABEL_335;
  }
  if (v368 == v371)
  {
    v380 = v724;
    v381 = v668 + 16;
    if (v680 >= 2)
    {
      v382 = v690((char *)v379, v680, v724);
      v363 = v680;
      if (v382 >= 2)
        goto LABEL_341;
    }
    goto LABEL_335;
  }
  v385 = (v717 + ((((v699 + v379) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v715;
  if (v369 == v371)
  {
    v380 = v724;
    v381 = v668 + 16;
    if (v689 == v710)
    {
      v386 = (*(uint64_t (**)(unint64_t))(v732 + 48))(v385);
    }
    else
    {
      v391 = (unint64_t *)((v705 + v385) & 0xFFFFFFFFFFFFFFF8);
      if (v671 <= 0x7FFFFFFE)
      {
        v392 = *v391;
        if (v392 >= 0xFFFFFFFF)
          v386 = -1;
        else
          v386 = v392;
        if (v386 + 1 < 2)
          goto LABEL_335;
        goto LABEL_334;
      }
      v386 = (*(uint64_t (**)(unint64_t))(v725 + 48))(((unint64_t)v391 + v702) & v703);
    }
    v363 = v680;
LABEL_334:
    if (v386 >= 2)
      goto LABEL_341;
    goto LABEL_335;
  }
  v390 = *(_QWORD *)((((v667 + v385 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
  if (v390 >= 0xFFFFFFFF)
    LODWORD(v390) = -1;
  v380 = v724;
  v381 = v668 + 16;
  if ((v390 + 1) >= 2)
  {
LABEL_341:
    v405 = ((unint64_t)v361 + v685) & v731;
    if (v371 != v373)
    {
      v374 = v713;
      v375 = v692;
      v376 = v691;
      if (*(_QWORD *)(((v405 + v712) & 0xFFFFFFFFFFFFF8) + 8) < 0xFFFFFFFFuLL)
        goto LABEL_571;
      goto LABEL_381;
    }
    if (v368 == v371)
    {
      v374 = v713;
      v375 = v692;
      v376 = v691;
      if (v363 < 2)
        goto LABEL_381;
      v394 = v690((char *)v405, v363, v380);
      goto LABEL_345;
    }
    v407 = (v717 + ((((v699 + v405) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v715;
    if (v369 != v371)
    {
      v409 = *(_QWORD *)((((v667 + v407 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
      if (v409 >= 0xFFFFFFFF)
        LODWORD(v409) = -1;
      v374 = v713;
      v375 = v692;
      v376 = v691;
      if ((v409 + 1) >= 2)
        goto LABEL_571;
      goto LABEL_381;
    }
    if (v689 == v710)
    {
      v374 = v713;
      v375 = v692;
      v376 = v691;
      if ((*(unsigned int (**)(unint64_t))(v732 + 48))(v407) < 2)
        goto LABEL_381;
    }
    else
    {
      v411 = (unint64_t *)((v705 + v407) & 0xFFFFFFFFFFFFFFF8);
      v374 = v713;
      v375 = v692;
      v376 = v691;
      if (v671 <= 0x7FFFFFFE)
      {
        v412 = *v411;
        if (v412 >= 0xFFFFFFFF)
          v398 = -1;
        else
          v398 = v412;
        if (v398 + 1 < 2)
          goto LABEL_381;
        goto LABEL_380;
      }
      if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v725 + 48))(((unint64_t)v411 + v702) & v703, v669, v704) < 2)goto LABEL_381;
    }
LABEL_571:
    memcpy(v360, v361, v675 + 8);
    return v672;
  }
LABEL_335:
  v404 = ((unint64_t)v361 + v685) & v731;
  if (v371 == v373)
  {
    if (v368 == v371)
    {
      v374 = v713;
      v375 = v692;
      v376 = v691;
      if (v363 < 2)
        goto LABEL_428;
      v393 = v690((char *)v404, v363, v380);
      goto LABEL_339;
    }
    v406 = (v717 + ((((v699 + v404) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v715;
    if (v369 == v371)
    {
      v374 = v713;
      v375 = v692;
      v376 = v691;
      if (v689 == v710)
      {
        v396 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v732 + 48))(v406, v689, v719);
      }
      else
      {
        v401 = (unint64_t *)((v705 + v406) & 0xFFFFFFFFFFFFFFF8);
        if (v671 <= 0x7FFFFFFE)
          goto LABEL_367;
        v396 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v725 + 48))(((unint64_t)v401 + v702) & v703, v669, v704);
      }
LABEL_427:
      if (v396 >= 2)
        goto LABEL_431;
      goto LABEL_428;
    }
    v408 = *(_QWORD *)((((v667 + v406 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
    if (v408 >= 0xFFFFFFFF)
      LODWORD(v408) = -1;
    v374 = v713;
    v375 = v692;
    v376 = v691;
    if ((v408 + 1) < 2)
      goto LABEL_428;
  }
  else
  {
    v374 = v713;
    v375 = v692;
    v376 = v691;
    if (*(_QWORD *)(((v404 + v712) & 0xFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      goto LABEL_428;
  }
LABEL_431:
  if (!((unsigned int (*)(void *, uint64_t, uint64_t))v700)(v360, 1, v375))
    (*(void (**)(void *, uint64_t))(v679 + 8))(v360, v375);
  v505 = (v723 + (((((unint64_t)v360 + v701) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v721;
  if ((_DWORD)v376 == v718)
  {
    v506 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v727 + 48))((v723 + (((((unint64_t)v360 + v701) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v721, v376, v720);
LABEL_460:
    v525 = v675 + 8;
    if (v506)
      goto LABEL_463;
    v523 = (uint64_t *)((v374 + v505) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_462;
  }
  v523 = (uint64_t *)((v374 + v505) & 0xFFFFFFFFFFFFFFF8);
  if (v338 > 0x7FFFFFFE)
  {
    v506 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v726 + 48))(((unint64_t)v523 + v706) & v707, v670, v708);
    goto LABEL_460;
  }
  v524 = *v523;
  if ((unint64_t)*v523 >= 0xFFFFFFFF)
    LODWORD(v524) = -1;
  v525 = v675 + 8;
  if ((v524 + 1) < 2)
  {
LABEL_462:
    (*(void (**)(unint64_t, uint64_t))(v727 + 8))(v505, v720);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v726 + 8))(((unint64_t)v523 + v706) & v707, v708);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_463:
  v530 = v505 + v381;
  sub_23AAAEE10(*(void **)((v530 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v530 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v530 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
  v531 = (v530 + 34) & 0xFFFFFFFFFFFFFFF8;
  v532 = *(_QWORD *)(v531 + 16);
  v533 = ((4 * (v532 >> 60)) & 0xC | ((v532 >> 60) >> 2)) != 0xF && ((4 * (v532 >> 60)) & 0xC) != 0;
  if (v532 >> 60 != 15 && !v533)
    sub_23AAAE53C(*(_QWORD *)(v531 + 8), v532);

  v534 = ((unint64_t)v360 + v378) & v731;
  v488 = v672;
  if (!v690((char *)v534, 1, v380))
    (*(void (**)(unint64_t, uint64_t))(v697 + 8))(v534, v380);
  v535 = (v717 + ((((v699 + v534) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v715;
  if (v689 == v710)
  {
    v536 = v705;
    if (!(*(unsigned int (**)(size_t))(v732 + 48))((v717
                                                              + ((((v699 + v534) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v715))
      goto LABEL_480;
  }
  else
  {
    v536 = v705;
    v537 = (uint64_t *)((v705 + v535) & 0xFFFFFFFFFFFFFFF8);
    if (v671 <= 0x7FFFFFFE)
    {
      v538 = *v537;
      if ((unint64_t)*v537 >= 0xFFFFFFFF)
        LODWORD(v538) = -1;
      if ((v538 + 1) >= 2)
        goto LABEL_482;
      goto LABEL_481;
    }
    if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v725 + 48))(((unint64_t)v537 + v702) & v703, v669, v704))
    {
LABEL_480:
      v537 = (uint64_t *)((v536 + v535) & 0xFFFFFFFFFFFFFFF8);
LABEL_481:
      (*(void (**)(unint64_t, uint64_t))(v732 + 8))(v535, v719);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v725 + 8))(((unint64_t)v537 + v702) & v703, v704);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
LABEL_482:
  v539 = v535 + v729;
  sub_23AAAEE10(*(void **)((v539 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v539 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v539 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
  v540 = (v539 + 34) & 0xFFFFFFFFFFFFFFF8;
  v541 = *(_QWORD *)(v540 + 16);
  v542 = ((4 * (v541 >> 60)) & 0xC | ((v541 >> 60) >> 2)) != 0xF && ((4 * (v541 >> 60)) & 0xC) != 0;
  if (v541 >> 60 != 15 && !v542)
    sub_23AAAE53C(*(_QWORD *)(v540 + 8), v541);

  swift_bridgeObjectRelease();
  memcpy(v360, v361, v525);
  return v488;
}

uint64_t sub_23AB2D750(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

uint64_t sub_23AB2D784(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  size_t v55;
  size_t v56;
  uint64_t v57;
  size_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  const void *v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  uint64_t *v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  unint64_t v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _QWORD *v85;
  _QWORD *v86;
  size_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _OWORD *v91;
  _OWORD *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  void *v98;
  const void *v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  unint64_t v103;
  unint64_t v104;
  void *v105;
  const void *v106;
  uint64_t *v107;
  uint64_t v108;
  size_t v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  __int128 v116;
  unint64_t v117;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _QWORD *v122;
  _QWORD *v123;
  void *v124;
  const void *v125;
  _QWORD *v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t v129;
  void *v130;
  const void *v131;
  uint64_t *v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  unint64_t v140;
  __int128 v141;
  unint64_t v142;
  unint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _QWORD *v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  _OWORD *v151;
  _OWORD *v152;
  unint64_t v153;
  unint64_t v154;
  _OWORD *v155;
  _OWORD *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  void *v160;
  const void *v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  unsigned int v170;
  unint64_t v171;
  unint64_t v172;
  unsigned int v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  unint64_t v182;
  unint64_t v183;
  void *v184;
  const void *v185;
  uint64_t *v186;
  uint64_t v187;
  size_t v188;
  _QWORD *v189;
  unint64_t v190;
  unint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t v195;
  __int128 v196;
  unint64_t v197;
  unint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  _QWORD *v202;
  _QWORD *v203;
  void *v204;
  const void *v205;
  _QWORD *v206;
  _QWORD *v207;
  unint64_t v208;
  unint64_t v209;
  void *v210;
  const void *v211;
  _QWORD *v212;
  uint64_t v213;
  _QWORD *v214;
  unint64_t v215;
  unint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  unint64_t v219;
  unint64_t v220;
  __int128 v221;
  unint64_t v222;
  unint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  _QWORD *v227;
  _QWORD *v228;
  unint64_t v229;
  unint64_t v230;
  _OWORD *v231;
  _OWORD *v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v236;
  unint64_t v237;
  size_t __n;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  uint64_t v245;
  uint64_t v246;
  size_t v247;
  uint64_t v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  unsigned int (*v255)(unint64_t, uint64_t, uint64_t);
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  unsigned int (*v260)(uint64_t, uint64_t, uint64_t);
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  size_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  size_t v273;
  size_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  size_t v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v292;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_DWORD *)(v4 + 80) & 0xF8;
  v276 = swift_getAssociatedTypeWitness();
  v277 = *(_QWORD *)(v276 - 8);
  v6 = *(_DWORD *)(v277 + 80) & 0xF8;
  v263 = swift_getAssociatedTypeWitness();
  v287 = *(_QWORD *)(v263 - 8);
  v289 = *(unsigned __int8 *)(v287 + 80);
  v7 = v6 | v289 | 7;
  v8 = v6 | v289 | v5;
  v280 = swift_getAssociatedTypeWitness();
  v253 = *(_QWORD *)(v280 - 8);
  v9 = *(_DWORD *)(v253 + 80) & 0xF8;
  v275 = swift_getAssociatedTypeWitness();
  v278 = *(_QWORD *)(v275 - 8);
  v10 = *(_DWORD *)(v278 + 80) & 0xF8;
  v11 = v4;
  v258 = swift_getAssociatedTypeWitness();
  v282 = *(_QWORD *)(v258 - 8);
  v284 = *(unsigned __int8 *)(v282 + 80);
  v12 = v10 | v284 | 7;
  v268 = v12 | v9;
  v13 = v8 | v268;
  v252 = a1;
  v14 = v13 + 9 + a1;
  v15 = v14 & ~v13;
  v248 = v13 + 9;
  v270 = v13;
  v16 = (v13 + 9 + a2) & ~v13;
  v260 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v264 = AssociatedTypeWitness;
  v239 = v11;
  v245 = v14;
  v246 = v13 + 9 + a2;
  if (v260(v16, 1, AssociatedTypeWitness))
  {
    v17 = *(_DWORD *)(v11 + 84);
    v18 = *(_QWORD *)(v11 + 64);
    if (v17)
      v19 = v18;
    else
      v19 = v18 + 1;
    memcpy((void *)v15, (const void *)v16, v19);
  }
  else
  {
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))(v15, v16, AssociatedTypeWitness);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, AssociatedTypeWitness);
    v17 = *(_DWORD *)(v11 + 84);
    v18 = *(_QWORD *)(v11 + 64);
  }
  v20 = v289;
  v250 = v17;
  if (v17)
    v21 = v18;
  else
    v21 = v18 + 1;
  v22 = (_QWORD *)(((v15 | 7) + v21) & 0xFFFFFFFFFFFFFFF8);
  v274 = v21;
  v23 = (_QWORD *)(((v16 | 7) + v21) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v23;
  v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  v288 = ~v7;
  v290 = v7 + 9;
  v26 = (void *)((v7 + 9 + v24) & ~v7);
  v27 = (const void *)((v7 + 9 + v25) & ~v7);
  v28 = *(unsigned int *)(v277 + 84);
  v242 = *(_DWORD *)(v287 + 84);
  if (v28 <= v242)
    v29 = *(_DWORD *)(v287 + 84);
  else
    v29 = *(_DWORD *)(v277 + 84);
  if (v29 <= 0x7FFFFFFE)
    v30 = 2147483646;
  else
    v30 = v29;
  v31 = *(_QWORD *)(v277 + 64) + 7;
  v262 = ~v20;
  v261 = v20 + 8;
  v251 = *(_QWORD *)(v287 + 64) + 7;
  v279 = ((((v251 + ((v20 + 8 + (v31 & 0xFFFFFFFFFFFFFFF8)) & ~v20)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v286 = v30;
  v267 = v31;
  v259 = *(_DWORD *)(v277 + 84);
  v244 = v29;
  v237 = (((v251 + ((v20 + 8 + (v31 & 0xFFFFFFFFFFFFFFF8)) & ~v20)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if ((_DWORD)v28 == v30)
  {
    v32 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v277 + 48))(v27, v28, v276);
  }
  else
  {
    v33 = (uint64_t *)(((unint64_t)v27 + v31) & 0xFFFFFFFFFFFFFFF8);
    if (v29 <= 0x7FFFFFFE)
    {
      v34 = *v33;
      if ((unint64_t)*v33 >= 0xFFFFFFFF)
        LODWORD(v34) = -1;
      v35 = v253;
      if ((v34 + 1) >= 2)
        goto LABEL_25;
      goto LABEL_27;
    }
    v32 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v287 + 48))(((unint64_t)v33 + v261) & v262, v242, v263);
  }
  v35 = v253;
  if (v32)
  {
LABEL_25:
    v36 = v279;
    memcpy(v26, v27, v279);
    goto LABEL_28;
  }
  v33 = (uint64_t *)(((unint64_t)v27 + v31) & 0xFFFFFFFFFFFFFFF8);
LABEL_27:
  (*(void (**)(void *, const void *, uint64_t))(v277 + 32))(v26, v27, v276);
  v37 = (_QWORD *)(((unint64_t)v26 + v31) & 0xFFFFFFFFFFFFFFF8);
  *v37 = *v33;
  v38 = ((unint64_t)v37 + v261) & v262;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v287 + 32))(v38, ((unint64_t)v33 + v261) & v262, v263);
  v39 = (_QWORD *)((v251 + v38) & 0xFFFFFFFFFFFFF8);
  v40 = (_QWORD *)((v251 + (((unint64_t)v33 + v261) & v262)) & 0xFFFFFFFFFFFFF8);
  *v39 = *v40;
  *(_OWORD *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFF8);
  v36 = v279;
LABEL_28:
  v41 = (uint64_t)v27 + v36 + 34;
  *((_BYTE *)v26 + v36) = *((_BYTE *)v27 + v36);
  *(_BYTE *)(((unint64_t)v26 + v36) | 1) = *(_BYTE *)(((unint64_t)v27 + v36) | 1);
  *(_BYTE *)(((unint64_t)v26 + v36) | 2) = *(_BYTE *)(((unint64_t)v27 + v36) | 2);
  v42 = ((unint64_t)v26 + v36 + 10) & 0xFFFFFFFFFFFFFFF8;
  v43 = ((unint64_t)v27 + v36 + 10) & 0xFFFFFFFFFFFFFFF8;
  v44 = *(_OWORD *)v43;
  *(_BYTE *)(v42 + 16) = *(_BYTE *)(v43 + 16);
  *(_OWORD *)v42 = v44;
  v45 = ((unint64_t)v26 + v36 + 34) & 0xFFFFFFFFFFFFFFF8;
  v46 = *(_OWORD *)(v41 & 0xFFFFFFFFFFFFFFF8);
  v47 = *(_OWORD *)((v41 & 0xFFFFFFFFFFFFFFF8) + 16);
  v48 = *(_OWORD *)((v41 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_QWORD *)(v45 + 48) = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v45 + 16) = v47;
  *(_OWORD *)(v45 + 32) = v48;
  *(_OWORD *)v45 = v46;
  v49 = (_QWORD *)((v45 + 63) & 0xFFFFFFFFFFFFF8);
  v50 = (_QWORD *)(((v41 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFF8);
  *v49 = *v50;
  *(_QWORD *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFF8);
  v265 = v274 + 7;
  v51 = ((((((((v290 + ((((v274 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v288) + v36 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v52 = (v15 + v268 + v51) & ~v268;
  v53 = (v16 + v268 + v51) & ~v268;
  v255 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v35 + 48);
  if (v255(v53, 1, v280))
  {
    v54 = *(_DWORD *)(v35 + 84);
    v55 = *(_QWORD *)(v35 + 64);
    if (v54)
      v56 = *(_QWORD *)(v35 + 64);
    else
      v56 = v55 + 1;
    memcpy((void *)v52, (const void *)v53, v56);
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v35 + 32))(v52, v53, v280);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v52, 0, 1, v280);
    v54 = *(_DWORD *)(v35 + 84);
    v55 = *(_QWORD *)(v35 + 64);
  }
  v57 = v284;
  v272 = ~v270;
  v292 = ~v268;
  v249 = v54;
  if (v54)
    v58 = v55;
  else
    v58 = v55 + 1;
  v59 = (_QWORD *)(((v52 | 7) + v58) & 0xFFFFFFFFFFFFFFF8);
  v273 = v58;
  v60 = (_QWORD *)(((v53 | 7) + v58) & 0xFFFFFFFFFFFFFFF8);
  *v59 = *v60;
  v61 = ((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFFFF8;
  v62 = ((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *(_BYTE *)(v61 + 8) = *(_BYTE *)(v62 + 8);
  v283 = ~v12;
  v285 = v12 + 9;
  v63 = (void *)((v12 + 9 + v61) & ~v12);
  v64 = (const void *)((v12 + 9 + v62) & ~v12);
  v65 = *(_DWORD *)(v278 + 84);
  v241 = *(_DWORD *)(v282 + 84);
  if (v65 <= v241)
    v66 = *(_DWORD *)(v282 + 84);
  else
    v66 = *(_DWORD *)(v278 + 84);
  if (v66 <= 0x7FFFFFFE)
    v67 = 2147483646;
  else
    v67 = v66;
  v68 = *(_QWORD *)(v278 + 64) + 7;
  v257 = ~v57;
  v256 = v57 + 8;
  v69 = *(_QWORD *)(v282 + 64) + 7;
  v70 = ((((v69 + ((v57 + 8 + (v68 & 0xFFFFFFFFFFFFFFF8)) & ~v57)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v281 = v67;
  v266 = v68;
  v254 = *(_DWORD *)(v278 + 84);
  v243 = v66;
  v240 = v69;
  v236 = (((v69 + ((v57 + 8 + (v68 & 0xFFFFFFFFFFFFFFF8)) & ~v57)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v65 == v67)
  {
    if (!(*(unsigned int (**)(const void *))(v278 + 48))(v64))
      goto LABEL_53;
LABEL_52:
    memcpy(v63, v64, v70);
    goto LABEL_55;
  }
  v71 = (uint64_t *)(((unint64_t)v64 + v68) & 0xFFFFFFFFFFFFFFF8);
  if (v66 <= 0x7FFFFFFE)
  {
    v72 = *v71;
    if ((unint64_t)*v71 >= 0xFFFFFFFF)
      LODWORD(v72) = -1;
    if ((v72 + 1) < 2)
      goto LABEL_54;
    goto LABEL_52;
  }
  if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v282 + 48))(((unint64_t)v71 + v256) & v257, v241, v258))
  {
    goto LABEL_52;
  }
LABEL_53:
  v71 = (uint64_t *)(((unint64_t)v64 + v68) & 0xFFFFFFFFFFFFFFF8);
LABEL_54:
  (*(void (**)(void *, const void *, uint64_t))(v278 + 32))(v63, v64, v275);
  v73 = (_QWORD *)(((unint64_t)v63 + v68) & 0xFFFFFFFFFFFFFFF8);
  *v73 = *v71;
  v74 = ((unint64_t)v73 + v256) & v257;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v282 + 32))(v74, ((unint64_t)v71 + v256) & v257, v258);
  v75 = (_QWORD *)((v69 + v74) & 0xFFFFFFFFFFFFF8);
  v76 = (_QWORD *)((v69 + (((unint64_t)v71 + v256) & v257)) & 0xFFFFFFFFFFFFF8);
  *v75 = *v76;
  *(_OWORD *)(((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v76 + 15) & 0xFFFFFFFFFFFFF8);
LABEL_55:
  *((_BYTE *)v63 + v70) = *((_BYTE *)v64 + v70);
  *(_BYTE *)(((unint64_t)v63 + v70) | 1) = *(_BYTE *)(((unint64_t)v64 + v70) | 1);
  *(_BYTE *)(((unint64_t)v63 + v70) | 2) = *(_BYTE *)(((unint64_t)v64 + v70) | 2);
  v77 = ((unint64_t)v63 + v70 + 10) & 0xFFFFFFFFFFFFFFF8;
  v78 = ((unint64_t)v64 + v70 + 10) & 0xFFFFFFFFFFFFFFF8;
  v79 = *(_OWORD *)v78;
  *(_BYTE *)(v77 + 16) = *(_BYTE *)(v78 + 16);
  *(_OWORD *)v77 = v79;
  v80 = ((unint64_t)v63 + v70 + 34) & 0xFFFFFFFFFFFFFFF8;
  v81 = ((unint64_t)v64 + v70 + 34) & 0xFFFFFFFFFFFFFFF8;
  v82 = *(_OWORD *)v81;
  v83 = *(_OWORD *)(v81 + 16);
  v84 = *(_OWORD *)(v81 + 32);
  *(_QWORD *)(v80 + 48) = *(_QWORD *)(v81 + 48);
  *(_OWORD *)(v80 + 16) = v83;
  *(_OWORD *)(v80 + 32) = v84;
  *(_OWORD *)v80 = v82;
  v85 = (_QWORD *)((v80 + 63) & 0xFFFFFFFFFFFFF8);
  v86 = (_QWORD *)((v81 + 63) & 0xFFFFFFFFFFFFF8);
  *v85 = *v86;
  *(_QWORD *)(((unint64_t)v85 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v86 + 15) & 0xFFFFFFFFFFFFF8);
  v87 = v273 + 7;
  v88 = ((((((((v285 + ((((v273 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v283) + v70 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  *(_BYTE *)(v88 + v52) = *(_BYTE *)(v88 + v53);
  v89 = (v88 + v52) & 0xFFFFFFFFFFFFFFF8;
  v90 = (v88 + v53) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v89 + 8) = *(_QWORD *)(v90 + 8);
  v91 = (_OWORD *)((v89 + 23) & 0xFFFFFFFFFFFFFFF8);
  v92 = (_OWORD *)((v90 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v91 = *v92;
  v93 = ((unint64_t)v91 + 23) & 0xFFFFFFFFFFFFFFF8;
  v94 = ((unint64_t)v92 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v93 = *(_QWORD *)v94;
  *(_BYTE *)(v93 + 8) = *(_BYTE *)(v94 + 8);
  *(_QWORD *)(((unint64_t)v91 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v92 + 39) & 0xFFFFFFFFFFFFF8);
  v95 = v51 + v268;
  v96 = (v51 + v268) & v292;
  v269 = v88;
  v97 = (((((v88 + v96) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  v98 = (void *)(((v245 | v270) + v97 + 8) & v272);
  v99 = (const void *)(((v246 | v270) + v97 + 8) & v272);
  v100 = v264;
  __n = v97 + 8;
  if (v260((uint64_t)v99, 1, v264))
  {
    memcpy(v98, v99, v274);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v239 + 32))(v98, v99, v264);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v239 + 56))(v98, 0, 1, v264);
  }
  v101 = (_QWORD *)(((unint64_t)v98 + v265) & 0xFFFFFFFFFFFFF8);
  v271 = ((v246 | v270) + v97 + 8) & v272;
  v102 = (_QWORD *)(((unint64_t)v99 + v265) & 0xFFFFFFFFFFFFFFF8);
  *v101 = *v102;
  v103 = ((unint64_t)v101 + 15) & 0xFFFFFFFFFFFFFFF8;
  v104 = ((unint64_t)v102 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v103 = *(_QWORD *)v104;
  *(_BYTE *)(v103 + 8) = *(_BYTE *)(v104 + 8);
  v105 = (void *)((v290 + v103) & v288);
  v106 = (const void *)((v290 + v104) & v288);
  if (v259 == v286)
  {
    if (!(*(unsigned int (**)(unint64_t))(v277 + 48))((v290 + v104) & v288))
      goto LABEL_68;
LABEL_67:
    v109 = v279;
    memcpy(v105, v106, v279);
    goto LABEL_70;
  }
  v107 = (uint64_t *)(((unint64_t)v106 + v267) & 0xFFFFFFFFFFFFFFF8);
  if (v244 <= 0x7FFFFFFE)
  {
    v108 = *v107;
    if ((unint64_t)*v107 >= 0xFFFFFFFF)
      LODWORD(v108) = -1;
    if ((v108 + 1) < 2)
      goto LABEL_69;
    goto LABEL_67;
  }
  if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v287 + 48))(((unint64_t)v107 + v261) & v262, v242, v263))
  {
    goto LABEL_67;
  }
LABEL_68:
  v107 = (uint64_t *)(((unint64_t)v106 + v267) & 0xFFFFFFFFFFFFFFF8);
LABEL_69:
  (*(void (**)(void *, const void *, uint64_t))(v277 + 32))(v105, v106, v276);
  v110 = (_QWORD *)(((unint64_t)v105 + v267) & 0xFFFFFFFFFFFFFFF8);
  *v110 = *v107;
  v111 = ((unint64_t)v110 + v261) & v262;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v287 + 32))(v111, ((unint64_t)v107 + v261) & v262, v263);
  v112 = v251 + v111;
  v87 = v273 + 7;
  v100 = v264;
  v112 &= 0xFFFFFFFFFFFFF8uLL;
  v113 = (_QWORD *)((v251 + (((unint64_t)v107 + v261) & v262)) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)v112 = *v113;
  *(_OWORD *)((v112 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v113 + 15) & 0xFFFFFFFFFFFFF8);
  v109 = v279;
LABEL_70:
  v114 = (uint64_t)v106 + v109 + 10;
  *((_BYTE *)v105 + v109) = *((_BYTE *)v106 + v109);
  *(_BYTE *)(((unint64_t)v105 + v109) | 1) = *(_BYTE *)(((unint64_t)v106 + v109) | 1);
  *(_BYTE *)(((unint64_t)v105 + v109) | 2) = *(_BYTE *)(((unint64_t)v106 + v109) | 2);
  v115 = ((unint64_t)v105 + v109 + 10) & 0xFFFFFFFFFFFFFFF8;
  v116 = *(_OWORD *)(v114 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v115 + 16) = *(_BYTE *)((v114 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_OWORD *)v115 = v116;
  v117 = ((unint64_t)v105 + v109 + 34) & 0xFFFFFFFFFFFFFFF8;
  v118 = ((unint64_t)v106 + v109 + 34) & 0xFFFFFFFFFFFFFFF8;
  v119 = *(_OWORD *)v118;
  v120 = *(_OWORD *)(v118 + 16);
  v121 = *(_OWORD *)(v118 + 32);
  *(_QWORD *)(v117 + 48) = *(_QWORD *)(v118 + 48);
  *(_OWORD *)(v117 + 16) = v120;
  *(_OWORD *)(v117 + 32) = v121;
  *(_OWORD *)v117 = v119;
  v122 = (_QWORD *)((v117 + 63) & 0xFFFFFFFFFFFFF8);
  v123 = (_QWORD *)((v118 + 63) & 0xFFFFFFFFFFFFF8);
  *v122 = *v123;
  *(_QWORD *)(((unint64_t)v122 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v123 + 15) & 0xFFFFFFFFFFFFF8);
  v124 = (void *)(((unint64_t)v98 + v95) & v292);
  v125 = (const void *)((v95 + v271) & v292);
  if (v255((unint64_t)v125, 1, v280))
  {
    memcpy(v124, v125, v273);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v253 + 32))(v124, v125, v280);
    v100 = v264;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v253 + 56))(v124, 0, 1, v280);
  }
  v126 = (_QWORD *)(((unint64_t)v124 + v87) & 0xFFFFFFFFFFFFF8);
  v247 = v87;
  v127 = (_QWORD *)(((unint64_t)v125 + v87) & 0xFFFFFFFFFFFFFFF8);
  *v126 = *v127;
  v128 = ((unint64_t)v126 + 15) & 0xFFFFFFFFFFFFFFF8;
  v129 = ((unint64_t)v127 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v128 = *(_QWORD *)v129;
  *(_BYTE *)(v128 + 8) = *(_BYTE *)(v129 + 8);
  v130 = (void *)((v285 + v128) & v283);
  v131 = (const void *)((v285 + v129) & v283);
  if (v254 == v281)
  {
    if (!(*(unsigned int (**)(unint64_t))(v278 + 48))((v285 + v129) & v283))
      goto LABEL_83;
LABEL_82:
    memcpy(v130, v131, v70);
    goto LABEL_85;
  }
  v132 = (uint64_t *)(((unint64_t)v131 + v266) & 0xFFFFFFFFFFFFFFF8);
  if (v243 <= 0x7FFFFFFE)
  {
    v133 = *v132;
    if ((unint64_t)*v132 >= 0xFFFFFFFF)
      LODWORD(v133) = -1;
    if ((v133 + 1) < 2)
      goto LABEL_84;
    goto LABEL_82;
  }
  if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v282 + 48))(((unint64_t)v132 + v256) & v257, v241, v258))
  {
    goto LABEL_82;
  }
LABEL_83:
  v132 = (uint64_t *)(((unint64_t)v131 + v266) & 0xFFFFFFFFFFFFFFF8);
LABEL_84:
  (*(void (**)(void *, const void *, uint64_t))(v278 + 32))(v130, v131, v275);
  v134 = (_QWORD *)(((unint64_t)v130 + v266) & 0xFFFFFFFFFFFFFFF8);
  *v134 = *v132;
  v135 = ((unint64_t)v134 + v256) & v257;
  v136 = ((unint64_t)v132 + v256) & v257;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v282 + 32))(v135, v136, v258);
  v137 = v240 + v135;
  v100 = v264;
  v137 &= 0xFFFFFFFFFFFFF8uLL;
  v138 = (_QWORD *)((v240 + v136) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)v137 = *v138;
  *(_OWORD *)((v137 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v138 + 15) & 0xFFFFFFFFFFFFF8);
LABEL_85:
  *((_BYTE *)v130 + v70) = *((_BYTE *)v131 + v70);
  *(_BYTE *)(((unint64_t)v130 + v70) | 1) = *(_BYTE *)(((unint64_t)v131 + v70) | 1);
  *(_BYTE *)(((unint64_t)v130 + v70) | 2) = *(_BYTE *)(((unint64_t)v131 + v70) | 2);
  v139 = ((unint64_t)v130 + v70 + 10) & 0xFFFFFFFFFFFFFFF8;
  v140 = ((unint64_t)v131 + v70 + 10) & 0xFFFFFFFFFFFFFFF8;
  v141 = *(_OWORD *)v140;
  *(_BYTE *)(v139 + 16) = *(_BYTE *)(v140 + 16);
  *(_OWORD *)v139 = v141;
  v142 = ((unint64_t)v130 + v70 + 34) & 0xFFFFFFFFFFFFFFF8;
  v143 = ((unint64_t)v131 + v70 + 34) & 0xFFFFFFFFFFFFFFF8;
  v144 = *(_OWORD *)v143;
  v145 = *(_OWORD *)(v143 + 16);
  v146 = *(_OWORD *)(v143 + 32);
  *(_QWORD *)(v142 + 48) = *(_QWORD *)(v143 + 48);
  *(_OWORD *)(v142 + 16) = v145;
  *(_OWORD *)(v142 + 32) = v146;
  *(_OWORD *)v142 = v144;
  v147 = (_QWORD *)((v142 + 63) & 0xFFFFFFFFFFFFF8);
  v148 = (_QWORD *)((v143 + 63) & 0xFFFFFFFFFFFFF8);
  *v147 = *v148;
  *(_QWORD *)(((unint64_t)v147 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v148 + 15) & 0xFFFFFFFFFFFFF8);
  *((_BYTE *)v124 + v269) = *((_BYTE *)v125 + v269);
  v149 = ((unint64_t)v124 + v269) & 0xFFFFFFFFFFFFFFF8;
  v150 = ((unint64_t)v125 + v269) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v149 + 8) = *(_QWORD *)(v150 + 8);
  v151 = (_OWORD *)((v149 + 23) & 0xFFFFFFFFFFFFFFF8);
  v152 = (_OWORD *)((v150 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v151 = *v152;
  v153 = ((unint64_t)v151 + 23) & 0xFFFFFFFFFFFFFFF8;
  v154 = ((unint64_t)v152 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v153 = *(_QWORD *)v154;
  *(_BYTE *)(v153 + 8) = *(_BYTE *)(v154 + 8);
  *(_QWORD *)(((unint64_t)v151 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v152 + 39) & 0xFFFFFFFFFFFFF8);
  v155 = (_OWORD *)(((unint64_t)v98 + v97 + 15) & 0xFFFFFFFFFFFFFFF8);
  v156 = (_OWORD *)((v97 + 15 + v271) & 0xFFFFFFFFFFFFFFF8);
  *v155 = *v156;
  v157 = ((unint64_t)v155 + 23) & 0xFFFFFFFFFFFFFFF8;
  v158 = ((unint64_t)v156 + 23) & 0xFFFFFFFFFFFFFFF8;
  v159 = *(_QWORD *)v158;
  *(_BYTE *)(v157 + 8) = *(_BYTE *)(v158 + 8);
  *(_QWORD *)v157 = v159;
  v160 = (void *)((v248 + v157) & v272);
  v161 = (const void *)((v248 + v158) & v272);
  if (v250)
    v162 = v250 - 1;
  else
    v162 = 0;
  if (v162 <= v286 - 1)
    v163 = v286 - 1;
  else
    v163 = v162;
  if (v163 <= 0x7FFFFFFE)
    v164 = 2147483646;
  else
    v164 = v163;
  if (v249)
    v165 = v249 - 1;
  else
    v165 = 0;
  if (v165 <= v281 - 1)
    v166 = v281 - 1;
  else
    v166 = v165;
  if (v166 <= 0x7FFFFFFE)
    v167 = 2147483646;
  else
    v167 = v166;
  if (v167 <= v164)
    v168 = v164;
  else
    v168 = v167;
  if (v168 <= 0x7FFFFFFF)
    v168 = 0x7FFFFFFF;
  if (v164 != v168)
  {
    v171 = ((unint64_t)v161 + v95) & v292;
    if (v167 != v168)
    {
      v169 = v252;
      if (*(_QWORD *)(((v171 + v269) & 0xFFFFFFFFFFFFF8) + 8) < 0xFFFFFFFFuLL)
        goto LABEL_179;
      goto LABEL_147;
    }
    if (v165 == v167)
    {
      v169 = v252;
      if (v249 < 2)
        goto LABEL_147;
      v170 = v255(v171, v249, v280);
      goto LABEL_116;
    }
    v172 = (v285 + ((((v247 + v171) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v283;
    if (v281 - 1 == v167)
    {
      if (v254 != v281)
      {
        v178 = (unint64_t *)((v266 + v172) & 0xFFFFFFFFFFFFFFF8);
        v169 = v252;
        if (v243 > 0x7FFFFFFE)
        {
          if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v282 + 48))(((unint64_t)v178 + v256) & v257, v241, v258) < 2)goto LABEL_147;
LABEL_179:
          memcpy(v160, v161, __n);
          return v169;
        }
        v179 = *v178;
        if (v179 >= 0xFFFFFFFF)
          v173 = -1;
        else
          v173 = v179;
        if (v173 + 1 < 2)
          goto LABEL_147;
LABEL_146:
        if (v173 < 2)
          goto LABEL_147;
        goto LABEL_179;
      }
      v173 = (*(uint64_t (**)(unint64_t))(v278 + 48))(v172);
LABEL_145:
      v169 = v252;
      goto LABEL_146;
    }
    v174 = v236;
LABEL_134:
    v177 = *(_QWORD *)((((v174 + v172 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
    if (v177 >= 0xFFFFFFFF)
      LODWORD(v177) = -1;
    v169 = v252;
    if ((v177 + 1) >= 2)
      goto LABEL_179;
    goto LABEL_147;
  }
  if (v162 != v164)
  {
    v172 = (v290 + (((((unint64_t)v161 + v265) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v288;
    if (v286 - 1 == v164)
    {
      if (v259 == v286)
      {
        v173 = (*(uint64_t (**)(unint64_t))(v277 + 48))(v172);
      }
      else
      {
        v175 = (unint64_t *)((v267 + v172) & 0xFFFFFFFFFFFFFFF8);
        if (v244 <= 0x7FFFFFFE)
        {
          v176 = *v175;
          if (v176 >= 0xFFFFFFFF)
            v173 = -1;
          else
            v173 = v176;
          v169 = v252;
          if (v173 + 1 < 2)
            goto LABEL_147;
          goto LABEL_146;
        }
        v173 = (*(uint64_t (**)(unint64_t))(v287 + 48))(((unint64_t)v175 + v261) & v262);
      }
      goto LABEL_145;
    }
    v174 = v237;
    goto LABEL_134;
  }
  v169 = v252;
  if (v250 < 2)
    goto LABEL_147;
  v170 = v260((uint64_t)v161, v250, v100);
LABEL_116:
  if (v170 >= 2)
    goto LABEL_179;
LABEL_147:
  if (v260((uint64_t)v161, 1, v100))
  {
    memcpy(v160, v161, v274);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v239 + 32))(v160, v161, v100);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v239 + 56))(v160, 0, 1, v100);
  }
  v180 = (_QWORD *)(((unint64_t)v160 + v265) & 0xFFFFFFFFFFFFF8);
  v181 = (_QWORD *)(((unint64_t)v161 + v265) & 0xFFFFFFFFFFFFFFF8);
  *v180 = *v181;
  v182 = ((unint64_t)v180 + 15) & 0xFFFFFFFFFFFFFFF8;
  v183 = ((unint64_t)v181 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v182 = *(_QWORD *)v183;
  *(_BYTE *)(v182 + 8) = *(_BYTE *)(v183 + 8);
  v184 = (void *)((v290 + v182) & v288);
  v185 = (const void *)((v290 + v183) & v288);
  if (v259 == v286)
  {
    if (!(*(unsigned int (**)(unint64_t))(v277 + 48))((v290 + v183) & v288))
      goto LABEL_160;
LABEL_159:
    v188 = v279;
    memcpy(v184, v185, v279);
    goto LABEL_162;
  }
  v186 = (uint64_t *)(((unint64_t)v185 + v267) & 0xFFFFFFFFFFFFFFF8);
  if (v244 <= 0x7FFFFFFE)
  {
    v187 = *v186;
    if ((unint64_t)*v186 >= 0xFFFFFFFF)
      LODWORD(v187) = -1;
    if ((v187 + 1) < 2)
      goto LABEL_161;
    goto LABEL_159;
  }
  if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v287 + 48))(((unint64_t)v186 + v261) & v262, v242, v263))
  {
    goto LABEL_159;
  }
LABEL_160:
  v186 = (uint64_t *)(((unint64_t)v185 + v267) & 0xFFFFFFFFFFFFFFF8);
LABEL_161:
  (*(void (**)(void *, const void *, uint64_t))(v277 + 32))(v184, v185, v276);
  v189 = (_QWORD *)(((unint64_t)v184 + v267) & 0xFFFFFFFFFFFFFFF8);
  *v189 = *v186;
  v190 = ((unint64_t)v189 + v261) & v262;
  v191 = ((unint64_t)v186 + v261) & v262;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v287 + 32))(v190, v191, v263);
  v192 = (_QWORD *)((v251 + v190) & 0xFFFFFFFFFFFFF8);
  v193 = (_QWORD *)((v251 + v191) & 0xFFFFFFFFFFFFF8);
  *v192 = *v193;
  *(_OWORD *)(((unint64_t)v192 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v193 + 15) & 0xFFFFFFFFFFFFF8);
  v188 = v279;
LABEL_162:
  v194 = (uint64_t)v185 + v188 + 10;
  *((_BYTE *)v184 + v188) = *((_BYTE *)v185 + v188);
  *(_BYTE *)(((unint64_t)v184 + v188) | 1) = *(_BYTE *)(((unint64_t)v185 + v188) | 1);
  *(_BYTE *)(((unint64_t)v184 + v188) | 2) = *(_BYTE *)(((unint64_t)v185 + v188) | 2);
  v195 = ((unint64_t)v184 + v188 + 10) & 0xFFFFFFFFFFFFFFF8;
  v196 = *(_OWORD *)(v194 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v195 + 16) = *(_BYTE *)((v194 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_OWORD *)v195 = v196;
  v197 = ((unint64_t)v184 + v188 + 34) & 0xFFFFFFFFFFFFFFF8;
  v198 = ((unint64_t)v185 + v188 + 34) & 0xFFFFFFFFFFFFFFF8;
  v199 = *(_OWORD *)v198;
  v200 = *(_OWORD *)(v198 + 16);
  v201 = *(_OWORD *)(v198 + 32);
  *(_QWORD *)(v197 + 48) = *(_QWORD *)(v198 + 48);
  *(_OWORD *)(v197 + 16) = v200;
  *(_OWORD *)(v197 + 32) = v201;
  *(_OWORD *)v197 = v199;
  v202 = (_QWORD *)((v197 + 63) & 0xFFFFFFFFFFFFF8);
  v203 = (_QWORD *)((v198 + 63) & 0xFFFFFFFFFFFFF8);
  *v202 = *v203;
  *(_QWORD *)(((unint64_t)v202 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v203 + 15) & 0xFFFFFFFFFFFFF8);
  v204 = (void *)(((unint64_t)v160 + v95) & v292);
  v205 = (const void *)(((unint64_t)v161 + v95) & v292);
  if (v255((unint64_t)v205, 1, v280))
  {
    memcpy(v204, v205, v273);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v253 + 32))(v204, v205, v280);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v253 + 56))(v204, 0, 1, v280);
  }
  v206 = (_QWORD *)(((unint64_t)v204 + v247) & 0xFFFFFFFFFFFFF8);
  v207 = (_QWORD *)(((unint64_t)v205 + v247) & 0xFFFFFFFFFFFFFFF8);
  *v206 = *v207;
  v208 = ((unint64_t)v206 + 15) & 0xFFFFFFFFFFFFFFF8;
  v209 = ((unint64_t)v207 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v208 = *(_QWORD *)v209;
  *(_BYTE *)(v208 + 8) = *(_BYTE *)(v209 + 8);
  v210 = (void *)((v285 + v208) & v283);
  v211 = (const void *)((v285 + v209) & v283);
  if (v254 == v281)
  {
    if (!(*(unsigned int (**)(unint64_t))(v278 + 48))((v285 + v209) & v283))
      goto LABEL_175;
  }
  else
  {
    v212 = (_QWORD *)(((unint64_t)v211 + v266) & 0xFFFFFFFFFFFFFFF8);
    if (v243 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v282 + 48))(((unint64_t)v212 + v256) & v257, v241, v258))
      {
LABEL_175:
        v212 = (_QWORD *)(((unint64_t)v211 + v266) & 0xFFFFFFFFFFFFFFF8);
LABEL_176:
        (*(void (**)(void *, const void *, uint64_t))(v278 + 32))(v210, v211, v275);
        v214 = (_QWORD *)(((unint64_t)v210 + v266) & 0xFFFFFFFFFFFFFFF8);
        *v214 = *v212;
        v215 = ((unint64_t)v214 + v256) & v257;
        v216 = ((unint64_t)v212 + v256) & v257;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v282 + 32))(v215, v216, v258);
        v217 = (_QWORD *)((v240 + v215) & 0xFFFFFFFFFFFFF8);
        v218 = (_QWORD *)((v240 + v216) & 0xFFFFFFFFFFFFF8);
        *v217 = *v218;
        *(_OWORD *)(((unint64_t)v217 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v218 + 15) & 0xFFFFFFFFFFFFF8);
        goto LABEL_177;
      }
    }
    else
    {
      v213 = *v212;
      if (*v212 >= 0xFFFFFFFFuLL)
        LODWORD(v213) = -1;
      if ((v213 + 1) < 2)
        goto LABEL_176;
    }
  }
  memcpy(v210, v211, v70);
LABEL_177:
  *((_BYTE *)v210 + v70) = *((_BYTE *)v211 + v70);
  *(_BYTE *)(((unint64_t)v210 + v70) | 1) = *(_BYTE *)(((unint64_t)v211 + v70) | 1);
  *(_BYTE *)(((unint64_t)v210 + v70) | 2) = *(_BYTE *)(((unint64_t)v211 + v70) | 2);
  v219 = ((unint64_t)v210 + v70 + 10) & 0xFFFFFFFFFFFFFFF8;
  v220 = ((unint64_t)v211 + v70 + 10) & 0xFFFFFFFFFFFFFFF8;
  v221 = *(_OWORD *)v220;
  *(_BYTE *)(v219 + 16) = *(_BYTE *)(v220 + 16);
  *(_OWORD *)v219 = v221;
  v222 = ((unint64_t)v210 + v70 + 34) & 0xFFFFFFFFFFFFFFF8;
  v223 = ((unint64_t)v211 + v70 + 34) & 0xFFFFFFFFFFFFFFF8;
  v224 = *(_OWORD *)v223;
  v225 = *(_OWORD *)(v223 + 16);
  v226 = *(_OWORD *)(v223 + 32);
  *(_QWORD *)(v222 + 48) = *(_QWORD *)(v223 + 48);
  *(_OWORD *)(v222 + 16) = v225;
  *(_OWORD *)(v222 + 32) = v226;
  *(_OWORD *)v222 = v224;
  v227 = (_QWORD *)((v222 + 63) & 0xFFFFFFFFFFFFF8);
  v228 = (_QWORD *)((v223 + 63) & 0xFFFFFFFFFFFFF8);
  *v227 = *v228;
  *(_QWORD *)(((unint64_t)v227 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v228 + 15) & 0xFFFFFFFFFFFFF8);
  *((_BYTE *)v204 + v269) = *((_BYTE *)v205 + v269);
  v229 = ((unint64_t)v204 + v269) & 0xFFFFFFFFFFFFFFF8;
  v230 = ((unint64_t)v205 + v269) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v229 + 8) = *(_QWORD *)(v230 + 8);
  v231 = (_OWORD *)((v229 + 23) & 0xFFFFFFFFFFFFFFF8);
  v232 = (_OWORD *)((v230 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v231 = *v232;
  v233 = ((unint64_t)v231 + 23) & 0xFFFFFFFFFFFFFFF8;
  v234 = ((unint64_t)v232 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v233 = *(_QWORD *)v234;
  *(_BYTE *)(v233 + 8) = *(_BYTE *)(v234 + 8);
  *(_QWORD *)(((unint64_t)v231 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v232 + 39) & 0xFFFFFFFFFFFFF8);
  return v252;
}

uint64_t sub_23AB2EEF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t (*v15)(size_t, uint64_t, uint64_t);
  int v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void *, uint64_t, uint64_t);
  uint64_t v33;
  int v34;
  const void *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  size_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  void *v57;
  void *v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  uint64_t *v64;
  uint64_t v65;
  BOOL v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  void **v75;
  void **v76;
  void *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t (*v81)(unint64_t, uint64_t, uint64_t);
  size_t v82;
  int v83;
  int v84;
  size_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  const void *v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  size_t v98;
  uint64_t (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t *v107;
  uint64_t v108;
  unsigned int v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char v125;
  void *v126;
  void *v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  __int128 v141;
  void **v142;
  void **v143;
  void *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  void *v153;
  void *v154;
  int v155;
  _QWORD *v156;
  _QWORD *v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  void *v162;
  uint64_t (*v163)(char *, _QWORD, uint64_t);
  int v164;
  int v165;
  size_t v166;
  uint64_t *v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t *v170;
  uint64_t v171;
  unsigned int v172;
  unint64_t v173;
  uint64_t (*v174)(unint64_t, _QWORD, uint64_t);
  uint64_t v175;
  void *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _BYTE *v183;
  _BYTE *v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  _BYTE *v188;
  _BYTE *v189;
  uint64_t v190;
  char *v191;
  unint64_t v192;
  void *v193;
  void *v194;
  char v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  uint64_t v207;
  __int128 v208;
  void **v209;
  void **v210;
  void *v211;
  void *v212;
  void *v213;
  int v214;
  int v215;
  _QWORD *v216;
  _QWORD *v217;
  unint64_t v218;
  unint64_t v219;
  char *v220;
  const void *v221;
  uint64_t (*v222)(char *, uint64_t, uint64_t);
  uint64_t v223;
  int v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t *v230;
  uint64_t v231;
  unsigned int v232;
  unint64_t v233;
  int v234;
  unint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  _BYTE *v242;
  _BYTE *v243;
  uint64_t v244;
  char v245;
  uint64_t v246;
  _BYTE *v247;
  _BYTE *v248;
  uint64_t v249;
  char *v250;
  unint64_t v251;
  void *v252;
  void *v253;
  char v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  char *v261;
  unint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  _QWORD *v265;
  unint64_t v266;
  uint64_t v267;
  __int128 v268;
  void **v269;
  void **v270;
  void *v271;
  unint64_t v272;
  unint64_t v273;
  _QWORD *v274;
  _QWORD *v275;
  unint64_t v276;
  unint64_t v277;
  _QWORD *v278;
  _QWORD *v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t v282;
  void *v283;
  uint64_t v284;
  unsigned int v285;
  int v286;
  unsigned int v287;
  unsigned int v288;
  uint64_t v289;
  unsigned int v290;
  int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  int v295;
  uint64_t v296;
  void *v297;
  unsigned int v298;
  void *v299;
  unint64_t v300;
  uint64_t v301;
  void *v302;
  unsigned int v303;
  unint64_t v304;
  unsigned int v305;
  unint64_t v306;
  unsigned int v307;
  unint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t *v312;
  unint64_t v313;
  unsigned int v314;
  unsigned int v315;
  unint64_t v316;
  unsigned int v317;
  unint64_t v318;
  unsigned int v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t *v322;
  unint64_t *v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  _QWORD *v334;
  _QWORD *v335;
  unint64_t v336;
  unint64_t v337;
  void *v338;
  const void *v339;
  uint64_t v340;
  uint64_t *v341;
  uint64_t v342;
  size_t v343;
  _QWORD *v344;
  unint64_t v345;
  unint64_t v346;
  _QWORD *v347;
  _QWORD *v348;
  uint64_t v349;
  unint64_t v350;
  __int128 v351;
  unint64_t v352;
  unint64_t v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  _QWORD *v357;
  _QWORD *v358;
  void *v359;
  void *v360;
  _QWORD *v361;
  _QWORD *v362;
  unint64_t v363;
  unint64_t v364;
  void *v365;
  const void *v366;
  uint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  unint64_t v370;
  _QWORD *v371;
  unint64_t v372;
  unint64_t v373;
  _QWORD *v374;
  _QWORD *v375;
  uint64_t v376;
  unint64_t v377;
  __int128 v378;
  unint64_t v379;
  unint64_t v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  _QWORD *v384;
  _QWORD *v385;
  unint64_t v386;
  unint64_t v387;
  _QWORD *v388;
  _QWORD *v389;
  int v390;
  int v391;
  unint64_t v392;
  int v393;
  _QWORD *v394;
  _QWORD *v395;
  unint64_t v396;
  unint64_t v397;
  char *v398;
  char *v399;
  void *v400;
  uint64_t (*v401)(char *, _QWORD, uint64_t);
  int v402;
  int v403;
  uint64_t v404;
  uint64_t *v405;
  uint64_t *v406;
  uint64_t v407;
  unsigned int v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t (*v414)(unint64_t, _QWORD, uint64_t);
  int v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  BOOL v419;
  unint64_t v420;
  unint64_t v421;
  size_t v422;
  uint64_t v423;
  uint64_t *v424;
  uint64_t v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  BOOL v429;
  void *v430;
  const void *v431;
  size_t v432;
  unint64_t v433;
  unint64_t v434;
  _QWORD *v435;
  _QWORD *v436;
  size_t v437;
  unint64_t v438;
  unint64_t v439;
  _QWORD *v440;
  uint64_t v441;
  uint64_t v442;
  _QWORD *v443;
  unint64_t v444;
  _BYTE *v445;
  _BYTE *v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  unint64_t v450;
  void *v451;
  void *v452;
  char v453;
  unint64_t v454;
  unint64_t v455;
  unint64_t v456;
  uint64_t *v457;
  uint64_t v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  _QWORD *v462;
  unint64_t v463;
  uint64_t v464;
  __int128 v465;
  void **v466;
  void **v467;
  void *v468;
  _BYTE *v469;
  _BYTE *v470;
  int v471;
  int v472;
  int v473;
  _QWORD *v474;
  _QWORD *v475;
  unint64_t v476;
  unint64_t v477;
  void *v478;
  char *v479;
  _BYTE *v480;
  _BYTE *v481;
  uint64_t (*v482)(void *, _QWORD, uint64_t);
  int v483;
  char *v484;
  int v485;
  uint64_t v486;
  void *v487;
  char *v488;
  uint64_t *v489;
  uint64_t v490;
  unsigned int v491;
  uint64_t *v492;
  uint64_t v493;
  unsigned int v494;
  uint64_t (*v495)(unint64_t, _QWORD, uint64_t);
  uint64_t v496;
  unint64_t v497;
  unint64_t v498;
  unint64_t v499;
  unint64_t v500;
  _QWORD *v501;
  _QWORD *v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  _QWORD *v506;
  uint64_t v507;
  uint64_t v508;
  _QWORD *v509;
  unint64_t v510;
  unint64_t v511;
  char v512;
  void *v513;
  void *v514;
  char v515;
  unint64_t v516;
  unint64_t v517;
  unint64_t v518;
  uint64_t *v519;
  uint64_t v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  _QWORD *v524;
  unint64_t v525;
  uint64_t v526;
  __int128 v527;
  void **v528;
  void **v529;
  void *v530;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  unint64_t v536;
  unint64_t v537;
  unsigned int v538;
  unsigned int v539;
  unint64_t v540;
  int v541;
  char *v542;
  unint64_t v543;
  unint64_t v544;
  size_t v545;
  size_t v546;
  unint64_t v547;
  void *v548;
  unint64_t v549;
  uint64_t v550;
  unsigned int v551;
  uint64_t v552;
  unsigned int v553;
  unsigned int v554;
  uint64_t v555;
  unsigned int v556;
  unint64_t __src;
  unint64_t __srca;
  void *__srcb;
  int v560;
  uint64_t v561;
  size_t v562;
  size_t v563;
  unsigned int v564;
  uint64_t (*v565)(void *, uint64_t, uint64_t);
  uint64_t v566;
  size_t v567;
  size_t __n;
  uint64_t v569;
  size_t v570;
  uint64_t (*v571)(void *, uint64_t, uint64_t);
  unint64_t v572;
  unint64_t v573;
  size_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  size_t v589;
  uint64_t v590;
  int v591;
  unsigned int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unint64_t v602;
  uint64_t v603;
  int v604;
  uint64_t v605;

  v2 = a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80) & 0xF8;
  v594 = swift_getAssociatedTypeWitness();
  v601 = *(_QWORD *)(v594 - 8);
  v7 = *(_DWORD *)(v601 + 80) & 0xF8;
  v580 = swift_getAssociatedTypeWitness();
  v600 = *(_QWORD *)(v580 - 8);
  v597 = *(unsigned __int8 *)(v600 + 80);
  v595 = v7 | v597 | 7;
  v8 = v7 | v597 | v6;
  v584 = swift_getAssociatedTypeWitness();
  v569 = *(_QWORD *)(v584 - 8);
  v9 = *(_DWORD *)(v569 + 80) & 0xF8;
  v593 = swift_getAssociatedTypeWitness();
  v605 = *(_QWORD *)(v593 - 8);
  v10 = *(_DWORD *)(v605 + 80) & 0xF8;
  v577 = swift_getAssociatedTypeWitness();
  v599 = *(_QWORD *)(v577 - 8);
  v582 = *(unsigned __int8 *)(v599 + 80);
  v587 = v10 | v582 | 7;
  v585 = v587 | v9;
  v11 = v8 | v585;
  v12 = v5;
  v555 = a1;
  v13 = v11 + 9 + a1;
  v14 = v11 + 9 + v2;
  v15 = *(uint64_t (**)(size_t, uint64_t, uint64_t))(v5 + 48);
  LODWORD(v2) = v15(v13 & ~v11, 1, AssociatedTypeWitness);
  v602 = v14 & ~v11;
  v571 = (uint64_t (*)(void *, uint64_t, uint64_t))v15;
  v16 = v15(v602, 1, AssociatedTypeWitness);
  v566 = AssociatedTypeWitness;
  __src = v11;
  v545 = v13;
  v547 = v14;
  if ((_DWORD)v2)
  {
    if (!v16)
    {
      (*(void (**)(size_t, unint64_t, uint64_t))(v5 + 32))(v13 & ~v11, v602, AssociatedTypeWitness);
      (*(void (**)(size_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13 & ~v11, 0, 1, AssociatedTypeWitness);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(size_t, unint64_t, uint64_t))(v5 + 40))(v13 & ~v11, v602, AssociatedTypeWitness);
      goto LABEL_10;
    }
    (*(void (**)(size_t, uint64_t))(v5 + 8))(v13 & ~v11, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v5 + 84))
    v17 = *(_QWORD *)(v5 + 64);
  else
    v17 = *(_QWORD *)(v5 + 64) + 1;
  memcpy((void *)(v13 & ~v11), (const void *)v602, v17);
LABEL_10:
  v18 = v597;
  v556 = *(_DWORD *)(v5 + 84);
  if (v556)
    v19 = *(_QWORD *)(v5 + 64);
  else
    v19 = *(_QWORD *)(v5 + 64) + 1;
  v589 = v13 & ~v11;
  __n = v19;
  v20 = (_QWORD *)(((v602 | 7) + v19) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((v589 | 7) + v19) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v20;
  v22 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = v595;
  v25 = (void *)((v24 + 9 + v22) & ~v24);
  v598 = v595 + 9;
  v26 = (v24 + 9 + v23) & ~v24;
  v27 = *(unsigned int *)(v601 + 84);
  v539 = *(_DWORD *)(v600 + 84);
  if (v27 <= v539)
    v28 = *(_DWORD *)(v600 + 84);
  else
    v28 = *(_DWORD *)(v601 + 84);
  if (v28 <= 0x7FFFFFFE)
    v29 = 2147483646;
  else
    v29 = v28;
  v30 = *(_QWORD *)(v601 + 64) + 7;
  v579 = ~v18;
  v578 = v18 + 8;
  v31 = *(_QWORD *)(v600 + 64) + 7;
  v537 = (((v31 + ((v18 + 8 + (v30 & 0xFFFFFFFFFFFFFFF8)) & ~v18)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v591 = v29;
  v581 = v30;
  v550 = v12;
  v592 = *(_DWORD *)(v601 + 84);
  v551 = v28;
  v542 = (char *)(v11 + 9);
  if ((_DWORD)v27 == v29)
  {
    v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v601 + 48);
    v33 = v594;
    v34 = v32(v25, v27, v594);
    v35 = (const void *)v26;
    v36 = v26;
LABEL_30:
    v45 = v32((void *)v36, v27, v33);
    v43 = v537 + 16;
    if (v34)
    {
      if (!v45)
      {
        v37 = (uint64_t *)(((unint64_t)v25 + v30) & 0xFFFFFFFFFFFFFFF8);
        v40 = (uint64_t *)(((unint64_t)v35 + v30) & 0xFFFFFFFFFFFFFFF8);
LABEL_37:
        (*(void (**)(void *, const void *, uint64_t))(v601 + 32))(v25, v35, v594);
        *v37 = *v40;
        v46 = ((unint64_t)v40 + v578) & v579;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v600 + 32))(((unint64_t)v37 + v578) & v579, v46, v580);
        v47 = (_QWORD *)((v31 + (((unint64_t)v37 + v578) & v579)) & 0xFFFFFFFFFFFFF8);
        v48 = (_QWORD *)((v31 + v46) & 0xFFFFFFFFFFFFF8);
        *v47 = *v48;
        *(_OWORD *)(((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFF8);
        goto LABEL_41;
      }
      goto LABEL_38;
    }
    v37 = (uint64_t *)(((unint64_t)v25 + v30) & 0xFFFFFFFFFFFFFFF8);
    if (v45)
      goto LABEL_34;
    v40 = (uint64_t *)(((unint64_t)v35 + v30) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_40;
  }
  v35 = (const void *)((v595 + 9 + v23) & ~v595);
  v37 = (uint64_t *)(((unint64_t)v25 + v30) & 0xFFFFFFFFFFFFFFF8);
  if (v28 > 0x7FFFFFFE)
  {
    v44 = ((unint64_t)v37 + v578) & v579;
    v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v600 + 48);
    v27 = v539;
    v33 = v580;
    v34 = v32((void *)v44, v539, v580);
    v36 = (v578 + ((v30 + v26) & 0xFFFFFFFFFFFFFFF8)) & v579;
    goto LABEL_30;
  }
  v38 = *v37;
  if ((unint64_t)*v37 >= 0xFFFFFFFF)
    LODWORD(v38) = -1;
  v39 = v38 + 1;
  v40 = (uint64_t *)((v30 + v26) & 0xFFFFFFFFFFFFFFF8);
  v41 = *v40;
  if ((unint64_t)*v40 >= 0xFFFFFFFF)
    LODWORD(v41) = -1;
  v42 = v41 + 1;
  v43 = v537 + 16;
  if (v39 >= 2)
  {
    if (v42 < 2)
      goto LABEL_37;
    goto LABEL_38;
  }
  if (v42 >= 2)
  {
LABEL_34:
    (*(void (**)(void *, uint64_t))(v601 + 8))(v25, v594);
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t))(v600 + 8))(((unint64_t)v37 + v578) & v579, v580);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_38:
    memcpy(v25, v35, v43);
    goto LABEL_41;
  }
LABEL_40:
  (*(void (**)(void *, const void *, uint64_t))(v601 + 40))(v25, v35, v594);
  *v37 = *v40;
  swift_bridgeObjectRelease();
  v49 = ((unint64_t)v40 + v578) & v579;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v600 + 40))(((unint64_t)v37 + v578) & v579, v49, v580);
  v50 = (_QWORD *)((v31 + (((unint64_t)v37 + v578) & v579)) & 0xFFFFFFFFFFFFFFF8);
  v51 = (v31 + v49) & 0xFFFFFFFFFFFFF8;
  v52 = *(_QWORD *)v51;
  v51 += 15;
  *v50 = v52;
  swift_bridgeObjectRelease();
  v53 = (_QWORD *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v53 = *(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF8);
  v53[1] = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRelease();
LABEL_41:
  *((_BYTE *)v25 + v43) = *((_BYTE *)v35 + v43);
  *(_BYTE *)(((unint64_t)v25 + v43) | 1) = *(_BYTE *)(((unint64_t)v35 + v43) | 1);
  v596 = ~v595;
  *(_BYTE *)(((unint64_t)v25 + v43) | 2) = *(_BYTE *)(((unint64_t)v35 + v43) | 2);
  v54 = ((unint64_t)v25 + v43 + 10) & 0xFFFFFFFFFFFFFFF8;
  v55 = ((unint64_t)v35 + v43 + 10) & 0xFFFFFFFFFFFFFFF8;
  v56 = *(_BYTE *)(v55 + 16);
  v57 = *(void **)v54;
  v58 = *(void **)(v54 + 8);
  *(_OWORD *)v54 = *(_OWORD *)v55;
  v59 = *(_BYTE *)(v54 + 16);
  *(_BYTE *)(v54 + 16) = v56;
  sub_23AAAEE10(v57, v58, v59);
  v60 = ((unint64_t)v25 + v43 + 34) & 0xFFFFFFFFFFFFFFF8;
  v61 = ((unint64_t)v35 + v43 + 34) & 0xFFFFFFFFFFFFFFF8;
  v62 = *(_QWORD *)(v60 + 16);
  if (4 * ((v62 >> 60) & 3))
    v63 = (((v62 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v62 >> 60) & 3))) == 15;
  else
    v63 = 1;
  if (!v63)
  {
    v69 = v31;
LABEL_55:
    v70 = *(_OWORD *)v61;
    v71 = *(_OWORD *)(v61 + 16);
    v72 = *(_OWORD *)(v61 + 32);
    *(_QWORD *)(v60 + 48) = *(_QWORD *)(v61 + 48);
    *(_OWORD *)(v60 + 16) = v71;
    *(_OWORD *)(v60 + 32) = v72;
    *(_OWORD *)v60 = v70;
    goto LABEL_60;
  }
  v64 = (uint64_t *)(v60 + 8);
  v65 = *(_QWORD *)(v61 + 16) >> 60;
  if (4 * (v65 & 3))
    v66 = ((v65 >> 2) & 0xFFFFFFF3 | (4 * (v65 & 3))) == 15;
  else
    v66 = 1;
  if (!v66)
  {
    v69 = v31;
    if (v62 >> 60 != 15)
      sub_23AAAE53C(*v64, v62);
    goto LABEL_55;
  }
  v67 = (_QWORD *)(v61 + 8);
  *(_QWORD *)v60 = *(_QWORD *)v61;
  v69 = v31;
  if (v62 >> 60 != 15)
  {
    v68 = *(_QWORD *)(v61 + 16);
    if (v68 >> 60 != 15)
    {
      v73 = *(_QWORD *)(v60 + 8);
      *(_QWORD *)(v60 + 8) = *v67;
      *(_QWORD *)(v60 + 16) = v68;
      sub_23AAAE53C(v73, v62);
      goto LABEL_59;
    }
    sub_23AB2D750(v60 + 8);
  }
  *(_OWORD *)v64 = *(_OWORD *)v67;
LABEL_59:
  v74 = *(_OWORD *)(v61 + 24);
  *(_BYTE *)(v60 + 40) = *(_BYTE *)(v61 + 40);
  *(_OWORD *)(v60 + 24) = v74;
  *(_QWORD *)(v60 + 48) = *(_QWORD *)(v61 + 48);
LABEL_60:
  v75 = (void **)((v60 + 63) & 0xFFFFFFFFFFFFFFF8);
  v76 = (void **)((v61 + 63) & 0xFFFFFFFFFFFFFFF8);
  v77 = *v75;
  *v75 = *v76;

  *(_QWORD *)(((unint64_t)v75 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v76 + 15) & 0xFFFFFFFFFFFFF8);
  v574 = __n + 7;
  v78 = ((((((((v598 + ((((__n + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v596) + v43 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v79 = (v589 + v585 + v78) & ~v585;
  v80 = (v602 + v585 + v78) & ~v585;
  v81 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v569 + 48);
  v82 = v43;
  v83 = v81(v79, 1, v584);
  v565 = (uint64_t (*)(void *, uint64_t, uint64_t))v81;
  v84 = v81(v80, 1, v584);
  v562 = v82;
  v540 = v78;
  if (v83)
  {
    if (!v84)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v569 + 32))(v79, v80, v584);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v569 + 56))(v79, 0, 1, v584);
      goto LABEL_69;
    }
  }
  else
  {
    if (!v84)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v569 + 40))(v79, v80, v584);
      goto LABEL_69;
    }
    (*(void (**)(unint64_t, uint64_t))(v569 + 8))(v79, v584);
  }
  if (*(_DWORD *)(v569 + 84))
    v85 = *(_QWORD *)(v569 + 64);
  else
    v85 = *(_QWORD *)(v569 + 64) + 1;
  memcpy((void *)v79, (const void *)v80, v85);
LABEL_69:
  v554 = *(_DWORD *)(v569 + 84);
  if (v554)
    v86 = *(_QWORD *)(v569 + 64);
  else
    v86 = *(_QWORD *)(v569 + 64) + 1;
  v572 = (v589 + v585 + v78) & ~v585;
  v543 = (v602 + v585 + v78) & ~v585;
  v567 = v86;
  v87 = (_QWORD *)(((v80 | 7) + v86) & 0xFFFFFFFFFFFFFFF8);
  v88 = (_QWORD *)(((v79 | 7) + v86) & 0xFFFFFFFFFFFFFFF8);
  *v88 = *v87;
  v89 = ((unint64_t)v88 + 15) & 0xFFFFFFFFFFFFFFF8;
  v90 = ((unint64_t)v87 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v89 = *(_QWORD *)v90;
  *(_BYTE *)(v89 + 8) = *(_BYTE *)(v90 + 8);
  v91 = v587;
  v92 = (char *)((v91 + 9 + v89) & ~v91);
  v590 = v587 + 9;
  v93 = (const void *)((v91 + 9 + v90) & ~v91);
  v94 = *(unsigned int *)(v605 + 84);
  v538 = *(_DWORD *)(v599 + 84);
  if (v94 <= v538)
    v95 = *(_DWORD *)(v599 + 84);
  else
    v95 = *(_DWORD *)(v605 + 84);
  if (v95 <= 0x7FFFFFFE)
    v96 = 2147483646;
  else
    v96 = v95;
  v97 = *(_QWORD *)(v605 + 64) + 7;
  v576 = ~v582;
  v575 = v582 + 8;
  v561 = *(_QWORD *)(v599 + 64) + 7;
  v536 = (((v561 + ((v582 + 8 + (v97 & 0xFFFFFFFFFFFFFFF8)) & ~v582)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v98 = v536 + 16;
  v583 = v97;
  v564 = *(_DWORD *)(v605 + 84);
  v560 = v96;
  v552 = v69;
  v553 = v95;
  if ((_DWORD)v94 == v96)
  {
    v99 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v605 + 48);
    v100 = v593;
    v101 = v99(v92, v94, v593);
    v102 = (unint64_t)v93;
    v103 = v94;
  }
  else
  {
    v104 = (uint64_t *)((unint64_t)&v92[v97] & 0xFFFFFFFFFFFFFFF8);
    if (v95 <= 0x7FFFFFFE)
    {
      v105 = *v104;
      if ((unint64_t)*v104 >= 0xFFFFFFFF)
        LODWORD(v105) = -1;
      v106 = v105 + 1;
      v107 = (uint64_t *)(((unint64_t)v93 + v97) & 0xFFFFFFFFFFFFFFF8);
      v108 = *v107;
      if ((unint64_t)*v107 >= 0xFFFFFFFF)
        LODWORD(v108) = -1;
      v109 = v108 + 1;
      if (v106 >= 2)
      {
        v110 = v540;
        if (v109 < 2)
          goto LABEL_96;
LABEL_97:
        memcpy(v92, v93, v98);
        goto LABEL_100;
      }
      v110 = v540;
      if (v109 >= 2)
      {
LABEL_93:
        (*(void (**)(char *, uint64_t))(v605 + 8))(v92, v593);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v599 + 8))(((unint64_t)v104 + v575) & v576, v577);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_97;
      }
LABEL_99:
      (*(void (**)(char *, const void *, uint64_t))(v605 + 40))(v92, v93, v593);
      *v104 = *v107;
      swift_bridgeObjectRelease();
      v116 = ((unint64_t)v107 + v575) & v576;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v599 + 40))(((unint64_t)v104 + v575) & v576, v116, v577);
      v117 = (_QWORD *)((v561 + (((unint64_t)v104 + v575) & v576)) & 0xFFFFFFFFFFFFFFF8);
      v118 = (v561 + v116) & 0xFFFFFFFFFFFFF8;
      v119 = *(_QWORD *)v118;
      v118 += 15;
      *v117 = v119;
      swift_bridgeObjectRelease();
      v120 = (_QWORD *)(((unint64_t)v117 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v120 = *(_QWORD *)(v118 & 0xFFFFFFFFFFFFFFF8);
      v120[1] = *(_QWORD *)((v118 & 0xFFFFFFFFFFFFFFF8) + 8);
      swift_bridgeObjectRelease();
      goto LABEL_100;
    }
    v111 = ((unint64_t)v104 + v575) & v576;
    v99 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v599 + 48);
    v100 = v577;
    v101 = v99((char *)v111, v538, v577);
    v102 = (v575 + (((unint64_t)v93 + v97) & 0xFFFFFFFFFFFFFFF8)) & v576;
    v103 = v538;
  }
  v112 = v99((char *)v102, v103, v100);
  v110 = v540;
  if (!v101)
  {
    v104 = (uint64_t *)((unint64_t)&v92[v97] & 0xFFFFFFFFFFFFFFF8);
    if (v112)
      goto LABEL_93;
    v107 = (uint64_t *)(((unint64_t)v93 + v97) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_99;
  }
  if (v112)
    goto LABEL_97;
  v104 = (uint64_t *)((unint64_t)&v92[v97] & 0xFFFFFFFFFFFFFFF8);
  v107 = (uint64_t *)(((unint64_t)v93 + v97) & 0xFFFFFFFFFFFFFFF8);
LABEL_96:
  (*(void (**)(char *, const void *, uint64_t))(v605 + 32))(v92, v93, v593);
  *v104 = *v107;
  v113 = ((unint64_t)v107 + v575) & v576;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v599 + 32))(((unint64_t)v104 + v575) & v576, v113, v577);
  v114 = (_QWORD *)((v561 + (((unint64_t)v104 + v575) & v576)) & 0xFFFFFFFFFFFFF8);
  v115 = (_QWORD *)((v561 + v113) & 0xFFFFFFFFFFFFF8);
  *v114 = *v115;
  *(_OWORD *)(((unint64_t)v114 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v115 + 15) & 0xFFFFFFFFFFFFF8);
LABEL_100:
  v121 = (unint64_t)&v92[v98];
  v122 = (uint64_t)v93 + v98 + 10;
  *(_BYTE *)v121 = *((_BYTE *)v93 + v98);
  v123 = ~__src;
  *(_BYTE *)(v121 | 1) = *(_BYTE *)(((unint64_t)v93 + v98) | 1);
  v603 = ~v585;
  v588 = ~v587;
  *(_BYTE *)(v121 | 2) = *(_BYTE *)(((unint64_t)v93 + v98) | 2);
  v124 = (unint64_t)&v92[v98 + 10] & 0xFFFFFFFFFFFFFFF8;
  v125 = *(_BYTE *)((v122 & 0xFFFFFFFFFFFFFFF8) + 16);
  v126 = *(void **)v124;
  v127 = *(void **)(v124 + 8);
  *(_OWORD *)v124 = *(_OWORD *)(v122 & 0xFFFFFFFFFFFFFFF8);
  v128 = *(_BYTE *)(v124 + 16);
  *(_BYTE *)(v124 + 16) = v125;
  sub_23AAAEE10(v126, v127, v128);
  v129 = (unint64_t)&v92[v98 + 34] & 0xFFFFFFFFFFFFFFF8;
  v130 = ((unint64_t)v93 + v98 + 34) & 0xFFFFFFFFFFFFFFF8;
  v131 = *(_QWORD *)(v129 + 16);
  if (4 * ((v131 >> 60) & 3) && (((v131 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v131 >> 60) & 3))) != 0xF)
  {
LABEL_102:
    v132 = *(_OWORD *)v130;
    v133 = *(_OWORD *)(v130 + 16);
    v134 = *(_OWORD *)(v130 + 32);
    *(_QWORD *)(v129 + 48) = *(_QWORD *)(v130 + 48);
    *(_OWORD *)(v129 + 16) = v133;
    *(_OWORD *)(v129 + 32) = v134;
    *(_OWORD *)v129 = v132;
    v135 = v566;
    goto LABEL_113;
  }
  v136 = (uint64_t *)(v129 + 8);
  v137 = *(_QWORD *)(v130 + 16) >> 60;
  if (4 * (v137 & 3) && ((v137 >> 2) & 0xFFFFFFF3 | (4 * (v137 & 3))) != 0xF)
  {
    if (v131 >> 60 != 15)
      sub_23AAAE53C(*v136, v131);
    goto LABEL_102;
  }
  v138 = (_QWORD *)(v130 + 8);
  *(_QWORD *)v129 = *(_QWORD *)v130;
  if (v131 >> 60 != 15)
  {
    v139 = *(_QWORD *)(v130 + 16);
    if (v139 >> 60 != 15)
    {
      v140 = *(_QWORD *)(v129 + 8);
      *(_QWORD *)(v129 + 8) = *v138;
      *(_QWORD *)(v129 + 16) = v139;
      sub_23AAAE53C(v140, v131);
      goto LABEL_112;
    }
    sub_23AB2D750(v129 + 8);
  }
  *(_OWORD *)v136 = *(_OWORD *)v138;
LABEL_112:
  v135 = v566;
  v141 = *(_OWORD *)(v130 + 24);
  *(_BYTE *)(v129 + 40) = *(_BYTE *)(v130 + 40);
  *(_OWORD *)(v129 + 24) = v141;
  *(_QWORD *)(v129 + 48) = *(_QWORD *)(v130 + 48);
LABEL_113:
  v142 = (void **)((v129 + 63) & 0xFFFFFFFFFFFFFFF8);
  v143 = (void **)((v130 + 63) & 0xFFFFFFFFFFFFFFF8);
  v144 = *v142;
  *v142 = *v143;

  *(_QWORD *)(((unint64_t)v142 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v143 + 15) & 0xFFFFFFFFFFFFF8);
  v570 = v567 + 7;
  v563 = v536 + 16;
  v145 = ((((((((v590 + ((((v567 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v588) + v98 + 34) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
  *(_BYTE *)(v145 + v572) = *(_BYTE *)(v145 + v543);
  v146 = (v145 + v572) & 0xFFFFFFFFFFFFFFF8;
  v147 = (v145 + v543) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v146 + 8) = *(_QWORD *)(v147 + 8);
  swift_bridgeObjectRelease();
  v148 = (_QWORD *)((v146 + 23) & 0xFFFFFFFFFFFFFFF8);
  v149 = (_QWORD *)((v147 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v148 = *v149;
  v148[1] = v149[1];
  v150 = ((unint64_t)v148 + 23) & 0xFFFFFFFFFFFFFFF8;
  v151 = ((unint64_t)v149 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v150 = *(_QWORD *)v151;
  *(_BYTE *)(v150 + 8) = *(_BYTE *)(v151 + 8);
  *(_QWORD *)(((unint64_t)v148 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v149 + 39) & 0xFFFFFFFFFFFFF8);
  v586 = v110 + v585;
  v573 = v145;
  v152 = (((((v145 + (v586 & v603)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  v153 = (void *)(((v545 | __src) + v152 + 8) & v123);
  v546 = v152 + 8;
  v154 = (void *)(((v547 | __src) + v152 + 8) & v123);
  LODWORD(v147) = v571(v153, 1, v135);
  v155 = v571(v154, 1, v135);
  if ((_DWORD)v147)
  {
    if (!v155)
    {
      (*(void (**)(void *, void *, uint64_t))(v550 + 32))(v153, v154, v135);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v550 + 56))(v153, 0, 1, v135);
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  if (v155)
  {
    (*(void (**)(void *, uint64_t))(v550 + 8))(v153, v135);
LABEL_118:
    memcpy(v153, v154, __n);
    goto LABEL_119;
  }
  (*(void (**)(void *, void *, uint64_t))(v550 + 40))(v153, v154, v135);
LABEL_119:
  v156 = (_QWORD *)(((unint64_t)v153 + v574) & 0xFFFFFFFFFFFFF8);
  v157 = (_QWORD *)(((unint64_t)v154 + v574) & 0xFFFFFFFFFFFFFFF8);
  *v156 = *v157;
  v158 = ((unint64_t)v156 + 15) & 0xFFFFFFFFFFFFFFF8;
  v159 = ((unint64_t)v157 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v158 = *(_QWORD *)v159;
  *(_BYTE *)(v158 + 8) = *(_BYTE *)(v159 + 8);
  v160 = (char *)((v598 + v158) & v596);
  v161 = (char *)((v598 + v159) & v596);
  __srca = ~__src;
  v544 = (((((v145 + (v586 & v603)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  if (v592 == v591)
  {
    v548 = v154;
    v162 = v153;
    v163 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v601 + 48);
    v164 = v163(v160, v592, v594);
    v165 = v163(v161, v592, v594);
    if (v164)
      goto LABEL_121;
    goto LABEL_132;
  }
  v167 = (uint64_t *)((unint64_t)&v160[v581] & 0xFFFFFFFFFFFFFFF8);
  if (v551 <= 0x7FFFFFFE)
  {
    v168 = *v167;
    if ((unint64_t)*v167 >= 0xFFFFFFFF)
      LODWORD(v168) = -1;
    v169 = v168 + 1;
    v170 = (uint64_t *)((unint64_t)&v161[v581] & 0xFFFFFFFFFFFFFFF8);
    v171 = *v170;
    if ((unint64_t)*v170 >= 0xFFFFFFFF)
      LODWORD(v171) = -1;
    v172 = v171 + 1;
    if (v169 >= 2)
    {
      if (v172 >= 2)
        goto LABEL_122;
      v175 = v601;
      v176 = v154;
LABEL_139:
      (*(void (**)(char *, char *, uint64_t))(v175 + 32))(v160, v161, v594);
      *v167 = *v170;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v600 + 32))(((unint64_t)v167 + v578) & v579, ((unint64_t)v170 + v578) & v579, v580);
      v177 = (_QWORD *)((v552 + (((unint64_t)v167 + v578) & v579)) & 0xFFFFFFFFFFFFF8);
      v178 = (_QWORD *)((v552 + (((unint64_t)v170 + v578) & v579)) & 0xFFFFFFFFFFFFF8);
      *v177 = *v178;
      *(_OWORD *)(((unint64_t)v177 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v178 + 15) & 0xFFFFFFFFFFFFF8);
      v166 = v562;
      v154 = v176;
      goto LABEL_143;
    }
    v548 = v154;
    if (v172 >= 2)
      goto LABEL_134;
    goto LABEL_141;
  }
  v548 = v154;
  v162 = v153;
  v173 = ((unint64_t)v167 + v578) & v579;
  v174 = *(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v600 + 48);
  v541 = v174(v173, v539, v580);
  v165 = v174((v578 + ((unint64_t)&v161[v581] & 0xFFFFFFFFFFFFFFF8)) & v579, v539, v580);
  if (!v541)
  {
LABEL_132:
    v167 = (uint64_t *)((unint64_t)&v160[v581] & 0xFFFFFFFFFFFFFFF8);
    if (v165)
    {
      v153 = v162;
LABEL_134:
      (*(void (**)(char *, uint64_t))(v601 + 8))(v160, v594);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v600 + 8))(((unint64_t)v167 + v578) & v579, v580);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v166 = v562;
      memcpy(v160, v161, v562);
LABEL_142:
      v154 = v548;
      goto LABEL_143;
    }
    v170 = (uint64_t *)((unint64_t)&v161[v581] & 0xFFFFFFFFFFFFFFF8);
    v153 = v162;
LABEL_141:
    (*(void (**)(char *, char *, uint64_t))(v601 + 40))(v160, v161, v594);
    *v167 = *v170;
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v600 + 40))(((unint64_t)v167 + v578) & v579, ((unint64_t)v170 + v578) & v579, v580);
    v179 = (_QWORD *)((v69 + (((unint64_t)v167 + v578) & v579)) & 0xFFFFFFFFFFFFFFF8);
    v180 = (v69 + (((unint64_t)v170 + v578) & v579)) & 0xFFFFFFFFFFFFF8;
    v181 = *(_QWORD *)v180;
    v180 += 15;
    *v179 = v181;
    swift_bridgeObjectRelease();
    v182 = (_QWORD *)(((unint64_t)v179 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v182 = *(_QWORD *)(v180 & 0xFFFFFFFFFFFFFFF8);
    v182[1] = *(_QWORD *)((v180 & 0xFFFFFFFFFFFFFFF8) + 8);
    swift_bridgeObjectRelease();
    v166 = v562;
    goto LABEL_142;
  }
LABEL_121:
  v153 = v162;
  v154 = v548;
  if (!v165)
  {
    v175 = v601;
    v176 = v548;
    v167 = (uint64_t *)((unint64_t)&v160[v581] & 0xFFFFFFFFFFFFFFF8);
    v170 = (uint64_t *)((unint64_t)&v161[v581] & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_139;
  }
LABEL_122:
  v166 = v562;
  memcpy(v160, v161, v562);
LABEL_143:
  v183 = (_BYTE *)((unint64_t)&v161[v166] | 1);
  v184 = (_BYTE *)((unint64_t)&v161[v166] | 2);
  v185 = (uint64_t)&v161[v166 + 10];
  v187 = (uint64_t)&v161[v166 + 34];
  v186 = v161[v166];
  v188 = (_BYTE *)((unint64_t)&v160[v166] | 1);
  v189 = (_BYTE *)((unint64_t)&v160[v166] | 2);
  v190 = (uint64_t)&v160[v166 + 10];
  v191 = &v160[v166];
  *v191 = v186;
  *v188 = *v183;
  *v189 = *v184;
  v192 = v190 & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v183) = *(_BYTE *)((v185 & 0xFFFFFFFFFFFFFFF8) + 16);
  v193 = *(void **)(v190 & 0xFFFFFFFFFFFFFFF8);
  v194 = *(void **)((v190 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_OWORD *)v192 = *(_OWORD *)(v185 & 0xFFFFFFFFFFFFFFF8);
  v195 = *(_BYTE *)((v190 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_BYTE *)(v192 + 16) = (_BYTE)v183;
  sub_23AAAEE10(v193, v194, v195);
  v196 = (unint64_t)(v191 + 34) & 0xFFFFFFFFFFFFFFF8;
  v197 = v187 & 0xFFFFFFFFFFFFFFF8;
  v198 = *(_QWORD *)(v196 + 16);
  if (4 * ((v198 >> 60) & 3) && (((v198 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v198 >> 60) & 3))) != 0xF)
  {
LABEL_145:
    v199 = *(_OWORD *)v197;
    v200 = *(_OWORD *)(v197 + 16);
    v201 = *(_OWORD *)(v197 + 32);
    *(_QWORD *)(v196 + 48) = *(_QWORD *)(v197 + 48);
    *(_OWORD *)(v196 + 16) = v200;
    *(_OWORD *)(v196 + 32) = v201;
    *(_OWORD *)v196 = v199;
    v202 = v584;
    goto LABEL_156;
  }
  v203 = (uint64_t *)(v196 + 8);
  v204 = *(_QWORD *)(v197 + 16) >> 60;
  if (4 * (v204 & 3) && ((v204 >> 2) & 0xFFFFFFF3 | (4 * (v204 & 3))) != 0xF)
  {
    if (v198 >> 60 != 15)
      sub_23AAAE53C(*v203, v198);
    goto LABEL_145;
  }
  v205 = (_QWORD *)(v197 + 8);
  *(_QWORD *)v196 = *(_QWORD *)v197;
  if (v198 >> 60 != 15)
  {
    v206 = *(_QWORD *)(v197 + 16);
    if (v206 >> 60 != 15)
    {
      v207 = *(_QWORD *)(v196 + 8);
      *(_QWORD *)(v196 + 8) = *v205;
      *(_QWORD *)(v196 + 16) = v206;
      sub_23AAAE53C(v207, v198);
      goto LABEL_155;
    }
    sub_23AB2D750(v196 + 8);
  }
  *(_OWORD *)v203 = *(_OWORD *)v205;
LABEL_155:
  v202 = v584;
  v208 = *(_OWORD *)(v197 + 24);
  *(_BYTE *)(v196 + 40) = *(_BYTE *)(v197 + 40);
  *(_OWORD *)(v196 + 24) = v208;
  *(_QWORD *)(v196 + 48) = *(_QWORD *)(v197 + 48);
LABEL_156:
  v209 = (void **)((v196 + 63) & 0xFFFFFFFFFFFFFFF8);
  v210 = (void **)((v197 + 63) & 0xFFFFFFFFFFFFFFF8);
  v211 = *v209;
  *v209 = *v210;

  *(_QWORD *)(((unint64_t)v209 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v210 + 15) & 0xFFFFFFFFFFFFF8);
  v212 = (void *)(((unint64_t)v153 + v586) & v603);
  v213 = (void *)(((unint64_t)v154 + v586) & v603);
  v214 = v565(v212, 1, v202);
  v215 = v565(v213, 1, v202);
  if (v214)
  {
    if (!v215)
    {
      (*(void (**)(void *, void *, uint64_t))(v569 + 32))(v212, v213, v202);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v569 + 56))(v212, 0, 1, v202);
      goto LABEL_162;
    }
    goto LABEL_161;
  }
  if (v215)
  {
    (*(void (**)(void *, uint64_t))(v569 + 8))(v212, v202);
LABEL_161:
    memcpy(v212, v213, v567);
    goto LABEL_162;
  }
  (*(void (**)(void *, void *, uint64_t))(v569 + 40))(v212, v213, v202);
LABEL_162:
  v216 = (_QWORD *)(((unint64_t)v212 + v570) & 0xFFFFFFFFFFFFF8);
  v217 = (_QWORD *)(((unint64_t)v213 + v570) & 0xFFFFFFFFFFFFFFF8);
  *v216 = *v217;
  v218 = ((unint64_t)v216 + 15) & 0xFFFFFFFFFFFFFFF8;
  v219 = ((unint64_t)v217 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v218 = *(_QWORD *)v219;
  *(_BYTE *)(v218 + 8) = *(_BYTE *)(v219 + 8);
  v220 = (char *)((v590 + v218) & v588);
  v221 = (const void *)((v590 + v219) & v588);
  v549 = ((unint64_t)v154 + v586) & v603;
  if (v564 == v96)
  {
    v222 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v605 + 48);
    v223 = v593;
    v224 = v222(v220, v564, v593);
    v225 = (unint64_t)v221;
    v226 = v564;
  }
  else
  {
    v227 = (uint64_t *)((unint64_t)&v220[v583] & 0xFFFFFFFFFFFFFFF8);
    if (v553 <= 0x7FFFFFFE)
    {
      v228 = *v227;
      if ((unint64_t)*v227 >= 0xFFFFFFFF)
        LODWORD(v228) = -1;
      v229 = v228 + 1;
      v230 = (uint64_t *)(((unint64_t)v221 + v583) & 0xFFFFFFFFFFFFFFF8);
      v231 = *v230;
      if ((unint64_t)*v230 >= 0xFFFFFFFF)
        LODWORD(v231) = -1;
      v232 = v231 + 1;
      if (v229 >= 2)
      {
        if (v232 >= 2)
          goto LABEL_175;
        goto LABEL_181;
      }
      if (v232 >= 2)
      {
LABEL_177:
        (*(void (**)(char *, uint64_t))(v605 + 8))(v220, v593);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v599 + 8))(((unint64_t)v227 + v575) & v576, v577);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v235 = v536 + 16;
        memcpy(v220, v221, v563);
LABEL_185:
        v96 = v560;
        v123 = __srca;
        goto LABEL_186;
      }
LABEL_183:
      (*(void (**)(char *, const void *, uint64_t))(v605 + 40))(v220, v221, v593);
      *v227 = *v230;
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v599 + 40))(((unint64_t)v227 + v575) & v576, ((unint64_t)v230 + v575) & v576, v577);
      v238 = (_QWORD *)((v561 + (((unint64_t)v227 + v575) & v576)) & 0xFFFFFFFFFFFFFFF8);
      v239 = (v561 + (((unint64_t)v230 + v575) & v576)) & 0xFFFFFFFFFFFFF8;
      v240 = *(_QWORD *)v239;
      v239 += 15;
      *v238 = v240;
      swift_bridgeObjectRelease();
      v241 = (_QWORD *)(((unint64_t)v238 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v241 = *(_QWORD *)(v239 & 0xFFFFFFFFFFFFFFF8);
      v241[1] = *(_QWORD *)((v239 & 0xFFFFFFFFFFFFFFF8) + 8);
      swift_bridgeObjectRelease();
      goto LABEL_184;
    }
    v223 = v577;
    v233 = ((unint64_t)v227 + v575) & v576;
    v222 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v599 + 48);
    v224 = v222((char *)v233, v538, v577);
    v123 = __srca;
    v225 = (v575 + (((unint64_t)v221 + v583) & 0xFFFFFFFFFFFFFFF8)) & v576;
    v226 = v538;
  }
  v234 = v222((char *)v225, v226, v223);
  if (!v224)
  {
    v227 = (uint64_t *)((unint64_t)&v220[v583] & 0xFFFFFFFFFFFFFFF8);
    if (v234)
      goto LABEL_177;
    v230 = (uint64_t *)(((unint64_t)v221 + v583) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_183;
  }
  v96 = v560;
  if (!v234)
  {
    v227 = (uint64_t *)((unint64_t)&v220[v583] & 0xFFFFFFFFFFFFFFF8);
    v230 = (uint64_t *)(((unint64_t)v221 + v583) & 0xFFFFFFFFFFFFFFF8);
LABEL_181:
    (*(void (**)(char *, const void *, uint64_t))(v605 + 32))(v220, v221, v593);
    *v227 = *v230;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v599 + 32))(((unint64_t)v227 + v575) & v576, ((unint64_t)v230 + v575) & v576, v577);
    v236 = (_QWORD *)((v561 + (((unint64_t)v227 + v575) & v576)) & 0xFFFFFFFFFFFFF8);
    v237 = (_QWORD *)((v561 + (((unint64_t)v230 + v575) & v576)) & 0xFFFFFFFFFFFFF8);
    *v236 = *v237;
    *(_OWORD *)(((unint64_t)v236 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v237 + 15) & 0xFFFFFFFFFFFFF8);
LABEL_184:
    v235 = v536 + 16;
    goto LABEL_185;
  }
LABEL_175:
  v235 = v536 + 16;
  memcpy(v220, v221, v563);
LABEL_186:
  v242 = (_BYTE *)(((unint64_t)v221 + v235) | 1);
  v243 = (_BYTE *)(((unint64_t)v221 + v235) | 2);
  v244 = (uint64_t)v221 + v235 + 10;
  v246 = (uint64_t)v221 + v235 + 34;
  v245 = *((_BYTE *)v221 + v235);
  v247 = (_BYTE *)((unint64_t)&v220[v235] | 1);
  v248 = (_BYTE *)((unint64_t)&v220[v235] | 2);
  v249 = (uint64_t)&v220[v235 + 10];
  v250 = &v220[v235];
  *v250 = v245;
  *v247 = *v242;
  *v248 = *v243;
  v251 = v249 & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v242) = *(_BYTE *)((v244 & 0xFFFFFFFFFFFFFFF8) + 16);
  v252 = *(void **)(v249 & 0xFFFFFFFFFFFFFFF8);
  v253 = *(void **)((v249 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_OWORD *)v251 = *(_OWORD *)(v244 & 0xFFFFFFFFFFFFFFF8);
  v254 = *(_BYTE *)((v249 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_BYTE *)(v251 + 16) = (_BYTE)v242;
  sub_23AAAEE10(v252, v253, v254);
  v255 = (unint64_t)(v250 + 34) & 0xFFFFFFFFFFFFFFF8;
  v256 = v246 & 0xFFFFFFFFFFFFFFF8;
  v257 = *(_QWORD *)(v255 + 16);
  if (4 * ((v257 >> 60) & 3) && (((v257 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v257 >> 60) & 3))) != 0xF)
  {
LABEL_188:
    v258 = *(_OWORD *)v256;
    v259 = *(_OWORD *)(v256 + 16);
    v260 = *(_OWORD *)(v256 + 32);
    *(_QWORD *)(v255 + 48) = *(_QWORD *)(v256 + 48);
    *(_OWORD *)(v255 + 16) = v259;
    *(_OWORD *)(v255 + 32) = v260;
    *(_OWORD *)v255 = v258;
    v261 = v542;
    v262 = v544;
    goto LABEL_199;
  }
  v263 = (uint64_t *)(v255 + 8);
  v264 = *(_QWORD *)(v256 + 16) >> 60;
  if (4 * (v264 & 3) && ((v264 >> 2) & 0xFFFFFFF3 | (4 * (v264 & 3))) != 0xF)
  {
    if (v257 >> 60 != 15)
      sub_23AAAE53C(*v263, v257);
    goto LABEL_188;
  }
  v265 = (_QWORD *)(v256 + 8);
  *(_QWORD *)v255 = *(_QWORD *)v256;
  if (v257 >> 60 != 15)
  {
    v266 = *(_QWORD *)(v256 + 16);
    if (v266 >> 60 != 15)
    {
      v267 = *(_QWORD *)(v255 + 8);
      *(_QWORD *)(v255 + 8) = *v265;
      *(_QWORD *)(v255 + 16) = v266;
      sub_23AAAE53C(v267, v257);
      goto LABEL_198;
    }
    sub_23AB2D750(v255 + 8);
  }
  *(_OWORD *)v263 = *(_OWORD *)v265;
LABEL_198:
  v261 = v542;
  v262 = v544;
  v268 = *(_OWORD *)(v256 + 24);
  *(_BYTE *)(v255 + 40) = *(_BYTE *)(v256 + 40);
  *(_OWORD *)(v255 + 24) = v268;
  *(_QWORD *)(v255 + 48) = *(_QWORD *)(v256 + 48);
LABEL_199:
  v269 = (void **)((v255 + 63) & 0xFFFFFFFFFFFFFFF8);
  v270 = (void **)((v256 + 63) & 0xFFFFFFFFFFFFFFF8);
  v271 = *v269;
  *v269 = *v270;

  *(_QWORD *)(((unint64_t)v269 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v270 + 15) & 0xFFFFFFFFFFFFF8);
  *((_BYTE *)v212 + v573) = *(_BYTE *)(v549 + v573);
  v272 = ((unint64_t)v212 + v573) & 0xFFFFFFFFFFFFFFF8;
  v273 = (v549 + v573) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v272 + 8) = *(_QWORD *)(v273 + 8);
  swift_bridgeObjectRelease();
  v274 = (_QWORD *)((v272 + 23) & 0xFFFFFFFFFFFFFFF8);
  v275 = (_QWORD *)((v273 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v274 = *v275;
  v274[1] = v275[1];
  v276 = ((unint64_t)v274 + 23) & 0xFFFFFFFFFFFFFFF8;
  v277 = ((unint64_t)v275 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v276 = *(_QWORD *)v277;
  *(_BYTE *)(v276 + 8) = *(_BYTE *)(v277 + 8);
  *(_QWORD *)(((unint64_t)v274 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v275 + 39) & 0xFFFFFFFFFFFFF8);
  v278 = (_QWORD *)(((unint64_t)v153 + v262 + 15) & 0xFFFFFFFFFFFFFFF8);
  v279 = (_QWORD *)(((unint64_t)v154 + v262 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v278 = *v279;
  v278[1] = v279[1];
  v280 = ((unint64_t)v278 + 23) & 0xFFFFFFFFFFFFFFF8;
  v281 = ((unint64_t)v279 + 23) & 0xFFFFFFFFFFFFFFF8;
  v282 = *(_QWORD *)v281;
  *(_BYTE *)(v280 + 8) = *(_BYTE *)(v281 + 8);
  *(_QWORD *)v280 = v282;
  v283 = (void *)((unint64_t)&v261[v280] & v123);
  __srcb = (void *)((unint64_t)&v261[v281] & v123);
  v284 = v556;
  if (v556)
    v285 = v556 - 1;
  else
    v285 = 0;
  v286 = v591 - 1;
  if (v285 <= v591 - 1)
    v287 = v591 - 1;
  else
    v287 = v285;
  if (v287 <= 0x7FFFFFFE)
    v288 = 2147483646;
  else
    v288 = v287;
  v289 = v554;
  if (v554)
    v290 = v554 - 1;
  else
    v290 = 0;
  v291 = v96 - 1;
  if (v290 <= v96 - 1)
    v292 = v96 - 1;
  else
    v292 = v290;
  if (v292 <= 0x7FFFFFFE)
    v293 = 2147483646;
  else
    v293 = v292;
  if (v293 <= v288)
    v294 = v288;
  else
    v294 = v293;
  if (v294 <= 0x7FFFFFFF)
    v295 = 0x7FFFFFFF;
  else
    v295 = v294;
  if (v288 != v295)
  {
    v299 = v283;
    v300 = ((unint64_t)v283 + v586) & v603;
    if (v293 != v295)
    {
      v301 = v555;
      v302 = __srcb;
      if (*(_QWORD *)(((v300 + v573) & 0xFFFFFFFFFFFFF8) + 8) <= 0xFFFFFFFEuLL)
        goto LABEL_300;
      goto LABEL_294;
    }
    if (v290 == v293)
    {
      v301 = v555;
      v302 = __srcb;
      if (v554 >= 2)
      {
        v303 = v565((void *)v300, v554, v584);
        v289 = v554;
        if (v303 >= 2)
          goto LABEL_300;
      }
      goto LABEL_294;
    }
    v306 = (v590 + ((((v570 + v300) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v588;
    if (v291 != v293)
    {
      v311 = *(_QWORD *)((((v536 + v306 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
      if (v311 >= 0xFFFFFFFF)
        LODWORD(v311) = -1;
      v301 = v555;
      v302 = __srcb;
      if ((v311 + 1) >= 2)
      {
LABEL_300:
        v326 = ((unint64_t)v302 + v586) & v603;
        if (v293 != v295)
        {
          v296 = v566;
          v297 = v299;
          if (*(_QWORD *)(((v326 + v573) & 0xFFFFFFFFFFFFF8) + 8) < 0xFFFFFFFFuLL)
            goto LABEL_500;
          goto LABEL_340;
        }
        if (v290 == v293)
        {
          v296 = v566;
          v297 = v299;
          if (v289 < 2)
            goto LABEL_340;
          v315 = v565((void *)v326, v289, v584);
          goto LABEL_304;
        }
        v328 = (v590 + ((((v570 + v326) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v588;
        if (v291 != v293)
        {
          v330 = *(_QWORD *)((((v536 + v328 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
          if (v330 >= 0xFFFFFFFF)
            LODWORD(v330) = -1;
          v296 = v566;
          v297 = v299;
          if ((v330 + 1) >= 2)
            goto LABEL_500;
          goto LABEL_340;
        }
        if (v564 == v96)
        {
          v296 = v566;
          v297 = v299;
          if ((*(unsigned int (**)(unint64_t))(v605 + 48))(v328) < 2)
            goto LABEL_340;
        }
        else
        {
          v332 = (unint64_t *)((v583 + v328) & 0xFFFFFFFFFFFFFFF8);
          v296 = v566;
          v297 = v299;
          if (v553 <= 0x7FFFFFFE)
          {
            v333 = *v332;
            if (v333 >= 0xFFFFFFFF)
              v319 = -1;
            else
              v319 = v333;
            if (v319 + 1 < 2)
              goto LABEL_340;
            goto LABEL_339;
          }
          if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v599 + 48))(((unint64_t)v332 + v575) & v576, v538, v577) < 2)goto LABEL_340;
        }
LABEL_500:
        v430 = v297;
        v431 = v302;
        v432 = v546;
LABEL_501:
        memcpy(v430, v431, v432);
        return v301;
      }
LABEL_294:
      v325 = ((unint64_t)v302 + v586) & v603;
      if (v293 == v295)
      {
        if (v290 == v293)
        {
          v296 = v566;
          v297 = v299;
          if (v289 < 2)
            goto LABEL_373;
          v314 = v565((void *)v325, v289, v584);
          goto LABEL_298;
        }
        v327 = (v590 + ((((v570 + v325) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v588;
        if (v291 == v293)
        {
          v296 = v566;
          v297 = v299;
          if (v564 == v96)
          {
            v317 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v605 + 48))(v327, v564, v593);
          }
          else
          {
            v322 = (unint64_t *)((v583 + v327) & 0xFFFFFFFFFFFFFFF8);
            if (v553 <= 0x7FFFFFFE)
              goto LABEL_326;
            v317 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v599 + 48))(((unint64_t)v322 + v575) & v576, v538, v577);
          }
LABEL_372:
          if (v317 >= 2)
            goto LABEL_376;
          goto LABEL_373;
        }
        v329 = *(_QWORD *)((((v536 + v327 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
        if (v329 >= 0xFFFFFFFF)
          LODWORD(v329) = -1;
        v296 = v566;
        v297 = v299;
        if ((v329 + 1) < 2)
          goto LABEL_373;
      }
      else
      {
        v296 = v566;
        v297 = v299;
        if (*(_QWORD *)(((v325 + v573) & 0xFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
          goto LABEL_373;
      }
LABEL_376:
      if (!v571(v297, 1, v296))
        (*(void (**)(void *, uint64_t))(v550 + 8))(v297, v296);
      v392 = (v598 + (((((unint64_t)v297 + v574) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v596;
      if (v592 == v591)
      {
        v393 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v601 + 48))((v598 + (((((unint64_t)v297 + v574) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v596, v592, v594);
      }
      else
      {
        v411 = (uint64_t *)((v581 + v392) & 0xFFFFFFFFFFFFFFF8);
        if (v551 <= 0x7FFFFFFE)
        {
          v412 = *v411;
          if ((unint64_t)*v411 >= 0xFFFFFFFF)
            LODWORD(v412) = -1;
          v413 = v584;
          if ((v412 + 1) >= 2)
          {
LABEL_408:
            v416 = v392 + v562;
            sub_23AAAEE10(*(void **)((v416 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v416 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v416 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
            v417 = (v416 + 34) & 0xFFFFFFFFFFFFFFF8;
            v418 = *(_QWORD *)(v417 + 16);
            v419 = ((4 * (v418 >> 60)) & 0xC | ((v418 >> 60) >> 2)) != 0xF
                && ((4 * (v418 >> 60)) & 0xC) != 0;
            if (v418 >> 60 != 15 && !v419)
              sub_23AAAE53C(*(_QWORD *)(v417 + 8), v418);

            v420 = ((unint64_t)v297 + v586) & v603;
            if (!v565((void *)v420, 1, v413))
              (*(void (**)(unint64_t, uint64_t))(v569 + 8))(v420, v413);
            v421 = (v590 + ((((v570 + v420) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v588;
            if (v564 == v96)
            {
              v422 = v546;
              v423 = v583;
              if (!(*(unsigned int (**)(size_t))(v605 + 48))((v590
                                                                        + ((((v570 + v420) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v588))
                goto LABEL_425;
            }
            else
            {
              v423 = v583;
              v424 = (uint64_t *)((v583 + v421) & 0xFFFFFFFFFFFFFFF8);
              if (v553 <= 0x7FFFFFFE)
              {
                v425 = *v424;
                if ((unint64_t)*v424 >= 0xFFFFFFFF)
                  LODWORD(v425) = -1;
                v422 = v546;
                if ((v425 + 1) >= 2)
                  goto LABEL_427;
                goto LABEL_426;
              }
              v422 = v546;
              if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v599 + 48))(((unint64_t)v424 + v575) & v576, v538, v577))
              {
LABEL_425:
                v424 = (uint64_t *)((v423 + v421) & 0xFFFFFFFFFFFFFFF8);
LABEL_426:
                (*(void (**)(unint64_t, uint64_t))(v605 + 8))(v421, v593);
                swift_bridgeObjectRelease();
                (*(void (**)(unint64_t, uint64_t))(v599 + 8))(((unint64_t)v424 + v575) & v576, v577);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
            }
LABEL_427:
            v426 = v421 + v563;
            sub_23AAAEE10(*(void **)((v426 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v426 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v426 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
            v427 = (v426 + 34) & 0xFFFFFFFFFFFFFFF8;
            v428 = *(_QWORD *)(v427 + 16);
            v429 = ((4 * (v428 >> 60)) & 0xC | ((v428 >> 60) >> 2)) != 0xF
                && ((4 * (v428 >> 60)) & 0xC) != 0;
            if (v428 >> 60 != 15 && !v429)
              sub_23AAAE53C(*(_QWORD *)(v427 + 8), v428);

            swift_bridgeObjectRelease();
            v430 = v297;
            v431 = v302;
            v432 = v422;
            goto LABEL_501;
          }
LABEL_407:
          (*(void (**)(unint64_t, uint64_t))(v601 + 8))(v392, v594);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v600 + 8))(((unint64_t)v411 + v578) & v579, v580);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_408;
        }
        v393 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v600 + 48))(((unint64_t)v411 + v578) & v579, v539, v580);
      }
      v413 = v584;
      if (v393)
        goto LABEL_408;
      v411 = (uint64_t *)((v581 + v392) & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_407;
    }
    v301 = v555;
    v302 = __srcb;
    if (v564 == v96)
    {
      v307 = (*(uint64_t (**)(unint64_t))(v605 + 48))(v306);
    }
    else
    {
      v312 = (unint64_t *)((v583 + v306) & 0xFFFFFFFFFFFFFFF8);
      if (v553 <= 0x7FFFFFFE)
      {
        v313 = *v312;
        if (v313 >= 0xFFFFFFFF)
          v307 = -1;
        else
          v307 = v313;
        if (v307 + 1 < 2)
          goto LABEL_294;
        goto LABEL_293;
      }
      v307 = (*(uint64_t (**)(unint64_t))(v599 + 48))(((unint64_t)v312 + v575) & v576);
    }
    v289 = v554;
LABEL_293:
    if (v307 >= 2)
      goto LABEL_300;
    goto LABEL_294;
  }
  if (v285 == v288)
  {
    v296 = v566;
    v297 = v283;
    if (v556 >= 2)
    {
      v298 = v571(v283, v556, v566);
      v284 = v556;
      if (v298 >= 2)
        goto LABEL_266;
    }
    goto LABEL_263;
  }
  v297 = v283;
  v304 = (v598 + (((((unint64_t)v283 + v574) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v596;
  if (v286 == v288)
  {
    if (v592 == v591)
    {
      v305 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v601 + 48))(v304, v592, v594);
      v284 = v556;
      v296 = v566;
      goto LABEL_262;
    }
    v309 = (unint64_t *)((v581 + v304) & 0xFFFFFFFFFFFFFFF8);
    v296 = v566;
    if (v551 > 0x7FFFFFFE)
    {
      v305 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v600 + 48))(((unint64_t)v309 + v578) & v579, v539, v580);
      v284 = v556;
    }
    else
    {
      v310 = *v309;
      if (v310 >= 0xFFFFFFFF)
        v305 = -1;
      else
        v305 = v310;
      if (v305 + 1 < 2)
      {
LABEL_263:
        if (v285 == v288)
        {
          v301 = v555;
          v302 = __srcb;
          if (v284 < 2)
            goto LABEL_373;
          v314 = v571(__srcb, v284, v296);
LABEL_298:
          if (v314 >= 2)
            goto LABEL_376;
LABEL_373:
          v390 = v571(v297, 1, v296);
          v391 = v571(v302, 1, v296);
          if (v390)
          {
            if (!v391)
            {
              (*(void (**)(void *, void *, uint64_t))(v550 + 32))(v297, v302, v296);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v550 + 56))(v297, 0, 1, v296);
              goto LABEL_383;
            }
          }
          else
          {
            if (!v391)
            {
              (*(void (**)(void *, void *, uint64_t))(v550 + 40))(v297, v302, v296);
LABEL_383:
              v394 = (_QWORD *)(((unint64_t)v297 + v574) & 0xFFFFFFFFFFFFF8);
              v395 = (_QWORD *)(((unint64_t)v302 + v574) & 0xFFFFFFFFFFFFFFF8);
              *v394 = *v395;
              v396 = ((unint64_t)v394 + 15) & 0xFFFFFFFFFFFFFFF8;
              v397 = ((unint64_t)v395 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v396 = *(_QWORD *)v397;
              *(_BYTE *)(v396 + 8) = *(_BYTE *)(v397 + 8);
              v398 = (char *)((v598 + v396) & v596);
              v399 = (char *)((v598 + v397) & v596);
              if (v592 == v591)
              {
                v400 = v297;
                v401 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v601 + 48);
                v402 = v401(v398, v592, v594);
                v403 = v401(v399, v592, v594);
                if (v402)
                  goto LABEL_385;
              }
              else
              {
                v405 = (uint64_t *)((unint64_t)&v398[v581] & 0xFFFFFFFFFFFFFFF8);
                if (v551 <= 0x7FFFFFFE)
                {
                  v407 = *v405;
                  if ((unint64_t)*v405 >= 0xFFFFFFFF)
                    LODWORD(v407) = -1;
                  v408 = v407 + 1;
                  v406 = (uint64_t *)((unint64_t)&v399[v581] & 0xFFFFFFFFFFFFFFF8);
                  v409 = *v406;
                  if ((unint64_t)*v406 >= 0xFFFFFFFF)
                    LODWORD(v409) = -1;
                  v410 = v409 + 1;
                  if (v408 >= 2)
                  {
                    v302 = __srcb;
                    v404 = v584;
                    if (v410 < 2)
                      goto LABEL_436;
                    goto LABEL_437;
                  }
                  v302 = __srcb;
                  v404 = v584;
                  if (v410 >= 2)
                  {
LABEL_403:
                    (*(void (**)(char *, uint64_t))(v601 + 8))(v398, v594);
                    swift_bridgeObjectRelease();
                    (*(void (**)(unint64_t, uint64_t))(v600 + 8))(((unint64_t)v405 + v578) & v579, v580);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    goto LABEL_437;
                  }
LABEL_439:
                  (*(void (**)(char *, char *, uint64_t))(v601 + 40))(v398, v399, v594);
                  *v405 = *v406;
                  swift_bridgeObjectRelease();
                  v438 = ((unint64_t)v405 + v578) & v579;
                  v439 = ((unint64_t)v406 + v578) & v579;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v600 + 40))(v438, v439, v580);
                  v440 = (_QWORD *)((v552 + v438) & 0xFFFFFFFFFFFFFFF8);
                  v441 = (v552 + v439) & 0xFFFFFFFFFFFFF8;
                  v442 = *(_QWORD *)v441;
                  v441 += 15;
                  *v440 = v442;
                  swift_bridgeObjectRelease();
                  v443 = (_QWORD *)(((unint64_t)v440 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v443 = *(_QWORD *)(v441 & 0xFFFFFFFFFFFFFFF8);
                  v443[1] = *(_QWORD *)((v441 & 0xFFFFFFFFFFFFFFF8) + 8);
                  swift_bridgeObjectRelease();
                  goto LABEL_440;
                }
                v400 = v297;
                v414 = *(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v600 + 48);
                v415 = v414(((unint64_t)v405 + v578) & v579, v539, v580);
                v96 = v560;
                v301 = v555;
                v403 = v414((v578 + ((unint64_t)&v399[v581] & 0xFFFFFFFFFFFFFFF8)) & v579, v539, v580);
                v302 = __srcb;
                if (v415)
                {
LABEL_385:
                  v297 = v400;
                  v404 = v584;
                  if (!v403)
                  {
                    v405 = (uint64_t *)((unint64_t)&v398[v581] & 0xFFFFFFFFFFFFFFF8);
                    v406 = (uint64_t *)((unint64_t)&v399[v581] & 0xFFFFFFFFFFFFFFF8);
LABEL_436:
                    (*(void (**)(char *, char *, uint64_t))(v601 + 32))(v398, v399, v594);
                    *v405 = *v406;
                    v433 = ((unint64_t)v405 + v578) & v579;
                    v434 = ((unint64_t)v406 + v578) & v579;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v600 + 32))(v433, v434, v580);
                    v435 = (_QWORD *)((v552 + v433) & 0xFFFFFFFFFFFFF8);
                    v436 = (_QWORD *)((v552 + v434) & 0xFFFFFFFFFFFFF8);
                    *v435 = *v436;
                    *(_OWORD *)(((unint64_t)v435 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v436
                                                                                                 + 15) & 0xFFFFFFFFFFFFF8);
LABEL_440:
                    v437 = v562;
                    goto LABEL_441;
                  }
LABEL_437:
                  v437 = v562;
                  memcpy(v398, v399, v562);
LABEL_441:
                  v444 = (unint64_t)&v398[v437];
                  v445 = (_BYTE *)((unint64_t)&v399[v437] | 1);
                  v446 = (_BYTE *)((unint64_t)&v399[v437] | 2);
                  v447 = (uint64_t)&v399[v437 + 10];
                  v448 = (uint64_t)&v399[v437 + 34];
                  *(_BYTE *)v444 = v399[v437];
                  v449 = v444 + 34;
                  *(_BYTE *)(v444 | 1) = *v445;
                  *(_BYTE *)(v444 | 2) = *v446;
                  v450 = (v444 + 10) & 0xFFFFFFFFFFFFFFF8;
                  LOBYTE(v445) = *(_BYTE *)((v447 & 0xFFFFFFFFFFFFFFF8) + 16);
                  v451 = *(void **)v450;
                  v452 = *(void **)(v450 + 8);
                  *(_OWORD *)v450 = *(_OWORD *)(v447 & 0xFFFFFFFFFFFFFFF8);
                  v453 = *(_BYTE *)(v450 + 16);
                  *(_BYTE *)(v450 + 16) = (_BYTE)v445;
                  sub_23AAAEE10(v451, v452, v453);
                  v454 = v449 & 0xFFFFFFFFFFFFFFF8;
                  v455 = v448 & 0xFFFFFFFFFFFFFFF8;
                  v456 = *(_QWORD *)(v454 + 16);
                  if (4 * ((v456 >> 60) & 3)
                    && (((v456 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v456 >> 60) & 3))) != 0xF)
                  {
LABEL_447:
                    v459 = *(_OWORD *)v455;
                    v460 = *(_OWORD *)(v455 + 16);
                    v461 = *(_OWORD *)(v455 + 32);
                    *(_QWORD *)(v454 + 48) = *(_QWORD *)(v455 + 48);
                    *(_OWORD *)(v454 + 16) = v460;
                    *(_OWORD *)(v454 + 32) = v461;
                    *(_OWORD *)v454 = v459;
                    goto LABEL_454;
                  }
                  v457 = (uint64_t *)(v454 + 8);
                  v458 = *(_QWORD *)(v455 + 16) >> 60;
                  if (4 * (v458 & 3) && ((v458 >> 2) & 0xFFFFFFF3 | (4 * (v458 & 3))) != 0xF)
                  {
                    if (v456 >> 60 != 15)
                      sub_23AAAE53C(*v457, v456);
                    goto LABEL_447;
                  }
                  v462 = (_QWORD *)(v455 + 8);
                  *(_QWORD *)v454 = *(_QWORD *)v455;
                  if (v456 >> 60 != 15)
                  {
                    v463 = *(_QWORD *)(v455 + 16);
                    if (v463 >> 60 != 15)
                    {
                      v464 = *(_QWORD *)(v454 + 8);
                      *(_QWORD *)(v454 + 8) = *v462;
                      *(_QWORD *)(v454 + 16) = v463;
                      sub_23AAAE53C(v464, v456);
                      goto LABEL_453;
                    }
                    sub_23AB2D750(v454 + 8);
                  }
                  *(_OWORD *)v457 = *(_OWORD *)v462;
LABEL_453:
                  v465 = *(_OWORD *)(v455 + 24);
                  *(_BYTE *)(v454 + 40) = *(_BYTE *)(v455 + 40);
                  *(_OWORD *)(v454 + 24) = v465;
                  *(_QWORD *)(v454 + 48) = *(_QWORD *)(v455 + 48);
LABEL_454:
                  v466 = (void **)((v454 + 63) & 0xFFFFFFFFFFFFFFF8);
                  v467 = (void **)((v455 + 63) & 0xFFFFFFFFFFFFFFF8);
                  v468 = *v466;
                  *v466 = *v467;

                  *(_QWORD *)(((unint64_t)v466 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v467
                                                                                               + 15) & 0xFFFFFFFFFFFFF8);
                  v469 = (_BYTE *)(((unint64_t)v297 + v586) & v603);
                  v470 = (_BYTE *)(((unint64_t)v302 + v586) & v603);
                  v471 = v565(v469, 1, v404);
                  v472 = v565(v470, 1, v404);
                  v473 = v96;
                  if (v471)
                  {
                    if (!v472)
                    {
                      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v569 + 32))(v469, v470, v404);
                      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v569 + 56))(v469, 0, 1, v404);
                      goto LABEL_460;
                    }
                  }
                  else
                  {
                    if (!v472)
                    {
                      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v569 + 40))(v469, v470, v404);
LABEL_460:
                      v474 = (_QWORD *)((unint64_t)&v469[v570] & 0xFFFFFFFFFFFFF8);
                      v475 = (_QWORD *)((unint64_t)&v470[v570] & 0xFFFFFFFFFFFFFFF8);
                      *v474 = *v475;
                      v476 = ((unint64_t)v474 + 15) & 0xFFFFFFFFFFFFFFF8;
                      v477 = ((unint64_t)v475 + 15) & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v476 = *(_QWORD *)v477;
                      *(_BYTE *)(v476 + 8) = *(_BYTE *)(v477 + 8);
                      v478 = (void *)((v590 + v476) & v588);
                      v479 = (char *)((v590 + v477) & v588);
                      if (v564 == v473)
                      {
                        v480 = v469;
                        v481 = (_BYTE *)(((unint64_t)v302 + v586) & v603);
                        v482 = *(uint64_t (**)(void *, _QWORD, uint64_t))(v605 + 48);
                        v483 = v482(v478, v564, v593);
                        v484 = v479;
                        v485 = v482(v479, v564, v593);
                        v486 = v583;
                        if (v483)
                        {
LABEL_462:
                          v470 = v481;
                          v469 = v480;
                          if (v485)
                          {
LABEL_463:
                            v487 = v478;
                            v479 = v484;
                            v488 = v484;
LABEL_476:
                            v497 = v536 + 16;
                            memcpy(v487, v488, v563);
LABEL_484:
                            *((_BYTE *)v478 + v497) = v479[v497];
                            *(_BYTE *)(((unint64_t)v478 + v497) | 1) = *(_BYTE *)((unint64_t)&v479[v497] | 1);
                            *(_BYTE *)(((unint64_t)v478 + v497) | 2) = *(_BYTE *)((unint64_t)&v479[v497] | 2);
                            v510 = ((unint64_t)v478 + v497 + 10) & 0xFFFFFFFFFFFFFFF8;
                            v511 = (unint64_t)&v479[v497 + 10] & 0xFFFFFFFFFFFFFFF8;
                            v512 = *(_BYTE *)(v511 + 16);
                            v513 = *(void **)v510;
                            v514 = *(void **)(v510 + 8);
                            *(_OWORD *)v510 = *(_OWORD *)v511;
                            v515 = *(_BYTE *)(v510 + 16);
                            *(_BYTE *)(v510 + 16) = v512;
                            sub_23AAAEE10(v513, v514, v515);
                            v516 = ((unint64_t)v478 + v497 + 34) & 0xFFFFFFFFFFFFFFF8;
                            v517 = (unint64_t)&v479[v497 + 34] & 0xFFFFFFFFFFFFFFF8;
                            v518 = *(_QWORD *)(v516 + 16);
                            if (4 * ((v518 >> 60) & 3)
                              && (((v518 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((v518 >> 60) & 3))) != 0xF)
                            {
LABEL_490:
                              v521 = *(_OWORD *)v517;
                              v522 = *(_OWORD *)(v517 + 16);
                              v523 = *(_OWORD *)(v517 + 32);
                              *(_QWORD *)(v516 + 48) = *(_QWORD *)(v517 + 48);
                              *(_OWORD *)(v516 + 16) = v522;
                              *(_OWORD *)(v516 + 32) = v523;
                              *(_OWORD *)v516 = v521;
LABEL_497:
                              v528 = (void **)((v516 + 63) & 0xFFFFFFFFFFFFFFF8);
                              v529 = (void **)((v517 + 63) & 0xFFFFFFFFFFFFFFF8);
                              v530 = *v528;
                              *v528 = *v529;

                              *(_QWORD *)(((unint64_t)v528 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v529 + 15) & 0xFFFFFFFFFFFFF8);
                              v469[v573] = v470[v573];
                              v531 = (unint64_t)&v469[v573] & 0xFFFFFFFFFFFFFFF8;
                              v532 = (unint64_t)&v470[v573] & 0xFFFFFFFFFFFFFFF8;
                              *(_QWORD *)(v531 + 8) = *(_QWORD *)(v532 + 8);
                              swift_bridgeObjectRelease();
                              v388 = (_QWORD *)((v531 + 23) & 0xFFFFFFFFFFFFFFF8);
                              v389 = (_QWORD *)((v532 + 23) & 0xFFFFFFFFFFFFFFF8);
                              *v388 = *v389;
                              v388[1] = v389[1];
                              goto LABEL_498;
                            }
                            v519 = (uint64_t *)(v516 + 8);
                            v520 = *(_QWORD *)(v517 + 16) >> 60;
                            if (4 * (v520 & 3) && ((v520 >> 2) & 0xFFFFFFF3 | (4 * (v520 & 3))) != 0xF)
                            {
                              if (v518 >> 60 != 15)
                                sub_23AAAE53C(*v519, v518);
                              goto LABEL_490;
                            }
                            v524 = (_QWORD *)(v517 + 8);
                            *(_QWORD *)v516 = *(_QWORD *)v517;
                            if (v518 >> 60 != 15)
                            {
                              v525 = *(_QWORD *)(v517 + 16);
                              if (v525 >> 60 != 15)
                              {
                                v526 = *(_QWORD *)(v516 + 8);
                                *(_QWORD *)(v516 + 8) = *v524;
                                *(_QWORD *)(v516 + 16) = v525;
                                sub_23AAAE53C(v526, v518);
                                goto LABEL_496;
                              }
                              sub_23AB2D750(v516 + 8);
                            }
                            *(_OWORD *)v519 = *(_OWORD *)v524;
LABEL_496:
                            v527 = *(_OWORD *)(v517 + 24);
                            *(_BYTE *)(v516 + 40) = *(_BYTE *)(v517 + 40);
                            *(_OWORD *)(v516 + 24) = v527;
                            *(_QWORD *)(v516 + 48) = *(_QWORD *)(v517 + 48);
                            goto LABEL_497;
                          }
                          v489 = (uint64_t *)(((unint64_t)v478 + v486) & 0xFFFFFFFFFFFFFFF8);
                          v498 = (unint64_t)&v484[v486];
                          v479 = v484;
                          v492 = (uint64_t *)(v498 & 0xFFFFFFFFFFFFFFF8);
                          goto LABEL_480;
                        }
                      }
                      else
                      {
                        v489 = (uint64_t *)(((unint64_t)v478 + v583) & 0xFFFFFFFFFFFFFFF8);
                        if (v553 <= 0x7FFFFFFE)
                        {
                          v490 = *v489;
                          if ((unint64_t)*v489 >= 0xFFFFFFFF)
                            LODWORD(v490) = -1;
                          v491 = v490 + 1;
                          v492 = (uint64_t *)((unint64_t)&v479[v583] & 0xFFFFFFFFFFFFFFF8);
                          v493 = *v492;
                          if ((unint64_t)*v492 >= 0xFFFFFFFF)
                            LODWORD(v493) = -1;
                          v494 = v493 + 1;
                          if (v491 >= 2)
                          {
                            v484 = (char *)((v590 + v477) & v588);
                            if (v494 >= 2)
                              goto LABEL_463;
LABEL_480:
                            (*(void (**)(void *, char *, uint64_t))(v605 + 32))(v478, v479, v593);
                            *v489 = *v492;
                            v499 = ((unint64_t)v489 + v575) & v576;
                            v500 = ((unint64_t)v492 + v575) & v576;
                            (*(void (**)(unint64_t, unint64_t, uint64_t))(v599 + 32))(v499, v500, v577);
                            v501 = (_QWORD *)((v561 + v499) & 0xFFFFFFFFFFFFF8);
                            v502 = (_QWORD *)((v561 + v500) & 0xFFFFFFFFFFFFF8);
                            *v501 = *v502;
                            *(_OWORD *)(((unint64_t)v501 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v502 + 15) & 0xFFFFFFFFFFFFF8);
LABEL_483:
                            v497 = v536 + 16;
                            goto LABEL_484;
                          }
                          if (v494 >= 2)
                          {
LABEL_475:
                            (*(void (**)(void *, uint64_t))(v605 + 8))(v478, v593);
                            swift_bridgeObjectRelease();
                            (*(void (**)(unint64_t, uint64_t))(v599 + 8))(((unint64_t)v489 + v575) & v576, v577);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            v487 = v478;
                            v488 = v479;
                            goto LABEL_476;
                          }
LABEL_482:
                          (*(void (**)(void *, char *, uint64_t))(v605 + 40))(v478, v479, v593);
                          *v489 = *v492;
                          swift_bridgeObjectRelease();
                          v504 = ((unint64_t)v489 + v575) & v576;
                          v505 = ((unint64_t)v492 + v575) & v576;
                          (*(void (**)(unint64_t, unint64_t, uint64_t))(v599 + 40))(v504, v505, v577);
                          v506 = (_QWORD *)((v561 + v504) & 0xFFFFFFFFFFFFFFF8);
                          v507 = (v561 + v505) & 0xFFFFFFFFFFFFF8;
                          v508 = *(_QWORD *)v507;
                          v507 += 15;
                          *v506 = v508;
                          swift_bridgeObjectRelease();
                          v509 = (_QWORD *)(((unint64_t)v506 + 15) & 0xFFFFFFFFFFFFFFF8);
                          *v509 = *(_QWORD *)(v507 & 0xFFFFFFFFFFFFFFF8);
                          v509[1] = *(_QWORD *)((v507 & 0xFFFFFFFFFFFFFFF8) + 8);
                          swift_bridgeObjectRelease();
                          goto LABEL_483;
                        }
                        v480 = v469;
                        v481 = v470;
                        v495 = *(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v599 + 48);
                        v604 = v495(((unint64_t)v489 + v575) & v576, v538, v577);
                        v484 = v479;
                        v496 = v575 + ((unint64_t)&v479[v583] & 0xFFFFFFFFFFFFFFF8);
                        v301 = v555;
                        v486 = v583;
                        v485 = v495(v496 & v576, v538, v577);
                        if (v604)
                          goto LABEL_462;
                      }
                      v489 = (uint64_t *)(((unint64_t)v478 + v486) & 0xFFFFFFFFFFFFFFF8);
                      if (v485)
                      {
                        v470 = v481;
                        v469 = v480;
                        v479 = v484;
                        goto LABEL_475;
                      }
                      v503 = (unint64_t)&v484[v486];
                      v479 = v484;
                      v492 = (uint64_t *)(v503 & 0xFFFFFFFFFFFFFFF8);
                      v470 = v481;
                      v469 = v480;
                      goto LABEL_482;
                    }
                    (*(void (**)(_BYTE *, uint64_t))(v569 + 8))(v469, v404);
                  }
                  memcpy(v469, v470, v567);
                  goto LABEL_460;
                }
              }
              v405 = (uint64_t *)((unint64_t)&v398[v581] & 0xFFFFFFFFFFFFFFF8);
              v404 = v584;
              if (v403)
              {
                v297 = v400;
                goto LABEL_403;
              }
              v406 = (uint64_t *)((unint64_t)&v399[v581] & 0xFFFFFFFFFFFFFFF8);
              v297 = v400;
              goto LABEL_439;
            }
            (*(void (**)(void *, uint64_t))(v550 + 8))(v297, v296);
          }
          memcpy(v297, v302, __n);
          goto LABEL_383;
        }
        v316 = (v598 + (((((unint64_t)__srcb + v574) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v596;
        if (v286 == v288)
        {
          v301 = v555;
          v302 = __srcb;
          if (v592 == v591)
          {
            v317 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v601 + 48))(v316, v592, v594);
            goto LABEL_372;
          }
          v322 = (unint64_t *)((v581 + v316) & 0xFFFFFFFFFFFFFFF8);
          if (v551 > 0x7FFFFFFE)
          {
            v317 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v600 + 48))(((unint64_t)v322 + v578) & v579, v539, v580);
            goto LABEL_372;
          }
LABEL_326:
          v331 = *v322;
          if (v331 >= 0xFFFFFFFF)
            v317 = -1;
          else
            v317 = v331;
          if (v317 + 1 < 2)
            goto LABEL_373;
          goto LABEL_372;
        }
        v320 = *(_QWORD *)((((v537 + v316 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
        if (v320 >= 0xFFFFFFFF)
          LODWORD(v320) = -1;
        v301 = v555;
        v302 = __srcb;
        if ((v320 + 1) < 2)
          goto LABEL_373;
        goto LABEL_376;
      }
    }
LABEL_262:
    if (v305 >= 2)
      goto LABEL_266;
    goto LABEL_263;
  }
  v308 = *(_QWORD *)((((v537 + v304 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
  if (v308 >= 0xFFFFFFFF)
    LODWORD(v308) = -1;
  v296 = v566;
  if ((v308 + 1) < 2)
    goto LABEL_263;
LABEL_266:
  if (v285 != v288)
  {
    v318 = (v598 + (((((unint64_t)__srcb + v574) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v596;
    v301 = v555;
    if (v286 != v288)
    {
      v321 = *(_QWORD *)((((v537 + v318 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
      if (v321 >= 0xFFFFFFFF)
        LODWORD(v321) = -1;
      v302 = __srcb;
      if ((v321 + 1) >= 2)
        goto LABEL_500;
      goto LABEL_340;
    }
    if (v592 == v591)
    {
      v319 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v601 + 48))(v318, v592, v594);
    }
    else
    {
      v323 = (unint64_t *)((v581 + v318) & 0xFFFFFFFFFFFFFFF8);
      if (v551 <= 0x7FFFFFFE)
      {
        v324 = *v323;
        if (v324 >= 0xFFFFFFFF)
          v319 = -1;
        else
          v319 = v324;
        v302 = __srcb;
        if (v319 + 1 < 2)
          goto LABEL_340;
        goto LABEL_339;
      }
      v319 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v600 + 48))(((unint64_t)v323 + v578) & v579, v539, v580);
    }
    v302 = __srcb;
LABEL_339:
    if (v319 < 2)
      goto LABEL_340;
    goto LABEL_500;
  }
  v301 = v555;
  v302 = __srcb;
  if (v284 < 2)
    goto LABEL_340;
  v315 = v571(__srcb, v284, v296);
LABEL_304:
  if (v315 >= 2)
    goto LABEL_500;
LABEL_340:
  if (v571(v302, 1, v296))
  {
    memcpy(v297, v302, __n);
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v550 + 32))(v297, v302, v296);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v550 + 56))(v297, 0, 1, v296);
  }
  v334 = (_QWORD *)(((unint64_t)v297 + v574) & 0xFFFFFFFFFFFFF8);
  v335 = (_QWORD *)(((unint64_t)v302 + v574) & 0xFFFFFFFFFFFFFFF8);
  *v334 = *v335;
  v336 = ((unint64_t)v334 + 15) & 0xFFFFFFFFFFFFFFF8;
  v337 = ((unint64_t)v335 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v336 = *(_QWORD *)v337;
  *(_BYTE *)(v336 + 8) = *(_BYTE *)(v337 + 8);
  v338 = (void *)((v598 + v336) & v596);
  v339 = (const void *)((v598 + v337) & v596);
  if (v592 == v591)
  {
    v340 = v584;
    if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v601 + 48))((v598 + v337) & v596, v592, v594))goto LABEL_353;
LABEL_352:
    v343 = v562;
    memcpy(v338, v339, v562);
    goto LABEL_355;
  }
  v341 = (uint64_t *)(((unint64_t)v339 + v581) & 0xFFFFFFFFFFFFFFF8);
  v340 = v584;
  if (v551 <= 0x7FFFFFFE)
  {
    v342 = *v341;
    if ((unint64_t)*v341 >= 0xFFFFFFFF)
      LODWORD(v342) = -1;
    if ((v342 + 1) < 2)
      goto LABEL_354;
    goto LABEL_352;
  }
  if ((*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v600 + 48))(((unint64_t)v341 + v578) & v579, v539, v580))
  {
    goto LABEL_352;
  }
LABEL_353:
  v341 = (uint64_t *)(((unint64_t)v339 + v581) & 0xFFFFFFFFFFFFFFF8);
LABEL_354:
  (*(void (**)(void *, const void *, uint64_t))(v601 + 32))(v338, v339, v594);
  v344 = (_QWORD *)(((unint64_t)v338 + v581) & 0xFFFFFFFFFFFFFFF8);
  *v344 = *v341;
  v345 = ((unint64_t)v344 + v578) & v579;
  v346 = ((unint64_t)v341 + v578) & v579;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v600 + 32))(v345, v346, v580);
  v347 = (_QWORD *)((v552 + v345) & 0xFFFFFFFFFFFFF8);
  v348 = (_QWORD *)((v552 + v346) & 0xFFFFFFFFFFFFF8);
  *v347 = *v348;
  *(_OWORD *)(((unint64_t)v347 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v348 + 15) & 0xFFFFFFFFFFFFF8);
  v343 = v562;
LABEL_355:
  v349 = (uint64_t)v339 + v343 + 10;
  *((_BYTE *)v338 + v343) = *((_BYTE *)v339 + v343);
  *(_BYTE *)(((unint64_t)v338 + v343) | 1) = *(_BYTE *)(((unint64_t)v339 + v343) | 1);
  *(_BYTE *)(((unint64_t)v338 + v343) | 2) = *(_BYTE *)(((unint64_t)v339 + v343) | 2);
  v350 = ((unint64_t)v338 + v343 + 10) & 0xFFFFFFFFFFFFFFF8;
  v351 = *(_OWORD *)(v349 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v350 + 16) = *(_BYTE *)((v349 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_OWORD *)v350 = v351;
  v352 = ((unint64_t)v338 + v343 + 34) & 0xFFFFFFFFFFFFFFF8;
  v353 = ((unint64_t)v339 + v343 + 34) & 0xFFFFFFFFFFFFFFF8;
  v354 = *(_OWORD *)v353;
  v355 = *(_OWORD *)(v353 + 16);
  v356 = *(_OWORD *)(v353 + 32);
  *(_QWORD *)(v352 + 48) = *(_QWORD *)(v353 + 48);
  *(_OWORD *)(v352 + 16) = v355;
  *(_OWORD *)(v352 + 32) = v356;
  *(_OWORD *)v352 = v354;
  v357 = (_QWORD *)((v352 + 63) & 0xFFFFFFFFFFFFF8);
  v358 = (_QWORD *)((v353 + 63) & 0xFFFFFFFFFFFFF8);
  *v357 = *v358;
  *(_QWORD *)(((unint64_t)v357 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v358 + 15) & 0xFFFFFFFFFFFFF8);
  v359 = (void *)(((unint64_t)v297 + v586) & v603);
  v360 = (void *)(((unint64_t)v302 + v586) & v603);
  if (v565(v360, 1, v340))
  {
    memcpy(v359, v360, v567);
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v569 + 32))(v359, v360, v340);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v569 + 56))(v359, 0, 1, v340);
  }
  v361 = (_QWORD *)(((unint64_t)v359 + v570) & 0xFFFFFFFFFFFFF8);
  v362 = (_QWORD *)(((unint64_t)v360 + v570) & 0xFFFFFFFFFFFFFFF8);
  *v361 = *v362;
  v363 = ((unint64_t)v361 + 15) & 0xFFFFFFFFFFFFFFF8;
  v364 = ((unint64_t)v362 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v363 = *(_QWORD *)v364;
  *(_BYTE *)(v363 + 8) = *(_BYTE *)(v364 + 8);
  v365 = (void *)((v590 + v363) & v588);
  v366 = (const void *)((v590 + v364) & v588);
  if (v564 == v96)
  {
    v367 = v583;
    if (!(*(unsigned int (**)(unint64_t))(v605 + 48))((v590 + v364) & v588))
      goto LABEL_368;
  }
  else
  {
    v367 = v583;
    v368 = (_QWORD *)(((unint64_t)v366 + v583) & 0xFFFFFFFFFFFFFFF8);
    if (v553 > 0x7FFFFFFE)
    {
      if (!(*(unsigned int (**)(unint64_t, _QWORD, uint64_t))(v599 + 48))(((unint64_t)v368 + v575) & v576, v538, v577))
      {
LABEL_368:
        v368 = (_QWORD *)(((unint64_t)v366 + v367) & 0xFFFFFFFFFFFFFFF8);
LABEL_369:
        (*(void (**)(void *, const void *, uint64_t))(v605 + 32))(v365, v366, v593);
        v371 = (_QWORD *)(((unint64_t)v365 + v367) & 0xFFFFFFFFFFFFFFF8);
        *v371 = *v368;
        v372 = ((unint64_t)v371 + v575) & v576;
        v373 = ((unint64_t)v368 + v575) & v576;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v599 + 32))(v372, v373, v577);
        v374 = (_QWORD *)((v561 + v372) & 0xFFFFFFFFFFFFF8);
        v375 = (_QWORD *)((v561 + v373) & 0xFFFFFFFFFFFFF8);
        *v374 = *v375;
        *(_OWORD *)(((unint64_t)v374 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v375 + 15) & 0xFFFFFFFFFFFFF8);
        v370 = v536 + 16;
        goto LABEL_370;
      }
    }
    else
    {
      v369 = *v368;
      if (*v368 >= 0xFFFFFFFFuLL)
        LODWORD(v369) = -1;
      if ((v369 + 1) < 2)
        goto LABEL_369;
    }
  }
  v370 = v536 + 16;
  memcpy(v365, v366, v563);
LABEL_370:
  v376 = (uint64_t)v366 + v370 + 10;
  *((_BYTE *)v365 + v370) = *((_BYTE *)v366 + v370);
  *(_BYTE *)(((unint64_t)v365 + v370) | 1) = *(_BYTE *)(((unint64_t)v366 + v370) | 1);
  *(_BYTE *)(((unint64_t)v365 + v370) | 2) = *(_BYTE *)(((unint64_t)v366 + v370) | 2);
  v377 = ((unint64_t)v365 + v370 + 10) & 0xFFFFFFFFFFFFFFF8;
  v378 = *(_OWORD *)(v376 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v377 + 16) = *(_BYTE *)((v376 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_OWORD *)v377 = v378;
  v379 = ((unint64_t)v365 + v370 + 34) & 0xFFFFFFFFFFFFFFF8;
  v380 = ((unint64_t)v366 + v370 + 34) & 0xFFFFFFFFFFFFFFF8;
  v381 = *(_OWORD *)v380;
  v382 = *(_OWORD *)(v380 + 16);
  v383 = *(_OWORD *)(v380 + 32);
  *(_QWORD *)(v379 + 48) = *(_QWORD *)(v380 + 48);
  *(_OWORD *)(v379 + 16) = v382;
  *(_OWORD *)(v379 + 32) = v383;
  *(_OWORD *)v379 = v381;
  v384 = (_QWORD *)((v379 + 63) & 0xFFFFFFFFFFFFF8);
  v385 = (_QWORD *)((v380 + 63) & 0xFFFFFFFFFFFFF8);
  *v384 = *v385;
  *(_QWORD *)(((unint64_t)v384 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v385 + 15) & 0xFFFFFFFFFFFFF8);
  *((_BYTE *)v359 + v573) = *((_BYTE *)v360 + v573);
  v386 = ((unint64_t)v359 + v573) & 0xFFFFFFFFFFFFFFF8;
  v387 = ((unint64_t)v360 + v573) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v386 + 8) = *(_QWORD *)(v387 + 8);
  v388 = (_QWORD *)((v386 + 23) & 0xFFFFFFFFFFFFFFF8);
  v389 = (_QWORD *)((v387 + 23) & 0xFFFFFFFFFFFFFFF8);
  *(_OWORD *)v388 = *(_OWORD *)v389;
LABEL_498:
  v533 = ((unint64_t)v388 + 23) & 0xFFFFFFFFFFFFFFF8;
  v534 = ((unint64_t)v389 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v533 = *(_QWORD *)v534;
  *(_BYTE *)(v533 + 8) = *(_BYTE *)(v534 + 8);
  *(_QWORD *)(((unint64_t)v388 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v389 + 39) & 0xFFFFFFFFFFFFF8);
  return v301;
}

uint64_t sub_23AB3266C(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;

  v67 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v2 = *(_DWORD *)(v67 + 84);
  if (v2)
    v3 = v2 - 1;
  else
    v3 = 0;
  v64 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = *(_DWORD *)(v64 + 84);
  v63 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v63 + 84);
  if (v4 > v5)
    v5 = v4;
  v56 = v5;
  if (v5 <= 0x7FFFFFFE)
    v5 = 2147483646;
  v57 = v5;
  v6 = v5 - 1;
  v60 = v3;
  v59 = v6;
  if (v3 > v6)
    v6 = v3;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  v62 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(_DWORD *)(v62 + 84);
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v55 = v11;
  if (v11 <= *(_DWORD *)(v12 + 84))
    v13 = *(_DWORD *)(v12 + 84);
  else
    v13 = v11;
  v14 = v8;
  if (v13 <= 0x7FFFFFFE)
    v15 = 2147483646;
  else
    v15 = v13;
  v58 = v10;
  if (v10 <= v15 - 1)
    v16 = v15 - 1;
  else
    v16 = v10;
  if (v16 <= 0x7FFFFFFE)
    v17 = 2147483646;
  else
    v17 = v16;
  v61 = v7;
  if (v17 <= v7)
    v18 = v7;
  else
    v18 = v17;
  if (v18 <= 0x7FFFFFFF)
    v19 = 0x7FFFFFFF;
  else
    v19 = v18;
  if (v19 - 1 < v19)
    v20 = v19;
  else
    v20 = v19 - 1;
  if (v2)
    v21 = *(_QWORD *)(v67 + 64);
  else
    v21 = *(_QWORD *)(v67 + 64) + 1;
  v65 = v14;
  v22 = *(_QWORD *)(v14 + 64);
  if (!v9)
    ++v22;
  if (!a2)
    return 0;
  v23 = *(unsigned __int8 *)(v63 + 80);
  v24 = *(_DWORD *)(v64 + 80) & 0xF8 | v23;
  v25 = v24 | 7u;
  v26 = *(unsigned __int8 *)(v12 + 80);
  v27 = *(_DWORD *)(v62 + 80) & 0xF8 | v26 | 7;
  v28 = v27 | *(_DWORD *)(v65 + 80) & 0xF8;
  v29 = v24 | *(_DWORD *)(v67 + 80) & 0xF8 | v28;
  v53 = *(_QWORD *)(v64 + 64) + 7;
  v54 = (((*(_QWORD *)(v63 + 64) + ((v23 + 8 + (v53 & 0xFFFFFFFFFFFFFFF8)) & ~v23) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v30 = ((((((((v25 + 9 + ((((v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v25) + v54 + 50) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v52 = *(_QWORD *)(v62 + 64) + 7;
  v31 = (((*(_QWORD *)(v12 + 64) + ((v26 + 8 + (v52 & 0xFFFFFFFFFFFFFFF8)) & ~v26) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v32 = ((((((((v27 + 9 + ((((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v27) + v31 + 50) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (a2 <= v20)
    goto LABEL_61;
  v33 = (((v32 + ((v30 + v28) & ~v28) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  v34 = ((v29
        + 9
        + ((((v33 + ((((v29 + 9) | v29) + v33 + 8) & ~v29) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v29)
      + v33
      + 8;
  v35 = 8 * v34;
  if (v34 > 3)
    goto LABEL_45;
  v37 = ((a2 - v20 + ~(-1 << v35)) >> v35) + 1;
  if (HIWORD(v37))
  {
    v36 = *(_DWORD *)(a1 + v34);
    if (v36)
      goto LABEL_52;
  }
  else
  {
    if (v37 <= 0xFF)
    {
      if (v37 < 2)
        goto LABEL_61;
LABEL_45:
      v36 = *(unsigned __int8 *)(a1 + v34);
      if (!*(_BYTE *)(a1 + v34))
        goto LABEL_61;
LABEL_52:
      v38 = (v36 - 1) << v35;
      if (v34 > 3)
        v38 = 0;
      if ((_DWORD)v34)
      {
        if (v34 <= 3)
          v39 = v34;
        else
          v39 = 4;
        __asm { BR              X11 }
      }
      return v20 + v38 + 1;
    }
    v36 = *(unsigned __int16 *)(a1 + v34);
    if (*(_WORD *)(a1 + v34))
      goto LABEL_52;
  }
LABEL_61:
  v40 = (a1 + v29 + 9) & ~v29;
  if (v61 == v19)
  {
    if (v60 == v61)
    {
      if (v2 >= 2)
      {
        v41 = (*(uint64_t (**)(uint64_t))(v67 + 48))(v40);
        goto LABEL_97;
      }
      return 0;
    }
    v43 = (v25 + 9 + ((((v21 + 7 + v40) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v25;
    if (v59 == v61)
    {
      if (v4 == v57)
      {
        v41 = (*(uint64_t (**)(unint64_t))(v64 + 48))(v43);
        goto LABEL_97;
      }
      v48 = (unint64_t *)((v53 + v43) & 0xFFFFFFFFFFFFFFF8);
      if (v56 <= 0x7FFFFFFE)
      {
        v49 = *v48;
LABEL_90:
        if (v49 >= 0xFFFFFFFF)
          LODWORD(v49) = -1;
        if ((v49 + 1) >= 2)
          v41 = v49;
        else
          v41 = 0;
        goto LABEL_97;
      }
      v41 = (*(uint64_t (**)(unint64_t))(v63 + 48))(((unint64_t)v48 + v23 + 8) & ~v23);
      goto LABEL_97;
    }
    v46 = v54 + v43;
LABEL_83:
    v50 = *(_QWORD *)((((v46 + 26) & 0xFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFF8);
    if (v50 >= 0xFFFFFFFF)
      LODWORD(v50) = -1;
    if ((v50 + 1) >= 2)
      return v50;
    else
      return 0;
  }
  v42 = (v40 + v28 + v30) & ~v28;
  if (v17 == v19)
  {
    if (v58 == v17)
    {
      if (v9 < 2)
        return 0;
      v41 = (*(uint64_t (**)(unint64_t))(v65 + 48))(v42);
      goto LABEL_97;
    }
    v45 = (v27 + 9 + ((((v22 + 7 + v42) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v27;
    if (v15 - 1 == v17)
    {
      if (v55 == v15)
      {
        v41 = (*(uint64_t (**)(unint64_t))(v62 + 48))(v45);
      }
      else
      {
        v51 = (unint64_t *)((v52 + v45) & 0xFFFFFFFFFFFFFFF8);
        if (v13 <= 0x7FFFFFFE)
        {
          v49 = *v51;
          goto LABEL_90;
        }
        v41 = (*(uint64_t (**)(unint64_t))(v12 + 48))(((unint64_t)v51 + v26 + 8) & ~v26);
      }
LABEL_97:
      if (v41 >= 2)
        return v41 - 1;
      else
        return 0;
    }
    v46 = v31 + v45;
    goto LABEL_83;
  }
  v44 = *(_QWORD *)(((v42 + v32) & 0xFFFFFFFFFFFFF8) + 8);
  if (v44 >= 0xFFFFFFFF)
    LODWORD(v44) = -1;
  return (v44 + 1);
}

void sub_23AB32DBC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  size_t v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v42;

  v39 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_DWORD *)(v39 + 84);
  if (v3)
    v4 = v3 - 1;
  else
    v4 = 0;
  v38 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v38 + 84);
  v37 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = *(_DWORD *)(v37 + 84);
  if (v5 > v6)
    v6 = v5;
  if (v6 <= 0x7FFFFFFE)
    v6 = 2147483646;
  v7 = v6 - 1;
  if (v4 > v7)
    v7 = v4;
  if (v7 <= 0x7FFFFFFE)
    v8 = 2147483646;
  else
    v8 = v7;
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v13 = *(_DWORD *)(v12 + 84);
  v42 = 0;
  v14 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (v13 <= *(_DWORD *)(v14 + 84))
    v15 = *(_DWORD *)(v14 + 84);
  else
    v15 = v13;
  if (v15 <= 0x7FFFFFFE)
    v16 = 2147483646;
  else
    v16 = v15;
  if (v11 <= v16 - 1)
    v17 = v16 - 1;
  else
    v17 = v11;
  if (v17 <= 0x7FFFFFFE)
    v18 = 2147483646;
  else
    v18 = v17;
  if (v18 <= v8)
    v19 = v8;
  else
    v19 = v18;
  if (v19 <= 0x7FFFFFFF)
    v20 = 0x7FFFFFFF;
  else
    v20 = v19;
  if (v20 - 1 < v20)
    v21 = v20;
  else
    v21 = v20 - 1;
  v22 = *(_QWORD *)(v39 + 64);
  if (!v3)
    ++v22;
  v23 = *(unsigned __int8 *)(v37 + 80);
  v24 = *(_DWORD *)(v38 + 80) & 0xF8 | v23;
  v25 = *(unsigned __int8 *)(v14 + 80);
  v26 = *(_DWORD *)(v12 + 80) & 0xF8 | v25 | 7;
  v27 = v26 | *(_DWORD *)(v9 + 80) & 0xF8;
  v29 = (((v24 | 7u) + 9 + ((((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)(v24 | 7u))
      + ((((*(_QWORD *)(v37 + 64) + ((v23 + 8 + ((*(_QWORD *)(v38 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v23) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16
      + 34;
  v30 = *(_QWORD *)(v9 + 64);
  if (!v10)
    ++v30;
  v31 = (((((((((((v26 + 9 + ((((v30 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v26)
               + ((((*(_QWORD *)(v14 + 64)
                   + ((v25 + 8 + ((*(_QWORD *)(v12 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v25)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 16
               + 34) & 0xFFFFFFFFFFFFFFF8)
             + 63) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 8
         + (((((((v29 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + v27) & ~v27)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 39) & 0xFFFFFFFFFFFFFFF8;
  v28 = v24 | *(_DWORD *)(v39 + 80) & 0xF8 | v27;
  v32 = ((v28
        + 9
        + ((((v31 + ((((v28 + 9) | v28) + v31 + 8) & ~v28) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v28)
      + v31
      + 8;
  if (a3 > v21)
  {
    if (v32 <= 3)
    {
      v34 = ((a3 - v21 + ~(-1 << (8 * v32))) >> (8 * v32)) + 1;
      if (HIWORD(v34))
      {
        v33 = 4;
      }
      else if (v34 >= 0x100)
      {
        v33 = 2;
      }
      else
      {
        v33 = v34 > 1;
      }
    }
    else
    {
      v33 = 1;
    }
    v42 = v33;
  }
  if (v21 < a2)
  {
    v35 = ~v21 + a2;
    if (v32 < 4)
    {
      if ((_DWORD)v32)
      {
        v36 = v35 & ~(-1 << (8 * v32));
        bzero(a1, v32);
        if ((_DWORD)v32 == 3)
        {
          *(_WORD *)a1 = v36;
          a1[2] = BYTE2(v36);
        }
        else if ((_DWORD)v32 == 2)
        {
          *(_WORD *)a1 = v36;
        }
        else
        {
          *a1 = v36;
        }
      }
    }
    else
    {
      bzero(a1, v32);
      *(_DWORD *)a1 = v35;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X23 }
}

void sub_23AB333FC()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + v2) = v0;
}

void sub_23AB33404()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(v1 + v2) = v0;
}

uint64_t sub_23AB33654(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_23AB3366C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void type metadata accessor for ReconciliationTable.PersistAction()
{
  JUMPOUT(0x23B861318);
}

void sub_23AB33694(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23AB2362C(a1, a2);
}

uint64_t sub_23AB3374C()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_23B1C5F54();
  swift_release();
  swift_release();
  return v1;
}

char *sub_23AB337BC(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, char *a6, int a7)
{
  _BYTE *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  id v29;
  objc_class *v30;
  char *v31;
  char *v32;
  id v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  objc_super v60;
  uint64_t v61;
  uint64_t v62;

  v49 = a7;
  v46 = a6;
  v47 = a4;
  v48 = a5;
  LODWORD(v59) = a2;
  v45 = a1;
  v9 = sub_23B1C6B30();
  v54 = *(_QWORD *)(v9 - 8);
  v55 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v53 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E4380);
  v51 = *(_QWORD *)(v11 - 8);
  v52 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v50 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E02C8);
  v57 = *(_QWORD *)(v13 - 8);
  v58 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v56 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23B1C5E4C();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  v19 = OBJC_IVAR____TtC9libfssync14FPFSEnumerator_fpItemID;
  *(_QWORD *)&v7[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_fpItemID] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_extensionEnumerator] = 0;
  v20 = &v7[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_keepAlive];
  *v20 = 0;
  v20[1] = 0;
  v7[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_invalidated] = 0;
  v21 = OBJC_IVAR____TtC9libfssync14FPFSEnumerator_buildAndFilterAppLibraries;
  v7[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_buildAndFilterAppLibraries] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_cancellable] = 0;
  v22 = OBJC_IVAR____TtC9libfssync14FPFSEnumerator_changedItemsByID;
  v23 = v7;
  *(_QWORD *)&v7[v22] = sub_23AAB786C(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)&v23[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_deletedItemsIDs] = MEMORY[0x24BEE4B08];
  v24 = &v23[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID];
  *(_QWORD *)v24 = v45;
  v24[8] = (char)v59;
  v25 = *(void **)&v7[v19];
  v44 = a3;
  *(_QWORD *)&v7[v19] = a3;
  v26 = v46;
  v59 = a3;

  v27 = v48;
  *(_QWORD *)&v23[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_lifetimeExtender] = v47;
  *(_QWORD *)&v23[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_observer] = v27;
  swift_unknownObjectWeakAssign();
  v7[v21] = v49;
  v28 = *(void **)&v26[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log];
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v29 = v28;
  sub_23B1C5E58();
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v23[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_logger], v18, v15);
  *(_QWORD *)&v23[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_previousAnchor] = 0;
  swift_beginAccess();
  v61 = 0;
  sub_23B1C5F30();
  swift_endAccess();

  v30 = (objc_class *)type metadata accessor for FPFSEnumerator();
  v60.receiver = v23;
  v60.super_class = v30;
  v31 = (char *)objc_msgSendSuper2(&v60, sel_init);
  v32 = v31;
  if (v44)
  {
    v33 = v59;
    v34 = v32;
    sub_23AA71984((uint64_t)v33);

  }
  else
  {
    v35 = v31;
  }
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4398);
  v36 = v50;
  sub_23B1C5F3C();
  swift_endAccess();
  v37 = v53;
  sub_23B1C6B18();
  v62 = *(_QWORD *)&v26[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue];
  sub_23AA9F52C(0, (unint64_t *)&qword_2542E5500);
  sub_23AAB5A28(&qword_2542E4378, &qword_2542E4380, MEMORY[0x24BDB9EE8]);
  sub_23AAB635C();
  v38 = v56;
  v39 = v52;
  sub_23B1C5F9C();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v37, v55);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v36, v39);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_23AAB5A28((unint64_t *)&unk_2542E02B8, &qword_2542E02C8, MEMORY[0x24BDB9988]);
  v40 = v58;
  v41 = sub_23B1C5FA8();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v38, v40);
  *(_QWORD *)&v32[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_cancellable] = v41;
  swift_release();
  return v32;
}

uint64_t sub_23AB33CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  void *v5;

  v2 = a2 + 16;
  swift_beginAccess();
  result = MEMORY[0x23B8615C4](v2);
  if (result)
  {
    v4 = (void *)result;
    v5 = *(void **)(result + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_observer);
    swift_unknownObjectRetain();

    objc_msgSend(v5, sel_enumerationResultsDidChange);
    return swift_unknownObjectRelease();
  }
  return result;
}

id sub_23AB33D24()
{
  void *v0;
  objc_super v2;

  sub_23AA6AFC4();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FPFSEnumerator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_23AB33D5C()
{
  return type metadata accessor for FPFSEnumerator();
}

void sub_23AB33D64(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = a3 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x23B8615C4](v4);
  if (v5)
  {
    v6 = (void *)v5;
    if ((*(_BYTE *)(v5 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_invalidated) & 1) != 0)
    {
      if (a1)
        objc_msgSend(a1, sel_invalidate);

    }
    else
    {
      *(_QWORD *)(v5 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_extensionEnumerator) = a1;
      swift_unknownObjectRetain();

      swift_unknownObjectRelease();
    }
  }
  else if (a1)
  {
    objc_msgSend(a1, sel_invalidate);
  }
}

uint64_t sub_23AB33E20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _BOOL4 v30;
  _BOOL4 v32;
  _BOOL4 v34;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v55;
  uint64_t v56;
  uint64_t v57;

  v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1DF0);
  MEMORY[0x24BDAC7A8](v57);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v56 - v15;
  sub_23AA8EFC8(a1, (uint64_t)v9, (uint64_t *)&unk_2542E4750);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    v56 = a2;
    sub_23AA724E8((uint64_t)v9, (uint64_t)v16, (uint64_t *)&unk_2542E6B00);
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_buildAndFilterAppLibraries) == 1)
    {
      v20 = v16[*(int *)(v10 + 48)];
      sub_23AA8EFC8((uint64_t)v16, (uint64_t)v14, (uint64_t *)&unk_2542E6B00);
      if (v20 == 1)
      {
        v21 = *((_QWORD *)v14 + 2);
        v22 = v14[24];
        v24 = *((_QWORD *)v14 + 16);
        v23 = *((_QWORD *)v14 + 17);
        sub_23AA907B0((uint64_t)&v14[*(int *)(v10 + 48)], (uint64_t)&v6[*(int *)(v57 + 40)], (uint64_t (*)(_QWORD))type metadata accessor for ItemMetadata);
        *(_QWORD *)v6 = v21;
        v6[8] = v22;
        *((_QWORD *)v6 + 2) = v24;
        *((_QWORD *)v6 + 3) = v23;
        swift_bridgeObjectRetain_n();
        sub_23AA8A05C((uint64_t)v6, (uint64_t *)&unk_2542E1DF0);
        if (v24 == 0x746E656D75636F44 && v23 == 0xE900000000000073)
        {
          swift_bridgeObjectRelease();
          sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E6B00);
          goto LABEL_57;
        }
        v26 = sub_23B1C7388();
        swift_bridgeObjectRelease();
        sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E6B00);
        if ((v26 & 1) != 0)
        {
LABEL_57:
          v43 = v56;
          sub_23AA8EFC8((uint64_t)v16, v56, (uint64_t *)&unk_2542E6B00);
          v44 = *(_QWORD *)v16;
          v45 = v16[8];
          sub_23AA8A05C((uint64_t)v16, (uint64_t *)&unk_2542E6B00);
          v46 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID);
          v47 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8);
          if (v45)
          {
            if (v45 == 1)
            {
              v48 = v47 == 1 && v44 == v46;
            }
            else if (v44)
            {
              v48 = v47 == 2 && v46 == 1;
            }
            else
            {
              v48 = v47 == 2 && v46 == 0;
            }
          }
          else
          {
            if (*(_BYTE *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8))
            {
              v55 = 0;
LABEL_85:
              v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E3258);
              *(_BYTE *)(v43 + *(int *)(v17 + 48)) = v55;
              v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
              v19 = v43;
              v41 = 0;
              return v18(v19, v41, 1, v17);
            }
            v48 = (_DWORD)v44 == (_DWORD)v46;
          }
          v55 = v48;
          goto LABEL_85;
        }
      }
      else
      {
        sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E6B00);
      }
    }
    v27 = *(_QWORD *)v16;
    v28 = *(_QWORD *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID);
    v29 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8);
    v30 = *(_QWORD *)v16 == v28;
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8))
      v30 = 0;
    v32 = v29 == 1 && v27 == v28;
    v34 = v29 == 2 && v28 == 0;
    v36 = v29 == 2 && v28 == 1;
    if (v27)
      v37 = v36;
    else
      v37 = v34;
    if (v16[8] == 1)
      v37 = v32;
    if (v16[8])
      v38 = v37;
    else
      v38 = v30;
    v39 = *((_QWORD *)v16 + 2);
    if (v16[24])
    {
      if (v16[24] == 1)
      {
        if (v29 == 1)
        {
          v40 = v39 == v28 || v38;
          if (v40 == 1)
            goto LABEL_70;
          goto LABEL_50;
        }
LABEL_49:
        if (v38)
        {
LABEL_70:
          v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E3258);
          v51 = *(int *)(v50 + 48);
          v52 = (uint64_t)v16;
          v53 = v56;
          sub_23AA724E8(v52, v56, (uint64_t *)&unk_2542E6B00);
          *(_BYTE *)(v53 + v51) = v38;
          v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56);
          v19 = v53;
          v41 = 0;
          v17 = v50;
          return v18(v19, v41, 1, v17);
        }
LABEL_50:
        sub_23AA8A05C((uint64_t)v16, (uint64_t *)&unk_2542E6B00);
        v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E3258);
        v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
        v19 = v56;
        goto LABEL_51;
      }
      if (v39)
        v42 = v29 == 2 && v28 == 1;
      else
        v42 = v29 == 2 && v28 == 0;
    }
    else
    {
      if (*(_BYTE *)(v2 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8))
        goto LABEL_49;
      v42 = (_DWORD)v39 == (_DWORD)v28;
    }
    v49 = v42 || v38;
    if ((v49 & 1) != 0)
      goto LABEL_70;
    goto LABEL_50;
  }
  sub_23AA8A05C((uint64_t)v9, (uint64_t *)&unk_2542E4750);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E3258);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v19 = a2;
LABEL_51:
  v41 = 1;
  return v18(v19, v41, 1, v17);
}

void (*sub_23AB342D0(uint64_t (*a1)(uint64_t)))(uint64_t *, _QWORD)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*result)(uint64_t *, _QWORD);
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  void *v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  _QWORD *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  NSObject *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  NSObject *v88;
  int v89;
  uint64_t v90;
  _QWORD *v91;
  id v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t);
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t (*v136)(uint64_t);
  uint64_t v137[4];
  uint64_t v138[3];
  char *v139;

  v136 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E3268);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v130 = (uint64_t)&v118 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v134 = (uint64_t *)((char *)&v118 - v4);
  v129 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E3270);
  v5 = MEMORY[0x24BDAC7A8](v129);
  v124 = (uint64_t)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v128 = (uint64_t)&v118 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  v132 = *(_QWORD *)(v8 - 8);
  v133 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v125 = (uint64_t)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v127 = (uint64_t)&v118 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v126 = (uint64_t)&v118 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v131 = (uint64_t)&v118 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E0910);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v118 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v118 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v118 - v24;
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v118 - v27;
  v29 = MEMORY[0x24BDAC7A8](v26);
  v31 = (char *)&v118 - v30;
  v32 = MEMORY[0x24BDAC7A8](v29);
  v34 = (char *)&v118 - v33;
  v35 = MEMORY[0x24BDAC7A8](v32);
  v37 = (uint64_t (*)(uint64_t))((char *)&v118 - v36);
  v38 = MEMORY[0x24BDAC7A8](v35);
  v40 = (char *)&v118 - v39;
  v41 = (uint64_t)v139;
  result = (void (*)(uint64_t *, _QWORD))v136(v38);
  if (!v41)
  {
    v119 = v31;
    v121 = v34;
    v120 = v22;
    v122 = v25;
    v123 = v28;
    v136 = v37;
    v139 = v40;
    v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E3250);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v18, 1, v43) == 1)
      return (void (*)(uint64_t *, _QWORD))sub_23AA8A05C((uint64_t)v18, &qword_2542E0910);
    v118 = 0;
    v44 = (uint64_t)&v18[*(int *)(v43 + 48)];
    v45 = v18[*(int *)(v43 + 64)];
    v46 = (uint64_t)v139;
    sub_23AA724E8((uint64_t)v18, (uint64_t)v139, (uint64_t *)&unk_2542E4750);
    v47 = v136;
    sub_23AA724E8(v44, (uint64_t)v136, (uint64_t *)&unk_2542E4750);
    v48 = (uint64_t)v134;
    v49 = (void *)v135;
    sub_23AB33E20((uint64_t)v47, (uint64_t)v134);
    v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E3258);
    v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48);
    if (v51(v48, 1, v50) == 1)
    {
      sub_23AA8A05C(v48, &qword_2542E3268);
      v52 = v130;
      sub_23AB33E20(v46, v130);
      if (v51(v52, 1, v50) == 1)
      {
        sub_23AA8A05C(v52, &qword_2542E3268);
        v53 = v47;
LABEL_24:
        sub_23AA8A05C((uint64_t)v53, (uint64_t *)&unk_2542E4750);
        v100 = v46;
        return (void (*)(uint64_t *, _QWORD))sub_23AA8A05C(v100, (uint64_t *)&unk_2542E4750);
      }
      v67 = v124;
      sub_23AA724E8(v52, v124, (uint64_t *)&unk_2542E6B00);
      v68 = v127;
      sub_23AA724E8(v67, v127, (uint64_t *)&unk_2542E6B00);
      v69 = v125;
      sub_23AA8EFC8(v68, v125, (uint64_t *)&unk_2542E6B00);
      v70 = (uint64_t)v122;
      sub_23AA8EFC8((uint64_t)v47, (uint64_t)v122, (uint64_t *)&unk_2542E4750);
      v71 = v49;
      v72 = sub_23B1C5E40();
      v73 = sub_23B1C6A94();
      if (os_log_type_enabled(v72, (os_log_type_t)v73))
      {
        LODWORD(v131) = v73;
        v74 = v69;
        v75 = swift_slowAlloc();
        v76 = (_QWORD *)swift_slowAlloc();
        v135 = swift_slowAlloc();
        v137[0] = v135;
        *(_DWORD *)v75 = 138412802;
        v138[0] = (uint64_t)v71;
        v77 = v71;
        sub_23B1C6CBC();
        v134 = v76;
        *v76 = v71;

        *(_WORD *)(v75 + 12) = 2080;
        v78 = sub_23ADF7370();
        v138[0] = sub_23AABEC68(v78, v79, v137);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        sub_23AA8A05C(v74, (uint64_t *)&unk_2542E6B00);
        *(_WORD *)(v75 + 22) = 2080;
        v80 = (uint64_t *)&unk_2542E4750;
        v81 = (uint64_t)v120;
        sub_23AA8EFC8((uint64_t)v122, (uint64_t)v120, (uint64_t *)&unk_2542E4750);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v132 + 48))(v81, 1, v133) == 1)
        {
          v82 = 0x3E6C696E3CLL;
          v83 = 0xE500000000000000;
        }
        else
        {
          v82 = sub_23ADF7370();
          v83 = v101;
          v80 = (uint64_t *)&unk_2542E6B00;
        }
        sub_23AA8A05C(v81, v80);
        v138[0] = sub_23AABEC68(v82, v83, v137);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        sub_23AA8A05C((uint64_t)v122, (uint64_t *)&unk_2542E4750);
        _os_log_impl(&dword_23AA66000, v72, (os_log_type_t)v131, "📖  %@: registering item deletion %s -> %s", (uint8_t *)v75, 0x20u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
        v102 = (uint64_t)v134;
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v102, -1, -1);
        v103 = v135;
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v103, -1, -1);
        MEMORY[0x23B8614BC](v75, -1, -1);

        v46 = (uint64_t)v139;
        v68 = v127;
      }
      else
      {

        sub_23AA8A05C(v69, (uint64_t *)&unk_2542E6B00);
        sub_23AA8A05C(v70, (uint64_t *)&unk_2542E4750);
      }
      v104 = *(_QWORD *)v68;
      v105 = *(_BYTE *)(v68 + 8);
      v106 = (uint64_t)v123;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v132 + 56))(v123, 1, 1, v133);
      swift_beginAccess();
      sub_23AD036CC(v106, v104, v105);
      swift_endAccess();
      swift_beginAccess();
      sub_23ADE0930((uint64_t)v138, v104, v105);
      swift_endAccess();
      swift_getKeyPath();
      swift_getKeyPath();
      result = (void (*)(uint64_t *, _QWORD))sub_23B1C5F48();
      if (*v107 != -1)
      {
        ++*v107;
        result(v137, 0);
        swift_release();
        swift_release();
        sub_23AA8A05C(v68, (uint64_t *)&unk_2542E6B00);
        v53 = v136;
        goto LABEL_24;
      }
      __break(1u);
    }
    else
    {
      v54 = *(_BYTE *)(v48 + *(int *)(v50 + 48));
      v55 = v129;
      v56 = *(int *)(v129 + 48);
      v57 = v48;
      v58 = v128;
      sub_23AA724E8(v57, v128, (uint64_t *)&unk_2542E6B00);
      *(_BYTE *)(v58 + v56) = v54;
      v59 = *(unsigned __int8 *)(v58 + *(int *)(v55 + 48));
      v60 = v131;
      sub_23AA724E8(v58, v131, (uint64_t *)&unk_2542E6B00);
      if ((v59 & v45) == 1)
      {
        v61 = v49;
        v62 = sub_23B1C5E40();
        v63 = sub_23B1C6A94();
        if (os_log_type_enabled(v62, v63))
        {
          v64 = (uint8_t *)swift_slowAlloc();
          v65 = (_QWORD *)swift_slowAlloc();
          *(_DWORD *)v64 = 138412290;
          v137[0] = (uint64_t)v61;
          v66 = v61;
          v60 = v131;
          sub_23B1C6CBC();
          *v65 = v61;

          _os_log_impl(&dword_23AA66000, v62, v63, "📖  %@: item get updated and we're ask to invalidate the children, reset", v64, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
          swift_arrayDestroy();
          MEMORY[0x23B8614BC](v65, -1, -1);
          MEMORY[0x23B8614BC](v64, -1, -1);
        }
        else
        {

        }
        v98 = (uint64_t)v139;
        v99 = v136;

        sub_23AB3ABF8();
        sub_23AA8A05C(v60, (uint64_t *)&unk_2542E6B00);
        sub_23AA8A05C((uint64_t)v99, (uint64_t *)&unk_2542E4750);
        v100 = v98;
        return (void (*)(uint64_t *, _QWORD))sub_23AA8A05C(v100, (uint64_t *)&unk_2542E4750);
      }
      v84 = (uint64_t)v139;
      v85 = (uint64_t)v121;
      sub_23AA8EFC8((uint64_t)v139, (uint64_t)v121, (uint64_t *)&unk_2542E4750);
      v86 = v126;
      sub_23AA8EFC8(v60, v126, (uint64_t *)&unk_2542E6B00);
      v87 = v49;
      v88 = sub_23B1C5E40();
      v89 = sub_23B1C6A94();
      if (os_log_type_enabled(v88, (os_log_type_t)v89))
      {
        LODWORD(v130) = v89;
        v90 = swift_slowAlloc();
        v91 = (_QWORD *)swift_slowAlloc();
        v135 = swift_slowAlloc();
        v137[0] = v135;
        *(_DWORD *)v90 = 138412802;
        v138[0] = (uint64_t)v87;
        v92 = v87;
        sub_23B1C6CBC();
        v134 = v91;
        *v91 = v87;

        *(_WORD *)(v90 + 12) = 2080;
        v93 = (uint64_t *)&unk_2542E4750;
        v94 = v85;
        v95 = (uint64_t)v119;
        sub_23AA8EFC8(v94, (uint64_t)v119, (uint64_t *)&unk_2542E4750);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v132 + 48))(v95, 1, v133) == 1)
        {
          v96 = 0x3E6C696E3CLL;
          v97 = 0xE500000000000000;
        }
        else
        {
          v96 = sub_23ADF7370();
          v97 = v108;
          v93 = (uint64_t *)&unk_2542E6B00;
        }
        sub_23AA8A05C(v95, v93);
        v138[0] = sub_23AABEC68(v96, v97, v137);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        sub_23AA8A05C((uint64_t)v121, (uint64_t *)&unk_2542E4750);
        *(_WORD *)(v90 + 22) = 2080;
        v109 = v126;
        v110 = sub_23ADF7370();
        v138[0] = sub_23AABEC68(v110, v111, v137);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        sub_23AA8A05C(v109, (uint64_t *)&unk_2542E6B00);
        _os_log_impl(&dword_23AA66000, v88, (os_log_type_t)v130, "📖  %@: registering item update %s -> %s", (uint8_t *)v90, 0x20u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
        v112 = (uint64_t)v134;
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v112, -1, -1);
        v113 = v135;
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v113, -1, -1);
        MEMORY[0x23B8614BC](v90, -1, -1);

        v84 = (uint64_t)v139;
        v60 = v131;
      }
      else
      {

        sub_23AA8A05C(v85, (uint64_t *)&unk_2542E4750);
        sub_23AA8A05C(v86, (uint64_t *)&unk_2542E6B00);
      }
      v114 = *(_QWORD *)v60;
      v115 = *(_BYTE *)(v60 + 8);
      v116 = (uint64_t)v123;
      sub_23AA8EFC8(v60, (uint64_t)v123, (uint64_t *)&unk_2542E6B00);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v132 + 56))(v116, 0, 1, v133);
      swift_beginAccess();
      sub_23AD036CC(v116, v114, v115);
      swift_endAccess();
      swift_beginAccess();
      sub_23B18CEEC(v114, v115);
      swift_endAccess();
      swift_getKeyPath();
      swift_getKeyPath();
      result = (void (*)(uint64_t *, _QWORD))sub_23B1C5F48();
      if (*v117 != -1)
      {
        ++*v117;
        result(v137, 0);
        swift_release();
        swift_release();
        sub_23AA8A05C(v60, (uint64_t *)&unk_2542E6B00);
        sub_23AA8A05C((uint64_t)v136, (uint64_t *)&unk_2542E4750);
        v100 = v84;
        return (void (*)(uint64_t *, _QWORD))sub_23AA8A05C(v100, (uint64_t *)&unk_2542E4750);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23AB350D8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = sub_23AAB64DC;
  *(_QWORD *)(v9 + 24) = v7;
  swift_retain_n();
  v10 = a4;
  swift_retain();
  sub_23AA901C4((uint64_t)"currentSyncAnchor(completion:)", 30, 2, sub_23AB3D90C, v9, (uint64_t)sub_23AB3D8F0, (uint64_t)v8);
  swift_release();
  swift_release();
  return swift_release();
}

void sub_23AB351C8(void (*a1)(void *, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  swift_getKeyPath();
  swift_getKeyPath();
  sub_23B1C5F54();
  swift_release();
  swift_release();
  v2 = sub_23AABEE98(&v6, &v7);
  v4 = v3 & 0xFFFFFFFFFFFFFFLL;
  v5 = (void *)sub_23B1C5AA4();
  sub_23AAAE53C(v2, v4);
  a1(v5, 0);

}

uint64_t sub_23AB35328@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, _QWORD *);
  uint64_t *v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v26 - v7;
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID);
  v10 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8);
  if (v10 == 1)
    goto LABEL_11;
  if (v10 == 2)
  {
    type metadata accessor for VFSFileTree(0);
    v11 = (_QWORD *)swift_dynamicCastClassUnconditional();
    swift_retain();
    v12 = objc_sync_enter(v11);
    if (v9)
    {
      if (v12)
        goto LABEL_16;
      v13 = v11[20];
      swift_retain();
      if (objc_sync_exit(v11))
        goto LABEL_17;
      swift_release();
      v9 = *(_QWORD *)(v13 + 40);
      v14 = *(_BYTE *)(v13 + 48);
      swift_release();
      if ((v14 & 1) != 0)
      {
        v15 = sub_23B1C5A08();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
      }
    }
    else
    {
      if (v12)
        goto LABEL_16;
      v17 = v11[20];
      swift_retain();
      if (objc_sync_exit(v11))
        goto LABEL_17;
      swift_release();
      v9 = *(_QWORD *)(v17 + 24);
      swift_release();
    }
LABEL_11:
    v30 = v9;
    v32 = 0u;
    v31 = 0u;
    type metadata accessor for VFSFileTree(0);
    v11 = (_QWORD *)swift_dynamicCastClassUnconditional();
    swift_retain();
    if (objc_sync_enter(v11))
      goto LABEL_16;
    v18 = v11[20];
    swift_retain();
    if (!objc_sync_exit(v11))
    {
      v19 = *(unsigned int *)(v18 + 16);
      swift_release();
      v20 = swift_release();
      MEMORY[0x24BDAC7A8](v20);
      v23 = &v30;
      v24 = v19;
      v25 = 1;
      v11 = (_QWORD *)sub_23B1C5A08();
      v21 = *(v11 - 1);
      v22 = *(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v21 + 56);
      v22(v8, 1, 1, v11);
      v27 = v9;
      v28 = 0u;
      v29 = 0u;
      sub_23B0E0928((uint64_t)&v27, v19, 0x200000, 0, (uint64_t)v8, (uint64_t)sub_23AAB7D90, (uint64_t)(&v26 - 4));
      sub_23AA8EFC8((uint64_t)v8, (uint64_t)v6, (uint64_t *)&unk_2542E6740);
      if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v21 + 48))(v6, 1, v11) != 1)
      {
        (*(void (**)(uint64_t, char *, _QWORD *))(v21 + 32))(a1, v6, v11);
        sub_23AA8A05C((uint64_t)v8, (uint64_t *)&unk_2542E6740);
        return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD *))v22)(a1, 0, 1, v11);
      }
      __break(1u);
LABEL_16:
      sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)v11);
    }
LABEL_17:
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)v11);
  }
  result = sub_23B1C704C();
  __break(1u);
  return result;
}

uint64_t sub_23AB35758(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_2542E02D0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23B1C6050();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23B1C60A4();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  qos_class_self();
  sub_23B1C6038();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEE5498], v8);
    sub_23AA8A05C((uint64_t)v7, qword_2542E02D0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  }
  sub_23B1C608C();

  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_23AB35900(NSObject *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD, _QWORD, id), uint64_t a5)
{
  char *v5;
  char *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  os_log_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  id v77;
  id v78;
  id v79;
  _BYTE *v80;
  NSObject *v81;
  void *v83;
  char *v84;
  uint64_t v85;
  id v86;
  char *v87;
  id v88;
  NSObject *v89;
  int v90;
  uint64_t v91;
  _QWORD *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  id v96;
  uint64_t v97;
  void *v98;
  uint64_t *v99;
  void *v100;
  id v101;
  os_log_t v102;
  uint64_t v103;
  id v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  os_log_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(_QWORD, _QWORD, _QWORD, _QWORD, id);
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124[3];

  v6 = v5;
  v117 = a4;
  v113 = a3;
  v111 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750);
  v109 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v110 = v10;
  v112 = (uint64_t)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23B1C5E4C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v107 = v14;
  v108 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v120 = (char *)&v105 - v15;
  if (qword_2542E1F60 != -1)
    swift_once();
  v16 = (id)qword_2542EDC80;
  v114 = a1;
  v17 = sub_23B1C5AD4();
  v19 = v18;
  v20 = sub_23B1C5AD4();
  v22 = v21;
  sub_23AAAE6AC(v17, v19);
  v24 = v23;
  sub_23AAAE53C(v20, v22);
  sub_23AAAE53C(v17, v19);

  v118 = a5;
  if ((v24 & 1) != 0)
    goto LABEL_7;
  if (qword_2542E1F68 != -1)
    swift_once();
  v25 = (id)qword_2542EDD10;
  v26 = sub_23B1C5AD4();
  v28 = v27;
  v29 = sub_23B1C5AD4();
  v31 = v30;
  sub_23AAAE6AC(v26, v28);
  v33 = v32;
  sub_23AAAE53C(v29, v31);
  sub_23AAAE53C(v26, v28);

  if ((v33 & 1) != 0)
  {
LABEL_7:
    v34 = 0;
  }
  else
  {
    sub_23B1C5780();
    swift_allocObject();
    sub_23B1C5774();
    type metadata accessor for PaginatedContinuation();
    v47 = sub_23B1C5AD4();
    v49 = v48;
    sub_23AA7E38C(&qword_2569E2350, (uint64_t (*)(uint64_t))type metadata accessor for PaginatedContinuation, (uint64_t)&unk_23B1E3F78);
    sub_23B1C5768();
    swift_release();
    sub_23AAAE53C(v47, v49);
    v34 = v122;
  }
  v35 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v35(v120, &v6[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_logger], v11);
  swift_retain_n();
  v36 = v6;
  v37 = sub_23B1C5E40();
  v38 = sub_23B1C6A94();
  v39 = os_log_type_enabled(v37, v38);
  v119 = v34;
  v115 = v12;
  v116 = v11;
  if (v39)
  {
    v106 = (uint64_t)v35;
    v40 = swift_slowAlloc();
    v41 = (_QWORD *)swift_slowAlloc();
    v42 = swift_slowAlloc();
    v124[0] = v42;
    *(_DWORD *)v40 = 138412546;
    v122 = (uint64_t)v36;
    v43 = v36;
    sub_23B1C6CBC();
    *v41 = v36;

    v44 = v119;
    *(_WORD *)(v40 + 12) = 2080;
    if (v44)
    {
      v122 = 979789423;
      v123 = 0xE400000000000000;
      v121 = *(_QWORD *)(v44 + 16);
      swift_retain();
      sub_23B1C7304();
      sub_23B1C64F4();
      swift_release();
      swift_bridgeObjectRelease();
      v45 = v122;
      v46 = v123;
    }
    else
    {
      v45 = 0x6C616974696E693CLL;
      v46 = 0xE90000000000003ELL;
    }
    v122 = sub_23AABEC68(v45, v46, v124);
    sub_23B1C6CBC();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23AA66000, v37, v38, "📖  %@: enumerating page %s", (uint8_t *)v40, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v41, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v42, -1, -1);
    MEMORY[0x23B8614BC](v40, -1, -1);

    v12 = v115;
    v11 = v116;
    v35 = (void (*)(char *, char *, uint64_t))v106;
  }
  else
  {
    swift_release_n();

  }
  if ((v36[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_invalidated] & 1) != 0
    || (v50 = MEMORY[0x23B8615C4](&v36[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_backend])) == 0)
  {
    type metadata accessor for NSFileProviderError(0);
    v124[0] = -1002;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&unk_2542E1E60, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderError, (uint64_t)&unk_23B1CC9C0);
    sub_23B1C5864();
    v83 = (void *)v122;
    v84 = v36;
    v85 = v119;
    swift_retain_n();
    v86 = v83;
    v87 = v84;
    v88 = v86;
    v89 = sub_23B1C5E40();
    v90 = sub_23B1C6AA0();
    if (os_log_type_enabled(v89, (os_log_type_t)v90))
    {
      LODWORD(v112) = v90;
      v114 = v89;
      v91 = swift_slowAlloc();
      v92 = (_QWORD *)swift_slowAlloc();
      v113 = swift_slowAlloc();
      v124[0] = v113;
      *(_DWORD *)v91 = 138412802;
      v122 = (uint64_t)v87;
      v93 = v87;
      sub_23B1C6CBC();
      *v92 = v87;

      *(_WORD *)(v91 + 12) = 2080;
      if (v85)
      {
        v122 = 979789423;
        v123 = 0xE400000000000000;
        v121 = *(_QWORD *)(v85 + 16);
        swift_retain();
        sub_23B1C7304();
        sub_23B1C64F4();
        swift_release();
        swift_bridgeObjectRelease();
        v94 = v122;
        v95 = v123;
      }
      else
      {
        v94 = 0x6C616974696E693CLL;
        v95 = 0xE90000000000003ELL;
      }
      v122 = sub_23AABEC68(v94, v95, v124);
      sub_23B1C6CBC();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v91 + 22) = 2112;
      v122 = (uint64_t)v88;
      sub_23AA7E38C(&qword_2542E1E80, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderError, (uint64_t)&unk_23B1CB874);
      v96 = v88;
      v97 = sub_23B1C731C();
      v11 = v116;
      if (v97)
      {
        v98 = (void *)v97;

      }
      else
      {
        v98 = (void *)swift_allocError();
        *v99 = v122;
      }
      v100 = (void *)sub_23B1C5870();

      v101 = objc_msgSend(v100, sel_fp_prettyDescription);
      v122 = (uint64_t)v101;
      sub_23B1C6CBC();
      v92[1] = v101;

      v102 = v114;
      _os_log_impl(&dword_23AA66000, v114, (os_log_type_t)v112, "📖  %@: enumerating page %s failed: %@", (uint8_t *)v91, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v92, -1, -1);
      v103 = v113;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v103, -1, -1);
      MEMORY[0x23B8614BC](v91, -1, -1);

      v12 = v115;
    }
    else
    {

      swift_release_n();
    }
    v104 = v88;
    v117(MEMORY[0x24BEE4AF8], 0, 0, 0, v88);
    swift_release();

    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v120, v11);
  }
  else
  {
    v51 = v12;
    v52 = v11;
    v53 = v50;
    v105 = (void *)v50;
    v106 = swift_allocObject();
    v54 = v108;
    v35(v108, v120, v52);
    v55 = v51;
    v56 = (*(unsigned __int8 *)(v51 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    v57 = (v107 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
    v58 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v59 = swift_allocObject();
    *(_QWORD *)(v59 + 16) = v53;
    (*(void (**)(unint64_t, char *, uint64_t))(v55 + 32))(v59 + v56, v54, v52);
    *(_QWORD *)(v59 + v57) = v36;
    *(_QWORD *)(v59 + v58) = v119;
    v60 = (_QWORD *)(v59 + ((v58 + 15) & 0xFFFFFFFFFFFFFFF8));
    v61 = v118;
    *v60 = v117;
    v60[1] = v61;
    v62 = v106;
    *(_QWORD *)(v106 + 16) = sub_23AB3C30C;
    *(_QWORD *)(v62 + 24) = v59;
    v108 = v36;
    v63 = v62;
    v64 = v112;
    sub_23AA8EFC8(v111, v112, (uint64_t *)&unk_2542E4750);
    v65 = (*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
    v66 = (v110 + v65 + 7) & 0xFFFFFFFFFFFFFFF8;
    v67 = (v66 + 15) & 0xFFFFFFFFFFFFFFF8;
    v68 = (v67 + 15) & 0xFFFFFFFFFFFFFFF8;
    v69 = (v68 + 15) & 0xFFFFFFFFFFFFFFF8;
    v70 = swift_allocObject();
    *(_QWORD *)(v70 + 16) = v63;
    *(_QWORD *)(v70 + 24) = v119;
    sub_23AA724E8(v64, v70 + v65, (uint64_t *)&unk_2542E4750);
    v71 = v108;
    *(_QWORD *)(v70 + v66) = v108;
    v72 = v113;
    v73 = v114;
    *(_QWORD *)(v70 + v67) = v114;
    *(_QWORD *)(v70 + v68) = v72;
    v74 = (_QWORD *)(v70 + v69);
    v75 = v118;
    *v74 = v117;
    v74[1] = v75;
    v76 = v105;
    *(_QWORD *)(v70 + ((v69 + 23) & 0xFFFFFFFFFFFFFFF8)) = v105;
    v77 = v71;
    swift_retain_n();
    swift_retain_n();
    v78 = v76;
    swift_retain_n();
    v79 = v77;
    v80 = v78;
    swift_retain();
    v81 = v73;
    sub_23AA6D55C((uint64_t)"enumerateItems(fromPage:selfItem:suggestedPageSize:reply:)", 58, 2, (uint64_t)sub_23AB3C314, v70, v80, (void (*)(id, _QWORD, _QWORD, uint64_t))sub_23AB3C30C, v59);
    swift_release();

    swift_release();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v115 + 8))(v120, v116);
    return swift_release();
  }
}

uint64_t sub_23AB3649C(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  id v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD aBlock[7];

  v44 = a8;
  v42 = a7;
  v39 = a4;
  v37 = a2;
  v38 = a3;
  v13 = a1;
  v36 = a1;
  v40 = a9;
  v41 = a10;
  v47 = sub_23B1C602C();
  v50 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v46 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23B1C60A4();
  v48 = *(_QWORD *)(v15 - 8);
  v49 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v43 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23B1C5E4C();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = *(_QWORD *)(a5 + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a6, v17);
  v21 = (*(unsigned __int8 *)(v18 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v22 = (v19 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v13;
  *(_QWORD *)(v24 + 24) = a2;
  v25 = v38;
  *(_QWORD *)(v24 + 32) = v38;
  LOBYTE(v13) = v39 & 1;
  *(_BYTE *)(v24 + 40) = v39 & 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(v24 + v21, v20, v17);
  v26 = v42;
  *(_QWORD *)(v24 + v22) = v42;
  *(_QWORD *)(v24 + v23) = v44;
  v27 = (_QWORD *)(v24 + ((v23 + 15) & 0xFFFFFFFFFFFFFFF8));
  v28 = v41;
  *v27 = v40;
  v27[1] = v28;
  aBlock[4] = sub_23AB3CC34;
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AA698FC;
  aBlock[3] = &block_descriptor_50;
  v29 = _Block_copy(aBlock);
  swift_retain();
  sub_23AAB5520(v36, v37, v25, (char)v13);
  v30 = v26;
  swift_retain();
  v31 = v43;
  sub_23B1C6068();
  v51 = MEMORY[0x24BEE4AF8];
  sub_23AA7E38C((unint64_t *)&unk_2542E43B0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E7470);
  sub_23AAB5A28((unint64_t *)&qword_2542E7480, (uint64_t *)&unk_2542E7470, MEMORY[0x24BEE12C8]);
  v33 = v46;
  v32 = v47;
  sub_23B1C6DE8();
  MEMORY[0x23B85F470](0, v31, v33, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v31, v49);
  return swift_release();
}

void sub_23AB367B8(unint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, void *a6, uint64_t a7, void (*a8)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a9)
{
  uint64_t v12;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  NSObject *log;
  NSObject *v46;
  os_log_type_t v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v52;
  uint64_t __src;
  unint64_t v54;
  uint64_t v55[2];
  uint64_t v56[3];

  v12 = a3;
  v56[1] = *MEMORY[0x24BDAC8D0];
  if ((a4 & 1) == 0)
  {
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v15 = a6;
    v16 = sub_23B1C5E40();
    v17 = sub_23B1C6A94();
    if (os_log_type_enabled(v16, v17))
    {
      v46 = v16;
      v47 = v17;
      v51 = a8;
      v18 = swift_slowAlloc();
      v19 = (_QWORD *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      v56[0] = v49;
      *(_DWORD *)v18 = 138413314;
      __src = (uint64_t)v15;
      v20 = v15;
      sub_23B1C6CBC();
      *v19 = v15;

      *(_WORD *)(v18 + 12) = 2080;
      if (a7)
      {
        __src = 979789423;
        v54 = 0xE400000000000000;
        v55[0] = *(_QWORD *)(a7 + 16);
        sub_23B1C7304();
        sub_23B1C64F4();
        swift_bridgeObjectRelease();
        v21 = 979789423;
        v22 = 0xE400000000000000;
      }
      else
      {
        v21 = 0x6C616974696E693CLL;
        v22 = 0xE90000000000003ELL;
      }
      __src = sub_23AABEC68(v21, v22, v56);
      sub_23B1C6CBC();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 22) = 2048;
      if (a1 >> 62)
      {
        swift_bridgeObjectRetain();
        v37 = sub_23B1C7088();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v37 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRelease();
      }
      __src = v37;
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 32) = 2080;
      if (a2)
      {
        __src = 0x207478656E20;
        v54 = 0xE600000000000000;
        v55[0] = 979789423;
        v55[1] = 0xE400000000000000;
        sub_23B1C7304();
        sub_23B1C64F4();
        swift_bridgeObjectRelease();
        sub_23B1C64F4();
        swift_bridgeObjectRelease();
        v38 = 0x207478656E20;
        v39 = 0xE600000000000000;
      }
      else
      {
        v38 = 0;
        v39 = 0xE000000000000000;
      }
      sub_23AABEC68(v38, v39, v56);
      sub_23B1C6CBC();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 42) = 2048;
      __src = v12;
      sub_23B1C6CBC();
      _os_log_impl(&dword_23AA66000, v46, v47, "📖  %@: enumerating page %s done: %ld items%s anchor:%llu", (uint8_t *)v18, 0x34u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v19, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v49, -1, -1);
      MEMORY[0x23B8614BC](v18, -1, -1);

      a8 = v51;
      if (!a2)
        goto LABEL_21;
    }
    else
    {
      swift_release_n();
      swift_release_n();

      swift_bridgeObjectRelease_n();
      if (!a2)
      {
LABEL_21:
        v36 = 0;
        goto LABEL_22;
      }
    }
    v32 = v12;
    sub_23B1C57B0();
    swift_allocObject();
    swift_retain();
    sub_23B1C57A4();
    sub_23B1C578C();
    __src = a2;
    type metadata accessor for PaginatedContinuation();
    sub_23AA7E38C((unint64_t *)&unk_2569E2360, (uint64_t (*)(uint64_t))type metadata accessor for PaginatedContinuation, (uint64_t)&unk_23B1E3FA0);
    v33 = sub_23B1C5798();
    v35 = v34;
    v36 = (void *)sub_23B1C5AA4();
    swift_release();
    swift_release();
    sub_23AAAE53C(v33, v35);
    v12 = v32;
LABEL_22:
    __src = v12;
    v41 = sub_23AABEE98(&__src, &v54);
    v43 = v42 & 0xFFFFFFFFFFFFFFLL;
    v44 = (void *)sub_23B1C5AA4();
    sub_23AAAE53C(v41, v43);
    a8(a1, v36, v44, 0, 0);

    swift_release();
    return;
  }
  sub_23AAB5520((id)a1, a2, a3, 1);
  sub_23AAB5520((id)a1, a2, v12, 1);
  swift_retain();
  v23 = a6;
  sub_23AAB5520((id)a1, a2, v12, 1);
  v24 = v23;
  swift_retain();
  v25 = sub_23B1C5E40();
  v26 = sub_23B1C6AA0();
  if (os_log_type_enabled(v25, v26))
  {
    log = v25;
    v48 = v26;
    v27 = swift_slowAlloc();
    v28 = (_QWORD *)swift_slowAlloc();
    v50 = swift_slowAlloc();
    v55[0] = v50;
    *(_DWORD *)v27 = 138412802;
    __src = (uint64_t)v24;
    v29 = v24;
    sub_23B1C6CBC();
    *v28 = v24;

    *(_WORD *)(v27 + 12) = 2080;
    if (a7)
    {
      __src = 979789423;
      v54 = 0xE400000000000000;
      v56[0] = *(_QWORD *)(a7 + 16);
      sub_23B1C7304();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      v30 = 979789423;
      v31 = 0xE400000000000000;
    }
    else
    {
      v30 = 0x6C616974696E693CLL;
      v31 = 0xE90000000000003ELL;
    }
    sub_23AABEC68(v30, v31, v55);
    sub_23B1C6CBC();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 22) = 2112;
    swift_getErrorValue();
    __src = (uint64_t)sub_23B0D9CF0(v52);
    sub_23B1C6CBC();
    v28[1] = __src;
    sub_23AAB555C((void *)a1, a2, v12, 1);
    sub_23AAB555C((void *)a1, a2, v12, 1);
    _os_log_impl(&dword_23AA66000, log, v48, "📖  %@: enumerating page %s failed: %@", (uint8_t *)v27, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v28, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v50, -1, -1);
    MEMORY[0x23B8614BC](v27, -1, -1);

  }
  else
  {
    swift_release_n();

    sub_23AAB555C((void *)a1, a2, v12, 1);
    sub_23AAB555C((void *)a1, a2, v12, 1);
  }
  v40 = (id)a1;
  a8(MEMORY[0x24BEE4AF8], 0, 0, 0, a1);
  sub_23AAB555C((void *)a1, a2, v12, 1);
  sub_23AAB555C((void *)a1, a2, v12, 1);
}

uint64_t sub_23AB370D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v61 = a7;
  v62 = a8;
  v58 = a5;
  v59 = a6;
  v56 = a4;
  v52 = a3;
  v60 = a10;
  v57 = a9;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750);
  v55 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v55 + 64);
  MEMORY[0x24BDAC7A8](v12);
  v54 = (uint64_t)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v15 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  v17 = swift_allocObject();
  swift_weakInit();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = sub_23AAB55C4;
  v18[3] = v16;
  v18[4] = v17;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_23AABE758;
  *(_QWORD *)(v19 + 24) = v18;
  swift_beginAccess();
  *(_QWORD *)(a2 + 16) = sub_23AAB5588;
  *(_QWORD *)(a2 + 24) = v19;
  swift_retain();
  swift_retain();
  swift_release();
  v64 = swift_allocBox();
  v21 = v20;
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v63 = a1;
  v53 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  v49 = a2;
  v24 = *(_QWORD *)(a2 + 16);
  v51 = *(_QWORD *)(a2 + 24);
  v23 = v51;
  v25 = swift_allocObject();
  v50 = v25;
  *(_QWORD *)(v25 + 16) = v24;
  *(_QWORD *)(v25 + 24) = v23;
  v26 = v54;
  sub_23AA8EFC8(v56, v54, (uint64_t *)&unk_2542E4750);
  v27 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
  v28 = (v13 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = swift_allocObject();
  v36 = v64;
  *(_QWORD *)(v35 + 16) = v52;
  *(_QWORD *)(v35 + 24) = v36;
  sub_23AA724E8(v26, v35 + v27, (uint64_t *)&unk_2542E4750);
  v37 = v62;
  *(_QWORD *)(v35 + v28) = v63;
  v38 = v58;
  v39 = v59;
  *(_QWORD *)(v35 + v29) = v58;
  *(_QWORD *)(v35 + v30) = v39;
  *(_QWORD *)(v35 + v31) = v61;
  v40 = (_QWORD *)(v35 + v32);
  v41 = v57;
  *v40 = v37;
  v40[1] = v41;
  *(_QWORD *)(v35 + v33) = v49;
  v42 = v60;
  *(_QWORD *)(v35 + v34) = v60;
  v43 = swift_allocObject();
  v44 = v50;
  *(_QWORD *)(v43 + 16) = sub_23AB3D970;
  *(_QWORD *)(v43 + 24) = v44;
  swift_retain();
  swift_retain();
  swift_retain();
  v45 = v38;
  v46 = v39;
  swift_retain();
  swift_retain();
  v47 = v42;
  swift_retain();
  sub_23AA901C4((uint64_t)"enumerateItems(fromPage:selfItem:suggestedPageSize:reply:)", 58, 2, sub_23AB3C884, v43, (uint64_t)sub_23AB3C7CC, v35);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_23AB37494(uint64_t a1, uint64_t a2, void *a3, int *a4, _BYTE *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  BOOL v45;
  void *v46;
  void *v47;
  id v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  char v54;
  void (*v55)(uint64_t *, uint64_t);
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char *v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  int v82;
  id v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  int v91;
  int v92;
  void *v93;
  _QWORD *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  id v98;
  id v99;
  uint64_t v100;
  void *v101;
  void *v102;
  id v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int *v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  int *v114;
  id v115;
  void *v116;
  void (*v117)(uint64_t, id, uint64_t, _QWORD);
  id v118;
  void *v119;
  _QWORD *v120;
  id v121;
  char *v122;
  void (*v123)(uint64_t, _QWORD, uint64_t, _QWORD);
  uint64_t v124;
  uint64_t v125;
  int *v126;
  int *v127;
  void *v128;
  id v129;
  id v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  _QWORD *v137;
  unint64_t *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  _BOOL4 v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  id v150;
  uint64_t *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  int *v155;
  _BYTE *v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  _QWORD v164[3];
  uint64_t v165;
  char v166;
  _OWORD v167[6];
  uint64_t v168;

  v149 = a8;
  v143 = a7;
  v144 = a6;
  v156 = a5;
  v155 = a4;
  v150 = a3;
  v153 = a2;
  v152 = a11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E0290);
  MEMORY[0x24BDAC7A8](v12);
  v148 = (char *)&v139 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v142 = (char *)&v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v151 = (uint64_t *)((char *)&v139 - v18);
  MEMORY[0x24BDAC7A8](v17);
  v154 = (uint64_t)&v139 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char **)((char *)&v139 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v139 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)&v139 - v29;
  v31 = MEMORY[0x24BDAC7A8](v28);
  v33 = (char *)&v139 - v32;
  MEMORY[0x24BDAC7A8](v31);
  v35 = (char *)&v139 - v34;
  v36 = swift_projectBox();
  v147 = a10;
  v153 = a1;
  v145 = a10 + 16;
  v146 = a1 == 0;
  if (a1)
  {
    v168 = MEMORY[0x24BEE4AF8];
    v37 = v157;
    v38 = v154;
    v39 = v152;
    v40 = (char *)v155;
    v41 = (uint64_t)v156;
LABEL_3:
    v42 = sub_23B1C5A08();
    v43 = (uint64_t)v151;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v151, 1, 1, v42);
    v44 = 0;
    goto LABEL_4;
  }
  v140 = v30;
  v141 = v36;
  v139 = v27;
  v51 = v149;
  sub_23AA8EFC8((uint64_t)v150, (uint64_t)v33, (uint64_t *)&unk_2542E4750);
  v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v52(v33, 1, v20) == 1)
  {
    v53 = *(_QWORD *)(*((_QWORD *)v155 + 2) + 32);
    v54 = v156[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8];
    v165 = *(_QWORD *)&v156[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID];
    v166 = v54;
    v55 = *(void (**)(uint64_t *, uint64_t))(*(_QWORD *)v53 + 240);
    swift_retain();
    v56 = v157;
    v55(&v165, 1);
    swift_release();
    v57 = (uint64_t)v33;
    v37 = v56;
    sub_23AA8A05C(v57, (uint64_t *)&unk_2542E4750);
    v58 = v51;
    if (v56)
      return;
  }
  else
  {
    sub_23AA724E8((uint64_t)v33, (uint64_t)v35, (uint64_t *)&unk_2542E6B00);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v35, 0, 1, v20);
    v37 = v157;
    v58 = v51;
  }
  v86 = v141;
  swift_beginAccess();
  sub_23AB3C88C((uint64_t)v35, v86);
  swift_beginAccess();
  v87 = v86;
  v88 = (uint64_t)v140;
  sub_23AA8EFC8(v87, (uint64_t)v140, (uint64_t *)&unk_2542E4750);
  if (v52((char *)v88, 1, v20) == 1)
  {
    sub_23AA8A05C(v88, (uint64_t *)&unk_2542E4750);
    v89 = (char *)*((_QWORD *)v155 + 2);
    type metadata accessor for VFSFileTree(0);
    swift_dynamicCastClassUnconditional();
    v90 = *(_QWORD *)&v156[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID];
    v91 = v156[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8];
    swift_retain();
    swift_retain();
    if (objc_sync_enter(v89))
      sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)v89);
    v157 = *(id *)&v89[qword_2542E6C70];
    v92 = objc_sync_exit(v89);
    v93 = v144;
    if (v92)
      sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)v89);
    swift_release();
    memset(v167, 0, sizeof(v167));
    v94 = (_QWORD *)swift_allocObject();
    v95 = v156;
    v94[2] = v156;
    v94[3] = v93;
    v94[4] = v143;
    v94[5] = v58;
    v96 = v93;
    v97 = v147;
    v94[6] = a9;
    v94[7] = v97;
    v98 = v95;
    v99 = v96;
    swift_retain();
    swift_retain();
    sub_23AA7BAC4(v90, v91, (uint64_t)v167, 0, 0, (uint64_t)sub_23AB3C910, (uint64_t)v94);
    swift_release();
    swift_release();

    return;
  }
  v100 = (uint64_t)v23;
  sub_23AA724E8(v88, (uint64_t)v23, (uint64_t *)&unk_2542E6B00);
  v101 = (void *)MEMORY[0x23B8615C4](&v152[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain]);
  if (v101
    && (v102 = v101, v103 = objc_msgSend(v101, sel_indexer),
                     v102,
                     v103)
    && (v104 = objc_msgSend(v103, sel_needsAuthentication), v103, v104))
  {
    v105 = 9;
  }
  else
  {
    v105 = 1;
  }
  v109 = MEMORY[0x24BEE4AF8];
  v110 = (int *)sub_23AAF7AC0(MEMORY[0x24BEE4AF8]);
  v111 = sub_23AA96724(v23, v105, 0, v110);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v100 + *(int *)(v20 + 48)) != 1)
  {
    swift_beginAccess();
    v123 = *(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(v147 + 16);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE870);
    v124 = swift_allocObject();
    *(_OWORD *)(v124 + 16) = xmmword_23B1CE680;
    *(_QWORD *)(v124 + 32) = v111;
    v158 = v124;
    sub_23B1C671C();
    v125 = v158;
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    v126 = v111;
    sub_23B1C5F54();
    swift_release();
    swift_release();
    v123(v125, 0, v158, 0);
    swift_release();
    swift_bridgeObjectRelease();
    sub_23AA8A05C(v100, (uint64_t *)&unk_2542E6B00);

    return;
  }
  sub_23AA8A05C(v100, (uint64_t *)&unk_2542E6B00);
  v168 = v109;
  if (!v111)
  {
    v41 = (uint64_t)v156;
    v38 = v154;
    v40 = (char *)v155;
    v39 = v152;
    goto LABEL_3;
  }
  v44 = v111;
  v112 = v141;
  swift_beginAccess();
  v113 = (uint64_t)v139;
  sub_23AA8EFC8(v112, (uint64_t)v139, (uint64_t *)&unk_2542E4750);
  v114 = v44;
  v40 = (char *)v155;
  v115 = sub_23AEC4DA4(v114, v113, (uint64_t)v155);
  v41 = (uint64_t)v156;
  v38 = v154;
  if (v37)
  {

    sub_23AA8A05C(v113, (uint64_t *)&unk_2542E4750);
    swift_bridgeObjectRelease();
    return;
  }
  v128 = v115;
  sub_23AA8A05C(v113, (uint64_t *)&unk_2542E4750);
  v129 = v128;
  MEMORY[0x23B85F008]();
  if (*(_QWORD *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v168 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_23B1C6740();
  sub_23B1C6788();
  sub_23B1C671C();

  v130 = objc_msgSend(v114, sel_fileURL);
  if (v130)
  {
    v131 = v130;
    v132 = (uint64_t)v142;
    sub_23B1C59CC();

    v133 = sub_23B1C5A08();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 56))(v132, 0, 1, v133);
  }
  else
  {
    v133 = sub_23B1C5A08();
    v132 = (uint64_t)v142;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 56))(v142, 1, 1, v133);
  }
  v43 = (uint64_t)v151;
  sub_23AA724E8(v132, (uint64_t)v151, (uint64_t *)&unk_2542E6740);
  sub_23B1C5A08();
  v134 = *(_QWORD *)(v133 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48))(v43, 1, v133) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 32))(v38, v43, v133);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v134 + 56))(v38, 0, 1, v133);
    v39 = v152;
    goto LABEL_5;
  }
  v39 = v152;
LABEL_4:
  sub_23AB35328(v38);
  sub_23AA8A05C(v43, (uint64_t *)&unk_2542E6740);
LABEL_5:
  v45 = *(_BYTE *)(v41 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_buildAndFilterAppLibraries) == 1;
  v157 = v37;
  v155 = v44;
  if (v45)
  {
    v46 = (void *)MEMORY[0x23B8615C4](&v39[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain]);
    if (v46
      && (v47 = v46, v48 = objc_msgSend(v46, sel_indexer), v47, v48))
    {
      v49 = objc_msgSend(v48, sel_needsAuthentication);

      v50 = 8;
      if (!v49)
        v50 = 0;
      v151 = (uint64_t *)v50;
    }
    else
    {
      v151 = 0;
    }
    v66 = (uint64_t)v148;
    v67 = *(void **)(v41 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_fpItemID);
    v68 = *(_QWORD *)(v41 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID);
    v69 = *(unsigned __int8 *)(v41 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8);
    v70 = v41 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_logger;
    v71 = sub_23B1C5E4C();
    v72 = *(_QWORD *)(v71 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16))(v66, v70, v71);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56))(v66, 0, 1, v71);
    v163 = MEMORY[0x24BEE4AF8];
    v148 = (char *)*((_QWORD *)v40 + 2);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7010);
    v149 = swift_dynamicCastClassUnconditional();
    v164[0] = 0x746E656D75636F44;
    v164[1] = 0xE900000000000073;
    v161 = 58;
    v162 = 0xE100000000000000;
    v159 = 47;
    v160 = 0xE100000000000000;
    sub_23AAA420C();
    v73 = (uint64_t)v67;
    v150 = v67;
    swift_retain();
    v74 = sub_23B1C6CF8();
    v76 = v75;
    MEMORY[0x24BDAC7A8](v74);
    *(&v139 - 8) = (char *)v73;
    *(&v139 - 7) = (char *)v68;
    v77 = v69;
    *((_BYTE *)&v139 - 48) = v69;
    v78 = (uint64_t)v151;
    *(&v139 - 5) = v40;
    v135 = (char *)v78;
    v79 = v154;
    v136 = v154;
    v137 = (_QWORD *)v66;
    v138 = &v163;
    v80 = (void *)v68;
    v81 = v68;
    v82 = v77;
    v83 = v157;
    v85 = (void *)sub_23AA733EC(v81, v77, v84, v76, v153, (void (*)(char *, _BYTE *, uint64_t, _BYTE *))sub_23AABC060, (uint64_t)(&v139 - 10));
    if (v83)
    {
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      sub_23AA8A05C(v66, &qword_2542E0290);
      v65 = v79;
      goto LABEL_20;
    }
    v157 = v85;
    LODWORD(v153) = v82;
    swift_bridgeObjectRelease();
    swift_release();
    v106 = v163;
    sub_23AA8A05C(v66, &qword_2542E0290);

  }
  else
  {
    v59 = *(_QWORD *)(v41 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID);
    v60 = *(unsigned __int8 *)(v41 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8);
    v164[0] = MEMORY[0x24BEE4AF8];
    v61 = (char *)*((_QWORD *)v40 + 2);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7010);
    v62 = swift_dynamicCastClassUnconditional();
    v151 = (uint64_t *)&v139;
    MEMORY[0x24BDAC7A8](v62);
    *(&v139 - 6) = (char *)v41;
    *(&v139 - 5) = v40;
    v135 = v39;
    v136 = v38;
    v137 = v164;
    swift_retain();
    v63 = v157;
    v64 = (void *)sub_23AA958F8(v59, v60, v153, (void (*)(uint64_t, _BYTE *))sub_23AA960D4, (uint64_t)(&v139 - 8));
    if (v63)
    {
      swift_release();
      swift_bridgeObjectRelease();
      v65 = v38;
LABEL_20:
      sub_23AA8A05C(v65, (uint64_t *)&unk_2542E6740);
      swift_bridgeObjectRelease();

      return;
    }
    v157 = v64;
    v148 = v61;
    LODWORD(v153) = v60;
    v80 = (void *)v59;
    swift_release();
    v146 = 0;
    v106 = v164[0];
  }
  sub_23AAB6B5C(v106);
  v107 = v168;
  v108 = swift_bridgeObjectRetain();
  sub_23AA88520(v108);
  v116 = v80;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v117 = *(void (**)(uint64_t, id, uint64_t, _QWORD))(v147 + 16);
  swift_getKeyPath();
  swift_getKeyPath();
  v118 = v157;
  swift_retain();
  swift_retain();
  v119 = v156;
  sub_23B1C5F54();
  swift_release();
  swift_release();
  v117(v107, v118, v161, 0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (v146)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7010);
    v120 = (_QWORD *)swift_dynamicCastClassUnconditional();
    v121 = v119;
    v122 = v152;
    swift_retain();
    sub_23AA70BE8(v116, v153, v120, (uint64_t)v121, v122);
    swift_release();
    swift_release();

  }
  else
  {
    swift_release();
  }
  v127 = v155;
  sub_23AA8A05C(v154, (uint64_t *)&unk_2542E6740);

}

void sub_23AB385B4(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, id), uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void *v23;
  void (*v24)(void *, _QWORD, _QWORD, uint64_t);
  id v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void *, _QWORD, _QWORD, uint64_t);
  char v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  void (*v66)(_QWORD, _QWORD, _QWORD, _QWORD, id);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD v73[31];
  _QWORD v74[31];
  uint64_t v75;
  char v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  v66 = a5;
  v67 = a6;
  v62 = a4;
  v65 = a3;
  v71 = a2;
  v72 = (char *)a1;
  v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  v64 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v68 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750);
  MEMORY[0x24BDAC7A8](v9);
  v63 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for VFSItem(0);
  v70 = *((_QWORD *)v11 - 1);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v61 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v61 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E21B0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (void **)((char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23AA8EFC8((uint64_t)v72, (uint64_t)v22, (uint64_t *)&unk_2542E21B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v23 = *v22;
    swift_beginAccess();
    v24 = *(void (**)(void *, _QWORD, _QWORD, uint64_t))(a7 + 16);
    swift_retain();
    v25 = v23;
    v24(v23, 0, 0, 1);

    swift_release();
    return;
  }
  v61 = v14;
  v26 = (uint64_t)v17;
  v72 = v19;
  v27 = v71;
  if ((*(unsigned int (**)(void **, uint64_t, int *))(v70 + 48))(v22, 1, v11) == 1)
  {
    swift_beginAccess();
    v28 = *(void (**)(void *, _QWORD, _QWORD, uint64_t))(a7 + 16);
    v29 = *(_BYTE *)(v27 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8);
    v75 = *(_QWORD *)(v27 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID);
    v76 = v29;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0;
    sub_23AAFC630((uint64_t)&v75);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0950);
    sub_23AAB5A28((unint64_t *)&qword_2542E0940, (uint64_t *)&unk_2542E0950, (uint64_t)&unk_23B1D40CC);
    v30 = (void *)swift_allocError();
    sub_23AA724E8((uint64_t)&v75, v31, (uint64_t *)&unk_2542E0950);
    swift_retain();
    v28(v30, 0, 0, 1);

    swift_release();
    sub_23AA8A05C((uint64_t)v22, &qword_2542E72C0);
    return;
  }
  v32 = (uint64_t)v72;
  sub_23AB3CAF0((uint64_t)v22, (uint64_t)v72);
  v33 = v32;
  v34 = v26;
  sub_23AA907B0(v33, v26, type metadata accessor for VFSItem);
  v36 = v68;
  v35 = v69;
  v37 = (uint64_t)&v68[*(int *)(v69 + 52)];
  sub_23AAF8E48((uint64_t)&v75);
  sub_23AA724E8((uint64_t)&v75, v37, &qword_2542E5050);
  v38 = &v36[*(int *)(v35 + 56)];
  *(_QWORD *)v38 = 0;
  *((_QWORD *)v38 + 1) = 0;
  *((_QWORD *)v38 + 2) = 0;
  v38[24] = 1;
  v39 = &v36[*(int *)(v35 + 60)];
  *(_QWORD *)v39 = 0;
  *((_QWORD *)v39 + 1) = 0;
  v39[16] = 1;
  v40 = *(_QWORD *)v34;
  LODWORD(v35) = *(unsigned __int8 *)(v34 + 8);
  *(_QWORD *)v36 = *(_QWORD *)v34;
  v36[8] = v35;
  v41 = (uint64_t)v61;
  sub_23AA907B0(v34, (uint64_t)v61, type metadata accessor for VFSItem);
  if ((_DWORD)v35 == 2 && v40 == 1)
  {
    sub_23AB3CB34(v41);
    v42 = v62;
    v43 = (uint64_t)v68;
  }
  else
  {
    v44 = *(_QWORD *)v41;
    v45 = *(unsigned __int8 *)(v41 + 8);
    sub_23AB3CB34(v41);
    v42 = v62;
    v43 = (uint64_t)v68;
    if (v45 != 2 || v44)
    {
      v47 = *(_QWORD *)(v34 + 16);
      v48 = *(_BYTE *)(v34 + 24);
      *((_QWORD *)v68 + 2) = v47;
      *(_BYTE *)(v43 + 24) = v48;
      goto LABEL_12;
    }
  }
  v46 = *(_BYTE *)(v34 + 8);
  *(_QWORD *)(v43 + 16) = *(_QWORD *)v34;
  *(_BYTE *)(v43 + 24) = v46;
  v47 = *(_QWORD *)(v34 + 16);
  v48 = *(_BYTE *)(v34 + 24);
LABEL_12:
  v49 = v34 + v11[9];
  v50 = *(_QWORD *)v49;
  v51 = *(_DWORD *)(v49 + 8);
  v52 = *(_QWORD *)(v49 + 16);
  LOBYTE(v49) = *(_BYTE *)(v49 + 24);
  v53 = *(_QWORD *)(v34 + 32);
  v54 = *(_QWORD *)(v34 + 40);
  *(_QWORD *)(v43 + 32) = v50;
  *(_DWORD *)(v43 + 40) = v51;
  *(_QWORD *)(v43 + 48) = v52;
  *(_BYTE *)(v43 + 56) = v49;
  *(_QWORD *)(v43 + 64) = 0;
  *(_QWORD *)(v43 + 72) = v47;
  *(_BYTE *)(v43 + 80) = v48;
  *(_QWORD *)(v43 + 88) = v53;
  *(_QWORD *)(v43 + 96) = v54;
  *(_QWORD *)(v43 + 104) = 0;
  *(_QWORD *)(v43 + 112) = 0;
  *(_QWORD *)(v43 + 120) = 0;
  *(_QWORD *)(v43 + 128) = v53;
  *(_QWORD *)(v43 + 136) = v54;
  v55 = v69;
  sub_23AA907B0(v34 + v11[7], v43 + *(int *)(v69 + 48), (uint64_t (*)(_QWORD))type metadata accessor for ItemMetadata);
  sub_23AA724E8(v34 + v11[8], (uint64_t)v73, &qword_2542E5050);
  sub_23AA724E8(v37, (uint64_t)v74, &qword_2542E5050);
  swift_bridgeObjectRetain_n();
  sub_23AAB7E4C(v73, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AA88224);
  sub_23AAB7E4C(v74, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAA5BA4);
  sub_23AA724E8((uint64_t)v73, v37, &qword_2542E5050);
  *(_QWORD *)(v43 + *(int *)(v55 + 64)) = 0;
  v56 = sub_23AC3C0B0();
  v58 = v57;
  sub_23AB3CB34(v34);
  v59 = (uint64_t *)(v43 + *(int *)(v55 + 68));
  *v59 = v56;
  v59[1] = v58;
  v60 = v63;
  sub_23AA724E8(v43, v63, (uint64_t *)&unk_2542E6B00);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v60, 0, 1, v55);
  sub_23AB35900(v65, v60, v42, v66, v67);
  sub_23AA8A05C(v60, (uint64_t *)&unk_2542E4750);
  sub_23AB3CB34((uint64_t)v72);
}

uint64_t sub_23AB38C34(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  id v24;

  swift_beginAccess();
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v13;
  v15 = swift_allocObject();
  swift_weakInit();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = sub_23AAB54E0;
  v16[3] = v14;
  v16[4] = v15;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_23AABE598;
  *(_QWORD *)(v17 + 24) = v16;
  swift_beginAccess();
  *(_QWORD *)(a2 + 16) = sub_23AAB54E0;
  *(_QWORD *)(a2 + 24) = v17;
  swift_retain();
  swift_release();
  swift_beginAccess();
  v19 = *(_QWORD *)(a2 + 16);
  v18 = *(_QWORD *)(a2 + 24);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = v18;
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = a3;
  v21[3] = a4;
  v21[4] = a5;
  v21[5] = a2;
  v21[6] = a1;
  v21[7] = a6;
  v21[8] = a7;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_23AAB54E0;
  *(_QWORD *)(v22 + 24) = v20;
  swift_retain();
  sub_23AAAE668(a3, a4);
  v23 = a5;
  swift_retain();
  swift_retain();
  v24 = a7;
  swift_retain();
  sub_23AA901C4((uint64_t)"enumerateChanges(fromToken:suggestedBatchSize:reply:)", 53, 2, sub_23AB3CE54, v22, (uint64_t)sub_23AB3CE30, (uint64_t)v21);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_23AB38E78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  void (*v50)(_QWORD *);
  void *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  _BYTE *v57;
  uint64_t *v58;
  uint64_t result;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_QWORD *__return_ptr, uint64_t *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  id v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t KeyPath;
  void (*v85)(_BYTE *, uint64_t, uint64_t, uint64_t);
  void *v86;
  unint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  BOOL v97;
  _BYTE *v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  void *v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(_QWORD *, _QWORD);
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _BOOL8 v144;
  uint64_t v145;
  void (*v146)(_QWORD *);
  id v147;
  char isUniquelyReferenced_nonNull_bridgeObject;
  void *v149;
  _BYTE v150[12];
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  void (*v158)(_BYTE *, uint64_t, uint64_t, uint64_t);
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE *v162;
  int v163;
  _QWORD *v164;
  uint64_t v165;
  void (*v166)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v167;
  _BYTE *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179[4];
  _QWORD v180[62];
  _QWORD v181[63];
  _QWORD v182[63];
  uint64_t v183;
  char v184;
  char v185;
  _QWORD v186[69];
  __int128 v187;
  unsigned __int8 v188;
  _QWORD v189[2];
  unsigned __int8 v190;
  uint64_t v191;
  _QWORD v192[2];
  char v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  __int128 v198;
  char v199;
  __int128 v200;
  unsigned __int8 v201;
  __int128 v202;
  char v203;
  __int128 v204;
  unsigned __int8 v205;
  __int128 v206;
  char v207;
  __int128 v208;
  unsigned __int8 v209;
  __int128 v210;
  char v211;
  __int128 v212;
  unsigned __int8 v213;
  _QWORD v214[4];
  char v215;
  _QWORD v216[4];
  char v217;
  _QWORD v218[2];
  char v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  uint64_t v223;
  uint64_t (*v224)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t v225;
  _QWORD v226[2];
  char v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  _QWORD v231[2];
  char v232;
  uint64_t v233;
  unint64_t v234;
  char v235;
  uint64_t v236;
  _QWORD v237[4];
  char v238;
  _QWORD v239[4];
  char v240;
  uint64_t v241;

  v169 = a7;
  v170 = a5;
  v167 = a6;
  v241 = *MEMORY[0x24BDAC8D0];
  v11 = sub_23B1C60EC();
  v165 = *(_QWORD *)(v11 - 8);
  v166 = (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v11;
  MEMORY[0x24BDAC7A8](v11);
  v164 = &v150[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v162 = &v150[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x24BDAC7A8](v14);
  v168 = &v150[-v17];
  MEMORY[0x24BDAC7A8](v16);
  v19 = &v150[-v18];
  v171 = a4 + 16;
  v172 = a4;
  v20 = OBJC_IVAR____TtC9libfssync14FPFSEnumerator_previousAnchor;
  v186[0] = *(_QWORD *)(a3 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_previousAnchor);
  v21 = sub_23AABEE98(v186, &v186[1]);
  v23 = v22 & 0xFFFFFFFFFFFFFFLL;
  v24 = (void *)sub_23B1C5AA4();
  sub_23AAAE53C(v21, v23);
  v25 = sub_23B1C5AD4();
  v27 = v26;

  sub_23AAAE6AC(a1, a2);
  LOBYTE(a2) = v28;
  sub_23AAAE53C(v25, v27);
  if ((a2 & 1) == 0)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    sub_23B1C5F54();
    swift_release();
    swift_release();
    v46 = v186[0];
    *(_QWORD *)(a3 + v20) = v186[0];
    swift_getKeyPath();
    swift_getKeyPath();
    sub_23B1C5F54();
    swift_release();
    swift_release();
    if (v46 >= v186[0])
    {
      v47 = sub_23AAB786C(MEMORY[0x24BEE4AF8]);
      v48 = (unint64_t *)(a3 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_changedItemsByID);
      swift_beginAccess();
      *v48 = v47;
      swift_bridgeObjectRelease();
      v49 = (_QWORD *)(a3 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_deletedItemsIDs);
      swift_beginAccess();
      *v49 = MEMORY[0x24BEE4B08];
      swift_bridgeObjectRelease();
    }
    swift_beginAccess();
    v50 = *(void (**)(_QWORD *))(v172 + 16);
    type metadata accessor for NSFileProviderError(0);
    v186[66] = -1002;
    swift_retain();
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&unk_2542E1E60, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderError, (uint64_t)&unk_23B1CC9C0);
    sub_23B1C5864();
    v51 = (void *)v180[0];
    v239[0] = v180[0];
    memset(&v239[1], 0, 24);
    v240 = 1;
    v52 = v239;
    goto LABEL_14;
  }
  v161 = v20;
  v29 = *(_QWORD *)(a3 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID);
  v30 = *(unsigned __int8 *)(a3 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8);
  v31 = (uint64_t *)(a3 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_changedItemsByID);
  swift_beginAccess();
  v32 = *v31;
  v33 = *(_QWORD *)(*v31 + 16);
  v34 = a3;
  v163 = v30;
  if (v33 && (v35 = sub_23AA97254(v29, v30), (v36 & 1) != 0))
  {
    v37 = v35;
    v38 = v31;
    v39 = *(_QWORD *)(v32 + 56);
    v40 = v29;
    v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
    v42 = *(_QWORD *)(v41 - 8);
    v43 = v39 + *(_QWORD *)(v42 + 72) * v37;
    v31 = v38;
    sub_23AA8EFC8(v43, (uint64_t)v19, (uint64_t *)&unk_2542E6B00);
    v44 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v42 + 56);
    v34 = a3;
    v45 = v41;
    v29 = v40;
    v44(v19, 0, 1, v45);
  }
  else
  {
    v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v19, 1, 1, v53);
  }
  v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  v55 = *(_QWORD *)(v54 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v55 + 48))(v19, 1, v54))
  {
    sub_23AA8A05C((uint64_t)v19, (uint64_t *)&unk_2542E4750);
    v56 = v163;
  }
  else
  {
    v57 = &v19[*(int *)(v54 + 48)];
    LOBYTE(v57) = v57[*(int *)(type metadata accessor for ItemMetadata() + 64)];
    sub_23AA8A05C((uint64_t)v19, (uint64_t *)&unk_2542E4750);
    v56 = v163;
    if ((v57 & 1) != 0)
    {
LABEL_13:
      swift_beginAccess();
      v50 = *(void (**)(_QWORD *))(v172 + 16);
      type metadata accessor for NSFileProviderError(0);
      v181[0] = -1002;
      swift_retain();
      sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
      sub_23AA7E38C((unint64_t *)&unk_2542E1E60, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderError, (uint64_t)&unk_23B1CC9C0);
      sub_23B1C5864();
      v51 = (void *)v182[0];
      v214[0] = v182[0];
      memset(&v214[1], 0, 24);
      v215 = 1;
      v52 = v214;
LABEL_14:
      v50(v52);

      return swift_release();
    }
  }
  v58 = (uint64_t *)(v34 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_deletedItemsIDs);
  swift_beginAccess();
  if ((sub_23AAB67F0(v29, v56, *v58) & 1) != 0)
    goto LABEL_13;
  v60 = *v31;
  if (*(_QWORD *)(*v31 + 16) && (v61 = sub_23AA97254(v29, v56), (v62 & 1) != 0))
  {
    v63 = *(_QWORD *)(v60 + 56) + *(_QWORD *)(v55 + 72) * v61;
    v64 = (uint64_t)v168;
    sub_23AA8EFC8(v63, (uint64_t)v168, (uint64_t *)&unk_2542E6B00);
    v158 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v55 + 56);
    v158((_BYTE *)v64, 0, 1, v54);
    sub_23AA8A05C(v64, (uint64_t *)&unk_2542E4750);
    v65 = *(uint64_t **)(*(_QWORD *)(v170 + 16) + 16);
    v183 = v29;
    v184 = v56;
    v185 = 0;
    v66 = *v65;
    v153 = v55;
    v67 = v29;
    v68 = *(void (**)(_QWORD *__return_ptr, uint64_t *, uint64_t))(v66 + 168);
    swift_retain();
    v69 = v173;
    v68(v186, &v183, 1);
    v173 = v69;
    if (v69)
      return swift_release();
    sub_23AA724E8((uint64_t)v186, (uint64_t)v181, (uint64_t *)&unk_2542E4CB0);
    sub_23AA724E8((uint64_t)v181, (uint64_t)v182, (uint64_t *)&unk_2542E4CB0);
    if (sub_23AAFC2A4((uint64_t)v182) == 1)
    {
      swift_release();
    }
    else
    {
      swift_release();
      memcpy(v180, v186, sizeof(v180));
      sub_23AAFC3AC((uint64_t)v180);
      if ((v180[2] & 0x10) != 0)
      {
        swift_beginAccess();
        v50 = *(void (**)(_QWORD *))(v172 + 16);
        type metadata accessor for NSFileProviderError(0);
        v174 = -1002;
        swift_retain();
        sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
        sub_23AA7E38C((unint64_t *)&unk_2542E1E60, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderError, (uint64_t)&unk_23B1CC9C0);
        sub_23B1C5864();
        v51 = v175;
        v237[0] = v175;
        memset(&v237[1], 0, 24);
        v238 = 1;
        v52 = v237;
        goto LABEL_14;
      }
    }
    v29 = v67;
    v55 = v153;
  }
  else
  {
    v70 = (uint64_t)v168;
    v158 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v55 + 56);
    v158(v168, 1, 1, v54);
    sub_23AA8A05C(v70, (uint64_t *)&unk_2542E4750);
  }
  v71 = *(_QWORD *)(*v31 + 16);
  v72 = 900;
  if (v71 < 0x384)
    v72 = *(_QWORD *)(*v31 + 16);
  v157 = *(_QWORD *)(*v31 + 16);
  if ((uint64_t)v71 >= v167)
    v71 = v167;
  if (v167 <= 900)
    v73 = v71;
  else
    v73 = v72;
  v74 = (void *)MEMORY[0x23B8615C4](&v169[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain]);
  v155 = v58;
  v159 = v34;
  v160 = v29;
  if (v74)
  {
    v75 = v74;
    v76 = v55;
    v77 = objc_msgSend(v74, sel_indexer);

    if (v77)
    {
      v78 = objc_msgSend(v77, sel_needsAuthentication);

      v79 = 8;
      if (!v78)
        v79 = 0;
      v154 = v79;
    }
    else
    {
      v154 = 0;
    }
    v55 = v76;
  }
  else
  {
    v154 = 0;
  }
  v156 = v31;
  v80 = *v31;
  swift_bridgeObjectRetain();
  v167 = v73;
  sub_23AB3CE5C(v73, v80, (uint64_t)&v187);
  v152 = *((_QWORD *)&v187 + 1);
  v153 = v187;
  v151 = v188;
  v168 = v189;
  v81 = v189[0];
  v82 = v189[1];
  v83 = v190;
  KeyPath = v191;
  swift_bridgeObjectRelease();
  v85 = v158;
  if (*(_BYTE *)(v159 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_buildAndFilterAppLibraries) == 1)
  {
    v163 = v83;
    v54 = v170;
    v86 = *(void **)(*(_QWORD *)(v170 + 16) + 64);
    v87 = (unint64_t)v164;
    v88 = v165;
    *v164 = v86;
    v85 = v166;
    (*(void (**)(unint64_t, _QWORD, void (*)(_BYTE *, uint64_t, uint64_t, uint64_t)))(v88 + 104))(v87, *MEMORY[0x24BEE5610], v166);
    v89 = v86;
    LOBYTE(v86) = sub_23B1C6104();
    (*(void (**)(unint64_t, void (*)(_BYTE *, uint64_t, uint64_t, uint64_t)))(v88 + 8))(v87, v85);
    if ((v86 & 1) == 0)
    {
      __break(1u);
      goto LABEL_107;
    }
    v204 = v187;
    v205 = v188;
    v202 = *(_OWORD *)v168;
    v203 = v168[16];
    v177 = v191;
    v231[0] = v153;
    v231[1] = v152;
    v232 = v151;
    v233 = v81;
    v234 = v82;
    v235 = v163;
    v236 = KeyPath;
    swift_retain();
    sub_23AAB7580((uint64_t)&v204);
    sub_23AAB7580((uint64_t)&v202);
    sub_23AAB7528((uint64_t)&v177);
    v90 = v173;
    v91 = sub_23AAB6ED8((uint64_t)v231, v54, 0xA000000000000012);
    v54 = v90;
    swift_release();
    sub_23AAB7550((uint64_t)&v204);
    sub_23AAB7550((uint64_t)&v202);
    sub_23AAB7500((uint64_t)&v177);
    if (v90)
    {
      sub_23AAB7550((uint64_t)&v204);
      sub_23AAB7550((uint64_t)&v202);
      return sub_23AAB7500((uint64_t)&v177);
    }
    v182[0] = v91;
    v82 = v159;
    v102 = v156;
    v81 = v167;
    while (1)
    {
LABEL_66:
      if (v81 < v157)
      {
        v103 = *v102;
        v85 = (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))sub_23AAB7928(*v102);
        v82 = (unint64_t)v102;
        KeyPath = v104;
        v106 = v105 & 1;
        v87 = sub_23AB3A644((uint64_t)v85, v104, v105 & 1, v81, v103);
        v108 = v107;
        v81 = v109;
        sub_23AB3D0AC((uint64_t)v85, KeyPath, v106);
        if ((v81 & 1) != 0)
        {
          __break(1u);
LABEL_116:
          result = swift_unexpectedError();
          __break(1u);
          return result;
        }
        v110 = *(_QWORD *)v82;
        v111 = *(unsigned int *)(*(_QWORD *)v82 + 36);
        if ((_DWORD)v111 != (_DWORD)v108)
        {
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
          goto LABEL_110;
        }
        v173 = v54;
        v112 = 1 << *(_BYTE *)(v110 + 32);
        if (v112 < (uint64_t)v87)
          goto LABEL_109;
        v226[0] = v87;
        v226[1] = v108;
        v227 = 0;
        v228 = v112;
        v229 = v111;
        v230 = 0;
        sub_23AAB671C((uint64_t)v226, v110, (uint64_t)v192);
        v113 = v192[1];
        v114 = v193;
        v115 = v194;
        v116 = v195;
        v117 = v196;
        v118 = v197;
        v119 = v192[0];
        if (sub_23AEA7414())
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_2542E3650);
          v120 = sub_23B1C70AC();
        }
        else
        {
          v120 = MEMORY[0x24BEE4B00];
        }
        v218[0] = v119;
        v218[1] = v113;
        v219 = v114;
        v220 = v115;
        v221 = v116;
        v222 = v117;
        v223 = v118;
        v224 = sub_23AB3A794;
        v225 = 0;
        v186[0] = v120;
        sub_23AAB75B0(v119, v113, v114);
        sub_23AAB75B0(v115, v116, v117);
        swift_bridgeObjectRetain();
        sub_23AAB75B0(v119, v113, v114);
        sub_23AAB75B0(v115, v116, v117);
        swift_bridgeObjectRetain();
        v131 = v173;
        sub_23AB3B520((uint64_t)v218, 1, v186);
        if (v131)
          goto LABEL_116;
        sub_23AB3D0AC(v119, v113, v114);
        sub_23AB3D0AC(v115, v116, v117);
        swift_bridgeObjectRelease();
        *v156 = v186[0];
        swift_bridgeObjectRelease();
        sub_23AB3D0AC(v119, v113, v114);
        sub_23AB3D0AC(v115, v116, v117);
        swift_bridgeObjectRelease();
        v54 = 0;
        v82 = v159;
        v81 = v167;
      }
      v132 = v169;
      v133 = swift_bridgeObjectRetain();
      v87 = sub_23AB3D0B8(v133, (uint64_t)v132);
      v85 = (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v54;
      swift_bridgeObjectRelease();

      if (v81 >= v157)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        sub_23B1C5F54();
        swift_release();
        swift_release();
        v139 = v186[0];
        *(_QWORD *)(v82 + v161) = v186[0];
        swift_getKeyPath();
        swift_getKeyPath();
        sub_23B1C5F54();
        swift_release();
        swift_release();
        if (v139 >= v186[0])
          goto LABEL_97;
        goto LABEL_98;
      }
      v81 = v161;
      v134 = *(_QWORD *)(v82 + v161);
      swift_getKeyPath();
      KeyPath = swift_getKeyPath();
      sub_23B1C5F54();
      swift_release();
      swift_release();
      if (!v186[0])
        goto LABEL_108;
      if (v134 == v186[0] - 1)
      {
        KeyPath = swift_getKeyPath();
        swift_getKeyPath();
        v135 = (void (*)(_QWORD *, _QWORD))sub_23B1C5F48();
        if (*v136 == -1)
          goto LABEL_113;
        ++*v136;
        v135(v186, 0);
        swift_release();
        swift_release();
      }
      v137 = *(_QWORD *)(v82 + v81);
      v138 = v137 + 1;
      if (v137 != -1)
      {
        *(_QWORD *)(v82 + v81) = v138;
        swift_getKeyPath();
        swift_getKeyPath();
        sub_23B1C5F54();
        swift_release();
        swift_release();
        if (v138 < v186[0])
          goto LABEL_98;
LABEL_97:
        v140 = sub_23AAB786C(MEMORY[0x24BEE4AF8]);
        *v156 = v140;
        swift_bridgeObjectRelease();
        *v155 = MEMORY[0x24BEE4B08];
        swift_bridgeObjectRelease();
LABEL_98:
        v141 = v182[0];
        v142 = swift_bridgeObjectRetain();
        sub_23AA88520(v142);
        v143 = (uint64_t)v168;
        v144 = v167 < v157;
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v145 = *(_QWORD *)(v82 + v161);
        v146 = *(void (**)(_QWORD *))(v172 + 16);
        v216[0] = v141;
        v216[1] = v87;
        v216[2] = v144;
        v216[3] = v145;
        v217 = 0;
        swift_retain();
        swift_bridgeObjectRetain();
        v146(v216);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v200 = v187;
        v201 = v188;
        sub_23AAB7550((uint64_t)&v200);
        v198 = *(_OWORD *)v143;
        v199 = *(_BYTE *)(v143 + 16);
        sub_23AAB7550((uint64_t)&v198);
        v176 = v191;
        sub_23AAB7500((uint64_t)&v176);
        return swift_bridgeObjectRelease();
      }
LABEL_110:
      __break(1u);
LABEL_111:
      v121 = (id)MEMORY[0x23B85F860](v87, v82);
LABEL_77:
      v122 = v121;
      v123 = *v156;
      if (*(_QWORD *)(*v156 + 16) && (v124 = sub_23AA97254(v160, v163), (v125 & 1) != 0))
      {
        v126 = *(_QWORD *)(v123 + 56) + *(_QWORD *)(v153 + 72) * v124;
        v127 = v162;
        sub_23AA8EFC8(v126, (uint64_t)v162, (uint64_t *)&unk_2542E6B00);
        v128 = 0;
      }
      else
      {
        v128 = 1;
        v127 = v162;
      }
      v85(v127, v128, 1, v54);
      v129 = sub_23AEC4DA4(v122, (uint64_t)v127, v170);
      v130 = (uint64_t)v127;
      v54 = KeyPath;
      if (KeyPath)
      {
        sub_23AA8A05C((uint64_t)v127, (uint64_t *)&unk_2542E4750);

        v208 = v187;
        v209 = v188;
        sub_23AAB7550((uint64_t)&v208);
        v206 = *(_OWORD *)v168;
        v207 = v168[16];
        sub_23AAB7550((uint64_t)&v206);
        v178 = v191;
        sub_23AAB7500((uint64_t)&v178);
        return swift_bridgeObjectRelease();
      }
      v147 = v129;
      sub_23AA8A05C(v130, (uint64_t *)&unk_2542E4750);
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      v182[0] = v82;
      if ((isUniquelyReferenced_nonNull_bridgeObject & 1) == 0
        || (v82 & 0x8000000000000000) != 0
        || (v82 & 0x4000000000000000) != 0)
      {
        sub_23B05222C(v82);
      }
      v102 = v156;
      if (v87 >= *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_114;
      v149 = *(void **)((v82 & 0xFFFFFFFFFFFFFF8) + 8 * v87 + 0x20);
      *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFF8) + 8 * v87 + 0x20) = v147;

      sub_23B1C671C();
      v82 = v159;
    }
  }
  v153 = v55;
  v92 = v173;
  v93 = sub_23AB3A1E8((uint64_t)&v187);
  v94 = v93;
  KeyPath = v92;
  v95 = *(_QWORD *)(v93 + 16);
  if (!v95)
  {
LABEL_60:
    v87 = 0;
    LODWORD(v173) = 1;
    goto LABEL_61;
  }
  v87 = 0;
  v96 = v163 == 2;
  v97 = v160 == 1 && v163 == 2;
  if (v160)
    v96 = 0;
  v98 = (_BYTE *)(((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80))
                + v93
                + 8);
  while (1)
  {
    v99 = *((_QWORD *)v98 - 1);
    if (!*v98)
      break;
    if (*v98 == 1)
    {
      if (v163 == 1 && v99 == v160)
        goto LABEL_59;
    }
    else if (v99)
    {
      if (v97)
        goto LABEL_59;
    }
    else if (v96)
    {
      goto LABEL_59;
    }
LABEL_48:
    v98 += *(_QWORD *)(v153 + 72);
    if (v95 == ++v87)
      goto LABEL_60;
  }
  if (v163 || (_DWORD)v99 != (_DWORD)v160)
    goto LABEL_48;
LABEL_59:
  LODWORD(v173) = 0;
LABEL_61:
  v100 = (int *)sub_23AAF7AC0(MEMORY[0x24BEE4AF8]);
  v101 = v170;
  swift_retain();
  v82 = sub_23AB3CF9C(v94, v101, v100);
  swift_release();
  sub_23AABDF04(v82, v154 | 1);
  if (!v92)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v182[0] = v82;
    if ((v173 & 1) != 0)
    {
      v54 = 0;
      v102 = v156;
      v81 = v167;
      v82 = v159;
      goto LABEL_66;
    }
    v81 = v167;
    if ((v82 & 0xC000000000000001) != 0)
      goto LABEL_111;
    if (v87 < *(_QWORD *)((v82 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v121 = *(id *)(v82 + 8 * v87 + 32);
      goto LABEL_77;
    }
    __break(1u);
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
  }
  swift_bridgeObjectRelease();
  v212 = v187;
  v213 = v188;
  sub_23AAB7550((uint64_t)&v212);
  v210 = *(_OWORD *)v168;
  v211 = v168[16];
  sub_23AAB7550((uint64_t)&v210);
  v179[0] = v191;
  sub_23AAB7500((uint64_t)v179);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AB3A1E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E2358);
  v3 = MEMORY[0x24BDAC7A8](v58);
  v57 = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v56 = (char *)v47 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v55 = (_QWORD *)((char *)v47 - v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(unsigned __int8 *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(unsigned __int8 *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v62 = v12;
  v63 = v14;
  v59 = v15;
  v60 = v16;
  v61 = v17;
  v19 = sub_23AEA7414();
  v20 = MEMORY[0x24BEE4AF8];
  if (!v19)
    return v20;
  v21 = v19;
  v67 = MEMORY[0x24BEE4AF8];
  result = sub_23ADACDB0(0, v19 & ~(v19 >> 63), 0);
  if (v21 < 0)
  {
LABEL_39:
    __break(1u);
  }
  else
  {
    v47[1] = v1;
    v23 = v62;
    result = sub_23AAB75B0(v62, v13, v63);
    v24 = 0;
    v25 = v18 + 64;
    v48 = v18 + 80;
    v49 = v21;
    v53 = v18;
    v54 = v9;
    v50 = v13;
    v51 = v18 + 64;
    v52 = v11;
    while ((v63 & 1) == 0)
    {
      if (v23 < v62)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      if ((v61 & 1) != 0)
        goto LABEL_41;
      if ((_DWORD)v13 != (_DWORD)v60)
        goto LABEL_31;
      if (v23 >= v59)
        goto LABEL_32;
      if (v23 < 0 || v23 >= 1 << *(_BYTE *)(v18 + 32))
        goto LABEL_33;
      v28 = (unint64_t)v23 >> 6;
      if ((*(_QWORD *)(v25 + 8 * ((unint64_t)v23 >> 6)) & (1 << v23)) == 0)
        goto LABEL_34;
      if (*(_DWORD *)(v18 + 36) != (_DWORD)v13)
        goto LABEL_35;
      v64 = v24;
      v65 = 1 << v23;
      v29 = v58;
      v30 = (uint64_t)v56;
      v31 = (uint64_t)&v56[*(int *)(v58 + 48)];
      v32 = *(_QWORD *)(v18 + 56);
      v33 = *(_QWORD *)(v18 + 48) + 16 * v23;
      v34 = *(_QWORD *)v33;
      v35 = *(_BYTE *)(v33 + 8);
      v66 = *(_QWORD *)(v9 + 72);
      sub_23AA8EFC8(v32 + v66 * v23, v31, (uint64_t *)&unk_2542E6B00);
      *(_QWORD *)v30 = v34;
      *(_BYTE *)(v30 + 8) = v35;
      v36 = (uint64_t)v55;
      *v55 = v34;
      *(_BYTE *)(v36 + 8) = v35;
      sub_23AA8EFC8(v31, v36 + *(int *)(v29 + 48), (uint64_t *)&unk_2542E6B00);
      sub_23AA8A05C(v30, &qword_2542E2358);
      sub_23AA724E8(v36, v30, &qword_2542E2358);
      v37 = *(int *)(v29 + 48);
      v38 = (uint64_t)v52;
      v39 = (uint64_t)&v57[v37];
      sub_23AA8EFC8(v30 + v37, (uint64_t)&v57[v37], (uint64_t *)&unk_2542E6B00);
      sub_23AA724E8(v39, v38, (uint64_t *)&unk_2542E6B00);
      sub_23AA8A05C(v30, &qword_2542E2358);
      v20 = v67;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23ADACDB0(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v67;
      }
      v41 = *(_QWORD *)(v20 + 16);
      v40 = *(_QWORD *)(v20 + 24);
      v9 = v54;
      if (v41 >= v40 >> 1)
      {
        sub_23ADACDB0(v40 > 1, v41 + 1, 1);
        v20 = v67;
      }
      *(_QWORD *)(v20 + 16) = v41 + 1;
      result = sub_23AA724E8(v38, v20+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ v41 * v66, (uint64_t *)&unk_2542E6B00);
      v18 = v53;
      v26 = 1 << *(_BYTE *)(v53 + 32);
      if (v23 >= v26)
        goto LABEL_36;
      v25 = v51;
      v42 = *(_QWORD *)(v51 + 8 * v28);
      if ((v42 & v65) == 0)
        goto LABEL_37;
      LODWORD(v13) = v50;
      if (*(_DWORD *)(v53 + 36) != (_DWORD)v50)
        goto LABEL_38;
      v43 = v42 & (-2 << (v23 & 0x3F));
      if (v43)
      {
        v26 = __clz(__rbit64(v43)) | v23 & 0xFFFFFFFFFFFFFFC0;
        v27 = v49;
      }
      else
      {
        v44 = v28 + 1;
        v45 = (unint64_t)(v26 + 63) >> 6;
        v27 = v49;
        if (v28 + 1 < v45)
        {
          v46 = *(_QWORD *)(v51 + 8 * v44);
          if (v46)
          {
LABEL_28:
            v26 = __clz(__rbit64(v46)) + (v44 << 6);
          }
          else
          {
            while (v45 - 2 != v28)
            {
              v46 = *(_QWORD *)(v48 + 8 * v28++);
              if (v46)
              {
                v44 = v28 + 1;
                goto LABEL_28;
              }
            }
          }
        }
      }
      v24 = v64 + 1;
      v23 = v26;
      if (v64 + 1 == v27)
        return v20;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_23AB3A644(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  if (a4 < 0)
    goto LABEL_25;
  if (!a4)
  {
    v11 = result;
LABEL_22:
    sub_23AAB75B0(result, a2, a3 & 1);
    return v11;
  }
  v5 = 0;
  v6 = a5 + 64;
  v7 = 1 << *(_BYTE *)(a5 + 32);
  v8 = *(_DWORD *)(a5 + 36);
  v9 = (unint64_t)(v7 + 63) >> 6;
  v10 = a5 + 88;
  v11 = result;
  v12 = a2;
  while ((v11 & 0x8000000000000000) == 0 && (uint64_t)v11 < v7)
  {
    if (v12 != v8)
      goto LABEL_24;
    v13 = v11 >> 6;
    v14 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
    if ((v14 & (1 << v11)) == 0)
      goto LABEL_24;
    v15 = v14 & (-2 << (v11 & 0x3F));
    if (v15)
    {
      v11 = __clz(__rbit64(v15)) | v11 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v16 = v13 + 1;
      v11 = v7;
      if (v13 + 1 < v9)
      {
        v17 = *(_QWORD *)(v6 + 8 * v16);
        if (!v17)
        {
          v16 = v13 + 2;
          v11 = v7;
          if (v13 + 2 >= v9)
            goto LABEL_5;
          v17 = *(_QWORD *)(v6 + 8 * v16);
          if (!v17)
          {
            while (v9 - 3 != v13)
            {
              v17 = *(_QWORD *)(v10 + 8 * v13++);
              if (v17)
              {
                v16 = v13 + 2;
                goto LABEL_13;
              }
            }
            v11 = v7;
            goto LABEL_5;
          }
        }
LABEL_13:
        v11 = __clz(__rbit64(v17)) + (v16 << 6);
      }
    }
LABEL_5:
    ++v5;
    v12 = v8;
    if (v5 == a4)
      goto LABEL_22;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_23AB3A794@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E2358);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v18 - v8;
  v10 = a2 + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E18) + 48);
  v11 = *(int *)(v4 + 48);
  v12 = (uint64_t)&v9[v11];
  v13 = (uint64_t)a1 + v11;
  v14 = *a1;
  v15 = *((_BYTE *)a1 + 8);
  *(_QWORD *)v9 = *a1;
  v9[8] = v15;
  sub_23AA8EFC8((uint64_t)a1 + v11, (uint64_t)&v9[v11], (uint64_t *)&unk_2542E6B00);
  *(_QWORD *)a2 = v14;
  *(_BYTE *)(a2 + 8) = v15;
  v16 = (uint64_t)&v7[*(int *)(v4 + 48)];
  sub_23AA8EFC8(v13, v16, (uint64_t *)&unk_2542E6B00);
  sub_23AA724E8(v16, v10, (uint64_t *)&unk_2542E6B00);
  return sub_23AA8A05C(v12, (uint64_t *)&unk_2542E6B00);
}

uint64_t sub_23AB3A8B4(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t result;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD v23[2];
  char *v24;

  v3 = sub_23B1C60EC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (_QWORD *)((char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(*(_QWORD *)(a1 + 16) + 64);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE5610], v3);
  v8 = v7;
  LOBYTE(v7) = sub_23B1C6104();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  v10 = v1;
  v11 = sub_23B1C5E40();
  v12 = sub_23B1C6A94();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v13 = 138412290;
    v24 = v10;
    v15 = v10;
    sub_23B1C6CBC();
    *v14 = v10;

    _os_log_impl(&dword_23AA66000, v11, v12, "📖  reset stream for %@", v13, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v14, -1, -1);
    MEMORY[0x23B8614BC](v13, -1, -1);
  }
  else
  {

  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_23B1C5F54();
  swift_release();
  result = swift_release();
  v16 = v24 + 1;
  if (v24 == (char *)-1)
    goto LABEL_10;
  v17 = OBJC_IVAR____TtC9libfssync14FPFSEnumerator_previousAnchor;
  *(_QWORD *)&v10[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_previousAnchor] = v16;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_23B1C5F54();
  swift_release();
  swift_release();
  if (v16 >= v24)
  {
    v18 = sub_23AAB786C(MEMORY[0x24BEE4AF8]);
    v19 = (unint64_t *)&v10[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_changedItemsByID];
    swift_beginAccess();
    *v19 = v18;
    swift_bridgeObjectRelease();
    v20 = &v10[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_deletedItemsIDs];
    swift_beginAccess();
    *(_QWORD *)v20 = MEMORY[0x24BEE4B08];
    swift_bridgeObjectRelease();
  }
  v21 = *(_QWORD *)&v10[v17];
  swift_getKeyPath();
  swift_getKeyPath();
  v23[1] = v21;
  v22 = v10;
  return sub_23B1C5F60();
}

void sub_23AB3ABF8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  id v16;
  const void *v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v1 = sub_23B1C602C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23B1C60A4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x23B8615C4](&v0[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_backend]);
  if (v9)
  {
    v10 = (char *)v9;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v0;
    v12 = &v10[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain];
    v24 = (id)MEMORY[0x23B8615C4](&v10[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain]);
    v13 = v0;
    if (v24)
    {
      if (objc_msgSend(v24, sel_unableToStartup))
      {

        swift_release();
        return;
      }

    }
    if ((v10[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_started] & 1) == 0)
    {
      v14 = (void *)MEMORY[0x23B8615C4](v12);
      if (v14)
      {
        v15 = v14;
        v24 = objc_msgSend(v14, sel_serialQueue);

        aBlock[4] = nullsub_1;
        aBlock[5] = 0;
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 1107296256;
        aBlock[2] = sub_23AA698FC;
        aBlock[3] = &block_descriptor_0;
        v23 = _Block_copy(aBlock);
        sub_23B1C6068();
        v25 = MEMORY[0x24BEE4AF8];
        v22 = sub_23AA7E38C((unint64_t *)&unk_2542E43B0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E7470);
        sub_23AAB5A28((unint64_t *)&qword_2542E7480, (uint64_t *)&unk_2542E7470, MEMORY[0x24BEE12C8]);
        sub_23B1C6DE8();
        v17 = v23;
        v16 = v24;
        MEMORY[0x23B85F470](0, v8, v4, v23);
        _Block_release(v17);

        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
    }
    v18 = *(void **)&v10[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log];
    v19 = *(void **)&v10[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue];
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = v10;
    v20[3] = nullsub_1;
    v20[4] = 0;
    v20[5] = sub_23AB3B39C;
    v20[6] = v11;
    v21 = v10;
    swift_retain();
    sub_23AA81A30((uint64_t)"reset()", 7, 2, v18, v19, (uint64_t)sub_23AA852F8, (uint64_t)v20);

    swift_release();
    swift_release();
  }
}

uint64_t sub_23AB3AF54(uint64_t a1, void *a2)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;

  v4 = sub_23B1C5E40();
  v5 = sub_23B1C6A94();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_23AA66000, v4, v5, "📖  requested to reset stream", v6, 2u);
    MEMORY[0x23B8614BC](v6, -1, -1);
  }

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a1;
  v8 = a2;
  swift_retain();
  sub_23AA901C4((uint64_t)"reset()", 7, 2, nullsub_1, 0, (uint64_t)sub_23AB3B404, v7);
  return swift_release();
}

uint64_t sub_23AB3B0AC()
{
  uint64_t v0;

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  sub_23AA96F18(*(_QWORD *)(v0 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID), *(_BYTE *)(v0 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_vfsItemID + 8));
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC9libfssync14FPFSEnumerator_lifetimeExtender), sel_requestEffectivePID);
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0x3A736670663CLL;
}

void sub_23AB3B1E4()
{
  unint64_t v0;
  unint64_t v1;

  sub_23B1C5E4C();
  if (v0 <= 0x3F)
  {
    sub_23AB3B2D4();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

void sub_23AB3B2D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2542E43A8)
  {
    v0 = sub_23B1C5F6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2542E43A8);
  }
}

uint64_t sub_23AB3B328()
{
  if (MEMORY[0x24BEE4F18])
    return __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E77E0);
  else
    return MEMORY[0x24BEE4AE0] + 8;
}

uint64_t sub_23AB3B350()
{
  return swift_unknownObjectRetain();
}

void (*sub_23AB3B360(uint64_t (*a1)(uint64_t)))(uint64_t *, _QWORD)
{
  return sub_23AB342D0(a1);
}

uint64_t sub_23AB3B378()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_23AB3B39C(uint64_t a1)
{
  uint64_t v1;

  return sub_23AB3AF54(a1, *(void **)(v1 + 16));
}

uint64_t sub_23AB3B3A4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AB3B3D8()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AB3B404()
{
  uint64_t v0;

  return sub_23AB3A8B4(*(_QWORD *)(v0 + 24));
}

uint64_t sub_23AB3B430@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_23B1C5F54();
  swift_release();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_23AB3B4AC(uint64_t a1, void **a2)
{
  void *v2;
  id v3;

  v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  v3 = v2;
  return sub_23B1C5F60();
}

void sub_23AB3B520(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  _QWORD *v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  char v64;
  char v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[12];
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  _QWORD *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  id v99;

  v80 = a3;
  v71 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  v82 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v79 = &v70[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2370);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v70[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_BYTE *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(unsigned __int8 *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 64);
  v87 = v9;
  v88 = v10;
  v89 = v11;
  v90 = v12;
  v91 = v13;
  v92 = v14;
  v93 = v16;
  v94 = v9;
  v95 = v10;
  v96 = v11;
  v97 = v15;
  v98 = v17;
  sub_23AAB75B0(v9, v10, v11);
  v72 = v9;
  v18 = v9;
  v19 = (uint64_t)v79;
  v73 = v10;
  v20 = v10;
  v21 = v80;
  sub_23AAB75B0(v18, v20, v11);
  v76 = v12;
  v75 = v13;
  v74 = v14;
  sub_23AAB75B0(v12, v13, v14);
  v78 = v16;
  swift_bridgeObjectRetain();
  v77 = v17;
  swift_retain();
  sub_23AB3BD60((uint64_t)v8);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E18);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v8, 1, v22) == 1)
    goto LABEL_2;
  v29 = (uint64_t)&v8[*(int *)(v22 + 48)];
  v31 = v8[8];
  v85 = *(_QWORD *)v8;
  v30 = v85;
  v86 = v31;
  sub_23AA724E8(v29, v19, (uint64_t *)&unk_2542E6B00);
  v32 = (_QWORD *)*v21;
  v34 = sub_23AA97254(v30, v31);
  v35 = v32[2];
  v36 = (v33 & 1) == 0;
  v37 = v35 + v36;
  if (__OFADD__(v35, v36))
    goto LABEL_22;
  v38 = v33;
  if (v32[3] >= v37)
  {
    if ((v71 & 1) != 0)
    {
      if ((v33 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_23B186830();
      if ((v38 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v49 = (_QWORD *)*v21;
    *(_QWORD *)(*v21 + 8 * (v34 >> 6) + 64) |= 1 << v34;
    v50 = v49[6] + 16 * v34;
    *(_QWORD *)v50 = v30;
    *(_BYTE *)(v50 + 8) = v31;
    sub_23AA724E8(v19, v49[7] + *(_QWORD *)(v82 + 72) * v34, (uint64_t *)&unk_2542E6B00);
    v51 = v49[2];
    v52 = __OFADD__(v51, 1);
    v53 = v51 + 1;
    if (v52)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    v49[2] = v53;
    sub_23AB3BD60((uint64_t)v8);
    v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E18);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48))(v8, 1, v54) == 1)
    {
LABEL_2:
      sub_23AB3D0AC(v72, v73, v11);
      sub_23AB3D0AC(v76, v75, v74);
      swift_release();
      swift_bridgeObjectRelease();
      v23 = v90;
      v24 = v91;
      v25 = v92;
      v26 = v94;
      v27 = v95;
      v28 = v96;
      sub_23AB3D0AC(v87, v88, v89);
      sub_23AB3D0AC(v23, v24, v25);
      swift_bridgeObjectRelease();
      sub_23AB3D0AC(v26, v27, v28);
      swift_release();
      return;
    }
    while (1)
    {
      v55 = (uint64_t)&v8[*(int *)(v54 + 48)];
      v57 = v8[8];
      v85 = *(_QWORD *)v8;
      v56 = v85;
      v86 = v57;
      sub_23AA724E8(v55, v19, (uint64_t *)&unk_2542E6B00);
      v58 = (_QWORD *)*v21;
      v59 = sub_23AA97254(v56, v57);
      v61 = v58[2];
      v62 = (v60 & 1) == 0;
      v52 = __OFADD__(v61, v62);
      v63 = v61 + v62;
      if (v52)
        break;
      v64 = v60;
      if (v58[3] < v63)
      {
        sub_23AD105C4(v63, 1);
        v59 = sub_23AA97254(v56, v57);
        if ((v64 & 1) != (v65 & 1))
          goto LABEL_24;
      }
      if ((v64 & 1) != 0)
        goto LABEL_10;
      v66 = (_QWORD *)*v21;
      *(_QWORD *)(*v21 + 8 * (v59 >> 6) + 64) |= 1 << v59;
      v67 = v66[6] + 16 * v59;
      *(_QWORD *)v67 = v56;
      *(_BYTE *)(v67 + 8) = v57;
      sub_23AA724E8(v19, v66[7] + *(_QWORD *)(v82 + 72) * v59, (uint64_t *)&unk_2542E6B00);
      v68 = v66[2];
      v52 = __OFADD__(v68, 1);
      v69 = v68 + 1;
      if (v52)
        goto LABEL_23;
      v66[2] = v69;
      sub_23AB3BD60((uint64_t)v8);
      v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E18);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48))(v8, 1, v54) == 1)
        goto LABEL_2;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  sub_23AD105C4(v37, v71 & 1);
  v39 = sub_23AA97254(v30, v31);
  if ((v38 & 1) != (v40 & 1))
  {
LABEL_24:
    sub_23B1C7418();
    __break(1u);
    goto LABEL_25;
  }
  v34 = v39;
  if ((v38 & 1) == 0)
    goto LABEL_13;
LABEL_10:
  v41 = (void *)swift_allocError();
  swift_willThrow();
  v99 = v41;
  v81 = v41;
  v42 = v41;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE880);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_23AB3D0AC(v72, v73, v11);
    sub_23AB3D0AC(v76, v75, v74);
    swift_release();
    swift_bridgeObjectRelease();
    sub_23AA8A05C(v19, (uint64_t *)&unk_2542E6B00);
    v43 = v90;
    v44 = v91;
    v45 = v92;
    v46 = v94;
    v47 = v95;
    v48 = v96;
    sub_23AB3D0AC(v87, v88, v89);
    sub_23AB3D0AC(v43, v44, v45);
    swift_bridgeObjectRelease();
    sub_23AB3D0AC(v46, v47, v48);
    swift_release();

    return;
  }
LABEL_25:
  v83 = 0;
  v84 = 0xE000000000000000;
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C7028();
  sub_23B1C64F4();
  sub_23B1C704C();
  __break(1u);
}

uint64_t sub_23AB3BBD8(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, int a6, char a7, uint64_t a8)
{
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  if (a4 < 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  else
  {
    if (a4)
    {
      v8 = 0;
      v9 = a7 & 1;
      v10 = (a3 | a7) & 1;
      v11 = a8 + 64;
      v12 = result;
      v13 = a2;
      while (1)
      {
        if ((v10 & 1) != 0)
          goto LABEL_31;
        if (v13 != a6)
        {
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
        if (v12 == a5)
        {
          v12 = 0;
          goto LABEL_25;
        }
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_27;
        v14 = 1 << *(_BYTE *)(a8 + 32);
        if ((uint64_t)v12 >= v14)
          goto LABEL_27;
        v15 = v12 >> 6;
        v16 = *(_QWORD *)(v11 + 8 * (v12 >> 6));
        if (((v16 >> v12) & 1) == 0)
          goto LABEL_28;
        if (*(_DWORD *)(a8 + 36) != a6)
          goto LABEL_29;
        v17 = v16 & (-2 << (v12 & 0x3F));
        if (v17)
        {
          v12 = __clz(__rbit64(v17)) | v12 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v18 = v15 + 1;
          v19 = (unint64_t)(v14 + 63) >> 6;
          if (v15 + 1 >= v19)
            goto LABEL_22;
          v20 = *(_QWORD *)(v11 + 8 * v18);
          if (!v20)
          {
            v18 = v15 + 2;
            if (v15 + 2 >= v19)
              goto LABEL_22;
            v20 = *(_QWORD *)(v11 + 8 * v18);
            if (!v20)
            {
              while (v19 - 3 != v15)
              {
                v20 = *(_QWORD *)(a8 + 88 + 8 * v15++);
                if (v20)
                {
                  v18 = v15 + 2;
                  goto LABEL_16;
                }
              }
LABEL_22:
              v12 = 1 << *(_BYTE *)(a8 + 32);
              goto LABEL_5;
            }
          }
LABEL_16:
          v12 = __clz(__rbit64(v20)) + (v18 << 6);
        }
LABEL_5:
        ++v8;
        v13 = a6;
        v10 = v9;
        if (v8 == a4)
          goto LABEL_25;
      }
    }
    v12 = result;
LABEL_25:
    sub_23AAB75B0(result, a2, a3 & 1);
    return v12;
  }
  return result;
}

uint64_t sub_23AB3BD60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t result;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[12];
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E2358);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = &v43[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v43[-v8];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2378);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = &v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = MEMORY[0x24BDAC7A8](v11);
  v16 = &v43[-v15];
  if ((*(_BYTE *)(v1 + 72) & 1) != 0 || (*(_BYTE *)(v1 + 40) & 1) != 0)
    goto LABEL_19;
  v17 = *(_QWORD *)(v1 + 64);
  if ((_DWORD)v17 != *(_QWORD *)(v1 + 32))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18 = *(_QWORD *)(v1 + 56);
  v19 = *(_QWORD *)(v1 + 24);
  v54 = v7;
  if (v18 == v19)
  {
    v20 = 1;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v1 + 16) & 1) != 0)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  if (v18 < *(_QWORD *)v1)
    goto LABEL_16;
  if ((_DWORD)v17 != *(_DWORD *)(v1 + 8))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v18 >= v19)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v21 = *(_QWORD *)(v1 + 48);
  v22 = *(int *)(v3 + 48);
  v51 = v4;
  v23 = (uint64_t)&v7[v22];
  v24 = sub_23AB56938((uint64_t)&v7[v22], v18, v17, 0, v21);
  *(_QWORD *)v7 = v24;
  v7[8] = v25;
  *(_QWORD *)v9 = v24;
  v9[8] = v25;
  sub_23AA8EFC8(v23, (uint64_t)&v9[*(int *)(v3 + 48)], (uint64_t *)&unk_2542E6B00);
  sub_23AA8A05C((uint64_t)v7, &qword_2542E2358);
  sub_23AA724E8((uint64_t)v9, (uint64_t)v16, &qword_2542E2358);
  v26 = *(_QWORD *)v1;
  v47 = *(_QWORD *)(v1 + 8);
  v48 = v26;
  v50 = v13;
  v27 = *(_BYTE *)(v1 + 16);
  v28 = *(_QWORD *)(v1 + 24);
  v29 = *(_QWORD *)(v1 + 32);
  LOBYTE(v23) = *(_BYTE *)(v1 + 40);
  v49 = v23;
  v52 = v3;
  v53 = a1;
  v31 = *(_QWORD *)(v1 + 48);
  v30 = *(_QWORD *)(v1 + 56);
  v32 = *(_QWORD *)(v1 + 64);
  v33 = *(unsigned __int8 *)(v1 + 72);
  sub_23AAB75B0(v26, v47, v27);
  sub_23AAB75B0(v28, v29, v23);
  swift_bridgeObjectRetain();
  v34 = sub_23AEA7548(v30, v32, v33, v31);
  v45 = v35;
  v46 = v34;
  v44 = v36;
  LOBYTE(v36) = v33;
  v3 = v52;
  sub_23AB3D0AC(v30, v32, v36);
  v37 = v27;
  v13 = v50;
  v4 = v51;
  sub_23AB3D0AC(v48, v47, v37);
  sub_23AB3D0AC(v28, v29, v49);
  a1 = v53;
  swift_bridgeObjectRelease();
  v20 = 0;
  v38 = v45;
  *(_QWORD *)(v1 + 56) = v46;
  *(_QWORD *)(v1 + 64) = v38;
  *(_BYTE *)(v1 + 72) = v44 & 1;
LABEL_11:
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v16, v20, 1, v3);
  v39 = *(void (**)(uint64_t))(v1 + 80);
  sub_23AA724E8((uint64_t)v16, (uint64_t)v13, &qword_2569E2378);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v4 + 48))(v13, 1, v3) == 1)
  {
    v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E18);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(a1, 1, 1, v40);
  }
  else
  {
    v41 = (uint64_t)v54;
    sub_23AA724E8((uint64_t)v13, (uint64_t)v54, &qword_2542E2358);
    v39(v41);
    sub_23AA8A05C(v41, &qword_2542E2358);
    v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E18);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a1, 0, 1, v42);
  }
}

void sub_23AB3C0C0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease();
    return;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

uint64_t sub_23AB3C24C(_BYTE *__src, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return sub_23AABEE98(__src, &__src[a2]);
  sub_23B1C563C();
  swift_allocObject();
  sub_23B1C5600();
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  sub_23B1C5A5C();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

void sub_23AB3C318(char *a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  void *v11;
  void *v12;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  v5 = OBJC_IVAR____TtC9libfssync14FPFSEnumerator_invalidated;
  _Block_copy(a2);
  if ((a1[v5] & 1) != 0 || (v6 = MEMORY[0x23B8615C4](&a1[OBJC_IVAR____TtC9libfssync14FPFSEnumerator_backend])) == 0)
  {
    type metadata accessor for NSFileProviderError(0);
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&unk_2542E1E60, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderError, (uint64_t)&unk_23B1CC9C0);
    sub_23B1C5864();
    v11 = (void *)sub_23B1C5870();
    ((void (**)(_QWORD, _QWORD, void *))a2)[2](a2, 0, v11);
    swift_release();

  }
  else
  {
    v7 = (void *)v6;
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = sub_23AB3D88C;
    *(_QWORD *)(v8 + 24) = v4;
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = sub_23AB3D88C;
    v9[3] = v4;
    v9[4] = a1;
    swift_retain_n();
    v10 = a1;
    sub_23AC62260((uint64_t)"currentSyncAnchor(completion:)", 30, 2, (void (*)(_QWORD *, id))sub_23AB3D8B8, v8, (uint64_t)sub_23AB3D8E0, (uint64_t)v9);
    swift_release();

    swift_release();
    swift_release();
  }
}

uint64_t sub_23AB3C4E0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23AB3C508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_release();
  swift_release();
  v5 = v0 + v3;
  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v0 + v3, 1, v6))
  {
    v21 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v5 + v6[12];
    v8 = (int *)type metadata accessor for ItemMetadata();
    v9 = v7 + v8[7];
    v10 = sub_23B1C5BDC();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v12(v9, v10);
    v12(v7 + v8[8], v10);
    swift_bridgeObjectRelease();
    v13 = v7 + v8[29];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
      v12(v13, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = (uint64_t *)(v7 + v8[33]);
    v15 = v14[1];
    if (v15 >> 60 != 15)
      sub_23AAAE53C(*v14, v15);
    swift_bridgeObjectRelease();
    v16 = v5 + v6[13];
    v17 = *(void **)(v16 + 16);
    v4 = v21;
    if (v17 != (void *)1)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v16 + 192))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_23AAA12F0(*(_QWORD *)(v5 + v6[17]), *(_QWORD *)(v5 + v6[17] + 8));
    v3 = (v2 + 32) & ~v2;
  }
  v18 = (((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  swift_release();
  swift_release();
  objc_release(*(id *)(v0
                     + ((((((((v19 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)));
  return swift_deallocObject();
}

void sub_23AB3C7CC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_23AB37494(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void *)(v0 + v2), *(int **)(v0 + v3), *(_BYTE **)(v0 + v4), *(void **)(v0 + v5), *(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8), *(_QWORD *)(v0 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(char **)(v0 + ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

void sub_23AB3C884(void *a1)
{
  uint64_t v1;

  sub_23AAEC9F8(a1, *(void (**)(_QWORD *))(v1 + 16));
}

uint64_t sub_23AB3C88C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AB3C8D4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23AB3C910(uint64_t a1)
{
  uint64_t v1;

  sub_23AB385B4(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, id))(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_23AB3C920(uint64_t a1, void (*avoid (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v4 = *(_QWORD *)(a1 + 600);
  v5 = *(_QWORD *)(a1 + 608);
  v6 = *(_QWORD *)(a1 + 616);
  v7 = *(_QWORD *)(a1 + 624);
  v8 = *(_QWORD *)(a1 + 632);
  v9 = *(_QWORD *)(a1 + 640);
  v10 = *(_QWORD *)(a1 + 648);
  v11 = *(_QWORD *)(a1 + 656);
  v39 = *(_OWORD *)(a1 + 680);
  v40 = *(_OWORD *)(a1 + 664);
  v37 = *(_OWORD *)(a1 + 712);
  v38 = *(_OWORD *)(a1 + 696);
  v35 = *(_OWORD *)(a1 + 744);
  v36 = *(_OWORD *)(a1 + 728);
  v33 = *(_OWORD *)(a1 + 776);
  v34 = *(_OWORD *)(a1 + 760);
  v32 = *(_OWORD *)(a1 + 792);
  v30 = *(_OWORD *)(a1 + 824);
  v31 = *(_OWORD *)(a1 + 808);
  v12 = *(_QWORD *)(a1 + 840);
  v28 = *(_OWORD *)(a1 + 448);
  v29 = *(_OWORD *)(a1 + 464);
  v26 = *(_OWORD *)(a1 + 416);
  v27 = *(_OWORD *)(a1 + 432);
  v24 = *(_OWORD *)(a1 + 384);
  v25 = *(_OWORD *)(a1 + 400);
  v22 = *(_OWORD *)(a1 + 352);
  v23 = *(_OWORD *)(a1 + 368);
  v20 = *(_OWORD *)(a1 + 320);
  v21 = *(_OWORD *)(a1 + 336);
  v18 = *(_OWORD *)(a1 + 288);
  v19 = *(_OWORD *)(a1 + 304);
  v16 = *(_OWORD *)(a1 + 256);
  v17 = *(_OWORD *)(a1 + 272);
  v14 = *(_OWORD *)(a1 + 224);
  v15 = *(_OWORD *)(a1 + 240);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v14,
    *((_QWORD *)&v14 + 1),
    v15,
    *((_QWORD *)&v15 + 1),
    v16,
    *((_QWORD *)&v16 + 1),
    v17,
    *((_QWORD *)&v17 + 1),
    v18,
    *((_QWORD *)&v18 + 1),
    v19,
    *((_QWORD *)&v19 + 1),
    v20,
    *((_QWORD *)&v20 + 1),
    v21,
    *((_QWORD *)&v21 + 1),
    v22,
    *((_QWORD *)&v22 + 1),
    v23,
    *((_QWORD *)&v23 + 1),
    v24,
    *((_QWORD *)&v24 + 1),
    v25,
    *((_QWORD *)&v25 + 1),
    v26,
    *((_QWORD *)&v26 + 1),
    v27,
    *((_QWORD *)&v27 + 1),
    v28,
    *((_QWORD *)&v28 + 1),
    v29,
    *((_QWORD *)&v29 + 1),
    *(_QWORD *)(a1 + 480),
    *(_QWORD *)(a1 + 488));
  a3(v4, v5, v6, v7, v8, v9, v10, v11, v40, *((_QWORD *)&v40 + 1), v39, *((_QWORD *)&v39 + 1), v38, *((_QWORD *)&v38 + 1), v37, *((_QWORD *)&v37 + 1), v36, *((_QWORD *)&v36 + 1), v35,
    *((_QWORD *)&v35 + 1),
    v34,
    *((_QWORD *)&v34 + 1),
    v33,
    *((_QWORD *)&v33 + 1),
    v32,
    *((_QWORD *)&v32 + 1),
    v31,
    *((_QWORD *)&v31 + 1),
    v30,
    *((_QWORD *)&v30 + 1),
    v12);
  return a1;
}

uint64_t sub_23AB3CAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for VFSItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AB3CB34(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for VFSItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23AB3CB70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_23B1C5E4C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_23AAB555C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23AB3CC34()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_23B1C5E4C() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_23AB367B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), v0 + v2, *(void **)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v0+ ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_23AB3CCAC()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_23AB3CCD0()
{
  uint64_t v0;

  sub_23AC8D754(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23AB3CCD8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_23AB3CCFC(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_23AB33D64(a1, a2, v2);
}

uint64_t sub_23AB3CD04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_23B1C5E4C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AB3CD9C()
{
  uint64_t v0;

  swift_release();
  sub_23AAAE53C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));

  return swift_deallocObject();
}

uint64_t sub_23AB3CDD8(uint64_t a1)
{
  uint64_t v1;

  return sub_23AB38C34(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 48), *(void **)(v1 + 56));
}

uint64_t sub_23AB3CDEC()
{
  uint64_t v0;

  sub_23AAAE53C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_23AB3CE30()
{
  uint64_t v0;

  return sub_23AB38E78(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(char **)(v0 + 64));
}

void sub_23AB3CE54(void *a1)
{
  uint64_t v1;

  sub_23AAECA4C(a1, *(void (**)(_QWORD *))(v1 + 16));
}

uint64_t sub_23AB3CE5C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  char v19;
  __int128 v21;
  _OWORD v22[3];
  uint64_t v23;
  _QWORD v24[2];
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = result;
    v6 = sub_23AAB7928(a2);
    v8 = v7;
    v10 = v9 & 1;
    v11 = sub_23AB3BBD8(v6, v7, v9 & 1, v4, 1 << *(_BYTE *)(a2 + 32), *(_DWORD *)(a2 + 36), 0, a2);
    v13 = v12;
    v15 = v14;
    v16 = ~v14;
    sub_23AB3D0AC(v6, v8, v10);
    if (v16)
    {
      v17 = (v15 & 1) == 0;
    }
    else
    {
      v17 = 1;
      v11 = 1 << *(_BYTE *)(a2 + 32);
      v13 = *(unsigned int *)(a2 + 36);
    }
    result = sub_23AAB7928(a2);
    if (!v17 || (v19 & 1) != 0)
      goto LABEL_16;
    if ((_DWORD)v13 == (_DWORD)v18)
    {
      if (v11 >= result)
      {
        v24[0] = result;
        v24[1] = v18;
        v25 = 0;
        v26 = v11;
        v27 = v13;
        v28 = 0;
        result = sub_23AAB671C((uint64_t)v24, a2, (uint64_t)v22);
        v21 = v22[1];
        *(_OWORD *)a3 = v22[0];
        *(_OWORD *)(a3 + 16) = v21;
        *(_OWORD *)(a3 + 32) = v22[2];
        *(_QWORD *)(a3 + 48) = v23;
        return result;
      }
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_23AB3CF9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  sub_23B1C6FBC();
  if (v5)
  {
    v6 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00) - 8);
    v7 = (_QWORD *)(a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)));
    v8 = *(_QWORD *)(v6 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_23AA96724(v7, 0, 1, a3);
      sub_23B1C6F98();
      sub_23B1C6FC8();
      sub_23B1C6FD4();
      sub_23B1C6FA4();
      v7 = (_QWORD *)((char *)v7 + v8);
      --v5;
    }
    while (v5);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_23AB3D0AC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23AB3D0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (!v3)
    return result;
  v27 = MEMORY[0x24BEE4AF8];
  sub_23B1C6FBC();
  result = sub_23B191CC0(a1);
  v6 = result;
  v8 = v7;
  v10 = v9 & 1;
  v11 = *(void **)(a2 + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_providerDomainID);
  v25 = (void *)*MEMORY[0x24BDC8230];
  v26 = (void *)*MEMORY[0x24BDC8228];
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      goto LABEL_26;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v8)
      goto LABEL_27;
    v17 = *(_QWORD *)(a1 + 48) + 16 * v6;
    v18 = *(_QWORD *)v17;
    v19 = *(unsigned __int8 *)(v17 + 8);
    if (v19 == 2 && v18 == 0)
    {
      v12 = v11;
      v13 = v26;
    }
    else
    {
      if (v19 != 2 || v18 != 1)
      {
        if (v19 > 1)
        {
          v24 = v11;
        }
        else
        {
          v23 = v11;
          sub_23B1C7304();
          sub_23B1C64F4();
          swift_bridgeObjectRelease();
          sub_23B1C64F4();
        }
        sub_23B1C64F4();
        swift_bridgeObjectRelease();
        v14 = (id)sub_23B1C63BC();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      v22 = v11;
      v13 = v25;
    }
    v14 = v13;
LABEL_5:
    objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC82E8]), sel_initWithProviderDomainID_itemIdentifier_, v11, v14);

    sub_23B1C6F98();
    sub_23B1C6FC8();
    sub_23B1C6FD4();
    sub_23B1C6FA4();
    result = sub_23B191D64(v6, v8, v10 & 1, a1);
    v6 = result;
    v8 = v15;
    v10 = v16 & 1;
    if (!--v3)
    {
      sub_23AB3D0AC(result, v15, v16 & 1);
      return v27;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_23AB3D3B4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_23AB3D3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  sub_23AAB5DB0(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16));
}

uint64_t objectdestroy_15Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_23B1C5E4C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AB3D4A0(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v8 = a4 & 1;
  v9 = *(_QWORD *)(sub_23B1C5E4C() - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_23AB3649C(a1, a2, a3, v8, *(_QWORD *)(v4 + 16), v4 + v10, *(void **)(v4 + v11), *(_QWORD *)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v4 + ((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v4 + ((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t objectdestroy_18Tm_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_release();
  swift_release();
  v5 = v0 + v3;
  v6 = (int *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v0 + v3, 1, v6))
  {
    v21 = v4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v5 + v6[12];
    v8 = (int *)type metadata accessor for ItemMetadata();
    v9 = v7 + v8[7];
    v10 = sub_23B1C5BDC();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v12(v9, v10);
    v12(v7 + v8[8], v10);
    swift_bridgeObjectRelease();
    v13 = v7 + v8[29];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
      v12(v13, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = (uint64_t *)(v7 + v8[33]);
    v15 = v14[1];
    if (v15 >> 60 != 15)
      sub_23AAAE53C(*v14, v15);
    swift_bridgeObjectRelease();
    v16 = v5 + v6[13];
    v17 = *(void **)(v16 + 16);
    v4 = v21;
    if (v17 != (void *)1)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v16 + 192))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_23AAA12F0(*(_QWORD *)(v5 + v6[17]), *(_QWORD *)(v5 + v6[17] + 8));
    v3 = (v2 + 32) & ~v2;
  }
  v18 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_release();
  objc_release(*(id *)(v0
                     + ((((((v19 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
  return swift_deallocObject();
}

uint64_t sub_23AB3D7F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_23AB370D4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(void **)(v1 + v5), *(void **)(v1 + v6), *(_QWORD *)(v1 + v7), *(_QWORD *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void **)(v1 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

void sub_23AB3D88C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23AAB5FCC(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_23AB3D894()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AB3D8B8(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_23AB3D8E0(uint64_t a1)
{
  uint64_t v1;

  return sub_23AB350D8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

void sub_23AB3D8F0()
{
  uint64_t v0;

  sub_23AB351C8(*(void (**)(void *, _QWORD))(v0 + 16));
}

uint64_t sub_23AB3D90C(uint64_t a1)
{
  uint64_t v1;

  return sub_23AC052B0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23AB3D914(uint64_t a1)
{
  uint64_t v1;

  return sub_23AB33CAC(a1, v1);
}

uint64_t sub_23AB3D974()
{
  return swift_allocateGenericValueMetadata();
}

void sub_23AB3D97C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
}

_QWORD *sub_23AB3DC80(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *result;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  _QWORD *v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  BOOL v104;
  uint64_t v105;
  _QWORD *v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  BOOL v113;
  uint64_t v114;
  _QWORD *v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  BOOL v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  BOOL v130;
  uint64_t v131;
  _QWORD *v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t v138;
  BOOL v139;
  uint64_t v140;
  _QWORD *v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  BOOL v148;
  uint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  unsigned int v152;
  uint64_t v153;
  BOOL v154;
  uint64_t v155;
  _QWORD *v156;
  unint64_t v157;
  unsigned int v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  _QWORD *v162;
  char *v163;
  unsigned int v164;
  unsigned int v165;
  unint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  _QWORD *v172;
  char *v173;
  uint64_t v174;
  unsigned int v175;
  unsigned int v176;
  char *v177;
  uint64_t v178;
  BOOL v179;
  uint64_t v180;
  _QWORD *v181;
  unint64_t v182;
  char v183;
  unint64_t v184;
  unsigned int v185;
  uint64_t v186;
  unint64_t v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  BOOL v191;
  uint64_t v192;
  _QWORD *v193;
  unsigned int v194;
  uint64_t v195;
  unint64_t v196;
  unsigned int v197;
  uint64_t v198;
  unint64_t v199;
  BOOL v200;
  uint64_t v201;
  _QWORD *v202;
  unsigned int v203;
  uint64_t v204;
  unint64_t v205;
  unsigned int v206;
  uint64_t v207;
  unint64_t v208;
  BOOL v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  unsigned int v214;
  uint64_t v215;
  unint64_t v216;
  unsigned int v217;
  uint64_t v218;
  unint64_t v219;
  BOOL v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  unint64_t v224;
  unsigned int v225;
  uint64_t v226;
  unint64_t v227;
  BOOL v228;
  uint64_t v229;
  unsigned int v230;
  uint64_t v231;
  unint64_t v232;
  unsigned int v233;
  uint64_t v234;
  unint64_t v235;
  __int128 v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unsigned int v242;
  __int128 v243;
  unsigned int v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t v252;
  __int16 v253;
  char v254;
  _QWORD *v255;
  _QWORD *v256;
  unint64_t v257;
  unint64_t v258;
  void (*v259)(unint64_t, unint64_t, uint64_t);
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  void *v264;
  void *v265;
  char v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  unsigned int v271;
  uint64_t v272;
  __int16 v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  _QWORD *v280;
  _QWORD *v281;
  unint64_t v282;
  unint64_t v283;
  void (*v284)(unint64_t, unint64_t, uint64_t);
  _QWORD *v285;
  _QWORD *v286;
  _QWORD *v287;
  _QWORD *v288;
  unsigned int v289;
  void *v290;
  id v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  void *v295;
  uint64_t v296;
  char v297;
  unsigned int v298;
  __int128 v299;
  unsigned int v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  unsigned int v304;
  void *v305;
  id v306;
  uint64_t *v307;
  unint64_t v308;
  uint64_t *v309;
  unint64_t v310;
  uint64_t v311;
  __int128 v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  __int128 v316;
  unsigned int v317;
  BOOL v318;
  unint64_t v319;
  unsigned int v320;
  uint64_t v321;
  unint64_t v322;
  unsigned int v323;
  uint64_t v324;
  unint64_t v325;
  unsigned int v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  unint64_t v353;
  int v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v360;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t v365;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v351 = AssociatedTypeWitness;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= v3)
    v7 = v3;
  else
    v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  v349 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(_DWORD *)(v5 + 80);
  v339 = v3 + v9;
  v346 = v9;
  v341 = v6;
  v10 = v6 + (v339 & ~(unint64_t)v9);
  v365 = v7 + 2;
  if (v10 + 1 > v7 + 2)
    v11 = v10 + 1;
  else
    v11 = v7 + 2;
  if (v8 > v11)
    v11 = v7 + 1;
  v348 = v7;
  v12 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) + 16 > v11)
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
  v350 = v2;
  v354 = *(_DWORD *)(v2 + 80) | v9;
  v13 = (*(_BYTE *)(v2 + 80) | v9);
  v342 = v8 + v13;
  v357 = v13;
  if (((v8 + v13) & ~v13) + v8 <= v11)
    v14 = v11;
  else
    v14 = ((v8 + v13) & ~v13) + v8;
  v337 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v337 - 8);
  v352 = *(_DWORD *)(v15 + 80);
  v338 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v338 - 8);
  v17 = *(_DWORD *)(v16 + 80);
  v18 = v352 & 0xF8 | v17 | 7u;
  v364 = v8;
  v340 = v8 + v18;
  v335 = v15;
  v336 = v16;
  v333 = *(_QWORD *)(v15 + 64) + 7;
  v334 = *(_QWORD *)(v16 + 64) + 7;
  v343 = v17 + 8;
  v344 = (((v334 + ((v343 + (v333 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v17)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v344 + 18 <= 0x39)
    v19 = 57;
  else
    v19 = v344 + 18;
  if (v19 > 3)
    goto LABEL_22;
  v20 = ((1 << (8 * v19)) + 3) >> (8 * v19);
  v21 = 2;
  if (v20 > 0xFFF0)
    v21 = 4;
  if (v20 <= 0xF0)
  {
LABEL_22:
    v22 = v352 & 0xF8 | v17 | 7u;
    v21 = 1;
  }
  else
  {
    v22 = v352 & 0xF8 | v17 | 7u;
  }
  v362 = v19;
  v363 = v19 + ((v8 + v18) & ~v18);
  v356 = v14;
  if (v363 + v21 <= v14)
    v23 = v14;
  else
    v23 = v363 + v21;
  v332 = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(v332 - 8);
  v25 = *(_DWORD *)(v24 + 80);
  v26 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(_DWORD *)(v27 + 80);
  v29 = v25 & 0xF8 | v28 | 7;
  v30 = (v364 + v29) & ~v29;
  v331 = v24;
  v31 = *(_QWORD *)(v24 + 64) + 7;
  v32 = (((*(_QWORD *)(v27 + 64) + 7 + ((v28 + 8 + (v31 & 0xFFFFFFFFFFFFFFF8)) & ~v28)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v32 + 18 <= 0x39)
    v33 = 57;
  else
    v33 = v32 + 18;
  if (v33 > 3)
    goto LABEL_33;
  v34 = ((1 << (8 * v33)) + 3) >> (8 * v33);
  v35 = 2;
  if (v34 > 0xFFF0)
    v35 = 4;
  if (v34 <= 0xF0)
LABEL_33:
    v35 = 1;
  v36 = v33 + v30;
  v37 = v33 + v30 + v35;
  if (v37 <= v23)
    v37 = v23;
  v38 = v12 + 17;
  if (v12 + 17 > v37)
    v37 = v12 + 17;
  v39 = v12 + 24;
  if (v12 + 24 > v37)
    v37 = v12 + 24;
  if (v365 > v37)
    v37 = v365;
  v40 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  v41 = v40 + 8;
  if (v40 + 8 <= v37)
    v42 = v37;
  else
    v42 = v40 + 8;
  v43 = a2;
  v44 = v22 | v357 | v29;
  if (v44 != 7 || ((v354 | v352 | v17 | v25 | *(_DWORD *)(v27 + 80)) & 0x100000) != 0 || v42 + 1 > 0x18)
  {
    v60 = *a2;
    *a1 = *a2;
    v61 = (_QWORD *)(v60 + ((v44 + 16) & ~v44));
    swift_retain();
    return v61;
  }
  v45 = v22;
  if (v362 > 3)
    goto LABEL_52;
  v46 = ((1 << (8 * v362)) + 3) >> (8 * v362);
  v47 = 2;
  if (v46 > 0xFFF0)
    v47 = 4;
  if (v46 <= 0xF0)
LABEL_52:
    v47 = 1;
  v48 = v363 + v47;
  if (v48 <= v356)
    v48 = v356;
  if (v33 > 3)
    goto LABEL_59;
  v49 = ((1 << (8 * v33)) + 3) >> (8 * v33);
  v50 = 2;
  if (v49 > 0xFFF0)
    v50 = 4;
  if (v49 <= 0xF0)
LABEL_59:
    v50 = 1;
  v51 = v36 + v50;
  if (v51 > v48)
    v48 = v51;
  if (v38 > v48)
    v48 = v12 + 17;
  if (v39 > v48)
    v48 = v12 + 24;
  if (v365 > v48)
    v48 = v365;
  if (v41 > v48)
    v48 = v41;
  v52 = *((unsigned __int8 *)a2 + v48);
  v355 = v36;
  v329 = v12 + 17;
  v330 = v12 + 24;
  v353 = v41;
  v63 = ~v346;
  v64 = ~v357;
  v65 = ~v45;
  v66 = ~(unint64_t)v17;
  v67 = ~v29;
  v68 = ~v28;
  v69 = v32 + 16;
  v360 = v33;
  switch(v52)
  {
    case 0:
      v70 = *((unsigned __int8 *)v43 + v348);
      if (v70 >= 2)
      {
        if (v348 <= 3)
          v71 = v348;
        else
          v71 = 4;
        __asm { BR              X12 }
      }
      v61 = a1;
      v104 = v70 == 1;
      v105 = v2;
      if (v70 == 1)
        v105 = v349;
      v106 = v43;
      (*(void (**)(_QWORD *))(v105 + 16))(a1);
      *((_BYTE *)a1 + v348) = v104;
      *((_BYTE *)a1 + v364) = *((_BYTE *)v106 + v364);
      if (v362 > 3)
        goto LABEL_206;
      v107 = ((1 << (8 * v362)) + 3) >> (8 * v362);
      v108 = 2;
      if (v107 > 0xFFF0)
        v108 = 4;
      if (v107 <= 0xF0)
LABEL_206:
        v108 = 1;
      v109 = v363 + v108;
      if (v109 <= v356)
        v109 = v356;
      if (v360 > 3)
        goto LABEL_213;
      v110 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      v111 = 2;
      if (v110 > 0xFFF0)
        v111 = 4;
      if (v110 <= 0xF0)
LABEL_213:
        v111 = 1;
      v112 = v355 + v111;
      if (v112 > v109)
        v109 = v112;
      if (v329 > v109)
        v109 = v329;
      if (v330 > v109)
        v109 = v330;
      if (v365 > v109)
        v109 = v365;
      if (v353 > v109)
        v109 = v353;
      *((_BYTE *)a1 + v109) = 0;
      return v61;
    case 1:
      v61 = a1;
      v72 = v43;
      (*(void (**)(_QWORD *))(v2 + 16))(a1);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v349 + 16))(((unint64_t)a1 + v339) & v63, ((unint64_t)v72 + v339) & v63, v351);
      *(_BYTE *)((((unint64_t)a1 + v339) & v63) + v341) = *(_BYTE *)((((unint64_t)v72 + v339) & v63) + v341);
      if (v362 > 3)
        goto LABEL_109;
      v73 = ((1 << (8 * v362)) + 3) >> (8 * v362);
      v74 = 2;
      if (v73 > 0xFFF0)
        v74 = 4;
      if (v73 <= 0xF0)
LABEL_109:
        v74 = 1;
      v75 = v363 + v74;
      if (v75 <= v356)
        v75 = v356;
      if (v360 > 3)
        goto LABEL_116;
      v76 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      v77 = 2;
      if (v76 > 0xFFF0)
        v77 = 4;
      if (v76 <= 0xF0)
LABEL_116:
        v77 = 1;
      v78 = v355 + v77;
      if (v78 > v75)
        v75 = v78;
      if (v329 > v75)
        v75 = v329;
      if (v330 > v75)
        v75 = v330;
      if (v365 > v75)
        v75 = v365;
      if (v353 > v75)
        v75 = v353;
      *((_BYTE *)a1 + v75) = 1;
      return v61;
    case 2:
      v79 = *((unsigned __int8 *)v43 + v348);
      if (v79 >= 2)
      {
        if (v348 <= 3)
          v80 = v348;
        else
          v80 = 4;
        __asm { BR              X12 }
      }
      v61 = a1;
      v113 = v79 == 1;
      v114 = v2;
      if (v79 == 1)
        v114 = v349;
      v115 = v43;
      (*(void (**)(_QWORD *))(v114 + 16))(a1);
      *((_BYTE *)a1 + v348) = v113;
      *((_BYTE *)a1 + v364) = *((_BYTE *)v115 + v364);
      if (v362 > 3)
        goto LABEL_231;
      v116 = ((1 << (8 * v362)) + 3) >> (8 * v362);
      v117 = 2;
      if (v116 > 0xFFF0)
        v117 = 4;
      if (v116 <= 0xF0)
LABEL_231:
        v117 = 1;
      v118 = v363 + v117;
      if (v118 <= v356)
        v118 = v356;
      if (v360 > 3)
        goto LABEL_238;
      v119 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      v120 = 2;
      if (v119 > 0xFFF0)
        v120 = 4;
      if (v119 <= 0xF0)
LABEL_238:
        v120 = 1;
      v121 = v355 + v120;
      if (v121 > v118)
        v118 = v121;
      if (v329 > v118)
        v118 = v329;
      if (v330 > v118)
        v118 = v330;
      if (v365 > v118)
        v118 = v365;
      if (v353 > v118)
        v118 = v353;
      *((_BYTE *)a1 + v118) = 2;
      return v61;
    case 3:
      v81 = *((unsigned __int8 *)v43 + v348);
      if (v81 >= 2)
      {
        if (v348 <= 3)
          v82 = v348;
        else
          v82 = 4;
        __asm { BR              X12 }
      }
      v61 = a1;
      v122 = v81 == 1;
      v123 = v2;
      if (v81 == 1)
        v123 = v349;
      (*(void (**)(_QWORD *))(v123 + 16))(a1);
      *((_BYTE *)a1 + v348) = v122;
      if (v362 > 3)
        goto LABEL_256;
      v124 = ((1 << (8 * v362)) + 3) >> (8 * v362);
      v125 = 2;
      if (v124 > 0xFFF0)
        v125 = 4;
      if (v124 <= 0xF0)
LABEL_256:
        v125 = 1;
      v126 = v363 + v125;
      if (v126 <= v356)
        v126 = v356;
      if (v360 > 3)
        goto LABEL_263;
      v127 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      v128 = 2;
      if (v127 > 0xFFF0)
        v128 = 4;
      if (v127 <= 0xF0)
LABEL_263:
        v128 = 1;
      v129 = v355 + v128;
      if (v129 > v126)
        v126 = v129;
      if (v329 > v126)
        v126 = v329;
      if (v330 > v126)
        v126 = v330;
      if (v365 > v126)
        v126 = v365;
      if (v353 > v126)
        v126 = v353;
      *((_BYTE *)a1 + v126) = 3;
      return v61;
    case 4:
      v83 = *((unsigned __int8 *)v43 + v348);
      if (v83 >= 2)
      {
        if (v348 <= 3)
          v84 = v348;
        else
          v84 = 4;
        __asm { BR              X12 }
      }
      v61 = a1;
      v130 = v83 == 1;
      v131 = v2;
      if (v83 == 1)
        v131 = v349;
      v132 = v43;
      (*(void (**)(_QWORD *))(v131 + 16))(a1);
      *((_BYTE *)a1 + v348) = v130;
      *(_QWORD *)(((unint64_t)a1 + v364 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v132
                                                                                       + v364
                                                                                       + 7) & 0xFFFFFFFFFFFFF8);
      if (v362 > 3)
        goto LABEL_281;
      v133 = ((1 << (8 * v362)) + 3) >> (8 * v362);
      v134 = 2;
      if (v133 > 0xFFF0)
        v134 = 4;
      if (v133 <= 0xF0)
LABEL_281:
        v134 = 1;
      v135 = v363 + v134;
      if (v135 <= v356)
        v135 = v356;
      if (v360 > 3)
        goto LABEL_288;
      v136 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      v137 = 2;
      if (v136 > 0xFFF0)
        v137 = 4;
      if (v136 <= 0xF0)
LABEL_288:
        v137 = 1;
      v138 = v355 + v137;
      if (v138 > v135)
        v135 = v138;
      if (v329 > v135)
        v135 = v329;
      if (v330 > v135)
        v135 = v330;
      if (v365 > v135)
        v135 = v365;
      if (v353 > v135)
        v135 = v353;
      *((_BYTE *)a1 + v135) = 4;
      return v61;
    case 5:
      v85 = *((unsigned __int8 *)v43 + v348);
      if (v85 >= 2)
      {
        if (v348 <= 3)
          v86 = v348;
        else
          v86 = 4;
        __asm { BR              X12 }
      }
      v61 = a1;
      v139 = v85 == 1;
      v140 = v2;
      if (v85 == 1)
        v140 = v349;
      v141 = v43;
      (*(void (**)(_QWORD *))(v140 + 16))(a1);
      *((_BYTE *)a1 + v348) = v139;
      *(_QWORD *)(((unint64_t)a1 + v364 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v141
                                                                                       + v364
                                                                                       + 7) & 0xFFFFFFFFFFFFF8);
      if (v362 > 3)
        goto LABEL_306;
      v142 = ((1 << (8 * v362)) + 3) >> (8 * v362);
      v143 = 2;
      if (v142 > 0xFFF0)
        v143 = 4;
      if (v142 <= 0xF0)
LABEL_306:
        v143 = 1;
      v144 = v363 + v143;
      if (v144 <= v356)
        v144 = v356;
      if (v360 > 3)
        goto LABEL_313;
      v145 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      v146 = 2;
      if (v145 > 0xFFF0)
        v146 = 4;
      if (v145 <= 0xF0)
LABEL_313:
        v146 = 1;
      v147 = v355 + v146;
      if (v147 > v144)
        v144 = v147;
      if (v329 > v144)
        v144 = v329;
      if (v330 > v144)
        v144 = v330;
      if (v365 > v144)
        v144 = v365;
      if (v353 > v144)
        v144 = v353;
      *((_BYTE *)a1 + v144) = 5;
      return v61;
    case 6:
      v87 = *((unsigned __int8 *)v43 + v348);
      if (v87 >= 2)
      {
        if (v348 <= 3)
          v88 = v348;
        else
          v88 = 4;
        __asm { BR              X12 }
      }
      v61 = a1;
      v148 = v87 == 1;
      v149 = v350;
      if (v87 == 1)
        v149 = v349;
      v150 = v43;
      (*(void (**)(_QWORD *))(v149 + 16))(a1);
      *((_BYTE *)a1 + v348) = v148;
      v151 = ((unint64_t)a1 + v342) & v64;
      v152 = *(unsigned __int8 *)((((unint64_t)v150 + v342) & v64) + v348);
      if (v152 >= 2)
      {
        if (v348 <= 3)
          v153 = v348;
        else
          v153 = 4;
        __asm { BR              X12 }
      }
      v220 = v152 == 1;
      v221 = v350;
      if (v152 == 1)
        v221 = v349;
      (*(void (**)(unint64_t))(v221 + 16))(v151);
      *(_BYTE *)(v151 + v348) = v220;
      if (v362 > 3)
        goto LABEL_473;
      v222 = ((1 << (8 * v362)) + 3) >> (8 * v362);
      v223 = 2;
      if (v222 > 0xFFF0)
        v223 = 4;
      if (v222 <= 0xF0)
LABEL_473:
        v223 = 1;
      v224 = v363 + v223;
      if (v224 <= v356)
        v224 = v356;
      if (v360 > 3)
        goto LABEL_480;
      v225 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      v226 = 2;
      if (v225 > 0xFFF0)
        v226 = 4;
      if (v225 <= 0xF0)
LABEL_480:
        v226 = 1;
      v227 = v355 + v226;
      if (v227 > v224)
        v224 = v227;
      if (v329 > v224)
        v224 = v329;
      if (v330 > v224)
        v224 = v330;
      if (v365 > v224)
        v224 = v365;
      if (v353 > v224)
        v224 = v353;
      *((_BYTE *)a1 + v224) = 6;
      return v61;
    case 7:
      v89 = *((unsigned __int8 *)v43 + v348);
      if (v89 >= 2)
      {
        if (v348 <= 3)
          v90 = v348;
        else
          v90 = 4;
        __asm { BR              X12 }
      }
      v61 = a1;
      v154 = v89 == 1;
      v155 = v350;
      if (v89 == 1)
        v155 = v349;
      v156 = v43;
      (*(void (**)(_QWORD *))(v155 + 16))(a1);
      *((_BYTE *)a1 + v348) = v154;
      v157 = ((unint64_t)a1 + v342) & v64;
      v158 = *(unsigned __int8 *)((((unint64_t)v156 + v342) & v64) + v348);
      if (v158 >= 2)
      {
        if (v348 <= 3)
          v159 = v348;
        else
          v159 = 4;
        __asm { BR              X12 }
      }
      v228 = v158 == 1;
      v229 = v350;
      if (v158 == 1)
        v229 = v349;
      (*(void (**)(unint64_t))(v229 + 16))(v157);
      *(_BYTE *)(v157 + v348) = v228;
      if (v362 > 3)
        goto LABEL_498;
      v230 = ((1 << (8 * v362)) + 3) >> (8 * v362);
      v231 = 2;
      if (v230 > 0xFFF0)
        v231 = 4;
      if (v230 <= 0xF0)
LABEL_498:
        v231 = 1;
      v232 = v363 + v231;
      if (v232 <= v356)
        v232 = v356;
      if (v360 > 3)
        goto LABEL_505;
      v233 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      v234 = 2;
      if (v233 > 0xFFF0)
        v234 = 4;
      if (v233 <= 0xF0)
LABEL_505:
        v234 = 1;
      v235 = v355 + v234;
      if (v235 > v232)
        v232 = v235;
      if (v329 > v232)
        v232 = v329;
      if (v330 > v232)
        v232 = v330;
      if (v365 > v232)
        v232 = v365;
      if (v353 > v232)
        v232 = v353;
      *((_BYTE *)a1 + v232) = 7;
      return v61;
    case 8:
      v91 = *((unsigned __int8 *)v43 + v348);
      if (v91 >= 2)
      {
        if (v348 <= 3)
          v92 = v348;
        else
          v92 = 4;
        __asm { BR              X12 }
      }
      v103 = v344 + 16;
      v61 = a1;
      v160 = v91 == 1;
      v161 = v2;
      if (v91 == 1)
        v161 = v349;
      v162 = v43;
      (*(void (**)(_QWORD *))(v161 + 16))(a1);
      *((_BYTE *)a1 + v348) = v160;
      v163 = (char *)(((unint64_t)v162 + v340) & v65);
      if (v362 > 3)
        goto LABEL_346;
      v164 = ((1 << (8 * v362)) + 3) >> (8 * v362);
      if (v164 > 0xFFF0)
      {
        v165 = *(_DWORD *)&v163[v362];
      }
      else if (v164 > 0xF0)
      {
        v165 = *(unsigned __int16 *)&v163[v362];
      }
      else
      {
LABEL_346:
        v165 = v163[v362];
      }
      v166 = ((unint64_t)a1 + v340) & v65;
      v167 = v360;
      if (v165 >= 0xF)
      {
        if (v362 <= 3)
          v168 = v362;
        else
          v168 = 4;
        __asm { BR              X12 }
      }
      switch(v165)
      {
        case 0u:
          v236 = *(_OWORD *)v163;
          *(_QWORD *)((((unint64_t)a1 + v340) & v65) + 0x10) = *((_QWORD *)v163 + 2);
          *(_OWORD *)v166 = v236;
          LODWORD(v237) = v362;
          v238 = v365;
          v239 = v353;
          v241 = v329;
          v240 = v330;
          if (v362 > 3)
            goto LABEL_521;
          v242 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          if (v242 > 0xFFF0)
          {
            *(_DWORD *)(v166 + v362) = 0;
          }
          else
          {
            if (v242 <= 0xF0)
            {
LABEL_521:
              *(_BYTE *)(v166 + v362) = 0;
              goto LABEL_686;
            }
            *(_WORD *)(v166 + v362) = 0;
          }
          goto LABEL_727;
        case 1u:
          *(_QWORD *)v166 = *(_QWORD *)v163;
          v237 = v362;
          v238 = v365;
          v239 = v353;
          v241 = v329;
          v240 = v330;
          if (v362 > 3)
            goto LABEL_536;
          v253 = 1;
          v242 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          if (v242 > 0xFFF0)
          {
            *(_DWORD *)(v166 + v362) = 1;
            goto LABEL_727;
          }
          if (v242 > 0xF0)
            goto LABEL_726;
LABEL_536:
          v254 = 1;
          goto LABEL_685;
        case 2u:
          *(_OWORD *)v166 = *(_OWORD *)v163;
          v237 = v362;
          v238 = v365;
          v239 = v353;
          v241 = v329;
          v240 = v330;
          if (v362 > 3)
            goto LABEL_540;
          v242 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          if (v242 > 0xFFF0)
          {
            *(_DWORD *)(v166 + v362) = 2;
            goto LABEL_727;
          }
          if (v242 <= 0xF0)
          {
LABEL_540:
            v254 = 2;
            goto LABEL_685;
          }
          v253 = 2;
          goto LABEL_726;
        case 3u:
          *(_BYTE *)v166 = *v163;
          v237 = v362;
          v238 = v365;
          v239 = v353;
          v241 = v329;
          v240 = v330;
          if (v362 > 3)
            goto LABEL_544;
          v242 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          if (v242 > 0xFFF0)
          {
            *(_DWORD *)(v166 + v362) = 3;
            goto LABEL_727;
          }
          if (v242 <= 0xF0)
          {
LABEL_544:
            v254 = 3;
            goto LABEL_685;
          }
          v253 = 3;
          goto LABEL_726;
        case 4u:
          *(_BYTE *)v166 = *v163;
          v237 = v362;
          v238 = v365;
          v239 = v353;
          v241 = v329;
          v240 = v330;
          if (v362 > 3)
            goto LABEL_548;
          v242 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          if (v242 > 0xFFF0)
          {
            *(_DWORD *)(v166 + v362) = 4;
            goto LABEL_727;
          }
          if (v242 <= 0xF0)
          {
LABEL_548:
            v254 = 4;
            goto LABEL_685;
          }
          v253 = 4;
          goto LABEL_726;
        case 5u:
          *(_BYTE *)v166 = *v163;
          v237 = v362;
          v238 = v365;
          v239 = v353;
          v241 = v329;
          v240 = v330;
          if (v362 > 3)
            goto LABEL_552;
          v242 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          if (v242 > 0xFFF0)
          {
            *(_DWORD *)(v166 + v362) = 5;
            goto LABEL_727;
          }
          if (v242 <= 0xF0)
          {
LABEL_552:
            v254 = 5;
            goto LABEL_685;
          }
          v253 = 5;
          goto LABEL_726;
        case 6u:
          *(_BYTE *)v166 = *v163;
          v237 = v362;
          v238 = v365;
          v239 = v353;
          v241 = v329;
          v240 = v330;
          if (v362 > 3)
            goto LABEL_556;
          v242 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          if (v242 > 0xFFF0)
          {
            *(_DWORD *)(v166 + v362) = 6;
            goto LABEL_727;
          }
          if (v242 <= 0xF0)
          {
LABEL_556:
            v254 = 6;
            goto LABEL_685;
          }
          v253 = 6;
          goto LABEL_726;
        case 7u:
          (*(void (**)(unint64_t, char *, uint64_t))(v335 + 16))(((unint64_t)a1 + v340) & v65, v163, v337);
          v255 = (_QWORD *)((v333 + v166) & 0xFFFFFFFFFFFFFFF8);
          v256 = (_QWORD *)((unint64_t)&v163[v333] & 0xFFFFFFFFFFFFFFF8);
          *v255 = *v256;
          v257 = ((unint64_t)v255 + v343) & v66;
          v258 = ((unint64_t)v256 + v343) & v66;
          v259 = *(void (**)(unint64_t, unint64_t, uint64_t))(v336 + 16);
          swift_bridgeObjectRetain();
          v259(v257, v258, v338);
          v260 = (_QWORD *)((v334 + v257) & 0xFFFFFFFFFFFFF8);
          v261 = (_QWORD *)((v334 + v258) & 0xFFFFFFFFFFFFF8);
          *v260 = *v261;
          v262 = (_QWORD *)(((unint64_t)v260 + 15) & 0xFFFFFFFFFFFFFFF8);
          v263 = (_QWORD *)(((unint64_t)v261 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v262 = *v263;
          v262[1] = v263[1];
          *(_BYTE *)(v103 + v166) = v163[v103];
          *(_BYTE *)((v103 + v166) | 1) = *(_BYTE *)((unint64_t)&v163[v103] | 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v167 = v360;
          v237 = v362;
          v238 = v365;
          v239 = v353;
          v241 = v329;
          v240 = v330;
          if (v362 > 3)
            goto LABEL_560;
          v242 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          if (v242 > 0xFFF0)
          {
            *(_DWORD *)(v166 + v362) = 7;
            goto LABEL_727;
          }
          if (v242 <= 0xF0)
          {
LABEL_560:
            v254 = 7;
            goto LABEL_685;
          }
          v253 = 7;
          goto LABEL_726;
        case 8u:
          v305 = *(void **)v163;
          *(_QWORD *)v166 = *(_QWORD *)v163;
          v306 = v305;
          v167 = v360;
          v237 = v362;
          v238 = v365;
          v239 = v353;
          v241 = v329;
          v240 = v330;
          if (v362 > 3)
            goto LABEL_646;
          v242 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          if (v242 > 0xFFF0)
          {
            *(_DWORD *)(v166 + v362) = 8;
            goto LABEL_727;
          }
          if (v242 <= 0xF0)
          {
LABEL_646:
            v254 = 8;
            goto LABEL_685;
          }
          v253 = 8;
          goto LABEL_726;
        case 9u:
          *(_BYTE *)v166 = *v163;
          v237 = v362;
          v238 = v365;
          v239 = v353;
          v241 = v329;
          v240 = v330;
          if (v362 > 3)
            goto LABEL_564;
          v242 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          if (v242 > 0xFFF0)
          {
            *(_DWORD *)(v166 + v362) = 9;
            goto LABEL_727;
          }
          if (v242 <= 0xF0)
          {
LABEL_564:
            v254 = 9;
            goto LABEL_685;
          }
          v253 = 9;
          goto LABEL_726;
        case 0xAu:
          *(_WORD *)v166 = *(_WORD *)v163;
          v237 = v362;
          v238 = v365;
          v239 = v353;
          v241 = v329;
          v240 = v330;
          if (v362 > 3)
            goto LABEL_568;
          v242 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          if (v242 > 0xFFF0)
          {
            *(_DWORD *)(v166 + v362) = 10;
            goto LABEL_727;
          }
          if (v242 <= 0xF0)
          {
LABEL_568:
            v254 = 10;
            goto LABEL_685;
          }
          v253 = 10;
          goto LABEL_726;
        case 0xBu:
          v265 = *(void **)v163;
          v264 = (void *)*((_QWORD *)v163 + 1);
          v266 = v163[16];
          sub_23AAAE478(v265, v264, v266);
          v167 = v360;
          *(_QWORD *)v166 = v265;
          *(_QWORD *)(v166 + 8) = v264;
          *(_BYTE *)(v166 + 16) = v266;
          v237 = v362;
          v238 = v365;
          v239 = v353;
          v241 = v329;
          v240 = v330;
          if (v362 > 3)
            goto LABEL_572;
          v242 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          if (v242 > 0xFFF0)
          {
            *(_DWORD *)(v166 + v362) = 11;
            goto LABEL_727;
          }
          if (v242 <= 0xF0)
          {
LABEL_572:
            v254 = 11;
            goto LABEL_685;
          }
          v253 = 11;
          goto LABEL_726;
        case 0xCu:
          v267 = *(_OWORD *)v163;
          *(_QWORD *)((((unint64_t)a1 + v340) & v65) + 0x10) = *((_QWORD *)v163 + 2);
          *(_OWORD *)v166 = v267;
          v237 = v362;
          v238 = v365;
          v239 = v353;
          v241 = v329;
          v240 = v330;
          if (v362 > 3)
            goto LABEL_576;
          v242 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          if (v242 > 0xFFF0)
          {
            *(_DWORD *)(v166 + v362) = 12;
            goto LABEL_727;
          }
          if (v242 <= 0xF0)
          {
LABEL_576:
            v254 = 12;
            goto LABEL_685;
          }
          v253 = 12;
          goto LABEL_726;
        case 0xDu:
          if (*((_QWORD *)v163 + 2) >> 60 == 11)
          {
            v268 = *(_OWORD *)v163;
            v269 = *((_OWORD *)v163 + 1);
            v270 = *((_OWORD *)v163 + 2);
            *(_QWORD *)((((unint64_t)a1 + v340) & v65) + 0x30) = *((_QWORD *)v163 + 6);
            *(_OWORD *)((((unint64_t)a1 + v340) & v65) + 0x10) = v269;
            *(_OWORD *)((((unint64_t)a1 + v340) & v65) + 0x20) = v270;
            *(_OWORD *)v166 = v268;
            v238 = v365;
            v239 = v353;
            v241 = v329;
            v240 = v330;
          }
          else
          {
            *(_QWORD *)v166 = *(_QWORD *)v163;
            v307 = (uint64_t *)(v163 + 8);
            v308 = *((_QWORD *)v163 + 2);
            v238 = v365;
            v239 = v353;
            v241 = v329;
            v240 = v330;
            if (v308 >> 60 == 15)
            {
              *(_OWORD *)(v166 + 8) = *(_OWORD *)v307;
            }
            else
            {
              v311 = *v307;
              sub_23AAAE668(*v307, *((_QWORD *)v163 + 2));
              v167 = v360;
              *(_QWORD *)(v166 + 8) = v311;
              *(_QWORD *)(v166 + 16) = v308;
            }
            v312 = *(_OWORD *)(v163 + 24);
            *(_BYTE *)(v166 + 40) = v163[40];
            *(_OWORD *)(v166 + 24) = v312;
            *(_QWORD *)(v166 + 48) = *((_QWORD *)v163 + 6);
          }
          *(_BYTE *)(v166 + 56) = v163[56];
          v237 = v362;
          if (v362 > 3)
            goto LABEL_684;
          v242 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          if (v242 > 0xFFF0)
          {
            *(_DWORD *)(v166 + v362) = 13;
            goto LABEL_727;
          }
          if (v242 <= 0xF0)
          {
LABEL_684:
            v254 = 13;
            goto LABEL_685;
          }
          v253 = 13;
          goto LABEL_726;
        case 0xEu:
          *(_BYTE *)v166 = *v163;
          v237 = v362;
          v238 = v365;
          v239 = v353;
          v241 = v329;
          v240 = v330;
          if (v362 > 3)
            goto LABEL_582;
          v242 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          if (v242 > 0xFFF0)
          {
            *(_DWORD *)(v166 + v362) = 14;
          }
          else
          {
            if (v242 <= 0xF0)
            {
LABEL_582:
              v254 = 14;
LABEL_685:
              *(_BYTE *)(v166 + v237) = v254;
LABEL_686:
              if (v237 > 3)
                goto LABEL_690;
              v313 = ((1 << (8 * v237)) + 3) >> (8 * v237);
              v314 = 2;
              if (v313 > 0xFFF0)
                v314 = 4;
              if (v313 <= 0xF0)
LABEL_690:
                v314 = 1;
LABEL_729:
              v319 = v363 + v314;
              if (v319 <= v356)
                v319 = v356;
              if (v167 > 3)
                goto LABEL_735;
              v320 = ((1 << (8 * v167)) + 3) >> (8 * v167);
              v321 = 2;
              if (v320 > 0xFFF0)
                v321 = 4;
              if (v320 <= 0xF0)
LABEL_735:
                v321 = 1;
              v322 = v355 + v321;
              if (v322 > v319)
                v319 = v322;
              if (v241 > v319)
                v319 = v241;
              if (v240 > v319)
                v319 = v240;
              if (v238 > v319)
                v319 = v238;
              if (v239 > v319)
                v319 = v239;
              *((_BYTE *)a1 + v319) = 8;
              return v61;
            }
            v253 = 14;
LABEL_726:
            *(_WORD *)(v166 + v237) = v253;
          }
LABEL_727:
          v318 = v242 > 0xFFF0;
          v314 = 2;
          if (v318)
            v314 = 4;
          goto LABEL_729;
        default:
          if (v362 > 3)
            goto LABEL_531;
          v251 = ((1 << (8 * v362)) + 3) >> (8 * v362);
          v252 = 2;
          if (v251 > 0xFFF0)
            v252 = 4;
          if (v251 <= 0xF0)
LABEL_531:
            v252 = 1;
          v238 = v365;
          v239 = v353;
          v241 = v329;
          v240 = v330;
          LODWORD(v237) = v362;
          memcpy((void *)(((unint64_t)a1 + v340) & v65), v163, v252 + v362);
          v167 = v360;
          goto LABEL_686;
      }
    case 9:
      v93 = *((unsigned __int8 *)v43 + v348);
      v345 = v69;
      if (v93 >= 2)
      {
        if (v348 <= 3)
          v94 = v348;
        else
          v94 = 4;
        __asm { BR              X12 }
      }
      v169 = v28 + 8;
      v358 = *(_QWORD *)(v27 + 64) + 7;
      v347 = v26;
      v170 = v93 == 1;
      v171 = v350;
      if (v93 == 1)
        v171 = v349;
      v172 = v43;
      (*(void (**)(_QWORD *))(v171 + 16))(a1);
      *((_BYTE *)a1 + v348) = v170;
      v173 = (char *)(((unint64_t)v172 + v364 + v29) & v67);
      v174 = v360;
      if (v360 > 3)
        goto LABEL_359;
      v175 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      if (v175 > 0xFFF0)
      {
        v176 = *(_DWORD *)&v173[v360];
      }
      else if (v175 > 0xF0)
      {
        v176 = *(unsigned __int16 *)&v173[v360];
      }
      else
      {
LABEL_359:
        v176 = v173[v360];
      }
      v177 = (char *)(((unint64_t)a1 + v364 + v29) & v67);
      if (v176 >= 0xF)
      {
        if (v360 <= 3)
          v178 = v360;
        else
          v178 = 4;
        __asm { BR              X12 }
      }
      return result;
    case 10:
      v95 = *((unsigned __int8 *)v43 + v348);
      if (v95 >= 2)
      {
        if (v348 <= 3)
          v96 = v348;
        else
          v96 = 4;
        __asm { BR              X12 }
      }
      v61 = a1;
      v179 = v95 == 1;
      v180 = v2;
      if (v95 == 1)
        v180 = v349;
      v181 = v43;
      (*(void (**)(_QWORD *))(v180 + 16))(a1);
      *((_BYTE *)a1 + v348) = v179;
      v182 = ((unint64_t)v181 + v364 + 7) & 0xFFFFFFFFFFFFFFF8;
      v183 = *(_BYTE *)(v182 + 8);
      v184 = ((unint64_t)a1 + v364 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v184 = *(_QWORD *)v182;
      *(_BYTE *)(v184 + 8) = v183;
      if (v362 > 3)
        goto LABEL_373;
      v185 = ((1 << (8 * v362)) + 3) >> (8 * v362);
      v186 = 2;
      if (v185 > 0xFFF0)
        v186 = 4;
      if (v185 <= 0xF0)
LABEL_373:
        v186 = 1;
      v187 = v363 + v186;
      if (v187 <= v356)
        v187 = v356;
      if (v360 > 3)
        goto LABEL_380;
      v188 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      v189 = 2;
      if (v188 > 0xFFF0)
        v189 = 4;
      if (v188 <= 0xF0)
LABEL_380:
        v189 = 1;
      v190 = v355 + v189;
      if (v190 > v187)
        v187 = v190;
      if (v329 > v187)
        v187 = v329;
      if (v330 > v187)
        v187 = v330;
      if (v365 > v187)
        v187 = v365;
      if (v353 > v187)
        v187 = v353;
      *((_BYTE *)a1 + v187) = 10;
      return v61;
    case 11:
      v97 = *((unsigned __int8 *)v43 + v348);
      if (v97 >= 2)
      {
        if (v348 <= 3)
          v98 = v348;
        else
          v98 = 4;
        __asm { BR              X12 }
      }
      v61 = a1;
      v191 = v97 == 1;
      v192 = v2;
      if (v97 == 1)
        v192 = v349;
      v193 = v43;
      (*(void (**)(_QWORD *))(v192 + 16))(a1);
      *((_BYTE *)a1 + v348) = v191;
      *(_OWORD *)(((unint64_t)a1 + v364 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v193
                                                                                       + v364
                                                                                       + 7) & 0xFFFFFFFFFFFFF8);
      if (v362 > 3)
        goto LABEL_398;
      v194 = ((1 << (8 * v362)) + 3) >> (8 * v362);
      v195 = 2;
      if (v194 > 0xFFF0)
        v195 = 4;
      if (v194 <= 0xF0)
LABEL_398:
        v195 = 1;
      v196 = v363 + v195;
      if (v196 <= v356)
        v196 = v356;
      if (v360 > 3)
        goto LABEL_405;
      v197 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      v198 = 2;
      if (v197 > 0xFFF0)
        v198 = 4;
      if (v197 <= 0xF0)
LABEL_405:
        v198 = 1;
      v199 = v355 + v198;
      if (v199 > v196)
        v196 = v199;
      if (v329 > v196)
        v196 = v329;
      if (v330 > v196)
        v196 = v330;
      if (v365 > v196)
        v196 = v365;
      if (v353 > v196)
        v196 = v353;
      *((_BYTE *)a1 + v196) = 11;
      return v61;
    case 12:
      v99 = *((unsigned __int8 *)v43 + v348);
      if (v99 >= 2)
      {
        if (v348 <= 3)
          v100 = v348;
        else
          v100 = 4;
        __asm { BR              X12 }
      }
      v61 = a1;
      v200 = v99 == 1;
      v201 = v2;
      if (v99 == 1)
        v201 = v349;
      v202 = v43;
      (*(void (**)(_QWORD *))(v201 + 16))(a1);
      *((_BYTE *)a1 + v348) = v200;
      *((_BYTE *)a1 + v364) = *((_BYTE *)v202 + v364);
      if (v362 > 3)
        goto LABEL_423;
      v203 = ((1 << (8 * v362)) + 3) >> (8 * v362);
      v204 = 2;
      if (v203 > 0xFFF0)
        v204 = 4;
      if (v203 <= 0xF0)
LABEL_423:
        v204 = 1;
      v205 = v363 + v204;
      if (v205 <= v356)
        v205 = v356;
      if (v360 > 3)
        goto LABEL_430;
      v206 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      v207 = 2;
      if (v206 > 0xFFF0)
        v207 = 4;
      if (v206 <= 0xF0)
LABEL_430:
        v207 = 1;
      v208 = v355 + v207;
      if (v208 > v205)
        v205 = v208;
      if (v329 > v205)
        v205 = v329;
      if (v330 > v205)
        v205 = v330;
      if (v365 > v205)
        v205 = v365;
      if (v353 > v205)
        v205 = v353;
      *((_BYTE *)a1 + v205) = 12;
      return v61;
    case 13:
      v101 = *((unsigned __int8 *)v43 + v348);
      if (v101 >= 2)
      {
        if (v348 <= 3)
          v102 = v348;
        else
          v102 = 4;
        __asm { BR              X12 }
      }
      v61 = a1;
      v209 = v101 == 1;
      v210 = v2;
      if (v101 == 1)
        v210 = v349;
      v211 = v43;
      (*(void (**)(_QWORD *))(v210 + 16))(a1);
      *((_BYTE *)a1 + v348) = v209;
      v212 = (_QWORD *)(((unint64_t)a1 + v364 + 7) & 0xFFFFFFFFFFFFF8);
      v213 = (_QWORD *)(((unint64_t)v211 + v364 + 7) & 0xFFFFFFFFFFFFF8);
      *v212 = *v213;
      *(_QWORD *)(((unint64_t)v212 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v213 + 15) & 0xFFFFFFFFFFFFF8);
      if (v362 > 3)
        goto LABEL_448;
      v214 = ((1 << (8 * v362)) + 3) >> (8 * v362);
      v215 = 2;
      if (v214 > 0xFFF0)
        v215 = 4;
      if (v214 <= 0xF0)
LABEL_448:
        v215 = 1;
      v216 = v363 + v215;
      if (v216 <= v356)
        v216 = v356;
      if (v360 > 3)
        goto LABEL_455;
      v217 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      v218 = 2;
      if (v217 > 0xFFF0)
        v218 = 4;
      if (v217 <= 0xF0)
LABEL_455:
        v218 = 1;
      v219 = v355 + v218;
      if (v219 > v216)
        v216 = v219;
      if (v329 > v216)
        v216 = v329;
      if (v330 > v216)
        v216 = v330;
      if (v365 > v216)
        v216 = v365;
      if (v353 > v216)
        v216 = v353;
      *((_BYTE *)a1 + v216) = 13;
      return v61;
    default:
      if (v362 > 3)
        goto LABEL_75;
      v53 = ((1 << (8 * v362)) + 3) >> (8 * v362);
      v54 = 2;
      if (v53 > 0xFFF0)
        v54 = 4;
      if (v53 <= 0xF0)
LABEL_75:
        v54 = 1;
      v55 = v363 + v54;
      if (v55 <= v356)
        v55 = v356;
      if (v33 > 3)
        goto LABEL_82;
      v56 = ((1 << (8 * v33)) + 3) >> (8 * v33);
      v57 = 2;
      if (v56 > 0xFFF0)
        v57 = 4;
      if (v56 <= 0xF0)
LABEL_82:
        v57 = 1;
      v58 = v36 + v57;
      if (v58 > v55)
        v55 = v58;
      if (v38 > v55)
        v55 = v38;
      if (v39 > v55)
        v55 = v39;
      if (v365 > v55)
        v55 = v365;
      if (v41 > v55)
        LODWORD(v55) = v41;
      if (v55 <= 3)
        v59 = v55;
      else
        v59 = 4;
      __asm { BR              X15 }
      return result;
  }
  switch(v176)
  {
    case 0u:
      v243 = *(_OWORD *)v173;
      *(_QWORD *)((((unint64_t)a1 + v364 + v29) & v67) + 0x10) = *(_QWORD *)((((unint64_t)v172 + v364 + v29) & v67)
                                                                                  + 0x10);
      *(_OWORD *)v177 = v243;
      v61 = a1;
      v244 = v362;
      v245 = v365;
      v246 = v353;
      v247 = v355;
      v249 = v329;
      v248 = v330;
      if (v360 > 3)
        goto LABEL_526;
      v250 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      if (v250 > 0xFFF0)
      {
        *(_DWORD *)&v177[v360] = 0;
      }
      else if (v250 > 0xF0)
      {
        *(_WORD *)&v177[v360] = 0;
      }
      else
      {
LABEL_526:
        v177[v360] = 0;
      }
      break;
    case 1u:
      *(_QWORD *)v177 = *(_QWORD *)v173;
      v61 = a1;
      v244 = v362;
      v245 = v365;
      v246 = v353;
      v247 = v355;
      v249 = v329;
      v248 = v330;
      if (v360 > 3)
        goto LABEL_592;
      v273 = 1;
      v274 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      if (v274 > 0xFFF0)
      {
        *(_DWORD *)&v177[v360] = 1;
      }
      else
      {
        if (v274 > 0xF0)
          goto LABEL_748;
LABEL_592:
        v177[v360] = 1;
      }
      break;
    case 2u:
      *(_OWORD *)v177 = *(_OWORD *)v173;
      v61 = a1;
      v244 = v362;
      v245 = v365;
      v246 = v353;
      v247 = v355;
      v249 = v329;
      v248 = v330;
      if (v360 > 3)
        goto LABEL_596;
      v275 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      if (v275 > 0xFFF0)
      {
        *(_DWORD *)&v177[v360] = 2;
      }
      else
      {
        if (v275 > 0xF0)
        {
          v273 = 2;
          goto LABEL_748;
        }
LABEL_596:
        v177[v360] = 2;
      }
      break;
    case 3u:
      *v177 = *v173;
      v61 = a1;
      v244 = v362;
      v245 = v365;
      v246 = v353;
      v247 = v355;
      v249 = v329;
      v248 = v330;
      if (v360 > 3)
        goto LABEL_600;
      v276 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      if (v276 > 0xFFF0)
      {
        *(_DWORD *)&v177[v360] = 3;
      }
      else
      {
        if (v276 > 0xF0)
        {
          v273 = 3;
          goto LABEL_748;
        }
LABEL_600:
        v177[v360] = 3;
      }
      break;
    case 4u:
      *v177 = *v173;
      v61 = a1;
      v244 = v362;
      v245 = v365;
      v246 = v353;
      v247 = v355;
      v249 = v329;
      v248 = v330;
      if (v360 > 3)
        goto LABEL_604;
      v277 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      if (v277 > 0xFFF0)
      {
        *(_DWORD *)&v177[v360] = 4;
      }
      else
      {
        if (v277 > 0xF0)
        {
          v273 = 4;
          goto LABEL_748;
        }
LABEL_604:
        v177[v360] = 4;
      }
      break;
    case 5u:
      *v177 = *v173;
      v61 = a1;
      v244 = v362;
      v245 = v365;
      v246 = v353;
      v247 = v355;
      v249 = v329;
      v248 = v330;
      if (v360 > 3)
        goto LABEL_608;
      v278 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      if (v278 > 0xFFF0)
      {
        *(_DWORD *)&v177[v360] = 5;
      }
      else
      {
        if (v278 > 0xF0)
        {
          v273 = 5;
          goto LABEL_748;
        }
LABEL_608:
        v177[v360] = 5;
      }
      break;
    case 6u:
      *v177 = *v173;
      v61 = a1;
      v244 = v362;
      v245 = v365;
      v246 = v353;
      v247 = v355;
      v249 = v329;
      v248 = v330;
      if (v360 > 3)
        goto LABEL_612;
      v279 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      if (v279 > 0xFFF0)
      {
        *(_DWORD *)&v177[v360] = 6;
      }
      else
      {
        if (v279 > 0xF0)
        {
          v273 = 6;
          goto LABEL_748;
        }
LABEL_612:
        v177[v360] = 6;
      }
      break;
    case 7u:
      (*(void (**)(char *, unint64_t, uint64_t))(v331 + 16))(v177, ((unint64_t)v172 + v364 + v29) & v67, v332);
      v280 = (_QWORD *)((unint64_t)&v177[v31] & 0xFFFFFFFFFFFFFFF8);
      v281 = (_QWORD *)((unint64_t)&v173[v31] & 0xFFFFFFFFFFFFFFF8);
      *v280 = *v281;
      v282 = ((unint64_t)v280 + v169) & v68;
      v283 = ((unint64_t)v281 + v169) & v68;
      v284 = *(void (**)(unint64_t, unint64_t, uint64_t))(v27 + 16);
      swift_bridgeObjectRetain();
      v284(v282, v283, v347);
      v285 = (_QWORD *)((v358 + v282) & 0xFFFFFFFFFFFFF8);
      v286 = (_QWORD *)((v358 + v283) & 0xFFFFFFFFFFFFF8);
      *v285 = *v286;
      v287 = (_QWORD *)(((unint64_t)v285 + 15) & 0xFFFFFFFFFFFFFFF8);
      v288 = (_QWORD *)(((unint64_t)v286 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v287 = *v288;
      v287[1] = v288[1];
      v177[v345] = v173[v345];
      *(_BYTE *)((unint64_t)&v177[v345] | 1) = *(_BYTE *)((unint64_t)&v173[v345] | 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v174 = v360;
      v61 = a1;
      v245 = v365;
      v246 = v353;
      v247 = v355;
      v249 = v329;
      v248 = v330;
      v244 = v362;
      if (v360 > 3)
        goto LABEL_616;
      v289 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      if (v289 > 0xFFF0)
      {
        *(_DWORD *)&v177[v360] = 7;
      }
      else
      {
        if (v289 > 0xF0)
        {
          v273 = 7;
          goto LABEL_748;
        }
LABEL_616:
        v177[v360] = 7;
      }
      break;
    case 8u:
      v290 = *(void **)v173;
      *(_QWORD *)v177 = *(_QWORD *)v173;
      v291 = v290;
      v174 = v360;
      v61 = a1;
      v245 = v365;
      v246 = v353;
      v247 = v355;
      v249 = v329;
      v248 = v330;
      v244 = v362;
      if (v360 > 3)
        goto LABEL_620;
      v292 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      if (v292 > 0xFFF0)
      {
        *(_DWORD *)&v177[v360] = 8;
      }
      else
      {
        if (v292 > 0xF0)
        {
          v273 = 8;
          goto LABEL_748;
        }
LABEL_620:
        v177[v360] = 8;
      }
      break;
    case 9u:
      *v177 = *v173;
      v61 = a1;
      v244 = v362;
      v245 = v365;
      v246 = v353;
      v247 = v355;
      v249 = v329;
      v248 = v330;
      if (v360 > 3)
        goto LABEL_624;
      v293 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      if (v293 > 0xFFF0)
      {
        *(_DWORD *)&v177[v360] = 9;
      }
      else
      {
        if (v293 > 0xF0)
        {
          v273 = 9;
          goto LABEL_748;
        }
LABEL_624:
        v177[v360] = 9;
      }
      break;
    case 0xAu:
      *(_WORD *)v177 = *(_WORD *)v173;
      v61 = a1;
      v244 = v362;
      v245 = v365;
      v246 = v353;
      v247 = v355;
      v249 = v329;
      v248 = v330;
      if (v360 > 3)
        goto LABEL_628;
      v294 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      if (v294 > 0xFFF0)
      {
        *(_DWORD *)&v177[v360] = 10;
      }
      else
      {
        if (v294 > 0xF0)
        {
          v273 = 10;
          goto LABEL_748;
        }
LABEL_628:
        v177[v360] = 10;
      }
      break;
    case 0xBu:
      v296 = *(_QWORD *)v173;
      v295 = (void *)*((_QWORD *)v173 + 1);
      v297 = v173[16];
      sub_23AAAE478(*(id *)v173, v295, v297);
      v174 = v360;
      v61 = a1;
      *(_QWORD *)v177 = v296;
      *((_QWORD *)v177 + 1) = v295;
      v177[16] = v297;
      v245 = v365;
      v246 = v353;
      v247 = v355;
      v249 = v329;
      v248 = v330;
      v244 = v362;
      if (v360 > 3)
        goto LABEL_632;
      v298 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      if (v298 > 0xFFF0)
      {
        *(_DWORD *)&v177[v360] = 11;
      }
      else
      {
        if (v298 > 0xF0)
        {
          v273 = 11;
          goto LABEL_748;
        }
LABEL_632:
        v177[v360] = 11;
      }
      break;
    case 0xCu:
      v299 = *(_OWORD *)v173;
      *(_QWORD *)((((unint64_t)a1 + v364 + v29) & v67) + 0x10) = *(_QWORD *)((((unint64_t)v172 + v364 + v29) & v67)
                                                                                  + 0x10);
      *(_OWORD *)v177 = v299;
      v61 = a1;
      v244 = v362;
      v245 = v365;
      v246 = v353;
      v247 = v355;
      v249 = v329;
      v248 = v330;
      if (v360 > 3)
        goto LABEL_636;
      v300 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      if (v300 > 0xFFF0)
      {
        *(_DWORD *)&v177[v360] = 12;
      }
      else
      {
        if (v300 > 0xF0)
        {
          v273 = 12;
          goto LABEL_748;
        }
LABEL_636:
        v177[v360] = 12;
      }
      break;
    case 0xDu:
      if (*(_QWORD *)((((unint64_t)v172 + v364 + v29) & v67) + 0x10) >> 60 == 11)
      {
        v301 = *(_OWORD *)v173;
        v302 = *(_OWORD *)((((unint64_t)v172 + v364 + v29) & v67) + 0x10);
        v303 = *(_OWORD *)((((unint64_t)v172 + v364 + v29) & v67) + 0x20);
        *(_QWORD *)((((unint64_t)a1 + v364 + v29) & v67) + 0x30) = *(_QWORD *)((((unint64_t)v172
                                                                                      + v364
                                                                                      + v29) & v67)
                                                                                    + 0x30);
        *(_OWORD *)((((unint64_t)a1 + v364 + v29) & v67) + 0x10) = v302;
        *(_OWORD *)((((unint64_t)a1 + v364 + v29) & v67) + 0x20) = v303;
        *(_OWORD *)v177 = v301;
        v61 = a1;
        v247 = v355;
      }
      else
      {
        *(_QWORD *)v177 = *(_QWORD *)v173;
        v309 = (uint64_t *)(v173 + 8);
        v310 = *(_QWORD *)((((unint64_t)v172 + v364 + v29) & v67) + 0x10);
        v61 = a1;
        v247 = v355;
        if (v310 >> 60 == 15)
        {
          *(_OWORD *)((((unint64_t)a1 + v364 + v29) & v67) + 8) = *(_OWORD *)v309;
        }
        else
        {
          v315 = *v309;
          sub_23AAAE668(*v309, *((_QWORD *)v173 + 2));
          v174 = v360;
          *(_QWORD *)((((unint64_t)a1 + v364 + v29) & v67) + 8) = v315;
          *(_QWORD *)((((unint64_t)a1 + v364 + v29) & v67) + 0x10) = v310;
        }
        v316 = *(_OWORD *)(v173 + 24);
        *(_BYTE *)((((unint64_t)a1 + v364 + v29) & v67) + 0x28) = v173[40];
        *(_OWORD *)((((unint64_t)a1 + v364 + v29) & v67) + 0x18) = v316;
        *(_QWORD *)((((unint64_t)a1 + v364 + v29) & v67) + 0x30) = *((_QWORD *)v173 + 6);
      }
      *(_BYTE *)((((unint64_t)a1 + v364 + v29) & v67) + 0x38) = v173[56];
      v245 = v365;
      v246 = v353;
      v249 = v329;
      v248 = v330;
      v244 = v362;
      if (v174 > 3)
        goto LABEL_696;
      v317 = ((1 << (8 * v174)) + 3) >> (8 * v174);
      if (v317 > 0xFFF0)
      {
        *(_DWORD *)&v177[v174] = 13;
      }
      else
      {
        if (v317 > 0xF0)
        {
          v273 = 13;
          goto LABEL_748;
        }
LABEL_696:
        v177[v174] = 13;
      }
      break;
    case 0xEu:
      *v177 = *v173;
      v61 = a1;
      v244 = v362;
      v245 = v365;
      v246 = v353;
      v247 = v355;
      v249 = v329;
      v248 = v330;
      if (v360 > 3)
        goto LABEL_642;
      v304 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      if (v304 > 0xFFF0)
      {
        *(_DWORD *)&v177[v360] = 14;
      }
      else
      {
        if (v304 > 0xF0)
        {
          v273 = 14;
LABEL_748:
          *(_WORD *)&v177[v174] = v273;
          break;
        }
LABEL_642:
        v177[v360] = 14;
      }
      break;
    default:
      if (v360 > 3)
        goto LABEL_587;
      v271 = ((1 << (8 * v360)) + 3) >> (8 * v360);
      v272 = 2;
      if (v271 > 0xFFF0)
        v272 = 4;
      if (v271 <= 0xF0)
LABEL_587:
        v272 = 1;
      v61 = a1;
      v247 = v355;
      memcpy(v177, (const void *)(((unint64_t)v172 + v364 + v29) & v67), v272 + v360);
      LODWORD(v174) = v360;
      v245 = v365;
      v246 = v353;
      v249 = v329;
      v248 = v330;
      v244 = v362;
      break;
  }
  if (v244 > 3)
    goto LABEL_753;
  v323 = ((1 << (8 * v244)) + 3) >> (8 * v244);
  v324 = 2;
  if (v323 > 0xFFF0)
    v324 = 4;
  if (v323 <= 0xF0)
LABEL_753:
    v324 = 1;
  v325 = v363 + v324;
  if (v325 <= v356)
    v325 = v356;
  if (v174 > 3)
    goto LABEL_760;
  v326 = ((1 << (8 * v174)) + 3) >> (8 * v174);
  v327 = 2;
  if (v326 > 0xFFF0)
    v327 = 4;
  if (v326 <= 0xF0)
LABEL_760:
    v327 = 1;
  v328 = v247 + v327;
  if (v328 > v325)
    v325 = v328;
  if (v249 > v325)
    v325 = v249;
  if (v248 > v325)
    v325 = v248;
  if (v245 > v325)
    v325 = v245;
  if (v246 > v325)
    v325 = v246;
  *((_BYTE *)v61 + v325) = 9;
  return v61;
}

void sub_23AB40C50(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void **v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void **v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  void *v101;
  void *v102;
  void *v103;
  char v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t AssociatedTypeWitness;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v131;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v2 = *(_QWORD *)(v1 + 64);
  v3 = swift_getAssociatedTypeWitness();
  v121 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 <= v2)
    v6 = v2;
  else
    v6 = *(_QWORD *)(v4 + 64);
  v7 = v6 + 1;
  v119 = *(_QWORD *)(v3 - 8);
  v8 = *(_DWORD *)(v4 + 80);
  v116 = v2 + v8;
  v129 = v8;
  v9 = v5 + (v116 & ~(unint64_t)v8);
  v123 = v6;
  v124 = v6 + 2;
  if (v9 + 1 > v6 + 2)
    v10 = v9 + 1;
  else
    v10 = v6 + 2;
  if (v7 > v10)
    v10 = v6 + 1;
  v11 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 0xFFFFFFFFFFFFFFF8) + 16 > v10)
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
  v120 = v1;
  v12 = *(unsigned __int8 *)(v1 + 80) | v8;
  v118 = v7 + v12;
  v127 = v12;
  if (((v7 + v12) & ~v12) + v7 <= v10)
    v13 = v10;
  else
    v13 = ((v7 + v12) & ~v12) + v7;
  v114 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v114 - 8);
  v15 = *(_DWORD *)(v14 + 80) & 0xF8;
  v115 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v115 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = v15 | v17 | 7;
  v131 = v7;
  v117 = v7 + v18;
  v125 = v18;
  v19 = (v7 + v18) & ~v18;
  v112 = v14;
  v109 = *(_QWORD *)(v14 + 64) + 7;
  v110 = v17 + 8;
  v126 = v17;
  v113 = v16;
  v111 = *(_QWORD *)(v16 + 64) + 7;
  if (((((v111 + ((v17 + 8 + (v109 & 0xFFFFFFFFFFFFFFF8)) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 18 <= 0x39)
    v20 = 57;
  else
    v20 = ((((v111 + ((v17 + 8 + (v109 & 0xFFFFFFFFFFFFFFF8)) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 18;
  if (v20 > 3)
    goto LABEL_21;
  v21 = ((1 << (8 * v20)) + 3) >> (8 * v20);
  v22 = 2;
  if (v21 > 0xFFF0)
    v22 = 4;
  if (v21 <= 0xF0)
LABEL_21:
    v22 = 1;
  v23 = v20 + v19 + v22;
  if (v23 <= v13)
    v24 = v13;
  else
    v24 = v23;
  v108 = swift_getAssociatedTypeWitness();
  v25 = *(_QWORD *)(v108 - 8);
  v26 = *(_DWORD *)(v25 + 80) & 0xF8;
  v27 = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(unsigned __int8 *)(v28 + 80);
  v30 = v26 | v29 | 7;
  v31 = (v131 + v30) & ~v30;
  v107 = v25;
  v32 = *(_QWORD *)(v25 + 64) + 7;
  v33 = *(_QWORD *)(v28 + 64) + 7;
  if (((((v33 + ((v29 + 8 + (v32 & 0xFFFFFFFFFFFFFFF8)) & ~v29)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 18 <= 0x39)
    v34 = 57;
  else
    v34 = ((((v33 + ((v29 + 8 + (v32 & 0xFFFFFFFFFFFFFFF8)) & ~v29)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 18;
  v35 = 8 * v34;
  if (v34 <= 3)
    v36 = (((1 << (8 * v34)) + 3) >> (8 * v34)) + 15;
  else
    v36 = 16;
  v37 = v11 + 17;
  v38 = v11 + 24;
  v39 = ((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v40 = 4;
  if (v36 < 0x10000)
    v40 = 2;
  if (v36 < 0x100)
    v41 = 1;
  else
    v41 = v40;
  v42 = v34 + v31;
  v43 = v34 + v31 + v41;
  if (v43 <= v24)
    v43 = v24;
  if (v37 > v43)
    v43 = v11 + 17;
  if (v38 > v43)
    v43 = v11 + 24;
  if (v124 > v43)
    v43 = v124;
  if (v39 > v43)
    v43 = ((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v51 = v20;
  v52 = ~v127;
  v53 = ~v125;
  v54 = ~v126;
  v55 = ~v30;
  v56 = ~v29;
  switch(*(_BYTE *)(a1 + v43))
  {
    case 0:
      v57 = *(unsigned __int8 *)(a1 + v123);
      if (v57 >= 2)
      {
        if (v123 <= 3)
          v58 = v123;
        else
          v58 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 1:
      (*(void (**)(uint64_t, uint64_t))(v120 + 8))(a1, AssociatedTypeWitness);
      v59 = (v116 + a1) & ~v129;
      goto LABEL_190;
    case 2:
      v57 = *(unsigned __int8 *)(a1 + v123);
      if (v57 >= 2)
      {
        if (v123 <= 3)
          v60 = v123;
        else
          v60 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 3:
      v57 = *(unsigned __int8 *)(a1 + v123);
      if (v57 >= 2)
      {
        if (v123 <= 3)
          v61 = v123;
        else
          v61 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 4:
      v57 = *(unsigned __int8 *)(a1 + v123);
      if (v57 >= 2)
      {
        if (v123 <= 3)
          v62 = v123;
        else
          v62 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 5:
      v57 = *(unsigned __int8 *)(a1 + v123);
      if (v57 >= 2)
      {
        if (v123 <= 3)
          v63 = v123;
        else
          v63 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 6:
      v64 = *(unsigned __int8 *)(a1 + v123);
      if (v64 >= 2)
      {
        if (v123 <= 3)
          v65 = v123;
        else
          v65 = 4;
        __asm { BR              X12 }
      }
      v79 = v120;
      if (v64 == 1)
      {
        v79 = v119;
        v80 = v121;
      }
      else
      {
        v80 = AssociatedTypeWitness;
      }
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(a1, v80);
      v59 = (v118 + a1) & v52;
      v81 = *(unsigned __int8 *)(v59 + v123);
      if (v81 >= 2)
      {
        if (v123 <= 3)
          v82 = v123;
        else
          v82 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_189;
    case 7:
      v66 = *(unsigned __int8 *)(a1 + v123);
      if (v66 >= 2)
      {
        if (v123 <= 3)
          v67 = v123;
        else
          v67 = 4;
        __asm { BR              X12 }
      }
      v83 = v120;
      if (v66 == 1)
      {
        v83 = v119;
        v84 = v121;
      }
      else
      {
        v84 = AssociatedTypeWitness;
      }
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(a1, v84);
      v59 = (v118 + a1) & v52;
      v81 = *(unsigned __int8 *)(v59 + v123);
      if (v81 >= 2)
      {
        if (v123 <= 3)
          v85 = v123;
        else
          v85 = 4;
        __asm { BR              X12 }
      }
LABEL_189:
      if (v81 == 1)
      {
LABEL_190:
        v76 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
        goto LABEL_191;
      }
      v76 = *(void (**)(uint64_t, uint64_t))(v120 + 8);
      goto LABEL_143;
    case 8:
      v68 = *(unsigned __int8 *)(a1 + v123);
      if (v68 >= 2)
      {
        if (v123 <= 3)
          v69 = v123;
        else
          v69 = 4;
        __asm { BR              X12 }
      }
      v78 = v51;
      v86 = v120;
      if (v68 == 1)
      {
        v86 = v119;
        v87 = v121;
      }
      else
      {
        v87 = AssociatedTypeWitness;
      }
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(a1, v87);
      v88 = (void **)((v117 + a1) & v53);
      if (v78 > 3)
        goto LABEL_165;
      v90 = ((1 << (8 * v78)) + 3) >> (8 * v78);
      if (v90 > 0xFFF0)
      {
        v89 = *(_DWORD *)((char *)v88 + v78);
      }
      else if (v90 <= 0xF0)
      {
LABEL_165:
        v89 = *((unsigned __int8 *)v88 + v78);
      }
      else
      {
        v89 = *(unsigned __int16 *)((char *)v88 + v78);
      }
      if (v89 >= 0xF)
      {
        if (v78 <= 3)
          v91 = v78;
        else
          v91 = 4;
        __asm { BR              X12 }
      }
      switch(v89)
      {
        case 7u:
          (*(void (**)(uint64_t, uint64_t))(v112 + 8))((v117 + a1) & v53, v114);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v113 + 8))((v110 + (((unint64_t)v88 + v109) & 0xFFFFFFFFFFFFFFF8)) & v54, v115);
          goto LABEL_203;
        case 8u:
          v101 = *v88;
          goto LABEL_205;
        case 0xBu:
          v102 = *v88;
          v103 = *(void **)(((v117 + a1) & v53) + 8);
          v104 = *(_BYTE *)(((v117 + a1) & v53) + 0x10);
          goto LABEL_207;
        case 0xDu:
          v105 = *(_QWORD *)(((v117 + a1) & v53) + 0x10);
          if (v105 >> 60 == 11 || v105 >> 60 == 15)
            return;
          v106 = *(_QWORD *)(((v117 + a1) & v53) + 8);
          break;
        default:
          return;
      }
LABEL_211:
      sub_23AAAE53C(v106, v105);
      return;
    case 9:
      v70 = *(unsigned __int8 *)(a1 + v123);
      if (v70 >= 2)
      {
        if (v123 <= 3)
          v71 = v123;
        else
          v71 = 4;
        __asm { BR              X12 }
      }
      v92 = v32;
      v93 = v29 + 8;
      v128 = v27;
      v94 = *(_QWORD *)(v27 - 8);
      v95 = v120;
      if (v70 == 1)
      {
        v95 = v119;
        v96 = v121;
      }
      else
      {
        v96 = AssociatedTypeWitness;
      }
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(a1, v96);
      v97 = (void **)((v131 + a1 + v30) & v55);
      if (v34 > 3)
        goto LABEL_179;
      v99 = ((1 << v35) + 3) >> v35;
      if (v99 > 0xFFF0)
      {
        v98 = *(_DWORD *)((char *)v97 + v34);
      }
      else if (v99 <= 0xF0)
      {
LABEL_179:
        v98 = *((unsigned __int8 *)v97 + v34);
      }
      else
      {
        v98 = *(unsigned __int16 *)((char *)v97 + v34);
      }
      if (v98 >= 0xF)
      {
        if (v34 <= 3)
          v100 = v34;
        else
          v100 = 4;
        __asm { BR              X12 }
      }
      switch(v98)
      {
        case 7u:
          (*(void (**)(unint64_t, uint64_t))(v107 + 8))((v131 + a1 + v30) & v55, v108);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v94 + 8))((v93 + (((unint64_t)v97 + v92) & 0xFFFFFFFFFFFFFFF8)) & v56, v128);
LABEL_203:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          break;
        case 8u:
          v101 = *v97;
LABEL_205:

          break;
        case 0xBu:
          v102 = *v97;
          v103 = *(void **)(((v131 + a1 + v30) & v55) + 8);
          v104 = *(_BYTE *)(((v131 + a1 + v30) & v55) + 0x10);
LABEL_207:
          sub_23AAAEE10(v102, v103, v104);
          break;
        case 0xDu:
          v105 = *(_QWORD *)(((v131 + a1 + v30) & v55) + 0x10);
          if (v105 >> 60 != 11 && v105 >> 60 != 15)
          {
            v106 = *(_QWORD *)(((v131 + a1 + v30) & v55) + 8);
            goto LABEL_211;
          }
          break;
        default:
          return;
      }
      return;
    case 0xA:
      v57 = *(unsigned __int8 *)(a1 + v123);
      if (v57 >= 2)
      {
        if (v123 <= 3)
          v72 = v123;
        else
          v72 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 0xB:
      v57 = *(unsigned __int8 *)(a1 + v123);
      if (v57 >= 2)
      {
        if (v123 <= 3)
          v73 = v123;
        else
          v73 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 0xC:
      v57 = *(unsigned __int8 *)(a1 + v123);
      if (v57 >= 2)
      {
        if (v123 <= 3)
          v74 = v123;
        else
          v74 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 0xD:
      v57 = *(unsigned __int8 *)(a1 + v123);
      if (v57 >= 2)
      {
        if (v123 <= 3)
          v75 = v123;
        else
          v75 = 4;
        __asm { BR              X12 }
      }
LABEL_140:
      if (v57 == 1)
      {
        v76 = *(void (**)(uint64_t, uint64_t))(v119 + 8);
        v59 = a1;
LABEL_191:
        v77 = v121;
      }
      else
      {
        v76 = *(void (**)(uint64_t, uint64_t))(v120 + 8);
        v59 = a1;
LABEL_143:
        v77 = AssociatedTypeWitness;
      }
      v76(v59, v77);
      return;
    default:
      if (v55 > 3)
        goto LABEL_51;
      v44 = ((1 << (8 * v55)) + 3) >> (8 * v55);
      v45 = 2;
      if (v44 > 0xFFF0)
        v45 = 4;
      if (v44 <= 0xF0)
LABEL_51:
        v45 = 1;
      v46 = v54 + v45;
      if (v46 <= v52)
        v46 = ~v127;
      if (v34 > 3)
        goto LABEL_58;
      v47 = ((1 << v35) + 3) >> v35;
      v48 = 2;
      if (v47 > 0xFFF0)
        v48 = 4;
      if (v47 <= 0xF0)
LABEL_58:
        v48 = 1;
      v49 = v42 + v48;
      if (v49 <= v46)
        v49 = v46;
      if (v37 <= v49)
        v37 = v49;
      if (v38 <= v37)
        v38 = v37;
      if (v124 > v38)
        v38 = v124;
      if (v39 <= v38)
        LODWORD(v39) = v38;
      if (v39 <= 3)
        v50 = v39;
      else
        v50 = 4;
      __asm { BR              X14 }
      return;
  }
}

uint64_t sub_23AB41AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  BOOL v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  BOOL v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  BOOL v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  BOOL v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  BOOL v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  char *v131;
  unsigned int v132;
  uint64_t v133;
  BOOL v134;
  uint64_t v135;
  unsigned int v136;
  char *v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  unint64_t v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  unint64_t v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int v150;
  BOOL v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int v155;
  BOOL v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int v160;
  BOOL v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  BOOL v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  BOOL v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int v177;
  __int128 v178;
  unint64_t v179;
  unsigned int v180;
  __int128 v181;
  unsigned int v182;
  unsigned int v183;
  uint64_t v184;
  __int16 v185;
  char v186;
  _QWORD *v187;
  _QWORD *v188;
  unint64_t v189;
  unint64_t v190;
  void (*v191)(unint64_t, unint64_t, uint64_t);
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  unsigned int v203;
  uint64_t v204;
  __int16 v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  _QWORD *v212;
  _QWORD *v213;
  unint64_t v214;
  unint64_t v215;
  void (*v216)(unint64_t, unint64_t, uint64_t);
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  unsigned int v221;
  void *v222;
  id v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  void *v227;
  void *v228;
  char v229;
  unsigned int v230;
  __int128 v231;
  unsigned int v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  unsigned int v236;
  void *v237;
  id v238;
  uint64_t *v239;
  unint64_t v240;
  uint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  __int128 v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  __int128 v248;
  unsigned int v249;
  BOOL v250;
  unsigned int v251;
  unsigned int v252;
  uint64_t v253;
  unsigned int v254;
  unint64_t v255;
  uint64_t result;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  uint64_t AssociatedTypeWitness;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 <= v3)
    v6 = v3;
  else
    v6 = *(_QWORD *)(v4 + 64);
  v7 = v6 + 1;
  v286 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_DWORD *)(v4 + 80);
  v9 = v8;
  v266 = v3 + v8;
  v283 = v8;
  v268 = v5;
  v10 = v5 + (v266 & ~(unint64_t)v8);
  v291 = v6 + 2;
  if (v10 + 1 > v6 + 2)
    v11 = v10 + 1;
  else
    v11 = v6 + 2;
  if (v7 > v11)
    v11 = v6 + 1;
  v281 = v6;
  v12 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 0xFFFFFFFFFFFFFFF8) + 16 > v11)
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
  v287 = v2;
  v13 = *(unsigned __int8 *)(v2 + 80) | v9;
  v269 = v7 + v13;
  v275 = v13;
  if (((v7 + v13) & ~v13) + v7 <= v11)
    v14 = v11;
  else
    v14 = ((v7 + v13) & ~v13) + v7;
  v264 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v264 - 8);
  v16 = *(_DWORD *)(v15 + 80) & 0xF8;
  v265 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v265 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v16 | v18 | 7;
  v290 = v7;
  v267 = v7 + v19;
  v259 = *(_QWORD *)(v15 + 64) + 7;
  v260 = v18 + 8;
  v261 = v15;
  v263 = v17;
  v262 = *(_QWORD *)(v17 + 64) + 7;
  v273 = (((v262 + ((v18 + 8 + (v259 & 0xFFFFFFFFFFFFFFF8)) & ~v18)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v273 + 18 <= 0x39)
    v20 = 57;
  else
    v20 = v273 + 18;
  if (v20 > 3)
    goto LABEL_21;
  v21 = ((1 << (8 * v20)) + 3) >> (8 * v20);
  v22 = 2;
  if (v21 > 0xFFF0)
    v22 = 4;
  if (v21 <= 0xF0)
LABEL_21:
    v22 = 1;
  v288 = v20 + ((v7 + v19) & ~v19);
  v289 = v14;
  if (v288 + v22 <= v14)
    v23 = v14;
  else
    v23 = v288 + v22;
  v258 = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(v258 - 8);
  v25 = *(_DWORD *)(v24 + 80) & 0xF8;
  v26 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = v25 | v28 | 7;
  v30 = (v290 + v29) & ~v29;
  v257 = v24;
  v31 = *(_QWORD *)(v24 + 64) + 7;
  v32 = (((*(_QWORD *)(v27 + 64) + 7 + ((v28 + 8 + (v31 & 0xFFFFFFFFFFFFFFF8)) & ~v28)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v32 + 18 <= 0x39)
    v33 = 57;
  else
    v33 = v32 + 18;
  if (v33 <= 3)
    v34 = (((1 << (8 * v33)) + 3) >> (8 * v33)) + 15;
  else
    v34 = 16;
  v35 = v12 + 17;
  v36 = v12 + 24;
  v37 = ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v38 = 4;
  if (v34 < 0x10000)
    v38 = 2;
  if (v34 < 0x100)
    v39 = 1;
  else
    v39 = v38;
  v40 = v33 + v30;
  v41 = v33 + v30 + v39;
  if (v41 <= v23)
    v41 = v23;
  if (v35 > v41)
    v41 = v12 + 17;
  if (v36 > v41)
    v41 = v12 + 24;
  if (v291 > v41)
    v41 = v291;
  if (v37 > v41)
    v41 = ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v282 = v20;
  v271 = 8 * v33;
  v278 = v40;
  v279 = v12 + 17;
  v280 = v12 + 24;
  v49 = ~v283;
  v50 = ~v275;
  v51 = ~v19;
  v52 = ~v18;
  v53 = ~v29;
  v54 = ~v28;
  v55 = v32 + 16;
  v284 = v33;
  switch(*(_BYTE *)(a2 + v41))
  {
    case 0:
      v56 = *(unsigned __int8 *)(a2 + v281);
      if (v56 >= 2)
      {
        if (v281 <= 3)
          v57 = v281;
        else
          v57 = 4;
        __asm { BR              X12 }
      }
      v61 = v37;
      v58 = a1;
      v92 = v56 == 1;
      v93 = v287;
      if (v56 == 1)
        v93 = v286;
      (*(void (**)(uint64_t))(v93 + 16))(a1);
      *(_BYTE *)(a1 + v281) = v92;
      *(_BYTE *)(v290 + a1) = *(_BYTE *)(v290 + a2);
      if (v282 > 3)
        goto LABEL_170;
      v94 = ((1 << (8 * v282)) + 3) >> (8 * v282);
      v95 = 2;
      if (v94 > 0xFFF0)
        v95 = 4;
      if (v94 <= 0xF0)
LABEL_170:
        v95 = 1;
      v62 = v288 + v95;
      if (v62 <= v289)
        v62 = v289;
      if (v284 <= 3)
      {
        v96 = ((1 << v271) + 3) >> v271;
        v65 = 2;
        if (v96 > 0xFFF0)
          v65 = 4;
        if (v96 > 0xF0)
        {
          v63 = 0;
          goto LABEL_603;
        }
      }
      v63 = 0;
      goto LABEL_602;
    case 1:
      v58 = a1;
      (*(void (**)(uint64_t))(v287 + 16))(a1);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v286 + 16))((v266 + a1) & v49, (v266 + a2) & v49, AssociatedTypeWitness);
      *(_BYTE *)(((v266 + a1) & v49) + v268) = *(_BYTE *)(((v266 + a2) & v49) + v268);
      if (v282 > 3)
        goto LABEL_83;
      v59 = ((1 << (8 * v282)) + 3) >> (8 * v282);
      v60 = 2;
      if (v59 > 0xFFF0)
        v60 = 4;
      if (v59 <= 0xF0)
LABEL_83:
        v60 = 1;
      v61 = v37;
      v62 = v288 + v60;
      if (v62 <= v289)
        v62 = v289;
      if (v284 > 3)
        goto LABEL_90;
      v63 = 1;
      v64 = ((1 << v271) + 3) >> v271;
      v65 = 2;
      if (v64 > 0xFFF0)
        v65 = 4;
      if (v64 <= 0xF0)
      {
LABEL_90:
        v65 = 1;
        v63 = 1;
      }
      goto LABEL_603;
    case 2:
      v66 = *(unsigned __int8 *)(a2 + v281);
      if (v66 >= 2)
      {
        if (v281 <= 3)
          v67 = v281;
        else
          v67 = 4;
        __asm { BR              X12 }
      }
      v61 = v37;
      v58 = a1;
      v97 = v66 == 1;
      v98 = v287;
      if (v66 == 1)
        v98 = v286;
      (*(void (**)(uint64_t))(v98 + 16))(a1);
      *(_BYTE *)(a1 + v281) = v97;
      *(_BYTE *)(v290 + a1) = *(_BYTE *)(v290 + a2);
      if (v282 > 3)
        goto LABEL_185;
      v99 = ((1 << (8 * v282)) + 3) >> (8 * v282);
      v100 = 2;
      if (v99 > 0xFFF0)
        v100 = 4;
      if (v99 <= 0xF0)
LABEL_185:
        v100 = 1;
      v62 = v288 + v100;
      if (v62 <= v289)
        v62 = v289;
      if (v284 <= 3)
      {
        v101 = ((1 << v271) + 3) >> v271;
        v63 = 2;
        v65 = 4;
        if (v101 <= 0xFFF0)
          v65 = 2;
        if (v101 > 0xF0)
          goto LABEL_603;
      }
      v63 = 2;
      goto LABEL_602;
    case 3:
      v68 = *(unsigned __int8 *)(a2 + v281);
      if (v68 >= 2)
      {
        if (v281 <= 3)
          v69 = v281;
        else
          v69 = 4;
        __asm { BR              X12 }
      }
      v61 = v37;
      v58 = a1;
      v102 = v68 == 1;
      v103 = v287;
      if (v68 == 1)
        v103 = v286;
      (*(void (**)(uint64_t))(v103 + 16))(a1);
      *(_BYTE *)(a1 + v281) = v102;
      if (v282 > 3)
        goto LABEL_199;
      v104 = ((1 << (8 * v282)) + 3) >> (8 * v282);
      v105 = 2;
      if (v104 > 0xFFF0)
        v105 = 4;
      if (v104 <= 0xF0)
LABEL_199:
        v105 = 1;
      v62 = v288 + v105;
      if (v62 <= v289)
        v62 = v289;
      if (v284 <= 3)
      {
        v106 = ((1 << v271) + 3) >> v271;
        v65 = 2;
        if (v106 > 0xFFF0)
          v65 = 4;
        if (v106 > 0xF0)
        {
          v63 = 3;
          goto LABEL_603;
        }
      }
      v63 = 3;
      goto LABEL_602;
    case 4:
      v70 = *(unsigned __int8 *)(a2 + v281);
      if (v70 >= 2)
      {
        if (v281 <= 3)
          v71 = v281;
        else
          v71 = 4;
        __asm { BR              X12 }
      }
      v61 = v37;
      v58 = a1;
      v107 = v70 == 1;
      v108 = v287;
      if (v70 == 1)
        v108 = v286;
      (*(void (**)(uint64_t))(v108 + 16))(a1);
      *(_BYTE *)(a1 + v281) = v107;
      *(_QWORD *)((a1 + v290 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v290 + 7) & 0xFFFFFFFFFFFFF8);
      if (v282 > 3)
        goto LABEL_214;
      v109 = ((1 << (8 * v282)) + 3) >> (8 * v282);
      v110 = 2;
      if (v109 > 0xFFF0)
        v110 = 4;
      if (v109 <= 0xF0)
LABEL_214:
        v110 = 1;
      v62 = v288 + v110;
      if (v62 <= v289)
        v62 = v289;
      if (v284 <= 3)
      {
        v111 = ((1 << v271) + 3) >> v271;
        v65 = 2;
        v63 = 4;
        if (v111 > 0xFFF0)
          v65 = 4;
        if (v111 > 0xF0)
          goto LABEL_603;
      }
      v63 = 4;
      goto LABEL_602;
    case 5:
      v72 = *(unsigned __int8 *)(a2 + v281);
      if (v72 >= 2)
      {
        if (v281 <= 3)
          v73 = v281;
        else
          v73 = 4;
        __asm { BR              X12 }
      }
      v61 = v37;
      v58 = a1;
      v112 = v72 == 1;
      v113 = v287;
      if (v72 == 1)
        v113 = v286;
      (*(void (**)(uint64_t))(v113 + 16))(a1);
      *(_BYTE *)(a1 + v281) = v112;
      *(_QWORD *)((a1 + v290 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v290 + 7) & 0xFFFFFFFFFFFFF8);
      if (v282 > 3)
        goto LABEL_228;
      v114 = ((1 << (8 * v282)) + 3) >> (8 * v282);
      v115 = 2;
      if (v114 > 0xFFF0)
        v115 = 4;
      if (v114 <= 0xF0)
LABEL_228:
        v115 = 1;
      v62 = v288 + v115;
      if (v62 <= v289)
        v62 = v289;
      if (v284 <= 3)
      {
        v116 = ((1 << v271) + 3) >> v271;
        v65 = 2;
        if (v116 > 0xFFF0)
          v65 = 4;
        if (v116 > 0xF0)
        {
          v63 = 5;
          goto LABEL_603;
        }
      }
      v63 = 5;
      goto LABEL_602;
    case 6:
      v74 = *(unsigned __int8 *)(a2 + v281);
      if (v74 >= 2)
      {
        if (v281 <= 3)
          v75 = v281;
        else
          v75 = 4;
        __asm { BR              X12 }
      }
      v61 = v37;
      v58 = a1;
      v117 = v74 == 1;
      v118 = v287;
      if (v74 == 1)
        v118 = v286;
      (*(void (**)(uint64_t))(v118 + 16))(a1);
      *(_BYTE *)(a1 + v281) = v117;
      v119 = *(unsigned __int8 *)(((v269 + a2) & v50) + v281);
      if (v119 >= 2)
      {
        if (v281 <= 3)
          v120 = v281;
        else
          v120 = 4;
        __asm { BR              X12 }
      }
      v168 = v119 == 1;
      v169 = v287;
      if (v119 == 1)
        v169 = v286;
      (*(void (**)(uint64_t))(v169 + 16))((v269 + a1) & v50);
      *(_BYTE *)(((v269 + a1) & v50) + v281) = v168;
      if (v282 > 3)
        goto LABEL_343;
      v170 = ((1 << (8 * v282)) + 3) >> (8 * v282);
      v171 = 2;
      if (v170 > 0xFFF0)
        v171 = 4;
      if (v170 <= 0xF0)
LABEL_343:
        v171 = 1;
      v62 = v288 + v171;
      if (v62 <= v289)
        v62 = v289;
      if (v284 <= 3)
      {
        v172 = ((1 << v271) + 3) >> v271;
        v65 = 2;
        if (v172 > 0xFFF0)
          v65 = 4;
        if (v172 > 0xF0)
        {
          v63 = 6;
          goto LABEL_603;
        }
      }
      v63 = 6;
      goto LABEL_602;
    case 7:
      v76 = *(unsigned __int8 *)(a2 + v281);
      if (v76 >= 2)
      {
        if (v281 <= 3)
          v77 = v281;
        else
          v77 = 4;
        __asm { BR              X12 }
      }
      v61 = v37;
      v58 = a1;
      v121 = v76 == 1;
      v122 = v287;
      if (v76 == 1)
        v122 = v286;
      (*(void (**)(uint64_t))(v122 + 16))(a1);
      *(_BYTE *)(a1 + v281) = v121;
      v123 = *(unsigned __int8 *)(((v269 + a2) & v50) + v281);
      if (v123 >= 2)
      {
        if (v281 <= 3)
          v124 = v281;
        else
          v124 = 4;
        __asm { BR              X12 }
      }
      v173 = v123 == 1;
      v174 = v287;
      if (v123 == 1)
        v174 = v286;
      (*(void (**)(uint64_t))(v174 + 16))((v269 + a1) & v50);
      *(_BYTE *)(((v269 + a1) & v50) + v281) = v173;
      if (v282 > 3)
        goto LABEL_358;
      v175 = ((1 << (8 * v282)) + 3) >> (8 * v282);
      v176 = 2;
      if (v175 > 0xFFF0)
        v176 = 4;
      if (v175 <= 0xF0)
LABEL_358:
        v176 = 1;
      v62 = v288 + v176;
      if (v62 <= v289)
        v62 = v289;
      if (v284 <= 3)
      {
        v177 = ((1 << v271) + 3) >> v271;
        v65 = 2;
        if (v177 > 0xFFF0)
          v65 = 4;
        if (v177 > 0xF0)
        {
          v63 = 7;
          goto LABEL_603;
        }
      }
      v63 = 7;
      goto LABEL_602;
    case 8:
      v78 = *(unsigned __int8 *)(a2 + v281);
      if (v78 >= 2)
      {
        if (v281 <= 3)
          v79 = v281;
        else
          v79 = 4;
        __asm { BR              X12 }
      }
      v90 = v273 + 16;
      v125 = v78 == 1;
      v126 = v287;
      if (v78 == 1)
        v126 = v286;
      (*(void (**)(uint64_t))(v126 + 16))(a1);
      *(_BYTE *)(a1 + v281) = v125;
      v127 = (char *)((v267 + a2) & v51);
      v128 = v282;
      if (v282 > 3)
        goto LABEL_256;
      v129 = ((1 << (8 * v282)) + 3) >> (8 * v282);
      if (v129 > 0xFFF0)
      {
        v130 = *(_DWORD *)&v127[v282];
      }
      else if (v129 > 0xF0)
      {
        v130 = *(unsigned __int16 *)&v127[v282];
      }
      else
      {
LABEL_256:
        v130 = v127[v282];
      }
      v131 = (char *)((v267 + a1) & v51);
      v132 = v284;
      if (v130 >= 0xF)
      {
        if (v282 <= 3)
          v133 = v282;
        else
          v133 = 4;
        __asm { BR              X12 }
      }
      switch(v130)
      {
        case 0u:
          v178 = *(_OWORD *)v127;
          *(_QWORD *)(((v267 + a1) & v51) + 0x10) = *(_QWORD *)(((v267 + a2) & v51) + 0x10);
          *(_OWORD *)v131 = v178;
          v61 = v37;
          v58 = a1;
          v179 = v289;
          if (v282 > 3)
            goto LABEL_371;
          v180 = ((1 << (8 * v282)) + 3) >> (8 * v282);
          if (v180 > 0xFFF0)
          {
            *(_DWORD *)&v131[v282] = 0;
          }
          else
          {
            if (v180 <= 0xF0)
            {
LABEL_371:
              v131[v282] = 0;
              goto LABEL_536;
            }
            *(_WORD *)&v131[v282] = 0;
          }
          goto LABEL_577;
        case 1u:
          *(_QWORD *)v131 = *(_QWORD *)v127;
          v61 = v37;
          v58 = a1;
          v179 = v289;
          if (v282 > 3)
            goto LABEL_386;
          v185 = 1;
          v180 = ((1 << (8 * v282)) + 3) >> (8 * v282);
          if (v180 > 0xFFF0)
          {
            *(_DWORD *)&v131[v282] = 1;
            goto LABEL_577;
          }
          if (v180 > 0xF0)
            goto LABEL_576;
LABEL_386:
          v186 = 1;
          goto LABEL_535;
        case 2u:
          *(_OWORD *)v131 = *(_OWORD *)v127;
          v61 = v37;
          v58 = a1;
          v179 = v289;
          if (v282 > 3)
            goto LABEL_390;
          v180 = ((1 << (8 * v282)) + 3) >> (8 * v282);
          if (v180 > 0xFFF0)
          {
            *(_DWORD *)&v131[v282] = 2;
            goto LABEL_577;
          }
          if (v180 <= 0xF0)
          {
LABEL_390:
            v186 = 2;
            goto LABEL_535;
          }
          v185 = 2;
          goto LABEL_576;
        case 3u:
          *v131 = *v127;
          v61 = v37;
          v58 = a1;
          v179 = v289;
          if (v282 > 3)
            goto LABEL_394;
          v180 = ((1 << (8 * v282)) + 3) >> (8 * v282);
          if (v180 > 0xFFF0)
          {
            *(_DWORD *)&v131[v282] = 3;
            goto LABEL_577;
          }
          if (v180 <= 0xF0)
          {
LABEL_394:
            v186 = 3;
            goto LABEL_535;
          }
          v185 = 3;
          goto LABEL_576;
        case 4u:
          *v131 = *v127;
          v61 = v37;
          v58 = a1;
          v179 = v289;
          if (v282 > 3)
            goto LABEL_398;
          v180 = ((1 << (8 * v282)) + 3) >> (8 * v282);
          if (v180 > 0xFFF0)
          {
            *(_DWORD *)&v131[v282] = 4;
            goto LABEL_577;
          }
          if (v180 <= 0xF0)
          {
LABEL_398:
            v186 = 4;
            goto LABEL_535;
          }
          v185 = 4;
          goto LABEL_576;
        case 5u:
          *v131 = *v127;
          v61 = v37;
          v58 = a1;
          v179 = v289;
          if (v282 > 3)
            goto LABEL_402;
          v180 = ((1 << (8 * v282)) + 3) >> (8 * v282);
          if (v180 > 0xFFF0)
          {
            *(_DWORD *)&v131[v282] = 5;
            goto LABEL_577;
          }
          if (v180 <= 0xF0)
          {
LABEL_402:
            v186 = 5;
            goto LABEL_535;
          }
          v185 = 5;
          goto LABEL_576;
        case 6u:
          *v131 = *v127;
          v61 = v37;
          v58 = a1;
          v179 = v289;
          if (v282 > 3)
            goto LABEL_406;
          v180 = ((1 << (8 * v282)) + 3) >> (8 * v282);
          if (v180 > 0xFFF0)
          {
            *(_DWORD *)&v131[v282] = 6;
            goto LABEL_577;
          }
          if (v180 <= 0xF0)
          {
LABEL_406:
            v186 = 6;
            goto LABEL_535;
          }
          v185 = 6;
          goto LABEL_576;
        case 7u:
          (*(void (**)(char *, char *, uint64_t))(v261 + 16))(v131, v127, v264);
          v187 = (_QWORD *)((unint64_t)&v131[v259] & 0xFFFFFFFFFFFFFFF8);
          v188 = (_QWORD *)((unint64_t)&v127[v259] & 0xFFFFFFFFFFFFFFF8);
          *v187 = *v188;
          v189 = ((unint64_t)v187 + v260) & v52;
          v190 = ((unint64_t)v188 + v260) & v52;
          v191 = *(void (**)(unint64_t, unint64_t, uint64_t))(v263 + 16);
          swift_bridgeObjectRetain();
          v191(v189, v190, v265);
          v192 = (_QWORD *)((v262 + v189) & 0xFFFFFFFFFFFFF8);
          v193 = (_QWORD *)((v262 + v190) & 0xFFFFFFFFFFFFF8);
          *v192 = *v193;
          v194 = (_QWORD *)(((unint64_t)v192 + 15) & 0xFFFFFFFFFFFFFFF8);
          v195 = (_QWORD *)(((unint64_t)v193 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v194 = *v195;
          v194[1] = v195[1];
          v131[v90] = v127[v90];
          *(_BYTE *)((unint64_t)&v131[v90] | 1) = *(_BYTE *)((unint64_t)&v127[v90] | 1);
          swift_bridgeObjectRetain();
          v58 = a1;
          swift_bridgeObjectRetain();
          v128 = v282;
          v132 = v284;
          v61 = v37;
          v179 = v289;
          if (v282 > 3)
            goto LABEL_410;
          v180 = ((1 << (8 * v282)) + 3) >> (8 * v282);
          if (v180 > 0xFFF0)
          {
            *(_DWORD *)&v131[v282] = 7;
            goto LABEL_577;
          }
          if (v180 <= 0xF0)
          {
LABEL_410:
            v186 = 7;
            goto LABEL_535;
          }
          v185 = 7;
          goto LABEL_576;
        case 8u:
          v237 = *(void **)v127;
          *(_QWORD *)v131 = *(_QWORD *)v127;
          v238 = v237;
          v128 = v282;
          v132 = v284;
          v61 = v37;
          v58 = a1;
          v179 = v289;
          if (v282 > 3)
            goto LABEL_496;
          v180 = ((1 << (8 * v282)) + 3) >> (8 * v282);
          if (v180 > 0xFFF0)
          {
            *(_DWORD *)&v131[v282] = 8;
            goto LABEL_577;
          }
          if (v180 <= 0xF0)
          {
LABEL_496:
            v186 = 8;
            goto LABEL_535;
          }
          v185 = 8;
          goto LABEL_576;
        case 9u:
          *v131 = *v127;
          v61 = v37;
          v58 = a1;
          v179 = v289;
          if (v282 > 3)
            goto LABEL_414;
          v180 = ((1 << (8 * v282)) + 3) >> (8 * v282);
          if (v180 > 0xFFF0)
          {
            *(_DWORD *)&v131[v282] = 9;
            goto LABEL_577;
          }
          if (v180 <= 0xF0)
          {
LABEL_414:
            v186 = 9;
            goto LABEL_535;
          }
          v185 = 9;
          goto LABEL_576;
        case 0xAu:
          *(_WORD *)v131 = *(_WORD *)v127;
          v61 = v37;
          v58 = a1;
          v179 = v289;
          if (v282 > 3)
            goto LABEL_418;
          v180 = ((1 << (8 * v282)) + 3) >> (8 * v282);
          if (v180 > 0xFFF0)
          {
            *(_DWORD *)&v131[v282] = 10;
            goto LABEL_577;
          }
          if (v180 <= 0xF0)
          {
LABEL_418:
            v186 = 10;
            goto LABEL_535;
          }
          v185 = 10;
          goto LABEL_576;
        case 0xBu:
          v196 = *(_QWORD *)v127;
          v197 = *(_QWORD *)(((v267 + a2) & v51) + 8);
          v198 = *(_BYTE *)(((v267 + a2) & v51) + 0x10);
          sub_23AAAE478(*(id *)v127, *((id *)v127 + 1), v127[16]);
          v128 = v282;
          v132 = v284;
          *(_QWORD *)v131 = v196;
          *((_QWORD *)v131 + 1) = v197;
          v58 = a1;
          v131[16] = v198;
          v61 = v37;
          v179 = v289;
          if (v282 > 3)
            goto LABEL_422;
          v180 = ((1 << (8 * v282)) + 3) >> (8 * v282);
          if (v180 > 0xFFF0)
          {
            *(_DWORD *)&v131[v282] = 11;
            goto LABEL_577;
          }
          if (v180 <= 0xF0)
          {
LABEL_422:
            v186 = 11;
            goto LABEL_535;
          }
          v185 = 11;
          goto LABEL_576;
        case 0xCu:
          v199 = *(_OWORD *)v127;
          *(_QWORD *)(((v267 + a1) & v51) + 0x10) = *(_QWORD *)(((v267 + a2) & v51) + 0x10);
          *(_OWORD *)v131 = v199;
          v61 = v37;
          v58 = a1;
          v179 = v289;
          if (v282 > 3)
            goto LABEL_426;
          v180 = ((1 << (8 * v282)) + 3) >> (8 * v282);
          if (v180 > 0xFFF0)
          {
            *(_DWORD *)&v131[v282] = 12;
            goto LABEL_577;
          }
          if (v180 <= 0xF0)
          {
LABEL_426:
            v186 = 12;
            goto LABEL_535;
          }
          v185 = 12;
          goto LABEL_576;
        case 0xDu:
          if (*(_QWORD *)(((v267 + a2) & v51) + 0x10) >> 60 == 11)
          {
            v200 = *(_OWORD *)v127;
            v201 = *(_OWORD *)(((v267 + a2) & v51) + 0x10);
            v202 = *(_OWORD *)(((v267 + a2) & v51) + 0x20);
            *(_QWORD *)(((v267 + a1) & v51) + 0x30) = *(_QWORD *)(((v267 + a2) & v51) + 0x30);
            *(_OWORD *)(((v267 + a1) & v51) + 0x10) = v201;
            *(_OWORD *)(((v267 + a1) & v51) + 0x20) = v202;
            *(_OWORD *)v131 = v200;
            v58 = a1;
          }
          else
          {
            *(_QWORD *)v131 = *(_QWORD *)v127;
            v239 = (uint64_t *)(v127 + 8);
            v240 = *(_QWORD *)(((v267 + a2) & v51) + 0x10);
            if (v240 >> 60 == 15)
            {
              *(_OWORD *)(((v267 + a1) & v51) + 8) = *(_OWORD *)v239;
            }
            else
            {
              v243 = *v239;
              sub_23AAAE668(*v239, *(_QWORD *)(((v267 + a2) & v51) + 0x10));
              v128 = v282;
              v132 = v284;
              *(_QWORD *)(((v267 + a1) & v51) + 8) = v243;
              *(_QWORD *)(((v267 + a1) & v51) + 0x10) = v240;
            }
            v58 = a1;
            v244 = *(_OWORD *)(((v267 + a2) & v51) + 0x18);
            *(_BYTE *)(((v267 + a1) & v51) + 0x28) = *(_BYTE *)(((v267 + a2) & v51) + 0x28);
            *(_OWORD *)(((v267 + a1) & v51) + 0x18) = v244;
            *(_QWORD *)(((v267 + a1) & v51) + 0x30) = *(_QWORD *)(((v267 + a2) & v51) + 0x30);
          }
          *(_BYTE *)(((v267 + a1) & v51) + 0x38) = *(_BYTE *)(((v267 + a2) & v51) + 0x38);
          v61 = v37;
          v179 = v289;
          if (v128 > 3)
            goto LABEL_534;
          v180 = ((1 << (8 * v128)) + 3) >> (8 * v128);
          if (v180 > 0xFFF0)
          {
            *(_DWORD *)&v131[v128] = 13;
            goto LABEL_577;
          }
          if (v180 <= 0xF0)
          {
LABEL_534:
            v186 = 13;
            goto LABEL_535;
          }
          v185 = 13;
          goto LABEL_576;
        case 0xEu:
          *v131 = *v127;
          v61 = v37;
          v58 = a1;
          v179 = v289;
          if (v282 > 3)
            goto LABEL_432;
          v180 = ((1 << (8 * v282)) + 3) >> (8 * v282);
          if (v180 > 0xFFF0)
          {
            *(_DWORD *)&v131[v282] = 14;
          }
          else
          {
            if (v180 <= 0xF0)
            {
LABEL_432:
              v186 = 14;
LABEL_535:
              v131[v128] = v186;
LABEL_536:
              if (v128 > 3)
                goto LABEL_540;
              v245 = ((1 << (8 * v128)) + 3) >> (8 * v128);
              v246 = 2;
              if (v245 > 0xFFF0)
                v246 = 4;
              if (v245 <= 0xF0)
LABEL_540:
                v246 = 1;
LABEL_579:
              v62 = v288 + v246;
              if (v62 <= v179)
                v62 = v179;
              if (v132 <= 3)
              {
                v251 = ((1 << v271) + 3) >> v271;
                v65 = 2;
                if (v251 > 0xFFF0)
                  v65 = 4;
                if (v251 > 0xF0)
                {
                  v63 = 8;
                  goto LABEL_603;
                }
              }
              v63 = 8;
              goto LABEL_602;
            }
            v185 = 14;
LABEL_576:
            *(_WORD *)&v131[v128] = v185;
          }
LABEL_577:
          v250 = v180 > 0xFFF0;
          v246 = 2;
          if (v250)
            v246 = 4;
          goto LABEL_579;
        default:
          v58 = a1;
          if (v282 > 3)
            goto LABEL_381;
          v183 = ((1 << (8 * v282)) + 3) >> (8 * v282);
          v184 = 2;
          if (v183 > 0xFFF0)
            v184 = 4;
          if (v183 <= 0xF0)
LABEL_381:
            v184 = 1;
          memcpy(v131, v127, v184 + v282);
          LODWORD(v128) = v282;
          v132 = v284;
          v61 = v37;
          v179 = v289;
          goto LABEL_536;
      }
    case 9:
      v80 = *(unsigned __int8 *)(a2 + v281);
      if (v80 >= 2)
      {
        if (v281 <= 3)
          v81 = v281;
        else
          v81 = 4;
        __asm { BR              X12 }
      }
      v61 = v37;
      v58 = a1;
      v91 = v289;
      v270 = v28 + 8;
      v274 = *(_QWORD *)(v27 + 64) + 7;
      v276 = v26;
      v134 = v80 == 1;
      v135 = v287;
      if (v80 == 1)
        v135 = v286;
      (*(void (**)(uint64_t))(v135 + 16))(a1);
      v136 = v282;
      *(_BYTE *)(a1 + v281) = v134;
      v137 = (char *)((v290 + a2 + v29) & v53);
      v138 = v284;
      if (v284 > 3)
        goto LABEL_269;
      v139 = ((1 << v271) + 3) >> v271;
      if (v139 > 0xFFF0)
      {
        v140 = *(_DWORD *)&v137[v284];
      }
      else if (v139 > 0xF0)
      {
        v140 = *(unsigned __int16 *)&v137[v284];
      }
      else
      {
LABEL_269:
        v140 = v137[v284];
      }
      v141 = (v290 + a1 + v29) & v53;
      if (v140 >= 0xF)
      {
        if (v284 <= 3)
          v142 = v284;
        else
          v142 = 4;
        __asm { BR              X12 }
      }
      return result;
    case 0xA:
      v82 = *(unsigned __int8 *)(a2 + v281);
      if (v82 >= 2)
      {
        if (v281 <= 3)
          v83 = v281;
        else
          v83 = 4;
        __asm { BR              X12 }
      }
      v61 = v37;
      v58 = a1;
      v143 = v82 == 1;
      v144 = v287;
      if (v82 == 1)
        v144 = v286;
      (*(void (**)(uint64_t))(v144 + 16))(a1);
      *(_BYTE *)(a1 + v281) = v143;
      v145 = (a2 + v290 + 7) & 0xFFFFFFFFFFFFFFF8;
      v146 = *(_BYTE *)(v145 + 8);
      v147 = (a1 + v290 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v147 = *(_QWORD *)v145;
      *(_BYTE *)(v147 + 8) = v146;
      if (v282 > 3)
        goto LABEL_283;
      v148 = ((1 << (8 * v282)) + 3) >> (8 * v282);
      v149 = 2;
      if (v148 > 0xFFF0)
        v149 = 4;
      if (v148 <= 0xF0)
LABEL_283:
        v149 = 1;
      v62 = v288 + v149;
      if (v62 <= v289)
        v62 = v289;
      if (v284 <= 3)
      {
        v150 = ((1 << v271) + 3) >> v271;
        v65 = 2;
        if (v150 > 0xFFF0)
          v65 = 4;
        if (v150 > 0xF0)
        {
          v63 = 10;
          goto LABEL_603;
        }
      }
      v63 = 10;
      goto LABEL_602;
    case 0xB:
      v84 = *(unsigned __int8 *)(a2 + v281);
      if (v84 >= 2)
      {
        if (v281 <= 3)
          v85 = v281;
        else
          v85 = 4;
        __asm { BR              X12 }
      }
      v61 = v37;
      v58 = a1;
      v151 = v84 == 1;
      v152 = v287;
      if (v84 == 1)
        v152 = v286;
      (*(void (**)(uint64_t))(v152 + 16))(a1);
      *(_BYTE *)(a1 + v281) = v151;
      *(_OWORD *)((a1 + v290 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((a2 + v290 + 7) & 0xFFFFFFFFFFFFF8);
      if (v282 > 3)
        goto LABEL_298;
      v153 = ((1 << (8 * v282)) + 3) >> (8 * v282);
      v154 = 2;
      if (v153 > 0xFFF0)
        v154 = 4;
      if (v153 <= 0xF0)
LABEL_298:
        v154 = 1;
      v62 = v288 + v154;
      if (v62 <= v289)
        v62 = v289;
      if (v284 <= 3)
      {
        v155 = ((1 << v271) + 3) >> v271;
        v65 = 2;
        if (v155 > 0xFFF0)
          v65 = 4;
        if (v155 > 0xF0)
        {
          v63 = 11;
          goto LABEL_603;
        }
      }
      v63 = 11;
      goto LABEL_602;
    case 0xC:
      v86 = *(unsigned __int8 *)(a2 + v281);
      if (v86 >= 2)
      {
        if (v281 <= 3)
          v87 = v281;
        else
          v87 = 4;
        __asm { BR              X12 }
      }
      v61 = v37;
      v58 = a1;
      v156 = v86 == 1;
      v157 = v287;
      if (v86 == 1)
        v157 = v286;
      (*(void (**)(uint64_t))(v157 + 16))(a1);
      *(_BYTE *)(a1 + v281) = v156;
      *(_BYTE *)(v290 + a1) = *(_BYTE *)(v290 + a2);
      if (v282 > 3)
        goto LABEL_313;
      v158 = ((1 << (8 * v282)) + 3) >> (8 * v282);
      v159 = 2;
      if (v158 > 0xFFF0)
        v159 = 4;
      if (v158 <= 0xF0)
LABEL_313:
        v159 = 1;
      v62 = v288 + v159;
      if (v62 <= v289)
        v62 = v289;
      if (v284 <= 3)
      {
        v160 = ((1 << v271) + 3) >> v271;
        v65 = 2;
        if (v160 > 0xFFF0)
          v65 = 4;
        if (v160 > 0xF0)
        {
          v63 = 12;
          goto LABEL_603;
        }
      }
      v63 = 12;
      goto LABEL_602;
    case 0xD:
      v88 = *(unsigned __int8 *)(a2 + v281);
      if (v88 >= 2)
      {
        if (v281 <= 3)
          v89 = v281;
        else
          v89 = 4;
        __asm { BR              X12 }
      }
      v61 = v37;
      v58 = a1;
      v161 = v88 == 1;
      v162 = v287;
      if (v88 == 1)
        v162 = v286;
      (*(void (**)(uint64_t))(v162 + 16))(a1);
      *(_BYTE *)(a1 + v281) = v161;
      v163 = (_QWORD *)((a1 + v290 + 7) & 0xFFFFFFFFFFFFF8);
      v164 = (_QWORD *)((a2 + v290 + 7) & 0xFFFFFFFFFFFFF8);
      *v163 = *v164;
      *(_QWORD *)(((unint64_t)v163 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v164 + 15) & 0xFFFFFFFFFFFFF8);
      if (v282 > 3)
        goto LABEL_328;
      v165 = ((1 << (8 * v282)) + 3) >> (8 * v282);
      v166 = 2;
      if (v165 > 0xFFF0)
        v166 = 4;
      if (v165 <= 0xF0)
LABEL_328:
        v166 = 1;
      v62 = v288 + v166;
      if (v62 <= v289)
        v62 = v289;
      if (v284 <= 3)
      {
        v167 = ((1 << v271) + 3) >> v271;
        v65 = 2;
        if (v167 > 0xFFF0)
          v65 = 4;
        if (v167 > 0xF0)
        {
          v63 = 13;
          goto LABEL_603;
        }
      }
      v63 = 13;
      goto LABEL_602;
    default:
      if (v50 > 3)
        goto LABEL_51;
      v42 = ((1 << (8 * v50)) + 3) >> (8 * v50);
      v43 = 2;
      if (v42 > 0xFFF0)
        v43 = 4;
      if (v42 <= 0xF0)
LABEL_51:
        v43 = 1;
      v44 = v288 + v43;
      if (v44 <= v289)
        v44 = v289;
      if (v33 > 3)
        goto LABEL_58;
      v45 = ((1 << (8 * v33)) + 3) >> (8 * v33);
      v46 = 2;
      if (v45 > 0xFFF0)
        v46 = 4;
      if (v45 <= 0xF0)
LABEL_58:
        v46 = 1;
      v47 = v40 + v46;
      if (v47 > v44)
        v44 = v47;
      if (v35 > v44)
        v44 = v35;
      if (v36 > v44)
        v44 = v36;
      if (v291 > v44)
        v44 = v291;
      if (v37 > v44)
        LODWORD(v44) = v37;
      if (v44 <= 3)
        v48 = v44;
      else
        v48 = 4;
      __asm { BR              X15 }
      return result;
  }
  switch(v140)
  {
    case 0u:
      v181 = *(_OWORD *)v137;
      *(_QWORD *)(((v290 + a1 + v29) & v53) + 0x10) = *(_QWORD *)(((v290 + a2 + v29) & v53) + 0x10);
      *(_OWORD *)v141 = v181;
      if (v284 > 3)
        goto LABEL_376;
      v182 = ((1 << v271) + 3) >> v271;
      if (v182 > 0xFFF0)
      {
        *(_DWORD *)(v141 + v284) = 0;
      }
      else if (v182 > 0xF0)
      {
        *(_WORD *)(v141 + v284) = 0;
      }
      else
      {
LABEL_376:
        *(_BYTE *)(v141 + v284) = 0;
      }
      break;
    case 1u:
      *(_QWORD *)v141 = *(_QWORD *)v137;
      if (v284 > 3)
        goto LABEL_442;
      v205 = 1;
      v206 = ((1 << v271) + 3) >> v271;
      if (v206 > 0xFFF0)
      {
        *(_DWORD *)(v141 + v284) = 1;
      }
      else
      {
        if (v206 > 0xF0)
          goto LABEL_588;
LABEL_442:
        *(_BYTE *)(v141 + v284) = 1;
      }
      break;
    case 2u:
      *(_OWORD *)v141 = *(_OWORD *)v137;
      if (v284 > 3)
        goto LABEL_446;
      v207 = ((1 << v271) + 3) >> v271;
      if (v207 > 0xFFF0)
      {
        *(_DWORD *)(v141 + v284) = 2;
      }
      else
      {
        if (v207 > 0xF0)
        {
          v205 = 2;
          goto LABEL_588;
        }
LABEL_446:
        *(_BYTE *)(v141 + v284) = 2;
      }
      break;
    case 3u:
      *(_BYTE *)v141 = *v137;
      if (v284 > 3)
        goto LABEL_450;
      v208 = ((1 << v271) + 3) >> v271;
      if (v208 > 0xFFF0)
      {
        *(_DWORD *)(v141 + v284) = 3;
      }
      else
      {
        if (v208 > 0xF0)
        {
          v205 = 3;
          goto LABEL_588;
        }
LABEL_450:
        *(_BYTE *)(v141 + v284) = 3;
      }
      break;
    case 4u:
      *(_BYTE *)v141 = *v137;
      if (v284 > 3)
        goto LABEL_454;
      v209 = ((1 << v271) + 3) >> v271;
      if (v209 > 0xFFF0)
      {
        *(_DWORD *)(v141 + v284) = 4;
      }
      else
      {
        if (v209 > 0xF0)
        {
          v205 = 4;
          goto LABEL_588;
        }
LABEL_454:
        *(_BYTE *)(v141 + v284) = 4;
      }
      break;
    case 5u:
      *(_BYTE *)v141 = *v137;
      if (v284 > 3)
        goto LABEL_458;
      v210 = ((1 << v271) + 3) >> v271;
      if (v210 > 0xFFF0)
      {
        *(_DWORD *)(v141 + v284) = 5;
      }
      else
      {
        if (v210 > 0xF0)
        {
          v205 = 5;
          goto LABEL_588;
        }
LABEL_458:
        *(_BYTE *)(v141 + v284) = 5;
      }
      break;
    case 6u:
      *(_BYTE *)v141 = *v137;
      if (v284 > 3)
        goto LABEL_462;
      v211 = ((1 << v271) + 3) >> v271;
      if (v211 > 0xFFF0)
      {
        *(_DWORD *)(v141 + v284) = 6;
      }
      else
      {
        if (v211 > 0xF0)
        {
          v205 = 6;
          goto LABEL_588;
        }
LABEL_462:
        *(_BYTE *)(v141 + v284) = 6;
      }
      break;
    case 7u:
      (*(void (**)(unint64_t, char *, uint64_t))(v257 + 16))((v290 + a1 + v29) & v53, v137, v258);
      v212 = (_QWORD *)((v31 + v141) & 0xFFFFFFFFFFFFFFF8);
      v213 = (_QWORD *)((unint64_t)&v137[v31] & 0xFFFFFFFFFFFFFFF8);
      *v212 = *v213;
      v214 = ((unint64_t)v212 + v270) & v54;
      v215 = ((unint64_t)v213 + v270) & v54;
      v216 = *(void (**)(unint64_t, unint64_t, uint64_t))(v27 + 16);
      swift_bridgeObjectRetain();
      v216(v214, v215, v276);
      v217 = (_QWORD *)((v274 + v214) & 0xFFFFFFFFFFFFF8);
      v218 = (_QWORD *)((v274 + v215) & 0xFFFFFFFFFFFFF8);
      *v217 = *v218;
      v219 = (_QWORD *)(((unint64_t)v217 + 15) & 0xFFFFFFFFFFFFFFF8);
      v220 = (_QWORD *)(((unint64_t)v218 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v219 = *v220;
      v219[1] = v220[1];
      *(_BYTE *)(v55 + v141) = v137[v55];
      *(_BYTE *)((v55 + v141) | 1) = *(_BYTE *)((unint64_t)&v137[v55] | 1);
      swift_bridgeObjectRetain();
      v91 = v289;
      v58 = a1;
      swift_bridgeObjectRetain();
      v136 = v282;
      v138 = v284;
      if (v284 > 3)
        goto LABEL_466;
      v221 = ((1 << v271) + 3) >> v271;
      if (v221 > 0xFFF0)
      {
        *(_DWORD *)(v141 + v284) = 7;
      }
      else
      {
        if (v221 > 0xF0)
        {
          v205 = 7;
          goto LABEL_588;
        }
LABEL_466:
        *(_BYTE *)(v141 + v284) = 7;
      }
      break;
    case 8u:
      v222 = *(void **)v137;
      *(_QWORD *)v141 = *(_QWORD *)v137;
      v223 = v222;
      v136 = v282;
      v138 = v284;
      if (v284 > 3)
        goto LABEL_470;
      v224 = ((1 << v271) + 3) >> v271;
      if (v224 > 0xFFF0)
      {
        *(_DWORD *)(v141 + v284) = 8;
      }
      else
      {
        if (v224 > 0xF0)
        {
          v205 = 8;
          goto LABEL_588;
        }
LABEL_470:
        *(_BYTE *)(v141 + v284) = 8;
      }
      break;
    case 9u:
      *(_BYTE *)v141 = *v137;
      if (v284 > 3)
        goto LABEL_474;
      v225 = ((1 << v271) + 3) >> v271;
      if (v225 > 0xFFF0)
      {
        *(_DWORD *)(v141 + v284) = 9;
      }
      else
      {
        if (v225 > 0xF0)
        {
          v205 = 9;
          goto LABEL_588;
        }
LABEL_474:
        *(_BYTE *)(v141 + v284) = 9;
      }
      break;
    case 0xAu:
      *(_WORD *)v141 = *(_WORD *)v137;
      if (v284 > 3)
        goto LABEL_478;
      v226 = ((1 << v271) + 3) >> v271;
      if (v226 > 0xFFF0)
      {
        *(_DWORD *)(v141 + v284) = 10;
      }
      else
      {
        if (v226 > 0xF0)
        {
          v205 = 10;
          goto LABEL_588;
        }
LABEL_478:
        *(_BYTE *)(v141 + v284) = 10;
      }
      break;
    case 0xBu:
      v227 = *(void **)v137;
      v228 = *(void **)(((v290 + a2 + v29) & v53) + 8);
      v229 = v137[16];
      sub_23AAAE478(v227, v228, v229);
      v136 = v282;
      v138 = v284;
      *(_QWORD *)v141 = v227;
      *(_QWORD *)(v141 + 8) = v228;
      v91 = v289;
      v58 = a1;
      *(_BYTE *)(v141 + 16) = v229;
      if (v284 > 3)
        goto LABEL_482;
      v230 = ((1 << v271) + 3) >> v271;
      if (v230 > 0xFFF0)
      {
        *(_DWORD *)(v141 + v284) = 11;
      }
      else
      {
        if (v230 > 0xF0)
        {
          v205 = 11;
          goto LABEL_588;
        }
LABEL_482:
        *(_BYTE *)(v141 + v284) = 11;
      }
      break;
    case 0xCu:
      v231 = *(_OWORD *)v137;
      *(_QWORD *)(((v290 + a1 + v29) & v53) + 0x10) = *(_QWORD *)(((v290 + a2 + v29) & v53) + 0x10);
      *(_OWORD *)v141 = v231;
      if (v284 > 3)
        goto LABEL_486;
      v232 = ((1 << v271) + 3) >> v271;
      if (v232 > 0xFFF0)
      {
        *(_DWORD *)(v141 + v284) = 12;
      }
      else
      {
        if (v232 > 0xF0)
        {
          v205 = 12;
          goto LABEL_588;
        }
LABEL_486:
        *(_BYTE *)(v141 + v284) = 12;
      }
      break;
    case 0xDu:
      if (*(_QWORD *)(((v290 + a2 + v29) & v53) + 0x10) >> 60 == 11)
      {
        v233 = *(_OWORD *)v137;
        v234 = *(_OWORD *)(((v290 + a2 + v29) & v53) + 0x10);
        v235 = *(_OWORD *)(((v290 + a2 + v29) & v53) + 0x20);
        *(_QWORD *)(((v290 + a1 + v29) & v53) + 0x30) = *(_QWORD *)(((v290 + a2 + v29) & v53) + 0x30);
        *(_OWORD *)(((v290 + a1 + v29) & v53) + 0x10) = v234;
        *(_OWORD *)(((v290 + a1 + v29) & v53) + 0x20) = v235;
        *(_OWORD *)v141 = v233;
      }
      else
      {
        *(_QWORD *)v141 = *(_QWORD *)v137;
        v241 = (uint64_t *)(v137 + 8);
        v242 = *(_QWORD *)(((v290 + a2 + v29) & v53) + 0x10);
        if (v242 >> 60 == 15)
        {
          *(_OWORD *)(((v290 + a1 + v29) & v53) + 8) = *(_OWORD *)v241;
        }
        else
        {
          v247 = *v241;
          sub_23AAAE668(*v241, *((_QWORD *)v137 + 2));
          v136 = v282;
          v138 = v284;
          *(_QWORD *)(v141 + 8) = v247;
          *(_QWORD *)(v141 + 16) = v242;
        }
        v91 = v289;
        v248 = *(_OWORD *)(v137 + 24);
        *(_BYTE *)(v141 + 40) = v137[40];
        *(_OWORD *)(v141 + 24) = v248;
        *(_QWORD *)(v141 + 48) = *((_QWORD *)v137 + 6);
        v58 = a1;
      }
      *(_BYTE *)(v141 + 56) = v137[56];
      if (v138 > 3)
        goto LABEL_546;
      v249 = ((1 << v271) + 3) >> v271;
      if (v249 > 0xFFF0)
      {
        *(_DWORD *)(v141 + v138) = 13;
      }
      else
      {
        if (v249 > 0xF0)
        {
          v205 = 13;
          goto LABEL_588;
        }
LABEL_546:
        *(_BYTE *)(v141 + v138) = 13;
      }
      break;
    case 0xEu:
      *(_BYTE *)v141 = *v137;
      if (v284 > 3)
        goto LABEL_492;
      v236 = ((1 << v271) + 3) >> v271;
      if (v236 > 0xFFF0)
      {
        *(_DWORD *)(v141 + v284) = 14;
      }
      else
      {
        if (v236 > 0xF0)
        {
          v205 = 14;
LABEL_588:
          *(_WORD *)(v141 + v138) = v205;
          break;
        }
LABEL_492:
        *(_BYTE *)(v141 + v284) = 14;
      }
      break;
    default:
      if (v284 > 3)
        goto LABEL_437;
      v203 = ((1 << v271) + 3) >> v271;
      v204 = 2;
      if (v203 > 0xFFF0)
        v204 = 4;
      if (v203 <= 0xF0)
LABEL_437:
        v204 = 1;
      memcpy((void *)((v290 + a1 + v29) & v53), v137, v204 + v284);
      v136 = v282;
      LODWORD(v138) = v284;
      break;
  }
  if (v136 > 3)
    goto LABEL_593;
  v252 = ((1 << (8 * v136)) + 3) >> (8 * v136);
  v253 = 2;
  if (v252 > 0xFFF0)
    v253 = 4;
  if (v252 <= 0xF0)
LABEL_593:
    v253 = 1;
  v62 = v288 + v253;
  if (v62 <= v91)
    v62 = v91;
  if (v138 <= 3)
  {
    v254 = ((1 << v271) + 3) >> v271;
    v65 = 2;
    if (v254 > 0xFFF0)
      v65 = 4;
    if (v254 > 0xF0)
    {
      v63 = 9;
      goto LABEL_603;
    }
  }
  v63 = 9;
LABEL_602:
  v65 = 1;
LABEL_603:
  v255 = v278 + v65;
  if (v255 > v62)
    v62 = v255;
  if (v279 > v62)
    v62 = v279;
  if (v280 > v62)
    v62 = v280;
  if (v291 > v62)
    v62 = v291;
  if (v61 > v62)
    v62 = v61;
  *(_BYTE *)(v58 + v62) = v63;
  return v58;
}

uint64_t sub_23AB44570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  BOOL v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  unint64_t v148;
  BOOL v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  unint64_t v154;
  BOOL v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int v160;
  unint64_t v161;
  BOOL v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int v166;
  unint64_t v167;
  BOOL v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  BOOL v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  BOOL v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  unint64_t v181;
  BOOL v182;
  uint64_t v183;
  uint64_t v184;
  _OWORD *v185;
  uint64_t v186;
  unsigned int v187;
  unint64_t v188;
  unsigned int v189;
  char *v190;
  unsigned int v191;
  uint64_t v192;
  unint64_t v193;
  BOOL v194;
  uint64_t v195;
  uint64_t v196;
  _OWORD *v197;
  uint64_t v198;
  unsigned int v199;
  unint64_t v200;
  unsigned int v201;
  char *v202;
  unsigned int v203;
  uint64_t v204;
  unint64_t v205;
  BOOL v206;
  uint64_t v207;
  unint64_t v208;
  char v209;
  unint64_t v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int v213;
  unint64_t v214;
  BOOL v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int v219;
  unint64_t v220;
  BOOL v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int v225;
  unint64_t v226;
  BOOL v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  unsigned int v231;
  uint64_t v232;
  unsigned int v233;
  unint64_t v234;
  uint64_t result;
  BOOL v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int v240;
  BOOL v241;
  uint64_t v242;
  unsigned int v243;
  uint64_t v244;
  unsigned int v245;
  __int128 v246;
  unsigned int v247;
  __int128 v248;
  unsigned int v249;
  unsigned int v250;
  uint64_t v251;
  __int16 v252;
  char v253;
  _QWORD *v254;
  _QWORD *v255;
  unint64_t v256;
  unint64_t v257;
  void (*v258)(unint64_t, unint64_t, uint64_t);
  unint64_t v259;
  unint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  void *v263;
  void *v264;
  char v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  unsigned int v270;
  uint64_t v271;
  __int16 v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  _QWORD *v279;
  _QWORD *v280;
  unint64_t v281;
  unint64_t v282;
  void (*v283)(unint64_t, unint64_t, uint64_t);
  unint64_t v284;
  unint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  unsigned int v288;
  void *v289;
  id v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  void *v294;
  void *v295;
  char v296;
  unsigned int v297;
  __int128 v298;
  unsigned int v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  unsigned int v303;
  void *v304;
  id v305;
  uint64_t *v306;
  unint64_t v307;
  uint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  __int128 v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t v314;
  __int128 v315;
  unsigned int v316;
  BOOL v317;
  unsigned int v318;
  unsigned int v319;
  uint64_t v320;
  unsigned int v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  char v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t AssociatedTypeWitness;
  uint64_t v363;
  char v364;
  unint64_t v365;
  unint64_t v366;

  v2 = a1;
  if (a1 == a2)
    return v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v361 = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(v361 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  v359 = *(_QWORD *)(v361 - 8);
  v9 = *(_DWORD *)(v5 + 80);
  v10 = v9;
  v342 = v4 + v9;
  v349 = v9;
  v340 = v6;
  v11 = v6 + (v342 & ~(unint64_t)v9);
  v352 = v7 + 2;
  if (v11 + 1 > v7 + 2)
    v12 = v11 + 1;
  else
    v12 = v7 + 2;
  if (v8 > v12)
    v12 = v7 + 1;
  v354 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) + 16 > v12)
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
  v360 = v3;
  v14 = *(unsigned __int8 *)(v3 + 80) | v10;
  v344 = v8 + v14;
  v347 = v14;
  if (((v8 + v14) & ~v14) + v8 > v12)
    v12 = ((v8 + v14) & ~v14) + v8;
  v366 = v12;
  v338 = swift_getAssociatedTypeWitness();
  v15 = v2;
  v16 = *(_QWORD *)(v338 - 8);
  v17 = *(_DWORD *)(v16 + 80) & 0xF8;
  v339 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v339 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = v17 | v19 | 7;
  v358 = v8;
  v343 = v8 + v20;
  v21 = (v8 + v20) & ~v20;
  v333 = *(_QWORD *)(v16 + 64) + 7;
  v334 = v19 + 8;
  v335 = v16;
  v337 = v18;
  v336 = *(_QWORD *)(v18 + 64) + 7;
  v345 = (((v336 + ((v19 + 8 + (v333 & 0xFFFFFFFFFFFFFFF8)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v345 + 18 <= 0x39)
    v22 = 57;
  else
    v22 = v345 + 18;
  v364 = 8 * v22;
  v353 = v15;
  if (v22 > 3)
    goto LABEL_21;
  v23 = ((1 << v364) + 3) >> v364;
  v24 = 2;
  if (v23 > 0xFFF0)
    v24 = 4;
  if (v23 <= 0xF0)
LABEL_21:
    v24 = 1;
  v356 = v22 + v21;
  v25 = v22 + v21 + v24;
  if (v25 <= v366)
    v26 = v366;
  else
    v26 = v25;
  v331 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v331 - 8);
  v28 = *(_DWORD *)(v27 + 80) & 0xF8;
  v332 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v332 - 8);
  v30 = *(unsigned __int8 *)(v29 + 80);
  v31 = v28 | v30 | 7;
  v32 = (v358 + v31) & ~v31;
  v326 = *(_QWORD *)(v27 + 64) + 7;
  v327 = v30 + 8;
  v328 = v27;
  v330 = v29;
  v329 = *(_QWORD *)(v29 + 64) + 7;
  v33 = (((v329 + ((v30 + 8 + (v326 & 0xFFFFFFFFFFFFFFF8)) & ~v30)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v33 + 18 <= 0x39)
    v34 = 57;
  else
    v34 = v33 + 18;
  v355 = 8 * v34;
  if (v34 <= 3)
    v35 = (((1 << (8 * v34)) + 3) >> (8 * v34)) + 15;
  else
    v35 = 16;
  v36 = v13 + 17;
  v37 = v13 + 24;
  v38 = ((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v39 = 4;
  if (v35 < 0x10000)
    v39 = 2;
  if (v35 < 0x100)
    v40 = 1;
  else
    v40 = v39;
  v357 = v34;
  v365 = v34 + v32;
  v41 = v34 + v32 + v40;
  if (v41 <= v26)
    v41 = v26;
  if (v36 > v41)
    v41 = v13 + 17;
  if (v37 > v41)
    v41 = v13 + 24;
  v42 = v352;
  v2 = v353;
  if (v352 > v41)
    v41 = v352;
  if (v38 > v41)
    v41 = v38;
  v363 = v22;
  v341 = ~v349;
  v350 = ~v347;
  v348 = ~v20;
  v325 = ~v19;
  v323 = v345 + 16;
  v346 = ~v31;
  v324 = ~v30;
  v322 = v33 + 16;
  v50 = v34;
  v51 = v354;
  switch(*(_BYTE *)(v353 + v41))
  {
    case 0:
      v52 = *(unsigned __int8 *)(v353 + v354);
      if (v52 >= 2)
      {
        if (v354 <= 3)
          v53 = v354;
        else
          v53 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 1:
      v54 = v37;
      (*(void (**)(uint64_t, uint64_t))(v360 + 8))(v353, AssociatedTypeWitness);
      v55 = (v342 + v353) & v341;
      goto LABEL_189;
    case 2:
      v52 = *(unsigned __int8 *)(v353 + v354);
      if (v52 >= 2)
      {
        if (v354 <= 3)
          v56 = v354;
        else
          v56 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 3:
      v52 = *(unsigned __int8 *)(v353 + v354);
      if (v52 >= 2)
      {
        if (v354 <= 3)
          v57 = v354;
        else
          v57 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 4:
      v52 = *(unsigned __int8 *)(v353 + v354);
      if (v52 >= 2)
      {
        if (v354 <= 3)
          v58 = v354;
        else
          v58 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 5:
      v52 = *(unsigned __int8 *)(v353 + v354);
      if (v52 >= 2)
      {
        if (v354 <= 3)
          v59 = v354;
        else
          v59 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 6:
      v60 = *(unsigned __int8 *)(v353 + v354);
      if (v60 >= 2)
      {
        if (v354 <= 3)
          v61 = v354;
        else
          v61 = 4;
        __asm { BR              X12 }
      }
      v72 = v360;
      if (v60 == 1)
      {
        v72 = v359;
        v73 = v361;
      }
      else
      {
        v73 = AssociatedTypeWitness;
      }
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v353, v73);
      v55 = (v344 + v353) & v350;
      v74 = *(unsigned __int8 *)(v55 + v354);
      if (v74 >= 2)
      {
        if (v354 <= 3)
          v75 = v354;
        else
          v75 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_159;
    case 7:
      v62 = *(unsigned __int8 *)(v353 + v354);
      if (v62 >= 2)
      {
        if (v354 <= 3)
          v63 = v354;
        else
          v63 = 4;
        __asm { BR              X12 }
      }
      v76 = v360;
      if (v62 == 1)
      {
        v76 = v359;
        v77 = v361;
      }
      else
      {
        v77 = AssociatedTypeWitness;
      }
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v353, v77);
      v55 = (v344 + v353) & v350;
      v74 = *(unsigned __int8 *)(v55 + v354);
      if (v74 >= 2)
      {
        if (v354 <= 3)
          v78 = v354;
        else
          v78 = 4;
        __asm { BR              X12 }
      }
LABEL_159:
      v54 = v37;
      if (v74 == 1)
LABEL_189:
        (*(void (**)(uint64_t, uint64_t))(v359 + 8))(v55, v361);
      else
        (*(void (**)(uint64_t, uint64_t))(v360 + 8))(v55, AssociatedTypeWitness);
      goto LABEL_190;
    case 8:
      v64 = *(unsigned __int8 *)(v353 + v354);
      if (v64 >= 2)
      {
        if (v354 <= 3)
          v65 = v354;
        else
          v65 = 4;
        __asm { BR              X12 }
      }
      v54 = v37;
      v79 = v360;
      if (v64 == 1)
      {
        v79 = v359;
        v80 = v361;
      }
      else
      {
        v80 = AssociatedTypeWitness;
      }
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v353, v80);
      v81 = (v343 + v353) & v348;
      v82 = v22;
      if (v22 > 3)
        goto LABEL_166;
      v83 = ((1 << v364) + 3) >> v364;
      if (v83 > 0xFFF0)
      {
        v84 = *(_DWORD *)(v81 + v22);
      }
      else if (v83 > 0xF0)
      {
        v84 = *(unsigned __int16 *)(v81 + v22);
      }
      else
      {
LABEL_166:
        v84 = *(unsigned __int8 *)(v81 + v22);
      }
      if (v84 >= 0xF)
      {
        if (v22 <= 3)
          v85 = v22;
        else
          v85 = 4;
        __asm { BR              X12 }
      }
      switch(v84)
      {
        case 7u:
          (*(void (**)(uint64_t, uint64_t))(v335 + 8))((v343 + v353) & v348, v338);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v337 + 8))((v334 + ((v333 + v81) & 0xFFFFFFFFFFFFFFF8)) & v325, v339);
          goto LABEL_332;
        case 8u:
          goto LABEL_333;
        case 0xBu:
          goto LABEL_334;
        case 0xDu:
          goto LABEL_335;
        default:
          goto LABEL_191;
      }
      goto LABEL_191;
    case 9:
      v66 = *(unsigned __int8 *)(v353 + v354);
      if (v66 >= 2)
      {
        if (v354 <= 3)
          v67 = v354;
        else
          v67 = 4;
        __asm { BR              X12 }
      }
      v54 = v37;
      v86 = v360;
      if (v66 == 1)
      {
        v86 = v359;
        v87 = v361;
      }
      else
      {
        v87 = AssociatedTypeWitness;
      }
      (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v353, v87);
      v81 = (v358 + v353 + v31) & v346;
      v82 = v22;
      if (v357 > 3)
        goto LABEL_180;
      v88 = ((1 << v355) + 3) >> v355;
      if (v88 > 0xFFF0)
      {
        v89 = *(_DWORD *)(v81 + v357);
      }
      else if (v88 > 0xF0)
      {
        v89 = *(unsigned __int16 *)(v81 + v357);
      }
      else
      {
LABEL_180:
        v89 = *(unsigned __int8 *)(v81 + v357);
      }
      if (v89 >= 0xF)
      {
        if (v357 <= 3)
          v90 = v357;
        else
          v90 = 4;
        __asm { BR              X12 }
      }
      switch(v89)
      {
        case 7u:
          (*(void (**)(unint64_t, uint64_t))(v328 + 8))((v358 + v353 + v31) & v346, v331);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v330 + 8))((v327 + ((v326 + v81) & 0xFFFFFFFFFFFFFFF8)) & v324, v332);
LABEL_332:
          swift_bridgeObjectRelease();
          v51 = v354;
          swift_bridgeObjectRelease();
          goto LABEL_190;
        case 8u:
LABEL_333:

          goto LABEL_190;
        case 0xBu:
LABEL_334:
          sub_23AAAEE10(*(void **)v81, *(id *)(v81 + 8), *(_BYTE *)(v81 + 16));
          goto LABEL_190;
        case 0xDu:
LABEL_335:
          v141 = *(_QWORD *)(v81 + 16);
          if (v141 >> 60 == 11 || v141 >> 60 == 15)
            goto LABEL_191;
          sub_23AAAE53C(*(_QWORD *)(v81 + 8), v141);
          break;
        default:
          goto LABEL_191;
      }
      goto LABEL_190;
    case 0xA:
      v52 = *(unsigned __int8 *)(v353 + v354);
      if (v52 >= 2)
      {
        if (v354 <= 3)
          v68 = v354;
        else
          v68 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 0xB:
      v52 = *(unsigned __int8 *)(v353 + v354);
      if (v52 >= 2)
      {
        if (v354 <= 3)
          v69 = v354;
        else
          v69 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 0xC:
      v52 = *(unsigned __int8 *)(v353 + v354);
      if (v52 >= 2)
      {
        if (v354 <= 3)
          v70 = v354;
        else
          v70 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 0xD:
      v52 = *(unsigned __int8 *)(v353 + v354);
      if (v52 >= 2)
      {
        if (v354 <= 3)
          v71 = v354;
        else
          v71 = 4;
        __asm { BR              X12 }
      }
LABEL_140:
      v54 = v37;
      if (v52 == 1)
        (*(void (**)(uint64_t, uint64_t))(v359 + 8))(v353, v361);
      else
        (*(void (**)(uint64_t, uint64_t))(v360 + 8))(v353, AssociatedTypeWitness);
LABEL_190:
      v82 = v22;
LABEL_191:
      if (v82 > 3)
        goto LABEL_195;
      v91 = ((1 << v364) + 3) >> v364;
      v92 = 2;
      if (v91 > 0xFFF0)
        v92 = 4;
      if (v91 <= 0xF0)
LABEL_195:
        v92 = 1;
      v93 = v365;
      v94 = v356 + v92;
      if (v94 <= v366)
        v94 = v366;
      if (v357 > 3)
        goto LABEL_202;
      v95 = ((1 << v355) + 3) >> v355;
      v96 = 2;
      if (v95 > 0xFFF0)
        v96 = 4;
      if (v95 <= 0xF0)
LABEL_202:
        v96 = 1;
      v97 = v365 + v96;
      if (v97 > v94)
        v94 = v97;
      if (v36 > v94)
        v94 = v36;
      if (v54 > v94)
        v94 = v54;
      if (v352 > v94)
        v94 = v352;
      if (v38 > v94)
        v94 = v38;
      break;
    default:
      if (v356 > 3)
        goto LABEL_51;
      v43 = ((1 << v364) + 3) >> v364;
      v44 = 2;
      if (v43 > 0xFFF0)
        v44 = 4;
      if (v43 <= 0xF0)
LABEL_51:
        v44 = 1;
      v45 = v356 + v44;
      if (v45 <= v366)
        v45 = v366;
      if (v34 > 3)
        goto LABEL_58;
      v46 = ((1 << v355) + 3) >> v355;
      v47 = 2;
      if (v46 > 0xFFF0)
        v47 = 4;
      if (v46 <= 0xF0)
LABEL_58:
        v47 = 1;
      v48 = v365 + v47;
      if (v48 > v45)
        v45 = v48;
      if (v36 > v45)
        v45 = v36;
      if (v37 > v45)
        v45 = v37;
      if (v352 > v45)
        v45 = v352;
      if (v38 > v45)
        LODWORD(v45) = v38;
      if (v45 <= 3)
        v49 = v45;
      else
        v49 = 4;
      __asm { BR              X15 }
      return result;
  }
  switch(*(_BYTE *)(a2 + v94))
  {
    case 0:
      v105 = *(unsigned __int8 *)(a2 + v51);
      if (v105 >= 2)
      {
        if (v51 <= 3)
          v106 = v51;
        else
          v106 = 4;
        __asm { BR              X12 }
      }
      v142 = v51;
      v143 = v105 == 1;
      v144 = v360;
      if (v105 == 1)
        v144 = v359;
      (*(void (**)(uint64_t))(v144 + 16))(v353);
      *(_BYTE *)(v353 + v142) = v143;
      *(_BYTE *)(v358 + v353) = *(_BYTE *)(v358 + a2);
      if (v22 > 3)
        goto LABEL_344;
      v145 = ((1 << v364) + 3) >> v364;
      v146 = 2;
      if (v145 > 0xFFF0)
        v146 = 4;
      if (v145 <= 0xF0)
LABEL_344:
        v146 = 1;
      v113 = v356 + v146;
      if (v113 <= v366)
        v113 = v366;
      if (v50 <= 3)
      {
        v147 = ((1 << v355) + 3) >> v355;
        v116 = 2;
        if (v147 > 0xFFF0)
          v116 = 4;
        if (v147 > 0xF0)
        {
          v114 = 0;
          goto LABEL_513;
        }
      }
      v114 = 0;
      goto LABEL_512;
    case 1:
      v107 = v38;
      v108 = v82;
      (*(void (**)(uint64_t))(v360 + 16))(v353);
      v109 = (v342 + v353) & v341;
      v110 = (v342 + a2) & v341;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v359 + 16))(v109, v110, v361);
      *(_BYTE *)(v109 + v340) = *(_BYTE *)(v110 + v340);
      if (v108 > 3)
        goto LABEL_251;
      v111 = ((1 << v364) + 3) >> v364;
      v112 = 2;
      if (v111 > 0xFFF0)
        v112 = 4;
      if (v111 <= 0xF0)
LABEL_251:
        v112 = 1;
      v38 = v107;
      v113 = v356 + v112;
      if (v113 <= v366)
        v113 = v366;
      v2 = v353;
      if (v357 > 3)
        goto LABEL_258;
      v114 = 1;
      v115 = ((1 << v355) + 3) >> v355;
      v116 = 2;
      if (v115 > 0xFFF0)
        v116 = 4;
      if (v115 <= 0xF0)
      {
LABEL_258:
        v116 = 1;
        v114 = 1;
      }
      goto LABEL_514;
    case 2:
      v117 = *(unsigned __int8 *)(a2 + v51);
      if (v117 >= 2)
      {
        if (v51 <= 3)
          v118 = v51;
        else
          v118 = 4;
        __asm { BR              X12 }
      }
      v148 = v51;
      v149 = v117 == 1;
      v150 = v360;
      if (v117 == 1)
        v150 = v359;
      (*(void (**)(uint64_t))(v150 + 16))(v353);
      *(_BYTE *)(v353 + v148) = v149;
      *(_BYTE *)(v358 + v353) = *(_BYTE *)(v358 + a2);
      if (v22 > 3)
        goto LABEL_359;
      v151 = ((1 << v364) + 3) >> v364;
      v152 = 2;
      if (v151 > 0xFFF0)
        v152 = 4;
      if (v151 <= 0xF0)
LABEL_359:
        v152 = 1;
      v113 = v356 + v152;
      if (v113 <= v366)
        v113 = v366;
      if (v50 <= 3)
      {
        v153 = ((1 << v355) + 3) >> v355;
        v114 = 2;
        v116 = 4;
        if (v153 <= 0xFFF0)
          v116 = 2;
        if (v153 > 0xF0)
          goto LABEL_513;
      }
      v114 = 2;
      goto LABEL_512;
    case 3:
      v119 = *(unsigned __int8 *)(a2 + v51);
      if (v119 >= 2)
      {
        if (v51 <= 3)
          v120 = v51;
        else
          v120 = 4;
        __asm { BR              X12 }
      }
      v154 = v51;
      v155 = v119 == 1;
      v156 = v360;
      if (v119 == 1)
      {
        v156 = v359;
        v157 = v361;
      }
      else
      {
        v157 = AssociatedTypeWitness;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v156 + 16))(v353, a2, v157);
      *(_BYTE *)(v353 + v154) = v155;
      if (v22 > 3)
        goto LABEL_374;
      v158 = ((1 << v364) + 3) >> v364;
      v159 = 2;
      if (v158 > 0xFFF0)
        v159 = 4;
      if (v158 <= 0xF0)
LABEL_374:
        v159 = 1;
      v113 = v356 + v159;
      if (v113 <= v366)
        v113 = v366;
      if (v357 > 3)
        goto LABEL_382;
      v160 = ((1 << v355) + 3) >> v355;
      v116 = 2;
      if (v160 > 0xFFF0)
        v116 = 4;
      if (v160 <= 0xF0)
      {
LABEL_382:
        v114 = 3;
        v116 = 1;
      }
      else
      {
        v114 = 3;
      }
      goto LABEL_514;
    case 4:
      v121 = *(unsigned __int8 *)(a2 + v51);
      if (v121 >= 2)
      {
        if (v51 <= 3)
          v122 = v51;
        else
          v122 = 4;
        __asm { BR              X12 }
      }
      v161 = v51;
      v162 = v121 == 1;
      v163 = v360;
      if (v121 == 1)
        v163 = v359;
      (*(void (**)(uint64_t))(v163 + 16))(v353);
      *(_BYTE *)(v353 + v161) = v162;
      *(_QWORD *)((v353 + v358 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v358 + 7) & 0xFFFFFFFFFFFFF8);
      if (v22 > 3)
        goto LABEL_389;
      v164 = ((1 << v364) + 3) >> v364;
      v165 = 2;
      if (v164 > 0xFFF0)
        v165 = 4;
      if (v164 <= 0xF0)
LABEL_389:
        v165 = 1;
      v113 = v356 + v165;
      if (v113 <= v366)
        v113 = v366;
      if (v50 <= 3)
      {
        v166 = ((1 << v355) + 3) >> v355;
        v116 = 2;
        v114 = 4;
        if (v166 > 0xFFF0)
          v116 = 4;
        if (v166 > 0xF0)
          goto LABEL_513;
      }
      v114 = 4;
      goto LABEL_512;
    case 5:
      v123 = *(unsigned __int8 *)(a2 + v51);
      if (v123 >= 2)
      {
        if (v51 <= 3)
          v124 = v51;
        else
          v124 = 4;
        __asm { BR              X12 }
      }
      v167 = v51;
      v168 = v123 == 1;
      v169 = v360;
      if (v123 == 1)
        v169 = v359;
      (*(void (**)(uint64_t))(v169 + 16))(v353);
      *(_BYTE *)(v353 + v167) = v168;
      *(_QWORD *)((v353 + v358 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v358 + 7) & 0xFFFFFFFFFFFFF8);
      if (v22 > 3)
        goto LABEL_403;
      v170 = ((1 << v364) + 3) >> v364;
      v171 = 2;
      if (v170 > 0xFFF0)
        v171 = 4;
      if (v170 <= 0xF0)
LABEL_403:
        v171 = 1;
      v113 = v356 + v171;
      if (v113 <= v366)
        v113 = v366;
      if (v50 <= 3)
      {
        v172 = ((1 << v355) + 3) >> v355;
        v116 = 2;
        if (v172 > 0xFFF0)
          v116 = 4;
        if (v172 > 0xF0)
        {
          v114 = 5;
          goto LABEL_513;
        }
      }
      v114 = 5;
      goto LABEL_512;
    case 6:
      v125 = *(unsigned __int8 *)(a2 + v51);
      if (v125 >= 2)
      {
        if (v51 <= 3)
          v126 = v51;
        else
          v126 = 4;
        __asm { BR              X12 }
      }
      v173 = v125 == 1;
      v174 = v360;
      if (v125 == 1)
        v174 = v359;
      (*(void (**)(uint64_t))(v174 + 16))(v353);
      *(_BYTE *)(v353 + v354) = v173;
      v175 = *(unsigned __int8 *)(((v344 + a2) & v350) + v354);
      if (v175 >= 2)
      {
        if (v354 <= 3)
          v176 = v354;
        else
          v176 = 4;
        __asm { BR              X12 }
      }
      v236 = v175 == 1;
      v237 = v360;
      if (v175 == 1)
        v237 = v359;
      (*(void (**)(uint64_t))(v237 + 16))((v344 + v353) & v350);
      *(_BYTE *)(((v344 + v353) & v350) + v354) = v236;
      if (v22 > 3)
        goto LABEL_532;
      v238 = ((1 << v364) + 3) >> v364;
      v239 = 2;
      if (v238 > 0xFFF0)
        v239 = 4;
      if (v238 <= 0xF0)
LABEL_532:
        v239 = 1;
      v113 = v356 + v239;
      if (v113 <= v366)
        v113 = v366;
      if (v357 > 3)
        goto LABEL_540;
      v240 = ((1 << v355) + 3) >> v355;
      v116 = 2;
      if (v240 > 0xFFF0)
        v116 = 4;
      if (v240 <= 0xF0)
      {
LABEL_540:
        v114 = 6;
        v116 = 1;
      }
      else
      {
        v114 = 6;
      }
      goto LABEL_514;
    case 7:
      v127 = *(unsigned __int8 *)(a2 + v51);
      if (v127 >= 2)
      {
        if (v51 <= 3)
          v128 = v51;
        else
          v128 = 4;
        __asm { BR              X12 }
      }
      v177 = v127 == 1;
      v178 = v360;
      if (v127 == 1)
        v178 = v359;
      (*(void (**)(uint64_t))(v178 + 16))(v353);
      *(_BYTE *)(v353 + v354) = v177;
      v179 = *(unsigned __int8 *)(((v344 + a2) & v350) + v354);
      if (v179 >= 2)
      {
        if (v354 <= 3)
          v180 = v354;
        else
          v180 = 4;
        __asm { BR              X12 }
      }
      v241 = v179 == 1;
      v242 = v360;
      if (v179 == 1)
        v242 = v359;
      (*(void (**)(uint64_t))(v242 + 16))((v344 + v353) & v350);
      *(_BYTE *)(((v344 + v353) & v350) + v354) = v241;
      if (v22 > 3)
        goto LABEL_547;
      v243 = ((1 << v364) + 3) >> v364;
      v244 = 2;
      if (v243 > 0xFFF0)
        v244 = 4;
      if (v243 <= 0xF0)
LABEL_547:
        v244 = 1;
      v113 = v356 + v244;
      if (v113 <= v366)
        v113 = v366;
      if (v357 > 3)
        goto LABEL_555;
      v245 = ((1 << v355) + 3) >> v355;
      v116 = 2;
      if (v245 > 0xFFF0)
        v116 = 4;
      if (v245 <= 0xF0)
      {
LABEL_555:
        v114 = 7;
        v116 = 1;
      }
      else
      {
        v114 = 7;
      }
      goto LABEL_514;
    case 8:
      v129 = *(unsigned __int8 *)(a2 + v51);
      if (v129 >= 2)
      {
        if (v51 <= 3)
          v130 = v51;
        else
          v130 = 4;
        __asm { BR              X12 }
      }
      v181 = v51;
      v182 = v129 == 1;
      v183 = v360;
      if (v129 == 1)
        v183 = v359;
      (*(void (**)(uint64_t))(v183 + 16))(v353);
      *(_BYTE *)(v353 + v181) = v182;
      v184 = v343 + v353;
      v185 = (_OWORD *)((v343 + a2) & v348);
      v186 = v363;
      if (v363 > 3)
        goto LABEL_431;
      v187 = ((1 << v364) + 3) >> v364;
      if (v187 > 0xFFF0)
      {
        v188 = v38;
        v189 = *(_DWORD *)((char *)v185 + v363);
      }
      else if (v187 > 0xF0)
      {
        v188 = v38;
        v189 = *(unsigned __int16 *)((char *)v185 + v363);
      }
      else
      {
LABEL_431:
        v188 = v38;
        v189 = *((unsigned __int8 *)v185 + v363);
      }
      v190 = (char *)(v184 & v348);
      v191 = v357;
      if (v189 >= 0xF)
      {
        if (v363 <= 3)
          v192 = v363;
        else
          v192 = 4;
        __asm { BR              X12 }
      }
      return result;
    case 9:
      v131 = *(unsigned __int8 *)(a2 + v51);
      if (v131 >= 2)
      {
        if (v51 <= 3)
          v132 = v51;
        else
          v132 = 4;
        __asm { BR              X12 }
      }
      v193 = v51;
      v194 = v131 == 1;
      v195 = v360;
      if (v131 == 1)
        v195 = v359;
      (*(void (**)(uint64_t))(v195 + 16))(v353);
      *(_BYTE *)(v353 + v193) = v194;
      v196 = v358 + v353 + v31;
      v197 = (_OWORD *)((v358 + a2 + v31) & v346);
      v198 = v357;
      v93 = v365;
      if (v357 > 3)
        goto LABEL_444;
      v199 = ((1 << v355) + 3) >> v355;
      if (v199 > 0xFFF0)
      {
        v200 = v38;
        v201 = *(_DWORD *)((char *)v197 + v357);
      }
      else if (v199 > 0xF0)
      {
        v200 = v38;
        v201 = *(unsigned __int16 *)((char *)v197 + v357);
      }
      else
      {
LABEL_444:
        v200 = v38;
        v201 = *((unsigned __int8 *)v197 + v357);
      }
      v202 = (char *)(v196 & v346);
      v203 = v363;
      if (v201 >= 0xF)
      {
        if (v357 <= 3)
          v204 = v357;
        else
          v204 = 4;
        __asm { BR              X12 }
      }
      switch(v201)
      {
        case 0u:
          v248 = *v197;
          *(_QWORD *)((v196 & v346) + 0x10) = *(_QWORD *)(((v358 + a2 + v31) & v346) + 0x10);
          *(_OWORD *)v202 = v248;
          v2 = v353;
          if (v357 > 3)
            goto LABEL_565;
          v249 = ((1 << v355) + 3) >> v355;
          if (v249 > 0xFFF0)
          {
            *(_DWORD *)&v202[v357] = 0;
          }
          else if (v249 > 0xF0)
          {
            *(_WORD *)&v202[v357] = 0;
          }
          else
          {
LABEL_565:
            v202[v357] = 0;
          }
          break;
        case 1u:
          *(_QWORD *)v202 = *(_QWORD *)v197;
          v2 = v353;
          if (v357 > 3)
            goto LABEL_631;
          v272 = 1;
          v273 = ((1 << v355) + 3) >> v355;
          if (v273 > 0xFFF0)
          {
            *(_DWORD *)&v202[v357] = 1;
          }
          else
          {
            if (v273 > 0xF0)
              goto LABEL_778;
LABEL_631:
            v202[v357] = 1;
          }
          break;
        case 2u:
          *(_OWORD *)v202 = *v197;
          v2 = v353;
          if (v357 > 3)
            goto LABEL_635;
          v274 = ((1 << v355) + 3) >> v355;
          if (v274 > 0xFFF0)
          {
            *(_DWORD *)&v202[v357] = 2;
          }
          else
          {
            if (v274 > 0xF0)
            {
              v272 = 2;
              goto LABEL_778;
            }
LABEL_635:
            v202[v357] = 2;
          }
          break;
        case 3u:
          *v202 = *(_BYTE *)v197;
          v2 = v353;
          if (v357 > 3)
            goto LABEL_639;
          v275 = ((1 << v355) + 3) >> v355;
          if (v275 > 0xFFF0)
          {
            *(_DWORD *)&v202[v357] = 3;
          }
          else
          {
            if (v275 > 0xF0)
            {
              v272 = 3;
              goto LABEL_778;
            }
LABEL_639:
            v202[v357] = 3;
          }
          break;
        case 4u:
          *v202 = *(_BYTE *)v197;
          v2 = v353;
          if (v357 > 3)
            goto LABEL_643;
          v276 = ((1 << v355) + 3) >> v355;
          if (v276 > 0xFFF0)
          {
            *(_DWORD *)&v202[v357] = 4;
          }
          else
          {
            if (v276 > 0xF0)
            {
              v272 = 4;
              goto LABEL_778;
            }
LABEL_643:
            v202[v357] = 4;
          }
          break;
        case 5u:
          *v202 = *(_BYTE *)v197;
          v2 = v353;
          if (v357 > 3)
            goto LABEL_647;
          v277 = ((1 << v355) + 3) >> v355;
          if (v277 > 0xFFF0)
          {
            *(_DWORD *)&v202[v357] = 5;
          }
          else
          {
            if (v277 > 0xF0)
            {
              v272 = 5;
              goto LABEL_778;
            }
LABEL_647:
            v202[v357] = 5;
          }
          break;
        case 6u:
          *v202 = *(_BYTE *)v197;
          v2 = v353;
          if (v357 > 3)
            goto LABEL_651;
          v278 = ((1 << v355) + 3) >> v355;
          if (v278 > 0xFFF0)
          {
            *(_DWORD *)&v202[v357] = 6;
          }
          else
          {
            if (v278 > 0xF0)
            {
              v272 = 6;
              goto LABEL_778;
            }
LABEL_651:
            v202[v357] = 6;
          }
          break;
        case 7u:
          (*(void (**)(char *, unint64_t, uint64_t))(v328 + 16))(v202, (v358 + a2 + v31) & v346, v331);
          v279 = (_QWORD *)((unint64_t)&v202[v326] & 0xFFFFFFFFFFFFFFF8);
          v280 = (_QWORD *)(((unint64_t)v197 + v326) & 0xFFFFFFFFFFFFFFF8);
          *v279 = *v280;
          v281 = ((unint64_t)v279 + v327) & v324;
          v282 = ((unint64_t)v280 + v327) & v324;
          v283 = *(void (**)(unint64_t, unint64_t, uint64_t))(v330 + 16);
          swift_bridgeObjectRetain();
          v283(v281, v282, v332);
          v284 = v329 + v281;
          v93 = v365;
          v284 &= 0xFFFFFFFFFFFFF8uLL;
          v285 = v329 + v282;
          v42 = v352;
          v285 &= 0xFFFFFFFFFFFFF8uLL;
          *(_QWORD *)v284 = *(_QWORD *)v285;
          v286 = (_QWORD *)((v284 + 15) & 0xFFFFFFFFFFFFFFF8);
          v287 = (_QWORD *)((v285 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v286 = *v287;
          v286[1] = v287[1];
          v202[v322] = *((_BYTE *)v197 + v322);
          *(_BYTE *)((unint64_t)&v202[v322] | 1) = *(_BYTE *)(((unint64_t)v197 + v322) | 1);
          swift_bridgeObjectRetain();
          v198 = v357;
          swift_bridgeObjectRetain();
          v203 = v363;
          v2 = v353;
          if (v357 > 3)
            goto LABEL_655;
          v288 = ((1 << v355) + 3) >> v355;
          if (v288 > 0xFFF0)
          {
            *(_DWORD *)&v202[v357] = 7;
          }
          else
          {
            if (v288 > 0xF0)
            {
              v272 = 7;
              goto LABEL_778;
            }
LABEL_655:
            v202[v357] = 7;
          }
          break;
        case 8u:
          v289 = *(void **)v197;
          *(_QWORD *)v202 = *(_QWORD *)v197;
          v290 = v289;
          v203 = v363;
          v2 = v353;
          if (v357 > 3)
            goto LABEL_659;
          v291 = ((1 << v355) + 3) >> v355;
          if (v291 > 0xFFF0)
          {
            *(_DWORD *)&v202[v357] = 8;
          }
          else
          {
            if (v291 > 0xF0)
            {
              v272 = 8;
              goto LABEL_778;
            }
LABEL_659:
            v202[v357] = 8;
          }
          break;
        case 9u:
          *v202 = *(_BYTE *)v197;
          v2 = v353;
          if (v357 > 3)
            goto LABEL_663;
          v292 = ((1 << v355) + 3) >> v355;
          if (v292 > 0xFFF0)
          {
            *(_DWORD *)&v202[v357] = 9;
          }
          else
          {
            if (v292 > 0xF0)
            {
              v272 = 9;
              goto LABEL_778;
            }
LABEL_663:
            v202[v357] = 9;
          }
          break;
        case 0xAu:
          *(_WORD *)v202 = *(_WORD *)v197;
          v2 = v353;
          if (v357 > 3)
            goto LABEL_667;
          v293 = ((1 << v355) + 3) >> v355;
          if (v293 > 0xFFF0)
          {
            *(_DWORD *)&v202[v357] = 10;
          }
          else
          {
            if (v293 > 0xF0)
            {
              v272 = 10;
              goto LABEL_778;
            }
LABEL_667:
            v202[v357] = 10;
          }
          break;
        case 0xBu:
          v295 = *(void **)v197;
          v294 = *(void **)(((v358 + a2 + v31) & v346) + 8);
          v296 = *(_BYTE *)(((v358 + a2 + v31) & v346) + 0x10);
          sub_23AAAE478(v295, v294, v296);
          v203 = v363;
          *(_QWORD *)v202 = v295;
          *((_QWORD *)v202 + 1) = v294;
          v93 = v365;
          v198 = v357;
          v202[16] = v296;
          v2 = v353;
          if (v357 > 3)
            goto LABEL_671;
          v297 = ((1 << v355) + 3) >> v355;
          if (v297 > 0xFFF0)
          {
            *(_DWORD *)&v202[v357] = 11;
          }
          else
          {
            if (v297 > 0xF0)
            {
              v272 = 11;
              goto LABEL_778;
            }
LABEL_671:
            v202[v357] = 11;
          }
          break;
        case 0xCu:
          v298 = *v197;
          *(_QWORD *)((v196 & v346) + 0x10) = *(_QWORD *)(((v358 + a2 + v31) & v346) + 0x10);
          *(_OWORD *)v202 = v298;
          v2 = v353;
          if (v357 > 3)
            goto LABEL_675;
          v299 = ((1 << v355) + 3) >> v355;
          if (v299 > 0xFFF0)
          {
            *(_DWORD *)&v202[v357] = 12;
          }
          else
          {
            if (v299 > 0xF0)
            {
              v272 = 12;
              goto LABEL_778;
            }
LABEL_675:
            v202[v357] = 12;
          }
          break;
        case 0xDu:
          if (*(_QWORD *)(((v358 + a2 + v31) & v346) + 0x10) >> 60 == 11)
          {
            v300 = *v197;
            v301 = *(_OWORD *)(((v358 + a2 + v31) & v346) + 0x10);
            v302 = *(_OWORD *)(((v358 + a2 + v31) & v346) + 0x20);
            *(_QWORD *)((v196 & v346) + 0x30) = *(_QWORD *)(((v358 + a2 + v31) & v346) + 0x30);
            *(_OWORD *)((v196 & v346) + 0x10) = v301;
            *(_OWORD *)((v196 & v346) + 0x20) = v302;
            *(_OWORD *)v202 = v300;
          }
          else
          {
            *(_QWORD *)v202 = *(_QWORD *)v197;
            v308 = (uint64_t *)v197 + 1;
            v309 = *(_QWORD *)(((v358 + a2 + v31) & v346) + 0x10);
            if (v309 >> 60 == 15)
            {
              *(_OWORD *)(v202 + 8) = *(_OWORD *)v308;
            }
            else
            {
              v314 = *v308;
              sub_23AAAE668(*v308, *(_QWORD *)(((v358 + a2 + v31) & v346) + 0x10));
              v203 = v363;
              *((_QWORD *)v202 + 1) = v314;
              *((_QWORD *)v202 + 2) = v309;
              v198 = v357;
            }
            v93 = v365;
            v315 = *(_OWORD *)(((v358 + a2 + v31) & v346) + 0x18);
            v202[40] = *(_BYTE *)(((v358 + a2 + v31) & v346) + 0x28);
            *(_OWORD *)(v202 + 24) = v315;
            *((_QWORD *)v202 + 6) = *(_QWORD *)(((v358 + a2 + v31) & v346) + 0x30);
          }
          v202[56] = *(_BYTE *)(((v358 + a2 + v31) & v346) + 0x38);
          v2 = v353;
          if (v198 > 3)
            goto LABEL_735;
          v316 = ((1 << v355) + 3) >> v355;
          if (v316 > 0xFFF0)
          {
            *(_DWORD *)&v202[v198] = 13;
          }
          else
          {
            if (v316 > 0xF0)
            {
              v272 = 13;
              goto LABEL_778;
            }
LABEL_735:
            v202[v198] = 13;
          }
          break;
        case 0xEu:
          *v202 = *(_BYTE *)v197;
          v2 = v353;
          if (v357 > 3)
            goto LABEL_681;
          v303 = ((1 << v355) + 3) >> v355;
          if (v303 > 0xFFF0)
          {
            *(_DWORD *)&v202[v357] = 14;
          }
          else if (v303 > 0xF0)
          {
            v272 = 14;
LABEL_778:
            *(_WORD *)&v202[v198] = v272;
          }
          else
          {
LABEL_681:
            v202[v357] = 14;
          }
          break;
        default:
          if (v357 > 3)
            goto LABEL_626;
          v270 = ((1 << v355) + 3) >> v355;
          v271 = 2;
          if (v270 > 0xFFF0)
            v271 = 4;
          if (v270 <= 0xF0)
LABEL_626:
            v271 = 1;
          memcpy(v202, (const void *)((v358 + a2 + v31) & v346), v271 + v357);
          v2 = v353;
          v203 = v363;
          break;
      }
      v38 = v200;
      if (v203 > 3)
        goto LABEL_783;
      v319 = ((1 << v364) + 3) >> v364;
      v320 = 2;
      if (v319 > 0xFFF0)
        v320 = 4;
      if (v319 <= 0xF0)
LABEL_783:
        v320 = 1;
      v113 = v356 + v320;
      if (v113 <= v366)
        v113 = v366;
      if (v198 > 3)
        goto LABEL_791;
      v321 = ((1 << v355) + 3) >> v355;
      v116 = 2;
      if (v321 > 0xFFF0)
        v116 = 4;
      if (v321 <= 0xF0)
      {
LABEL_791:
        v114 = 9;
        v116 = 1;
      }
      else
      {
        v114 = 9;
      }
      goto LABEL_514;
    case 0xA:
      v133 = *(unsigned __int8 *)(a2 + v51);
      if (v133 >= 2)
      {
        if (v51 <= 3)
          v134 = v51;
        else
          v134 = 4;
        __asm { BR              X12 }
      }
      v205 = v51;
      v206 = v133 == 1;
      v207 = v360;
      if (v133 == 1)
        v207 = v359;
      (*(void (**)(uint64_t))(v207 + 16))(v353);
      *(_BYTE *)(v353 + v205) = v206;
      v208 = (a2 + v358 + 7) & 0xFFFFFFFFFFFFFFF8;
      v209 = *(_BYTE *)(v208 + 8);
      v210 = (v353 + v358 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v210 = *(_QWORD *)v208;
      *(_BYTE *)(v210 + 8) = v209;
      if (v22 > 3)
        goto LABEL_458;
      v211 = ((1 << v364) + 3) >> v364;
      v212 = 2;
      if (v211 > 0xFFF0)
        v212 = 4;
      if (v211 <= 0xF0)
LABEL_458:
        v212 = 1;
      v113 = v356 + v212;
      if (v113 <= v366)
        v113 = v366;
      if (v50 <= 3)
      {
        v213 = ((1 << v355) + 3) >> v355;
        v116 = 2;
        if (v213 > 0xFFF0)
          v116 = 4;
        if (v213 > 0xF0)
        {
          v114 = 10;
          goto LABEL_513;
        }
      }
      v114 = 10;
      goto LABEL_512;
    case 0xB:
      v135 = *(unsigned __int8 *)(a2 + v51);
      if (v135 >= 2)
      {
        if (v51 <= 3)
          v136 = v51;
        else
          v136 = 4;
        __asm { BR              X12 }
      }
      v214 = v51;
      v215 = v135 == 1;
      v216 = v360;
      if (v135 == 1)
        v216 = v359;
      (*(void (**)(uint64_t))(v216 + 16))(v353);
      *(_BYTE *)(v353 + v214) = v215;
      *(_OWORD *)((v353 + v358 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((a2 + v358 + 7) & 0xFFFFFFFFFFFFF8);
      if (v22 > 3)
        goto LABEL_473;
      v217 = ((1 << v364) + 3) >> v364;
      v218 = 2;
      if (v217 > 0xFFF0)
        v218 = 4;
      if (v217 <= 0xF0)
LABEL_473:
        v218 = 1;
      v113 = v356 + v218;
      if (v113 <= v366)
        v113 = v366;
      if (v50 <= 3)
      {
        v219 = ((1 << v355) + 3) >> v355;
        v116 = 2;
        if (v219 > 0xFFF0)
          v116 = 4;
        if (v219 > 0xF0)
        {
          v114 = 11;
          goto LABEL_513;
        }
      }
      v114 = 11;
      goto LABEL_512;
    case 0xC:
      v137 = *(unsigned __int8 *)(a2 + v51);
      if (v137 >= 2)
      {
        if (v51 <= 3)
          v138 = v51;
        else
          v138 = 4;
        __asm { BR              X12 }
      }
      v220 = v51;
      v221 = v137 == 1;
      v222 = v360;
      if (v137 == 1)
        v222 = v359;
      (*(void (**)(uint64_t))(v222 + 16))(v353);
      *(_BYTE *)(v353 + v220) = v221;
      *(_BYTE *)(v358 + v353) = *(_BYTE *)(v358 + a2);
      if (v22 > 3)
        goto LABEL_488;
      v223 = ((1 << v364) + 3) >> v364;
      v224 = 2;
      if (v223 > 0xFFF0)
        v224 = 4;
      if (v223 <= 0xF0)
LABEL_488:
        v224 = 1;
      v113 = v356 + v224;
      if (v113 <= v366)
        v113 = v366;
      if (v50 <= 3)
      {
        v225 = ((1 << v355) + 3) >> v355;
        v116 = 2;
        if (v225 > 0xFFF0)
          v116 = 4;
        if (v225 > 0xF0)
        {
          v114 = 12;
          goto LABEL_513;
        }
      }
      v114 = 12;
      goto LABEL_512;
    case 0xD:
      v139 = *(unsigned __int8 *)(a2 + v51);
      if (v139 >= 2)
      {
        if (v51 <= 3)
          v140 = v51;
        else
          v140 = 4;
        __asm { BR              X12 }
      }
      v226 = v51;
      v227 = v139 == 1;
      v228 = v360;
      if (v139 == 1)
        v228 = v359;
      (*(void (**)(uint64_t))(v228 + 16))(v353);
      *(_BYTE *)(v353 + v226) = v227;
      v229 = (_QWORD *)((v353 + v358 + 7) & 0xFFFFFFFFFFFFF8);
      v230 = (_QWORD *)((a2 + v358 + 7) & 0xFFFFFFFFFFFFF8);
      *v229 = *v230;
      *(_QWORD *)(((unint64_t)v229 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v230 + 15) & 0xFFFFFFFFFFFFF8);
      if (v22 > 3)
        goto LABEL_503;
      v231 = ((1 << v364) + 3) >> v364;
      v232 = 2;
      if (v231 > 0xFFF0)
        v232 = 4;
      if (v231 <= 0xF0)
LABEL_503:
        v232 = 1;
      v113 = v356 + v232;
      if (v113 <= v366)
        v113 = v366;
      if (v50 > 3)
        goto LABEL_511;
      v233 = ((1 << v355) + 3) >> v355;
      v116 = 2;
      if (v233 > 0xFFF0)
        v116 = 4;
      if (v233 <= 0xF0)
      {
LABEL_511:
        v114 = 13;
LABEL_512:
        v116 = 1;
      }
      else
      {
        v114 = 13;
      }
LABEL_513:
      v93 = v365;
      goto LABEL_514;
    default:
      if (v82 > 3)
        goto LABEL_218;
      v98 = ((1 << v364) + 3) >> v364;
      v99 = 2;
      if (v98 > 0xFFF0)
        v99 = 4;
      if (v98 <= 0xF0)
LABEL_218:
        v99 = 1;
      v100 = v356 + v99;
      if (v100 <= v366)
        v100 = v366;
      if (v357 > 3)
        goto LABEL_225;
      v101 = ((1 << v355) + 3) >> v355;
      v102 = 2;
      if (v101 > 0xFFF0)
        v102 = 4;
      if (v101 <= 0xF0)
LABEL_225:
        v102 = 1;
      v103 = v365 + v102;
      if (v103 > v100)
        v100 = v103;
      if (v36 > v100)
        v100 = v36;
      if (v54 > v100)
        v100 = v54;
      if (v352 > v100)
        v100 = v352;
      if (v38 > v100)
        LODWORD(v100) = v38;
      if (v100 <= 3)
        v104 = v100;
      else
        v104 = 4;
      __asm { BR              X13 }
      return result;
  }
  switch(v189)
  {
    case 0u:
      v246 = *v185;
      *(_QWORD *)((v184 & v348) + 0x10) = *(_QWORD *)(((v343 + a2) & v348) + 0x10);
      *(_OWORD *)v190 = v246;
      v2 = v353;
      if (v363 > 3)
        goto LABEL_560;
      v247 = ((1 << v364) + 3) >> v364;
      if (v247 > 0xFFF0)
      {
        *(_DWORD *)&v190[v363] = 0;
      }
      else
      {
        if (v247 <= 0xF0)
        {
LABEL_560:
          v190[v363] = 0;
          goto LABEL_725;
        }
        *(_WORD *)&v190[v363] = 0;
      }
      goto LABEL_766;
    case 1u:
      *(_QWORD *)v190 = *(_QWORD *)v185;
      v2 = v353;
      if (v363 > 3)
        goto LABEL_575;
      v252 = 1;
      v247 = ((1 << v364) + 3) >> v364;
      if (v247 > 0xFFF0)
      {
        *(_DWORD *)&v190[v363] = 1;
        goto LABEL_766;
      }
      if (v247 > 0xF0)
        goto LABEL_765;
LABEL_575:
      v253 = 1;
      goto LABEL_724;
    case 2u:
      *(_OWORD *)v190 = *v185;
      v2 = v353;
      if (v363 > 3)
        goto LABEL_579;
      v247 = ((1 << v364) + 3) >> v364;
      if (v247 > 0xFFF0)
      {
        *(_DWORD *)&v190[v363] = 2;
        goto LABEL_766;
      }
      if (v247 <= 0xF0)
      {
LABEL_579:
        v253 = 2;
        goto LABEL_724;
      }
      v252 = 2;
      goto LABEL_765;
    case 3u:
      *v190 = *(_BYTE *)v185;
      v2 = v353;
      if (v363 > 3)
        goto LABEL_583;
      v247 = ((1 << v364) + 3) >> v364;
      if (v247 > 0xFFF0)
      {
        *(_DWORD *)&v190[v363] = 3;
        goto LABEL_766;
      }
      if (v247 <= 0xF0)
      {
LABEL_583:
        v253 = 3;
        goto LABEL_724;
      }
      v252 = 3;
      goto LABEL_765;
    case 4u:
      *v190 = *(_BYTE *)v185;
      v2 = v353;
      if (v363 > 3)
        goto LABEL_587;
      v247 = ((1 << v364) + 3) >> v364;
      if (v247 > 0xFFF0)
      {
        *(_DWORD *)&v190[v363] = 4;
        goto LABEL_766;
      }
      if (v247 <= 0xF0)
      {
LABEL_587:
        v253 = 4;
        goto LABEL_724;
      }
      v252 = 4;
      goto LABEL_765;
    case 5u:
      *v190 = *(_BYTE *)v185;
      v2 = v353;
      if (v363 > 3)
        goto LABEL_591;
      v247 = ((1 << v364) + 3) >> v364;
      if (v247 > 0xFFF0)
      {
        *(_DWORD *)&v190[v363] = 5;
        goto LABEL_766;
      }
      if (v247 <= 0xF0)
      {
LABEL_591:
        v253 = 5;
        goto LABEL_724;
      }
      v252 = 5;
      goto LABEL_765;
    case 6u:
      *v190 = *(_BYTE *)v185;
      v2 = v353;
      if (v363 > 3)
        goto LABEL_595;
      v247 = ((1 << v364) + 3) >> v364;
      if (v247 > 0xFFF0)
      {
        *(_DWORD *)&v190[v363] = 6;
        goto LABEL_766;
      }
      if (v247 <= 0xF0)
      {
LABEL_595:
        v253 = 6;
        goto LABEL_724;
      }
      v252 = 6;
      goto LABEL_765;
    case 7u:
      (*(void (**)(char *, uint64_t, uint64_t))(v335 + 16))(v190, (v343 + a2) & v348, v338);
      v254 = (_QWORD *)((unint64_t)&v190[v333] & 0xFFFFFFFFFFFFFFF8);
      v255 = (_QWORD *)(((unint64_t)v185 + v333) & 0xFFFFFFFFFFFFFFF8);
      *v254 = *v255;
      v256 = ((unint64_t)v254 + v334) & v325;
      v257 = ((unint64_t)v255 + v334) & v325;
      v258 = *(void (**)(unint64_t, unint64_t, uint64_t))(v337 + 16);
      swift_bridgeObjectRetain();
      v258(v256, v257, v339);
      v259 = v336 + v256;
      v93 = v365;
      v259 &= 0xFFFFFFFFFFFFF8uLL;
      v260 = v336 + v257;
      v42 = v352;
      v260 &= 0xFFFFFFFFFFFFF8uLL;
      *(_QWORD *)v259 = *(_QWORD *)v260;
      v261 = (_QWORD *)((v259 + 15) & 0xFFFFFFFFFFFFFFF8);
      v262 = (_QWORD *)((v260 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v261 = *v262;
      v261[1] = v262[1];
      v190[v323] = *((_BYTE *)v185 + v323);
      *(_BYTE *)((unint64_t)&v190[v323] | 1) = *(_BYTE *)(((unint64_t)v185 + v323) | 1);
      swift_bridgeObjectRetain();
      v191 = v357;
      swift_bridgeObjectRetain();
      v186 = v363;
      v2 = v353;
      if (v363 > 3)
        goto LABEL_599;
      v247 = ((1 << v364) + 3) >> v364;
      if (v247 > 0xFFF0)
      {
        *(_DWORD *)&v190[v363] = 7;
        goto LABEL_766;
      }
      if (v247 <= 0xF0)
      {
LABEL_599:
        v253 = 7;
        goto LABEL_724;
      }
      v252 = 7;
      goto LABEL_765;
    case 8u:
      v304 = *(void **)v185;
      *(_QWORD *)v190 = *(_QWORD *)v185;
      v305 = v304;
      v186 = v363;
      v2 = v353;
      if (v363 > 3)
        goto LABEL_683;
      v247 = ((1 << v364) + 3) >> v364;
      if (v247 > 0xFFF0)
      {
        *(_DWORD *)&v190[v363] = 8;
        goto LABEL_766;
      }
      if (v247 <= 0xF0)
      {
LABEL_683:
        v253 = 8;
        goto LABEL_724;
      }
      v252 = 8;
      goto LABEL_765;
    case 9u:
      *v190 = *(_BYTE *)v185;
      v2 = v353;
      if (v363 > 3)
        goto LABEL_603;
      v247 = ((1 << v364) + 3) >> v364;
      if (v247 > 0xFFF0)
      {
        *(_DWORD *)&v190[v363] = 9;
        goto LABEL_766;
      }
      if (v247 <= 0xF0)
      {
LABEL_603:
        v253 = 9;
        goto LABEL_724;
      }
      v252 = 9;
      goto LABEL_765;
    case 0xAu:
      *(_WORD *)v190 = *(_WORD *)v185;
      v2 = v353;
      if (v363 > 3)
        goto LABEL_607;
      v247 = ((1 << v364) + 3) >> v364;
      if (v247 > 0xFFF0)
      {
        *(_DWORD *)&v190[v363] = 10;
        goto LABEL_766;
      }
      if (v247 <= 0xF0)
      {
LABEL_607:
        v253 = 10;
        goto LABEL_724;
      }
      v252 = 10;
      goto LABEL_765;
    case 0xBu:
      v264 = *(void **)v185;
      v263 = *(void **)(((v343 + a2) & v348) + 8);
      v265 = *(_BYTE *)(((v343 + a2) & v348) + 0x10);
      sub_23AAAE478(v264, v263, v265);
      v186 = v363;
      *(_QWORD *)v190 = v264;
      *((_QWORD *)v190 + 1) = v263;
      v93 = v365;
      v191 = v357;
      v190[16] = v265;
      v2 = v353;
      if (v363 > 3)
        goto LABEL_611;
      v247 = ((1 << v364) + 3) >> v364;
      if (v247 > 0xFFF0)
      {
        *(_DWORD *)&v190[v363] = 11;
        goto LABEL_766;
      }
      if (v247 <= 0xF0)
      {
LABEL_611:
        v253 = 11;
        goto LABEL_724;
      }
      v252 = 11;
      goto LABEL_765;
    case 0xCu:
      v266 = *v185;
      *(_QWORD *)((v184 & v348) + 0x10) = *(_QWORD *)(((v343 + a2) & v348) + 0x10);
      *(_OWORD *)v190 = v266;
      v2 = v353;
      if (v363 > 3)
        goto LABEL_615;
      v247 = ((1 << v364) + 3) >> v364;
      if (v247 > 0xFFF0)
      {
        *(_DWORD *)&v190[v363] = 12;
        goto LABEL_766;
      }
      if (v247 <= 0xF0)
      {
LABEL_615:
        v253 = 12;
        goto LABEL_724;
      }
      v252 = 12;
      goto LABEL_765;
    case 0xDu:
      if (*(_QWORD *)(((v343 + a2) & v348) + 0x10) >> 60 == 11)
      {
        v267 = *v185;
        v268 = *(_OWORD *)(((v343 + a2) & v348) + 0x10);
        v269 = *(_OWORD *)(((v343 + a2) & v348) + 0x20);
        *(_QWORD *)((v184 & v348) + 0x30) = *(_QWORD *)(((v343 + a2) & v348) + 0x30);
        *(_OWORD *)((v184 & v348) + 0x10) = v268;
        *(_OWORD *)((v184 & v348) + 0x20) = v269;
        *(_OWORD *)v190 = v267;
      }
      else
      {
        *(_QWORD *)v190 = *(_QWORD *)v185;
        v306 = (uint64_t *)v185 + 1;
        v307 = *(_QWORD *)(((v343 + a2) & v348) + 0x10);
        if (v307 >> 60 == 15)
        {
          *(_OWORD *)(v190 + 8) = *(_OWORD *)v306;
        }
        else
        {
          v310 = *v306;
          sub_23AAAE668(*v306, *(_QWORD *)(((v343 + a2) & v348) + 0x10));
          v186 = v363;
          *((_QWORD *)v190 + 1) = v310;
          *((_QWORD *)v190 + 2) = v307;
          v191 = v357;
        }
        v93 = v365;
        v311 = *(_OWORD *)(((v343 + a2) & v348) + 0x18);
        v190[40] = *(_BYTE *)(((v343 + a2) & v348) + 0x28);
        *(_OWORD *)(v190 + 24) = v311;
        *((_QWORD *)v190 + 6) = *(_QWORD *)(((v343 + a2) & v348) + 0x30);
      }
      v190[56] = *(_BYTE *)(((v343 + a2) & v348) + 0x38);
      v2 = v353;
      if (v186 > 3)
        goto LABEL_723;
      v247 = ((1 << v364) + 3) >> v364;
      if (v247 > 0xFFF0)
      {
        *(_DWORD *)&v190[v186] = 13;
        goto LABEL_766;
      }
      if (v247 <= 0xF0)
      {
LABEL_723:
        v253 = 13;
        goto LABEL_724;
      }
      v252 = 13;
      goto LABEL_765;
    case 0xEu:
      *v190 = *(_BYTE *)v185;
      v2 = v353;
      if (v363 > 3)
        goto LABEL_621;
      v247 = ((1 << v364) + 3) >> v364;
      if (v247 > 0xFFF0)
      {
        *(_DWORD *)&v190[v363] = 14;
LABEL_766:
        v317 = v247 > 0xFFF0;
        v313 = 2;
        if (v317)
          v313 = 4;
        v38 = v188;
        goto LABEL_769;
      }
      if (v247 > 0xF0)
      {
        v252 = 14;
LABEL_765:
        *(_WORD *)&v190[v186] = v252;
        goto LABEL_766;
      }
LABEL_621:
      v253 = 14;
LABEL_724:
      v190[v186] = v253;
LABEL_725:
      v38 = v188;
      if (v186 > 3)
        goto LABEL_729;
      v312 = ((1 << v364) + 3) >> v364;
      v313 = 2;
      if (v312 > 0xFFF0)
        v313 = 4;
      if (v312 <= 0xF0)
LABEL_729:
        v313 = 1;
LABEL_769:
      v113 = v356 + v313;
      if (v113 <= v366)
        v113 = v366;
      if (v191 > 3)
        goto LABEL_776;
      v318 = ((1 << v355) + 3) >> v355;
      v116 = 2;
      if (v318 > 0xFFF0)
        v116 = 4;
      if (v318 <= 0xF0)
      {
LABEL_776:
        v114 = 8;
        v116 = 1;
      }
      else
      {
        v114 = 8;
      }
LABEL_514:
      v234 = v93 + v116;
      if (v234 > v113)
        v113 = v234;
      if (v36 > v113)
        v113 = v36;
      if (v54 > v113)
        v113 = v54;
      if (v42 > v113)
        v113 = v42;
      if (v38 > v113)
        v113 = v38;
      *(_BYTE *)(v2 + v113) = v114;
      return v2;
    default:
      if (v363 > 3)
        goto LABEL_570;
      v250 = ((1 << v364) + 3) >> v364;
      v251 = 2;
      if (v250 > 0xFFF0)
        v251 = 4;
      if (v250 <= 0xF0)
LABEL_570:
        v251 = 1;
      memcpy(v190, (const void *)((v343 + a2) & v348), v251 + v363);
      LODWORD(v186) = v363;
      v2 = v353;
      goto LABEL_725;
  }
}

uint64_t sub_23AB47A58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  BOOL v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  BOOL v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  BOOL v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int v123;
  BOOL v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  BOOL v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int v133;
  unint64_t v134;
  BOOL v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  BOOL v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  BOOL v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  char *v151;
  unsigned int v152;
  uint64_t v153;
  BOOL v154;
  uint64_t v155;
  uint64_t v156;
  _OWORD *v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  _OWORD *v161;
  uint64_t v162;
  BOOL v163;
  uint64_t v164;
  unint64_t v165;
  char v166;
  unint64_t v167;
  unsigned int v168;
  uint64_t v169;
  unsigned int v170;
  BOOL v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int v175;
  BOOL v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  unsigned int v180;
  BOOL v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  unsigned int v185;
  uint64_t v186;
  unsigned int v187;
  BOOL v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int v192;
  BOOL v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  unsigned int v197;
  __int128 v198;
  unsigned int v199;
  __int128 v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  __int16 v204;
  char v205;
  _QWORD *v206;
  _QWORD *v207;
  unint64_t v208;
  unint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  unsigned int v217;
  uint64_t v218;
  __int16 v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  _QWORD *v226;
  _QWORD *v227;
  unint64_t v228;
  unint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  __int128 v236;
  unsigned int v237;
  __int128 v238;
  unsigned int v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  unsigned int v249;
  BOOL v250;
  unsigned int v251;
  unint64_t v252;
  uint64_t result;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  char v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t AssociatedTypeWitness;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 <= v3)
    v6 = v3;
  else
    v6 = *(_QWORD *)(v4 + 64);
  v7 = v6 + 1;
  v8 = v6 + 2;
  v284 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(_DWORD *)(v4 + 80);
  v10 = v9;
  v264 = v3 + v9;
  v279 = v9;
  v266 = v5;
  v11 = v5 + (v264 & ~(unint64_t)v9);
  if (v11 + 1 > v6 + 2)
    v12 = v11 + 1;
  else
    v12 = v6 + 2;
  if (v7 > v12)
    v12 = v6 + 1;
  v281 = v6;
  v13 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 0xFFFFFFFFFFFFFFF8) + 16 > v12)
    v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
  v285 = v2;
  v14 = *(unsigned __int8 *)(v2 + 80) | v10;
  v267 = v7 + v14;
  v272 = v14;
  if (((v7 + v14) & ~v14) + v7 > v12)
    v12 = ((v7 + v14) & ~v14) + v7;
  v289 = v12;
  v262 = swift_getAssociatedTypeWitness();
  v15 = *(_QWORD *)(v262 - 8);
  v16 = *(_DWORD *)(v15 + 80) & 0xF8;
  v263 = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(v263 - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = v16 | v18 | 7;
  v288 = v7;
  v265 = v7 + v19;
  v270 = v19;
  v20 = (v7 + v19) & ~v19;
  v260 = v15;
  v261 = v17;
  v257 = *(_QWORD *)(v15 + 64) + 7;
  v258 = v18 + 8;
  v259 = *(_QWORD *)(v17 + 64) + 7;
  v269 = (((v259 + ((v18 + 8 + (v257 & 0xFFFFFFFFFFFFFFF8)) & ~v18)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v269 + 18 <= 0x39)
    v21 = 57;
  else
    v21 = v269 + 18;
  if (v21 > 3)
    goto LABEL_21;
  v22 = ((1 << (8 * v21)) + 3) >> (8 * v21);
  v23 = 2;
  if (v22 > 0xFFF0)
    v23 = 4;
  if (v22 <= 0xF0)
  {
LABEL_21:
    v24 = v8;
    v23 = 1;
  }
  else
  {
    v24 = v8;
  }
  v287 = v21 + v20;
  v25 = v21 + v20 + v23;
  if (v25 <= v289)
    v26 = v289;
  else
    v26 = v25;
  v256 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v256 - 8);
  v28 = *(_DWORD *)(v27 + 80) & 0xF8;
  v29 = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(unsigned __int8 *)(v30 + 80);
  v32 = v28 | v31 | 7;
  v33 = (v288 + v32) & ~v32;
  v254 = *(_QWORD *)(v27 + 64) + 7;
  v255 = v27;
  v34 = v31 + 8;
  v35 = (((*(_QWORD *)(v30 + 64) + 7 + ((v31 + 8 + (v254 & 0xFFFFFFFFFFFFFFF8)) & ~v31)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v35 + 18 <= 0x39)
    v36 = 57;
  else
    v36 = v35 + 18;
  if (v36 <= 3)
    v37 = (((1 << (8 * v36)) + 3) >> (8 * v36)) + 15;
  else
    v37 = 16;
  v38 = v13 + 17;
  v39 = v13 + 24;
  v40 = ((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v41 = 4;
  if (v37 < 0x10000)
    v41 = 2;
  if (v37 < 0x100)
    v42 = 1;
  else
    v42 = v41;
  v43 = v36 + v33;
  v44 = v36 + v33 + v42;
  if (v44 <= v26)
    v44 = v26;
  if (v38 > v44)
    v44 = v13 + 17;
  if (v39 > v44)
    v44 = v13 + 24;
  v45 = v24;
  if (v24 > v44)
    v44 = v24;
  if (v40 > v44)
    v44 = ((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v278 = v21;
  v268 = 8 * v36;
  v275 = v43;
  v276 = v13 + 17;
  v277 = v13 + 24;
  v53 = ~v279;
  v54 = ~v272;
  v55 = ~v270;
  v56 = ~v18;
  v57 = ~v32;
  v58 = ~v31;
  v59 = v35 + 16;
  v280 = v36;
  switch(*(_BYTE *)(a2 + v44))
  {
    case 0:
      v60 = *(unsigned __int8 *)(a2 + v281);
      if (v60 >= 2)
      {
        if (v281 <= 3)
          v61 = v281;
        else
          v61 = 4;
        __asm { BR              X12 }
      }
      v99 = v45;
      v63 = a1;
      v68 = v40;
      v69 = v277;
      v109 = v60 == 1;
      v110 = v285;
      if (v60 == 1)
        v110 = v284;
      (*(void (**)(uint64_t))(v110 + 32))(a1);
      *(_BYTE *)(a1 + v281) = v109;
      *(_BYTE *)(v288 + a1) = *(_BYTE *)(v288 + a2);
      if (v278 > 3)
        goto LABEL_170;
      v111 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      v112 = 2;
      if (v111 > 0xFFF0)
        v112 = 4;
      if (v111 <= 0xF0)
LABEL_170:
        v112 = 1;
      v70 = v99;
      v71 = v287 + v112;
      if (v71 <= v289)
        v71 = v289;
      if (v280 <= 3)
      {
        v113 = ((1 << v268) + 3) >> v268;
        v74 = 2;
        if (v113 > 0xFFF0)
          v74 = 4;
        if (v113 > 0xF0)
        {
          v72 = 0;
          goto LABEL_592;
        }
      }
      v72 = 0;
      goto LABEL_591;
    case 1:
      v62 = v45;
      v63 = a1;
      (*(void (**)(uint64_t))(v285 + 32))(a1);
      v64 = (v264 + a1) & v53;
      v65 = (v264 + a2) & v53;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v284 + 32))(v64, v65, AssociatedTypeWitness);
      *(_BYTE *)(v64 + v266) = *(_BYTE *)(v65 + v266);
      if (v278 > 3)
        goto LABEL_83;
      v66 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      v67 = 2;
      if (v66 > 0xFFF0)
        v67 = 4;
      if (v66 <= 0xF0)
LABEL_83:
        v67 = 1;
      v68 = v40;
      v69 = v277;
      v70 = v62;
      v71 = v287 + v67;
      if (v71 <= v289)
        v71 = v289;
      if (v280 > 3)
        goto LABEL_90;
      v72 = 1;
      v73 = ((1 << v268) + 3) >> v268;
      v74 = 2;
      if (v73 > 0xFFF0)
        v74 = 4;
      if (v73 <= 0xF0)
      {
LABEL_90:
        v74 = 1;
        v72 = 1;
      }
      goto LABEL_592;
    case 2:
      v75 = *(unsigned __int8 *)(a2 + v281);
      if (v75 >= 2)
      {
        if (v281 <= 3)
          v76 = v281;
        else
          v76 = 4;
        __asm { BR              X12 }
      }
      v100 = v45;
      v63 = a1;
      v68 = v40;
      v69 = v277;
      v114 = v75 == 1;
      v115 = v285;
      if (v75 == 1)
        v115 = v284;
      (*(void (**)(uint64_t))(v115 + 32))(a1);
      *(_BYTE *)(a1 + v281) = v114;
      *(_BYTE *)(v288 + a1) = *(_BYTE *)(v288 + a2);
      if (v278 > 3)
        goto LABEL_185;
      v116 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      v117 = 2;
      if (v116 > 0xFFF0)
        v117 = 4;
      if (v116 <= 0xF0)
LABEL_185:
        v117 = 1;
      v70 = v100;
      v71 = v287 + v117;
      if (v71 <= v289)
        v71 = v289;
      if (v280 <= 3)
      {
        v118 = ((1 << v268) + 3) >> v268;
        v72 = 2;
        v74 = 4;
        if (v118 <= 0xFFF0)
          v74 = 2;
        if (v118 > 0xF0)
          goto LABEL_592;
      }
      v72 = 2;
      goto LABEL_591;
    case 3:
      v77 = *(unsigned __int8 *)(a2 + v281);
      if (v77 >= 2)
      {
        if (v281 <= 3)
          v78 = v281;
        else
          v78 = 4;
        __asm { BR              X12 }
      }
      v101 = v45;
      v63 = a1;
      v68 = v40;
      v69 = v277;
      v119 = v77 == 1;
      v120 = v285;
      if (v77 == 1)
        v120 = v284;
      (*(void (**)(uint64_t))(v120 + 32))(a1);
      *(_BYTE *)(a1 + v281) = v119;
      if (v278 > 3)
        goto LABEL_199;
      v121 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      v122 = 2;
      if (v121 > 0xFFF0)
        v122 = 4;
      if (v121 <= 0xF0)
LABEL_199:
        v122 = 1;
      v70 = v101;
      v71 = v287 + v122;
      if (v71 <= v289)
        v71 = v289;
      if (v280 <= 3)
      {
        v123 = ((1 << v268) + 3) >> v268;
        v74 = 2;
        if (v123 > 0xFFF0)
          v74 = 4;
        if (v123 > 0xF0)
        {
          v72 = 3;
          goto LABEL_592;
        }
      }
      v72 = 3;
      goto LABEL_591;
    case 4:
      v79 = *(unsigned __int8 *)(a2 + v281);
      if (v79 >= 2)
      {
        if (v281 <= 3)
          v80 = v281;
        else
          v80 = 4;
        __asm { BR              X12 }
      }
      v102 = v45;
      v63 = a1;
      v68 = v40;
      v69 = v277;
      v124 = v79 == 1;
      v125 = v285;
      if (v79 == 1)
        v125 = v284;
      (*(void (**)(uint64_t))(v125 + 32))(a1);
      *(_BYTE *)(a1 + v281) = v124;
      *(_QWORD *)((a1 + v288 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v288 + 7) & 0xFFFFFFFFFFFFF8);
      if (v278 > 3)
        goto LABEL_214;
      v126 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      v127 = 2;
      if (v126 > 0xFFF0)
        v127 = 4;
      if (v126 <= 0xF0)
LABEL_214:
        v127 = 1;
      v70 = v102;
      v71 = v287 + v127;
      if (v71 <= v289)
        v71 = v289;
      if (v280 <= 3)
      {
        v128 = ((1 << v268) + 3) >> v268;
        v74 = 2;
        v72 = 4;
        if (v128 > 0xFFF0)
          v74 = 4;
        if (v128 > 0xF0)
          goto LABEL_592;
      }
      v72 = 4;
      goto LABEL_591;
    case 5:
      v81 = *(unsigned __int8 *)(a2 + v281);
      if (v81 >= 2)
      {
        if (v281 <= 3)
          v82 = v281;
        else
          v82 = 4;
        __asm { BR              X12 }
      }
      v103 = v45;
      v63 = a1;
      v68 = v40;
      v69 = v277;
      v129 = v81 == 1;
      v130 = v285;
      if (v81 == 1)
        v130 = v284;
      (*(void (**)(uint64_t))(v130 + 32))(a1);
      *(_BYTE *)(a1 + v281) = v129;
      *(_QWORD *)((a1 + v288 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v288 + 7) & 0xFFFFFFFFFFFFF8);
      if (v278 > 3)
        goto LABEL_228;
      v131 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      v132 = 2;
      if (v131 > 0xFFF0)
        v132 = 4;
      if (v131 <= 0xF0)
LABEL_228:
        v132 = 1;
      v70 = v103;
      v71 = v287 + v132;
      if (v71 <= v289)
        v71 = v289;
      if (v280 <= 3)
      {
        v133 = ((1 << v268) + 3) >> v268;
        v74 = 2;
        if (v133 > 0xFFF0)
          v74 = 4;
        if (v133 > 0xF0)
        {
          v72 = 5;
          goto LABEL_592;
        }
      }
      v72 = 5;
      goto LABEL_591;
    case 6:
      v83 = *(unsigned __int8 *)(a2 + v281);
      if (v83 >= 2)
      {
        if (v281 <= 3)
          v84 = v281;
        else
          v84 = 4;
        __asm { BR              X12 }
      }
      v63 = a1;
      v68 = v40;
      v69 = v277;
      v134 = v45;
      v135 = v83 == 1;
      v136 = v285;
      if (v83 == 1)
        v136 = v284;
      (*(void (**)(uint64_t))(v136 + 32))(a1);
      *(_BYTE *)(a1 + v281) = v135;
      v137 = *(unsigned __int8 *)(((v267 + a2) & v54) + v281);
      if (v137 >= 2)
      {
        if (v281 <= 3)
          v138 = v281;
        else
          v138 = 4;
        __asm { BR              X12 }
      }
      v188 = v137 == 1;
      v189 = v285;
      if (v137 == 1)
        v189 = v284;
      (*(void (**)(uint64_t))(v189 + 32))((v267 + a1) & v54);
      *(_BYTE *)(((v267 + a1) & v54) + v281) = v188;
      if (v278 > 3)
        goto LABEL_344;
      v190 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      v191 = 2;
      if (v190 > 0xFFF0)
        v191 = 4;
      if (v190 <= 0xF0)
LABEL_344:
        v191 = 1;
      v70 = v134;
      v71 = v287 + v191;
      if (v71 <= v289)
        v71 = v289;
      if (v280 <= 3)
      {
        v192 = ((1 << v268) + 3) >> v268;
        v74 = 2;
        if (v192 > 0xFFF0)
          v74 = 4;
        if (v192 > 0xF0)
        {
          v72 = 6;
          goto LABEL_592;
        }
      }
      v72 = 6;
      goto LABEL_591;
    case 7:
      v85 = *(unsigned __int8 *)(a2 + v281);
      if (v85 >= 2)
      {
        if (v281 <= 3)
          v86 = v281;
        else
          v86 = 4;
        __asm { BR              X12 }
      }
      v63 = a1;
      v68 = v40;
      v69 = v277;
      v139 = v45;
      v140 = v85 == 1;
      v141 = v285;
      if (v85 == 1)
        v141 = v284;
      (*(void (**)(uint64_t))(v141 + 32))(a1);
      *(_BYTE *)(a1 + v281) = v140;
      v142 = *(unsigned __int8 *)(((v267 + a2) & v54) + v281);
      if (v142 >= 2)
      {
        if (v281 <= 3)
          v143 = v281;
        else
          v143 = 4;
        __asm { BR              X12 }
      }
      v193 = v142 == 1;
      v194 = v285;
      if (v142 == 1)
        v194 = v284;
      (*(void (**)(uint64_t))(v194 + 32))((v267 + a1) & v54);
      *(_BYTE *)(((v267 + a1) & v54) + v281) = v193;
      if (v278 > 3)
        goto LABEL_359;
      v195 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      v196 = 2;
      if (v195 > 0xFFF0)
        v196 = 4;
      if (v195 <= 0xF0)
LABEL_359:
        v196 = 1;
      v70 = v139;
      v71 = v287 + v196;
      if (v71 <= v289)
        v71 = v289;
      if (v280 <= 3)
      {
        v197 = ((1 << v268) + 3) >> v268;
        v74 = 2;
        if (v197 > 0xFFF0)
          v74 = 4;
        if (v197 > 0xF0)
        {
          v72 = 7;
          goto LABEL_592;
        }
      }
      v72 = 7;
      goto LABEL_591;
    case 8:
      v87 = *(unsigned __int8 *)(a2 + v281);
      if (v87 >= 2)
      {
        if (v281 <= 3)
          v88 = v281;
        else
          v88 = 4;
        __asm { BR              X12 }
      }
      v104 = v269 + 16;
      v144 = v45;
      v145 = v87 == 1;
      v146 = v285;
      if (v87 == 1)
        v146 = v284;
      (*(void (**)(uint64_t))(v146 + 32))(a1);
      *(_BYTE *)(a1 + v281) = v145;
      v147 = (char *)((v265 + a2) & v55);
      v148 = v278;
      if (v278 > 3)
        goto LABEL_256;
      v149 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v149 > 0xFFF0)
      {
        v150 = *(_DWORD *)&v147[v278];
      }
      else if (v149 > 0xF0)
      {
        v150 = *(unsigned __int16 *)&v147[v278];
      }
      else
      {
LABEL_256:
        v150 = v147[v278];
      }
      v151 = (char *)((v265 + a1) & v55);
      v152 = v280;
      if (v150 >= 0xF)
      {
        if (v278 <= 3)
          v153 = v278;
        else
          v153 = 4;
        __asm { BR              X12 }
      }
      v68 = v40;
      break;
    case 9:
      v89 = *(unsigned __int8 *)(a2 + v281);
      if (v89 >= 2)
      {
        if (v281 <= 3)
          v90 = v281;
        else
          v90 = 4;
        __asm { BR              X12 }
      }
      v63 = a1;
      v69 = v277;
      v271 = *(_QWORD *)(v30 + 64) + 7;
      v273 = v29;
      v283 = v45;
      v154 = v89 == 1;
      v155 = v285;
      if (v89 == 1)
        v155 = v284;
      (*(void (**)(uint64_t))(v155 + 32))(v63);
      v156 = v280;
      *(_BYTE *)(v63 + v281) = v154;
      v157 = (_OWORD *)((v288 + a2 + v32) & v57);
      v158 = v278;
      if (v280 > 3)
        goto LABEL_270;
      v159 = ((1 << v268) + 3) >> v268;
      if (v159 > 0xFFF0)
      {
        v160 = *(_DWORD *)((char *)v157 + v280);
      }
      else if (v159 > 0xF0)
      {
        v160 = *(unsigned __int16 *)((char *)v157 + v280);
      }
      else
      {
LABEL_270:
        v160 = *((unsigned __int8 *)v157 + v280);
      }
      v161 = (_OWORD *)((v288 + v63 + v32) & v57);
      v70 = v283;
      if (v160 >= 0xF)
      {
        if (v280 <= 3)
          v162 = v280;
        else
          v162 = 4;
        __asm { BR              X12 }
      }
      switch(v160)
      {
        case 0u:
          v200 = *v157;
          *(_QWORD *)(((v288 + v63 + v32) & v57) + 0x10) = *(_QWORD *)(((v288 + a2 + v32) & v57) + 0x10);
          *v161 = v200;
          v68 = v40;
          if (v280 > 3)
            goto LABEL_377;
          v201 = ((1 << v268) + 3) >> v268;
          if (v201 > 0xFFF0)
          {
            *(_DWORD *)((char *)v161 + v280) = 0;
          }
          else if (v201 > 0xF0)
          {
            *(_WORD *)((char *)v161 + v280) = 0;
          }
          else
          {
LABEL_377:
            *((_BYTE *)v161 + v280) = 0;
          }
          break;
        case 1u:
          *(_QWORD *)v161 = *(_QWORD *)v157;
          v68 = v40;
          if (v280 > 3)
            goto LABEL_445;
          v219 = 1;
          v220 = ((1 << v268) + 3) >> v268;
          if (v220 > 0xFFF0)
          {
            *(_DWORD *)((char *)v161 + v280) = 1;
          }
          else
          {
            if (v220 > 0xF0)
              goto LABEL_565;
LABEL_445:
            *((_BYTE *)v161 + v280) = 1;
          }
          break;
        case 2u:
          *v161 = *v157;
          v68 = v40;
          if (v280 > 3)
            goto LABEL_449;
          v221 = ((1 << v268) + 3) >> v268;
          if (v221 > 0xFFF0)
          {
            *(_DWORD *)((char *)v161 + v280) = 2;
          }
          else
          {
            if (v221 > 0xF0)
            {
              v219 = 2;
              goto LABEL_565;
            }
LABEL_449:
            *((_BYTE *)v161 + v280) = 2;
          }
          break;
        case 3u:
          *(_BYTE *)v161 = *(_BYTE *)v157;
          v68 = v40;
          if (v280 > 3)
            goto LABEL_453;
          v222 = ((1 << v268) + 3) >> v268;
          if (v222 > 0xFFF0)
          {
            *(_DWORD *)((char *)v161 + v280) = 3;
          }
          else
          {
            if (v222 > 0xF0)
            {
              v219 = 3;
              goto LABEL_565;
            }
LABEL_453:
            *((_BYTE *)v161 + v280) = 3;
          }
          break;
        case 4u:
          *(_BYTE *)v161 = *(_BYTE *)v157;
          v68 = v40;
          if (v280 > 3)
            goto LABEL_457;
          v223 = ((1 << v268) + 3) >> v268;
          if (v223 > 0xFFF0)
          {
            *(_DWORD *)((char *)v161 + v280) = 4;
          }
          else
          {
            if (v223 > 0xF0)
            {
              v219 = 4;
              goto LABEL_565;
            }
LABEL_457:
            *((_BYTE *)v161 + v280) = 4;
          }
          break;
        case 5u:
          *(_BYTE *)v161 = *(_BYTE *)v157;
          v68 = v40;
          if (v280 > 3)
            goto LABEL_461;
          v224 = ((1 << v268) + 3) >> v268;
          if (v224 > 0xFFF0)
          {
            *(_DWORD *)((char *)v161 + v280) = 5;
          }
          else
          {
            if (v224 > 0xF0)
            {
              v219 = 5;
              goto LABEL_565;
            }
LABEL_461:
            *((_BYTE *)v161 + v280) = 5;
          }
          break;
        case 6u:
          *(_BYTE *)v161 = *(_BYTE *)v157;
          v68 = v40;
          if (v280 > 3)
            goto LABEL_465;
          v225 = ((1 << v268) + 3) >> v268;
          if (v225 > 0xFFF0)
          {
            *(_DWORD *)((char *)v161 + v280) = 6;
          }
          else
          {
            if (v225 > 0xF0)
            {
              v219 = 6;
              goto LABEL_565;
            }
LABEL_465:
            *((_BYTE *)v161 + v280) = 6;
          }
          break;
        case 7u:
          (*(void (**)(unint64_t, _OWORD *, uint64_t))(v255 + 32))((v288 + v63 + v32) & v57, v157, v256);
          v226 = (_QWORD *)(((unint64_t)v161 + v254) & 0xFFFFFFFFFFFFFFF8);
          v227 = (_QWORD *)(((unint64_t)v157 + v254) & 0xFFFFFFFFFFFFFFF8);
          *v226 = *v227;
          v228 = ((unint64_t)v226 + v34) & v58;
          v229 = ((unint64_t)v227 + v34) & v58;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v30 + 32))(v228, v229, v273);
          v158 = v278;
          v156 = v280;
          v70 = v283;
          v69 = v277;
          v230 = (_QWORD *)((v271 + v228) & 0xFFFFFFFFFFFFF8);
          v231 = (_QWORD *)((v271 + v229) & 0xFFFFFFFFFFFFF8);
          *v230 = *v231;
          *(_OWORD *)(((unint64_t)v230 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v231 + 15) & 0xFFFFFFFFFFFFF8);
          *((_BYTE *)v161 + v59) = *((_BYTE *)v157 + v59);
          *(_BYTE *)(((unint64_t)v161 + v59) | 1) = *(_BYTE *)(((unint64_t)v157 + v59) | 1);
          v68 = v40;
          if (v280 > 3)
            goto LABEL_469;
          v232 = ((1 << v268) + 3) >> v268;
          if (v232 > 0xFFF0)
          {
            *(_DWORD *)((char *)v161 + v280) = 7;
          }
          else
          {
            if (v232 > 0xF0)
            {
              v219 = 7;
              goto LABEL_565;
            }
LABEL_469:
            *((_BYTE *)v161 + v280) = 7;
          }
          break;
        case 8u:
          *(_QWORD *)v161 = *(_QWORD *)v157;
          v68 = v40;
          if (v280 > 3)
            goto LABEL_473;
          v233 = ((1 << v268) + 3) >> v268;
          if (v233 > 0xFFF0)
          {
            *(_DWORD *)((char *)v161 + v280) = 8;
          }
          else
          {
            if (v233 > 0xF0)
            {
              v219 = 8;
              goto LABEL_565;
            }
LABEL_473:
            *((_BYTE *)v161 + v280) = 8;
          }
          break;
        case 9u:
          *(_BYTE *)v161 = *(_BYTE *)v157;
          v68 = v40;
          if (v280 > 3)
            goto LABEL_477;
          v234 = ((1 << v268) + 3) >> v268;
          if (v234 > 0xFFF0)
          {
            *(_DWORD *)((char *)v161 + v280) = 9;
          }
          else
          {
            if (v234 > 0xF0)
            {
              v219 = 9;
              goto LABEL_565;
            }
LABEL_477:
            *((_BYTE *)v161 + v280) = 9;
          }
          break;
        case 0xAu:
          *(_WORD *)v161 = *(_WORD *)v157;
          v68 = v40;
          if (v280 > 3)
            goto LABEL_481;
          v235 = ((1 << v268) + 3) >> v268;
          if (v235 > 0xFFF0)
          {
            *(_DWORD *)((char *)v161 + v280) = 10;
          }
          else
          {
            if (v235 > 0xF0)
            {
              v219 = 10;
              goto LABEL_565;
            }
LABEL_481:
            *((_BYTE *)v161 + v280) = 10;
          }
          break;
        case 0xBu:
          v236 = *v157;
          *(_BYTE *)(((v288 + v63 + v32) & v57) + 0x10) = *(_BYTE *)(((v288 + a2 + v32) & v57) + 0x10);
          *v161 = v236;
          v68 = v40;
          if (v280 > 3)
            goto LABEL_485;
          v237 = ((1 << v268) + 3) >> v268;
          if (v237 > 0xFFF0)
          {
            *(_DWORD *)((char *)v161 + v280) = 11;
          }
          else
          {
            if (v237 > 0xF0)
            {
              v219 = 11;
              goto LABEL_565;
            }
LABEL_485:
            *((_BYTE *)v161 + v280) = 11;
          }
          break;
        case 0xCu:
          v238 = *v157;
          *(_QWORD *)(((v288 + v63 + v32) & v57) + 0x10) = *(_QWORD *)(((v288 + a2 + v32) & v57) + 0x10);
          *v161 = v238;
          v68 = v40;
          if (v280 > 3)
            goto LABEL_489;
          v239 = ((1 << v268) + 3) >> v268;
          if (v239 > 0xFFF0)
          {
            *(_DWORD *)((char *)v161 + v280) = 12;
          }
          else
          {
            if (v239 > 0xF0)
            {
              v219 = 12;
              goto LABEL_565;
            }
LABEL_489:
            *((_BYTE *)v161 + v280) = 12;
          }
          break;
        case 0xDu:
          v240 = *v157;
          v241 = *(_OWORD *)(((v288 + a2 + v32) & v57) + 0x10);
          v242 = *(_OWORD *)(((v288 + a2 + v32) & v57) + 0x20);
          *(_OWORD *)(((v288 + v63 + v32) & v57) + 0x29) = *(_OWORD *)(((v288 + a2 + v32) & v57) + 0x29);
          *(_OWORD *)(((v288 + v63 + v32) & v57) + 0x10) = v241;
          *(_OWORD *)(((v288 + v63 + v32) & v57) + 0x20) = v242;
          *v161 = v240;
          v68 = v40;
          if (v280 > 3)
            goto LABEL_493;
          v243 = ((1 << v268) + 3) >> v268;
          if (v243 > 0xFFF0)
          {
            *(_DWORD *)((char *)v161 + v280) = 13;
          }
          else
          {
            if (v243 > 0xF0)
            {
              v219 = 13;
              goto LABEL_565;
            }
LABEL_493:
            *((_BYTE *)v161 + v280) = 13;
          }
          break;
        case 0xEu:
          *(_BYTE *)v161 = *(_BYTE *)v157;
          v68 = v40;
          if (v280 > 3)
            goto LABEL_497;
          v244 = ((1 << v268) + 3) >> v268;
          if (v244 > 0xFFF0)
          {
            *(_DWORD *)((char *)v161 + v280) = 14;
          }
          else if (v244 > 0xF0)
          {
            v219 = 14;
LABEL_565:
            *(_WORD *)((char *)v161 + v156) = v219;
          }
          else
          {
LABEL_497:
            *((_BYTE *)v161 + v280) = 14;
          }
          break;
        default:
          if (v280 > 3)
            goto LABEL_440;
          v217 = ((1 << v268) + 3) >> v268;
          v218 = 2;
          if (v217 > 0xFFF0)
            v218 = 4;
          if (v217 <= 0xF0)
LABEL_440:
            v218 = 1;
          memcpy((void *)((v288 + v63 + v32) & v57), v157, v218 + v280);
          v158 = v278;
          LODWORD(v156) = v280;
          v68 = v40;
          v70 = v283;
          break;
      }
      if (v158 > 3)
        goto LABEL_570;
      v247 = ((1 << (8 * v158)) + 3) >> (8 * v158);
      v248 = 2;
      if (v247 > 0xFFF0)
        v248 = 4;
      if (v247 <= 0xF0)
LABEL_570:
        v248 = 1;
      v71 = v287 + v248;
      if (v71 <= v289)
        v71 = v289;
      if (v156 <= 3)
      {
        v249 = ((1 << v268) + 3) >> v268;
        v74 = 2;
        if (v249 > 0xFFF0)
          v74 = 4;
        if (v249 > 0xF0)
        {
          v72 = 9;
          goto LABEL_592;
        }
      }
      v72 = 9;
      goto LABEL_591;
    case 0xA:
      v91 = *(unsigned __int8 *)(a2 + v281);
      if (v91 >= 2)
      {
        if (v281 <= 3)
          v92 = v281;
        else
          v92 = 4;
        __asm { BR              X12 }
      }
      v105 = v45;
      v63 = a1;
      v68 = v40;
      v69 = v277;
      v163 = v91 == 1;
      v164 = v285;
      if (v91 == 1)
        v164 = v284;
      (*(void (**)(uint64_t))(v164 + 32))(a1);
      *(_BYTE *)(a1 + v281) = v163;
      v165 = (a2 + v288 + 7) & 0xFFFFFFFFFFFFFFF8;
      v166 = *(_BYTE *)(v165 + 8);
      v167 = (a1 + v288 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v167 = *(_QWORD *)v165;
      *(_BYTE *)(v167 + 8) = v166;
      if (v278 > 3)
        goto LABEL_284;
      v168 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      v169 = 2;
      if (v168 > 0xFFF0)
        v169 = 4;
      if (v168 <= 0xF0)
LABEL_284:
        v169 = 1;
      v70 = v105;
      v71 = v287 + v169;
      if (v71 <= v289)
        v71 = v289;
      if (v280 <= 3)
      {
        v170 = ((1 << v268) + 3) >> v268;
        v74 = 2;
        if (v170 > 0xFFF0)
          v74 = 4;
        if (v170 > 0xF0)
        {
          v72 = 10;
          goto LABEL_592;
        }
      }
      v72 = 10;
      goto LABEL_591;
    case 0xB:
      v93 = *(unsigned __int8 *)(a2 + v281);
      if (v93 >= 2)
      {
        if (v281 <= 3)
          v94 = v281;
        else
          v94 = 4;
        __asm { BR              X12 }
      }
      v106 = v45;
      v63 = a1;
      v68 = v40;
      v69 = v277;
      v171 = v93 == 1;
      v172 = v285;
      if (v93 == 1)
        v172 = v284;
      (*(void (**)(uint64_t))(v172 + 32))(a1);
      *(_BYTE *)(a1 + v281) = v171;
      *(_OWORD *)((a1 + v288 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((a2 + v288 + 7) & 0xFFFFFFFFFFFFF8);
      if (v278 > 3)
        goto LABEL_299;
      v173 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      v174 = 2;
      if (v173 > 0xFFF0)
        v174 = 4;
      if (v173 <= 0xF0)
LABEL_299:
        v174 = 1;
      v70 = v106;
      v71 = v287 + v174;
      if (v71 <= v289)
        v71 = v289;
      if (v280 <= 3)
      {
        v175 = ((1 << v268) + 3) >> v268;
        v74 = 2;
        if (v175 > 0xFFF0)
          v74 = 4;
        if (v175 > 0xF0)
        {
          v72 = 11;
          goto LABEL_592;
        }
      }
      v72 = 11;
      goto LABEL_591;
    case 0xC:
      v95 = *(unsigned __int8 *)(a2 + v281);
      if (v95 >= 2)
      {
        if (v281 <= 3)
          v96 = v281;
        else
          v96 = 4;
        __asm { BR              X12 }
      }
      v107 = v45;
      v63 = a1;
      v68 = v40;
      v69 = v277;
      v176 = v95 == 1;
      v177 = v285;
      if (v95 == 1)
        v177 = v284;
      (*(void (**)(uint64_t))(v177 + 32))(a1);
      *(_BYTE *)(a1 + v281) = v176;
      *(_BYTE *)(v288 + a1) = *(_BYTE *)(v288 + a2);
      if (v278 > 3)
        goto LABEL_314;
      v178 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      v179 = 2;
      if (v178 > 0xFFF0)
        v179 = 4;
      if (v178 <= 0xF0)
LABEL_314:
        v179 = 1;
      v70 = v107;
      v71 = v287 + v179;
      if (v71 <= v289)
        v71 = v289;
      if (v280 <= 3)
      {
        v180 = ((1 << v268) + 3) >> v268;
        v74 = 2;
        if (v180 > 0xFFF0)
          v74 = 4;
        if (v180 > 0xF0)
        {
          v72 = 12;
          goto LABEL_592;
        }
      }
      v72 = 12;
      goto LABEL_591;
    case 0xD:
      v97 = *(unsigned __int8 *)(a2 + v281);
      if (v97 >= 2)
      {
        if (v281 <= 3)
          v98 = v281;
        else
          v98 = 4;
        __asm { BR              X12 }
      }
      v108 = v45;
      v63 = a1;
      v68 = v40;
      v69 = v277;
      v181 = v97 == 1;
      v182 = v285;
      if (v97 == 1)
        v182 = v284;
      (*(void (**)(uint64_t))(v182 + 32))(a1);
      *(_BYTE *)(a1 + v281) = v181;
      v183 = (_QWORD *)((a1 + v288 + 7) & 0xFFFFFFFFFFFFF8);
      v184 = (_QWORD *)((a2 + v288 + 7) & 0xFFFFFFFFFFFFF8);
      *v183 = *v184;
      *(_QWORD *)(((unint64_t)v183 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v184 + 15) & 0xFFFFFFFFFFFFF8);
      if (v278 > 3)
        goto LABEL_329;
      v185 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      v186 = 2;
      if (v185 > 0xFFF0)
        v186 = 4;
      if (v185 <= 0xF0)
LABEL_329:
        v186 = 1;
      v70 = v108;
      v71 = v287 + v186;
      if (v71 <= v289)
        v71 = v289;
      if (v280 <= 3)
      {
        v187 = ((1 << v268) + 3) >> v268;
        v74 = 2;
        if (v187 > 0xFFF0)
          v74 = 4;
        if (v187 > 0xF0)
        {
          v72 = 13;
          goto LABEL_592;
        }
      }
      v72 = 13;
      goto LABEL_591;
    default:
      if (v56 > 3)
        goto LABEL_51;
      v46 = ((1 << (8 * v56)) + 3) >> (8 * v56);
      v47 = 2;
      if (v46 > 0xFFF0)
        v47 = 4;
      if (v46 <= 0xF0)
LABEL_51:
        v47 = 1;
      v48 = v287 + v47;
      if (v48 <= v289)
        v48 = v289;
      if (v36 > 3)
        goto LABEL_58;
      v49 = ((1 << (8 * v36)) + 3) >> (8 * v36);
      v50 = 2;
      if (v49 > 0xFFF0)
        v50 = 4;
      if (v49 <= 0xF0)
LABEL_58:
        v50 = 1;
      v51 = v43 + v50;
      if (v51 > v48)
        v48 = v51;
      if (v38 > v48)
        v48 = v38;
      if (v39 > v48)
        v48 = v39;
      if (v45 > v48)
        v48 = v45;
      if (v40 > v48)
        LODWORD(v48) = v40;
      if (v48 <= 3)
        v52 = v48;
      else
        v52 = 4;
      __asm { BR              X15 }
      return result;
  }
  switch(v150)
  {
    case 0u:
      v198 = *(_OWORD *)v147;
      *((_QWORD *)v151 + 2) = *((_QWORD *)v147 + 2);
      *(_OWORD *)v151 = v198;
      v63 = a1;
      v70 = v144;
      v69 = v277;
      if (v278 > 3)
        goto LABEL_372;
      v199 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v199 > 0xFFF0)
      {
        *(_DWORD *)&v151[v278] = 0;
      }
      else
      {
        if (v199 <= 0xF0)
        {
LABEL_372:
          v151[v278] = 0;
          goto LABEL_503;
        }
        *(_WORD *)&v151[v278] = 0;
      }
      goto LABEL_581;
    case 1u:
      *(_QWORD *)v151 = *(_QWORD *)v147;
      v63 = a1;
      v70 = v144;
      v69 = v277;
      if (v278 > 3)
        goto LABEL_387;
      v204 = 1;
      v199 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v199 > 0xFFF0)
      {
        *(_DWORD *)&v151[v278] = 1;
        goto LABEL_581;
      }
      if (v199 > 0xF0)
        goto LABEL_580;
LABEL_387:
      v205 = 1;
      goto LABEL_502;
    case 2u:
      *(_OWORD *)v151 = *(_OWORD *)v147;
      v63 = a1;
      v70 = v144;
      v69 = v277;
      if (v278 > 3)
        goto LABEL_391;
      v199 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v199 > 0xFFF0)
      {
        *(_DWORD *)&v151[v278] = 2;
        goto LABEL_581;
      }
      if (v199 <= 0xF0)
      {
LABEL_391:
        v205 = 2;
        goto LABEL_502;
      }
      v204 = 2;
      goto LABEL_580;
    case 3u:
      *v151 = *v147;
      v63 = a1;
      v70 = v144;
      v69 = v277;
      if (v278 > 3)
        goto LABEL_395;
      v199 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v199 > 0xFFF0)
      {
        *(_DWORD *)&v151[v278] = 3;
        goto LABEL_581;
      }
      if (v199 <= 0xF0)
      {
LABEL_395:
        v205 = 3;
        goto LABEL_502;
      }
      v204 = 3;
      goto LABEL_580;
    case 4u:
      *v151 = *v147;
      v63 = a1;
      v70 = v144;
      v69 = v277;
      if (v278 > 3)
        goto LABEL_399;
      v199 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v199 > 0xFFF0)
      {
        *(_DWORD *)&v151[v278] = 4;
        goto LABEL_581;
      }
      if (v199 <= 0xF0)
      {
LABEL_399:
        v205 = 4;
        goto LABEL_502;
      }
      v204 = 4;
      goto LABEL_580;
    case 5u:
      *v151 = *v147;
      v63 = a1;
      v70 = v144;
      v69 = v277;
      if (v278 > 3)
        goto LABEL_403;
      v199 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v199 > 0xFFF0)
      {
        *(_DWORD *)&v151[v278] = 5;
        goto LABEL_581;
      }
      if (v199 <= 0xF0)
      {
LABEL_403:
        v205 = 5;
        goto LABEL_502;
      }
      v204 = 5;
      goto LABEL_580;
    case 6u:
      *v151 = *v147;
      v63 = a1;
      v70 = v144;
      v69 = v277;
      if (v278 > 3)
        goto LABEL_407;
      v199 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v199 > 0xFFF0)
      {
        *(_DWORD *)&v151[v278] = 6;
        goto LABEL_581;
      }
      if (v199 <= 0xF0)
      {
LABEL_407:
        v205 = 6;
        goto LABEL_502;
      }
      v204 = 6;
      goto LABEL_580;
    case 7u:
      (*(void (**)(char *, char *, uint64_t))(v260 + 32))(v151, v147, v262);
      v206 = (_QWORD *)((unint64_t)&v151[v257] & 0xFFFFFFFFFFFFFFF8);
      v207 = (_QWORD *)((unint64_t)&v147[v257] & 0xFFFFFFFFFFFFFFF8);
      *v206 = *v207;
      v208 = ((unint64_t)v206 + v258) & v56;
      v209 = ((unint64_t)v207 + v258) & v56;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v261 + 32))(v208, v209, v263);
      v148 = v278;
      v152 = v280;
      v210 = (_QWORD *)((v259 + v208) & 0xFFFFFFFFFFFFF8);
      v211 = (_QWORD *)((v259 + v209) & 0xFFFFFFFFFFFFF8);
      *v210 = *v211;
      *(_OWORD *)(((unint64_t)v210 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v211 + 15) & 0xFFFFFFFFFFFFF8);
      v151[v104] = v147[v104];
      *(_BYTE *)((unint64_t)&v151[v104] | 1) = *(_BYTE *)((unint64_t)&v147[v104] | 1);
      v63 = a1;
      v70 = v144;
      v69 = v277;
      if (v278 > 3)
        goto LABEL_411;
      v199 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v199 > 0xFFF0)
      {
        *(_DWORD *)&v151[v278] = 7;
        goto LABEL_581;
      }
      if (v199 <= 0xF0)
      {
LABEL_411:
        v205 = 7;
        goto LABEL_502;
      }
      v204 = 7;
      goto LABEL_580;
    case 8u:
      *(_QWORD *)v151 = *(_QWORD *)v147;
      v63 = a1;
      v70 = v144;
      v69 = v277;
      if (v278 > 3)
        goto LABEL_501;
      v199 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v199 > 0xFFF0)
      {
        *(_DWORD *)&v151[v278] = 8;
        goto LABEL_581;
      }
      if (v199 <= 0xF0)
      {
LABEL_501:
        v205 = 8;
        goto LABEL_502;
      }
      v204 = 8;
      goto LABEL_580;
    case 9u:
      *v151 = *v147;
      v63 = a1;
      v70 = v144;
      v69 = v277;
      if (v278 > 3)
        goto LABEL_415;
      v199 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v199 > 0xFFF0)
      {
        *(_DWORD *)&v151[v278] = 9;
        goto LABEL_581;
      }
      if (v199 <= 0xF0)
      {
LABEL_415:
        v205 = 9;
        goto LABEL_502;
      }
      v204 = 9;
      goto LABEL_580;
    case 0xAu:
      *(_WORD *)v151 = *(_WORD *)v147;
      v63 = a1;
      v70 = v144;
      v69 = v277;
      if (v278 > 3)
        goto LABEL_419;
      v199 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v199 > 0xFFF0)
      {
        *(_DWORD *)&v151[v278] = 10;
        goto LABEL_581;
      }
      if (v199 <= 0xF0)
      {
LABEL_419:
        v205 = 10;
        goto LABEL_502;
      }
      v204 = 10;
      goto LABEL_580;
    case 0xBu:
      v212 = *(_OWORD *)v147;
      v151[16] = v147[16];
      *(_OWORD *)v151 = v212;
      v63 = a1;
      v70 = v144;
      v69 = v277;
      if (v278 > 3)
        goto LABEL_423;
      v199 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v199 > 0xFFF0)
      {
        *(_DWORD *)&v151[v278] = 11;
        goto LABEL_581;
      }
      if (v199 <= 0xF0)
      {
LABEL_423:
        v205 = 11;
        goto LABEL_502;
      }
      v204 = 11;
      goto LABEL_580;
    case 0xCu:
      v213 = *(_OWORD *)v147;
      *((_QWORD *)v151 + 2) = *((_QWORD *)v147 + 2);
      *(_OWORD *)v151 = v213;
      v63 = a1;
      v70 = v144;
      v69 = v277;
      if (v278 > 3)
        goto LABEL_427;
      v199 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v199 > 0xFFF0)
      {
        *(_DWORD *)&v151[v278] = 12;
        goto LABEL_581;
      }
      if (v199 <= 0xF0)
      {
LABEL_427:
        v205 = 12;
        goto LABEL_502;
      }
      v204 = 12;
      goto LABEL_580;
    case 0xDu:
      v214 = *(_OWORD *)v147;
      v215 = *((_OWORD *)v147 + 1);
      v216 = *((_OWORD *)v147 + 2);
      *(_OWORD *)(v151 + 41) = *(_OWORD *)(v147 + 41);
      *((_OWORD *)v151 + 1) = v215;
      *((_OWORD *)v151 + 2) = v216;
      *(_OWORD *)v151 = v214;
      v63 = a1;
      v70 = v144;
      v69 = v277;
      if (v278 > 3)
        goto LABEL_431;
      v199 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v199 > 0xFFF0)
      {
        *(_DWORD *)&v151[v278] = 13;
        goto LABEL_581;
      }
      if (v199 <= 0xF0)
      {
LABEL_431:
        v205 = 13;
        goto LABEL_502;
      }
      v204 = 13;
      goto LABEL_580;
    case 0xEu:
      *v151 = *v147;
      v63 = a1;
      v70 = v144;
      v69 = v277;
      if (v278 > 3)
        goto LABEL_435;
      v199 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      if (v199 > 0xFFF0)
      {
        *(_DWORD *)&v151[v278] = 14;
LABEL_581:
        v250 = v199 > 0xFFF0;
        v246 = 2;
        if (v250)
          v246 = 4;
        goto LABEL_583;
      }
      if (v199 > 0xF0)
      {
        v204 = 14;
LABEL_580:
        *(_WORD *)&v151[v148] = v204;
        goto LABEL_581;
      }
LABEL_435:
      v205 = 14;
LABEL_502:
      v151[v148] = v205;
LABEL_503:
      if (v148 > 3)
        goto LABEL_507;
      v245 = ((1 << (8 * v148)) + 3) >> (8 * v148);
      v246 = 2;
      if (v245 > 0xFFF0)
        v246 = 4;
      if (v245 <= 0xF0)
LABEL_507:
        v246 = 1;
LABEL_583:
      v71 = v287 + v246;
      if (v71 <= v289)
        v71 = v289;
      if (v152 <= 3)
      {
        v251 = ((1 << v268) + 3) >> v268;
        v74 = 2;
        if (v251 > 0xFFF0)
          v74 = 4;
        if (v251 > 0xF0)
        {
          v72 = 8;
          goto LABEL_592;
        }
      }
      v72 = 8;
LABEL_591:
      v74 = 1;
LABEL_592:
      v252 = v275 + v74;
      if (v252 > v71)
        v71 = v252;
      if (v276 > v71)
        v71 = v276;
      if (v69 > v71)
        v71 = v69;
      if (v70 > v71)
        v71 = v70;
      if (v68 > v71)
        v71 = v68;
      *(_BYTE *)(v63 + v71) = v72;
      return v63;
    default:
      if (v278 > 3)
        goto LABEL_382;
      v202 = ((1 << (8 * v278)) + 3) >> (8 * v278);
      v203 = 2;
      if (v202 > 0xFFF0)
        v203 = 4;
      if (v202 <= 0xF0)
LABEL_382:
        v203 = 1;
      v63 = a1;
      memcpy(v151, v147, v203 + v278);
      LODWORD(v148) = v278;
      v152 = v280;
      v70 = v144;
      v69 = v277;
      goto LABEL_503;
  }
}

uint64_t sub_23AB4A4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  BOOL v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int v150;
  unint64_t v151;
  BOOL v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v156;
  unint64_t v157;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  unsigned int v163;
  unint64_t v164;
  BOOL v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int v169;
  unint64_t v170;
  BOOL v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int v175;
  BOOL v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  BOOL v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  unint64_t v184;
  BOOL v185;
  uint64_t v186;
  uint64_t v187;
  _OWORD *v188;
  uint64_t v189;
  unsigned int v190;
  unint64_t v191;
  unsigned int v192;
  _OWORD *v193;
  uint64_t v194;
  char v195;
  unint64_t v196;
  unint64_t v197;
  BOOL v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  unsigned int v204;
  BOOL v205;
  unint64_t v206;
  unsigned int v207;
  _OWORD *v208;
  unsigned int v209;
  uint64_t v210;
  unint64_t v211;
  BOOL v212;
  uint64_t v213;
  unint64_t v214;
  char v215;
  unint64_t v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int v219;
  unint64_t v220;
  BOOL v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int v225;
  unint64_t v226;
  BOOL v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  unsigned int v231;
  unint64_t v232;
  BOOL v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  unsigned int v237;
  uint64_t v238;
  unsigned int v239;
  unint64_t v240;
  uint64_t result;
  BOOL v242;
  uint64_t v243;
  unsigned int v244;
  uint64_t v245;
  unsigned int v246;
  BOOL v247;
  uint64_t v248;
  unsigned int v249;
  uint64_t v250;
  unsigned int v251;
  __int128 v252;
  unsigned int v253;
  __int128 v254;
  unsigned int v255;
  unsigned int v256;
  uint64_t v257;
  __int16 v258;
  char v259;
  _QWORD *v260;
  _QWORD *v261;
  unint64_t v262;
  unint64_t v263;
  _QWORD *v264;
  _QWORD *v265;
  unint64_t v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  unsigned int v272;
  uint64_t v273;
  __int16 v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  _QWORD *v281;
  _QWORD *v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  _QWORD *v286;
  unint64_t v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  __int128 v292;
  unsigned int v293;
  __int128 v294;
  unsigned int v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  uint64_t v302;
  unsigned int v303;
  unsigned int v304;
  uint64_t v305;
  unsigned int v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  char v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t AssociatedTypeWitness;
  uint64_t v348;
  uint64_t v349;
  char v350;
  unint64_t v351;
  unint64_t v352;

  v2 = a1;
  if (a1 == a2)
    return v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v346 = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(v346 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  v344 = *(_QWORD *)(v346 - 8);
  v9 = *(_DWORD *)(v5 + 80);
  v10 = v9;
  v327 = v4 + v9;
  v334 = v9;
  v324 = v6;
  v11 = v6 + (v327 & ~(unint64_t)v9);
  v338 = v7 + 2;
  if (v11 + 1 > v7 + 2)
    v12 = v11 + 1;
  else
    v12 = v7 + 2;
  if (v8 > v12)
    v12 = v7 + 1;
  v340 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) + 16 > v12)
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
  v345 = v3;
  v14 = *(unsigned __int8 *)(v3 + 80) | v10;
  v329 = v8 + v14;
  v332 = v14;
  if (((v8 + v14) & ~v14) + v8 > v12)
    v12 = ((v8 + v14) & ~v14) + v8;
  v352 = v12;
  v322 = swift_getAssociatedTypeWitness();
  v15 = v2;
  v16 = *(_QWORD *)(v322 - 8);
  v17 = *(_DWORD *)(v16 + 80) & 0xF8;
  v323 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v323 - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = v17 | v19 | 7;
  v343 = v8;
  v328 = v8 + v20;
  v21 = (v8 + v20) & ~v20;
  v320 = v16;
  v321 = v18;
  v317 = *(_QWORD *)(v16 + 64) + 7;
  v318 = v19 + 8;
  v319 = *(_QWORD *)(v18 + 64) + 7;
  v330 = (((v319 + ((v19 + 8 + (v317 & 0xFFFFFFFFFFFFFFF8)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v330 + 18 <= 0x39)
    v22 = 57;
  else
    v22 = v330 + 18;
  v350 = 8 * v22;
  v339 = v15;
  if (v22 > 3)
    goto LABEL_21;
  v23 = ((1 << v350) + 3) >> v350;
  v24 = 2;
  if (v23 > 0xFFF0)
    v24 = 4;
  if (v23 <= 0xF0)
LABEL_21:
    v24 = 1;
  v351 = v22 + v21;
  v25 = v22 + v21 + v24;
  if (v25 <= v352)
    v26 = v352;
  else
    v26 = v25;
  v315 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v315 - 8);
  v28 = *(_DWORD *)(v27 + 80) & 0xF8;
  v316 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v316 - 8);
  v30 = *(unsigned __int8 *)(v29 + 80);
  v31 = v28 | v30 | 7;
  v32 = (v343 + v31) & ~v31;
  v313 = v27;
  v314 = v29;
  v310 = *(_QWORD *)(v27 + 64) + 7;
  v311 = v30 + 8;
  v312 = *(_QWORD *)(v29 + 64) + 7;
  v33 = (((v312 + ((v30 + 8 + (v310 & 0xFFFFFFFFFFFFFFF8)) & ~v30)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v33 + 18 <= 0x39)
    v34 = 57;
  else
    v34 = v33 + 18;
  v342 = 8 * v34;
  if (v34 <= 3)
    v35 = (((1 << (8 * v34)) + 3) >> (8 * v34)) + 15;
  else
    v35 = 16;
  v36 = v13 + 17;
  v37 = v13 + 24;
  v38 = ((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v39 = 4;
  if (v35 < 0x10000)
    v39 = 2;
  if (v35 < 0x100)
    v40 = 1;
  else
    v40 = v39;
  v348 = v34;
  v349 = v22;
  v41 = v34 + v32;
  v42 = v34 + v32 + v40;
  if (v42 <= v26)
    v42 = v26;
  if (v36 > v42)
    v42 = v13 + 17;
  if (v37 > v42)
    v42 = v13 + 24;
  v43 = v338;
  v2 = v339;
  if (v338 > v42)
    v42 = v338;
  if (v38 > v42)
    v42 = v38;
  v325 = ~v334;
  v51 = ~v332;
  v335 = ~v20;
  v309 = ~v19;
  v308 = v330 + 16;
  v331 = ~v30;
  v333 = ~v31;
  v307 = v33 + 16;
  v52 = v41;
  v53 = v340;
  v326 = v51;
  switch(*(_BYTE *)(v339 + v42))
  {
    case 0:
      v54 = *(unsigned __int8 *)(v339 + v340);
      if (v54 >= 2)
      {
        if (v340 <= 3)
          v55 = v340;
        else
          v55 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 1:
      v56 = v37;
      (*(void (**)(uint64_t, uint64_t))(v345 + 8))(v339, AssociatedTypeWitness);
      v57 = (v327 + v339) & v325;
      goto LABEL_189;
    case 2:
      v54 = *(unsigned __int8 *)(v339 + v340);
      if (v54 >= 2)
      {
        if (v340 <= 3)
          v58 = v340;
        else
          v58 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 3:
      v54 = *(unsigned __int8 *)(v339 + v340);
      if (v54 >= 2)
      {
        if (v340 <= 3)
          v59 = v340;
        else
          v59 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 4:
      v54 = *(unsigned __int8 *)(v339 + v340);
      if (v54 >= 2)
      {
        if (v340 <= 3)
          v60 = v340;
        else
          v60 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 5:
      v54 = *(unsigned __int8 *)(v339 + v340);
      if (v54 >= 2)
      {
        if (v340 <= 3)
          v61 = v340;
        else
          v61 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 6:
      v62 = *(unsigned __int8 *)(v339 + v340);
      if (v62 >= 2)
      {
        if (v340 <= 3)
          v63 = v340;
        else
          v63 = 4;
        __asm { BR              X12 }
      }
      v74 = v345;
      if (v62 == 1)
      {
        v74 = v344;
        v75 = v346;
      }
      else
      {
        v75 = AssociatedTypeWitness;
      }
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v339, v75);
      v57 = (v329 + v339) & v51;
      v76 = *(unsigned __int8 *)(v57 + v340);
      if (v76 >= 2)
      {
        if (v340 <= 3)
          v77 = v340;
        else
          v77 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_159;
    case 7:
      v64 = *(unsigned __int8 *)(v339 + v340);
      if (v64 >= 2)
      {
        if (v340 <= 3)
          v65 = v340;
        else
          v65 = 4;
        __asm { BR              X12 }
      }
      v78 = v345;
      if (v64 == 1)
      {
        v78 = v344;
        v79 = v346;
      }
      else
      {
        v79 = AssociatedTypeWitness;
      }
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v339, v79);
      v57 = (v329 + v339) & v51;
      v76 = *(unsigned __int8 *)(v57 + v340);
      if (v76 >= 2)
      {
        if (v340 <= 3)
          v80 = v340;
        else
          v80 = 4;
        __asm { BR              X12 }
      }
LABEL_159:
      v56 = v37;
      if (v76 == 1)
LABEL_189:
        (*(void (**)(uint64_t, uint64_t))(v344 + 8))(v57, v346);
      else
        (*(void (**)(uint64_t, uint64_t))(v345 + 8))(v57, AssociatedTypeWitness);
      goto LABEL_190;
    case 8:
      v66 = *(unsigned __int8 *)(v339 + v340);
      if (v66 >= 2)
      {
        if (v340 <= 3)
          v67 = v340;
        else
          v67 = 4;
        __asm { BR              X12 }
      }
      v56 = v37;
      v81 = v345;
      if (v66 == 1)
      {
        v81 = v344;
        v82 = v346;
      }
      else
      {
        v82 = AssociatedTypeWitness;
      }
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v339, v82);
      v83 = (v328 + v339) & v335;
      v84 = v349;
      if (v349 > 3)
        goto LABEL_166;
      v85 = ((1 << v350) + 3) >> v350;
      if (v85 > 0xFFF0)
      {
        v86 = *(_DWORD *)(v83 + v349);
      }
      else if (v85 > 0xF0)
      {
        v86 = *(unsigned __int16 *)(v83 + v349);
      }
      else
      {
LABEL_166:
        v86 = *(unsigned __int8 *)(v83 + v349);
      }
      if (v86 >= 0xF)
      {
        if (v349 <= 3)
          v87 = v349;
        else
          v87 = 4;
        __asm { BR              X12 }
      }
      switch(v86)
      {
        case 7u:
          (*(void (**)(uint64_t, uint64_t))(v320 + 8))((v328 + v339) & v335, v322);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v321 + 8))((v318 + ((v317 + v83) & 0xFFFFFFFFFFFFFFF8)) & v309, v323);
          goto LABEL_331;
        case 8u:
          goto LABEL_332;
        case 0xBu:
          goto LABEL_333;
        case 0xDu:
          goto LABEL_334;
        default:
          goto LABEL_191;
      }
      goto LABEL_191;
    case 9:
      v68 = *(unsigned __int8 *)(v339 + v340);
      if (v68 >= 2)
      {
        if (v340 <= 3)
          v69 = v340;
        else
          v69 = 4;
        __asm { BR              X12 }
      }
      v56 = v37;
      v88 = v345;
      if (v68 == 1)
      {
        v88 = v344;
        v89 = v346;
      }
      else
      {
        v89 = AssociatedTypeWitness;
      }
      (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v339, v89);
      v83 = (v343 + v339 + v31) & v333;
      v84 = v349;
      if (v348 > 3)
        goto LABEL_180;
      v90 = ((1 << v342) + 3) >> v342;
      if (v90 > 0xFFF0)
      {
        v91 = *(_DWORD *)(v83 + v348);
      }
      else if (v90 > 0xF0)
      {
        v91 = *(unsigned __int16 *)(v83 + v348);
      }
      else
      {
LABEL_180:
        v91 = *(unsigned __int8 *)(v83 + v348);
      }
      if (v91 >= 0xF)
      {
        if (v348 <= 3)
          v92 = v348;
        else
          v92 = 4;
        __asm { BR              X12 }
      }
      switch(v91)
      {
        case 7u:
          (*(void (**)(unint64_t, uint64_t))(v313 + 8))((v343 + v339 + v31) & v333, v315);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v314 + 8))((v311 + ((v310 + v83) & 0xFFFFFFFFFFFFFFF8)) & v331, v316);
LABEL_331:
          swift_bridgeObjectRelease();
          v53 = v340;
          swift_bridgeObjectRelease();
          goto LABEL_190;
        case 8u:
LABEL_332:

          goto LABEL_190;
        case 0xBu:
LABEL_333:
          sub_23AAAEE10(*(void **)v83, *(id *)(v83 + 8), *(_BYTE *)(v83 + 16));
          goto LABEL_190;
        case 0xDu:
LABEL_334:
          v144 = *(_QWORD *)(v83 + 16);
          if (v144 >> 60 == 11 || v144 >> 60 == 15)
            goto LABEL_191;
          sub_23AAAE53C(*(_QWORD *)(v83 + 8), v144);
          break;
        default:
          goto LABEL_191;
      }
      goto LABEL_190;
    case 0xA:
      v54 = *(unsigned __int8 *)(v339 + v340);
      if (v54 >= 2)
      {
        if (v340 <= 3)
          v70 = v340;
        else
          v70 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 0xB:
      v54 = *(unsigned __int8 *)(v339 + v340);
      if (v54 >= 2)
      {
        if (v340 <= 3)
          v71 = v340;
        else
          v71 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 0xC:
      v54 = *(unsigned __int8 *)(v339 + v340);
      if (v54 >= 2)
      {
        if (v340 <= 3)
          v72 = v340;
        else
          v72 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_140;
    case 0xD:
      v54 = *(unsigned __int8 *)(v339 + v340);
      if (v54 >= 2)
      {
        if (v340 <= 3)
          v73 = v340;
        else
          v73 = 4;
        __asm { BR              X12 }
      }
LABEL_140:
      v56 = v37;
      if (v54 == 1)
        (*(void (**)(uint64_t, uint64_t))(v344 + 8))(v339, v346);
      else
        (*(void (**)(uint64_t, uint64_t))(v345 + 8))(v339, AssociatedTypeWitness);
LABEL_190:
      v84 = v349;
LABEL_191:
      if (v84 > 3)
        goto LABEL_195;
      v93 = ((1 << v350) + 3) >> v350;
      v94 = 2;
      if (v93 > 0xFFF0)
        v94 = 4;
      if (v93 <= 0xF0)
LABEL_195:
        v94 = 1;
      v95 = v342;
      v96 = a2;
      v97 = v351 + v94;
      if (v97 <= v352)
        v97 = v352;
      if (v348 > 3)
        goto LABEL_202;
      v98 = ((1 << v342) + 3) >> v342;
      v99 = 2;
      if (v98 > 0xFFF0)
        v99 = 4;
      if (v98 <= 0xF0)
LABEL_202:
        v99 = 1;
      v100 = v52 + v99;
      if (v100 > v97)
        v97 = v100;
      if (v36 > v97)
        v97 = v36;
      if (v56 > v97)
        v97 = v56;
      if (v338 > v97)
        v97 = v338;
      if (v38 > v97)
        v97 = v38;
      break;
    default:
      if (v51 > 3)
        goto LABEL_51;
      v44 = ((1 << v350) + 3) >> v350;
      v45 = 2;
      if (v44 > 0xFFF0)
        v45 = 4;
      if (v44 <= 0xF0)
LABEL_51:
        v45 = 1;
      v46 = v351 + v45;
      if (v46 <= v352)
        v46 = v352;
      if (v34 > 3)
        goto LABEL_58;
      v47 = ((1 << v342) + 3) >> v342;
      v48 = 2;
      if (v47 > 0xFFF0)
        v48 = 4;
      if (v47 <= 0xF0)
LABEL_58:
        v48 = 1;
      v49 = v41 + v48;
      if (v49 > v46)
        v46 = v49;
      if (v36 > v46)
        v46 = v36;
      if (v37 > v46)
        v46 = v37;
      if (v338 > v46)
        v46 = v338;
      if (v38 > v46)
        LODWORD(v46) = v38;
      if (v46 <= 3)
        v50 = v46;
      else
        v50 = 4;
      __asm { BR              X15 }
      return result;
  }
  switch(*(_BYTE *)(a2 + v97))
  {
    case 0:
      v108 = *(unsigned __int8 *)(a2 + v53);
      if (v108 >= 2)
      {
        if (v53 <= 3)
          v109 = v53;
        else
          v109 = 4;
        __asm { BR              X12 }
      }
      v145 = v53;
      v146 = v108 == 1;
      v147 = v345;
      if (v108 == 1)
        v147 = v344;
      (*(void (**)(uint64_t))(v147 + 32))(v339);
      *(_BYTE *)(v339 + v145) = v146;
      *(_BYTE *)(v343 + v339) = *(_BYTE *)(v343 + a2);
      if (v349 > 3)
        goto LABEL_343;
      v148 = ((1 << v350) + 3) >> v350;
      v149 = 2;
      if (v148 > 0xFFF0)
        v149 = 4;
      if (v148 <= 0xF0)
LABEL_343:
        v149 = 1;
      v116 = v351 + v149;
      if (v116 <= v352)
        v116 = v352;
      if (v348 > 3)
        goto LABEL_351;
      v150 = ((1 << v342) + 3) >> v342;
      v119 = 2;
      if (v150 > 0xFFF0)
        v119 = 4;
      if (v150 <= 0xF0)
      {
LABEL_351:
        v117 = 0;
        v119 = 1;
      }
      else
      {
        v117 = 0;
      }
      goto LABEL_515;
    case 1:
      v110 = v38;
      v111 = v84;
      (*(void (**)(uint64_t))(v345 + 32))(v339);
      v112 = (v327 + v339) & v325;
      v113 = (v327 + a2) & v325;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v344 + 32))(v112, v113, v346);
      *(_BYTE *)(v112 + v324) = *(_BYTE *)(v113 + v324);
      if (v111 > 3)
        goto LABEL_251;
      v114 = ((1 << v350) + 3) >> v350;
      v115 = 2;
      if (v114 > 0xFFF0)
        v115 = 4;
      if (v114 <= 0xF0)
LABEL_251:
        v115 = 1;
      v38 = v110;
      v116 = v351 + v115;
      if (v116 <= v352)
        v116 = v352;
      v2 = v339;
      if (v348 > 3)
        goto LABEL_258;
      v117 = 1;
      v118 = ((1 << v342) + 3) >> v342;
      v119 = 2;
      if (v118 > 0xFFF0)
        v119 = 4;
      if (v118 <= 0xF0)
      {
LABEL_258:
        v119 = 1;
        v117 = 1;
      }
      goto LABEL_515;
    case 2:
      v120 = *(unsigned __int8 *)(a2 + v53);
      if (v120 >= 2)
      {
        if (v53 <= 3)
          v121 = v53;
        else
          v121 = 4;
        __asm { BR              X12 }
      }
      v151 = v53;
      v152 = v120 == 1;
      v153 = v345;
      if (v120 == 1)
        v153 = v344;
      (*(void (**)(uint64_t))(v153 + 32))(v339);
      *(_BYTE *)(v339 + v151) = v152;
      *(_BYTE *)(v343 + v339) = *(_BYTE *)(v343 + a2);
      if (v349 > 3)
        goto LABEL_358;
      v154 = ((1 << v350) + 3) >> v350;
      v155 = 2;
      if (v154 > 0xFFF0)
        v155 = 4;
      if (v154 <= 0xF0)
LABEL_358:
        v155 = 1;
      v116 = v351 + v155;
      if (v116 <= v352)
        v116 = v352;
      if (v348 > 3)
        goto LABEL_365;
      v156 = ((1 << v342) + 3) >> v342;
      v117 = 2;
      v119 = 4;
      if (v156 <= 0xFFF0)
        v119 = 2;
      if (v156 <= 0xF0)
      {
LABEL_365:
        v117 = 2;
        v119 = 1;
      }
      goto LABEL_515;
    case 3:
      v122 = *(unsigned __int8 *)(a2 + v53);
      if (v122 >= 2)
      {
        if (v53 <= 3)
          v123 = v53;
        else
          v123 = 4;
        __asm { BR              X12 }
      }
      v157 = v53;
      v158 = v122 == 1;
      v159 = v345;
      if (v122 == 1)
      {
        v159 = v344;
        v160 = v346;
      }
      else
      {
        v160 = AssociatedTypeWitness;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v159 + 32))(v339, a2, v160);
      *(_BYTE *)(v339 + v157) = v158;
      if (v349 > 3)
        goto LABEL_373;
      v161 = ((1 << v350) + 3) >> v350;
      v162 = 2;
      if (v161 > 0xFFF0)
        v162 = 4;
      if (v161 <= 0xF0)
LABEL_373:
        v162 = 1;
      v116 = v351 + v162;
      if (v116 <= v352)
        v116 = v352;
      if (v348 > 3)
        goto LABEL_381;
      v163 = ((1 << v342) + 3) >> v342;
      v119 = 2;
      if (v163 > 0xFFF0)
        v119 = 4;
      if (v163 <= 0xF0)
      {
LABEL_381:
        v117 = 3;
        v119 = 1;
      }
      else
      {
        v117 = 3;
      }
      goto LABEL_515;
    case 4:
      v124 = *(unsigned __int8 *)(a2 + v53);
      if (v124 >= 2)
      {
        if (v53 <= 3)
          v125 = v53;
        else
          v125 = 4;
        __asm { BR              X12 }
      }
      v164 = v53;
      v165 = v124 == 1;
      v166 = v345;
      if (v124 == 1)
        v166 = v344;
      (*(void (**)(uint64_t))(v166 + 32))(v339);
      *(_BYTE *)(v339 + v164) = v165;
      *(_QWORD *)((v339 + v343 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v343 + 7) & 0xFFFFFFFFFFFFF8);
      if (v349 > 3)
        goto LABEL_388;
      v167 = ((1 << v350) + 3) >> v350;
      v168 = 2;
      if (v167 > 0xFFF0)
        v168 = 4;
      if (v167 <= 0xF0)
LABEL_388:
        v168 = 1;
      v116 = v351 + v168;
      if (v116 <= v352)
        v116 = v352;
      if (v348 > 3)
        goto LABEL_395;
      v169 = ((1 << v342) + 3) >> v342;
      v119 = 2;
      v117 = 4;
      if (v169 > 0xFFF0)
        v119 = 4;
      if (v169 <= 0xF0)
      {
LABEL_395:
        v117 = 4;
        v119 = 1;
      }
      goto LABEL_515;
    case 5:
      v126 = *(unsigned __int8 *)(a2 + v53);
      if (v126 >= 2)
      {
        if (v53 <= 3)
          v127 = v53;
        else
          v127 = 4;
        __asm { BR              X12 }
      }
      v170 = v53;
      v171 = v126 == 1;
      v172 = v345;
      if (v126 == 1)
        v172 = v344;
      (*(void (**)(uint64_t))(v172 + 32))(v339);
      *(_BYTE *)(v339 + v170) = v171;
      *(_QWORD *)((v339 + v343 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((a2 + v343 + 7) & 0xFFFFFFFFFFFFF8);
      if (v349 > 3)
        goto LABEL_402;
      v173 = ((1 << v350) + 3) >> v350;
      v174 = 2;
      if (v173 > 0xFFF0)
        v174 = 4;
      if (v173 <= 0xF0)
LABEL_402:
        v174 = 1;
      v116 = v351 + v174;
      if (v116 <= v352)
        v116 = v352;
      if (v348 > 3)
        goto LABEL_410;
      v175 = ((1 << v342) + 3) >> v342;
      v119 = 2;
      if (v175 > 0xFFF0)
        v119 = 4;
      if (v175 <= 0xF0)
      {
LABEL_410:
        v117 = 5;
        v119 = 1;
      }
      else
      {
        v117 = 5;
      }
      goto LABEL_515;
    case 6:
      v128 = *(unsigned __int8 *)(a2 + v53);
      if (v128 >= 2)
      {
        if (v53 <= 3)
          v129 = v53;
        else
          v129 = 4;
        __asm { BR              X12 }
      }
      v176 = v128 == 1;
      v177 = v345;
      if (v128 == 1)
        v177 = v344;
      (*(void (**)(uint64_t))(v177 + 32))(v339);
      *(_BYTE *)(v339 + v340) = v176;
      v178 = *(unsigned __int8 *)(((v329 + a2) & v326) + v340);
      if (v178 >= 2)
      {
        if (v340 <= 3)
          v179 = v340;
        else
          v179 = 4;
        __asm { BR              X12 }
      }
      v242 = v178 == 1;
      v243 = v345;
      if (v178 == 1)
        v243 = v344;
      (*(void (**)(uint64_t))(v243 + 32))((v329 + v339) & v326);
      *(_BYTE *)(((v329 + v339) & v326) + v340) = v242;
      if (v349 > 3)
        goto LABEL_533;
      v244 = ((1 << v350) + 3) >> v350;
      v245 = 2;
      if (v244 > 0xFFF0)
        v245 = 4;
      if (v244 <= 0xF0)
LABEL_533:
        v245 = 1;
      v116 = v351 + v245;
      if (v116 <= v352)
        v116 = v352;
      if (v348 > 3)
        goto LABEL_541;
      v246 = ((1 << v342) + 3) >> v342;
      v119 = 2;
      if (v246 > 0xFFF0)
        v119 = 4;
      if (v246 <= 0xF0)
      {
LABEL_541:
        v117 = 6;
        v119 = 1;
      }
      else
      {
        v117 = 6;
      }
      goto LABEL_515;
    case 7:
      v130 = *(unsigned __int8 *)(a2 + v53);
      if (v130 >= 2)
      {
        if (v53 <= 3)
          v131 = v53;
        else
          v131 = 4;
        __asm { BR              X12 }
      }
      v180 = v130 == 1;
      v181 = v345;
      if (v130 == 1)
        v181 = v344;
      (*(void (**)(uint64_t))(v181 + 32))(v339);
      *(_BYTE *)(v339 + v340) = v180;
      v182 = *(unsigned __int8 *)(((v329 + a2) & v326) + v340);
      if (v182 >= 2)
      {
        if (v340 <= 3)
          v183 = v340;
        else
          v183 = 4;
        __asm { BR              X12 }
      }
      v247 = v182 == 1;
      v248 = v345;
      if (v182 == 1)
        v248 = v344;
      (*(void (**)(uint64_t))(v248 + 32))((v329 + v339) & v326);
      *(_BYTE *)(((v329 + v339) & v326) + v340) = v247;
      if (v349 > 3)
        goto LABEL_548;
      v249 = ((1 << v350) + 3) >> v350;
      v250 = 2;
      if (v249 > 0xFFF0)
        v250 = 4;
      if (v249 <= 0xF0)
LABEL_548:
        v250 = 1;
      v116 = v351 + v250;
      if (v116 <= v352)
        v116 = v352;
      if (v348 > 3)
        goto LABEL_556;
      v251 = ((1 << v342) + 3) >> v342;
      v119 = 2;
      if (v251 > 0xFFF0)
        v119 = 4;
      if (v251 <= 0xF0)
      {
LABEL_556:
        v117 = 7;
        v119 = 1;
      }
      else
      {
        v117 = 7;
      }
      goto LABEL_515;
    case 8:
      v132 = *(unsigned __int8 *)(a2 + v53);
      if (v132 >= 2)
      {
        if (v53 <= 3)
          v133 = v53;
        else
          v133 = 4;
        __asm { BR              X12 }
      }
      v184 = v53;
      v185 = v132 == 1;
      v186 = v345;
      if (v132 == 1)
        v186 = v344;
      (*(void (**)(uint64_t))(v186 + 32))(v339);
      *(_BYTE *)(v339 + v184) = v185;
      v188 = (_OWORD *)((v328 + a2) & v335);
      v189 = v349;
      if (v349 > 3)
        goto LABEL_430;
      v190 = ((1 << v350) + 3) >> v350;
      if (v190 > 0xFFF0)
      {
        v191 = v38;
        v192 = *(_DWORD *)((char *)v188 + v349);
      }
      else if (v190 > 0xF0)
      {
        v191 = v38;
        v192 = *(unsigned __int16 *)((char *)v188 + v349);
      }
      else
      {
LABEL_430:
        v191 = v38;
        v192 = *((unsigned __int8 *)v188 + v349);
      }
      v187 = v328 + v339;
      v193 = (_OWORD *)((v328 + v339) & v335);
      if (v192 >= 0xF)
      {
        if (v349 <= 3)
          v194 = v349;
        else
          v194 = 4;
        __asm { BR              X12 }
      }
      v195 = v342;
      break;
    case 9:
      v134 = *(unsigned __int8 *)(a2 + v53);
      if (v134 >= 2)
      {
        if (v53 <= 3)
          v135 = v53;
        else
          v135 = 4;
        __asm { BR              X12 }
      }
      v337 = v36;
      v196 = v52;
      v197 = v53;
      v198 = v134 == 1;
      v199 = v345;
      if (v134 == 1)
        v199 = v344;
      v200 = v96;
      (*(void (**)(uint64_t))(v199 + 32))(v339);
      *(_BYTE *)(v339 + v197) = v198;
      v202 = (char *)((v343 + v200 + v31) & v333);
      v203 = v348;
      if (v348 > 3)
        goto LABEL_444;
      v204 = ((1 << v342) + 3) >> v342;
      if (v204 > 0xFFF0)
      {
        v206 = v38;
        v207 = *(_DWORD *)&v202[v348];
      }
      else
      {
        v205 = v204 > 0xF0;
        v203 = v348;
        if (v205)
        {
          v206 = v38;
          v207 = *(unsigned __int16 *)&v202[v348];
        }
        else
        {
LABEL_444:
          v206 = v38;
          v207 = v202[v203];
        }
      }
      v201 = v343 + v339 + v31;
      v208 = (_OWORD *)(v201 & v333);
      v209 = v349;
      v52 = v196;
      v43 = v338;
      if (v207 >= 0xF)
      {
        if (v348 <= 3)
          v210 = v348;
        else
          v210 = 4;
        __asm { BR              X12 }
      }
      v36 = v337;
      switch(v207)
      {
        case 0u:
          v254 = *(_OWORD *)v202;
          *(_QWORD *)((v201 & v333) + 0x10) = *((_QWORD *)v202 + 2);
          *v208 = v254;
          v2 = v339;
          if (v348 > 3)
            goto LABEL_566;
          v255 = ((1 << v342) + 3) >> v342;
          if (v255 > 0xFFF0)
          {
            *(_DWORD *)((char *)v208 + v348) = 0;
          }
          else if (v255 > 0xF0)
          {
            *(_WORD *)((char *)v208 + v348) = 0;
          }
          else
          {
LABEL_566:
            *((_BYTE *)v208 + v348) = 0;
          }
          break;
        case 1u:
          *(_QWORD *)v208 = *(_QWORD *)v202;
          v2 = v339;
          if (v348 > 3)
            goto LABEL_634;
          v274 = 1;
          v275 = ((1 << v342) + 3) >> v342;
          if (v275 > 0xFFF0)
          {
            *(_DWORD *)((char *)v208 + v348) = 1;
          }
          else
          {
            if (v275 > 0xF0)
              goto LABEL_767;
LABEL_634:
            *((_BYTE *)v208 + v348) = 1;
          }
          break;
        case 2u:
          *v208 = *(_OWORD *)v202;
          v2 = v339;
          if (v348 > 3)
            goto LABEL_638;
          v276 = ((1 << v342) + 3) >> v342;
          if (v276 > 0xFFF0)
          {
            *(_DWORD *)((char *)v208 + v348) = 2;
          }
          else
          {
            if (v276 > 0xF0)
            {
              v274 = 2;
              goto LABEL_767;
            }
LABEL_638:
            *((_BYTE *)v208 + v348) = 2;
          }
          break;
        case 3u:
          *(_BYTE *)v208 = *v202;
          v2 = v339;
          if (v348 > 3)
            goto LABEL_642;
          v277 = ((1 << v342) + 3) >> v342;
          if (v277 > 0xFFF0)
          {
            *(_DWORD *)((char *)v208 + v348) = 3;
          }
          else
          {
            if (v277 > 0xF0)
            {
              v274 = 3;
              goto LABEL_767;
            }
LABEL_642:
            *((_BYTE *)v208 + v348) = 3;
          }
          break;
        case 4u:
          *(_BYTE *)v208 = *v202;
          v2 = v339;
          if (v348 > 3)
            goto LABEL_646;
          v278 = ((1 << v342) + 3) >> v342;
          if (v278 > 0xFFF0)
          {
            *(_DWORD *)((char *)v208 + v348) = 4;
          }
          else
          {
            if (v278 > 0xF0)
            {
              v274 = 4;
              goto LABEL_767;
            }
LABEL_646:
            *((_BYTE *)v208 + v348) = 4;
          }
          break;
        case 5u:
          *(_BYTE *)v208 = *v202;
          v2 = v339;
          if (v348 > 3)
            goto LABEL_650;
          v279 = ((1 << v342) + 3) >> v342;
          if (v279 > 0xFFF0)
          {
            *(_DWORD *)((char *)v208 + v348) = 5;
          }
          else
          {
            if (v279 > 0xF0)
            {
              v274 = 5;
              goto LABEL_767;
            }
LABEL_650:
            *((_BYTE *)v208 + v348) = 5;
          }
          break;
        case 6u:
          *(_BYTE *)v208 = *v202;
          v2 = v339;
          if (v348 > 3)
            goto LABEL_654;
          v280 = ((1 << v342) + 3) >> v342;
          if (v280 > 0xFFF0)
          {
            *(_DWORD *)((char *)v208 + v348) = 6;
          }
          else
          {
            if (v280 > 0xF0)
            {
              v274 = 6;
              goto LABEL_767;
            }
LABEL_654:
            *((_BYTE *)v208 + v348) = 6;
          }
          break;
        case 7u:
          (*(void (**)(_OWORD *, char *, uint64_t))(v313 + 32))(v208, v202, v315);
          v281 = (_QWORD *)(((unint64_t)v208 + v310) & 0xFFFFFFFFFFFFFFF8);
          v282 = (_QWORD *)((unint64_t)&v202[v310] & 0xFFFFFFFFFFFFFFF8);
          *v281 = *v282;
          v283 = ((unint64_t)v281 + v311) & v331;
          v284 = ((unint64_t)v282 + v311) & v331;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v314 + 32))(v283, v284, v316);
          v209 = v349;
          v285 = v312 + v283;
          v95 = v342;
          v285 &= 0xFFFFFFFFFFFFF8uLL;
          v286 = (_QWORD *)((v312 + v284) & 0xFFFFFFFFFFFFF8);
          *(_QWORD *)v285 = *v286;
          *(_OWORD *)((v285 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v286 + 15) & 0xFFFFFFFFFFFFF8);
          v287 = (unint64_t)v208 + v307;
          *(_BYTE *)v287 = v202[v307];
          *(_BYTE *)(v287 | 1) = *(_BYTE *)((unint64_t)&v202[v307] | 1);
          v43 = v338;
          v2 = v339;
          if (v348 > 3)
            goto LABEL_658;
          v288 = ((1 << v342) + 3) >> v342;
          if (v288 > 0xFFF0)
          {
            *(_DWORD *)((char *)v208 + v348) = 7;
          }
          else
          {
            if (v288 > 0xF0)
            {
              v274 = 7;
              goto LABEL_767;
            }
LABEL_658:
            *((_BYTE *)v208 + v348) = 7;
          }
          break;
        case 8u:
          *(_QWORD *)v208 = *(_QWORD *)v202;
          v2 = v339;
          if (v348 > 3)
            goto LABEL_662;
          v289 = ((1 << v342) + 3) >> v342;
          if (v289 > 0xFFF0)
          {
            *(_DWORD *)((char *)v208 + v348) = 8;
          }
          else
          {
            if (v289 > 0xF0)
            {
              v274 = 8;
              goto LABEL_767;
            }
LABEL_662:
            *((_BYTE *)v208 + v348) = 8;
          }
          break;
        case 9u:
          *(_BYTE *)v208 = *v202;
          v2 = v339;
          if (v348 > 3)
            goto LABEL_666;
          v290 = ((1 << v342) + 3) >> v342;
          if (v290 > 0xFFF0)
          {
            *(_DWORD *)((char *)v208 + v348) = 9;
          }
          else
          {
            if (v290 > 0xF0)
            {
              v274 = 9;
              goto LABEL_767;
            }
LABEL_666:
            *((_BYTE *)v208 + v348) = 9;
          }
          break;
        case 0xAu:
          *(_WORD *)v208 = *(_WORD *)v202;
          v2 = v339;
          if (v348 > 3)
            goto LABEL_670;
          v291 = ((1 << v342) + 3) >> v342;
          if (v291 > 0xFFF0)
          {
            *(_DWORD *)((char *)v208 + v348) = 10;
          }
          else
          {
            if (v291 > 0xF0)
            {
              v274 = 10;
              goto LABEL_767;
            }
LABEL_670:
            *((_BYTE *)v208 + v348) = 10;
          }
          break;
        case 0xBu:
          v292 = *(_OWORD *)v202;
          *(_BYTE *)((v201 & v333) + 0x10) = v202[16];
          *v208 = v292;
          v2 = v339;
          if (v348 > 3)
            goto LABEL_674;
          v293 = ((1 << v342) + 3) >> v342;
          if (v293 > 0xFFF0)
          {
            *(_DWORD *)((char *)v208 + v348) = 11;
          }
          else
          {
            if (v293 > 0xF0)
            {
              v274 = 11;
              goto LABEL_767;
            }
LABEL_674:
            *((_BYTE *)v208 + v348) = 11;
          }
          break;
        case 0xCu:
          v294 = *(_OWORD *)v202;
          *(_QWORD *)((v201 & v333) + 0x10) = *((_QWORD *)v202 + 2);
          *v208 = v294;
          v2 = v339;
          if (v348 > 3)
            goto LABEL_678;
          v295 = ((1 << v342) + 3) >> v342;
          if (v295 > 0xFFF0)
          {
            *(_DWORD *)((char *)v208 + v348) = 12;
          }
          else
          {
            if (v295 > 0xF0)
            {
              v274 = 12;
              goto LABEL_767;
            }
LABEL_678:
            *((_BYTE *)v208 + v348) = 12;
          }
          break;
        case 0xDu:
          v296 = *(_OWORD *)v202;
          v297 = *((_OWORD *)v202 + 1);
          v298 = *((_OWORD *)v202 + 2);
          *(_OWORD *)((v201 & v333) + 0x29) = *(_OWORD *)(v202 + 41);
          *(_OWORD *)((v201 & v333) + 0x10) = v297;
          *(_OWORD *)((v201 & v333) + 0x20) = v298;
          *v208 = v296;
          v2 = v339;
          if (v348 > 3)
            goto LABEL_682;
          v299 = ((1 << v342) + 3) >> v342;
          if (v299 > 0xFFF0)
          {
            *(_DWORD *)((char *)v208 + v348) = 13;
          }
          else
          {
            if (v299 > 0xF0)
            {
              v274 = 13;
              goto LABEL_767;
            }
LABEL_682:
            *((_BYTE *)v208 + v348) = 13;
          }
          break;
        case 0xEu:
          *(_BYTE *)v208 = *v202;
          v2 = v339;
          if (v348 > 3)
            goto LABEL_686;
          v300 = ((1 << v342) + 3) >> v342;
          if (v300 > 0xFFF0)
          {
            *(_DWORD *)((char *)v208 + v348) = 14;
          }
          else if (v300 > 0xF0)
          {
            v274 = 14;
LABEL_767:
            *(_WORD *)((char *)v208 + v348) = v274;
          }
          else
          {
LABEL_686:
            *((_BYTE *)v208 + v348) = 14;
          }
          break;
        default:
          if (v348 > 3)
            goto LABEL_629;
          v272 = ((1 << v342) + 3) >> v342;
          v273 = 2;
          if (v272 > 0xFFF0)
            v273 = 4;
          if (v272 <= 0xF0)
LABEL_629:
            v273 = 1;
          memcpy(v208, v202, v273 + v348);
          v2 = v339;
          v209 = v349;
          break;
      }
      v38 = v206;
      if (v209 > 3)
        goto LABEL_772;
      v304 = ((1 << v350) + 3) >> v350;
      v305 = 2;
      if (v304 > 0xFFF0)
        v305 = 4;
      if (v304 <= 0xF0)
LABEL_772:
        v305 = 1;
      v116 = v351 + v305;
      if (v116 <= v352)
        v116 = v352;
      if (v348 > 3)
        goto LABEL_780;
      v306 = ((1 << v95) + 3) >> v95;
      v119 = 2;
      if (v306 > 0xFFF0)
        v119 = 4;
      if (v306 <= 0xF0)
      {
LABEL_780:
        v117 = 9;
        v119 = 1;
      }
      else
      {
        v117 = 9;
      }
      goto LABEL_515;
    case 0xA:
      v341 = v56;
      v136 = *(unsigned __int8 *)(a2 + v53);
      if (v136 >= 2)
      {
        if (v53 <= 3)
          v137 = v53;
        else
          v137 = 4;
        __asm { BR              X12 }
      }
      v211 = v53;
      v212 = v136 == 1;
      v213 = v345;
      if (v136 == 1)
        v213 = v344;
      (*(void (**)(uint64_t))(v213 + 32))(v339);
      *(_BYTE *)(v339 + v211) = v212;
      v214 = (a2 + v343 + 7) & 0xFFFFFFFFFFFFFFF8;
      v215 = *(_BYTE *)(v214 + 8);
      v216 = (v339 + v343 + 7) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v216 = *(_QWORD *)v214;
      *(_BYTE *)(v216 + 8) = v215;
      if (v349 > 3)
        goto LABEL_459;
      v217 = ((1 << v350) + 3) >> v350;
      v218 = 2;
      if (v217 > 0xFFF0)
        v218 = 4;
      if (v217 <= 0xF0)
LABEL_459:
        v218 = 1;
      v116 = v351 + v218;
      if (v116 <= v352)
        v116 = v352;
      if (v348 <= 3)
      {
        v219 = ((1 << v342) + 3) >> v342;
        v119 = 2;
        if (v219 > 0xFFF0)
          v119 = 4;
        if (v219 > 0xF0)
        {
          v117 = 10;
          goto LABEL_514;
        }
      }
      v117 = 10;
      goto LABEL_513;
    case 0xB:
      v341 = v56;
      v138 = *(unsigned __int8 *)(a2 + v53);
      if (v138 >= 2)
      {
        if (v53 <= 3)
          v139 = v53;
        else
          v139 = 4;
        __asm { BR              X12 }
      }
      v220 = v53;
      v221 = v138 == 1;
      v222 = v345;
      if (v138 == 1)
        v222 = v344;
      (*(void (**)(uint64_t))(v222 + 32))(v339);
      *(_BYTE *)(v339 + v220) = v221;
      *(_OWORD *)((v339 + v343 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((a2 + v343 + 7) & 0xFFFFFFFFFFFFF8);
      if (v349 > 3)
        goto LABEL_474;
      v223 = ((1 << v350) + 3) >> v350;
      v224 = 2;
      if (v223 > 0xFFF0)
        v224 = 4;
      if (v223 <= 0xF0)
LABEL_474:
        v224 = 1;
      v116 = v351 + v224;
      if (v116 <= v352)
        v116 = v352;
      if (v348 <= 3)
      {
        v225 = ((1 << v342) + 3) >> v342;
        v119 = 2;
        if (v225 > 0xFFF0)
          v119 = 4;
        if (v225 > 0xF0)
        {
          v117 = 11;
          goto LABEL_514;
        }
      }
      v117 = 11;
      goto LABEL_513;
    case 0xC:
      v341 = v56;
      v140 = *(unsigned __int8 *)(a2 + v53);
      if (v140 >= 2)
      {
        if (v53 <= 3)
          v141 = v53;
        else
          v141 = 4;
        __asm { BR              X12 }
      }
      v226 = v53;
      v227 = v140 == 1;
      v228 = v345;
      if (v140 == 1)
        v228 = v344;
      (*(void (**)(uint64_t))(v228 + 32))(v339);
      *(_BYTE *)(v339 + v226) = v227;
      *(_BYTE *)(v343 + v339) = *(_BYTE *)(v343 + a2);
      if (v349 > 3)
        goto LABEL_489;
      v229 = ((1 << v350) + 3) >> v350;
      v230 = 2;
      if (v229 > 0xFFF0)
        v230 = 4;
      if (v229 <= 0xF0)
LABEL_489:
        v230 = 1;
      v116 = v351 + v230;
      if (v116 <= v352)
        v116 = v352;
      if (v348 <= 3)
      {
        v231 = ((1 << v342) + 3) >> v342;
        v119 = 2;
        if (v231 > 0xFFF0)
          v119 = 4;
        if (v231 > 0xF0)
        {
          v117 = 12;
          goto LABEL_514;
        }
      }
      v117 = 12;
      goto LABEL_513;
    case 0xD:
      v341 = v56;
      v142 = *(unsigned __int8 *)(a2 + v53);
      if (v142 >= 2)
      {
        if (v53 <= 3)
          v143 = v53;
        else
          v143 = 4;
        __asm { BR              X12 }
      }
      v232 = v53;
      v233 = v142 == 1;
      v234 = v345;
      if (v142 == 1)
        v234 = v344;
      (*(void (**)(uint64_t))(v234 + 32))(v339);
      *(_BYTE *)(v339 + v232) = v233;
      v235 = (_QWORD *)((v339 + v343 + 7) & 0xFFFFFFFFFFFFF8);
      v236 = (_QWORD *)((a2 + v343 + 7) & 0xFFFFFFFFFFFFF8);
      *v235 = *v236;
      *(_QWORD *)(((unint64_t)v235 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v236 + 15) & 0xFFFFFFFFFFFFF8);
      if (v349 > 3)
        goto LABEL_504;
      v237 = ((1 << v350) + 3) >> v350;
      v238 = 2;
      if (v237 > 0xFFF0)
        v238 = 4;
      if (v237 <= 0xF0)
LABEL_504:
        v238 = 1;
      v116 = v351 + v238;
      if (v116 <= v352)
        v116 = v352;
      if (v348 > 3)
        goto LABEL_512;
      v239 = ((1 << v342) + 3) >> v342;
      v119 = 2;
      if (v239 > 0xFFF0)
        v119 = 4;
      if (v239 <= 0xF0)
      {
LABEL_512:
        v117 = 13;
LABEL_513:
        v119 = 1;
      }
      else
      {
        v117 = 13;
      }
LABEL_514:
      v56 = v341;
      goto LABEL_515;
    default:
      if (v84 > 3)
        goto LABEL_218;
      v101 = ((1 << v350) + 3) >> v350;
      v102 = 2;
      if (v101 > 0xFFF0)
        v102 = 4;
      if (v101 <= 0xF0)
LABEL_218:
        v102 = 1;
      v103 = v351 + v102;
      if (v103 <= v352)
        v103 = v352;
      if (v348 > 3)
        goto LABEL_225;
      v104 = ((1 << v342) + 3) >> v342;
      v105 = 2;
      if (v104 > 0xFFF0)
        v105 = 4;
      if (v104 <= 0xF0)
LABEL_225:
        v105 = 1;
      v106 = v52 + v105;
      if (v106 > v103)
        v103 = v106;
      if (v36 > v103)
        v103 = v36;
      if (v56 > v103)
        v103 = v56;
      if (v338 > v103)
        v103 = v338;
      if (v38 > v103)
        LODWORD(v103) = v38;
      if (v103 <= 3)
        v107 = v103;
      else
        v107 = 4;
      __asm { BR              X13 }
      return result;
  }
  switch(v192)
  {
    case 0u:
      v252 = *v188;
      *(_QWORD *)((v187 & v335) + 0x10) = *(_QWORD *)(((v328 + a2) & v335) + 0x10);
      *v193 = v252;
      v2 = v339;
      if (v349 > 3)
        goto LABEL_561;
      v253 = ((1 << v350) + 3) >> v350;
      if (v253 > 0xFFF0)
      {
        *(_DWORD *)((char *)v193 + v349) = 0;
      }
      else
      {
        if (v253 <= 0xF0)
        {
LABEL_561:
          *((_BYTE *)v193 + v349) = 0;
          goto LABEL_690;
        }
        *(_WORD *)((char *)v193 + v349) = 0;
      }
      goto LABEL_743;
    case 1u:
      *(_QWORD *)v193 = *(_QWORD *)v188;
      v2 = v339;
      if (v349 > 3)
        goto LABEL_576;
      v258 = 1;
      v253 = ((1 << v350) + 3) >> v350;
      if (v253 > 0xFFF0)
      {
        *(_DWORD *)((char *)v193 + v349) = 1;
        goto LABEL_743;
      }
      if (v253 > 0xF0)
        goto LABEL_742;
LABEL_576:
      v259 = 1;
      goto LABEL_689;
    case 2u:
      *v193 = *v188;
      v2 = v339;
      if (v349 > 3)
        goto LABEL_580;
      v253 = ((1 << v350) + 3) >> v350;
      if (v253 > 0xFFF0)
      {
        *(_DWORD *)((char *)v193 + v349) = 2;
        goto LABEL_743;
      }
      if (v253 <= 0xF0)
      {
LABEL_580:
        v259 = 2;
        goto LABEL_689;
      }
      v258 = 2;
      goto LABEL_742;
    case 3u:
      *(_BYTE *)v193 = *(_BYTE *)v188;
      v2 = v339;
      if (v349 > 3)
        goto LABEL_584;
      v253 = ((1 << v350) + 3) >> v350;
      if (v253 > 0xFFF0)
      {
        *(_DWORD *)((char *)v193 + v349) = 3;
        goto LABEL_743;
      }
      if (v253 <= 0xF0)
      {
LABEL_584:
        v259 = 3;
        goto LABEL_689;
      }
      v258 = 3;
      goto LABEL_742;
    case 4u:
      *(_BYTE *)v193 = *(_BYTE *)v188;
      v2 = v339;
      if (v349 > 3)
        goto LABEL_588;
      v253 = ((1 << v350) + 3) >> v350;
      if (v253 > 0xFFF0)
      {
        *(_DWORD *)((char *)v193 + v349) = 4;
        goto LABEL_743;
      }
      if (v253 <= 0xF0)
      {
LABEL_588:
        v259 = 4;
        goto LABEL_689;
      }
      v258 = 4;
      goto LABEL_742;
    case 5u:
      *(_BYTE *)v193 = *(_BYTE *)v188;
      v2 = v339;
      if (v349 > 3)
        goto LABEL_592;
      v253 = ((1 << v350) + 3) >> v350;
      if (v253 > 0xFFF0)
      {
        *(_DWORD *)((char *)v193 + v349) = 5;
        goto LABEL_743;
      }
      if (v253 <= 0xF0)
      {
LABEL_592:
        v259 = 5;
        goto LABEL_689;
      }
      v258 = 5;
      goto LABEL_742;
    case 6u:
      *(_BYTE *)v193 = *(_BYTE *)v188;
      v2 = v339;
      if (v349 > 3)
        goto LABEL_596;
      v253 = ((1 << v350) + 3) >> v350;
      if (v253 > 0xFFF0)
      {
        *(_DWORD *)((char *)v193 + v349) = 6;
        goto LABEL_743;
      }
      if (v253 <= 0xF0)
      {
LABEL_596:
        v259 = 6;
        goto LABEL_689;
      }
      v258 = 6;
      goto LABEL_742;
    case 7u:
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v320 + 32))(v193, v188, v322);
      v260 = (_QWORD *)(((unint64_t)v193 + v317) & 0xFFFFFFFFFFFFFFF8);
      v261 = (_QWORD *)(((unint64_t)v188 + v317) & 0xFFFFFFFFFFFFFFF8);
      *v260 = *v261;
      v262 = ((unint64_t)v260 + v318) & v309;
      v263 = ((unint64_t)v261 + v318) & v309;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v321 + 32))(v262, v263, v323);
      v189 = v349;
      v195 = v342;
      v264 = (_QWORD *)((v319 + v262) & 0xFFFFFFFFFFFFF8);
      v265 = (_QWORD *)((v319 + v263) & 0xFFFFFFFFFFFFF8);
      *v264 = *v265;
      *(_OWORD *)(((unint64_t)v264 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v265 + 15) & 0xFFFFFFFFFFFFF8);
      v266 = (unint64_t)v193 + v308;
      *(_BYTE *)v266 = *((_BYTE *)v188 + v308);
      *(_BYTE *)(v266 | 1) = *(_BYTE *)(((unint64_t)v188 + v308) | 1);
      v43 = v338;
      v2 = v339;
      if (v349 > 3)
        goto LABEL_600;
      v253 = ((1 << v350) + 3) >> v350;
      if (v253 > 0xFFF0)
      {
        *(_DWORD *)((char *)v193 + v349) = 7;
        goto LABEL_743;
      }
      if (v253 <= 0xF0)
      {
LABEL_600:
        v259 = 7;
        goto LABEL_689;
      }
      v258 = 7;
      goto LABEL_742;
    case 8u:
      *(_QWORD *)v193 = *(_QWORD *)v188;
      v2 = v339;
      if (v349 > 3)
        goto LABEL_688;
      v253 = ((1 << v350) + 3) >> v350;
      if (v253 > 0xFFF0)
      {
        *(_DWORD *)((char *)v193 + v349) = 8;
        goto LABEL_743;
      }
      if (v253 <= 0xF0)
      {
LABEL_688:
        v259 = 8;
        goto LABEL_689;
      }
      v258 = 8;
      goto LABEL_742;
    case 9u:
      *(_BYTE *)v193 = *(_BYTE *)v188;
      v2 = v339;
      if (v349 > 3)
        goto LABEL_604;
      v253 = ((1 << v350) + 3) >> v350;
      if (v253 > 0xFFF0)
      {
        *(_DWORD *)((char *)v193 + v349) = 9;
        goto LABEL_743;
      }
      if (v253 <= 0xF0)
      {
LABEL_604:
        v259 = 9;
        goto LABEL_689;
      }
      v258 = 9;
      goto LABEL_742;
    case 0xAu:
      *(_WORD *)v193 = *(_WORD *)v188;
      v2 = v339;
      if (v349 > 3)
        goto LABEL_608;
      v253 = ((1 << v350) + 3) >> v350;
      if (v253 > 0xFFF0)
      {
        *(_DWORD *)((char *)v193 + v349) = 10;
        goto LABEL_743;
      }
      if (v253 <= 0xF0)
      {
LABEL_608:
        v259 = 10;
        goto LABEL_689;
      }
      v258 = 10;
      goto LABEL_742;
    case 0xBu:
      v267 = *v188;
      *(_BYTE *)((v187 & v335) + 0x10) = *(_BYTE *)(((v328 + a2) & v335) + 0x10);
      *v193 = v267;
      v2 = v339;
      if (v349 > 3)
        goto LABEL_612;
      v253 = ((1 << v350) + 3) >> v350;
      if (v253 > 0xFFF0)
      {
        *(_DWORD *)((char *)v193 + v349) = 11;
        goto LABEL_743;
      }
      if (v253 <= 0xF0)
      {
LABEL_612:
        v259 = 11;
        goto LABEL_689;
      }
      v258 = 11;
      goto LABEL_742;
    case 0xCu:
      v268 = *v188;
      *(_QWORD *)((v187 & v335) + 0x10) = *(_QWORD *)(((v328 + a2) & v335) + 0x10);
      *v193 = v268;
      v2 = v339;
      if (v349 > 3)
        goto LABEL_616;
      v253 = ((1 << v350) + 3) >> v350;
      if (v253 > 0xFFF0)
      {
        *(_DWORD *)((char *)v193 + v349) = 12;
        goto LABEL_743;
      }
      if (v253 <= 0xF0)
      {
LABEL_616:
        v259 = 12;
        goto LABEL_689;
      }
      v258 = 12;
      goto LABEL_742;
    case 0xDu:
      v269 = *v188;
      v270 = *(_OWORD *)(((v328 + a2) & v335) + 0x10);
      v271 = *(_OWORD *)(((v328 + a2) & v335) + 0x20);
      *(_OWORD *)((v187 & v335) + 0x29) = *(_OWORD *)(((v328 + a2) & v335) + 0x29);
      *(_OWORD *)((v187 & v335) + 0x10) = v270;
      *(_OWORD *)((v187 & v335) + 0x20) = v271;
      *v193 = v269;
      v2 = v339;
      if (v349 > 3)
        goto LABEL_620;
      v253 = ((1 << v350) + 3) >> v350;
      if (v253 > 0xFFF0)
      {
        *(_DWORD *)((char *)v193 + v349) = 13;
        goto LABEL_743;
      }
      if (v253 <= 0xF0)
      {
LABEL_620:
        v259 = 13;
        goto LABEL_689;
      }
      v258 = 13;
      goto LABEL_742;
    case 0xEu:
      *(_BYTE *)v193 = *(_BYTE *)v188;
      v2 = v339;
      if (v349 > 3)
        goto LABEL_624;
      v253 = ((1 << v350) + 3) >> v350;
      if (v253 > 0xFFF0)
      {
        *(_DWORD *)((char *)v193 + v349) = 14;
LABEL_743:
        v205 = v253 > 0xFFF0;
        v302 = 2;
        if (v205)
          v302 = 4;
        v38 = v191;
        goto LABEL_746;
      }
      if (v253 > 0xF0)
      {
        v258 = 14;
LABEL_742:
        *(_WORD *)((char *)v193 + v189) = v258;
        goto LABEL_743;
      }
LABEL_624:
      v259 = 14;
LABEL_689:
      *((_BYTE *)v193 + v189) = v259;
LABEL_690:
      v38 = v191;
      if (v189 > 3)
        goto LABEL_694;
      v301 = ((1 << v350) + 3) >> v350;
      v302 = 2;
      if (v301 > 0xFFF0)
        v302 = 4;
      if (v301 <= 0xF0)
LABEL_694:
        v302 = 1;
LABEL_746:
      v116 = v351 + v302;
      if (v116 <= v352)
        v116 = v352;
      if (v348 > 3)
        goto LABEL_753;
      v303 = ((1 << v195) + 3) >> v195;
      v119 = 2;
      if (v303 > 0xFFF0)
        v119 = 4;
      if (v303 <= 0xF0)
      {
LABEL_753:
        v117 = 8;
        v119 = 1;
      }
      else
      {
        v117 = 8;
      }
LABEL_515:
      v240 = v52 + v119;
      if (v240 > v116)
        v116 = v240;
      if (v36 > v116)
        v116 = v36;
      if (v56 > v116)
        v116 = v56;
      if (v43 > v116)
        v116 = v43;
      if (v38 > v116)
        v116 = v38;
      *(_BYTE *)(v2 + v116) = v117;
      return v2;
    default:
      if (v349 > 3)
        goto LABEL_571;
      v256 = ((1 << v350) + 3) >> v350;
      v257 = 2;
      if (v256 > 0xFFF0)
        v257 = 4;
      if (v256 <= 0xF0)
LABEL_571:
        v257 = 1;
      memcpy(v193, v188, v257 + v349);
      LODWORD(v189) = v349;
      v2 = v339;
      goto LABEL_690;
  }
}

uint64_t sub_23AB4D900(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  int v41;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unint64_t v54;
  unint64_t v56;
  unint64_t v57;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (v5 <= v3)
    v6 = v3;
  else
    v6 = *(_QWORD *)(v4 + 64);
  v7 = v6 + 1;
  v8 = *(_DWORD *)(v4 + 80);
  v9 = v8;
  v10 = v5 + ((v3 + v8) & ~(unint64_t)v8);
  if (v10 + 1 > v6 + 2)
    v11 = v10 + 1;
  else
    v11 = v6 + 2;
  if (v7 > v11)
    v11 = v6 + 1;
  v12 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 0xFFFFFFFFFFFFFFF8) + 16 > v11)
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
  v13 = *(unsigned __int8 *)(v2 + 80) | v9;
  v14 = ((v7 + v13) & ~v13) + v7;
  if (v14 > v11)
    v11 = v14;
  v56 = v11;
  v57 = v6 + 2;
  v15 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v16 = *(_DWORD *)(v15 + 80) & 0xF8;
  v17 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v54 = (v7 + (v16 | v18 | 7)) & ~(unint64_t)(v16 | v18 | 7);
  v19 = ((((*(_QWORD *)(v17 + 64) + ((v18 + ((*(_QWORD *)(v15 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v18) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 18;
  if (v19 <= 0x39)
    v20 = 57;
  else
    v20 = v19;
  v21 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v22 = *(_DWORD *)(v21 + 80) & 0xF8;
  v23 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v24 = *(unsigned __int8 *)(v23 + 80);
  v25 = v22 | v24 | 7;
  v26 = ((((*(_QWORD *)(v23 + 64) + ((v24 + ((*(_QWORD *)(v21 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v24) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 18;
  if (v26 <= 0x39)
    v26 = 57;
  v27 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (v20 > 3)
    goto LABEL_22;
  v28 = ((1 << (8 * v20)) + 3) >> (8 * v20);
  v29 = 4;
  if (v28 <= 0xFFF0)
    v29 = 2;
  if (v28 <= 0xF0)
LABEL_22:
    v29 = 1;
  v30 = (v7 + v25) & ~v25;
  v31 = v12 + 17;
  v32 = v12 + 24;
  v33 = v27 + 8;
  v34 = v20 + v54 + v29;
  if (v34 <= v56)
    v34 = v56;
  if (v26 > 3)
    goto LABEL_29;
  v35 = ((1 << (8 * v26)) + 3) >> (8 * v26);
  v36 = 2;
  if (v35 > 0xFFF0)
    v36 = 4;
  if (v35 <= 0xF0)
LABEL_29:
    v36 = 1;
  v37 = v26 + v30;
  v38 = v37 + v36;
  if (v38 > v34)
    v34 = v38;
  if (v31 > v34)
    v34 = v12 + 17;
  if (v32 > v34)
    v34 = v12 + 24;
  if (v57 > v34)
    v34 = v57;
  if (v33 > v34)
    v34 = v27 + 8;
  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_60;
  v39 = v34 + 1;
  v40 = 8 * v39;
  if (v39 <= 3)
  {
    v43 = ((a2 + ~(-1 << v40) - 242) >> v40) + 1;
    if (HIWORD(v43))
    {
      v41 = *(_DWORD *)(a1 + v39);
      if (!v41)
        goto LABEL_60;
      goto LABEL_51;
    }
    if (v43 > 0xFF)
    {
      v41 = *(unsigned __int16 *)(a1 + v39);
      if (!*(_WORD *)(a1 + v39))
        goto LABEL_60;
      goto LABEL_51;
    }
    if (v43 < 2)
    {
LABEL_60:
      if (v20 > 3)
        goto LABEL_64;
      v46 = ((1 << (8 * v20)) + 3) >> (8 * v20);
      v47 = 2;
      if (v46 > 0xFFF0)
        v47 = 4;
      if (v46 <= 0xF0)
LABEL_64:
        v47 = 1;
      v48 = v20 + v54 + v47;
      if (v48 <= v56)
        v48 = v56;
      if (v26 > 3)
        goto LABEL_71;
      v49 = ((1 << (8 * v26)) + 3) >> (8 * v26);
      v50 = 2;
      if (v49 > 0xFFF0)
        v50 = 4;
      if (v49 <= 0xF0)
LABEL_71:
        v50 = 1;
      v51 = v37 + v50;
      if (v51 <= v48)
        v51 = v48;
      if (v31 > v51)
        v51 = v12 + 17;
      if (v32 > v51)
        v51 = v12 + 24;
      if (v57 > v51)
        v51 = v57;
      if (v33 > v51)
        v51 = v33;
      v52 = *(unsigned __int8 *)(a1 + v51);
      if (v52 >= 0xE)
        return (v52 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v41 = *(unsigned __int8 *)(a1 + v39);
  if (!*(_BYTE *)(a1 + v39))
    goto LABEL_60;
LABEL_51:
  v44 = (v41 - 1) << v40;
  if (v39 > 3)
    v44 = 0;
  if ((_DWORD)v39)
  {
    if (v39 <= 3)
      v45 = v39;
    else
      v45 = 4;
    __asm { BR              X11 }
  }
  return (v44 + 243);
}

void sub_23AB4DDF4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  unint64_t v41;
  unint64_t v42;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  v9 = *(_DWORD *)(v5 + 80);
  v10 = v9;
  v11 = v6 + ((v4 + v9) & ~(unint64_t)v9);
  if (v11 + 1 > v7 + 2)
    v12 = v11 + 1;
  else
    v12 = v7 + 2;
  if (v8 > v12)
    v12 = v7 + 1;
  v13 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) + 16 > v12)
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
  v14 = *(unsigned __int8 *)(v3 + 80) | v10;
  v15 = ((v8 + v14) & ~v14) + v8;
  if (v15 > v12)
    v12 = v15;
  v41 = v12;
  v42 = v7 + 2;
  v16 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v17 = *(_DWORD *)(v16 + 80) & 0xF8;
  v18 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v39 = (v8 + (v17 | v19 | 7)) & ~(unint64_t)(v17 | v19 | 7);
  v20 = ((((*(_QWORD *)(v18 + 64) + ((v19 + ((*(_QWORD *)(v16 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v19) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 18;
  if (v20 <= 0x39)
    v21 = 57;
  else
    v21 = v20;
  v22 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v23 = *(_DWORD *)(v22 + 80) & 0xF8;
  v24 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = v23 | v25 | 7;
  v27 = ((((*(_QWORD *)(v24 + 64) + ((v25 + ((*(_QWORD *)(v22 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v25) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 18;
  if (v27 <= 0x39)
    v27 = 57;
  if (v21 > 3)
    goto LABEL_22;
  v28 = ((1 << (8 * v21)) + 3) >> (8 * v21);
  v29 = 4;
  if (v28 <= 0xFFF0)
    v29 = 2;
  if (v28 <= 0xF0)
LABEL_22:
    v29 = 1;
  v30 = v21 + v39 + v29;
  if (v30 <= v41)
    v30 = v41;
  if (v27 > 3)
    goto LABEL_29;
  v31 = ((1 << (8 * v27)) + 3) >> (8 * v27);
  v32 = 2;
  if (v31 > 0xFFF0)
    v32 = 4;
  if (v31 <= 0xF0)
LABEL_29:
    v32 = 1;
  v33 = v27 + ((v8 + v26) & ~v26) + v32;
  if (v33 > v30)
    v30 = v33;
  if (v13 + 17 > v30)
    v30 = v13 + 17;
  if (v13 + 24 > v30)
    v30 = v13 + 24;
  if (v42 > v30)
    v30 = v42;
  if (((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > v30)
    v30 = ((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v34 = v30 + 1;
  if (a3 < 0xF3)
  {
    v35 = 0;
  }
  else if (v34 <= 3)
  {
    v37 = ((a3 + ~(-1 << (8 * v34)) - 242) >> (8 * v34)) + 1;
    if (HIWORD(v37))
    {
      v35 = 4u;
    }
    else if (v37 >= 0x100)
    {
      v35 = 2;
    }
    else
    {
      v35 = v37 > 1;
    }
  }
  else
  {
    v35 = 1u;
  }
  if (a2 <= 0xF2)
    __asm { BR              X16 }
  v36 = a2 - 243;
  if (v34 < 4)
  {
    if ((_DWORD)v34)
    {
      v38 = v36 & ~(-1 << (8 * v34));
      bzero(a1, v34);
      if ((_DWORD)v34 == 3)
      {
        *(_WORD *)a1 = v38;
        a1[2] = BYTE2(v38);
      }
      else if ((_DWORD)v34 == 2)
      {
        *(_WORD *)a1 = v38;
      }
      else
      {
        *a1 = v38;
      }
    }
  }
  else
  {
    bzero(a1, v34);
    *(_DWORD *)a1 = v36;
  }
  __asm { BR              X10 }
}

uint64_t sub_23AB4E33C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t result;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v51;

  v1 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4 <= v2)
    v5 = v2;
  else
    v5 = *(_QWORD *)(v3 + 64);
  v6 = v5 + 1;
  v7 = v5 + 2;
  v8 = *(_DWORD *)(v3 + 80);
  v9 = v8;
  v10 = v4 + ((v2 + v8) & ~(unint64_t)v8);
  if (v10 + 1 > v5 + 2)
    v11 = v10 + 1;
  else
    v11 = v5 + 2;
  if (v6 > v11)
    v11 = v5 + 1;
  v12 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 0xFFFFFFFFFFFFFFF8) + 16 > v11)
    v11 = (v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  v13 = *(unsigned __int8 *)(v1 + 80) | v9;
  v14 = ((v6 + v13) & ~v13) + v6;
  if (v14 > v11)
    v11 = v14;
  v51 = v11;
  v15 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v16 = *(_DWORD *)(v15 + 80) & 0xF8;
  v17 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v18 = *(unsigned __int8 *)(v17 + 80);
  v19 = (v6 + (v16 | v18 | 7)) & ~(unint64_t)(v16 | v18 | 7);
  v20 = ((((*(_QWORD *)(v17 + 64) + ((v18 + ((*(_QWORD *)(v15 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v18) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 18;
  if (v20 <= 0x39)
    v21 = 57;
  else
    v21 = v20;
  if (v21 > 3)
    goto LABEL_20;
  v22 = ((1 << (8 * v21)) + 3) >> (8 * v21);
  v23 = 2;
  if (v22 > 0xFFF0)
    v23 = 4;
  if (v22 <= 0xF0)
LABEL_20:
    v23 = 1;
  v49 = v21 + v19;
  v24 = v21 + v19 + v23;
  if (v24 <= v51)
    v25 = v51;
  else
    v25 = v24;
  v26 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v27 = *(_DWORD *)(v26 + 80) & 0xF8;
  v28 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v29 = *(unsigned __int8 *)(v28 + 80);
  v30 = (v6 + (v27 | v29 | 7)) & ~(unint64_t)(v27 | v29 | 7);
  v31 = ((((*(_QWORD *)(v28 + 64) + ((v29 + ((*(_QWORD *)(v26 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v29) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 18;
  if (v31 <= 0x39)
    v32 = 57;
  else
    v32 = v31;
  if (v32 <= 3)
    v33 = (((1 << (8 * v32)) + 3) >> (8 * v32)) + 15;
  else
    v33 = 16;
  v34 = v12 + 17;
  v35 = v12 + 24;
  v36 = ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v37 = 4;
  if (v33 < 0x10000)
    v37 = 2;
  if (v33 < 0x100)
    v38 = 1;
  else
    v38 = v37;
  v39 = v32 + v30;
  v40 = v39 + v38;
  if (v40 <= v25)
    v40 = v25;
  if (v34 > v40)
    v40 = v12 + 17;
  if (v35 > v40)
    v40 = v12 + 24;
  if (v7 > v40)
    v40 = v7;
  if (v36 > v40)
    v40 = ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  result = *(unsigned __int8 *)(a1 + v40);
  if (result >= 0xE)
  {
    if (v21 > 3)
      goto LABEL_50;
    v42 = ((1 << (8 * v21)) + 3) >> (8 * v21);
    v43 = 2;
    if (v42 > 0xFFF0)
      v43 = 4;
    if (v42 <= 0xF0)
LABEL_50:
      v43 = 1;
    v44 = v49 + v43;
    if (v44 <= v51)
      v44 = v51;
    if (v32 > 3)
      goto LABEL_57;
    v45 = ((1 << (8 * v32)) + 3) >> (8 * v32);
    v46 = 2;
    if (v45 > 0xFFF0)
      v46 = 4;
    if (v45 <= 0xF0)
LABEL_57:
      v46 = 1;
    v47 = v39 + v46;
    if (v47 <= v44)
      v47 = v44;
    if (v34 <= v47)
      v34 = v47;
    if (v35 <= v34)
      v35 = v34;
    if (v7 > v35)
      v35 = v7;
    if (v36 <= v35)
      LODWORD(v36) = v35;
    if (v36 <= 3)
      v48 = v36;
    else
      v48 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_23AB4E79C(_BYTE *a1, unsigned int a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  size_t v71;
  unsigned int v72;
  uint64_t v73;
  size_t v74;
  size_t v75;
  int v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unint64_t v81;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  v9 = *(_DWORD *)(v5 + 80);
  v10 = v9;
  v11 = v6 + ((v4 + v9) & ~(unint64_t)v9);
  v81 = v7 + 2;
  if (v11 + 1 > v7 + 2)
    v12 = v11 + 1;
  else
    v12 = v7 + 2;
  if (v8 > v12)
    v12 = v7 + 1;
  v13 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) + 16 > v12)
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
  v14 = *(unsigned __int8 *)(v3 + 80) | v10;
  v15 = ((v8 + v14) & ~v14) + v8;
  if (v15 > v12)
    v12 = v15;
  v78 = v12;
  v16 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v17 = *(_DWORD *)(v16 + 80) & 0xF8;
  v18 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = (v8 + (v17 | v19 | 7)) & ~(unint64_t)(v17 | v19 | 7);
  v21 = ((((*(_QWORD *)(v18 + 64) + ((v19 + ((*(_QWORD *)(v16 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v19) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 18;
  if (v21 <= 0x39)
    v22 = 57;
  else
    v22 = v21;
  v80 = a2;
  if (a2 > 0xD)
  {
    if (v22 > 3)
      goto LABEL_50;
    v38 = ((1 << (8 * v22)) + 3) >> (8 * v22);
    v39 = 2;
    if (v38 > 0xFFF0)
      v39 = 4;
    if (v38 <= 0xF0)
LABEL_50:
      v39 = 1;
    v40 = v78;
    v79 = v22 + v20;
    v41 = v22 + v20 + v39;
    if (v41 <= v40)
      v42 = v40;
    else
      v42 = v41;
    v43 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v44 = *(_DWORD *)(v43 + 80) & 0xF8;
    v45 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
    v46 = *(unsigned __int8 *)(v45 + 80);
    v47 = (v8 + (v44 | v46 | 7)) & ~(unint64_t)(v44 | v46 | 7);
    v48 = ((((*(_QWORD *)(v45 + 64) + ((v46 + ((*(_QWORD *)(v43 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v46) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 18;
    v49 = 57;
    if (v48 > 0x39)
      v49 = v48;
    v50 = 8 * v49;
    if (v49 > 3)
      goto LABEL_60;
    v51 = ((1 << v50) + 3) >> v50;
    v52 = 2;
    if (v51 > 0xFFF0)
      v52 = 4;
    if (v51 <= 0xF0)
LABEL_60:
      v52 = 1;
    v77 = 8 * v22;
    v53 = v49 + v47;
    v54 = v53 + v52;
    if (v54 <= v42)
      v55 = v42;
    else
      v55 = v54;
    v56 = v13 + 17;
    if (v13 + 17 <= v55)
      v57 = v55;
    else
      v57 = v13 + 17;
    v58 = v13 + 24;
    if (v13 + 24 > v57)
      v57 = v13 + 24;
    if (v81 <= v57)
      v59 = v57;
    else
      v59 = v81;
    v60 = ((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v60 > v59)
      LODWORD(v59) = ((v13 + 23) & 0xFFFFFFF8) + 8;
    v61 = v59 > 3;
    v62 = ((v80 - 14) >> (8 * v59)) + 14;
    if (v61)
      LOBYTE(v62) = 14;
    if (v22 > 3)
      goto LABEL_80;
    v63 = ((1 << v77) + 3) >> v77;
    v64 = 2;
    if (v63 > 0xFFF0)
      v64 = 4;
    if (v63 <= 0xF0)
LABEL_80:
      v64 = 1;
    v65 = v79 + v64;
    if (v65 <= v40)
      v65 = v40;
    if (v49 > 3)
      goto LABEL_87;
    v66 = ((1 << v50) + 3) >> v50;
    v67 = 2;
    if (v66 > 0xFFF0)
      v67 = 4;
    if (v66 <= 0xF0)
LABEL_87:
      v67 = 1;
    v68 = v53 + v67;
    if (v68 > v65)
      v65 = v68;
    if (v56 > v65)
      v65 = v13 + 17;
    if (v58 > v65)
      v65 = v13 + 24;
    if (v81 > v65)
      v65 = v81;
    if (v60 > v65)
      v65 = ((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    a1[v65] = v62;
    if (v22 > 3)
      goto LABEL_102;
    v69 = ((1 << v77) + 3) >> v77;
    v70 = 2;
    if (v69 > 0xFFF0)
      v70 = 4;
    if (v69 <= 0xF0)
LABEL_102:
      v70 = 1;
    v71 = v79 + v70;
    if (v71 <= v40)
      v71 = v40;
    if (v49 > 3)
      goto LABEL_109;
    v72 = ((1 << v50) + 3) >> v50;
    v73 = 2;
    if (v72 > 0xFFF0)
      v73 = 4;
    if (v72 <= 0xF0)
LABEL_109:
      v73 = 1;
    v74 = v53 + v73;
    if (v74 <= v71)
      v74 = v71;
    if (v56 > v74)
      v74 = v13 + 17;
    if (v58 > v74)
      v74 = v13 + 24;
    if (v81 > v74)
      v74 = v81;
    if (v60 <= v74)
      v75 = v74;
    else
      v75 = ((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v75 >= 4)
      v76 = 4;
    else
      v76 = v75;
    bzero(a1, v75);
    __asm { BR              X10 }
  }
  if (v22 > 3)
    goto LABEL_21;
  v23 = ((1 << (8 * v22)) + 3) >> (8 * v22);
  v24 = 2;
  if (v23 > 0xFFF0)
    v24 = 4;
  if (v23 <= 0xF0)
LABEL_21:
    v24 = 1;
  v25 = v22 + v20 + v24;
  if (v25 <= v78)
    v26 = v78;
  else
    v26 = v25;
  v27 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v28 = *(_DWORD *)(v27 + 80) & 0xF8;
  result = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(result - 8);
  v31 = *(unsigned __int8 *)(v30 + 80);
  v32 = (v8 + (v28 | v31 | 7)) & ~(unint64_t)(v28 | v31 | 7);
  v33 = ((((*(_QWORD *)(v30 + 64) + ((v31 + ((*(_QWORD *)(v27 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v31) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 18;
  if (v33 <= 0x39)
    v33 = 57;
  if (v33 <= 3)
    v34 = (((1 << (8 * v33)) + 3) >> (8 * v33)) + 15;
  else
    v34 = 16;
  v35 = 4;
  if (v34 < 0x10000)
    v35 = 2;
  if (v34 < 0x100)
    v36 = 1;
  else
    v36 = v35;
  v37 = v33 + v32 + v36;
  if (v37 <= v26)
    v37 = v26;
  if (v13 + 17 > v37)
    v37 = v13 + 17;
  if (v13 + 24 > v37)
    v37 = v13 + 24;
  if (v81 > v37)
    v37 = v81;
  if (((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > v37)
    v37 = ((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  a1[v37] = a2;
  return result;
}

void type metadata accessor for ReconciliationMutation()
{
  JUMPOUT(0x23B861318);
}

uint64_t type metadata accessor for ReconciliationSideMutation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReconciliationSideMutation);
}

uint64_t sub_23AB4EE50()
{
  return swift_allocateGenericValueMetadata();
}

void sub_23AB4EE58()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for FileItemVersion();
}

char *sub_23AB4EFF4(char *a1, char *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  char *v19;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  char *v46;
  void *v47;
  char v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  __int128 v52;
  unsigned int v53;
  char *v54;
  char *v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t v60;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64) + 7;
  v11 = (((v10 + ((v9 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v11 + 18 <= 0x39)
    v12 = 57;
  else
    v12 = v11 + 18;
  if (v12 > 3)
    goto LABEL_8;
  v13 = ((1 << (8 * v12)) + 3) >> (8 * v12);
  v14 = 2;
  if (v13 > 0xFFF0)
    v14 = 4;
  if (v13 <= 0xF0)
LABEL_8:
    v14 = 1;
  v15 = v14 + v12;
  v16 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v15 > 0x18 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v16 > 7)
  {
    v19 = *(char **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = &v19[((v16 | 7) + 16) & ~(unint64_t)(v16 | 7)];
    swift_retain();
    return a1;
  }
  if (v12 > 3)
    goto LABEL_22;
  v21 = ((1 << (8 * v12)) + 3) >> (8 * v12);
  if (v21 <= 0xFFF0)
  {
    if (v21 > 0xF0)
    {
      v22 = *(unsigned __int16 *)&a2[v12];
      if (v22 < 0xF)
        goto LABEL_31;
      goto LABEL_27;
    }
LABEL_22:
    v22 = a2[v12];
    if (v22 < 0xF)
      goto LABEL_31;
LABEL_27:
    if (v12 <= 3)
      v23 = v12;
    else
      v23 = 4;
    __asm { BR              X13 }
  }
  v22 = *(_DWORD *)&a2[v12];
  if (v22 >= 0xF)
    goto LABEL_27;
LABEL_31:
  switch(v22)
  {
    case 0u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      if (v12 <= 3)
      {
        v24 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v24 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 0;
          return a1;
        }
        if (v24 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 0;
          return a1;
        }
      }
      a1[v12] = 0;
      break;
    case 1u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      if (v12 <= 3)
      {
        v27 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v27 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 1;
          return a1;
        }
        if (v27 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 1;
          return a1;
        }
      }
      a1[v12] = 1;
      break;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (v12 <= 3)
      {
        v28 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v28 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 2;
          return a1;
        }
        if (v28 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 2;
          return a1;
        }
      }
      a1[v12] = 2;
      break;
    case 3u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v29 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v29 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 3;
          return a1;
        }
        if (v29 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 3;
          return a1;
        }
      }
      a1[v12] = 3;
      break;
    case 4u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v30 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v30 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 4;
          return a1;
        }
        if (v30 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 4;
          return a1;
        }
      }
      a1[v12] = 4;
      break;
    case 5u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v31 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v31 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 5;
          return a1;
        }
        if (v31 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 5;
          return a1;
        }
      }
      a1[v12] = 5;
      break;
    case 6u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v32 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v32 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 6;
          return a1;
        }
        if (v32 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 6;
          return a1;
        }
      }
      a1[v12] = 6;
      break;
    case 7u:
      v60 = v11 + 16;
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      v33 = (_QWORD *)((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      v34 = (_QWORD *)((unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      *v33 = *v34;
      v35 = ((unint64_t)v33 + v9 + 8) & ~v9;
      v36 = ((unint64_t)v34 + v9 + 8) & ~v9;
      v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
      swift_bridgeObjectRetain();
      v37(v35, v36, v7);
      v38 = (_QWORD *)((v10 + v35) & 0xFFFFFFFFFFFFF8);
      v39 = (_QWORD *)((v10 + v36) & 0xFFFFFFFFFFFFF8);
      *v38 = *v39;
      v40 = (_QWORD *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8);
      v41 = (_QWORD *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v40 = *v41;
      v40[1] = v41[1];
      v42 = &a1[v60];
      *v42 = a2[v60];
      v42[1] = a2[v60 + 1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v12 <= 3)
      {
        v43 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v43 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 7;
          return a1;
        }
        if (v43 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 7;
          return a1;
        }
      }
      a1[v12] = 7;
      break;
    case 8u:
      v54 = *(char **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v55 = v54;
      if (v12 <= 3)
      {
        v56 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v56 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 8;
          return a1;
        }
        if (v56 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 8;
          return a1;
        }
      }
      a1[v12] = 8;
      break;
    case 9u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v44 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v44 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 9;
          return a1;
        }
        if (v44 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 9;
          return a1;
        }
      }
      a1[v12] = 9;
      break;
    case 0xAu:
      *(_WORD *)a1 = *(_WORD *)a2;
      if (v12 <= 3)
      {
        v45 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v45 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 10;
          return a1;
        }
        if (v45 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 10;
          return a1;
        }
      }
      a1[v12] = 10;
      break;
    case 0xBu:
      v46 = *(char **)a2;
      v47 = (void *)*((_QWORD *)a2 + 1);
      v48 = a2[16];
      sub_23AAAE478(v46, v47, v48);
      *(_QWORD *)a1 = v46;
      *((_QWORD *)a1 + 1) = v47;
      a1[16] = v48;
      if (v12 <= 3)
      {
        v49 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v49 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 11;
          return a1;
        }
        if (v49 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 11;
          return a1;
        }
      }
      a1[v12] = 11;
      break;
    case 0xCu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      if (v12 <= 3)
      {
        v50 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v50 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 12;
          return a1;
        }
        if (v50 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 12;
          return a1;
        }
      }
      a1[v12] = 12;
      break;
    case 0xDu:
      v51 = *((_QWORD *)a2 + 2);
      if (v51 >> 60 == 11)
      {
        v52 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v52;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      }
      else
      {
        v57 = (uint64_t *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        if (v51 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 8) = *(_OWORD *)v57;
        }
        else
        {
          v58 = *v57;
          sub_23AAAE668(*v57, v51);
          *((_QWORD *)a1 + 1) = v58;
          *((_QWORD *)a1 + 2) = v51;
        }
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        a1[40] = a2[40];
      }
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      a1[56] = a2[56];
      if (v12 <= 3)
      {
        v59 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v59 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 13;
          return a1;
        }
        if (v59 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 13;
          return a1;
        }
      }
      a1[v12] = 13;
      break;
    case 0xEu:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v53 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v53 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 14;
          return a1;
        }
        if (v53 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 14;
          return a1;
        }
      }
      a1[v12] = 14;
      break;
    default:
      if (v12 > 3)
        goto LABEL_40;
      v25 = ((1 << (8 * v12)) + 3) >> (8 * v12);
      v26 = 2;
      if (v25 > 0xFFF0)
        v26 = 4;
      if (v25 <= 0xF0)
LABEL_40:
        v26 = 1;
      memcpy(a1, a2, v26 + v12);
      break;
  }
  return a1;
}

void sub_23AB4F95C(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((((*(_QWORD *)(v6 + 64) + 7 + ((v7 + ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 18;
  if (v8 <= 0x39)
    v8 = 57;
  if (v8 > 3)
    goto LABEL_4;
  v10 = ((1 << (8 * v8)) + 3) >> (8 * v8);
  if (v10 > 0xFFF0)
  {
    v9 = *(_DWORD *)(a1 + v8);
  }
  else
  {
    if (v10 <= 0xF0)
    {
LABEL_4:
      v9 = *(unsigned __int8 *)(a1 + v8);
      goto LABEL_9;
    }
    v9 = *(unsigned __int16 *)(a1 + v8);
  }
LABEL_9:
  if (v9 >= 0xF)
  {
    if (v8 <= 3)
      v11 = v8;
    else
      v11 = 4;
    __asm { BR              X13 }
  }
  switch(v9)
  {
    case 7u:
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((((a1 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 8u:

      break;
    case 0xBu:
      sub_23AAAEE10(*(void **)a1, *(id *)(a1 + 8), *(_BYTE *)(a1 + 16));
      break;
    case 0xDu:
      v12 = *(_QWORD *)(a1 + 16);
      if (v12 >> 60 != 11 && v12 >> 60 != 15)
        sub_23AAAE53C(*(_QWORD *)(a1 + 8), v12);
      break;
    default:
      return;
  }
}

char *sub_23AB4FBF8(char *a1, char *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  __int16 v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  void *v39;
  void *v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  __int128 v45;
  unsigned int v46;
  void *v47;
  id v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v54;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64) + 7;
  v11 = (((v10 + ((v9 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v11 + 18 <= 0x39)
    v12 = 57;
  else
    v12 = v11 + 18;
  if (v12 > 3)
    goto LABEL_7;
  v13 = ((1 << (8 * v12)) + 3) >> (8 * v12);
  if (v13 <= 0xFFF0)
  {
    if (v13 > 0xF0)
    {
      v14 = *(unsigned __int16 *)&a2[v12];
      if (v14 < 0xF)
        goto LABEL_16;
      goto LABEL_12;
    }
LABEL_7:
    v14 = a2[v12];
    if (v14 < 0xF)
      goto LABEL_16;
LABEL_12:
    if (v12 <= 3)
      v15 = v12;
    else
      v15 = 4;
    __asm { BR              X13 }
  }
  v14 = *(_DWORD *)&a2[v12];
  if (v14 >= 0xF)
    goto LABEL_12;
LABEL_16:
  switch(v14)
  {
    case 0u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      if (v12 <= 3)
      {
        v16 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v16 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 0;
          return a1;
        }
        if (v16 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 0;
          return a1;
        }
      }
      a1[v12] = 0;
      break;
    case 1u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      if (v12 <= 3)
      {
        v19 = 1;
        v20 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v20 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 1;
          return a1;
        }
        if (v20 > 0xF0)
          goto LABEL_118;
      }
      a1[v12] = 1;
      break;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (v12 <= 3)
      {
        v21 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v21 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 2;
          return a1;
        }
        if (v21 > 0xF0)
        {
          v19 = 2;
          goto LABEL_118;
        }
      }
      a1[v12] = 2;
      break;
    case 3u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v22 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v22 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 3;
          return a1;
        }
        if (v22 > 0xF0)
        {
          v19 = 3;
          goto LABEL_118;
        }
      }
      a1[v12] = 3;
      break;
    case 4u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v23 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v23 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 4;
          return a1;
        }
        if (v23 > 0xF0)
        {
          v19 = 4;
          goto LABEL_118;
        }
      }
      a1[v12] = 4;
      break;
    case 5u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v24 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v24 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 5;
          return a1;
        }
        if (v24 > 0xF0)
        {
          v19 = 5;
          goto LABEL_118;
        }
      }
      a1[v12] = 5;
      break;
    case 6u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v25 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v25 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 6;
          return a1;
        }
        if (v25 > 0xF0)
        {
          v19 = 6;
          goto LABEL_118;
        }
      }
      a1[v12] = 6;
      break;
    case 7u:
      v54 = v11 + 16;
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      v26 = (_QWORD *)((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      v27 = (_QWORD *)((unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      *v26 = *v27;
      v28 = ((unint64_t)v26 + v9 + 8) & ~v9;
      v29 = ((unint64_t)v27 + v9 + 8) & ~v9;
      v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
      swift_bridgeObjectRetain();
      v30(v28, v29, v7);
      v31 = (_QWORD *)((v10 + v28) & 0xFFFFFFFFFFFFF8);
      v32 = (_QWORD *)((v10 + v29) & 0xFFFFFFFFFFFFF8);
      *v31 = *v32;
      v33 = (_QWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
      v34 = (_QWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v33 = *v34;
      v33[1] = v34[1];
      v35 = &a1[v54];
      *v35 = a2[v54];
      v35[1] = a2[v54 + 1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v12 <= 3)
      {
        v36 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v36 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 7;
          return a1;
        }
        if (v36 > 0xF0)
        {
          v19 = 7;
          goto LABEL_118;
        }
      }
      a1[v12] = 7;
      break;
    case 8u:
      v47 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v48 = v47;
      if (v12 <= 3)
      {
        v49 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v49 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 8;
          return a1;
        }
        if (v49 > 0xF0)
        {
          v19 = 8;
          goto LABEL_118;
        }
      }
      a1[v12] = 8;
      break;
    case 9u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v37 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v37 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 9;
          return a1;
        }
        if (v37 > 0xF0)
        {
          v19 = 9;
          goto LABEL_118;
        }
      }
      a1[v12] = 9;
      break;
    case 0xAu:
      *(_WORD *)a1 = *(_WORD *)a2;
      if (v12 <= 3)
      {
        v38 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v38 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 10;
          return a1;
        }
        if (v38 > 0xF0)
        {
          v19 = 10;
          goto LABEL_118;
        }
      }
      a1[v12] = 10;
      break;
    case 0xBu:
      v39 = *(void **)a2;
      v40 = (void *)*((_QWORD *)a2 + 1);
      v41 = a2[16];
      sub_23AAAE478(v39, v40, v41);
      *(_QWORD *)a1 = v39;
      *((_QWORD *)a1 + 1) = v40;
      a1[16] = v41;
      if (v12 <= 3)
      {
        v42 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v42 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 11;
          return a1;
        }
        if (v42 > 0xF0)
        {
          v19 = 11;
          goto LABEL_118;
        }
      }
      a1[v12] = 11;
      break;
    case 0xCu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      if (v12 <= 3)
      {
        v43 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v43 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 12;
          return a1;
        }
        if (v43 > 0xF0)
        {
          v19 = 12;
          goto LABEL_118;
        }
      }
      a1[v12] = 12;
      break;
    case 0xDu:
      v44 = *((_QWORD *)a2 + 2);
      if (v44 >> 60 == 11)
      {
        v45 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v45;
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      }
      else
      {
        v50 = (uint64_t *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        if (v44 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 8) = *(_OWORD *)v50;
        }
        else
        {
          v51 = *v50;
          sub_23AAAE668(*v50, v44);
          *((_QWORD *)a1 + 1) = v51;
          *((_QWORD *)a1 + 2) = v44;
        }
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        a1[40] = a2[40];
      }
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      a1[56] = a2[56];
      if (v12 <= 3)
      {
        v52 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v52 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 13;
          return a1;
        }
        if (v52 > 0xF0)
        {
          v19 = 13;
          goto LABEL_118;
        }
      }
      a1[v12] = 13;
      break;
    case 0xEu:
      *a1 = *a2;
      if (v12 > 3)
        goto LABEL_76;
      v46 = ((1 << (8 * v12)) + 3) >> (8 * v12);
      if (v46 > 0xFFF0)
      {
        *(_DWORD *)&a1[v12] = 14;
        return a1;
      }
      if (v46 > 0xF0)
      {
        v19 = 14;
LABEL_118:
        *(_WORD *)&a1[v12] = v19;
      }
      else
      {
LABEL_76:
        a1[v12] = 14;
      }
      break;
    default:
      if (v12 > 3)
        goto LABEL_25;
      v17 = ((1 << (8 * v12)) + 3) >> (8 * v12);
      v18 = 2;
      if (v17 > 0xFFF0)
        v18 = 4;
      if (v17 <= 0xF0)
LABEL_25:
        v18 = 1;
      memcpy(a1, a2, v18 + v12);
      break;
  }
  return a1;
}

id *sub_23AB50488(id *a1, id *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  __int16 v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _BYTE *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  id v51;
  id v52;
  char v53;
  unsigned int v54;
  __int128 v55;
  unsigned int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  unsigned int v60;
  id v61;
  id v62;
  unsigned int v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  __int128 v67;
  unsigned int v68;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;

  if (a1 == a2)
    return a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v73 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v73 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64) + 7;
  v70 = (((v9 + ((v8 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v70 + 18 <= 0x39)
    v10 = 57;
  else
    v10 = v70 + 18;
  v11 = 8 * v10;
  if (v10 > 3)
    goto LABEL_8;
  v12 = ((1 << v11) + 3) >> v11;
  if (v12 <= 0xFFF0)
  {
    if (v12 > 0xF0)
    {
      v13 = *(unsigned __int16 *)((char *)a1 + v10);
      if (v13 < 0xF)
        goto LABEL_17;
      goto LABEL_13;
    }
LABEL_8:
    v13 = *((unsigned __int8 *)a1 + v10);
    if (v13 < 0xF)
      goto LABEL_17;
LABEL_13:
    if (v10 <= 3)
      v14 = v10;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  v13 = *(_DWORD *)((char *)a1 + v10);
  if (v13 >= 0xF)
    goto LABEL_13;
LABEL_17:
  v72 = ~v8;
  switch(v13)
  {
    case 7u:
      (*(void (**)(id *, uint64_t))(v73 + 8))(a1, AssociatedTypeWitness);
      v15 = (uint64_t)a1 + v5 + 7;
      v16 = v5;
      v17 = AssociatedTypeWitness;
      v18 = v9;
      v19 = v6;
      v20 = v15 & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))((v20 + v8 + 8) & v72, v19);
      swift_bridgeObjectRelease();
      v6 = v19;
      v9 = v18;
      AssociatedTypeWitness = v17;
      v5 = v16;
      v11 = 8 * v10;
      swift_bridgeObjectRelease();
      break;
    case 8u:

      break;
    case 0xBu:
      sub_23AAAEE10(*a1, a1[1], *((_BYTE *)a1 + 16));
      break;
    case 0xDu:
      v21 = (unint64_t)a1[2];
      if (v21 >> 60 != 11 && v21 >> 60 != 15)
        sub_23AAAE53C((uint64_t)a1[1], v21);
      break;
    default:
      break;
  }
  if (v10 > 3)
    goto LABEL_27;
  v22 = ((1 << v11) + 3) >> v11;
  if (v22 <= 0xFFF0)
  {
    if (v22 > 0xF0)
    {
      v23 = *(unsigned __int16 *)((char *)a2 + v10);
      if (v23 < 0xF)
        goto LABEL_36;
      goto LABEL_32;
    }
LABEL_27:
    v23 = *((unsigned __int8 *)a2 + v10);
    if (v23 < 0xF)
      goto LABEL_36;
LABEL_32:
    if (v10 <= 3)
      v24 = v10;
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  v23 = *(_DWORD *)((char *)a2 + v10);
  if (v23 >= 0xF)
    goto LABEL_32;
LABEL_36:
  switch(v23)
  {
    case 0u:
      v25 = *(_OWORD *)a2;
      a1[2] = a2[2];
      *(_OWORD *)a1 = v25;
      if (v10 <= 3)
      {
        v26 = ((1 << v11) + 3) >> v11;
        if (v26 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 0;
          return a1;
        }
        if (v26 > 0xF0)
        {
          *(_WORD *)((char *)a1 + v10) = 0;
          return a1;
        }
      }
      *((_BYTE *)a1 + v10) = 0;
      break;
    case 1u:
      *a1 = *a2;
      if (v10 <= 3)
      {
        v29 = 1;
        v30 = ((1 << v11) + 3) >> v11;
        if (v30 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 1;
          return a1;
        }
        if (v30 > 0xF0)
          goto LABEL_138;
      }
      *((_BYTE *)a1 + v10) = 1;
      break;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (v10 <= 3)
      {
        v31 = ((1 << v11) + 3) >> v11;
        if (v31 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 2;
          return a1;
        }
        if (v31 > 0xF0)
        {
          v29 = 2;
          goto LABEL_138;
        }
      }
      *((_BYTE *)a1 + v10) = 2;
      break;
    case 3u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      if (v10 <= 3)
      {
        v32 = ((1 << v11) + 3) >> v11;
        if (v32 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 3;
          return a1;
        }
        if (v32 > 0xF0)
        {
          v29 = 3;
          goto LABEL_138;
        }
      }
      *((_BYTE *)a1 + v10) = 3;
      break;
    case 4u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      if (v10 <= 3)
      {
        v33 = ((1 << v11) + 3) >> v11;
        if (v33 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 4;
          return a1;
        }
        if (v33 > 0xF0)
        {
          v29 = 4;
          goto LABEL_138;
        }
      }
      *((_BYTE *)a1 + v10) = 4;
      break;
    case 5u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      if (v10 <= 3)
      {
        v34 = ((1 << v11) + 3) >> v11;
        if (v34 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 5;
          return a1;
        }
        if (v34 > 0xF0)
        {
          v29 = 5;
          goto LABEL_138;
        }
      }
      *((_BYTE *)a1 + v10) = 5;
      break;
    case 6u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      if (v10 <= 3)
      {
        v35 = ((1 << v11) + 3) >> v11;
        if (v35 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 6;
          return a1;
        }
        if (v35 > 0xF0)
        {
          v29 = 6;
          goto LABEL_138;
        }
      }
      *((_BYTE *)a1 + v10) = 6;
      break;
    case 7u:
      v71 = v70 + 16;
      (*(void (**)(id *, id *, uint64_t))(v73 + 16))(a1, a2, AssociatedTypeWitness);
      v36 = (_QWORD *)(((unint64_t)a1 + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
      v37 = (_QWORD *)(((unint64_t)a2 + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
      *v36 = *v37;
      v38 = v9;
      v39 = ((unint64_t)v36 + v8 + 8) & v72;
      v40 = v6;
      v41 = ((unint64_t)v37 + v8 + 8) & v72;
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      swift_bridgeObjectRetain();
      v42(v39, v41, v40);
      v43 = (_QWORD *)((v38 + v39) & 0xFFFFFFFFFFFFF8);
      v44 = (_QWORD *)((v38 + v41) & 0xFFFFFFFFFFFFF8);
      *v43 = *v44;
      v45 = (_QWORD *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
      v46 = (_QWORD *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v45 = *v46;
      v45[1] = v46[1];
      v47 = (char *)a1 + v71;
      *v47 = *((_BYTE *)a2 + v71);
      v47[1] = *((_BYTE *)a2 + v71 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v10 <= 3)
      {
        v48 = ((1 << v11) + 3) >> v11;
        if (v48 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 7;
          return a1;
        }
        if (v48 > 0xF0)
        {
          v29 = 7;
          goto LABEL_138;
        }
      }
      *((_BYTE *)a1 + v10) = 7;
      break;
    case 8u:
      v61 = *a2;
      *a1 = *a2;
      v62 = v61;
      if (v10 <= 3)
      {
        v63 = ((1 << v11) + 3) >> v11;
        if (v63 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 8;
          return a1;
        }
        if (v63 > 0xF0)
        {
          v29 = 8;
          goto LABEL_138;
        }
      }
      *((_BYTE *)a1 + v10) = 8;
      break;
    case 9u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      if (v10 <= 3)
      {
        v49 = ((1 << v11) + 3) >> v11;
        if (v49 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 9;
          return a1;
        }
        if (v49 > 0xF0)
        {
          v29 = 9;
          goto LABEL_138;
        }
      }
      *((_BYTE *)a1 + v10) = 9;
      break;
    case 0xAu:
      *(_WORD *)a1 = *(_WORD *)a2;
      if (v10 <= 3)
      {
        v50 = ((1 << v11) + 3) >> v11;
        if (v50 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 10;
          return a1;
        }
        if (v50 > 0xF0)
        {
          v29 = 10;
          goto LABEL_138;
        }
      }
      *((_BYTE *)a1 + v10) = 10;
      break;
    case 0xBu:
      v51 = *a2;
      v52 = a2[1];
      v53 = *((_BYTE *)a2 + 16);
      sub_23AAAE478(v51, v52, v53);
      *a1 = v51;
      a1[1] = v52;
      *((_BYTE *)a1 + 16) = v53;
      if (v10 <= 3)
      {
        v54 = ((1 << v11) + 3) >> v11;
        if (v54 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 11;
          return a1;
        }
        if (v54 > 0xF0)
        {
          v29 = 11;
          goto LABEL_138;
        }
      }
      *((_BYTE *)a1 + v10) = 11;
      break;
    case 0xCu:
      v55 = *(_OWORD *)a2;
      a1[2] = a2[2];
      *(_OWORD *)a1 = v55;
      if (v10 <= 3)
      {
        v56 = ((1 << v11) + 3) >> v11;
        if (v56 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 12;
          return a1;
        }
        if (v56 > 0xF0)
        {
          v29 = 12;
          goto LABEL_138;
        }
      }
      *((_BYTE *)a1 + v10) = 12;
      break;
    case 0xDu:
      if ((unint64_t)a2[2] >> 60 == 11)
      {
        v57 = *(_OWORD *)a2;
        v58 = *((_OWORD *)a2 + 1);
        v59 = *((_OWORD *)a2 + 2);
        a1[6] = a2[6];
        *((_OWORD *)a1 + 1) = v58;
        *((_OWORD *)a1 + 2) = v59;
        *(_OWORD *)a1 = v57;
      }
      else
      {
        *a1 = *a2;
        v64 = (uint64_t *)(a2 + 1);
        v65 = (unint64_t)a2[2];
        if (v65 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 1) = *(_OWORD *)v64;
        }
        else
        {
          v66 = *v64;
          sub_23AAAE668(*v64, (unint64_t)a2[2]);
          a1[1] = (id)v66;
          a1[2] = (id)v65;
        }
        v67 = *(_OWORD *)(a2 + 3);
        *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
        *(_OWORD *)(a1 + 3) = v67;
        a1[6] = a2[6];
      }
      *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
      if (v10 <= 3)
      {
        v68 = ((1 << v11) + 3) >> v11;
        if (v68 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 13;
          return a1;
        }
        if (v68 > 0xF0)
        {
          v29 = 13;
          goto LABEL_138;
        }
      }
      *((_BYTE *)a1 + v10) = 13;
      break;
    case 0xEu:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      if (v10 > 3)
        goto LABEL_96;
      v60 = ((1 << v11) + 3) >> v11;
      if (v60 > 0xFFF0)
      {
        *(_DWORD *)((char *)a1 + v10) = 14;
        return a1;
      }
      if (v60 > 0xF0)
      {
        v29 = 14;
LABEL_138:
        *(_WORD *)((char *)a1 + v10) = v29;
      }
      else
      {
LABEL_96:
        *((_BYTE *)a1 + v10) = 14;
      }
      break;
    default:
      if (v10 > 3)
        goto LABEL_45;
      v27 = ((1 << v11) + 3) >> v11;
      v28 = 2;
      if (v27 > 0xFFF0)
        v28 = 4;
      if (v27 <= 0xF0)
LABEL_45:
        v28 = 1;
      memcpy(a1, a2, v28 + v10);
      break;
  }
  return a1;
}

char *sub_23AB50EDC(char *a1, char *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  __int16 v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  char *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v43;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64) + 7;
  v11 = (((v10 + ((v9 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v11 + 18 <= 0x39)
    v12 = 57;
  else
    v12 = v11 + 18;
  if (v12 > 3)
    goto LABEL_7;
  v13 = ((1 << (8 * v12)) + 3) >> (8 * v12);
  if (v13 <= 0xFFF0)
  {
    if (v13 > 0xF0)
    {
      v14 = *(unsigned __int16 *)&a2[v12];
      if (v14 < 0xF)
        goto LABEL_16;
      goto LABEL_12;
    }
LABEL_7:
    v14 = a2[v12];
    if (v14 < 0xF)
      goto LABEL_16;
LABEL_12:
    if (v12 <= 3)
      v15 = v12;
    else
      v15 = 4;
    __asm { BR              X13 }
  }
  v14 = *(_DWORD *)&a2[v12];
  if (v14 >= 0xF)
    goto LABEL_12;
LABEL_16:
  switch(v14)
  {
    case 0u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      if (v12 <= 3)
      {
        v16 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v16 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 0;
          return a1;
        }
        if (v16 > 0xF0)
        {
          *(_WORD *)&a1[v12] = 0;
          return a1;
        }
      }
      a1[v12] = 0;
      break;
    case 1u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      if (v12 <= 3)
      {
        v19 = 1;
        v20 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v20 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 1;
          return a1;
        }
        if (v20 > 0xF0)
          goto LABEL_112;
      }
      a1[v12] = 1;
      break;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (v12 <= 3)
      {
        v21 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v21 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 2;
          return a1;
        }
        if (v21 > 0xF0)
        {
          v19 = 2;
          goto LABEL_112;
        }
      }
      a1[v12] = 2;
      break;
    case 3u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v22 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v22 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 3;
          return a1;
        }
        if (v22 > 0xF0)
        {
          v19 = 3;
          goto LABEL_112;
        }
      }
      a1[v12] = 3;
      break;
    case 4u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v23 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v23 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 4;
          return a1;
        }
        if (v23 > 0xF0)
        {
          v19 = 4;
          goto LABEL_112;
        }
      }
      a1[v12] = 4;
      break;
    case 5u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v24 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v24 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 5;
          return a1;
        }
        if (v24 > 0xF0)
        {
          v19 = 5;
          goto LABEL_112;
        }
      }
      a1[v12] = 5;
      break;
    case 6u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v25 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v25 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 6;
          return a1;
        }
        if (v25 > 0xF0)
        {
          v19 = 6;
          goto LABEL_112;
        }
      }
      a1[v12] = 6;
      break;
    case 7u:
      v43 = v11 + 16;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      v26 = (_QWORD *)((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      v27 = (_QWORD *)((unint64_t)&a2[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      *v26 = *v27;
      v28 = ((unint64_t)v26 + v9 + 8) & ~v9;
      v29 = ((unint64_t)v27 + v9 + 8) & ~v9;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v28, v29, v7);
      v30 = (_QWORD *)((v10 + v28) & 0xFFFFFFFFFFFFF8);
      v31 = (_QWORD *)((v10 + v29) & 0xFFFFFFFFFFFFF8);
      *v30 = *v31;
      *(_OWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFF8);
      v32 = &a1[v43];
      *v32 = a2[v43];
      v32[1] = a2[v43 + 1];
      if (v12 <= 3)
      {
        v33 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v33 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 7;
          return a1;
        }
        if (v33 > 0xF0)
        {
          v19 = 7;
          goto LABEL_112;
        }
      }
      a1[v12] = 7;
      break;
    case 8u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      if (v12 <= 3)
      {
        v41 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v41 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 8;
          return a1;
        }
        if (v41 > 0xF0)
        {
          v19 = 8;
          goto LABEL_112;
        }
      }
      a1[v12] = 8;
      break;
    case 9u:
      *a1 = *a2;
      if (v12 <= 3)
      {
        v34 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v34 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 9;
          return a1;
        }
        if (v34 > 0xF0)
        {
          v19 = 9;
          goto LABEL_112;
        }
      }
      a1[v12] = 9;
      break;
    case 0xAu:
      *(_WORD *)a1 = *(_WORD *)a2;
      if (v12 <= 3)
      {
        v35 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v35 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 10;
          return a1;
        }
        if (v35 > 0xF0)
        {
          v19 = 10;
          goto LABEL_112;
        }
      }
      a1[v12] = 10;
      break;
    case 0xBu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      if (v12 <= 3)
      {
        v36 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v36 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 11;
          return a1;
        }
        if (v36 > 0xF0)
        {
          v19 = 11;
          goto LABEL_112;
        }
      }
      a1[v12] = 11;
      break;
    case 0xCu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
      if (v12 <= 3)
      {
        v37 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v37 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 12;
          return a1;
        }
        if (v37 > 0xF0)
        {
          v19 = 12;
          goto LABEL_112;
        }
      }
      a1[v12] = 12;
      break;
    case 0xDu:
      v38 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v38;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      if (v12 <= 3)
      {
        v39 = ((1 << (8 * v12)) + 3) >> (8 * v12);
        if (v39 > 0xFFF0)
        {
          *(_DWORD *)&a1[v12] = 13;
          return a1;
        }
        if (v39 > 0xF0)
        {
          v19 = 13;
          goto LABEL_112;
        }
      }
      a1[v12] = 13;
      break;
    case 0xEu:
      *a1 = *a2;
      if (v12 > 3)
        goto LABEL_78;
      v40 = ((1 << (8 * v12)) + 3) >> (8 * v12);
      if (v40 > 0xFFF0)
      {
        *(_DWORD *)&a1[v12] = 14;
        return a1;
      }
      if (v40 > 0xF0)
      {
        v19 = 14;
LABEL_112:
        *(_WORD *)&a1[v12] = v19;
      }
      else
      {
LABEL_78:
        a1[v12] = 14;
      }
      break;
    default:
      if (v12 > 3)
        goto LABEL_25;
      v17 = ((1 << (8 * v12)) + 3) >> (8 * v12);
      v18 = 2;
      if (v17 > 0xFFF0)
        v18 = 4;
      if (v17 <= 0xF0)
LABEL_25:
        v18 = 1;
      memcpy(a1, a2, v18 + v12);
      break;
  }
  return a1;
}

id *sub_23AB516DC(id *a1, id *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  __int16 v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  __int128 v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;

  if (a1 == a2)
    return a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v55 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v55 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64) + 7;
  v52 = (((v9 + ((v8 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v52 + 18 <= 0x39)
    v10 = 57;
  else
    v10 = v52 + 18;
  v11 = 8 * v10;
  if (v10 > 3)
    goto LABEL_8;
  v12 = ((1 << v11) + 3) >> v11;
  if (v12 <= 0xFFF0)
  {
    if (v12 > 0xF0)
    {
      v13 = *(unsigned __int16 *)((char *)a1 + v10);
      if (v13 < 0xF)
        goto LABEL_17;
      goto LABEL_13;
    }
LABEL_8:
    v13 = *((unsigned __int8 *)a1 + v10);
    if (v13 < 0xF)
      goto LABEL_17;
LABEL_13:
    if (v10 <= 3)
      v14 = v10;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  v13 = *(_DWORD *)((char *)a1 + v10);
  if (v13 >= 0xF)
    goto LABEL_13;
LABEL_17:
  v54 = ~v8;
  switch(v13)
  {
    case 7u:
      (*(void (**)(id *, uint64_t))(v55 + 8))(a1, AssociatedTypeWitness);
      v15 = (uint64_t)a1 + v5 + 7;
      v51 = v5;
      v16 = AssociatedTypeWitness;
      v17 = v6;
      v18 = v15 & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))((v18 + v8 + 8) & v54, v17);
      swift_bridgeObjectRelease();
      v6 = v17;
      AssociatedTypeWitness = v16;
      v5 = v51;
      swift_bridgeObjectRelease();
      break;
    case 8u:

      break;
    case 0xBu:
      sub_23AAAEE10(*a1, a1[1], *((_BYTE *)a1 + 16));
      break;
    case 0xDu:
      v19 = (unint64_t)a1[2];
      if (v19 >> 60 != 11 && v19 >> 60 != 15)
        sub_23AAAE53C((uint64_t)a1[1], v19);
      break;
    default:
      break;
  }
  if (v10 > 3)
    goto LABEL_27;
  v20 = ((1 << v11) + 3) >> v11;
  if (v20 <= 0xFFF0)
  {
    if (v20 > 0xF0)
    {
      v21 = *(unsigned __int16 *)((char *)a2 + v10);
      if (v21 < 0xF)
        goto LABEL_36;
      goto LABEL_32;
    }
LABEL_27:
    v21 = *((unsigned __int8 *)a2 + v10);
    if (v21 < 0xF)
      goto LABEL_36;
LABEL_32:
    if (v10 <= 3)
      v22 = v10;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  v21 = *(_DWORD *)((char *)a2 + v10);
  if (v21 >= 0xF)
    goto LABEL_32;
LABEL_36:
  switch(v21)
  {
    case 0u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      if (v10 <= 3)
      {
        v23 = ((1 << v11) + 3) >> v11;
        if (v23 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 0;
          return a1;
        }
        if (v23 > 0xF0)
        {
          *(_WORD *)((char *)a1 + v10) = 0;
          return a1;
        }
      }
      *((_BYTE *)a1 + v10) = 0;
      break;
    case 1u:
      *a1 = *a2;
      if (v10 <= 3)
      {
        v26 = 1;
        v27 = ((1 << v11) + 3) >> v11;
        if (v27 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 1;
          return a1;
        }
        if (v27 > 0xF0)
          goto LABEL_132;
      }
      *((_BYTE *)a1 + v10) = 1;
      break;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (v10 <= 3)
      {
        v28 = ((1 << v11) + 3) >> v11;
        if (v28 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 2;
          return a1;
        }
        if (v28 > 0xF0)
        {
          v26 = 2;
          goto LABEL_132;
        }
      }
      *((_BYTE *)a1 + v10) = 2;
      break;
    case 3u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      if (v10 <= 3)
      {
        v29 = ((1 << v11) + 3) >> v11;
        if (v29 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 3;
          return a1;
        }
        if (v29 > 0xF0)
        {
          v26 = 3;
          goto LABEL_132;
        }
      }
      *((_BYTE *)a1 + v10) = 3;
      break;
    case 4u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      if (v10 <= 3)
      {
        v30 = ((1 << v11) + 3) >> v11;
        if (v30 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 4;
          return a1;
        }
        if (v30 > 0xF0)
        {
          v26 = 4;
          goto LABEL_132;
        }
      }
      *((_BYTE *)a1 + v10) = 4;
      break;
    case 5u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      if (v10 <= 3)
      {
        v31 = ((1 << v11) + 3) >> v11;
        if (v31 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 5;
          return a1;
        }
        if (v31 > 0xF0)
        {
          v26 = 5;
          goto LABEL_132;
        }
      }
      *((_BYTE *)a1 + v10) = 5;
      break;
    case 6u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      if (v10 <= 3)
      {
        v32 = ((1 << v11) + 3) >> v11;
        if (v32 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 6;
          return a1;
        }
        if (v32 > 0xF0)
        {
          v26 = 6;
          goto LABEL_132;
        }
      }
      *((_BYTE *)a1 + v10) = 6;
      break;
    case 7u:
      v53 = v52 + 16;
      (*(void (**)(id *, id *, uint64_t))(v55 + 32))(a1, a2, AssociatedTypeWitness);
      v33 = (_QWORD *)(((unint64_t)a1 + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
      v34 = (_QWORD *)(((unint64_t)a2 + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
      *v33 = *v34;
      v35 = ((unint64_t)v33 + v8 + 8) & v54;
      v36 = v6;
      v37 = ((unint64_t)v34 + v8 + 8) & v54;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v35, v37, v36);
      v38 = (_QWORD *)((v9 + v35) & 0xFFFFFFFFFFFFF8);
      v39 = (_QWORD *)((v9 + v37) & 0xFFFFFFFFFFFFF8);
      *v38 = *v39;
      *(_OWORD *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFF8);
      v40 = (char *)a1 + v53;
      *v40 = *((_BYTE *)a2 + v53);
      v40[1] = *((_BYTE *)a2 + v53 + 1);
      if (v10 <= 3)
      {
        v41 = ((1 << v11) + 3) >> v11;
        if (v41 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 7;
          return a1;
        }
        if (v41 > 0xF0)
        {
          v26 = 7;
          goto LABEL_132;
        }
      }
      *((_BYTE *)a1 + v10) = 7;
      break;
    case 8u:
      *a1 = *a2;
      if (v10 <= 3)
      {
        v49 = ((1 << v11) + 3) >> v11;
        if (v49 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 8;
          return a1;
        }
        if (v49 > 0xF0)
        {
          v26 = 8;
          goto LABEL_132;
        }
      }
      *((_BYTE *)a1 + v10) = 8;
      break;
    case 9u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      if (v10 <= 3)
      {
        v42 = ((1 << v11) + 3) >> v11;
        if (v42 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 9;
          return a1;
        }
        if (v42 > 0xF0)
        {
          v26 = 9;
          goto LABEL_132;
        }
      }
      *((_BYTE *)a1 + v10) = 9;
      break;
    case 0xAu:
      *(_WORD *)a1 = *(_WORD *)a2;
      if (v10 <= 3)
      {
        v43 = ((1 << v11) + 3) >> v11;
        if (v43 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 10;
          return a1;
        }
        if (v43 > 0xF0)
        {
          v26 = 10;
          goto LABEL_132;
        }
      }
      *((_BYTE *)a1 + v10) = 10;
      break;
    case 0xBu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      if (v10 <= 3)
      {
        v44 = ((1 << v11) + 3) >> v11;
        if (v44 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 11;
          return a1;
        }
        if (v44 > 0xF0)
        {
          v26 = 11;
          goto LABEL_132;
        }
      }
      *((_BYTE *)a1 + v10) = 11;
      break;
    case 0xCu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      if (v10 <= 3)
      {
        v45 = ((1 << v11) + 3) >> v11;
        if (v45 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 12;
          return a1;
        }
        if (v45 > 0xF0)
        {
          v26 = 12;
          goto LABEL_132;
        }
      }
      *((_BYTE *)a1 + v10) = 12;
      break;
    case 0xDu:
      v46 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v46;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      if (v10 <= 3)
      {
        v47 = ((1 << v11) + 3) >> v11;
        if (v47 > 0xFFF0)
        {
          *(_DWORD *)((char *)a1 + v10) = 13;
          return a1;
        }
        if (v47 > 0xF0)
        {
          v26 = 13;
          goto LABEL_132;
        }
      }
      *((_BYTE *)a1 + v10) = 13;
      break;
    case 0xEu:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      if (v10 > 3)
        goto LABEL_98;
      v48 = ((1 << v11) + 3) >> v11;
      if (v48 > 0xFFF0)
      {
        *(_DWORD *)((char *)a1 + v10) = 14;
        return a1;
      }
      if (v48 > 0xF0)
      {
        v26 = 14;
LABEL_132:
        *(_WORD *)((char *)a1 + v10) = v26;
      }
      else
      {
LABEL_98:
        *((_BYTE *)a1 + v10) = 14;
      }
      break;
    default:
      if (v10 > 3)
        goto LABEL_45;
      v24 = ((1 << v11) + 3) >> v11;
      v25 = 2;
      if (v24 > 0xFFF0)
        v25 = 4;
      if (v24 <= 0xF0)
LABEL_45:
        v25 = 1;
      memcpy(a1, a2, v25 + v10);
      break;
  }
  return a1;
}

uint64_t sub_23AB52078(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t AssociatedTypeWitness;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  int v22;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;

  v4 = (*(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = ((((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64)
         + ((v4 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 18;
  if (v6 <= 0x39)
    v6 = 57;
  if (v6 > 3)
  {
    v7 = 16;
LABEL_7:
    v9 = 8;
    goto LABEL_8;
  }
  v8 = ((1 << (8 * v6)) + 3) >> (8 * v6);
  if (v8 > 0xFFF0)
    goto LABEL_11;
  v7 = v8 + 15;
  if (v8 <= 0xF0)
    goto LABEL_7;
  v9 = 16;
LABEL_8:
  v10 = (1 << v9) - v7;
  if ((v10 & 0x80000000) == 0)
  {
    if (v6 > 3)
      goto LABEL_15;
LABEL_12:
    v11 = ((1 << (8 * v6)) + 3) >> (8 * v6);
    v12 = 2;
    if (v11 > 0xFFF0)
      v12 = 4;
    if (v11 > 0xF0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_11:
  v10 = 0x7FFFFFFF;
  if (v6 <= 3)
    goto LABEL_12;
LABEL_15:
  v12 = 1;
LABEL_16:
  if (!a2)
    return 0;
  if (a2 <= v10)
    goto LABEL_34;
  v13 = v12 + v6;
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v16 = ((a2 - v10 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      v15 = *(_DWORD *)(a1 + v13);
      if (!v15)
        goto LABEL_34;
      goto LABEL_27;
    }
    if (v16 > 0xFF)
    {
      v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13))
        goto LABEL_34;
      goto LABEL_27;
    }
    if (v16 < 2)
    {
LABEL_34:
      if (v10)
      {
        if (v6 <= 3)
        {
          v24 = ((1 << (8 * v6)) + 3) >> (8 * v6);
          if (v24 > 0xFFF0)
          {
            v19 = *(_DWORD *)(a1 + v6);
            v20 = ~v19;
LABEL_44:
            v27 = 0x7FFFFFFF;
LABEL_45:
            if (v27 > v20)
              return -v19;
            else
              return 0;
          }
          v22 = v24 + 15;
          if (v24 > 0xF0)
          {
            v26 = *(unsigned __int16 *)(a1 + v6);
            v19 = v26 | 0xFFFF0000;
            v20 = v26 ^ 0xFFFF;
            v21 = 16;
          }
          else
          {
            v25 = *(unsigned __int8 *)(a1 + v6);
            v19 = v25 | 0xFFFFFF00;
            v20 = v25 ^ 0xFF;
            v21 = 8;
          }
        }
        else
        {
          v18 = *(unsigned __int8 *)(a1 + v6);
          v19 = v18 | 0xFFFFFF00;
          v20 = v18 ^ 0xFF;
          v21 = 8;
          v22 = 16;
        }
        v27 = (1 << v21) - v22;
        if ((v27 & 0x80000000) == 0)
          goto LABEL_45;
        goto LABEL_44;
      }
      return 0;
    }
  }
  v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(_BYTE *)(a1 + v13))
    goto LABEL_34;
LABEL_27:
  v17 = (v15 - 1) << v14;
  if (v13 > 3)
    v17 = 0;
  if ((_DWORD)v13)
  {
    if (v13 > 3)
      LODWORD(v13) = 4;
    __asm { BR              X12 }
  }
  return v10 + v17 + 1;
}

void sub_23AB5235C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  unint64_t v8;
  char v9;
  int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  size_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;

  v6 = (*(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = ((((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64)
         + ((v6 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 18;
  if (v8 <= 0x39)
    v8 = 57;
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v13 = ((1 << v9) + 3) >> v9;
    if (v13 > 0xFFF0)
      goto LABEL_12;
    v10 = v13 + 15;
    if (v13 > 0xF0)
    {
      v11 = 16;
LABEL_6:
      v12 = (1 << v11) - v10;
      if ((v12 & 0x80000000) == 0)
      {
        if (v8 > 3)
          goto LABEL_16;
LABEL_13:
        v14 = ((1 << v9) + 3) >> v9;
        v15 = 2;
        if (v14 > 0xFFF0)
          v15 = 4;
        if (v14 > 0xF0)
        {
LABEL_17:
          v16 = v15 + v8;
          if (a3 <= v12)
          {
            v17 = 0;
          }
          else if (v16 <= 3)
          {
            v19 = ((a3 - v12 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
            if (HIWORD(v19))
            {
              v17 = 4u;
            }
            else if (v19 >= 0x100)
            {
              v17 = 2;
            }
            else
            {
              v17 = v19 > 1;
            }
          }
          else
          {
            v17 = 1u;
          }
          if (v12 < a2)
          {
            v18 = ~v12 + a2;
            if (v16 < 4)
            {
              if ((_DWORD)v16)
              {
                v20 = v18 & ~(-1 << (8 * v16));
                bzero(a1, v16);
                if ((_DWORD)v16 == 3)
                {
                  *(_WORD *)a1 = v20;
                  a1[2] = BYTE2(v20);
                }
                else if ((_DWORD)v16 == 2)
                {
                  *(_WORD *)a1 = v20;
                }
                else
                {
                  *a1 = v20;
                }
              }
            }
            else
            {
              bzero(a1, v16);
              *(_DWORD *)a1 = v18;
            }
            __asm { BR              X10 }
          }
          __asm { BR              X12 }
        }
LABEL_16:
        v15 = 1;
        goto LABEL_17;
      }
LABEL_12:
      v12 = 0x7FFFFFFF;
      if (v8 > 3)
        goto LABEL_16;
      goto LABEL_13;
    }
  }
  else
  {
    v10 = 16;
  }
  v11 = 8;
  goto LABEL_6;
}

uint64_t sub_23AB52664(uint64_t a1)
{
  unint64_t v2;
  uint64_t AssociatedTypeWitness;
  unint64_t v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;

  v2 = (*(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = ((((*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64)
         + ((v2 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 18;
  if (v4 <= 0x39)
    v4 = 57;
  if (v4 > 3)
    goto LABEL_4;
  v6 = ((1 << (8 * v4)) + 3) >> (8 * v4);
  if (v6 > 0xFFF0)
  {
    result = *(unsigned int *)(a1 + v4);
  }
  else
  {
    if (v6 <= 0xF0)
    {
LABEL_4:
      result = *(unsigned __int8 *)(a1 + v4);
      goto LABEL_9;
    }
    result = *(unsigned __int16 *)(a1 + v4);
  }
LABEL_9:
  if (result >= 0xF)
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_23AB527D0(_BYTE *a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t result;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int *v10;
  unsigned int v11;
  int v12;

  v4 = (*(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  result = swift_getAssociatedTypeWitness();
  if (((((*(_QWORD *)(*(_QWORD *)(result - 8) + 64)
         + ((v4 + *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 18 <= 0x39)
    v6 = 57;
  else
    v6 = ((((*(_QWORD *)(*(_QWORD *)(result - 8) + 64)
           + ((v4 + *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 18;
  if (a2 > 0xE)
  {
    v7 = a2 - 15;
    if (v6 < 4)
    {
      v9 = (v7 >> (8 * v6)) + 15;
      v10 = (int *)&a1[v6];
      v11 = ((1 << (8 * v6)) + 3) >> (8 * v6);
      if (v11 > 0xFFF0)
      {
        *v10 = v9;
      }
      else if (v11 > 0xF0)
      {
        *(_WORD *)v10 = v9;
      }
      else
      {
        *(_BYTE *)v10 = v9;
      }
    }
    else
    {
      a1[v6] = 15;
    }
    if (v6 <= 3)
      v12 = v6;
    else
      v12 = 4;
    bzero(a1, v6);
    __asm { BR              X10 }
  }
  if (v6 > 3)
    goto LABEL_6;
  v8 = ((1 << (8 * v6)) + 3) >> (8 * v6);
  if (v8 > 0xFFF0)
  {
    *(_DWORD *)&a1[v6] = a2;
  }
  else
  {
    if (v8 <= 0xF0)
    {
LABEL_6:
      a1[v6] = a2;
      return result;
    }
    *(_WORD *)&a1[v6] = a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UpdateSyncPauseOperation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateSyncPauseOperation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_23AB52A30(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_23AB52A38(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for UpdateSyncPauseOperation()
{
  return &type metadata for UpdateSyncPauseOperation;
}

void sub_23AB52A54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = (char *)sub_23AB52AE4 + 4 * word_23B1CEF6C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23AB52AE4()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t AssociatedConformanceWitness;
  uint64_t v4;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v4 = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v0 - 112) = AssociatedTypeWitness;
  *(_QWORD *)(v0 - 104) = v2;
  *(_QWORD *)(v0 - 96) = AssociatedConformanceWitness;
  *(_QWORD *)(v0 - 88) = v4;
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23AB52B8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

void sub_23AB53094(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t TupleTypeMetadata3;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v14 = a2;
  MEMORY[0x24BDAC7A8](a1);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v4;
  (*(void (**)(char *))(v4 + 16))(v3);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = swift_getAssociatedTypeWitness();
  if (EnumCaseMultiPayload == 1)
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v14, &v3[*(int *)(TupleTypeMetadata3 + 48)], v7);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v10 = swift_getAssociatedConformanceWitness();
    v15 = AssociatedTypeWitness;
    v16 = v7;
    v17 = AssociatedConformanceWitness;
    v18 = v10;
    type metadata accessor for ReconciliationID();
  }
  v11 = swift_getAssociatedConformanceWitness();
  v12 = swift_getAssociatedConformanceWitness();
  v15 = AssociatedTypeWitness;
  v16 = v7;
  v17 = v11;
  v18 = v12;
  type metadata accessor for ReconciliationID();
}

void sub_23AB532A4(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(*(_QWORD *)(v1 - 120), 1, 1, a1);
  JUMPOUT(0x23AB532D0);
}

uint64_t sub_23AB532F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = a1[5];
  v30 = a1[3];
  v7 = type metadata accessor for ReconciliationSideMutation(0, v30, v6, a4);
  v29[2] = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v29[1] = (char *)v29 - v8;
  v10 = type metadata accessor for ReconciliationSideMutation(0, a1[2], a1[4], v9);
  v29[0] = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v12 = *(a1 - 1);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t *))(v12 + 16))(v14, v4, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 8:
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v21 = swift_getAssociatedTypeWitness();
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v23 = swift_getAssociatedConformanceWitness();
      v31 = AssociatedTypeWitness;
      v32 = v21;
      v33 = AssociatedConformanceWitness;
      v34 = v23;
      type metadata accessor for ReconciliationID();
    case 11:
      v24 = swift_getAssociatedTypeWitness();
      v25 = swift_getAssociatedTypeWitness();
      v26 = swift_getAssociatedConformanceWitness();
      v27 = swift_getAssociatedConformanceWitness();
      v31 = v24;
      v32 = v25;
      v33 = v26;
      v34 = v27;
      type metadata accessor for ReconciliationID();
    case 9:
      v16 = swift_getAssociatedTypeWitness();
      v17 = swift_getAssociatedTypeWitness();
      v18 = swift_getAssociatedConformanceWitness();
      v19 = swift_getAssociatedConformanceWitness();
      v31 = v16;
      v32 = v17;
      v33 = v18;
      v34 = v19;
      type metadata accessor for ReconciliationID();
  }
  (*(void (**)(char *, uint64_t *))(v12 + 8))(v14, a1);
  return 0;
}

uint64_t sub_23AB53764(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *);
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = (uint64_t *)((char *)&v15 - v7);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v15 - v9;
  v11 = *(void (**)(char *))(v2 + 16);
  v11((char *)&v15 - v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 12)
  {
    ((void (*)(char *, char *, uint64_t))v11)(v5, v10, a1);
    if (v5[1] <= 1u)
    {
      v13 = *((_QWORD *)v5 + 1);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload == 2)
  {
    ((void (*)(uint64_t *, char *, uint64_t))v11)(v8, v10, a1);
    v13 = *v8;
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload)
  {
LABEL_8:
    v13 = 0;
    goto LABEL_9;
  }
  ((void (*)(uint64_t *, char *, uint64_t))v11)(v8, v10, a1);
  v13 = v8[1];
LABEL_9:
  (*(void (**)(char *, uint64_t))(v2 + 8))(v10, a1);
  return v13;
}

uint64_t sub_23AB538BC()
{
  uint64_t *v0;

  return sub_23AFD4D90(*v0);
}

uint64_t sub_23AB538C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  return sub_23AFD594C(a1, a2, a3, *v3);
}

uint64_t sub_23AB538CC()
{
  return sub_23B1C65FC();
}

void sub_23AB538EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  _QWORD v16[22];

  v5 = type metadata accessor for ReconciliationSideMutation(0, a1[2], a1[4], a4);
  v16[5] = *(_QWORD *)(v5 - 8);
  v16[6] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v16[4] = (char *)v16 - v6;
  v8 = type metadata accessor for ReconciliationSideMutation(0, a1[3], a1[5], v7);
  v16[2] = *(_QWORD *)(v8 - 8);
  v16[3] = v8;
  MEMORY[0x24BDAC7A8](v8);
  v16[1] = (char *)v16 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16[8] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v16[7] = (char *)v16 - v11;
  v12 = swift_getAssociatedTypeWitness();
  v16[11] = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16[10] = (char *)v16 - v13;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v15 = swift_getAssociatedConformanceWitness();
  v16[17] = v12;
  v16[18] = AssociatedTypeWitness;
  v16[19] = AssociatedConformanceWitness;
  v16[20] = v15;
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23AB53AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int EnumCaseMultiPayload;

  *(_QWORD *)(v10 - 168) = *(_QWORD *)(a1 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v12 = MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)(v10 - 272) = (char *)&a9 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  *(_QWORD *)(v10 - 200) = (char *)&a9 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  *(_QWORD *)(v10 - 176) = (char *)&a9 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v19 = MEMORY[0x24BDAC7A8](v18);
  MEMORY[0x24BDAC7A8](v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 16))((char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), *(_QWORD *)(v10 - 160), v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)())((char *)sub_23AB53BE0 + 4 * word_23B1CEF88[EnumCaseMultiPayload]))();
}

uint64_t sub_23AB53BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(unsigned __int8 *)(v1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 168) + 32))(v2, v1, v0);
  *(_QWORD *)(v3 - 136) = 0;
  *(_QWORD *)(v3 - 128) = 0xE000000000000000;
  sub_23B1C6EFC();
  v5 = *(_QWORD *)(v3 - 128);
  *(_QWORD *)(v3 - 136) = *(_QWORD *)(v3 - 136);
  *(_QWORD *)(v3 - 128) = v5;
  sub_23B1C64F4();
  MEMORY[0x23B8613CC](&unk_23B1DCF70, v0);
  sub_23B1C7340();
  v6 = sub_23B1C64F4();
  return ((uint64_t (*)(uint64_t))((char *)sub_23AB53CAC + 4 * word_23B1CEFB4[v4]))(v6);
}

uint64_t sub_23AB53CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v4 = *(_QWORD *)(v3 - 136);
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
  return v4;
}

void sub_23AB54930(_QWORD *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v24 = a3;
  v4 = a1[2];
  v5 = a1[4];
  v18 = type metadata accessor for ReconciliationSideMutation(0, v4, v5, a2);
  v15[0] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v17 = (char *)v15 - v6;
  v7 = a1[3];
  v8 = a1[5];
  v16 = type metadata accessor for ReconciliationSideMutation(0, v7, v8, v9);
  MEMORY[0x24BDAC7A8](v16);
  v15[1] = (char *)v15 - v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = swift_getAssociatedTypeWitness();
  v22 = v4;
  v23 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v20 = v7;
  v21 = v8;
  v14 = swift_getAssociatedConformanceWitness();
  v25 = AssociatedTypeWitness;
  v26 = v12;
  v27 = AssociatedConformanceWitness;
  v28 = v14;
  v19 = v14;
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23AB54A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int EnumCaseMultiPayload;

  v11 = MEMORY[0x24BDAC7A8](a1);
  v12 = MEMORY[0x24BDAC7A8](v11);
  MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 16))((char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), *(_QWORD *)(v10 - 120), v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_23AB54B4C + 4 * word_23B1CEFBC[EnumCaseMultiPayload]))();
}

void sub_23AB54B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v2, v1, v5);
  *(_QWORD *)(v7 - 112) = v6;
  *(_QWORD *)(v7 - 104) = v3;
  *(_QWORD *)(v7 - 96) = *(_QWORD *)(v7 - 168);
  *(_QWORD *)(v7 - 88) = v4;
  type metadata accessor for ReconciliationID();
}

void sub_23AB54BA8()
{
  int8x16_t *v0;
  uint64_t v1;

  swift_getTupleTypeMetadata2();
  sub_23AEFF3FC(v0, *(_QWORD *)(v1 - 128));
}

void sub_23AB54BD4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v5);
  *(_BYTE *)(v4 + v0) = v2;
  v7 = *(_QWORD *)(v6 - 144);
  *(_QWORD *)(v6 - 112) = *(_QWORD *)(v6 - 160);
  *(_QWORD *)(v6 - 104) = v7;
  v8 = *(_QWORD *)(v6 - 136);
  *(_QWORD *)(v6 - 96) = *(_QWORD *)(v6 - 152);
  *(_QWORD *)(v6 - 88) = v8;
  type metadata accessor for ReconciliationMutation();
}

uint64_t sub_23AB54C0C()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23AB55718(unint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;

  if ((a2 & 1) != 0)
    v2 = 0x2865766F6D6572;
  else
    v2 = 677667937;
  v4 = v2;
  sub_23AF15C60(a1);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_23AB55780()
{
  uint64_t v0;

  return sub_23AB55718(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

ValueMetadata *type metadata accessor for ReconciliationChildrenDeletionOptions()
{
  return &type metadata for ReconciliationChildrenDeletionOptions;
}

unint64_t sub_23AB557A0()
{
  unint64_t result;

  result = qword_2569E2380;
  if (!qword_2569E2380)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CF228, &type metadata for ReconciliationChildrenDeletionOptions);
    atomic_store(result, (unint64_t *)&qword_2569E2380);
  }
  return result;
}

unint64_t sub_23AB557E8()
{
  unint64_t result;

  result = qword_2569E2388;
  if (!qword_2569E2388)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CF1F8, &type metadata for ReconciliationChildrenDeletionOptions);
    atomic_store(result, (unint64_t *)&qword_2569E2388);
  }
  return result;
}

unint64_t sub_23AB55830()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2569E2390;
  if (!qword_2569E2390)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2569E2398);
    result = MEMORY[0x23B8613CC](&unk_23B1DD070, v1);
    atomic_store(result, (unint64_t *)&qword_2569E2390);
  }
  return result;
}

unint64_t sub_23AB55880()
{
  unint64_t result;

  result = qword_2569E23A0;
  if (!qword_2569E23A0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CF250, &type metadata for ReconciliationChildrenDeletionOptions);
    atomic_store(result, (unint64_t *)&qword_2569E23A0);
  }
  return result;
}

unint64_t sub_23AB558C8()
{
  unint64_t result;

  result = qword_2569E23A8;
  if (!qword_2569E23A8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CF288, &type metadata for ReconciliationChildrenDeletionOptions);
    atomic_store(result, (unint64_t *)&qword_2569E23A8);
  }
  return result;
}

unint64_t sub_23AB55910()
{
  unint64_t result;

  result = qword_2542E1E30;
  if (!qword_2542E1E30)
  {
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_2542E1E30);
  }
  return result;
}

unint64_t sub_23AB55954(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_23AB55980();
  result = sub_23AB559C4();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_23AB55980()
{
  unint64_t result;

  result = qword_2569E23D0;
  if (!qword_2569E23D0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CF3B8, &type metadata for ReconciliationChildrenDeletionOptions);
    atomic_store(result, (unint64_t *)&qword_2569E23D0);
  }
  return result;
}

unint64_t sub_23AB559C4()
{
  unint64_t result;

  result = qword_2569E23D8;
  if (!qword_2569E23D8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CF350, &type metadata for ReconciliationChildrenDeletionOptions);
    atomic_store(result, (unint64_t *)&qword_2569E23D8);
  }
  return result;
}

double sub_23AB55A08@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23AB55A20(a1, (void (*)(uint64_t))sub_23AB5692C, a2);
}

double sub_23AB55A14@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23AB55A20(a1, (void (*)(uint64_t))sub_23AA88218, a2);
}

double sub_23AB55A20@<D0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  double result;

  if (*(_QWORD *)(a1 + 16))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_BYTE *)(a1 + 41);
    v5 = *(_BYTE *)(a1 + 42);
    v6 = *(_BYTE *)(a1 + 48);
    v7 = *(void **)(a1 + 88);
    v8 = *(_BYTE *)(a1 + 96);
    v9 = *(_QWORD *)(a1 + 104);
    v10 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)a3 = v3;
    *(_BYTE *)(a3 + 8) = *(_BYTE *)(a1 + 40);
    *(_BYTE *)(a3 + 9) = v4;
    *(_BYTE *)(a3 + 10) = v5;
    *(_BYTE *)(a3 + 16) = v6;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 72);
    *(_QWORD *)(a3 + 56) = v7;
    *(_BYTE *)(a3 + 64) = v8;
    *(_QWORD *)(a3 + 72) = v9;
    *(_QWORD *)(a3 + 80) = v10;
    a2(v3);
    v11 = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 1;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 64) = 0;
  }
  return result;
}

_QWORD *sub_23AB55AD4(uint64_t a1)
{
  _QWORD *result;
  int v3;
  char v4;
  uint64_t v5;

  result = (_QWORD *)sub_23AAB7888(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (_QWORD *)(1 << *(_BYTE *)(a1 + 32)))
    return 0;
  else
    return sub_23AB569E8(&v5, (uint64_t)result, v3, 0, a1);
}

_QWORD *sub_23AB55B58(uint64_t a1)
{
  _QWORD *result;
  int v3;
  char v4;
  uint64_t v5;

  result = (_QWORD *)sub_23AAB7888(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == (_QWORD *)(1 << *(_BYTE *)(a1 + 32)))
    return 0;
  else
    return sub_23AB56AB8(&v5, (uint64_t)result, v3, 0, a1);
}

uint64_t sub_23AB55BE0()
{
  uint64_t v0;

  sub_23AAA420C();
  v0 = sub_23B1C6CF8();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23AB55C74(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_23AB55CFC(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23AB55D2C()
{
  void *v0;
  id v1;
  uint64_t v2;

  v0 = (void *)sub_23B1C63BC();
  v1 = objc_msgSend(v0, sel_fp_obfuscatedFilename);

  v2 = sub_23B1C63E0();
  return v2;
}

uint64_t sub_23AB55D8C()
{
  sub_23AAA420C();
  return sub_23B1C6CF8();
}

uint64_t sub_23AB55DFC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_bridgeObjectRetain();
  v4 = sub_23AAAE580(a1, a2);
  v6 = v5;
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_7;
  if (v4 != 12565487 || v6 != 0xA300000000000000)
  {
    v7 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      goto LABEL_6;
LABEL_7:
    swift_bridgeObjectRetain();
    return a1;
  }
  swift_bridgeObjectRelease();
LABEL_6:
  swift_bridgeObjectRetain();
  v8 = sub_23B1C64B8();
  v9 = sub_23AA8A1BC(v8, a1, a2);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRelease();
  a1 = MEMORY[0x23B85ED8C](v9, v11, v13, v15);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23AB55F1C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;

  swift_bridgeObjectRetain();
  v8 = sub_23AAAE580(a1, a2);
  v10 = v9;
  swift_bridgeObjectRelease();
  if (v10)
  {
    if (v8 == 12565487 && v10 == 0xA300000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRetain();
      v12 = sub_23B1C64B8();
      v13 = sub_23AA8A1BC(v12, a1, a2);
      v15 = v14;
      v17 = v16;
      v19 = v18;
      swift_bridgeObjectRelease();
      a1 = MEMORY[0x23B85ED8C](v13, v15, v17, v19);
      a2 = v20;
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    v11 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      goto LABEL_6;
  }
  swift_bridgeObjectRetain();
LABEL_8:
  swift_bridgeObjectRetain();
  v21 = sub_23AAAE580(a3, a4);
  v23 = v22;
  swift_bridgeObjectRelease();
  if (v23)
  {
    if (v21 == 12565487 && v23 == 0xA300000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    v24 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
    {
LABEL_13:
      swift_bridgeObjectRetain();
      v25 = sub_23B1C64B8();
      v26 = sub_23AA8A1BC(v25, a3, a4);
      v28 = v27;
      v30 = v29;
      v32 = v31;
      swift_bridgeObjectRelease();
      v33 = MEMORY[0x23B85ED8C](v26, v28, v30, v32);
      a4 = v34;
      swift_bridgeObjectRelease();
      if (a1 != v33)
        goto LABEL_18;
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRetain();
  if (a1 != a3)
  {
LABEL_18:
    v35 = sub_23B1C7388();
    goto LABEL_19;
  }
LABEL_16:
  if (a2 != a4)
    goto LABEL_18;
  v35 = 1;
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v35 & 1;
}

uint64_t sub_23AB56178(uint64_t a1, uint64_t a2)
{
  char v5;
  char v6;

  if (a1 == 11822 && a2 == 0xE200000000000000)
    return 0;
  v5 = sub_23B1C7388();
  v6 = 0;
  if ((v5 & 1) == 0)
  {
    if (a1 == 46 && a2 == 0xE100000000000000)
      v6 = 0;
    else
      v6 = sub_23B1C7388() ^ 1;
  }
  return v6 & 1;
}

_QWORD *sub_23AB56208@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t sub_23AB56214@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23AB56220()
{
  sub_23B1C74A8();
  swift_bridgeObjectRetain();
  sub_23B1C64A0();
  swift_bridgeObjectRelease();
  return sub_23B1C74E4();
}

uint64_t sub_23AB56278()
{
  swift_bridgeObjectRetain();
  sub_23B1C64A0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AB562BC()
{
  sub_23B1C74A8();
  swift_bridgeObjectRetain();
  sub_23B1C64A0();
  swift_bridgeObjectRelease();
  return sub_23B1C74E4();
}

uint64_t sub_23AB56310()
{
  void *v0;
  id v1;
  uint64_t v2;

  v0 = (void *)sub_23B1C63BC();
  v1 = objc_msgSend(v0, sel_fp_obfuscatedFilename);

  v2 = sub_23B1C63E0();
  return v2;
}

uint64_t sub_23AB56374(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = a2[1];
  v4 = sub_23AB55DFC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v6 = v5;
  if (v4 == sub_23AB55DFC(v2, v3) && v6 == v7)
    v9 = 1;
  else
    v9 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_23AB56408()
{
  return sub_23B1C6500();
}

uint64_t sub_23AB5641C(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[40];

  sub_23AA77B28(a1, (uint64_t)v4);
  v2 = sub_23B1C6494();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v2;
}

uint64_t sub_23AB56480()
{
  return sub_23B1C6500();
}

uint64_t sub_23AB564A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  sub_23AAA420C();
  v2 = sub_23B1C6CF8();
  v4 = v3;
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t sub_23AB56534()
{
  uint64_t result;
  uint64_t v1;

  sub_23AAA420C();
  result = sub_23B1C6CF8();
  qword_256A07960 = result;
  *(_QWORD *)algn_256A07968 = v1;
  return result;
}

uint64_t *sub_23AB565C4()
{
  if (qword_2569E1280 != -1)
    swift_once();
  return &qword_256A07960;
}

uint64_t sub_23AB56604()
{
  return sub_23AB56718(&qword_2569E1280, &qword_256A07960);
}

uint64_t sub_23AB56624()
{
  uint64_t result;
  uint64_t v1;

  sub_23AAA420C();
  result = sub_23B1C6CF8();
  qword_256A07970 = result;
  *(_QWORD *)algn_256A07978 = v1;
  return result;
}

uint64_t *sub_23AB566B8()
{
  if (qword_2569E1288 != -1)
    swift_once();
  return &qword_256A07970;
}

uint64_t sub_23AB566F8()
{
  return sub_23AB56718(&qword_2569E1288, &qword_256A07970);
}

uint64_t sub_23AB56718(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

unint64_t sub_23AB5676C()
{
  unint64_t result;

  result = qword_2569E23E0;
  if (!qword_2569E23E0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CF4AC, &type metadata for Filename);
    atomic_store(result, (unint64_t *)&qword_2569E23E0);
  }
  return result;
}

unint64_t sub_23AB567B4()
{
  unint64_t result;

  result = qword_2569E23E8;
  if (!qword_2569E23E8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CF564, &type metadata for Filename);
    atomic_store(result, (unint64_t *)&qword_2569E23E8);
  }
  return result;
}

uint64_t sub_23AB567F8()
{
  return MEMORY[0x24BEE0D80];
}

unint64_t sub_23AB56808()
{
  unint64_t result;

  result = qword_2569E23F0;
  if (!qword_2569E23F0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CF5A4, &type metadata for Filename);
    atomic_store(result, (unint64_t *)&qword_2569E23F0);
  }
  return result;
}

uint64_t sub_23AB5684C()
{
  return MEMORY[0x24BEE0D90];
}

uint64_t sub_23AB56858()
{
  return MEMORY[0x24BEE0D88];
}

_QWORD *assignWithCopy for Filename(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for Filename(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Filename(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for Filename()
{
  return &type metadata for Filename;
}

id sub_23AB5692C(id result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return result;
  return result;
}

uint64_t sub_23AB56938(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v6 = result;
    v7 = *(_QWORD *)(a5 + 56);
    v8 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
    sub_23AB56A70(v7 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a2, v6);
    return v8;
  }
LABEL_8:
  __break(1u);
  return result;
}

_QWORD *sub_23AB569E8(_QWORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  id v6;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = *(void **)(*(_QWORD *)(a5 + 48) + 8 * a2);
    *result = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * a2);
    v6 = v5;
    swift_retain();
    return v6;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_23AB56A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_23AB56AB8(_QWORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;
  id v7;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    v6 = *(void **)(*(_QWORD *)(a5 + 56) + 8 * a2);
    *result = v6;
    swift_bridgeObjectRetain();
    v7 = v6;
    return (_QWORD *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_23AB56B4C(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  id v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_23AAB5A68(0, v1, 0);
    v3 = sub_23AB55C74(a1);
    if (v3 < 0 || v3 >= 1 << *(_BYTE *)(a1 + 32))
    {
      __break(1u);
    }
    else if ((*(_QWORD *)(a1 + 64 + 8 * ((unint64_t)v3 >> 6)) & (1 << v3)) != 0)
    {
      if (*(_DWORD *)(a1 + 36) == v4)
      {
        v5 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v3);
        v6 = *v5;
        v7 = v5[1];
        swift_bridgeObjectRetain();
        sub_23AAAE668(v6, v7);
        swift_bridgeObjectRetain();
        sub_23AAAE668(v6, v7);
        swift_bridgeObjectRelease();
        sub_23AAAE53C(v6, v7);
        v8 = (void *)sub_23B1C63BC();
        v9 = objc_msgSend(v8, sel_fp_obfuscatedExtendedAttributeName);

        sub_23B1C63E0();
        sub_23B1C64F4();
        __asm { BR              X9 }
      }
LABEL_10:
      __break(1u);
      JUMPOUT(0x23AB56E98);
    }
    __break(1u);
    goto LABEL_10;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_23AB56EBC(uint64_t a1)
{
  return __ROR8__(a1, 32);
}

uint64_t sub_23AB56EC8(uint64_t a1)
{
  return sub_23AB5E78C(HIDWORD(a1));
}

uint64_t sub_23AB56ED0(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v2 = sub_23B1C6428();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23B1C5A38();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = __rev32(a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BDCDB98], v3);
  sub_23B1C5A2C();
  sub_23B1C563C();
  swift_allocObject();
  swift_retain();
  v7 = sub_23B1C55F4();
  v8 = sub_23AB5E6A8(v7, 8);
  v10 = v9;
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_23B1C6410();
  v11 = sub_23B1C63F8();
  sub_23AAAE53C(v8, v10);
  return v11;
}

_QWORD *sub_23AB57074@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = __ROR8__(*result, 32);
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_23AB57088(unint64_t *a1@<X8>)
{
  unsigned int *v1;

  *a1 = v1[1] | ((unint64_t)*v1 << 32);
}

BOOL sub_23AB57098(unsigned int *a1, unsigned int *a2)
{
  return (a1[1] | ((unint64_t)*a1 << 32)) == (a2[1] | ((unint64_t)*a2 << 32));
}

uint64_t sub_23AB570B4()
{
  sub_23AA7E38C(&qword_2569E24B0, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderTypeAndCreator, (uint64_t)&unk_23B1CF6BC);
  return sub_23B1C66E0();
}

uint64_t sub_23AB57128()
{
  sub_23AA7E38C(&qword_2569E24B0, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderTypeAndCreator, (uint64_t)&unk_23B1CF6BC);
  return sub_23B1C668C();
}

uint64_t sub_23AB5718C()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_23AB57194(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*sub_23AB5719C())()
{
  return nullsub_1;
}

unint64_t sub_23AB571AC()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

uint64_t sub_23AB571CC(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  *(_BYTE *)(v1 + 8) = BYTE4(result) & 1;
  return result;
}

uint64_t (*sub_23AB571DC())()
{
  return nullsub_1;
}

uint64_t sub_23AB571EC()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 10);
}

uint64_t sub_23AB571F4(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 10) = result;
  return result;
}

uint64_t (*sub_23AB571FC())()
{
  return nullsub_1;
}

uint64_t sub_23AB5720C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ItemMetadata() + 28);
  v4 = sub_23B1C5BDC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_23AB57254(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ItemMetadata() + 28);
  v4 = sub_23B1C5BDC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*sub_23AB5729C())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB572C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ItemMetadata() + 32);
  v4 = sub_23B1C5BDC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_23AB5730C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ItemMetadata() + 32);
  v4 = sub_23B1C5BDC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*sub_23AB57354())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB5737C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 36));
}

uint64_t sub_23AB5739C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*sub_23AB573C8())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB573F0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 40));
}

uint64_t sub_23AB57410(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*sub_23AB5743C())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57464()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 44));
}

uint64_t sub_23AB57484(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*sub_23AB574B0())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB574D8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 48));
}

uint64_t sub_23AB574F8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*sub_23AB57524())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB5754C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 52));
}

uint64_t sub_23AB5756C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*sub_23AB57598())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB575C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 56));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23AB575FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ItemMetadata() + 56));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_23AB57640())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57668()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 60));
}

uint64_t sub_23AB57688(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*sub_23AB576B4())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB576DC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 64));
}

uint64_t sub_23AB576FC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*sub_23AB57728())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57750()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 68));
}

uint64_t sub_23AB57770(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*sub_23AB5779C())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB577C4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 72));
}

uint64_t sub_23AB577E4(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

uint64_t (*sub_23AB57810())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57838()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 76));
}

uint64_t sub_23AB57858(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_QWORD *)(v1 + *(int *)(result + 76)) = a1;
  return result;
}

uint64_t (*sub_23AB57884())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB578AC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 80));
}

uint64_t sub_23AB578CC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 80)) = a1;
  return result;
}

uint64_t (*sub_23AB578F8())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57920()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 84));
}

uint64_t sub_23AB57940(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 84)) = a1;
  return result;
}

uint64_t (*sub_23AB5796C())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57994()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 88));
}

uint64_t sub_23AB579B4(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 88)) = a1;
  return result;
}

uint64_t (*sub_23AB579E0())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57A08()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 92));
}

uint64_t sub_23AB57A28(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 92)) = a1;
  return result;
}

uint64_t (*sub_23AB57A54())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57A7C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 96));
}

uint64_t sub_23AB57A9C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 96)) = a1;
  return result;
}

uint64_t (*sub_23AB57AC8())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57AF0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 100));
}

uint64_t sub_23AB57B10(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_QWORD *)(v1 + *(int *)(result + 100)) = a1;
  return result;
}

uint64_t (*sub_23AB57B3C())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57B64()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 104));
}

uint64_t sub_23AB57B84(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_QWORD *)(v1 + *(int *)(result + 104)) = a1;
  return result;
}

uint64_t (*sub_23AB57BB0())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57BD8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 108));
}

uint64_t sub_23AB57BF8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 108)) = a1;
  return result;
}

uint64_t (*sub_23AB57C24())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57C4C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 112));
}

uint64_t sub_23AB57C6C(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 112)) = a1;
  return result;
}

uint64_t (*sub_23AB57C98())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57CC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ItemMetadata();
  return sub_23AA8EFC8(v1 + *(int *)(v3 + 116), a1, (uint64_t *)&unk_2542E4310);
}

uint64_t sub_23AB57CFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ItemMetadata() + 116);
  return sub_23AB5E930(a1, v3);
}

uint64_t (*sub_23AB57D2C())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57D54()
{
  type metadata accessor for ItemMetadata();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23AB57D74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for ItemMetadata() + 120);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*sub_23AB57DB0())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57DD8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 124));
}

uint64_t sub_23AB57E00(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for ItemMetadata();
  v6 = v2 + *(int *)(result + 124);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*sub_23AB57E44())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57E6C()
{
  type metadata accessor for ItemMetadata();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23AB57E8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for ItemMetadata() + 128);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*sub_23AB57EC8())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for ItemMetadata() + 132);
  v2 = *(_QWORD *)v1;
  sub_23AAA3E2C(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t sub_23AB57F30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for ItemMetadata() + 132);
  result = sub_23AAA3E18(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*sub_23AB57F74())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB57F9C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 136));
}

uint64_t sub_23AB57FC4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for ItemMetadata();
  v6 = v2 + *(int *)(result + 136);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*sub_23AB58008())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB58030()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 140));
}

uint64_t sub_23AB58050(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ItemMetadata();
  *(_BYTE *)(v1 + *(int *)(result + 140)) = a1;
  return result;
}

uint64_t (*sub_23AB5807C())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

unint64_t sub_23AB580A4()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 144));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t sub_23AB580E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for ItemMetadata();
  v4 = v1 + *(int *)(result + 144);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*sub_23AB58118())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB58140()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 148));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23AB5817C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ItemMetadata() + 148));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_23AB581C0())(_QWORD)
{
  type metadata accessor for ItemMetadata();
  return nullsub_1;
}

uint64_t sub_23AB58208@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, unint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, unsigned __int8 a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned __int8 a25,unsigned __int8 a26,unsigned __int8 a27,unsigned __int8 a28,unsigned __int8 a29,unsigned __int8 a30,unsigned __int8 a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,unint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unsigned __int8 a40,unsigned __int8 a41,unsigned __int8 a42)
{
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  _BYTE *v55;
  char v56;
  char v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v67[12];
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;

  v102 = a2;
  v103 = a3;
  v101 = a1;
  v100 = a9;
  v82 = a41;
  v80 = a42;
  v81 = a40;
  v78 = a5;
  v79 = a39;
  v77 = a38;
  v73 = a36;
  v46 = a35;
  v76 = a34;
  v75 = a33;
  v74 = a32;
  v83 = a31;
  v84 = a30;
  v85 = a29;
  v86 = a28;
  v87 = a27;
  v96 = a25;
  v94 = a23;
  v95 = a24;
  v92 = a21;
  v93 = a22;
  v91 = a19;
  v98 = a18;
  v99 = a17;
  v88 = a16;
  v89 = a26;
  v90 = a15;
  v97 = a14;
  v70 = a13;
  v69 = a12;
  v72 = a11;
  v71 = a10;
  v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  v48 = MEMORY[0x24BDAC7A8](v47);
  v50 = &v67[-((v49 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v51 = MEMORY[0x24BDAC7A8](v48);
  v53 = &v67[-v52];
  MEMORY[0x24BDAC7A8](v51);
  v55 = &v67[-v54];
  if ((a6 & 1) == 0)
  {
    if ((a8 & 1) == 0)
    {
      v60 = 0;
      if ((a7 & 1) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
    v56 = a35;
    v57 = a4;
    v60 = 0;
    goto LABEL_6;
  }
  v56 = a35;
  v57 = a4;
  v58 = sub_23B1C5EE8();
  v59 = sub_23B1C5ED0() | v58;
  v60 = v59 | sub_23B1C5EDC();
  if ((a8 & 1) != 0)
  {
LABEL_6:
    v61 = sub_23B1C5F18();
    v62 = sub_23B1C5F00();
    v60 |= v61 | v62 | sub_23B1C5F0C();
  }
  a4 = v57;
  v46 = v56;
  if ((a7 & 1) != 0)
LABEL_8:
    v60 |= sub_23B1C5EF4();
LABEL_9:
  v68 = a4 & 1;
  v63 = v69;
  sub_23AA8EFC8(v69, (uint64_t)v55, (uint64_t *)&unk_2542E4310);
  v64 = v70;
  sub_23AA8EFC8(v70, (uint64_t)v53, (uint64_t *)&unk_2542E4310);
  v65 = v99;
  sub_23AA8EFC8(v99, (uint64_t)v50, (uint64_t *)&unk_2542E4310);
  sub_23AB58648(v101, v102, v103, v68, v78 | ((HIDWORD(v78) & 1) << 32), v60, (uint64_t)v55, (uint64_t)v53, v100, v97 & 1, v90 & 1, v88 & 1, (uint64_t)v50, v98, v91, a20 & 1, v92, v93, v94,
    v95,
    v96,
    v89 & 1,
    v87 & 1,
    v86 & 1,
    v85 & 1,
    v84 & 1,
    v83 & 1,
    v71,
    v72,
    v74,
    v75,
    v76,
    v46 & 1,
    v73 | ((HIDWORD(v73) & 1) << 32),
    0,
    v77,
    v79,
    v81 & 1,
    v82 & 1,
    v80);
  sub_23AA8A05C(v65, (uint64_t *)&unk_2542E4310);
  sub_23AA8A05C(v64, (uint64_t *)&unk_2542E4310);
  return sub_23AA8A05C(v63, (uint64_t *)&unk_2542E4310);
}

void sub_23AB58648(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int8 a26,unsigned __int8 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,unsigned __int8 a33,uint64_t a34,unsigned __int8 a35,uint64_t a36,uint64_t a37,unsigned __int8 a38,unsigned __int8 a39,unsigned __int8 a40)
{
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  void (*v53)(void);
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  _QWORD v58[3];
  int v59;
  int v60;
  int v61;
  int v62;
  char *v63;
  int v64;
  _OWORD *v65;
  int v66;
  char *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v104 = a8;
  v105 = a7;
  v66 = a6;
  v70 = a5;
  v68 = a4;
  v69 = a3;
  v72 = a2;
  v61 = a40;
  v60 = a39;
  v59 = a38;
  v103 = a37;
  v58[2] = a36;
  v102 = a35;
  v71 = a34;
  v101 = a33;
  v100 = a32;
  v95 = a30;
  v96 = a31;
  v64 = a27;
  v90 = a26;
  v87 = a23;
  v88 = a25;
  v85 = a21;
  v86 = a22;
  v84 = a20;
  v97 = a18;
  v98 = a19;
  v94 = a17;
  v92 = a24;
  v93 = a16;
  v91 = a15;
  v89 = a14;
  v99 = a13;
  v82 = a11;
  v83 = a12;
  v81 = a10;
  v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  v43 = MEMORY[0x24BDAC7A8](v42);
  v78 = (char *)v58 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v43);
  v63 = (char *)v58 - v45;
  v46 = sub_23B1C5BDC();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = MEMORY[0x24BDAC7A8](v46);
  v73 = (char *)v58 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v48);
  v67 = (char *)v58 - v50;
  v51 = (int *)type metadata accessor for ItemMetadata();
  v52 = (_QWORD *)(a9 + v51[14]);
  *v52 = 0;
  v52[1] = 0;
  v80 = v52;
  *(_BYTE *)(a9 + v51[17]) = 2;
  v53 = *(void (**)(void))(v47 + 56);
  v77 = a9 + v51[29];
  v53();
  v75 = v51[30];
  *(_QWORD *)(a9 + v75) = 0;
  v54 = a9 + v51[31];
  *(_QWORD *)v54 = 0;
  v74 = v54;
  *(_BYTE *)(v54 + 8) = 1;
  v76 = v51[32];
  *(_QWORD *)(a9 + v76) = 0;
  v65 = (_OWORD *)(a9 + v51[33]);
  *v65 = xmmword_23B1CA780;
  v55 = a9 + v51[34];
  *(_QWORD *)v55 = 0;
  v79 = v55;
  *(_BYTE *)(v55 + 8) = 1;
  v56 = (_QWORD *)(a9 + v51[37]);
  v57 = a29 & 1;
  if (a29 == 2)
    v57 = a28 & 1;
  v62 = v57;
  *v56 = 0;
  v56[1] = 0;
  v58[1] = v56;
  __asm { BR              X10 }
}

uint64_t sub_23AB58964()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  int *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  __int16 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t result;
  int v41;
  int v42;

  v7 = *(_DWORD *)(v6 - 364);
  if (fpfs_supports_vfs_ignore_permissions_iopolicy())
    v8 = v7 & 0x1BF | 0x40;
  else
    v8 = (4 * (v7 & 0x1FF | (v7 >> 2) & 0x40 | 0x80)) & 0x100 | v7 & 0x1FF | (v7 >> 2) & 0x40 | 0x80;
  v9 = *(_DWORD *)(v6 - 380) & 1;
  v10 = *(_QWORD *)(v6 - 320);
  if ((*(_DWORD *)(v6 - 380) & 1) != 0)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v6 - 320);
  if ((*(_DWORD *)(v6 - 348) & 1) == 0)
    v11 = *(_QWORD *)(v6 - 344);
  v12 = *(_QWORD *)(v6 - 336);
  v13 = HIDWORD(*(_QWORD *)(v6 - 328)) & 1;
  *(_BYTE *)v0 = v4;
  *(_BYTE *)(v0 + v3[20]) = v9;
  *(_BYTE *)(v0 + v3[27]) = v1;
  *(_BYTE *)(v0 + v3[28]) = *(_DWORD *)(v6 - 396);
  *(_QWORD *)(v0 + v3[25]) = v10;
  *(_QWORD *)(v0 + v3[26]) = v11;
  *(_DWORD *)(v0 + 4) = v12;
  *(_BYTE *)(v0 + 8) = BYTE4(v12) & 1;
  v14 = v0 + v3[36];
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = v13 | 1;
  *(_WORD *)(v0 + 10) = v8;
  v15 = *(_QWORD *)(v6 - 96);
  v16 = *(_QWORD *)(v6 - 392);
  sub_23AA8EFC8(v15, v16, (uint64_t *)&unk_2542E4310);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v17(v16, 1, v5) == 1)
  {
    v18 = *(_QWORD *)(v6 - 360);
    sub_23B1C5B88();
    sub_23AA8A05C(v16, (uint64_t *)&unk_2542E4310);
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v20 = v18;
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
    v20 = *(_QWORD *)(v6 - 360);
    v19(v20, v16, v5);
  }
  v21 = *(_QWORD *)(v6 - 136);
  v19(v0 + v3[7], v20, v5);
  v22 = *(_QWORD *)(v6 - 104);
  v23 = *(_QWORD *)(v6 - 272);
  sub_23AA8EFC8(v22, v23, (uint64_t *)&unk_2542E4310);
  if (v17(v23, 1, v5) == 1)
  {
    v24 = *(_QWORD *)(v6 - 312);
    sub_23B1C5B88();
    sub_23AA8A05C(v23, (uint64_t *)&unk_2542E4310);
  }
  else
  {
    v24 = *(_QWORD *)(v6 - 312);
    v19(v24, v23, v5);
  }
  v19(v0 + v3[8], v24, v5);
  *(_BYTE *)(v0 + v3[9]) = *(_DWORD *)(v6 - 244) & 1;
  *(_BYTE *)(v0 + v3[10]) = *(_DWORD *)(v6 - 240) & 1;
  *(_BYTE *)(v0 + v3[13]) = *(_DWORD *)(v6 - 236) & 1;
  *(_QWORD *)(v0 + v3[19]) = *(_QWORD *)(v6 - 232);
  *(_BYTE *)(v0 + v3[21]) = *(_DWORD *)(v6 - 224);
  *(_BYTE *)(v0 + v3[15]) = *(_DWORD *)(v6 - 220) & 1;
  *(_BYTE *)(v0 + v3[16]) = *(_DWORD *)(v6 - 216) & 1;
  *(_BYTE *)(v0 + v3[11]) = *(_DWORD *)(v6 - 212) & 1;
  *(_BYTE *)(v0 + v3[12]) = *(_DWORD *)(v6 - 196) & 1;
  *(_BYTE *)(v0 + v3[18]) = *(_DWORD *)(v6 - 184) & 1;
  sub_23AAA3E40(v21, *(_QWORD *)(v6 - 280));
  v25 = *(_QWORD *)(v6 - 296);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + v25) = *(_QWORD *)(v6 - 208);
  v26 = *(_QWORD *)(v6 - 304);
  *(_QWORD *)v26 = *(_QWORD *)(v6 - 192);
  *(_BYTE *)(v26 + 8) = *(_DWORD *)(v6 - 180) & 1;
  v27 = *(_QWORD *)(v6 - 288);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + v27) = *(_QWORD *)(v6 - 176);
  v28 = *(_QWORD **)(v6 - 256);
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v6 - 160);
  v30 = *(_QWORD *)(v6 - 152);
  *v28 = *(_QWORD *)(v6 - 168);
  v28[1] = v29;
  v31 = *(uint64_t **)(v6 - 376);
  v32 = *v31;
  v33 = v31[1];
  v34 = *(_QWORD *)(v6 - 144);
  *v31 = v30;
  v31[1] = v34;
  sub_23AAA3E2C(v30, v34);
  sub_23AAA3E18(v32, v33);
  v35 = *(_QWORD *)(v6 - 264);
  *(_QWORD *)v35 = *(_QWORD *)(v6 - 128);
  *(_BYTE *)(v35 + 8) = *(_DWORD *)(v6 - 120) & 1;
  *(_BYTE *)(v0 + v3[35]) = *(_DWORD *)(v6 - 116) & 1;
  sub_23AAA3E18(v30, v34);
  v36 = *(_QWORD *)(v6 - 112);
  if (v36)
  {
    v37 = *(_QWORD *)(v6 - 416);
    if ((v36 & 0x2000000000000000) != 0)
      v38 = HIBYTE(v36) & 0xF;
    else
      v38 = v37 & 0xFFFFFFFFFFFFLL;
    sub_23AA8A05C(v21, (uint64_t *)&unk_2542E4310);
    sub_23AA8A05C(v22, (uint64_t *)&unk_2542E4310);
    sub_23AA8A05C(v15, (uint64_t *)&unk_2542E4310);
    if (v38)
    {
      v39 = *(_QWORD **)(v6 - 424);
      result = swift_bridgeObjectRelease();
      *v39 = v37;
      v39[1] = v36;
    }
    else
    {
      result = swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_23AA8A05C(v21, (uint64_t *)&unk_2542E4310);
    sub_23AA8A05C(v22, (uint64_t *)&unk_2542E4310);
    result = sub_23AA8A05C(v15, (uint64_t *)&unk_2542E4310);
  }
  v41 = *(_DWORD *)(v6 - 400);
  v42 = *(_DWORD *)(v6 - 404);
  *(_BYTE *)(v0 + v3[23]) = *(_DWORD *)(v6 - 408) & 1;
  *(_BYTE *)(v0 + v3[24]) = v42 & 1;
  *(_BYTE *)(v0 + v3[22]) = v41;
  return result;
}

void sub_23AB58E04(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, unint64_t a15, unsigned __int8 a16, unsigned __int8 a17, unsigned __int8 a18, unsigned __int8 a19, unsigned __int8 a20,uint64_t a21,uint64_t a22,unsigned __int8 a23)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char v52;

  v37 = a8;
  v48 = a7;
  v49 = a6;
  v50 = a5;
  v51 = a2;
  v47 = a9;
  v45 = a17;
  v46 = a16;
  v42 = a19;
  v43 = a18;
  v38 = a23;
  v39 = a21;
  v35 = a4;
  v36 = a15;
  v44 = a11;
  v40 = a20;
  v41 = a12 & 1;
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v35 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v26);
  v31 = (char *)&v35 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v35 - v32;
  sub_23AA8EFC8(a3, (uint64_t)&v35 - v32, (uint64_t *)&unk_2542E4310);
  sub_23AA8EFC8(v35, (uint64_t)v31, (uint64_t *)&unk_2542E4310);
  sub_23AA8EFC8(v37, (uint64_t)v28, (uint64_t *)&unk_2542E4310);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = v36;
  sub_23AAA3E2C(a14, v36);
  swift_bridgeObjectRetain();
  v52 = 1;
  sub_23AB58648(1, 0, 0, 1, a1 | ((HIDWORD(a1) & 1) << 32), v51, (uint64_t)v33, (uint64_t)v31, v47, v50, v49, v48, (uint64_t)v28, a10, v44, v41, a13, a14, v34,
    0,
    0,
    v46,
    v45,
    v43,
    v42,
    0,
    v40,
    0,
    2,
    0,
    0,
    0,
    1u,
    0x100000000,
    0,
    v39,
    a22,
    0,
    0,
    v38);
}

void sub_23AB59054(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE v24[12];
  int v25;
  int v26;
  int v27;
  char v28;
  char v29;

  v25 = a6;
  v26 = a5;
  v27 = a2;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = &v24[-v20];
  MEMORY[0x24BDAC7A8](v19);
  v23 = &v24[-v22];
  sub_23AA8EFC8(a3, (uint64_t)&v24[-v22], (uint64_t *)&unk_2542E4310);
  sub_23AA8EFC8(a4, (uint64_t)v21, (uint64_t *)&unk_2542E4310);
  sub_23AA8EFC8(a7, (uint64_t)v18, (uint64_t *)&unk_2542E4310);
  swift_bridgeObjectRetain();
  v29 = 1;
  v28 = 1;
  sub_23AB58648(2, a1, 0, 1, 0x100000000, v27, (uint64_t)v23, (uint64_t)v21, a9, v26, v25, 0, (uint64_t)v18, 0, 0, 1u, a8, 0, 0xF000000000000000,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    2,
    0,
    0,
    0,
    1u,
    0x100000000,
    0,
    0,
    0,
    0,
    0,
    0);
}

const char *sub_23AB59208()
{
  return "silaSCAMlibfssync";
}

uint64_t sub_23AB59214()
{
  return 0x4D414353616C6973;
}

void sub_23AB59228()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v1);
  v6 = sub_23B1C5BDC();
  MEMORY[0x24BDAC7A8](v6);
  v5 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ItemMetadata();
  v4 = MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  __asm { BR              X9 }
}

uint64_t sub_23AB59330()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;

  v8 = 6516580;
  if (*(_BYTE *)(v0 + v1[27]))
    v8 = 6777712;
  *(_QWORD *)(v7 - 96) = v8;
  *(_QWORD *)(v7 - 88) = 0xE300000000000000;
  if (*(_BYTE *)(v0 + v1[20]) == 1)
  {
    sub_23B1C64F4();
    v9 = *(unsigned __int8 *)(v0 + v1[22]);
    if (*(_BYTE *)(v0 + v1[22]))
    {
      *(_QWORD *)(v7 - 112) = 58;
      *(_QWORD *)(v7 - 104) = 0xE100000000000000;
      __asm { BR              X10 }
    }
  }
  if (v6 != 1)
  {
    *(_QWORD *)(v7 - 112) = 981103392;
    *(_QWORD *)(v7 - 104) = 0xE400000000000000;
    *(_QWORD *)(v7 - 120) = *(_QWORD *)(v0 + v1[25]);
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v0 + 8) & 1) == 0)
  {
    v10 = *(_DWORD *)(v0 + 4);
    *(_QWORD *)(v7 - 112) = 0x3A646C69686320;
    *(_QWORD *)(v7 - 104) = 0xE700000000000000;
    *(_DWORD *)(v7 - 120) = v10;
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v7 - 144) = v2;
  v11 = v0 + v1[36];
  if ((*(_BYTE *)(v11 + 4) & 1) == 0)
  {
    v12 = *(_DWORD *)v11;
    if (v12 >= 2)
    {
      *(_QWORD *)(v7 - 112) = 0x3A736B6E696C20;
      *(_QWORD *)(v7 - 104) = 0xE700000000000000;
      *(_DWORD *)(v7 - 120) = v12;
      sub_23B1C7304();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
    }
  }
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  sub_23B1C64F4();
  if (*(_BYTE *)(v0 + v1[10]) == 1)
    sub_23B1C64F4();
  if (*(_BYTE *)(v0 + v1[13]) == 1)
    sub_23B1C64F4();
  if (*(_BYTE *)(v0 + v1[9]) == 1)
    sub_23B1C64F4();
  if (*(_BYTE *)(v0 + v1[28]) == 1)
    sub_23B1C64F4();
  if (*(_BYTE *)(v0 + v1[15]) == 1)
    sub_23B1C64F4();
  if (*(_BYTE *)(v0 + v1[18]) == 1)
    sub_23B1C64F4();
  v13 = v1[21];
  v14 = *(unsigned __int8 *)(v0 + v13);
  if (*(_BYTE *)(v0 + v13))
  {
    *(_QWORD *)(v7 - 112) = 15397;
    *(_QWORD *)(v7 - 104) = 0xE200000000000000;
    *(_QWORD *)(v7 - 120) = *(_QWORD *)(v0 + v1[19]);
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    __asm { BR              X10 }
  }
  v15 = *(unsigned __int8 *)(v0 + v1[11]);
  sub_23AA9BA80(v0, v5);
  if (v15 == 1)
  {
    sub_23AA9F854(v5);
  }
  else
  {
    v16 = *(unsigned __int8 *)(v5 + v1[12]);
    sub_23AA9F854(v5);
    if (v16 != 1)
      goto LABEL_31;
  }
  sub_23B1C64F4();
  sub_23B1C64F4();
LABEL_31:
  if (*(_QWORD *)(v0 + v1[14] + 8))
  {
    strcpy((char *)(v7 - 112), " orig-name:\"");
    *(_BYTE *)(v7 - 99) = 0;
    *(_WORD *)(v7 - 98) = -5120;
    v17 = (void *)sub_23B1C63BC();
    v18 = objc_msgSend(v17, sel_fp_obfuscatedFilename);

    sub_23B1C63E0();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  v19 = v3;
  v20 = *(_QWORD *)(v0 + v1[30]);
  if (v20)
  {
    *(_QWORD *)(v7 - 112) = 3830816;
    *(_QWORD *)(v7 - 104) = 0xE300000000000000;
    sub_23AF1D478(v20);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v7 - 112) = 0;
  *(_QWORD *)(v7 - 104) = 0xE000000000000000;
  sub_23B1C64F4();
  sub_23B1C5B94();
  sub_23B1C6884();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 - 112) = 0;
  *(_QWORD *)(v7 - 104) = 0xE000000000000000;
  sub_23B1C64F4();
  sub_23B1C5B94();
  sub_23B1C6884();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23AA8EFC8(v0 + v1[29], v4, (uint64_t *)&unk_2542E4310);
  v21 = *(_QWORD *)(v7 - 152);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v4, 1, v21) == 1)
  {
    sub_23AA8A05C(v4, (uint64_t *)&unk_2542E4310);
  }
  else
  {
    v22 = *(_QWORD *)(v7 - 160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v22, v4, v21);
    *(_QWORD *)(v7 - 112) = 0;
    *(_QWORD *)(v7 - 104) = 0xE000000000000000;
    sub_23B1C64F4();
    sub_23B1C5B94();
    sub_23B1C6884();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v21);
  }
  v23 = *(_QWORD *)(v7 - 144);
  v24 = v0 + v1[31];
  if ((*(_BYTE *)(v24 + 8) & 1) == 0)
  {
    v25 = *(_QWORD *)v24;
    *(_QWORD *)(v7 - 112) = 980837920;
    *(_QWORD *)(v7 - 104) = 0xE400000000000000;
    *(_QWORD *)(v7 - 120) = v25;
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  v26 = *(_QWORD *)(v0 + v1[32]);
  if (v26)
  {
    sub_23B1C64F4();
    *(_QWORD *)(v7 - 112) = sub_23AB56B4C(v26);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
    sub_23AB5E978();
    sub_23B1C6338();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + v1[33] + 8) >> 60 != 15)
    sub_23B1C64F4();
  v27 = *(unsigned __int8 *)(v0 + v1[16]);
  sub_23AA9BA80(v0, v23);
  if (v27 == 1)
  {
    sub_23AA9F854(v23);
  }
  else
  {
    v28 = *(_BYTE *)(v23 + v1[17]);
    sub_23AA9F854(v23);
    if ((v28 & 1) == 0)
      goto LABEL_48;
  }
  *(_QWORD *)(v7 - 112) = 0x3A65726F6E676920;
  *(_QWORD *)(v7 - 104) = 0xE800000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
LABEL_48:
  v29 = v0 + v1[34];
  if ((*(_BYTE *)(v29 + 8) & 1) == 0)
  {
    v30 = *(_QWORD *)v29;
    *(_QWORD *)(v7 - 112) = 0;
    *(_QWORD *)(v7 - 104) = 0xE000000000000000;
    sub_23B1C64F4();
    *(_QWORD *)(v7 - 120) = v30;
    type metadata accessor for NSFileProviderTypeAndCreator(0);
    sub_23B1C7028();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + v1[37] + 8))
  {
    *(_QWORD *)(v7 - 112) = 0x4962616C6C6F6320;
    *(_QWORD *)(v7 - 104) = 0xEB00000000223A44;
    v31 = (void *)sub_23B1C63BC();
    v32 = objc_msgSend(v31, sel_fp_obfuscatedFilename);

    sub_23B1C63E0();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(v0 + v1[23]) == 1)
    sub_23B1C64F4();
  if (*(_BYTE *)(v0 + v1[24]) == 1)
    sub_23B1C64F4();
  return *(_QWORD *)(v7 - 96);
}

int *sub_23AB59E60(int *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  char i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (result)
  {
    v4 = (unint64_t)result;
    for (i = __clz(__rbit64((unint64_t)result)); ; i = __clz(__rbit64(v4)))
    {
      v6 = 1 << i;
      if ((v6 & v4) != 0)
        v7 = ~v6;
      else
        v7 = -1;
      if (v6 < 0x20000)
      {
        if (v6 <= 255)
        {
          switch(v6)
          {
            case 1:
              v9 = *(int *)(type metadata accessor for ItemMetadata() + 56);
              goto LABEL_61;
            case 2:
              goto LABEL_87;
            case 3:
            case 5:
            case 6:
            case 7:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
              goto LABEL_94;
            case 4:
              v25 = *(_WORD *)(v2 + 10);
              if ((v25 & 0x38) != 0)
                v26 = 504;
              else
                v26 = 448;
              if ((v25 & 7) != 0)
                v27 = v26 | 7;
              else
                v27 = v26;
              *(_WORD *)(v2 + 10) = v27 & *(_WORD *)(a2 + 10);
              goto LABEL_87;
            case 8:
              result = (int *)type metadata accessor for ItemMetadata();
              *(_QWORD *)(v2 + result[25]) = *(_QWORD *)(a2 + result[25]);
              *(_QWORD *)(v2 + result[26]) = *(_QWORD *)(a2 + result[26]);
              goto LABEL_54;
            case 16:
              result = (int *)type metadata accessor for ItemMetadata();
              *(_QWORD *)(v2 + result[25]) = *(_QWORD *)(a2 + result[25]);
              *(_QWORD *)(v2 + result[26]) = *(_QWORD *)(a2 + result[26]);
              *(_BYTE *)(v2 + result[20]) = *(_BYTE *)(a2 + result[20]);
              *(_BYTE *)(v2 + result[27]) = *(_BYTE *)(a2 + result[27]);
              v8 = result[21];
              goto LABEL_85;
            case 32:
              v31 = type metadata accessor for ItemMetadata();
              result = (int *)sub_23AAA3E40(a2 + *(int *)(v31 + 116), v2 + *(int *)(v31 + 116));
              goto LABEL_87;
            case 64:
              v10 = *(int *)(type metadata accessor for ItemMetadata() + 120);
              goto LABEL_91;
            default:
              if (v6 != 128)
                goto LABEL_94;
              result = (int *)type metadata accessor for ItemMetadata();
              v17 = result[31];
              break;
          }
LABEL_69:
          v22 = *(_QWORD *)(a2 + v17);
          v23 = *(_BYTE *)(a2 + v17 + 8);
          v24 = v2 + v17;
          *(_QWORD *)v24 = v22;
          *(_BYTE *)(v24 + 8) = v23;
          goto LABEL_87;
        }
        if (v6 <= 4095)
        {
          if (v6 > 1023)
          {
            if (v6 == 1024)
            {
              v15 = *(int *)(type metadata accessor for ItemMetadata() + 28);
            }
            else
            {
              if (v6 != 2048)
                goto LABEL_94;
              v15 = *(int *)(type metadata accessor for ItemMetadata() + 32);
            }
            v28 = a2 + v15;
            v29 = v2 + v15;
            v30 = sub_23B1C5BDC();
            result = (int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v29, v28, v30);
          }
          else
          {
            if (v6 != 256)
            {
              if (v6 != 512)
                goto LABEL_94;
              result = (int *)type metadata accessor for ItemMetadata();
              v8 = result[9];
              goto LABEL_85;
            }
            v10 = *(int *)(type metadata accessor for ItemMetadata() + 128);
LABEL_91:
            v32 = *(_QWORD *)(a2 + v10);
            swift_bridgeObjectRetain();
            result = (int *)swift_bridgeObjectRelease();
            *(_QWORD *)(v2 + v10) = v32;
          }
        }
        else
        {
          if (v6 < 0x4000)
          {
            if (v6 == 4096)
            {
              result = (int *)type metadata accessor for ItemMetadata();
              v8 = result[10];
            }
            else
            {
              if (v6 != 0x2000)
                goto LABEL_94;
              result = (int *)type metadata accessor for ItemMetadata();
              v8 = result[13];
            }
            goto LABEL_85;
          }
          if (v6 == 0x4000)
          {
            v16 = *(_BYTE *)(a2 + 8);
            *(_DWORD *)(v2 + 4) = *(_DWORD *)(a2 + 4);
            *(_BYTE *)(v2 + 8) = v16;
            goto LABEL_87;
          }
          if (v6 == 0x8000)
          {
            result = (int *)type metadata accessor for ItemMetadata();
            v8 = result[35];
            goto LABEL_85;
          }
          if (v6 != 0x10000)
            goto LABEL_94;
          result = (int *)type metadata accessor for ItemMetadata();
          v8 = result[21];
          if (*(_BYTE *)(a2 + result[12]) == 1)
          {
            v21 = 5;
LABEL_86:
            *(_BYTE *)(v2 + v8) = v21;
            goto LABEL_87;
          }
          *(_BYTE *)(v2 + v8) = *(_BYTE *)(a2 + v8);
          *(_QWORD *)(v2 + result[19]) = *(_QWORD *)(a2 + result[19]);
        }
      }
      else if (v6 > 0x1FFFFFFFFFFFLL)
      {
        if (v6 > 0x3FFFFFFFFFFFFLL)
        {
          if (v6 <= 0x1FFFFFFFFFFFFFLL)
          {
            if (v6 == 0x4000000000000)
              goto LABEL_87;
            if (v6 != 0x10000000000000)
              goto LABEL_94;
            result = (int *)type metadata accessor for ItemMetadata();
            v8 = result[18];
          }
          else
          {
            switch(v6)
            {
              case 0x20000000000000:
                result = (int *)type metadata accessor for ItemMetadata();
                v8 = result[23];
                break;
              case 0x40000000000000:
                result = (int *)type metadata accessor for ItemMetadata();
                v8 = result[24];
                break;
              case 0x100000000000000:
                result = (int *)type metadata accessor for ItemMetadata();
                v8 = result[22];
                break;
              default:
                goto LABEL_94;
            }
          }
          goto LABEL_85;
        }
        if (v6 <= 0x7FFFFFFFFFFFLL)
        {
          if (v6 != 0x200000000000)
          {
            if (v6 != 0x400000000000)
              goto LABEL_94;
            result = (int *)type metadata accessor for ItemMetadata();
            v17 = result[34];
            goto LABEL_69;
          }
          result = (int *)type metadata accessor for ItemMetadata();
LABEL_54:
          v8 = result[27];
          goto LABEL_85;
        }
        if (v6 == 0x800000000000)
        {
          result = (int *)type metadata accessor for ItemMetadata();
          v11 = result[36];
          v12 = *(_DWORD *)(a2 + v11);
          v13 = *(_BYTE *)(a2 + v11 + 4);
          v14 = v2 + v11;
          *(_DWORD *)v14 = v12;
          *(_BYTE *)(v14 + 4) = v13;
        }
        else
        {
          if (v6 != 0x1000000000000)
            goto LABEL_94;
          v9 = *(int *)(type metadata accessor for ItemMetadata() + 148);
LABEL_61:
          v19 = *(_QWORD *)(a2 + v9);
          v18 = *(_QWORD *)(a2 + v9 + 8);
          v20 = (_QWORD *)(v2 + v9);
          swift_bridgeObjectRetain();
          result = (int *)swift_bridgeObjectRelease();
          *v20 = v19;
          v20[1] = v18;
        }
      }
      else if (v6 <= 0x7FFFFFF)
      {
        if (v6 <= 0xFFFFFF)
        {
          if (v6 == 0x20000)
          {
            result = (int *)type metadata accessor for ItemMetadata();
            v8 = result[11];
          }
          else
          {
            if (v6 != 0x800000)
              goto LABEL_94;
            result = (int *)type metadata accessor for ItemMetadata();
            v8 = result[16];
          }
          goto LABEL_85;
        }
        if (v6 != 0x1000000 && v6 != 0x4000000)
        {
LABEL_94:
          result = (int *)sub_23B1C704C();
          __break(1u);
          return result;
        }
      }
      else if (v6 <= 0x1FFFFFFFFFFLL)
      {
        if (v6 != 0x8000000)
        {
          if (v6 != 0x10000000000)
            goto LABEL_94;
          *(_BYTE *)v2 = *(_BYTE *)a2;
        }
      }
      else if (v6 != 0x20000000000 && v6 != 0x80000000000)
      {
        if (v6 != 0x100000000000)
          goto LABEL_94;
        result = (int *)type metadata accessor for ItemMetadata();
        v8 = result[15];
LABEL_85:
        v21 = *(_BYTE *)(a2 + v8);
        goto LABEL_86;
      }
LABEL_87:
      v4 &= v7;
      if (!v4)
        return result;
    }
  }
  return result;
}

uint64_t sub_23AB5A3F4(char *a1, unint64_t a2, char a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  BOOL v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void (*v72)(uint64_t, uint64_t);
  char *v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  int v90;
  unsigned __int8 *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  char *v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  char *v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  char *v107;
  uint64_t v108;
  char *v109;
  int v110;
  int v111;
  int v112;
  char v113;
  int v114;
  char v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  char *v122;
  char v123;
  char *v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char v136;
  char *v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  char v142;
  uint64_t v143;
  int v144;
  char v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v162;
  unsigned __int8 *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  __int128 v188;
  unint64_t v189;

  v4 = v3;
  v170 = sub_23B1C7328();
  v165 = *(_QWORD *)(v170 - 8);
  MEMORY[0x24BDAC7A8](v170);
  v168 = (char *)&v162 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_23B1C5BDC();
  v169 = *(_QWORD *)(v171 - 8);
  v9 = MEMORY[0x24BDAC7A8](v171);
  v167 = (char *)&v162 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v166 = (char *)&v162 - v11;
  v12 = (int *)type metadata accessor for ItemMetadata();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v176 = (char *)&v162 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v175 = (char *)&v162 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v186 = (uint64_t)&v162 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v181 = (char *)&v162 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v180 = (char *)&v162 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v179 = (char *)&v162 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v177 = (uint64_t)&v162 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v178 = (uint64_t)&v162 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v162 = (uint64_t)&v162 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v163 = (unsigned __int8 *)&v162 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v185 = (uint64_t)&v162 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v184 = (uint64_t)&v162 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v183 = (uint64_t)&v162 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v182 = (uint64_t)&v162 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v43 = (char *)&v162 - v42;
  v44 = MEMORY[0x24BDAC7A8](v41);
  v46 = (char *)&v162 - v45;
  v47 = MEMORY[0x24BDAC7A8](v44);
  v49 = (char *)&v162 - v48;
  v50 = MEMORY[0x24BDAC7A8](v47);
  v52 = (char *)&v162 - v51;
  v53 = (a2 >> 11) & 1;
  if ((a3 & 1) != 0)
    LODWORD(v53) = 0;
  v173 = v53;
  v54 = (a3 & 1) == 0 && (a2 & 0x400) != 0;
  if (((v4[*(int *)(v50 + 36)] ^ a1[*(int *)(v50 + 36)]) & 1) != 0)
    v55 = ((unint64_t)(qword_23B1CFA38[*v4] != qword_23B1CFA38[*a1]) << 40) | 0x200;
  else
    v55 = (unint64_t)(qword_23B1CFA38[*v4] != qword_23B1CFA38[*a1]) << 40;
  v56 = v4[*(int *)(v50 + 84)];
  sub_23AA9BA80((uint64_t)v4, (uint64_t)&v162 - v51);
  if (v56)
    LOBYTE(v56) = v52[v12[12]] ^ 1;
  sub_23AA9F854((uint64_t)v52);
  v57 = a1[v12[21]];
  sub_23AA9BA80((uint64_t)a1, (uint64_t)v49);
  if (v57)
    LOBYTE(v57) = v49[v12[12]] ^ 1;
  sub_23AA9F854((uint64_t)v49);
  sub_23AA9BA80((uint64_t)v4, (uint64_t)v46);
  sub_23AA9BA80((uint64_t)a1, (uint64_t)v43);
  if ((v56 & 1) == (v57 & 1))
  {
    v60 = v46[v12[21]];
    sub_23AA9F854((uint64_t)v46);
    v61 = v43[v12[21]];
    sub_23AA9F854((uint64_t)v43);
    v62 = v60 == v61;
    v58 = v182;
    v59 = v183;
    if (v62)
      goto LABEL_17;
  }
  else
  {
    sub_23AA9F854((uint64_t)v43);
    sub_23AA9F854((uint64_t)v46);
    v58 = v182;
    v59 = v183;
  }
  v55 |= 0x10000uLL;
LABEL_17:
  if (((*((_WORD *)a1 + 5) ^ *((_WORD *)v4 + 5)) & 0x1C0) != 0)
    v63 = v55 | 4;
  else
    v63 = v55;
  if (((v4[v12[10]] ^ a1[v12[10]]) & 1) != 0)
    v63 |= 0x1000uLL;
  v64 = v12;
  if (((v4[v12[13]] ^ a1[v12[13]]) & 1) != 0)
    v65 = v63 | 0x2000;
  else
    v65 = v63;
  sub_23AA9BA80((uint64_t)v4, v58);
  sub_23AA9BA80((uint64_t)a1, v59);
  v174 = v64;
  if (v54)
  {
    v172 = v65;
    sub_23AA9F854(v59);
    sub_23AA9F854(v58);
  }
  else
  {
    v66 = *MEMORY[0x24BEE38B8];
    v67 = v165;
    v68 = *(void (**)(char *, uint64_t, uint64_t))(v165 + 104);
    v69 = (uint64_t)v168;
    v70 = v170;
    v68(v168, v66, v170);
    v164 = a1;
    v71 = v166;
    sub_23B12AD78(v69);
    v72 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
    v72(v69, v70);
    v68((char *)v69, v66, v70);
    v73 = v167;
    sub_23B12AD78(v69);
    v72(v69, v70);
    v74 = sub_23B1C5BC4();
    v75 = *(void (**)(char *, uint64_t))(v169 + 8);
    v76 = v73;
    v77 = v171;
    v75(v76, v171);
    v78 = v71;
    a1 = v164;
    v75(v78, v77);
    sub_23AA9F854(v183);
    sub_23AA9F854(v182);
    if (v74)
      v65 |= 0x400uLL;
    v172 = v65;
  }
  v79 = (uint64_t)v180;
  v80 = (uint64_t)v181;
  v82 = v178;
  v81 = (uint64_t)v179;
  v83 = v177;
  v84 = v184;
  v85 = v173;
  sub_23AA9BA80((uint64_t)v4, v184);
  v86 = v185;
  sub_23AA9BA80((uint64_t)a1, v185);
  if ((v85 & 1) != 0)
  {
    sub_23AA9F854(v86);
    sub_23AA9F854(v84);
    v87 = v172;
    v88 = v174;
    goto LABEL_40;
  }
  v89 = v84;
  v90 = fpfs_supports_parent_mtime_iopolicy();
  v91 = v163;
  sub_23AA9BA80(v89, (uint64_t)v163);
  if (v90)
  {
    sub_23AA9F854((uint64_t)v91);
    sub_23AA9BA80(v89, v82);
    sub_23AA9BA80(v185, v83);
    v88 = v174;
    goto LABEL_38;
  }
  v92 = *v91;
  v93 = v162;
  sub_23AB60C64((uint64_t)v91, v162);
  v88 = v174;
  if (v92 == 1)
  {
    sub_23AA9F854(v93);
    v94 = v184;
    sub_23AA9BA80(v184, v82);
    sub_23AA9BA80(v185, v83);
LABEL_37:
    sub_23AA9F854(v83);
    sub_23AA9F854(v82);
    sub_23AA9F854(v185);
    sub_23AA9F854(v94);
    v87 = v172;
    goto LABEL_40;
  }
  v95 = *(_BYTE *)(v93 + v174[27]);
  sub_23AA9F854(v93);
  v94 = v184;
  sub_23AA9BA80(v184, v82);
  sub_23AA9BA80(v185, v83);
  if ((v95 & 1) != 0)
    goto LABEL_37;
LABEL_38:
  v96 = *MEMORY[0x24BEE38B8];
  v97 = v165;
  v98 = *(void (**)(char *, uint64_t, uint64_t))(v165 + 104);
  v99 = (uint64_t)v168;
  v100 = v170;
  v98(v168, v96, v170);
  v164 = a1;
  v101 = v166;
  sub_23B12AD78(v99);
  v102 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
  v102(v99, v100);
  v103 = v96;
  v81 = (uint64_t)v179;
  v98((char *)v99, v103, v100);
  v104 = v167;
  sub_23B12AD78(v99);
  v102(v99, v100);
  v80 = (uint64_t)v181;
  v105 = sub_23B1C5BC4();
  v106 = *(void (**)(char *, uint64_t))(v169 + 8);
  v107 = v104;
  v108 = v171;
  v106(v107, v171);
  v109 = v101;
  a1 = v164;
  v106(v109, v108);
  v79 = (uint64_t)v180;
  sub_23AA9F854(v177);
  sub_23AA9F854(v178);
  sub_23AA9F854(v185);
  sub_23AA9F854(v184);
  v87 = v172;
  if (v105)
    v87 = v172 | 0x800;
LABEL_40:
  v110 = *v4;
  sub_23AA9BA80((uint64_t)v4, v81);
  if (v110 == 1)
  {
    sub_23AA9F854(v81);
    sub_23AA9BA80((uint64_t)v4, v79);
    sub_23AA9BA80((uint64_t)a1, v80);
  }
  else
  {
    v111 = *(unsigned __int8 *)(v81 + v88[27]);
    sub_23AA9F854(v81);
    sub_23AA9BA80((uint64_t)v4, v79);
    sub_23AA9BA80((uint64_t)a1, v80);
    if (v111 != 1)
    {
      sub_23AA9F854(v80);
      sub_23AA9F854(v79);
      goto LABEL_52;
    }
  }
  v112 = *(_DWORD *)(v79 + 4);
  v113 = *(_BYTE *)(v79 + 8);
  sub_23AA9F854(v79);
  v114 = *(_DWORD *)(v80 + 4);
  v115 = *(_BYTE *)(v80 + 8);
  sub_23AA9F854(v80);
  if ((v113 & 1) != 0)
  {
    if ((v115 & 1) != 0)
      goto LABEL_52;
LABEL_50:
    v87 |= 0x4000uLL;
    goto LABEL_52;
  }
  if (v112 == v114)
    v116 = v115;
  else
    v116 = 1;
  if ((v116 & 1) != 0)
    goto LABEL_50;
LABEL_52:
  if ((sub_23B12AAB0((uint64_t)&a1[v88[29]]) & 1) == 0)
    v87 |= 0x20uLL;
  v117 = v88[30];
  v118 = *(_QWORD *)&a1[v117];
  if (!*(_QWORD *)&v4[v117])
  {
    if (!v118)
      goto LABEL_60;
    goto LABEL_59;
  }
  if (!v118
    || (swift_bridgeObjectRetain(),
        v119 = swift_bridgeObjectRetain(),
        v120 = sub_23AF1B320(v119, v118),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v120 & 1) == 0))
  {
LABEL_59:
    v87 |= 0x40uLL;
  }
LABEL_60:
  v121 = v88[31];
  v122 = &v4[v121];
  v123 = v4[v121 + 8];
  v124 = &a1[v121];
  v125 = a1[v121 + 8];
  if ((v123 & 1) != 0)
  {
    if ((v125 & 1) != 0)
      goto LABEL_67;
LABEL_66:
    v87 |= 0x80uLL;
    goto LABEL_67;
  }
  if (*(_QWORD *)v122 != *(_QWORD *)v124)
    v125 = 1;
  if ((v125 & 1) != 0)
    goto LABEL_66;
LABEL_67:
  if (((v4[v88[11]] ^ a1[v88[11]]) & 1) != 0)
    v126 = v87 | 0x20000;
  else
    v126 = v87;
  if (((v4[v88[20]] ^ a1[v88[20]]) & 1) != 0)
    v126 |= 0x10uLL;
  if (((v4[v88[27]] ^ a1[v88[27]]) & 1) != 0)
    v126 |= 0x200000000000uLL;
  if (((v4[v88[15]] ^ a1[v88[15]]) & 1) != 0)
    v126 |= 0x100000000000uLL;
  if (((v4[v88[16]] ^ a1[v88[16]]) & 1) != 0)
    v127 = v126 | 0x800000;
  else
    v127 = v126;
  v128 = v88[32];
  v189 = *(_QWORD *)&v4[v128];
  if (v189)
  {
    swift_bridgeObjectRetain();
    sub_23B182420(0xD000000000000015, 0x800000023B1F8040, &v188);
    sub_23AAA3E18(v188, *((unint64_t *)&v188 + 1));
    v128 = v88[32];
  }
  v187 = *(_QWORD *)&a1[v128];
  if (v187)
  {
    swift_bridgeObjectRetain();
    sub_23B182420(0xD000000000000015, 0x800000023B1F8040, &v188);
    sub_23AAA3E18(v188, *((unint64_t *)&v188 + 1));
  }
  if (v189)
  {
    v129 = v189;
    v130 = v187;
    if (v187)
    {
LABEL_85:
      swift_bridgeObjectRetain();
      v131 = v130;
      goto LABEL_88;
    }
  }
  else
  {
    v129 = sub_23AA98FE0(MEMORY[0x24BEE4AF8]);
    v130 = v187;
    if (v187)
      goto LABEL_85;
  }
  swift_bridgeObjectRetain();
  v131 = sub_23AA98FE0(MEMORY[0x24BEE4AF8]);
LABEL_88:
  swift_bridgeObjectRetain();
  v132 = sub_23AB5D128(v129, v131);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v132 & 1) != 0)
    v133 = v127;
  else
    v133 = v127 | 0x100;
  v134 = v88[34];
  v135 = &v4[v134];
  v136 = v4[v134 + 8];
  v137 = &a1[v134];
  v138 = a1[v134 + 8];
  if ((v136 & 1) != 0)
  {
    v140 = (uint64_t)v175;
    v139 = (uint64_t)v176;
    if ((v138 & 1) != 0)
      goto LABEL_98;
LABEL_97:
    v133 |= 0x400000000000uLL;
    goto LABEL_98;
  }
  if (*(_QWORD *)v135 != *(_QWORD *)v137)
    v138 = 1;
  v140 = (uint64_t)v175;
  v139 = (uint64_t)v176;
  if ((v138 & 1) != 0)
    goto LABEL_97;
LABEL_98:
  v141 = v4[v88[36] + 4];
  sub_23AA9BA80((uint64_t)a1, v186);
  if ((v141 & 1) != 0)
  {
    sub_23AA9F854(v186);
    sub_23AA9BA80((uint64_t)v4, v140);
    sub_23AA9BA80((uint64_t)a1, v139);
LABEL_101:
    sub_23AA9F854(v139);
    sub_23AA9F854(v140);
    goto LABEL_106;
  }
  v142 = *(_BYTE *)(v186 + v88[36] + 4);
  sub_23AA9F854(v186);
  sub_23AA9BA80((uint64_t)v4, v140);
  sub_23AA9BA80((uint64_t)a1, v139);
  if ((v142 & 1) != 0)
    goto LABEL_101;
  v143 = v140 + v88[36];
  v144 = *(_DWORD *)v143;
  v145 = *(_BYTE *)(v143 + 4);
  sub_23AA9F854(v140);
  v146 = v139 + v88[36];
  v147 = *(_DWORD *)v146;
  v148 = v139;
  v149 = *(unsigned __int8 *)(v146 + 4);
  sub_23AA9F854(v148);
  if ((v145 & 1) == 0)
    v149 = (v144 == v147) & ~v149;
  if (!v149)
    v133 |= 0x800000000000uLL;
LABEL_106:
  v150 = v88[37];
  v151 = &v4[v150];
  v152 = *(_QWORD *)&v4[v150 + 8];
  v153 = &a1[v150];
  v154 = *((_QWORD *)v153 + 1);
  if (!v152)
  {
    if (!v154)
      goto LABEL_114;
    goto LABEL_113;
  }
  if (!v154 || (*(_QWORD *)v151 != *(_QWORD *)v153 || v152 != v154) && (sub_23B1C7388() & 1) == 0)
LABEL_113:
    v133 |= 0x1000000000000uLL;
LABEL_114:
  if (((v4[v88[18]] ^ a1[v88[18]]) & 1) != 0)
    v155 = v133 | 0x10000000000000;
  else
    v155 = v133;
  v156 = v88[22];
  if (((v4[v88[23]] ^ a1[v88[23]]) & 1) != 0)
    v155 |= 0x20000000000000uLL;
  if (((v4[v88[24]] ^ a1[v88[24]]) & 1) != 0)
    v157 = v155 | 0x40000000000000;
  else
    v157 = v155;
  v158 = v4[v156];
  v159 = a1[v156];
  swift_bridgeObjectRelease();
  if (v158 == v159)
    v160 = v157;
  else
    v160 = v157 | 0x100000000000000;
  swift_bridgeObjectRelease();
  return v160;
}

int *sub_23AB5B178@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_23AA9BA80(v3, a3);
  return sub_23AB59E60(a1, a2);
}

BOOL sub_23AB5B1C0(char *a1)
{
  char *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  int v26;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  void (*v35)(uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  v2 = v1;
  v48 = sub_23B1C7328();
  v44 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v47 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23B1C5BDC();
  v6 = *(_QWORD *)(v5 - 8);
  v45 = v5;
  v46 = v6;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v41 - v10;
  v12 = type metadata accessor for ItemMetadata();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (unsigned __int8 *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v41 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v41 - v19;
  v21 = qword_23B1CFA38[*v1];
  v22 = qword_23B1CFA38[*a1];
  sub_23AA9BA80((uint64_t)v2, (uint64_t)&v41 - v19);
  sub_23AA9BA80((uint64_t)a1, (uint64_t)v18);
  if (v21 != v22)
  {
    sub_23AA9F854((uint64_t)v18);
    sub_23AA9F854((uint64_t)v20);
    return 0;
  }
  v42 = v11;
  v43 = v9;
  v24 = v47;
  v23 = v48;
  v25 = v20[*(int *)(v12 + 108)];
  sub_23AA9F854((uint64_t)v20);
  v26 = v18[*(int *)(v12 + 108)];
  sub_23AA9F854((uint64_t)v18);
  if (v25 != v26
    || *v2 != 1
    && (v2[*(int *)(v12 + 108)] & 1) == 0
    && *(_QWORD *)&v2[*(int *)(v12 + 100)] != *(_QWORD *)&a1[*(int *)(v12 + 100)])
  {
    return 0;
  }
  v28 = fpfs_supports_parent_mtime_iopolicy();
  sub_23AA9BA80((uint64_t)v2, (uint64_t)v15);
  if (v28)
  {
    sub_23AA9F854((uint64_t)v15);
  }
  else
  {
    v29 = *v15;
    sub_23AA9F854((uint64_t)v15);
    if (v29 == 1)
      return 1;
  }
  v30 = *MEMORY[0x24BEE38B8];
  v31 = v44;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 104);
  v33 = (uint64_t)v24;
  v32(v24, v30, v23);
  v34 = v42;
  sub_23B12AD78(v33);
  v35 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v35(v33, v23);
  v32((char *)v33, v30, v23);
  v36 = v43;
  sub_23B12AD78(v33);
  v35(v33, v23);
  v37 = sub_23B1C5BC4();
  v38 = *(void (**)(char *, uint64_t))(v46 + 8);
  v39 = v36;
  v40 = v45;
  v38(v39, v45);
  v38(v34, v40);
  return v37 == 0;
}

uint64_t sub_23AB5B4C4()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  int v7;
  char *v8;
  char v9;
  char v11;
  uint64_t v12;

  v1 = type metadata accessor for ItemMetadata();
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v12 - v5;
  v7 = *v0;
  v8 = (char *)&v12 - v5;
  if (v7 == 2)
  {
    sub_23AA9BA80((uint64_t)v0, (uint64_t)v8);
LABEL_4:
    sub_23AA9F854((uint64_t)v6);
    sub_23AA9BA80((uint64_t)v0, (uint64_t)v4);
    goto LABEL_5;
  }
  sub_23AA9BA80((uint64_t)v0, (uint64_t)v8);
  if (v7 == 1)
    goto LABEL_4;
  v11 = v6[*(int *)(v1 + 48)];
  sub_23AA9F854((uint64_t)v6);
  sub_23AA9BA80((uint64_t)v0, (uint64_t)v4);
  if ((v11 & 1) == 0)
  {
    v9 = v4[*(int *)(v1 + 44)] ^ 1;
    goto LABEL_6;
  }
LABEL_5:
  v9 = 0;
LABEL_6:
  sub_23AA9F854((uint64_t)v4);
  return v9 & 1;
}

uint64_t sub_23AB5B5C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ItemMetadata() + 128));
  if (!v1 || !*(_QWORD *)(v1 + 16))
    return 0;
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v8 = 0;
  while (v5)
  {
    v5 &= v5 - 1;
LABEL_7:
    result = sub_23B1C656C();
    if ((result & 1) != 0)
    {
      v12 = 1;
LABEL_30:
      swift_release();
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  v9 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v9 >= v6)
    goto LABEL_29;
  v10 = *(_QWORD *)(v2 + 8 * v9);
  ++v8;
  if (v10)
    goto LABEL_26;
  v8 = v9 + 1;
  if (v9 + 1 >= v6)
    goto LABEL_29;
  v10 = *(_QWORD *)(v2 + 8 * v8);
  if (v10)
    goto LABEL_26;
  v8 = v9 + 2;
  if (v9 + 2 >= v6)
    goto LABEL_29;
  v10 = *(_QWORD *)(v2 + 8 * v8);
  if (v10)
    goto LABEL_26;
  v8 = v9 + 3;
  if (v9 + 3 >= v6)
    goto LABEL_29;
  v10 = *(_QWORD *)(v2 + 8 * v8);
  if (v10)
    goto LABEL_26;
  v8 = v9 + 4;
  if (v9 + 4 >= v6)
    goto LABEL_29;
  v10 = *(_QWORD *)(v2 + 8 * v8);
  if (v10)
  {
LABEL_26:
    v5 = (v10 - 1) & v10;
    goto LABEL_7;
  }
  v11 = v9 + 5;
  if (v11 >= v6)
  {
LABEL_29:
    v12 = 0;
    goto LABEL_30;
  }
  v10 = *(_QWORD *)(v2 + 8 * v11);
  if (v10)
  {
    v8 = v11;
    goto LABEL_26;
  }
  while (1)
  {
    v8 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v8 >= v6)
      goto LABEL_29;
    v10 = *(_QWORD *)(v2 + 8 * v8);
    ++v11;
    if (v10)
      goto LABEL_26;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_23AB5B784(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23AB5B7B0 + 4 * byte_23B1CF67C[a1]))(1684957547, 0xE400000000000000);
}

uint64_t sub_23AB5B7B0()
{
  return 0x657449646C696863;
}

unint64_t sub_23AB5B7D4()
{
  return 0xD000000000000010;
}

unint64_t sub_23AB5B870()
{
  return 0xD000000000000015;
}

unint64_t sub_23AB5B88C()
{
  return 0xD000000000000014;
}

uint64_t sub_23AB5B8A4()
{
  return 0x6F52636E79537369;
}

uint64_t sub_23AB5B8C4()
{
  return 0x65726F6E67497369;
}

uint64_t sub_23AB5B8E4()
{
  return 0x6F6E67496E497369;
}

uint64_t sub_23AB5B90C()
{
  return 0x6863617465447369;
}

uint64_t sub_23AB5B930()
{
  return 0x53747365736F6C63;
}

uint64_t sub_23AB5B954()
{
  return 0x656C617461447369;
}

uint64_t sub_23AB5B970()
{
  return 0x6E6F697463697665;
}

uint64_t sub_23AB5B9A8()
{
  return 0x6150636E79537369;
}

unint64_t sub_23AB5B9C8()
{
  return 0xD000000000000022;
}

uint64_t sub_23AB5B9E0()
{
  return 1702521203;
}

uint64_t sub_23AB5B9EC()
{
  return 0x6C61636973796870;
}

uint64_t sub_23AB5BA0C()
{
  return 0x67616B6361507369;
}

uint64_t sub_23AB5BA28()
{
  return 0x6C646E7542736168;
}

uint64_t sub_23AB5BA68()
{
  return 1936154996;
}

uint64_t sub_23AB5BA74()
{
  return 0x657469726F766166;
}

unint64_t sub_23AB5BA94()
{
  return 0xD000000000000012;
}

uint64_t sub_23AB5BAAC()
{
  return 0x69746E6172617571;
}

uint64_t sub_23AB5BAD0()
{
  return 0x65707954736FLL;
}

uint64_t sub_23AB5BAE4()
{
  return 0x7272757365527369;
}

uint64_t sub_23AB5BB08()
{
  return 0x6E756F436B6E696CLL;
}

void sub_23AB5BB28()
{
  JUMPOUT(0x23AB5BB3CLL);
}

uint64_t sub_23AB5BB48()
{
  sub_23B1C74A8();
  sub_23B1C74B4();
  return sub_23B1C74E4();
}

uint64_t sub_23AB5BB8C()
{
  return sub_23B1C74B4();
}

uint64_t sub_23AB5BBB4()
{
  sub_23B1C74A8();
  sub_23B1C74B4();
  return sub_23B1C74E4();
}

uint64_t sub_23AB5BBF4()
{
  unsigned __int8 *v0;

  return sub_23AB5B784(*v0);
}

uint64_t sub_23AB5BBFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23AB5FDE8(a1, a2);
  *a3 = result;
  return result;
}

void sub_23AB5BC20(_BYTE *a1@<X8>)
{
  *a1 = 34;
}

uint64_t sub_23AB5BC2C()
{
  sub_23AB5E9C4();
  return sub_23B1C7544();
}

uint64_t sub_23AB5BC54()
{
  sub_23AB5E9C4();
  return sub_23B1C7550();
}

uint64_t sub_23AB5BC7C(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  int *v10;
  _BYTE *v11;
  uint64_t v12;
  char v13;
  __int128 v15;
  char v16;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2400);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AB5E9C4();
  sub_23B1C7538();
  LOBYTE(v15) = *v3;
  v16 = 0;
  sub_23AB5EA08();
  sub_23B1C72A4();
  if (!v2)
  {
    v9 = v3[8];
    LOBYTE(v15) = 1;
    v16 = v9;
    sub_23B1C725C();
    LOBYTE(v15) = 2;
    sub_23B1C72C8();
    v10 = (int *)type metadata accessor for ItemMetadata();
    LOBYTE(v15) = 3;
    sub_23B1C5BDC();
    sub_23AA7E38C(&qword_2569E2418, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_23B1C72A4();
    LOBYTE(v15) = 4;
    sub_23B1C72A4();
    LOBYTE(v15) = 5;
    sub_23B1C7280();
    LOBYTE(v15) = 6;
    sub_23B1C7280();
    LOBYTE(v15) = 7;
    sub_23B1C7280();
    LOBYTE(v15) = 8;
    sub_23B1C7280();
    LOBYTE(v15) = 9;
    sub_23B1C7280();
    v15 = *(_OWORD *)&v3[v10[14]];
    v16 = 10;
    sub_23AB5EA4C();
    sub_23B1C7238();
    LOBYTE(v15) = 11;
    sub_23B1C7280();
    LOBYTE(v15) = 12;
    sub_23B1C7280();
    LOBYTE(v15) = 13;
    sub_23B1C722C();
    LOBYTE(v15) = 14;
    sub_23B1C7280();
    LOBYTE(v15) = 15;
    sub_23B1C72E0();
    LOBYTE(v15) = 16;
    sub_23B1C7280();
    LOBYTE(v15) = v3[v10[21]];
    v16 = 17;
    sub_23AB5EA90();
    sub_23B1C72A4();
    LOBYTE(v15) = v3[v10[22]];
    v16 = 18;
    sub_23AB5EAD4();
    sub_23B1C72A4();
    LOBYTE(v15) = 19;
    sub_23B1C7280();
    LOBYTE(v15) = 20;
    sub_23B1C7280();
    LOBYTE(v15) = 21;
    sub_23B1C72BC();
    LOBYTE(v15) = 22;
    sub_23B1C72BC();
    LOBYTE(v15) = 23;
    sub_23B1C7280();
    LOBYTE(v15) = 24;
    sub_23B1C7280();
    LOBYTE(v15) = 25;
    sub_23B1C7238();
    *(_QWORD *)&v15 = *(_QWORD *)&v3[v10[30]];
    v16 = 26;
    sub_23AB5EB18();
    sub_23B1C7238();
    LOBYTE(v15) = 27;
    sub_23B1C7268();
    *(_QWORD *)&v15 = *(_QWORD *)&v3[v10[32]];
    v16 = 28;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E5498);
    sub_23AAB748C(&qword_2569E2440, (uint64_t (*)(void))sub_23AB5EB5C, MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    sub_23B1C7238();
    v15 = *(_OWORD *)&v3[v10[33]];
    v16 = 29;
    sub_23AB5EB5C();
    sub_23B1C7238();
    v11 = &v3[v10[34]];
    v12 = *(_QWORD *)v11;
    LOBYTE(v11) = v11[8];
    *(_QWORD *)&v15 = v12;
    BYTE8(v15) = (_BYTE)v11;
    v16 = 30;
    type metadata accessor for NSFileProviderTypeAndCreator(0);
    sub_23AA7E38C(&qword_2569E2450, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderTypeAndCreator, (uint64_t)&unk_23B1CF750);
    sub_23B1C7238();
    LOBYTE(v15) = 31;
    sub_23B1C7280();
    v13 = v3[v10[36] + 4];
    LOBYTE(v15) = 32;
    v16 = v13;
    sub_23B1C725C();
    LOBYTE(v15) = 33;
    sub_23B1C7220();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_23AB5C4B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(void);
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  char *v31;
  void (*v32)(_BYTE *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  __int128 v42;
  char *v43;
  char v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _BYTE *v52;
  _QWORD v54[2];
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int *v74;
  _BYTE *v75;
  _QWORD *v76;
  __int128 v77;
  char v78;

  v76 = a1;
  v58 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v2);
  v57 = (uint64_t)v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23B1C5BDC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v61 = (char *)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v60 = (char *)v54 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2458);
  v62 = *(_QWORD *)(v9 - 8);
  v63 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for ItemMetadata();
  v13 = (int *)MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_DWORD *)v15 + 1) = 0;
  v15[8] = 1;
  v16 = &v15[v13[14]];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v72 = v16;
  v73 = v4;
  v59 = v13[17];
  v15[v59] = 2;
  v17 = (uint64_t)&v15[v13[29]];
  v65 = v5;
  v18 = *(void (**)(void))(v5 + 56);
  v70 = v17;
  v18();
  v69 = v12[30];
  *(_QWORD *)&v15[v69] = 0;
  v19 = &v15[v12[31]];
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  v67 = v12[32];
  *(_QWORD *)&v15[v67] = 0;
  v68 = &v15[v12[33]];
  *(_OWORD *)v68 = xmmword_23B1CA780;
  v20 = &v15[v12[34]];
  *(_QWORD *)v20 = 0;
  v20[8] = 1;
  v21 = &v15[v12[36]];
  *(_DWORD *)v21 = 0;
  v21[4] = 1;
  v74 = v12;
  v75 = v15;
  v22 = &v15[v12[37]];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  v71 = v22;
  __swift_project_boxed_opaque_existential_1(v76, v76[3]);
  sub_23AB5E9C4();
  v64 = v11;
  v23 = v66;
  sub_23B1C7520();
  if (v23)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
    swift_bridgeObjectRelease();
    sub_23AA8A05C(v70, (uint64_t *)&unk_2542E4310);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23AAA3E18(*(_QWORD *)v68, *((_QWORD *)v68 + 1));
    return swift_bridgeObjectRelease();
  }
  else
  {
    v25 = v60;
    v24 = v61;
    v26 = v59;
    v55 = (uint64_t *)v19;
    v56 = v20;
    v66 = v21;
    v78 = 0;
    sub_23AB5EBA0();
    sub_23B1C71C0();
    v27 = v75;
    *v75 = v77;
    LOBYTE(v77) = 1;
    v28 = sub_23B1C7184();
    v29 = v73;
    v30 = v74;
    *((_DWORD *)v27 + 1) = v28;
    v27[8] = BYTE4(v28) & 1;
    LOBYTE(v77) = 2;
    *((_WORD *)v27 + 5) = sub_23B1C71E4();
    LOBYTE(v77) = 3;
    v54[1] = sub_23AA7E38C(&qword_2569E2468, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    sub_23B1C71C0();
    v31 = v25;
    v32 = *(void (**)(_BYTE *, char *, uint64_t))(v65 + 32);
    v32(&v27[v30[7]], v31, v29);
    LOBYTE(v77) = 4;
    sub_23B1C71C0();
    v32(&v27[v30[8]], v24, v29);
    LOBYTE(v77) = 5;
    v27[v30[9]] = sub_23B1C71A8() & 1;
    LOBYTE(v77) = 6;
    v27[v30[10]] = sub_23B1C71A8() & 1;
    LOBYTE(v77) = 7;
    v27[v30[11]] = sub_23B1C71A8() & 1;
    LOBYTE(v77) = 8;
    v27[v30[12]] = sub_23B1C71A8() & 1;
    LOBYTE(v77) = 9;
    v75[v74[13]] = sub_23B1C71A8() & 1;
    v78 = 10;
    sub_23AA7E3CC();
    sub_23B1C7160();
    *(_OWORD *)v72 = v77;
    LOBYTE(v77) = 11;
    v75[v74[15]] = sub_23B1C71A8() & 1;
    LOBYTE(v77) = 12;
    v75[v74[16]] = sub_23B1C71A8() & 1;
    LOBYTE(v77) = 13;
    v75[v26] = sub_23B1C713C();
    LOBYTE(v77) = 14;
    v75[v74[18]] = sub_23B1C71A8() & 1;
    LOBYTE(v77) = 15;
    *(_QWORD *)&v75[v74[19]] = sub_23B1C71FC();
    LOBYTE(v77) = 16;
    v75[v74[20]] = sub_23B1C71A8() & 1;
    v78 = 17;
    sub_23AB5EBE4();
    sub_23B1C71C0();
    v75[v74[21]] = v77;
    v78 = 18;
    sub_23AB5EC28();
    sub_23B1C71C0();
    v75[v74[22]] = v77;
    LOBYTE(v77) = 19;
    v75[v74[23]] = sub_23B1C71A8() & 1;
    LOBYTE(v77) = 20;
    v75[v74[24]] = sub_23B1C71A8() & 1;
    LOBYTE(v77) = 21;
    *(_QWORD *)&v75[v74[25]] = sub_23B1C71D8();
    LOBYTE(v77) = 22;
    *(_QWORD *)&v75[v74[26]] = sub_23B1C71D8();
    LOBYTE(v77) = 23;
    v75[v74[27]] = sub_23B1C71A8() & 1;
    LOBYTE(v77) = 24;
    v75[v74[28]] = sub_23B1C71A8() & 1;
    LOBYTE(v77) = 25;
    sub_23B1C7160();
    sub_23AB5E930(v57, v70);
    v78 = 26;
    sub_23AAB3014();
    sub_23B1C7160();
    v33 = v77;
    v34 = v69;
    v35 = v75;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v35[v34] = v33;
    LOBYTE(v77) = 27;
    v36 = sub_23B1C7190();
    v37 = v55;
    *v55 = v36;
    *((_BYTE *)v37 + 8) = v38 & 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E5498);
    v78 = 28;
    sub_23AAB748C(&qword_2542E7450, (uint64_t (*)(void))sub_23AB5EC6C, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
    sub_23B1C7160();
    v39 = v77;
    v40 = v67;
    v41 = v75;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v41[v40] = v39;
    v78 = 29;
    sub_23AB5EC6C();
    sub_23B1C7160();
    v42 = v77;
    v43 = v68;
    sub_23AAA3E18(*(_QWORD *)v68, *((_QWORD *)v68 + 1));
    *(_OWORD *)v43 = v42;
    type metadata accessor for NSFileProviderTypeAndCreator(0);
    v78 = 30;
    sub_23AA7E38C(&qword_2569E2490, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderTypeAndCreator, (uint64_t)&unk_23B1CF724);
    sub_23B1C7160();
    v44 = BYTE8(v77);
    v45 = v56;
    *(_QWORD *)v56 = v77;
    v45[8] = v44;
    LOBYTE(v77) = 31;
    v75[v74[35]] = sub_23B1C71A8() & 1;
    LOBYTE(v77) = 32;
    v46 = sub_23B1C7184();
    v47 = v66;
    *(_DWORD *)v66 = v46;
    v47[4] = BYTE4(v46) & 1;
    LOBYTE(v77) = 33;
    v48 = sub_23B1C7130();
    v50 = v49;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v63);
    v51 = (uint64_t *)v71;
    swift_bridgeObjectRelease();
    *v51 = v48;
    v51[1] = v50;
    v52 = v75;
    sub_23AA9BA80((uint64_t)v75, v58);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
    return sub_23AA9F854((uint64_t)v52);
  }
}

uint64_t sub_23AB5D100@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23AB5C4B0(a1, a2);
}

uint64_t sub_23AB5D114(_QWORD *a1)
{
  return sub_23AB5BC7C(a1);
}

uint64_t sub_23AB5D128(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  int64_t v21;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = 1 << *(_BYTE *)(a1 + 32);
    v5 = -1;
    if (v4 < 64)
      v5 = ~(-1 << v4);
    v21 = (unint64_t)(v4 + 63) >> 6;
    if ((v5 & v3) != 0)
    {
      v6 = __clz(__rbit64(v5 & v3));
LABEL_22:
      v10 = 16 * v6;
      v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v10);
      v12 = *v11;
      v13 = v11[1];
      v14 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v10);
      v16 = *v14;
      v15 = v14[1];
      swift_bridgeObjectRetain();
      sub_23AAAE668(v16, v15);
      v17 = sub_23AAAF4C4(v12, v13);
      v19 = v18;
      swift_bridgeObjectRelease();
      if ((v19 & 1) != 0)
        __asm { BR              X8 }
      sub_23AAAE53C(v16, v15);
      return 0;
    }
    if ((unint64_t)(v4 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 72);
      v8 = 1;
      if (v7)
        goto LABEL_21;
      v8 = 2;
      if (v21 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
        goto LABEL_21;
      v8 = 3;
      if (v21 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
        goto LABEL_21;
      v8 = 4;
      if (v21 <= 4)
        return 1;
      v7 = *(_QWORD *)(a1 + 96);
      if (v7)
      {
LABEL_21:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
        goto LABEL_22;
      }
      v9 = 5;
      if (v21 > 5)
      {
        v7 = *(_QWORD *)(a1 + 104);
        if (v7)
        {
          v8 = 5;
          goto LABEL_21;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x23AB5DB40);
          }
          if (v8 >= v21)
            break;
          v7 = *(_QWORD *)(a1 + 64 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_21;
        }
      }
    }
    return 1;
  }
  return 0;
}

BOOL sub_23AB5DC04(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  int *v21;
  _BOOL8 result;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  _BOOL4 v51;
  int *v52;
  uint64_t v53;
  unsigned int (*v54)(unint64_t, uint64_t, uint64_t);
  uint64_t v55;
  char v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char *v63;
  char v64;
  char *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  char *v80;
  char v81;
  char *v82;
  int v83;
  uint64_t v84;
  char *v85;
  char v86;
  char *v87;
  int v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;

  v4 = sub_23B1C5BDC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E67B0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v94 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v94 - v18;
  if (qword_23B1CFA38[*a1] != qword_23B1CFA38[*a2])
    return 0;
  v20 = a2[8];
  if ((a1[8] & 1) != 0)
  {
    if (!a2[8])
      return 0;
  }
  else
  {
    if (*((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1))
      v20 = 1;
    if ((v20 & 1) != 0)
      return 0;
  }
  if (*((unsigned __int16 *)a1 + 5) != *((unsigned __int16 *)a2 + 5))
    return 0;
  v103 = v4;
  v21 = (int *)type metadata accessor for ItemMetadata();
  if ((sub_23B1C5BA0() & 1) == 0
    || (sub_23B1C5BA0() & 1) == 0
    || a1[v21[9]] != a2[v21[9]]
    || a1[v21[10]] != a2[v21[10]]
    || a1[v21[11]] != a2[v21[11]]
    || a1[v21[12]] != a2[v21[12]]
    || a1[v21[13]] != a2[v21[13]])
  {
    return 0;
  }
  v23 = v21[14];
  v24 = (unint64_t *)&a1[v23];
  v25 = *(_QWORD *)&a1[v23 + 8];
  v26 = (uint64_t *)&a2[v23];
  v27 = v26[1];
  v102 = v25;
  if (!v25)
  {
    if (v27)
      return 0;
    goto LABEL_40;
  }
  if (!v27)
    return 0;
  v97 = v21;
  v101 = *v24;
  v99 = *v26;
  v28 = v27;
  swift_bridgeObjectRetain_n();
  v100 = v28;
  swift_bridgeObjectRetain();
  v96 = sub_23AAAE580(v101, v102);
  v98 = v29;
  swift_bridgeObjectRelease();
  if (v98)
  {
    if (v96 == 12565487 && v98 == 0xA300000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_27:
      v30 = v102;
      swift_bridgeObjectRetain();
      v31 = sub_23B1C64B8();
      v101 = sub_23AA8A1BC(v31, v101, v30);
      v98 = v32;
      v95 = v34;
      v96 = v33;
      swift_bridgeObjectRelease();
      v101 = MEMORY[0x23B85ED8C](v101, v98, v96, v95);
      v98 = v35;
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
    LODWORD(v96) = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v96 & 1) != 0)
      goto LABEL_27;
  }
  v98 = swift_bridgeObjectRetain();
LABEL_29:
  v36 = v100;
  swift_bridgeObjectRetain();
  v96 = sub_23AAAE580(v99, v36);
  v38 = v37;
  swift_bridgeObjectRelease();
  if (!v38)
    goto LABEL_35;
  if (v96 != 12565487 || v38 != 0xA300000000000000)
  {
    LODWORD(v96) = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v96 & 1) != 0)
      goto LABEL_34;
LABEL_35:
    v47 = swift_bridgeObjectRetain();
    v45 = v99;
    goto LABEL_36;
  }
  swift_bridgeObjectRelease();
LABEL_34:
  v39 = v100;
  swift_bridgeObjectRetain();
  v40 = sub_23B1C64B8();
  v41 = sub_23AA8A1BC(v40, v99, v39);
  v95 = v42;
  v96 = v41;
  v94 = v43;
  v99 = v44;
  swift_bridgeObjectRelease();
  v45 = MEMORY[0x23B85ED8C](v96, v95, v94, v99);
  v96 = v46;
  swift_bridgeObjectRelease();
  v47 = v96;
LABEL_36:
  if (v101 == v45 && v98 == v47)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v21 = v97;
  }
  else
  {
    LODWORD(v101) = sub_23B1C7388();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    v21 = v97;
    if ((v101 & 1) == 0)
      return result;
  }
LABEL_40:
  if (a1[v21[15]] != a2[v21[15]] || a1[v21[16]] != a2[v21[16]])
    return 0;
  v48 = v21[17];
  v49 = a1[v48];
  v50 = a2[v48];
  if (v49 == 2)
  {
    if (v50 != 2)
      return 0;
LABEL_47:
    v97 = v21;
    if (a1[v21[18]] != a2[v21[18]]
      || *(_QWORD *)&a1[v97[19]] != *(_QWORD *)&a2[v97[19]]
      || a1[v97[20]] != a2[v97[20]]
      || a1[v97[21]] != a2[v97[21]]
      || a1[v97[22]] != a2[v97[22]]
      || a1[v97[23]] != a2[v97[23]]
      || a1[v97[24]] != a2[v97[24]]
      || *(_QWORD *)&a1[v97[25]] != *(_QWORD *)&a2[v97[25]]
      || *(_QWORD *)&a1[v97[26]] != *(_QWORD *)&a2[v97[26]]
      || a1[v97[27]] != a2[v97[27]]
      || a1[v97[28]] != a2[v97[28]])
    {
      return 0;
    }
    v52 = v97;
    sub_23AA8EFC8((uint64_t)&a1[v97[29]], (uint64_t)v19, (uint64_t *)&unk_2542E4310);
    sub_23AA8EFC8((uint64_t)&a2[v52[29]], (uint64_t)v17, (uint64_t *)&unk_2542E4310);
    v53 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_23AA8EFC8((uint64_t)v19, (uint64_t)v10, (uint64_t *)&unk_2542E4310);
    v102 = v53;
    sub_23AA8EFC8((uint64_t)v17, v53, (uint64_t *)&unk_2542E4310);
    v54 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v54((unint64_t)v10, 1, v103) == 1)
    {
      sub_23AA8A05C((uint64_t)v17, (uint64_t *)&unk_2542E4310);
      sub_23AA8A05C((uint64_t)v19, (uint64_t *)&unk_2542E4310);
      if (v54(v102, 1, v103) == 1)
      {
        sub_23AA8A05C((uint64_t)v10, (uint64_t *)&unk_2542E4310);
        goto LABEL_65;
      }
    }
    else
    {
      sub_23AA8EFC8((uint64_t)v10, (uint64_t)v14, (uint64_t *)&unk_2542E4310);
      if (v54(v102, 1, v103) != 1)
      {
        v55 = v103;
        (*(void (**)(char *, unint64_t, uint64_t))(v5 + 32))(v7, v102, v103);
        sub_23AA7E38C(&qword_2569E24B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
        v56 = sub_23B1C63A4();
        v57 = *(void (**)(char *, uint64_t))(v5 + 8);
        v57(v7, v55);
        sub_23AA8A05C((uint64_t)v17, (uint64_t *)&unk_2542E4310);
        sub_23AA8A05C((uint64_t)v19, (uint64_t *)&unk_2542E4310);
        v57(v14, v55);
        sub_23AA8A05C((uint64_t)v10, (uint64_t *)&unk_2542E4310);
        if ((v56 & 1) == 0)
          return 0;
LABEL_65:
        v58 = v97[30];
        v59 = *(_QWORD *)&a2[v58];
        if (*(_QWORD *)&a1[v58])
        {
          if (!v59)
            return 0;
          swift_bridgeObjectRetain();
          v60 = swift_bridgeObjectRetain();
          v61 = sub_23AF1B320(v60, v59);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v61 & 1) == 0)
            return 0;
        }
        else if (v59)
        {
          return 0;
        }
        v62 = v97[31];
        v63 = &a1[v62];
        v64 = a1[v62 + 8];
        v65 = &a2[v62];
        v66 = a2[v62 + 8];
        if ((v64 & 1) != 0)
        {
          if (!v66)
            return 0;
        }
        else
        {
          if (*(_QWORD *)v63 != *(_QWORD *)v65)
            LOBYTE(v66) = 1;
          if ((v66 & 1) != 0)
            return 0;
        }
        v67 = v97[32];
        v68 = *(_QWORD *)&a2[v67];
        if (*(_QWORD *)&a1[v67])
        {
          if (!v68)
            return 0;
          swift_bridgeObjectRetain();
          v69 = swift_bridgeObjectRetain();
          v70 = sub_23AB5D128(v69, v68);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v70 & 1) == 0)
            return 0;
        }
        else if (v68)
        {
          return 0;
        }
        v71 = v97[33];
        v72 = *(_QWORD *)&a1[v71];
        v73 = *(_QWORD *)&a1[v71 + 8];
        v74 = (uint64_t *)&a2[v71];
        v75 = *v74;
        v76 = v74[1];
        if (v73 >> 60 == 15)
        {
          if (v76 >> 60 == 15)
          {
LABEL_87:
            v79 = v97[34];
            v80 = &a1[v79];
            v81 = a1[v79 + 8];
            v82 = &a2[v79];
            v83 = a2[v79 + 8];
            if ((v81 & 1) != 0)
            {
              if (!v83)
                return 0;
            }
            else
            {
              if (*(_QWORD *)v80 != *(_QWORD *)v82)
                LOBYTE(v83) = 1;
              if ((v83 & 1) != 0)
                return 0;
            }
            if (a1[v97[35]] == a2[v97[35]])
            {
              v84 = v97[36];
              v85 = &a1[v84];
              v86 = a1[v84 + 4];
              v87 = &a2[v84];
              v88 = a2[v84 + 4];
              if ((v86 & 1) != 0)
              {
                if (!v88)
                  return 0;
              }
              else
              {
                if (*(_DWORD *)v85 != *(_DWORD *)v87)
                  LOBYTE(v88) = 1;
                if ((v88 & 1) != 0)
                  return 0;
              }
              v89 = v97[37];
              v90 = &a1[v89];
              v91 = *(_QWORD *)&a1[v89 + 8];
              v92 = &a2[v89];
              v93 = *((_QWORD *)v92 + 1);
              if (v91)
                return v93 && (*(_QWORD *)v90 == *(_QWORD *)v92 && v91 == v93 || (sub_23B1C7388() & 1) != 0);
              if (!v93)
                return 1;
            }
            return 0;
          }
        }
        else if (v76 >> 60 != 15)
        {
          sub_23AAA3E2C(v72, v73);
          sub_23AAA3E2C(v75, v76);
          sub_23AAAE6AC(v72, v73);
          v78 = v77;
          sub_23AAA3E18(v75, v76);
          sub_23AAA3E18(v72, v73);
          if ((v78 & 1) == 0)
            return 0;
          goto LABEL_87;
        }
        sub_23AAA3E2C(v72, v73);
        sub_23AAA3E2C(v75, v76);
        sub_23AAA3E18(v72, v73);
        sub_23AAA3E18(v75, v76);
        return 0;
      }
      sub_23AA8A05C((uint64_t)v17, (uint64_t *)&unk_2542E4310);
      sub_23AA8A05C((uint64_t)v19, (uint64_t *)&unk_2542E4310);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v103);
    }
    sub_23AA8A05C((uint64_t)v10, &qword_2542E67B0);
    return 0;
  }
  result = 0;
  v51 = (v49 & 1) == 0;
  if (v50 != 2 && ((v51 ^ v50) & 1) != 0)
    goto LABEL_47;
  return result;
}

uint64_t sub_23AB5E6A8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF)
      return a2 << 32;
    sub_23B1C5A5C();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = (_BYTE *)sub_23B1C560C();
    if (!v4)
    {
LABEL_10:
      v5 = sub_23B1C5618();
      if (v5 >= a2)
        v6 = a2;
      else
        v6 = v5;
      v7 = &v4[v6];
      if (v4)
        v8 = v7;
      else
        v8 = 0;
      v3 = sub_23AABEE98(v4, v8);
      swift_release();
      return v3;
    }
    result = sub_23B1C5624();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_23AB5E78C(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = sub_23B1C6428();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23B1C5A38();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = bswap32(a1);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BDCDB98], v3);
  sub_23B1C5A2C();
  sub_23B1C563C();
  swift_allocObject();
  swift_retain();
  v7 = sub_23B1C55F4();
  v8 = sub_23AB5E6A8(v7, 4);
  v10 = v9;
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_23B1C6410();
  v11 = sub_23B1C63F8();
  sub_23AAAE53C(v8, v10);
  return v11;
}

uint64_t sub_23AB5E930(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_23AB5E978()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2542E74B0;
  if (!qword_2542E74B0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542E54E8);
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_2542E74B0);
  }
  return result;
}

unint64_t sub_23AB5E9C4()
{
  unint64_t result;

  result = qword_2569E2408;
  if (!qword_2569E2408)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CF9E4, &type metadata for ItemMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2408);
  }
  return result;
}

unint64_t sub_23AB5EA08()
{
  unint64_t result;

  result = qword_2569E2410;
  if (!qword_2569E2410)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1E07A4, &type metadata for FileItemKind);
    atomic_store(result, (unint64_t *)&qword_2569E2410);
  }
  return result;
}

unint64_t sub_23AB5EA4C()
{
  unint64_t result;

  result = qword_2569E2420;
  if (!qword_2569E2420)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CF4FC, &type metadata for Filename);
    atomic_store(result, (unint64_t *)&qword_2569E2420);
  }
  return result;
}

unint64_t sub_23AB5EA90()
{
  unint64_t result;

  result = qword_2569E2428;
  if (!qword_2569E2428)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DEE98, &type metadata for EvictionUrgency);
    atomic_store(result, (unint64_t *)&qword_2569E2428);
  }
  return result;
}

unint64_t sub_23AB5EAD4()
{
  unint64_t result;

  result = qword_2569E2430;
  if (!qword_2569E2430)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DCBE8, &type metadata for EvictionReasons);
    atomic_store(result, (unint64_t *)&qword_2569E2430);
  }
  return result;
}

unint64_t sub_23AB5EB18()
{
  unint64_t result;

  result = qword_2569E2438;
  if (!qword_2569E2438)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DD898, &type metadata for Tags);
    atomic_store(result, (unint64_t *)&qword_2569E2438);
  }
  return result;
}

unint64_t sub_23AB5EB5C()
{
  unint64_t result;

  result = qword_2569E2448;
  if (!qword_2569E2448)
  {
    result = MEMORY[0x23B8613CC](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2569E2448);
  }
  return result;
}

unint64_t sub_23AB5EBA0()
{
  unint64_t result;

  result = qword_2569E2460;
  if (!qword_2569E2460)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1E077C, &type metadata for FileItemKind);
    atomic_store(result, (unint64_t *)&qword_2569E2460);
  }
  return result;
}

unint64_t sub_23AB5EBE4()
{
  unint64_t result;

  result = qword_2569E2478;
  if (!qword_2569E2478)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DEE70, &type metadata for EvictionUrgency);
    atomic_store(result, (unint64_t *)&qword_2569E2478);
  }
  return result;
}

unint64_t sub_23AB5EC28()
{
  unint64_t result;

  result = qword_2569E2480;
  if (!qword_2569E2480)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DCBC0, &type metadata for EvictionReasons);
    atomic_store(result, (unint64_t *)&qword_2569E2480);
  }
  return result;
}

unint64_t sub_23AB5EC6C()
{
  unint64_t result;

  result = qword_2542E4308;
  if (!qword_2542E4308)
  {
    result = MEMORY[0x23B8613CC](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2542E4308);
  }
  return result;
}

_QWORD *sub_23AB5ECB0(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_WORD *)(a1 + 10) = *((_WORD *)a2 + 5);
    v7 = a3[7];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = sub_23B1C5BDC();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v12(v8, v9, v10);
    v12((uint64_t)v4 + a3[8], (uint64_t)a2 + a3[8], v10);
    v13 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)v4 + v13) = *((_BYTE *)a2 + v13);
    v14 = a3[12];
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)v4 + v14) = *((_BYTE *)a2 + v14);
    v15 = a3[14];
    *((_BYTE *)v4 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    v16 = (_QWORD *)((char *)v4 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = a3[16];
    *((_BYTE *)v4 + a3[15]) = *((_BYTE *)a2 + a3[15]);
    *((_BYTE *)v4 + v19) = *((_BYTE *)a2 + v19);
    v20 = a3[18];
    *((_BYTE *)v4 + a3[17]) = *((_BYTE *)a2 + a3[17]);
    *((_BYTE *)v4 + v20) = *((_BYTE *)a2 + v20);
    v21 = a3[20];
    *(_QWORD *)((char *)v4 + a3[19]) = *(uint64_t *)((char *)a2 + a3[19]);
    *((_BYTE *)v4 + v21) = *((_BYTE *)a2 + v21);
    v22 = a3[22];
    *((_BYTE *)v4 + a3[21]) = *((_BYTE *)a2 + a3[21]);
    *((_BYTE *)v4 + v22) = *((_BYTE *)a2 + v22);
    v23 = a3[24];
    *((_BYTE *)v4 + a3[23]) = *((_BYTE *)a2 + a3[23]);
    *((_BYTE *)v4 + v23) = *((_BYTE *)a2 + v23);
    v24 = a3[26];
    *(_QWORD *)((char *)v4 + a3[25]) = *(uint64_t *)((char *)a2 + a3[25]);
    *(_QWORD *)((char *)v4 + v24) = *(uint64_t *)((char *)a2 + v24);
    v25 = a3[28];
    *((_BYTE *)v4 + a3[27]) = *((_BYTE *)a2 + a3[27]);
    *((_BYTE *)v4 + v25) = *((_BYTE *)a2 + v25);
    v26 = a3[29];
    v27 = (char *)v4 + v26;
    v28 = (char *)a2 + v26;
    v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    if (v29(v28, 1, v10))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v12((uint64_t)v27, (uint64_t)v28, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v27, 0, 1, v10);
    }
    v32 = a3[31];
    *(_QWORD *)((char *)v4 + a3[30]) = *(uint64_t *)((char *)a2 + a3[30]);
    v33 = (char *)v4 + v32;
    v34 = (uint64_t)a2 + v32;
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v35 = a3[32];
    v36 = a3[33];
    v37 = *(uint64_t *)((char *)a2 + v35);
    v33[8] = *(_BYTE *)(v34 + 8);
    *(_QWORD *)((char *)v4 + v35) = v37;
    v38 = (char *)v4 + v36;
    v39 = (uint64_t *)((char *)a2 + v36);
    v40 = *(uint64_t *)((char *)a2 + v36 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v40 >> 60 == 15)
    {
      *(_OWORD *)v38 = *(_OWORD *)v39;
    }
    else
    {
      v41 = *v39;
      sub_23AAAE668(*v39, v40);
      *(_QWORD *)v38 = v41;
      *((_QWORD *)v38 + 1) = v40;
    }
    v42 = a3[34];
    v43 = a3[35];
    v44 = (char *)v4 + v42;
    v45 = (uint64_t)a2 + v42;
    *(_QWORD *)v44 = *(_QWORD *)v45;
    v44[8] = *(_BYTE *)(v45 + 8);
    *((_BYTE *)v4 + v43) = *((_BYTE *)a2 + v43);
    v46 = a3[36];
    v47 = a3[37];
    v48 = (char *)v4 + v46;
    v49 = (uint64_t)a2 + v46;
    *(_DWORD *)v48 = *(_DWORD *)v49;
    v48[4] = *(_BYTE *)(v49 + 4);
    v50 = (_QWORD *)((char *)v4 + v47);
    v51 = (uint64_t *)((char *)a2 + v47);
    v52 = v51[1];
    *v50 = *v51;
    v50[1] = v52;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_23AB5EF94(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t (*v19)(const void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 4) = v6;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  v7 = a3[7];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_23B1C5BDC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v12((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), v10);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v13 = a3[14];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_BYTE *)(a1 + a3[18]) = *(_BYTE *)(a2 + a3[18]);
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  *(_BYTE *)(a1 + a3[22]) = *(_BYTE *)(a2 + a3[22]);
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  *(_QWORD *)(a1 + a3[26]) = *(_QWORD *)(a2 + a3[26]);
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + a3[28]) = *(_BYTE *)(a2 + a3[28]);
  v16 = a3[29];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  v20 = v19((const void *)(a1 + v16), 1, v10);
  v21 = v19(v18, 1, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v17, v18, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  v12(v17, v18, v10);
LABEL_7:
  *(_QWORD *)(a1 + a3[30]) = *(_QWORD *)(a2 + a3[30]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = a3[31];
  v24 = a1 + v23;
  v25 = (uint64_t *)(a2 + v23);
  v26 = *v25;
  *(_BYTE *)(v24 + 8) = *((_BYTE *)v25 + 8);
  *(_QWORD *)v24 = v26;
  *(_QWORD *)(a1 + a3[32]) = *(_QWORD *)(a2 + a3[32]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27 = a3[33];
  v28 = (uint64_t *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v30 = *(_QWORD *)(a2 + v27 + 8);
  if (*(_QWORD *)(a1 + v27 + 8) >> 60 != 15)
  {
    if (v30 >> 60 != 15)
    {
      v32 = *v29;
      sub_23AAAE668(v32, v30);
      v33 = *v28;
      v34 = v28[1];
      *v28 = v32;
      v28[1] = v30;
      sub_23AAAE53C(v33, v34);
      goto LABEL_14;
    }
    sub_23AB2D750((uint64_t)v28);
    goto LABEL_12;
  }
  if (v30 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)v28 = *(_OWORD *)v29;
    goto LABEL_14;
  }
  v31 = *v29;
  sub_23AAAE668(v31, v30);
  *v28 = v31;
  v28[1] = v30;
LABEL_14:
  v35 = a3[34];
  v36 = a1 + v35;
  v37 = (uint64_t *)(a2 + v35);
  v38 = *v37;
  *(_BYTE *)(v36 + 8) = *((_BYTE *)v37 + 8);
  *(_QWORD *)v36 = v38;
  *(_BYTE *)(a1 + a3[35]) = *(_BYTE *)(a2 + a3[35]);
  v39 = a3[36];
  v40 = a1 + v39;
  v41 = a2 + v39;
  LODWORD(v38) = *(_DWORD *)v41;
  *(_BYTE *)(v40 + 4) = *(_BYTE *)(v41 + 4);
  *(_DWORD *)v40 = v38;
  v42 = a3[37];
  v43 = (_QWORD *)(a1 + v42);
  v44 = (_QWORD *)(a2 + v42);
  *v43 = *v44;
  v43[1] = v44[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23AB5F348(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  v6 = a3[7];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_23B1C5BDC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v11((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), v9);
  v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  v15 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  v17 = a3[20];
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[22];
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[24];
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[26];
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  v21 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  v22 = a3[29];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a2 + v22, 1, v9))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v11(v23, v24, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v23, 0, 1, v9);
  }
  v26 = a3[31];
  *(_QWORD *)(a1 + a3[30]) = *(_QWORD *)(a2 + a3[30]);
  v27 = a1 + v26;
  v28 = a2 + v26;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  v29 = a3[33];
  *(_QWORD *)(a1 + a3[32]) = *(_QWORD *)(a2 + a3[32]);
  *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
  v30 = a3[34];
  v31 = a3[35];
  v32 = a1 + v30;
  v33 = a2 + v30;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  *(_BYTE *)(a1 + v31) = *(_BYTE *)(a2 + v31);
  v34 = a3[36];
  v35 = a3[37];
  v36 = a1 + v34;
  v37 = a2 + v34;
  *(_DWORD *)v36 = *(_DWORD *)v37;
  *(_BYTE *)(v36 + 4) = *(_BYTE *)(v37 + 4);
  *(_OWORD *)(a1 + v35) = *(_OWORD *)(a2 + v35);
  return a1;
}

uint64_t sub_23AB5F5A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_23B1C5BDC();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v11(a1 + a3[8], a2 + a3[8], v9);
  v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  v19 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  v21 = a3[20];
  *(_QWORD *)(a1 + a3[19]) = *(_QWORD *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  v22 = a3[22];
  *(_BYTE *)(a1 + a3[21]) = *(_BYTE *)(a2 + a3[21]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  v23 = a3[24];
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  v24 = a3[26];
  *(_QWORD *)(a1 + a3[25]) = *(_QWORD *)(a2 + a3[25]);
  *(_QWORD *)(a1 + v24) = *(_QWORD *)(a2 + v24);
  v25 = a3[28];
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  v26 = a3[29];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  v30 = v29(a1 + v26, 1, v9);
  v31 = v29((uint64_t)v28, 1, v9);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v27, v28, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v27, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v31)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v27, v9);
LABEL_6:
    v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  v11((uint64_t)v27, (uint64_t)v28, v9);
LABEL_7:
  *(_QWORD *)(a1 + a3[30]) = *(_QWORD *)(a2 + a3[30]);
  swift_bridgeObjectRelease();
  v33 = a3[31];
  v34 = a3[32];
  v35 = a1 + v33;
  v36 = a2 + v33;
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *(_BYTE *)(v35 + 8) = *(_BYTE *)(v36 + 8);
  *(_QWORD *)(a1 + v34) = *(_QWORD *)(a2 + v34);
  swift_bridgeObjectRelease();
  v37 = a3[33];
  v38 = (uint64_t *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v40 = *(_QWORD *)(a1 + v37 + 8);
  if (v40 >> 60 != 15)
  {
    v41 = v39[1];
    if (v41 >> 60 != 15)
    {
      v42 = *v38;
      *v38 = *v39;
      v38[1] = v41;
      sub_23AAAE53C(v42, v40);
      goto LABEL_12;
    }
    sub_23AB2D750((uint64_t)v38);
  }
  *(_OWORD *)v38 = *(_OWORD *)v39;
LABEL_12:
  v43 = a3[34];
  v44 = a3[35];
  v45 = a1 + v43;
  v46 = a2 + v43;
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v47 = *(_BYTE *)(a2 + v44);
  *(_BYTE *)(v45 + 8) = *(_BYTE *)(v46 + 8);
  *(_BYTE *)(a1 + v44) = v47;
  v48 = a3[36];
  v49 = a3[37];
  v50 = a1 + v48;
  v51 = a2 + v48;
  *(_DWORD *)v50 = *(_DWORD *)v51;
  *(_BYTE *)(v50 + 4) = *(_BYTE *)(v51 + 4);
  v52 = (_QWORD *)(a1 + v49);
  v53 = (uint64_t *)(a2 + v49);
  v55 = *v53;
  v54 = v53[1];
  *v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23AB5F8C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v6 = sub_23B1C5BDC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[29];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[14] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  v11 = v10 - 1;
  if (v11 < 0)
    v11 = -1;
  return (v11 + 1);
}

uint64_t sub_23AB5F97C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_23B1C5BDC();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + a4[14] + 8) = a2;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[29];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_23AB5FA24()
{
  unint64_t v0;
  unint64_t v1;

  sub_23B1C5BDC();
  if (v0 <= 0x3F)
  {
    sub_23AB5FB60();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_23AB5FB60()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2542E6790)
  {
    sub_23B1C5BDC();
    v0 = sub_23B1C6C98();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2542E6790);
  }
}

uint64_t getEnumTagSinglePayload for ItemMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xDF)
    goto LABEL_17;
  if (a2 + 33 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 33) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 33;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 33;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 33;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x22;
  v8 = v6 - 34;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ItemMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 33 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 33) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDE)
    return ((uint64_t (*)(void))((char *)&loc_23AB5FC90 + 4 * byte_23B1CF6A3[v4]))();
  *a1 = a2 + 33;
  return ((uint64_t (*)(void))((char *)sub_23AB5FCC4 + 4 * byte_23B1CF69E[v4]))();
}

uint64_t sub_23AB5FCC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AB5FCCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23AB5FCD4);
  return result;
}

uint64_t sub_23AB5FCE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23AB5FCE8);
  *(_BYTE *)result = a2 + 33;
  return result;
}

uint64_t sub_23AB5FCEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AB5FCF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ItemMetadata.CodingKeys()
{
  return &type metadata for ItemMetadata.CodingKeys;
}

unint64_t sub_23AB5FD14()
{
  unint64_t result;

  result = qword_2569E2498;
  if (!qword_2569E2498)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CF9BC, &type metadata for ItemMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2498);
  }
  return result;
}

unint64_t sub_23AB5FD5C()
{
  unint64_t result;

  result = qword_2569E24A0;
  if (!qword_2569E24A0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CF92C, &type metadata for ItemMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E24A0);
  }
  return result;
}

unint64_t sub_23AB5FDA4()
{
  unint64_t result;

  result = qword_2569E24A8;
  if (!qword_2569E24A8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CF954, &type metadata for ItemMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E24A8);
  }
  return result;
}

uint64_t sub_23AB5FDE8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1684957547 && a2 == 0xE400000000000000;
  if (v2 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657449646C696863 && a2 == 0xEE00746E756F436DLL || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023B1F7F30 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F697461657263 && a2 == 0xEC00000065746144 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023B1F7F50 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x64656B636F4C7369 && a2 == 0xE800000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E65646469487369 && a2 == 0xE800000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x64656E6E69507369 && a2 == 0xE800000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023B1F7F70 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023B1F7F90 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023B1F7FB0 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6F52636E79537369 && a2 == 0xEA0000000000746FLL || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x65726F6E67497369 && a2 == 0xEC000000746F6F52 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6F6E67496E497369 && a2 == 0xEE00746F6F526572 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6863617465447369 && a2 == 0xEE00746F6F526465 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x53747365736F6C63 && a2 == 0xEF746F6F52636E79 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x656C617461447369 && a2 == 0xEA00000000007373 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x6E6F697463697665 && a2 == 0xEF79636E65677255 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0x6E6F697463697665 && a2 == 0xEE006E6F73616552 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x6150636E79537369 && a2 == 0xEC00000064657375 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x800000023B1F7FD0 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x6C61636973796870 && a2 == 0xEC000000657A6953 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x67616B6361507369 && a2 == 0xE900000000000065 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0x6C646E7542736168 && a2 == 0xEC00000074694265 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0x646573557473616CLL && a2 == 0xEC00000065746144 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 1936154996 && a2 == 0xE400000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0x657469726F766166 && a2 == 0xEC0000006B6E6152 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023B1F8000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0x69746E6172617571 && a2 == 0xEE00626F6C42656ELL || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0x65707954736FLL && a2 == 0xE600000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (a1 == 0x7272757365527369 && a2 == 0xED00006465746365 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (a1 == 0x6E756F436B6E696CLL && a2 == 0xE900000000000074 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023B1F8020)
  {
    swift_bridgeObjectRelease();
    return 33;
  }
  else
  {
    v6 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 33;
    else
      return 34;
  }
}

uint64_t sub_23AB60C64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ItemMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AB60CA8()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  id v5;
  uint64_t v7;

  sub_23B1C63E0();
  v0 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  v1 = objc_msgSend(v0, sel_pathComponents);
  v2 = sub_23B1C6704();

  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease();
  if (v3 < 2)
  {
    sub_23B1C63E0();
    v7 = sub_23B1C63BC();

    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = objc_msgSend(v0, sel_stringByDeletingLastPathComponent);
    if (v4)
    {
      v5 = v4;

      return (uint64_t)v5;
    }
    sub_23B1C63E0();
    v7 = sub_23B1C63BC();
    swift_bridgeObjectRelease();

  }
  return v7;
}

id sub_23AB60D98()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  id v4;

  sub_23B1C63E0();
  v0 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  v1 = objc_msgSend(v0, sel_pathComponents);
  v2 = sub_23B1C6704();

  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease();
  if (v3 < 2)
  {
    v4 = (id)*MEMORY[0x24BDC81A0];
  }
  else
  {
    v4 = objc_msgSend(v0, sel_lastPathComponent);
    if (!v4)
    {
      sub_23B1C63E0();
      v4 = (id)sub_23B1C63BC();
      swift_bridgeObjectRelease();
    }
  }

  return v4;
}

id sub_23AB60E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  return sub_23AB60F08(a1, a2, a3, a4, a5, a6);
}

id sub_23AB60F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  char *v16;
  objc_super v18;

  v13 = &v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_appSupportURL];
  v14 = sub_23B1C5A08();
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  v15(&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_wharfDirectoryURL], 1, 1, v14);
  v15(&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_dbDirectoryURL], 1, 1, v14);
  v15(&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_dbURL], 1, 1, v14);
  v15(&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_temporaryDirectoryURL], 1, 1, v14);
  v15(&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_stateDirectoryURL], 1, 1, v14);
  *(_QWORD *)&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_providerDomainID] = a1;
  v16 = &v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_personaIdentifier];
  *(_QWORD *)v16 = a2;
  *((_QWORD *)v16 + 1) = a3;
  *(_QWORD *)&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_extensionManager] = a4;
  *(_QWORD *)&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume] = a5;
  *(_QWORD *)&v6[OBJC_IVAR____TtC9libfssync20InternalPathsManager_rtcReporter] = a6;
  v18.receiver = v6;
  v18.super_class = (Class)type metadata accessor for InternalPathsManager();
  return objc_msgSendSuper2(&v18, sel_init);
}

uint64_t type metadata accessor for InternalPathsManager()
{
  uint64_t result;

  result = qword_2542E4E78;
  if (!qword_2542E4E78)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23AB610B8@<X0>(uint64_t a1@<X8>)
{
  return sub_23AB61108((SEL *)&selRef_systemDirectory, 95, (uint64_t (*)(const char *, uint64_t, uint64_t, uint64_t))sub_23AFF196C, a1);
}

uint64_t sub_23AB610E0@<X0>(uint64_t a1@<X8>)
{
  return sub_23AB61108((SEL *)&selRef_syncRootsDirectory, 103, (uint64_t (*)(const char *, uint64_t, uint64_t, uint64_t))sub_23AFF196C, a1);
}

uint64_t sub_23AB61108@<X0>(SEL *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(const char *, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v19;
  uint64_t (*v20)(const char *, uint64_t, uint64_t, uint64_t);

  v20 = a3;
  v8 = sub_23B1C5A08();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)(v4 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume);
  if (v15)
  {
    v16 = objc_msgSend(v15, *a1);
    sub_23B1C59CC();

    v17 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v17(v14, v11, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v17)(a4, v14, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v14, 1, 1, v8);
  }
  sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E6740);
  result = v20("/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/fpfs/InternalPathsManager.swift", 94, 2, a2);
  __break(1u);
  return result;
}

void sub_23AB6129C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  id v8;
  void (*v9)(char *, uint64_t);
  void *v10;
  void *v11;
  _QWORD v12[2];

  v1 = sub_23B1C5A08();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v12 - v6;
  v8 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_23AB610B8((uint64_t)v7);
  if (v0)
  {

  }
  else
  {
    sub_23B1C59E4();
    v9 = *(void (**)(char *, uint64_t))(v2 + 8);
    v9(v7, v1);
    v10 = (void *)sub_23B1C63BC();
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_fp_createPathIfNeeded_, v10);

    sub_23AB610E0((uint64_t)v5);
    sub_23B1C59E4();
    v9(v5, v1);
    v11 = (void *)sub_23B1C63BC();
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_fp_createPathIfNeeded_, v11);

  }
}

uint64_t sub_23AB6142C()
{
  return MEMORY[0x24BEE4AF8];
}

void sub_23AB61438(uint64_t a1, void (*a2)(char *, id), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  void *v31;
  unsigned int v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  void *v42;
  id v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  id v46;
  char v47;
  _QWORD v48[2];
  uint64_t v49;
  void (*v50)(char *, id);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55[2];

  v50 = a2;
  v51 = a3;
  v55[1] = *(id *)MEMORY[0x24BDAC8D0];
  v6 = sub_23B1C545C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23B1C5A08();
  v52 = *(_QWORD *)(v10 - 8);
  v53 = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v48 - v14;
  v16 = *(void **)(v3 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume);
  if (!v16)
    __break(1u);
  v55[0] = 0;
  v17 = objc_msgSend(v16, sel_rootURLForLocation_error_, a1, v55);
  v18 = v55[0];
  if (!v17)
  {
    v36 = v55[0];
    sub_23B1C587C();

    swift_willThrow();
    return;
  }
  v19 = v17;
  v49 = v7;
  sub_23B1C59CC();
  v20 = v18;

  v21 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_23B1C59E4();
  v22 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  v55[0] = 0;
  v23 = objc_msgSend(v21, sel_contentsOfDirectoryAtPath_error_, v22, v55);

  v24 = v55[0];
  if (v23)
  {
    v25 = sub_23B1C6704();
    v26 = v24;

    v27 = *(_QWORD *)(v25 + 16);
    if (v27)
    {
      v48[1] = v4;
      v28 = (void *)objc_opt_self();
      v49 = v25;
      v29 = v25 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_23B1C5978();
        swift_bridgeObjectRelease();
        v31 = (void *)sub_23B1C5954();
        v54 = 0;
        v55[0] = 0;
        v32 = objc_msgSend(v28, sel_getProviderDomainID_location_foundDomainID_error_, v31, a1, v55, &v54);

        v33 = v55[0];
        v34 = v54;
        if (!v32)
        {
          v42 = v34;
          v43 = v33;
          sub_23B1C587C();

          swift_willThrow();
          v44 = v53;
          v45 = *(void (**)(char *, uint64_t))(v52 + 8);
          v45(v13, v53);
          swift_bridgeObjectRelease();
          v45(v15, v44);
          return;
        }
        if (v33)
        {
          v35 = v33;
          v50(v13, v35);

        }
        v29 += 16;
        v30 = *(void (**)(char *, uint64_t))(v52 + 8);
        v30(v13, v53);
        --v27;
      }
      while (v27);
      swift_bridgeObjectRelease();
      v30(v15, v53);
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v15, v53);
    }
  }
  else
  {
    v37 = v55[0];
    v38 = (void *)sub_23B1C587C();

    swift_willThrow();
    v39 = v38;
    sub_23B1C536C();
    sub_23AA7E38C((unint64_t *)&qword_2569E29D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEB0], MEMORY[0x24BDCAEA8]);
    LOBYTE(v37) = sub_23B1C575C();

    v40 = v6;
    v41 = *(void (**)(char *, uint64_t))(v49 + 8);
    v41(v9, v40);
    if ((v37 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v52 + 8))(v15, v53);
    }
    else
    {
      v46 = v38;
      sub_23B1C5384();
      v47 = sub_23B1C575C();

      v41(v9, v40);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v15, v53);
      if ((v47 & 1) == 0)
        return;
    }

  }
}

void sub_23AB618AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void (*v17)(char *, uint64_t);
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  void *v31;
  unsigned __int8 v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  id v46[5];

  v46[4] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = sub_23B1C5A08();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v41 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v45 = (char *)&v35 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v44 = (uint64_t)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v35 - v12;
  v14 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v15 = v1 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_dbDirectoryURL;
  swift_beginAccess();
  v43 = v15;
  sub_23AB6C0EC(v15, (uint64_t)v13);
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v42(v13, 1, v4) == 1)
LABEL_15:
    __break(1u);
  sub_23B1C59E4();
  v16 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v13, v4);
  objc_msgSend(v14, sel_fp_createPathIfNeeded_, v16);

  sub_23B1C59E4();
  v18 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  v46[0] = 0;
  v19 = objc_msgSend(v14, sel_contentsOfDirectoryAtPath_error_, v18, v46);

  v20 = v46[0];
  if (v19)
  {
    v38 = v17;
    v39 = v4;
    v40 = a1;
    v35 = v2;
    v21 = sub_23B1C6704();
    v22 = v20;

    v36 = v21;
    v23 = *(_QWORD *)(v21 + 16);
    if (v23)
    {
      v24 = v36 + 40;
      v37 = v14;
      v25 = v38;
      v26 = v39;
      do
      {
        swift_bridgeObjectRetain();
        if ((sub_23B1C656C() & 1) != 0)
        {
          v27 = v45;
          sub_23B1C5978();
          v28 = (void *)sub_23B1C5954();
          v25(v27, v26);
          v29 = v44;
          sub_23AB6C0EC(v43, v44);
          if (v42((char *)v29, 1, v26) == 1)
          {
            __break(1u);
            goto LABEL_15;
          }
          v30 = v41;
          sub_23B1C5978();
          swift_bridgeObjectRelease();
          v25((char *)v29, v26);
          v31 = (void *)sub_23B1C5954();
          v25(v30, v26);
          v46[0] = 0;
          v14 = v37;
          v32 = objc_msgSend(v37, sel_moveItemAtURL_toURL_error_, v28, v31, v46);

          v33 = v46[0];
          if ((v32 & 1) == 0)
          {
            v34 = v33;
            swift_bridgeObjectRelease();
            goto LABEL_13;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v24 += 16;
        --v23;
      }
      while (v23);
    }

    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = v46[0];
LABEL_13:
    sub_23B1C587C();

    swift_willThrow();
  }
}

uint64_t sub_23AB61C8C(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _QWORD v10[4];

  v3 = objc_msgSend(a1, sel_nsDomain);
  v4 = objc_msgSend(v3, sel_personaIdentifier);

  if (v4)
  {
    v6 = sub_23B1C63E0();
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  MEMORY[0x24BDAC7A8](v5);
  v10[2] = v1;
  v10[3] = a1;
  sub_23AC462B8(v6, v8, (uint64_t)sub_23AB6C08C, (uint64_t)v10);
  return swift_bridgeObjectRelease();
}

void sub_23AB61D60(void *a1, void *a2)
{
  uint64_t v2;
  id v5;
  id v6;
  id v7;

  v5 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_23AB6129C();
  if (!v2)
  {
    v6 = a1;
    v7 = a2;
    v5 = v5;
    sub_23B0DA0A0(v6, v6, v7, v5);
  }

}

id sub_23AB61DFC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void *v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  void (*v52)(char *, _QWORD, uint64_t, uint64_t);
  char *v53;
  uint64_t v54;
  void (*v55)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, uint64_t);
  id result;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  unsigned int v84;
  id v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t, uint64_t);
  void *v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  void *v93;
  void *v94;
  id v95;
  char *v96;
  void *v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t, uint64_t);
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  void *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  id v127[5];

  v117 = a3;
  v125 = a2;
  v127[3] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = sub_23B1C5A08();
  v6 = *(_QWORD **)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v109 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v108 = (uint64_t)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v110 = (uint64_t)&v106 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v112 = (uint64_t)&v106 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v113 = (uint64_t)&v106 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v114 = (uint64_t)&v106 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v119 = (uint64_t)&v106 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v121 = (uint64_t)&v106 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v118 = (char *)&v106 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v122 = (uint64_t)&v106 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v120 = (char *)&v106 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v124 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v106 - v30);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v106 - v32;
  v34 = MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)&v106 - v35;
  v37 = MEMORY[0x24BDAC7A8](v34);
  v123 = (uint64_t)&v106 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v41 = (char *)&v106 - v40;
  v42 = MEMORY[0x24BDAC7A8](v39);
  v44 = (char *)&v106 - v43;
  MEMORY[0x24BDAC7A8](v42);
  v46 = (char *)&v106 - v45;
  v126 = a1;
  v47 = *(void **)(a1 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume);
  v111 = v47;
  v116 = v3;
  if (v47)
  {
    v127[0] = 0;
    v48 = objc_msgSend(v47, sel_supportPathForDomain_failIfNotExisting_error_, v125, 0, v127);
    v49 = v127[0];
    if (!v48)
    {
      v105 = v127[0];
      sub_23B1C587C();

      return (id)swift_willThrow();
    }
    v50 = v48;
    v115 = v33;
    sub_23B1C59CC();
    v51 = v49;

    v52 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v6[7];
    v53 = v46;
    v54 = 0;
  }
  else
  {
    v115 = v33;
    v52 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v6[7];
    v53 = (char *)&v106 - v45;
    v54 = 1;
  }
  v55 = v52;
  v52(v53, v54, 1, v5);
  v56 = v126;
  v57 = v126 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_appSupportURL;
  swift_beginAccess();
  sub_23AB6C0A4((uint64_t)v46, v57);
  swift_endAccess();
  sub_23AB6C0EC(v57, (uint64_t)v41);
  v58 = (uint64_t (*)(char *, uint64_t, uint64_t))v6[6];
  result = (id)v58(v41, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_25;
  }
  sub_23B1C5978();
  v60 = (void (*)(char *, uint64_t))v6[1];
  v60(v41, v5);
  v55(v44, 0, 1, v5);
  v61 = v56 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_wharfDirectoryURL;
  swift_beginAccess();
  v107 = v61;
  sub_23AB6C0A4((uint64_t)v44, v61);
  swift_endAccess();
  v125 = v57;
  sub_23AB6C0EC(v57, (uint64_t)v36);
  result = (id)v58(v36, 1, v5);
  if ((_DWORD)result == 1)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v62 = v56;
  v63 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v58;
  v64 = v123;
  sub_23B1C5978();
  v60(v36, v5);
  v55((char *)v64, 0, 1, v5);
  v65 = v62 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_dbDirectoryURL;
  swift_beginAccess();
  sub_23AB6C0A4(v64, v65);
  swift_endAccess();
  v66 = v65;
  v67 = (char *)v124;
  sub_23AB6C0EC(v66, (uint64_t)v124);
  result = (id)v58(v67, 1, v5);
  if ((_DWORD)result == 1)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v68 = (uint64_t)v115;
  sub_23B1C5978();
  v60(v67, v5);
  v55((char *)v68, 0, 1, v5);
  v69 = v62 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_dbURL;
  swift_beginAccess();
  sub_23AB6C0A4(v68, v69);
  swift_endAccess();
  v70 = v125;
  v71 = v122;
  sub_23AB6C0EC(v125, v122);
  result = (id)v58((char *)v71, 1, v5);
  if ((_DWORD)result == 1)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  sub_23B1C63E0();
  v72 = (uint64_t)v120;
  sub_23B1C5978();
  swift_bridgeObjectRelease();
  v60((char *)v71, v5);
  v55((char *)v72, 0, 1, v5);
  v73 = v62 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_temporaryDirectoryURL;
  swift_beginAccess();
  v123 = v73;
  sub_23AB6C0A4(v72, v73);
  swift_endAccess();
  v74 = v121;
  sub_23AB6C0EC(v70, v121);
  result = (id)v63(v74, 1, v5);
  if ((_DWORD)result == 1)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  sub_23B1C63E0();
  v75 = (uint64_t)v118;
  sub_23B1C5978();
  swift_bridgeObjectRelease();
  v76 = (uint64_t (*)(uint64_t, uint64_t))v60;
  v60((char *)v74, v5);
  v55((char *)v75, 0, 1, v5);
  v77 = v62 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_stateDirectoryURL;
  swift_beginAccess();
  sub_23AB6C0A4(v75, v77);
  swift_endAccess();
  v78 = v119;
  sub_23AB6C0EC(v70, v119);
  v124 = v63;
  result = (id)v63(v78, 1, v5);
  if ((_DWORD)result == 1)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v79 = v116;
  sub_23AB618AC(v78);
  v80 = v117;
  if (v79)
    return (id)v76(v78, v5);
  v76(v78, v5);
  v81 = v123;
  v82 = v114;
  sub_23AB6C0EC(v123, v114);
  result = (id)v124(v82, 1, v5);
  if ((_DWORD)result == 1)
    goto LABEL_30;
  v83 = (void *)sub_23B1C5954();
  v76(v82, v5);
  v127[0] = 0;
  v84 = objc_msgSend(v80, sel_removeItemAtURL_error_, v83, v127);

  v85 = v127[0];
  if (!v84)
  {
    v86 = v85;
    v87 = (void *)sub_23B1C587C();

    swift_willThrow();
  }
  v122 = v77;
  v88 = v113;
  sub_23AB6C0EC(v81, v113);
  v89 = v124;
  result = (id)v124(v88, 1, v5);
  if ((_DWORD)result == 1)
    goto LABEL_31;
  sub_23B1C59E4();
  v90 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  v91 = (void (*)(uint64_t, uint64_t))v76;
  v76(v88, v5);
  objc_msgSend(v80, sel_fp_createPathIfNeeded_, v90);

  v92 = v112;
  sub_23AB6C0EC(v107, v112);
  result = (id)v89(v92, 1, v5);
  if ((_DWORD)result == 1)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v93 = v80;
  sub_23B1C59E4();
  v94 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  v76(v92, v5);
  objc_msgSend(v80, sel_fp_createPathIfNeeded_, v94);

  result = v111;
  if (!v111)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v95 = objc_msgSend(v111, sel_purgatoryDirectory);
  v96 = v109;
  sub_23B1C59CC();

  sub_23B1C59E4();
  v76((uint64_t)v96, v5);
  v97 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  objc_msgSend(v93, sel_fp_createPathIfNeeded_, v97);

  v98 = v110;
  sub_23AB6C0EC(v122, v110);
  v99 = v124;
  result = (id)v124(v98, 1, v5);
  if ((_DWORD)result == 1)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  sub_23B1C59E4();
  v100 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  v91(v98, v5);
  objc_msgSend(v93, (SEL)&selRef_addChild_withPendingUnitCount_ + 3, v100);

  v101 = v108;
  sub_23AB6C0EC(v125, v108);
  result = (id)v99(v101, 1, v5);
  if ((_DWORD)result != 1)
  {
    v102 = sub_23B1C59E4();
    MEMORY[0x24BDAC7A8](v102);
    LOBYTE(v127[0]) = 1;
    result = (id)sub_23B0E1010(4294967294, v103, v104, 0, 0, 0, (uint64_t)v127, (uint64_t)sub_23AB6C134, (uint64_t)(&v106 - 4));
    if (((uint64_t)v127[0] & 1) == 0)
      return (id)((uint64_t (*)(uint64_t, uint64_t))v91)(v101, v5);
    goto LABEL_36;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_23AB628D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v17;
  id v18[2];

  v18[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = sub_23B1C5A08();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend((id)objc_opt_self(), sel_prettyNameForDomain_, a1);
  v8 = sub_23B1C63E0();
  v10 = v9;

  sub_23AB6BD2C(v8, v10);
  swift_bridgeObjectRelease();
  v11 = *(void **)(v1 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume);
  if (!v11)
    __break(1u);
  v18[0] = 0;
  v12 = objc_msgSend(v11, sel_rootURLForLocation_error_, 1, v18);
  v13 = v18[0];
  if (v12)
  {
    v14 = v12;
    sub_23B1C59CC();
    v15 = v13;

    sub_23B1C5978();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    v17 = v18[0];
    swift_bridgeObjectRelease();
    sub_23B1C587C();

    return swift_willThrow();
  }
}

void sub_23AB62A84(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  id v31;
  void *v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  id v43;
  void *v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  char v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  void *v53;
  id v54;
  id v55;
  void (**v56)(char *, uint64_t);
  void *v57;
  char *v58;
  id v59;
  char *v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  id v70;
  id v71;
  unint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v65 - v8;
  v10 = sub_23B1C5A08();
  v11 = *(char **)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v65 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v65 - v18;
  v20 = objc_msgSend(a1, sel_provider);
  if (!v20)
    goto LABEL_39;
  v21 = v20;
  v66 = v17;
  v67 = v11;
  v68 = a2;
  v69 = v10;
  v70 = objc_msgSend(a1, sel_identifier);
  if (!v70)
  {
    v71 = 0;
    v72 = 0xE000000000000000;
    sub_23B1C6EFC();
    swift_bridgeObjectRelease();
    v71 = (id)0xD000000000000019;
    v72 = 0x800000023B1F82E0;
    v63 = objc_msgSend(a1, sel_description);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  v22 = objc_msgSend(v21, sel_identifier);
  v23 = sub_23B1C63E0();
  v25 = v24;

  if (v23 == 0xD00000000000002BLL && v25 == 0x800000023B1F8300 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v26 = sub_23B1C63E0();
    v28 = v27;
    if (v26 == sub_23B1C63E0() && v28 == v29)
    {
LABEL_8:
      swift_bridgeObjectRelease_n();
LABEL_18:
      (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v67 + 7))(v68, 1, 1, v69);

      return;
    }
    v30 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v30 & 1) != 0)
      goto LABEL_18;
    v31 = objc_msgSend((id)objc_opt_self(), sel_fp_personaSharedDirectory);
    v17 = v67;
    if (!v31)
      goto LABEL_42;
    v32 = v31;
    v33 = v66;
    sub_23B1C59CC();

    v34 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v17 + 4);
    v35 = v69;
    v34(v9, v33, v69);
    v36 = (void (*)(char *, _QWORD, uint64_t, uint64_t))*((_QWORD *)v17 + 7);
    v36(v9, 0, 1, v35);
    if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v17 + 6))(v9, 1, v35) == 1)
    {
      while (1)
      {
        sub_23AA8A05C((uint64_t)v9, (uint64_t *)&unk_2542E6740);
LABEL_41:
        sub_23B1C704C();
        __break(1u);
LABEL_42:
        (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v17 + 7))(v9, 1, 1, v69);
      }
    }
    v34(v19, v9, v35);
    v37 = v68;
    sub_23B1C5978();

    (*((void (**)(char *, uint64_t))v17 + 1))(v19, v35);
LABEL_13:
    v36(v37, 0, 1, v35);
    return;
  }
  if (v23 == 0xD000000000000032 && v25 == 0x800000023B1F8330 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (fpfs_supports_sokoban())
      goto LABEL_18;
    v38 = sub_23B1C63E0();
    v40 = v39;
    if (v38 == sub_23B1C63E0() && v40 == v41)
      goto LABEL_8;
    v42 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v42 & 1) != 0)
      goto LABEL_18;
    v43 = objc_msgSend((id)objc_opt_self(), sel_fp_personaSharedDirectory);
    v17 = v67;
    if (v43)
    {
      v44 = v43;
      v45 = v66;
      sub_23B1C59CC();

      v46 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v17 + 4);
      v35 = v69;
      v46(v7, v45, v69);
      v36 = (void (*)(char *, _QWORD, uint64_t, uint64_t))*((_QWORD *)v17 + 7);
      v36(v7, 0, 1, v35);
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v17 + 6))(v7, 1, v35) != 1)
      {
        v46(v14, v7, v35);
        v37 = v68;
        sub_23B1C5978();

        (*((void (**)(char *, uint64_t))v17 + 1))(v14, v35);
        goto LABEL_13;
      }
    }
    else
    {
      (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v67 + 7))(v7, 1, 1, v69);
    }
    sub_23AA8A05C((uint64_t)v7, (uint64_t *)&unk_2542E6740);
    goto LABEL_41;
  }
  if (v23 == 0xD00000000000001ELL && v25 == 0x800000023B1F8370)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v47 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v47 & 1) == 0)
      goto LABEL_37;
  }
  if (!os_variant_has_internal_content())
    goto LABEL_37;
  v48 = objc_msgSend(a1, sel_nsDomain);
  v17 = (char *)objc_msgSend(v48, sel_identifier);

  v49 = sub_23B1C63E0();
  v51 = v50;

  if (v49 == 0xD00000000000002ALL && v51 == 0x800000023B1F83B0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  v52 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  if ((v52 & 1) == 0)
  {
LABEL_37:

    (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v67 + 7))(v68, 1, 1, v69);
    return;
  }
LABEL_34:
  v53 = *(void **)(v65 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume);
  if (!v53)
  {
    __break(1u);
LABEL_39:
    v71 = 0;
    v72 = 0xE000000000000000;
    sub_23B1C6EFC();
    swift_bridgeObjectRelease();
    v71 = (id)0xD000000000000017;
    v72 = 0x800000023B1F82C0;
    v62 = objc_msgSend(a1, sel_description);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  v71 = 0;
  v54 = objc_msgSend(v53, sel_rootURLForLocation_error_, 1, &v71);
  v55 = v71;
  v56 = (void (**)(char *, uint64_t))v67;
  if (v54)
  {
    v57 = v54;
    v58 = v66;
    sub_23B1C59CC();
    v59 = v55;

    v60 = v68;
    sub_23B1C5978();

    v61 = v69;
    v56[1](v58, v69);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v56[7])(v60, 0, 1, v61);
  }
  else
  {
    v64 = v71;
    sub_23B1C587C();

    swift_willThrow();
    swift_unexpectedError();
    __break(1u);
  }
}

void sub_23AB63444(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23AB62A84(a1, v6);
  v7 = sub_23B1C5A08();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_23AA8A05C((uint64_t)v6, (uint64_t *)&unk_2542E6740);
    v9 = objc_msgSend(a1, sel_volume);
    v14[0] = 0;
    v10 = objc_msgSend(v9, sel_findProviderDomainDirectory_location_error_, a1, 1, v14);

    v11 = v14[0];
    if (v10)
    {
      sub_23B1C59CC();
      v12 = v11;

    }
    else
    {
      v13 = v14[0];
      sub_23B1C587C();

      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
  }
}

void sub_23AB635D4(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23AB62A84(a1, v6);
  v7 = sub_23B1C5A08();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_23AA8A05C((uint64_t)v6, (uint64_t *)&unk_2542E6740);
    v9 = objc_msgSend(a1, sel_volume);
    v14[0] = 0;
    v10 = objc_msgSend(v9, sel_findProviderDomainDirectory_location_error_, a1, 1, v14);

    v11 = v14[0];
    if (v10)
    {
      sub_23B1C59CC();
      v12 = v11;

    }
    else
    {
      v13 = v14[0];
      sub_23B1C587C();

      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
  }
}

uint64_t sub_23AB63760@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  id v13;
  void *v14;
  unsigned __int8 v15;
  char v16;
  uint64_t v17;
  _QWORD v18[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23B1C5A08();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23AB62A84(a1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_23AB635D4(a1, (uint64_t)v11);
    result = sub_23AA8A05C((uint64_t)v7, (uint64_t *)&unk_2542E6740);
    if (v2)
      return result;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  }
  v13 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_23B1C59E4();
  v14 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v13, sel_fileExistsAtPath_, v14);

  if ((v15 & 1) == 0)
    goto LABEL_10;
  v16 = sub_23AB6BF98((uint64_t)v11, a1);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((v16 & 1) != 0)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v11, v8);
    v17 = 0;
  }
  else
  {
LABEL_10:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v17 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v17, 1, v8);
}

uint64_t sub_23AB6395C@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_23AB63760(a1, a2);
}

void sub_23AB63980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v6;
  uint64_t inited;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v6 = *(void **)(v4 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_rtcReporter);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E5600);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23B1CA760;
    v10 = v6;
    v11 = MEMORY[0x24BEE0D00];
    sub_23B1C6E84();
    *(_QWORD *)(inited + 96) = v11;
    *(_QWORD *)(inited + 72) = a1;
    *(_QWORD *)(inited + 80) = a2;
    swift_bridgeObjectRetain();
    sub_23AAE9FE8(inited);
    v12 = (void *)sub_23B1C61F4();
    swift_bridgeObjectRelease();
    v13 = (void *)sub_23B1C5870();
    objc_msgSend(v10, sel_postReportWithCategory_type_payload_error_, 1, 1, v12, v13);

  }
  if (a4)
  {
    v14 = (void *)sub_23B1C63BC();
    v15 = (void *)sub_23B1C63BC();
    v16 = (void *)sub_23B1C5870();
    FPCaptureLogsForOperationForSwift(v14, v15, v16);

  }
}

void sub_23AB63B34(void (*a1)(char *, uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  char *v24;
  char *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  void *v28;
  id v29;
  char *v30;
  id v31;
  char *v32;
  void (*v33)(char *, void (*)(_QWORD, _QWORD), uint64_t);
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  int v43;
  _BOOL4 v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  void *v53;
  char *v54;
  char *v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  NSObject *v62;
  void *v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  uint64_t v66;
  id v67;
  void *v68;
  void *v69;
  unsigned int v70;
  char *v71;
  uint64_t v72;
  id v73;
  id v74;
  void *v75;
  char *v76;
  uint64_t v77;
  id v78;
  void *v79;
  id v80;
  char *v81;
  char *v82;
  uint64_t v83;
  id v84;
  id v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  void *v89;
  id v90;
  uint64_t v91;
  void *v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  id v97;
  char *v98;
  char *v99;
  _QWORD v100[2];
  void *v101;
  uint64_t v102;
  void (*v103)(char *, void (*)(_QWORD, _QWORD), uint64_t);
  uint64_t v104;
  NSObject *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  char *v113;
  void (*v114)(char *, uint64_t);
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119[3];

  v2 = v1;
  v112 = a1;
  v119[1] = *(id *)MEMORY[0x24BDAC8D0];
  v111 = sub_23B1C5E4C();
  v109 = *(_QWORD *)(v111 - 8);
  v3 = MEMORY[0x24BDAC7A8](v111);
  v108 = (char *)v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v113 = (char *)v100 - v5;
  v116 = sub_23B1C5A08();
  v114 = *(void (**)(char *, uint64_t))(v116 - 8);
  v6 = MEMORY[0x24BDAC7A8](v116);
  v107 = (char *)v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v110 = (char *)v100 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v100 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)v100 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v100 - v16;
  v18 = sub_23B1C5570();
  v19 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0];
  v20 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v119[0]) = 17;
  sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
  sub_23AA7E38C((unint64_t *)&qword_2542E42F0, v19, MEMORY[0x24BDCAFD8]);
  sub_23B1C5864();
  v23 = (void *)sub_23B1C5558();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v18);
  sub_23AB63980(0xD000000000000022, 0x800000023B1F8200, 0xD000000000000018, 0x800000023B1F8230);

  v24 = v115;
  sub_23AB6129C();
  if (!v24)
  {
    v25 = v113;
    v26 = v114;
    v106 = v12;
    v115 = v17;
    v27 = v116;
    v28 = *(void **)(v2 + OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume);
    if (v28)
    {
      v29 = objc_msgSend(v28, sel_removedURL);
      v30 = v115;
      sub_23B1C59CC();

      v31 = (id)fpfs_current_or_default_log();
      v32 = v25;
      sub_23B1C5E58();
      v33 = (void (*)(char *, void (*)(_QWORD, _QWORD), uint64_t))*((_QWORD *)v26 + 2);
      v34 = v15;
      v35 = v15;
      v36 = v112;
      v37 = v27;
      v33(v35, (void (*)(_QWORD, _QWORD))v112, v27);
      v38 = v106;
      v39 = v37;
      v40 = v30;
      v103 = v33;
      v33(v106, (void (*)(_QWORD, _QWORD))v30, v39);
      v41 = sub_23B1C5E40();
      v42 = sub_23B1C6A88();
      v43 = v42;
      v105 = v41;
      v44 = os_log_type_enabled(v41, v42);
      v102 = v2;
      v104 = 0;
      if (v44)
      {
        v45 = swift_slowAlloc();
        v101 = (void *)swift_slowAlloc();
        v119[0] = v101;
        *(_DWORD *)v45 = 136315394;
        v46 = (void *)sub_23B1C5954();
        v47 = objc_msgSend(v46, sel_fp_shortDescription);

        v48 = sub_23B1C63E0();
        v50 = v49;

        v118 = sub_23AABEC68(v48, v50, (uint64_t *)v119);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        v51 = (void (*)(char *, uint64_t))*((_QWORD *)v114 + 1);
        LODWORD(v114) = v43;
        v52 = v116;
        v51(v34, v116);
        *(_WORD *)(v45 + 12) = 2080;
        v100[1] = v45 + 14;
        v53 = (void *)sub_23B1C5954();
        v54 = v40;
        v55 = v38;
        v56 = objc_msgSend(v53, sel_fp_shortDescription);

        v57 = sub_23B1C63E0();
        v59 = v58;

        v60 = v51;
        v118 = sub_23AABEC68(v57, v59, (uint64_t *)v119);
        sub_23B1C6CBC();
        v36 = v112;
        swift_bridgeObjectRelease();
        v61 = v55;
        v40 = v54;
        v51(v61, v52);
        v62 = v105;
        _os_log_impl(&dword_23AA66000, v105, (os_log_type_t)v114, "trying to move un-owned directory %s to the purgatory %s", (uint8_t *)v45, 0x16u);
        v63 = v101;
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v63, -1, -1);
        MEMORY[0x23B8614BC](v45, -1, -1);

        v64 = *(void (**)(char *, uint64_t))(v109 + 8);
        v64(v113, v111);
      }
      else
      {
        v65 = v38;
        v60 = (void (*)(char *, uint64_t))*((_QWORD *)v114 + 1);
        v66 = v116;
        v60(v34, v116);
        v60(v65, v66);

        v64 = *(void (**)(char *, uint64_t))(v109 + 8);
        v64(v32, v111);
      }
      v67 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v68 = (void *)sub_23B1C5954();
      v69 = (void *)sub_23B1C5954();
      v119[0] = 0;
      v70 = objc_msgSend(v67, sel_moveItemAtURL_toURL_error_, v68, v69, v119);

      v71 = v110;
      if (v70)
      {
        v72 = qword_2569E12B0;
        v73 = v119[0];
        if (v72 != -1)
          swift_once();
        v74 = (id)qword_2569E5010;
        sub_23B1C599C();
        v75 = (void *)sub_23B1C5954();
        v76 = v71;
        v77 = v116;
        v60(v76, v116);
        objc_msgSend(v74, sel_purgeAsyncAtUrl_, v75);

        v60(v40, v77);
      }
      else
      {
        v78 = v119[0];
        v79 = (void *)sub_23B1C587C();

        swift_willThrow();
        v80 = (id)fpfs_current_or_default_log();
        v81 = v108;
        sub_23B1C5E58();
        v82 = v107;
        v83 = v116;
        v103(v107, (void (*)(_QWORD, _QWORD))v36, v116);
        v84 = v79;
        v85 = v79;
        v86 = sub_23B1C5E40();
        v87 = sub_23B1C6AA0();
        if (os_log_type_enabled(v86, v87))
        {
          v88 = swift_slowAlloc();
          v110 = (char *)swift_slowAlloc();
          v113 = (char *)swift_slowAlloc();
          v119[0] = v113;
          *(_DWORD *)v88 = 136446466;
          v114 = v60;
          v89 = (void *)sub_23B1C5954();
          v90 = objc_msgSend(v89, sel_fp_shortDescription);

          v91 = sub_23B1C63E0();
          v112 = v64;
          v92 = v79;
          v94 = v93;

          v118 = sub_23AABEC68(v91, v94, (uint64_t *)v119);
          v60 = v114;
          sub_23B1C6CBC();
          v95 = v92;
          swift_bridgeObjectRelease();
          v96 = v116;
          v60(v82, v116);
          *(_WORD *)(v88 + 12) = 2112;
          swift_getErrorValue();
          v97 = sub_23B0D9CF0(v117);
          v118 = (uint64_t)v97;
          v40 = v115;
          sub_23B1C6CBC();
          v98 = v110;
          *(_QWORD *)v110 = v97;

          _os_log_impl(&dword_23AA66000, v86, v87, "move of un-owned directory %{public}s to purgatory, ended with error %@", (uint8_t *)v88, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
          swift_arrayDestroy();
          MEMORY[0x23B8614BC]((char *)v98, -1, -1);
          v99 = v113;
          swift_arrayDestroy();
          MEMORY[0x23B8614BC](v99, -1, -1);
          MEMORY[0x23B8614BC](v88, -1, -1);

          v112(v108, v111);
          v83 = v96;
        }
        else
        {
          v60(v82, v83);

          v64(v81, v111);
        }
        sub_23AB63980(0xD000000000000018, 0x800000023B1F8250, 0xD00000000000001DLL, 0x800000023B1F8270);
        swift_willThrow();
        v60(v40, v83);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_23AB644B4@<X0>(int a1@<W0>, BOOL *a2@<X8>)
{
  uint64_t result;
  BOOL v5;
  int st_mode;
  int v7;
  stat v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  memset(&v8, 0, 28);
  memset(&v8.st_atimespec, 0, 112);
  result = fstat(a1, &v8);
  v5 = 0;
  if (!(_DWORD)result)
  {
    st_mode = v8.st_mode;
    v7 = sub_23B1C5EC4() & st_mode;
    result = sub_23B1C5EC4();
    if (v7 == (unsigned __int16)result)
    {
      result = fgetxattr(a1, "com.apple.fileprovider.detached-link#P", 0, 0, 0, 0);
      v5 = result >= 0;
    }
    else
    {
      v5 = 0;
    }
  }
  *a2 = v5;
  return result;
}

uint64_t sub_23AB645A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  void (*v45)(char *, uint64_t);
  void *v46;
  char *v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  os_log_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  int v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  char *v64;
  os_log_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80[16];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85[4];

  v4 = v3;
  v74 = a3;
  v77 = sub_23B1C5A08();
  v79 = *(_QWORD *)(v77 - 8);
  v7 = MEMORY[0x24BDAC7A8](v77);
  v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v64 - v10;
  v78 = sub_23B1C5E4C();
  v12 = *(_QWORD *)(v78 - 8);
  v13 = MEMORY[0x24BDAC7A8](v78);
  v76 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v64 - v15;
  v17 = sub_23B1C59E4();
  v19 = v18;
  v75 = v4;
  v81 = v4;
  v82 = a1;
  v20 = a1;
  v83 = a2;
  *(_OWORD *)v85 = xmmword_23B1CFA60;
  swift_bridgeObjectRetain();
  result = sub_23B0E130C(4294967294, v17, v19, 0x200000, 0, 0, (uint64_t)v85, (uint64_t)sub_23AB6CCC4, (uint64_t)v80);
  v70 = v11;
  v22 = v79;
  v69 = v9;
  v23 = v77;
  v71 = v12;
  v72 = v20;
  v73 = a2;
  v24 = v85[1];
  if (v85[1] == 1)
  {
    __break(1u);
  }
  else
  {
    v25 = v85[0];
    result = swift_bridgeObjectRelease();
    v27 = v72;
    v26 = v73;
    if (v24)
    {
      v28 = v16;
      v68 = v25;
      v29 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      v30 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
      v31 = v70;
      v32 = v23;
      v30(v70, v26, v23);
      v33 = v69;
      v30(v69, v27, v23);
      swift_bridgeObjectRetain();
      v34 = sub_23B1C5E40();
      v35 = sub_23B1C6AB8();
      v36 = v35;
      if (os_log_type_enabled(v34, v35))
      {
        v37 = swift_slowAlloc();
        v66 = v36;
        v38 = v37;
        v67 = swift_slowAlloc();
        v85[0] = v67;
        *(_DWORD *)v38 = 136315650;
        v64 = (char *)(v38 + 4);
        v65 = v34;
        v39 = (void *)sub_23B1C5954();
        v40 = objc_msgSend(v39, sel_fp_shortDescription);

        v41 = sub_23B1C63E0();
        v42 = v31;
        v44 = v43;

        v84 = sub_23AABEC68(v41, v44, v85);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        v64 = v28;
        v45 = *(void (**)(char *, uint64_t))(v79 + 8);
        v45(v42, v32);
        *(_WORD *)(v38 + 12) = 2080;
        v46 = (void *)sub_23B1C5954();
        v47 = v33;
        v48 = objc_msgSend(v46, sel_fp_shortDescription);

        v49 = sub_23B1C63E0();
        v51 = v50;

        v84 = sub_23AABEC68(v49, v51, v85);
        v27 = v72;
        sub_23B1C6CBC();
        v26 = v73;
        swift_bridgeObjectRelease();
        v45(v47, v32);
        *(_WORD *)(v38 + 22) = 2080;
        swift_bridgeObjectRetain();
        v52 = v68;
        v84 = sub_23AABEC68(v68, v24, v85);
        sub_23B1C6CBC();
        sub_23AB6CCE0(v52, v24);
        sub_23AB6CCE0(v52, v24);
        swift_bridgeObjectRelease();
        v53 = v65;
        _os_log_impl(&dword_23AA66000, v65, (os_log_type_t)v66, "refreshing relocation symlink from %s to %s: %s", (uint8_t *)v38, 0x20u);
        v54 = v67;
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v54, -1, -1);
        MEMORY[0x23B8614BC](v38, -1, -1);

        v55 = *(void (**)(char *, uint64_t))(v71 + 8);
        v55(v64, v78);
      }
      else
      {
        v56 = *(void (**)(char *, uint64_t))(v79 + 8);
        v56(v31, v23);
        v56(v33, v23);
        v57 = v68;
        sub_23AB6CCE0(v68, v24);
        sub_23AB6CCE0(v57, v24);

        v55 = *(void (**)(char *, uint64_t))(v71 + 8);
        v55(v28, v78);
      }
      sub_23B1C59E4();
      v58 = sub_23B1C6458();
      swift_bridgeObjectRelease();
      v59 = unlink((const char *)(v58 + 32));
      swift_release();
      if (v59)
      {
        v60 = (id)fpfs_current_or_default_log();
        sub_23B1C5E58();
        v61 = sub_23B1C5E40();
        v62 = sub_23B1C6AA0();
        if (os_log_type_enabled(v61, v62))
        {
          v63 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v63 = 67109120;
          LODWORD(v85[0]) = MEMORY[0x23B85E7A4]();
          sub_23B1C6CBC();
          _os_log_impl(&dword_23AA66000, v61, v62, "couldn't remove existing symlink: %{darwin.errno}d", v63, 8u);
          MEMORY[0x23B8614BC](v63, -1, -1);
        }

        return ((uint64_t (*)(char *, uint64_t))v55)(v76, v78);
      }
      else
      {
        return sub_23AB64D6C(v27, v26, v74);
      }
    }
  }
  return result;
}

uint64_t sub_23AB64BB8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  int st_mode;
  int v7;
  uint64_t v8;
  int v9;
  const char *v10;
  stat v11;
  stat v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  result = sub_23AB6C14C(a1);
  if ((result & 1) != 0)
  {
    memset(&v12, 0, 28);
    memset(&v12.st_atimespec, 0, 112);
    sub_23B1C59E4();
    v4 = sub_23B1C6458();
    swift_bridgeObjectRelease();
    v5 = lstat((const char *)(v4 + 32), &v12);
    result = swift_release();
    if (!v5)
    {
      st_mode = v12.st_mode;
      v7 = sub_23B1C5EB8() & st_mode;
      result = sub_23B1C5EB8();
      if (v7 == (unsigned __int16)result)
      {
        memset(&v11, 0, 28);
        memset(&v11.st_atimespec, 0, 112);
        sub_23B1C59E4();
        v8 = sub_23B1C6458();
        swift_bridgeObjectRelease();
        v9 = stat((const char *)(v8 + 32), &v11);
        result = swift_release();
        if (v9)
        {
          v10 = "target of symlink doesn't exists";
LABEL_11:
          *a2 = 0xD000000000000020;
          a2[1] = (unint64_t)(v10 - 32) | 0x8000000000000000;
          return result;
        }
        if (v11.st_dev != v12.st_dev || v11.st_ino != v12.st_ino)
        {
          v10 = "symlink points to the wrong item";
          goto LABEL_11;
        }
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t sub_23AB64D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  id v22;
  void (*v23)(char *, uint64_t, uint64_t);
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(char *, uint64_t);
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  os_log_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  id v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t);
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  int v64;
  uint64_t v65;
  char *v66;
  void *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(char *, uint64_t);
  void *v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  int v87;
  os_log_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  char *v91;
  void (*v92)(char *, uint64_t, uint64_t);
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;

  v96 = a3;
  v5 = sub_23B1C5A08();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v94 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v93 = (char *)&v86 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v86 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v86 - v14;
  v16 = sub_23B1C5E4C();
  v98 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v86 - v20;
  v22 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v99 = a2;
  v23(v15, a2, v5);
  v100 = a1;
  v92 = v23;
  v23(v13, a1, v5);
  v24 = sub_23B1C5E40();
  v25 = sub_23B1C6AB8();
  v26 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    v27 = swift_slowAlloc();
    v88 = v24;
    v28 = v27;
    v89 = swift_slowAlloc();
    v101 = v89;
    *(_DWORD *)v28 = 136446466;
    v95 = v16;
    v87 = v26;
    v29 = (void *)sub_23B1C5954();
    v30 = objc_msgSend(v29, sel_fp_shortDescription);
    v91 = v19;
    v31 = v30;

    v32 = sub_23B1C63E0();
    v34 = v33;

    v103 = sub_23AABEC68(v32, v34, &v101);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    v35 = *(void (**)(char *, uint64_t))(v6 + 8);
    v35(v15, v5);
    *(_WORD *)(v28 + 12) = 2082;
    v36 = (void *)sub_23B1C5954();
    v37 = objc_msgSend(v36, sel_fp_shortDescription);

    v38 = sub_23B1C63E0();
    v40 = v39;

    v103 = sub_23AABEC68(v38, v40, &v101);
    v41 = v91;
    sub_23B1C6CBC();
    v16 = v95;
    swift_bridgeObjectRelease();
    v90 = v35;
    v35(v13, v5);
    v42 = v88;
    _os_log_impl(&dword_23AA66000, v88, (os_log_type_t)v87, "create relocation symlink from %{public}s to %{public}s", (uint8_t *)v28, 0x16u);
    v43 = v89;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v43, -1, -1);
    MEMORY[0x23B8614BC](v28, -1, -1);

    v44 = *(void (**)(char *, uint64_t))(v98 + 8);
    v44(v21, v16);
    v45 = v5;
  }
  else
  {
    v46 = *(void (**)(char *, uint64_t))(v6 + 8);
    v46(v15, v5);
    v90 = v46;
    v46(v13, v5);

    v44 = *(void (**)(char *, uint64_t))(v98 + 8);
    v44(v21, v16);
    v45 = v5;
    v41 = v19;
  }
  v47 = v100;
  sub_23B1C59E4();
  v48 = v99;
  sub_23B1C59E4();
  v49 = sub_23B1C6458();
  swift_bridgeObjectRelease();
  v50 = sub_23B1C6458();
  swift_bridgeObjectRelease();
  v51 = symlink((const char *)(v49 + 32), (const char *)(v50 + 32));
  swift_release();
  v52 = swift_release();
  if (v51 && MEMORY[0x23B85E7A4](v52) != 17)
  {
    v95 = v16;
    v57 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v58 = v93;
    v59 = v48;
    v60 = v92;
    v92(v93, v59, v45);
    v61 = v94;
    v60(v94, v47, v45);
    v62 = sub_23B1C5E40();
    v63 = sub_23B1C6AA0();
    v64 = v63;
    if (os_log_type_enabled(v62, v63))
    {
      v65 = swift_slowAlloc();
      v100 = swift_slowAlloc();
      v101 = v100;
      *(_DWORD *)v65 = 136315650;
      v91 = v41;
      LODWORD(v99) = v64;
      v66 = v61;
      v67 = (void *)sub_23B1C5954();
      v68 = v45;
      v86 = v45;
      v69 = objc_msgSend(v67, sel_fp_shortDescription);

      v70 = sub_23B1C63E0();
      v71 = v58;
      v73 = v72;

      v103 = sub_23AABEC68(v70, v73, &v101);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      v74 = v68;
      v75 = (uint64_t (*)(char *, uint64_t))v90;
      v90(v71, v74);
      *(_WORD *)(v65 + 12) = 2080;
      v76 = (void *)sub_23B1C5954();
      v77 = objc_msgSend(v76, sel_fp_shortDescription);

      v78 = sub_23B1C63E0();
      v80 = v79;

      v103 = sub_23AABEC68(v78, v80, &v101);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      v81 = v75(v66, v86);
      *(_WORD *)(v65 + 22) = 1024;
      LODWORD(v103) = MEMORY[0x23B85E7A4](v81);
      sub_23B1C6CBC();
      _os_log_impl(&dword_23AA66000, v62, (os_log_type_t)v99, "cannot create symlink from %s to %s: %{darwin.errno}d", (uint8_t *)v65, 0x1Cu);
      v82 = v100;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v82, -1, -1);
      MEMORY[0x23B8614BC](v65, -1, -1);

      v83 = v91;
    }
    else
    {
      v84 = v90;
      v90(v58, v45);
      v84(v61, v45);

      v83 = v41;
    }
    return ((uint64_t (*)(char *, uint64_t))v44)(v83, v95);
  }
  else
  {
    v53 = sub_23B1C59E4();
    v55 = v54;
    MEMORY[0x24BDAC7A8](v53);
    *(&v86 - 4) = v48;
    *(&v86 - 3) = v47;
    v85 = v97;
    v101 = 0;
    v102 = 256;
    swift_bridgeObjectRetain();
    result = sub_23B0E1048(4294967294, v53, v55, 0x200000, 0, 0, (uint64_t)&v101, (uint64_t)sub_23AB6CCF4, (uint64_t)(&v86 - 6));
    if ((v102 & 0x100) != 0)
      __break(1u);
    else
      return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23AB654E0@<X0>(int a1@<W0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  id v26;
  char *v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  id v48;
  char *v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char *v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t result;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void (*v72)(char *, char *, uint64_t);
  NSObject *v73;
  os_log_type_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  void (*v83)(char *, uint64_t);
  char *v84;
  void *v85;
  id v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  void (*v91)(char *, uint64_t);
  char v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  stat v105;
  stat v106;
  uint64_t v107[3];

  v102 = a5;
  v94 = a4;
  v99 = a3;
  LODWORD(v95) = a1;
  v107[1] = *MEMORY[0x24BDAC8D0];
  v103 = sub_23B1C5A08();
  v6 = *(_QWORD *)(v103 - 8);
  v7 = MEMORY[0x24BDAC7A8](v103);
  v97 = (char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v96 = (char *)&v93 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v93 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v93 - v14;
  v16 = sub_23B1C5E4C();
  v100 = *(_QWORD *)(v16 - 8);
  v101 = v16;
  v17 = MEMORY[0x24BDAC7A8](v16);
  v98 = (char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v93 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v93 - v22;
  memset(&v105, 0, 28);
  memset(&v105.st_atimespec, 0, 112);
  v24 = a2;
  sub_23B1C59E4();
  v25 = sub_23B1C6458();
  swift_bridgeObjectRelease();
  LODWORD(a2) = stat((const char *)(v25 + 32), &v105);
  swift_release();
  if ((_DWORD)a2)
  {
    v26 = (id)fpfs_current_or_default_log();
    v27 = v98;
    sub_23B1C5E58();
    v28 = v97;
    v29 = v103;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v97, v24, v103);
    v30 = sub_23B1C5E40();
    v31 = sub_23B1C6AA0();
    v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      v33 = swift_slowAlloc();
      v99 = v6;
      v34 = v33;
      v96 = (char *)swift_slowAlloc();
      *(_QWORD *)&v106.st_dev = v96;
      *(_DWORD *)v34 = 136315394;
      v94 = v34 + 4;
      LODWORD(v95) = v32;
      v35 = (void *)sub_23B1C5954();
      v36 = objc_msgSend(v35, sel_fp_shortDescription);

      v37 = sub_23B1C63E0();
      v38 = v29;
      v40 = v39;

      v107[0] = sub_23AABEC68(v37, v40, (uint64_t *)&v106.st_dev);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      v41 = (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v28, v38);
      *(_WORD *)(v34 + 12) = 1024;
      LODWORD(v107[0]) = MEMORY[0x23B85E7A4](v41);
      sub_23B1C6CBC();
      _os_log_impl(&dword_23AA66000, v30, (os_log_type_t)v95, "cannot stat target of symlink at %s: %{darwin.errno}d", (uint8_t *)v34, 0x12u);
      v42 = v96;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v42, -1, -1);
      MEMORY[0x23B8614BC](v34, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v28, v29);
    }

    result = (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v27, v101);
    v64 = v102;
    goto LABEL_19;
  }
  v98 = v24;
  v43 = v21;
  v44 = v13;
  v45 = v103;
  memset(&v106, 0, 28);
  memset(&v106.st_atimespec, 0, 112);
  sub_23B1C59E4();
  v46 = sub_23B1C6458();
  swift_bridgeObjectRelease();
  v47 = lstat((const char *)(v46 + 32), &v106);
  swift_release();
  if (!v47)
  {
    v65 = v99;
    if (v105.st_dev != v106.st_dev || v105.st_ino != v106.st_ino)
    {
      v71 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      v72 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
      v72(v15, v98, v45);
      v72(v44, (char *)v65, v45);
      v73 = sub_23B1C5E40();
      v74 = sub_23B1C6AA0();
      v75 = v74;
      if (os_log_type_enabled(v73, v74))
      {
        v76 = swift_slowAlloc();
        v95 = v44;
        v99 = v6;
        v77 = v76;
        v98 = (char *)swift_slowAlloc();
        v107[0] = (uint64_t)v98;
        *(_DWORD *)v77 = 136315394;
        LODWORD(v96) = v75;
        v78 = (void *)sub_23B1C5954();
        v79 = objc_msgSend(v78, sel_fp_shortDescription);

        v80 = sub_23B1C63E0();
        v97 = v23;
        v82 = v81;

        v104 = sub_23AABEC68(v80, v82, v107);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        v83 = *(void (**)(char *, uint64_t))(v99 + 8);
        v83(v15, v45);
        *(_WORD *)(v77 + 12) = 2080;
        v99 = v77 + 14;
        v84 = v95;
        v85 = (void *)sub_23B1C5954();
        v86 = objc_msgSend(v85, sel_fp_shortDescription);

        v87 = sub_23B1C63E0();
        v89 = v88;

        v104 = sub_23AABEC68(v87, v89, v107);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        v83(v84, v103);
        _os_log_impl(&dword_23AA66000, v73, (os_log_type_t)v96, "symlink at %s doesn't target %s", (uint8_t *)v77, 0x16u);
        v90 = v98;
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v90, -1, -1);
        MEMORY[0x23B8614BC](v77, -1, -1);

        result = (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v97, v101);
      }
      else
      {
        v91 = *(void (**)(char *, uint64_t))(v6 + 8);
        v91(v15, v45);
        v91(v44, v45);

        result = (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v23, v101);
      }
      goto LABEL_18;
    }
    sub_23B1C63E0();
    sub_23B1C6458();
    swift_bridgeObjectRelease();
    fpfs_set_is_ignore_root();
    swift_release();
    v66 = (void *)sub_23AB60CA8();
    v67 = sub_23B1C63E0();
    v69 = v68;

    if (v67 == 0xD00000000000002BLL && v69 == 0x800000023B1F8300)
    {
      swift_bridgeObjectRelease();
      v70 = v102;
    }
    else
    {
      v92 = sub_23B1C7388();
      swift_bridgeObjectRelease();
      v70 = v102;
      if ((v92 & 1) == 0)
      {
LABEL_23:
        fpfs_fsetxattr();
        fpfs_fset_acl();
        result = fpfs_fset_acl();
        *(_QWORD *)v70 = 0;
        *(_BYTE *)(v70 + 8) = 0;
        return result;
      }
    }
    fpfs_fchflags();
    goto LABEL_23;
  }
  v48 = (id)fpfs_current_or_default_log();
  v49 = v43;
  sub_23B1C5E58();
  v50 = v96;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v96, v99, v45);
  v51 = sub_23B1C5E40();
  v52 = sub_23B1C6AA0();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = swift_slowAlloc();
    v99 = (uint64_t)v49;
    v54 = v53;
    v98 = (char *)swift_slowAlloc();
    v107[0] = (uint64_t)v98;
    *(_DWORD *)v54 = 136315394;
    v97 = (char *)(v54 + 4);
    v55 = (void *)sub_23B1C5954();
    v56 = v50;
    v57 = objc_msgSend(v55, sel_fp_shortDescription);

    v58 = sub_23B1C63E0();
    v60 = v59;

    v104 = sub_23AABEC68(v58, v60, v107);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    v61 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v56, v103);
    *(_WORD *)(v54 + 12) = 1024;
    LODWORD(v104) = MEMORY[0x23B85E7A4](v61);
    sub_23B1C6CBC();
    _os_log_impl(&dword_23AA66000, v51, v52, "cannot stat relocated folder at %s: %{darwin.errno}d", (uint8_t *)v54, 0x12u);
    v62 = v98;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v62, -1, -1);
    MEMORY[0x23B8614BC](v54, -1, -1);

    result = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 8))(v99, v101);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v50, v45);

    result = (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v49, v101);
  }
LABEL_18:
  v64 = v102;
LABEL_19:
  *(_QWORD *)v64 = -1;
  *(_BYTE *)(v64 + 8) = 0;
  return result;
}

uint64_t sub_23AB65E90(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  _QWORD v39[2];
  uint8_t *v40;
  uint64_t v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v50 = a5;
  v6 = v5;
  v49 = a4;
  v10 = sub_23B1C5A08();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23B1C5E4C();
  v47 = *(_QWORD *)(v14 - 8);
  v48 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v45 = v11;
  v46 = v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  v18 = sub_23B1C5E40();
  v19 = sub_23B1C6AB8();
  v20 = os_log_type_enabled(v18, v19);
  v51 = a1;
  if (v20)
  {
    v42 = v18;
    v21 = (uint8_t *)swift_slowAlloc();
    v41 = swift_slowAlloc();
    v53 = v41;
    v40 = v21;
    *(_DWORD *)v21 = 136446210;
    v39[1] = v21 + 4;
    v22 = (void *)sub_23B1C5954();
    v23 = objc_msgSend(v22, sel_fp_shortDescription);
    v44 = a3;
    v24 = v23;

    v25 = sub_23B1C63E0();
    v43 = a2;
    v27 = v26;

    a3 = v44;
    v52 = sub_23AABEC68(v25, v27, &v53);
    sub_23B1C6CBC();
    a2 = v43;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v46);
    v18 = v42;
    v28 = v40;
    _os_log_impl(&dword_23AA66000, v42, v19, "creating root at %{public}s", v40, 0xCu);
    v29 = v41;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v29, -1, -1);
    MEMORY[0x23B8614BC](v28, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v46);
  }

  (*(void (**)(char *, uint64_t))(v47 + 8))(v16, v48);
  v30 = v49;
  v31 = objc_msgSend(v49, sel_nsDomain);
  v32 = objc_msgSend(v31, sel_personaIdentifier);

  if (v32)
  {
    v34 = sub_23B1C63E0();
    v36 = v35;

  }
  else
  {
    v34 = 0;
    v36 = 0;
  }
  MEMORY[0x24BDAC7A8](v33);
  v39[-6] = v6;
  v39[-5] = v30;
  v39[-4] = v51;
  v39[-3] = a2;
  v37 = v50;
  v39[-2] = a3;
  v39[-1] = v37;
  sub_23AC462B8(v34, v36, (uint64_t)sub_23AB6CD10, (uint64_t)&v39[-8]);
  return swift_bridgeObjectRelease();
}

void sub_23AB661D4(uint8_t *a1, char *a2, NSObject *a3, uint8_t *a4, void (*a5)(char *, uint64_t), _BYTE *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int (*v140)(char *, uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  void *v146;
  id v147;
  uint64_t v148;
  unsigned int (*v149)(char *, uint64_t, uint64_t);
  uint64_t v150;
  unsigned int v151;
  os_log_t v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  id v156;
  void *v157;
  unsigned int (*v158)(char *, uint64_t, uint64_t);
  id v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  os_log_t v164;
  uint64_t v165;
  uint64_t v166;
  uint8_t *v167;
  uint64_t v168;
  unsigned int v169;
  char *v170;
  void *v171;
  void *v172;
  id v173;
  id v174;
  id v175;
  void *v176;
  uint64_t v177;
  unsigned int v178;
  void (*v179)(char *, uint64_t);
  uint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  id v191;
  void *v192;
  id v193;
  id v194;
  uint8_t *v195;
  os_log_t v196;
  uint64_t v197;
  uint64_t v198;
  char **v199;
  char *v200;
  uint8_t *v201;
  void (*v202)(char *, uint64_t, uint64_t);
  uint64_t v203;
  char *v204;
  void *v205;
  uint64_t v206;
  id v207;
  void *v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  NSObject *v213;
  uint64_t v214;
  char *v215;
  char *v216;
  const char *isa;
  id v218;
  void *v219;
  unsigned int v220;
  void *v221;
  id v222;
  void (*v223)(NSObject *, uint64_t);
  id v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  id v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  id v237;
  char *v238;
  void *v239;
  void *v240;
  id v241;
  id v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  void *v248;
  id v249;
  char *v250;
  unint64_t v251;
  unint64_t v252;
  id v253;
  char *v254;
  char *v255;
  uint8_t *v256;
  os_log_type_t v257;
  int v258;
  uint64_t v259;
  id v260;
  id v261;
  char *v262;
  void *v263;
  id v264;
  id v265;
  uint64_t v266;
  char *v267;
  unint64_t v268;
  unint64_t v269;
  char **v270;
  uint8_t *v271;
  NSObject *v272;
  uint8_t *v273;
  uint64_t v274;
  id v275;
  uint64_t v276;
  void (*v277)(char *, void (*)(char *, uint64_t), uint64_t);
  void (*v278)(char *, uint64_t);
  void (*v279)(char *, uint64_t);
  uint8_t *v280;
  void (*v281)(char *, uint64_t);
  NSObject *v282;
  uint64_t v283;
  os_log_type_t v284;
  uint64_t v285;
  void *v286;
  id v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint8_t *v291;
  char *v292;
  char v293;
  void *v294;
  void *v295;
  unsigned int v296;
  void (*v297)(char *, uint64_t);
  id v298;
  uint64_t v299;
  uint64_t v300;
  id v301;
  uint64_t v302;
  uint64_t *v303;
  os_log_t v304;
  uint8_t *v305;
  void (*v306)(char *, void (*)(char *, uint64_t), uint64_t);
  void (*v307)(char *, uint64_t);
  os_log_t v308;
  NSObject *v309;
  os_log_type_t v310;
  int v311;
  uint8_t *v312;
  void *v313;
  id v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  uint8_t *v318;
  char *v319;
  char v320;
  void *v321;
  id v322;
  void *v323;
  id v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  id v329;
  void *v330;
  uint64_t v331;
  unsigned int v332;
  void *v333;
  id v334;
  void *v335;
  char *v336;
  void *v337;
  char *v338;
  id v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  char *v343;
  char *v344;
  void (*v345)(void (*)(char *, uint64_t), void (*)(char *, uint64_t), uint64_t);
  void *v346;
  void *v347;
  id v348;
  _BOOL4 v349;
  id v350;
  void *v351;
  id v352;
  NSObject *v353;
  unint64_t v354;
  unint64_t v355;
  void *v356;
  unsigned int v357;
  id v358;
  void (*v359)(char *, uint64_t);
  void *v360;
  id v361;
  void (*v362)(char *, uint64_t);
  os_log_type_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  void *v367;
  id v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  void (*v372)(char *, char *);
  os_log_t v373;
  char *v374;
  uint64_t v375;
  void (*v376)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  __int128 v381;
  char **v382;
  uint64_t v383;
  uint64_t v384;
  id v385;
  void *v386;
  char *v387;
  id v388;
  char *v389;
  id v390;
  NSObject *v391;
  os_log_type_t v392;
  int v393;
  _BOOL4 v394;
  uint64_t v395;
  id v396;
  id v397;
  void *v398;
  id v399;
  uint64_t v400;
  unint64_t v401;
  unint64_t v402;
  uint64_t v403;
  id v404;
  void *v405;
  id v406;
  uint64_t v407;
  unint64_t v408;
  unint64_t v409;
  os_log_t v410;
  os_log_t v411;
  char *v412;
  id v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t (*v417)(char *, uint64_t);
  uint64_t v418;
  uint64_t v419;
  id v420;
  char *v421;
  id v422;
  NSObject *v423;
  os_log_type_t v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  id v428;
  char *v429;
  void *v430;
  id v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  uint64_t v435;
  id v436;
  void *v437;
  id v438;
  uint64_t v439;
  unint64_t v440;
  unint64_t v441;
  os_log_t v442;
  char *v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  id v448;
  id v449;
  char *v450;
  uint64_t v451;
  void *v452;
  uint64_t v453;
  uint64_t v454;
  unsigned int v455;
  id v456;
  char *v457;
  id v458;
  NSObject *v459;
  os_log_type_t v460;
  uint8_t *v461;
  _QWORD *v462;
  id v463;
  _QWORD *v464;
  id v465;
  void *v466;
  void *v467;
  void *v468;
  unsigned int v469;
  id v470;
  NSObject *v471;
  void **p_isa;
  void (*v473)(char *, uint64_t);
  void *v474;
  void *v475;
  void *v476;
  char v477;
  void *v478;
  id v479;
  id v480;
  char *v481;
  void (*v482)(char *, void (*)(char *, uint64_t), uint64_t);
  void (*v483)(char *, uint64_t);
  uint64_t v484;
  char *v485;
  char *v486;
  NSObject *v487;
  int v488;
  uint64_t v489;
  void *v490;
  char *v491;
  id v492;
  uint64_t v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  uint8_t *v497;
  void *v498;
  id v499;
  uint64_t v500;
  void *v501;
  id v502;
  id v503;
  char *v504;
  void *v505;
  id v506;
  uint64_t v507;
  void *v508;
  id v509;
  uint8_t *v510;
  uint8_t *v511;
  id v512;
  char *v513;
  NSObject *v514;
  char *v515;
  uint64_t v516;
  char *v517;
  char *v518;
  NSObject *v519;
  os_log_type_t v520;
  int v521;
  uint64_t v522;
  char *v523;
  uint64_t v524;
  void *v525;
  id v526;
  uint64_t v527;
  unint64_t v528;
  unint64_t v529;
  void (*v530)(char *, uint64_t);
  uint8_t *v531;
  char *v532;
  void (*v533)(char *, uint64_t);
  uint64_t v534;
  char v535;
  id v536;
  uint64_t v537;
  void *v538;
  id v539;
  id v540;
  id v541;
  char *v542;
  uint8_t *v543;
  void (*v544)(char *, void (*)(char *, uint64_t), uint64_t);
  char *v545;
  char *v546;
  char *v547;
  char *v548;
  char *v549;
  void (*v550)(char *, uint64_t);
  uint8_t *v551;
  os_log_type_t v552;
  int v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  void *v557;
  id v558;
  char *v559;
  uint8_t *v560;
  id v561;
  uint64_t v562;
  unint64_t v563;
  unint64_t v564;
  void (*v565)(char *, uint64_t);
  void *v566;
  id v567;
  uint64_t v568;
  unint64_t v569;
  unint64_t v570;
  NSObject *v571;
  void (*v572)(char *, uint64_t);
  id v573;
  void *v574;
  id v575;
  uint64_t v576;
  unint64_t v577;
  unint64_t v578;
  uint8_t *v579;
  uint64_t v580;
  id v581;
  char *v582;
  uint8_t *v583;
  void (*v584)(char *, void (*)(char *, uint64_t), uint64_t);
  char *v585;
  uint64_t v586;
  char *v587;
  char *v588;
  char *v589;
  char *v590;
  void (*v591)(char *, uint64_t);
  uint8_t *v592;
  os_log_type_t v593;
  int v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  void *v598;
  id v599;
  char *v600;
  uint8_t *v601;
  id v602;
  uint64_t v603;
  unint64_t v604;
  unint64_t v605;
  void (*v606)(char *, uint64_t);
  void *v607;
  id v608;
  uint64_t v609;
  unint64_t v610;
  unint64_t v611;
  NSObject *v612;
  void (*v613)(char *, uint64_t);
  id v614;
  void *v615;
  id v616;
  uint64_t v617;
  unint64_t v618;
  unint64_t v619;
  uint8_t *v620;
  uint64_t v621;
  id v622;
  char *v623;
  void (*v624)(char *, void (*)(char *, uint64_t), uint64_t);
  char *v625;
  char *v626;
  char *v627;
  char *v628;
  uint8_t *v629;
  NSObject *v630;
  os_log_type_t v631;
  int v632;
  _BOOL4 v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  char *v637;
  void *v638;
  id v639;
  uint64_t v640;
  unint64_t v641;
  unint64_t v642;
  void (*v643)(char *, uint64_t);
  void *v644;
  id v645;
  uint64_t v646;
  unint64_t v647;
  unint64_t v648;
  uint8_t *v649;
  id v650;
  void *v651;
  id v652;
  uint64_t v653;
  unint64_t v654;
  unint64_t v655;
  os_log_t v656;
  uint64_t v657;
  uint64_t v658;
  os_log_t v659;
  uint64_t inited;
  uint64_t v661;
  uint64_t *boxed_opaque_existential_0;
  char *v663;
  void (*v664)(char *, uint64_t);
  NSObject *v665;
  id v666;
  unint64_t v667;
  char *v668;
  uint64_t v669;
  id v670;
  void *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  const char *v675;
  uint64_t v676;
  unint64_t v677;
  char *v678;
  void (*v679)(char *, uint64_t);
  uint8_t *v680;
  id v681;
  char *v682;
  void *v683;
  char *v684;
  _QWORD *v685;
  _QWORD *v686;
  uint64_t v687;
  char *v688;
  void (*v689)(char *, uint64_t);
  _QWORD *v690;
  uint64_t v691;
  id v692;
  char v693;
  char *v694;
  id v695;
  char *v696;
  NSObject *v697;
  char *v698;
  char *v699;
  uint64_t v700;
  void (*v701)(char *, uint64_t);
  NSObject *v702;
  os_log_type_t v703;
  uint64_t v704;
  uint64_t v705;
  void *v706;
  id v707;
  uint64_t v708;
  unint64_t v709;
  unint64_t v710;
  NSObject *v711;
  uint64_t v712;
  id v713;
  char *v714;
  void (*v715)(char *, void (*)(char *, uint64_t), uint64_t);
  uint64_t v716;
  char *v717;
  void (*v718)(char *, uint64_t);
  char *v719;
  NSObject *v720;
  os_log_type_t v721;
  uint8_t *v722;
  void *v723;
  id v724;
  uint64_t v725;
  unint64_t v726;
  unint64_t v727;
  uint8_t *v728;
  NSObject *v729;
  void (*v730)(char *, uint64_t);
  _QWORD *v731;
  uint64_t v732;
  char *v733;
  _BYTE *v734;
  uint64_t v735;
  int v736;
  int v737;
  uint64_t v738;
  void **v739;
  void *v740;
  void *v741;
  id v742;
  char v743;
  id v744;
  id v745;
  uint64_t v746;
  os_log_t v747;
  uint64_t v748;
  _QWORD *v749;
  void *v750;
  id v751;
  id v752;
  unint64_t v753;
  NSObject *v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  void (*v760)(char *, uint64_t);
  NSObject *v761;
  unint64_t v762;
  char *v763;
  id v764;
  os_log_t v765;
  uint64_t v766;
  NSObject *v767;
  id v768;
  char *v769;
  uint64_t v770;
  NSObject *v771;
  NSObject *v772;
  uint64_t v773;
  char *v774;
  void *v775;
  id v776;
  uint64_t v777;
  unint64_t v778;
  unint64_t v779;
  uint64_t v780;
  uint8_t *v781;
  void *v782;
  id v783;
  uint64_t v784;
  void *v785;
  uint64_t v786;
  uint64_t v787;
  unint64_t v788;
  uint64_t *v789;
  void *v790;
  id v791;
  id v792;
  unint64_t v793;
  NSObject *v794;
  char *v795;
  __int128 v796;
  _QWORD v797[4];
  unint64_t v798;
  char *v799;
  uint64_t v800;
  id v801;
  unsigned int (*v802)(char *, uint64_t, uint64_t);
  char *v803;
  id v804;
  char *v805;
  char *v806;
  char *v807;
  char *v808;
  char *v809;
  char *v810;
  char *v811;
  void (*v812)(char *, uint64_t);
  char *v813;
  char *v814;
  char *v815;
  char *v816;
  char *v817;
  char *v818;
  char *v819;
  char *v820;
  char *v821;
  char *v822;
  char *v823;
  char *v824;
  char *v825;
  char *v826;
  char *v827;
  char *v828;
  char *v829;
  char *v830;
  char *v831;
  void (*v832)(char *, uint64_t);
  char *v833;
  char *v834;
  void (*v835)(char *, uint64_t);
  void (*v836)(char *, uint64_t);
  os_log_t v837;
  uint64_t v838;
  char *v839;
  char *v840;
  char *v841;
  _QWORD *v842;
  uint8_t *v843;
  uint8_t *v844;
  char *v845;
  unint64_t v846;
  id v847;
  char *v848;
  char *v849;
  char *v850;
  char *v851;
  char *v852;
  uint64_t v853;
  char *v854;
  char *v855;
  char *v856;
  _BYTE *v857;
  uint64_t v858;
  uint64_t v859;
  char *v860;
  char *v861;
  char *v862;
  char *v863;
  char *v864;
  char *v865;
  uint64_t v866;
  uint64_t v867;
  char *v868;
  uint64_t v869;
  __int128 v870;
  void (*v871)(uint64_t, uint64_t);
  uint64_t v872;
  os_log_t v873;
  char **v874;
  char *v875;
  os_log_t v876;
  void (*v877)(char *, uint64_t);
  char *v878;
  unint64_t v879;
  void *v880;
  uint8_t *v881;
  uint8_t *v882;
  NSObject *v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  int v887;
  id v888;
  uint64_t v889;
  uint64_t v890;
  stat v891;
  uint64_t v892;

  v857 = a6;
  v877 = a5;
  v879 = (unint64_t)a4;
  v876 = a3;
  v882 = a1;
  v892 = *MEMORY[0x24BDAC8D0];
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v874 = (char **)((char *)&v798 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = MEMORY[0x24BDAC7A8](v8);
  v855 = (char *)&v798 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v854 = (char *)&v798 - v12;
  v853 = type metadata accessor for ItemMetadata();
  MEMORY[0x24BDAC7A8](v853);
  v866 = (uint64_t)&v798 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)sub_23B1C5570();
  v846 = *(v14 - 1);
  v847 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v845 = (char *)&v798 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v869 = sub_23B1C5E4C();
  v867 = *(_QWORD *)(v869 - 8);
  v16 = MEMORY[0x24BDAC7A8](v869);
  v808 = (char *)&v798 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v821 = (char *)&v798 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v820 = (char *)&v798 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v818 = (char *)&v798 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v840 = (char *)&v798 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v863 = (char *)&v798 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v868 = (char *)&v798 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v848 = (char *)&v798 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v856 = (char *)&v798 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v831 = (char *)&v798 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v816 = (char *)&v798 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v814 = (char *)&v798 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v830 = (char *)&v798 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v838 = (uint64_t)&v798 - v43;
  MEMORY[0x24BDAC7A8](v42);
  v844 = (uint8_t *)&v798 - v44;
  v884 = sub_23B1C5A08();
  v881 = *(uint8_t **)(v884 - 8);
  v45 = MEMORY[0x24BDAC7A8](v884);
  v806 = (char *)&v798 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = MEMORY[0x24BDAC7A8](v45);
  v807 = (char *)&v798 - v48;
  v49 = MEMORY[0x24BDAC7A8](v47);
  v805 = (char *)&v798 - v50;
  v51 = MEMORY[0x24BDAC7A8](v49);
  v849 = (char *)&v798 - v52;
  v53 = MEMORY[0x24BDAC7A8](v51);
  v839 = (char *)&v798 - v54;
  v55 = MEMORY[0x24BDAC7A8](v53);
  v819 = (char *)&v798 - v56;
  v57 = MEMORY[0x24BDAC7A8](v55);
  v850 = (char *)&v798 - v58;
  v59 = MEMORY[0x24BDAC7A8](v57);
  v817 = (char *)&v798 - v60;
  v61 = MEMORY[0x24BDAC7A8](v59);
  v813 = (char *)&v798 - v62;
  v63 = MEMORY[0x24BDAC7A8](v61);
  v812 = (void (*)(char *, uint64_t))((char *)&v798 - v64);
  v65 = MEMORY[0x24BDAC7A8](v63);
  v842 = (unint64_t *)((char *)&v798 - v66);
  v67 = MEMORY[0x24BDAC7A8](v65);
  v833 = (char *)&v798 - v68;
  v69 = MEMORY[0x24BDAC7A8](v67);
  v834 = (char *)&v798 - v70;
  v71 = MEMORY[0x24BDAC7A8](v69);
  v832 = (void (*)(char *, uint64_t))((char *)&v798 - v72);
  v73 = MEMORY[0x24BDAC7A8](v71);
  v861 = (char *)&v798 - v74;
  v75 = MEMORY[0x24BDAC7A8](v73);
  v864 = (char *)&v798 - v76;
  v77 = MEMORY[0x24BDAC7A8](v75);
  v841 = (char *)&v798 - v78;
  v79 = MEMORY[0x24BDAC7A8](v77);
  v860 = (char *)&v798 - v80;
  v81 = MEMORY[0x24BDAC7A8](v79);
  v852 = (char *)&v798 - v82;
  v83 = MEMORY[0x24BDAC7A8](v81);
  v865 = (char *)&v798 - v84;
  v85 = MEMORY[0x24BDAC7A8](v83);
  v883 = ((char *)&v798 - v86);
  v87 = MEMORY[0x24BDAC7A8](v85);
  v826 = (char *)&v798 - v88;
  v89 = MEMORY[0x24BDAC7A8](v87);
  v827 = (char *)&v798 - v90;
  v91 = MEMORY[0x24BDAC7A8](v89);
  v825 = (char *)&v798 - v92;
  v93 = MEMORY[0x24BDAC7A8](v91);
  v862 = (char *)&v798 - v94;
  v95 = MEMORY[0x24BDAC7A8](v93);
  v828 = (char *)&v798 - v96;
  v97 = MEMORY[0x24BDAC7A8](v95);
  v829 = (char *)&v798 - v98;
  v99 = MEMORY[0x24BDAC7A8](v97);
  v815 = (char *)&v798 - v100;
  v101 = MEMORY[0x24BDAC7A8](v99);
  v810 = (char *)&v798 - v102;
  v103 = MEMORY[0x24BDAC7A8](v101);
  v811 = (char *)&v798 - v104;
  v105 = MEMORY[0x24BDAC7A8](v103);
  v809 = (char *)&v798 - v106;
  v107 = MEMORY[0x24BDAC7A8](v105);
  v823 = (char *)&v798 - v108;
  v109 = MEMORY[0x24BDAC7A8](v107);
  v824 = (char *)&v798 - v110;
  v111 = MEMORY[0x24BDAC7A8](v109);
  v822 = (char *)&v798 - v112;
  v113 = MEMORY[0x24BDAC7A8](v111);
  v843 = (uint8_t *)&v798 - v114;
  v115 = MEMORY[0x24BDAC7A8](v113);
  v836 = (void (*)(char *, uint64_t))((char *)&v798 - v116);
  v117 = MEMORY[0x24BDAC7A8](v115);
  v837 = (os_log_t)((char *)&v798 - v118);
  v119 = MEMORY[0x24BDAC7A8](v117);
  v835 = (void (*)(char *, uint64_t))((char *)&v798 - v120);
  MEMORY[0x24BDAC7A8](v119);
  v875 = (char *)&v798 - v121;
  v122 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v122);
  v871 = (void (*)(uint64_t, uint64_t))((char *)&v798 - ((v123 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v870 = sub_23B1C5474();
  v872 = *(_QWORD *)(v870 - 8);
  MEMORY[0x24BDAC7A8](v870);
  v873 = (os_log_t)((char *)&v798 - ((v124 + 15) & 0xFFFFFFFFFFFFFFF0));
  v125 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v126 = MEMORY[0x24BDAC7A8](v125);
  v851 = (char *)&v798 - ((v127 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = MEMORY[0x24BDAC7A8](v126);
  v859 = (uint64_t)&v798 - v129;
  v130 = MEMORY[0x24BDAC7A8](v128);
  v858 = (uint64_t)&v798 - v131;
  v132 = MEMORY[0x24BDAC7A8](v130);
  v134 = (char *)&v798 - v133;
  v135 = MEMORY[0x24BDAC7A8](v132);
  v137 = (char *)&v798 - v136;
  v138 = MEMORY[0x24BDAC7A8](v135);
  v140 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v798 - v139);
  v141 = MEMORY[0x24BDAC7A8](v138);
  v143 = (char *)&v798 - v142;
  MEMORY[0x24BDAC7A8](v141);
  v145 = (char *)&v798 - v144;
  v146 = (void *)objc_opt_self();
  v147 = objc_msgSend(v146, sel_defaultManager);
  v878 = a2;
  v148 = (uint64_t)v880;
  sub_23AB63760(a2, (uint64_t)v145);
  v880 = (void *)v148;
  if (v148)
  {

    return;
  }
  v801 = v146;
  v802 = v140;
  v799 = v134;
  v800 = (uint64_t)v137;
  v803 = v145;
  v804 = v147;
  v149 = (unsigned int (*)(char *, uint64_t, uint64_t))*((_QWORD *)v881 + 6);
  v150 = v884;
  v151 = v149(v145, 1, v884);
  v152 = v876;
  sub_23AB6C0EC((uint64_t)v876, (uint64_t)v143);
  if (v151 != 1 && v149(v143, 1, v150) != 1)
  {
    sub_23AA8A05C((uint64_t)v143, (uint64_t *)&unk_2542E6740);
    sub_23B1C5390();
    goto LABEL_15;
  }
  sub_23AA8A05C((uint64_t)v143, (uint64_t *)&unk_2542E6740);
  v153 = v879;
  if (v879 >> 62)
  {
    swift_bridgeObjectRetain();
    v154 = sub_23B1C7088();
    swift_bridgeObjectRelease();
  }
  else
  {
    v154 = *(_QWORD *)((v879 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v155 = (char *)v802;
  sub_23AB6C0EC((uint64_t)v152, (uint64_t)v802);
  if (v154 >= 1 && v149(v155, 1, v150) == 1)
  {
    sub_23AA8A05C((uint64_t)v155, (uint64_t *)&unk_2542E6740);
    sub_23B1C536C();
LABEL_15:
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
    v164 = v873;
    v165 = v870;
    sub_23B1C5864();
    sub_23B1C5354();
    (*(void (**)(os_log_t, uint64_t))(v872 + 8))(v164, v165);
    swift_willThrow();

    v166 = (uint64_t)v803;
    goto LABEL_89;
  }
  v798 = v153 >> 62;
  sub_23AA8A05C((uint64_t)v155, (uint64_t *)&unk_2542E6740);
  v156 = objc_msgSend(v878, sel_provider);
  if (v156)
  {
    v157 = v156;
    v158 = v149;
    v159 = objc_msgSend(v156, sel_identifier);

    v160 = sub_23B1C63E0();
    v162 = v161;

    if (v160 == 0xD00000000000002BLL && v162 == 0x800000023B1F8300)
    {
      swift_bridgeObjectRelease();
      v163 = 1;
    }
    else
    {
      v163 = sub_23B1C7388();
      swift_bridgeObjectRelease();
    }
    v167 = v881;
    v149 = v158;
  }
  else
  {
    v163 = 0;
    v167 = v881;
  }
  v168 = v800;
  sub_23AB6C0EC((uint64_t)v152, v800);
  v802 = v149;
  v169 = v149((char *)v168, 1, v150);
  v170 = v875;
  if (v169 == 1)
  {
    sub_23AA8A05C(v168, (uint64_t *)&unk_2542E6740);
    LODWORD(v800) = 0;
  }
  else
  {
    (*((void (**)(char *, uint64_t, uint64_t))v167 + 4))(v875, v168, v150);
    v171 = (void *)sub_23B1C5954();
    v172 = (void *)sub_23B1C5954();
    v173 = objc_msgSend(v171, sel_fp_relationshipToItemAtURL_, v172);

    (*((void (**)(char *, uint64_t))v167 + 1))(v170, v150);
    LODWORD(v800) = (v173 == (id)1) & v163;
  }
  v174 = v801;
  v175 = objc_msgSend(v801, sel_defaultManager);
  sub_23B1C59E4();
  v176 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  v177 = (uint64_t)&selRef_defaultManager;
  v178 = objc_msgSend(v175, sel_fileExistsAtPath_, v176);

  if (!v178 || (v800 & 1) != 0)
  {
    LODWORD(v838) = 0;
    v189 = v879;
    goto LABEL_31;
  }
  if (v802((char *)v876, 1, v150) != 1)
  {
    sub_23B1C5390();
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
    v196 = v873;
    v197 = v870;
    sub_23B1C5864();
    sub_23B1C5354();
    (*(void (**)(os_log_t, uint64_t))(v872 + 8))(v196, v197);
    goto LABEL_34;
  }
  v179 = v877;
  v180 = (uint64_t)v880;
  v181 = (char *)sub_23AB6BC38((uint64_t)v877, 1);
  if (v180)
    goto LABEL_87;
  v182 = v181;
  v880 = 0;
  if (v181)
  {
    v183 = v181;
    v184 = objc_msgSend(v878, sel_providerDomainID);
    v875 = v182;
    v185 = sub_23B1C63E0();
    v187 = v186;
    if (v185 == sub_23B1C63E0() && v187 == v188)
    {

      swift_bridgeObjectRelease_n();
      LODWORD(v838) = 0;
      v150 = v884;
      v189 = v879;
      v177 = 0x1F35A0000;
      goto LABEL_31;
    }
    v293 = sub_23B1C7388();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v189 = v879;
    if ((v293 & 1) != 0)
    {

      LODWORD(v838) = 0;
      v150 = v884;
      v177 = 0x1F35A0000;
      goto LABEL_31;
    }
    v321 = (void *)sub_23AB60CA8();
    v322 = objc_msgSend(v878, sel_provider);
    if (v322)
    {
      v323 = v322;
      v324 = objc_msgSend(v322, sel_identifier);

      v325 = sub_23B1C63E0();
      v327 = v326;
      if (v325 == sub_23B1C63E0() && v327 == v328)
      {

        swift_bridgeObjectRelease_n();
        goto LABEL_161;
      }
      v535 = sub_23B1C7388();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v535 & 1) != 0)
      {
LABEL_161:
        v536 = objc_msgSend(v878, sel_provider);
        v537 = v884;
        if (v536)
        {
          v538 = v536;
          v539 = sub_23AB60D98();
          v540 = objc_msgSend(v538, sel_domainForIdentifier_reason_, v539, 0);

          if (v540)
          {
            v541 = (id)fpfs_current_or_default_log();
            v542 = v814;
            sub_23B1C5E58();
            v543 = v881;
            v544 = (void (*)(char *, void (*)(char *, uint64_t), uint64_t))*((_QWORD *)v881 + 2);
            v545 = v809;
            v544(v809, v877, v537);
            v546 = v811;
            v544(v811, (void (*)(char *, uint64_t))v545, v537);
            v547 = v810;
            (*((void (**)(char *, char *, uint64_t))v543 + 4))(v810, v545, v537);
            v548 = v183;
            v549 = v878;
            v883 = v548;
            v550 = v549;
            v551 = (uint8_t *)sub_23B1C5E40();
            v552 = sub_23B1C6AAC();
            v553 = v552;
            if (os_log_type_enabled((os_log_t)v551, v552))
            {
              v554 = swift_slowAlloc();
              v879 = (unint64_t)v551;
              v555 = v537;
              v556 = v554;
              v880 = (void *)swift_slowAlloc();
              *(_QWORD *)&v891.st_dev = v880;
              *(_DWORD *)v556 = 136446722;
              v876 = (os_log_t)(v556 + 4);
              LODWORD(v878) = v553;
              v557 = (void *)sub_23B1C5954();
              v558 = objc_msgSend(v557, sel_fp_shortDescription);
              v877 = v550;
              v559 = v547;
              v560 = v543;
              v561 = v558;

              v562 = sub_23B1C63E0();
              v564 = v563;

              v888 = (id)sub_23AABEC68(v562, v564, (uint64_t *)&v891.st_dev);
              sub_23B1C6CBC();
              swift_bridgeObjectRelease();
              v565 = (void (*)(char *, uint64_t))*((_QWORD *)v560 + 1);
              v565(v559, v555);
              v565(v546, v555);
              *(_WORD *)(v556 + 12) = 2082;
              sub_23B1C63E0();
              v566 = (void *)sub_23B1C63BC();
              swift_bridgeObjectRelease();
              v567 = objc_msgSend(v566, sel_fp_obfuscatedProviderDomainID);

              v568 = sub_23B1C63E0();
              v570 = v569;

              v888 = (id)sub_23AABEC68(v568, v570, (uint64_t *)&v891.st_dev);
              sub_23B1C6CBC();
              v571 = v883;

              swift_bridgeObjectRelease();
              *(_WORD *)(v556 + 22) = 2082;
              v572 = v877;
              v573 = objc_msgSend(v877, sel_providerDomainID);
              sub_23B1C63E0();

              v574 = (void *)sub_23B1C63BC();
              swift_bridgeObjectRelease();
              v575 = objc_msgSend(v574, sel_fp_obfuscatedProviderDomainID);

              v576 = sub_23B1C63E0();
              v578 = v577;

              v888 = (id)sub_23AABEC68(v576, v578, (uint64_t *)&v891.st_dev);
              sub_23B1C6CBC();

              swift_bridgeObjectRelease();
              v579 = (uint8_t *)v879;
              _os_log_impl(&dword_23AA66000, (os_log_t)v879, (os_log_type_t)v878, "attempting create a domain root at %{public}s, but that path already exists and is owned by existing domain %{public}s, expected %{public}s", (uint8_t *)v556, 0x20u);
              v580 = (uint64_t)v880;
              swift_arrayDestroy();
              MEMORY[0x23B8614BC](v580, -1, -1);
              MEMORY[0x23B8614BC](v556, -1, -1);

              (*(void (**)(char *, uint64_t))(v867 + 8))(v814, v869);
            }
            else
            {
              v760 = (void (*)(char *, uint64_t))*((_QWORD *)v543 + 1);
              v760(v547, v537);
              v760(v546, v537);

              v761 = v883;
              (*(void (**)(char *, uint64_t))(v867 + 8))(v542, v869);
            }
            v666 = v804;
            v763 = v845;
            v762 = v846;
            v891.st_dev = 17;
            v669 = MEMORY[0x24BEE4AF8];
            sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
            sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
            v764 = v847;
            sub_23B1C5864();
            v671 = (void *)sub_23B1C5558();
            (*(void (**)(char *, id))(v762 + 8))(v763, v764);
            v672 = 0xD00000000000001BLL;
            v673 = 0xD00000000000001DLL;
            v674 = 0x800000023B1F8630;
            v675 = "rootIsOwnedByExistingDomain";
LABEL_212:
            sub_23AB63980(v673, v674, v672, (unint64_t)(v675 - 32) | 0x8000000000000000);

            sub_23B1C5390();
            sub_23AAB75BC(v669);
            sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
            v765 = v873;
            v766 = v870;
            sub_23B1C5864();
            sub_23B1C5354();
            (*(void (**)(os_log_t, uint64_t))(v872 + 8))(v765, v766);
            swift_willThrow();
            v767 = v883;

            goto LABEL_88;
          }
        }
        v622 = (id)fpfs_current_or_default_log();
        v623 = v816;
        sub_23B1C5E58();
        v167 = v881;
        v624 = (void (*)(char *, void (*)(char *, uint64_t), uint64_t))*((_QWORD *)v881 + 2);
        v625 = v815;
        v624(v815, v877, v537);
        v624(v829, (void (*)(char *, uint64_t))v625, v537);
        v626 = v623;
        (*((void (**)(char *, char *, uint64_t))v167 + 4))(v828, v625, v537);
        v627 = v183;
        v628 = v878;
        v629 = v627;
        v843 = v628;
        v630 = sub_23B1C5E40();
        v631 = sub_23B1C6AAC();
        v632 = v631;
        v633 = os_log_type_enabled(v630, v631);
        v844 = v629;
        if (v633)
        {
          v634 = swift_slowAlloc();
          v837 = v630;
          v635 = v537;
          v636 = v634;
          v838 = swift_slowAlloc();
          *(_QWORD *)&v891.st_dev = v838;
          *(_DWORD *)v636 = 136446722;
          v835 = (void (*)(char *, uint64_t))(v636 + 4);
          LODWORD(v836) = v632;
          v637 = v829;
          v638 = (void *)sub_23B1C5954();
          v639 = objc_msgSend(v638, sel_fp_shortDescription);

          v640 = sub_23B1C63E0();
          v642 = v641;

          v888 = (id)sub_23AABEC68(v640, v642, (uint64_t *)&v891.st_dev);
          sub_23B1C6CBC();
          swift_bridgeObjectRelease();
          v643 = (void (*)(char *, uint64_t))*((_QWORD *)v881 + 1);
          v643(v828, v635);
          v643(v637, v635);
          *(_WORD *)(v636 + 12) = 2082;
          sub_23B1C63E0();
          v644 = (void *)sub_23B1C63BC();
          swift_bridgeObjectRelease();
          v645 = objc_msgSend(v644, sel_fp_obfuscatedProviderDomainID);

          v646 = sub_23B1C63E0();
          v648 = v647;

          v888 = (id)sub_23AABEC68(v646, v648, (uint64_t *)&v891.st_dev);
          sub_23B1C6CBC();

          swift_bridgeObjectRelease();
          *(_WORD *)(v636 + 22) = 2082;
          v649 = v843;
          v650 = -[uint8_t providerDomainID](v843, sel_providerDomainID);
          sub_23B1C63E0();

          v651 = (void *)sub_23B1C63BC();
          swift_bridgeObjectRelease();
          v652 = objc_msgSend(v651, sel_fp_obfuscatedProviderDomainID);

          v653 = sub_23B1C63E0();
          v655 = v654;

          v888 = (id)sub_23AABEC68(v653, v655, (uint64_t *)&v891.st_dev);
          v189 = v879;
          sub_23B1C6CBC();

          v167 = v881;
          swift_bridgeObjectRelease();

          v656 = v837;
          _os_log_impl(&dword_23AA66000, v837, (os_log_type_t)v836, "attempting create a domain root at %{public}s, but that path already exists and is owned by missing domain %{public}s, expected %{public}s", (uint8_t *)v636, 0x20u);
          v657 = v838;
          swift_arrayDestroy();
          MEMORY[0x23B8614BC](v657, -1, -1);
          MEMORY[0x23B8614BC](v636, -1, -1);

          (*(void (**)(char *, uint64_t))(v867 + 8))(v816, v869);
        }
        else
        {
          v679 = (void (*)(char *, uint64_t))*((_QWORD *)v167 + 1);
          v679(v828, v537);
          v679(v829, v537);

          v680 = v843;
          (*(void (**)(char *, uint64_t))(v867 + 8))(v626, v869);
        }
        v506 = v804;
        v681 = v847;
        v891.st_dev = 17;
        sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
        sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
        v682 = v845;
        sub_23B1C5864();
        v683 = (void *)sub_23B1C5558();
        (*(void (**)(char *, id))(v846 + 8))(v682, v681);
        sub_23AB63980(0xD00000000000001CLL, 0x800000023B1F85F0, 0xD00000000000001ALL, 0x800000023B1F8610);

        v182 = v875;
        goto LABEL_152;
      }
    }
    else
    {

    }
    v581 = (id)fpfs_current_or_default_log();
    v582 = v830;
    sub_23B1C5E58();
    v583 = v881;
    v584 = (void (*)(char *, void (*)(char *, uint64_t), uint64_t))*((_QWORD *)v881 + 2);
    v585 = v822;
    v586 = v884;
    v584(v822, v877, v884);
    v587 = v824;
    v584(v824, (void (*)(char *, uint64_t))v585, v586);
    v588 = v823;
    (*((void (**)(char *, char *, uint64_t))v583 + 4))(v823, v585, v586);
    v589 = v183;
    v590 = v878;
    v883 = v589;
    v591 = v590;
    v592 = (uint8_t *)sub_23B1C5E40();
    v593 = sub_23B1C6AAC();
    v594 = v593;
    if (os_log_type_enabled((os_log_t)v592, v593))
    {
      v595 = swift_slowAlloc();
      v879 = (unint64_t)v592;
      v596 = v586;
      v597 = v595;
      v880 = (void *)swift_slowAlloc();
      *(_QWORD *)&v891.st_dev = v880;
      *(_DWORD *)v597 = 136446722;
      v876 = (os_log_t)(v597 + 4);
      LODWORD(v878) = v594;
      v598 = (void *)sub_23B1C5954();
      v599 = objc_msgSend(v598, sel_fp_shortDescription);
      v877 = v591;
      v600 = v588;
      v601 = v583;
      v602 = v599;

      v603 = sub_23B1C63E0();
      v605 = v604;

      v888 = (id)sub_23AABEC68(v603, v605, (uint64_t *)&v891.st_dev);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      v606 = (void (*)(char *, uint64_t))*((_QWORD *)v601 + 1);
      v606(v600, v596);
      v606(v587, v596);
      *(_WORD *)(v597 + 12) = 2082;
      sub_23B1C63E0();
      v607 = (void *)sub_23B1C63BC();
      swift_bridgeObjectRelease();
      v608 = objc_msgSend(v607, sel_fp_obfuscatedProviderDomainID);

      v609 = sub_23B1C63E0();
      v611 = v610;

      v888 = (id)sub_23AABEC68(v609, v611, (uint64_t *)&v891.st_dev);
      sub_23B1C6CBC();
      v612 = v883;

      swift_bridgeObjectRelease();
      *(_WORD *)(v597 + 22) = 2082;
      v613 = v877;
      v614 = objc_msgSend(v877, sel_providerDomainID);
      sub_23B1C63E0();

      v615 = (void *)sub_23B1C63BC();
      swift_bridgeObjectRelease();
      v616 = objc_msgSend(v615, sel_fp_obfuscatedProviderDomainID);

      v617 = sub_23B1C63E0();
      v619 = v618;

      v888 = (id)sub_23AABEC68(v617, v619, (uint64_t *)&v891.st_dev);
      sub_23B1C6CBC();

      swift_bridgeObjectRelease();
      v620 = (uint8_t *)v879;
      _os_log_impl(&dword_23AA66000, (os_log_t)v879, (os_log_type_t)v878, "attempting create a domain root at %{public}s, but that path already exists and is owned by a different provider %{public}s, expected %{public}s", (uint8_t *)v597, 0x20u);
      v621 = (uint64_t)v880;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v621, -1, -1);
      MEMORY[0x23B8614BC](v597, -1, -1);

      (*(void (**)(char *, uint64_t))(v867 + 8))(v830, v869);
    }
    else
    {
      v664 = (void (*)(char *, uint64_t))*((_QWORD *)v583 + 1);
      v664(v588, v586);
      v664(v587, v586);

      v665 = v883;
      (*(void (**)(char *, uint64_t))(v867 + 8))(v582, v869);
    }
    v666 = v804;
    v668 = v845;
    v667 = v846;
    v891.st_dev = 17;
    v669 = MEMORY[0x24BEE4AF8];
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
    v670 = v847;
    sub_23B1C5864();
    v671 = (void *)sub_23B1C5558();
    (*(void (**)(char *, id))(v667 + 8))(v668, v670);
    v672 = 0xD00000000000001ELL;
    v673 = 0xD000000000000020;
    v674 = 0x800000023B1F85A0;
    v675 = "rootIsOwnedByDifferentProvider";
    goto LABEL_212;
  }
  v275 = (id)fpfs_current_or_default_log();
  if ((v163 & 1) != 0)
  {
    v276 = v838;
    sub_23B1C5E58();
    v277 = (void (*)(char *, void (*)(char *, uint64_t), uint64_t))*((_QWORD *)v167 + 2);
    v278 = v179;
    v279 = v836;
    v277((char *)v836, v278, v150);
    v280 = v843;
    v277((char *)v843, v279, v150);
    v281 = (void (*)(char *, uint64_t))*((_QWORD *)v167 + 1);
    v281((char *)v279, v150);
    v282 = sub_23B1C5E40();
    v283 = v150;
    v284 = sub_23B1C6AA0();
    if (os_log_type_enabled(v282, v284))
    {
      v285 = swift_slowAlloc();
      v875 = (char *)swift_slowAlloc();
      *(_QWORD *)&v891.st_dev = v875;
      v844 = (uint8_t *)v285;
      *(_DWORD *)v285 = 136446210;
      v837 = (os_log_t)(v285 + 4);
      v286 = (void *)sub_23B1C5954();
      v287 = objc_msgSend(v286, sel_fp_shortDescription);

      v288 = sub_23B1C63E0();
      v290 = v289;

      v888 = (id)sub_23AABEC68(v288, v290, (uint64_t *)&v891.st_dev);
      sub_23B1C6CBC();
      v167 = v881;
      swift_bridgeObjectRelease();
      v283 = v884;
      v281((char *)v843, v884);
      v291 = v844;
      _os_log_impl(&dword_23AA66000, v282, v284, "taking over domain root at %{public}s, the path already exists and is not owned by anyone", v844, 0xCu);
      v292 = v875;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v292, -1, -1);
      MEMORY[0x23B8614BC](v291, -1, -1);
    }
    else
    {
      v281((char *)v280, v283);
    }

    (*(void (**)(uint64_t, uint64_t))(v867 + 8))(v276, v869);
    v150 = v283;
    v189 = v879;
    v503 = v847;
    v891.st_dev = 17;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
    v504 = v845;
    sub_23B1C5864();
    v505 = (void *)sub_23B1C5558();
    (*(void (**)(char *, id))(v846 + 8))(v504, v503);
    sub_23AB63980(0xD000000000000020, 0x800000023B1F8550, 0xD00000000000001CLL, 0x800000023B1F8580);

    LODWORD(v838) = 1;
    v174 = v801;
    v177 = 0x1F35A0000;
    goto LABEL_31;
  }
  v305 = v844;
  sub_23B1C5E58();
  v306 = (void (*)(char *, void (*)(char *, uint64_t), uint64_t))*((_QWORD *)v167 + 2);
  v307 = v835;
  v306((char *)v835, v179, v150);
  v308 = v837;
  v306((char *)v837, v307, v150);
  v847 = (id)*((_QWORD *)v167 + 1);
  ((void (*)(_QWORD, uint64_t))v847)(v307, v150);
  v309 = sub_23B1C5E40();
  v310 = sub_23B1C6AAC();
  v311 = v310;
  if (os_log_type_enabled(v309, v310))
  {
    LODWORD(v846) = v311;
    v312 = (uint8_t *)swift_slowAlloc();
    v845 = (char *)swift_slowAlloc();
    *(_QWORD *)&v891.st_dev = v845;
    v875 = 0;
    v843 = v312;
    *(_DWORD *)v312 = 136446210;
    v838 = (uint64_t)(v312 + 4);
    v313 = (void *)sub_23B1C5954();
    v314 = objc_msgSend(v313, sel_fp_shortDescription);

    v315 = sub_23B1C63E0();
    v317 = v316;

    v888 = (id)sub_23AABEC68(v315, v317, (uint64_t *)&v891.st_dev);
    v182 = v875;
    sub_23B1C6CBC();
    v167 = v881;
    swift_bridgeObjectRelease();
    ((void (*)(os_log_t, uint64_t))v847)(v308, v150);
    v318 = v843;
    _os_log_impl(&dword_23AA66000, v309, (os_log_type_t)v846, "attempting create a domain at %{public}s, but that path already exists and is not owned by anyone", v843, 0xCu);
    v319 = v845;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v319, -1, -1);
    MEMORY[0x23B8614BC](v318, -1, -1);

    (*(void (**)(uint8_t *, uint64_t))(v867 + 8))(v844, v869);
  }
  else
  {
    ((void (*)(os_log_t, uint64_t))v847)(v308, v150);

    (*(void (**)(uint8_t *, uint64_t))(v867 + 8))(v305, v869);
  }
  v506 = v804;
  v189 = v879;
LABEL_152:
  v507 = (uint64_t)v880;
  sub_23AB63B34(v877);
  v177 = 0x1F35A0000;
  if (v507)
  {

    goto LABEL_88;
  }
  v880 = 0;

  LODWORD(v838) = 0;
  v150 = v884;
LABEL_31:
  v190 = v177;
  v191 = objc_msgSend(v878, sel_provider);
  if (v191)
  {
    v192 = v191;
    v193 = objc_msgSend(v191, sel_descriptor);

    v194 = objc_msgSend(v193, sel_localizedName);
    v843 = (uint8_t *)sub_23B1C63E0();
    v844 = v195;

  }
  else
  {
    v843 = 0;
    v844 = (uint8_t *)0xE000000000000000;
  }
  v198 = (uint64_t)v799;
  sub_23AB6C0EC((uint64_t)v876, (uint64_t)v799);
  if (v802((char *)v198, 1, v150) == 1)
  {
    sub_23AA8A05C(v198, (uint64_t *)&unk_2542E6740);
    v199 = v874;
    if (!v798)
      goto LABEL_38;
  }
  else
  {
    v201 = v167;
    v202 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v167 + 4);
    v203 = v198;
    v204 = v862;
    v202(v862, v203, v150);
    v205 = v174;
    v206 = (uint64_t)v204;
    v207 = objc_msgSend(v205, sel_defaultManager);
    sub_23B1C59E4();
    v208 = (void *)sub_23B1C63BC();
    swift_bridgeObjectRelease();
    LODWORD(v204) = objc_msgSend(v207, (SEL)(v190 + 4055), v208);

    if ((_DWORD)v204)
    {
      v209 = (uint64_t)v880;
      v210 = sub_23AB6BC38(v206, 1);
      v211 = v206;
      v199 = v874;
      if (v209)
      {
        (*((void (**)(uint64_t, uint64_t))v881 + 1))(v211, v150);
        swift_bridgeObjectRelease();
        goto LABEL_87;
      }
      v880 = 0;
      if (v210)
      {
        v242 = objc_msgSend(v878, sel_providerDomainID);
        v243 = sub_23B1C63E0();
        v245 = v244;
        v246 = sub_23B1C63E0();
        v189 = v879;
        if (v243 == v246 && v245 == v247)
        {

          swift_bridgeObjectRelease_n();
        }
        else
        {
          v320 = sub_23B1C7388();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v320 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            sub_23B1C63E0();
            v508 = (void *)sub_23B1C63BC();
            swift_bridgeObjectRelease();
            v509 = objc_msgSend(v508, sel_fp_obfuscatedProviderDomainID);

            v880 = (void *)sub_23B1C63E0();
            v511 = v510;

            v512 = (id)fpfs_current_or_default_log();
            v513 = v831;
            sub_23B1C5E58();
            v514 = *((_QWORD *)v881 + 2);
            v515 = v825;
            v516 = v884;
            ((void (*)(char *, char *, uint64_t))v514)(v825, v862, v884);
            v517 = v827;
            v883 = v514;
            ((void (*)(char *, char *, uint64_t))v514)(v827, v515, v516);
            v518 = v826;
            v202(v826, (uint64_t)v515, v516);
            v882 = v511;
            swift_bridgeObjectRetain();
            v519 = sub_23B1C5E40();
            v520 = sub_23B1C6AAC();
            v521 = v520;
            if (os_log_type_enabled(v519, v520))
            {
              v522 = swift_slowAlloc();
              LODWORD(v879) = v521;
              v523 = v517;
              v524 = v522;
              v878 = (char *)swift_slowAlloc();
              *(_QWORD *)&v891.st_dev = v878;
              *(_DWORD *)v524 = 136446466;
              v877 = (void (*)(char *, uint64_t))(v524 + 4);
              v525 = (void *)sub_23B1C5954();
              v526 = objc_msgSend(v525, sel_fp_shortDescription);

              v527 = sub_23B1C63E0();
              v529 = v528;

              v888 = (id)sub_23AABEC68(v527, v529, (uint64_t *)&v891.st_dev);
              sub_23B1C6CBC();
              swift_bridgeObjectRelease();
              v530 = (void (*)(char *, uint64_t))*((_QWORD *)v881 + 1);
              v530(v518, v884);
              v530(v523, v884);
              *(_WORD *)(v524 + 12) = 2082;
              v531 = v882;
              swift_bridgeObjectRetain();
              v888 = (id)sub_23AABEC68((uint64_t)v880, (unint64_t)v531, (uint64_t *)&v891.st_dev);
              v516 = v884;
              sub_23B1C6CBC();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_23AA66000, v519, (os_log_type_t)v879, "Attempting to import existing domain at %{public}s into new domain %{public}s", (uint8_t *)v524, 0x16u);
              v532 = v878;
              swift_arrayDestroy();
              MEMORY[0x23B8614BC](v532, -1, -1);
              MEMORY[0x23B8614BC](v524, -1, -1);

              (*(void (**)(char *, uint64_t))(v867 + 8))(v831, v869);
            }
            else
            {
              v530 = (void (*)(char *, uint64_t))*((_QWORD *)v881 + 1);
              v530(v518, v516);
              v530(v517, v516);

              swift_bridgeObjectRelease_n();
              (*(void (**)(char *, uint64_t))(v867 + 8))(v513, v869);
            }
            v658 = v870;
            v659 = v873;
            sub_23B1C53A8();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE850);
            inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_23B1CA760;
            *(_QWORD *)(inited + 32) = sub_23B1C63E0();
            *(_QWORD *)(inited + 40) = v661;
            *(_QWORD *)(inited + 72) = v516;
            boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(inited + 48));
            v663 = v862;
            ((void (*)(uint64_t *, char *, uint64_t))v883)(boxed_opaque_existential_0, v862, v516);
            sub_23AAE9EB4(inited);
            sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
            sub_23B1C5864();
            sub_23B1C5354();
            (*(void (**)(os_log_t, uint64_t))(v872 + 8))(v659, v658);
            swift_willThrow();

            v530(v663, v516);
            goto LABEL_88;
          }
        }
        v167 = v881;
        (*((void (**)(char *, uint64_t))v881 + 1))(v862, v884);

      }
      else
      {
        v167 = v881;
        (*((void (**)(char *, uint64_t))v881 + 1))(v862, v150);
        v189 = v879;
      }
    }
    else
    {
      (*((void (**)(uint64_t, uint64_t))v201 + 1))(v206, v150);
      v167 = v201;
      v189 = v879;
      v199 = v874;
    }
    if (!v798)
    {
LABEL_38:
      v200 = *(char **)((v189 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v862 = v200;
      if (!v200)
      {
LABEL_62:
        swift_bridgeObjectRelease();
        v230 = (uint64_t)v880;
        sub_23AB61C8C(v878);
        v231 = v230;
        if (v230)
        {

LABEL_65:
          swift_bridgeObjectRelease();
          goto LABEL_88;
        }
        v234 = v858;
        sub_23AB6C0EC((uint64_t)v803, v858);
        v235 = v884;
        v236 = v802((char *)v234, 1, v884);
        v237 = v804;
        if (v236 == 1)
        {
          sub_23AA8A05C(v234, (uint64_t *)&unk_2542E6740);
          goto LABEL_100;
        }
        v880 = 0;
        v238 = v852;
        (*((void (**)(char *, uint64_t, uint64_t))v167 + 4))(v852, v234, v235);
        v239 = (void *)sub_23B1C5954();
        v240 = (void *)sub_23B1C5954();
        v241 = objc_msgSend(v239, sel_fp_relationshipToItemAtURL_, v240);

        if (v241 == (id)1)
        {
          (*((void (**)(char *, uint64_t))v167 + 1))(v238, v235);
        }
        else
        {
          v294 = (void *)sub_23B1C5954();
          v295 = (void *)sub_23B1C5954();
          *(_QWORD *)&v891.st_dev = 0;
          v296 = objc_msgSend(v237, sel_moveItemAtURL_toURL_error_, v294, v295, &v891);

          if (!v296)
          {
            v329 = *(id *)&v891.st_dev;
            v330 = (void *)sub_23B1C587C();

            swift_willThrow();
            v235 = v884;
            (*((void (**)(char *, uint64_t))v167 + 1))(v238, v884);
            v231 = 0;
            goto LABEL_99;
          }
          v297 = (void (*)(char *, uint64_t))*((_QWORD *)v167 + 1);
          v298 = *(id *)&v891.st_dev;
          v235 = v884;
          v297(v238, v884);
        }
        v231 = (uint64_t)v880;
LABEL_99:
        v189 = v879;
        v199 = v874;
LABEL_100:
        v331 = v859;
        sub_23AB6C0EC((uint64_t)v876, v859);
        v332 = v802((char *)v331, 1, v235);
        v880 = (void *)v231;
        if (v332 == 1)
        {
          sub_23AA8A05C(v331, (uint64_t *)&unk_2542E6740);
          *v857 = 0;
          v333 = *(void **)&v882[OBJC_IVAR____TtC9libfssync20InternalPathsManager_volume];
          if (v333)
          {
            *(_QWORD *)&v891.st_dev = 0;
            v334 = objc_msgSend(v333, sel_rootURLForLocation_error_, 1, &v891);
            v335 = *(void **)&v891.st_dev;
            v336 = v851;
            if (!v334)
            {
              v465 = *(id *)&v891.st_dev;
              v466 = (void *)sub_23B1C587C();

              swift_willThrow();
              v880 = 0;
              v344 = v849;
              v343 = v850;
LABEL_184:
              v692 = v466;
              v891.st_dev = sub_23B1C54D4();
              sub_23AB6CD48();
              v693 = sub_23B1C575C();

              v694 = v839;
              if ((v693 & 1) == 0)
              {

                swift_bridgeObjectRelease();
                sub_23AA8A05C((uint64_t)v803, (uint64_t *)&unk_2542E6740);
                return;
              }

              if ((v838 & 1) != 0)
              {
                v695 = (id)fpfs_current_or_default_log();
                v696 = v821;
                sub_23B1C5E58();
                v697 = *((_QWORD *)v167 + 2);
                v698 = v694;
                v699 = v694;
                v700 = v884;
                ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v697)(v698, v877, v884);
                v883 = v697;
                ((void (*)(char *, char *, uint64_t))v697)(v344, v699, v700);
                v701 = (void (*)(char *, uint64_t))*((_QWORD *)v167 + 1);
                v701(v699, v700);
                v702 = sub_23B1C5E40();
                v703 = sub_23B1C6A88();
                if (os_log_type_enabled(v702, v703))
                {
                  v704 = swift_slowAlloc();
                  v705 = swift_slowAlloc();
                  *(_QWORD *)&v891.st_dev = v705;
                  v878 = (char *)v701;
                  v879 = v704;
                  *(_DWORD *)v704 = 136446210;
                  v876 = (os_log_t)(v704 + 4);
                  v706 = (void *)sub_23B1C5954();
                  v707 = objc_msgSend(v706, sel_fp_shortDescription);

                  v708 = sub_23B1C63E0();
                  v710 = v709;

                  v888 = (id)sub_23AABEC68(v708, v710, (uint64_t *)&v891.st_dev);
                  sub_23B1C6CBC();
                  swift_bridgeObjectRelease();
                  v189 = (unint64_t)v878;
                  ((void (*)(char *, uint64_t))v878)(v849, v700);
                  v711 = v879;
                  _os_log_impl(&dword_23AA66000, v702, v703, "taking over %{public}s", (uint8_t *)v879, 0xCu);
                  swift_arrayDestroy();
                  v712 = v705;
                  v237 = v804;
                  MEMORY[0x23B8614BC](v712, -1, -1);
                  MEMORY[0x23B8614BC](v711, -1, -1);

                  v199 = *(char ***)(v867 + 8);
                  ((void (*)(char *, uint64_t))v199)(v821, v869);
                }
                else
                {
                  v733 = v344;
                  v189 = (unint64_t)v701;
                  v701(v733, v700);

                  v199 = *(char ***)(v867 + 8);
                  ((void (*)(char *, uint64_t))v199)(v696, v869);
                }
                v734 = v857;
                memset(&v891, 0, 28);
                memset(&v891.st_atimespec, 0, 112);
                sub_23B1C59E4();
                v735 = sub_23B1C6458();
                swift_bridgeObjectRelease();
                v736 = lstat((const char *)(v735 + 32), &v891);
                swift_release();
                if (v736 < 0
                  || (v891.st_flags & 0x40000000) == 0
                  || (v887 = 0,
                      sub_23B1C59E4(),
                      sub_23B1C6458(),
                      swift_bridgeObjectRelease(),
                      v737 = fpfs_num_entries(),
                      swift_release(),
                      v737 < 0)
                  || !v887)
                {
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v738 = swift_allocObject();
                  *(_QWORD *)(v738 + 16) = 0;
                  v739 = (void **)(v738 + 16);
                  v740 = (void *)sub_23B1C5954();
                  v741 = (void *)sub_23B1C63BC();
                  swift_bridgeObjectRelease();
                  v888 = *(id *)(v738 + 16);
                  v742 = v888;
                  v743 = FPWriteImportCookieForDomainURL();

                  v744 = v888;
                  *(_QWORD *)(v738 + 16) = v888;
                  v745 = v744;

                  if ((v743 & 1) == 0)
                  {
                    v768 = (id)fpfs_current_or_default_log();
                    sub_23B1C5E58();
                    v769 = v805;
                    v770 = v884;
                    v771 = v883;
                    ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v883)(v805, v877, v884);
                    ((void (*)(char *, char *, uint64_t))v771)(v807, v769, v770);
                    (*((void (**)(char *, char *, uint64_t))v881 + 4))(v806, v769, v770);
                    v881 = (uint8_t *)v738;
                    swift_retain_n();
                    v772 = sub_23B1C5E40();
                    LODWORD(v879) = sub_23B1C6AA0();
                    v883 = v772;
                    if (os_log_type_enabled(v772, (os_log_type_t)v879))
                    {
                      v773 = swift_slowAlloc();
                      v878 = (char *)swift_slowAlloc();
                      v890 = (uint64_t)v878;
                      *(_DWORD *)v773 = 136446466;
                      v876 = (os_log_t)(v773 + 4);
                      v774 = v807;
                      v775 = (void *)sub_23B1C5954();
                      v776 = objc_msgSend(v775, sel_fp_shortDescription);

                      v777 = sub_23B1C63E0();
                      v779 = v778;

                      v888 = (id)sub_23AABEC68(v777, v779, &v890);
                      sub_23B1C6CBC();
                      swift_bridgeObjectRelease();
                      v780 = v884;
                      ((void (*)(char *, uint64_t))v189)(v806, v884);
                      ((void (*)(char *, uint64_t))v189)(v774, v780);
                      v781 = (uint8_t *)v773;
                      *(_WORD *)(v773 + 12) = 2080;
                      swift_beginAccess();
                      v782 = *v739;
                      if (*v739)
                      {
                        v886 = (uint64_t)*v739;
                        sub_23AB6CDB0();
                        sub_23AA7E38C(&qword_2569E24E8, (uint64_t (*)(uint64_t))sub_23AB6CDB0, MEMORY[0x24BDD01A8]);
                        v783 = v782;
                        v784 = sub_23B1C731C();
                        if (v784)
                        {
                          v785 = (void *)v784;

                        }
                        else
                        {
                          v785 = (void *)swift_allocError();
                          *v789 = v886;
                        }
                        v790 = (void *)sub_23B1C5870();

                        v791 = objc_msgSend(v790, sel_fp_prettyDescription);
                        v792 = objc_msgSend(v791, sel_description);

                        v787 = sub_23B1C63E0();
                        v788 = v793;

                      }
                      else
                      {
                        v787 = 0x3E6C696E3CLL;
                        v788 = 0xE500000000000000;
                      }
                      v886 = sub_23AABEC68(v787, v788, &v890);
                      sub_23B1C6CBC();
                      swift_release();
                      swift_bridgeObjectRelease();
                      swift_release();
                      v794 = v883;
                      _os_log_impl(&dword_23AA66000, v883, (os_log_type_t)v879, "failed to write import cookie for domain %{public}s: %s", v781, 0x16u);
                      v795 = v878;
                      swift_arrayDestroy();
                      MEMORY[0x23B8614BC](v795, -1, -1);
                      MEMORY[0x23B8614BC](v781, -1, -1);

                      ((void (*)(char *, uint64_t))v199)(v808, v869);
                    }
                    else
                    {
LABEL_219:
                      v786 = v884;
                      ((void (*)(char *, uint64_t))v189)(v806, v884);
                      ((void (*)(char *, uint64_t))v189)(v807, v786);

                      swift_release_n();
                      ((void (*)(char *, uint64_t))v199)(v808, v869);
                    }
                  }
                  swift_release();
                  v237 = v804;
                  v734 = v857;
                }
                *v734 = 1;
LABEL_207:
                v755 = sub_23B1C59E4();
                v757 = v756;
                MEMORY[0x24BDAC7A8](v755);
                LOBYTE(v890) = 1;
                swift_bridgeObjectRetain();
                v758 = v755;
                v759 = (uint64_t)v880;
                sub_23B0E1010(4294967294, v758, v757, 0x100000, 0, 0, (uint64_t)&v890, (uint64_t)sub_23AB6CD30, (uint64_t)v797);
                if (v759 || (v890 & 1) == 0)
                {
                  swift_bridgeObjectRelease();

                  sub_23AA8A05C((uint64_t)v803, (uint64_t *)&unk_2542E6740);
                  return;
                }
                goto LABEL_226;
              }
              swift_bridgeObjectRelease();
              v713 = (id)fpfs_current_or_default_log();
              v714 = v820;
              sub_23B1C5E58();
              v715 = (void (*)(char *, void (*)(char *, uint64_t), uint64_t))*((_QWORD *)v167 + 2);
              v716 = v884;
              v715(v343, v877, v884);
              v717 = v819;
              v715(v819, (void (*)(char *, uint64_t))v343, v716);
              v718 = (void (*)(char *, uint64_t))*((_QWORD *)v167 + 1);
              v719 = v714;
              v718(v343, v716);
              v720 = sub_23B1C5E40();
              v721 = sub_23B1C6AA0();
              if (os_log_type_enabled(v720, v721))
              {
                v722 = (uint8_t *)swift_slowAlloc();
                v883 = swift_slowAlloc();
                *(_QWORD *)&v891.st_dev = v883;
                v882 = v722;
                *(_DWORD *)v722 = 136446210;
                v881 = v722 + 4;
                v723 = (void *)sub_23B1C5954();
                v724 = objc_msgSend(v723, sel_fp_shortDescription);

                v725 = sub_23B1C63E0();
                v727 = v726;

                v888 = (id)sub_23AABEC68(v725, v727, (uint64_t *)&v891.st_dev);
                sub_23B1C6CBC();
                swift_bridgeObjectRelease();
                v718(v819, v716);
                v728 = v882;
                _os_log_impl(&dword_23AA66000, v720, v721, "can't create dataless root at %{public}s: file already exists", v882, 0xCu);
                v729 = v883;
                swift_arrayDestroy();
                MEMORY[0x23B8614BC](v729, -1, -1);
                MEMORY[0x23B8614BC](v728, -1, -1);

                (*(void (**)(char *, uint64_t))(v867 + 8))(v820, v869);
              }
              else
              {
                v718(v717, v716);

                (*(void (**)(char *, uint64_t))(v867 + 8))(v719, v869);
              }
              v746 = v870;
              v747 = v873;
              v748 = v872;
              sub_23B1C5390();
              sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
              sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
              sub_23B1C5864();
              sub_23B1C5354();
              (*(void (**)(os_log_t, uint64_t))(v748 + 8))(v747, v746);
LABEL_34:
              swift_willThrow();
              goto LABEL_87;
            }
            v337 = v334;
            v338 = v865;
            sub_23B1C59CC();
            v339 = v335;

            v199 = (char **)*((_QWORD *)v167 + 4);
            v340 = v884;
            ((void (*)(char *, char *, uint64_t))v199)(v336, v338, v884);
            (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v167 + 7))(v336, 0, 1, v340);
            v341 = v802(v336, 1, v340);
            v342 = (uint64_t)v336;
            v344 = v849;
            v343 = v850;
            if (v341 != 1)
            {
              ((void (*)(char *, uint64_t, uint64_t))v199)(v841, v342, v340);
              v345 = (void (*)(_QWORD *, void (*)(char *, uint64_t), uint64_t))*((_QWORD *)v167 + 2);
              v345(v842, v877, v340);
              v346 = (void *)sub_23B1C5954();
              v347 = (void *)sub_23B1C5954();
              v348 = objc_msgSend(v346, sel_fp_relationshipToItemAtURL_, v347);

              v349 = v348 == 0;
              v350 = objc_msgSend(v878, sel_provider);
              if (v350)
              {
                v351 = v350;
                v352 = objc_msgSend(v350, sel_identifier);

                v353 = sub_23B1C63E0();
                v355 = v354;

                v356 = (void *)sub_23B1C63BC();
                v357 = objc_msgSend(v356, sel_fp_isiCloudDriveOrCloudDocsIdentifier);

                if (v357)
                {
                  v883 = v353;
                  v358 = objc_msgSend(v801, sel_defaultManager);
                  v359 = v877;
                  sub_23B1C59E4();
                  v360 = (void *)sub_23B1C63BC();
                  swift_bridgeObjectRelease();
                  objc_msgSend(v358, sel_fp_createPathIfNeeded_, v360);

                  v361 = (id)fpfs_current_or_default_log();
                  sub_23B1C5E58();
                  v362 = v812;
                  v216 = (char *)v884;
                  v345(v812, v359, v884);
                  v212 = (uint64_t)v813;
                  v345(v813, v362, (uint64_t)v216);
                  ((void (*)(char *, void (*)(char *, uint64_t), char *))v199)(v817, v362, v216);
                  swift_bridgeObjectRetain();
                  v213 = sub_23B1C5E40();
                  v363 = sub_23B1C6A88();
                  LODWORD(v879) = v363;
                  if (os_log_type_enabled(v213, v363))
                  {
                    v364 = v212;
                    v365 = swift_slowAlloc();
                    v878 = (char *)swift_slowAlloc();
                    *(_QWORD *)&v891.st_dev = v878;
                    *(_DWORD *)v365 = 136446466;
                    v875 = (char *)(v365 + 4);
                    v876 = v213;
                    v366 = v364;
                    v367 = (void *)sub_23B1C5954();
                    v368 = objc_msgSend(v367, sel_fp_shortDescription);

                    v369 = sub_23B1C63E0();
                    v371 = v370;

                    v888 = (id)sub_23AABEC68(v369, v371, (uint64_t *)&v891.st_dev);
                    sub_23B1C6CBC();
                    swift_bridgeObjectRelease();
                    v167 = v881;
                    v372 = (void (*)(char *, char *))*((_QWORD *)v881 + 1);
                    v372(v817, v216);
                    v372((char *)v366, v216);
                    *(_WORD *)(v365 + 12) = 2082;
                    swift_bridgeObjectRetain();
                    v888 = (id)sub_23AABEC68((uint64_t)v883, v355, (uint64_t *)&v891.st_dev);
                    sub_23B1C6CBC();
                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRelease();
                    v373 = v876;
                    _os_log_impl(&dword_23AA66000, v876, (os_log_type_t)v879, "creating %{public}s on disk for %{public}s", (uint8_t *)v365, 0x16u);
                    v374 = v878;
                    swift_arrayDestroy();
                    MEMORY[0x23B8614BC](v374, -1, -1);
                    MEMORY[0x23B8614BC](v365, -1, -1);

                  }
                  else
                  {
LABEL_179:
                    v167 = v881;
                    v372 = (void (*)(char *, char *))*((_QWORD *)v881 + 1);
                    v372(v817, v216);
                    v372((char *)v212, v216);

                    swift_bridgeObjectRelease_n();
                  }
                  (*(void (**)(char *, uint64_t))(v867 + 8))(v818, v869);
                  v237 = v804;
                  v684 = v865;
                  sub_23B1C5978();
                  v685 = v842;
                  v372((char *)v842, v216);
                  ((void (*)(_QWORD *, char *, char *))v199)(v685, v684, v216);
                  v349 = 0;
                  v344 = v849;
                }
                else
                {
                  swift_bridgeObjectRelease();
                  v237 = v804;
                  v167 = v881;
                }
                v343 = v850;
              }
              else
              {
                v167 = v881;
              }
              v686 = v842;
              v687 = (uint64_t)v880;
              sub_23AB6C224(v842, v349);
              v688 = v841;
              if (!v687)
              {
                v880 = 0;
                swift_bridgeObjectRelease();
                v730 = (void (*)(_QWORD *, uint64_t))*((_QWORD *)v167 + 1);
                v731 = v686;
                v732 = v884;
                v730(v731, v884);
                v730(v688, v732);
                *v857 = 1;
                goto LABEL_207;
              }
              v689 = (void (*)(_QWORD *, uint64_t))*((_QWORD *)v167 + 1);
              v690 = v686;
              v691 = v884;
              v689(v690, v884);
              v689(v688, v691);
              v466 = (void *)v687;
              v880 = 0;
              goto LABEL_184;
            }
          }
          else
          {
            v342 = (uint64_t)v851;
            (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v167 + 7))(v851, 1, 1, v884);
          }
          swift_bridgeObjectRelease();
          sub_23AA8A05C(v342, (uint64_t *)&unk_2542E6740);
          goto LABEL_207;
        }
        v852 = (char *)*((_QWORD *)v167 + 4);
        ((void (*)(char *, uint64_t, uint64_t))v852)(v860, v331, v235);
        v375 = sub_23B1C5BDC();
        v376 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v375 - 8) + 56);
        v377 = (uint64_t)v854;
        v376(v854, 1, 1, v375);
        v378 = (uint64_t)v855;
        v376(v855, 1, 1, v375);
        v376((char *)v199, 1, 1, v375);
        LOBYTE(v891.st_dev) = 1;
        v379 = v866;
        sub_23AB58E04(0x100000000uLL, 493, v377, v378, 0, 0, 0, (uint64_t)v199, v866, 0, 0, 1, 0, 0, 0xF000000000000000, 0, 0, 0, 0,
          0,
          0,
          0,
          0);
        sub_23AA8A05C((uint64_t)v199, (uint64_t *)&unk_2542E4310);
        sub_23AA8A05C(v378, (uint64_t *)&unk_2542E4310);
        sub_23AA8A05C(v377, (uint64_t *)&unk_2542E4310);
        *(_BYTE *)(v379 + *(int *)(v853 + 80)) = 1;
        if (v862)
        {
          v858 = OBJC_IVAR____TtC9libfssync20InternalPathsManager_providerDomainID;
          v875 = (char *)(v189 & 0xC000000000000001);
          v874 = (char **)&v889;
          swift_bridgeObjectRetain();
          v380 = 4;
          *(_QWORD *)&v381 = 136446466;
          v870 = v381;
          v382 = &selRef_defaultManager;
          v859 = MEMORY[0x24BEE4AD8] + 8;
          v383 = (uint64_t)v865;
          while (1)
          {
            v384 = v380 - 4;
            v883 = v380;
            if (v875)
              v385 = (id)MEMORY[0x23B85F860](v380 - 4, v189);
            else
              v385 = *(id *)(v189 + 8 * v380);
            v386 = v385;
            v387 = (char *)(v384 + 1);
            if (__OFADD__(v384, 1))
            {
              __break(1u);
              goto LABEL_219;
            }
            v388 = (id)fpfs_current_or_default_log();
            v389 = v868;
            sub_23B1C5E58();
            v390 = v386;
            v391 = sub_23B1C5E40();
            v392 = sub_23B1C6A88();
            v393 = v392;
            v394 = os_log_type_enabled(v391, v392);
            v878 = v387;
            if (v394)
            {
              v395 = swift_slowAlloc();
              v876 = (os_log_t)swift_slowAlloc();
              *(_QWORD *)&v891.st_dev = v876;
              *(_DWORD *)v395 = v870;
              v396 = objc_msgSend(v390, v382[391]);
              v873 = v391;
              v397 = v396;
              sub_23B1C59CC();

              v398 = (void *)sub_23B1C5954();
              v399 = objc_msgSend(v398, sel_fp_shortDescription);

              v400 = sub_23B1C63E0();
              v402 = v401;

              v871 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v167 + 1);
              LODWORD(v872) = v393;
              v403 = v884;
              v871(v383, v884);
              *(_QWORD *)(v395 + 4) = sub_23AABEC68(v400, v402, (uint64_t *)&v891.st_dev);

              swift_bridgeObjectRelease();
              *(_WORD *)(v395 + 12) = 2082;
              v404 = objc_msgSend(v390, sel_logicalLocation);
              sub_23B1C59CC();

              v405 = (void *)sub_23B1C5954();
              v406 = objc_msgSend(v405, sel_fp_shortDescription);

              v407 = sub_23B1C63E0();
              v409 = v408;

              v382 = &selRef_defaultManager;
              v871(v383, v403);
              v888 = (id)sub_23AABEC68(v407, v409, (uint64_t *)&v891.st_dev);
              sub_23B1C6CBC();

              v167 = v881;
              swift_bridgeObjectRelease();

              v410 = v873;
              _os_log_impl(&dword_23AA66000, v873, (os_log_type_t)v872, "marking folder %{public}s as detached from %{public}s", (uint8_t *)v395, 0x16u);
              v411 = v876;
              swift_arrayDestroy();
              MEMORY[0x23B8614BC](v411, -1, -1);
              MEMORY[0x23B8614BC](v395, -1, -1);

              v876 = *(os_log_t *)(v867 + 8);
              ((void (*)(char *, uint64_t))v876)(v868, v869);
            }
            else
            {

              v876 = *(os_log_t *)(v867 + 8);
              ((void (*)(char *, uint64_t))v876)(v389, v869);
              v403 = v884;
            }
            v412 = v864;
            v413 = objc_msgSend(v390, v382[391]);
            sub_23B1C59CC();

            v414 = sub_23B1C59E4();
            v416 = v415;
            v417 = (uint64_t (*)(char *, uint64_t))*((_QWORD *)v167 + 1);
            v418 = v417(v412, v403);
            MEMORY[0x24BDAC7A8](v418);
            v797[0] = v866;
            v797[1] = v390;
            v797[3] = v882;
            LOBYTE(v891.st_dev) = 1;
            swift_bridgeObjectRetain();
            v419 = (uint64_t)v880;
            sub_23B0E1010(4294967294, v414, v416, 1048832, 0, 0, (uint64_t)&v891, (uint64_t)sub_23AB6CDEC, (uint64_t)&v796 + 8);
            v237 = v804;
            v880 = (void *)v419;
            if (v419)
            {
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v417(v860, v884);
              sub_23AA8A05C((uint64_t)v803, (uint64_t *)&unk_2542E6740);
              sub_23AA9F854(v866);
              return;
            }
            if ((v891.st_dev & 1) != 0)
              break;
            swift_bridgeObjectRelease();
            v382 = &selRef_defaultManager;
            v199 = &selRef_defaultManager;
            if ((objc_msgSend(v390, sel_detachOptions) & 1) != 0)
            {
              v420 = (id)fpfs_current_or_default_log();
              v421 = v863;
              sub_23B1C5E58();
              v422 = v390;
              v423 = sub_23B1C5E40();
              v424 = sub_23B1C6A88();
              v425 = v424;
              if (os_log_type_enabled(v423, v424))
              {
                v426 = swift_slowAlloc();
                v873 = v423;
                v427 = v426;
                v871 = (void (*)(uint64_t, uint64_t))swift_slowAlloc();
                *(_QWORD *)&v891.st_dev = v871;
                *(_DWORD *)v427 = v870;
                v856 = (char *)(v427 + 4);
                v428 = objc_msgSend(v422, sel_logicalLocation);
                LODWORD(v872) = v425;
                v429 = v865;
                sub_23B1C59CC();

                v430 = (void *)sub_23B1C5954();
                v431 = objc_msgSend(v430, sel_fp_shortDescription);

                v432 = sub_23B1C63E0();
                v434 = v433;

                v435 = v884;
                v417(v429, v884);
                v888 = (id)sub_23AABEC68(v432, v434, (uint64_t *)&v891.st_dev);
                sub_23B1C6CBC();

                swift_bridgeObjectRelease();
                *(_WORD *)(v427 + 12) = 2082;
                v856 = (char *)(v427 + 14);
                v436 = objc_msgSend(v422, sel_knownFolder);
                sub_23B1C59CC();

                v437 = (void *)sub_23B1C5954();
                v438 = objc_msgSend(v437, sel_fp_shortDescription);

                v439 = sub_23B1C63E0();
                v441 = v440;

                v382 = &selRef_defaultManager;
                v417(v429, v435);
                v888 = (id)sub_23AABEC68(v439, v441, (uint64_t *)&v891.st_dev);
                sub_23B1C6CBC();

                v199 = &selRef_defaultManager;
                swift_bridgeObjectRelease();

                v442 = v873;
                _os_log_impl(&dword_23AA66000, v873, (os_log_type_t)v872, "creating symlink from  %{public}s to detached root %{public}s", (uint8_t *)v427, 0x16u);
                v443 = (char *)v871;
                swift_arrayDestroy();
                v444 = v443;
                v445 = v884;
                MEMORY[0x23B8614BC](v444, -1, -1);
                v446 = v427;
                v383 = (uint64_t)v429;
                MEMORY[0x23B8614BC](v446, -1, -1);

                ((void (*)(char *, uint64_t))v876)(v863, v869);
              }
              else
              {

                ((void (*)(char *, uint64_t))v876)(v421, v869);
                v445 = v884;
                v383 = (uint64_t)v865;
              }
              v447 = (uint64_t)v861;
              type metadata accessor for InternalPathsManager();
              v448 = objc_msgSend(v422, v382[391]);
              sub_23B1C59CC();

              v449 = objc_msgSend(v422, v199[79]);
              sub_23B1C59CC();

              v382 = &selRef_defaultManager;
              sub_23AB64D6C(v383, v447, *(_QWORD *)&v882[v858]);

              v417((char *)v447, v445);
              v417((char *)v383, v445);
              v237 = v804;
              v167 = v881;
            }
            else
            {

              v383 = (uint64_t)v865;
            }
            v380 = (uint64_t)&v883->isa + 1;
            v189 = v879;
            if (v878 == v862)
            {
              swift_bridgeObjectRelease();
              goto LABEL_130;
            }
          }
          __break(1u);
LABEL_226:
          __break(1u);
          goto LABEL_227;
        }
LABEL_130:
        v450 = v860;
        v451 = sub_23B1C59E4();
        MEMORY[0x24BDAC7A8](v451);
        LOBYTE(v891.st_dev) = 1;
        v452 = v880;
        sub_23B0E1010(4294967294, v453, v454, 1048578, 0, v455, (uint64_t)&v891, (uint64_t)sub_23AB6CE08, (uint64_t)v797);
        if (v452)
        {
          v456 = (id)fpfs_current_or_default_log();
          v457 = v848;
          sub_23B1C5E58();
          v458 = v452;
          v459 = sub_23B1C5E40();
          v460 = sub_23B1C6AA0();
          if (os_log_type_enabled(v459, v460))
          {
            v461 = (uint8_t *)swift_slowAlloc();
            v462 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v461 = 138412290;
            swift_getErrorValue();
            v463 = sub_23B0D9CF0(v885);
            *(_QWORD *)&v891.st_dev = v463;
            v167 = v881;
            sub_23B1C6CBC();
            *v462 = v463;

            _os_log_impl(&dword_23AA66000, v459, v460, "can't mark the root dataless: %@", v461, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
            swift_arrayDestroy();
            v464 = v462;
            v237 = v804;
            MEMORY[0x23B8614BC](v464, -1, -1);
            v457 = v848;
            MEMORY[0x23B8614BC](v461, -1, -1);

          }
          else
          {

          }
          (*(void (**)(char *, uint64_t))(v867 + 8))(v457, v869);
          v880 = 0;
          v450 = v860;
        }
        else
        {
          v880 = 0;
          if ((v891.st_dev & 1) != 0)
          {
LABEL_227:
            __break(1u);
            return;
          }
        }
        if ((v800 & 1) == 0)
        {
          v467 = (void *)sub_23B1C5954();
          v468 = (void *)sub_23B1C5954();
          *(_QWORD *)&v891.st_dev = 0;
          v469 = objc_msgSend(v237, sel_moveItemAtURL_toURL_error_, v467, v468, &v891);

          if (!v469)
          {
            v502 = *(id *)&v891.st_dev;
            swift_bridgeObjectRelease();
            sub_23B1C587C();

            swift_willThrow();
            (*((void (**)(char *, uint64_t))v167 + 1))(v450, v884);
            sub_23AA8A05C((uint64_t)v803, (uint64_t *)&unk_2542E6740);
            sub_23AA9F854(v866);
            return;
          }
          v470 = *(id *)&v891.st_dev;
        }
        *v857 = 1;
        v471 = swift_allocObject();
        v471[2].isa = 0;
        p_isa = (void **)&v471[2].isa;
        v473 = v877;
        v474 = (void *)sub_23B1C5954();
        v475 = (void *)sub_23B1C63BC();
        swift_bridgeObjectRelease();
        *&v891.st_dev = v471[2];
        v476 = *(void **)&v891.st_dev;
        v477 = FPWriteImportCookieForDomainURL();

        v478 = *(void **)&v891.st_dev;
        v471[2].isa = *(Class *)&v891.st_dev;
        v479 = v478;

        if ((v477 & 1) != 0)
        {
          (*((void (**)(char *, uint64_t))v881 + 1))(v860, v884);
        }
        else
        {
          v480 = (id)fpfs_current_or_default_log();
          v481 = v840;
          sub_23B1C5E58();
          v482 = (void (*)(char *, void (*)(char *, uint64_t), uint64_t))*((_QWORD *)v881 + 2);
          v483 = v832;
          v484 = v884;
          v482((char *)v832, v473, v884);
          v485 = v834;
          v482(v834, v483, v484);
          v486 = v833;
          ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v852)(v833, v483, v484);
          swift_retain_n();
          v487 = sub_23B1C5E40();
          v488 = sub_23B1C6AA0();
          if (os_log_type_enabled(v487, (os_log_type_t)v488))
          {
            LODWORD(v879) = v488;
            v876 = v471;
            v883 = v487;
            v489 = swift_slowAlloc();
            v875 = (char *)swift_slowAlloc();
            v888 = v875;
            *(_DWORD *)v489 = 136446466;
            v878 = (char *)(v489 + 4);
            v490 = (void *)sub_23B1C5954();
            v491 = v485;
            v492 = objc_msgSend(v490, sel_fp_shortDescription);

            v493 = sub_23B1C63E0();
            v495 = v494;

            *(_QWORD *)&v891.st_dev = sub_23AABEC68(v493, v495, (uint64_t *)&v888);
            sub_23B1C6CBC();
            v496 = v884;
            swift_bridgeObjectRelease();
            v497 = (uint8_t *)*((_QWORD *)v881 + 1);
            ((void (*)(char *, uint64_t))v497)(v486, v496);
            ((void (*)(char *, uint64_t))v497)(v491, v496);
            *(_WORD *)(v489 + 12) = 2080;
            swift_beginAccess();
            v498 = *p_isa;
            if (*p_isa)
            {
              v881 = v497;
              v890 = (uint64_t)v498;
              sub_23AB6CDB0();
              sub_23AA7E38C(&qword_2569E24E8, (uint64_t (*)(uint64_t))sub_23AB6CDB0, MEMORY[0x24BDD01A8]);
              v499 = v498;
              v500 = sub_23B1C731C();
              if (v500)
              {
                v501 = (void *)v500;

              }
              else
              {
                v501 = (void *)swift_allocError();
                *v749 = v890;
              }
              v534 = v866;
              v678 = v875;
              v750 = (void *)sub_23B1C5870();

              v751 = objc_msgSend(v750, sel_fp_prettyDescription);
              v752 = objc_msgSend(v751, sel_description);

              v676 = sub_23B1C63E0();
              v677 = v753;

              v497 = v881;
            }
            else
            {
              v676 = 0x3E6C696E3CLL;
              v677 = 0xE500000000000000;
              v534 = v866;
              v678 = v875;
            }
            v890 = sub_23AABEC68(v676, v677, (uint64_t *)&v888);
            sub_23B1C6CBC();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            v754 = v883;
            _os_log_impl(&dword_23AA66000, v883, (os_log_type_t)v879, "failed to write import cookie for domain %{public}s: %s", (uint8_t *)v489, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x23B8614BC](v678, -1, -1);
            MEMORY[0x23B8614BC](v489, -1, -1);

            (*(void (**)(char *, uint64_t))(v867 + 8))(v840, v869);
            ((void (*)(char *, uint64_t))v497)(v860, v884);
            swift_release();
            goto LABEL_206;
          }
          swift_release_n();

          v533 = (void (*)(char *, uint64_t))*((_QWORD *)v881 + 1);
          v533(v486, v484);
          v533(v485, v484);
          (*(void (**)(char *, uint64_t))(v867 + 8))(v481, v869);
          v533(v860, v484);
        }
        swift_release();
        v534 = v866;
LABEL_206:
        sub_23AA9F854(v534);
        v237 = v804;
        goto LABEL_207;
      }
      goto LABEL_46;
    }
  }
  swift_bridgeObjectRetain();
  v862 = (char *)sub_23B1C7088();
  if (!v862)
    goto LABEL_62;
LABEL_46:
  v846 = v189 & 0xC000000000000001;
  v845 = (char *)objc_opt_self();
  v212 = 4;
  v213 = &selRef_defaultManager;
  while (1)
  {
    v214 = v212 - 4;
    if (v846)
    {
      v215 = (char *)MEMORY[0x23B85F860](v212 - 4, v189);
      v216 = (char *)(v212 - 3);
      if (__OFADD__(v214, 1))
        goto LABEL_178;
    }
    else
    {
      v215 = (char *)*(id *)(v189 + 8 * v212);
      v216 = (char *)(v212 - 3);
      if (__OFADD__(v214, 1))
      {
LABEL_178:
        __break(1u);
        goto LABEL_179;
      }
    }
    isa = (const char *)v213[391].isa;
    v875 = v215;
    v218 = objc_msgSend(v215, isa);
    sub_23B1C59CC();

    v219 = (void *)sub_23B1C5954();
    *(_QWORD *)&v891.st_dev = 0;
    v888 = 0;
    v220 = objc_msgSend(v845, sel_getProviderDomainID_location_foundDomainID_error_, v219, 2, &v891, &v888);

    v221 = *(void **)&v891.st_dev;
    v222 = v888;
    if (!v220)
    {
      v232 = v222;
      v233 = v221;
      sub_23B1C587C();

      swift_willThrow();
      swift_bridgeObjectRelease();

      (*((void (**)(NSObject *, uint64_t))v167 + 1))(v883, v884);
      goto LABEL_65;
    }
    if (v221)
      break;
    (*((void (**)(NSObject *, uint64_t))v167 + 1))(v883, v884);

LABEL_48:
    ++v212;
    v213 = &selRef_defaultManager;
    if (v216 == v862)
      goto LABEL_62;
  }
  v847 = v221;
  v223 = (void (*)(NSObject *, uint64_t))*((_QWORD *)v167 + 1);
  v223(v883, v884);
  v224 = objc_msgSend(v878, sel_providerDomainID);
  v225 = sub_23B1C63E0();
  v227 = v226;
  if (v225 == sub_23B1C63E0() && v227 == v228)
  {

    swift_bridgeObjectRelease_n();
LABEL_61:
    v167 = v881;
    v189 = v879;
    v199 = v874;
    goto LABEL_48;
  }
  v229 = sub_23B1C7388();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v229 & 1) != 0)
  {

    goto LABEL_61;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23B1C63E0();
  v248 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  v249 = objc_msgSend(v248, sel_fp_obfuscatedProviderDomainID);

  v250 = (char *)sub_23B1C63E0();
  v252 = v251;

  v253 = (id)fpfs_current_or_default_log();
  v254 = v856;
  sub_23B1C5E58();
  v255 = v875;
  swift_bridgeObjectRetain();
  v256 = (uint8_t *)sub_23B1C5E40();
  v257 = sub_23B1C6AAC();
  v258 = v257;
  if (os_log_type_enabled((os_log_t)v256, v257))
  {
    v259 = swift_slowAlloc();
    v883 = swift_slowAlloc();
    *(_QWORD *)&v891.st_dev = v883;
    *(_DWORD *)v259 = 136446466;
    v879 = v259 + 4;
    v260 = objc_msgSend(v255, sel_knownFolder);
    v882 = v256;
    v261 = v260;
    v262 = v865;
    sub_23B1C59CC();

    v263 = (void *)sub_23B1C5954();
    v264 = objc_msgSend(v263, sel_fp_shortDescription);
    LODWORD(v880) = v258;
    v265 = v264;

    v266 = sub_23B1C63E0();
    v878 = v250;
    v267 = v255;
    v269 = v268;

    v223(v262, v884);
    v888 = (id)sub_23AABEC68(v266, v269, (uint64_t *)&v891.st_dev);
    sub_23B1C6CBC();

    v255 = v267;
    swift_bridgeObjectRelease();

    *(_WORD *)(v259 + 12) = 2082;
    swift_bridgeObjectRetain();
    v888 = (id)sub_23AABEC68((uint64_t)v878, v252, (uint64_t *)&v891.st_dev);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease_n();
    v270 = &selRef_defaultManager;
    swift_bridgeObjectRelease();
    v271 = v882;
    _os_log_impl(&dword_23AA66000, (os_log_t)v882, (os_log_type_t)v880, "Attempting to import detached folder at %{public}s into new domain %{public}s", (uint8_t *)v259, 0x16u);
    v272 = v883;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v272, -1, -1);
    MEMORY[0x23B8614BC](v259, -1, -1);

    (*(void (**)(char *, uint64_t))(v867 + 8))(v856, v869);
    v273 = v881;
    v274 = v870;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v867 + 8))(v254, v869);
    v273 = v881;
    v274 = v870;
    v262 = v865;
    v270 = &selRef_defaultManager;
  }
  sub_23B1C53A8();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE850);
  v299 = swift_initStackObject();
  *(_OWORD *)(v299 + 16) = xmmword_23B1CA760;
  *(_QWORD *)(v299 + 32) = sub_23B1C63E0();
  *(_QWORD *)(v299 + 40) = v300;
  v301 = objc_msgSend(v255, v270[391]);
  sub_23B1C59CC();

  v302 = v884;
  *(_QWORD *)(v299 + 72) = v884;
  v303 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v299 + 48));
  (*((void (**)(uint64_t *, char *, uint64_t))v273 + 4))(v303, v262, v302);
  sub_23AAE9EB4(v299);
  sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
  v304 = v873;
  sub_23B1C5864();
  sub_23B1C5354();
  (*(void (**)(os_log_t, uint64_t))(v872 + 8))(v304, v274);
  swift_willThrow();

LABEL_87:
LABEL_88:
  v166 = (uint64_t)v803;
LABEL_89:
  sub_23AA8A05C(v166, (uint64_t *)&unk_2542E6740);
}

uint64_t sub_23AB6B418(int a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  id v18;
  void (*v19)(char *, uint64_t);
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = a5;
  v10 = sub_23B1C5A08();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v29 - v15;
  v31 = a2;
  v32 = a1;
  result = sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AB6CE94);
  if (!v5)
  {
    v30 = a4;
    v18 = objc_msgSend(a3, sel_logicalLocation);
    sub_23B1C59CC();

    sub_23B1C599C();
    v19 = *(void (**)(char *, uint64_t))(v11 + 8);
    v19(v14, v10);
    v20 = objc_msgSend(a3, sel_logicalLocation);
    sub_23B1C59CC();

    v21 = sub_23B1C5930();
    v23 = v22;
    v19(v14, v10);
    v37 = v21;
    v38 = v23;
    v35 = 58;
    v36 = 0xE100000000000000;
    v33 = 47;
    v34 = 0xE100000000000000;
    sub_23AAA420C();
    v24 = sub_23B1C6CF8();
    v26 = v25;
    swift_bridgeObjectRelease();
    v27 = sub_23B1C63E0();
    sub_23B19295C(a1, (uint64_t)v16, v24, v26, v30, v27, v28);
    v19(v16, v10);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23AB6B630@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  _DWORD v13[8];
  _BYTE v14[248];
  _BYTE v15[248];

  v8 = type metadata accessor for ItemMetadata();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23AA9BA80(a1, (uint64_t)v10);
  sub_23AAF8E48((uint64_t)v15);
  sub_23AAB7EC8((uint64_t)v15, (uint64_t)v14);
  v13[4] = a2;
  sub_23B1A4A98((uint64_t)v14, 6, a3, (uint64_t)v13);
  *a4 = v11;
  return sub_23AA9F854((uint64_t)v10);
}

uint64_t sub_23AB6B708(int a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AB6CEE0);
  if (!v1)
  {
    sub_23B1C63E0();
    sub_23B192614(a1);
    v4 = swift_bridgeObjectRelease();
    MEMORY[0x24BDAC7A8](v4);
    return sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AB6CF14);
  }
  return result;
}

uint64_t sub_23AB6B7D8(int a1)
{
  sub_23B1C63E0();
  sub_23B192614(a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AB6B83C()
{
  return sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AB6CF4C);
}

uint64_t sub_23AB6B868@<X0>(_DWORD *a1@<X8>)
{
  void *v2;
  int dataless_fault_at;
  uint64_t result;
  _QWORD v5[6];

  sub_23B1C59E4();
  v5[4] = sub_23AFE01B4;
  v5[5] = 0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1107296256;
  v5[2] = sub_23AA7E744;
  v5[3] = &block_descriptor_1;
  v2 = _Block_copy(v5);
  swift_release();
  sub_23B1C6458();
  swift_bridgeObjectRelease();
  dataless_fault_at = fpfs_create_dataless_fault_at();
  swift_release();
  _Block_release(v2);
  *a1 = dataless_fault_at;
  result = swift_isEscapingClosureAtFileLocation();
  if ((result & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_23AB6B974()
{
  return sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AB6CF60);
}

id sub_23AB6B9A0()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void sub_23AB6B9C0()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_23AB6BA18()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InternalPathsManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_23AB6BB3C()
{
  return type metadata accessor for InternalPathsManager();
}

void sub_23AB6BB44()
{
  unint64_t v0;

  sub_23AB6BBDC();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_23AB6BBDC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2542E6750)
  {
    sub_23B1C5A08();
    v0 = sub_23B1C6C98();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2542E6750);
  }
}

uint64_t sub_23AB6BC30(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void *sub_23AB6BC38(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  v3 = (void *)objc_opt_self();
  v4 = (void *)sub_23B1C5954();
  v11 = 0;
  v12[0] = 0;
  LODWORD(v3) = objc_msgSend(v3, sel_getProviderDomainID_location_foundDomainID_error_, v4, a2, v12, &v11);

  v5 = (void *)v12[0];
  if ((_DWORD)v3)
  {
    v6 = v11;
    v7 = v5;
  }
  else
  {
    v8 = v11;
    v9 = v5;
    sub_23B1C587C();

    swift_willThrow();
  }
  return v5;
}

uint64_t sub_23AB6BD2C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v4 = sub_23B1C5BDC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  objc_msgSend(v8, sel_setDateStyle_, 1);
  objc_msgSend(v8, sel_setTimeStyle_, 1);
  sub_23B1C5BD0();
  v9 = (void *)sub_23B1C5B64();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v10 = objc_msgSend(v8, sel_stringFromDate_, v9);

  v11 = sub_23B1C63E0();
  v13 = v12;

  v23 = v11;
  v24 = v13;
  v21 = 47;
  v22 = 0xE100000000000000;
  v19 = 45;
  v20 = 0xE100000000000000;
  sub_23AAA420C();
  v14 = sub_23B1C6CF8();
  v16 = v15;
  swift_bridgeObjectRelease();
  v23 = v14;
  v24 = v16;
  v21 = 44;
  v22 = 0xE100000000000000;
  v19 = 0;
  v20 = 0xE000000000000000;
  sub_23B1C6CF8();
  swift_bridgeObjectRelease();
  v23 = 10272;
  v24 = 0xE200000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v21 = a1;
  v22 = a2;
  swift_bridgeObjectRetain();
  v21 = sub_23B1C65B4();
  v22 = v17;
  sub_23B1C64E8();
  swift_bridgeObjectRelease();

  return v21;
}

uint64_t sub_23AB6BF98(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v4;
  char v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  v4 = sub_23AB6BC38(a1, 1);
  if (!v2)
  {
    v6 = v4;
    v7 = objc_msgSend(a2, sel_providerDomainID);
    v8 = v7;
    if (v6)
    {
      v9 = sub_23B1C63E0();
      v11 = v10;
      if (v9 == sub_23B1C63E0() && v11 == v12)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        v14 = sub_23B1C7388();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v5 = 0;
        if ((v14 & 1) == 0)
          return v5 & 1;
      }
      v5 = 1;
    }
    else
    {

      v5 = 0;
    }
  }
  return v5 & 1;
}

void sub_23AB6C08C()
{
  uint64_t v0;

  sub_23AB61D60(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_23AB6C0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AB6C0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AB6C134(int a1)
{
  return sub_23AB6B7D8(a1);
}

BOOL sub_23AB6C14C(int a1)
{
  int v2;
  _BOOL8 result;
  int st_mode;
  int v5;
  stat v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  memset(&v6, 0, 28);
  memset(&v6.st_atimespec, 0, 112);
  v2 = fstat(a1, &v6);
  result = 0;
  if (!v2)
  {
    st_mode = v6.st_mode;
    v5 = sub_23B1C5EC4() & st_mode;
    return v5 == (unsigned __int16)sub_23B1C5EC4()
        && fgetxattr(a1, "com.apple.fileprovider.detached-link#P", 0, 0, 0, 0) >= 0;
  }
  return result;
}

uint64_t sub_23AB6C224(_QWORD *a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  _QWORD *v37;
  uint8_t *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint8_t *v42;
  void *v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void (*v54)(uint8_t *, uint64_t);
  os_log_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t);
  uint64_t v59;
  id v60;
  char *v61;
  uint64_t v62;
  id v63;
  id v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  id v74;
  void *v75;
  _QWORD *v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint8_t *v82;
  id v83;
  char *v84;
  NSObject *v85;
  char *v86;
  os_log_type_t v87;
  uint8_t *v88;
  void *v89;
  id v90;
  id v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t (*v97)(char *, uint64_t);
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[2];
  uint8_t *v102;
  uint64_t v103;
  os_log_t v104;
  void (*v105)(uint8_t *, _QWORD *, uint64_t);
  int v106;
  uint8_t *v107;
  int v108;
  char *v109;
  uint8_t *v110;
  _QWORD *v111;
  char *v112;
  uint8_t *v113;
  uint8_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint8_t *v123;
  __int16 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  char v130;
  int v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _BYTE v135[26];
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;

  v3 = v2;
  v140 = *MEMORY[0x24BDAC8D0];
  v6 = sub_23B1C5E4C();
  v116 = *(_QWORD *)(v6 - 8);
  v117 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v109 = (char *)v101 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v115 = (char *)v101 - v12;
  v13 = sub_23B1C5BDC();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23B1C5A08();
  v118 = *(_QWORD **)(v16 - 8);
  v119 = v16;
  v17 = MEMORY[0x24BDAC7A8](v16);
  v112 = (char *)v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v107 = (uint8_t *)v101 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v114 = (uint8_t *)v101 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)v101 - v23;
  sub_23B1C599C();
  v108 = a2;
  v113 = (uint8_t *)v9;
  if ((a2 & 1) == 0)
  {
    v33 = v116;
    goto LABEL_7;
  }
  v111 = a1;
  v25 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_23B1C59E4();
  v26 = v24;
  v27 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  objc_msgSend(v25, sel_fp_createPathIfNeeded_, v27);

  v24 = v26;
  v28 = sub_23B1C59E4();
  v30 = v29;
  LOBYTE(v123) = 1;
  swift_bridgeObjectRetain();
  result = sub_23B0E1010(4294967294, v28, v30, 0x100000, 0, 0, (uint64_t)&v123, (uint64_t)sub_23AB6B83C, 0);
  if (!v3)
  {
    v33 = v116;
    if ((v123 & 1) != 0)
    {
      __break(1u);
      goto LABEL_25;
    }
    swift_bridgeObjectRelease();
    v9 = (char *)v113;
    a1 = v111;
LABEL_7:
    v110 = (uint8_t *)v24;
    BYTE6(v123) = 0;
    WORD2(v123) = 0;
    v125 = 0u;
    v126 = 0u;
    v127 = 0u;
    v128 = 0u;
    v129 = 0u;
    v130 = 0;
    v131 = 0;
    v132 = 0u;
    v133 = 0u;
    v134 = 0u;
    memset(v135, 0, sizeof(v135));
    v137 = 0;
    v138 = 0;
    v136 = 0;
    v139 = 0;
    LODWORD(v123) = 2;
    v124 = 448;
    sub_23AB6CEB8((uint64_t)&v123);
    sub_23B1C5BD0();
    *((_QWORD *)&v125 + 1) = sub_23AD675A8((uint64_t)v15);
    *(_QWORD *)&v126 = v34;
    sub_23B1C5BD0();
    *((_QWORD *)&v126 + 1) = sub_23AD675A8((uint64_t)v15);
    *(_QWORD *)&v127 = v35;
    v36 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v37 = v118;
    v38 = v114;
    v105 = (void (*)(uint8_t *, _QWORD *, uint64_t))v118[2];
    v105(v114, a1, v119);
    v39 = sub_23B1C5E40();
    v40 = sub_23B1C6A88();
    v106 = v40;
    if (os_log_type_enabled(v39, v40))
    {
      v104 = v39;
      v41 = v33;
      v42 = (uint8_t *)swift_slowAlloc();
      v103 = swift_slowAlloc();
      v122 = v103;
      *(_DWORD *)v42 = 136315138;
      v101[1] = v42 + 4;
      v102 = v42;
      v43 = (void *)sub_23B1C5954();
      v44 = objc_msgSend(v43, sel_fp_shortDescription);
      v45 = v9;
      v46 = v41;
      v47 = v119;
      v48 = v3;
      v49 = v44;

      v50 = sub_23B1C63E0();
      v111 = a1;
      v52 = v51;

      v3 = v48;
      v53 = v46;
      v9 = v45;
      v120 = sub_23AABEC68(v50, v52, &v122);
      sub_23B1C6CBC();
      a1 = v111;
      swift_bridgeObjectRelease();
      v54 = (void (*)(uint8_t *, uint64_t))v118[1];
      v54(v114, v47);
      v55 = v104;
      v56 = v102;
      _os_log_impl(&dword_23AA66000, v104, (os_log_type_t)v106, "Marking root dataless %s", v102, 0xCu);
      v57 = v103;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v57, -1, -1);
      MEMORY[0x23B8614BC](v56, -1, -1);

      v58 = *(uint64_t (**)(char *, uint64_t))(v53 + 8);
    }
    else
    {
      v54 = (void (*)(uint8_t *, uint64_t))v37[1];
      v54(v38, v119);

      v58 = *(uint64_t (**)(char *, uint64_t))(v33 + 8);
    }
    v59 = v58(v115, v117);
    MEMORY[0x24BDAC7A8](v59);
    sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AB6CEC8);
    if (v3)
    {
      v115 = (char *)v54;
      v54(v110, v119);
      v32 = v118;
      goto LABEL_12;
    }
    if ((v108 & 1) == 0)
    {
      v81 = v109;
      v82 = v107;
      goto LABEL_21;
    }
    v78 = sub_23B1C59E4();
    v80 = v79;
    LOBYTE(v122) = 1;
    swift_bridgeObjectRetain();
    result = sub_23B0E1010(4294967294, v78, v80, 0x100000, 0, 0, (uint64_t)&v122, (uint64_t)sub_23AB6B974, 0);
    v81 = v109;
    v82 = v107;
    if ((v122 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_21:
      v83 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      v105(v82, a1, v119);
      v84 = v81;
      v85 = sub_23B1C5E40();
      v86 = (char *)v82;
      v87 = sub_23B1C6A88();
      if (os_log_type_enabled(v85, v87))
      {
        v88 = (uint8_t *)swift_slowAlloc();
        v116 = swift_slowAlloc();
        v122 = v116;
        v118 = 0;
        *(_DWORD *)v88 = 136315138;
        v113 = v88 + 4;
        v114 = v88;
        v89 = (void *)sub_23B1C5954();
        v90 = objc_msgSend(v89, sel_fp_shortDescription);
        v115 = (char *)v54;
        v91 = v90;

        v92 = sub_23B1C63E0();
        v94 = v93;

        v120 = sub_23AABEC68(v92, v94, &v122);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        v95 = v86;
        v96 = v119;
        v97 = (uint64_t (*)(char *, uint64_t))v115;
        ((void (*)(char *, uint64_t))v115)(v95, v119);
        v98 = v114;
        _os_log_impl(&dword_23AA66000, v85, v87, "Created dataless root %s", v114, 0xCu);
        v99 = v116;
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v99, -1, -1);
        MEMORY[0x23B8614BC](v98, -1, -1);

        v58(v109, v117);
        return v97((char *)v110, v96);
      }
      else
      {

        v100 = v119;
        v54((uint8_t *)v86, v119);
        v58(v84, v117);
        return ((uint64_t (*)(uint8_t *, uint64_t))v54)(v110, v100);
      }
    }
LABEL_25:
    __break(1u);
    return result;
  }
  v32 = v118;
  v115 = (char *)v118[1];
  ((void (*)(char *, uint64_t))v115)(v26, v119);
  swift_bridgeObjectRelease();
  v9 = (char *)v113;
  a1 = v111;
LABEL_12:
  v60 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v61 = v112;
  v62 = v119;
  ((void (*)(char *, _QWORD *, uint64_t))v32[2])(v112, a1, v119);
  v63 = v3;
  v64 = v3;
  v65 = sub_23B1C5E40();
  v66 = sub_23B1C6AA0();
  if (os_log_type_enabled(v65, v66))
  {
    v67 = swift_slowAlloc();
    v111 = (_QWORD *)swift_slowAlloc();
    v114 = (uint8_t *)swift_slowAlloc();
    v123 = v114;
    *(_DWORD *)v67 = 136315394;
    v118 = v3;
    v110 = (uint8_t *)(v67 + 4);
    v68 = (void *)sub_23B1C5954();
    v69 = objc_msgSend(v68, sel_fp_shortDescription);

    v70 = sub_23B1C63E0();
    v71 = v61;
    v73 = v72;

    v122 = sub_23AABEC68(v70, v73, (uint64_t *)&v123);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v115)(v71, v62);
    *(_WORD *)(v67 + 12) = 2112;
    swift_getErrorValue();
    v74 = sub_23B0D9CF0(v121);
    v122 = (uint64_t)v74;
    v75 = v118;
    sub_23B1C6CBC();
    v76 = v111;
    *v111 = v74;

    _os_log_impl(&dword_23AA66000, v65, v66, "Error while creating root %s: %@", (uint8_t *)v67, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v76, -1, -1);
    v77 = v114;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v77, -1, -1);
    MEMORY[0x23B8614BC](v67, -1, -1);

    (*(void (**)(uint8_t *, uint64_t))(v116 + 8))(v113, v117);
  }
  else
  {
    ((void (*)(char *, uint64_t))v115)(v61, v62);

    (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v117);
  }
  return swift_willThrow();
}

uint64_t sub_23AB6CCC4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_23AB64BB8(a1, a2);
}

uint64_t sub_23AB6CCE0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23AB6CCF4@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23AB654E0(a1, *(char **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

void sub_23AB6CD10()
{
  uint64_t v0;

  sub_23AB661D4(*(uint8_t **)(v0 + 16), *(char **)(v0 + 24), *(NSObject **)(v0 + 32), *(uint8_t **)(v0 + 40), *(void (**)(char *, uint64_t))(v0 + 48), *(_BYTE **)(v0 + 56));
}

uint64_t sub_23AB6CD30(int a1)
{
  return sub_23AB6B708(a1);
}

unint64_t sub_23AB6CD48()
{
  unint64_t result;

  result = qword_2542E4340;
  if (!qword_2542E4340)
  {
    result = MEMORY[0x23B8613CC](MEMORY[0x24BDCF7C0], MEMORY[0x24BEE76A8]);
    atomic_store(result, (unint64_t *)&qword_2542E4340);
  }
  return result;
}

uint64_t sub_23AB6CD8C()
{
  uint64_t v0;

  return swift_deallocObject();
}

unint64_t sub_23AB6CDB0()
{
  unint64_t result;

  result = qword_2542E2000;
  if (!qword_2542E2000)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2542E2000);
  }
  return result;
}

uint64_t sub_23AB6CDEC(int a1)
{
  uint64_t v1;

  return sub_23AB6B418(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_23AB6CE08()
{
  return sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AB6CE3C);
}

uint64_t sub_23AB6CE3C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_23AB6B630(*(_QWORD *)(v1 + 16), *(_DWORD *)(v1 + 24), (uint64_t)sub_23AB6CE60, a1);
}

uint64_t sub_23AB6CE60@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = fpfs_set_dataless_cmpfs_attrs();
  *a1 = result;
  return result;
}

uint64_t sub_23AB6CE94@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_23AB6B630(*(_QWORD *)(v1 + 16), *(_DWORD *)(v1 + 24), (uint64_t)sub_23AB6CF74, a1);
}

uint64_t sub_23AB6CEB8(uint64_t result)
{
  *(_DWORD *)(result + 4) |= 1u;
  return result;
}

uint64_t sub_23AB6CEC8@<X0>(_DWORD *a1@<X8>)
{
  return sub_23AB6B868(a1);
}

uint64_t sub_23AB6CEE0@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = fpfs_fset_acl();
  *a1 = result;
  return result;
}

uint64_t sub_23AB6CF14@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = fpfs_fset_acl();
  *a1 = result;
  return result;
}

uint64_t sub_23AB6CF4C@<X0>(_DWORD *a1@<X8>)
{
  return sub_23AB6CEE0(a1);
}

uint64_t sub_23AB6CF60@<X0>(_DWORD *a1@<X8>)
{
  return sub_23AB6CF14(a1);
}

uint64_t sub_23AB6CF74@<X0>(_DWORD *a1@<X8>)
{
  return sub_23AB6CE60(a1);
}

uint64_t sub_23AB6CF88()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23AB6CFBC + 4 * byte_23B1CFAF0[*v0]))(0x7461447472617473, 0xE900000000000065);
}

unint64_t sub_23AB6CFBC()
{
  return 0xD000000000000015;
}

uint64_t sub_23AB6CFD8()
{
  return 0x426E656553736168;
}

uint64_t sub_23AB6CFF8()
{
  return 0x66666F6B636162;
}

uint64_t sub_23AB6D010()
{
  return 0x656C6174537369;
}

uint64_t sub_23AB6D028@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23AB6DF28(a1, a2);
  *a3 = result;
  return result;
}

void sub_23AB6D04C(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_23AB6D058()
{
  sub_23AB6E354();
  return sub_23B1C7544();
}

uint64_t sub_23AB6D080()
{
  sub_23AB6E354();
  return sub_23B1C7550();
}

uint64_t sub_23AB6D0A8(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_23AB6D0F4(a1);
  return v2;
}

uint64_t sub_23AB6D0F4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char v36[40];
  uint64_t v37;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v4);
  v30 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23B1C5BDC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v31 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2518);
  v29 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(void))(v7 + 56);
  v35 = v2 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate;
  v11();
  v12 = OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_isStale;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_isStale) = 2;
  v13 = OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_backoff;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_backoff) = 100000000;
  v14 = a1[3];
  v34 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_23AB6E354();
  swift_retain();
  v32 = v10;
  v15 = v37;
  sub_23B1C7520();
  if (v15)
  {
    swift_release();
    v19 = v35;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
    sub_23AB6E2CC(v19);
    type metadata accessor for VFSLookupItemContinuation();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v27 = v12;
    v28 = v13;
    v16 = (uint64_t)v30;
    v37 = v7;
    v36[0] = 0;
    sub_23AB6E438(&qword_2569E2468, MEMORY[0x24BDCE960]);
    v18 = v31;
    v17 = v32;
    sub_23B1C71C0();
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v2 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_startDate, v18, v6);
    v36[0] = 1;
    sub_23B1C7160();
    v21 = v35;
    swift_beginAccess();
    sub_23AB5E930(v16, v21);
    swift_endAccess();
    v36[0] = 2;
    v22 = sub_23B1C71A8();
    v23 = v29;
    *(_BYTE *)(v2 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_hasSeenBusy) = v22 & 1;
    v36[0] = 3;
    v24 = sub_23B1C7148();
    v26 = 100000000;
    if ((v25 & 1) == 0)
      v26 = v24;
    *(_QWORD *)(v2 + v28) = v26;
    v36[0] = 4;
    *(_BYTE *)(v2 + v27) = sub_23B1C713C();
    swift_release();
    sub_23B1C7124();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v33);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  }
  return v2;
}

uint64_t sub_23AB6D504(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  char v23;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E24F0);
  v19 = *(_QWORD *)(v4 - 8);
  v20 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v18 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E24F8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AB6E354();
  sub_23B1C7538();
  LOBYTE(v22[0]) = 0;
  sub_23B1C5BDC();
  sub_23AB6E438(&qword_2569E2418, MEMORY[0x24BDCE920]);
  v13 = v21;
  sub_23B1C72A4();
  if (v13)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v21 = v10;
  v15 = v2 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate;
  swift_beginAccess();
  sub_23AB6E30C(v15, (uint64_t)v8);
  LOBYTE(v22[0]) = 1;
  sub_23B1C7238();
  sub_23AB6E2CC((uint64_t)v8);
  LOBYTE(v22[0]) = 2;
  sub_23B1C7280();
  LOBYTE(v22[0]) = 3;
  sub_23B1C728C();
  LOBYTE(v22[0]) = *(_BYTE *)(v2 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_isStale);
  v23 = 4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E74E0);
  sub_23AB6E398();
  sub_23B1C72A4();
  v16 = v21;
  sub_23B1C7214();
  __swift_project_boxed_opaque_existential_1(v22, v22[3]);
  sub_23AB6E3F4();
  v17 = v18;
  sub_23B1C7538();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  return (*(uint64_t (**)(char *, _QWORD))(v16 + 8))(v12, 0);
}

uint64_t sub_23AB6D84C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate;
  swift_beginAccess();
  sub_23AB6E30C(v4, (uint64_t)v3);
  v5 = sub_23B1C5BDC();
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5);
  sub_23AB6E2CC((uint64_t)v3);
  if ((_DWORD)v4 != 1 && (*(_BYTE *)(v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_hasSeenBusy) & 1) != 0)
    return 2200000000;
  if (*(uint64_t *)(v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_backoff) >= 10000000000)
    return 10000000000;
  return *(_QWORD *)(v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_backoff);
}

uint64_t sub_23AB6D950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  double v13;
  double v14;
  uint64_t (*v15)(char *, uint64_t);
  uint64_t result;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  double v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23B1C5BDC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v27 - v10;
  v32 = 0x3A7472617473;
  v33 = 0xE600000000000000;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v27 - v10, v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_startDate, v5);
  sub_23B1C5B94();
  v14 = v13;
  v15 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  result = v15(v11, v5);
  v17 = v14 * 1000000000.0;
  if ((~COERCE__INT64(v14 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v17 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v27 = (void (*)(char *, uint64_t))v15;
  v34 = (uint64_t)v17 / 1000000000;
  sub_23AB55910();
  sub_23B1C6D70();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  v34 = v32;
  v35 = v33;
  v18 = v1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate;
  swift_beginAccess();
  sub_23AB6E30C(v18, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
    v30 = 0x3A746E656F6E6520;
    v31 = 0xE800000000000000;
    v12(v11, (uint64_t)v9, v5);
    sub_23B1C5B94();
    v20 = v19;
    v21 = v11;
    v22 = v27;
    result = ((uint64_t (*)(char *, uint64_t))v27)(v21, v5);
    v23 = v20 * 1000000000.0;
    if ((~COERCE__INT64(v20 * 1000000000.0) & 0x7FF0000000000000) != 0)
    {
      if (v23 > -9.22337204e18)
      {
        if (v23 < 9.22337204e18)
        {
          v28 = (uint64_t)v23 / 1000000000;
          sub_23B1C6D70();
          sub_23B1C64F4();
          swift_bridgeObjectRelease();
          sub_23B1C64F4();
          swift_bridgeObjectRelease();
          v22(v9, v5);
          goto LABEL_10;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  sub_23AB6E2CC((uint64_t)v4);
LABEL_10:
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_hasSeenBusy) == 1)
    sub_23B1C64F4();
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_isStale) & 1) != 0)
    sub_23B1C64F4();
  v30 = 0x66666F6B63616220;
  v31 = 0xE90000000000003ALL;
  result = *(_QWORD *)(v1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_backoff);
  if ((result & 0x8000000000000000) == 0)
  {
    v24 = 0;
    v25 = 0xE000000000000000;
LABEL_18:
    sub_23AF3E770(result);
    v28 = v24;
    v29 = v25;
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v34;
  }
  v26 = __OFSUB__(0, result);
  result = -result;
  if (!v26)
  {
    v25 = 0xE100000000000000;
    v24 = 45;
    goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_23AB6DD70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_startDate;
  v2 = sub_23B1C5BDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return sub_23AB6E2CC(v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate);
}

uint64_t sub_23AB6DDBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_startDate;
  v2 = sub_23B1C5BDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23AB6E2CC(v0 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate);
  return swift_deallocClassInstance();
}

uint64_t sub_23AB6DE1C()
{
  return type metadata accessor for VFSLookupItemContinuation();
}

uint64_t type metadata accessor for VFSLookupItemContinuation()
{
  uint64_t result;

  result = qword_2542E5058;
  if (!qword_2542E5058)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23AB6DE60()
{
  unint64_t v0;
  unint64_t v1;

  sub_23B1C5BDC();
  if (v0 <= 0x3F)
  {
    sub_23AB5FB60();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t sub_23AB6DF08()
{
  return sub_23AB6D950();
}

uint64_t sub_23AB6DF28(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7461447472617473 && a2 == 0xE900000000000065;
  if (v2 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023B1F86B0 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x426E656553736168 && a2 == 0xEB00000000797375 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x66666F6B636162 && a2 == 0xE700000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C6174537369 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23AB6E160(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23B1C5BDC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v10(a1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_deletionDetectionDate, 1, 1, v5);
  *(_BYTE *)(a1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_isStale) = 2;
  *(_QWORD *)(a1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_backoff) = 100000000;
  swift_retain();
  sub_23B1C5BD0();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_startDate, v8, v5);
  v10((uint64_t)v4, 1, 1, v5);
  swift_beginAccess();
  sub_23AB5E930((uint64_t)v4, v9);
  swift_endAccess();
  *(_BYTE *)(a1 + OBJC_IVAR____TtC9libfssync25VFSLookupItemContinuation_hasSeenBusy) = 0;
  return a1;
}

uint64_t sub_23AB6E2CC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23AB6E30C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23AB6E354()
{
  unint64_t result;

  result = qword_2569E2500;
  if (!qword_2569E2500)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CFC4C, &type metadata for VFSLookupItemContinuation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2500);
  }
  return result;
}

unint64_t sub_23AB6E398()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2569E2508;
  if (!qword_2569E2508)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542E74E0);
    v2 = MEMORY[0x24BEE1330];
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2569E2508);
  }
  return result;
}

unint64_t sub_23AB6E3F4()
{
  unint64_t result;

  result = qword_2569E2510;
  if (!qword_2569E2510)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1E40E0, &type metadata for Continuation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2510);
  }
  return result;
}

uint64_t sub_23AB6E438(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23B1C5BDC();
    result = MEMORY[0x23B8613CC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContentStatus(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VFSLookupItemContinuation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23AB6E554 + 4 * byte_23B1CFAFA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23AB6E588 + 4 * byte_23B1CFAF5[v4]))();
}

uint64_t sub_23AB6E588(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AB6E590(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23AB6E598);
  return result;
}

uint64_t sub_23AB6E5A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23AB6E5ACLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23AB6E5B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AB6E5B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VFSLookupItemContinuation.CodingKeys()
{
  return &type metadata for VFSLookupItemContinuation.CodingKeys;
}

unint64_t sub_23AB6E5D8()
{
  unint64_t result;

  result = qword_2569E2520;
  if (!qword_2569E2520)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CFC24, &type metadata for VFSLookupItemContinuation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2520);
  }
  return result;
}

unint64_t sub_23AB6E620()
{
  unint64_t result;

  result = qword_2569E2528;
  if (!qword_2569E2528)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CFB94, &type metadata for VFSLookupItemContinuation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2528);
  }
  return result;
}

unint64_t sub_23AB6E668()
{
  unint64_t result;

  result = qword_2569E2530;
  if (!qword_2569E2530)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CFBBC, &type metadata for VFSLookupItemContinuation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2530);
  }
  return result;
}

uint64_t sub_23AB6E6AC()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23AB6E740()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542DDD08);
  return sub_23B1C644C();
}

uint64_t sub_23AB6E774()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 <= 0xFB)
    return 0;
  else
    return 4 - (v1 + 4);
}

unint64_t sub_23AB6E790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE850);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23B1CA760;
  *(_QWORD *)(inited + 32) = sub_23B1C63E0();
  *(_QWORD *)(inited + 40) = v5;
  sub_23AB7C160(v1, v2, v3);
  v6 = sub_23B1C6434();
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = v6;
  *(_QWORD *)(inited + 56) = v7;
  return sub_23AAE9EB4(inited);
}

uint64_t sub_23AB6E840()
{
  sub_23AB7CA0C();
  return sub_23B1C7430();
}

uint64_t sub_23AB6E868()
{
  sub_23AB7CA0C();
  return sub_23B1C7424();
}

BOOL sub_23AB6E894(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  _BOOL8 v24;
  id v25;
  id v26;
  uint64_t v28;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, a1);
  v6 = sub_23B1C731C();
  if (v6)
  {
    v7 = (void *)v6;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  else
  {
    v7 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v8, v4, a1);
  }
  sub_23AB7BFCC();
  v9 = (void *)swift_allocError();
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_BYTE *)(v10 + 16) = 3;
  v11 = v7;
  v12 = (void *)sub_23B1C5870();

  v13 = (void *)sub_23B1C5870();
  v14 = objc_msgSend(v12, sel_domain);
  v15 = sub_23B1C63E0();
  v17 = v16;

  v18 = objc_msgSend(v13, sel_domain);
  v19 = sub_23B1C63E0();
  v21 = v20;

  if (v15 == v19 && v17 == v21)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  v23 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v23 & 1) != 0)
  {
LABEL_11:
    v25 = objc_msgSend(v12, sel_code);
    v26 = objc_msgSend(v13, sel_code);

    v24 = v25 == v26;
    goto LABEL_12;
  }

  v24 = 0;
LABEL_12:

  return v24;
}

void sub_23AB6EAB8()
{
  uint64_t v0;

  sub_23AB6EAD4();
  qword_2542EDE30 = v0;
}

void sub_23AB6EAD4()
{
  xpc_object_t v0;
  id v1;
  void *v2;

  v0 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v0, (const char *)*MEMORY[0x24BDAC5B8], 0);
  xpc_dictionary_set_int64(v0, (const char *)*MEMORY[0x24BDAC5D8], *MEMORY[0x24BDAC628]);
  xpc_dictionary_set_BOOL(v0, (const char *)*MEMORY[0x24BDAC6B8], 0);
  xpc_dictionary_set_BOOL(v0, (const char *)*MEMORY[0x24BDAC598], 0);
  if (*MEMORY[0x24BDAC6D8])
  {
    xpc_dictionary_set_BOOL(v0, (const char *)*MEMORY[0x24BDAC6D8], 1);
    xpc_dictionary_set_string(v0, (const char *)*MEMORY[0x24BDAC698], (const char *)*MEMORY[0x24BDAC6A8]);
    v1 = objc_allocWithZone(MEMORY[0x24BE313D0]);
    v2 = (void *)sub_23B1C63BC();
    objc_msgSend(v1, sel_initWithLabel_criteria_, v2, v0);

    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_23AB6EC08()
{
  uint64_t v0;

  sub_23AB6EC24();
  qword_2542EDE20 = v0;
}

void sub_23AB6EC24()
{
  xpc_object_t v0;
  id v1;
  void *v2;

  v0 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v0, (const char *)*MEMORY[0x24BDAC5B8], 7200);
  xpc_dictionary_set_int64(v0, (const char *)*MEMORY[0x24BDAC5D8], *MEMORY[0x24BDAC608]);
  xpc_dictionary_set_BOOL(v0, (const char *)*MEMORY[0x24BDAC6B8], 1);
  xpc_dictionary_set_BOOL(v0, (const char *)*MEMORY[0x24BDAC598], 1);
  if (*MEMORY[0x24BDAC6D8])
  {
    xpc_dictionary_set_BOOL(v0, (const char *)*MEMORY[0x24BDAC6D8], 1);
    xpc_dictionary_set_string(v0, (const char *)*MEMORY[0x24BDAC698], (const char *)*MEMORY[0x24BDAC6A8]);
    v1 = objc_allocWithZone(MEMORY[0x24BE313D0]);
    v2 = (void *)sub_23B1C63BC();
    objc_msgSend(v1, sel_initWithLabel_criteria_, v2, v0);

    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_23AB6ED58()
{
  uint64_t v0;

  sub_23AB6ED74();
  qword_2542EDE08 = v0;
}

void sub_23AB6ED74()
{
  xpc_object_t v0;
  id v1;
  void *v2;

  v0 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v0, (const char *)*MEMORY[0x24BDAC5B8], 0);
  xpc_dictionary_set_int64(v0, (const char *)*MEMORY[0x24BDAC5D8], 0);
  if (*MEMORY[0x24BDAC6C0])
  {
    xpc_dictionary_set_BOOL(v0, (const char *)*MEMORY[0x24BDAC6C0], 1);
    xpc_dictionary_set_string(v0, (const char *)*MEMORY[0x24BDAC698], (const char *)*MEMORY[0x24BDAC6A8]);
    v1 = objc_allocWithZone(MEMORY[0x24BE313D0]);
    v2 = (void *)sub_23B1C63BC();
    objc_msgSend(v1, sel_initWithLabel_criteria_, v2, v0);

    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_23AB6EE70()
{
  unint64_t v0;

  v0 = sub_23B1C7118();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

void sub_23AB6EEB8()
{
  _s9SQLFieldsOMa();
}

uint64_t sub_23AB6EEDC()
{
  uint64_t v0;
  uint64_t v1;

  sub_23B1C7310();
  swift_allocObject();
  v0 = sub_23B1C6728();
  *(_WORD *)v1 = 256;
  *(_BYTE *)(v1 + 2) = 2;
  return sub_23AD7D55C(v0);
}

uint64_t sub_23AB6EF28(char a1)
{
  if (!a1)
    return 1684957547;
  if (a1 == 1)
    return 0x64695F6D657469;
  return 0x657079745F626F6ALL;
}

uint64_t sub_23AB6EF78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B8613CC](&unk_23B1CFFF8, a3);
  return sub_23B1C73B8();
}

uint64_t sub_23AB6EFCC(uint64_t a1)
{
  MEMORY[0x23B8613CC](&unk_23B1CFFF8, a1);
  return sub_23B1C6698();
}

uint64_t sub_23AB6F018()
{
  MEMORY[0x23B8613CC](&unk_23B1CFFF8);
  return sub_23B1C66B0();
}

uint64_t sub_23AB6F068()
{
  MEMORY[0x23B8613CC](&unk_23B1CFFF8);
  return sub_23B1C66A4();
}

uint64_t sub_23AB6F0B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23AB6EE70();
  *a1 = result;
  return result;
}

uint64_t sub_23AB6F0E4@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_23AB6EF28(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_23AB6F10C()
{
  sub_23AB6EEB8();
}

uint64_t sub_23AB6F12C(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t sub_23AB6F13C(uint64_t a1)
{
  MEMORY[0x23B8613CC](&unk_23B1CFFF8, a1);
  MEMORY[0x23B8613CC](&unk_23B1CFE4C, a1);
  return sub_23AFDF4E0();
}

void sub_23AB6F190(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_23B1C6C98();
  MEMORY[0x24BDAC7A8](v5);
  if (a1)
  {
    if (a1 == 1)
      sub_23AFE9C24(a3);
    sub_23AFE9D34(a3);
  }
  sub_23AFE9B98(a3);
}

uint64_t sub_23AB6F38C@<X0>(char a1@<W0>, void *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t *v28;
  uint64_t *boxed_opaque_existential_0;
  _QWORD v30[6];
  unsigned int v31;

  v30[0] = a8;
  v31 = a3;
  v14 = sub_23B1C6C98();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v30 - v16;
  if (!a1)
  {
    v30[2] = a4;
    v30[3] = a5;
    v30[4] = a6;
    v30[5] = a7;
    type metadata accessor for ThrottlingKey.Kind();
  }
  if (a1 == 1)
  {
    v18 = *(_QWORD *)(a6 + 40);
    v19 = a2;
    v20 = v30[1];
    result = sub_23AA9A9B8(v19, v31, a4, v18, (uint64_t)v17);
    if (!v20)
    {
      v22 = *(_QWORD *)(a4 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v17, 1, a4) == 1)
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
        v23 = v30[0];
        *(_OWORD *)v30[0] = 0u;
        *(_OWORD *)(v23 + 16) = 0u;
      }
      else
      {
        v28 = (uint64_t *)v30[0];
        *(_QWORD *)(v30[0] + 24) = a4;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v28);
        return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v22 + 32))(boxed_opaque_existential_0, v17, a4);
      }
    }
  }
  else
  {
    v24 = v31;
    result = (uint64_t)objc_msgSend(a2, sel_isNullAtIndex_, v31);
    if ((result & 1) != 0)
    {
      v25 = v30[0];
      *(_OWORD *)v30[0] = 0u;
      *(_OWORD *)(v25 + 16) = 0u;
    }
    else
    {
      result = sub_23B06F1C0((uint64_t)objc_msgSend(a2, sel_longAtIndex_, v24));
      v26 = (_BYTE *)v30[0];
      if (result == 70)
      {
        sub_23AB7B620();
        swift_allocError();
        *v27 = 0;
        return swift_willThrow();
      }
      else
      {
        *(_QWORD *)(v30[0] + 24) = &type metadata for JobCode;
        *v26 = result;
      }
    }
  }
  return result;
}

void sub_23AB6F5BC()
{
  type metadata accessor for ThrottlingKey.Kind();
}

uint64_t sub_23AB6F60C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata3;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  void (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[96];

  v5 = sub_23B1C6C98();
  v6 = sub_23B1C6C98();
  v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542DE260);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  *(_QWORD *)(v4 - 144) = *(_QWORD *)(TupleTypeMetadata3 - 8);
  *(_QWORD *)(v4 - 136) = TupleTypeMetadata3;
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata3);
  *(_QWORD *)(v4 - 128) = &v26[-v10];
  *(_QWORD *)(v4 - 120) = *(_QWORD *)(v6 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  *(_QWORD *)(v4 - 152) = &v26[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  *(_BYTE *)(v4 - 112) = 0;
  result = sub_23AA94830(v4 - 112, v5, v2, v5, v1);
  if (!v3)
  {
    v14 = *(_BYTE *)(v4 - 65);
    *(_BYTE *)(v4 - 112) = 1;
    sub_23AA94830(v4 - 112, v6, v2, v6, v1);
    *(_BYTE *)(v4 - 112) = 2;
    sub_23AA94830(v4 - 112, v7, v2, v7, v1);
    v15 = *(unsigned __int8 *)(v4 - 66);
    v17 = *(_QWORD *)(v4 - 136);
    v16 = *(_BYTE **)(v4 - 128);
    v18 = &v16[*(int *)(v17 + 48)];
    v19 = *(int *)(v17 + 64);
    *v16 = v14;
    v20 = *(void (**)(void))(*(_QWORD *)(v4 - 120) + 32);
    *(_QWORD *)(v4 - 192) = v18;
    v20();
    v16[v19] = v15;
    if ((v14 & 1) == 0)
    {
      v21 = *(_QWORD *)(v0 - 8);
      if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(v21 + 48))(*(_QWORD *)(v4 - 192), 1, v0) != 1)
      {
        v22 = *(_QWORD *)(v4 - 152);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 120) + 16))(v22, *(_QWORD *)(v4 - 192), v6);
        if (v15 != 70)
        {
          v24 = *(_QWORD *)(v4 - 184);
          *(_QWORD *)(v4 - 112) = v0;
          *(_QWORD *)(v4 - 104) = v24;
          v25 = *(_QWORD *)(v4 - 168);
          *(_QWORD *)(v4 - 96) = *(_QWORD *)(v4 - 176);
          *(_QWORD *)(v4 - 88) = v25;
          type metadata accessor for ReconciliationID();
        }
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v0);
      }
    }
    sub_23AB7B620();
    swift_allocError();
    *v23 = 0;
    swift_willThrow();
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v4 - 144) + 8))(*(_QWORD *)(v4 - 128), v17);
  }
  return result;
}

void sub_23AB6F88C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v5 = v3;
  v6 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32);
  v8 = *(_QWORD *)(v4 - 160);
  v7(v8, v2, v0);
  swift_storeEnumTagMultiPayload();
  *(_BYTE *)(v8 + v6) = v5;
  JUMPOUT(0x23AB6F774);
}

void sub_23AB6F8F0(char *a1, uint64_t a2, uint64_t a3)
{
  sub_23AB6F190(*a1, a2, a3);
}

uint64_t sub_23AB6F908@<X0>(char *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  return sub_23AB6F38C(*a1, a2, a3, a4[2], a4[3], a4[4], a4[5], a5);
}

void sub_23AB6F92C()
{
  sub_23AB6F5BC();
}

id sub_23AB6F954()
{
  void *v0;

  swift_bridgeObjectRetain();
  v0 = (void *)sub_23B1C63BC();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23AB6F994(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 88) = sub_23B1C63E0();
  *(_QWORD *)(a1 + 96) = v2;
  swift_retain();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AB6F9D0()
{
  uint64_t v0;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 120) & 1) == 0)
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 160));
  if (*(_QWORD *)(v0 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_23B1C6BCC();
    swift_unknownObjectRelease();
    if (*(_QWORD *)(v0 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_23B1C6BA8();
      swift_unknownObjectRelease();
    }
  }
  *(_QWORD *)(v0 + 16) = 0;
  result = swift_unknownObjectRelease();
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 1;
  return result;
}

id sub_23AB6FA7C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  id result;
  char v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(const char *, uint64_t, uint64_t, _QWORD, uint64_t (*)(), _QWORD, uint64_t (*)(_QWORD), _QWORD, void (*)(), uint64_t);

  v2 = v1;
  v4 = objc_msgSend(a1, sel_label);
  v5 = sub_23B1C63E0();
  v7 = v6;

  if (qword_2542E5068 != -1)
    swift_once();
  v8 = objc_msgSend((id)qword_2542EDE20, sel_label);
  v9 = sub_23B1C63E0();
  v11 = v10;

  if (v9 == v5 && v11 == v7)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v13 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return objc_msgSend((id)qword_2542EDE20, sel_markWatcherDone_, v2);
  }
  if (v5 == 0xD000000000000025 && v7 == 0x800000023B1F8D70)
  {
    result = (id)swift_bridgeObjectRelease();
  }
  else
  {
    v15 = sub_23B1C7388();
    result = (id)swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
      sub_23AFF1BE0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/SQLThrottler.swift", 131, 2, 246, a1);
  }
  v16 = *(uint64_t (**)(uint64_t))(v2 + 144);
  if (v16)
  {
    v17 = swift_retain();
    v18 = v16(v17);
    result = (id)sub_23AAB7948((uint64_t)v16);
    if (v18)
    {
      v19 = *(void (**)(const char *, uint64_t, uint64_t, _QWORD, uint64_t (*)(), _QWORD, uint64_t (*)(_QWORD), _QWORD, void (*)(), uint64_t))(*(_QWORD *)v18 + 400);
      swift_retain();
      v19("sharedSchedulerCanRun(_:)", 25, 2, 0, sub_23AABA6B4, 0, nullsub_1, 0, sub_23AB7C670, v2);
      swift_release();
      return (id)swift_release();
    }
  }
  return result;
}

void sub_23AB6FCD0(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = sub_23B1C6C98();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v6 - v4;
  *(_BYTE *)(a1 + 170) = 0;
  if (qword_2542E6F00 != -1)
    swift_once();
  objc_msgSend((id)qword_2542EDE08, sel_removeWatcher_, a1);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v5, 1, 1, AssociatedTypeWitness);
  sub_23AB6FDF4(9);
}

void sub_23AB6FDF4(char a1)
{
  uint64_t v2;
  char v3;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E2110);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_23B1CA760;
  *(_BYTE *)(v2 + 32) = a1;
  if (a1 == 11)
  {
    v2 = (uint64_t)sub_23AF9860C((char *)1, 2, 1, (char *)v2);
    *(_QWORD *)(v2 + 16) = 2;
    v3 = 12;
  }
  else
  {
    if (a1 != 5)
      goto LABEL_6;
    v2 = (uint64_t)sub_23AF9860C((char *)1, 2, 1, (char *)v2);
    *(_QWORD *)(v2 + 16) = 2;
    v3 = 10;
  }
  *(_BYTE *)(v2 + 33) = v3;
LABEL_6:
  MEMORY[0x24BDAC7A8](v2);
  sub_23AB71AA4();
}

uint64_t sub_23AB6FF1C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  swift_retain();
  sub_23AB6FA7C(v3);

  return swift_release();
}

id sub_23AB6FF5C()
{
  uint64_t v0;
  id result;

  if (*(_BYTE *)(v0 + 169) == 1 && *(_BYTE *)(v0 + 120) == 1)
  {
    *(_BYTE *)(v0 + 169) = 0;
    if (qword_2542E5068 != -1)
      swift_once();
    return objc_msgSend((id)qword_2542EDE20, sel_removeWatcher_, v0);
  }
  return result;
}

void sub_23AB6FFCC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void sub_23AB6FFD8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  id v38;
  char isEscapingClosureAtFileLocation;
  char *v40;
  id v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  void *v46;
  uint64_t v47;
  id v48;
  char *v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  void *v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  id v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  uint64_t (*v82)(uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  BOOL v102;
  dispatch_time_t v103;
  dispatch_time_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  id aBlock;
  unint64_t v127;
  id (*v128)(uint64_t, void *);
  void *v129;
  uint64_t (*v130)();
  uint64_t v131;
  uint64_t v132;

  v2 = v1;
  v3 = v0;
  v132 = *MEMORY[0x24BDAC8D0];
  v115 = *(_QWORD *)v0;
  v4 = sub_23B1C60A4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v116 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23B1C6B78();
  v118 = *(_QWORD *)(v7 - 8);
  v119 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v117 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23B1C5BDC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23B1C5E4C();
  v120 = *(_QWORD *)(v13 - 8);
  v121 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v105 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v27 = (char *)&v105 - v26;
  if (v3[105] != 1)
  {
    v111 = v22;
    v107 = v25;
    v108 = v24;
    v109 = v5;
    v110 = v4;
    v112 = v23;
    v113 = v2;
    v34 = (void *)*((_QWORD *)v3 + 3);
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = sub_23AB7C18C;
    *(_QWORD *)(v35 + 24) = v3;
    v130 = sub_23AA8A65C;
    v131 = v35;
    aBlock = (id)MEMORY[0x24BDAC760];
    v127 = 1107296256;
    v128 = sub_23AA9432C;
    v129 = &block_descriptor_123;
    v36 = _Block_copy(&aBlock);
    v114 = v3;
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v37 = (char *)objc_msgSend(v34, sel_fetchSwift_error_, v36, &aBlock);
    _Block_release(v36);
    v38 = aBlock;
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      if (!v37)
      {
        sub_23B1C587C();

        swift_willThrow();
        swift_release();
        return;
      }
      v40 = v37;
      if (!objc_msgSend(v37, sel_next)
        || (objc_msgSend(v37, sel_isNullAtIndex_, 0) & 1) != 0)
      {
        v41 = (id)fpfs_current_or_default_log();
        sub_23B1C5E58();
        v42 = v114;
        swift_retain();
        v43 = sub_23B1C5E40();
        v44 = sub_23B1C6A94();
        if (os_log_type_enabled(v43, v44))
        {
          v45 = (uint8_t *)swift_slowAlloc();
          v46 = (void *)swift_slowAlloc();
          aBlock = v46;
          *(_DWORD *)v45 = 136446210;
          if (v42[32])
            v47 = 20550;
          else
            v47 = 21318;
          v123 = sub_23AABEC68(v47, 0xE200000000000000, (uint64_t *)&aBlock);
          sub_23B1C6CBC();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_23AA66000, v43, v44, "⏳  %{public}s: no pending throttles", v45, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x23B8614BC](v46, -1, -1);
          MEMORY[0x23B8614BC](v45, -1, -1);

        }
        else
        {

          swift_release();
        }
        (*(void (**)(char *, uint64_t))(v120 + 8))(v16, v121);
        sub_23AB6F9D0();
LABEL_21:
        swift_release();

        return;
      }
      v122 = objc_msgSend(v37, sel_longAtIndex_, 0);
      if (v122 == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        v48 = (id)fpfs_current_or_default_log();
        v49 = v111;
        sub_23B1C5E58();
        v50 = v114;
        swift_retain();
        v51 = sub_23B1C5E40();
        v52 = sub_23B1C6A94();
        if (os_log_type_enabled(v51, v52))
        {
          v53 = (uint8_t *)swift_slowAlloc();
          v54 = (void *)swift_slowAlloc();
          aBlock = v54;
          *(_DWORD *)v53 = 136446210;
          if (v50[32])
            v55 = 20550;
          else
            v55 = 21318;
          v123 = sub_23AABEC68(v55, 0xE200000000000000, (uint64_t *)&aBlock);
          sub_23B1C6CBC();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_23AA66000, v51, v52, "⏳  %{public}s: only infinite throttles", v53, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x23B8614BC](v54, -1, -1);
          MEMORY[0x23B8614BC](v53, -1, -1);

        }
        else
        {

          swift_release();
        }
        (*(void (**)(char *, uint64_t))(v120 + 8))(v49, v121);
        sub_23AB6F9D0();
        goto LABEL_21;
      }
      sub_23B1C5BD0();
      sub_23B1C5B94();
      v57 = v56;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v58 = v57 * 1000000000.0;
      if ((~COERCE__INT64(v57 * 1000000000.0) & 0x7FF0000000000000) != 0)
      {
        v59 = v112;
        if (v58 > -9.22337204e18)
        {
          v12 = v114;
          if (v58 < 9.22337204e18)
          {
            v60 = (uint64_t)v58;
            v61 = v122;
            if ((v114[120] & 1) == 0 && v122 == *((id *)v114 + 14))
            {
              v62 = (id)fpfs_current_or_default_log();
              v63 = v108;
              sub_23B1C5E58();
              swift_retain();
              v64 = sub_23B1C5E40();
              v65 = sub_23B1C6A94();
              if (!os_log_type_enabled(v64, v65))
              {

                swift_release();
                (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v63, v121);
                swift_release();
                return;
              }
              v66 = swift_slowAlloc();
              v67 = v60;
              v68 = swift_slowAlloc();
              v125 = v68;
              *(_DWORD *)v66 = 136446466;
              if (v12[32])
                v69 = 20550;
              else
                v69 = 21318;
              aBlock = (id)sub_23AABEC68(v69, 0xE200000000000000, &v125);
              sub_23B1C6CBC();
              swift_release();
              swift_bridgeObjectRelease();
              *(_WORD *)(v66 + 12) = 2082;
              swift_beginAccess();
              v70 = (uint64_t)v122 - v67;
              if (!__OFSUB__(v122, v67))
              {
                v106 = v40;
                if ((v70 & 0x8000000000000000) == 0)
                {
                  v71 = 0;
                  v72 = 0xE000000000000000;
LABEL_80:
                  sub_23AF3E770(v70);
                  v123 = v71;
                  v124 = v72;
                  sub_23B1C64F4();
                  swift_bridgeObjectRelease();
                  v123 = sub_23AABEC68(v123, v124, &v125);
                  sub_23B1C6CBC();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_23AA66000, v64, v65, "⏳  %{public}s: schedule throttling unchanged in %{public}s", (uint8_t *)v66, 0x16u);
                  swift_arrayDestroy();
                  MEMORY[0x23B8614BC](v68, -1, -1);
                  MEMORY[0x23B8614BC](v66, -1, -1);

                  (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v108, v121);
                  swift_release();
                  return;
                }
                v102 = __OFSUB__(0, v70);
                v70 = v67 - (_QWORD)v122;
                if (!v102)
                {
                  v72 = 0xE100000000000000;
                  v71 = 45;
                  goto LABEL_80;
                }
                __break(1u);
LABEL_92:
                __break(1u);
                return;
              }
LABEL_90:
              __break(1u);
            }
            if ((v114[136] & 1) == 0 && *((_QWORD *)v114 + 16) >= (uint64_t)v122)
            {
              v73 = (id)fpfs_current_or_default_log();
              v74 = v107;
              sub_23B1C5E58();
              swift_retain();
              v75 = sub_23B1C5E40();
              v76 = sub_23B1C6A94();
              if (os_log_type_enabled(v75, v76))
              {
                v77 = (uint8_t *)swift_slowAlloc();
                v78 = (void *)swift_slowAlloc();
                v111 = (char *)v60;
                v79 = v78;
                aBlock = v78;
                *(_DWORD *)v77 = 136446210;
                if (v12[32])
                  v80 = 20550;
                else
                  v80 = 21318;
                v123 = sub_23AABEC68(v80, 0xE200000000000000, (uint64_t *)&aBlock);
                sub_23B1C6CBC();
                swift_release();
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_23AA66000, v75, v76, "⏳  %{public}s: asking to reschedule throttling at the same time as before, adding 1s of leeway", v77, 0xCu);
                swift_arrayDestroy();
                v81 = v79;
                v60 = (uint64_t)v111;
                MEMORY[0x23B8614BC](v81, -1, -1);
                MEMORY[0x23B8614BC](v77, -1, -1);

              }
              else
              {

                swift_release();
              }
              (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v74, v121);
              v61 = (id)(v60 + 1000000000);
              v59 = v112;
              if (__OFADD__(v60, 1000000000))
              {
                __break(1u);
                goto LABEL_89;
              }
              v122 = (id)(v60 + 1000000000);
            }
            v106 = v40;
            dispatch_group_enter(*((dispatch_group_t *)v12 + 20));
            sub_23AB6F9D0();
            *((_QWORD *)v12 + 14) = v61;
            v12[120] = 0;
            v82 = (uint64_t (*)(uint64_t))*((_QWORD *)v12 + 18);
            if (!v82)
              goto LABEL_92;
            v83 = swift_retain();
            v84 = v82(v83);
            v85 = sub_23AAB7948((uint64_t)v82);
            if (v84)
            {
              v86 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 168))(v85);
              swift_release();
            }
            else
            {
              v86 = 0;
            }
            sub_23AAB62D8();
            aBlock = (id)MEMORY[0x24BEE4AF8];
            sub_23AAB6314();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1EF0);
            sub_23AAB5A28((unint64_t *)&qword_2542E1F00, (uint64_t *)&unk_2542E1EF0, MEMORY[0x24BEE12C8]);
            v16 = v117;
            v87 = v119;
            sub_23B1C6DE8();
            v88 = sub_23B1C6B84();

            (*(void (**)(char *, uint64_t))(v118 + 8))(v16, v87);
            *((_QWORD *)v12 + 2) = v88;
            swift_unknownObjectRelease();
            if (*((_QWORD *)v12 + 2))
            {
              swift_getObjectType();
              v89 = swift_allocObject();
              swift_weakInit();
              v90 = swift_allocObject();
              v91 = v115;
              *(_QWORD *)(v90 + 16) = *(_QWORD *)(v115 + 80);
              *(_OWORD *)(v90 + 24) = *(_OWORD *)(v91 + 88);
              *(_QWORD *)(v90 + 40) = *(_QWORD *)(v91 + 104);
              *(_QWORD *)(v90 + 48) = v89;
              swift_unknownObjectRetain();
              swift_retain();
              v92 = (uint64_t)v116;
              sub_23ADFA2F4();
              sub_23AA78928(0, v92, (uint64_t)sub_23AB7C1EC, v90);
              swift_unknownObjectRelease();
              swift_release();
              (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v92, v110);
              swift_release();
            }
            v93 = (id)fpfs_current_or_default_log();
            sub_23B1C5E58();
            swift_retain();
            v94 = sub_23B1C5E40();
            v95 = sub_23B1C6A88();
            if (!os_log_type_enabled(v94, v95))
            {

              swift_release();
              (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v59, v121);
              v16 = v106;
LABEL_70:
              if (!*((_QWORD *)v12 + 2))
                goto LABEL_74;
              swift_getObjectType();
              swift_unknownObjectRetain();
              v103 = dispatch_time(0x8000000000000000, 0);
              swift_beginAccess();
              if (!__OFSUB__(v122, v60))
              {
                v104 = dispatch_time(v103, (int64_t)v122 - v60);
                sub_23AFAA444(v104);
                swift_unknownObjectRelease();
                if (*((_QWORD *)v12 + 2))
                {
                  swift_getObjectType();
                  swift_unknownObjectRetain();
                  sub_23B1C6BB4();
                  swift_unknownObjectRelease();
                }
LABEL_74:
                if ((v12[169] & 1) != 0)
                {
LABEL_77:
                  swift_release();

                  return;
                }
                v12[169] = 1;
                if (qword_2542E5068 == -1)
                {
LABEL_76:
                  objc_msgSend((id)qword_2542EDE20, sel_addWatcher_, v12);
                  goto LABEL_77;
                }
LABEL_87:
                swift_once();
                goto LABEL_76;
              }
              goto LABEL_85;
            }
            v96 = swift_slowAlloc();
            v97 = swift_slowAlloc();
            v125 = v97;
            *(_DWORD *)v96 = 136446466;
            if (v12[32])
              v98 = 20550;
            else
              v98 = 21318;
            aBlock = (id)sub_23AABEC68(v98, 0xE200000000000000, &v125);
            sub_23B1C6CBC();
            swift_release();
            swift_bridgeObjectRelease();
            *(_WORD *)(v96 + 12) = 2082;
            swift_beginAccess();
            v99 = (uint64_t)v122 - v60;
            if (__OFSUB__(v122, v60))
              goto LABEL_86;
            v111 = (char *)v60;
            if ((v99 & 0x8000000000000000) == 0)
            {
              v100 = 0;
              v101 = 0xE000000000000000;
LABEL_69:
              sub_23AF3E770(v99);
              aBlock = (id)v100;
              v127 = v101;
              sub_23B1C64F4();
              swift_bridgeObjectRelease();
              aBlock = (id)sub_23AABEC68((uint64_t)aBlock, v127, &v125);
              sub_23B1C6CBC();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_23AA66000, v94, v95, "⏳ %{public}s: schedule throttling handling in %{public}s", (uint8_t *)v96, 0x16u);
              swift_arrayDestroy();
              MEMORY[0x23B8614BC](v97, -1, -1);
              MEMORY[0x23B8614BC](v96, -1, -1);

              (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v112, v121);
              v12 = v114;
              v16 = v106;
              v60 = (uint64_t)v111;
              goto LABEL_70;
            }
            v102 = __OFSUB__(0, v99);
            v99 = v60 - (_QWORD)v122;
            if (!v102)
            {
              v101 = 0xE100000000000000;
              v100 = 45;
              goto LABEL_69;
            }
LABEL_89:
            __break(1u);
            goto LABEL_90;
          }
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
          goto LABEL_87;
        }
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
    }
    __break(1u);
    goto LABEL_83;
  }
  v28 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  swift_retain();
  v29 = sub_23B1C5E40();
  v30 = sub_23B1C6A94();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    v32 = (void *)swift_slowAlloc();
    aBlock = v32;
    *(_DWORD *)v31 = 136446210;
    if (v3[32])
      v33 = 20550;
    else
      v33 = 21318;
    v123 = sub_23AABEC68(v33, 0xE200000000000000, (uint64_t *)&aBlock);
    sub_23B1C6CBC();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23AA66000, v29, v30, "⏳  %{public}s: retries are disabled", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v32, -1, -1);
    MEMORY[0x23B8614BC](v31, -1, -1);

  }
  else
  {

    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v120 + 8))(v27, v121);
}

id sub_23AB71138()
{
  uint64_t v0;
  id result;

  if ((*(_BYTE *)(v0 + 170) & 1) == 0)
  {
    *(_BYTE *)(v0 + 170) = 1;
    if (qword_2542E6F00 != -1)
      swift_once();
    return objc_msgSend((id)qword_2542EDE08, sel_addWatcher_, v0);
  }
  return result;
}

uint64_t sub_23AB7119C()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AB71284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double v4;
  double v5;
  uint64_t result;
  double v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = sub_23B1C5BDC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B1C5BD0();
  sub_23B1C5B94();
  v5 = v4;
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v7 = v5 * 1000000000.0;
  if ((~COERCE__INT64(v5 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  v8 = (uint64_t)v7;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v10 = *(_QWORD *)(Strong + 112);
    v11 = *(_BYTE *)(Strong + 120);
    swift_release();
    v12 = v10 <= v8 ? v8 : v10;
    if ((v11 & 1) == 0)
      v8 = v12;
  }
  swift_beginAccess();
  v13 = swift_weakLoadStrong();
  if (v13)
  {
    *(_QWORD *)(v13 + 128) = v8;
    *(_BYTE *)(v13 + 136) = 0;
    swift_release();
  }
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_23AB71404(v8);
    return swift_release();
  }
  return result;
}

uint64_t sub_23AB71404(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = sub_23B1C5E4C();
  v4 = MEMORY[0x24BDAC7A8](v3);
  result = MEMORY[0x24BDAC7A8](v4);
  v6 = *(uint64_t (**)(uint64_t))(v1 + 144);
  if (v6)
  {
    v7 = swift_retain();
    v8 = v6(v7);
    result = sub_23AAB7948((uint64_t)v6);
    if (v8)
    {
      MEMORY[0x24BDAC7A8](result);
      *(&v10 - 2) = v1;
      *(&v10 - 1) = a1;
      v9 = (*(uint64_t (**)(const char *, uint64_t, uint64_t, void (*)()))(*(_QWORD *)v8 + 408))("trigger(now:)", 13, 2, sub_23AB7C1FC);
      sub_23AB6FFD8(v9);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_23AB71A94()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 120) & 1) == 0;
}

void sub_23AB71AA4()
{
  type metadata accessor for PersistenceTrigger();
}

uint64_t sub_23AB72B14(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  a2(a1, a4);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0x203D206574617473;
}

void sub_23AB72BFC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  id v30;
  uint64_t v32;
  char v33;
  uint64_t (*v34)();
  void *v35;
  id (*v36)(uint64_t, void *);
  uint64_t v37;
  char v38;
  id aBlock;
  uint64_t v40;
  id (*v41)(uint64_t, void *);
  void *v42;
  uint64_t (*v43)();
  void *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v8 = *(void **)(a3 + 24);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a3;
  v9[3] = a1;
  v9[4] = a2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_23AB7C688;
  *(_QWORD *)(v10 + 24) = v9;
  v43 = sub_23AA8A65C;
  v44 = (void *)v10;
  aBlock = (id)MEMORY[0x24BDAC760];
  v40 = 1107296256;
  v41 = sub_23AA9432C;
  v42 = &block_descriptor_193;
  v11 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v12 = objc_msgSend(v8, sel_fetchSwift_error_, v11, &aBlock);
  _Block_release(v11);
  v13 = aBlock;
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v8 & 1) != 0)
LABEL_18:
    __break(1u);
  if (v12)
  {
    if (objc_msgSend(v12, sel_next))
    {
      v30 = v12;
      while (1)
      {
        v14 = (void *)MEMORY[0x23B8601A8]();
        v15 = sub_23AD7F1F4();
        v16 = sub_23AE7EB54(v15, v12, 0);
        if (v4)
          break;
        v18 = v16;
        v19 = v17;
        swift_bridgeObjectRelease();
        v20 = *((_QWORD *)sub_23AD7F1F4() + 2);
        swift_bridgeObjectRelease();
        if (v20 >> 31)
        {
          __break(1u);
          goto LABEL_18;
        }
        v21 = sub_23AD7ECFC();
        sub_23AE7990C(v12, (uint64_t)v21, v20, (uint64_t)&aBlock);
        swift_bridgeObjectRelease();
        v38 = (char)aBlock;
        v36 = v41;
        v37 = v40;
        v22 = v44;
        v34 = v43;
        v35 = v42;
        v33 = v45;
        v23 = v47;
        v32 = v46;
        v24 = *a4;
        sub_23AB5692C(v18, v19, BYTE1(v19) & 1);
        v25 = v22;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a4 = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v24 = sub_23AF99464(0, v24[2] + 1, 1, v24);
          *a4 = v24;
        }
        v28 = v24[2];
        v27 = v24[3];
        if (v28 >= v27 >> 1)
        {
          v24 = sub_23AF99464((_QWORD *)(v27 > 1), v28 + 1, 1, v24);
          *a4 = v24;
        }
        v24[2] = v28 + 1;
        v29 = &v24[11 * v28];
        v29[4] = v18;
        *((_BYTE *)v29 + 40) = v19;
        *((_BYTE *)v29 + 41) = BYTE1(v19) & 1;
        *((_BYTE *)v29 + 42) = BYTE2(v19);
        *((_BYTE *)v29 + 48) = v38;
        v29[7] = v37;
        v29[8] = v36;
        v29[9] = v35;
        v29[10] = v34;
        v29[11] = v22;
        *((_BYTE *)v29 + 96) = v33;
        v29[13] = v32;
        v29[14] = v23;

        swift_bridgeObjectRelease();
        sub_23AB7C6B4(v18, v19, BYTE1(v19) & 1);
        objc_autoreleasePoolPop(v14);
        v12 = v30;
        if ((objc_msgSend(v30, sel_next) & 1) == 0)
          goto LABEL_16;
      }
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v14);
    }
LABEL_16:
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
}

void sub_23AB72FF8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  id v30;
  uint64_t v32;
  char v33;
  uint64_t (*v34)();
  void *v35;
  id (*v36)(uint64_t, void *);
  uint64_t v37;
  char v38;
  id aBlock;
  uint64_t v40;
  id (*v41)(uint64_t, void *);
  void *v42;
  uint64_t (*v43)();
  void *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v8 = *(void **)(a3 + 24);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a3;
  v9[3] = a1;
  v9[4] = a2;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_23AB7C688;
  *(_QWORD *)(v10 + 24) = v9;
  v43 = sub_23AA8A65C;
  v44 = (void *)v10;
  aBlock = (id)MEMORY[0x24BDAC760];
  v40 = 1107296256;
  v41 = sub_23AA9432C;
  v42 = &block_descriptor_183;
  v11 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v12 = objc_msgSend(v8, sel_fetchSwift_error_, v11, &aBlock);
  _Block_release(v11);
  v13 = aBlock;
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v8 & 1) != 0)
LABEL_18:
    __break(1u);
  if (v12)
  {
    if (objc_msgSend(v12, sel_next))
    {
      v30 = v12;
      while (1)
      {
        v14 = (void *)MEMORY[0x23B8601A8]();
        v15 = sub_23AD7F3D8();
        v16 = sub_23AE7EF58((uint64_t)v15, v12, 0);
        if (v4)
          break;
        v18 = (void *)v16;
        v19 = v17;
        swift_bridgeObjectRelease();
        v20 = *((_QWORD *)sub_23AD7F3D8() + 2);
        swift_bridgeObjectRelease();
        if (v20 >> 31)
        {
          __break(1u);
          goto LABEL_18;
        }
        v21 = sub_23AD7ECFC();
        sub_23AE7990C(v12, (uint64_t)v21, v20, (uint64_t)&aBlock);
        swift_bridgeObjectRelease();
        v38 = (char)aBlock;
        v36 = v41;
        v37 = v40;
        v22 = v44;
        v34 = v43;
        v35 = v42;
        v33 = v45;
        v23 = v47;
        v32 = v46;
        v24 = *a4;
        sub_23AA88218(v18, v19, BYTE1(v19) & 1);
        v25 = v22;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a4 = v24;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v24 = sub_23AF99478(0, v24[2] + 1, 1, v24);
          *a4 = v24;
        }
        v28 = v24[2];
        v27 = v24[3];
        if (v28 >= v27 >> 1)
        {
          v24 = sub_23AF99478((_QWORD *)(v27 > 1), v28 + 1, 1, v24);
          *a4 = v24;
        }
        v24[2] = v28 + 1;
        v29 = &v24[11 * v28];
        v29[4] = v18;
        *((_BYTE *)v29 + 40) = v19;
        *((_BYTE *)v29 + 41) = BYTE1(v19) & 1;
        *((_BYTE *)v29 + 42) = BYTE2(v19);
        *((_BYTE *)v29 + 48) = v38;
        v29[7] = v37;
        v29[8] = v36;
        v29[9] = v35;
        v29[10] = v34;
        v29[11] = v22;
        *((_BYTE *)v29 + 96) = v33;
        v29[13] = v32;
        v29[14] = v23;

        swift_bridgeObjectRelease();
        sub_23AA862DC(v18, v19, BYTE1(v19) & 1);
        objc_autoreleasePoolPop(v14);
        v12 = v30;
        if ((objc_msgSend(v30, sel_next) & 1) == 0)
          goto LABEL_16;
      }
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v14);
    }
LABEL_16:
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
}

uint64_t sub_23AB733F4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  a3(a1, a5);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

void sub_23AB73584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  _QWORD v10[13];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v19 = a1;
  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = sub_23B1C6C98();
  v13 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v10[12] = (char *)v10 - v5;
  v11 = sub_23B1C5E4C();
  v18 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v17 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = swift_getAssociatedTypeWitness();
  v16 = v2;
  v15 = v3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = swift_getAssociatedConformanceWitness();
  v12 = AssociatedTypeWitness;
  v20 = AssociatedTypeWitness;
  v21 = v7;
  v22 = AssociatedConformanceWitness;
  v23 = v9;
  type metadata accessor for ThrottlingKey();
}

void sub_23AB73718(uint64_t a1)
{
  uint64_t v1;

  v1 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v1);
  sub_23AB75364();
}

BOOL sub_23AB73770@<W0>(int a1@<W0>, BOOL a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)();
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned int v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  _QWORD *v40;
  void (*v41)(uint64_t, uint64_t, _QWORD *);
  NSObject *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  id v50;

  if (v3)
    return a2;
  *(_QWORD *)(v10 - 248) = v8;
  *(_QWORD *)(v10 - 328) = v7;
  *(_DWORD *)(v10 - 348) = a1;
  *(_QWORD *)(v10 - 344) = 0;
  v11 = v4;
  v12 = *(unsigned __int8 *)(v4 + 104);
  v13 = *(void **)(v4 + 24);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v15 = *(_QWORD *)(v10 - 240);
  *(_QWORD *)(v10 - 376) = v14;
  v14(v6, v15, v2);
  v16 = v2;
  v17 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  *(_QWORD *)(v10 - 336) = v13;
  *(_QWORD *)(v10 - 360) = v16;
  *(_QWORD *)(v10 - 384) = v6;
  *(_QWORD *)(v10 - 368) = v9;
  if (v12 != 1)
  {
    v29 = (char *)swift_allocObject();
    *((_QWORD *)v29 + 2) = *(_QWORD *)(v10 - 280);
    *((_QWORD *)v29 + 3) = v5;
    v30 = *(_QWORD *)(v10 - 248);
    *((_QWORD *)v29 + 4) = *(_QWORD *)(v10 - 272);
    *((_QWORD *)v29 + 5) = v30;
    *((_QWORD *)v29 + 6) = v11;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(&v29[v17], v6, v16);
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = sub_23AB7B7F4;
    *(_QWORD *)(v31 + 24) = v29;
    *(_QWORD *)(v10 - 248) = v29;
    *(_QWORD *)(v10 - 192) = sub_23AA8A65C;
    *(_QWORD *)(v10 - 184) = v31;
    *(_QWORD *)(v10 - 224) = MEMORY[0x24BDAC760];
    *(_QWORD *)(v10 - 216) = 1107296256;
    *(_QWORD *)(v10 - 208) = sub_23AA9432C;
    *(_QWORD *)(v10 - 200) = &block_descriptor_70;
    v32 = _Block_copy((const void *)(v10 - 224));
    v22 = v11;
    swift_retain();
    swift_retain();
    swift_release();
    *(_QWORD *)(v10 - 224) = 0;
    v33 = objc_msgSend(v13, sel_executeSwift_error_, v32, v10 - 224);
    _Block_release(v32);
    v24 = *(id *)(v10 - 224);
    LOBYTE(v32) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v32 & 1) == 0)
    {
      v25 = *(_QWORD *)(v10 - 256);
      v26 = *(_QWORD *)(v10 - 264);
      v27 = *(_QWORD *)(v10 - 328);
      if (v33)
      {
        *(_QWORD *)(v10 - 280) = 0;
        *(_QWORD *)(v10 - 272) = 0;
        v28 = sub_23AB7B7F4;
        goto LABEL_9;
      }
LABEL_15:
      sub_23B1C587C();

      swift_willThrow();
      swift_release();
      return a2;
    }
LABEL_22:
    __break(1u);
    JUMPOUT(0x23AB73FACLL);
  }
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = *(_QWORD *)(v10 - 280);
  *((_QWORD *)v18 + 3) = v5;
  v19 = *(_QWORD *)(v10 - 248);
  *((_QWORD *)v18 + 4) = *(_QWORD *)(v10 - 272);
  *((_QWORD *)v18 + 5) = v19;
  *((_QWORD *)v18 + 6) = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(&v18[v17], v6, v16);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = sub_23AB7B87C;
  *(_QWORD *)(v20 + 24) = v18;
  *(_QWORD *)(v10 - 272) = v18;
  *(_QWORD *)(v10 - 192) = sub_23AA8A65C;
  *(_QWORD *)(v10 - 184) = v20;
  *(_QWORD *)(v10 - 224) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v10 - 216) = 1107296256;
  *(_QWORD *)(v10 - 208) = sub_23AA9432C;
  *(_QWORD *)(v10 - 200) = &block_descriptor_80;
  v21 = _Block_copy((const void *)(v10 - 224));
  v22 = v11;
  swift_retain();
  swift_retain();
  swift_release();
  *(_QWORD *)(v10 - 224) = 0;
  v23 = objc_msgSend(v13, sel_executeSwift_error_, v21, v10 - 224);
  _Block_release(v21);
  v24 = *(id *)(v10 - 224);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v21 & 1) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v25 = *(_QWORD *)(v10 - 256);
  v26 = *(_QWORD *)(v10 - 264);
  v27 = *(_QWORD *)(v10 - 328);
  if (!v23)
    goto LABEL_15;
  v28 = 0;
  *(_QWORD *)(v10 - 248) = 0;
  *(_QWORD *)(v10 - 280) = sub_23AB7B87C;
LABEL_9:
  v34 = objc_msgSend(*(id *)(v10 - 336), sel_changes);
  v35 = v22;
  v36 = *(_QWORD *)(v10 - 304);
  v37 = *(_QWORD *)(v10 - 312);
  if (v34)
  {
    *(_QWORD *)(v10 - 392) = v28;
    v38 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v39 = v27;
    v40 = *(_QWORD **)(v10 - 360);
    v41 = *(void (**)(uint64_t, uint64_t, _QWORD *))(v10 - 376);
    v41(v39, *(_QWORD *)(v10 - 240), v40);
    swift_retain();
    v42 = sub_23B1C5E40();
    v43 = sub_23B1C6A94();
    *(_DWORD *)(v10 - 240) = v43;
    if (os_log_type_enabled(v42, (os_log_type_t)v43))
    {
      *(_QWORD *)(v10 - 408) = v42;
      v44 = swift_slowAlloc();
      v45 = swift_slowAlloc();
      *(_QWORD *)(v10 - 416) = v45;
      *(_QWORD *)(v10 - 224) = v45;
      *(_DWORD *)v44 = 136446722;
      if (*(_BYTE *)(v35 + 32))
        v46 = 20550;
      else
        v46 = 21318;
      *(_QWORD *)(v10 - 232) = sub_23AABEC68(v46, 0xE200000000000000, (uint64_t *)(v10 - 224));
      sub_23B1C6CBC();
      *(_QWORD *)(v10 - 400) = v35;
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2080;
      v47 = *(_QWORD *)(v10 - 328);
      v41(*(_QWORD *)(v10 - 384), v47, v40);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(v10 - 368) + 8))(v47, v40);
      sub_23AFEBFE8(v40);
    }
    (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)(v10 - 368) + 8))(*(_QWORD *)(v10 - 328), v40);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v37);
    v28 = *(void (**)())(v10 - 392);
  }
  if (*(_DWORD *)(v10 - 348) == 1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(*(_QWORD *)(v10 - 320), 1, 1, v36);
    sub_23AB6FDF4(1);
  }
  v49 = *(_QWORD *)(v10 - 280);
  v50 = objc_msgSend(*(id *)(v10 - 336), sel_changes);
  sub_23AAB7948(v49);
  sub_23AAB7948((uint64_t)v28);
  return v50 != 0;
}

unint64_t sub_23AB73FC8(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[9];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *(*v27)@<X0>(unsigned __int8 *@<X0>, _QWORD *@<X8>);
  uint64_t v28;
  void (*v29)(_QWORD *@<X0>, uint64_t *@<X8>);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v24 = a8;
  v25 = a6;
  v23 = a10;
  v26 = 0;
  v27 = (unsigned __int8 *(*)@<X0>(unsigned __int8 *@<X0>, _QWORD *@<X8>))0xE000000000000000;
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  v33 = 0xD000000000000015;
  v34 = 0x800000023B1F8C60;
  v14 = *a3;
  v31 = 40;
  v32 = 0xE100000000000000;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  v26 = v14;
  v27 = sub_23AB7B68C;
  v28 = 0;
  v29 = sub_23AAB63CC;
  v30 = v15;
  swift_bridgeObjectRetain_n();
  v16 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542DE798);
  sub_23AAB5A28(&qword_2542DE790, &qword_2542DE798, MEMORY[0x24BEE2B40]);
  sub_23AAA420C();
  sub_23B1C6644();
  swift_release();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (a5)
  {
    swift_bridgeObjectRetain();
    sub_23B1C6EFC();
    swift_bridgeObjectRelease();
    v26 = 0xD000000000000021;
    v27 = (unsigned __int8 *(*)@<X0>(unsigned __int8 *@<X0>, _QWORD *@<X8>))0x800000023B1F8C80;
    v17 = (void *)sub_23B1C63BC();
    v18 = objc_msgSend(v16, sel_bindStringParameter_, v17);

    sub_23B1C63E0();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  v19 = sub_23B1C64F4();
  MEMORY[0x24BDAC7A8](v19);
  v22[2] = a7;
  v22[3] = v24;
  v22[4] = a9;
  v22[5] = v23;
  v22[6] = v16;
  swift_getAssociatedTypeWitness();
  sub_23B1C6C98();
  sub_23B0C6934((void (*)(char *, char *))sub_23AB7BE68, (uint64_t)v22, MEMORY[0x24BEE4078], MEMORY[0x24BEE0D00], v20, (uint64_t)&v26);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return v33;
}

uint64_t sub_23AB7431C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  strcpy((char *)v9, "AND item_id = ");
  HIBYTE(v9[1]) = -18;
  swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v6 = swift_checkMetadataState();
  v5(a1, v6, v4);
  sub_23B1C64F4();
  result = swift_bridgeObjectRelease();
  v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

void sub_23AB74438()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

void sub_23AB74640(uint64_t a1, char a2)
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AB7B9A0(a2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

uint64_t sub_23AB747E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[28];

  v1 = sub_23B1C6DB8();
  v2 = MEMORY[0x23B8613CC](MEMORY[0x24BEE2190], v1);
  v5[10] = sub_23AD7E264((void (*)(char *, char *))sub_23AB7C060, (uint64_t)v5, v1, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v2, MEMORY[0x24BEE40A8], v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
  sub_23AAB5A28((unint64_t *)&qword_2542E74B0, &qword_2542E54E8, MEMORY[0x24BEE12B0]);
  sub_23B1C6338();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return *(_QWORD *)(v0 - 96);
}

void sub_23AB748E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23AB7BA3C(a1, a3);
}

uint64_t sub_23AB74924()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  result = sub_23B1C64F4();
  *v0 = v2;
  v0[1] = v3;
  return result;
}

uint64_t sub_23AB74968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t result;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  _QWORD v9[2];

  v0 = sub_23B1C5BDC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E7160 != -1)
    swift_once();
  result = sub_23AFE9F34((uint64_t)sub_23AB6FFCC, 0);
  if ((result & 1) != 0)
  {
    sub_23B1C5BD0();
    sub_23B1C5B94();
    v6 = v5;
    result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v7 = v6 * 1000000000.0;
    if ((~COERCE__INT64(v6 * 1000000000.0) & 0x7FF0000000000000) != 0)
    {
      if (v7 > -9.22337204e18)
      {
        if (v7 < 9.22337204e18)
        {
          MEMORY[0x24BDAC7A8](result);
          v9[-2] = v8;
          sub_23AB71AA4();
        }
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  return result;
}

uint64_t sub_23AB74ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[4];
  unint64_t v8;
  unint64_t v9;

  v7[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  v8 = 0xD000000000000013;
  v9 = 0x800000023B1F8E40;
  v7[3] = MEMORY[0x24BEE1768];
  v7[0] = a3;
  sub_23AA94C90((uint64_t)v7);
  v5 = v4;
  sub_23AA94C08((uint64_t)v7);
  if (v5)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v7[0] = 7;
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v8;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

void sub_23AB74C30()
{
  sub_23AB71AA4();
}

uint64_t sub_23AB74CD4(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[4];
  unint64_t v9;
  unint64_t v10;

  v8[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  v9 = 0xD000000000000013;
  v10 = 0x800000023B1F8E40;
  v8[3] = MEMORY[0x24BEE1768];
  v8[0] = a3;
  sub_23AA94C90((uint64_t)v8);
  v6 = v5;
  sub_23AA94C08((uint64_t)v8);
  if (v6)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23AB7B9A0(a2 & 1);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23AB74E1C()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  unsigned __int8 v3;
  void *v4;
  id v5;
  id v6;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 24);
  v2 = (_QWORD *)swift_allocObject();
  v3 = v2;
  v2[2] = sub_23AB7C21C;
  v2[3] = v0;
  aBlock[4] = sub_23AA8A65C;
  aBlock[5] = v2;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_136;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v5 = objc_msgSend(v1, sel_fetchSwift_error_, v4, aBlock);
  _Block_release(v4);
  v6 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v5)
  {
    v3 = objc_msgSend(v5, sel_next);
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v3 & 1;
}

void sub_23AB74FBC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  void *v4;
  id v5;
  id v6;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  sub_23AB6FFD8();
  if (!v1)
  {
    v2 = *(void **)(v0 + 24);
    v3 = (_QWORD *)swift_allocObject();
    v3[2] = sub_23AB7C4EC;
    v3[3] = v0;
    aBlock[4] = sub_23AA8A65C;
    aBlock[5] = v3;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_163;
    v4 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v5 = objc_msgSend(v2, sel_fetchSwift_error_, v4, aBlock);
    _Block_release(v4);
    v6 = aBlock[0];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    if (v5)
    {
      if (objc_msgSend(v5, sel_next))
        sub_23AB71138();
      swift_release();

    }
    else
    {
      sub_23B1C587C();

      swift_willThrow();
      swift_release();
    }
  }
}

uint64_t sub_23AB75164()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

void sub_23AB752BC()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = *(uint64_t (**)(uint64_t))(v0 + 144);
  if (v1)
  {
    v2 = v0;
    v3 = swift_retain();
    v4 = v1(v3);
    v5 = sub_23AAB7948((uint64_t)v1);
    if (v4)
    {
      v6 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 168))(v5);
      sub_23AC494B4(0, 0, (uint64_t)"invalidate()", 12, 2, (uint64_t)sub_23AB7C07C, v2);

      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_23AB75364()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

uint64_t sub_23AB7544C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  unsigned int v18;
  _BYTE v20[96];

  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = &v20[-v7];
  v10 = *(_QWORD *)(v4 - 160);
  v9 = *(_QWORD *)(v4 - 152);
  *(_QWORD *)(v4 - 144) = *(_QWORD *)(v10 + 24);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(&v20[-v7], v9, a1);
  v11 = (*(unsigned __int8 *)(v6 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = v1;
  *((_QWORD *)v12 + 3) = v3;
  *((_QWORD *)v12 + 4) = *(_QWORD *)(v4 - 168);
  *((_QWORD *)v12 + 5) = v2;
  *((_QWORD *)v12 + 6) = v10;
  (*(void (**)(char *, _BYTE *, uint64_t))(v6 + 32))(&v12[v11], v8, a1);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = sub_23AB7BF5C;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v4 - 104) = sub_23AA8A65C;
  *(_QWORD *)(v4 - 96) = v13;
  *(_QWORD *)(v4 - 136) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v4 - 128) = 1107296256;
  *(_QWORD *)(v4 - 120) = sub_23AA9432C;
  *(_QWORD *)(v4 - 112) = &block_descriptor_96;
  v14 = _Block_copy((const void *)(v4 - 136));
  swift_retain();
  swift_retain();
  swift_release();
  *(_QWORD *)(v4 - 136) = 0;
  v15 = objc_msgSend(*(id *)(v4 - 144), sel_fetchSwift_error_, v14, v4 - 136);
  _Block_release(v14);
  v16 = *(id *)(v4 - 136);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v14 & 1) != 0)
    __break(1u);
  if (v15)
  {
    if (objc_msgSend(v15, sel_next))
    {
      v17 = objc_msgSend(v15, sel_longAtIndex_, 0);

      v18 = sub_23AFEC560((unint64_t)v17);
      swift_release();
      if (v18 == 13)
        return 0;
      else
        return v18;
    }
    else
    {
      swift_release();

      return 0;
    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    return swift_release();
  }
}

void sub_23AB7569C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AB7BA3C(a3, a1);
}

uint64_t sub_23AB75750()
{
  uint64_t v1;

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return v1;
}

void sub_23AB75780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AB7BA3C(a3, a1);
}

uint64_t sub_23AB75840()
{
  uint64_t v1;

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return v1;
}

void sub_23AB75870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  char v8;
  uint64_t v9;
  _OWORD v10[4];
  uint64_t v11;

  *(_QWORD *)&v10[0] = 0;
  *((_QWORD *)&v10[0] + 1) = 0xE000000000000000;
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (qword_2542E05C0 != -1)
    swift_once();
  v10[2] = xmmword_2542EDBD0;
  v10[3] = *(_OWORD *)&byte_2542EDBE0;
  v11 = qword_2542EDBF0;
  v10[0] = xmmword_2542EDBB0;
  v10[1] = unk_2542EDBC0;
  sub_23AB7B810((uint64_t)v10);
  v5 = sub_23AD7ECFC();
  v6 = v5[2];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      v8 = *((_BYTE *)v5 + i + 32);
      sub_23AB7B810((uint64_t)v10);
      sub_23AFDE908(v8);
      swift_bridgeObjectRelease();
      sub_23AB7B844((uint64_t)v10);
    }
  }
  swift_bridgeObjectRelease();
  sub_23AD7ECFC();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0xE000000000000000;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2569E25D0);
  sub_23AB7BEDC();
  sub_23B1C6338();
  swift_release();
  swift_bridgeObjectRelease();
  sub_23AB7B844((uint64_t)v10);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AB7BA3C(a3, a1);
}

void sub_23AB75B58()
{
  type metadata accessor for PersistenceTrigger();
}

void sub_23AB75BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;

  *(_QWORD *)(v10 - 512) = a1;
  *(_QWORD *)(v10 - 520) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v10 - 528) = (char *)&a9 - v11;
  v12 = sub_23B1C5E4C();
  *(_QWORD *)(v10 - 384) = v12;
  *(_QWORD *)(v10 - 392) = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  *(_QWORD *)(v10 - 432) = (char *)&a9 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v10 - 344) = v9;
  v15 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v17 = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v10 - 312) = AssociatedTypeWitness;
  *(_QWORD *)(v10 - 304) = v15;
  *(_QWORD *)(v10 - 296) = AssociatedConformanceWitness;
  *(_QWORD *)(v10 - 288) = v17;
  type metadata accessor for ThrottlingKey();
}

uint64_t sub_23AB75D3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void *v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, _BYTE *, uint64_t);
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t isEscapingClosureAtFileLocation;
  void *v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, _QWORD, id);
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  unsigned int v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t (*v67)(uint64_t);
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t);
  id v76;
  void *v77;
  id v78;
  _BYTE v79[96];

  v6 = *(_QWORD *)(a1 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v4 - 464) = &v79[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v79[-v9];
  v11 = v1;
  v12 = *(void **)(v1 + 24);
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16);
  v14 = *(_QWORD *)(v4 - 328);
  *(_QWORD *)(v4 - 376) = v13;
  v13(&v79[-v9], v14, a1);
  v15 = *(unsigned __int8 *)(v6 + 80);
  v16 = (v15 + 56) & ~v15;
  *(_QWORD *)(v4 - 456) = v16 + v7;
  *(_QWORD *)(v4 - 448) = v15 | 7;
  v17 = (_QWORD *)swift_allocObject();
  *(_QWORD *)(v4 - 416) = v2;
  v17[2] = v2;
  v18 = v17;
  v19 = *(_QWORD *)(v4 - 352);
  v17[3] = *(_QWORD *)(v4 - 344);
  v17[4] = v19;
  *(_QWORD *)(v4 - 424) = v3;
  v17[5] = v3;
  v17[6] = v11;
  v20 = (uint64_t)v12;
  *(_QWORD *)(v4 - 440) = v16;
  *(_QWORD *)(v4 - 408) = v6;
  v21 = *(void (**)(char *, _BYTE *, uint64_t))(v6 + 32);
  *(_QWORD *)(v4 - 400) = v10;
  *(_QWORD *)(v4 - 336) = a1;
  v21((char *)v17 + v16, v10, a1);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = sub_23AB7C238;
  *(_QWORD *)(v22 + 24) = v18;
  *(_QWORD *)(v4 - 280) = sub_23AA8A65C;
  *(_QWORD *)(v4 - 272) = v22;
  *(_QWORD *)(v4 - 312) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v4 - 304) = 1107296256;
  *(_QWORD *)(v4 - 296) = sub_23AA9432C;
  *(_QWORD *)(v4 - 288) = &block_descriptor_146;
  v23 = _Block_copy((const void *)(v4 - 312));
  *(_QWORD *)(v4 - 360) = v11;
  swift_retain();
  swift_retain();
  swift_release();
  *(_QWORD *)(v4 - 312) = 0;
  v24 = objc_msgSend(v12, sel_fetchSwift_error_, v23, v4 - 312);
  _Block_release(v23);
  v25 = *(id *)(v4 - 312);
  v26 = v25;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v24)
  {
    isEscapingClosureAtFileLocation = (uint64_t)v24;
    if (!objc_msgSend(v24, sel_next))
    {
      *(_QWORD *)(v4 - 536) = v21;
      v25 = *(id *)(v4 - 336);
      if (qword_2542E05C0 != -1)
        goto LABEL_37;
      goto LABEL_8;
    }
    v28 = sub_23AD7ECFC();
    v29 = *(_QWORD *)(v4 - 368);
    sub_23AE7990C(v24, (uint64_t)v28, 0, v4 - 312);
    *(_QWORD *)(v4 - 368) = v29;
    v25 = *(id *)(v4 - 336);
    if (v29)
    {
      swift_release();

      return swift_bridgeObjectRelease();
    }
    *(_QWORD *)(v4 - 536) = v21;
    swift_bridgeObjectRelease();
    v31 = *(unsigned __int8 *)(v4 - 312);
    v37 = *(_OWORD *)(v4 - 304);
    v38 = *(_OWORD *)(v4 - 288);
    v32 = *(_QWORD *)(v4 - 272);
    v33 = *(_BYTE *)(v4 - 264);
    v34 = *(_QWORD *)(v4 - 256);
    v35 = *(_QWORD *)(v4 - 248);
    while (1)
    {
      v39 = v4 - 168;
      *(_DWORD *)(v4 - 580) = v31;
      *(_BYTE *)(v4 - 168) = v31;
      *(_OWORD *)(v39 + 8) = v37;
      *(_OWORD *)(v4 - 496) = v38;
      *(_OWORD *)(v39 + 24) = v38;
      *(_QWORD *)(v4 - 128) = v32;
      *(_BYTE *)(v4 - 120) = v33;
      *(_QWORD *)(v4 - 112) = v34;
      *(_QWORD *)(v4 - 104) = v35;
      *(_QWORD *)(v4 - 576) = v35;
      (*(void (**)(uint64_t))(v4 - 472))(v4 - 168);
      v40 = (id)fpfs_current_or_default_log();
      v41 = *(_QWORD *)(v4 - 432);
      sub_23B1C5E58();
      v42 = *(_QWORD *)(v4 - 464);
      v43 = *(void (**)(uint64_t, _QWORD, id))(v4 - 376);
      v43(v42, *(_QWORD *)(v4 - 328), v25);
      swift_retain();
      sub_23AB7B810(v4 - 240);
      swift_retain();
      sub_23AB7B810(v4 - 240);
      v44 = sub_23B1C5E40();
      v45 = sub_23B1C6A94();
      *(_DWORD *)(v4 - 480) = v45;
      v46 = os_log_type_enabled(v44, v45);
      *(_QWORD *)(v4 - 472) = isEscapingClosureAtFileLocation;
      *(_QWORD *)(v4 - 560) = v32;
      *(_QWORD *)(v4 - 568) = v18;
      if (v46)
      {
        v47 = swift_slowAlloc();
        v48 = swift_slowAlloc();
        *(_QWORD *)(v4 - 600) = v48;
        *(_QWORD *)(v4 - 312) = v48;
        *(_DWORD *)v47 = 136446722;
        v49 = *(_QWORD *)(v4 - 360);
        *(_QWORD *)(v4 - 592) = v44;
        v50 = *(unsigned __int8 *)(v49 + 32);
        swift_release();
        if (v50)
          v51 = 20550;
        else
          v51 = 21318;
        *(_QWORD *)(v4 - 320) = sub_23AABEC68(v51, 0xE200000000000000, (uint64_t *)(v4 - 312));
        sub_23B1C6CBC();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v47 + 12) = 2080;
        (*(void (**)(_QWORD, uint64_t, _QWORD))(v4 - 376))(*(_QWORD *)(v4 - 400), v42, *(_QWORD *)(v4 - 336));
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 408) + 8))(v42, *(_QWORD *)(v4 - 336));
        sub_23AFEBFE8(*(_QWORD **)(v4 - 336));
      }
      (*(void (**)(uint64_t, id))(*(_QWORD *)(v4 - 408) + 8))(v42, v25);
      swift_release_n();
      sub_23AB7B844(v4 - 240);
      sub_23AB7B844(v4 - 240);

      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 - 392) + 8))(v41, *(_QWORD *)(v4 - 384));
      v52 = *(_QWORD *)(v4 - 400);
      v43(v52, *(_QWORD *)(v4 - 328), v25);
      v53 = (*(_QWORD *)(v4 - 456) + 7) & 0xFFFFFFFFFFFFFFF8;
      v54 = (_QWORD *)swift_allocObject();
      v55 = *(_QWORD *)(v4 - 344);
      v54[2] = *(_QWORD *)(v4 - 416);
      v54[3] = v55;
      v56 = *(_QWORD *)(v4 - 424);
      v54[4] = *(_QWORD *)(v4 - 352);
      v54[5] = v56;
      v57 = (char *)v54 + *(_QWORD *)(v4 - 440);
      v54[6] = *(_QWORD *)(v4 - 360);
      (*(void (**)(char *, uint64_t, id))(v4 - 536))(v57, v52, v25);
      v58 = (char *)v54 + v53;
      v59 = *(_OWORD *)(v4 - 192);
      *((_OWORD *)v58 + 2) = *(_OWORD *)(v4 - 208);
      *((_OWORD *)v58 + 3) = v59;
      *((_QWORD *)v58 + 8) = *(_QWORD *)(v4 - 176);
      v60 = *(_OWORD *)(v4 - 224);
      *(_OWORD *)v58 = *(_OWORD *)(v4 - 240);
      *((_OWORD *)v58 + 1) = v60;
      v61 = swift_allocObject();
      *(_QWORD *)(v61 + 16) = sub_23AB7C3C8;
      *(_QWORD *)(v61 + 24) = v54;
      *(_QWORD *)(v4 - 280) = sub_23AA8A65C;
      *(_QWORD *)(v4 - 272) = v61;
      *(_QWORD *)(v4 - 312) = MEMORY[0x24BDAC760];
      *(_QWORD *)(v4 - 304) = 1107296256;
      *(_QWORD *)(v4 - 296) = sub_23AA9432C;
      *(_QWORD *)(v4 - 288) = &block_descriptor_156;
      v62 = _Block_copy((const void *)(v4 - 312));
      swift_retain();
      sub_23AB7B810(v4 - 240);
      swift_retain();
      swift_release();
      *(_QWORD *)(v4 - 312) = 0;
      v63 = objc_msgSend((id)v20, sel_executeSwift_error_, v62, v4 - 312);
      _Block_release(v62);
      isEscapingClosureAtFileLocation = *(_QWORD *)(v4 - 312);
      v25 = (id)isEscapingClosureAtFileLocation;
      v20 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v20 & 1) == 0)
        break;
LABEL_36:
      __break(1u);
LABEL_37:
      swift_once();
LABEL_8:
      v31 = xmmword_2542EDBB0;
      *(_OWORD *)(v4 - 560) = *(__int128 *)((char *)&xmmword_2542EDBB0 + 8);
      *(_OWORD *)(v4 - 496) = *(_OWORD *)&qword_2542EDBC8;
      v32 = *((_QWORD *)&xmmword_2542EDBD0 + 1);
      v33 = byte_2542EDBE0;
      v34 = qword_2542EDBE8;
      v35 = qword_2542EDBF0;
      v36 = *((id *)&xmmword_2542EDBD0 + 1);
      swift_bridgeObjectRetain();
      v37 = *(_OWORD *)(v4 - 560);
      v38 = *(_OWORD *)(v4 - 496);
    }
    if (v63)
    {
      v64 = *(void **)(v4 - 560);
      if (*(_BYTE *)(v4 - 240) == 1)
      {
        v65 = *(_QWORD *)(v4 - 504);
        v77 = *(void **)(v4 - 472);
        if (*(_QWORD *)(v4 - 216) > v65 && *(_BYTE *)(v4 - 192) == 9)
          sub_23AB71138();
        if ((*(_DWORD *)(v4 - 580) != 1 || *(_QWORD *)(v4 - 496) <= v65) && *(_QWORD *)(v4 - 216) > v65)
        {
          v66 = *(void **)(v4 - 200);
          if (v66)
          {
            v67 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 - 360) + 144);
            if (v67)
            {
              v68 = v66;
              v69 = sub_23AAFA320((uint64_t)v67);
              v70 = v67(v69);
              sub_23AAB7948((uint64_t)v67);
              if (v70)
              {
                __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542DE880);
                v71 = *(_QWORD *)(v4 - 336);
                v72 = *(int *)(swift_getTupleTypeMetadata2() + 48);
                v73 = *(_QWORD *)(v4 - 528);
                (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 - 376))(v73, *(_QWORD *)(v4 - 328), v71);
                *(_QWORD *)(v73 + v72) = v66;
                v74 = *(_QWORD *)(v4 - 512);
                swift_storeEnumTagMultiPayload();
                v75 = *(void (**)(uint64_t))(*(_QWORD *)v70 + 312);
                v76 = v66;
                v75(v73);
                swift_release();
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 520) + 8))(v73, v74);
              }
            }
            else
            {
              v78 = v66;
            }

            swift_bridgeObjectRelease();
            goto LABEL_31;
          }
        }
      }
      else
      {
        v77 = *(void **)(v4 - 472);
      }

      swift_bridgeObjectRelease();
LABEL_31:
      sub_23AB7B844(v4 - 240);
      swift_release();
      return swift_release();
    }
    sub_23B1C587C();

    swift_willThrow();
    swift_bridgeObjectRelease();
    sub_23AB7B844(v4 - 240);
    swift_release();
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  return swift_release();
}

void sub_23AB76910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AB7BA3C(a3, a1);
}

uint64_t sub_23AB76A04()
{
  uint64_t v1;

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return v1;
}

void sub_23AB76A38()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

void sub_23AB76E4C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

void sub_23AB76F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, _QWORD))(v15 + 16))((char *)&a9 - v16, *(_QWORD *)(v14 - 264));
  v17 = v9[16];
  *(_OWORD *)(v14 - 160) = v9[15];
  *(_OWORD *)(v14 - 144) = v17;
  v18 = v9[18];
  *(_OWORD *)(v14 - 128) = v9[17];
  *(_OWORD *)(v14 - 112) = v18;
  v19 = v9[12];
  *(_OWORD *)(v14 - 224) = v9[11];
  *(_OWORD *)(v14 - 208) = v19;
  v20 = v9[14];
  *(_OWORD *)(v14 - 192) = v9[13];
  *(_OWORD *)(v14 - 176) = v20;
  sub_23AB7C0DC(v14 - 224);
  *(_QWORD *)(v14 - 256) = v10;
  *(_QWORD *)(v14 - 248) = v12;
  *(_QWORD *)(v14 - 240) = v13;
  *(_QWORD *)(v14 - 232) = v11;
  type metadata accessor for ReconciliationID();
}

__n128 sub_23AB76FA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  v4 = *(_OWORD *)(v3 - 144);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(v3 - 160);
  *(_OWORD *)(v1 + 80) = v4;
  v5 = *(_OWORD *)(v3 - 112);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)(v3 - 128);
  *(_OWORD *)(v1 + 112) = v5;
  v6 = *(_OWORD *)(v3 - 208);
  *(_OWORD *)v1 = *(_OWORD *)(v3 - 224);
  *(_OWORD *)(v1 + 16) = v6;
  result = *(__n128 *)(v3 - 192);
  v8 = *(_OWORD *)(v3 - 176);
  *(__n128 *)(v1 + 32) = result;
  *(_OWORD *)(v1 + 48) = v8;
  return result;
}

void sub_23AB76FF8()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

void sub_23AB770E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v4 - 264) = v6;
  MEMORY[0x24BDAC7A8](v5);
  *(_QWORD *)(v4 - 72) = (char *)&v16 - v7;
  *(_QWORD *)(v4 - 240) = v1;
  *(_QWORD *)(v4 - 232) = v2;
  v8 = sub_23AF1E364(v3);
  v9 = *(_QWORD *)(v4 - 216);
  v10 = *(_QWORD *)(v4 - 200);
  v11 = v10 + v9;
  if (!__OFADD__(v10, v9))
  {
    v12 = *(_QWORD *)(v4 - 216);
    v13 = v8;
    sub_23AB7BFCC();
    v14 = (void *)swift_allocError();
    *(_QWORD *)v15 = v12;
    *(_QWORD *)(v15 + 8) = 0;
    *(_BYTE *)(v15 + 16) = 0;
    sub_23AFECF10(1, v13, 0, v11, *(_QWORD *)(v4 - 200), v14, *(_QWORD *)(v4 - 200), 0, v4 - 160, 0, 0, 1);
    sub_23AFEA584();
  }
  __break(1u);
  JUMPOUT(0x23AB773B4);
}

void sub_23AB773B8()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

void sub_23AB774AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t))(v15 + 16))((char *)&a9 - v16, v10);
  *(_QWORD *)(v14 - 160) = v13;
  *(_QWORD *)(v14 - 152) = v11;
  *(_QWORD *)(v14 - 144) = v12;
  *(_QWORD *)(v14 - 136) = v9;
  type metadata accessor for ReconciliationID();
}

void sub_23AB774FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  void *v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  id v33;
  id v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;

  v5 = *(unsigned __int8 *)(v1 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  if (v5 == 2)
    *(_BYTE *)(*(_QWORD *)(v3 - 232) + 168) = 1;
  v6 = v2;
  if (*(_BYTE *)v2 == 1)
  {
    v10 = *(void **)(v2 + 40);
    if (v10)
    {
      sub_23AB7BFCC();
      v15 = (void *)swift_allocError();
      v17 = *(_QWORD *)(v3 - 256);
      v16 = *(_QWORD *)(v3 - 248);
      *(_QWORD *)v18 = v17;
      *(_QWORD *)(v18 + 8) = v16;
      v19 = *(_DWORD *)(v3 - 236);
      *(_BYTE *)(v18 + 16) = v19;
      v20 = v10;
      sub_23AB7C160(v17, v16, v19);
      v21 = (void *)sub_23B1C5870();

      v22 = (void *)sub_23B1C5870();
      *(_QWORD *)(v3 - 232) = v21;
      v23 = objc_msgSend(v21, sel_domain);
      v24 = sub_23B1C63E0();
      v26 = v25;

      v27 = objc_msgSend(v22, sel_domain);
      v28 = sub_23B1C63E0();
      v30 = v29;

      if (v24 == v28 && v26 == v30)
      {
        swift_bridgeObjectRelease_n();
        v31 = *(void **)(v3 - 232);
      }
      else
      {
        v32 = sub_23B1C7388();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v31 = *(void **)(v3 - 232);
        if ((v32 & 1) == 0)
        {

          goto LABEL_14;
        }
      }
      v33 = objc_msgSend(v31, sel_code);
      v34 = objc_msgSend(v22, sel_code);

      if (v33 == v34)
      {
        v35 = *(_OWORD *)(v6 + 56);
        v9 = *(_BYTE *)(v6 + 48);
        *(_OWORD *)(v3 - 208) = *(_OWORD *)(v6 + 24);
        *(_OWORD *)(v3 - 192) = v35;
        *(_OWORD *)(v3 - 224) = *(_OWORD *)(v6 + 8);
        sub_23AB7B810(v6);
        v13 = *(_OWORD *)(v3 - 224);
        v12 = *(_OWORD *)(v3 - 208);
        v14 = *(_OWORD *)(v3 - 192);
        v11 = 1;
        goto LABEL_15;
      }
    }
LABEL_14:
    v36 = *(_QWORD *)(v3 + 16);
    v37 = sub_23AF1E364(*(_QWORD *)(v3 - 192));
    v38 = *(_QWORD *)(v6 + 16);
    v39 = *(_QWORD **)(v3 - 176);
    v40 = v39[3];
    v41 = v39[4];
    v42 = (void *)v39[5];
    v43 = v42;
    sub_23AFECF10(1, v37, v38, v40, v41, v42, v36, 0, v3 - 160, 0, 0, 1);
    v14 = *(_OWORD *)(v3 - 104);
    v9 = *(_BYTE *)(v3 - 112);
    v10 = *(void **)(v3 - 120);
    v12 = *(_OWORD *)(v3 - 136);
    v13 = *(_OWORD *)(v3 - 152);
    v11 = *(_BYTE *)(v3 - 160);
    goto LABEL_15;
  }
  if (*(_BYTE *)v2)
    goto LABEL_14;
  v7 = *(_QWORD *)(v3 - 176);
  v8 = *(_OWORD *)(v7 + 56);
  v9 = *(_BYTE *)(v7 + 48);
  v10 = *(void **)(v7 + 40);
  *(_OWORD *)(v3 - 208) = *(_OWORD *)(v7 + 24);
  *(_OWORD *)(v3 - 192) = v8;
  *(_OWORD *)(v3 - 224) = *(_OWORD *)(v7 + 8);
  v11 = *(_BYTE *)v7;
  sub_23AB7B810(v7);
  v13 = *(_OWORD *)(v3 - 224);
  v12 = *(_OWORD *)(v3 - 208);
  v14 = *(_OWORD *)(v3 - 192);
LABEL_15:
  v44 = *(_QWORD *)(v3 - 168);
  *(_BYTE *)v44 = v11;
  *(_OWORD *)(v44 + 8) = v13;
  *(_OWORD *)(v44 + 24) = v12;
  *(_QWORD *)(v44 + 40) = v10;
  *(_BYTE *)(v44 + 48) = v9;
  *(_OWORD *)(v44 + 56) = v14;
}

void sub_23AB777F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[17];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v20 = a2;
  v25 = a1;
  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 88);
  v7 = *(_QWORD *)(*v4 + 104);
  v18 = type metadata accessor for FileTreeError(0, v6, v7, a4);
  v17[7] = *(_QWORD *)(v18 - 8);
  v8 = MEMORY[0x24BDAC7A8](v18);
  v17[9] = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v17[16] = (char *)v17 - v10;
  v11 = *(_QWORD *)(v5 + 80);
  v12 = *(_QWORD *)(v5 + 96);
  v19 = type metadata accessor for FileTreeError(0, v11, v12, v13);
  v17[8] = *(_QWORD *)(v19 - 8);
  v14 = MEMORY[0x24BDAC7A8](v19);
  v17[10] = (char *)v17 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17[12] = (char *)v17 - v16;
  v21 = v11;
  v22 = v6;
  v23 = v12;
  v24 = v7;
  type metadata accessor for PersistenceTrigger();
}

void sub_23AB77948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;

  *(_QWORD *)(v9 - 424) = a1;
  *(_QWORD *)(v9 - 432) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v9 - 440) = (char *)&a9 - v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v14 = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v9 - 256) = AssociatedTypeWitness;
  *(_QWORD *)(v9 - 248) = v12;
  *(_QWORD *)(v9 - 376) = v12;
  *(_QWORD *)(v9 - 448) = AssociatedConformanceWitness;
  *(_QWORD *)(v9 - 240) = AssociatedConformanceWitness;
  *(_QWORD *)(v9 - 232) = v14;
  *(_QWORD *)(v9 - 456) = v14;
  type metadata accessor for ThrottlingKey();
}

void sub_23AB77A3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  _OWORD *v19;
  void *v20;
  uint64_t (*v21)(id);
  void *v22;
  id v23;
  void (*v24)(uint64_t);
  char v25;
  char v26;
  id v27;
  uint64_t v28;
  unsigned int v29;
  void **v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  id v37;
  void **v38;
  void *v39;
  id v40;
  uint64_t v41;
  int v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  _BYTE v51[96];

  *(_QWORD *)(v5 - 280) = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v5 - 416) = &v51[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v5 - 296) = &v51[-v9];
  v10 = MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v5 - 464) = v11;
  MEMORY[0x24BDAC7A8](v10);
  *(_QWORD *)(v5 - 288) = &v51[-v12];
  v13 = *(_QWORD *)(v5 - 72);
  *(_QWORD *)(v5 - 360) = v4;
  *(_QWORD *)(v5 - 344) = v3;
  *(_QWORD *)(v5 - 352) = v1;
  v14 = (void *)sub_23AF1E7EC(v13);
  v17 = v14;
  v18 = v16;
  v19 = *(_OWORD **)(v5 - 272);
  switch(v16)
  {
    case 0:
      v20 = v14;
      v17 = v15;
      if (!v15)
        return;
      goto LABEL_5;
    case 1:
      v20 = v14;
      if (v14)
      {
LABEL_5:
        v21 = *(uint64_t (**)(id))(*(_QWORD *)v17 + 88);
        v22 = v15;
        v23 = sub_23AAAE478(v20, v15, v16);
        v24 = (void (*)(uint64_t))v21(v23);
        v26 = v25;
        sub_23AAAEE10(v20, v22, v18);
        switch(v26)
        {
          case 0:
            sub_23AB76FF8();
          case 2:
            v32 = v19[16];
            *(_OWORD *)(v5 - 160) = v19[15];
            *(_OWORD *)(v5 - 144) = v32;
            v33 = v19[18];
            v34 = v5 - 224;
            *(_OWORD *)(v34 + 96) = v19[17];
            *(_OWORD *)(v34 + 112) = v33;
            v35 = v19[12];
            *(_OWORD *)(v5 - 224) = v19[11];
            *(_OWORD *)(v5 - 208) = v35;
            v36 = v19[14];
            *(_OWORD *)(v5 - 192) = v19[13];
            *(_OWORD *)(v5 - 176) = v36;
            sub_23AB7C0DC(v5 - 224);
            v24(v5 - 224);
            sub_23AB7C104(v5 - 224);
            sub_23AB76FF8();
          default:
            return;
        }
      }
      return;
    case 3:
      *(_QWORD *)(v5 - 264) = v14;
      *(_QWORD *)(v5 - 424) = v15;
      sub_23AAAE478(v14, v15, 3);
      v27 = v17;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE880);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v28 = *(_QWORD *)(v5 - 248);
        v29 = *(unsigned __int8 *)(v5 - 240);
        v30 = *(void ***)(v5 - 336);
        if (v29 <= 0xFB)
        {
          v31 = *(_QWORD *)(v5 - 320);
          if (!*(_BYTE *)(v5 - 240))
            sub_23AB76FF8();
          sub_23AB7C0B0(*(_QWORD *)(v5 - 256), v28, v29);
        }
        else
        {
          sub_23AB7C0B0(*(_QWORD *)(v5 - 256), v28, v29);
          v31 = *(_QWORD *)(v5 - 320);
        }
      }
      else
      {
        v31 = *(_QWORD *)(v5 - 320);
        v30 = *(void ***)(v5 - 336);
      }

      *(_QWORD *)(v5 - 256) = v17;
      v37 = v17;
      v38 = *(void ***)(v5 - 368);
      if (!swift_dynamicCast())
        goto LABEL_21;
      if (swift_getEnumCaseMultiPayload() != 8)
      {
        (*(void (**)(void **, uint64_t))(*(_QWORD *)(v5 - 400) + 8))(v38, v31);
LABEL_21:

        *(_QWORD *)(v5 - 256) = v17;
        v40 = v17;
        v41 = *(_QWORD *)(v5 - 328);
        v42 = swift_dynamicCast();
        v43 = v17;
        *(_QWORD *)(v5 - 288) = v17;
        if (v42)
        {
          if (swift_getEnumCaseMultiPayload() == 8)
          {
            sub_23AAAEE10(*(void **)(v5 - 288), *(id *)(v5 - 424), 3);
            v39 = *v30;
            goto LABEL_24;
          }
          (*(void (**)(void **, uint64_t))(*(_QWORD *)(v5 - 408) + 8))(v30, v41);
          v43 = *(void **)(v5 - 288);
        }

        *(_QWORD *)(v5 - 256) = v43;
        v44 = v43;
        v45 = *(_QWORD *)(v5 - 384);
        v46 = *(_QWORD *)(v5 - 320);
        if (swift_dynamicCast())
        {
          if (swift_getEnumCaseMultiPayload() == 17)
          {
LABEL_31:
            sub_23AAAEE10(*(void **)(v5 - 288), *(id *)(v5 - 424), 3);
            goto LABEL_32;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 400) + 8))(v45, v46);
          v43 = *(void **)(v5 - 288);
        }

        *(_QWORD *)(v5 - 256) = v43;
        v47 = v43;
        v48 = *(_QWORD *)(v5 - 392);
        v49 = *(_QWORD *)(v5 - 328);
        if (swift_dynamicCast())
        {
          if (swift_getEnumCaseMultiPayload() == 17)
            goto LABEL_31;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 408) + 8))(v48, v49);
          v43 = *(void **)(v5 - 288);
        }

        v50 = v43;
        sub_23AFEA584();
      }
      sub_23AAAEE10(v17, *(id *)(v5 - 424), 3);
      v39 = *v38;
LABEL_24:

LABEL_32:
      return;
    case 4:
      if (v14 == (void *)1 && !v15)
      {
        sub_23AAAE478((id)1, 0, 4);
        *(_QWORD *)(v5 - 296) = v2;
        sub_23AFEA840();
      }
      return;
    default:
      return;
  }
}

void sub_23AB78608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23AF1E364(a3);
  sub_23AB76E4C();
}

__n128 sub_23AB78664()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __n128 result;
  _BYTE v6[128];
  _OWORD v7[4];
  uint64_t v8;

  sub_23AFEA844(v1, v3, v0, (uint64_t)v6, (uint64_t)v7);
  sub_23AB7C104((uint64_t)v6);
  v4 = v7[3];
  *(_OWORD *)(v2 + 32) = v7[2];
  *(_OWORD *)(v2 + 48) = v4;
  *(_QWORD *)(v2 + 64) = v8;
  result = (__n128)v7[1];
  *(_OWORD *)v2 = v7[0];
  *(__n128 *)(v2 + 16) = result;
  return result;
}

void sub_23AB786C4()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

uint64_t sub_23AB787B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v12 - v6;
  v8 = MEMORY[0x23B8613CC](&unk_23B1CFEF8, a1);
  v9 = *(_QWORD *)(v4 - 288);
  result = sub_23AABEBB8(*(void **)(v4 - 72), 0, a1, v8, (uint64_t)v7);
  if (!v9)
  {
    v11 = MEMORY[0x23B8613CC](&unk_23B1CFE30, a1);
    sub_23AA7C074(a1, v11);
    *(_QWORD *)(v4 - 280) = *(_QWORD *)(v4 - 296);
    *(_QWORD *)(v4 - 272) = v3;
    *(_QWORD *)(v4 - 264) = v1;
    *(_QWORD *)(v4 - 256) = v2;
    _s9SQLFieldsOMa();
  }
  return result;
}

void sub_23AB7895C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

uint64_t sub_23AB78A30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  _BYTE v11[96];

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v7 = &v11[*(int *)(v5 + 48) - v6];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(&v11[-v6], v2, a1);
  v8 = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v7 + 2) = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v7 + 3) = v8;
  *((_QWORD *)v7 + 8) = *(_QWORD *)(v1 + 64);
  v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v1;
  *((_OWORD *)v7 + 1) = v9;
  sub_23AB7B810(v1);
  sub_23B1C67DC();
  return sub_23B1C67AC();
}

uint64_t sub_23AB78AF8(int a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  char v26;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  id v32;
  id aBlock[7];

  v28 = a3;
  v5 = v4;
  v30 = a1;
  v31 = a4;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)v4;
  v29 = *(_QWORD *)(*(_QWORD *)v4 + 96);
  v8 = v7[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v28 - v12;
  v32 = *(id *)(v5 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v28 - v12, a2, AssociatedTypeWitness);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = (char *)swift_allocObject();
  *((_QWORD *)v15 + 2) = v8;
  v16 = v29;
  *((_QWORD *)v15 + 3) = v7[11];
  *((_QWORD *)v15 + 4) = v16;
  *((_QWORD *)v15 + 5) = v7[13];
  *((_QWORD *)v15 + 6) = v5;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v15[v14], v13, AssociatedTypeWitness);
  v17 = &v15[v14 + v11];
  *v17 = v30;
  v17[1] = v31;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = sub_23AB7C5F4;
  v18[3] = v15;
  aBlock[4] = sub_23AA8A65C;
  aBlock[5] = v18;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_173;
  v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v20 = objc_msgSend(v32, sel_fetchSwift_error_, v19, aBlock);
  _Block_release(v19);
  v21 = aBlock[0];
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v19 & 1) != 0)
    __break(1u);
  if (v20)
  {
    if (objc_msgSend(v20, sel_next))
    {
      v22 = (unint64_t)objc_msgSend(v20, sel_unsignedLongAtIndex_, 0);

      v23 = v28;
      v24 = sub_23ADA7D64(v28);
      swift_release();
      if (v24 <= 1)
        v25 = v22 >= v23;
      else
        v25 = (v22 & 0x1FFFFFFFFFFFFFFFLL) >= (v23 & 0x1FFFFFFFFFFFFFFFLL);
      v26 = v25;
    }
    else
    {
      swift_release();

      v26 = 0;
    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v26 & 1;
}

uint64_t sub_23AB78DF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v17 = 0xE000000000000000;
  sub_23B1C6EFC();
  v19 = 0;
  v20 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v16 = 0;
  v8 = MEMORY[0x24BEE1768];
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v11 = swift_checkMetadataState();
  v10(a1, v11, v9);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v12 = qword_23B1D0030[a4];
  v18 = v8;
  v16 = v12;
  sub_23AA94C90((uint64_t)&v16);
  v14 = v13;
  sub_23AA94C08((uint64_t)&v16);
  if (v14)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v16 = 1;
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    if ((a5 & 1) != 0)
    {
      v16 = 0;
      v17 = 0xE000000000000000;
      sub_23B1C6EFC();
      swift_bridgeObjectRelease();
      v16 = 0xD000000000000017;
      v17 = 0x800000023B1F9040;
      sub_23B1C7304();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
    }
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v19;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23AB79160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v0 = sub_23B1C5BDC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v12 = 0xE000000000000000;
  sub_23B1C6EFC();
  v14 = v11;
  v15 = v12;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v11 = 1;
  v4 = MEMORY[0x24BEE1768];
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v11 = 7;
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C5BD0();
  sub_23B1C5B94();
  v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v7 = v6 * 1000000000.0;
  if ((~COERCE__INT64(v6 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v13 = v4;
  v11 = (uint64_t)v7;
  sub_23AA94C90((uint64_t)&v11);
  v9 = v8;
  sub_23AA94C08((uint64_t)&v11);
  if (v9)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    return v14;
  }
LABEL_9:
  result = sub_23B1C704C();
  __break(1u);
  return result;
}

void sub_23AB7942C()
{
  sub_23AB71AA4();
}

unint64_t sub_23AB79458(uint64_t a1, char a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AB7B9A0(a2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v6 = swift_checkMetadataState();
  v5(a1, v6, v4);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

void sub_23AB795F4()
{
  sub_23AB71AA4();
}

unint64_t sub_23AB79620(uint64_t a1, char a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AB7B9A0(a2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v6 = swift_checkMetadataState();
  v5(a1, v6, v4);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

uint64_t sub_23AB797B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t result;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = sub_23B1C5BDC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v2 + 120) & 1) != 0)
  {
    v8 = a1[3];
    v9 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v8);
    sub_23AEBD130(0xD000000000000025, 0x800000023B1F8F10, v8, v9);
LABEL_12:
    v21 = a1[3];
    v22 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v21);
    return sub_23AEBD1D4(8224, 0xE200000000000000, sub_23AB7C504, v2, v21, MEMORY[0x24BEE4AE0] + 8, v22);
  }
  v10 = *(_QWORD *)(v2 + 112);
  sub_23B1C5BD0();
  sub_23B1C5B94();
  v12 = v11;
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v14 = v12 * 1000000000.0;
  if ((~COERCE__INT64(v12 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v14 >= 9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v15 = (uint64_t)v14;
  v16 = a1[3];
  v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  v24 = 0;
  v25 = 0xE000000000000000;
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  v24 = 0xD000000000000021;
  v25 = 0x800000023B1F8F40;
  result = v10 - v15;
  if (__OFSUB__(v10, v15))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((result & 0x8000000000000000) == 0)
  {
    v18 = 0;
    v19 = 0xE000000000000000;
LABEL_11:
    sub_23AF3E770(result);
    v23[1] = v18;
    v23[2] = v19;
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23AEBD130(v24, v25, v16, v17);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v20 = __OFSUB__(0, result);
  result = v15 - v10;
  if (!v20)
  {
    v19 = 0xE100000000000000;
    v18 = 45;
    goto LABEL_11;
  }
LABEL_17:
  __break(1u);
  return result;
}

void sub_23AB79A10(_QWORD *a1, uint64_t a2)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  if (*(_BYTE *)(a2 + 170) == 1)
  {
    v4 = a1[3];
    v11 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v4);
    if (qword_2542E6F00 != -1)
      swift_once();
    v5 = objc_msgSend((id)qword_2542EDE08, sel_description);
    v6 = sub_23B1C63E0();
    v8 = v7;

    sub_23AEBD130(v6, v8, v4, v11);
    a1 = (_QWORD *)swift_bridgeObjectRelease();
  }
  MEMORY[0x24BDAC7A8](a1);
  sub_23AAA0824((uint64_t)sub_23AB79C2C, 0);
  if (v2)
  {
    v9 = v3[3];
    v10 = v3[4];
    __swift_project_boxed_opaque_existential_1(v3, v9);
    sub_23B1C6EFC();
    sub_23B1C64F4();
    swift_bridgeObjectRetain();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE880);
    sub_23B1C7028();
    sub_23AEBD130(0, 0xE000000000000000, v9, v10);
    swift_bridgeObjectRelease();

  }
}

unint64_t sub_23AB79C2C()
{
  return 0xD000000000000022;
}

void sub_23AB79C48(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

uint64_t sub_23AB79D38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x23B8613CC](&unk_23B1E23D8, a1);
  sub_23B1C7340();
  sub_23B1C64F4();
  sub_23AFEB7A8();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23AEBD130(v4, v5, v1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AB79DC8()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[8];

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23AAB7948(*(_QWORD *)(v0 + 144));

  v1 = *(_OWORD *)(v0 + 256);
  v6[4] = *(_OWORD *)(v0 + 240);
  v6[5] = v1;
  v2 = *(_OWORD *)(v0 + 288);
  v6[6] = *(_OWORD *)(v0 + 272);
  v6[7] = v2;
  v3 = *(_OWORD *)(v0 + 192);
  v6[0] = *(_OWORD *)(v0 + 176);
  v6[1] = v3;
  v4 = *(_OWORD *)(v0 + 224);
  v6[2] = *(_OWORD *)(v0 + 208);
  v6[3] = v4;
  sub_23AB7C104((uint64_t)v6);
  return v0;
}

uint64_t sub_23AB79E4C()
{
  sub_23AB79DC8();
  return swift_deallocClassInstance();
}

void type metadata accessor for SQLThrottler()
{
  JUMPOUT(0x23B861318);
}

uint64_t sub_23AB79E78()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  id v10;
  char v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  id v15;
  char v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  void *v22;
  unsigned __int8 v23;
  id v24;
  char v25;
  id aBlock;
  uint64_t v28;
  id (*v29)(uint64_t, void *);
  void *v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 24);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = sub_23AB7B73C;
  *(_QWORD *)(v2 + 24) = v0;
  v31 = sub_23AA8A65C;
  v32 = v2;
  aBlock = (id)MEMORY[0x24BDAC760];
  v28 = 1107296256;
  v29 = sub_23AA9432C;
  v30 = &block_descriptor_22;
  v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, &aBlock);
  _Block_release(v3);
  v5 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (!v4)
  {
    sub_23B1C587C();

    swift_willThrow();
    return swift_release();
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_23AB7B754;
  *(_QWORD *)(v7 + 24) = v0;
  v31 = sub_23AA8A65C;
  v32 = v7;
  aBlock = (id)MEMORY[0x24BDAC760];
  v28 = 1107296256;
  v29 = sub_23AA9432C;
  v30 = &block_descriptor_29;
  v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v9 = objc_msgSend(v1, sel_executeSwift_error_, v8, &aBlock);
  _Block_release(v8);
  v10 = aBlock;
  v11 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v11 & 1) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v9)
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = sub_23AB7B76C;
    *(_QWORD *)(v12 + 24) = v0;
    v31 = sub_23AA8A65C;
    v32 = v12;
    aBlock = (id)MEMORY[0x24BDAC760];
    v28 = 1107296256;
    v29 = sub_23AA9432C;
    v30 = &block_descriptor_36;
    v13 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v14 = objc_msgSend(v1, sel_executeSwift_error_, v13, &aBlock);
    _Block_release(v13);
    v15 = aBlock;
    v16 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v16 & 1) == 0)
    {
      if (!v14)
        goto LABEL_14;
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = sub_23AB7B784;
      *(_QWORD *)(v17 + 24) = v0;
      v31 = sub_23AA8A65C;
      v32 = v17;
      aBlock = (id)MEMORY[0x24BDAC760];
      v28 = 1107296256;
      v29 = sub_23AA9432C;
      v30 = &block_descriptor_43;
      v18 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      aBlock = 0;
      v19 = objc_msgSend(v1, sel_executeSwift_error_, v18, &aBlock);
      _Block_release(v18);
      v15 = aBlock;
      v20 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v20 & 1) == 0)
      {
        if (v19)
        {
          v21 = swift_allocObject();
          *(_QWORD *)(v21 + 16) = sub_23AB7B79C;
          *(_QWORD *)(v21 + 24) = v0;
          v31 = sub_23AA8A65C;
          v32 = v21;
          aBlock = (id)MEMORY[0x24BDAC760];
          v28 = 1107296256;
          v29 = sub_23AA9432C;
          v30 = &block_descriptor_50_0;
          v22 = _Block_copy(&aBlock);
          swift_retain();
          swift_retain();
          swift_release();
          aBlock = 0;
          v23 = objc_msgSend(v1, sel_executeSwift_error_, v22, &aBlock);
          _Block_release(v22);
          v24 = aBlock;
          v25 = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((v25 & 1) == 0)
          {
            if ((v23 & 1) != 0)
              return swift_release_n();
            sub_23B1C587C();

            swift_willThrow();
            goto LABEL_17;
          }
LABEL_23:
          __break(1u);
        }
LABEL_14:
        sub_23B1C587C();

        swift_willThrow();
LABEL_17:
        swift_release_n();
        return swift_release();
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_23B1C587C();

  swift_willThrow();
  swift_release();
  return swift_release();
}

uint64_t sub_23AB7A434()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 40) + 8))(AssociatedTypeWitness);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AB7A590()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AB7A684()
{
  _QWORD v1[2];

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "CREATE INDEX ");
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return v1[0];
}

uint64_t sub_23AB7A774()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AB7A870()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AB7A96C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  id v10;
  char v11;
  uint64_t v12;
  void *v13;
  unsigned __int8 v14;
  id v15;
  char v16;
  id aBlock;
  uint64_t v19;
  id (*v20)(uint64_t, void *);
  void *v21;
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 24);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = sub_23AB7B6F4;
  *(_QWORD *)(v2 + 24) = v0;
  v22 = sub_23AA698DC;
  v23 = v2;
  aBlock = (id)MEMORY[0x24BDAC760];
  v19 = 1107296256;
  v20 = sub_23AA9432C;
  v21 = &block_descriptor_2;
  v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, &aBlock);
  _Block_release(v3);
  v5 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v4)
  {
    sub_23B1C587C();

    swift_willThrow();
    return swift_release();
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_23AB7B70C;
  *(_QWORD *)(v7 + 24) = v0;
  v22 = sub_23AA8A65C;
  v23 = v7;
  aBlock = (id)MEMORY[0x24BDAC760];
  v19 = 1107296256;
  v20 = sub_23AA9432C;
  v21 = &block_descriptor_8;
  v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v9 = objc_msgSend(v1, sel_executeSwift_error_, v8, &aBlock);
  _Block_release(v8);
  v10 = aBlock;
  v11 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v11 & 1) != 0)
    goto LABEL_13;
  if (!v9)
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
    return swift_release();
  }
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_23AB7B724;
  *(_QWORD *)(v12 + 24) = v0;
  v22 = sub_23AA8A65C;
  v23 = v12;
  aBlock = (id)MEMORY[0x24BDAC760];
  v19 = 1107296256;
  v20 = sub_23AA9432C;
  v21 = &block_descriptor_15;
  v13 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v14 = objc_msgSend(v1, sel_executeSwift_error_, v13, &aBlock);
  _Block_release(v13);
  v15 = aBlock;
  v16 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v16 & 1) != 0)
LABEL_14:
    __break(1u);
  if ((v14 & 1) != 0)
    return swift_release_n();
  sub_23B1C587C();

  swift_willThrow();
  swift_release_n();
  return swift_release();
}

uint64_t sub_23AB7AD18()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

unint64_t sub_23AB7ADCC()
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0xD000000000000015;
}

uint64_t sub_23AB7AE74()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23AB7AF70()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  unsigned int v20;
  id v21;
  char isEscapingClosureAtFileLocation;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id aBlock[7];

  v2 = v0;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = sub_23B1C5E4C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23B1C5BDC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B1C5BD0();
  sub_23B1C5B94();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v13 = v12 * 1000000000.0;
  if ((~COERCE__INT64(v12 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v13 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v13 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v14 = v2[24];
  v15 = (uint64_t)v13 - v14;
  if (__OFSUB__((uint64_t)v13, v14))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  v32 = v4;
  v33 = v3;
  v34 = v1;
  v16 = (void *)v2[3];
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v2;
  *(_QWORD *)(v17 + 24) = v15;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = sub_23AB7B7D8;
  v18[3] = v17;
  aBlock[4] = sub_23AA8A65C;
  aBlock[5] = v18;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_60;
  v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v20 = objc_msgSend(v16, sel_executeSwift_error_, v19, aBlock);
  _Block_release(v19);
  v21 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    goto LABEL_18;
  if (v20)
  {
    if ((uint64_t)objc_msgSend(v16, sel_changes) >= 1)
    {
      v23 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      swift_retain();
      v24 = sub_23B1C5E40();
      v25 = sub_23B1C6A88();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = swift_slowAlloc();
        v31 = (void *)swift_slowAlloc();
        aBlock[0] = v31;
        *(_DWORD *)v26 = 134218242;
        v35 = objc_msgSend(v16, sel_changes);
        sub_23B1C6CBC();
        *(_WORD *)(v26 + 12) = 2080;
        v27 = v2[5];
        v28 = v2[6];
        swift_bridgeObjectRetain();
        v35 = (id)sub_23AABEC68(v27, v28, (uint64_t *)aBlock);
        sub_23B1C6CBC();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23AA66000, v24, v25, "🧹  purged %lld outdated entries from %s", (uint8_t *)v26, 0x16u);
        v29 = v31;
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v29, -1, -1);
        MEMORY[0x23B8614BC](v26, -1, -1);

      }
      else
      {

        swift_release();
      }
      (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v33);
    }
    return swift_release();
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    return swift_release();
  }
}

uint64_t sub_23AB7B3B8()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AB55910();
  sub_23B1C6D70();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23AB7B520()
{
  return sub_23AB7AF70();
}

uint64_t sub_23AB7B540()
{
  return sub_23AB79E78();
}

uint64_t sub_23AB7B560()
{
  return sub_23AB7A96C();
}

void sub_23AB7B580()
{
  JUMPOUT(0x23B8613CCLL);
}

void sub_23AB7B590()
{
  JUMPOUT(0x23B8613CCLL);
}

uint64_t sub_23AB7B5A0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = MEMORY[0x23B8613CC](&unk_23B1CFED0);
  result = MEMORY[0x23B8613CC](&unk_23B1CFE68, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void sub_23AB7B5E4()
{
  JUMPOUT(0x23B8613CCLL);
}

uint64_t sub_23AB7B5F4(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x23B8613CC](&unk_23B1CFE30);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23AB7B620()
{
  unint64_t result;

  result = qword_2569E6130;
  if (!qword_2569E6130)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1E1E04, &type metadata for SQLDecodingError);
    atomic_store(result, (unint64_t *)&qword_2569E6130);
  }
  return result;
}

uint64_t sub_23AB7B664@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

unsigned __int8 *sub_23AB7B68C@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_23AB7B698(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  sub_23AE1B74C(*a1);
  *a2 = v3;
  a2[1] = v4;
}

uint64_t __swift_deallocate_boxed_opaque_existential_0(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x23B8614BCLL);
  return result;
}

uint64_t sub_23AB7B6F4()
{
  return sub_23AB7AD18();
}

uint64_t sub_23AB7B6FC()
{
  return swift_deallocObject();
}

unint64_t sub_23AB7B70C()
{
  return sub_23AB7ADCC();
}

uint64_t sub_23AB7B714()
{
  return swift_deallocObject();
}

uint64_t sub_23AB7B724()
{
  return sub_23AB7AE74();
}

uint64_t sub_23AB7B72C()
{
  return swift_deallocObject();
}

uint64_t sub_23AB7B73C()
{
  return sub_23AB7A434();
}

uint64_t sub_23AB7B744()
{
  return swift_deallocObject();
}

uint64_t sub_23AB7B754()
{
  return sub_23AB7A590();
}

uint64_t sub_23AB7B75C()
{
  return swift_deallocObject();
}

uint64_t sub_23AB7B76C()
{
  return sub_23AB7A684();
}

uint64_t sub_23AB7B774()
{
  return swift_deallocObject();
}

uint64_t sub_23AB7B784()
{
  return sub_23AB7A774();
}

uint64_t sub_23AB7B78C()
{
  return swift_deallocObject();
}

uint64_t sub_23AB7B79C()
{
  return sub_23AB7A870();
}

uint64_t sub_23AB7B7A4()
{
  return swift_deallocObject();
}

uint64_t sub_23AB7B7B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AB7B7D8()
{
  return sub_23AB7B3B8();
}

uint64_t sub_23AB7B7E0()
{
  return swift_deallocObject();
}

void sub_23AB7B7F4()
{
  sub_23AB7B888();
}

uint64_t sub_23AB7B800()
{
  return swift_deallocObject();
}

uint64_t sub_23AB7B810(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23AB7B844(uint64_t a1)
{

  swift_bridgeObjectRelease();
  return a1;
}

void sub_23AB7B87C()
{
  sub_23AB7B888();
}

void sub_23AB7B888()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

uint64_t sub_23AB7B950(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t, _QWORD, uint64_t);

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v5(v1, *(_QWORD *)(v2 + 48), v2 + ((v3 + 56) & ~v3));
}

uint64_t sub_23AB7B990()
{
  return swift_deallocObject();
}

unint64_t sub_23AB7B9A0(char a1)
{
  if ((a1 & 1) != 0)
    return 0;
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0xD00000000000001BLL;
}

void sub_23AB7BA3C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  _QWORD v9[14];

  v9[4] = a1;
  v9[5] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = sub_23B1C6C98();
  v9[1] = *(_QWORD *)(v3 - 8);
  v9[2] = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  v9[3] = (char *)v9 - v5;
  v9[12] = 0x203D20646E696BLL;
  v9[13] = 0xE700000000000000;
  v6 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v8 = swift_getAssociatedConformanceWitness();
  v9[8] = AssociatedTypeWitness;
  v9[9] = v6;
  v9[10] = AssociatedConformanceWitness;
  v9[11] = v8;
  type metadata accessor for ThrottlingKey();
}

void sub_23AB7BB88(uint64_t a1)
{
  sub_23AFE9B98(a1);
}

void sub_23AB7BB94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 144) = 0;
  *(_QWORD *)(v4 - 128) = v2;
  *(_QWORD *)(v4 - 120) = v1;
  *(_QWORD *)(v4 - 112) = v3;
  *(_QWORD *)(v4 - 104) = v0;
  type metadata accessor for ThrottlingKey.Kind();
}

void sub_23AB7BBB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x23B8613CC](&unk_23B1E2428, a1);
  sub_23AD3C214(v2 - 144, a1);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v2 - 88);
  *(_QWORD *)(v2 - 96) = *(_QWORD *)(v2 - 96);
  *(_QWORD *)(v2 - 88) = v4;
  sub_23AFE9C24(v1);
}

void sub_23AB7BC04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v1) == 1)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 184) + 8))(v4, *(_QWORD *)(v6 - 176));
  }
  else
  {
    v7 = *(_QWORD *)(v6 - 168);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v7, v4, v1);
    *(_QWORD *)(v6 - 128) = 0;
    *(_QWORD *)(v6 - 120) = 0xE000000000000000;
    sub_23B1C6EFC();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 - 128) = 0x65746920444E4120;
    *(_QWORD *)(v6 - 120) = 0xEF203D2064695F6DLL;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 40) + 32))(v0, v1);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v7, v1);
  }
  sub_23AFE9D34(v3);
}

unint64_t sub_23AB7BE14(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23AB73FC8(a1, a2, *(unint64_t **)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_23AB7BE44()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_23AB7BE68@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_23AB7431C(*(_QWORD *)(v1 + 48), a1);
}

uint64_t sub_23AB7BE8C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23AB7BEB0(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  sub_23AE1B74C(*a1);
  *a2 = v3;
  a2[1] = v4;
}

unint64_t sub_23AB7BEDC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2569E6770;
  if (!qword_2569E6770)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2569E25D0);
    v2 = sub_23AAB5A28(&qword_2569E25E0, &qword_2542E54A0, MEMORY[0x24BEE12B0]);
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE2B38], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2569E6770);
  }
  return result;
}

void sub_23AB7BF5C()
{
  sub_23AB7B888();
}

uint64_t sub_23AB7BF68()
{
  return swift_deallocObject();
}

uint64_t sub_23AB7BF78(uint64_t a1)
{
  uint64_t v1;

  return sub_23AB72B14(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t sub_23AB7BF88()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AB7BFAC(uint64_t a1)
{
  uint64_t v1;

  return sub_23AB733F4(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40));
}

uint64_t sub_23AB7BFBC()
{
  return swift_deallocObject();
}

unint64_t sub_23AB7BFCC()
{
  unint64_t result;

  result = qword_2542E0DE0[0];
  if (!qword_2542E0DE0[0])
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CFF80, &type metadata for ThrottlingError);
    atomic_store(result, qword_2542E0DE0);
  }
  return result;
}

uint64_t sub_23AB7C010()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AB7C034()
{
  return swift_deallocObject();
}

void _s9SQLFieldsOMa()
{
  JUMPOUT(0x23B861318);
}

void sub_23AB7C050(uint64_t a1, char a2)
{
  sub_23AB74640(a1, a2);
}

void sub_23AB7C060(uint64_t a1)
{
  uint64_t v1;

  sub_23AB748E4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23AB7C07C()
{
  return sub_23AB6F9D0();
}

void sub_23AB7C0A0(uint64_t a1)
{
  uint64_t v1;

  sub_23AB78608(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23AB7C0B0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 <= 0xFBu)
    return sub_23AB7C0C4(a1, a2, a3);
  return a1;
}

uint64_t sub_23AB7C0C4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_release();
  return result;
}

uint64_t sub_23AB7C0DC(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_23AB7C104(uint64_t a1)
{
  swift_release();
  return a1;
}

void sub_23AB7C12C()
{
  sub_23AB773B8();
}

uint64_t sub_23AB7C160(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 <= 0xFBu)
    return sub_23AB7C174(a1, a2, a3);
  return a1;
}

uint64_t sub_23AB7C174(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2)
    return swift_retain();
  return result;
}

uint64_t sub_23AB7C18C()
{
  return sub_23AB7119C();
}

uint64_t sub_23AB7C194()
{
  return swift_deallocObject();
}

uint64_t sub_23AB7C1A4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23AB7C1C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AB7C1EC()
{
  return sub_23AB71284();
}

void sub_23AB7C1FC()
{
  sub_23AB74C30();
}

uint64_t sub_23AB7C214(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_23AB74CD4(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_23AB7C21C()
{
  return sub_23AB79160();
}

uint64_t sub_23AB7C224()
{
  return swift_deallocObject();
}

void sub_23AB7C238()
{
  sub_23AB7B888();
}

uint64_t sub_23AB7C244()
{
  return swift_deallocObject();
}

void sub_23AB7C254()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

void sub_23AB7C318()
{
  swift_release();
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23AB7C34C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
    v6 = v2;
  else
    v6 = v0;
  (*(void (**)(uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v3);

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23AB7C3C8()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ThrottlingKey();
}

void sub_23AB7C48C()
{
  sub_23AB76A38();
}

uint64_t sub_23AB7C4DC()
{
  return swift_deallocObject();
}

uint64_t sub_23AB7C4EC()
{
  return sub_23AB75164();
}

uint64_t sub_23AB7C4F4()
{
  return swift_deallocObject();
}

void sub_23AB7C504(_QWORD *a1)
{
  uint64_t v1;

  sub_23AB79A10(a1, v1);
}

void sub_23AB7C51C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23AB79C48(a1, a2, *(_QWORD **)(v2 + 48));
}

uint64_t sub_23AB7C52C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23AB74ADC(a1, a2, *(_QWORD *)(v2 + 16));
}

unint64_t sub_23AB7C534(uint64_t a1, char a2)
{
  return sub_23AB79458(a1, a2);
}

unint64_t sub_23AB7C53C(uint64_t a1, char a2)
{
  return sub_23AB79620(a1, a2);
}

void sub_23AB7C544()
{
  sub_23AB7895C();
}

uint64_t sub_23AB7C564()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23AB7C5F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_23AB78DF0(a1, *(_QWORD *)(v1 + 48), v1 + v4, *(_BYTE *)(v1 + *(_QWORD *)(v3 + 64) + v4), *(_BYTE *)(v1 + *(_QWORD *)(v3 + 64) + v4 + 1));
}

uint64_t sub_23AB7C660()
{
  return swift_deallocObject();
}

void sub_23AB7C670()
{
  uint64_t v0;

  sub_23AB6FCD0(v0);
}

uint64_t sub_23AB7C688(uint64_t a1)
{
  _QWORD *v1;

  return sub_23ADFE714(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_23AB7C694()
{
  return swift_deallocObject();
}

uint64_t sub_23AB7C6A4()
{
  return swift_deallocObject();
}

void sub_23AB7C6B4(id a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)

}

uint64_t destroy for ThrottlingError(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 16);
  if (v1 <= 3)
    return sub_23AB7C0C4(*(_QWORD *)result, *(_QWORD *)(result + 8), v1);
  return result;
}

uint64_t _s9libfssync15ThrottlingErrorOwCP_0(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((unsigned __int8 *)a2 + 16);
  if (v3 > 3)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  }
  else
  {
    v4 = *a2;
    v5 = a2[1];
    sub_23AB7C174(*a2, v5, v3);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = v3;
  }
  return a1;
}

uint64_t assignWithCopy for ThrottlingError(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v4 > 3)
  {
    if (v5 <= 3)
    {
      v12 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      sub_23AB7C174(*(_QWORD *)a2, v11, v5);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v11;
      *(_BYTE *)(a1 + 16) = v5;
      return a1;
    }
LABEL_7:
    v13 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v13;
    return a1;
  }
  if (v5 > 3)
  {
    sub_23AB7C0C4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4);
    goto LABEL_7;
  }
  v7 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  sub_23AB7C174(*(_QWORD *)a2, v6, v5);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  v10 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_23AB7C0C4(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for ThrottlingError(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 > 3)
    goto LABEL_5;
  v5 = *(unsigned __int8 *)(a2 + 16);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  if (v5 > 3)
  {
    sub_23AB7C0C4(v6, v7, v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    return a1;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5;
  sub_23AB7C0C4(v6, v7, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ThrottlingError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 > 3)
    v4 = (v3 ^ 0xFF) + 1;
  else
    v4 = 0;
  if (v4 >= 5)
    return v4 - 4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ThrottlingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 249;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -4 - a2;
  }
  return result;
}

uint64_t sub_23AB7C8F0(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 > 3)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_23AB7C904(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ThrottlingError()
{
  return &type metadata for ThrottlingError;
}

uint64_t sub_23AB7C93C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23AB7C988 + 4 * byte_23B1CFCBD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23AB7C9BC + 4 * byte_23B1CFCB8[v4]))();
}

uint64_t sub_23AB7C9BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AB7C9C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23AB7C9CCLL);
  return result;
}

uint64_t sub_23AB7C9D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23AB7C9E0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23AB7C9E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AB7C9EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23AB7C9FC()
{
  JUMPOUT(0x23B8613CCLL);
}

unint64_t sub_23AB7CA0C()
{
  unint64_t result;

  result = qword_2542E0DD8;
  if (!qword_2542E0DD8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1CFF40, &type metadata for ThrottlingError);
    atomic_store(result, (unint64_t *)&qword_2542E0DD8);
  }
  return result;
}

uint64_t sub_23AB7CAF0()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v5;
  char *v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    v2 = swift_getAssociatedTypeWitness();
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v6 = &v5;
      swift_getAssociatedConformanceWitness();
      swift_getAssociatedConformanceWitness();
      type metadata accessor for ReconciliationID();
    }
    return v2;
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_23AB7CFE8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  unint64_t v46;
  size_t v47;
  size_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  uint64_t v58;
  size_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  uint64_t *v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  size_t v112;
  int v113;
  size_t v114;
  unint64_t v115;
  unint64_t v116;
  void (*v117)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  void (*v125)(unint64_t, unint64_t, uint64_t);
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  size_t v131;
  size_t v132;
  uint64_t v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  void (*v137)(unint64_t, unint64_t, uint64_t);
  unint64_t v138;
  unint64_t v139;
  _BYTE *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  void *v149;
  const void *v150;
  unsigned int (*v151)(const void *, uint64_t, uint64_t);
  void (*v152)(void);
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  unint64_t v159;
  unint64_t v160;
  void (*v161)(unint64_t, unint64_t, uint64_t);
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  size_t v167;
  size_t v168;
  uint64_t v169;
  int v170;
  unint64_t v171;
  unint64_t v172;
  void (*v173)(unint64_t, unint64_t, uint64_t);
  unint64_t v174;
  unint64_t v175;
  _BYTE *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  unint64_t v183;
  unint64_t v184;
  void *v185;
  const void *v186;
  unsigned int (*v187)(const void *, uint64_t, uint64_t);
  unsigned int v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t *v202;
  unint64_t v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  size_t v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  unsigned int v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  size_t v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unsigned int v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unsigned int v262;
  _QWORD *v263;
  _QWORD *v264;
  unint64_t v265;
  unint64_t v266;
  void *v267;
  const void *v268;
  int v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  _QWORD *v279;
  unint64_t v280;
  uint64_t *v281;
  unint64_t v282;
  _QWORD *v283;
  _QWORD *v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  _QWORD *v289;
  unint64_t v290;
  uint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  int v299;
  _QWORD *v300;
  _QWORD *v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  int v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  unint64_t v324;
  int v325;
  _QWORD *v326;
  _QWORD *v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  int v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  void *v344;
  id v345;
  void *v346;
  id v347;
  uint64_t v348;
  id v349;
  void *v350;
  id v351;
  void *v352;
  id v353;
  uint64_t v354;
  id v355;
  size_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  _QWORD *v361;
  unint64_t v362;
  unint64_t v363;
  void (*v364)(unint64_t, unint64_t, uint64_t);
  _QWORD *v365;
  _QWORD *v366;
  _QWORD *v367;
  _QWORD *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  void *v374;
  void *v375;
  char v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t *v385;
  unint64_t v386;
  uint64_t v387;
  __int128 v388;
  void **v389;
  void *v390;
  _QWORD *v391;
  void *v392;
  const void *v393;
  unsigned int (*v394)(const void *, uint64_t, uint64_t);
  id v395;
  _QWORD *v396;
  _QWORD *v397;
  unint64_t v398;
  unint64_t v399;
  void *v400;
  const void *v401;
  int v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t v405;
  size_t v406;
  size_t v407;
  uint64_t v408;
  _QWORD *v409;
  unint64_t v410;
  unint64_t v411;
  void (*v412)(unint64_t, unint64_t, uint64_t);
  _QWORD *v413;
  _QWORD *v414;
  _QWORD *v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  void *v421;
  void *v422;
  char v423;
  unint64_t v424;
  unint64_t v425;
  uint64_t v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  unint64_t v430;
  uint64_t *v431;
  unint64_t v432;
  uint64_t v433;
  __int128 v434;
  _QWORD *v435;
  void **v436;
  void *v437;
  unint64_t v438;
  unint64_t v439;
  _OWORD *v440;
  _OWORD *v441;
  unint64_t v442;
  unint64_t v443;
  id v444;
  unsigned int v445;
  _OWORD *v446;
  __int128 *v447;
  __int128 v448;
  unint64_t v449;
  unint64_t v450;
  __int128 v451;
  _QWORD *v452;
  uint64_t v453;
  uint64_t v454;
  _QWORD *v455;
  uint64_t v456;
  unint64_t v457;
  char v458;
  unsigned int v459;
  __int16 v460;
  int v461;
  _OWORD *v462;
  __int128 *v463;
  __int128 v464;
  unint64_t v465;
  unint64_t v466;
  __int128 v467;
  _QWORD *v468;
  uint64_t v469;
  uint64_t v470;
  _QWORD *v471;
  uint64_t v472;
  unint64_t v473;
  unsigned int v474;
  unint64_t *v475;
  unint64_t v476;
  unint64_t *v477;
  unint64_t v478;
  BOOL v479;
  uint64_t v480;
  uint64_t v481;
  unsigned int v482;
  BOOL v483;
  uint64_t v484;
  uint64_t v485;
  unsigned int v486;
  BOOL v487;
  uint64_t v488;
  uint64_t v489;
  unsigned int v490;
  BOOL v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t v494;
  unsigned int v495;
  uint64_t v496;
  BOOL v497;
  uint64_t v498;
  uint64_t v499;
  unsigned int v500;
  BOOL v501;
  uint64_t v502;
  uint64_t v503;
  char *v504;
  unint64_t v505;
  unsigned int v506;
  size_t v507;
  char *v508;
  unsigned int v509;
  BOOL v510;
  uint64_t v511;
  uint64_t v512;
  char *v513;
  unint64_t v514;
  unsigned int v515;
  size_t v516;
  char *v517;
  unsigned int v518;
  BOOL v519;
  uint64_t v520;
  uint64_t v521;
  void *v522;
  id v523;
  unsigned int v524;
  BOOL v525;
  uint64_t v526;
  uint64_t v527;
  unsigned int v528;
  BOOL v529;
  uint64_t v530;
  uint64_t v531;
  void *v532;
  id v533;
  unsigned int v534;
  BOOL v535;
  uint64_t v536;
  uint64_t v537;
  void *v538;
  id v539;
  unsigned int v540;
  BOOL v541;
  uint64_t v542;
  uint64_t v543;
  unsigned int v544;
  BOOL v545;
  uint64_t v546;
  unsigned int v547;
  BOOL v548;
  uint64_t v549;
  uint64_t v550;
  unsigned int v551;
  BOOL v552;
  uint64_t v553;
  uint64_t v554;
  unsigned int v555;
  BOOL v556;
  uint64_t v557;
  uint64_t v558;
  unsigned int v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  BOOL v563;
  uint64_t v564;
  uint64_t v565;
  unsigned int v566;
  BOOL v567;
  uint64_t v568;
  uint64_t v569;
  unsigned int v570;
  BOOL v571;
  uint64_t v572;
  uint64_t v573;
  unsigned int v574;
  BOOL v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t v578;
  unsigned int v579;
  uint64_t v580;
  BOOL v581;
  uint64_t v582;
  uint64_t v583;
  unsigned int v584;
  BOOL v585;
  uint64_t v586;
  uint64_t v587;
  unsigned int v588;
  BOOL v589;
  uint64_t v590;
  uint64_t v591;
  unsigned int v592;
  BOOL v593;
  uint64_t v594;
  uint64_t v595;
  unsigned int v596;
  BOOL v597;
  uint64_t v598;
  uint64_t v599;
  unsigned int v600;
  BOOL v601;
  uint64_t v602;
  uint64_t v603;
  unsigned int v604;
  BOOL v605;
  uint64_t v606;
  unsigned int v607;
  BOOL v608;
  uint64_t v609;
  unsigned int v610;
  uint64_t *result;
  unint64_t v612;
  unint64_t v613;
  uint64_t v614;
  size_t v615;
  size_t v616;
  void (*v617)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v618;
  unint64_t v619;
  unint64_t v620;
  _QWORD *v621;
  _QWORD *v622;
  unint64_t v623;
  unint64_t v624;
  void (*v625)(unint64_t, unint64_t, uint64_t);
  _QWORD *v626;
  _QWORD *v627;
  _QWORD *v628;
  _QWORD *v629;
  _QWORD *v630;
  size_t v631;
  size_t v632;
  uint64_t v633;
  int v634;
  unint64_t v635;
  unint64_t v636;
  void (*v637)(unint64_t, unint64_t, uint64_t);
  unint64_t v638;
  unint64_t v639;
  _BYTE *v640;
  unint64_t v641;
  unint64_t v642;
  unint64_t v643;
  unint64_t v644;
  _QWORD *v645;
  _QWORD *v646;
  unint64_t v647;
  unint64_t v648;
  void *v649;
  const void *v650;
  unsigned int (*v651)(const void *, uint64_t, uint64_t);
  _QWORD *v652;
  _QWORD *v653;
  unint64_t v654;
  unint64_t v655;
  uint64_t v656;
  _QWORD *v657;
  _QWORD *v658;
  unint64_t v659;
  uint64_t *v660;
  unint64_t v661;
  uint64_t v662;
  unint64_t v663;
  unint64_t v664;
  uint64_t v665;
  unint64_t v666;
  unint64_t v667;
  int v668;
  _QWORD *v669;
  _QWORD *v670;
  unint64_t v671;
  unint64_t v672;
  unint64_t v673;
  int v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  void *v687;
  id v688;
  void *v689;
  id v690;
  uint64_t v691;
  id v692;
  size_t v693;
  size_t v694;
  void (*v695)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v696;
  unint64_t v697;
  _QWORD *v698;
  _QWORD *v699;
  unint64_t v700;
  unint64_t v701;
  void (*v702)(unint64_t, unint64_t, uint64_t);
  _QWORD *v703;
  _QWORD *v704;
  _QWORD *v705;
  _QWORD *v706;
  _QWORD *v707;
  size_t v708;
  size_t v709;
  size_t v710;
  uint64_t v711;
  int v712;
  unint64_t v713;
  unint64_t v714;
  void (*v715)(unint64_t, unint64_t, uint64_t);
  unint64_t v716;
  unint64_t v717;
  _BYTE *v718;
  unint64_t v719;
  unint64_t v720;
  unint64_t v721;
  unint64_t v722;
  _QWORD *v723;
  _QWORD *v724;
  unint64_t v725;
  unint64_t v726;
  void *v727;
  const void *v728;
  unsigned int (*v729)(const void *, uint64_t, uint64_t);
  _QWORD *v730;
  _QWORD *v731;
  unint64_t v732;
  unint64_t v733;
  uint64_t v734;
  _QWORD *v735;
  _QWORD *v736;
  unint64_t v737;
  uint64_t *v738;
  unint64_t v739;
  uint64_t v740;
  unint64_t v741;
  unint64_t v742;
  uint64_t v743;
  unint64_t v744;
  unint64_t v745;
  int v746;
  _QWORD *v747;
  _QWORD *v748;
  unint64_t v749;
  unint64_t v750;
  unint64_t v751;
  int v752;
  __int128 v753;
  __int128 v754;
  __int128 v755;
  __int128 v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  size_t v765;
  void *v766;
  id v767;
  void *v768;
  id v769;
  uint64_t v770;
  id v771;
  _OWORD *v772;
  __int128 *v773;
  __int128 v774;
  unint64_t v775;
  unint64_t v776;
  __int128 v777;
  _QWORD *v778;
  uint64_t v779;
  uint64_t v780;
  _QWORD *v781;
  uint64_t v782;
  unint64_t v783;
  unint64_t v784;
  int v785;
  uint64_t v786;
  uint64_t v787;
  unint64_t v788;
  unint64_t v789;
  unint64_t v790;
  unint64_t v791;
  unint64_t *v792;
  unint64_t v793;
  unint64_t v794;
  void *v795;
  const void *v796;
  size_t v797;
  unint64_t v798;
  unint64_t v799;
  unint64_t v800;
  size_t v801;
  size_t v802;
  void (*v803)(void *, const void *, uint64_t);
  unint64_t v804;
  unint64_t v805;
  _QWORD *v806;
  _QWORD *v807;
  unint64_t v808;
  unint64_t v809;
  void (*v810)(unint64_t, unint64_t, uint64_t);
  _QWORD *v811;
  _QWORD *v812;
  _QWORD *v813;
  _QWORD *v814;
  _QWORD *v815;
  unint64_t v816;
  unint64_t v817;
  uint64_t v818;
  int v819;
  unint64_t v820;
  unint64_t v821;
  void (*v822)(unint64_t, unint64_t, uint64_t);
  unint64_t v823;
  unint64_t v824;
  _BYTE *v825;
  unint64_t v826;
  unint64_t v827;
  unint64_t v828;
  unint64_t v829;
  _QWORD *v830;
  _QWORD *v831;
  unint64_t v832;
  unint64_t v833;
  void *v834;
  const void *v835;
  unsigned int (*v836)(const void *, uint64_t, uint64_t);
  _QWORD *v837;
  _QWORD *v838;
  unint64_t v839;
  unint64_t v840;
  uint64_t v841;
  _QWORD *v842;
  _QWORD *v843;
  unint64_t v844;
  uint64_t *v845;
  unint64_t v846;
  uint64_t v847;
  unint64_t v848;
  unint64_t v849;
  uint64_t v850;
  unint64_t v851;
  unint64_t v852;
  int v853;
  _QWORD *v854;
  _QWORD *v855;
  unint64_t v856;
  unint64_t v857;
  unint64_t v858;
  int v859;
  __int128 v860;
  __int128 v861;
  __int128 v862;
  __int128 v863;
  __int128 v864;
  __int128 v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  __int128 v869;
  __int128 v870;
  __int128 v871;
  void *v872;
  id v873;
  void *v874;
  id v875;
  uint64_t v876;
  id v877;
  _OWORD *v878;
  __int128 *v879;
  __int128 v880;
  unint64_t v881;
  unint64_t v882;
  __int128 v883;
  _QWORD *v884;
  uint64_t v885;
  uint64_t v886;
  _QWORD *v887;
  uint64_t v888;
  unint64_t v889;
  unint64_t v890;
  uint64_t v891;
  int v892;
  size_t v893;
  size_t v894;
  unint64_t v895;
  unint64_t v896;
  unint64_t v897;
  uint64_t (*v898)(unint64_t);
  unint64_t v899;
  size_t v900;
  unint64_t v901;
  unint64_t *v902;
  unint64_t v903;
  unint64_t v904;
  void *v905;
  const void *v906;
  unint64_t v907;
  size_t v908;
  unint64_t v909;
  unint64_t v910;
  size_t v911;
  uint64_t v912;
  void (*v913)(void *, const void *, uint64_t);
  size_t v914;
  unint64_t v915;
  unint64_t v916;
  _QWORD *v917;
  _QWORD *v918;
  unint64_t v919;
  unint64_t v920;
  void (*v921)(unint64_t, unint64_t, uint64_t);
  _QWORD *v922;
  _QWORD *v923;
  _QWORD *v924;
  _QWORD *v925;
  _QWORD *v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  int v930;
  unint64_t v931;
  unint64_t v932;
  void (*v933)(unint64_t, unint64_t, uint64_t);
  unint64_t v934;
  unint64_t v935;
  _BYTE *v936;
  unint64_t v937;
  unint64_t v938;
  unint64_t v939;
  unint64_t v940;
  _QWORD *v941;
  _QWORD *v942;
  unint64_t v943;
  unint64_t v944;
  void *v945;
  const void *v946;
  unsigned int (*v947)(const void *, uint64_t, uint64_t);
  _QWORD *v948;
  _QWORD *v949;
  unint64_t v950;
  unint64_t v951;
  uint64_t v952;
  _QWORD *v953;
  _QWORD *v954;
  unint64_t v955;
  uint64_t *v956;
  unint64_t v957;
  uint64_t v958;
  unint64_t v959;
  unint64_t v960;
  uint64_t v961;
  unint64_t v962;
  unint64_t v963;
  int v964;
  _QWORD *v965;
  _QWORD *v966;
  unint64_t v967;
  __int128 *v968;
  unint64_t v969;
  int v970;
  __int128 v971;
  __int128 v972;
  __int128 v973;
  __int128 v974;
  __int128 v975;
  __int128 v976;
  __int128 v977;
  __int128 v978;
  __int128 v979;
  __int128 v980;
  __int128 v981;
  __int128 v982;
  void *v983;
  id v984;
  void *v985;
  id v986;
  uint64_t v987;
  id v988;
  _OWORD *v989;
  __int128 *v990;
  __int128 v991;
  unint64_t v992;
  unint64_t v993;
  __int128 v994;
  _QWORD *v995;
  uint64_t v996;
  uint64_t v997;
  _QWORD *v998;
  uint64_t v999;
  unint64_t v1000;
  unint64_t v1001;
  unint64_t v1002;
  char v1003;
  unsigned int v1004;
  __int16 v1005;
  int v1006;
  _OWORD *v1007;
  __int128 *v1008;
  __int128 v1009;
  unint64_t v1010;
  unint64_t v1011;
  __int128 v1012;
  _QWORD *v1013;
  uint64_t v1014;
  uint64_t v1015;
  _QWORD *v1016;
  uint64_t v1017;
  unint64_t v1018;
  unint64_t v1019;
  unsigned int v1020;
  uint64_t v1021;
  uint64_t v1022;
  size_t v1023;
  void (*v1024)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v1025;
  int v1026;
  size_t v1027;
  void *v1028;
  void *v1029;
  uint64_t v1030;
  size_t v1031;
  void (*v1032)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v1033;
  void *v1034;
  int v1035;
  uint64_t v1036;
  void *v1037;
  const void *v1038;
  uint64_t v1039;
  size_t v1040;
  void (*v1041)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v1042;
  int v1043;
  size_t v1044;
  void *v1045;
  void *v1046;
  uint64_t *v1047;
  char v1048;
  void *v1049;
  const void *v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  void (*v1054)(uint64_t *, uint64_t *, uint64_t);
  const void *v1055;
  int v1056;
  uint64_t v1057;
  uint64_t v1058;
  unint64_t v1059;
  void (*v1060)(uint64_t *, uint64_t *, uint64_t);
  int v1061;
  uint64_t v1062;
  uint64_t v1063;
  unint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  void *v1067;
  const void *v1068;
  uint64_t v1069;
  uint64_t v1070;
  void (*v1071)(uint64_t *, uint64_t *, uint64_t);
  const void *v1072;
  int v1073;
  uint64_t v1074;
  uint64_t v1075;
  unint64_t v1076;
  char v1077;
  void *v1078;
  const void *v1079;
  unint64_t v1080;
  unint64_t v1081;
  unint64_t v1082;
  unint64_t v1083;
  unint64_t v1084;
  unint64_t v1085;
  unint64_t v1086;
  unint64_t v1087;
  unint64_t v1088;
  unint64_t v1089;
  unint64_t v1090;
  unint64_t v1091;
  unint64_t v1092;
  char *v1093;
  _BYTE *v1094;
  int v1095;
  uint64_t *v1096;
  uint64_t v1097;
  char *v1098;
  char *v1099;
  int v1100;
  uint64_t *v1101;
  uint64_t v1102;
  uint64_t v1103;
  size_t v1104;
  size_t v1105;
  unint64_t v1106;
  size_t v1107;
  unint64_t v1108;
  uint64_t v1109;
  size_t v1110;
  size_t v1111;
  unint64_t v1112;
  size_t v1113;
  unint64_t v1114;
  size_t v1115;
  unint64_t v1116;
  size_t v1117;
  unint64_t v1118;
  size_t v1119;
  _QWORD *v1120;
  unint64_t v1121;
  unint64_t v1122;
  void (*v1123)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1124;
  unint64_t v1125;
  _QWORD *v1126;
  _QWORD *v1127;
  char *v1128;
  void *v1129;
  id v1130;
  size_t v1131;
  uint64_t v1132;
  _QWORD *v1133;
  unint64_t v1134;
  unint64_t v1135;
  void (*v1136)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1137;
  _QWORD *v1138;
  _QWORD *v1139;
  _QWORD *v1140;
  char *v1141;
  void *v1142;
  unint64_t *v1143;
  unint64_t v1144;
  unint64_t *v1145;
  unint64_t v1146;
  unint64_t *v1147;
  unint64_t v1148;
  unint64_t *v1149;
  unint64_t v1150;
  unint64_t *v1151;
  unint64_t v1152;
  unint64_t *v1153;
  unint64_t v1154;
  unint64_t v1155;
  unint64_t v1156;
  unint64_t v1157;
  unint64_t v1158;
  unint64_t v1159;
  unint64_t v1160;
  unint64_t v1161;
  size_t v1162;
  size_t v1163;
  unint64_t v1164;
  _QWORD *v1165;
  _QWORD *v1166;
  unint64_t v1167;
  unint64_t v1168;
  void (*v1169)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1170;
  _QWORD *v1171;
  _QWORD *v1172;
  _QWORD *v1173;
  _QWORD *v1174;
  size_t v1175;
  size_t v1176;
  uint64_t v1177;
  int v1178;
  unint64_t v1179;
  unint64_t v1180;
  void (*v1181)(unint64_t, unint64_t, uint64_t);
  unint64_t v1182;
  unint64_t v1183;
  _BYTE *v1184;
  unint64_t v1185;
  unint64_t v1186;
  unint64_t v1187;
  unint64_t v1188;
  _QWORD *v1189;
  _QWORD *v1190;
  unint64_t v1191;
  unint64_t v1192;
  void *v1193;
  const void *v1194;
  unsigned int (*v1195)(const void *, uint64_t, uint64_t);
  _QWORD *v1196;
  _QWORD *v1197;
  unint64_t v1198;
  unint64_t v1199;
  uint64_t v1200;
  _QWORD *v1201;
  _QWORD *v1202;
  unint64_t v1203;
  uint64_t *v1204;
  unint64_t v1205;
  uint64_t v1206;
  unint64_t v1207;
  unint64_t v1208;
  uint64_t v1209;
  unint64_t v1210;
  unint64_t v1211;
  int v1212;
  _QWORD *v1213;
  _QWORD *v1214;
  size_t v1215;
  size_t v1216;
  unint64_t v1217;
  int v1218;
  __int128 v1219;
  __int128 v1220;
  __int128 v1221;
  __int128 v1222;
  __int128 v1223;
  __int128 v1224;
  __int128 v1225;
  __int128 v1226;
  __int128 v1227;
  __int128 v1228;
  __int128 v1229;
  __int128 v1230;
  void *v1231;
  id v1232;
  void *v1233;
  id v1234;
  uint64_t v1235;
  id v1236;
  unint64_t v1237;
  unint64_t v1238;
  size_t v1239;
  size_t v1240;
  unint64_t v1241;
  unint64_t v1242;
  _QWORD *v1243;
  _QWORD *v1244;
  unint64_t v1245;
  unint64_t v1246;
  void (*v1247)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1248;
  _QWORD *v1249;
  _QWORD *v1250;
  _QWORD *v1251;
  _QWORD *v1252;
  size_t v1253;
  size_t v1254;
  uint64_t v1255;
  int v1256;
  unint64_t v1257;
  unint64_t v1258;
  void (*v1259)(unint64_t, unint64_t, uint64_t);
  unint64_t v1260;
  unint64_t v1261;
  _BYTE *v1262;
  unint64_t v1263;
  unint64_t v1264;
  unint64_t v1265;
  unint64_t v1266;
  _QWORD *v1267;
  _QWORD *v1268;
  unint64_t v1269;
  unint64_t v1270;
  void *v1271;
  const void *v1272;
  unsigned int (*v1273)(const void *, uint64_t, uint64_t);
  _QWORD *v1274;
  _QWORD *v1275;
  unint64_t v1276;
  unint64_t v1277;
  uint64_t v1278;
  _QWORD *v1279;
  _QWORD *v1280;
  unint64_t v1281;
  uint64_t *v1282;
  unint64_t v1283;
  uint64_t v1284;
  unint64_t v1285;
  unint64_t v1286;
  uint64_t v1287;
  unint64_t v1288;
  unint64_t v1289;
  int v1290;
  _QWORD *v1291;
  _QWORD *v1292;
  size_t v1293;
  size_t v1294;
  unint64_t v1295;
  int v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  __int128 v1305;
  __int128 v1306;
  __int128 v1307;
  __int128 v1308;
  void *v1309;
  id v1310;
  void *v1311;
  id v1312;
  uint64_t v1313;
  id v1314;
  unint64_t v1315;
  size_t v1316;
  size_t v1317;
  unint64_t v1318;
  _QWORD *v1319;
  _QWORD *v1320;
  unint64_t v1321;
  unint64_t v1322;
  void (*v1323)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1324;
  _QWORD *v1325;
  _QWORD *v1326;
  _QWORD *v1327;
  _QWORD *v1328;
  size_t v1329;
  size_t v1330;
  uint64_t v1331;
  int v1332;
  unint64_t v1333;
  unint64_t v1334;
  void (*v1335)(unint64_t, unint64_t, uint64_t);
  unint64_t v1336;
  unint64_t v1337;
  _BYTE *v1338;
  unint64_t v1339;
  unint64_t v1340;
  unint64_t v1341;
  unint64_t v1342;
  _QWORD *v1343;
  _QWORD *v1344;
  unint64_t v1345;
  unint64_t v1346;
  void *v1347;
  const void *v1348;
  unsigned int (*v1349)(const void *, uint64_t, uint64_t);
  _QWORD *v1350;
  _QWORD *v1351;
  unint64_t v1352;
  unint64_t v1353;
  uint64_t v1354;
  _QWORD *v1355;
  _QWORD *v1356;
  unint64_t v1357;
  uint64_t *v1358;
  unint64_t v1359;
  uint64_t v1360;
  unint64_t v1361;
  unint64_t v1362;
  uint64_t v1363;
  unint64_t v1364;
  unint64_t v1365;
  int v1366;
  _QWORD *v1367;
  _QWORD *v1368;
  size_t v1369;
  size_t v1370;
  unint64_t v1371;
  int v1372;
  __int128 v1373;
  __int128 v1374;
  __int128 v1375;
  __int128 v1376;
  __int128 v1377;
  __int128 v1378;
  __int128 v1379;
  __int128 v1380;
  __int128 v1381;
  __int128 v1382;
  __int128 v1383;
  __int128 v1384;
  void *v1385;
  id v1386;
  void *v1387;
  id v1388;
  uint64_t v1389;
  id v1390;
  unint64_t v1391;
  unint64_t v1392;
  size_t v1393;
  size_t v1394;
  uint64_t v1395;
  unint64_t v1396;
  unint64_t v1397;
  _QWORD *v1398;
  _QWORD *v1399;
  unint64_t v1400;
  unint64_t v1401;
  void (*v1402)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1403;
  _QWORD *v1404;
  _QWORD *v1405;
  _QWORD *v1406;
  _QWORD *v1407;
  size_t v1408;
  size_t v1409;
  uint64_t v1410;
  int v1411;
  unint64_t v1412;
  unint64_t v1413;
  void (*v1414)(unint64_t, unint64_t, uint64_t);
  unint64_t v1415;
  unint64_t v1416;
  _BYTE *v1417;
  unint64_t v1418;
  unint64_t v1419;
  unint64_t v1420;
  unint64_t v1421;
  _QWORD *v1422;
  _QWORD *v1423;
  unint64_t v1424;
  unint64_t v1425;
  void *v1426;
  const void *v1427;
  unsigned int (*v1428)(const void *, uint64_t, uint64_t);
  _QWORD *v1429;
  _QWORD *v1430;
  unint64_t v1431;
  unint64_t v1432;
  uint64_t v1433;
  _QWORD *v1434;
  _QWORD *v1435;
  unint64_t v1436;
  uint64_t *v1437;
  unint64_t v1438;
  uint64_t v1439;
  unint64_t v1440;
  unint64_t v1441;
  uint64_t v1442;
  unint64_t v1443;
  unint64_t v1444;
  int v1445;
  _QWORD *v1446;
  _QWORD *v1447;
  unint64_t v1448;
  unint64_t v1449;
  unint64_t v1450;
  int v1451;
  __int128 v1452;
  __int128 v1453;
  __int128 v1454;
  __int128 v1455;
  __int128 v1456;
  __int128 v1457;
  __int128 v1458;
  __int128 v1459;
  __int128 v1460;
  __int128 v1461;
  __int128 v1462;
  __int128 v1463;
  void *v1464;
  id v1465;
  void *v1466;
  id v1467;
  uint64_t v1468;
  id v1469;
  unint64_t v1470;
  unint64_t v1471;
  size_t v1472;
  uint64_t v1473;
  unint64_t v1474;
  unint64_t v1475;
  _QWORD *v1476;
  _QWORD *v1477;
  unint64_t v1478;
  unint64_t v1479;
  void (*v1480)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1481;
  _QWORD *v1482;
  _QWORD *v1483;
  _QWORD *v1484;
  _QWORD *v1485;
  size_t v1486;
  size_t v1487;
  uint64_t v1488;
  int v1489;
  unint64_t v1490;
  unint64_t v1491;
  void (*v1492)(unint64_t, unint64_t, uint64_t);
  unint64_t v1493;
  unint64_t v1494;
  _BYTE *v1495;
  unint64_t v1496;
  unint64_t v1497;
  unint64_t v1498;
  unint64_t v1499;
  _QWORD *v1500;
  _QWORD *v1501;
  unint64_t v1502;
  unint64_t v1503;
  void *v1504;
  const void *v1505;
  unsigned int (*v1506)(const void *, uint64_t, uint64_t);
  _QWORD *v1507;
  _QWORD *v1508;
  unint64_t v1509;
  unint64_t v1510;
  uint64_t v1511;
  _QWORD *v1512;
  _QWORD *v1513;
  unint64_t v1514;
  uint64_t *v1515;
  unint64_t v1516;
  uint64_t v1517;
  unint64_t v1518;
  unint64_t v1519;
  uint64_t v1520;
  unint64_t v1521;
  unint64_t v1522;
  int v1523;
  _QWORD *v1524;
  _QWORD *v1525;
  unint64_t v1526;
  unint64_t v1527;
  unint64_t v1528;
  int v1529;
  __int128 v1530;
  __int128 v1531;
  __int128 v1532;
  __int128 v1533;
  __int128 v1534;
  __int128 v1535;
  __int128 v1536;
  __int128 v1537;
  __int128 v1538;
  __int128 v1539;
  __int128 v1540;
  __int128 v1541;
  void *v1542;
  id v1543;
  void *v1544;
  id v1545;
  uint64_t v1546;
  id v1547;
  unint64_t v1548;
  unint64_t v1549;
  size_t v1550;
  size_t v1551;
  unint64_t v1552;
  uint64_t v1553;
  unint64_t v1554;
  unint64_t v1555;
  _QWORD *v1556;
  _QWORD *v1557;
  unint64_t v1558;
  unint64_t v1559;
  void (*v1560)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1561;
  _QWORD *v1562;
  _QWORD *v1563;
  _QWORD *v1564;
  _QWORD *v1565;
  size_t v1566;
  size_t v1567;
  uint64_t v1568;
  int v1569;
  unint64_t v1570;
  unint64_t v1571;
  void (*v1572)(unint64_t, unint64_t, uint64_t);
  unint64_t v1573;
  unint64_t v1574;
  _BYTE *v1575;
  unint64_t v1576;
  unint64_t v1577;
  unint64_t v1578;
  unint64_t v1579;
  _QWORD *v1580;
  _QWORD *v1581;
  unint64_t v1582;
  unint64_t v1583;
  void *v1584;
  const void *v1585;
  unsigned int (*v1586)(const void *, uint64_t, uint64_t);
  _QWORD *v1587;
  _QWORD *v1588;
  unint64_t v1589;
  unint64_t v1590;
  uint64_t v1591;
  _QWORD *v1592;
  _QWORD *v1593;
  unint64_t v1594;
  uint64_t *v1595;
  unint64_t v1596;
  uint64_t v1597;
  unint64_t v1598;
  unint64_t v1599;
  uint64_t v1600;
  unint64_t v1601;
  unint64_t v1602;
  int v1603;
  _QWORD *v1604;
  _QWORD *v1605;
  unint64_t v1606;
  unint64_t v1607;
  unint64_t v1608;
  int v1609;
  __int128 v1610;
  __int128 v1611;
  __int128 v1612;
  __int128 v1613;
  __int128 v1614;
  __int128 v1615;
  __int128 v1616;
  __int128 v1617;
  __int128 v1618;
  __int128 v1619;
  __int128 v1620;
  __int128 v1621;
  void *v1622;
  id v1623;
  void *v1624;
  id v1625;
  uint64_t v1626;
  id v1627;
  _OWORD *v1628;
  __int128 *v1629;
  __int128 v1630;
  unint64_t v1631;
  unint64_t v1632;
  __int128 v1633;
  _QWORD *v1634;
  uint64_t v1635;
  uint64_t v1636;
  _QWORD *v1637;
  uint64_t v1638;
  unint64_t v1639;
  unint64_t v1640;
  _QWORD *v1641;
  _QWORD *v1642;
  void *v1643;
  id v1644;
  _OWORD *v1645;
  __int128 *v1646;
  __int128 v1647;
  unint64_t v1648;
  unint64_t v1649;
  __int128 v1650;
  _QWORD *v1651;
  uint64_t v1652;
  uint64_t v1653;
  _QWORD *v1654;
  unint64_t v1655;
  uint64_t v1656;
  unint64_t v1657;
  void *v1658;
  const void *v1659;
  char *v1660;
  char *v1661;
  int v1662;
  uint64_t *v1663;
  uint64_t v1664;
  size_t v1665;
  _QWORD *v1666;
  unint64_t v1667;
  unint64_t v1668;
  void (*v1669)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1670;
  unint64_t v1671;
  _QWORD *v1672;
  _QWORD *v1673;
  _QWORD *v1674;
  _QWORD *v1675;
  void *v1676;
  id v1677;
  _OWORD *v1678;
  __int128 *v1679;
  __int128 v1680;
  unint64_t v1681;
  unint64_t v1682;
  __int128 v1683;
  _QWORD *v1684;
  uint64_t v1685;
  uint64_t v1686;
  _QWORD *v1687;
  uint64_t v1688;
  unint64_t v1689;
  unint64_t v1690;
  _QWORD *v1691;
  _QWORD *v1692;
  _OWORD *v1693;
  __int128 *v1694;
  __int128 v1695;
  unint64_t v1696;
  unint64_t v1697;
  __int128 v1698;
  _QWORD *v1699;
  uint64_t v1700;
  uint64_t v1701;
  _QWORD *v1702;
  uint64_t v1703;
  unint64_t v1704;
  unint64_t v1705;
  _QWORD *v1706;
  _QWORD *v1707;
  void *v1708;
  id v1709;
  _OWORD *v1710;
  __int128 *v1711;
  __int128 v1712;
  unint64_t v1713;
  unint64_t v1714;
  __int128 v1715;
  _QWORD *v1716;
  uint64_t v1717;
  uint64_t v1718;
  _QWORD *v1719;
  uint64_t v1720;
  unint64_t v1721;
  unint64_t v1722;
  void *v1723;
  const void *v1724;
  char *v1725;
  char *v1726;
  int v1727;
  uint64_t v1728;
  uint64_t *v1729;
  uint64_t v1730;
  size_t v1731;
  size_t v1732;
  uint64_t v1733;
  _QWORD *v1734;
  unint64_t v1735;
  unint64_t v1736;
  uint64_t v1737;
  void (*v1738)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1739;
  _QWORD *v1740;
  _QWORD *v1741;
  _QWORD *v1742;
  _QWORD *v1743;
  _QWORD *v1744;
  id v1745;
  _OWORD *v1746;
  __int128 *v1747;
  __int128 v1748;
  unint64_t v1749;
  unint64_t v1750;
  __int128 v1751;
  _QWORD *v1752;
  uint64_t v1753;
  uint64_t v1754;
  _QWORD *v1755;
  uint64_t v1756;
  unint64_t v1757;
  unint64_t v1758;
  _QWORD *v1759;
  _QWORD *v1760;
  unsigned int v1761;
  unint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  size_t v1765;
  size_t v1766;
  size_t v1767;
  size_t v1768;
  size_t v1769;
  size_t v1770;
  size_t v1771;
  size_t v1772;
  size_t v1773;
  size_t v1774;
  unint64_t v1775;
  uint64_t v1776;
  size_t v1777;
  size_t v1778;
  uint64_t v1779;
  unint64_t v1780;
  uint64_t v1781;
  size_t v1782;
  size_t v1783;
  unint64_t v1784;
  unint64_t v1785;
  size_t v1786;
  unsigned int v1787;
  unsigned int v1788;
  unsigned int v1789;
  unint64_t v1790;
  unsigned int v1791;
  unsigned int v1792;
  unint64_t v1793;
  unint64_t v1794;
  size_t v1795;
  uint64_t v1796;
  size_t v1797;
  unint64_t v1798;
  unint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  unsigned int v1802;
  unsigned int v1803;
  unsigned int v1804;
  unsigned int v1805;
  unsigned int v1806;
  unint64_t v1807;
  unint64_t v1808;
  unint64_t v1809;
  unint64_t v1810;
  unint64_t v1811;
  unint64_t v1812;
  unsigned int v1813;
  unint64_t v1814;
  unsigned int v1815;
  uint64_t v1816;
  uint64_t v1817;
  unint64_t v1818;
  unint64_t v1819;
  unsigned int v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  unint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  unint64_t v1833;
  uint64_t v1834;
  size_t v1835;
  size_t v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  unint64_t v1840;
  uint64_t v1841;
  size_t __n;
  size_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t AssociatedTypeWitness;
  uint64_t v1847;
  uint64_t v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  int v1853;
  unint64_t v1854;
  unint64_t v1855;
  int v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  int v1864;
  unint64_t v1865;
  unint64_t v1866;
  unint64_t v1867;
  unint64_t v1868;
  unint64_t v1869;
  unint64_t v1870;
  unint64_t v1871;
  unint64_t v1872;
  int v1873;
  size_t v1874;
  int v1875;
  uint64_t v1876;
  unint64_t v1877;
  unint64_t v1878;
  uint64_t v1879;
  unint64_t v1880;
  unint64_t v1881;
  unint64_t v1882;
  uint64_t v1883;
  uint64_t v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  unint64_t v1889;
  uint64_t v1890;
  unsigned int v1891;
  unint64_t v1892;
  unint64_t v1893;
  unint64_t v1894;
  unint64_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  unint64_t v1898;
  size_t v1899;
  size_t v1900;
  unint64_t v1901;
  uint64_t v1902;
  void *v1903;
  unint64_t v1905;
  void *v1906;
  size_t v1907;
  void *v1908;
  size_t v1909;
  void *v1910;
  void *v1911;
  uint64_t v1912;
  unint64_t v1913;
  unint64_t v1914;
  void *v1915;
  void *v1916;
  void *v1917;
  size_t v1918;
  void *v1919;
  void *v1920;
  void *v1921;
  uint64_t v1922;
  unint64_t v1923;
  void *v1924;
  void *v1925;
  size_t v1926;
  void *v1927;
  const void *v1928;
  const void *v1929;
  void *v1930;
  void *v1931;
  void *v1932;
  size_t v1933;
  void *v1934;
  void *v1935;

  v4 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v1883 = *(_QWORD *)(a3 + 24);
  v1845 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v1845 - 8);
  v1875 = *(_DWORD *)(v7 + 80);
  v1812 = v6 + v1875;
  v1889 = v1812 & ~(unint64_t)v1875;
  v8 = *(_QWORD *)(v7 + 64);
  v1895 = v8;
  v9 = v1889 + v8;
  v1892 = v1889 + v8;
  if (v8 <= v6)
    v8 = v6;
  v10 = v6;
  v1881 = v8;
  v11 = v8 + 1;
  v1909 = v8 + 1;
  if (v8 + 1 > v9)
    v9 = v8 + 1;
  v12 = *(_DWORD *)(v5 + 84);
  v1844 = v5;
  v1873 = *(_DWORD *)(v5 + 80);
  v13 = v1873 | (unint64_t)*(_DWORD *)(v7 + 80);
  v1882 = v13;
  v1840 = v13 + v11;
  if (((v13 + v11) & ~v13) + v11 > v9)
    v9 = ((v13 + v11) & ~v13) + v11;
  v1893 = ((v13 + v11) & ~v13) + v11;
  v1894 = v9;
  v1884 = v4;
  v1826 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v1826 - 8);
  v15 = *(_DWORD *)(v14 + 84);
  v1823 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v1823 - 8);
  v17 = *(_DWORD *)(v16 + 84);
  v1787 = v17;
  v1805 = v15;
  if (v15 > v17)
    v17 = v15;
  v1791 = v17;
  if (v17 <= 0x7FFFFFFE)
    v17 = 2147483646;
  v1891 = v12;
  v1815 = v17;
  if (v17 <= v12)
    v18 = v12;
  else
    v18 = v17;
  v1838 = sub_23B1C5BDC();
  v19 = *(_QWORD *)(v1838 - 8);
  v20 = *(_DWORD *)(v19 + 84);
  if (v20 <= 0x7FFFFFFE)
    v21 = 2147483646;
  else
    v21 = *(_DWORD *)(v19 + 84);
  if (v18 <= v21)
    v22 = v21;
  else
    v22 = v18;
  v1789 = v22;
  if (v22 <= 0x7FFFFFFF)
    v22 = 0x7FFFFFFF;
  v1803 = v22;
  v1813 = *(_DWORD *)(v19 + 84);
  v1898 = v10;
  v1819 = v10 + v1873;
  v1912 = v1873;
  v1856 = *(_DWORD *)(v14 + 80);
  v1853 = *(_DWORD *)(v16 + 80);
  v23 = v1856 & 0xF8 | v1853 | 7u;
  v1801 = v10 + v23;
  v1922 = v23;
  v1825 = v14;
  v1832 = *(_QWORD *)(v14 + 64) + 7;
  v1821 = v1853 + 8;
  v1822 = v16;
  v1816 = *(_QWORD *)(v16 + 64) + 7;
  v1900 = ((((v1816 + ((v1821 + (v1832 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v1853)) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  v1864 = *(_DWORD *)(v19 + 80);
  v24 = v1864 | 7;
  v1902 = v24 + 16;
  v1841 = v1864 + 12;
  v25 = *(_QWORD *)(v19 + 64);
  v1836 = v25 + v1864;
  v1837 = *(_QWORD *)(v1838 - 8);
  v1786 = v25 + 12;
  v1834 = v1864 + 10;
  v1843 = v25;
  if (v20)
    v26 = *(_QWORD *)(v19 + 64);
  else
    v26 = v25 + 1;
  __n = v26;
  v1818 = (v1834
         + ((((((v25
               + 12
               + ((v1836 + (v1841 & ~(unint64_t)*(_DWORD *)(v19 + 80))) & ~(unint64_t)*(_DWORD *)(v19 + 80))) & 0xFFFFFFFFFFFFFFF8)
             + 47) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(_DWORD *)(v19 + 80);
  v1835 = v26 + 7;
  v1901 = ((((((((((v26 + 7 + v1818) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 19) & 0xFFFFFFFFFFFFFFF8)
          + 25) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  v1814 = (v24
         + 16
         + ((v10 + v23 + ((v10 + v1873) & ~(unint64_t)v1873)) & ~v23)
         + v1900) & ~v24;
  v27 = (((v1814 + v1901 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v1899 = v27 + 16;
  v1879 = v23 | v1873;
  v28 = v1879 | v1864;
  v1811 = v27 + 23;
  v1877 = ((v27 + 23 + ((v27 + 16 + v28) & ~v28)) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1847 = v7;
  v29 = *(_DWORD *)(v7 + 84);
  v1828 = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(v1828 - 8);
  v31 = *(_DWORD *)(v30 + 84);
  v1830 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v1830 - 8);
  v34 = *(_DWORD *)(v32 + 80);
  v33 = *(_DWORD *)(v32 + 84);
  v1806 = v31;
  if (v31 > v33)
    v33 = v31;
  v1792 = v33;
  if (v33 <= 0x7FFFFFFE)
    v33 = 2147483646;
  v1820 = v33;
  if (v33 <= v29)
    v33 = v29;
  if (v33 <= v21)
    v33 = v21;
  v1788 = v33;
  if (v33 <= 0x7FFFFFFF)
    v33 = 0x7FFFFFFF;
  v1802 = v33;
  v35 = v1875;
  v1833 = v1895 + v1875;
  v36 = *(_DWORD *)(v30 + 80);
  v37 = *(_DWORD *)(v32 + 80);
  v38 = v36 & 0xF8 | *(_DWORD *)(v32 + 80) | 7u;
  v1800 = v1895 + v38;
  v1827 = v30;
  v1839 = *(_QWORD *)(v30 + 64) + 7;
  v1831 = v37 + 8;
  v1829 = *(_QWORD *)(v1830 - 8);
  v1817 = *(_QWORD *)(v32 + 64) + 7;
  v39 = ((((v1817 + ((v37 + 8 + (v1839 & 0xFFFFFFFFFFFFFFF8)) & ~v37)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v1849 = v1864 | 7;
  v1799 = (v1902 + ((v1895 + v38 + ((v1895 + v35) & ~v35)) & ~v38) + v39) & ~v24;
  v40 = (((v1799 + v1901 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v41 = v40 + 16;
  v42 = v38 | v1875;
  v43 = v42 | v1864;
  v44 = v40 + ((v40 + 16 + v43) & ~v43);
  v1876 = v1879 | v1864;
  v1785 = v28 + v1898;
  v45 = v1899 + ((v28 + v1898) & ~v28);
  v46 = (v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  v47 = (v45 + v35) & ~v35;
  v1804 = v29;
  if (v29)
    v48 = v1895;
  else
    v48 = v1895 + 1;
  v49 = *(_QWORD *)(v1884 - 8);
  v50 = ((((((v48 + v38 + v47) & ~v38) + v39 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1783 = v48 + v38;
  v51 = v39 + ((v48 + v38 + v1889) & ~v38) + 16;
  if (*(_DWORD *)(v49 + 84))
    v52 = *(_QWORD *)(v49 + 64);
  else
    v52 = *(_QWORD *)(v49 + 64) + 1;
  if (v1898 <= ((v46 + 15) & 0xFFFFFFFFFFFFFFF8) + 8)
    v53 = ((v46 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v53 = v1898;
  if (v50 > v51)
    v51 = v50;
  v54 = ((v46 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v55 = *(_DWORD *)(v49 + 80);
  v1781 = v1898 + v55;
  v1778 = v52;
  if (v54 <= ((v1898 + v55) & ~v55) + v52)
    v54 = ((v1898 + v55) & ~v55) + v52;
  if (v53 > v51)
    v51 = v53;
  if (v51 <= v54)
    v56 = v54;
  else
    v56 = v51;
  if (v1891)
    v57 = v1898;
  else
    v57 = v1898 + 1;
  v58 = *(_QWORD *)(v1883 - 8);
  v1890 = v38 | v1875 | v1864;
  v1784 = v43 + v1895;
  v59 = v41 + ((v43 + v1895) & ~v43);
  v60 = (v59 + 7) & 0xFFFFFFFFFFFFFFF8;
  v61 = ((v60 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v62 = v1873;
  v63 = v1856 & 0xF8 | v1853 | 7u;
  v64 = ((((((v57 + v63 + ((v59 + v62) & ~v62)) & ~v63) + v1900 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v1780 = v1895 + v1873;
  v1782 = v57 + v1922;
  v65 = v1900 + ((v57 + v63 + ((v1895 + v62) & ~v62)) & ~v63) + 16;
  if (*(_DWORD *)(v58 + 84))
    v66 = *(_QWORD *)(v58 + 64);
  else
    v66 = *(_QWORD *)(v58 + 64) + 1;
  if (v1895 > v61)
    v61 = v1895;
  if (v64 > v65)
    v65 = v64;
  v67 = ((v60 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v68 = *(_DWORD *)(v58 + 80);
  v1779 = v1895 + v68;
  v1777 = v66;
  if (v67 <= ((v1895 + v68) & ~v68) + v66)
    v67 = ((v1895 + v68) & ~v68) + v66;
  if (v61 <= v65)
    v61 = v65;
  if (v61 <= v67)
    v69 = v67;
  else
    v69 = v61;
  v1790 = v69;
  v70 = v69 + 1;
  v1798 = v56;
  if (v70 <= v56 + 1)
    v71 = v56 + 1;
  else
    v71 = v70;
  v72 = v1881 + 2;
  v1824 = v1881 + 2;
  if (v1909 > v1881 + 2)
    v72 = v1881 + 1;
  if (v72 <= v1877)
    v72 = v1877;
  v1797 = v57;
  v1795 = v48 + 7;
  v1796 = v38 + 9;
  v1793 = ((((((((v1922 + ((((v57 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v1922) + v1900 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + v42
        + 8;
  v1808 = ((v44 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v72 <= v1808)
    v73 = ((v44 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v73 = v72;
  if (v73 <= v1899)
    v73 = v1899;
  if (v73 <= v41)
    v73 = v41;
  v1807 = v1893 + 2;
  if (v73 <= v1893 + 2)
    v73 = v1893 + 2;
  v1809 = ((v1881 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1810 = (v1881 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v73 <= v1809)
    v73 = ((v1881 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v73 <= (v1881 & 0xFFFFFFFFFFFFFFF8) + 16)
    v73 = (v1881 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v73 <= v1892)
    v73 = v1892;
  v1878 = ((v1882 + 1) & ~v1882) + v1909;
  if (v73 <= v1878)
    v73 = ((v1882 + 1) & ~v1882) + v1909;
  if (v73 <= v71 + 1)
    v73 = v71 + 1;
  if (v73 <= v1893)
    v73 = v1893;
  if (v73 <= ((((((((((((v38 + 9 + ((((v48 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v38)
                      + v39
                      + 34) & 0xFFFFFFFFFFFFFFF8)
                    + 63) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 8
                + (v1793 & ~v42)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 39) & 0xFFFFFFFFFFFFFFF8)
            + 8)
    v73 = ((((((((((((v38 + 9 + ((((v48 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v38) + v39 + 34) & 0xFFFFFFFFFFFFFFF8)
                + 63) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 8
            + (v1793 & ~v42)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 39) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  if (v73 <= v1894)
    v73 = v1894;
  if (v73 <= 0x38)
    v74 = 56;
  else
    v74 = v73;
  v1794 = ((((((((v38 + 9 + ((((v48 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v38) + v39 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  if (v74 > 3)
    goto LABEL_109;
  v75 = ((1 << (8 * v74)) + 5) >> (8 * v74);
  v76 = 2;
  if (v75 > 0xFFD8)
    v76 = 4;
  if (v75 <= 0xD8)
LABEL_109:
    v76 = 1;
  v77 = v1879 | v1890 | v55 | v68;
  if (v77 != 7
    || ((v1873 | v1875 | v1856 | v1853 | v1864 | v36 | v34 | *(_DWORD *)(v49 + 80) | *(_DWORD *)(v58 + 80)) & 0x100000) != 0
    || (unint64_t)(v76 + v74) > 0x18)
  {
    v80 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v80 + ((v77 + 16) & ~v77));
    swift_retain();
    return a1;
  }
  if (v74 > 3)
    goto LABEL_116;
  v78 = ((1 << (8 * v74)) + 5) >> (8 * v74);
  if (v78 > 0xFFD8)
  {
    v79 = *(_DWORD *)((char *)a2 + v74);
    if (v79 < 0x27)
      goto LABEL_126;
    goto LABEL_122;
  }
  if (v78 <= 0xD8)
  {
LABEL_116:
    v79 = *((unsigned __int8 *)a2 + v74);
    if (v79 < 0x27)
      goto LABEL_126;
LABEL_122:
    if (v74 <= 3)
      v81 = v74;
    else
      v81 = 4;
    __asm { BR              X15 }
  }
  v79 = *(unsigned __int16 *)((char *)a2 + v74);
  if (v79 >= 0x27)
    goto LABEL_122;
LABEL_126:
  v1775 = ((((((((((((v38 + 9 + ((((v48 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v38) + v39 + 34) & 0xFFFFFFFFFFFFFFF8)
                + 63) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 8
            + (v1793 & ~v42)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 39) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  v1776 = v74;
  v1874 = v48;
  v1880 = v71 + 1;
  v82 = v1856 & 0xF8 | v1853 | 7u;
  v83 = ~(unint64_t)v1875;
  v84 = ~v1882;
  v85 = ~v1912;
  v86 = ~v1922;
  v87 = ~(unint64_t)v1853;
  v88 = ~v1849;
  v89 = ~(unint64_t)v1864;
  v90 = ~v38;
  switch(v79)
  {
    case 0u:
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v1844 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1847 + 16))(((unint64_t)a1 + v1812) & v83, ((unint64_t)a2 + v1812) & v83, v1845);
      if (v1776 > 3)
        goto LABEL_128;
      v242 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v242 > 0xFFD8)
      {
        *(_DWORD *)((char *)a1 + v1776) = 0;
      }
      else if (v242 <= 0xD8)
      {
LABEL_128:
        *((_BYTE *)a1 + v1776) = 0;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1776) = 0;
      }
      return a1;
    case 1u:
      v93 = *((unsigned __int8 *)a2 + v1881);
      if (v93 >= 2)
      {
        if (v1881 <= 3)
          v94 = v1881;
        else
          v94 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v479 = v93 == 1;
      if (v93 == 1)
        v480 = v1847;
      else
        v480 = v1844;
      if (v93 == 1)
        v481 = v1845;
      else
        v481 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v480 + 16))(a1, a2, v481);
      *((_BYTE *)a1 + v1881) = v479;
      if (v1776 > 3)
        goto LABEL_462;
      v254 = 1;
      v482 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v482 > 0xFFD8)
        goto LABEL_804;
      if (v482 > 0xD8)
        goto LABEL_802;
LABEL_462:
      v207 = 1;
      goto LABEL_798;
    case 2u:
      v95 = *((unsigned __int8 *)a2 + v1881);
      if (v95 >= 2)
      {
        if (v1881 <= 3)
          v96 = v1881;
        else
          v96 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v483 = v95 == 1;
      if (v95 == 1)
        v484 = v1847;
      else
        v484 = v1844;
      if (v95 == 1)
        v485 = v1845;
      else
        v485 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v484 + 16))(a1, a2, v485);
      *((_BYTE *)a1 + v1881) = v483;
      if (v1776 > 3)
        goto LABEL_473;
      v486 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v486 > 0xFFD8)
      {
        v254 = 2;
        goto LABEL_804;
      }
      if (v486 <= 0xD8)
      {
LABEL_473:
        v207 = 2;
        goto LABEL_798;
      }
      LOWORD(v254) = 2;
      goto LABEL_802;
    case 3u:
      v97 = *((unsigned __int8 *)a2 + v1881);
      if (v97 >= 2)
      {
        if (v1881 <= 3)
          v98 = v1881;
        else
          v98 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v487 = v97 == 1;
      if (v97 == 1)
        v488 = v1847;
      else
        v488 = v1844;
      if (v97 == 1)
        v489 = v1845;
      else
        v489 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v488 + 16))(a1, a2, v489);
      *((_BYTE *)a1 + v1881) = v487;
      if (v1776 > 3)
        goto LABEL_485;
      v490 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v490 > 0xFFD8)
      {
        v254 = 3;
        goto LABEL_804;
      }
      if (v490 <= 0xD8)
      {
LABEL_485:
        v207 = 3;
        goto LABEL_798;
      }
      LOWORD(v254) = 3;
      goto LABEL_802;
    case 4u:
      v99 = *((unsigned __int8 *)a2 + v1881);
      if (v99 >= 2)
      {
        if (v1881 <= 3)
          v100 = v1881;
        else
          v100 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v243 = ~v1882;
      v491 = v99 == 1;
      if (v99 == 1)
        v492 = v1847;
      else
        v492 = v1844;
      if (v99 == 1)
        v493 = v1845;
      else
        v493 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v492 + 16))(a1, a2, v493);
      *((_BYTE *)a1 + v1881) = v491;
      v494 = ((unint64_t)a1 + v1840) & v243;
      v495 = *(unsigned __int8 *)((((unint64_t)a2 + v1840) & v243) + v1881);
      if (v495 >= 2)
      {
        if (v1881 <= 3)
          v496 = v1881;
        else
          v496 = 4;
        __asm { BR              X12 }
      }
      v605 = v495 == 1;
      if (v495 == 1)
        v606 = v1847;
      else
        v606 = v1844;
      (*(void (**)(unint64_t))(v606 + 16))(v494);
      *(_BYTE *)(v494 + v1881) = v605;
      if (v1776 > 3)
        goto LABEL_788;
      v607 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v607 > 0xFFD8)
      {
        v254 = 4;
        goto LABEL_804;
      }
      if (v607 <= 0xD8)
      {
LABEL_788:
        v207 = 4;
        goto LABEL_798;
      }
      LOWORD(v254) = 4;
      goto LABEL_802;
    case 5u:
      v101 = ~v1922;
      v1896 = ~v1912;
      v1885 = ~v1849;
      v102 = v1891;
      v103 = v1803;
      v104 = ((((v1816
               + ((v1853 + 8 + (v1832 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v1853)) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16;
      v1865 = ~(unint64_t)v1864;
      v1763 = ~v1922;
      v1765 = v41;
      v1852 = ~v1876;
      v1854 = ~(unint64_t)v1853;
      if (v1891 == v1803)
      {
        v105 = a2;
        v106 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v1844 + 48))(a2, v1891, AssociatedTypeWitness);
        v107 = ~v1922;
        v108 = v1819;
LABEL_812:
        v614 = v1922;
        if (v106)
        {
LABEL_813:
          v615 = v1899;
          memcpy(a1, v105, v1899);
LABEL_814:
          v616 = __n;
          goto LABEL_849;
        }
        v244 = ((unint64_t)v105 + v108) & v1896;
        v245 = (v244 + v1898 + v1922) & v107;
LABEL_816:
        v617 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v1844 + 16);
        v618 = v107;
        v617(a1, v105, AssociatedTypeWitness);
        v619 = ((unint64_t)a1 + v108) & v1896;
        v617((uint64_t *)v619, (uint64_t *)v244, AssociatedTypeWitness);
        v620 = (v619 + v1898 + v614) & v618;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1825 + 16))(v620, v245, v1826);
        v621 = (_QWORD *)((v1832 + v620) & 0xFFFFFFFFFFFFFFF8);
        v622 = (_QWORD *)((v1832 + v245) & 0xFFFFFFFFFFFFFFF8);
        *v621 = *v622;
        v623 = ((unint64_t)v621 + v1821) & v1854;
        v624 = ((unint64_t)v622 + v1821) & v1854;
        v625 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1822 + 16);
        swift_bridgeObjectRetain();
        v625(v623, v624, v1823);
        v626 = (_QWORD *)((v1816 + v623) & 0xFFFFFFFFFFFFF8);
        v627 = (_QWORD *)((v1816 + v624) & 0xFFFFFFFFFFFFF8);
        *v626 = *v627;
        v628 = (_QWORD *)(((unint64_t)v626 + 15) & 0xFFFFFFFFFFFFFFF8);
        v629 = (_QWORD *)(((unint64_t)v627 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v628 = *v629;
        v628[1] = v629[1];
        v630 = (_QWORD *)(v1900 + v620);
        *v630 = *(_QWORD *)(v1900 + v245);
        v630[1] = *(_QWORD *)(v1900 + v245 + 8);
        v631 = (v1902 + v1900 + v620) & v1885;
        v632 = (v1902 + v1900 + v245) & v1885;
        *(_BYTE *)v631 = *(_BYTE *)v632;
        v633 = v631 | 4;
        v634 = *(_DWORD *)(v632 | 4);
        *(_BYTE *)(v633 + 4) = *(_BYTE *)((v632 | 4) + 4);
        *(_DWORD *)v633 = v634;
        *(_WORD *)(v631 + 10) = *(_WORD *)(v632 + 0xA);
        v1926 = v631;
        v635 = (v1841 + v631) & v1865;
        v636 = (v1841 + v632) & v1865;
        v637 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v637(v635, v636, v1838);
        v638 = (v1836 + v635) & v1865;
        v639 = (v1836 + v636) & v1865;
        v637(v638, v639, v1838);
        v640 = (_BYTE *)(v638 + v1843);
        *v640 = *(_BYTE *)(v639 + v1843);
        v640[1] = *(_BYTE *)(v639 + v1843 + 1);
        v640[2] = *(_BYTE *)(v639 + v1843 + 2);
        v640[3] = *(_BYTE *)(v639 + v1843 + 3);
        v640[4] = *(_BYTE *)(v639 + v1843 + 4);
        v641 = (v638 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
        v642 = (v639 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v641 = *(_QWORD *)v642;
        *(_QWORD *)(v641 + 8) = *(_QWORD *)(v642 + 8);
        *(_BYTE *)(v641 + 16) = *(_BYTE *)(v642 + 16);
        *(_BYTE *)(v641 + 17) = *(_BYTE *)(v642 + 17);
        *(_BYTE *)(v641 + 18) = *(_BYTE *)(v642 + 18);
        *(_BYTE *)(v641 + 19) = *(_BYTE *)(v642 + 19);
        v643 = (v641 + 27) & 0xFFFFFFFFFFFFFFF8;
        v644 = (v642 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v643 = *(_QWORD *)v644;
        *(_BYTE *)(v643 + 8) = *(_BYTE *)(v644 + 8);
        *(_BYTE *)(v643 + 9) = *(_BYTE *)(v644 + 9);
        *(_BYTE *)(v643 + 10) = *(_BYTE *)(v644 + 10);
        *(_BYTE *)(v643 + 11) = *(_BYTE *)(v644 + 11);
        *(_BYTE *)(v643 + 12) = *(_BYTE *)(v644 + 12);
        v645 = (_QWORD *)((v641 + 47) & 0xFFFFFFFFFFFFF8);
        v646 = (_QWORD *)((v642 + 47) & 0xFFFFFFFFFFFFF8);
        *v645 = *v646;
        v647 = ((unint64_t)v645 + 15) & 0xFFFFFFFFFFFFFFF8;
        v648 = ((unint64_t)v646 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v647 = *(_QWORD *)v648;
        *(_BYTE *)(v647 + 8) = *(_BYTE *)(v648 + 8);
        *(_BYTE *)(v647 + 9) = *(_BYTE *)(v648 + 9);
        v649 = (void *)((v1834 + v647) & v1865);
        v650 = (const void *)((v1834 + v648) & v1865);
        v651 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1837 + 48);
        swift_bridgeObjectRetain();
        if (v651(v650, 1, v1838))
        {
          memcpy(v649, v650, __n);
        }
        else
        {
          v637((unint64_t)v649, (unint64_t)v650, v1838);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1837 + 56))(v649, 0, 1, v1838);
        }
        v652 = (_QWORD *)(((unint64_t)v649 + v1835) & 0xFFFFFFFFFFFFFFF8);
        v653 = (_QWORD *)(((unint64_t)v650 + v1835) & 0xFFFFFFFFFFFFFFF8);
        *v652 = *v653;
        v654 = ((unint64_t)v652 + 15) & 0xFFFFFFFFFFFFFFF8;
        v655 = ((unint64_t)v653 + 15) & 0xFFFFFFFFFFFFFFF8;
        v656 = *(_QWORD *)v655;
        *(_BYTE *)(v654 + 8) = *(_BYTE *)(v655 + 8);
        *(_QWORD *)v654 = v656;
        v657 = (_QWORD *)(((unint64_t)v652 + 31) & 0xFFFFFFFFFFFFF8);
        v658 = (_QWORD *)(((unint64_t)v653 + 31) & 0xFFFFFFFFFFFFF8);
        *v657 = *v658;
        v659 = ((unint64_t)v657 + 15) & 0xFFFFFFFFFFFFFFF8;
        v660 = (uint64_t *)(((unint64_t)v658 + 15) & 0xFFFFFFFFFFFFFFF8);
        v661 = v660[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v102 = v1891;
        if ((v661 & 0x3000000000000000) != 0)
        {
          *(_OWORD *)v659 = *(_OWORD *)v660;
        }
        else
        {
          v662 = *v660;
          sub_23AAAE668(*v660, v661);
          *(_QWORD *)v659 = v662;
          *(_QWORD *)(v659 + 8) = v661;
        }
        v663 = (v659 + 19) & 0xFFFFFFFFFFFFFFF8;
        v664 = ((unint64_t)v660 + 19) & 0xFFFFFFFFFFFFFFF8;
        v665 = *(_QWORD *)v664;
        *(_BYTE *)(v663 + 8) = *(_BYTE *)(v664 + 8);
        *(_QWORD *)v663 = v665;
        *(_BYTE *)(v663 + 9) = *(_BYTE *)(v664 + 9);
        v666 = (v663 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v667 = (v664 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v668 = *(_DWORD *)v667;
        *(_BYTE *)(v666 + 4) = *(_BYTE *)(v667 + 4);
        *(_DWORD *)v666 = v668;
        v669 = (_QWORD *)((v663 + 25) & 0xFFFFFFFFFFFFFFF8);
        v670 = (_QWORD *)((v664 + 25) & 0xFFFFFFFFFFFFFFF8);
        *v669 = *v670;
        v669[1] = v670[1];
        v671 = v1901 + v1926;
        v672 = v1901 + v632;
        v673 = *(_QWORD *)(v672 + 16);
        if (v673 >= 0xFFFFFFFF)
          LODWORD(v673) = -1;
        v674 = v673 - 1;
        swift_bridgeObjectRetain();
        if (v674 < 0)
        {
          *(_QWORD *)v671 = *(_QWORD *)v672;
          *(_BYTE *)(v671 + 8) = *(_BYTE *)(v672 + 8);
          *(_BYTE *)(v671 + 9) = *(_BYTE *)(v672 + 9);
          v687 = *(void **)(v672 + 16);
          v688 = v687;
          *(_QWORD *)(v671 + 16) = v687;
          v689 = *(void **)(v672 + 24);
          v690 = v689;
          *(_QWORD *)(v671 + 24) = v689;
          *(_BYTE *)(v671 + 32) = *(_BYTE *)(v672 + 32);
          *(_BYTE *)(v671 + 33) = *(_BYTE *)(v672 + 33);
          *(_BYTE *)(v671 + 34) = *(_BYTE *)(v672 + 34);
          *(_QWORD *)(v671 + 40) = *(_QWORD *)(v672 + 40);
          *(_QWORD *)(v671 + 48) = *(_QWORD *)(v672 + 48);
          *(_QWORD *)(v671 + 56) = *(_QWORD *)(v672 + 56);
          *(_QWORD *)(v671 + 64) = *(_QWORD *)(v672 + 64);
          *(_BYTE *)(v671 + 72) = *(_BYTE *)(v672 + 72);
          *(_QWORD *)(v671 + 80) = *(_QWORD *)(v672 + 80);
          *(_QWORD *)(v671 + 88) = *(_QWORD *)(v672 + 88);
          v1927 = *(void **)(v672 + 96);
          *(_QWORD *)(v671 + 96) = v1927;
          *(_BYTE *)(v671 + 104) = *(_BYTE *)(v672 + 104);
          *(_BYTE *)(v671 + 105) = *(_BYTE *)(v672 + 105);
          *(_QWORD *)(v671 + 112) = *(_QWORD *)(v672 + 112);
          *(_QWORD *)(v671 + 120) = *(_QWORD *)(v672 + 120);
          *(_QWORD *)(v671 + 128) = *(_QWORD *)(v672 + 128);
          *(_QWORD *)(v671 + 136) = *(_QWORD *)(v672 + 136);
          *(_QWORD *)(v671 + 144) = *(_QWORD *)(v672 + 144);
          *(_QWORD *)(v671 + 152) = *(_QWORD *)(v672 + 152);
          *(_QWORD *)(v671 + 160) = *(_QWORD *)(v672 + 160);
          *(_QWORD *)(v671 + 168) = *(_QWORD *)(v672 + 168);
          *(_BYTE *)(v671 + 176) = *(_BYTE *)(v672 + 176);
          *(_QWORD *)(v671 + 184) = *(_QWORD *)(v672 + 184);
          v691 = *(_QWORD *)(v672 + 192);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v692 = v1927;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v691)
          {
            *(_QWORD *)(v671 + 192) = v691;
            *(_QWORD *)(v671 + 200) = *(_QWORD *)(v672 + 200);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(v671 + 192) = *(_OWORD *)(v672 + 192);
          }
          v105 = a2;
          v108 = v1819;
          v102 = v1891;
          v103 = v1803;
          *(_QWORD *)(v671 + 208) = *(_QWORD *)(v672 + 208);
          *(_QWORD *)(v671 + 216) = *(_QWORD *)(v672 + 216);
          *(_QWORD *)(v671 + 224) = *(_QWORD *)(v672 + 224);
          *(_QWORD *)(v671 + 232) = *(_QWORD *)(v672 + 232);
          *(_QWORD *)(v671 + 240) = *(_QWORD *)(v672 + 240);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v675 = *(_OWORD *)v672;
          v676 = *(_OWORD *)(v672 + 16);
          v677 = *(_OWORD *)(v672 + 48);
          *(_OWORD *)(v671 + 32) = *(_OWORD *)(v672 + 32);
          *(_OWORD *)(v671 + 48) = v677;
          *(_OWORD *)v671 = v675;
          *(_OWORD *)(v671 + 16) = v676;
          v678 = *(_OWORD *)(v672 + 64);
          v679 = *(_OWORD *)(v672 + 80);
          v680 = *(_OWORD *)(v672 + 112);
          *(_OWORD *)(v671 + 96) = *(_OWORD *)(v672 + 96);
          *(_OWORD *)(v671 + 112) = v680;
          *(_OWORD *)(v671 + 64) = v678;
          *(_OWORD *)(v671 + 80) = v679;
          v681 = *(_OWORD *)(v672 + 128);
          v682 = *(_OWORD *)(v672 + 144);
          v683 = *(_OWORD *)(v672 + 176);
          *(_OWORD *)(v671 + 160) = *(_OWORD *)(v672 + 160);
          *(_OWORD *)(v671 + 176) = v683;
          *(_OWORD *)(v671 + 128) = v681;
          *(_OWORD *)(v671 + 144) = v682;
          v684 = *(_OWORD *)(v672 + 192);
          v685 = *(_OWORD *)(v672 + 208);
          v686 = *(_OWORD *)(v672 + 224);
          *(_QWORD *)(v671 + 240) = *(_QWORD *)(v672 + 240);
          *(_OWORD *)(v671 + 208) = v685;
          *(_OWORD *)(v671 + 224) = v686;
          *(_OWORD *)(v671 + 192) = v684;
          v105 = a2;
          v108 = v1819;
          v103 = v1803;
        }
        v772 = (_OWORD *)((v671 + 255) & 0xFFFFFFFFFFFFFFF8);
        v773 = (__int128 *)((v672 + 255) & 0xFFFFFFFFFFFFFFF8);
        v774 = *v773;
        *(_OWORD *)((char *)v772 + 9) = *(__int128 *)((char *)v773 + 9);
        *v772 = v774;
        v775 = (v671 + 287) & 0xFFFFFFFFFFFFFFF8;
        v776 = (v672 + 287) & 0xFFFFFFFFFFFFFFF8;
        v777 = *(_OWORD *)v776;
        *(_BYTE *)(v775 + 16) = *(_BYTE *)(v776 + 16);
        *(_OWORD *)v775 = v777;
        v778 = (_QWORD *)((v671 + 311) & 0xFFFFFFFFFFFFF8);
        v779 = (v672 + 311) & 0xFFFFFFFFFFFFF8;
        v780 = *(_QWORD *)v779;
        v779 += 15;
        *v778 = v780;
        v781 = (_QWORD *)(((unint64_t)v778 + 15) & 0xFFFFFFFFFFFFFFF8);
        v782 = *(_QWORD *)(v779 & 0xFFFFFFFFFFFFFFF8);
        v783 = *(_QWORD *)((v779 & 0xFFFFFFFFFFFFFFF8) + 8);
        sub_23AA7F2D4(v782, v783);
        *v781 = v782;
        v781[1] = v783;
        v616 = v1843;
        v615 = v1899;
        v104 = v1900;
        if (!v1813)
          goto LABEL_814;
LABEL_849:
        v784 = ((((v1814
                 + 327
                 + ((((((((((v1818 + 7 + v616) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 19) & 0xFFFFFFFFFFFFFFF8)
                   + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        v1913 = v1818 + 7;
        v1920 = (void *)(((unint64_t)a1 + v1876 + v784) & v1852);
        v1905 = v1814 + 327;
        v1928 = (const void *)(((unint64_t)v105 + v1876 + v784) & v1852);
        if (v102 == v103)
        {
          v785 = (*(uint64_t (**)(void))(v1844 + 48))();
          v786 = v1763;
          v787 = v1896;
LABEL_863:
          if (v785)
          {
LABEL_864:
            v795 = v1920;
            v796 = v1928;
            memcpy(v1920, v1928, v615);
            v797 = v1909;
            v799 = v1892;
            v798 = v1893;
            v800 = v1894;
            v801 = __n;
LABEL_865:
            v802 = v801;
LABEL_919:
            v1001 = ((((v1905
                      + ((((((((((v1913 + v802) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            *(_QWORD *)(((unint64_t)v795 + v1001) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v796
                                                                                            + v1001) & 0xFFFFFFFFFFFFF8);
            v1002 = ((v1811
                    + ((v1876
                      + ((((v1905
                          + ((((((((((v1913 + v801) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 19) & 0xFFFFFFFFFFFFFFF8)
                            + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16) & v1852)) & 0xFFFFFFFFFFFFFFF8)
                  + 8;
            if (v1002 <= v800)
              v1002 = v800;
            if (v1808 > v1002)
              v1002 = v1808;
            if (v615 > v1002)
              v1002 = v615;
            if (v1765 > v1002)
              v1002 = v1765;
            if (v797 > v1002)
              v1002 = v797;
            if (v1807 > v1002)
              v1002 = v1893 + 2;
            if (v1809 > v1002)
              v1002 = ((v1881 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
            if (v1824 > v1002)
              v1002 = v1881 + 2;
            if (v1810 > v1002)
              v1002 = (v1881 & 0xFFFFFFFFFFFFFFF8) + 16;
            if (v1002 <= v797)
              v1002 = v797;
            if (v1002 <= v799)
              v1002 = v799;
            if (v1002 <= v1878)
              v1002 = ((v1882 + 1) & ~v1882) + v1909;
            if (v1002 <= v797)
              v1002 = v797;
            if (v1002 <= v1880)
              v1002 = v1880;
            if (v1002 <= v1824)
              v1002 = v1881 + 2;
            if (v1002 <= v797)
              v1002 = v797;
            if (v1002 <= v798)
              v1002 = v798;
            if (v1002 <= v797)
              v1002 = v797;
            if (v1002 <= v1775)
              v1002 = v1775;
            if (v1002 <= v1824)
              v1002 = v1881 + 2;
            if (v1002 <= v797)
              v1002 = v797;
            if (v1002 <= 0x38)
              v1002 = 56;
            if (v1002 > 3)
              goto LABEL_964;
            v1004 = ((1 << (8 * v1002)) + 5) >> (8 * v1002);
            if (v1004 <= 0xFFD8)
            {
              if (v1004 <= 0xD8)
              {
LABEL_964:
                v1003 = 5;
LABEL_1018:
                *((_BYTE *)a1 + v1002) = v1003;
                return a1;
              }
              v1005 = 5;
LABEL_1022:
              *(_WORD *)((char *)a1 + v1002) = v1005;
              return a1;
            }
            v1006 = 5;
LABEL_1024:
            *(_DWORD *)((char *)a1 + v1002) = v1006;
            return a1;
          }
          v788 = ((unint64_t)v1928 + v108) & v787;
          v789 = (v1801 + v788) & v786;
LABEL_867:
          v803 = *(void (**)(void *, const void *, uint64_t))(v1844 + 16);
          v803(v1920, v1928, AssociatedTypeWitness);
          v804 = ((unint64_t)v1920 + v108) & v787;
          v803((void *)v804, (const void *)v788, AssociatedTypeWitness);
          v805 = (v1801 + v804) & v786;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1825 + 16))(v805, v789, v1826);
          v806 = (_QWORD *)((v1832 + v805) & 0xFFFFFFFFFFFFFFF8);
          v807 = (_QWORD *)((v1832 + v789) & 0xFFFFFFFFFFFFFFF8);
          *v806 = *v807;
          v808 = ((unint64_t)v806 + v1821) & v1854;
          v809 = ((unint64_t)v807 + v1821) & v1854;
          v810 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1822 + 16);
          swift_bridgeObjectRetain();
          v810(v808, v809, v1823);
          v811 = (_QWORD *)((v1816 + v808) & 0xFFFFFFFFFFFFF8);
          v812 = (_QWORD *)((v1816 + v809) & 0xFFFFFFFFFFFFF8);
          *v811 = *v812;
          v813 = (_QWORD *)(((unint64_t)v811 + 15) & 0xFFFFFFFFFFFFFFF8);
          v814 = (_QWORD *)(((unint64_t)v812 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v813 = *v814;
          v813[1] = v814[1];
          v815 = (_QWORD *)(v805 + v104);
          *v815 = *(_QWORD *)(v789 + v104);
          v815[1] = *(_QWORD *)(v789 + v104 + 8);
          v816 = (v1902 + v805 + v104) & v1885;
          v817 = (v1902 + v789 + v104) & v1885;
          *(_BYTE *)v816 = *(_BYTE *)v817;
          v818 = v816 | 4;
          v819 = *(_DWORD *)(v817 | 4);
          *(_BYTE *)(v818 + 4) = *(_BYTE *)((v817 | 4) + 4);
          *(_DWORD *)v818 = v819;
          *(_WORD *)(v816 + 10) = *(_WORD *)(v817 + 0xA);
          v820 = (v1841 + v816) & v1865;
          v821 = (v1841 + v817) & v1865;
          v822 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v822(v820, v821, v1838);
          v823 = (v1836 + v820) & v1865;
          v824 = (v1836 + v821) & v1865;
          v822(v823, v824, v1838);
          v825 = (_BYTE *)(v823 + v1843);
          *v825 = *(_BYTE *)(v824 + v1843);
          v825[1] = *(_BYTE *)(v824 + v1843 + 1);
          v825[2] = *(_BYTE *)(v824 + v1843 + 2);
          v825[3] = *(_BYTE *)(v824 + v1843 + 3);
          v825[4] = *(_BYTE *)(v824 + v1843 + 4);
          v826 = (v823 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
          v827 = (v824 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v826 = *(_QWORD *)v827;
          *(_QWORD *)(v826 + 8) = *(_QWORD *)(v827 + 8);
          *(_BYTE *)(v826 + 16) = *(_BYTE *)(v827 + 16);
          *(_BYTE *)(v826 + 17) = *(_BYTE *)(v827 + 17);
          *(_BYTE *)(v826 + 18) = *(_BYTE *)(v827 + 18);
          *(_BYTE *)(v826 + 19) = *(_BYTE *)(v827 + 19);
          v828 = (v826 + 27) & 0xFFFFFFFFFFFFFFF8;
          v829 = (v827 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v828 = *(_QWORD *)v829;
          *(_BYTE *)(v828 + 8) = *(_BYTE *)(v829 + 8);
          *(_BYTE *)(v828 + 9) = *(_BYTE *)(v829 + 9);
          *(_BYTE *)(v828 + 10) = *(_BYTE *)(v829 + 10);
          *(_BYTE *)(v828 + 11) = *(_BYTE *)(v829 + 11);
          *(_BYTE *)(v828 + 12) = *(_BYTE *)(v829 + 12);
          v830 = (_QWORD *)((v826 + 47) & 0xFFFFFFFFFFFFF8);
          v831 = (_QWORD *)((v827 + 47) & 0xFFFFFFFFFFFFF8);
          *v830 = *v831;
          v832 = ((unint64_t)v830 + 15) & 0xFFFFFFFFFFFFFFF8;
          v833 = ((unint64_t)v831 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v832 = *(_QWORD *)v833;
          *(_BYTE *)(v832 + 8) = *(_BYTE *)(v833 + 8);
          *(_BYTE *)(v832 + 9) = *(_BYTE *)(v833 + 9);
          v834 = (void *)((v1834 + v832) & v1865);
          v835 = (const void *)((v1834 + v833) & v1865);
          v836 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1837 + 48);
          swift_bridgeObjectRetain();
          if (v836(v835, 1, v1838))
          {
            v801 = __n;
            memcpy(v834, v835, __n);
          }
          else
          {
            v822((unint64_t)v834, (unint64_t)v835, v1838);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1837 + 56))(v834, 0, 1, v1838);
            v801 = __n;
          }
          v837 = (_QWORD *)(((unint64_t)v834 + v1835) & 0xFFFFFFFFFFFFFFF8);
          v838 = (_QWORD *)(((unint64_t)v835 + v1835) & 0xFFFFFFFFFFFFFFF8);
          *v837 = *v838;
          v839 = ((unint64_t)v837 + 15) & 0xFFFFFFFFFFFFFFF8;
          v840 = ((unint64_t)v838 + 15) & 0xFFFFFFFFFFFFFFF8;
          v841 = *(_QWORD *)v840;
          *(_BYTE *)(v839 + 8) = *(_BYTE *)(v840 + 8);
          *(_QWORD *)v839 = v841;
          v842 = (_QWORD *)(((unint64_t)v837 + 31) & 0xFFFFFFFFFFFFF8);
          v843 = (_QWORD *)(((unint64_t)v838 + 31) & 0xFFFFFFFFFFFFF8);
          *v842 = *v843;
          v844 = ((unint64_t)v842 + 15) & 0xFFFFFFFFFFFFFFF8;
          v845 = (uint64_t *)(((unint64_t)v843 + 15) & 0xFFFFFFFFFFFFFFF8);
          v846 = v845[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v846 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v844 = *(_OWORD *)v845;
          }
          else
          {
            v847 = *v845;
            sub_23AAAE668(*v845, v846);
            *(_QWORD *)v844 = v847;
            *(_QWORD *)(v844 + 8) = v846;
          }
          v848 = (v844 + 19) & 0xFFFFFFFFFFFFFFF8;
          v849 = ((unint64_t)v845 + 19) & 0xFFFFFFFFFFFFFFF8;
          v850 = *(_QWORD *)v849;
          *(_BYTE *)(v848 + 8) = *(_BYTE *)(v849 + 8);
          *(_QWORD *)v848 = v850;
          *(_BYTE *)(v848 + 9) = *(_BYTE *)(v849 + 9);
          v851 = (v848 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v852 = (v849 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v853 = *(_DWORD *)v852;
          *(_BYTE *)(v851 + 4) = *(_BYTE *)(v852 + 4);
          *(_DWORD *)v851 = v853;
          v854 = (_QWORD *)((v848 + 25) & 0xFFFFFFFFFFFFFFF8);
          v855 = (_QWORD *)((v849 + 25) & 0xFFFFFFFFFFFFFFF8);
          *v854 = *v855;
          v854[1] = v855[1];
          v856 = v816 + v1901;
          v857 = v817 + v1901;
          v858 = *(_QWORD *)(v817 + v1901 + 16);
          if (v858 >= 0xFFFFFFFF)
            LODWORD(v858) = -1;
          v859 = v858 - 1;
          swift_bridgeObjectRetain();
          if (v859 < 0)
          {
            *(_QWORD *)v856 = *(_QWORD *)v857;
            *(_BYTE *)(v856 + 8) = *(_BYTE *)(v857 + 8);
            *(_BYTE *)(v856 + 9) = *(_BYTE *)(v857 + 9);
            v872 = *(void **)(v857 + 16);
            v873 = v872;
            *(_QWORD *)(v856 + 16) = v872;
            v874 = *(void **)(v857 + 24);
            v875 = v874;
            *(_QWORD *)(v856 + 24) = v874;
            *(_BYTE *)(v856 + 32) = *(_BYTE *)(v857 + 32);
            *(_BYTE *)(v856 + 33) = *(_BYTE *)(v857 + 33);
            *(_BYTE *)(v856 + 34) = *(_BYTE *)(v857 + 34);
            *(_QWORD *)(v856 + 40) = *(_QWORD *)(v857 + 40);
            *(_QWORD *)(v856 + 48) = *(_QWORD *)(v857 + 48);
            *(_QWORD *)(v856 + 56) = *(_QWORD *)(v857 + 56);
            *(_QWORD *)(v856 + 64) = *(_QWORD *)(v857 + 64);
            *(_BYTE *)(v856 + 72) = *(_BYTE *)(v857 + 72);
            *(_QWORD *)(v856 + 80) = *(_QWORD *)(v857 + 80);
            *(_QWORD *)(v856 + 88) = *(_QWORD *)(v857 + 88);
            v1903 = *(void **)(v857 + 96);
            *(_QWORD *)(v856 + 96) = v1903;
            *(_BYTE *)(v856 + 104) = *(_BYTE *)(v857 + 104);
            *(_BYTE *)(v856 + 105) = *(_BYTE *)(v857 + 105);
            *(_QWORD *)(v856 + 112) = *(_QWORD *)(v857 + 112);
            *(_QWORD *)(v856 + 120) = *(_QWORD *)(v857 + 120);
            *(_QWORD *)(v856 + 128) = *(_QWORD *)(v857 + 128);
            *(_QWORD *)(v856 + 136) = *(_QWORD *)(v857 + 136);
            *(_QWORD *)(v856 + 144) = *(_QWORD *)(v857 + 144);
            *(_QWORD *)(v856 + 152) = *(_QWORD *)(v857 + 152);
            *(_QWORD *)(v856 + 160) = *(_QWORD *)(v857 + 160);
            *(_QWORD *)(v856 + 168) = *(_QWORD *)(v857 + 168);
            *(_BYTE *)(v856 + 176) = *(_BYTE *)(v857 + 176);
            *(_QWORD *)(v856 + 184) = *(_QWORD *)(v857 + 184);
            v876 = *(_QWORD *)(v857 + 192);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v877 = v1903;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v876)
            {
              *(_QWORD *)(v856 + 192) = v876;
              *(_QWORD *)(v856 + 200) = *(_QWORD *)(v857 + 200);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v856 + 192) = *(_OWORD *)(v857 + 192);
            }
            v801 = __n;
            v797 = v1909;
            v799 = v1892;
            v798 = v1893;
            v800 = v1894;
            *(_QWORD *)(v856 + 208) = *(_QWORD *)(v857 + 208);
            *(_QWORD *)(v856 + 216) = *(_QWORD *)(v857 + 216);
            *(_QWORD *)(v856 + 224) = *(_QWORD *)(v857 + 224);
            *(_QWORD *)(v856 + 232) = *(_QWORD *)(v857 + 232);
            *(_QWORD *)(v856 + 240) = *(_QWORD *)(v857 + 240);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v860 = *(_OWORD *)v857;
            v861 = *(_OWORD *)(v857 + 16);
            v862 = *(_OWORD *)(v857 + 48);
            *(_OWORD *)(v856 + 32) = *(_OWORD *)(v857 + 32);
            *(_OWORD *)(v856 + 48) = v862;
            *(_OWORD *)v856 = v860;
            *(_OWORD *)(v856 + 16) = v861;
            v863 = *(_OWORD *)(v857 + 64);
            v864 = *(_OWORD *)(v857 + 80);
            v865 = *(_OWORD *)(v857 + 112);
            *(_OWORD *)(v856 + 96) = *(_OWORD *)(v857 + 96);
            *(_OWORD *)(v856 + 112) = v865;
            *(_OWORD *)(v856 + 64) = v863;
            *(_OWORD *)(v856 + 80) = v864;
            v866 = *(_OWORD *)(v857 + 128);
            v867 = *(_OWORD *)(v857 + 144);
            v868 = *(_OWORD *)(v857 + 176);
            *(_OWORD *)(v856 + 160) = *(_OWORD *)(v857 + 160);
            *(_OWORD *)(v856 + 176) = v868;
            *(_OWORD *)(v856 + 128) = v866;
            *(_OWORD *)(v856 + 144) = v867;
            v869 = *(_OWORD *)(v857 + 192);
            v870 = *(_OWORD *)(v857 + 208);
            v871 = *(_OWORD *)(v857 + 224);
            *(_QWORD *)(v856 + 240) = *(_QWORD *)(v857 + 240);
            *(_OWORD *)(v856 + 208) = v870;
            *(_OWORD *)(v856 + 224) = v871;
            *(_OWORD *)(v856 + 192) = v869;
            v797 = v1909;
            v799 = v1892;
            v798 = v1893;
            v800 = v1894;
          }
          v989 = (_OWORD *)((v856 + 255) & 0xFFFFFFFFFFFFFFF8);
          v990 = (__int128 *)((v857 + 255) & 0xFFFFFFFFFFFFFFF8);
          v991 = *v990;
          *(_OWORD *)((char *)v989 + 9) = *(__int128 *)((char *)v990 + 9);
          *v989 = v991;
          v992 = (v856 + 287) & 0xFFFFFFFFFFFFFFF8;
          v993 = (v857 + 287) & 0xFFFFFFFFFFFFFFF8;
          v994 = *(_OWORD *)v993;
          *(_BYTE *)(v992 + 16) = *(_BYTE *)(v993 + 16);
          *(_OWORD *)v992 = v994;
          v995 = (_QWORD *)((v856 + 311) & 0xFFFFFFFFFFFFF8);
          v996 = (v857 + 311) & 0xFFFFFFFFFFFFF8;
          v997 = *(_QWORD *)v996;
          v996 += 15;
          *v995 = v997;
          v998 = (_QWORD *)(((unint64_t)v995 + 15) & 0xFFFFFFFFFFFFFFF8);
          v999 = *(_QWORD *)(v996 & 0xFFFFFFFFFFFFFFF8);
          v1000 = *(_QWORD *)((v996 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_23AA7F2D4(v999, v1000);
          *v998 = v999;
          v998[1] = v1000;
          v802 = v1843;
          v615 = v1899;
          v795 = v1920;
          v796 = v1928;
          if (v1813)
            goto LABEL_919;
          goto LABEL_865;
        }
        v787 = v1896;
        v788 = (v108 + (((unint64_t)v105 + v1876 + v784) & v1852)) & v1896;
        v786 = v1763;
        v789 = (v1801 + v788) & v1763;
        if (v1815 == v103)
        {
          if (v1805 == v1815)
          {
            v785 = (*(uint64_t (**)(unint64_t))(v1825 + 48))((v1801 + v788) & v1763);
            goto LABEL_863;
          }
          v792 = (unint64_t *)((v1832 + v789) & 0xFFFFFFFFFFFFFFF8);
          if (v1791 > 0x7FFFFFFE)
          {
            v785 = (*(uint64_t (**)(unint64_t))(v1822 + 48))(((unint64_t)v792 + v1821) & v1854);
            goto LABEL_863;
          }
          v793 = *v792;
        }
        else
        {
          v790 = v789 + v104;
          if ((v1789 & 0x80000000) == 0)
          {
            v791 = *(_QWORD *)(v790 + 8);
            if (v791 >= 0xFFFFFFFF)
              LODWORD(v791) = -1;
            v785 = v791 + 1;
            goto LABEL_863;
          }
          v794 = (v1841 + ((v1902 + v790) & v1885)) & v1865;
          if (v1813 > 0x7FFFFFFD)
          {
            v785 = (*(uint64_t (**)(unint64_t))(v1837 + 48))(v794);
            goto LABEL_863;
          }
          v793 = *(_QWORD *)(((v1786 + ((v1836 + v794) & v1865)) & 0xFFFFFFFFFFFFF8) + 8);
        }
        if (v793 >= 0xFFFFFFFF)
          LODWORD(v793) = -1;
        if ((v793 + 1) >= 2)
          goto LABEL_864;
        goto LABEL_867;
      }
      v105 = a2;
      v108 = v1819;
      v244 = ((unint64_t)a2 + v1819) & v1896;
      v107 = ~v1922;
      v245 = (v244 + v1898 + v1922) & v101;
      if (v1815 == v1803)
      {
        if (v1805 == v1815)
        {
          v106 = (*(uint64_t (**)(unint64_t))(v1825 + 48))((v244 + v1898 + v1922) & v101);
LABEL_811:
          v107 = ~v1922;
          goto LABEL_812;
        }
        v475 = (unint64_t *)((v1832 + v245) & 0xFFFFFFFFFFFFFFF8);
        if (v1791 > 0x7FFFFFFE)
        {
          v106 = (*(uint64_t (**)(unint64_t))(v1822 + 48))(((unint64_t)v475 + v1821) & v87);
          goto LABEL_811;
        }
        v476 = *v475;
      }
      else
      {
        v356 = v1900 + v245;
        if ((v1789 & 0x80000000) == 0)
        {
          v357 = *(_QWORD *)(v356 + 8);
          if (v357 >= 0xFFFFFFFF)
            LODWORD(v357) = -1;
          v106 = v357 + 1;
          goto LABEL_812;
        }
        v612 = (v1841 + ((v1902 + v356) & v1885)) & v89;
        if (v1813 > 0x7FFFFFFD)
        {
          v106 = (*(uint64_t (**)(unint64_t))(v1837 + 48))(v612);
          goto LABEL_811;
        }
        v476 = *(_QWORD *)(((v1786 + ((v1836 + v612) & v89)) & 0xFFFFFFFFFFFFF8) + 8);
      }
      if (v476 >= 0xFFFFFFFF)
        LODWORD(v476) = -1;
      v614 = v1922;
      if ((v476 + 1) >= 2)
        goto LABEL_813;
      goto LABEL_816;
    case 6u:
      v1886 = ~v1849;
      v109 = v1804;
      v110 = v1802;
      v1866 = ~(unint64_t)v1864;
      v1766 = v41;
      v1767 = ((((v1817 + ((v37 + 8 + (v1839 & 0xFFFFFFFFFFFFFFF8)) & ~v37)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      v1857 = ~v37;
      v1850 = ~v38;
      v1848 = ~v1890;
      if (v1804 == v1802)
      {
        v111 = v1845;
        v112 = v41;
        v113 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v1847 + 48))(a2, v1804, v1845);
        v41 = v112;
        v114 = v1843;
        v115 = ~(unint64_t)v1875;
        v116 = v1895;
LABEL_830:
        if (v113)
        {
LABEL_831:
          memcpy(a1, a2, v41);
          v693 = __n;
LABEL_832:
          v694 = v693;
          goto LABEL_882;
        }
        v246 = ((unint64_t)a2 + v1833) & v115;
        v247 = (v246 + v116 + v38) & v1850;
LABEL_834:
        v695 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v1847 + 16);
        v695(a1, a2, v111);
        v696 = ((unint64_t)a1 + v1833) & v115;
        v695((uint64_t *)v696, (uint64_t *)v246, v111);
        v697 = (v696 + v116 + v38) & v1850;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1827 + 16))(v697, v247, v1828);
        v698 = (_QWORD *)((v1839 + v697) & 0xFFFFFFFFFFFFFFF8);
        v699 = (_QWORD *)((v1839 + v247) & 0xFFFFFFFFFFFFFFF8);
        *v698 = *v699;
        v700 = ((unint64_t)v698 + v1831) & v1857;
        v701 = ((unint64_t)v699 + v1831) & v1857;
        v702 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1829 + 16);
        swift_bridgeObjectRetain();
        v702(v700, v701, v1830);
        v703 = (_QWORD *)((v1817 + v700) & 0xFFFFFFFFFFFFF8);
        v704 = (_QWORD *)((v1817 + v701) & 0xFFFFFFFFFFFFF8);
        *v703 = *v704;
        v705 = (_QWORD *)(((unint64_t)v703 + 15) & 0xFFFFFFFFFFFFFFF8);
        v706 = (_QWORD *)(((unint64_t)v704 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v705 = *v706;
        v705[1] = v706[1];
        v707 = (_QWORD *)(v1767 + v697);
        *v707 = *(_QWORD *)(v1767 + v247);
        v707[1] = *(_QWORD *)(v1767 + v247 + 8);
        v708 = (v1902 + v1767 + v697) & v1886;
        v709 = v114;
        v710 = (v1902 + v1767 + v247) & v1886;
        *(_BYTE *)v708 = *(_BYTE *)v710;
        v711 = v708 | 4;
        v712 = *(_DWORD *)(v710 | 4);
        *(_BYTE *)(v711 + 4) = *(_BYTE *)((v710 | 4) + 4);
        *(_DWORD *)v711 = v712;
        *(_WORD *)(v708 + 10) = *(_WORD *)(v710 + 0xA);
        v1918 = v708;
        v713 = (v1841 + v708) & v1866;
        v714 = (v1841 + v710) & v1866;
        v715 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v715(v713, v714, v1838);
        v716 = (v1836 + v713) & v1866;
        v717 = (v1836 + v714) & v1866;
        v715(v716, v717, v1838);
        v718 = (_BYTE *)(v716 + v709);
        *v718 = *(_BYTE *)(v717 + v709);
        v718[1] = *(_BYTE *)(v717 + v709 + 1);
        v718[2] = *(_BYTE *)(v717 + v709 + 2);
        v718[3] = *(_BYTE *)(v717 + v709 + 3);
        v718[4] = *(_BYTE *)(v717 + v709 + 4);
        v719 = (v716 + v709 + 12) & 0xFFFFFFFFFFFFFFF8;
        v720 = (v717 + v709 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v719 = *(_QWORD *)v720;
        *(_QWORD *)(v719 + 8) = *(_QWORD *)(v720 + 8);
        *(_BYTE *)(v719 + 16) = *(_BYTE *)(v720 + 16);
        *(_BYTE *)(v719 + 17) = *(_BYTE *)(v720 + 17);
        *(_BYTE *)(v719 + 18) = *(_BYTE *)(v720 + 18);
        *(_BYTE *)(v719 + 19) = *(_BYTE *)(v720 + 19);
        v721 = (v719 + 27) & 0xFFFFFFFFFFFFFFF8;
        v722 = (v720 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v721 = *(_QWORD *)v722;
        *(_BYTE *)(v721 + 8) = *(_BYTE *)(v722 + 8);
        *(_BYTE *)(v721 + 9) = *(_BYTE *)(v722 + 9);
        *(_BYTE *)(v721 + 10) = *(_BYTE *)(v722 + 10);
        *(_BYTE *)(v721 + 11) = *(_BYTE *)(v722 + 11);
        *(_BYTE *)(v721 + 12) = *(_BYTE *)(v722 + 12);
        v723 = (_QWORD *)((v719 + 47) & 0xFFFFFFFFFFFFF8);
        v724 = (_QWORD *)((v720 + 47) & 0xFFFFFFFFFFFFF8);
        *v723 = *v724;
        v725 = ((unint64_t)v723 + 15) & 0xFFFFFFFFFFFFFFF8;
        v726 = ((unint64_t)v724 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v725 = *(_QWORD *)v726;
        *(_BYTE *)(v725 + 8) = *(_BYTE *)(v726 + 8);
        *(_BYTE *)(v725 + 9) = *(_BYTE *)(v726 + 9);
        v727 = (void *)((v1834 + v725) & v1866);
        v728 = (const void *)((v1834 + v726) & v1866);
        v729 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1837 + 48);
        swift_bridgeObjectRetain();
        if (v729(v728, 1, v1838))
        {
          memcpy(v727, v728, __n);
        }
        else
        {
          v715((unint64_t)v727, (unint64_t)v728, v1838);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1837 + 56))(v727, 0, 1, v1838);
        }
        v730 = (_QWORD *)(((unint64_t)v727 + v1835) & 0xFFFFFFFFFFFFFFF8);
        v731 = (_QWORD *)(((unint64_t)v728 + v1835) & 0xFFFFFFFFFFFFFFF8);
        *v730 = *v731;
        v732 = ((unint64_t)v730 + 15) & 0xFFFFFFFFFFFFFFF8;
        v733 = ((unint64_t)v731 + 15) & 0xFFFFFFFFFFFFFFF8;
        v734 = *(_QWORD *)v733;
        *(_BYTE *)(v732 + 8) = *(_BYTE *)(v733 + 8);
        *(_QWORD *)v732 = v734;
        v735 = (_QWORD *)(((unint64_t)v730 + 31) & 0xFFFFFFFFFFFFF8);
        v736 = (_QWORD *)(((unint64_t)v731 + 31) & 0xFFFFFFFFFFFFF8);
        *v735 = *v736;
        v737 = ((unint64_t)v735 + 15) & 0xFFFFFFFFFFFFFFF8;
        v738 = (uint64_t *)(((unint64_t)v736 + 15) & 0xFFFFFFFFFFFFFFF8);
        v739 = v738[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v115 = ~(unint64_t)v1875;
        if ((v739 & 0x3000000000000000) != 0)
        {
          *(_OWORD *)v737 = *(_OWORD *)v738;
        }
        else
        {
          v740 = *v738;
          sub_23AAAE668(*v738, v739);
          *(_QWORD *)v737 = v740;
          *(_QWORD *)(v737 + 8) = v739;
        }
        v741 = (v737 + 19) & 0xFFFFFFFFFFFFFFF8;
        v742 = ((unint64_t)v738 + 19) & 0xFFFFFFFFFFFFFFF8;
        v743 = *(_QWORD *)v742;
        *(_BYTE *)(v741 + 8) = *(_BYTE *)(v742 + 8);
        *(_QWORD *)v741 = v743;
        *(_BYTE *)(v741 + 9) = *(_BYTE *)(v742 + 9);
        v744 = (v741 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v745 = (v742 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v746 = *(_DWORD *)v745;
        *(_BYTE *)(v744 + 4) = *(_BYTE *)(v745 + 4);
        *(_DWORD *)v744 = v746;
        v747 = (_QWORD *)((v741 + 25) & 0xFFFFFFFFFFFFFFF8);
        v748 = (_QWORD *)((v742 + 25) & 0xFFFFFFFFFFFFFFF8);
        *v747 = *v748;
        v747[1] = v748[1];
        v749 = v1901 + v1918;
        v750 = v1901 + v710;
        v751 = *(_QWORD *)(v1901 + v710 + 16);
        if (v751 >= 0xFFFFFFFF)
          LODWORD(v751) = -1;
        v752 = v751 - 1;
        swift_bridgeObjectRetain();
        if (v752 < 0)
        {
          *(_QWORD *)v749 = *(_QWORD *)v750;
          *(_BYTE *)(v749 + 8) = *(_BYTE *)(v750 + 8);
          *(_BYTE *)(v749 + 9) = *(_BYTE *)(v750 + 9);
          v766 = *(void **)(v750 + 16);
          v767 = v766;
          *(_QWORD *)(v749 + 16) = v766;
          v768 = *(void **)(v750 + 24);
          v769 = v768;
          *(_QWORD *)(v749 + 24) = v768;
          *(_BYTE *)(v749 + 32) = *(_BYTE *)(v750 + 32);
          *(_BYTE *)(v749 + 33) = *(_BYTE *)(v750 + 33);
          *(_BYTE *)(v749 + 34) = *(_BYTE *)(v750 + 34);
          *(_QWORD *)(v749 + 40) = *(_QWORD *)(v750 + 40);
          *(_QWORD *)(v749 + 48) = *(_QWORD *)(v750 + 48);
          *(_QWORD *)(v749 + 56) = *(_QWORD *)(v750 + 56);
          *(_QWORD *)(v749 + 64) = *(_QWORD *)(v750 + 64);
          *(_BYTE *)(v749 + 72) = *(_BYTE *)(v750 + 72);
          *(_QWORD *)(v749 + 80) = *(_QWORD *)(v750 + 80);
          *(_QWORD *)(v749 + 88) = *(_QWORD *)(v750 + 88);
          v1919 = *(void **)(v750 + 96);
          *(_QWORD *)(v749 + 96) = v1919;
          *(_BYTE *)(v749 + 104) = *(_BYTE *)(v750 + 104);
          *(_BYTE *)(v749 + 105) = *(_BYTE *)(v750 + 105);
          *(_QWORD *)(v749 + 112) = *(_QWORD *)(v750 + 112);
          *(_QWORD *)(v749 + 120) = *(_QWORD *)(v750 + 120);
          *(_QWORD *)(v749 + 128) = *(_QWORD *)(v750 + 128);
          *(_QWORD *)(v749 + 136) = *(_QWORD *)(v750 + 136);
          *(_QWORD *)(v749 + 144) = *(_QWORD *)(v750 + 144);
          *(_QWORD *)(v749 + 152) = *(_QWORD *)(v750 + 152);
          *(_QWORD *)(v749 + 160) = *(_QWORD *)(v750 + 160);
          *(_QWORD *)(v749 + 168) = *(_QWORD *)(v750 + 168);
          *(_BYTE *)(v749 + 176) = *(_BYTE *)(v750 + 176);
          *(_QWORD *)(v749 + 184) = *(_QWORD *)(v750 + 184);
          v770 = *(_QWORD *)(v750 + 192);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v771 = v1919;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v770)
          {
            *(_QWORD *)(v749 + 192) = v770;
            *(_QWORD *)(v749 + 200) = *(_QWORD *)(v750 + 200);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(v749 + 192) = *(_OWORD *)(v750 + 192);
          }
          v765 = v1843;
          v115 = ~(unint64_t)v1875;
          v110 = v1802;
          *(_QWORD *)(v749 + 208) = *(_QWORD *)(v750 + 208);
          *(_QWORD *)(v749 + 216) = *(_QWORD *)(v750 + 216);
          *(_QWORD *)(v749 + 224) = *(_QWORD *)(v750 + 224);
          *(_QWORD *)(v749 + 232) = *(_QWORD *)(v750 + 232);
          *(_QWORD *)(v749 + 240) = *(_QWORD *)(v750 + 240);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v753 = *(_OWORD *)v750;
          v754 = *(_OWORD *)(v750 + 16);
          v755 = *(_OWORD *)(v750 + 48);
          *(_OWORD *)(v749 + 32) = *(_OWORD *)(v750 + 32);
          *(_OWORD *)(v749 + 48) = v755;
          *(_OWORD *)v749 = v753;
          *(_OWORD *)(v749 + 16) = v754;
          v756 = *(_OWORD *)(v750 + 64);
          v757 = *(_OWORD *)(v750 + 80);
          v758 = *(_OWORD *)(v750 + 112);
          *(_OWORD *)(v749 + 96) = *(_OWORD *)(v750 + 96);
          *(_OWORD *)(v749 + 112) = v758;
          *(_OWORD *)(v749 + 64) = v756;
          *(_OWORD *)(v749 + 80) = v757;
          v759 = *(_OWORD *)(v750 + 128);
          v760 = *(_OWORD *)(v750 + 144);
          v761 = *(_OWORD *)(v750 + 176);
          *(_OWORD *)(v749 + 160) = *(_OWORD *)(v750 + 160);
          *(_OWORD *)(v749 + 176) = v761;
          *(_OWORD *)(v749 + 128) = v759;
          *(_OWORD *)(v749 + 144) = v760;
          v762 = *(_OWORD *)(v750 + 192);
          v763 = *(_OWORD *)(v750 + 208);
          v764 = *(_OWORD *)(v750 + 224);
          *(_QWORD *)(v749 + 240) = *(_QWORD *)(v750 + 240);
          *(_OWORD *)(v749 + 208) = v763;
          *(_OWORD *)(v749 + 224) = v764;
          *(_OWORD *)(v749 + 192) = v762;
          v110 = v1802;
          v765 = v1843;
        }
        v878 = (_OWORD *)((v749 + 255) & 0xFFFFFFFFFFFFFFF8);
        v879 = (__int128 *)((v750 + 255) & 0xFFFFFFFFFFFFFFF8);
        v880 = *v879;
        *(_OWORD *)((char *)v878 + 9) = *(__int128 *)((char *)v879 + 9);
        *v878 = v880;
        v881 = (v749 + 287) & 0xFFFFFFFFFFFFFFF8;
        v882 = (v750 + 287) & 0xFFFFFFFFFFFFFFF8;
        v883 = *(_OWORD *)v882;
        *(_BYTE *)(v881 + 16) = *(_BYTE *)(v882 + 16);
        *(_OWORD *)v881 = v883;
        v884 = (_QWORD *)((v749 + 311) & 0xFFFFFFFFFFFFF8);
        v885 = (v750 + 311) & 0xFFFFFFFFFFFFF8;
        v886 = *(_QWORD *)v885;
        v885 += 15;
        *v884 = v886;
        v887 = (_QWORD *)(((unint64_t)v884 + 15) & 0xFFFFFFFFFFFFFFF8);
        v888 = *(_QWORD *)(v885 & 0xFFFFFFFFFFFFFFF8);
        v889 = *(_QWORD *)((v885 & 0xFFFFFFFFFFFFFFF8) + 8);
        sub_23AA7F2D4(v888, v889);
        *v887 = v888;
        v887[1] = v889;
        v694 = v765;
        v111 = v1845;
        v109 = v1804;
        v693 = __n;
        if (!v1813)
          goto LABEL_832;
LABEL_882:
        v890 = ((((v1799
                 + 327
                 + ((((((((((v1818 + 7 + v694) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 19) & 0xFFFFFFFFFFFFFFF8)
                   + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        v1921 = (void *)(((unint64_t)a1 + v1890 + v890) & v1848);
        v891 = ~v38;
        v1914 = v1818 + 7;
        v1929 = (const void *)(((unint64_t)a2 + v1890 + v890) & v1848);
        if (v109 == v110)
        {
          v892 = (*(uint64_t (**)(void))(v1847 + 48))();
          v893 = v1766;
          v894 = v1767;
          v895 = v115;
        }
        else
        {
          v895 = v115;
          v896 = (v1833 + (((unint64_t)a2 + v1890 + v890) & v1848)) & v115;
          v897 = (v1800 + v896) & v1850;
          v894 = v1767;
          if (v1820 == v110)
          {
            if (v1806 == v1820)
            {
              v898 = *(uint64_t (**)(unint64_t))(v1827 + 48);
              v899 = (v1800 + v896) & v1850;
            }
            else
            {
              v902 = (unint64_t *)((v1839 + v897) & 0xFFFFFFFFFFFFFFF8);
              if (v1792 <= 0x7FFFFFFE)
              {
                v903 = *v902;
                if (v903 >= 0xFFFFFFFF)
                  LODWORD(v903) = -1;
                v893 = v1766;
                if ((v903 + 1) >= 2)
                  goto LABEL_901;
                goto LABEL_904;
              }
              v899 = ((unint64_t)v902 + v1831) & v1857;
              v898 = *(uint64_t (**)(unint64_t))(v1829 + 48);
            }
            v892 = v898(v899);
            v894 = v1767;
            v891 = ~v38;
            v893 = v1766;
          }
          else
          {
            v900 = v897 + v1767;
            v893 = v1766;
            if ((v1788 & 0x80000000) != 0)
            {
              v904 = (v1841 + ((v1902 + v900) & v1886)) & v1866;
              if (v1813 <= 0x7FFFFFFD)
              {
                v1080 = *(_QWORD *)(((v1786 + ((v1836 + v904) & v1866)) & 0xFFFFFFFFFFFFF8) + 8);
                if (v1080 >= 0xFFFFFFFF)
                  LODWORD(v1080) = -1;
                if ((v1080 + 1) >= 2)
                  goto LABEL_901;
                goto LABEL_904;
              }
              v892 = (*(uint64_t (**)(unint64_t))(v1837 + 48))(v904);
              v894 = v1767;
              v893 = v1766;
              v891 = ~v38;
            }
            else
            {
              v901 = *(_QWORD *)(v900 + 8);
              if (v901 >= 0xFFFFFFFF)
                LODWORD(v901) = -1;
              v892 = v901 + 1;
            }
          }
        }
        if (v892)
        {
LABEL_901:
          v905 = v1921;
          v906 = v1929;
          memcpy(v1921, v1929, v893);
          v907 = v1814;
          v908 = v1909;
          v910 = v1892;
          v909 = v1893;
          goto LABEL_902;
        }
        v896 = ((unint64_t)v1929 + v1833) & v895;
        v897 = (v1800 + v896) & v891;
LABEL_904:
        v912 = v891;
        v913 = *(void (**)(void *, const void *, uint64_t))(v1847 + 16);
        v914 = v894;
        v913(v1921, v1929, v111);
        v915 = ((unint64_t)v1921 + v1833) & v895;
        v913((void *)v915, (const void *)v896, v111);
        v916 = (v1800 + v915) & v912;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1827 + 16))(v916, v897, v1828);
        v917 = (_QWORD *)((v1839 + v916) & 0xFFFFFFFFFFFFFFF8);
        v918 = (_QWORD *)((v1839 + v897) & 0xFFFFFFFFFFFFFFF8);
        *v917 = *v918;
        v919 = ((unint64_t)v917 + v1831) & v1857;
        v920 = ((unint64_t)v918 + v1831) & v1857;
        v921 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1829 + 16);
        swift_bridgeObjectRetain();
        v921(v919, v920, v1830);
        v922 = (_QWORD *)((v1817 + v919) & 0xFFFFFFFFFFFFF8);
        v923 = (_QWORD *)((v1817 + v920) & 0xFFFFFFFFFFFFF8);
        *v922 = *v923;
        v924 = (_QWORD *)(((unint64_t)v922 + 15) & 0xFFFFFFFFFFFFFFF8);
        v925 = (_QWORD *)(((unint64_t)v923 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v924 = *v925;
        v924[1] = v925[1];
        v926 = (_QWORD *)(v916 + v914);
        *v926 = *(_QWORD *)(v897 + v914);
        v926[1] = *(_QWORD *)(v897 + v914 + 8);
        v927 = (v1902 + v916 + v914) & v1886;
        v928 = (v1902 + v897 + v914) & v1886;
        *(_BYTE *)v927 = *(_BYTE *)v928;
        v929 = v927 | 4;
        v930 = *(_DWORD *)(v928 | 4);
        *(_BYTE *)(v929 + 4) = *(_BYTE *)((v928 | 4) + 4);
        *(_DWORD *)v929 = v930;
        *(_WORD *)(v927 + 10) = *(_WORD *)(v928 + 0xA);
        v931 = (v1841 + v927) & v1866;
        v932 = (v1841 + v928) & v1866;
        v933 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v933(v931, v932, v1838);
        v934 = (v1836 + v931) & v1866;
        v935 = (v1836 + v932) & v1866;
        v933(v934, v935, v1838);
        v936 = (_BYTE *)(v934 + v1843);
        *v936 = *(_BYTE *)(v935 + v1843);
        v936[1] = *(_BYTE *)(v935 + v1843 + 1);
        v936[2] = *(_BYTE *)(v935 + v1843 + 2);
        v936[3] = *(_BYTE *)(v935 + v1843 + 3);
        v936[4] = *(_BYTE *)(v935 + v1843 + 4);
        v937 = (v934 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
        v938 = (v935 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v937 = *(_QWORD *)v938;
        *(_QWORD *)(v937 + 8) = *(_QWORD *)(v938 + 8);
        *(_BYTE *)(v937 + 16) = *(_BYTE *)(v938 + 16);
        *(_BYTE *)(v937 + 17) = *(_BYTE *)(v938 + 17);
        *(_BYTE *)(v937 + 18) = *(_BYTE *)(v938 + 18);
        *(_BYTE *)(v937 + 19) = *(_BYTE *)(v938 + 19);
        v939 = (v937 + 27) & 0xFFFFFFFFFFFFFFF8;
        v940 = (v938 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v939 = *(_QWORD *)v940;
        *(_BYTE *)(v939 + 8) = *(_BYTE *)(v940 + 8);
        *(_BYTE *)(v939 + 9) = *(_BYTE *)(v940 + 9);
        *(_BYTE *)(v939 + 10) = *(_BYTE *)(v940 + 10);
        *(_BYTE *)(v939 + 11) = *(_BYTE *)(v940 + 11);
        *(_BYTE *)(v939 + 12) = *(_BYTE *)(v940 + 12);
        v941 = (_QWORD *)((v937 + 47) & 0xFFFFFFFFFFFFF8);
        v942 = (_QWORD *)((v938 + 47) & 0xFFFFFFFFFFFFF8);
        *v941 = *v942;
        v943 = ((unint64_t)v941 + 15) & 0xFFFFFFFFFFFFFFF8;
        v944 = ((unint64_t)v942 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v943 = *(_QWORD *)v944;
        *(_BYTE *)(v943 + 8) = *(_BYTE *)(v944 + 8);
        *(_BYTE *)(v943 + 9) = *(_BYTE *)(v944 + 9);
        v945 = (void *)((v1834 + v943) & v1866);
        v946 = (const void *)((v1834 + v944) & v1866);
        v947 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1837 + 48);
        swift_bridgeObjectRetain();
        if (v947(v946, 1, v1838))
        {
          memcpy(v945, v946, __n);
        }
        else
        {
          v933((unint64_t)v945, (unint64_t)v946, v1838);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1837 + 56))(v945, 0, 1, v1838);
        }
        v948 = (_QWORD *)(((unint64_t)v945 + v1835) & 0xFFFFFFFFFFFFFFF8);
        v949 = (_QWORD *)(((unint64_t)v946 + v1835) & 0xFFFFFFFFFFFFFFF8);
        *v948 = *v949;
        v950 = ((unint64_t)v948 + 15) & 0xFFFFFFFFFFFFFFF8;
        v951 = ((unint64_t)v949 + 15) & 0xFFFFFFFFFFFFFFF8;
        v952 = *(_QWORD *)v951;
        *(_BYTE *)(v950 + 8) = *(_BYTE *)(v951 + 8);
        *(_QWORD *)v950 = v952;
        v953 = (_QWORD *)(((unint64_t)v948 + 31) & 0xFFFFFFFFFFFFF8);
        v954 = (_QWORD *)(((unint64_t)v949 + 31) & 0xFFFFFFFFFFFFF8);
        *v953 = *v954;
        v955 = ((unint64_t)v953 + 15) & 0xFFFFFFFFFFFFFFF8;
        v956 = (uint64_t *)(((unint64_t)v954 + 15) & 0xFFFFFFFFFFFFFFF8);
        v957 = v956[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((v957 & 0x3000000000000000) != 0)
        {
          *(_OWORD *)v955 = *(_OWORD *)v956;
        }
        else
        {
          v958 = *v956;
          sub_23AAAE668(*v956, v957);
          *(_QWORD *)v955 = v958;
          *(_QWORD *)(v955 + 8) = v957;
        }
        v959 = (v955 + 19) & 0xFFFFFFFFFFFFFFF8;
        v960 = ((unint64_t)v956 + 19) & 0xFFFFFFFFFFFFFFF8;
        v961 = *(_QWORD *)v960;
        *(_BYTE *)(v959 + 8) = *(_BYTE *)(v960 + 8);
        *(_QWORD *)v959 = v961;
        *(_BYTE *)(v959 + 9) = *(_BYTE *)(v960 + 9);
        v962 = (v959 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v963 = (v960 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v964 = *(_DWORD *)v963;
        *(_BYTE *)(v962 + 4) = *(_BYTE *)(v963 + 4);
        *(_DWORD *)v962 = v964;
        v965 = (_QWORD *)((v959 + 25) & 0xFFFFFFFFFFFFFFF8);
        v966 = (_QWORD *)((v960 + 25) & 0xFFFFFFFFFFFFFFF8);
        *v965 = *v966;
        v965[1] = v966[1];
        v967 = v927 + v1901;
        v968 = (__int128 *)(v928 + v1901);
        v969 = *(_QWORD *)(v928 + v1901 + 16);
        if (v969 >= 0xFFFFFFFF)
          LODWORD(v969) = -1;
        v970 = v969 - 1;
        swift_bridgeObjectRetain();
        if (v970 < 0)
        {
          *(_QWORD *)v967 = *(_QWORD *)v968;
          *(_BYTE *)(v967 + 8) = *((_BYTE *)v968 + 8);
          *(_BYTE *)(v967 + 9) = *((_BYTE *)v968 + 9);
          v983 = (void *)*((_QWORD *)v968 + 2);
          v984 = v983;
          *(_QWORD *)(v967 + 16) = v983;
          v985 = (void *)*((_QWORD *)v968 + 3);
          v986 = v985;
          *(_QWORD *)(v967 + 24) = v985;
          *(_BYTE *)(v967 + 32) = *((_BYTE *)v968 + 32);
          *(_BYTE *)(v967 + 33) = *((_BYTE *)v968 + 33);
          *(_BYTE *)(v967 + 34) = *((_BYTE *)v968 + 34);
          *(_QWORD *)(v967 + 40) = *((_QWORD *)v968 + 5);
          *(_QWORD *)(v967 + 48) = *((_QWORD *)v968 + 6);
          *(_QWORD *)(v967 + 56) = *((_QWORD *)v968 + 7);
          *(_QWORD *)(v967 + 64) = *((_QWORD *)v968 + 8);
          *(_BYTE *)(v967 + 72) = *((_BYTE *)v968 + 72);
          *(_QWORD *)(v967 + 80) = *((_QWORD *)v968 + 10);
          *(_QWORD *)(v967 + 88) = *((_QWORD *)v968 + 11);
          v1906 = (void *)*((_QWORD *)v968 + 12);
          *(_QWORD *)(v967 + 96) = v1906;
          *(_BYTE *)(v967 + 104) = *((_BYTE *)v968 + 104);
          *(_BYTE *)(v967 + 105) = *((_BYTE *)v968 + 105);
          *(_QWORD *)(v967 + 112) = *((_QWORD *)v968 + 14);
          *(_QWORD *)(v967 + 120) = *((_QWORD *)v968 + 15);
          *(_QWORD *)(v967 + 128) = *((_QWORD *)v968 + 16);
          *(_QWORD *)(v967 + 136) = *((_QWORD *)v968 + 17);
          *(_QWORD *)(v967 + 144) = *((_QWORD *)v968 + 18);
          *(_QWORD *)(v967 + 152) = *((_QWORD *)v968 + 19);
          *(_QWORD *)(v967 + 160) = *((_QWORD *)v968 + 20);
          *(_QWORD *)(v967 + 168) = *((_QWORD *)v968 + 21);
          *(_BYTE *)(v967 + 176) = *((_BYTE *)v968 + 176);
          *(_QWORD *)(v967 + 184) = *((_QWORD *)v968 + 23);
          v987 = *((_QWORD *)v968 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v988 = v1906;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v987)
          {
            *(_QWORD *)(v967 + 192) = v987;
            *(_QWORD *)(v967 + 200) = *((_QWORD *)v968 + 25);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(v967 + 192) = v968[12];
          }
          v907 = v1814;
          v908 = v1909;
          v910 = v1892;
          v909 = v1893;
          *(_QWORD *)(v967 + 208) = *((_QWORD *)v968 + 26);
          *(_QWORD *)(v967 + 216) = *((_QWORD *)v968 + 27);
          *(_QWORD *)(v967 + 224) = *((_QWORD *)v968 + 28);
          *(_QWORD *)(v967 + 232) = *((_QWORD *)v968 + 29);
          *(_QWORD *)(v967 + 240) = *((_QWORD *)v968 + 30);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v971 = *v968;
          v972 = v968[1];
          v973 = v968[3];
          *(_OWORD *)(v967 + 32) = v968[2];
          *(_OWORD *)(v967 + 48) = v973;
          *(_OWORD *)v967 = v971;
          *(_OWORD *)(v967 + 16) = v972;
          v974 = v968[4];
          v975 = v968[5];
          v976 = v968[7];
          *(_OWORD *)(v967 + 96) = v968[6];
          *(_OWORD *)(v967 + 112) = v976;
          *(_OWORD *)(v967 + 64) = v974;
          *(_OWORD *)(v967 + 80) = v975;
          v977 = v968[8];
          v978 = v968[9];
          v979 = v968[11];
          *(_OWORD *)(v967 + 160) = v968[10];
          *(_OWORD *)(v967 + 176) = v979;
          *(_OWORD *)(v967 + 128) = v977;
          *(_OWORD *)(v967 + 144) = v978;
          v980 = v968[12];
          v981 = v968[13];
          v982 = v968[14];
          *(_QWORD *)(v967 + 240) = *((_QWORD *)v968 + 30);
          *(_OWORD *)(v967 + 208) = v981;
          *(_OWORD *)(v967 + 224) = v982;
          *(_OWORD *)(v967 + 192) = v980;
          v907 = v1814;
          v908 = v1909;
          v910 = v1892;
          v909 = v1893;
        }
        v1007 = (_OWORD *)((v967 + 255) & 0xFFFFFFFFFFFFFFF8);
        v1008 = (__int128 *)(((unint64_t)v968 + 255) & 0xFFFFFFFFFFFFFFF8);
        v1009 = *v1008;
        *(_OWORD *)((char *)v1007 + 9) = *(__int128 *)((char *)v1008 + 9);
        *v1007 = v1009;
        v1010 = (v967 + 287) & 0xFFFFFFFFFFFFFFF8;
        v1011 = ((unint64_t)v968 + 287) & 0xFFFFFFFFFFFFFFF8;
        v1012 = *(_OWORD *)v1011;
        *(_BYTE *)(v1010 + 16) = *(_BYTE *)(v1011 + 16);
        *(_OWORD *)v1010 = v1012;
        v1013 = (_QWORD *)((v967 + 311) & 0xFFFFFFFFFFFFF8);
        v1014 = ((unint64_t)v968 + 311) & 0xFFFFFFFFFFFFF8;
        v1015 = *(_QWORD *)v1014;
        v1014 += 15;
        *v1013 = v1015;
        v1016 = (_QWORD *)(((unint64_t)v1013 + 15) & 0xFFFFFFFFFFFFFFF8);
        v1017 = *(_QWORD *)(v1014 & 0xFFFFFFFFFFFFFFF8);
        v1018 = *(_QWORD *)((v1014 & 0xFFFFFFFFFFFFFFF8) + 8);
        sub_23AA7F2D4(v1017, v1018);
        *v1016 = v1017;
        v1016[1] = v1018;
        v911 = v1843;
        v693 = __n;
        v905 = v1921;
        v906 = v1929;
        if (v1813)
        {
LABEL_972:
          v1019 = ((((v1799
                    + 327
                    + ((((((((((v1914 + v911) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 19) & 0xFFFFFFFFFFFFFFF8)
                      + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 16;
          *(_QWORD *)(((unint64_t)v905 + v1019) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v906
                                                                                          + v1019) & 0xFFFFFFFFFFFFF8);
          v1002 = ((v1811
                  + ((v1876
                    + ((((v907
                        + ((((((((((v1914 + v693) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16) & ~v1876)) & 0xFFFFFFFFFFFFFFF8)
                + 8;
          if (v1002 <= v1894)
            v1002 = v1894;
          if (v1808 > v1002)
            v1002 = v1808;
          if (v1899 > v1002)
            v1002 = v1899;
          if (v1766 > v1002)
            v1002 = v1766;
          if (v908 > v1002)
            v1002 = v908;
          if (v1807 > v1002)
            v1002 = v1893 + 2;
          if (v1809 > v1002)
            v1002 = ((v1881 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
          if (v1824 > v1002)
            v1002 = v1881 + 2;
          if (v1810 > v1002)
            v1002 = (v1881 & 0xFFFFFFFFFFFFFFF8) + 16;
          if (v1002 <= v908)
            v1002 = v908;
          if (v1002 <= v910)
            v1002 = v910;
          if (v1002 <= v1878)
            v1002 = ((v1882 + 1) & ~v1882) + v1909;
          if (v1002 <= v908)
            v1002 = v908;
          if (v1002 <= v1880)
            v1002 = v1880;
          if (v1002 <= v1824)
            v1002 = v1881 + 2;
          if (v1002 <= v908)
            v1002 = v908;
          if (v1002 <= v909)
            v1002 = v909;
          if (v1002 <= v908)
            v1002 = v908;
          if (v1002 <= v1775)
            v1002 = v1775;
          if (v1002 <= v1824)
            v1002 = v1881 + 2;
          if (v1002 <= v908)
            v1002 = v908;
          if (v1002 <= 0x38)
            v1002 = 56;
          if (v1002 <= 3)
          {
            v1020 = ((1 << (8 * v1002)) + 5) >> (8 * v1002);
            if (v1020 > 0xFFD8)
            {
              v1006 = 6;
              goto LABEL_1024;
            }
            if (v1020 > 0xD8)
            {
              v1005 = 6;
              goto LABEL_1022;
            }
          }
          v1003 = 6;
          goto LABEL_1018;
        }
LABEL_902:
        v911 = v693;
        goto LABEL_972;
      }
      v115 = ~(unint64_t)v1875;
      v246 = ((unint64_t)a2 + v1833) & v115;
      v116 = v1895;
      v247 = (v246 + v1895 + v38) & v90;
      v111 = v1845;
      if (v1820 == v1802)
      {
        v114 = v1843;
        if (v1806 == v1820)
        {
          v248 = v247;
          v249 = v41;
          v113 = (*(uint64_t (**)(unint64_t))(v1827 + 48))(v248);
LABEL_829:
          v41 = v249;
          goto LABEL_830;
        }
        v477 = (unint64_t *)((v1839 + v247) & 0xFFFFFFFFFFFFFFF8);
        if (v1792 > 0x7FFFFFFE)
        {
          v249 = v41;
          v113 = (*(uint64_t (**)(unint64_t))(v1829 + 48))(((unint64_t)v477 + v1831) & ~v37);
          goto LABEL_829;
        }
        v478 = *v477;
      }
      else
      {
        v358 = v39 + v247;
        v114 = v1843;
        if ((v1788 & 0x80000000) == 0)
        {
          v359 = *(_QWORD *)(v358 + 8);
          if (v359 >= 0xFFFFFFFF)
            LODWORD(v359) = -1;
          v113 = v359 + 1;
          goto LABEL_830;
        }
        v613 = (v1841 + ((v1902 + v358) & v1886)) & v89;
        if (v1813 > 0x7FFFFFFD)
        {
          v249 = v41;
          v113 = (*(uint64_t (**)(unint64_t))(v1837 + 48))(v613);
          goto LABEL_829;
        }
        v478 = *(_QWORD *)(((v1786 + ((v1836 + v613) & v89)) & 0xFFFFFFFFFFFFF8) + 8);
      }
      if (v478 >= 0xFFFFFFFF)
        LODWORD(v478) = -1;
      if ((v478 + 1) >= 2)
        goto LABEL_831;
      goto LABEL_834;
    case 7u:
      v117 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v1844 + 16);
      v117(a1, a2, AssociatedTypeWitness);
      v118 = ((unint64_t)a1 + v1819) & v85;
      v117((uint64_t *)v118, (uint64_t *)(((unint64_t)a2 + v1819) & v85), AssociatedTypeWitness);
      v119 = (v118 + v1898 + v1922) & v86;
      v120 = ((((unint64_t)a2 + v1819) & v85) + v1898 + v1922) & v86;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1825 + 16))(v119, v120, v1826);
      v121 = (_QWORD *)((v1832 + v119) & 0xFFFFFFFFFFFFFFF8);
      v122 = (_QWORD *)((v1832 + v120) & 0xFFFFFFFFFFFFFFF8);
      *v121 = *v122;
      v123 = ((unint64_t)v121 + v1821) & ~(unint64_t)v1853;
      v124 = ((unint64_t)v122 + v1821) & ~(unint64_t)v1853;
      v125 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1822 + 16);
      swift_bridgeObjectRetain();
      v125(v123, v124, v1823);
      v126 = (_QWORD *)((v1816 + v123) & 0xFFFFFFFFFFFFF8);
      v127 = (_QWORD *)((v1816 + v124) & 0xFFFFFFFFFFFFF8);
      *v126 = *v127;
      v128 = (_QWORD *)(((unint64_t)v126 + 15) & 0xFFFFFFFFFFFFFFF8);
      v129 = (_QWORD *)(((unint64_t)v127 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v128 = *v129;
      v128[1] = v129[1];
      v130 = (_QWORD *)(v1900 + v119);
      *v130 = *(_QWORD *)(v1900 + v120);
      v130[1] = *(_QWORD *)(v1900 + v120 + 8);
      v131 = (v1902 + v1900 + v119) & v88;
      v132 = (v1902 + v1900 + v120) & v88;
      *(_BYTE *)v131 = *(_BYTE *)v132;
      v133 = v131 | 4;
      v134 = *(_DWORD *)(v132 | 4);
      *(_BYTE *)(v133 + 4) = *(_BYTE *)((v132 | 4) + 4);
      *(_DWORD *)v133 = v134;
      *(_WORD *)(v131 + 10) = *(_WORD *)(v132 + 0xA);
      v135 = (v1841 + v131) & ~(unint64_t)v1864;
      v136 = (v1841 + v132) & ~(unint64_t)v1864;
      v137 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v137(v135, v136, v1838);
      v138 = (v1836 + v135) & ~(unint64_t)v1864;
      v139 = (v1836 + v136) & ~(unint64_t)v1864;
      v137(v138, v139, v1838);
      v140 = (_BYTE *)(v138 + v1843);
      *v140 = *(_BYTE *)(v139 + v1843);
      v140[1] = *(_BYTE *)(v139 + v1843 + 1);
      v140[2] = *(_BYTE *)(v139 + v1843 + 2);
      v140[3] = *(_BYTE *)(v139 + v1843 + 3);
      v140[4] = *(_BYTE *)(v139 + v1843 + 4);
      v141 = (v138 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
      v142 = (v139 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v141 = *(_QWORD *)v142;
      *(_QWORD *)(v141 + 8) = *(_QWORD *)(v142 + 8);
      *(_BYTE *)(v141 + 16) = *(_BYTE *)(v142 + 16);
      *(_BYTE *)(v141 + 17) = *(_BYTE *)(v142 + 17);
      *(_BYTE *)(v141 + 18) = *(_BYTE *)(v142 + 18);
      *(_BYTE *)(v141 + 19) = *(_BYTE *)(v142 + 19);
      v143 = (v141 + 27) & 0xFFFFFFFFFFFFFFF8;
      v144 = (v142 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v143 = *(_QWORD *)v144;
      *(_BYTE *)(v143 + 8) = *(_BYTE *)(v144 + 8);
      *(_BYTE *)(v143 + 9) = *(_BYTE *)(v144 + 9);
      *(_BYTE *)(v143 + 10) = *(_BYTE *)(v144 + 10);
      *(_BYTE *)(v143 + 11) = *(_BYTE *)(v144 + 11);
      *(_BYTE *)(v143 + 12) = *(_BYTE *)(v144 + 12);
      v145 = (_QWORD *)((v141 + 47) & 0xFFFFFFFFFFFFF8);
      v146 = (_QWORD *)((v142 + 47) & 0xFFFFFFFFFFFFF8);
      *v145 = *v146;
      v147 = ((unint64_t)v145 + 15) & 0xFFFFFFFFFFFFFFF8;
      v148 = ((unint64_t)v146 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v147 = *(_QWORD *)v148;
      *(_BYTE *)(v147 + 8) = *(_BYTE *)(v148 + 8);
      *(_BYTE *)(v147 + 9) = *(_BYTE *)(v148 + 9);
      v149 = (void *)((v1834 + v147) & ~(unint64_t)v1864);
      v150 = (const void *)((v1834 + v148) & ~(unint64_t)v1864);
      v151 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1837 + 48);
      swift_bridgeObjectRetain();
      if (v151(v150, 1, v1838))
      {
        memcpy(v149, v150, __n);
      }
      else
      {
        v137((unint64_t)v149, (unint64_t)v150, v1838);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1837 + 56))(v149, 0, 1, v1838);
      }
      v273 = (_QWORD *)(((unint64_t)v149 + v1835) & 0xFFFFFFFFFFFFFFF8);
      v274 = (_QWORD *)(((unint64_t)v150 + v1835) & 0xFFFFFFFFFFFFFFF8);
      *v273 = *v274;
      v275 = ((unint64_t)v273 + 15) & 0xFFFFFFFFFFFFFFF8;
      v276 = ((unint64_t)v274 + 15) & 0xFFFFFFFFFFFFFFF8;
      v277 = *(_QWORD *)v276;
      *(_BYTE *)(v275 + 8) = *(_BYTE *)(v276 + 8);
      *(_QWORD *)v275 = v277;
      v278 = (_QWORD *)(((unint64_t)v273 + 31) & 0xFFFFFFFFFFFFF8);
      v279 = (_QWORD *)(((unint64_t)v274 + 31) & 0xFFFFFFFFFFFFF8);
      *v278 = *v279;
      v280 = ((unint64_t)v278 + 15) & 0xFFFFFFFFFFFFFFF8;
      v281 = (uint64_t *)(((unint64_t)v279 + 15) & 0xFFFFFFFFFFFFFFF8);
      v282 = v281[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v282 & 0x3000000000000000) != 0)
      {
        *(_OWORD *)v280 = *(_OWORD *)v281;
      }
      else
      {
        v293 = *v281;
        sub_23AAAE668(*v281, v282);
        *(_QWORD *)v280 = v293;
        *(_QWORD *)(v280 + 8) = v282;
      }
      v294 = (v280 + 19) & 0xFFFFFFFFFFFFFFF8;
      v295 = ((unint64_t)v281 + 19) & 0xFFFFFFFFFFFFFFF8;
      v296 = *(_QWORD *)v295;
      *(_BYTE *)(v294 + 8) = *(_BYTE *)(v295 + 8);
      *(_QWORD *)v294 = v296;
      *(_BYTE *)(v294 + 9) = *(_BYTE *)(v295 + 9);
      v297 = (v294 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v298 = (v295 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v299 = *(_DWORD *)v298;
      *(_BYTE *)(v297 + 4) = *(_BYTE *)(v298 + 4);
      *(_DWORD *)v297 = v299;
      v300 = (_QWORD *)((v294 + 25) & 0xFFFFFFFFFFFFFFF8);
      v301 = (_QWORD *)((v295 + 25) & 0xFFFFFFFFFFFFFFF8);
      *v300 = *v301;
      v300[1] = v301[1];
      v302 = v1901 + v131;
      v303 = v1901 + v132;
      v304 = *(_QWORD *)(v1901 + v132 + 16);
      if (v304 >= 0xFFFFFFFF)
        LODWORD(v304) = -1;
      v305 = v304 - 1;
      swift_bridgeObjectRetain();
      if (v305 < 0)
      {
        *(_QWORD *)v302 = *(_QWORD *)v303;
        *(_BYTE *)(v302 + 8) = *(_BYTE *)(v303 + 8);
        *(_BYTE *)(v302 + 9) = *(_BYTE *)(v303 + 9);
        v344 = *(void **)(v303 + 16);
        v345 = v344;
        *(_QWORD *)(v302 + 16) = v344;
        v346 = *(void **)(v303 + 24);
        v347 = v346;
        *(_QWORD *)(v302 + 24) = v346;
        *(_BYTE *)(v302 + 32) = *(_BYTE *)(v303 + 32);
        *(_BYTE *)(v302 + 33) = *(_BYTE *)(v303 + 33);
        *(_BYTE *)(v302 + 34) = *(_BYTE *)(v303 + 34);
        *(_QWORD *)(v302 + 40) = *(_QWORD *)(v303 + 40);
        *(_QWORD *)(v302 + 48) = *(_QWORD *)(v303 + 48);
        *(_QWORD *)(v302 + 56) = *(_QWORD *)(v303 + 56);
        *(_QWORD *)(v302 + 64) = *(_QWORD *)(v303 + 64);
        *(_BYTE *)(v302 + 72) = *(_BYTE *)(v303 + 72);
        *(_QWORD *)(v302 + 80) = *(_QWORD *)(v303 + 80);
        *(_QWORD *)(v302 + 88) = *(_QWORD *)(v303 + 88);
        v1924 = *(void **)(v303 + 96);
        *(_QWORD *)(v302 + 96) = v1924;
        *(_BYTE *)(v302 + 104) = *(_BYTE *)(v303 + 104);
        *(_BYTE *)(v302 + 105) = *(_BYTE *)(v303 + 105);
        *(_QWORD *)(v302 + 112) = *(_QWORD *)(v303 + 112);
        *(_QWORD *)(v302 + 120) = *(_QWORD *)(v303 + 120);
        *(_QWORD *)(v302 + 128) = *(_QWORD *)(v303 + 128);
        *(_QWORD *)(v302 + 136) = *(_QWORD *)(v303 + 136);
        *(_QWORD *)(v302 + 144) = *(_QWORD *)(v303 + 144);
        *(_QWORD *)(v302 + 152) = *(_QWORD *)(v303 + 152);
        *(_QWORD *)(v302 + 160) = *(_QWORD *)(v303 + 160);
        *(_QWORD *)(v302 + 168) = *(_QWORD *)(v303 + 168);
        *(_BYTE *)(v302 + 176) = *(_BYTE *)(v303 + 176);
        *(_QWORD *)(v302 + 184) = *(_QWORD *)(v303 + 184);
        v348 = *(_QWORD *)(v303 + 192);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v349 = v1924;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v348)
        {
          *(_QWORD *)(v302 + 192) = v348;
          *(_QWORD *)(v302 + 200) = *(_QWORD *)(v303 + 200);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v302 + 192) = *(_OWORD *)(v303 + 192);
        }
        v318 = v1776;
        *(_QWORD *)(v302 + 208) = *(_QWORD *)(v303 + 208);
        *(_QWORD *)(v302 + 216) = *(_QWORD *)(v303 + 216);
        *(_QWORD *)(v302 + 224) = *(_QWORD *)(v303 + 224);
        *(_QWORD *)(v302 + 232) = *(_QWORD *)(v303 + 232);
        *(_QWORD *)(v302 + 240) = *(_QWORD *)(v303 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v306 = *(_OWORD *)v303;
        v307 = *(_OWORD *)(v303 + 16);
        v308 = *(_OWORD *)(v303 + 48);
        *(_OWORD *)(v302 + 32) = *(_OWORD *)(v303 + 32);
        *(_OWORD *)(v302 + 48) = v308;
        *(_OWORD *)v302 = v306;
        *(_OWORD *)(v302 + 16) = v307;
        v309 = *(_OWORD *)(v303 + 64);
        v310 = *(_OWORD *)(v303 + 80);
        v311 = *(_OWORD *)(v303 + 112);
        *(_OWORD *)(v302 + 96) = *(_OWORD *)(v303 + 96);
        *(_OWORD *)(v302 + 112) = v311;
        *(_OWORD *)(v302 + 64) = v309;
        *(_OWORD *)(v302 + 80) = v310;
        v312 = *(_OWORD *)(v303 + 128);
        v313 = *(_OWORD *)(v303 + 144);
        v314 = *(_OWORD *)(v303 + 176);
        *(_OWORD *)(v302 + 160) = *(_OWORD *)(v303 + 160);
        *(_OWORD *)(v302 + 176) = v314;
        *(_OWORD *)(v302 + 128) = v312;
        *(_OWORD *)(v302 + 144) = v313;
        v315 = *(_OWORD *)(v303 + 192);
        v316 = *(_OWORD *)(v303 + 208);
        v317 = *(_OWORD *)(v303 + 224);
        *(_QWORD *)(v302 + 240) = *(_QWORD *)(v303 + 240);
        *(_OWORD *)(v302 + 208) = v316;
        *(_OWORD *)(v302 + 224) = v317;
        *(_OWORD *)(v302 + 192) = v315;
        v318 = v1776;
      }
      v446 = (_OWORD *)((v302 + 255) & 0xFFFFFFFFFFFFFFF8);
      v447 = (__int128 *)((v303 + 255) & 0xFFFFFFFFFFFFFFF8);
      v448 = *v447;
      *(_OWORD *)((char *)v446 + 9) = *(__int128 *)((char *)v447 + 9);
      *v446 = v448;
      v449 = (v302 + 287) & 0xFFFFFFFFFFFFFFF8;
      v450 = (v303 + 287) & 0xFFFFFFFFFFFFFFF8;
      v451 = *(_OWORD *)v450;
      *(_BYTE *)(v449 + 16) = *(_BYTE *)(v450 + 16);
      *(_OWORD *)v449 = v451;
      v452 = (_QWORD *)((v302 + 311) & 0xFFFFFFFFFFFFF8);
      v453 = (v303 + 311) & 0xFFFFFFFFFFFFF8;
      v454 = *(_QWORD *)v453;
      v453 += 15;
      *v452 = v454;
      v455 = (_QWORD *)(((unint64_t)v452 + 15) & 0xFFFFFFFFFFFFFFF8);
      v456 = *(_QWORD *)(v453 & 0xFFFFFFFFFFFFFFF8);
      v457 = *(_QWORD *)((v453 & 0xFFFFFFFFFFFFFFF8) + 8);
      sub_23AA7F2D4(v456, v457);
      *v455 = v456;
      v455[1] = v457;
      if (v318 > 3)
        goto LABEL_435;
      v459 = ((1 << (8 * v318)) + 5) >> (8 * v318);
      if (v459 > 0xFFD8)
      {
        v461 = 7;
        goto LABEL_450;
      }
      if (v459 <= 0xD8)
      {
LABEL_435:
        v458 = 7;
        goto LABEL_444;
      }
      v460 = 7;
      goto LABEL_448;
    case 8u:
      v152 = *(void (**)(void))(v1847 + 16);
      v1768 = ((((v1817 + ((v37 + 8 + (v1839 & 0xFFFFFFFFFFFFFFF8)) & ~v37)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      v1858 = ~v37;
      v152();
      v153 = ((unint64_t)a1 + v1833) & v83;
      v154 = ((unint64_t)a2 + v1833) & v83;
      ((void (*)(unint64_t, unint64_t, uint64_t))v152)(v153, v154, v1845);
      v155 = (v153 + v1895 + v38) & ~v38;
      v156 = (v154 + v1895 + v38) & ~v38;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1827 + 16))(v155, v156, v1828);
      v157 = (_QWORD *)((v1839 + v155) & 0xFFFFFFFFFFFFFFF8);
      v158 = (_QWORD *)((v1839 + v156) & 0xFFFFFFFFFFFFFFF8);
      *v157 = *v158;
      v159 = ((unint64_t)v157 + v1831) & v1858;
      v160 = ((unint64_t)v158 + v1831) & v1858;
      v161 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1829 + 16);
      swift_bridgeObjectRetain();
      v161(v159, v160, v1830);
      v162 = (_QWORD *)((v1817 + v159) & 0xFFFFFFFFFFFFF8);
      v163 = (_QWORD *)((v1817 + v160) & 0xFFFFFFFFFFFFF8);
      *v162 = *v163;
      v164 = (_QWORD *)(((unint64_t)v162 + 15) & 0xFFFFFFFFFFFFFFF8);
      v165 = (_QWORD *)(((unint64_t)v163 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v164 = *v165;
      v164[1] = v165[1];
      v166 = (_QWORD *)(v1768 + v155);
      *v166 = *(_QWORD *)(v1768 + v156);
      v166[1] = *(_QWORD *)(v1768 + v156 + 8);
      v167 = (v1902 + v1768 + v155) & v88;
      v168 = (v1902 + v1768 + v156) & v88;
      *(_BYTE *)v167 = *(_BYTE *)v168;
      v169 = v167 | 4;
      v170 = *(_DWORD *)(v168 | 4);
      *(_BYTE *)(v169 + 4) = *(_BYTE *)((v168 | 4) + 4);
      *(_DWORD *)v169 = v170;
      *(_WORD *)(v167 + 10) = *(_WORD *)(v168 + 0xA);
      v171 = (v1841 + v167) & ~(unint64_t)v1864;
      v172 = (v1841 + v168) & ~(unint64_t)v1864;
      v173 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v173(v171, v172, v1838);
      v174 = (v1836 + v171) & ~(unint64_t)v1864;
      v175 = (v1836 + v172) & ~(unint64_t)v1864;
      v173(v174, v175, v1838);
      v176 = (_BYTE *)(v174 + v1843);
      *v176 = *(_BYTE *)(v175 + v1843);
      v176[1] = *(_BYTE *)(v175 + v1843 + 1);
      v176[2] = *(_BYTE *)(v175 + v1843 + 2);
      v176[3] = *(_BYTE *)(v175 + v1843 + 3);
      v176[4] = *(_BYTE *)(v175 + v1843 + 4);
      v177 = (v174 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
      v178 = (v175 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v177 = *(_QWORD *)v178;
      *(_QWORD *)(v177 + 8) = *(_QWORD *)(v178 + 8);
      *(_BYTE *)(v177 + 16) = *(_BYTE *)(v178 + 16);
      *(_BYTE *)(v177 + 17) = *(_BYTE *)(v178 + 17);
      *(_BYTE *)(v177 + 18) = *(_BYTE *)(v178 + 18);
      *(_BYTE *)(v177 + 19) = *(_BYTE *)(v178 + 19);
      v179 = (v177 + 27) & 0xFFFFFFFFFFFFFFF8;
      v180 = (v178 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v179 = *(_QWORD *)v180;
      *(_BYTE *)(v179 + 8) = *(_BYTE *)(v180 + 8);
      *(_BYTE *)(v179 + 9) = *(_BYTE *)(v180 + 9);
      *(_BYTE *)(v179 + 10) = *(_BYTE *)(v180 + 10);
      *(_BYTE *)(v179 + 11) = *(_BYTE *)(v180 + 11);
      *(_BYTE *)(v179 + 12) = *(_BYTE *)(v180 + 12);
      v181 = (_QWORD *)((v177 + 47) & 0xFFFFFFFFFFFFF8);
      v182 = (_QWORD *)((v178 + 47) & 0xFFFFFFFFFFFFF8);
      *v181 = *v182;
      v183 = ((unint64_t)v181 + 15) & 0xFFFFFFFFFFFFFFF8;
      v184 = ((unint64_t)v182 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v183 = *(_QWORD *)v184;
      *(_BYTE *)(v183 + 8) = *(_BYTE *)(v184 + 8);
      *(_BYTE *)(v183 + 9) = *(_BYTE *)(v184 + 9);
      v185 = (void *)((v1834 + v183) & ~(unint64_t)v1864);
      v186 = (const void *)((v1834 + v184) & ~(unint64_t)v1864);
      v187 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1837 + 48);
      swift_bridgeObjectRetain();
      if (v187(v186, 1, v1838))
      {
        memcpy(v185, v186, __n);
      }
      else
      {
        v173((unint64_t)v185, (unint64_t)v186, v1838);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1837 + 56))(v185, 0, 1, v1838);
      }
      v283 = (_QWORD *)(((unint64_t)v185 + v1835) & 0xFFFFFFFFFFFFFFF8);
      v284 = (_QWORD *)(((unint64_t)v186 + v1835) & 0xFFFFFFFFFFFFFFF8);
      *v283 = *v284;
      v285 = ((unint64_t)v283 + 15) & 0xFFFFFFFFFFFFFFF8;
      v286 = ((unint64_t)v284 + 15) & 0xFFFFFFFFFFFFFFF8;
      v287 = *(_QWORD *)v286;
      *(_BYTE *)(v285 + 8) = *(_BYTE *)(v286 + 8);
      *(_QWORD *)v285 = v287;
      v288 = (_QWORD *)(((unint64_t)v283 + 31) & 0xFFFFFFFFFFFFF8);
      v289 = (_QWORD *)(((unint64_t)v284 + 31) & 0xFFFFFFFFFFFFF8);
      *v288 = *v289;
      v290 = ((unint64_t)v288 + 15) & 0xFFFFFFFFFFFFFFF8;
      v291 = (uint64_t *)(((unint64_t)v289 + 15) & 0xFFFFFFFFFFFFFFF8);
      v292 = v291[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v292 & 0x3000000000000000) != 0)
      {
        *(_OWORD *)v290 = *(_OWORD *)v291;
      }
      else
      {
        v319 = *v291;
        sub_23AAAE668(*v291, v292);
        *(_QWORD *)v290 = v319;
        *(_QWORD *)(v290 + 8) = v292;
      }
      v320 = (v290 + 19) & 0xFFFFFFFFFFFFFFF8;
      v321 = ((unint64_t)v291 + 19) & 0xFFFFFFFFFFFFFFF8;
      v322 = *(_QWORD *)v321;
      *(_BYTE *)(v320 + 8) = *(_BYTE *)(v321 + 8);
      *(_QWORD *)v320 = v322;
      *(_BYTE *)(v320 + 9) = *(_BYTE *)(v321 + 9);
      v323 = (v320 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v324 = (v321 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v325 = *(_DWORD *)v324;
      *(_BYTE *)(v323 + 4) = *(_BYTE *)(v324 + 4);
      *(_DWORD *)v323 = v325;
      v326 = (_QWORD *)((v320 + 25) & 0xFFFFFFFFFFFFFFF8);
      v327 = (_QWORD *)((v321 + 25) & 0xFFFFFFFFFFFFFFF8);
      *v326 = *v327;
      v326[1] = v327[1];
      v328 = v1901 + v167;
      v329 = v1901 + v168;
      v330 = *(_QWORD *)(v1901 + v168 + 16);
      if (v330 >= 0xFFFFFFFF)
        LODWORD(v330) = -1;
      v331 = v330 - 1;
      swift_bridgeObjectRetain();
      if (v331 < 0)
      {
        *(_QWORD *)v328 = *(_QWORD *)v329;
        *(_BYTE *)(v328 + 8) = *(_BYTE *)(v329 + 8);
        *(_BYTE *)(v328 + 9) = *(_BYTE *)(v329 + 9);
        v350 = *(void **)(v329 + 16);
        v351 = v350;
        *(_QWORD *)(v328 + 16) = v350;
        v352 = *(void **)(v329 + 24);
        v353 = v352;
        *(_QWORD *)(v328 + 24) = v352;
        *(_BYTE *)(v328 + 32) = *(_BYTE *)(v329 + 32);
        *(_BYTE *)(v328 + 33) = *(_BYTE *)(v329 + 33);
        *(_BYTE *)(v328 + 34) = *(_BYTE *)(v329 + 34);
        *(_QWORD *)(v328 + 40) = *(_QWORD *)(v329 + 40);
        *(_QWORD *)(v328 + 48) = *(_QWORD *)(v329 + 48);
        *(_QWORD *)(v328 + 56) = *(_QWORD *)(v329 + 56);
        *(_QWORD *)(v328 + 64) = *(_QWORD *)(v329 + 64);
        *(_BYTE *)(v328 + 72) = *(_BYTE *)(v329 + 72);
        *(_QWORD *)(v328 + 80) = *(_QWORD *)(v329 + 80);
        *(_QWORD *)(v328 + 88) = *(_QWORD *)(v329 + 88);
        v1925 = *(void **)(v329 + 96);
        *(_QWORD *)(v328 + 96) = v1925;
        *(_BYTE *)(v328 + 104) = *(_BYTE *)(v329 + 104);
        *(_BYTE *)(v328 + 105) = *(_BYTE *)(v329 + 105);
        *(_QWORD *)(v328 + 112) = *(_QWORD *)(v329 + 112);
        *(_QWORD *)(v328 + 120) = *(_QWORD *)(v329 + 120);
        *(_QWORD *)(v328 + 128) = *(_QWORD *)(v329 + 128);
        *(_QWORD *)(v328 + 136) = *(_QWORD *)(v329 + 136);
        *(_QWORD *)(v328 + 144) = *(_QWORD *)(v329 + 144);
        *(_QWORD *)(v328 + 152) = *(_QWORD *)(v329 + 152);
        *(_QWORD *)(v328 + 160) = *(_QWORD *)(v329 + 160);
        *(_QWORD *)(v328 + 168) = *(_QWORD *)(v329 + 168);
        *(_BYTE *)(v328 + 176) = *(_BYTE *)(v329 + 176);
        *(_QWORD *)(v328 + 184) = *(_QWORD *)(v329 + 184);
        v354 = *(_QWORD *)(v329 + 192);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v355 = v1925;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v354)
        {
          *(_QWORD *)(v328 + 192) = v354;
          *(_QWORD *)(v328 + 200) = *(_QWORD *)(v329 + 200);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v328 + 192) = *(_OWORD *)(v329 + 192);
        }
        v318 = v1776;
        *(_QWORD *)(v328 + 208) = *(_QWORD *)(v329 + 208);
        *(_QWORD *)(v328 + 216) = *(_QWORD *)(v329 + 216);
        *(_QWORD *)(v328 + 224) = *(_QWORD *)(v329 + 224);
        *(_QWORD *)(v328 + 232) = *(_QWORD *)(v329 + 232);
        *(_QWORD *)(v328 + 240) = *(_QWORD *)(v329 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v332 = *(_OWORD *)v329;
        v333 = *(_OWORD *)(v329 + 16);
        v334 = *(_OWORD *)(v329 + 48);
        *(_OWORD *)(v328 + 32) = *(_OWORD *)(v329 + 32);
        *(_OWORD *)(v328 + 48) = v334;
        *(_OWORD *)v328 = v332;
        *(_OWORD *)(v328 + 16) = v333;
        v335 = *(_OWORD *)(v329 + 64);
        v336 = *(_OWORD *)(v329 + 80);
        v337 = *(_OWORD *)(v329 + 112);
        *(_OWORD *)(v328 + 96) = *(_OWORD *)(v329 + 96);
        *(_OWORD *)(v328 + 112) = v337;
        *(_OWORD *)(v328 + 64) = v335;
        *(_OWORD *)(v328 + 80) = v336;
        v338 = *(_OWORD *)(v329 + 128);
        v339 = *(_OWORD *)(v329 + 144);
        v340 = *(_OWORD *)(v329 + 176);
        *(_OWORD *)(v328 + 160) = *(_OWORD *)(v329 + 160);
        *(_OWORD *)(v328 + 176) = v340;
        *(_OWORD *)(v328 + 128) = v338;
        *(_OWORD *)(v328 + 144) = v339;
        v341 = *(_OWORD *)(v329 + 192);
        v342 = *(_OWORD *)(v329 + 208);
        v343 = *(_OWORD *)(v329 + 224);
        *(_QWORD *)(v328 + 240) = *(_QWORD *)(v329 + 240);
        *(_OWORD *)(v328 + 208) = v342;
        *(_OWORD *)(v328 + 224) = v343;
        *(_OWORD *)(v328 + 192) = v341;
        v318 = v1776;
      }
      v462 = (_OWORD *)((v328 + 255) & 0xFFFFFFFFFFFFFFF8);
      v463 = (__int128 *)((v329 + 255) & 0xFFFFFFFFFFFFFFF8);
      v464 = *v463;
      *(_OWORD *)((char *)v462 + 9) = *(__int128 *)((char *)v463 + 9);
      *v462 = v464;
      v465 = (v328 + 287) & 0xFFFFFFFFFFFFFFF8;
      v466 = (v329 + 287) & 0xFFFFFFFFFFFFFFF8;
      v467 = *(_OWORD *)v466;
      *(_BYTE *)(v465 + 16) = *(_BYTE *)(v466 + 16);
      *(_OWORD *)v465 = v467;
      v468 = (_QWORD *)((v328 + 311) & 0xFFFFFFFFFFFFF8);
      v469 = (v329 + 311) & 0xFFFFFFFFFFFFF8;
      v470 = *(_QWORD *)v469;
      v469 += 15;
      *v468 = v470;
      v471 = (_QWORD *)(((unint64_t)v468 + 15) & 0xFFFFFFFFFFFFFFF8);
      v472 = *(_QWORD *)(v469 & 0xFFFFFFFFFFFFFFF8);
      v473 = *(_QWORD *)((v469 & 0xFFFFFFFFFFFFFFF8) + 8);
      sub_23AA7F2D4(v472, v473);
      *v471 = v472;
      v471[1] = v473;
      if (v318 > 3)
        goto LABEL_443;
      v474 = ((1 << (8 * v318)) + 5) >> (8 * v318);
      if (v474 > 0xFFD8)
      {
        v461 = 8;
LABEL_450:
        *(_DWORD *)((char *)a1 + v318) = v461;
      }
      else if (v474 <= 0xD8)
      {
LABEL_443:
        v458 = 8;
LABEL_444:
        *((_BYTE *)a1 + v318) = v458;
      }
      else
      {
        v460 = 8;
LABEL_448:
        *(_WORD *)((char *)a1 + v318) = v460;
      }
      return a1;
    case 9u:
      v188 = *((unsigned __int8 *)a2 + v1881);
      if (v188 >= 2)
      {
        if (v1881 <= 3)
          v189 = v1881;
        else
          v189 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v497 = v188 == 1;
      if (v188 == 1)
        v498 = v1847;
      else
        v498 = v1844;
      if (v188 == 1)
        v499 = v1845;
      else
        v499 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v498 + 16))(a1, a2, v499);
      *((_BYTE *)a1 + v1881) = v497;
      if (v1776 > 3)
        goto LABEL_508;
      v500 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v500 > 0xFFD8)
      {
        v254 = 9;
        goto LABEL_804;
      }
      if (v500 <= 0xD8)
      {
LABEL_508:
        v207 = 9;
        goto LABEL_798;
      }
      LOWORD(v254) = 9;
      goto LABEL_802;
    case 0xAu:
      v190 = *((unsigned __int8 *)a2 + v1881);
      if (v190 >= 2)
      {
        if (v1881 <= 3)
          v191 = v1881;
        else
          v191 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v250 = ~v1882;
      v501 = v190 == 1;
      if (v190 == 1)
        v502 = v1847;
      else
        v502 = v1844;
      if (v190 == 1)
        v503 = v1845;
      else
        v503 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v502 + 16))(a1, a2, v503);
      *((_BYTE *)a1 + v1881) = v501;
      v504 = (char *)(((unint64_t)a1 + v1840) & v250);
      v505 = ((unint64_t)a2 + v1840) & v250;
      v506 = *(unsigned __int8 *)(v505 + v1881);
      if (v506 > 1)
      {
        v507 = v1909;
        memcpy(v504, (const void *)(((unint64_t)a2 + v1840) & v250), v1909);
      }
      else
      {
        if (v506 == 1)
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v1847 + 16))(v504, ((unint64_t)a2 + v1840) & v250, v1845);
          v504[v1881] = 1;
        }
        else
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v1844 + 16))(v504, ((unint64_t)a2 + v1840) & v250, AssociatedTypeWitness);
          v504[v1881] = 0;
        }
        v507 = v1909;
      }
      v508 = &v504[v507];
      *v508 = *(_BYTE *)(v505 + v507);
      v508[1] = *(_BYTE *)(v505 + v507 + 1);
      if (v1776 > 3)
        goto LABEL_526;
      v509 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v509 > 0xFFD8)
      {
        v254 = 10;
        goto LABEL_804;
      }
      if (v509 <= 0xD8)
      {
LABEL_526:
        v207 = 10;
        goto LABEL_798;
      }
      LOWORD(v254) = 10;
      goto LABEL_802;
    case 0xBu:
      v192 = *((unsigned __int8 *)a2 + v1881);
      if (v192 >= 2)
      {
        if (v1881 <= 3)
          v193 = v1881;
        else
          v193 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v251 = ~v1882;
      v510 = v192 == 1;
      if (v192 == 1)
        v511 = v1847;
      else
        v511 = v1844;
      if (v192 == 1)
        v512 = v1845;
      else
        v512 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v511 + 16))(a1, a2, v512);
      *((_BYTE *)a1 + v1881) = v510;
      v513 = (char *)(((unint64_t)a1 + v1840) & v251);
      v514 = ((unint64_t)a2 + v1840) & v251;
      v515 = *(unsigned __int8 *)(v514 + v1881);
      if (v515 > 1)
      {
        v516 = v1909;
        memcpy(v513, (const void *)(((unint64_t)a2 + v1840) & v251), v1909);
      }
      else
      {
        if (v515 == 1)
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v1847 + 16))(v513, ((unint64_t)a2 + v1840) & v251, v1845);
          v513[v1881] = 1;
        }
        else
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v1844 + 16))(v513, ((unint64_t)a2 + v1840) & v251, AssociatedTypeWitness);
          v513[v1881] = 0;
        }
        v516 = v1909;
      }
      v517 = &v513[v516];
      *v517 = *(_BYTE *)(v514 + v516);
      v517[1] = *(_BYTE *)(v514 + v516 + 1);
      if (v1776 > 3)
        goto LABEL_544;
      v518 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v518 > 0xFFD8)
      {
        v254 = 11;
        goto LABEL_804;
      }
      if (v518 <= 0xD8)
      {
LABEL_544:
        v207 = 11;
        goto LABEL_798;
      }
      LOWORD(v254) = 11;
      goto LABEL_802;
    case 0xCu:
      v194 = *((unsigned __int8 *)a2 + v1881);
      if (v194 >= 2)
      {
        if (v1881 <= 3)
          v195 = v1881;
        else
          v195 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v519 = v194 == 1;
      if (v194 == 1)
        v520 = v1847;
      else
        v520 = v1844;
      if (v194 == 1)
        v521 = v1845;
      else
        v521 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v520 + 16))(a1, a2, v521);
      *((_BYTE *)a1 + v1881) = v519;
      *((_BYTE *)a1 + v1909) = *((_BYTE *)a2 + v1909);
      v522 = *(void **)(((unint64_t)a2 + v1824 + 7) & 0xFFFFFFFFFFFFF8);
      v523 = v522;
      *(_QWORD *)(((unint64_t)a1 + v1824 + 7) & 0xFFFFFFFFFFFFF8) = v522;
      if (v1776 > 3)
        goto LABEL_556;
      v524 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v524 > 0xFFD8)
      {
        v254 = 12;
        goto LABEL_804;
      }
      if (v524 <= 0xD8)
      {
LABEL_556:
        v207 = 12;
        goto LABEL_798;
      }
      LOWORD(v254) = 12;
      goto LABEL_802;
    case 0xDu:
      v196 = *((unsigned __int8 *)a2 + v1881);
      if (v196 >= 2)
      {
        if (v1881 <= 3)
          v197 = v1881;
        else
          v197 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v525 = v196 == 1;
      if (v196 == 1)
        v526 = v1847;
      else
        v526 = v1844;
      if (v196 == 1)
        v527 = v1845;
      else
        v527 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v526 + 16))(a1, a2, v527);
      *((_BYTE *)a1 + v1881) = v525;
      *((_BYTE *)a1 + v1909) = *((_BYTE *)a2 + v1909);
      if (v1776 > 3)
        goto LABEL_568;
      v528 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v528 > 0xFFD8)
      {
        v254 = 13;
        goto LABEL_804;
      }
      if (v528 <= 0xD8)
      {
LABEL_568:
        v207 = 13;
        goto LABEL_798;
      }
      LOWORD(v254) = 13;
      goto LABEL_802;
    case 0xEu:
      v198 = *((unsigned __int8 *)a2 + v1881);
      if (v198 >= 2)
      {
        if (v1881 <= 3)
          v199 = v1881;
        else
          v199 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v529 = v198 == 1;
      if (v198 == 1)
        v530 = v1847;
      else
        v530 = v1844;
      if (v198 == 1)
        v531 = v1845;
      else
        v531 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v530 + 16))(a1, a2, v531);
      *((_BYTE *)a1 + v1881) = v529;
      v532 = *(void **)(((unint64_t)a2 + v1909 + 7) & 0xFFFFFFFFFFFFF8);
      v533 = v532;
      *(_QWORD *)(((unint64_t)a1 + v1909 + 7) & 0xFFFFFFFFFFFFF8) = v532;
      if (v1776 > 3)
        goto LABEL_580;
      v534 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v534 > 0xFFD8)
      {
        v254 = 14;
        goto LABEL_804;
      }
      if (v534 <= 0xD8)
      {
LABEL_580:
        v207 = 14;
        goto LABEL_798;
      }
      LOWORD(v254) = 14;
      goto LABEL_802;
    case 0xFu:
      v200 = *((unsigned __int8 *)a2 + v1881);
      if (v200 >= 2)
      {
        if (v1881 <= 3)
          v201 = v1881;
        else
          v201 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v535 = v200 == 1;
      if (v200 == 1)
        v536 = v1847;
      else
        v536 = v1844;
      if (v200 == 1)
        v537 = v1845;
      else
        v537 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v536 + 16))(a1, a2, v537);
      *((_BYTE *)a1 + v1881) = v535;
      v538 = *(void **)(((unint64_t)a2 + v1909 + 7) & 0xFFFFFFFFFFFFF8);
      v539 = v538;
      *(_QWORD *)(((unint64_t)a1 + v1909 + 7) & 0xFFFFFFFFFFFFF8) = v538;
      if (v1776 > 3)
        goto LABEL_592;
      v540 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v540 > 0xFFD8)
      {
        v254 = 15;
        goto LABEL_804;
      }
      if (v540 <= 0xD8)
      {
LABEL_592:
        v207 = 15;
        goto LABEL_798;
      }
      LOWORD(v254) = 15;
      goto LABEL_802;
    case 0x10u:
      *a1 = *a2;
      v202 = a2 + 1;
      v203 = a2[2];
      if (v203 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 1) = *(_OWORD *)v202;
      }
      else
      {
        v252 = *v202;
        sub_23AAAE668(*v202, a2[2]);
        a1[1] = v252;
        a1[2] = v203;
      }
      v206 = v1776;
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
      *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
      a1[6] = a2[6];
      if (v1776 > 3)
        goto LABEL_314;
      v262 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v262 > 0xFFD8)
      {
        v254 = 16;
        goto LABEL_804;
      }
      if (v262 <= 0xD8)
      {
LABEL_314:
        v207 = 16;
        goto LABEL_798;
      }
      LOWORD(v254) = 16;
      goto LABEL_802;
    case 0x11u:
      v204 = *((unsigned __int8 *)a2 + v1881);
      if (v204 >= 2)
      {
        if (v1881 <= 3)
          v205 = v1881;
        else
          v205 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v541 = v204 == 1;
      if (v204 == 1)
        v542 = v1847;
      else
        v542 = v1844;
      if (v204 == 1)
        v543 = v1845;
      else
        v543 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v542 + 16))(a1, a2, v543);
      *((_BYTE *)a1 + v1881) = v541;
      if (v1776 > 3)
        goto LABEL_604;
      v544 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v544 > 0xFFD8)
      {
        v254 = 17;
        goto LABEL_804;
      }
      if (v544 <= 0xD8)
      {
LABEL_604:
        v207 = 17;
        goto LABEL_798;
      }
      LOWORD(v254) = 17;
      goto LABEL_802;
    case 0x12u:
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v1844 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1847 + 16))(((unint64_t)a1 + v1812) & v83, ((unint64_t)a2 + v1812) & v83, v1845);
      v206 = v1776;
      if (v1776 > 3)
        goto LABEL_206;
      v253 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v253 > 0xFFD8)
      {
        v254 = 18;
        goto LABEL_804;
      }
      if (v253 <= 0xD8)
      {
LABEL_206:
        v207 = 18;
        goto LABEL_798;
      }
      LOWORD(v254) = 18;
      goto LABEL_802;
    case 0x13u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v208 = ((unint64_t)a1 + v1882 + 1) & v84;
      v209 = *(unsigned __int8 *)((((unint64_t)a2 + v1882 + 1) & v84) + v1881);
      if (v209 >= 2)
      {
        if (v1881 <= 3)
          v210 = v1881;
        else
          v210 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v545 = v209 == 1;
      if (v209 == 1)
        v546 = v1847;
      else
        v546 = v1844;
      (*(void (**)(uint64_t))(v546 + 16))(v208);
      *(_BYTE *)(v208 + v1881) = v545;
      if (v1776 > 3)
        goto LABEL_613;
      v547 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v547 > 0xFFD8)
      {
        v254 = 19;
        goto LABEL_804;
      }
      if (v547 <= 0xD8)
      {
LABEL_613:
        v207 = 19;
        goto LABEL_798;
      }
      LOWORD(v254) = 19;
      goto LABEL_802;
    case 0x14u:
      *a1 = *a2;
      swift_retain();
      v206 = v1776;
      if (v1776 > 3)
        goto LABEL_213;
      v255 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v255 > 0xFFD8)
      {
        v254 = 20;
        goto LABEL_804;
      }
      if (v255 <= 0xD8)
      {
LABEL_213:
        v207 = 20;
        goto LABEL_798;
      }
      LOWORD(v254) = 20;
      goto LABEL_802;
    case 0x15u:
      *a1 = *a2;
      swift_retain();
      v206 = v1776;
      if (v1776 > 3)
        goto LABEL_215;
      v256 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v256 > 0xFFD8)
      {
        v254 = 21;
        goto LABEL_804;
      }
      if (v256 <= 0xD8)
      {
LABEL_215:
        v207 = 21;
        goto LABEL_798;
      }
      LOWORD(v254) = 21;
      goto LABEL_802;
    case 0x16u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v206 = v1776;
      if (v1776 > 3)
        goto LABEL_217;
      v257 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v257 > 0xFFD8)
      {
        v254 = 22;
        goto LABEL_804;
      }
      if (v257 <= 0xD8)
      {
LABEL_217:
        v207 = 22;
        goto LABEL_798;
      }
      LOWORD(v254) = 22;
      goto LABEL_802;
    case 0x17u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v206 = v1776;
      if (v1776 > 3)
        goto LABEL_219;
      v258 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v258 > 0xFFD8)
      {
        v254 = 23;
        goto LABEL_804;
      }
      if (v258 <= 0xD8)
      {
LABEL_219:
        v207 = 23;
        goto LABEL_798;
      }
      LOWORD(v254) = 23;
      goto LABEL_802;
    case 0x18u:
      v211 = *((unsigned __int8 *)a2 + v1881);
      if (v211 >= 2)
      {
        if (v1881 <= 3)
          v212 = v1881;
        else
          v212 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v548 = v211 == 1;
      if (v211 == 1)
        v549 = v1847;
      else
        v549 = v1844;
      if (v211 == 1)
        v550 = v1845;
      else
        v550 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v549 + 16))(a1, a2, v550);
      *((_BYTE *)a1 + v1881) = v548;
      if (v1776 > 3)
        goto LABEL_625;
      v551 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v551 > 0xFFD8)
      {
        v254 = 24;
        goto LABEL_804;
      }
      if (v551 <= 0xD8)
      {
LABEL_625:
        v207 = 24;
        goto LABEL_798;
      }
      LOWORD(v254) = 24;
      goto LABEL_802;
    case 0x19u:
      v213 = *((unsigned __int8 *)a2 + v1881);
      if (v213 >= 2)
      {
        if (v1881 <= 3)
          v214 = v1881;
        else
          v214 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v552 = v213 == 1;
      if (v213 == 1)
        v553 = v1847;
      else
        v553 = v1844;
      if (v213 == 1)
        v554 = v1845;
      else
        v554 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v553 + 16))(a1, a2, v554);
      *((_BYTE *)a1 + v1881) = v552;
      if (v1776 > 3)
        goto LABEL_637;
      v555 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v555 > 0xFFD8)
      {
        v254 = 25;
        goto LABEL_804;
      }
      if (v555 <= 0xD8)
      {
LABEL_637:
        v207 = 25;
        goto LABEL_798;
      }
      LOWORD(v254) = 25;
      goto LABEL_802;
    case 0x1Au:
      v215 = *((unsigned __int8 *)a2 + v1881);
      if (v215 >= 2)
      {
        if (v1881 <= 3)
          v216 = v1881;
        else
          v216 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v556 = v215 == 1;
      if (v215 == 1)
        v557 = v1847;
      else
        v557 = v1844;
      if (v215 == 1)
        v558 = v1845;
      else
        v558 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v557 + 16))(a1, a2, v558);
      *((_BYTE *)a1 + v1881) = v556;
      if (v1776 > 3)
        goto LABEL_649;
      v559 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v559 > 0xFFD8)
      {
        v254 = 26;
        goto LABEL_804;
      }
      if (v559 <= 0xD8)
      {
LABEL_649:
        v207 = 26;
        goto LABEL_798;
      }
      LOWORD(v254) = 26;
      goto LABEL_802;
    case 0x1Bu:
      v1897 = ~v1912;
      v1923 = ~(unint64_t)v1875;
      v217 = *((unsigned __int8 *)a2 + v71);
      v1855 = ~(unint64_t)v1853;
      if (v217 >= 2)
      {
        if (v71 <= 3)
          v218 = v71;
        else
          v218 = 4;
        __asm { BR              X14 }
      }
      v259 = v1798;
      v260 = v1776;
      v1762 = v71;
      if (v217 == 1)
      {
        v1887 = ~v1849;
        v1021 = ~v68;
        switch(*((_BYTE *)a2 + v1790))
        {
          case 0:
            v1022 = ~v38;
            v1860 = ~v37;
            v1770 = ((((v1817 + ((v37 + 8 + (v1839 & 0xFFFFFFFFFFFFFFF8)) & ~v37)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v1023 = v41;
            v1867 = ~(unint64_t)v1864;
            v1024 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v1847 + 16);
            v1025 = ~v1890;
            v1024(a1, a2, v1845);
            if (v1804 == v1802)
            {
              v1026 = (*(uint64_t (**)(unint64_t))(v1847 + 48))(((unint64_t)a2 + v1784) & v1025);
              v1027 = v1023;
              v1028 = (void *)(((unint64_t)a1 + v1784) & v1025);
              v1029 = (void *)(((unint64_t)a2 + v1784) & ~v1890);
              goto LABEL_1174;
            }
            v1081 = (v1833 + (((unint64_t)a2 + v1784) & ~v1890)) & v1923;
            v1082 = (v1800 + v1081) & v1022;
            v1029 = (void *)(((unint64_t)a2 + v1784) & v1025);
            if (v1820 == v1802)
            {
              if (v1806 == v1820)
              {
                v1026 = (*(uint64_t (**)(unint64_t))(v1827 + 48))((v1800 + v1081) & v1022);
LABEL_1173:
                v1027 = v1023;
                v1028 = (void *)(((unint64_t)a1 + v1784) & v1025);
LABEL_1174:
                if (v1026)
                {
LABEL_1175:
                  memcpy(v1028, v1029, v1027);
                  v1161 = v1790;
                  v1162 = __n;
LABEL_1176:
                  v1163 = v1162;
                  goto LABEL_1283;
                }
                v1081 = ((unint64_t)v1029 + v1833) & v1923;
                v1082 = (v1800 + v1081) & v1022;
LABEL_1178:
                v1024((uint64_t *)v1028, (uint64_t *)v1029, v1845);
                v1024((uint64_t *)(((unint64_t)v1028 + v1833) & v1923), (uint64_t *)v1081, v1845);
                v1164 = (v1800 + (((unint64_t)v1028 + v1833) & v1923)) & v1022;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v1827 + 16))(v1164, v1082, v1828);
                v1165 = (_QWORD *)((v1839 + v1164) & 0xFFFFFFFFFFFFFFF8);
                v1166 = (_QWORD *)((v1839 + v1082) & 0xFFFFFFFFFFFFFFF8);
                *v1165 = *v1166;
                v1167 = ((unint64_t)v1165 + v1831) & v1860;
                v1168 = ((unint64_t)v1166 + v1831) & v1860;
                v1169 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1829 + 16);
                swift_bridgeObjectRetain();
                v1169(v1167, v1168, v1830);
                v1170 = (_QWORD *)((v1817 + v1167) & 0xFFFFFFFFFFFFF8);
                v1171 = (_QWORD *)((v1817 + v1168) & 0xFFFFFFFFFFFFF8);
                *v1170 = *v1171;
                v1172 = (_QWORD *)(((unint64_t)v1170 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1173 = (_QWORD *)(((unint64_t)v1171 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v1172 = *v1173;
                v1172[1] = v1173[1];
                v1174 = (_QWORD *)(v1164 + v1770);
                *v1174 = *(_QWORD *)(v1082 + v1770);
                v1174[1] = *(_QWORD *)(v1082 + v1770 + 8);
                v1175 = (v1902 + v1164 + v1770) & v1887;
                v1176 = (v1902 + v1082 + v1770) & v1887;
                *(_BYTE *)v1175 = *(_BYTE *)v1176;
                v1177 = v1175 | 4;
                v1178 = *(_DWORD *)(v1176 | 4);
                *(_BYTE *)(v1177 + 4) = *(_BYTE *)((v1176 | 4) + 4);
                *(_DWORD *)v1177 = v1178;
                *(_WORD *)(v1175 + 10) = *(_WORD *)(v1176 + 0xA);
                v1179 = (v1841 + v1175) & v1867;
                v1180 = (v1841 + v1176) & v1867;
                v1181 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1181(v1179, v1180, v1838);
                v1182 = (v1836 + v1179) & v1867;
                v1183 = (v1836 + v1180) & v1867;
                v1181(v1182, v1183, v1838);
                v1184 = (_BYTE *)(v1182 + v1843);
                *v1184 = *(_BYTE *)(v1183 + v1843);
                v1184[1] = *(_BYTE *)(v1183 + v1843 + 1);
                v1184[2] = *(_BYTE *)(v1183 + v1843 + 2);
                v1184[3] = *(_BYTE *)(v1183 + v1843 + 3);
                v1184[4] = *(_BYTE *)(v1183 + v1843 + 4);
                v1185 = (v1182 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
                v1186 = (v1183 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v1185 = *(_QWORD *)v1186;
                *(_QWORD *)(v1185 + 8) = *(_QWORD *)(v1186 + 8);
                *(_BYTE *)(v1185 + 16) = *(_BYTE *)(v1186 + 16);
                *(_BYTE *)(v1185 + 17) = *(_BYTE *)(v1186 + 17);
                *(_BYTE *)(v1185 + 18) = *(_BYTE *)(v1186 + 18);
                *(_BYTE *)(v1185 + 19) = *(_BYTE *)(v1186 + 19);
                v1187 = (v1185 + 27) & 0xFFFFFFFFFFFFFFF8;
                v1188 = (v1186 + 27) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v1187 = *(_QWORD *)v1188;
                *(_BYTE *)(v1187 + 8) = *(_BYTE *)(v1188 + 8);
                *(_BYTE *)(v1187 + 9) = *(_BYTE *)(v1188 + 9);
                *(_BYTE *)(v1187 + 10) = *(_BYTE *)(v1188 + 10);
                *(_BYTE *)(v1187 + 11) = *(_BYTE *)(v1188 + 11);
                *(_BYTE *)(v1187 + 12) = *(_BYTE *)(v1188 + 12);
                v1189 = (_QWORD *)((v1185 + 47) & 0xFFFFFFFFFFFFF8);
                v1190 = (_QWORD *)((v1186 + 47) & 0xFFFFFFFFFFFFF8);
                *v1189 = *v1190;
                v1191 = ((unint64_t)v1189 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1192 = ((unint64_t)v1190 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v1191 = *(_QWORD *)v1192;
                *(_BYTE *)(v1191 + 8) = *(_BYTE *)(v1192 + 8);
                *(_BYTE *)(v1191 + 9) = *(_BYTE *)(v1192 + 9);
                v1193 = (void *)((v1834 + v1191) & v1867);
                v1194 = (const void *)((v1834 + v1192) & v1867);
                v1195 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1837 + 48);
                swift_bridgeObjectRetain();
                if (v1195(v1194, 1, v1838))
                {
                  v1162 = __n;
                  memcpy(v1193, v1194, __n);
                }
                else
                {
                  v1181((unint64_t)v1193, (unint64_t)v1194, v1838);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1837 + 56))(v1193, 0, 1, v1838);
                  v1162 = __n;
                }
                v1196 = (_QWORD *)(((unint64_t)v1193 + v1835) & 0xFFFFFFFFFFFFFFF8);
                v1197 = (_QWORD *)(((unint64_t)v1194 + v1835) & 0xFFFFFFFFFFFFFFF8);
                *v1196 = *v1197;
                v1198 = ((unint64_t)v1196 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1199 = ((unint64_t)v1197 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1200 = *(_QWORD *)v1199;
                *(_BYTE *)(v1198 + 8) = *(_BYTE *)(v1199 + 8);
                *(_QWORD *)v1198 = v1200;
                v1201 = (_QWORD *)(((unint64_t)v1196 + 31) & 0xFFFFFFFFFFFFF8);
                v1202 = (_QWORD *)(((unint64_t)v1197 + 31) & 0xFFFFFFFFFFFFF8);
                *v1201 = *v1202;
                v1203 = ((unint64_t)v1201 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1204 = (uint64_t *)(((unint64_t)v1202 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1205 = v1204[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if ((v1205 & 0x3000000000000000) != 0)
                {
                  *(_OWORD *)v1203 = *(_OWORD *)v1204;
                }
                else
                {
                  v1206 = *v1204;
                  sub_23AAAE668(*v1204, v1205);
                  *(_QWORD *)v1203 = v1206;
                  *(_QWORD *)(v1203 + 8) = v1205;
                }
                v1207 = (v1203 + 19) & 0xFFFFFFFFFFFFFFF8;
                v1208 = ((unint64_t)v1204 + 19) & 0xFFFFFFFFFFFFFFF8;
                v1209 = *(_QWORD *)v1208;
                *(_BYTE *)(v1207 + 8) = *(_BYTE *)(v1208 + 8);
                *(_QWORD *)v1207 = v1209;
                *(_BYTE *)(v1207 + 9) = *(_BYTE *)(v1208 + 9);
                v1210 = (v1207 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                v1211 = (v1208 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                v1212 = *(_DWORD *)v1211;
                *(_BYTE *)(v1210 + 4) = *(_BYTE *)(v1211 + 4);
                *(_DWORD *)v1210 = v1212;
                v1213 = (_QWORD *)((v1207 + 25) & 0xFFFFFFFFFFFFFFF8);
                v1214 = (_QWORD *)((v1208 + 25) & 0xFFFFFFFFFFFFFFF8);
                *v1213 = *v1214;
                v1213[1] = v1214[1];
                v1215 = v1175 + v1901;
                v1216 = v1176 + v1901;
                v1217 = *(_QWORD *)(v1176 + v1901 + 16);
                if (v1217 >= 0xFFFFFFFF)
                  LODWORD(v1217) = -1;
                v1218 = v1217 - 1;
                swift_bridgeObjectRetain();
                if (v1218 < 0)
                {
                  *(_QWORD *)v1215 = *(_QWORD *)v1216;
                  *(_BYTE *)(v1215 + 8) = *(_BYTE *)(v1216 + 8);
                  *(_BYTE *)(v1215 + 9) = *(_BYTE *)(v1216 + 9);
                  v1231 = *(void **)(v1216 + 16);
                  v1232 = v1231;
                  *(_QWORD *)(v1215 + 16) = v1231;
                  v1233 = *(void **)(v1216 + 24);
                  v1234 = v1233;
                  *(_QWORD *)(v1215 + 24) = v1233;
                  *(_BYTE *)(v1215 + 32) = *(_BYTE *)(v1216 + 32);
                  *(_BYTE *)(v1215 + 33) = *(_BYTE *)(v1216 + 33);
                  *(_BYTE *)(v1215 + 34) = *(_BYTE *)(v1216 + 34);
                  *(_QWORD *)(v1215 + 40) = *(_QWORD *)(v1216 + 40);
                  *(_QWORD *)(v1215 + 48) = *(_QWORD *)(v1216 + 48);
                  *(_QWORD *)(v1215 + 56) = *(_QWORD *)(v1216 + 56);
                  *(_QWORD *)(v1215 + 64) = *(_QWORD *)(v1216 + 64);
                  *(_BYTE *)(v1215 + 72) = *(_BYTE *)(v1216 + 72);
                  *(_QWORD *)(v1215 + 80) = *(_QWORD *)(v1216 + 80);
                  *(_QWORD *)(v1215 + 88) = *(_QWORD *)(v1216 + 88);
                  v1932 = *(void **)(v1216 + 96);
                  *(_QWORD *)(v1215 + 96) = v1932;
                  *(_BYTE *)(v1215 + 104) = *(_BYTE *)(v1216 + 104);
                  *(_BYTE *)(v1215 + 105) = *(_BYTE *)(v1216 + 105);
                  *(_QWORD *)(v1215 + 112) = *(_QWORD *)(v1216 + 112);
                  *(_QWORD *)(v1215 + 120) = *(_QWORD *)(v1216 + 120);
                  *(_QWORD *)(v1215 + 128) = *(_QWORD *)(v1216 + 128);
                  *(_QWORD *)(v1215 + 136) = *(_QWORD *)(v1216 + 136);
                  *(_QWORD *)(v1215 + 144) = *(_QWORD *)(v1216 + 144);
                  *(_QWORD *)(v1215 + 152) = *(_QWORD *)(v1216 + 152);
                  *(_QWORD *)(v1215 + 160) = *(_QWORD *)(v1216 + 160);
                  *(_QWORD *)(v1215 + 168) = *(_QWORD *)(v1216 + 168);
                  *(_BYTE *)(v1215 + 176) = *(_BYTE *)(v1216 + 176);
                  *(_QWORD *)(v1215 + 184) = *(_QWORD *)(v1216 + 184);
                  v1235 = *(_QWORD *)(v1216 + 192);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v1236 = v1932;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v1235)
                  {
                    *(_QWORD *)(v1215 + 192) = v1235;
                    *(_QWORD *)(v1215 + 200) = *(_QWORD *)(v1216 + 200);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    *(_OWORD *)(v1215 + 192) = *(_OWORD *)(v1216 + 192);
                  }
                  *(_QWORD *)(v1215 + 208) = *(_QWORD *)(v1216 + 208);
                  *(_QWORD *)(v1215 + 216) = *(_QWORD *)(v1216 + 216);
                  *(_QWORD *)(v1215 + 224) = *(_QWORD *)(v1216 + 224);
                  *(_QWORD *)(v1215 + 232) = *(_QWORD *)(v1216 + 232);
                  *(_QWORD *)(v1215 + 240) = *(_QWORD *)(v1216 + 240);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v260 = v1776;
                  v1162 = __n;
                  v1161 = v1790;
                }
                else
                {
                  v1219 = *(_OWORD *)v1216;
                  v1220 = *(_OWORD *)(v1216 + 16);
                  v1221 = *(_OWORD *)(v1216 + 48);
                  *(_OWORD *)(v1215 + 32) = *(_OWORD *)(v1216 + 32);
                  *(_OWORD *)(v1215 + 48) = v1221;
                  *(_OWORD *)v1215 = v1219;
                  *(_OWORD *)(v1215 + 16) = v1220;
                  v1222 = *(_OWORD *)(v1216 + 64);
                  v1223 = *(_OWORD *)(v1216 + 80);
                  v1224 = *(_OWORD *)(v1216 + 112);
                  *(_OWORD *)(v1215 + 96) = *(_OWORD *)(v1216 + 96);
                  *(_OWORD *)(v1215 + 112) = v1224;
                  *(_OWORD *)(v1215 + 64) = v1222;
                  *(_OWORD *)(v1215 + 80) = v1223;
                  v1225 = *(_OWORD *)(v1216 + 128);
                  v1226 = *(_OWORD *)(v1216 + 144);
                  v1227 = *(_OWORD *)(v1216 + 176);
                  *(_OWORD *)(v1215 + 160) = *(_OWORD *)(v1216 + 160);
                  *(_OWORD *)(v1215 + 176) = v1227;
                  *(_OWORD *)(v1215 + 128) = v1225;
                  *(_OWORD *)(v1215 + 144) = v1226;
                  v1228 = *(_OWORD *)(v1216 + 192);
                  v1229 = *(_OWORD *)(v1216 + 208);
                  v1230 = *(_OWORD *)(v1216 + 224);
                  *(_QWORD *)(v1215 + 240) = *(_QWORD *)(v1216 + 240);
                  *(_OWORD *)(v1215 + 208) = v1229;
                  *(_OWORD *)(v1215 + 224) = v1230;
                  *(_OWORD *)(v1215 + 192) = v1228;
                  v260 = v1776;
                  v1161 = v1790;
                }
                v1628 = (_OWORD *)((v1215 + 255) & 0xFFFFFFFFFFFFFFF8);
                v1629 = (__int128 *)((v1216 + 255) & 0xFFFFFFFFFFFFFFF8);
                v1630 = *v1629;
                *(_OWORD *)((char *)v1628 + 9) = *(__int128 *)((char *)v1629 + 9);
                *v1628 = v1630;
                v1631 = (v1215 + 287) & 0xFFFFFFFFFFFFFFF8;
                v1632 = (v1216 + 287) & 0xFFFFFFFFFFFFFFF8;
                v1633 = *(_OWORD *)v1632;
                *(_BYTE *)(v1631 + 16) = *(_BYTE *)(v1632 + 16);
                *(_OWORD *)v1631 = v1633;
                v1634 = (_QWORD *)((v1215 + 311) & 0xFFFFFFFFFFFFF8);
                v1635 = (v1216 + 311) & 0xFFFFFFFFFFFFF8;
                v1636 = *(_QWORD *)v1635;
                v1635 += 15;
                *v1634 = v1636;
                v1637 = (_QWORD *)(((unint64_t)v1634 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1638 = *(_QWORD *)(v1635 & 0xFFFFFFFFFFFFFFF8);
                v1639 = *(_QWORD *)((v1635 & 0xFFFFFFFFFFFFFFF8) + 8);
                sub_23AA7F2D4(v1638, v1639);
                *v1637 = v1638;
                v1637[1] = v1639;
                v1163 = v1843;
                v1028 = (void *)(((unint64_t)a1 + v1784) & ~v1890);
                if (!v1813)
                  goto LABEL_1176;
LABEL_1283:
                v1640 = ((((v1799
                          + ((((((((((v1818 + v1163 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 19) & 0xFFFFFFFFFFFFFFF8)
                            + 25) & 0xFFFFFFFFFFFFFFF8)
                          + 327) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16;
                v1641 = (_QWORD *)(((unint64_t)v1028 + v1640) & 0xFFFFFFFFFFFFFFF8);
                v1642 = (_QWORD *)(((unint64_t)v1029 + v1640) & 0xFFFFFFFFFFFFFFF8);
                *v1641 = *v1642;
                v1643 = *(void **)(((unint64_t)v1642 + 15) & 0xFFFFFFFFFFFFF8);
                *(_QWORD *)(((unint64_t)v1641 + 15) & 0xFFFFFFFFFFFFF8) = v1643;
                *((_BYTE *)a1 + v1161) = 0;
                v1644 = v1643;
                goto LABEL_1307;
              }
              v1143 = (unint64_t *)((v1839 + v1082) & 0xFFFFFFFFFFFFFFF8);
              if (v1792 > 0x7FFFFFFE)
              {
                v1026 = (*(uint64_t (**)(unint64_t))(v1829 + 48))(((unint64_t)v1143 + v1831) & v1860);
                goto LABEL_1173;
              }
              v1144 = *v1143;
            }
            else
            {
              v1105 = v1082 + v1770;
              if ((v1788 & 0x80000000) == 0)
              {
                v1106 = *(_QWORD *)(v1105 + 8);
                if (v1106 >= 0xFFFFFFFF)
                  LODWORD(v1106) = -1;
                v1026 = v1106 + 1;
                goto LABEL_1173;
              }
              v1155 = (v1841 + ((v1902 + v1105) & v1887)) & v1867;
              if (v1813 > 0x7FFFFFFD)
              {
                v1026 = (*(uint64_t (**)(unint64_t))(v1837 + 48))(v1155);
                goto LABEL_1173;
              }
              v1144 = *(_QWORD *)(((v1786 + ((v1836 + v1155) & v1867)) & 0xFFFFFFFFFFFFF8) + 8);
            }
            if (v1144 >= 0xFFFFFFFF)
              LODWORD(v1144) = -1;
            v1027 = v1023;
            v1028 = (void *)(((unint64_t)a1 + v1784) & v1025);
            if ((v1144 + 1) >= 2)
              goto LABEL_1175;
            goto LABEL_1178;
          case 1:
            v1764 = ~v82;
            v1030 = ~v38;
            v1861 = ~v37;
            v1771 = ((((v1817 + ((v37 + 8 + (v1839 & 0xFFFFFFFFFFFFFFF8)) & ~v37)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v1031 = v41;
            v1868 = ~(unint64_t)v1864;
            v1032 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v1847 + 16);
            v1033 = ~v1890;
            v1032(a1, a2, v1845);
            v1910 = (void *)(((unint64_t)a1 + v1784) & ~v1890);
            v1034 = (void *)(((unint64_t)a2 + v1784) & ~v1890);
            if (v1804 == v1802)
            {
              v1035 = (*(uint64_t (**)(unint64_t))(v1847 + 48))(((unint64_t)a2 + v1784) & v1033);
              v1034 = (void *)(((unint64_t)a2 + v1784) & v1033);
LABEL_1119:
              v1109 = AssociatedTypeWitness;
              v1110 = v1031;
LABEL_1192:
              if (v1035)
              {
LABEL_1193:
                v1237 = ((unint64_t)a1 + v1784) & ~v1890;
                memcpy(v1910, v1034, v1110);
                v1238 = v1790;
                v1239 = __n;
LABEL_1194:
                v1240 = v1239;
                goto LABEL_1287;
              }
              v1083 = ((unint64_t)v1034 + v1833) & v1923;
              v1084 = (v1800 + v1083) & v1030;
LABEL_1196:
              v1032((uint64_t *)v1910, (uint64_t *)v1034, v1845);
              v1241 = ((unint64_t)v1910 + v1833) & v1923;
              v1032((uint64_t *)v1241, (uint64_t *)v1083, v1845);
              v1242 = (v1800 + v1241) & v1030;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1827 + 16))(v1242, v1084, v1828);
              v1243 = (_QWORD *)((v1839 + v1242) & 0xFFFFFFFFFFFFFFF8);
              v1244 = (_QWORD *)((v1839 + v1084) & 0xFFFFFFFFFFFFFFF8);
              *v1243 = *v1244;
              v1245 = ((unint64_t)v1243 + v1831) & v1861;
              v1246 = ((unint64_t)v1244 + v1831) & v1861;
              v1247 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1829 + 16);
              swift_bridgeObjectRetain();
              v1247(v1245, v1246, v1830);
              v1248 = (_QWORD *)((v1817 + v1245) & 0xFFFFFFFFFFFFF8);
              v1249 = (_QWORD *)((v1817 + v1246) & 0xFFFFFFFFFFFFF8);
              *v1248 = *v1249;
              v1250 = (_QWORD *)(((unint64_t)v1248 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1251 = (_QWORD *)(((unint64_t)v1249 + 15) & 0xFFFFFFFFFFFFFFF8);
              *v1250 = *v1251;
              v1250[1] = v1251[1];
              v1252 = (_QWORD *)(v1242 + v1771);
              *v1252 = *(_QWORD *)(v1084 + v1771);
              v1252[1] = *(_QWORD *)(v1084 + v1771 + 8);
              v1253 = (v1902 + v1242 + v1771) & v1887;
              v1254 = (v1902 + v1084 + v1771) & v1887;
              *(_BYTE *)v1253 = *(_BYTE *)v1254;
              v1255 = v1253 | 4;
              v1256 = *(_DWORD *)(v1254 | 4);
              *(_BYTE *)(v1255 + 4) = *(_BYTE *)((v1254 | 4) + 4);
              *(_DWORD *)v1255 = v1256;
              *(_WORD *)(v1253 + 10) = *(_WORD *)(v1254 + 0xA);
              v1933 = v1253;
              v1257 = (v1841 + v1253) & v1868;
              v1258 = (v1841 + v1254) & v1868;
              v1259 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1259(v1257, v1258, v1838);
              v1260 = (v1836 + v1257) & v1868;
              v1261 = (v1836 + v1258) & v1868;
              v1259(v1260, v1261, v1838);
              v1240 = v1843;
              v1262 = (_BYTE *)(v1260 + v1843);
              *v1262 = *(_BYTE *)(v1261 + v1843);
              v1262[1] = *(_BYTE *)(v1261 + v1843 + 1);
              v1262[2] = *(_BYTE *)(v1261 + v1843 + 2);
              v1262[3] = *(_BYTE *)(v1261 + v1843 + 3);
              v1262[4] = *(_BYTE *)(v1261 + v1843 + 4);
              v1263 = (v1260 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
              v1264 = (v1261 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1263 = *(_QWORD *)v1264;
              *(_QWORD *)(v1263 + 8) = *(_QWORD *)(v1264 + 8);
              *(_BYTE *)(v1263 + 16) = *(_BYTE *)(v1264 + 16);
              *(_BYTE *)(v1263 + 17) = *(_BYTE *)(v1264 + 17);
              *(_BYTE *)(v1263 + 18) = *(_BYTE *)(v1264 + 18);
              *(_BYTE *)(v1263 + 19) = *(_BYTE *)(v1264 + 19);
              v1265 = (v1263 + 27) & 0xFFFFFFFFFFFFFFF8;
              v1266 = (v1264 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1265 = *(_QWORD *)v1266;
              *(_BYTE *)(v1265 + 8) = *(_BYTE *)(v1266 + 8);
              *(_BYTE *)(v1265 + 9) = *(_BYTE *)(v1266 + 9);
              *(_BYTE *)(v1265 + 10) = *(_BYTE *)(v1266 + 10);
              *(_BYTE *)(v1265 + 11) = *(_BYTE *)(v1266 + 11);
              *(_BYTE *)(v1265 + 12) = *(_BYTE *)(v1266 + 12);
              v1267 = (_QWORD *)((v1263 + 47) & 0xFFFFFFFFFFFFF8);
              v1268 = (_QWORD *)((v1264 + 47) & 0xFFFFFFFFFFFFF8);
              *v1267 = *v1268;
              v1269 = ((unint64_t)v1267 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1270 = ((unint64_t)v1268 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1269 = *(_QWORD *)v1270;
              *(_BYTE *)(v1269 + 8) = *(_BYTE *)(v1270 + 8);
              *(_BYTE *)(v1269 + 9) = *(_BYTE *)(v1270 + 9);
              v1271 = (void *)((v1834 + v1269) & v1868);
              v1272 = (const void *)((v1834 + v1270) & v1868);
              v1273 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1837 + 48);
              swift_bridgeObjectRetain();
              if (v1273(v1272, 1, v1838))
              {
                v1239 = __n;
                memcpy(v1271, v1272, __n);
              }
              else
              {
                v1259((unint64_t)v1271, (unint64_t)v1272, v1838);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1837 + 56))(v1271, 0, 1, v1838);
                v1239 = __n;
              }
              v1274 = (_QWORD *)(((unint64_t)v1271 + v1835) & 0xFFFFFFFFFFFFFFF8);
              v1275 = (_QWORD *)(((unint64_t)v1272 + v1835) & 0xFFFFFFFFFFFFFFF8);
              *v1274 = *v1275;
              v1276 = ((unint64_t)v1274 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1277 = ((unint64_t)v1275 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1278 = *(_QWORD *)v1277;
              *(_BYTE *)(v1276 + 8) = *(_BYTE *)(v1277 + 8);
              *(_QWORD *)v1276 = v1278;
              v1279 = (_QWORD *)(((unint64_t)v1274 + 31) & 0xFFFFFFFFFFFFF8);
              v1280 = (_QWORD *)(((unint64_t)v1275 + 31) & 0xFFFFFFFFFFFFF8);
              *v1279 = *v1280;
              v1281 = ((unint64_t)v1279 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1282 = (uint64_t *)(((unint64_t)v1280 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1283 = v1282[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1238 = v1790;
              if ((v1283 & 0x3000000000000000) != 0)
              {
                *(_OWORD *)v1281 = *(_OWORD *)v1282;
              }
              else
              {
                v1284 = *v1282;
                sub_23AAAE668(*v1282, v1283);
                *(_QWORD *)v1281 = v1284;
                *(_QWORD *)(v1281 + 8) = v1283;
              }
              v1285 = (v1281 + 19) & 0xFFFFFFFFFFFFFFF8;
              v1286 = ((unint64_t)v1282 + 19) & 0xFFFFFFFFFFFFFFF8;
              v1287 = *(_QWORD *)v1286;
              *(_BYTE *)(v1285 + 8) = *(_BYTE *)(v1286 + 8);
              *(_QWORD *)v1285 = v1287;
              *(_BYTE *)(v1285 + 9) = *(_BYTE *)(v1286 + 9);
              v1288 = (v1285 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v1289 = (v1286 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v1290 = *(_DWORD *)v1289;
              *(_BYTE *)(v1288 + 4) = *(_BYTE *)(v1289 + 4);
              *(_DWORD *)v1288 = v1290;
              v1291 = (_QWORD *)((v1285 + 25) & 0xFFFFFFFFFFFFFFF8);
              v1292 = (_QWORD *)((v1286 + 25) & 0xFFFFFFFFFFFFFFF8);
              *v1291 = *v1292;
              v1291[1] = v1292[1];
              v1293 = v1933 + v1901;
              v1294 = v1254 + v1901;
              v1295 = *(_QWORD *)(v1254 + v1901 + 16);
              if (v1295 >= 0xFFFFFFFF)
                LODWORD(v1295) = -1;
              v1296 = v1295 - 1;
              swift_bridgeObjectRetain();
              if (v1296 < 0)
              {
                *(_QWORD *)v1293 = *(_QWORD *)v1294;
                *(_BYTE *)(v1293 + 8) = *(_BYTE *)(v1294 + 8);
                *(_BYTE *)(v1293 + 9) = *(_BYTE *)(v1294 + 9);
                v1309 = *(void **)(v1294 + 16);
                v1310 = v1309;
                *(_QWORD *)(v1293 + 16) = v1309;
                v1311 = *(void **)(v1294 + 24);
                v1312 = v1311;
                *(_QWORD *)(v1293 + 24) = v1311;
                *(_BYTE *)(v1293 + 32) = *(_BYTE *)(v1294 + 32);
                *(_BYTE *)(v1293 + 33) = *(_BYTE *)(v1294 + 33);
                *(_BYTE *)(v1293 + 34) = *(_BYTE *)(v1294 + 34);
                *(_QWORD *)(v1293 + 40) = *(_QWORD *)(v1294 + 40);
                *(_QWORD *)(v1293 + 48) = *(_QWORD *)(v1294 + 48);
                *(_QWORD *)(v1293 + 56) = *(_QWORD *)(v1294 + 56);
                *(_QWORD *)(v1293 + 64) = *(_QWORD *)(v1294 + 64);
                *(_BYTE *)(v1293 + 72) = *(_BYTE *)(v1294 + 72);
                *(_QWORD *)(v1293 + 80) = *(_QWORD *)(v1294 + 80);
                *(_QWORD *)(v1293 + 88) = *(_QWORD *)(v1294 + 88);
                v1934 = *(void **)(v1294 + 96);
                *(_QWORD *)(v1293 + 96) = v1934;
                *(_BYTE *)(v1293 + 104) = *(_BYTE *)(v1294 + 104);
                *(_BYTE *)(v1293 + 105) = *(_BYTE *)(v1294 + 105);
                *(_QWORD *)(v1293 + 112) = *(_QWORD *)(v1294 + 112);
                *(_QWORD *)(v1293 + 120) = *(_QWORD *)(v1294 + 120);
                *(_QWORD *)(v1293 + 128) = *(_QWORD *)(v1294 + 128);
                *(_QWORD *)(v1293 + 136) = *(_QWORD *)(v1294 + 136);
                *(_QWORD *)(v1293 + 144) = *(_QWORD *)(v1294 + 144);
                *(_QWORD *)(v1293 + 152) = *(_QWORD *)(v1294 + 152);
                *(_QWORD *)(v1293 + 160) = *(_QWORD *)(v1294 + 160);
                *(_QWORD *)(v1293 + 168) = *(_QWORD *)(v1294 + 168);
                *(_BYTE *)(v1293 + 176) = *(_BYTE *)(v1294 + 176);
                *(_QWORD *)(v1293 + 184) = *(_QWORD *)(v1294 + 184);
                v1313 = *(_QWORD *)(v1294 + 192);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1314 = v1934;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v1313)
                {
                  *(_QWORD *)(v1293 + 192) = v1313;
                  *(_QWORD *)(v1293 + 200) = *(_QWORD *)(v1294 + 200);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  *(_OWORD *)(v1293 + 192) = *(_OWORD *)(v1294 + 192);
                }
                *(_QWORD *)(v1293 + 208) = *(_QWORD *)(v1294 + 208);
                *(_QWORD *)(v1293 + 216) = *(_QWORD *)(v1294 + 216);
                *(_QWORD *)(v1293 + 224) = *(_QWORD *)(v1294 + 224);
                *(_QWORD *)(v1293 + 232) = *(_QWORD *)(v1294 + 232);
                *(_QWORD *)(v1293 + 240) = *(_QWORD *)(v1294 + 240);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1239 = __n;
                v1240 = v1843;
                v1109 = AssociatedTypeWitness;
                v1238 = v1790;
              }
              else
              {
                v1297 = *(_OWORD *)v1294;
                v1298 = *(_OWORD *)(v1294 + 16);
                v1299 = *(_OWORD *)(v1294 + 48);
                *(_OWORD *)(v1293 + 32) = *(_OWORD *)(v1294 + 32);
                *(_OWORD *)(v1293 + 48) = v1299;
                *(_OWORD *)v1293 = v1297;
                *(_OWORD *)(v1293 + 16) = v1298;
                v1300 = *(_OWORD *)(v1294 + 64);
                v1301 = *(_OWORD *)(v1294 + 80);
                v1302 = *(_OWORD *)(v1294 + 112);
                *(_OWORD *)(v1293 + 96) = *(_OWORD *)(v1294 + 96);
                *(_OWORD *)(v1293 + 112) = v1302;
                *(_OWORD *)(v1293 + 64) = v1300;
                *(_OWORD *)(v1293 + 80) = v1301;
                v1303 = *(_OWORD *)(v1294 + 128);
                v1304 = *(_OWORD *)(v1294 + 144);
                v1305 = *(_OWORD *)(v1294 + 176);
                *(_OWORD *)(v1293 + 160) = *(_OWORD *)(v1294 + 160);
                *(_OWORD *)(v1293 + 176) = v1305;
                *(_OWORD *)(v1293 + 128) = v1303;
                *(_OWORD *)(v1293 + 144) = v1304;
                v1306 = *(_OWORD *)(v1294 + 192);
                v1307 = *(_OWORD *)(v1294 + 208);
                v1308 = *(_OWORD *)(v1294 + 224);
                *(_QWORD *)(v1293 + 240) = *(_QWORD *)(v1294 + 240);
                *(_OWORD *)(v1293 + 208) = v1307;
                *(_OWORD *)(v1293 + 224) = v1308;
                *(_OWORD *)(v1293 + 192) = v1306;
                v1109 = AssociatedTypeWitness;
              }
              v1645 = (_OWORD *)((v1293 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1646 = (__int128 *)((v1294 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1647 = *v1646;
              *(_OWORD *)((char *)v1645 + 9) = *(__int128 *)((char *)v1646 + 9);
              *v1645 = v1647;
              v1648 = (v1293 + 287) & 0xFFFFFFFFFFFFFFF8;
              v1649 = (v1294 + 287) & 0xFFFFFFFFFFFFFFF8;
              v1650 = *(_OWORD *)v1649;
              *(_BYTE *)(v1648 + 16) = *(_BYTE *)(v1649 + 16);
              *(_OWORD *)v1648 = v1650;
              v1651 = (_QWORD *)((v1293 + 311) & 0xFFFFFFFFFFFFF8);
              v1652 = (v1294 + 311) & 0xFFFFFFFFFFFFF8;
              v1653 = *(_QWORD *)v1652;
              v1652 += 15;
              *v1651 = v1653;
              v1654 = (_QWORD *)(((unint64_t)v1651 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1656 = *(_QWORD *)(v1652 & 0xFFFFFFFFFFFFFFF8);
              v1655 = *(_QWORD *)((v1652 & 0xFFFFFFFFFFFFFFF8) + 8);
              sub_23AA7F2D4(v1656, v1655);
              *v1654 = v1656;
              v1654[1] = v1655;
              v1237 = ((unint64_t)a1 + v1784) & ~v1890;
              if (!v1813)
                goto LABEL_1194;
LABEL_1287:
              v1657 = ((((v1799
                        + ((((((((((v1818 + v1240 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1658 = (void *)((v1237 + v1912 + v1657) & v1897);
              v1659 = (const void *)(((((unint64_t)a2 + v1784) & ~v1890) + v1912 + v1657) & v1897);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1844 + 48))(v1659, 1, v1109))
              {
                memcpy(v1658, v1659, v1797);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v1844 + 16))(v1658, v1659, v1109);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1844 + 56))(v1658, 0, 1, v1109);
              }
              v260 = v1776;
              v1660 = (char *)(((unint64_t)v1658 + v1782) & v1764);
              v1661 = (char *)(((unint64_t)v1659 + v1782) & v1764);
              if (v1805 == v1815)
              {
                v1662 = (*(uint64_t (**)(unint64_t))(v1825 + 48))(((unint64_t)v1659 + v1782) & v1764);
              }
              else
              {
                v1663 = (uint64_t *)((unint64_t)&v1661[v1832] & 0xFFFFFFFFFFFFFFF8);
                if (v1791 <= 0x7FFFFFFE)
                {
                  v1664 = *v1663;
                  if ((unint64_t)*v1663 >= 0xFFFFFFFF)
                    LODWORD(v1664) = -1;
                  if ((v1664 + 1) >= 2)
                    goto LABEL_1299;
                  goto LABEL_1301;
                }
                v1662 = (*(uint64_t (**)(unint64_t))(v1822 + 48))(((unint64_t)v1663 + v1821) & v1855);
              }
              if (v1662)
              {
LABEL_1299:
                v1665 = v1900;
                memcpy(v1660, v1661, v1900);
LABEL_1302:
                *(_QWORD *)&v1660[v1665] = *(_QWORD *)&v1661[v1665];
                v1674 = (_QWORD *)((unint64_t)&v1660[v1665 + 15] & 0xFFFFFFFFFFFFF8);
                v1675 = (_QWORD *)((unint64_t)&v1661[v1665 + 15] & 0xFFFFFFFFFFFFFFF8);
                *v1674 = *v1675;
                v1676 = *(void **)(((unint64_t)v1675 + 15) & 0xFFFFFFFFFFFFF8);
                *(_QWORD *)(((unint64_t)v1674 + 15) & 0xFFFFFFFFFFFFF8) = v1676;
                v1077 = 1;
                *((_BYTE *)a1 + v1238) = 1;
                v1677 = v1676;
LABEL_1337:
                *((_BYTE *)a1 + v1762) = v1077;
                if (v260 > 3)
                  goto LABEL_1338;
                v1761 = ((1 << (8 * v260)) + 5) >> (8 * v260);
                if (v1761 > 0xFFD8)
                {
                  *(_DWORD *)((char *)a1 + v260) = 27;
                  return a1;
                }
                if (v1761 <= 0xD8)
LABEL_1338:
                  *((_BYTE *)a1 + v260) = 27;
                else
                  *(_WORD *)((char *)a1 + v260) = 27;
                return a1;
              }
              v1663 = (uint64_t *)((unint64_t)&v1661[v1832] & 0xFFFFFFFFFFFFFFF8);
LABEL_1301:
              (*(void (**)(char *, char *, uint64_t))(v1825 + 16))(v1660, v1661, v1826);
              v1666 = (_QWORD *)((unint64_t)&v1660[v1832] & 0xFFFFFFFFFFFFFFF8);
              *v1666 = *v1663;
              v1667 = ((unint64_t)v1666 + v1821) & v1855;
              v1668 = ((unint64_t)v1663 + v1821) & v1855;
              v1669 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1822 + 16);
              swift_bridgeObjectRetain();
              v1669(v1667, v1668, v1823);
              v1670 = (_QWORD *)((v1816 + v1667) & 0xFFFFFFFFFFFFF8);
              v1671 = v1816 + v1668;
              v260 = v1776;
              v1671 &= 0xFFFFFFFFFFFFF8uLL;
              *v1670 = *(_QWORD *)v1671;
              v1672 = (_QWORD *)(((unint64_t)v1670 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1673 = (_QWORD *)((v1671 + 15) & 0xFFFFFFFFFFFFFFF8);
              *v1672 = *v1673;
              v1672[1] = v1673[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1665 = v1900;
              goto LABEL_1302;
            }
            v1083 = ((unint64_t)v1034 + v1833) & v1923;
            v1084 = (v1800 + v1083) & v1030;
            if (v1820 == v1802)
            {
              if (v1806 == v1820)
              {
                v1035 = (*(uint64_t (**)(unint64_t))(v1827 + 48))((v1800 + v1083) & v1030);
LABEL_1191:
                v1109 = AssociatedTypeWitness;
                v1110 = v1031;
                v1034 = (void *)(((unint64_t)a2 + v1784) & ~v1890);
                goto LABEL_1192;
              }
              v1145 = (unint64_t *)((v1839 + v1084) & 0xFFFFFFFFFFFFFFF8);
              if (v1792 > 0x7FFFFFFE)
              {
                v1035 = (*(uint64_t (**)(unint64_t))(v1829 + 48))(((unint64_t)v1145 + v1831) & v1861);
                goto LABEL_1191;
              }
              v1146 = *v1145;
            }
            else
            {
              v1107 = v1084 + v1771;
              if ((v1788 & 0x80000000) == 0)
              {
                v1108 = *(_QWORD *)(v1107 + 8);
                if (v1108 >= 0xFFFFFFFF)
                  LODWORD(v1108) = -1;
                v1035 = v1108 + 1;
                goto LABEL_1119;
              }
              v1156 = (v1841 + ((v1902 + v1107) & v1887)) & v1868;
              if (v1813 > 0x7FFFFFFD)
              {
                v1035 = (*(uint64_t (**)(unint64_t))(v1837 + 48))(v1156);
                goto LABEL_1191;
              }
              v1146 = *(_QWORD *)(((v1786 + ((v1836 + v1156) & v1868)) & 0xFFFFFFFFFFFFF8) + 8);
            }
            if (v1146 >= 0xFFFFFFFF)
              LODWORD(v1146) = -1;
            v1109 = AssociatedTypeWitness;
            v1110 = v1031;
            v1034 = (void *)(((unint64_t)a2 + v1784) & ~v1890);
            if ((v1146 + 1) >= 2)
              goto LABEL_1193;
            goto LABEL_1196;
          case 2:
            v1036 = ~v82;
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v1847 + 16))(a1, a2, v1845);
            v1037 = (void *)(((unint64_t)a1 + v1780) & v1897);
            v1038 = (const void *)(((unint64_t)a2 + v1780) & v1897);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1844 + 48))(v1038, 1, AssociatedTypeWitness))
            {
              memcpy(v1037, v1038, v1797);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1844 + 16))(v1037, v1038, AssociatedTypeWitness);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1844 + 56))(v1037, 0, 1, AssociatedTypeWitness);
            }
            v1093 = (char *)(((unint64_t)v1037 + v1782) & v1036);
            v1094 = (_BYTE *)(((unint64_t)v1038 + v1782) & v1036);
            if (v1805 == v1815)
            {
              v1095 = (*(uint64_t (**)(_BYTE *))(v1825 + 48))(v1094);
            }
            else
            {
              v1096 = (uint64_t *)((unint64_t)&v1094[v1832] & 0xFFFFFFFFFFFFFFF8);
              if (v1791 <= 0x7FFFFFFE)
              {
                v1097 = *v1096;
                if ((unint64_t)*v1096 >= 0xFFFFFFFF)
                  LODWORD(v1097) = -1;
                if ((v1097 + 1) >= 2)
                  goto LABEL_1138;
LABEL_1140:
                (*(void (**)(char *, _BYTE *, uint64_t))(v1825 + 16))(v1093, v1094, v1826);
                v1120 = (_QWORD *)((unint64_t)&v1093[v1832] & 0xFFFFFFFFFFFFFFF8);
                *v1120 = *v1096;
                v1121 = ((unint64_t)v1120 + v1821) & v1855;
                v1122 = ((unint64_t)v1096 + v1821) & v1855;
                v1123 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1822 + 16);
                swift_bridgeObjectRetain();
                v1123(v1121, v1122, v1823);
                v1124 = (_QWORD *)((v1816 + v1121) & 0xFFFFFFFFFFFFF8);
                v1125 = v1816 + v1122;
                v260 = v1776;
                v1125 &= 0xFFFFFFFFFFFFF8uLL;
                *v1124 = *(_QWORD *)v1125;
                v1126 = (_QWORD *)(((unint64_t)v1124 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1127 = (_QWORD *)((v1125 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v1126 = *v1127;
                v1126[1] = v1127[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1119 = v1900;
LABEL_1141:
                v1128 = &v1093[v1119];
                *v1128 = v1094[v1119];
                v1129 = *(void **)&v1094[v1119 + 8];
                *((_QWORD *)v1128 + 1) = v1129;
                *((_BYTE *)a1 + v1790) = 2;
                v1130 = v1129;
                goto LABEL_1307;
              }
              v1095 = (*(uint64_t (**)(unint64_t))(v1822 + 48))(((unint64_t)v1096 + v1821) & v1855);
            }
            if (v1095)
            {
LABEL_1138:
              v1119 = v1900;
              memcpy(v1093, v1094, v1900);
              goto LABEL_1141;
            }
            v1096 = (uint64_t *)((unint64_t)&v1094[v1832] & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_1140;
          case 3:
            v1039 = ~v38;
            v1862 = ~v37;
            v1772 = ((((v1817 + ((v37 + 8 + (v1839 & 0xFFFFFFFFFFFFFFF8)) & ~v37)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v1040 = v41;
            v1869 = ~(unint64_t)v1864;
            v1041 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v1847 + 16);
            v1042 = ~v1890;
            v1041(a1, a2, v1845);
            if (v1804 == v1802)
            {
              v1043 = (*(uint64_t (**)(unint64_t))(v1847 + 48))(((unint64_t)a2 + v1784) & v1042);
              v1044 = v1040;
              v1045 = (void *)(((unint64_t)a1 + v1784) & v1042);
              v1046 = (void *)(((unint64_t)a2 + v1784) & ~v1890);
LABEL_1210:
              if (v1043)
              {
LABEL_1211:
                memcpy(v1045, v1046, v1044);
                v1315 = v1790;
                v1316 = __n;
                goto LABEL_1212;
              }
              v1085 = ((unint64_t)v1046 + v1833) & v1923;
              v1086 = (v1800 + v1085) & v1039;
LABEL_1214:
              v1041((uint64_t *)v1045, (uint64_t *)v1046, v1845);
              v1041((uint64_t *)(((unint64_t)v1045 + v1833) & v1923), (uint64_t *)v1085, v1845);
              v1318 = (v1800 + (((unint64_t)v1045 + v1833) & v1923)) & v1039;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1827 + 16))(v1318, v1086, v1828);
              v1319 = (_QWORD *)((v1839 + v1318) & 0xFFFFFFFFFFFFFFF8);
              v1320 = (_QWORD *)((v1839 + v1086) & 0xFFFFFFFFFFFFFFF8);
              *v1319 = *v1320;
              v1321 = ((unint64_t)v1319 + v1831) & v1862;
              v1322 = ((unint64_t)v1320 + v1831) & v1862;
              v1323 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1829 + 16);
              swift_bridgeObjectRetain();
              v1323(v1321, v1322, v1830);
              v1324 = (_QWORD *)((v1817 + v1321) & 0xFFFFFFFFFFFFF8);
              v1325 = (_QWORD *)((v1817 + v1322) & 0xFFFFFFFFFFFFF8);
              *v1324 = *v1325;
              v1326 = (_QWORD *)(((unint64_t)v1324 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1327 = (_QWORD *)(((unint64_t)v1325 + 15) & 0xFFFFFFFFFFFFFFF8);
              *v1326 = *v1327;
              v1326[1] = v1327[1];
              v1328 = (_QWORD *)(v1318 + v1772);
              *v1328 = *(_QWORD *)(v1086 + v1772);
              v1328[1] = *(_QWORD *)(v1086 + v1772 + 8);
              v1329 = (v1902 + v1318 + v1772) & v1887;
              v1330 = (v1902 + v1086 + v1772) & v1887;
              *(_BYTE *)v1329 = *(_BYTE *)v1330;
              v1331 = v1329 | 4;
              v1332 = *(_DWORD *)(v1330 | 4);
              *(_BYTE *)(v1331 + 4) = *(_BYTE *)((v1330 | 4) + 4);
              *(_DWORD *)v1331 = v1332;
              *(_WORD *)(v1329 + 10) = *(_WORD *)(v1330 + 0xA);
              v1333 = (v1841 + v1329) & v1869;
              v1334 = (v1841 + v1330) & v1869;
              v1335 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1335(v1333, v1334, v1838);
              v1336 = (v1836 + v1333) & v1869;
              v1337 = (v1836 + v1334) & v1869;
              v1335(v1336, v1337, v1838);
              v1338 = (_BYTE *)(v1336 + v1843);
              *v1338 = *(_BYTE *)(v1337 + v1843);
              v1338[1] = *(_BYTE *)(v1337 + v1843 + 1);
              v1338[2] = *(_BYTE *)(v1337 + v1843 + 2);
              v1338[3] = *(_BYTE *)(v1337 + v1843 + 3);
              v1338[4] = *(_BYTE *)(v1337 + v1843 + 4);
              v1339 = (v1336 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
              v1340 = (v1337 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1339 = *(_QWORD *)v1340;
              *(_QWORD *)(v1339 + 8) = *(_QWORD *)(v1340 + 8);
              *(_BYTE *)(v1339 + 16) = *(_BYTE *)(v1340 + 16);
              *(_BYTE *)(v1339 + 17) = *(_BYTE *)(v1340 + 17);
              *(_BYTE *)(v1339 + 18) = *(_BYTE *)(v1340 + 18);
              *(_BYTE *)(v1339 + 19) = *(_BYTE *)(v1340 + 19);
              v1341 = (v1339 + 27) & 0xFFFFFFFFFFFFFFF8;
              v1342 = (v1340 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1341 = *(_QWORD *)v1342;
              *(_BYTE *)(v1341 + 8) = *(_BYTE *)(v1342 + 8);
              *(_BYTE *)(v1341 + 9) = *(_BYTE *)(v1342 + 9);
              *(_BYTE *)(v1341 + 10) = *(_BYTE *)(v1342 + 10);
              *(_BYTE *)(v1341 + 11) = *(_BYTE *)(v1342 + 11);
              *(_BYTE *)(v1341 + 12) = *(_BYTE *)(v1342 + 12);
              v1343 = (_QWORD *)((v1339 + 47) & 0xFFFFFFFFFFFFF8);
              v1344 = (_QWORD *)((v1340 + 47) & 0xFFFFFFFFFFFFF8);
              *v1343 = *v1344;
              v1345 = ((unint64_t)v1343 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1346 = ((unint64_t)v1344 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1345 = *(_QWORD *)v1346;
              *(_BYTE *)(v1345 + 8) = *(_BYTE *)(v1346 + 8);
              *(_BYTE *)(v1345 + 9) = *(_BYTE *)(v1346 + 9);
              v1347 = (void *)((v1834 + v1345) & v1869);
              v1348 = (const void *)((v1834 + v1346) & v1869);
              v1349 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1837 + 48);
              swift_bridgeObjectRetain();
              if (v1349(v1348, 1, v1838))
              {
                v1316 = __n;
                memcpy(v1347, v1348, __n);
              }
              else
              {
                v1335((unint64_t)v1347, (unint64_t)v1348, v1838);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1837 + 56))(v1347, 0, 1, v1838);
                v1316 = __n;
              }
              v1350 = (_QWORD *)(((unint64_t)v1347 + v1835) & 0xFFFFFFFFFFFFFFF8);
              v1351 = (_QWORD *)(((unint64_t)v1348 + v1835) & 0xFFFFFFFFFFFFFFF8);
              *v1350 = *v1351;
              v1352 = ((unint64_t)v1350 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1353 = ((unint64_t)v1351 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1354 = *(_QWORD *)v1353;
              *(_BYTE *)(v1352 + 8) = *(_BYTE *)(v1353 + 8);
              *(_QWORD *)v1352 = v1354;
              v1355 = (_QWORD *)(((unint64_t)v1350 + 31) & 0xFFFFFFFFFFFFF8);
              v1356 = (_QWORD *)(((unint64_t)v1351 + 31) & 0xFFFFFFFFFFFFF8);
              *v1355 = *v1356;
              v1357 = ((unint64_t)v1355 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1358 = (uint64_t *)(((unint64_t)v1356 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1359 = v1358[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1315 = v1790;
              if ((v1359 & 0x3000000000000000) != 0)
              {
                *(_OWORD *)v1357 = *(_OWORD *)v1358;
              }
              else
              {
                v1360 = *v1358;
                sub_23AAAE668(*v1358, v1359);
                *(_QWORD *)v1357 = v1360;
                *(_QWORD *)(v1357 + 8) = v1359;
              }
              v1361 = (v1357 + 19) & 0xFFFFFFFFFFFFFFF8;
              v1362 = ((unint64_t)v1358 + 19) & 0xFFFFFFFFFFFFFFF8;
              v1363 = *(_QWORD *)v1362;
              *(_BYTE *)(v1361 + 8) = *(_BYTE *)(v1362 + 8);
              *(_QWORD *)v1361 = v1363;
              *(_BYTE *)(v1361 + 9) = *(_BYTE *)(v1362 + 9);
              v1364 = (v1361 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v1365 = (v1362 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v1366 = *(_DWORD *)v1365;
              *(_BYTE *)(v1364 + 4) = *(_BYTE *)(v1365 + 4);
              *(_DWORD *)v1364 = v1366;
              v1367 = (_QWORD *)((v1361 + 25) & 0xFFFFFFFFFFFFFFF8);
              v1368 = (_QWORD *)((v1362 + 25) & 0xFFFFFFFFFFFFFFF8);
              *v1367 = *v1368;
              v1367[1] = v1368[1];
              v1369 = v1329 + v1901;
              v1370 = v1330 + v1901;
              v1371 = *(_QWORD *)(v1330 + v1901 + 16);
              if (v1371 >= 0xFFFFFFFF)
                LODWORD(v1371) = -1;
              v1372 = v1371 - 1;
              swift_bridgeObjectRetain();
              if (v1372 < 0)
              {
                *(_QWORD *)v1369 = *(_QWORD *)v1370;
                *(_BYTE *)(v1369 + 8) = *(_BYTE *)(v1370 + 8);
                *(_BYTE *)(v1369 + 9) = *(_BYTE *)(v1370 + 9);
                v1385 = *(void **)(v1370 + 16);
                v1386 = v1385;
                *(_QWORD *)(v1369 + 16) = v1385;
                v1387 = *(void **)(v1370 + 24);
                v1388 = v1387;
                *(_QWORD *)(v1369 + 24) = v1387;
                *(_BYTE *)(v1369 + 32) = *(_BYTE *)(v1370 + 32);
                *(_BYTE *)(v1369 + 33) = *(_BYTE *)(v1370 + 33);
                *(_BYTE *)(v1369 + 34) = *(_BYTE *)(v1370 + 34);
                *(_QWORD *)(v1369 + 40) = *(_QWORD *)(v1370 + 40);
                *(_QWORD *)(v1369 + 48) = *(_QWORD *)(v1370 + 48);
                *(_QWORD *)(v1369 + 56) = *(_QWORD *)(v1370 + 56);
                *(_QWORD *)(v1369 + 64) = *(_QWORD *)(v1370 + 64);
                *(_BYTE *)(v1369 + 72) = *(_BYTE *)(v1370 + 72);
                *(_QWORD *)(v1369 + 80) = *(_QWORD *)(v1370 + 80);
                *(_QWORD *)(v1369 + 88) = *(_QWORD *)(v1370 + 88);
                v1935 = *(void **)(v1370 + 96);
                *(_QWORD *)(v1369 + 96) = v1935;
                *(_BYTE *)(v1369 + 104) = *(_BYTE *)(v1370 + 104);
                *(_BYTE *)(v1369 + 105) = *(_BYTE *)(v1370 + 105);
                *(_QWORD *)(v1369 + 112) = *(_QWORD *)(v1370 + 112);
                *(_QWORD *)(v1369 + 120) = *(_QWORD *)(v1370 + 120);
                *(_QWORD *)(v1369 + 128) = *(_QWORD *)(v1370 + 128);
                *(_QWORD *)(v1369 + 136) = *(_QWORD *)(v1370 + 136);
                *(_QWORD *)(v1369 + 144) = *(_QWORD *)(v1370 + 144);
                *(_QWORD *)(v1369 + 152) = *(_QWORD *)(v1370 + 152);
                *(_QWORD *)(v1369 + 160) = *(_QWORD *)(v1370 + 160);
                *(_QWORD *)(v1369 + 168) = *(_QWORD *)(v1370 + 168);
                *(_BYTE *)(v1369 + 176) = *(_BYTE *)(v1370 + 176);
                *(_QWORD *)(v1369 + 184) = *(_QWORD *)(v1370 + 184);
                v1389 = *(_QWORD *)(v1370 + 192);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1390 = v1935;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v1389)
                {
                  *(_QWORD *)(v1369 + 192) = v1389;
                  *(_QWORD *)(v1369 + 200) = *(_QWORD *)(v1370 + 200);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  *(_OWORD *)(v1369 + 192) = *(_OWORD *)(v1370 + 192);
                }
                *(_QWORD *)(v1369 + 208) = *(_QWORD *)(v1370 + 208);
                *(_QWORD *)(v1369 + 216) = *(_QWORD *)(v1370 + 216);
                *(_QWORD *)(v1369 + 224) = *(_QWORD *)(v1370 + 224);
                *(_QWORD *)(v1369 + 232) = *(_QWORD *)(v1370 + 232);
                *(_QWORD *)(v1369 + 240) = *(_QWORD *)(v1370 + 240);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v260 = v1776;
                v1316 = __n;
                v1315 = v1790;
              }
              else
              {
                v1373 = *(_OWORD *)v1370;
                v1374 = *(_OWORD *)(v1370 + 16);
                v1375 = *(_OWORD *)(v1370 + 48);
                *(_OWORD *)(v1369 + 32) = *(_OWORD *)(v1370 + 32);
                *(_OWORD *)(v1369 + 48) = v1375;
                *(_OWORD *)v1369 = v1373;
                *(_OWORD *)(v1369 + 16) = v1374;
                v1376 = *(_OWORD *)(v1370 + 64);
                v1377 = *(_OWORD *)(v1370 + 80);
                v1378 = *(_OWORD *)(v1370 + 112);
                *(_OWORD *)(v1369 + 96) = *(_OWORD *)(v1370 + 96);
                *(_OWORD *)(v1369 + 112) = v1378;
                *(_OWORD *)(v1369 + 64) = v1376;
                *(_OWORD *)(v1369 + 80) = v1377;
                v1379 = *(_OWORD *)(v1370 + 128);
                v1380 = *(_OWORD *)(v1370 + 144);
                v1381 = *(_OWORD *)(v1370 + 176);
                *(_OWORD *)(v1369 + 160) = *(_OWORD *)(v1370 + 160);
                *(_OWORD *)(v1369 + 176) = v1381;
                *(_OWORD *)(v1369 + 128) = v1379;
                *(_OWORD *)(v1369 + 144) = v1380;
                v1382 = *(_OWORD *)(v1370 + 192);
                v1383 = *(_OWORD *)(v1370 + 208);
                v1384 = *(_OWORD *)(v1370 + 224);
                *(_QWORD *)(v1369 + 240) = *(_QWORD *)(v1370 + 240);
                *(_OWORD *)(v1369 + 208) = v1383;
                *(_OWORD *)(v1369 + 224) = v1384;
                *(_OWORD *)(v1369 + 192) = v1382;
                v260 = v1776;
              }
              v1678 = (_OWORD *)((v1369 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1679 = (__int128 *)((v1370 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1680 = *v1679;
              *(_OWORD *)((char *)v1678 + 9) = *(__int128 *)((char *)v1679 + 9);
              *v1678 = v1680;
              v1681 = (v1369 + 287) & 0xFFFFFFFFFFFFFFF8;
              v1682 = (v1370 + 287) & 0xFFFFFFFFFFFFFFF8;
              v1683 = *(_OWORD *)v1682;
              *(_BYTE *)(v1681 + 16) = *(_BYTE *)(v1682 + 16);
              *(_OWORD *)v1681 = v1683;
              v1684 = (_QWORD *)((v1369 + 311) & 0xFFFFFFFFFFFFF8);
              v1685 = (v1370 + 311) & 0xFFFFFFFFFFFFF8;
              v1686 = *(_QWORD *)v1685;
              v1685 += 15;
              *v1684 = v1686;
              v1687 = (_QWORD *)(((unint64_t)v1684 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1688 = *(_QWORD *)(v1685 & 0xFFFFFFFFFFFFFFF8);
              v1689 = *(_QWORD *)((v1685 & 0xFFFFFFFFFFFFFFF8) + 8);
              sub_23AA7F2D4(v1688, v1689);
              *v1687 = v1688;
              v1687[1] = v1689;
              v1317 = v1843;
              v1045 = (void *)(((unint64_t)a1 + v1784) & ~v1890);
              if (v1813)
              {
LABEL_1306:
                v1690 = ((((v1799
                          + ((((((((((v1818 + v1317 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 19) & 0xFFFFFFFFFFFFFFF8)
                            + 25) & 0xFFFFFFFFFFFFFFF8)
                          + 327) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16;
                v1691 = (_QWORD *)(((unint64_t)v1045 + v1690) & 0xFFFFFFFFFFFFFFF8);
                v1692 = (_QWORD *)(((unint64_t)v1046 + v1690) & 0xFFFFFFFFFFFFFFF8);
                *v1691 = *v1692;
                v1691[1] = v1692[1];
                *(_QWORD *)(((unint64_t)v1691 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1692
                                                                                              + 23) & 0xFFFFFFFFFFFFF8);
                *((_BYTE *)a1 + v1315) = 3;
                swift_bridgeObjectRetain();
LABEL_1307:
                v1077 = 1;
                goto LABEL_1337;
              }
LABEL_1212:
              v1317 = v1316;
              goto LABEL_1306;
            }
            v1085 = (v1833 + (((unint64_t)a2 + v1784) & ~v1890)) & v1923;
            v1086 = (v1800 + v1085) & v1039;
            v1046 = (void *)(((unint64_t)a2 + v1784) & v1042);
            if (v1820 == v1802)
            {
              if (v1806 == v1820)
              {
                v1043 = (*(uint64_t (**)(unint64_t))(v1827 + 48))((v1800 + v1085) & v1039);
LABEL_1209:
                v1044 = v1040;
                v1045 = (void *)(((unint64_t)a1 + v1784) & v1042);
                goto LABEL_1210;
              }
              v1147 = (unint64_t *)((v1839 + v1086) & 0xFFFFFFFFFFFFFFF8);
              if (v1792 > 0x7FFFFFFE)
              {
                v1043 = (*(uint64_t (**)(unint64_t))(v1829 + 48))(((unint64_t)v1147 + v1831) & v1862);
                goto LABEL_1209;
              }
              v1148 = *v1147;
            }
            else
            {
              v1111 = v1086 + v1772;
              if ((v1788 & 0x80000000) == 0)
              {
                v1112 = *(_QWORD *)(v1111 + 8);
                if (v1112 >= 0xFFFFFFFF)
                  LODWORD(v1112) = -1;
                v1043 = v1112 + 1;
                goto LABEL_1209;
              }
              v1157 = (v1841 + ((v1902 + v1111) & v1887)) & v1869;
              if (v1813 > 0x7FFFFFFD)
              {
                v1043 = (*(uint64_t (**)(unint64_t))(v1837 + 48))(v1157);
                goto LABEL_1209;
              }
              v1148 = *(_QWORD *)(((v1786 + ((v1836 + v1157) & v1869)) & 0xFFFFFFFFFFFFF8) + 8);
            }
            if (v1148 >= 0xFFFFFFFF)
              LODWORD(v1148) = -1;
            v1044 = v1040;
            v1045 = (void *)(((unint64_t)a1 + v1784) & v1042);
            if ((v1148 + 1) >= 2)
              goto LABEL_1211;
            goto LABEL_1214;
          case 4:
            v1047 = a1;
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v1847 + 16))(a1, a2, v1845);
            v1048 = 4;
            goto LABEL_1039;
          case 5:
            v1047 = a1;
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v1847 + 16))(a1, a2, v1845);
            v1048 = 5;
            goto LABEL_1039;
          case 6:
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v1847 + 16))(a1, a2, v1845);
            v1049 = (void *)(((unint64_t)a1 + v1779) & v1021);
            v1050 = (const void *)(((unint64_t)a2 + v1779) & v1021);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v58 + 48))(v1050, 1, v1883))
            {
              memcpy(v1049, v1050, v1777);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v58 + 16))(v1049, v1050, v1883);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v1049, 0, 1, v1883);
            }
            *((_BYTE *)a1 + v1790) = 6;
            goto LABEL_1307;
          case 7:
            v1047 = a1;
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v1847 + 16))(a1, a2, v1845);
            v1048 = 7;
LABEL_1039:
            *((_BYTE *)v1047 + v1790) = v1048;
            goto LABEL_1307;
          default:
            if (v1790 <= 3)
              v560 = v1790;
            else
              v560 = 4;
            __asm { BR              X13 }
            return result;
        }
      }
      v562 = v1845;
      v1051 = ~v55;
      switch(*((_BYTE *)a2 + v1798))
      {
        case 0:
          v1052 = v86;
          v1053 = ~v1849;
          v1870 = ~(unint64_t)v1864;
          v1054 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v1844 + 16);
          v1054(a1, a2, AssociatedTypeWitness);
          v1930 = (void *)(((unint64_t)a1 + v1785) & ~v1876);
          v1055 = (const void *)(((unint64_t)a2 + v1785) & ~v1876);
          if (v1891 == v1803)
          {
            v1056 = (*(uint64_t (**)(const void *))(v1844 + 48))(v1055);
            v1057 = v1052;
            v1058 = ~v1912;
            v1059 = v1819;
LABEL_1228:
            if (v1056)
            {
LABEL_1229:
              v1391 = ((unint64_t)a1 + v1785) & ~v1876;
              memcpy(v1930, v1055, v1899);
              v260 = v1776;
              v1392 = v1814;
              v1393 = __n;
LABEL_1230:
              v1394 = v1393;
              goto LABEL_1311;
            }
            v1087 = ((unint64_t)v1055 + v1059) & v1058;
            v1088 = (v1801 + v1087) & v1057;
            goto LABEL_1232;
          }
          v1059 = v1819;
          v1058 = ~v1912;
          v1087 = ((unint64_t)v1055 + v1819) & v1897;
          v1088 = (v1801 + v1087) & v1052;
          if (v1815 == v1803)
          {
            if (v1805 == v1815)
            {
              v1056 = (*(uint64_t (**)(unint64_t))(v1825 + 48))((v1801 + v1087) & v1052);
LABEL_1227:
              v1057 = v1052;
              goto LABEL_1228;
            }
            v1149 = (unint64_t *)((v1832 + v1088) & 0xFFFFFFFFFFFFFFF8);
            if (v1791 > 0x7FFFFFFE)
            {
              v1056 = (*(uint64_t (**)(unint64_t))(v1822 + 48))(((unint64_t)v1149 + v1821) & v1855);
              goto LABEL_1227;
            }
            v1150 = *v1149;
          }
          else
          {
            v1113 = v1088 + v1900;
            if ((v1789 & 0x80000000) == 0)
            {
              v1057 = v1052;
              v1114 = *(_QWORD *)(v1113 + 8);
              if (v1114 >= 0xFFFFFFFF)
                LODWORD(v1114) = -1;
              v1056 = v1114 + 1;
              goto LABEL_1228;
            }
            v1158 = (v1841 + ((v1902 + v1113) & v1053)) & v1870;
            if (v1813 > 0x7FFFFFFD)
            {
              v1056 = (*(uint64_t (**)(unint64_t))(v1837 + 48))(v1158);
              goto LABEL_1227;
            }
            v1150 = *(_QWORD *)(((v1786 + ((v1836 + v1158) & v1870)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v1150 >= 0xFFFFFFFF)
            LODWORD(v1150) = -1;
          v1057 = v1052;
          if ((v1150 + 1) >= 2)
            goto LABEL_1229;
LABEL_1232:
          v1395 = v1057;
          ((void (*)(void *))v1054)(v1930);
          v1396 = ((unint64_t)v1930 + v1059) & v1058;
          v1054((uint64_t *)v1396, (uint64_t *)v1087, AssociatedTypeWitness);
          v1397 = (v1801 + v1396) & v1395;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1825 + 16))(v1397, v1088, v1826);
          v1398 = (_QWORD *)((v1832 + v1397) & 0xFFFFFFFFFFFFFFF8);
          v1399 = (_QWORD *)((v1832 + v1088) & 0xFFFFFFFFFFFFFFF8);
          *v1398 = *v1399;
          v1400 = ((unint64_t)v1398 + v1821) & v1855;
          v1401 = ((unint64_t)v1399 + v1821) & v1855;
          v1402 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1822 + 16);
          swift_bridgeObjectRetain();
          v1402(v1400, v1401, v1823);
          v1403 = (_QWORD *)((v1816 + v1400) & 0xFFFFFFFFFFFFF8);
          v1404 = (_QWORD *)((v1816 + v1401) & 0xFFFFFFFFFFFFF8);
          *v1403 = *v1404;
          v1405 = (_QWORD *)(((unint64_t)v1403 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1406 = (_QWORD *)(((unint64_t)v1404 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v1405 = *v1406;
          v1405[1] = v1406[1];
          v1407 = (_QWORD *)(v1397 + v1900);
          *v1407 = *(_QWORD *)(v1088 + v1900);
          v1407[1] = *(_QWORD *)(v1088 + v1900 + 8);
          v1408 = (v1902 + v1397 + v1900) & v1053;
          v1409 = (v1902 + v1088 + v1900) & v1053;
          *(_BYTE *)v1408 = *(_BYTE *)v1409;
          v1410 = v1408 | 4;
          v1411 = *(_DWORD *)(v1409 | 4);
          *(_BYTE *)(v1410 + 4) = *(_BYTE *)((v1409 | 4) + 4);
          *(_DWORD *)v1410 = v1411;
          *(_WORD *)(v1408 + 10) = *(_WORD *)(v1409 + 0xA);
          v1412 = (v1841 + v1408) & v1870;
          v1413 = (v1841 + v1409) & v1870;
          v1414 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1414(v1412, v1413, v1838);
          v1415 = (v1836 + v1412) & v1870;
          v1416 = (v1836 + v1413) & v1870;
          v1414(v1415, v1416, v1838);
          v1417 = (_BYTE *)(v1415 + v1843);
          *v1417 = *(_BYTE *)(v1416 + v1843);
          v1417[1] = *(_BYTE *)(v1416 + v1843 + 1);
          v1417[2] = *(_BYTE *)(v1416 + v1843 + 2);
          v1417[3] = *(_BYTE *)(v1416 + v1843 + 3);
          v1417[4] = *(_BYTE *)(v1416 + v1843 + 4);
          v1418 = (v1415 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
          v1419 = (v1416 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v1418 = *(_QWORD *)v1419;
          *(_QWORD *)(v1418 + 8) = *(_QWORD *)(v1419 + 8);
          *(_BYTE *)(v1418 + 16) = *(_BYTE *)(v1419 + 16);
          *(_BYTE *)(v1418 + 17) = *(_BYTE *)(v1419 + 17);
          *(_BYTE *)(v1418 + 18) = *(_BYTE *)(v1419 + 18);
          *(_BYTE *)(v1418 + 19) = *(_BYTE *)(v1419 + 19);
          v1420 = (v1418 + 27) & 0xFFFFFFFFFFFFFFF8;
          v1421 = (v1419 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v1420 = *(_QWORD *)v1421;
          *(_BYTE *)(v1420 + 8) = *(_BYTE *)(v1421 + 8);
          *(_BYTE *)(v1420 + 9) = *(_BYTE *)(v1421 + 9);
          *(_BYTE *)(v1420 + 10) = *(_BYTE *)(v1421 + 10);
          *(_BYTE *)(v1420 + 11) = *(_BYTE *)(v1421 + 11);
          *(_BYTE *)(v1420 + 12) = *(_BYTE *)(v1421 + 12);
          v1422 = (_QWORD *)((v1418 + 47) & 0xFFFFFFFFFFFFF8);
          v1423 = (_QWORD *)((v1419 + 47) & 0xFFFFFFFFFFFFF8);
          *v1422 = *v1423;
          v1424 = ((unint64_t)v1422 + 15) & 0xFFFFFFFFFFFFFFF8;
          v1425 = ((unint64_t)v1423 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v1424 = *(_QWORD *)v1425;
          *(_BYTE *)(v1424 + 8) = *(_BYTE *)(v1425 + 8);
          *(_BYTE *)(v1424 + 9) = *(_BYTE *)(v1425 + 9);
          v1426 = (void *)((v1834 + v1424) & v1870);
          v1427 = (const void *)((v1834 + v1425) & v1870);
          v1428 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1837 + 48);
          swift_bridgeObjectRetain();
          if (v1428(v1427, 1, v1838))
          {
            memcpy(v1426, v1427, __n);
          }
          else
          {
            v1414((unint64_t)v1426, (unint64_t)v1427, v1838);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1837 + 56))(v1426, 0, 1, v1838);
          }
          v1429 = (_QWORD *)(((unint64_t)v1426 + v1835) & 0xFFFFFFFFFFFFFFF8);
          v1430 = (_QWORD *)(((unint64_t)v1427 + v1835) & 0xFFFFFFFFFFFFFFF8);
          *v1429 = *v1430;
          v1431 = ((unint64_t)v1429 + 15) & 0xFFFFFFFFFFFFFFF8;
          v1432 = ((unint64_t)v1430 + 15) & 0xFFFFFFFFFFFFFFF8;
          v1433 = *(_QWORD *)v1432;
          *(_BYTE *)(v1431 + 8) = *(_BYTE *)(v1432 + 8);
          *(_QWORD *)v1431 = v1433;
          v1434 = (_QWORD *)(((unint64_t)v1429 + 31) & 0xFFFFFFFFFFFFF8);
          v1435 = (_QWORD *)(((unint64_t)v1430 + 31) & 0xFFFFFFFFFFFFF8);
          *v1434 = *v1435;
          v1436 = ((unint64_t)v1434 + 15) & 0xFFFFFFFFFFFFFFF8;
          v1437 = (uint64_t *)(((unint64_t)v1435 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1438 = v1437[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v1438 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v1436 = *(_OWORD *)v1437;
          }
          else
          {
            v1439 = *v1437;
            sub_23AAAE668(*v1437, v1438);
            *(_QWORD *)v1436 = v1439;
            *(_QWORD *)(v1436 + 8) = v1438;
          }
          v1440 = (v1436 + 19) & 0xFFFFFFFFFFFFFFF8;
          v1441 = ((unint64_t)v1437 + 19) & 0xFFFFFFFFFFFFFFF8;
          v1442 = *(_QWORD *)v1441;
          *(_BYTE *)(v1440 + 8) = *(_BYTE *)(v1441 + 8);
          *(_QWORD *)v1440 = v1442;
          *(_BYTE *)(v1440 + 9) = *(_BYTE *)(v1441 + 9);
          v1443 = (v1440 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v1444 = (v1441 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v1445 = *(_DWORD *)v1444;
          *(_BYTE *)(v1443 + 4) = *(_BYTE *)(v1444 + 4);
          *(_DWORD *)v1443 = v1445;
          v1446 = (_QWORD *)((v1440 + 25) & 0xFFFFFFFFFFFFFFF8);
          v1447 = (_QWORD *)((v1441 + 25) & 0xFFFFFFFFFFFFFFF8);
          *v1446 = *v1447;
          v1446[1] = v1447[1];
          v1448 = v1901 + v1408;
          v1449 = v1901 + v1409;
          v1450 = *(_QWORD *)(v1901 + v1409 + 16);
          if (v1450 >= 0xFFFFFFFF)
            LODWORD(v1450) = -1;
          v1451 = v1450 - 1;
          swift_bridgeObjectRetain();
          if (v1451 < 0)
          {
            *(_QWORD *)v1448 = *(_QWORD *)v1449;
            *(_BYTE *)(v1448 + 8) = *(_BYTE *)(v1449 + 8);
            *(_BYTE *)(v1448 + 9) = *(_BYTE *)(v1449 + 9);
            v1464 = *(void **)(v1449 + 16);
            v1465 = v1464;
            *(_QWORD *)(v1448 + 16) = v1464;
            v1466 = *(void **)(v1449 + 24);
            v1467 = v1466;
            *(_QWORD *)(v1448 + 24) = v1466;
            *(_BYTE *)(v1448 + 32) = *(_BYTE *)(v1449 + 32);
            *(_BYTE *)(v1448 + 33) = *(_BYTE *)(v1449 + 33);
            *(_BYTE *)(v1448 + 34) = *(_BYTE *)(v1449 + 34);
            *(_QWORD *)(v1448 + 40) = *(_QWORD *)(v1449 + 40);
            *(_QWORD *)(v1448 + 48) = *(_QWORD *)(v1449 + 48);
            *(_QWORD *)(v1448 + 56) = *(_QWORD *)(v1449 + 56);
            *(_QWORD *)(v1448 + 64) = *(_QWORD *)(v1449 + 64);
            *(_BYTE *)(v1448 + 72) = *(_BYTE *)(v1449 + 72);
            *(_QWORD *)(v1448 + 80) = *(_QWORD *)(v1449 + 80);
            *(_QWORD *)(v1448 + 88) = *(_QWORD *)(v1449 + 88);
            v1916 = *(void **)(v1449 + 96);
            *(_QWORD *)(v1448 + 96) = v1916;
            *(_BYTE *)(v1448 + 104) = *(_BYTE *)(v1449 + 104);
            *(_BYTE *)(v1448 + 105) = *(_BYTE *)(v1449 + 105);
            *(_QWORD *)(v1448 + 112) = *(_QWORD *)(v1449 + 112);
            *(_QWORD *)(v1448 + 120) = *(_QWORD *)(v1449 + 120);
            *(_QWORD *)(v1448 + 128) = *(_QWORD *)(v1449 + 128);
            *(_QWORD *)(v1448 + 136) = *(_QWORD *)(v1449 + 136);
            *(_QWORD *)(v1448 + 144) = *(_QWORD *)(v1449 + 144);
            *(_QWORD *)(v1448 + 152) = *(_QWORD *)(v1449 + 152);
            *(_QWORD *)(v1448 + 160) = *(_QWORD *)(v1449 + 160);
            *(_QWORD *)(v1448 + 168) = *(_QWORD *)(v1449 + 168);
            *(_BYTE *)(v1448 + 176) = *(_BYTE *)(v1449 + 176);
            *(_QWORD *)(v1448 + 184) = *(_QWORD *)(v1449 + 184);
            v1468 = *(_QWORD *)(v1449 + 192);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1469 = v1916;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v1468)
            {
              *(_QWORD *)(v1448 + 192) = v1468;
              *(_QWORD *)(v1448 + 200) = *(_QWORD *)(v1449 + 200);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v1448 + 192) = *(_OWORD *)(v1449 + 192);
            }
            *(_QWORD *)(v1448 + 208) = *(_QWORD *)(v1449 + 208);
            *(_QWORD *)(v1448 + 216) = *(_QWORD *)(v1449 + 216);
            *(_QWORD *)(v1448 + 224) = *(_QWORD *)(v1449 + 224);
            *(_QWORD *)(v1448 + 232) = *(_QWORD *)(v1449 + 232);
            *(_QWORD *)(v1448 + 240) = *(_QWORD *)(v1449 + 240);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v260 = v1776;
            v1393 = __n;
            v259 = v1798;
            v1055 = (const void *)(((unint64_t)a2 + v1785) & ~v1876);
          }
          else
          {
            v1452 = *(_OWORD *)v1449;
            v1453 = *(_OWORD *)(v1449 + 16);
            v1454 = *(_OWORD *)(v1449 + 48);
            *(_OWORD *)(v1448 + 32) = *(_OWORD *)(v1449 + 32);
            *(_OWORD *)(v1448 + 48) = v1454;
            *(_OWORD *)v1448 = v1452;
            *(_OWORD *)(v1448 + 16) = v1453;
            v1455 = *(_OWORD *)(v1449 + 64);
            v1456 = *(_OWORD *)(v1449 + 80);
            v1457 = *(_OWORD *)(v1449 + 112);
            *(_OWORD *)(v1448 + 96) = *(_OWORD *)(v1449 + 96);
            *(_OWORD *)(v1448 + 112) = v1457;
            *(_OWORD *)(v1448 + 64) = v1455;
            *(_OWORD *)(v1448 + 80) = v1456;
            v1458 = *(_OWORD *)(v1449 + 128);
            v1459 = *(_OWORD *)(v1449 + 144);
            v1460 = *(_OWORD *)(v1449 + 176);
            *(_OWORD *)(v1448 + 160) = *(_OWORD *)(v1449 + 160);
            *(_OWORD *)(v1448 + 176) = v1460;
            *(_OWORD *)(v1448 + 128) = v1458;
            *(_OWORD *)(v1448 + 144) = v1459;
            v1461 = *(_OWORD *)(v1449 + 192);
            v1462 = *(_OWORD *)(v1449 + 208);
            v1463 = *(_OWORD *)(v1449 + 224);
            *(_QWORD *)(v1448 + 240) = *(_QWORD *)(v1449 + 240);
            *(_OWORD *)(v1448 + 208) = v1462;
            *(_OWORD *)(v1448 + 224) = v1463;
            *(_OWORD *)(v1448 + 192) = v1461;
            v260 = v1776;
            v1393 = __n;
          }
          v1693 = (_OWORD *)((v1448 + 255) & 0xFFFFFFFFFFFFFFF8);
          v1694 = (__int128 *)((v1449 + 255) & 0xFFFFFFFFFFFFFFF8);
          v1695 = *v1694;
          *(_OWORD *)((char *)v1693 + 9) = *(__int128 *)((char *)v1694 + 9);
          *v1693 = v1695;
          v1696 = (v1448 + 287) & 0xFFFFFFFFFFFFFFF8;
          v1697 = (v1449 + 287) & 0xFFFFFFFFFFFFFFF8;
          v1698 = *(_OWORD *)v1697;
          *(_BYTE *)(v1696 + 16) = *(_BYTE *)(v1697 + 16);
          *(_OWORD *)v1696 = v1698;
          v1699 = (_QWORD *)((v1448 + 311) & 0xFFFFFFFFFFFFF8);
          v1700 = (v1449 + 311) & 0xFFFFFFFFFFFFF8;
          v1701 = *(_QWORD *)v1700;
          v1700 += 15;
          *v1699 = v1701;
          v1702 = (_QWORD *)(((unint64_t)v1699 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1703 = *(_QWORD *)(v1700 & 0xFFFFFFFFFFFFFFF8);
          v1704 = *(_QWORD *)((v1700 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_23AA7F2D4(v1703, v1704);
          *v1702 = v1703;
          v1702[1] = v1704;
          v1394 = v1843;
          v1392 = v1814;
          v1391 = ((unint64_t)a1 + v1785) & ~v1876;
          if (!v1813)
            goto LABEL_1230;
LABEL_1311:
          v1705 = ((((v1392
                    + ((((((((((v1818 + v1394 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 19) & 0xFFFFFFFFFFFFFFF8)
                      + 25) & 0xFFFFFFFFFFFFFFF8)
                    + 327) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 16;
          v1706 = (_QWORD *)((v1391 + v1705) & 0xFFFFFFFFFFFFFFF8);
          v1707 = (_QWORD *)(((unint64_t)v1055 + v1705) & 0xFFFFFFFFFFFFFFF8);
          *v1706 = *v1707;
          v1708 = *(void **)(((unint64_t)v1707 + 15) & 0xFFFFFFFFFFFFF8);
          *(_QWORD *)(((unint64_t)v1706 + 15) & 0xFFFFFFFFFFFFF8) = v1708;
          *((_BYTE *)a1 + v259) = 0;
          v1709 = v1708;
LABEL_1336:
          v1077 = 0;
          goto LABEL_1337;
        case 1:
          v1851 = v90;
          v1863 = ~v37;
          v1888 = v88;
          v1773 = ((((v1817 + ((v37 + 8 + (v1839 & 0xFFFFFFFFFFFFFFF8)) & ~v37)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                + 16;
          v1871 = ~(unint64_t)v1864;
          v1060 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v1844 + 16);
          v1060(a1, a2, AssociatedTypeWitness);
          v1911 = (void *)(((unint64_t)a1 + v1785) & ~v1876);
          v1915 = (void *)(((unint64_t)a2 + v1785) & ~v1876);
          if (v1891 == v1803)
          {
            v1061 = (*(uint64_t (**)(void))(v1844 + 48))();
            v1062 = v86;
            v1063 = v1897;
            v1064 = v1819;
LABEL_1246:
            if (v1061)
            {
LABEL_1247:
              v1470 = ((unint64_t)a1 + v1785) & ~v1876;
              v1471 = ((unint64_t)a2 + v1785) & ~v1876;
              memcpy(v1911, v1915, v1899);
LABEL_1248:
              v1472 = __n;
              goto LABEL_1315;
            }
            v1089 = ((unint64_t)v1915 + v1064) & v1063;
            v1090 = (v1801 + v1089) & v1062;
LABEL_1250:
            v1473 = v1062;
            v1060((uint64_t *)v1911, (uint64_t *)v1915, AssociatedTypeWitness);
            v1474 = ((unint64_t)v1911 + v1064) & v1063;
            v1060((uint64_t *)v1474, (uint64_t *)v1089, AssociatedTypeWitness);
            v1475 = (v1801 + v1474) & v1473;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1825 + 16))(v1475, v1090, v1826);
            v1476 = (_QWORD *)((v1832 + v1475) & 0xFFFFFFFFFFFFFFF8);
            v1477 = (_QWORD *)((v1832 + v1090) & 0xFFFFFFFFFFFFFFF8);
            *v1476 = *v1477;
            v1478 = ((unint64_t)v1476 + v1821) & v1855;
            v1479 = ((unint64_t)v1477 + v1821) & v1855;
            v1480 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1822 + 16);
            swift_bridgeObjectRetain();
            v1480(v1478, v1479, v1823);
            v1481 = (_QWORD *)((v1816 + v1478) & 0xFFFFFFFFFFFFF8);
            v1482 = (_QWORD *)((v1816 + v1479) & 0xFFFFFFFFFFFFF8);
            *v1481 = *v1482;
            v1483 = (_QWORD *)(((unint64_t)v1481 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1484 = (_QWORD *)(((unint64_t)v1482 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v1483 = *v1484;
            v1483[1] = v1484[1];
            v1485 = (_QWORD *)(v1475 + v1900);
            *v1485 = *(_QWORD *)(v1090 + v1900);
            v1485[1] = *(_QWORD *)(v1090 + v1900 + 8);
            v1486 = (v1902 + v1475 + v1900) & v1888;
            v1487 = (v1902 + v1090 + v1900) & v1888;
            *(_BYTE *)v1486 = *(_BYTE *)v1487;
            v1488 = v1486 | 4;
            v1489 = *(_DWORD *)(v1487 | 4);
            *(_BYTE *)(v1488 + 4) = *(_BYTE *)((v1487 | 4) + 4);
            *(_DWORD *)v1488 = v1489;
            *(_WORD *)(v1486 + 10) = *(_WORD *)(v1487 + 0xA);
            v1907 = v1486;
            v1490 = (v1841 + v1486) & v1871;
            v1491 = (v1841 + v1487) & v1871;
            v1492 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1492(v1490, v1491, v1838);
            v1493 = (v1836 + v1490) & v1871;
            v1494 = (v1836 + v1491) & v1871;
            v1492(v1493, v1494, v1838);
            v1472 = v1843;
            v1495 = (_BYTE *)(v1493 + v1843);
            *v1495 = *(_BYTE *)(v1494 + v1843);
            v1495[1] = *(_BYTE *)(v1494 + v1843 + 1);
            v1495[2] = *(_BYTE *)(v1494 + v1843 + 2);
            v1495[3] = *(_BYTE *)(v1494 + v1843 + 3);
            v1495[4] = *(_BYTE *)(v1494 + v1843 + 4);
            v1496 = (v1493 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
            v1497 = (v1494 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1496 = *(_QWORD *)v1497;
            *(_QWORD *)(v1496 + 8) = *(_QWORD *)(v1497 + 8);
            *(_BYTE *)(v1496 + 16) = *(_BYTE *)(v1497 + 16);
            *(_BYTE *)(v1496 + 17) = *(_BYTE *)(v1497 + 17);
            *(_BYTE *)(v1496 + 18) = *(_BYTE *)(v1497 + 18);
            *(_BYTE *)(v1496 + 19) = *(_BYTE *)(v1497 + 19);
            v1498 = (v1496 + 27) & 0xFFFFFFFFFFFFFFF8;
            v1499 = (v1497 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1498 = *(_QWORD *)v1499;
            *(_BYTE *)(v1498 + 8) = *(_BYTE *)(v1499 + 8);
            *(_BYTE *)(v1498 + 9) = *(_BYTE *)(v1499 + 9);
            *(_BYTE *)(v1498 + 10) = *(_BYTE *)(v1499 + 10);
            *(_BYTE *)(v1498 + 11) = *(_BYTE *)(v1499 + 11);
            *(_BYTE *)(v1498 + 12) = *(_BYTE *)(v1499 + 12);
            v1500 = (_QWORD *)((v1496 + 47) & 0xFFFFFFFFFFFFF8);
            v1501 = (_QWORD *)((v1497 + 47) & 0xFFFFFFFFFFFFF8);
            *v1500 = *v1501;
            v1502 = ((unint64_t)v1500 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1503 = ((unint64_t)v1501 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1502 = *(_QWORD *)v1503;
            *(_BYTE *)(v1502 + 8) = *(_BYTE *)(v1503 + 8);
            *(_BYTE *)(v1502 + 9) = *(_BYTE *)(v1503 + 9);
            v1504 = (void *)((v1834 + v1502) & v1871);
            v1505 = (const void *)((v1834 + v1503) & v1871);
            v1506 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1837 + 48);
            swift_bridgeObjectRetain();
            if (v1506(v1505, 1, v1838))
            {
              memcpy(v1504, v1505, __n);
            }
            else
            {
              v1492((unint64_t)v1504, (unint64_t)v1505, v1838);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1837 + 56))(v1504, 0, 1, v1838);
            }
            v1507 = (_QWORD *)(((unint64_t)v1504 + v1835) & 0xFFFFFFFFFFFFFFF8);
            v1508 = (_QWORD *)(((unint64_t)v1505 + v1835) & 0xFFFFFFFFFFFFFFF8);
            *v1507 = *v1508;
            v1509 = ((unint64_t)v1507 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1510 = ((unint64_t)v1508 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1511 = *(_QWORD *)v1510;
            *(_BYTE *)(v1509 + 8) = *(_BYTE *)(v1510 + 8);
            *(_QWORD *)v1509 = v1511;
            v1512 = (_QWORD *)(((unint64_t)v1507 + 31) & 0xFFFFFFFFFFFFF8);
            v1513 = (_QWORD *)(((unint64_t)v1508 + 31) & 0xFFFFFFFFFFFFF8);
            *v1512 = *v1513;
            v1514 = ((unint64_t)v1512 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1515 = (uint64_t *)(((unint64_t)v1513 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1516 = v1515[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((v1516 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)v1514 = *(_OWORD *)v1515;
            }
            else
            {
              v1517 = *v1515;
              sub_23AAAE668(*v1515, v1516);
              *(_QWORD *)v1514 = v1517;
              *(_QWORD *)(v1514 + 8) = v1516;
            }
            v1518 = (v1514 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1519 = ((unint64_t)v1515 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1520 = *(_QWORD *)v1519;
            *(_BYTE *)(v1518 + 8) = *(_BYTE *)(v1519 + 8);
            *(_QWORD *)v1518 = v1520;
            *(_BYTE *)(v1518 + 9) = *(_BYTE *)(v1519 + 9);
            v1521 = (v1518 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v1522 = (v1519 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v1523 = *(_DWORD *)v1522;
            *(_BYTE *)(v1521 + 4) = *(_BYTE *)(v1522 + 4);
            *(_DWORD *)v1521 = v1523;
            v1524 = (_QWORD *)((v1518 + 25) & 0xFFFFFFFFFFFFFFF8);
            v1525 = (_QWORD *)((v1519 + 25) & 0xFFFFFFFFFFFFFFF8);
            *v1524 = *v1525;
            v1524[1] = v1525[1];
            v1526 = v1901 + v1907;
            v1527 = v1901 + v1487;
            v1528 = *(_QWORD *)(v1527 + 16);
            if (v1528 >= 0xFFFFFFFF)
              LODWORD(v1528) = -1;
            v1529 = v1528 - 1;
            swift_bridgeObjectRetain();
            if (v1529 < 0)
            {
              *(_QWORD *)v1526 = *(_QWORD *)v1527;
              *(_BYTE *)(v1526 + 8) = *(_BYTE *)(v1527 + 8);
              *(_BYTE *)(v1526 + 9) = *(_BYTE *)(v1527 + 9);
              v1542 = *(void **)(v1527 + 16);
              v1543 = v1542;
              *(_QWORD *)(v1526 + 16) = v1542;
              v1544 = *(void **)(v1527 + 24);
              v1545 = v1544;
              *(_QWORD *)(v1526 + 24) = v1544;
              *(_BYTE *)(v1526 + 32) = *(_BYTE *)(v1527 + 32);
              *(_BYTE *)(v1526 + 33) = *(_BYTE *)(v1527 + 33);
              *(_BYTE *)(v1526 + 34) = *(_BYTE *)(v1527 + 34);
              *(_QWORD *)(v1526 + 40) = *(_QWORD *)(v1527 + 40);
              *(_QWORD *)(v1526 + 48) = *(_QWORD *)(v1527 + 48);
              *(_QWORD *)(v1526 + 56) = *(_QWORD *)(v1527 + 56);
              *(_QWORD *)(v1526 + 64) = *(_QWORD *)(v1527 + 64);
              *(_BYTE *)(v1526 + 72) = *(_BYTE *)(v1527 + 72);
              *(_QWORD *)(v1526 + 80) = *(_QWORD *)(v1527 + 80);
              *(_QWORD *)(v1526 + 88) = *(_QWORD *)(v1527 + 88);
              v1908 = *(void **)(v1527 + 96);
              *(_QWORD *)(v1526 + 96) = v1908;
              *(_BYTE *)(v1526 + 104) = *(_BYTE *)(v1527 + 104);
              *(_BYTE *)(v1526 + 105) = *(_BYTE *)(v1527 + 105);
              *(_QWORD *)(v1526 + 112) = *(_QWORD *)(v1527 + 112);
              *(_QWORD *)(v1526 + 120) = *(_QWORD *)(v1527 + 120);
              *(_QWORD *)(v1526 + 128) = *(_QWORD *)(v1527 + 128);
              *(_QWORD *)(v1526 + 136) = *(_QWORD *)(v1527 + 136);
              *(_QWORD *)(v1526 + 144) = *(_QWORD *)(v1527 + 144);
              *(_QWORD *)(v1526 + 152) = *(_QWORD *)(v1527 + 152);
              *(_QWORD *)(v1526 + 160) = *(_QWORD *)(v1527 + 160);
              *(_QWORD *)(v1526 + 168) = *(_QWORD *)(v1527 + 168);
              *(_BYTE *)(v1526 + 176) = *(_BYTE *)(v1527 + 176);
              *(_QWORD *)(v1526 + 184) = *(_QWORD *)(v1527 + 184);
              v1546 = *(_QWORD *)(v1527 + 192);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1547 = v1908;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v1546)
              {
                *(_QWORD *)(v1526 + 192) = v1546;
                *(_QWORD *)(v1526 + 200) = *(_QWORD *)(v1527 + 200);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v1526 + 192) = *(_OWORD *)(v1527 + 192);
              }
              *(_QWORD *)(v1526 + 208) = *(_QWORD *)(v1527 + 208);
              *(_QWORD *)(v1526 + 216) = *(_QWORD *)(v1527 + 216);
              *(_QWORD *)(v1526 + 224) = *(_QWORD *)(v1527 + 224);
              *(_QWORD *)(v1526 + 232) = *(_QWORD *)(v1527 + 232);
              *(_QWORD *)(v1526 + 240) = *(_QWORD *)(v1527 + 240);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1472 = v1843;
              v259 = v1798;
            }
            else
            {
              v1530 = *(_OWORD *)v1527;
              v1531 = *(_OWORD *)(v1527 + 16);
              v1532 = *(_OWORD *)(v1527 + 48);
              *(_OWORD *)(v1526 + 32) = *(_OWORD *)(v1527 + 32);
              *(_OWORD *)(v1526 + 48) = v1532;
              *(_OWORD *)v1526 = v1530;
              *(_OWORD *)(v1526 + 16) = v1531;
              v1533 = *(_OWORD *)(v1527 + 64);
              v1534 = *(_OWORD *)(v1527 + 80);
              v1535 = *(_OWORD *)(v1527 + 112);
              *(_OWORD *)(v1526 + 96) = *(_OWORD *)(v1527 + 96);
              *(_OWORD *)(v1526 + 112) = v1535;
              *(_OWORD *)(v1526 + 64) = v1533;
              *(_OWORD *)(v1526 + 80) = v1534;
              v1536 = *(_OWORD *)(v1527 + 128);
              v1537 = *(_OWORD *)(v1527 + 144);
              v1538 = *(_OWORD *)(v1527 + 176);
              *(_OWORD *)(v1526 + 160) = *(_OWORD *)(v1527 + 160);
              *(_OWORD *)(v1526 + 176) = v1538;
              *(_OWORD *)(v1526 + 128) = v1536;
              *(_OWORD *)(v1526 + 144) = v1537;
              v1539 = *(_OWORD *)(v1527 + 192);
              v1540 = *(_OWORD *)(v1527 + 208);
              v1541 = *(_OWORD *)(v1527 + 224);
              *(_QWORD *)(v1526 + 240) = *(_QWORD *)(v1527 + 240);
              *(_OWORD *)(v1526 + 208) = v1540;
              *(_OWORD *)(v1526 + 224) = v1541;
              *(_OWORD *)(v1526 + 192) = v1539;
            }
            v1710 = (_OWORD *)((v1526 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1711 = (__int128 *)((v1527 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1712 = *v1711;
            *(_OWORD *)((char *)v1710 + 9) = *(__int128 *)((char *)v1711 + 9);
            *v1710 = v1712;
            v1713 = (v1526 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1714 = (v1527 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1715 = *(_OWORD *)v1714;
            *(_BYTE *)(v1713 + 16) = *(_BYTE *)(v1714 + 16);
            *(_OWORD *)v1713 = v1715;
            v1716 = (_QWORD *)((v1526 + 311) & 0xFFFFFFFFFFFFF8);
            v1717 = (v1527 + 311) & 0xFFFFFFFFFFFFF8;
            v1718 = *(_QWORD *)v1717;
            v1717 += 15;
            *v1716 = v1718;
            v1719 = (_QWORD *)(((unint64_t)v1716 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1720 = *(_QWORD *)(v1717 & 0xFFFFFFFFFFFFFFF8);
            v1721 = *(_QWORD *)((v1717 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_23AA7F2D4(v1720, v1721);
            *v1719 = v1720;
            v1719[1] = v1721;
            v260 = v1776;
            v562 = v1845;
            v1470 = ((unint64_t)a1 + v1785) & ~v1876;
            v1471 = (unint64_t)v1915;
            if (!v1813)
              goto LABEL_1248;
LABEL_1315:
            v1722 = ((((v1814
                      + ((((((((((v1818 + v1472 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)
                      + 327) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v1723 = (void *)((v1470 + v1875 + v1722) & v1923);
            v1724 = (const void *)((v1471 + v1875 + v1722) & v1923);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1847 + 48))(v1724, 1, v562))
            {
              memcpy(v1723, v1724, v1874);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1847 + 16))(v1723, v1724, v562);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1847 + 56))(v1723, 0, 1, v562);
            }
            v1725 = (char *)(((unint64_t)v1723 + v1783) & v1851);
            v1726 = (char *)(((unint64_t)v1724 + v1783) & v1851);
            if (v1806 == v1820)
            {
              v1727 = (*(uint64_t (**)(char *))(v1827 + 48))(v1726);
            }
            else
            {
              v1728 = v1839;
              v1729 = (uint64_t *)((unint64_t)&v1726[v1839] & 0xFFFFFFFFFFFFFFF8);
              if (v1792 <= 0x7FFFFFFE)
              {
                v1730 = *v1729;
                if ((unint64_t)*v1729 >= 0xFFFFFFFF)
                  LODWORD(v1730) = -1;
                v1731 = v1773;
                if ((v1730 + 1) >= 2)
                  goto LABEL_1327;
                goto LABEL_1329;
              }
              v1727 = (*(uint64_t (**)(unint64_t))(v1829 + 48))(((unint64_t)v1729 + v1831) & v1863);
            }
            v1731 = v1773;
            v1728 = v1839;
            if (v1727)
            {
LABEL_1327:
              v1732 = v1731;
              memcpy(v1725, v1726, v1731);
LABEL_1330:
              *(_QWORD *)&v1725[v1732] = *(_QWORD *)&v1726[v1732];
              v1743 = (_QWORD *)((unint64_t)&v1725[v1732 + 15] & 0xFFFFFFFFFFFFF8);
              v1744 = (_QWORD *)((unint64_t)&v1726[v1732 + 15] & 0xFFFFFFFFFFFFFFF8);
              *v1743 = *v1744;
              v1142 = *(void **)(((unint64_t)v1744 + 15) & 0xFFFFFFFFFFFFF8);
              *(_QWORD *)(((unint64_t)v1743 + 15) & 0xFFFFFFFFFFFFF8) = v1142;
              *((_BYTE *)a1 + v259) = 1;
LABEL_1331:
              v1745 = v1142;
              goto LABEL_1336;
            }
            v1729 = (uint64_t *)((unint64_t)&v1726[v1839] & 0xFFFFFFFFFFFFFFF8);
LABEL_1329:
            v1732 = v1731;
            v1733 = v1728;
            (*(void (**)(char *, char *, uint64_t))(v1827 + 16))(v1725, v1726, v1828);
            v1734 = (_QWORD *)((unint64_t)&v1725[v1733] & 0xFFFFFFFFFFFFFFF8);
            *v1734 = *v1729;
            v1735 = ((unint64_t)v1734 + v1831) & v1863;
            v1736 = ((unint64_t)v1729 + v1831) & v1863;
            v1737 = v260;
            v1738 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1829 + 16);
            swift_bridgeObjectRetain();
            v1738(v1735, v1736, v1830);
            v260 = v1737;
            v1739 = (_QWORD *)((v1817 + v1735) & 0xFFFFFFFFFFFFF8);
            v1740 = (_QWORD *)((v1817 + v1736) & 0xFFFFFFFFFFFFF8);
            *v1739 = *v1740;
            v1741 = (_QWORD *)(((unint64_t)v1739 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1742 = (_QWORD *)(((unint64_t)v1740 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v1741 = *v1742;
            v1741[1] = v1742[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            goto LABEL_1330;
          }
          v1064 = v1819;
          v1063 = v1897;
          v1089 = (v1819 + (((unint64_t)a2 + v1785) & ~v1876)) & v1897;
          v1090 = (v1801 + v1089) & v86;
          if (v1815 == v1803)
          {
            if (v1805 == v1815)
            {
              v1061 = (*(uint64_t (**)(unint64_t))(v1825 + 48))((v1801 + v1089) & v86);
LABEL_1245:
              v1062 = v86;
              goto LABEL_1246;
            }
            v1151 = (unint64_t *)((v1832 + v1090) & 0xFFFFFFFFFFFFFFF8);
            if (v1791 > 0x7FFFFFFE)
            {
              v1061 = (*(uint64_t (**)(unint64_t))(v1822 + 48))(((unint64_t)v1151 + v1821) & v1855);
              goto LABEL_1245;
            }
            v1152 = *v1151;
          }
          else
          {
            v1115 = v1090 + v1900;
            if ((v1789 & 0x80000000) == 0)
            {
              v1062 = v86;
              v1116 = *(_QWORD *)(v1115 + 8);
              if (v1116 >= 0xFFFFFFFF)
                LODWORD(v1116) = -1;
              v1061 = v1116 + 1;
              goto LABEL_1246;
            }
            v1159 = (v1841 + ((v1902 + v1115) & v1888)) & v1871;
            if (v1813 > 0x7FFFFFFD)
            {
              v1061 = (*(uint64_t (**)(unint64_t))(v1837 + 48))(v1159);
              goto LABEL_1245;
            }
            v1152 = *(_QWORD *)(((v1786 + ((v1836 + v1159) & v1871)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v1152 >= 0xFFFFFFFF)
            LODWORD(v1152) = -1;
          v1062 = v86;
          if ((v1152 + 1) >= 2)
            goto LABEL_1247;
          goto LABEL_1250;
        case 2:
          v1065 = v90;
          v1066 = ~v37;
          v1774 = ((((v1817 + ((v37 + 8 + (v1839 & 0xFFFFFFFFFFFFFFF8)) & ~v37)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                + 16;
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v1844 + 16))(a1, a2, AssociatedTypeWitness);
          v1067 = (void *)(((unint64_t)a1 + v1812) & v1923);
          v1068 = (const void *)(((unint64_t)a2 + v1812) & v1923);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1847 + 48))(v1068, 1, v1845))
          {
            memcpy(v1067, v1068, v1874);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v1847 + 16))(v1067, v1068, v1845);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1847 + 56))(v1067, 0, 1, v1845);
          }
          v1098 = (char *)(((unint64_t)v1067 + v1783) & v1065);
          v1099 = (char *)(((unint64_t)v1068 + v1783) & v1065);
          if (v1806 == v1820)
          {
            v1100 = (*(uint64_t (**)(char *))(v1827 + 48))(v1099);
          }
          else
          {
            v1101 = (uint64_t *)((unint64_t)&v1099[v1839] & 0xFFFFFFFFFFFFFFF8);
            if (v1792 <= 0x7FFFFFFE)
            {
              v1102 = v1839;
              v1103 = *v1101;
              if ((unint64_t)*v1101 >= 0xFFFFFFFF)
                LODWORD(v1103) = -1;
              v1104 = v1774;
              if ((v1103 + 1) >= 2)
                goto LABEL_1144;
              goto LABEL_1146;
            }
            v1100 = (*(uint64_t (**)(unint64_t))(v1829 + 48))(((unint64_t)v1101 + v1831) & v1066);
          }
          v1104 = v1774;
          if (v1100)
          {
LABEL_1144:
            v1131 = v1104;
            memcpy(v1098, v1099, v1104);
            goto LABEL_1147;
          }
          v1102 = v1839;
          v1101 = (uint64_t *)((unint64_t)&v1099[v1839] & 0xFFFFFFFFFFFFFFF8);
LABEL_1146:
          v1131 = v1104;
          v1132 = v1102;
          (*(void (**)(char *, char *, uint64_t))(v1827 + 16))(v1098, v1099, v1828);
          v1133 = (_QWORD *)((unint64_t)&v1098[v1132] & 0xFFFFFFFFFFFFFFF8);
          *v1133 = *v1101;
          v1134 = ((unint64_t)v1133 + v1831) & v1066;
          v1135 = ((unint64_t)v1101 + v1831) & v1066;
          v1136 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1829 + 16);
          swift_bridgeObjectRetain();
          v1136(v1134, v1135, v1830);
          v260 = v1776;
          v1137 = (_QWORD *)((v1817 + v1134) & 0xFFFFFFFFFFFFF8);
          v1138 = (_QWORD *)((v1817 + v1135) & 0xFFFFFFFFFFFFF8);
          *v1137 = *v1138;
          v1139 = (_QWORD *)(((unint64_t)v1137 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1140 = (_QWORD *)(((unint64_t)v1138 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v1139 = *v1140;
          v1139[1] = v1140[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_1147:
          v1141 = &v1098[v1131];
          *v1141 = v1099[v1131];
          v1142 = *(void **)&v1099[v1131 + 8];
          *((_QWORD *)v1141 + 1) = v1142;
          *((_BYTE *)a1 + v1798) = 2;
          goto LABEL_1331;
        case 3:
          v1069 = v86;
          v1070 = ~v1849;
          v1872 = ~(unint64_t)v1864;
          v1071 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v1844 + 16);
          v1071(a1, a2, AssociatedTypeWitness);
          v1931 = (void *)(((unint64_t)a1 + v1785) & ~v1876);
          v1072 = (const void *)(((unint64_t)a2 + v1785) & ~v1876);
          if (v1891 == v1803)
          {
            v1073 = (*(uint64_t (**)(unint64_t))(v1844 + 48))(((unint64_t)a2 + v1785) & ~v1876);
            v1074 = v1069;
            v1075 = ~v1912;
            v1076 = v1819;
LABEL_1264:
            if (v1073)
            {
LABEL_1265:
              v1548 = ((unint64_t)a1 + v1785) & ~v1876;
              memcpy(v1931, v1072, v1899);
              v260 = v1776;
              v1549 = v1814;
              v1550 = __n;
              goto LABEL_1266;
            }
            v1091 = ((unint64_t)v1072 + v1076) & v1075;
            v1092 = (v1801 + v1091) & v1074;
LABEL_1268:
            v1552 = v1076;
            v1553 = v1074;
            ((void (*)(void *))v1071)(v1931);
            v1554 = ((unint64_t)v1931 + v1552) & v1075;
            v1071((uint64_t *)v1554, (uint64_t *)v1091, AssociatedTypeWitness);
            v1555 = (v1801 + v1554) & v1553;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1825 + 16))(v1555, v1092, v1826);
            v1556 = (_QWORD *)((v1832 + v1555) & 0xFFFFFFFFFFFFFFF8);
            v1557 = (_QWORD *)((v1832 + v1092) & 0xFFFFFFFFFFFFFFF8);
            *v1556 = *v1557;
            v1558 = ((unint64_t)v1556 + v1821) & v1855;
            v1559 = ((unint64_t)v1557 + v1821) & v1855;
            v1560 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1822 + 16);
            swift_bridgeObjectRetain();
            v1560(v1558, v1559, v1823);
            v1561 = (_QWORD *)((v1816 + v1558) & 0xFFFFFFFFFFFFF8);
            v1562 = (_QWORD *)((v1816 + v1559) & 0xFFFFFFFFFFFFF8);
            *v1561 = *v1562;
            v1563 = (_QWORD *)(((unint64_t)v1561 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1564 = (_QWORD *)(((unint64_t)v1562 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v1563 = *v1564;
            v1563[1] = v1564[1];
            v1565 = (_QWORD *)(v1555 + v1900);
            *v1565 = *(_QWORD *)(v1092 + v1900);
            v1565[1] = *(_QWORD *)(v1092 + v1900 + 8);
            v1566 = (v1902 + v1555 + v1900) & v1070;
            v1567 = (v1902 + v1092 + v1900) & v1070;
            *(_BYTE *)v1566 = *(_BYTE *)v1567;
            v1568 = v1566 | 4;
            v1569 = *(_DWORD *)(v1567 | 4);
            *(_BYTE *)(v1568 + 4) = *(_BYTE *)((v1567 | 4) + 4);
            *(_DWORD *)v1568 = v1569;
            *(_WORD *)(v1566 + 10) = *(_WORD *)(v1567 + 0xA);
            v1570 = (v1841 + v1566) & v1872;
            v1571 = (v1841 + v1567) & v1872;
            v1572 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1572(v1570, v1571, v1838);
            v1573 = (v1836 + v1570) & v1872;
            v1574 = (v1836 + v1571) & v1872;
            v1572(v1573, v1574, v1838);
            v1575 = (_BYTE *)(v1573 + v1843);
            *v1575 = *(_BYTE *)(v1574 + v1843);
            v1575[1] = *(_BYTE *)(v1574 + v1843 + 1);
            v1575[2] = *(_BYTE *)(v1574 + v1843 + 2);
            v1575[3] = *(_BYTE *)(v1574 + v1843 + 3);
            v1575[4] = *(_BYTE *)(v1574 + v1843 + 4);
            v1576 = (v1573 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
            v1577 = (v1574 + v1843 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1576 = *(_QWORD *)v1577;
            *(_QWORD *)(v1576 + 8) = *(_QWORD *)(v1577 + 8);
            *(_BYTE *)(v1576 + 16) = *(_BYTE *)(v1577 + 16);
            *(_BYTE *)(v1576 + 17) = *(_BYTE *)(v1577 + 17);
            *(_BYTE *)(v1576 + 18) = *(_BYTE *)(v1577 + 18);
            *(_BYTE *)(v1576 + 19) = *(_BYTE *)(v1577 + 19);
            v1578 = (v1576 + 27) & 0xFFFFFFFFFFFFFFF8;
            v1579 = (v1577 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1578 = *(_QWORD *)v1579;
            *(_BYTE *)(v1578 + 8) = *(_BYTE *)(v1579 + 8);
            *(_BYTE *)(v1578 + 9) = *(_BYTE *)(v1579 + 9);
            *(_BYTE *)(v1578 + 10) = *(_BYTE *)(v1579 + 10);
            *(_BYTE *)(v1578 + 11) = *(_BYTE *)(v1579 + 11);
            *(_BYTE *)(v1578 + 12) = *(_BYTE *)(v1579 + 12);
            v1580 = (_QWORD *)((v1576 + 47) & 0xFFFFFFFFFFFFF8);
            v1581 = (_QWORD *)((v1577 + 47) & 0xFFFFFFFFFFFFF8);
            *v1580 = *v1581;
            v1582 = ((unint64_t)v1580 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1583 = ((unint64_t)v1581 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1582 = *(_QWORD *)v1583;
            *(_BYTE *)(v1582 + 8) = *(_BYTE *)(v1583 + 8);
            *(_BYTE *)(v1582 + 9) = *(_BYTE *)(v1583 + 9);
            v1584 = (void *)((v1834 + v1582) & v1872);
            v1585 = (const void *)((v1834 + v1583) & v1872);
            v1586 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1837 + 48);
            swift_bridgeObjectRetain();
            if (v1586(v1585, 1, v1838))
            {
              memcpy(v1584, v1585, __n);
            }
            else
            {
              v1572((unint64_t)v1584, (unint64_t)v1585, v1838);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1837 + 56))(v1584, 0, 1, v1838);
            }
            v1587 = (_QWORD *)(((unint64_t)v1584 + v1835) & 0xFFFFFFFFFFFFFFF8);
            v1588 = (_QWORD *)(((unint64_t)v1585 + v1835) & 0xFFFFFFFFFFFFFFF8);
            *v1587 = *v1588;
            v1589 = ((unint64_t)v1587 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1590 = ((unint64_t)v1588 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1591 = *(_QWORD *)v1590;
            *(_BYTE *)(v1589 + 8) = *(_BYTE *)(v1590 + 8);
            *(_QWORD *)v1589 = v1591;
            v1592 = (_QWORD *)(((unint64_t)v1587 + 31) & 0xFFFFFFFFFFFFF8);
            v1593 = (_QWORD *)(((unint64_t)v1588 + 31) & 0xFFFFFFFFFFFFF8);
            *v1592 = *v1593;
            v1594 = ((unint64_t)v1592 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1595 = (uint64_t *)(((unint64_t)v1593 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1596 = v1595[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((v1596 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)v1594 = *(_OWORD *)v1595;
            }
            else
            {
              v1597 = *v1595;
              sub_23AAAE668(*v1595, v1596);
              *(_QWORD *)v1594 = v1597;
              *(_QWORD *)(v1594 + 8) = v1596;
            }
            v1598 = (v1594 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1599 = ((unint64_t)v1595 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1600 = *(_QWORD *)v1599;
            *(_BYTE *)(v1598 + 8) = *(_BYTE *)(v1599 + 8);
            *(_QWORD *)v1598 = v1600;
            *(_BYTE *)(v1598 + 9) = *(_BYTE *)(v1599 + 9);
            v1601 = (v1598 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v1602 = (v1599 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v1603 = *(_DWORD *)v1602;
            *(_BYTE *)(v1601 + 4) = *(_BYTE *)(v1602 + 4);
            *(_DWORD *)v1601 = v1603;
            v1604 = (_QWORD *)((v1598 + 25) & 0xFFFFFFFFFFFFFFF8);
            v1605 = (_QWORD *)((v1599 + 25) & 0xFFFFFFFFFFFFFFF8);
            *v1604 = *v1605;
            v1604[1] = v1605[1];
            v1606 = v1901 + v1566;
            v1607 = v1901 + v1567;
            v1608 = *(_QWORD *)(v1901 + v1567 + 16);
            if (v1608 >= 0xFFFFFFFF)
              LODWORD(v1608) = -1;
            v1609 = v1608 - 1;
            swift_bridgeObjectRetain();
            if (v1609 < 0)
            {
              *(_QWORD *)v1606 = *(_QWORD *)v1607;
              *(_BYTE *)(v1606 + 8) = *(_BYTE *)(v1607 + 8);
              *(_BYTE *)(v1606 + 9) = *(_BYTE *)(v1607 + 9);
              v1622 = *(void **)(v1607 + 16);
              v1623 = v1622;
              *(_QWORD *)(v1606 + 16) = v1622;
              v1624 = *(void **)(v1607 + 24);
              v1625 = v1624;
              *(_QWORD *)(v1606 + 24) = v1624;
              *(_BYTE *)(v1606 + 32) = *(_BYTE *)(v1607 + 32);
              *(_BYTE *)(v1606 + 33) = *(_BYTE *)(v1607 + 33);
              *(_BYTE *)(v1606 + 34) = *(_BYTE *)(v1607 + 34);
              *(_QWORD *)(v1606 + 40) = *(_QWORD *)(v1607 + 40);
              *(_QWORD *)(v1606 + 48) = *(_QWORD *)(v1607 + 48);
              *(_QWORD *)(v1606 + 56) = *(_QWORD *)(v1607 + 56);
              *(_QWORD *)(v1606 + 64) = *(_QWORD *)(v1607 + 64);
              *(_BYTE *)(v1606 + 72) = *(_BYTE *)(v1607 + 72);
              *(_QWORD *)(v1606 + 80) = *(_QWORD *)(v1607 + 80);
              *(_QWORD *)(v1606 + 88) = *(_QWORD *)(v1607 + 88);
              v1917 = *(void **)(v1607 + 96);
              *(_QWORD *)(v1606 + 96) = v1917;
              *(_BYTE *)(v1606 + 104) = *(_BYTE *)(v1607 + 104);
              *(_BYTE *)(v1606 + 105) = *(_BYTE *)(v1607 + 105);
              *(_QWORD *)(v1606 + 112) = *(_QWORD *)(v1607 + 112);
              *(_QWORD *)(v1606 + 120) = *(_QWORD *)(v1607 + 120);
              *(_QWORD *)(v1606 + 128) = *(_QWORD *)(v1607 + 128);
              *(_QWORD *)(v1606 + 136) = *(_QWORD *)(v1607 + 136);
              *(_QWORD *)(v1606 + 144) = *(_QWORD *)(v1607 + 144);
              *(_QWORD *)(v1606 + 152) = *(_QWORD *)(v1607 + 152);
              *(_QWORD *)(v1606 + 160) = *(_QWORD *)(v1607 + 160);
              *(_QWORD *)(v1606 + 168) = *(_QWORD *)(v1607 + 168);
              *(_BYTE *)(v1606 + 176) = *(_BYTE *)(v1607 + 176);
              *(_QWORD *)(v1606 + 184) = *(_QWORD *)(v1607 + 184);
              v1626 = *(_QWORD *)(v1607 + 192);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1627 = v1917;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v1626)
              {
                *(_QWORD *)(v1606 + 192) = v1626;
                *(_QWORD *)(v1606 + 200) = *(_QWORD *)(v1607 + 200);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v1606 + 192) = *(_OWORD *)(v1607 + 192);
              }
              *(_QWORD *)(v1606 + 208) = *(_QWORD *)(v1607 + 208);
              *(_QWORD *)(v1606 + 216) = *(_QWORD *)(v1607 + 216);
              *(_QWORD *)(v1606 + 224) = *(_QWORD *)(v1607 + 224);
              *(_QWORD *)(v1606 + 232) = *(_QWORD *)(v1607 + 232);
              *(_QWORD *)(v1606 + 240) = *(_QWORD *)(v1607 + 240);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v260 = v1776;
              v1550 = __n;
              v259 = v1798;
            }
            else
            {
              v1610 = *(_OWORD *)v1607;
              v1611 = *(_OWORD *)(v1607 + 16);
              v1612 = *(_OWORD *)(v1607 + 48);
              *(_OWORD *)(v1606 + 32) = *(_OWORD *)(v1607 + 32);
              *(_OWORD *)(v1606 + 48) = v1612;
              *(_OWORD *)v1606 = v1610;
              *(_OWORD *)(v1606 + 16) = v1611;
              v1613 = *(_OWORD *)(v1607 + 64);
              v1614 = *(_OWORD *)(v1607 + 80);
              v1615 = *(_OWORD *)(v1607 + 112);
              *(_OWORD *)(v1606 + 96) = *(_OWORD *)(v1607 + 96);
              *(_OWORD *)(v1606 + 112) = v1615;
              *(_OWORD *)(v1606 + 64) = v1613;
              *(_OWORD *)(v1606 + 80) = v1614;
              v1616 = *(_OWORD *)(v1607 + 128);
              v1617 = *(_OWORD *)(v1607 + 144);
              v1618 = *(_OWORD *)(v1607 + 176);
              *(_OWORD *)(v1606 + 160) = *(_OWORD *)(v1607 + 160);
              *(_OWORD *)(v1606 + 176) = v1618;
              *(_OWORD *)(v1606 + 128) = v1616;
              *(_OWORD *)(v1606 + 144) = v1617;
              v1619 = *(_OWORD *)(v1607 + 192);
              v1620 = *(_OWORD *)(v1607 + 208);
              v1621 = *(_OWORD *)(v1607 + 224);
              *(_QWORD *)(v1606 + 240) = *(_QWORD *)(v1607 + 240);
              *(_OWORD *)(v1606 + 208) = v1620;
              *(_OWORD *)(v1606 + 224) = v1621;
              *(_OWORD *)(v1606 + 192) = v1619;
              v260 = v1776;
              v1550 = __n;
            }
            v1746 = (_OWORD *)((v1606 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1747 = (__int128 *)((v1607 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1748 = *v1747;
            *(_OWORD *)((char *)v1746 + 9) = *(__int128 *)((char *)v1747 + 9);
            *v1746 = v1748;
            v1749 = (v1606 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1750 = (v1607 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1751 = *(_OWORD *)v1750;
            *(_BYTE *)(v1749 + 16) = *(_BYTE *)(v1750 + 16);
            *(_OWORD *)v1749 = v1751;
            v1752 = (_QWORD *)((v1606 + 311) & 0xFFFFFFFFFFFFF8);
            v1753 = (v1607 + 311) & 0xFFFFFFFFFFFFF8;
            v1754 = *(_QWORD *)v1753;
            v1753 += 15;
            *v1752 = v1754;
            v1755 = (_QWORD *)(((unint64_t)v1752 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1756 = *(_QWORD *)(v1753 & 0xFFFFFFFFFFFFFFF8);
            v1757 = *(_QWORD *)((v1753 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_23AA7F2D4(v1756, v1757);
            *v1755 = v1756;
            v1755[1] = v1757;
            v1551 = v1843;
            v1549 = v1814;
            v1072 = (const void *)(((unint64_t)a2 + v1785) & ~v1876);
            v1548 = ((unint64_t)a1 + v1785) & ~v1876;
            if (v1813)
            {
LABEL_1335:
              v1758 = ((((v1549
                        + ((((((((((v1818 + v1551 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1759 = (_QWORD *)((v1548 + v1758) & 0xFFFFFFFFFFFFFFF8);
              v1760 = (_QWORD *)(((unint64_t)v1072 + v1758) & 0xFFFFFFFFFFFFFFF8);
              *v1759 = *v1760;
              v1759[1] = v1760[1];
              *(_QWORD *)(((unint64_t)v1759 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1760
                                                                                            + 23) & 0xFFFFFFFFFFFFF8);
              *((_BYTE *)a1 + v259) = 3;
              swift_bridgeObjectRetain();
              goto LABEL_1336;
            }
LABEL_1266:
            v1551 = v1550;
            goto LABEL_1335;
          }
          v1076 = v1819;
          v1075 = ~v1912;
          v1091 = ((unint64_t)v1072 + v1819) & v1897;
          v1092 = (v1801 + v1091) & v1069;
          if (v1815 == v1803)
          {
            if (v1805 == v1815)
            {
              v1073 = (*(uint64_t (**)(unint64_t))(v1825 + 48))((v1801 + v1091) & v1069);
LABEL_1263:
              v1074 = v1069;
              goto LABEL_1264;
            }
            v1153 = (unint64_t *)((v1832 + v1092) & 0xFFFFFFFFFFFFFFF8);
            if (v1791 > 0x7FFFFFFE)
            {
              v1073 = (*(uint64_t (**)(unint64_t))(v1822 + 48))(((unint64_t)v1153 + v1821) & v1855);
              goto LABEL_1263;
            }
            v1154 = *v1153;
          }
          else
          {
            v1117 = v1092 + v1900;
            if ((v1789 & 0x80000000) == 0)
            {
              v1074 = v1069;
              v1118 = *(_QWORD *)(v1117 + 8);
              if (v1118 >= 0xFFFFFFFF)
                LODWORD(v1118) = -1;
              v1073 = v1118 + 1;
              goto LABEL_1264;
            }
            v1160 = (v1841 + ((v1902 + v1117) & v1070)) & v1872;
            if (v1813 > 0x7FFFFFFD)
            {
              v1073 = (*(uint64_t (**)(unint64_t))(v1837 + 48))(v1160);
              goto LABEL_1263;
            }
            v1154 = *(_QWORD *)(((v1786 + ((v1836 + v1160) & v1872)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v1154 >= 0xFFFFFFFF)
            LODWORD(v1154) = -1;
          v1074 = v1069;
          if ((v1154 + 1) >= 2)
            goto LABEL_1265;
          goto LABEL_1268;
        case 4:
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v1844 + 16))(a1, a2, AssociatedTypeWitness);
          v1077 = 0;
          *((_BYTE *)a1 + v1798) = 4;
          goto LABEL_1337;
        case 5:
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v1844 + 16))(a1, a2, AssociatedTypeWitness);
          v1077 = 0;
          *((_BYTE *)a1 + v1798) = 5;
          goto LABEL_1337;
        case 6:
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v1844 + 16))(a1, a2, AssociatedTypeWitness);
          v1078 = (void *)(((unint64_t)a1 + v1781) & v1051);
          v1079 = (const void *)(((unint64_t)a2 + v1781) & v1051);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v49 + 48))(v1079, 1, v1884))
          {
            memcpy(v1078, v1079, v1778);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v49 + 16))(v1078, v1079, v1884);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v1078, 0, 1, v1884);
          }
          v1077 = 0;
          *((_BYTE *)a1 + v1798) = 6;
          goto LABEL_1337;
        case 7:
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v1844 + 16))(a1, a2, AssociatedTypeWitness);
          v1077 = 0;
          *((_BYTE *)a1 + v1798) = 7;
          goto LABEL_1337;
        default:
          if (v1798 <= 3)
            v561 = v1798;
          else
            v561 = 4;
          __asm { BR              X13 }
          return result;
      }
    case 0x1Cu:
      v219 = *((unsigned __int8 *)a2 + v1881);
      if (v219 >= 2)
      {
        if (v1881 <= 3)
          v220 = v1881;
        else
          v220 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v563 = v219 == 1;
      if (v219 == 1)
        v564 = v1847;
      else
        v564 = v1844;
      if (v219 == 1)
        v565 = v1845;
      else
        v565 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v564 + 16))(a1, a2, v565);
      *((_BYTE *)a1 + v1881) = v563;
      *((_BYTE *)a1 + v1909) = *((_BYTE *)a2 + v1909);
      if (v1776 > 3)
        goto LABEL_672;
      v566 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v566 > 0xFFD8)
      {
        v254 = 28;
        goto LABEL_804;
      }
      if (v566 <= 0xD8)
      {
LABEL_672:
        v207 = 28;
        goto LABEL_798;
      }
      LOWORD(v254) = 28;
      goto LABEL_802;
    case 0x1Du:
      v221 = *((unsigned __int8 *)a2 + v1881);
      if (v221 >= 2)
      {
        if (v1881 <= 3)
          v222 = v1881;
        else
          v222 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v567 = v221 == 1;
      if (v221 == 1)
        v568 = v1847;
      else
        v568 = v1844;
      if (v221 == 1)
        v569 = v1845;
      else
        v569 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v568 + 16))(a1, a2, v569);
      *((_BYTE *)a1 + v1881) = v567;
      if (v1776 > 3)
        goto LABEL_684;
      v570 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v570 > 0xFFD8)
      {
        v254 = 29;
        goto LABEL_804;
      }
      if (v570 <= 0xD8)
      {
LABEL_684:
        v207 = 29;
        goto LABEL_798;
      }
      LOWORD(v254) = 29;
      goto LABEL_802;
    case 0x1Eu:
      v223 = *((unsigned __int8 *)a2 + v1881);
      if (v223 >= 2)
      {
        if (v1881 <= 3)
          v224 = v1881;
        else
          v224 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v571 = v223 == 1;
      if (v223 == 1)
        v572 = v1847;
      else
        v572 = v1844;
      if (v223 == 1)
        v573 = v1845;
      else
        v573 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v572 + 16))(a1, a2, v573);
      *((_BYTE *)a1 + v1881) = v571;
      if (v1776 > 3)
        goto LABEL_696;
      v574 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v574 > 0xFFD8)
      {
        v254 = 30;
        goto LABEL_804;
      }
      if (v574 <= 0xD8)
      {
LABEL_696:
        v207 = 30;
        goto LABEL_798;
      }
      LOWORD(v254) = 30;
      goto LABEL_802;
    case 0x1Fu:
      v225 = *((unsigned __int8 *)a2 + v1881);
      if (v225 >= 2)
      {
        if (v1881 <= 3)
          v226 = v1881;
        else
          v226 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v261 = ~v1882;
      v575 = v225 == 1;
      if (v225 == 1)
        v576 = v1847;
      else
        v576 = v1844;
      if (v225 == 1)
        v577 = v1845;
      else
        v577 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v576 + 16))(a1, a2, v577);
      *((_BYTE *)a1 + v1881) = v575;
      v578 = ((unint64_t)a1 + v1840) & v261;
      v579 = *(unsigned __int8 *)((((unint64_t)a2 + v1840) & v261) + v1881);
      if (v579 >= 2)
      {
        if (v1881 <= 3)
          v580 = v1881;
        else
          v580 = 4;
        __asm { BR              X12 }
      }
      v608 = v579 == 1;
      if (v579 == 1)
        v609 = v1847;
      else
        v609 = v1844;
      (*(void (**)(unint64_t))(v609 + 16))(v578);
      *(_BYTE *)(v578 + v1881) = v608;
      if (v1776 > 3)
        goto LABEL_797;
      v610 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v610 > 0xFFD8)
      {
        v254 = 31;
        goto LABEL_804;
      }
      if (v610 <= 0xD8)
      {
LABEL_797:
        v207 = 31;
        goto LABEL_798;
      }
      LOWORD(v254) = 31;
      goto LABEL_802;
    case 0x20u:
      v227 = *((unsigned __int8 *)a2 + v1881);
      if (v227 >= 2)
      {
        if (v1881 <= 3)
          v228 = v1881;
        else
          v228 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v581 = v227 == 1;
      if (v227 == 1)
        v582 = v1847;
      else
        v582 = v1844;
      if (v227 == 1)
        v583 = v1845;
      else
        v583 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v582 + 16))(a1, a2, v583);
      *((_BYTE *)a1 + v1881) = v581;
      if (v1776 > 3)
        goto LABEL_719;
      v584 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v584 > 0xFFD8)
      {
        v254 = 32;
        goto LABEL_804;
      }
      if (v584 <= 0xD8)
      {
LABEL_719:
        v207 = 32;
        goto LABEL_798;
      }
      LOWORD(v254) = 32;
      goto LABEL_802;
    case 0x21u:
      v229 = *((unsigned __int8 *)a2 + v1881);
      if (v229 >= 2)
      {
        if (v1881 <= 3)
          v230 = v1881;
        else
          v230 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v585 = v229 == 1;
      if (v229 == 1)
        v586 = v1847;
      else
        v586 = v1844;
      if (v229 == 1)
        v587 = v1845;
      else
        v587 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v586 + 16))(a1, a2, v587);
      *((_BYTE *)a1 + v1881) = v585;
      if (v1776 > 3)
        goto LABEL_731;
      v588 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v588 > 0xFFD8)
      {
        v254 = 33;
        goto LABEL_804;
      }
      if (v588 <= 0xD8)
      {
LABEL_731:
        v207 = 33;
        goto LABEL_798;
      }
      LOWORD(v254) = 33;
      goto LABEL_802;
    case 0x22u:
      v231 = *((unsigned __int8 *)a2 + v1881);
      if (v231 >= 2)
      {
        if (v1881 <= 3)
          v232 = v1881;
        else
          v232 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v589 = v231 == 1;
      if (v231 == 1)
        v590 = v1847;
      else
        v590 = v1844;
      if (v231 == 1)
        v591 = v1845;
      else
        v591 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v590 + 16))(a1, a2, v591);
      *((_BYTE *)a1 + v1881) = v589;
      if (v1776 > 3)
        goto LABEL_743;
      v592 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v592 > 0xFFD8)
      {
        v254 = 34;
        goto LABEL_804;
      }
      if (v592 <= 0xD8)
      {
LABEL_743:
        v207 = 34;
        goto LABEL_798;
      }
      LOWORD(v254) = 34;
      goto LABEL_802;
    case 0x23u:
      v233 = *((unsigned __int8 *)a2 + v1881);
      if (v233 >= 2)
      {
        if (v1881 <= 3)
          v234 = v1881;
        else
          v234 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v593 = v233 == 1;
      if (v233 == 1)
        v594 = v1847;
      else
        v594 = v1844;
      if (v233 == 1)
        v595 = v1845;
      else
        v595 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v594 + 16))(a1, a2, v595);
      *((_BYTE *)a1 + v1881) = v593;
      if (v1776 > 3)
        goto LABEL_755;
      v596 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v596 > 0xFFD8)
      {
        v254 = 35;
        goto LABEL_804;
      }
      if (v596 <= 0xD8)
      {
LABEL_755:
        v207 = 35;
        goto LABEL_798;
      }
      LOWORD(v254) = 35;
      goto LABEL_802;
    case 0x24u:
      v235 = ~v38;
      v236 = ~(unint64_t)v1853;
      v1859 = ~v37;
      v1769 = ((((v1817 + ((v37 + 8 + (v1839 & 0xFFFFFFFFFFFFFFF8)) & ~v37)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v1844 + 48))(a2, 1, AssociatedTypeWitness))
      {
        v237 = v1797;
        memcpy(a1, a2, v1797);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v1844 + 16))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v1844 + 56))(a1, 0, 1, AssociatedTypeWitness);
        v237 = v1797;
      }
      v263 = (_QWORD *)(((unint64_t)a1 + v237 + 7) & 0xFFFFFFFFFFFFF8);
      v264 = (_QWORD *)(((unint64_t)a2 + v237 + 7) & 0xFFFFFFFFFFFFFFF8);
      *v263 = *v264;
      v265 = ((unint64_t)v263 + 15) & 0xFFFFFFFFFFFFFFF8;
      v266 = ((unint64_t)v264 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v265 = *(_QWORD *)v266;
      *(_BYTE *)(v265 + 8) = *(_BYTE *)(v266 + 8);
      v267 = (void *)((v265 + v1922 + 9) & v86);
      v268 = (const void *)((v266 + v1922 + 9) & v86);
      if (v1805 == v1815)
      {
        v269 = (*(uint64_t (**)(unint64_t))(v1825 + 48))((v266 + v1922 + 9) & v86);
        v270 = v1847;
      }
      else
      {
        v271 = (uint64_t *)(((unint64_t)v268 + v1832) & 0xFFFFFFFFFFFFFFF8);
        v270 = v1847;
        if (v1791 <= 0x7FFFFFFE)
        {
          v272 = *v271;
          if ((unint64_t)*v271 >= 0xFFFFFFFF)
            LODWORD(v272) = -1;
          if ((v272 + 1) >= 2)
            goto LABEL_394;
          goto LABEL_396;
        }
        v269 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v1822 + 48))(((unint64_t)v271 + v1821) & v236, v1787, v1823);
      }
      if (v269)
      {
LABEL_394:
        v360 = ((((v1816
                 + ((v1853 + 8 + (v1832 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v1853)) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        memcpy(v267, v268, v1900);
        goto LABEL_397;
      }
      v271 = (uint64_t *)(((unint64_t)v268 + v1832) & 0xFFFFFFFFFFFFFFF8);
LABEL_396:
      (*(void (**)(void *, const void *, uint64_t))(v1825 + 16))(v267, v268, v1826);
      v361 = (_QWORD *)(((unint64_t)v267 + v1832) & 0xFFFFFFFFFFFFFFF8);
      *v361 = *v271;
      v362 = ((unint64_t)v361 + v1821) & v236;
      v363 = ((unint64_t)v271 + v1821) & v236;
      v364 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1822 + 16);
      swift_bridgeObjectRetain();
      v364(v362, v363, v1823);
      v365 = (_QWORD *)((v1816 + v362) & 0xFFFFFFFFFFFFF8);
      v366 = (_QWORD *)((v1816 + v363) & 0xFFFFFFFFFFFFF8);
      *v365 = *v366;
      v367 = (_QWORD *)(((unint64_t)v365 + 15) & 0xFFFFFFFFFFFFFFF8);
      v368 = (_QWORD *)(((unint64_t)v366 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v367 = *v368;
      v367[1] = v368[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v360 = ((((v1816
               + ((v1853 + 8 + (v1832 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v1853)) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16;
LABEL_397:
      v369 = (uint64_t)v268 + v360 + 10;
      v370 = (uint64_t)v268 + v360 + 34;
      *((_BYTE *)v267 + v360) = *((_BYTE *)v268 + v360);
      v371 = (uint64_t)v267 + v360 + 34;
      *(_BYTE *)(((unint64_t)v267 + v360) | 1) = *(_BYTE *)(((unint64_t)v268 + v360) | 1);
      v372 = ~(v38 | v1875);
      *(_BYTE *)(((unint64_t)v267 + v360) | 2) = *(_BYTE *)(((unint64_t)v268 + v360) | 2);
      v373 = ((unint64_t)v267 + v360 + 10) & 0xFFFFFFFFFFFFFFF8;
      v374 = *(void **)(v369 & 0xFFFFFFFFFFFFFFF8);
      v375 = *(void **)((v369 & 0xFFFFFFFFFFFFFFF8) + 8);
      v376 = *(_BYTE *)((v369 & 0xFFFFFFFFFFFFFFF8) + 16);
      sub_23AAAE478(v374, v375, v376);
      *(_QWORD *)v373 = v374;
      *(_QWORD *)(v373 + 8) = v375;
      *(_BYTE *)(v373 + 16) = v376;
      v377 = v371 & 0xFFFFFFFFFFFFFFF8;
      v378 = v370 & 0xFFFFFFFFFFFFFFF8;
      v379 = *(_QWORD *)(v378 + 16) >> 60;
      if (!(4 * (v379 & 3)) || ((v379 >> 2) & 0xFFFFFFF3 | (4 * (v379 & 3))) == 0xF)
      {
        v385 = (uint64_t *)(v378 + 8);
        *(_QWORD *)v377 = *(_QWORD *)v378;
        v386 = *(_QWORD *)(v378 + 16);
        v383 = v1845;
        if (v386 >> 60 == 15)
        {
          *(_OWORD *)(v377 + 8) = *(_OWORD *)v385;
        }
        else
        {
          v387 = *v385;
          sub_23AAAE668(*v385, *(_QWORD *)(v378 + 16));
          *(_QWORD *)(v377 + 8) = v387;
          *(_QWORD *)(v377 + 16) = v386;
        }
        v384 = v1793;
        v388 = *(_OWORD *)(v378 + 24);
        *(_BYTE *)(v377 + 40) = *(_BYTE *)(v378 + 40);
        *(_OWORD *)(v377 + 24) = v388;
        *(_QWORD *)(v377 + 48) = *(_QWORD *)(v378 + 48);
      }
      else
      {
        v380 = *(_OWORD *)v378;
        v381 = *(_OWORD *)(v378 + 16);
        v382 = *(_OWORD *)(v378 + 32);
        *(_QWORD *)(v377 + 48) = *(_QWORD *)(v378 + 48);
        *(_OWORD *)(v377 + 16) = v381;
        *(_OWORD *)(v377 + 32) = v382;
        *(_OWORD *)v377 = v380;
        v383 = v1845;
        v384 = v1793;
      }
      v389 = (void **)((v378 + 63) & 0xFFFFFFFFFFFFFFF8);
      v390 = *v389;
      v391 = (_QWORD *)((v377 + 63) & 0xFFFFFFFFFFFFF8);
      *v391 = *v389;
      *(_QWORD *)(((unint64_t)v391 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v389 + 15) & 0xFFFFFFFFFFFFF8);
      v392 = (void *)(((unint64_t)a1 + v384) & v372);
      v393 = (const void *)(((unint64_t)a2 + v384) & v372);
      v394 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v270 + 48);
      v395 = v390;
      if (v394(v393, 1, v383))
      {
        memcpy(v392, v393, v1874);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v270 + 16))(v392, v393, v383);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v270 + 56))(v392, 0, 1, v383);
      }
      v396 = (_QWORD *)(((unint64_t)v392 + v1795) & 0xFFFFFFFFFFFFF8);
      v397 = (_QWORD *)(((unint64_t)v393 + v1795) & 0xFFFFFFFFFFFFFFF8);
      *v396 = *v397;
      v398 = ((unint64_t)v396 + 15) & 0xFFFFFFFFFFFFFFF8;
      v399 = ((unint64_t)v397 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v398 = *(_QWORD *)v399;
      *(_BYTE *)(v398 + 8) = *(_BYTE *)(v399 + 8);
      v400 = (void *)((v1796 + v398) & v235);
      v401 = (const void *)((v1796 + v399) & v235);
      if (v1806 == v1820)
      {
        v402 = (*(uint64_t (**)(unint64_t))(v1827 + 48))((v1796 + v399) & v235);
      }
      else
      {
        v403 = v1839;
        v404 = (uint64_t *)(((unint64_t)v401 + v1839) & 0xFFFFFFFFFFFFFFF8);
        if (v1792 <= 0x7FFFFFFE)
        {
          v405 = *v404;
          if ((unint64_t)*v404 >= 0xFFFFFFFF)
            LODWORD(v405) = -1;
          v406 = v1769;
          if ((v405 + 1) >= 2)
            goto LABEL_416;
          goto LABEL_418;
        }
        v402 = (*(uint64_t (**)(unint64_t))(v1829 + 48))(((unint64_t)v404 + v1831) & v1859);
      }
      v406 = v1769;
      v403 = v1839;
      if (v402)
      {
LABEL_416:
        v407 = v406;
        memcpy(v400, v401, v406);
        goto LABEL_419;
      }
      v404 = (uint64_t *)(((unint64_t)v401 + v1839) & 0xFFFFFFFFFFFFFFF8);
LABEL_418:
      v407 = v406;
      v408 = v403;
      (*(void (**)(void *, const void *, uint64_t))(v1827 + 16))(v400, v401, v1828);
      v409 = (_QWORD *)(((unint64_t)v400 + v408) & 0xFFFFFFFFFFFFFFF8);
      *v409 = *v404;
      v410 = ((unint64_t)v409 + v1831) & v1859;
      v411 = ((unint64_t)v404 + v1831) & v1859;
      v412 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1829 + 16);
      swift_bridgeObjectRetain();
      v412(v410, v411, v1830);
      v413 = (_QWORD *)((v1817 + v410) & 0xFFFFFFFFFFFFF8);
      v414 = (_QWORD *)((v1817 + v411) & 0xFFFFFFFFFFFFF8);
      *v413 = *v414;
      v415 = (_QWORD *)(((unint64_t)v413 + 15) & 0xFFFFFFFFFFFFFFF8);
      v416 = (_QWORD *)(((unint64_t)v414 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v415 = *v416;
      v415[1] = v416[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_419:
      v417 = (uint64_t)v401 + v407 + 10;
      v418 = (uint64_t)v401 + v407 + 34;
      *((_BYTE *)v400 + v407) = *((_BYTE *)v401 + v407);
      v419 = (uint64_t)v400 + v407 + 34;
      *(_BYTE *)(((unint64_t)v400 + v407) | 1) = *(_BYTE *)(((unint64_t)v401 + v407) | 1);
      *(_BYTE *)(((unint64_t)v400 + v407) | 2) = *(_BYTE *)(((unint64_t)v401 + v407) | 2);
      v420 = ((unint64_t)v400 + v407 + 10) & 0xFFFFFFFFFFFFFFF8;
      v421 = *(void **)(v417 & 0xFFFFFFFFFFFFFFF8);
      v422 = *(void **)((v417 & 0xFFFFFFFFFFFFFFF8) + 8);
      v423 = *(_BYTE *)((v417 & 0xFFFFFFFFFFFFFFF8) + 16);
      sub_23AAAE478(v421, v422, v423);
      *(_QWORD *)v420 = v421;
      *(_QWORD *)(v420 + 8) = v422;
      *(_BYTE *)(v420 + 16) = v423;
      v424 = v419 & 0xFFFFFFFFFFFFFFF8;
      v425 = v418 & 0xFFFFFFFFFFFFFFF8;
      v426 = *(_QWORD *)(v425 + 16) >> 60;
      if (!(4 * (v426 & 3)) || ((v426 >> 2) & 0xFFFFFFF3 | (4 * (v426 & 3))) == 0xF)
      {
        v431 = (uint64_t *)(v425 + 8);
        *(_QWORD *)v424 = *(_QWORD *)v425;
        v432 = *(_QWORD *)(v425 + 16);
        if (v432 >> 60 == 15)
        {
          *(_OWORD *)(v424 + 8) = *(_OWORD *)v431;
        }
        else
        {
          v433 = *v431;
          sub_23AAAE668(*v431, *(_QWORD *)(v425 + 16));
          *(_QWORD *)(v424 + 8) = v433;
          *(_QWORD *)(v424 + 16) = v432;
        }
        v430 = v1794;
        v434 = *(_OWORD *)(v425 + 24);
        *(_BYTE *)(v424 + 40) = *(_BYTE *)(v425 + 40);
        *(_OWORD *)(v424 + 24) = v434;
        *(_QWORD *)(v424 + 48) = *(_QWORD *)(v425 + 48);
      }
      else
      {
        v427 = *(_OWORD *)v425;
        v428 = *(_OWORD *)(v425 + 16);
        v429 = *(_OWORD *)(v425 + 32);
        *(_QWORD *)(v424 + 48) = *(_QWORD *)(v425 + 48);
        *(_OWORD *)(v424 + 16) = v428;
        *(_OWORD *)(v424 + 32) = v429;
        *(_OWORD *)v424 = v427;
        v430 = v1794;
      }
      v435 = (_QWORD *)((v424 + 63) & 0xFFFFFFFFFFFFF8);
      v436 = (void **)((v425 + 63) & 0xFFFFFFFFFFFFFFF8);
      v437 = *v436;
      *v435 = *v436;
      *(_QWORD *)(((unint64_t)v435 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v436 + 15) & 0xFFFFFFFFFFFFF8);
      *((_BYTE *)v392 + v430) = *((_BYTE *)v393 + v430);
      v438 = ((unint64_t)v392 + v430) & 0xFFFFFFFFFFFFFFF8;
      v439 = ((unint64_t)v393 + v430) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v438 + 8) = *(_QWORD *)(v439 + 8);
      v440 = (_OWORD *)((v438 + 23) & 0xFFFFFFFFFFFFFFF8);
      v441 = (_OWORD *)((v439 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v440 = *v441;
      v442 = ((unint64_t)v440 + 23) & 0xFFFFFFFFFFFFFFF8;
      v443 = ((unint64_t)v441 + 23) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v442 = *(_QWORD *)v443;
      *(_BYTE *)(v442 + 8) = *(_BYTE *)(v443 + 8);
      *(_QWORD *)(((unint64_t)v440 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v441 + 39) & 0xFFFFFFFFFFFFF8);
      v444 = v437;
      swift_bridgeObjectRetain();
      if (v1776 > 3)
        goto LABEL_427;
      v445 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v445 > 0xFFD8)
      {
        *(_DWORD *)((char *)a1 + v1776) = 36;
        return a1;
      }
      if (v445 <= 0xD8)
LABEL_427:
        *((_BYTE *)a1 + v1776) = 36;
      else
        *(_WORD *)((char *)a1 + v1776) = 36;
      return a1;
    case 0x25u:
      v238 = *((unsigned __int8 *)a2 + v1881);
      if (v238 >= 2)
      {
        if (v1881 <= 3)
          v239 = v1881;
        else
          v239 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v597 = v238 == 1;
      if (v238 == 1)
        v598 = v1847;
      else
        v598 = v1844;
      if (v238 == 1)
        v599 = v1845;
      else
        v599 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v598 + 16))(a1, a2, v599);
      *((_BYTE *)a1 + v1881) = v597;
      *((_BYTE *)a1 + v1909) = *((_BYTE *)a2 + v1909);
      if (v1776 > 3)
        goto LABEL_767;
      v600 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v600 > 0xFFD8)
      {
        v254 = 37;
        goto LABEL_804;
      }
      if (v600 <= 0xD8)
      {
LABEL_767:
        v207 = 37;
        goto LABEL_798;
      }
      LOWORD(v254) = 37;
      goto LABEL_802;
    case 0x26u:
      v240 = *((unsigned __int8 *)a2 + v1881);
      if (v240 >= 2)
      {
        if (v1881 <= 3)
          v241 = v1881;
        else
          v241 = 4;
        __asm { BR              X12 }
      }
      v206 = v1776;
      v601 = v240 == 1;
      if (v240 == 1)
        v602 = v1847;
      else
        v602 = v1844;
      if (v240 == 1)
        v603 = v1845;
      else
        v603 = AssociatedTypeWitness;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v602 + 16))(a1, a2, v603);
      *((_BYTE *)a1 + v1881) = v601;
      if (v1776 > 3)
        goto LABEL_779;
      v604 = ((1 << (8 * v1776)) + 5) >> (8 * v1776);
      if (v604 > 0xFFD8)
      {
        v254 = 38;
LABEL_804:
        *(_DWORD *)((char *)a1 + v206) = v254;
      }
      else if (v604 <= 0xD8)
      {
LABEL_779:
        v207 = 38;
LABEL_798:
        *((_BYTE *)a1 + v206) = v207;
      }
      else
      {
        LOWORD(v254) = 38;
LABEL_802:
        *(_WORD *)((char *)a1 + v206) = v254;
      }
      return a1;
    default:
      if (v88 > 3)
        goto LABEL_133;
      v91 = ((1 << (8 * v88)) + 5) >> (8 * v88);
      v92 = 2;
      if (v91 > 0xFFD8)
        v92 = 4;
      if (v91 <= 0xD8)
LABEL_133:
        v92 = 1;
      memcpy(a1, (const void *)~v1890, v92 + v88);
      return a1;
  }
}

void sub_23AB87E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  void (*v106)(void);
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  void (*v111)(unint64_t, uint64_t);
  unint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  void (*v117)(void);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  void (*v123)(unint64_t, uint64_t);
  unint64_t v124;
  unint64_t v125;
  uint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t (*v168)(unint64_t);
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  BOOL v184;
  unint64_t v185;
  unint64_t v186;
  int v187;
  uint64_t *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  BOOL v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void (*v217)(uint64_t, uint64_t);
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  void (*v222)(void);
  uint64_t v223;
  unint64_t v224;
  void (*v225)(unint64_t, uint64_t);
  unint64_t v226;
  unint64_t v227;
  uint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  void (*v239)(void);
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  void (*v243)(unint64_t, uint64_t);
  unint64_t v244;
  unint64_t v245;
  uint64_t *v246;
  unint64_t v247;
  unint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t (*v265)(unint64_t, uint64_t, uint64_t);
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  void (*v275)(uint64_t, uint64_t);
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  void (*v281)(unint64_t, uint64_t);
  unint64_t v282;
  unint64_t v283;
  uint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void (*v288)(void);
  uint64_t v289;
  uint64_t v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void (*v296)(void);
  uint64_t v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  void (*v310)(uint64_t, uint64_t);
  uint64_t v311;
  unint64_t v312;
  uint64_t *v313;
  unint64_t v314;
  unint64_t v315;
  void *v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  void (*v328)(void);
  uint64_t v329;
  uint64_t v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  void (*v338)(void);
  uint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  void (*v347)(void);
  uint64_t v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  unint64_t v359;
  uint64_t v360;
  void (*v361)(void);
  uint64_t v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t *v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  void (*v381)(uint64_t, uint64_t);
  uint64_t v382;
  unint64_t v383;
  void (*v384)(unint64_t, uint64_t);
  unint64_t v385;
  unint64_t v386;
  uint64_t *v387;
  unint64_t v388;
  void *v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t *v427;
  BOOL v428;
  unint64_t v429;
  unint64_t *v430;
  unint64_t v431;
  unint64_t *v432;
  unint64_t v433;
  unint64_t *v434;
  unint64_t v435;
  unint64_t *v436;
  unint64_t v437;
  unint64_t *v438;
  unint64_t v439;
  uint64_t v440;
  int v441;
  unint64_t v442;
  uint64_t (*v443)(unint64_t);
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  void (*v452)(unint64_t, uint64_t);
  unint64_t v453;
  unint64_t v454;
  uint64_t *v455;
  unint64_t v456;
  unint64_t v457;
  void *v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  void (*v465)(unint64_t, uint64_t);
  unint64_t v466;
  unint64_t v467;
  uint64_t *v468;
  unint64_t v469;
  unint64_t v470;
  void *v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  void (*v475)(unint64_t, uint64_t);
  unint64_t v476;
  unint64_t v477;
  uint64_t *v478;
  unint64_t v479;
  unint64_t v480;
  void *v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  void (*v488)(unint64_t, uint64_t);
  unint64_t v489;
  unint64_t v490;
  uint64_t *v491;
  unint64_t v492;
  unint64_t v493;
  void *v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t v498;
  int v499;
  unint64_t v500;
  uint64_t *v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  void (*v505)(unint64_t, uint64_t);
  unint64_t v506;
  unint64_t v507;
  uint64_t *v508;
  unint64_t v509;
  unint64_t v510;
  void *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  unint64_t v523;
  unint64_t v524;
  unsigned int v525;
  unsigned int v526;
  unsigned int v527;
  unsigned int v528;
  unsigned int v529;
  unsigned int v530;
  unint64_t v531;
  unint64_t v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  unint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unsigned int v540;
  unsigned int v541;
  uint64_t v542;
  unsigned int v543;
  uint64_t v544;
  unsigned int v545;
  unsigned int v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t AssociatedTypeWitness;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  unint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  unsigned int v578;
  unsigned int v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t v588;
  unint64_t v589;
  uint64_t v590;
  unsigned int v591;
  unint64_t v592;
  unint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  unsigned int v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  unsigned int v612;
  unsigned int v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t v616;
  unint64_t v617;

  v3 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v611 = *(_QWORD *)(a2 + 24);
  v569 = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(v569 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v5;
  v542 = v5 + v7;
  v610 = v7;
  v590 = (v5 + v7) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  if (v9 <= v8)
    v10 = v8;
  else
    v10 = *(_QWORD *)(v6 + 64);
  v11 = v8;
  v588 = v10;
  v603 = v10 + 1;
  v12 = *(unsigned __int8 *)(v4 + 80);
  v595 = v12 | v7;
  v565 = (v12 | v7) + v10 + 1;
  v592 = (v565 & ~(v12 | v7)) + v10 + 1;
  v570 = v4;
  v13 = *(_DWORD *)(v4 + 84);
  v596 = v3;
  v554 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v554 - 8);
  v15 = *(_DWORD *)(v14 + 84);
  v549 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v549 - 8);
  v17 = *(_DWORD *)(v16 + 84);
  v526 = v17;
  v540 = v15;
  if (v15 > v17)
    v17 = v15;
  v530 = v17;
  if (v17 <= 0x7FFFFFFE)
    v17 = 2147483646;
  v599 = v13;
  v543 = v17;
  if (v17 > v13)
    v13 = v17;
  v567 = sub_23B1C5BDC();
  v18 = *(_QWORD *)(v567 - 8);
  v19 = *(_DWORD *)(v18 + 84);
  if (v19 <= 0x7FFFFFFE)
    v20 = 2147483646;
  else
    v20 = *(_DWORD *)(v18 + 84);
  v579 = v20;
  if (v13 > v20)
    v20 = v13;
  v529 = v20;
  if (v20 <= 0x7FFFFFFF)
    v20 = 0x7FFFFFFF;
  v546 = v20;
  v525 = *(_DWORD *)(v18 + 84);
  v21 = v19 == 0;
  v600 = v11;
  v551 = v11 + v12;
  v608 = v12;
  v22 = *(unsigned __int8 *)(v16 + 80);
  v23 = *(_DWORD *)(v14 + 80) & 0xF8 | v22 | 7;
  v538 = v11 + v23;
  v24 = v23;
  v614 = v23;
  v552 = *(_QWORD *)(v14 + 64) + 7;
  v553 = v14;
  v547 = v22 + 8;
  v548 = v16;
  v574 = v22;
  v25 = *(unsigned __int8 *)(v18 + 80);
  v606 = ((((*(_QWORD *)(v16 + 64) + 7 + ((v22 + 8 + (v552 & 0xFFFFFFFFFFFFFFF8)) & ~v22)) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v607 = (v25 | 7) + 16;
  v26 = (v607 + ((v11 + v23 + ((v11 + v12) & ~v12)) & ~v23) + v606) & ~(v25 | 7);
  v566 = v25 + 12;
  v564 = *(_QWORD *)(v567 - 8);
  v27 = *(_QWORD *)(v18 + 64);
  v562 = v27 + v25;
  v563 = v27 + 12;
  v28 = (v25
       + 10
       + ((((((v27 + 12 + ((v27 + v25 + ((v25 + 12) & ~v25)) & ~v25)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v25;
  if (v21)
    ++v27;
  v560 = v25 + 10;
  v561 = v27 + 7;
  v572 = (((((((((v27 + 7 + v28) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8;
  v29 = (((v572 + 327 + v26) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v597 = v29 + 16;
  v30 = v24 | v12 | v25;
  v536 = v29 + 16 + v30;
  v589 = ((v29 + (v536 & ~v30) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v571 = v6;
  v31 = *(_DWORD *)(v6 + 84);
  v556 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v556 - 8);
  v33 = *(_DWORD *)(v32 + 84);
  v557 = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(v557 - 8);
  v527 = *(_DWORD *)(v34 + 84);
  v541 = v33;
  if (v33 <= v527)
    v33 = *(_DWORD *)(v34 + 84);
  if (v33 <= 0x7FFFFFFE)
    v35 = 2147483646;
  else
    v35 = v33;
  if (v35 <= v31)
    v36 = v31;
  else
    v36 = v35;
  if (v36 <= v579)
    v36 = v579;
  v528 = v36;
  if (v36 <= 0x7FFFFFFF)
    v36 = 0x7FFFFFFF;
  v545 = v36;
  v550 = v9 + v610;
  v37 = *(unsigned __int8 *)(v34 + 80);
  v38 = *(_DWORD *)(v32 + 80) & 0xF8 | v37 | 7;
  v537 = v9 + v38;
  v555 = v32;
  v580 = *(_QWORD *)(v32 + 64) + 7;
  v558 = *(_QWORD *)(v557 - 8);
  v559 = v37 + 8;
  v544 = *(_QWORD *)(v34 + 64) + 7;
  v39 = ((((v544 + ((v37 + 8 + (v580 & 0xFFFFFFFFFFFFFFF8)) & ~v37)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v581 = v25 | 7;
  v40 = (((v572 + 327 + ((v607 + ((v9 + v38 + ((v9 + v610) & ~v610)) & ~v38) + v39) & ~(v25 | 7))) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  v41 = v40 + 16;
  v42 = v38 | v610;
  v43 = v38 | v610 | v25;
  v535 = v40 + 16 + v43;
  v44 = v40 + (v535 & ~v43);
  v578 = v31;
  if (v31)
    v45 = v9;
  else
    v45 = v9 + 1;
  v46 = *(_QWORD *)(v596 - 8);
  v47 = *(unsigned __int8 *)(v46 + 80);
  v517 = v11 + v47;
  v519 = v46;
  v48 = *(_QWORD *)(v46 + 64);
  if (!*(_DWORD *)(v46 + 84))
    ++v48;
  v49 = v48 + ((v11 + v47) & ~v47);
  v523 = v30 + v11;
  v50 = v30;
  v51 = v597 + ((v30 + v11) & ~v30);
  v52 = (v51 + 7) & 0xFFFFFFFFFFFFFFF8;
  v53 = ((v52 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v54 = ((((((v45 + v38 + ((v51 + v610) & ~v610)) & ~v38) + v39 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v520 = v45 + v38;
  if (v11 > v53)
    v53 = v11;
  if (v54 <= v39 + ((v45 + v38 + v590) & ~v38) + 16)
    v54 = v39 + ((v45 + v38 + v590) & ~v38) + 16;
  v55 = ((v52 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v55 > v49)
    v49 = v55;
  if (v53 > v54)
    v54 = v53;
  if (v54 > v49)
    v49 = v54;
  if (v599)
    v56 = v11;
  else
    v56 = v11 + 1;
  v57 = *(_QWORD *)(v611 - 8);
  if (*(_DWORD *)(v57 + 84))
    v58 = *(_QWORD *)(v57 + 64);
  else
    v58 = *(_QWORD *)(v57 + 64) + 1;
  v518 = *(_QWORD *)(v611 - 8);
  v59 = *(unsigned __int8 *)(v57 + 80);
  v516 = v9 + v59;
  v60 = v58 + ((v9 + v59) & ~v59);
  v522 = v43 + v9;
  v61 = v41 + ((v43 + v9) & ~v43);
  v62 = (v61 + 7) & 0xFFFFFFFFFFFFFFF8;
  v63 = ((v62 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v64 = ((((((v56 + v614 + ((v61 + v608) & ~v608)) & ~v614) + v606 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v515 = v9 + v608;
  v521 = v56 + v614;
  v539 = v9;
  if (v9 > v63)
    v63 = v9;
  if (v64 <= v606 + ((v56 + v614 + ((v9 + v608) & ~v608)) & ~v614) + 16)
    v64 = v606 + ((v56 + v614 + ((v9 + v608) & ~v608)) & ~v614) + 16;
  v65 = ((v62 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v65 > v60)
    v60 = v65;
  if (v63 > v64)
    v64 = v63;
  if (v64 > v60)
    v60 = v64;
  if (v60 + 1 <= v49 + 1)
    v66 = v49 + 1;
  else
    v66 = v60 + 1;
  if (v603 > v588 + 2)
    v67 = v588 + 1;
  else
    v67 = v588 + 2;
  if (v67 <= v590 + v9)
    v67 = v590 + v9;
  if (v67 <= v592)
    v67 = v592;
  if (v67 <= v589)
    v67 = v589;
  v68 = ((v44 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v67 > v68)
    v68 = v67;
  if (v68 <= v597)
    v68 = v597;
  v524 = v41;
  if (v68 <= v41)
    v68 = v41;
  if (v68 <= v592 + 2)
    v68 = v592 + 2;
  if (v68 <= ((v588 + 9) & 0xFFFFFFFFFFFFFFF8) + 8)
    v68 = ((v588 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  v69 = v588;
  if (v68 <= (v588 & 0xFFFFFFFFFFFFFFF8) + 16)
    v68 = (v588 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v68 <= ((v595 + 1) & ~v595) + v603)
    v68 = ((v595 + 1) & ~v595) + v603;
  v70 = v45 + 7;
  v593 = ((((v544 + ((v37 + 8 + (v580 & 0xFFFFFFFFFFFFFFF8)) & ~v37)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v71 = ((((((((v38 + 9 + ((((v45 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v38) + v39 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v534 = v38 | v610;
  v531 = ((((((((v614 + ((((v56 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v614) + v606 + 34) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + v42
       + 8;
  if (v68 <= v66 + 1)
    v68 = v66 + 1;
  if (v68 <= ((((v71 + (v531 & ~v42) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8)
    v68 = ((((v71 + (v531 & ~v42) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  v72 = 56;
  if (v68 > 0x38)
    v72 = v68;
  if (v72 > 3)
    goto LABEL_95;
  v75 = ((1 << (8 * v72)) + 5) >> (8 * v72);
  if (v75 > 0xFFD8)
  {
    v74 = a1;
    v73 = *(_DWORD *)(a1 + v72);
  }
  else
  {
    if (v75 <= 0xD8)
    {
LABEL_95:
      v73 = *(unsigned __int8 *)(a1 + v72);
      v74 = a1;
      goto LABEL_100;
    }
    v73 = *(unsigned __int16 *)(a1 + v72);
    v74 = a1;
  }
LABEL_100:
  v591 = v35;
  v532 = v70;
  v533 = v38 + 9;
  if (v73 >= 0x27)
  {
    if (v72 <= 3)
      v76 = v72;
    else
      v76 = 4;
    __asm { BR              X2 }
  }
  v77 = v33;
  v78 = ~v610;
  v79 = ~v614;
  v80 = ~v574;
  v81 = ~v581;
  v594 = ~v25;
  v82 = v572 + 16;
  v83 = ~v50;
  v84 = ~v38;
  switch(v73)
  {
    case 0u:
    case 0x12u:
      v85 = v74;
      (*(void (**)(void))(v570 + 8))();
      v74 = (v542 + v85) & v78;
      goto LABEL_368;
    case 1u:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v87 = v588;
        else
          v87 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 2u:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v88 = v588;
        else
          v88 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 3u:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v89 = v588;
        else
          v89 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 4u:
      v90 = *(unsigned __int8 *)(v74 + v588);
      if (v90 >= 2)
      {
        if (v588 <= 3)
          v91 = v588;
        else
          v91 = 4;
        __asm { BR              X12 }
      }
      v203 = v571;
      if (v90 != 1)
        v203 = v570;
      v204 = v74;
      (*(void (**)(void))(v203 + 8))();
      v74 = (v565 + v204) & ~v595;
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v205 = v588;
        else
          v205 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 5u:
      v604 = ~v608;
      v92 = v599;
      v93 = v546;
      v513 = ~v574;
      if (v599 == v546)
      {
        v94 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, unint64_t))(v570 + 48))(v74, v599, AssociatedTypeWitness, v80, v588);
        v79 = ~v614;
        v93 = v546;
        v95 = ~v581;
        v96 = v567;
        goto LABEL_375;
      }
      v166 = (v551 + v74) & v604;
      v167 = (v166 + v600 + v614) & v79;
      v95 = ~v581;
      if (v543 == v546)
      {
        v96 = v567;
        if (v540 == v543)
        {
          v168 = *(uint64_t (**)(unint64_t))(v553 + 48);
          v169 = (v166 + v600 + v614) & v79;
          v170 = ~v581;
LABEL_374:
          v94 = v168(v169);
          v79 = ~v614;
          v93 = v546;
          v95 = v170;
          goto LABEL_375;
        }
        v197 = (unint64_t *)((v552 + v167) & 0xFFFFFFFFFFFFFFF8);
        if (v530 > 0x7FFFFFFE)
        {
          v169 = ((unint64_t)v197 + v547) & v80;
          v168 = *(uint64_t (**)(unint64_t))(v548 + 48);
          v170 = ~v581;
          goto LABEL_374;
        }
        v198 = *v197;
        if (v198 >= 0xFFFFFFFF)
          LODWORD(v198) = -1;
        v199 = v570;
        if ((v198 + 1) < 2)
          goto LABEL_377;
        goto LABEL_487;
      }
      v178 = v606 + v167;
      v96 = v567;
      if ((v529 & 0x80000000) != 0)
      {
        v169 = (v566 + ((v607 + v178) & v81)) & v594;
        if (v525 > 0x7FFFFFFD)
        {
          v168 = *(uint64_t (**)(unint64_t))(v564 + 48);
          v170 = ~v581;
          goto LABEL_374;
        }
        v368 = *(_QWORD *)(((v563 + ((v562 + v169) & v594)) & 0xFFFFFFFFFFFFF8) + 8);
        if (v368 >= 0xFFFFFFFF)
          LODWORD(v368) = -1;
        v199 = v570;
        v74 = a1;
        if ((v368 + 1) < 2)
          goto LABEL_377;
LABEL_487:
        v233 = (v536 + v74) & ~v50;
        goto LABEL_488;
      }
      v179 = *(_QWORD *)(v178 + 8);
      if (v179 >= 0xFFFFFFFF)
        LODWORD(v179) = -1;
      v94 = v179 + 1;
LABEL_375:
      v220 = ~v50;
      v199 = v570;
      if (!v94)
      {
        v166 = (v551 + a1) & v604;
        v167 = (v166 + v600 + v614) & v79;
LABEL_377:
        v602 = v79;
        v221 = v572 + 16;
        v222 = *(void (**)(void))(v199 + 8);
        v223 = v95;
        v222();
        ((void (*)(uint64_t, uint64_t))v222)(v166, AssociatedTypeWitness);
        (*(void (**)(uint64_t, uint64_t))(v553 + 8))(v167, v554);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v548 + 8))((v547 + ((v552 + v167) & 0xFFFFFFFFFFFFFFF8)) & v513, v549);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v615 = v223;
        v224 = (v607 + v606 + v167) & v223;
        v225 = *(void (**)(unint64_t, uint64_t))(v564 + 8);
        v225((v566 + v224) & v594, v96);
        v226 = (v562 + ((v566 + v224) & v594)) & v594;
        v225(v226, v96);
        swift_bridgeObjectRelease();
        v227 = (v560
              + ((((((v563 + v226) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v594;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v564 + 48))(v227, 1, v96))
          v225(v227, v96);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v228 = (uint64_t *)((((((v561 + v227) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        v229 = v228[1];
        v220 = ~v50;
        if ((v229 & 0x3000000000000000) == 0)
          sub_23AAAE53C(*v228, v229);
        swift_bridgeObjectRelease();
        v82 = v572 + 16;
        v230 = v221 + v224;
        v231 = *(void **)(v221 + v224 + 16);
        LODWORD(v232) = -1;
        if ((unint64_t)v231 < 0xFFFFFFFF)
          v232 = *(_QWORD *)(v221 + v224 + 16);
        v92 = v599;
        if ((int)v232 - 1 < 0)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v230 + 192))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_23AAA12F0(*(_QWORD *)((((v230 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v230 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
        v199 = v570;
        v95 = v615;
        v93 = v546;
        v79 = v602;
      }
      v233 = (v536 + a1) & v220;
      if ((_DWORD)v92 == v93)
      {
        v234 = v95;
        v235 = v79;
        v236 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v199 + 48))(v233, v92, AssociatedTypeWitness);
        v79 = v235;
        v237 = v234;
        v238 = ~v574;
LABEL_501:
        if (v236)
          return;
        v369 = (v551 + v233) & v604;
        v370 = (v538 + v369) & v79;
        goto LABEL_504;
      }
LABEL_488:
      v238 = ~v574;
      v369 = (v551 + v233) & v604;
      v370 = (v538 + v369) & v79;
      if (v543 == v93)
      {
        if (v540 == v543)
        {
          v371 = (v538 + v369) & v79;
          v372 = v95;
          v373 = v79;
          v236 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, unint64_t))(v553 + 48))(v371, v540, v554, v80, v69);
LABEL_500:
          v79 = v373;
          v237 = v372;
          goto LABEL_501;
        }
        v376 = (unint64_t *)((v552 + v370) & 0xFFFFFFFFFFFFFFF8);
        if (v530 > 0x7FFFFFFE)
        {
          v372 = v95;
          v373 = v79;
          v236 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t, uint64_t, unint64_t))(v548 + 48))(((unint64_t)v376 + v547) & v513, v526, v549, v80, v69);
          goto LABEL_500;
        }
        v377 = *v376;
      }
      else
      {
        v374 = v370 + v606;
        if ((v529 & 0x80000000) == 0)
        {
          v375 = *(_QWORD *)(v374 + 8);
          if (v375 >= 0xFFFFFFFF)
            LODWORD(v375) = -1;
          v236 = v375 + 1;
          v237 = v95;
          goto LABEL_501;
        }
        v378 = (v566 + ((v607 + v374) & v95)) & v594;
        if (v525 > 0x7FFFFFFD)
        {
          v379 = v79;
          v380 = v95;
          v236 = (*(uint64_t (**)(uint64_t))(v564 + 48))(v378);
          v237 = v380;
          v79 = v379;
          goto LABEL_501;
        }
        v377 = *(_QWORD *)(((v563 + ((v562 + v378) & v594)) & 0xFFFFFFFFFFFFF8) + 8);
      }
      if (v377 >= 0xFFFFFFFF)
        LODWORD(v377) = -1;
      v237 = v95;
      if ((v377 + 1) < 2)
      {
LABEL_504:
        v381 = *(void (**)(uint64_t, uint64_t))(v570 + 8);
        v382 = v237;
        v381(v233, AssociatedTypeWitness);
        v381(v369, AssociatedTypeWitness);
        (*(void (**)(uint64_t, uint64_t))(v553 + 8))(v370, v554);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v548 + 8))((v547 + ((v552 + v370) & 0xFFFFFFFFFFFFFFF8)) & v238, v549);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v383 = (v607 + v370 + v606) & v382;
        v384 = *(void (**)(unint64_t, uint64_t))(v564 + 8);
        v384((v566 + v383) & v594, v567);
        v385 = (v562 + ((v566 + v383) & v594)) & v594;
        v384(v385, v567);
        swift_bridgeObjectRelease();
        v386 = (v560
              + ((((((v563 + v385) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v594;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v564 + 48))(v386, 1, v567))
          v384(v386, v567);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v387 = (uint64_t *)((((((v561 + v386) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        v388 = v387[1];
        if ((v388 & 0x3000000000000000) == 0)
          sub_23AAAE53C(*v387, v388);
        swift_bridgeObjectRelease();
        v116 = v383 + v82;
        goto LABEL_509;
      }
      return;
    case 6u:
      v97 = ~v581;
      v98 = v545;
      v582 = ~v37;
      v573 = ~v43;
      v575 = ~v38;
      if (v31 == v545)
      {
        v99 = v74;
        v100 = (*(uint64_t (**)(void))(v571 + 48))();
        v98 = v545;
        v101 = ~v610;
        v102 = v81;
        v103 = v77;
        v104 = ~v38;
LABEL_392:
        v202 = v571;
        if (v100)
        {
LABEL_405:
          v97 = v102;
          v251 = (v535 + v99) & v573;
          if (v578 == v98)
          {
            v252 = v101;
            v105 = v82;
            v253 = v102;
            v254 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v202 + 48))(v251, v578, v569);
            v255 = v253;
            v256 = v558;
            v257 = v559;
            v258 = v580;
            v259 = v582;
LABEL_421:
            if (v254)
              return;
            v274 = v104;
            v261 = (v550 + v251) & v252;
            v262 = (v537 + v261) & v274;
            goto LABEL_423;
          }
          v105 = v82;
          v260 = v557;
          v256 = v558;
          v257 = v559;
          v258 = v580;
          v259 = v582;
LABEL_408:
          v252 = v101;
          v261 = (v550 + v251) & v101;
          v262 = (v537 + v261) & v575;
          v263 = v541;
          if (v591 == v98)
          {
            if (v541 == v591)
            {
              v264 = v556;
              v265 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v555 + 48);
              v266 = (v537 + v261) & v575;
              v267 = v97;
LABEL_420:
              v272 = v256;
              v273 = v257;
              v254 = v265(v266, v263, v264);
              v258 = v580;
              v257 = v273;
              v256 = v272;
              v255 = v267;
              v104 = v575;
              goto LABEL_421;
            }
            v270 = (unint64_t *)((v258 + v262) & 0xFFFFFFFFFFFFFFF8);
            if (v103 > 0x7FFFFFFE)
            {
              v266 = ((unint64_t)v270 + v257) & v259;
              v265 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v256 + 48);
              v267 = v97;
              v263 = v527;
              v264 = v260;
              goto LABEL_420;
            }
            v271 = *v270;
          }
          else
          {
            v268 = v262 + v593;
            v264 = v567;
            if ((v528 & 0x80000000) == 0)
            {
              v269 = *(_QWORD *)(v268 + 8);
              if (v269 >= 0xFFFFFFFF)
                LODWORD(v269) = -1;
              v254 = v269 + 1;
              v104 = v575;
              v255 = v97;
              goto LABEL_421;
            }
            v266 = (v566 + ((v607 + v268) & v97)) & v594;
            v263 = v525;
            if (v525 > 0x7FFFFFFD)
            {
              v265 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v564 + 48);
              v267 = v97;
              goto LABEL_420;
            }
            v271 = *(_QWORD *)(((v563 + ((v562 + v266) & v594)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v271 >= 0xFFFFFFFF)
            LODWORD(v271) = -1;
          v255 = v97;
          if ((v271 + 1) >= 2)
            return;
LABEL_423:
          v275 = *(void (**)(uint64_t, uint64_t))(v571 + 8);
          v276 = v251;
          v277 = v255;
          v278 = v256;
          v279 = v257;
          v280 = v258;
          v275(v276, v569);
          v275(v261, v569);
          (*(void (**)(uint64_t, uint64_t))(v555 + 8))(v262, v556);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v278 + 8))((v279 + ((v280 + v262) & 0xFFFFFFFFFFFFFFF8)) & v259, v557);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v110 = (v607 + v262 + v593) & v277;
          v281 = *(void (**)(unint64_t, uint64_t))(v564 + 8);
          v281((v566 + v110) & v594, v567);
          v282 = (v562 + ((v566 + v110) & v594)) & v594;
          v281(v282, v567);
          swift_bridgeObjectRelease();
          v283 = (v560
                + ((((((v563 + v282) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v594;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v564 + 48))(v283, 1, v567))
            v281(v283, v567);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v284 = (uint64_t *)((((((v561 + v283) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
          v285 = v284[1];
          if ((v285 & 0x3000000000000000) == 0)
            sub_23AAAE53C(*v284, v285);
LABEL_136:
          swift_bridgeObjectRelease();
          v116 = v105 + v110;
LABEL_509:
          v389 = *(void **)(v116 + 16);
          LODWORD(v390) = -1;
          if ((unint64_t)v389 < 0xFFFFFFFF)
            v390 = *(_QWORD *)(v116 + 16);
          if ((int)v390 - 1 < 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v116 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_23AAA12F0(*(_QWORD *)((((v116 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v116 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          return;
        }
        v74 = v99;
        v609 = v101;
        v171 = (v550 + v99) & v101;
        v172 = (v171 + v539 + v38) & v104;
LABEL_394:
        v613 = v103;
        v239 = *(void (**)(void))(v202 + 8);
        v99 = v74;
        v240 = v102;
        v239();
        ((void (*)(uint64_t, uint64_t))v239)(v171, v569);
        (*(void (**)(uint64_t, uint64_t))(v555 + 8))(v172, v556);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v558 + 8))((v559 + ((v580 + v172) & 0xFFFFFFFFFFFFFFF8)) & v582, v557);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v241 = v240;
        v242 = (v607 + v593 + v172) & v240;
        v243 = *(void (**)(unint64_t, uint64_t))(v564 + 8);
        v243((v566 + v242) & v594, v567);
        v244 = (v562 + ((v566 + v242) & v594)) & v594;
        v243(v244, v567);
        swift_bridgeObjectRelease();
        v245 = (v560
              + ((((((v563 + v244) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v594;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v564 + 48))(v245, 1, v567))
          v243(v245, v567);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v246 = (uint64_t *)((((((v561 + v245) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        v247 = v246[1];
        if ((v247 & 0x3000000000000000) == 0)
          sub_23AAAE53C(*v246, v247);
        swift_bridgeObjectRelease();
        v248 = v82 + v242;
        v249 = *(void **)(v82 + v242 + 16);
        LODWORD(v250) = -1;
        if ((unint64_t)v249 < 0xFFFFFFFF)
          v250 = *(_QWORD *)(v248 + 16);
        v104 = v575;
        if ((int)v250 - 1 < 0)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v248 + 192))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_23AAA12F0(*(_QWORD *)((((v248 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v248 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
        v202 = v571;
        v102 = v241;
        v103 = v613;
        v101 = v609;
        v98 = v545;
        goto LABEL_405;
      }
      v101 = ~v610;
      v171 = (v550 + v74) & v78;
      v104 = ~v38;
      v172 = (v171 + v539 + v38) & v84;
      v103 = v77;
      if (v35 == v545)
      {
        v609 = ~v610;
        if (v541 == v35)
        {
          v99 = v74;
          v173 = v97;
          v100 = (*(uint64_t (**)(uint64_t))(v555 + 48))(v172);
LABEL_391:
          v98 = v545;
          v102 = v173;
          v101 = v609;
          goto LABEL_392;
        }
        v200 = (unint64_t *)((v580 + v172) & 0xFFFFFFFFFFFFFFF8);
        if (v77 > 0x7FFFFFFE)
        {
          v99 = v74;
          v173 = v97;
          v100 = (*(uint64_t (**)(unint64_t))(v558 + 48))(((unint64_t)v200 + v559) & ~v37);
          goto LABEL_391;
        }
        v201 = *v200;
        if (v201 >= 0xFFFFFFFF)
          LODWORD(v201) = -1;
        v202 = v571;
        v102 = v97;
        if ((v201 + 1) < 2)
          goto LABEL_394;
      }
      else
      {
        v99 = v74;
        v180 = v593 + v172;
        if ((v528 & 0x80000000) == 0)
        {
          v181 = *(_QWORD *)(v180 + 8);
          if (v181 >= 0xFFFFFFFF)
            LODWORD(v181) = -1;
          v100 = v181 + 1;
          v102 = v97;
          goto LABEL_392;
        }
        v609 = ~v610;
        v102 = v97;
        v219 = (v566 + ((v607 + v180) & v97)) & v594;
        if (v525 > 0x7FFFFFFD)
        {
          v173 = v97;
          v100 = (*(uint64_t (**)(uint64_t))(v564 + 48))(v219);
          goto LABEL_391;
        }
        v391 = *(_QWORD *)(((v563 + ((v562 + v219) & v594)) & 0xFFFFFFFFFFFFF8) + 8);
        if (v391 >= 0xFFFFFFFF)
          LODWORD(v391) = -1;
        v202 = v571;
        v74 = v99;
        if ((v391 + 1) < 2)
          goto LABEL_394;
      }
      v105 = v82;
      v251 = (v535 + v74) & v573;
      v260 = v557;
      v256 = *(_QWORD *)(v557 - 8);
      v257 = v559;
      v258 = v580;
      v259 = v582;
      v101 = v609;
      goto LABEL_408;
    case 7u:
      v105 = v572 + 16;
      v106 = *(void (**)(void))(v570 + 8);
      v107 = v74;
      v106();
      v108 = (v551 + v107) & ~v608;
      ((void (*)(uint64_t, uint64_t))v106)(v108, AssociatedTypeWitness);
      v109 = (v108 + v600 + v614) & ~v614;
      (*(void (**)(unint64_t, uint64_t))(v553 + 8))(v109, v554);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v548 + 8))((v547 + ((v552 + v109) & 0xFFFFFFFFFFFFFFF8)) & ~v574, v549);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v110 = (v607 + v606 + v109) & v81;
      v111 = *(void (**)(unint64_t, uint64_t))(v564 + 8);
      v111((v566 + v110) & v594, v567);
      v112 = (v562 + ((v566 + v110) & v594)) & v594;
      v111(v112, v567);
      swift_bridgeObjectRelease();
      v113 = (v560
            + ((((((v563 + v112) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v594;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v564 + 48))(v113, 1, v567))
        v111(v113, v567);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v114 = (uint64_t *)((((((v561 + v113) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
      v115 = v114[1];
      if ((v115 & 0x3000000000000000) == 0)
        sub_23AAAE53C(*v114, v115);
      goto LABEL_136;
    case 8u:
      v117 = *(void (**)(void))(v571 + 8);
      v118 = v74;
      v119 = ~v37;
      v117();
      ((void (*)(uint64_t, uint64_t))v117)((v550 + v118) & v78, v569);
      v120 = (((v550 + v118) & v78) + v539 + v38) & v84;
      (*(void (**)(uint64_t, uint64_t))(v555 + 8))(v120, v556);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v558 + 8))((v559 + ((v580 + v120) & 0xFFFFFFFFFFFFFFF8)) & v119, v557);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v121 = (v607 + v593 + v120) & v81;
      v122 = (v566 + v121) & v594;
      v123 = *(void (**)(unint64_t, uint64_t))(v564 + 8);
      v123(v122, v567);
      v124 = (v562 + v122) & v594;
      v123(v124, v567);
      swift_bridgeObjectRelease();
      v125 = (v560
            + ((((((v563 + v124) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v594;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v564 + 48))(v125, 1, v567))
        v123(v125, v567);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v126 = (uint64_t *)((((((v561 + v125) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
      v127 = v126[1];
      if ((v127 & 0x3000000000000000) == 0)
        sub_23AAAE53C(*v126, v127);
      swift_bridgeObjectRelease();
      v116 = v572 + 16 + v121;
      goto LABEL_509;
    case 9u:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v128 = v588;
        else
          v128 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0xAu:
      v129 = *(unsigned __int8 *)(v74 + v588);
      if (v129 >= 2)
      {
        if (v588 <= 3)
          v130 = v588;
        else
          v130 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_319;
    case 0xBu:
      v129 = *(unsigned __int8 *)(v74 + v588);
      if (v129 >= 2)
      {
        if (v588 <= 3)
          v131 = v588;
        else
          v131 = 4;
        __asm { BR              X12 }
      }
LABEL_319:
      v194 = v571;
      if (v129 != 1)
        v194 = v570;
      v195 = v74;
      (*(void (**)(void))(v194 + 8))();
      v74 = (v565 + v195) & ~v595;
      v196 = *(unsigned __int8 *)(v74 + v588);
      if (v196 > 1)
        return;
      if (v196 != 1)
        goto LABEL_465;
      goto LABEL_368;
    case 0xCu:
      v132 = *(unsigned __int8 *)(v74 + v588);
      if (v132 >= 2)
      {
        if (v588 <= 3)
          v133 = v588;
        else
          v133 = 4;
        __asm { BR              X12 }
      }
      v206 = v571;
      if (v132 != 1)
        v206 = v570;
      v207 = v74;
      (*(void (**)(void))(v206 + 8))();
      v208 = v207 + v588 + 2;
      goto LABEL_347;
    case 0xDu:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v134 = v588;
        else
          v134 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0xEu:
      v135 = *(unsigned __int8 *)(v74 + v588);
      if (v135 >= 2)
      {
        if (v588 <= 3)
          v136 = v588;
        else
          v136 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_344;
    case 0xFu:
      v135 = *(unsigned __int8 *)(v74 + v588);
      if (v135 >= 2)
      {
        if (v588 <= 3)
          v137 = v588;
        else
          v137 = 4;
        __asm { BR              X12 }
      }
LABEL_344:
      v209 = v571;
      if (v135 != 1)
        v209 = v570;
      v210 = v74;
      (*(void (**)(void))(v209 + 8))();
      v208 = v210 + v603;
LABEL_347:
      v211 = *(void **)((v208 + 7) & 0xFFFFFFFFFFFFF8);
      goto LABEL_348;
    case 0x10u:
      v138 = *(_QWORD *)(v74 + 16);
      if (v138 >> 60 != 15)
        sub_23AAAE53C(*(_QWORD *)(v74 + 8), v138);
      return;
    case 0x11u:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v139 = v588;
        else
          v139 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0x13u:
      v74 = (v74 + v595 + 1) & ~v595;
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v140 = v588;
        else
          v140 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0x14u:
    case 0x15u:
      swift_release();
      return;
    case 0x18u:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v141 = v588;
        else
          v141 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0x19u:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v142 = v588;
        else
          v142 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0x1Au:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v143 = v588;
        else
          v143 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0x1Bu:
      v144 = ~v38;
      v145 = ~v43;
      v601 = ~v614;
      v605 = ~v608;
      v146 = v77;
      v147 = *(unsigned __int8 *)(v74 + v66);
      if (v147 >= 2)
      {
        if (v66 <= 3)
          v148 = v66;
        else
          v148 = 4;
        __asm { BR              X17 }
      }
      v174 = ~v581;
      if (v147 == 1)
      {
        v286 = ~v59;
        switch(*(_BYTE *)(v74 + v60))
        {
          case 0:
            v584 = ~v37;
            v287 = v174;
            v288 = *(void (**)(void))(v571 + 8);
            v289 = v74;
            v288();
            v290 = (v522 + v289) & v145;
            if (v578 == v545)
            {
              v291 = (*(uint64_t (**)(uint64_t))(v571 + 48))(v290);
              v292 = v287;
              goto LABEL_431;
            }
            v392 = v144;
            v294 = ~v610;
            v393 = (v550 + v290) & ~v610;
            v394 = v392;
            v395 = (v537 + v393) & v392;
            v292 = v287;
            if (v591 == v545)
            {
              if (v541 == v591)
              {
                v291 = (*(uint64_t (**)(uint64_t))(v555 + 48))((v537 + v393) & v392);
                v292 = v287;
                v144 = v394;
LABEL_431:
                v293 = v567;
                v294 = ~v610;
                if (v291)
                  goto LABEL_638;
                goto LABEL_626;
              }
              v427 = (unint64_t *)((v580 + v395) & 0xFFFFFFFFFFFFFFF8);
              v428 = v146 > 0x7FFFFFFE;
              v293 = v567;
              if (!v428)
              {
                v429 = *v427;
                goto LABEL_721;
              }
              v441 = (*(uint64_t (**)(unint64_t))(v558 + 48))(((unint64_t)v427 + v559) & v584);
            }
            else
            {
              v413 = v395 + v593;
              if ((v528 & 0x80000000) == 0)
              {
                v414 = *(_QWORD *)(v413 + 8);
                if (v414 >= 0xFFFFFFFF)
                  LODWORD(v414) = -1;
                v144 = v392;
                v293 = v567;
                if ((_DWORD)v414 == -1)
                {
LABEL_626:
                  v449 = v144;
                  v393 = (v550 + v290) & v294;
                  v395 = (v537 + v393) & v449;
LABEL_627:
                  v450 = v292;
                  ((void (*)(uint64_t, uint64_t))v288)(v290, v569);
                  ((void (*)(uint64_t, uint64_t))v288)(v393, v569);
                  (*(void (**)(uint64_t, uint64_t))(v555 + 8))(v395, v556);
                  swift_bridgeObjectRelease();
                  (*(void (**)(unint64_t, uint64_t))(v558 + 8))((v559 + ((v580 + v395) & 0xFFFFFFFFFFFFFFF8)) & v584, v557);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v451 = (v607 + v395 + v593) & v450;
                  v452 = *(void (**)(unint64_t, uint64_t))(v564 + 8);
                  v452((v566 + v451) & v594, v293);
                  v453 = (v562 + ((v566 + v451) & v594)) & v594;
                  v452(v453, v293);
                  swift_bridgeObjectRelease();
                  v454 = (v560
                        + ((((((v563 + v453) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v594;
                  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v564 + 48))(v454, 1, v293))v452(v454, v293);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v455 = (uint64_t *)((((((v561 + v454) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
                  v456 = v455[1];
                  if ((v456 & 0x3000000000000000) == 0)
                    sub_23AAAE53C(*v455, v456);
                  swift_bridgeObjectRelease();
                  v457 = v451 + v572 + 16;
                  v458 = *(void **)(v457 + 16);
                  LODWORD(v459) = -1;
                  if ((unint64_t)v458 < 0xFFFFFFFF)
                    v459 = *(_QWORD *)(v457 + 16);
                  if ((int)v459 - 1 < 0)
                  {

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (*(_QWORD *)(v457 + 192))
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                    }
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                  }
                  sub_23AAA12F0(*(_QWORD *)((((v457 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v457 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
                  goto LABEL_638;
                }
                goto LABEL_638;
              }
              v440 = (v566 + ((v607 + v413) & v287)) & v594;
              v293 = v567;
              if (v525 <= 0x7FFFFFFD)
              {
                v429 = *(_QWORD *)(((v563 + ((v562 + v440) & v594)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_721:
                if (v429 >= 0xFFFFFFFF)
                  LODWORD(v429) = -1;
                if ((v429 + 1) < 2)
                  goto LABEL_627;
LABEL_638:
                v460 = v290 + v524;
LABEL_703:
                v211 = *(void **)(((v460 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
                goto LABEL_348;
              }
              v441 = (*(uint64_t (**)(uint64_t))(v564 + 48))(v440);
            }
            v292 = v287;
            v144 = v394;
            v294 = ~v610;
            if (v441)
              goto LABEL_638;
            goto LABEL_626;
          case 1:
            v576 = v144;
            v514 = v80;
            v585 = ~v37;
            v295 = v174;
            v296 = *(void (**)(void))(v571 + 8);
            v297 = v74;
            v296();
            v298 = (v522 + v297) & v145;
            if (v578 == v545)
            {
              v299 = (*(uint64_t (**)(unint64_t))(v571 + 48))((v522 + v297) & v145);
              v298 = (v522 + v297) & v145;
              v300 = v295;
              v301 = v593;
LABEL_435:
              v302 = v567;
LABEL_436:
              v303 = ~v610;
LABEL_437:
              v304 = v570;
              if (v299)
                goto LABEL_450;
              v305 = (v550 + v298) & v303;
              v306 = (v537 + v305) & v576;
              goto LABEL_439;
            }
            v305 = (v550 + v298) & ~v610;
            v306 = (v537 + v305) & v576;
            v300 = v295;
            if (v591 == v545)
            {
              v301 = v593;
              if (v541 == v591)
              {
                v396 = v298;
                v299 = (*(uint64_t (**)(uint64_t))(v555 + 48))((v537 + v305) & v576);
                v298 = v396;
                v300 = v295;
                goto LABEL_435;
              }
              v430 = (unint64_t *)((v580 + v306) & 0xFFFFFFFFFFFFFFF8);
              v428 = v146 > 0x7FFFFFFE;
              v302 = v567;
              if (!v428)
              {
                v431 = *v430;
                goto LABEL_726;
              }
              v442 = ((unint64_t)v430 + v559) & v585;
              v443 = *(uint64_t (**)(unint64_t))(v558 + 48);
            }
            else
            {
              v301 = v593;
              v415 = v306 + v593;
              if ((v528 & 0x80000000) == 0)
              {
                v303 = ~v610;
                v416 = *(_QWORD *)(v415 + 8);
                if (v416 >= 0xFFFFFFFF)
                  LODWORD(v416) = -1;
                v299 = v416 + 1;
                v302 = v567;
                goto LABEL_437;
              }
              v442 = (v566 + ((v607 + v415) & v295)) & v594;
              v302 = v567;
              if (v525 <= 0x7FFFFFFD)
              {
                v431 = *(_QWORD *)(((v563 + ((v562 + v442) & v594)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_726:
                if (v431 >= 0xFFFFFFFF)
                  LODWORD(v431) = -1;
                v304 = v570;
                if ((v431 + 1) < 2)
                {
LABEL_439:
                  v307 = v298;
                  v308 = v300;
                  ((void (*)(uint64_t, uint64_t))v296)(v298, v569);
                  ((void (*)(uint64_t, uint64_t))v296)(v305, v569);
                  (*(void (**)(uint64_t, uint64_t))(v555 + 8))(v306, v556);
                  swift_bridgeObjectRelease();
                  (*(void (**)(unint64_t, uint64_t))(v558 + 8))((v559 + ((v580 + v306) & 0xFFFFFFFFFFFFFFF8)) & v585, v557);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v309 = (v607 + v306 + v301) & v308;
                  v310 = *(void (**)(uint64_t, uint64_t))(v564 + 8);
                  v310((v566 + v309) & v594, v302);
                  v311 = (v562 + ((v566 + v309) & v594)) & v594;
                  v310(v311, v302);
                  swift_bridgeObjectRelease();
                  v312 = (v560
                        + ((((((v563 + v311) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v594;
                  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v564 + 48))(v312, 1, v302))v310(v312, v302);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v313 = (uint64_t *)((((((v561 + v312) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
                  v314 = v313[1];
                  if ((v314 & 0x3000000000000000) == 0)
                    sub_23AAAE53C(*v313, v314);
                  swift_bridgeObjectRelease();
                  v315 = v309 + v572 + 16;
                  v316 = *(void **)(v315 + 16);
                  LODWORD(v317) = -1;
                  if ((unint64_t)v316 < 0xFFFFFFFF)
                    v317 = *(_QWORD *)(v315 + 16);
                  if ((int)v317 - 1 < 0)
                  {

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (*(_QWORD *)(v315 + 192))
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                    }
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                  }
                  sub_23AAA12F0(*(_QWORD *)((((v315 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v315 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
                  v304 = v570;
                  v298 = v307;
                }
LABEL_450:
                v318 = (v298 + v608 + v524) & v605;
                v319 = v304;
                if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v304 + 48))(v318, 1, AssociatedTypeWitness))(*(void (**)(unint64_t, uint64_t))(v319 + 8))(v318, AssociatedTypeWitness);
                v320 = (v521 + v318) & v601;
                if (v540 == v543)
                {
                  v321 = (*(uint64_t (**)(uint64_t))(v553 + 48))(v320);
                }
                else
                {
                  v397 = (uint64_t *)((v552 + v320) & 0xFFFFFFFFFFFFFFF8);
                  if (v530 <= 0x7FFFFFFE)
                  {
                    v398 = *v397;
                    if ((unint64_t)*v397 >= 0xFFFFFFFF)
                      LODWORD(v398) = -1;
                    if ((v398 + 1) >= 2)
                      goto LABEL_571;
                    goto LABEL_570;
                  }
                  v321 = (*(uint64_t (**)(unint64_t))(v548 + 48))(((unint64_t)v397 + v547) & v514);
                }
                if (v321)
                {
LABEL_571:
                  v417 = v320 + v606;
LABEL_702:
                  v460 = v417 + 15;
                  goto LABEL_703;
                }
                v397 = (uint64_t *)((v552 + v320) & 0xFFFFFFFFFFFFFFF8);
LABEL_570:
                (*(void (**)(uint64_t, uint64_t))(v553 + 8))(v320, v554);
                swift_bridgeObjectRelease();
                (*(void (**)(unint64_t, uint64_t))(v548 + 8))(((unint64_t)v397 + v547) & v514, v549);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_571;
              }
              v443 = *(uint64_t (**)(unint64_t))(v564 + 48);
            }
            v461 = v298;
            v299 = v443(v442);
            v298 = v461;
            v300 = v295;
            goto LABEL_436;
          case 2:
            v322 = ~v574;
            v323 = v74;
            (*(void (**)(void))(v571 + 8))();
            v324 = (v515 + v323) & v605;
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v570 + 48))(v324, 1, AssociatedTypeWitness))(*(void (**)(uint64_t, uint64_t))(v570 + 8))(v324, AssociatedTypeWitness);
            v325 = (v521 + v324) & v601;
            if (v540 == v543)
            {
              v326 = (*(uint64_t (**)(uint64_t))(v553 + 48))(v325);
LABEL_573:
              if (v326)
                goto LABEL_576;
              v399 = (uint64_t *)((v552 + v325) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_575;
            }
            v399 = (uint64_t *)((v552 + v325) & 0xFFFFFFFFFFFFFFF8);
            if (v530 > 0x7FFFFFFE)
            {
              v326 = (*(uint64_t (**)(unint64_t))(v548 + 48))(((unint64_t)v399 + v547) & v322);
              goto LABEL_573;
            }
            v400 = *v399;
            if ((unint64_t)*v399 >= 0xFFFFFFFF)
              LODWORD(v400) = -1;
            if ((v400 + 1) < 2)
            {
LABEL_575:
              (*(void (**)(uint64_t, uint64_t))(v553 + 8))(v325, v554);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v548 + 8))(((unint64_t)v399 + v547) & v322, v549);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
LABEL_576:
            v418 = v606 + v325;
            goto LABEL_595;
          case 3:
            v586 = ~v37;
            v327 = v174;
            v328 = *(void (**)(void))(v571 + 8);
            v329 = v74;
            v328();
            v330 = (v522 + v329) & v145;
            if (v578 == v545)
            {
              v331 = (*(uint64_t (**)(uint64_t))(v571 + 48))(v330);
              v332 = v327;
              goto LABEL_460;
            }
            v401 = v144;
            v334 = ~v610;
            v402 = (v550 + v330) & ~v610;
            v403 = v401;
            v404 = (v537 + v402) & v401;
            v332 = v327;
            if (v591 == v545)
            {
              if (v541 == v591)
              {
                v331 = (*(uint64_t (**)(uint64_t))(v555 + 48))((v537 + v402) & v401);
                v332 = v327;
                v144 = v403;
LABEL_460:
                v333 = v567;
                v334 = ~v610;
                if (v331)
                  goto LABEL_318;
                goto LABEL_643;
              }
              v432 = (unint64_t *)((v580 + v404) & 0xFFFFFFFFFFFFFFF8);
              v428 = v146 > 0x7FFFFFFE;
              v333 = v567;
              if (!v428)
              {
                v433 = *v432;
                goto LABEL_741;
              }
              v447 = (*(uint64_t (**)(unint64_t))(v558 + 48))(((unint64_t)v432 + v559) & v586);
            }
            else
            {
              v419 = v404 + v593;
              if ((v528 & 0x80000000) == 0)
              {
                v420 = *(_QWORD *)(v419 + 8);
                if (v420 >= 0xFFFFFFFF)
                  LODWORD(v420) = -1;
                v144 = v401;
                v333 = v567;
                if ((_DWORD)v420 == -1)
                {
LABEL_643:
                  v462 = v144;
                  v402 = (v550 + v330) & v334;
                  v404 = (v537 + v402) & v462;
LABEL_644:
                  v463 = v332;
                  ((void (*)(uint64_t, uint64_t))v328)(v330, v569);
                  ((void (*)(uint64_t, uint64_t))v328)(v402, v569);
                  (*(void (**)(uint64_t, uint64_t))(v555 + 8))(v404, v556);
                  swift_bridgeObjectRelease();
                  (*(void (**)(unint64_t, uint64_t))(v558 + 8))((v559 + ((v580 + v404) & 0xFFFFFFFFFFFFFFF8)) & v586, v557);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v464 = (v607 + v404 + v593) & v463;
                  v465 = *(void (**)(unint64_t, uint64_t))(v564 + 8);
                  v465((v566 + v464) & v594, v333);
                  v466 = (v562 + ((v566 + v464) & v594)) & v594;
                  v465(v466, v333);
                  swift_bridgeObjectRelease();
                  v467 = (v560
                        + ((((((v563 + v466) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v594;
                  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v564 + 48))(v467, 1, v333))v465(v467, v333);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v468 = (uint64_t *)((((((v561 + v467) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
                  v469 = v468[1];
                  if ((v469 & 0x3000000000000000) == 0)
                    sub_23AAAE53C(*v468, v469);
                  swift_bridgeObjectRelease();
                  v470 = v464 + v572 + 16;
                  v471 = *(void **)(v470 + 16);
                  LODWORD(v472) = -1;
                  if ((unint64_t)v471 < 0xFFFFFFFF)
                    v472 = *(_QWORD *)(v470 + 16);
                  if ((int)v472 - 1 < 0)
                  {

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (*(_QWORD *)(v470 + 192))
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                    }
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                  }
                  sub_23AAA12F0(*(_QWORD *)((((v470 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v470 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
                }
LABEL_318:
                swift_bridgeObjectRelease();
                return;
              }
              v446 = (v566 + ((v607 + v419) & v327)) & v594;
              v333 = v567;
              if (v525 <= 0x7FFFFFFD)
              {
                v433 = *(_QWORD *)(((v563 + ((v562 + v446) & v594)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_741:
                if (v433 >= 0xFFFFFFFF)
                  LODWORD(v433) = -1;
                if ((v433 + 1) < 2)
                  goto LABEL_644;
                goto LABEL_318;
              }
              v447 = (*(uint64_t (**)(uint64_t))(v564 + 48))(v446);
            }
            v332 = v327;
            v144 = v403;
            v334 = ~v610;
            if (v447)
              goto LABEL_318;
            goto LABEL_643;
          case 4:
          case 5:
          case 7:
            goto LABEL_368;
          case 6:
            v335 = v74;
            (*(void (**)(void))(v571 + 8))();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v518 + 48))((v516 + v335) & v286, 1, v611))
            {
              return;
            }
            v217 = *(void (**)(uint64_t, uint64_t))(v518 + 8);
            v74 = (v516 + v335) & v286;
            v218 = v611;
            goto LABEL_466;
          default:
            if (v60 <= 3)
              v212 = v60;
            else
              v212 = 4;
            __asm { BR              X14 }
            return;
        }
      }
      v336 = ~v47;
      switch(*(_BYTE *)(v74 + v49))
      {
        case 0:
          v616 = v572 + 16;
          v337 = ~v574;
          v338 = *(void (**)(void))(v570 + 8);
          v339 = v74;
          v338();
          v340 = (v523 + v339) & v83;
          if (v599 == v546)
          {
            v341 = (*(uint64_t (**)(uint64_t))(v570 + 48))(v340);
            v342 = ~v581;
            v343 = v597;
            v344 = ~v608;
LABEL_658:
            if (v341)
              goto LABEL_671;
            v405 = (v551 + v340) & v344;
            v406 = (v538 + v405) & v601;
            goto LABEL_660;
          }
          v344 = ~v608;
          v405 = (v551 + v340) & v605;
          v406 = (v538 + v405) & v601;
          v342 = ~v581;
          if (v543 == v546)
          {
            v343 = v597;
            if (v540 == v543)
            {
              v341 = (*(uint64_t (**)(uint64_t))(v553 + 48))((v538 + v405) & v601);
LABEL_657:
              v342 = ~v581;
              goto LABEL_658;
            }
            v434 = (unint64_t *)((v552 + v406) & 0xFFFFFFFFFFFFFFF8);
            if (v530 > 0x7FFFFFFE)
            {
              v341 = (*(uint64_t (**)(unint64_t))(v548 + 48))(((unint64_t)v434 + v547) & v337);
              goto LABEL_657;
            }
            v435 = *v434;
          }
          else
          {
            v421 = v406 + v606;
            v343 = v597;
            if ((v529 & 0x80000000) == 0)
            {
              v422 = *(_QWORD *)(v421 + 8);
              if (v422 >= 0xFFFFFFFF)
                LODWORD(v422) = -1;
              v341 = v422 + 1;
              goto LABEL_658;
            }
            v444 = (v566 + ((v607 + v421) & ~v581)) & v594;
            if (v525 > 0x7FFFFFFD)
            {
              v341 = (*(uint64_t (**)(uint64_t))(v564 + 48))(v444);
              goto LABEL_657;
            }
            v435 = *(_QWORD *)(((v563 + ((v562 + v444) & v594)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v435 >= 0xFFFFFFFF)
            LODWORD(v435) = -1;
          if ((v435 + 1) >= 2)
          {
LABEL_671:
            v460 = v340 + v343;
            goto LABEL_703;
          }
LABEL_660:
          v473 = v342;
          ((void (*)(uint64_t, uint64_t))v338)(v340, AssociatedTypeWitness);
          ((void (*)(uint64_t, uint64_t))v338)(v405, AssociatedTypeWitness);
          (*(void (**)(uint64_t, uint64_t))(v553 + 8))(v406, v554);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v548 + 8))((v547 + ((v552 + v406) & 0xFFFFFFFFFFFFFFF8)) & v337, v549);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v474 = (v607 + v406 + v606) & v473;
          v475 = *(void (**)(unint64_t, uint64_t))(v564 + 8);
          v475((v566 + v474) & v594, v567);
          v476 = (v562 + ((v566 + v474) & v594)) & v594;
          v475(v476, v567);
          swift_bridgeObjectRelease();
          v477 = (v560
                + ((((((v563 + v476) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v594;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v564 + 48))(v477, 1, v567))
            v475(v477, v567);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v478 = (uint64_t *)((((((v561 + v477) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
          v479 = v478[1];
          if ((v479 & 0x3000000000000000) == 0)
            sub_23AAAE53C(*v478, v479);
          swift_bridgeObjectRelease();
          v480 = v616 + v474;
          v481 = *(void **)(v616 + v474 + 16);
          LODWORD(v482) = -1;
          if ((unint64_t)v481 < 0xFFFFFFFF)
            v482 = *(_QWORD *)(v480 + 16);
          if ((int)v482 - 1 < 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v480 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_23AAA12F0(*(_QWORD *)((((v480 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v480 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          goto LABEL_671;
        case 1:
          v577 = v144;
          v345 = v80;
          v587 = ~v37;
          v346 = v174;
          v347 = *(void (**)(void))(v570 + 8);
          v348 = v74;
          v347();
          v349 = (v523 + v348) & v83;
          if (v599 == v546)
          {
            v350 = (*(uint64_t (**)(uint64_t))(v570 + 48))(v349);
            v351 = v346;
            v352 = ~v610;
            v353 = ~v608;
LABEL_675:
            v483 = v571;
            v484 = v572 + 16;
            v485 = v520;
            if (v350)
              goto LABEL_688;
            v407 = (v551 + v349) & v353;
            v408 = (v538 + v407) & v601;
            goto LABEL_677;
          }
          v353 = ~v608;
          v407 = (v551 + v349) & v605;
          v408 = (v538 + v407) & v601;
          v351 = v346;
          if (v543 == v546)
          {
            if (v540 == v543)
            {
              v350 = (*(uint64_t (**)(uint64_t))(v553 + 48))((v538 + v407) & v601);
LABEL_673:
              v351 = v346;
LABEL_674:
              v352 = ~v610;
              goto LABEL_675;
            }
            v436 = (unint64_t *)((v552 + v408) & 0xFFFFFFFFFFFFFFF8);
            if (v530 > 0x7FFFFFFE)
            {
              v350 = (*(uint64_t (**)(unint64_t))(v548 + 48))(((unint64_t)v436 + v547) & v345);
              goto LABEL_673;
            }
            v437 = *v436;
          }
          else
          {
            v423 = v408 + v606;
            if ((v529 & 0x80000000) == 0)
            {
              v424 = *(_QWORD *)(v423 + 8);
              if (v424 >= 0xFFFFFFFF)
                LODWORD(v424) = -1;
              v350 = v424 + 1;
              goto LABEL_674;
            }
            v445 = (v566 + ((v607 + v423) & v346)) & v594;
            if (v525 > 0x7FFFFFFD)
            {
              v350 = (*(uint64_t (**)(uint64_t))(v564 + 48))(v445);
              goto LABEL_673;
            }
            v437 = *(_QWORD *)(((v563 + ((v562 + v445) & v594)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v437 >= 0xFFFFFFFF)
            LODWORD(v437) = -1;
          v483 = v571;
          v484 = v572 + 16;
          v352 = ~v610;
          v485 = v520;
          if ((v437 + 1) < 2)
          {
LABEL_677:
            v486 = v351;
            ((void (*)(uint64_t, uint64_t))v347)(v349, AssociatedTypeWitness);
            ((void (*)(uint64_t, uint64_t))v347)(v407, AssociatedTypeWitness);
            (*(void (**)(uint64_t, uint64_t))(v553 + 8))(v408, v554);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v548 + 8))((v547 + ((v552 + v408) & 0xFFFFFFFFFFFFFFF8)) & v345, v549);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v487 = (v607 + v408 + v606) & v486;
            v488 = *(void (**)(unint64_t, uint64_t))(v564 + 8);
            v488((v566 + v487) & v594, v567);
            v489 = (v562 + ((v566 + v487) & v594)) & v594;
            v488(v489, v567);
            swift_bridgeObjectRelease();
            v490 = (v560
                  + ((((((v563 + v489) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v594;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v564 + 48))(v490, 1, v567))
              v488(v490, v567);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v491 = (uint64_t *)((((((v561 + v490) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            v492 = v491[1];
            if ((v492 & 0x3000000000000000) == 0)
              sub_23AAAE53C(*v491, v492);
            swift_bridgeObjectRelease();
            v493 = v484 + v487;
            v494 = *(void **)(v484 + v487 + 16);
            LODWORD(v495) = -1;
            if ((unint64_t)v494 < 0xFFFFFFFF)
              v495 = *(_QWORD *)(v484 + v487 + 16);
            if ((int)v495 - 1 < 0)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(_QWORD *)(v493 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_23AAA12F0(*(_QWORD *)((((v493 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v493 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            v483 = v571;
            v352 = ~v610;
          }
LABEL_688:
          v496 = (v349 + v610 + v597) & v352;
          v497 = v483;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v483 + 48))(v496, 1, v569))
            (*(void (**)(unint64_t, uint64_t))(v497 + 8))(v496, v569);
          v498 = (v485 + v496) & v577;
          if (v541 == v591)
          {
            v499 = (*(uint64_t (**)(unint64_t))(v555 + 48))(v498);
            v500 = v593;
          }
          else
          {
            v501 = (uint64_t *)((v580 + v498) & 0xFFFFFFFFFFFFFFF8);
            v500 = v593;
            if (v146 <= 0x7FFFFFFE)
            {
              v502 = *v501;
              if ((unint64_t)*v501 >= 0xFFFFFFFF)
                LODWORD(v502) = -1;
              if ((v502 + 1) >= 2)
                goto LABEL_701;
              goto LABEL_700;
            }
            v499 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v558 + 48))(((unint64_t)v501 + v559) & v587, v527, v557);
          }
          if (v499)
          {
LABEL_701:
            v417 = v498 + v500;
            goto LABEL_702;
          }
          v501 = (uint64_t *)((v580 + v498) & 0xFFFFFFFFFFFFFFF8);
LABEL_700:
          (*(void (**)(unint64_t, uint64_t))(v555 + 8))(v498, v556);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v558 + 8))(((unint64_t)v501 + v559) & v587, v557);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_701;
        case 2:
          v354 = ~v37;
          v355 = v74;
          (*(void (**)(void))(v570 + 8))();
          v356 = (v542 + v355) & v78;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v571 + 48))(v356, 1, v569))
            (*(void (**)(uint64_t, uint64_t))(v571 + 8))(v356, v569);
          v357 = (v520 + v356) & v144;
          if (v541 == v591)
          {
            v358 = (*(uint64_t (**)(uint64_t))(v555 + 48))(v357);
            v359 = v593;
          }
          else
          {
            v409 = (uint64_t *)((v580 + v357) & 0xFFFFFFFFFFFFFFF8);
            v359 = v593;
            if (v146 <= 0x7FFFFFFE)
            {
              v410 = *v409;
              if ((unint64_t)*v409 >= 0xFFFFFFFF)
                LODWORD(v410) = -1;
              if ((v410 + 1) >= 2)
              {
LABEL_594:
                v418 = v359 + v357;
LABEL_595:
                v211 = *(void **)(v418 + 8);
LABEL_348:

                return;
              }
LABEL_593:
              (*(void (**)(uint64_t, uint64_t))(v555 + 8))(v357, v556);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v558 + 8))(((unint64_t)v409 + v559) & v354, v557);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_594;
            }
            v358 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v558 + 48))(((unint64_t)v409 + v559) & v354, v527, v557);
          }
          if (v358)
            goto LABEL_594;
          v409 = (uint64_t *)((v580 + v357) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_593;
        case 3:
          v617 = v572 + 16;
          v360 = ~v574;
          v361 = *(void (**)(void))(v570 + 8);
          v362 = v74;
          v361();
          v363 = (v523 + v362) & v83;
          if (v599 == v546)
          {
            v364 = (*(uint64_t (**)(uint64_t))(v570 + 48))(v363);
            v365 = ~v581;
            v366 = ~v608;
LABEL_706:
            if (v364)
              goto LABEL_318;
            v411 = (v551 + v363) & v366;
            v412 = (v538 + v411) & v601;
            goto LABEL_708;
          }
          v366 = ~v608;
          v411 = (v551 + v363) & v605;
          v412 = (v538 + v411) & v601;
          v365 = ~v581;
          if (v543 == v546)
          {
            if (v540 == v543)
            {
              v364 = (*(uint64_t (**)(uint64_t))(v553 + 48))((v538 + v411) & v601);
LABEL_705:
              v365 = ~v581;
              goto LABEL_706;
            }
            v438 = (unint64_t *)((v552 + v412) & 0xFFFFFFFFFFFFFFF8);
            if (v530 > 0x7FFFFFFE)
            {
              v364 = (*(uint64_t (**)(unint64_t))(v548 + 48))(((unint64_t)v438 + v547) & v360);
              goto LABEL_705;
            }
            v439 = *v438;
          }
          else
          {
            v425 = v412 + v606;
            if ((v529 & 0x80000000) == 0)
            {
              v426 = *(_QWORD *)(v425 + 8);
              if (v426 >= 0xFFFFFFFF)
                LODWORD(v426) = -1;
              v364 = v426 + 1;
              goto LABEL_706;
            }
            v448 = (v566 + ((v607 + v425) & ~v581)) & v594;
            if (v525 > 0x7FFFFFFD)
            {
              v364 = (*(uint64_t (**)(uint64_t))(v564 + 48))(v448);
              goto LABEL_705;
            }
            v439 = *(_QWORD *)(((v563 + ((v562 + v448) & v594)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v439 >= 0xFFFFFFFF)
            LODWORD(v439) = -1;
          if ((v439 + 1) >= 2)
            goto LABEL_318;
LABEL_708:
          v503 = v365;
          ((void (*)(uint64_t, uint64_t))v361)(v363, AssociatedTypeWitness);
          ((void (*)(uint64_t, uint64_t))v361)(v411, AssociatedTypeWitness);
          (*(void (**)(uint64_t, uint64_t))(v553 + 8))(v412, v554);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v548 + 8))((v547 + ((v552 + v412) & 0xFFFFFFFFFFFFFFF8)) & v360, v549);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v504 = (v607 + v412 + v606) & v503;
          v505 = *(void (**)(unint64_t, uint64_t))(v564 + 8);
          v505((v566 + v504) & v594, v567);
          v506 = (v562 + ((v566 + v504) & v594)) & v594;
          v505(v506, v567);
          swift_bridgeObjectRelease();
          v507 = (v560
                + ((((((v563 + v506) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v594;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v564 + 48))(v507, 1, v567))
            v505(v507, v567);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v508 = (uint64_t *)((((((v561 + v507) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
          v509 = v508[1];
          if ((v509 & 0x3000000000000000) == 0)
            sub_23AAAE53C(*v508, v509);
          swift_bridgeObjectRelease();
          v510 = v617 + v504;
          v511 = *(void **)(v617 + v504 + 16);
          LODWORD(v512) = -1;
          if ((unint64_t)v511 < 0xFFFFFFFF)
            v512 = *(_QWORD *)(v510 + 16);
          if ((int)v512 - 1 < 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v510 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_23AAA12F0(*(_QWORD *)((((v510 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v510 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          goto LABEL_318;
        case 4:
        case 5:
        case 7:
          goto LABEL_465;
        case 6:
          v367 = v74;
          (*(void (**)(void))(v570 + 8))();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v519 + 48))((v517 + v367) & v336, 1, v596))
            return;
          v217 = *(void (**)(uint64_t, uint64_t))(v519 + 8);
          v74 = (v517 + v367) & v336;
          v218 = v596;
          goto LABEL_466;
        default:
          if (v49 <= 3)
            v213 = v49;
          else
            v213 = 4;
          __asm { BR              X14 }
          return;
      }
    case 0x1Cu:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v149 = v588;
        else
          v149 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0x1Du:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v150 = v588;
        else
          v150 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0x1Eu:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v151 = v588;
        else
          v151 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0x1Fu:
      v152 = *(unsigned __int8 *)(v74 + v588);
      if (v152 >= 2)
      {
        if (v588 <= 3)
          v153 = v588;
        else
          v153 = 4;
        __asm { BR              X12 }
      }
      v214 = v571;
      if (v152 != 1)
        v214 = v570;
      v215 = v74;
      (*(void (**)(void))(v214 + 8))();
      v74 = (v565 + v215) & ~v595;
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v216 = v588;
        else
          v216 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0x20u:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v154 = v588;
        else
          v154 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0x21u:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v155 = v588;
        else
          v155 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0x22u:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v156 = v588;
        else
          v156 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0x23u:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v157 = v588;
        else
          v157 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0x24u:
      v158 = ~v38;
      v612 = v77;
      v159 = ~v574;
      v583 = ~v37;
      v160 = v74;
      if (!(*(unsigned int (**)(void))(v570 + 48))())
        (*(void (**)(uint64_t, uint64_t))(v570 + 8))(v160, AssociatedTypeWitness);
      v161 = (((((v160 + v56 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v614 + 9) & ~v614;
      v162 = v160;
      if (v540 == v543)
      {
        v163 = (*(uint64_t (**)(unint64_t))(v553 + 48))(v161);
LABEL_289:
        v177 = v531;
        if (v163)
          goto LABEL_292;
        v175 = (uint64_t *)((v552 + v161) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_291;
      }
      v175 = (uint64_t *)((v552 + v161) & 0xFFFFFFFFFFFFFFF8);
      if (v530 > 0x7FFFFFFE)
      {
        v163 = (*(uint64_t (**)(unint64_t))(v548 + 48))(((unint64_t)v175 + v547) & v159);
        goto LABEL_289;
      }
      v176 = *v175;
      if ((unint64_t)*v175 >= 0xFFFFFFFF)
        LODWORD(v176) = -1;
      v177 = v531;
      if ((v176 + 1) < 2)
      {
LABEL_291:
        (*(void (**)(unint64_t, uint64_t))(v553 + 8))(v161, v554);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v548 + 8))(((unint64_t)v175 + v547) & v159, v549);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_292:
      sub_23AAAEE10(*(void **)((v606 + v161 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v606 + v161 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v606 + v161 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
      v182 = (v606 + v161 + 34) & 0xFFFFFFFFFFFFFFF8;
      v183 = *(_QWORD *)(v182 + 16);
      v184 = ((4 * (v183 >> 60)) & 0xC | ((v183 >> 60) >> 2)) != 0xF && ((4 * (v183 >> 60)) & 0xC) != 0;
      if (v183 >> 60 != 15 && !v184)
        sub_23AAAE53C(*(_QWORD *)(v182 + 8), v183);

      v185 = (v177 + v162) & ~v534;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v571 + 48))(v185, 1, v569))
        (*(void (**)(unint64_t, uint64_t))(v571 + 8))(v185, v569);
      v186 = (v533 + ((((v532 + v185) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v158;
      if (v541 == v591)
      {
        v187 = (*(uint64_t (**)(unint64_t))(v555 + 48))((v533
                                                                        + ((((v532 + v185) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v158);
      }
      else
      {
        v188 = (uint64_t *)((v580 + v186) & 0xFFFFFFFFFFFFFFF8);
        if (v612 <= 0x7FFFFFFE)
        {
          v189 = *v188;
          if ((unint64_t)*v188 >= 0xFFFFFFFF)
            LODWORD(v189) = -1;
          if ((v189 + 1) >= 2)
            goto LABEL_311;
          goto LABEL_310;
        }
        v187 = (*(uint64_t (**)(unint64_t))(v558 + 48))(((unint64_t)v188 + v559) & v583);
      }
      if (v187)
      {
LABEL_311:
        v190 = v186 + v593;
        sub_23AAAEE10(*(void **)((v190 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v190 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v190 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
        v191 = (v190 + 34) & 0xFFFFFFFFFFFFFFF8;
        v192 = *(_QWORD *)(v191 + 16);
        v193 = ((4 * (v192 >> 60)) & 0xC | ((v192 >> 60) >> 2)) != 0xF && ((4 * (v192 >> 60)) & 0xC) != 0;
        if (v192 >> 60 != 15 && !v193)
          sub_23AAAE53C(*(_QWORD *)(v191 + 8), v192);

        goto LABEL_318;
      }
      v188 = (uint64_t *)((v580 + v186) & 0xFFFFFFFFFFFFFFF8);
LABEL_310:
      (*(void (**)(unint64_t, uint64_t))(v555 + 8))(v186, v556);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v558 + 8))(((unint64_t)v188 + v559) & v583, v557);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_311;
    case 0x25u:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v164 = v588;
        else
          v164 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_367;
    case 0x26u:
      v86 = *(unsigned __int8 *)(v74 + v588);
      if (v86 >= 2)
      {
        if (v588 <= 3)
          v165 = v588;
        else
          v165 = 4;
        __asm { BR              X12 }
      }
LABEL_367:
      if (v86 == 1)
      {
LABEL_368:
        v217 = *(void (**)(uint64_t, uint64_t))(v571 + 8);
        v218 = v569;
      }
      else
      {
LABEL_465:
        v217 = *(void (**)(uint64_t, uint64_t))(v570 + 8);
        v218 = AssociatedTypeWitness;
      }
LABEL_466:
      v217(v74, v218);
      return;
    default:
      return;
  }
}

_QWORD *sub_23AB8C8DC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  size_t v48;
  size_t v49;
  unint64_t v50;
  unint64_t v51;
  size_t v52;
  size_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  unint64_t v59;
  uint64_t v60;
  size_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  const void *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void (*v118)(unint64_t, unint64_t, uint64_t);
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  unint64_t v124;
  unint64_t v125;
  void (*v126)(unint64_t, unint64_t, uint64_t);
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  size_t v132;
  size_t v133;
  uint64_t v134;
  int v135;
  size_t v136;
  size_t v137;
  void (*v138)(size_t, size_t, uint64_t);
  size_t v139;
  size_t v140;
  _BYTE *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  unint64_t v149;
  void *v150;
  const void *v151;
  unsigned int (*v152)(const void *, uint64_t, uint64_t);
  void (*v153)(unint64_t, unint64_t, uint64_t);
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  unint64_t v159;
  unint64_t v160;
  void (*v161)(unint64_t, unint64_t, uint64_t);
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  size_t v167;
  size_t v168;
  uint64_t v169;
  int v170;
  size_t v171;
  size_t v172;
  void (*v173)(size_t, size_t, uint64_t);
  size_t v174;
  size_t v175;
  _BYTE *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  unint64_t v183;
  unint64_t v184;
  void *v185;
  const void *v186;
  unsigned int (*v187)(const void *, uint64_t, uint64_t);
  unsigned int v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t *v202;
  unint64_t v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  unsigned int v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  unsigned int v233;
  uint64_t v234;
  unsigned int v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  size_t v242;
  size_t v243;
  unsigned int v244;
  uint64_t v245;
  unsigned int v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  __int16 v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  __int16 v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  _QWORD *v270;
  _QWORD *v271;
  unint64_t v272;
  unint64_t v273;
  char *v274;
  const void *v275;
  int v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  _QWORD *v280;
  _QWORD *v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  unint64_t v287;
  uint64_t *v288;
  unint64_t v289;
  _QWORD *v290;
  _QWORD *v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  _QWORD *v296;
  unint64_t v297;
  uint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  int v306;
  _QWORD *v307;
  _QWORD *v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  int v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  int v331;
  _QWORD *v332;
  _QWORD *v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  int v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  void *v350;
  id v351;
  void *v352;
  id v353;
  uint64_t v354;
  id v355;
  void *v356;
  id v357;
  void *v358;
  id v359;
  uint64_t v360;
  id v361;
  size_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  int v366;
  int v367;
  _QWORD *v368;
  unint64_t v369;
  unint64_t v370;
  void (*v371)(unint64_t, unint64_t, uint64_t);
  _QWORD *v372;
  _QWORD *v373;
  _QWORD *v374;
  _QWORD *v375;
  _BYTE *v376;
  _BYTE *v377;
  uint64_t v378;
  char v379;
  uint64_t v380;
  _BYTE *v381;
  _BYTE *v382;
  uint64_t v383;
  char *v384;
  uint64_t v385;
  unint64_t v386;
  void *v387;
  void *v388;
  char v389;
  unint64_t v390;
  unint64_t v391;
  uint64_t v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  size_t v396;
  unint64_t v397;
  uint64_t *v398;
  unint64_t v399;
  uint64_t v400;
  __int128 v401;
  void **v402;
  void *v403;
  _QWORD *v404;
  void *v405;
  const void *v406;
  unsigned int (*v407)(const void *, uint64_t, uint64_t);
  id v408;
  _QWORD *v409;
  _QWORD *v410;
  unint64_t v411;
  unint64_t v412;
  void *v413;
  const void *v414;
  int v415;
  uint64_t v416;
  uint64_t *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  _QWORD *v421;
  unint64_t v422;
  unint64_t v423;
  void (*v424)(unint64_t, unint64_t, uint64_t);
  _QWORD *v425;
  _QWORD *v426;
  _QWORD *v427;
  _QWORD *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  void *v433;
  void *v434;
  char v435;
  unint64_t v436;
  unint64_t v437;
  uint64_t v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  unint64_t v442;
  uint64_t *v443;
  unint64_t v444;
  uint64_t v445;
  __int128 v446;
  _QWORD *v447;
  void **v448;
  void *v449;
  unint64_t v450;
  unint64_t v451;
  _OWORD *v452;
  _OWORD *v453;
  unint64_t v454;
  unint64_t v455;
  id v456;
  unsigned int v457;
  _OWORD *v458;
  __int128 *v459;
  __int128 v460;
  unint64_t v461;
  unint64_t v462;
  __int128 v463;
  _QWORD *v464;
  uint64_t v465;
  uint64_t v466;
  _QWORD *v467;
  uint64_t v468;
  unint64_t v469;
  unsigned int v470;
  _OWORD *v471;
  __int128 *v472;
  __int128 v473;
  unint64_t v474;
  unint64_t v475;
  __int128 v476;
  _QWORD *v477;
  uint64_t v478;
  uint64_t v479;
  _QWORD *v480;
  uint64_t v481;
  unint64_t v482;
  unsigned int v483;
  unint64_t *v484;
  unint64_t v485;
  unint64_t *v486;
  unint64_t v487;
  BOOL v488;
  uint64_t v489;
  char v490;
  int v491;
  unsigned int v492;
  BOOL v493;
  uint64_t v494;
  unsigned int v495;
  BOOL v496;
  uint64_t v497;
  unsigned int v498;
  uint64_t v499;
  BOOL v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  unsigned int v504;
  uint64_t v505;
  BOOL v506;
  uint64_t v507;
  unsigned int v508;
  BOOL v509;
  uint64_t v510;
  uint64_t v511;
  char *v512;
  unint64_t v513;
  unsigned int v514;
  size_t v515;
  char *v516;
  char v517;
  unsigned int v518;
  __int16 v519;
  int v520;
  BOOL v521;
  uint64_t v522;
  uint64_t v523;
  char *v524;
  unint64_t v525;
  unsigned int v526;
  size_t v527;
  char *v528;
  unsigned int v529;
  BOOL v530;
  uint64_t v531;
  uint64_t v532;
  void *v533;
  id v534;
  char v535;
  unsigned int v536;
  __int16 v537;
  int v538;
  BOOL v539;
  uint64_t v540;
  uint64_t v541;
  char v542;
  unsigned int v543;
  __int16 v544;
  int v545;
  BOOL v546;
  uint64_t v547;
  uint64_t v548;
  void *v549;
  id v550;
  unsigned int v551;
  BOOL v552;
  uint64_t v553;
  uint64_t v554;
  void *v555;
  id v556;
  unsigned int v557;
  BOOL v558;
  uint64_t v559;
  unsigned int v560;
  BOOL v561;
  uint64_t v562;
  unsigned int v563;
  BOOL v564;
  uint64_t v565;
  unsigned int v566;
  BOOL v567;
  uint64_t v568;
  unsigned int v569;
  BOOL v570;
  uint64_t v571;
  unsigned int v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  BOOL v577;
  uint64_t v578;
  uint64_t v579;
  unsigned int v580;
  BOOL v581;
  uint64_t v582;
  unsigned int v583;
  BOOL v584;
  uint64_t v585;
  unsigned int v586;
  BOOL v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t v590;
  unsigned int v591;
  uint64_t v592;
  BOOL v593;
  uint64_t v594;
  unsigned int v595;
  BOOL v596;
  uint64_t v597;
  unsigned int v598;
  BOOL v599;
  uint64_t v600;
  unsigned int v601;
  BOOL v602;
  uint64_t v603;
  unsigned int v604;
  BOOL v605;
  uint64_t v606;
  uint64_t v607;
  unsigned int v608;
  BOOL v609;
  uint64_t v610;
  unsigned int v611;
  BOOL v612;
  uint64_t v613;
  unsigned int v614;
  BOOL v615;
  uint64_t v616;
  unsigned int v617;
  uint64_t v618;
  uint64_t v619;
  size_t v620;
  size_t v621;
  void (*v622)(_QWORD *, const void *, uint64_t);
  unint64_t v623;
  unint64_t v624;
  _QWORD *v625;
  _QWORD *v626;
  unint64_t v627;
  unint64_t v628;
  void (*v629)(unint64_t, unint64_t, uint64_t);
  _QWORD *v630;
  _QWORD *v631;
  _QWORD *v632;
  _QWORD *v633;
  _QWORD *v634;
  size_t v635;
  size_t v636;
  uint64_t v637;
  int v638;
  size_t v639;
  size_t v640;
  void (*v641)(size_t, size_t, uint64_t);
  size_t v642;
  size_t v643;
  _BYTE *v644;
  unint64_t v645;
  unint64_t v646;
  unint64_t v647;
  unint64_t v648;
  _QWORD *v649;
  _QWORD *v650;
  unint64_t v651;
  unint64_t v652;
  void *v653;
  const void *v654;
  unsigned int (*v655)(const void *, uint64_t, uint64_t);
  _QWORD *v656;
  _QWORD *v657;
  unint64_t v658;
  unint64_t v659;
  uint64_t v660;
  _QWORD *v661;
  _QWORD *v662;
  unint64_t v663;
  uint64_t *v664;
  unint64_t v665;
  uint64_t v666;
  unint64_t v667;
  unint64_t v668;
  uint64_t v669;
  unint64_t v670;
  unint64_t v671;
  int v672;
  _QWORD *v673;
  _QWORD *v674;
  unint64_t v675;
  unint64_t v676;
  unint64_t v677;
  int v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  void *v691;
  id v692;
  void *v693;
  id v694;
  uint64_t v695;
  id v696;
  uint64_t v697;
  size_t v698;
  void (*v699)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v700;
  unint64_t v701;
  unint64_t v702;
  _QWORD *v703;
  _QWORD *v704;
  unint64_t v705;
  unint64_t v706;
  void (*v707)(unint64_t, unint64_t, uint64_t);
  _QWORD *v708;
  _QWORD *v709;
  _QWORD *v710;
  _QWORD *v711;
  _QWORD *v712;
  size_t v713;
  size_t v714;
  uint64_t v715;
  int v716;
  size_t v717;
  size_t v718;
  void (*v719)(size_t, size_t, uint64_t);
  size_t v720;
  size_t v721;
  _BYTE *v722;
  unint64_t v723;
  unint64_t v724;
  unint64_t v725;
  unint64_t v726;
  _QWORD *v727;
  _QWORD *v728;
  unint64_t v729;
  unint64_t v730;
  void *v731;
  const void *v732;
  unsigned int (*v733)(const void *, uint64_t, uint64_t);
  _QWORD *v734;
  _QWORD *v735;
  unint64_t v736;
  unint64_t v737;
  uint64_t v738;
  _QWORD *v739;
  _QWORD *v740;
  unint64_t v741;
  uint64_t *v742;
  unint64_t v743;
  uint64_t v744;
  unint64_t v745;
  unint64_t v746;
  uint64_t v747;
  unint64_t v748;
  unint64_t v749;
  int v750;
  _QWORD *v751;
  _QWORD *v752;
  unint64_t v753;
  unint64_t v754;
  unint64_t v755;
  int v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  __int128 v762;
  __int128 v763;
  __int128 v764;
  __int128 v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  void *v769;
  id v770;
  void *v771;
  id v772;
  uint64_t v773;
  id v774;
  _OWORD *v775;
  __int128 *v776;
  __int128 v777;
  unint64_t v778;
  unint64_t v779;
  __int128 v780;
  _QWORD *v781;
  uint64_t v782;
  uint64_t v783;
  _QWORD *v784;
  uint64_t v785;
  unint64_t v786;
  unint64_t v787;
  unint64_t v788;
  int v789;
  uint64_t v790;
  unsigned int v791;
  unint64_t v792;
  unint64_t v793;
  size_t v794;
  unint64_t v795;
  unint64_t *v796;
  unint64_t v797;
  uint64_t v798;
  void *v799;
  const void *v800;
  size_t v801;
  uint64_t v802;
  unint64_t v803;
  size_t v804;
  size_t v805;
  void (*v806)(void *, const void *, uint64_t);
  unint64_t v807;
  _QWORD *v808;
  _QWORD *v809;
  unint64_t v810;
  unint64_t v811;
  void (*v812)(unint64_t, unint64_t, uint64_t);
  _QWORD *v813;
  _QWORD *v814;
  _QWORD *v815;
  _QWORD *v816;
  _QWORD *v817;
  size_t v818;
  size_t v819;
  uint64_t v820;
  int v821;
  size_t v822;
  size_t v823;
  void (*v824)(size_t, size_t, uint64_t);
  size_t v825;
  size_t v826;
  _BYTE *v827;
  unint64_t v828;
  unint64_t v829;
  unint64_t v830;
  unint64_t v831;
  _QWORD *v832;
  _QWORD *v833;
  unint64_t v834;
  unint64_t v835;
  void *v836;
  const void *v837;
  unsigned int (*v838)(const void *, uint64_t, uint64_t);
  _QWORD *v839;
  _QWORD *v840;
  unint64_t v841;
  unint64_t v842;
  uint64_t v843;
  _QWORD *v844;
  _QWORD *v845;
  unint64_t v846;
  uint64_t *v847;
  unint64_t v848;
  uint64_t v849;
  unint64_t v850;
  unint64_t v851;
  uint64_t v852;
  unint64_t v853;
  unint64_t v854;
  int v855;
  _QWORD *v856;
  _QWORD *v857;
  size_t v858;
  size_t v859;
  unint64_t v860;
  int v861;
  __int128 v862;
  __int128 v863;
  __int128 v864;
  __int128 v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  __int128 v869;
  __int128 v870;
  __int128 v871;
  __int128 v872;
  __int128 v873;
  void *v874;
  id v875;
  void *v876;
  id v877;
  uint64_t v878;
  id v879;
  _OWORD *v880;
  __int128 *v881;
  __int128 v882;
  unint64_t v883;
  unint64_t v884;
  __int128 v885;
  _QWORD *v886;
  uint64_t v887;
  uint64_t v888;
  _QWORD *v889;
  uint64_t v890;
  unint64_t v891;
  unint64_t v892;
  unint64_t v893;
  void *v894;
  int v895;
  uint64_t v896;
  unint64_t v897;
  unint64_t v898;
  uint64_t (*v899)(unint64_t);
  unint64_t v900;
  size_t v901;
  unint64_t v902;
  unint64_t *v903;
  unint64_t v904;
  const void *v905;
  size_t v906;
  uint64_t v907;
  unint64_t v908;
  size_t v909;
  size_t v910;
  void (*v911)(void *, const void *, uint64_t);
  uint64_t v912;
  unint64_t v913;
  unint64_t v914;
  _QWORD *v915;
  _QWORD *v916;
  unint64_t v917;
  unint64_t v918;
  void (*v919)(unint64_t, unint64_t, uint64_t);
  _QWORD *v920;
  _QWORD *v921;
  _QWORD *v922;
  _QWORD *v923;
  _QWORD *v924;
  size_t v925;
  size_t v926;
  uint64_t v927;
  int v928;
  size_t v929;
  size_t v930;
  uint64_t v931;
  void (*v932)(size_t, size_t, uint64_t);
  size_t v933;
  size_t v934;
  _BYTE *v935;
  unint64_t v936;
  unint64_t v937;
  unint64_t v938;
  unint64_t v939;
  _QWORD *v940;
  _QWORD *v941;
  unint64_t v942;
  unint64_t v943;
  void *v944;
  const void *v945;
  unsigned int (*v946)(const void *, uint64_t, uint64_t);
  _QWORD *v947;
  _QWORD *v948;
  unint64_t v949;
  unint64_t v950;
  uint64_t v951;
  _QWORD *v952;
  _QWORD *v953;
  unint64_t v954;
  uint64_t *v955;
  unint64_t v956;
  uint64_t v957;
  unint64_t v958;
  unint64_t v959;
  uint64_t v960;
  unint64_t v961;
  unint64_t v962;
  int v963;
  _QWORD *v964;
  _QWORD *v965;
  size_t v966;
  size_t v967;
  unint64_t v968;
  int v969;
  __int128 v970;
  __int128 v971;
  __int128 v972;
  __int128 v973;
  __int128 v974;
  __int128 v975;
  __int128 v976;
  __int128 v977;
  __int128 v978;
  __int128 v979;
  __int128 v980;
  __int128 v981;
  void *v982;
  id v983;
  void *v984;
  id v985;
  uint64_t v986;
  id v987;
  _OWORD *v988;
  __int128 *v989;
  __int128 v990;
  unint64_t v991;
  unint64_t v992;
  __int128 v993;
  _QWORD *v994;
  uint64_t v995;
  uint64_t v996;
  _QWORD *v997;
  uint64_t v998;
  unint64_t v999;
  unint64_t v1000;
  unint64_t v1001;
  char v1002;
  unsigned int v1003;
  __int16 v1004;
  int v1005;
  _OWORD *v1006;
  __int128 *v1007;
  __int128 v1008;
  unint64_t v1009;
  unint64_t v1010;
  __int128 v1011;
  _QWORD *v1012;
  uint64_t v1013;
  uint64_t v1014;
  _QWORD *v1015;
  uint64_t v1016;
  unint64_t v1017;
  unint64_t v1018;
  unsigned int v1019;
  uint64_t v1020;
  size_t v1021;
  uint64_t v1022;
  void (*v1023)(char *, _QWORD *, uint64_t);
  _QWORD *v1024;
  int v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  int v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  _QWORD *v1035;
  void *v1036;
  const void *v1037;
  size_t v1038;
  uint64_t v1039;
  void (*v1040)(char *, _QWORD *, uint64_t);
  _QWORD *v1041;
  int v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  _QWORD *v1047;
  char v1048;
  void *v1049;
  const void *v1050;
  uint64_t v1051;
  void (*v1052)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v1053;
  _QWORD *v1054;
  int v1055;
  size_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  void (*v1059)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v1060;
  _QWORD *v1061;
  int v1062;
  uint64_t v1063;
  unsigned int v1064;
  void *v1065;
  const void *v1066;
  void (*v1067)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v1068;
  _QWORD *v1069;
  int v1070;
  size_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  _QWORD *v1074;
  char v1075;
  char v1076;
  void *v1077;
  const void *v1078;
  unint64_t v1079;
  unint64_t v1080;
  unint64_t v1081;
  unint64_t v1082;
  unint64_t v1083;
  unint64_t v1084;
  unint64_t v1085;
  unint64_t v1086;
  unint64_t v1087;
  unint64_t v1088;
  unint64_t v1089;
  unint64_t v1090;
  char *v1091;
  _BYTE *v1092;
  int v1093;
  uint64_t *v1094;
  uint64_t v1095;
  char *v1096;
  char *v1097;
  int v1098;
  uint64_t *v1099;
  uint64_t v1100;
  uint64_t v1101;
  size_t v1102;
  unint64_t v1103;
  size_t v1104;
  unint64_t v1105;
  size_t v1106;
  unint64_t v1107;
  size_t v1108;
  unint64_t v1109;
  size_t v1110;
  unint64_t v1111;
  size_t v1112;
  unint64_t v1113;
  _QWORD *v1114;
  unint64_t v1115;
  unint64_t v1116;
  void (*v1117)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1118;
  unint64_t v1119;
  _QWORD *v1120;
  _QWORD *v1121;
  char *v1122;
  void *v1123;
  id v1124;
  unint64_t v1125;
  uint64_t v1126;
  _QWORD *v1127;
  unint64_t v1128;
  unint64_t v1129;
  void (*v1130)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1131;
  _QWORD *v1132;
  _QWORD *v1133;
  _QWORD *v1134;
  char *v1135;
  void *v1136;
  char v1137;
  unint64_t *v1138;
  unint64_t v1139;
  unint64_t *v1140;
  unint64_t v1141;
  unint64_t *v1142;
  unint64_t v1143;
  unint64_t *v1144;
  unint64_t v1145;
  unint64_t *v1146;
  unint64_t v1147;
  unint64_t *v1148;
  unint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  unint64_t v1156;
  uint64_t v1157;
  unint64_t v1158;
  unint64_t v1159;
  unint64_t v1160;
  _QWORD *v1161;
  _QWORD *v1162;
  unint64_t v1163;
  unint64_t v1164;
  void (*v1165)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1166;
  _QWORD *v1167;
  _QWORD *v1168;
  _QWORD *v1169;
  _QWORD *v1170;
  size_t v1171;
  size_t v1172;
  uint64_t v1173;
  int v1174;
  size_t v1175;
  size_t v1176;
  void (*v1177)(size_t, size_t, uint64_t);
  size_t v1178;
  size_t v1179;
  _BYTE *v1180;
  unint64_t v1181;
  unint64_t v1182;
  unint64_t v1183;
  unint64_t v1184;
  _QWORD *v1185;
  _QWORD *v1186;
  unint64_t v1187;
  unint64_t v1188;
  void *v1189;
  const void *v1190;
  unsigned int (*v1191)(const void *, uint64_t, uint64_t);
  _QWORD *v1192;
  _QWORD *v1193;
  unint64_t v1194;
  unint64_t v1195;
  uint64_t v1196;
  _QWORD *v1197;
  _QWORD *v1198;
  unint64_t v1199;
  uint64_t *v1200;
  unint64_t v1201;
  uint64_t v1202;
  unint64_t v1203;
  unint64_t v1204;
  uint64_t v1205;
  unint64_t v1206;
  unint64_t v1207;
  int v1208;
  _QWORD *v1209;
  _QWORD *v1210;
  size_t v1211;
  __int128 *v1212;
  unint64_t v1213;
  int v1214;
  __int128 v1215;
  __int128 v1216;
  __int128 v1217;
  __int128 v1218;
  __int128 v1219;
  __int128 v1220;
  __int128 v1221;
  __int128 v1222;
  __int128 v1223;
  __int128 v1224;
  __int128 v1225;
  __int128 v1226;
  void *v1227;
  id v1228;
  void *v1229;
  id v1230;
  uint64_t v1231;
  id v1232;
  uint64_t v1233;
  size_t v1234;
  uint64_t v1235;
  unint64_t v1236;
  unint64_t v1237;
  unint64_t v1238;
  _QWORD *v1239;
  _QWORD *v1240;
  unint64_t v1241;
  unint64_t v1242;
  void (*v1243)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1244;
  _QWORD *v1245;
  _QWORD *v1246;
  _QWORD *v1247;
  _QWORD *v1248;
  size_t v1249;
  size_t v1250;
  uint64_t v1251;
  int v1252;
  size_t v1253;
  size_t v1254;
  void (*v1255)(size_t, size_t, uint64_t);
  size_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  _BYTE *v1259;
  unint64_t v1260;
  unint64_t v1261;
  unint64_t v1262;
  unint64_t v1263;
  _QWORD *v1264;
  _QWORD *v1265;
  unint64_t v1266;
  unint64_t v1267;
  void *v1268;
  const void *v1269;
  unsigned int (*v1270)(const void *, uint64_t, uint64_t);
  _QWORD *v1271;
  _QWORD *v1272;
  unint64_t v1273;
  unint64_t v1274;
  uint64_t v1275;
  _QWORD *v1276;
  _QWORD *v1277;
  unint64_t v1278;
  uint64_t *v1279;
  unint64_t v1280;
  uint64_t v1281;
  unint64_t v1282;
  unint64_t v1283;
  uint64_t v1284;
  unint64_t v1285;
  unint64_t v1286;
  int v1287;
  _QWORD *v1288;
  _QWORD *v1289;
  size_t v1290;
  __int128 *v1291;
  unint64_t v1292;
  int v1293;
  __int128 v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  __int128 v1301;
  __int128 v1302;
  __int128 v1303;
  __int128 v1304;
  __int128 v1305;
  void *v1306;
  id v1307;
  void *v1308;
  id v1309;
  uint64_t v1310;
  id v1311;
  unint64_t v1312;
  uint64_t v1313;
  unint64_t v1314;
  unint64_t v1315;
  unint64_t v1316;
  _QWORD *v1317;
  _QWORD *v1318;
  unint64_t v1319;
  unint64_t v1320;
  void (*v1321)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1322;
  _QWORD *v1323;
  _QWORD *v1324;
  _QWORD *v1325;
  _QWORD *v1326;
  size_t v1327;
  size_t v1328;
  uint64_t v1329;
  int v1330;
  size_t v1331;
  size_t v1332;
  void (*v1333)(size_t, size_t, uint64_t);
  size_t v1334;
  size_t v1335;
  _BYTE *v1336;
  unint64_t v1337;
  unint64_t v1338;
  unint64_t v1339;
  unint64_t v1340;
  _QWORD *v1341;
  _QWORD *v1342;
  unint64_t v1343;
  unint64_t v1344;
  void *v1345;
  const void *v1346;
  unsigned int (*v1347)(const void *, uint64_t, uint64_t);
  _QWORD *v1348;
  _QWORD *v1349;
  unint64_t v1350;
  unint64_t v1351;
  uint64_t v1352;
  _QWORD *v1353;
  _QWORD *v1354;
  unint64_t v1355;
  uint64_t *v1356;
  unint64_t v1357;
  uint64_t v1358;
  unint64_t v1359;
  unint64_t v1360;
  uint64_t v1361;
  unint64_t v1362;
  unint64_t v1363;
  int v1364;
  _QWORD *v1365;
  _QWORD *v1366;
  size_t v1367;
  __int128 *v1368;
  unint64_t v1369;
  int v1370;
  __int128 v1371;
  __int128 v1372;
  __int128 v1373;
  __int128 v1374;
  __int128 v1375;
  __int128 v1376;
  __int128 v1377;
  __int128 v1378;
  __int128 v1379;
  __int128 v1380;
  __int128 v1381;
  __int128 v1382;
  void *v1383;
  id v1384;
  void *v1385;
  id v1386;
  uint64_t v1387;
  id v1388;
  void *v1389;
  unint64_t v1390;
  size_t v1391;
  unint64_t v1392;
  unint64_t v1393;
  _QWORD *v1394;
  _QWORD *v1395;
  unint64_t v1396;
  uint64_t v1397;
  unint64_t v1398;
  void (*v1399)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1400;
  _QWORD *v1401;
  _QWORD *v1402;
  _QWORD *v1403;
  _QWORD *v1404;
  size_t v1405;
  size_t v1406;
  uint64_t v1407;
  int v1408;
  size_t v1409;
  size_t v1410;
  void (*v1411)(size_t, size_t, uint64_t);
  size_t v1412;
  size_t v1413;
  _BYTE *v1414;
  unint64_t v1415;
  unint64_t v1416;
  unint64_t v1417;
  unint64_t v1418;
  _QWORD *v1419;
  _QWORD *v1420;
  unint64_t v1421;
  unint64_t v1422;
  void *v1423;
  const void *v1424;
  unsigned int (*v1425)(const void *, uint64_t, uint64_t);
  _QWORD *v1426;
  _QWORD *v1427;
  unint64_t v1428;
  unint64_t v1429;
  uint64_t v1430;
  _QWORD *v1431;
  _QWORD *v1432;
  unint64_t v1433;
  uint64_t *v1434;
  unint64_t v1435;
  uint64_t v1436;
  unint64_t v1437;
  unint64_t v1438;
  uint64_t v1439;
  unint64_t v1440;
  unint64_t v1441;
  int v1442;
  _QWORD *v1443;
  _QWORD *v1444;
  unint64_t v1445;
  unint64_t v1446;
  unint64_t v1447;
  int v1448;
  __int128 v1449;
  __int128 v1450;
  __int128 v1451;
  __int128 v1452;
  __int128 v1453;
  __int128 v1454;
  __int128 v1455;
  __int128 v1456;
  __int128 v1457;
  __int128 v1458;
  __int128 v1459;
  __int128 v1460;
  void *v1461;
  id v1462;
  void *v1463;
  id v1464;
  uint64_t v1465;
  id v1466;
  void *v1467;
  uint64_t v1468;
  size_t v1469;
  uint64_t v1470;
  unint64_t v1471;
  unint64_t v1472;
  _QWORD *v1473;
  _QWORD *v1474;
  unint64_t v1475;
  unint64_t v1476;
  void (*v1477)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1478;
  _QWORD *v1479;
  _QWORD *v1480;
  _QWORD *v1481;
  _QWORD *v1482;
  size_t v1483;
  size_t v1484;
  uint64_t v1485;
  int v1486;
  size_t v1487;
  size_t v1488;
  void (*v1489)(size_t, size_t, uint64_t);
  size_t v1490;
  size_t v1491;
  _BYTE *v1492;
  unint64_t v1493;
  unint64_t v1494;
  unint64_t v1495;
  unint64_t v1496;
  _QWORD *v1497;
  _QWORD *v1498;
  unint64_t v1499;
  unint64_t v1500;
  void *v1501;
  const void *v1502;
  unsigned int (*v1503)(const void *, uint64_t, uint64_t);
  _QWORD *v1504;
  _QWORD *v1505;
  unint64_t v1506;
  unint64_t v1507;
  uint64_t v1508;
  _QWORD *v1509;
  _QWORD *v1510;
  unint64_t v1511;
  uint64_t *v1512;
  unint64_t v1513;
  uint64_t v1514;
  unint64_t v1515;
  unint64_t v1516;
  uint64_t v1517;
  unint64_t v1518;
  unint64_t v1519;
  int v1520;
  _QWORD *v1521;
  _QWORD *v1522;
  unint64_t v1523;
  unint64_t v1524;
  unint64_t v1525;
  int v1526;
  __int128 v1527;
  __int128 v1528;
  __int128 v1529;
  __int128 v1530;
  __int128 v1531;
  __int128 v1532;
  __int128 v1533;
  __int128 v1534;
  __int128 v1535;
  __int128 v1536;
  __int128 v1537;
  __int128 v1538;
  void *v1539;
  id v1540;
  void *v1541;
  id v1542;
  uint64_t v1543;
  id v1544;
  void *v1545;
  unint64_t v1546;
  size_t v1547;
  unint64_t v1548;
  unint64_t v1549;
  _QWORD *v1550;
  _QWORD *v1551;
  unint64_t v1552;
  uint64_t v1553;
  unint64_t v1554;
  void (*v1555)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1556;
  _QWORD *v1557;
  _QWORD *v1558;
  _QWORD *v1559;
  _QWORD *v1560;
  size_t v1561;
  size_t v1562;
  uint64_t v1563;
  int v1564;
  size_t v1565;
  size_t v1566;
  void (*v1567)(size_t, size_t, uint64_t);
  size_t v1568;
  size_t v1569;
  _BYTE *v1570;
  unint64_t v1571;
  unint64_t v1572;
  unint64_t v1573;
  unint64_t v1574;
  _QWORD *v1575;
  _QWORD *v1576;
  unint64_t v1577;
  unint64_t v1578;
  void *v1579;
  const void *v1580;
  unsigned int (*v1581)(const void *, uint64_t, uint64_t);
  _QWORD *v1582;
  _QWORD *v1583;
  unint64_t v1584;
  unint64_t v1585;
  uint64_t v1586;
  _QWORD *v1587;
  _QWORD *v1588;
  unint64_t v1589;
  uint64_t *v1590;
  unint64_t v1591;
  uint64_t v1592;
  unint64_t v1593;
  unint64_t v1594;
  uint64_t v1595;
  unint64_t v1596;
  unint64_t v1597;
  int v1598;
  _QWORD *v1599;
  _QWORD *v1600;
  unint64_t v1601;
  unint64_t v1602;
  unint64_t v1603;
  int v1604;
  __int128 v1605;
  __int128 v1606;
  __int128 v1607;
  __int128 v1608;
  __int128 v1609;
  __int128 v1610;
  __int128 v1611;
  __int128 v1612;
  __int128 v1613;
  __int128 v1614;
  __int128 v1615;
  __int128 v1616;
  void *v1617;
  id v1618;
  void *v1619;
  id v1620;
  uint64_t v1621;
  id v1622;
  _OWORD *v1623;
  __int128 *v1624;
  __int128 v1625;
  unint64_t v1626;
  unint64_t v1627;
  __int128 v1628;
  _QWORD *v1629;
  uint64_t v1630;
  uint64_t v1631;
  _QWORD *v1632;
  uint64_t v1633;
  unint64_t v1634;
  unint64_t v1635;
  _QWORD *v1636;
  _QWORD *v1637;
  void *v1638;
  id v1639;
  _OWORD *v1640;
  __int128 *v1641;
  __int128 v1642;
  unint64_t v1643;
  unint64_t v1644;
  __int128 v1645;
  _QWORD *v1646;
  uint64_t v1647;
  uint64_t v1648;
  _QWORD *v1649;
  uint64_t v1650;
  unint64_t v1651;
  unint64_t v1652;
  void *v1653;
  const void *v1654;
  char *v1655;
  char *v1656;
  int v1657;
  uint64_t *v1658;
  uint64_t v1659;
  _QWORD *v1660;
  unint64_t v1661;
  unint64_t v1662;
  void (*v1663)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1664;
  unint64_t v1665;
  _QWORD *v1666;
  _QWORD *v1667;
  _QWORD *v1668;
  _QWORD *v1669;
  void *v1670;
  id v1671;
  _OWORD *v1672;
  __int128 *v1673;
  __int128 v1674;
  unint64_t v1675;
  unint64_t v1676;
  __int128 v1677;
  _QWORD *v1678;
  uint64_t v1679;
  uint64_t v1680;
  _QWORD *v1681;
  uint64_t v1682;
  unint64_t v1683;
  unint64_t v1684;
  _QWORD *v1685;
  _QWORD *v1686;
  _OWORD *v1687;
  __int128 *v1688;
  __int128 v1689;
  unint64_t v1690;
  unint64_t v1691;
  __int128 v1692;
  _QWORD *v1693;
  uint64_t v1694;
  uint64_t v1695;
  _QWORD *v1696;
  uint64_t v1697;
  unint64_t v1698;
  unint64_t v1699;
  _QWORD *v1700;
  _QWORD *v1701;
  void *v1702;
  id v1703;
  _OWORD *v1704;
  __int128 *v1705;
  __int128 v1706;
  unint64_t v1707;
  unint64_t v1708;
  __int128 v1709;
  _QWORD *v1710;
  uint64_t v1711;
  uint64_t v1712;
  _QWORD *v1713;
  uint64_t v1714;
  unint64_t v1715;
  unint64_t v1716;
  void *v1717;
  const void *v1718;
  char *v1719;
  char *v1720;
  int v1721;
  uint64_t v1722;
  uint64_t *v1723;
  uint64_t v1724;
  unint64_t v1725;
  uint64_t v1726;
  _QWORD *v1727;
  unint64_t v1728;
  unint64_t v1729;
  unint64_t v1730;
  void (*v1731)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1732;
  _QWORD *v1733;
  _QWORD *v1734;
  _QWORD *v1735;
  _QWORD *v1736;
  _QWORD *v1737;
  id v1738;
  _OWORD *v1739;
  __int128 *v1740;
  __int128 v1741;
  unint64_t v1742;
  unint64_t v1743;
  __int128 v1744;
  _QWORD *v1745;
  uint64_t v1746;
  uint64_t v1747;
  _QWORD *v1748;
  uint64_t v1749;
  unint64_t v1750;
  unint64_t v1751;
  _QWORD *v1752;
  _QWORD *v1753;
  unsigned int v1754;
  _QWORD *result;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  size_t v1764;
  size_t v1765;
  size_t v1766;
  size_t v1767;
  size_t v1768;
  size_t v1769;
  size_t v1770;
  unint64_t v1771;
  size_t v1772;
  size_t v1773;
  size_t v1774;
  unint64_t v1775;
  unint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  size_t v1781;
  size_t v1782;
  uint64_t v1783;
  size_t v1784;
  size_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  size_t v1790;
  size_t v1791;
  unint64_t v1792;
  unint64_t v1793;
  size_t v1794;
  unsigned int v1795;
  unsigned int v1796;
  unsigned int v1797;
  unint64_t v1798;
  unsigned int v1799;
  unsigned int v1800;
  unint64_t v1801;
  unint64_t v1802;
  unint64_t v1803;
  unint64_t v1804;
  uint64_t v1805;
  size_t v1806;
  unint64_t v1807;
  uint64_t v1808;
  unint64_t v1809;
  uint64_t v1810;
  unsigned int v1811;
  unsigned int v1812;
  unsigned int v1813;
  unsigned int v1814;
  unint64_t v1815;
  unint64_t v1816;
  unint64_t v1817;
  unint64_t v1818;
  unint64_t v1819;
  uint64_t v1820;
  unsigned int v1821;
  unsigned int v1822;
  uint64_t v1823;
  unsigned int v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  unint64_t v1828;
  unsigned int v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  size_t v1842;
  unint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  unint64_t v1847;
  uint64_t v1848;
  size_t __n;
  size_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t AssociatedTypeWitness;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  unsigned int v1868;
  uint64_t v1869;
  uint64_t v1870;
  unint64_t v1871;
  unint64_t v1872;
  unint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  uint64_t v1878;
  unint64_t v1879;
  unint64_t v1880;
  unint64_t v1881;
  uint64_t v1882;
  uint64_t v1883;
  uint64_t v1884;
  unsigned int v1885;
  unint64_t v1886;
  unint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  unint64_t v1890;
  void *v1891;
  unint64_t v1892;
  unint64_t v1893;
  unint64_t v1894;
  uint64_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  void *v1898;
  uint64_t v1899;
  uint64_t v1900;
  uint64_t v1901;
  uint64_t v1902;
  uint64_t v1903;
  size_t v1904;
  size_t v1905;
  uint64_t v1907;
  size_t v1908;
  size_t v1909;
  void (*v1910)(_QWORD *, _QWORD *, uint64_t);
  size_t v1911;
  size_t v1912;
  void *v1913;
  size_t v1914;
  uint64_t v1915;
  uint64_t v1916;
  uint64_t v1917;
  _QWORD *v1918;
  _QWORD *v1919;
  _QWORD *v1920;
  uint64_t v1921;
  uint64_t v1922;
  uint64_t v1923;
  uint64_t v1924;
  uint64_t v1925;
  void *v1926;
  void *v1927;
  uint64_t v1928;
  uint64_t v1929;
  size_t v1930;
  void *v1931;
  size_t v1932;
  void *v1933;
  void *v1934;
  void *v1935;
  void *v1936;
  uint64_t v1937;
  void *v1938;
  void *v1939;
  size_t v1940;
  void *v1941;
  void *v1942;
  const void *v1943;
  const void *v1944;
  char *v1945;
  _QWORD *v1946;
  char *v1947;
  _QWORD *v1948;
  _QWORD *v1949;
  _QWORD *v1950;

  v4 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v1921 = *(_QWORD *)(a3 + 24);
  v1852 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v1852 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v1820 = v6 + v8;
  v1873 = (v6 + v8) & ~v8;
  v9 = *(_QWORD *)(v7 + 64);
  v1887 = v9;
  v10 = v1873 + v9;
  v1893 = v1873 + v9;
  if (v9 <= v6)
    v9 = v6;
  v11 = v9 + 1;
  v1909 = v9 + 1;
  if (v9 + 1 > v10)
    v10 = v9 + 1;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v1875 = v12 | v8;
  v1879 = v9;
  v1847 = (v12 | v8) + v11;
  v1886 = (v1847 & ~(v12 | v8)) + v11;
  if (v1886 > v10)
    v10 = (v1847 & ~(v12 | v8)) + v11;
  v1892 = v10;
  v1853 = v5;
  v13 = *(_DWORD *)(v5 + 84);
  v1882 = v4;
  v1836 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v1836 - 8);
  v15 = *(_DWORD *)(v14 + 84);
  v1832 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v1832 - 8);
  v17 = *(_DWORD *)(v16 + 84);
  v1795 = v17;
  v1813 = v15;
  if (v15 > v17)
    v17 = v15;
  v1799 = v17;
  if (v17 <= 0x7FFFFFFE)
    v17 = 2147483646;
  v1885 = v13;
  v1824 = v17;
  if (v17 <= v13)
    v18 = v13;
  else
    v18 = v17;
  v1846 = sub_23B1C5BDC();
  v19 = *(_QWORD *)(v1846 - 8);
  v20 = *(_DWORD *)(v19 + 84);
  if (v20 <= 0x7FFFFFFE)
    v21 = 2147483646;
  else
    v21 = *(_DWORD *)(v19 + 84);
  v1868 = v21;
  if (v18 > v21)
    v21 = v18;
  v1797 = v21;
  if (v21 <= 0x7FFFFFFF)
    v21 = 0x7FFFFFFF;
  v1812 = v21;
  v1821 = *(_DWORD *)(v19 + 84);
  v1894 = v6;
  v1834 = v6 + v12;
  v22 = v12;
  v1915 = v12;
  v23 = *(unsigned __int8 *)(v16 + 80);
  v24 = *(_DWORD *)(v14 + 80) & 0xF8 | v23 | 7;
  v1808 = v6 + v24;
  v1937 = v24;
  v1835 = v14;
  v1840 = *(_QWORD *)(v14 + 64) + 7;
  v1830 = v23 + 8;
  v1831 = v16;
  v1855 = v23;
  v1825 = *(_QWORD *)(v16 + 64) + 7;
  v1905 = ((((v1825 + ((v23 + 8 + (v1840 & 0xFFFFFFFFFFFFFFF8)) & ~v23)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  v25 = *(unsigned __int8 *)(v19 + 80);
  v1859 = v25 | 7;
  v1907 = (v25 | 7) + 16;
  v26 = (v1907 + ((v6 + v24 + ((v6 + v12) & ~v12)) & ~v24) + v1905) & ~(v25 | 7);
  v1848 = v25 + 12;
  v1845 = *(_QWORD *)(v1846 - 8);
  v27 = *(_QWORD *)(v19 + 64);
  v1844 = v27 + v25;
  v1794 = v27 + 12;
  v1841 = v25 + 10;
  v1850 = v27;
  if (v20)
    v28 = *(_QWORD *)(v19 + 64);
  else
    v28 = v27 + 1;
  __n = v28;
  v1828 = (v25
         + 10
         + ((((((v27 + 12 + ((v27 + v25 + ((v25 + 12) & ~v25)) & ~v25)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v25;
  v1842 = v28 + 7;
  v29 = ((((((((((v28 + 7 + v1828) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v1823 = v26;
  v30 = (((v26 + v29 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v1904 = v30 + 16;
  v31 = v24 | v22 | v25;
  v1819 = v30 + 23;
  v1871 = ((v30 + 23 + ((v30 + 16 + v31) & ~v31)) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1851 = v7;
  v32 = *(_DWORD *)(v7 + 84);
  v1838 = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(v1838 - 8);
  v34 = *(_DWORD *)(v33 + 84);
  v35 = swift_getAssociatedTypeWitness();
  v36 = v31;
  v1833 = v35;
  v37 = *(_QWORD *)(v35 - 8);
  v38 = *(_DWORD *)(v37 + 84);
  v1814 = v34;
  if (v34 > v38)
    v38 = v34;
  v1800 = v38;
  if (v38 <= 0x7FFFFFFE)
    v38 = 2147483646;
  v1829 = v38;
  if (v38 <= v32)
    v38 = v32;
  if (v38 <= v1868)
    v38 = v1868;
  v1796 = v38;
  if (v38 <= 0x7FFFFFFF)
    v38 = 0x7FFFFFFF;
  v1822 = v38;
  v1827 = v1887 + v8;
  v39 = *(unsigned __int8 *)(v37 + 80);
  v40 = *(_DWORD *)(v33 + 80) & 0xF8 | v39 | 7;
  v1810 = v1887 + v40;
  v1837 = v33;
  v1869 = *(_QWORD *)(v33 + 64) + 7;
  v1839 = v39 + 8;
  v1826 = *(_QWORD *)(v37 + 64) + 7;
  v41 = ((((v1826 + ((v39 + 8 + (v1869 & 0xFFFFFFFFFFFFFFF8)) & ~v39)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v1843 = v29;
  v1807 = (v1907 + ((v1887 + v40 + ((v1887 + v8) & ~v8)) & ~v40) + v41) & ~v1859;
  v42 = (((v1807 + v29 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v43 = v42 + 16;
  v44 = v40 | v8;
  v45 = v25;
  v46 = v40 | v8 | v25;
  v47 = v42 + ((v42 + 16 + v46) & ~v46);
  v48 = v6;
  v1793 = v31 + v6;
  v49 = v1904 + ((v31 + v6) & ~v31);
  v50 = (v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  v51 = ((v50 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1870 = v8;
  v52 = (v49 + v8) & ~v8;
  v1811 = v32;
  if (v32)
    v53 = v1887;
  else
    v53 = v1887 + 1;
  v54 = ((((((v53 + v40 + v52) & ~v40) + v41 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1791 = v53 + v40;
  v55 = ((v50 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v56 = *(_QWORD *)(v1882 - 8);
  v57 = *(unsigned __int8 *)(v56 + 80);
  v1789 = v56;
  v58 = *(_QWORD *)(v56 + 64);
  if (!*(_DWORD *)(v56 + 84))
    ++v58;
  if (v6 > v51)
    v51 = v6;
  if (v54 <= v41 + ((v53 + v40 + v1873) & ~v40) + 16)
    v54 = v41 + ((v53 + v40 + v1873) & ~v40) + 16;
  v1788 = v6 + v57;
  v1785 = v58;
  if (v55 <= ((v6 + v57) & ~v57) + v58)
    v55 = ((v6 + v57) & ~v57) + v58;
  if (v51 <= v54)
    v51 = v54;
  if (v51 <= v55)
    v59 = v55;
  else
    v59 = v51;
  if (!v13)
    v48 = v6 + 1;
  v60 = *(_QWORD *)(v1921 - 8);
  v1874 = v46;
  v1792 = v46 + v1887;
  v61 = v43 + ((v46 + v1887) & ~v46);
  v62 = (v61 + 7) & 0xFFFFFFFFFFFFFFF8;
  v63 = ((v62 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v64 = v1915;
  v65 = v1937;
  v66 = ((((((v48 + v65 + ((v61 + v64) & ~v64)) & ~v65) + v1905 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v1787 = v1887 + v1915;
  v1790 = v48 + v1937;
  v67 = v1905 + ((v48 + v65 + ((v1887 + v64) & ~v64)) & ~v65) + 16;
  if (*(_DWORD *)(v60 + 84))
    v68 = *(_QWORD *)(v60 + 64);
  else
    v68 = *(_QWORD *)(v60 + 64) + 1;
  if (v1887 > v63)
    v63 = v1887;
  if (v66 > v67)
    v67 = v66;
  v69 = ((v62 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v70 = *(unsigned __int8 *)(v60 + 80);
  v1786 = v1887 + v70;
  v1784 = v68;
  if (v69 <= ((v1887 + v70) & ~v70) + v68)
    v69 = ((v1887 + v70) & ~v70) + v68;
  if (v63 <= v67)
    v63 = v67;
  if (v63 <= v69)
    v63 = v69;
  v1798 = v63;
  v71 = v63 + 1;
  v1801 = v59;
  if (v71 <= v59 + 1)
    v72 = v59 + 1;
  else
    v72 = v71;
  v73 = v1879 + 2;
  if (v1909 > v1879 + 2)
    v74 = v1879 + 1;
  else
    v74 = v1879 + 2;
  if (v74 <= v1871)
    v74 = v1871;
  v75 = ((v47 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1806 = v48;
  v1805 = v44;
  v1802 = ((((((((v1937 + ((((v48 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v1937) + v1905 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + v44
        + 8;
  v1803 = ((((((((v40 + 9 + ((((v53 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v40) + v41 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  v76 = ((((v1803 + (v1802 & ~v44) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v74 <= v75)
    v77 = ((v47 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v77 = v74;
  if (v77 <= v1904)
    v77 = v1904;
  if (v77 <= v43)
    v77 = v43;
  if (v77 <= v1886 + 2)
    v77 = v1886 + 2;
  if (v77 <= ((v1879 + 9) & 0xFFFFFFFFFFFFFFF8) + 8)
    v77 = ((v1879 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v77 <= (v1879 & 0xFFFFFFFFFFFFFFF8) + 16)
    v77 = (v1879 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v77 <= v1893)
    v77 = v1893;
  if (v77 <= ((v1875 + 1) & ~v1875) + v1909)
    v77 = ((v1875 + 1) & ~v1875) + v1909;
  v1809 = v72;
  if (v77 <= v72 + 1)
    v77 = v72 + 1;
  if (v77 <= v1886)
    v77 = v1886;
  if (v77 <= v76)
    v77 = v76;
  if (v77 <= v1892)
    v77 = v1892;
  if (v77 <= 0x38)
    v78 = 56;
  else
    v78 = v77;
  v1872 = ((v1875 + 1) & ~v1875) + v1909;
  v1817 = ((v1879 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1818 = (v1879 & 0xFFFFFFFFFFFFFFF8) + 16;
  v1815 = v1886 + 2;
  v1816 = v75;
  if (v78 > 3)
    goto LABEL_104;
  v79 = ((1 << (8 * v78)) + 5) >> (8 * v78);
  if (v79 > 0xFFD8)
  {
    v80 = *(_DWORD *)((char *)a2 + v78);
    if (v80 < 0x27)
      goto LABEL_113;
    goto LABEL_109;
  }
  if (v79 <= 0xD8)
  {
LABEL_104:
    v80 = *((unsigned __int8 *)a2 + v78);
    if (v80 < 0x27)
      goto LABEL_113;
LABEL_109:
    if (v78 <= 3)
      v81 = v78;
    else
      v81 = 4;
    __asm { BR              X15 }
  }
  v80 = *(unsigned __int16 *)((char *)a2 + v78);
  if (v80 >= 0x27)
    goto LABEL_109;
LABEL_113:
  v1782 = v53 + 7;
  v1783 = v40 + 9;
  v1781 = v53;
  v1804 = v76;
  v82 = ~v1870;
  v83 = ~v1875;
  v84 = ~v1915;
  v85 = ~v1937;
  v86 = ~v1855;
  v87 = ~v1859;
  v88 = ~v45;
  v89 = ~v40;
  switch(v80)
  {
    case 0u:
      v90 = v78;
      (*(void (**)(_QWORD *))(v1853 + 16))(a1);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1851 + 16))(((unint64_t)a1 + v1820) & v82, ((unint64_t)a2 + v1820) & v82, v1852);
      if (v90 > 3)
        goto LABEL_115;
      v248 = ((1 << (8 * v90)) + 5) >> (8 * v90);
      if (v248 > 0xFFD8)
      {
        *(_DWORD *)((char *)a1 + v90) = 0;
      }
      else if (v248 <= 0xD8)
      {
LABEL_115:
        *((_BYTE *)a1 + v90) = 0;
      }
      else
      {
        *(_WORD *)((char *)a1 + v90) = 0;
      }
      return a1;
    case 1u:
      v93 = *((unsigned __int8 *)a2 + v1879);
      if (v93 >= 2)
      {
        if (v1879 <= 3)
          v94 = v1879;
        else
          v94 = 4;
        __asm { BR              X12 }
      }
      v249 = v78;
      v488 = v93 == 1;
      if (v93 == 1)
        v489 = v1851;
      else
        v489 = v1853;
      (*(void (**)(_QWORD *))(v489 + 16))(a1);
      *((_BYTE *)a1 + v1879) = v488;
      if (v249 > 3)
        goto LABEL_446;
      v491 = 1;
      v492 = ((1 << (8 * v249)) + 5) >> (8 * v249);
      if (v492 > 0xFFD8)
        goto LABEL_734;
      if (v492 > 0xD8)
        goto LABEL_732;
LABEL_446:
      v490 = 1;
      goto LABEL_728;
    case 2u:
      v95 = *((unsigned __int8 *)a2 + v1879);
      if (v95 >= 2)
      {
        if (v1879 <= 3)
          v96 = v1879;
        else
          v96 = 4;
        __asm { BR              X12 }
      }
      v249 = v78;
      v493 = v95 == 1;
      if (v95 == 1)
        v494 = v1851;
      else
        v494 = v1853;
      (*(void (**)(_QWORD *))(v494 + 16))(a1);
      *((_BYTE *)a1 + v1879) = v493;
      if (v249 > 3)
        goto LABEL_454;
      v495 = ((1 << (8 * v249)) + 5) >> (8 * v249);
      if (v495 > 0xFFD8)
      {
        v491 = 2;
        goto LABEL_734;
      }
      if (v495 <= 0xD8)
      {
LABEL_454:
        v490 = 2;
        goto LABEL_728;
      }
      LOWORD(v491) = 2;
      goto LABEL_732;
    case 3u:
      v97 = *((unsigned __int8 *)a2 + v1879);
      if (v97 >= 2)
      {
        if (v1879 <= 3)
          v98 = v1879;
        else
          v98 = 4;
        __asm { BR              X12 }
      }
      v249 = v78;
      v496 = v97 == 1;
      if (v97 == 1)
        v497 = v1851;
      else
        v497 = v1853;
      (*(void (**)(_QWORD *))(v497 + 16))(a1);
      *((_BYTE *)a1 + v1879) = v496;
      if (v249 > 3)
        goto LABEL_463;
      v498 = ((1 << (8 * v249)) + 5) >> (8 * v249);
      if (v498 > 0xFFD8)
      {
        v491 = 3;
        goto LABEL_734;
      }
      if (v498 <= 0xD8)
      {
LABEL_463:
        v490 = 3;
        goto LABEL_728;
      }
      LOWORD(v491) = 3;
      goto LABEL_732;
    case 4u:
      v99 = *((unsigned __int8 *)a2 + v1879);
      if (v99 >= 2)
      {
        if (v1879 <= 3)
          v100 = v1879;
        else
          v100 = 4;
        __asm { BR              X12 }
      }
      v250 = ~v1875;
      v499 = v78;
      v500 = v99 == 1;
      if (v99 == 1)
        v501 = v1851;
      else
        v501 = v1853;
      if (v99 == 1)
        v502 = v1852;
      else
        v502 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v501 + 16))(a1, a2, v502);
      *((_BYTE *)a1 + v1879) = v500;
      v503 = ((unint64_t)a1 + v1847) & v250;
      v504 = *(unsigned __int8 *)((((unint64_t)a2 + v1847) & v250) + v1879);
      if (v504 >= 2)
      {
        if (v1879 <= 3)
          v505 = v1879;
        else
          v505 = 4;
        __asm { BR              X12 }
      }
      v612 = v504 == 1;
      if (v504 == 1)
        v613 = v1851;
      else
        v613 = v1853;
      (*(void (**)(unint64_t))(v613 + 16))(v503);
      *(_BYTE *)(v503 + v1879) = v612;
      if (v499 > 3)
        goto LABEL_739;
      v614 = ((1 << (8 * v499)) + 5) >> (8 * v499);
      if (v614 > 0xFFD8)
      {
        v520 = 4;
        goto LABEL_755;
      }
      if (v614 <= 0xD8)
      {
LABEL_739:
        v517 = 4;
        goto LABEL_749;
      }
      v519 = 4;
      goto LABEL_753;
    case 5u:
      v1888 = ~v1915;
      v1876 = ~v1937;
      v1880 = v72 + 1;
      v1916 = ~v36;
      v1922 = ~v1859;
      v1883 = v88;
      v101 = v1885;
      v102 = v1812;
      v103 = v1834;
      v1762 = v36;
      v1764 = v43;
      v1856 = ~v1855;
      if (v1885 != v1812)
      {
        v105 = a2;
        v109 = v1888;
        v251 = ((unint64_t)a2 + v1834) & v1888;
        v108 = ~v1937;
        v252 = (v251 + v6 + v1937) & v1876;
        v106 = AssociatedTypeWitness;
        v104 = v1853;
        if (v1824 == v1812)
        {
          if (v1813 == v1824)
          {
            v107 = (*(uint64_t (**)(unint64_t))(v1835 + 48))((v251 + v1894 + v1937) & v1876);
            goto LABEL_761;
          }
          v484 = (unint64_t *)((v1840 + v252) & 0xFFFFFFFFFFFFFFF8);
          if (v1799 > 0x7FFFFFFE)
          {
            v107 = (*(uint64_t (**)(unint64_t))(v1831 + 48))(((unint64_t)v484 + v1830) & v86);
            goto LABEL_761;
          }
          v485 = *v484;
        }
        else
        {
          v362 = v1905 + v252;
          if ((v1797 & 0x80000000) == 0)
          {
            v363 = *(_QWORD *)(v362 + 8);
            if (v363 >= 0xFFFFFFFF)
              LODWORD(v363) = -1;
            v107 = v363 + 1;
            goto LABEL_761;
          }
          v618 = (v1848 + ((v1907 + v362) & v1922)) & v1883;
          if (v1821 > 0x7FFFFFFD)
          {
            v107 = (*(uint64_t (**)(uint64_t))(v1845 + 48))(v618);
            goto LABEL_761;
          }
          v485 = *(_QWORD *)(((v1794 + ((v1844 + v618) & v1883)) & 0xFFFFFFFFFFFFF8) + 8);
        }
        if (v485 >= 0xFFFFFFFF)
          LODWORD(v485) = -1;
        if ((v485 + 1) >= 2)
          goto LABEL_762;
        goto LABEL_765;
      }
      v104 = v1853;
      v105 = a2;
      v106 = AssociatedTypeWitness;
      v107 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v1853 + 48))(a2, v1885, AssociatedTypeWitness);
      v108 = ~v1937;
      v109 = v1888;
LABEL_761:
      if (v107)
      {
LABEL_762:
        v620 = v1904;
        memcpy(a1, v105, v1904);
LABEL_763:
        v621 = __n;
        goto LABEL_798;
      }
      v251 = ((unint64_t)v105 + v1834) & v109;
      v252 = (v251 + v1894 + v1937) & v108;
LABEL_765:
      v622 = *(void (**)(_QWORD *, const void *, uint64_t))(v104 + 16);
      v622(a1, v105, v106);
      v623 = ((unint64_t)a1 + v1834) & v109;
      v622((_QWORD *)v623, (const void *)v251, v106);
      v624 = (v623 + v1894 + v1937) & v108;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1835 + 16))(v624, v252, v1836);
      v625 = (_QWORD *)((v1840 + v624) & 0xFFFFFFFFFFFFFFF8);
      v626 = (_QWORD *)((v1840 + v252) & 0xFFFFFFFFFFFFFFF8);
      *v625 = *v626;
      v627 = ((unint64_t)v625 + v1830) & v1856;
      v628 = ((unint64_t)v626 + v1830) & v1856;
      v629 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1831 + 16);
      swift_bridgeObjectRetain();
      v629(v627, v628, v1832);
      v630 = (_QWORD *)((v1825 + v627) & 0xFFFFFFFFFFFFF8);
      v631 = (_QWORD *)((v1825 + v628) & 0xFFFFFFFFFFFFF8);
      *v630 = *v631;
      v632 = (_QWORD *)(((unint64_t)v630 + 15) & 0xFFFFFFFFFFFFFFF8);
      v633 = (_QWORD *)(((unint64_t)v631 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v632 = *v633;
      v632[1] = v633[1];
      v634 = (_QWORD *)(v1905 + v624);
      *v634 = *(_QWORD *)(v1905 + v252);
      v634[1] = *(_QWORD *)(v1905 + v252 + 8);
      v635 = (v1907 + v1905 + v624) & v1922;
      v636 = (v1907 + v1905 + v252) & v1922;
      *(_BYTE *)v635 = *(_BYTE *)v636;
      v637 = v635 | 4;
      v638 = *(_DWORD *)(v636 | 4);
      *(_BYTE *)(v637 + 4) = *(_BYTE *)((v636 | 4) + 4);
      *(_DWORD *)v637 = v638;
      *(_WORD *)(v635 + 10) = *(_WORD *)(v636 + 0xA);
      v1940 = v635;
      v639 = (v1848 + v635) & v1883;
      v640 = (v1848 + v636) & v1883;
      v641 = *(void (**)(size_t, size_t, uint64_t))(v1845 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v641(v639, v640, v1846);
      v642 = (v1844 + v639) & v1883;
      v643 = (v1844 + v640) & v1883;
      v641(v642, v643, v1846);
      v644 = (_BYTE *)(v642 + v1850);
      *v644 = *(_BYTE *)(v643 + v1850);
      v644[1] = *(_BYTE *)(v643 + v1850 + 1);
      v644[2] = *(_BYTE *)(v643 + v1850 + 2);
      v644[3] = *(_BYTE *)(v643 + v1850 + 3);
      v644[4] = *(_BYTE *)(v643 + v1850 + 4);
      v645 = (v642 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
      v646 = (v643 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v645 = *(_QWORD *)v646;
      *(_QWORD *)(v645 + 8) = *(_QWORD *)(v646 + 8);
      *(_BYTE *)(v645 + 16) = *(_BYTE *)(v646 + 16);
      *(_BYTE *)(v645 + 17) = *(_BYTE *)(v646 + 17);
      *(_BYTE *)(v645 + 18) = *(_BYTE *)(v646 + 18);
      *(_BYTE *)(v645 + 19) = *(_BYTE *)(v646 + 19);
      v647 = (v645 + 27) & 0xFFFFFFFFFFFFFFF8;
      v648 = (v646 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v647 = *(_QWORD *)v648;
      *(_BYTE *)(v647 + 8) = *(_BYTE *)(v648 + 8);
      *(_BYTE *)(v647 + 9) = *(_BYTE *)(v648 + 9);
      *(_BYTE *)(v647 + 10) = *(_BYTE *)(v648 + 10);
      *(_BYTE *)(v647 + 11) = *(_BYTE *)(v648 + 11);
      *(_BYTE *)(v647 + 12) = *(_BYTE *)(v648 + 12);
      v649 = (_QWORD *)((v645 + 47) & 0xFFFFFFFFFFFFF8);
      v650 = (_QWORD *)((v646 + 47) & 0xFFFFFFFFFFFFF8);
      *v649 = *v650;
      v651 = ((unint64_t)v649 + 15) & 0xFFFFFFFFFFFFFFF8;
      v652 = ((unint64_t)v650 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v651 = *(_QWORD *)v652;
      *(_BYTE *)(v651 + 8) = *(_BYTE *)(v652 + 8);
      *(_BYTE *)(v651 + 9) = *(_BYTE *)(v652 + 9);
      v653 = (void *)((v1841 + v651) & v1883);
      v654 = (const void *)((v1841 + v652) & v1883);
      v655 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1845 + 48);
      swift_bridgeObjectRetain();
      if (v655(v654, 1, v1846))
      {
        memcpy(v653, v654, __n);
      }
      else
      {
        v641((size_t)v653, (size_t)v654, v1846);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1845 + 56))(v653, 0, 1, v1846);
      }
      v656 = (_QWORD *)(((unint64_t)v653 + v1842) & 0xFFFFFFFFFFFFFFF8);
      v657 = (_QWORD *)(((unint64_t)v654 + v1842) & 0xFFFFFFFFFFFFFFF8);
      *v656 = *v657;
      v658 = ((unint64_t)v656 + 15) & 0xFFFFFFFFFFFFFFF8;
      v659 = ((unint64_t)v657 + 15) & 0xFFFFFFFFFFFFFFF8;
      v660 = *(_QWORD *)v659;
      *(_BYTE *)(v658 + 8) = *(_BYTE *)(v659 + 8);
      *(_QWORD *)v658 = v660;
      v661 = (_QWORD *)(((unint64_t)v656 + 31) & 0xFFFFFFFFFFFFF8);
      v662 = (_QWORD *)(((unint64_t)v657 + 31) & 0xFFFFFFFFFFFFF8);
      *v661 = *v662;
      v663 = ((unint64_t)v661 + 15) & 0xFFFFFFFFFFFFFFF8;
      v664 = (uint64_t *)(((unint64_t)v662 + 15) & 0xFFFFFFFFFFFFFFF8);
      v665 = v664[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v105 = a2;
      v103 = v1834;
      if ((v665 & 0x3000000000000000) != 0)
      {
        *(_OWORD *)v663 = *(_OWORD *)v664;
      }
      else
      {
        v666 = *v664;
        sub_23AAAE668(*v664, v665);
        *(_QWORD *)v663 = v666;
        *(_QWORD *)(v663 + 8) = v665;
      }
      v667 = (v663 + 19) & 0xFFFFFFFFFFFFFFF8;
      v668 = ((unint64_t)v664 + 19) & 0xFFFFFFFFFFFFFFF8;
      v669 = *(_QWORD *)v668;
      *(_BYTE *)(v667 + 8) = *(_BYTE *)(v668 + 8);
      *(_QWORD *)v667 = v669;
      *(_BYTE *)(v667 + 9) = *(_BYTE *)(v668 + 9);
      v670 = (v667 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v671 = (v668 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v672 = *(_DWORD *)v671;
      *(_BYTE *)(v670 + 4) = *(_BYTE *)(v671 + 4);
      *(_DWORD *)v670 = v672;
      v673 = (_QWORD *)((v667 + 25) & 0xFFFFFFFFFFFFFFF8);
      v674 = (_QWORD *)((v668 + 25) & 0xFFFFFFFFFFFFFFF8);
      *v673 = *v674;
      v673[1] = v674[1];
      v675 = v1843 + v1940;
      v676 = v1843 + v636;
      v677 = *(_QWORD *)(v676 + 16);
      if (v677 >= 0xFFFFFFFF)
        LODWORD(v677) = -1;
      v678 = v677 - 1;
      swift_bridgeObjectRetain();
      v106 = AssociatedTypeWitness;
      if (v678 < 0)
      {
        *(_QWORD *)v675 = *(_QWORD *)v676;
        *(_BYTE *)(v675 + 8) = *(_BYTE *)(v676 + 8);
        *(_BYTE *)(v675 + 9) = *(_BYTE *)(v676 + 9);
        v691 = *(void **)(v676 + 16);
        v692 = v691;
        *(_QWORD *)(v675 + 16) = v691;
        v693 = *(void **)(v676 + 24);
        v694 = v693;
        *(_QWORD *)(v675 + 24) = v693;
        *(_BYTE *)(v675 + 32) = *(_BYTE *)(v676 + 32);
        *(_BYTE *)(v675 + 33) = *(_BYTE *)(v676 + 33);
        *(_BYTE *)(v675 + 34) = *(_BYTE *)(v676 + 34);
        *(_QWORD *)(v675 + 40) = *(_QWORD *)(v676 + 40);
        *(_QWORD *)(v675 + 48) = *(_QWORD *)(v676 + 48);
        *(_QWORD *)(v675 + 56) = *(_QWORD *)(v676 + 56);
        *(_QWORD *)(v675 + 64) = *(_QWORD *)(v676 + 64);
        *(_BYTE *)(v675 + 72) = *(_BYTE *)(v676 + 72);
        *(_QWORD *)(v675 + 80) = *(_QWORD *)(v676 + 80);
        *(_QWORD *)(v675 + 88) = *(_QWORD *)(v676 + 88);
        v1941 = *(void **)(v676 + 96);
        *(_QWORD *)(v675 + 96) = v1941;
        *(_BYTE *)(v675 + 104) = *(_BYTE *)(v676 + 104);
        *(_BYTE *)(v675 + 105) = *(_BYTE *)(v676 + 105);
        *(_QWORD *)(v675 + 112) = *(_QWORD *)(v676 + 112);
        *(_QWORD *)(v675 + 120) = *(_QWORD *)(v676 + 120);
        *(_QWORD *)(v675 + 128) = *(_QWORD *)(v676 + 128);
        *(_QWORD *)(v675 + 136) = *(_QWORD *)(v676 + 136);
        *(_QWORD *)(v675 + 144) = *(_QWORD *)(v676 + 144);
        *(_QWORD *)(v675 + 152) = *(_QWORD *)(v676 + 152);
        *(_QWORD *)(v675 + 160) = *(_QWORD *)(v676 + 160);
        *(_QWORD *)(v675 + 168) = *(_QWORD *)(v676 + 168);
        *(_BYTE *)(v675 + 176) = *(_BYTE *)(v676 + 176);
        *(_QWORD *)(v675 + 184) = *(_QWORD *)(v676 + 184);
        v695 = *(_QWORD *)(v676 + 192);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v696 = v1941;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v695)
        {
          *(_QWORD *)(v675 + 192) = v695;
          *(_QWORD *)(v675 + 200) = *(_QWORD *)(v676 + 200);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v675 + 192) = *(_OWORD *)(v676 + 192);
        }
        v106 = AssociatedTypeWitness;
        v105 = a2;
        v104 = v1853;
        v109 = v1888;
        v103 = v1834;
        *(_QWORD *)(v675 + 208) = *(_QWORD *)(v676 + 208);
        *(_QWORD *)(v675 + 216) = *(_QWORD *)(v676 + 216);
        *(_QWORD *)(v675 + 224) = *(_QWORD *)(v676 + 224);
        *(_QWORD *)(v675 + 232) = *(_QWORD *)(v676 + 232);
        *(_QWORD *)(v675 + 240) = *(_QWORD *)(v676 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v679 = *(_OWORD *)v676;
        v680 = *(_OWORD *)(v676 + 16);
        v681 = *(_OWORD *)(v676 + 48);
        *(_OWORD *)(v675 + 32) = *(_OWORD *)(v676 + 32);
        *(_OWORD *)(v675 + 48) = v681;
        *(_OWORD *)v675 = v679;
        *(_OWORD *)(v675 + 16) = v680;
        v682 = *(_OWORD *)(v676 + 64);
        v683 = *(_OWORD *)(v676 + 80);
        v684 = *(_OWORD *)(v676 + 112);
        *(_OWORD *)(v675 + 96) = *(_OWORD *)(v676 + 96);
        *(_OWORD *)(v675 + 112) = v684;
        *(_OWORD *)(v675 + 64) = v682;
        *(_OWORD *)(v675 + 80) = v683;
        v685 = *(_OWORD *)(v676 + 128);
        v686 = *(_OWORD *)(v676 + 144);
        v687 = *(_OWORD *)(v676 + 176);
        *(_OWORD *)(v675 + 160) = *(_OWORD *)(v676 + 160);
        *(_OWORD *)(v675 + 176) = v687;
        *(_OWORD *)(v675 + 128) = v685;
        *(_OWORD *)(v675 + 144) = v686;
        v688 = *(_OWORD *)(v676 + 192);
        v689 = *(_OWORD *)(v676 + 208);
        v690 = *(_OWORD *)(v676 + 224);
        *(_QWORD *)(v675 + 240) = *(_QWORD *)(v676 + 240);
        *(_OWORD *)(v675 + 208) = v689;
        *(_OWORD *)(v675 + 224) = v690;
        *(_OWORD *)(v675 + 192) = v688;
        v104 = v1853;
      }
      v775 = (_OWORD *)((v675 + 255) & 0xFFFFFFFFFFFFFFF8);
      v776 = (__int128 *)((v676 + 255) & 0xFFFFFFFFFFFFFFF8);
      v777 = *v776;
      *(_OWORD *)((char *)v775 + 9) = *(__int128 *)((char *)v776 + 9);
      *v775 = v777;
      v778 = (v675 + 287) & 0xFFFFFFFFFFFFFFF8;
      v779 = (v676 + 287) & 0xFFFFFFFFFFFFFFF8;
      v780 = *(_OWORD *)v779;
      *(_BYTE *)(v778 + 16) = *(_BYTE *)(v779 + 16);
      *(_OWORD *)v778 = v780;
      v781 = (_QWORD *)((v675 + 311) & 0xFFFFFFFFFFFFF8);
      v782 = (v676 + 311) & 0xFFFFFFFFFFFFF8;
      v783 = *(_QWORD *)v782;
      v782 += 15;
      *v781 = v783;
      v784 = (_QWORD *)(((unint64_t)v781 + 15) & 0xFFFFFFFFFFFFFFF8);
      v785 = *(_QWORD *)(v782 & 0xFFFFFFFFFFFFFFF8);
      v786 = *(_QWORD *)((v782 & 0xFFFFFFFFFFFFFFF8) + 8);
      sub_23AA7F2D4(v785, v786);
      *v784 = v785;
      v784[1] = v786;
      v621 = v1850;
      v620 = v1904;
      v108 = v1876;
      v101 = v1885;
      v102 = v1812;
      if (!v1821)
        goto LABEL_763;
LABEL_798:
      v787 = ((((v1823
               + 327
               + ((((((((((v1828 + 7 + v621) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 19) & 0xFFFFFFFFFFFFFFF8)
                 + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16;
      v1898 = (void *)(((unint64_t)a1 + v1762 + v787) & v1916);
      v788 = v1880;
      v1890 = v1828 + 7;
      v1878 = v1823 + 327;
      v1943 = (const void *)(((unint64_t)v105 + v1762 + v787) & v1916);
      if (v101 != v102)
      {
        v791 = v102;
        v792 = (v103 + (((unint64_t)v105 + v1762 + v787) & v1916)) & v109;
        v790 = v1808;
        v793 = (v1808 + v792) & v108;
        if (v1824 == v791)
        {
          if (v1813 == v1824)
          {
            v789 = (*(uint64_t (**)(unint64_t))(v1835 + 48))((v1808 + v792) & v108);
            goto LABEL_812;
          }
          v796 = (unint64_t *)((v1840 + v793) & 0xFFFFFFFFFFFFFFF8);
          if (v1799 > 0x7FFFFFFE)
          {
            v789 = (*(uint64_t (**)(unint64_t))(v1831 + 48))(((unint64_t)v796 + v1830) & v1856);
            goto LABEL_812;
          }
          v797 = *v796;
        }
        else
        {
          v794 = v793 + v1905;
          if ((v1797 & 0x80000000) == 0)
          {
            v795 = *(_QWORD *)(v794 + 8);
            if (v795 >= 0xFFFFFFFF)
              LODWORD(v795) = -1;
            v789 = v795 + 1;
            goto LABEL_812;
          }
          v798 = (v1848 + ((v1907 + v794) & v1922)) & v1883;
          if (v1821 > 0x7FFFFFFD)
          {
            v789 = (*(uint64_t (**)(uint64_t))(v1845 + 48))(v798);
            goto LABEL_812;
          }
          v797 = *(_QWORD *)(((v1794 + ((v1844 + v798) & v1883)) & 0xFFFFFFFFFFFFF8) + 8);
        }
        if (v797 >= 0xFFFFFFFF)
          LODWORD(v797) = -1;
        if ((v797 + 1) >= 2)
          goto LABEL_813;
        goto LABEL_816;
      }
      v789 = (*(uint64_t (**)(void))(v104 + 48))();
      v790 = v1808;
LABEL_812:
      if (v789)
      {
LABEL_813:
        v799 = v1898;
        v800 = v1943;
        memcpy(v1898, v1943, v620);
        v801 = v1909;
        v802 = v1916;
        v803 = v1886;
        v804 = __n;
LABEL_814:
        v805 = v804;
        goto LABEL_865;
      }
      v792 = ((unint64_t)v1943 + v103) & v109;
      v793 = (v790 + v792) & v108;
LABEL_816:
      v806 = *(void (**)(void *, const void *, uint64_t))(v104 + 16);
      v806(v1898, v1943, v106);
      v806((void *)(((unint64_t)v1898 + v103) & v109), (const void *)v792, v106);
      v807 = (v790 + (((unint64_t)v1898 + v103) & v109)) & v108;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1835 + 16))(v807, v793, v1836);
      v808 = (_QWORD *)((v1840 + v807) & 0xFFFFFFFFFFFFFFF8);
      v809 = (_QWORD *)((v1840 + v793) & 0xFFFFFFFFFFFFFFF8);
      *v808 = *v809;
      v810 = ((unint64_t)v808 + v1830) & v1856;
      v811 = ((unint64_t)v809 + v1830) & v1856;
      v812 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1831 + 16);
      swift_bridgeObjectRetain();
      v812(v810, v811, v1832);
      v813 = (_QWORD *)((v1825 + v810) & 0xFFFFFFFFFFFFF8);
      v814 = (_QWORD *)((v1825 + v811) & 0xFFFFFFFFFFFFF8);
      *v813 = *v814;
      v815 = (_QWORD *)(((unint64_t)v813 + 15) & 0xFFFFFFFFFFFFFFF8);
      v816 = (_QWORD *)(((unint64_t)v814 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v815 = *v816;
      v815[1] = v816[1];
      v817 = (_QWORD *)(v807 + v1905);
      *v817 = *(_QWORD *)(v793 + v1905);
      v817[1] = *(_QWORD *)(v793 + v1905 + 8);
      v818 = (v1907 + v807 + v1905) & v1922;
      v819 = (v1907 + v793 + v1905) & v1922;
      *(_BYTE *)v818 = *(_BYTE *)v819;
      v820 = v818 | 4;
      v821 = *(_DWORD *)(v819 | 4);
      *(_BYTE *)(v820 + 4) = *(_BYTE *)((v819 | 4) + 4);
      *(_DWORD *)v820 = v821;
      *(_WORD *)(v818 + 10) = *(_WORD *)(v819 + 0xA);
      v822 = (v1848 + v818) & v1883;
      v823 = (v1848 + v819) & v1883;
      v824 = *(void (**)(size_t, size_t, uint64_t))(v1845 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v824(v822, v823, v1846);
      v825 = (v1844 + v822) & v1883;
      v826 = (v1844 + v823) & v1883;
      v824(v825, v826, v1846);
      v827 = (_BYTE *)(v825 + v1850);
      *v827 = *(_BYTE *)(v826 + v1850);
      v827[1] = *(_BYTE *)(v826 + v1850 + 1);
      v827[2] = *(_BYTE *)(v826 + v1850 + 2);
      v827[3] = *(_BYTE *)(v826 + v1850 + 3);
      v827[4] = *(_BYTE *)(v826 + v1850 + 4);
      v828 = (v825 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
      v829 = (v826 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v828 = *(_QWORD *)v829;
      *(_QWORD *)(v828 + 8) = *(_QWORD *)(v829 + 8);
      *(_BYTE *)(v828 + 16) = *(_BYTE *)(v829 + 16);
      *(_BYTE *)(v828 + 17) = *(_BYTE *)(v829 + 17);
      *(_BYTE *)(v828 + 18) = *(_BYTE *)(v829 + 18);
      *(_BYTE *)(v828 + 19) = *(_BYTE *)(v829 + 19);
      v830 = (v828 + 27) & 0xFFFFFFFFFFFFFFF8;
      v831 = (v829 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v830 = *(_QWORD *)v831;
      *(_BYTE *)(v830 + 8) = *(_BYTE *)(v831 + 8);
      *(_BYTE *)(v830 + 9) = *(_BYTE *)(v831 + 9);
      *(_BYTE *)(v830 + 10) = *(_BYTE *)(v831 + 10);
      *(_BYTE *)(v830 + 11) = *(_BYTE *)(v831 + 11);
      *(_BYTE *)(v830 + 12) = *(_BYTE *)(v831 + 12);
      v832 = (_QWORD *)((v828 + 47) & 0xFFFFFFFFFFFFF8);
      v833 = (_QWORD *)((v829 + 47) & 0xFFFFFFFFFFFFF8);
      *v832 = *v833;
      v834 = ((unint64_t)v832 + 15) & 0xFFFFFFFFFFFFFFF8;
      v835 = ((unint64_t)v833 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v834 = *(_QWORD *)v835;
      *(_BYTE *)(v834 + 8) = *(_BYTE *)(v835 + 8);
      *(_BYTE *)(v834 + 9) = *(_BYTE *)(v835 + 9);
      v836 = (void *)((v1841 + v834) & v1883);
      v837 = (const void *)((v1841 + v835) & v1883);
      v838 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1845 + 48);
      swift_bridgeObjectRetain();
      if (v838(v837, 1, v1846))
      {
        v804 = __n;
        memcpy(v836, v837, __n);
      }
      else
      {
        v824((size_t)v836, (size_t)v837, v1846);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1845 + 56))(v836, 0, 1, v1846);
        v804 = __n;
      }
      v839 = (_QWORD *)(((unint64_t)v836 + v1842) & 0xFFFFFFFFFFFFFFF8);
      v840 = (_QWORD *)(((unint64_t)v837 + v1842) & 0xFFFFFFFFFFFFFFF8);
      *v839 = *v840;
      v841 = ((unint64_t)v839 + 15) & 0xFFFFFFFFFFFFFFF8;
      v842 = ((unint64_t)v840 + 15) & 0xFFFFFFFFFFFFFFF8;
      v843 = *(_QWORD *)v842;
      *(_BYTE *)(v841 + 8) = *(_BYTE *)(v842 + 8);
      *(_QWORD *)v841 = v843;
      v844 = (_QWORD *)(((unint64_t)v839 + 31) & 0xFFFFFFFFFFFFF8);
      v845 = (_QWORD *)(((unint64_t)v840 + 31) & 0xFFFFFFFFFFFFF8);
      *v844 = *v845;
      v846 = ((unint64_t)v844 + 15) & 0xFFFFFFFFFFFFFFF8;
      v847 = (uint64_t *)(((unint64_t)v845 + 15) & 0xFFFFFFFFFFFFFFF8);
      v848 = v847[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v848 & 0x3000000000000000) != 0)
      {
        *(_OWORD *)v846 = *(_OWORD *)v847;
      }
      else
      {
        v849 = *v847;
        sub_23AAAE668(*v847, v848);
        *(_QWORD *)v846 = v849;
        *(_QWORD *)(v846 + 8) = v848;
      }
      v850 = (v846 + 19) & 0xFFFFFFFFFFFFFFF8;
      v851 = ((unint64_t)v847 + 19) & 0xFFFFFFFFFFFFFFF8;
      v852 = *(_QWORD *)v851;
      *(_BYTE *)(v850 + 8) = *(_BYTE *)(v851 + 8);
      *(_QWORD *)v850 = v852;
      *(_BYTE *)(v850 + 9) = *(_BYTE *)(v851 + 9);
      v853 = (v850 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v854 = (v851 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v855 = *(_DWORD *)v854;
      *(_BYTE *)(v853 + 4) = *(_BYTE *)(v854 + 4);
      *(_DWORD *)v853 = v855;
      v856 = (_QWORD *)((v850 + 25) & 0xFFFFFFFFFFFFFFF8);
      v857 = (_QWORD *)((v851 + 25) & 0xFFFFFFFFFFFFFFF8);
      *v856 = *v857;
      v856[1] = v857[1];
      v858 = v818 + v1843;
      v859 = v819 + v1843;
      v860 = *(_QWORD *)(v819 + v1843 + 16);
      if (v860 >= 0xFFFFFFFF)
        LODWORD(v860) = -1;
      v861 = v860 - 1;
      swift_bridgeObjectRetain();
      if (v861 < 0)
      {
        *(_QWORD *)v858 = *(_QWORD *)v859;
        *(_BYTE *)(v858 + 8) = *(_BYTE *)(v859 + 8);
        *(_BYTE *)(v858 + 9) = *(_BYTE *)(v859 + 9);
        v874 = *(void **)(v859 + 16);
        v875 = v874;
        *(_QWORD *)(v858 + 16) = v874;
        v876 = *(void **)(v859 + 24);
        v877 = v876;
        *(_QWORD *)(v858 + 24) = v876;
        *(_BYTE *)(v858 + 32) = *(_BYTE *)(v859 + 32);
        *(_BYTE *)(v858 + 33) = *(_BYTE *)(v859 + 33);
        *(_BYTE *)(v858 + 34) = *(_BYTE *)(v859 + 34);
        *(_QWORD *)(v858 + 40) = *(_QWORD *)(v859 + 40);
        *(_QWORD *)(v858 + 48) = *(_QWORD *)(v859 + 48);
        *(_QWORD *)(v858 + 56) = *(_QWORD *)(v859 + 56);
        *(_QWORD *)(v858 + 64) = *(_QWORD *)(v859 + 64);
        *(_BYTE *)(v858 + 72) = *(_BYTE *)(v859 + 72);
        *(_QWORD *)(v858 + 80) = *(_QWORD *)(v859 + 80);
        *(_QWORD *)(v858 + 88) = *(_QWORD *)(v859 + 88);
        v1926 = *(void **)(v859 + 96);
        *(_QWORD *)(v858 + 96) = v1926;
        *(_BYTE *)(v858 + 104) = *(_BYTE *)(v859 + 104);
        *(_BYTE *)(v858 + 105) = *(_BYTE *)(v859 + 105);
        *(_QWORD *)(v858 + 112) = *(_QWORD *)(v859 + 112);
        *(_QWORD *)(v858 + 120) = *(_QWORD *)(v859 + 120);
        *(_QWORD *)(v858 + 128) = *(_QWORD *)(v859 + 128);
        *(_QWORD *)(v858 + 136) = *(_QWORD *)(v859 + 136);
        *(_QWORD *)(v858 + 144) = *(_QWORD *)(v859 + 144);
        *(_QWORD *)(v858 + 152) = *(_QWORD *)(v859 + 152);
        *(_QWORD *)(v858 + 160) = *(_QWORD *)(v859 + 160);
        *(_QWORD *)(v858 + 168) = *(_QWORD *)(v859 + 168);
        *(_BYTE *)(v858 + 176) = *(_BYTE *)(v859 + 176);
        *(_QWORD *)(v858 + 184) = *(_QWORD *)(v859 + 184);
        v878 = *(_QWORD *)(v859 + 192);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v879 = v1926;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v878)
        {
          *(_QWORD *)(v858 + 192) = v878;
          *(_QWORD *)(v858 + 200) = *(_QWORD *)(v859 + 200);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v858 + 192) = *(_OWORD *)(v859 + 192);
        }
        v804 = __n;
        v801 = v1909;
        v802 = v1916;
        v803 = v1886;
        v799 = v1898;
        *(_QWORD *)(v858 + 208) = *(_QWORD *)(v859 + 208);
        *(_QWORD *)(v858 + 216) = *(_QWORD *)(v859 + 216);
        *(_QWORD *)(v858 + 224) = *(_QWORD *)(v859 + 224);
        *(_QWORD *)(v858 + 232) = *(_QWORD *)(v859 + 232);
        *(_QWORD *)(v858 + 240) = *(_QWORD *)(v859 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v862 = *(_OWORD *)v859;
        v863 = *(_OWORD *)(v859 + 16);
        v864 = *(_OWORD *)(v859 + 48);
        *(_OWORD *)(v858 + 32) = *(_OWORD *)(v859 + 32);
        *(_OWORD *)(v858 + 48) = v864;
        *(_OWORD *)v858 = v862;
        *(_OWORD *)(v858 + 16) = v863;
        v865 = *(_OWORD *)(v859 + 64);
        v866 = *(_OWORD *)(v859 + 80);
        v867 = *(_OWORD *)(v859 + 112);
        *(_OWORD *)(v858 + 96) = *(_OWORD *)(v859 + 96);
        *(_OWORD *)(v858 + 112) = v867;
        *(_OWORD *)(v858 + 64) = v865;
        *(_OWORD *)(v858 + 80) = v866;
        v868 = *(_OWORD *)(v859 + 128);
        v869 = *(_OWORD *)(v859 + 144);
        v870 = *(_OWORD *)(v859 + 176);
        *(_OWORD *)(v858 + 160) = *(_OWORD *)(v859 + 160);
        *(_OWORD *)(v858 + 176) = v870;
        *(_OWORD *)(v858 + 128) = v868;
        *(_OWORD *)(v858 + 144) = v869;
        v871 = *(_OWORD *)(v859 + 192);
        v872 = *(_OWORD *)(v859 + 208);
        v873 = *(_OWORD *)(v859 + 224);
        *(_QWORD *)(v858 + 240) = *(_QWORD *)(v859 + 240);
        *(_OWORD *)(v858 + 208) = v872;
        *(_OWORD *)(v858 + 224) = v873;
        *(_OWORD *)(v858 + 192) = v871;
        v801 = v1909;
        v802 = v1916;
        v803 = v1886;
        v799 = v1898;
      }
      v988 = (_OWORD *)((v858 + 255) & 0xFFFFFFFFFFFFFFF8);
      v989 = (__int128 *)((v859 + 255) & 0xFFFFFFFFFFFFFFF8);
      v990 = *v989;
      *(_OWORD *)((char *)v988 + 9) = *(__int128 *)((char *)v989 + 9);
      *v988 = v990;
      v991 = (v858 + 287) & 0xFFFFFFFFFFFFFFF8;
      v992 = (v859 + 287) & 0xFFFFFFFFFFFFFFF8;
      v993 = *(_OWORD *)v992;
      *(_BYTE *)(v991 + 16) = *(_BYTE *)(v992 + 16);
      *(_OWORD *)v991 = v993;
      v994 = (_QWORD *)((v858 + 311) & 0xFFFFFFFFFFFFF8);
      v995 = (v859 + 311) & 0xFFFFFFFFFFFFF8;
      v996 = *(_QWORD *)v995;
      v995 += 15;
      *v994 = v996;
      v997 = (_QWORD *)(((unint64_t)v994 + 15) & 0xFFFFFFFFFFFFFFF8);
      v998 = *(_QWORD *)(v995 & 0xFFFFFFFFFFFFFFF8);
      v999 = *(_QWORD *)((v995 & 0xFFFFFFFFFFFFFFF8) + 8);
      sub_23AA7F2D4(v998, v999);
      *v997 = v998;
      v997[1] = v999;
      v805 = v1850;
      v620 = v1904;
      v788 = v1880;
      v800 = v1943;
      if (!v1821)
        goto LABEL_814;
LABEL_865:
      v1000 = ((((v1878
                + ((((((((((v1890 + v805) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 19) & 0xFFFFFFFFFFFFFFF8)
                  + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      *(_QWORD *)(((unint64_t)v799 + v1000) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v800 + v1000) & 0xFFFFFFFFFFFFF8);
      v1001 = ((v1819
              + ((v1762
                + ((((v1878
                    + ((((((((((v1890 + v804) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 19) & 0xFFFFFFFFFFFFFFF8)
                      + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 16) & v802)) & 0xFFFFFFFFFFFFFFF8)
            + 8;
      if (v1001 <= v1892)
        v1001 = v1892;
      if (v1816 > v1001)
        v1001 = v1816;
      if (v620 > v1001)
        v1001 = v620;
      if (v1764 > v1001)
        v1001 = v1764;
      if (v801 > v1001)
        v1001 = v801;
      if (v1815 > v1001)
        v1001 = v1886 + 2;
      if (v1817 > v1001)
        v1001 = v1817;
      if (v73 > v1001)
        v1001 = v73;
      if (v1818 > v1001)
        v1001 = v1818;
      if (v1001 <= v801)
        v1001 = v801;
      if (v1001 <= v1893)
        v1001 = v1893;
      if (v1001 <= v1872)
        v1001 = v1872;
      if (v1001 <= v801)
        v1001 = v801;
      if (v1001 <= v788)
        v1001 = v788;
      if (v1001 <= v73)
        v1001 = v73;
      if (v1001 <= v801)
        v1001 = v801;
      if (v1001 <= v803)
        v1001 = v803;
      if (v1001 <= v801)
        v1001 = v801;
      if (v1001 <= v1804)
        v1001 = v1804;
      if (v1001 <= v73)
        v1001 = v73;
      if (v1001 <= v801)
        v1001 = v801;
      if (v1001 <= 0x38)
        v1001 = 56;
      if (v1001 > 3)
        goto LABEL_910;
      v1003 = ((1 << (8 * v1001)) + 5) >> (8 * v1001);
      if (v1003 > 0xFFD8)
      {
        v1005 = 5;
LABEL_970:
        *(_DWORD *)((char *)a1 + v1001) = v1005;
        return a1;
      }
      if (v1003 > 0xD8)
      {
        v1004 = 5;
LABEL_968:
        *(_WORD *)((char *)a1 + v1001) = v1004;
        return a1;
      }
LABEL_910:
      v1002 = 5;
LABEL_964:
      *((_BYTE *)a1 + v1001) = v1002;
      return a1;
    case 6u:
      v1923 = ~v1859;
      v1917 = ~v36;
      v1881 = v72 + 1;
      v1884 = v88;
      v1895 = v37;
      v110 = v1811;
      v1765 = v43;
      v1769 = ((((v1826 + ((v39 + 8 + (v1869 & 0xFFFFFFFFFFFFFFF8)) & ~v39)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      v1759 = ~v40;
      v1763 = v36;
      v1756 = ~v1874;
      v1860 = ~v39;
      if (v1811 == v1822)
      {
        v111 = v1851;
        v112 = v1852;
        v113 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v1851 + 48))(a2, v1811, v1852);
        v89 = ~v40;
        v114 = v1829;
        v115 = ~v1870;
        v116 = v1827;
        v117 = v1887;
LABEL_779:
        if (v113)
        {
LABEL_780:
          memcpy(a1, a2, v1765);
          v697 = v1884;
LABEL_781:
          v698 = __n;
          goto LABEL_831;
        }
        v253 = ((unint64_t)a2 + v116) & v115;
        v254 = (v253 + v117 + v40) & v89;
LABEL_783:
        v699 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v111 + 16);
        v700 = v89;
        v699(a1, a2, v112);
        v701 = ((unint64_t)a1 + v116) & v115;
        v699((_QWORD *)v701, (_QWORD *)v253, v112);
        v702 = (v701 + v117 + v40) & v700;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16))(v702, v254, v1838);
        v703 = (_QWORD *)((v1869 + v702) & 0xFFFFFFFFFFFFFFF8);
        v704 = (_QWORD *)((v1869 + v254) & 0xFFFFFFFFFFFFFFF8);
        *v703 = *v704;
        v705 = ((unint64_t)v703 + v1839) & v1860;
        v706 = ((unint64_t)v704 + v1839) & v1860;
        v707 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1895 + 16);
        swift_bridgeObjectRetain();
        v707(v705, v706, v1833);
        v708 = (_QWORD *)((v1826 + v705) & 0xFFFFFFFFFFFFF8);
        v709 = (_QWORD *)((v1826 + v706) & 0xFFFFFFFFFFFFF8);
        *v708 = *v709;
        v710 = (_QWORD *)(((unint64_t)v708 + 15) & 0xFFFFFFFFFFFFFFF8);
        v711 = (_QWORD *)(((unint64_t)v709 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v710 = *v711;
        v710[1] = v711[1];
        v712 = (_QWORD *)(v1769 + v702);
        *v712 = *(_QWORD *)(v1769 + v254);
        v712[1] = *(_QWORD *)(v1769 + v254 + 8);
        v713 = (v1907 + v1769 + v702) & v1923;
        v714 = (v1907 + v1769 + v254) & v1923;
        *(_BYTE *)v713 = *(_BYTE *)v714;
        v715 = v713 | 4;
        v716 = *(_DWORD *)(v714 | 4);
        *(_BYTE *)(v715 + 4) = *(_BYTE *)((v714 | 4) + 4);
        *(_DWORD *)v715 = v716;
        *(_WORD *)(v713 + 10) = *(_WORD *)(v714 + 0xA);
        v717 = (v1848 + v713) & v1884;
        v718 = (v1848 + v714) & v1884;
        v719 = *(void (**)(size_t, size_t, uint64_t))(v1845 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v719(v717, v718, v1846);
        v720 = (v1844 + v717) & v1884;
        v721 = (v1844 + v718) & v1884;
        v719(v720, v721, v1846);
        v722 = (_BYTE *)(v720 + v1850);
        *v722 = *(_BYTE *)(v721 + v1850);
        v722[1] = *(_BYTE *)(v721 + v1850 + 1);
        v722[2] = *(_BYTE *)(v721 + v1850 + 2);
        v722[3] = *(_BYTE *)(v721 + v1850 + 3);
        v722[4] = *(_BYTE *)(v721 + v1850 + 4);
        v723 = (v720 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
        v724 = (v721 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v723 = *(_QWORD *)v724;
        *(_QWORD *)(v723 + 8) = *(_QWORD *)(v724 + 8);
        *(_BYTE *)(v723 + 16) = *(_BYTE *)(v724 + 16);
        *(_BYTE *)(v723 + 17) = *(_BYTE *)(v724 + 17);
        *(_BYTE *)(v723 + 18) = *(_BYTE *)(v724 + 18);
        *(_BYTE *)(v723 + 19) = *(_BYTE *)(v724 + 19);
        v725 = (v723 + 27) & 0xFFFFFFFFFFFFFFF8;
        v726 = (v724 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v725 = *(_QWORD *)v726;
        *(_BYTE *)(v725 + 8) = *(_BYTE *)(v726 + 8);
        *(_BYTE *)(v725 + 9) = *(_BYTE *)(v726 + 9);
        *(_BYTE *)(v725 + 10) = *(_BYTE *)(v726 + 10);
        *(_BYTE *)(v725 + 11) = *(_BYTE *)(v726 + 11);
        *(_BYTE *)(v725 + 12) = *(_BYTE *)(v726 + 12);
        v727 = (_QWORD *)((v723 + 47) & 0xFFFFFFFFFFFFF8);
        v728 = (_QWORD *)((v724 + 47) & 0xFFFFFFFFFFFFF8);
        *v727 = *v728;
        v729 = ((unint64_t)v727 + 15) & 0xFFFFFFFFFFFFFFF8;
        v730 = ((unint64_t)v728 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v729 = *(_QWORD *)v730;
        *(_BYTE *)(v729 + 8) = *(_BYTE *)(v730 + 8);
        *(_BYTE *)(v729 + 9) = *(_BYTE *)(v730 + 9);
        v731 = (void *)((v1841 + v729) & v1884);
        v732 = (const void *)((v1841 + v730) & v1884);
        v733 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1845 + 48);
        swift_bridgeObjectRetain();
        if (v733(v732, 1, v1846))
        {
          memcpy(v731, v732, __n);
        }
        else
        {
          v719((size_t)v731, (size_t)v732, v1846);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1845 + 56))(v731, 0, 1, v1846);
        }
        v734 = (_QWORD *)(((unint64_t)v731 + v1842) & 0xFFFFFFFFFFFFFFF8);
        v735 = (_QWORD *)(((unint64_t)v732 + v1842) & 0xFFFFFFFFFFFFFFF8);
        *v734 = *v735;
        v736 = ((unint64_t)v734 + 15) & 0xFFFFFFFFFFFFFFF8;
        v737 = ((unint64_t)v735 + 15) & 0xFFFFFFFFFFFFFFF8;
        v738 = *(_QWORD *)v737;
        *(_BYTE *)(v736 + 8) = *(_BYTE *)(v737 + 8);
        *(_QWORD *)v736 = v738;
        v739 = (_QWORD *)(((unint64_t)v734 + 31) & 0xFFFFFFFFFFFFF8);
        v740 = (_QWORD *)(((unint64_t)v735 + 31) & 0xFFFFFFFFFFFFF8);
        *v739 = *v740;
        v741 = ((unint64_t)v739 + 15) & 0xFFFFFFFFFFFFFFF8;
        v742 = (uint64_t *)(((unint64_t)v740 + 15) & 0xFFFFFFFFFFFFFFF8);
        v743 = v742[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v112 = v1852;
        v115 = ~v1870;
        if ((v743 & 0x3000000000000000) != 0)
        {
          *(_OWORD *)v741 = *(_OWORD *)v742;
        }
        else
        {
          v744 = *v742;
          sub_23AAAE668(*v742, v743);
          *(_QWORD *)v741 = v744;
          *(_QWORD *)(v741 + 8) = v743;
        }
        v745 = (v741 + 19) & 0xFFFFFFFFFFFFFFF8;
        v746 = ((unint64_t)v742 + 19) & 0xFFFFFFFFFFFFFFF8;
        v747 = *(_QWORD *)v746;
        *(_BYTE *)(v745 + 8) = *(_BYTE *)(v746 + 8);
        *(_QWORD *)v745 = v747;
        *(_BYTE *)(v745 + 9) = *(_BYTE *)(v746 + 9);
        v748 = (v745 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v749 = (v746 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v750 = *(_DWORD *)v749;
        *(_BYTE *)(v748 + 4) = *(_BYTE *)(v749 + 4);
        *(_DWORD *)v748 = v750;
        v751 = (_QWORD *)((v745 + 25) & 0xFFFFFFFFFFFFFFF8);
        v752 = (_QWORD *)((v746 + 25) & 0xFFFFFFFFFFFFFFF8);
        *v751 = *v752;
        v751[1] = v752[1];
        v753 = v1843 + v713;
        v754 = v1843 + v714;
        v755 = *(_QWORD *)(v754 + 16);
        if (v755 >= 0xFFFFFFFF)
          LODWORD(v755) = -1;
        v756 = v755 - 1;
        swift_bridgeObjectRetain();
        v697 = v1884;
        if (v756 < 0)
        {
          *(_QWORD *)v753 = *(_QWORD *)v754;
          *(_BYTE *)(v753 + 8) = *(_BYTE *)(v754 + 8);
          *(_BYTE *)(v753 + 9) = *(_BYTE *)(v754 + 9);
          v769 = *(void **)(v754 + 16);
          v770 = v769;
          *(_QWORD *)(v753 + 16) = v769;
          v771 = *(void **)(v754 + 24);
          v772 = v771;
          *(_QWORD *)(v753 + 24) = v771;
          *(_BYTE *)(v753 + 32) = *(_BYTE *)(v754 + 32);
          *(_BYTE *)(v753 + 33) = *(_BYTE *)(v754 + 33);
          *(_BYTE *)(v753 + 34) = *(_BYTE *)(v754 + 34);
          *(_QWORD *)(v753 + 40) = *(_QWORD *)(v754 + 40);
          *(_QWORD *)(v753 + 48) = *(_QWORD *)(v754 + 48);
          *(_QWORD *)(v753 + 56) = *(_QWORD *)(v754 + 56);
          *(_QWORD *)(v753 + 64) = *(_QWORD *)(v754 + 64);
          *(_BYTE *)(v753 + 72) = *(_BYTE *)(v754 + 72);
          *(_QWORD *)(v753 + 80) = *(_QWORD *)(v754 + 80);
          *(_QWORD *)(v753 + 88) = *(_QWORD *)(v754 + 88);
          v1942 = *(void **)(v754 + 96);
          *(_QWORD *)(v753 + 96) = v1942;
          *(_BYTE *)(v753 + 104) = *(_BYTE *)(v754 + 104);
          *(_BYTE *)(v753 + 105) = *(_BYTE *)(v754 + 105);
          *(_QWORD *)(v753 + 112) = *(_QWORD *)(v754 + 112);
          *(_QWORD *)(v753 + 120) = *(_QWORD *)(v754 + 120);
          *(_QWORD *)(v753 + 128) = *(_QWORD *)(v754 + 128);
          *(_QWORD *)(v753 + 136) = *(_QWORD *)(v754 + 136);
          *(_QWORD *)(v753 + 144) = *(_QWORD *)(v754 + 144);
          *(_QWORD *)(v753 + 152) = *(_QWORD *)(v754 + 152);
          *(_QWORD *)(v753 + 160) = *(_QWORD *)(v754 + 160);
          *(_QWORD *)(v753 + 168) = *(_QWORD *)(v754 + 168);
          *(_BYTE *)(v753 + 176) = *(_BYTE *)(v754 + 176);
          *(_QWORD *)(v753 + 184) = *(_QWORD *)(v754 + 184);
          v773 = *(_QWORD *)(v754 + 192);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v774 = v1942;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v773)
          {
            *(_QWORD *)(v753 + 192) = v773;
            *(_QWORD *)(v753 + 200) = *(_QWORD *)(v754 + 200);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(v753 + 192) = *(_OWORD *)(v754 + 192);
          }
          v112 = v1852;
          v697 = v1884;
          v111 = v1851;
          v115 = ~v1870;
          v116 = v1827;
          *(_QWORD *)(v753 + 208) = *(_QWORD *)(v754 + 208);
          *(_QWORD *)(v753 + 216) = *(_QWORD *)(v754 + 216);
          *(_QWORD *)(v753 + 224) = *(_QWORD *)(v754 + 224);
          *(_QWORD *)(v753 + 232) = *(_QWORD *)(v754 + 232);
          *(_QWORD *)(v753 + 240) = *(_QWORD *)(v754 + 240);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          v757 = *(_OWORD *)v754;
          v758 = *(_OWORD *)(v754 + 16);
          v759 = *(_OWORD *)(v754 + 48);
          *(_OWORD *)(v753 + 32) = *(_OWORD *)(v754 + 32);
          *(_OWORD *)(v753 + 48) = v759;
          *(_OWORD *)v753 = v757;
          *(_OWORD *)(v753 + 16) = v758;
          v760 = *(_OWORD *)(v754 + 64);
          v761 = *(_OWORD *)(v754 + 80);
          v762 = *(_OWORD *)(v754 + 112);
          *(_OWORD *)(v753 + 96) = *(_OWORD *)(v754 + 96);
          *(_OWORD *)(v753 + 112) = v762;
          *(_OWORD *)(v753 + 64) = v760;
          *(_OWORD *)(v753 + 80) = v761;
          v763 = *(_OWORD *)(v754 + 128);
          v764 = *(_OWORD *)(v754 + 144);
          v765 = *(_OWORD *)(v754 + 176);
          *(_OWORD *)(v753 + 160) = *(_OWORD *)(v754 + 160);
          *(_OWORD *)(v753 + 176) = v765;
          *(_OWORD *)(v753 + 128) = v763;
          *(_OWORD *)(v753 + 144) = v764;
          v766 = *(_OWORD *)(v754 + 192);
          v767 = *(_OWORD *)(v754 + 208);
          v768 = *(_OWORD *)(v754 + 224);
          *(_QWORD *)(v753 + 240) = *(_QWORD *)(v754 + 240);
          *(_OWORD *)(v753 + 208) = v767;
          *(_OWORD *)(v753 + 224) = v768;
          *(_OWORD *)(v753 + 192) = v766;
          v111 = v1851;
        }
        v880 = (_OWORD *)((v753 + 255) & 0xFFFFFFFFFFFFFFF8);
        v881 = (__int128 *)((v754 + 255) & 0xFFFFFFFFFFFFFFF8);
        v882 = *v881;
        *(_OWORD *)((char *)v880 + 9) = *(__int128 *)((char *)v881 + 9);
        *v880 = v882;
        v883 = (v753 + 287) & 0xFFFFFFFFFFFFFFF8;
        v884 = (v754 + 287) & 0xFFFFFFFFFFFFFFF8;
        v885 = *(_OWORD *)v884;
        *(_BYTE *)(v883 + 16) = *(_BYTE *)(v884 + 16);
        *(_OWORD *)v883 = v885;
        v886 = (_QWORD *)((v753 + 311) & 0xFFFFFFFFFFFFF8);
        v887 = (v754 + 311) & 0xFFFFFFFFFFFFF8;
        v888 = *(_QWORD *)v887;
        v887 += 15;
        *v886 = v888;
        v889 = (_QWORD *)(((unint64_t)v886 + 15) & 0xFFFFFFFFFFFFFFF8);
        v890 = *(_QWORD *)(v887 & 0xFFFFFFFFFFFFFFF8);
        v891 = *(_QWORD *)((v887 & 0xFFFFFFFFFFFFFFF8) + 8);
        sub_23AA7F2D4(v890, v891);
        *v889 = v890;
        v889[1] = v891;
        v698 = v1850;
        v114 = v1829;
        v110 = v1811;
        if (!v1821)
          goto LABEL_781;
LABEL_831:
        v892 = v1828 + 7;
        v893 = ((((v1807
                 + 327
                 + ((((((((((v1828 + 7 + v698) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 19) & 0xFFFFFFFFFFFFFFF8)
                   + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        v894 = (void *)(((unint64_t)a1 + v1874 + v893) & v1756);
        v1891 = v894;
        v1944 = (const void *)(((unint64_t)a2 + v1874 + v893) & v1756);
        if (v110 == v1822)
        {
          v895 = (*(uint64_t (**)(void))(v111 + 48))();
          v896 = v1759;
LABEL_846:
          if (v895)
          {
LABEL_847:
            v905 = v1944;
            memcpy(v894, v1944, v1765);
            v906 = v1909;
            v907 = v1917;
            v908 = v1886;
            v909 = __n;
            goto LABEL_848;
          }
          v897 = ((unint64_t)v1944 + v116) & v115;
          v898 = (v1810 + v897) & v896;
LABEL_850:
          v911 = *(void (**)(void *, const void *, uint64_t))(v111 + 16);
          v912 = v896;
          v911(v894, v1944, v112);
          v913 = ((unint64_t)v894 + v116) & v115;
          v911((void *)v913, (const void *)v897, v112);
          v914 = (v1810 + v913) & v912;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16))(v914, v898, v1838);
          v915 = (_QWORD *)((v1869 + v914) & 0xFFFFFFFFFFFFFFF8);
          v916 = (_QWORD *)((v1869 + v898) & 0xFFFFFFFFFFFFFFF8);
          *v915 = *v916;
          v917 = ((unint64_t)v915 + v1839) & v1860;
          v918 = ((unint64_t)v916 + v1839) & v1860;
          v919 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1895 + 16);
          swift_bridgeObjectRetain();
          v919(v917, v918, v1833);
          v920 = (_QWORD *)((v1826 + v917) & 0xFFFFFFFFFFFFF8);
          v921 = (_QWORD *)((v1826 + v918) & 0xFFFFFFFFFFFFF8);
          *v920 = *v921;
          v922 = (_QWORD *)(((unint64_t)v920 + 15) & 0xFFFFFFFFFFFFFFF8);
          v923 = (_QWORD *)(((unint64_t)v921 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v922 = *v923;
          v922[1] = v923[1];
          v924 = (_QWORD *)(v914 + v1769);
          *v924 = *(_QWORD *)(v898 + v1769);
          v924[1] = *(_QWORD *)(v898 + v1769 + 8);
          v925 = (v1907 + v914 + v1769) & v1923;
          v926 = (v1907 + v898 + v1769) & v1923;
          *(_BYTE *)v925 = *(_BYTE *)v926;
          v927 = v925 | 4;
          v928 = *(_DWORD *)(v926 | 4);
          *(_BYTE *)(v927 + 4) = *(_BYTE *)((v926 | 4) + 4);
          *(_DWORD *)v927 = v928;
          *(_WORD *)(v925 + 10) = *(_WORD *)(v926 + 0xA);
          v929 = (v1848 + v925) & v697;
          v930 = (v1848 + v926) & v697;
          v931 = v697;
          v932 = *(void (**)(size_t, size_t, uint64_t))(v1845 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v932(v929, v930, v1846);
          v933 = (v1844 + v929) & v931;
          v934 = (v1844 + v930) & v931;
          v932(v933, v934, v1846);
          v935 = (_BYTE *)(v933 + v1850);
          *v935 = *(_BYTE *)(v934 + v1850);
          v935[1] = *(_BYTE *)(v934 + v1850 + 1);
          v935[2] = *(_BYTE *)(v934 + v1850 + 2);
          v935[3] = *(_BYTE *)(v934 + v1850 + 3);
          v935[4] = *(_BYTE *)(v934 + v1850 + 4);
          v936 = (v933 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
          v937 = (v934 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v936 = *(_QWORD *)v937;
          *(_QWORD *)(v936 + 8) = *(_QWORD *)(v937 + 8);
          *(_BYTE *)(v936 + 16) = *(_BYTE *)(v937 + 16);
          *(_BYTE *)(v936 + 17) = *(_BYTE *)(v937 + 17);
          *(_BYTE *)(v936 + 18) = *(_BYTE *)(v937 + 18);
          *(_BYTE *)(v936 + 19) = *(_BYTE *)(v937 + 19);
          v938 = (v936 + 27) & 0xFFFFFFFFFFFFFFF8;
          v939 = (v937 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v938 = *(_QWORD *)v939;
          *(_BYTE *)(v938 + 8) = *(_BYTE *)(v939 + 8);
          *(_BYTE *)(v938 + 9) = *(_BYTE *)(v939 + 9);
          *(_BYTE *)(v938 + 10) = *(_BYTE *)(v939 + 10);
          *(_BYTE *)(v938 + 11) = *(_BYTE *)(v939 + 11);
          *(_BYTE *)(v938 + 12) = *(_BYTE *)(v939 + 12);
          v940 = (_QWORD *)((v936 + 47) & 0xFFFFFFFFFFFFF8);
          v941 = (_QWORD *)((v937 + 47) & 0xFFFFFFFFFFFFF8);
          *v940 = *v941;
          v942 = ((unint64_t)v940 + 15) & 0xFFFFFFFFFFFFFFF8;
          v943 = ((unint64_t)v941 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v942 = *(_QWORD *)v943;
          *(_BYTE *)(v942 + 8) = *(_BYTE *)(v943 + 8);
          *(_BYTE *)(v942 + 9) = *(_BYTE *)(v943 + 9);
          v944 = (void *)((v1841 + v942) & v931);
          v945 = (const void *)((v1841 + v943) & v931);
          v946 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1845 + 48);
          swift_bridgeObjectRetain();
          if (v946(v945, 1, v1846))
          {
            v909 = __n;
            memcpy(v944, v945, __n);
          }
          else
          {
            v932((size_t)v944, (size_t)v945, v1846);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1845 + 56))(v944, 0, 1, v1846);
            v909 = __n;
          }
          v947 = (_QWORD *)(((unint64_t)v944 + v1842) & 0xFFFFFFFFFFFFFFF8);
          v948 = (_QWORD *)(((unint64_t)v945 + v1842) & 0xFFFFFFFFFFFFFFF8);
          *v947 = *v948;
          v949 = ((unint64_t)v947 + 15) & 0xFFFFFFFFFFFFFFF8;
          v950 = ((unint64_t)v948 + 15) & 0xFFFFFFFFFFFFFFF8;
          v951 = *(_QWORD *)v950;
          *(_BYTE *)(v949 + 8) = *(_BYTE *)(v950 + 8);
          *(_QWORD *)v949 = v951;
          v952 = (_QWORD *)(((unint64_t)v947 + 31) & 0xFFFFFFFFFFFFF8);
          v953 = (_QWORD *)(((unint64_t)v948 + 31) & 0xFFFFFFFFFFFFF8);
          *v952 = *v953;
          v954 = ((unint64_t)v952 + 15) & 0xFFFFFFFFFFFFFFF8;
          v955 = (uint64_t *)(((unint64_t)v953 + 15) & 0xFFFFFFFFFFFFFFF8);
          v956 = v955[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v956 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v954 = *(_OWORD *)v955;
          }
          else
          {
            v957 = *v955;
            sub_23AAAE668(*v955, v956);
            *(_QWORD *)v954 = v957;
            *(_QWORD *)(v954 + 8) = v956;
          }
          v958 = (v954 + 19) & 0xFFFFFFFFFFFFFFF8;
          v959 = ((unint64_t)v955 + 19) & 0xFFFFFFFFFFFFFFF8;
          v960 = *(_QWORD *)v959;
          *(_BYTE *)(v958 + 8) = *(_BYTE *)(v959 + 8);
          *(_QWORD *)v958 = v960;
          *(_BYTE *)(v958 + 9) = *(_BYTE *)(v959 + 9);
          v961 = (v958 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v962 = (v959 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v963 = *(_DWORD *)v962;
          *(_BYTE *)(v961 + 4) = *(_BYTE *)(v962 + 4);
          *(_DWORD *)v961 = v963;
          v964 = (_QWORD *)((v958 + 25) & 0xFFFFFFFFFFFFFFF8);
          v965 = (_QWORD *)((v959 + 25) & 0xFFFFFFFFFFFFFFF8);
          *v964 = *v965;
          v964[1] = v965[1];
          v966 = v925 + v1843;
          v967 = v926 + v1843;
          v968 = *(_QWORD *)(v967 + 16);
          if (v968 >= 0xFFFFFFFF)
            LODWORD(v968) = -1;
          v969 = v968 - 1;
          swift_bridgeObjectRetain();
          v907 = v1917;
          if (v969 < 0)
          {
            *(_QWORD *)v966 = *(_QWORD *)v967;
            *(_BYTE *)(v966 + 8) = *(_BYTE *)(v967 + 8);
            *(_BYTE *)(v966 + 9) = *(_BYTE *)(v967 + 9);
            v982 = *(void **)(v967 + 16);
            v983 = v982;
            *(_QWORD *)(v966 + 16) = v982;
            v984 = *(void **)(v967 + 24);
            v985 = v984;
            *(_QWORD *)(v966 + 24) = v984;
            *(_BYTE *)(v966 + 32) = *(_BYTE *)(v967 + 32);
            *(_BYTE *)(v966 + 33) = *(_BYTE *)(v967 + 33);
            *(_BYTE *)(v966 + 34) = *(_BYTE *)(v967 + 34);
            *(_QWORD *)(v966 + 40) = *(_QWORD *)(v967 + 40);
            *(_QWORD *)(v966 + 48) = *(_QWORD *)(v967 + 48);
            *(_QWORD *)(v966 + 56) = *(_QWORD *)(v967 + 56);
            *(_QWORD *)(v966 + 64) = *(_QWORD *)(v967 + 64);
            *(_BYTE *)(v966 + 72) = *(_BYTE *)(v967 + 72);
            *(_QWORD *)(v966 + 80) = *(_QWORD *)(v967 + 80);
            *(_QWORD *)(v966 + 88) = *(_QWORD *)(v967 + 88);
            v1927 = *(void **)(v967 + 96);
            *(_QWORD *)(v966 + 96) = v1927;
            *(_BYTE *)(v966 + 104) = *(_BYTE *)(v967 + 104);
            *(_BYTE *)(v966 + 105) = *(_BYTE *)(v967 + 105);
            *(_QWORD *)(v966 + 112) = *(_QWORD *)(v967 + 112);
            *(_QWORD *)(v966 + 120) = *(_QWORD *)(v967 + 120);
            *(_QWORD *)(v966 + 128) = *(_QWORD *)(v967 + 128);
            *(_QWORD *)(v966 + 136) = *(_QWORD *)(v967 + 136);
            *(_QWORD *)(v966 + 144) = *(_QWORD *)(v967 + 144);
            *(_QWORD *)(v966 + 152) = *(_QWORD *)(v967 + 152);
            *(_QWORD *)(v966 + 160) = *(_QWORD *)(v967 + 160);
            *(_QWORD *)(v966 + 168) = *(_QWORD *)(v967 + 168);
            *(_BYTE *)(v966 + 176) = *(_BYTE *)(v967 + 176);
            *(_QWORD *)(v966 + 184) = *(_QWORD *)(v967 + 184);
            v986 = *(_QWORD *)(v967 + 192);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v987 = v1927;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v986)
            {
              *(_QWORD *)(v966 + 192) = v986;
              *(_QWORD *)(v966 + 200) = *(_QWORD *)(v967 + 200);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v966 + 192) = *(_OWORD *)(v967 + 192);
            }
            v909 = __n;
            v906 = v1909;
            v907 = v1917;
            v908 = v1886;
            *(_QWORD *)(v966 + 208) = *(_QWORD *)(v967 + 208);
            *(_QWORD *)(v966 + 216) = *(_QWORD *)(v967 + 216);
            *(_QWORD *)(v966 + 224) = *(_QWORD *)(v967 + 224);
            *(_QWORD *)(v966 + 232) = *(_QWORD *)(v967 + 232);
            *(_QWORD *)(v966 + 240) = *(_QWORD *)(v967 + 240);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v970 = *(_OWORD *)v967;
            v971 = *(_OWORD *)(v967 + 16);
            v972 = *(_OWORD *)(v967 + 48);
            *(_OWORD *)(v966 + 32) = *(_OWORD *)(v967 + 32);
            *(_OWORD *)(v966 + 48) = v972;
            *(_OWORD *)v966 = v970;
            *(_OWORD *)(v966 + 16) = v971;
            v973 = *(_OWORD *)(v967 + 64);
            v974 = *(_OWORD *)(v967 + 80);
            v975 = *(_OWORD *)(v967 + 112);
            *(_OWORD *)(v966 + 96) = *(_OWORD *)(v967 + 96);
            *(_OWORD *)(v966 + 112) = v975;
            *(_OWORD *)(v966 + 64) = v973;
            *(_OWORD *)(v966 + 80) = v974;
            v976 = *(_OWORD *)(v967 + 128);
            v977 = *(_OWORD *)(v967 + 144);
            v978 = *(_OWORD *)(v967 + 176);
            *(_OWORD *)(v966 + 160) = *(_OWORD *)(v967 + 160);
            *(_OWORD *)(v966 + 176) = v978;
            *(_OWORD *)(v966 + 128) = v976;
            *(_OWORD *)(v966 + 144) = v977;
            v979 = *(_OWORD *)(v967 + 192);
            v980 = *(_OWORD *)(v967 + 208);
            v981 = *(_OWORD *)(v967 + 224);
            *(_QWORD *)(v966 + 240) = *(_QWORD *)(v967 + 240);
            *(_OWORD *)(v966 + 208) = v980;
            *(_OWORD *)(v966 + 224) = v981;
            *(_OWORD *)(v966 + 192) = v979;
            v906 = v1909;
            v908 = v1886;
          }
          v1006 = (_OWORD *)((v966 + 255) & 0xFFFFFFFFFFFFFFF8);
          v1007 = (__int128 *)((v967 + 255) & 0xFFFFFFFFFFFFFFF8);
          v1008 = *v1007;
          *(_OWORD *)((char *)v1006 + 9) = *(__int128 *)((char *)v1007 + 9);
          *v1006 = v1008;
          v1009 = (v966 + 287) & 0xFFFFFFFFFFFFFFF8;
          v1010 = (v967 + 287) & 0xFFFFFFFFFFFFFFF8;
          v1011 = *(_OWORD *)v1010;
          *(_BYTE *)(v1009 + 16) = *(_BYTE *)(v1010 + 16);
          *(_OWORD *)v1009 = v1011;
          v1012 = (_QWORD *)((v966 + 311) & 0xFFFFFFFFFFFFF8);
          v1013 = (v967 + 311) & 0xFFFFFFFFFFFFF8;
          v1014 = *(_QWORD *)v1013;
          v1013 += 15;
          *v1012 = v1014;
          v1015 = (_QWORD *)(((unint64_t)v1012 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1016 = *(_QWORD *)(v1013 & 0xFFFFFFFFFFFFFFF8);
          v1017 = *(_QWORD *)((v1013 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_23AA7F2D4(v1016, v1017);
          *v1015 = v1016;
          v1015[1] = v1017;
          v910 = v1850;
          v892 = v1828 + 7;
          v905 = v1944;
          if (v1821)
          {
LABEL_918:
            v1018 = ((((v1807
                      + 327
                      + ((((((((((v892 + v910) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            *(_QWORD *)(((unint64_t)v1891 + v1018) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v905
                                                                                             + v1018) & 0xFFFFFFFFFFFFF8);
            v1001 = ((v1819
                    + ((v1763
                      + ((((v1823
                          + ((((((((((v892 + v909) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 19) & 0xFFFFFFFFFFFFFFF8)
                            + 25) & 0xFFFFFFFFFFFFFFF8)
                          + 327) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16) & v907)) & 0xFFFFFFFFFFFFFFF8)
                  + 8;
            if (v1001 <= v1892)
              v1001 = v1892;
            if (v1816 > v1001)
              v1001 = v1816;
            if (v1904 > v1001)
              v1001 = v1904;
            if (v1765 > v1001)
              v1001 = v1765;
            if (v906 > v1001)
              v1001 = v906;
            if (v1815 > v1001)
              v1001 = v1886 + 2;
            if (v1817 > v1001)
              v1001 = v1817;
            if (v73 > v1001)
              v1001 = v73;
            if (v1818 > v1001)
              v1001 = v1818;
            if (v1001 <= v906)
              v1001 = v906;
            if (v1001 <= v1893)
              v1001 = v1893;
            if (v1001 <= v1872)
              v1001 = ((v1875 + 1) & ~v1875) + v1909;
            if (v1001 <= v906)
              v1001 = v906;
            if (v1001 <= v1881)
              v1001 = v1881;
            if (v1001 <= v73)
              v1001 = v73;
            if (v1001 <= v906)
              v1001 = v906;
            if (v1001 <= v908)
              v1001 = v908;
            if (v1001 <= v906)
              v1001 = v906;
            if (v1001 <= v1804)
              v1001 = v1804;
            if (v1001 <= v73)
              v1001 = v73;
            if (v1001 <= v906)
              v1001 = v906;
            if (v1001 <= 0x38)
              v1001 = 56;
            if (v1001 <= 3)
            {
              v1019 = ((1 << (8 * v1001)) + 5) >> (8 * v1001);
              if (v1019 > 0xFFD8)
              {
                v1005 = 6;
                goto LABEL_970;
              }
              if (v1019 > 0xD8)
              {
                v1004 = 6;
                goto LABEL_968;
              }
            }
            v1002 = 6;
            goto LABEL_964;
          }
LABEL_848:
          v910 = v909;
          goto LABEL_918;
        }
        v897 = (v116 + (((unint64_t)a2 + v1874 + v893) & v1756)) & v115;
        v896 = v1759;
        v898 = (v1810 + v897) & v1759;
        if (v114 == v1822)
        {
          if (v1814 == v114)
          {
            v899 = *(uint64_t (**)(unint64_t))(v1837 + 48);
            v900 = (v1810 + v897) & v1759;
LABEL_845:
            v895 = v899(v900);
            v896 = v1759;
            goto LABEL_846;
          }
          v903 = (unint64_t *)((v1869 + v898) & 0xFFFFFFFFFFFFFFF8);
          if (v1800 > 0x7FFFFFFE)
          {
            v900 = ((unint64_t)v903 + v1839) & v1860;
            v899 = *(uint64_t (**)(unint64_t))(v1895 + 48);
            goto LABEL_845;
          }
          v904 = *v903;
        }
        else
        {
          v901 = v898 + v1769;
          if ((v1796 & 0x80000000) == 0)
          {
            v902 = *(_QWORD *)(v901 + 8);
            if (v902 >= 0xFFFFFFFF)
              LODWORD(v902) = -1;
            v895 = v902 + 1;
            goto LABEL_846;
          }
          v900 = (v1848 + ((v1907 + v901) & v1923)) & v697;
          if (v1821 > 0x7FFFFFFD)
          {
            v899 = *(uint64_t (**)(unint64_t))(v1845 + 48);
            goto LABEL_845;
          }
          v904 = *(_QWORD *)(((v1794 + ((v1844 + v900) & v697)) & 0xFFFFFFFFFFFFF8) + 8);
        }
        if (v904 >= 0xFFFFFFFF)
          LODWORD(v904) = -1;
        if ((v904 + 1) >= 2)
          goto LABEL_847;
        goto LABEL_850;
      }
      v116 = v1827;
      v115 = ~v1870;
      v253 = ((unint64_t)a2 + v1827) & ~v1870;
      v117 = v1887;
      v254 = (v253 + v1887 + v40) & v89;
      v114 = v1829;
      v112 = v1852;
      v111 = v1851;
      if (v1829 == v1822)
      {
        if (v1814 == v1829)
        {
          v113 = (*(uint64_t (**)(unint64_t))(v1837 + 48))((v253 + v1887 + v40) & v89);
LABEL_778:
          v89 = ~v40;
          goto LABEL_779;
        }
        v486 = (unint64_t *)((v1869 + v254) & 0xFFFFFFFFFFFFFFF8);
        if (v1800 > 0x7FFFFFFE)
        {
          v113 = (*(uint64_t (**)(unint64_t))(v37 + 48))(((unint64_t)v486 + v1839) & ~v39);
          goto LABEL_778;
        }
        v487 = *v486;
      }
      else
      {
        v364 = v41 + v254;
        if ((v1796 & 0x80000000) == 0)
        {
          v365 = *(_QWORD *)(v364 + 8);
          if (v365 >= 0xFFFFFFFF)
            LODWORD(v365) = -1;
          v113 = v365 + 1;
          goto LABEL_779;
        }
        v619 = (v1848 + ((v1907 + v364) & v1923)) & v1884;
        if (v1821 > 0x7FFFFFFD)
        {
          v113 = (*(uint64_t (**)(uint64_t))(v1845 + 48))(v619);
          goto LABEL_778;
        }
        v487 = *(_QWORD *)(((v1794 + ((v1844 + v619) & v1884)) & 0xFFFFFFFFFFFFF8) + 8);
      }
      if (v487 >= 0xFFFFFFFF)
        LODWORD(v487) = -1;
      if ((v487 + 1) >= 2)
        goto LABEL_780;
      goto LABEL_783;
    case 7u:
      v1777 = v78;
      v118 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1853 + 16);
      v1857 = ~v1855;
      ((void (*)(_QWORD *))v118)(a1);
      v119 = ((unint64_t)a1 + v1834) & v84;
      v118(v119, ((unint64_t)a2 + v1834) & v84, AssociatedTypeWitness);
      v120 = (v119 + v1894 + v1937) & v85;
      v121 = ((((unint64_t)a2 + v1834) & v84) + v1894 + v1937) & v85;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1835 + 16))(v120, v121, v1836);
      v122 = (_QWORD *)((v1840 + v120) & 0xFFFFFFFFFFFFFFF8);
      v123 = (_QWORD *)((v1840 + v121) & 0xFFFFFFFFFFFFFFF8);
      *v122 = *v123;
      v124 = ((unint64_t)v122 + v1830) & v1857;
      v125 = ((unint64_t)v123 + v1830) & v1857;
      v126 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1831 + 16);
      swift_bridgeObjectRetain();
      v126(v124, v125, v1832);
      v127 = (_QWORD *)((v1825 + v124) & 0xFFFFFFFFFFFFF8);
      v128 = (_QWORD *)((v1825 + v125) & 0xFFFFFFFFFFFFF8);
      *v127 = *v128;
      v129 = (_QWORD *)(((unint64_t)v127 + 15) & 0xFFFFFFFFFFFFFFF8);
      v130 = (_QWORD *)(((unint64_t)v128 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v129 = *v130;
      v129[1] = v130[1];
      v131 = (_QWORD *)(v1905 + v120);
      *v131 = *(_QWORD *)(v1905 + v121);
      v131[1] = *(_QWORD *)(v1905 + v121 + 8);
      v132 = (v1907 + v1905 + v120) & ~v1859;
      v133 = (v1907 + v1905 + v121) & ~v1859;
      *(_BYTE *)v132 = *(_BYTE *)v133;
      v134 = v132 | 4;
      v135 = *(_DWORD *)(v133 | 4);
      *(_BYTE *)(v134 + 4) = *(_BYTE *)((v133 | 4) + 4);
      *(_DWORD *)v134 = v135;
      *(_WORD *)(v132 + 10) = *(_WORD *)(v133 + 0xA);
      v136 = (v1848 + v132) & v88;
      v137 = (v1848 + v133) & v88;
      v138 = *(void (**)(size_t, size_t, uint64_t))(v1845 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v138(v136, v137, v1846);
      v139 = (v1844 + v136) & v88;
      v140 = (v1844 + v137) & v88;
      v138(v139, v140, v1846);
      v141 = (_BYTE *)(v139 + v1850);
      *v141 = *(_BYTE *)(v140 + v1850);
      v141[1] = *(_BYTE *)(v140 + v1850 + 1);
      v141[2] = *(_BYTE *)(v140 + v1850 + 2);
      v141[3] = *(_BYTE *)(v140 + v1850 + 3);
      v141[4] = *(_BYTE *)(v140 + v1850 + 4);
      v142 = (v139 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
      v143 = (v140 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v142 = *(_QWORD *)v143;
      *(_QWORD *)(v142 + 8) = *(_QWORD *)(v143 + 8);
      *(_BYTE *)(v142 + 16) = *(_BYTE *)(v143 + 16);
      *(_BYTE *)(v142 + 17) = *(_BYTE *)(v143 + 17);
      *(_BYTE *)(v142 + 18) = *(_BYTE *)(v143 + 18);
      *(_BYTE *)(v142 + 19) = *(_BYTE *)(v143 + 19);
      v144 = (v142 + 27) & 0xFFFFFFFFFFFFFFF8;
      v145 = (v143 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v144 = *(_QWORD *)v145;
      *(_BYTE *)(v144 + 8) = *(_BYTE *)(v145 + 8);
      *(_BYTE *)(v144 + 9) = *(_BYTE *)(v145 + 9);
      *(_BYTE *)(v144 + 10) = *(_BYTE *)(v145 + 10);
      *(_BYTE *)(v144 + 11) = *(_BYTE *)(v145 + 11);
      *(_BYTE *)(v144 + 12) = *(_BYTE *)(v145 + 12);
      v146 = (_QWORD *)((v142 + 47) & 0xFFFFFFFFFFFFF8);
      v147 = (_QWORD *)((v143 + 47) & 0xFFFFFFFFFFFFF8);
      *v146 = *v147;
      v148 = ((unint64_t)v146 + 15) & 0xFFFFFFFFFFFFFFF8;
      v149 = ((unint64_t)v147 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v148 = *(_QWORD *)v149;
      *(_BYTE *)(v148 + 8) = *(_BYTE *)(v149 + 8);
      *(_BYTE *)(v148 + 9) = *(_BYTE *)(v149 + 9);
      v150 = (void *)((v1841 + v148) & v88);
      v151 = (const void *)((v1841 + v149) & v88);
      v152 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1845 + 48);
      swift_bridgeObjectRetain();
      if (v152(v151, 1, v1846))
      {
        memcpy(v150, v151, __n);
      }
      else
      {
        v138((size_t)v150, (size_t)v151, v1846);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1845 + 56))(v150, 0, 1, v1846);
      }
      v280 = (_QWORD *)(((unint64_t)v150 + v1842) & 0xFFFFFFFFFFFFFFF8);
      v281 = (_QWORD *)(((unint64_t)v151 + v1842) & 0xFFFFFFFFFFFFFFF8);
      *v280 = *v281;
      v282 = ((unint64_t)v280 + 15) & 0xFFFFFFFFFFFFFFF8;
      v283 = ((unint64_t)v281 + 15) & 0xFFFFFFFFFFFFFFF8;
      v284 = *(_QWORD *)v283;
      *(_BYTE *)(v282 + 8) = *(_BYTE *)(v283 + 8);
      *(_QWORD *)v282 = v284;
      v285 = (_QWORD *)(((unint64_t)v280 + 31) & 0xFFFFFFFFFFFFF8);
      v286 = (_QWORD *)(((unint64_t)v281 + 31) & 0xFFFFFFFFFFFFF8);
      *v285 = *v286;
      v287 = ((unint64_t)v285 + 15) & 0xFFFFFFFFFFFFFFF8;
      v288 = (uint64_t *)(((unint64_t)v286 + 15) & 0xFFFFFFFFFFFFFFF8);
      v289 = v288[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v289 & 0x3000000000000000) != 0)
      {
        *(_OWORD *)v287 = *(_OWORD *)v288;
      }
      else
      {
        v300 = *v288;
        sub_23AAAE668(*v288, v289);
        *(_QWORD *)v287 = v300;
        *(_QWORD *)(v287 + 8) = v289;
      }
      v301 = (v287 + 19) & 0xFFFFFFFFFFFFFFF8;
      v302 = ((unint64_t)v288 + 19) & 0xFFFFFFFFFFFFFFF8;
      v303 = *(_QWORD *)v302;
      *(_BYTE *)(v301 + 8) = *(_BYTE *)(v302 + 8);
      *(_QWORD *)v301 = v303;
      *(_BYTE *)(v301 + 9) = *(_BYTE *)(v302 + 9);
      v304 = (v301 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v305 = (v302 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v306 = *(_DWORD *)v305;
      *(_BYTE *)(v304 + 4) = *(_BYTE *)(v305 + 4);
      *(_DWORD *)v304 = v306;
      v307 = (_QWORD *)((v301 + 25) & 0xFFFFFFFFFFFFFFF8);
      v308 = (_QWORD *)((v302 + 25) & 0xFFFFFFFFFFFFFFF8);
      *v307 = *v308;
      v307[1] = v308[1];
      v309 = v1843 + v132;
      v310 = v1843 + v133;
      v311 = *(_QWORD *)(v1843 + v133 + 16);
      if (v311 >= 0xFFFFFFFF)
        LODWORD(v311) = -1;
      v312 = v311 - 1;
      swift_bridgeObjectRetain();
      if (v312 < 0)
      {
        *(_QWORD *)v309 = *(_QWORD *)v310;
        *(_BYTE *)(v309 + 8) = *(_BYTE *)(v310 + 8);
        *(_BYTE *)(v309 + 9) = *(_BYTE *)(v310 + 9);
        v350 = *(void **)(v310 + 16);
        v351 = v350;
        *(_QWORD *)(v309 + 16) = v350;
        v352 = *(void **)(v310 + 24);
        v353 = v352;
        *(_QWORD *)(v309 + 24) = v352;
        *(_BYTE *)(v309 + 32) = *(_BYTE *)(v310 + 32);
        *(_BYTE *)(v309 + 33) = *(_BYTE *)(v310 + 33);
        *(_BYTE *)(v309 + 34) = *(_BYTE *)(v310 + 34);
        *(_QWORD *)(v309 + 40) = *(_QWORD *)(v310 + 40);
        *(_QWORD *)(v309 + 48) = *(_QWORD *)(v310 + 48);
        *(_QWORD *)(v309 + 56) = *(_QWORD *)(v310 + 56);
        *(_QWORD *)(v309 + 64) = *(_QWORD *)(v310 + 64);
        *(_BYTE *)(v309 + 72) = *(_BYTE *)(v310 + 72);
        *(_QWORD *)(v309 + 80) = *(_QWORD *)(v310 + 80);
        *(_QWORD *)(v309 + 88) = *(_QWORD *)(v310 + 88);
        v1938 = *(void **)(v310 + 96);
        *(_QWORD *)(v309 + 96) = v1938;
        *(_BYTE *)(v309 + 104) = *(_BYTE *)(v310 + 104);
        *(_BYTE *)(v309 + 105) = *(_BYTE *)(v310 + 105);
        *(_QWORD *)(v309 + 112) = *(_QWORD *)(v310 + 112);
        *(_QWORD *)(v309 + 120) = *(_QWORD *)(v310 + 120);
        *(_QWORD *)(v309 + 128) = *(_QWORD *)(v310 + 128);
        *(_QWORD *)(v309 + 136) = *(_QWORD *)(v310 + 136);
        *(_QWORD *)(v309 + 144) = *(_QWORD *)(v310 + 144);
        *(_QWORD *)(v309 + 152) = *(_QWORD *)(v310 + 152);
        *(_QWORD *)(v309 + 160) = *(_QWORD *)(v310 + 160);
        *(_QWORD *)(v309 + 168) = *(_QWORD *)(v310 + 168);
        *(_BYTE *)(v309 + 176) = *(_BYTE *)(v310 + 176);
        *(_QWORD *)(v309 + 184) = *(_QWORD *)(v310 + 184);
        v354 = *(_QWORD *)(v310 + 192);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v355 = v1938;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v354)
        {
          *(_QWORD *)(v309 + 192) = v354;
          *(_QWORD *)(v309 + 200) = *(_QWORD *)(v310 + 200);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v309 + 192) = *(_OWORD *)(v310 + 192);
        }
        *(_QWORD *)(v309 + 208) = *(_QWORD *)(v310 + 208);
        *(_QWORD *)(v309 + 216) = *(_QWORD *)(v310 + 216);
        *(_QWORD *)(v309 + 224) = *(_QWORD *)(v310 + 224);
        *(_QWORD *)(v309 + 232) = *(_QWORD *)(v310 + 232);
        *(_QWORD *)(v309 + 240) = *(_QWORD *)(v310 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v313 = *(_OWORD *)v310;
        v314 = *(_OWORD *)(v310 + 16);
        v315 = *(_OWORD *)(v310 + 48);
        *(_OWORD *)(v309 + 32) = *(_OWORD *)(v310 + 32);
        *(_OWORD *)(v309 + 48) = v315;
        *(_OWORD *)v309 = v313;
        *(_OWORD *)(v309 + 16) = v314;
        v316 = *(_OWORD *)(v310 + 64);
        v317 = *(_OWORD *)(v310 + 80);
        v318 = *(_OWORD *)(v310 + 112);
        *(_OWORD *)(v309 + 96) = *(_OWORD *)(v310 + 96);
        *(_OWORD *)(v309 + 112) = v318;
        *(_OWORD *)(v309 + 64) = v316;
        *(_OWORD *)(v309 + 80) = v317;
        v319 = *(_OWORD *)(v310 + 128);
        v320 = *(_OWORD *)(v310 + 144);
        v321 = *(_OWORD *)(v310 + 176);
        *(_OWORD *)(v309 + 160) = *(_OWORD *)(v310 + 160);
        *(_OWORD *)(v309 + 176) = v321;
        *(_OWORD *)(v309 + 128) = v319;
        *(_OWORD *)(v309 + 144) = v320;
        v322 = *(_OWORD *)(v310 + 192);
        v323 = *(_OWORD *)(v310 + 208);
        v324 = *(_OWORD *)(v310 + 224);
        *(_QWORD *)(v309 + 240) = *(_QWORD *)(v310 + 240);
        *(_OWORD *)(v309 + 208) = v323;
        *(_OWORD *)(v309 + 224) = v324;
        *(_OWORD *)(v309 + 192) = v322;
      }
      v458 = (_OWORD *)((v309 + 255) & 0xFFFFFFFFFFFFFFF8);
      v459 = (__int128 *)((v310 + 255) & 0xFFFFFFFFFFFFFFF8);
      v460 = *v459;
      *(_OWORD *)((char *)v458 + 9) = *(__int128 *)((char *)v459 + 9);
      *v458 = v460;
      v461 = (v309 + 287) & 0xFFFFFFFFFFFFFFF8;
      v462 = (v310 + 287) & 0xFFFFFFFFFFFFFFF8;
      v463 = *(_OWORD *)v462;
      *(_BYTE *)(v461 + 16) = *(_BYTE *)(v462 + 16);
      *(_OWORD *)v461 = v463;
      v464 = (_QWORD *)((v309 + 311) & 0xFFFFFFFFFFFFF8);
      v465 = (v310 + 311) & 0xFFFFFFFFFFFFF8;
      v466 = *(_QWORD *)v465;
      v465 += 15;
      *v464 = v466;
      v467 = (_QWORD *)(((unint64_t)v464 + 15) & 0xFFFFFFFFFFFFFFF8);
      v468 = *(_QWORD *)(v465 & 0xFFFFFFFFFFFFFFF8);
      v469 = *(_QWORD *)((v465 & 0xFFFFFFFFFFFFFFF8) + 8);
      sub_23AA7F2D4(v468, v469);
      *v467 = v468;
      v467[1] = v469;
      v207 = v1777;
      if (v1777 > 3)
        goto LABEL_425;
      v470 = ((1 << (8 * v1777)) + 5) >> (8 * v1777);
      if (v470 > 0xFFD8)
      {
        v366 = 7;
        goto LABEL_1289;
      }
      if (v470 <= 0xD8)
      {
LABEL_425:
        v208 = 7;
        goto LABEL_1283;
      }
      v261 = 7;
      goto LABEL_1287;
    case 8u:
      v1778 = v78;
      v153 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1851 + 16);
      v1924 = ~v1859;
      v1770 = ((((v1826 + ((v39 + 8 + (v1869 & 0xFFFFFFFFFFFFFFF8)) & ~v39)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      v1896 = v37;
      v1861 = ~v39;
      ((void (*)(_QWORD *))v153)(a1);
      v154 = ((unint64_t)a2 + v1827) & v82;
      v153(((unint64_t)a1 + v1827) & v82, v154, v1852);
      v155 = ((((unint64_t)a1 + v1827) & v82) + v1887 + v40) & ~v40;
      v156 = (v154 + v1887 + v40) & ~v40;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16))(v155, v156, v1838);
      v157 = (_QWORD *)((v1869 + v155) & 0xFFFFFFFFFFFFFFF8);
      v158 = (_QWORD *)((v1869 + v156) & 0xFFFFFFFFFFFFFFF8);
      *v157 = *v158;
      v159 = ((unint64_t)v157 + v1839) & v1861;
      v160 = ((unint64_t)v158 + v1839) & v1861;
      v161 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1896 + 16);
      swift_bridgeObjectRetain();
      v161(v159, v160, v1833);
      v162 = (_QWORD *)((v1826 + v159) & 0xFFFFFFFFFFFFF8);
      v163 = (_QWORD *)((v1826 + v160) & 0xFFFFFFFFFFFFF8);
      *v162 = *v163;
      v164 = (_QWORD *)(((unint64_t)v162 + 15) & 0xFFFFFFFFFFFFFFF8);
      v165 = (_QWORD *)(((unint64_t)v163 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v164 = *v165;
      v164[1] = v165[1];
      v166 = (_QWORD *)(v1770 + v155);
      *v166 = *(_QWORD *)(v1770 + v156);
      v166[1] = *(_QWORD *)(v1770 + v156 + 8);
      v167 = (v1907 + v1770 + v155) & v1924;
      v168 = (v1907 + v1770 + v156) & v1924;
      *(_BYTE *)v167 = *(_BYTE *)v168;
      v169 = v167 | 4;
      v170 = *(_DWORD *)(v168 | 4);
      *(_BYTE *)(v169 + 4) = *(_BYTE *)((v168 | 4) + 4);
      *(_DWORD *)v169 = v170;
      *(_WORD *)(v167 + 10) = *(_WORD *)(v168 + 0xA);
      v171 = (v1848 + v167) & v88;
      v172 = (v1848 + v168) & v88;
      v173 = *(void (**)(size_t, size_t, uint64_t))(v1845 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v173(v171, v172, v1846);
      v174 = (v1844 + v171) & v88;
      v175 = (v1844 + v172) & v88;
      v173(v174, v175, v1846);
      v176 = (_BYTE *)(v174 + v1850);
      *v176 = *(_BYTE *)(v175 + v1850);
      v176[1] = *(_BYTE *)(v175 + v1850 + 1);
      v176[2] = *(_BYTE *)(v175 + v1850 + 2);
      v176[3] = *(_BYTE *)(v175 + v1850 + 3);
      v176[4] = *(_BYTE *)(v175 + v1850 + 4);
      v177 = (v174 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
      v178 = (v175 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v177 = *(_QWORD *)v178;
      *(_QWORD *)(v177 + 8) = *(_QWORD *)(v178 + 8);
      *(_BYTE *)(v177 + 16) = *(_BYTE *)(v178 + 16);
      *(_BYTE *)(v177 + 17) = *(_BYTE *)(v178 + 17);
      *(_BYTE *)(v177 + 18) = *(_BYTE *)(v178 + 18);
      *(_BYTE *)(v177 + 19) = *(_BYTE *)(v178 + 19);
      v179 = (v177 + 27) & 0xFFFFFFFFFFFFFFF8;
      v180 = (v178 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v179 = *(_QWORD *)v180;
      *(_BYTE *)(v179 + 8) = *(_BYTE *)(v180 + 8);
      *(_BYTE *)(v179 + 9) = *(_BYTE *)(v180 + 9);
      *(_BYTE *)(v179 + 10) = *(_BYTE *)(v180 + 10);
      *(_BYTE *)(v179 + 11) = *(_BYTE *)(v180 + 11);
      *(_BYTE *)(v179 + 12) = *(_BYTE *)(v180 + 12);
      v181 = (_QWORD *)((v177 + 47) & 0xFFFFFFFFFFFFF8);
      v182 = (_QWORD *)((v178 + 47) & 0xFFFFFFFFFFFFF8);
      *v181 = *v182;
      v183 = ((unint64_t)v181 + 15) & 0xFFFFFFFFFFFFFFF8;
      v184 = ((unint64_t)v182 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v183 = *(_QWORD *)v184;
      *(_BYTE *)(v183 + 8) = *(_BYTE *)(v184 + 8);
      *(_BYTE *)(v183 + 9) = *(_BYTE *)(v184 + 9);
      v185 = (void *)((v1841 + v183) & v88);
      v186 = (const void *)((v1841 + v184) & v88);
      v187 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1845 + 48);
      swift_bridgeObjectRetain();
      if (v187(v186, 1, v1846))
      {
        memcpy(v185, v186, __n);
      }
      else
      {
        v173((size_t)v185, (size_t)v186, v1846);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1845 + 56))(v185, 0, 1, v1846);
      }
      v290 = (_QWORD *)(((unint64_t)v185 + v1842) & 0xFFFFFFFFFFFFFFF8);
      v291 = (_QWORD *)(((unint64_t)v186 + v1842) & 0xFFFFFFFFFFFFFFF8);
      *v290 = *v291;
      v292 = ((unint64_t)v290 + 15) & 0xFFFFFFFFFFFFFFF8;
      v293 = ((unint64_t)v291 + 15) & 0xFFFFFFFFFFFFFFF8;
      v294 = *(_QWORD *)v293;
      *(_BYTE *)(v292 + 8) = *(_BYTE *)(v293 + 8);
      *(_QWORD *)v292 = v294;
      v295 = (_QWORD *)(((unint64_t)v290 + 31) & 0xFFFFFFFFFFFFF8);
      v296 = (_QWORD *)(((unint64_t)v291 + 31) & 0xFFFFFFFFFFFFF8);
      *v295 = *v296;
      v297 = ((unint64_t)v295 + 15) & 0xFFFFFFFFFFFFFFF8;
      v298 = (uint64_t *)(((unint64_t)v296 + 15) & 0xFFFFFFFFFFFFFFF8);
      v299 = v298[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v299 & 0x3000000000000000) != 0)
      {
        *(_OWORD *)v297 = *(_OWORD *)v298;
      }
      else
      {
        v325 = *v298;
        sub_23AAAE668(*v298, v299);
        *(_QWORD *)v297 = v325;
        *(_QWORD *)(v297 + 8) = v299;
      }
      v326 = (v297 + 19) & 0xFFFFFFFFFFFFFFF8;
      v327 = ((unint64_t)v298 + 19) & 0xFFFFFFFFFFFFFFF8;
      v328 = *(_QWORD *)v327;
      *(_BYTE *)(v326 + 8) = *(_BYTE *)(v327 + 8);
      *(_QWORD *)v326 = v328;
      *(_BYTE *)(v326 + 9) = *(_BYTE *)(v327 + 9);
      v329 = (v326 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v330 = (v327 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v331 = *(_DWORD *)v330;
      *(_BYTE *)(v329 + 4) = *(_BYTE *)(v330 + 4);
      *(_DWORD *)v329 = v331;
      v332 = (_QWORD *)((v326 + 25) & 0xFFFFFFFFFFFFFFF8);
      v333 = (_QWORD *)((v327 + 25) & 0xFFFFFFFFFFFFFFF8);
      *v332 = *v333;
      v332[1] = v333[1];
      v334 = v1843 + v167;
      v335 = v1843 + v168;
      v336 = *(_QWORD *)(v1843 + v168 + 16);
      if (v336 >= 0xFFFFFFFF)
        LODWORD(v336) = -1;
      v337 = v336 - 1;
      swift_bridgeObjectRetain();
      if (v337 < 0)
      {
        *(_QWORD *)v334 = *(_QWORD *)v335;
        *(_BYTE *)(v334 + 8) = *(_BYTE *)(v335 + 8);
        *(_BYTE *)(v334 + 9) = *(_BYTE *)(v335 + 9);
        v356 = *(void **)(v335 + 16);
        v357 = v356;
        *(_QWORD *)(v334 + 16) = v356;
        v358 = *(void **)(v335 + 24);
        v359 = v358;
        *(_QWORD *)(v334 + 24) = v358;
        *(_BYTE *)(v334 + 32) = *(_BYTE *)(v335 + 32);
        *(_BYTE *)(v334 + 33) = *(_BYTE *)(v335 + 33);
        *(_BYTE *)(v334 + 34) = *(_BYTE *)(v335 + 34);
        *(_QWORD *)(v334 + 40) = *(_QWORD *)(v335 + 40);
        *(_QWORD *)(v334 + 48) = *(_QWORD *)(v335 + 48);
        *(_QWORD *)(v334 + 56) = *(_QWORD *)(v335 + 56);
        *(_QWORD *)(v334 + 64) = *(_QWORD *)(v335 + 64);
        *(_BYTE *)(v334 + 72) = *(_BYTE *)(v335 + 72);
        *(_QWORD *)(v334 + 80) = *(_QWORD *)(v335 + 80);
        *(_QWORD *)(v334 + 88) = *(_QWORD *)(v335 + 88);
        v1939 = *(void **)(v335 + 96);
        *(_QWORD *)(v334 + 96) = v1939;
        *(_BYTE *)(v334 + 104) = *(_BYTE *)(v335 + 104);
        *(_BYTE *)(v334 + 105) = *(_BYTE *)(v335 + 105);
        *(_QWORD *)(v334 + 112) = *(_QWORD *)(v335 + 112);
        *(_QWORD *)(v334 + 120) = *(_QWORD *)(v335 + 120);
        *(_QWORD *)(v334 + 128) = *(_QWORD *)(v335 + 128);
        *(_QWORD *)(v334 + 136) = *(_QWORD *)(v335 + 136);
        *(_QWORD *)(v334 + 144) = *(_QWORD *)(v335 + 144);
        *(_QWORD *)(v334 + 152) = *(_QWORD *)(v335 + 152);
        *(_QWORD *)(v334 + 160) = *(_QWORD *)(v335 + 160);
        *(_QWORD *)(v334 + 168) = *(_QWORD *)(v335 + 168);
        *(_BYTE *)(v334 + 176) = *(_BYTE *)(v335 + 176);
        *(_QWORD *)(v334 + 184) = *(_QWORD *)(v335 + 184);
        v360 = *(_QWORD *)(v335 + 192);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v361 = v1939;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v360)
        {
          *(_QWORD *)(v334 + 192) = v360;
          *(_QWORD *)(v334 + 200) = *(_QWORD *)(v335 + 200);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v334 + 192) = *(_OWORD *)(v335 + 192);
        }
        *(_QWORD *)(v334 + 208) = *(_QWORD *)(v335 + 208);
        *(_QWORD *)(v334 + 216) = *(_QWORD *)(v335 + 216);
        *(_QWORD *)(v334 + 224) = *(_QWORD *)(v335 + 224);
        *(_QWORD *)(v334 + 232) = *(_QWORD *)(v335 + 232);
        *(_QWORD *)(v334 + 240) = *(_QWORD *)(v335 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v338 = *(_OWORD *)v335;
        v339 = *(_OWORD *)(v335 + 16);
        v340 = *(_OWORD *)(v335 + 48);
        *(_OWORD *)(v334 + 32) = *(_OWORD *)(v335 + 32);
        *(_OWORD *)(v334 + 48) = v340;
        *(_OWORD *)v334 = v338;
        *(_OWORD *)(v334 + 16) = v339;
        v341 = *(_OWORD *)(v335 + 64);
        v342 = *(_OWORD *)(v335 + 80);
        v343 = *(_OWORD *)(v335 + 112);
        *(_OWORD *)(v334 + 96) = *(_OWORD *)(v335 + 96);
        *(_OWORD *)(v334 + 112) = v343;
        *(_OWORD *)(v334 + 64) = v341;
        *(_OWORD *)(v334 + 80) = v342;
        v344 = *(_OWORD *)(v335 + 128);
        v345 = *(_OWORD *)(v335 + 144);
        v346 = *(_OWORD *)(v335 + 176);
        *(_OWORD *)(v334 + 160) = *(_OWORD *)(v335 + 160);
        *(_OWORD *)(v334 + 176) = v346;
        *(_OWORD *)(v334 + 128) = v344;
        *(_OWORD *)(v334 + 144) = v345;
        v347 = *(_OWORD *)(v335 + 192);
        v348 = *(_OWORD *)(v335 + 208);
        v349 = *(_OWORD *)(v335 + 224);
        *(_QWORD *)(v334 + 240) = *(_QWORD *)(v335 + 240);
        *(_OWORD *)(v334 + 208) = v348;
        *(_OWORD *)(v334 + 224) = v349;
        *(_OWORD *)(v334 + 192) = v347;
      }
      v471 = (_OWORD *)((v334 + 255) & 0xFFFFFFFFFFFFFFF8);
      v472 = (__int128 *)((v335 + 255) & 0xFFFFFFFFFFFFFFF8);
      v473 = *v472;
      *(_OWORD *)((char *)v471 + 9) = *(__int128 *)((char *)v472 + 9);
      *v471 = v473;
      v474 = (v334 + 287) & 0xFFFFFFFFFFFFFFF8;
      v475 = (v335 + 287) & 0xFFFFFFFFFFFFFFF8;
      v476 = *(_OWORD *)v475;
      *(_BYTE *)(v474 + 16) = *(_BYTE *)(v475 + 16);
      *(_OWORD *)v474 = v476;
      v477 = (_QWORD *)((v334 + 311) & 0xFFFFFFFFFFFFF8);
      v478 = (v335 + 311) & 0xFFFFFFFFFFFFF8;
      v479 = *(_QWORD *)v478;
      v478 += 15;
      *v477 = v479;
      v480 = (_QWORD *)(((unint64_t)v477 + 15) & 0xFFFFFFFFFFFFFFF8);
      v481 = *(_QWORD *)(v478 & 0xFFFFFFFFFFFFFFF8);
      v482 = *(_QWORD *)((v478 & 0xFFFFFFFFFFFFFFF8) + 8);
      sub_23AA7F2D4(v481, v482);
      *v480 = v481;
      v480[1] = v482;
      v207 = v1778;
      if (v1778 > 3)
        goto LABEL_433;
      v483 = ((1 << (8 * v1778)) + 5) >> (8 * v1778);
      if (v483 > 0xFFD8)
      {
        v366 = 8;
        goto LABEL_1289;
      }
      if (v483 <= 0xD8)
      {
LABEL_433:
        v208 = 8;
        goto LABEL_1283;
      }
      v261 = 8;
      goto LABEL_1287;
    case 9u:
      v188 = *((unsigned __int8 *)a2 + v1879);
      if (v188 >= 2)
      {
        if (v1879 <= 3)
          v189 = v1879;
        else
          v189 = 4;
        __asm { BR              X12 }
      }
      v249 = v78;
      v506 = v188 == 1;
      if (v188 == 1)
        v507 = v1851;
      else
        v507 = v1853;
      (*(void (**)(_QWORD *))(v507 + 16))(a1);
      *((_BYTE *)a1 + v1879) = v506;
      if (v249 > 3)
        goto LABEL_483;
      v508 = ((1 << (8 * v249)) + 5) >> (8 * v249);
      if (v508 > 0xFFD8)
      {
        v491 = 9;
        goto LABEL_734;
      }
      if (v508 <= 0xD8)
      {
LABEL_483:
        v490 = 9;
        goto LABEL_728;
      }
      LOWORD(v491) = 9;
      goto LABEL_732;
    case 0xAu:
      v190 = *((unsigned __int8 *)a2 + v1879);
      if (v190 >= 2)
      {
        if (v1879 <= 3)
          v191 = v1879;
        else
          v191 = 4;
        __asm { BR              X12 }
      }
      v255 = ~v1875;
      v499 = v78;
      v509 = v190 == 1;
      if (v190 == 1)
        v510 = v1851;
      else
        v510 = v1853;
      if (v190 == 1)
        v511 = v1852;
      else
        v511 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v510 + 16))(a1, a2, v511);
      *((_BYTE *)a1 + v1879) = v509;
      v512 = (char *)(((unint64_t)a1 + v1847) & v255);
      v513 = ((unint64_t)a2 + v1847) & v255;
      v514 = *(unsigned __int8 *)(v513 + v1879);
      if (v514 > 1)
      {
        v515 = v1909;
        memcpy(v512, (const void *)(((unint64_t)a2 + v1847) & v255), v1909);
      }
      else
      {
        if (v514 == 1)
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v1851 + 16))(v512, ((unint64_t)a2 + v1847) & v255, v1852);
          v512[v1879] = 1;
        }
        else
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v1853 + 16))(v512, ((unint64_t)a2 + v1847) & v255, AssociatedTypeWitness);
          v512[v1879] = 0;
        }
        v515 = v1909;
      }
      v516 = &v512[v515];
      *v516 = *(_BYTE *)(v513 + v515);
      v516[1] = *(_BYTE *)(v513 + v515 + 1);
      if (v499 > 3)
        goto LABEL_501;
      v518 = ((1 << (8 * v499)) + 5) >> (8 * v499);
      if (v518 > 0xFFD8)
      {
        v520 = 10;
        goto LABEL_755;
      }
      if (v518 <= 0xD8)
      {
LABEL_501:
        v517 = 10;
        goto LABEL_749;
      }
      v519 = 10;
      goto LABEL_753;
    case 0xBu:
      v192 = *((unsigned __int8 *)a2 + v1879);
      if (v192 >= 2)
      {
        if (v1879 <= 3)
          v193 = v1879;
        else
          v193 = 4;
        __asm { BR              X12 }
      }
      v256 = ~v1875;
      v499 = v78;
      v521 = v192 == 1;
      if (v192 == 1)
        v522 = v1851;
      else
        v522 = v1853;
      if (v192 == 1)
        v523 = v1852;
      else
        v523 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v522 + 16))(a1, a2, v523);
      *((_BYTE *)a1 + v1879) = v521;
      v524 = (char *)(((unint64_t)a1 + v1847) & v256);
      v525 = ((unint64_t)a2 + v1847) & v256;
      v526 = *(unsigned __int8 *)(v525 + v1879);
      if (v526 > 1)
      {
        v527 = v1909;
        memcpy(v524, (const void *)(((unint64_t)a2 + v1847) & v256), v1909);
      }
      else
      {
        if (v526 == 1)
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v1851 + 16))(v524, ((unint64_t)a2 + v1847) & v256, v1852);
          v524[v1879] = 1;
        }
        else
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v1853 + 16))(v524, ((unint64_t)a2 + v1847) & v256, AssociatedTypeWitness);
          v524[v1879] = 0;
        }
        v527 = v1909;
      }
      v528 = &v524[v527];
      *v528 = *(_BYTE *)(v525 + v527);
      v528[1] = *(_BYTE *)(v525 + v527 + 1);
      if (v499 > 3)
        goto LABEL_519;
      v529 = ((1 << (8 * v499)) + 5) >> (8 * v499);
      if (v529 > 0xFFD8)
      {
        v520 = 11;
        goto LABEL_755;
      }
      if (v529 <= 0xD8)
      {
LABEL_519:
        v517 = 11;
        goto LABEL_749;
      }
      v519 = 11;
      goto LABEL_753;
    case 0xCu:
      v194 = *((unsigned __int8 *)a2 + v1879);
      if (v194 >= 2)
      {
        if (v1879 <= 3)
          v195 = v1879;
        else
          v195 = 4;
        __asm { BR              X12 }
      }
      v257 = v78;
      v530 = v194 == 1;
      if (v194 == 1)
        v531 = v1851;
      else
        v531 = v1853;
      if (v194 == 1)
        v532 = v1852;
      else
        v532 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v531 + 16))(a1, a2, v532);
      *((_BYTE *)a1 + v1879) = v530;
      *((_BYTE *)a1 + v1909) = *((_BYTE *)a2 + v1909);
      v533 = *(void **)(((unint64_t)a2 + v73 + 7) & 0xFFFFFFFFFFFFF8);
      v534 = v533;
      *(_QWORD *)(((unint64_t)a1 + v73 + 7) & 0xFFFFFFFFFFFFF8) = v533;
      if (v257 > 3)
        goto LABEL_531;
      v536 = ((1 << (8 * v257)) + 5) >> (8 * v257);
      if (v536 > 0xFFD8)
      {
        v538 = 12;
        goto LABEL_574;
      }
      if (v536 <= 0xD8)
      {
LABEL_531:
        v535 = 12;
        goto LABEL_568;
      }
      v537 = 12;
      goto LABEL_572;
    case 0xDu:
      v196 = *((unsigned __int8 *)a2 + v1879);
      if (v196 >= 2)
      {
        if (v1879 <= 3)
          v197 = v1879;
        else
          v197 = 4;
        __asm { BR              X12 }
      }
      v209 = v78;
      v539 = v196 == 1;
      if (v196 == 1)
        v540 = v1851;
      else
        v540 = v1853;
      if (v196 == 1)
        v541 = v1852;
      else
        v541 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v540 + 16))(a1, a2, v541);
      *((_BYTE *)a1 + v1879) = v539;
      *((_BYTE *)a1 + v1909) = *((_BYTE *)a2 + v1909);
      if (v209 > 3)
        goto LABEL_543;
      v543 = ((1 << (8 * v209)) + 5) >> (8 * v209);
      if (v543 > 0xFFD8)
      {
        v545 = 13;
        goto LABEL_722;
      }
      if (v543 <= 0xD8)
      {
LABEL_543:
        v542 = 13;
        goto LABEL_716;
      }
      v544 = 13;
      goto LABEL_720;
    case 0xEu:
      v198 = *((unsigned __int8 *)a2 + v1879);
      if (v198 >= 2)
      {
        if (v1879 <= 3)
          v199 = v1879;
        else
          v199 = 4;
        __asm { BR              X12 }
      }
      v257 = v78;
      v546 = v198 == 1;
      if (v198 == 1)
        v547 = v1851;
      else
        v547 = v1853;
      if (v198 == 1)
        v548 = v1852;
      else
        v548 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v547 + 16))(a1, a2, v548);
      *((_BYTE *)a1 + v1879) = v546;
      v549 = *(void **)(((unint64_t)a2 + v1909 + 7) & 0xFFFFFFFFFFFFF8);
      v550 = v549;
      *(_QWORD *)(((unint64_t)a1 + v1909 + 7) & 0xFFFFFFFFFFFFF8) = v549;
      if (v257 > 3)
        goto LABEL_555;
      v551 = ((1 << (8 * v257)) + 5) >> (8 * v257);
      if (v551 > 0xFFD8)
      {
        v538 = 14;
        goto LABEL_574;
      }
      if (v551 <= 0xD8)
      {
LABEL_555:
        v535 = 14;
        goto LABEL_568;
      }
      v537 = 14;
      goto LABEL_572;
    case 0xFu:
      v200 = *((unsigned __int8 *)a2 + v1879);
      if (v200 >= 2)
      {
        if (v1879 <= 3)
          v201 = v1879;
        else
          v201 = 4;
        __asm { BR              X12 }
      }
      v257 = v78;
      v552 = v200 == 1;
      if (v200 == 1)
        v553 = v1851;
      else
        v553 = v1853;
      if (v200 == 1)
        v554 = v1852;
      else
        v554 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v553 + 16))(a1, a2, v554);
      *((_BYTE *)a1 + v1879) = v552;
      v555 = *(void **)(((unint64_t)a2 + v1909 + 7) & 0xFFFFFFFFFFFFF8);
      v556 = v555;
      *(_QWORD *)(((unint64_t)a1 + v1909 + 7) & 0xFFFFFFFFFFFFF8) = v555;
      if (v257 > 3)
        goto LABEL_567;
      v557 = ((1 << (8 * v257)) + 5) >> (8 * v257);
      if (v557 > 0xFFD8)
      {
        v538 = 15;
LABEL_574:
        *(_DWORD *)((char *)a1 + v257) = v538;
      }
      else if (v557 <= 0xD8)
      {
LABEL_567:
        v535 = 15;
LABEL_568:
        *((_BYTE *)a1 + v257) = v535;
      }
      else
      {
        v537 = 15;
LABEL_572:
        *(_WORD *)((char *)a1 + v257) = v537;
      }
      return a1;
    case 0x10u:
      *a1 = *a2;
      v202 = a2 + 1;
      v203 = a2[2];
      if (v203 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 1) = *(_OWORD *)v202;
      }
      else
      {
        v258 = *v202;
        v259 = v78;
        sub_23AAAE668(*v202, a2[2]);
        v78 = v259;
        a1[1] = v258;
        a1[2] = v203;
      }
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
      *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
      a1[6] = a2[6];
      if (v78 > 3)
        goto LABEL_301;
      v269 = ((1 << (8 * v78)) + 5) >> (8 * v78);
      if (v269 > 0xFFD8)
      {
        v367 = 16;
        goto LABEL_381;
      }
      if (v269 <= 0xD8)
      {
LABEL_301:
        v215 = 16;
        goto LABEL_302;
      }
      v265 = 16;
      goto LABEL_337;
    case 0x11u:
      v204 = *((unsigned __int8 *)a2 + v1879);
      if (v204 >= 2)
      {
        if (v1879 <= 3)
          v205 = v1879;
        else
          v205 = 4;
        __asm { BR              X12 }
      }
      v249 = v78;
      v558 = v204 == 1;
      if (v204 == 1)
        v559 = v1851;
      else
        v559 = v1853;
      (*(void (**)(_QWORD *))(v559 + 16))(a1);
      *((_BYTE *)a1 + v1879) = v558;
      if (v249 > 3)
        goto LABEL_579;
      v560 = ((1 << (8 * v249)) + 5) >> (8 * v249);
      if (v560 > 0xFFD8)
      {
        v491 = 17;
        goto LABEL_734;
      }
      if (v560 <= 0xD8)
      {
LABEL_579:
        v490 = 17;
        goto LABEL_728;
      }
      LOWORD(v491) = 17;
      goto LABEL_732;
    case 0x12u:
      v206 = v78;
      (*(void (**)(_QWORD *))(v1853 + 16))(a1);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1851 + 16))(((unint64_t)a1 + v1820) & v82, ((unint64_t)a2 + v1820) & v82, v1852);
      v207 = v206;
      if (v206 > 3)
        goto LABEL_193;
      v260 = ((1 << (8 * v206)) + 5) >> (8 * v206);
      if (v260 > 0xFFD8)
      {
        v366 = 18;
        goto LABEL_1289;
      }
      if (v260 <= 0xD8)
      {
LABEL_193:
        v208 = 18;
        goto LABEL_1283;
      }
      v261 = 18;
      goto LABEL_1287;
    case 0x13u:
      v209 = v78;
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v210 = ((unint64_t)a1 + v1875 + 1) & v83;
      v211 = *(unsigned __int8 *)((((unint64_t)a2 + v1875 + 1) & v83) + v1879);
      if (v211 >= 2)
      {
        if (v1879 <= 3)
          v212 = v1879;
        else
          v212 = 4;
        __asm { BR              X12 }
      }
      v561 = v211 == 1;
      if (v211 == 1)
        v562 = v1851;
      else
        v562 = v1853;
      (*(void (**)(uint64_t))(v562 + 16))(v210);
      *(_BYTE *)(v210 + v1879) = v561;
      if (v209 > 3)
        goto LABEL_588;
      v563 = ((1 << (8 * v209)) + 5) >> (8 * v209);
      if (v563 > 0xFFD8)
      {
        v545 = 19;
        goto LABEL_722;
      }
      if (v563 <= 0xD8)
      {
LABEL_588:
        v542 = 19;
        goto LABEL_716;
      }
      v544 = 19;
      goto LABEL_720;
    case 0x14u:
      *a1 = *a2;
      v213 = v78;
      swift_retain();
      v207 = v213;
      if (v213 > 3)
        goto LABEL_200;
      v262 = ((1 << (8 * v213)) + 5) >> (8 * v213);
      if (v262 > 0xFFD8)
      {
        v366 = 20;
        goto LABEL_1289;
      }
      if (v262 <= 0xD8)
      {
LABEL_200:
        v208 = 20;
        goto LABEL_1283;
      }
      v261 = 20;
      goto LABEL_1287;
    case 0x15u:
      *a1 = *a2;
      v214 = v78;
      swift_retain();
      v207 = v214;
      if (v214 > 3)
        goto LABEL_202;
      v263 = ((1 << (8 * v214)) + 5) >> (8 * v214);
      if (v263 > 0xFFD8)
      {
        v366 = 21;
        goto LABEL_1289;
      }
      if (v263 <= 0xD8)
      {
LABEL_202:
        v208 = 21;
        goto LABEL_1283;
      }
      v261 = 21;
      goto LABEL_1287;
    case 0x16u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      if (v78 > 3)
        goto LABEL_204;
      v264 = ((1 << (8 * v78)) + 5) >> (8 * v78);
      if (v264 > 0xFFD8)
      {
        v367 = 22;
        goto LABEL_381;
      }
      if (v264 <= 0xD8)
      {
LABEL_204:
        v215 = 22;
        goto LABEL_302;
      }
      v265 = 22;
      goto LABEL_337;
    case 0x17u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      if (v78 > 3)
        goto LABEL_206;
      v266 = ((1 << (8 * v78)) + 5) >> (8 * v78);
      if (v266 > 0xFFD8)
      {
        v367 = 23;
LABEL_381:
        *(_DWORD *)((char *)a1 + v78) = v367;
      }
      else if (v266 <= 0xD8)
      {
LABEL_206:
        v215 = 23;
LABEL_302:
        *((_BYTE *)a1 + v78) = v215;
      }
      else
      {
        v265 = 23;
LABEL_337:
        *(_WORD *)((char *)a1 + v78) = v265;
      }
      return a1;
    case 0x18u:
      v216 = *((unsigned __int8 *)a2 + v1879);
      if (v216 >= 2)
      {
        if (v1879 <= 3)
          v217 = v1879;
        else
          v217 = 4;
        __asm { BR              X12 }
      }
      v249 = v78;
      v564 = v216 == 1;
      if (v216 == 1)
        v565 = v1851;
      else
        v565 = v1853;
      (*(void (**)(_QWORD *))(v565 + 16))(a1);
      *((_BYTE *)a1 + v1879) = v564;
      if (v249 > 3)
        goto LABEL_597;
      v566 = ((1 << (8 * v249)) + 5) >> (8 * v249);
      if (v566 > 0xFFD8)
      {
        v491 = 24;
        goto LABEL_734;
      }
      if (v566 <= 0xD8)
      {
LABEL_597:
        v490 = 24;
        goto LABEL_728;
      }
      LOWORD(v491) = 24;
      goto LABEL_732;
    case 0x19u:
      v218 = *((unsigned __int8 *)a2 + v1879);
      if (v218 >= 2)
      {
        if (v1879 <= 3)
          v219 = v1879;
        else
          v219 = 4;
        __asm { BR              X12 }
      }
      v249 = v78;
      v567 = v218 == 1;
      if (v218 == 1)
        v568 = v1851;
      else
        v568 = v1853;
      (*(void (**)(_QWORD *))(v568 + 16))(a1);
      *((_BYTE *)a1 + v1879) = v567;
      if (v249 > 3)
        goto LABEL_606;
      v569 = ((1 << (8 * v249)) + 5) >> (8 * v249);
      if (v569 > 0xFFD8)
      {
        v491 = 25;
        goto LABEL_734;
      }
      if (v569 <= 0xD8)
      {
LABEL_606:
        v490 = 25;
        goto LABEL_728;
      }
      LOWORD(v491) = 25;
      goto LABEL_732;
    case 0x1Au:
      v220 = *((unsigned __int8 *)a2 + v1879);
      if (v220 >= 2)
      {
        if (v1879 <= 3)
          v221 = v1879;
        else
          v221 = 4;
        __asm { BR              X12 }
      }
      v249 = v78;
      v570 = v220 == 1;
      if (v220 == 1)
        v571 = v1851;
      else
        v571 = v1853;
      (*(void (**)(_QWORD *))(v571 + 16))(a1);
      *((_BYTE *)a1 + v1879) = v570;
      if (v249 > 3)
        goto LABEL_615;
      v572 = ((1 << (8 * v249)) + 5) >> (8 * v249);
      if (v572 > 0xFFD8)
      {
        v491 = 26;
        goto LABEL_734;
      }
      if (v572 <= 0xD8)
      {
LABEL_615:
        v490 = 26;
        goto LABEL_728;
      }
      LOWORD(v491) = 26;
      goto LABEL_732;
    case 0x1Bu:
      v1757 = ~v1874;
      v1889 = ~v1915;
      v1758 = ~v1870;
      v1877 = ~v1937;
      v222 = v72;
      v223 = *((unsigned __int8 *)a2 + v72);
      v1858 = ~v1855;
      if (v223 >= 2)
      {
        if (v72 <= 3)
          v224 = v72;
        else
          v224 = 4;
        __asm { BR              X14 }
      }
      v267 = ~v1915;
      v1780 = v78;
      if (v223 == 1)
      {
        v573 = v88;
        v574 = AssociatedTypeWitness;
        v1020 = ~v70;
        switch(*((_BYTE *)a2 + v1798))
        {
          case 0:
            v1021 = v1850;
            v1022 = v89;
            v1863 = ~v39;
            v1899 = v37;
            v1928 = v87;
            v1766 = v43;
            v1772 = ((((v1826 + ((v39 + 8 + (v1869 & 0xFFFFFFFFFFFFFFF8)) & ~v39)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v1023 = *(void (**)(char *, _QWORD *, uint64_t))(v1851 + 16);
            v1023((char *)a1, a2, v1852);
            v1945 = (char *)(((unint64_t)a1 + v1792) & v1757);
            v1024 = (_QWORD *)(((unint64_t)a2 + v1792) & v1757);
            if (v1811 == v1822)
            {
              v1025 = (*(uint64_t (**)(unint64_t))(v1851 + 48))(((unint64_t)a2 + v1792) & v1757);
              v1026 = v573;
              v1027 = v1022;
              v1028 = ~v1870;
              v1029 = v1827;
LABEL_1121:
              if (v1025)
              {
LABEL_1122:
                v1156 = ((unint64_t)a1 + v1792) & v1757;
                memcpy(v1945, v1024, v1766);
                v222 = v1809;
LABEL_1123:
                v1021 = __n;
                goto LABEL_1227;
              }
              v1079 = ((unint64_t)v1024 + v1029) & v1028;
              v1080 = (v1810 + v1079) & v1027;
              goto LABEL_1125;
            }
            v1029 = v1827;
            v1028 = ~v1870;
            v1079 = ((unint64_t)v1024 + v1827) & v1758;
            v1027 = v1022;
            v1080 = (v1810 + v1079) & v1022;
            v1026 = v573;
            if (v1829 == v1822)
            {
              if (v1814 == v1829)
              {
                v1025 = (*(uint64_t (**)(unint64_t))(v1837 + 48))((v1810 + v1079) & v1022);
LABEL_1120:
                v1027 = v1022;
                goto LABEL_1121;
              }
              v1138 = (unint64_t *)((v1869 + v1080) & 0xFFFFFFFFFFFFFFF8);
              if (v1800 > 0x7FFFFFFE)
              {
                v1025 = (*(uint64_t (**)(unint64_t))(v1899 + 48))(((unint64_t)v1138 + v1839) & v1863);
                goto LABEL_1120;
              }
              v1139 = *v1138;
            }
            else
            {
              v1102 = v1080 + v1772;
              if ((v1796 & 0x80000000) == 0)
              {
                v1103 = *(_QWORD *)(v1102 + 8);
                if (v1103 >= 0xFFFFFFFF)
                  LODWORD(v1103) = -1;
                v1025 = v1103 + 1;
                goto LABEL_1121;
              }
              v1152 = (v1848 + ((v1907 + v1102) & v1928)) & v573;
              if (v1821 > 0x7FFFFFFD)
              {
                v1025 = (*(uint64_t (**)(uint64_t))(v1845 + 48))(v1152);
                goto LABEL_1120;
              }
              v1139 = *(_QWORD *)(((v1794 + ((v1844 + v1152) & v573)) & 0xFFFFFFFFFFFFF8) + 8);
            }
            if (v1139 >= 0xFFFFFFFF)
              LODWORD(v1139) = -1;
            if ((v1139 + 1) >= 2)
              goto LABEL_1122;
LABEL_1125:
            v1157 = v1027;
            v1023(v1945, v1024, v1852);
            v1158 = (unint64_t)&v1945[v1029];
            v1156 = ((unint64_t)a1 + v1792) & v1757;
            v1159 = v1158 & v1028;
            v1023((char *)v1159, (_QWORD *)v1079, v1852);
            v1160 = (v1810 + v1159) & v1157;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16))(v1160, v1080, v1838);
            v1161 = (_QWORD *)((v1869 + v1160) & 0xFFFFFFFFFFFFFFF8);
            v1162 = (_QWORD *)((v1869 + v1080) & 0xFFFFFFFFFFFFFFF8);
            *v1161 = *v1162;
            v1163 = ((unint64_t)v1161 + v1839) & v1863;
            v1164 = ((unint64_t)v1162 + v1839) & v1863;
            v1165 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1899 + 16);
            swift_bridgeObjectRetain();
            v1165(v1163, v1164, v1833);
            v1166 = (_QWORD *)((v1826 + v1163) & 0xFFFFFFFFFFFFF8);
            v1167 = (_QWORD *)((v1826 + v1164) & 0xFFFFFFFFFFFFF8);
            *v1166 = *v1167;
            v1168 = (_QWORD *)(((unint64_t)v1166 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1169 = (_QWORD *)(((unint64_t)v1167 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v1168 = *v1169;
            v1168[1] = v1169[1];
            v1170 = (_QWORD *)(v1160 + v1772);
            *v1170 = *(_QWORD *)(v1080 + v1772);
            v1170[1] = *(_QWORD *)(v1080 + v1772 + 8);
            v1171 = (v1907 + v1160 + v1772) & v1928;
            v1172 = (v1907 + v1080 + v1772) & v1928;
            *(_BYTE *)v1171 = *(_BYTE *)v1172;
            v1173 = v1171 | 4;
            v1174 = *(_DWORD *)(v1172 | 4);
            *(_BYTE *)(v1173 + 4) = *(_BYTE *)((v1172 | 4) + 4);
            *(_DWORD *)v1173 = v1174;
            *(_WORD *)(v1171 + 10) = *(_WORD *)(v1172 + 0xA);
            v1930 = v1171;
            v1175 = (v1848 + v1171) & v1026;
            v1911 = v1172;
            v1176 = (v1848 + v1172) & v1026;
            v1177 = *(void (**)(size_t, size_t, uint64_t))(v1845 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1177(v1175, v1176, v1846);
            v1178 = (v1844 + v1175) & v1026;
            v1179 = (v1844 + v1176) & v1026;
            v1177(v1178, v1179, v1846);
            v1180 = (_BYTE *)(v1178 + v1850);
            *v1180 = *(_BYTE *)(v1179 + v1850);
            v1180[1] = *(_BYTE *)(v1179 + v1850 + 1);
            v1180[2] = *(_BYTE *)(v1179 + v1850 + 2);
            v1180[3] = *(_BYTE *)(v1179 + v1850 + 3);
            v1180[4] = *(_BYTE *)(v1179 + v1850 + 4);
            v1181 = (v1178 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
            v1182 = (v1179 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1181 = *(_QWORD *)v1182;
            *(_QWORD *)(v1181 + 8) = *(_QWORD *)(v1182 + 8);
            *(_BYTE *)(v1181 + 16) = *(_BYTE *)(v1182 + 16);
            *(_BYTE *)(v1181 + 17) = *(_BYTE *)(v1182 + 17);
            *(_BYTE *)(v1181 + 18) = *(_BYTE *)(v1182 + 18);
            *(_BYTE *)(v1181 + 19) = *(_BYTE *)(v1182 + 19);
            v1183 = (v1181 + 27) & 0xFFFFFFFFFFFFFFF8;
            v1184 = (v1182 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1183 = *(_QWORD *)v1184;
            *(_BYTE *)(v1183 + 8) = *(_BYTE *)(v1184 + 8);
            *(_BYTE *)(v1183 + 9) = *(_BYTE *)(v1184 + 9);
            *(_BYTE *)(v1183 + 10) = *(_BYTE *)(v1184 + 10);
            *(_BYTE *)(v1183 + 11) = *(_BYTE *)(v1184 + 11);
            *(_BYTE *)(v1183 + 12) = *(_BYTE *)(v1184 + 12);
            v1185 = (_QWORD *)((v1181 + 47) & 0xFFFFFFFFFFFFF8);
            v1186 = (_QWORD *)((v1182 + 47) & 0xFFFFFFFFFFFFF8);
            *v1185 = *v1186;
            v1187 = ((unint64_t)v1185 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1188 = ((unint64_t)v1186 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1187 = *(_QWORD *)v1188;
            *(_BYTE *)(v1187 + 8) = *(_BYTE *)(v1188 + 8);
            *(_BYTE *)(v1187 + 9) = *(_BYTE *)(v1188 + 9);
            v1189 = (void *)((v1841 + v1187) & v1026);
            v1190 = (const void *)((v1841 + v1188) & v1026);
            v1191 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1845 + 48);
            swift_bridgeObjectRetain();
            if (v1191(v1190, 1, v1846))
            {
              memcpy(v1189, v1190, __n);
            }
            else
            {
              v1177((size_t)v1189, (size_t)v1190, v1846);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1845 + 56))(v1189, 0, 1, v1846);
            }
            v1192 = (_QWORD *)(((unint64_t)v1189 + v1842) & 0xFFFFFFFFFFFFFFF8);
            v1193 = (_QWORD *)(((unint64_t)v1190 + v1842) & 0xFFFFFFFFFFFFFFF8);
            *v1192 = *v1193;
            v1194 = ((unint64_t)v1192 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1195 = ((unint64_t)v1193 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1196 = *(_QWORD *)v1195;
            *(_BYTE *)(v1194 + 8) = *(_BYTE *)(v1195 + 8);
            *(_QWORD *)v1194 = v1196;
            v1197 = (_QWORD *)(((unint64_t)v1192 + 31) & 0xFFFFFFFFFFFFF8);
            v1198 = (_QWORD *)(((unint64_t)v1193 + 31) & 0xFFFFFFFFFFFFF8);
            *v1197 = *v1198;
            v1199 = ((unint64_t)v1197 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1200 = (uint64_t *)(((unint64_t)v1198 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1201 = v1200[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((v1201 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)v1199 = *(_OWORD *)v1200;
            }
            else
            {
              v1202 = *v1200;
              sub_23AAAE668(*v1200, v1201);
              *(_QWORD *)v1199 = v1202;
              *(_QWORD *)(v1199 + 8) = v1201;
            }
            v1203 = (v1199 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1204 = ((unint64_t)v1200 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1205 = *(_QWORD *)v1204;
            *(_BYTE *)(v1203 + 8) = *(_BYTE *)(v1204 + 8);
            *(_QWORD *)v1203 = v1205;
            *(_BYTE *)(v1203 + 9) = *(_BYTE *)(v1204 + 9);
            v1206 = (v1203 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v1207 = (v1204 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v1208 = *(_DWORD *)v1207;
            *(_BYTE *)(v1206 + 4) = *(_BYTE *)(v1207 + 4);
            *(_DWORD *)v1206 = v1208;
            v1209 = (_QWORD *)((v1203 + 25) & 0xFFFFFFFFFFFFFFF8);
            v1210 = (_QWORD *)((v1204 + 25) & 0xFFFFFFFFFFFFFFF8);
            *v1209 = *v1210;
            v1209[1] = v1210[1];
            v1211 = v1930 + v1843;
            v1212 = (__int128 *)(v1911 + v1843);
            v1213 = *(_QWORD *)(v1911 + v1843 + 16);
            if (v1213 >= 0xFFFFFFFF)
              LODWORD(v1213) = -1;
            v1214 = v1213 - 1;
            swift_bridgeObjectRetain();
            if (v1214 < 0)
            {
              *(_QWORD *)v1211 = *(_QWORD *)v1212;
              *(_BYTE *)(v1211 + 8) = *((_BYTE *)v1212 + 8);
              *(_BYTE *)(v1211 + 9) = *((_BYTE *)v1212 + 9);
              v1227 = (void *)*((_QWORD *)v1212 + 2);
              v1228 = v1227;
              *(_QWORD *)(v1211 + 16) = v1227;
              v1229 = (void *)*((_QWORD *)v1212 + 3);
              v1230 = v1229;
              *(_QWORD *)(v1211 + 24) = v1229;
              *(_BYTE *)(v1211 + 32) = *((_BYTE *)v1212 + 32);
              *(_BYTE *)(v1211 + 33) = *((_BYTE *)v1212 + 33);
              *(_BYTE *)(v1211 + 34) = *((_BYTE *)v1212 + 34);
              *(_QWORD *)(v1211 + 40) = *((_QWORD *)v1212 + 5);
              *(_QWORD *)(v1211 + 48) = *((_QWORD *)v1212 + 6);
              *(_QWORD *)(v1211 + 56) = *((_QWORD *)v1212 + 7);
              *(_QWORD *)(v1211 + 64) = *((_QWORD *)v1212 + 8);
              *(_BYTE *)(v1211 + 72) = *((_BYTE *)v1212 + 72);
              *(_QWORD *)(v1211 + 80) = *((_QWORD *)v1212 + 10);
              *(_QWORD *)(v1211 + 88) = *((_QWORD *)v1212 + 11);
              v1931 = (void *)*((_QWORD *)v1212 + 12);
              *(_QWORD *)(v1211 + 96) = v1931;
              *(_BYTE *)(v1211 + 104) = *((_BYTE *)v1212 + 104);
              *(_BYTE *)(v1211 + 105) = *((_BYTE *)v1212 + 105);
              *(_QWORD *)(v1211 + 112) = *((_QWORD *)v1212 + 14);
              *(_QWORD *)(v1211 + 120) = *((_QWORD *)v1212 + 15);
              *(_QWORD *)(v1211 + 128) = *((_QWORD *)v1212 + 16);
              *(_QWORD *)(v1211 + 136) = *((_QWORD *)v1212 + 17);
              *(_QWORD *)(v1211 + 144) = *((_QWORD *)v1212 + 18);
              *(_QWORD *)(v1211 + 152) = *((_QWORD *)v1212 + 19);
              *(_QWORD *)(v1211 + 160) = *((_QWORD *)v1212 + 20);
              *(_QWORD *)(v1211 + 168) = *((_QWORD *)v1212 + 21);
              *(_BYTE *)(v1211 + 176) = *((_BYTE *)v1212 + 176);
              *(_QWORD *)(v1211 + 184) = *((_QWORD *)v1212 + 23);
              v1231 = *((_QWORD *)v1212 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1232 = v1931;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v1231)
              {
                *(_QWORD *)(v1211 + 192) = v1231;
                *(_QWORD *)(v1211 + 200) = *((_QWORD *)v1212 + 25);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v1211 + 192) = v1212[12];
              }
              v1021 = v1850;
              v222 = v1809;
              v1156 = ((unint64_t)a1 + v1792) & v1757;
              *(_QWORD *)(v1211 + 208) = *((_QWORD *)v1212 + 26);
              *(_QWORD *)(v1211 + 216) = *((_QWORD *)v1212 + 27);
              *(_QWORD *)(v1211 + 224) = *((_QWORD *)v1212 + 28);
              *(_QWORD *)(v1211 + 232) = *((_QWORD *)v1212 + 29);
              *(_QWORD *)(v1211 + 240) = *((_QWORD *)v1212 + 30);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              v1215 = *v1212;
              v1216 = v1212[1];
              v1217 = v1212[3];
              *(_OWORD *)(v1211 + 32) = v1212[2];
              *(_OWORD *)(v1211 + 48) = v1217;
              *(_OWORD *)v1211 = v1215;
              *(_OWORD *)(v1211 + 16) = v1216;
              v1218 = v1212[4];
              v1219 = v1212[5];
              v1220 = v1212[7];
              *(_OWORD *)(v1211 + 96) = v1212[6];
              *(_OWORD *)(v1211 + 112) = v1220;
              *(_OWORD *)(v1211 + 64) = v1218;
              *(_OWORD *)(v1211 + 80) = v1219;
              v1221 = v1212[8];
              v1222 = v1212[9];
              v1223 = v1212[11];
              *(_OWORD *)(v1211 + 160) = v1212[10];
              *(_OWORD *)(v1211 + 176) = v1223;
              *(_OWORD *)(v1211 + 128) = v1221;
              *(_OWORD *)(v1211 + 144) = v1222;
              v1224 = v1212[12];
              v1225 = v1212[13];
              v1226 = v1212[14];
              *(_QWORD *)(v1211 + 240) = *((_QWORD *)v1212 + 30);
              *(_OWORD *)(v1211 + 208) = v1225;
              *(_OWORD *)(v1211 + 224) = v1226;
              *(_OWORD *)(v1211 + 192) = v1224;
              v222 = v1809;
            }
            v1623 = (_OWORD *)((v1211 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1624 = (__int128 *)(((unint64_t)v1212 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1625 = *v1624;
            *(_OWORD *)((char *)v1623 + 9) = *(__int128 *)((char *)v1624 + 9);
            *v1623 = v1625;
            v1626 = (v1211 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1627 = ((unint64_t)v1212 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1628 = *(_OWORD *)v1627;
            *(_BYTE *)(v1626 + 16) = *(_BYTE *)(v1627 + 16);
            *(_OWORD *)v1626 = v1628;
            v1629 = (_QWORD *)((v1211 + 311) & 0xFFFFFFFFFFFFF8);
            v1630 = ((unint64_t)v1212 + 311) & 0xFFFFFFFFFFFFF8;
            v1631 = *(_QWORD *)v1630;
            v1630 += 15;
            *v1629 = v1631;
            v1632 = (_QWORD *)(((unint64_t)v1629 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1633 = *(_QWORD *)(v1630 & 0xFFFFFFFFFFFFFFF8);
            v1634 = *(_QWORD *)((v1630 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_23AA7F2D4(v1633, v1634);
            *v1632 = v1633;
            v1632[1] = v1634;
            v1024 = (_QWORD *)(((unint64_t)a2 + v1792) & v1757);
            if (!v1821)
              goto LABEL_1123;
LABEL_1227:
            v1635 = ((((v1807
                      + ((((((((((v1828 + v1021 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)
                      + 327) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v1636 = (_QWORD *)((v1156 + v1635) & 0xFFFFFFFFFFFFFFF8);
            v1637 = (_QWORD *)(((unint64_t)v1024 + v1635) & 0xFFFFFFFFFFFFFFF8);
            *v1636 = *v1637;
            v1638 = *(void **)(((unint64_t)v1637 + 15) & 0xFFFFFFFFFFFFF8);
            *(_QWORD *)(((unint64_t)v1636 + 15) & 0xFFFFFFFFFFFFF8) = v1638;
            *((_BYTE *)a1 + v1798) = 0;
            v1639 = v1638;
            goto LABEL_1251;
          case 1:
            v1030 = v89;
            v1864 = ~v39;
            v1900 = v37;
            v1767 = v43;
            v1773 = ((((v1826 + ((v39 + 8 + (v1869 & 0xFFFFFFFFFFFFFFF8)) & ~v39)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v1910 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v1851 + 16);
            v1910(a1, a2, v1852);
            v1946 = (_QWORD *)(((unint64_t)a2 + v1792) & v1757);
            if (v1811 == v1822)
            {
              v1031 = (*(uint64_t (**)(_QWORD *))(v1851 + 48))(v1946);
              v1032 = v87;
              v1033 = v1030;
              v1034 = ~v1870;
              v1035 = (_QWORD *)(((unint64_t)a1 + v1792) & v1757);
LABEL_1139:
              if (v1031)
              {
LABEL_1140:
                memcpy(v1035, v1946, v1767);
                v1233 = v1915;
LABEL_1141:
                v1234 = __n;
                goto LABEL_1231;
              }
              v1081 = ((unint64_t)v1946 + v1827) & v1034;
              v1082 = (v1810 + v1081) & v1033;
LABEL_1143:
              v1235 = v1033;
              v1910(v1035, v1946, v1852);
              v1236 = ((unint64_t)v1035 + v1827) & v1034;
              v1910((_QWORD *)v1236, (_QWORD *)v1081, v1852);
              v1237 = (v1810 + v1236) & v1235;
              v1238 = v1082;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16))(v1237, v1082, v1838);
              v1239 = (_QWORD *)((v1869 + v1237) & 0xFFFFFFFFFFFFFFF8);
              v1240 = (_QWORD *)((v1869 + v1082) & 0xFFFFFFFFFFFFFFF8);
              *v1239 = *v1240;
              v1241 = ((unint64_t)v1239 + v1839) & v1864;
              v1242 = ((unint64_t)v1240 + v1839) & v1864;
              v1243 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1900 + 16);
              swift_bridgeObjectRetain();
              v1243(v1241, v1242, v1833);
              v1244 = (_QWORD *)((v1826 + v1241) & 0xFFFFFFFFFFFFF8);
              v1245 = (_QWORD *)((v1826 + v1242) & 0xFFFFFFFFFFFFF8);
              *v1244 = *v1245;
              v1246 = (_QWORD *)(((unint64_t)v1244 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1247 = (_QWORD *)(((unint64_t)v1245 + 15) & 0xFFFFFFFFFFFFFFF8);
              *v1246 = *v1247;
              v1246[1] = v1247[1];
              v1248 = (_QWORD *)(v1237 + v1773);
              *v1248 = *(_QWORD *)(v1238 + v1773);
              v1248[1] = *(_QWORD *)(v1238 + v1773 + 8);
              v1249 = (v1907 + v1237 + v1773) & v1032;
              v1250 = (v1907 + v1238 + v1773) & v1032;
              *(_BYTE *)v1249 = *(_BYTE *)v1250;
              v1251 = v1249 | 4;
              v1252 = *(_DWORD *)(v1250 | 4);
              *(_BYTE *)(v1251 + 4) = *(_BYTE *)((v1250 | 4) + 4);
              *(_DWORD *)v1251 = v1252;
              *(_WORD *)(v1249 + 10) = *(_WORD *)(v1250 + 0xA);
              v1908 = v1250;
              v1912 = v1249;
              v1253 = (v1848 + v1249) & v573;
              v1254 = (v1848 + v1250) & v573;
              v1255 = *(void (**)(size_t, size_t, uint64_t))(v1845 + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1255(v1253, v1254, v1846);
              v1256 = (v1844 + v1253) & v573;
              v1257 = v1844 + v1254;
              v1234 = v1850;
              v1258 = v1257 & v573;
              v1255(v1256, v1257 & v573, v1846);
              v1259 = (_BYTE *)(v1256 + v1850);
              *v1259 = *(_BYTE *)(v1258 + v1850);
              v1259[1] = *(_BYTE *)(v1258 + v1850 + 1);
              v1259[2] = *(_BYTE *)(v1258 + v1850 + 2);
              v1259[3] = *(_BYTE *)(v1258 + v1850 + 3);
              v1259[4] = *(_BYTE *)(v1258 + v1850 + 4);
              v1260 = (v1256 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
              v1261 = (v1258 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1260 = *(_QWORD *)v1261;
              *(_QWORD *)(v1260 + 8) = *(_QWORD *)(v1261 + 8);
              *(_BYTE *)(v1260 + 16) = *(_BYTE *)(v1261 + 16);
              *(_BYTE *)(v1260 + 17) = *(_BYTE *)(v1261 + 17);
              *(_BYTE *)(v1260 + 18) = *(_BYTE *)(v1261 + 18);
              *(_BYTE *)(v1260 + 19) = *(_BYTE *)(v1261 + 19);
              v1262 = (v1260 + 27) & 0xFFFFFFFFFFFFFFF8;
              v1263 = (v1261 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1262 = *(_QWORD *)v1263;
              *(_BYTE *)(v1262 + 8) = *(_BYTE *)(v1263 + 8);
              *(_BYTE *)(v1262 + 9) = *(_BYTE *)(v1263 + 9);
              *(_BYTE *)(v1262 + 10) = *(_BYTE *)(v1263 + 10);
              *(_BYTE *)(v1262 + 11) = *(_BYTE *)(v1263 + 11);
              *(_BYTE *)(v1262 + 12) = *(_BYTE *)(v1263 + 12);
              v1264 = (_QWORD *)((v1260 + 47) & 0xFFFFFFFFFFFFF8);
              v1265 = (_QWORD *)((v1261 + 47) & 0xFFFFFFFFFFFFF8);
              *v1264 = *v1265;
              v1266 = ((unint64_t)v1264 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1267 = ((unint64_t)v1265 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1266 = *(_QWORD *)v1267;
              *(_BYTE *)(v1266 + 8) = *(_BYTE *)(v1267 + 8);
              *(_BYTE *)(v1266 + 9) = *(_BYTE *)(v1267 + 9);
              v1268 = (void *)((v1841 + v1266) & v573);
              v1269 = (const void *)((v1841 + v1267) & v573);
              v1270 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1845 + 48);
              swift_bridgeObjectRetain();
              if (v1270(v1269, 1, v1846))
              {
                memcpy(v1268, v1269, __n);
              }
              else
              {
                v1255((size_t)v1268, (size_t)v1269, v1846);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1845 + 56))(v1268, 0, 1, v1846);
              }
              v1271 = (_QWORD *)(((unint64_t)v1268 + v1842) & 0xFFFFFFFFFFFFFFF8);
              v1272 = (_QWORD *)(((unint64_t)v1269 + v1842) & 0xFFFFFFFFFFFFFFF8);
              *v1271 = *v1272;
              v1273 = ((unint64_t)v1271 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1274 = ((unint64_t)v1272 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1275 = *(_QWORD *)v1274;
              *(_BYTE *)(v1273 + 8) = *(_BYTE *)(v1274 + 8);
              *(_QWORD *)v1273 = v1275;
              v1276 = (_QWORD *)(((unint64_t)v1271 + 31) & 0xFFFFFFFFFFFFF8);
              v1277 = (_QWORD *)(((unint64_t)v1272 + 31) & 0xFFFFFFFFFFFFF8);
              *v1276 = *v1277;
              v1278 = ((unint64_t)v1276 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1279 = (uint64_t *)(((unint64_t)v1277 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1280 = v1279[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1233 = v1915;
              if ((v1280 & 0x3000000000000000) != 0)
              {
                *(_OWORD *)v1278 = *(_OWORD *)v1279;
              }
              else
              {
                v1281 = *v1279;
                sub_23AAAE668(*v1279, v1280);
                *(_QWORD *)v1278 = v1281;
                *(_QWORD *)(v1278 + 8) = v1280;
              }
              v1282 = (v1278 + 19) & 0xFFFFFFFFFFFFFFF8;
              v1283 = ((unint64_t)v1279 + 19) & 0xFFFFFFFFFFFFFFF8;
              v1284 = *(_QWORD *)v1283;
              *(_BYTE *)(v1282 + 8) = *(_BYTE *)(v1283 + 8);
              *(_QWORD *)v1282 = v1284;
              *(_BYTE *)(v1282 + 9) = *(_BYTE *)(v1283 + 9);
              v1285 = (v1282 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v1286 = (v1283 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v1287 = *(_DWORD *)v1286;
              *(_BYTE *)(v1285 + 4) = *(_BYTE *)(v1286 + 4);
              *(_DWORD *)v1285 = v1287;
              v1288 = (_QWORD *)((v1282 + 25) & 0xFFFFFFFFFFFFFFF8);
              v1289 = (_QWORD *)((v1283 + 25) & 0xFFFFFFFFFFFFFFF8);
              *v1288 = *v1289;
              v1288[1] = v1289[1];
              v1290 = v1912 + v1843;
              v1291 = (__int128 *)(v1908 + v1843);
              v1292 = *(_QWORD *)(v1908 + v1843 + 16);
              if (v1292 >= 0xFFFFFFFF)
                LODWORD(v1292) = -1;
              v1293 = v1292 - 1;
              swift_bridgeObjectRetain();
              v574 = AssociatedTypeWitness;
              if (v1293 < 0)
              {
                *(_QWORD *)v1290 = *(_QWORD *)v1291;
                *(_BYTE *)(v1290 + 8) = *((_BYTE *)v1291 + 8);
                *(_BYTE *)(v1290 + 9) = *((_BYTE *)v1291 + 9);
                v1306 = (void *)*((_QWORD *)v1291 + 2);
                v1307 = v1306;
                *(_QWORD *)(v1290 + 16) = v1306;
                v1308 = (void *)*((_QWORD *)v1291 + 3);
                v1309 = v1308;
                *(_QWORD *)(v1290 + 24) = v1308;
                *(_BYTE *)(v1290 + 32) = *((_BYTE *)v1291 + 32);
                *(_BYTE *)(v1290 + 33) = *((_BYTE *)v1291 + 33);
                *(_BYTE *)(v1290 + 34) = *((_BYTE *)v1291 + 34);
                *(_QWORD *)(v1290 + 40) = *((_QWORD *)v1291 + 5);
                *(_QWORD *)(v1290 + 48) = *((_QWORD *)v1291 + 6);
                *(_QWORD *)(v1290 + 56) = *((_QWORD *)v1291 + 7);
                *(_QWORD *)(v1290 + 64) = *((_QWORD *)v1291 + 8);
                *(_BYTE *)(v1290 + 72) = *((_BYTE *)v1291 + 72);
                *(_QWORD *)(v1290 + 80) = *((_QWORD *)v1291 + 10);
                *(_QWORD *)(v1290 + 88) = *((_QWORD *)v1291 + 11);
                v1913 = (void *)*((_QWORD *)v1291 + 12);
                *(_QWORD *)(v1290 + 96) = v1913;
                *(_BYTE *)(v1290 + 104) = *((_BYTE *)v1291 + 104);
                *(_BYTE *)(v1290 + 105) = *((_BYTE *)v1291 + 105);
                *(_QWORD *)(v1290 + 112) = *((_QWORD *)v1291 + 14);
                *(_QWORD *)(v1290 + 120) = *((_QWORD *)v1291 + 15);
                *(_QWORD *)(v1290 + 128) = *((_QWORD *)v1291 + 16);
                *(_QWORD *)(v1290 + 136) = *((_QWORD *)v1291 + 17);
                *(_QWORD *)(v1290 + 144) = *((_QWORD *)v1291 + 18);
                *(_QWORD *)(v1290 + 152) = *((_QWORD *)v1291 + 19);
                *(_QWORD *)(v1290 + 160) = *((_QWORD *)v1291 + 20);
                *(_QWORD *)(v1290 + 168) = *((_QWORD *)v1291 + 21);
                *(_BYTE *)(v1290 + 176) = *((_BYTE *)v1291 + 176);
                *(_QWORD *)(v1290 + 184) = *((_QWORD *)v1291 + 23);
                v1310 = *((_QWORD *)v1291 + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1311 = v1913;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v1310)
                {
                  *(_QWORD *)(v1290 + 192) = v1310;
                  *(_QWORD *)(v1290 + 200) = *((_QWORD *)v1291 + 25);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  *(_OWORD *)(v1290 + 192) = v1291[12];
                }
                v1234 = v1850;
                v574 = AssociatedTypeWitness;
                v267 = ~v1915;
                v1233 = v1915;
                *(_QWORD *)(v1290 + 208) = *((_QWORD *)v1291 + 26);
                *(_QWORD *)(v1290 + 216) = *((_QWORD *)v1291 + 27);
                *(_QWORD *)(v1290 + 224) = *((_QWORD *)v1291 + 28);
                *(_QWORD *)(v1290 + 232) = *((_QWORD *)v1291 + 29);
                *(_QWORD *)(v1290 + 240) = *((_QWORD *)v1291 + 30);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                v1294 = *v1291;
                v1295 = v1291[1];
                v1296 = v1291[3];
                *(_OWORD *)(v1290 + 32) = v1291[2];
                *(_OWORD *)(v1290 + 48) = v1296;
                *(_OWORD *)v1290 = v1294;
                *(_OWORD *)(v1290 + 16) = v1295;
                v1297 = v1291[4];
                v1298 = v1291[5];
                v1299 = v1291[7];
                *(_OWORD *)(v1290 + 96) = v1291[6];
                *(_OWORD *)(v1290 + 112) = v1299;
                *(_OWORD *)(v1290 + 64) = v1297;
                *(_OWORD *)(v1290 + 80) = v1298;
                v1300 = v1291[8];
                v1301 = v1291[9];
                v1302 = v1291[11];
                *(_OWORD *)(v1290 + 160) = v1291[10];
                *(_OWORD *)(v1290 + 176) = v1302;
                *(_OWORD *)(v1290 + 128) = v1300;
                *(_OWORD *)(v1290 + 144) = v1301;
                v1303 = v1291[12];
                v1304 = v1291[13];
                v1305 = v1291[14];
                *(_QWORD *)(v1290 + 240) = *((_QWORD *)v1291 + 30);
                *(_OWORD *)(v1290 + 208) = v1304;
                *(_OWORD *)(v1290 + 224) = v1305;
                *(_OWORD *)(v1290 + 192) = v1303;
              }
              v1640 = (_OWORD *)((v1290 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1641 = (__int128 *)(((unint64_t)v1291 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1642 = *v1641;
              *(_OWORD *)((char *)v1640 + 9) = *(__int128 *)((char *)v1641 + 9);
              *v1640 = v1642;
              v1643 = (v1290 + 287) & 0xFFFFFFFFFFFFFFF8;
              v1644 = ((unint64_t)v1291 + 287) & 0xFFFFFFFFFFFFFFF8;
              v1645 = *(_OWORD *)v1644;
              *(_BYTE *)(v1643 + 16) = *(_BYTE *)(v1644 + 16);
              *(_OWORD *)v1643 = v1645;
              v1646 = (_QWORD *)((v1290 + 311) & 0xFFFFFFFFFFFFF8);
              v1647 = ((unint64_t)v1291 + 311) & 0xFFFFFFFFFFFFF8;
              v1648 = *(_QWORD *)v1647;
              v1647 += 15;
              *v1646 = v1648;
              v1649 = (_QWORD *)(((unint64_t)v1646 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1650 = *(_QWORD *)(v1647 & 0xFFFFFFFFFFFFFFF8);
              v1651 = *(_QWORD *)((v1647 & 0xFFFFFFFFFFFFFFF8) + 8);
              sub_23AA7F2D4(v1650, v1651);
              *v1649 = v1650;
              v1649[1] = v1651;
              v1035 = (_QWORD *)(((unint64_t)a1 + v1792) & v1757);
              if (!v1821)
                goto LABEL_1141;
LABEL_1231:
              v1652 = ((((v1807
                        + ((((((((((v1828 + v1234 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1653 = (void *)(((unint64_t)v1035 + v1233 + v1652) & v267);
              v1654 = (const void *)(((unint64_t)v1946 + v1233 + v1652) & v267);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1853 + 48))(v1654, 1, v574))
              {
                memcpy(v1653, v1654, v1806);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v1853 + 16))(v1653, v1654, v574);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1853 + 56))(v1653, 0, 1, v574);
              }
              v222 = v1809;
              v1655 = (char *)(((unint64_t)v1653 + v1790) & v1877);
              v1656 = (char *)(((unint64_t)v1654 + v1790) & v1877);
              if (v1813 == v1824)
              {
                v1657 = (*(uint64_t (**)(unint64_t))(v1835 + 48))(((unint64_t)v1654 + v1790) & v1877);
              }
              else
              {
                v1658 = (uint64_t *)((unint64_t)&v1656[v1840] & 0xFFFFFFFFFFFFFFF8);
                if (v1799 <= 0x7FFFFFFE)
                {
                  v1659 = *v1658;
                  if ((unint64_t)*v1658 >= 0xFFFFFFFF)
                    LODWORD(v1659) = -1;
                  if ((v1659 + 1) >= 2)
                    goto LABEL_1243;
                  goto LABEL_1245;
                }
                v1657 = (*(uint64_t (**)(unint64_t))(v1831 + 48))(((unint64_t)v1658 + v1830) & v1858);
              }
              if (v1657)
              {
LABEL_1243:
                memcpy(v1655, v1656, v1905);
LABEL_1246:
                *(_QWORD *)&v1655[v1905] = *(_QWORD *)&v1656[v1905];
                v1668 = (_QWORD *)((unint64_t)&v1655[v1905 + 15] & 0xFFFFFFFFFFFFF8);
                v1669 = (_QWORD *)((unint64_t)&v1656[v1905 + 15] & 0xFFFFFFFFFFFFFFF8);
                *v1668 = *v1669;
                v1670 = *(void **)(((unint64_t)v1669 + 15) & 0xFFFFFFFFFFFFF8);
                *(_QWORD *)(((unint64_t)v1668 + 15) & 0xFFFFFFFFFFFFF8) = v1670;
                v1075 = 1;
                *((_BYTE *)a1 + v1798) = 1;
                v1671 = v1670;
LABEL_1281:
                v207 = v1780;
                *((_BYTE *)a1 + v222) = v1075;
                if (v1780 > 3)
                {
LABEL_1282:
                  v208 = 27;
                  goto LABEL_1283;
                }
                v1754 = ((1 << (8 * v1780)) + 5) >> (8 * v1780);
                if (v1754 <= 0xFFD8)
                {
                  if (v1754 <= 0xD8)
                    goto LABEL_1282;
                  v261 = 27;
LABEL_1287:
                  *(_WORD *)((char *)a1 + v207) = v261;
                  return a1;
                }
                v366 = 27;
LABEL_1289:
                *(_DWORD *)((char *)a1 + v207) = v366;
                return a1;
              }
              v1658 = (uint64_t *)((unint64_t)&v1656[v1840] & 0xFFFFFFFFFFFFFFF8);
LABEL_1245:
              (*(void (**)(char *, char *, uint64_t))(v1835 + 16))(v1655, v1656, v1836);
              v1660 = (_QWORD *)((unint64_t)&v1655[v1840] & 0xFFFFFFFFFFFFFFF8);
              *v1660 = *v1658;
              v1661 = ((unint64_t)v1660 + v1830) & v1858;
              v1662 = ((unint64_t)v1658 + v1830) & v1858;
              v1663 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1831 + 16);
              swift_bridgeObjectRetain();
              v1663(v1661, v1662, v1832);
              v1664 = (_QWORD *)((v1825 + v1661) & 0xFFFFFFFFFFFFF8);
              v1665 = v1825 + v1662;
              v222 = v1809;
              v1665 &= 0xFFFFFFFFFFFFF8uLL;
              *v1664 = *(_QWORD *)v1665;
              v1666 = (_QWORD *)(((unint64_t)v1664 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1667 = (_QWORD *)((v1665 + 15) & 0xFFFFFFFFFFFFFFF8);
              *v1666 = *v1667;
              v1666[1] = v1667[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              goto LABEL_1246;
            }
            v1034 = ~v1870;
            v1081 = ((unint64_t)v1946 + v1827) & v1758;
            v1033 = v1030;
            v1082 = (v1810 + v1081) & v1030;
            v1032 = v87;
            if (v1829 == v1822)
            {
              v1035 = (_QWORD *)(((unint64_t)a1 + v1792) & v1757);
              if (v1814 == v1829)
              {
                v1031 = (*(uint64_t (**)(unint64_t))(v1837 + 48))((v1810 + v1081) & v1030);
LABEL_1138:
                v1033 = v1030;
                goto LABEL_1139;
              }
              v1140 = (unint64_t *)((v1869 + v1082) & 0xFFFFFFFFFFFFFFF8);
              if (v1800 > 0x7FFFFFFE)
              {
                v1031 = (*(uint64_t (**)(unint64_t))(v1900 + 48))(((unint64_t)v1140 + v1839) & v1864);
                goto LABEL_1138;
              }
              v1141 = *v1140;
            }
            else
            {
              v1104 = v1082 + v1773;
              v1035 = (_QWORD *)(((unint64_t)a1 + v1792) & v1757);
              if ((v1796 & 0x80000000) == 0)
              {
                v1105 = *(_QWORD *)(v1104 + 8);
                if (v1105 >= 0xFFFFFFFF)
                  LODWORD(v1105) = -1;
                v1031 = v1105 + 1;
                goto LABEL_1139;
              }
              v1153 = (v1848 + ((v1907 + v1104) & v87)) & v573;
              if (v1821 > 0x7FFFFFFD)
              {
                v1031 = (*(uint64_t (**)(uint64_t))(v1845 + 48))(v1153);
                goto LABEL_1138;
              }
              v1141 = *(_QWORD *)(((v1794 + ((v1844 + v1153) & v573)) & 0xFFFFFFFFFFFFF8) + 8);
            }
            if (v1141 >= 0xFFFFFFFF)
              LODWORD(v1141) = -1;
            if ((v1141 + 1) >= 2)
              goto LABEL_1140;
            goto LABEL_1143;
          case 2:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v1851 + 16))(a1, a2, v1852);
            v1036 = (void *)(((unint64_t)a1 + v1787) & v1889);
            v1037 = (const void *)(((unint64_t)a2 + v1787) & v1889);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1853 + 48))(v1037, 1, AssociatedTypeWitness))
            {
              memcpy(v1036, v1037, v1806);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1853 + 16))(v1036, v1037, AssociatedTypeWitness);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1853 + 56))(v1036, 0, 1, AssociatedTypeWitness);
            }
            v1091 = (char *)(((unint64_t)v1036 + v1790) & v1877);
            v1092 = (_BYTE *)(((unint64_t)v1037 + v1790) & v1877);
            if (v1813 == v1824)
            {
              v1093 = (*(uint64_t (**)(_BYTE *))(v1835 + 48))(v1092);
            }
            else
            {
              v1094 = (uint64_t *)((unint64_t)&v1092[v1840] & 0xFFFFFFFFFFFFFFF8);
              if (v1799 <= 0x7FFFFFFE)
              {
                v1095 = *v1094;
                if ((unint64_t)*v1094 >= 0xFFFFFFFF)
                  LODWORD(v1095) = -1;
                if ((v1095 + 1) >= 2)
                  goto LABEL_1085;
LABEL_1087:
                (*(void (**)(char *, _BYTE *, uint64_t))(v1835 + 16))(v1091, v1092, v1836);
                v1114 = (_QWORD *)((unint64_t)&v1091[v1840] & 0xFFFFFFFFFFFFFFF8);
                *v1114 = *v1094;
                v1115 = ((unint64_t)v1114 + v1830) & v1858;
                v1116 = ((unint64_t)v1094 + v1830) & v1858;
                v1117 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1831 + 16);
                swift_bridgeObjectRetain();
                v1117(v1115, v1116, v1832);
                v1118 = (_QWORD *)((v1825 + v1115) & 0xFFFFFFFFFFFFF8);
                v1119 = v1825 + v1116;
                v222 = v1809;
                v1119 &= 0xFFFFFFFFFFFFF8uLL;
                *v1118 = *(_QWORD *)v1119;
                v1120 = (_QWORD *)(((unint64_t)v1118 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1121 = (_QWORD *)((v1119 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v1120 = *v1121;
                v1120[1] = v1121[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
LABEL_1088:
                v1122 = &v1091[v1905];
                *v1122 = v1092[v1905];
                v1123 = *(void **)&v1092[v1905 + 8];
                *((_QWORD *)v1122 + 1) = v1123;
                *((_BYTE *)a1 + v1798) = 2;
                v1124 = v1123;
                goto LABEL_1251;
              }
              v1093 = (*(uint64_t (**)(unint64_t))(v1831 + 48))(((unint64_t)v1094 + v1830) & v1858);
            }
            if (v1093)
            {
LABEL_1085:
              memcpy(v1091, v1092, v1905);
              goto LABEL_1088;
            }
            v1094 = (uint64_t *)((unint64_t)&v1092[v1840] & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_1087;
          case 3:
            v1038 = v1850;
            v1039 = v89;
            v1865 = ~v39;
            v1901 = v37;
            v1929 = v87;
            v1768 = v43;
            v1774 = ((((v1826 + ((v39 + 8 + (v1869 & 0xFFFFFFFFFFFFFFF8)) & ~v39)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v1040 = *(void (**)(char *, _QWORD *, uint64_t))(v1851 + 16);
            v1040((char *)a1, a2, v1852);
            v1947 = (char *)(((unint64_t)a1 + v1792) & v1757);
            v1041 = (_QWORD *)(((unint64_t)a2 + v1792) & v1757);
            if (v1811 == v1822)
            {
              v1042 = (*(uint64_t (**)(unint64_t))(v1851 + 48))(((unint64_t)a2 + v1792) & v1757);
              v1043 = v573;
              v1044 = v1039;
              v1045 = ~v1870;
              v1046 = v1827;
LABEL_1157:
              if (v1042)
              {
LABEL_1158:
                v1312 = ((unint64_t)a1 + v1792) & v1757;
                memcpy(v1947, v1041, v1768);
                v222 = v1809;
                goto LABEL_1159;
              }
              v1083 = ((unint64_t)v1041 + v1046) & v1045;
              v1084 = (v1810 + v1083) & v1044;
LABEL_1161:
              v1313 = v1044;
              v1040(v1947, v1041, v1852);
              v1314 = (unint64_t)&v1947[v1046];
              v1312 = ((unint64_t)a1 + v1792) & v1757;
              v1315 = v1314 & v1045;
              v1040((char *)v1315, (_QWORD *)v1083, v1852);
              v1316 = (v1810 + v1315) & v1313;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1837 + 16))(v1316, v1084, v1838);
              v1317 = (_QWORD *)((v1869 + v1316) & 0xFFFFFFFFFFFFFFF8);
              v1318 = (_QWORD *)((v1869 + v1084) & 0xFFFFFFFFFFFFFFF8);
              *v1317 = *v1318;
              v1319 = ((unint64_t)v1317 + v1839) & v1865;
              v1320 = ((unint64_t)v1318 + v1839) & v1865;
              v1321 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1901 + 16);
              swift_bridgeObjectRetain();
              v1321(v1319, v1320, v1833);
              v1322 = (_QWORD *)((v1826 + v1319) & 0xFFFFFFFFFFFFF8);
              v1323 = (_QWORD *)((v1826 + v1320) & 0xFFFFFFFFFFFFF8);
              *v1322 = *v1323;
              v1324 = (_QWORD *)(((unint64_t)v1322 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1325 = (_QWORD *)(((unint64_t)v1323 + 15) & 0xFFFFFFFFFFFFFFF8);
              *v1324 = *v1325;
              v1324[1] = v1325[1];
              v1326 = (_QWORD *)(v1316 + v1774);
              *v1326 = *(_QWORD *)(v1084 + v1774);
              v1326[1] = *(_QWORD *)(v1084 + v1774 + 8);
              v1327 = (v1907 + v1316 + v1774) & v1929;
              v1328 = (v1907 + v1084 + v1774) & v1929;
              *(_BYTE *)v1327 = *(_BYTE *)v1328;
              v1329 = v1327 | 4;
              v1330 = *(_DWORD *)(v1328 | 4);
              *(_BYTE *)(v1329 + 4) = *(_BYTE *)((v1328 | 4) + 4);
              *(_DWORD *)v1329 = v1330;
              *(_WORD *)(v1327 + 10) = *(_WORD *)(v1328 + 0xA);
              v1932 = v1327;
              v1331 = (v1848 + v1327) & v1043;
              v1914 = v1328;
              v1332 = (v1848 + v1328) & v1043;
              v1333 = *(void (**)(size_t, size_t, uint64_t))(v1845 + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1333(v1331, v1332, v1846);
              v1334 = (v1844 + v1331) & v1043;
              v1335 = (v1844 + v1332) & v1043;
              v1333(v1334, v1335, v1846);
              v1336 = (_BYTE *)(v1334 + v1850);
              *v1336 = *(_BYTE *)(v1335 + v1850);
              v1336[1] = *(_BYTE *)(v1335 + v1850 + 1);
              v1336[2] = *(_BYTE *)(v1335 + v1850 + 2);
              v1336[3] = *(_BYTE *)(v1335 + v1850 + 3);
              v1336[4] = *(_BYTE *)(v1335 + v1850 + 4);
              v1337 = (v1334 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
              v1338 = (v1335 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1337 = *(_QWORD *)v1338;
              *(_QWORD *)(v1337 + 8) = *(_QWORD *)(v1338 + 8);
              *(_BYTE *)(v1337 + 16) = *(_BYTE *)(v1338 + 16);
              *(_BYTE *)(v1337 + 17) = *(_BYTE *)(v1338 + 17);
              *(_BYTE *)(v1337 + 18) = *(_BYTE *)(v1338 + 18);
              *(_BYTE *)(v1337 + 19) = *(_BYTE *)(v1338 + 19);
              v1339 = (v1337 + 27) & 0xFFFFFFFFFFFFFFF8;
              v1340 = (v1338 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1339 = *(_QWORD *)v1340;
              *(_BYTE *)(v1339 + 8) = *(_BYTE *)(v1340 + 8);
              *(_BYTE *)(v1339 + 9) = *(_BYTE *)(v1340 + 9);
              *(_BYTE *)(v1339 + 10) = *(_BYTE *)(v1340 + 10);
              *(_BYTE *)(v1339 + 11) = *(_BYTE *)(v1340 + 11);
              *(_BYTE *)(v1339 + 12) = *(_BYTE *)(v1340 + 12);
              v1341 = (_QWORD *)((v1337 + 47) & 0xFFFFFFFFFFFFF8);
              v1342 = (_QWORD *)((v1338 + 47) & 0xFFFFFFFFFFFFF8);
              *v1341 = *v1342;
              v1343 = ((unint64_t)v1341 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1344 = ((unint64_t)v1342 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1343 = *(_QWORD *)v1344;
              *(_BYTE *)(v1343 + 8) = *(_BYTE *)(v1344 + 8);
              *(_BYTE *)(v1343 + 9) = *(_BYTE *)(v1344 + 9);
              v1345 = (void *)((v1841 + v1343) & v1043);
              v1346 = (const void *)((v1841 + v1344) & v1043);
              v1347 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1845 + 48);
              swift_bridgeObjectRetain();
              if (v1347(v1346, 1, v1846))
              {
                memcpy(v1345, v1346, __n);
              }
              else
              {
                v1333((size_t)v1345, (size_t)v1346, v1846);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1845 + 56))(v1345, 0, 1, v1846);
              }
              v1348 = (_QWORD *)(((unint64_t)v1345 + v1842) & 0xFFFFFFFFFFFFFFF8);
              v1349 = (_QWORD *)(((unint64_t)v1346 + v1842) & 0xFFFFFFFFFFFFFFF8);
              *v1348 = *v1349;
              v1350 = ((unint64_t)v1348 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1351 = ((unint64_t)v1349 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1352 = *(_QWORD *)v1351;
              *(_BYTE *)(v1350 + 8) = *(_BYTE *)(v1351 + 8);
              *(_QWORD *)v1350 = v1352;
              v1353 = (_QWORD *)(((unint64_t)v1348 + 31) & 0xFFFFFFFFFFFFF8);
              v1354 = (_QWORD *)(((unint64_t)v1349 + 31) & 0xFFFFFFFFFFFFF8);
              *v1353 = *v1354;
              v1355 = ((unint64_t)v1353 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1356 = (uint64_t *)(((unint64_t)v1354 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1357 = v1356[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if ((v1357 & 0x3000000000000000) != 0)
              {
                *(_OWORD *)v1355 = *(_OWORD *)v1356;
              }
              else
              {
                v1358 = *v1356;
                sub_23AAAE668(*v1356, v1357);
                *(_QWORD *)v1355 = v1358;
                *(_QWORD *)(v1355 + 8) = v1357;
              }
              v1359 = (v1355 + 19) & 0xFFFFFFFFFFFFFFF8;
              v1360 = ((unint64_t)v1356 + 19) & 0xFFFFFFFFFFFFFFF8;
              v1361 = *(_QWORD *)v1360;
              *(_BYTE *)(v1359 + 8) = *(_BYTE *)(v1360 + 8);
              *(_QWORD *)v1359 = v1361;
              *(_BYTE *)(v1359 + 9) = *(_BYTE *)(v1360 + 9);
              v1362 = (v1359 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v1363 = (v1360 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v1364 = *(_DWORD *)v1363;
              *(_BYTE *)(v1362 + 4) = *(_BYTE *)(v1363 + 4);
              *(_DWORD *)v1362 = v1364;
              v1365 = (_QWORD *)((v1359 + 25) & 0xFFFFFFFFFFFFFFF8);
              v1366 = (_QWORD *)((v1360 + 25) & 0xFFFFFFFFFFFFFFF8);
              *v1365 = *v1366;
              v1365[1] = v1366[1];
              v1367 = v1932 + v1843;
              v1368 = (__int128 *)(v1914 + v1843);
              v1369 = *(_QWORD *)(v1914 + v1843 + 16);
              if (v1369 >= 0xFFFFFFFF)
                LODWORD(v1369) = -1;
              v1370 = v1369 - 1;
              swift_bridgeObjectRetain();
              if (v1370 < 0)
              {
                *(_QWORD *)v1367 = *(_QWORD *)v1368;
                *(_BYTE *)(v1367 + 8) = *((_BYTE *)v1368 + 8);
                *(_BYTE *)(v1367 + 9) = *((_BYTE *)v1368 + 9);
                v1383 = (void *)*((_QWORD *)v1368 + 2);
                v1384 = v1383;
                *(_QWORD *)(v1367 + 16) = v1383;
                v1385 = (void *)*((_QWORD *)v1368 + 3);
                v1386 = v1385;
                *(_QWORD *)(v1367 + 24) = v1385;
                *(_BYTE *)(v1367 + 32) = *((_BYTE *)v1368 + 32);
                *(_BYTE *)(v1367 + 33) = *((_BYTE *)v1368 + 33);
                *(_BYTE *)(v1367 + 34) = *((_BYTE *)v1368 + 34);
                *(_QWORD *)(v1367 + 40) = *((_QWORD *)v1368 + 5);
                *(_QWORD *)(v1367 + 48) = *((_QWORD *)v1368 + 6);
                *(_QWORD *)(v1367 + 56) = *((_QWORD *)v1368 + 7);
                *(_QWORD *)(v1367 + 64) = *((_QWORD *)v1368 + 8);
                *(_BYTE *)(v1367 + 72) = *((_BYTE *)v1368 + 72);
                *(_QWORD *)(v1367 + 80) = *((_QWORD *)v1368 + 10);
                *(_QWORD *)(v1367 + 88) = *((_QWORD *)v1368 + 11);
                v1933 = (void *)*((_QWORD *)v1368 + 12);
                *(_QWORD *)(v1367 + 96) = v1933;
                *(_BYTE *)(v1367 + 104) = *((_BYTE *)v1368 + 104);
                *(_BYTE *)(v1367 + 105) = *((_BYTE *)v1368 + 105);
                *(_QWORD *)(v1367 + 112) = *((_QWORD *)v1368 + 14);
                *(_QWORD *)(v1367 + 120) = *((_QWORD *)v1368 + 15);
                *(_QWORD *)(v1367 + 128) = *((_QWORD *)v1368 + 16);
                *(_QWORD *)(v1367 + 136) = *((_QWORD *)v1368 + 17);
                *(_QWORD *)(v1367 + 144) = *((_QWORD *)v1368 + 18);
                *(_QWORD *)(v1367 + 152) = *((_QWORD *)v1368 + 19);
                *(_QWORD *)(v1367 + 160) = *((_QWORD *)v1368 + 20);
                *(_QWORD *)(v1367 + 168) = *((_QWORD *)v1368 + 21);
                *(_BYTE *)(v1367 + 176) = *((_BYTE *)v1368 + 176);
                *(_QWORD *)(v1367 + 184) = *((_QWORD *)v1368 + 23);
                v1387 = *((_QWORD *)v1368 + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1388 = v1933;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v1387)
                {
                  *(_QWORD *)(v1367 + 192) = v1387;
                  *(_QWORD *)(v1367 + 200) = *((_QWORD *)v1368 + 25);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  *(_OWORD *)(v1367 + 192) = v1368[12];
                }
                v1038 = v1850;
                v222 = v1809;
                v1312 = ((unint64_t)a1 + v1792) & v1757;
                *(_QWORD *)(v1367 + 208) = *((_QWORD *)v1368 + 26);
                *(_QWORD *)(v1367 + 216) = *((_QWORD *)v1368 + 27);
                *(_QWORD *)(v1367 + 224) = *((_QWORD *)v1368 + 28);
                *(_QWORD *)(v1367 + 232) = *((_QWORD *)v1368 + 29);
                *(_QWORD *)(v1367 + 240) = *((_QWORD *)v1368 + 30);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                v1371 = *v1368;
                v1372 = v1368[1];
                v1373 = v1368[3];
                *(_OWORD *)(v1367 + 32) = v1368[2];
                *(_OWORD *)(v1367 + 48) = v1373;
                *(_OWORD *)v1367 = v1371;
                *(_OWORD *)(v1367 + 16) = v1372;
                v1374 = v1368[4];
                v1375 = v1368[5];
                v1376 = v1368[7];
                *(_OWORD *)(v1367 + 96) = v1368[6];
                *(_OWORD *)(v1367 + 112) = v1376;
                *(_OWORD *)(v1367 + 64) = v1374;
                *(_OWORD *)(v1367 + 80) = v1375;
                v1377 = v1368[8];
                v1378 = v1368[9];
                v1379 = v1368[11];
                *(_OWORD *)(v1367 + 160) = v1368[10];
                *(_OWORD *)(v1367 + 176) = v1379;
                *(_OWORD *)(v1367 + 128) = v1377;
                *(_OWORD *)(v1367 + 144) = v1378;
                v1380 = v1368[12];
                v1381 = v1368[13];
                v1382 = v1368[14];
                *(_QWORD *)(v1367 + 240) = *((_QWORD *)v1368 + 30);
                *(_OWORD *)(v1367 + 208) = v1381;
                *(_OWORD *)(v1367 + 224) = v1382;
                *(_OWORD *)(v1367 + 192) = v1380;
                v222 = v1809;
              }
              v1672 = (_OWORD *)((v1367 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1673 = (__int128 *)(((unint64_t)v1368 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1674 = *v1673;
              *(_OWORD *)((char *)v1672 + 9) = *(__int128 *)((char *)v1673 + 9);
              *v1672 = v1674;
              v1675 = (v1367 + 287) & 0xFFFFFFFFFFFFFFF8;
              v1676 = ((unint64_t)v1368 + 287) & 0xFFFFFFFFFFFFFFF8;
              v1677 = *(_OWORD *)v1676;
              *(_BYTE *)(v1675 + 16) = *(_BYTE *)(v1676 + 16);
              *(_OWORD *)v1675 = v1677;
              v1678 = (_QWORD *)((v1367 + 311) & 0xFFFFFFFFFFFFF8);
              v1679 = ((unint64_t)v1368 + 311) & 0xFFFFFFFFFFFFF8;
              v1680 = *(_QWORD *)v1679;
              v1679 += 15;
              *v1678 = v1680;
              v1681 = (_QWORD *)(((unint64_t)v1678 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1682 = *(_QWORD *)(v1679 & 0xFFFFFFFFFFFFFFF8);
              v1683 = *(_QWORD *)((v1679 & 0xFFFFFFFFFFFFFFF8) + 8);
              sub_23AA7F2D4(v1682, v1683);
              *v1681 = v1682;
              v1681[1] = v1683;
              v1041 = (_QWORD *)(((unint64_t)a2 + v1792) & v1757);
              if (v1821)
              {
LABEL_1250:
                v1684 = ((((v1807
                          + ((((((((((v1828 + v1038 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 19) & 0xFFFFFFFFFFFFFFF8)
                            + 25) & 0xFFFFFFFFFFFFFFF8)
                          + 327) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16;
                v1685 = (_QWORD *)((v1312 + v1684) & 0xFFFFFFFFFFFFFFF8);
                v1686 = (_QWORD *)(((unint64_t)v1041 + v1684) & 0xFFFFFFFFFFFFFFF8);
                *v1685 = *v1686;
                v1685[1] = v1686[1];
                *(_QWORD *)(((unint64_t)v1685 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1686
                                                                                              + 23) & 0xFFFFFFFFFFFFF8);
                *((_BYTE *)a1 + v1798) = 3;
                swift_bridgeObjectRetain();
LABEL_1251:
                v1075 = 1;
                goto LABEL_1281;
              }
LABEL_1159:
              v1038 = __n;
              goto LABEL_1250;
            }
            v1046 = v1827;
            v1045 = ~v1870;
            v1083 = ((unint64_t)v1041 + v1827) & v1758;
            v1044 = v1039;
            v1084 = (v1810 + v1083) & v1039;
            v1043 = v573;
            if (v1829 == v1822)
            {
              if (v1814 == v1829)
              {
                v1042 = (*(uint64_t (**)(unint64_t))(v1837 + 48))((v1810 + v1083) & v1039);
LABEL_1156:
                v1044 = v1039;
                goto LABEL_1157;
              }
              v1142 = (unint64_t *)((v1869 + v1084) & 0xFFFFFFFFFFFFFFF8);
              if (v1800 > 0x7FFFFFFE)
              {
                v1042 = (*(uint64_t (**)(unint64_t))(v1901 + 48))(((unint64_t)v1142 + v1839) & v1865);
                goto LABEL_1156;
              }
              v1143 = *v1142;
            }
            else
            {
              v1106 = v1084 + v1774;
              if ((v1796 & 0x80000000) == 0)
              {
                v1107 = *(_QWORD *)(v1106 + 8);
                if (v1107 >= 0xFFFFFFFF)
                  LODWORD(v1107) = -1;
                v1042 = v1107 + 1;
                goto LABEL_1157;
              }
              v1150 = (v1848 + ((v1907 + v1106) & v1929)) & v573;
              if (v1821 > 0x7FFFFFFD)
              {
                v1042 = (*(uint64_t (**)(uint64_t))(v1845 + 48))(v1150);
                goto LABEL_1156;
              }
              v1143 = *(_QWORD *)(((v1794 + ((v1844 + v1150) & v573)) & 0xFFFFFFFFFFFFF8) + 8);
            }
            if (v1143 >= 0xFFFFFFFF)
              LODWORD(v1143) = -1;
            if ((v1143 + 1) >= 2)
              goto LABEL_1158;
            goto LABEL_1161;
          case 4:
            v1047 = a1;
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v1851 + 16))(a1, a2, v1852);
            v1048 = 4;
            goto LABEL_985;
          case 5:
            v1047 = a1;
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v1851 + 16))(a1, a2, v1852);
            v1048 = 5;
            goto LABEL_985;
          case 6:
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v1851 + 16))(a1, a2, v1852);
            v1049 = (void *)(((unint64_t)a1 + v1786) & v1020);
            v1050 = (const void *)(((unint64_t)a2 + v1786) & v1020);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v60 + 48))(v1050, 1, v1921))
            {
              memcpy(v1049, v1050, v1784);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v60 + 16))(v1049, v1050, v1921);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v1049, 0, 1, v1921);
            }
            *((_BYTE *)a1 + v1798) = 6;
            goto LABEL_1251;
          case 7:
            v1047 = a1;
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v1851 + 16))(a1, a2, v1852);
            v1048 = 7;
LABEL_985:
            *((_BYTE *)v1047 + v1798) = v1048;
            goto LABEL_1251;
          default:
            if (v1798 <= 3)
              v575 = v1798;
            else
              v575 = 4;
            __asm { BR              X13 }
            return result;
        }
      }
      v1761 = v89;
      v1925 = ~v1859;
      v1051 = ~v57;
      switch(*((_BYTE *)a2 + v1801))
      {
        case 0:
          v1052 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v1853 + 16);
          v1053 = ~v36;
          v1052(a1, a2, AssociatedTypeWitness);
          v1948 = (_QWORD *)(((unint64_t)a1 + v1793) & v1053);
          v1054 = (_QWORD *)(((unint64_t)a2 + v1793) & v1053);
          if (v1885 == v1812)
          {
            v1055 = (*(uint64_t (**)(_QWORD *))(v1853 + 48))(v1054);
            v1056 = v1904;
            v1057 = v1808;
            v1058 = v1834;
LABEL_1174:
            if (v1055)
            {
LABEL_1175:
              v1389 = v1948;
              memcpy(v1948, v1054, v1056);
              v1390 = v1828;
LABEL_1176:
              v1391 = __n;
              goto LABEL_1255;
            }
            v1085 = ((unint64_t)v1054 + v1058) & v1889;
            v1086 = (v1057 + v1085) & v1877;
            goto LABEL_1178;
          }
          v1058 = v1834;
          v1085 = ((unint64_t)v1054 + v1834) & v1889;
          v1057 = v1808;
          v1086 = (v1808 + v1085) & v1877;
          v1056 = v1904;
          if (v1824 == v1812)
          {
            if (v1813 == v1824)
            {
              v1055 = (*(uint64_t (**)(unint64_t))(v1835 + 48))((v1808 + v1085) & v1877);
              goto LABEL_1174;
            }
            v1144 = (unint64_t *)((v1840 + v1086) & 0xFFFFFFFFFFFFFFF8);
            if (v1799 > 0x7FFFFFFE)
            {
              v1055 = (*(uint64_t (**)(unint64_t))(v1831 + 48))(((unint64_t)v1144 + v1830) & v1858);
              goto LABEL_1174;
            }
            v1145 = *v1144;
          }
          else
          {
            v1108 = v1086 + v1905;
            if ((v1797 & 0x80000000) == 0)
            {
              v1109 = *(_QWORD *)(v1108 + 8);
              if (v1109 >= 0xFFFFFFFF)
                LODWORD(v1109) = -1;
              v1055 = v1109 + 1;
              goto LABEL_1174;
            }
            v1154 = (v1848 + ((v1907 + v1108) & v1925)) & v88;
            if (v1821 > 0x7FFFFFFD)
            {
              v1055 = (*(uint64_t (**)(uint64_t))(v1845 + 48))(v1154);
              goto LABEL_1174;
            }
            v1145 = *(_QWORD *)(((v1794 + ((v1844 + v1154) & v88)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v1145 >= 0xFFFFFFFF)
            LODWORD(v1145) = -1;
          if ((v1145 + 1) >= 2)
            goto LABEL_1175;
LABEL_1178:
          v1918 = v1054;
          v1052(v1948, v1054, AssociatedTypeWitness);
          v1392 = ((unint64_t)v1948 + v1058) & v1889;
          v1052((_QWORD *)v1392, (_QWORD *)v1085, AssociatedTypeWitness);
          v1393 = (v1057 + v1392) & v1877;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1835 + 16))(v1393, v1086, v1836);
          v1394 = (_QWORD *)((v1840 + v1393) & 0xFFFFFFFFFFFFFFF8);
          v1395 = (_QWORD *)((v1840 + v1086) & 0xFFFFFFFFFFFFFFF8);
          *v1394 = *v1395;
          v1396 = ((unint64_t)v1394 + v1830) & v1858;
          v1397 = v88;
          v1398 = ((unint64_t)v1395 + v1830) & v1858;
          v1399 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1831 + 16);
          swift_bridgeObjectRetain();
          v1399(v1396, v1398, v1832);
          v1400 = (_QWORD *)((v1825 + v1396) & 0xFFFFFFFFFFFFF8);
          v1401 = (_QWORD *)((v1825 + v1398) & 0xFFFFFFFFFFFFF8);
          *v1400 = *v1401;
          v1402 = (_QWORD *)(((unint64_t)v1400 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1403 = (_QWORD *)(((unint64_t)v1401 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v1402 = *v1403;
          v1402[1] = v1403[1];
          v1404 = (_QWORD *)(v1393 + v1905);
          *v1404 = *(_QWORD *)(v1086 + v1905);
          v1404[1] = *(_QWORD *)(v1086 + v1905 + 8);
          v1405 = (v1907 + v1393 + v1905) & v1925;
          v1406 = (v1907 + v1086 + v1905) & v1925;
          *(_BYTE *)v1405 = *(_BYTE *)v1406;
          v1407 = v1405 | 4;
          v1408 = *(_DWORD *)(v1406 | 4);
          *(_BYTE *)(v1407 + 4) = *(_BYTE *)((v1406 | 4) + 4);
          *(_DWORD *)v1407 = v1408;
          *(_WORD *)(v1405 + 10) = *(_WORD *)(v1406 + 0xA);
          v1409 = (v1848 + v1405) & v1397;
          v1410 = (v1848 + v1406) & v1397;
          v1411 = *(void (**)(size_t, size_t, uint64_t))(v1845 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1411(v1409, v1410, v1846);
          v1412 = (v1844 + v1409) & v1397;
          v1413 = (v1844 + v1410) & v1397;
          v1411(v1412, v1413, v1846);
          v1414 = (_BYTE *)(v1412 + v1850);
          *v1414 = *(_BYTE *)(v1413 + v1850);
          v1414[1] = *(_BYTE *)(v1413 + v1850 + 1);
          v1414[2] = *(_BYTE *)(v1413 + v1850 + 2);
          v1414[3] = *(_BYTE *)(v1413 + v1850 + 3);
          v1414[4] = *(_BYTE *)(v1413 + v1850 + 4);
          v1415 = (v1412 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
          v1416 = (v1413 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v1415 = *(_QWORD *)v1416;
          *(_QWORD *)(v1415 + 8) = *(_QWORD *)(v1416 + 8);
          *(_BYTE *)(v1415 + 16) = *(_BYTE *)(v1416 + 16);
          *(_BYTE *)(v1415 + 17) = *(_BYTE *)(v1416 + 17);
          *(_BYTE *)(v1415 + 18) = *(_BYTE *)(v1416 + 18);
          *(_BYTE *)(v1415 + 19) = *(_BYTE *)(v1416 + 19);
          v1417 = (v1415 + 27) & 0xFFFFFFFFFFFFFFF8;
          v1418 = (v1416 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v1417 = *(_QWORD *)v1418;
          *(_BYTE *)(v1417 + 8) = *(_BYTE *)(v1418 + 8);
          *(_BYTE *)(v1417 + 9) = *(_BYTE *)(v1418 + 9);
          *(_BYTE *)(v1417 + 10) = *(_BYTE *)(v1418 + 10);
          *(_BYTE *)(v1417 + 11) = *(_BYTE *)(v1418 + 11);
          *(_BYTE *)(v1417 + 12) = *(_BYTE *)(v1418 + 12);
          v1419 = (_QWORD *)((v1415 + 47) & 0xFFFFFFFFFFFFF8);
          v1420 = (_QWORD *)((v1416 + 47) & 0xFFFFFFFFFFFFF8);
          *v1419 = *v1420;
          v1421 = ((unint64_t)v1419 + 15) & 0xFFFFFFFFFFFFFFF8;
          v1422 = ((unint64_t)v1420 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v1421 = *(_QWORD *)v1422;
          *(_BYTE *)(v1421 + 8) = *(_BYTE *)(v1422 + 8);
          *(_BYTE *)(v1421 + 9) = *(_BYTE *)(v1422 + 9);
          v1423 = (void *)((v1841 + v1421) & v1397);
          v1424 = (const void *)((v1841 + v1422) & v1397);
          v1425 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1845 + 48);
          swift_bridgeObjectRetain();
          if (v1425(v1424, 1, v1846))
          {
            memcpy(v1423, v1424, __n);
          }
          else
          {
            v1411((size_t)v1423, (size_t)v1424, v1846);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1845 + 56))(v1423, 0, 1, v1846);
          }
          v1426 = (_QWORD *)(((unint64_t)v1423 + v1842) & 0xFFFFFFFFFFFFFFF8);
          v1427 = (_QWORD *)(((unint64_t)v1424 + v1842) & 0xFFFFFFFFFFFFFFF8);
          *v1426 = *v1427;
          v1428 = ((unint64_t)v1426 + 15) & 0xFFFFFFFFFFFFFFF8;
          v1429 = ((unint64_t)v1427 + 15) & 0xFFFFFFFFFFFFFFF8;
          v1430 = *(_QWORD *)v1429;
          *(_BYTE *)(v1428 + 8) = *(_BYTE *)(v1429 + 8);
          *(_QWORD *)v1428 = v1430;
          v1431 = (_QWORD *)(((unint64_t)v1426 + 31) & 0xFFFFFFFFFFFFF8);
          v1432 = (_QWORD *)(((unint64_t)v1427 + 31) & 0xFFFFFFFFFFFFF8);
          *v1431 = *v1432;
          v1433 = ((unint64_t)v1431 + 15) & 0xFFFFFFFFFFFFFFF8;
          v1434 = (uint64_t *)(((unint64_t)v1432 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1435 = v1434[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1054 = v1918;
          if ((v1435 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v1433 = *(_OWORD *)v1434;
          }
          else
          {
            v1436 = *v1434;
            sub_23AAAE668(*v1434, v1435);
            *(_QWORD *)v1433 = v1436;
            *(_QWORD *)(v1433 + 8) = v1435;
          }
          v1437 = (v1433 + 19) & 0xFFFFFFFFFFFFFFF8;
          v1438 = ((unint64_t)v1434 + 19) & 0xFFFFFFFFFFFFFFF8;
          v1439 = *(_QWORD *)v1438;
          *(_BYTE *)(v1437 + 8) = *(_BYTE *)(v1438 + 8);
          *(_QWORD *)v1437 = v1439;
          *(_BYTE *)(v1437 + 9) = *(_BYTE *)(v1438 + 9);
          v1440 = (v1437 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v1441 = (v1438 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v1442 = *(_DWORD *)v1441;
          *(_BYTE *)(v1440 + 4) = *(_BYTE *)(v1441 + 4);
          *(_DWORD *)v1440 = v1442;
          v1443 = (_QWORD *)((v1437 + 25) & 0xFFFFFFFFFFFFFFF8);
          v1444 = (_QWORD *)((v1438 + 25) & 0xFFFFFFFFFFFFFFF8);
          *v1443 = *v1444;
          v1443[1] = v1444[1];
          v1445 = v1843 + v1405;
          v1446 = v1843 + v1406;
          v1447 = *(_QWORD *)(v1843 + v1406 + 16);
          if (v1447 >= 0xFFFFFFFF)
            LODWORD(v1447) = -1;
          v1448 = v1447 - 1;
          swift_bridgeObjectRetain();
          if (v1448 < 0)
          {
            *(_QWORD *)v1445 = *(_QWORD *)v1446;
            *(_BYTE *)(v1445 + 8) = *(_BYTE *)(v1446 + 8);
            *(_BYTE *)(v1445 + 9) = *(_BYTE *)(v1446 + 9);
            v1461 = *(void **)(v1446 + 16);
            v1462 = v1461;
            *(_QWORD *)(v1445 + 16) = v1461;
            v1463 = *(void **)(v1446 + 24);
            v1464 = v1463;
            *(_QWORD *)(v1445 + 24) = v1463;
            *(_BYTE *)(v1445 + 32) = *(_BYTE *)(v1446 + 32);
            *(_BYTE *)(v1445 + 33) = *(_BYTE *)(v1446 + 33);
            *(_BYTE *)(v1445 + 34) = *(_BYTE *)(v1446 + 34);
            *(_QWORD *)(v1445 + 40) = *(_QWORD *)(v1446 + 40);
            *(_QWORD *)(v1445 + 48) = *(_QWORD *)(v1446 + 48);
            *(_QWORD *)(v1445 + 56) = *(_QWORD *)(v1446 + 56);
            *(_QWORD *)(v1445 + 64) = *(_QWORD *)(v1446 + 64);
            *(_BYTE *)(v1445 + 72) = *(_BYTE *)(v1446 + 72);
            *(_QWORD *)(v1445 + 80) = *(_QWORD *)(v1446 + 80);
            *(_QWORD *)(v1445 + 88) = *(_QWORD *)(v1446 + 88);
            v1934 = *(void **)(v1446 + 96);
            *(_QWORD *)(v1445 + 96) = v1934;
            *(_BYTE *)(v1445 + 104) = *(_BYTE *)(v1446 + 104);
            *(_BYTE *)(v1445 + 105) = *(_BYTE *)(v1446 + 105);
            *(_QWORD *)(v1445 + 112) = *(_QWORD *)(v1446 + 112);
            *(_QWORD *)(v1445 + 120) = *(_QWORD *)(v1446 + 120);
            *(_QWORD *)(v1445 + 128) = *(_QWORD *)(v1446 + 128);
            *(_QWORD *)(v1445 + 136) = *(_QWORD *)(v1446 + 136);
            *(_QWORD *)(v1445 + 144) = *(_QWORD *)(v1446 + 144);
            *(_QWORD *)(v1445 + 152) = *(_QWORD *)(v1446 + 152);
            *(_QWORD *)(v1445 + 160) = *(_QWORD *)(v1446 + 160);
            *(_QWORD *)(v1445 + 168) = *(_QWORD *)(v1446 + 168);
            *(_BYTE *)(v1445 + 176) = *(_BYTE *)(v1446 + 176);
            *(_QWORD *)(v1445 + 184) = *(_QWORD *)(v1446 + 184);
            v1465 = *(_QWORD *)(v1446 + 192);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1466 = v1934;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v1465)
            {
              *(_QWORD *)(v1445 + 192) = v1465;
              *(_QWORD *)(v1445 + 200) = *(_QWORD *)(v1446 + 200);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v1445 + 192) = *(_OWORD *)(v1446 + 192);
            }
            v1391 = v1850;
            v1390 = v1828;
            v1054 = v1918;
            *(_QWORD *)(v1445 + 208) = *(_QWORD *)(v1446 + 208);
            *(_QWORD *)(v1445 + 216) = *(_QWORD *)(v1446 + 216);
            *(_QWORD *)(v1445 + 224) = *(_QWORD *)(v1446 + 224);
            *(_QWORD *)(v1445 + 232) = *(_QWORD *)(v1446 + 232);
            *(_QWORD *)(v1445 + 240) = *(_QWORD *)(v1446 + 240);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v1449 = *(_OWORD *)v1446;
            v1450 = *(_OWORD *)(v1446 + 16);
            v1451 = *(_OWORD *)(v1446 + 48);
            *(_OWORD *)(v1445 + 32) = *(_OWORD *)(v1446 + 32);
            *(_OWORD *)(v1445 + 48) = v1451;
            *(_OWORD *)v1445 = v1449;
            *(_OWORD *)(v1445 + 16) = v1450;
            v1452 = *(_OWORD *)(v1446 + 64);
            v1453 = *(_OWORD *)(v1446 + 80);
            v1454 = *(_OWORD *)(v1446 + 112);
            *(_OWORD *)(v1445 + 96) = *(_OWORD *)(v1446 + 96);
            *(_OWORD *)(v1445 + 112) = v1454;
            *(_OWORD *)(v1445 + 64) = v1452;
            *(_OWORD *)(v1445 + 80) = v1453;
            v1455 = *(_OWORD *)(v1446 + 128);
            v1456 = *(_OWORD *)(v1446 + 144);
            v1457 = *(_OWORD *)(v1446 + 176);
            *(_OWORD *)(v1445 + 160) = *(_OWORD *)(v1446 + 160);
            *(_OWORD *)(v1445 + 176) = v1457;
            *(_OWORD *)(v1445 + 128) = v1455;
            *(_OWORD *)(v1445 + 144) = v1456;
            v1458 = *(_OWORD *)(v1446 + 192);
            v1459 = *(_OWORD *)(v1446 + 208);
            v1460 = *(_OWORD *)(v1446 + 224);
            *(_QWORD *)(v1445 + 240) = *(_QWORD *)(v1446 + 240);
            *(_OWORD *)(v1445 + 208) = v1459;
            *(_OWORD *)(v1445 + 224) = v1460;
            *(_OWORD *)(v1445 + 192) = v1458;
            v1391 = v1850;
            v1390 = v1828;
          }
          v1687 = (_OWORD *)((v1445 + 255) & 0xFFFFFFFFFFFFFFF8);
          v1688 = (__int128 *)((v1446 + 255) & 0xFFFFFFFFFFFFFFF8);
          v1689 = *v1688;
          *(_OWORD *)((char *)v1687 + 9) = *(__int128 *)((char *)v1688 + 9);
          *v1687 = v1689;
          v1690 = (v1445 + 287) & 0xFFFFFFFFFFFFFFF8;
          v1691 = (v1446 + 287) & 0xFFFFFFFFFFFFFFF8;
          v1692 = *(_OWORD *)v1691;
          *(_BYTE *)(v1690 + 16) = *(_BYTE *)(v1691 + 16);
          *(_OWORD *)v1690 = v1692;
          v1693 = (_QWORD *)((v1445 + 311) & 0xFFFFFFFFFFFFF8);
          v1694 = (v1446 + 311) & 0xFFFFFFFFFFFFF8;
          v1695 = *(_QWORD *)v1694;
          v1694 += 15;
          *v1693 = v1695;
          v1696 = (_QWORD *)(((unint64_t)v1693 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1697 = *(_QWORD *)(v1694 & 0xFFFFFFFFFFFFFFF8);
          v1698 = *(_QWORD *)((v1694 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_23AA7F2D4(v1697, v1698);
          *v1696 = v1697;
          v1696[1] = v1698;
          v1389 = v1948;
          if (!v1821)
            goto LABEL_1176;
LABEL_1255:
          v1699 = ((((v1823
                    + ((((((((((v1390 + v1391 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 19) & 0xFFFFFFFFFFFFFFF8)
                      + 25) & 0xFFFFFFFFFFFFFFF8)
                    + 327) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 16;
          v1700 = (_QWORD *)(((unint64_t)v1389 + v1699) & 0xFFFFFFFFFFFFFFF8);
          v1701 = (_QWORD *)(((unint64_t)v1054 + v1699) & 0xFFFFFFFFFFFFFFF8);
          *v1700 = *v1701;
          v1702 = *(void **)(((unint64_t)v1701 + 15) & 0xFFFFFFFFFFFFF8);
          *(_QWORD *)(((unint64_t)v1700 + 15) & 0xFFFFFFFFFFFFF8) = v1702;
          *((_BYTE *)a1 + v1801) = 0;
          v1703 = v1702;
LABEL_1280:
          v1075 = 0;
          v222 = v1809;
          goto LABEL_1281;
        case 1:
          v1866 = ~v39;
          v1902 = v37;
          v1775 = ((((v1826 + ((v39 + 8 + (v1869 & 0xFFFFFFFFFFFFFFF8)) & ~v39)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                + 16;
          v1059 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v1853 + 16);
          v1060 = ~v36;
          v1059(a1, a2, AssociatedTypeWitness);
          v1949 = (_QWORD *)(((unint64_t)a1 + v1793) & v1060);
          v1061 = (_QWORD *)(((unint64_t)a2 + v1793) & v1060);
          if (v1885 == v1812)
          {
            v1062 = (*(uint64_t (**)(_QWORD *))(v1853 + 48))(v1061);
            v1063 = v1852;
            v1064 = v1829;
LABEL_1191:
            if (v1062)
            {
LABEL_1192:
              v1467 = v1949;
              memcpy(v1949, v1061, v1904);
              v1468 = v1870;
LABEL_1193:
              v1469 = __n;
              goto LABEL_1259;
            }
            v1087 = ((unint64_t)v1061 + v1834) & v1889;
            v1088 = (v1808 + v1087) & v1877;
LABEL_1195:
            v1919 = v1061;
            v1059(v1949, v1061, AssociatedTypeWitness);
            v1470 = v88;
            v1471 = ((unint64_t)v1949 + v1834) & v1889;
            v1059((_QWORD *)v1471, (_QWORD *)v1087, AssociatedTypeWitness);
            v1472 = (v1808 + v1471) & v1877;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1835 + 16))(v1472, v1088, v1836);
            v1473 = (_QWORD *)((v1840 + v1472) & 0xFFFFFFFFFFFFFFF8);
            v1474 = (_QWORD *)((v1840 + v1088) & 0xFFFFFFFFFFFFFFF8);
            *v1473 = *v1474;
            v1475 = ((unint64_t)v1473 + v1830) & v1858;
            v1476 = ((unint64_t)v1474 + v1830) & v1858;
            v1477 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1831 + 16);
            swift_bridgeObjectRetain();
            v1477(v1475, v1476, v1832);
            v1478 = (_QWORD *)((v1825 + v1475) & 0xFFFFFFFFFFFFF8);
            v1469 = v1850;
            v1479 = (_QWORD *)((v1825 + v1476) & 0xFFFFFFFFFFFFF8);
            *v1478 = *v1479;
            v1480 = (_QWORD *)(((unint64_t)v1478 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1481 = (_QWORD *)(((unint64_t)v1479 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v1480 = *v1481;
            v1480[1] = v1481[1];
            v1482 = (_QWORD *)(v1472 + v1905);
            *v1482 = *(_QWORD *)(v1088 + v1905);
            v1482[1] = *(_QWORD *)(v1088 + v1905 + 8);
            v1483 = (v1907 + v1472 + v1905) & v1925;
            v1484 = (v1907 + v1088 + v1905) & v1925;
            *(_BYTE *)v1483 = *(_BYTE *)v1484;
            v1485 = v1483 | 4;
            v1486 = *(_DWORD *)(v1484 | 4);
            *(_BYTE *)(v1485 + 4) = *(_BYTE *)((v1484 | 4) + 4);
            *(_DWORD *)v1485 = v1486;
            *(_WORD *)(v1483 + 10) = *(_WORD *)(v1484 + 0xA);
            v1487 = (v1848 + v1483) & v1470;
            v1488 = (v1848 + v1484) & v1470;
            v1489 = *(void (**)(size_t, size_t, uint64_t))(v1845 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1489(v1487, v1488, v1846);
            v1490 = (v1844 + v1487) & v1470;
            v1491 = (v1844 + v1488) & v1470;
            v1489(v1490, v1491, v1846);
            v1492 = (_BYTE *)(v1490 + v1850);
            *v1492 = *(_BYTE *)(v1491 + v1850);
            v1492[1] = *(_BYTE *)(v1491 + v1850 + 1);
            v1492[2] = *(_BYTE *)(v1491 + v1850 + 2);
            v1492[3] = *(_BYTE *)(v1491 + v1850 + 3);
            v1492[4] = *(_BYTE *)(v1491 + v1850 + 4);
            v1493 = (v1490 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
            v1494 = (v1491 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1493 = *(_QWORD *)v1494;
            *(_QWORD *)(v1493 + 8) = *(_QWORD *)(v1494 + 8);
            *(_BYTE *)(v1493 + 16) = *(_BYTE *)(v1494 + 16);
            *(_BYTE *)(v1493 + 17) = *(_BYTE *)(v1494 + 17);
            *(_BYTE *)(v1493 + 18) = *(_BYTE *)(v1494 + 18);
            *(_BYTE *)(v1493 + 19) = *(_BYTE *)(v1494 + 19);
            v1495 = (v1493 + 27) & 0xFFFFFFFFFFFFFFF8;
            v1496 = (v1494 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1495 = *(_QWORD *)v1496;
            *(_BYTE *)(v1495 + 8) = *(_BYTE *)(v1496 + 8);
            *(_BYTE *)(v1495 + 9) = *(_BYTE *)(v1496 + 9);
            *(_BYTE *)(v1495 + 10) = *(_BYTE *)(v1496 + 10);
            *(_BYTE *)(v1495 + 11) = *(_BYTE *)(v1496 + 11);
            *(_BYTE *)(v1495 + 12) = *(_BYTE *)(v1496 + 12);
            v1497 = (_QWORD *)((v1493 + 47) & 0xFFFFFFFFFFFFF8);
            v1498 = (_QWORD *)((v1494 + 47) & 0xFFFFFFFFFFFFF8);
            *v1497 = *v1498;
            v1499 = ((unint64_t)v1497 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1500 = ((unint64_t)v1498 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1499 = *(_QWORD *)v1500;
            *(_BYTE *)(v1499 + 8) = *(_BYTE *)(v1500 + 8);
            *(_BYTE *)(v1499 + 9) = *(_BYTE *)(v1500 + 9);
            v1501 = (void *)((v1841 + v1499) & v1470);
            v1502 = (const void *)((v1841 + v1500) & v1470);
            v1503 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1845 + 48);
            swift_bridgeObjectRetain();
            if (v1503(v1502, 1, v1846))
            {
              memcpy(v1501, v1502, __n);
            }
            else
            {
              v1489((size_t)v1501, (size_t)v1502, v1846);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1845 + 56))(v1501, 0, 1, v1846);
            }
            v1504 = (_QWORD *)(((unint64_t)v1501 + v1842) & 0xFFFFFFFFFFFFFFF8);
            v1505 = (_QWORD *)(((unint64_t)v1502 + v1842) & 0xFFFFFFFFFFFFFFF8);
            *v1504 = *v1505;
            v1506 = ((unint64_t)v1504 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1507 = ((unint64_t)v1505 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1508 = *(_QWORD *)v1507;
            *(_BYTE *)(v1506 + 8) = *(_BYTE *)(v1507 + 8);
            *(_QWORD *)v1506 = v1508;
            v1509 = (_QWORD *)(((unint64_t)v1504 + 31) & 0xFFFFFFFFFFFFF8);
            v1510 = (_QWORD *)(((unint64_t)v1505 + 31) & 0xFFFFFFFFFFFFF8);
            *v1509 = *v1510;
            v1511 = ((unint64_t)v1509 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1512 = (uint64_t *)(((unint64_t)v1510 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1513 = v1512[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1063 = v1852;
            if ((v1513 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)v1511 = *(_OWORD *)v1512;
            }
            else
            {
              v1514 = *v1512;
              sub_23AAAE668(*v1512, v1513);
              *(_QWORD *)v1511 = v1514;
              *(_QWORD *)(v1511 + 8) = v1513;
            }
            v1515 = (v1511 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1516 = ((unint64_t)v1512 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1517 = *(_QWORD *)v1516;
            *(_BYTE *)(v1515 + 8) = *(_BYTE *)(v1516 + 8);
            *(_QWORD *)v1515 = v1517;
            *(_BYTE *)(v1515 + 9) = *(_BYTE *)(v1516 + 9);
            v1518 = (v1515 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v1519 = (v1516 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v1520 = *(_DWORD *)v1519;
            *(_BYTE *)(v1518 + 4) = *(_BYTE *)(v1519 + 4);
            *(_DWORD *)v1518 = v1520;
            v1521 = (_QWORD *)((v1515 + 25) & 0xFFFFFFFFFFFFFFF8);
            v1522 = (_QWORD *)((v1516 + 25) & 0xFFFFFFFFFFFFFFF8);
            *v1521 = *v1522;
            v1521[1] = v1522[1];
            v1523 = v1843 + v1483;
            v1524 = v1843 + v1484;
            v1525 = *(_QWORD *)(v1843 + v1484 + 16);
            if (v1525 >= 0xFFFFFFFF)
              LODWORD(v1525) = -1;
            v1526 = v1525 - 1;
            swift_bridgeObjectRetain();
            if (v1526 < 0)
            {
              *(_QWORD *)v1523 = *(_QWORD *)v1524;
              *(_BYTE *)(v1523 + 8) = *(_BYTE *)(v1524 + 8);
              *(_BYTE *)(v1523 + 9) = *(_BYTE *)(v1524 + 9);
              v1539 = *(void **)(v1524 + 16);
              v1540 = v1539;
              *(_QWORD *)(v1523 + 16) = v1539;
              v1541 = *(void **)(v1524 + 24);
              v1542 = v1541;
              *(_QWORD *)(v1523 + 24) = v1541;
              *(_BYTE *)(v1523 + 32) = *(_BYTE *)(v1524 + 32);
              *(_BYTE *)(v1523 + 33) = *(_BYTE *)(v1524 + 33);
              *(_BYTE *)(v1523 + 34) = *(_BYTE *)(v1524 + 34);
              *(_QWORD *)(v1523 + 40) = *(_QWORD *)(v1524 + 40);
              *(_QWORD *)(v1523 + 48) = *(_QWORD *)(v1524 + 48);
              *(_QWORD *)(v1523 + 56) = *(_QWORD *)(v1524 + 56);
              *(_QWORD *)(v1523 + 64) = *(_QWORD *)(v1524 + 64);
              *(_BYTE *)(v1523 + 72) = *(_BYTE *)(v1524 + 72);
              *(_QWORD *)(v1523 + 80) = *(_QWORD *)(v1524 + 80);
              *(_QWORD *)(v1523 + 88) = *(_QWORD *)(v1524 + 88);
              v1935 = *(void **)(v1524 + 96);
              *(_QWORD *)(v1523 + 96) = v1935;
              *(_BYTE *)(v1523 + 104) = *(_BYTE *)(v1524 + 104);
              *(_BYTE *)(v1523 + 105) = *(_BYTE *)(v1524 + 105);
              *(_QWORD *)(v1523 + 112) = *(_QWORD *)(v1524 + 112);
              *(_QWORD *)(v1523 + 120) = *(_QWORD *)(v1524 + 120);
              *(_QWORD *)(v1523 + 128) = *(_QWORD *)(v1524 + 128);
              *(_QWORD *)(v1523 + 136) = *(_QWORD *)(v1524 + 136);
              *(_QWORD *)(v1523 + 144) = *(_QWORD *)(v1524 + 144);
              *(_QWORD *)(v1523 + 152) = *(_QWORD *)(v1524 + 152);
              *(_QWORD *)(v1523 + 160) = *(_QWORD *)(v1524 + 160);
              *(_QWORD *)(v1523 + 168) = *(_QWORD *)(v1524 + 168);
              *(_BYTE *)(v1523 + 176) = *(_BYTE *)(v1524 + 176);
              *(_QWORD *)(v1523 + 184) = *(_QWORD *)(v1524 + 184);
              v1543 = *(_QWORD *)(v1524 + 192);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1544 = v1935;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v1543)
              {
                *(_QWORD *)(v1523 + 192) = v1543;
                *(_QWORD *)(v1523 + 200) = *(_QWORD *)(v1524 + 200);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v1523 + 192) = *(_OWORD *)(v1524 + 192);
              }
              v1469 = v1850;
              v1063 = v1852;
              v1468 = v1870;
              *(_QWORD *)(v1523 + 208) = *(_QWORD *)(v1524 + 208);
              *(_QWORD *)(v1523 + 216) = *(_QWORD *)(v1524 + 216);
              *(_QWORD *)(v1523 + 224) = *(_QWORD *)(v1524 + 224);
              *(_QWORD *)(v1523 + 232) = *(_QWORD *)(v1524 + 232);
              *(_QWORD *)(v1523 + 240) = *(_QWORD *)(v1524 + 240);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              v1527 = *(_OWORD *)v1524;
              v1528 = *(_OWORD *)(v1524 + 16);
              v1529 = *(_OWORD *)(v1524 + 48);
              *(_OWORD *)(v1523 + 32) = *(_OWORD *)(v1524 + 32);
              *(_OWORD *)(v1523 + 48) = v1529;
              *(_OWORD *)v1523 = v1527;
              *(_OWORD *)(v1523 + 16) = v1528;
              v1530 = *(_OWORD *)(v1524 + 64);
              v1531 = *(_OWORD *)(v1524 + 80);
              v1532 = *(_OWORD *)(v1524 + 112);
              *(_OWORD *)(v1523 + 96) = *(_OWORD *)(v1524 + 96);
              *(_OWORD *)(v1523 + 112) = v1532;
              *(_OWORD *)(v1523 + 64) = v1530;
              *(_OWORD *)(v1523 + 80) = v1531;
              v1533 = *(_OWORD *)(v1524 + 128);
              v1534 = *(_OWORD *)(v1524 + 144);
              v1535 = *(_OWORD *)(v1524 + 176);
              *(_OWORD *)(v1523 + 160) = *(_OWORD *)(v1524 + 160);
              *(_OWORD *)(v1523 + 176) = v1535;
              *(_OWORD *)(v1523 + 128) = v1533;
              *(_OWORD *)(v1523 + 144) = v1534;
              v1536 = *(_OWORD *)(v1524 + 192);
              v1537 = *(_OWORD *)(v1524 + 208);
              v1538 = *(_OWORD *)(v1524 + 224);
              *(_QWORD *)(v1523 + 240) = *(_QWORD *)(v1524 + 240);
              *(_OWORD *)(v1523 + 208) = v1537;
              *(_OWORD *)(v1523 + 224) = v1538;
              *(_OWORD *)(v1523 + 192) = v1536;
              v1468 = v1870;
            }
            v1704 = (_OWORD *)((v1523 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1705 = (__int128 *)((v1524 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1706 = *v1705;
            *(_OWORD *)((char *)v1704 + 9) = *(__int128 *)((char *)v1705 + 9);
            *v1704 = v1706;
            v1707 = (v1523 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1708 = (v1524 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1709 = *(_OWORD *)v1708;
            *(_BYTE *)(v1707 + 16) = *(_BYTE *)(v1708 + 16);
            *(_OWORD *)v1707 = v1709;
            v1710 = (_QWORD *)((v1523 + 311) & 0xFFFFFFFFFFFFF8);
            v1711 = (v1524 + 311) & 0xFFFFFFFFFFFFF8;
            v1712 = *(_QWORD *)v1711;
            v1711 += 15;
            *v1710 = v1712;
            v1713 = (_QWORD *)(((unint64_t)v1710 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1714 = *(_QWORD *)(v1711 & 0xFFFFFFFFFFFFFFF8);
            v1715 = *(_QWORD *)((v1711 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_23AA7F2D4(v1714, v1715);
            *v1713 = v1714;
            v1713[1] = v1715;
            v222 = v1809;
            v1064 = v1829;
            v1061 = v1919;
            v1467 = v1949;
            if (!v1821)
              goto LABEL_1193;
LABEL_1259:
            v1716 = ((((v1823
                      + ((((((((((v1828 + v1469 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)
                      + 327) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v1717 = (void *)(((unint64_t)v1467 + v1468 + v1716) & v1758);
            v1718 = (const void *)(((unint64_t)v1061 + v1468 + v1716) & v1758);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1851 + 48))(v1718, 1, v1063))
            {
              memcpy(v1717, v1718, v1781);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1851 + 16))(v1717, v1718, v1063);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1851 + 56))(v1717, 0, 1, v1063);
            }
            v1719 = (char *)(((unint64_t)v1717 + v1791) & v1761);
            v1720 = (char *)(((unint64_t)v1718 + v1791) & v1761);
            if (v1814 == v1064)
            {
              v1721 = (*(uint64_t (**)(unint64_t))(v1837 + 48))(((unint64_t)v1718 + v1791) & v1761);
            }
            else
            {
              v1722 = v1869;
              v1723 = (uint64_t *)((unint64_t)&v1720[v1869] & 0xFFFFFFFFFFFFFFF8);
              if (v1800 <= 0x7FFFFFFE)
              {
                v1724 = *v1723;
                if ((unint64_t)*v1723 >= 0xFFFFFFFF)
                  LODWORD(v1724) = -1;
                if ((v1724 + 1) >= 2)
                  goto LABEL_1271;
                goto LABEL_1273;
              }
              v1721 = (*(uint64_t (**)(unint64_t))(v1902 + 48))(((unint64_t)v1723 + v1839) & v1866);
            }
            v1722 = v1869;
            if (v1721)
            {
LABEL_1271:
              v1725 = v1775;
              memcpy(v1719, v1720, v1775);
LABEL_1274:
              *(_QWORD *)&v1719[v1725] = *(_QWORD *)&v1720[v1725];
              v1736 = (_QWORD *)((unint64_t)&v1719[v1725 + 15] & 0xFFFFFFFFFFFFF8);
              v1737 = (_QWORD *)((unint64_t)&v1720[v1725 + 15] & 0xFFFFFFFFFFFFFFF8);
              *v1736 = *v1737;
              v1136 = *(void **)(((unint64_t)v1737 + 15) & 0xFFFFFFFFFFFFF8);
              *(_QWORD *)(((unint64_t)v1736 + 15) & 0xFFFFFFFFFFFFF8) = v1136;
              v1137 = 1;
LABEL_1275:
              *((_BYTE *)a1 + v1801) = v1137;
              v1738 = v1136;
              v1075 = 0;
              goto LABEL_1281;
            }
            v1723 = (uint64_t *)((unint64_t)&v1720[v1869] & 0xFFFFFFFFFFFFFFF8);
LABEL_1273:
            v1726 = v1722;
            (*(void (**)(char *, char *, uint64_t))(v1837 + 16))(v1719, v1720, v1838);
            v1727 = (_QWORD *)((unint64_t)&v1719[v1726] & 0xFFFFFFFFFFFFFFF8);
            *v1727 = *v1723;
            v1728 = ((unint64_t)v1727 + v1839) & v1866;
            v1729 = ((unint64_t)v1723 + v1839) & v1866;
            v1730 = v222;
            v1731 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1902 + 16);
            swift_bridgeObjectRetain();
            v1731(v1728, v1729, v1833);
            v222 = v1730;
            v1732 = (_QWORD *)((v1826 + v1728) & 0xFFFFFFFFFFFFF8);
            v1733 = (_QWORD *)((v1826 + v1729) & 0xFFFFFFFFFFFFF8);
            *v1732 = *v1733;
            v1734 = (_QWORD *)(((unint64_t)v1732 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1735 = (_QWORD *)(((unint64_t)v1733 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v1734 = *v1735;
            v1734[1] = v1735[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1725 = v1775;
            goto LABEL_1274;
          }
          v1087 = ((unint64_t)v1061 + v1834) & v1889;
          v1088 = (v1808 + v1087) & v1877;
          v1064 = v1829;
          if (v1824 == v1812)
          {
            if (v1813 == v1824)
            {
              v1062 = (*(uint64_t (**)(unint64_t))(v1835 + 48))((v1808 + v1087) & v1877);
              v1063 = v1852;
              goto LABEL_1191;
            }
            v1146 = (unint64_t *)((v1840 + v1088) & 0xFFFFFFFFFFFFFFF8);
            v1063 = v1852;
            if (v1799 > 0x7FFFFFFE)
            {
              v1062 = (*(uint64_t (**)(unint64_t))(v1831 + 48))(((unint64_t)v1146 + v1830) & v1858);
              goto LABEL_1191;
            }
            v1147 = *v1146;
          }
          else
          {
            v1110 = v1088 + v1905;
            if ((v1797 & 0x80000000) == 0)
            {
              v1111 = *(_QWORD *)(v1110 + 8);
              if (v1111 >= 0xFFFFFFFF)
                LODWORD(v1111) = -1;
              v1062 = v1111 + 1;
              v1063 = v1852;
              goto LABEL_1191;
            }
            v1155 = (v1848 + ((v1907 + v1110) & v1925)) & v88;
            v1063 = v1852;
            if (v1821 > 0x7FFFFFFD)
            {
              v1062 = (*(uint64_t (**)(uint64_t))(v1845 + 48))(v1155);
              goto LABEL_1191;
            }
            v1147 = *(_QWORD *)(((v1794 + ((v1844 + v1155) & v88)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v1147 >= 0xFFFFFFFF)
            LODWORD(v1147) = -1;
          if ((v1147 + 1) >= 2)
            goto LABEL_1192;
          goto LABEL_1195;
        case 2:
          v1867 = ~v39;
          v1903 = v37;
          v1776 = ((((v1826 + ((v39 + 8 + (v1869 & 0xFFFFFFFFFFFFFFF8)) & ~v39)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                + 16;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v1853 + 16))(a1, a2, AssociatedTypeWitness);
          v1065 = (void *)(((unint64_t)a1 + v1820) & v1758);
          v1066 = (const void *)(((unint64_t)a2 + v1820) & v1758);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1851 + 48))(v1066, 1, v1852))
          {
            memcpy(v1065, v1066, v1781);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v1851 + 16))(v1065, v1066, v1852);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1851 + 56))(v1065, 0, 1, v1852);
          }
          v1096 = (char *)(((unint64_t)v1065 + v1791) & v1761);
          v1097 = (char *)(((unint64_t)v1066 + v1791) & v1761);
          if (v1814 == v1829)
          {
            v1098 = (*(uint64_t (**)(char *))(v1837 + 48))(v1097);
          }
          else
          {
            v1099 = (uint64_t *)((unint64_t)&v1097[v1869] & 0xFFFFFFFFFFFFFFF8);
            if (v1800 <= 0x7FFFFFFE)
            {
              v1100 = v1869;
              v1101 = *v1099;
              if ((unint64_t)*v1099 >= 0xFFFFFFFF)
                LODWORD(v1101) = -1;
              if ((v1101 + 1) >= 2)
                goto LABEL_1091;
              goto LABEL_1093;
            }
            v1098 = (*(uint64_t (**)(unint64_t))(v1903 + 48))(((unint64_t)v1099 + v1839) & v1867);
          }
          if (v1098)
          {
LABEL_1091:
            v1125 = v1776;
            memcpy(v1096, v1097, v1776);
            goto LABEL_1094;
          }
          v1100 = v1869;
          v1099 = (uint64_t *)((unint64_t)&v1097[v1869] & 0xFFFFFFFFFFFFFFF8);
LABEL_1093:
          v1126 = v1100;
          (*(void (**)(char *, char *, uint64_t))(v1837 + 16))(v1096, v1097, v1838);
          v1127 = (_QWORD *)((unint64_t)&v1096[v1126] & 0xFFFFFFFFFFFFFFF8);
          *v1127 = *v1099;
          v1128 = ((unint64_t)v1127 + v1839) & v1867;
          v1129 = ((unint64_t)v1099 + v1839) & v1867;
          v1130 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1903 + 16);
          swift_bridgeObjectRetain();
          v1130(v1128, v1129, v1833);
          v222 = v1809;
          v1131 = (_QWORD *)((v1826 + v1128) & 0xFFFFFFFFFFFFF8);
          v1132 = (_QWORD *)((v1826 + v1129) & 0xFFFFFFFFFFFFF8);
          *v1131 = *v1132;
          v1133 = (_QWORD *)(((unint64_t)v1131 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1134 = (_QWORD *)(((unint64_t)v1132 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v1133 = *v1134;
          v1133[1] = v1134[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1125 = v1776;
LABEL_1094:
          v1135 = &v1096[v1125];
          *v1135 = v1097[v1125];
          v1136 = *(void **)&v1097[v1125 + 8];
          *((_QWORD *)v1135 + 1) = v1136;
          v1137 = 2;
          goto LABEL_1275;
        case 3:
          v1067 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v1853 + 16);
          v1068 = ~v36;
          v1067(a1, a2, AssociatedTypeWitness);
          v1950 = (_QWORD *)(((unint64_t)a1 + v1793) & v1068);
          v1069 = (_QWORD *)(((unint64_t)a2 + v1793) & v1068);
          if (v1885 == v1812)
          {
            v1070 = (*(uint64_t (**)(_QWORD *))(v1853 + 48))(v1069);
            v1071 = v1904;
            v1072 = v1808;
            v1073 = v1834;
LABEL_1208:
            if (v1070)
            {
LABEL_1209:
              v1545 = v1950;
              memcpy(v1950, v1069, v1071);
              v1546 = v1828;
              goto LABEL_1210;
            }
            v1089 = ((unint64_t)v1069 + v1073) & v1889;
            v1090 = (v1072 + v1089) & v1877;
LABEL_1212:
            v1920 = v1069;
            v1067(v1950, v1069, AssociatedTypeWitness);
            v1548 = ((unint64_t)v1950 + v1073) & v1889;
            v1067((_QWORD *)v1548, (_QWORD *)v1089, AssociatedTypeWitness);
            v1549 = (v1072 + v1548) & v1877;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1835 + 16))(v1549, v1090, v1836);
            v1550 = (_QWORD *)((v1840 + v1549) & 0xFFFFFFFFFFFFFFF8);
            v1551 = (_QWORD *)((v1840 + v1090) & 0xFFFFFFFFFFFFFFF8);
            *v1550 = *v1551;
            v1552 = ((unint64_t)v1550 + v1830) & v1858;
            v1553 = v88;
            v1554 = ((unint64_t)v1551 + v1830) & v1858;
            v1555 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1831 + 16);
            swift_bridgeObjectRetain();
            v1555(v1552, v1554, v1832);
            v1556 = (_QWORD *)((v1825 + v1552) & 0xFFFFFFFFFFFFF8);
            v1557 = (_QWORD *)((v1825 + v1554) & 0xFFFFFFFFFFFFF8);
            *v1556 = *v1557;
            v1558 = (_QWORD *)(((unint64_t)v1556 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1559 = (_QWORD *)(((unint64_t)v1557 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v1558 = *v1559;
            v1558[1] = v1559[1];
            v1560 = (_QWORD *)(v1549 + v1905);
            *v1560 = *(_QWORD *)(v1090 + v1905);
            v1560[1] = *(_QWORD *)(v1090 + v1905 + 8);
            v1561 = (v1907 + v1549 + v1905) & v1925;
            v1562 = (v1907 + v1090 + v1905) & v1925;
            *(_BYTE *)v1561 = *(_BYTE *)v1562;
            v1563 = v1561 | 4;
            v1564 = *(_DWORD *)(v1562 | 4);
            *(_BYTE *)(v1563 + 4) = *(_BYTE *)((v1562 | 4) + 4);
            *(_DWORD *)v1563 = v1564;
            *(_WORD *)(v1561 + 10) = *(_WORD *)(v1562 + 0xA);
            v1565 = (v1848 + v1561) & v1553;
            v1566 = (v1848 + v1562) & v1553;
            v1567 = *(void (**)(size_t, size_t, uint64_t))(v1845 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1567(v1565, v1566, v1846);
            v1568 = (v1844 + v1565) & v1553;
            v1569 = (v1844 + v1566) & v1553;
            v1567(v1568, v1569, v1846);
            v1570 = (_BYTE *)(v1568 + v1850);
            *v1570 = *(_BYTE *)(v1569 + v1850);
            v1570[1] = *(_BYTE *)(v1569 + v1850 + 1);
            v1570[2] = *(_BYTE *)(v1569 + v1850 + 2);
            v1570[3] = *(_BYTE *)(v1569 + v1850 + 3);
            v1570[4] = *(_BYTE *)(v1569 + v1850 + 4);
            v1571 = (v1568 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
            v1572 = (v1569 + v1850 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1571 = *(_QWORD *)v1572;
            *(_QWORD *)(v1571 + 8) = *(_QWORD *)(v1572 + 8);
            *(_BYTE *)(v1571 + 16) = *(_BYTE *)(v1572 + 16);
            *(_BYTE *)(v1571 + 17) = *(_BYTE *)(v1572 + 17);
            *(_BYTE *)(v1571 + 18) = *(_BYTE *)(v1572 + 18);
            *(_BYTE *)(v1571 + 19) = *(_BYTE *)(v1572 + 19);
            v1573 = (v1571 + 27) & 0xFFFFFFFFFFFFFFF8;
            v1574 = (v1572 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1573 = *(_QWORD *)v1574;
            *(_BYTE *)(v1573 + 8) = *(_BYTE *)(v1574 + 8);
            *(_BYTE *)(v1573 + 9) = *(_BYTE *)(v1574 + 9);
            *(_BYTE *)(v1573 + 10) = *(_BYTE *)(v1574 + 10);
            *(_BYTE *)(v1573 + 11) = *(_BYTE *)(v1574 + 11);
            *(_BYTE *)(v1573 + 12) = *(_BYTE *)(v1574 + 12);
            v1575 = (_QWORD *)((v1571 + 47) & 0xFFFFFFFFFFFFF8);
            v1576 = (_QWORD *)((v1572 + 47) & 0xFFFFFFFFFFFFF8);
            *v1575 = *v1576;
            v1577 = ((unint64_t)v1575 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1578 = ((unint64_t)v1576 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1577 = *(_QWORD *)v1578;
            *(_BYTE *)(v1577 + 8) = *(_BYTE *)(v1578 + 8);
            *(_BYTE *)(v1577 + 9) = *(_BYTE *)(v1578 + 9);
            v1579 = (void *)((v1841 + v1577) & v1553);
            v1580 = (const void *)((v1841 + v1578) & v1553);
            v1581 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1845 + 48);
            swift_bridgeObjectRetain();
            if (v1581(v1580, 1, v1846))
            {
              memcpy(v1579, v1580, __n);
            }
            else
            {
              v1567((size_t)v1579, (size_t)v1580, v1846);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1845 + 56))(v1579, 0, 1, v1846);
            }
            v1582 = (_QWORD *)(((unint64_t)v1579 + v1842) & 0xFFFFFFFFFFFFFFF8);
            v1583 = (_QWORD *)(((unint64_t)v1580 + v1842) & 0xFFFFFFFFFFFFFFF8);
            *v1582 = *v1583;
            v1584 = ((unint64_t)v1582 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1585 = ((unint64_t)v1583 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1586 = *(_QWORD *)v1585;
            *(_BYTE *)(v1584 + 8) = *(_BYTE *)(v1585 + 8);
            *(_QWORD *)v1584 = v1586;
            v1587 = (_QWORD *)(((unint64_t)v1582 + 31) & 0xFFFFFFFFFFFFF8);
            v1588 = (_QWORD *)(((unint64_t)v1583 + 31) & 0xFFFFFFFFFFFFF8);
            *v1587 = *v1588;
            v1589 = ((unint64_t)v1587 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1590 = (uint64_t *)(((unint64_t)v1588 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1591 = v1590[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1069 = v1920;
            if ((v1591 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)v1589 = *(_OWORD *)v1590;
            }
            else
            {
              v1592 = *v1590;
              sub_23AAAE668(*v1590, v1591);
              *(_QWORD *)v1589 = v1592;
              *(_QWORD *)(v1589 + 8) = v1591;
            }
            v1593 = (v1589 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1594 = ((unint64_t)v1590 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1595 = *(_QWORD *)v1594;
            *(_BYTE *)(v1593 + 8) = *(_BYTE *)(v1594 + 8);
            *(_QWORD *)v1593 = v1595;
            *(_BYTE *)(v1593 + 9) = *(_BYTE *)(v1594 + 9);
            v1596 = (v1593 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v1597 = (v1594 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v1598 = *(_DWORD *)v1597;
            *(_BYTE *)(v1596 + 4) = *(_BYTE *)(v1597 + 4);
            *(_DWORD *)v1596 = v1598;
            v1599 = (_QWORD *)((v1593 + 25) & 0xFFFFFFFFFFFFFFF8);
            v1600 = (_QWORD *)((v1594 + 25) & 0xFFFFFFFFFFFFFFF8);
            *v1599 = *v1600;
            v1599[1] = v1600[1];
            v1601 = v1843 + v1561;
            v1602 = v1843 + v1562;
            v1603 = *(_QWORD *)(v1843 + v1562 + 16);
            if (v1603 >= 0xFFFFFFFF)
              LODWORD(v1603) = -1;
            v1604 = v1603 - 1;
            swift_bridgeObjectRetain();
            if (v1604 < 0)
            {
              *(_QWORD *)v1601 = *(_QWORD *)v1602;
              *(_BYTE *)(v1601 + 8) = *(_BYTE *)(v1602 + 8);
              *(_BYTE *)(v1601 + 9) = *(_BYTE *)(v1602 + 9);
              v1617 = *(void **)(v1602 + 16);
              v1618 = v1617;
              *(_QWORD *)(v1601 + 16) = v1617;
              v1619 = *(void **)(v1602 + 24);
              v1620 = v1619;
              *(_QWORD *)(v1601 + 24) = v1619;
              *(_BYTE *)(v1601 + 32) = *(_BYTE *)(v1602 + 32);
              *(_BYTE *)(v1601 + 33) = *(_BYTE *)(v1602 + 33);
              *(_BYTE *)(v1601 + 34) = *(_BYTE *)(v1602 + 34);
              *(_QWORD *)(v1601 + 40) = *(_QWORD *)(v1602 + 40);
              *(_QWORD *)(v1601 + 48) = *(_QWORD *)(v1602 + 48);
              *(_QWORD *)(v1601 + 56) = *(_QWORD *)(v1602 + 56);
              *(_QWORD *)(v1601 + 64) = *(_QWORD *)(v1602 + 64);
              *(_BYTE *)(v1601 + 72) = *(_BYTE *)(v1602 + 72);
              *(_QWORD *)(v1601 + 80) = *(_QWORD *)(v1602 + 80);
              *(_QWORD *)(v1601 + 88) = *(_QWORD *)(v1602 + 88);
              v1936 = *(void **)(v1602 + 96);
              *(_QWORD *)(v1601 + 96) = v1936;
              *(_BYTE *)(v1601 + 104) = *(_BYTE *)(v1602 + 104);
              *(_BYTE *)(v1601 + 105) = *(_BYTE *)(v1602 + 105);
              *(_QWORD *)(v1601 + 112) = *(_QWORD *)(v1602 + 112);
              *(_QWORD *)(v1601 + 120) = *(_QWORD *)(v1602 + 120);
              *(_QWORD *)(v1601 + 128) = *(_QWORD *)(v1602 + 128);
              *(_QWORD *)(v1601 + 136) = *(_QWORD *)(v1602 + 136);
              *(_QWORD *)(v1601 + 144) = *(_QWORD *)(v1602 + 144);
              *(_QWORD *)(v1601 + 152) = *(_QWORD *)(v1602 + 152);
              *(_QWORD *)(v1601 + 160) = *(_QWORD *)(v1602 + 160);
              *(_QWORD *)(v1601 + 168) = *(_QWORD *)(v1602 + 168);
              *(_BYTE *)(v1601 + 176) = *(_BYTE *)(v1602 + 176);
              *(_QWORD *)(v1601 + 184) = *(_QWORD *)(v1602 + 184);
              v1621 = *(_QWORD *)(v1602 + 192);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1622 = v1936;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v1621)
              {
                *(_QWORD *)(v1601 + 192) = v1621;
                *(_QWORD *)(v1601 + 200) = *(_QWORD *)(v1602 + 200);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v1601 + 192) = *(_OWORD *)(v1602 + 192);
              }
              v1547 = v1850;
              v1546 = v1828;
              v1069 = v1920;
              *(_QWORD *)(v1601 + 208) = *(_QWORD *)(v1602 + 208);
              *(_QWORD *)(v1601 + 216) = *(_QWORD *)(v1602 + 216);
              *(_QWORD *)(v1601 + 224) = *(_QWORD *)(v1602 + 224);
              *(_QWORD *)(v1601 + 232) = *(_QWORD *)(v1602 + 232);
              *(_QWORD *)(v1601 + 240) = *(_QWORD *)(v1602 + 240);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              v1605 = *(_OWORD *)v1602;
              v1606 = *(_OWORD *)(v1602 + 16);
              v1607 = *(_OWORD *)(v1602 + 48);
              *(_OWORD *)(v1601 + 32) = *(_OWORD *)(v1602 + 32);
              *(_OWORD *)(v1601 + 48) = v1607;
              *(_OWORD *)v1601 = v1605;
              *(_OWORD *)(v1601 + 16) = v1606;
              v1608 = *(_OWORD *)(v1602 + 64);
              v1609 = *(_OWORD *)(v1602 + 80);
              v1610 = *(_OWORD *)(v1602 + 112);
              *(_OWORD *)(v1601 + 96) = *(_OWORD *)(v1602 + 96);
              *(_OWORD *)(v1601 + 112) = v1610;
              *(_OWORD *)(v1601 + 64) = v1608;
              *(_OWORD *)(v1601 + 80) = v1609;
              v1611 = *(_OWORD *)(v1602 + 128);
              v1612 = *(_OWORD *)(v1602 + 144);
              v1613 = *(_OWORD *)(v1602 + 176);
              *(_OWORD *)(v1601 + 160) = *(_OWORD *)(v1602 + 160);
              *(_OWORD *)(v1601 + 176) = v1613;
              *(_OWORD *)(v1601 + 128) = v1611;
              *(_OWORD *)(v1601 + 144) = v1612;
              v1614 = *(_OWORD *)(v1602 + 192);
              v1615 = *(_OWORD *)(v1602 + 208);
              v1616 = *(_OWORD *)(v1602 + 224);
              *(_QWORD *)(v1601 + 240) = *(_QWORD *)(v1602 + 240);
              *(_OWORD *)(v1601 + 208) = v1615;
              *(_OWORD *)(v1601 + 224) = v1616;
              *(_OWORD *)(v1601 + 192) = v1614;
              v1547 = v1850;
              v1546 = v1828;
            }
            v1739 = (_OWORD *)((v1601 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1740 = (__int128 *)((v1602 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1741 = *v1740;
            *(_OWORD *)((char *)v1739 + 9) = *(__int128 *)((char *)v1740 + 9);
            *v1739 = v1741;
            v1742 = (v1601 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1743 = (v1602 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1744 = *(_OWORD *)v1743;
            *(_BYTE *)(v1742 + 16) = *(_BYTE *)(v1743 + 16);
            *(_OWORD *)v1742 = v1744;
            v1745 = (_QWORD *)((v1601 + 311) & 0xFFFFFFFFFFFFF8);
            v1746 = (v1602 + 311) & 0xFFFFFFFFFFFFF8;
            v1747 = *(_QWORD *)v1746;
            v1746 += 15;
            *v1745 = v1747;
            v1748 = (_QWORD *)(((unint64_t)v1745 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1749 = *(_QWORD *)(v1746 & 0xFFFFFFFFFFFFFFF8);
            v1750 = *(_QWORD *)((v1746 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_23AA7F2D4(v1749, v1750);
            *v1748 = v1749;
            v1748[1] = v1750;
            v1545 = v1950;
            if (v1821)
            {
LABEL_1279:
              v1751 = ((((v1823
                        + ((((((((((v1546 + v1547 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1752 = (_QWORD *)(((unint64_t)v1545 + v1751) & 0xFFFFFFFFFFFFFFF8);
              v1753 = (_QWORD *)(((unint64_t)v1069 + v1751) & 0xFFFFFFFFFFFFFFF8);
              *v1752 = *v1753;
              v1752[1] = v1753[1];
              *(_QWORD *)(((unint64_t)v1752 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1753
                                                                                            + 23) & 0xFFFFFFFFFFFFF8);
              *((_BYTE *)a1 + v1801) = 3;
              swift_bridgeObjectRetain();
              goto LABEL_1280;
            }
LABEL_1210:
            v1547 = __n;
            goto LABEL_1279;
          }
          v1073 = v1834;
          v1089 = ((unint64_t)v1069 + v1834) & v1889;
          v1072 = v1808;
          v1090 = (v1808 + v1089) & v1877;
          v1071 = v1904;
          if (v1824 == v1812)
          {
            if (v1813 == v1824)
            {
              v1070 = (*(uint64_t (**)(unint64_t))(v1835 + 48))((v1808 + v1089) & v1877);
              goto LABEL_1208;
            }
            v1148 = (unint64_t *)((v1840 + v1090) & 0xFFFFFFFFFFFFFFF8);
            if (v1799 > 0x7FFFFFFE)
            {
              v1070 = (*(uint64_t (**)(unint64_t))(v1831 + 48))(((unint64_t)v1148 + v1830) & v1858);
              goto LABEL_1208;
            }
            v1149 = *v1148;
          }
          else
          {
            v1112 = v1090 + v1905;
            if ((v1797 & 0x80000000) == 0)
            {
              v1113 = *(_QWORD *)(v1112 + 8);
              if (v1113 >= 0xFFFFFFFF)
                LODWORD(v1113) = -1;
              v1070 = v1113 + 1;
              goto LABEL_1208;
            }
            v1151 = (v1848 + ((v1907 + v1112) & v1925)) & v88;
            if (v1821 > 0x7FFFFFFD)
            {
              v1070 = (*(uint64_t (**)(uint64_t))(v1845 + 48))(v1151);
              goto LABEL_1208;
            }
            v1149 = *(_QWORD *)(((v1794 + ((v1844 + v1151) & v88)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v1149 >= 0xFFFFFFFF)
            LODWORD(v1149) = -1;
          if ((v1149 + 1) >= 2)
            goto LABEL_1209;
          goto LABEL_1212;
        case 4:
          v1074 = a1;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v1853 + 16))(a1, a2, AssociatedTypeWitness);
          v1075 = 0;
          v1076 = 4;
          goto LABEL_1000;
        case 5:
          v1074 = a1;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v1853 + 16))(a1, a2, AssociatedTypeWitness);
          v1075 = 0;
          v1076 = 5;
          goto LABEL_1000;
        case 6:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v1853 + 16))(a1, a2, AssociatedTypeWitness);
          v1077 = (void *)(((unint64_t)a1 + v1788) & v1051);
          v1078 = (const void *)(((unint64_t)a2 + v1788) & v1051);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1789 + 48))(v1078, 1, v1882))
          {
            memcpy(v1077, v1078, v1785);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v1789 + 16))(v1077, v1078, v1882);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1789 + 56))(v1077, 0, 1, v1882);
          }
          v1075 = 0;
          *((_BYTE *)a1 + v1801) = 6;
          goto LABEL_1281;
        case 7:
          v1074 = a1;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v1853 + 16))(a1, a2, AssociatedTypeWitness);
          v1075 = 0;
          v1076 = 7;
LABEL_1000:
          *((_BYTE *)v1074 + v1801) = v1076;
          goto LABEL_1281;
        default:
          if (v1801 <= 3)
            v576 = v1801;
          else
            v576 = 4;
          __asm { BR              X13 }
          return result;
      }
    case 0x1Cu:
      v225 = *((unsigned __int8 *)a2 + v1879);
      if (v225 >= 2)
      {
        if (v1879 <= 3)
          v226 = v1879;
        else
          v226 = 4;
        __asm { BR              X12 }
      }
      v209 = v78;
      v577 = v225 == 1;
      if (v225 == 1)
        v578 = v1851;
      else
        v578 = v1853;
      if (v225 == 1)
        v579 = v1852;
      else
        v579 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v578 + 16))(a1, a2, v579);
      *((_BYTE *)a1 + v1879) = v577;
      *((_BYTE *)a1 + v1909) = *((_BYTE *)a2 + v1909);
      if (v209 > 3)
        goto LABEL_638;
      v580 = ((1 << (8 * v209)) + 5) >> (8 * v209);
      if (v580 > 0xFFD8)
      {
        v545 = 28;
        goto LABEL_722;
      }
      if (v580 <= 0xD8)
      {
LABEL_638:
        v542 = 28;
        goto LABEL_716;
      }
      v544 = 28;
      goto LABEL_720;
    case 0x1Du:
      v227 = *((unsigned __int8 *)a2 + v1879);
      if (v227 >= 2)
      {
        if (v1879 <= 3)
          v228 = v1879;
        else
          v228 = 4;
        __asm { BR              X12 }
      }
      v249 = v78;
      v581 = v227 == 1;
      if (v227 == 1)
        v582 = v1851;
      else
        v582 = v1853;
      (*(void (**)(_QWORD *))(v582 + 16))(a1);
      *((_BYTE *)a1 + v1879) = v581;
      if (v249 > 3)
        goto LABEL_647;
      v583 = ((1 << (8 * v249)) + 5) >> (8 * v249);
      if (v583 > 0xFFD8)
      {
        v491 = 29;
        goto LABEL_734;
      }
      if (v583 <= 0xD8)
      {
LABEL_647:
        v490 = 29;
        goto LABEL_728;
      }
      LOWORD(v491) = 29;
      goto LABEL_732;
    case 0x1Eu:
      v229 = *((unsigned __int8 *)a2 + v1879);
      if (v229 >= 2)
      {
        if (v1879 <= 3)
          v230 = v1879;
        else
          v230 = 4;
        __asm { BR              X12 }
      }
      v249 = v78;
      v584 = v229 == 1;
      if (v229 == 1)
        v585 = v1851;
      else
        v585 = v1853;
      (*(void (**)(_QWORD *))(v585 + 16))(a1);
      *((_BYTE *)a1 + v1879) = v584;
      if (v249 > 3)
        goto LABEL_656;
      v586 = ((1 << (8 * v249)) + 5) >> (8 * v249);
      if (v586 > 0xFFD8)
      {
        v491 = 30;
        goto LABEL_734;
      }
      if (v586 <= 0xD8)
      {
LABEL_656:
        v490 = 30;
        goto LABEL_728;
      }
      LOWORD(v491) = 30;
      goto LABEL_732;
    case 0x1Fu:
      v231 = *((unsigned __int8 *)a2 + v1879);
      if (v231 >= 2)
      {
        if (v1879 <= 3)
          v232 = v1879;
        else
          v232 = 4;
        __asm { BR              X12 }
      }
      v268 = ~v1875;
      v499 = v78;
      v587 = v231 == 1;
      if (v231 == 1)
        v588 = v1851;
      else
        v588 = v1853;
      if (v231 == 1)
        v589 = v1852;
      else
        v589 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v588 + 16))(a1, a2, v589);
      *((_BYTE *)a1 + v1879) = v587;
      v590 = ((unint64_t)a1 + v1847) & v268;
      v591 = *(unsigned __int8 *)((((unint64_t)a2 + v1847) & v268) + v1879);
      if (v591 >= 2)
      {
        if (v1879 <= 3)
          v592 = v1879;
        else
          v592 = 4;
        __asm { BR              X12 }
      }
      v615 = v591 == 1;
      if (v591 == 1)
        v616 = v1851;
      else
        v616 = v1853;
      (*(void (**)(unint64_t))(v616 + 16))(v590);
      *(_BYTE *)(v590 + v1879) = v615;
      if (v499 > 3)
        goto LABEL_748;
      v617 = ((1 << (8 * v499)) + 5) >> (8 * v499);
      if (v617 > 0xFFD8)
      {
        v520 = 31;
LABEL_755:
        *(_DWORD *)((char *)a1 + v499) = v520;
      }
      else if (v617 <= 0xD8)
      {
LABEL_748:
        v517 = 31;
LABEL_749:
        *((_BYTE *)a1 + v499) = v517;
      }
      else
      {
        v519 = 31;
LABEL_753:
        *(_WORD *)((char *)a1 + v499) = v519;
      }
      return a1;
    case 0x20u:
      v233 = *((unsigned __int8 *)a2 + v1879);
      if (v233 >= 2)
      {
        if (v1879 <= 3)
          v234 = v1879;
        else
          v234 = 4;
        __asm { BR              X12 }
      }
      v249 = v78;
      v593 = v233 == 1;
      if (v233 == 1)
        v594 = v1851;
      else
        v594 = v1853;
      (*(void (**)(_QWORD *))(v594 + 16))(a1);
      *((_BYTE *)a1 + v1879) = v593;
      if (v249 > 3)
        goto LABEL_676;
      v595 = ((1 << (8 * v249)) + 5) >> (8 * v249);
      if (v595 > 0xFFD8)
      {
        v491 = 32;
        goto LABEL_734;
      }
      if (v595 <= 0xD8)
      {
LABEL_676:
        v490 = 32;
        goto LABEL_728;
      }
      LOWORD(v491) = 32;
      goto LABEL_732;
    case 0x21u:
      v235 = *((unsigned __int8 *)a2 + v1879);
      if (v235 >= 2)
      {
        if (v1879 <= 3)
          v236 = v1879;
        else
          v236 = 4;
        __asm { BR              X12 }
      }
      v249 = v78;
      v596 = v235 == 1;
      if (v235 == 1)
        v597 = v1851;
      else
        v597 = v1853;
      (*(void (**)(_QWORD *))(v597 + 16))(a1);
      *((_BYTE *)a1 + v1879) = v596;
      if (v249 > 3)
        goto LABEL_685;
      v598 = ((1 << (8 * v249)) + 5) >> (8 * v249);
      if (v598 > 0xFFD8)
      {
        v491 = 33;
        goto LABEL_734;
      }
      if (v598 <= 0xD8)
      {
LABEL_685:
        v490 = 33;
        goto LABEL_728;
      }
      LOWORD(v491) = 33;
      goto LABEL_732;
    case 0x22u:
      v237 = *((unsigned __int8 *)a2 + v1879);
      if (v237 >= 2)
      {
        if (v1879 <= 3)
          v238 = v1879;
        else
          v238 = 4;
        __asm { BR              X12 }
      }
      v249 = v78;
      v599 = v237 == 1;
      if (v237 == 1)
        v600 = v1851;
      else
        v600 = v1853;
      (*(void (**)(_QWORD *))(v600 + 16))(a1);
      *((_BYTE *)a1 + v1879) = v599;
      if (v249 > 3)
        goto LABEL_694;
      v601 = ((1 << (8 * v249)) + 5) >> (8 * v249);
      if (v601 > 0xFFD8)
      {
        v491 = 34;
        goto LABEL_734;
      }
      if (v601 <= 0xD8)
      {
LABEL_694:
        v490 = 34;
        goto LABEL_728;
      }
      LOWORD(v491) = 34;
      goto LABEL_732;
    case 0x23u:
      v239 = *((unsigned __int8 *)a2 + v1879);
      if (v239 >= 2)
      {
        if (v1879 <= 3)
          v240 = v1879;
        else
          v240 = 4;
        __asm { BR              X12 }
      }
      v249 = v78;
      v602 = v239 == 1;
      if (v239 == 1)
        v603 = v1851;
      else
        v603 = v1853;
      (*(void (**)(_QWORD *))(v603 + 16))(a1);
      *((_BYTE *)a1 + v1879) = v602;
      if (v249 > 3)
        goto LABEL_703;
      v604 = ((1 << (8 * v249)) + 5) >> (8 * v249);
      if (v604 > 0xFFD8)
      {
        v491 = 35;
        goto LABEL_734;
      }
      if (v604 <= 0xD8)
      {
LABEL_703:
        v490 = 35;
        goto LABEL_728;
      }
      LOWORD(v491) = 35;
      goto LABEL_732;
    case 0x24u:
      v1779 = v78;
      v1760 = ~v40;
      v241 = ~v1855;
      v1862 = ~v39;
      v1897 = v37;
      v1771 = ((((v1826 + ((v39 + 8 + (v1869 & 0xFFFFFFFFFFFFFFF8)) & ~v39)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v1853 + 48))(a2, 1, AssociatedTypeWitness))
      {
        v242 = v1806;
        memcpy(a1, a2, v1806);
        v243 = v1905;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v1853 + 16))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v1853 + 56))(a1, 0, 1, AssociatedTypeWitness);
        v243 = v1905;
        v242 = v1806;
      }
      v270 = (_QWORD *)(((unint64_t)a1 + v242 + 7) & 0xFFFFFFFFFFFFF8);
      v271 = (_QWORD *)(((unint64_t)a2 + v242 + 7) & 0xFFFFFFFFFFFFFFF8);
      *v270 = *v271;
      v272 = ((unint64_t)v270 + 15) & 0xFFFFFFFFFFFFFFF8;
      v273 = ((unint64_t)v271 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v272 = *(_QWORD *)v273;
      *(_BYTE *)(v272 + 8) = *(_BYTE *)(v273 + 8);
      v274 = (char *)((v272 + v1937 + 9) & v85);
      v275 = (const void *)((v273 + v1937 + 9) & v85);
      if (v1813 == v1824)
      {
        v276 = (*(uint64_t (**)(unint64_t))(v1835 + 48))((v273 + v1937 + 9) & v85);
        v277 = v1852;
      }
      else
      {
        v278 = (uint64_t *)(((unint64_t)v275 + v1840) & 0xFFFFFFFFFFFFFFF8);
        v277 = v1852;
        if (v1799 <= 0x7FFFFFFE)
        {
          v279 = *v278;
          if ((unint64_t)*v278 >= 0xFFFFFFFF)
            LODWORD(v279) = -1;
          if ((v279 + 1) >= 2)
            goto LABEL_384;
          goto LABEL_386;
        }
        v276 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v1831 + 48))(((unint64_t)v278 + v1830) & v241, v1795, v1832);
      }
      if (v276)
      {
LABEL_384:
        memcpy(v274, v275, v243);
        goto LABEL_387;
      }
      v278 = (uint64_t *)(((unint64_t)v275 + v1840) & 0xFFFFFFFFFFFFFFF8);
LABEL_386:
      (*(void (**)(char *, const void *, uint64_t))(v1835 + 16))(v274, v275, v1836);
      v368 = (_QWORD *)((unint64_t)&v274[v1840] & 0xFFFFFFFFFFFFFFF8);
      *v368 = *v278;
      v369 = ((unint64_t)v368 + v1830) & v241;
      v370 = ((unint64_t)v278 + v1830) & v241;
      v371 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1831 + 16);
      swift_bridgeObjectRetain();
      v371(v369, v370, v1832);
      v372 = (_QWORD *)((v1825 + v369) & 0xFFFFFFFFFFFFF8);
      v373 = (_QWORD *)((v1825 + v370) & 0xFFFFFFFFFFFFF8);
      *v372 = *v373;
      v374 = (_QWORD *)(((unint64_t)v372 + 15) & 0xFFFFFFFFFFFFFFF8);
      v375 = (_QWORD *)(((unint64_t)v373 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v374 = *v375;
      v374[1] = v375[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_387:
      v376 = (_BYTE *)(((unint64_t)v275 + v243) | 1);
      v377 = (_BYTE *)(((unint64_t)v275 + v243) | 2);
      v378 = (uint64_t)v275 + v243 + 10;
      v380 = (uint64_t)v275 + v243 + 34;
      v379 = *((_BYTE *)v275 + v243);
      v381 = (_BYTE *)((unint64_t)&v274[v243] | 1);
      v382 = (_BYTE *)((unint64_t)&v274[v243] | 2);
      v383 = (uint64_t)&v274[v243 + 10];
      v384 = &v274[v243];
      *v384 = v379;
      *v381 = *v376;
      v385 = ~v1805;
      *v382 = *v377;
      v386 = v383 & 0xFFFFFFFFFFFFFFF8;
      v387 = *(void **)(v378 & 0xFFFFFFFFFFFFFFF8);
      v388 = *(void **)((v378 & 0xFFFFFFFFFFFFFFF8) + 8);
      v389 = *(_BYTE *)((v378 & 0xFFFFFFFFFFFFFFF8) + 16);
      sub_23AAAE478(v387, v388, v389);
      *(_QWORD *)v386 = v387;
      *(_QWORD *)(v386 + 8) = v388;
      *(_BYTE *)(v386 + 16) = v389;
      v390 = (unint64_t)(v384 + 34) & 0xFFFFFFFFFFFFFFF8;
      v391 = v380 & 0xFFFFFFFFFFFFFFF8;
      v392 = *(_QWORD *)(v391 + 16) >> 60;
      if (!(4 * (v392 & 3)) || ((v392 >> 2) & 0xFFFFFFF3 | (4 * (v392 & 3))) == 0xF)
      {
        v398 = (uint64_t *)(v391 + 8);
        *(_QWORD *)v390 = *(_QWORD *)v391;
        v399 = *(_QWORD *)(v391 + 16);
        v396 = v1782;
        if (v399 >> 60 == 15)
        {
          *(_OWORD *)(v390 + 8) = *(_OWORD *)v398;
        }
        else
        {
          v400 = *v398;
          sub_23AAAE668(*v398, *(_QWORD *)(v391 + 16));
          *(_QWORD *)(v390 + 8) = v400;
          *(_QWORD *)(v390 + 16) = v399;
        }
        v397 = v1802;
        v401 = *(_OWORD *)(v391 + 24);
        *(_BYTE *)(v390 + 40) = *(_BYTE *)(v391 + 40);
        *(_OWORD *)(v390 + 24) = v401;
        *(_QWORD *)(v390 + 48) = *(_QWORD *)(v391 + 48);
      }
      else
      {
        v393 = *(_OWORD *)v391;
        v394 = *(_OWORD *)(v391 + 16);
        v395 = *(_OWORD *)(v391 + 32);
        *(_QWORD *)(v390 + 48) = *(_QWORD *)(v391 + 48);
        *(_OWORD *)(v390 + 16) = v394;
        *(_OWORD *)(v390 + 32) = v395;
        *(_OWORD *)v390 = v393;
        v396 = v1782;
        v397 = v1802;
      }
      v402 = (void **)((v391 + 63) & 0xFFFFFFFFFFFFFFF8);
      v403 = *v402;
      v404 = (_QWORD *)((v390 + 63) & 0xFFFFFFFFFFFFF8);
      *v404 = *v402;
      *(_QWORD *)(((unint64_t)v404 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v402 + 15) & 0xFFFFFFFFFFFFF8);
      v405 = (void *)(((unint64_t)a1 + v397) & v385);
      v406 = (const void *)(((unint64_t)a2 + v397) & v385);
      v407 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1851 + 48);
      v408 = v403;
      if (v407(v406, 1, v277))
      {
        memcpy(v405, v406, v1781);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v1851 + 16))(v405, v406, v277);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1851 + 56))(v405, 0, 1, v277);
      }
      v409 = (_QWORD *)(((unint64_t)v405 + v396) & 0xFFFFFFFFFFFFF8);
      v410 = (_QWORD *)(((unint64_t)v406 + v396) & 0xFFFFFFFFFFFFFFF8);
      *v409 = *v410;
      v411 = ((unint64_t)v409 + 15) & 0xFFFFFFFFFFFFFFF8;
      v412 = ((unint64_t)v410 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v411 = *(_QWORD *)v412;
      *(_BYTE *)(v411 + 8) = *(_BYTE *)(v412 + 8);
      v413 = (void *)((v1783 + v411) & v1760);
      v414 = (const void *)((v1783 + v412) & v1760);
      if (v1814 == v1829)
      {
        v415 = (*(uint64_t (**)(unint64_t))(v1837 + 48))((v1783 + v412) & v1760);
      }
      else
      {
        v416 = v1869;
        v417 = (uint64_t *)(((unint64_t)v414 + v1869) & 0xFFFFFFFFFFFFFFF8);
        if (v1800 <= 0x7FFFFFFE)
        {
          v418 = *v417;
          if ((unint64_t)*v417 >= 0xFFFFFFFF)
            LODWORD(v418) = -1;
          if ((v418 + 1) >= 2)
            goto LABEL_406;
          goto LABEL_408;
        }
        v415 = (*(uint64_t (**)(unint64_t))(v1897 + 48))(((unint64_t)v417 + v1839) & v1862);
      }
      v416 = v1869;
      if (v415)
      {
LABEL_406:
        v419 = v1771;
        memcpy(v413, v414, v1771);
LABEL_409:
        v429 = (uint64_t)v414 + v419 + 10;
        v430 = (uint64_t)v414 + v419 + 34;
        *((_BYTE *)v413 + v419) = *((_BYTE *)v414 + v419);
        v431 = (uint64_t)v413 + v419 + 34;
        *(_BYTE *)(((unint64_t)v413 + v419) | 1) = *(_BYTE *)(((unint64_t)v414 + v419) | 1);
        *(_BYTE *)(((unint64_t)v413 + v419) | 2) = *(_BYTE *)(((unint64_t)v414 + v419) | 2);
        v432 = ((unint64_t)v413 + v419 + 10) & 0xFFFFFFFFFFFFFFF8;
        v433 = *(void **)(v429 & 0xFFFFFFFFFFFFFFF8);
        v434 = *(void **)((v429 & 0xFFFFFFFFFFFFFFF8) + 8);
        v435 = *(_BYTE *)((v429 & 0xFFFFFFFFFFFFFFF8) + 16);
        sub_23AAAE478(v433, v434, v435);
        *(_QWORD *)v432 = v433;
        *(_QWORD *)(v432 + 8) = v434;
        *(_BYTE *)(v432 + 16) = v435;
        v436 = v431 & 0xFFFFFFFFFFFFFFF8;
        v437 = v430 & 0xFFFFFFFFFFFFFFF8;
        v438 = *(_QWORD *)(v437 + 16) >> 60;
        if (!(4 * (v438 & 3)) || ((v438 >> 2) & 0xFFFFFFF3 | (4 * (v438 & 3))) == 0xF)
        {
          v443 = (uint64_t *)(v437 + 8);
          *(_QWORD *)v436 = *(_QWORD *)v437;
          v444 = *(_QWORD *)(v437 + 16);
          if (v444 >> 60 == 15)
          {
            *(_OWORD *)(v436 + 8) = *(_OWORD *)v443;
          }
          else
          {
            v445 = *v443;
            sub_23AAAE668(*v443, *(_QWORD *)(v437 + 16));
            *(_QWORD *)(v436 + 8) = v445;
            *(_QWORD *)(v436 + 16) = v444;
          }
          v442 = v1803;
          v446 = *(_OWORD *)(v437 + 24);
          *(_BYTE *)(v436 + 40) = *(_BYTE *)(v437 + 40);
          *(_OWORD *)(v436 + 24) = v446;
          *(_QWORD *)(v436 + 48) = *(_QWORD *)(v437 + 48);
        }
        else
        {
          v439 = *(_OWORD *)v437;
          v440 = *(_OWORD *)(v437 + 16);
          v441 = *(_OWORD *)(v437 + 32);
          *(_QWORD *)(v436 + 48) = *(_QWORD *)(v437 + 48);
          *(_OWORD *)(v436 + 16) = v440;
          *(_OWORD *)(v436 + 32) = v441;
          *(_OWORD *)v436 = v439;
          v442 = v1803;
        }
        v447 = (_QWORD *)((v436 + 63) & 0xFFFFFFFFFFFFF8);
        v448 = (void **)((v437 + 63) & 0xFFFFFFFFFFFFFFF8);
        v449 = *v448;
        *v447 = *v448;
        *(_QWORD *)(((unint64_t)v447 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v448 + 15) & 0xFFFFFFFFFFFFF8);
        *((_BYTE *)v405 + v442) = *((_BYTE *)v406 + v442);
        v450 = ((unint64_t)v405 + v442) & 0xFFFFFFFFFFFFFFF8;
        v451 = ((unint64_t)v406 + v442) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v450 + 8) = *(_QWORD *)(v451 + 8);
        v452 = (_OWORD *)((v450 + 23) & 0xFFFFFFFFFFFFFFF8);
        v453 = (_OWORD *)((v451 + 23) & 0xFFFFFFFFFFFFFFF8);
        *v452 = *v453;
        v454 = ((unint64_t)v452 + 23) & 0xFFFFFFFFFFFFFFF8;
        v455 = ((unint64_t)v453 + 23) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v454 = *(_QWORD *)v455;
        *(_BYTE *)(v454 + 8) = *(_BYTE *)(v455 + 8);
        *(_QWORD *)(((unint64_t)v452 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v453 + 39) & 0xFFFFFFFFFFFFF8);
        v456 = v449;
        swift_bridgeObjectRetain();
        v207 = v1779;
        if (v1779 <= 3)
        {
          v457 = ((1 << (8 * v1779)) + 5) >> (8 * v1779);
          if (v457 > 0xFFD8)
          {
            v366 = 36;
            goto LABEL_1289;
          }
          if (v457 > 0xD8)
          {
            v261 = 36;
            goto LABEL_1287;
          }
        }
        v208 = 36;
LABEL_1283:
        *((_BYTE *)a1 + v207) = v208;
        return a1;
      }
      v417 = (uint64_t *)(((unint64_t)v414 + v1869) & 0xFFFFFFFFFFFFFFF8);
LABEL_408:
      v420 = v416;
      (*(void (**)(void *, const void *, uint64_t))(v1837 + 16))(v413, v414, v1838);
      v421 = (_QWORD *)(((unint64_t)v413 + v420) & 0xFFFFFFFFFFFFFFF8);
      *v421 = *v417;
      v422 = ((unint64_t)v421 + v1839) & v1862;
      v423 = ((unint64_t)v417 + v1839) & v1862;
      v424 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1897 + 16);
      swift_bridgeObjectRetain();
      v424(v422, v423, v1833);
      v425 = (_QWORD *)((v1826 + v422) & 0xFFFFFFFFFFFFF8);
      v426 = (_QWORD *)((v1826 + v423) & 0xFFFFFFFFFFFFF8);
      *v425 = *v426;
      v427 = (_QWORD *)(((unint64_t)v425 + 15) & 0xFFFFFFFFFFFFFFF8);
      v428 = (_QWORD *)(((unint64_t)v426 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v427 = *v428;
      v427[1] = v428[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v419 = v1771;
      goto LABEL_409;
    case 0x25u:
      v244 = *((unsigned __int8 *)a2 + v1879);
      if (v244 >= 2)
      {
        if (v1879 <= 3)
          v245 = v1879;
        else
          v245 = 4;
        __asm { BR              X12 }
      }
      v209 = v78;
      v605 = v244 == 1;
      if (v244 == 1)
        v606 = v1851;
      else
        v606 = v1853;
      if (v244 == 1)
        v607 = v1852;
      else
        v607 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v606 + 16))(a1, a2, v607);
      *((_BYTE *)a1 + v1879) = v605;
      *((_BYTE *)a1 + v1909) = *((_BYTE *)a2 + v1909);
      if (v209 > 3)
        goto LABEL_715;
      v608 = ((1 << (8 * v209)) + 5) >> (8 * v209);
      if (v608 > 0xFFD8)
      {
        v545 = 37;
LABEL_722:
        *(_DWORD *)((char *)a1 + v209) = v545;
      }
      else if (v608 <= 0xD8)
      {
LABEL_715:
        v542 = 37;
LABEL_716:
        *((_BYTE *)a1 + v209) = v542;
      }
      else
      {
        v544 = 37;
LABEL_720:
        *(_WORD *)((char *)a1 + v209) = v544;
      }
      return a1;
    case 0x26u:
      v246 = *((unsigned __int8 *)a2 + v1879);
      if (v246 >= 2)
      {
        if (v1879 <= 3)
          v247 = v1879;
        else
          v247 = 4;
        __asm { BR              X12 }
      }
      v249 = v78;
      v609 = v246 == 1;
      if (v246 == 1)
        v610 = v1851;
      else
        v610 = v1853;
      (*(void (**)(_QWORD *))(v610 + 16))(a1);
      *((_BYTE *)a1 + v1879) = v609;
      if (v249 > 3)
        goto LABEL_727;
      v611 = ((1 << (8 * v249)) + 5) >> (8 * v249);
      if (v611 > 0xFFD8)
      {
        v491 = 38;
LABEL_734:
        *(_DWORD *)((char *)a1 + v249) = v491;
      }
      else if (v611 <= 0xD8)
      {
LABEL_727:
        v490 = 38;
LABEL_728:
        *((_BYTE *)a1 + v249) = v490;
      }
      else
      {
        LOWORD(v491) = 38;
LABEL_732:
        *(_WORD *)((char *)a1 + v249) = v491;
      }
      return a1;
    default:
      if (v78 > 3)
        goto LABEL_120;
      v91 = ((1 << (8 * v78)) + 5) >> (8 * v78);
      v92 = 2;
      if (v91 > 0xFFD8)
        v92 = 4;
      if (v91 <= 0xD8)
LABEL_120:
        v92 = 1;
      memcpy(a1, (const void *)~v1915, v92 + v78);
      return a1;
  }
}

_QWORD *sub_23AB97574(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  size_t v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  size_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  size_t v65;
  uint64_t v66;
  size_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  size_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned __int8 *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  size_t v91;
  uint64_t v92;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  size_t v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  size_t v108;
  int v109;
  void (*v110)(_QWORD *, uint64_t);
  unint64_t v111;
  size_t v112;
  void (*v113)(size_t, uint64_t);
  size_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  BOOL v120;
  void (*v121)(unint64_t, uint64_t);
  unint64_t v122;
  unint64_t v123;
  void (*v124)(unint64_t, uint64_t);
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(uint64_t, uint64_t);
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  size_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  BOOL v177;
  unint64_t v178;
  unint64_t v179;
  int v180;
  uint64_t *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  BOOL v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  void (*v198)(void);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  size_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void (*v212)(_QWORD *, uint64_t);
  size_t v213;
  void (*v214)(size_t, uint64_t);
  size_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  unint64_t v221;
  int v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t (*v227)(unint64_t, uint64_t, uint64_t);
  unint64_t v228;
  size_t v229;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  void (*v236)(unint64_t, uint64_t);
  size_t v237;
  unint64_t v238;
  void (*v239)(_QWORD *, uint64_t);
  unint64_t v240;
  void (*v241)(unint64_t, uint64_t);
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  void *v246;
  uint64_t v247;
  unint64_t v248;
  int v249;
  unint64_t v250;
  uint64_t (*v251)(unint64_t);
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  void (*v259)(unint64_t, uint64_t);
  size_t v260;
  uint64_t v261;
  void (*v262)(uint64_t, uint64_t);
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  void *v267;
  uint64_t v268;
  size_t v269;
  void (*v270)(unint64_t, uint64_t);
  unint64_t v271;
  int v272;
  void (*v273)(unint64_t, uint64_t);
  unint64_t v274;
  int v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  int v279;
  void (*v280)(unint64_t, uint64_t);
  unint64_t v281;
  int v282;
  int v283;
  uint64_t v284;
  unint64_t v285;
  _QWORD *v286;
  unsigned int v287;
  unsigned int v288;
  uint64_t v289;
  unsigned int v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  unsigned int v296;
  uint64_t v297;
  unsigned int v298;
  uint64_t v299;
  unsigned int v300;
  uint64_t v301;
  int v302;
  size_t v303;
  uint64_t v304;
  int v305;
  size_t v306;
  unsigned int v307;
  size_t v308;
  uint64_t v309;
  size_t v310;
  uint64_t v311;
  void (*v312)(unint64_t, unint64_t, uint64_t);
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  unint64_t v318;
  unint64_t v319;
  void (*v320)(unint64_t, unint64_t, uint64_t);
  _QWORD *v321;
  _QWORD *v322;
  _QWORD *v323;
  _QWORD *v324;
  _QWORD *v325;
  size_t v326;
  size_t v327;
  uint64_t v328;
  int v329;
  size_t v330;
  size_t v331;
  void (*v332)(size_t, size_t, uint64_t);
  size_t v333;
  size_t v334;
  _BYTE *v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  _QWORD *v340;
  _QWORD *v341;
  unint64_t v342;
  unint64_t v343;
  void *v344;
  const void *v345;
  unsigned int (*v346)(const void *, uint64_t, uint64_t);
  uint64_t v347;
  uint64_t v348;
  void (*v349)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v350;
  unint64_t v351;
  _QWORD *v352;
  _QWORD *v353;
  unint64_t v354;
  unint64_t v355;
  void (*v356)(unint64_t, unint64_t, uint64_t);
  _QWORD *v357;
  _QWORD *v358;
  _QWORD *v359;
  _QWORD *v360;
  _QWORD *v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  int v365;
  unint64_t v366;
  unint64_t v367;
  void (*v368)(unint64_t, unint64_t, uint64_t);
  unint64_t v369;
  unint64_t v370;
  _BYTE *v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  _QWORD *v376;
  _QWORD *v377;
  unint64_t v378;
  unint64_t v379;
  void *v380;
  const void *v381;
  unsigned int (*v382)(const void *, uint64_t, uint64_t);
  unsigned int v383;
  uint64_t v384;
  unsigned int v385;
  uint64_t v386;
  unsigned int v387;
  uint64_t v388;
  unsigned int v389;
  uint64_t v390;
  unsigned int v391;
  uint64_t v392;
  unsigned int v393;
  uint64_t v394;
  unsigned int v395;
  uint64_t v396;
  uint64_t *v397;
  unint64_t v398;
  unsigned int v399;
  uint64_t v400;
  unsigned int v401;
  uint64_t v402;
  unsigned int v403;
  uint64_t v404;
  unsigned int v405;
  uint64_t v406;
  unsigned int v407;
  uint64_t v408;
  unint64_t v409;
  unsigned int v410;
  uint64_t v411;
  unsigned int v412;
  uint64_t v413;
  unsigned int v414;
  uint64_t v415;
  unsigned int v416;
  uint64_t v417;
  unsigned int v418;
  uint64_t v419;
  unsigned int v420;
  uint64_t v421;
  unsigned int v422;
  uint64_t v423;
  unsigned int v424;
  uint64_t v425;
  unsigned int v426;
  uint64_t v427;
  uint64_t v428;
  size_t v429;
  unsigned int v430;
  uint64_t v431;
  unsigned int v432;
  uint64_t v433;
  unsigned int v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t v437;
  unint64_t v438;
  int v439;
  __int128 v440;
  unsigned int v441;
  unsigned int v442;
  unsigned int v443;
  unsigned int v444;
  unsigned int v445;
  unsigned int v446;
  _QWORD *v447;
  _QWORD *v448;
  unint64_t v449;
  unint64_t v450;
  char *v451;
  const void *v452;
  int v453;
  uint64_t *v454;
  uint64_t v455;
  _QWORD *v456;
  _QWORD *v457;
  unint64_t v458;
  unint64_t v459;
  uint64_t v460;
  _QWORD *v461;
  _QWORD *v462;
  unint64_t v463;
  uint64_t *v464;
  unint64_t v465;
  _QWORD *v466;
  _QWORD *v467;
  unint64_t v468;
  unint64_t v469;
  uint64_t v470;
  _QWORD *v471;
  _QWORD *v472;
  unint64_t v473;
  uint64_t *v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  unint64_t v478;
  uint64_t v479;
  unint64_t v480;
  unint64_t v481;
  int v482;
  _QWORD *v483;
  _QWORD *v484;
  unint64_t v485;
  __int128 *v486;
  unint64_t v487;
  int v488;
  _DWORD *v489;
  __int128 v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  uint64_t v502;
  unint64_t v503;
  unint64_t v504;
  uint64_t v505;
  unint64_t v506;
  unint64_t v507;
  int v508;
  _QWORD *v509;
  _QWORD *v510;
  unint64_t v511;
  __int128 *v512;
  unint64_t v513;
  int v514;
  _DWORD *v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  void *v528;
  id v529;
  void *v530;
  id v531;
  uint64_t v532;
  id v533;
  void *v534;
  id v535;
  void *v536;
  id v537;
  uint64_t v538;
  id v539;
  size_t v540;
  unint64_t v541;
  unint64_t v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t v545;
  void (*v546)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v547;
  _QWORD *v548;
  _QWORD *v549;
  unint64_t v550;
  unint64_t v551;
  void (*v552)(unint64_t, unint64_t, uint64_t);
  _QWORD *v553;
  _QWORD *v554;
  _QWORD *v555;
  _QWORD *v556;
  _QWORD *v557;
  unint64_t v558;
  unint64_t v559;
  uint64_t v560;
  int v561;
  unint64_t v562;
  unint64_t v563;
  void (*v564)(unint64_t, unint64_t, uint64_t);
  unint64_t v565;
  unint64_t v566;
  _BYTE *v567;
  unint64_t v568;
  unint64_t v569;
  unint64_t v570;
  unint64_t v571;
  _QWORD *v572;
  _QWORD *v573;
  unint64_t v574;
  unint64_t v575;
  void *v576;
  const void *v577;
  unsigned int (*v578)(const void *, uint64_t, uint64_t);
  size_t v579;
  _QWORD *v580;
  unint64_t v581;
  unint64_t v582;
  void (*v583)(unint64_t, unint64_t, uint64_t);
  _QWORD *v584;
  _QWORD *v585;
  _QWORD *v586;
  _QWORD *v587;
  _BYTE *v588;
  _BYTE *v589;
  uint64_t v590;
  char v591;
  uint64_t v592;
  _BYTE *v593;
  _BYTE *v594;
  uint64_t v595;
  char *v596;
  unint64_t v597;
  void *v598;
  void *v599;
  char v600;
  unint64_t v601;
  unint64_t v602;
  uint64_t v603;
  __int128 v604;
  __int128 v605;
  __int128 v606;
  uint64_t v607;
  _QWORD *v608;
  uint64_t *v609;
  unint64_t v610;
  uint64_t v611;
  __int128 v612;
  void **v613;
  void *v614;
  _QWORD *v615;
  void *v616;
  const void *v617;
  unsigned int (*v618)(const void *, uint64_t, uint64_t);
  id v619;
  _QWORD *v620;
  _QWORD *v621;
  unint64_t v622;
  unint64_t v623;
  void *v624;
  const void *v625;
  int v626;
  uint64_t *v627;
  uint64_t v628;
  _QWORD *v629;
  unint64_t v630;
  unint64_t v631;
  void (*v632)(unint64_t, unint64_t, uint64_t);
  _QWORD *v633;
  _QWORD *v634;
  _QWORD *v635;
  _QWORD *v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  unint64_t v640;
  void *v641;
  void *v642;
  char v643;
  unint64_t v644;
  unint64_t v645;
  uint64_t v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  uint64_t *v650;
  unint64_t v651;
  uint64_t v652;
  __int128 v653;
  _QWORD *v654;
  void **v655;
  void *v656;
  unint64_t v657;
  unint64_t v658;
  _OWORD *v659;
  _OWORD *v660;
  unint64_t v661;
  unint64_t v662;
  id v663;
  unsigned int v664;
  _QWORD *v665;
  _QWORD *v666;
  unint64_t v667;
  unint64_t v668;
  uint64_t v669;
  _QWORD *v670;
  _QWORD *v671;
  unint64_t v672;
  uint64_t *v673;
  unint64_t v674;
  uint64_t v675;
  unint64_t v676;
  unint64_t v677;
  uint64_t v678;
  unint64_t v679;
  unint64_t v680;
  int v681;
  _QWORD *v682;
  _QWORD *v683;
  unint64_t v684;
  __int128 *v685;
  unint64_t v686;
  int v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  void *v700;
  id v701;
  void *v702;
  id v703;
  void *v704;
  uint64_t v705;
  id v706;
  _OWORD *v707;
  __int128 *v708;
  __int128 v709;
  unint64_t v710;
  unint64_t v711;
  __int128 v712;
  _QWORD *v713;
  uint64_t v714;
  uint64_t v715;
  _QWORD *v716;
  uint64_t v717;
  unint64_t v718;
  unsigned int v719;
  _OWORD *v720;
  __int128 *v721;
  __int128 v722;
  unint64_t v723;
  unint64_t v724;
  __int128 v725;
  _QWORD *v726;
  uint64_t v727;
  uint64_t v728;
  _QWORD *v729;
  uint64_t v730;
  unint64_t v731;
  unsigned int v732;
  unint64_t *v733;
  unint64_t v734;
  unint64_t *v735;
  unint64_t v736;
  BOOL v737;
  uint64_t v738;
  unsigned int v739;
  BOOL v740;
  uint64_t v741;
  unsigned int v742;
  BOOL v743;
  uint64_t v744;
  unsigned int v745;
  BOOL v746;
  uint64_t v747;
  unsigned int v748;
  uint64_t v749;
  BOOL v750;
  uint64_t v751;
  unsigned int v752;
  unsigned int v753;
  BOOL v754;
  uint64_t v755;
  uint64_t v756;
  unint64_t v757;
  unint64_t v758;
  unsigned int v759;
  size_t v760;
  _BYTE *v761;
  unsigned int v762;
  unsigned int v763;
  BOOL v764;
  uint64_t v765;
  uint64_t v766;
  unint64_t v767;
  unint64_t v768;
  unsigned int v769;
  size_t v770;
  _BYTE *v771;
  unsigned int v772;
  BOOL v773;
  uint64_t v774;
  void *v775;
  id v776;
  unsigned int v777;
  BOOL v778;
  uint64_t v779;
  unsigned int v780;
  BOOL v781;
  uint64_t v782;
  void *v783;
  id v784;
  unsigned int v785;
  BOOL v786;
  uint64_t v787;
  void *v788;
  id v789;
  unsigned int v790;
  BOOL v791;
  uint64_t v792;
  unsigned int v793;
  BOOL v794;
  uint64_t v795;
  unsigned int v796;
  BOOL v797;
  uint64_t v798;
  unsigned int v799;
  BOOL v800;
  uint64_t v801;
  unsigned int v802;
  BOOL v803;
  uint64_t v804;
  unsigned int v805;
  uint64_t v806;
  uint64_t v807;
  BOOL v808;
  uint64_t v809;
  unsigned int v810;
  BOOL v811;
  uint64_t v812;
  unsigned int v813;
  BOOL v814;
  uint64_t v815;
  unsigned int v816;
  BOOL v817;
  uint64_t v818;
  unsigned int v819;
  uint64_t v820;
  BOOL v821;
  uint64_t v822;
  unsigned int v823;
  BOOL v824;
  uint64_t v825;
  unsigned int v826;
  BOOL v827;
  uint64_t v828;
  unsigned int v829;
  BOOL v830;
  uint64_t v831;
  unsigned int v832;
  BOOL v833;
  uint64_t v834;
  unsigned int v835;
  BOOL v836;
  uint64_t v837;
  unsigned int v838;
  BOOL v839;
  uint64_t v840;
  unsigned int v841;
  BOOL v842;
  uint64_t v843;
  unsigned int v844;
  uint64_t v845;
  uint64_t v846;
  void (*v847)(_QWORD *, uint64_t);
  int v848;
  void (*v849)(_QWORD *, uint64_t);
  unint64_t v850;
  int v851;
  unint64_t v852;
  int v853;
  void (*v854)(_QWORD *, uint64_t);
  unint64_t v855;
  int v856;
  int v857;
  _QWORD *v858;
  unsigned int v859;
  size_t v860;
  size_t v861;
  uint64_t v862;
  size_t v863;
  uint64_t v864;
  void (*v865)(_QWORD *, _QWORD *, uint64_t);
  unint64_t v866;
  _QWORD *v867;
  _QWORD *v868;
  unint64_t v869;
  unint64_t v870;
  void (*v871)(unint64_t, unint64_t, uint64_t);
  _QWORD *v872;
  _QWORD *v873;
  _QWORD *v874;
  _QWORD *v875;
  _QWORD *v876;
  size_t v877;
  size_t v878;
  uint64_t v879;
  int v880;
  size_t v881;
  size_t v882;
  void (*v883)(size_t, size_t, uint64_t);
  size_t v884;
  size_t v885;
  _BYTE *v886;
  unint64_t v887;
  unint64_t v888;
  unint64_t v889;
  unint64_t v890;
  _QWORD *v891;
  _QWORD *v892;
  unint64_t v893;
  unint64_t v894;
  void *v895;
  const void *v896;
  unsigned int (*v897)(const void *, uint64_t, uint64_t);
  _QWORD *v898;
  _QWORD *v899;
  unint64_t v900;
  unint64_t v901;
  uint64_t v902;
  _QWORD *v903;
  _QWORD *v904;
  unint64_t v905;
  uint64_t *v906;
  unint64_t v907;
  uint64_t v908;
  unint64_t v909;
  unint64_t v910;
  uint64_t v911;
  unint64_t v912;
  unint64_t v913;
  int v914;
  _QWORD *v915;
  _QWORD *v916;
  unint64_t v917;
  __int128 *v918;
  unint64_t v919;
  int v920;
  __int128 v921;
  __int128 v922;
  __int128 v923;
  __int128 v924;
  __int128 v925;
  __int128 v926;
  __int128 v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  __int128 v932;
  void *v933;
  id v934;
  void *v935;
  id v936;
  void *v937;
  uint64_t v938;
  id v939;
  _OWORD *v940;
  __int128 *v941;
  __int128 v942;
  unint64_t v943;
  unint64_t v944;
  __int128 v945;
  _QWORD *v946;
  uint64_t v947;
  uint64_t v948;
  _QWORD *v949;
  uint64_t v950;
  unint64_t v951;
  unint64_t v952;
  const void *v953;
  int v954;
  void *v955;
  unint64_t v956;
  unint64_t v957;
  unint64_t v958;
  unint64_t v959;
  unint64_t *v960;
  unint64_t v961;
  uint64_t v962;
  size_t v963;
  size_t v964;
  size_t v965;
  void (*v966)(void *, const void *, uint64_t);
  unint64_t v967;
  _QWORD *v968;
  _QWORD *v969;
  unint64_t v970;
  unint64_t v971;
  void (*v972)(unint64_t, unint64_t, uint64_t);
  _QWORD *v973;
  _QWORD *v974;
  _QWORD *v975;
  _QWORD *v976;
  _QWORD *v977;
  unint64_t v978;
  unint64_t v979;
  uint64_t v980;
  int v981;
  unint64_t v982;
  unint64_t v983;
  void (*v984)(unint64_t, unint64_t, uint64_t);
  unint64_t v985;
  unint64_t v986;
  _BYTE *v987;
  unint64_t v988;
  unint64_t v989;
  unint64_t v990;
  unint64_t v991;
  _QWORD *v992;
  _QWORD *v993;
  unint64_t v994;
  unint64_t v995;
  void *v996;
  const void *v997;
  unsigned int (*v998)(const void *, uint64_t, uint64_t);
  _QWORD *v999;
  _QWORD *v1000;
  unint64_t v1001;
  unint64_t v1002;
  uint64_t v1003;
  _QWORD *v1004;
  _QWORD *v1005;
  unint64_t v1006;
  uint64_t *v1007;
  unint64_t v1008;
  uint64_t v1009;
  unint64_t v1010;
  unint64_t v1011;
  uint64_t v1012;
  unint64_t v1013;
  unint64_t v1014;
  int v1015;
  _QWORD *v1016;
  _QWORD *v1017;
  unint64_t v1018;
  unint64_t v1019;
  unint64_t v1020;
  int v1021;
  __int128 v1022;
  __int128 v1023;
  __int128 v1024;
  __int128 v1025;
  __int128 v1026;
  __int128 v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  void *v1034;
  id v1035;
  void *v1036;
  id v1037;
  void *v1038;
  id v1039;
  _OWORD *v1040;
  __int128 *v1041;
  __int128 v1042;
  unint64_t v1043;
  unint64_t v1044;
  __int128 v1045;
  _QWORD *v1046;
  uint64_t v1047;
  uint64_t v1048;
  _QWORD *v1049;
  uint64_t v1050;
  unint64_t v1051;
  unint64_t v1052;
  unsigned int (*v1053)(void);
  void *v1054;
  const void *v1055;
  size_t v1056;
  size_t v1057;
  unint64_t v1058;
  unint64_t v1059;
  size_t v1060;
  unint64_t v1061;
  size_t v1062;
  uint64_t v1063;
  void (*v1064)(void *, const void *, uint64_t);
  uint64_t v1065;
  unint64_t v1066;
  unint64_t v1067;
  _QWORD *v1068;
  _QWORD *v1069;
  unint64_t v1070;
  unint64_t v1071;
  void (*v1072)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1073;
  _QWORD *v1074;
  _QWORD *v1075;
  _QWORD *v1076;
  _QWORD *v1077;
  size_t v1078;
  size_t v1079;
  uint64_t v1080;
  int v1081;
  size_t v1082;
  size_t v1083;
  void (*v1084)(size_t, size_t, uint64_t);
  size_t v1085;
  size_t v1086;
  _BYTE *v1087;
  unint64_t v1088;
  unint64_t v1089;
  unint64_t v1090;
  unint64_t v1091;
  _QWORD *v1092;
  _QWORD *v1093;
  unint64_t v1094;
  unint64_t v1095;
  void *v1096;
  const void *v1097;
  unsigned int (*v1098)(const void *, uint64_t, uint64_t);
  _QWORD *v1099;
  _QWORD *v1100;
  unint64_t v1101;
  unint64_t v1102;
  uint64_t v1103;
  _QWORD *v1104;
  _QWORD *v1105;
  unint64_t v1106;
  uint64_t *v1107;
  unint64_t v1108;
  uint64_t v1109;
  unint64_t v1110;
  unint64_t v1111;
  uint64_t v1112;
  unint64_t v1113;
  unint64_t v1114;
  int v1115;
  _QWORD *v1116;
  _QWORD *v1117;
  size_t v1118;
  size_t v1119;
  unint64_t v1120;
  int v1121;
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  void *v1134;
  id v1135;
  void *v1136;
  id v1137;
  void *v1138;
  id v1139;
  unint64_t v1140;
  _OWORD *v1141;
  __int128 *v1142;
  __int128 v1143;
  unint64_t v1144;
  unint64_t v1145;
  __int128 v1146;
  _QWORD *v1147;
  uint64_t v1148;
  uint64_t v1149;
  _QWORD *v1150;
  uint64_t v1151;
  unint64_t v1152;
  unint64_t v1153;
  unint64_t v1154;
  unsigned int v1155;
  _OWORD *v1156;
  __int128 *v1157;
  __int128 v1158;
  unint64_t v1159;
  unint64_t v1160;
  __int128 v1161;
  _QWORD *v1162;
  uint64_t v1163;
  uint64_t v1164;
  _QWORD *v1165;
  uint64_t v1166;
  unint64_t v1167;
  unint64_t v1168;
  unint64_t v1169;
  unsigned int v1170;
  uint64_t v1171;
  void (*v1172)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v1173;
  _QWORD *v1174;
  int v1175;
  unint64_t v1176;
  uint64_t v1177;
  _DWORD *v1178;
  size_t v1179;
  void (*v1180)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v1181;
  int v1182;
  _QWORD *v1183;
  uint64_t v1184;
  uint64_t v1185;
  int v1186;
  void *v1187;
  const void *v1188;
  uint64_t v1189;
  void (*v1190)(_QWORD *, _QWORD *, uint64_t);
  _QWORD *v1191;
  _QWORD *v1192;
  int v1193;
  uint64_t v1194;
  size_t v1195;
  char v1196;
  void *v1197;
  const void *v1198;
  char v1199;
  void (*v1200)(void *, const void *, uint64_t);
  uint64_t v1201;
  const void *v1202;
  uint64_t v1203;
  int v1204;
  void *v1205;
  void (*v1206)(void *, const void *, uint64_t);
  const void *v1207;
  int v1208;
  void *v1209;
  uint64_t v1210;
  int v1211;
  void *v1212;
  const void *v1213;
  uint64_t v1214;
  void (*v1215)(void *, const void *, uint64_t);
  uint64_t v1216;
  uint64_t v1217;
  int v1218;
  void *v1219;
  char v1220;
  void *v1221;
  const void *v1222;
  unint64_t v1223;
  unint64_t v1224;
  unint64_t v1225;
  unint64_t v1226;
  uint64_t *v1227;
  uint64_t v1228;
  unint64_t v1229;
  unint64_t v1230;
  unint64_t v1231;
  unint64_t v1232;
  unint64_t v1233;
  unint64_t v1234;
  uint64_t *v1235;
  uint64_t v1236;
  unint64_t v1237;
  unint64_t v1238;
  unint64_t v1239;
  unint64_t v1240;
  unint64_t v1241;
  unint64_t v1242;
  unint64_t v1243;
  unint64_t v1244;
  unint64_t v1245;
  unint64_t v1246;
  unint64_t v1247;
  unint64_t v1248;
  unint64_t v1249;
  unint64_t v1250;
  char *v1251;
  int v1252;
  uint64_t *v1253;
  uint64_t v1254;
  char *v1255;
  char *v1256;
  int v1257;
  uint64_t *v1258;
  uint64_t v1259;
  unint64_t v1260;
  unint64_t v1261;
  unint64_t v1262;
  unint64_t v1263;
  size_t v1264;
  unint64_t v1265;
  unint64_t v1266;
  size_t v1267;
  unint64_t v1268;
  size_t v1269;
  unint64_t v1270;
  void *v1271;
  size_t v1272;
  unint64_t v1273;
  unint64_t v1274;
  unint64_t v1275;
  unint64_t v1276;
  _QWORD *v1277;
  _QWORD *v1278;
  unint64_t v1279;
  unint64_t v1280;
  void (*v1281)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1282;
  _QWORD *v1283;
  _QWORD *v1284;
  _QWORD *v1285;
  _QWORD *v1286;
  unint64_t v1287;
  unint64_t v1288;
  uint64_t v1289;
  int v1290;
  unint64_t v1291;
  unint64_t v1292;
  void (*v1293)(unint64_t, unint64_t, uint64_t);
  unint64_t v1294;
  unint64_t v1295;
  _BYTE *v1296;
  unint64_t v1297;
  unint64_t v1298;
  unint64_t v1299;
  unint64_t v1300;
  _QWORD *v1301;
  _QWORD *v1302;
  unint64_t v1303;
  unint64_t v1304;
  void *v1305;
  const void *v1306;
  unsigned int (*v1307)(const void *, uint64_t, uint64_t);
  unint64_t v1308;
  unint64_t v1309;
  unint64_t v1310;
  unint64_t v1311;
  unint64_t v1312;
  _QWORD *v1313;
  _QWORD *v1314;
  unint64_t v1315;
  unint64_t v1316;
  void (*v1317)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1318;
  _QWORD *v1319;
  _QWORD *v1320;
  _QWORD *v1321;
  _QWORD *v1322;
  unint64_t v1323;
  unint64_t v1324;
  uint64_t v1325;
  int v1326;
  unint64_t v1327;
  unint64_t v1328;
  void (*v1329)(unint64_t, unint64_t, uint64_t);
  unint64_t v1330;
  unint64_t v1331;
  _BYTE *v1332;
  unint64_t v1333;
  unint64_t v1334;
  unint64_t v1335;
  unint64_t v1336;
  _QWORD *v1337;
  _QWORD *v1338;
  unint64_t v1339;
  unint64_t v1340;
  void *v1341;
  const void *v1342;
  unsigned int (*v1343)(const void *, uint64_t, uint64_t);
  size_t v1344;
  unint64_t v1345;
  size_t v1346;
  unint64_t v1347;
  size_t v1348;
  unint64_t v1349;
  size_t v1350;
  _QWORD *v1351;
  unint64_t v1352;
  unint64_t v1353;
  void (*v1354)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1355;
  unint64_t v1356;
  _QWORD *v1357;
  _QWORD *v1358;
  char *v1359;
  void *v1360;
  id v1361;
  unint64_t v1362;
  _QWORD *v1363;
  unint64_t v1364;
  unint64_t v1365;
  void (*v1366)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1367;
  unint64_t v1368;
  _QWORD *v1369;
  _QWORD *v1370;
  char *v1371;
  void *v1372;
  char v1373;
  _QWORD *v1374;
  _QWORD *v1375;
  unint64_t v1376;
  unint64_t v1377;
  uint64_t v1378;
  _QWORD *v1379;
  _QWORD *v1380;
  unint64_t v1381;
  uint64_t *v1382;
  unint64_t v1383;
  _QWORD *v1384;
  _QWORD *v1385;
  unint64_t v1386;
  unint64_t v1387;
  uint64_t v1388;
  _QWORD *v1389;
  _QWORD *v1390;
  unint64_t v1391;
  uint64_t *v1392;
  unint64_t v1393;
  uint64_t v1394;
  unint64_t v1395;
  unint64_t v1396;
  uint64_t v1397;
  unint64_t v1398;
  unint64_t v1399;
  int v1400;
  _QWORD *v1401;
  _QWORD *v1402;
  unint64_t v1403;
  unint64_t v1404;
  unint64_t v1405;
  int v1406;
  __int128 v1407;
  __int128 v1408;
  __int128 v1409;
  __int128 v1410;
  __int128 v1411;
  __int128 v1412;
  __int128 v1413;
  __int128 v1414;
  __int128 v1415;
  __int128 v1416;
  __int128 v1417;
  __int128 v1418;
  uint64_t v1419;
  unint64_t v1420;
  unint64_t v1421;
  uint64_t v1422;
  unint64_t v1423;
  unint64_t v1424;
  int v1425;
  _QWORD *v1426;
  _QWORD *v1427;
  unint64_t v1428;
  unint64_t v1429;
  unint64_t v1430;
  int v1431;
  __int128 v1432;
  __int128 v1433;
  __int128 v1434;
  __int128 v1435;
  __int128 v1436;
  __int128 v1437;
  __int128 v1438;
  __int128 v1439;
  __int128 v1440;
  __int128 v1441;
  __int128 v1442;
  __int128 v1443;
  void *v1444;
  id v1445;
  void *v1446;
  id v1447;
  uint64_t v1448;
  id v1449;
  void *v1450;
  id v1451;
  void *v1452;
  id v1453;
  uint64_t v1454;
  id v1455;
  unint64_t *v1456;
  unint64_t v1457;
  unint64_t *v1458;
  unint64_t v1459;
  unint64_t *v1460;
  unint64_t v1461;
  unint64_t *v1462;
  unint64_t v1463;
  unint64_t *v1464;
  unint64_t v1465;
  unint64_t *v1466;
  unint64_t v1467;
  unint64_t *v1468;
  unint64_t v1469;
  unint64_t *v1470;
  unint64_t v1471;
  unint64_t *v1472;
  unint64_t v1473;
  unint64_t *v1474;
  unint64_t v1475;
  unint64_t *v1476;
  unint64_t v1477;
  unint64_t *v1478;
  unint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  unint64_t v1492;
  void (*v1493)(unint64_t, uint64_t);
  unint64_t v1494;
  unint64_t v1495;
  unint64_t v1496;
  unint64_t v1497;
  void *v1498;
  uint64_t v1499;
  size_t v1500;
  unint64_t v1501;
  void (*v1502)(unint64_t, uint64_t);
  unint64_t v1503;
  unint64_t v1504;
  unint64_t v1505;
  unint64_t v1506;
  void *v1507;
  uint64_t v1508;
  size_t v1509;
  size_t v1510;
  int v1511;
  uint64_t *v1512;
  uint64_t v1513;
  size_t v1514;
  unint64_t v1515;
  void (*v1516)(unint64_t, uint64_t);
  unint64_t v1517;
  unint64_t v1518;
  unint64_t v1519;
  unint64_t v1520;
  void *v1521;
  uint64_t v1522;
  size_t v1523;
  void (*v1524)(size_t, uint64_t);
  size_t v1525;
  unint64_t v1526;
  unint64_t v1527;
  unint64_t v1528;
  void *v1529;
  uint64_t v1530;
  size_t v1531;
  void (*v1532)(size_t, uint64_t);
  size_t v1533;
  unint64_t v1534;
  unint64_t v1535;
  unint64_t v1536;
  void *v1537;
  uint64_t v1538;
  size_t v1539;
  int v1540;
  uint64_t *v1541;
  uint64_t v1542;
  size_t v1543;
  void (*v1544)(size_t, uint64_t);
  size_t v1545;
  unint64_t v1546;
  unint64_t v1547;
  unint64_t v1548;
  void *v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  size_t v1553;
  unint64_t v1554;
  unint64_t v1555;
  _QWORD *v1556;
  _QWORD *v1557;
  unint64_t v1558;
  unint64_t v1559;
  void (*v1560)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1561;
  _QWORD *v1562;
  _QWORD *v1563;
  _QWORD *v1564;
  _QWORD *v1565;
  unint64_t v1566;
  unint64_t v1567;
  uint64_t v1568;
  int v1569;
  unint64_t v1570;
  unint64_t v1571;
  void (*v1572)(unint64_t, unint64_t, uint64_t);
  unint64_t v1573;
  _BYTE *v1574;
  unint64_t v1575;
  unint64_t v1576;
  unint64_t v1577;
  unint64_t v1578;
  _QWORD *v1579;
  _QWORD *v1580;
  unint64_t v1581;
  unint64_t v1582;
  void *v1583;
  const void *v1584;
  unsigned int (*v1585)(const void *, uint64_t, uint64_t);
  _QWORD *v1586;
  _QWORD *v1587;
  unint64_t v1588;
  unint64_t v1589;
  uint64_t v1590;
  _QWORD *v1591;
  _QWORD *v1592;
  unint64_t v1593;
  uint64_t *v1594;
  unint64_t v1595;
  uint64_t v1596;
  unint64_t v1597;
  unint64_t v1598;
  uint64_t v1599;
  unint64_t v1600;
  unint64_t v1601;
  int v1602;
  _QWORD *v1603;
  _QWORD *v1604;
  unint64_t v1605;
  unint64_t v1606;
  unint64_t v1607;
  int v1608;
  __int128 v1609;
  __int128 v1610;
  __int128 v1611;
  __int128 v1612;
  __int128 v1613;
  __int128 v1614;
  __int128 v1615;
  __int128 v1616;
  __int128 v1617;
  __int128 v1618;
  __int128 v1619;
  __int128 v1620;
  void *v1621;
  id v1622;
  void *v1623;
  id v1624;
  uint64_t v1625;
  id v1626;
  size_t v1627;
  unint64_t v1628;
  unint64_t v1629;
  _QWORD *v1630;
  _QWORD *v1631;
  unint64_t v1632;
  unint64_t v1633;
  void (*v1634)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1635;
  _QWORD *v1636;
  _QWORD *v1637;
  _QWORD *v1638;
  _QWORD *v1639;
  size_t v1640;
  size_t v1641;
  uint64_t v1642;
  int v1643;
  size_t v1644;
  size_t v1645;
  void (*v1646)(size_t, size_t, uint64_t);
  size_t v1647;
  size_t v1648;
  _BYTE *v1649;
  unint64_t v1650;
  unint64_t v1651;
  unint64_t v1652;
  unint64_t v1653;
  _QWORD *v1654;
  _QWORD *v1655;
  unint64_t v1656;
  unint64_t v1657;
  void *v1658;
  const void *v1659;
  unsigned int (*v1660)(const void *, uint64_t, uint64_t);
  _QWORD *v1661;
  _QWORD *v1662;
  unint64_t v1663;
  unint64_t v1664;
  uint64_t v1665;
  _QWORD *v1666;
  _QWORD *v1667;
  unint64_t v1668;
  uint64_t *v1669;
  unint64_t v1670;
  uint64_t v1671;
  unint64_t v1672;
  unint64_t v1673;
  uint64_t v1674;
  unint64_t v1675;
  unint64_t v1676;
  int v1677;
  _QWORD *v1678;
  _QWORD *v1679;
  unint64_t v1680;
  unint64_t v1681;
  int v1682;
  __int128 v1683;
  __int128 v1684;
  __int128 v1685;
  __int128 v1686;
  __int128 v1687;
  __int128 v1688;
  __int128 v1689;
  __int128 v1690;
  __int128 v1691;
  __int128 v1692;
  __int128 v1693;
  __int128 v1694;
  void *v1695;
  id v1696;
  void *v1697;
  id v1698;
  uint64_t v1699;
  id v1700;
  uint64_t v1701;
  size_t v1702;
  unint64_t v1703;
  unint64_t v1704;
  _QWORD *v1705;
  _QWORD *v1706;
  unint64_t v1707;
  unint64_t v1708;
  void (*v1709)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1710;
  _QWORD *v1711;
  _QWORD *v1712;
  _QWORD *v1713;
  _QWORD *v1714;
  size_t v1715;
  size_t v1716;
  uint64_t v1717;
  int v1718;
  size_t v1719;
  size_t v1720;
  void (*v1721)(size_t, size_t, uint64_t);
  size_t v1722;
  _BYTE *v1723;
  unint64_t v1724;
  unint64_t v1725;
  unint64_t v1726;
  unint64_t v1727;
  _QWORD *v1728;
  _QWORD *v1729;
  unint64_t v1730;
  unint64_t v1731;
  void *v1732;
  const void *v1733;
  unsigned int (*v1734)(const void *, uint64_t, uint64_t);
  _QWORD *v1735;
  _QWORD *v1736;
  unint64_t v1737;
  unint64_t v1738;
  uint64_t v1739;
  _QWORD *v1740;
  _QWORD *v1741;
  unint64_t v1742;
  uint64_t *v1743;
  unint64_t v1744;
  uint64_t v1745;
  unint64_t v1746;
  unint64_t v1747;
  uint64_t v1748;
  unint64_t v1749;
  unint64_t v1750;
  int v1751;
  _QWORD *v1752;
  _QWORD *v1753;
  unint64_t v1754;
  unint64_t v1755;
  int v1756;
  __int128 v1757;
  __int128 v1758;
  __int128 v1759;
  __int128 v1760;
  __int128 v1761;
  __int128 v1762;
  __int128 v1763;
  __int128 v1764;
  __int128 v1765;
  __int128 v1766;
  __int128 v1767;
  __int128 v1768;
  void *v1769;
  id v1770;
  void *v1771;
  id v1772;
  uint64_t v1773;
  id v1774;
  unint64_t v1775;
  size_t v1776;
  unint64_t v1777;
  unint64_t v1778;
  _QWORD *v1779;
  _QWORD *v1780;
  unint64_t v1781;
  unint64_t v1782;
  void (*v1783)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1784;
  _QWORD *v1785;
  _QWORD *v1786;
  _QWORD *v1787;
  _QWORD *v1788;
  size_t v1789;
  size_t v1790;
  uint64_t v1791;
  int v1792;
  size_t v1793;
  size_t v1794;
  void (*v1795)(size_t, size_t, uint64_t);
  size_t v1796;
  size_t v1797;
  _BYTE *v1798;
  unint64_t v1799;
  unint64_t v1800;
  unint64_t v1801;
  unint64_t v1802;
  _QWORD *v1803;
  _QWORD *v1804;
  unint64_t v1805;
  unint64_t v1806;
  void *v1807;
  const void *v1808;
  unsigned int (*v1809)(const void *, uint64_t, uint64_t);
  _QWORD *v1810;
  _QWORD *v1811;
  unint64_t v1812;
  unint64_t v1813;
  uint64_t v1814;
  _QWORD *v1815;
  _QWORD *v1816;
  unint64_t v1817;
  uint64_t *v1818;
  unint64_t v1819;
  uint64_t v1820;
  unint64_t v1821;
  unint64_t v1822;
  uint64_t v1823;
  unint64_t v1824;
  unint64_t v1825;
  int v1826;
  _QWORD *v1827;
  _QWORD *v1828;
  unint64_t v1829;
  unint64_t v1830;
  int v1831;
  __int128 v1832;
  __int128 v1833;
  __int128 v1834;
  __int128 v1835;
  __int128 v1836;
  __int128 v1837;
  __int128 v1838;
  __int128 v1839;
  __int128 v1840;
  __int128 v1841;
  __int128 v1842;
  __int128 v1843;
  void *v1844;
  id v1845;
  void *v1846;
  id v1847;
  uint64_t v1848;
  id v1849;
  _OWORD *v1850;
  __int128 *v1851;
  __int128 v1852;
  unint64_t v1853;
  unint64_t v1854;
  __int128 v1855;
  _QWORD *v1856;
  uint64_t v1857;
  uint64_t v1858;
  _QWORD *v1859;
  uint64_t v1860;
  unint64_t v1861;
  _QWORD *v1862;
  _QWORD *v1863;
  void *v1864;
  id v1865;
  _OWORD *v1866;
  __int128 *v1867;
  __int128 v1868;
  unint64_t v1869;
  unint64_t v1870;
  __int128 v1871;
  _QWORD *v1872;
  uint64_t v1873;
  uint64_t v1874;
  _QWORD *v1875;
  uint64_t v1876;
  unint64_t v1877;
  _QWORD *v1878;
  _QWORD *v1879;
  _OWORD *v1880;
  __int128 *v1881;
  __int128 v1882;
  unint64_t v1883;
  unint64_t v1884;
  __int128 v1885;
  _QWORD *v1886;
  uint64_t v1887;
  uint64_t v1888;
  _QWORD *v1889;
  uint64_t v1890;
  unint64_t v1891;
  unint64_t v1892;
  void *v1893;
  const void *v1894;
  char *v1895;
  int v1896;
  uint64_t *v1897;
  uint64_t v1898;
  size_t v1899;
  _QWORD *v1900;
  unint64_t v1901;
  unint64_t v1902;
  unint64_t v1903;
  void (*v1904)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1905;
  unint64_t v1906;
  _QWORD *v1907;
  _QWORD *v1908;
  _QWORD *v1909;
  _QWORD *v1910;
  void *v1911;
  id v1912;
  _OWORD *v1913;
  __int128 *v1914;
  __int128 v1915;
  unint64_t v1916;
  unint64_t v1917;
  __int128 v1918;
  _QWORD *v1919;
  uint64_t v1920;
  uint64_t v1921;
  _QWORD *v1922;
  uint64_t v1923;
  unint64_t v1924;
  unint64_t v1925;
  _QWORD *v1926;
  _QWORD *v1927;
  void *v1928;
  id v1929;
  _OWORD *v1930;
  __int128 *v1931;
  __int128 v1932;
  unint64_t v1933;
  unint64_t v1934;
  __int128 v1935;
  _QWORD *v1936;
  uint64_t v1937;
  uint64_t v1938;
  _QWORD *v1939;
  uint64_t v1940;
  unint64_t v1941;
  unint64_t v1942;
  void *v1943;
  const void *v1944;
  uint64_t v1945;
  char *v1946;
  char *v1947;
  int v1948;
  uint64_t *v1949;
  uint64_t v1950;
  unint64_t v1951;
  _QWORD *v1952;
  unint64_t v1953;
  unint64_t v1954;
  unint64_t v1955;
  void (*v1956)(unint64_t, unint64_t, uint64_t);
  _QWORD *v1957;
  unint64_t v1958;
  _QWORD *v1959;
  _QWORD *v1960;
  _QWORD *v1961;
  _QWORD *v1962;
  id v1963;
  _OWORD *v1964;
  __int128 *v1965;
  __int128 v1966;
  unint64_t v1967;
  unint64_t v1968;
  __int128 v1969;
  _QWORD *v1970;
  uint64_t v1971;
  uint64_t v1972;
  _QWORD *v1973;
  uint64_t v1974;
  unint64_t v1975;
  unint64_t v1976;
  _QWORD *v1977;
  _QWORD *v1978;
  unsigned int v1979;
  _QWORD *result;
  unint64_t v1981;
  unint64_t v1982;
  unint64_t v1983;
  unsigned int v1984;
  unsigned int v1985;
  unsigned int v1986;
  int v1987;
  int v1988;
  int v1989;
  int v1990;
  int v1991;
  int v1992;
  uint64_t v1993;
  uint64_t v1994;
  uint64_t v1995;
  uint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  uint64_t v2000;
  uint64_t v2001;
  size_t v2002;
  size_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  uint64_t v2006;
  uint64_t v2007;
  uint64_t v2008;
  uint64_t v2009;
  uint64_t v2010;
  size_t v2011;
  size_t v2012;
  unint64_t v2013;
  unint64_t v2014;
  size_t v2015;
  unsigned int v2016;
  unsigned int v2017;
  uint64_t v2018;
  unint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  uint64_t v2022;
  unsigned int v2023;
  unsigned int v2024;
  uint64_t v2025;
  unsigned int v2026;
  unsigned int v2027;
  unint64_t v2028;
  unint64_t v2029;
  uint64_t v2030;
  unint64_t v2031;
  size_t v2032;
  uint64_t v2033;
  unint64_t v2034;
  size_t v2035;
  uint64_t v2036;
  uint64_t v2037;
  uint64_t v2038;
  unsigned int v2039;
  unsigned int v2040;
  uint64_t v2041;
  uint64_t v2042;
  size_t v2043;
  unsigned int v2044;
  unsigned int v2045;
  unsigned int v2046;
  unsigned int v2047;
  unsigned int v2048;
  uint64_t v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  uint64_t v2053;
  uint64_t v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  unsigned int v2059;
  uint64_t v2060;
  uint64_t v2061;
  uint64_t v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t v2067;
  uint64_t v2068;
  unint64_t v2069;
  uint64_t v2070;
  size_t v2071;
  unint64_t v2072;
  uint64_t v2073;
  unint64_t v2074;
  size_t v2075;
  uint64_t v2076;
  uint64_t v2077;
  uint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  uint64_t v2081;
  uint64_t v2082;
  _DWORD *v2083;
  uint64_t v2084;
  unint64_t v2085;
  unint64_t v2086;
  unint64_t v2087;
  unint64_t v2088;
  unint64_t v2089;
  unint64_t v2090;
  unint64_t v2091;
  unint64_t v2092;
  unint64_t v2093;
  uint64_t v2094;
  uint64_t v2095;
  uint64_t v2096;
  uint64_t v2097;
  unint64_t v2098;
  unint64_t v2099;
  unint64_t v2100;
  unint64_t v2101;
  unint64_t v2102;
  unint64_t v2103;
  unsigned int v2104;
  unint64_t v2105;
  unint64_t v2106;
  unsigned int v2108;
  size_t __n;
  size_t __na;
  uint64_t v2111;
  unint64_t v2112;
  unint64_t v2114;
  unint64_t v2115;
  uint64_t v2116;
  uint64_t v2117;
  uint64_t v2118;
  size_t v2119;
  uint64_t v2120;
  uint64_t AssociatedTypeWitness;
  uint64_t v2122;
  size_t v2123;
  uint64_t v2124;
  uint64_t v2125;
  uint64_t v2126;
  uint64_t v2127;
  uint64_t v2128;
  uint64_t v2129;
  unint64_t v2130;
  unint64_t v2131;
  unint64_t v2132;
  uint64_t v2133;
  const void *v2134;
  size_t v2135;
  size_t v2136;
  uint64_t v2137;
  void *v2138;
  void *v2139;
  void *v2140;
  void *v2141;
  void *v2142;
  void *v2143;
  void *v2144;
  size_t v2145;
  unint64_t v2146;
  size_t v2147;
  unint64_t v2148;
  void *v2149;
  void *v2150;
  unint64_t v2151;
  size_t v2152;
  void *v2153;
  const void *v2154;
  const void *v2155;

  v3 = a1;
  if (a1 == a2)
    return v3;
  v5 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v2096 = *(_QWORD *)(a3 + 24);
  v2118 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v2118 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v2042 = v7 + v9;
  v10 = (v7 + v9) & ~v9;
  v2126 = v9;
  v2111 = v10;
  v11 = *(_QWORD *)(v8 + 64);
  v2114 = v11;
  v12 = v10 + v11;
  v2131 = v12;
  if (v11 <= v7)
    v11 = v7;
  v13 = v7;
  v14 = v11 + 1;
  v2145 = v11 + 1;
  v2146 = v11;
  if (v11 + 1 > v12)
    v12 = v11 + 1;
  v15 = *(unsigned __int8 *)(v6 + 80);
  v16 = v15 | *(unsigned __int8 *)(v8 + 80);
  v2133 = v16;
  v2074 = v16 + v14;
  v2132 = ((v16 + v14) & ~v16) + v14;
  if (v2132 > v12)
    v12 = ((v16 + v14) & ~v16) + v14;
  v2130 = v12;
  v2124 = v6;
  v17 = *(_DWORD *)(v6 + 84);
  v2097 = v5;
  v2061 = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(v2061 - 8);
  v19 = *(_DWORD *)(v18 + 84);
  v2055 = swift_getAssociatedTypeWitness();
  v20 = *(_QWORD *)(v2055 - 8);
  v21 = *(_DWORD *)(v20 + 84);
  v2016 = v21;
  v2039 = v19;
  if (v19 > v21)
    v21 = v19;
  v2026 = v21;
  if (v21 <= 0x7FFFFFFE)
    v21 = 2147483646;
  v2108 = v17;
  v2045 = v21;
  if (v21 <= v17)
    v22 = v17;
  else
    v22 = v21;
  v2079 = sub_23B1C5BDC();
  v23 = *(_QWORD *)(v2079 - 8);
  v24 = *(_DWORD *)(v23 + 84);
  if (v24 <= 0x7FFFFFFE)
    v25 = 2147483646;
  else
    v25 = *(_DWORD *)(v23 + 84);
  v2104 = v25;
  if (v22 > v25)
    v25 = v22;
  v2024 = v25;
  if (v25 <= 0x7FFFFFFF)
    v25 = 0x7FFFFFFF;
  v2048 = v25;
  v2059 = *(_DWORD *)(v23 + 84);
  v26 = v24 == 0;
  v2115 = v13;
  v2067 = v13 + v15;
  v2125 = v15;
  v27 = *(unsigned __int8 *)(v20 + 80);
  v28 = *(_DWORD *)(v18 + 80) & 0xF8 | v27 | 7;
  v2038 = v13 + v28;
  v29 = (v13 + v28 + ((v13 + v15) & ~v15)) & ~v28;
  v2137 = v28;
  v2060 = v18;
  v2064 = *(_QWORD *)(v18 + 64) + 7;
  v2053 = v27 + 8;
  v2116 = v27;
  v2054 = v20;
  v2049 = *(_QWORD *)(v20 + 64) + 7;
  v30 = *(unsigned __int8 *)(v23 + 80);
  v2119 = ((((v2049 + ((v27 + 8 + (v2064 & 0xFFFFFFFFFFFFFFF8)) & ~v27)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  v2120 = (v30 | 7) + 16;
  v31 = (v2120 + v29 + v2119) & ~(v30 | 7);
  v2077 = v30 + 12;
  v2080 = *(_QWORD *)(v2079 - 8);
  v32 = *(_QWORD *)(v23 + 64);
  v2073 = v32 + v30;
  v2043 = v32 + 12;
  v2070 = v30 + 10;
  v2075 = v32;
  if (v26)
    v33 = v32 + 1;
  else
    v33 = *(_QWORD *)(v23 + 64);
  v2123 = v33;
  v2071 = v33 + 7;
  v2085 = (v30
         + 10
         + ((((((v32 + 12 + ((v32 + v30 + ((v30 + 12) & ~v30)) & ~v30)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v30;
  v34 = ((((((((((v33 + 7 + v2085) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v2094 = v31;
  v35 = (((v31 + v34 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v2136 = v35 + 16;
  v36 = v28 | v15 | v30;
  v2019 = v35 + 16 + v36;
  v2106 = v35 + 23;
  __n = ((v35 + 23 + (v2019 & ~v36)) & 0xFFFFFFFFFFFFFFF8) + 8;
  v2122 = v8;
  v37 = *(_DWORD *)(v8 + 84);
  v2063 = swift_getAssociatedTypeWitness();
  v38 = *(_QWORD *)(v2063 - 8);
  v39 = *(_DWORD *)(v38 + 84);
  v2058 = swift_getAssociatedTypeWitness();
  v40 = *(_QWORD *)(v2058 - 8);
  v41 = *(_DWORD *)(v40 + 84);
  v2017 = v41;
  v2040 = v39;
  if (v39 > v41)
    v41 = v39;
  v2027 = v41;
  if (v41 <= 0x7FFFFFFE)
    v41 = 2147483646;
  v2046 = v41;
  if (v41 <= v37)
    v41 = v37;
  if (v41 <= v2104)
    v41 = v2104;
  v2023 = v41;
  if (v41 <= 0x7FFFFFFF)
    v41 = 0x7FFFFFFF;
  v2047 = v41;
  v42 = v2126;
  v2066 = v2114 + v2126;
  v43 = *(unsigned __int8 *)(v40 + 80);
  v44 = *(_DWORD *)(v38 + 80) & 0xF8 | v43 | 7;
  v2037 = v2114 + v44;
  v2062 = v38;
  v2065 = *(_QWORD *)(v38 + 64) + 7;
  v2056 = v43 + 8;
  v2057 = *(_QWORD *)(v2058 - 8);
  v2050 = *(_QWORD *)(v40 + 64) + 7;
  v45 = ((((v2050 + ((v43 + 8 + (v2065 & 0xFFFFFFFFFFFFFFF8)) & ~v43)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v46 = (v2120 + ((v2114 + v44 + ((v2114 + v42) & ~v42)) & ~v44) + v45) & ~(v30 | 7);
  v2072 = v34;
  v47 = (((v46 + v34 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v48 = v47 + 16;
  v49 = v44 | v2126;
  v50 = v44 | v2126 | v30;
  v51 = v47 + 16 + v50;
  v52 = v47 + (v51 & ~v50);
  v2128 = v36;
  v2014 = v36 + v2115;
  v53 = v2136 + ((v36 + v2115) & ~v36);
  v54 = (v53 + 7) & 0xFFFFFFFFFFFFFFF8;
  v55 = ((v54 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v56 = (v53 + v42) & ~v42;
  v2044 = v37;
  if (v37)
    v57 = v2114;
  else
    v57 = v2114 + 1;
  v58 = ((((((v57 + v44 + v56) & ~v44) + v45 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v2012 = v57 + v44;
  v59 = v45 + ((v57 + v44 + v2111) & ~v44) + 16;
  v60 = ((v54 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v61 = *(_QWORD *)(v2097 - 8);
  if (*(_DWORD *)(v61 + 84))
    v62 = *(_QWORD *)(v61 + 64);
  else
    v62 = *(_QWORD *)(v61 + 64) + 1;
  if (v2115 > v55)
    v55 = v2115;
  if (v58 > v59)
    v59 = v58;
  v2010 = *(_QWORD *)(v2097 - 8);
  v63 = *(unsigned __int8 *)(v61 + 80);
  v2008 = v2115 + v63;
  v2003 = v62;
  if (v60 <= ((v2115 + v63) & ~v63) + v62)
    v60 = ((v2115 + v63) & ~v63) + v62;
  if (v55 <= v59)
    v55 = v59;
  if (v55 <= v60)
    v64 = v60;
  else
    v64 = v55;
  if (v17)
    v65 = v2115;
  else
    v65 = v2115 + 1;
  v66 = *(_QWORD *)(v2096 - 8);
  v2013 = v50 + v2114;
  v67 = v48 + ((v50 + v2114) & ~v50);
  v68 = (v67 + 7) & 0xFFFFFFFFFFFFFFF8;
  v69 = ((v68 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v70 = v2125;
  v71 = v2137;
  v72 = ((((((v65 + v71 + ((v67 + v70) & ~v70)) & ~v71) + v2119 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v2007 = v2114 + v2125;
  v2011 = v65 + v2137;
  v73 = v2119 + ((v65 + v71 + ((v2114 + v70) & ~v70)) & ~v71) + 16;
  if (*(_DWORD *)(v66 + 84))
    v74 = *(_QWORD *)(v66 + 64);
  else
    v74 = *(_QWORD *)(v66 + 64) + 1;
  if (v2114 > v69)
    v69 = v2114;
  if (v72 > v73)
    v73 = v72;
  v75 = ((v68 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v76 = *(unsigned __int8 *)(v66 + 80);
  v2006 = v2114 + v76;
  if (v75 <= ((v2114 + v76) & ~v76) + v74)
    v75 = ((v2114 + v76) & ~v76) + v74;
  if (v69 <= v73)
    v69 = v73;
  if (v69 <= v75)
    v69 = v75;
  v2028 = v69;
  v2029 = v64;
  v77 = v69 + 1;
  if (v77 <= v64 + 1)
    v78 = v64 + 1;
  else
    v78 = v77;
  v79 = v2146 + 2;
  v2112 = v2146 + 2;
  if (v2145 > v2146 + 2)
    v79 = v2146 + 1;
  if (v79 <= __n)
    v79 = __n;
  v2035 = v65;
  v80 = ((((((((v2137 + ((((v65 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v2137) + v2119 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + v49
      + 8;
  v2015 = v57;
  v2031 = v80;
  v2032 = v57 + 7;
  v2033 = v44 + 9;
  v2069 = ((((v2050 + ((v43 + 8 + (v2065 & 0xFFFFFFFFFFFFFFF8)) & ~v43)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  v2034 = ((((((((v44 + 9 + ((((v57 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v44) + v45 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  v2099 = ((v52 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v79 <= v2099)
    v81 = ((v52 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v81 = v79;
  if (v81 <= v2136)
    v81 = v2136;
  __na = v48;
  if (v81 <= v48)
    v81 = v48;
  v2098 = v2132 + 2;
  if (v81 <= v2132 + 2)
    v81 = v2132 + 2;
  v2101 = ((v2146 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v81 <= v2101)
    v81 = ((v2146 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  v2102 = (v2146 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v81 <= v2102)
    v81 = (v2146 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v81 <= v2131)
    v81 = v2131;
  v2103 = ((v2133 + 1) & ~v2133) + v2145;
  if (v81 <= v2103)
    v81 = ((v2133 + 1) & ~v2133) + v2145;
  v2100 = v78 + 1;
  v82 = v78;
  if (v81 <= v78 + 1)
    v81 = v78 + 1;
  if (v81 <= v2132)
    v81 = v2132;
  v2105 = ((((v2034 + (v80 & ~v49) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v81 <= v2105)
    v81 = ((((v2034 + (v80 & ~v49) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v81 <= v2130)
    v81 = v2130;
  if (v81 <= 0x38)
    v83 = 56;
  else
    v83 = v81;
  v3 = a1;
  v84 = (unsigned __int8 *)a1 + v83;
  v2025 = v46;
  v2009 = *(_QWORD *)(v2096 - 8);
  v2002 = v74;
  if (v83 > 3)
    goto LABEL_106;
  v85 = ((1 << (8 * v83)) + 5) >> (8 * v83);
  if (v85 > 0xFFD8)
  {
    v86 = *(_DWORD *)v84;
  }
  else
  {
    if (v85 <= 0xD8)
    {
LABEL_106:
      v86 = *v84;
      goto LABEL_109;
    }
    v86 = *(unsigned __int16 *)v84;
  }
LABEL_109:
  v87 = AssociatedTypeWitness;
  v88 = v2122;
  if (v86 >= 0x27)
  {
    if (v83 <= 3)
      v89 = v83;
    else
      v89 = 4;
    __asm { BR              X16 }
  }
  v2083 = (_DWORD *)((char *)a1 + v83);
  v2082 = ~v2126;
  v2081 = ~v2133;
  v2068 = ~v2125;
  v2078 = ~v2137;
  v2051 = ~v2116;
  v2076 = ~(v30 | 7);
  v90 = ~v30;
  v2117 = ~v2128;
  v2041 = v44;
  v2084 = ~v44;
  v2052 = ~v43;
  v2018 = v44 | v2126 | v30;
  v2036 = ~v50;
  v2005 = ~v63;
  v2004 = ~v76;
  v2030 = ~v49;
  v91 = v2123;
  v92 = v2118;
  switch(v86)
  {
    case 0u:
    case 0x12u:
      v93 = v2123;
      v94 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, uint64_t))(v2124 + 8))(a1, AssociatedTypeWitness);
      (*(void (**)(unint64_t, uint64_t))(v2122 + 8))(((unint64_t)a1 + v2042) & v2082, v2118);
LABEL_116:
      v87 = v94;
      goto LABEL_502;
    case 1u:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v97 = v2146;
        else
          v97 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 2u:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v98 = v2146;
        else
          v98 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 3u:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v99 = v2146;
        else
          v99 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 4u:
      v100 = *((unsigned __int8 *)a1 + v2146);
      if (v100 >= 2)
      {
        if (v2146 <= 3)
          v101 = v2146;
        else
          v101 = 4;
        __asm { BR              X12 }
      }
      v93 = v2123;
      v190 = v2124;
      if (v100 == 1)
        v190 = v2122;
      v191 = AssociatedTypeWitness;
      if (v100 == 1)
        v192 = v2118;
      else
        v192 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v190 + 8))(a1, v192, AssociatedTypeWitness);
      v193 = *(unsigned __int8 *)((((unint64_t)a1 + v2074) & v2081) + v2146);
      if (v193 >= 2)
      {
        if (v2146 <= 3)
          v194 = v2146;
        else
          v194 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_391;
    case 5u:
      v102 = v2108;
      v103 = v2048;
      if (v2108 == v2048)
      {
        v104 = v2123;
        v105 = AssociatedTypeWitness;
        v106 = (*(uint64_t (**)(_QWORD *, _QWORD))(v2124 + 48))(a1, v2108);
        v103 = v2048;
        goto LABEL_402;
      }
      v165 = ((unint64_t)a1 + v2067) & v2068;
      v166 = (v165 + v2115 + v2137) & v2078;
      if (v2045 == v2048)
      {
        if (v2039 == v2045)
        {
          v104 = v2123;
          v106 = (*(uint64_t (**)(unint64_t))(v2060 + 48))((v165 + v2115 + v2137) & v2078);
LABEL_400:
          v103 = v2048;
LABEL_401:
          v105 = AssociatedTypeWitness;
LABEL_402:
          if (v106)
            goto LABEL_415;
          v165 = ((unint64_t)a1 + v2067) & v2068;
          v166 = (v165 + v2115 + v2137) & v2078;
LABEL_404:
          v212 = *(void (**)(_QWORD *, uint64_t))(v2124 + 8);
          v212(a1, AssociatedTypeWitness);
          v212((_QWORD *)v165, AssociatedTypeWitness);
          (*(void (**)(unint64_t, uint64_t))(v2060 + 8))(v166, v2061);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v2054 + 8))((v2053 + ((v2064 + v166) & 0xFFFFFFFFFFFFFFF8)) & v2051, v2055);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v213 = (v2120 + v2119 + v166) & v2076;
          v214 = *(void (**)(size_t, uint64_t))(v2080 + 8);
          v214((v2077 + v213) & ~v30, v2079);
          v215 = (v2073 + ((v2077 + v213) & ~v30)) & ~v30;
          v214(v215, v2079);
          swift_bridgeObjectRelease();
          v216 = (v2070
                + ((((((v2043 + v215) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v30;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2080 + 48))(v216, 1, v2079))
            v214(v216, v2079);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v217 = *(_QWORD *)(((((((v2071 + v216) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                           + 8);
          if ((v217 & 0x3000000000000000) == 0)
            sub_23AAAE53C(*(_QWORD *)((((((v2071 + v216) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v217);
          swift_bridgeObjectRelease();
          v218 = v2072 + v213;
          v219 = *(void **)(v218 + 16);
          LODWORD(v220) = -1;
          if ((unint64_t)v219 < 0xFFFFFFFF)
            v220 = *(_QWORD *)(v218 + 16);
          v104 = v2123;
          v92 = v2118;
          v105 = AssociatedTypeWitness;
          v102 = v2108;
          if ((int)v220 - 1 < 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v218 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_23AAA12F0(*(_QWORD *)((((v218 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v218 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          v90 = ~v30;
          v103 = v2048;
LABEL_415:
          v221 = ((unint64_t)a1 + v2019) & v2117;
          if ((_DWORD)v102 == v103)
          {
            v222 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2124 + 48))(((unint64_t)a1 + v2019) & v2117, v102, v105);
LABEL_431:
            v91 = v104;
LABEL_432:
            if (v222)
              goto LABEL_482;
            v223 = (v2067 + v221) & v2068;
            v224 = (v2038 + v223) & v2078;
            goto LABEL_434;
          }
          v91 = v104;
LABEL_418:
          v223 = (v2067 + v221) & v2068;
          v224 = (v2038 + v223) & v2078;
          if (v2045 == v103)
          {
            v225 = v2039;
            if (v2039 == v2045)
            {
              v226 = v2061;
              v227 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2060 + 48);
              v228 = (v2038 + v223) & v2078;
LABEL_430:
              v104 = v91;
              v222 = v227(v228, v225, v226);
              goto LABEL_431;
            }
            v231 = (unint64_t *)((v2064 + v224) & 0xFFFFFFFFFFFFFFF8);
            if (v2026 > 0x7FFFFFFE)
            {
              v228 = ((unint64_t)v231 + v2053) & v2051;
              v226 = v2055;
              v227 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2054 + 48);
              v225 = v2016;
              goto LABEL_430;
            }
            v232 = *v231;
          }
          else
          {
            v229 = v224 + v2119;
            if ((v2024 & 0x80000000) == 0)
            {
              v230 = *(_QWORD *)(v229 + 8);
              if (v230 >= 0xFFFFFFFF)
                LODWORD(v230) = -1;
              v222 = v230 + 1;
              goto LABEL_432;
            }
            v233 = (v2077 + ((v2120 + v229) & v2076)) & v90;
            if (v2059 > 0x7FFFFFFD)
            {
              v104 = v91;
              v222 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2080 + 48))(v233, v2059, v2079);
              goto LABEL_431;
            }
            v232 = *(_QWORD *)(((v2043 + ((v2073 + v233) & v90)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v232 >= 0xFFFFFFFF)
            LODWORD(v232) = -1;
          if ((v232 + 1) < 2)
          {
LABEL_434:
            v1982 = v82;
            v234 = v83;
            v235 = v90;
            v236 = *(void (**)(unint64_t, uint64_t))(v2124 + 8);
            v236(v221, AssociatedTypeWitness);
            v236(v223, AssociatedTypeWitness);
            (*(void (**)(unint64_t, uint64_t))(v2060 + 8))(v224, v2061);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v2054 + 8))((v2053 + ((v2064 + v224) & 0xFFFFFFFFFFFFFFF8)) & v2051, v2055);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v237 = v2119;
            goto LABEL_471;
          }
LABEL_482:
          v269 = v2075;
          v87 = AssociatedTypeWitness;
          v88 = v2122;
          if (v2059)
            goto LABEL_504;
          goto LABEL_503;
        }
        v186 = (unint64_t *)((v2064 + v166) & 0xFFFFFFFFFFFFFFF8);
        if (v2026 > 0x7FFFFFFE)
        {
          v104 = v2123;
          v106 = (*(uint64_t (**)(unint64_t))(v2054 + 48))(((unint64_t)v186 + v2053) & v2051);
          goto LABEL_400;
        }
        v187 = *v186;
      }
      else
      {
        v171 = v2119 + v166;
        if ((v2024 & 0x80000000) == 0)
        {
          v104 = v2123;
          v172 = *(_QWORD *)(v171 + 8);
          if (v172 >= 0xFFFFFFFF)
            LODWORD(v172) = -1;
          v106 = v172 + 1;
          goto LABEL_401;
        }
        v210 = (v2077 + ((v2120 + v171) & v2076)) & v90;
        if (v2059 > 0x7FFFFFFD)
        {
          v104 = v2123;
          v106 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v210);
          goto LABEL_400;
        }
        v187 = *(_QWORD *)(((v2043 + ((v2073 + v210) & v90)) & 0xFFFFFFFFFFFFF8) + 8);
      }
      if (v187 >= 0xFFFFFFFF)
        LODWORD(v187) = -1;
      if ((v187 + 1) >= 2)
      {
        v221 = ((unint64_t)a1 + v2019) & v2117;
        goto LABEL_418;
      }
      goto LABEL_404;
    case 6u:
      v107 = v2047;
      if (v2044 == v2047)
      {
        v108 = v2123;
        v109 = (*(uint64_t (**)(_QWORD *))(v2122 + 48))(a1);
        v107 = v2047;
LABEL_438:
        if (v109)
        {
LABEL_451:
          v248 = ((unint64_t)a1 + v51) & v2036;
          if (v2044 == v107)
          {
            v249 = (*(uint64_t (**)(unint64_t))(v88 + 48))(((unint64_t)a1 + v51) & v2036);
LABEL_467:
            v91 = v108;
LABEL_468:
            if (v249)
              goto LABEL_482;
            v250 = (v2066 + v248) & v2082;
            v224 = (v2037 + v250) & v2084;
            goto LABEL_470;
          }
          v91 = v108;
LABEL_454:
          v250 = (v2066 + v248) & v2082;
          v224 = (v2037 + v250) & v2084;
          if (v2046 == v107)
          {
            if (v2040 == v2046)
            {
              v251 = *(uint64_t (**)(unint64_t))(v2062 + 48);
              v252 = (v2037 + v250) & v2084;
LABEL_466:
              v108 = v91;
              v249 = v251(v252);
              goto LABEL_467;
            }
            v255 = (unint64_t *)((v2065 + v224) & 0xFFFFFFFFFFFFFFF8);
            if (v2027 > 0x7FFFFFFE)
            {
              v252 = ((unint64_t)v255 + v2056) & v2052;
              v251 = *(uint64_t (**)(unint64_t))(v2057 + 48);
              goto LABEL_466;
            }
            v256 = *v255;
          }
          else
          {
            v253 = v224 + v2069;
            if ((v2023 & 0x80000000) == 0)
            {
              v254 = *(_QWORD *)(v253 + 8);
              if (v254 >= 0xFFFFFFFF)
                LODWORD(v254) = -1;
              v249 = v254 + 1;
              goto LABEL_468;
            }
            v257 = (v2077 + ((v2120 + v253) & v2076)) & v90;
            if (v2059 > 0x7FFFFFFD)
            {
              v108 = v91;
              v249 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v257);
              goto LABEL_467;
            }
            v256 = *(_QWORD *)(((v2043 + ((v2073 + v257) & v90)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v256 >= 0xFFFFFFFF)
            LODWORD(v256) = -1;
          if ((v256 + 1) >= 2)
            goto LABEL_482;
LABEL_470:
          v1982 = v82;
          v258 = v92;
          v234 = v83;
          v235 = v90;
          v259 = *(void (**)(unint64_t, uint64_t))(v2122 + 8);
          v259(v248, v258);
          v259(v250, v258);
          (*(void (**)(unint64_t, uint64_t))(v2062 + 8))(v224, v2063);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v2057 + 8))((v2056 + ((v2065 + v224) & 0xFFFFFFFFFFFFFFF8)) & v2052, v2058);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v237 = v2069;
LABEL_471:
          v260 = v224 + v237;
          swift_bridgeObjectRelease();
          v261 = (v2120 + v260) & v2076;
          v262 = *(void (**)(uint64_t, uint64_t))(v2080 + 8);
          v262((v2077 + v261) & v235, v2079);
          v263 = (v2073 + ((v2077 + v261) & v235)) & v235;
          v262(v263, v2079);
          swift_bridgeObjectRelease();
          v1994 = v235;
          v264 = (v2070
                + ((((((v2043 + v263) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v235;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2080 + 48))(v264, 1, v2079))
            v262(v264, v2079);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v265 = *(_QWORD *)(((((((v2071 + v264) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                           + 8);
          if ((v265 & 0x3000000000000000) == 0)
            sub_23AAAE53C(*(_QWORD *)((((((v2071 + v264) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v265);
          swift_bridgeObjectRelease();
          v266 = v261 + v2072;
          v267 = *(void **)(v266 + 16);
          LODWORD(v268) = -1;
          if ((unint64_t)v267 < 0xFFFFFFFF)
            v268 = *(_QWORD *)(v266 + 16);
          v83 = v234;
          v82 = v1982;
          v92 = v2118;
          if ((int)v268 - 1 < 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v266 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_23AAA12F0(*(_QWORD *)((((v266 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v266 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          v90 = v1994;
          v91 = v2123;
          goto LABEL_482;
        }
        v167 = ((unint64_t)a1 + v2066) & v2082;
        v168 = (v167 + v2114 + v2041) & v2084;
LABEL_440:
        v238 = v83;
        v239 = *(void (**)(_QWORD *, uint64_t))(v2122 + 8);
        v239(a1, v2118);
        v239((_QWORD *)v167, v2118);
        (*(void (**)(unint64_t, uint64_t))(v2062 + 8))(v168, v2063);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v2057 + 8))((v2056 + ((v2065 + v168) & 0xFFFFFFFFFFFFFFF8)) & v2052, v2058);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v240 = (v2120 + v2069 + v168) & v2076;
        v241 = *(void (**)(unint64_t, uint64_t))(v2080 + 8);
        v241((v2077 + v240) & ~v30, v2079);
        v242 = (v2073 + ((v2077 + v240) & ~v30)) & ~v30;
        v241(v242, v2079);
        swift_bridgeObjectRelease();
        v243 = (v2070
              + ((((((v2043 + v242) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v30;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2080 + 48))(v243, 1, v2079))
          v241(v243, v2079);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v244 = *(_QWORD *)(((((((v2071 + v243) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 8);
        if ((v244 & 0x3000000000000000) == 0)
          sub_23AAAE53C(*(_QWORD *)((((((v2071 + v243) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v244);
        swift_bridgeObjectRelease();
        v245 = v2072 + v240;
        v246 = *(void **)(v245 + 16);
        LODWORD(v247) = -1;
        if ((unint64_t)v246 < 0xFFFFFFFF)
          v247 = *(_QWORD *)(v245 + 16);
        v83 = v238;
        v88 = v2122;
        v108 = v2123;
        v92 = v2118;
        if ((int)v247 - 1 < 0)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v245 + 192))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_23AAA12F0(*(_QWORD *)((((v245 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v245 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
        v90 = ~v30;
        v107 = v2047;
        goto LABEL_451;
      }
      v167 = ((unint64_t)a1 + v2066) & v2082;
      v168 = (v167 + v2114 + v44) & v2084;
      if (v2046 == v2047)
      {
        if (v2040 == v2046)
        {
          v108 = v2123;
          v109 = (*(uint64_t (**)(unint64_t))(v2062 + 48))((v167 + v2114 + v2041) & v2084);
LABEL_436:
          v107 = v2047;
LABEL_437:
          v88 = v2122;
          goto LABEL_438;
        }
        v188 = (unint64_t *)((v2065 + v168) & 0xFFFFFFFFFFFFFFF8);
        if (v2027 > 0x7FFFFFFE)
        {
          v108 = v2123;
          v109 = (*(uint64_t (**)(unint64_t))(v2057 + 48))(((unint64_t)v188 + v2056) & v2052);
          goto LABEL_436;
        }
        v189 = *v188;
      }
      else
      {
        v173 = v2069 + v168;
        if ((v2023 & 0x80000000) == 0)
        {
          v108 = v2123;
          v174 = *(_QWORD *)(v173 + 8);
          if (v174 >= 0xFFFFFFFF)
            LODWORD(v174) = -1;
          v109 = v174 + 1;
          goto LABEL_437;
        }
        v211 = (v2077 + ((v2120 + v173) & v2076)) & v90;
        if (v2059 > 0x7FFFFFFD)
        {
          v108 = v2123;
          v109 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v211);
          goto LABEL_436;
        }
        v189 = *(_QWORD *)(((v2043 + ((v2073 + v211) & v90)) & 0xFFFFFFFFFFFFF8) + 8);
      }
      if (v189 >= 0xFFFFFFFF)
        LODWORD(v189) = -1;
      if ((v189 + 1) >= 2)
      {
        v248 = ((unint64_t)a1 + v51) & v2036;
        goto LABEL_454;
      }
      goto LABEL_440;
    case 7u:
      v1981 = v82;
      v110 = *(void (**)(_QWORD *, uint64_t))(v2124 + 8);
      v110(a1, AssociatedTypeWitness);
      v110((_QWORD *)(((unint64_t)a1 + v2067) & v2068), AssociatedTypeWitness);
      v111 = ((((unint64_t)a1 + v2067) & v2068) + v2115 + v2137) & v2078;
      (*(void (**)(unint64_t, uint64_t))(v2060 + 8))(v111, v2061);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v2054 + 8))((v2053 + ((v2064 + v111) & 0xFFFFFFFFFFFFFFF8)) & v2051, v2055);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v112 = (v2120 + v2119 + v111) & v2076;
      v113 = *(void (**)(size_t, uint64_t))(v2080 + 8);
      v113((v2077 + v112) & ~v30, v2079);
      v114 = (v2073 + ((v2077 + v112) & ~v30)) & ~v30;
      v113(v114, v2079);
      swift_bridgeObjectRelease();
      v1993 = ~v30;
      v115 = (v2070
            + ((((((v2043 + v114) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v30;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2080 + 48))(v115, 1, v2079))
        v113(v115, v2079);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v116 = *(_QWORD *)(((((((v2071 + v115) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 8);
      if ((v116 & 0x3000000000000000) == 0)
        sub_23AAAE53C(*(_QWORD *)((((((v2071 + v115) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v116);
      swift_bridgeObjectRelease();
      v117 = v2072 + v112;
      v118 = *(void **)(v117 + 16);
      LODWORD(v119) = -1;
      if ((unint64_t)v118 < 0xFFFFFFFF)
        v119 = *(_QWORD *)(v117 + 16);
      v120 = (int)v119 - 1 < 0;
      goto LABEL_156;
    case 8u:
      v1981 = v82;
      v121 = *(void (**)(unint64_t, uint64_t))(v2122 + 8);
      ((void (*)(_QWORD *, uint64_t, uint64_t))v121)(a1, v2118, AssociatedTypeWitness);
      v121(((unint64_t)a1 + v2066) & v2082, v2118);
      v122 = ((((unint64_t)a1 + v2066) & v2082) + v2114 + v44) & v2084;
      (*(void (**)(unint64_t, uint64_t))(v2062 + 8))(v122, v2063);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v2057 + 8))((v2056 + ((v2065 + v122) & 0xFFFFFFFFFFFFFFF8)) & v2052, v2058);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v123 = (v2120 + v2069 + v122) & v2076;
      v124 = *(void (**)(unint64_t, uint64_t))(v2080 + 8);
      v124((v2077 + v123) & ~v30, v2079);
      v125 = (v2073 + ((v2077 + v123) & ~v30)) & ~v30;
      v124(v125, v2079);
      swift_bridgeObjectRelease();
      v1993 = ~v30;
      v126 = (v2070
            + ((((((v2043 + v125) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v30;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2080 + 48))(v126, 1, v2079))
        v124(v126, v2079);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v127 = *(_QWORD *)(((((((v2071 + v126) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 8);
      if ((v127 & 0x3000000000000000) == 0)
        sub_23AAAE53C(*(_QWORD *)((((((v2071 + v126) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v127);
      swift_bridgeObjectRelease();
      v117 = v2072 + v123;
      v118 = *(void **)(v117 + 16);
      LODWORD(v128) = -1;
      if ((unint64_t)v118 < 0xFFFFFFFF)
        v128 = *(_QWORD *)(v117 + 16);
      v120 = (int)v128 - 1 < 0;
LABEL_156:
      v82 = v1981;
      v88 = v2122;
      v92 = v2118;
      if (v120)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v117 + 192))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      sub_23AAA12F0(*(_QWORD *)((((v117 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v117 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
      v90 = v1993;
      v91 = v2123;
      v87 = AssociatedTypeWitness;
      goto LABEL_503;
    case 9u:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v129 = v2146;
        else
          v129 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 0xAu:
      v130 = v2146;
      v131 = *((unsigned __int8 *)a1 + v2146);
      if (v131 >= 2)
      {
        if (v2146 <= 3)
          v132 = v2146;
        else
          v132 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_286;
    case 0xBu:
      v130 = v2146;
      v131 = *((unsigned __int8 *)a1 + v2146);
      if (v131 >= 2)
      {
        if (v2146 <= 3)
          v133 = v2146;
        else
          v133 = 4;
        __asm { BR              X12 }
      }
LABEL_286:
      v93 = v2123;
      v195 = v2124;
      if (v131 == 1)
      {
        v195 = v2122;
        v196 = v2118;
      }
      else
      {
        v196 = AssociatedTypeWitness;
      }
      v191 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, uint64_t))(v195 + 8))(a1, v196);
      v87 = AssociatedTypeWitness;
      v197 = *(unsigned __int8 *)((((unint64_t)a1 + v2074) & v2081) + v130);
      v91 = v2123;
      if (v197 > 1)
        goto LABEL_503;
      if (v197 == 1)
        goto LABEL_392;
      v198 = *(void (**)(void))(v2124 + 8);
      goto LABEL_394;
    case 0xCu:
      v134 = *((unsigned __int8 *)a1 + v2146);
      if (v134 >= 2)
      {
        if (v2146 <= 3)
          v135 = v2146;
        else
          v135 = 4;
        __asm { BR              X12 }
      }
      v93 = v2123;
      v199 = v2124;
      if (v134 == 1)
      {
        v199 = v2122;
        v200 = v2118;
      }
      else
      {
        v200 = AssociatedTypeWitness;
      }
      v201 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, uint64_t))(v199 + 8))(a1, v200);
      v202 = v2146 + 2;
      goto LABEL_366;
    case 0xDu:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v136 = v2146;
        else
          v136 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 0xEu:
      v137 = *((unsigned __int8 *)a1 + v2146);
      if (v137 >= 2)
      {
        if (v2146 <= 3)
          v138 = v2146;
        else
          v138 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_287;
    case 0xFu:
      v137 = *((unsigned __int8 *)a1 + v2146);
      if (v137 >= 2)
      {
        if (v2146 <= 3)
          v139 = v2146;
        else
          v139 = 4;
        __asm { BR              X12 }
      }
LABEL_287:
      v93 = v2123;
      v203 = v2124;
      if (v137 == 1)
      {
        v203 = v2122;
        v204 = v2118;
      }
      else
      {
        v204 = AssociatedTypeWitness;
      }
      v201 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, uint64_t))(v203 + 8))(a1, v204);
      v202 = v2145;
LABEL_366:

      v87 = v201;
      goto LABEL_502;
    case 0x10u:
      v140 = a1[2];
      if (v140 >> 60 == 15)
        goto LABEL_503;
      v93 = v2123;
      v95 = AssociatedTypeWitness;
      sub_23AAAE53C(a1[1], v140);
      goto LABEL_501;
    case 0x11u:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v141 = v2146;
        else
          v141 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 0x13u:
      v142 = ((unint64_t)a1 + v2133 + 1) & v2081;
      v143 = *(unsigned __int8 *)(v142 + v2146);
      if (v143 >= 2)
      {
        if (v2146 <= 3)
          v144 = v2146;
        else
          v144 = 4;
        __asm { BR              X12 }
      }
      v93 = v2123;
      if (v143 == 1)
      {
        v163 = *(void (**)(uint64_t, uint64_t))(v2122 + 8);
        goto LABEL_285;
      }
      v163 = *(void (**)(uint64_t, uint64_t))(v2124 + 8);
      goto LABEL_499;
    case 0x14u:
    case 0x15u:
      v93 = v2123;
      v95 = AssociatedTypeWitness;
      swift_release();
      goto LABEL_501;
    case 0x18u:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v145 = v2146;
        else
          v145 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 0x19u:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v146 = v2146;
        else
          v146 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 0x1Au:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v147 = v2146;
        else
          v147 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 0x1Bu:
      v148 = *((unsigned __int8 *)a1 + v82);
      if (v148 >= 2)
      {
        if (v82 <= 3)
          v149 = v82;
        else
          v149 = 4;
        __asm { BR              X12 }
      }
      if (v148 == 1)
      {
        v93 = v2123;
        switch(*((_BYTE *)a1 + v2028))
        {
          case 0:
            v1995 = ~v30;
            v270 = *(void (**)(unint64_t, uint64_t))(v2122 + 8);
            ((void (*)(_QWORD *, uint64_t, uint64_t))v270)(a1, v2118, AssociatedTypeWitness);
            v271 = ((unint64_t)a1 + v2013) & v2036;
            if (v2044 == v2047)
            {
              v272 = (*(uint64_t (**)(unint64_t))(v2122 + 48))(((unint64_t)a1 + v2013) & v2036);
LABEL_1721:
              if (v272)
                goto LABEL_1734;
              v1223 = (v2066 + v271) & v2082;
              v1224 = (v2037 + v1223) & v2084;
              goto LABEL_1723;
            }
            v1223 = (v2066 + v271) & v2082;
            v1224 = (v2037 + v1223) & v2084;
            if (v2046 == v2047)
            {
              if (v2040 == v2046)
              {
                v272 = (*(uint64_t (**)(unint64_t))(v2062 + 48))((v2037 + v1223) & v2084);
                goto LABEL_1721;
              }
              v1456 = (unint64_t *)((v2065 + v1224) & 0xFFFFFFFFFFFFFFF8);
              if (v2027 > 0x7FFFFFFE)
              {
                v272 = (*(uint64_t (**)(unint64_t))(v2057 + 48))(((unint64_t)v1456 + v2056) & v2052);
                goto LABEL_1721;
              }
              v1457 = *v1456;
            }
            else
            {
              v1260 = v1224 + v2069;
              if ((v2023 & 0x80000000) == 0)
              {
                v1261 = *(_QWORD *)(v1260 + 8);
                if (v1261 >= 0xFFFFFFFF)
                  LODWORD(v1261) = -1;
                v272 = v1261 + 1;
                goto LABEL_1721;
              }
              v1480 = (v2077 + ((v2120 + v1260) & v2076)) & v1995;
              if (v2059 > 0x7FFFFFFD)
              {
                v272 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v1480);
                goto LABEL_1721;
              }
              v1457 = *(_QWORD *)(((v2043 + ((v2073 + v1480) & v1995)) & 0xFFFFFFFFFFFFF8) + 8);
            }
            if (v1457 >= 0xFFFFFFFF)
              LODWORD(v1457) = -1;
            if ((v1457 + 1) < 2)
            {
LABEL_1723:
              v270(v271, v2118);
              v270(v1223, v2118);
              (*(void (**)(unint64_t, uint64_t))(v2062 + 8))(v1224, v2063);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v2057 + 8))((v2056 + ((v2065 + v1224) & 0xFFFFFFFFFFFFFFF8)) & v2052, v2058);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v1492 = (v2120 + v1224 + v2069) & v2076;
              v1493 = *(void (**)(unint64_t, uint64_t))(v2080 + 8);
              v1493((v2077 + v1492) & v1995, v2079);
              v1494 = (v2073 + ((v2077 + v1492) & v1995)) & v1995;
              v1493(v1494, v2079);
              swift_bridgeObjectRelease();
              v1495 = (v2070
                     + ((((((v2043 + v1494) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v1995;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2080 + 48))(v1495, 1, v2079))
                v1493(v1495, v2079);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v1496 = *(_QWORD *)(((((((v2071 + v1495) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 8);
              if ((v1496 & 0x3000000000000000) == 0)
                sub_23AAAE53C(*(_QWORD *)((((((v2071 + v1495) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v1496);
              swift_bridgeObjectRelease();
              v1497 = v1492 + v2072;
              v1498 = *(void **)(v1497 + 16);
              LODWORD(v1499) = -1;
              if ((unint64_t)v1498 < 0xFFFFFFFF)
                v1499 = *(_QWORD *)(v1497 + 16);
              v93 = v2123;
              v92 = v2118;
              if ((int)v1499 - 1 < 0)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(v1497 + 192))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              sub_23AAA12F0(*(_QWORD *)((((v1497 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v1497 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            }
LABEL_1734:
            v1500 = __na;
            goto LABEL_1793;
          case 1:
            v1996 = ~v30;
            v273 = *(void (**)(unint64_t, uint64_t))(v2122 + 8);
            ((void (*)(_QWORD *, uint64_t, uint64_t))v273)(a1, v2118, AssociatedTypeWitness);
            v274 = ((unint64_t)a1 + v2013) & v2036;
            if (v2044 == v2047)
            {
              v275 = (*(uint64_t (**)(unint64_t))(v2122 + 48))(((unint64_t)a1 + v2013) & v2036);
LABEL_1736:
              if (v275)
                goto LABEL_1749;
              v1225 = (v2066 + v274) & v2082;
              v1226 = (v2037 + v1225) & v2084;
              goto LABEL_1738;
            }
            v1225 = (v2066 + v274) & v2082;
            v1226 = (v2037 + v1225) & v2084;
            if (v2046 == v2047)
            {
              if (v2040 == v2046)
              {
                v275 = (*(uint64_t (**)(unint64_t))(v2062 + 48))((v2037 + v1225) & v2084);
                goto LABEL_1736;
              }
              v1458 = (unint64_t *)((v2065 + v1226) & 0xFFFFFFFFFFFFFFF8);
              if (v2027 > 0x7FFFFFFE)
              {
                v275 = (*(uint64_t (**)(unint64_t))(v2057 + 48))(((unint64_t)v1458 + v2056) & v2052);
                goto LABEL_1736;
              }
              v1459 = *v1458;
            }
            else
            {
              v1262 = v1226 + v2069;
              if ((v2023 & 0x80000000) == 0)
              {
                v1263 = *(_QWORD *)(v1262 + 8);
                if (v1263 >= 0xFFFFFFFF)
                  LODWORD(v1263) = -1;
                v275 = v1263 + 1;
                goto LABEL_1736;
              }
              v1481 = (v2077 + ((v2120 + v1262) & v2076)) & v1996;
              if (v2059 > 0x7FFFFFFD)
              {
                v275 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v1481);
                goto LABEL_1736;
              }
              v1459 = *(_QWORD *)(((v2043 + ((v2073 + v1481) & v1996)) & 0xFFFFFFFFFFFFF8) + 8);
            }
            if (v1459 >= 0xFFFFFFFF)
              LODWORD(v1459) = -1;
            if ((v1459 + 1) < 2)
            {
LABEL_1738:
              v273(v274, v2118);
              v273(v1225, v2118);
              (*(void (**)(unint64_t, uint64_t))(v2062 + 8))(v1226, v2063);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v2057 + 8))((v2056 + ((v2065 + v1226) & 0xFFFFFFFFFFFFFFF8)) & v2052, v2058);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v1501 = (v2120 + v1226 + v2069) & v2076;
              v1502 = *(void (**)(unint64_t, uint64_t))(v2080 + 8);
              v1502((v2077 + v1501) & v1996, v2079);
              v1503 = (v2073 + ((v2077 + v1501) & v1996)) & v1996;
              v1502(v1503, v2079);
              swift_bridgeObjectRelease();
              v1504 = (v2070
                     + ((((((v2043 + v1503) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v1996;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2080 + 48))(v1504, 1, v2079))
                v1502(v1504, v2079);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v1505 = *(_QWORD *)(((((((v2071 + v1504) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 8);
              if ((v1505 & 0x3000000000000000) == 0)
                sub_23AAAE53C(*(_QWORD *)((((((v2071 + v1504) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v1505);
              swift_bridgeObjectRelease();
              v1506 = v1501 + v2072;
              v1507 = *(void **)(v1506 + 16);
              LODWORD(v1508) = -1;
              if ((unint64_t)v1507 < 0xFFFFFFFF)
                v1508 = *(_QWORD *)(v1506 + 16);
              v93 = v2123;
              v92 = v2118;
              if ((int)v1508 - 1 < 0)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(v1506 + 192))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              sub_23AAA12F0(*(_QWORD *)((((v1506 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v1506 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            }
LABEL_1749:
            v1509 = (v274 + v2125 + __na) & v2068;
            v277 = AssociatedTypeWitness;
            if (!(*(unsigned int (**)(size_t, uint64_t))(v2124 + 48))(v1509, 1))
              (*(void (**)(size_t, uint64_t))(v2124 + 8))(v1509, AssociatedTypeWitness);
            v1510 = (v2011 + v1509) & v2078;
            if (v2039 == v2045)
            {
              v1511 = (*(uint64_t (**)(size_t))(v2060 + 48))(v1510);
              v88 = v2122;
LABEL_1759:
              if (v1511)
                goto LABEL_1762;
              v1512 = (uint64_t *)((v2064 + v1510) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_1761;
            }
            v1512 = (uint64_t *)((v2064 + v1510) & 0xFFFFFFFFFFFFFFF8);
            v88 = v2122;
            if (v2026 > 0x7FFFFFFE)
            {
              v1511 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v2054 + 48))(((unint64_t)v1512 + v2053) & v2051, v2016, v2055);
              goto LABEL_1759;
            }
            v1513 = *v1512;
            if ((unint64_t)*v1512 >= 0xFFFFFFFF)
              LODWORD(v1513) = -1;
            if ((v1513 + 1) < 2)
            {
LABEL_1761:
              (*(void (**)(size_t, uint64_t))(v2060 + 8))(v1510, v2061);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v2054 + 8))(((unint64_t)v1512 + v2053) & v2051, v2055);
              v277 = AssociatedTypeWitness;
              v88 = v2122;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
LABEL_1762:
            v1514 = v2119;
            goto LABEL_1822;
          case 2:
            (*(void (**)(_QWORD *, uint64_t))(v2122 + 8))(a1, v2118);
            v276 = ((unint64_t)a1 + v2007) & v2068;
            v277 = AssociatedTypeWitness;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2124 + 48))(v276, 1, AssociatedTypeWitness))(*(void (**)(unint64_t, uint64_t))(v2124 + 8))(v276, AssociatedTypeWitness);
            v1996 = ~v30;
            v278 = (v2011 + v276) & v2078;
            if (v2039 == v2045)
            {
              v279 = (*(uint64_t (**)(unint64_t))(v2060 + 48))(v278);
LABEL_1584:
              if (v279)
                goto LABEL_1587;
              v1227 = (uint64_t *)((v2064 + v278) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_1586;
            }
            v1227 = (uint64_t *)((v2064 + v278) & 0xFFFFFFFFFFFFFFF8);
            if (v2026 > 0x7FFFFFFE)
            {
              v279 = (*(uint64_t (**)(unint64_t))(v2054 + 48))(((unint64_t)v1227 + v2053) & v2051);
              goto LABEL_1584;
            }
            v1228 = *v1227;
            if ((unint64_t)*v1227 >= 0xFFFFFFFF)
              LODWORD(v1228) = -1;
            if ((v1228 + 1) < 2)
            {
LABEL_1586:
              (*(void (**)(unint64_t, uint64_t))(v2060 + 8))(v278, v2061);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v2054 + 8))(((unint64_t)v1227 + v2053) & v2051, v2055);
              v277 = AssociatedTypeWitness;
              v88 = v2122;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
LABEL_1587:
            v1264 = v2119;
            goto LABEL_1605;
          case 3:
            v1995 = ~v30;
            v280 = *(void (**)(unint64_t, uint64_t))(v2122 + 8);
            ((void (*)(_QWORD *, uint64_t, uint64_t))v280)(a1, v2118, AssociatedTypeWitness);
            v281 = ((unint64_t)a1 + v2013) & v2036;
            if (v2044 == v2047)
            {
              v282 = (*(uint64_t (**)(unint64_t))(v2122 + 48))(((unint64_t)a1 + v2013) & v2036);
LABEL_1764:
              if (v282)
                goto LABEL_1838;
              v1229 = (v2066 + v281) & v2082;
              v1230 = (v2037 + v1229) & v2084;
              goto LABEL_1766;
            }
            v1229 = (v2066 + v281) & v2082;
            v1230 = (v2037 + v1229) & v2084;
            if (v2046 == v2047)
            {
              if (v2040 == v2046)
              {
                v282 = (*(uint64_t (**)(unint64_t))(v2062 + 48))((v2037 + v1229) & v2084);
                goto LABEL_1764;
              }
              v1460 = (unint64_t *)((v2065 + v1230) & 0xFFFFFFFFFFFFFFF8);
              if (v2027 > 0x7FFFFFFE)
              {
                v282 = (*(uint64_t (**)(unint64_t))(v2057 + 48))(((unint64_t)v1460 + v2056) & v2052);
                goto LABEL_1764;
              }
              v1461 = *v1460;
            }
            else
            {
              v1265 = v1230 + v2069;
              if ((v2023 & 0x80000000) == 0)
              {
                v1266 = *(_QWORD *)(v1265 + 8);
                if (v1266 >= 0xFFFFFFFF)
                  LODWORD(v1266) = -1;
                v282 = v1266 + 1;
                goto LABEL_1764;
              }
              v1482 = (v2077 + ((v2120 + v1265) & v2076)) & v1995;
              if (v2059 > 0x7FFFFFFD)
              {
                v282 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v1482);
                goto LABEL_1764;
              }
              v1461 = *(_QWORD *)(((v2043 + ((v2073 + v1482) & v1995)) & 0xFFFFFFFFFFFFF8) + 8);
            }
            if (v1461 >= 0xFFFFFFFF)
              LODWORD(v1461) = -1;
            if ((v1461 + 1) < 2)
            {
LABEL_1766:
              v280(v281, v2118);
              v280(v1229, v2118);
              (*(void (**)(unint64_t, uint64_t))(v2062 + 8))(v1230, v2063);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v2057 + 8))((v2056 + ((v2065 + v1230) & 0xFFFFFFFFFFFFFFF8)) & v2052, v2058);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v1515 = (v2120 + v1230 + v2069) & v2076;
              v1516 = *(void (**)(unint64_t, uint64_t))(v2080 + 8);
              v1516((v2077 + v1515) & v1995, v2079);
              v1517 = (v2073 + ((v2077 + v1515) & v1995)) & v1995;
              v1516(v1517, v2079);
              swift_bridgeObjectRelease();
              v1518 = (v2070
                     + ((((((v2043 + v1517) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v1995;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2080 + 48))(v1518, 1, v2079))
                v1516(v1518, v2079);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v1519 = *(_QWORD *)(((((((v2071 + v1518) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 8);
              if ((v1519 & 0x3000000000000000) == 0)
                sub_23AAAE53C(*(_QWORD *)((((((v2071 + v1518) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v1519);
              swift_bridgeObjectRelease();
              v1520 = v1515 + v2072;
              v1521 = *(void **)(v1520 + 16);
              LODWORD(v1522) = -1;
              if ((unint64_t)v1521 < 0xFFFFFFFF)
                v1522 = *(_QWORD *)(v1520 + 16);
              v93 = v2123;
              v92 = v2118;
              if ((int)v1522 - 1 < 0)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(v1520 + 192))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              sub_23AAA12F0(*(_QWORD *)((((v1520 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v1520 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
              goto LABEL_1838;
            }
            break;
          case 4:
          case 5:
          case 7:
            goto LABEL_284;
          case 6:
            v94 = AssociatedTypeWitness;
            (*(void (**)(_QWORD *, uint64_t))(v2122 + 8))(a1, v2118);
            v283 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2009 + 48))(((unint64_t)a1 + v2006) & v2004, 1, v2096);
            v87 = AssociatedTypeWitness;
            v91 = v2123;
            if (v283)
              goto LABEL_503;
            (*(void (**)(unint64_t, uint64_t))(v2009 + 8))(((unint64_t)a1 + v2006) & v2004, v2096);
            goto LABEL_116;
          default:
            if (v2028 <= 3)
              v205 = v2028;
            else
              v205 = 4;
            __asm { BR              X12 }
            return result;
        }
        goto LABEL_1838;
      }
      v93 = v2123;
      switch(*((_BYTE *)a1 + v2029))
      {
        case 0:
          v1995 = ~v30;
          v847 = *(void (**)(_QWORD *, uint64_t))(v2124 + 8);
          v847(a1, AssociatedTypeWitness);
          v271 = ((unint64_t)a1 + v2014) & v2117;
          if (v2108 == v2048)
          {
            v848 = (*(uint64_t (**)(unint64_t))(v2124 + 48))(((unint64_t)a1 + v2014) & v2117);
LABEL_1779:
            if (v848)
              goto LABEL_1792;
            v1231 = (v2067 + v271) & v2068;
            v1232 = (v2038 + v1231) & v2078;
            goto LABEL_1781;
          }
          v1231 = (v2067 + v271) & v2068;
          v1232 = (v2038 + v1231) & v2078;
          if (v2045 == v2048)
          {
            if (v2039 == v2045)
            {
              v848 = (*(uint64_t (**)(unint64_t))(v2060 + 48))((v2038 + v1231) & v2078);
              goto LABEL_1779;
            }
            v1462 = (unint64_t *)((v2064 + v1232) & 0xFFFFFFFFFFFFFFF8);
            if (v2026 > 0x7FFFFFFE)
            {
              v848 = (*(uint64_t (**)(unint64_t))(v2054 + 48))(((unint64_t)v1462 + v2053) & v2051);
              goto LABEL_1779;
            }
            v1463 = *v1462;
          }
          else
          {
            v1267 = v1232 + v2119;
            if ((v2024 & 0x80000000) == 0)
            {
              v1268 = *(_QWORD *)(v1267 + 8);
              if (v1268 >= 0xFFFFFFFF)
                LODWORD(v1268) = -1;
              v848 = v1268 + 1;
              goto LABEL_1779;
            }
            v1483 = (v2077 + ((v2120 + v1267) & v2076)) & v1995;
            if (v2059 > 0x7FFFFFFD)
            {
              v848 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v1483);
              goto LABEL_1779;
            }
            v1463 = *(_QWORD *)(((v2043 + ((v2073 + v1483) & v1995)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v1463 >= 0xFFFFFFFF)
            LODWORD(v1463) = -1;
          if ((v1463 + 1) >= 2)
          {
LABEL_1792:
            v1500 = v2136;
LABEL_1793:

            goto LABEL_1839;
          }
LABEL_1781:
          v847((_QWORD *)v271, AssociatedTypeWitness);
          v847((_QWORD *)v1231, AssociatedTypeWitness);
          (*(void (**)(unint64_t, uint64_t))(v2060 + 8))(v1232, v2061);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v2054 + 8))((v2053 + ((v2064 + v1232) & 0xFFFFFFFFFFFFFFF8)) & v2051, v2055);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v1523 = (v2120 + v1232 + v2119) & v2076;
          v1524 = *(void (**)(size_t, uint64_t))(v2080 + 8);
          v1524((v2077 + v1523) & v1995, v2079);
          v1525 = (v2073 + ((v2077 + v1523) & v1995)) & v1995;
          v1524(v1525, v2079);
          swift_bridgeObjectRelease();
          v1526 = (v2070
                 + ((((((v2043 + v1525) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v1995;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2080 + 48))(v1526, 1, v2079))
            v1524(v1526, v2079);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v1527 = *(_QWORD *)(((((((v2071 + v1526) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 8);
          if ((v1527 & 0x3000000000000000) == 0)
            sub_23AAAE53C(*(_QWORD *)((((((v2071 + v1526) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v1527);
          swift_bridgeObjectRelease();
          v1528 = v2072 + v1523;
          v1529 = *(void **)(v1528 + 16);
          LODWORD(v1530) = -1;
          if ((unint64_t)v1529 < 0xFFFFFFFF)
            v1530 = *(_QWORD *)(v1528 + 16);
          v93 = v2123;
          v92 = v2118;
          if ((int)v1530 - 1 < 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v1528 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_23AAA12F0(*(_QWORD *)((((v1528 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v1528 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          goto LABEL_1792;
        case 1:
          v1996 = ~v30;
          v849 = *(void (**)(_QWORD *, uint64_t))(v2124 + 8);
          v849(a1, AssociatedTypeWitness);
          v850 = ((unint64_t)a1 + v2014) & v2117;
          if (v2108 == v2048)
          {
            v851 = (*(uint64_t (**)(unint64_t))(v2124 + 48))(((unint64_t)a1 + v2014) & v2117);
LABEL_1795:
            if (v851)
              goto LABEL_1808;
            v1233 = (v2067 + v850) & v2068;
            v1234 = (v2038 + v1233) & v2078;
            goto LABEL_1797;
          }
          v1233 = (v2067 + v850) & v2068;
          v1234 = (v2038 + v1233) & v2078;
          if (v2045 == v2048)
          {
            if (v2039 == v2045)
            {
              v851 = (*(uint64_t (**)(unint64_t))(v2060 + 48))((v2038 + v1233) & v2078);
              goto LABEL_1795;
            }
            v1464 = (unint64_t *)((v2064 + v1234) & 0xFFFFFFFFFFFFFFF8);
            if (v2026 > 0x7FFFFFFE)
            {
              v851 = (*(uint64_t (**)(unint64_t))(v2054 + 48))(((unint64_t)v1464 + v2053) & v2051);
              goto LABEL_1795;
            }
            v1465 = *v1464;
          }
          else
          {
            v1269 = v1234 + v2119;
            if ((v2024 & 0x80000000) == 0)
            {
              v1270 = *(_QWORD *)(v1269 + 8);
              if (v1270 >= 0xFFFFFFFF)
                LODWORD(v1270) = -1;
              v851 = v1270 + 1;
              goto LABEL_1795;
            }
            v1484 = (v2077 + ((v2120 + v1269) & v2076)) & v1996;
            if (v2059 > 0x7FFFFFFD)
            {
              v851 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v1484);
              goto LABEL_1795;
            }
            v1465 = *(_QWORD *)(((v2043 + ((v2073 + v1484) & v1996)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v1465 >= 0xFFFFFFFF)
            LODWORD(v1465) = -1;
          if ((v1465 + 1) < 2)
          {
LABEL_1797:
            v849((_QWORD *)v850, AssociatedTypeWitness);
            v849((_QWORD *)v1233, AssociatedTypeWitness);
            (*(void (**)(unint64_t, uint64_t))(v2060 + 8))(v1234, v2061);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v2054 + 8))((v2053 + ((v2064 + v1234) & 0xFFFFFFFFFFFFFFF8)) & v2051, v2055);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v1531 = (v2120 + v1234 + v2119) & v2076;
            v1532 = *(void (**)(size_t, uint64_t))(v2080 + 8);
            v1532((v2077 + v1531) & v1996, v2079);
            v1533 = (v2073 + ((v2077 + v1531) & v1996)) & v1996;
            v1532(v1533, v2079);
            swift_bridgeObjectRelease();
            v1534 = (v2070
                   + ((((((v2043 + v1533) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v1996;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2080 + 48))(v1534, 1, v2079))
              v1532(v1534, v2079);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v1535 = *(_QWORD *)(((((((v2071 + v1534) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 8);
            if ((v1535 & 0x3000000000000000) == 0)
              sub_23AAAE53C(*(_QWORD *)((((((v2071 + v1534) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v1535);
            swift_bridgeObjectRelease();
            v1536 = v2072 + v1531;
            v1537 = *(void **)(v1536 + 16);
            LODWORD(v1538) = -1;
            if ((unint64_t)v1537 < 0xFFFFFFFF)
              v1538 = *(_QWORD *)(v1536 + 16);
            v93 = v2123;
            v92 = v2118;
            if ((int)v1538 - 1 < 0)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(_QWORD *)(v1536 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_23AAA12F0(*(_QWORD *)((((v1536 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v1536 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          }
LABEL_1808:
          v1539 = (v850 + v2126 + v2136) & v2082;
          v88 = v2122;
          if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v2122 + 48))(v1539, 1, v92))
            (*(void (**)(size_t, uint64_t))(v2122 + 8))(v1539, v92);
          v1510 = (v2012 + v1539) & v2084;
          v277 = AssociatedTypeWitness;
          if (v2040 == v2046)
          {
            v1540 = (*(uint64_t (**)(size_t))(v2062 + 48))(v1510);
LABEL_1818:
            if (v1540)
              goto LABEL_1821;
            v1541 = (uint64_t *)((v2065 + v1510) & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_1820;
          }
          v1541 = (uint64_t *)((v2065 + v1510) & 0xFFFFFFFFFFFFFFF8);
          if (v2027 > 0x7FFFFFFE)
          {
            v1540 = (*(uint64_t (**)(unint64_t))(v2057 + 48))(((unint64_t)v1541 + v2056) & v2052);
            goto LABEL_1818;
          }
          v1542 = *v1541;
          if ((unint64_t)*v1541 >= 0xFFFFFFFF)
            LODWORD(v1542) = -1;
          if ((v1542 + 1) < 2)
          {
LABEL_1820:
            (*(void (**)(size_t, uint64_t))(v2062 + 8))(v1510, v2063);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v2057 + 8))(((unint64_t)v1541 + v2056) & v2052, v2058);
            v277 = AssociatedTypeWitness;
            v88 = v2122;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
LABEL_1821:
          v1514 = v2069;
LABEL_1822:
          v1271 = *(void **)((((v1510 + v1514 + 15) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
          goto LABEL_1823;
        case 2:
          v277 = AssociatedTypeWitness;
          (*(void (**)(_QWORD *, uint64_t))(v2124 + 8))(a1, AssociatedTypeWitness);
          v852 = ((unint64_t)a1 + v2042) & v2082;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2122 + 48))(v852, 1, v2118))
            (*(void (**)(unint64_t, uint64_t))(v2122 + 8))(v852, v2118);
          v1996 = ~v30;
          v278 = (v2012 + v852) & v2084;
          if (v2040 == v2046)
          {
            v853 = (*(uint64_t (**)(unint64_t))(v2062 + 48))(v278);
LABEL_1601:
            if (v853)
              goto LABEL_1604;
            v1235 = (uint64_t *)((v2065 + v278) & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_1603;
          }
          v1235 = (uint64_t *)((v2065 + v278) & 0xFFFFFFFFFFFFFFF8);
          if (v2027 > 0x7FFFFFFE)
          {
            v853 = (*(uint64_t (**)(unint64_t))(v2057 + 48))(((unint64_t)v1235 + v2056) & v2052);
            goto LABEL_1601;
          }
          v1236 = *v1235;
          if ((unint64_t)*v1235 >= 0xFFFFFFFF)
            LODWORD(v1236) = -1;
          if ((v1236 + 1) < 2)
          {
LABEL_1603:
            (*(void (**)(unint64_t, uint64_t))(v2062 + 8))(v278, v2063);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v2057 + 8))(((unint64_t)v1235 + v2056) & v2052, v2058);
            v277 = AssociatedTypeWitness;
            v88 = v2122;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
LABEL_1604:
          v1264 = v2069;
LABEL_1605:
          v1271 = *(void **)(v1264 + v278 + 8);
LABEL_1823:

          v90 = v1996;
          v91 = v93;
          v87 = v277;
          goto LABEL_503;
        case 3:
          v1995 = ~v30;
          v854 = *(void (**)(_QWORD *, uint64_t))(v2124 + 8);
          v854(a1, AssociatedTypeWitness);
          v855 = ((unint64_t)a1 + v2014) & v2117;
          if (v2108 == v2048)
          {
            v856 = (*(uint64_t (**)(unint64_t))(v2124 + 48))(((unint64_t)a1 + v2014) & v2117);
LABEL_1825:
            if (v856)
              goto LABEL_1838;
            v1237 = (v2067 + v855) & v2068;
            v1238 = (v2038 + v1237) & v2078;
            goto LABEL_1827;
          }
          v1237 = (v2067 + v855) & v2068;
          v1238 = (v2038 + v1237) & v2078;
          if (v2045 == v2048)
          {
            if (v2039 == v2045)
            {
              v856 = (*(uint64_t (**)(unint64_t))(v2060 + 48))((v2038 + v1237) & v2078);
              goto LABEL_1825;
            }
            v1466 = (unint64_t *)((v2064 + v1238) & 0xFFFFFFFFFFFFFFF8);
            if (v2026 > 0x7FFFFFFE)
            {
              v856 = (*(uint64_t (**)(unint64_t))(v2054 + 48))(((unint64_t)v1466 + v2053) & v2051);
              goto LABEL_1825;
            }
            v1467 = *v1466;
          }
          else
          {
            v1272 = v1238 + v2119;
            if ((v2024 & 0x80000000) == 0)
            {
              v1273 = *(_QWORD *)(v1272 + 8);
              if (v1273 >= 0xFFFFFFFF)
                LODWORD(v1273) = -1;
              v856 = v1273 + 1;
              goto LABEL_1825;
            }
            v1485 = (v2077 + ((v2120 + v1272) & v2076)) & v1995;
            if (v2059 > 0x7FFFFFFD)
            {
              v856 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v1485);
              goto LABEL_1825;
            }
            v1467 = *(_QWORD *)(((v2043 + ((v2073 + v1485) & v1995)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v1467 >= 0xFFFFFFFF)
            LODWORD(v1467) = -1;
          if ((v1467 + 1) >= 2)
          {
LABEL_1838:
            swift_bridgeObjectRelease();
LABEL_1839:
            v87 = AssociatedTypeWitness;
            v88 = v2122;
            v90 = v1995;
LABEL_502:
            v91 = v93;
            goto LABEL_503;
          }
LABEL_1827:
          v854((_QWORD *)v855, AssociatedTypeWitness);
          v854((_QWORD *)v1237, AssociatedTypeWitness);
          (*(void (**)(unint64_t, uint64_t))(v2060 + 8))(v1238, v2061);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v2054 + 8))((v2053 + ((v2064 + v1238) & 0xFFFFFFFFFFFFFFF8)) & v2051, v2055);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v1543 = (v2120 + v1238 + v2119) & v2076;
          v1544 = *(void (**)(size_t, uint64_t))(v2080 + 8);
          v1544((v2077 + v1543) & v1995, v2079);
          v1545 = (v2073 + ((v2077 + v1543) & v1995)) & v1995;
          v1544(v1545, v2079);
          swift_bridgeObjectRelease();
          v1546 = (v2070
                 + ((((((v2043 + v1545) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v1995;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2080 + 48))(v1546, 1, v2079))
            v1544(v1546, v2079);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v1547 = *(_QWORD *)(((((((v2071 + v1546) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 8);
          if ((v1547 & 0x3000000000000000) == 0)
            sub_23AAAE53C(*(_QWORD *)((((((v2071 + v1546) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v1547);
          swift_bridgeObjectRelease();
          v1548 = v2072 + v1543;
          v1549 = *(void **)(v1548 + 16);
          LODWORD(v1550) = -1;
          if ((unint64_t)v1549 < 0xFFFFFFFF)
            v1550 = *(_QWORD *)(v1548 + 16);
          v93 = v2123;
          v92 = v2118;
          if ((int)v1550 - 1 < 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v1548 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_23AAA12F0(*(_QWORD *)((((v1548 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v1548 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          goto LABEL_1838;
        case 4:
        case 5:
        case 7:
          goto LABEL_498;
        case 6:
          v94 = AssociatedTypeWitness;
          (*(void (**)(_QWORD *, uint64_t))(v2124 + 8))(a1, AssociatedTypeWitness);
          v857 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2010 + 48))(((unint64_t)a1 + v2008) & v2005, 1, v2097);
          v87 = AssociatedTypeWitness;
          v91 = v2123;
          if (v857)
            goto LABEL_503;
          (*(void (**)(unint64_t, uint64_t))(v2010 + 8))(((unint64_t)a1 + v2008) & v2005, v2097);
          goto LABEL_116;
        default:
          if (v2029 <= 3)
            v206 = v2029;
          else
            v206 = 4;
          __asm { BR              X12 }
          return result;
      }
    case 0x1Cu:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v150 = v2146;
        else
          v150 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 0x1Du:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v151 = v2146;
        else
          v151 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 0x1Eu:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v152 = v2146;
        else
          v152 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 0x1Fu:
      v153 = *((unsigned __int8 *)a1 + v2146);
      if (v153 >= 2)
      {
        if (v2146 <= 3)
          v154 = v2146;
        else
          v154 = 4;
        __asm { BR              X12 }
      }
      v93 = v2123;
      v207 = v2124;
      if (v153 == 1)
        v207 = v2122;
      v191 = AssociatedTypeWitness;
      if (v153 == 1)
        v208 = v2118;
      else
        v208 = AssociatedTypeWitness;
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v207 + 8))(a1, v208, AssociatedTypeWitness);
      v193 = *(unsigned __int8 *)((((unint64_t)a1 + v2074) & v2081) + v2146);
      if (v193 >= 2)
      {
        if (v2146 <= 3)
          v209 = v2146;
        else
          v209 = 4;
        __asm { BR              X12 }
      }
LABEL_391:
      if (v193 == 1)
LABEL_392:
        v198 = *(void (**)(void))(v2122 + 8);
      else
        v198 = *(void (**)(void))(v2124 + 8);
LABEL_394:
      v198();
      v87 = v191;
      goto LABEL_502;
    case 0x20u:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v155 = v2146;
        else
          v155 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 0x21u:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v156 = v2146;
        else
          v156 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 0x22u:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v157 = v2146;
        else
          v157 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 0x23u:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v158 = v2146;
        else
          v158 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 0x24u:
      if (!(*(unsigned int (**)(_QWORD *, uint64_t))(v2124 + 48))(a1, 1))
        (*(void (**)(_QWORD *, uint64_t))(v2124 + 8))(a1, AssociatedTypeWitness);
      v159 = ((((((unint64_t)a1 + v2035 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v2137 + 9) & v2078;
      if (v2039 == v2045)
      {
        v160 = (*(uint64_t (**)(unint64_t))(v2060 + 48))(((((((unint64_t)a1 + v2035 + 7) & 0xFFFFFFFFFFFFFFF8)
                                                                           + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                         + v2137
                                                                         + 9) & v2078);
LABEL_309:
        if (v160)
          goto LABEL_312;
        v169 = (uint64_t *)((v2064 + v159) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_311;
      }
      v169 = (uint64_t *)((v2064 + v159) & 0xFFFFFFFFFFFFFFF8);
      if (v2026 > 0x7FFFFFFE)
      {
        v160 = (*(uint64_t (**)(unint64_t))(v2054 + 48))(((unint64_t)v169 + v2053) & v2051);
        goto LABEL_309;
      }
      v170 = *v169;
      if ((unint64_t)*v169 >= 0xFFFFFFFF)
        LODWORD(v170) = -1;
      if ((v170 + 1) < 2)
      {
LABEL_311:
        (*(void (**)(unint64_t, uint64_t))(v2060 + 8))(v159, v2061);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v2054 + 8))(((unint64_t)v169 + v2053) & v2051, v2055);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_312:
      sub_23AAAEE10(*(void **)((v2119 + v159 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v2119 + v159 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v2119 + v159 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
      v175 = (v2119 + v159 + 34) & 0xFFFFFFFFFFFFFFF8;
      v176 = *(_QWORD *)(v175 + 16);
      v177 = ((4 * (v176 >> 60)) & 0xC | ((v176 >> 60) >> 2)) != 0xF && ((4 * (v176 >> 60)) & 0xC) != 0;
      if (v176 >> 60 != 15 && !v177)
        sub_23AAAE53C(*(_QWORD *)(v175 + 8), v176);

      v178 = ((unint64_t)a1 + v2031) & v2030;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2122 + 48))(v178, 1, v2118))
        (*(void (**)(unint64_t, uint64_t))(v2122 + 8))(v178, v2118);
      v179 = (v2033 + ((((v2032 + v178) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2084;
      if (v2040 == v2046)
      {
        v180 = (*(uint64_t (**)(size_t))(v2062 + 48))((v2033
                                                               + ((((v2032 + v178) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2084);
LABEL_328:
        if (v180)
          goto LABEL_331;
        v181 = (uint64_t *)((v2065 + v179) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_330;
      }
      v181 = (uint64_t *)((v2065 + v179) & 0xFFFFFFFFFFFFFFF8);
      if (v2027 > 0x7FFFFFFE)
      {
        v180 = (*(uint64_t (**)(unint64_t))(v2057 + 48))(((unint64_t)v181 + v2056) & v2052);
        goto LABEL_328;
      }
      v182 = *v181;
      if ((unint64_t)*v181 >= 0xFFFFFFFF)
        LODWORD(v182) = -1;
      if ((v182 + 1) < 2)
      {
LABEL_330:
        (*(void (**)(unint64_t, uint64_t))(v2062 + 8))(v179, v2063);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v2057 + 8))(((unint64_t)v181 + v2056) & v2052, v2058);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_331:
      sub_23AAAEE10(*(void **)((v179 + v2069 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v179 + v2069 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v179 + v2069 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
      v183 = (v179 + v2069 + 34) & 0xFFFFFFFFFFFFFFF8;
      v184 = *(_QWORD *)(v183 + 16);
      v185 = ((4 * (v184 >> 60)) & 0xC | ((v184 >> 60) >> 2)) != 0xF && ((4 * (v184 >> 60)) & 0xC) != 0;
      if (v184 >> 60 != 15 && !v185)
        sub_23AAAE53C(*(_QWORD *)(v183 + 8), v184);

      swift_bridgeObjectRelease();
      v87 = AssociatedTypeWitness;
      v88 = v2122;
      v90 = ~v30;
      v91 = v2123;
LABEL_503:
      v269 = v91;
LABEL_504:
      v284 = v2094 + 327;
      v285 = ((v2106
             + ((v2128
               + 16
               + ((((v2094
                   + 327
                   + ((((((((((v2085 + 7 + v269) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 19) & 0xFFFFFFFFFFFFFFF8)
                     + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)) & v2117)) & 0xFFFFFFFFFFFFFFF8)
           + 8;
      if (v285 <= v2130)
        v285 = v2130;
      if (v2099 > v285)
        v285 = v2099;
      if (v2136 > v285)
        v285 = v2136;
      if (__na > v285)
        v285 = __na;
      if (v2145 > v285)
        v285 = v2145;
      if (v2098 > v285)
        v285 = v2132 + 2;
      if (v2101 > v285)
        v285 = ((v2146 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v2112 > v285)
        v285 = v2146 + 2;
      if (v2102 > v285)
        v285 = (v2146 & 0xFFFFFFFFFFFFFFF8) + 16;
      if (v285 <= v2145)
        v285 = v2145;
      if (v285 <= v2131)
        v285 = v2131;
      if (v285 <= v2103)
        v285 = ((v2133 + 1) & ~v2133) + v2145;
      if (v285 <= v2145)
        v285 = v2145;
      if (v285 <= v2100)
        v285 = v2100;
      if (v285 <= v2112)
        v285 = v2146 + 2;
      if (v285 <= v2145)
        v285 = v2145;
      if (v285 <= v2132)
        v285 = v2132;
      if (v285 <= v2145)
        v285 = v2145;
      if (v285 <= v2105)
        v285 = v2105;
      if (v285 <= v2112)
        v285 = v2146 + 2;
      if (v285 <= v2145)
        v285 = v2145;
      if (v285 <= 0x38)
        v285 = 56;
      v286 = a2;
      if (v285 > 3)
      {
LABEL_551:
        v288 = *((unsigned __int8 *)a2 + v285);
        if (v288 >= 0x27)
          goto LABEL_552;
        goto LABEL_557;
      }
      v287 = ((1 << (8 * v285)) + 5) >> (8 * v285);
      if (v287 > 0xFFD8)
      {
        v288 = *(_DWORD *)((char *)a2 + v285);
        if (v288 < 0x27)
          goto LABEL_557;
LABEL_552:
        if (v83 <= 3)
          v289 = v83;
        else
          v289 = 4;
        __asm { BR              X12 }
      }
      if (v287 <= 0xD8)
        goto LABEL_551;
      v288 = *(unsigned __int16 *)((char *)a2 + v285);
      if (v288 >= 0x27)
        goto LABEL_552;
LABEL_557:
      switch(v288)
      {
        case 0u:
          (*(void (**)(_QWORD *, _QWORD *))(v2124 + 16))(a1, a2);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v88 + 16))(((unint64_t)a1 + v2042) & v2082, ((unint64_t)a2 + v2042) & v2082, v92);
          if (v83 > 3)
            goto LABEL_559;
          v434 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v434 > 0xFFD8)
          {
            *v2083 = 0;
          }
          else if (v434 <= 0xD8)
          {
LABEL_559:
            *(_BYTE *)v2083 = 0;
          }
          else
          {
            *(_WORD *)v2083 = 0;
          }
          return v3;
        case 1u:
          v292 = *((unsigned __int8 *)a2 + v2146);
          if (v292 >= 2)
          {
            if (v2146 <= 3)
              v293 = v2146;
            else
              v293 = 4;
            __asm { BR              X12 }
          }
          v737 = v292 == 1;
          if (v292 == 1)
            v738 = v88;
          else
            v738 = v2124;
          if (v292 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v738 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v737;
          if (v83 > 3)
            goto LABEL_907;
          v739 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v739 > 0xFFD8)
          {
            *v2083 = 1;
          }
          else if (v739 <= 0xD8)
          {
LABEL_907:
            *(_BYTE *)v2083 = 1;
          }
          else
          {
            *(_WORD *)v2083 = 1;
          }
          return v3;
        case 2u:
          v294 = *((unsigned __int8 *)a2 + v2146);
          if (v294 >= 2)
          {
            if (v2146 <= 3)
              v295 = v2146;
            else
              v295 = 4;
            __asm { BR              X12 }
          }
          v740 = v294 == 1;
          if (v294 == 1)
            v741 = v88;
          else
            v741 = v2124;
          if (v294 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v741 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v740;
          if (v83 > 3)
            goto LABEL_918;
          v742 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v742 > 0xFFD8)
          {
            *v2083 = 2;
          }
          else if (v742 <= 0xD8)
          {
LABEL_918:
            *(_BYTE *)v2083 = 2;
          }
          else
          {
            *(_WORD *)v2083 = 2;
          }
          return v3;
        case 3u:
          v296 = *((unsigned __int8 *)a2 + v2146);
          if (v296 >= 2)
          {
            if (v2146 <= 3)
              v297 = v2146;
            else
              v297 = 4;
            __asm { BR              X12 }
          }
          v743 = v296 == 1;
          if (v296 == 1)
            v744 = v88;
          else
            v744 = v2124;
          if (v296 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v744 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v743;
          if (v83 > 3)
            goto LABEL_929;
          v745 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v745 > 0xFFD8)
          {
            *v2083 = 3;
          }
          else if (v745 <= 0xD8)
          {
LABEL_929:
            *(_BYTE *)v2083 = 3;
          }
          else
          {
            *(_WORD *)v2083 = 3;
          }
          return v3;
        case 4u:
          v298 = *((unsigned __int8 *)a2 + v2146);
          if (v298 >= 2)
          {
            if (v2146 <= 3)
              v299 = v2146;
            else
              v299 = 4;
            __asm { BR              X12 }
          }
          v746 = v298 == 1;
          if (v298 == 1)
            v747 = v88;
          else
            v747 = v2124;
          if (v298 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v747 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v746;
          v748 = *(unsigned __int8 *)((((unint64_t)a2 + v2074) & v2081) + v2146);
          if (v748 >= 2)
          {
            if (v2146 <= 3)
              v749 = v2146;
            else
              v749 = 4;
            __asm { BR              X12 }
          }
          v839 = v748 == 1;
          if (v748 == 1)
            v840 = v88;
          else
            v840 = v2124;
          (*(void (**)(unint64_t))(v840 + 16))(((unint64_t)a1 + v2074) & v2081);
          *(_BYTE *)((((unint64_t)a1 + v2074) & v2081) + v2146) = v839;
          if (v83 > 3)
            goto LABEL_1212;
          v841 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v841 > 0xFFD8)
          {
            *v2083 = 4;
          }
          else if (v841 <= 0xD8)
          {
LABEL_1212:
            *(_BYTE *)v2083 = 4;
          }
          else
          {
            *(_WORD *)v2083 = 4;
          }
          return v3;
        case 5u:
          v300 = v2108;
          v2086 = v2085 + 7;
          v2095 = v2128 + 16;
          if (v2108 == v2048)
          {
            v301 = v2124;
            v302 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v2124 + 48))(a2, v2108, v87);
            v303 = v2075;
            v304 = v2080;
LABEL_1243:
            if (v302)
            {
LABEL_1244:
              v858 = a2;
              memcpy(a1, a2, v2136);
              v859 = v2059;
              v860 = v2123;
LABEL_1245:
              v861 = v860;
              goto LABEL_1296;
            }
            v435 = ((unint64_t)a2 + v2067) & v2068;
            v436 = (v435 + v2115 + v2137) & v2078;
LABEL_1247:
            v2020 = v284;
            v862 = v304;
            v863 = v303;
            v864 = v90;
            v865 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v301 + 16);
            v865(a1, a2, AssociatedTypeWitness);
            v865((_QWORD *)(((unint64_t)a1 + v2067) & v2068), (_QWORD *)v435, AssociatedTypeWitness);
            v866 = ((((unint64_t)a1 + v2067) & v2068) + v2115 + v2137) & v2078;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v2060 + 16))(v866, v436, v2061);
            v867 = (_QWORD *)((v2064 + v866) & 0xFFFFFFFFFFFFFFF8);
            v868 = (_QWORD *)((v2064 + v436) & 0xFFFFFFFFFFFFFFF8);
            *v867 = *v868;
            v869 = ((unint64_t)v867 + v2053) & v2051;
            v870 = ((unint64_t)v868 + v2053) & v2051;
            v871 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2054 + 16);
            swift_bridgeObjectRetain();
            v871(v869, v870, v2055);
            v872 = (_QWORD *)((v2049 + v869) & 0xFFFFFFFFFFFFF8);
            v873 = (_QWORD *)((v2049 + v870) & 0xFFFFFFFFFFFFF8);
            *v872 = *v873;
            v874 = (_QWORD *)(((unint64_t)v872 + 15) & 0xFFFFFFFFFFFFFFF8);
            v875 = (_QWORD *)(((unint64_t)v873 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v874 = *v875;
            v874[1] = v875[1];
            v876 = (_QWORD *)(v2119 + v866);
            *v876 = *(_QWORD *)(v2119 + v436);
            v876[1] = *(_QWORD *)(v2119 + v436 + 8);
            v877 = (v2120 + v2119 + v866) & v2076;
            v878 = (v2120 + v2119 + v436) & v2076;
            *(_BYTE *)v877 = *(_BYTE *)v878;
            v879 = v877 | 4;
            v880 = *(_DWORD *)(v878 | 4);
            *(_BYTE *)(v879 + 4) = *(_BYTE *)((v878 | 4) + 4);
            *(_DWORD *)v879 = v880;
            *(_WORD *)(v877 + 10) = *(_WORD *)(v878 + 0xA);
            v881 = (v2077 + v877) & v864;
            v2152 = v878;
            v882 = (v2077 + v878) & v864;
            v883 = *(void (**)(size_t, size_t, uint64_t))(v862 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v883(v881, v882, v2079);
            v884 = (v2073 + v881) & v864;
            v885 = (v2073 + v882) & v864;
            v883(v884, v885, v2079);
            v886 = (_BYTE *)(v884 + v863);
            *v886 = *(_BYTE *)(v885 + v863);
            v886[1] = *(_BYTE *)(v885 + v863 + 1);
            v886[2] = *(_BYTE *)(v885 + v863 + 2);
            v886[3] = *(_BYTE *)(v885 + v863 + 3);
            v886[4] = *(_BYTE *)(v885 + v863 + 4);
            v887 = (v884 + v863 + 12) & 0xFFFFFFFFFFFFFFF8;
            v888 = (v885 + v863 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v887 = *(_QWORD *)v888;
            *(_QWORD *)(v887 + 8) = *(_QWORD *)(v888 + 8);
            *(_BYTE *)(v887 + 16) = *(_BYTE *)(v888 + 16);
            *(_BYTE *)(v887 + 17) = *(_BYTE *)(v888 + 17);
            *(_BYTE *)(v887 + 18) = *(_BYTE *)(v888 + 18);
            *(_BYTE *)(v887 + 19) = *(_BYTE *)(v888 + 19);
            v889 = (v887 + 27) & 0xFFFFFFFFFFFFFFF8;
            v890 = (v888 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v889 = *(_QWORD *)v890;
            *(_BYTE *)(v889 + 8) = *(_BYTE *)(v890 + 8);
            *(_BYTE *)(v889 + 9) = *(_BYTE *)(v890 + 9);
            *(_BYTE *)(v889 + 10) = *(_BYTE *)(v890 + 10);
            *(_BYTE *)(v889 + 11) = *(_BYTE *)(v890 + 11);
            *(_BYTE *)(v889 + 12) = *(_BYTE *)(v890 + 12);
            v891 = (_QWORD *)((v887 + 47) & 0xFFFFFFFFFFFFF8);
            v892 = (_QWORD *)((v888 + 47) & 0xFFFFFFFFFFFFF8);
            *v891 = *v892;
            v893 = ((unint64_t)v891 + 15) & 0xFFFFFFFFFFFFFFF8;
            v894 = ((unint64_t)v892 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v893 = *(_QWORD *)v894;
            *(_BYTE *)(v893 + 8) = *(_BYTE *)(v894 + 8);
            *(_BYTE *)(v893 + 9) = *(_BYTE *)(v894 + 9);
            v895 = (void *)((v2070 + v893) & v864);
            v1998 = v864;
            v896 = (const void *)((v2070 + v894) & v864);
            v897 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v862 + 48);
            swift_bridgeObjectRetain();
            if (v897(v896, 1, v2079))
            {
              memcpy(v895, v896, v2123);
            }
            else
            {
              v883((size_t)v895, (size_t)v896, v2079);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v862 + 56))(v895, 0, 1, v2079);
            }
            v898 = (_QWORD *)(((unint64_t)v895 + v2071) & 0xFFFFFFFFFFFFFFF8);
            v899 = (_QWORD *)(((unint64_t)v896 + v2071) & 0xFFFFFFFFFFFFFFF8);
            *v898 = *v899;
            v900 = ((unint64_t)v898 + 15) & 0xFFFFFFFFFFFFFFF8;
            v901 = ((unint64_t)v899 + 15) & 0xFFFFFFFFFFFFFFF8;
            v902 = *(_QWORD *)v901;
            *(_BYTE *)(v900 + 8) = *(_BYTE *)(v901 + 8);
            *(_QWORD *)v900 = v902;
            v903 = (_QWORD *)(((unint64_t)v898 + 31) & 0xFFFFFFFFFFFFF8);
            v904 = (_QWORD *)(((unint64_t)v899 + 31) & 0xFFFFFFFFFFFFF8);
            *v903 = *v904;
            v905 = ((unint64_t)v903 + 15) & 0xFFFFFFFFFFFFFFF8;
            v906 = (uint64_t *)(((unint64_t)v904 + 15) & 0xFFFFFFFFFFFFFFF8);
            v907 = v906[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v303 = v2075;
            if ((v907 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)v905 = *(_OWORD *)v906;
            }
            else
            {
              v908 = *v906;
              sub_23AAAE668(*v906, v907);
              *(_QWORD *)v905 = v908;
              *(_QWORD *)(v905 + 8) = v907;
            }
            v304 = v2080;
            v909 = (v905 + 19) & 0xFFFFFFFFFFFFFFF8;
            v910 = ((unint64_t)v906 + 19) & 0xFFFFFFFFFFFFFFF8;
            v911 = *(_QWORD *)v910;
            *(_BYTE *)(v909 + 8) = *(_BYTE *)(v910 + 8);
            *(_QWORD *)v909 = v911;
            *(_BYTE *)(v909 + 9) = *(_BYTE *)(v910 + 9);
            v912 = (v909 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v913 = (v910 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v914 = *(_DWORD *)v913;
            *(_BYTE *)(v912 + 4) = *(_BYTE *)(v913 + 4);
            *(_DWORD *)v912 = v914;
            v915 = (_QWORD *)((v909 + 25) & 0xFFFFFFFFFFFFFFF8);
            v916 = (_QWORD *)((v910 + 25) & 0xFFFFFFFFFFFFFFF8);
            *v915 = *v916;
            v915[1] = v916[1];
            v917 = v2072 + v877;
            v918 = (__int128 *)(v2072 + v2152);
            v919 = *(_QWORD *)(v2072 + v2152 + 16);
            if (v919 >= 0xFFFFFFFF)
              LODWORD(v919) = -1;
            v920 = v919 - 1;
            swift_bridgeObjectRetain();
            if (v920 < 0)
            {
              *(_QWORD *)v917 = *(_QWORD *)v918;
              *(_BYTE *)(v917 + 8) = *((_BYTE *)v918 + 8);
              *(_BYTE *)(v917 + 9) = *((_BYTE *)v918 + 9);
              v933 = (void *)*((_QWORD *)v918 + 2);
              v934 = v933;
              *(_QWORD *)(v917 + 16) = v933;
              v935 = (void *)*((_QWORD *)v918 + 3);
              v936 = v935;
              *(_QWORD *)(v917 + 24) = v935;
              *(_BYTE *)(v917 + 32) = *((_BYTE *)v918 + 32);
              *(_BYTE *)(v917 + 33) = *((_BYTE *)v918 + 33);
              *(_BYTE *)(v917 + 34) = *((_BYTE *)v918 + 34);
              *(_QWORD *)(v917 + 40) = *((_QWORD *)v918 + 5);
              *(_QWORD *)(v917 + 48) = *((_QWORD *)v918 + 6);
              *(_QWORD *)(v917 + 56) = *((_QWORD *)v918 + 7);
              *(_QWORD *)(v917 + 64) = *((_QWORD *)v918 + 8);
              *(_BYTE *)(v917 + 72) = *((_BYTE *)v918 + 72);
              *(_QWORD *)(v917 + 80) = *((_QWORD *)v918 + 10);
              *(_QWORD *)(v917 + 88) = *((_QWORD *)v918 + 11);
              v937 = (void *)*((_QWORD *)v918 + 12);
              *(_QWORD *)(v917 + 96) = v937;
              *(_BYTE *)(v917 + 104) = *((_BYTE *)v918 + 104);
              *(_BYTE *)(v917 + 105) = *((_BYTE *)v918 + 105);
              *(_QWORD *)(v917 + 112) = *((_QWORD *)v918 + 14);
              *(_QWORD *)(v917 + 120) = *((_QWORD *)v918 + 15);
              *(_QWORD *)(v917 + 128) = *((_QWORD *)v918 + 16);
              *(_QWORD *)(v917 + 136) = *((_QWORD *)v918 + 17);
              *(_QWORD *)(v917 + 144) = *((_QWORD *)v918 + 18);
              *(_QWORD *)(v917 + 152) = *((_QWORD *)v918 + 19);
              *(_QWORD *)(v917 + 160) = *((_QWORD *)v918 + 20);
              *(_QWORD *)(v917 + 168) = *((_QWORD *)v918 + 21);
              *(_BYTE *)(v917 + 176) = *((_BYTE *)v918 + 176);
              *(_QWORD *)(v917 + 184) = *((_QWORD *)v918 + 23);
              v938 = *((_QWORD *)v918 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v939 = v937;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v938)
              {
                *(_QWORD *)(v917 + 192) = v938;
                *(_QWORD *)(v917 + 200) = *((_QWORD *)v918 + 25);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v917 + 192) = v918[12];
              }
              v3 = a1;
              v300 = v2108;
              v303 = v2075;
              *(_QWORD *)(v917 + 208) = *((_QWORD *)v918 + 26);
              *(_QWORD *)(v917 + 216) = *((_QWORD *)v918 + 27);
              *(_QWORD *)(v917 + 224) = *((_QWORD *)v918 + 28);
              *(_QWORD *)(v917 + 232) = *((_QWORD *)v918 + 29);
              *(_QWORD *)(v917 + 240) = *((_QWORD *)v918 + 30);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v304 = v2080;
            }
            else
            {
              v921 = *v918;
              v922 = v918[1];
              v923 = v918[3];
              *(_OWORD *)(v917 + 32) = v918[2];
              *(_OWORD *)(v917 + 48) = v923;
              *(_OWORD *)v917 = v921;
              *(_OWORD *)(v917 + 16) = v922;
              v924 = v918[4];
              v925 = v918[5];
              v926 = v918[7];
              *(_OWORD *)(v917 + 96) = v918[6];
              *(_OWORD *)(v917 + 112) = v926;
              *(_OWORD *)(v917 + 64) = v924;
              *(_OWORD *)(v917 + 80) = v925;
              v927 = v918[8];
              v928 = v918[9];
              v929 = v918[11];
              *(_OWORD *)(v917 + 160) = v918[10];
              *(_OWORD *)(v917 + 176) = v929;
              *(_OWORD *)(v917 + 128) = v927;
              *(_OWORD *)(v917 + 144) = v928;
              v930 = v918[12];
              v931 = v918[13];
              v932 = v918[14];
              *(_QWORD *)(v917 + 240) = *((_QWORD *)v918 + 30);
              *(_OWORD *)(v917 + 208) = v931;
              *(_OWORD *)(v917 + 224) = v932;
              *(_OWORD *)(v917 + 192) = v930;
              v300 = v2108;
            }
            v1040 = (_OWORD *)((v917 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1041 = (__int128 *)(((unint64_t)v918 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1042 = *v1041;
            *(_OWORD *)((char *)v1040 + 9) = *(__int128 *)((char *)v1041 + 9);
            *v1040 = v1042;
            v1043 = (v917 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1044 = ((unint64_t)v918 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1045 = *(_OWORD *)v1044;
            *(_BYTE *)(v1043 + 16) = *(_BYTE *)(v1044 + 16);
            *(_OWORD *)v1043 = v1045;
            v1046 = (_QWORD *)((v917 + 311) & 0xFFFFFFFFFFFFF8);
            v1047 = ((unint64_t)v918 + 311) & 0xFFFFFFFFFFFFF8;
            v1048 = *(_QWORD *)v1047;
            v1047 += 15;
            *v1046 = v1048;
            v1049 = (_QWORD *)(((unint64_t)v1046 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1050 = *(_QWORD *)(v1047 & 0xFFFFFFFFFFFFFFF8);
            v1051 = *(_QWORD *)((v1047 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_23AA7F2D4(v1050, v1051);
            *v1049 = v1050;
            v1049[1] = v1051;
            v861 = v303;
            v859 = v2059;
            v90 = v1998;
            v858 = a2;
            v860 = v2123;
            v284 = v2020;
            if (!v2059)
              goto LABEL_1245;
LABEL_1296:
            v1052 = ((((v284
                      + ((((((((((v2086 + v861) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v2138 = (void *)(((unint64_t)v3 + v2128 + v1052) & v2117);
            v2154 = (const void *)(((unint64_t)v858 + v2128 + v1052) & v2117);
            if (v300 == v2048)
            {
              v1053 = *(unsigned int (**)(void))(v2124 + 48);
              goto LABEL_1298;
            }
            v1058 = (v2067 + (((unint64_t)v858 + v2128 + v1052) & v2117)) & v2068;
            v1059 = (v2038 + v1058) & v2078;
            if (v2045 == v2048)
            {
              if (v2039 == v2045)
              {
                v1053 = *(unsigned int (**)(void))(v2060 + 48);
                goto LABEL_1298;
              }
              if (v2026 <= 0x7FFFFFFE)
              {
                v1140 = *(_QWORD *)((v2064 + v1059) & 0xFFFFFFFFFFFFFFF8);
                goto LABEL_1505;
              }
              v1053 = *(unsigned int (**)(void))(v2054 + 48);
            }
            else
            {
              v1060 = v1059 + v2119;
              if ((v2024 & 0x80000000) == 0)
              {
                v1061 = *(_QWORD *)(v1060 + 8);
                if (v1061 >= 0xFFFFFFFF)
                  LODWORD(v1061) = -1;
                if ((_DWORD)v1061 != -1)
                  goto LABEL_1299;
LABEL_1308:
                v1058 = ((unint64_t)v2154 + v2067) & v2068;
                v1059 = (v2038 + v1058) & v2078;
                goto LABEL_1309;
              }
              if (v859 <= 0x7FFFFFFD)
              {
                v1140 = *(_QWORD *)(((v2043 + ((v2073 + ((v2077 + ((v2120 + v1060) & v2076)) & v90)) & v90)) & 0xFFFFFFFFFFFFF8)
                                  + 8);
LABEL_1505:
                if (v1140 >= 0xFFFFFFFF)
                  LODWORD(v1140) = -1;
                if ((v1140 + 1) >= 2)
                  goto LABEL_1299;
LABEL_1309:
                v2022 = v284;
                v1062 = v303;
                v1063 = v90;
                v1064 = *(void (**)(void *, const void *, uint64_t))(v2124 + 16);
                v1064(v2138, v2154, AssociatedTypeWitness);
                v1065 = v304;
                v1066 = ((unint64_t)v2138 + v2067) & v2068;
                v1064((void *)v1066, (const void *)v1058, AssociatedTypeWitness);
                v1067 = (v2038 + v1066) & v2078;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v2060 + 16))(v1067, v1059, v2061);
                v1068 = (_QWORD *)((v2064 + v1067) & 0xFFFFFFFFFFFFFFF8);
                v1069 = (_QWORD *)((v2064 + v1059) & 0xFFFFFFFFFFFFFFF8);
                *v1068 = *v1069;
                v1070 = ((unint64_t)v1068 + v2053) & v2051;
                v1071 = ((unint64_t)v1069 + v2053) & v2051;
                v1072 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2054 + 16);
                swift_bridgeObjectRetain();
                v1072(v1070, v1071, v2055);
                v1073 = (_QWORD *)((v2049 + v1070) & 0xFFFFFFFFFFFFF8);
                v1074 = (_QWORD *)((v2049 + v1071) & 0xFFFFFFFFFFFFF8);
                *v1073 = *v1074;
                v1075 = (_QWORD *)(((unint64_t)v1073 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1076 = (_QWORD *)(((unint64_t)v1074 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v1075 = *v1076;
                v1075[1] = v1076[1];
                v1077 = (_QWORD *)(v1067 + v2119);
                *v1077 = *(_QWORD *)(v1059 + v2119);
                v1077[1] = *(_QWORD *)(v1059 + v2119 + 8);
                v1078 = (v2120 + v1067 + v2119) & v2076;
                v1079 = (v2120 + v1059 + v2119) & v2076;
                *(_BYTE *)v1078 = *(_BYTE *)v1079;
                v1080 = v1078 | 4;
                v1081 = *(_DWORD *)(v1079 | 4);
                *(_BYTE *)(v1080 + 4) = *(_BYTE *)((v1079 | 4) + 4);
                *(_DWORD *)v1080 = v1081;
                *(_WORD *)(v1078 + 10) = *(_WORD *)(v1079 + 10);
                v2135 = v1078;
                v1082 = (v2077 + v1078) & v1063;
                v1083 = (v2077 + v1079) & v1063;
                v1084 = *(void (**)(size_t, size_t, uint64_t))(v1065 + 16);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1084(v1082, v1083, v2079);
                v1085 = (v2073 + v1082) & v1063;
                v1086 = (v2073 + v1083) & v1063;
                v1084(v1085, v1086, v2079);
                v1087 = (_BYTE *)(v1085 + v1062);
                *v1087 = *(_BYTE *)(v1086 + v1062);
                v1087[1] = *(_BYTE *)(v1086 + v1062 + 1);
                v1087[2] = *(_BYTE *)(v1086 + v1062 + 2);
                v1087[3] = *(_BYTE *)(v1086 + v1062 + 3);
                v1087[4] = *(_BYTE *)(v1086 + v1062 + 4);
                v1088 = (v1085 + v1062 + 12) & 0xFFFFFFFFFFFFFFF8;
                v1089 = (v1086 + v1062 + 12) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v1088 = *(_QWORD *)v1089;
                *(_QWORD *)(v1088 + 8) = *(_QWORD *)(v1089 + 8);
                *(_BYTE *)(v1088 + 16) = *(_BYTE *)(v1089 + 16);
                *(_BYTE *)(v1088 + 17) = *(_BYTE *)(v1089 + 17);
                *(_BYTE *)(v1088 + 18) = *(_BYTE *)(v1089 + 18);
                *(_BYTE *)(v1088 + 19) = *(_BYTE *)(v1089 + 19);
                v1090 = (v1088 + 27) & 0xFFFFFFFFFFFFFFF8;
                v1091 = (v1089 + 27) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v1090 = *(_QWORD *)v1091;
                *(_BYTE *)(v1090 + 8) = *(_BYTE *)(v1091 + 8);
                *(_BYTE *)(v1090 + 9) = *(_BYTE *)(v1091 + 9);
                *(_BYTE *)(v1090 + 10) = *(_BYTE *)(v1091 + 10);
                *(_BYTE *)(v1090 + 11) = *(_BYTE *)(v1091 + 11);
                *(_BYTE *)(v1090 + 12) = *(_BYTE *)(v1091 + 12);
                v1092 = (_QWORD *)((v1088 + 47) & 0xFFFFFFFFFFFFF8);
                v1093 = (_QWORD *)((v1089 + 47) & 0xFFFFFFFFFFFFF8);
                *v1092 = *v1093;
                v1094 = ((unint64_t)v1092 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1095 = ((unint64_t)v1093 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v1094 = *(_QWORD *)v1095;
                *(_BYTE *)(v1094 + 8) = *(_BYTE *)(v1095 + 8);
                *(_BYTE *)(v1094 + 9) = *(_BYTE *)(v1095 + 9);
                v1096 = (void *)((v2070 + v1094) & v1063);
                v1097 = (const void *)((v2070 + v1095) & v1063);
                v1098 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1065 + 48);
                swift_bridgeObjectRetain();
                if (v1098(v1097, 1, v2079))
                {
                  memcpy(v1096, v1097, v2123);
                }
                else
                {
                  v1084((size_t)v1096, (size_t)v1097, v2079);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1065 + 56))(v1096, 0, 1, v2079);
                }
                v1099 = (_QWORD *)(((unint64_t)v1096 + v2071) & 0xFFFFFFFFFFFFFFF8);
                v1100 = (_QWORD *)(((unint64_t)v1097 + v2071) & 0xFFFFFFFFFFFFFFF8);
                *v1099 = *v1100;
                v1101 = ((unint64_t)v1099 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1102 = ((unint64_t)v1100 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1103 = *(_QWORD *)v1102;
                *(_BYTE *)(v1101 + 8) = *(_BYTE *)(v1102 + 8);
                *(_QWORD *)v1101 = v1103;
                v1104 = (_QWORD *)(((unint64_t)v1099 + 31) & 0xFFFFFFFFFFFFF8);
                v1105 = (_QWORD *)(((unint64_t)v1100 + 31) & 0xFFFFFFFFFFFFF8);
                *v1104 = *v1105;
                v1106 = ((unint64_t)v1104 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1107 = (uint64_t *)(((unint64_t)v1105 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1108 = v1107[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1057 = v2075;
                if ((v1108 & 0x3000000000000000) != 0)
                {
                  *(_OWORD *)v1106 = *(_OWORD *)v1107;
                }
                else
                {
                  v1109 = *v1107;
                  sub_23AAAE668(*v1107, v1108);
                  *(_QWORD *)v1106 = v1109;
                  *(_QWORD *)(v1106 + 8) = v1108;
                }
                v1110 = (v1106 + 19) & 0xFFFFFFFFFFFFFFF8;
                v1111 = ((unint64_t)v1107 + 19) & 0xFFFFFFFFFFFFFFF8;
                v1112 = *(_QWORD *)v1111;
                *(_BYTE *)(v1110 + 8) = *(_BYTE *)(v1111 + 8);
                *(_QWORD *)v1110 = v1112;
                *(_BYTE *)(v1110 + 9) = *(_BYTE *)(v1111 + 9);
                v1113 = (v1110 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                v1114 = (v1111 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                v1115 = *(_DWORD *)v1114;
                *(_BYTE *)(v1113 + 4) = *(_BYTE *)(v1114 + 4);
                *(_DWORD *)v1113 = v1115;
                v1116 = (_QWORD *)((v1110 + 25) & 0xFFFFFFFFFFFFFFF8);
                v1117 = (_QWORD *)((v1111 + 25) & 0xFFFFFFFFFFFFFFF8);
                *v1116 = *v1117;
                v1116[1] = v1117[1];
                v1118 = v2135 + v2072;
                v1119 = v1079 + v2072;
                v1120 = *(_QWORD *)(v1079 + v2072 + 16);
                if (v1120 >= 0xFFFFFFFF)
                  LODWORD(v1120) = -1;
                v1121 = v1120 - 1;
                swift_bridgeObjectRetain();
                v284 = v2022;
                if (v1121 < 0)
                {
                  *(_QWORD *)v1118 = *(_QWORD *)v1119;
                  *(_BYTE *)(v1118 + 8) = *(_BYTE *)(v1119 + 8);
                  *(_BYTE *)(v1118 + 9) = *(_BYTE *)(v1119 + 9);
                  v1134 = *(void **)(v1119 + 16);
                  v1135 = v1134;
                  *(_QWORD *)(v1118 + 16) = v1134;
                  v1136 = *(void **)(v1119 + 24);
                  v1137 = v1136;
                  *(_QWORD *)(v1118 + 24) = v1136;
                  *(_BYTE *)(v1118 + 32) = *(_BYTE *)(v1119 + 32);
                  *(_BYTE *)(v1118 + 33) = *(_BYTE *)(v1119 + 33);
                  *(_BYTE *)(v1118 + 34) = *(_BYTE *)(v1119 + 34);
                  *(_QWORD *)(v1118 + 40) = *(_QWORD *)(v1119 + 40);
                  *(_QWORD *)(v1118 + 48) = *(_QWORD *)(v1119 + 48);
                  *(_QWORD *)(v1118 + 56) = *(_QWORD *)(v1119 + 56);
                  *(_QWORD *)(v1118 + 64) = *(_QWORD *)(v1119 + 64);
                  *(_BYTE *)(v1118 + 72) = *(_BYTE *)(v1119 + 72);
                  *(_QWORD *)(v1118 + 80) = *(_QWORD *)(v1119 + 80);
                  *(_QWORD *)(v1118 + 88) = *(_QWORD *)(v1119 + 88);
                  v1138 = *(void **)(v1119 + 96);
                  *(_QWORD *)(v1118 + 96) = v1138;
                  *(_BYTE *)(v1118 + 104) = *(_BYTE *)(v1119 + 104);
                  *(_BYTE *)(v1118 + 105) = *(_BYTE *)(v1119 + 105);
                  *(_QWORD *)(v1118 + 112) = *(_QWORD *)(v1119 + 112);
                  *(_QWORD *)(v1118 + 120) = *(_QWORD *)(v1119 + 120);
                  *(_QWORD *)(v1118 + 128) = *(_QWORD *)(v1119 + 128);
                  *(_QWORD *)(v1118 + 136) = *(_QWORD *)(v1119 + 136);
                  *(_QWORD *)(v1118 + 144) = *(_QWORD *)(v1119 + 144);
                  *(_QWORD *)(v1118 + 152) = *(_QWORD *)(v1119 + 152);
                  *(_QWORD *)(v1118 + 160) = *(_QWORD *)(v1119 + 160);
                  *(_QWORD *)(v1118 + 168) = *(_QWORD *)(v1119 + 168);
                  *(_BYTE *)(v1118 + 176) = *(_BYTE *)(v1119 + 176);
                  *(_QWORD *)(v1118 + 184) = *(_QWORD *)(v1119 + 184);
                  v2129 = *(_QWORD *)(v1119 + 192);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v1139 = v1138;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v2129)
                  {
                    *(_QWORD *)(v1118 + 192) = v2129;
                    *(_QWORD *)(v1118 + 200) = *(_QWORD *)(v1119 + 200);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    *(_OWORD *)(v1118 + 192) = *(_OWORD *)(v1119 + 192);
                  }
                  v1057 = v2075;
                  v284 = v2022;
                  v1054 = v2138;
                  *(_QWORD *)(v1118 + 208) = *(_QWORD *)(v1119 + 208);
                  *(_QWORD *)(v1118 + 216) = *(_QWORD *)(v1119 + 216);
                  *(_QWORD *)(v1118 + 224) = *(_QWORD *)(v1119 + 224);
                  *(_QWORD *)(v1118 + 232) = *(_QWORD *)(v1119 + 232);
                  *(_QWORD *)(v1118 + 240) = *(_QWORD *)(v1119 + 240);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  v1122 = *(_OWORD *)v1119;
                  v1123 = *(_OWORD *)(v1119 + 16);
                  v1124 = *(_OWORD *)(v1119 + 48);
                  *(_OWORD *)(v1118 + 32) = *(_OWORD *)(v1119 + 32);
                  *(_OWORD *)(v1118 + 48) = v1124;
                  *(_OWORD *)v1118 = v1122;
                  *(_OWORD *)(v1118 + 16) = v1123;
                  v1125 = *(_OWORD *)(v1119 + 64);
                  v1126 = *(_OWORD *)(v1119 + 80);
                  v1127 = *(_OWORD *)(v1119 + 112);
                  *(_OWORD *)(v1118 + 96) = *(_OWORD *)(v1119 + 96);
                  *(_OWORD *)(v1118 + 112) = v1127;
                  *(_OWORD *)(v1118 + 64) = v1125;
                  *(_OWORD *)(v1118 + 80) = v1126;
                  v1128 = *(_OWORD *)(v1119 + 128);
                  v1129 = *(_OWORD *)(v1119 + 144);
                  v1130 = *(_OWORD *)(v1119 + 176);
                  *(_OWORD *)(v1118 + 160) = *(_OWORD *)(v1119 + 160);
                  *(_OWORD *)(v1118 + 176) = v1130;
                  *(_OWORD *)(v1118 + 128) = v1128;
                  *(_OWORD *)(v1118 + 144) = v1129;
                  v1131 = *(_OWORD *)(v1119 + 192);
                  v1132 = *(_OWORD *)(v1119 + 208);
                  v1133 = *(_OWORD *)(v1119 + 224);
                  *(_QWORD *)(v1118 + 240) = *(_QWORD *)(v1119 + 240);
                  *(_OWORD *)(v1118 + 208) = v1132;
                  *(_OWORD *)(v1118 + 224) = v1133;
                  *(_OWORD *)(v1118 + 192) = v1131;
                  v1054 = v2138;
                }
                v1156 = (_OWORD *)((v1118 + 255) & 0xFFFFFFFFFFFFFFF8);
                v1157 = (__int128 *)((v1119 + 255) & 0xFFFFFFFFFFFFFFF8);
                v1158 = *v1157;
                *(_OWORD *)((char *)v1156 + 9) = *(__int128 *)((char *)v1157 + 9);
                *v1156 = v1158;
                v1159 = (v1118 + 287) & 0xFFFFFFFFFFFFFFF8;
                v1160 = (v1119 + 287) & 0xFFFFFFFFFFFFFFF8;
                v1161 = *(_OWORD *)v1160;
                *(_BYTE *)(v1159 + 16) = *(_BYTE *)(v1160 + 16);
                *(_OWORD *)v1159 = v1161;
                v1162 = (_QWORD *)((v1118 + 311) & 0xFFFFFFFFFFFFF8);
                v1163 = (v1119 + 311) & 0xFFFFFFFFFFFFF8;
                v1164 = *(_QWORD *)v1163;
                v1163 += 15;
                *v1162 = v1164;
                v1165 = (_QWORD *)(((unint64_t)v1162 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1166 = *(_QWORD *)(v1163 & 0xFFFFFFFFFFFFFFF8);
                v1167 = *(_QWORD *)((v1163 & 0xFFFFFFFFFFFFFFF8) + 8);
                sub_23AA7F2D4(v1166, v1167);
                *v1165 = v1166;
                v1165[1] = v1167;
                v3 = a1;
                v1056 = v2123;
                v1055 = v2154;
                if (v2059)
                  goto LABEL_1382;
                goto LABEL_1300;
              }
              v1053 = *(unsigned int (**)(void))(v304 + 48);
            }
LABEL_1298:
            if (v1053())
            {
LABEL_1299:
              v1054 = v2138;
              v1055 = v2154;
              memcpy(v2138, v2154, v2136);
              v1056 = v2123;
LABEL_1300:
              v1057 = v1056;
LABEL_1382:
              v1168 = ((((v284
                        + ((((((((((v2086 + v1057) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              *(_QWORD *)(((unint64_t)v1054 + v1168) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1055
                                                                                               + v1168) & 0xFFFFFFFFFFFFF8);
              v1169 = ((v2106
                      + ((v2095
                        + ((((v284
                            + ((((((((((v2086 + v1056) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 19) & 0xFFFFFFFFFFFFFFF8)
                              + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)) & v2117)) & 0xFFFFFFFFFFFFFFF8)
                    + 8;
              if (v1169 <= v2130)
                v1169 = v2130;
              if (v2099 > v1169)
                v1169 = v2099;
              if (v2136 > v1169)
                v1169 = v2136;
              if (__na > v1169)
                v1169 = __na;
              if (v2145 > v1169)
                v1169 = v2145;
              if (v2098 > v1169)
                v1169 = v2132 + 2;
              if (v2101 > v1169)
                v1169 = v2101;
              if (v2112 > v1169)
                v1169 = v2112;
              if (v2102 > v1169)
                v1169 = v2102;
              if (v1169 <= v2145)
                v1169 = v2145;
              if (v1169 <= v2131)
                v1169 = v2131;
              if (v1169 <= v2103)
                v1169 = v2103;
              if (v1169 <= v2145)
                v1169 = v2145;
              if (v1169 <= v2100)
                v1169 = v2100;
              if (v1169 <= v2112)
                v1169 = v2112;
              if (v1169 <= v2145)
                v1169 = v2145;
              if (v1169 <= v2132)
                v1169 = v2132;
              if (v1169 <= v2145)
                v1169 = v2145;
              if (v1169 <= v2105)
                v1169 = v2105;
              if (v1169 <= v2112)
                v1169 = v2112;
              if (v1169 <= v2145)
                v1169 = v2145;
              if (v1169 <= 0x38)
                v1169 = 56;
              if (v1169 > 3)
                goto LABEL_1427;
              v1170 = ((1 << (8 * v1169)) + 5) >> (8 * v1169);
              if (v1170 > 0xFFD8)
              {
                *(_DWORD *)((char *)v3 + v1169) = 5;
                return v3;
              }
              if (v1170 <= 0xD8)
LABEL_1427:
                *((_BYTE *)v3 + v1169) = 5;
              else
                *(_WORD *)((char *)v3 + v1169) = 5;
              return v3;
            }
            goto LABEL_1308;
          }
          v435 = ((unint64_t)a2 + v2067) & v2068;
          v436 = (v435 + v2115 + v2137) & v2078;
          v301 = v2124;
          if (v2045 == v2048)
          {
            v303 = v2075;
            v304 = v2080;
            if (v2039 == v2045)
            {
              v302 = (*(uint64_t (**)(unint64_t))(v2060 + 48))((v435 + v2115 + v2137) & v2078);
              goto LABEL_1243;
            }
            v733 = (unint64_t *)((v2064 + v436) & 0xFFFFFFFFFFFFFFF8);
            if (v2026 > 0x7FFFFFFE)
            {
              v302 = (*(uint64_t (**)(unint64_t))(v2054 + 48))(((unint64_t)v733 + v2053) & v2051);
              goto LABEL_1243;
            }
            v734 = *v733;
          }
          else
          {
            v540 = v2119 + v436;
            v303 = v2075;
            v304 = v2080;
            if ((v2024 & 0x80000000) == 0)
            {
              v541 = *(_QWORD *)(v540 + 8);
              if (v541 >= 0xFFFFFFFF)
                LODWORD(v541) = -1;
              v302 = v541 + 1;
              goto LABEL_1243;
            }
            v845 = (v2077 + ((v2120 + v540) & v2076)) & v90;
            if (v2059 > 0x7FFFFFFD)
            {
              v302 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v845);
              goto LABEL_1243;
            }
            v734 = *(_QWORD *)(((v2043 + ((v2073 + v845) & v90)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v734 >= 0xFFFFFFFF)
            LODWORD(v734) = -1;
          if ((v734 + 1) >= 2)
            goto LABEL_1244;
          goto LABEL_1247;
        case 6u:
          v2087 = v2085 + 7;
          if (v2044 == v2047)
          {
            v305 = (*(uint64_t (**)(_QWORD *))(v88 + 48))(a2);
            goto LABEL_592;
          }
          v437 = ((unint64_t)a2 + v2066) & v2082;
          v438 = (v437 + v2114 + v2041) & v2084;
          if (v2046 == v2047)
          {
            if (v2040 == v2046)
            {
              v305 = (*(uint64_t (**)(unint64_t))(v2062 + 48))((v437 + v2114 + v2041) & v2084);
              goto LABEL_592;
            }
            v735 = (unint64_t *)((v2065 + v438) & 0xFFFFFFFFFFFFFFF8);
            if (v2027 <= 0x7FFFFFFE)
            {
              v736 = *v735;
              goto LABEL_1495;
            }
            v305 = (*(uint64_t (**)(unint64_t))(v2057 + 48))(((unint64_t)v735 + v2056) & v2052);
          }
          else
          {
            v542 = v2069 + v438;
            if ((v2023 & 0x80000000) == 0)
            {
              v543 = *(_QWORD *)(v542 + 8);
              if (v543 >= 0xFFFFFFFF)
                LODWORD(v543) = -1;
              if ((_DWORD)v543 != -1)
                goto LABEL_593;
LABEL_822:
              v437 = ((unint64_t)a2 + v2066) & v2082;
              v438 = (v437 + v2114 + v2041) & v2084;
              goto LABEL_823;
            }
            v846 = (v2077 + ((v2120 + v542) & v2076)) & v90;
            if (v2059 <= 0x7FFFFFFD)
            {
              v736 = *(_QWORD *)(((v2043 + ((v2073 + v846) & v90)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_1495:
              if (v736 >= 0xFFFFFFFF)
                LODWORD(v736) = -1;
              if ((v736 + 1) >= 2)
                goto LABEL_593;
LABEL_823:
              v544 = v88;
              v545 = v90;
              v546 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v544 + 16);
              v546(a1, a2, v92);
              v546((_QWORD *)(((unint64_t)a1 + v2066) & v2082), (_QWORD *)v437, v92);
              v547 = ((((unint64_t)a1 + v2066) & v2082) + v2114 + v2041) & v2084;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v2062 + 16))(v547, v438, v2063);
              v548 = (_QWORD *)((v2065 + v547) & 0xFFFFFFFFFFFFFFF8);
              v549 = (_QWORD *)((v2065 + v438) & 0xFFFFFFFFFFFFFFF8);
              *v548 = *v549;
              v550 = ((unint64_t)v548 + v2056) & v2052;
              v551 = ((unint64_t)v549 + v2056) & v2052;
              v552 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2057 + 16);
              swift_bridgeObjectRetain();
              v552(v550, v551, v2058);
              v553 = (_QWORD *)((v2050 + v550) & 0xFFFFFFFFFFFFF8);
              v554 = (_QWORD *)((v2050 + v551) & 0xFFFFFFFFFFFFF8);
              *v553 = *v554;
              v555 = (_QWORD *)(((unint64_t)v553 + 15) & 0xFFFFFFFFFFFFFFF8);
              v556 = (_QWORD *)(((unint64_t)v554 + 15) & 0xFFFFFFFFFFFFFFF8);
              *v555 = *v556;
              v555[1] = v556[1];
              v557 = (_QWORD *)(v2069 + v547);
              *v557 = *(_QWORD *)(v2069 + v438);
              v557[1] = *(_QWORD *)(v2069 + v438 + 8);
              v558 = (v2120 + v2069 + v547) & v2076;
              v559 = (v2120 + v2069 + v438) & v2076;
              *(_BYTE *)v558 = *(_BYTE *)v559;
              v560 = v558 | 4;
              v561 = *(_DWORD *)(v559 | 4);
              *(_BYTE *)(v560 + 4) = *(_BYTE *)((v559 | 4) + 4);
              *(_DWORD *)v560 = v561;
              *(_WORD *)(v558 + 10) = *(_WORD *)(v559 + 0xA);
              v562 = (v2077 + v558) & v545;
              v2151 = v559;
              v563 = (v2077 + v559) & v545;
              v564 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2080 + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v564(v562, v563, v2079);
              v565 = (v2073 + v562) & v545;
              v566 = (v2073 + v563) & v545;
              v564(v565, v566, v2079);
              v567 = (_BYTE *)(v565 + v2075);
              *v567 = *(_BYTE *)(v566 + v2075);
              v567[1] = *(_BYTE *)(v566 + v2075 + 1);
              v567[2] = *(_BYTE *)(v566 + v2075 + 2);
              v567[3] = *(_BYTE *)(v566 + v2075 + 3);
              v567[4] = *(_BYTE *)(v566 + v2075 + 4);
              v568 = (v565 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
              v569 = (v566 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v568 = *(_QWORD *)v569;
              *(_QWORD *)(v568 + 8) = *(_QWORD *)(v569 + 8);
              *(_BYTE *)(v568 + 16) = *(_BYTE *)(v569 + 16);
              *(_BYTE *)(v568 + 17) = *(_BYTE *)(v569 + 17);
              *(_BYTE *)(v568 + 18) = *(_BYTE *)(v569 + 18);
              *(_BYTE *)(v568 + 19) = *(_BYTE *)(v569 + 19);
              v570 = (v568 + 27) & 0xFFFFFFFFFFFFFFF8;
              v571 = (v569 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v570 = *(_QWORD *)v571;
              *(_BYTE *)(v570 + 8) = *(_BYTE *)(v571 + 8);
              *(_BYTE *)(v570 + 9) = *(_BYTE *)(v571 + 9);
              *(_BYTE *)(v570 + 10) = *(_BYTE *)(v571 + 10);
              *(_BYTE *)(v570 + 11) = *(_BYTE *)(v571 + 11);
              *(_BYTE *)(v570 + 12) = *(_BYTE *)(v571 + 12);
              v572 = (_QWORD *)((v568 + 47) & 0xFFFFFFFFFFFFF8);
              v573 = (_QWORD *)((v569 + 47) & 0xFFFFFFFFFFFFF8);
              *v572 = *v573;
              v574 = ((unint64_t)v572 + 15) & 0xFFFFFFFFFFFFFFF8;
              v575 = ((unint64_t)v573 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v574 = *(_QWORD *)v575;
              *(_BYTE *)(v574 + 8) = *(_BYTE *)(v575 + 8);
              *(_BYTE *)(v574 + 9) = *(_BYTE *)(v575 + 9);
              v576 = (void *)((v2070 + v574) & v545);
              v1997 = v545;
              v577 = (const void *)((v2070 + v575) & v545);
              v578 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v2080 + 48);
              swift_bridgeObjectRetain();
              if (v578(v577, 1, v2079))
              {
                memcpy(v576, v577, v2123);
              }
              else
              {
                v564((unint64_t)v576, (unint64_t)v577, v2079);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v2080 + 56))(v576, 0, 1, v2079);
              }
              v665 = (_QWORD *)(((unint64_t)v576 + v2071) & 0xFFFFFFFFFFFFFFF8);
              v666 = (_QWORD *)(((unint64_t)v577 + v2071) & 0xFFFFFFFFFFFFFFF8);
              *v665 = *v666;
              v667 = ((unint64_t)v665 + 15) & 0xFFFFFFFFFFFFFFF8;
              v668 = ((unint64_t)v666 + 15) & 0xFFFFFFFFFFFFFFF8;
              v669 = *(_QWORD *)v668;
              *(_BYTE *)(v667 + 8) = *(_BYTE *)(v668 + 8);
              *(_QWORD *)v667 = v669;
              v670 = (_QWORD *)(((unint64_t)v665 + 31) & 0xFFFFFFFFFFFFF8);
              v671 = (_QWORD *)(((unint64_t)v666 + 31) & 0xFFFFFFFFFFFFF8);
              *v670 = *v671;
              v672 = ((unint64_t)v670 + 15) & 0xFFFFFFFFFFFFFFF8;
              v673 = (uint64_t *)(((unint64_t)v671 + 15) & 0xFFFFFFFFFFFFFFF8);
              v674 = v673[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v92 = v2118;
              v88 = v2122;
              if ((v674 & 0x3000000000000000) != 0)
              {
                *(_OWORD *)v672 = *(_OWORD *)v673;
              }
              else
              {
                v675 = *v673;
                sub_23AAAE668(*v673, v674);
                *(_QWORD *)v672 = v675;
                *(_QWORD *)(v672 + 8) = v674;
              }
              v676 = (v672 + 19) & 0xFFFFFFFFFFFFFFF8;
              v677 = ((unint64_t)v673 + 19) & 0xFFFFFFFFFFFFFFF8;
              v678 = *(_QWORD *)v677;
              *(_BYTE *)(v676 + 8) = *(_BYTE *)(v677 + 8);
              *(_QWORD *)v676 = v678;
              *(_BYTE *)(v676 + 9) = *(_BYTE *)(v677 + 9);
              v679 = (v676 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v680 = (v677 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v681 = *(_DWORD *)v680;
              *(_BYTE *)(v679 + 4) = *(_BYTE *)(v680 + 4);
              *(_DWORD *)v679 = v681;
              v682 = (_QWORD *)((v676 + 25) & 0xFFFFFFFFFFFFFFF8);
              v683 = (_QWORD *)((v677 + 25) & 0xFFFFFFFFFFFFFFF8);
              *v682 = *v683;
              v682[1] = v683[1];
              v684 = v2072 + v558;
              v685 = (__int128 *)(v2072 + v2151);
              v686 = *(_QWORD *)(v2072 + v2151 + 16);
              if (v686 >= 0xFFFFFFFF)
                LODWORD(v686) = -1;
              v687 = v686 - 1;
              swift_bridgeObjectRetain();
              if (v687 < 0)
              {
                *(_QWORD *)v684 = *(_QWORD *)v685;
                *(_BYTE *)(v684 + 8) = *((_BYTE *)v685 + 8);
                *(_BYTE *)(v684 + 9) = *((_BYTE *)v685 + 9);
                v700 = (void *)*((_QWORD *)v685 + 2);
                v701 = v700;
                *(_QWORD *)(v684 + 16) = v700;
                v702 = (void *)*((_QWORD *)v685 + 3);
                v703 = v702;
                *(_QWORD *)(v684 + 24) = v702;
                *(_BYTE *)(v684 + 32) = *((_BYTE *)v685 + 32);
                *(_BYTE *)(v684 + 33) = *((_BYTE *)v685 + 33);
                *(_BYTE *)(v684 + 34) = *((_BYTE *)v685 + 34);
                *(_QWORD *)(v684 + 40) = *((_QWORD *)v685 + 5);
                *(_QWORD *)(v684 + 48) = *((_QWORD *)v685 + 6);
                *(_QWORD *)(v684 + 56) = *((_QWORD *)v685 + 7);
                *(_QWORD *)(v684 + 64) = *((_QWORD *)v685 + 8);
                *(_BYTE *)(v684 + 72) = *((_BYTE *)v685 + 72);
                *(_QWORD *)(v684 + 80) = *((_QWORD *)v685 + 10);
                *(_QWORD *)(v684 + 88) = *((_QWORD *)v685 + 11);
                v704 = (void *)*((_QWORD *)v685 + 12);
                *(_QWORD *)(v684 + 96) = v704;
                *(_BYTE *)(v684 + 104) = *((_BYTE *)v685 + 104);
                *(_BYTE *)(v684 + 105) = *((_BYTE *)v685 + 105);
                *(_QWORD *)(v684 + 112) = *((_QWORD *)v685 + 14);
                *(_QWORD *)(v684 + 120) = *((_QWORD *)v685 + 15);
                *(_QWORD *)(v684 + 128) = *((_QWORD *)v685 + 16);
                *(_QWORD *)(v684 + 136) = *((_QWORD *)v685 + 17);
                *(_QWORD *)(v684 + 144) = *((_QWORD *)v685 + 18);
                *(_QWORD *)(v684 + 152) = *((_QWORD *)v685 + 19);
                *(_QWORD *)(v684 + 160) = *((_QWORD *)v685 + 20);
                *(_QWORD *)(v684 + 168) = *((_QWORD *)v685 + 21);
                *(_BYTE *)(v684 + 176) = *((_BYTE *)v685 + 176);
                *(_QWORD *)(v684 + 184) = *((_QWORD *)v685 + 23);
                v705 = *((_QWORD *)v685 + 24);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v706 = v704;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v705)
                {
                  *(_QWORD *)(v684 + 192) = v705;
                  *(_QWORD *)(v684 + 200) = *((_QWORD *)v685 + 25);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  *(_OWORD *)(v684 + 192) = v685[12];
                }
                v3 = a1;
                v92 = v2118;
                v88 = v2122;
                v309 = v2018;
                *(_QWORD *)(v684 + 208) = *((_QWORD *)v685 + 26);
                *(_QWORD *)(v684 + 216) = *((_QWORD *)v685 + 27);
                *(_QWORD *)(v684 + 224) = *((_QWORD *)v685 + 28);
                *(_QWORD *)(v684 + 232) = *((_QWORD *)v685 + 29);
                *(_QWORD *)(v684 + 240) = *((_QWORD *)v685 + 30);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                v688 = *v685;
                v689 = v685[1];
                v690 = v685[3];
                *(_OWORD *)(v684 + 32) = v685[2];
                *(_OWORD *)(v684 + 48) = v690;
                *(_OWORD *)v684 = v688;
                *(_OWORD *)(v684 + 16) = v689;
                v691 = v685[4];
                v692 = v685[5];
                v693 = v685[7];
                *(_OWORD *)(v684 + 96) = v685[6];
                *(_OWORD *)(v684 + 112) = v693;
                *(_OWORD *)(v684 + 64) = v691;
                *(_OWORD *)(v684 + 80) = v692;
                v694 = v685[8];
                v695 = v685[9];
                v696 = v685[11];
                *(_OWORD *)(v684 + 160) = v685[10];
                *(_OWORD *)(v684 + 176) = v696;
                *(_OWORD *)(v684 + 128) = v694;
                *(_OWORD *)(v684 + 144) = v695;
                v697 = v685[12];
                v698 = v685[13];
                v699 = v685[14];
                *(_QWORD *)(v684 + 240) = *((_QWORD *)v685 + 30);
                *(_OWORD *)(v684 + 208) = v698;
                *(_OWORD *)(v684 + 224) = v699;
                *(_OWORD *)(v684 + 192) = v697;
                v309 = v2018;
              }
              v940 = (_OWORD *)((v684 + 255) & 0xFFFFFFFFFFFFFFF8);
              v941 = (__int128 *)(((unint64_t)v685 + 255) & 0xFFFFFFFFFFFFFFF8);
              v942 = *v941;
              *(_OWORD *)((char *)v940 + 9) = *(__int128 *)((char *)v941 + 9);
              *v940 = v942;
              v943 = (v684 + 287) & 0xFFFFFFFFFFFFFFF8;
              v944 = ((unint64_t)v685 + 287) & 0xFFFFFFFFFFFFFFF8;
              v945 = *(_OWORD *)v944;
              *(_BYTE *)(v943 + 16) = *(_BYTE *)(v944 + 16);
              *(_OWORD *)v943 = v945;
              v946 = (_QWORD *)((v684 + 311) & 0xFFFFFFFFFFFFF8);
              v947 = ((unint64_t)v685 + 311) & 0xFFFFFFFFFFFFF8;
              v948 = *(_QWORD *)v947;
              v947 += 15;
              *v946 = v948;
              v949 = (_QWORD *)(((unint64_t)v946 + 15) & 0xFFFFFFFFFFFFFFF8);
              v950 = *(_QWORD *)(v947 & 0xFFFFFFFFFFFFFFF8);
              v951 = *(_QWORD *)((v947 & 0xFFFFFFFFFFFFFFF8) + 8);
              sub_23AA7F2D4(v950, v951);
              *v949 = v950;
              v949[1] = v951;
              v306 = v2075;
              v310 = v2075;
              v307 = v2059;
              v90 = v1997;
              v286 = a2;
              v308 = v2123;
              v284 = v2094 + 327;
              if (!v2059)
                goto LABEL_594;
LABEL_1263:
              v952 = ((((v2025
                       + 327
                       + ((((((((((v2087 + v310) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                           + 19) & 0xFFFFFFFFFFFFFFF8)
                         + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 16;
              v2153 = (void *)(((unint64_t)v3 + v309 + v952) & v2036);
              v953 = (const void *)(((unint64_t)v286 + v309 + v952) & v2036);
              if (v2044 == v2047)
              {
                v954 = (*(uint64_t (**)(const void *, _QWORD, uint64_t))(v88 + 48))(v953, v2044, v92);
                v955 = v2153;
LABEL_1277:
                if (v954)
                {
LABEL_1278:
                  memcpy(v955, v953, __na);
                  v963 = v2123;
LABEL_1279:
                  v964 = v963;
LABEL_1329:
                  v1153 = ((((v2025
                            + 327
                            + ((((((((((v2087 + v964) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 19) & 0xFFFFFFFFFFFFFFF8)
                              + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 16;
                  *(_QWORD *)(((unint64_t)v955 + v1153) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v953
                                                                                                  + v1153) & 0xFFFFFFFFFFFFF8);
                  v1154 = ((v2106
                          + ((v2128
                            + 16
                            + ((((v284
                                + ((((((((((v2087 + v963) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 19) & 0xFFFFFFFFFFFFFFF8)
                                  + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)) & v2117)) & 0xFFFFFFFFFFFFFFF8)
                        + 8;
                  if (v1154 <= v2130)
                    v1154 = v2130;
                  if (v2099 > v1154)
                    v1154 = v2099;
                  if (v2136 > v1154)
                    v1154 = v2136;
                  if (__na > v1154)
                    v1154 = __na;
                  if (v2145 > v1154)
                    v1154 = v2145;
                  if (v2098 > v1154)
                    v1154 = v2132 + 2;
                  if (v2101 > v1154)
                    v1154 = v2101;
                  if (v2112 > v1154)
                    v1154 = v2112;
                  if (v2102 > v1154)
                    v1154 = v2102;
                  if (v1154 <= v2145)
                    v1154 = v2145;
                  if (v1154 <= v2131)
                    v1154 = v2131;
                  if (v1154 <= v2103)
                    v1154 = v2103;
                  if (v1154 <= v2145)
                    v1154 = v2145;
                  if (v1154 <= v2100)
                    v1154 = v2100;
                  if (v1154 <= v2112)
                    v1154 = v2112;
                  if (v1154 <= v2145)
                    v1154 = v2145;
                  if (v1154 <= v2132)
                    v1154 = v2132;
                  if (v1154 <= v2145)
                    v1154 = v2145;
                  if (v1154 <= v2105)
                    v1154 = v2105;
                  if (v1154 <= v2112)
                    v1154 = v2112;
                  if (v1154 <= v2145)
                    v1154 = v2145;
                  if (v1154 <= 0x38)
                    v1154 = 56;
                  if (v1154 > 3)
                    goto LABEL_1374;
                  v1155 = ((1 << (8 * v1154)) + 5) >> (8 * v1154);
                  if (v1155 > 0xFFD8)
                  {
                    *(_DWORD *)((char *)v3 + v1154) = 6;
                    return v3;
                  }
                  if (v1155 <= 0xD8)
LABEL_1374:
                    *((_BYTE *)v3 + v1154) = 6;
                  else
                    *(_WORD *)((char *)v3 + v1154) = 6;
                  return v3;
                }
                v956 = ((unint64_t)v953 + v2066) & v2082;
                v957 = (v2037 + v956) & v2084;
LABEL_1281:
                v2021 = v284;
                v965 = v306;
                v966 = *(void (**)(void *, const void *, uint64_t))(v2122 + 16);
                v2134 = v953;
                v966(v955, v953, v92);
                v966((void *)(((unint64_t)v955 + v2066) & v2082), (const void *)v956, v92);
                v967 = (v2037 + (((unint64_t)v955 + v2066) & v2082)) & v2084;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v2062 + 16))(v967, v957, v2063);
                v968 = (_QWORD *)((v2065 + v967) & 0xFFFFFFFFFFFFFFF8);
                v969 = (_QWORD *)((v2065 + v957) & 0xFFFFFFFFFFFFFFF8);
                *v968 = *v969;
                v970 = ((unint64_t)v968 + v2056) & v2052;
                v971 = ((unint64_t)v969 + v2056) & v2052;
                v972 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2057 + 16);
                swift_bridgeObjectRetain();
                v972(v970, v971, v2058);
                v973 = (_QWORD *)((v2050 + v970) & 0xFFFFFFFFFFFFF8);
                v974 = (_QWORD *)((v2050 + v971) & 0xFFFFFFFFFFFFF8);
                *v973 = *v974;
                v975 = (_QWORD *)(((unint64_t)v973 + 15) & 0xFFFFFFFFFFFFFFF8);
                v976 = (_QWORD *)(((unint64_t)v974 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v975 = *v976;
                v975[1] = v976[1];
                v977 = (_QWORD *)(v967 + v2069);
                *v977 = *(_QWORD *)(v957 + v2069);
                v977[1] = *(_QWORD *)(v957 + v2069 + 8);
                v978 = (v2120 + v967 + v2069) & v2076;
                v979 = (v2120 + v957 + v2069) & v2076;
                *(_BYTE *)v978 = *(_BYTE *)v979;
                v980 = v978 | 4;
                v981 = *(_DWORD *)(v979 | 4);
                *(_BYTE *)(v980 + 4) = *(_BYTE *)((v979 | 4) + 4);
                *(_DWORD *)v980 = v981;
                *(_WORD *)(v978 + 10) = *(_WORD *)(v979 + 0xA);
                v982 = (v2077 + v978) & v90;
                v983 = (v2077 + v979) & v90;
                v984 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2080 + 16);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v984(v982, v983, v2079);
                v985 = (v2073 + v982) & v90;
                v986 = (v2073 + v983) & v90;
                v984(v985, v986, v2079);
                v987 = (_BYTE *)(v985 + v965);
                *v987 = *(_BYTE *)(v986 + v965);
                v987[1] = *(_BYTE *)(v986 + v965 + 1);
                v987[2] = *(_BYTE *)(v986 + v965 + 2);
                v987[3] = *(_BYTE *)(v986 + v965 + 3);
                v987[4] = *(_BYTE *)(v986 + v965 + 4);
                v988 = (v985 + v965 + 12) & 0xFFFFFFFFFFFFFFF8;
                v989 = (v986 + v965 + 12) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v988 = *(_QWORD *)v989;
                *(_QWORD *)(v988 + 8) = *(_QWORD *)(v989 + 8);
                *(_BYTE *)(v988 + 16) = *(_BYTE *)(v989 + 16);
                *(_BYTE *)(v988 + 17) = *(_BYTE *)(v989 + 17);
                *(_BYTE *)(v988 + 18) = *(_BYTE *)(v989 + 18);
                *(_BYTE *)(v988 + 19) = *(_BYTE *)(v989 + 19);
                v990 = (v988 + 27) & 0xFFFFFFFFFFFFFFF8;
                v991 = (v989 + 27) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v990 = *(_QWORD *)v991;
                *(_BYTE *)(v990 + 8) = *(_BYTE *)(v991 + 8);
                *(_BYTE *)(v990 + 9) = *(_BYTE *)(v991 + 9);
                *(_BYTE *)(v990 + 10) = *(_BYTE *)(v991 + 10);
                *(_BYTE *)(v990 + 11) = *(_BYTE *)(v991 + 11);
                *(_BYTE *)(v990 + 12) = *(_BYTE *)(v991 + 12);
                v992 = (_QWORD *)((v988 + 47) & 0xFFFFFFFFFFFFF8);
                v993 = (_QWORD *)((v989 + 47) & 0xFFFFFFFFFFFFF8);
                *v992 = *v993;
                v994 = ((unint64_t)v992 + 15) & 0xFFFFFFFFFFFFFFF8;
                v995 = ((unint64_t)v993 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v994 = *(_QWORD *)v995;
                *(_BYTE *)(v994 + 8) = *(_BYTE *)(v995 + 8);
                *(_BYTE *)(v994 + 9) = *(_BYTE *)(v995 + 9);
                v996 = (void *)((v2070 + v994) & v90);
                v997 = (const void *)((v2070 + v995) & v90);
                v998 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v2080 + 48);
                swift_bridgeObjectRetain();
                if (v998(v997, 1, v2079))
                {
                  memcpy(v996, v997, v2123);
                }
                else
                {
                  v984((unint64_t)v996, (unint64_t)v997, v2079);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v2080 + 56))(v996, 0, 1, v2079);
                }
                v999 = (_QWORD *)(((unint64_t)v996 + v2071) & 0xFFFFFFFFFFFFFFF8);
                v1000 = (_QWORD *)(((unint64_t)v997 + v2071) & 0xFFFFFFFFFFFFFFF8);
                *v999 = *v1000;
                v1001 = ((unint64_t)v999 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1002 = ((unint64_t)v1000 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1003 = *(_QWORD *)v1002;
                *(_BYTE *)(v1001 + 8) = *(_BYTE *)(v1002 + 8);
                *(_QWORD *)v1001 = v1003;
                v1004 = (_QWORD *)(((unint64_t)v999 + 31) & 0xFFFFFFFFFFFFF8);
                v1005 = (_QWORD *)(((unint64_t)v1000 + 31) & 0xFFFFFFFFFFFFF8);
                *v1004 = *v1005;
                v1006 = ((unint64_t)v1004 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1007 = (uint64_t *)(((unint64_t)v1005 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1008 = v1007[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if ((v1008 & 0x3000000000000000) != 0)
                {
                  *(_OWORD *)v1006 = *(_OWORD *)v1007;
                }
                else
                {
                  v1009 = *v1007;
                  sub_23AAAE668(*v1007, v1008);
                  *(_QWORD *)v1006 = v1009;
                  *(_QWORD *)(v1006 + 8) = v1008;
                }
                v1010 = (v1006 + 19) & 0xFFFFFFFFFFFFFFF8;
                v1011 = ((unint64_t)v1007 + 19) & 0xFFFFFFFFFFFFFFF8;
                v1012 = *(_QWORD *)v1011;
                *(_BYTE *)(v1010 + 8) = *(_BYTE *)(v1011 + 8);
                *(_QWORD *)v1010 = v1012;
                *(_BYTE *)(v1010 + 9) = *(_BYTE *)(v1011 + 9);
                v1013 = (v1010 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                v1014 = (v1011 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                v1015 = *(_DWORD *)v1014;
                *(_BYTE *)(v1013 + 4) = *(_BYTE *)(v1014 + 4);
                *(_DWORD *)v1013 = v1015;
                v1016 = (_QWORD *)((v1010 + 25) & 0xFFFFFFFFFFFFFFF8);
                v1017 = (_QWORD *)((v1011 + 25) & 0xFFFFFFFFFFFFFFF8);
                *v1016 = *v1017;
                v1016[1] = v1017[1];
                v1018 = v978 + v2072;
                v1019 = v979 + v2072;
                v1020 = *(_QWORD *)(v979 + v2072 + 16);
                if (v1020 >= 0xFFFFFFFF)
                  LODWORD(v1020) = -1;
                v1021 = v1020 - 1;
                swift_bridgeObjectRetain();
                if (v1021 < 0)
                {
                  *(_QWORD *)v1018 = *(_QWORD *)v1019;
                  *(_BYTE *)(v1018 + 8) = *(_BYTE *)(v1019 + 8);
                  *(_BYTE *)(v1018 + 9) = *(_BYTE *)(v1019 + 9);
                  v1034 = *(void **)(v1019 + 16);
                  v1035 = v1034;
                  *(_QWORD *)(v1018 + 16) = v1034;
                  v1036 = *(void **)(v1019 + 24);
                  v1037 = v1036;
                  *(_QWORD *)(v1018 + 24) = v1036;
                  *(_BYTE *)(v1018 + 32) = *(_BYTE *)(v1019 + 32);
                  *(_BYTE *)(v1018 + 33) = *(_BYTE *)(v1019 + 33);
                  *(_BYTE *)(v1018 + 34) = *(_BYTE *)(v1019 + 34);
                  *(_QWORD *)(v1018 + 40) = *(_QWORD *)(v1019 + 40);
                  *(_QWORD *)(v1018 + 48) = *(_QWORD *)(v1019 + 48);
                  *(_QWORD *)(v1018 + 56) = *(_QWORD *)(v1019 + 56);
                  *(_QWORD *)(v1018 + 64) = *(_QWORD *)(v1019 + 64);
                  *(_BYTE *)(v1018 + 72) = *(_BYTE *)(v1019 + 72);
                  *(_QWORD *)(v1018 + 80) = *(_QWORD *)(v1019 + 80);
                  *(_QWORD *)(v1018 + 88) = *(_QWORD *)(v1019 + 88);
                  v1038 = *(void **)(v1019 + 96);
                  *(_QWORD *)(v1018 + 96) = v1038;
                  *(_BYTE *)(v1018 + 104) = *(_BYTE *)(v1019 + 104);
                  *(_BYTE *)(v1018 + 105) = *(_BYTE *)(v1019 + 105);
                  *(_QWORD *)(v1018 + 112) = *(_QWORD *)(v1019 + 112);
                  *(_QWORD *)(v1018 + 120) = *(_QWORD *)(v1019 + 120);
                  *(_QWORD *)(v1018 + 128) = *(_QWORD *)(v1019 + 128);
                  *(_QWORD *)(v1018 + 136) = *(_QWORD *)(v1019 + 136);
                  *(_QWORD *)(v1018 + 144) = *(_QWORD *)(v1019 + 144);
                  *(_QWORD *)(v1018 + 152) = *(_QWORD *)(v1019 + 152);
                  *(_QWORD *)(v1018 + 160) = *(_QWORD *)(v1019 + 160);
                  *(_QWORD *)(v1018 + 168) = *(_QWORD *)(v1019 + 168);
                  *(_BYTE *)(v1018 + 176) = *(_BYTE *)(v1019 + 176);
                  *(_QWORD *)(v1018 + 184) = *(_QWORD *)(v1019 + 184);
                  v2127 = *(_QWORD *)(v1019 + 192);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v1039 = v1038;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v2127)
                  {
                    *(_QWORD *)(v1018 + 192) = v2127;
                    *(_QWORD *)(v1018 + 200) = *(_QWORD *)(v1019 + 200);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    *(_OWORD *)(v1018 + 192) = *(_OWORD *)(v1019 + 192);
                  }
                  v284 = v2021;
                  v955 = v2153;
                  *(_QWORD *)(v1018 + 208) = *(_QWORD *)(v1019 + 208);
                  *(_QWORD *)(v1018 + 216) = *(_QWORD *)(v1019 + 216);
                  *(_QWORD *)(v1018 + 224) = *(_QWORD *)(v1019 + 224);
                  *(_QWORD *)(v1018 + 232) = *(_QWORD *)(v1019 + 232);
                  *(_QWORD *)(v1018 + 240) = *(_QWORD *)(v1019 + 240);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  v1022 = *(_OWORD *)v1019;
                  v1023 = *(_OWORD *)(v1019 + 16);
                  v1024 = *(_OWORD *)(v1019 + 48);
                  *(_OWORD *)(v1018 + 32) = *(_OWORD *)(v1019 + 32);
                  *(_OWORD *)(v1018 + 48) = v1024;
                  *(_OWORD *)v1018 = v1022;
                  *(_OWORD *)(v1018 + 16) = v1023;
                  v1025 = *(_OWORD *)(v1019 + 64);
                  v1026 = *(_OWORD *)(v1019 + 80);
                  v1027 = *(_OWORD *)(v1019 + 112);
                  *(_OWORD *)(v1018 + 96) = *(_OWORD *)(v1019 + 96);
                  *(_OWORD *)(v1018 + 112) = v1027;
                  *(_OWORD *)(v1018 + 64) = v1025;
                  *(_OWORD *)(v1018 + 80) = v1026;
                  v1028 = *(_OWORD *)(v1019 + 128);
                  v1029 = *(_OWORD *)(v1019 + 144);
                  v1030 = *(_OWORD *)(v1019 + 176);
                  *(_OWORD *)(v1018 + 160) = *(_OWORD *)(v1019 + 160);
                  *(_OWORD *)(v1018 + 176) = v1030;
                  *(_OWORD *)(v1018 + 128) = v1028;
                  *(_OWORD *)(v1018 + 144) = v1029;
                  v1031 = *(_OWORD *)(v1019 + 192);
                  v1032 = *(_OWORD *)(v1019 + 208);
                  v1033 = *(_OWORD *)(v1019 + 224);
                  *(_QWORD *)(v1018 + 240) = *(_QWORD *)(v1019 + 240);
                  *(_OWORD *)(v1018 + 208) = v1032;
                  *(_OWORD *)(v1018 + 224) = v1033;
                  *(_OWORD *)(v1018 + 192) = v1031;
                  v284 = v2021;
                  v955 = v2153;
                }
                v1141 = (_OWORD *)((v1018 + 255) & 0xFFFFFFFFFFFFFFF8);
                v1142 = (__int128 *)((v1019 + 255) & 0xFFFFFFFFFFFFFFF8);
                v1143 = *v1142;
                *(_OWORD *)((char *)v1141 + 9) = *(__int128 *)((char *)v1142 + 9);
                *v1141 = v1143;
                v1144 = (v1018 + 287) & 0xFFFFFFFFFFFFFFF8;
                v1145 = (v1019 + 287) & 0xFFFFFFFFFFFFFFF8;
                v1146 = *(_OWORD *)v1145;
                *(_BYTE *)(v1144 + 16) = *(_BYTE *)(v1145 + 16);
                *(_OWORD *)v1144 = v1146;
                v1147 = (_QWORD *)((v1018 + 311) & 0xFFFFFFFFFFFFF8);
                v1148 = (v1019 + 311) & 0xFFFFFFFFFFFFF8;
                v1149 = *(_QWORD *)v1148;
                v1148 += 15;
                *v1147 = v1149;
                v1150 = (_QWORD *)(((unint64_t)v1147 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1151 = *(_QWORD *)(v1148 & 0xFFFFFFFFFFFFFFF8);
                v1152 = *(_QWORD *)((v1148 & 0xFFFFFFFFFFFFFFF8) + 8);
                sub_23AA7F2D4(v1151, v1152);
                *v1150 = v1151;
                v1150[1] = v1152;
                v3 = a1;
                v963 = v2123;
                v964 = v2075;
                v953 = v2134;
                if (v2059)
                  goto LABEL_1329;
                goto LABEL_1279;
              }
              v956 = ((unint64_t)v953 + v2066) & v2082;
              v957 = (v2037 + v956) & v2084;
              if (v2046 == v2047)
              {
                v955 = (void *)(((unint64_t)v3 + v309 + v952) & v2036);
                if (v2040 == v2046)
                {
                  v954 = (*(uint64_t (**)(unint64_t))(v2062 + 48))((v2037 + v956) & v2084);
                  goto LABEL_1277;
                }
                v960 = (unint64_t *)((v2065 + v957) & 0xFFFFFFFFFFFFFFF8);
                if (v2027 > 0x7FFFFFFE)
                {
                  v954 = (*(uint64_t (**)(unint64_t))(v2057 + 48))(((unint64_t)v960 + v2056) & v2052);
                  goto LABEL_1277;
                }
                v961 = *v960;
              }
              else
              {
                v958 = v957 + v2069;
                v955 = v2153;
                if ((v2023 & 0x80000000) == 0)
                {
                  v959 = *(_QWORD *)(v958 + 8);
                  if (v959 >= 0xFFFFFFFF)
                    LODWORD(v959) = -1;
                  v954 = v959 + 1;
                  goto LABEL_1277;
                }
                v962 = (v2077 + ((v2120 + v958) & v2076)) & v90;
                if (v307 > 0x7FFFFFFD)
                {
                  v954 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v962);
                  goto LABEL_1277;
                }
                v961 = *(_QWORD *)(((v2043 + ((v2073 + v962) & v90)) & 0xFFFFFFFFFFFFF8) + 8);
              }
              if (v961 >= 0xFFFFFFFF)
                LODWORD(v961) = -1;
              if ((v961 + 1) >= 2)
                goto LABEL_1278;
              goto LABEL_1281;
            }
            v305 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v846);
          }
LABEL_592:
          if (v305)
          {
LABEL_593:
            memcpy(a1, a2, __na);
            v306 = v2075;
            v307 = v2059;
            v308 = v2123;
            v309 = v2018;
LABEL_594:
            v310 = v308;
            goto LABEL_1263;
          }
          goto LABEL_822;
        case 7u:
          v1984 = v83;
          v311 = v90;
          v312 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2124 + 16);
          v313 = v87;
          ((void (*)(_QWORD *, _QWORD *))v312)(a1, a2);
          v312(((unint64_t)a1 + v2067) & v2068, ((unint64_t)a2 + v2067) & v2068, v313);
          v314 = ((((unint64_t)a1 + v2067) & v2068) + v2115 + v2137) & v2078;
          v315 = ((((unint64_t)a2 + v2067) & v2068) + v2115 + v2137) & v2078;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v2060 + 16))(v314, v315, v2061);
          v316 = (_QWORD *)((v2064 + v314) & 0xFFFFFFFFFFFFFFF8);
          v317 = (_QWORD *)((v2064 + v315) & 0xFFFFFFFFFFFFFFF8);
          *v316 = *v317;
          v318 = ((unint64_t)v316 + v2053) & v2051;
          v319 = ((unint64_t)v317 + v2053) & v2051;
          v320 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2054 + 16);
          swift_bridgeObjectRetain();
          v320(v318, v319, v2055);
          v321 = (_QWORD *)((v2049 + v318) & 0xFFFFFFFFFFFFF8);
          v322 = (_QWORD *)((v2049 + v319) & 0xFFFFFFFFFFFFF8);
          *v321 = *v322;
          v323 = (_QWORD *)(((unint64_t)v321 + 15) & 0xFFFFFFFFFFFFFFF8);
          v324 = (_QWORD *)(((unint64_t)v322 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v323 = *v324;
          v323[1] = v324[1];
          v325 = (_QWORD *)(v2119 + v314);
          *v325 = *(_QWORD *)(v2119 + v315);
          v325[1] = *(_QWORD *)(v2119 + v315 + 8);
          v326 = (v2120 + v2119 + v314) & v2076;
          v327 = (v2120 + v2119 + v315) & v2076;
          *(_BYTE *)v326 = *(_BYTE *)v327;
          v328 = v326 | 4;
          v329 = *(_DWORD *)(v327 | 4);
          *(_BYTE *)(v328 + 4) = *(_BYTE *)((v327 | 4) + 4);
          *(_DWORD *)v328 = v329;
          *(_WORD *)(v326 + 10) = *(_WORD *)(v327 + 0xA);
          v330 = (v2077 + v326) & v311;
          v2147 = v327;
          v331 = (v2077 + v327) & v311;
          v332 = *(void (**)(size_t, size_t, uint64_t))(v2080 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v332(v330, v331, v2079);
          v333 = (v2073 + v330) & v311;
          v334 = (v2073 + v331) & v311;
          v332(v333, v334, v2079);
          v335 = (_BYTE *)(v333 + v2075);
          *v335 = *(_BYTE *)(v334 + v2075);
          v335[1] = *(_BYTE *)(v334 + v2075 + 1);
          v335[2] = *(_BYTE *)(v334 + v2075 + 2);
          v335[3] = *(_BYTE *)(v334 + v2075 + 3);
          v335[4] = *(_BYTE *)(v334 + v2075 + 4);
          v336 = (v333 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
          v337 = (v334 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v336 = *(_QWORD *)v337;
          *(_QWORD *)(v336 + 8) = *(_QWORD *)(v337 + 8);
          *(_BYTE *)(v336 + 16) = *(_BYTE *)(v337 + 16);
          *(_BYTE *)(v336 + 17) = *(_BYTE *)(v337 + 17);
          *(_BYTE *)(v336 + 18) = *(_BYTE *)(v337 + 18);
          *(_BYTE *)(v336 + 19) = *(_BYTE *)(v337 + 19);
          v338 = (v336 + 27) & 0xFFFFFFFFFFFFFFF8;
          v339 = (v337 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v338 = *(_QWORD *)v339;
          *(_BYTE *)(v338 + 8) = *(_BYTE *)(v339 + 8);
          *(_BYTE *)(v338 + 9) = *(_BYTE *)(v339 + 9);
          *(_BYTE *)(v338 + 10) = *(_BYTE *)(v339 + 10);
          *(_BYTE *)(v338 + 11) = *(_BYTE *)(v339 + 11);
          *(_BYTE *)(v338 + 12) = *(_BYTE *)(v339 + 12);
          v340 = (_QWORD *)((v336 + 47) & 0xFFFFFFFFFFFFF8);
          v341 = (_QWORD *)((v337 + 47) & 0xFFFFFFFFFFFFF8);
          *v340 = *v341;
          v342 = ((unint64_t)v340 + 15) & 0xFFFFFFFFFFFFFFF8;
          v343 = ((unint64_t)v341 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v342 = *(_QWORD *)v343;
          *(_BYTE *)(v342 + 8) = *(_BYTE *)(v343 + 8);
          *(_BYTE *)(v342 + 9) = *(_BYTE *)(v343 + 9);
          v344 = (void *)((v2070 + v342) & v311);
          v345 = (const void *)((v2070 + v343) & v311);
          v346 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v2080 + 48);
          swift_bridgeObjectRetain();
          if (v346(v345, 1, v2079))
          {
            memcpy(v344, v345, v2123);
          }
          else
          {
            v332((size_t)v344, (size_t)v345, v2079);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v2080 + 56))(v344, 0, 1, v2079);
          }
          v456 = (_QWORD *)(((unint64_t)v344 + v2071) & 0xFFFFFFFFFFFFFFF8);
          v457 = (_QWORD *)(((unint64_t)v345 + v2071) & 0xFFFFFFFFFFFFFFF8);
          *v456 = *v457;
          v458 = ((unint64_t)v456 + 15) & 0xFFFFFFFFFFFFFFF8;
          v459 = ((unint64_t)v457 + 15) & 0xFFFFFFFFFFFFFFF8;
          v460 = *(_QWORD *)v459;
          *(_BYTE *)(v458 + 8) = *(_BYTE *)(v459 + 8);
          *(_QWORD *)v458 = v460;
          v461 = (_QWORD *)(((unint64_t)v456 + 31) & 0xFFFFFFFFFFFFF8);
          v462 = (_QWORD *)(((unint64_t)v457 + 31) & 0xFFFFFFFFFFFFF8);
          *v461 = *v462;
          v463 = ((unint64_t)v461 + 15) & 0xFFFFFFFFFFFFFFF8;
          v464 = (uint64_t *)(((unint64_t)v462 + 15) & 0xFFFFFFFFFFFFFFF8);
          v465 = v464[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v465 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v463 = *(_OWORD *)v464;
          }
          else
          {
            v476 = *v464;
            sub_23AAAE668(*v464, v465);
            *(_QWORD *)v463 = v476;
            *(_QWORD *)(v463 + 8) = v465;
          }
          v477 = (v463 + 19) & 0xFFFFFFFFFFFFFFF8;
          v478 = ((unint64_t)v464 + 19) & 0xFFFFFFFFFFFFFFF8;
          v479 = *(_QWORD *)v478;
          *(_BYTE *)(v477 + 8) = *(_BYTE *)(v478 + 8);
          *(_QWORD *)v477 = v479;
          *(_BYTE *)(v477 + 9) = *(_BYTE *)(v478 + 9);
          v480 = (v477 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v481 = (v478 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v482 = *(_DWORD *)v481;
          *(_BYTE *)(v480 + 4) = *(_BYTE *)(v481 + 4);
          *(_DWORD *)v480 = v482;
          v483 = (_QWORD *)((v477 + 25) & 0xFFFFFFFFFFFFFFF8);
          v484 = (_QWORD *)((v478 + 25) & 0xFFFFFFFFFFFFFFF8);
          *v483 = *v484;
          v483[1] = v484[1];
          v485 = v2072 + v326;
          v486 = (__int128 *)(v2072 + v2147);
          v487 = *(_QWORD *)(v2072 + v2147 + 16);
          if (v487 >= 0xFFFFFFFF)
            LODWORD(v487) = -1;
          v488 = v487 - 1;
          swift_bridgeObjectRetain();
          v489 = v2083;
          if (v488 < 0)
          {
            *(_QWORD *)v485 = *(_QWORD *)v486;
            *(_BYTE *)(v485 + 8) = *((_BYTE *)v486 + 8);
            *(_BYTE *)(v485 + 9) = *((_BYTE *)v486 + 9);
            v528 = (void *)*((_QWORD *)v486 + 2);
            v529 = v528;
            *(_QWORD *)(v485 + 16) = v528;
            v530 = (void *)*((_QWORD *)v486 + 3);
            v531 = v530;
            *(_QWORD *)(v485 + 24) = v530;
            *(_BYTE *)(v485 + 32) = *((_BYTE *)v486 + 32);
            *(_BYTE *)(v485 + 33) = *((_BYTE *)v486 + 33);
            *(_BYTE *)(v485 + 34) = *((_BYTE *)v486 + 34);
            *(_QWORD *)(v485 + 40) = *((_QWORD *)v486 + 5);
            *(_QWORD *)(v485 + 48) = *((_QWORD *)v486 + 6);
            *(_QWORD *)(v485 + 56) = *((_QWORD *)v486 + 7);
            *(_QWORD *)(v485 + 64) = *((_QWORD *)v486 + 8);
            *(_BYTE *)(v485 + 72) = *((_BYTE *)v486 + 72);
            *(_QWORD *)(v485 + 80) = *((_QWORD *)v486 + 10);
            *(_QWORD *)(v485 + 88) = *((_QWORD *)v486 + 11);
            v2149 = (void *)*((_QWORD *)v486 + 12);
            *(_QWORD *)(v485 + 96) = v2149;
            *(_BYTE *)(v485 + 104) = *((_BYTE *)v486 + 104);
            *(_BYTE *)(v485 + 105) = *((_BYTE *)v486 + 105);
            *(_QWORD *)(v485 + 112) = *((_QWORD *)v486 + 14);
            *(_QWORD *)(v485 + 120) = *((_QWORD *)v486 + 15);
            *(_QWORD *)(v485 + 128) = *((_QWORD *)v486 + 16);
            *(_QWORD *)(v485 + 136) = *((_QWORD *)v486 + 17);
            *(_QWORD *)(v485 + 144) = *((_QWORD *)v486 + 18);
            *(_QWORD *)(v485 + 152) = *((_QWORD *)v486 + 19);
            *(_QWORD *)(v485 + 160) = *((_QWORD *)v486 + 20);
            *(_QWORD *)(v485 + 168) = *((_QWORD *)v486 + 21);
            *(_BYTE *)(v485 + 176) = *((_BYTE *)v486 + 176);
            *(_QWORD *)(v485 + 184) = *((_QWORD *)v486 + 23);
            v532 = *((_QWORD *)v486 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v533 = v2149;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v532)
            {
              *(_QWORD *)(v485 + 192) = v532;
              *(_QWORD *)(v485 + 200) = *((_QWORD *)v486 + 25);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v485 + 192) = v486[12];
            }
            v3 = a1;
            v489 = v2083;
            *(_QWORD *)(v485 + 208) = *((_QWORD *)v486 + 26);
            *(_QWORD *)(v485 + 216) = *((_QWORD *)v486 + 27);
            *(_QWORD *)(v485 + 224) = *((_QWORD *)v486 + 28);
            *(_QWORD *)(v485 + 232) = *((_QWORD *)v486 + 29);
            *(_QWORD *)(v485 + 240) = *((_QWORD *)v486 + 30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v490 = *v486;
            v491 = v486[1];
            v492 = v486[3];
            *(_OWORD *)(v485 + 32) = v486[2];
            *(_OWORD *)(v485 + 48) = v492;
            *(_OWORD *)v485 = v490;
            *(_OWORD *)(v485 + 16) = v491;
            v493 = v486[4];
            v494 = v486[5];
            v495 = v486[7];
            *(_OWORD *)(v485 + 96) = v486[6];
            *(_OWORD *)(v485 + 112) = v495;
            *(_OWORD *)(v485 + 64) = v493;
            *(_OWORD *)(v485 + 80) = v494;
            v496 = v486[8];
            v497 = v486[9];
            v498 = v486[11];
            *(_OWORD *)(v485 + 160) = v486[10];
            *(_OWORD *)(v485 + 176) = v498;
            *(_OWORD *)(v485 + 128) = v496;
            *(_OWORD *)(v485 + 144) = v497;
            v499 = v486[12];
            v500 = v486[13];
            v501 = v486[14];
            *(_QWORD *)(v485 + 240) = *((_QWORD *)v486 + 30);
            *(_OWORD *)(v485 + 208) = v500;
            *(_OWORD *)(v485 + 224) = v501;
            *(_OWORD *)(v485 + 192) = v499;
          }
          v707 = (_OWORD *)((v485 + 255) & 0xFFFFFFFFFFFFFFF8);
          v708 = (__int128 *)(((unint64_t)v486 + 255) & 0xFFFFFFFFFFFFFFF8);
          v709 = *v708;
          *(_OWORD *)((char *)v707 + 9) = *(__int128 *)((char *)v708 + 9);
          *v707 = v709;
          v710 = (v485 + 287) & 0xFFFFFFFFFFFFFFF8;
          v711 = ((unint64_t)v486 + 287) & 0xFFFFFFFFFFFFFFF8;
          v712 = *(_OWORD *)v711;
          *(_BYTE *)(v710 + 16) = *(_BYTE *)(v711 + 16);
          *(_OWORD *)v710 = v712;
          v713 = (_QWORD *)((v485 + 311) & 0xFFFFFFFFFFFFF8);
          v714 = ((unint64_t)v486 + 311) & 0xFFFFFFFFFFFFF8;
          v715 = *(_QWORD *)v714;
          v714 += 15;
          *v713 = v715;
          v716 = (_QWORD *)(((unint64_t)v713 + 15) & 0xFFFFFFFFFFFFFFF8);
          v717 = *(_QWORD *)(v714 & 0xFFFFFFFFFFFFFFF8);
          v718 = *(_QWORD *)((v714 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_23AA7F2D4(v717, v718);
          *v716 = v717;
          v716[1] = v718;
          if (v1984 > 3)
            goto LABEL_884;
          v719 = ((1 << (8 * v1984)) + 5) >> (8 * v1984);
          if (v719 > 0xFFD8)
          {
            *v489 = 7;
          }
          else if (v719 <= 0xD8)
          {
LABEL_884:
            *(_BYTE *)v489 = 7;
          }
          else
          {
            *(_WORD *)v489 = 7;
          }
          return v3;
        case 8u:
          v1985 = v83;
          v347 = v88;
          v348 = v90;
          v349 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v347 + 16);
          v349(a1, a2, v92);
          v349((_QWORD *)(((unint64_t)a1 + v2066) & v2082), (_QWORD *)(((unint64_t)a2 + v2066) & v2082), v92);
          v350 = ((((unint64_t)a1 + v2066) & v2082) + v2114 + v2041) & v2084;
          v351 = ((((unint64_t)a2 + v2066) & v2082) + v2114 + v2041) & v2084;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v2062 + 16))(v350, v351, v2063);
          v352 = (_QWORD *)((v2065 + v350) & 0xFFFFFFFFFFFFFFF8);
          v353 = (_QWORD *)((v2065 + v351) & 0xFFFFFFFFFFFFFFF8);
          *v352 = *v353;
          v354 = ((unint64_t)v352 + v2056) & v2052;
          v355 = ((unint64_t)v353 + v2056) & v2052;
          v356 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2057 + 16);
          swift_bridgeObjectRetain();
          v356(v354, v355, v2058);
          v357 = (_QWORD *)((v2050 + v354) & 0xFFFFFFFFFFFFF8);
          v358 = (_QWORD *)((v2050 + v355) & 0xFFFFFFFFFFFFF8);
          *v357 = *v358;
          v359 = (_QWORD *)(((unint64_t)v357 + 15) & 0xFFFFFFFFFFFFFFF8);
          v360 = (_QWORD *)(((unint64_t)v358 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v359 = *v360;
          v359[1] = v360[1];
          v361 = (_QWORD *)(v2069 + v350);
          *v361 = *(_QWORD *)(v2069 + v351);
          v361[1] = *(_QWORD *)(v2069 + v351 + 8);
          v362 = (v2120 + v2069 + v350) & v2076;
          v363 = (v2120 + v2069 + v351) & v2076;
          *(_BYTE *)v362 = *(_BYTE *)v363;
          v364 = v362 | 4;
          v365 = *(_DWORD *)(v363 | 4);
          *(_BYTE *)(v364 + 4) = *(_BYTE *)((v363 | 4) + 4);
          *(_DWORD *)v364 = v365;
          *(_WORD *)(v362 + 10) = *(_WORD *)(v363 + 0xA);
          v366 = (v2077 + v362) & v348;
          v2148 = v363;
          v367 = (v2077 + v363) & v348;
          v368 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2080 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v368(v366, v367, v2079);
          v369 = (v2073 + v366) & v348;
          v370 = (v2073 + v367) & v348;
          v368(v369, v370, v2079);
          v371 = (_BYTE *)(v369 + v2075);
          *v371 = *(_BYTE *)(v370 + v2075);
          v371[1] = *(_BYTE *)(v370 + v2075 + 1);
          v371[2] = *(_BYTE *)(v370 + v2075 + 2);
          v371[3] = *(_BYTE *)(v370 + v2075 + 3);
          v371[4] = *(_BYTE *)(v370 + v2075 + 4);
          v372 = (v369 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
          v373 = (v370 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v372 = *(_QWORD *)v373;
          *(_QWORD *)(v372 + 8) = *(_QWORD *)(v373 + 8);
          *(_BYTE *)(v372 + 16) = *(_BYTE *)(v373 + 16);
          *(_BYTE *)(v372 + 17) = *(_BYTE *)(v373 + 17);
          *(_BYTE *)(v372 + 18) = *(_BYTE *)(v373 + 18);
          *(_BYTE *)(v372 + 19) = *(_BYTE *)(v373 + 19);
          v374 = (v372 + 27) & 0xFFFFFFFFFFFFFFF8;
          v375 = (v373 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v374 = *(_QWORD *)v375;
          *(_BYTE *)(v374 + 8) = *(_BYTE *)(v375 + 8);
          *(_BYTE *)(v374 + 9) = *(_BYTE *)(v375 + 9);
          *(_BYTE *)(v374 + 10) = *(_BYTE *)(v375 + 10);
          *(_BYTE *)(v374 + 11) = *(_BYTE *)(v375 + 11);
          *(_BYTE *)(v374 + 12) = *(_BYTE *)(v375 + 12);
          v376 = (_QWORD *)((v372 + 47) & 0xFFFFFFFFFFFFF8);
          v377 = (_QWORD *)((v373 + 47) & 0xFFFFFFFFFFFFF8);
          *v376 = *v377;
          v378 = ((unint64_t)v376 + 15) & 0xFFFFFFFFFFFFFFF8;
          v379 = ((unint64_t)v377 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v378 = *(_QWORD *)v379;
          *(_BYTE *)(v378 + 8) = *(_BYTE *)(v379 + 8);
          *(_BYTE *)(v378 + 9) = *(_BYTE *)(v379 + 9);
          v380 = (void *)((v2070 + v378) & v348);
          v381 = (const void *)((v2070 + v379) & v348);
          v382 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v2080 + 48);
          swift_bridgeObjectRetain();
          if (v382(v381, 1, v2079))
          {
            memcpy(v380, v381, v2123);
          }
          else
          {
            v368((unint64_t)v380, (unint64_t)v381, v2079);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v2080 + 56))(v380, 0, 1, v2079);
          }
          v466 = (_QWORD *)(((unint64_t)v380 + v2071) & 0xFFFFFFFFFFFFFFF8);
          v467 = (_QWORD *)(((unint64_t)v381 + v2071) & 0xFFFFFFFFFFFFFFF8);
          *v466 = *v467;
          v468 = ((unint64_t)v466 + 15) & 0xFFFFFFFFFFFFFFF8;
          v469 = ((unint64_t)v467 + 15) & 0xFFFFFFFFFFFFFFF8;
          v470 = *(_QWORD *)v469;
          *(_BYTE *)(v468 + 8) = *(_BYTE *)(v469 + 8);
          *(_QWORD *)v468 = v470;
          v471 = (_QWORD *)(((unint64_t)v466 + 31) & 0xFFFFFFFFFFFFF8);
          v472 = (_QWORD *)(((unint64_t)v467 + 31) & 0xFFFFFFFFFFFFF8);
          *v471 = *v472;
          v473 = ((unint64_t)v471 + 15) & 0xFFFFFFFFFFFFFFF8;
          v474 = (uint64_t *)(((unint64_t)v472 + 15) & 0xFFFFFFFFFFFFFFF8);
          v475 = v474[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v475 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)v473 = *(_OWORD *)v474;
          }
          else
          {
            v502 = *v474;
            sub_23AAAE668(*v474, v475);
            *(_QWORD *)v473 = v502;
            *(_QWORD *)(v473 + 8) = v475;
          }
          v503 = (v473 + 19) & 0xFFFFFFFFFFFFFFF8;
          v504 = ((unint64_t)v474 + 19) & 0xFFFFFFFFFFFFFFF8;
          v505 = *(_QWORD *)v504;
          *(_BYTE *)(v503 + 8) = *(_BYTE *)(v504 + 8);
          *(_QWORD *)v503 = v505;
          *(_BYTE *)(v503 + 9) = *(_BYTE *)(v504 + 9);
          v506 = (v503 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v507 = (v504 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v508 = *(_DWORD *)v507;
          *(_BYTE *)(v506 + 4) = *(_BYTE *)(v507 + 4);
          *(_DWORD *)v506 = v508;
          v509 = (_QWORD *)((v503 + 25) & 0xFFFFFFFFFFFFFFF8);
          v510 = (_QWORD *)((v504 + 25) & 0xFFFFFFFFFFFFFFF8);
          *v509 = *v510;
          v509[1] = v510[1];
          v511 = v2072 + v362;
          v512 = (__int128 *)(v2072 + v2148);
          v513 = *(_QWORD *)(v2072 + v2148 + 16);
          if (v513 >= 0xFFFFFFFF)
            LODWORD(v513) = -1;
          v514 = v513 - 1;
          swift_bridgeObjectRetain();
          v515 = v2083;
          if (v514 < 0)
          {
            *(_QWORD *)v511 = *(_QWORD *)v512;
            *(_BYTE *)(v511 + 8) = *((_BYTE *)v512 + 8);
            *(_BYTE *)(v511 + 9) = *((_BYTE *)v512 + 9);
            v534 = (void *)*((_QWORD *)v512 + 2);
            v535 = v534;
            *(_QWORD *)(v511 + 16) = v534;
            v536 = (void *)*((_QWORD *)v512 + 3);
            v537 = v536;
            *(_QWORD *)(v511 + 24) = v536;
            *(_BYTE *)(v511 + 32) = *((_BYTE *)v512 + 32);
            *(_BYTE *)(v511 + 33) = *((_BYTE *)v512 + 33);
            *(_BYTE *)(v511 + 34) = *((_BYTE *)v512 + 34);
            *(_QWORD *)(v511 + 40) = *((_QWORD *)v512 + 5);
            *(_QWORD *)(v511 + 48) = *((_QWORD *)v512 + 6);
            *(_QWORD *)(v511 + 56) = *((_QWORD *)v512 + 7);
            *(_QWORD *)(v511 + 64) = *((_QWORD *)v512 + 8);
            *(_BYTE *)(v511 + 72) = *((_BYTE *)v512 + 72);
            *(_QWORD *)(v511 + 80) = *((_QWORD *)v512 + 10);
            *(_QWORD *)(v511 + 88) = *((_QWORD *)v512 + 11);
            v2150 = (void *)*((_QWORD *)v512 + 12);
            *(_QWORD *)(v511 + 96) = v2150;
            *(_BYTE *)(v511 + 104) = *((_BYTE *)v512 + 104);
            *(_BYTE *)(v511 + 105) = *((_BYTE *)v512 + 105);
            *(_QWORD *)(v511 + 112) = *((_QWORD *)v512 + 14);
            *(_QWORD *)(v511 + 120) = *((_QWORD *)v512 + 15);
            *(_QWORD *)(v511 + 128) = *((_QWORD *)v512 + 16);
            *(_QWORD *)(v511 + 136) = *((_QWORD *)v512 + 17);
            *(_QWORD *)(v511 + 144) = *((_QWORD *)v512 + 18);
            *(_QWORD *)(v511 + 152) = *((_QWORD *)v512 + 19);
            *(_QWORD *)(v511 + 160) = *((_QWORD *)v512 + 20);
            *(_QWORD *)(v511 + 168) = *((_QWORD *)v512 + 21);
            *(_BYTE *)(v511 + 176) = *((_BYTE *)v512 + 176);
            *(_QWORD *)(v511 + 184) = *((_QWORD *)v512 + 23);
            v538 = *((_QWORD *)v512 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v539 = v2150;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v538)
            {
              *(_QWORD *)(v511 + 192) = v538;
              *(_QWORD *)(v511 + 200) = *((_QWORD *)v512 + 25);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v511 + 192) = v512[12];
            }
            v3 = a1;
            v515 = v2083;
            *(_QWORD *)(v511 + 208) = *((_QWORD *)v512 + 26);
            *(_QWORD *)(v511 + 216) = *((_QWORD *)v512 + 27);
            *(_QWORD *)(v511 + 224) = *((_QWORD *)v512 + 28);
            *(_QWORD *)(v511 + 232) = *((_QWORD *)v512 + 29);
            *(_QWORD *)(v511 + 240) = *((_QWORD *)v512 + 30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            v516 = *v512;
            v517 = v512[1];
            v518 = v512[3];
            *(_OWORD *)(v511 + 32) = v512[2];
            *(_OWORD *)(v511 + 48) = v518;
            *(_OWORD *)v511 = v516;
            *(_OWORD *)(v511 + 16) = v517;
            v519 = v512[4];
            v520 = v512[5];
            v521 = v512[7];
            *(_OWORD *)(v511 + 96) = v512[6];
            *(_OWORD *)(v511 + 112) = v521;
            *(_OWORD *)(v511 + 64) = v519;
            *(_OWORD *)(v511 + 80) = v520;
            v522 = v512[8];
            v523 = v512[9];
            v524 = v512[11];
            *(_OWORD *)(v511 + 160) = v512[10];
            *(_OWORD *)(v511 + 176) = v524;
            *(_OWORD *)(v511 + 128) = v522;
            *(_OWORD *)(v511 + 144) = v523;
            v525 = v512[12];
            v526 = v512[13];
            v527 = v512[14];
            *(_QWORD *)(v511 + 240) = *((_QWORD *)v512 + 30);
            *(_OWORD *)(v511 + 208) = v526;
            *(_OWORD *)(v511 + 224) = v527;
            *(_OWORD *)(v511 + 192) = v525;
          }
          v720 = (_OWORD *)((v511 + 255) & 0xFFFFFFFFFFFFFFF8);
          v721 = (__int128 *)(((unint64_t)v512 + 255) & 0xFFFFFFFFFFFFFFF8);
          v722 = *v721;
          *(_OWORD *)((char *)v720 + 9) = *(__int128 *)((char *)v721 + 9);
          *v720 = v722;
          v723 = (v511 + 287) & 0xFFFFFFFFFFFFFFF8;
          v724 = ((unint64_t)v512 + 287) & 0xFFFFFFFFFFFFFFF8;
          v725 = *(_OWORD *)v724;
          *(_BYTE *)(v723 + 16) = *(_BYTE *)(v724 + 16);
          *(_OWORD *)v723 = v725;
          v726 = (_QWORD *)((v511 + 311) & 0xFFFFFFFFFFFFF8);
          v727 = ((unint64_t)v512 + 311) & 0xFFFFFFFFFFFFF8;
          v728 = *(_QWORD *)v727;
          v727 += 15;
          *v726 = v728;
          v729 = (_QWORD *)(((unint64_t)v726 + 15) & 0xFFFFFFFFFFFFFFF8);
          v730 = *(_QWORD *)(v727 & 0xFFFFFFFFFFFFFFF8);
          v731 = *(_QWORD *)((v727 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_23AA7F2D4(v730, v731);
          *v729 = v730;
          v729[1] = v731;
          if (v1985 > 3)
            goto LABEL_892;
          v732 = ((1 << (8 * v1985)) + 5) >> (8 * v1985);
          if (v732 > 0xFFD8)
          {
            *v515 = 8;
          }
          else if (v732 <= 0xD8)
          {
LABEL_892:
            *(_BYTE *)v515 = 8;
          }
          else
          {
            *(_WORD *)v515 = 8;
          }
          return v3;
        case 9u:
          v383 = *((unsigned __int8 *)a2 + v2146);
          if (v383 >= 2)
          {
            if (v2146 <= 3)
              v384 = v2146;
            else
              v384 = 4;
            __asm { BR              X12 }
          }
          v750 = v383 == 1;
          if (v383 == 1)
            v751 = v88;
          else
            v751 = v2124;
          if (v383 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v751 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v750;
          if (v83 > 3)
            goto LABEL_951;
          v752 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v752 > 0xFFD8)
          {
            *v2083 = 9;
          }
          else if (v752 <= 0xD8)
          {
LABEL_951:
            *(_BYTE *)v2083 = 9;
          }
          else
          {
            *(_WORD *)v2083 = 9;
          }
          return v3;
        case 0xAu:
          v385 = *((unsigned __int8 *)a2 + v2146);
          if (v385 >= 2)
          {
            if (v2146 <= 3)
              v386 = v2146;
            else
              v386 = 4;
            __asm { BR              X12 }
          }
          v753 = v83;
          v754 = v385 == 1;
          if (v385 == 1)
            v755 = v88;
          else
            v755 = v2124;
          v756 = v87;
          if (v385 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v755 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v754;
          v757 = ((unint64_t)a1 + v2074) & v2081;
          v758 = ((unint64_t)a2 + v2074) & v2081;
          v759 = *(unsigned __int8 *)(v758 + v2146);
          if (v759 > 1)
          {
            v760 = v2145;
            memcpy((void *)(((unint64_t)a1 + v2074) & v2081), (const void *)(((unint64_t)a2 + v2074) & v2081), v2145);
          }
          else
          {
            if (v759 == 1)
            {
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v88 + 16))(((unint64_t)a1 + v2074) & v2081, ((unint64_t)a2 + v2074) & v2081, v92);
              *(_BYTE *)(v757 + v2146) = 1;
            }
            else
            {
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v2124 + 16))(((unint64_t)a1 + v2074) & v2081, ((unint64_t)a2 + v2074) & v2081, v756);
              *(_BYTE *)(v757 + v2146) = 0;
            }
            v760 = v2145;
          }
          v761 = (_BYTE *)(v757 + v760);
          *v761 = *(_BYTE *)(v758 + v760);
          v761[1] = *(_BYTE *)(v758 + v760 + 1);
          if (v753 > 3)
            goto LABEL_968;
          v762 = ((1 << (8 * v753)) + 5) >> (8 * v753);
          if (v762 > 0xFFD8)
          {
            *v2083 = 10;
          }
          else if (v762 <= 0xD8)
          {
LABEL_968:
            *(_BYTE *)v2083 = 10;
          }
          else
          {
            *(_WORD *)v2083 = 10;
          }
          return v3;
        case 0xBu:
          v387 = *((unsigned __int8 *)a2 + v2146);
          if (v387 >= 2)
          {
            if (v2146 <= 3)
              v388 = v2146;
            else
              v388 = 4;
            __asm { BR              X12 }
          }
          v763 = v83;
          v764 = v387 == 1;
          if (v387 == 1)
            v765 = v88;
          else
            v765 = v2124;
          v766 = v87;
          if (v387 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v765 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v764;
          v767 = ((unint64_t)a1 + v2074) & v2081;
          v768 = ((unint64_t)a2 + v2074) & v2081;
          v769 = *(unsigned __int8 *)(v768 + v2146);
          if (v769 > 1)
          {
            v770 = v2145;
            memcpy((void *)(((unint64_t)a1 + v2074) & v2081), (const void *)(((unint64_t)a2 + v2074) & v2081), v2145);
          }
          else
          {
            if (v769 == 1)
            {
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v88 + 16))(((unint64_t)a1 + v2074) & v2081, ((unint64_t)a2 + v2074) & v2081, v92);
              *(_BYTE *)(v767 + v2146) = 1;
            }
            else
            {
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v2124 + 16))(((unint64_t)a1 + v2074) & v2081, ((unint64_t)a2 + v2074) & v2081, v766);
              *(_BYTE *)(v767 + v2146) = 0;
            }
            v770 = v2145;
          }
          v771 = (_BYTE *)(v767 + v770);
          *v771 = *(_BYTE *)(v768 + v770);
          v771[1] = *(_BYTE *)(v768 + v770 + 1);
          if (v763 > 3)
            goto LABEL_985;
          v772 = ((1 << (8 * v763)) + 5) >> (8 * v763);
          if (v772 > 0xFFD8)
          {
            *v2083 = 11;
          }
          else if (v772 <= 0xD8)
          {
LABEL_985:
            *(_BYTE *)v2083 = 11;
          }
          else
          {
            *(_WORD *)v2083 = 11;
          }
          return v3;
        case 0xCu:
          v389 = *((unsigned __int8 *)a2 + v2146);
          if (v389 >= 2)
          {
            if (v2146 <= 3)
              v390 = v2146;
            else
              v390 = 4;
            __asm { BR              X12 }
          }
          v773 = v389 == 1;
          if (v389 == 1)
            v774 = v88;
          else
            v774 = v2124;
          if (v389 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v774 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v773;
          *((_BYTE *)a1 + v2145) = *((_BYTE *)a2 + v2145);
          v775 = *(void **)(((unint64_t)a2 + v2112 + 7) & 0xFFFFFFFFFFFFF8);
          v776 = v775;
          *(_QWORD *)(((unint64_t)a1 + v2112 + 7) & 0xFFFFFFFFFFFFF8) = v775;
          if (v83 > 3)
            goto LABEL_996;
          v777 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v777 > 0xFFD8)
          {
            *v2083 = 12;
          }
          else if (v777 <= 0xD8)
          {
LABEL_996:
            *(_BYTE *)v2083 = 12;
          }
          else
          {
            *(_WORD *)v2083 = 12;
          }
          return v3;
        case 0xDu:
          v391 = *((unsigned __int8 *)a2 + v2146);
          if (v391 >= 2)
          {
            if (v2146 <= 3)
              v392 = v2146;
            else
              v392 = 4;
            __asm { BR              X12 }
          }
          v778 = v391 == 1;
          if (v391 == 1)
            v779 = v88;
          else
            v779 = v2124;
          if (v391 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v779 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v778;
          *((_BYTE *)a1 + v2145) = *((_BYTE *)a2 + v2145);
          if (v83 > 3)
            goto LABEL_1007;
          v780 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v780 > 0xFFD8)
          {
            *v2083 = 13;
          }
          else if (v780 <= 0xD8)
          {
LABEL_1007:
            *(_BYTE *)v2083 = 13;
          }
          else
          {
            *(_WORD *)v2083 = 13;
          }
          return v3;
        case 0xEu:
          v393 = *((unsigned __int8 *)a2 + v2146);
          if (v393 >= 2)
          {
            if (v2146 <= 3)
              v394 = v2146;
            else
              v394 = 4;
            __asm { BR              X12 }
          }
          v781 = v393 == 1;
          if (v393 == 1)
            v782 = v88;
          else
            v782 = v2124;
          if (v393 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v782 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v781;
          v783 = *(void **)(((unint64_t)a2 + v2145 + 7) & 0xFFFFFFFFFFFFF8);
          v784 = v783;
          *(_QWORD *)(((unint64_t)a1 + v2145 + 7) & 0xFFFFFFFFFFFFF8) = v783;
          if (v83 > 3)
            goto LABEL_1018;
          v785 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v785 > 0xFFD8)
          {
            *v2083 = 14;
          }
          else if (v785 <= 0xD8)
          {
LABEL_1018:
            *(_BYTE *)v2083 = 14;
          }
          else
          {
            *(_WORD *)v2083 = 14;
          }
          return v3;
        case 0xFu:
          v395 = *((unsigned __int8 *)a2 + v2146);
          if (v395 >= 2)
          {
            if (v2146 <= 3)
              v396 = v2146;
            else
              v396 = 4;
            __asm { BR              X12 }
          }
          v786 = v395 == 1;
          if (v395 == 1)
            v787 = v88;
          else
            v787 = v2124;
          if (v395 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v787 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v786;
          v788 = *(void **)(((unint64_t)a2 + v2145 + 7) & 0xFFFFFFFFFFFFF8);
          v789 = v788;
          *(_QWORD *)(((unint64_t)a1 + v2145 + 7) & 0xFFFFFFFFFFFFF8) = v788;
          if (v83 > 3)
            goto LABEL_1029;
          v790 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v790 > 0xFFD8)
          {
            *v2083 = 15;
          }
          else if (v790 <= 0xD8)
          {
LABEL_1029:
            *(_BYTE *)v2083 = 15;
          }
          else
          {
            *(_WORD *)v2083 = 15;
          }
          return v3;
        case 0x10u:
          *a1 = *a2;
          v397 = a2 + 1;
          v398 = a2[2];
          if (v398 >> 60 == 15)
          {
            *(_OWORD *)(a1 + 1) = *(_OWORD *)v397;
          }
          else
          {
            v439 = v83;
            v83 = *v397;
            sub_23AAAE668(*v397, v398);
            a1[1] = v83;
            a1[2] = v398;
            LODWORD(v83) = v439;
          }
          v440 = *(_OWORD *)(a2 + 3);
          *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
          *(_OWORD *)(a1 + 3) = v440;
          a1[6] = a2[6];
          if (v83 > 3)
            goto LABEL_750;
          v446 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v446 > 0xFFD8)
          {
            *v2083 = 16;
          }
          else if (v446 <= 0xD8)
          {
LABEL_750:
            *(_BYTE *)v2083 = 16;
          }
          else
          {
            *(_WORD *)v2083 = 16;
          }
          return v3;
        case 0x11u:
          v399 = *((unsigned __int8 *)a2 + v2146);
          if (v399 >= 2)
          {
            if (v2146 <= 3)
              v400 = v2146;
            else
              v400 = 4;
            __asm { BR              X12 }
          }
          v791 = v399 == 1;
          if (v399 == 1)
            v792 = v88;
          else
            v792 = v2124;
          if (v399 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v792 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v791;
          if (v83 > 3)
            goto LABEL_1040;
          v793 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v793 > 0xFFD8)
          {
            *v2083 = 17;
          }
          else if (v793 <= 0xD8)
          {
LABEL_1040:
            *(_BYTE *)v2083 = 17;
          }
          else
          {
            *(_WORD *)v2083 = 17;
          }
          return v3;
        case 0x12u:
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v2124 + 16))(a1, a2, v87);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v88 + 16))(((unint64_t)a1 + v2042) & v2082, ((unint64_t)a2 + v2042) & v2082, v92);
          if (v83 > 3)
            goto LABEL_642;
          v441 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v441 > 0xFFD8)
          {
            *v2083 = 18;
          }
          else if (v441 <= 0xD8)
          {
LABEL_642:
            *(_BYTE *)v2083 = 18;
          }
          else
          {
            *(_WORD *)v2083 = 18;
          }
          return v3;
        case 0x13u:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v401 = *(unsigned __int8 *)((((unint64_t)a2 + v2133 + 1) & v2081) + v2146);
          if (v401 >= 2)
          {
            if (v2146 <= 3)
              v402 = v2146;
            else
              v402 = 4;
            __asm { BR              X12 }
          }
          v794 = v401 == 1;
          if (v401 == 1)
            v795 = v88;
          else
            v795 = v2124;
          (*(void (**)(unint64_t))(v795 + 16))(((unint64_t)a1 + v2133 + 1) & v2081);
          *(_BYTE *)((((unint64_t)a1 + v2133 + 1) & v2081) + v2146) = v794;
          if (v83 > 3)
            goto LABEL_1049;
          v796 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v796 > 0xFFD8)
          {
            *v2083 = 19;
          }
          else if (v796 <= 0xD8)
          {
LABEL_1049:
            *(_BYTE *)v2083 = 19;
          }
          else
          {
            *(_WORD *)v2083 = 19;
          }
          return v3;
        case 0x14u:
          *a1 = *a2;
          swift_retain();
          if (v83 > 3)
            goto LABEL_649;
          v442 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v442 > 0xFFD8)
          {
            *v2083 = 20;
          }
          else if (v442 <= 0xD8)
          {
LABEL_649:
            *(_BYTE *)v2083 = 20;
          }
          else
          {
            *(_WORD *)v2083 = 20;
          }
          return v3;
        case 0x15u:
          *a1 = *a2;
          swift_retain();
          if (v83 > 3)
            goto LABEL_651;
          v443 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v443 > 0xFFD8)
          {
            *v2083 = 21;
          }
          else if (v443 <= 0xD8)
          {
LABEL_651:
            *(_BYTE *)v2083 = 21;
          }
          else
          {
            *(_WORD *)v2083 = 21;
          }
          return v3;
        case 0x16u:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          if (v83 > 3)
            goto LABEL_653;
          v444 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v444 > 0xFFD8)
          {
            *v2083 = 22;
          }
          else if (v444 <= 0xD8)
          {
LABEL_653:
            *(_BYTE *)v2083 = 22;
          }
          else
          {
            *(_WORD *)v2083 = 22;
          }
          return v3;
        case 0x17u:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          if (v83 > 3)
            goto LABEL_655;
          v445 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v445 > 0xFFD8)
          {
            *v2083 = 23;
          }
          else if (v445 <= 0xD8)
          {
LABEL_655:
            *(_BYTE *)v2083 = 23;
          }
          else
          {
            *(_WORD *)v2083 = 23;
          }
          return v3;
        case 0x18u:
          v403 = *((unsigned __int8 *)a2 + v2146);
          if (v403 >= 2)
          {
            if (v2146 <= 3)
              v404 = v2146;
            else
              v404 = 4;
            __asm { BR              X12 }
          }
          v797 = v403 == 1;
          if (v403 == 1)
            v798 = v88;
          else
            v798 = v2124;
          if (v403 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v798 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v797;
          if (v83 > 3)
            goto LABEL_1060;
          v799 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v799 > 0xFFD8)
          {
            *v2083 = 24;
          }
          else if (v799 <= 0xD8)
          {
LABEL_1060:
            *(_BYTE *)v2083 = 24;
          }
          else
          {
            *(_WORD *)v2083 = 24;
          }
          return v3;
        case 0x19u:
          v405 = *((unsigned __int8 *)a2 + v2146);
          if (v405 >= 2)
          {
            if (v2146 <= 3)
              v406 = v2146;
            else
              v406 = 4;
            __asm { BR              X12 }
          }
          v800 = v405 == 1;
          if (v405 == 1)
            v801 = v88;
          else
            v801 = v2124;
          if (v405 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v801 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v800;
          if (v83 > 3)
            goto LABEL_1071;
          v802 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v802 > 0xFFD8)
          {
            *v2083 = 25;
          }
          else if (v802 <= 0xD8)
          {
LABEL_1071:
            *(_BYTE *)v2083 = 25;
          }
          else
          {
            *(_WORD *)v2083 = 25;
          }
          return v3;
        case 0x1Au:
          v407 = *((unsigned __int8 *)a2 + v2146);
          if (v407 >= 2)
          {
            if (v2146 <= 3)
              v408 = v2146;
            else
              v408 = 4;
            __asm { BR              X12 }
          }
          v803 = v407 == 1;
          if (v407 == 1)
            v804 = v88;
          else
            v804 = v2124;
          if (v407 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v804 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v803;
          if (v83 > 3)
            goto LABEL_1082;
          v805 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v805 > 0xFFD8)
          {
            *v2083 = 26;
          }
          else if (v805 <= 0xD8)
          {
LABEL_1082:
            *(_BYTE *)v2083 = 26;
          }
          else
          {
            *(_WORD *)v2083 = 26;
          }
          return v3;
        case 0x1Bu:
          v409 = v82;
          v410 = *((unsigned __int8 *)a2 + v82);
          if (v410 >= 2)
          {
            if (v82 <= 3)
              v411 = v82;
            else
              v411 = 4;
            __asm { BR              X12 }
          }
          if (v410 == 1)
          {
            switch(*((_BYTE *)a2 + v2028))
            {
              case 0:
                v2088 = v2085 + 7;
                v1171 = v90;
                v1172 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v88 + 16);
                v1172(a1, a2, v92);
                v1173 = (_QWORD *)(((unint64_t)a1 + v2013) & v2036);
                v1174 = (_QWORD *)(((unint64_t)a2 + v2013) & v2036);
                if (v2044 == v2047)
                {
                  v1175 = (*(uint64_t (**)(_QWORD *))(v88 + 48))(v1174);
                  goto LABEL_1445;
                }
                v1239 = ((unint64_t)v1174 + v2066) & v2082;
                v1240 = (v2037 + v1239) & v2084;
                if (v2046 == v2047)
                {
                  if (v2040 == v2046)
                  {
                    v1175 = (*(uint64_t (**)(unint64_t))(v2062 + 48))((v2037 + v1239) & v2084);
                    goto LABEL_1445;
                  }
                  v1468 = (unint64_t *)((v2065 + v1240) & 0xFFFFFFFFFFFFFFF8);
                  if (v2027 <= 0x7FFFFFFE)
                  {
                    v1469 = *v1468;
                    goto LABEL_2005;
                  }
                  v1175 = (*(uint64_t (**)(unint64_t))(v2057 + 48))(((unint64_t)v1468 + v2056) & v2052);
                }
                else
                {
                  v1274 = v1240 + v2069;
                  if ((v2023 & 0x80000000) == 0)
                  {
                    v1275 = *(_QWORD *)(v1274 + 8);
                    if (v1275 >= 0xFFFFFFFF)
                      LODWORD(v1275) = -1;
                    if ((_DWORD)v1275 != -1)
                      goto LABEL_1446;
LABEL_1614:
                    v1239 = ((unint64_t)v1174 + v2066) & v2082;
                    v1240 = (v2037 + v1239) & v2084;
LABEL_1615:
                    v1988 = v83;
                    v1172(v1173, v1174, v92);
                    v1172((_QWORD *)(((unint64_t)v1173 + v2066) & v2082), (_QWORD *)v1239, v92);
                    v1276 = (v2037 + (((unint64_t)v1173 + v2066) & v2082)) & v2084;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v2062 + 16))(v1276, v1240, v2063);
                    v1277 = (_QWORD *)((v2065 + v1276) & 0xFFFFFFFFFFFFFFF8);
                    v1278 = (_QWORD *)((v2065 + v1240) & 0xFFFFFFFFFFFFFFF8);
                    *v1277 = *v1278;
                    v1279 = ((unint64_t)v1277 + v2056) & v2052;
                    v1280 = ((unint64_t)v1278 + v2056) & v2052;
                    v1281 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2057 + 16);
                    swift_bridgeObjectRetain();
                    v1281(v1279, v1280, v2058);
                    v1282 = (_QWORD *)((v2050 + v1279) & 0xFFFFFFFFFFFFF8);
                    v1283 = (_QWORD *)((v2050 + v1280) & 0xFFFFFFFFFFFFF8);
                    *v1282 = *v1283;
                    v1284 = (_QWORD *)(((unint64_t)v1282 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v1285 = (_QWORD *)(((unint64_t)v1283 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *v1284 = *v1285;
                    v1284[1] = v1285[1];
                    v1286 = (_QWORD *)(v1276 + v2069);
                    *v1286 = *(_QWORD *)(v1240 + v2069);
                    v1286[1] = *(_QWORD *)(v1240 + v2069 + 8);
                    v1287 = (v2120 + v1276 + v2069) & v2076;
                    v1288 = (v2120 + v1240 + v2069) & v2076;
                    *(_BYTE *)v1287 = *(_BYTE *)v1288;
                    v1289 = v1287 | 4;
                    v1290 = *(_DWORD *)(v1288 | 4);
                    *(_BYTE *)(v1289 + 4) = *(_BYTE *)((v1288 | 4) + 4);
                    *(_DWORD *)v1289 = v1290;
                    *(_WORD *)(v1287 + 10) = *(_WORD *)(v1288 + 0xA);
                    v1291 = (v2077 + v1287) & v1171;
                    v1292 = (v2077 + v1288) & v1171;
                    v1293 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2080 + 16);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    v1293(v1291, v1292, v2079);
                    v1294 = (v2073 + v1291) & v1171;
                    v1295 = (v2073 + v1292) & v1171;
                    v1293(v1294, v1295, v2079);
                    v1296 = (_BYTE *)(v1294 + v2075);
                    *v1296 = *(_BYTE *)(v1295 + v2075);
                    v1296[1] = *(_BYTE *)(v1295 + v2075 + 1);
                    v1296[2] = *(_BYTE *)(v1295 + v2075 + 2);
                    v1296[3] = *(_BYTE *)(v1295 + v2075 + 3);
                    v1296[4] = *(_BYTE *)(v1295 + v2075 + 4);
                    v1297 = (v1294 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
                    v1298 = (v1295 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v1297 = *(_QWORD *)v1298;
                    *(_QWORD *)(v1297 + 8) = *(_QWORD *)(v1298 + 8);
                    *(_BYTE *)(v1297 + 16) = *(_BYTE *)(v1298 + 16);
                    *(_BYTE *)(v1297 + 17) = *(_BYTE *)(v1298 + 17);
                    *(_BYTE *)(v1297 + 18) = *(_BYTE *)(v1298 + 18);
                    *(_BYTE *)(v1297 + 19) = *(_BYTE *)(v1298 + 19);
                    v1299 = (v1297 + 27) & 0xFFFFFFFFFFFFFFF8;
                    v1300 = (v1298 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v1299 = *(_QWORD *)v1300;
                    *(_BYTE *)(v1299 + 8) = *(_BYTE *)(v1300 + 8);
                    *(_BYTE *)(v1299 + 9) = *(_BYTE *)(v1300 + 9);
                    *(_BYTE *)(v1299 + 10) = *(_BYTE *)(v1300 + 10);
                    *(_BYTE *)(v1299 + 11) = *(_BYTE *)(v1300 + 11);
                    *(_BYTE *)(v1299 + 12) = *(_BYTE *)(v1300 + 12);
                    v1301 = (_QWORD *)((v1297 + 47) & 0xFFFFFFFFFFFFF8);
                    v1302 = (_QWORD *)((v1298 + 47) & 0xFFFFFFFFFFFFF8);
                    *v1301 = *v1302;
                    v1303 = ((unint64_t)v1301 + 15) & 0xFFFFFFFFFFFFFFF8;
                    v1304 = ((unint64_t)v1302 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v1303 = *(_QWORD *)v1304;
                    *(_BYTE *)(v1303 + 8) = *(_BYTE *)(v1304 + 8);
                    *(_BYTE *)(v1303 + 9) = *(_BYTE *)(v1304 + 9);
                    v1305 = (void *)((v2070 + v1303) & v1171);
                    v1306 = (const void *)((v2070 + v1304) & v1171);
                    v1307 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v2080 + 48);
                    swift_bridgeObjectRetain();
                    if (v1307(v1306, 1, v2079))
                    {
                      memcpy(v1305, v1306, v2123);
                    }
                    else
                    {
                      v1293((unint64_t)v1305, (unint64_t)v1306, v2079);
                      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v2080 + 56))(v1305, 0, 1, v2079);
                    }
                    v1374 = (_QWORD *)(((unint64_t)v1305 + v2071) & 0xFFFFFFFFFFFFFFF8);
                    v1375 = (_QWORD *)(((unint64_t)v1306 + v2071) & 0xFFFFFFFFFFFFFFF8);
                    *v1374 = *v1375;
                    v1376 = ((unint64_t)v1374 + 15) & 0xFFFFFFFFFFFFFFF8;
                    v1377 = ((unint64_t)v1375 + 15) & 0xFFFFFFFFFFFFFFF8;
                    v1378 = *(_QWORD *)v1377;
                    *(_BYTE *)(v1376 + 8) = *(_BYTE *)(v1377 + 8);
                    *(_QWORD *)v1376 = v1378;
                    v1379 = (_QWORD *)(((unint64_t)v1374 + 31) & 0xFFFFFFFFFFFFF8);
                    v1380 = (_QWORD *)(((unint64_t)v1375 + 31) & 0xFFFFFFFFFFFFF8);
                    *v1379 = *v1380;
                    v1381 = ((unint64_t)v1379 + 15) & 0xFFFFFFFFFFFFFFF8;
                    v1382 = (uint64_t *)(((unint64_t)v1380 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v1383 = v1382[1];
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    if ((v1383 & 0x3000000000000000) != 0)
                    {
                      *(_OWORD *)v1381 = *(_OWORD *)v1382;
                    }
                    else
                    {
                      v1394 = *v1382;
                      sub_23AAAE668(*v1382, v1383);
                      *(_QWORD *)v1381 = v1394;
                      *(_QWORD *)(v1381 + 8) = v1383;
                    }
                    v1395 = (v1381 + 19) & 0xFFFFFFFFFFFFFFF8;
                    v1396 = ((unint64_t)v1382 + 19) & 0xFFFFFFFFFFFFFFF8;
                    v1397 = *(_QWORD *)v1396;
                    *(_BYTE *)(v1395 + 8) = *(_BYTE *)(v1396 + 8);
                    *(_QWORD *)v1395 = v1397;
                    *(_BYTE *)(v1395 + 9) = *(_BYTE *)(v1396 + 9);
                    v1398 = (v1395 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    v1399 = (v1396 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    v1400 = *(_DWORD *)v1399;
                    *(_BYTE *)(v1398 + 4) = *(_BYTE *)(v1399 + 4);
                    *(_DWORD *)v1398 = v1400;
                    v1401 = (_QWORD *)((v1395 + 25) & 0xFFFFFFFFFFFFFFF8);
                    v1402 = (_QWORD *)((v1396 + 25) & 0xFFFFFFFFFFFFFFF8);
                    *v1401 = *v1402;
                    v1401[1] = v1402[1];
                    v1403 = v1287 + v2072;
                    v1404 = v1288 + v2072;
                    v1405 = *(_QWORD *)(v1288 + v2072 + 16);
                    if (v1405 >= 0xFFFFFFFF)
                      LODWORD(v1405) = -1;
                    v1406 = v1405 - 1;
                    swift_bridgeObjectRetain();
                    if (v1406 < 0)
                    {
                      *(_QWORD *)v1403 = *(_QWORD *)v1404;
                      *(_BYTE *)(v1403 + 8) = *(_BYTE *)(v1404 + 8);
                      *(_BYTE *)(v1403 + 9) = *(_BYTE *)(v1404 + 9);
                      v1444 = *(void **)(v1404 + 16);
                      v1445 = v1444;
                      *(_QWORD *)(v1403 + 16) = v1444;
                      v1446 = *(void **)(v1404 + 24);
                      v1447 = v1446;
                      *(_QWORD *)(v1403 + 24) = v1446;
                      *(_BYTE *)(v1403 + 32) = *(_BYTE *)(v1404 + 32);
                      *(_BYTE *)(v1403 + 33) = *(_BYTE *)(v1404 + 33);
                      *(_BYTE *)(v1403 + 34) = *(_BYTE *)(v1404 + 34);
                      *(_QWORD *)(v1403 + 40) = *(_QWORD *)(v1404 + 40);
                      *(_QWORD *)(v1403 + 48) = *(_QWORD *)(v1404 + 48);
                      *(_QWORD *)(v1403 + 56) = *(_QWORD *)(v1404 + 56);
                      *(_QWORD *)(v1403 + 64) = *(_QWORD *)(v1404 + 64);
                      *(_BYTE *)(v1403 + 72) = *(_BYTE *)(v1404 + 72);
                      *(_QWORD *)(v1403 + 80) = *(_QWORD *)(v1404 + 80);
                      *(_QWORD *)(v1403 + 88) = *(_QWORD *)(v1404 + 88);
                      v2139 = *(void **)(v1404 + 96);
                      *(_QWORD *)(v1403 + 96) = v2139;
                      *(_BYTE *)(v1403 + 104) = *(_BYTE *)(v1404 + 104);
                      *(_BYTE *)(v1403 + 105) = *(_BYTE *)(v1404 + 105);
                      *(_QWORD *)(v1403 + 112) = *(_QWORD *)(v1404 + 112);
                      *(_QWORD *)(v1403 + 120) = *(_QWORD *)(v1404 + 120);
                      *(_QWORD *)(v1403 + 128) = *(_QWORD *)(v1404 + 128);
                      *(_QWORD *)(v1403 + 136) = *(_QWORD *)(v1404 + 136);
                      *(_QWORD *)(v1403 + 144) = *(_QWORD *)(v1404 + 144);
                      *(_QWORD *)(v1403 + 152) = *(_QWORD *)(v1404 + 152);
                      *(_QWORD *)(v1403 + 160) = *(_QWORD *)(v1404 + 160);
                      *(_QWORD *)(v1403 + 168) = *(_QWORD *)(v1404 + 168);
                      *(_BYTE *)(v1403 + 176) = *(_BYTE *)(v1404 + 176);
                      *(_QWORD *)(v1403 + 184) = *(_QWORD *)(v1404 + 184);
                      v1448 = *(_QWORD *)(v1404 + 192);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      v1449 = v2139;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      if (v1448)
                      {
                        *(_QWORD *)(v1403 + 192) = v1448;
                        *(_QWORD *)(v1403 + 200) = *(_QWORD *)(v1404 + 200);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        *(_OWORD *)(v1403 + 192) = *(_OWORD *)(v1404 + 192);
                      }
                      v3 = a1;
                      v1178 = v2083;
                      v1177 = v2025;
                      *(_QWORD *)(v1403 + 208) = *(_QWORD *)(v1404 + 208);
                      *(_QWORD *)(v1403 + 216) = *(_QWORD *)(v1404 + 216);
                      *(_QWORD *)(v1403 + 224) = *(_QWORD *)(v1404 + 224);
                      *(_QWORD *)(v1403 + 232) = *(_QWORD *)(v1404 + 232);
                      *(_QWORD *)(v1403 + 240) = *(_QWORD *)(v1404 + 240);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      v1176 = v82;
                    }
                    else
                    {
                      v1407 = *(_OWORD *)v1404;
                      v1408 = *(_OWORD *)(v1404 + 16);
                      v1409 = *(_OWORD *)(v1404 + 48);
                      *(_OWORD *)(v1403 + 32) = *(_OWORD *)(v1404 + 32);
                      *(_OWORD *)(v1403 + 48) = v1409;
                      *(_OWORD *)v1403 = v1407;
                      *(_OWORD *)(v1403 + 16) = v1408;
                      v1410 = *(_OWORD *)(v1404 + 64);
                      v1411 = *(_OWORD *)(v1404 + 80);
                      v1412 = *(_OWORD *)(v1404 + 112);
                      *(_OWORD *)(v1403 + 96) = *(_OWORD *)(v1404 + 96);
                      *(_OWORD *)(v1403 + 112) = v1412;
                      *(_OWORD *)(v1403 + 64) = v1410;
                      *(_OWORD *)(v1403 + 80) = v1411;
                      v1413 = *(_OWORD *)(v1404 + 128);
                      v1414 = *(_OWORD *)(v1404 + 144);
                      v1415 = *(_OWORD *)(v1404 + 176);
                      *(_OWORD *)(v1403 + 160) = *(_OWORD *)(v1404 + 160);
                      *(_OWORD *)(v1403 + 176) = v1415;
                      *(_OWORD *)(v1403 + 128) = v1413;
                      *(_OWORD *)(v1403 + 144) = v1414;
                      v1416 = *(_OWORD *)(v1404 + 192);
                      v1417 = *(_OWORD *)(v1404 + 208);
                      v1418 = *(_OWORD *)(v1404 + 224);
                      *(_QWORD *)(v1403 + 240) = *(_QWORD *)(v1404 + 240);
                      *(_OWORD *)(v1403 + 208) = v1417;
                      *(_OWORD *)(v1403 + 224) = v1418;
                      *(_OWORD *)(v1403 + 192) = v1416;
                      v1178 = v2083;
                      v1176 = v82;
                      v1177 = v2025;
                    }
                    v1850 = (_OWORD *)((v1403 + 255) & 0xFFFFFFFFFFFFFFF8);
                    v1851 = (__int128 *)((v1404 + 255) & 0xFFFFFFFFFFFFFFF8);
                    v1852 = *v1851;
                    *(_OWORD *)((char *)v1850 + 9) = *(__int128 *)((char *)v1851 + 9);
                    *v1850 = v1852;
                    v1853 = (v1403 + 287) & 0xFFFFFFFFFFFFFFF8;
                    v1854 = (v1404 + 287) & 0xFFFFFFFFFFFFFFF8;
                    v1855 = *(_OWORD *)v1854;
                    *(_BYTE *)(v1853 + 16) = *(_BYTE *)(v1854 + 16);
                    *(_OWORD *)v1853 = v1855;
                    v1856 = (_QWORD *)((v1403 + 311) & 0xFFFFFFFFFFFFF8);
                    v1857 = (v1404 + 311) & 0xFFFFFFFFFFFFF8;
                    v1858 = *(_QWORD *)v1857;
                    v1857 += 15;
                    *v1856 = v1858;
                    v1859 = (_QWORD *)(((unint64_t)v1856 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v1860 = *(_QWORD *)(v1857 & 0xFFFFFFFFFFFFFFF8);
                    v83 = *(_QWORD *)((v1857 & 0xFFFFFFFFFFFFFFF8) + 8);
                    sub_23AA7F2D4(v1860, v83);
                    *v1859 = v1860;
                    v1859[1] = v83;
                    LODWORD(v83) = v1988;
                    v1179 = v2075;
                    v1174 = (_QWORD *)(((unint64_t)a2 + v2013) & v2036);
                    if (!v2059)
                      goto LABEL_1447;
LABEL_1913:
                    v1861 = ((((v1177
                              + ((((((((((v2088 + v1179) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 19) & 0xFFFFFFFFFFFFFFF8)
                                + 25) & 0xFFFFFFFFFFFFFFF8)
                              + 327) & 0xFFFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 16;
                    v1862 = (_QWORD *)(((((unint64_t)a1 + v2013) & v2036) + v1861) & 0xFFFFFFFFFFFFFFF8);
                    v1863 = (_QWORD *)(((unint64_t)v1174 + v1861) & 0xFFFFFFFFFFFFFFF8);
                    *v1862 = *v1863;
                    v1864 = *(void **)(((unint64_t)v1863 + 15) & 0xFFFFFFFFFFFFF8);
                    *(_QWORD *)(((unint64_t)v1862 + 15) & 0xFFFFFFFFFFFFF8) = v1864;
                    *((_BYTE *)v3 + v2028) = 0;
                    v1865 = v1864;
                    goto LABEL_1918;
                  }
                  v1486 = (v2077 + ((v2120 + v1274) & v2076)) & v1171;
                  if (v2059 <= 0x7FFFFFFD)
                  {
                    v1469 = *(_QWORD *)(((v2043 + ((v2073 + v1486) & v1171)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_2005:
                    if (v1469 >= 0xFFFFFFFF)
                      LODWORD(v1469) = -1;
                    if ((v1469 + 1) >= 2)
                      goto LABEL_1446;
                    goto LABEL_1615;
                  }
                  v1175 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v1486);
                }
LABEL_1445:
                if (v1175)
                {
LABEL_1446:
                  memcpy(v1173, v1174, __na);
                  v1176 = v82;
                  v1177 = v2025;
                  v1178 = v2083;
LABEL_1447:
                  v1179 = v2123;
                  goto LABEL_1913;
                }
                goto LABEL_1614;
              case 1:
                v2089 = v2085 + 7;
                v1999 = v90;
                v1180 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v88 + 16);
                v1180(a1, a2, v92);
                v1181 = (_QWORD *)(((unint64_t)a2 + v2013) & v2036);
                v1987 = v83;
                if (v2044 == v2047)
                {
                  v1182 = (*(uint64_t (**)(unint64_t))(v88 + 48))(((unint64_t)a2 + v2013) & v2036);
                  v1183 = (_QWORD *)(((unint64_t)a1 + v2013) & v2036);
LABEL_1842:
                  if (v1182)
                  {
LABEL_1843:
                    memcpy(v1183, v1181, __na);
                    v1551 = AssociatedTypeWitness;
                    v1552 = v2124;
LABEL_1844:
                    v1553 = v2123;
                    goto LABEL_1922;
                  }
                  v1241 = ((unint64_t)v1181 + v2066) & v2082;
                  v1242 = (v2037 + v1241) & v2084;
LABEL_1846:
                  v1983 = v409;
                  v1180(v1183, v1181, v92);
                  v1554 = ((unint64_t)v1183 + v2066) & v2082;
                  v1180((_QWORD *)v1554, (_QWORD *)v1241, v92);
                  v1555 = (v2037 + v1554) & v2084;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v2062 + 16))(v1555, v1242, v2063);
                  v1556 = (_QWORD *)((v2065 + v1555) & 0xFFFFFFFFFFFFFFF8);
                  v1557 = (_QWORD *)((v2065 + v1242) & 0xFFFFFFFFFFFFFFF8);
                  *v1556 = *v1557;
                  v1558 = ((unint64_t)v1556 + v2056) & v2052;
                  v1559 = ((unint64_t)v1557 + v2056) & v2052;
                  v1560 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2057 + 16);
                  swift_bridgeObjectRetain();
                  v1560(v1558, v1559, v2058);
                  v1561 = (_QWORD *)((v2050 + v1558) & 0xFFFFFFFFFFFFF8);
                  v1562 = (_QWORD *)((v2050 + v1559) & 0xFFFFFFFFFFFFF8);
                  *v1561 = *v1562;
                  v1563 = (_QWORD *)(((unint64_t)v1561 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v1564 = (_QWORD *)(((unint64_t)v1562 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v1563 = *v1564;
                  v1563[1] = v1564[1];
                  v1565 = (_QWORD *)(v1555 + v2069);
                  *v1565 = *(_QWORD *)(v1242 + v2069);
                  v1565[1] = *(_QWORD *)(v1242 + v2069 + 8);
                  v1566 = (v2120 + v1555 + v2069) & v2076;
                  v1567 = (v2120 + v1242 + v2069) & v2076;
                  *(_BYTE *)v1566 = *(_BYTE *)v1567;
                  v1568 = v1566 | 4;
                  v1569 = *(_DWORD *)(v1567 | 4);
                  *(_BYTE *)(v1568 + 4) = *(_BYTE *)((v1567 | 4) + 4);
                  *(_DWORD *)v1568 = v1569;
                  *(_WORD *)(v1566 + 10) = *(_WORD *)(v1567 + 0xA);
                  v1570 = (v2077 + v1566) & v1999;
                  v1571 = (v2077 + v1567) & v1999;
                  v1572 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2080 + 16);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v1572(v1570, v1571, v2079);
                  v1573 = (v2073 + v1571) & v1999;
                  v1572((v2073 + v1570) & v1999, v1573, v2079);
                  v1574 = (_BYTE *)(((v2073 + v1570) & v1999) + v2075);
                  *v1574 = *(_BYTE *)(v1573 + v2075);
                  v1574[1] = *(_BYTE *)(v1573 + v2075 + 1);
                  v1574[2] = *(_BYTE *)(v1573 + v2075 + 2);
                  v1574[3] = *(_BYTE *)(v1573 + v2075 + 3);
                  v1574[4] = *(_BYTE *)(v1573 + v2075 + 4);
                  v1575 = (unint64_t)(v1574 + 12) & 0xFFFFFFFFFFFFFFF8;
                  v1576 = (v1573 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v1575 = *(_QWORD *)v1576;
                  *(_QWORD *)(v1575 + 8) = *(_QWORD *)(v1576 + 8);
                  *(_BYTE *)(v1575 + 16) = *(_BYTE *)(v1576 + 16);
                  *(_BYTE *)(v1575 + 17) = *(_BYTE *)(v1576 + 17);
                  *(_BYTE *)(v1575 + 18) = *(_BYTE *)(v1576 + 18);
                  *(_BYTE *)(v1575 + 19) = *(_BYTE *)(v1576 + 19);
                  v1577 = (v1575 + 27) & 0xFFFFFFFFFFFFFFF8;
                  v1578 = (v1576 + 27) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v1577 = *(_QWORD *)v1578;
                  *(_BYTE *)(v1577 + 8) = *(_BYTE *)(v1578 + 8);
                  *(_BYTE *)(v1577 + 9) = *(_BYTE *)(v1578 + 9);
                  *(_BYTE *)(v1577 + 10) = *(_BYTE *)(v1578 + 10);
                  *(_BYTE *)(v1577 + 11) = *(_BYTE *)(v1578 + 11);
                  *(_BYTE *)(v1577 + 12) = *(_BYTE *)(v1578 + 12);
                  v1579 = (_QWORD *)((v1575 + 47) & 0xFFFFFFFFFFFFF8);
                  v1580 = (_QWORD *)((v1576 + 47) & 0xFFFFFFFFFFFFF8);
                  *v1579 = *v1580;
                  v1581 = ((unint64_t)v1579 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1582 = ((unint64_t)v1580 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v1581 = *(_QWORD *)v1582;
                  *(_BYTE *)(v1581 + 8) = *(_BYTE *)(v1582 + 8);
                  *(_BYTE *)(v1581 + 9) = *(_BYTE *)(v1582 + 9);
                  v1583 = (void *)((v2070 + v1581) & v1999);
                  v1584 = (const void *)((v2070 + v1582) & v1999);
                  v1585 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v2080 + 48);
                  swift_bridgeObjectRetain();
                  if (v1585(v1584, 1, v2079))
                  {
                    memcpy(v1583, v1584, v2123);
                  }
                  else
                  {
                    v1572((unint64_t)v1583, (unint64_t)v1584, v2079);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v2080 + 56))(v1583, 0, 1, v2079);
                  }
                  v1586 = (_QWORD *)(((unint64_t)v1583 + v2071) & 0xFFFFFFFFFFFFFFF8);
                  v1587 = (_QWORD *)(((unint64_t)v1584 + v2071) & 0xFFFFFFFFFFFFFFF8);
                  *v1586 = *v1587;
                  v1588 = ((unint64_t)v1586 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1589 = ((unint64_t)v1587 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1590 = *(_QWORD *)v1589;
                  *(_BYTE *)(v1588 + 8) = *(_BYTE *)(v1589 + 8);
                  *(_QWORD *)v1588 = v1590;
                  v1591 = (_QWORD *)(((unint64_t)v1586 + 31) & 0xFFFFFFFFFFFFF8);
                  v1592 = (_QWORD *)(((unint64_t)v1587 + 31) & 0xFFFFFFFFFFFFF8);
                  *v1591 = *v1592;
                  v1593 = ((unint64_t)v1591 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1594 = (uint64_t *)(((unint64_t)v1592 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v1595 = v1594[1];
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v1552 = v2124;
                  if ((v1595 & 0x3000000000000000) != 0)
                  {
                    *(_OWORD *)v1593 = *(_OWORD *)v1594;
                  }
                  else
                  {
                    v1596 = *v1594;
                    sub_23AAAE668(*v1594, v1595);
                    *(_QWORD *)v1593 = v1596;
                    *(_QWORD *)(v1593 + 8) = v1595;
                  }
                  v1597 = (v1593 + 19) & 0xFFFFFFFFFFFFFFF8;
                  v1598 = ((unint64_t)v1594 + 19) & 0xFFFFFFFFFFFFFFF8;
                  v1599 = *(_QWORD *)v1598;
                  *(_BYTE *)(v1597 + 8) = *(_BYTE *)(v1598 + 8);
                  *(_QWORD *)v1597 = v1599;
                  *(_BYTE *)(v1597 + 9) = *(_BYTE *)(v1598 + 9);
                  v1600 = (v1597 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  v1601 = (v1598 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  v1602 = *(_DWORD *)v1601;
                  *(_BYTE *)(v1600 + 4) = *(_BYTE *)(v1601 + 4);
                  *(_DWORD *)v1600 = v1602;
                  v1603 = (_QWORD *)((v1597 + 25) & 0xFFFFFFFFFFFFFFF8);
                  v1604 = (_QWORD *)((v1598 + 25) & 0xFFFFFFFFFFFFFFF8);
                  *v1603 = *v1604;
                  v1603[1] = v1604[1];
                  v1605 = v1566 + v2072;
                  v1606 = v1567 + v2072;
                  v1607 = *(_QWORD *)(v1567 + v2072 + 16);
                  if (v1607 >= 0xFFFFFFFF)
                    LODWORD(v1607) = -1;
                  v1608 = v1607 - 1;
                  swift_bridgeObjectRetain();
                  if (v1608 < 0)
                  {
                    *(_QWORD *)v1605 = *(_QWORD *)v1606;
                    *(_BYTE *)(v1605 + 8) = *(_BYTE *)(v1606 + 8);
                    *(_BYTE *)(v1605 + 9) = *(_BYTE *)(v1606 + 9);
                    v1621 = *(void **)(v1606 + 16);
                    v1622 = v1621;
                    *(_QWORD *)(v1605 + 16) = v1621;
                    v1623 = *(void **)(v1606 + 24);
                    v1624 = v1623;
                    *(_QWORD *)(v1605 + 24) = v1623;
                    *(_BYTE *)(v1605 + 32) = *(_BYTE *)(v1606 + 32);
                    *(_BYTE *)(v1605 + 33) = *(_BYTE *)(v1606 + 33);
                    *(_BYTE *)(v1605 + 34) = *(_BYTE *)(v1606 + 34);
                    *(_QWORD *)(v1605 + 40) = *(_QWORD *)(v1606 + 40);
                    *(_QWORD *)(v1605 + 48) = *(_QWORD *)(v1606 + 48);
                    *(_QWORD *)(v1605 + 56) = *(_QWORD *)(v1606 + 56);
                    *(_QWORD *)(v1605 + 64) = *(_QWORD *)(v1606 + 64);
                    *(_BYTE *)(v1605 + 72) = *(_BYTE *)(v1606 + 72);
                    *(_QWORD *)(v1605 + 80) = *(_QWORD *)(v1606 + 80);
                    *(_QWORD *)(v1605 + 88) = *(_QWORD *)(v1606 + 88);
                    v2141 = *(void **)(v1606 + 96);
                    *(_QWORD *)(v1605 + 96) = v2141;
                    *(_BYTE *)(v1605 + 104) = *(_BYTE *)(v1606 + 104);
                    *(_BYTE *)(v1605 + 105) = *(_BYTE *)(v1606 + 105);
                    *(_QWORD *)(v1605 + 112) = *(_QWORD *)(v1606 + 112);
                    *(_QWORD *)(v1605 + 120) = *(_QWORD *)(v1606 + 120);
                    *(_QWORD *)(v1605 + 128) = *(_QWORD *)(v1606 + 128);
                    *(_QWORD *)(v1605 + 136) = *(_QWORD *)(v1606 + 136);
                    *(_QWORD *)(v1605 + 144) = *(_QWORD *)(v1606 + 144);
                    *(_QWORD *)(v1605 + 152) = *(_QWORD *)(v1606 + 152);
                    *(_QWORD *)(v1605 + 160) = *(_QWORD *)(v1606 + 160);
                    *(_QWORD *)(v1605 + 168) = *(_QWORD *)(v1606 + 168);
                    *(_BYTE *)(v1605 + 176) = *(_BYTE *)(v1606 + 176);
                    *(_QWORD *)(v1605 + 184) = *(_QWORD *)(v1606 + 184);
                    v1625 = *(_QWORD *)(v1606 + 192);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    v1626 = v2141;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    if (v1625)
                    {
                      *(_QWORD *)(v1605 + 192) = v1625;
                      *(_QWORD *)(v1605 + 200) = *(_QWORD *)(v1606 + 200);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                    }
                    else
                    {
                      *(_OWORD *)(v1605 + 192) = *(_OWORD *)(v1606 + 192);
                    }
                    v3 = a1;
                    v409 = v1983;
                    v1551 = AssociatedTypeWitness;
                    v1552 = v2124;
                    v1181 = (_QWORD *)(((unint64_t)a2 + v2013) & v2036);
                    *(_QWORD *)(v1605 + 208) = *(_QWORD *)(v1606 + 208);
                    *(_QWORD *)(v1605 + 216) = *(_QWORD *)(v1606 + 216);
                    *(_QWORD *)(v1605 + 224) = *(_QWORD *)(v1606 + 224);
                    *(_QWORD *)(v1605 + 232) = *(_QWORD *)(v1606 + 232);
                    *(_QWORD *)(v1605 + 240) = *(_QWORD *)(v1606 + 240);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    v1609 = *(_OWORD *)v1606;
                    v1610 = *(_OWORD *)(v1606 + 16);
                    v1611 = *(_OWORD *)(v1606 + 48);
                    *(_OWORD *)(v1605 + 32) = *(_OWORD *)(v1606 + 32);
                    *(_OWORD *)(v1605 + 48) = v1611;
                    *(_OWORD *)v1605 = v1609;
                    *(_OWORD *)(v1605 + 16) = v1610;
                    v1612 = *(_OWORD *)(v1606 + 64);
                    v1613 = *(_OWORD *)(v1606 + 80);
                    v1614 = *(_OWORD *)(v1606 + 112);
                    *(_OWORD *)(v1605 + 96) = *(_OWORD *)(v1606 + 96);
                    *(_OWORD *)(v1605 + 112) = v1614;
                    *(_OWORD *)(v1605 + 64) = v1612;
                    *(_OWORD *)(v1605 + 80) = v1613;
                    v1615 = *(_OWORD *)(v1606 + 128);
                    v1616 = *(_OWORD *)(v1606 + 144);
                    v1617 = *(_OWORD *)(v1606 + 176);
                    *(_OWORD *)(v1605 + 160) = *(_OWORD *)(v1606 + 160);
                    *(_OWORD *)(v1605 + 176) = v1617;
                    *(_OWORD *)(v1605 + 128) = v1615;
                    *(_OWORD *)(v1605 + 144) = v1616;
                    v1618 = *(_OWORD *)(v1606 + 192);
                    v1619 = *(_OWORD *)(v1606 + 208);
                    v1620 = *(_OWORD *)(v1606 + 224);
                    *(_QWORD *)(v1605 + 240) = *(_QWORD *)(v1606 + 240);
                    *(_OWORD *)(v1605 + 208) = v1619;
                    *(_OWORD *)(v1605 + 224) = v1620;
                    *(_OWORD *)(v1605 + 192) = v1618;
                    v409 = v1983;
                    v1551 = AssociatedTypeWitness;
                  }
                  v1880 = (_OWORD *)((v1605 + 255) & 0xFFFFFFFFFFFFFFF8);
                  v1881 = (__int128 *)((v1606 + 255) & 0xFFFFFFFFFFFFFFF8);
                  v1882 = *v1881;
                  *(_OWORD *)((char *)v1880 + 9) = *(__int128 *)((char *)v1881 + 9);
                  *v1880 = v1882;
                  v1883 = (v1605 + 287) & 0xFFFFFFFFFFFFFFF8;
                  v1884 = (v1606 + 287) & 0xFFFFFFFFFFFFFFF8;
                  v1885 = *(_OWORD *)v1884;
                  *(_BYTE *)(v1883 + 16) = *(_BYTE *)(v1884 + 16);
                  *(_OWORD *)v1883 = v1885;
                  v1886 = (_QWORD *)((v1605 + 311) & 0xFFFFFFFFFFFFF8);
                  v1887 = (v1606 + 311) & 0xFFFFFFFFFFFFF8;
                  v1888 = *(_QWORD *)v1887;
                  v1887 += 15;
                  *v1886 = v1888;
                  v1889 = (_QWORD *)(((unint64_t)v1886 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v1890 = *(_QWORD *)(v1887 & 0xFFFFFFFFFFFFFFF8);
                  v1891 = *(_QWORD *)((v1887 & 0xFFFFFFFFFFFFFFF8) + 8);
                  sub_23AA7F2D4(v1890, v1891);
                  *v1889 = v1890;
                  v1889[1] = v1891;
                  v1553 = v2075;
                  v1183 = (_QWORD *)(((unint64_t)a1 + v2013) & v2036);
                  if (!v2059)
                    goto LABEL_1844;
LABEL_1922:
                  v1892 = ((((v2025
                            + ((((((((((v2089 + v1553) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 19) & 0xFFFFFFFFFFFFFFF8)
                              + 25) & 0xFFFFFFFFFFFFFFF8)
                            + 327) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 16;
                  v1893 = (void *)(((unint64_t)v1183 + v2125 + v1892) & v2068);
                  v1894 = (const void *)(((unint64_t)v1181 + v2125 + v1892) & v2068);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1552 + 48))(v1894, 1, v1551))
                  {
                    memcpy(v1893, v1894, v2035);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v1552 + 16))(v1893, v1894, v1551);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1552 + 56))(v1893, 0, 1, v1551);
                  }
                  v1178 = v2083;
                  v1895 = (char *)(((unint64_t)v1893 + v2011) & v2078);
                  v83 = ((unint64_t)v1894 + v2011) & v2078;
                  if (v2039 == v2045)
                  {
                    v1896 = (*(uint64_t (**)(unint64_t))(v2060 + 48))(v83);
                  }
                  else
                  {
                    v1897 = (uint64_t *)((v2064 + v83) & 0xFFFFFFFFFFFFFFF8);
                    if (v2026 <= 0x7FFFFFFE)
                    {
                      v1898 = *v1897;
                      if ((unint64_t)*v1897 >= 0xFFFFFFFF)
                        LODWORD(v1898) = -1;
                      if ((v1898 + 1) >= 2)
                        goto LABEL_1934;
                      goto LABEL_1936;
                    }
                    v1896 = (*(uint64_t (**)(unint64_t))(v2054 + 48))(((unint64_t)v1897 + v2053) & v2051);
                  }
                  if (v1896)
                  {
LABEL_1934:
                    v1899 = v2119;
                    memcpy(v1895, (const void *)v83, v2119);
LABEL_1937:
                    *(_QWORD *)&v1895[v1899] = *(_QWORD *)(v83 + v1899);
                    v1909 = (_QWORD *)((unint64_t)&v1895[v1899 + 15] & 0xFFFFFFFFFFFFF8);
                    v1910 = (_QWORD *)((v83 + v1899 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *v1909 = *v1910;
                    v1911 = *(void **)(((unint64_t)v1910 + 15) & 0xFFFFFFFFFFFFF8);
                    *(_QWORD *)(((unint64_t)v1909 + 15) & 0xFFFFFFFFFFFFF8) = v1911;
                    v1199 = 1;
                    *((_BYTE *)v3 + v2028) = 1;
                    v1912 = v1911;
                    LODWORD(v83) = v1987;
                    goto LABEL_1967;
                  }
                  v1897 = (uint64_t *)((v2064 + v83) & 0xFFFFFFFFFFFFFFF8);
LABEL_1936:
                  (*(void (**)(char *, unint64_t, uint64_t))(v2060 + 16))(v1895, v83, v2061);
                  v1900 = (_QWORD *)((unint64_t)&v1895[v2064] & 0xFFFFFFFFFFFFFFF8);
                  *v1900 = *v1897;
                  v1901 = ((unint64_t)v1900 + v2053) & v2051;
                  v1902 = v409;
                  v1903 = ((unint64_t)v1897 + v2053) & v2051;
                  v1904 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2054 + 16);
                  swift_bridgeObjectRetain();
                  v1904(v1901, v1903, v2055);
                  v1905 = (_QWORD *)((v2049 + v1901) & 0xFFFFFFFFFFFFF8);
                  v1906 = v2049 + v1903;
                  v409 = v1902;
                  v1906 &= 0xFFFFFFFFFFFFF8uLL;
                  *v1905 = *(_QWORD *)v1906;
                  v1907 = (_QWORD *)(((unint64_t)v1905 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v1908 = (_QWORD *)((v1906 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v1907 = *v1908;
                  v1907[1] = v1908[1];
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v1899 = v2119;
                  goto LABEL_1937;
                }
                v1241 = ((unint64_t)v1181 + v2066) & v2082;
                v1242 = (v2037 + v1241) & v2084;
                if (v2046 == v2047)
                {
                  v1183 = (_QWORD *)(((unint64_t)a1 + v2013) & v2036);
                  if (v2040 == v2046)
                  {
                    v1182 = (*(uint64_t (**)(unint64_t))(v2062 + 48))((v2037 + v1241) & v2084);
                    goto LABEL_1842;
                  }
                  v1470 = (unint64_t *)((v2065 + v1242) & 0xFFFFFFFFFFFFFFF8);
                  if (v2027 > 0x7FFFFFFE)
                  {
                    v1182 = (*(uint64_t (**)(unint64_t))(v2057 + 48))(((unint64_t)v1470 + v2056) & v2052);
                    goto LABEL_1842;
                  }
                  v1471 = *v1470;
                }
                else
                {
                  v1308 = v1242 + v2069;
                  v1183 = (_QWORD *)(((unint64_t)a1 + v2013) & v2036);
                  if ((v2023 & 0x80000000) == 0)
                  {
                    v1309 = *(_QWORD *)(v1308 + 8);
                    if (v1309 >= 0xFFFFFFFF)
                      LODWORD(v1309) = -1;
                    v1182 = v1309 + 1;
                    goto LABEL_1842;
                  }
                  v1487 = (v2077 + ((v2120 + v1308) & v2076)) & v1999;
                  if (v2059 > 0x7FFFFFFD)
                  {
                    v1182 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v1487);
                    goto LABEL_1842;
                  }
                  v1471 = *(_QWORD *)(((v2043 + ((v2073 + v1487) & v1999)) & 0xFFFFFFFFFFFFF8) + 8);
                }
                if (v1471 >= 0xFFFFFFFF)
                  LODWORD(v1471) = -1;
                if ((v1471 + 1) >= 2)
                  goto LABEL_1843;
                goto LABEL_1846;
              case 2:
                v1184 = v87;
                v1185 = v88;
                v1186 = v83;
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v1185 + 16))(a1, a2, v92);
                v1187 = (void *)(((unint64_t)a1 + v2007) & v2068);
                v1188 = (const void *)(((unint64_t)a2 + v2007) & v2068);
                if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2124 + 48))(v1188, 1, v1184))
                {
                  memcpy(v1187, v1188, v2035);
                }
                else
                {
                  (*(void (**)(void *, const void *, uint64_t))(v2124 + 16))(v1187, v1188, v1184);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v2124 + 56))(v1187, 0, 1, v1184);
                }
                v1178 = v2083;
                v1251 = (char *)(((unint64_t)v1187 + v2011) & v2078);
                v83 = ((unint64_t)v1188 + v2011) & v2078;
                if (v2039 == v2045)
                {
                  v1252 = (*(uint64_t (**)(unint64_t))(v2060 + 48))(v83);
                }
                else
                {
                  v1253 = (uint64_t *)((v2064 + v83) & 0xFFFFFFFFFFFFFFF8);
                  if (v2026 <= 0x7FFFFFFE)
                  {
                    v1254 = *v1253;
                    if ((unint64_t)*v1253 >= 0xFFFFFFFF)
                      LODWORD(v1254) = -1;
                    if ((v1254 + 1) >= 2)
                      goto LABEL_1642;
                    goto LABEL_1644;
                  }
                  v1252 = (*(uint64_t (**)(unint64_t))(v2054 + 48))(((unint64_t)v1253 + v2053) & v2051);
                }
                if (v1252)
                {
LABEL_1642:
                  v1350 = v2119;
                  memcpy(v1251, (const void *)v83, v2119);
                  goto LABEL_1645;
                }
                v1253 = (uint64_t *)((v2064 + v83) & 0xFFFFFFFFFFFFFFF8);
LABEL_1644:
                (*(void (**)(char *, unint64_t, uint64_t))(v2060 + 16))(v1251, v83, v2061);
                v1351 = (_QWORD *)((unint64_t)&v1251[v2064] & 0xFFFFFFFFFFFFFFF8);
                *v1351 = *v1253;
                v1352 = ((unint64_t)v1351 + v2053) & v2051;
                v1353 = ((unint64_t)v1253 + v2053) & v2051;
                v1354 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2054 + 16);
                swift_bridgeObjectRetain();
                v1354(v1352, v1353, v2055);
                v1355 = (_QWORD *)((v2049 + v1352) & 0xFFFFFFFFFFFFF8);
                v1356 = v2049 + v1353;
                v409 = v82;
                v1178 = v2083;
                v1356 &= 0xFFFFFFFFFFFFF8uLL;
                *v1355 = *(_QWORD *)v1356;
                v1357 = (_QWORD *)(((unint64_t)v1355 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1358 = (_QWORD *)((v1356 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v1357 = *v1358;
                v1357[1] = v1358[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1350 = v2119;
LABEL_1645:
                v1359 = &v1251[v1350];
                *v1359 = *(_BYTE *)(v1350 + v83);
                v1360 = *(void **)(v1350 + v83 + 8);
                *((_QWORD *)v1359 + 1) = v1360;
                *((_BYTE *)a1 + v2028) = 2;
                v1361 = v1360;
                v1199 = 1;
                LODWORD(v83) = v1186;
                goto LABEL_1967;
              case 3:
                v2090 = v2085 + 7;
                v1189 = v90;
                v1190 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v88 + 16);
                v1190(a1, a2, v92);
                v1191 = (_QWORD *)(((unint64_t)a1 + v2013) & v2036);
                v1192 = (_QWORD *)(((unint64_t)a2 + v2013) & v2036);
                if (v2044 == v2047)
                {
                  v1193 = (*(uint64_t (**)(_QWORD *))(v88 + 48))(v1192);
                  goto LABEL_1454;
                }
                v1243 = ((unint64_t)v1192 + v2066) & v2082;
                v1244 = (v2037 + v1243) & v2084;
                if (v2046 == v2047)
                {
                  if (v2040 == v2046)
                  {
                    v1193 = (*(uint64_t (**)(unint64_t))(v2062 + 48))((v2037 + v1243) & v2084);
                    goto LABEL_1454;
                  }
                  v1472 = (unint64_t *)((v2065 + v1244) & 0xFFFFFFFFFFFFFFF8);
                  if (v2027 <= 0x7FFFFFFE)
                  {
                    v1473 = *v1472;
                    goto LABEL_2015;
                  }
                  v1193 = (*(uint64_t (**)(unint64_t))(v2057 + 48))(((unint64_t)v1472 + v2056) & v2052);
                }
                else
                {
                  v1310 = v1244 + v2069;
                  if ((v2023 & 0x80000000) == 0)
                  {
                    v1311 = *(_QWORD *)(v1310 + 8);
                    if (v1311 >= 0xFFFFFFFF)
                      LODWORD(v1311) = -1;
                    if ((_DWORD)v1311 != -1)
                      goto LABEL_1455;
LABEL_1625:
                    v1243 = ((unint64_t)v1192 + v2066) & v2082;
                    v1244 = (v2037 + v1243) & v2084;
                    goto LABEL_1626;
                  }
                  v1488 = (v2077 + ((v2120 + v1310) & v2076)) & v1189;
                  if (v2059 <= 0x7FFFFFFD)
                  {
                    v1473 = *(_QWORD *)(((v2043 + ((v2073 + v1488) & v1189)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_2015:
                    if (v1473 >= 0xFFFFFFFF)
                      LODWORD(v1473) = -1;
                    if ((v1473 + 1) >= 2)
                      goto LABEL_1455;
LABEL_1626:
                    v1989 = v83;
                    v1190(v1191, v1192, v92);
                    v1190((_QWORD *)(((unint64_t)v1191 + v2066) & v2082), (_QWORD *)v1243, v92);
                    v1312 = (v2037 + (((unint64_t)v1191 + v2066) & v2082)) & v2084;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v2062 + 16))(v1312, v1244, v2063);
                    v1313 = (_QWORD *)((v2065 + v1312) & 0xFFFFFFFFFFFFFFF8);
                    v1314 = (_QWORD *)((v2065 + v1244) & 0xFFFFFFFFFFFFFFF8);
                    *v1313 = *v1314;
                    v1315 = ((unint64_t)v1313 + v2056) & v2052;
                    v1316 = ((unint64_t)v1314 + v2056) & v2052;
                    v1317 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2057 + 16);
                    swift_bridgeObjectRetain();
                    v1317(v1315, v1316, v2058);
                    v1318 = (_QWORD *)((v2050 + v1315) & 0xFFFFFFFFFFFFF8);
                    v1319 = (_QWORD *)((v2050 + v1316) & 0xFFFFFFFFFFFFF8);
                    *v1318 = *v1319;
                    v1320 = (_QWORD *)(((unint64_t)v1318 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v1321 = (_QWORD *)(((unint64_t)v1319 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *v1320 = *v1321;
                    v1320[1] = v1321[1];
                    v1322 = (_QWORD *)(v1312 + v2069);
                    *v1322 = *(_QWORD *)(v1244 + v2069);
                    v1322[1] = *(_QWORD *)(v1244 + v2069 + 8);
                    v1323 = (v2120 + v1312 + v2069) & v2076;
                    v1324 = (v2120 + v1244 + v2069) & v2076;
                    *(_BYTE *)v1323 = *(_BYTE *)v1324;
                    v1325 = v1323 | 4;
                    v1326 = *(_DWORD *)(v1324 | 4);
                    *(_BYTE *)(v1325 + 4) = *(_BYTE *)((v1324 | 4) + 4);
                    *(_DWORD *)v1325 = v1326;
                    *(_WORD *)(v1323 + 10) = *(_WORD *)(v1324 + 0xA);
                    v1327 = (v2077 + v1323) & v1189;
                    v1328 = (v2077 + v1324) & v1189;
                    v1329 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2080 + 16);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    v1329(v1327, v1328, v2079);
                    v1330 = (v2073 + v1327) & v1189;
                    v1331 = (v2073 + v1328) & v1189;
                    v1329(v1330, v1331, v2079);
                    v1332 = (_BYTE *)(v1330 + v2075);
                    *v1332 = *(_BYTE *)(v1331 + v2075);
                    v1332[1] = *(_BYTE *)(v1331 + v2075 + 1);
                    v1332[2] = *(_BYTE *)(v1331 + v2075 + 2);
                    v1332[3] = *(_BYTE *)(v1331 + v2075 + 3);
                    v1332[4] = *(_BYTE *)(v1331 + v2075 + 4);
                    v1333 = (v1330 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
                    v1334 = (v1331 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v1333 = *(_QWORD *)v1334;
                    *(_QWORD *)(v1333 + 8) = *(_QWORD *)(v1334 + 8);
                    *(_BYTE *)(v1333 + 16) = *(_BYTE *)(v1334 + 16);
                    *(_BYTE *)(v1333 + 17) = *(_BYTE *)(v1334 + 17);
                    *(_BYTE *)(v1333 + 18) = *(_BYTE *)(v1334 + 18);
                    *(_BYTE *)(v1333 + 19) = *(_BYTE *)(v1334 + 19);
                    v1335 = (v1333 + 27) & 0xFFFFFFFFFFFFFFF8;
                    v1336 = (v1334 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v1335 = *(_QWORD *)v1336;
                    *(_BYTE *)(v1335 + 8) = *(_BYTE *)(v1336 + 8);
                    *(_BYTE *)(v1335 + 9) = *(_BYTE *)(v1336 + 9);
                    *(_BYTE *)(v1335 + 10) = *(_BYTE *)(v1336 + 10);
                    *(_BYTE *)(v1335 + 11) = *(_BYTE *)(v1336 + 11);
                    *(_BYTE *)(v1335 + 12) = *(_BYTE *)(v1336 + 12);
                    v1337 = (_QWORD *)((v1333 + 47) & 0xFFFFFFFFFFFFF8);
                    v1338 = (_QWORD *)((v1334 + 47) & 0xFFFFFFFFFFFFF8);
                    *v1337 = *v1338;
                    v1339 = ((unint64_t)v1337 + 15) & 0xFFFFFFFFFFFFFFF8;
                    v1340 = ((unint64_t)v1338 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v1339 = *(_QWORD *)v1340;
                    *(_BYTE *)(v1339 + 8) = *(_BYTE *)(v1340 + 8);
                    *(_BYTE *)(v1339 + 9) = *(_BYTE *)(v1340 + 9);
                    v1341 = (void *)((v2070 + v1339) & v1189);
                    v1342 = (const void *)((v2070 + v1340) & v1189);
                    v1343 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v2080 + 48);
                    swift_bridgeObjectRetain();
                    if (v1343(v1342, 1, v2079))
                    {
                      memcpy(v1341, v1342, v2123);
                    }
                    else
                    {
                      v1329((unint64_t)v1341, (unint64_t)v1342, v2079);
                      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v2080 + 56))(v1341, 0, 1, v2079);
                    }
                    v1384 = (_QWORD *)(((unint64_t)v1341 + v2071) & 0xFFFFFFFFFFFFFFF8);
                    v1385 = (_QWORD *)(((unint64_t)v1342 + v2071) & 0xFFFFFFFFFFFFFFF8);
                    *v1384 = *v1385;
                    v1386 = ((unint64_t)v1384 + 15) & 0xFFFFFFFFFFFFFFF8;
                    v1387 = ((unint64_t)v1385 + 15) & 0xFFFFFFFFFFFFFFF8;
                    v1388 = *(_QWORD *)v1387;
                    *(_BYTE *)(v1386 + 8) = *(_BYTE *)(v1387 + 8);
                    *(_QWORD *)v1386 = v1388;
                    v1389 = (_QWORD *)(((unint64_t)v1384 + 31) & 0xFFFFFFFFFFFFF8);
                    v1390 = (_QWORD *)(((unint64_t)v1385 + 31) & 0xFFFFFFFFFFFFF8);
                    *v1389 = *v1390;
                    v1391 = ((unint64_t)v1389 + 15) & 0xFFFFFFFFFFFFFFF8;
                    v1392 = (uint64_t *)(((unint64_t)v1390 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v1393 = v1392[1];
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    if ((v1393 & 0x3000000000000000) != 0)
                    {
                      *(_OWORD *)v1391 = *(_OWORD *)v1392;
                    }
                    else
                    {
                      v1419 = *v1392;
                      sub_23AAAE668(*v1392, v1393);
                      *(_QWORD *)v1391 = v1419;
                      *(_QWORD *)(v1391 + 8) = v1393;
                    }
                    v1420 = (v1391 + 19) & 0xFFFFFFFFFFFFFFF8;
                    v1421 = ((unint64_t)v1392 + 19) & 0xFFFFFFFFFFFFFFF8;
                    v1422 = *(_QWORD *)v1421;
                    *(_BYTE *)(v1420 + 8) = *(_BYTE *)(v1421 + 8);
                    *(_QWORD *)v1420 = v1422;
                    *(_BYTE *)(v1420 + 9) = *(_BYTE *)(v1421 + 9);
                    v1423 = (v1420 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    v1424 = (v1421 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    v1425 = *(_DWORD *)v1424;
                    *(_BYTE *)(v1423 + 4) = *(_BYTE *)(v1424 + 4);
                    *(_DWORD *)v1423 = v1425;
                    v1426 = (_QWORD *)((v1420 + 25) & 0xFFFFFFFFFFFFFFF8);
                    v1427 = (_QWORD *)((v1421 + 25) & 0xFFFFFFFFFFFFFFF8);
                    *v1426 = *v1427;
                    v1426[1] = v1427[1];
                    v1428 = v1323 + v2072;
                    v1429 = v1324 + v2072;
                    v1430 = *(_QWORD *)(v1324 + v2072 + 16);
                    if (v1430 >= 0xFFFFFFFF)
                      LODWORD(v1430) = -1;
                    v1431 = v1430 - 1;
                    swift_bridgeObjectRetain();
                    if (v1431 < 0)
                    {
                      *(_QWORD *)v1428 = *(_QWORD *)v1429;
                      *(_BYTE *)(v1428 + 8) = *(_BYTE *)(v1429 + 8);
                      *(_BYTE *)(v1428 + 9) = *(_BYTE *)(v1429 + 9);
                      v1450 = *(void **)(v1429 + 16);
                      v1451 = v1450;
                      *(_QWORD *)(v1428 + 16) = v1450;
                      v1452 = *(void **)(v1429 + 24);
                      v1453 = v1452;
                      *(_QWORD *)(v1428 + 24) = v1452;
                      *(_BYTE *)(v1428 + 32) = *(_BYTE *)(v1429 + 32);
                      *(_BYTE *)(v1428 + 33) = *(_BYTE *)(v1429 + 33);
                      *(_BYTE *)(v1428 + 34) = *(_BYTE *)(v1429 + 34);
                      *(_QWORD *)(v1428 + 40) = *(_QWORD *)(v1429 + 40);
                      *(_QWORD *)(v1428 + 48) = *(_QWORD *)(v1429 + 48);
                      *(_QWORD *)(v1428 + 56) = *(_QWORD *)(v1429 + 56);
                      *(_QWORD *)(v1428 + 64) = *(_QWORD *)(v1429 + 64);
                      *(_BYTE *)(v1428 + 72) = *(_BYTE *)(v1429 + 72);
                      *(_QWORD *)(v1428 + 80) = *(_QWORD *)(v1429 + 80);
                      *(_QWORD *)(v1428 + 88) = *(_QWORD *)(v1429 + 88);
                      v2140 = *(void **)(v1429 + 96);
                      *(_QWORD *)(v1428 + 96) = v2140;
                      *(_BYTE *)(v1428 + 104) = *(_BYTE *)(v1429 + 104);
                      *(_BYTE *)(v1428 + 105) = *(_BYTE *)(v1429 + 105);
                      *(_QWORD *)(v1428 + 112) = *(_QWORD *)(v1429 + 112);
                      *(_QWORD *)(v1428 + 120) = *(_QWORD *)(v1429 + 120);
                      *(_QWORD *)(v1428 + 128) = *(_QWORD *)(v1429 + 128);
                      *(_QWORD *)(v1428 + 136) = *(_QWORD *)(v1429 + 136);
                      *(_QWORD *)(v1428 + 144) = *(_QWORD *)(v1429 + 144);
                      *(_QWORD *)(v1428 + 152) = *(_QWORD *)(v1429 + 152);
                      *(_QWORD *)(v1428 + 160) = *(_QWORD *)(v1429 + 160);
                      *(_QWORD *)(v1428 + 168) = *(_QWORD *)(v1429 + 168);
                      *(_BYTE *)(v1428 + 176) = *(_BYTE *)(v1429 + 176);
                      *(_QWORD *)(v1428 + 184) = *(_QWORD *)(v1429 + 184);
                      v1454 = *(_QWORD *)(v1429 + 192);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      v1455 = v2140;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      if (v1454)
                      {
                        *(_QWORD *)(v1428 + 192) = v1454;
                        *(_QWORD *)(v1428 + 200) = *(_QWORD *)(v1429 + 200);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        *(_OWORD *)(v1428 + 192) = *(_OWORD *)(v1429 + 192);
                      }
                      v3 = a1;
                      v1178 = v2083;
                      v1194 = v2025;
                      *(_QWORD *)(v1428 + 208) = *(_QWORD *)(v1429 + 208);
                      *(_QWORD *)(v1428 + 216) = *(_QWORD *)(v1429 + 216);
                      *(_QWORD *)(v1428 + 224) = *(_QWORD *)(v1429 + 224);
                      *(_QWORD *)(v1428 + 232) = *(_QWORD *)(v1429 + 232);
                      *(_QWORD *)(v1428 + 240) = *(_QWORD *)(v1429 + 240);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      v1176 = v82;
                    }
                    else
                    {
                      v1432 = *(_OWORD *)v1429;
                      v1433 = *(_OWORD *)(v1429 + 16);
                      v1434 = *(_OWORD *)(v1429 + 48);
                      *(_OWORD *)(v1428 + 32) = *(_OWORD *)(v1429 + 32);
                      *(_OWORD *)(v1428 + 48) = v1434;
                      *(_OWORD *)v1428 = v1432;
                      *(_OWORD *)(v1428 + 16) = v1433;
                      v1435 = *(_OWORD *)(v1429 + 64);
                      v1436 = *(_OWORD *)(v1429 + 80);
                      v1437 = *(_OWORD *)(v1429 + 112);
                      *(_OWORD *)(v1428 + 96) = *(_OWORD *)(v1429 + 96);
                      *(_OWORD *)(v1428 + 112) = v1437;
                      *(_OWORD *)(v1428 + 64) = v1435;
                      *(_OWORD *)(v1428 + 80) = v1436;
                      v1438 = *(_OWORD *)(v1429 + 128);
                      v1439 = *(_OWORD *)(v1429 + 144);
                      v1440 = *(_OWORD *)(v1429 + 176);
                      *(_OWORD *)(v1428 + 160) = *(_OWORD *)(v1429 + 160);
                      *(_OWORD *)(v1428 + 176) = v1440;
                      *(_OWORD *)(v1428 + 128) = v1438;
                      *(_OWORD *)(v1428 + 144) = v1439;
                      v1441 = *(_OWORD *)(v1429 + 192);
                      v1442 = *(_OWORD *)(v1429 + 208);
                      v1443 = *(_OWORD *)(v1429 + 224);
                      *(_QWORD *)(v1428 + 240) = *(_QWORD *)(v1429 + 240);
                      *(_OWORD *)(v1428 + 208) = v1442;
                      *(_OWORD *)(v1428 + 224) = v1443;
                      *(_OWORD *)(v1428 + 192) = v1441;
                      v1178 = v2083;
                      v1176 = v82;
                      v1194 = v2025;
                    }
                    v1866 = (_OWORD *)((v1428 + 255) & 0xFFFFFFFFFFFFFFF8);
                    v1867 = (__int128 *)((v1429 + 255) & 0xFFFFFFFFFFFFFFF8);
                    v1868 = *v1867;
                    *(_OWORD *)((char *)v1866 + 9) = *(__int128 *)((char *)v1867 + 9);
                    *v1866 = v1868;
                    v1869 = (v1428 + 287) & 0xFFFFFFFFFFFFFFF8;
                    v1870 = (v1429 + 287) & 0xFFFFFFFFFFFFFFF8;
                    v1871 = *(_OWORD *)v1870;
                    *(_BYTE *)(v1869 + 16) = *(_BYTE *)(v1870 + 16);
                    *(_OWORD *)v1869 = v1871;
                    v1872 = (_QWORD *)((v1428 + 311) & 0xFFFFFFFFFFFFF8);
                    v1873 = (v1429 + 311) & 0xFFFFFFFFFFFFF8;
                    v1874 = *(_QWORD *)v1873;
                    v1873 += 15;
                    *v1872 = v1874;
                    v1875 = (_QWORD *)(((unint64_t)v1872 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v1876 = *(_QWORD *)(v1873 & 0xFFFFFFFFFFFFFFF8);
                    v83 = *(_QWORD *)((v1873 & 0xFFFFFFFFFFFFFFF8) + 8);
                    sub_23AA7F2D4(v1876, v83);
                    *v1875 = v1876;
                    v1875[1] = v83;
                    LODWORD(v83) = v1989;
                    v1195 = v2075;
                    v1192 = (_QWORD *)(((unint64_t)a2 + v2013) & v2036);
                    if (v2059)
                    {
LABEL_1917:
                      v1877 = ((((v1194
                                + ((((((((((v2090 + v1195) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 19) & 0xFFFFFFFFFFFFFFF8)
                                  + 25) & 0xFFFFFFFFFFFFFFF8)
                                + 327) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 16;
                      v1878 = (_QWORD *)(((((unint64_t)a1 + v2013) & v2036) + v1877) & 0xFFFFFFFFFFFFFFF8);
                      v1879 = (_QWORD *)(((unint64_t)v1192 + v1877) & 0xFFFFFFFFFFFFFFF8);
                      *v1878 = *v1879;
                      v1878[1] = v1879[1];
                      *(_QWORD *)(((unint64_t)v1878 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1879 + 23) & 0xFFFFFFFFFFFFF8);
                      *((_BYTE *)v3 + v2028) = 3;
                      swift_bridgeObjectRetain();
LABEL_1918:
                      v1199 = 1;
                      v409 = v1176;
LABEL_1967:
                      *((_BYTE *)v3 + v409) = v1199;
                      if (v83 > 3)
                        goto LABEL_1968;
                      v1979 = ((1 << (8 * v83)) + 5) >> (8 * v83);
                      if (v1979 > 0xFFD8)
                      {
                        *v1178 = 27;
                        return v3;
                      }
                      if (v1979 <= 0xD8)
LABEL_1968:
                        *(_BYTE *)v1178 = 27;
                      else
                        *(_WORD *)v1178 = 27;
                      return v3;
                    }
LABEL_1456:
                    v1195 = v2123;
                    goto LABEL_1917;
                  }
                  v1193 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v1488);
                }
LABEL_1454:
                if (v1193)
                {
LABEL_1455:
                  memcpy(v1191, v1192, __na);
                  v1176 = v82;
                  v1194 = v2025;
                  v1178 = v2083;
                  goto LABEL_1456;
                }
                goto LABEL_1625;
              case 4:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v88 + 16))(a1, a2, v92);
                v1196 = 4;
                goto LABEL_1462;
              case 5:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v88 + 16))(a1, a2, v92);
                v1196 = 5;
                goto LABEL_1462;
              case 6:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v88 + 16))(a1, a2, v92);
                v1197 = (void *)(((unint64_t)a1 + v2006) & v2004);
                v1198 = (const void *)(((unint64_t)a2 + v2006) & v2004);
                if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2009 + 48))(v1198, 1, v2096))
                {
                  memcpy(v1197, v1198, v2002);
                }
                else
                {
                  (*(void (**)(void *, const void *, uint64_t))(v2009 + 16))(v1197, v1198, v2096);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v2009 + 56))(v1197, 0, 1, v2096);
                }
                v1178 = v2083;
                *((_BYTE *)a1 + v2028) = 6;
                v1199 = 1;
                v409 = v82;
                goto LABEL_1967;
              case 7:
                (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v88 + 16))(a1, a2, v92);
                v1196 = 7;
LABEL_1462:
                *((_BYTE *)a1 + v2028) = v1196;
                v1199 = 1;
                goto LABEL_1478;
              default:
                if (v2028 <= 3)
                  v806 = v2028;
                else
                  v806 = 4;
                __asm { BR              X12 }
                return result;
            }
          }
          switch(*((_BYTE *)a2 + v2029))
          {
            case 0:
              v2091 = v2085 + 7;
              v2000 = v90;
              v1200 = *(void (**)(void *, const void *, uint64_t))(v2124 + 16);
              v1201 = v87;
              ((void (*)(_QWORD *, _QWORD *))v1200)(a1, a2);
              v1202 = (const void *)(((unint64_t)a2 + v2014) & v2117);
              if (v2108 == v2048)
              {
                v1203 = v1201;
                v1204 = (*(uint64_t (**)(unint64_t))(v2124 + 48))(((unint64_t)a2 + v2014) & v2117);
                v1205 = (void *)(((unint64_t)a1 + v2014) & v2117);
LABEL_1860:
                if (v1204)
                {
LABEL_1861:
                  memcpy(v1205, v1202, v2136);
                  v409 = v82;
                  v1178 = v2083;
LABEL_1862:
                  v1627 = v2123;
                  goto LABEL_1941;
                }
                v1245 = ((unint64_t)v1202 + v2067) & v2068;
                v1246 = (v2038 + v1245) & v2078;
                goto LABEL_1864;
              }
              v1203 = v1201;
              v1245 = ((unint64_t)v1202 + v2067) & v2068;
              v1246 = (v2038 + v1245) & v2078;
              if (v2045 == v2048)
              {
                v1205 = (void *)(((unint64_t)a1 + v2014) & v2117);
                if (v2039 == v2045)
                {
                  v1204 = (*(uint64_t (**)(unint64_t))(v2060 + 48))((v2038 + v1245) & v2078);
                  goto LABEL_1860;
                }
                v1474 = (unint64_t *)((v2064 + v1246) & 0xFFFFFFFFFFFFFFF8);
                if (v2026 > 0x7FFFFFFE)
                {
                  v1204 = (*(uint64_t (**)(unint64_t))(v2054 + 48))(((unint64_t)v1474 + v2053) & v2051);
                  goto LABEL_1860;
                }
                v1475 = *v1474;
              }
              else
              {
                v1344 = v1246 + v2119;
                v1205 = (void *)(((unint64_t)a1 + v2014) & v2117);
                if ((v2024 & 0x80000000) == 0)
                {
                  v1345 = *(_QWORD *)(v1344 + 8);
                  if (v1345 >= 0xFFFFFFFF)
                    LODWORD(v1345) = -1;
                  v1204 = v1345 + 1;
                  goto LABEL_1860;
                }
                v1489 = (v2077 + ((v2120 + v1344) & v2076)) & v2000;
                if (v2059 > 0x7FFFFFFD)
                {
                  v1204 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v1489);
                  goto LABEL_1860;
                }
                v1475 = *(_QWORD *)(((v2043 + ((v2073 + v1489) & v2000)) & 0xFFFFFFFFFFFFF8) + 8);
              }
              if (v1475 >= 0xFFFFFFFF)
                LODWORD(v1475) = -1;
              if ((v1475 + 1) >= 2)
                goto LABEL_1861;
LABEL_1864:
              v1990 = v83;
              v1200(v1205, v1202, v1203);
              v1628 = ((unint64_t)v1205 + v2067) & v2068;
              v1200((void *)v1628, (const void *)v1245, v1203);
              v1629 = (v2038 + v1628) & v2078;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v2060 + 16))(v1629, v1246, v2061);
              v1630 = (_QWORD *)((v2064 + v1629) & 0xFFFFFFFFFFFFFFF8);
              v1631 = (_QWORD *)((v2064 + v1246) & 0xFFFFFFFFFFFFFFF8);
              *v1630 = *v1631;
              v1632 = ((unint64_t)v1630 + v2053) & v2051;
              v1633 = ((unint64_t)v1631 + v2053) & v2051;
              v1634 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2054 + 16);
              swift_bridgeObjectRetain();
              v1634(v1632, v1633, v2055);
              v1635 = (_QWORD *)((v2049 + v1632) & 0xFFFFFFFFFFFFF8);
              v1636 = (_QWORD *)((v2049 + v1633) & 0xFFFFFFFFFFFFF8);
              *v1635 = *v1636;
              v1637 = (_QWORD *)(((unint64_t)v1635 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1638 = (_QWORD *)(((unint64_t)v1636 + 15) & 0xFFFFFFFFFFFFFFF8);
              *v1637 = *v1638;
              v1637[1] = v1638[1];
              v1639 = (_QWORD *)(v1629 + v2119);
              *v1639 = *(_QWORD *)(v1246 + v2119);
              v1639[1] = *(_QWORD *)(v1246 + v2119 + 8);
              v1640 = (v2120 + v1629 + v2119) & v2076;
              v1641 = (v2120 + v1246 + v2119) & v2076;
              *(_BYTE *)v1640 = *(_BYTE *)v1641;
              v1642 = v1640 | 4;
              v1643 = *(_DWORD *)(v1641 | 4);
              *(_BYTE *)(v1642 + 4) = *(_BYTE *)((v1641 | 4) + 4);
              *(_DWORD *)v1642 = v1643;
              *(_WORD *)(v1640 + 10) = *(_WORD *)(v1641 + 10);
              v1644 = (v2077 + v1640) & v2000;
              v1645 = (v2077 + v1641) & v2000;
              v1646 = *(void (**)(size_t, size_t, uint64_t))(v2080 + 16);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1646(v1644, v1645, v2079);
              v1647 = (v2073 + v1644) & v2000;
              v1648 = (v2073 + v1645) & v2000;
              v1646(v1647, v1648, v2079);
              v1649 = (_BYTE *)(v1647 + v2075);
              *v1649 = *(_BYTE *)(v1648 + v2075);
              v1649[1] = *(_BYTE *)(v1648 + v2075 + 1);
              v1649[2] = *(_BYTE *)(v1648 + v2075 + 2);
              v1649[3] = *(_BYTE *)(v1648 + v2075 + 3);
              v1649[4] = *(_BYTE *)(v1648 + v2075 + 4);
              v1650 = (v1647 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
              v1651 = (v1648 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1650 = *(_QWORD *)v1651;
              *(_QWORD *)(v1650 + 8) = *(_QWORD *)(v1651 + 8);
              *(_BYTE *)(v1650 + 16) = *(_BYTE *)(v1651 + 16);
              *(_BYTE *)(v1650 + 17) = *(_BYTE *)(v1651 + 17);
              *(_BYTE *)(v1650 + 18) = *(_BYTE *)(v1651 + 18);
              *(_BYTE *)(v1650 + 19) = *(_BYTE *)(v1651 + 19);
              v1652 = (v1650 + 27) & 0xFFFFFFFFFFFFFFF8;
              v1653 = (v1651 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1652 = *(_QWORD *)v1653;
              *(_BYTE *)(v1652 + 8) = *(_BYTE *)(v1653 + 8);
              *(_BYTE *)(v1652 + 9) = *(_BYTE *)(v1653 + 9);
              *(_BYTE *)(v1652 + 10) = *(_BYTE *)(v1653 + 10);
              *(_BYTE *)(v1652 + 11) = *(_BYTE *)(v1653 + 11);
              *(_BYTE *)(v1652 + 12) = *(_BYTE *)(v1653 + 12);
              v1654 = (_QWORD *)((v1650 + 47) & 0xFFFFFFFFFFFFF8);
              v1655 = (_QWORD *)((v1651 + 47) & 0xFFFFFFFFFFFFF8);
              *v1654 = *v1655;
              v1656 = ((unint64_t)v1654 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1657 = ((unint64_t)v1655 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1656 = *(_QWORD *)v1657;
              *(_BYTE *)(v1656 + 8) = *(_BYTE *)(v1657 + 8);
              *(_BYTE *)(v1656 + 9) = *(_BYTE *)(v1657 + 9);
              v1658 = (void *)((v2070 + v1656) & v2000);
              v1659 = (const void *)((v2070 + v1657) & v2000);
              v1660 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v2080 + 48);
              swift_bridgeObjectRetain();
              if (v1660(v1659, 1, v2079))
              {
                memcpy(v1658, v1659, v2123);
              }
              else
              {
                v1646((size_t)v1658, (size_t)v1659, v2079);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v2080 + 56))(v1658, 0, 1, v2079);
              }
              v1661 = (_QWORD *)(((unint64_t)v1658 + v2071) & 0xFFFFFFFFFFFFFFF8);
              v1662 = (_QWORD *)(((unint64_t)v1659 + v2071) & 0xFFFFFFFFFFFFFFF8);
              *v1661 = *v1662;
              v1663 = ((unint64_t)v1661 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1664 = ((unint64_t)v1662 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1665 = *(_QWORD *)v1664;
              *(_BYTE *)(v1663 + 8) = *(_BYTE *)(v1664 + 8);
              *(_QWORD *)v1663 = v1665;
              v1666 = (_QWORD *)(((unint64_t)v1661 + 31) & 0xFFFFFFFFFFFFF8);
              v1667 = (_QWORD *)(((unint64_t)v1662 + 31) & 0xFFFFFFFFFFFFF8);
              *v1666 = *v1667;
              v1668 = ((unint64_t)v1666 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1669 = (uint64_t *)(((unint64_t)v1667 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1670 = v1669[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if ((v1670 & 0x3000000000000000) != 0)
              {
                *(_OWORD *)v1668 = *(_OWORD *)v1669;
              }
              else
              {
                v1671 = *v1669;
                sub_23AAAE668(*v1669, v1670);
                *(_QWORD *)v1668 = v1671;
                *(_QWORD *)(v1668 + 8) = v1670;
              }
              v1672 = (v1668 + 19) & 0xFFFFFFFFFFFFFFF8;
              v1673 = ((unint64_t)v1669 + 19) & 0xFFFFFFFFFFFFFFF8;
              v1674 = *(_QWORD *)v1673;
              *(_BYTE *)(v1672 + 8) = *(_BYTE *)(v1673 + 8);
              *(_QWORD *)v1672 = v1674;
              *(_BYTE *)(v1672 + 9) = *(_BYTE *)(v1673 + 9);
              v1675 = (v1672 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v1676 = (v1673 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v1677 = *(_DWORD *)v1676;
              *(_BYTE *)(v1675 + 4) = *(_BYTE *)(v1676 + 4);
              *(_DWORD *)v1675 = v1677;
              v1678 = (_QWORD *)((v1672 + 25) & 0xFFFFFFFFFFFFFFF8);
              v1679 = (_QWORD *)((v1673 + 25) & 0xFFFFFFFFFFFFFFF8);
              *v1678 = *v1679;
              v1678[1] = v1679[1];
              v1680 = v2072 + v1640;
              v83 = v2072 + v1641;
              v1681 = *(_QWORD *)(v2072 + v1641 + 16);
              if (v1681 >= 0xFFFFFFFF)
                LODWORD(v1681) = -1;
              v1682 = v1681 - 1;
              swift_bridgeObjectRetain();
              if (v1682 < 0)
              {
                *(_QWORD *)v1680 = *(_QWORD *)v83;
                *(_BYTE *)(v1680 + 8) = *(_BYTE *)(v83 + 8);
                *(_BYTE *)(v1680 + 9) = *(_BYTE *)(v83 + 9);
                v1695 = *(void **)(v83 + 16);
                v1696 = v1695;
                *(_QWORD *)(v1680 + 16) = v1695;
                v1697 = *(void **)(v83 + 24);
                v1698 = v1697;
                *(_QWORD *)(v1680 + 24) = v1697;
                *(_BYTE *)(v1680 + 32) = *(_BYTE *)(v83 + 32);
                *(_BYTE *)(v1680 + 33) = *(_BYTE *)(v83 + 33);
                *(_BYTE *)(v1680 + 34) = *(_BYTE *)(v83 + 34);
                *(_QWORD *)(v1680 + 40) = *(_QWORD *)(v83 + 40);
                *(_QWORD *)(v1680 + 48) = *(_QWORD *)(v83 + 48);
                *(_QWORD *)(v1680 + 56) = *(_QWORD *)(v83 + 56);
                *(_QWORD *)(v1680 + 64) = *(_QWORD *)(v83 + 64);
                *(_BYTE *)(v1680 + 72) = *(_BYTE *)(v83 + 72);
                *(_QWORD *)(v1680 + 80) = *(_QWORD *)(v83 + 80);
                *(_QWORD *)(v1680 + 88) = *(_QWORD *)(v83 + 88);
                v2142 = *(void **)(v83 + 96);
                *(_QWORD *)(v1680 + 96) = v2142;
                *(_BYTE *)(v1680 + 104) = *(_BYTE *)(v83 + 104);
                *(_BYTE *)(v1680 + 105) = *(_BYTE *)(v83 + 105);
                *(_QWORD *)(v1680 + 112) = *(_QWORD *)(v83 + 112);
                *(_QWORD *)(v1680 + 120) = *(_QWORD *)(v83 + 120);
                *(_QWORD *)(v1680 + 128) = *(_QWORD *)(v83 + 128);
                *(_QWORD *)(v1680 + 136) = *(_QWORD *)(v83 + 136);
                *(_QWORD *)(v1680 + 144) = *(_QWORD *)(v83 + 144);
                *(_QWORD *)(v1680 + 152) = *(_QWORD *)(v83 + 152);
                *(_QWORD *)(v1680 + 160) = *(_QWORD *)(v83 + 160);
                *(_QWORD *)(v1680 + 168) = *(_QWORD *)(v83 + 168);
                *(_BYTE *)(v1680 + 176) = *(_BYTE *)(v83 + 176);
                *(_QWORD *)(v1680 + 184) = *(_QWORD *)(v83 + 184);
                v1699 = *(_QWORD *)(v83 + 192);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1700 = v2142;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v1699)
                {
                  *(_QWORD *)(v1680 + 192) = v1699;
                  *(_QWORD *)(v1680 + 200) = *(_QWORD *)(v83 + 200);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  *(_OWORD *)(v1680 + 192) = *(_OWORD *)(v83 + 192);
                }
                v3 = a1;
                v1178 = v2083;
                v1205 = (void *)(((unint64_t)a1 + v2014) & v2117);
                *(_QWORD *)(v1680 + 208) = *(_QWORD *)(v83 + 208);
                *(_QWORD *)(v1680 + 216) = *(_QWORD *)(v83 + 216);
                *(_QWORD *)(v1680 + 224) = *(_QWORD *)(v83 + 224);
                *(_QWORD *)(v1680 + 232) = *(_QWORD *)(v83 + 232);
                *(_QWORD *)(v1680 + 240) = *(_QWORD *)(v83 + 240);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v409 = v82;
              }
              else
              {
                v1683 = *(_OWORD *)v83;
                v1684 = *(_OWORD *)(v83 + 16);
                v1685 = *(_OWORD *)(v83 + 48);
                *(_OWORD *)(v1680 + 32) = *(_OWORD *)(v83 + 32);
                *(_OWORD *)(v1680 + 48) = v1685;
                *(_OWORD *)v1680 = v1683;
                *(_OWORD *)(v1680 + 16) = v1684;
                v1686 = *(_OWORD *)(v83 + 64);
                v1687 = *(_OWORD *)(v83 + 80);
                v1688 = *(_OWORD *)(v83 + 112);
                *(_OWORD *)(v1680 + 96) = *(_OWORD *)(v83 + 96);
                *(_OWORD *)(v1680 + 112) = v1688;
                *(_OWORD *)(v1680 + 64) = v1686;
                *(_OWORD *)(v1680 + 80) = v1687;
                v1689 = *(_OWORD *)(v83 + 128);
                v1690 = *(_OWORD *)(v83 + 144);
                v1691 = *(_OWORD *)(v83 + 176);
                *(_OWORD *)(v1680 + 160) = *(_OWORD *)(v83 + 160);
                *(_OWORD *)(v1680 + 176) = v1691;
                *(_OWORD *)(v1680 + 128) = v1689;
                *(_OWORD *)(v1680 + 144) = v1690;
                v1692 = *(_OWORD *)(v83 + 192);
                v1693 = *(_OWORD *)(v83 + 208);
                v1694 = *(_OWORD *)(v83 + 224);
                *(_QWORD *)(v1680 + 240) = *(_QWORD *)(v83 + 240);
                *(_OWORD *)(v1680 + 208) = v1693;
                *(_OWORD *)(v1680 + 224) = v1694;
                *(_OWORD *)(v1680 + 192) = v1692;
                v1178 = v2083;
                v409 = v82;
                v1205 = (void *)(((unint64_t)a1 + v2014) & v2117);
              }
              v1913 = (_OWORD *)((v1680 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1914 = (__int128 *)((v83 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1915 = *v1914;
              *(_OWORD *)((char *)v1913 + 9) = *(__int128 *)((char *)v1914 + 9);
              *v1913 = v1915;
              v1916 = (v1680 + 287) & 0xFFFFFFFFFFFFFFF8;
              v1917 = (v83 + 287) & 0xFFFFFFFFFFFFFFF8;
              v1918 = *(_OWORD *)v1917;
              *(_BYTE *)(v1916 + 16) = *(_BYTE *)(v1917 + 16);
              *(_OWORD *)v1916 = v1918;
              v1919 = (_QWORD *)((v1680 + 311) & 0xFFFFFFFFFFFFF8);
              v1920 = (v83 + 311) & 0xFFFFFFFFFFFFF8;
              v1921 = *(_QWORD *)v1920;
              v1920 += 15;
              *v1919 = v1921;
              v1922 = (_QWORD *)(((unint64_t)v1919 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1923 = *(_QWORD *)(v1920 & 0xFFFFFFFFFFFFFFF8);
              v1924 = *(_QWORD *)((v1920 & 0xFFFFFFFFFFFFFFF8) + 8);
              sub_23AA7F2D4(v1923, v1924);
              *v1922 = v1923;
              v1922[1] = v1924;
              LODWORD(v83) = v1990;
              v1627 = v2075;
              if (!v2059)
                goto LABEL_1862;
LABEL_1941:
              v1925 = ((((v2094
                        + 327
                        + ((((((((((v2091 + v1627) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1926 = (_QWORD *)(((unint64_t)v1205 + v1925) & 0xFFFFFFFFFFFFFFF8);
              v1927 = (_QWORD *)(((unint64_t)v1202 + v1925) & 0xFFFFFFFFFFFFFFF8);
              *v1926 = *v1927;
              v1928 = *(void **)(((unint64_t)v1927 + 15) & 0xFFFFFFFFFFFFF8);
              *(_QWORD *)(((unint64_t)v1926 + 15) & 0xFFFFFFFFFFFFF8) = v1928;
              *((_BYTE *)v3 + v2029) = 0;
              v1929 = v1928;
LABEL_1966:
              v1199 = 0;
              goto LABEL_1967;
            case 1:
              v2092 = v2085 + 7;
              v2001 = v90;
              v1206 = *(void (**)(void *, const void *, uint64_t))(v2124 + 16);
              ((void (*)(_QWORD *, _QWORD *))v1206)(a1, a2);
              v1207 = (const void *)(((unint64_t)a2 + v2014) & v2117);
              if (v2108 == v2048)
              {
                v1208 = (*(uint64_t (**)(unint64_t))(v2124 + 48))(((unint64_t)a2 + v2014) & v2117);
                v1209 = (void *)(((unint64_t)a1 + v2014) & v2117);
LABEL_1877:
                if (v1208)
                {
LABEL_1878:
                  memcpy(v1209, v1207, v2136);
                  v1701 = v2122;
LABEL_1879:
                  v1702 = v2123;
                  goto LABEL_1945;
                }
                v1247 = ((unint64_t)v1207 + v2067) & v2068;
                v1248 = (v2038 + v1247) & v2078;
LABEL_1881:
                v1991 = v83;
                v1206(v1209, v1207, AssociatedTypeWitness);
                v1703 = ((unint64_t)v1209 + v2067) & v2068;
                v1206((void *)v1703, (const void *)v1247, AssociatedTypeWitness);
                v1704 = (v2038 + v1703) & v2078;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v2060 + 16))(v1704, v1248, v2061);
                v1705 = (_QWORD *)((v2064 + v1704) & 0xFFFFFFFFFFFFFFF8);
                v1706 = (_QWORD *)((v2064 + v1248) & 0xFFFFFFFFFFFFFFF8);
                *v1705 = *v1706;
                v1707 = ((unint64_t)v1705 + v2053) & v2051;
                v1708 = ((unint64_t)v1706 + v2053) & v2051;
                v1709 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2054 + 16);
                swift_bridgeObjectRetain();
                v1709(v1707, v1708, v2055);
                v1710 = (_QWORD *)((v2049 + v1707) & 0xFFFFFFFFFFFFF8);
                v1711 = (_QWORD *)((v2049 + v1708) & 0xFFFFFFFFFFFFF8);
                *v1710 = *v1711;
                v1712 = (_QWORD *)(((unint64_t)v1710 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1713 = (_QWORD *)(((unint64_t)v1711 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v1712 = *v1713;
                v1712[1] = v1713[1];
                v1714 = (_QWORD *)(v1704 + v2119);
                *v1714 = *(_QWORD *)(v1248 + v2119);
                v1714[1] = *(_QWORD *)(v1248 + v2119 + 8);
                v1715 = (v2120 + v1704 + v2119) & v2076;
                v1716 = (v2120 + v1248 + v2119) & v2076;
                *(_BYTE *)v1715 = *(_BYTE *)v1716;
                v1717 = v1715 | 4;
                v1718 = *(_DWORD *)(v1716 | 4);
                *(_BYTE *)(v1717 + 4) = *(_BYTE *)((v1716 | 4) + 4);
                *(_DWORD *)v1717 = v1718;
                *(_WORD *)(v1715 + 10) = *(_WORD *)(v1716 + 0xA);
                v1719 = (v2077 + v1715) & v2001;
                v1720 = (v2077 + v1716) & v2001;
                v1721 = *(void (**)(size_t, size_t, uint64_t))(v2080 + 16);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1721(v1719, v1720, v2079);
                v1722 = (v2073 + v1720) & v2001;
                v1721((v2073 + v1719) & v2001, v1722, v2079);
                v1723 = (_BYTE *)(((v2073 + v1719) & v2001) + v2075);
                *v1723 = *(_BYTE *)(v1722 + v2075);
                v1723[1] = *(_BYTE *)(v1722 + v2075 + 1);
                v1723[2] = *(_BYTE *)(v1722 + v2075 + 2);
                v1723[3] = *(_BYTE *)(v1722 + v2075 + 3);
                v1723[4] = *(_BYTE *)(v1722 + v2075 + 4);
                v1724 = (unint64_t)(v1723 + 12) & 0xFFFFFFFFFFFFFFF8;
                v1725 = (v1722 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v1724 = *(_QWORD *)v1725;
                *(_QWORD *)(v1724 + 8) = *(_QWORD *)(v1725 + 8);
                *(_BYTE *)(v1724 + 16) = *(_BYTE *)(v1725 + 16);
                *(_BYTE *)(v1724 + 17) = *(_BYTE *)(v1725 + 17);
                *(_BYTE *)(v1724 + 18) = *(_BYTE *)(v1725 + 18);
                *(_BYTE *)(v1724 + 19) = *(_BYTE *)(v1725 + 19);
                v1726 = (v1724 + 27) & 0xFFFFFFFFFFFFFFF8;
                v1727 = (v1725 + 27) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v1726 = *(_QWORD *)v1727;
                *(_BYTE *)(v1726 + 8) = *(_BYTE *)(v1727 + 8);
                *(_BYTE *)(v1726 + 9) = *(_BYTE *)(v1727 + 9);
                *(_BYTE *)(v1726 + 10) = *(_BYTE *)(v1727 + 10);
                *(_BYTE *)(v1726 + 11) = *(_BYTE *)(v1727 + 11);
                *(_BYTE *)(v1726 + 12) = *(_BYTE *)(v1727 + 12);
                v1728 = (_QWORD *)((v1724 + 47) & 0xFFFFFFFFFFFFF8);
                v1729 = (_QWORD *)((v1725 + 47) & 0xFFFFFFFFFFFFF8);
                *v1728 = *v1729;
                v1730 = ((unint64_t)v1728 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1731 = ((unint64_t)v1729 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v1730 = *(_QWORD *)v1731;
                *(_BYTE *)(v1730 + 8) = *(_BYTE *)(v1731 + 8);
                *(_BYTE *)(v1730 + 9) = *(_BYTE *)(v1731 + 9);
                v1732 = (void *)((v2070 + v1730) & v2001);
                v1733 = (const void *)((v2070 + v1731) & v2001);
                v1734 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v2080 + 48);
                swift_bridgeObjectRetain();
                if (v1734(v1733, 1, v2079))
                {
                  memcpy(v1732, v1733, v2123);
                }
                else
                {
                  v1721((size_t)v1732, (size_t)v1733, v2079);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v2080 + 56))(v1732, 0, 1, v2079);
                }
                v1735 = (_QWORD *)(((unint64_t)v1732 + v2071) & 0xFFFFFFFFFFFFFFF8);
                v1736 = (_QWORD *)(((unint64_t)v1733 + v2071) & 0xFFFFFFFFFFFFFFF8);
                *v1735 = *v1736;
                v1737 = ((unint64_t)v1735 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1738 = ((unint64_t)v1736 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1739 = *(_QWORD *)v1738;
                *(_BYTE *)(v1737 + 8) = *(_BYTE *)(v1738 + 8);
                *(_QWORD *)v1737 = v1739;
                v1740 = (_QWORD *)(((unint64_t)v1735 + 31) & 0xFFFFFFFFFFFFF8);
                v1741 = (_QWORD *)(((unint64_t)v1736 + 31) & 0xFFFFFFFFFFFFF8);
                *v1740 = *v1741;
                v1742 = ((unint64_t)v1740 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1743 = (uint64_t *)(((unint64_t)v1741 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1744 = v1743[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if ((v1744 & 0x3000000000000000) != 0)
                {
                  *(_OWORD *)v1742 = *(_OWORD *)v1743;
                }
                else
                {
                  v1745 = *v1743;
                  sub_23AAAE668(*v1743, v1744);
                  *(_QWORD *)v1742 = v1745;
                  *(_QWORD *)(v1742 + 8) = v1744;
                }
                v1746 = (v1742 + 19) & 0xFFFFFFFFFFFFFFF8;
                v1747 = ((unint64_t)v1743 + 19) & 0xFFFFFFFFFFFFFFF8;
                v1748 = *(_QWORD *)v1747;
                *(_BYTE *)(v1746 + 8) = *(_BYTE *)(v1747 + 8);
                *(_QWORD *)v1746 = v1748;
                *(_BYTE *)(v1746 + 9) = *(_BYTE *)(v1747 + 9);
                v1749 = (v1746 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                v1750 = (v1747 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                v1751 = *(_DWORD *)v1750;
                *(_BYTE *)(v1749 + 4) = *(_BYTE *)(v1750 + 4);
                *(_DWORD *)v1749 = v1751;
                v1752 = (_QWORD *)((v1746 + 25) & 0xFFFFFFFFFFFFFFF8);
                v1753 = (_QWORD *)((v1747 + 25) & 0xFFFFFFFFFFFFFFF8);
                *v1752 = *v1753;
                v1752[1] = v1753[1];
                v83 = v2072 + v1715;
                v1754 = v2072 + v1716;
                v1755 = *(_QWORD *)(v2072 + v1716 + 16);
                if (v1755 >= 0xFFFFFFFF)
                  LODWORD(v1755) = -1;
                v1756 = v1755 - 1;
                swift_bridgeObjectRetain();
                if (v1756 < 0)
                {
                  *(_QWORD *)v83 = *(_QWORD *)v1754;
                  *(_BYTE *)(v83 + 8) = *(_BYTE *)(v1754 + 8);
                  *(_BYTE *)(v83 + 9) = *(_BYTE *)(v1754 + 9);
                  v1769 = *(void **)(v1754 + 16);
                  v1770 = v1769;
                  *(_QWORD *)(v83 + 16) = v1769;
                  v1771 = *(void **)(v1754 + 24);
                  v1772 = v1771;
                  *(_QWORD *)(v83 + 24) = v1771;
                  *(_BYTE *)(v83 + 32) = *(_BYTE *)(v1754 + 32);
                  *(_BYTE *)(v83 + 33) = *(_BYTE *)(v1754 + 33);
                  *(_BYTE *)(v83 + 34) = *(_BYTE *)(v1754 + 34);
                  *(_QWORD *)(v83 + 40) = *(_QWORD *)(v1754 + 40);
                  *(_QWORD *)(v83 + 48) = *(_QWORD *)(v1754 + 48);
                  *(_QWORD *)(v83 + 56) = *(_QWORD *)(v1754 + 56);
                  *(_QWORD *)(v83 + 64) = *(_QWORD *)(v1754 + 64);
                  *(_BYTE *)(v83 + 72) = *(_BYTE *)(v1754 + 72);
                  *(_QWORD *)(v83 + 80) = *(_QWORD *)(v1754 + 80);
                  *(_QWORD *)(v83 + 88) = *(_QWORD *)(v1754 + 88);
                  v2143 = *(void **)(v1754 + 96);
                  *(_QWORD *)(v83 + 96) = v2143;
                  *(_BYTE *)(v83 + 104) = *(_BYTE *)(v1754 + 104);
                  *(_BYTE *)(v83 + 105) = *(_BYTE *)(v1754 + 105);
                  *(_QWORD *)(v83 + 112) = *(_QWORD *)(v1754 + 112);
                  *(_QWORD *)(v83 + 120) = *(_QWORD *)(v1754 + 120);
                  *(_QWORD *)(v83 + 128) = *(_QWORD *)(v1754 + 128);
                  *(_QWORD *)(v83 + 136) = *(_QWORD *)(v1754 + 136);
                  *(_QWORD *)(v83 + 144) = *(_QWORD *)(v1754 + 144);
                  *(_QWORD *)(v83 + 152) = *(_QWORD *)(v1754 + 152);
                  *(_QWORD *)(v83 + 160) = *(_QWORD *)(v1754 + 160);
                  *(_QWORD *)(v83 + 168) = *(_QWORD *)(v1754 + 168);
                  *(_BYTE *)(v83 + 176) = *(_BYTE *)(v1754 + 176);
                  *(_QWORD *)(v83 + 184) = *(_QWORD *)(v1754 + 184);
                  v1773 = *(_QWORD *)(v1754 + 192);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v1774 = v2143;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v1773)
                  {
                    *(_QWORD *)(v83 + 192) = v1773;
                    *(_QWORD *)(v83 + 200) = *(_QWORD *)(v1754 + 200);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    *(_OWORD *)(v83 + 192) = *(_OWORD *)(v1754 + 192);
                  }
                  v3 = a1;
                  v92 = v2118;
                  v1701 = v2122;
                  v284 = v2094 + 327;
                  v1207 = (const void *)(((unint64_t)a2 + v2014) & v2117);
                  *(_QWORD *)(v83 + 208) = *(_QWORD *)(v1754 + 208);
                  *(_QWORD *)(v83 + 216) = *(_QWORD *)(v1754 + 216);
                  *(_QWORD *)(v83 + 224) = *(_QWORD *)(v1754 + 224);
                  *(_QWORD *)(v83 + 232) = *(_QWORD *)(v1754 + 232);
                  *(_QWORD *)(v83 + 240) = *(_QWORD *)(v1754 + 240);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  v1757 = *(_OWORD *)v1754;
                  v1758 = *(_OWORD *)(v1754 + 16);
                  v1759 = *(_OWORD *)(v1754 + 48);
                  *(_OWORD *)(v83 + 32) = *(_OWORD *)(v1754 + 32);
                  *(_OWORD *)(v83 + 48) = v1759;
                  *(_OWORD *)v83 = v1757;
                  *(_OWORD *)(v83 + 16) = v1758;
                  v1760 = *(_OWORD *)(v1754 + 64);
                  v1761 = *(_OWORD *)(v1754 + 80);
                  v1762 = *(_OWORD *)(v1754 + 112);
                  *(_OWORD *)(v83 + 96) = *(_OWORD *)(v1754 + 96);
                  *(_OWORD *)(v83 + 112) = v1762;
                  *(_OWORD *)(v83 + 64) = v1760;
                  *(_OWORD *)(v83 + 80) = v1761;
                  v1763 = *(_OWORD *)(v1754 + 128);
                  v1764 = *(_OWORD *)(v1754 + 144);
                  v1765 = *(_OWORD *)(v1754 + 176);
                  *(_OWORD *)(v83 + 160) = *(_OWORD *)(v1754 + 160);
                  *(_OWORD *)(v83 + 176) = v1765;
                  *(_OWORD *)(v83 + 128) = v1763;
                  *(_OWORD *)(v83 + 144) = v1764;
                  v1766 = *(_OWORD *)(v1754 + 192);
                  v1767 = *(_OWORD *)(v1754 + 208);
                  v1768 = *(_OWORD *)(v1754 + 224);
                  *(_QWORD *)(v83 + 240) = *(_QWORD *)(v1754 + 240);
                  *(_OWORD *)(v83 + 208) = v1767;
                  *(_OWORD *)(v83 + 224) = v1768;
                  *(_OWORD *)(v83 + 192) = v1766;
                  v92 = v2118;
                  v1701 = v2122;
                  v284 = v2094 + 327;
                  v1207 = (const void *)(((unint64_t)a2 + v2014) & v2117);
                }
                v1930 = (_OWORD *)((v83 + 255) & 0xFFFFFFFFFFFFFFF8);
                v1931 = (__int128 *)((v1754 + 255) & 0xFFFFFFFFFFFFFFF8);
                v1932 = *v1931;
                *(_OWORD *)((char *)v1930 + 9) = *(__int128 *)((char *)v1931 + 9);
                *v1930 = v1932;
                v1933 = (v83 + 287) & 0xFFFFFFFFFFFFFFF8;
                v1934 = (v1754 + 287) & 0xFFFFFFFFFFFFFFF8;
                v1935 = *(_OWORD *)v1934;
                *(_BYTE *)(v1933 + 16) = *(_BYTE *)(v1934 + 16);
                *(_OWORD *)v1933 = v1935;
                v1936 = (_QWORD *)((v83 + 311) & 0xFFFFFFFFFFFFF8);
                v1937 = (v1754 + 311) & 0xFFFFFFFFFFFFF8;
                v1938 = *(_QWORD *)v1937;
                v1937 += 15;
                *v1936 = v1938;
                v1939 = (_QWORD *)(((unint64_t)v1936 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1940 = *(_QWORD *)(v1937 & 0xFFFFFFFFFFFFFFF8);
                v1941 = *(_QWORD *)((v1937 & 0xFFFFFFFFFFFFFFF8) + 8);
                sub_23AA7F2D4(v1940, v1941);
                *v1939 = v1940;
                v1939[1] = v1941;
                LODWORD(v83) = v1991;
                v1702 = v2075;
                v1209 = (void *)(((unint64_t)a1 + v2014) & v2117);
                if (!v2059)
                  goto LABEL_1879;
LABEL_1945:
                v1942 = ((((v284
                          + ((((((((((v2092 + v1702) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 19) & 0xFFFFFFFFFFFFFFF8)
                            + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16;
                v1943 = (void *)(((unint64_t)v1209 + v2126 + v1942) & v2082);
                v1944 = (const void *)(((unint64_t)v1207 + v2126 + v1942) & v2082);
                if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1701 + 48))(v1944, 1, v92))
                {
                  v1211 = v83;
                  memcpy(v1943, v1944, v2015);
                }
                else
                {
                  v1945 = v1701;
                  v1211 = v83;
                  (*(void (**)(void *, const void *, uint64_t))(v1945 + 16))(v1943, v1944, v92);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1945 + 56))(v1943, 0, 1, v92);
                }
                v1178 = v2083;
                v1946 = (char *)(((unint64_t)v1943 + v2012) & v2084);
                v1947 = (char *)(((unint64_t)v1944 + v2012) & v2084);
                if (v2040 == v2046)
                {
                  v1948 = (*(uint64_t (**)(unint64_t))(v2062 + 48))(((unint64_t)v1944 + v2012) & v2084);
                  v409 = v82;
                }
                else
                {
                  v1949 = (uint64_t *)((unint64_t)&v1947[v2065] & 0xFFFFFFFFFFFFFFF8);
                  v409 = v82;
                  if (v2027 <= 0x7FFFFFFE)
                  {
                    v1950 = *v1949;
                    if ((unint64_t)*v1949 >= 0xFFFFFFFF)
                      LODWORD(v1950) = -1;
                    if ((v1950 + 1) >= 2)
                      goto LABEL_1957;
                    goto LABEL_1959;
                  }
                  v1948 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v2057 + 48))(((unint64_t)v1949 + v2056) & v2052, v2017, v2058);
                }
                if (v1948)
                {
LABEL_1957:
                  v1951 = v2069;
                  memcpy(v1946, v1947, v2069);
LABEL_1960:
                  *(_QWORD *)&v1946[v1951] = *(_QWORD *)&v1947[v1951];
                  v1961 = (_QWORD *)((unint64_t)&v1946[v1951 + 15] & 0xFFFFFFFFFFFFF8);
                  v1962 = (_QWORD *)((unint64_t)&v1947[v1951 + 15] & 0xFFFFFFFFFFFFFFF8);
                  *v1961 = *v1962;
                  v1372 = *(void **)(((unint64_t)v1962 + 15) & 0xFFFFFFFFFFFFF8);
                  *(_QWORD *)(((unint64_t)v1961 + 15) & 0xFFFFFFFFFFFFF8) = v1372;
                  v1373 = 1;
LABEL_1961:
                  *((_BYTE *)v3 + v2029) = v1373;
                  v1963 = v1372;
                  v1199 = 0;
                  LODWORD(v83) = v1211;
                  goto LABEL_1967;
                }
                v1949 = (uint64_t *)((unint64_t)&v1947[v2065] & 0xFFFFFFFFFFFFFFF8);
LABEL_1959:
                (*(void (**)(char *, char *, uint64_t))(v2062 + 16))(v1946, v1947, v2063);
                v1952 = (_QWORD *)((unint64_t)&v1946[v2065] & 0xFFFFFFFFFFFFFFF8);
                *v1952 = *v1949;
                v1953 = ((unint64_t)v1952 + v2056) & v2052;
                v1954 = v409;
                v1955 = ((unint64_t)v1949 + v2056) & v2052;
                v1956 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2057 + 16);
                swift_bridgeObjectRetain();
                v1956(v1953, v1955, v2058);
                v1957 = (_QWORD *)((v2050 + v1953) & 0xFFFFFFFFFFFFF8);
                v1958 = v2050 + v1955;
                v409 = v1954;
                v1178 = v2083;
                v1958 &= 0xFFFFFFFFFFFFF8uLL;
                *v1957 = *(_QWORD *)v1958;
                v1959 = (_QWORD *)(((unint64_t)v1957 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1960 = (_QWORD *)((v1958 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v1959 = *v1960;
                v1959[1] = v1960[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1951 = v2069;
                goto LABEL_1960;
              }
              v1247 = ((unint64_t)v1207 + v2067) & v2068;
              v1248 = (v2038 + v1247) & v2078;
              if (v2045 == v2048)
              {
                v1209 = (void *)(((unint64_t)a1 + v2014) & v2117);
                if (v2039 == v2045)
                {
                  v1208 = (*(uint64_t (**)(unint64_t))(v2060 + 48))((v2038 + v1247) & v2078);
                  goto LABEL_1877;
                }
                v1476 = (unint64_t *)((v2064 + v1248) & 0xFFFFFFFFFFFFFFF8);
                if (v2026 > 0x7FFFFFFE)
                {
                  v1208 = (*(uint64_t (**)(unint64_t))(v2054 + 48))(((unint64_t)v1476 + v2053) & v2051);
                  goto LABEL_1877;
                }
                v1477 = *v1476;
              }
              else
              {
                v1346 = v1248 + v2119;
                v1209 = (void *)(((unint64_t)a1 + v2014) & v2117);
                if ((v2024 & 0x80000000) == 0)
                {
                  v1347 = *(_QWORD *)(v1346 + 8);
                  if (v1347 >= 0xFFFFFFFF)
                    LODWORD(v1347) = -1;
                  v1208 = v1347 + 1;
                  goto LABEL_1877;
                }
                v1490 = (v2077 + ((v2120 + v1346) & v2076)) & v2001;
                if (v2059 > 0x7FFFFFFD)
                {
                  v1208 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v1490);
                  goto LABEL_1877;
                }
                v1477 = *(_QWORD *)(((v2043 + ((v2073 + v1490) & v2001)) & 0xFFFFFFFFFFFFF8) + 8);
              }
              if (v1477 >= 0xFFFFFFFF)
                LODWORD(v1477) = -1;
              if ((v1477 + 1) >= 2)
                goto LABEL_1878;
              goto LABEL_1881;
            case 2:
              v1210 = v88;
              v1211 = v83;
              (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v2124 + 16))(a1, a2, v87);
              v1212 = (void *)(((unint64_t)a1 + v2042) & v2082);
              v1213 = (const void *)(((unint64_t)a2 + v2042) & v2082);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1210 + 48))(v1213, 1, v92))
              {
                memcpy(v1212, v1213, v2015);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v1210 + 16))(v1212, v1213, v92);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1210 + 56))(v1212, 0, 1, v92);
              }
              v1255 = (char *)(((unint64_t)v1212 + v2012) & v2084);
              v1256 = (char *)(((unint64_t)v1213 + v2012) & v2084);
              v1178 = v2083;
              if (v2040 == v2046)
              {
                v1257 = (*(uint64_t (**)(char *))(v2062 + 48))(v1256);
              }
              else
              {
                v1258 = (uint64_t *)((unint64_t)&v1256[v2065] & 0xFFFFFFFFFFFFFFF8);
                if (v2027 <= 0x7FFFFFFE)
                {
                  v1259 = *v1258;
                  if ((unint64_t)*v1258 >= 0xFFFFFFFF)
                    LODWORD(v1259) = -1;
                  if ((v1259 + 1) >= 2)
                    goto LABEL_1648;
                  goto LABEL_1650;
                }
                v1257 = (*(uint64_t (**)(unint64_t))(v2057 + 48))(((unint64_t)v1258 + v2056) & v2052);
              }
              if (v1257)
              {
LABEL_1648:
                v1362 = v2069;
                memcpy(v1255, v1256, v2069);
                goto LABEL_1651;
              }
              v1258 = (uint64_t *)((unint64_t)&v1256[v2065] & 0xFFFFFFFFFFFFFFF8);
LABEL_1650:
              (*(void (**)(char *, char *, uint64_t))(v2062 + 16))(v1255, v1256, v2063);
              v1363 = (_QWORD *)((unint64_t)&v1255[v2065] & 0xFFFFFFFFFFFFFFF8);
              *v1363 = *v1258;
              v1364 = ((unint64_t)v1363 + v2056) & v2052;
              v1365 = ((unint64_t)v1258 + v2056) & v2052;
              v1366 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2057 + 16);
              swift_bridgeObjectRetain();
              v1366(v1364, v1365, v2058);
              v1367 = (_QWORD *)((v2050 + v1364) & 0xFFFFFFFFFFFFF8);
              v1368 = v2050 + v1365;
              v409 = v82;
              v1178 = v2083;
              v1368 &= 0xFFFFFFFFFFFFF8uLL;
              *v1367 = *(_QWORD *)v1368;
              v1369 = (_QWORD *)(((unint64_t)v1367 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1370 = (_QWORD *)((v1368 + 15) & 0xFFFFFFFFFFFFFFF8);
              *v1369 = *v1370;
              v1369[1] = v1370[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v1362 = v2069;
LABEL_1651:
              v1371 = &v1255[v1362];
              *v1371 = v1256[v1362];
              v1372 = *(void **)&v1256[v1362 + 8];
              *((_QWORD *)v1371 + 1) = v1372;
              v1373 = 2;
              goto LABEL_1961;
            case 3:
              v2093 = v2085 + 7;
              v1214 = v90;
              v1215 = *(void (**)(void *, const void *, uint64_t))(v2124 + 16);
              v1216 = v87;
              ((void (*)(_QWORD *, _QWORD *))v1215)(a1, a2);
              v2155 = (const void *)(((unint64_t)a2 + v2014) & v2117);
              if (v2108 == v2048)
              {
                v1217 = v1216;
                v1218 = (*(uint64_t (**)(void))(v2124 + 48))();
                v1219 = (void *)(((unint64_t)a1 + v2014) & v2117);
LABEL_1894:
                if (v1218)
                {
LABEL_1895:
                  v1775 = ((unint64_t)a2 + v2014) & v2117;
                  memcpy(v1219, v2155, v2136);
                  v409 = v82;
                  v1178 = v2083;
                  goto LABEL_1896;
                }
                v1249 = ((unint64_t)v2155 + v2067) & v2068;
                v1250 = (v2038 + v1249) & v2078;
LABEL_1898:
                v1992 = v83;
                v1215(v1219, v2155, v1217);
                v1777 = ((unint64_t)v1219 + v2067) & v2068;
                v1215((void *)v1777, (const void *)v1249, v1217);
                v1778 = (v2038 + v1777) & v2078;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v2060 + 16))(v1778, v1250, v2061);
                v1779 = (_QWORD *)((v2064 + v1778) & 0xFFFFFFFFFFFFFFF8);
                v1780 = (_QWORD *)((v2064 + v1250) & 0xFFFFFFFFFFFFFFF8);
                *v1779 = *v1780;
                v1781 = ((unint64_t)v1779 + v2053) & v2051;
                v1782 = ((unint64_t)v1780 + v2053) & v2051;
                v1783 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2054 + 16);
                swift_bridgeObjectRetain();
                v1783(v1781, v1782, v2055);
                v1784 = (_QWORD *)((v2049 + v1781) & 0xFFFFFFFFFFFFF8);
                v1785 = (_QWORD *)((v2049 + v1782) & 0xFFFFFFFFFFFFF8);
                *v1784 = *v1785;
                v1786 = (_QWORD *)(((unint64_t)v1784 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1787 = (_QWORD *)(((unint64_t)v1785 + 15) & 0xFFFFFFFFFFFFFFF8);
                *v1786 = *v1787;
                v1786[1] = v1787[1];
                v1788 = (_QWORD *)(v1778 + v2119);
                *v1788 = *(_QWORD *)(v1250 + v2119);
                v1788[1] = *(_QWORD *)(v1250 + v2119 + 8);
                v1789 = (v2120 + v1778 + v2119) & v2076;
                v1790 = (v2120 + v1250 + v2119) & v2076;
                *(_BYTE *)v1789 = *(_BYTE *)v1790;
                v1791 = v1789 | 4;
                v1792 = *(_DWORD *)(v1790 | 4);
                *(_BYTE *)(v1791 + 4) = *(_BYTE *)((v1790 | 4) + 4);
                *(_DWORD *)v1791 = v1792;
                *(_WORD *)(v1789 + 10) = *(_WORD *)(v1790 + 10);
                v1793 = (v2077 + v1789) & v1214;
                v1794 = (v2077 + v1790) & v1214;
                v1795 = *(void (**)(size_t, size_t, uint64_t))(v2080 + 16);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1795(v1793, v1794, v2079);
                v1796 = (v2073 + v1793) & v1214;
                v1797 = (v2073 + v1794) & v1214;
                v1795(v1796, v1797, v2079);
                v1798 = (_BYTE *)(v1796 + v2075);
                *v1798 = *(_BYTE *)(v1797 + v2075);
                v1798[1] = *(_BYTE *)(v1797 + v2075 + 1);
                v1798[2] = *(_BYTE *)(v1797 + v2075 + 2);
                v1798[3] = *(_BYTE *)(v1797 + v2075 + 3);
                v1798[4] = *(_BYTE *)(v1797 + v2075 + 4);
                v1799 = (v1796 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
                v1800 = (v1797 + v2075 + 12) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v1799 = *(_QWORD *)v1800;
                *(_QWORD *)(v1799 + 8) = *(_QWORD *)(v1800 + 8);
                *(_BYTE *)(v1799 + 16) = *(_BYTE *)(v1800 + 16);
                *(_BYTE *)(v1799 + 17) = *(_BYTE *)(v1800 + 17);
                *(_BYTE *)(v1799 + 18) = *(_BYTE *)(v1800 + 18);
                *(_BYTE *)(v1799 + 19) = *(_BYTE *)(v1800 + 19);
                v1801 = (v1799 + 27) & 0xFFFFFFFFFFFFFFF8;
                v1802 = (v1800 + 27) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v1801 = *(_QWORD *)v1802;
                *(_BYTE *)(v1801 + 8) = *(_BYTE *)(v1802 + 8);
                *(_BYTE *)(v1801 + 9) = *(_BYTE *)(v1802 + 9);
                *(_BYTE *)(v1801 + 10) = *(_BYTE *)(v1802 + 10);
                *(_BYTE *)(v1801 + 11) = *(_BYTE *)(v1802 + 11);
                *(_BYTE *)(v1801 + 12) = *(_BYTE *)(v1802 + 12);
                v1803 = (_QWORD *)((v1799 + 47) & 0xFFFFFFFFFFFFF8);
                v1804 = (_QWORD *)((v1800 + 47) & 0xFFFFFFFFFFFFF8);
                *v1803 = *v1804;
                v1805 = ((unint64_t)v1803 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1806 = ((unint64_t)v1804 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v1805 = *(_QWORD *)v1806;
                *(_BYTE *)(v1805 + 8) = *(_BYTE *)(v1806 + 8);
                *(_BYTE *)(v1805 + 9) = *(_BYTE *)(v1806 + 9);
                v1807 = (void *)((v2070 + v1805) & v1214);
                v1808 = (const void *)((v2070 + v1806) & v1214);
                v1809 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v2080 + 48);
                swift_bridgeObjectRetain();
                if (v1809(v1808, 1, v2079))
                {
                  memcpy(v1807, v1808, v2123);
                }
                else
                {
                  v1795((size_t)v1807, (size_t)v1808, v2079);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v2080 + 56))(v1807, 0, 1, v2079);
                }
                v1810 = (_QWORD *)(((unint64_t)v1807 + v2071) & 0xFFFFFFFFFFFFFFF8);
                v1811 = (_QWORD *)(((unint64_t)v1808 + v2071) & 0xFFFFFFFFFFFFFFF8);
                *v1810 = *v1811;
                v1812 = ((unint64_t)v1810 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1813 = ((unint64_t)v1811 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1814 = *(_QWORD *)v1813;
                *(_BYTE *)(v1812 + 8) = *(_BYTE *)(v1813 + 8);
                *(_QWORD *)v1812 = v1814;
                v1815 = (_QWORD *)(((unint64_t)v1810 + 31) & 0xFFFFFFFFFFFFF8);
                v1816 = (_QWORD *)(((unint64_t)v1811 + 31) & 0xFFFFFFFFFFFFF8);
                *v1815 = *v1816;
                v1817 = ((unint64_t)v1815 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1818 = (uint64_t *)(((unint64_t)v1816 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1819 = v1818[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if ((v1819 & 0x3000000000000000) != 0)
                {
                  *(_OWORD *)v1817 = *(_OWORD *)v1818;
                }
                else
                {
                  v1820 = *v1818;
                  sub_23AAAE668(*v1818, v1819);
                  *(_QWORD *)v1817 = v1820;
                  *(_QWORD *)(v1817 + 8) = v1819;
                }
                v409 = v82;
                v1821 = (v1817 + 19) & 0xFFFFFFFFFFFFFFF8;
                v1822 = ((unint64_t)v1818 + 19) & 0xFFFFFFFFFFFFFFF8;
                v1823 = *(_QWORD *)v1822;
                *(_BYTE *)(v1821 + 8) = *(_BYTE *)(v1822 + 8);
                *(_QWORD *)v1821 = v1823;
                *(_BYTE *)(v1821 + 9) = *(_BYTE *)(v1822 + 9);
                v1824 = (v1821 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                v1825 = (v1822 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                v1826 = *(_DWORD *)v1825;
                *(_BYTE *)(v1824 + 4) = *(_BYTE *)(v1825 + 4);
                *(_DWORD *)v1824 = v1826;
                v1827 = (_QWORD *)((v1821 + 25) & 0xFFFFFFFFFFFFFFF8);
                v1828 = (_QWORD *)((v1822 + 25) & 0xFFFFFFFFFFFFFFF8);
                *v1827 = *v1828;
                v1827[1] = v1828[1];
                v1829 = v2072 + v1789;
                v83 = v2072 + v1790;
                v1830 = *(_QWORD *)(v2072 + v1790 + 16);
                if (v1830 >= 0xFFFFFFFF)
                  LODWORD(v1830) = -1;
                v1831 = v1830 - 1;
                swift_bridgeObjectRetain();
                if (v1831 < 0)
                {
                  *(_QWORD *)v1829 = *(_QWORD *)v83;
                  *(_BYTE *)(v1829 + 8) = *(_BYTE *)(v83 + 8);
                  *(_BYTE *)(v1829 + 9) = *(_BYTE *)(v83 + 9);
                  v1844 = *(void **)(v83 + 16);
                  v1845 = v1844;
                  *(_QWORD *)(v1829 + 16) = v1844;
                  v1846 = *(void **)(v83 + 24);
                  v1847 = v1846;
                  *(_QWORD *)(v1829 + 24) = v1846;
                  *(_BYTE *)(v1829 + 32) = *(_BYTE *)(v83 + 32);
                  *(_BYTE *)(v1829 + 33) = *(_BYTE *)(v83 + 33);
                  *(_BYTE *)(v1829 + 34) = *(_BYTE *)(v83 + 34);
                  *(_QWORD *)(v1829 + 40) = *(_QWORD *)(v83 + 40);
                  *(_QWORD *)(v1829 + 48) = *(_QWORD *)(v83 + 48);
                  *(_QWORD *)(v1829 + 56) = *(_QWORD *)(v83 + 56);
                  *(_QWORD *)(v1829 + 64) = *(_QWORD *)(v83 + 64);
                  *(_BYTE *)(v1829 + 72) = *(_BYTE *)(v83 + 72);
                  *(_QWORD *)(v1829 + 80) = *(_QWORD *)(v83 + 80);
                  *(_QWORD *)(v1829 + 88) = *(_QWORD *)(v83 + 88);
                  v2144 = *(void **)(v83 + 96);
                  *(_QWORD *)(v1829 + 96) = v2144;
                  *(_BYTE *)(v1829 + 104) = *(_BYTE *)(v83 + 104);
                  *(_BYTE *)(v1829 + 105) = *(_BYTE *)(v83 + 105);
                  *(_QWORD *)(v1829 + 112) = *(_QWORD *)(v83 + 112);
                  *(_QWORD *)(v1829 + 120) = *(_QWORD *)(v83 + 120);
                  *(_QWORD *)(v1829 + 128) = *(_QWORD *)(v83 + 128);
                  *(_QWORD *)(v1829 + 136) = *(_QWORD *)(v83 + 136);
                  *(_QWORD *)(v1829 + 144) = *(_QWORD *)(v83 + 144);
                  *(_QWORD *)(v1829 + 152) = *(_QWORD *)(v83 + 152);
                  *(_QWORD *)(v1829 + 160) = *(_QWORD *)(v83 + 160);
                  *(_QWORD *)(v1829 + 168) = *(_QWORD *)(v83 + 168);
                  *(_BYTE *)(v1829 + 176) = *(_BYTE *)(v83 + 176);
                  *(_QWORD *)(v1829 + 184) = *(_QWORD *)(v83 + 184);
                  v1848 = *(_QWORD *)(v83 + 192);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v1849 = v2144;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v1848)
                  {
                    *(_QWORD *)(v1829 + 192) = v1848;
                    *(_QWORD *)(v1829 + 200) = *(_QWORD *)(v83 + 200);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    *(_OWORD *)(v1829 + 192) = *(_OWORD *)(v83 + 192);
                  }
                  v3 = a1;
                  v1178 = v2083;
                  v1219 = (void *)(((unint64_t)a1 + v2014) & v2117);
                  *(_QWORD *)(v1829 + 208) = *(_QWORD *)(v83 + 208);
                  *(_QWORD *)(v1829 + 216) = *(_QWORD *)(v83 + 216);
                  *(_QWORD *)(v1829 + 224) = *(_QWORD *)(v83 + 224);
                  *(_QWORD *)(v1829 + 232) = *(_QWORD *)(v83 + 232);
                  *(_QWORD *)(v1829 + 240) = *(_QWORD *)(v83 + 240);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v409 = v82;
                }
                else
                {
                  v1832 = *(_OWORD *)v83;
                  v1833 = *(_OWORD *)(v83 + 16);
                  v1834 = *(_OWORD *)(v83 + 48);
                  *(_OWORD *)(v1829 + 32) = *(_OWORD *)(v83 + 32);
                  *(_OWORD *)(v1829 + 48) = v1834;
                  *(_OWORD *)v1829 = v1832;
                  *(_OWORD *)(v1829 + 16) = v1833;
                  v1835 = *(_OWORD *)(v83 + 64);
                  v1836 = *(_OWORD *)(v83 + 80);
                  v1837 = *(_OWORD *)(v83 + 112);
                  *(_OWORD *)(v1829 + 96) = *(_OWORD *)(v83 + 96);
                  *(_OWORD *)(v1829 + 112) = v1837;
                  *(_OWORD *)(v1829 + 64) = v1835;
                  *(_OWORD *)(v1829 + 80) = v1836;
                  v1838 = *(_OWORD *)(v83 + 128);
                  v1839 = *(_OWORD *)(v83 + 144);
                  v1840 = *(_OWORD *)(v83 + 176);
                  *(_OWORD *)(v1829 + 160) = *(_OWORD *)(v83 + 160);
                  *(_OWORD *)(v1829 + 176) = v1840;
                  *(_OWORD *)(v1829 + 128) = v1838;
                  *(_OWORD *)(v1829 + 144) = v1839;
                  v1841 = *(_OWORD *)(v83 + 192);
                  v1842 = *(_OWORD *)(v83 + 208);
                  v1843 = *(_OWORD *)(v83 + 224);
                  *(_QWORD *)(v1829 + 240) = *(_QWORD *)(v83 + 240);
                  *(_OWORD *)(v1829 + 208) = v1842;
                  *(_OWORD *)(v1829 + 224) = v1843;
                  *(_OWORD *)(v1829 + 192) = v1841;
                  v1178 = v2083;
                  v1219 = (void *)(((unint64_t)a1 + v2014) & v2117);
                }
                v1964 = (_OWORD *)((v1829 + 255) & 0xFFFFFFFFFFFFFFF8);
                v1965 = (__int128 *)((v83 + 255) & 0xFFFFFFFFFFFFFFF8);
                v1966 = *v1965;
                *(_OWORD *)((char *)v1964 + 9) = *(__int128 *)((char *)v1965 + 9);
                *v1964 = v1966;
                v1967 = (v1829 + 287) & 0xFFFFFFFFFFFFFFF8;
                v1968 = (v83 + 287) & 0xFFFFFFFFFFFFFFF8;
                v1969 = *(_OWORD *)v1968;
                *(_BYTE *)(v1967 + 16) = *(_BYTE *)(v1968 + 16);
                *(_OWORD *)v1967 = v1969;
                v1970 = (_QWORD *)((v1829 + 311) & 0xFFFFFFFFFFFFF8);
                v1971 = (v83 + 311) & 0xFFFFFFFFFFFFF8;
                v1972 = *(_QWORD *)v1971;
                v1971 += 15;
                *v1970 = v1972;
                v1973 = (_QWORD *)(((unint64_t)v1970 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1974 = *(_QWORD *)(v1971 & 0xFFFFFFFFFFFFFFF8);
                v1975 = *(_QWORD *)((v1971 & 0xFFFFFFFFFFFFFFF8) + 8);
                sub_23AA7F2D4(v1974, v1975);
                *v1973 = v1974;
                v1973[1] = v1975;
                LODWORD(v83) = v1992;
                v1776 = v2075;
                v1775 = ((unint64_t)a2 + v2014) & v2117;
                if (v2059)
                {
LABEL_1965:
                  v1976 = ((((v2094
                            + 327
                            + ((((((((((v2093 + v1776) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 19) & 0xFFFFFFFFFFFFFFF8)
                              + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 16;
                  v1977 = (_QWORD *)(((unint64_t)v1219 + v1976) & 0xFFFFFFFFFFFFFFF8);
                  v1978 = (_QWORD *)((v1775 + v1976) & 0xFFFFFFFFFFFFFFF8);
                  *v1977 = *v1978;
                  v1977[1] = v1978[1];
                  *(_QWORD *)(((unint64_t)v1977 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1978
                                                                                                + 23) & 0xFFFFFFFFFFFFF8);
                  *((_BYTE *)v3 + v2029) = 3;
                  swift_bridgeObjectRetain();
                  goto LABEL_1966;
                }
LABEL_1896:
                v1776 = v2123;
                goto LABEL_1965;
              }
              v1217 = v1216;
              v1249 = (v2067 + (((unint64_t)a2 + v2014) & v2117)) & v2068;
              v1250 = (v2038 + v1249) & v2078;
              if (v2045 == v2048)
              {
                v1219 = (void *)(((unint64_t)a1 + v2014) & v2117);
                if (v2039 == v2045)
                {
                  v1218 = (*(uint64_t (**)(unint64_t))(v2060 + 48))((v2038 + v1249) & v2078);
                  goto LABEL_1894;
                }
                v1478 = (unint64_t *)((v2064 + v1250) & 0xFFFFFFFFFFFFFFF8);
                if (v2026 > 0x7FFFFFFE)
                {
                  v1218 = (*(uint64_t (**)(unint64_t))(v2054 + 48))(((unint64_t)v1478 + v2053) & v2051);
                  goto LABEL_1894;
                }
                v1479 = *v1478;
              }
              else
              {
                v1348 = v1250 + v2119;
                v1219 = (void *)(((unint64_t)a1 + v2014) & v2117);
                if ((v2024 & 0x80000000) == 0)
                {
                  v1349 = *(_QWORD *)(v1348 + 8);
                  if (v1349 >= 0xFFFFFFFF)
                    LODWORD(v1349) = -1;
                  v1218 = v1349 + 1;
                  goto LABEL_1894;
                }
                v1491 = (v2077 + ((v2120 + v1348) & v2076)) & v1214;
                if (v2059 > 0x7FFFFFFD)
                {
                  v1218 = (*(uint64_t (**)(uint64_t))(v2080 + 48))(v1491);
                  goto LABEL_1894;
                }
                v1479 = *(_QWORD *)(((v2043 + ((v2073 + v1491) & v1214)) & 0xFFFFFFFFFFFFF8) + 8);
              }
              if (v1479 >= 0xFFFFFFFF)
                LODWORD(v1479) = -1;
              if ((v1479 + 1) >= 2)
                goto LABEL_1895;
              goto LABEL_1898;
            case 4:
              (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v2124 + 16))(a1, a2, v87);
              v1199 = 0;
              v1220 = 4;
              goto LABEL_1477;
            case 5:
              (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v2124 + 16))(a1, a2, v87);
              v1199 = 0;
              v1220 = 5;
              goto LABEL_1477;
            case 6:
              (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v2124 + 16))(a1, a2, v87);
              v1221 = (void *)(((unint64_t)a1 + v2008) & v2005);
              v1222 = (const void *)(((unint64_t)a2 + v2008) & v2005);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2010 + 48))(v1222, 1, v2097))
              {
                memcpy(v1221, v1222, v2003);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v2010 + 16))(v1221, v1222, v2097);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v2010 + 56))(v1221, 0, 1, v2097);
              }
              v1178 = v2083;
              v1199 = 0;
              *((_BYTE *)a1 + v2029) = 6;
              v409 = v82;
              goto LABEL_1967;
            case 7:
              (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v2124 + 16))(a1, a2, v87);
              v1199 = 0;
              v1220 = 7;
LABEL_1477:
              *((_BYTE *)a1 + v2029) = v1220;
LABEL_1478:
              v1178 = v2083;
              goto LABEL_1967;
            default:
              if (v2029 <= 3)
                v807 = v2029;
              else
                v807 = 4;
              __asm { BR              X12 }
              return result;
          }
        case 0x1Cu:
          v412 = *((unsigned __int8 *)a2 + v2146);
          if (v412 >= 2)
          {
            if (v2146 <= 3)
              v413 = v2146;
            else
              v413 = 4;
            __asm { BR              X12 }
          }
          v808 = v412 == 1;
          if (v412 == 1)
            v809 = v88;
          else
            v809 = v2124;
          if (v412 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v809 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v808;
          *((_BYTE *)a1 + v2145) = *((_BYTE *)a2 + v2145);
          if (v83 > 3)
            goto LABEL_1104;
          v810 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v810 > 0xFFD8)
          {
            *v2083 = 28;
          }
          else if (v810 <= 0xD8)
          {
LABEL_1104:
            *(_BYTE *)v2083 = 28;
          }
          else
          {
            *(_WORD *)v2083 = 28;
          }
          return v3;
        case 0x1Du:
          v414 = *((unsigned __int8 *)a2 + v2146);
          if (v414 >= 2)
          {
            if (v2146 <= 3)
              v415 = v2146;
            else
              v415 = 4;
            __asm { BR              X12 }
          }
          v811 = v414 == 1;
          if (v414 == 1)
            v812 = v88;
          else
            v812 = v2124;
          if (v414 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v812 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v811;
          if (v83 > 3)
            goto LABEL_1115;
          v813 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v813 > 0xFFD8)
          {
            *v2083 = 29;
          }
          else if (v813 <= 0xD8)
          {
LABEL_1115:
            *(_BYTE *)v2083 = 29;
          }
          else
          {
            *(_WORD *)v2083 = 29;
          }
          return v3;
        case 0x1Eu:
          v416 = *((unsigned __int8 *)a2 + v2146);
          if (v416 >= 2)
          {
            if (v2146 <= 3)
              v417 = v2146;
            else
              v417 = 4;
            __asm { BR              X12 }
          }
          v814 = v416 == 1;
          if (v416 == 1)
            v815 = v88;
          else
            v815 = v2124;
          if (v416 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v815 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v814;
          if (v83 > 3)
            goto LABEL_1126;
          v816 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v816 > 0xFFD8)
          {
            *v2083 = 30;
          }
          else if (v816 <= 0xD8)
          {
LABEL_1126:
            *(_BYTE *)v2083 = 30;
          }
          else
          {
            *(_WORD *)v2083 = 30;
          }
          return v3;
        case 0x1Fu:
          v418 = *((unsigned __int8 *)a2 + v2146);
          if (v418 >= 2)
          {
            if (v2146 <= 3)
              v419 = v2146;
            else
              v419 = 4;
            __asm { BR              X12 }
          }
          v817 = v418 == 1;
          if (v418 == 1)
            v818 = v88;
          else
            v818 = v2124;
          if (v418 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v818 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v817;
          v819 = *(unsigned __int8 *)((((unint64_t)a2 + v2074) & v2081) + v2146);
          if (v819 >= 2)
          {
            if (v2146 <= 3)
              v820 = v2146;
            else
              v820 = 4;
            __asm { BR              X12 }
          }
          v842 = v819 == 1;
          if (v819 == 1)
            v843 = v88;
          else
            v843 = v2124;
          (*(void (**)(unint64_t))(v843 + 16))(((unint64_t)a1 + v2074) & v2081);
          *(_BYTE *)((((unint64_t)a1 + v2074) & v2081) + v2146) = v842;
          if (v83 > 3)
            goto LABEL_1221;
          v844 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v844 > 0xFFD8)
          {
            *v2083 = 31;
          }
          else if (v844 <= 0xD8)
          {
LABEL_1221:
            *(_BYTE *)v2083 = 31;
          }
          else
          {
            *(_WORD *)v2083 = 31;
          }
          return v3;
        case 0x20u:
          v420 = *((unsigned __int8 *)a2 + v2146);
          if (v420 >= 2)
          {
            if (v2146 <= 3)
              v421 = v2146;
            else
              v421 = 4;
            __asm { BR              X12 }
          }
          v821 = v420 == 1;
          if (v420 == 1)
            v822 = v88;
          else
            v822 = v2124;
          if (v420 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v822 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v821;
          if (v83 > 3)
            goto LABEL_1148;
          v823 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v823 > 0xFFD8)
          {
            *v2083 = 32;
          }
          else if (v823 <= 0xD8)
          {
LABEL_1148:
            *(_BYTE *)v2083 = 32;
          }
          else
          {
            *(_WORD *)v2083 = 32;
          }
          return v3;
        case 0x21u:
          v422 = *((unsigned __int8 *)a2 + v2146);
          if (v422 >= 2)
          {
            if (v2146 <= 3)
              v423 = v2146;
            else
              v423 = 4;
            __asm { BR              X12 }
          }
          v824 = v422 == 1;
          if (v422 == 1)
            v825 = v88;
          else
            v825 = v2124;
          if (v422 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v825 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v824;
          if (v83 > 3)
            goto LABEL_1159;
          v826 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v826 > 0xFFD8)
          {
            *v2083 = 33;
          }
          else if (v826 <= 0xD8)
          {
LABEL_1159:
            *(_BYTE *)v2083 = 33;
          }
          else
          {
            *(_WORD *)v2083 = 33;
          }
          return v3;
        case 0x22u:
          v424 = *((unsigned __int8 *)a2 + v2146);
          if (v424 >= 2)
          {
            if (v2146 <= 3)
              v425 = v2146;
            else
              v425 = 4;
            __asm { BR              X12 }
          }
          v827 = v424 == 1;
          if (v424 == 1)
            v828 = v88;
          else
            v828 = v2124;
          if (v424 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v828 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v827;
          if (v83 > 3)
            goto LABEL_1170;
          v829 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v829 > 0xFFD8)
          {
            *v2083 = 34;
          }
          else if (v829 <= 0xD8)
          {
LABEL_1170:
            *(_BYTE *)v2083 = 34;
          }
          else
          {
            *(_WORD *)v2083 = 34;
          }
          return v3;
        case 0x23u:
          v426 = *((unsigned __int8 *)a2 + v2146);
          if (v426 >= 2)
          {
            if (v2146 <= 3)
              v427 = v2146;
            else
              v427 = 4;
            __asm { BR              X12 }
          }
          v830 = v426 == 1;
          if (v426 == 1)
            v831 = v88;
          else
            v831 = v2124;
          if (v426 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v831 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v830;
          if (v83 > 3)
            goto LABEL_1181;
          v832 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v832 > 0xFFD8)
          {
            *v2083 = 35;
          }
          else if (v832 <= 0xD8)
          {
LABEL_1181:
            *(_BYTE *)v2083 = 35;
          }
          else
          {
            *(_WORD *)v2083 = 35;
          }
          return v3;
        case 0x24u:
          v428 = v87;
          v1986 = v83;
          if ((*(unsigned int (**)(_QWORD *, uint64_t))(v2124 + 48))(a2, 1))
          {
            v429 = v2035;
            memcpy(a1, a2, v2035);
          }
          else
          {
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v2124 + 16))(a1, a2, v428);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v2124 + 56))(a1, 0, 1, v428);
            v429 = v2035;
          }
          v447 = (_QWORD *)(((unint64_t)a1 + v429 + 7) & 0xFFFFFFFFFFFFF8);
          v448 = (_QWORD *)(((unint64_t)a2 + v429 + 7) & 0xFFFFFFFFFFFFFFF8);
          *v447 = *v448;
          v449 = ((unint64_t)v447 + 15) & 0xFFFFFFFFFFFFFFF8;
          v450 = ((unint64_t)v448 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v449 = *(_QWORD *)v450;
          *(_BYTE *)(v449 + 8) = *(_BYTE *)(v450 + 8);
          v451 = (char *)((v449 + v2137 + 9) & v2078);
          v452 = (const void *)((v450 + v2137 + 9) & v2078);
          if (v2039 == v2045)
          {
            v453 = (*(uint64_t (**)(unint64_t))(v2060 + 48))((v450 + v2137 + 9) & v2078);
          }
          else
          {
            v454 = (uint64_t *)(((unint64_t)v452 + v2064) & 0xFFFFFFFFFFFFFFF8);
            if (v2026 <= 0x7FFFFFFE)
            {
              v455 = *v454;
              if ((unint64_t)*v454 >= 0xFFFFFFFF)
                LODWORD(v455) = -1;
              if ((v455 + 1) >= 2)
                goto LABEL_833;
              goto LABEL_835;
            }
            v453 = (*(uint64_t (**)(unint64_t))(v2054 + 48))(((unint64_t)v454 + v2053) & v2051);
          }
          if (v453)
          {
LABEL_833:
            v579 = v2119;
            memcpy(v451, v452, v2119);
            goto LABEL_836;
          }
          v454 = (uint64_t *)(((unint64_t)v452 + v2064) & 0xFFFFFFFFFFFFFFF8);
LABEL_835:
          (*(void (**)(char *, const void *, uint64_t))(v2060 + 16))(v451, v452, v2061);
          v580 = (_QWORD *)((unint64_t)&v451[v2064] & 0xFFFFFFFFFFFFFFF8);
          *v580 = *v454;
          v581 = ((unint64_t)v580 + v2053) & v2051;
          v582 = ((unint64_t)v454 + v2053) & v2051;
          v583 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2054 + 16);
          swift_bridgeObjectRetain();
          v583(v581, v582, v2055);
          v584 = (_QWORD *)((v2049 + v581) & 0xFFFFFFFFFFFFF8);
          v585 = (_QWORD *)((v2049 + v582) & 0xFFFFFFFFFFFFF8);
          *v584 = *v585;
          v586 = (_QWORD *)(((unint64_t)v584 + 15) & 0xFFFFFFFFFFFFFFF8);
          v587 = (_QWORD *)(((unint64_t)v585 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v586 = *v587;
          v586[1] = v587[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v579 = v2119;
LABEL_836:
          v588 = (_BYTE *)(((unint64_t)v452 + v579) | 1);
          v589 = (_BYTE *)(((unint64_t)v452 + v579) | 2);
          v590 = (uint64_t)v452 + v579 + 10;
          v592 = (uint64_t)v452 + v579 + 34;
          v591 = *((_BYTE *)v452 + v579);
          v593 = (_BYTE *)((unint64_t)&v451[v579] | 1);
          v594 = (_BYTE *)((unint64_t)&v451[v579] | 2);
          v595 = (uint64_t)&v451[v579 + 10];
          v596 = &v451[v579];
          *v596 = v591;
          *v593 = *v588;
          *v594 = *v589;
          v597 = v595 & 0xFFFFFFFFFFFFFFF8;
          v598 = *(void **)(v590 & 0xFFFFFFFFFFFFFFF8);
          v599 = *(void **)((v590 & 0xFFFFFFFFFFFFFFF8) + 8);
          v600 = *(_BYTE *)((v590 & 0xFFFFFFFFFFFFFFF8) + 16);
          sub_23AAAE478(v598, v599, v600);
          *(_QWORD *)v597 = v598;
          *(_QWORD *)(v597 + 8) = v599;
          *(_BYTE *)(v597 + 16) = v600;
          v601 = (unint64_t)(v596 + 34) & 0xFFFFFFFFFFFFFFF8;
          v602 = v592 & 0xFFFFFFFFFFFFFFF8;
          v603 = *(_QWORD *)((v592 & 0xFFFFFFFFFFFFFFF8) + 16) >> 60;
          if (!(4 * (v603 & 3)) || ((v603 >> 2) & 0xFFFFFFF3 | (4 * (v603 & 3))) == 0xF)
          {
            v609 = (uint64_t *)(v602 + 8);
            *(_QWORD *)v601 = *(_QWORD *)v602;
            v610 = *(_QWORD *)(v602 + 16);
            v607 = v2122;
            if (v610 >> 60 == 15)
            {
              *(_OWORD *)(v601 + 8) = *(_OWORD *)v609;
            }
            else
            {
              v611 = *v609;
              sub_23AAAE668(*v609, *(_QWORD *)(v602 + 16));
              *(_QWORD *)(v601 + 8) = v611;
              *(_QWORD *)(v601 + 16) = v610;
            }
            v608 = a2;
            v612 = *(_OWORD *)(v602 + 24);
            *(_BYTE *)(v601 + 40) = *(_BYTE *)(v602 + 40);
            *(_OWORD *)(v601 + 24) = v612;
            *(_QWORD *)(v601 + 48) = *(_QWORD *)(v602 + 48);
          }
          else
          {
            v604 = *(_OWORD *)v602;
            v605 = *(_OWORD *)(v602 + 16);
            v606 = *(_OWORD *)(v602 + 32);
            *(_QWORD *)(v601 + 48) = *(_QWORD *)(v602 + 48);
            *(_OWORD *)(v601 + 16) = v605;
            *(_OWORD *)(v601 + 32) = v606;
            *(_OWORD *)v601 = v604;
            v607 = v2122;
            v608 = a2;
          }
          v613 = (void **)((v602 + 63) & 0xFFFFFFFFFFFFFFF8);
          v614 = *v613;
          v615 = (_QWORD *)((v601 + 63) & 0xFFFFFFFFFFFFF8);
          *v615 = *v613;
          *(_QWORD *)(((unint64_t)v615 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v613 + 15) & 0xFFFFFFFFFFFFF8);
          v616 = (void *)(((unint64_t)a1 + v2031) & v2030);
          v617 = (const void *)(((unint64_t)v608 + v2031) & v2030);
          v618 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v607 + 48);
          v619 = v614;
          if (v618(v617, 1, v92))
          {
            memcpy(v616, v617, v2015);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v607 + 16))(v616, v617, v92);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v607 + 56))(v616, 0, 1, v92);
          }
          v620 = (_QWORD *)(((unint64_t)v616 + v2032) & 0xFFFFFFFFFFFFF8);
          v621 = (_QWORD *)(((unint64_t)v617 + v2032) & 0xFFFFFFFFFFFFFFF8);
          *v620 = *v621;
          v622 = ((unint64_t)v620 + 15) & 0xFFFFFFFFFFFFFFF8;
          v623 = ((unint64_t)v621 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v622 = *(_QWORD *)v623;
          *(_BYTE *)(v622 + 8) = *(_BYTE *)(v623 + 8);
          v624 = (void *)((v2033 + v622) & v2084);
          v625 = (const void *)((v2033 + v623) & v2084);
          if (v2040 == v2046)
          {
            v626 = (*(uint64_t (**)(unint64_t))(v2062 + 48))((v2033 + v623) & v2084);
          }
          else
          {
            v627 = (uint64_t *)(((unint64_t)v625 + v2065) & 0xFFFFFFFFFFFFFFF8);
            if (v2027 <= 0x7FFFFFFE)
            {
              v628 = *v627;
              if ((unint64_t)*v627 >= 0xFFFFFFFF)
                LODWORD(v628) = -1;
              if ((v628 + 1) >= 2)
                goto LABEL_855;
              goto LABEL_857;
            }
            v626 = (*(uint64_t (**)(unint64_t))(v2057 + 48))(((unint64_t)v627 + v2056) & v2052);
          }
          if (v626)
          {
LABEL_855:
            memcpy(v624, v625, v2069);
            goto LABEL_858;
          }
          v627 = (uint64_t *)(((unint64_t)v625 + v2065) & 0xFFFFFFFFFFFFFFF8);
LABEL_857:
          (*(void (**)(void *, const void *, uint64_t))(v2062 + 16))(v624, v625, v2063);
          v629 = (_QWORD *)(((unint64_t)v624 + v2065) & 0xFFFFFFFFFFFFFFF8);
          *v629 = *v627;
          v630 = ((unint64_t)v629 + v2056) & v2052;
          v631 = ((unint64_t)v627 + v2056) & v2052;
          v632 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2057 + 16);
          swift_bridgeObjectRetain();
          v632(v630, v631, v2058);
          v633 = (_QWORD *)((v2050 + v630) & 0xFFFFFFFFFFFFF8);
          v634 = (_QWORD *)((v2050 + v631) & 0xFFFFFFFFFFFFF8);
          *v633 = *v634;
          v635 = (_QWORD *)(((unint64_t)v633 + 15) & 0xFFFFFFFFFFFFFFF8);
          v636 = (_QWORD *)(((unint64_t)v634 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v635 = *v636;
          v635[1] = v636[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_858:
          v637 = (uint64_t)v625 + v2069 + 10;
          v638 = (uint64_t)v625 + v2069 + 34;
          *((_BYTE *)v624 + v2069) = *((_BYTE *)v625 + v2069);
          v639 = (uint64_t)v624 + v2069 + 34;
          *(_BYTE *)(((unint64_t)v624 + v2069) | 1) = *(_BYTE *)(((unint64_t)v625 + v2069) | 1);
          *(_BYTE *)(((unint64_t)v624 + v2069) | 2) = *(_BYTE *)(((unint64_t)v625 + v2069) | 2);
          v640 = ((unint64_t)v624 + v2069 + 10) & 0xFFFFFFFFFFFFFFF8;
          v641 = *(void **)(v637 & 0xFFFFFFFFFFFFFFF8);
          v642 = *(void **)((v637 & 0xFFFFFFFFFFFFFFF8) + 8);
          v643 = *(_BYTE *)((v637 & 0xFFFFFFFFFFFFFFF8) + 16);
          sub_23AAAE478(v641, v642, v643);
          *(_QWORD *)v640 = v641;
          *(_QWORD *)(v640 + 8) = v642;
          *(_BYTE *)(v640 + 16) = v643;
          v644 = v639 & 0xFFFFFFFFFFFFFFF8;
          v645 = v638 & 0xFFFFFFFFFFFFFFF8;
          v646 = *(_QWORD *)((v638 & 0xFFFFFFFFFFFFFFF8) + 16) >> 60;
          if (!(4 * (v646 & 3)) || ((v646 >> 2) & 0xFFFFFFF3 | (4 * (v646 & 3))) == 0xF)
          {
            v650 = (uint64_t *)(v645 + 8);
            *(_QWORD *)v644 = *(_QWORD *)v645;
            v651 = *(_QWORD *)(v645 + 16);
            v3 = a1;
            if (v651 >> 60 == 15)
            {
              *(_OWORD *)(v644 + 8) = *(_OWORD *)v650;
            }
            else
            {
              v652 = *v650;
              sub_23AAAE668(*v650, *(_QWORD *)(v645 + 16));
              *(_QWORD *)(v644 + 8) = v652;
              *(_QWORD *)(v644 + 16) = v651;
            }
            v653 = *(_OWORD *)(v645 + 24);
            *(_BYTE *)(v644 + 40) = *(_BYTE *)(v645 + 40);
            *(_OWORD *)(v644 + 24) = v653;
            *(_QWORD *)(v644 + 48) = *(_QWORD *)(v645 + 48);
          }
          else
          {
            v647 = *(_OWORD *)v645;
            v648 = *(_OWORD *)(v645 + 16);
            v649 = *(_OWORD *)(v645 + 32);
            *(_QWORD *)(v644 + 48) = *(_QWORD *)(v645 + 48);
            *(_OWORD *)(v644 + 16) = v648;
            *(_OWORD *)(v644 + 32) = v649;
            *(_OWORD *)v644 = v647;
            v3 = a1;
          }
          v654 = (_QWORD *)((v644 + 63) & 0xFFFFFFFFFFFFF8);
          v655 = (void **)((v645 + 63) & 0xFFFFFFFFFFFFFFF8);
          v656 = *v655;
          *v654 = *v655;
          *(_QWORD *)(((unint64_t)v654 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v655 + 15) & 0xFFFFFFFFFFFFF8);
          *((_BYTE *)v616 + v2034) = *((_BYTE *)v617 + v2034);
          v657 = ((unint64_t)v616 + v2034) & 0xFFFFFFFFFFFFFFF8;
          v658 = ((unint64_t)v617 + v2034) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v657 + 8) = *(_QWORD *)(v658 + 8);
          v659 = (_OWORD *)((v657 + 23) & 0xFFFFFFFFFFFFFFF8);
          v660 = (_OWORD *)((v658 + 23) & 0xFFFFFFFFFFFFFFF8);
          *v659 = *v660;
          v661 = ((unint64_t)v659 + 23) & 0xFFFFFFFFFFFFFFF8;
          v662 = ((unint64_t)v660 + 23) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v661 = *(_QWORD *)v662;
          *(_BYTE *)(v661 + 8) = *(_BYTE *)(v662 + 8);
          *(_QWORD *)(((unint64_t)v659 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v660 + 39) & 0xFFFFFFFFFFFFF8);
          v663 = v656;
          swift_bridgeObjectRetain();
          if (v1986 > 3)
            goto LABEL_866;
          v664 = ((1 << (8 * v1986)) + 5) >> (8 * v1986);
          if (v664 > 0xFFD8)
          {
            *v2083 = 36;
            return v3;
          }
          if (v664 <= 0xD8)
LABEL_866:
            *(_BYTE *)v2083 = 36;
          else
            *(_WORD *)v2083 = 36;
          return v3;
        case 0x25u:
          v430 = *((unsigned __int8 *)a2 + v2146);
          if (v430 >= 2)
          {
            if (v2146 <= 3)
              v431 = v2146;
            else
              v431 = 4;
            __asm { BR              X12 }
          }
          v833 = v430 == 1;
          if (v430 == 1)
            v834 = v88;
          else
            v834 = v2124;
          if (v430 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v834 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v833;
          *((_BYTE *)a1 + v2145) = *((_BYTE *)a2 + v2145);
          if (v83 > 3)
            goto LABEL_1192;
          v835 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v835 > 0xFFD8)
          {
            *v2083 = 37;
          }
          else if (v835 <= 0xD8)
          {
LABEL_1192:
            *(_BYTE *)v2083 = 37;
          }
          else
          {
            *(_WORD *)v2083 = 37;
          }
          return v3;
        case 0x26u:
          v432 = *((unsigned __int8 *)a2 + v2146);
          if (v432 >= 2)
          {
            if (v2146 <= 3)
              v433 = v2146;
            else
              v433 = 4;
            __asm { BR              X12 }
          }
          v836 = v432 == 1;
          if (v432 == 1)
            v837 = v88;
          else
            v837 = v2124;
          if (v432 == 1)
            v87 = v92;
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v837 + 16))(a1, a2, v87);
          *((_BYTE *)a1 + v2146) = v836;
          if (v83 > 3)
            goto LABEL_1203;
          v838 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          if (v838 > 0xFFD8)
          {
            *v2083 = 38;
          }
          else if (v838 <= 0xD8)
          {
LABEL_1203:
            *(_BYTE *)v2083 = 38;
          }
          else
          {
            *(_WORD *)v2083 = 38;
          }
          return v3;
        default:
          if (v83 > 3)
            goto LABEL_566;
          v290 = ((1 << (8 * v83)) + 5) >> (8 * v83);
          v291 = 2;
          if (v290 > 0xFFD8)
            v291 = 4;
          if (v290 <= 0xD8)
LABEL_566:
            v291 = 1;
          memcpy(a1, a2, v291 + v83);
          return v3;
      }
    case 0x25u:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v161 = v2146;
        else
          v161 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_283;
    case 0x26u:
      v96 = *((unsigned __int8 *)a1 + v2146);
      if (v96 >= 2)
      {
        if (v2146 <= 3)
          v162 = v2146;
        else
          v162 = 4;
        __asm { BR              X12 }
      }
LABEL_283:
      v93 = v2123;
      if (v96 == 1)
      {
LABEL_284:
        v163 = *(void (**)(uint64_t, uint64_t))(v2122 + 8);
        v142 = (uint64_t)a1;
LABEL_285:
        v164 = v2118;
      }
      else
      {
LABEL_498:
        v163 = *(void (**)(uint64_t, uint64_t))(v2124 + 8);
        v142 = (uint64_t)a1;
LABEL_499:
        v164 = AssociatedTypeWitness;
      }
      v95 = AssociatedTypeWitness;
      v163(v142, v164);
LABEL_501:
      v87 = v95;
      goto LABEL_502;
    default:
      goto LABEL_503;
  }
}

