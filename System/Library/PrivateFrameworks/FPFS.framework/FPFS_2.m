char *sub_23ABA64A4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  size_t v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  size_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  unint64_t v54;
  size_t v55;
  uint64_t v56;
  size_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  int v98;
  size_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t);
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  size_t v118;
  size_t v119;
  uint64_t v120;
  int v121;
  void (*v122)(size_t, size_t, uint64_t);
  size_t v123;
  size_t v124;
  _BYTE *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v132;
  unint64_t v133;
  void *v134;
  const void *v135;
  void (*v136)(char *, char *, uint64_t);
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  size_t v146;
  size_t v147;
  uint64_t v148;
  int v149;
  void (*v150)(size_t, size_t, uint64_t);
  size_t v151;
  size_t v152;
  _BYTE *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t v161;
  void *v162;
  const void *v163;
  unsigned int v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  __int128 v178;
  unsigned int v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  size_t v209;
  unsigned int v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  unsigned int v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  size_t v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  unint64_t v232;
  unint64_t v233;
  void *v234;
  const void *v235;
  int v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  _OWORD *v247;
  _OWORD *v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  _OWORD *v267;
  __int128 *v268;
  __int128 v269;
  unint64_t v270;
  unint64_t v271;
  __int128 v272;
  _QWORD *v273;
  _QWORD *v274;
  unsigned int v275;
  _QWORD *v276;
  _QWORD *v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  _OWORD *v283;
  _OWORD *v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  _OWORD *v303;
  __int128 *v304;
  __int128 v305;
  unint64_t v306;
  unint64_t v307;
  __int128 v308;
  _QWORD *v309;
  _QWORD *v310;
  unsigned int v311;
  size_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  size_t v318;
  unint64_t v319;
  unsigned int v320;
  size_t v321;
  size_t v322;
  void (*v323)(char *, char *, uint64_t);
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  _QWORD *v328;
  _QWORD *v329;
  unint64_t v330;
  unint64_t v331;
  _QWORD *v332;
  _QWORD *v333;
  size_t v334;
  size_t v335;
  uint64_t v336;
  int v337;
  void (*v338)(size_t, size_t, uint64_t);
  size_t v339;
  size_t v340;
  _BYTE *v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  _QWORD *v346;
  _QWORD *v347;
  unint64_t v348;
  unint64_t v349;
  void *v350;
  const void *v351;
  size_t v352;
  _QWORD *v353;
  unint64_t v354;
  unint64_t v355;
  _QWORD *v356;
  _QWORD *v357;
  uint64_t v358;
  unint64_t v359;
  __int128 v360;
  unint64_t v361;
  unint64_t v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  _QWORD *v366;
  _QWORD *v367;
  void *v368;
  const void *v369;
  _QWORD *v370;
  _QWORD *v371;
  unint64_t v372;
  unint64_t v373;
  void *v374;
  const void *v375;
  int v376;
  uint64_t v377;
  uint64_t *v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  unint64_t v383;
  _QWORD *v384;
  _QWORD *v385;
  unint64_t v386;
  unint64_t v387;
  __int128 v388;
  unint64_t v389;
  unint64_t v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  _QWORD *v394;
  _QWORD *v395;
  unint64_t v396;
  unint64_t v397;
  _OWORD *v398;
  _OWORD *v399;
  unint64_t v400;
  unint64_t v401;
  unsigned int v402;
  _QWORD *v403;
  _QWORD *v404;
  unint64_t v405;
  unint64_t v406;
  uint64_t v407;
  _QWORD *v408;
  _QWORD *v409;
  _OWORD *v410;
  _OWORD *v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  _OWORD *v430;
  __int128 *v431;
  __int128 v432;
  unint64_t v433;
  unint64_t v434;
  __int128 v435;
  _QWORD *v436;
  _QWORD *v437;
  unint64_t v438;
  unint64_t v439;
  const void *v440;
  uint64_t v441;
  int v442;
  size_t v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t (*v446)(unint64_t);
  unint64_t v447;
  size_t v448;
  unint64_t v449;
  unint64_t *v450;
  unint64_t v451;
  unint64_t *v452;
  unint64_t v453;
  unint64_t *v454;
  unint64_t v455;
  BOOL v456;
  uint64_t v457;
  uint64_t v458;
  unsigned int v459;
  BOOL v460;
  uint64_t v461;
  uint64_t v462;
  unsigned int v463;
  BOOL v464;
  uint64_t v465;
  uint64_t v466;
  unsigned int v467;
  BOOL v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  uint64_t v472;
  BOOL v473;
  uint64_t v474;
  uint64_t v475;
  unsigned int v476;
  BOOL v477;
  uint64_t v478;
  uint64_t v479;
  unint64_t v480;
  unsigned __int8 *v481;
  unsigned int v482;
  size_t v483;
  _BYTE *v484;
  unsigned int v485;
  BOOL v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  unsigned __int8 *v490;
  unsigned int v491;
  size_t v492;
  _BYTE *v493;
  unsigned int v494;
  BOOL v495;
  uint64_t v496;
  uint64_t v497;
  unsigned int v498;
  int v499;
  BOOL v500;
  uint64_t v501;
  uint64_t v502;
  unsigned int v503;
  BOOL v504;
  uint64_t v505;
  uint64_t v506;
  unsigned int v507;
  BOOL v508;
  uint64_t v509;
  uint64_t v510;
  unsigned int v511;
  BOOL v512;
  uint64_t v513;
  uint64_t v514;
  unsigned int v515;
  BOOL v516;
  uint64_t v517;
  unsigned int v518;
  BOOL v519;
  uint64_t v520;
  uint64_t v521;
  unsigned int v522;
  BOOL v523;
  uint64_t v524;
  uint64_t v525;
  unsigned int v526;
  BOOL v527;
  uint64_t v528;
  uint64_t v529;
  unsigned int v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  BOOL v534;
  uint64_t v535;
  uint64_t v536;
  unsigned int v537;
  BOOL v538;
  uint64_t v539;
  uint64_t v540;
  unsigned int v541;
  BOOL v542;
  uint64_t v543;
  uint64_t v544;
  unsigned int v545;
  BOOL v546;
  uint64_t v547;
  uint64_t v548;
  unsigned int v549;
  uint64_t v550;
  BOOL v551;
  uint64_t v552;
  uint64_t v553;
  unsigned int v554;
  BOOL v555;
  uint64_t v556;
  uint64_t v557;
  unsigned int v558;
  BOOL v559;
  uint64_t v560;
  uint64_t v561;
  unsigned int v562;
  BOOL v563;
  uint64_t v564;
  uint64_t v565;
  unsigned int v566;
  BOOL v567;
  uint64_t v568;
  uint64_t v569;
  unsigned int v570;
  BOOL v571;
  uint64_t v572;
  uint64_t v573;
  unsigned int v574;
  BOOL v575;
  uint64_t v576;
  unsigned int v577;
  BOOL v578;
  uint64_t v579;
  unsigned int v580;
  unint64_t v581;
  uint64_t (*v582)(unint64_t);
  uint64_t v583;
  size_t v584;
  size_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  size_t v589;
  char *v590;
  void (*v591)(char *, char *, uint64_t);
  uint64_t v592;
  unint64_t v593;
  _QWORD *v594;
  _QWORD *v595;
  unint64_t v596;
  unint64_t v597;
  _QWORD *v598;
  _QWORD *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  int v603;
  void (*v604)(uint64_t, uint64_t, uint64_t);
  uint64_t v605;
  uint64_t v606;
  _BYTE *v607;
  unint64_t v608;
  unint64_t v609;
  unint64_t v610;
  unint64_t v611;
  _QWORD *v612;
  _QWORD *v613;
  unint64_t v614;
  unint64_t v615;
  void *v616;
  const void *v617;
  _QWORD *v618;
  _QWORD *v619;
  unint64_t v620;
  unint64_t v621;
  uint64_t v622;
  _QWORD *v623;
  _QWORD *v624;
  _OWORD *v625;
  _OWORD *v626;
  unint64_t v627;
  unint64_t v628;
  uint64_t v629;
  unint64_t v630;
  unint64_t v631;
  unint64_t v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  _OWORD *v645;
  __int128 *v646;
  __int128 v647;
  unint64_t v648;
  unint64_t v649;
  __int128 v650;
  _QWORD *v651;
  _QWORD *v652;
  uint64_t v653;
  unint64_t v654;
  const void *v655;
  int v656;
  size_t v657;
  uint64_t v658;
  void *v659;
  unint64_t v660;
  unint64_t v661;
  unint64_t v662;
  unint64_t v663;
  unint64_t *v664;
  unint64_t v665;
  uint64_t v666;
  uint64_t v667;
  void *v668;
  unint64_t v669;
  unint64_t v670;
  unint64_t v671;
  unint64_t v672;
  unint64_t v673;
  unint64_t v674;
  size_t v675;
  void (*v676)(void *, const void *, uint64_t);
  uint64_t v677;
  size_t v678;
  unint64_t v679;
  unint64_t v680;
  _QWORD *v681;
  _QWORD *v682;
  unint64_t v683;
  unint64_t v684;
  _QWORD *v685;
  _QWORD *v686;
  size_t v687;
  size_t v688;
  uint64_t v689;
  int v690;
  void (*v691)(size_t, size_t, uint64_t);
  size_t v692;
  size_t v693;
  _BYTE *v694;
  unint64_t v695;
  unint64_t v696;
  unint64_t v697;
  unint64_t v698;
  _QWORD *v699;
  _QWORD *v700;
  unint64_t v701;
  unint64_t v702;
  void *v703;
  const void *v704;
  _QWORD *v705;
  _QWORD *v706;
  unint64_t v707;
  unint64_t v708;
  uint64_t v709;
  _QWORD *v710;
  _QWORD *v711;
  _OWORD *v712;
  _OWORD *v713;
  unint64_t v714;
  unint64_t v715;
  uint64_t v716;
  unint64_t v717;
  unint64_t v718;
  size_t v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  _OWORD *v732;
  __int128 *v733;
  __int128 v734;
  unint64_t v735;
  unint64_t v736;
  __int128 v737;
  _QWORD *v738;
  _QWORD *v739;
  unint64_t v740;
  unint64_t v741;
  unsigned int v742;
  uint64_t v743;
  uint64_t v744;
  size_t v745;
  uint64_t v746;
  size_t v747;
  void (*v748)(void *, const void *, uint64_t);
  unint64_t v749;
  unint64_t v750;
  _QWORD *v751;
  _QWORD *v752;
  unint64_t v753;
  unint64_t v754;
  _QWORD *v755;
  _QWORD *v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  int v760;
  void (*v761)(uint64_t, uint64_t, uint64_t);
  uint64_t v762;
  uint64_t v763;
  _BYTE *v764;
  unint64_t v765;
  unint64_t v766;
  unint64_t v767;
  unint64_t v768;
  _QWORD *v769;
  _QWORD *v770;
  unint64_t v771;
  unint64_t v772;
  void *v773;
  const void *v774;
  _QWORD *v775;
  _QWORD *v776;
  unint64_t v777;
  unint64_t v778;
  uint64_t v779;
  _QWORD *v780;
  _QWORD *v781;
  _OWORD *v782;
  _OWORD *v783;
  unint64_t v784;
  unint64_t v785;
  uint64_t v786;
  unint64_t v787;
  unint64_t v788;
  unint64_t v789;
  __int128 v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  __int128 v801;
  _OWORD *v802;
  __int128 *v803;
  __int128 v804;
  unint64_t v805;
  unint64_t v806;
  __int128 v807;
  _QWORD *v808;
  _QWORD *v809;
  unint64_t v810;
  unint64_t v811;
  unsigned int v812;
  uint64_t v813;
  uint64_t v814;
  void (*v815)(char *, char *, uint64_t);
  void *v816;
  int v817;
  uint64_t v818;
  void *v819;
  void (*v820)(char *, char *, uint64_t);
  void *v821;
  int v822;
  uint64_t v823;
  void *v824;
  const void *v825;
  void (*v826)(char *, char *, uint64_t);
  void *v827;
  int v828;
  uint64_t v829;
  void *v830;
  char v831;
  char v832;
  void *v833;
  const void *v834;
  uint64_t v835;
  uint64_t v836;
  void (*v837)(char *);
  const void *v838;
  int v839;
  uint64_t v840;
  void *v841;
  void (*v842)(char *);
  void *v843;
  const void *v844;
  int v845;
  uint64_t v846;
  uint64_t v847;
  void *v848;
  const void *v849;
  uint64_t v850;
  void (*v851)(char *);
  const void *v852;
  int v853;
  uint64_t v854;
  void *v855;
  void *v856;
  const void *v857;
  unint64_t v858;
  unint64_t v859;
  unint64_t v860;
  uint64_t (*v861)(unint64_t);
  unint64_t v862;
  unint64_t v863;
  unint64_t v864;
  uint64_t (*v865)(unint64_t);
  unint64_t v866;
  unint64_t v867;
  unint64_t v868;
  uint64_t (*v869)(unint64_t);
  unint64_t v870;
  unint64_t v871;
  unint64_t v872;
  unint64_t v873;
  unint64_t v874;
  unint64_t v875;
  unint64_t v876;
  char *v877;
  char *v878;
  int v879;
  uint64_t *v880;
  uint64_t v881;
  char *v882;
  char *v883;
  int v884;
  uint64_t *v885;
  uint64_t v886;
  uint64_t v887;
  unint64_t v888;
  unint64_t v889;
  size_t v890;
  unint64_t v891;
  size_t v892;
  unint64_t v893;
  size_t v894;
  unint64_t v895;
  size_t v896;
  unint64_t v897;
  size_t v898;
  unint64_t v899;
  size_t v900;
  unint64_t v901;
  size_t v902;
  _QWORD *v903;
  unint64_t v904;
  unint64_t v905;
  _QWORD *v906;
  _QWORD *v907;
  char *v908;
  unint64_t v909;
  uint64_t v910;
  _QWORD *v911;
  unint64_t v912;
  unint64_t v913;
  _QWORD *v914;
  _QWORD *v915;
  char *v916;
  unint64_t *v917;
  unint64_t v918;
  unint64_t *v919;
  unint64_t v920;
  unint64_t *v921;
  unint64_t v922;
  unint64_t *v923;
  unint64_t v924;
  unint64_t *v925;
  unint64_t v926;
  unint64_t *v927;
  unint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  unint64_t v932;
  size_t v933;
  uint64_t v934;
  unint64_t v935;
  unint64_t v936;
  _QWORD *v937;
  _QWORD *v938;
  unint64_t v939;
  unint64_t v940;
  _QWORD *v941;
  _QWORD *v942;
  size_t v943;
  size_t v944;
  uint64_t v945;
  int v946;
  void (*v947)(size_t, size_t, uint64_t);
  size_t v948;
  size_t v949;
  _BYTE *v950;
  unint64_t v951;
  unint64_t v952;
  unint64_t v953;
  unint64_t v954;
  _QWORD *v955;
  _QWORD *v956;
  unint64_t v957;
  unint64_t v958;
  void *v959;
  const void *v960;
  _QWORD *v961;
  _QWORD *v962;
  unint64_t v963;
  unint64_t v964;
  uint64_t v965;
  _QWORD *v966;
  _QWORD *v967;
  _OWORD *v968;
  _OWORD *v969;
  unint64_t v970;
  unint64_t v971;
  uint64_t v972;
  unint64_t v973;
  unint64_t v974;
  size_t v975;
  __int128 v976;
  __int128 v977;
  __int128 v978;
  __int128 v979;
  __int128 v980;
  __int128 v981;
  __int128 v982;
  __int128 v983;
  __int128 v984;
  __int128 v985;
  __int128 v986;
  __int128 v987;
  _OWORD *v988;
  __int128 *v989;
  __int128 v990;
  unint64_t v991;
  unint64_t v992;
  __int128 v993;
  _QWORD *v994;
  _QWORD *v995;
  unint64_t v996;
  _QWORD *v997;
  _QWORD *v998;
  uint64_t v999;
  unint64_t v1000;
  uint64_t v1001;
  unint64_t v1002;
  uint64_t v1003;
  size_t v1004;
  uint64_t v1005;
  unint64_t v1006;
  unint64_t v1007;
  _QWORD *v1008;
  _QWORD *v1009;
  unint64_t v1010;
  unint64_t v1011;
  _QWORD *v1012;
  _QWORD *v1013;
  size_t v1014;
  size_t v1015;
  uint64_t v1016;
  int v1017;
  void (*v1018)(size_t, size_t, uint64_t);
  size_t v1019;
  size_t v1020;
  _BYTE *v1021;
  unint64_t v1022;
  unint64_t v1023;
  unint64_t v1024;
  unint64_t v1025;
  _QWORD *v1026;
  _QWORD *v1027;
  unint64_t v1028;
  unint64_t v1029;
  void *v1030;
  const void *v1031;
  _QWORD *v1032;
  _QWORD *v1033;
  unint64_t v1034;
  unint64_t v1035;
  uint64_t v1036;
  _QWORD *v1037;
  _QWORD *v1038;
  _OWORD *v1039;
  _OWORD *v1040;
  unint64_t v1041;
  unint64_t v1042;
  uint64_t v1043;
  unint64_t v1044;
  unint64_t v1045;
  size_t v1046;
  __int128 v1047;
  __int128 v1048;
  __int128 v1049;
  __int128 v1050;
  __int128 v1051;
  __int128 v1052;
  __int128 v1053;
  __int128 v1054;
  __int128 v1055;
  __int128 v1056;
  __int128 v1057;
  __int128 v1058;
  _OWORD *v1059;
  __int128 *v1060;
  __int128 v1061;
  unint64_t v1062;
  unint64_t v1063;
  __int128 v1064;
  _QWORD *v1065;
  _QWORD *v1066;
  unint64_t v1067;
  void *v1068;
  const void *v1069;
  char *v1070;
  char *v1071;
  int v1072;
  uint64_t *v1073;
  uint64_t v1074;
  size_t v1075;
  _QWORD *v1076;
  unint64_t v1077;
  unint64_t v1078;
  _QWORD *v1079;
  _QWORD *v1080;
  _QWORD *v1081;
  _QWORD *v1082;
  unint64_t v1083;
  size_t v1084;
  uint64_t v1085;
  unint64_t v1086;
  unint64_t v1087;
  _QWORD *v1088;
  _QWORD *v1089;
  unint64_t v1090;
  unint64_t v1091;
  _QWORD *v1092;
  _QWORD *v1093;
  size_t v1094;
  size_t v1095;
  uint64_t v1096;
  int v1097;
  void (*v1098)(size_t, size_t, uint64_t);
  size_t v1099;
  size_t v1100;
  _BYTE *v1101;
  unint64_t v1102;
  unint64_t v1103;
  unint64_t v1104;
  unint64_t v1105;
  _QWORD *v1106;
  _QWORD *v1107;
  unint64_t v1108;
  unint64_t v1109;
  void *v1110;
  const void *v1111;
  _QWORD *v1112;
  _QWORD *v1113;
  unint64_t v1114;
  unint64_t v1115;
  uint64_t v1116;
  _QWORD *v1117;
  _QWORD *v1118;
  _OWORD *v1119;
  _OWORD *v1120;
  unint64_t v1121;
  unint64_t v1122;
  uint64_t v1123;
  unint64_t v1124;
  unint64_t v1125;
  size_t v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  __int128 v1135;
  __int128 v1136;
  __int128 v1137;
  __int128 v1138;
  _OWORD *v1139;
  __int128 *v1140;
  __int128 v1141;
  unint64_t v1142;
  unint64_t v1143;
  __int128 v1144;
  _QWORD *v1145;
  _QWORD *v1146;
  unint64_t v1147;
  _OWORD *v1148;
  _OWORD *v1149;
  size_t v1150;
  unint64_t v1151;
  _QWORD *v1152;
  _QWORD *v1153;
  unint64_t v1154;
  unint64_t v1155;
  _QWORD *v1156;
  _QWORD *v1157;
  size_t v1158;
  size_t v1159;
  uint64_t v1160;
  int v1161;
  void (*v1162)(size_t, size_t, uint64_t);
  size_t v1163;
  size_t v1164;
  _BYTE *v1165;
  unint64_t v1166;
  unint64_t v1167;
  unint64_t v1168;
  unint64_t v1169;
  _QWORD *v1170;
  _QWORD *v1171;
  unint64_t v1172;
  unint64_t v1173;
  void *v1174;
  const void *v1175;
  _QWORD *v1176;
  _QWORD *v1177;
  unint64_t v1178;
  unint64_t v1179;
  uint64_t v1180;
  _QWORD *v1181;
  _QWORD *v1182;
  _OWORD *v1183;
  _OWORD *v1184;
  unint64_t v1185;
  unint64_t v1186;
  uint64_t v1187;
  unint64_t v1188;
  unint64_t v1189;
  unint64_t v1190;
  __int128 v1191;
  __int128 v1192;
  __int128 v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  __int128 v1200;
  __int128 v1201;
  __int128 v1202;
  _OWORD *v1203;
  __int128 *v1204;
  __int128 v1205;
  unint64_t v1206;
  unint64_t v1207;
  __int128 v1208;
  _QWORD *v1209;
  _QWORD *v1210;
  unint64_t v1211;
  _QWORD *v1212;
  _QWORD *v1213;
  uint64_t v1214;
  size_t v1215;
  unint64_t v1216;
  _QWORD *v1217;
  _QWORD *v1218;
  unint64_t v1219;
  unint64_t v1220;
  _QWORD *v1221;
  _QWORD *v1222;
  size_t v1223;
  size_t v1224;
  uint64_t v1225;
  int v1226;
  void (*v1227)(size_t, size_t, uint64_t);
  size_t v1228;
  size_t v1229;
  _BYTE *v1230;
  unint64_t v1231;
  unint64_t v1232;
  unint64_t v1233;
  unint64_t v1234;
  _QWORD *v1235;
  _QWORD *v1236;
  unint64_t v1237;
  unint64_t v1238;
  void *v1239;
  const void *v1240;
  _QWORD *v1241;
  _QWORD *v1242;
  unint64_t v1243;
  unint64_t v1244;
  uint64_t v1245;
  _QWORD *v1246;
  _QWORD *v1247;
  _OWORD *v1248;
  _OWORD *v1249;
  unint64_t v1250;
  unint64_t v1251;
  uint64_t v1252;
  unint64_t v1253;
  unint64_t v1254;
  unint64_t v1255;
  __int128 v1256;
  __int128 v1257;
  __int128 v1258;
  __int128 v1259;
  __int128 v1260;
  __int128 v1261;
  __int128 v1262;
  __int128 v1263;
  __int128 v1264;
  __int128 v1265;
  __int128 v1266;
  __int128 v1267;
  _OWORD *v1268;
  __int128 *v1269;
  __int128 v1270;
  unint64_t v1271;
  unint64_t v1272;
  __int128 v1273;
  _QWORD *v1274;
  _QWORD *v1275;
  unint64_t v1276;
  void *v1277;
  const void *v1278;
  char *v1279;
  char *v1280;
  int v1281;
  uint64_t v1282;
  uint64_t *v1283;
  uint64_t v1284;
  unint64_t v1285;
  uint64_t v1286;
  _QWORD *v1287;
  unint64_t v1288;
  unint64_t v1289;
  _QWORD *v1290;
  _QWORD *v1291;
  _QWORD *v1292;
  _QWORD *v1293;
  size_t v1294;
  unint64_t v1295;
  _QWORD *v1296;
  _QWORD *v1297;
  unint64_t v1298;
  unint64_t v1299;
  _QWORD *v1300;
  _QWORD *v1301;
  size_t v1302;
  size_t v1303;
  uint64_t v1304;
  int v1305;
  void (*v1306)(size_t, size_t, uint64_t);
  size_t v1307;
  size_t v1308;
  _BYTE *v1309;
  unint64_t v1310;
  unint64_t v1311;
  unint64_t v1312;
  unint64_t v1313;
  _QWORD *v1314;
  _QWORD *v1315;
  unint64_t v1316;
  unint64_t v1317;
  void *v1318;
  const void *v1319;
  _QWORD *v1320;
  _QWORD *v1321;
  unint64_t v1322;
  unint64_t v1323;
  uint64_t v1324;
  _QWORD *v1325;
  _QWORD *v1326;
  _OWORD *v1327;
  _OWORD *v1328;
  unint64_t v1329;
  unint64_t v1330;
  uint64_t v1331;
  unint64_t v1332;
  unint64_t v1333;
  unint64_t v1334;
  __int128 v1335;
  __int128 v1336;
  __int128 v1337;
  __int128 v1338;
  __int128 v1339;
  __int128 v1340;
  __int128 v1341;
  __int128 v1342;
  __int128 v1343;
  __int128 v1344;
  __int128 v1345;
  __int128 v1346;
  _OWORD *v1347;
  __int128 *v1348;
  __int128 v1349;
  unint64_t v1350;
  unint64_t v1351;
  __int128 v1352;
  _QWORD *v1353;
  _QWORD *v1354;
  unint64_t v1355;
  _OWORD *v1356;
  _OWORD *v1357;
  unsigned int v1358;
  char *result;
  unint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  size_t v1368;
  size_t v1369;
  unint64_t v1370;
  size_t v1371;
  size_t v1372;
  size_t v1373;
  unint64_t v1374;
  unint64_t v1375;
  uint64_t v1376;
  unint64_t v1377;
  size_t v1378;
  size_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  unint64_t v1385;
  unint64_t v1386;
  size_t v1387;
  unsigned int v1388;
  unsigned int v1389;
  unsigned int v1390;
  size_t v1391;
  unsigned int v1392;
  unint64_t v1393;
  unsigned int v1394;
  unint64_t v1395;
  size_t v1396;
  uint64_t v1397;
  size_t v1398;
  unint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  unsigned int v1402;
  unsigned int v1403;
  unsigned int v1404;
  unint64_t v1405;
  unint64_t v1406;
  unint64_t v1407;
  unint64_t v1408;
  unint64_t v1409;
  unint64_t v1410;
  unint64_t v1411;
  unint64_t v1412;
  uint64_t v1413;
  unsigned int v1414;
  unsigned int v1415;
  unsigned int v1416;
  uint64_t v1417;
  unsigned int v1418;
  uint64_t v1419;
  uint64_t v1420;
  unint64_t v1421;
  unsigned int v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  size_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  size_t v1437;
  unint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  unint64_t v1442;
  uint64_t v1443;
  size_t v1444;
  uint64_t v1445;
  size_t __n;
  uint64_t AssociatedTypeWitness;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  unsigned int v1456;
  uint64_t v1457;
  uint64_t v1458;
  unint64_t v1459;
  uint64_t v1460;
  unint64_t v1461;
  uint64_t v1462;
  unint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  unint64_t v1472;
  uint64_t v1474;
  unint64_t v1475;
  unint64_t v1476;
  unint64_t v1477;
  uint64_t v1478;
  unint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  unint64_t v1482;
  unint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  void *v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  unsigned int v1493;
  uint64_t v1494;
  uint64_t v1495;
  uint64_t v1496;
  size_t v1498;
  size_t v1499;
  void *v1500;
  void *v1501;
  void *v1502;
  uint64_t v1503;
  size_t v1504;
  void *v1505;
  void *v1506;
  void *v1507;
  unint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;

  v4 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v1469 = *(_QWORD *)(a3 + 24);
  v1448 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v1448 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v1413 = v6 + v8;
  v1461 = (v6 + v8) & ~v8;
  v9 = *(_QWORD *)(v7 + 64);
  v1479 = v9;
  v10 = v1461 + v9;
  v1476 = v1461 + v9;
  if (v9 <= v6)
    v9 = v6;
  v11 = v9 + 1;
  v1504 = v9 + 1;
  if (v9 + 1 > v10)
    v10 = v9 + 1;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v1463 = v9;
  v1466 = v12 | v8;
  v1442 = (v12 | v8) + v11;
  v1477 = (v1442 & ~(v12 | v8)) + v11;
  if (v1477 > v10)
    v10 = (v1442 & ~(v12 | v8)) + v11;
  v1475 = v10;
  v1449 = v5;
  v13 = *(_DWORD *)(v5 + 84);
  v1470 = v4;
  v1429 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v1429 - 8);
  v15 = *(_DWORD *)(v14 + 84);
  v1425 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v1425 - 8);
  v17 = *(_DWORD *)(v16 + 84);
  v1388 = v17;
  v1403 = v15;
  if (v15 > v17)
    v17 = v15;
  v1392 = v17;
  if (v17 <= 0x7FFFFFFE)
    v17 = 2147483646;
  v1493 = v13;
  v1418 = v17;
  if (v17 <= v13)
    v18 = v13;
  else
    v18 = v17;
  v1441 = sub_23B1C5BDC();
  v19 = *(_QWORD *)(v1441 - 8);
  v20 = *(_DWORD *)(v19 + 84);
  if (v20 <= 0x7FFFFFFE)
    v21 = 2147483646;
  else
    v21 = *(_DWORD *)(v19 + 84);
  v1456 = v21;
  if (v18 > v21)
    v21 = v18;
  v1390 = v21;
  if (v21 <= 0x7FFFFFFF)
    v21 = 0x7FFFFFFF;
  v1416 = v21;
  v1414 = *(_DWORD *)(v19 + 84);
  v1483 = v6;
  v1435 = v6 + v12;
  v1471 = v12;
  v22 = *(unsigned __int8 *)(v16 + 80);
  v23 = *(_DWORD *)(v14 + 80) & 0xF8 | v22 | 7;
  v1401 = v6 + v23;
  v1458 = v23;
  v1428 = v14;
  v1433 = *(_QWORD *)(v14 + 64) + 7;
  v1423 = v22 + 8;
  v1424 = v16;
  v1452 = v22;
  v1419 = *(_QWORD *)(v16 + 64) + 7;
  v24 = *(unsigned __int8 *)(v19 + 80);
  v1509 = v24 | 7;
  v1499 = ((((v1419 + ((v22 + 8 + (v1433 & 0xFFFFFFFFFFFFFFF8)) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  v1503 = (v24 | 7) + 16;
  v1443 = v24 + 12;
  v1445 = *(_QWORD *)(v1441 - 8);
  v25 = *(_QWORD *)(v19 + 64);
  v1440 = v25 + v24;
  v1387 = v25 + 12;
  v1436 = v24 + 10;
  v1444 = v25;
  if (v20)
    v26 = *(_QWORD *)(v19 + 64);
  else
    v26 = v25 + 1;
  __n = v26;
  v1437 = v26 + 7;
  v1421 = (v24
         + 10
         + ((((((v25 + 12 + ((v25 + v24 + ((v24 + 12) & ~v24)) & ~v24)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v24;
  v27 = ((((((((((v26 + 7 + v1421) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v1417 = (v1503 + ((v6 + v23 + ((v6 + v12) & ~v12)) & ~v23) + v1499) & ~(v24 | 7);
  v28 = (((v1417 + v27 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v1498 = v28 + 16;
  v29 = v23 | v12 | v24;
  v1406 = v28 + 23;
  v1459 = ((v28 + 23 + ((v28 + 16 + v29) & ~v29)) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1450 = v7;
  v30 = *(_DWORD *)(v7 + 84);
  v1431 = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(v1431 - 8);
  v32 = *(_DWORD *)(v31 + 84);
  v1426 = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(v1426 - 8);
  v34 = *(_DWORD *)(v33 + 84);
  v1404 = v32;
  if (v32 > v34)
    v34 = v32;
  v1394 = v34;
  if (v34 <= 0x7FFFFFFE)
    v34 = 2147483646;
  v1422 = v34;
  if (v34 <= v30)
    v34 = v30;
  if (v34 <= v1456)
    v34 = v1456;
  v1389 = v34;
  if (v34 <= 0x7FFFFFFF)
    v34 = 0x7FFFFFFF;
  v1415 = v34;
  v1434 = v1479 + v8;
  v35 = *(unsigned __int8 *)(v33 + 80);
  v36 = *(_DWORD *)(v31 + 80) & 0xF8 | v35 | 7;
  v1400 = v1479 + v36;
  v1430 = v31;
  v1439 = *(_QWORD *)(v31 + 64) + 7;
  v1432 = v35 + 8;
  v1420 = *(_QWORD *)(v33 + 64) + 7;
  v37 = ((((v1420 + ((v35 + 8 + (v1439 & 0xFFFFFFFFFFFFFFF8)) & ~v35)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v1438 = v27;
  v1399 = (v1503 + ((v1479 + v36 + ((v1479 + v8) & ~v8)) & ~v36) + v37) & ~v1509;
  v38 = (((v1399 + v27 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v39 = v38 + 16;
  v40 = v36 | v8;
  v1451 = v24;
  v41 = v36 | v8 | v24;
  v42 = v38 + ((v38 + 16 + v41) & ~v41);
  v1474 = v29;
  v1386 = v29 + v6;
  v43 = v1498 + ((v29 + v6) & ~v29);
  v44 = (v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v45 = ((v44 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1457 = v8;
  v46 = (v43 + v8) & ~v8;
  v1402 = v30;
  if (v30)
    v47 = v1479;
  else
    v47 = v1479 + 1;
  v48 = v47 + v36;
  v49 = ((((((v47 + v36 + v46) & ~v36) + v37 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v50 = ((v44 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v51 = *(_QWORD *)(v1470 - 8);
  v52 = *(unsigned __int8 *)(v51 + 80);
  v1383 = v51;
  v53 = *(_QWORD *)(v51 + 64);
  if (!*(_DWORD *)(v51 + 84))
    ++v53;
  if (v6 > v45)
    v45 = v6;
  if (v49 <= v37 + ((v47 + v36 + v1461) & ~v36) + 16)
    v49 = v37 + ((v47 + v36 + v1461) & ~v36) + 16;
  v1382 = v6 + v52;
  v1379 = v53;
  if (v50 <= ((v6 + v52) & ~v52) + v53)
    v50 = ((v6 + v52) & ~v52) + v53;
  if (v45 <= v49)
    v45 = v49;
  if (v45 <= v50)
    v54 = v50;
  else
    v54 = v45;
  if (v13)
    v55 = v6;
  else
    v55 = v6 + 1;
  v56 = *(_QWORD *)(v1469 - 8);
  v1462 = v41;
  v1385 = v41 + v1479;
  v57 = v39 + ((v41 + v1479) & ~v41);
  v58 = (v57 + 7) & 0xFFFFFFFFFFFFFFF8;
  v59 = ((v58 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v60 = ((((((v55 + v1458 + ((v57 + v12) & ~v12)) & ~v1458) + v1499 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v1381 = v1479 + v12;
  v1384 = v55 + v1458;
  v61 = v1499 + ((v55 + v1458 + ((v1479 + v12) & ~v12)) & ~v1458) + 16;
  if (*(_DWORD *)(v56 + 84))
    v62 = *(_QWORD *)(v56 + 64);
  else
    v62 = *(_QWORD *)(v56 + 64) + 1;
  if (v1479 > v59)
    v59 = v1479;
  if (v60 > v61)
    v61 = v60;
  v63 = ((v58 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v64 = *(unsigned __int8 *)(v56 + 80);
  v1380 = v1479 + v64;
  v1378 = v62;
  if (v63 <= ((v1479 + v64) & ~v64) + v62)
    v63 = ((v1479 + v64) & ~v64) + v62;
  if (v59 <= v61)
    v59 = v61;
  if (v59 <= v63)
    v59 = v63;
  v1393 = v59;
  v65 = v59 + 1;
  if (v65 <= v54 + 1)
    v66 = v54 + 1;
  else
    v66 = v65;
  if (v1504 > v1463 + 2)
    v67 = v1463 + 1;
  else
    v67 = v1463 + 2;
  if (v67 <= v1459)
    v67 = v1459;
  v68 = v1458;
  v1398 = v55;
  v1391 = v47;
  v1395 = ((((((((v1458 + ((((v55 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v1458) + v1499 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + v40
        + 8;
  v1396 = v47 + 7;
  v1397 = v36 + 9;
  v69 = v36;
  v70 = ((((((((v36 + 9 + ((((v47 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v36) + v37 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v1405 = ((v42 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v67 <= v1405)
    v71 = ((v42 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v71 = v67;
  if (v71 <= v1498)
    v71 = v1498;
  if (v71 <= v39)
    v71 = v39;
  if (v71 <= v1477 + 2)
    v71 = v1477 + 2;
  if (v71 <= ((v1463 + 9) & 0xFFFFFFFFFFFFFFF8) + 8)
    v71 = ((v1463 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v71 <= (v1463 & 0xFFFFFFFFFFFFFFF8) + 16)
    v71 = (v1463 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v71 <= v1476)
    v71 = v1476;
  if (v71 <= ((v1466 + 1) & ~v1466) + v1504)
    v71 = ((v1466 + 1) & ~v1466) + v1504;
  if (v71 <= v66 + 1)
    v71 = v66 + 1;
  if (v71 <= v1477)
    v71 = v1477;
  if (v71 <= ((((v70 + (v1395 & ~v40) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8)
    v71 = ((((v70 + (v1395 & ~v40) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v71 <= v1475)
    v71 = v1475;
  if (v71 <= 0x38)
    v72 = 56;
  else
    v72 = v71;
  v1411 = ((v1466 + 1) & ~v1466) + v1504;
  v1412 = ((((v70 + (v1395 & ~v40) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1409 = ((v1463 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1410 = (v1463 & 0xFFFFFFFFFFFFFFF8) + 16;
  v1408 = v66 + 1;
  if (v72 > 3)
    goto LABEL_105;
  v73 = ((1 << (8 * v72)) + 5) >> (8 * v72);
  if (v73 > 0xFFD8)
  {
    v74 = *(_DWORD *)&a2[v72];
  }
  else
  {
    if (v73 <= 0xD8)
    {
LABEL_105:
      v74 = a2[v72];
      goto LABEL_108;
    }
    v74 = *(unsigned __int16 *)&a2[v72];
  }
LABEL_108:
  if (v74 >= 0x27)
  {
    if (v72 <= 3)
      v75 = v72;
    else
      v75 = 4;
    __asm { BR              X15 }
  }
  v1376 = *(_QWORD *)(v1469 - 8);
  v1377 = ((((((((v36 + 9 + ((((v47 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v36) + v37 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  v1427 = v39;
  v1460 = v72;
  v1407 = v1463 + 2;
  v76 = ~v8;
  v77 = ~v1466;
  v78 = ~v1471;
  v79 = ~v1458;
  v80 = ~v1452;
  v81 = ~v1509;
  v82 = ~v36;
  switch(v74)
  {
    case 0u:
      v83 = a1;
      (*(void (**)(char *, char *, uint64_t))(v1449 + 32))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1450 + 32))((unint64_t)&a1[v1413] & v76, (unint64_t)&a2[v1413] & v76, v1448);
      if (v1460 > 3)
        goto LABEL_115;
      v214 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v214 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 0;
      }
      else if (v214 <= 0xD8)
      {
LABEL_115:
        a1[v1460] = 0;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 0;
      }
      return v83;
    case 1u:
      v86 = a2[v1463];
      if (v86 >= 2)
      {
        if (v1463 <= 3)
          v87 = v1463;
        else
          v87 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v456 = v86 == 1;
      if (v86 == 1)
        v457 = v1450;
      else
        v457 = v1449;
      if (v86 == 1)
        v458 = v1448;
      else
        v458 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v457 + 32))(a1, a2, v458);
      a1[v1463] = v456;
      if (v1460 > 3)
        goto LABEL_427;
      v459 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v459 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 1;
      }
      else if (v459 <= 0xD8)
      {
LABEL_427:
        a1[v1460] = 1;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 1;
      }
      return v83;
    case 2u:
      v88 = a2[v1463];
      if (v88 >= 2)
      {
        if (v1463 <= 3)
          v89 = v1463;
        else
          v89 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v460 = v88 == 1;
      if (v88 == 1)
        v461 = v1450;
      else
        v461 = v1449;
      if (v88 == 1)
        v462 = v1448;
      else
        v462 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v461 + 32))(a1, a2, v462);
      a1[v1463] = v460;
      if (v1460 > 3)
        goto LABEL_439;
      v463 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v463 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 2;
      }
      else if (v463 <= 0xD8)
      {
LABEL_439:
        a1[v1460] = 2;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 2;
      }
      return v83;
    case 3u:
      v90 = a2[v1463];
      if (v90 >= 2)
      {
        if (v1463 <= 3)
          v91 = v1463;
        else
          v91 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v464 = v90 == 1;
      if (v90 == 1)
        v465 = v1450;
      else
        v465 = v1449;
      if (v90 == 1)
        v466 = v1448;
      else
        v466 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v465 + 32))(a1, a2, v466);
      a1[v1463] = v464;
      if (v1460 > 3)
        goto LABEL_451;
      v467 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v467 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 3;
      }
      else if (v467 <= 0xD8)
      {
LABEL_451:
        a1[v1460] = 3;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 3;
      }
      return v83;
    case 4u:
      v92 = a2[v1463];
      if (v92 >= 2)
      {
        if (v1463 <= 3)
          v93 = v1463;
        else
          v93 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v468 = v92 == 1;
      if (v92 == 1)
        v469 = v1450;
      else
        v469 = v1449;
      if (v92 == 1)
        v470 = v1448;
      else
        v470 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v469 + 32))(a1, a2, v470);
      a1[v1463] = v468;
      v471 = *(unsigned __int8 *)(((unint64_t)&a2[v1442] & v77) + v1463);
      if (v471 >= 2)
      {
        if (v1463 <= 3)
          v472 = v1463;
        else
          v472 = 4;
        __asm { BR              X12 }
      }
      v575 = v471 == 1;
      if (v471 == 1)
        v576 = v1450;
      else
        v576 = v1449;
      (*(void (**)(unint64_t))(v576 + 32))((unint64_t)&a1[v1442] & ~v1466);
      *(_BYTE *)(((unint64_t)&a1[v1442] & v77) + v1463) = v575;
      if (v1460 > 3)
        goto LABEL_754;
      v577 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v577 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 4;
      }
      else if (v577 <= 0xD8)
      {
LABEL_754:
        a1[v1460] = 4;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 4;
      }
      return v83;
    case 5u:
      v94 = ~v1451;
      v1480 = ~v1471;
      v1464 = ~v1458;
      v1510 = ~v1509;
      v1453 = ~v1451;
      v1362 = v80;
      if (v1493 == v1416)
      {
        v95 = v1449;
        v96 = a2;
        v97 = AssociatedTypeWitness;
        v98 = (*(uint64_t (**)(char *))(v1449 + 48))(a2);
        v68 = v1458;
        v99 = v1499;
        v83 = a1;
        v100 = v1483;
LABEL_776:
        if (v98)
        {
LABEL_777:
          v584 = v99;
          memcpy(v83, v96, v1498);
          v585 = __n;
          v586 = v1445;
          v587 = v1474;
          v588 = ~v1474;
LABEL_778:
          v589 = v585;
          goto LABEL_784;
        }
        v215 = (unint64_t)&v96[v1435] & v1480;
        v216 = (v215 + v100 + v68) & v1464;
LABEL_780:
        v590 = v96;
        v591 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
        v592 = v68;
        v591(v83, v590, v97);
        v591((char *)((unint64_t)&v83[v1435] & v1480), (char *)v215, v97);
        v593 = (((unint64_t)&v83[v1435] & v1480) + v100 + v592) & v1464;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1428 + 32))(v593, v216, v1429);
        v594 = (_QWORD *)((v1433 + v593) & 0xFFFFFFFFFFFFFFF8);
        v595 = (_QWORD *)((v1433 + v216) & 0xFFFFFFFFFFFFFFF8);
        *v594 = *v595;
        v596 = ((unint64_t)v594 + v1423) & v1362;
        v597 = ((unint64_t)v595 + v1423) & v1362;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1424 + 32))(v596, v597, v1425);
        v598 = (_QWORD *)((v1419 + v597) & 0xFFFFFFFFFFFFF8);
        v599 = (_QWORD *)((v1419 + v596) & 0xFFFFFFFFFFFFF8);
        *v599 = *v598;
        *(_OWORD *)(((unint64_t)v599 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v598 + 15) & 0xFFFFFFFFFFFFF8);
        *(_OWORD *)(v99 + v593) = *(_OWORD *)(v99 + v216);
        v600 = (v1503 + v99 + v593) & v1510;
        v601 = (v1503 + v99 + v216) & v1510;
        *(_BYTE *)v600 = *(_BYTE *)v601;
        v602 = v600 | 4;
        v603 = *(_DWORD *)(v601 | 4);
        *(_BYTE *)(v602 + 4) = *(_BYTE *)((v601 | 4) + 4);
        *(_DWORD *)v602 = v603;
        *(_WORD *)(v600 + 10) = *(_WORD *)(v601 + 0xA);
        v586 = v1445;
        v604 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1445 + 32);
        v604((v1443 + v600) & v94, (v1443 + v601) & v94, v1441);
        v605 = (v1440 + ((v1443 + v600) & v94)) & v94;
        v606 = (v1440 + ((v1443 + v601) & v94)) & v94;
        v604(v605, v606, v1441);
        v607 = (_BYTE *)(v605 + v1444);
        *v607 = *(_BYTE *)(v606 + v1444);
        v607[1] = *(_BYTE *)(v606 + v1444 + 1);
        v607[2] = *(_BYTE *)(v606 + v1444 + 2);
        v607[3] = *(_BYTE *)(v606 + v1444 + 3);
        v607[4] = *(_BYTE *)(v606 + v1444 + 4);
        v608 = (v605 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
        v609 = (v606 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)v608 = *(_OWORD *)v609;
        *(_BYTE *)(v608 + 16) = *(_BYTE *)(v609 + 16);
        *(_BYTE *)(v608 + 17) = *(_BYTE *)(v609 + 17);
        *(_BYTE *)(v608 + 18) = *(_BYTE *)(v609 + 18);
        *(_BYTE *)(v608 + 19) = *(_BYTE *)(v609 + 19);
        v610 = (v608 + 27) & 0xFFFFFFFFFFFFFFF8;
        v611 = (v609 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v610 = *(_QWORD *)v611;
        *(_BYTE *)(v610 + 8) = *(_BYTE *)(v611 + 8);
        *(_BYTE *)(v610 + 9) = *(_BYTE *)(v611 + 9);
        *(_BYTE *)(v610 + 10) = *(_BYTE *)(v611 + 10);
        *(_BYTE *)(v610 + 11) = *(_BYTE *)(v611 + 11);
        *(_BYTE *)(v610 + 12) = *(_BYTE *)(v611 + 12);
        v612 = (_QWORD *)((v608 + 47) & 0xFFFFFFFFFFFFF8);
        v613 = (_QWORD *)((v609 + 47) & 0xFFFFFFFFFFFFF8);
        *v612 = *v613;
        v614 = ((unint64_t)v612 + 15) & 0xFFFFFFFFFFFFFFF8;
        v615 = ((unint64_t)v613 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v614 = *(_QWORD *)v615;
        *(_BYTE *)(v614 + 8) = *(_BYTE *)(v615 + 8);
        *(_BYTE *)(v614 + 9) = *(_BYTE *)(v615 + 9);
        v616 = (void *)((v1436 + v614) & v94);
        v617 = (const void *)((v1436 + v615) & v94);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1445 + 48))(v617, 1, v1441))
        {
          v585 = __n;
          memcpy(v616, v617, __n);
        }
        else
        {
          v604((uint64_t)v616, (uint64_t)v617, v1441);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1445 + 56))(v616, 0, 1, v1441);
          v585 = __n;
        }
        v618 = (_QWORD *)(((unint64_t)v617 + v1437) & 0xFFFFFFFFFFFFFFF8);
        v619 = (_QWORD *)(((unint64_t)v616 + v1437) & 0xFFFFFFFFFFFFFFF8);
        *v619 = *v618;
        v620 = ((unint64_t)v619 + 15) & 0xFFFFFFFFFFFFFFF8;
        v621 = ((unint64_t)v618 + 15) & 0xFFFFFFFFFFFFFFF8;
        v622 = *(_QWORD *)v621;
        *(_BYTE *)(v620 + 8) = *(_BYTE *)(v621 + 8);
        *(_QWORD *)v620 = v622;
        v623 = (_QWORD *)(((unint64_t)v619 + 31) & 0xFFFFFFFFFFFFF8);
        v624 = (_QWORD *)(((unint64_t)v618 + 31) & 0xFFFFFFFFFFFFF8);
        *v623 = *v624;
        v625 = (_OWORD *)(((unint64_t)v623 + 15) & 0xFFFFFFFFFFFFFFF8);
        v626 = (_OWORD *)(((unint64_t)v624 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v625 = *v626;
        v627 = ((unint64_t)v625 + 19) & 0xFFFFFFFFFFFFFFF8;
        v628 = ((unint64_t)v626 + 19) & 0xFFFFFFFFFFFFFFF8;
        v629 = *(_QWORD *)v628;
        *(_BYTE *)(v627 + 8) = *(_BYTE *)(v628 + 8);
        *(_QWORD *)v627 = v629;
        *(_BYTE *)(v627 + 9) = *(_BYTE *)(v628 + 9);
        v630 = (v627 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v631 = (v628 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        LODWORD(v622) = *(_DWORD *)v631;
        *(_BYTE *)(v630 + 4) = *(_BYTE *)(v631 + 4);
        *(_DWORD *)v630 = v622;
        *(_OWORD *)((v627 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v628 + 25) & 0xFFFFFFFFFFFFF8);
        v632 = v1438 + v600;
        v633 = *(_OWORD *)(v1438 + v601 + 112);
        v635 = *(_OWORD *)(v1438 + v601 + 64);
        v634 = *(_OWORD *)(v1438 + v601 + 80);
        *(_OWORD *)(v632 + 96) = *(_OWORD *)(v1438 + v601 + 96);
        *(_OWORD *)(v632 + 112) = v633;
        *(_OWORD *)(v632 + 64) = v635;
        *(_OWORD *)(v632 + 80) = v634;
        v636 = *(_OWORD *)(v1438 + v601 + 176);
        v638 = *(_OWORD *)(v1438 + v601 + 128);
        v637 = *(_OWORD *)(v1438 + v601 + 144);
        *(_OWORD *)(v632 + 160) = *(_OWORD *)(v1438 + v601 + 160);
        *(_OWORD *)(v632 + 176) = v636;
        *(_OWORD *)(v632 + 128) = v638;
        *(_OWORD *)(v632 + 144) = v637;
        v640 = *(_OWORD *)(v1438 + v601 + 208);
        v639 = *(_OWORD *)(v1438 + v601 + 224);
        v641 = *(_OWORD *)(v1438 + v601 + 192);
        *(_QWORD *)(v632 + 240) = *(_QWORD *)(v1438 + v601 + 240);
        *(_OWORD *)(v632 + 208) = v640;
        *(_OWORD *)(v632 + 224) = v639;
        *(_OWORD *)(v632 + 192) = v641;
        v642 = *(_OWORD *)(v1438 + v601);
        v643 = *(_OWORD *)(v1438 + v601 + 16);
        v644 = *(_OWORD *)(v1438 + v601 + 48);
        *(_OWORD *)(v632 + 32) = *(_OWORD *)(v1438 + v601 + 32);
        *(_OWORD *)(v632 + 48) = v644;
        *(_OWORD *)v632 = v642;
        *(_OWORD *)(v632 + 16) = v643;
        v645 = (_OWORD *)((v1438 + v600 + 255) & 0xFFFFFFFFFFFFFFF8);
        v646 = (__int128 *)((v1438 + v601 + 255) & 0xFFFFFFFFFFFFFFF8);
        v647 = *v646;
        *(_OWORD *)((char *)v645 + 9) = *(__int128 *)((char *)v646 + 9);
        *v645 = v647;
        v648 = (v1438 + v600 + 287) & 0xFFFFFFFFFFFFFFF8;
        v649 = (v1438 + v601 + 287) & 0xFFFFFFFFFFFFFFF8;
        v650 = *(_OWORD *)v649;
        *(_BYTE *)(v648 + 16) = *(_BYTE *)(v649 + 16);
        *(_OWORD *)v648 = v650;
        v651 = (_QWORD *)((v1438 + v600 + 311) & 0xFFFFFFFFFFFFF8);
        v652 = (_QWORD *)((v1438 + v601 + 311) & 0xFFFFFFFFFFFFF8);
        *v651 = *v652;
        *(_OWORD *)(((unint64_t)v651 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v652 + 15) & 0xFFFFFFFFFFFFF8);
        v589 = v1444;
        v96 = a2;
        v587 = v1474;
        v584 = v1499;
        v588 = ~v1474;
        if (!v1414)
          goto LABEL_778;
LABEL_784:
        v653 = v1417 + 327;
        v654 = ((((v1417
                 + 327
                 + ((((((((((v1421 + 7 + v589) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 19) & 0xFFFFFFFFFFFFFFF8)
                   + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        v1487 = (void *)((unint64_t)&v83[v587 + v654] & v588);
        v655 = (const void *)((unint64_t)&v96[v587 + v654] & v588);
        v1472 = v1421 + 7;
        if (v1493 == v1416)
        {
          v656 = (*(uint64_t (**)(const void *))(v1449 + 48))(v655);
          v657 = v1427;
          v658 = ~v1458;
          v659 = v1487;
        }
        else
        {
          v660 = ((unint64_t)v655 + v1435) & v1480;
          v658 = ~v1458;
          v661 = (v1401 + v660) & v1464;
          if (v1418 == v1416)
          {
            v657 = v1427;
            if (v1403 == v1418)
            {
              v656 = (*(uint64_t (**)(unint64_t))(v1428 + 48))((v1401 + v660) & v1464);
              v659 = v1487;
            }
            else
            {
              v664 = (unint64_t *)((v1433 + v661) & 0xFFFFFFFFFFFFFFF8);
              v659 = v1487;
              if (v1392 <= 0x7FFFFFFE)
              {
                v665 = *v664;
                if (v665 >= 0xFFFFFFFF)
                  LODWORD(v665) = -1;
                if ((v665 + 1) >= 2)
                  goto LABEL_865;
                goto LABEL_868;
              }
              v656 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v1424 + 48))(((unint64_t)v664 + v1423) & v1362, v1388, v1425);
            }
          }
          else
          {
            v662 = v661 + v584;
            if ((v1390 & 0x80000000) != 0)
            {
              v666 = (v1443 + ((v1503 + v662) & v1510)) & v1453;
              if (v1414 <= 0x7FFFFFFD)
              {
                v858 = *(_QWORD *)(((v1387 + ((v1440 + v666) & v1453)) & 0xFFFFFFFFFFFFF8) + 8);
                if (v858 >= 0xFFFFFFFF)
                  LODWORD(v858) = -1;
                v657 = v1427;
                v659 = v1487;
                if ((v858 + 1) >= 2)
                  goto LABEL_865;
                goto LABEL_868;
              }
              v656 = (*(uint64_t (**)(uint64_t))(v586 + 48))(v666);
            }
            else
            {
              v663 = *(_QWORD *)(v662 + 8);
              if (v663 >= 0xFFFFFFFF)
                LODWORD(v663) = -1;
              v656 = v663 + 1;
            }
            v657 = v1427;
            v659 = v1487;
          }
        }
        if (v656)
        {
LABEL_865:
          memcpy(v659, v655, v1498);
          v743 = v1474;
          v744 = ~v1474;
LABEL_866:
          v745 = v585;
LABEL_872:
          v810 = ((((v653
                   + ((((((((((v1472 + v745) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 19) & 0xFFFFFFFFFFFFFFF8)
                     + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 16;
          *(_QWORD *)(((unint64_t)v659 + v810) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v655 + v810) & 0xFFFFFFFFFFFFF8);
          v811 = ((v1406
                 + ((v743
                   + ((((v653
                       + ((((((((((v1472 + v585) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                           + 19) & 0xFFFFFFFFFFFFFFF8)
                         + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 16) & v744)) & 0xFFFFFFFFFFFFFFF8)
               + 8;
          if (v811 <= v1475)
            v811 = v1475;
          if (v1405 > v811)
            v811 = v1405;
          if (v1498 > v811)
            v811 = v1498;
          if (v657 > v811)
            v811 = v657;
          if (v1504 > v811)
            v811 = v1504;
          if (v1477 + 2 > v811)
            v811 = v1477 + 2;
          if (v1409 > v811)
            v811 = v1409;
          if (v1407 > v811)
            v811 = v1407;
          if (v1410 > v811)
            v811 = v1410;
          if (v811 <= v1504)
            v811 = v1504;
          if (v811 <= v1476)
            v811 = v1476;
          if (v811 <= v1411)
            v811 = ((v1466 + 1) & ~v1466) + v1504;
          if (v811 <= v1504)
            v811 = v1504;
          if (v811 <= v1408)
            v811 = v1408;
          if (v811 <= v1407)
            v811 = v1407;
          if (v811 <= v1504)
            v811 = v1504;
          if (v811 <= v1477)
            v811 = v1477;
          if (v811 <= v1504)
            v811 = v1504;
          if (v811 <= v1412)
            v811 = v1412;
          if (v811 <= v1407)
            v811 = v1407;
          if (v811 <= v1504)
            v811 = v1504;
          if (v811 <= 0x38)
            v811 = 56;
          if (v811 > 3)
            goto LABEL_917;
          v812 = ((1 << (8 * v811)) + 5) >> (8 * v811);
          if (v812 > 0xFFD8)
          {
            *(_DWORD *)&v83[v811] = 5;
            return v83;
          }
          if (v812 <= 0xD8)
LABEL_917:
            v83[v811] = 5;
          else
            *(_WORD *)&v83[v811] = 5;
          return v83;
        }
        v660 = ((unint64_t)v655 + v1435) & v1480;
        v661 = (v1401 + v660) & v658;
LABEL_868:
        v746 = v658;
        v747 = v584;
        v748 = *(void (**)(void *, const void *, uint64_t))(v1449 + 32);
        v748(v659, v655, AssociatedTypeWitness);
        v749 = ((unint64_t)v659 + v1435) & v1480;
        v748((void *)v749, (const void *)v660, AssociatedTypeWitness);
        v750 = (v1401 + v749) & v746;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1428 + 32))(v750, v661, v1429);
        v751 = (_QWORD *)((v1433 + v750) & 0xFFFFFFFFFFFFFFF8);
        v752 = (_QWORD *)((v1433 + v661) & 0xFFFFFFFFFFFFFFF8);
        *v751 = *v752;
        v753 = ((unint64_t)v751 + v1423) & v1362;
        v754 = ((unint64_t)v752 + v1423) & v1362;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1424 + 32))(v753, v754, v1425);
        v755 = (_QWORD *)((v1419 + v754) & 0xFFFFFFFFFFFFF8);
        v756 = (_QWORD *)((v1419 + v753) & 0xFFFFFFFFFFFFF8);
        *v756 = *v755;
        *(_OWORD *)(((unint64_t)v756 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v755 + 15) & 0xFFFFFFFFFFFFF8);
        *(_OWORD *)(v750 + v747) = *(_OWORD *)(v661 + v747);
        v757 = (v1503 + v750 + v747) & v1510;
        v758 = (v1503 + v661 + v747) & v1510;
        *(_BYTE *)v757 = *(_BYTE *)v758;
        v759 = v757 | 4;
        v760 = *(_DWORD *)(v758 | 4);
        *(_BYTE *)(v759 + 4) = *(_BYTE *)((v758 | 4) + 4);
        *(_DWORD *)v759 = v760;
        *(_WORD *)(v757 + 10) = *(_WORD *)(v758 + 0xA);
        v761 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1445 + 32);
        v761((v1443 + v757) & v1453, (v1443 + v758) & v1453, v1441);
        v762 = (v1440 + ((v1443 + v757) & v1453)) & v1453;
        v763 = (v1440 + ((v1443 + v758) & v1453)) & v1453;
        v761(v762, v763, v1441);
        v764 = (_BYTE *)(v762 + v1444);
        *v764 = *(_BYTE *)(v763 + v1444);
        v764[1] = *(_BYTE *)(v763 + v1444 + 1);
        v764[2] = *(_BYTE *)(v763 + v1444 + 2);
        v764[3] = *(_BYTE *)(v763 + v1444 + 3);
        v764[4] = *(_BYTE *)(v763 + v1444 + 4);
        v765 = (v762 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
        v766 = (v763 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)v765 = *(_OWORD *)v766;
        *(_BYTE *)(v765 + 16) = *(_BYTE *)(v766 + 16);
        *(_BYTE *)(v765 + 17) = *(_BYTE *)(v766 + 17);
        *(_BYTE *)(v765 + 18) = *(_BYTE *)(v766 + 18);
        *(_BYTE *)(v765 + 19) = *(_BYTE *)(v766 + 19);
        v767 = (v765 + 27) & 0xFFFFFFFFFFFFFFF8;
        v768 = (v766 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v767 = *(_QWORD *)v768;
        *(_BYTE *)(v767 + 8) = *(_BYTE *)(v768 + 8);
        *(_BYTE *)(v767 + 9) = *(_BYTE *)(v768 + 9);
        *(_BYTE *)(v767 + 10) = *(_BYTE *)(v768 + 10);
        *(_BYTE *)(v767 + 11) = *(_BYTE *)(v768 + 11);
        *(_BYTE *)(v767 + 12) = *(_BYTE *)(v768 + 12);
        v769 = (_QWORD *)((v765 + 47) & 0xFFFFFFFFFFFFF8);
        v770 = (_QWORD *)((v766 + 47) & 0xFFFFFFFFFFFFF8);
        *v769 = *v770;
        v771 = ((unint64_t)v769 + 15) & 0xFFFFFFFFFFFFFFF8;
        v772 = ((unint64_t)v770 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v771 = *(_QWORD *)v772;
        *(_BYTE *)(v771 + 8) = *(_BYTE *)(v772 + 8);
        *(_BYTE *)(v771 + 9) = *(_BYTE *)(v772 + 9);
        v773 = (void *)((v1436 + v771) & v1453);
        v774 = (const void *)((v1436 + v772) & v1453);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1445 + 48))(v774, 1, v1441))
        {
          memcpy(v773, v774, __n);
        }
        else
        {
          v761((uint64_t)v773, (uint64_t)v774, v1441);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1445 + 56))(v773, 0, 1, v1441);
        }
        v83 = a1;
        v657 = v1427;
        v775 = (_QWORD *)(((unint64_t)v773 + v1437) & 0xFFFFFFFFFFFFFFF8);
        v776 = (_QWORD *)(((unint64_t)v774 + v1437) & 0xFFFFFFFFFFFFFFF8);
        *v775 = *v776;
        v777 = ((unint64_t)v775 + 15) & 0xFFFFFFFFFFFFFFF8;
        v778 = ((unint64_t)v776 + 15) & 0xFFFFFFFFFFFFFFF8;
        v779 = *(_QWORD *)v778;
        *(_BYTE *)(v777 + 8) = *(_BYTE *)(v778 + 8);
        *(_QWORD *)v777 = v779;
        v780 = (_QWORD *)(((unint64_t)v775 + 31) & 0xFFFFFFFFFFFFF8);
        v781 = (_QWORD *)(((unint64_t)v776 + 31) & 0xFFFFFFFFFFFFF8);
        *v780 = *v781;
        v782 = (_OWORD *)(((unint64_t)v780 + 15) & 0xFFFFFFFFFFFFFFF8);
        v783 = (_OWORD *)(((unint64_t)v781 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v782 = *v783;
        v784 = ((unint64_t)v782 + 19) & 0xFFFFFFFFFFFFFFF8;
        v785 = ((unint64_t)v783 + 19) & 0xFFFFFFFFFFFFFFF8;
        v786 = *(_QWORD *)v785;
        *(_BYTE *)(v784 + 8) = *(_BYTE *)(v785 + 8);
        *(_QWORD *)v784 = v786;
        *(_BYTE *)(v784 + 9) = *(_BYTE *)(v785 + 9);
        v787 = (v784 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v788 = (v785 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        LODWORD(v779) = *(_DWORD *)v788;
        *(_BYTE *)(v787 + 4) = *(_BYTE *)(v788 + 4);
        *(_DWORD *)v787 = v779;
        *(_OWORD *)((v784 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v785 + 25) & 0xFFFFFFFFFFFFF8);
        v789 = v757 + v1438;
        v790 = *(_OWORD *)(v758 + v1438 + 112);
        v792 = *(_OWORD *)(v758 + v1438 + 64);
        v791 = *(_OWORD *)(v758 + v1438 + 80);
        *(_OWORD *)(v789 + 96) = *(_OWORD *)(v758 + v1438 + 96);
        *(_OWORD *)(v789 + 112) = v790;
        *(_OWORD *)(v789 + 64) = v792;
        *(_OWORD *)(v789 + 80) = v791;
        v793 = *(_OWORD *)(v758 + v1438 + 176);
        v795 = *(_OWORD *)(v758 + v1438 + 128);
        v794 = *(_OWORD *)(v758 + v1438 + 144);
        *(_OWORD *)(v789 + 160) = *(_OWORD *)(v758 + v1438 + 160);
        *(_OWORD *)(v789 + 176) = v793;
        *(_OWORD *)(v789 + 128) = v795;
        *(_OWORD *)(v789 + 144) = v794;
        v797 = *(_OWORD *)(v758 + v1438 + 208);
        v796 = *(_OWORD *)(v758 + v1438 + 224);
        v798 = *(_OWORD *)(v758 + v1438 + 192);
        *(_QWORD *)(v789 + 240) = *(_QWORD *)(v758 + v1438 + 240);
        *(_OWORD *)(v789 + 208) = v797;
        *(_OWORD *)(v789 + 224) = v796;
        *(_OWORD *)(v789 + 192) = v798;
        v799 = *(_OWORD *)(v758 + v1438);
        v800 = *(_OWORD *)(v758 + v1438 + 16);
        v801 = *(_OWORD *)(v758 + v1438 + 48);
        *(_OWORD *)(v789 + 32) = *(_OWORD *)(v758 + v1438 + 32);
        *(_OWORD *)(v789 + 48) = v801;
        *(_OWORD *)v789 = v799;
        *(_OWORD *)(v789 + 16) = v800;
        v802 = (_OWORD *)((v757 + v1438 + 255) & 0xFFFFFFFFFFFFFFF8);
        v803 = (__int128 *)((v758 + v1438 + 255) & 0xFFFFFFFFFFFFFFF8);
        v804 = *v803;
        *(_OWORD *)((char *)v802 + 9) = *(__int128 *)((char *)v803 + 9);
        *v802 = v804;
        v805 = (v757 + v1438 + 287) & 0xFFFFFFFFFFFFFFF8;
        v806 = (v758 + v1438 + 287) & 0xFFFFFFFFFFFFFFF8;
        v807 = *(_OWORD *)v806;
        *(_BYTE *)(v805 + 16) = *(_BYTE *)(v806 + 16);
        *(_OWORD *)v805 = v807;
        v808 = (_QWORD *)((v757 + v1438 + 311) & 0xFFFFFFFFFFFFF8);
        v809 = (_QWORD *)((v758 + v1438 + 311) & 0xFFFFFFFFFFFFF8);
        *v808 = *v809;
        *(_OWORD *)(((unint64_t)v808 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v809 + 15) & 0xFFFFFFFFFFFFF8);
        v745 = v1444;
        v743 = v1474;
        v744 = ~v1474;
        v585 = __n;
        v659 = v1487;
        if (v1414)
          goto LABEL_872;
        goto LABEL_866;
      }
      v96 = a2;
      v100 = v1483;
      v215 = (unint64_t)&a2[v1435] & v1480;
      v216 = (v215 + v1483 + v1458) & v1464;
      v97 = AssociatedTypeWitness;
      v95 = v1449;
      v99 = v1499;
      if (v1418 == v1416)
      {
        if (v1403 == v1418)
        {
          v98 = (*(uint64_t (**)(unint64_t))(v1428 + 48))((v215 + v1483 + v1458) & v1464);
          v68 = v1458;
          v83 = a1;
          goto LABEL_776;
        }
        v450 = (unint64_t *)((v1433 + v216) & 0xFFFFFFFFFFFFFFF8);
        v83 = a1;
        if (v1392 <= 0x7FFFFFFE)
        {
          v451 = *v450;
          goto LABEL_952;
        }
        v581 = ((unint64_t)v450 + v1423) & v80;
        v582 = *(uint64_t (**)(unint64_t))(v1424 + 48);
      }
      else
      {
        v312 = v1499 + v216;
        if ((v1390 & 0x80000000) == 0)
        {
          v313 = *(_QWORD *)(v312 + 8);
          if (v313 >= 0xFFFFFFFF)
            LODWORD(v313) = -1;
          v98 = v313 + 1;
          v83 = a1;
          goto LABEL_776;
        }
        v581 = (v1443 + ((v1503 + v312) & v1510)) & v94;
        v83 = a1;
        if (v1414 <= 0x7FFFFFFD)
        {
          v451 = *(_QWORD *)(((v1387 + ((v1440 + v581) & v94)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_952:
          if (v451 >= 0xFFFFFFFF)
            LODWORD(v451) = -1;
          if ((v451 + 1) >= 2)
            goto LABEL_777;
          goto LABEL_780;
        }
        v582 = *(uint64_t (**)(unint64_t))(v1445 + 48);
      }
      v98 = v582(v581);
      v68 = v1458;
      goto LABEL_776;
    case 6u:
      v1484 = *(_QWORD *)(v1426 - 8);
      v1494 = ~v35;
      v101 = ~v1509;
      v1467 = ~v1457;
      v1454 = ~v1451;
      v102 = v1402;
      v1368 = ((((v1420 + ((v35 + 8 + (v1439 & 0xFFFFFFFFFFFFFFF8)) & ~v35)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      v1511 = ~v1509;
      v1361 = ~v1462;
      if (v1402 == v1415)
      {
        v103 = v1450;
        v104 = a2;
        v105 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v1450 + 48))(a2, v1402, v1448);
        v82 = ~v69;
        v106 = v1479;
LABEL_146:
        v107 = v69;
LABEL_363:
        if (v105)
        {
LABEL_364:
          v83 = a1;
          v316 = v82;
          memcpy(a1, v104, v1427);
          v317 = v316;
          v318 = v1444;
          v319 = v1399;
          v320 = v1422;
          v321 = __n;
LABEL_365:
          v322 = v321;
          goto LABEL_405;
        }
        v217 = (unint64_t)&v104[v1434] & v1467;
        v218 = (v217 + v106 + v107) & v82;
LABEL_367:
        v323 = *(void (**)(char *, char *, uint64_t))(v103 + 32);
        v324 = v107;
        v325 = v82;
        v323(a1, v104, v1448);
        v326 = (unint64_t)&a1[v1434] & v1467;
        v323((char *)v326, (char *)v217, v1448);
        v1367 = v325;
        v327 = (v326 + v106 + v324) & v325;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1430 + 32))(v327, v218, v1431);
        v328 = (_QWORD *)((v1439 + v327) & 0xFFFFFFFFFFFFFFF8);
        v329 = (_QWORD *)((v1439 + v218) & 0xFFFFFFFFFFFFFFF8);
        *v328 = *v329;
        v330 = ((unint64_t)v328 + v1432) & v1494;
        v331 = ((unint64_t)v329 + v1432) & v1494;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1484 + 32))(v330, v331, v1426);
        v332 = (_QWORD *)((v1420 + v331) & 0xFFFFFFFFFFFFF8);
        v333 = (_QWORD *)((v1420 + v330) & 0xFFFFFFFFFFFFF8);
        *v333 = *v332;
        *(_OWORD *)(((unint64_t)v333 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v332 + 15) & 0xFFFFFFFFFFFFF8);
        *(_OWORD *)(v1368 + v327) = *(_OWORD *)(v1368 + v218);
        v334 = (v1503 + v1368 + v327) & v1511;
        v335 = (v1503 + v1368 + v218) & v1511;
        *(_BYTE *)v334 = *(_BYTE *)v335;
        v336 = v334 | 4;
        v337 = *(_DWORD *)(v335 | 4);
        *(_BYTE *)(v336 + 4) = *(_BYTE *)((v335 | 4) + 4);
        *(_DWORD *)v336 = v337;
        *(_WORD *)(v334 + 10) = *(_WORD *)(v335 + 0xA);
        v338 = *(void (**)(size_t, size_t, uint64_t))(v1445 + 32);
        v338((v1443 + v334) & v1454, (v1443 + v335) & v1454, v1441);
        v339 = (v1440 + ((v1443 + v334) & v1454)) & v1454;
        v340 = (v1440 + ((v1443 + v335) & v1454)) & v1454;
        v338(v339, v340, v1441);
        v318 = v1444;
        v341 = (_BYTE *)(v339 + v1444);
        *v341 = *(_BYTE *)(v340 + v1444);
        v341[1] = *(_BYTE *)(v340 + v1444 + 1);
        v341[2] = *(_BYTE *)(v340 + v1444 + 2);
        v341[3] = *(_BYTE *)(v340 + v1444 + 3);
        v341[4] = *(_BYTE *)(v340 + v1444 + 4);
        v342 = (v339 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
        v343 = (v340 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)v342 = *(_OWORD *)v343;
        *(_BYTE *)(v342 + 16) = *(_BYTE *)(v343 + 16);
        *(_BYTE *)(v342 + 17) = *(_BYTE *)(v343 + 17);
        *(_BYTE *)(v342 + 18) = *(_BYTE *)(v343 + 18);
        *(_BYTE *)(v342 + 19) = *(_BYTE *)(v343 + 19);
        v344 = (v342 + 27) & 0xFFFFFFFFFFFFFFF8;
        v345 = (v343 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v344 = *(_QWORD *)v345;
        *(_BYTE *)(v344 + 8) = *(_BYTE *)(v345 + 8);
        *(_BYTE *)(v344 + 9) = *(_BYTE *)(v345 + 9);
        *(_BYTE *)(v344 + 10) = *(_BYTE *)(v345 + 10);
        *(_BYTE *)(v344 + 11) = *(_BYTE *)(v345 + 11);
        *(_BYTE *)(v344 + 12) = *(_BYTE *)(v345 + 12);
        v346 = (_QWORD *)((v342 + 47) & 0xFFFFFFFFFFFFF8);
        v347 = (_QWORD *)((v343 + 47) & 0xFFFFFFFFFFFFF8);
        *v346 = *v347;
        v348 = ((unint64_t)v346 + 15) & 0xFFFFFFFFFFFFFFF8;
        v349 = ((unint64_t)v347 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v348 = *(_QWORD *)v349;
        *(_BYTE *)(v348 + 8) = *(_BYTE *)(v349 + 8);
        *(_BYTE *)(v348 + 9) = *(_BYTE *)(v349 + 9);
        v350 = (void *)((v1436 + v348) & v1454);
        v351 = (const void *)((v1436 + v349) & v1454);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1445 + 48))(v351, 1, v1441))
        {
          v321 = __n;
          memcpy(v350, v351, __n);
          v102 = v1402;
        }
        else
        {
          v338((size_t)v350, (size_t)v351, v1441);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1445 + 56))(v350, 0, 1, v1441);
          v102 = v1402;
          v321 = __n;
        }
        v403 = (_QWORD *)(((unint64_t)v351 + v1437) & 0xFFFFFFFFFFFFFFF8);
        v404 = (_QWORD *)(((unint64_t)v350 + v1437) & 0xFFFFFFFFFFFFFFF8);
        *v404 = *v403;
        v405 = ((unint64_t)v404 + 15) & 0xFFFFFFFFFFFFFFF8;
        v406 = ((unint64_t)v403 + 15) & 0xFFFFFFFFFFFFFFF8;
        v407 = *(_QWORD *)v406;
        *(_BYTE *)(v405 + 8) = *(_BYTE *)(v406 + 8);
        *(_QWORD *)v405 = v407;
        v408 = (_QWORD *)(((unint64_t)v404 + 31) & 0xFFFFFFFFFFFFF8);
        v409 = (_QWORD *)(((unint64_t)v403 + 31) & 0xFFFFFFFFFFFFF8);
        *v408 = *v409;
        v410 = (_OWORD *)(((unint64_t)v408 + 15) & 0xFFFFFFFFFFFFFFF8);
        v411 = (_OWORD *)(((unint64_t)v409 + 15) & 0xFFFFFFFFFFFFFFF8);
        *v410 = *v411;
        v412 = ((unint64_t)v410 + 19) & 0xFFFFFFFFFFFFFFF8;
        v413 = ((unint64_t)v411 + 19) & 0xFFFFFFFFFFFFFFF8;
        v414 = *(_QWORD *)v413;
        *(_BYTE *)(v412 + 8) = *(_BYTE *)(v413 + 8);
        *(_QWORD *)v412 = v414;
        *(_BYTE *)(v412 + 9) = *(_BYTE *)(v413 + 9);
        v415 = (v412 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        v416 = (v413 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        LODWORD(v407) = *(_DWORD *)v416;
        *(_BYTE *)(v415 + 4) = *(_BYTE *)(v416 + 4);
        *(_DWORD *)v415 = v407;
        *(_OWORD *)((v412 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v413 + 25) & 0xFFFFFFFFFFFFF8);
        v417 = v1438 + v334;
        v418 = *(_OWORD *)(v1438 + v335 + 112);
        v420 = *(_OWORD *)(v1438 + v335 + 64);
        v419 = *(_OWORD *)(v1438 + v335 + 80);
        *(_OWORD *)(v417 + 96) = *(_OWORD *)(v1438 + v335 + 96);
        *(_OWORD *)(v417 + 112) = v418;
        *(_OWORD *)(v417 + 64) = v420;
        *(_OWORD *)(v417 + 80) = v419;
        v421 = *(_OWORD *)(v1438 + v335 + 176);
        v423 = *(_OWORD *)(v1438 + v335 + 128);
        v422 = *(_OWORD *)(v1438 + v335 + 144);
        *(_OWORD *)(v417 + 160) = *(_OWORD *)(v1438 + v335 + 160);
        *(_OWORD *)(v417 + 176) = v421;
        *(_OWORD *)(v417 + 128) = v423;
        *(_OWORD *)(v417 + 144) = v422;
        v425 = *(_OWORD *)(v1438 + v335 + 208);
        v424 = *(_OWORD *)(v1438 + v335 + 224);
        v426 = *(_OWORD *)(v1438 + v335 + 192);
        *(_QWORD *)(v417 + 240) = *(_QWORD *)(v1438 + v335 + 240);
        *(_OWORD *)(v417 + 208) = v425;
        *(_OWORD *)(v417 + 224) = v424;
        *(_OWORD *)(v417 + 192) = v426;
        v427 = *(_OWORD *)(v1438 + v335);
        v428 = *(_OWORD *)(v1438 + v335 + 16);
        v429 = *(_OWORD *)(v1438 + v335 + 48);
        *(_OWORD *)(v417 + 32) = *(_OWORD *)(v1438 + v335 + 32);
        *(_OWORD *)(v417 + 48) = v429;
        *(_OWORD *)v417 = v427;
        *(_OWORD *)(v417 + 16) = v428;
        v430 = (_OWORD *)((v1438 + v334 + 255) & 0xFFFFFFFFFFFFFFF8);
        v431 = (__int128 *)((v1438 + v335 + 255) & 0xFFFFFFFFFFFFFFF8);
        v432 = *v431;
        *(_OWORD *)((char *)v430 + 9) = *(__int128 *)((char *)v431 + 9);
        *v430 = v432;
        v433 = (v1438 + v334 + 287) & 0xFFFFFFFFFFFFFFF8;
        v434 = (v1438 + v335 + 287) & 0xFFFFFFFFFFFFFFF8;
        v435 = *(_OWORD *)v434;
        *(_BYTE *)(v433 + 16) = *(_BYTE *)(v434 + 16);
        *(_OWORD *)v433 = v435;
        v436 = (_QWORD *)((v1438 + v334 + 311) & 0xFFFFFFFFFFFFF8);
        v437 = (_QWORD *)((v1438 + v335 + 311) & 0xFFFFFFFFFFFFF8);
        *v436 = *v437;
        *(_OWORD *)(((unint64_t)v436 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v437 + 15) & 0xFFFFFFFFFFFFF8);
        v322 = v1444;
        v103 = v1450;
        v319 = v1399;
        v317 = v1367;
        v320 = v1422;
        v83 = a1;
        if (!v1414)
          goto LABEL_365;
LABEL_405:
        v438 = v1421 + 7;
        v439 = ((((v319
                 + 327
                 + ((((((((((v1421 + 7 + v322) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 19) & 0xFFFFFFFFFFFFFFF8)
                   + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        v1500 = (void *)((unint64_t)&v83[v1462 + v439] & v1361);
        v440 = (const void *)((unint64_t)&a2[v1462 + v439] & v1361);
        v1482 = v319 + 327;
        if ((_DWORD)v102 == v1415)
        {
          v441 = v317;
          v442 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v103 + 48))(v440, v102, v1448);
          v317 = v441;
          v443 = v1427;
LABEL_805:
          if (v442)
          {
LABEL_806:
            v668 = v1500;
            memcpy(v1500, v440, v443);
            v670 = v1476;
            v669 = v1477;
            v671 = v1475;
            v673 = v1405;
            v672 = v1406;
            v674 = v1477 + 2;
LABEL_807:
            v675 = v321;
LABEL_813:
            v740 = ((((v1482
                     + ((((((((((v438 + v675) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 19) & 0xFFFFFFFFFFFFFFF8)
                       + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 16;
            *(_QWORD *)(((unint64_t)v668 + v740) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v440
                                                                                           + v740) & 0xFFFFFFFFFFFFF8);
            v741 = ((v672
                   + ((v1474
                     + ((((v1417
                         + ((((((((((v438 + v321) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                             + 19) & 0xFFFFFFFFFFFFFFF8)
                           + 25) & 0xFFFFFFFFFFFFFFF8)
                         + 327) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 16) & ~v1474)) & 0xFFFFFFFFFFFFFFF8)
                 + 8;
            if (v741 <= v671)
              v741 = v671;
            if (v673 > v741)
              v741 = v673;
            if (v1498 > v741)
              v741 = v1498;
            if (v443 > v741)
              v741 = v443;
            if (v1504 > v741)
              v741 = v1504;
            if (v674 > v741)
              v741 = v674;
            if (v1409 > v741)
              v741 = ((v1463 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
            if (v1407 > v741)
              v741 = v1463 + 2;
            if (v1410 > v741)
              v741 = (v1463 & 0xFFFFFFFFFFFFFFF8) + 16;
            if (v741 <= v1504)
              v741 = v1504;
            if (v741 <= v670)
              v741 = v670;
            if (v741 <= v1411)
              v741 = v1411;
            if (v741 <= v1504)
              v741 = v1504;
            if (v741 <= v1408)
              v741 = v1408;
            if (v741 <= v1407)
              v741 = v1463 + 2;
            if (v741 <= v1504)
              v741 = v1504;
            if (v741 <= v669)
              v741 = v669;
            if (v741 <= v1504)
              v741 = v1504;
            if (v741 <= v1412)
              v741 = v1412;
            if (v741 <= v1407)
              v741 = v1463 + 2;
            if (v741 <= v1504)
              v741 = v1504;
            if (v741 <= 0x38)
              v741 = 56;
            if (v741 > 3)
              goto LABEL_858;
            v742 = ((1 << (8 * v741)) + 5) >> (8 * v741);
            if (v742 > 0xFFD8)
            {
              *(_DWORD *)&v83[v741] = 6;
              return v83;
            }
            if (v742 <= 0xD8)
LABEL_858:
              v83[v741] = 6;
            else
              *(_WORD *)&v83[v741] = 6;
            return v83;
          }
          v444 = ((unint64_t)v440 + v1434) & v1467;
          v445 = (v1400 + v444) & v317;
LABEL_809:
          v676 = *(void (**)(void *, const void *, uint64_t))(v1450 + 32);
          v677 = v317;
          v676(v1500, v440, v1448);
          v678 = v318;
          v679 = ((unint64_t)v1500 + v1434) & v1467;
          v676((void *)v679, (const void *)v444, v1448);
          v680 = (v1400 + v679) & v677;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1430 + 32))(v680, v445, v1431);
          v681 = (_QWORD *)((v1439 + v680) & 0xFFFFFFFFFFFFFFF8);
          v682 = (_QWORD *)((v1439 + v445) & 0xFFFFFFFFFFFFFFF8);
          *v681 = *v682;
          v683 = ((unint64_t)v681 + v1432) & v1494;
          v684 = ((unint64_t)v682 + v1432) & v1494;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1484 + 32))(v683, v684, v1426);
          v685 = (_QWORD *)((v1420 + v684) & 0xFFFFFFFFFFFFF8);
          v686 = (_QWORD *)((v1420 + v683) & 0xFFFFFFFFFFFFF8);
          *v686 = *v685;
          *(_OWORD *)(((unint64_t)v686 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v685 + 15) & 0xFFFFFFFFFFFFF8);
          *(_OWORD *)(v680 + v1368) = *(_OWORD *)(v445 + v1368);
          v687 = (v1503 + v680 + v1368) & v1511;
          v688 = (v1503 + v445 + v1368) & v1511;
          *(_BYTE *)v687 = *(_BYTE *)v688;
          v689 = v687 | 4;
          v690 = *(_DWORD *)(v688 | 4);
          *(_BYTE *)(v689 + 4) = *(_BYTE *)((v688 | 4) + 4);
          *(_DWORD *)v689 = v690;
          *(_WORD *)(v687 + 10) = *(_WORD *)(v688 + 0xA);
          v691 = *(void (**)(size_t, size_t, uint64_t))(v1445 + 32);
          v691((v1443 + v687) & v1454, (v1443 + v688) & v1454, v1441);
          v692 = (v1440 + ((v1443 + v687) & v1454)) & v1454;
          v693 = (v1440 + ((v1443 + v688) & v1454)) & v1454;
          v691(v692, v693, v1441);
          v694 = (_BYTE *)(v692 + v678);
          *v694 = *(_BYTE *)(v693 + v678);
          v694[1] = *(_BYTE *)(v693 + v678 + 1);
          v694[2] = *(_BYTE *)(v693 + v678 + 2);
          v694[3] = *(_BYTE *)(v693 + v678 + 3);
          v694[4] = *(_BYTE *)(v693 + v678 + 4);
          v695 = (v692 + v678 + 12) & 0xFFFFFFFFFFFFFFF8;
          v696 = (v693 + v678 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_OWORD *)v695 = *(_OWORD *)v696;
          *(_BYTE *)(v695 + 16) = *(_BYTE *)(v696 + 16);
          *(_BYTE *)(v695 + 17) = *(_BYTE *)(v696 + 17);
          *(_BYTE *)(v695 + 18) = *(_BYTE *)(v696 + 18);
          *(_BYTE *)(v695 + 19) = *(_BYTE *)(v696 + 19);
          v697 = (v695 + 27) & 0xFFFFFFFFFFFFFFF8;
          v698 = (v696 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v697 = *(_QWORD *)v698;
          *(_BYTE *)(v697 + 8) = *(_BYTE *)(v698 + 8);
          *(_BYTE *)(v697 + 9) = *(_BYTE *)(v698 + 9);
          *(_BYTE *)(v697 + 10) = *(_BYTE *)(v698 + 10);
          *(_BYTE *)(v697 + 11) = *(_BYTE *)(v698 + 11);
          *(_BYTE *)(v697 + 12) = *(_BYTE *)(v698 + 12);
          v699 = (_QWORD *)((v695 + 47) & 0xFFFFFFFFFFFFF8);
          v700 = (_QWORD *)((v696 + 47) & 0xFFFFFFFFFFFFF8);
          *v699 = *v700;
          v701 = ((unint64_t)v699 + 15) & 0xFFFFFFFFFFFFFFF8;
          v702 = ((unint64_t)v700 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v701 = *(_QWORD *)v702;
          *(_BYTE *)(v701 + 8) = *(_BYTE *)(v702 + 8);
          *(_BYTE *)(v701 + 9) = *(_BYTE *)(v702 + 9);
          v703 = (void *)((v1436 + v701) & v1454);
          v704 = (const void *)((v1436 + v702) & v1454);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1445 + 48))(v704, 1, v1441))
          {
            memcpy(v703, v704, __n);
          }
          else
          {
            v691((size_t)v703, (size_t)v704, v1441);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1445 + 56))(v703, 0, 1, v1441);
          }
          v83 = a1;
          v670 = v1476;
          v669 = v1477;
          v671 = v1475;
          v673 = v1405;
          v672 = v1406;
          v674 = v1477 + 2;
          v705 = (_QWORD *)(((unint64_t)v703 + v1437) & 0xFFFFFFFFFFFFFFF8);
          v706 = (_QWORD *)(((unint64_t)v704 + v1437) & 0xFFFFFFFFFFFFFFF8);
          *v705 = *v706;
          v707 = ((unint64_t)v705 + 15) & 0xFFFFFFFFFFFFFFF8;
          v708 = ((unint64_t)v706 + 15) & 0xFFFFFFFFFFFFFFF8;
          v709 = *(_QWORD *)v708;
          *(_BYTE *)(v707 + 8) = *(_BYTE *)(v708 + 8);
          *(_QWORD *)v707 = v709;
          v710 = (_QWORD *)(((unint64_t)v705 + 31) & 0xFFFFFFFFFFFFF8);
          v711 = (_QWORD *)(((unint64_t)v706 + 31) & 0xFFFFFFFFFFFFF8);
          *v710 = *v711;
          v712 = (_OWORD *)(((unint64_t)v710 + 15) & 0xFFFFFFFFFFFFFFF8);
          v713 = (_OWORD *)(((unint64_t)v711 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v712 = *v713;
          v714 = ((unint64_t)v712 + 19) & 0xFFFFFFFFFFFFFFF8;
          v715 = ((unint64_t)v713 + 19) & 0xFFFFFFFFFFFFFFF8;
          v716 = *(_QWORD *)v715;
          *(_BYTE *)(v714 + 8) = *(_BYTE *)(v715 + 8);
          *(_QWORD *)v714 = v716;
          *(_BYTE *)(v714 + 9) = *(_BYTE *)(v715 + 9);
          v717 = (v714 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v718 = (v715 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          LODWORD(v709) = *(_DWORD *)v718;
          *(_BYTE *)(v717 + 4) = *(_BYTE *)(v718 + 4);
          *(_DWORD *)v717 = v709;
          *(_OWORD *)((v714 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v715 + 25) & 0xFFFFFFFFFFFFF8);
          v719 = v687 + v1438;
          v720 = *(_OWORD *)(v688 + v1438 + 112);
          v722 = *(_OWORD *)(v688 + v1438 + 64);
          v721 = *(_OWORD *)(v688 + v1438 + 80);
          *(_OWORD *)(v719 + 96) = *(_OWORD *)(v688 + v1438 + 96);
          *(_OWORD *)(v719 + 112) = v720;
          *(_OWORD *)(v719 + 64) = v722;
          *(_OWORD *)(v719 + 80) = v721;
          v723 = *(_OWORD *)(v688 + v1438 + 176);
          v725 = *(_OWORD *)(v688 + v1438 + 128);
          v724 = *(_OWORD *)(v688 + v1438 + 144);
          *(_OWORD *)(v719 + 160) = *(_OWORD *)(v688 + v1438 + 160);
          *(_OWORD *)(v719 + 176) = v723;
          *(_OWORD *)(v719 + 128) = v725;
          *(_OWORD *)(v719 + 144) = v724;
          v727 = *(_OWORD *)(v688 + v1438 + 208);
          v726 = *(_OWORD *)(v688 + v1438 + 224);
          v728 = *(_OWORD *)(v688 + v1438 + 192);
          *(_QWORD *)(v719 + 240) = *(_QWORD *)(v688 + v1438 + 240);
          *(_OWORD *)(v719 + 208) = v727;
          *(_OWORD *)(v719 + 224) = v726;
          *(_OWORD *)(v719 + 192) = v728;
          v729 = *(_OWORD *)(v688 + v1438);
          v730 = *(_OWORD *)(v688 + v1438 + 16);
          v731 = *(_OWORD *)(v688 + v1438 + 48);
          *(_OWORD *)(v719 + 32) = *(_OWORD *)(v688 + v1438 + 32);
          *(_OWORD *)(v719 + 48) = v731;
          *(_OWORD *)v719 = v729;
          *(_OWORD *)(v719 + 16) = v730;
          v732 = (_OWORD *)((v687 + v1438 + 255) & 0xFFFFFFFFFFFFFFF8);
          v733 = (__int128 *)((v688 + v1438 + 255) & 0xFFFFFFFFFFFFFFF8);
          v734 = *v733;
          *(_OWORD *)((char *)v732 + 9) = *(__int128 *)((char *)v733 + 9);
          *v732 = v734;
          v735 = (v687 + v1438 + 287) & 0xFFFFFFFFFFFFFFF8;
          v736 = (v688 + v1438 + 287) & 0xFFFFFFFFFFFFFFF8;
          v737 = *(_OWORD *)v736;
          *(_BYTE *)(v735 + 16) = *(_BYTE *)(v736 + 16);
          *(_OWORD *)v735 = v737;
          v738 = (_QWORD *)((v687 + v1438 + 311) & 0xFFFFFFFFFFFFF8);
          v739 = (_QWORD *)((v688 + v1438 + 311) & 0xFFFFFFFFFFFFF8);
          *v738 = *v739;
          *(_OWORD *)(((unint64_t)v738 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v739 + 15) & 0xFFFFFFFFFFFFF8);
          v675 = v1444;
          v443 = v1427;
          v321 = __n;
          v668 = v1500;
          if (v1414)
            goto LABEL_813;
          goto LABEL_807;
        }
        v444 = ((unint64_t)v440 + v1434) & v1467;
        v445 = (v1400 + v444) & v317;
        if (v320 == v1415)
        {
          v443 = v1427;
          if (v1404 == v320)
          {
            v446 = *(uint64_t (**)(unint64_t))(v1430 + 48);
            v447 = (v1400 + v444) & v317;
LABEL_804:
            v667 = v317;
            v442 = v446(v447);
            v317 = v667;
            goto LABEL_805;
          }
          v454 = (unint64_t *)((v1439 + v445) & 0xFFFFFFFFFFFFFFF8);
          if (v1394 > 0x7FFFFFFE)
          {
            v447 = ((unint64_t)v454 + v1432) & v1494;
            v446 = *(uint64_t (**)(unint64_t))(v1484 + 48);
            goto LABEL_804;
          }
          v455 = *v454;
        }
        else
        {
          v448 = v445 + v1368;
          v443 = v1427;
          if ((v1389 & 0x80000000) == 0)
          {
            v449 = *(_QWORD *)(v448 + 8);
            if (v449 >= 0xFFFFFFFF)
              LODWORD(v449) = -1;
            v442 = v449 + 1;
            goto LABEL_805;
          }
          v447 = (v1443 + ((v1503 + v448) & v1511)) & v1454;
          if (v1414 > 0x7FFFFFFD)
          {
            v446 = *(uint64_t (**)(unint64_t))(v1445 + 48);
            goto LABEL_804;
          }
          v455 = *(_QWORD *)(((v1387 + ((v1440 + v447) & v1454)) & 0xFFFFFFFFFFFFF8) + 8);
        }
        if (v455 >= 0xFFFFFFFF)
          LODWORD(v455) = -1;
        if ((v455 + 1) >= 2)
          goto LABEL_806;
        goto LABEL_809;
      }
      v104 = a2;
      v217 = (unint64_t)&a2[v1434] & v1467;
      v106 = v1479;
      v107 = v36;
      v218 = (v217 + v1479 + v36) & v82;
      v103 = v1450;
      if (v1422 == v1415)
      {
        if (v1404 == v1422)
        {
          v105 = (*(uint64_t (**)(unint64_t))(v1430 + 48))((v217 + v1479 + v36) & v82);
          v82 = ~v69;
          goto LABEL_363;
        }
        v452 = (unint64_t *)((v1439 + v218) & 0xFFFFFFFFFFFFFFF8);
        if (v1394 <= 0x7FFFFFFE)
        {
          v453 = *v452;
          goto LABEL_957;
        }
        v105 = (*(uint64_t (**)(unint64_t))(v33 + 48))(((unint64_t)v452 + v1432) & ~v35);
      }
      else
      {
        v314 = v37 + v218;
        if ((v1389 & 0x80000000) == 0)
        {
          v315 = *(_QWORD *)(v314 + 8);
          if (v315 >= 0xFFFFFFFF)
            LODWORD(v315) = -1;
          v105 = v315 + 1;
          goto LABEL_363;
        }
        v583 = (v1443 + ((v1503 + v314) & v101)) & v1454;
        if (v1414 <= 0x7FFFFFFD)
        {
          v453 = *(_QWORD *)(((v1387 + ((v1440 + v583) & v1454)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_957:
          if (v453 >= 0xFFFFFFFF)
            LODWORD(v453) = -1;
          if ((v453 + 1) >= 2)
            goto LABEL_364;
          goto LABEL_367;
        }
        v105 = (*(uint64_t (**)(uint64_t))(v1445 + 48))(v583);
      }
      v82 = ~v69;
      goto LABEL_146;
    case 7u:
      v1512 = ~v1509;
      v108 = *(void (**)(char *, char *, uint64_t))(v1449 + 32);
      v108(a1, a2, AssociatedTypeWitness);
      v109 = (unint64_t)&a2[v1435] & v78;
      v108((char *)((unint64_t)&a1[v1435] & v78), (char *)v109, AssociatedTypeWitness);
      v110 = (((unint64_t)&a1[v1435] & v78) + v1483 + v1458) & v79;
      v111 = (v109 + v1483 + v1458) & v79;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1428 + 32))(v110, v111, v1429);
      v112 = (_QWORD *)((v1433 + v110) & 0xFFFFFFFFFFFFFFF8);
      v113 = (_QWORD *)((v1433 + v111) & 0xFFFFFFFFFFFFFFF8);
      *v112 = *v113;
      v114 = ((unint64_t)v112 + v1423) & v80;
      v115 = ((unint64_t)v113 + v1423) & v80;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1424 + 32))(v114, v115, v1425);
      v116 = (_QWORD *)((v1419 + v115) & 0xFFFFFFFFFFFFF8);
      v117 = (_QWORD *)((v1419 + v114) & 0xFFFFFFFFFFFFF8);
      *v117 = *v116;
      *(_OWORD *)(((unint64_t)v117 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v116 + 15) & 0xFFFFFFFFFFFFF8);
      *(_OWORD *)(v1499 + v110) = *(_OWORD *)(v1499 + v111);
      v118 = (v1503 + v1499 + v110) & v1512;
      v119 = (v1503 + v1499 + v111) & v1512;
      *(_BYTE *)v118 = *(_BYTE *)v119;
      v120 = v118 | 4;
      v121 = *(_DWORD *)(v119 | 4);
      *(_BYTE *)(v120 + 4) = *(_BYTE *)((v119 | 4) + 4);
      *(_DWORD *)v120 = v121;
      *(_WORD *)(v118 + 10) = *(_WORD *)(v119 + 0xA);
      v122 = *(void (**)(size_t, size_t, uint64_t))(v1445 + 32);
      v122((v1443 + v118) & ~v1451, (v1443 + v119) & ~v1451, v1441);
      v123 = (v1440 + ((v1443 + v118) & ~v1451)) & ~v1451;
      v124 = (v1440 + ((v1443 + v119) & ~v1451)) & ~v1451;
      v122(v123, v124, v1441);
      v125 = (_BYTE *)(v123 + v1444);
      *v125 = *(_BYTE *)(v124 + v1444);
      v125[1] = *(_BYTE *)(v124 + v1444 + 1);
      v125[2] = *(_BYTE *)(v124 + v1444 + 2);
      v125[3] = *(_BYTE *)(v124 + v1444 + 3);
      v125[4] = *(_BYTE *)(v124 + v1444 + 4);
      v126 = (v123 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
      v127 = (v124 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)v126 = *(_OWORD *)v127;
      *(_BYTE *)(v126 + 16) = *(_BYTE *)(v127 + 16);
      *(_BYTE *)(v126 + 17) = *(_BYTE *)(v127 + 17);
      *(_BYTE *)(v126 + 18) = *(_BYTE *)(v127 + 18);
      *(_BYTE *)(v126 + 19) = *(_BYTE *)(v127 + 19);
      v128 = (v126 + 27) & 0xFFFFFFFFFFFFFFF8;
      v129 = (v127 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v128 = *(_QWORD *)v129;
      *(_BYTE *)(v128 + 8) = *(_BYTE *)(v129 + 8);
      *(_BYTE *)(v128 + 9) = *(_BYTE *)(v129 + 9);
      *(_BYTE *)(v128 + 10) = *(_BYTE *)(v129 + 10);
      *(_BYTE *)(v128 + 11) = *(_BYTE *)(v129 + 11);
      *(_BYTE *)(v128 + 12) = *(_BYTE *)(v129 + 12);
      v130 = (_QWORD *)((v126 + 47) & 0xFFFFFFFFFFFFF8);
      v131 = (_QWORD *)((v127 + 47) & 0xFFFFFFFFFFFFF8);
      *v130 = *v131;
      v132 = ((unint64_t)v130 + 15) & 0xFFFFFFFFFFFFFFF8;
      v133 = ((unint64_t)v131 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v132 = *(_QWORD *)v133;
      *(_BYTE *)(v132 + 8) = *(_BYTE *)(v133 + 8);
      *(_BYTE *)(v132 + 9) = *(_BYTE *)(v133 + 9);
      v134 = (void *)((v1436 + v132) & ~v1451);
      v135 = (const void *)((v1436 + v133) & ~v1451);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1445 + 48))(v135, 1, v1441))
      {
        memcpy(v134, v135, __n);
      }
      else
      {
        v122((size_t)v134, (size_t)v135, v1441);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1445 + 56))(v134, 0, 1, v1441);
      }
      v240 = (_QWORD *)(((unint64_t)v135 + v1437) & 0xFFFFFFFFFFFFFFF8);
      v241 = (_QWORD *)(((unint64_t)v134 + v1437) & 0xFFFFFFFFFFFFFFF8);
      *v241 = *v240;
      v242 = ((unint64_t)v241 + 15) & 0xFFFFFFFFFFFFFFF8;
      v243 = ((unint64_t)v240 + 15) & 0xFFFFFFFFFFFFFFF8;
      v244 = *(_QWORD *)v243;
      *(_BYTE *)(v242 + 8) = *(_BYTE *)(v243 + 8);
      *(_QWORD *)v242 = v244;
      v245 = (_QWORD *)(((unint64_t)v241 + 31) & 0xFFFFFFFFFFFFF8);
      v246 = (_QWORD *)(((unint64_t)v240 + 31) & 0xFFFFFFFFFFFFF8);
      *v245 = *v246;
      v247 = (_OWORD *)(((unint64_t)v245 + 15) & 0xFFFFFFFFFFFFFFF8);
      v248 = (_OWORD *)(((unint64_t)v246 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v247 = *v248;
      v249 = ((unint64_t)v247 + 19) & 0xFFFFFFFFFFFFFFF8;
      v250 = ((unint64_t)v248 + 19) & 0xFFFFFFFFFFFFFFF8;
      v251 = *(_QWORD *)v250;
      *(_BYTE *)(v249 + 8) = *(_BYTE *)(v250 + 8);
      *(_QWORD *)v249 = v251;
      *(_BYTE *)(v249 + 9) = *(_BYTE *)(v250 + 9);
      v252 = (v249 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v253 = (v250 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v244) = *(_DWORD *)v253;
      *(_BYTE *)(v252 + 4) = *(_BYTE *)(v253 + 4);
      *(_DWORD *)v252 = v244;
      *(_OWORD *)((v249 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v250 + 25) & 0xFFFFFFFFFFFFF8);
      v254 = v1438 + v118;
      v255 = *(_OWORD *)(v1438 + v119 + 112);
      v257 = *(_OWORD *)(v1438 + v119 + 64);
      v256 = *(_OWORD *)(v1438 + v119 + 80);
      *(_OWORD *)(v254 + 96) = *(_OWORD *)(v1438 + v119 + 96);
      *(_OWORD *)(v254 + 112) = v255;
      *(_OWORD *)(v254 + 64) = v257;
      *(_OWORD *)(v254 + 80) = v256;
      v258 = *(_OWORD *)(v1438 + v119 + 176);
      v260 = *(_OWORD *)(v1438 + v119 + 128);
      v259 = *(_OWORD *)(v1438 + v119 + 144);
      *(_OWORD *)(v254 + 160) = *(_OWORD *)(v1438 + v119 + 160);
      *(_OWORD *)(v254 + 176) = v258;
      *(_OWORD *)(v254 + 128) = v260;
      *(_OWORD *)(v254 + 144) = v259;
      v262 = *(_OWORD *)(v1438 + v119 + 208);
      v261 = *(_OWORD *)(v1438 + v119 + 224);
      v263 = *(_OWORD *)(v1438 + v119 + 192);
      *(_QWORD *)(v254 + 240) = *(_QWORD *)(v1438 + v119 + 240);
      *(_OWORD *)(v254 + 208) = v262;
      *(_OWORD *)(v254 + 224) = v261;
      *(_OWORD *)(v254 + 192) = v263;
      v264 = *(_OWORD *)(v1438 + v119);
      v265 = *(_OWORD *)(v1438 + v119 + 16);
      v266 = *(_OWORD *)(v1438 + v119 + 48);
      *(_OWORD *)(v254 + 32) = *(_OWORD *)(v1438 + v119 + 32);
      *(_OWORD *)(v254 + 48) = v266;
      *(_OWORD *)v254 = v264;
      *(_OWORD *)(v254 + 16) = v265;
      v267 = (_OWORD *)((v1438 + v118 + 255) & 0xFFFFFFFFFFFFFFF8);
      v268 = (__int128 *)((v1438 + v119 + 255) & 0xFFFFFFFFFFFFFFF8);
      v269 = *v268;
      *(_OWORD *)((char *)v267 + 9) = *(__int128 *)((char *)v268 + 9);
      *v267 = v269;
      v270 = (v1438 + v118 + 287) & 0xFFFFFFFFFFFFFFF8;
      v271 = (v1438 + v119 + 287) & 0xFFFFFFFFFFFFFFF8;
      v272 = *(_OWORD *)v271;
      *(_BYTE *)(v270 + 16) = *(_BYTE *)(v271 + 16);
      *(_OWORD *)v270 = v272;
      v273 = (_QWORD *)((v1438 + v118 + 311) & 0xFFFFFFFFFFFFF8);
      v274 = (_QWORD *)((v1438 + v119 + 311) & 0xFFFFFFFFFFFFF8);
      *v273 = *v274;
      *(_OWORD *)(((unint64_t)v273 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v274 + 15) & 0xFFFFFFFFFFFFF8);
      v83 = a1;
      if (v1460 > 3)
        goto LABEL_344;
      v275 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v275 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 7;
      }
      else if (v275 <= 0xD8)
      {
LABEL_344:
        a1[v1460] = 7;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 7;
      }
      return v83;
    case 8u:
      v136 = *(void (**)(char *, char *, uint64_t))(v1450 + 32);
      v1369 = ((((v1420 + ((v35 + 8 + (v1439 & 0xFFFFFFFFFFFFFFF8)) & ~v35)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      v1485 = *(_QWORD *)(v1426 - 8);
      v1495 = ~v35;
      v136(a1, a2, v1448);
      v137 = (unint64_t)&a2[v1434] & v76;
      v136((char *)((unint64_t)&a1[v1434] & v76), (char *)v137, v1448);
      v138 = (((unint64_t)&a1[v1434] & v76) + v1479 + v69) & ~v69;
      v139 = (v137 + v1479 + v69) & ~v69;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1430 + 32))(v138, v139, v1431);
      v140 = (_QWORD *)((v1439 + v138) & 0xFFFFFFFFFFFFFFF8);
      v141 = (_QWORD *)((v1439 + v139) & 0xFFFFFFFFFFFFFFF8);
      *v140 = *v141;
      v142 = ((unint64_t)v140 + v1432) & v1495;
      v143 = ((unint64_t)v141 + v1432) & v1495;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1485 + 32))(v142, v143, v1426);
      v144 = (_QWORD *)((v1420 + v143) & 0xFFFFFFFFFFFFF8);
      v145 = (_QWORD *)((v1420 + v142) & 0xFFFFFFFFFFFFF8);
      *v145 = *v144;
      *(_OWORD *)(((unint64_t)v145 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v144 + 15) & 0xFFFFFFFFFFFFF8);
      *(_OWORD *)(v1369 + v138) = *(_OWORD *)(v1369 + v139);
      v146 = (v1503 + v1369 + v138) & v81;
      v147 = (v1503 + v1369 + v139) & v81;
      *(_BYTE *)v146 = *(_BYTE *)v147;
      v148 = v146 | 4;
      v149 = *(_DWORD *)(v147 | 4);
      *(_BYTE *)(v148 + 4) = *(_BYTE *)((v147 | 4) + 4);
      *(_DWORD *)v148 = v149;
      *(_WORD *)(v146 + 10) = *(_WORD *)(v147 + 0xA);
      v150 = *(void (**)(size_t, size_t, uint64_t))(v1445 + 32);
      v150((v1443 + v146) & ~v1451, (v1443 + v147) & ~v1451, v1441);
      v151 = (v1440 + ((v1443 + v146) & ~v1451)) & ~v1451;
      v152 = (v1440 + ((v1443 + v147) & ~v1451)) & ~v1451;
      v150(v151, v152, v1441);
      v153 = (_BYTE *)(v151 + v1444);
      *v153 = *(_BYTE *)(v152 + v1444);
      v153[1] = *(_BYTE *)(v152 + v1444 + 1);
      v153[2] = *(_BYTE *)(v152 + v1444 + 2);
      v153[3] = *(_BYTE *)(v152 + v1444 + 3);
      v153[4] = *(_BYTE *)(v152 + v1444 + 4);
      v154 = (v151 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
      v155 = (v152 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)v154 = *(_OWORD *)v155;
      *(_BYTE *)(v154 + 16) = *(_BYTE *)(v155 + 16);
      *(_BYTE *)(v154 + 17) = *(_BYTE *)(v155 + 17);
      *(_BYTE *)(v154 + 18) = *(_BYTE *)(v155 + 18);
      *(_BYTE *)(v154 + 19) = *(_BYTE *)(v155 + 19);
      v156 = (v154 + 27) & 0xFFFFFFFFFFFFFFF8;
      v157 = (v155 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v156 = *(_QWORD *)v157;
      *(_BYTE *)(v156 + 8) = *(_BYTE *)(v157 + 8);
      *(_BYTE *)(v156 + 9) = *(_BYTE *)(v157 + 9);
      *(_BYTE *)(v156 + 10) = *(_BYTE *)(v157 + 10);
      *(_BYTE *)(v156 + 11) = *(_BYTE *)(v157 + 11);
      *(_BYTE *)(v156 + 12) = *(_BYTE *)(v157 + 12);
      v158 = (_QWORD *)((v154 + 47) & 0xFFFFFFFFFFFFF8);
      v159 = (_QWORD *)((v155 + 47) & 0xFFFFFFFFFFFFF8);
      *v158 = *v159;
      v160 = ((unint64_t)v158 + 15) & 0xFFFFFFFFFFFFFFF8;
      v161 = ((unint64_t)v159 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v160 = *(_QWORD *)v161;
      *(_BYTE *)(v160 + 8) = *(_BYTE *)(v161 + 8);
      *(_BYTE *)(v160 + 9) = *(_BYTE *)(v161 + 9);
      v162 = (void *)((v1436 + v160) & ~v1451);
      v163 = (const void *)((v1436 + v161) & ~v1451);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1445 + 48))(v163, 1, v1441))
      {
        memcpy(v162, v163, __n);
      }
      else
      {
        v150((size_t)v162, (size_t)v163, v1441);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1445 + 56))(v162, 0, 1, v1441);
      }
      v276 = (_QWORD *)(((unint64_t)v163 + v1437) & 0xFFFFFFFFFFFFFFF8);
      v277 = (_QWORD *)(((unint64_t)v162 + v1437) & 0xFFFFFFFFFFFFFFF8);
      *v277 = *v276;
      v278 = ((unint64_t)v277 + 15) & 0xFFFFFFFFFFFFFFF8;
      v279 = ((unint64_t)v276 + 15) & 0xFFFFFFFFFFFFFFF8;
      v280 = *(_QWORD *)v279;
      *(_BYTE *)(v278 + 8) = *(_BYTE *)(v279 + 8);
      *(_QWORD *)v278 = v280;
      v281 = (_QWORD *)(((unint64_t)v277 + 31) & 0xFFFFFFFFFFFFF8);
      v282 = (_QWORD *)(((unint64_t)v276 + 31) & 0xFFFFFFFFFFFFF8);
      *v281 = *v282;
      v283 = (_OWORD *)(((unint64_t)v281 + 15) & 0xFFFFFFFFFFFFFFF8);
      v284 = (_OWORD *)(((unint64_t)v282 + 15) & 0xFFFFFFFFFFFFFFF8);
      *v283 = *v284;
      v285 = ((unint64_t)v283 + 19) & 0xFFFFFFFFFFFFFFF8;
      v286 = ((unint64_t)v284 + 19) & 0xFFFFFFFFFFFFFFF8;
      v287 = *(_QWORD *)v286;
      *(_BYTE *)(v285 + 8) = *(_BYTE *)(v286 + 8);
      *(_QWORD *)v285 = v287;
      *(_BYTE *)(v285 + 9) = *(_BYTE *)(v286 + 9);
      v288 = (v285 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      v289 = (v286 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v280) = *(_DWORD *)v289;
      *(_BYTE *)(v288 + 4) = *(_BYTE *)(v289 + 4);
      *(_DWORD *)v288 = v280;
      *(_OWORD *)((v285 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v286 + 25) & 0xFFFFFFFFFFFFF8);
      v290 = v1438 + v146;
      v291 = *(_OWORD *)(v1438 + v147 + 112);
      v293 = *(_OWORD *)(v1438 + v147 + 64);
      v292 = *(_OWORD *)(v1438 + v147 + 80);
      *(_OWORD *)(v290 + 96) = *(_OWORD *)(v1438 + v147 + 96);
      *(_OWORD *)(v290 + 112) = v291;
      *(_OWORD *)(v290 + 64) = v293;
      *(_OWORD *)(v290 + 80) = v292;
      v294 = *(_OWORD *)(v1438 + v147 + 176);
      v296 = *(_OWORD *)(v1438 + v147 + 128);
      v295 = *(_OWORD *)(v1438 + v147 + 144);
      *(_OWORD *)(v290 + 160) = *(_OWORD *)(v1438 + v147 + 160);
      *(_OWORD *)(v290 + 176) = v294;
      *(_OWORD *)(v290 + 128) = v296;
      *(_OWORD *)(v290 + 144) = v295;
      v298 = *(_OWORD *)(v1438 + v147 + 208);
      v297 = *(_OWORD *)(v1438 + v147 + 224);
      v299 = *(_OWORD *)(v1438 + v147 + 192);
      *(_QWORD *)(v290 + 240) = *(_QWORD *)(v1438 + v147 + 240);
      *(_OWORD *)(v290 + 208) = v298;
      *(_OWORD *)(v290 + 224) = v297;
      *(_OWORD *)(v290 + 192) = v299;
      v300 = *(_OWORD *)(v1438 + v147);
      v301 = *(_OWORD *)(v1438 + v147 + 16);
      v302 = *(_OWORD *)(v1438 + v147 + 48);
      *(_OWORD *)(v290 + 32) = *(_OWORD *)(v1438 + v147 + 32);
      *(_OWORD *)(v290 + 48) = v302;
      *(_OWORD *)v290 = v300;
      *(_OWORD *)(v290 + 16) = v301;
      v303 = (_OWORD *)((v1438 + v146 + 255) & 0xFFFFFFFFFFFFFFF8);
      v304 = (__int128 *)((v1438 + v147 + 255) & 0xFFFFFFFFFFFFFFF8);
      v305 = *v304;
      *(_OWORD *)((char *)v303 + 9) = *(__int128 *)((char *)v304 + 9);
      *v303 = v305;
      v306 = (v1438 + v146 + 287) & 0xFFFFFFFFFFFFFFF8;
      v307 = (v1438 + v147 + 287) & 0xFFFFFFFFFFFFFFF8;
      v308 = *(_OWORD *)v307;
      *(_BYTE *)(v306 + 16) = *(_BYTE *)(v307 + 16);
      *(_OWORD *)v306 = v308;
      v309 = (_QWORD *)((v1438 + v146 + 311) & 0xFFFFFFFFFFFFF8);
      v310 = (_QWORD *)((v1438 + v147 + 311) & 0xFFFFFFFFFFFFF8);
      *v309 = *v310;
      *(_OWORD *)(((unint64_t)v309 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v310 + 15) & 0xFFFFFFFFFFFFF8);
      v83 = a1;
      if (v1460 > 3)
        goto LABEL_350;
      v311 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v311 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 8;
      }
      else if (v311 <= 0xD8)
      {
LABEL_350:
        a1[v1460] = 8;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 8;
      }
      return v83;
    case 9u:
      v164 = a2[v1463];
      if (v164 >= 2)
      {
        if (v1463 <= 3)
          v165 = v1463;
        else
          v165 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v473 = v164 == 1;
      if (v164 == 1)
        v474 = v1450;
      else
        v474 = v1449;
      if (v164 == 1)
        v475 = v1448;
      else
        v475 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v474 + 32))(a1, a2, v475);
      a1[v1463] = v473;
      if (v1460 > 3)
        goto LABEL_474;
      v476 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v476 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 9;
      }
      else if (v476 <= 0xD8)
      {
LABEL_474:
        a1[v1460] = 9;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 9;
      }
      return v83;
    case 0xAu:
      v166 = a2[v1463];
      if (v166 >= 2)
      {
        if (v1463 <= 3)
          v167 = v1463;
        else
          v167 = 4;
        __asm { BR              X12 }
      }
      v219 = ~v1466;
      v83 = a1;
      v477 = v166 == 1;
      if (v166 == 1)
        v478 = v1450;
      else
        v478 = v1449;
      if (v166 == 1)
        v479 = v1448;
      else
        v479 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v478 + 32))(a1, a2, v479);
      a1[v1463] = v477;
      v480 = (unint64_t)&a1[v1442] & v77;
      v481 = (unsigned __int8 *)((unint64_t)&a2[v1442] & v77);
      v482 = v481[v1463];
      if (v482 > 1)
      {
        v483 = v1504;
        memcpy((void *)((unint64_t)&a1[v1442] & v219), v481, v1504);
      }
      else
      {
        if (v482 == 1)
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v1450 + 32))((unint64_t)&a1[v1442] & v219, v481, v1448);
          *(_BYTE *)(v480 + v1463) = 1;
        }
        else
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v1449 + 32))((unint64_t)&a1[v1442] & v219, v481, AssociatedTypeWitness);
          *(_BYTE *)(v480 + v1463) = 0;
        }
        v483 = v1504;
      }
      v484 = (_BYTE *)(v480 + v483);
      *v484 = v481[v483];
      v484[1] = v481[v483 + 1];
      if (v1460 > 3)
        goto LABEL_492;
      v485 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v485 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 10;
      }
      else if (v485 <= 0xD8)
      {
LABEL_492:
        a1[v1460] = 10;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 10;
      }
      return v83;
    case 0xBu:
      v168 = a2[v1463];
      if (v168 >= 2)
      {
        if (v1463 <= 3)
          v169 = v1463;
        else
          v169 = 4;
        __asm { BR              X12 }
      }
      v220 = ~v1466;
      v83 = a1;
      v486 = v168 == 1;
      if (v168 == 1)
        v487 = v1450;
      else
        v487 = v1449;
      if (v168 == 1)
        v488 = v1448;
      else
        v488 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v487 + 32))(a1, a2, v488);
      a1[v1463] = v486;
      v489 = (unint64_t)&a1[v1442] & v77;
      v490 = (unsigned __int8 *)((unint64_t)&a2[v1442] & v77);
      v491 = v490[v1463];
      if (v491 > 1)
      {
        v492 = v1504;
        memcpy((void *)((unint64_t)&a1[v1442] & v220), v490, v1504);
      }
      else
      {
        if (v491 == 1)
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v1450 + 32))((unint64_t)&a1[v1442] & v220, v490, v1448);
          *(_BYTE *)(v489 + v1463) = 1;
        }
        else
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v1449 + 32))((unint64_t)&a1[v1442] & v220, v490, AssociatedTypeWitness);
          *(_BYTE *)(v489 + v1463) = 0;
        }
        v492 = v1504;
      }
      v493 = (_BYTE *)(v489 + v492);
      *v493 = v490[v492];
      v493[1] = v490[v492 + 1];
      if (v1460 > 3)
        goto LABEL_510;
      v494 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v494 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 11;
      }
      else if (v494 <= 0xD8)
      {
LABEL_510:
        a1[v1460] = 11;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 11;
      }
      return v83;
    case 0xCu:
      v170 = a2[v1463];
      if (v170 >= 2)
      {
        if (v1463 <= 3)
          v171 = v1463;
        else
          v171 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v221 = v1460;
      v495 = v170 == 1;
      if (v170 == 1)
        v496 = v1450;
      else
        v496 = v1449;
      if (v170 == 1)
        v497 = v1448;
      else
        v497 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v496 + 32))(a1, a2, v497);
      a1[v1463] = v495;
      a1[v1504] = a2[v1504];
      *(_QWORD *)((unint64_t)&a1[v1407 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&a2[v1407 + 7] & 0xFFFFFFFFFFFFF8);
      if (v1460 > 3)
        goto LABEL_522;
      v498 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v498 > 0xFFD8)
      {
        v499 = 12;
        goto LABEL_1170;
      }
      if (v498 <= 0xD8)
LABEL_522:
        a1[v1460] = 12;
      else
        *(_WORD *)&a1[v1460] = 12;
      return v83;
    case 0xDu:
      v172 = a2[v1463];
      if (v172 >= 2)
      {
        if (v1463 <= 3)
          v173 = v1463;
        else
          v173 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v500 = v172 == 1;
      if (v172 == 1)
        v501 = v1450;
      else
        v501 = v1449;
      if (v172 == 1)
        v502 = v1448;
      else
        v502 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v501 + 32))(a1, a2, v502);
      a1[v1463] = v500;
      a1[v1504] = a2[v1504];
      if (v1460 > 3)
        goto LABEL_534;
      v503 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v503 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 13;
      }
      else if (v503 <= 0xD8)
      {
LABEL_534:
        a1[v1460] = 13;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 13;
      }
      return v83;
    case 0xEu:
      v174 = a2[v1463];
      if (v174 >= 2)
      {
        if (v1463 <= 3)
          v175 = v1463;
        else
          v175 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v504 = v174 == 1;
      if (v174 == 1)
        v505 = v1450;
      else
        v505 = v1449;
      if (v174 == 1)
        v506 = v1448;
      else
        v506 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v505 + 32))(a1, a2, v506);
      a1[v1463] = v504;
      *(_QWORD *)((unint64_t)&a1[v1504 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&a2[v1504 + 7] & 0xFFFFFFFFFFFFF8);
      if (v1460 > 3)
        goto LABEL_546;
      v507 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v507 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 14;
      }
      else if (v507 <= 0xD8)
      {
LABEL_546:
        a1[v1460] = 14;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 14;
      }
      return v83;
    case 0xFu:
      v176 = a2[v1463];
      if (v176 >= 2)
      {
        if (v1463 <= 3)
          v177 = v1463;
        else
          v177 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v508 = v176 == 1;
      if (v176 == 1)
        v509 = v1450;
      else
        v509 = v1449;
      if (v176 == 1)
        v510 = v1448;
      else
        v510 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v509 + 32))(a1, a2, v510);
      a1[v1463] = v508;
      *(_QWORD *)((unint64_t)&a1[v1504 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&a2[v1504 + 7] & 0xFFFFFFFFFFFFF8);
      if (v1460 > 3)
        goto LABEL_558;
      v511 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v511 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 15;
      }
      else if (v511 <= 0xD8)
      {
LABEL_558:
        a1[v1460] = 15;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 15;
      }
      return v83;
    case 0x10u:
      v178 = *((_OWORD *)a2 + 1);
      v83 = a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v178;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
      if (v1460 > 3)
        goto LABEL_187;
      v222 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v222 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 16;
      }
      else if (v222 <= 0xD8)
      {
LABEL_187:
        a1[v1460] = 16;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 16;
      }
      return v83;
    case 0x11u:
      v179 = a2[v1463];
      if (v179 >= 2)
      {
        if (v1463 <= 3)
          v180 = v1463;
        else
          v180 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v512 = v179 == 1;
      if (v179 == 1)
        v513 = v1450;
      else
        v513 = v1449;
      if (v179 == 1)
        v514 = v1448;
      else
        v514 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v513 + 32))(a1, a2, v514);
      a1[v1463] = v512;
      if (v1460 > 3)
        goto LABEL_570;
      v515 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v515 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 17;
      }
      else if (v515 <= 0xD8)
      {
LABEL_570:
        a1[v1460] = 17;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 17;
      }
      return v83;
    case 0x12u:
      v83 = a1;
      (*(void (**)(char *, char *, uint64_t))(v1449 + 32))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1450 + 32))((unint64_t)&a1[v1413] & v76, (unint64_t)&a2[v1413] & v76, v1448);
      if (v1460 > 3)
        goto LABEL_194;
      v223 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v223 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 18;
      }
      else if (v223 <= 0xD8)
      {
LABEL_194:
        a1[v1460] = 18;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 18;
      }
      return v83;
    case 0x13u:
      v83 = a1;
      *a1 = *a2;
      v181 = *(unsigned __int8 *)(((unint64_t)&a2[v1466 + 1] & v77) + v1463);
      if (v181 >= 2)
      {
        if (v1463 <= 3)
          v182 = v1463;
        else
          v182 = 4;
        __asm { BR              X12 }
      }
      v516 = v181 == 1;
      if (v181 == 1)
        v517 = v1450;
      else
        v517 = v1449;
      (*(void (**)(unint64_t))(v517 + 32))((unint64_t)&a1[v1466 + 1] & v77);
      *(_BYTE *)(((unint64_t)&a1[v1466 + 1] & v77) + v1463) = v516;
      if (v1460 > 3)
        goto LABEL_579;
      v518 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v518 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 19;
      }
      else if (v518 <= 0xD8)
      {
LABEL_579:
        a1[v1460] = 19;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 19;
      }
      return v83;
    case 0x14u:
      v83 = a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      if (v1460 > 3)
        goto LABEL_201;
      v224 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v224 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 20;
      }
      else if (v224 <= 0xD8)
      {
LABEL_201:
        a1[v1460] = 20;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 20;
      }
      return v83;
    case 0x15u:
      v83 = a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      if (v1460 > 3)
        goto LABEL_203;
      v225 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v225 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 21;
      }
      else if (v225 <= 0xD8)
      {
LABEL_203:
        a1[v1460] = 21;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 21;
      }
      return v83;
    case 0x16u:
      v83 = a1;
      *a1 = *a2;
      if (v1460 > 3)
        goto LABEL_205;
      v226 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v226 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 22;
      }
      else if (v226 <= 0xD8)
      {
LABEL_205:
        a1[v1460] = 22;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 22;
      }
      return v83;
    case 0x17u:
      v83 = a1;
      *a1 = *a2;
      if (v1460 > 3)
        goto LABEL_207;
      v227 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v227 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 23;
      }
      else if (v227 <= 0xD8)
      {
LABEL_207:
        a1[v1460] = 23;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 23;
      }
      return v83;
    case 0x18u:
      v183 = a2[v1463];
      if (v183 >= 2)
      {
        if (v1463 <= 3)
          v184 = v1463;
        else
          v184 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v519 = v183 == 1;
      if (v183 == 1)
        v520 = v1450;
      else
        v520 = v1449;
      if (v183 == 1)
        v521 = v1448;
      else
        v521 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v520 + 32))(a1, a2, v521);
      a1[v1463] = v519;
      if (v1460 > 3)
        goto LABEL_591;
      v522 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v522 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 24;
      }
      else if (v522 <= 0xD8)
      {
LABEL_591:
        a1[v1460] = 24;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 24;
      }
      return v83;
    case 0x19u:
      v185 = a2[v1463];
      if (v185 >= 2)
      {
        if (v1463 <= 3)
          v186 = v1463;
        else
          v186 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v523 = v185 == 1;
      if (v185 == 1)
        v524 = v1450;
      else
        v524 = v1449;
      if (v185 == 1)
        v525 = v1448;
      else
        v525 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v524 + 32))(a1, a2, v525);
      a1[v1463] = v523;
      if (v1460 > 3)
        goto LABEL_603;
      v526 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v526 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 25;
      }
      else if (v526 <= 0xD8)
      {
LABEL_603:
        a1[v1460] = 25;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 25;
      }
      return v83;
    case 0x1Au:
      v187 = a2[v1463];
      if (v187 >= 2)
      {
        if (v1463 <= 3)
          v188 = v1463;
        else
          v188 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v527 = v187 == 1;
      if (v187 == 1)
        v528 = v1450;
      else
        v528 = v1449;
      if (v187 == 1)
        v529 = v1448;
      else
        v529 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v528 + 32))(a1, a2, v529);
      a1[v1463] = v527;
      if (v1460 > 3)
        goto LABEL_615;
      v530 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v530 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 26;
      }
      else if (v530 <= 0xD8)
      {
LABEL_615:
        a1[v1460] = 26;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 26;
      }
      return v83;
    case 0x1Bu:
      v1513 = ~v1509;
      v189 = ~v1462;
      v1455 = ~v1451;
      v1481 = ~v1471;
      v1465 = ~v1458;
      v1468 = ~v8;
      v190 = a2[v66];
      v1365 = ~v36;
      if (v190 >= 2)
      {
        if (v66 <= 3)
          v191 = v66;
        else
          v191 = 4;
        __asm { BR              X14 }
      }
      v228 = __n;
      v221 = v1460;
      v1360 = v66;
      if (v190 == 1)
      {
        v83 = a1;
        v813 = ~v64;
        v814 = ~v35;
        switch(a2[v1393])
        {
          case 0:
            v1488 = *(_QWORD *)(v1426 - 8);
            v1371 = ((((v1420 + ((v35 + 8 + (v1439 & 0xFFFFFFFFFFFFFFF8)) & ~v35)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v815 = *(void (**)(char *, char *, uint64_t))(v1450 + 32);
            v815(a1, a2, v1448);
            v1505 = (void *)((unint64_t)&a1[v1385] & v189);
            v816 = (void *)((unint64_t)&a2[v1385] & v189);
            if (v1402 == v1415)
            {
              v817 = (*(uint64_t (**)(unint64_t))(v1450 + 48))((unint64_t)&a2[v1385] & v189);
              v818 = v1365;
              v819 = (void *)((unint64_t)&a1[v1385] & v189);
LABEL_1072:
              if (v817)
              {
LABEL_1073:
                memcpy(v819, v816, v1427);
                v888 = v1360;
                v932 = v1399;
                v889 = v1393;
LABEL_1074:
                v933 = __n;
                goto LABEL_1080;
              }
              v859 = ((unint64_t)v816 + v1434) & v1468;
              v860 = (v1400 + v859) & v818;
              goto LABEL_1076;
            }
            v859 = ((unint64_t)v816 + v1434) & v1468;
            v818 = v1365;
            v860 = (v1400 + v859) & v1365;
            if (v1422 == v1415)
            {
              v819 = (void *)((unint64_t)&a1[v1385] & v189);
              if (v1404 == v1422)
              {
                v861 = *(uint64_t (**)(unint64_t))(v1430 + 48);
                v862 = (v1400 + v859) & v1365;
LABEL_1071:
                v817 = v861(v862);
                v818 = v1365;
                goto LABEL_1072;
              }
              v917 = (unint64_t *)((v1439 + v860) & 0xFFFFFFFFFFFFFFF8);
              if (v1394 > 0x7FFFFFFE)
              {
                v862 = ((unint64_t)v917 + v1432) & v814;
                v861 = *(uint64_t (**)(unint64_t))(v1488 + 48);
                goto LABEL_1071;
              }
              v918 = *v917;
            }
            else
            {
              v890 = v860 + v1371;
              v819 = (void *)((unint64_t)&a1[v1385] & v189);
              if ((v1389 & 0x80000000) == 0)
              {
                v891 = *(_QWORD *)(v890 + 8);
                if (v891 >= 0xFFFFFFFF)
                  LODWORD(v891) = -1;
                v817 = v891 + 1;
                goto LABEL_1072;
              }
              v862 = (v1443 + ((v1503 + v890) & v1513)) & v1455;
              if (v1414 > 0x7FFFFFFD)
              {
                v861 = *(uint64_t (**)(unint64_t))(v1445 + 48);
                goto LABEL_1071;
              }
              v918 = *(_QWORD *)(((v1387 + ((v1440 + v862) & v1455)) & 0xFFFFFFFFFFFFF8) + 8);
            }
            if (v918 >= 0xFFFFFFFF)
              LODWORD(v918) = -1;
            if ((v918 + 1) >= 2)
              goto LABEL_1073;
LABEL_1076:
            v1501 = (void *)((unint64_t)&a2[v1385] & v189);
            v934 = v818;
            v815((char *)v819, (char *)v816, v1448);
            v935 = ((unint64_t)v819 + v1434) & v1468;
            v815((char *)v935, (char *)v859, v1448);
            v936 = (v1400 + v935) & v934;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1430 + 32))(v936, v860, v1431);
            v937 = (_QWORD *)((v1439 + v936) & 0xFFFFFFFFFFFFFFF8);
            v938 = (_QWORD *)((v1439 + v860) & 0xFFFFFFFFFFFFFFF8);
            *v937 = *v938;
            v939 = ((unint64_t)v937 + v1432) & v814;
            v940 = ((unint64_t)v938 + v1432) & v814;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1488 + 32))(v939, v940, v1426);
            v941 = (_QWORD *)((v1420 + v940) & 0xFFFFFFFFFFFFF8);
            v942 = (_QWORD *)((v1420 + v939) & 0xFFFFFFFFFFFFF8);
            *v942 = *v941;
            *(_OWORD *)(((unint64_t)v942 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v941 + 15) & 0xFFFFFFFFFFFFF8);
            *(_OWORD *)(v936 + v1371) = *(_OWORD *)(v860 + v1371);
            v943 = (v1503 + v936 + v1371) & v1513;
            v944 = (v1503 + v860 + v1371) & v1513;
            *(_BYTE *)v943 = *(_BYTE *)v944;
            v945 = v943 | 4;
            v946 = *(_DWORD *)(v944 | 4);
            *(_BYTE *)(v945 + 4) = *(_BYTE *)((v944 | 4) + 4);
            *(_DWORD *)v945 = v946;
            *(_WORD *)(v943 + 10) = *(_WORD *)(v944 + 0xA);
            v947 = *(void (**)(size_t, size_t, uint64_t))(v1445 + 32);
            v947((v1443 + v943) & v1455, (v1443 + v944) & v1455, v1441);
            v948 = (v1440 + ((v1443 + v943) & v1455)) & v1455;
            v949 = (v1440 + ((v1443 + v944) & v1455)) & v1455;
            v947(v948, v949, v1441);
            v950 = (_BYTE *)(v948 + v1444);
            *v950 = *(_BYTE *)(v949 + v1444);
            v950[1] = *(_BYTE *)(v949 + v1444 + 1);
            v950[2] = *(_BYTE *)(v949 + v1444 + 2);
            v950[3] = *(_BYTE *)(v949 + v1444 + 3);
            v950[4] = *(_BYTE *)(v949 + v1444 + 4);
            v951 = (v948 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
            v952 = (v949 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)v951 = *(_OWORD *)v952;
            *(_BYTE *)(v951 + 16) = *(_BYTE *)(v952 + 16);
            *(_BYTE *)(v951 + 17) = *(_BYTE *)(v952 + 17);
            *(_BYTE *)(v951 + 18) = *(_BYTE *)(v952 + 18);
            *(_BYTE *)(v951 + 19) = *(_BYTE *)(v952 + 19);
            v953 = (v951 + 27) & 0xFFFFFFFFFFFFFFF8;
            v954 = (v952 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v953 = *(_QWORD *)v954;
            *(_BYTE *)(v953 + 8) = *(_BYTE *)(v954 + 8);
            *(_BYTE *)(v953 + 9) = *(_BYTE *)(v954 + 9);
            *(_BYTE *)(v953 + 10) = *(_BYTE *)(v954 + 10);
            *(_BYTE *)(v953 + 11) = *(_BYTE *)(v954 + 11);
            *(_BYTE *)(v953 + 12) = *(_BYTE *)(v954 + 12);
            v955 = (_QWORD *)((v951 + 47) & 0xFFFFFFFFFFFFF8);
            v956 = (_QWORD *)((v952 + 47) & 0xFFFFFFFFFFFFF8);
            *v955 = *v956;
            v957 = ((unint64_t)v955 + 15) & 0xFFFFFFFFFFFFFFF8;
            v958 = ((unint64_t)v956 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v957 = *(_QWORD *)v958;
            *(_BYTE *)(v957 + 8) = *(_BYTE *)(v958 + 8);
            *(_BYTE *)(v957 + 9) = *(_BYTE *)(v958 + 9);
            v959 = (void *)((v1436 + v957) & v1455);
            v960 = (const void *)((v1436 + v958) & v1455);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1445 + 48))(v960, 1, v1441))
            {
              memcpy(v959, v960, __n);
            }
            else
            {
              v947((size_t)v959, (size_t)v960, v1441);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1445 + 56))(v959, 0, 1, v1441);
            }
            v961 = (_QWORD *)(((unint64_t)v959 + v1437) & 0xFFFFFFFFFFFFFFF8);
            v962 = (_QWORD *)(((unint64_t)v960 + v1437) & 0xFFFFFFFFFFFFFFF8);
            *v961 = *v962;
            v963 = ((unint64_t)v961 + 15) & 0xFFFFFFFFFFFFFFF8;
            v964 = ((unint64_t)v962 + 15) & 0xFFFFFFFFFFFFFFF8;
            v965 = *(_QWORD *)v964;
            *(_BYTE *)(v963 + 8) = *(_BYTE *)(v964 + 8);
            *(_QWORD *)v963 = v965;
            v966 = (_QWORD *)(((unint64_t)v961 + 31) & 0xFFFFFFFFFFFFF8);
            v967 = (_QWORD *)(((unint64_t)v962 + 31) & 0xFFFFFFFFFFFFF8);
            *v966 = *v967;
            v968 = (_OWORD *)(((unint64_t)v966 + 15) & 0xFFFFFFFFFFFFFFF8);
            v969 = (_OWORD *)(((unint64_t)v967 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v968 = *v969;
            v970 = ((unint64_t)v968 + 19) & 0xFFFFFFFFFFFFFFF8;
            v971 = ((unint64_t)v969 + 19) & 0xFFFFFFFFFFFFFFF8;
            v972 = *(_QWORD *)v971;
            *(_BYTE *)(v970 + 8) = *(_BYTE *)(v971 + 8);
            *(_QWORD *)v970 = v972;
            *(_BYTE *)(v970 + 9) = *(_BYTE *)(v971 + 9);
            v973 = (v970 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v974 = (v971 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v965) = *(_DWORD *)v974;
            *(_BYTE *)(v973 + 4) = *(_BYTE *)(v974 + 4);
            *(_DWORD *)v973 = v965;
            *(_OWORD *)((v970 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v971 + 25) & 0xFFFFFFFFFFFFF8);
            v975 = v943 + v1438;
            v976 = *(_OWORD *)(v944 + v1438 + 112);
            v978 = *(_OWORD *)(v944 + v1438 + 64);
            v977 = *(_OWORD *)(v944 + v1438 + 80);
            *(_OWORD *)(v975 + 96) = *(_OWORD *)(v944 + v1438 + 96);
            *(_OWORD *)(v975 + 112) = v976;
            *(_OWORD *)(v975 + 64) = v978;
            *(_OWORD *)(v975 + 80) = v977;
            v979 = *(_OWORD *)(v944 + v1438 + 176);
            v981 = *(_OWORD *)(v944 + v1438 + 128);
            v980 = *(_OWORD *)(v944 + v1438 + 144);
            *(_OWORD *)(v975 + 160) = *(_OWORD *)(v944 + v1438 + 160);
            *(_OWORD *)(v975 + 176) = v979;
            *(_OWORD *)(v975 + 128) = v981;
            *(_OWORD *)(v975 + 144) = v980;
            v983 = *(_OWORD *)(v944 + v1438 + 208);
            v982 = *(_OWORD *)(v944 + v1438 + 224);
            v984 = *(_OWORD *)(v944 + v1438 + 192);
            *(_QWORD *)(v975 + 240) = *(_QWORD *)(v944 + v1438 + 240);
            *(_OWORD *)(v975 + 208) = v983;
            *(_OWORD *)(v975 + 224) = v982;
            *(_OWORD *)(v975 + 192) = v984;
            v985 = *(_OWORD *)(v944 + v1438);
            v986 = *(_OWORD *)(v944 + v1438 + 16);
            v987 = *(_OWORD *)(v944 + v1438 + 48);
            *(_OWORD *)(v975 + 32) = *(_OWORD *)(v944 + v1438 + 32);
            *(_OWORD *)(v975 + 48) = v987;
            *(_OWORD *)v975 = v985;
            *(_OWORD *)(v975 + 16) = v986;
            v988 = (_OWORD *)((v943 + v1438 + 255) & 0xFFFFFFFFFFFFFFF8);
            v989 = (__int128 *)((v944 + v1438 + 255) & 0xFFFFFFFFFFFFFFF8);
            v990 = *v989;
            *(_OWORD *)((char *)v988 + 9) = *(__int128 *)((char *)v989 + 9);
            *v988 = v990;
            v991 = (v943 + v1438 + 287) & 0xFFFFFFFFFFFFFFF8;
            v992 = (v944 + v1438 + 287) & 0xFFFFFFFFFFFFFFF8;
            v993 = *(_OWORD *)v992;
            *(_BYTE *)(v991 + 16) = *(_BYTE *)(v992 + 16);
            *(_OWORD *)v991 = v993;
            v994 = (_QWORD *)((v943 + v1438 + 311) & 0xFFFFFFFFFFFFF8);
            v995 = (_QWORD *)((v944 + v1438 + 311) & 0xFFFFFFFFFFFFF8);
            *v994 = *v995;
            *(_OWORD *)(((unint64_t)v994 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v995 + 15) & 0xFFFFFFFFFFFFF8);
            v933 = v1444;
            v888 = v1360;
            v932 = v1399;
            v889 = v1393;
            v819 = v1505;
            v816 = v1501;
            if (!v1414)
              goto LABEL_1074;
LABEL_1080:
            v832 = 0;
            v996 = ((((v932
                     + ((((((((((v1421 + v933 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 19) & 0xFFFFFFFFFFFFFFF8)
                       + 25) & 0xFFFFFFFFFFFFFFF8)
                     + 327) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 16;
            v997 = (_QWORD *)(((unint64_t)v819 + v996) & 0xFFFFFFFFFFFFFFF8);
            v998 = (_QWORD *)(((unint64_t)v816 + v996) & 0xFFFFFFFFFFFFFFF8);
            *v997 = *v998;
            *(_QWORD *)(((unint64_t)v997 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v998 + 15) & 0xFFFFFFFFFFFFF8);
            v831 = 1;
            v221 = v1460;
LABEL_1164:
            v83[v889] = v832;
            v83[v888] = v831;
            if (v221 <= 3)
            {
              v1358 = ((1 << (8 * v221)) + 5) >> (8 * v221);
              if (v1358 > 0xFFD8)
              {
                v499 = 27;
LABEL_1170:
                *(_DWORD *)&v83[v221] = v499;
                return v83;
              }
              if (v1358 > 0xD8)
              {
                *(_WORD *)&v83[v221] = 27;
                return v83;
              }
            }
            v83[v221] = 27;
            return v83;
          case 1:
            v1363 = v80;
            v1489 = *(_QWORD *)(v1426 - 8);
            v1372 = ((((v1420 + ((v35 + 8 + (v1439 & 0xFFFFFFFFFFFFFFF8)) & ~v35)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v820 = *(void (**)(char *, char *, uint64_t))(v1450 + 32);
            v820(a1, a2, v1448);
            v1506 = (void *)((unint64_t)&a1[v1385] & v189);
            v821 = (void *)((unint64_t)&a2[v1385] & v189);
            if (v1402 == v1415)
            {
              v822 = (*(uint64_t (**)(void *))(v1450 + 48))(v821);
              v823 = v1365;
LABEL_1083:
              v999 = ~v1458;
              if (v822)
              {
LABEL_1084:
                v1000 = (unint64_t)&a1[v1385] & v189;
                memcpy(v1506, v821, v39);
                v1001 = v1449;
                v1002 = v1399;
                v1003 = v1384;
LABEL_1085:
                v1004 = __n;
                goto LABEL_1091;
              }
              v863 = ((unint64_t)v821 + v1434) & v1468;
              v864 = (v1400 + v863) & v823;
LABEL_1087:
              v1005 = v823;
              v820((char *)v1506, (char *)v821, v1448);
              v1006 = ((unint64_t)v1506 + v1434) & v1468;
              v820((char *)v1006, (char *)v863, v1448);
              v1007 = (v1400 + v1006) & v1005;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1430 + 32))(v1007, v864, v1431);
              v1008 = (_QWORD *)((v1439 + v1007) & 0xFFFFFFFFFFFFFFF8);
              v1009 = (_QWORD *)((v1439 + v864) & 0xFFFFFFFFFFFFFFF8);
              *v1008 = *v1009;
              v1010 = ((unint64_t)v1008 + v1432) & v814;
              v1011 = ((unint64_t)v1009 + v1432) & v814;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1489 + 32))(v1010, v1011, v1426);
              v1012 = (_QWORD *)((v1420 + v1011) & 0xFFFFFFFFFFFFF8);
              v1013 = (_QWORD *)((v1420 + v1010) & 0xFFFFFFFFFFFFF8);
              *v1013 = *v1012;
              *(_OWORD *)(((unint64_t)v1013 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1012
                                                                                            + 15) & 0xFFFFFFFFFFFFF8);
              *(_OWORD *)(v1007 + v1372) = *(_OWORD *)(v864 + v1372);
              v1014 = (v1503 + v1007 + v1372) & v1513;
              v1015 = (v1503 + v864 + v1372) & v1513;
              *(_BYTE *)v1014 = *(_BYTE *)v1015;
              v1016 = v1014 | 4;
              v1017 = *(_DWORD *)(v1015 | 4);
              *(_BYTE *)(v1016 + 4) = *(_BYTE *)((v1015 | 4) + 4);
              *(_DWORD *)v1016 = v1017;
              *(_WORD *)(v1014 + 10) = *(_WORD *)(v1015 + 0xA);
              v1018 = *(void (**)(size_t, size_t, uint64_t))(v1445 + 32);
              v1018((v1443 + v1014) & v1455, (v1443 + v1015) & v1455, v1441);
              v1019 = (v1440 + ((v1443 + v1014) & v1455)) & v1455;
              v1020 = (v1440 + ((v1443 + v1015) & v1455)) & v1455;
              v1018(v1019, v1020, v1441);
              v1021 = (_BYTE *)(v1019 + v1444);
              *v1021 = *(_BYTE *)(v1020 + v1444);
              v1021[1] = *(_BYTE *)(v1020 + v1444 + 1);
              v1021[2] = *(_BYTE *)(v1020 + v1444 + 2);
              v1021[3] = *(_BYTE *)(v1020 + v1444 + 3);
              v1021[4] = *(_BYTE *)(v1020 + v1444 + 4);
              v1022 = (v1019 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
              v1023 = (v1020 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_OWORD *)v1022 = *(_OWORD *)v1023;
              *(_BYTE *)(v1022 + 16) = *(_BYTE *)(v1023 + 16);
              *(_BYTE *)(v1022 + 17) = *(_BYTE *)(v1023 + 17);
              *(_BYTE *)(v1022 + 18) = *(_BYTE *)(v1023 + 18);
              *(_BYTE *)(v1022 + 19) = *(_BYTE *)(v1023 + 19);
              v1024 = (v1022 + 27) & 0xFFFFFFFFFFFFFFF8;
              v1025 = (v1023 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1024 = *(_QWORD *)v1025;
              *(_BYTE *)(v1024 + 8) = *(_BYTE *)(v1025 + 8);
              *(_BYTE *)(v1024 + 9) = *(_BYTE *)(v1025 + 9);
              *(_BYTE *)(v1024 + 10) = *(_BYTE *)(v1025 + 10);
              *(_BYTE *)(v1024 + 11) = *(_BYTE *)(v1025 + 11);
              *(_BYTE *)(v1024 + 12) = *(_BYTE *)(v1025 + 12);
              v1026 = (_QWORD *)((v1022 + 47) & 0xFFFFFFFFFFFFF8);
              v1027 = (_QWORD *)((v1023 + 47) & 0xFFFFFFFFFFFFF8);
              *v1026 = *v1027;
              v1028 = ((unint64_t)v1026 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1029 = ((unint64_t)v1027 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1028 = *(_QWORD *)v1029;
              *(_BYTE *)(v1028 + 8) = *(_BYTE *)(v1029 + 8);
              *(_BYTE *)(v1028 + 9) = *(_BYTE *)(v1029 + 9);
              v1030 = (void *)((v1436 + v1028) & v1455);
              v1031 = (const void *)((v1436 + v1029) & v1455);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1445 + 48))(v1031, 1, v1441))
              {
                memcpy(v1030, v1031, __n);
              }
              else
              {
                v1018((size_t)v1030, (size_t)v1031, v1441);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1445 + 56))(v1030, 0, 1, v1441);
              }
              v1001 = v1449;
              v1003 = v1384;
              v1032 = (_QWORD *)(((unint64_t)v1030 + v1437) & 0xFFFFFFFFFFFFFFF8);
              v1033 = (_QWORD *)(((unint64_t)v1031 + v1437) & 0xFFFFFFFFFFFFFFF8);
              *v1032 = *v1033;
              v1034 = ((unint64_t)v1032 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1035 = ((unint64_t)v1033 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1036 = *(_QWORD *)v1035;
              *(_BYTE *)(v1034 + 8) = *(_BYTE *)(v1035 + 8);
              *(_QWORD *)v1034 = v1036;
              v1037 = (_QWORD *)(((unint64_t)v1032 + 31) & 0xFFFFFFFFFFFFF8);
              v1038 = (_QWORD *)(((unint64_t)v1033 + 31) & 0xFFFFFFFFFFFFF8);
              *v1037 = *v1038;
              v1039 = (_OWORD *)(((unint64_t)v1037 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1040 = (_OWORD *)(((unint64_t)v1038 + 15) & 0xFFFFFFFFFFFFFFF8);
              *v1039 = *v1040;
              v1041 = ((unint64_t)v1039 + 19) & 0xFFFFFFFFFFFFFFF8;
              v1042 = ((unint64_t)v1040 + 19) & 0xFFFFFFFFFFFFFFF8;
              v1043 = *(_QWORD *)v1042;
              *(_BYTE *)(v1041 + 8) = *(_BYTE *)(v1042 + 8);
              *(_QWORD *)v1041 = v1043;
              *(_BYTE *)(v1041 + 9) = *(_BYTE *)(v1042 + 9);
              v1044 = (v1041 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v1045 = (v1042 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              LODWORD(v1036) = *(_DWORD *)v1045;
              *(_BYTE *)(v1044 + 4) = *(_BYTE *)(v1045 + 4);
              *(_DWORD *)v1044 = v1036;
              *(_OWORD *)((v1041 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v1042 + 25) & 0xFFFFFFFFFFFFF8);
              v1046 = v1014 + v1438;
              v1047 = *(_OWORD *)(v1015 + v1438 + 112);
              v1049 = *(_OWORD *)(v1015 + v1438 + 64);
              v1048 = *(_OWORD *)(v1015 + v1438 + 80);
              *(_OWORD *)(v1046 + 96) = *(_OWORD *)(v1015 + v1438 + 96);
              *(_OWORD *)(v1046 + 112) = v1047;
              *(_OWORD *)(v1046 + 64) = v1049;
              *(_OWORD *)(v1046 + 80) = v1048;
              v1050 = *(_OWORD *)(v1015 + v1438 + 176);
              v1052 = *(_OWORD *)(v1015 + v1438 + 128);
              v1051 = *(_OWORD *)(v1015 + v1438 + 144);
              *(_OWORD *)(v1046 + 160) = *(_OWORD *)(v1015 + v1438 + 160);
              *(_OWORD *)(v1046 + 176) = v1050;
              *(_OWORD *)(v1046 + 128) = v1052;
              *(_OWORD *)(v1046 + 144) = v1051;
              v1054 = *(_OWORD *)(v1015 + v1438 + 208);
              v1053 = *(_OWORD *)(v1015 + v1438 + 224);
              v1055 = *(_OWORD *)(v1015 + v1438 + 192);
              *(_QWORD *)(v1046 + 240) = *(_QWORD *)(v1015 + v1438 + 240);
              *(_OWORD *)(v1046 + 208) = v1054;
              *(_OWORD *)(v1046 + 224) = v1053;
              *(_OWORD *)(v1046 + 192) = v1055;
              v1056 = *(_OWORD *)(v1015 + v1438);
              v1057 = *(_OWORD *)(v1015 + v1438 + 16);
              v1058 = *(_OWORD *)(v1015 + v1438 + 48);
              *(_OWORD *)(v1046 + 32) = *(_OWORD *)(v1015 + v1438 + 32);
              *(_OWORD *)(v1046 + 48) = v1058;
              *(_OWORD *)v1046 = v1056;
              *(_OWORD *)(v1046 + 16) = v1057;
              v1059 = (_OWORD *)((v1014 + v1438 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1060 = (__int128 *)((v1015 + v1438 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1061 = *v1060;
              *(_OWORD *)((char *)v1059 + 9) = *(__int128 *)((char *)v1060 + 9);
              *v1059 = v1061;
              v1062 = (v1014 + v1438 + 287) & 0xFFFFFFFFFFFFFFF8;
              v1063 = (v1015 + v1438 + 287) & 0xFFFFFFFFFFFFFFF8;
              v1064 = *(_OWORD *)v1063;
              *(_BYTE *)(v1062 + 16) = *(_BYTE *)(v1063 + 16);
              *(_OWORD *)v1062 = v1064;
              v1065 = (_QWORD *)((v1014 + v1438 + 311) & 0xFFFFFFFFFFFFF8);
              v1066 = (_QWORD *)((v1015 + v1438 + 311) & 0xFFFFFFFFFFFFF8);
              *v1065 = *v1066;
              *(_OWORD *)(((unint64_t)v1065 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1066
                                                                                            + 15) & 0xFFFFFFFFFFFFF8);
              v83 = a1;
              v1004 = v1444;
              v1002 = v1399;
              v999 = ~v1458;
              v1000 = (unint64_t)v1506;
              if (!v1414)
                goto LABEL_1085;
LABEL_1091:
              v1067 = ((((v1002
                        + ((((((((((v1421 + v1004 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1068 = (void *)((v1000 + v1471 + v1067) & v1481);
              v1069 = (const void *)(((unint64_t)v821 + v1471 + v1067) & v1481);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1001 + 48))(v1069, 1, AssociatedTypeWitness))
              {
                memcpy(v1068, v1069, v1398);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v1001 + 32))(v1068, v1069, AssociatedTypeWitness);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1001 + 56))(v1068, 0, 1, AssociatedTypeWitness);
              }
              v1070 = (char *)(((unint64_t)v1068 + v1003) & v999);
              v1071 = (char *)(((unint64_t)v1069 + v1003) & v999);
              if (v1403 == v1418)
              {
                v1072 = (*(uint64_t (**)(unint64_t))(v1428 + 48))(((unint64_t)v1069 + v1003) & v999);
                v221 = v1460;
              }
              else
              {
                v1073 = (uint64_t *)((unint64_t)&v1071[v1433] & 0xFFFFFFFFFFFFFFF8);
                v221 = v1460;
                if (v1392 <= 0x7FFFFFFE)
                {
                  v1074 = *v1073;
                  if ((unint64_t)*v1073 >= 0xFFFFFFFF)
                    LODWORD(v1074) = -1;
                  if ((v1074 + 1) >= 2)
                    goto LABEL_1103;
                  goto LABEL_1105;
                }
                v1072 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v1424 + 48))(((unint64_t)v1073 + v1423) & v1363, v1388, v1425);
              }
              if (v1072)
              {
LABEL_1103:
                v1075 = v1499;
                memcpy(v1070, v1071, v1499);
LABEL_1106:
                *(_QWORD *)&v1070[v1075] = *(_QWORD *)&v1071[v1075];
                v1081 = (_QWORD *)((unint64_t)&v1070[v1075 + 15] & 0xFFFFFFFFFFFFF8);
                v1082 = (_QWORD *)((unint64_t)&v1071[v1075 + 15] & 0xFFFFFFFFFFFFFFF8);
                *v1081 = *v1082;
                *(_QWORD *)(((unint64_t)v1081 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1082
                                                                                              + 15) & 0xFFFFFFFFFFFFF8);
                v832 = 1;
                v889 = v1393;
                v831 = 1;
LABEL_1039:
                v888 = v1360;
                goto LABEL_1164;
              }
              v1073 = (uint64_t *)((unint64_t)&v1071[v1433] & 0xFFFFFFFFFFFFFFF8);
LABEL_1105:
              (*(void (**)(char *, char *, uint64_t))(v1428 + 32))(v1070, v1071, v1429);
              v1076 = (_QWORD *)((unint64_t)&v1070[v1433] & 0xFFFFFFFFFFFFFFF8);
              *v1076 = *v1073;
              v1077 = ((unint64_t)v1076 + v1423) & v1363;
              v1078 = ((unint64_t)v1073 + v1423) & v1363;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1424 + 32))(v1077, v1078, v1425);
              v1079 = (_QWORD *)((v1419 + v1077) & 0xFFFFFFFFFFFFF8);
              v1080 = (_QWORD *)((v1419 + v1078) & 0xFFFFFFFFFFFFF8);
              *v1079 = *v1080;
              *(_OWORD *)(((unint64_t)v1079 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1080
                                                                                            + 15) & 0xFFFFFFFFFFFFF8);
              v1075 = v1499;
              goto LABEL_1106;
            }
            v863 = ((unint64_t)v821 + v1434) & v1468;
            v823 = v1365;
            v864 = (v1400 + v863) & v1365;
            if (v1422 == v1415)
            {
              if (v1404 == v1422)
              {
                v865 = *(uint64_t (**)(unint64_t))(v1430 + 48);
                v866 = (v1400 + v863) & v1365;
LABEL_1082:
                v822 = v865(v866);
                v823 = v1365;
                goto LABEL_1083;
              }
              v919 = (unint64_t *)((v1439 + v864) & 0xFFFFFFFFFFFFFFF8);
              if (v1394 > 0x7FFFFFFE)
              {
                v866 = ((unint64_t)v919 + v1432) & v814;
                v865 = *(uint64_t (**)(unint64_t))(v1489 + 48);
                goto LABEL_1082;
              }
              v920 = *v919;
            }
            else
            {
              v892 = v864 + v1372;
              if ((v1389 & 0x80000000) == 0)
              {
                v893 = *(_QWORD *)(v892 + 8);
                if (v893 >= 0xFFFFFFFF)
                  LODWORD(v893) = -1;
                v822 = v893 + 1;
                goto LABEL_1083;
              }
              v866 = (v1443 + ((v1503 + v892) & v1513)) & v1455;
              if (v1414 > 0x7FFFFFFD)
              {
                v865 = *(uint64_t (**)(unint64_t))(v1445 + 48);
                goto LABEL_1082;
              }
              v920 = *(_QWORD *)(((v1387 + ((v1440 + v866) & v1455)) & 0xFFFFFFFFFFFFF8) + 8);
            }
            if (v920 >= 0xFFFFFFFF)
              LODWORD(v920) = -1;
            v999 = ~v1458;
            if ((v920 + 1) >= 2)
              goto LABEL_1084;
            goto LABEL_1087;
          case 2:
            (*(void (**)(char *, char *, uint64_t))(v1450 + 32))(a1, a2, v1448);
            v824 = (void *)((unint64_t)&a1[v1381] & v1481);
            v825 = (const void *)((unint64_t)&a2[v1381] & v1481);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1449 + 48))(v825, 1, AssociatedTypeWitness))
            {
              memcpy(v824, v825, v1398);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1449 + 32))(v824, v825, AssociatedTypeWitness);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1449 + 56))(v824, 0, 1, AssociatedTypeWitness);
            }
            v877 = (char *)(((unint64_t)v824 + v1384) & v1465);
            v878 = (char *)(((unint64_t)v825 + v1384) & v1465);
            if (v1403 == v1418)
            {
              v879 = (*(uint64_t (**)(unint64_t))(v1428 + 48))(((unint64_t)v825 + v1384) & v1465);
            }
            else
            {
              v880 = (uint64_t *)((unint64_t)&v878[v1433] & 0xFFFFFFFFFFFFFFF8);
              if (v1392 <= 0x7FFFFFFE)
              {
                v881 = *v880;
                if ((unint64_t)*v880 >= 0xFFFFFFFF)
                  LODWORD(v881) = -1;
                if ((v881 + 1) >= 2)
                  goto LABEL_1034;
                goto LABEL_1036;
              }
              v879 = (*(uint64_t (**)(unint64_t))(v1424 + 48))(((unint64_t)v880 + v1423) & v80);
            }
            if (v879)
            {
LABEL_1034:
              v902 = v1499;
              memcpy(v877, v878, v1499);
              goto LABEL_1037;
            }
            v880 = (uint64_t *)((unint64_t)&v878[v1433] & 0xFFFFFFFFFFFFFFF8);
LABEL_1036:
            (*(void (**)(char *, char *, uint64_t))(v1428 + 32))(v877, v878, v1429);
            v903 = (_QWORD *)((unint64_t)&v877[v1433] & 0xFFFFFFFFFFFFFFF8);
            *v903 = *v880;
            v904 = ((unint64_t)v903 + v1423) & v80;
            v905 = ((unint64_t)v880 + v1423) & v80;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1424 + 32))(v904, v905, v1425);
            v906 = (_QWORD *)((v1419 + v904) & 0xFFFFFFFFFFFFF8);
            v907 = (_QWORD *)((v1419 + v905) & 0xFFFFFFFFFFFFF8);
            *v906 = *v907;
            *(_OWORD *)(((unint64_t)v906 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v907 + 15) & 0xFFFFFFFFFFFFF8);
            v902 = v1499;
LABEL_1037:
            v221 = v1460;
            v908 = &v877[v902];
            *v908 = v878[v902];
            *((_QWORD *)v908 + 1) = *(_QWORD *)&v878[v902 + 8];
            v831 = 1;
            v832 = 2;
LABEL_1038:
            v889 = v1393;
            goto LABEL_1039;
          case 3:
            v1490 = *(_QWORD *)(v1426 - 8);
            v1373 = ((((v1420 + ((v35 + 8 + (v1439 & 0xFFFFFFFFFFFFFFF8)) & ~v35)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v826 = *(void (**)(char *, char *, uint64_t))(v1450 + 32);
            v826(a1, a2, v1448);
            v1507 = (void *)((unint64_t)&a1[v1385] & v189);
            v827 = (void *)((unint64_t)&a2[v1385] & v189);
            if (v1402 == v1415)
            {
              v828 = (*(uint64_t (**)(unint64_t))(v1450 + 48))((unint64_t)&a2[v1385] & v189);
              v829 = v1365;
              v830 = (void *)((unint64_t)&a1[v1385] & v189);
LABEL_1109:
              if (v828)
              {
LABEL_1110:
                memcpy(v830, v827, v1427);
                v888 = v1360;
                v1083 = v1399;
                v889 = v1393;
                goto LABEL_1111;
              }
              v867 = ((unint64_t)v827 + v1434) & v1468;
              v868 = (v1400 + v867) & v829;
LABEL_1113:
              v1502 = (void *)((unint64_t)&a2[v1385] & v189);
              v1085 = v829;
              v826((char *)v830, (char *)v827, v1448);
              v1086 = ((unint64_t)v830 + v1434) & v1468;
              v826((char *)v1086, (char *)v867, v1448);
              v1087 = (v1400 + v1086) & v1085;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1430 + 32))(v1087, v868, v1431);
              v1088 = (_QWORD *)((v1439 + v1087) & 0xFFFFFFFFFFFFFFF8);
              v1089 = (_QWORD *)((v1439 + v868) & 0xFFFFFFFFFFFFFFF8);
              *v1088 = *v1089;
              v1090 = ((unint64_t)v1088 + v1432) & v814;
              v1091 = ((unint64_t)v1089 + v1432) & v814;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1490 + 32))(v1090, v1091, v1426);
              v1092 = (_QWORD *)((v1420 + v1091) & 0xFFFFFFFFFFFFF8);
              v1093 = (_QWORD *)((v1420 + v1090) & 0xFFFFFFFFFFFFF8);
              *v1093 = *v1092;
              *(_OWORD *)(((unint64_t)v1093 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1092
                                                                                            + 15) & 0xFFFFFFFFFFFFF8);
              *(_OWORD *)(v1087 + v1373) = *(_OWORD *)(v868 + v1373);
              v1094 = (v1503 + v1087 + v1373) & v1513;
              v1095 = (v1503 + v868 + v1373) & v1513;
              *(_BYTE *)v1094 = *(_BYTE *)v1095;
              v1096 = v1094 | 4;
              v1097 = *(_DWORD *)(v1095 | 4);
              *(_BYTE *)(v1096 + 4) = *(_BYTE *)((v1095 | 4) + 4);
              *(_DWORD *)v1096 = v1097;
              *(_WORD *)(v1094 + 10) = *(_WORD *)(v1095 + 0xA);
              v1098 = *(void (**)(size_t, size_t, uint64_t))(v1445 + 32);
              v1098((v1443 + v1094) & v1455, (v1443 + v1095) & v1455, v1441);
              v1099 = (v1440 + ((v1443 + v1094) & v1455)) & v1455;
              v1100 = (v1440 + ((v1443 + v1095) & v1455)) & v1455;
              v1098(v1099, v1100, v1441);
              v1101 = (_BYTE *)(v1099 + v1444);
              *v1101 = *(_BYTE *)(v1100 + v1444);
              v1101[1] = *(_BYTE *)(v1100 + v1444 + 1);
              v1101[2] = *(_BYTE *)(v1100 + v1444 + 2);
              v1101[3] = *(_BYTE *)(v1100 + v1444 + 3);
              v1101[4] = *(_BYTE *)(v1100 + v1444 + 4);
              v1102 = (v1099 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
              v1103 = (v1100 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_OWORD *)v1102 = *(_OWORD *)v1103;
              *(_BYTE *)(v1102 + 16) = *(_BYTE *)(v1103 + 16);
              *(_BYTE *)(v1102 + 17) = *(_BYTE *)(v1103 + 17);
              *(_BYTE *)(v1102 + 18) = *(_BYTE *)(v1103 + 18);
              *(_BYTE *)(v1102 + 19) = *(_BYTE *)(v1103 + 19);
              v1104 = (v1102 + 27) & 0xFFFFFFFFFFFFFFF8;
              v1105 = (v1103 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1104 = *(_QWORD *)v1105;
              *(_BYTE *)(v1104 + 8) = *(_BYTE *)(v1105 + 8);
              *(_BYTE *)(v1104 + 9) = *(_BYTE *)(v1105 + 9);
              *(_BYTE *)(v1104 + 10) = *(_BYTE *)(v1105 + 10);
              *(_BYTE *)(v1104 + 11) = *(_BYTE *)(v1105 + 11);
              *(_BYTE *)(v1104 + 12) = *(_BYTE *)(v1105 + 12);
              v1106 = (_QWORD *)((v1102 + 47) & 0xFFFFFFFFFFFFF8);
              v1107 = (_QWORD *)((v1103 + 47) & 0xFFFFFFFFFFFFF8);
              *v1106 = *v1107;
              v1108 = ((unint64_t)v1106 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1109 = ((unint64_t)v1107 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1108 = *(_QWORD *)v1109;
              *(_BYTE *)(v1108 + 8) = *(_BYTE *)(v1109 + 8);
              *(_BYTE *)(v1108 + 9) = *(_BYTE *)(v1109 + 9);
              v1110 = (void *)((v1436 + v1108) & v1455);
              v1111 = (const void *)((v1436 + v1109) & v1455);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1445 + 48))(v1111, 1, v1441))
              {
                memcpy(v1110, v1111, __n);
              }
              else
              {
                v1098((size_t)v1110, (size_t)v1111, v1441);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1445 + 56))(v1110, 0, 1, v1441);
              }
              v1112 = (_QWORD *)(((unint64_t)v1110 + v1437) & 0xFFFFFFFFFFFFFFF8);
              v1113 = (_QWORD *)(((unint64_t)v1111 + v1437) & 0xFFFFFFFFFFFFFFF8);
              *v1112 = *v1113;
              v1114 = ((unint64_t)v1112 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1115 = ((unint64_t)v1113 + 15) & 0xFFFFFFFFFFFFFFF8;
              v1116 = *(_QWORD *)v1115;
              *(_BYTE *)(v1114 + 8) = *(_BYTE *)(v1115 + 8);
              *(_QWORD *)v1114 = v1116;
              v1117 = (_QWORD *)(((unint64_t)v1112 + 31) & 0xFFFFFFFFFFFFF8);
              v1118 = (_QWORD *)(((unint64_t)v1113 + 31) & 0xFFFFFFFFFFFFF8);
              *v1117 = *v1118;
              v1119 = (_OWORD *)(((unint64_t)v1117 + 15) & 0xFFFFFFFFFFFFFFF8);
              v1120 = (_OWORD *)(((unint64_t)v1118 + 15) & 0xFFFFFFFFFFFFFFF8);
              *v1119 = *v1120;
              v1121 = ((unint64_t)v1119 + 19) & 0xFFFFFFFFFFFFFFF8;
              v1122 = ((unint64_t)v1120 + 19) & 0xFFFFFFFFFFFFFFF8;
              v1123 = *(_QWORD *)v1122;
              *(_BYTE *)(v1121 + 8) = *(_BYTE *)(v1122 + 8);
              *(_QWORD *)v1121 = v1123;
              *(_BYTE *)(v1121 + 9) = *(_BYTE *)(v1122 + 9);
              v1124 = (v1121 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v1125 = (v1122 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              LODWORD(v1116) = *(_DWORD *)v1125;
              *(_BYTE *)(v1124 + 4) = *(_BYTE *)(v1125 + 4);
              *(_DWORD *)v1124 = v1116;
              *(_OWORD *)((v1121 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v1122 + 25) & 0xFFFFFFFFFFFFF8);
              v1126 = v1094 + v1438;
              v1127 = *(_OWORD *)(v1095 + v1438 + 112);
              v1129 = *(_OWORD *)(v1095 + v1438 + 64);
              v1128 = *(_OWORD *)(v1095 + v1438 + 80);
              *(_OWORD *)(v1126 + 96) = *(_OWORD *)(v1095 + v1438 + 96);
              *(_OWORD *)(v1126 + 112) = v1127;
              *(_OWORD *)(v1126 + 64) = v1129;
              *(_OWORD *)(v1126 + 80) = v1128;
              v1130 = *(_OWORD *)(v1095 + v1438 + 176);
              v1132 = *(_OWORD *)(v1095 + v1438 + 128);
              v1131 = *(_OWORD *)(v1095 + v1438 + 144);
              *(_OWORD *)(v1126 + 160) = *(_OWORD *)(v1095 + v1438 + 160);
              *(_OWORD *)(v1126 + 176) = v1130;
              *(_OWORD *)(v1126 + 128) = v1132;
              *(_OWORD *)(v1126 + 144) = v1131;
              v1134 = *(_OWORD *)(v1095 + v1438 + 208);
              v1133 = *(_OWORD *)(v1095 + v1438 + 224);
              v1135 = *(_OWORD *)(v1095 + v1438 + 192);
              *(_QWORD *)(v1126 + 240) = *(_QWORD *)(v1095 + v1438 + 240);
              *(_OWORD *)(v1126 + 208) = v1134;
              *(_OWORD *)(v1126 + 224) = v1133;
              *(_OWORD *)(v1126 + 192) = v1135;
              v1136 = *(_OWORD *)(v1095 + v1438);
              v1137 = *(_OWORD *)(v1095 + v1438 + 16);
              v1138 = *(_OWORD *)(v1095 + v1438 + 48);
              *(_OWORD *)(v1126 + 32) = *(_OWORD *)(v1095 + v1438 + 32);
              *(_OWORD *)(v1126 + 48) = v1138;
              *(_OWORD *)v1126 = v1136;
              *(_OWORD *)(v1126 + 16) = v1137;
              v1139 = (_OWORD *)((v1094 + v1438 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1140 = (__int128 *)((v1095 + v1438 + 255) & 0xFFFFFFFFFFFFFFF8);
              v1141 = *v1140;
              *(_OWORD *)((char *)v1139 + 9) = *(__int128 *)((char *)v1140 + 9);
              *v1139 = v1141;
              v1142 = (v1094 + v1438 + 287) & 0xFFFFFFFFFFFFFFF8;
              v1143 = (v1095 + v1438 + 287) & 0xFFFFFFFFFFFFFFF8;
              v1144 = *(_OWORD *)v1143;
              *(_BYTE *)(v1142 + 16) = *(_BYTE *)(v1143 + 16);
              *(_OWORD *)v1142 = v1144;
              v1145 = (_QWORD *)((v1094 + v1438 + 311) & 0xFFFFFFFFFFFFF8);
              v1146 = (_QWORD *)((v1095 + v1438 + 311) & 0xFFFFFFFFFFFFF8);
              *v1145 = *v1146;
              *(_OWORD *)(((unint64_t)v1145 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1146
                                                                                            + 15) & 0xFFFFFFFFFFFFF8);
              v1084 = v1444;
              v888 = v1360;
              v1083 = v1399;
              v889 = v1393;
              v830 = v1507;
              v827 = v1502;
              if (v1414)
              {
LABEL_1117:
                v1147 = ((((v1083
                          + ((((((((((v1421 + v1084 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 19) & 0xFFFFFFFFFFFFFFF8)
                            + 25) & 0xFFFFFFFFFFFFFFF8)
                          + 327) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16;
                v1148 = (_OWORD *)(((unint64_t)v830 + v1147) & 0xFFFFFFFFFFFFFFF8);
                v1149 = (_OWORD *)(((unint64_t)v827 + v1147) & 0xFFFFFFFFFFFFFFF8);
                *v1148 = *v1149;
                *(_QWORD *)(((unint64_t)v1148 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1149
                                                                                              + 23) & 0xFFFFFFFFFFFFF8);
                v831 = 1;
                v832 = 3;
                v221 = v1460;
                goto LABEL_1164;
              }
LABEL_1111:
              v1084 = __n;
              goto LABEL_1117;
            }
            v867 = ((unint64_t)v827 + v1434) & v1468;
            v829 = v1365;
            v868 = (v1400 + v867) & v1365;
            if (v1422 == v1415)
            {
              v830 = (void *)((unint64_t)&a1[v1385] & v189);
              if (v1404 == v1422)
              {
                v869 = *(uint64_t (**)(unint64_t))(v1430 + 48);
                v870 = (v1400 + v867) & v1365;
LABEL_1108:
                v828 = v869(v870);
                v829 = v1365;
                goto LABEL_1109;
              }
              v921 = (unint64_t *)((v1439 + v868) & 0xFFFFFFFFFFFFFFF8);
              if (v1394 > 0x7FFFFFFE)
              {
                v870 = ((unint64_t)v921 + v1432) & v814;
                v869 = *(uint64_t (**)(unint64_t))(v1490 + 48);
                goto LABEL_1108;
              }
              v922 = *v921;
            }
            else
            {
              v894 = v868 + v1373;
              v830 = (void *)((unint64_t)&a1[v1385] & v189);
              if ((v1389 & 0x80000000) == 0)
              {
                v895 = *(_QWORD *)(v894 + 8);
                if (v895 >= 0xFFFFFFFF)
                  LODWORD(v895) = -1;
                v828 = v895 + 1;
                goto LABEL_1109;
              }
              v870 = (v1443 + ((v1503 + v894) & v1513)) & v1455;
              if (v1414 > 0x7FFFFFFD)
              {
                v869 = *(uint64_t (**)(unint64_t))(v1445 + 48);
                goto LABEL_1108;
              }
              v922 = *(_QWORD *)(((v1387 + ((v1440 + v870) & v1455)) & 0xFFFFFFFFFFFFF8) + 8);
            }
            if (v922 >= 0xFFFFFFFF)
              LODWORD(v922) = -1;
            if ((v922 + 1) >= 2)
              goto LABEL_1110;
            goto LABEL_1113;
          case 4:
            (*(void (**)(char *, char *, uint64_t))(v1450 + 32))(a1, a2, v1448);
            v831 = 1;
            v832 = 4;
            goto LABEL_1038;
          case 5:
            (*(void (**)(char *, char *, uint64_t))(v1450 + 32))(a1, a2, v1448);
            v831 = 1;
            v832 = 5;
            goto LABEL_1038;
          case 6:
            (*(void (**)(char *, char *, uint64_t))(v1450 + 32))(a1, a2, v1448);
            v833 = (void *)((unint64_t)&a1[v1380] & v813);
            v834 = (const void *)((unint64_t)&a2[v1380] & v813);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1376 + 48))(v834, 1, v1469))
            {
              memcpy(v833, v834, v1378);
              v831 = 1;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1376 + 32))(v833, v834, v1469);
              v831 = 1;
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1376 + 56))(v833, 0, 1, v1469);
            }
            v832 = 6;
            goto LABEL_1038;
          case 7:
            (*(void (**)(char *, char *, uint64_t))(v1450 + 32))(a1, a2, v1448);
            v831 = 1;
            v832 = 7;
            goto LABEL_1038;
          default:
            if (v1393 <= 3)
              v531 = v1393;
            else
              v531 = 4;
            __asm { BR              X13 }
            return result;
        }
      }
      v1478 = v48;
      v532 = ~v35;
      v83 = a1;
      v835 = ~v52;
      v1508 = v54;
      switch(a2[v54])
      {
        case 0:
          v836 = v80;
          v837 = *(void (**)(char *))(v1449 + 32);
          v837(a1);
          v838 = (const void *)((unint64_t)&a2[v1386] & ~v1474);
          if (v1493 == v1416)
          {
            v839 = (*(uint64_t (**)(const void *))(v1449 + 48))(v838);
            v221 = v1460;
            v840 = ~v1471;
            v841 = (void *)((unint64_t)&a1[v1386] & ~v1474);
LABEL_1119:
            if (v839)
            {
LABEL_1120:
              memcpy(v841, v838, v1498);
              v888 = v1360;
              v889 = v1508;
              goto LABEL_1121;
            }
            v871 = ((unint64_t)v838 + v1435) & v840;
            v872 = (v1401 + v871) & v1465;
LABEL_1123:
            ((void (*)(void *, const void *, uint64_t))v837)(v841, v838, AssociatedTypeWitness);
            ((void (*)(unint64_t, unint64_t, uint64_t))v837)(((unint64_t)v841 + v1435) & v840, v871, AssociatedTypeWitness);
            v1151 = (v1401 + (((unint64_t)v841 + v1435) & v840)) & v1465;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1428 + 32))(v1151, v872, v1429);
            v1152 = (_QWORD *)((v1433 + v1151) & 0xFFFFFFFFFFFFFFF8);
            v1153 = (_QWORD *)((v1433 + v872) & 0xFFFFFFFFFFFFFFF8);
            *v1152 = *v1153;
            v1154 = ((unint64_t)v1152 + v1423) & v836;
            v1155 = ((unint64_t)v1153 + v1423) & v836;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1424 + 32))(v1154, v1155, v1425);
            v1156 = (_QWORD *)((v1419 + v1155) & 0xFFFFFFFFFFFFF8);
            v1157 = (_QWORD *)((v1419 + v1154) & 0xFFFFFFFFFFFFF8);
            *v1157 = *v1156;
            *(_OWORD *)(((unint64_t)v1157 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1156 + 15) & 0xFFFFFFFFFFFFF8);
            *(_OWORD *)(v1151 + v1499) = *(_OWORD *)(v872 + v1499);
            v1158 = (v1503 + v1151 + v1499) & v1513;
            v1159 = (v1503 + v872 + v1499) & v1513;
            *(_BYTE *)v1158 = *(_BYTE *)v1159;
            v1160 = v1158 | 4;
            v1161 = *(_DWORD *)(v1159 | 4);
            *(_BYTE *)(v1160 + 4) = *(_BYTE *)((v1159 | 4) + 4);
            *(_DWORD *)v1160 = v1161;
            *(_WORD *)(v1158 + 10) = *(_WORD *)(v1159 + 0xA);
            v1162 = *(void (**)(size_t, size_t, uint64_t))(v1445 + 32);
            v1162((v1443 + v1158) & v1455, (v1443 + v1159) & v1455, v1441);
            v1163 = (v1440 + ((v1443 + v1158) & v1455)) & v1455;
            v1164 = (v1440 + ((v1443 + v1159) & v1455)) & v1455;
            v1162(v1163, v1164, v1441);
            v1165 = (_BYTE *)(v1163 + v1444);
            *v1165 = *(_BYTE *)(v1164 + v1444);
            v1165[1] = *(_BYTE *)(v1164 + v1444 + 1);
            v1165[2] = *(_BYTE *)(v1164 + v1444 + 2);
            v1165[3] = *(_BYTE *)(v1164 + v1444 + 3);
            v1165[4] = *(_BYTE *)(v1164 + v1444 + 4);
            v1166 = (v1163 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
            v1167 = (v1164 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)v1166 = *(_OWORD *)v1167;
            *(_BYTE *)(v1166 + 16) = *(_BYTE *)(v1167 + 16);
            *(_BYTE *)(v1166 + 17) = *(_BYTE *)(v1167 + 17);
            *(_BYTE *)(v1166 + 18) = *(_BYTE *)(v1167 + 18);
            *(_BYTE *)(v1166 + 19) = *(_BYTE *)(v1167 + 19);
            v1168 = (v1166 + 27) & 0xFFFFFFFFFFFFFFF8;
            v1169 = (v1167 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1168 = *(_QWORD *)v1169;
            *(_BYTE *)(v1168 + 8) = *(_BYTE *)(v1169 + 8);
            *(_BYTE *)(v1168 + 9) = *(_BYTE *)(v1169 + 9);
            *(_BYTE *)(v1168 + 10) = *(_BYTE *)(v1169 + 10);
            *(_BYTE *)(v1168 + 11) = *(_BYTE *)(v1169 + 11);
            *(_BYTE *)(v1168 + 12) = *(_BYTE *)(v1169 + 12);
            v1170 = (_QWORD *)((v1166 + 47) & 0xFFFFFFFFFFFFF8);
            v1171 = (_QWORD *)((v1167 + 47) & 0xFFFFFFFFFFFFF8);
            *v1170 = *v1171;
            v1172 = ((unint64_t)v1170 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1173 = ((unint64_t)v1171 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1172 = *(_QWORD *)v1173;
            *(_BYTE *)(v1172 + 8) = *(_BYTE *)(v1173 + 8);
            *(_BYTE *)(v1172 + 9) = *(_BYTE *)(v1173 + 9);
            v1174 = (void *)((v1436 + v1172) & v1455);
            v1175 = (const void *)((v1436 + v1173) & v1455);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1445 + 48))(v1175, 1, v1441))
            {
              memcpy(v1174, v1175, __n);
            }
            else
            {
              v1162((size_t)v1174, (size_t)v1175, v1441);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1445 + 56))(v1174, 0, 1, v1441);
            }
            v1176 = (_QWORD *)(((unint64_t)v1174 + v1437) & 0xFFFFFFFFFFFFFFF8);
            v1177 = (_QWORD *)(((unint64_t)v1175 + v1437) & 0xFFFFFFFFFFFFFFF8);
            *v1176 = *v1177;
            v1178 = ((unint64_t)v1176 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1179 = ((unint64_t)v1177 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1180 = *(_QWORD *)v1179;
            *(_BYTE *)(v1178 + 8) = *(_BYTE *)(v1179 + 8);
            *(_QWORD *)v1178 = v1180;
            v1181 = (_QWORD *)(((unint64_t)v1176 + 31) & 0xFFFFFFFFFFFFF8);
            v1182 = (_QWORD *)(((unint64_t)v1177 + 31) & 0xFFFFFFFFFFFFF8);
            *v1181 = *v1182;
            v1183 = (_OWORD *)(((unint64_t)v1181 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1184 = (_OWORD *)(((unint64_t)v1182 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v1183 = *v1184;
            v1185 = ((unint64_t)v1183 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1186 = ((unint64_t)v1184 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1187 = *(_QWORD *)v1186;
            *(_BYTE *)(v1185 + 8) = *(_BYTE *)(v1186 + 8);
            *(_QWORD *)v1185 = v1187;
            *(_BYTE *)(v1185 + 9) = *(_BYTE *)(v1186 + 9);
            v1188 = (v1185 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v1189 = (v1186 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v1180) = *(_DWORD *)v1189;
            *(_BYTE *)(v1188 + 4) = *(_BYTE *)(v1189 + 4);
            *(_DWORD *)v1188 = v1180;
            *(_OWORD *)((v1185 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v1186 + 25) & 0xFFFFFFFFFFFFF8);
            v1190 = v1438 + v1158;
            v1191 = *(_OWORD *)(v1438 + v1159 + 112);
            v1193 = *(_OWORD *)(v1438 + v1159 + 64);
            v1192 = *(_OWORD *)(v1438 + v1159 + 80);
            *(_OWORD *)(v1190 + 96) = *(_OWORD *)(v1438 + v1159 + 96);
            *(_OWORD *)(v1190 + 112) = v1191;
            *(_OWORD *)(v1190 + 64) = v1193;
            *(_OWORD *)(v1190 + 80) = v1192;
            v1194 = *(_OWORD *)(v1438 + v1159 + 176);
            v1196 = *(_OWORD *)(v1438 + v1159 + 128);
            v1195 = *(_OWORD *)(v1438 + v1159 + 144);
            *(_OWORD *)(v1190 + 160) = *(_OWORD *)(v1438 + v1159 + 160);
            *(_OWORD *)(v1190 + 176) = v1194;
            *(_OWORD *)(v1190 + 128) = v1196;
            *(_OWORD *)(v1190 + 144) = v1195;
            v1198 = *(_OWORD *)(v1438 + v1159 + 208);
            v1197 = *(_OWORD *)(v1438 + v1159 + 224);
            v1199 = *(_OWORD *)(v1438 + v1159 + 192);
            *(_QWORD *)(v1190 + 240) = *(_QWORD *)(v1438 + v1159 + 240);
            *(_OWORD *)(v1190 + 208) = v1198;
            *(_OWORD *)(v1190 + 224) = v1197;
            *(_OWORD *)(v1190 + 192) = v1199;
            v1200 = *(_OWORD *)(v1438 + v1159);
            v1201 = *(_OWORD *)(v1438 + v1159 + 16);
            v1202 = *(_OWORD *)(v1438 + v1159 + 48);
            *(_OWORD *)(v1190 + 32) = *(_OWORD *)(v1438 + v1159 + 32);
            *(_OWORD *)(v1190 + 48) = v1202;
            *(_OWORD *)v1190 = v1200;
            *(_OWORD *)(v1190 + 16) = v1201;
            v1203 = (_OWORD *)((v1438 + v1158 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1204 = (__int128 *)((v1438 + v1159 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1205 = *v1204;
            *(_OWORD *)((char *)v1203 + 9) = *(__int128 *)((char *)v1204 + 9);
            *v1203 = v1205;
            v1206 = (v1438 + v1158 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1207 = (v1438 + v1159 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1208 = *(_OWORD *)v1207;
            *(_BYTE *)(v1206 + 16) = *(_BYTE *)(v1207 + 16);
            *(_OWORD *)v1206 = v1208;
            v1209 = (_QWORD *)((v1438 + v1158 + 311) & 0xFFFFFFFFFFFFF8);
            v1210 = (_QWORD *)((v1438 + v1159 + 311) & 0xFFFFFFFFFFFFF8);
            *v1209 = *v1210;
            *(_OWORD *)(((unint64_t)v1209 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1210 + 15) & 0xFFFFFFFFFFFFF8);
            v1150 = v1444;
            v888 = v1360;
            v889 = v1508;
            v221 = v1460;
            v841 = (void *)((unint64_t)&a1[v1386] & ~v1474);
            if (v1414)
            {
LABEL_1127:
              v832 = 0;
              v831 = 0;
              v1211 = ((((v1417
                        + ((((((((((v1421 + v1150 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1212 = (_QWORD *)(((unint64_t)v841 + v1211) & 0xFFFFFFFFFFFFFFF8);
              v1213 = (_QWORD *)(((unint64_t)v838 + v1211) & 0xFFFFFFFFFFFFFFF8);
              *v1212 = *v1213;
              *(_QWORD *)(((unint64_t)v1212 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1213
                                                                                            + 15) & 0xFFFFFFFFFFFFF8);
              goto LABEL_1164;
            }
LABEL_1121:
            v1150 = __n;
            goto LABEL_1127;
          }
          v840 = ~v1471;
          v871 = ((unint64_t)v838 + v1435) & v1481;
          v872 = (v1401 + v871) & v1465;
          if (v1418 == v1416)
          {
            v221 = v1460;
            v841 = (void *)((unint64_t)&a1[v1386] & ~v1474);
            if (v1403 == v1418)
            {
              v839 = (*(uint64_t (**)(unint64_t))(v1428 + 48))((v1401 + v871) & v1465);
              goto LABEL_1119;
            }
            v923 = (unint64_t *)((v1433 + v872) & 0xFFFFFFFFFFFFFFF8);
            if (v1392 > 0x7FFFFFFE)
            {
              v839 = (*(uint64_t (**)(unint64_t))(v1424 + 48))(((unint64_t)v923 + v1423) & v836);
              goto LABEL_1119;
            }
            v924 = *v923;
          }
          else
          {
            v896 = v872 + v1499;
            v221 = v1460;
            v841 = (void *)((unint64_t)&a1[v1386] & ~v1474);
            if ((v1390 & 0x80000000) == 0)
            {
              v897 = *(_QWORD *)(v896 + 8);
              if (v897 >= 0xFFFFFFFF)
                LODWORD(v897) = -1;
              v839 = v897 + 1;
              goto LABEL_1119;
            }
            v930 = (v1443 + ((v1503 + v896) & v1513)) & v1455;
            if (v1414 > 0x7FFFFFFD)
            {
              v839 = (*(uint64_t (**)(uint64_t))(v1445 + 48))(v930);
              goto LABEL_1119;
            }
            v924 = *(_QWORD *)(((v1387 + ((v1440 + v930) & v1455)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v924 >= 0xFFFFFFFF)
            LODWORD(v924) = -1;
          if ((v924 + 1) >= 2)
            goto LABEL_1120;
          goto LABEL_1123;
        case 1:
          v1364 = v80;
          v1491 = *(_QWORD *)(v1426 - 8);
          v1374 = ((((v1420 + ((v35 + 8 + (v1439 & 0xFFFFFFFFFFFFFFF8)) & ~v35)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                + 16;
          v842 = *(void (**)(char *))(v1449 + 32);
          v842(a1);
          v843 = (void *)((unint64_t)&a1[v1386] & ~v1474);
          v844 = (const void *)((unint64_t)&a2[v1386] & ~v1474);
          if (v1493 == v1416)
          {
            v845 = (*(uint64_t (**)(unint64_t))(v1449 + 48))((unint64_t)&a2[v1386] & ~v1474);
            v846 = v532;
            v847 = ~v8;
LABEL_1129:
            if (v845)
            {
LABEL_1130:
              memcpy(v843, v844, v1498);
              v221 = v1460;
              v1214 = v1457;
LABEL_1131:
              v1215 = v228;
              goto LABEL_1137;
            }
            v873 = ((unint64_t)v844 + v1435) & v1481;
            v874 = (v1401 + v873) & v1465;
LABEL_1133:
            ((void (*)(void *, const void *, uint64_t))v842)(v843, v844, AssociatedTypeWitness);
            ((void (*)(unint64_t, unint64_t, uint64_t))v842)(((unint64_t)v843 + v1435) & v1481, v873, AssociatedTypeWitness);
            v1216 = (v1401 + (((unint64_t)v843 + v1435) & v1481)) & v1465;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1428 + 32))(v1216, v874, v1429);
            v1217 = (_QWORD *)((v1433 + v1216) & 0xFFFFFFFFFFFFFFF8);
            v1218 = (_QWORD *)((v1433 + v874) & 0xFFFFFFFFFFFFFFF8);
            *v1217 = *v1218;
            v1219 = ((unint64_t)v1217 + v1423) & v1364;
            v1220 = ((unint64_t)v1218 + v1423) & v1364;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1424 + 32))(v1219, v1220, v1425);
            v1221 = (_QWORD *)((v1419 + v1220) & 0xFFFFFFFFFFFFF8);
            v1222 = (_QWORD *)((v1419 + v1219) & 0xFFFFFFFFFFFFF8);
            *v1222 = *v1221;
            *(_OWORD *)(((unint64_t)v1222 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1221 + 15) & 0xFFFFFFFFFFFFF8);
            *(_OWORD *)(v1216 + v1499) = *(_OWORD *)(v874 + v1499);
            v1223 = (v1503 + v1216 + v1499) & v1513;
            v1224 = (v1503 + v874 + v1499) & v1513;
            *(_BYTE *)v1223 = *(_BYTE *)v1224;
            v1225 = v1223 | 4;
            v1226 = *(_DWORD *)(v1224 | 4);
            *(_BYTE *)(v1225 + 4) = *(_BYTE *)((v1224 | 4) + 4);
            *(_DWORD *)v1225 = v1226;
            *(_WORD *)(v1223 + 10) = *(_WORD *)(v1224 + 0xA);
            v1227 = *(void (**)(size_t, size_t, uint64_t))(v1445 + 32);
            v1227((v1443 + v1223) & v1455, (v1443 + v1224) & v1455, v1441);
            v1228 = (v1440 + ((v1443 + v1223) & v1455)) & v1455;
            v1229 = (v1440 + ((v1443 + v1224) & v1455)) & v1455;
            v1227(v1228, v1229, v1441);
            v1230 = (_BYTE *)(v1228 + v1444);
            *v1230 = *(_BYTE *)(v1229 + v1444);
            v1230[1] = *(_BYTE *)(v1229 + v1444 + 1);
            v1230[2] = *(_BYTE *)(v1229 + v1444 + 2);
            v1230[3] = *(_BYTE *)(v1229 + v1444 + 3);
            v1230[4] = *(_BYTE *)(v1229 + v1444 + 4);
            v1231 = (v1228 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
            v1232 = (v1229 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)v1231 = *(_OWORD *)v1232;
            *(_BYTE *)(v1231 + 16) = *(_BYTE *)(v1232 + 16);
            *(_BYTE *)(v1231 + 17) = *(_BYTE *)(v1232 + 17);
            *(_BYTE *)(v1231 + 18) = *(_BYTE *)(v1232 + 18);
            *(_BYTE *)(v1231 + 19) = *(_BYTE *)(v1232 + 19);
            v1233 = (v1231 + 27) & 0xFFFFFFFFFFFFFFF8;
            v1234 = (v1232 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1233 = *(_QWORD *)v1234;
            *(_BYTE *)(v1233 + 8) = *(_BYTE *)(v1234 + 8);
            *(_BYTE *)(v1233 + 9) = *(_BYTE *)(v1234 + 9);
            *(_BYTE *)(v1233 + 10) = *(_BYTE *)(v1234 + 10);
            *(_BYTE *)(v1233 + 11) = *(_BYTE *)(v1234 + 11);
            *(_BYTE *)(v1233 + 12) = *(_BYTE *)(v1234 + 12);
            v1235 = (_QWORD *)((v1231 + 47) & 0xFFFFFFFFFFFFF8);
            v1236 = (_QWORD *)((v1232 + 47) & 0xFFFFFFFFFFFFF8);
            *v1235 = *v1236;
            v1237 = ((unint64_t)v1235 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1238 = ((unint64_t)v1236 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1237 = *(_QWORD *)v1238;
            *(_BYTE *)(v1237 + 8) = *(_BYTE *)(v1238 + 8);
            *(_BYTE *)(v1237 + 9) = *(_BYTE *)(v1238 + 9);
            v1239 = (void *)((v1436 + v1237) & v1455);
            v1240 = (const void *)((v1436 + v1238) & v1455);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1445 + 48))(v1240, 1, v1441))
            {
              memcpy(v1239, v1240, __n);
            }
            else
            {
              v1227((size_t)v1239, (size_t)v1240, v1441);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1445 + 56))(v1239, 0, 1, v1441);
            }
            v846 = v532;
            v1214 = v1457;
            v1241 = (_QWORD *)(((unint64_t)v1239 + v1437) & 0xFFFFFFFFFFFFFFF8);
            v1242 = (_QWORD *)(((unint64_t)v1240 + v1437) & 0xFFFFFFFFFFFFFFF8);
            *v1241 = *v1242;
            v1243 = ((unint64_t)v1241 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1244 = ((unint64_t)v1242 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1245 = *(_QWORD *)v1244;
            *(_BYTE *)(v1243 + 8) = *(_BYTE *)(v1244 + 8);
            *(_QWORD *)v1243 = v1245;
            v1246 = (_QWORD *)(((unint64_t)v1241 + 31) & 0xFFFFFFFFFFFFF8);
            v1247 = (_QWORD *)(((unint64_t)v1242 + 31) & 0xFFFFFFFFFFFFF8);
            *v1246 = *v1247;
            v1248 = (_OWORD *)(((unint64_t)v1246 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1249 = (_OWORD *)(((unint64_t)v1247 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v1248 = *v1249;
            v1250 = ((unint64_t)v1248 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1251 = ((unint64_t)v1249 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1252 = *(_QWORD *)v1251;
            *(_BYTE *)(v1250 + 8) = *(_BYTE *)(v1251 + 8);
            *(_QWORD *)v1250 = v1252;
            *(_BYTE *)(v1250 + 9) = *(_BYTE *)(v1251 + 9);
            v1253 = (v1250 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v1254 = (v1251 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v1245) = *(_DWORD *)v1254;
            *(_BYTE *)(v1253 + 4) = *(_BYTE *)(v1254 + 4);
            *(_DWORD *)v1253 = v1245;
            *(_OWORD *)((v1250 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v1251 + 25) & 0xFFFFFFFFFFFFF8);
            v1255 = v1438 + v1223;
            v1256 = *(_OWORD *)(v1438 + v1224 + 112);
            v1258 = *(_OWORD *)(v1438 + v1224 + 64);
            v1257 = *(_OWORD *)(v1438 + v1224 + 80);
            *(_OWORD *)(v1255 + 96) = *(_OWORD *)(v1438 + v1224 + 96);
            *(_OWORD *)(v1255 + 112) = v1256;
            *(_OWORD *)(v1255 + 64) = v1258;
            *(_OWORD *)(v1255 + 80) = v1257;
            v1259 = *(_OWORD *)(v1438 + v1224 + 176);
            v1261 = *(_OWORD *)(v1438 + v1224 + 128);
            v1260 = *(_OWORD *)(v1438 + v1224 + 144);
            *(_OWORD *)(v1255 + 160) = *(_OWORD *)(v1438 + v1224 + 160);
            *(_OWORD *)(v1255 + 176) = v1259;
            *(_OWORD *)(v1255 + 128) = v1261;
            *(_OWORD *)(v1255 + 144) = v1260;
            v1263 = *(_OWORD *)(v1438 + v1224 + 208);
            v1262 = *(_OWORD *)(v1438 + v1224 + 224);
            v1264 = *(_OWORD *)(v1438 + v1224 + 192);
            *(_QWORD *)(v1255 + 240) = *(_QWORD *)(v1438 + v1224 + 240);
            *(_OWORD *)(v1255 + 208) = v1263;
            *(_OWORD *)(v1255 + 224) = v1262;
            *(_OWORD *)(v1255 + 192) = v1264;
            v1265 = *(_OWORD *)(v1438 + v1224);
            v1266 = *(_OWORD *)(v1438 + v1224 + 16);
            v1267 = *(_OWORD *)(v1438 + v1224 + 48);
            *(_OWORD *)(v1255 + 32) = *(_OWORD *)(v1438 + v1224 + 32);
            *(_OWORD *)(v1255 + 48) = v1267;
            *(_OWORD *)v1255 = v1265;
            *(_OWORD *)(v1255 + 16) = v1266;
            v1268 = (_OWORD *)((v1438 + v1223 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1269 = (__int128 *)((v1438 + v1224 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1270 = *v1269;
            *(_OWORD *)((char *)v1268 + 9) = *(__int128 *)((char *)v1269 + 9);
            *v1268 = v1270;
            v1271 = (v1438 + v1223 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1272 = (v1438 + v1224 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1273 = *(_OWORD *)v1272;
            *(_BYTE *)(v1271 + 16) = *(_BYTE *)(v1272 + 16);
            *(_OWORD *)v1271 = v1273;
            v1274 = (_QWORD *)((v1438 + v1223 + 311) & 0xFFFFFFFFFFFFF8);
            v1275 = (_QWORD *)((v1438 + v1224 + 311) & 0xFFFFFFFFFFFFF8);
            *v1274 = *v1275;
            *(_OWORD *)(((unint64_t)v1274 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1275 + 15) & 0xFFFFFFFFFFFFF8);
            v221 = v1460;
            v228 = __n;
            v1215 = v1444;
            v847 = ~v1457;
            v844 = (const void *)((unint64_t)&a2[v1386] & ~v1474);
            v843 = (void *)((unint64_t)&a1[v1386] & ~v1474);
            if (!v1414)
              goto LABEL_1131;
LABEL_1137:
            v1276 = ((((v1417
                      + ((((((((((v1421 + v1215 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)
                      + 327) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v1277 = (void *)(((unint64_t)v843 + v1214 + v1276) & v847);
            v1278 = (const void *)(((unint64_t)v844 + v1214 + v1276) & v847);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1450 + 48))(v1278, 1, v1448))
            {
              memcpy(v1277, v1278, v1391);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1450 + 32))(v1277, v1278, v1448);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1450 + 56))(v1277, 0, 1, v1448);
            }
            v1279 = (char *)(((unint64_t)v1277 + v1478) & v1365);
            v1280 = (char *)(((unint64_t)v1278 + v1478) & v1365);
            if (v1404 == v1422)
            {
              v1281 = (*(uint64_t (**)(char *))(v1430 + 48))(v1280);
            }
            else
            {
              v1282 = v1439;
              v1283 = (uint64_t *)((unint64_t)&v1280[v1439] & 0xFFFFFFFFFFFFFFF8);
              if (v1394 <= 0x7FFFFFFE)
              {
                v1284 = *v1283;
                if ((unint64_t)*v1283 >= 0xFFFFFFFF)
                  LODWORD(v1284) = -1;
                if ((v1284 + 1) >= 2)
                  goto LABEL_1149;
                goto LABEL_1151;
              }
              v1281 = (*(uint64_t (**)(unint64_t))(v1491 + 48))(((unint64_t)v1283 + v1432) & v846);
            }
            v1282 = v1439;
            if (v1281)
            {
LABEL_1149:
              v1285 = v1374;
              memcpy(v1279, v1280, v1374);
LABEL_1152:
              v831 = 0;
              *(_QWORD *)&v1279[v1285] = *(_QWORD *)&v1280[v1285];
              v1292 = (_QWORD *)((unint64_t)&v1279[v1285 + 15] & 0xFFFFFFFFFFFFF8);
              v1293 = (_QWORD *)((unint64_t)&v1280[v1285 + 15] & 0xFFFFFFFFFFFFFFF8);
              *v1292 = *v1293;
              *(_QWORD *)(((unint64_t)v1292 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1293
                                                                                            + 15) & 0xFFFFFFFFFFFFF8);
              v832 = 1;
LABEL_1153:
              v888 = v1360;
              v889 = v1508;
              goto LABEL_1164;
            }
            v1283 = (uint64_t *)((unint64_t)&v1280[v1439] & 0xFFFFFFFFFFFFFFF8);
LABEL_1151:
            v1286 = v1282;
            (*(void (**)(char *, char *, uint64_t))(v1430 + 32))(v1279, v1280, v1431);
            v1287 = (_QWORD *)((unint64_t)&v1279[v1286] & 0xFFFFFFFFFFFFFFF8);
            *v1287 = *v1283;
            v1288 = ((unint64_t)v1287 + v1432) & v846;
            v1289 = ((unint64_t)v1283 + v1432) & v846;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1491 + 32))(v1288, v1289, v1426);
            v1290 = (_QWORD *)((v1420 + v1288) & 0xFFFFFFFFFFFFF8);
            v1291 = (_QWORD *)((v1420 + v1289) & 0xFFFFFFFFFFFFF8);
            *v1290 = *v1291;
            *(_OWORD *)(((unint64_t)v1290 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1291 + 15) & 0xFFFFFFFFFFFFF8);
            v1285 = v1374;
            goto LABEL_1152;
          }
          v873 = ((unint64_t)v844 + v1435) & v1481;
          v847 = ~v8;
          v874 = (v1401 + v873) & v1465;
          if (v1418 == v1416)
          {
            v846 = v532;
            if (v1403 == v1418)
            {
              v845 = (*(uint64_t (**)(unint64_t))(v1428 + 48))((v1401 + v873) & v1465);
              goto LABEL_1129;
            }
            v925 = (unint64_t *)((v1433 + v874) & 0xFFFFFFFFFFFFFFF8);
            if (v1392 > 0x7FFFFFFE)
            {
              v845 = (*(uint64_t (**)(unint64_t))(v1424 + 48))(((unint64_t)v925 + v1423) & v1364);
              goto LABEL_1129;
            }
            v926 = *v925;
          }
          else
          {
            v898 = v874 + v1499;
            v846 = v532;
            if ((v1390 & 0x80000000) == 0)
            {
              v899 = *(_QWORD *)(v898 + 8);
              if (v899 >= 0xFFFFFFFF)
                LODWORD(v899) = -1;
              v845 = v899 + 1;
              goto LABEL_1129;
            }
            v931 = (v1443 + ((v1503 + v898) & v1513)) & v1455;
            if (v1414 > 0x7FFFFFFD)
            {
              v845 = (*(uint64_t (**)(uint64_t))(v1445 + 48))(v931);
              goto LABEL_1129;
            }
            v926 = *(_QWORD *)(((v1387 + ((v1440 + v931) & v1455)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v926 >= 0xFFFFFFFF)
            LODWORD(v926) = -1;
          if ((v926 + 1) >= 2)
            goto LABEL_1130;
          goto LABEL_1133;
        case 2:
          v1492 = *(_QWORD *)(v1426 - 8);
          v1375 = ((((v1420 + ((v35 + 8 + (v1439 & 0xFFFFFFFFFFFFFFF8)) & ~v35)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                + 16;
          (*(void (**)(char *))(v1449 + 32))(a1);
          v848 = (void *)((unint64_t)&a1[v1413] & v1468);
          v849 = (const void *)((unint64_t)&a2[v1413] & v1468);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1450 + 48))(v849, 1, v1448))
          {
            memcpy(v848, v849, v1391);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v1450 + 32))(v848, v849, v1448);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1450 + 56))(v848, 0, 1, v1448);
          }
          v882 = (char *)(((unint64_t)v848 + v1478) & v1365);
          v883 = (char *)(((unint64_t)v849 + v1478) & v1365);
          if (v1404 == v1422)
          {
            v884 = (*(uint64_t (**)(char *))(v1430 + 48))(v883);
          }
          else
          {
            v885 = (uint64_t *)((unint64_t)&v883[v1439] & 0xFFFFFFFFFFFFFFF8);
            if (v1394 <= 0x7FFFFFFE)
            {
              v886 = v1439;
              v887 = *v885;
              if ((unint64_t)*v885 >= 0xFFFFFFFF)
                LODWORD(v887) = -1;
              if ((v887 + 1) >= 2)
                goto LABEL_1042;
              goto LABEL_1044;
            }
            v884 = (*(uint64_t (**)(unint64_t))(v1492 + 48))(((unint64_t)v885 + v1432) & v532);
          }
          if (v884)
          {
LABEL_1042:
            v909 = v1375;
            memcpy(v882, v883, v1375);
            goto LABEL_1045;
          }
          v886 = v1439;
          v885 = (uint64_t *)((unint64_t)&v883[v1439] & 0xFFFFFFFFFFFFFFF8);
LABEL_1044:
          v910 = v886;
          (*(void (**)(char *, char *, uint64_t))(v1430 + 32))(v882, v883, v1431);
          v911 = (_QWORD *)((unint64_t)&v882[v910] & 0xFFFFFFFFFFFFFFF8);
          *v911 = *v885;
          v912 = ((unint64_t)v911 + v1432) & v532;
          v913 = ((unint64_t)v885 + v1432) & v532;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1492 + 32))(v912, v913, v1426);
          v914 = (_QWORD *)((v1420 + v912) & 0xFFFFFFFFFFFFF8);
          v915 = (_QWORD *)((v1420 + v913) & 0xFFFFFFFFFFFFF8);
          *v914 = *v915;
          *(_OWORD *)(((unint64_t)v914 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v915 + 15) & 0xFFFFFFFFFFFFF8);
          v909 = v1375;
LABEL_1045:
          v221 = v1460;
          v831 = 0;
          v916 = &v882[v909];
          *v916 = v883[v909];
          *((_QWORD *)v916 + 1) = *(_QWORD *)&v883[v909 + 8];
          v832 = 2;
          goto LABEL_1153;
        case 3:
          v850 = v80;
          v851 = *(void (**)(char *))(v1449 + 32);
          v851(a1);
          v852 = (const void *)((unint64_t)&a2[v1386] & ~v1474);
          if (v1493 == v1416)
          {
            v853 = (*(uint64_t (**)(const void *))(v1449 + 48))(v852);
            v221 = v1460;
            v854 = ~v1471;
            v855 = (void *)((unint64_t)&a1[v1386] & ~v1474);
LABEL_1155:
            if (v853)
            {
LABEL_1156:
              memcpy(v855, v852, v1498);
              v888 = v1360;
              v889 = v1508;
              goto LABEL_1157;
            }
            v875 = ((unint64_t)v852 + v1435) & v854;
            v876 = (v1401 + v875) & v1465;
LABEL_1159:
            ((void (*)(void *, const void *, uint64_t))v851)(v855, v852, AssociatedTypeWitness);
            ((void (*)(unint64_t, unint64_t, uint64_t))v851)(((unint64_t)v855 + v1435) & v854, v875, AssociatedTypeWitness);
            v1295 = (v1401 + (((unint64_t)v855 + v1435) & v854)) & v1465;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1428 + 32))(v1295, v876, v1429);
            v1296 = (_QWORD *)((v1433 + v1295) & 0xFFFFFFFFFFFFFFF8);
            v1297 = (_QWORD *)((v1433 + v876) & 0xFFFFFFFFFFFFFFF8);
            *v1296 = *v1297;
            v1298 = ((unint64_t)v1296 + v1423) & v850;
            v1299 = ((unint64_t)v1297 + v1423) & v850;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1424 + 32))(v1298, v1299, v1425);
            v1300 = (_QWORD *)((v1419 + v1299) & 0xFFFFFFFFFFFFF8);
            v1301 = (_QWORD *)((v1419 + v1298) & 0xFFFFFFFFFFFFF8);
            *v1301 = *v1300;
            *(_OWORD *)(((unint64_t)v1301 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1300 + 15) & 0xFFFFFFFFFFFFF8);
            *(_OWORD *)(v1295 + v1499) = *(_OWORD *)(v876 + v1499);
            v1302 = (v1503 + v1295 + v1499) & v1513;
            v1303 = (v1503 + v876 + v1499) & v1513;
            *(_BYTE *)v1302 = *(_BYTE *)v1303;
            v1304 = v1302 | 4;
            v1305 = *(_DWORD *)(v1303 | 4);
            *(_BYTE *)(v1304 + 4) = *(_BYTE *)((v1303 | 4) + 4);
            *(_DWORD *)v1304 = v1305;
            *(_WORD *)(v1302 + 10) = *(_WORD *)(v1303 + 0xA);
            v1306 = *(void (**)(size_t, size_t, uint64_t))(v1445 + 32);
            v1306((v1443 + v1302) & v1455, (v1443 + v1303) & v1455, v1441);
            v1307 = (v1440 + ((v1443 + v1302) & v1455)) & v1455;
            v1308 = (v1440 + ((v1443 + v1303) & v1455)) & v1455;
            v1306(v1307, v1308, v1441);
            v1309 = (_BYTE *)(v1307 + v1444);
            *v1309 = *(_BYTE *)(v1308 + v1444);
            v1309[1] = *(_BYTE *)(v1308 + v1444 + 1);
            v1309[2] = *(_BYTE *)(v1308 + v1444 + 2);
            v1309[3] = *(_BYTE *)(v1308 + v1444 + 3);
            v1309[4] = *(_BYTE *)(v1308 + v1444 + 4);
            v1310 = (v1307 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
            v1311 = (v1308 + v1444 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)v1310 = *(_OWORD *)v1311;
            *(_BYTE *)(v1310 + 16) = *(_BYTE *)(v1311 + 16);
            *(_BYTE *)(v1310 + 17) = *(_BYTE *)(v1311 + 17);
            *(_BYTE *)(v1310 + 18) = *(_BYTE *)(v1311 + 18);
            *(_BYTE *)(v1310 + 19) = *(_BYTE *)(v1311 + 19);
            v1312 = (v1310 + 27) & 0xFFFFFFFFFFFFFFF8;
            v1313 = (v1311 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1312 = *(_QWORD *)v1313;
            *(_BYTE *)(v1312 + 8) = *(_BYTE *)(v1313 + 8);
            *(_BYTE *)(v1312 + 9) = *(_BYTE *)(v1313 + 9);
            *(_BYTE *)(v1312 + 10) = *(_BYTE *)(v1313 + 10);
            *(_BYTE *)(v1312 + 11) = *(_BYTE *)(v1313 + 11);
            *(_BYTE *)(v1312 + 12) = *(_BYTE *)(v1313 + 12);
            v1314 = (_QWORD *)((v1310 + 47) & 0xFFFFFFFFFFFFF8);
            v1315 = (_QWORD *)((v1311 + 47) & 0xFFFFFFFFFFFFF8);
            *v1314 = *v1315;
            v1316 = ((unint64_t)v1314 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1317 = ((unint64_t)v1315 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1316 = *(_QWORD *)v1317;
            *(_BYTE *)(v1316 + 8) = *(_BYTE *)(v1317 + 8);
            *(_BYTE *)(v1316 + 9) = *(_BYTE *)(v1317 + 9);
            v1318 = (void *)((v1436 + v1316) & v1455);
            v1319 = (const void *)((v1436 + v1317) & v1455);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1445 + 48))(v1319, 1, v1441))
            {
              memcpy(v1318, v1319, __n);
            }
            else
            {
              v1306((size_t)v1318, (size_t)v1319, v1441);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1445 + 56))(v1318, 0, 1, v1441);
            }
            v1320 = (_QWORD *)(((unint64_t)v1318 + v1437) & 0xFFFFFFFFFFFFFFF8);
            v1321 = (_QWORD *)(((unint64_t)v1319 + v1437) & 0xFFFFFFFFFFFFFFF8);
            *v1320 = *v1321;
            v1322 = ((unint64_t)v1320 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1323 = ((unint64_t)v1321 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1324 = *(_QWORD *)v1323;
            *(_BYTE *)(v1322 + 8) = *(_BYTE *)(v1323 + 8);
            *(_QWORD *)v1322 = v1324;
            v1325 = (_QWORD *)(((unint64_t)v1320 + 31) & 0xFFFFFFFFFFFFF8);
            v1326 = (_QWORD *)(((unint64_t)v1321 + 31) & 0xFFFFFFFFFFFFF8);
            *v1325 = *v1326;
            v1327 = (_OWORD *)(((unint64_t)v1325 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1328 = (_OWORD *)(((unint64_t)v1326 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v1327 = *v1328;
            v1329 = ((unint64_t)v1327 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1330 = ((unint64_t)v1328 + 19) & 0xFFFFFFFFFFFFFFF8;
            v1331 = *(_QWORD *)v1330;
            *(_BYTE *)(v1329 + 8) = *(_BYTE *)(v1330 + 8);
            *(_QWORD *)v1329 = v1331;
            *(_BYTE *)(v1329 + 9) = *(_BYTE *)(v1330 + 9);
            v1332 = (v1329 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v1333 = (v1330 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v1324) = *(_DWORD *)v1333;
            *(_BYTE *)(v1332 + 4) = *(_BYTE *)(v1333 + 4);
            *(_DWORD *)v1332 = v1324;
            *(_OWORD *)((v1329 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v1330 + 25) & 0xFFFFFFFFFFFFF8);
            v1334 = v1438 + v1302;
            v1335 = *(_OWORD *)(v1438 + v1303 + 112);
            v1337 = *(_OWORD *)(v1438 + v1303 + 64);
            v1336 = *(_OWORD *)(v1438 + v1303 + 80);
            *(_OWORD *)(v1334 + 96) = *(_OWORD *)(v1438 + v1303 + 96);
            *(_OWORD *)(v1334 + 112) = v1335;
            *(_OWORD *)(v1334 + 64) = v1337;
            *(_OWORD *)(v1334 + 80) = v1336;
            v1338 = *(_OWORD *)(v1438 + v1303 + 176);
            v1340 = *(_OWORD *)(v1438 + v1303 + 128);
            v1339 = *(_OWORD *)(v1438 + v1303 + 144);
            *(_OWORD *)(v1334 + 160) = *(_OWORD *)(v1438 + v1303 + 160);
            *(_OWORD *)(v1334 + 176) = v1338;
            *(_OWORD *)(v1334 + 128) = v1340;
            *(_OWORD *)(v1334 + 144) = v1339;
            v1342 = *(_OWORD *)(v1438 + v1303 + 208);
            v1341 = *(_OWORD *)(v1438 + v1303 + 224);
            v1343 = *(_OWORD *)(v1438 + v1303 + 192);
            *(_QWORD *)(v1334 + 240) = *(_QWORD *)(v1438 + v1303 + 240);
            *(_OWORD *)(v1334 + 208) = v1342;
            *(_OWORD *)(v1334 + 224) = v1341;
            *(_OWORD *)(v1334 + 192) = v1343;
            v1344 = *(_OWORD *)(v1438 + v1303);
            v1345 = *(_OWORD *)(v1438 + v1303 + 16);
            v1346 = *(_OWORD *)(v1438 + v1303 + 48);
            *(_OWORD *)(v1334 + 32) = *(_OWORD *)(v1438 + v1303 + 32);
            *(_OWORD *)(v1334 + 48) = v1346;
            *(_OWORD *)v1334 = v1344;
            *(_OWORD *)(v1334 + 16) = v1345;
            v1347 = (_OWORD *)((v1438 + v1302 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1348 = (__int128 *)((v1438 + v1303 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1349 = *v1348;
            *(_OWORD *)((char *)v1347 + 9) = *(__int128 *)((char *)v1348 + 9);
            *v1347 = v1349;
            v1350 = (v1438 + v1302 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1351 = (v1438 + v1303 + 287) & 0xFFFFFFFFFFFFFFF8;
            v1352 = *(_OWORD *)v1351;
            *(_BYTE *)(v1350 + 16) = *(_BYTE *)(v1351 + 16);
            *(_OWORD *)v1350 = v1352;
            v1353 = (_QWORD *)((v1438 + v1302 + 311) & 0xFFFFFFFFFFFFF8);
            v1354 = (_QWORD *)((v1438 + v1303 + 311) & 0xFFFFFFFFFFFFF8);
            *v1353 = *v1354;
            *(_OWORD *)(((unint64_t)v1353 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1354 + 15) & 0xFFFFFFFFFFFFF8);
            v1294 = v1444;
            v888 = v1360;
            v889 = v1508;
            v221 = v1460;
            v855 = (void *)((unint64_t)&a1[v1386] & ~v1474);
            if (v1414)
            {
LABEL_1163:
              v831 = 0;
              v1355 = ((((v1417
                        + ((((((((((v1421 + v1294 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1356 = (_OWORD *)(((unint64_t)v855 + v1355) & 0xFFFFFFFFFFFFFFF8);
              v1357 = (_OWORD *)(((unint64_t)v852 + v1355) & 0xFFFFFFFFFFFFFFF8);
              *v1356 = *v1357;
              *(_QWORD *)(((unint64_t)v1356 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1357
                                                                                            + 23) & 0xFFFFFFFFFFFFF8);
              v832 = 3;
              goto LABEL_1164;
            }
LABEL_1157:
            v1294 = __n;
            goto LABEL_1163;
          }
          v854 = ~v1471;
          v875 = ((unint64_t)v852 + v1435) & v1481;
          v876 = (v1401 + v875) & v1465;
          if (v1418 == v1416)
          {
            v221 = v1460;
            v855 = (void *)((unint64_t)&a1[v1386] & ~v1474);
            if (v1403 == v1418)
            {
              v853 = (*(uint64_t (**)(unint64_t))(v1428 + 48))((v1401 + v875) & v1465);
              goto LABEL_1155;
            }
            v927 = (unint64_t *)((v1433 + v876) & 0xFFFFFFFFFFFFFFF8);
            if (v1392 > 0x7FFFFFFE)
            {
              v853 = (*(uint64_t (**)(unint64_t))(v1424 + 48))(((unint64_t)v927 + v1423) & v850);
              goto LABEL_1155;
            }
            v928 = *v927;
          }
          else
          {
            v900 = v876 + v1499;
            v221 = v1460;
            v855 = (void *)((unint64_t)&a1[v1386] & ~v1474);
            if ((v1390 & 0x80000000) == 0)
            {
              v901 = *(_QWORD *)(v900 + 8);
              if (v901 >= 0xFFFFFFFF)
                LODWORD(v901) = -1;
              v853 = v901 + 1;
              goto LABEL_1155;
            }
            v929 = (v1443 + ((v1503 + v900) & v1513)) & v1455;
            if (v1414 > 0x7FFFFFFD)
            {
              v853 = (*(uint64_t (**)(uint64_t))(v1445 + 48))(v929);
              goto LABEL_1155;
            }
            v928 = *(_QWORD *)(((v1387 + ((v1440 + v929) & v1455)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v928 >= 0xFFFFFFFF)
            LODWORD(v928) = -1;
          if ((v928 + 1) >= 2)
            goto LABEL_1156;
          goto LABEL_1159;
        case 4:
          (*(void (**)(char *, char *, uint64_t))(v1449 + 32))(a1, a2, AssociatedTypeWitness);
          v831 = 0;
          v832 = 4;
          goto LABEL_1007;
        case 5:
          (*(void (**)(char *, char *, uint64_t))(v1449 + 32))(a1, a2, AssociatedTypeWitness);
          v831 = 0;
          v832 = 5;
          goto LABEL_1007;
        case 6:
          (*(void (**)(char *))(v1449 + 32))(a1);
          v856 = (void *)((unint64_t)&a1[v1382] & v835);
          v857 = (const void *)((unint64_t)&a2[v1382] & v835);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1383 + 48))(v857, 1, v1470))
          {
            memcpy(v856, v857, v1379);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v1383 + 32))(v856, v857, v1470);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1383 + 56))(v856, 0, 1, v1470);
          }
          v831 = 0;
          v832 = 6;
          goto LABEL_1007;
        case 7:
          (*(void (**)(char *, char *, uint64_t))(v1449 + 32))(a1, a2, AssociatedTypeWitness);
          v831 = 0;
          v832 = 7;
LABEL_1007:
          v888 = v1360;
          v889 = v1508;
          v221 = v1460;
          goto LABEL_1164;
        default:
          if (v54 <= 3)
            v533 = v54;
          else
            v533 = 4;
          __asm { BR              X13 }
          return result;
      }
    case 0x1Cu:
      v192 = a2[v1463];
      if (v192 >= 2)
      {
        if (v1463 <= 3)
          v193 = v1463;
        else
          v193 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v534 = v192 == 1;
      if (v192 == 1)
        v535 = v1450;
      else
        v535 = v1449;
      if (v192 == 1)
        v536 = v1448;
      else
        v536 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v535 + 32))(a1, a2, v536);
      a1[v1463] = v534;
      a1[v1504] = a2[v1504];
      if (v1460 > 3)
        goto LABEL_638;
      v537 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v537 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 28;
      }
      else if (v537 <= 0xD8)
      {
LABEL_638:
        a1[v1460] = 28;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 28;
      }
      return v83;
    case 0x1Du:
      v194 = a2[v1463];
      if (v194 >= 2)
      {
        if (v1463 <= 3)
          v195 = v1463;
        else
          v195 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v538 = v194 == 1;
      if (v194 == 1)
        v539 = v1450;
      else
        v539 = v1449;
      if (v194 == 1)
        v540 = v1448;
      else
        v540 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v539 + 32))(a1, a2, v540);
      a1[v1463] = v538;
      if (v1460 > 3)
        goto LABEL_650;
      v541 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v541 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 29;
      }
      else if (v541 <= 0xD8)
      {
LABEL_650:
        a1[v1460] = 29;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 29;
      }
      return v83;
    case 0x1Eu:
      v196 = a2[v1463];
      if (v196 >= 2)
      {
        if (v1463 <= 3)
          v197 = v1463;
        else
          v197 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v542 = v196 == 1;
      if (v196 == 1)
        v543 = v1450;
      else
        v543 = v1449;
      if (v196 == 1)
        v544 = v1448;
      else
        v544 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v543 + 32))(a1, a2, v544);
      a1[v1463] = v542;
      if (v1460 > 3)
        goto LABEL_662;
      v545 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v545 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 30;
      }
      else if (v545 <= 0xD8)
      {
LABEL_662:
        a1[v1460] = 30;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 30;
      }
      return v83;
    case 0x1Fu:
      v198 = a2[v1463];
      if (v198 >= 2)
      {
        if (v1463 <= 3)
          v199 = v1463;
        else
          v199 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v546 = v198 == 1;
      if (v198 == 1)
        v547 = v1450;
      else
        v547 = v1449;
      if (v198 == 1)
        v548 = v1448;
      else
        v548 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v547 + 32))(a1, a2, v548);
      a1[v1463] = v546;
      v549 = *(unsigned __int8 *)(((unint64_t)&a2[v1442] & v77) + v1463);
      if (v549 >= 2)
      {
        if (v1463 <= 3)
          v550 = v1463;
        else
          v550 = 4;
        __asm { BR              X12 }
      }
      v578 = v549 == 1;
      if (v549 == 1)
        v579 = v1450;
      else
        v579 = v1449;
      (*(void (**)(unint64_t))(v579 + 32))((unint64_t)&a1[v1442] & ~v1466);
      *(_BYTE *)(((unint64_t)&a1[v1442] & v77) + v1463) = v578;
      if (v1460 > 3)
        goto LABEL_763;
      v580 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v580 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 31;
      }
      else if (v580 <= 0xD8)
      {
LABEL_763:
        a1[v1460] = 31;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 31;
      }
      return v83;
    case 0x20u:
      v200 = a2[v1463];
      if (v200 >= 2)
      {
        if (v1463 <= 3)
          v201 = v1463;
        else
          v201 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v551 = v200 == 1;
      if (v200 == 1)
        v552 = v1450;
      else
        v552 = v1449;
      if (v200 == 1)
        v553 = v1448;
      else
        v553 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v552 + 32))(a1, a2, v553);
      a1[v1463] = v551;
      if (v1460 > 3)
        goto LABEL_685;
      v554 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v554 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 32;
      }
      else if (v554 <= 0xD8)
      {
LABEL_685:
        a1[v1460] = 32;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 32;
      }
      return v83;
    case 0x21u:
      v202 = a2[v1463];
      if (v202 >= 2)
      {
        if (v1463 <= 3)
          v203 = v1463;
        else
          v203 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v555 = v202 == 1;
      if (v202 == 1)
        v556 = v1450;
      else
        v556 = v1449;
      if (v202 == 1)
        v557 = v1448;
      else
        v557 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v556 + 32))(a1, a2, v557);
      a1[v1463] = v555;
      if (v1460 > 3)
        goto LABEL_697;
      v558 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v558 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 33;
      }
      else if (v558 <= 0xD8)
      {
LABEL_697:
        a1[v1460] = 33;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 33;
      }
      return v83;
    case 0x22u:
      v204 = a2[v1463];
      if (v204 >= 2)
      {
        if (v1463 <= 3)
          v205 = v1463;
        else
          v205 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v559 = v204 == 1;
      if (v204 == 1)
        v560 = v1450;
      else
        v560 = v1449;
      if (v204 == 1)
        v561 = v1448;
      else
        v561 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v560 + 32))(a1, a2, v561);
      a1[v1463] = v559;
      if (v1460 > 3)
        goto LABEL_709;
      v562 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v562 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 34;
      }
      else if (v562 <= 0xD8)
      {
LABEL_709:
        a1[v1460] = 34;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 34;
      }
      return v83;
    case 0x23u:
      v206 = a2[v1463];
      if (v206 >= 2)
      {
        if (v1463 <= 3)
          v207 = v1463;
        else
          v207 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v563 = v206 == 1;
      if (v206 == 1)
        v564 = v1450;
      else
        v564 = v1449;
      if (v206 == 1)
        v565 = v1448;
      else
        v565 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v564 + 32))(a1, a2, v565);
      a1[v1463] = v563;
      if (v1460 > 3)
        goto LABEL_721;
      v566 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v566 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 35;
      }
      else if (v566 <= 0xD8)
      {
LABEL_721:
        a1[v1460] = 35;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 35;
      }
      return v83;
    case 0x24u:
      v1366 = ~v36;
      v208 = ~v1452;
      v1486 = *(_QWORD *)(v1426 - 8);
      v1496 = ~v35;
      v1370 = ((((v1420 + ((v35 + 8 + (v1439 & 0xFFFFFFFFFFFFFFF8)) & ~v35)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1449 + 48))(a2, 1, AssociatedTypeWitness))
      {
        v209 = v1398;
        memcpy(a1, a2, v1398);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v1449 + 32))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1449 + 56))(a1, 0, 1, AssociatedTypeWitness);
        v209 = v1398;
      }
      v229 = ~v40;
      v230 = (_QWORD *)((unint64_t)&a1[v209 + 7] & 0xFFFFFFFFFFFFF8);
      v231 = (_QWORD *)((unint64_t)&a2[v209 + 7] & 0xFFFFFFFFFFFFFFF8);
      *v230 = *v231;
      v232 = ((unint64_t)v230 + 15) & 0xFFFFFFFFFFFFFFF8;
      v233 = ((unint64_t)v231 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v232 = *(_QWORD *)v233;
      *(_BYTE *)(v232 + 8) = *(_BYTE *)(v233 + 8);
      v234 = (void *)((v232 + v1458 + 9) & v79);
      v235 = (const void *)((v233 + v1458 + 9) & v79);
      v83 = a1;
      if (v1403 == v1418)
      {
        v236 = (*(uint64_t (**)(const void *))(v1428 + 48))(v235);
        v237 = v1448;
      }
      else
      {
        v238 = (uint64_t *)(((unint64_t)v235 + v1433) & 0xFFFFFFFFFFFFFFF8);
        v237 = v1448;
        if (v1392 <= 0x7FFFFFFE)
        {
          v239 = *v238;
          if ((unint64_t)*v238 >= 0xFFFFFFFF)
            LODWORD(v239) = -1;
          if ((v239 + 1) >= 2)
            goto LABEL_377;
          goto LABEL_379;
        }
        v236 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v1424 + 48))(((unint64_t)v238 + v1423) & v208, v1388, v1425);
      }
      if (v236)
      {
LABEL_377:
        v352 = v1499;
        memcpy(v234, v235, v1499);
        goto LABEL_380;
      }
      v238 = (uint64_t *)(((unint64_t)v235 + v1433) & 0xFFFFFFFFFFFFFFF8);
LABEL_379:
      (*(void (**)(void *, const void *, uint64_t))(v1428 + 32))(v234, v235, v1429);
      v353 = (_QWORD *)(((unint64_t)v234 + v1433) & 0xFFFFFFFFFFFFFFF8);
      *v353 = *v238;
      v354 = ((unint64_t)v353 + v1423) & v208;
      v355 = ((unint64_t)v238 + v1423) & v208;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1424 + 32))(v354, v355, v1425);
      v356 = (_QWORD *)((v1419 + v354) & 0xFFFFFFFFFFFFF8);
      v357 = (_QWORD *)((v1419 + v355) & 0xFFFFFFFFFFFFF8);
      *v356 = *v357;
      *(_OWORD *)(((unint64_t)v356 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v357 + 15) & 0xFFFFFFFFFFFFF8);
      v352 = v1499;
LABEL_380:
      v358 = (uint64_t)v235 + v352 + 10;
      *((_BYTE *)v234 + v352) = *((_BYTE *)v235 + v352);
      *(_BYTE *)(((unint64_t)v234 + v352) | 1) = *(_BYTE *)(((unint64_t)v235 + v352) | 1);
      *(_BYTE *)(((unint64_t)v234 + v352) | 2) = *(_BYTE *)(((unint64_t)v235 + v352) | 2);
      v359 = ((unint64_t)v234 + v352 + 10) & 0xFFFFFFFFFFFFFFF8;
      v360 = *(_OWORD *)(v358 & 0xFFFFFFFFFFFFFFF8);
      *(_BYTE *)(v359 + 16) = *(_BYTE *)((v358 & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_OWORD *)v359 = v360;
      v361 = ((unint64_t)v234 + v352 + 34) & 0xFFFFFFFFFFFFFFF8;
      v362 = ((unint64_t)v235 + v352 + 34) & 0xFFFFFFFFFFFFFFF8;
      v363 = *(_OWORD *)v362;
      v364 = *(_OWORD *)(v362 + 16);
      v365 = *(_OWORD *)(v362 + 32);
      *(_QWORD *)(v361 + 48) = *(_QWORD *)(v362 + 48);
      *(_OWORD *)(v361 + 16) = v364;
      *(_OWORD *)(v361 + 32) = v365;
      *(_OWORD *)v361 = v363;
      v366 = (_QWORD *)((v362 + 63) & 0xFFFFFFFFFFFFF8);
      v367 = (_QWORD *)((v361 + 63) & 0xFFFFFFFFFFFFF8);
      *v367 = *v366;
      *(_QWORD *)(((unint64_t)v367 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v366 + 15) & 0xFFFFFFFFFFFFF8);
      v368 = (void *)((unint64_t)&a1[v1395] & v229);
      v369 = (const void *)((unint64_t)&a2[v1395] & v229);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1450 + 48))(v369, 1, v237))
      {
        memcpy(v368, v369, v1391);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v1450 + 32))(v368, v369, v237);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1450 + 56))(v368, 0, 1, v237);
      }
      v370 = (_QWORD *)(((unint64_t)v368 + v1396) & 0xFFFFFFFFFFFFF8);
      v371 = (_QWORD *)(((unint64_t)v369 + v1396) & 0xFFFFFFFFFFFFFFF8);
      *v370 = *v371;
      v372 = ((unint64_t)v370 + 15) & 0xFFFFFFFFFFFFFFF8;
      v373 = ((unint64_t)v371 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v372 = *(_QWORD *)v373;
      *(_BYTE *)(v372 + 8) = *(_BYTE *)(v373 + 8);
      v374 = (void *)((v1397 + v372) & v1366);
      v375 = (const void *)((v1397 + v373) & v1366);
      if (v1404 == v1422)
      {
        v376 = (*(uint64_t (**)(unint64_t))(v1430 + 48))((v1397 + v373) & v1366);
      }
      else
      {
        v377 = v1439;
        v378 = (uint64_t *)(((unint64_t)v375 + v1439) & 0xFFFFFFFFFFFFFFF8);
        if (v1394 <= 0x7FFFFFFE)
        {
          v379 = *v378;
          if ((unint64_t)*v378 >= 0xFFFFFFFF)
            LODWORD(v379) = -1;
          if ((v379 + 1) >= 2)
            goto LABEL_394;
          goto LABEL_396;
        }
        v376 = (*(uint64_t (**)(unint64_t))(v1486 + 48))(((unint64_t)v378 + v1432) & v1496);
      }
      v377 = v1439;
      if (v376)
      {
LABEL_394:
        v380 = v1370;
        memcpy(v374, v375, v1370);
        goto LABEL_397;
      }
      v378 = (uint64_t *)(((unint64_t)v375 + v1439) & 0xFFFFFFFFFFFFFFF8);
LABEL_396:
      v381 = v377;
      (*(void (**)(void *, const void *, uint64_t))(v1430 + 32))(v374, v375, v1431);
      v382 = (_QWORD *)(((unint64_t)v374 + v381) & 0xFFFFFFFFFFFFFFF8);
      *v382 = *v378;
      v383 = ((unint64_t)v382 + v1432) & v1496;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1486 + 32))(v383, ((unint64_t)v378 + v1432) & v1496, v1426);
      v384 = (_QWORD *)((v1420 + v383) & 0xFFFFFFFFFFFFF8);
      v385 = (_QWORD *)((v1420 + (((unint64_t)v378 + v1432) & v1496)) & 0xFFFFFFFFFFFFF8);
      *v384 = *v385;
      *(_OWORD *)(((unint64_t)v384 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v385 + 15) & 0xFFFFFFFFFFFFF8);
      v380 = v1370;
LABEL_397:
      *((_BYTE *)v374 + v380) = *((_BYTE *)v375 + v380);
      *(_BYTE *)(((unint64_t)v374 + v380) | 1) = *(_BYTE *)(((unint64_t)v375 + v380) | 1);
      *(_BYTE *)(((unint64_t)v374 + v380) | 2) = *(_BYTE *)(((unint64_t)v375 + v380) | 2);
      v386 = ((unint64_t)v374 + v380 + 10) & 0xFFFFFFFFFFFFFFF8;
      v387 = ((unint64_t)v375 + v380 + 10) & 0xFFFFFFFFFFFFFFF8;
      v388 = *(_OWORD *)v387;
      *(_BYTE *)(v386 + 16) = *(_BYTE *)(v387 + 16);
      *(_OWORD *)v386 = v388;
      v389 = ((unint64_t)v374 + v380 + 34) & 0xFFFFFFFFFFFFFFF8;
      v390 = ((unint64_t)v375 + v380 + 34) & 0xFFFFFFFFFFFFFFF8;
      v391 = *(_OWORD *)v390;
      v392 = *(_OWORD *)(v390 + 16);
      v393 = *(_OWORD *)(v390 + 32);
      *(_QWORD *)(v389 + 48) = *(_QWORD *)(v390 + 48);
      *(_OWORD *)(v389 + 16) = v392;
      *(_OWORD *)(v389 + 32) = v393;
      *(_OWORD *)v389 = v391;
      v394 = (_QWORD *)((v390 + 63) & 0xFFFFFFFFFFFFF8);
      v395 = (_QWORD *)((v389 + 63) & 0xFFFFFFFFFFFFF8);
      *v395 = *v394;
      *(_QWORD *)(((unint64_t)v395 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v394 + 15) & 0xFFFFFFFFFFFFF8);
      *((_BYTE *)v368 + v1377) = *((_BYTE *)v369 + v1377);
      v396 = ((unint64_t)v368 + v1377) & 0xFFFFFFFFFFFFFFF8;
      v397 = ((unint64_t)v369 + v1377) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v396 + 8) = *(_QWORD *)(v397 + 8);
      v398 = (_OWORD *)((v396 + 23) & 0xFFFFFFFFFFFFFFF8);
      v399 = (_OWORD *)((v397 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v398 = *v399;
      v400 = ((unint64_t)v398 + 23) & 0xFFFFFFFFFFFFFFF8;
      v401 = ((unint64_t)v399 + 23) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v400 = *(_QWORD *)v401;
      *(_BYTE *)(v400 + 8) = *(_BYTE *)(v401 + 8);
      *(_QWORD *)(((unint64_t)v398 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v399 + 39) & 0xFFFFFFFFFFFFF8);
      if (v1460 > 3)
        goto LABEL_398;
      v402 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v402 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 36;
        return v83;
      }
      if (v402 <= 0xD8)
LABEL_398:
        a1[v1460] = 36;
      else
        *(_WORD *)&a1[v1460] = 36;
      return v83;
    case 0x25u:
      v210 = a2[v1463];
      if (v210 >= 2)
      {
        if (v1463 <= 3)
          v211 = v1463;
        else
          v211 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v567 = v210 == 1;
      if (v210 == 1)
        v568 = v1450;
      else
        v568 = v1449;
      if (v210 == 1)
        v569 = v1448;
      else
        v569 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v568 + 32))(a1, a2, v569);
      a1[v1463] = v567;
      a1[v1504] = a2[v1504];
      if (v1460 > 3)
        goto LABEL_733;
      v570 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v570 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 37;
      }
      else if (v570 <= 0xD8)
      {
LABEL_733:
        a1[v1460] = 37;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 37;
      }
      return v83;
    case 0x26u:
      v212 = a2[v1463];
      if (v212 >= 2)
      {
        if (v1463 <= 3)
          v213 = v1463;
        else
          v213 = 4;
        __asm { BR              X12 }
      }
      v83 = a1;
      v571 = v212 == 1;
      if (v212 == 1)
        v572 = v1450;
      else
        v572 = v1449;
      if (v212 == 1)
        v573 = v1448;
      else
        v573 = AssociatedTypeWitness;
      (*(void (**)(char *, char *, uint64_t))(v572 + 32))(a1, a2, v573);
      a1[v1463] = v571;
      if (v1460 > 3)
        goto LABEL_745;
      v574 = ((1 << (8 * v1460)) + 5) >> (8 * v1460);
      if (v574 > 0xFFD8)
      {
        *(_DWORD *)&a1[v1460] = 38;
      }
      else if (v574 <= 0xD8)
      {
LABEL_745:
        a1[v1460] = 38;
      }
      else
      {
        *(_WORD *)&a1[v1460] = 38;
      }
      return v83;
    default:
      if (v79 > 3)
        goto LABEL_120;
      v84 = ((1 << (8 * v79)) + 5) >> (8 * v79);
      v85 = 2;
      if (v84 > 0xFFD8)
        v85 = 4;
      if (v84 <= 0xD8)
LABEL_120:
        v85 = 1;
      v83 = a1;
      memcpy(a1, (const void *)~v1471, v85 + v79);
      return v83;
  }
}

_OWORD *sub_23ABAF4C0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  size_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  size_t v58;
  uint64_t v59;
  size_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  size_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  size_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(_OWORD *, uint64_t);
  unint64_t v96;
  unint64_t v97;
  size_t v98;
  void (*v99)(_OWORD *, uint64_t);
  unint64_t v100;
  size_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(uint64_t, uint64_t);
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  size_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  BOOL v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  uint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  size_t v185;
  size_t v186;
  uint64_t v187;
  unint64_t v188;
  _OWORD *v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  unsigned int v205;
  unint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  size_t v211;
  uint64_t v212;
  void (*v213)(_OWORD *, _OWORD *, uint64_t);
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  unint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  size_t v224;
  size_t v225;
  uint64_t v226;
  int v227;
  void (*v228)(size_t, size_t, uint64_t);
  size_t v229;
  size_t v230;
  _BYTE *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  _QWORD *v236;
  _QWORD *v237;
  unint64_t v238;
  unint64_t v239;
  void *v240;
  const void *v241;
  uint64_t v242;
  void (*v243)(_OWORD *, _OWORD *, uint64_t);
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  _QWORD *v248;
  _QWORD *v249;
  unint64_t v250;
  unint64_t v251;
  _QWORD *v252;
  _QWORD *v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  int v257;
  void (*v258)(unint64_t, unint64_t, uint64_t);
  unint64_t v259;
  unint64_t v260;
  _BYTE *v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  unint64_t v268;
  unint64_t v269;
  void *v270;
  const void *v271;
  unsigned int v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  unsigned int v276;
  uint64_t v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  __int128 v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  unsigned int v296;
  uint64_t v297;
  unint64_t v298;
  unsigned int v299;
  uint64_t v300;
  unsigned int v301;
  uint64_t v302;
  unsigned int v303;
  uint64_t v304;
  unsigned int v305;
  uint64_t v306;
  unsigned int v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  unsigned int v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t v316;
  unsigned int v317;
  size_t v318;
  size_t v319;
  unsigned int v320;
  uint64_t v321;
  unsigned int v322;
  uint64_t v323;
  unsigned int v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  unsigned int v334;
  _QWORD *v335;
  _QWORD *v336;
  unint64_t v337;
  unint64_t v338;
  uint64_t v339;
  void *v340;
  const void *v341;
  int v342;
  uint64_t *v343;
  uint64_t v344;
  _QWORD *v345;
  _QWORD *v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  _QWORD *v351;
  _OWORD *v352;
  _OWORD *v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  _OWORD *v372;
  __int128 *v373;
  __int128 v374;
  unint64_t v375;
  unint64_t v376;
  __int128 v377;
  _QWORD *v378;
  _QWORD *v379;
  char v380;
  unsigned int v381;
  __int16 v382;
  _QWORD *v383;
  _QWORD *v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  _QWORD *v389;
  _OWORD *v390;
  _OWORD *v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  _OWORD *v410;
  __int128 *v411;
  __int128 v412;
  unint64_t v413;
  unint64_t v414;
  __int128 v415;
  _QWORD *v416;
  _QWORD *v417;
  unsigned int v418;
  size_t v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t v422;
  void (*v423)(_OWORD *, _OWORD *, uint64_t);
  unint64_t v424;
  unint64_t v425;
  _QWORD *v426;
  _QWORD *v427;
  unint64_t v428;
  unint64_t v429;
  _QWORD *v430;
  _QWORD *v431;
  unint64_t v432;
  unint64_t v433;
  uint64_t v434;
  int v435;
  void (*v436)(unint64_t, unint64_t, uint64_t);
  unint64_t v437;
  unint64_t v438;
  _BYTE *v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  _QWORD *v444;
  _QWORD *v445;
  unint64_t v446;
  unint64_t v447;
  void *v448;
  const void *v449;
  _QWORD *v450;
  unint64_t v451;
  unint64_t v452;
  _QWORD *v453;
  uint64_t v454;
  unint64_t v455;
  __int128 v456;
  unint64_t v457;
  unint64_t v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  _QWORD *v462;
  _QWORD *v463;
  void *v464;
  const void *v465;
  int *v466;
  _QWORD *v467;
  _QWORD *v468;
  unint64_t v469;
  unint64_t v470;
  void *v471;
  const void *v472;
  int v473;
  uint64_t *v474;
  uint64_t v475;
  int v476;
  unint64_t v477;
  _QWORD *v478;
  unint64_t v479;
  unint64_t v480;
  _QWORD *v481;
  _QWORD *v482;
  unint64_t v483;
  unint64_t v484;
  __int128 v485;
  unint64_t v486;
  unint64_t v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  _QWORD *v491;
  _QWORD *v492;
  unint64_t v493;
  unint64_t v494;
  _OWORD *v495;
  _OWORD *v496;
  unint64_t v497;
  unint64_t v498;
  unsigned int v499;
  int v500;
  _QWORD *v501;
  _QWORD *v502;
  unint64_t v503;
  unint64_t v504;
  uint64_t v505;
  _QWORD *v506;
  _QWORD *v507;
  _OWORD *v508;
  _OWORD *v509;
  unint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  __int128 v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  _OWORD *v528;
  __int128 *v529;
  __int128 v530;
  unint64_t v531;
  unint64_t v532;
  __int128 v533;
  _QWORD *v534;
  _QWORD *v535;
  unint64_t v536;
  void *v537;
  const void *v538;
  int v539;
  size_t v540;
  unint64_t v541;
  uint64_t v542;
  size_t v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  unint64_t v547;
  void (*v548)(void *, const void *, uint64_t);
  unint64_t v549;
  _QWORD *v550;
  _QWORD *v551;
  unint64_t v552;
  unint64_t v553;
  unint64_t v554;
  _QWORD *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  void (*v560)(uint64_t, uint64_t, uint64_t);
  uint64_t v561;
  uint64_t v562;
  _BYTE *v563;
  unint64_t v564;
  unint64_t v565;
  unint64_t v566;
  unint64_t v567;
  _QWORD *v568;
  _QWORD *v569;
  unint64_t v570;
  unint64_t v571;
  void *v572;
  const void *v573;
  _QWORD *v574;
  _QWORD *v575;
  unint64_t v576;
  unint64_t v577;
  uint64_t v578;
  _QWORD *v579;
  _QWORD *v580;
  _OWORD *v581;
  _OWORD *v582;
  unint64_t v583;
  unint64_t v584;
  uint64_t v585;
  unint64_t v586;
  unint64_t v587;
  unint64_t v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  _OWORD *v601;
  __int128 *v602;
  __int128 v603;
  unint64_t v604;
  unint64_t v605;
  __int128 v606;
  _QWORD *v607;
  _QWORD *v608;
  unint64_t v609;
  unint64_t v610;
  char v611;
  unsigned int v612;
  __int16 v613;
  int v614;
  unint64_t *v615;
  unint64_t v616;
  unint64_t *v617;
  unint64_t v618;
  unint64_t *v619;
  unint64_t v620;
  BOOL v621;
  uint64_t v622;
  uint64_t v623;
  unsigned int v624;
  BOOL v625;
  uint64_t v626;
  uint64_t v627;
  unsigned int v628;
  BOOL v629;
  uint64_t v630;
  uint64_t v631;
  unsigned int v632;
  BOOL v633;
  uint64_t v634;
  uint64_t v635;
  unsigned int v636;
  uint64_t v637;
  BOOL v638;
  uint64_t v639;
  uint64_t v640;
  unsigned int v641;
  unsigned int v642;
  BOOL v643;
  uint64_t v644;
  uint64_t v645;
  char *v646;
  unint64_t v647;
  unsigned int v648;
  size_t v649;
  char *v650;
  unsigned int v651;
  unsigned int v652;
  BOOL v653;
  uint64_t v654;
  uint64_t v655;
  char *v656;
  unint64_t v657;
  unsigned int v658;
  size_t v659;
  char *v660;
  unsigned int v661;
  BOOL v662;
  uint64_t v663;
  uint64_t v664;
  unsigned int v665;
  BOOL v666;
  uint64_t v667;
  uint64_t v668;
  unsigned int v669;
  BOOL v670;
  uint64_t v671;
  uint64_t v672;
  unsigned int v673;
  BOOL v674;
  uint64_t v675;
  uint64_t v676;
  unsigned int v677;
  BOOL v678;
  uint64_t v679;
  uint64_t v680;
  unsigned int v681;
  BOOL v682;
  uint64_t v683;
  unsigned int v684;
  BOOL v685;
  uint64_t v686;
  uint64_t v687;
  unsigned int v688;
  BOOL v689;
  uint64_t v690;
  uint64_t v691;
  unsigned int v692;
  BOOL v693;
  uint64_t v694;
  uint64_t v695;
  unsigned int v696;
  uint64_t v697;
  uint64_t v698;
  BOOL v699;
  uint64_t v700;
  uint64_t v701;
  unsigned int v702;
  BOOL v703;
  uint64_t v704;
  uint64_t v705;
  unsigned int v706;
  BOOL v707;
  uint64_t v708;
  uint64_t v709;
  unsigned int v710;
  BOOL v711;
  uint64_t v712;
  uint64_t v713;
  unsigned int v714;
  uint64_t v715;
  BOOL v716;
  uint64_t v717;
  uint64_t v718;
  unsigned int v719;
  BOOL v720;
  uint64_t v721;
  uint64_t v722;
  unsigned int v723;
  BOOL v724;
  uint64_t v725;
  uint64_t v726;
  unsigned int v727;
  BOOL v728;
  uint64_t v729;
  uint64_t v730;
  unsigned int v731;
  BOOL v732;
  uint64_t v733;
  uint64_t v734;
  unsigned int v735;
  BOOL v736;
  uint64_t v737;
  uint64_t v738;
  unsigned int v739;
  BOOL v740;
  uint64_t v741;
  unsigned int v742;
  BOOL v743;
  uint64_t v744;
  unsigned int v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  void (*v751)(_OWORD *, uint64_t);
  size_t v752;
  void (*v753)(size_t, uint64_t);
  size_t v754;
  unint64_t v755;
  unint64_t v756;
  unint64_t v757;
  void *v758;
  uint64_t v759;
  unint64_t v760;
  int v761;
  void (*v762)(_OWORD *, uint64_t);
  unint64_t v763;
  void (*v764)(unint64_t, uint64_t);
  unint64_t v765;
  unint64_t v766;
  unint64_t v767;
  unint64_t v768;
  void *v769;
  uint64_t v770;
  unint64_t v771;
  int v772;
  unint64_t v773;
  uint64_t v774;
  size_t v775;
  uint64_t v776;
  void (*v777)(_OWORD *, _OWORD *, uint64_t);
  unint64_t v778;
  unint64_t v779;
  _QWORD *v780;
  _QWORD *v781;
  unint64_t v782;
  unint64_t v783;
  _QWORD *v784;
  _QWORD *v785;
  size_t v786;
  size_t v787;
  uint64_t v788;
  int v789;
  void (*v790)(size_t, size_t, uint64_t);
  size_t v791;
  size_t v792;
  _BYTE *v793;
  unint64_t v794;
  unint64_t v795;
  unint64_t v796;
  unint64_t v797;
  _QWORD *v798;
  _QWORD *v799;
  unint64_t v800;
  unint64_t v801;
  void *v802;
  const void *v803;
  _QWORD *v804;
  _QWORD *v805;
  unint64_t v806;
  unint64_t v807;
  uint64_t v808;
  _QWORD *v809;
  _QWORD *v810;
  _OWORD *v811;
  _OWORD *v812;
  unint64_t v813;
  unint64_t v814;
  uint64_t v815;
  unint64_t v816;
  unint64_t v817;
  unint64_t v818;
  __int128 v819;
  __int128 v820;
  __int128 v821;
  __int128 v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  __int128 v829;
  __int128 v830;
  _OWORD *v831;
  __int128 *v832;
  __int128 v833;
  unint64_t v834;
  unint64_t v835;
  __int128 v836;
  _QWORD *v837;
  _QWORD *v838;
  unint64_t v839;
  void *v840;
  size_t v841;
  uint64_t v842;
  int v843;
  uint64_t v844;
  size_t v845;
  unint64_t v846;
  unint64_t v847;
  int v848;
  size_t v849;
  unint64_t v850;
  unint64_t *v851;
  unint64_t v852;
  uint64_t v853;
  const void *v854;
  size_t v855;
  unint64_t v856;
  uint64_t v857;
  size_t v858;
  int v859;
  void *v860;
  uint64_t v861;
  void (*v862)(void *, const void *, uint64_t);
  uint64_t v863;
  unint64_t v864;
  _QWORD *v865;
  _QWORD *v866;
  unint64_t v867;
  unint64_t v868;
  unint64_t v869;
  _QWORD *v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  int v874;
  void (*v875)(uint64_t, uint64_t, uint64_t);
  uint64_t v876;
  uint64_t v877;
  _BYTE *v878;
  unint64_t v879;
  unint64_t v880;
  unint64_t v881;
  unint64_t v882;
  _QWORD *v883;
  _QWORD *v884;
  unint64_t v885;
  unint64_t v886;
  void *v887;
  const void *v888;
  _QWORD *v889;
  _QWORD *v890;
  unint64_t v891;
  unint64_t v892;
  uint64_t v893;
  _QWORD *v894;
  _QWORD *v895;
  _OWORD *v896;
  _OWORD *v897;
  unint64_t v898;
  unint64_t v899;
  uint64_t v900;
  unint64_t v901;
  unint64_t v902;
  unint64_t v903;
  __int128 v904;
  __int128 v905;
  __int128 v906;
  __int128 v907;
  __int128 v908;
  __int128 v909;
  __int128 v910;
  __int128 v911;
  __int128 v912;
  __int128 v913;
  __int128 v914;
  __int128 v915;
  _OWORD *v916;
  __int128 *v917;
  __int128 v918;
  unint64_t v919;
  unint64_t v920;
  __int128 v921;
  _QWORD *v922;
  _QWORD *v923;
  unint64_t v924;
  unsigned int v925;
  void (*v926)(_OWORD *, uint64_t);
  unint64_t v927;
  int v928;
  void (*v929)(_OWORD *, uint64_t);
  unint64_t v930;
  int v931;
  unint64_t v932;
  uint64_t v933;
  unint64_t v934;
  int v935;
  void (*v936)(_OWORD *, uint64_t);
  unint64_t v937;
  int v938;
  unint64_t v939;
  void (*v940)(_OWORD *, uint64_t);
  int v941;
  void (*v942)(_OWORD *, uint64_t);
  unint64_t v943;
  int v944;
  unint64_t v945;
  int v946;
  void (*v947)(_OWORD *, uint64_t);
  unint64_t v948;
  int v949;
  unint64_t v950;
  uint64_t v951;
  void (*v952)(_OWORD *, _OWORD *, uint64_t);
  _OWORD *v953;
  _OWORD *v954;
  int v955;
  unint64_t v956;
  unint64_t v957;
  size_t v958;
  uint64_t v959;
  void (*v960)(_OWORD *, _OWORD *, uint64_t);
  _OWORD *v961;
  int v962;
  unint64_t v963;
  _OWORD *v964;
  int v965;
  void *v966;
  const void *v967;
  uint64_t v968;
  void (*v969)(_OWORD *, _OWORD *, uint64_t);
  _OWORD *v970;
  _OWORD *v971;
  int v972;
  unint64_t v973;
  unint64_t v974;
  size_t v975;
  char v976;
  char v977;
  void *v978;
  const void *v979;
  uint64_t v980;
  void (*v981)(_OWORD *, _OWORD *, uint64_t);
  _OWORD *v982;
  _OWORD *v983;
  int v984;
  unint64_t v985;
  uint64_t v986;
  size_t v987;
  void (*v988)(_OWORD *, _OWORD *, uint64_t);
  _OWORD *v989;
  _OWORD *v990;
  int v991;
  unint64_t v992;
  uint64_t v993;
  size_t v994;
  int v995;
  void *v996;
  const void *v997;
  uint64_t v998;
  void (*v999)(_OWORD *, _OWORD *, uint64_t);
  _OWORD *v1000;
  _OWORD *v1001;
  int v1002;
  unint64_t v1003;
  uint64_t v1004;
  size_t v1005;
  void *v1006;
  const void *v1007;
  unint64_t v1008;
  unint64_t v1009;
  size_t v1010;
  unint64_t v1011;
  unint64_t *v1012;
  unint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  void (*v1016)(unint64_t, uint64_t);
  size_t v1017;
  unint64_t v1018;
  unint64_t v1019;
  unint64_t v1020;
  unint64_t *v1021;
  unint64_t v1022;
  uint64_t v1023;
  void (*v1024)(unint64_t, uint64_t);
  size_t v1025;
  uint64_t v1026;
  void (*v1027)(uint64_t, uint64_t);
  uint64_t v1028;
  unint64_t v1029;
  unint64_t v1030;
  unint64_t v1031;
  void *v1032;
  uint64_t v1033;
  unint64_t v1034;
  unint64_t v1035;
  unint64_t v1036;
  unint64_t v1037;
  unint64_t v1038;
  uint64_t *v1039;
  uint64_t v1040;
  unint64_t v1041;
  unint64_t v1042;
  unint64_t v1043;
  unint64_t v1044;
  unint64_t v1045;
  unint64_t v1046;
  uint64_t *v1047;
  uint64_t v1048;
  unint64_t v1049;
  unint64_t v1050;
  unint64_t v1051;
  unint64_t v1052;
  unint64_t v1053;
  unint64_t v1054;
  unint64_t v1055;
  unint64_t v1056;
  unint64_t v1057;
  unint64_t v1058;
  unint64_t v1059;
  unint64_t v1060;
  unint64_t v1061;
  unint64_t v1062;
  size_t v1063;
  char *v1064;
  int v1065;
  uint64_t *v1066;
  uint64_t v1067;
  unint64_t v1068;
  char *v1069;
  int v1070;
  uint64_t *v1071;
  uint64_t v1072;
  unint64_t v1073;
  unint64_t v1074;
  unint64_t v1075;
  unint64_t v1076;
  unint64_t v1077;
  size_t v1078;
  unint64_t v1079;
  unint64_t v1080;
  size_t v1081;
  unint64_t v1082;
  size_t v1083;
  unint64_t v1084;
  size_t v1085;
  unint64_t v1086;
  unint64_t v1087;
  unint64_t v1088;
  unint64_t v1089;
  unint64_t v1090;
  _QWORD *v1091;
  _QWORD *v1092;
  unint64_t v1093;
  unint64_t v1094;
  _QWORD *v1095;
  _QWORD *v1096;
  unint64_t v1097;
  unint64_t v1098;
  uint64_t v1099;
  int v1100;
  void (*v1101)(unint64_t, unint64_t, uint64_t);
  unint64_t v1102;
  unint64_t v1103;
  _BYTE *v1104;
  unint64_t v1105;
  unint64_t v1106;
  unint64_t v1107;
  unint64_t v1108;
  _QWORD *v1109;
  _QWORD *v1110;
  unint64_t v1111;
  unint64_t v1112;
  void *v1113;
  const void *v1114;
  unint64_t v1115;
  unint64_t v1116;
  unint64_t v1117;
  unint64_t v1118;
  unint64_t v1119;
  unint64_t v1120;
  _QWORD *v1121;
  _QWORD *v1122;
  unint64_t v1123;
  unint64_t v1124;
  _QWORD *v1125;
  _QWORD *v1126;
  unint64_t v1127;
  unint64_t v1128;
  uint64_t v1129;
  int v1130;
  void (*v1131)(unint64_t, unint64_t, uint64_t);
  unint64_t v1132;
  unint64_t v1133;
  _BYTE *v1134;
  unint64_t v1135;
  unint64_t v1136;
  unint64_t v1137;
  unint64_t v1138;
  _QWORD *v1139;
  _QWORD *v1140;
  unint64_t v1141;
  unint64_t v1142;
  void *v1143;
  const void *v1144;
  size_t v1145;
  unint64_t v1146;
  unint64_t v1147;
  _QWORD *v1148;
  _QWORD *v1149;
  unint64_t v1150;
  unint64_t v1151;
  _QWORD *v1152;
  _QWORD *v1153;
  size_t v1154;
  size_t v1155;
  uint64_t v1156;
  int v1157;
  void (*v1158)(size_t, size_t, uint64_t);
  size_t v1159;
  size_t v1160;
  _BYTE *v1161;
  unint64_t v1162;
  unint64_t v1163;
  unint64_t v1164;
  unint64_t v1165;
  _QWORD *v1166;
  _QWORD *v1167;
  unint64_t v1168;
  unint64_t v1169;
  void *v1170;
  const void *v1171;
  size_t v1172;
  unint64_t v1173;
  unint64_t v1174;
  _QWORD *v1175;
  _QWORD *v1176;
  unint64_t v1177;
  unint64_t v1178;
  _QWORD *v1179;
  _QWORD *v1180;
  size_t v1181;
  size_t v1182;
  uint64_t v1183;
  int v1184;
  void (*v1185)(size_t, size_t, uint64_t);
  size_t v1186;
  size_t v1187;
  _BYTE *v1188;
  unint64_t v1189;
  unint64_t v1190;
  unint64_t v1191;
  unint64_t v1192;
  _QWORD *v1193;
  _QWORD *v1194;
  unint64_t v1195;
  unint64_t v1196;
  void *v1197;
  const void *v1198;
  size_t v1199;
  unint64_t v1200;
  unint64_t v1201;
  _QWORD *v1202;
  _QWORD *v1203;
  unint64_t v1204;
  unint64_t v1205;
  _QWORD *v1206;
  _QWORD *v1207;
  size_t v1208;
  size_t v1209;
  uint64_t v1210;
  int v1211;
  void (*v1212)(size_t, size_t, uint64_t);
  size_t v1213;
  size_t v1214;
  _BYTE *v1215;
  unint64_t v1216;
  unint64_t v1217;
  unint64_t v1218;
  unint64_t v1219;
  _QWORD *v1220;
  _QWORD *v1221;
  unint64_t v1222;
  unint64_t v1223;
  void *v1224;
  const void *v1225;
  _QWORD *v1226;
  unint64_t v1227;
  unint64_t v1228;
  _QWORD *v1229;
  char *v1230;
  _QWORD *v1231;
  unint64_t v1232;
  unint64_t v1233;
  _QWORD *v1234;
  char *v1235;
  _QWORD *v1236;
  _QWORD *v1237;
  unint64_t v1238;
  unint64_t v1239;
  uint64_t v1240;
  _QWORD *v1241;
  _QWORD *v1242;
  _OWORD *v1243;
  _OWORD *v1244;
  unint64_t v1245;
  unint64_t v1246;
  uint64_t v1247;
  unint64_t v1248;
  unint64_t v1249;
  unint64_t v1250;
  __int128 v1251;
  __int128 v1252;
  __int128 v1253;
  __int128 v1254;
  __int128 v1255;
  __int128 v1256;
  __int128 v1257;
  __int128 v1258;
  __int128 v1259;
  __int128 v1260;
  __int128 v1261;
  __int128 v1262;
  _OWORD *v1263;
  __int128 *v1264;
  __int128 v1265;
  unint64_t v1266;
  unint64_t v1267;
  __int128 v1268;
  _QWORD *v1269;
  _QWORD *v1270;
  unint64_t v1271;
  _QWORD *v1272;
  _QWORD *v1273;
  _QWORD *v1274;
  _QWORD *v1275;
  unint64_t v1276;
  unint64_t v1277;
  uint64_t v1278;
  _QWORD *v1279;
  _QWORD *v1280;
  _OWORD *v1281;
  _OWORD *v1282;
  unint64_t v1283;
  unint64_t v1284;
  uint64_t v1285;
  unint64_t v1286;
  unint64_t v1287;
  unint64_t v1288;
  __int128 v1289;
  __int128 v1290;
  __int128 v1291;
  __int128 v1292;
  __int128 v1293;
  __int128 v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  __int128 v1300;
  _OWORD *v1301;
  __int128 *v1302;
  __int128 v1303;
  unint64_t v1304;
  unint64_t v1305;
  __int128 v1306;
  _QWORD *v1307;
  _QWORD *v1308;
  unint64_t v1309;
  _OWORD *v1310;
  _OWORD *v1311;
  _QWORD *v1312;
  _QWORD *v1313;
  unint64_t v1314;
  unint64_t v1315;
  uint64_t v1316;
  _QWORD *v1317;
  _QWORD *v1318;
  _OWORD *v1319;
  _OWORD *v1320;
  unint64_t v1321;
  unint64_t v1322;
  uint64_t v1323;
  unint64_t v1324;
  unint64_t v1325;
  unint64_t v1326;
  __int128 v1327;
  __int128 v1328;
  __int128 v1329;
  __int128 v1330;
  __int128 v1331;
  __int128 v1332;
  __int128 v1333;
  __int128 v1334;
  __int128 v1335;
  __int128 v1336;
  __int128 v1337;
  __int128 v1338;
  _OWORD *v1339;
  __int128 *v1340;
  __int128 v1341;
  unint64_t v1342;
  unint64_t v1343;
  __int128 v1344;
  _QWORD *v1345;
  _QWORD *v1346;
  unint64_t v1347;
  _QWORD *v1348;
  _QWORD *v1349;
  _QWORD *v1350;
  _QWORD *v1351;
  unint64_t v1352;
  unint64_t v1353;
  uint64_t v1354;
  _QWORD *v1355;
  _QWORD *v1356;
  _OWORD *v1357;
  _OWORD *v1358;
  unint64_t v1359;
  unint64_t v1360;
  uint64_t v1361;
  unint64_t v1362;
  unint64_t v1363;
  unint64_t v1364;
  __int128 v1365;
  __int128 v1366;
  __int128 v1367;
  __int128 v1368;
  __int128 v1369;
  __int128 v1370;
  __int128 v1371;
  __int128 v1372;
  __int128 v1373;
  __int128 v1374;
  __int128 v1375;
  __int128 v1376;
  _OWORD *v1377;
  __int128 *v1378;
  __int128 v1379;
  unint64_t v1380;
  unint64_t v1381;
  __int128 v1382;
  _QWORD *v1383;
  _QWORD *v1384;
  unint64_t v1385;
  void *v1386;
  const void *v1387;
  char *v1388;
  int v1389;
  size_t v1390;
  uint64_t *v1391;
  uint64_t v1392;
  _QWORD *v1393;
  unint64_t v1394;
  unint64_t v1395;
  _QWORD *v1396;
  _QWORD *v1397;
  _QWORD *v1398;
  _QWORD *v1399;
  _QWORD *v1400;
  unint64_t v1401;
  unint64_t v1402;
  uint64_t v1403;
  _QWORD *v1404;
  _QWORD *v1405;
  _OWORD *v1406;
  _OWORD *v1407;
  unint64_t v1408;
  unint64_t v1409;
  uint64_t v1410;
  unint64_t v1411;
  unint64_t v1412;
  unint64_t v1413;
  __int128 v1414;
  __int128 v1415;
  __int128 v1416;
  __int128 v1417;
  __int128 v1418;
  __int128 v1419;
  __int128 v1420;
  __int128 v1421;
  __int128 v1422;
  __int128 v1423;
  __int128 v1424;
  __int128 v1425;
  _OWORD *v1426;
  __int128 *v1427;
  __int128 v1428;
  unint64_t v1429;
  unint64_t v1430;
  __int128 v1431;
  _QWORD *v1432;
  _QWORD *v1433;
  unint64_t v1434;
  _OWORD *v1435;
  _OWORD *v1436;
  unsigned int v1437;
  _OWORD *result;
  unint64_t *v1439;
  unint64_t v1440;
  unint64_t *v1441;
  unint64_t v1442;
  unint64_t *v1443;
  unint64_t v1444;
  unint64_t *v1445;
  unint64_t v1446;
  unint64_t *v1447;
  unint64_t v1448;
  unint64_t *v1449;
  unint64_t v1450;
  unint64_t *v1451;
  unint64_t v1452;
  unint64_t *v1453;
  unint64_t v1454;
  unint64_t *v1455;
  unint64_t v1456;
  unint64_t *v1457;
  unint64_t v1458;
  unint64_t *v1459;
  unint64_t v1460;
  unint64_t *v1461;
  unint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  unint64_t v1475;
  void (*v1476)(unint64_t, uint64_t);
  unint64_t v1477;
  unint64_t v1478;
  unint64_t v1479;
  unint64_t v1480;
  void *v1481;
  uint64_t v1482;
  size_t v1483;
  unint64_t v1484;
  void (*v1485)(unint64_t, uint64_t);
  unint64_t v1486;
  unint64_t v1487;
  unint64_t v1488;
  unint64_t v1489;
  void *v1490;
  uint64_t v1491;
  size_t v1492;
  size_t v1493;
  int v1494;
  uint64_t *v1495;
  uint64_t v1496;
  size_t v1497;
  unint64_t v1498;
  void (*v1499)(unint64_t, uint64_t);
  unint64_t v1500;
  unint64_t v1501;
  unint64_t v1502;
  unint64_t v1503;
  void *v1504;
  uint64_t v1505;
  size_t v1506;
  void (*v1507)(size_t, uint64_t);
  size_t v1508;
  unint64_t v1509;
  unint64_t v1510;
  unint64_t v1511;
  void *v1512;
  uint64_t v1513;
  size_t v1514;
  void (*v1515)(size_t, uint64_t);
  size_t v1516;
  unint64_t v1517;
  unint64_t v1518;
  unint64_t v1519;
  void *v1520;
  uint64_t v1521;
  size_t v1522;
  int v1523;
  uint64_t *v1524;
  uint64_t v1525;
  size_t v1526;
  void (*v1527)(size_t, uint64_t);
  size_t v1528;
  unint64_t v1529;
  unint64_t v1530;
  unint64_t v1531;
  void *v1532;
  uint64_t v1533;
  size_t v1534;
  unint64_t v1535;
  unint64_t v1536;
  size_t v1537;
  unint64_t v1538;
  unint64_t v1539;
  _QWORD *v1540;
  _QWORD *v1541;
  unint64_t v1542;
  unint64_t v1543;
  _QWORD *v1544;
  _QWORD *v1545;
  uint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  int v1549;
  void (*v1550)(uint64_t, uint64_t, uint64_t);
  uint64_t v1551;
  uint64_t v1552;
  _BYTE *v1553;
  unint64_t v1554;
  unint64_t v1555;
  unint64_t v1556;
  unint64_t v1557;
  _QWORD *v1558;
  _QWORD *v1559;
  unint64_t v1560;
  unint64_t v1561;
  void *v1562;
  const void *v1563;
  _QWORD *v1564;
  _QWORD *v1565;
  unint64_t v1566;
  unint64_t v1567;
  uint64_t v1568;
  _QWORD *v1569;
  _QWORD *v1570;
  _OWORD *v1571;
  _OWORD *v1572;
  unint64_t v1573;
  unint64_t v1574;
  uint64_t v1575;
  unint64_t v1576;
  unint64_t v1577;
  unint64_t v1578;
  __int128 v1579;
  __int128 v1580;
  __int128 v1581;
  __int128 v1582;
  __int128 v1583;
  __int128 v1584;
  __int128 v1585;
  __int128 v1586;
  __int128 v1587;
  __int128 v1588;
  __int128 v1589;
  __int128 v1590;
  _OWORD *v1591;
  __int128 *v1592;
  __int128 v1593;
  unint64_t v1594;
  unint64_t v1595;
  __int128 v1596;
  _QWORD *v1597;
  _QWORD *v1598;
  unint64_t v1599;
  void *v1600;
  const void *v1601;
  size_t v1602;
  char *v1603;
  int v1604;
  uint64_t *v1605;
  uint64_t v1606;
  _QWORD *v1607;
  unint64_t v1608;
  unint64_t v1609;
  _QWORD *v1610;
  _QWORD *v1611;
  _QWORD *v1612;
  unsigned int v1613;
  unsigned int v1614;
  uint64_t v1615;
  int v1616;
  int v1617;
  int v1618;
  int v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  size_t v1625;
  size_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  size_t v1634;
  size_t v1635;
  unint64_t v1636;
  unint64_t v1637;
  size_t v1638;
  unsigned int v1639;
  unsigned int v1640;
  unint64_t v1641;
  unsigned int v1642;
  unsigned int v1643;
  unint64_t v1644;
  unsigned int v1645;
  unsigned int v1646;
  unint64_t v1647;
  unint64_t v1648;
  uint64_t v1649;
  unint64_t v1650;
  size_t v1651;
  uint64_t v1652;
  unint64_t v1653;
  size_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  unint64_t v1658;
  unsigned int v1659;
  unsigned int v1660;
  unsigned int v1661;
  unsigned int v1662;
  uint64_t v1663;
  size_t v1664;
  unsigned int v1665;
  unsigned int v1666;
  unsigned int v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  size_t v1678;
  unsigned int v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  unint64_t v1689;
  uint64_t v1690;
  size_t v1691;
  unint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  unint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  int *v1702;
  uint64_t v1703;
  uint64_t v1704;
  unint64_t v1705;
  unint64_t v1706;
  unint64_t v1707;
  unint64_t v1708;
  unint64_t v1709;
  unint64_t v1710;
  unint64_t v1711;
  unint64_t v1712;
  unint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  uint64_t v1723;
  unint64_t v1725;
  unint64_t v1726;
  unint64_t v1727;
  unint64_t v1728;
  unint64_t v1729;
  unint64_t v1730;
  unint64_t v1731;
  unint64_t v1732;
  size_t __n;
  size_t __na;
  uint64_t v1735;
  unsigned int v1736;
  unint64_t v1737;
  uint64_t v1738;
  unint64_t v1739;
  unint64_t v1740;
  unsigned int v1741;
  uint64_t AssociatedTypeWitness;
  size_t v1743;
  uint64_t v1744;
  size_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  unint64_t v1752;
  unint64_t v1753;
  unint64_t v1754;
  uint64_t v1755;
  size_t v1756;
  uint64_t v1757;
  void *v1758;
  size_t v1759;
  unint64_t v1760;
  const void *v1761;

  if (a1 == a2)
    return a1;
  v4 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v1721 = *(_QWORD *)(a3 + 24);
  v1735 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v1735 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v1663 = v6 + v8;
  v9 = *(_QWORD *)(v7 + 64);
  v1739 = v9;
  v10 = ((v6 + v8) & ~v8) + v9;
  v1753 = v10;
  if (v9 <= v6)
    v9 = v6;
  v11 = v9 + 1;
  v1759 = v9 + 1;
  v1760 = v9;
  if (v9 + 1 > v10)
    v10 = v9 + 1;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v1755 = v12 | v8;
  v1695 = (v12 | v8) + v11;
  v1754 = (v1695 & ~(v12 | v8)) + v11;
  if (v1754 > v10)
    v10 = (v1695 & ~(v12 | v8)) + v11;
  v1752 = v10;
  v1746 = v5;
  v13 = *(_DWORD *)(v5 + 84);
  v1723 = v4;
  v1681 = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(v1681 - 8);
  v15 = *(_DWORD *)(v14 + 84);
  v1674 = swift_getAssociatedTypeWitness();
  v16 = *(_QWORD *)(v1674 - 8);
  v17 = *(_DWORD *)(v16 + 84);
  v1639 = v17;
  v1659 = v15;
  if (v15 > v17)
    v17 = v15;
  v1645 = v17;
  if (v17 <= 0x7FFFFFFE)
    v17 = 2147483646;
  v1741 = v13;
  v1666 = v17;
  if (v17 <= v13)
    v18 = v13;
  else
    v18 = v17;
  v1694 = sub_23B1C5BDC();
  v19 = *(_QWORD *)(v1694 - 8);
  v20 = *(_DWORD *)(v19 + 84);
  if (v20 <= 0x7FFFFFFE)
    v21 = 2147483646;
  else
    v21 = *(_DWORD *)(v19 + 84);
  v1736 = v21;
  if (v18 > v21)
    v21 = v18;
  v1643 = v21;
  if (v21 <= 0x7FFFFFFF)
    v21 = 0x7FFFFFFF;
  v1662 = v21;
  v1679 = *(_DWORD *)(v19 + 84);
  v1740 = v6;
  v1687 = v6 + v12;
  v1750 = v12;
  v22 = *(unsigned __int8 *)(v16 + 80);
  v23 = *(_DWORD *)(v14 + 80) & 0xF8 | v22 | 7;
  v1657 = v6 + v23;
  v1757 = v23;
  v1680 = v14;
  v1684 = *(_QWORD *)(v14 + 64) + 7;
  v1672 = v22 + 8;
  v1673 = v16;
  v1703 = v22;
  v1668 = *(_QWORD *)(v16 + 64) + 7;
  v24 = *(unsigned __int8 *)(v19 + 80);
  v1748 = v24 | 7;
  v1743 = ((((v1668 + ((v22 + 8 + (v1684 & 0xFFFFFFFFFFFFFFF8)) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  v1744 = (v24 | 7) + 16;
  v1697 = v24 + 12;
  v1699 = *(_QWORD *)(v1694 - 8);
  v25 = *(_QWORD *)(v19 + 64);
  v1693 = v25 + v24;
  v1664 = v25 + 12;
  v1690 = v24 + 10;
  v1678 = v25;
  if (v20)
    v26 = *(_QWORD *)(v19 + 64);
  else
    v26 = v25 + 1;
  v1745 = v26;
  v1691 = v26 + 7;
  v1705 = (v24
         + 10
         + ((((((v25 + 12 + ((v25 + v24 + ((v24 + 12) & ~v24)) & ~v24)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v24;
  v27 = ((((((((((v26 + 7 + v1705) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v1714 = (v1744 + ((v6 + v23 + ((v6 + v12) & ~v12)) & ~v23) + v1743) & ~(v24 | 7);
  v28 = (((v1714 + v27 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v1756 = v28 + 16;
  v29 = v23 | v12 | v24;
  v1641 = v28 + 16 + v29;
  v1732 = v28 + 23;
  __n = ((v28 + 23 + (v1641 & ~v29)) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1747 = v7;
  v30 = *(_DWORD *)(v7 + 84);
  v1683 = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(v1683 - 8);
  v32 = *(_DWORD *)(v31 + 84);
  v33 = v24;
  v1677 = swift_getAssociatedTypeWitness();
  v34 = *(_QWORD *)(v1677 - 8);
  v35 = *(_DWORD *)(v34 + 84);
  v1640 = v35;
  v1660 = v32;
  if (v32 > v35)
    v35 = v32;
  v1646 = v35;
  if (v35 <= 0x7FFFFFFE)
    v35 = 2147483646;
  v1667 = v35;
  if (v35 <= v30)
    v35 = v30;
  if (v35 <= v1736)
    v35 = v1736;
  v1642 = v35;
  if (v35 <= 0x7FFFFFFF)
    v35 = 0x7FFFFFFF;
  v1661 = v35;
  v1686 = v1739 + v8;
  v36 = *(unsigned __int8 *)(v34 + 80);
  v37 = *(_DWORD *)(v31 + 80) & 0xF8 | v36 | 7;
  v1656 = v1739 + v37;
  v1682 = v31;
  v1685 = *(_QWORD *)(v31 + 64) + 7;
  v1675 = v36 + 8;
  v1676 = *(_QWORD *)(v1677 - 8);
  v1669 = *(_QWORD *)(v34 + 64) + 7;
  v38 = ((((v1669 + ((v36 + 8 + (v1685 & 0xFFFFFFFFFFFFFFF8)) & ~v36)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v39 = v37;
  v1692 = v27;
  v1644 = (v1744 + ((v1739 + v37 + ((v1739 + v8) & ~v8)) & ~v37) + v38) & ~v1748;
  v40 = (((v1644 + v27 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v41 = v40 + 16;
  v42 = v37 | v8;
  v43 = v37 | v8 | v24;
  v44 = v40 + 16 + v43;
  v45 = v40 + (v44 & ~v43);
  v1751 = v29;
  v1637 = v29 + v6;
  v46 = v1756 + ((v29 + v6) & ~v29);
  v47 = (v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = ((v47 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1720 = v8;
  v49 = (v46 + v8) & ~v8;
  v1665 = v30;
  if (v30)
    v50 = v1739;
  else
    v50 = v1739 + 1;
  v51 = ((((((v50 + v39 + v49) & ~v39) + v38 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1635 = v50 + v39;
  v52 = v38 + ((v50 + v39 + ((v6 + v8) & ~v8)) & ~v39) + 16;
  v53 = ((v47 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v54 = *(_QWORD *)(v4 - 8);
  if (*(_DWORD *)(v54 + 84))
    v55 = *(_QWORD *)(v54 + 64);
  else
    v55 = *(_QWORD *)(v54 + 64) + 1;
  if (v6 > v48)
    v48 = v6;
  if (v51 > v52)
    v52 = v51;
  v56 = *(unsigned __int8 *)(v54 + 80);
  v1631 = v6 + v56;
  if (v53 <= ((v6 + v56) & ~v56) + v55)
    v53 = ((v6 + v56) & ~v56) + v55;
  if (v48 <= v52)
    v48 = v52;
  if (v48 <= v53)
    v57 = v53;
  else
    v57 = v48;
  if (v1741)
    v58 = v6;
  else
    v58 = v6 + 1;
  v59 = *(_QWORD *)(v1721 - 8);
  v1722 = v43;
  v1636 = v43 + v1739;
  v60 = v41 + ((v43 + v1739) & ~v43);
  v61 = (v60 + 7) & 0xFFFFFFFFFFFFFFF8;
  v62 = ((v61 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v63 = v1750;
  v64 = v1757;
  v65 = ((((((v58 + v64 + ((v60 + v63) & ~v63)) & ~v64) + v1743 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v1630 = v1739 + v1750;
  v1634 = v58 + v1757;
  v66 = v1743 + ((v58 + v64 + ((v1739 + v63) & ~v63)) & ~v64) + 16;
  if (*(_DWORD *)(v59 + 84))
    v67 = *(_QWORD *)(v59 + 64);
  else
    v67 = *(_QWORD *)(v59 + 64) + 1;
  if (v1739 > v62)
    v62 = v1739;
  if (v65 > v66)
    v66 = v65;
  v68 = ((v61 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v69 = *(unsigned __int8 *)(v59 + 80);
  v1629 = v1739 + v69;
  if (v68 <= ((v1739 + v69) & ~v69) + v67)
    v68 = ((v1739 + v69) & ~v69) + v67;
  if (v62 <= v66)
    v62 = v66;
  if (v62 <= v68)
    v62 = v68;
  v1647 = v62;
  v1648 = v57;
  v70 = v62 + 1;
  if (v70 <= v57 + 1)
    v70 = v57 + 1;
  v71 = v1760 + 2;
  v1737 = v1760 + 2;
  if (v1759 > v1760 + 2)
    v71 = v1760 + 1;
  if (v71 <= __n)
    v71 = __n;
  v1638 = v50;
  v1650 = ((((((((v1757 + ((((v58 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v1757) + v1743 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + v42
        + 8;
  v1651 = v50 + 7;
  v1652 = v39 + 9;
  v1738 = v39;
  v1689 = ((((v1669 + ((v36 + 8 + (v1685 & 0xFFFFFFFFFFFFFFF8)) & ~v36)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  v1653 = ((((((((v39 + 9 + ((((v50 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v39) + v38 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  v1726 = ((v45 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v71 <= v1726)
    v72 = ((v45 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v72 = v71;
  if (v72 <= v1756)
    v72 = v1756;
  __na = v41;
  if (v72 <= v41)
    v72 = v41;
  v1725 = v1754 + 2;
  if (v72 <= v1754 + 2)
    v72 = v1754 + 2;
  v1728 = ((v1760 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v72 <= v1728)
    v72 = ((v1760 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  v1729 = (v1760 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v72 <= v1729)
    v72 = (v1760 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v72 <= v1753)
    v72 = v1753;
  v1730 = ((v1755 + 1) & ~v1755) + v1759;
  if (v72 <= v1730)
    v72 = ((v1755 + 1) & ~v1755) + v1759;
  v1727 = v70 + 1;
  v1658 = v70;
  if (v72 <= v70 + 1)
    v72 = v70 + 1;
  if (v72 <= v1754)
    v72 = v1754;
  v1731 = ((((v1653 + (v1650 & ~v42) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v72 <= v1731)
    v72 = ((((v1653 + (v1650 & ~v42) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v72 <= v1752)
    v72 = v1752;
  if (v72 <= 0x38)
    v73 = 56;
  else
    v73 = v72;
  v74 = (unsigned __int8 *)a1 + v73;
  v1702 = (int *)((char *)a1 + v73);
  v1632 = *(_QWORD *)(v1721 - 8);
  v1633 = *(_QWORD *)(v1723 - 8);
  v1625 = v67;
  v1626 = v55;
  if (v73 > 3)
    goto LABEL_105;
  v75 = ((1 << (8 * v73)) + 5) >> (8 * v73);
  if (v75 > 0xFFD8)
  {
    v76 = *(_DWORD *)v74;
  }
  else
  {
    if (v75 <= 0xD8)
    {
LABEL_105:
      v76 = *v74;
      goto LABEL_108;
    }
    v76 = *(unsigned __int16 *)v74;
  }
LABEL_108:
  v77 = v1735;
  if (v76 >= 0x27)
  {
    if (v73 <= 3)
      v78 = v73;
    else
      v78 = 4;
    __asm { BR              X16 }
  }
  v1654 = v58;
  v1701 = ~v8;
  v1700 = ~v1755;
  v1688 = ~v1750;
  v1698 = ~v1757;
  v1670 = ~v1703;
  v1696 = ~v1748;
  v79 = ~v33;
  v1749 = ~v29;
  v1704 = ~v39;
  v1671 = ~v36;
  v1655 = ~v43;
  v1628 = ~v56;
  v1627 = ~v69;
  v1649 = ~v42;
  v80 = v1745;
  v81 = AssociatedTypeWitness;
  switch(v76)
  {
    case 0u:
    case 0x12u:
      (*(void (**)(_OWORD *, uint64_t))(v1746 + 8))(a1, AssociatedTypeWitness);
      v82 = ((unint64_t)a1 + v1663) & v1701;
      goto LABEL_375;
    case 1u:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v84 = v1760;
        else
          v84 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 2u:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v85 = v1760;
        else
          v85 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 3u:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v86 = v1760;
        else
          v86 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 4u:
      v87 = *((unsigned __int8 *)a1 + v1760);
      if (v87 >= 2)
      {
        if (v1760 <= 3)
          v88 = v1760;
        else
          v88 = 4;
        __asm { BR              X12 }
      }
      v172 = v1747;
      if (v87 == 1)
      {
        v173 = v1735;
      }
      else
      {
        v172 = v1746;
        v173 = AssociatedTypeWitness;
      }
      (*(void (**)(_OWORD *, uint64_t))(v172 + 8))(a1, v173);
      v82 = ((unint64_t)a1 + v1695) & v1700;
      v122 = *(unsigned __int8 *)(v82 + v1760);
      if (v122 >= 2)
      {
        if (v1760 <= 3)
          v174 = v1760;
        else
          v174 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_374;
    case 5u:
      v89 = v1662;
      if (v1741 == v1662)
      {
        v90 = (*(uint64_t (**)(_OWORD *))(v1746 + 48))(a1);
        goto LABEL_1161;
      }
      v144 = ((unint64_t)a1 + v1687) & v1688;
      v145 = (v144 + v6 + v1757) & v1698;
      if (v1666 == v1662)
      {
        if (v1659 == v1666)
        {
          v90 = (*(uint64_t (**)(unint64_t))(v1680 + 48))((v144 + v1740 + v1757) & v1698);
          goto LABEL_1161;
        }
        v168 = (unint64_t *)((v1684 + v145) & 0xFFFFFFFFFFFFFFF8);
        if (v1645 <= 0x7FFFFFFE)
        {
          v169 = *v168;
          goto LABEL_1353;
        }
        v90 = (*(uint64_t (**)(unint64_t))(v1673 + 48))(((unint64_t)v168 + v1672) & v1670);
      }
      else
      {
        v150 = v1743 + v145;
        if ((v1643 & 0x80000000) != 0)
        {
          v746 = (v1697 + ((v1744 + v150) & v1696)) & v79;
          if (v1679 <= 0x7FFFFFFD)
          {
            v169 = *(_QWORD *)(((v1664 + ((v1693 + v746) & v79)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_1353:
            if (v169 >= 0xFFFFFFFF)
              LODWORD(v169) = -1;
            if ((v169 + 1) >= 2)
            {
              v760 = ((unint64_t)a1 + v1641) & v1749;
              goto LABEL_1357;
            }
            goto LABEL_1163;
          }
          v90 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v746);
        }
        else
        {
          v151 = *(_QWORD *)(v150 + 8);
          if (v151 >= 0xFFFFFFFF)
            LODWORD(v151) = -1;
          v90 = v151 + 1;
        }
      }
LABEL_1161:
      if (v90)
        goto LABEL_1174;
      v144 = ((unint64_t)a1 + v1687) & v1688;
      v145 = (v144 + v1740 + v1757) & v1698;
LABEL_1163:
      v751 = *(void (**)(_OWORD *, uint64_t))(v1746 + 8);
      v751(a1, AssociatedTypeWitness);
      v751((_OWORD *)v144, AssociatedTypeWitness);
      (*(void (**)(unint64_t, uint64_t))(v1680 + 8))(v145, v1681);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v1673 + 8))((v1672 + ((v1684 + v145) & 0xFFFFFFFFFFFFFFF8)) & v1670, v1674);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v752 = (v1744 + v1743 + v145) & v1696;
      v753 = *(void (**)(size_t, uint64_t))(v1699 + 8);
      v753((v1697 + v752) & ~v33, v1694);
      v754 = (v1693 + ((v1697 + v752) & ~v33)) & ~v33;
      v753(v754, v1694);
      swift_bridgeObjectRelease();
      v755 = (v1690
            + ((((((v1664 + v754) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v33;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1699 + 48))(v755, 1, v1694))
        v753(v755, v1694);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v756 = *(_QWORD *)(((((((v1691 + v755) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 8);
      if ((v756 & 0x3000000000000000) == 0)
        sub_23AAAE53C(*(_QWORD *)((((((v1691 + v755) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v756);
      swift_bridgeObjectRelease();
      v757 = v1692 + v752;
      v758 = *(void **)(v757 + 16);
      LODWORD(v759) = -1;
      if ((unint64_t)v758 < 0xFFFFFFFF)
        v759 = *(_QWORD *)(v757 + 16);
      v81 = AssociatedTypeWitness;
      v89 = v1662;
      if ((int)v759 - 1 < 0)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v757 + 192))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      sub_23AAA12F0(*(_QWORD *)((((v757 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v757 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
      v79 = ~v33;
LABEL_1174:
      v760 = ((unint64_t)a1 + v1641) & v1749;
      if (v1741 == v89)
      {
        v761 = (*(uint64_t (**)(unint64_t))(v1746 + 48))(((unint64_t)a1 + v1641) & v1749);
LABEL_1369:
        if (v761)
          goto LABEL_1408;
        v1008 = (v1687 + v760) & v1688;
        v1009 = (v1657 + v1008) & v1698;
        goto LABEL_1371;
      }
LABEL_1357:
      v1008 = (v1687 + v760) & v1688;
      v1009 = (v1657 + v1008) & v1698;
      if (v1666 == v89)
      {
        if (v1659 == v1666)
        {
          v761 = (*(uint64_t (**)(unint64_t))(v1680 + 48))((v1657 + v1008) & v1698);
          goto LABEL_1369;
        }
        v1012 = (unint64_t *)((v1684 + v1009) & 0xFFFFFFFFFFFFFFF8);
        if (v1645 > 0x7FFFFFFE)
        {
          v761 = (*(uint64_t (**)(unint64_t))(v1673 + 48))(((unint64_t)v1012 + v1672) & v1670);
          goto LABEL_1369;
        }
        v1013 = *v1012;
      }
      else
      {
        v1010 = v1009 + v1743;
        if ((v1643 & 0x80000000) == 0)
        {
          v1011 = *(_QWORD *)(v1010 + 8);
          if (v1011 >= 0xFFFFFFFF)
            LODWORD(v1011) = -1;
          v761 = v1011 + 1;
          goto LABEL_1369;
        }
        v1014 = (v1697 + ((v1744 + v1010) & v1696)) & v79;
        if (v1679 > 0x7FFFFFFD)
        {
          v761 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v1014);
          goto LABEL_1369;
        }
        v1013 = *(_QWORD *)(((v1664 + ((v1693 + v1014) & v79)) & 0xFFFFFFFFFFFFF8) + 8);
      }
      if (v1013 >= 0xFFFFFFFF)
        LODWORD(v1013) = -1;
      if ((v1013 + 1) < 2)
      {
LABEL_1371:
        v1620 = v73;
        v1015 = v79;
        v1016 = *(void (**)(unint64_t, uint64_t))(v1746 + 8);
        v1016(v760, v81);
        v1016(v1008, v81);
        (*(void (**)(unint64_t, uint64_t))(v1680 + 8))(v1009, v1681);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v1673 + 8))((v1672 + ((v1684 + v1009) & 0xFFFFFFFFFFFFFFF8)) & v1670, v1674);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v1017 = v1743;
        goto LABEL_1397;
      }
LABEL_1408:
      v185 = v1678;
      v80 = v1745;
      if (!v1679)
        goto LABEL_378;
LABEL_379:
      v186 = v80;
      v187 = v1751 + 16;
      v188 = ((v1732
             + ((v1751
               + 16
               + ((((v1714
                   + 327
                   + ((((((((((v1705 + 7 + v185) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 19) & 0xFFFFFFFFFFFFFFF8)
                     + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)) & v1749)) & 0xFFFFFFFFFFFFFFF8)
           + 8;
      if (v188 <= v1752)
        v188 = v1752;
      if (v1726 > v188)
        v188 = v1726;
      if (v1756 > v188)
        v188 = v1756;
      if (__na > v188)
        v188 = __na;
      if (v1759 > v188)
        v188 = v1759;
      if (v1725 > v188)
        v188 = v1754 + 2;
      if (v1728 > v188)
        v188 = ((v1760 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (v1737 > v188)
        v188 = v1760 + 2;
      if (v1729 > v188)
        v188 = (v1760 & 0xFFFFFFFFFFFFFFF8) + 16;
      if (v188 <= v1759)
        v188 = v1759;
      if (v188 <= v1753)
        v188 = v1753;
      if (v188 <= v1730)
        v188 = ((v1755 + 1) & ~v1755) + v1759;
      if (v188 <= v1759)
        v188 = v1759;
      if (v188 <= v1727)
        v188 = v1727;
      if (v188 <= v1737)
        v188 = v1760 + 2;
      if (v188 <= v1759)
        v188 = v1759;
      if (v188 <= v1754)
        v188 = v1754;
      if (v188 <= v1759)
        v188 = v1759;
      if (v188 <= v1731)
        v188 = v1731;
      if (v188 <= v1737)
        v188 = v1760 + 2;
      if (v188 <= v1759)
        v188 = v1759;
      if (v188 <= 0x38)
        v188 = 56;
      v189 = a2;
      if (v188 > 3)
        goto LABEL_426;
      v190 = ((1 << (8 * v188)) + 5) >> (8 * v188);
      if (v190 <= 0xFFD8)
      {
        if (v190 > 0xD8)
        {
          v191 = *(unsigned __int16 *)((char *)a2 + v188);
          if (v191 < 0x27)
            goto LABEL_435;
          goto LABEL_431;
        }
LABEL_426:
        v191 = *((unsigned __int8 *)a2 + v188);
        if (v191 < 0x27)
          goto LABEL_435;
LABEL_431:
        if (v73 <= 3)
          v192 = v73;
        else
          v192 = 4;
        __asm { BR              X12 }
      }
      v191 = *(_DWORD *)((char *)a2 + v188);
      if (v191 >= 0x27)
        goto LABEL_431;
LABEL_435:
      switch(v191)
      {
        case 0u:
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v1746 + 32))(a1, a2, v81);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1747 + 32))(((unint64_t)a1 + v1663) & v1701, ((unint64_t)a2 + v1663) & v1701, v77);
          if (v73 > 3)
            goto LABEL_437;
          v324 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v324 > 0xFFD8)
          {
            *v1702 = 0;
          }
          else if (v324 <= 0xD8)
          {
LABEL_437:
            *(_BYTE *)v1702 = 0;
          }
          else
          {
            *(_WORD *)v1702 = 0;
          }
          return a1;
        case 1u:
          v195 = *((unsigned __int8 *)a2 + v1760);
          if (v195 >= 2)
          {
            if (v1760 <= 3)
              v196 = v1760;
            else
              v196 = 4;
            __asm { BR              X12 }
          }
          v621 = v195 == 1;
          if (v195 == 1)
            v622 = v1747;
          else
            v622 = v1746;
          if (v195 == 1)
            v623 = v77;
          else
            v623 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v622 + 32))(a1, a2, v623);
          *((_BYTE *)a1 + v1760) = v621;
          if (v73 > 3)
            goto LABEL_809;
          v624 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v624 > 0xFFD8)
          {
            *v1702 = 1;
          }
          else if (v624 <= 0xD8)
          {
LABEL_809:
            *(_BYTE *)v1702 = 1;
          }
          else
          {
            *(_WORD *)v1702 = 1;
          }
          return a1;
        case 2u:
          v197 = *((unsigned __int8 *)a2 + v1760);
          if (v197 >= 2)
          {
            if (v1760 <= 3)
              v198 = v1760;
            else
              v198 = 4;
            __asm { BR              X12 }
          }
          v625 = v197 == 1;
          if (v197 == 1)
            v626 = v1747;
          else
            v626 = v1746;
          if (v197 == 1)
            v627 = v77;
          else
            v627 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v626 + 32))(a1, a2, v627);
          *((_BYTE *)a1 + v1760) = v625;
          if (v73 > 3)
            goto LABEL_821;
          v628 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v628 > 0xFFD8)
          {
            *v1702 = 2;
          }
          else if (v628 <= 0xD8)
          {
LABEL_821:
            *(_BYTE *)v1702 = 2;
          }
          else
          {
            *(_WORD *)v1702 = 2;
          }
          return a1;
        case 3u:
          v199 = *((unsigned __int8 *)a2 + v1760);
          if (v199 >= 2)
          {
            if (v1760 <= 3)
              v200 = v1760;
            else
              v200 = 4;
            __asm { BR              X12 }
          }
          v629 = v199 == 1;
          if (v199 == 1)
            v630 = v1747;
          else
            v630 = v1746;
          if (v199 == 1)
            v631 = v77;
          else
            v631 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v630 + 32))(a1, a2, v631);
          *((_BYTE *)a1 + v1760) = v629;
          if (v73 > 3)
            goto LABEL_833;
          v632 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v632 > 0xFFD8)
          {
            *v1702 = 3;
          }
          else if (v632 <= 0xD8)
          {
LABEL_833:
            *(_BYTE *)v1702 = 3;
          }
          else
          {
            *(_WORD *)v1702 = 3;
          }
          return a1;
        case 4u:
          v201 = *((unsigned __int8 *)a2 + v1760);
          if (v201 >= 2)
          {
            if (v1760 <= 3)
              v202 = v1760;
            else
              v202 = 4;
            __asm { BR              X12 }
          }
          v633 = v201 == 1;
          if (v201 == 1)
            v634 = v1747;
          else
            v634 = v1746;
          if (v201 == 1)
            v635 = v77;
          else
            v635 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v634 + 32))(a1, a2, v635);
          *((_BYTE *)a1 + v1760) = v633;
          v636 = *(unsigned __int8 *)((((unint64_t)a2 + v1695) & v1700) + v1760);
          if (v636 >= 2)
          {
            if (v1760 <= 3)
              v637 = v1760;
            else
              v637 = 4;
            __asm { BR              X12 }
          }
          v740 = v636 == 1;
          if (v636 == 1)
            v741 = v1747;
          else
            v741 = v1746;
          (*(void (**)(unint64_t))(v741 + 32))(((unint64_t)a1 + v1695) & v1700);
          *(_BYTE *)((((unint64_t)a1 + v1695) & v1700) + v1760) = v740;
          if (v73 > 3)
            goto LABEL_1136;
          v742 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v742 > 0xFFD8)
          {
            *v1702 = 4;
          }
          else if (v742 <= 0xD8)
          {
LABEL_1136:
            *(_BYTE *)v1702 = 4;
          }
          else
          {
            *(_WORD *)v1702 = 4;
          }
          return a1;
        case 5u:
          v1706 = v1705 + 7;
          v1715 = v1714 + 327;
          if (v1741 == v1662)
          {
            v203 = v1746;
            v204 = (*(uint64_t (**)(_OWORD *))(v1746 + 48))(a2);
            v205 = v1679;
LABEL_1193:
            if (v204)
            {
LABEL_1194:
              memcpy(a1, a2, v1756);
              v773 = v1706;
              v774 = v1715;
LABEL_1195:
              v775 = v186;
              goto LABEL_1201;
            }
            v325 = ((unint64_t)a2 + v1687) & v1688;
            v326 = (v325 + v1740 + v1757) & v1698;
LABEL_1197:
            v776 = v79;
            v777 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(v203 + 32);
            v777(a1, a2, AssociatedTypeWitness);
            v778 = ((unint64_t)a1 + v1687) & v1688;
            v777((_OWORD *)v778, (_OWORD *)v325, AssociatedTypeWitness);
            v779 = (v778 + v1740 + v1757) & v1698;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1680 + 32))(v779, v326, v1681);
            v780 = (_QWORD *)((v1684 + v779) & 0xFFFFFFFFFFFFFFF8);
            v781 = (_QWORD *)((v1684 + v326) & 0xFFFFFFFFFFFFFFF8);
            *v780 = *v781;
            v782 = ((unint64_t)v780 + v1672) & v1670;
            v783 = ((unint64_t)v781 + v1672) & v1670;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1673 + 32))(v782, v783, v1674);
            v784 = (_QWORD *)((v1668 + v783) & 0xFFFFFFFFFFFFF8);
            v785 = (_QWORD *)((v1668 + v782) & 0xFFFFFFFFFFFFF8);
            *v785 = *v784;
            *(_OWORD *)(((unint64_t)v785 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v784 + 15) & 0xFFFFFFFFFFFFF8);
            *(_OWORD *)(v1743 + v779) = *(_OWORD *)(v1743 + v326);
            v786 = (v1744 + v1743 + v779) & v1696;
            v787 = (v1744 + v1743 + v326) & v1696;
            *(_BYTE *)v786 = *(_BYTE *)v787;
            v788 = v786 | 4;
            v789 = *(_DWORD *)(v787 | 4);
            *(_BYTE *)(v788 + 4) = *(_BYTE *)((v787 | 4) + 4);
            *(_DWORD *)v788 = v789;
            *(_WORD *)(v786 + 10) = *(_WORD *)(v787 + 0xA);
            v790 = *(void (**)(size_t, size_t, uint64_t))(v1699 + 32);
            v790((v1697 + v786) & v776, (v1697 + v787) & v776, v1694);
            v791 = (v1693 + ((v1697 + v786) & v776)) & v776;
            v792 = (v1693 + ((v1697 + v787) & v776)) & v776;
            v790(v791, v792, v1694);
            v793 = (_BYTE *)(v791 + v1678);
            *v793 = *(_BYTE *)(v792 + v1678);
            v793[1] = *(_BYTE *)(v792 + v1678 + 1);
            v793[2] = *(_BYTE *)(v792 + v1678 + 2);
            v793[3] = *(_BYTE *)(v792 + v1678 + 3);
            v793[4] = *(_BYTE *)(v792 + v1678 + 4);
            v794 = (v791 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
            v795 = (v792 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)v794 = *(_OWORD *)v795;
            *(_BYTE *)(v794 + 16) = *(_BYTE *)(v795 + 16);
            *(_BYTE *)(v794 + 17) = *(_BYTE *)(v795 + 17);
            *(_BYTE *)(v794 + 18) = *(_BYTE *)(v795 + 18);
            *(_BYTE *)(v794 + 19) = *(_BYTE *)(v795 + 19);
            v796 = (v794 + 27) & 0xFFFFFFFFFFFFFFF8;
            v797 = (v795 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v796 = *(_QWORD *)v797;
            *(_BYTE *)(v796 + 8) = *(_BYTE *)(v797 + 8);
            *(_BYTE *)(v796 + 9) = *(_BYTE *)(v797 + 9);
            *(_BYTE *)(v796 + 10) = *(_BYTE *)(v797 + 10);
            *(_BYTE *)(v796 + 11) = *(_BYTE *)(v797 + 11);
            *(_BYTE *)(v796 + 12) = *(_BYTE *)(v797 + 12);
            v798 = (_QWORD *)((v794 + 47) & 0xFFFFFFFFFFFFF8);
            v799 = (_QWORD *)((v795 + 47) & 0xFFFFFFFFFFFFF8);
            *v798 = *v799;
            v800 = ((unint64_t)v798 + 15) & 0xFFFFFFFFFFFFFFF8;
            v801 = ((unint64_t)v799 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v800 = *(_QWORD *)v801;
            *(_BYTE *)(v800 + 8) = *(_BYTE *)(v801 + 8);
            *(_BYTE *)(v800 + 9) = *(_BYTE *)(v801 + 9);
            v802 = (void *)((v1690 + v800) & v776);
            v1622 = v776;
            v803 = (const void *)((v1690 + v801) & v776);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1699 + 48))(v803, 1, v1694))
            {
              v186 = v1745;
              memcpy(v802, v803, v1745);
            }
            else
            {
              v790((size_t)v802, (size_t)v803, v1694);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1699 + 56))(v802, 0, 1, v1694);
              v186 = v1745;
            }
            v205 = v1679;
            v804 = (_QWORD *)(((unint64_t)v803 + v1691) & 0xFFFFFFFFFFFFFFF8);
            v805 = (_QWORD *)(((unint64_t)v802 + v1691) & 0xFFFFFFFFFFFFFFF8);
            *v805 = *v804;
            v806 = ((unint64_t)v805 + 15) & 0xFFFFFFFFFFFFFFF8;
            v807 = ((unint64_t)v804 + 15) & 0xFFFFFFFFFFFFFFF8;
            v808 = *(_QWORD *)v807;
            *(_BYTE *)(v806 + 8) = *(_BYTE *)(v807 + 8);
            *(_QWORD *)v806 = v808;
            v809 = (_QWORD *)(((unint64_t)v805 + 31) & 0xFFFFFFFFFFFFF8);
            v810 = (_QWORD *)(((unint64_t)v804 + 31) & 0xFFFFFFFFFFFFF8);
            *v809 = *v810;
            v811 = (_OWORD *)(((unint64_t)v809 + 15) & 0xFFFFFFFFFFFFFFF8);
            v812 = (_OWORD *)(((unint64_t)v810 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v811 = *v812;
            v813 = ((unint64_t)v811 + 19) & 0xFFFFFFFFFFFFFFF8;
            v814 = ((unint64_t)v812 + 19) & 0xFFFFFFFFFFFFFFF8;
            v815 = *(_QWORD *)v814;
            *(_BYTE *)(v813 + 8) = *(_BYTE *)(v814 + 8);
            *(_QWORD *)v813 = v815;
            *(_BYTE *)(v813 + 9) = *(_BYTE *)(v814 + 9);
            v816 = (v813 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v817 = (v814 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v808) = *(_DWORD *)v817;
            *(_BYTE *)(v816 + 4) = *(_BYTE *)(v817 + 4);
            *(_DWORD *)v816 = v808;
            *(_OWORD *)((v813 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v814 + 25) & 0xFFFFFFFFFFFFF8);
            v818 = v1692 + v786;
            v819 = *(_OWORD *)(v1692 + v787 + 112);
            v821 = *(_OWORD *)(v1692 + v787 + 64);
            v820 = *(_OWORD *)(v1692 + v787 + 80);
            *(_OWORD *)(v818 + 96) = *(_OWORD *)(v1692 + v787 + 96);
            *(_OWORD *)(v818 + 112) = v819;
            *(_OWORD *)(v818 + 64) = v821;
            *(_OWORD *)(v818 + 80) = v820;
            v822 = *(_OWORD *)(v1692 + v787 + 176);
            v824 = *(_OWORD *)(v1692 + v787 + 128);
            v823 = *(_OWORD *)(v1692 + v787 + 144);
            *(_OWORD *)(v818 + 160) = *(_OWORD *)(v1692 + v787 + 160);
            *(_OWORD *)(v818 + 176) = v822;
            *(_OWORD *)(v818 + 128) = v824;
            *(_OWORD *)(v818 + 144) = v823;
            v826 = *(_OWORD *)(v1692 + v787 + 208);
            v825 = *(_OWORD *)(v1692 + v787 + 224);
            v827 = *(_OWORD *)(v1692 + v787 + 192);
            *(_QWORD *)(v818 + 240) = *(_QWORD *)(v1692 + v787 + 240);
            *(_OWORD *)(v818 + 208) = v826;
            *(_OWORD *)(v818 + 224) = v825;
            *(_OWORD *)(v818 + 192) = v827;
            v828 = *(_OWORD *)(v1692 + v787);
            v829 = *(_OWORD *)(v1692 + v787 + 16);
            v830 = *(_OWORD *)(v1692 + v787 + 48);
            *(_OWORD *)(v818 + 32) = *(_OWORD *)(v1692 + v787 + 32);
            *(_OWORD *)(v818 + 48) = v830;
            *(_OWORD *)v818 = v828;
            *(_OWORD *)(v818 + 16) = v829;
            v831 = (_OWORD *)((v1692 + v786 + 255) & 0xFFFFFFFFFFFFFFF8);
            v832 = (__int128 *)((v1692 + v787 + 255) & 0xFFFFFFFFFFFFFFF8);
            v833 = *v832;
            *(_OWORD *)((char *)v831 + 9) = *(__int128 *)((char *)v832 + 9);
            *v831 = v833;
            v834 = (v1692 + v786 + 287) & 0xFFFFFFFFFFFFFFF8;
            v835 = (v1692 + v787 + 287) & 0xFFFFFFFFFFFFFFF8;
            v836 = *(_OWORD *)v835;
            *(_BYTE *)(v834 + 16) = *(_BYTE *)(v835 + 16);
            *(_OWORD *)v834 = v836;
            v837 = (_QWORD *)((v1692 + v786 + 311) & 0xFFFFFFFFFFFFF8);
            v838 = (_QWORD *)((v1692 + v787 + 311) & 0xFFFFFFFFFFFFF8);
            *v837 = *v838;
            *(_OWORD *)(((unint64_t)v837 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v838 + 15) & 0xFFFFFFFFFFFFF8);
            v775 = v1678;
            v79 = v1622;
            v189 = a2;
            v203 = v1746;
            v773 = v1706;
            v774 = v1715;
            if (!v1679)
              goto LABEL_1195;
LABEL_1201:
            v839 = ((((v774
                     + ((((((((((v773 + v775) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 19) & 0xFFFFFFFFFFFFFFF8)
                       + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 16;
            v840 = (void *)(((unint64_t)a1 + v1751 + v839) & v1749);
            v841 = v1759;
            v1761 = (const void *)(((unint64_t)v189 + v1751 + v839) & v1749);
            if (v1741 == v1662)
            {
              v842 = AssociatedTypeWitness;
              v843 = (*(uint64_t (**)(void))(v203 + 48))();
              v844 = v1699;
              v845 = v1743;
              if (!v843)
                goto LABEL_1225;
LABEL_1220:
              v854 = v1761;
              memcpy(v840, v1761, v1756);
              v855 = v1745;
              v856 = v1706;
              v857 = v1715;
LABEL_1221:
              v858 = v855;
LABEL_1230:
              v924 = ((((v857
                       + ((((((((((v856 + v858) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                           + 19) & 0xFFFFFFFFFFFFFFF8)
                         + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 16;
              *(_QWORD *)(((unint64_t)v840 + v924) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v854
                                                                                             + v924) & 0xFFFFFFFFFFFFF8);
              v610 = ((v1732
                     + ((v187
                       + ((((v857
                           + ((((((((((v856 + v855) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                               + 19) & 0xFFFFFFFFFFFFFFF8)
                             + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                         + 15) & 0xFFFFFFFFFFFFFFF8)) & v1749)) & 0xFFFFFFFFFFFFFFF8)
                   + 8;
              if (v610 <= v1752)
                v610 = v1752;
              if (v1726 > v610)
                v610 = v1726;
              if (v1756 > v610)
                v610 = v1756;
              if (__na > v610)
                v610 = __na;
              if (v841 > v610)
                v610 = v841;
              if (v1725 > v610)
                v610 = v1754 + 2;
              if (v1728 > v610)
                v610 = v1728;
              if (v1737 > v610)
                v610 = v1737;
              if (v1729 > v610)
                v610 = v1729;
              if (v610 <= v841)
                v610 = v841;
              if (v610 <= v1753)
                v610 = v1753;
              if (v610 <= v1730)
                v610 = ((v1755 + 1) & ~v1755) + v1759;
              if (v610 <= v841)
                v610 = v841;
              if (v610 <= v1727)
                v610 = v1727;
              if (v610 <= v1737)
                v610 = v1737;
              if (v610 <= v841)
                v610 = v841;
              if (v610 <= v1754)
                v610 = v1754;
              if (v610 <= v841)
                v610 = v841;
              if (v610 <= v1731)
                v610 = v1731;
              if (v610 <= v1737)
                v610 = v1737;
              if (v610 <= v841)
                v610 = v841;
              if (v610 <= 0x38)
                v610 = 56;
              if (v610 > 3)
                goto LABEL_1275;
              v925 = ((1 << (8 * v610)) + 5) >> (8 * v610);
              if (v925 <= 0xFFD8)
              {
                if (v925 <= 0xD8)
                {
LABEL_1275:
                  v611 = 5;
                  goto LABEL_1276;
                }
                v613 = 5;
LABEL_1280:
                *(_WORD *)((char *)a1 + v610) = v613;
                return a1;
              }
              v614 = 5;
LABEL_1282:
              *(_DWORD *)((char *)a1 + v610) = v614;
              return a1;
            }
            v846 = (v1687 + (((unint64_t)v189 + v1751 + v839) & v1749)) & v1688;
            v847 = (v1657 + v846) & v1698;
            v844 = v1699;
            if (v1666 == v1662)
            {
              if (v1659 == v1666)
              {
                v848 = (*(uint64_t (**)(unint64_t))(v1680 + 48))((v1657 + v846) & v1698);
LABEL_1218:
                v844 = v1699;
                goto LABEL_1219;
              }
              v851 = (unint64_t *)((v1684 + v847) & 0xFFFFFFFFFFFFFFF8);
              v842 = AssociatedTypeWitness;
              v845 = v1743;
              if (v1645 > 0x7FFFFFFE)
              {
                v859 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v1673 + 48))(((unint64_t)v851 + v1672) & v1670, v1639, v1674);
                v844 = v1699;
                if (v859)
                  goto LABEL_1220;
                goto LABEL_1225;
              }
              v852 = *v851;
              if (v852 >= 0xFFFFFFFF)
                LODWORD(v852) = -1;
              v844 = v1699;
              if ((v852 + 1) >= 2)
                goto LABEL_1220;
            }
            else
            {
              v849 = v847 + v1743;
              if ((v1643 & 0x80000000) == 0)
              {
                v850 = *(_QWORD *)(v849 + 8);
                if (v850 >= 0xFFFFFFFF)
                  LODWORD(v850) = -1;
                v848 = v850 + 1;
LABEL_1219:
                v842 = AssociatedTypeWitness;
                v845 = v1743;
                if (v848)
                  goto LABEL_1220;
LABEL_1225:
                v846 = ((unint64_t)v1761 + v1687) & v1688;
                v847 = (v1657 + v846) & v1698;
                goto LABEL_1226;
              }
              v853 = (v1697 + ((v1744 + v849) & v1696)) & v79;
              if (v205 > 0x7FFFFFFD)
              {
                v848 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v853);
                goto LABEL_1218;
              }
              v1034 = *(_QWORD *)(((v1664 + ((v1693 + v853) & v79)) & 0xFFFFFFFFFFFFF8) + 8);
              if (v1034 >= 0xFFFFFFFF)
                LODWORD(v1034) = -1;
              v842 = AssociatedTypeWitness;
              v845 = v1743;
              if ((v1034 + 1) >= 2)
                goto LABEL_1220;
            }
LABEL_1226:
            v860 = v840;
            v861 = v79;
            v862 = *(void (**)(void *, const void *, uint64_t))(v203 + 32);
            v863 = v844;
            v862(v860, v1761, v842);
            v1758 = v860;
            v862((void *)(((unint64_t)v860 + v1687) & v1688), (const void *)v846, v842);
            v864 = (v1657 + (((unint64_t)v860 + v1687) & v1688)) & v1698;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1680 + 32))(v864, v847, v1681);
            v865 = (_QWORD *)((v1684 + v864) & 0xFFFFFFFFFFFFFFF8);
            v866 = (_QWORD *)((v1684 + v847) & 0xFFFFFFFFFFFFFFF8);
            *v865 = *v866;
            v867 = ((unint64_t)v865 + v1672) & v1670;
            v868 = ((unint64_t)v866 + v1672) & v1670;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1673 + 32))(v867, v868, v1674);
            v869 = v1668 + v867;
            v858 = v1678;
            v870 = (_QWORD *)((v1668 + v868) & 0xFFFFFFFFFFFFF8);
            v869 &= 0xFFFFFFFFFFFFF8uLL;
            *(_QWORD *)v869 = *v870;
            *(_OWORD *)((v869 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v870 + 15) & 0xFFFFFFFFFFFFF8);
            *(_OWORD *)(v864 + v845) = *(_OWORD *)(v847 + v845);
            v871 = (v1744 + v864 + v845) & v1696;
            v872 = (v1744 + v847 + v845) & v1696;
            *(_BYTE *)v871 = *(_BYTE *)v872;
            v873 = v871 | 4;
            v874 = *(_DWORD *)(v872 | 4);
            *(_BYTE *)(v873 + 4) = *(_BYTE *)((v872 | 4) + 4);
            *(_DWORD *)v873 = v874;
            *(_WORD *)(v871 + 10) = *(_WORD *)(v872 + 0xA);
            v875 = *(void (**)(uint64_t, uint64_t, uint64_t))(v863 + 32);
            v875((v1697 + v871) & v861, (v1697 + v872) & v861, v1694);
            v876 = (v1693 + ((v1697 + v871) & v861)) & v861;
            v877 = (v1693 + ((v1697 + v872) & v861)) & v861;
            v875(v876, v877, v1694);
            v878 = (_BYTE *)(v876 + v1678);
            *v878 = *(_BYTE *)(v877 + v1678);
            v878[1] = *(_BYTE *)(v877 + v1678 + 1);
            v878[2] = *(_BYTE *)(v877 + v1678 + 2);
            v878[3] = *(_BYTE *)(v877 + v1678 + 3);
            v878[4] = *(_BYTE *)(v877 + v1678 + 4);
            v879 = (v876 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
            v880 = (v877 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)v879 = *(_OWORD *)v880;
            *(_BYTE *)(v879 + 16) = *(_BYTE *)(v880 + 16);
            *(_BYTE *)(v879 + 17) = *(_BYTE *)(v880 + 17);
            *(_BYTE *)(v879 + 18) = *(_BYTE *)(v880 + 18);
            *(_BYTE *)(v879 + 19) = *(_BYTE *)(v880 + 19);
            v881 = (v879 + 27) & 0xFFFFFFFFFFFFFFF8;
            v882 = (v880 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v881 = *(_QWORD *)v882;
            *(_BYTE *)(v881 + 8) = *(_BYTE *)(v882 + 8);
            *(_BYTE *)(v881 + 9) = *(_BYTE *)(v882 + 9);
            *(_BYTE *)(v881 + 10) = *(_BYTE *)(v882 + 10);
            *(_BYTE *)(v881 + 11) = *(_BYTE *)(v882 + 11);
            *(_BYTE *)(v881 + 12) = *(_BYTE *)(v882 + 12);
            v883 = (_QWORD *)((v879 + 47) & 0xFFFFFFFFFFFFF8);
            v884 = (_QWORD *)((v880 + 47) & 0xFFFFFFFFFFFFF8);
            *v883 = *v884;
            v885 = ((unint64_t)v883 + 15) & 0xFFFFFFFFFFFFFFF8;
            v886 = ((unint64_t)v884 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v885 = *(_QWORD *)v886;
            *(_BYTE *)(v885 + 8) = *(_BYTE *)(v886 + 8);
            *(_BYTE *)(v885 + 9) = *(_BYTE *)(v886 + 9);
            v887 = (void *)((v1690 + v885) & v861);
            v888 = (const void *)((v1690 + v886) & v861);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v863 + 48))(v888, 1, v1694))
            {
              memcpy(v887, v888, v1745);
            }
            else
            {
              v875((uint64_t)v887, (uint64_t)v888, v1694);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v863 + 56))(v887, 0, 1, v1694);
            }
            v841 = v1759;
            v889 = (_QWORD *)(((unint64_t)v887 + v1691) & 0xFFFFFFFFFFFFFFF8);
            v890 = (_QWORD *)(((unint64_t)v888 + v1691) & 0xFFFFFFFFFFFFFFF8);
            *v889 = *v890;
            v891 = ((unint64_t)v889 + 15) & 0xFFFFFFFFFFFFFFF8;
            v892 = ((unint64_t)v890 + 15) & 0xFFFFFFFFFFFFFFF8;
            v893 = *(_QWORD *)v892;
            *(_BYTE *)(v891 + 8) = *(_BYTE *)(v892 + 8);
            *(_QWORD *)v891 = v893;
            v894 = (_QWORD *)(((unint64_t)v889 + 31) & 0xFFFFFFFFFFFFF8);
            v895 = (_QWORD *)(((unint64_t)v890 + 31) & 0xFFFFFFFFFFFFF8);
            *v894 = *v895;
            v896 = (_OWORD *)(((unint64_t)v894 + 15) & 0xFFFFFFFFFFFFFFF8);
            v897 = (_OWORD *)(((unint64_t)v895 + 15) & 0xFFFFFFFFFFFFFFF8);
            *v896 = *v897;
            v898 = ((unint64_t)v896 + 19) & 0xFFFFFFFFFFFFFFF8;
            v899 = ((unint64_t)v897 + 19) & 0xFFFFFFFFFFFFFFF8;
            v900 = *(_QWORD *)v899;
            *(_BYTE *)(v898 + 8) = *(_BYTE *)(v899 + 8);
            *(_QWORD *)v898 = v900;
            *(_BYTE *)(v898 + 9) = *(_BYTE *)(v899 + 9);
            v901 = (v898 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            v902 = (v899 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v893) = *(_DWORD *)v902;
            *(_BYTE *)(v901 + 4) = *(_BYTE *)(v902 + 4);
            *(_DWORD *)v901 = v893;
            *(_OWORD *)((v898 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v899 + 25) & 0xFFFFFFFFFFFFF8);
            v903 = v871 + v1692;
            v904 = *(_OWORD *)(v872 + v1692 + 112);
            v906 = *(_OWORD *)(v872 + v1692 + 64);
            v905 = *(_OWORD *)(v872 + v1692 + 80);
            *(_OWORD *)(v903 + 96) = *(_OWORD *)(v872 + v1692 + 96);
            *(_OWORD *)(v903 + 112) = v904;
            *(_OWORD *)(v903 + 64) = v906;
            *(_OWORD *)(v903 + 80) = v905;
            v907 = *(_OWORD *)(v872 + v1692 + 176);
            v909 = *(_OWORD *)(v872 + v1692 + 128);
            v908 = *(_OWORD *)(v872 + v1692 + 144);
            *(_OWORD *)(v903 + 160) = *(_OWORD *)(v872 + v1692 + 160);
            *(_OWORD *)(v903 + 176) = v907;
            *(_OWORD *)(v903 + 128) = v909;
            *(_OWORD *)(v903 + 144) = v908;
            v911 = *(_OWORD *)(v872 + v1692 + 208);
            v910 = *(_OWORD *)(v872 + v1692 + 224);
            v912 = *(_OWORD *)(v872 + v1692 + 192);
            *(_QWORD *)(v903 + 240) = *(_QWORD *)(v872 + v1692 + 240);
            *(_OWORD *)(v903 + 208) = v911;
            *(_OWORD *)(v903 + 224) = v910;
            *(_OWORD *)(v903 + 192) = v912;
            v913 = *(_OWORD *)(v872 + v1692);
            v914 = *(_OWORD *)(v872 + v1692 + 16);
            v915 = *(_OWORD *)(v872 + v1692 + 48);
            *(_OWORD *)(v903 + 32) = *(_OWORD *)(v872 + v1692 + 32);
            *(_OWORD *)(v903 + 48) = v915;
            *(_OWORD *)v903 = v913;
            *(_OWORD *)(v903 + 16) = v914;
            v916 = (_OWORD *)((v871 + v1692 + 255) & 0xFFFFFFFFFFFFFFF8);
            v917 = (__int128 *)((v872 + v1692 + 255) & 0xFFFFFFFFFFFFFFF8);
            v918 = *v917;
            *(_OWORD *)((char *)v916 + 9) = *(__int128 *)((char *)v917 + 9);
            *v916 = v918;
            v919 = (v871 + v1692 + 287) & 0xFFFFFFFFFFFFFFF8;
            v920 = (v872 + v1692 + 287) & 0xFFFFFFFFFFFFFFF8;
            v921 = *(_OWORD *)v920;
            *(_BYTE *)(v919 + 16) = *(_BYTE *)(v920 + 16);
            *(_OWORD *)v919 = v921;
            v922 = (_QWORD *)((v871 + v1692 + 311) & 0xFFFFFFFFFFFFF8);
            v923 = (_QWORD *)((v872 + v1692 + 311) & 0xFFFFFFFFFFFFF8);
            *v922 = *v923;
            *(_OWORD *)(((unint64_t)v922 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v923 + 15) & 0xFFFFFFFFFFFFF8);
            v855 = v1745;
            v856 = v1706;
            v857 = v1715;
            v840 = v1758;
            v854 = v1761;
            if (v1679)
              goto LABEL_1230;
            goto LABEL_1221;
          }
          v325 = ((unint64_t)a2 + v1687) & v1688;
          v326 = (v325 + v1740 + v1757) & v1698;
          v205 = v1679;
          v203 = v1746;
          if (v1666 == v1662)
          {
            if (v1659 == v1666)
            {
              v204 = (*(uint64_t (**)(unint64_t))(v1680 + 48))((v325 + v1740 + v1757) & v1698);
              goto LABEL_1193;
            }
            v615 = (unint64_t *)((v1684 + v326) & 0xFFFFFFFFFFFFFFF8);
            if (v1645 > 0x7FFFFFFE)
            {
              v204 = (*(uint64_t (**)(unint64_t))(v1673 + 48))(((unint64_t)v615 + v1672) & v1670);
              goto LABEL_1193;
            }
            v616 = *v615;
          }
          else
          {
            v419 = v1743 + v326;
            if ((v1643 & 0x80000000) == 0)
            {
              v420 = *(_QWORD *)(v419 + 8);
              if (v420 >= 0xFFFFFFFF)
                LODWORD(v420) = -1;
              v204 = v420 + 1;
              goto LABEL_1193;
            }
            v748 = (v1697 + ((v1744 + v419) & v1696)) & v79;
            if (v1679 > 0x7FFFFFFD)
            {
              v204 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v748);
              goto LABEL_1193;
            }
            v616 = *(_QWORD *)(((v1664 + ((v1693 + v748) & v79)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v616 >= 0xFFFFFFFF)
            LODWORD(v616) = -1;
          if ((v616 + 1) >= 2)
            goto LABEL_1194;
          goto LABEL_1197;
        case 6u:
          v206 = v1689;
          v1621 = v79;
          v1707 = v1705 + 7;
          v1716 = v1714 + 327;
          if (v1665 == v1661)
          {
            v207 = (*(uint64_t (**)(_OWORD *))(v1747 + 48))(a2);
            goto LABEL_468;
          }
          v327 = ((unint64_t)a2 + v1686) & v1701;
          v328 = (v327 + v1739 + v1738) & v1704;
          if (v1667 == v1661)
          {
            if (v1660 == v1667)
            {
              v207 = (*(uint64_t (**)(unint64_t))(v1682 + 48))((v327 + v1739 + v1738) & v1704);
              goto LABEL_468;
            }
            v617 = (unint64_t *)((v1685 + v328) & 0xFFFFFFFFFFFFFFF8);
            if (v1646 <= 0x7FFFFFFE)
            {
              v618 = *v617;
              goto LABEL_1421;
            }
            v207 = (*(uint64_t (**)(unint64_t))(v1676 + 48))(((unint64_t)v617 + v1675) & v1671);
          }
          else
          {
            v421 = v1689 + v328;
            if ((v1642 & 0x80000000) == 0)
            {
              v422 = *(_QWORD *)(v421 + 8);
              if (v422 >= 0xFFFFFFFF)
                LODWORD(v422) = -1;
              if ((_DWORD)v422 != -1)
                goto LABEL_469;
LABEL_689:
              v327 = ((unint64_t)a2 + v1686) & v1701;
              v328 = (v327 + v1739 + v1738) & v1704;
              goto LABEL_690;
            }
            v749 = (v1697 + ((v1744 + v421) & v1696)) & v79;
            if (v1679 <= 0x7FFFFFFD)
            {
              v618 = *(_QWORD *)(((v1664 + ((v1693 + v749) & v79)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_1421:
              if (v618 >= 0xFFFFFFFF)
                LODWORD(v618) = -1;
              if ((v618 + 1) >= 2)
                goto LABEL_469;
LABEL_690:
              v423 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(v1747 + 32);
              v423(a1, a2, v77);
              v424 = ((unint64_t)a1 + v1686) & v1701;
              v423((_OWORD *)v424, (_OWORD *)v327, v77);
              v425 = (v424 + v1739 + v1738) & v1704;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1682 + 32))(v425, v328, v1683);
              v426 = (_QWORD *)((v1685 + v425) & 0xFFFFFFFFFFFFFFF8);
              v427 = (_QWORD *)((v1685 + v328) & 0xFFFFFFFFFFFFFFF8);
              *v426 = *v427;
              v428 = ((unint64_t)v426 + v1675) & v1671;
              v429 = ((unint64_t)v427 + v1675) & v1671;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1676 + 32))(v428, v429, v1677);
              v430 = (_QWORD *)((v1669 + v429) & 0xFFFFFFFFFFFFF8);
              v431 = (_QWORD *)((v1669 + v428) & 0xFFFFFFFFFFFFF8);
              *v431 = *v430;
              *(_OWORD *)(((unint64_t)v431 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v430 + 15) & 0xFFFFFFFFFFFFF8);
              *(_OWORD *)(v1689 + v425) = *(_OWORD *)(v1689 + v328);
              v432 = (v1744 + v1689 + v425) & v1696;
              v433 = (v1744 + v1689 + v328) & v1696;
              *(_BYTE *)v432 = *(_BYTE *)v433;
              v434 = v432 | 4;
              v435 = *(_DWORD *)(v433 | 4);
              *(_BYTE *)(v434 + 4) = *(_BYTE *)((v433 | 4) + 4);
              *(_DWORD *)v434 = v435;
              *(_WORD *)(v432 + 10) = *(_WORD *)(v433 + 0xA);
              v436 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1699 + 32);
              v436((v1697 + v432) & v1621, (v1697 + v433) & v1621, v1694);
              v437 = (v1693 + ((v1697 + v432) & v1621)) & v1621;
              v438 = (v1693 + ((v1697 + v433) & v1621)) & v1621;
              v436(v437, v438, v1694);
              v439 = (_BYTE *)(v437 + v1678);
              *v439 = *(_BYTE *)(v438 + v1678);
              v439[1] = *(_BYTE *)(v438 + v1678 + 1);
              v439[2] = *(_BYTE *)(v438 + v1678 + 2);
              v439[3] = *(_BYTE *)(v438 + v1678 + 3);
              v439[4] = *(_BYTE *)(v438 + v1678 + 4);
              v440 = (v437 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
              v441 = (v438 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_OWORD *)v440 = *(_OWORD *)v441;
              *(_BYTE *)(v440 + 16) = *(_BYTE *)(v441 + 16);
              *(_BYTE *)(v440 + 17) = *(_BYTE *)(v441 + 17);
              *(_BYTE *)(v440 + 18) = *(_BYTE *)(v441 + 18);
              *(_BYTE *)(v440 + 19) = *(_BYTE *)(v441 + 19);
              v442 = (v440 + 27) & 0xFFFFFFFFFFFFFFF8;
              v443 = (v441 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v442 = *(_QWORD *)v443;
              *(_BYTE *)(v442 + 8) = *(_BYTE *)(v443 + 8);
              *(_BYTE *)(v442 + 9) = *(_BYTE *)(v443 + 9);
              *(_BYTE *)(v442 + 10) = *(_BYTE *)(v443 + 10);
              *(_BYTE *)(v442 + 11) = *(_BYTE *)(v443 + 11);
              *(_BYTE *)(v442 + 12) = *(_BYTE *)(v443 + 12);
              v444 = (_QWORD *)((v440 + 47) & 0xFFFFFFFFFFFFF8);
              v445 = (_QWORD *)((v441 + 47) & 0xFFFFFFFFFFFFF8);
              *v444 = *v445;
              v446 = ((unint64_t)v444 + 15) & 0xFFFFFFFFFFFFFFF8;
              v447 = ((unint64_t)v445 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v446 = *(_QWORD *)v447;
              *(_BYTE *)(v446 + 8) = *(_BYTE *)(v447 + 8);
              *(_BYTE *)(v446 + 9) = *(_BYTE *)(v447 + 9);
              v448 = (void *)((v1690 + v446) & v1621);
              v449 = (const void *)((v1690 + v447) & v1621);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1699 + 48))(v449, 1, v1694))
              {
                v186 = v1745;
                memcpy(v448, v449, v1745);
              }
              else
              {
                v436((unint64_t)v448, (unint64_t)v449, v1694);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1699 + 56))(v448, 0, 1, v1694);
                v186 = v1745;
              }
              v208 = v1679;
              v501 = (_QWORD *)(((unint64_t)v449 + v1691) & 0xFFFFFFFFFFFFFFF8);
              v502 = (_QWORD *)(((unint64_t)v448 + v1691) & 0xFFFFFFFFFFFFFFF8);
              *v502 = *v501;
              v503 = ((unint64_t)v502 + 15) & 0xFFFFFFFFFFFFFFF8;
              v504 = ((unint64_t)v501 + 15) & 0xFFFFFFFFFFFFFFF8;
              v505 = *(_QWORD *)v504;
              *(_BYTE *)(v503 + 8) = *(_BYTE *)(v504 + 8);
              *(_QWORD *)v503 = v505;
              v506 = (_QWORD *)(((unint64_t)v502 + 31) & 0xFFFFFFFFFFFFF8);
              v507 = (_QWORD *)(((unint64_t)v501 + 31) & 0xFFFFFFFFFFFFF8);
              *v506 = *v507;
              v508 = (_OWORD *)(((unint64_t)v506 + 15) & 0xFFFFFFFFFFFFFFF8);
              v509 = (_OWORD *)(((unint64_t)v507 + 15) & 0xFFFFFFFFFFFFFFF8);
              *v508 = *v509;
              v510 = ((unint64_t)v508 + 19) & 0xFFFFFFFFFFFFFFF8;
              v511 = ((unint64_t)v509 + 19) & 0xFFFFFFFFFFFFFFF8;
              v512 = *(_QWORD *)v511;
              *(_BYTE *)(v510 + 8) = *(_BYTE *)(v511 + 8);
              *(_QWORD *)v510 = v512;
              *(_BYTE *)(v510 + 9) = *(_BYTE *)(v511 + 9);
              v513 = (v510 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              v514 = (v511 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              LODWORD(v505) = *(_DWORD *)v514;
              *(_BYTE *)(v513 + 4) = *(_BYTE *)(v514 + 4);
              *(_DWORD *)v513 = v505;
              *(_OWORD *)((v510 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v511 + 25) & 0xFFFFFFFFFFFFF8);
              v515 = v1692 + v432;
              v516 = *(_OWORD *)(v1692 + v433 + 112);
              v518 = *(_OWORD *)(v1692 + v433 + 64);
              v517 = *(_OWORD *)(v1692 + v433 + 80);
              *(_OWORD *)(v515 + 96) = *(_OWORD *)(v1692 + v433 + 96);
              *(_OWORD *)(v515 + 112) = v516;
              *(_OWORD *)(v515 + 64) = v518;
              *(_OWORD *)(v515 + 80) = v517;
              v519 = *(_OWORD *)(v1692 + v433 + 176);
              v521 = *(_OWORD *)(v1692 + v433 + 128);
              v520 = *(_OWORD *)(v1692 + v433 + 144);
              *(_OWORD *)(v515 + 160) = *(_OWORD *)(v1692 + v433 + 160);
              *(_OWORD *)(v515 + 176) = v519;
              *(_OWORD *)(v515 + 128) = v521;
              *(_OWORD *)(v515 + 144) = v520;
              v523 = *(_OWORD *)(v1692 + v433 + 208);
              v522 = *(_OWORD *)(v1692 + v433 + 224);
              v524 = *(_OWORD *)(v1692 + v433 + 192);
              *(_QWORD *)(v515 + 240) = *(_QWORD *)(v1692 + v433 + 240);
              *(_OWORD *)(v515 + 208) = v523;
              *(_OWORD *)(v515 + 224) = v522;
              *(_OWORD *)(v515 + 192) = v524;
              v525 = *(_OWORD *)(v1692 + v433);
              v526 = *(_OWORD *)(v1692 + v433 + 16);
              v527 = *(_OWORD *)(v1692 + v433 + 48);
              *(_OWORD *)(v515 + 32) = *(_OWORD *)(v1692 + v433 + 32);
              *(_OWORD *)(v515 + 48) = v527;
              *(_OWORD *)v515 = v525;
              *(_OWORD *)(v515 + 16) = v526;
              v528 = (_OWORD *)((v1692 + v432 + 255) & 0xFFFFFFFFFFFFFFF8);
              v529 = (__int128 *)((v1692 + v433 + 255) & 0xFFFFFFFFFFFFFFF8);
              v530 = *v529;
              *(_OWORD *)((char *)v528 + 9) = *(__int128 *)((char *)v529 + 9);
              *v528 = v530;
              v531 = (v1692 + v432 + 287) & 0xFFFFFFFFFFFFFFF8;
              v532 = (v1692 + v433 + 287) & 0xFFFFFFFFFFFFFFF8;
              v533 = *(_OWORD *)v532;
              *(_BYTE *)(v531 + 16) = *(_BYTE *)(v532 + 16);
              *(_OWORD *)v531 = v533;
              v534 = (_QWORD *)((v1692 + v432 + 311) & 0xFFFFFFFFFFFFF8);
              v535 = (_QWORD *)((v1692 + v433 + 311) & 0xFFFFFFFFFFFFF8);
              *v534 = *v535;
              *(_OWORD *)(((unint64_t)v534 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v535 + 15) & 0xFFFFFFFFFFFFF8);
              v211 = v1678;
              v209 = v1747;
              v189 = a2;
              v206 = v1689;
              v210 = v1707;
              if (!v1679)
                goto LABEL_470;
LABEL_729:
              v536 = ((((v1644
                       + 327
                       + ((((((((((v210 + v211) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                           + 19) & 0xFFFFFFFFFFFFFFF8)
                         + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 16;
              v537 = (void *)(((unint64_t)a1 + v1722 + v536) & v1655);
              v538 = (const void *)(((unint64_t)v189 + v1722 + v536) & v1655);
              if (v1665 == v1661)
              {
                v539 = (*(uint64_t (**)(const void *, _QWORD, uint64_t))(v209 + 48))(v538, v1665, v1735);
                goto LABEL_731;
              }
              v544 = ((unint64_t)v538 + v1686) & v1701;
              v545 = (v1656 + v544) & v1704;
              if (v1667 == v1661)
              {
                if (v1660 == v1667)
                {
                  v539 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v1682 + 48))((v1656 + v544) & v1704, v1660, v1683);
                  goto LABEL_731;
                }
                v619 = (unint64_t *)((v1685 + v545) & 0xFFFFFFFFFFFFFFF8);
                if (v1646 <= 0x7FFFFFFE)
                {
                  v620 = *v619;
                  goto LABEL_1426;
                }
                v539 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v1676 + 48))(((unint64_t)v619 + v1675) & v1671, v1640, v1677);
              }
              else
              {
                v546 = v545 + v206;
                if ((v1642 & 0x80000000) == 0)
                {
                  v547 = *(_QWORD *)(v546 + 8);
                  if (v547 >= 0xFFFFFFFF)
                    LODWORD(v547) = -1;
                  if ((_DWORD)v547 != -1)
                    goto LABEL_732;
LABEL_741:
                  v544 = ((unint64_t)v538 + v1686) & v1701;
                  v545 = (v1656 + v544) & v1704;
                  goto LABEL_742;
                }
                v750 = (v1697 + ((v1744 + v546) & v1696)) & v1621;
                if (v208 <= 0x7FFFFFFD)
                {
                  v620 = *(_QWORD *)(((v1664 + ((v1693 + v750) & v1621)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_1426:
                  if (v620 >= 0xFFFFFFFF)
                    LODWORD(v620) = -1;
                  if ((v620 + 1) >= 2)
                    goto LABEL_732;
LABEL_742:
                  v548 = *(void (**)(void *, const void *, uint64_t))(v209 + 32);
                  v548(v537, v538, v1735);
                  v548((void *)(((unint64_t)v537 + v1686) & v1701), (const void *)v544, v1735);
                  v549 = (v1656 + (((unint64_t)v537 + v1686) & v1701)) & v1704;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1682 + 32))(v549, v545, v1683);
                  v550 = (_QWORD *)((v1685 + v549) & 0xFFFFFFFFFFFFFFF8);
                  v551 = (_QWORD *)((v1685 + v545) & 0xFFFFFFFFFFFFFFF8);
                  *v550 = *v551;
                  v552 = ((unint64_t)v550 + v1675) & v1671;
                  v553 = ((unint64_t)v551 + v1675) & v1671;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1676 + 32))(v552, v553, v1677);
                  v554 = v1669 + v552;
                  v543 = v1678;
                  v555 = (_QWORD *)((v1669 + v553) & 0xFFFFFFFFFFFFF8);
                  v554 &= 0xFFFFFFFFFFFFF8uLL;
                  *(_QWORD *)v554 = *v555;
                  *(_OWORD *)((v554 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v555 + 15) & 0xFFFFFFFFFFFFF8);
                  *(_OWORD *)(v549 + v206) = *(_OWORD *)(v545 + v206);
                  v556 = (v1744 + v549 + v206) & v1696;
                  v557 = (v1744 + v545 + v206) & v1696;
                  *(_BYTE *)v556 = *(_BYTE *)v557;
                  v558 = v556 | 4;
                  v559 = *(_DWORD *)(v557 | 4);
                  *(_BYTE *)(v558 + 4) = *(_BYTE *)((v557 | 4) + 4);
                  *(_DWORD *)v558 = v559;
                  *(_WORD *)(v556 + 10) = *(_WORD *)(v557 + 10);
                  v560 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1699 + 32);
                  v560((v1697 + v556) & v1621, (v1697 + v557) & v1621, v1694);
                  v561 = (v1693 + ((v1697 + v556) & v1621)) & v1621;
                  v562 = (v1693 + ((v1697 + v557) & v1621)) & v1621;
                  v560(v561, v562, v1694);
                  v563 = (_BYTE *)(v561 + v1678);
                  *v563 = *(_BYTE *)(v562 + v1678);
                  v563[1] = *(_BYTE *)(v562 + v1678 + 1);
                  v563[2] = *(_BYTE *)(v562 + v1678 + 2);
                  v563[3] = *(_BYTE *)(v562 + v1678 + 3);
                  v563[4] = *(_BYTE *)(v562 + v1678 + 4);
                  v564 = (v561 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
                  v565 = (v562 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
                  *(_OWORD *)v564 = *(_OWORD *)v565;
                  *(_BYTE *)(v564 + 16) = *(_BYTE *)(v565 + 16);
                  *(_BYTE *)(v564 + 17) = *(_BYTE *)(v565 + 17);
                  *(_BYTE *)(v564 + 18) = *(_BYTE *)(v565 + 18);
                  *(_BYTE *)(v564 + 19) = *(_BYTE *)(v565 + 19);
                  v566 = (v564 + 27) & 0xFFFFFFFFFFFFFFF8;
                  v567 = (v565 + 27) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v566 = *(_QWORD *)v567;
                  *(_BYTE *)(v566 + 8) = *(_BYTE *)(v567 + 8);
                  *(_BYTE *)(v566 + 9) = *(_BYTE *)(v567 + 9);
                  *(_BYTE *)(v566 + 10) = *(_BYTE *)(v567 + 10);
                  *(_BYTE *)(v566 + 11) = *(_BYTE *)(v567 + 11);
                  *(_BYTE *)(v566 + 12) = *(_BYTE *)(v567 + 12);
                  v568 = (_QWORD *)((v564 + 47) & 0xFFFFFFFFFFFFF8);
                  v569 = (_QWORD *)((v565 + 47) & 0xFFFFFFFFFFFFF8);
                  *v568 = *v569;
                  v570 = ((unint64_t)v568 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v571 = ((unint64_t)v569 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v570 = *(_QWORD *)v571;
                  *(_BYTE *)(v570 + 8) = *(_BYTE *)(v571 + 8);
                  *(_BYTE *)(v570 + 9) = *(_BYTE *)(v571 + 9);
                  v572 = (void *)((v1690 + v570) & v1621);
                  v573 = (const void *)((v1690 + v571) & v1621);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1699 + 48))(v573, 1, v1694))
                  {
                    memcpy(v572, v573, v1745);
                  }
                  else
                  {
                    v560((uint64_t)v572, (uint64_t)v573, v1694);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1699 + 56))(v572, 0, 1, v1694);
                  }
                  v574 = (_QWORD *)(((unint64_t)v572 + v1691) & 0xFFFFFFFFFFFFFFF8);
                  v575 = (_QWORD *)(((unint64_t)v573 + v1691) & 0xFFFFFFFFFFFFFFF8);
                  *v574 = *v575;
                  v576 = ((unint64_t)v574 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v577 = ((unint64_t)v575 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v578 = *(_QWORD *)v577;
                  *(_BYTE *)(v576 + 8) = *(_BYTE *)(v577 + 8);
                  *(_QWORD *)v576 = v578;
                  v579 = (_QWORD *)(((unint64_t)v574 + 31) & 0xFFFFFFFFFFFFF8);
                  v580 = (_QWORD *)(((unint64_t)v575 + 31) & 0xFFFFFFFFFFFFF8);
                  *v579 = *v580;
                  v581 = (_OWORD *)(((unint64_t)v579 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v582 = (_OWORD *)(((unint64_t)v580 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v581 = *v582;
                  v583 = ((unint64_t)v581 + 19) & 0xFFFFFFFFFFFFFFF8;
                  v584 = ((unint64_t)v582 + 19) & 0xFFFFFFFFFFFFFFF8;
                  v585 = *(_QWORD *)v584;
                  *(_BYTE *)(v583 + 8) = *(_BYTE *)(v584 + 8);
                  *(_QWORD *)v583 = v585;
                  *(_BYTE *)(v583 + 9) = *(_BYTE *)(v584 + 9);
                  v586 = (v583 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  v587 = (v584 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  LODWORD(v578) = *(_DWORD *)v587;
                  *(_BYTE *)(v586 + 4) = *(_BYTE *)(v587 + 4);
                  *(_DWORD *)v586 = v578;
                  *(_OWORD *)((v583 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v584 + 25) & 0xFFFFFFFFFFFFF8);
                  v588 = v556 + v1692;
                  v589 = *(_OWORD *)(v557 + v1692 + 112);
                  v591 = *(_OWORD *)(v557 + v1692 + 64);
                  v590 = *(_OWORD *)(v557 + v1692 + 80);
                  *(_OWORD *)(v588 + 96) = *(_OWORD *)(v557 + v1692 + 96);
                  *(_OWORD *)(v588 + 112) = v589;
                  *(_OWORD *)(v588 + 64) = v591;
                  *(_OWORD *)(v588 + 80) = v590;
                  v592 = *(_OWORD *)(v557 + v1692 + 176);
                  v594 = *(_OWORD *)(v557 + v1692 + 128);
                  v593 = *(_OWORD *)(v557 + v1692 + 144);
                  *(_OWORD *)(v588 + 160) = *(_OWORD *)(v557 + v1692 + 160);
                  *(_OWORD *)(v588 + 176) = v592;
                  *(_OWORD *)(v588 + 128) = v594;
                  *(_OWORD *)(v588 + 144) = v593;
                  v596 = *(_OWORD *)(v557 + v1692 + 208);
                  v595 = *(_OWORD *)(v557 + v1692 + 224);
                  v597 = *(_OWORD *)(v557 + v1692 + 192);
                  *(_QWORD *)(v588 + 240) = *(_QWORD *)(v557 + v1692 + 240);
                  *(_OWORD *)(v588 + 208) = v596;
                  *(_OWORD *)(v588 + 224) = v595;
                  *(_OWORD *)(v588 + 192) = v597;
                  v598 = *(_OWORD *)(v557 + v1692);
                  v599 = *(_OWORD *)(v557 + v1692 + 16);
                  v600 = *(_OWORD *)(v557 + v1692 + 48);
                  *(_OWORD *)(v588 + 32) = *(_OWORD *)(v557 + v1692 + 32);
                  *(_OWORD *)(v588 + 48) = v600;
                  *(_OWORD *)v588 = v598;
                  *(_OWORD *)(v588 + 16) = v599;
                  v601 = (_OWORD *)((v556 + v1692 + 255) & 0xFFFFFFFFFFFFFFF8);
                  v602 = (__int128 *)((v557 + v1692 + 255) & 0xFFFFFFFFFFFFFFF8);
                  v603 = *v602;
                  *(_OWORD *)((char *)v601 + 9) = *(__int128 *)((char *)v602 + 9);
                  *v601 = v603;
                  v604 = (v556 + v1692 + 287) & 0xFFFFFFFFFFFFFFF8;
                  v605 = (v557 + v1692 + 287) & 0xFFFFFFFFFFFFFFF8;
                  v606 = *(_OWORD *)v605;
                  *(_BYTE *)(v604 + 16) = *(_BYTE *)(v605 + 16);
                  *(_OWORD *)v604 = v606;
                  v607 = (_QWORD *)((v556 + v1692 + 311) & 0xFFFFFFFFFFFFF8);
                  v608 = (_QWORD *)((v557 + v1692 + 311) & 0xFFFFFFFFFFFFF8);
                  *v607 = *v608;
                  *(_OWORD *)(((unint64_t)v607 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v608
                                                                                               + 15) & 0xFFFFFFFFFFFFF8);
                  v540 = v1745;
                  v541 = v1707;
                  v542 = v1716;
                  if (v1679)
                  {
LABEL_746:
                    v609 = ((((v1644
                             + 327
                             + ((((((((((v541 + v543) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                 + 19) & 0xFFFFFFFFFFFFFFF8)
                               + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                           + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 16;
                    *(_QWORD *)(((unint64_t)v537 + v609) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v538 + v609) & 0xFFFFFFFFFFFFF8);
                    v610 = ((v1732
                           + ((v187
                             + ((((v542
                                 + ((((((((((v541 + v540) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                     + 19) & 0xFFFFFFFFFFFFFFF8)
                                   + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                               + 15) & 0xFFFFFFFFFFFFFFF8)) & v1749)) & 0xFFFFFFFFFFFFFFF8)
                         + 8;
                    if (v610 <= v1752)
                      v610 = v1752;
                    if (v1726 > v610)
                      v610 = v1726;
                    if (v1756 > v610)
                      v610 = v1756;
                    if (__na > v610)
                      v610 = __na;
                    if (v1759 > v610)
                      v610 = v1759;
                    if (v1725 > v610)
                      v610 = v1754 + 2;
                    if (v1728 > v610)
                      v610 = ((v1760 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
                    if (v1737 > v610)
                      v610 = v1760 + 2;
                    if (v1729 > v610)
                      v610 = (v1760 & 0xFFFFFFFFFFFFFFF8) + 16;
                    if (v610 <= v1759)
                      v610 = v1759;
                    if (v610 <= v1753)
                      v610 = v1753;
                    if (v610 <= v1730)
                      v610 = ((v1755 + 1) & ~v1755) + v1759;
                    if (v610 <= v1759)
                      v610 = v1759;
                    if (v610 <= v1727)
                      v610 = v1727;
                    if (v610 <= v1737)
                      v610 = v1760 + 2;
                    if (v610 <= v1759)
                      v610 = v1759;
                    if (v610 <= v1754)
                      v610 = v1754;
                    if (v610 <= v1759)
                      v610 = v1759;
                    if (v610 <= v1731)
                      v610 = v1731;
                    if (v610 <= v1737)
                      v610 = v1760 + 2;
                    if (v610 <= v1759)
                      v610 = v1759;
                    if (v610 <= 0x38)
                      v610 = 56;
                    if (v610 <= 3)
                    {
                      v612 = ((1 << (8 * v610)) + 5) >> (8 * v610);
                      if (v612 > 0xFFD8)
                      {
                        v614 = 6;
                        goto LABEL_1282;
                      }
                      if (v612 > 0xD8)
                      {
                        v613 = 6;
                        goto LABEL_1280;
                      }
                    }
                    v611 = 6;
LABEL_1276:
                    *((_BYTE *)a1 + v610) = v611;
                    return a1;
                  }
LABEL_733:
                  v543 = v540;
                  goto LABEL_746;
                }
                v539 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1699 + 48))(v750, v208, v1694);
              }
LABEL_731:
              if (v539)
              {
LABEL_732:
                memcpy(v537, v538, __na);
                v540 = v1745;
                v541 = v1707;
                v542 = v1716;
                goto LABEL_733;
              }
              goto LABEL_741;
            }
            v207 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v749);
          }
LABEL_468:
          if (v207)
          {
LABEL_469:
            memcpy(a1, a2, __na);
            v208 = v1679;
            v209 = v1747;
            v210 = v1707;
LABEL_470:
            v211 = v186;
            goto LABEL_729;
          }
          goto LABEL_689;
        case 7u:
          v1613 = v73;
          v212 = v79;
          v213 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(v1746 + 32);
          v213(a1, a2, v81);
          v214 = ((unint64_t)a1 + v1687) & v1688;
          v215 = ((unint64_t)a2 + v1687) & v1688;
          v213((_OWORD *)v214, (_OWORD *)v215, v81);
          v216 = (v214 + v1740 + v1757) & v1698;
          v217 = (v215 + v1740 + v1757) & v1698;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1680 + 32))(v216, v217, v1681);
          v218 = (_QWORD *)((v1684 + v216) & 0xFFFFFFFFFFFFFFF8);
          v219 = (_QWORD *)((v1684 + v217) & 0xFFFFFFFFFFFFFFF8);
          *v218 = *v219;
          v220 = ((unint64_t)v218 + v1672) & v1670;
          v221 = ((unint64_t)v219 + v1672) & v1670;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1673 + 32))(v220, v221, v1674);
          v222 = (_QWORD *)((v1668 + v221) & 0xFFFFFFFFFFFFF8);
          v223 = (_QWORD *)((v1668 + v220) & 0xFFFFFFFFFFFFF8);
          *v223 = *v222;
          *(_OWORD *)(((unint64_t)v223 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v222 + 15) & 0xFFFFFFFFFFFFF8);
          *(_OWORD *)(v1743 + v216) = *(_OWORD *)(v1743 + v217);
          v224 = (v1744 + v1743 + v216) & v1696;
          v225 = (v1744 + v1743 + v217) & v1696;
          *(_BYTE *)v224 = *(_BYTE *)v225;
          v226 = v224 | 4;
          v227 = *(_DWORD *)(v225 | 4);
          *(_BYTE *)(v226 + 4) = *(_BYTE *)((v225 | 4) + 4);
          *(_DWORD *)v226 = v227;
          *(_WORD *)(v224 + 10) = *(_WORD *)(v225 + 0xA);
          v228 = *(void (**)(size_t, size_t, uint64_t))(v1699 + 32);
          v228((v1697 + v224) & v212, (v1697 + v225) & v212, v1694);
          v229 = (v1693 + ((v1697 + v224) & v212)) & v212;
          v230 = (v1693 + ((v1697 + v225) & v212)) & v212;
          v228(v229, v230, v1694);
          v231 = (_BYTE *)(v229 + v1678);
          *v231 = *(_BYTE *)(v230 + v1678);
          v231[1] = *(_BYTE *)(v230 + v1678 + 1);
          v231[2] = *(_BYTE *)(v230 + v1678 + 2);
          v231[3] = *(_BYTE *)(v230 + v1678 + 3);
          v231[4] = *(_BYTE *)(v230 + v1678 + 4);
          v232 = (v229 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
          v233 = (v230 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_OWORD *)v232 = *(_OWORD *)v233;
          *(_BYTE *)(v232 + 16) = *(_BYTE *)(v233 + 16);
          *(_BYTE *)(v232 + 17) = *(_BYTE *)(v233 + 17);
          *(_BYTE *)(v232 + 18) = *(_BYTE *)(v233 + 18);
          *(_BYTE *)(v232 + 19) = *(_BYTE *)(v233 + 19);
          v234 = (v232 + 27) & 0xFFFFFFFFFFFFFFF8;
          v235 = (v233 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v234 = *(_QWORD *)v235;
          *(_BYTE *)(v234 + 8) = *(_BYTE *)(v235 + 8);
          *(_BYTE *)(v234 + 9) = *(_BYTE *)(v235 + 9);
          *(_BYTE *)(v234 + 10) = *(_BYTE *)(v235 + 10);
          *(_BYTE *)(v234 + 11) = *(_BYTE *)(v235 + 11);
          *(_BYTE *)(v234 + 12) = *(_BYTE *)(v235 + 12);
          v236 = (_QWORD *)((v232 + 47) & 0xFFFFFFFFFFFFF8);
          v237 = (_QWORD *)((v233 + 47) & 0xFFFFFFFFFFFFF8);
          *v236 = *v237;
          v238 = ((unint64_t)v236 + 15) & 0xFFFFFFFFFFFFFFF8;
          v239 = ((unint64_t)v237 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v238 = *(_QWORD *)v239;
          *(_BYTE *)(v238 + 8) = *(_BYTE *)(v239 + 8);
          *(_BYTE *)(v238 + 9) = *(_BYTE *)(v239 + 9);
          v240 = (void *)((v1690 + v238) & v212);
          v241 = (const void *)((v1690 + v239) & v212);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1699 + 48))(v241, 1, v1694))
          {
            memcpy(v240, v241, v1745);
          }
          else
          {
            v228((size_t)v240, (size_t)v241, v1694);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1699 + 56))(v240, 0, 1, v1694);
          }
          v345 = (_QWORD *)(((unint64_t)v241 + v1691) & 0xFFFFFFFFFFFFFFF8);
          v346 = (_QWORD *)(((unint64_t)v240 + v1691) & 0xFFFFFFFFFFFFFFF8);
          *v346 = *v345;
          v347 = ((unint64_t)v346 + 15) & 0xFFFFFFFFFFFFFFF8;
          v348 = ((unint64_t)v345 + 15) & 0xFFFFFFFFFFFFFFF8;
          v349 = *(_QWORD *)v348;
          *(_BYTE *)(v347 + 8) = *(_BYTE *)(v348 + 8);
          *(_QWORD *)v347 = v349;
          v350 = (_QWORD *)(((unint64_t)v346 + 31) & 0xFFFFFFFFFFFFF8);
          v351 = (_QWORD *)(((unint64_t)v345 + 31) & 0xFFFFFFFFFFFFF8);
          *v350 = *v351;
          v352 = (_OWORD *)(((unint64_t)v350 + 15) & 0xFFFFFFFFFFFFFFF8);
          v353 = (_OWORD *)(((unint64_t)v351 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v352 = *v353;
          v354 = ((unint64_t)v352 + 19) & 0xFFFFFFFFFFFFFFF8;
          v355 = ((unint64_t)v353 + 19) & 0xFFFFFFFFFFFFFFF8;
          v356 = *(_QWORD *)v355;
          *(_BYTE *)(v354 + 8) = *(_BYTE *)(v355 + 8);
          *(_QWORD *)v354 = v356;
          *(_BYTE *)(v354 + 9) = *(_BYTE *)(v355 + 9);
          v357 = (v354 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v358 = (v355 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          LODWORD(v349) = *(_DWORD *)v358;
          *(_BYTE *)(v357 + 4) = *(_BYTE *)(v358 + 4);
          *(_DWORD *)v357 = v349;
          *(_OWORD *)((v354 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v355 + 25) & 0xFFFFFFFFFFFFF8);
          v359 = v1692 + v224;
          v360 = *(_OWORD *)(v1692 + v225 + 112);
          v362 = *(_OWORD *)(v1692 + v225 + 64);
          v361 = *(_OWORD *)(v1692 + v225 + 80);
          *(_OWORD *)(v359 + 96) = *(_OWORD *)(v1692 + v225 + 96);
          *(_OWORD *)(v359 + 112) = v360;
          *(_OWORD *)(v359 + 64) = v362;
          *(_OWORD *)(v359 + 80) = v361;
          v363 = *(_OWORD *)(v1692 + v225 + 176);
          v365 = *(_OWORD *)(v1692 + v225 + 128);
          v364 = *(_OWORD *)(v1692 + v225 + 144);
          *(_OWORD *)(v359 + 160) = *(_OWORD *)(v1692 + v225 + 160);
          *(_OWORD *)(v359 + 176) = v363;
          *(_OWORD *)(v359 + 128) = v365;
          *(_OWORD *)(v359 + 144) = v364;
          v367 = *(_OWORD *)(v1692 + v225 + 208);
          v366 = *(_OWORD *)(v1692 + v225 + 224);
          v368 = *(_OWORD *)(v1692 + v225 + 192);
          *(_QWORD *)(v359 + 240) = *(_QWORD *)(v1692 + v225 + 240);
          *(_OWORD *)(v359 + 208) = v367;
          *(_OWORD *)(v359 + 224) = v366;
          *(_OWORD *)(v359 + 192) = v368;
          v369 = *(_OWORD *)(v1692 + v225);
          v370 = *(_OWORD *)(v1692 + v225 + 16);
          v371 = *(_OWORD *)(v1692 + v225 + 48);
          *(_OWORD *)(v359 + 32) = *(_OWORD *)(v1692 + v225 + 32);
          *(_OWORD *)(v359 + 48) = v371;
          *(_OWORD *)v359 = v369;
          *(_OWORD *)(v359 + 16) = v370;
          v372 = (_OWORD *)((v1692 + v224 + 255) & 0xFFFFFFFFFFFFFFF8);
          v373 = (__int128 *)((v1692 + v225 + 255) & 0xFFFFFFFFFFFFFFF8);
          v374 = *v373;
          *(_OWORD *)((char *)v372 + 9) = *(__int128 *)((char *)v373 + 9);
          *v372 = v374;
          v375 = (v1692 + v224 + 287) & 0xFFFFFFFFFFFFFFF8;
          v376 = (v1692 + v225 + 287) & 0xFFFFFFFFFFFFFFF8;
          v377 = *(_OWORD *)v376;
          *(_BYTE *)(v375 + 16) = *(_BYTE *)(v376 + 16);
          *(_OWORD *)v375 = v377;
          v378 = (_QWORD *)((v1692 + v224 + 311) & 0xFFFFFFFFFFFFF8);
          v379 = (_QWORD *)((v1692 + v225 + 311) & 0xFFFFFFFFFFFFF8);
          *v378 = *v379;
          *(_OWORD *)(((unint64_t)v378 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v379 + 15) & 0xFFFFFFFFFFFFF8);
          if (v1613 > 3)
            goto LABEL_668;
          v381 = ((1 << (8 * v1613)) + 5) >> (8 * v1613);
          if (v381 > 0xFFD8)
          {
            v476 = 7;
            goto LABEL_715;
          }
          if (v381 <= 0xD8)
          {
LABEL_668:
            v380 = 7;
            goto LABEL_675;
          }
          v382 = 7;
          goto LABEL_679;
        case 8u:
          v1614 = v73;
          v242 = v79;
          v243 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(v1747 + 32);
          v243(a1, a2, v77);
          v244 = ((unint64_t)a1 + v1686) & v1701;
          v245 = ((unint64_t)a2 + v1686) & v1701;
          v243((_OWORD *)v244, (_OWORD *)v245, v77);
          v246 = (v244 + v1739 + v1738) & v1704;
          v247 = (v245 + v1739 + v1738) & v1704;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1682 + 32))(v246, v247, v1683);
          v248 = (_QWORD *)((v1685 + v246) & 0xFFFFFFFFFFFFFFF8);
          v249 = (_QWORD *)((v1685 + v247) & 0xFFFFFFFFFFFFFFF8);
          *v248 = *v249;
          v250 = ((unint64_t)v248 + v1675) & v1671;
          v251 = ((unint64_t)v249 + v1675) & v1671;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1676 + 32))(v250, v251, v1677);
          v252 = (_QWORD *)((v1669 + v251) & 0xFFFFFFFFFFFFF8);
          v253 = (_QWORD *)((v1669 + v250) & 0xFFFFFFFFFFFFF8);
          *v253 = *v252;
          *(_OWORD *)(((unint64_t)v253 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v252 + 15) & 0xFFFFFFFFFFFFF8);
          *(_OWORD *)(v1689 + v246) = *(_OWORD *)(v1689 + v247);
          v254 = (v1744 + v1689 + v246) & v1696;
          v255 = (v1744 + v1689 + v247) & v1696;
          *(_BYTE *)v254 = *(_BYTE *)v255;
          v256 = v254 | 4;
          v257 = *(_DWORD *)(v255 | 4);
          *(_BYTE *)(v256 + 4) = *(_BYTE *)((v255 | 4) + 4);
          *(_DWORD *)v256 = v257;
          *(_WORD *)(v254 + 10) = *(_WORD *)(v255 + 0xA);
          v258 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1699 + 32);
          v258((v1697 + v254) & v242, (v1697 + v255) & v242, v1694);
          v259 = (v1693 + ((v1697 + v254) & v242)) & v242;
          v260 = (v1693 + ((v1697 + v255) & v242)) & v242;
          v258(v259, v260, v1694);
          v261 = (_BYTE *)(v259 + v1678);
          *v261 = *(_BYTE *)(v260 + v1678);
          v261[1] = *(_BYTE *)(v260 + v1678 + 1);
          v261[2] = *(_BYTE *)(v260 + v1678 + 2);
          v261[3] = *(_BYTE *)(v260 + v1678 + 3);
          v261[4] = *(_BYTE *)(v260 + v1678 + 4);
          v262 = (v259 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
          v263 = (v260 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_OWORD *)v262 = *(_OWORD *)v263;
          *(_BYTE *)(v262 + 16) = *(_BYTE *)(v263 + 16);
          *(_BYTE *)(v262 + 17) = *(_BYTE *)(v263 + 17);
          *(_BYTE *)(v262 + 18) = *(_BYTE *)(v263 + 18);
          *(_BYTE *)(v262 + 19) = *(_BYTE *)(v263 + 19);
          v264 = (v262 + 27) & 0xFFFFFFFFFFFFFFF8;
          v265 = (v263 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v264 = *(_QWORD *)v265;
          *(_BYTE *)(v264 + 8) = *(_BYTE *)(v265 + 8);
          *(_BYTE *)(v264 + 9) = *(_BYTE *)(v265 + 9);
          *(_BYTE *)(v264 + 10) = *(_BYTE *)(v265 + 10);
          *(_BYTE *)(v264 + 11) = *(_BYTE *)(v265 + 11);
          *(_BYTE *)(v264 + 12) = *(_BYTE *)(v265 + 12);
          v266 = (_QWORD *)((v262 + 47) & 0xFFFFFFFFFFFFF8);
          v267 = (_QWORD *)((v263 + 47) & 0xFFFFFFFFFFFFF8);
          *v266 = *v267;
          v268 = ((unint64_t)v266 + 15) & 0xFFFFFFFFFFFFFFF8;
          v269 = ((unint64_t)v267 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v268 = *(_QWORD *)v269;
          *(_BYTE *)(v268 + 8) = *(_BYTE *)(v269 + 8);
          *(_BYTE *)(v268 + 9) = *(_BYTE *)(v269 + 9);
          v270 = (void *)((v1690 + v268) & v242);
          v271 = (const void *)((v1690 + v269) & v242);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1699 + 48))(v271, 1, v1694))
          {
            memcpy(v270, v271, v1745);
          }
          else
          {
            v258((unint64_t)v270, (unint64_t)v271, v1694);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1699 + 56))(v270, 0, 1, v1694);
          }
          v383 = (_QWORD *)(((unint64_t)v271 + v1691) & 0xFFFFFFFFFFFFFFF8);
          v384 = (_QWORD *)(((unint64_t)v270 + v1691) & 0xFFFFFFFFFFFFFFF8);
          *v384 = *v383;
          v385 = ((unint64_t)v384 + 15) & 0xFFFFFFFFFFFFFFF8;
          v386 = ((unint64_t)v383 + 15) & 0xFFFFFFFFFFFFFFF8;
          v387 = *(_QWORD *)v386;
          *(_BYTE *)(v385 + 8) = *(_BYTE *)(v386 + 8);
          *(_QWORD *)v385 = v387;
          v388 = (_QWORD *)(((unint64_t)v384 + 31) & 0xFFFFFFFFFFFFF8);
          v389 = (_QWORD *)(((unint64_t)v383 + 31) & 0xFFFFFFFFFFFFF8);
          *v388 = *v389;
          v390 = (_OWORD *)(((unint64_t)v388 + 15) & 0xFFFFFFFFFFFFFFF8);
          v391 = (_OWORD *)(((unint64_t)v389 + 15) & 0xFFFFFFFFFFFFFFF8);
          *v390 = *v391;
          v392 = ((unint64_t)v390 + 19) & 0xFFFFFFFFFFFFFFF8;
          v393 = ((unint64_t)v391 + 19) & 0xFFFFFFFFFFFFFFF8;
          v394 = *(_QWORD *)v393;
          *(_BYTE *)(v392 + 8) = *(_BYTE *)(v393 + 8);
          *(_QWORD *)v392 = v394;
          *(_BYTE *)(v392 + 9) = *(_BYTE *)(v393 + 9);
          v395 = (v392 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          v396 = (v393 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          LODWORD(v387) = *(_DWORD *)v396;
          *(_BYTE *)(v395 + 4) = *(_BYTE *)(v396 + 4);
          *(_DWORD *)v395 = v387;
          *(_OWORD *)((v392 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v393 + 25) & 0xFFFFFFFFFFFFF8);
          v397 = v1692 + v254;
          v398 = *(_OWORD *)(v1692 + v255 + 112);
          v400 = *(_OWORD *)(v1692 + v255 + 64);
          v399 = *(_OWORD *)(v1692 + v255 + 80);
          *(_OWORD *)(v397 + 96) = *(_OWORD *)(v1692 + v255 + 96);
          *(_OWORD *)(v397 + 112) = v398;
          *(_OWORD *)(v397 + 64) = v400;
          *(_OWORD *)(v397 + 80) = v399;
          v401 = *(_OWORD *)(v1692 + v255 + 176);
          v403 = *(_OWORD *)(v1692 + v255 + 128);
          v402 = *(_OWORD *)(v1692 + v255 + 144);
          *(_OWORD *)(v397 + 160) = *(_OWORD *)(v1692 + v255 + 160);
          *(_OWORD *)(v397 + 176) = v401;
          *(_OWORD *)(v397 + 128) = v403;
          *(_OWORD *)(v397 + 144) = v402;
          v405 = *(_OWORD *)(v1692 + v255 + 208);
          v404 = *(_OWORD *)(v1692 + v255 + 224);
          v406 = *(_OWORD *)(v1692 + v255 + 192);
          *(_QWORD *)(v397 + 240) = *(_QWORD *)(v1692 + v255 + 240);
          *(_OWORD *)(v397 + 208) = v405;
          *(_OWORD *)(v397 + 224) = v404;
          *(_OWORD *)(v397 + 192) = v406;
          v407 = *(_OWORD *)(v1692 + v255);
          v408 = *(_OWORD *)(v1692 + v255 + 16);
          v409 = *(_OWORD *)(v1692 + v255 + 48);
          *(_OWORD *)(v397 + 32) = *(_OWORD *)(v1692 + v255 + 32);
          *(_OWORD *)(v397 + 48) = v409;
          *(_OWORD *)v397 = v407;
          *(_OWORD *)(v397 + 16) = v408;
          v410 = (_OWORD *)((v1692 + v254 + 255) & 0xFFFFFFFFFFFFFFF8);
          v411 = (__int128 *)((v1692 + v255 + 255) & 0xFFFFFFFFFFFFFFF8);
          v412 = *v411;
          *(_OWORD *)((char *)v410 + 9) = *(__int128 *)((char *)v411 + 9);
          *v410 = v412;
          v413 = (v1692 + v254 + 287) & 0xFFFFFFFFFFFFFFF8;
          v414 = (v1692 + v255 + 287) & 0xFFFFFFFFFFFFFFF8;
          v415 = *(_OWORD *)v414;
          *(_BYTE *)(v413 + 16) = *(_BYTE *)(v414 + 16);
          *(_OWORD *)v413 = v415;
          v416 = (_QWORD *)((v1692 + v254 + 311) & 0xFFFFFFFFFFFFF8);
          v417 = (_QWORD *)((v1692 + v255 + 311) & 0xFFFFFFFFFFFFF8);
          *v416 = *v417;
          *(_OWORD *)(((unint64_t)v416 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v417 + 15) & 0xFFFFFFFFFFFFF8);
          if (v1614 > 3)
            goto LABEL_674;
          v418 = ((1 << (8 * v1614)) + 5) >> (8 * v1614);
          if (v418 > 0xFFD8)
          {
            v476 = 8;
LABEL_715:
            *v1702 = v476;
          }
          else if (v418 <= 0xD8)
          {
LABEL_674:
            v380 = 8;
LABEL_675:
            *(_BYTE *)v1702 = v380;
          }
          else
          {
            v382 = 8;
LABEL_679:
            *(_WORD *)v1702 = v382;
          }
          return a1;
        case 9u:
          v272 = *((unsigned __int8 *)a2 + v1760);
          if (v272 >= 2)
          {
            if (v1760 <= 3)
              v273 = v1760;
            else
              v273 = 4;
            __asm { BR              X12 }
          }
          v638 = v272 == 1;
          if (v272 == 1)
            v639 = v1747;
          else
            v639 = v1746;
          if (v272 == 1)
            v640 = v77;
          else
            v640 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v639 + 32))(a1, a2, v640);
          *((_BYTE *)a1 + v1760) = v638;
          if (v73 > 3)
            goto LABEL_856;
          v641 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v641 > 0xFFD8)
          {
            *v1702 = 9;
          }
          else if (v641 <= 0xD8)
          {
LABEL_856:
            *(_BYTE *)v1702 = 9;
          }
          else
          {
            *(_WORD *)v1702 = 9;
          }
          return a1;
        case 0xAu:
          v274 = *((unsigned __int8 *)a2 + v1760);
          if (v274 >= 2)
          {
            if (v1760 <= 3)
              v275 = v1760;
            else
              v275 = 4;
            __asm { BR              X12 }
          }
          v642 = v73;
          v643 = v274 == 1;
          if (v274 == 1)
            v644 = v1747;
          else
            v644 = v1746;
          if (v274 == 1)
            v645 = v77;
          else
            v645 = AssociatedTypeWitness;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v644 + 32))(a1, a2, v645);
          *((_BYTE *)a1 + v1760) = v643;
          v646 = (char *)(((unint64_t)a1 + v1695) & v1700);
          v647 = ((unint64_t)a2 + v1695) & v1700;
          v648 = *(unsigned __int8 *)(v647 + v1760);
          if (v648 > 1)
          {
            v649 = v1759;
            memcpy(v646, (const void *)(((unint64_t)a2 + v1695) & v1700), v1759);
          }
          else
          {
            if (v648 == 1)
            {
              (*(void (**)(char *, unint64_t, uint64_t))(v1747 + 32))(v646, ((unint64_t)a2 + v1695) & v1700, v77);
              v646[v1760] = 1;
            }
            else
            {
              (*(void (**)(char *, unint64_t, uint64_t))(v1746 + 32))(v646, ((unint64_t)a2 + v1695) & v1700, AssociatedTypeWitness);
              v646[v1760] = 0;
            }
            v649 = v1759;
          }
          v650 = &v646[v649];
          *v650 = *(_BYTE *)(v647 + v649);
          v650[1] = *(_BYTE *)(v647 + v649 + 1);
          if (v642 > 3)
            goto LABEL_874;
          v651 = ((1 << (8 * v642)) + 5) >> (8 * v642);
          if (v651 > 0xFFD8)
          {
            *v1702 = 10;
          }
          else if (v651 <= 0xD8)
          {
LABEL_874:
            *(_BYTE *)v1702 = 10;
          }
          else
          {
            *(_WORD *)v1702 = 10;
          }
          return a1;
        case 0xBu:
          v276 = *((unsigned __int8 *)a2 + v1760);
          if (v276 >= 2)
          {
            if (v1760 <= 3)
              v277 = v1760;
            else
              v277 = 4;
            __asm { BR              X12 }
          }
          v652 = v73;
          v653 = v276 == 1;
          if (v276 == 1)
            v654 = v1747;
          else
            v654 = v1746;
          if (v276 == 1)
            v655 = v77;
          else
            v655 = AssociatedTypeWitness;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v654 + 32))(a1, a2, v655);
          *((_BYTE *)a1 + v1760) = v653;
          v656 = (char *)(((unint64_t)a1 + v1695) & v1700);
          v657 = ((unint64_t)a2 + v1695) & v1700;
          v658 = *(unsigned __int8 *)(v657 + v1760);
          if (v658 > 1)
          {
            v659 = v1759;
            memcpy(v656, (const void *)(((unint64_t)a2 + v1695) & v1700), v1759);
          }
          else
          {
            if (v658 == 1)
            {
              (*(void (**)(char *, unint64_t, uint64_t))(v1747 + 32))(v656, ((unint64_t)a2 + v1695) & v1700, v77);
              v656[v1760] = 1;
            }
            else
            {
              (*(void (**)(char *, unint64_t, uint64_t))(v1746 + 32))(v656, ((unint64_t)a2 + v1695) & v1700, AssociatedTypeWitness);
              v656[v1760] = 0;
            }
            v659 = v1759;
          }
          v660 = &v656[v659];
          *v660 = *(_BYTE *)(v657 + v659);
          v660[1] = *(_BYTE *)(v657 + v659 + 1);
          if (v652 > 3)
            goto LABEL_892;
          v661 = ((1 << (8 * v652)) + 5) >> (8 * v652);
          if (v661 > 0xFFD8)
          {
            *v1702 = 11;
          }
          else if (v661 <= 0xD8)
          {
LABEL_892:
            *(_BYTE *)v1702 = 11;
          }
          else
          {
            *(_WORD *)v1702 = 11;
          }
          return a1;
        case 0xCu:
          v278 = *((unsigned __int8 *)a2 + v1760);
          if (v278 >= 2)
          {
            if (v1760 <= 3)
              v279 = v1760;
            else
              v279 = 4;
            __asm { BR              X12 }
          }
          v662 = v278 == 1;
          if (v278 == 1)
            v663 = v1747;
          else
            v663 = v1746;
          if (v278 == 1)
            v664 = v77;
          else
            v664 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v663 + 32))(a1, a2, v664);
          *((_BYTE *)a1 + v1760) = v662;
          *((_BYTE *)a1 + v1759) = *((_BYTE *)a2 + v1759);
          *(_QWORD *)(((unint64_t)a1 + v1737 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2
                                                                                            + v1737
                                                                                            + 7) & 0xFFFFFFFFFFFFF8);
          if (v73 > 3)
            goto LABEL_904;
          v665 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v665 > 0xFFD8)
          {
            *v1702 = 12;
          }
          else if (v665 <= 0xD8)
          {
LABEL_904:
            *(_BYTE *)v1702 = 12;
          }
          else
          {
            *(_WORD *)v1702 = 12;
          }
          return a1;
        case 0xDu:
          v280 = *((unsigned __int8 *)a2 + v1760);
          if (v280 >= 2)
          {
            if (v1760 <= 3)
              v281 = v1760;
            else
              v281 = 4;
            __asm { BR              X12 }
          }
          v666 = v280 == 1;
          if (v280 == 1)
            v667 = v1747;
          else
            v667 = v1746;
          if (v280 == 1)
            v668 = v77;
          else
            v668 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v667 + 32))(a1, a2, v668);
          *((_BYTE *)a1 + v1760) = v666;
          *((_BYTE *)a1 + v1759) = *((_BYTE *)a2 + v1759);
          if (v73 > 3)
            goto LABEL_916;
          v669 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v669 > 0xFFD8)
          {
            *v1702 = 13;
          }
          else if (v669 <= 0xD8)
          {
LABEL_916:
            *(_BYTE *)v1702 = 13;
          }
          else
          {
            *(_WORD *)v1702 = 13;
          }
          return a1;
        case 0xEu:
          v282 = *((unsigned __int8 *)a2 + v1760);
          if (v282 >= 2)
          {
            if (v1760 <= 3)
              v283 = v1760;
            else
              v283 = 4;
            __asm { BR              X12 }
          }
          v670 = v282 == 1;
          if (v282 == 1)
            v671 = v1747;
          else
            v671 = v1746;
          if (v282 == 1)
            v672 = v77;
          else
            v672 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v671 + 32))(a1, a2, v672);
          *((_BYTE *)a1 + v1760) = v670;
          *(_QWORD *)(((unint64_t)a1 + v1759 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2
                                                                                            + v1759
                                                                                            + 7) & 0xFFFFFFFFFFFFF8);
          if (v73 > 3)
            goto LABEL_928;
          v673 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v673 > 0xFFD8)
          {
            *v1702 = 14;
          }
          else if (v673 <= 0xD8)
          {
LABEL_928:
            *(_BYTE *)v1702 = 14;
          }
          else
          {
            *(_WORD *)v1702 = 14;
          }
          return a1;
        case 0xFu:
          v284 = *((unsigned __int8 *)a2 + v1760);
          if (v284 >= 2)
          {
            if (v1760 <= 3)
              v285 = v1760;
            else
              v285 = 4;
            __asm { BR              X12 }
          }
          v674 = v284 == 1;
          if (v284 == 1)
            v675 = v1747;
          else
            v675 = v1746;
          if (v284 == 1)
            v676 = v77;
          else
            v676 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v675 + 32))(a1, a2, v676);
          *((_BYTE *)a1 + v1760) = v674;
          *(_QWORD *)(((unint64_t)a1 + v1759 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2
                                                                                            + v1759
                                                                                            + 7) & 0xFFFFFFFFFFFFF8);
          if (v73 > 3)
            goto LABEL_940;
          v677 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v677 > 0xFFD8)
          {
            *v1702 = 15;
          }
          else if (v677 <= 0xD8)
          {
LABEL_940:
            *(_BYTE *)v1702 = 15;
          }
          else
          {
            *(_WORD *)v1702 = 15;
          }
          return a1;
        case 0x10u:
          v286 = a2[1];
          *a1 = *a2;
          a1[1] = v286;
          a1[2] = a2[2];
          *((_QWORD *)a1 + 6) = *((_QWORD *)a2 + 6);
          if (v73 > 3)
            goto LABEL_511;
          v329 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v329 > 0xFFD8)
          {
            *v1702 = 16;
          }
          else if (v329 <= 0xD8)
          {
LABEL_511:
            *(_BYTE *)v1702 = 16;
          }
          else
          {
            *(_WORD *)v1702 = 16;
          }
          return a1;
        case 0x11u:
          v287 = *((unsigned __int8 *)a2 + v1760);
          if (v287 >= 2)
          {
            if (v1760 <= 3)
              v288 = v1760;
            else
              v288 = 4;
            __asm { BR              X12 }
          }
          v678 = v287 == 1;
          if (v287 == 1)
            v679 = v1747;
          else
            v679 = v1746;
          if (v287 == 1)
            v680 = v77;
          else
            v680 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v679 + 32))(a1, a2, v680);
          *((_BYTE *)a1 + v1760) = v678;
          if (v73 > 3)
            goto LABEL_952;
          v681 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v681 > 0xFFD8)
          {
            *v1702 = 17;
          }
          else if (v681 <= 0xD8)
          {
LABEL_952:
            *(_BYTE *)v1702 = 17;
          }
          else
          {
            *(_WORD *)v1702 = 17;
          }
          return a1;
        case 0x12u:
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v1746 + 32))(a1, a2, v81);
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1747 + 32))(((unint64_t)a1 + v1663) & v1701, ((unint64_t)a2 + v1663) & v1701, v77);
          if (v73 > 3)
            goto LABEL_518;
          v330 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v330 > 0xFFD8)
          {
            *v1702 = 18;
          }
          else if (v330 <= 0xD8)
          {
LABEL_518:
            *(_BYTE *)v1702 = 18;
          }
          else
          {
            *(_WORD *)v1702 = 18;
          }
          return a1;
        case 0x13u:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v289 = ((unint64_t)a1 + v1755 + 1) & v1700;
          v290 = *(unsigned __int8 *)((((unint64_t)a2 + v1755 + 1) & v1700) + v1760);
          if (v290 >= 2)
          {
            if (v1760 <= 3)
              v291 = v1760;
            else
              v291 = 4;
            __asm { BR              X12 }
          }
          v682 = v290 == 1;
          if (v290 == 1)
            v683 = v1747;
          else
            v683 = v1746;
          (*(void (**)(uint64_t))(v683 + 32))(v289);
          *(_BYTE *)(v289 + v1760) = v682;
          if (v73 > 3)
            goto LABEL_961;
          v684 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v684 > 0xFFD8)
          {
            *v1702 = 19;
          }
          else if (v684 <= 0xD8)
          {
LABEL_961:
            *(_BYTE *)v1702 = 19;
          }
          else
          {
            *(_WORD *)v1702 = 19;
          }
          return a1;
        case 0x14u:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          if (v73 > 3)
            goto LABEL_525;
          v331 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v331 > 0xFFD8)
          {
            *v1702 = 20;
          }
          else if (v331 <= 0xD8)
          {
LABEL_525:
            *(_BYTE *)v1702 = 20;
          }
          else
          {
            *(_WORD *)v1702 = 20;
          }
          return a1;
        case 0x15u:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          if (v73 > 3)
            goto LABEL_527;
          v332 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v332 > 0xFFD8)
          {
            *v1702 = 21;
          }
          else if (v332 <= 0xD8)
          {
LABEL_527:
            *(_BYTE *)v1702 = 21;
          }
          else
          {
            *(_WORD *)v1702 = 21;
          }
          return a1;
        case 0x16u:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          if (v73 > 3)
            goto LABEL_529;
          v333 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v333 > 0xFFD8)
          {
            *v1702 = 22;
          }
          else if (v333 <= 0xD8)
          {
LABEL_529:
            *(_BYTE *)v1702 = 22;
          }
          else
          {
            *(_WORD *)v1702 = 22;
          }
          return a1;
        case 0x17u:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          if (v73 > 3)
            goto LABEL_531;
          v334 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v334 > 0xFFD8)
          {
            *v1702 = 23;
          }
          else if (v334 <= 0xD8)
          {
LABEL_531:
            *(_BYTE *)v1702 = 23;
          }
          else
          {
            *(_WORD *)v1702 = 23;
          }
          return a1;
        case 0x18u:
          v292 = *((unsigned __int8 *)a2 + v1760);
          if (v292 >= 2)
          {
            if (v1760 <= 3)
              v293 = v1760;
            else
              v293 = 4;
            __asm { BR              X12 }
          }
          v685 = v292 == 1;
          if (v292 == 1)
            v686 = v1747;
          else
            v686 = v1746;
          if (v292 == 1)
            v687 = v77;
          else
            v687 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v686 + 32))(a1, a2, v687);
          *((_BYTE *)a1 + v1760) = v685;
          if (v73 > 3)
            goto LABEL_973;
          v688 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v688 > 0xFFD8)
          {
            *v1702 = 24;
          }
          else if (v688 <= 0xD8)
          {
LABEL_973:
            *(_BYTE *)v1702 = 24;
          }
          else
          {
            *(_WORD *)v1702 = 24;
          }
          return a1;
        case 0x19u:
          v294 = *((unsigned __int8 *)a2 + v1760);
          if (v294 >= 2)
          {
            if (v1760 <= 3)
              v295 = v1760;
            else
              v295 = 4;
            __asm { BR              X12 }
          }
          v689 = v294 == 1;
          if (v294 == 1)
            v690 = v1747;
          else
            v690 = v1746;
          if (v294 == 1)
            v691 = v77;
          else
            v691 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v690 + 32))(a1, a2, v691);
          *((_BYTE *)a1 + v1760) = v689;
          if (v73 > 3)
            goto LABEL_985;
          v692 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v692 > 0xFFD8)
          {
            *v1702 = 25;
          }
          else if (v692 <= 0xD8)
          {
LABEL_985:
            *(_BYTE *)v1702 = 25;
          }
          else
          {
            *(_WORD *)v1702 = 25;
          }
          return a1;
        case 0x1Au:
          v296 = *((unsigned __int8 *)a2 + v1760);
          if (v296 >= 2)
          {
            if (v1760 <= 3)
              v297 = v1760;
            else
              v297 = 4;
            __asm { BR              X12 }
          }
          v693 = v296 == 1;
          if (v296 == 1)
            v694 = v1747;
          else
            v694 = v1746;
          if (v296 == 1)
            v695 = v77;
          else
            v695 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v694 + 32))(a1, a2, v695);
          *((_BYTE *)a1 + v1760) = v693;
          if (v73 > 3)
            goto LABEL_997;
          v696 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v696 > 0xFFD8)
          {
            *v1702 = 26;
          }
          else if (v696 <= 0xD8)
          {
LABEL_997:
            *(_BYTE *)v1702 = 26;
          }
          else
          {
            *(_WORD *)v1702 = 26;
          }
          return a1;
        case 0x1Bu:
          v298 = v1658;
          v299 = *((unsigned __int8 *)a2 + v1658);
          if (v299 >= 2)
          {
            if (v1658 <= 3)
              v300 = v1658;
            else
              v300 = 4;
            __asm { BR              X12 }
          }
          if (v299 == 1)
          {
            switch(*((_BYTE *)a2 + v1647))
            {
              case 0:
                v1708 = v1705 + 7;
                v951 = v79;
                v1616 = v73;
                v952 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(v1747 + 32);
                v952(a1, a2, v77);
                v953 = (_OWORD *)(((unint64_t)a1 + v1636) & v1655);
                v954 = (_OWORD *)(((unint64_t)a2 + v1636) & v1655);
                if (v1665 == v1661)
                {
                  v955 = (*(uint64_t (**)(unint64_t))(v1747 + 48))(((unint64_t)a2 + v1636) & v1655);
                  goto LABEL_1312;
                }
                v1051 = ((unint64_t)v954 + v1686) & v1701;
                v1052 = (v1656 + v1051) & v1704;
                if (v1667 == v1661)
                {
                  if (v1660 == v1667)
                  {
                    v955 = (*(uint64_t (**)(unint64_t))(v1682 + 48))((v1656 + v1051) & v1704);
                    goto LABEL_1312;
                  }
                  v1451 = (unint64_t *)((v1685 + v1052) & 0xFFFFFFFFFFFFFFF8);
                  if (v1646 <= 0x7FFFFFFE)
                  {
                    v1452 = *v1451;
                    goto LABEL_1857;
                  }
                  v955 = (*(uint64_t (**)(unint64_t))(v1676 + 48))(((unint64_t)v1451 + v1675) & v1671);
                }
                else
                {
                  v1087 = v1052 + v1689;
                  if ((v1642 & 0x80000000) == 0)
                  {
                    v1088 = *(_QWORD *)(v1087 + 8);
                    if (v1088 >= 0xFFFFFFFF)
                      LODWORD(v1088) = -1;
                    if ((_DWORD)v1088 != -1)
                      goto LABEL_1313;
LABEL_1540:
                    v1051 = ((unint64_t)v954 + v1686) & v1701;
                    v1052 = (v1656 + v1051) & v1704;
LABEL_1541:
                    v952(v953, v954, v1735);
                    v1089 = ((unint64_t)v953 + v1686) & v1701;
                    v952((_OWORD *)v1089, (_OWORD *)v1051, v1735);
                    v1090 = (v1656 + v1089) & v1704;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1682 + 32))(v1090, v1052, v1683);
                    v1091 = (_QWORD *)((v1685 + v1090) & 0xFFFFFFFFFFFFFFF8);
                    v1092 = (_QWORD *)((v1685 + v1052) & 0xFFFFFFFFFFFFFFF8);
                    *v1091 = *v1092;
                    v1093 = ((unint64_t)v1091 + v1675) & v1671;
                    v1094 = ((unint64_t)v1092 + v1675) & v1671;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1676 + 32))(v1093, v1094, v1677);
                    v1095 = (_QWORD *)((v1669 + v1094) & 0xFFFFFFFFFFFFF8);
                    v1096 = (_QWORD *)((v1669 + v1093) & 0xFFFFFFFFFFFFF8);
                    *v1096 = *v1095;
                    *(_OWORD *)(((unint64_t)v1096 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1095
                                                                                                  + 15) & 0xFFFFFFFFFFFFF8);
                    *(_OWORD *)(v1090 + v1689) = *(_OWORD *)(v1052 + v1689);
                    v1097 = (v1744 + v1090 + v1689) & v1696;
                    v1098 = (v1744 + v1052 + v1689) & v1696;
                    *(_BYTE *)v1097 = *(_BYTE *)v1098;
                    v1099 = v1097 | 4;
                    v1100 = *(_DWORD *)(v1098 | 4);
                    *(_BYTE *)(v1099 + 4) = *(_BYTE *)((v1098 | 4) + 4);
                    *(_DWORD *)v1099 = v1100;
                    *(_WORD *)(v1097 + 10) = *(_WORD *)(v1098 + 0xA);
                    v1101 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1699 + 32);
                    v1101((v1697 + v1097) & v951, (v1697 + v1098) & v951, v1694);
                    v1102 = (v1693 + ((v1697 + v1097) & v951)) & v951;
                    v1103 = (v1693 + ((v1697 + v1098) & v951)) & v951;
                    v1101(v1102, v1103, v1694);
                    v1104 = (_BYTE *)(v1102 + v1678);
                    *v1104 = *(_BYTE *)(v1103 + v1678);
                    v1104[1] = *(_BYTE *)(v1103 + v1678 + 1);
                    v1104[2] = *(_BYTE *)(v1103 + v1678 + 2);
                    v1104[3] = *(_BYTE *)(v1103 + v1678 + 3);
                    v1104[4] = *(_BYTE *)(v1103 + v1678 + 4);
                    v1105 = (v1102 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
                    v1106 = (v1103 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_OWORD *)v1105 = *(_OWORD *)v1106;
                    *(_BYTE *)(v1105 + 16) = *(_BYTE *)(v1106 + 16);
                    *(_BYTE *)(v1105 + 17) = *(_BYTE *)(v1106 + 17);
                    *(_BYTE *)(v1105 + 18) = *(_BYTE *)(v1106 + 18);
                    *(_BYTE *)(v1105 + 19) = *(_BYTE *)(v1106 + 19);
                    v1107 = (v1105 + 27) & 0xFFFFFFFFFFFFFFF8;
                    v1108 = (v1106 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v1107 = *(_QWORD *)v1108;
                    *(_BYTE *)(v1107 + 8) = *(_BYTE *)(v1108 + 8);
                    *(_BYTE *)(v1107 + 9) = *(_BYTE *)(v1108 + 9);
                    *(_BYTE *)(v1107 + 10) = *(_BYTE *)(v1108 + 10);
                    *(_BYTE *)(v1107 + 11) = *(_BYTE *)(v1108 + 11);
                    *(_BYTE *)(v1107 + 12) = *(_BYTE *)(v1108 + 12);
                    v1109 = (_QWORD *)((v1105 + 47) & 0xFFFFFFFFFFFFF8);
                    v1110 = (_QWORD *)((v1106 + 47) & 0xFFFFFFFFFFFFF8);
                    *v1109 = *v1110;
                    v1111 = ((unint64_t)v1109 + 15) & 0xFFFFFFFFFFFFFFF8;
                    v1112 = ((unint64_t)v1110 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v1111 = *(_QWORD *)v1112;
                    *(_BYTE *)(v1111 + 8) = *(_BYTE *)(v1112 + 8);
                    *(_BYTE *)(v1111 + 9) = *(_BYTE *)(v1112 + 9);
                    v1113 = (void *)((v1690 + v1111) & v951);
                    v1114 = (const void *)((v1690 + v1112) & v951);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1699 + 48))(v1114, 1, v1694))
                    {
                      memcpy(v1113, v1114, v1745);
                    }
                    else
                    {
                      v1101((unint64_t)v1113, (unint64_t)v1114, v1694);
                      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1699 + 56))(v1113, 0, 1, v1694);
                    }
                    v298 = v1658;
                    v956 = v1644;
                    v1236 = (_QWORD *)(((unint64_t)v1113 + v1691) & 0xFFFFFFFFFFFFFFF8);
                    v1237 = (_QWORD *)(((unint64_t)v1114 + v1691) & 0xFFFFFFFFFFFFFFF8);
                    *v1236 = *v1237;
                    v1238 = ((unint64_t)v1236 + 15) & 0xFFFFFFFFFFFFFFF8;
                    v1239 = ((unint64_t)v1237 + 15) & 0xFFFFFFFFFFFFFFF8;
                    v1240 = *(_QWORD *)v1239;
                    *(_BYTE *)(v1238 + 8) = *(_BYTE *)(v1239 + 8);
                    *(_QWORD *)v1238 = v1240;
                    v1241 = (_QWORD *)(((unint64_t)v1236 + 31) & 0xFFFFFFFFFFFFF8);
                    v1242 = (_QWORD *)(((unint64_t)v1237 + 31) & 0xFFFFFFFFFFFFF8);
                    *v1241 = *v1242;
                    v1243 = (_OWORD *)(((unint64_t)v1241 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v1244 = (_OWORD *)(((unint64_t)v1242 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *v1243 = *v1244;
                    v1245 = ((unint64_t)v1243 + 19) & 0xFFFFFFFFFFFFFFF8;
                    v1246 = ((unint64_t)v1244 + 19) & 0xFFFFFFFFFFFFFFF8;
                    v1247 = *(_QWORD *)v1246;
                    *(_BYTE *)(v1245 + 8) = *(_BYTE *)(v1246 + 8);
                    *(_QWORD *)v1245 = v1247;
                    *(_BYTE *)(v1245 + 9) = *(_BYTE *)(v1246 + 9);
                    v1248 = (v1245 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    v1249 = (v1246 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    LODWORD(v1240) = *(_DWORD *)v1249;
                    *(_BYTE *)(v1248 + 4) = *(_BYTE *)(v1249 + 4);
                    *(_DWORD *)v1248 = v1240;
                    *(_OWORD *)((v1245 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v1246 + 25) & 0xFFFFFFFFFFFFF8);
                    v1250 = v1097 + v1692;
                    v1251 = *(_OWORD *)(v1098 + v1692 + 112);
                    v1253 = *(_OWORD *)(v1098 + v1692 + 64);
                    v1252 = *(_OWORD *)(v1098 + v1692 + 80);
                    *(_OWORD *)(v1250 + 96) = *(_OWORD *)(v1098 + v1692 + 96);
                    *(_OWORD *)(v1250 + 112) = v1251;
                    *(_OWORD *)(v1250 + 64) = v1253;
                    *(_OWORD *)(v1250 + 80) = v1252;
                    v1254 = *(_OWORD *)(v1098 + v1692 + 176);
                    v1256 = *(_OWORD *)(v1098 + v1692 + 128);
                    v1255 = *(_OWORD *)(v1098 + v1692 + 144);
                    *(_OWORD *)(v1250 + 160) = *(_OWORD *)(v1098 + v1692 + 160);
                    *(_OWORD *)(v1250 + 176) = v1254;
                    *(_OWORD *)(v1250 + 128) = v1256;
                    *(_OWORD *)(v1250 + 144) = v1255;
                    v1258 = *(_OWORD *)(v1098 + v1692 + 208);
                    v1257 = *(_OWORD *)(v1098 + v1692 + 224);
                    v1259 = *(_OWORD *)(v1098 + v1692 + 192);
                    *(_QWORD *)(v1250 + 240) = *(_QWORD *)(v1098 + v1692 + 240);
                    *(_OWORD *)(v1250 + 208) = v1258;
                    *(_OWORD *)(v1250 + 224) = v1257;
                    *(_OWORD *)(v1250 + 192) = v1259;
                    v1260 = *(_OWORD *)(v1098 + v1692);
                    v1261 = *(_OWORD *)(v1098 + v1692 + 16);
                    v1262 = *(_OWORD *)(v1098 + v1692 + 48);
                    *(_OWORD *)(v1250 + 32) = *(_OWORD *)(v1098 + v1692 + 32);
                    *(_OWORD *)(v1250 + 48) = v1262;
                    *(_OWORD *)v1250 = v1260;
                    *(_OWORD *)(v1250 + 16) = v1261;
                    v1263 = (_OWORD *)((v1097 + v1692 + 255) & 0xFFFFFFFFFFFFFFF8);
                    v1264 = (__int128 *)((v1098 + v1692 + 255) & 0xFFFFFFFFFFFFFFF8);
                    v1265 = *v1264;
                    *(_OWORD *)((char *)v1263 + 9) = *(__int128 *)((char *)v1264 + 9);
                    *v1263 = v1265;
                    v1266 = (v1097 + v1692 + 287) & 0xFFFFFFFFFFFFFFF8;
                    v1267 = (v1098 + v1692 + 287) & 0xFFFFFFFFFFFFFFF8;
                    v1268 = *(_OWORD *)v1267;
                    *(_BYTE *)(v1266 + 16) = *(_BYTE *)(v1267 + 16);
                    *(_OWORD *)v1266 = v1268;
                    v1269 = (_QWORD *)((v1097 + v1692 + 311) & 0xFFFFFFFFFFFFF8);
                    v1270 = (_QWORD *)((v1098 + v1692 + 311) & 0xFFFFFFFFFFFFF8);
                    *v1269 = *v1270;
                    *(_OWORD *)(((unint64_t)v1269 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1270
                                                                                                  + 15) & 0xFFFFFFFFFFFFF8);
                    v958 = v1678;
                    v957 = v1708;
                    v953 = (_OWORD *)(((unint64_t)a1 + v1636) & v1655);
                    if (!v1679)
                      goto LABEL_1314;
LABEL_1589:
                    v977 = 0;
                    v1271 = ((((v956
                              + ((((((((((v957 + v958) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 19) & 0xFFFFFFFFFFFFFFF8)
                                + 25) & 0xFFFFFFFFFFFFFFF8)
                              + 327) & 0xFFFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 16;
                    v1272 = (_QWORD *)(((unint64_t)v953 + v1271) & 0xFFFFFFFFFFFFFFF8);
                    v1273 = (_QWORD *)(((unint64_t)v954 + v1271) & 0xFFFFFFFFFFFFFFF8);
                    *v1272 = *v1273;
                    *(_QWORD *)(((unint64_t)v1272 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1273
                                                                                                  + 15) & 0xFFFFFFFFFFFFF8);
                    v976 = 1;
                    goto LABEL_1593;
                  }
                  v1469 = (v1697 + ((v1744 + v1087) & v1696)) & v951;
                  if (v1679 <= 0x7FFFFFFD)
                  {
                    v1452 = *(_QWORD *)(((v1664 + ((v1693 + v1469) & v951)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_1857:
                    if (v1452 >= 0xFFFFFFFF)
                      LODWORD(v1452) = -1;
                    if ((v1452 + 1) >= 2)
                      goto LABEL_1313;
                    goto LABEL_1541;
                  }
                  v955 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v1469);
                }
LABEL_1312:
                if (v955)
                {
LABEL_1313:
                  memcpy(v953, v954, __na);
                  v956 = v1644;
                  v957 = v1708;
LABEL_1314:
                  v958 = v1745;
                  goto LABEL_1589;
                }
                goto LABEL_1540;
              case 1:
                v1709 = v1705 + 7;
                v959 = v79;
                v960 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(v1747 + 32);
                v960(a1, a2, v77);
                v961 = (_OWORD *)(((unint64_t)a2 + v1636) & v1655);
                v1617 = v73;
                if (v1665 == v1661)
                {
                  v962 = (*(uint64_t (**)(unint64_t))(v1747 + 48))(((unint64_t)a2 + v1636) & v1655);
                  v963 = v1689;
                  v964 = (_OWORD *)(((unint64_t)a1 + v1636) & v1655);
LABEL_1798:
                  if (v962)
                  {
LABEL_1799:
                    memcpy(v964, v961, __na);
                    v1534 = v1745;
                    v1535 = v1644;
                    v1536 = v1709;
LABEL_1800:
                    v1537 = v1534;
                    goto LABEL_1806;
                  }
                  v1053 = ((unint64_t)v961 + v1686) & v1701;
                  v1054 = (v1656 + v1053) & v1704;
LABEL_1802:
                  v960(v964, v961, v1735);
                  v1538 = ((unint64_t)v964 + v1686) & v1701;
                  v960((_OWORD *)v1538, (_OWORD *)v1053, v1735);
                  v1539 = (v1656 + v1538) & v1704;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1682 + 32))(v1539, v1054, v1683);
                  v1540 = (_QWORD *)((v1685 + v1539) & 0xFFFFFFFFFFFFFFF8);
                  v1541 = (_QWORD *)((v1685 + v1054) & 0xFFFFFFFFFFFFFFF8);
                  *v1540 = *v1541;
                  v1542 = ((unint64_t)v1540 + v1675) & v1671;
                  v1543 = ((unint64_t)v1541 + v1675) & v1671;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1676 + 32))(v1542, v1543, v1677);
                  v1544 = (_QWORD *)((v1669 + v1543) & 0xFFFFFFFFFFFFF8);
                  v1545 = (_QWORD *)((v1669 + v1542) & 0xFFFFFFFFFFFFF8);
                  *v1545 = *v1544;
                  *(_OWORD *)(((unint64_t)v1545 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1544
                                                                                                + 15) & 0xFFFFFFFFFFFFF8);
                  *(_OWORD *)(v1539 + v963) = *(_OWORD *)(v1054 + v963);
                  v1546 = (v1744 + v1539 + v963) & v1696;
                  v1547 = (v1744 + v1054 + v963) & v1696;
                  *(_BYTE *)v1546 = *(_BYTE *)v1547;
                  v1548 = v1546 | 4;
                  v1549 = *(_DWORD *)(v1547 | 4);
                  *(_BYTE *)(v1548 + 4) = *(_BYTE *)((v1547 | 4) + 4);
                  *(_DWORD *)v1548 = v1549;
                  *(_WORD *)(v1546 + 10) = *(_WORD *)(v1547 + 0xA);
                  v1550 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1699 + 32);
                  v1550((v1697 + v1546) & v959, (v1697 + v1547) & v959, v1694);
                  v1551 = (v1693 + ((v1697 + v1546) & v959)) & v959;
                  v1552 = (v1693 + ((v1697 + v1547) & v959)) & v959;
                  v1550(v1551, v1552, v1694);
                  v1553 = (_BYTE *)(v1551 + v1678);
                  *v1553 = *(_BYTE *)(v1552 + v1678);
                  v1553[1] = *(_BYTE *)(v1552 + v1678 + 1);
                  v1553[2] = *(_BYTE *)(v1552 + v1678 + 2);
                  v1553[3] = *(_BYTE *)(v1552 + v1678 + 3);
                  v1553[4] = *(_BYTE *)(v1552 + v1678 + 4);
                  v1554 = (v1551 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
                  v1555 = (v1552 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
                  *(_OWORD *)v1554 = *(_OWORD *)v1555;
                  *(_BYTE *)(v1554 + 16) = *(_BYTE *)(v1555 + 16);
                  *(_BYTE *)(v1554 + 17) = *(_BYTE *)(v1555 + 17);
                  *(_BYTE *)(v1554 + 18) = *(_BYTE *)(v1555 + 18);
                  *(_BYTE *)(v1554 + 19) = *(_BYTE *)(v1555 + 19);
                  v1556 = (v1554 + 27) & 0xFFFFFFFFFFFFFFF8;
                  v1557 = (v1555 + 27) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v1556 = *(_QWORD *)v1557;
                  *(_BYTE *)(v1556 + 8) = *(_BYTE *)(v1557 + 8);
                  *(_BYTE *)(v1556 + 9) = *(_BYTE *)(v1557 + 9);
                  *(_BYTE *)(v1556 + 10) = *(_BYTE *)(v1557 + 10);
                  *(_BYTE *)(v1556 + 11) = *(_BYTE *)(v1557 + 11);
                  *(_BYTE *)(v1556 + 12) = *(_BYTE *)(v1557 + 12);
                  v1558 = (_QWORD *)((v1554 + 47) & 0xFFFFFFFFFFFFF8);
                  v1559 = (_QWORD *)((v1555 + 47) & 0xFFFFFFFFFFFFF8);
                  *v1558 = *v1559;
                  v1560 = ((unint64_t)v1558 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1561 = ((unint64_t)v1559 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v1560 = *(_QWORD *)v1561;
                  *(_BYTE *)(v1560 + 8) = *(_BYTE *)(v1561 + 8);
                  *(_BYTE *)(v1560 + 9) = *(_BYTE *)(v1561 + 9);
                  v1562 = (void *)((v1690 + v1560) & v959);
                  v1563 = (const void *)((v1690 + v1561) & v959);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1699 + 48))(v1563, 1, v1694))
                  {
                    v1534 = v1745;
                    memcpy(v1562, v1563, v1745);
                  }
                  else
                  {
                    v1550((uint64_t)v1562, (uint64_t)v1563, v1694);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1699 + 56))(v1562, 0, 1, v1694);
                    v1534 = v1745;
                  }
                  v1535 = v1644;
                  v1564 = (_QWORD *)(((unint64_t)v1562 + v1691) & 0xFFFFFFFFFFFFFFF8);
                  v1565 = (_QWORD *)(((unint64_t)v1563 + v1691) & 0xFFFFFFFFFFFFFFF8);
                  *v1564 = *v1565;
                  v1566 = ((unint64_t)v1564 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1567 = ((unint64_t)v1565 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1568 = *(_QWORD *)v1567;
                  *(_BYTE *)(v1566 + 8) = *(_BYTE *)(v1567 + 8);
                  *(_QWORD *)v1566 = v1568;
                  v1569 = (_QWORD *)(((unint64_t)v1564 + 31) & 0xFFFFFFFFFFFFF8);
                  v1570 = (_QWORD *)(((unint64_t)v1565 + 31) & 0xFFFFFFFFFFFFF8);
                  *v1569 = *v1570;
                  v1571 = (_OWORD *)(((unint64_t)v1569 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v1572 = (_OWORD *)(((unint64_t)v1570 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v1571 = *v1572;
                  v1573 = ((unint64_t)v1571 + 19) & 0xFFFFFFFFFFFFFFF8;
                  v1574 = ((unint64_t)v1572 + 19) & 0xFFFFFFFFFFFFFFF8;
                  v1575 = *(_QWORD *)v1574;
                  *(_BYTE *)(v1573 + 8) = *(_BYTE *)(v1574 + 8);
                  *(_QWORD *)v1573 = v1575;
                  *(_BYTE *)(v1573 + 9) = *(_BYTE *)(v1574 + 9);
                  v1576 = (v1573 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  v1577 = (v1574 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  LODWORD(v1568) = *(_DWORD *)v1577;
                  *(_BYTE *)(v1576 + 4) = *(_BYTE *)(v1577 + 4);
                  *(_DWORD *)v1576 = v1568;
                  *(_OWORD *)((v1573 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v1574 + 25) & 0xFFFFFFFFFFFFF8);
                  v1578 = v1546 + v1692;
                  v1579 = *(_OWORD *)(v1547 + v1692 + 112);
                  v1581 = *(_OWORD *)(v1547 + v1692 + 64);
                  v1580 = *(_OWORD *)(v1547 + v1692 + 80);
                  *(_OWORD *)(v1578 + 96) = *(_OWORD *)(v1547 + v1692 + 96);
                  *(_OWORD *)(v1578 + 112) = v1579;
                  *(_OWORD *)(v1578 + 64) = v1581;
                  *(_OWORD *)(v1578 + 80) = v1580;
                  v1582 = *(_OWORD *)(v1547 + v1692 + 176);
                  v1584 = *(_OWORD *)(v1547 + v1692 + 128);
                  v1583 = *(_OWORD *)(v1547 + v1692 + 144);
                  *(_OWORD *)(v1578 + 160) = *(_OWORD *)(v1547 + v1692 + 160);
                  *(_OWORD *)(v1578 + 176) = v1582;
                  *(_OWORD *)(v1578 + 128) = v1584;
                  *(_OWORD *)(v1578 + 144) = v1583;
                  v1586 = *(_OWORD *)(v1547 + v1692 + 208);
                  v1585 = *(_OWORD *)(v1547 + v1692 + 224);
                  v1587 = *(_OWORD *)(v1547 + v1692 + 192);
                  *(_QWORD *)(v1578 + 240) = *(_QWORD *)(v1547 + v1692 + 240);
                  *(_OWORD *)(v1578 + 208) = v1586;
                  *(_OWORD *)(v1578 + 224) = v1585;
                  *(_OWORD *)(v1578 + 192) = v1587;
                  v1588 = *(_OWORD *)(v1547 + v1692);
                  v1589 = *(_OWORD *)(v1547 + v1692 + 16);
                  v1590 = *(_OWORD *)(v1547 + v1692 + 48);
                  *(_OWORD *)(v1578 + 32) = *(_OWORD *)(v1547 + v1692 + 32);
                  *(_OWORD *)(v1578 + 48) = v1590;
                  *(_OWORD *)v1578 = v1588;
                  *(_OWORD *)(v1578 + 16) = v1589;
                  v1591 = (_OWORD *)((v1546 + v1692 + 255) & 0xFFFFFFFFFFFFFFF8);
                  v1592 = (__int128 *)((v1547 + v1692 + 255) & 0xFFFFFFFFFFFFFFF8);
                  v1593 = *v1592;
                  *(_OWORD *)((char *)v1591 + 9) = *(__int128 *)((char *)v1592 + 9);
                  *v1591 = v1593;
                  v1594 = (v1546 + v1692 + 287) & 0xFFFFFFFFFFFFFFF8;
                  v1595 = (v1547 + v1692 + 287) & 0xFFFFFFFFFFFFFFF8;
                  v1596 = *(_OWORD *)v1595;
                  *(_BYTE *)(v1594 + 16) = *(_BYTE *)(v1595 + 16);
                  *(_OWORD *)v1594 = v1596;
                  v1597 = (_QWORD *)((v1546 + v1692 + 311) & 0xFFFFFFFFFFFFF8);
                  v1598 = (_QWORD *)((v1547 + v1692 + 311) & 0xFFFFFFFFFFFFF8);
                  *v1597 = *v1598;
                  *(_OWORD *)(((unint64_t)v1597 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1598
                                                                                                + 15) & 0xFFFFFFFFFFFFF8);
                  v1537 = v1678;
                  v298 = v1658;
                  v1536 = v1709;
                  v964 = (_OWORD *)(((unint64_t)a1 + v1636) & v1655);
                  if (!v1679)
                    goto LABEL_1800;
LABEL_1806:
                  v1599 = ((((v1535
                            + ((((((((((v1536 + v1537) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 19) & 0xFFFFFFFFFFFFFFF8)
                              + 25) & 0xFFFFFFFFFFFFFFF8)
                            + 327) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 16;
                  v1600 = (void *)(((unint64_t)v964 + v1750 + v1599) & v1688);
                  v1601 = (const void *)(((unint64_t)v961 + v1750 + v1599) & v1688);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1746 + 48))(v1601, 1, AssociatedTypeWitness))
                  {
                    memcpy(v1600, v1601, v1654);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v1746 + 32))(v1600, v1601, AssociatedTypeWitness);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1746 + 56))(v1600, 0, 1, AssociatedTypeWitness);
                  }
                  v466 = v1702;
                  v1602 = v1743;
                  v1603 = (char *)(((unint64_t)v1600 + v1634) & v1698);
                  v73 = ((unint64_t)v1601 + v1634) & v1698;
                  if (v1659 == v1666)
                  {
                    v1604 = (*(uint64_t (**)(uint64_t))(v1680 + 48))(v73);
                  }
                  else
                  {
                    v1605 = (uint64_t *)((v1684 + v73) & 0xFFFFFFFFFFFFFFF8);
                    if (v1645 <= 0x7FFFFFFE)
                    {
                      v1606 = *v1605;
                      if ((unint64_t)*v1605 >= 0xFFFFFFFF)
                        LODWORD(v1606) = -1;
                      if ((v1606 + 1) >= 2)
                        goto LABEL_1818;
                      goto LABEL_1820;
                    }
                    v1604 = (*(uint64_t (**)(unint64_t))(v1673 + 48))(((unint64_t)v1605 + v1672) & v1670);
                  }
                  if (v1604)
                  {
LABEL_1818:
                    memcpy(v1603, (const void *)v73, v1743);
LABEL_1821:
                    *(_QWORD *)&v1603[v1602] = *(_QWORD *)(v73 + v1602);
                    v1611 = (_QWORD *)((unint64_t)&v1603[v1602 + 15] & 0xFFFFFFFFFFFFF8);
                    v1612 = (_QWORD *)((v73 + v1602 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *v1611 = *v1612;
                    *(_QWORD *)(((unint64_t)v1611 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1612
                                                                                                  + 15) & 0xFFFFFFFFFFFFF8);
                    v977 = 1;
                    v1073 = v1647;
                    v976 = 1;
                    LODWORD(v73) = v1617;
                    goto LABEL_1621;
                  }
                  v1605 = (uint64_t *)((v1684 + v73) & 0xFFFFFFFFFFFFFFF8);
LABEL_1820:
                  (*(void (**)(char *, uint64_t, uint64_t))(v1680 + 32))(v1603, v73, v1681);
                  v1607 = (_QWORD *)((unint64_t)&v1603[v1684] & 0xFFFFFFFFFFFFFFF8);
                  *v1607 = *v1605;
                  v1608 = ((unint64_t)v1607 + v1672) & v1670;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1673 + 32))(v1608, ((unint64_t)v1605 + v1672) & v1670, v1674);
                  v1609 = v1668 + v1608;
                  v1602 = v1743;
                  v1609 &= 0xFFFFFFFFFFFFF8uLL;
                  v1610 = (_QWORD *)((v1668 + (((unint64_t)v1605 + v1672) & v1670)) & 0xFFFFFFFFFFFFF8);
                  *(_QWORD *)v1609 = *v1610;
                  *(_OWORD *)((v1609 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1610 + 15) & 0xFFFFFFFFFFFFF8);
                  goto LABEL_1821;
                }
                v1053 = ((unint64_t)v961 + v1686) & v1701;
                v1054 = (v1656 + v1053) & v1704;
                v963 = v1689;
                if (v1667 == v1661)
                {
                  v964 = (_OWORD *)(((unint64_t)a1 + v1636) & v1655);
                  if (v1660 == v1667)
                  {
                    v962 = (*(uint64_t (**)(unint64_t))(v1682 + 48))((v1656 + v1053) & v1704);
                    goto LABEL_1798;
                  }
                  v1453 = (unint64_t *)((v1685 + v1054) & 0xFFFFFFFFFFFFFFF8);
                  if (v1646 > 0x7FFFFFFE)
                  {
                    v962 = (*(uint64_t (**)(unint64_t))(v1676 + 48))(((unint64_t)v1453 + v1675) & v1671);
                    goto LABEL_1798;
                  }
                  v1454 = *v1453;
                }
                else
                {
                  v1115 = v1054 + v1689;
                  v964 = (_OWORD *)(((unint64_t)a1 + v1636) & v1655);
                  if ((v1642 & 0x80000000) == 0)
                  {
                    v1116 = *(_QWORD *)(v1115 + 8);
                    if (v1116 >= 0xFFFFFFFF)
                      LODWORD(v1116) = -1;
                    v962 = v1116 + 1;
                    goto LABEL_1798;
                  }
                  v1470 = (v1697 + ((v1744 + v1115) & v1696)) & v959;
                  if (v1679 > 0x7FFFFFFD)
                  {
                    v962 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v1470);
                    goto LABEL_1798;
                  }
                  v1454 = *(_QWORD *)(((v1664 + ((v1693 + v1470) & v959)) & 0xFFFFFFFFFFFFF8) + 8);
                }
                if (v1454 >= 0xFFFFFFFF)
                  LODWORD(v1454) = -1;
                if ((v1454 + 1) >= 2)
                  goto LABEL_1799;
                goto LABEL_1802;
              case 2:
                v965 = v73;
                (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v1747 + 32))(a1, a2, v77);
                v966 = (void *)(((unint64_t)a1 + v1630) & v1688);
                v967 = (const void *)(((unint64_t)a2 + v1630) & v1688);
                if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1746 + 48))(v967, 1, v81))
                {
                  memcpy(v966, v967, v1654);
                }
                else
                {
                  (*(void (**)(void *, const void *, uint64_t))(v1746 + 32))(v966, v967, v81);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1746 + 56))(v966, 0, 1, v81);
                }
                v1063 = v1743;
                v1064 = (char *)(((unint64_t)v966 + v1634) & v1698);
                v73 = ((unint64_t)v967 + v1634) & v1698;
                if (v1659 == v1666)
                {
                  v1065 = (*(uint64_t (**)(uint64_t))(v1680 + 48))(v73);
                }
                else
                {
                  v1066 = (uint64_t *)((v1684 + v73) & 0xFFFFFFFFFFFFFFF8);
                  if (v1645 <= 0x7FFFFFFE)
                  {
                    v1067 = *v1066;
                    if ((unint64_t)*v1066 >= 0xFFFFFFFF)
                      LODWORD(v1067) = -1;
                    if ((v1067 + 1) >= 2)
                      goto LABEL_1577;
                    goto LABEL_1579;
                  }
                  v1065 = (*(uint64_t (**)(unint64_t))(v1673 + 48))(((unint64_t)v1066 + v1672) & v1670);
                }
                if (v1065)
                {
LABEL_1577:
                  memcpy(v1064, (const void *)v73, v1743);
                  goto LABEL_1580;
                }
                v1066 = (uint64_t *)((v1684 + v73) & 0xFFFFFFFFFFFFFFF8);
LABEL_1579:
                (*(void (**)(char *, uint64_t, uint64_t))(v1680 + 32))(v1064, v73, v1681);
                v1226 = (_QWORD *)((unint64_t)&v1064[v1684] & 0xFFFFFFFFFFFFFFF8);
                *v1226 = *v1066;
                v1227 = ((unint64_t)v1226 + v1672) & v1670;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v1673 + 32))(v1227, ((unint64_t)v1066 + v1672) & v1670, v1674);
                v1228 = v1668 + v1227;
                v1063 = v1743;
                v1228 &= 0xFFFFFFFFFFFFF8uLL;
                v1229 = (_QWORD *)((v1668 + (((unint64_t)v1066 + v1672) & v1670)) & 0xFFFFFFFFFFFFF8);
                *(_QWORD *)v1228 = *v1229;
                *(_OWORD *)((v1228 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1229 + 15) & 0xFFFFFFFFFFFFF8);
LABEL_1580:
                v1230 = &v1064[v1063];
                *v1230 = *(_BYTE *)(v1063 + v73);
                *((_QWORD *)v1230 + 1) = *(_QWORD *)(v1063 + v73 + 8);
                v976 = 1;
                v977 = 2;
                v1073 = v1647;
                LODWORD(v73) = v965;
                goto LABEL_1620;
              case 3:
                v1710 = v1705 + 7;
                v968 = v79;
                v1616 = v73;
                v969 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(v1747 + 32);
                v969(a1, a2, v77);
                v970 = (_OWORD *)(((unint64_t)a1 + v1636) & v1655);
                v971 = (_OWORD *)(((unint64_t)a2 + v1636) & v1655);
                if (v1665 == v1661)
                {
                  v972 = (*(uint64_t (**)(unint64_t))(v1747 + 48))(((unint64_t)a2 + v1636) & v1655);
                  goto LABEL_1321;
                }
                v1055 = ((unint64_t)v971 + v1686) & v1701;
                v1056 = (v1656 + v1055) & v1704;
                if (v1667 == v1661)
                {
                  if (v1660 == v1667)
                  {
                    v972 = (*(uint64_t (**)(unint64_t))(v1682 + 48))((v1656 + v1055) & v1704);
                    goto LABEL_1321;
                  }
                  v1455 = (unint64_t *)((v1685 + v1056) & 0xFFFFFFFFFFFFFFF8);
                  if (v1646 <= 0x7FFFFFFE)
                  {
                    v1456 = *v1455;
                    goto LABEL_1867;
                  }
                  v972 = (*(uint64_t (**)(unint64_t))(v1676 + 48))(((unint64_t)v1455 + v1675) & v1671);
                }
                else
                {
                  v1117 = v1056 + v1689;
                  if ((v1642 & 0x80000000) == 0)
                  {
                    v1118 = *(_QWORD *)(v1117 + 8);
                    if (v1118 >= 0xFFFFFFFF)
                      LODWORD(v1118) = -1;
                    if ((_DWORD)v1118 != -1)
                      goto LABEL_1322;
LABEL_1551:
                    v1055 = ((unint64_t)v971 + v1686) & v1701;
                    v1056 = (v1656 + v1055) & v1704;
                    goto LABEL_1552;
                  }
                  v1471 = (v1697 + ((v1744 + v1117) & v1696)) & v968;
                  if (v1679 <= 0x7FFFFFFD)
                  {
                    v1456 = *(_QWORD *)(((v1664 + ((v1693 + v1471) & v968)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_1867:
                    if (v1456 >= 0xFFFFFFFF)
                      LODWORD(v1456) = -1;
                    if ((v1456 + 1) >= 2)
                      goto LABEL_1322;
LABEL_1552:
                    v969(v970, v971, v1735);
                    v1119 = ((unint64_t)v970 + v1686) & v1701;
                    v969((_OWORD *)v1119, (_OWORD *)v1055, v1735);
                    v1120 = (v1656 + v1119) & v1704;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1682 + 32))(v1120, v1056, v1683);
                    v1121 = (_QWORD *)((v1685 + v1120) & 0xFFFFFFFFFFFFFFF8);
                    v1122 = (_QWORD *)((v1685 + v1056) & 0xFFFFFFFFFFFFFFF8);
                    *v1121 = *v1122;
                    v1123 = ((unint64_t)v1121 + v1675) & v1671;
                    v1124 = ((unint64_t)v1122 + v1675) & v1671;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1676 + 32))(v1123, v1124, v1677);
                    v1125 = (_QWORD *)((v1669 + v1124) & 0xFFFFFFFFFFFFF8);
                    v1126 = (_QWORD *)((v1669 + v1123) & 0xFFFFFFFFFFFFF8);
                    *v1126 = *v1125;
                    *(_OWORD *)(((unint64_t)v1126 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1125
                                                                                                  + 15) & 0xFFFFFFFFFFFFF8);
                    *(_OWORD *)(v1120 + v1689) = *(_OWORD *)(v1056 + v1689);
                    v1127 = (v1744 + v1120 + v1689) & v1696;
                    v1128 = (v1744 + v1056 + v1689) & v1696;
                    *(_BYTE *)v1127 = *(_BYTE *)v1128;
                    v1129 = v1127 | 4;
                    v1130 = *(_DWORD *)(v1128 | 4);
                    *(_BYTE *)(v1129 + 4) = *(_BYTE *)((v1128 | 4) + 4);
                    *(_DWORD *)v1129 = v1130;
                    *(_WORD *)(v1127 + 10) = *(_WORD *)(v1128 + 0xA);
                    v1131 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1699 + 32);
                    v1131((v1697 + v1127) & v968, (v1697 + v1128) & v968, v1694);
                    v1132 = (v1693 + ((v1697 + v1127) & v968)) & v968;
                    v1133 = (v1693 + ((v1697 + v1128) & v968)) & v968;
                    v1131(v1132, v1133, v1694);
                    v1134 = (_BYTE *)(v1132 + v1678);
                    *v1134 = *(_BYTE *)(v1133 + v1678);
                    v1134[1] = *(_BYTE *)(v1133 + v1678 + 1);
                    v1134[2] = *(_BYTE *)(v1133 + v1678 + 2);
                    v1134[3] = *(_BYTE *)(v1133 + v1678 + 3);
                    v1134[4] = *(_BYTE *)(v1133 + v1678 + 4);
                    v1135 = (v1132 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
                    v1136 = (v1133 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_OWORD *)v1135 = *(_OWORD *)v1136;
                    *(_BYTE *)(v1135 + 16) = *(_BYTE *)(v1136 + 16);
                    *(_BYTE *)(v1135 + 17) = *(_BYTE *)(v1136 + 17);
                    *(_BYTE *)(v1135 + 18) = *(_BYTE *)(v1136 + 18);
                    *(_BYTE *)(v1135 + 19) = *(_BYTE *)(v1136 + 19);
                    v1137 = (v1135 + 27) & 0xFFFFFFFFFFFFFFF8;
                    v1138 = (v1136 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v1137 = *(_QWORD *)v1138;
                    *(_BYTE *)(v1137 + 8) = *(_BYTE *)(v1138 + 8);
                    *(_BYTE *)(v1137 + 9) = *(_BYTE *)(v1138 + 9);
                    *(_BYTE *)(v1137 + 10) = *(_BYTE *)(v1138 + 10);
                    *(_BYTE *)(v1137 + 11) = *(_BYTE *)(v1138 + 11);
                    *(_BYTE *)(v1137 + 12) = *(_BYTE *)(v1138 + 12);
                    v1139 = (_QWORD *)((v1135 + 47) & 0xFFFFFFFFFFFFF8);
                    v1140 = (_QWORD *)((v1136 + 47) & 0xFFFFFFFFFFFFF8);
                    *v1139 = *v1140;
                    v1141 = ((unint64_t)v1139 + 15) & 0xFFFFFFFFFFFFFFF8;
                    v1142 = ((unint64_t)v1140 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v1141 = *(_QWORD *)v1142;
                    *(_BYTE *)(v1141 + 8) = *(_BYTE *)(v1142 + 8);
                    *(_BYTE *)(v1141 + 9) = *(_BYTE *)(v1142 + 9);
                    v1143 = (void *)((v1690 + v1141) & v968);
                    v1144 = (const void *)((v1690 + v1142) & v968);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1699 + 48))(v1144, 1, v1694))
                    {
                      memcpy(v1143, v1144, v1745);
                    }
                    else
                    {
                      v1131((unint64_t)v1143, (unint64_t)v1144, v1694);
                      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1699 + 56))(v1143, 0, 1, v1694);
                    }
                    v298 = v1658;
                    v973 = v1644;
                    v1274 = (_QWORD *)(((unint64_t)v1143 + v1691) & 0xFFFFFFFFFFFFFFF8);
                    v1275 = (_QWORD *)(((unint64_t)v1144 + v1691) & 0xFFFFFFFFFFFFFFF8);
                    *v1274 = *v1275;
                    v1276 = ((unint64_t)v1274 + 15) & 0xFFFFFFFFFFFFFFF8;
                    v1277 = ((unint64_t)v1275 + 15) & 0xFFFFFFFFFFFFFFF8;
                    v1278 = *(_QWORD *)v1277;
                    *(_BYTE *)(v1276 + 8) = *(_BYTE *)(v1277 + 8);
                    *(_QWORD *)v1276 = v1278;
                    v1279 = (_QWORD *)(((unint64_t)v1274 + 31) & 0xFFFFFFFFFFFFF8);
                    v1280 = (_QWORD *)(((unint64_t)v1275 + 31) & 0xFFFFFFFFFFFFF8);
                    *v1279 = *v1280;
                    v1281 = (_OWORD *)(((unint64_t)v1279 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v1282 = (_OWORD *)(((unint64_t)v1280 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *v1281 = *v1282;
                    v1283 = ((unint64_t)v1281 + 19) & 0xFFFFFFFFFFFFFFF8;
                    v1284 = ((unint64_t)v1282 + 19) & 0xFFFFFFFFFFFFFFF8;
                    v1285 = *(_QWORD *)v1284;
                    *(_BYTE *)(v1283 + 8) = *(_BYTE *)(v1284 + 8);
                    *(_QWORD *)v1283 = v1285;
                    *(_BYTE *)(v1283 + 9) = *(_BYTE *)(v1284 + 9);
                    v1286 = (v1283 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    v1287 = (v1284 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    LODWORD(v1278) = *(_DWORD *)v1287;
                    *(_BYTE *)(v1286 + 4) = *(_BYTE *)(v1287 + 4);
                    *(_DWORD *)v1286 = v1278;
                    *(_OWORD *)((v1283 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v1284 + 25) & 0xFFFFFFFFFFFFF8);
                    v1288 = v1127 + v1692;
                    v1289 = *(_OWORD *)(v1128 + v1692 + 112);
                    v1291 = *(_OWORD *)(v1128 + v1692 + 64);
                    v1290 = *(_OWORD *)(v1128 + v1692 + 80);
                    *(_OWORD *)(v1288 + 96) = *(_OWORD *)(v1128 + v1692 + 96);
                    *(_OWORD *)(v1288 + 112) = v1289;
                    *(_OWORD *)(v1288 + 64) = v1291;
                    *(_OWORD *)(v1288 + 80) = v1290;
                    v1292 = *(_OWORD *)(v1128 + v1692 + 176);
                    v1294 = *(_OWORD *)(v1128 + v1692 + 128);
                    v1293 = *(_OWORD *)(v1128 + v1692 + 144);
                    *(_OWORD *)(v1288 + 160) = *(_OWORD *)(v1128 + v1692 + 160);
                    *(_OWORD *)(v1288 + 176) = v1292;
                    *(_OWORD *)(v1288 + 128) = v1294;
                    *(_OWORD *)(v1288 + 144) = v1293;
                    v1296 = *(_OWORD *)(v1128 + v1692 + 208);
                    v1295 = *(_OWORD *)(v1128 + v1692 + 224);
                    v1297 = *(_OWORD *)(v1128 + v1692 + 192);
                    *(_QWORD *)(v1288 + 240) = *(_QWORD *)(v1128 + v1692 + 240);
                    *(_OWORD *)(v1288 + 208) = v1296;
                    *(_OWORD *)(v1288 + 224) = v1295;
                    *(_OWORD *)(v1288 + 192) = v1297;
                    v1298 = *(_OWORD *)(v1128 + v1692);
                    v1299 = *(_OWORD *)(v1128 + v1692 + 16);
                    v1300 = *(_OWORD *)(v1128 + v1692 + 48);
                    *(_OWORD *)(v1288 + 32) = *(_OWORD *)(v1128 + v1692 + 32);
                    *(_OWORD *)(v1288 + 48) = v1300;
                    *(_OWORD *)v1288 = v1298;
                    *(_OWORD *)(v1288 + 16) = v1299;
                    v1301 = (_OWORD *)((v1127 + v1692 + 255) & 0xFFFFFFFFFFFFFFF8);
                    v1302 = (__int128 *)((v1128 + v1692 + 255) & 0xFFFFFFFFFFFFFFF8);
                    v1303 = *v1302;
                    *(_OWORD *)((char *)v1301 + 9) = *(__int128 *)((char *)v1302 + 9);
                    *v1301 = v1303;
                    v1304 = (v1127 + v1692 + 287) & 0xFFFFFFFFFFFFFFF8;
                    v1305 = (v1128 + v1692 + 287) & 0xFFFFFFFFFFFFFFF8;
                    v1306 = *(_OWORD *)v1305;
                    *(_BYTE *)(v1304 + 16) = *(_BYTE *)(v1305 + 16);
                    *(_OWORD *)v1304 = v1306;
                    v1307 = (_QWORD *)((v1127 + v1692 + 311) & 0xFFFFFFFFFFFFF8);
                    v1308 = (_QWORD *)((v1128 + v1692 + 311) & 0xFFFFFFFFFFFFF8);
                    *v1307 = *v1308;
                    *(_OWORD *)(((unint64_t)v1307 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1308
                                                                                                  + 15) & 0xFFFFFFFFFFFFF8);
                    v975 = v1678;
                    v974 = v1710;
                    v970 = (_OWORD *)(((unint64_t)a1 + v1636) & v1655);
                    if (v1679)
                    {
LABEL_1592:
                      v1309 = ((((v973
                                + ((((((((((v974 + v975) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 19) & 0xFFFFFFFFFFFFFFF8)
                                  + 25) & 0xFFFFFFFFFFFFFFF8)
                                + 327) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 16;
                      v1310 = (_OWORD *)(((unint64_t)v970 + v1309) & 0xFFFFFFFFFFFFFFF8);
                      v1311 = (_OWORD *)(((unint64_t)v971 + v1309) & 0xFFFFFFFFFFFFFFF8);
                      *v1310 = *v1311;
                      *(_QWORD *)(((unint64_t)v1310 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1311 + 23) & 0xFFFFFFFFFFFFF8);
                      v976 = 1;
                      v977 = 3;
LABEL_1593:
                      v1073 = v1647;
                      LODWORD(v73) = v1616;
LABEL_1620:
                      v466 = v1702;
                      goto LABEL_1621;
                    }
LABEL_1323:
                    v975 = v1745;
                    goto LABEL_1592;
                  }
                  v972 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v1471);
                }
LABEL_1321:
                if (v972)
                {
LABEL_1322:
                  memcpy(v970, v971, __na);
                  v973 = v1644;
                  v974 = v1710;
                  goto LABEL_1323;
                }
                goto LABEL_1551;
              case 4:
                (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v1747 + 32))(a1, a2, v77);
                v976 = 1;
                v977 = 4;
                goto LABEL_1498;
              case 5:
                (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v1747 + 32))(a1, a2, v77);
                v976 = 1;
                v977 = 5;
                goto LABEL_1498;
              case 6:
                (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v1747 + 32))(a1, a2, v77);
                v978 = (void *)(((unint64_t)a1 + v1629) & v1627);
                v979 = (const void *)(((unint64_t)a2 + v1629) & v1627);
                if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1632 + 48))(v979, 1, v1721))
                {
                  memcpy(v978, v979, v1625);
                  v976 = 1;
                }
                else
                {
                  (*(void (**)(void *, const void *, uint64_t))(v1632 + 32))(v978, v979, v1721);
                  v976 = 1;
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1632 + 56))(v978, 0, 1, v1721);
                }
                v977 = 6;
                goto LABEL_1498;
              case 7:
                (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v1747 + 32))(a1, a2, v77);
                v976 = 1;
                v977 = 7;
LABEL_1498:
                v1073 = v1647;
                goto LABEL_1620;
              default:
                if (v1647 <= 3)
                  v697 = v1647;
                else
                  v697 = 4;
                __asm { BR              X12 }
                return result;
            }
          }
          switch(*((_BYTE *)a2 + v1648))
          {
            case 0:
              v1717 = v1714 + 327;
              v1711 = v1705 + 7;
              v980 = v79;
              v1618 = v73;
              v981 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(v1746 + 32);
              v981(a1, a2, v81);
              v982 = (_OWORD *)(((unint64_t)a1 + v1637) & v1749);
              v983 = (_OWORD *)(((unint64_t)a2 + v1637) & v1749);
              if (v1741 == v1662)
              {
                v984 = (*(uint64_t (**)(unint64_t))(v1746 + 48))(((unint64_t)a2 + v1637) & v1749);
                goto LABEL_1332;
              }
              v1057 = ((unint64_t)v983 + v1687) & v1688;
              v1058 = (v1657 + v1057) & v1698;
              if (v1666 == v1662)
              {
                if (v1659 == v1666)
                {
                  v984 = (*(uint64_t (**)(unint64_t))(v1680 + 48))((v1657 + v1057) & v1698);
                  goto LABEL_1332;
                }
                v1457 = (unint64_t *)((v1684 + v1058) & 0xFFFFFFFFFFFFFFF8);
                if (v1645 <= 0x7FFFFFFE)
                {
                  v1458 = *v1457;
                  goto LABEL_1872;
                }
                v984 = (*(uint64_t (**)(unint64_t))(v1673 + 48))(((unint64_t)v1457 + v1672) & v1670);
              }
              else
              {
                v1145 = v1058 + v1743;
                if ((v1643 & 0x80000000) == 0)
                {
                  v1146 = *(_QWORD *)(v1145 + 8);
                  if (v1146 >= 0xFFFFFFFF)
                    LODWORD(v1146) = -1;
                  if ((_DWORD)v1146 != -1)
                    goto LABEL_1333;
LABEL_1558:
                  v1057 = ((unint64_t)v983 + v1687) & v1688;
                  v1058 = (v1657 + v1057) & v1698;
LABEL_1559:
                  v981(v982, v983, v81);
                  v981((_OWORD *)(((unint64_t)v982 + v1687) & v1688), (_OWORD *)v1057, v81);
                  v1147 = (v1657 + (((unint64_t)v982 + v1687) & v1688)) & v1698;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1680 + 32))(v1147, v1058, v1681);
                  v1148 = (_QWORD *)((v1684 + v1147) & 0xFFFFFFFFFFFFFFF8);
                  v1149 = (_QWORD *)((v1684 + v1058) & 0xFFFFFFFFFFFFFFF8);
                  *v1148 = *v1149;
                  v1150 = ((unint64_t)v1148 + v1672) & v1670;
                  v1151 = ((unint64_t)v1149 + v1672) & v1670;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1673 + 32))(v1150, v1151, v1674);
                  v1152 = (_QWORD *)((v1668 + v1151) & 0xFFFFFFFFFFFFF8);
                  v1153 = (_QWORD *)((v1668 + v1150) & 0xFFFFFFFFFFFFF8);
                  *v1153 = *v1152;
                  *(_OWORD *)(((unint64_t)v1153 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1152
                                                                                                + 15) & 0xFFFFFFFFFFFFF8);
                  *(_OWORD *)(v1147 + v1743) = *(_OWORD *)(v1058 + v1743);
                  v1154 = (v1744 + v1147 + v1743) & v1696;
                  v1155 = (v1744 + v1058 + v1743) & v1696;
                  *(_BYTE *)v1154 = *(_BYTE *)v1155;
                  v1156 = v1154 | 4;
                  v1157 = *(_DWORD *)(v1155 | 4);
                  *(_BYTE *)(v1156 + 4) = *(_BYTE *)((v1155 | 4) + 4);
                  *(_DWORD *)v1156 = v1157;
                  *(_WORD *)(v1154 + 10) = *(_WORD *)(v1155 + 0xA);
                  v1158 = *(void (**)(size_t, size_t, uint64_t))(v1699 + 32);
                  v1158((v1697 + v1154) & v980, (v1697 + v1155) & v980, v1694);
                  v1159 = (v1693 + ((v1697 + v1154) & v980)) & v980;
                  v1160 = (v1693 + ((v1697 + v1155) & v980)) & v980;
                  v1158(v1159, v1160, v1694);
                  v1161 = (_BYTE *)(v1159 + v1678);
                  *v1161 = *(_BYTE *)(v1160 + v1678);
                  v1161[1] = *(_BYTE *)(v1160 + v1678 + 1);
                  v1161[2] = *(_BYTE *)(v1160 + v1678 + 2);
                  v1161[3] = *(_BYTE *)(v1160 + v1678 + 3);
                  v1161[4] = *(_BYTE *)(v1160 + v1678 + 4);
                  v1162 = (v1159 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
                  v1163 = (v1160 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
                  *(_OWORD *)v1162 = *(_OWORD *)v1163;
                  *(_BYTE *)(v1162 + 16) = *(_BYTE *)(v1163 + 16);
                  *(_BYTE *)(v1162 + 17) = *(_BYTE *)(v1163 + 17);
                  *(_BYTE *)(v1162 + 18) = *(_BYTE *)(v1163 + 18);
                  *(_BYTE *)(v1162 + 19) = *(_BYTE *)(v1163 + 19);
                  v1164 = (v1162 + 27) & 0xFFFFFFFFFFFFFFF8;
                  v1165 = (v1163 + 27) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v1164 = *(_QWORD *)v1165;
                  *(_BYTE *)(v1164 + 8) = *(_BYTE *)(v1165 + 8);
                  *(_BYTE *)(v1164 + 9) = *(_BYTE *)(v1165 + 9);
                  *(_BYTE *)(v1164 + 10) = *(_BYTE *)(v1165 + 10);
                  *(_BYTE *)(v1164 + 11) = *(_BYTE *)(v1165 + 11);
                  *(_BYTE *)(v1164 + 12) = *(_BYTE *)(v1165 + 12);
                  v1166 = (_QWORD *)((v1162 + 47) & 0xFFFFFFFFFFFFF8);
                  v1167 = (_QWORD *)((v1163 + 47) & 0xFFFFFFFFFFFFF8);
                  *v1166 = *v1167;
                  v1168 = ((unint64_t)v1166 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1169 = ((unint64_t)v1167 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v1168 = *(_QWORD *)v1169;
                  *(_BYTE *)(v1168 + 8) = *(_BYTE *)(v1169 + 8);
                  *(_BYTE *)(v1168 + 9) = *(_BYTE *)(v1169 + 9);
                  v1170 = (void *)((v1690 + v1168) & v980);
                  v1171 = (const void *)((v1690 + v1169) & v980);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1699 + 48))(v1171, 1, v1694))
                  {
                    memcpy(v1170, v1171, v1745);
                  }
                  else
                  {
                    v1158((size_t)v1170, (size_t)v1171, v1694);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1699 + 56))(v1170, 0, 1, v1694);
                  }
                  v298 = v1658;
                  v1312 = (_QWORD *)(((unint64_t)v1170 + v1691) & 0xFFFFFFFFFFFFFFF8);
                  v1313 = (_QWORD *)(((unint64_t)v1171 + v1691) & 0xFFFFFFFFFFFFFFF8);
                  *v1312 = *v1313;
                  v1314 = ((unint64_t)v1312 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1315 = ((unint64_t)v1313 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1316 = *(_QWORD *)v1315;
                  *(_BYTE *)(v1314 + 8) = *(_BYTE *)(v1315 + 8);
                  *(_QWORD *)v1314 = v1316;
                  v1317 = (_QWORD *)(((unint64_t)v1312 + 31) & 0xFFFFFFFFFFFFF8);
                  v1318 = (_QWORD *)(((unint64_t)v1313 + 31) & 0xFFFFFFFFFFFFF8);
                  *v1317 = *v1318;
                  v1319 = (_OWORD *)(((unint64_t)v1317 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v1320 = (_OWORD *)(((unint64_t)v1318 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v1319 = *v1320;
                  v1321 = ((unint64_t)v1319 + 19) & 0xFFFFFFFFFFFFFFF8;
                  v1322 = ((unint64_t)v1320 + 19) & 0xFFFFFFFFFFFFFFF8;
                  v1323 = *(_QWORD *)v1322;
                  *(_BYTE *)(v1321 + 8) = *(_BYTE *)(v1322 + 8);
                  *(_QWORD *)v1321 = v1323;
                  *(_BYTE *)(v1321 + 9) = *(_BYTE *)(v1322 + 9);
                  v1324 = (v1321 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  v1325 = (v1322 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  LODWORD(v1316) = *(_DWORD *)v1325;
                  *(_BYTE *)(v1324 + 4) = *(_BYTE *)(v1325 + 4);
                  *(_DWORD *)v1324 = v1316;
                  *(_OWORD *)((v1321 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v1322 + 25) & 0xFFFFFFFFFFFFF8);
                  v1326 = v1692 + v1154;
                  v1327 = *(_OWORD *)(v1692 + v1155 + 112);
                  v1329 = *(_OWORD *)(v1692 + v1155 + 64);
                  v1328 = *(_OWORD *)(v1692 + v1155 + 80);
                  *(_OWORD *)(v1326 + 96) = *(_OWORD *)(v1692 + v1155 + 96);
                  *(_OWORD *)(v1326 + 112) = v1327;
                  *(_OWORD *)(v1326 + 64) = v1329;
                  *(_OWORD *)(v1326 + 80) = v1328;
                  v1330 = *(_OWORD *)(v1692 + v1155 + 176);
                  v1332 = *(_OWORD *)(v1692 + v1155 + 128);
                  v1331 = *(_OWORD *)(v1692 + v1155 + 144);
                  *(_OWORD *)(v1326 + 160) = *(_OWORD *)(v1692 + v1155 + 160);
                  *(_OWORD *)(v1326 + 176) = v1330;
                  *(_OWORD *)(v1326 + 128) = v1332;
                  *(_OWORD *)(v1326 + 144) = v1331;
                  v1334 = *(_OWORD *)(v1692 + v1155 + 208);
                  v1333 = *(_OWORD *)(v1692 + v1155 + 224);
                  v1335 = *(_OWORD *)(v1692 + v1155 + 192);
                  *(_QWORD *)(v1326 + 240) = *(_QWORD *)(v1692 + v1155 + 240);
                  *(_OWORD *)(v1326 + 208) = v1334;
                  *(_OWORD *)(v1326 + 224) = v1333;
                  *(_OWORD *)(v1326 + 192) = v1335;
                  v1336 = *(_OWORD *)(v1692 + v1155);
                  v1337 = *(_OWORD *)(v1692 + v1155 + 16);
                  v1338 = *(_OWORD *)(v1692 + v1155 + 48);
                  *(_OWORD *)(v1326 + 32) = *(_OWORD *)(v1692 + v1155 + 32);
                  *(_OWORD *)(v1326 + 48) = v1338;
                  *(_OWORD *)v1326 = v1336;
                  *(_OWORD *)(v1326 + 16) = v1337;
                  v1339 = (_OWORD *)((v1692 + v1154 + 255) & 0xFFFFFFFFFFFFFFF8);
                  v1340 = (__int128 *)((v1692 + v1155 + 255) & 0xFFFFFFFFFFFFFFF8);
                  v1341 = *v1340;
                  *(_OWORD *)((char *)v1339 + 9) = *(__int128 *)((char *)v1340 + 9);
                  *v1339 = v1341;
                  v1342 = (v1692 + v1154 + 287) & 0xFFFFFFFFFFFFFFF8;
                  v1343 = (v1692 + v1155 + 287) & 0xFFFFFFFFFFFFFFF8;
                  v1344 = *(_OWORD *)v1343;
                  *(_BYTE *)(v1342 + 16) = *(_BYTE *)(v1343 + 16);
                  *(_OWORD *)v1342 = v1344;
                  v1345 = (_QWORD *)((v1692 + v1154 + 311) & 0xFFFFFFFFFFFFF8);
                  v1346 = (_QWORD *)((v1692 + v1155 + 311) & 0xFFFFFFFFFFFFF8);
                  *v1345 = *v1346;
                  *(_OWORD *)(((unint64_t)v1345 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1346
                                                                                                + 15) & 0xFFFFFFFFFFFFF8);
                  v987 = v1678;
                  v985 = v1711;
                  v986 = v1717;
                  v982 = (_OWORD *)(((unint64_t)a1 + v1637) & v1749);
                  if (!v1679)
                    goto LABEL_1334;
LABEL_1596:
                  v977 = 0;
                  v976 = 0;
                  v1347 = ((((v986
                            + ((((((((((v985 + v987) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 19) & 0xFFFFFFFFFFFFFFF8)
                              + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 16;
                  v1348 = (_QWORD *)(((unint64_t)v982 + v1347) & 0xFFFFFFFFFFFFFFF8);
                  v1349 = (_QWORD *)(((unint64_t)v983 + v1347) & 0xFFFFFFFFFFFFFFF8);
                  *v1348 = *v1349;
                  *(_QWORD *)(((unint64_t)v1348 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1349
                                                                                                + 15) & 0xFFFFFFFFFFFFF8);
                  goto LABEL_1618;
                }
                v1472 = (v1697 + ((v1744 + v1145) & v1696)) & v980;
                if (v1679 <= 0x7FFFFFFD)
                {
                  v1458 = *(_QWORD *)(((v1664 + ((v1693 + v1472) & v980)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_1872:
                  if (v1458 >= 0xFFFFFFFF)
                    LODWORD(v1458) = -1;
                  if ((v1458 + 1) >= 2)
                    goto LABEL_1333;
                  goto LABEL_1559;
                }
                v984 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v1472);
              }
LABEL_1332:
              if (v984)
              {
LABEL_1333:
                memcpy(v982, v983, v1756);
                v985 = v1711;
                v986 = v1717;
LABEL_1334:
                v987 = v1745;
                goto LABEL_1596;
              }
              goto LABEL_1558;
            case 1:
              v1718 = v1714 + 327;
              v1712 = v1705 + 7;
              v1619 = v73;
              v988 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(v1746 + 32);
              v988(a1, a2, v81);
              v989 = (_OWORD *)(((unint64_t)a1 + v1637) & v1749);
              v990 = (_OWORD *)(((unint64_t)a2 + v1637) & v1749);
              if (v1741 == v1662)
              {
                v991 = (*(uint64_t (**)(_OWORD *))(v1746 + 48))(v990);
                goto LABEL_1337;
              }
              v1059 = ((unint64_t)v990 + v1687) & v1688;
              v1060 = (v1657 + v1059) & v1698;
              if (v1666 == v1662)
              {
                if (v1659 == v1666)
                {
                  v991 = (*(uint64_t (**)(unint64_t))(v1680 + 48))((v1657 + v1059) & v1698);
                  goto LABEL_1337;
                }
                v1459 = (unint64_t *)((v1684 + v1060) & 0xFFFFFFFFFFFFFFF8);
                if (v1645 <= 0x7FFFFFFE)
                {
                  v1460 = *v1459;
                  goto LABEL_1877;
                }
                v991 = (*(uint64_t (**)(unint64_t))(v1673 + 48))(((unint64_t)v1459 + v1672) & v1670);
              }
              else
              {
                v1172 = v1060 + v1743;
                if ((v1643 & 0x80000000) == 0)
                {
                  v1173 = *(_QWORD *)(v1172 + 8);
                  if (v1173 >= 0xFFFFFFFF)
                    LODWORD(v1173) = -1;
                  if ((_DWORD)v1173 != -1)
                    goto LABEL_1338;
LABEL_1565:
                  v1059 = ((unint64_t)v990 + v1687) & v1688;
                  v1060 = (v1657 + v1059) & v1698;
                  goto LABEL_1566;
                }
                v1473 = (v1697 + ((v1744 + v1172) & v1696)) & v79;
                if (v1679 <= 0x7FFFFFFD)
                {
                  v1460 = *(_QWORD *)(((v1664 + ((v1693 + v1473) & v79)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_1877:
                  if (v1460 >= 0xFFFFFFFF)
                    LODWORD(v1460) = -1;
                  if ((v1460 + 1) >= 2)
                    goto LABEL_1338;
LABEL_1566:
                  v988(v989, v990, v81);
                  v988((_OWORD *)(((unint64_t)v989 + v1687) & v1688), (_OWORD *)v1059, v81);
                  v1174 = (v1657 + (((unint64_t)v989 + v1687) & v1688)) & v1698;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1680 + 32))(v1174, v1060, v1681);
                  v1175 = (_QWORD *)((v1684 + v1174) & 0xFFFFFFFFFFFFFFF8);
                  v1176 = (_QWORD *)((v1684 + v1060) & 0xFFFFFFFFFFFFFFF8);
                  *v1175 = *v1176;
                  v1177 = ((unint64_t)v1175 + v1672) & v1670;
                  v1178 = ((unint64_t)v1176 + v1672) & v1670;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1673 + 32))(v1177, v1178, v1674);
                  v1179 = (_QWORD *)((v1668 + v1178) & 0xFFFFFFFFFFFFF8);
                  v1180 = (_QWORD *)((v1668 + v1177) & 0xFFFFFFFFFFFFF8);
                  *v1180 = *v1179;
                  *(_OWORD *)(((unint64_t)v1180 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1179
                                                                                                + 15) & 0xFFFFFFFFFFFFF8);
                  *(_OWORD *)(v1174 + v1743) = *(_OWORD *)(v1060 + v1743);
                  v1181 = (v1744 + v1174 + v1743) & v1696;
                  v1182 = (v1744 + v1060 + v1743) & v1696;
                  *(_BYTE *)v1181 = *(_BYTE *)v1182;
                  v1183 = v1181 | 4;
                  v1184 = *(_DWORD *)(v1182 | 4);
                  *(_BYTE *)(v1183 + 4) = *(_BYTE *)((v1182 | 4) + 4);
                  *(_DWORD *)v1183 = v1184;
                  *(_WORD *)(v1181 + 10) = *(_WORD *)(v1182 + 0xA);
                  v1185 = *(void (**)(size_t, size_t, uint64_t))(v1699 + 32);
                  v1185((v1697 + v1181) & v79, (v1697 + v1182) & v79, v1694);
                  v1186 = (v1693 + ((v1697 + v1181) & v79)) & v79;
                  v1187 = (v1693 + ((v1697 + v1182) & v79)) & v79;
                  v1185(v1186, v1187, v1694);
                  v1188 = (_BYTE *)(v1186 + v1678);
                  *v1188 = *(_BYTE *)(v1187 + v1678);
                  v1188[1] = *(_BYTE *)(v1187 + v1678 + 1);
                  v1188[2] = *(_BYTE *)(v1187 + v1678 + 2);
                  v1188[3] = *(_BYTE *)(v1187 + v1678 + 3);
                  v1188[4] = *(_BYTE *)(v1187 + v1678 + 4);
                  v1189 = (v1186 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
                  v1190 = (v1187 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
                  *(_OWORD *)v1189 = *(_OWORD *)v1190;
                  *(_BYTE *)(v1189 + 16) = *(_BYTE *)(v1190 + 16);
                  *(_BYTE *)(v1189 + 17) = *(_BYTE *)(v1190 + 17);
                  *(_BYTE *)(v1189 + 18) = *(_BYTE *)(v1190 + 18);
                  *(_BYTE *)(v1189 + 19) = *(_BYTE *)(v1190 + 19);
                  v1191 = (v1189 + 27) & 0xFFFFFFFFFFFFFFF8;
                  v1192 = (v1190 + 27) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v1191 = *(_QWORD *)v1192;
                  *(_BYTE *)(v1191 + 8) = *(_BYTE *)(v1192 + 8);
                  *(_BYTE *)(v1191 + 9) = *(_BYTE *)(v1192 + 9);
                  *(_BYTE *)(v1191 + 10) = *(_BYTE *)(v1192 + 10);
                  *(_BYTE *)(v1191 + 11) = *(_BYTE *)(v1192 + 11);
                  *(_BYTE *)(v1191 + 12) = *(_BYTE *)(v1192 + 12);
                  v1193 = (_QWORD *)((v1189 + 47) & 0xFFFFFFFFFFFFF8);
                  v1194 = (_QWORD *)((v1190 + 47) & 0xFFFFFFFFFFFFF8);
                  *v1193 = *v1194;
                  v1195 = ((unint64_t)v1193 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1196 = ((unint64_t)v1194 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v1195 = *(_QWORD *)v1196;
                  *(_BYTE *)(v1195 + 8) = *(_BYTE *)(v1196 + 8);
                  *(_BYTE *)(v1195 + 9) = *(_BYTE *)(v1196 + 9);
                  v1197 = (void *)((v1690 + v1195) & v79);
                  v1198 = (const void *)((v1690 + v1196) & v79);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1699 + 48))(v1198, 1, v1694))
                  {
                    memcpy(v1197, v1198, v1745);
                  }
                  else
                  {
                    v1185((size_t)v1197, (size_t)v1198, v1694);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1699 + 56))(v1197, 0, 1, v1694);
                  }
                  v1350 = (_QWORD *)(((unint64_t)v1197 + v1691) & 0xFFFFFFFFFFFFFFF8);
                  v1351 = (_QWORD *)(((unint64_t)v1198 + v1691) & 0xFFFFFFFFFFFFFFF8);
                  *v1350 = *v1351;
                  v1352 = ((unint64_t)v1350 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1353 = ((unint64_t)v1351 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1354 = *(_QWORD *)v1353;
                  *(_BYTE *)(v1352 + 8) = *(_BYTE *)(v1353 + 8);
                  *(_QWORD *)v1352 = v1354;
                  v1355 = (_QWORD *)(((unint64_t)v1350 + 31) & 0xFFFFFFFFFFFFF8);
                  v1356 = (_QWORD *)(((unint64_t)v1351 + 31) & 0xFFFFFFFFFFFFF8);
                  *v1355 = *v1356;
                  v1357 = (_OWORD *)(((unint64_t)v1355 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v1358 = (_OWORD *)(((unint64_t)v1356 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v1357 = *v1358;
                  v1359 = ((unint64_t)v1357 + 19) & 0xFFFFFFFFFFFFFFF8;
                  v1360 = ((unint64_t)v1358 + 19) & 0xFFFFFFFFFFFFFFF8;
                  v1361 = *(_QWORD *)v1360;
                  *(_BYTE *)(v1359 + 8) = *(_BYTE *)(v1360 + 8);
                  *(_QWORD *)v1359 = v1361;
                  *(_BYTE *)(v1359 + 9) = *(_BYTE *)(v1360 + 9);
                  v1362 = (v1359 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  v1363 = (v1360 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  LODWORD(v1354) = *(_DWORD *)v1363;
                  *(_BYTE *)(v1362 + 4) = *(_BYTE *)(v1363 + 4);
                  *(_DWORD *)v1362 = v1354;
                  *(_OWORD *)((v1359 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v1360 + 25) & 0xFFFFFFFFFFFFF8);
                  v1364 = v1692 + v1181;
                  v1365 = *(_OWORD *)(v1692 + v1182 + 112);
                  v1367 = *(_OWORD *)(v1692 + v1182 + 64);
                  v1366 = *(_OWORD *)(v1692 + v1182 + 80);
                  *(_OWORD *)(v1364 + 96) = *(_OWORD *)(v1692 + v1182 + 96);
                  *(_OWORD *)(v1364 + 112) = v1365;
                  *(_OWORD *)(v1364 + 64) = v1367;
                  *(_OWORD *)(v1364 + 80) = v1366;
                  v1368 = *(_OWORD *)(v1692 + v1182 + 176);
                  v1370 = *(_OWORD *)(v1692 + v1182 + 128);
                  v1369 = *(_OWORD *)(v1692 + v1182 + 144);
                  *(_OWORD *)(v1364 + 160) = *(_OWORD *)(v1692 + v1182 + 160);
                  *(_OWORD *)(v1364 + 176) = v1368;
                  *(_OWORD *)(v1364 + 128) = v1370;
                  *(_OWORD *)(v1364 + 144) = v1369;
                  v1372 = *(_OWORD *)(v1692 + v1182 + 208);
                  v1371 = *(_OWORD *)(v1692 + v1182 + 224);
                  v1373 = *(_OWORD *)(v1692 + v1182 + 192);
                  *(_QWORD *)(v1364 + 240) = *(_QWORD *)(v1692 + v1182 + 240);
                  *(_OWORD *)(v1364 + 208) = v1372;
                  *(_OWORD *)(v1364 + 224) = v1371;
                  *(_OWORD *)(v1364 + 192) = v1373;
                  v1374 = *(_OWORD *)(v1692 + v1182);
                  v1375 = *(_OWORD *)(v1692 + v1182 + 16);
                  v1376 = *(_OWORD *)(v1692 + v1182 + 48);
                  *(_OWORD *)(v1364 + 32) = *(_OWORD *)(v1692 + v1182 + 32);
                  *(_OWORD *)(v1364 + 48) = v1376;
                  *(_OWORD *)v1364 = v1374;
                  *(_OWORD *)(v1364 + 16) = v1375;
                  v1377 = (_OWORD *)((v1692 + v1181 + 255) & 0xFFFFFFFFFFFFFFF8);
                  v1378 = (__int128 *)((v1692 + v1182 + 255) & 0xFFFFFFFFFFFFFFF8);
                  v1379 = *v1378;
                  *(_OWORD *)((char *)v1377 + 9) = *(__int128 *)((char *)v1378 + 9);
                  *v1377 = v1379;
                  v1380 = (v1692 + v1181 + 287) & 0xFFFFFFFFFFFFFFF8;
                  v1381 = (v1692 + v1182 + 287) & 0xFFFFFFFFFFFFFFF8;
                  v1382 = *(_OWORD *)v1381;
                  *(_BYTE *)(v1380 + 16) = *(_BYTE *)(v1381 + 16);
                  *(_OWORD *)v1380 = v1382;
                  v1383 = (_QWORD *)((v1692 + v1181 + 311) & 0xFFFFFFFFFFFFF8);
                  v1384 = (_QWORD *)((v1692 + v1182 + 311) & 0xFFFFFFFFFFFFF8);
                  *v1383 = *v1384;
                  *(_OWORD *)(((unint64_t)v1383 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1384
                                                                                                + 15) & 0xFFFFFFFFFFFFF8);
                  v466 = v1702;
                  v994 = v1678;
                  v298 = v1658;
                  v992 = v1712;
                  v993 = v1718;
                  v989 = (_OWORD *)(((unint64_t)a1 + v1637) & v1749);
                  if (!v1679)
                    goto LABEL_1339;
LABEL_1599:
                  v1385 = ((((v993
                            + ((((((((((v992 + v994) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 19) & 0xFFFFFFFFFFFFFFF8)
                              + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 16;
                  v1386 = (void *)(((unint64_t)v989 + v1720 + v1385) & v1701);
                  v1387 = (const void *)(((unint64_t)v990 + v1720 + v1385) & v1701);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1747 + 48))(v1387, 1, v1735))
                  {
                    memcpy(v1386, v1387, v1638);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v1747 + 32))(v1386, v1387, v1735);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1747 + 56))(v1386, 0, 1, v1735);
                  }
                  v1388 = (char *)(((unint64_t)v1386 + v1635) & v1704);
                  v73 = ((unint64_t)v1387 + v1635) & v1704;
                  if (v1660 == v1667)
                  {
                    v1389 = (*(uint64_t (**)(unint64_t))(v1682 + 48))(((unint64_t)v1387 + v1635) & v1704);
                    v1390 = v1689;
                  }
                  else
                  {
                    v1391 = (uint64_t *)((v1685 + v73) & 0xFFFFFFFFFFFFFFF8);
                    v1390 = v1689;
                    if (v1646 <= 0x7FFFFFFE)
                    {
                      v1392 = *v1391;
                      if ((unint64_t)*v1391 >= 0xFFFFFFFF)
                        LODWORD(v1392) = -1;
                      if ((v1392 + 1) >= 2)
                        goto LABEL_1611;
                      goto LABEL_1613;
                    }
                    v1389 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v1676 + 48))(((unint64_t)v1391 + v1675) & v1671, v1640, v1677);
                  }
                  if (v1389)
                  {
LABEL_1611:
                    memcpy(v1388, (const void *)v73, v1390);
LABEL_1614:
                    v976 = 0;
                    *(_QWORD *)&v1388[v1390] = *(_QWORD *)(v73 + v1390);
                    v1397 = (_QWORD *)((unint64_t)&v1388[v1390 + 15] & 0xFFFFFFFFFFFFF8);
                    v1398 = (_QWORD *)((v73 + v1390 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *v1397 = *v1398;
                    *(_QWORD *)(((unint64_t)v1397 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1398
                                                                                                  + 15) & 0xFFFFFFFFFFFFF8);
                    v977 = 1;
                    LODWORD(v73) = v1619;
                    v1073 = v1648;
LABEL_1621:
                    *((_BYTE *)a1 + v1073) = v977;
                    *((_BYTE *)a1 + v298) = v976;
                    if (v73 > 3)
                    {
LABEL_1622:
                      *(_BYTE *)v466 = 27;
                      return a1;
                    }
                    v1437 = ((1 << (8 * v73)) + 5) >> (8 * v73);
                    if (v1437 <= 0xFFD8)
                    {
                      if (v1437 > 0xD8)
                      {
                        *(_WORD *)v466 = 27;
                        return a1;
                      }
                      goto LABEL_1622;
                    }
                    v500 = 27;
LABEL_1627:
                    *v466 = v500;
                    return a1;
                  }
                  v1391 = (uint64_t *)((v1685 + v73) & 0xFFFFFFFFFFFFFFF8);
LABEL_1613:
                  (*(void (**)(char *, uint64_t, uint64_t))(v1682 + 32))(v1388, v73, v1683);
                  v1393 = (_QWORD *)((unint64_t)&v1388[v1685] & 0xFFFFFFFFFFFFFFF8);
                  *v1393 = *v1391;
                  v1394 = ((unint64_t)v1393 + v1675) & v1671;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1676 + 32))(v1394, ((unint64_t)v1391 + v1675) & v1671, v1677);
                  v1395 = v1669 + v1394;
                  v1390 = v1689;
                  v1395 &= 0xFFFFFFFFFFFFF8uLL;
                  v1396 = (_QWORD *)((v1669 + (((unint64_t)v1391 + v1675) & v1671)) & 0xFFFFFFFFFFFFF8);
                  *(_QWORD *)v1395 = *v1396;
                  *(_OWORD *)((v1395 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1396 + 15) & 0xFFFFFFFFFFFFF8);
                  goto LABEL_1614;
                }
                v991 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v1473);
              }
LABEL_1337:
              if (v991)
              {
LABEL_1338:
                memcpy(v989, v990, v1756);
                v466 = v1702;
                v992 = v1712;
                v993 = v1718;
LABEL_1339:
                v994 = v1745;
                goto LABEL_1599;
              }
              goto LABEL_1565;
            case 2:
              v995 = v73;
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v1746 + 32))(a1, a2, v81);
              v996 = (void *)(((unint64_t)a1 + v1663) & v1701);
              v997 = (const void *)(((unint64_t)a2 + v1663) & v1701);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1747 + 48))(v997, 1, v77))
              {
                memcpy(v996, v997, v1638);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v1747 + 32))(v996, v997, v77);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1747 + 56))(v996, 0, 1, v77);
              }
              v1068 = v1689;
              v1069 = (char *)(((unint64_t)v996 + v1635) & v1704);
              v73 = ((unint64_t)v997 + v1635) & v1704;
              if (v1660 == v1667)
              {
                v1070 = (*(uint64_t (**)(uint64_t))(v1682 + 48))(v73);
              }
              else
              {
                v1071 = (uint64_t *)((v1685 + v73) & 0xFFFFFFFFFFFFFFF8);
                if (v1646 <= 0x7FFFFFFE)
                {
                  v1072 = *v1071;
                  if ((unint64_t)*v1071 >= 0xFFFFFFFF)
                    LODWORD(v1072) = -1;
                  if ((v1072 + 1) >= 2)
                    goto LABEL_1583;
                  goto LABEL_1585;
                }
                v1070 = (*(uint64_t (**)(unint64_t))(v1676 + 48))(((unint64_t)v1071 + v1675) & v1671);
              }
              if (v1070)
              {
LABEL_1583:
                memcpy(v1069, (const void *)v73, v1689);
                goto LABEL_1586;
              }
              v1071 = (uint64_t *)((v1685 + v73) & 0xFFFFFFFFFFFFFFF8);
LABEL_1585:
              (*(void (**)(char *, uint64_t, uint64_t))(v1682 + 32))(v1069, v73, v1683);
              v1231 = (_QWORD *)((unint64_t)&v1069[v1685] & 0xFFFFFFFFFFFFFFF8);
              *v1231 = *v1071;
              v1232 = ((unint64_t)v1231 + v1675) & v1671;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1676 + 32))(v1232, ((unint64_t)v1071 + v1675) & v1671, v1677);
              v1233 = v1669 + v1232;
              v1068 = v1689;
              v1233 &= 0xFFFFFFFFFFFFF8uLL;
              v1234 = (_QWORD *)((v1669 + (((unint64_t)v1071 + v1675) & v1671)) & 0xFFFFFFFFFFFFF8);
              *(_QWORD *)v1233 = *v1234;
              *(_OWORD *)((v1233 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1234 + 15) & 0xFFFFFFFFFFFFF8);
LABEL_1586:
              v976 = 0;
              v1235 = &v1069[v1068];
              *v1235 = *(_BYTE *)(v1068 + v73);
              *((_QWORD *)v1235 + 1) = *(_QWORD *)(v1068 + v73 + 8);
              v977 = 2;
              LODWORD(v73) = v995;
              goto LABEL_1619;
            case 3:
              v1719 = v1714 + 327;
              v1713 = v1705 + 7;
              v998 = v79;
              v1618 = v73;
              v999 = *(void (**)(_OWORD *, _OWORD *, uint64_t))(v1746 + 32);
              v999(a1, a2, v81);
              v1000 = (_OWORD *)(((unint64_t)a1 + v1637) & v1749);
              v1001 = (_OWORD *)(((unint64_t)a2 + v1637) & v1749);
              if (v1741 == v1662)
              {
                v1002 = (*(uint64_t (**)(unint64_t))(v1746 + 48))(((unint64_t)a2 + v1637) & v1749);
                goto LABEL_1344;
              }
              v1061 = ((unint64_t)v1001 + v1687) & v1688;
              v1062 = (v1657 + v1061) & v1698;
              if (v1666 == v1662)
              {
                if (v1659 == v1666)
                {
                  v1002 = (*(uint64_t (**)(unint64_t))(v1680 + 48))((v1657 + v1061) & v1698);
                  goto LABEL_1344;
                }
                v1461 = (unint64_t *)((v1684 + v1062) & 0xFFFFFFFFFFFFFFF8);
                if (v1645 <= 0x7FFFFFFE)
                {
                  v1462 = *v1461;
                  goto LABEL_1882;
                }
                v1002 = (*(uint64_t (**)(unint64_t))(v1673 + 48))(((unint64_t)v1461 + v1672) & v1670);
              }
              else
              {
                v1199 = v1062 + v1743;
                if ((v1643 & 0x80000000) == 0)
                {
                  v1200 = *(_QWORD *)(v1199 + 8);
                  if (v1200 >= 0xFFFFFFFF)
                    LODWORD(v1200) = -1;
                  if ((_DWORD)v1200 != -1)
                    goto LABEL_1345;
LABEL_1572:
                  v1061 = ((unint64_t)v1001 + v1687) & v1688;
                  v1062 = (v1657 + v1061) & v1698;
                  goto LABEL_1573;
                }
                v1474 = (v1697 + ((v1744 + v1199) & v1696)) & v998;
                if (v1679 <= 0x7FFFFFFD)
                {
                  v1462 = *(_QWORD *)(((v1664 + ((v1693 + v1474) & v998)) & 0xFFFFFFFFFFFFF8) + 8);
LABEL_1882:
                  if (v1462 >= 0xFFFFFFFF)
                    LODWORD(v1462) = -1;
                  if ((v1462 + 1) >= 2)
                    goto LABEL_1345;
LABEL_1573:
                  v999(v1000, v1001, v81);
                  v999((_OWORD *)(((unint64_t)v1000 + v1687) & v1688), (_OWORD *)v1061, v81);
                  v1201 = (v1657 + (((unint64_t)v1000 + v1687) & v1688)) & v1698;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1680 + 32))(v1201, v1062, v1681);
                  v1202 = (_QWORD *)((v1684 + v1201) & 0xFFFFFFFFFFFFFFF8);
                  v1203 = (_QWORD *)((v1684 + v1062) & 0xFFFFFFFFFFFFFFF8);
                  *v1202 = *v1203;
                  v1204 = ((unint64_t)v1202 + v1672) & v1670;
                  v1205 = ((unint64_t)v1203 + v1672) & v1670;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1673 + 32))(v1204, v1205, v1674);
                  v1206 = (_QWORD *)((v1668 + v1205) & 0xFFFFFFFFFFFFF8);
                  v1207 = (_QWORD *)((v1668 + v1204) & 0xFFFFFFFFFFFFF8);
                  *v1207 = *v1206;
                  *(_OWORD *)(((unint64_t)v1207 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1206
                                                                                                + 15) & 0xFFFFFFFFFFFFF8);
                  *(_OWORD *)(v1201 + v1743) = *(_OWORD *)(v1062 + v1743);
                  v1208 = (v1744 + v1201 + v1743) & v1696;
                  v1209 = (v1744 + v1062 + v1743) & v1696;
                  *(_BYTE *)v1208 = *(_BYTE *)v1209;
                  v1210 = v1208 | 4;
                  v1211 = *(_DWORD *)(v1209 | 4);
                  *(_BYTE *)(v1210 + 4) = *(_BYTE *)((v1209 | 4) + 4);
                  *(_DWORD *)v1210 = v1211;
                  *(_WORD *)(v1208 + 10) = *(_WORD *)(v1209 + 0xA);
                  v1212 = *(void (**)(size_t, size_t, uint64_t))(v1699 + 32);
                  v1212((v1697 + v1208) & v998, (v1697 + v1209) & v998, v1694);
                  v1213 = (v1693 + ((v1697 + v1208) & v998)) & v998;
                  v1214 = (v1693 + ((v1697 + v1209) & v998)) & v998;
                  v1212(v1213, v1214, v1694);
                  v1215 = (_BYTE *)(v1213 + v1678);
                  *v1215 = *(_BYTE *)(v1214 + v1678);
                  v1215[1] = *(_BYTE *)(v1214 + v1678 + 1);
                  v1215[2] = *(_BYTE *)(v1214 + v1678 + 2);
                  v1215[3] = *(_BYTE *)(v1214 + v1678 + 3);
                  v1215[4] = *(_BYTE *)(v1214 + v1678 + 4);
                  v1216 = (v1213 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
                  v1217 = (v1214 + v1678 + 12) & 0xFFFFFFFFFFFFFFF8;
                  *(_OWORD *)v1216 = *(_OWORD *)v1217;
                  *(_BYTE *)(v1216 + 16) = *(_BYTE *)(v1217 + 16);
                  *(_BYTE *)(v1216 + 17) = *(_BYTE *)(v1217 + 17);
                  *(_BYTE *)(v1216 + 18) = *(_BYTE *)(v1217 + 18);
                  *(_BYTE *)(v1216 + 19) = *(_BYTE *)(v1217 + 19);
                  v1218 = (v1216 + 27) & 0xFFFFFFFFFFFFFFF8;
                  v1219 = (v1217 + 27) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v1218 = *(_QWORD *)v1219;
                  *(_BYTE *)(v1218 + 8) = *(_BYTE *)(v1219 + 8);
                  *(_BYTE *)(v1218 + 9) = *(_BYTE *)(v1219 + 9);
                  *(_BYTE *)(v1218 + 10) = *(_BYTE *)(v1219 + 10);
                  *(_BYTE *)(v1218 + 11) = *(_BYTE *)(v1219 + 11);
                  *(_BYTE *)(v1218 + 12) = *(_BYTE *)(v1219 + 12);
                  v1220 = (_QWORD *)((v1216 + 47) & 0xFFFFFFFFFFFFF8);
                  v1221 = (_QWORD *)((v1217 + 47) & 0xFFFFFFFFFFFFF8);
                  *v1220 = *v1221;
                  v1222 = ((unint64_t)v1220 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1223 = ((unint64_t)v1221 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v1222 = *(_QWORD *)v1223;
                  *(_BYTE *)(v1222 + 8) = *(_BYTE *)(v1223 + 8);
                  *(_BYTE *)(v1222 + 9) = *(_BYTE *)(v1223 + 9);
                  v1224 = (void *)((v1690 + v1222) & v998);
                  v1225 = (const void *)((v1690 + v1223) & v998);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1699 + 48))(v1225, 1, v1694))
                  {
                    memcpy(v1224, v1225, v1745);
                  }
                  else
                  {
                    v1212((size_t)v1224, (size_t)v1225, v1694);
                    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1699 + 56))(v1224, 0, 1, v1694);
                  }
                  v298 = v1658;
                  v1399 = (_QWORD *)(((unint64_t)v1224 + v1691) & 0xFFFFFFFFFFFFFFF8);
                  v1400 = (_QWORD *)(((unint64_t)v1225 + v1691) & 0xFFFFFFFFFFFFFFF8);
                  *v1399 = *v1400;
                  v1401 = ((unint64_t)v1399 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1402 = ((unint64_t)v1400 + 15) & 0xFFFFFFFFFFFFFFF8;
                  v1403 = *(_QWORD *)v1402;
                  *(_BYTE *)(v1401 + 8) = *(_BYTE *)(v1402 + 8);
                  *(_QWORD *)v1401 = v1403;
                  v1404 = (_QWORD *)(((unint64_t)v1399 + 31) & 0xFFFFFFFFFFFFF8);
                  v1405 = (_QWORD *)(((unint64_t)v1400 + 31) & 0xFFFFFFFFFFFFF8);
                  *v1404 = *v1405;
                  v1406 = (_OWORD *)(((unint64_t)v1404 + 15) & 0xFFFFFFFFFFFFFFF8);
                  v1407 = (_OWORD *)(((unint64_t)v1405 + 15) & 0xFFFFFFFFFFFFFFF8);
                  *v1406 = *v1407;
                  v1408 = ((unint64_t)v1406 + 19) & 0xFFFFFFFFFFFFFFF8;
                  v1409 = ((unint64_t)v1407 + 19) & 0xFFFFFFFFFFFFFFF8;
                  v1410 = *(_QWORD *)v1409;
                  *(_BYTE *)(v1408 + 8) = *(_BYTE *)(v1409 + 8);
                  *(_QWORD *)v1408 = v1410;
                  *(_BYTE *)(v1408 + 9) = *(_BYTE *)(v1409 + 9);
                  v1411 = (v1408 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  v1412 = (v1409 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  LODWORD(v1403) = *(_DWORD *)v1412;
                  *(_BYTE *)(v1411 + 4) = *(_BYTE *)(v1412 + 4);
                  *(_DWORD *)v1411 = v1403;
                  *(_OWORD *)((v1408 + 25) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((v1409 + 25) & 0xFFFFFFFFFFFFF8);
                  v1413 = v1692 + v1208;
                  v1414 = *(_OWORD *)(v1692 + v1209 + 112);
                  v1416 = *(_OWORD *)(v1692 + v1209 + 64);
                  v1415 = *(_OWORD *)(v1692 + v1209 + 80);
                  *(_OWORD *)(v1413 + 96) = *(_OWORD *)(v1692 + v1209 + 96);
                  *(_OWORD *)(v1413 + 112) = v1414;
                  *(_OWORD *)(v1413 + 64) = v1416;
                  *(_OWORD *)(v1413 + 80) = v1415;
                  v1417 = *(_OWORD *)(v1692 + v1209 + 176);
                  v1419 = *(_OWORD *)(v1692 + v1209 + 128);
                  v1418 = *(_OWORD *)(v1692 + v1209 + 144);
                  *(_OWORD *)(v1413 + 160) = *(_OWORD *)(v1692 + v1209 + 160);
                  *(_OWORD *)(v1413 + 176) = v1417;
                  *(_OWORD *)(v1413 + 128) = v1419;
                  *(_OWORD *)(v1413 + 144) = v1418;
                  v1421 = *(_OWORD *)(v1692 + v1209 + 208);
                  v1420 = *(_OWORD *)(v1692 + v1209 + 224);
                  v1422 = *(_OWORD *)(v1692 + v1209 + 192);
                  *(_QWORD *)(v1413 + 240) = *(_QWORD *)(v1692 + v1209 + 240);
                  *(_OWORD *)(v1413 + 208) = v1421;
                  *(_OWORD *)(v1413 + 224) = v1420;
                  *(_OWORD *)(v1413 + 192) = v1422;
                  v1423 = *(_OWORD *)(v1692 + v1209);
                  v1424 = *(_OWORD *)(v1692 + v1209 + 16);
                  v1425 = *(_OWORD *)(v1692 + v1209 + 48);
                  *(_OWORD *)(v1413 + 32) = *(_OWORD *)(v1692 + v1209 + 32);
                  *(_OWORD *)(v1413 + 48) = v1425;
                  *(_OWORD *)v1413 = v1423;
                  *(_OWORD *)(v1413 + 16) = v1424;
                  v1426 = (_OWORD *)((v1692 + v1208 + 255) & 0xFFFFFFFFFFFFFFF8);
                  v1427 = (__int128 *)((v1692 + v1209 + 255) & 0xFFFFFFFFFFFFFFF8);
                  v1428 = *v1427;
                  *(_OWORD *)((char *)v1426 + 9) = *(__int128 *)((char *)v1427 + 9);
                  *v1426 = v1428;
                  v1429 = (v1692 + v1208 + 287) & 0xFFFFFFFFFFFFFFF8;
                  v1430 = (v1692 + v1209 + 287) & 0xFFFFFFFFFFFFFFF8;
                  v1431 = *(_OWORD *)v1430;
                  *(_BYTE *)(v1429 + 16) = *(_BYTE *)(v1430 + 16);
                  *(_OWORD *)v1429 = v1431;
                  v1432 = (_QWORD *)((v1692 + v1208 + 311) & 0xFFFFFFFFFFFFF8);
                  v1433 = (_QWORD *)((v1692 + v1209 + 311) & 0xFFFFFFFFFFFFF8);
                  *v1432 = *v1433;
                  *(_OWORD *)(((unint64_t)v1432 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1433
                                                                                                + 15) & 0xFFFFFFFFFFFFF8);
                  v1005 = v1678;
                  v1003 = v1713;
                  v1004 = v1719;
                  v1000 = (_OWORD *)(((unint64_t)a1 + v1637) & v1749);
                  if (v1679)
                  {
LABEL_1617:
                    v976 = 0;
                    v1434 = ((((v1004
                              + ((((((((((v1003 + v1005) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 19) & 0xFFFFFFFFFFFFFFF8)
                                + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 16;
                    v1435 = (_OWORD *)(((unint64_t)v1000 + v1434) & 0xFFFFFFFFFFFFFFF8);
                    v1436 = (_OWORD *)(((unint64_t)v1001 + v1434) & 0xFFFFFFFFFFFFFFF8);
                    *v1435 = *v1436;
                    *(_QWORD *)(((unint64_t)v1435 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v1436
                                                                                                  + 23) & 0xFFFFFFFFFFFFF8);
                    v977 = 3;
LABEL_1618:
                    LODWORD(v73) = v1618;
LABEL_1619:
                    v1073 = v1648;
                    goto LABEL_1620;
                  }
LABEL_1346:
                  v1005 = v1745;
                  goto LABEL_1617;
                }
                v1002 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v1474);
              }
LABEL_1344:
              if (v1002)
              {
LABEL_1345:
                memcpy(v1000, v1001, v1756);
                v1003 = v1713;
                v1004 = v1719;
                goto LABEL_1346;
              }
              goto LABEL_1572;
            case 4:
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v1746 + 32))(a1, a2, v81);
              v976 = 0;
              v977 = 4;
              goto LABEL_1619;
            case 5:
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v1746 + 32))(a1, a2, v81);
              v976 = 0;
              v977 = 5;
              goto LABEL_1619;
            case 6:
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v1746 + 32))(a1, a2, v81);
              v1006 = (void *)(((unint64_t)a1 + v1631) & v1628);
              v1007 = (const void *)(((unint64_t)a2 + v1631) & v1628);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1633 + 48))(v1007, 1, v1723))
              {
                memcpy(v1006, v1007, v1626);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v1633 + 32))(v1006, v1007, v1723);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1633 + 56))(v1006, 0, 1, v1723);
              }
              v976 = 0;
              v977 = 6;
              goto LABEL_1619;
            case 7:
              (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v1746 + 32))(a1, a2, v81);
              v976 = 0;
              v977 = 7;
              goto LABEL_1619;
            default:
              if (v1648 <= 3)
                v698 = v1648;
              else
                v698 = 4;
              __asm { BR              X12 }
              return result;
          }
        case 0x1Cu:
          v301 = *((unsigned __int8 *)a2 + v1760);
          if (v301 >= 2)
          {
            if (v1760 <= 3)
              v302 = v1760;
            else
              v302 = 4;
            __asm { BR              X12 }
          }
          v699 = v301 == 1;
          if (v301 == 1)
            v700 = v1747;
          else
            v700 = v1746;
          if (v301 == 1)
            v701 = v77;
          else
            v701 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v700 + 32))(a1, a2, v701);
          *((_BYTE *)a1 + v1760) = v699;
          *((_BYTE *)a1 + v1759) = *((_BYTE *)a2 + v1759);
          if (v73 > 3)
            goto LABEL_1020;
          v702 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v702 > 0xFFD8)
          {
            *v1702 = 28;
          }
          else if (v702 <= 0xD8)
          {
LABEL_1020:
            *(_BYTE *)v1702 = 28;
          }
          else
          {
            *(_WORD *)v1702 = 28;
          }
          return a1;
        case 0x1Du:
          v303 = *((unsigned __int8 *)a2 + v1760);
          if (v303 >= 2)
          {
            if (v1760 <= 3)
              v304 = v1760;
            else
              v304 = 4;
            __asm { BR              X12 }
          }
          v703 = v303 == 1;
          if (v303 == 1)
            v704 = v1747;
          else
            v704 = v1746;
          if (v303 == 1)
            v705 = v77;
          else
            v705 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v704 + 32))(a1, a2, v705);
          *((_BYTE *)a1 + v1760) = v703;
          if (v73 > 3)
            goto LABEL_1032;
          v706 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v706 > 0xFFD8)
          {
            *v1702 = 29;
          }
          else if (v706 <= 0xD8)
          {
LABEL_1032:
            *(_BYTE *)v1702 = 29;
          }
          else
          {
            *(_WORD *)v1702 = 29;
          }
          return a1;
        case 0x1Eu:
          v305 = *((unsigned __int8 *)a2 + v1760);
          if (v305 >= 2)
          {
            if (v1760 <= 3)
              v306 = v1760;
            else
              v306 = 4;
            __asm { BR              X12 }
          }
          v707 = v305 == 1;
          if (v305 == 1)
            v708 = v1747;
          else
            v708 = v1746;
          if (v305 == 1)
            v709 = v77;
          else
            v709 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v708 + 32))(a1, a2, v709);
          *((_BYTE *)a1 + v1760) = v707;
          if (v73 > 3)
            goto LABEL_1044;
          v710 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v710 > 0xFFD8)
          {
            *v1702 = 30;
          }
          else if (v710 <= 0xD8)
          {
LABEL_1044:
            *(_BYTE *)v1702 = 30;
          }
          else
          {
            *(_WORD *)v1702 = 30;
          }
          return a1;
        case 0x1Fu:
          v307 = *((unsigned __int8 *)a2 + v1760);
          if (v307 >= 2)
          {
            if (v1760 <= 3)
              v308 = v1760;
            else
              v308 = 4;
            __asm { BR              X12 }
          }
          v711 = v307 == 1;
          if (v307 == 1)
            v712 = v1747;
          else
            v712 = v1746;
          if (v307 == 1)
            v713 = v77;
          else
            v713 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v712 + 32))(a1, a2, v713);
          *((_BYTE *)a1 + v1760) = v711;
          v714 = *(unsigned __int8 *)((((unint64_t)a2 + v1695) & v1700) + v1760);
          if (v714 >= 2)
          {
            if (v1760 <= 3)
              v715 = v1760;
            else
              v715 = 4;
            __asm { BR              X12 }
          }
          v743 = v714 == 1;
          if (v714 == 1)
            v744 = v1747;
          else
            v744 = v1746;
          (*(void (**)(unint64_t))(v744 + 32))(((unint64_t)a1 + v1695) & v1700);
          *(_BYTE *)((((unint64_t)a1 + v1695) & v1700) + v1760) = v743;
          if (v73 > 3)
            goto LABEL_1145;
          v745 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v745 > 0xFFD8)
          {
            *v1702 = 31;
          }
          else if (v745 <= 0xD8)
          {
LABEL_1145:
            *(_BYTE *)v1702 = 31;
          }
          else
          {
            *(_WORD *)v1702 = 31;
          }
          return a1;
        case 0x20u:
          v309 = *((unsigned __int8 *)a2 + v1760);
          if (v309 >= 2)
          {
            if (v1760 <= 3)
              v310 = v1760;
            else
              v310 = 4;
            __asm { BR              X12 }
          }
          v716 = v309 == 1;
          if (v309 == 1)
            v717 = v1747;
          else
            v717 = v1746;
          if (v309 == 1)
            v718 = v77;
          else
            v718 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v717 + 32))(a1, a2, v718);
          *((_BYTE *)a1 + v1760) = v716;
          if (v73 > 3)
            goto LABEL_1067;
          v719 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v719 > 0xFFD8)
          {
            *v1702 = 32;
          }
          else if (v719 <= 0xD8)
          {
LABEL_1067:
            *(_BYTE *)v1702 = 32;
          }
          else
          {
            *(_WORD *)v1702 = 32;
          }
          return a1;
        case 0x21u:
          v311 = *((unsigned __int8 *)a2 + v1760);
          if (v311 >= 2)
          {
            if (v1760 <= 3)
              v312 = v1760;
            else
              v312 = 4;
            __asm { BR              X12 }
          }
          v720 = v311 == 1;
          if (v311 == 1)
            v721 = v1747;
          else
            v721 = v1746;
          if (v311 == 1)
            v722 = v77;
          else
            v722 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v721 + 32))(a1, a2, v722);
          *((_BYTE *)a1 + v1760) = v720;
          if (v73 > 3)
            goto LABEL_1079;
          v723 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v723 > 0xFFD8)
          {
            *v1702 = 33;
          }
          else if (v723 <= 0xD8)
          {
LABEL_1079:
            *(_BYTE *)v1702 = 33;
          }
          else
          {
            *(_WORD *)v1702 = 33;
          }
          return a1;
        case 0x22u:
          v313 = *((unsigned __int8 *)a2 + v1760);
          if (v313 >= 2)
          {
            if (v1760 <= 3)
              v314 = v1760;
            else
              v314 = 4;
            __asm { BR              X12 }
          }
          v724 = v313 == 1;
          if (v313 == 1)
            v725 = v1747;
          else
            v725 = v1746;
          if (v313 == 1)
            v726 = v77;
          else
            v726 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v725 + 32))(a1, a2, v726);
          *((_BYTE *)a1 + v1760) = v724;
          if (v73 > 3)
            goto LABEL_1091;
          v727 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v727 > 0xFFD8)
          {
            *v1702 = 34;
          }
          else if (v727 <= 0xD8)
          {
LABEL_1091:
            *(_BYTE *)v1702 = 34;
          }
          else
          {
            *(_WORD *)v1702 = 34;
          }
          return a1;
        case 0x23u:
          v315 = *((unsigned __int8 *)a2 + v1760);
          if (v315 >= 2)
          {
            if (v1760 <= 3)
              v316 = v1760;
            else
              v316 = 4;
            __asm { BR              X12 }
          }
          v728 = v315 == 1;
          if (v315 == 1)
            v729 = v1747;
          else
            v729 = v1746;
          if (v315 == 1)
            v730 = v77;
          else
            v730 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v729 + 32))(a1, a2, v730);
          *((_BYTE *)a1 + v1760) = v728;
          if (v73 > 3)
            goto LABEL_1103;
          v731 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v731 > 0xFFD8)
          {
            *v1702 = 35;
          }
          else if (v731 <= 0xD8)
          {
LABEL_1103:
            *(_BYTE *)v1702 = 35;
          }
          else
          {
            *(_WORD *)v1702 = 35;
          }
          return a1;
        case 0x24u:
          v317 = v73;
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v1746 + 48))(a2, 1, v81))
          {
            v318 = v1654;
            memcpy(a1, a2, v1654);
            v319 = v1743;
          }
          else
          {
            (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v1746 + 32))(a1, a2, v81);
            (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v1746 + 56))(a1, 0, 1, v81);
            v319 = v1743;
            v318 = v1654;
          }
          v335 = (_QWORD *)(((unint64_t)a1 + v318 + 7) & 0xFFFFFFFFFFFFF8);
          v336 = (_QWORD *)(((unint64_t)a2 + v318 + 7) & 0xFFFFFFFFFFFFFFF8);
          *v335 = *v336;
          v337 = ((unint64_t)v335 + 15) & 0xFFFFFFFFFFFFFFF8;
          v338 = ((unint64_t)v336 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v337 = *(_QWORD *)v338;
          *(_BYTE *)(v337 + 8) = *(_BYTE *)(v338 + 8);
          v339 = v338 + v1757;
          v340 = (void *)((v337 + v1757 + 9) & v1698);
          v341 = (const void *)((v339 + 9) & v1698);
          if (v1659 == v1666)
          {
            v342 = (*(uint64_t (**)(uint64_t))(v1680 + 48))((v339 + 9) & v1698);
          }
          else
          {
            v343 = (uint64_t *)(((unint64_t)v341 + v1684) & 0xFFFFFFFFFFFFFFF8);
            if (v1645 <= 0x7FFFFFFE)
            {
              v344 = *v343;
              if ((unint64_t)*v343 >= 0xFFFFFFFF)
                LODWORD(v344) = -1;
              if ((v344 + 1) >= 2)
                goto LABEL_700;
              goto LABEL_702;
            }
            v342 = (*(uint64_t (**)(unint64_t))(v1673 + 48))(((unint64_t)v343 + v1672) & v1670);
          }
          if (v342)
          {
LABEL_700:
            memcpy(v340, v341, v319);
            goto LABEL_703;
          }
          v343 = (uint64_t *)(((unint64_t)v341 + v1684) & 0xFFFFFFFFFFFFFFF8);
LABEL_702:
          (*(void (**)(void *, const void *, uint64_t))(v1680 + 32))(v340, v341, v1681);
          v450 = (_QWORD *)(((unint64_t)v340 + v1684) & 0xFFFFFFFFFFFFFFF8);
          *v450 = *v343;
          v451 = ((unint64_t)v450 + v1672) & v1670;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1673 + 32))(v451, ((unint64_t)v343 + v1672) & v1670, v1674);
          v452 = v1668 + v451;
          v319 = v1743;
          v452 &= 0xFFFFFFFFFFFFF8uLL;
          v453 = (_QWORD *)((v1668 + (((unint64_t)v343 + v1672) & v1670)) & 0xFFFFFFFFFFFFF8);
          *(_QWORD *)v452 = *v453;
          *(_OWORD *)((v452 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v453 + 15) & 0xFFFFFFFFFFFFF8);
LABEL_703:
          v454 = (uint64_t)v341 + v319 + 10;
          *((_BYTE *)v340 + v319) = *((_BYTE *)v341 + v319);
          *(_BYTE *)(((unint64_t)v340 + v319) | 1) = *(_BYTE *)(((unint64_t)v341 + v319) | 1);
          *(_BYTE *)(((unint64_t)v340 + v319) | 2) = *(_BYTE *)(((unint64_t)v341 + v319) | 2);
          v455 = ((unint64_t)v340 + v319 + 10) & 0xFFFFFFFFFFFFFFF8;
          v456 = *(_OWORD *)(v454 & 0xFFFFFFFFFFFFFFF8);
          *(_BYTE *)(v455 + 16) = *(_BYTE *)((v454 & 0xFFFFFFFFFFFFFFF8) + 16);
          *(_OWORD *)v455 = v456;
          v457 = ((unint64_t)v340 + v319 + 34) & 0xFFFFFFFFFFFFFFF8;
          v458 = ((unint64_t)v341 + v319 + 34) & 0xFFFFFFFFFFFFFFF8;
          v459 = *(_OWORD *)v458;
          v460 = *(_OWORD *)(v458 + 16);
          v461 = *(_OWORD *)(v458 + 32);
          *(_QWORD *)(v457 + 48) = *(_QWORD *)(v458 + 48);
          *(_OWORD *)(v457 + 16) = v460;
          *(_OWORD *)(v457 + 32) = v461;
          *(_OWORD *)v457 = v459;
          v462 = (_QWORD *)((v458 + 63) & 0xFFFFFFFFFFFFF8);
          v463 = (_QWORD *)((v457 + 63) & 0xFFFFFFFFFFFFF8);
          *v463 = *v462;
          *(_QWORD *)(((unint64_t)v463 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v462 + 15) & 0xFFFFFFFFFFFFF8);
          v464 = (void *)(((unint64_t)a1 + v1650) & v1649);
          v465 = (const void *)(((unint64_t)a2 + v1650) & v1649);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1747 + 48))(v465, 1, v77))
          {
            memcpy(v464, v465, v1638);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v1747 + 32))(v464, v465, v77);
            (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v1747 + 56))(v464, 0, 1, v77);
          }
          v466 = v1702;
          v467 = (_QWORD *)(((unint64_t)v464 + v1651) & 0xFFFFFFFFFFFFF8);
          v468 = (_QWORD *)(((unint64_t)v465 + v1651) & 0xFFFFFFFFFFFFFFF8);
          *v467 = *v468;
          v469 = ((unint64_t)v467 + 15) & 0xFFFFFFFFFFFFFFF8;
          v470 = ((unint64_t)v468 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v469 = *(_QWORD *)v470;
          *(_BYTE *)(v469 + 8) = *(_BYTE *)(v470 + 8);
          v471 = (void *)((v1652 + v469) & v1704);
          v472 = (const void *)((v1652 + v470) & v1704);
          if (v1660 == v1667)
          {
            v473 = (*(uint64_t (**)(unint64_t))(v1682 + 48))((v1652 + v470) & v1704);
          }
          else
          {
            v474 = (uint64_t *)(((unint64_t)v472 + v1685) & 0xFFFFFFFFFFFFFFF8);
            if (v1646 <= 0x7FFFFFFE)
            {
              v475 = *v474;
              if ((unint64_t)*v474 >= 0xFFFFFFFF)
                LODWORD(v475) = -1;
              if ((v475 + 1) >= 2)
                goto LABEL_718;
              goto LABEL_720;
            }
            v473 = (*(uint64_t (**)(unint64_t))(v1676 + 48))(((unint64_t)v474 + v1675) & v1671);
          }
          if (v473)
          {
LABEL_718:
            v477 = v1689;
            memcpy(v471, v472, v1689);
            goto LABEL_721;
          }
          v474 = (uint64_t *)(((unint64_t)v472 + v1685) & 0xFFFFFFFFFFFFFFF8);
LABEL_720:
          (*(void (**)(void *, const void *, uint64_t))(v1682 + 32))(v471, v472, v1683);
          v478 = (_QWORD *)(((unint64_t)v471 + v1685) & 0xFFFFFFFFFFFFFFF8);
          *v478 = *v474;
          v479 = ((unint64_t)v478 + v1675) & v1671;
          v480 = ((unint64_t)v474 + v1675) & v1671;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1676 + 32))(v479, v480, v1677);
          v481 = (_QWORD *)((v1669 + v479) & 0xFFFFFFFFFFFFF8);
          v466 = v1702;
          v482 = (_QWORD *)((v1669 + v480) & 0xFFFFFFFFFFFFF8);
          *v481 = *v482;
          *(_OWORD *)(((unint64_t)v481 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v482 + 15) & 0xFFFFFFFFFFFFF8);
          v477 = v1689;
LABEL_721:
          *((_BYTE *)v471 + v477) = *((_BYTE *)v472 + v477);
          *(_BYTE *)(((unint64_t)v471 + v477) | 1) = *(_BYTE *)(((unint64_t)v472 + v477) | 1);
          *(_BYTE *)(((unint64_t)v471 + v477) | 2) = *(_BYTE *)(((unint64_t)v472 + v477) | 2);
          v483 = ((unint64_t)v471 + v477 + 10) & 0xFFFFFFFFFFFFFFF8;
          v484 = ((unint64_t)v472 + v477 + 10) & 0xFFFFFFFFFFFFFFF8;
          v485 = *(_OWORD *)v484;
          *(_BYTE *)(v483 + 16) = *(_BYTE *)(v484 + 16);
          *(_OWORD *)v483 = v485;
          v486 = ((unint64_t)v471 + v477 + 34) & 0xFFFFFFFFFFFFFFF8;
          v487 = ((unint64_t)v472 + v477 + 34) & 0xFFFFFFFFFFFFFFF8;
          v488 = *(_OWORD *)v487;
          v489 = *(_OWORD *)(v487 + 16);
          v490 = *(_OWORD *)(v487 + 32);
          *(_QWORD *)(v486 + 48) = *(_QWORD *)(v487 + 48);
          *(_OWORD *)(v486 + 16) = v489;
          *(_OWORD *)(v486 + 32) = v490;
          *(_OWORD *)v486 = v488;
          v491 = (_QWORD *)((v487 + 63) & 0xFFFFFFFFFFFFF8);
          v492 = (_QWORD *)((v486 + 63) & 0xFFFFFFFFFFFFF8);
          *v492 = *v491;
          *(_QWORD *)(((unint64_t)v492 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v491 + 15) & 0xFFFFFFFFFFFFF8);
          *((_BYTE *)v464 + v1653) = *((_BYTE *)v465 + v1653);
          v493 = ((unint64_t)v464 + v1653) & 0xFFFFFFFFFFFFFFF8;
          v494 = ((unint64_t)v465 + v1653) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v493 + 8) = *(_QWORD *)(v494 + 8);
          v495 = (_OWORD *)((v493 + 23) & 0xFFFFFFFFFFFFFFF8);
          v496 = (_OWORD *)((v494 + 23) & 0xFFFFFFFFFFFFFFF8);
          *v495 = *v496;
          v497 = ((unint64_t)v495 + 23) & 0xFFFFFFFFFFFFFFF8;
          v498 = ((unint64_t)v496 + 23) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v497 = *(_QWORD *)v498;
          *(_BYTE *)(v497 + 8) = *(_BYTE *)(v498 + 8);
          *(_QWORD *)(((unint64_t)v495 + 39) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v496 + 39) & 0xFFFFFFFFFFFFF8);
          if (v317 > 3)
            goto LABEL_722;
          v499 = ((1 << (8 * v317)) + 5) >> (8 * v317);
          if (v499 > 0xFFD8)
          {
            v500 = 36;
            goto LABEL_1627;
          }
          if (v499 <= 0xD8)
LABEL_722:
            *(_BYTE *)v466 = 36;
          else
            *(_WORD *)v466 = 36;
          break;
        case 0x25u:
          v320 = *((unsigned __int8 *)a2 + v1760);
          if (v320 >= 2)
          {
            if (v1760 <= 3)
              v321 = v1760;
            else
              v321 = 4;
            __asm { BR              X12 }
          }
          v732 = v320 == 1;
          if (v320 == 1)
            v733 = v1747;
          else
            v733 = v1746;
          if (v320 == 1)
            v734 = v77;
          else
            v734 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v733 + 32))(a1, a2, v734);
          *((_BYTE *)a1 + v1760) = v732;
          *((_BYTE *)a1 + v1759) = *((_BYTE *)a2 + v1759);
          if (v73 > 3)
            goto LABEL_1115;
          v735 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v735 > 0xFFD8)
          {
            *v1702 = 37;
          }
          else if (v735 <= 0xD8)
          {
LABEL_1115:
            *(_BYTE *)v1702 = 37;
          }
          else
          {
            *(_WORD *)v1702 = 37;
          }
          return a1;
        case 0x26u:
          v322 = *((unsigned __int8 *)a2 + v1760);
          if (v322 >= 2)
          {
            if (v1760 <= 3)
              v323 = v1760;
            else
              v323 = 4;
            __asm { BR              X12 }
          }
          v736 = v322 == 1;
          if (v322 == 1)
            v737 = v1747;
          else
            v737 = v1746;
          if (v322 == 1)
            v738 = v77;
          else
            v738 = v81;
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v737 + 32))(a1, a2, v738);
          *((_BYTE *)a1 + v1760) = v736;
          if (v73 > 3)
            goto LABEL_1127;
          v739 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          if (v739 > 0xFFD8)
          {
            *v1702 = 38;
          }
          else if (v739 <= 0xD8)
          {
LABEL_1127:
            *(_BYTE *)v1702 = 38;
          }
          else
          {
            *(_WORD *)v1702 = 38;
          }
          return a1;
        default:
          if (v73 > 3)
            goto LABEL_442;
          v193 = ((1 << (8 * v73)) + 5) >> (8 * v73);
          v194 = 2;
          if (v193 > 0xFFD8)
            v194 = 4;
          if (v193 <= 0xD8)
LABEL_442:
            v194 = 1;
          memcpy(a1, a2, v194 + v73);
          return a1;
      }
      return a1;
    case 6u:
      v91 = v1661;
      if (v1665 == v1661)
      {
        v92 = (*(uint64_t (**)(_OWORD *))(v1747 + 48))(a1);
LABEL_1177:
        if (v92)
          goto LABEL_1190;
        v146 = ((unint64_t)a1 + v1686) & v1701;
        v147 = (v146 + v1739 + v39) & v1704;
LABEL_1179:
        v1615 = v73;
        v762 = *(void (**)(_OWORD *, uint64_t))(v1747 + 8);
        v762(a1, v1735);
        v762((_OWORD *)v146, v1735);
        (*(void (**)(unint64_t, uint64_t))(v1682 + 8))(v147, v1683);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v1676 + 8))((v1675 + ((v1685 + v147) & 0xFFFFFFFFFFFFFFF8)) & v1671, v1677);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v763 = (v1744 + v1689 + v147) & v1696;
        v764 = *(void (**)(unint64_t, uint64_t))(v1699 + 8);
        v764((v1697 + v763) & ~v33, v1694);
        v765 = (v1693 + ((v1697 + v763) & ~v33)) & ~v33;
        v764(v765, v1694);
        swift_bridgeObjectRelease();
        v766 = (v1690
              + ((((((v1664 + v765) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v33;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1699 + 48))(v766, 1, v1694))
          v764(v766, v1694);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v767 = *(_QWORD *)(((((((v1691 + v766) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 8);
        if ((v767 & 0x3000000000000000) == 0)
          sub_23AAAE53C(*(_QWORD *)((((((v1691 + v766) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v767);
        swift_bridgeObjectRelease();
        v768 = v1692 + v763;
        v769 = *(void **)(v768 + 16);
        LODWORD(v770) = -1;
        if ((unint64_t)v769 < 0xFFFFFFFF)
          v770 = *(_QWORD *)(v768 + 16);
        v73 = v1615;
        v77 = v1735;
        v81 = AssociatedTypeWitness;
        v91 = v1661;
        if ((int)v770 - 1 < 0)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v768 + 192))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_23AAA12F0(*(_QWORD *)((((v768 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v768 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
        v79 = ~v33;
LABEL_1190:
        v771 = ((unint64_t)a1 + v44) & v1655;
        if (v1665 == v91)
        {
          v772 = (*(uint64_t (**)(unint64_t))(v1747 + 48))(v771);
LABEL_1394:
          if (v772)
            goto LABEL_1408;
          v1018 = (v1686 + v771) & v1701;
          v1009 = (v1656 + v1018) & v1704;
          goto LABEL_1396;
        }
LABEL_1382:
        v1018 = (v1686 + v771) & v1701;
        v1009 = (v1656 + v1018) & v1704;
        if (v1667 == v91)
        {
          if (v1660 == v1667)
          {
            v772 = (*(uint64_t (**)(unint64_t))(v1682 + 48))((v1656 + v1018) & v1704);
            goto LABEL_1394;
          }
          v1021 = (unint64_t *)((v1685 + v1009) & 0xFFFFFFFFFFFFFFF8);
          if (v1646 > 0x7FFFFFFE)
          {
            v772 = (*(uint64_t (**)(unint64_t))(v1676 + 48))(((unint64_t)v1021 + v1675) & v1671);
            goto LABEL_1394;
          }
          v1022 = *v1021;
        }
        else
        {
          v1019 = v1009 + v1689;
          if ((v1642 & 0x80000000) == 0)
          {
            v1020 = *(_QWORD *)(v1019 + 8);
            if (v1020 >= 0xFFFFFFFF)
              LODWORD(v1020) = -1;
            v772 = v1020 + 1;
            goto LABEL_1394;
          }
          v1023 = (v1697 + ((v1744 + v1019) & v1696)) & v79;
          if (v1679 > 0x7FFFFFFD)
          {
            v772 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v1023);
            goto LABEL_1394;
          }
          v1022 = *(_QWORD *)(((v1664 + ((v1693 + v1023) & v79)) & 0xFFFFFFFFFFFFF8) + 8);
        }
        if (v1022 >= 0xFFFFFFFF)
          LODWORD(v1022) = -1;
        if ((v1022 + 1) >= 2)
          goto LABEL_1408;
LABEL_1396:
        v1620 = v73;
        v1015 = v79;
        v1024 = *(void (**)(unint64_t, uint64_t))(v1747 + 8);
        v1024(v771, v77);
        v1024(v1018, v77);
        (*(void (**)(unint64_t, uint64_t))(v1682 + 8))(v1009, v1683);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v1676 + 8))((v1675 + ((v1685 + v1009) & 0xFFFFFFFFFFFFFFF8)) & v1671, v1677);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v1017 = v1689;
LABEL_1397:
        v1025 = v1009 + v1017;
        swift_bridgeObjectRelease();
        v1026 = (v1744 + v1025) & v1696;
        v1027 = *(void (**)(uint64_t, uint64_t))(v1699 + 8);
        v1027((v1697 + v1026) & v1015, v1694);
        v1028 = (v1693 + ((v1697 + v1026) & v1015)) & v1015;
        v1027(v1028, v1694);
        swift_bridgeObjectRelease();
        v1029 = (v1690
               + ((((((v1664 + v1028) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v1015;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1699 + 48))(v1029, 1, v1694))
          v1027(v1029, v1694);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v1030 = *(_QWORD *)(((((((v1691 + v1029) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 8);
        if ((v1030 & 0x3000000000000000) == 0)
          sub_23AAAE53C(*(_QWORD *)((((((v1691 + v1029) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v1030);
        swift_bridgeObjectRelease();
        v1031 = v1026 + v1692;
        v1032 = *(void **)(v1031 + 16);
        LODWORD(v1033) = -1;
        if ((unint64_t)v1032 < 0xFFFFFFFF)
          v1033 = *(_QWORD *)(v1031 + 16);
        v73 = v1620;
        v81 = AssociatedTypeWitness;
        if ((int)v1033 - 1 < 0)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v1031 + 192))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_23AAA12F0(*(_QWORD *)((((v1031 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v1031 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
        v79 = v1015;
        goto LABEL_1408;
      }
      v146 = ((unint64_t)a1 + v1686) & v1701;
      v147 = (v146 + v1739 + v39) & v1704;
      if (v1667 == v1661)
      {
        if (v1660 == v1667)
        {
          v92 = (*(uint64_t (**)(unint64_t))(v1682 + 48))((v146 + v1739 + v39) & v1704);
          goto LABEL_1177;
        }
        v170 = (unint64_t *)((v1685 + v147) & 0xFFFFFFFFFFFFFFF8);
        if (v1646 > 0x7FFFFFFE)
        {
          v92 = (*(uint64_t (**)(unint64_t))(v1676 + 48))(((unint64_t)v170 + v1675) & v1671);
          goto LABEL_1177;
        }
        v171 = *v170;
      }
      else
      {
        v152 = v38 + v147;
        if ((v1642 & 0x80000000) == 0)
        {
          v153 = *(_QWORD *)(v152 + 8);
          if (v153 >= 0xFFFFFFFF)
            LODWORD(v153) = -1;
          v92 = v153 + 1;
          goto LABEL_1177;
        }
        v747 = (v1697 + ((v1744 + v152) & v1696)) & v79;
        if (v1679 > 0x7FFFFFFD)
        {
          v92 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v747);
          goto LABEL_1177;
        }
        v171 = *(_QWORD *)(((v1664 + ((v1693 + v747) & v79)) & 0xFFFFFFFFFFFFF8) + 8);
      }
      if (v171 >= 0xFFFFFFFF)
        LODWORD(v171) = -1;
      if ((v171 + 1) >= 2)
      {
        v771 = ((unint64_t)a1 + v44) & v1655;
        goto LABEL_1382;
      }
      goto LABEL_1179;
    case 7u:
      v93 = v73;
      v94 = ~v33;
      v95 = *(void (**)(_OWORD *, uint64_t))(v1746 + 8);
      v95(a1, AssociatedTypeWitness);
      v96 = ((unint64_t)a1 + v1687) & v1688;
      v95((_OWORD *)v96, AssociatedTypeWitness);
      v97 = (v96 + v1740 + v1757) & v1698;
      (*(void (**)(unint64_t, uint64_t))(v1680 + 8))(v97, v1681);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v1673 + 8))((v1672 + ((v1684 + v97) & 0xFFFFFFFFFFFFFFF8)) & v1670, v1674);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v98 = v1743;
      goto LABEL_142;
    case 8u:
      v93 = v73;
      v94 = ~v33;
      v99 = *(void (**)(_OWORD *, uint64_t))(v1747 + 8);
      v99(a1, v1735);
      v100 = ((unint64_t)a1 + v1686) & v1701;
      v99((_OWORD *)v100, v1735);
      v97 = (v100 + v1739 + v39) & v1704;
      (*(void (**)(unint64_t, uint64_t))(v1682 + 8))(v97, v1683);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v1676 + 8))((v1675 + ((v1685 + v97) & 0xFFFFFFFFFFFFFFF8)) & v1671, v1677);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v98 = v1689;
LABEL_142:
      v101 = v98 + v97;
      swift_bridgeObjectRelease();
      v102 = (v1744 + v101) & v1696;
      v103 = *(void (**)(uint64_t, uint64_t))(v1699 + 8);
      v103((v1697 + v102) & v94, v1694);
      v104 = (v1693 + ((v1697 + v102) & v94)) & v94;
      v103(v104, v1694);
      swift_bridgeObjectRelease();
      v105 = (v1690
            + ((((((v1664 + v104) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v94;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1699 + 48))(v105, 1, v1694))
        v103(v105, v1694);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v106 = *(_QWORD *)(((((((v1691 + v105) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 8);
      if ((v106 & 0x3000000000000000) == 0)
        sub_23AAAE53C(*(_QWORD *)((((((v1691 + v105) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v106);
      swift_bridgeObjectRelease();
      v107 = v1692 + v102;
      v108 = *(void **)(v107 + 16);
      LODWORD(v109) = -1;
      if ((unint64_t)v108 < 0xFFFFFFFF)
        v109 = *(_QWORD *)(v107 + 16);
      v73 = v93;
      v77 = v1735;
      v81 = AssociatedTypeWitness;
      v80 = v1745;
      if ((int)v109 - 1 < 0)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v107 + 192))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      sub_23AAA12F0(*(_QWORD *)((((v107 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v107 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
      v79 = v94;
      goto LABEL_378;
    case 9u:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v110 = v1760;
        else
          v110 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 0xAu:
      v111 = *((unsigned __int8 *)a1 + v1760);
      if (v111 >= 2)
      {
        if (v1760 <= 3)
          v112 = v1760;
        else
          v112 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_328;
    case 0xBu:
      v111 = *((unsigned __int8 *)a1 + v1760);
      if (v111 >= 2)
      {
        if (v1760 <= 3)
          v113 = v1760;
        else
          v113 = 4;
        __asm { BR              X12 }
      }
LABEL_328:
      v165 = v1747;
      if (v111 == 1)
      {
        v166 = v1735;
      }
      else
      {
        v165 = v1746;
        v166 = AssociatedTypeWitness;
      }
      (*(void (**)(_OWORD *, uint64_t))(v165 + 8))(a1, v166);
      v82 = ((unint64_t)a1 + v1695) & v1700;
      v167 = *(unsigned __int8 *)(v82 + v1760);
      if (v167 > 1)
        goto LABEL_378;
      if (v167 != 1)
        goto LABEL_333;
      goto LABEL_375;
    case 0xCu:
      v114 = *((unsigned __int8 *)a1 + v1760);
      if (v114 >= 2)
      {
        if (v1760 <= 3)
          v115 = v1760;
        else
          v115 = 4;
        __asm { BR              X12 }
      }
      v175 = v1747;
      if (v114 == 1)
      {
        v176 = v1735;
      }
      else
      {
        v175 = v1746;
        v176 = AssociatedTypeWitness;
      }
      (*(void (**)(_OWORD *, uint64_t))(v175 + 8))(a1, v176);
      v177 = (char *)a1 + v1737;
      goto LABEL_354;
    case 0xDu:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v116 = v1760;
        else
          v116 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 0xEu:
      v117 = *((unsigned __int8 *)a1 + v1760);
      if (v117 >= 2)
      {
        if (v1760 <= 3)
          v118 = v1760;
        else
          v118 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_350;
    case 0xFu:
      v117 = *((unsigned __int8 *)a1 + v1760);
      if (v117 >= 2)
      {
        if (v1760 <= 3)
          v119 = v1760;
        else
          v119 = 4;
        __asm { BR              X12 }
      }
LABEL_350:
      v178 = v1747;
      if (v117 == 1)
      {
        v179 = v1735;
      }
      else
      {
        v178 = v1746;
        v179 = AssociatedTypeWitness;
      }
      (*(void (**)(_OWORD *, uint64_t))(v178 + 8))(a1, v179);
      v177 = (char *)a1 + v1759;
LABEL_354:

      goto LABEL_378;
    case 0x10u:
      v120 = *((_QWORD *)a1 + 2);
      if (v120 >> 60 != 15)
        sub_23AAAE53C(*((_QWORD *)a1 + 1), v120);
      goto LABEL_378;
    case 0x11u:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v121 = v1760;
        else
          v121 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 0x13u:
      v82 = ((unint64_t)a1 + v1755 + 1) & v1700;
      v122 = *(unsigned __int8 *)(v82 + v1760);
      if (v122 >= 2)
      {
        if (v1760 <= 3)
          v123 = v1760;
        else
          v123 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_374;
    case 0x14u:
    case 0x15u:
      swift_release();
      goto LABEL_378;
    case 0x18u:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v124 = v1760;
        else
          v124 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 0x19u:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v125 = v1760;
        else
          v125 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 0x1Au:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v126 = v1760;
        else
          v126 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 0x1Bu:
      v127 = *((unsigned __int8 *)a1 + v1658);
      if (v127 >= 2)
      {
        if (v1658 <= 3)
          v128 = v1658;
        else
          v128 = 4;
        __asm { BR              X12 }
      }
      if (v127 == 1)
      {
        switch(*((_BYTE *)a1 + v1647))
        {
          case 0:
            v1623 = ~v33;
            v926 = *(void (**)(_OWORD *, uint64_t))(v1747 + 8);
            v926(a1, v1735);
            v927 = ((unint64_t)a1 + v1636) & v1655;
            if (v1665 == v1661)
            {
              v928 = (*(uint64_t (**)(unint64_t))(v1747 + 48))(((unint64_t)a1 + v1636) & v1655);
LABEL_1678:
              if (v928)
                goto LABEL_1691;
              v1035 = (v1686 + v927) & v1701;
              v1036 = (v1656 + v1035) & v1704;
              goto LABEL_1680;
            }
            v1035 = (v1686 + v927) & v1701;
            v1036 = (v1656 + v1035) & v1704;
            if (v1667 == v1661)
            {
              if (v1660 == v1667)
              {
                v928 = (*(uint64_t (**)(unint64_t))(v1682 + 48))((v1656 + v1035) & v1704);
                goto LABEL_1678;
              }
              v1439 = (unint64_t *)((v1685 + v1036) & 0xFFFFFFFFFFFFFFF8);
              if (v1646 > 0x7FFFFFFE)
              {
                v928 = (*(uint64_t (**)(unint64_t))(v1676 + 48))(((unint64_t)v1439 + v1675) & v1671);
                goto LABEL_1678;
              }
              v1440 = *v1439;
            }
            else
            {
              v1074 = v1036 + v1689;
              if ((v1642 & 0x80000000) == 0)
              {
                v1075 = *(_QWORD *)(v1074 + 8);
                if (v1075 >= 0xFFFFFFFF)
                  LODWORD(v1075) = -1;
                v928 = v1075 + 1;
                goto LABEL_1678;
              }
              v1463 = (v1697 + ((v1744 + v1074) & v1696)) & v1623;
              if (v1679 > 0x7FFFFFFD)
              {
                v928 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v1463);
                goto LABEL_1678;
              }
              v1440 = *(_QWORD *)(((v1664 + ((v1693 + v1463) & v1623)) & 0xFFFFFFFFFFFFF8) + 8);
            }
            if (v1440 >= 0xFFFFFFFF)
              LODWORD(v1440) = -1;
            if ((v1440 + 1) < 2)
            {
LABEL_1680:
              v926((_OWORD *)v927, v1735);
              v926((_OWORD *)v1035, v1735);
              (*(void (**)(unint64_t, uint64_t))(v1682 + 8))(v1036, v1683);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v1676 + 8))((v1675 + ((v1685 + v1036) & 0xFFFFFFFFFFFFFFF8)) & v1671, v1677);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v1475 = (v1744 + v1036 + v1689) & v1696;
              v1476 = *(void (**)(unint64_t, uint64_t))(v1699 + 8);
              v1476((v1697 + v1475) & v1623, v1694);
              v1477 = (v1693 + ((v1697 + v1475) & v1623)) & v1623;
              v1476(v1477, v1694);
              swift_bridgeObjectRelease();
              v1478 = (v1690
                     + ((((((v1664 + v1477) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v1623;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1699 + 48))(v1478, 1, v1694))
                v1476(v1478, v1694);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v1479 = *(_QWORD *)(((((((v1691 + v1478) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 8);
              if ((v1479 & 0x3000000000000000) == 0)
                sub_23AAAE53C(*(_QWORD *)((((((v1691 + v1478) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v1479);
              swift_bridgeObjectRelease();
              v1480 = v1475 + v1692;
              v1481 = *(void **)(v1480 + 16);
              LODWORD(v1482) = -1;
              if ((unint64_t)v1481 < 0xFFFFFFFF)
                v1482 = *(_QWORD *)(v1480 + 16);
              v77 = v1735;
              v81 = AssociatedTypeWitness;
              if ((int)v1482 - 1 < 0)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(v1480 + 192))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              sub_23AAA12F0(*(_QWORD *)((((v1480 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v1480 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            }
LABEL_1691:
            v1483 = __na;
            goto LABEL_1750;
          case 1:
            v1624 = ~v33;
            v929 = *(void (**)(_OWORD *, uint64_t))(v1747 + 8);
            v929(a1, v1735);
            v930 = ((unint64_t)a1 + v1636) & v1655;
            if (v1665 == v1661)
            {
              v931 = (*(uint64_t (**)(unint64_t))(v1747 + 48))(((unint64_t)a1 + v1636) & v1655);
LABEL_1693:
              if (v931)
                goto LABEL_1706;
              v1037 = (v1686 + v930) & v1701;
              v1038 = (v1656 + v1037) & v1704;
              goto LABEL_1695;
            }
            v1037 = (v1686 + v930) & v1701;
            v1038 = (v1656 + v1037) & v1704;
            if (v1667 == v1661)
            {
              if (v1660 == v1667)
              {
                v931 = (*(uint64_t (**)(unint64_t))(v1682 + 48))((v1656 + v1037) & v1704);
                goto LABEL_1693;
              }
              v1441 = (unint64_t *)((v1685 + v1038) & 0xFFFFFFFFFFFFFFF8);
              if (v1646 > 0x7FFFFFFE)
              {
                v931 = (*(uint64_t (**)(unint64_t))(v1676 + 48))(((unint64_t)v1441 + v1675) & v1671);
                goto LABEL_1693;
              }
              v1442 = *v1441;
            }
            else
            {
              v1076 = v1038 + v1689;
              if ((v1642 & 0x80000000) == 0)
              {
                v1077 = *(_QWORD *)(v1076 + 8);
                if (v1077 >= 0xFFFFFFFF)
                  LODWORD(v1077) = -1;
                v931 = v1077 + 1;
                goto LABEL_1693;
              }
              v1464 = (v1697 + ((v1744 + v1076) & v1696)) & v1624;
              if (v1679 > 0x7FFFFFFD)
              {
                v931 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v1464);
                goto LABEL_1693;
              }
              v1442 = *(_QWORD *)(((v1664 + ((v1693 + v1464) & v1624)) & 0xFFFFFFFFFFFFF8) + 8);
            }
            if (v1442 >= 0xFFFFFFFF)
              LODWORD(v1442) = -1;
            if ((v1442 + 1) < 2)
            {
LABEL_1695:
              v929((_OWORD *)v930, v1735);
              v929((_OWORD *)v1037, v1735);
              (*(void (**)(unint64_t, uint64_t))(v1682 + 8))(v1038, v1683);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v1676 + 8))((v1675 + ((v1685 + v1038) & 0xFFFFFFFFFFFFFFF8)) & v1671, v1677);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v1484 = (v1744 + v1038 + v1689) & v1696;
              v1485 = *(void (**)(unint64_t, uint64_t))(v1699 + 8);
              v1485((v1697 + v1484) & v1624, v1694);
              v1486 = (v1693 + ((v1697 + v1484) & v1624)) & v1624;
              v1485(v1486, v1694);
              swift_bridgeObjectRelease();
              v1487 = (v1690
                     + ((((((v1664 + v1486) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v1624;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1699 + 48))(v1487, 1, v1694))
                v1485(v1487, v1694);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v1488 = *(_QWORD *)(((((((v1691 + v1487) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 8);
              if ((v1488 & 0x3000000000000000) == 0)
                sub_23AAAE53C(*(_QWORD *)((((((v1691 + v1487) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v1488);
              swift_bridgeObjectRelease();
              v1489 = v1484 + v1692;
              v1490 = *(void **)(v1489 + 16);
              LODWORD(v1491) = -1;
              if ((unint64_t)v1490 < 0xFFFFFFFF)
                v1491 = *(_QWORD *)(v1489 + 16);
              v77 = v1735;
              v81 = AssociatedTypeWitness;
              if ((int)v1491 - 1 < 0)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(v1489 + 192))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              sub_23AAA12F0(*(_QWORD *)((((v1489 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v1489 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            }
LABEL_1706:
            v1492 = (v930 + v1750 + __na) & v1688;
            if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v1746 + 48))(v1492, 1, v81))
              (*(void (**)(size_t, uint64_t))(v1746 + 8))(v1492, v81);
            v1493 = (v1634 + v1492) & v1698;
            v80 = v1745;
            if (v1659 == v1666)
            {
              v1494 = (*(uint64_t (**)(size_t))(v1680 + 48))(v1493);
            }
            else
            {
              v1495 = (uint64_t *)((v1684 + v1493) & 0xFFFFFFFFFFFFFFF8);
              if (v1645 <= 0x7FFFFFFE)
              {
                v1496 = *v1495;
                if ((unint64_t)*v1495 >= 0xFFFFFFFF)
                  LODWORD(v1496) = -1;
                if ((v1496 + 1) >= 2)
                  goto LABEL_1719;
                goto LABEL_1718;
              }
              v1494 = (*(uint64_t (**)(unint64_t))(v1673 + 48))(((unint64_t)v1495 + v1672) & v1670);
            }
            if (v1494)
            {
LABEL_1719:
              v1497 = v1743;
LABEL_1779:

              v79 = v1624;
              goto LABEL_378;
            }
            v1495 = (uint64_t *)((v1684 + v1493) & 0xFFFFFFFFFFFFFFF8);
LABEL_1718:
            (*(void (**)(size_t, uint64_t))(v1680 + 8))(v1493, v1681);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1673 + 8))(((unint64_t)v1495 + v1672) & v1670, v1674);
            v80 = v1745;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_1719;
          case 2:
            (*(void (**)(_OWORD *, uint64_t))(v1747 + 8))(a1, v1735);
            v932 = ((unint64_t)a1 + v1630) & v1688;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1746 + 48))(v932, 1, AssociatedTypeWitness))(*(void (**)(unint64_t, uint64_t))(v1746 + 8))(v932, AssociatedTypeWitness);
            v933 = ~v33;
            v934 = (v1634 + v932) & v1698;
            if (v1659 == v1666)
            {
              v935 = (*(uint64_t (**)(unint64_t))(v1680 + 48))(v934);
LABEL_1510:
              if (v935)
                goto LABEL_1513;
              v1039 = (uint64_t *)((v1684 + v934) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_1512;
            }
            v1039 = (uint64_t *)((v1684 + v934) & 0xFFFFFFFFFFFFFFF8);
            if (v1645 > 0x7FFFFFFE)
            {
              v935 = (*(uint64_t (**)(unint64_t))(v1673 + 48))(((unint64_t)v1039 + v1672) & v1670);
              goto LABEL_1510;
            }
            v1040 = *v1039;
            if ((unint64_t)*v1039 >= 0xFFFFFFFF)
              LODWORD(v1040) = -1;
            if ((v1040 + 1) < 2)
            {
LABEL_1512:
              (*(void (**)(unint64_t, uint64_t))(v1680 + 8))(v934, v1681);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v1673 + 8))(((unint64_t)v1039 + v1672) & v1670, v1674);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
LABEL_1513:
            v1078 = v1743;
            goto LABEL_1531;
          case 3:
            v1623 = ~v33;
            v936 = *(void (**)(_OWORD *, uint64_t))(v1747 + 8);
            v936(a1, v1735);
            v937 = ((unint64_t)a1 + v1636) & v1655;
            if (v1665 == v1661)
            {
              v938 = (*(uint64_t (**)(unint64_t))(v1747 + 48))(((unint64_t)a1 + v1636) & v1655);
LABEL_1721:
              if (v938)
                goto LABEL_1794;
              v1041 = (v1686 + v937) & v1701;
              v1042 = (v1656 + v1041) & v1704;
              goto LABEL_1723;
            }
            v1041 = (v1686 + v937) & v1701;
            v1042 = (v1656 + v1041) & v1704;
            if (v1667 == v1661)
            {
              if (v1660 == v1667)
              {
                v938 = (*(uint64_t (**)(unint64_t))(v1682 + 48))((v1656 + v1041) & v1704);
                goto LABEL_1721;
              }
              v1443 = (unint64_t *)((v1685 + v1042) & 0xFFFFFFFFFFFFFFF8);
              if (v1646 > 0x7FFFFFFE)
              {
                v938 = (*(uint64_t (**)(unint64_t))(v1676 + 48))(((unint64_t)v1443 + v1675) & v1671);
                goto LABEL_1721;
              }
              v1444 = *v1443;
            }
            else
            {
              v1079 = v1042 + v1689;
              if ((v1642 & 0x80000000) == 0)
              {
                v1080 = *(_QWORD *)(v1079 + 8);
                if (v1080 >= 0xFFFFFFFF)
                  LODWORD(v1080) = -1;
                v938 = v1080 + 1;
                goto LABEL_1721;
              }
              v1465 = (v1697 + ((v1744 + v1079) & v1696)) & v1623;
              if (v1679 > 0x7FFFFFFD)
              {
                v938 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v1465);
                goto LABEL_1721;
              }
              v1444 = *(_QWORD *)(((v1664 + ((v1693 + v1465) & v1623)) & 0xFFFFFFFFFFFFF8) + 8);
            }
            if (v1444 >= 0xFFFFFFFF)
              LODWORD(v1444) = -1;
            if ((v1444 + 1) < 2)
            {
LABEL_1723:
              v936((_OWORD *)v937, v1735);
              v936((_OWORD *)v1041, v1735);
              (*(void (**)(unint64_t, uint64_t))(v1682 + 8))(v1042, v1683);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v1676 + 8))((v1675 + ((v1685 + v1042) & 0xFFFFFFFFFFFFFFF8)) & v1671, v1677);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v1498 = (v1744 + v1042 + v1689) & v1696;
              v1499 = *(void (**)(unint64_t, uint64_t))(v1699 + 8);
              v1499((v1697 + v1498) & v1623, v1694);
              v1500 = (v1693 + ((v1697 + v1498) & v1623)) & v1623;
              v1499(v1500, v1694);
              swift_bridgeObjectRelease();
              v1501 = (v1690
                     + ((((((v1664 + v1500) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v1623;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1699 + 48))(v1501, 1, v1694))
                v1499(v1501, v1694);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v1502 = *(_QWORD *)(((((((v1691 + v1501) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 8);
              if ((v1502 & 0x3000000000000000) == 0)
                sub_23AAAE53C(*(_QWORD *)((((((v1691 + v1501) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v1502);
              swift_bridgeObjectRelease();
              v1503 = v1498 + v1692;
              v1504 = *(void **)(v1503 + 16);
              LODWORD(v1505) = -1;
              if ((unint64_t)v1504 < 0xFFFFFFFF)
                v1505 = *(_QWORD *)(v1503 + 16);
              v77 = v1735;
              v81 = AssociatedTypeWitness;
              if ((int)v1505 - 1 < 0)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(_QWORD *)(v1503 + 192))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              sub_23AAA12F0(*(_QWORD *)((((v1503 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v1503 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
              goto LABEL_1794;
            }
            break;
          case 4:
          case 5:
          case 7:
            goto LABEL_275;
          case 6:
            (*(void (**)(_OWORD *, uint64_t))(v1747 + 8))(a1, v1735);
            v939 = ((unint64_t)a1 + v1629) & v1627;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1632 + 48))(v939, 1, v1721))
              (*(void (**)(unint64_t, uint64_t))(v1632 + 8))(v939, v1721);
            goto LABEL_378;
          default:
            if (v1647 <= 3)
              v180 = v1647;
            else
              v180 = 4;
            __asm { BR              X12 }
            return result;
        }
        goto LABEL_1794;
      }
      switch(*((_BYTE *)a1 + v57))
      {
        case 0:
          v1623 = ~v33;
          v940 = *(void (**)(_OWORD *, uint64_t))(v1746 + 8);
          v940(a1, AssociatedTypeWitness);
          v927 = ((unint64_t)a1 + v1637) & v1749;
          if (v1741 == v1662)
          {
            v941 = (*(uint64_t (**)(unint64_t))(v1746 + 48))(((unint64_t)a1 + v1637) & v1749);
LABEL_1736:
            if (v941)
              goto LABEL_1749;
            v1043 = (v1687 + v927) & v1688;
            v1044 = (v1657 + v1043) & v1698;
            goto LABEL_1738;
          }
          v1043 = (v1687 + v927) & v1688;
          v1044 = (v1657 + v1043) & v1698;
          if (v1666 == v1662)
          {
            if (v1659 == v1666)
            {
              v941 = (*(uint64_t (**)(unint64_t))(v1680 + 48))((v1657 + v1043) & v1698);
              goto LABEL_1736;
            }
            v1445 = (unint64_t *)((v1684 + v1044) & 0xFFFFFFFFFFFFFFF8);
            if (v1645 > 0x7FFFFFFE)
            {
              v941 = (*(uint64_t (**)(unint64_t))(v1673 + 48))(((unint64_t)v1445 + v1672) & v1670);
              goto LABEL_1736;
            }
            v1446 = *v1445;
          }
          else
          {
            v1081 = v1044 + v1743;
            if ((v1643 & 0x80000000) == 0)
            {
              v1082 = *(_QWORD *)(v1081 + 8);
              if (v1082 >= 0xFFFFFFFF)
                LODWORD(v1082) = -1;
              v941 = v1082 + 1;
              goto LABEL_1736;
            }
            v1466 = (v1697 + ((v1744 + v1081) & v1696)) & v1623;
            if (v1679 > 0x7FFFFFFD)
            {
              v941 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v1466);
              goto LABEL_1736;
            }
            v1446 = *(_QWORD *)(((v1664 + ((v1693 + v1466) & v1623)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v1446 >= 0xFFFFFFFF)
            LODWORD(v1446) = -1;
          if ((v1446 + 1) >= 2)
          {
LABEL_1749:
            v1483 = v1756;
LABEL_1750:

            goto LABEL_1795;
          }
LABEL_1738:
          v940((_OWORD *)v927, AssociatedTypeWitness);
          v940((_OWORD *)v1043, AssociatedTypeWitness);
          (*(void (**)(unint64_t, uint64_t))(v1680 + 8))(v1044, v1681);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v1673 + 8))((v1672 + ((v1684 + v1044) & 0xFFFFFFFFFFFFFFF8)) & v1670, v1674);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v1506 = (v1744 + v1044 + v1743) & v1696;
          v1507 = *(void (**)(size_t, uint64_t))(v1699 + 8);
          v1507((v1697 + v1506) & v1623, v1694);
          v1508 = (v1693 + ((v1697 + v1506) & v1623)) & v1623;
          v1507(v1508, v1694);
          swift_bridgeObjectRelease();
          v1509 = (v1690
                 + ((((((v1664 + v1508) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v1623;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1699 + 48))(v1509, 1, v1694))
            v1507(v1509, v1694);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v1510 = *(_QWORD *)(((((((v1691 + v1509) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 8);
          if ((v1510 & 0x3000000000000000) == 0)
            sub_23AAAE53C(*(_QWORD *)((((((v1691 + v1509) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v1510);
          swift_bridgeObjectRelease();
          v1511 = v1692 + v1506;
          v1512 = *(void **)(v1511 + 16);
          LODWORD(v1513) = -1;
          if ((unint64_t)v1512 < 0xFFFFFFFF)
            v1513 = *(_QWORD *)(v1511 + 16);
          v77 = v1735;
          v81 = AssociatedTypeWitness;
          if ((int)v1513 - 1 < 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v1511 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_23AAA12F0(*(_QWORD *)((((v1511 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v1511 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          goto LABEL_1749;
        case 1:
          v1624 = ~v33;
          v942 = *(void (**)(_OWORD *, uint64_t))(v1746 + 8);
          v942(a1, AssociatedTypeWitness);
          v943 = ((unint64_t)a1 + v1637) & v1749;
          if (v1741 == v1662)
          {
            v944 = (*(uint64_t (**)(unint64_t))(v1746 + 48))(((unint64_t)a1 + v1637) & v1749);
LABEL_1752:
            if (v944)
              goto LABEL_1765;
            v1045 = (v1687 + v943) & v1688;
            v1046 = (v1657 + v1045) & v1698;
            goto LABEL_1754;
          }
          v1045 = (v1687 + v943) & v1688;
          v1046 = (v1657 + v1045) & v1698;
          if (v1666 == v1662)
          {
            if (v1659 == v1666)
            {
              v944 = (*(uint64_t (**)(unint64_t))(v1680 + 48))((v1657 + v1045) & v1698);
              goto LABEL_1752;
            }
            v1447 = (unint64_t *)((v1684 + v1046) & 0xFFFFFFFFFFFFFFF8);
            if (v1645 > 0x7FFFFFFE)
            {
              v944 = (*(uint64_t (**)(unint64_t))(v1673 + 48))(((unint64_t)v1447 + v1672) & v1670);
              goto LABEL_1752;
            }
            v1448 = *v1447;
          }
          else
          {
            v1083 = v1046 + v1743;
            if ((v1643 & 0x80000000) == 0)
            {
              v1084 = *(_QWORD *)(v1083 + 8);
              if (v1084 >= 0xFFFFFFFF)
                LODWORD(v1084) = -1;
              v944 = v1084 + 1;
              goto LABEL_1752;
            }
            v1467 = (v1697 + ((v1744 + v1083) & v1696)) & v1624;
            if (v1679 > 0x7FFFFFFD)
            {
              v944 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v1467);
              goto LABEL_1752;
            }
            v1448 = *(_QWORD *)(((v1664 + ((v1693 + v1467) & v1624)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v1448 >= 0xFFFFFFFF)
            LODWORD(v1448) = -1;
          if ((v1448 + 1) < 2)
          {
LABEL_1754:
            v942((_OWORD *)v943, AssociatedTypeWitness);
            v942((_OWORD *)v1045, AssociatedTypeWitness);
            (*(void (**)(unint64_t, uint64_t))(v1680 + 8))(v1046, v1681);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1673 + 8))((v1672 + ((v1684 + v1046) & 0xFFFFFFFFFFFFFFF8)) & v1670, v1674);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v1514 = (v1744 + v1046 + v1743) & v1696;
            v1515 = *(void (**)(size_t, uint64_t))(v1699 + 8);
            v1515((v1697 + v1514) & v1624, v1694);
            v1516 = (v1693 + ((v1697 + v1514) & v1624)) & v1624;
            v1515(v1516, v1694);
            swift_bridgeObjectRelease();
            v1517 = (v1690
                   + ((((((v1664 + v1516) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v1624;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1699 + 48))(v1517, 1, v1694))
              v1515(v1517, v1694);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v1518 = *(_QWORD *)(((((((v1691 + v1517) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 8);
            if ((v1518 & 0x3000000000000000) == 0)
              sub_23AAAE53C(*(_QWORD *)((((((v1691 + v1517) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v1518);
            swift_bridgeObjectRelease();
            v1519 = v1692 + v1514;
            v1520 = *(void **)(v1519 + 16);
            LODWORD(v1521) = -1;
            if ((unint64_t)v1520 < 0xFFFFFFFF)
              v1521 = *(_QWORD *)(v1519 + 16);
            v77 = v1735;
            v81 = AssociatedTypeWitness;
            if ((int)v1521 - 1 < 0)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(_QWORD *)(v1519 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_23AAA12F0(*(_QWORD *)((((v1519 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v1519 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          }
LABEL_1765:
          v1522 = (v943 + v1720 + v1756) & v1701;
          if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v1747 + 48))(v1522, 1, v77))
            (*(void (**)(size_t, uint64_t))(v1747 + 8))(v1522, v77);
          v1493 = (v1635 + v1522) & v1704;
          v80 = v1745;
          if (v1660 == v1667)
          {
            v1523 = (*(uint64_t (**)(size_t))(v1682 + 48))(v1493);
          }
          else
          {
            v1524 = (uint64_t *)((v1685 + v1493) & 0xFFFFFFFFFFFFFFF8);
            if (v1646 <= 0x7FFFFFFE)
            {
              v1525 = *v1524;
              if ((unint64_t)*v1524 >= 0xFFFFFFFF)
                LODWORD(v1525) = -1;
              if ((v1525 + 1) >= 2)
                goto LABEL_1778;
              goto LABEL_1777;
            }
            v1523 = (*(uint64_t (**)(unint64_t))(v1676 + 48))(((unint64_t)v1524 + v1675) & v1671);
          }
          if (v1523)
          {
LABEL_1778:
            v1497 = v1689;
            goto LABEL_1779;
          }
          v1524 = (uint64_t *)((v1685 + v1493) & 0xFFFFFFFFFFFFFFF8);
LABEL_1777:
          (*(void (**)(size_t, uint64_t))(v1682 + 8))(v1493, v1683);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v1676 + 8))(((unint64_t)v1524 + v1675) & v1671, v1677);
          v80 = v1745;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_1778;
        case 2:
          (*(void (**)(_OWORD *, uint64_t))(v1746 + 8))(a1, AssociatedTypeWitness);
          v945 = ((unint64_t)a1 + v1663) & v1701;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1747 + 48))(v945, 1, v1735))
            (*(void (**)(unint64_t, uint64_t))(v1747 + 8))(v945, v1735);
          v933 = ~v33;
          v934 = (v1635 + v945) & v1704;
          if (v1660 == v1667)
          {
            v946 = (*(uint64_t (**)(unint64_t))(v1682 + 48))(v934);
          }
          else
          {
            v1047 = (uint64_t *)((v1685 + v934) & 0xFFFFFFFFFFFFFFF8);
            if (v1646 <= 0x7FFFFFFE)
            {
              v1048 = *v1047;
              if ((unint64_t)*v1047 >= 0xFFFFFFFF)
                LODWORD(v1048) = -1;
              if ((v1048 + 1) >= 2)
              {
LABEL_1530:
                v1078 = v1689;
LABEL_1531:

                v79 = v933;
LABEL_378:
                v185 = v80;
                goto LABEL_379;
              }
LABEL_1529:
              (*(void (**)(unint64_t, uint64_t))(v1682 + 8))(v934, v1683);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v1676 + 8))(((unint64_t)v1047 + v1675) & v1671, v1677);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_1530;
            }
            v946 = (*(uint64_t (**)(unint64_t))(v1676 + 48))(((unint64_t)v1047 + v1675) & v1671);
          }
          if (v946)
            goto LABEL_1530;
          v1047 = (uint64_t *)((v1685 + v934) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_1529;
        case 3:
          v1623 = ~v33;
          v947 = *(void (**)(_OWORD *, uint64_t))(v1746 + 8);
          v947(a1, AssociatedTypeWitness);
          v948 = ((unint64_t)a1 + v1637) & v1749;
          if (v1741 == v1662)
          {
            v949 = (*(uint64_t (**)(unint64_t))(v1746 + 48))(((unint64_t)a1 + v1637) & v1749);
LABEL_1781:
            if (v949)
              goto LABEL_1794;
            v1049 = (v1687 + v948) & v1688;
            v1050 = (v1657 + v1049) & v1698;
            goto LABEL_1783;
          }
          v1049 = (v1687 + v948) & v1688;
          v1050 = (v1657 + v1049) & v1698;
          if (v1666 == v1662)
          {
            if (v1659 == v1666)
            {
              v949 = (*(uint64_t (**)(unint64_t))(v1680 + 48))((v1657 + v1049) & v1698);
              goto LABEL_1781;
            }
            v1449 = (unint64_t *)((v1684 + v1050) & 0xFFFFFFFFFFFFFFF8);
            if (v1645 > 0x7FFFFFFE)
            {
              v949 = (*(uint64_t (**)(unint64_t))(v1673 + 48))(((unint64_t)v1449 + v1672) & v1670);
              goto LABEL_1781;
            }
            v1450 = *v1449;
          }
          else
          {
            v1085 = v1050 + v1743;
            if ((v1643 & 0x80000000) == 0)
            {
              v1086 = *(_QWORD *)(v1085 + 8);
              if (v1086 >= 0xFFFFFFFF)
                LODWORD(v1086) = -1;
              v949 = v1086 + 1;
              goto LABEL_1781;
            }
            v1468 = (v1697 + ((v1744 + v1085) & v1696)) & v1623;
            if (v1679 > 0x7FFFFFFD)
            {
              v949 = (*(uint64_t (**)(uint64_t))(v1699 + 48))(v1468);
              goto LABEL_1781;
            }
            v1450 = *(_QWORD *)(((v1664 + ((v1693 + v1468) & v1623)) & 0xFFFFFFFFFFFFF8) + 8);
          }
          if (v1450 >= 0xFFFFFFFF)
            LODWORD(v1450) = -1;
          if ((v1450 + 1) >= 2)
          {
LABEL_1794:
            swift_bridgeObjectRelease();
LABEL_1795:
            v79 = v1623;
            v80 = v1745;
            goto LABEL_378;
          }
LABEL_1783:
          v947((_OWORD *)v948, AssociatedTypeWitness);
          v947((_OWORD *)v1049, AssociatedTypeWitness);
          (*(void (**)(unint64_t, uint64_t))(v1680 + 8))(v1050, v1681);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v1673 + 8))((v1672 + ((v1684 + v1050) & 0xFFFFFFFFFFFFFFF8)) & v1670, v1674);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v1526 = (v1744 + v1050 + v1743) & v1696;
          v1527 = *(void (**)(size_t, uint64_t))(v1699 + 8);
          v1527((v1697 + v1526) & v1623, v1694);
          v1528 = (v1693 + ((v1697 + v1526) & v1623)) & v1623;
          v1527(v1528, v1694);
          swift_bridgeObjectRelease();
          v1529 = (v1690
                 + ((((((v1664 + v1528) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v1623;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1699 + 48))(v1529, 1, v1694))
            v1527(v1529, v1694);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v1530 = *(_QWORD *)(((((((v1691 + v1529) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 8);
          if ((v1530 & 0x3000000000000000) == 0)
            sub_23AAAE53C(*(_QWORD *)((((((v1691 + v1529) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v1530);
          swift_bridgeObjectRelease();
          v1531 = v1692 + v1526;
          v1532 = *(void **)(v1531 + 16);
          LODWORD(v1533) = -1;
          if ((unint64_t)v1532 < 0xFFFFFFFF)
            v1533 = *(_QWORD *)(v1531 + 16);
          v77 = v1735;
          v81 = AssociatedTypeWitness;
          if ((int)v1533 - 1 < 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v1531 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_23AAA12F0(*(_QWORD *)((((v1531 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(((((v1531 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          goto LABEL_1794;
        case 4:
        case 5:
        case 7:
          goto LABEL_276;
        case 6:
          (*(void (**)(_OWORD *, uint64_t))(v1746 + 8))(a1, AssociatedTypeWitness);
          v950 = ((unint64_t)a1 + v1631) & v1628;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1633 + 48))(v950, 1, v1723))
            (*(void (**)(unint64_t, uint64_t))(v1633 + 8))(v950, v1723);
          goto LABEL_378;
        default:
          if (v57 <= 3)
            v181 = v57;
          else
            v181 = 4;
          __asm { BR              X12 }
          return result;
      }
    case 0x1Cu:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v129 = v1760;
        else
          v129 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 0x1Du:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v130 = v1760;
        else
          v130 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 0x1Eu:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v131 = v1760;
        else
          v131 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 0x1Fu:
      v132 = *((unsigned __int8 *)a1 + v1760);
      if (v132 >= 2)
      {
        if (v1760 <= 3)
          v133 = v1760;
        else
          v133 = 4;
        __asm { BR              X12 }
      }
      v182 = v1747;
      if (v132 == 1)
      {
        v183 = v1735;
      }
      else
      {
        v182 = v1746;
        v183 = AssociatedTypeWitness;
      }
      (*(void (**)(_OWORD *, uint64_t))(v182 + 8))(a1, v183);
      v82 = ((unint64_t)a1 + v1695) & v1700;
      v122 = *(unsigned __int8 *)(v82 + v1760);
      if (v122 >= 2)
      {
        if (v1760 <= 3)
          v184 = v1760;
        else
          v184 = 4;
        __asm { BR              X12 }
      }
LABEL_374:
      if (v122 != 1)
      {
LABEL_333:
        v142 = *(void (**)(uint64_t, uint64_t))(v1746 + 8);
        goto LABEL_277;
      }
LABEL_375:
      v142 = *(void (**)(uint64_t, uint64_t))(v1747 + 8);
      goto LABEL_376;
    case 0x20u:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v134 = v1760;
        else
          v134 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 0x21u:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v135 = v1760;
        else
          v135 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 0x22u:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v136 = v1760;
        else
          v136 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 0x23u:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v137 = v1760;
        else
          v137 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 0x24u:
      if (!(*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v1746 + 48))(a1, 1, AssociatedTypeWitness))
        (*(void (**)(_OWORD *, uint64_t))(v1746 + 8))(a1, AssociatedTypeWitness);
      v138 = ((((((unint64_t)a1 + v1654 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v1757 + 9) & v1698;
      if (v1659 == v1666)
      {
        v139 = (*(uint64_t (**)(unint64_t))(v1680 + 48))(((((((unint64_t)a1 + v1654 + 7) & 0xFFFFFFFFFFFFFFF8)
                                                                           + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                         + v1757
                                                                         + 9) & v1698);
LABEL_299:
        if (v139)
          goto LABEL_302;
        v148 = (uint64_t *)((v1684 + v138) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_301;
      }
      v148 = (uint64_t *)((v1684 + v138) & 0xFFFFFFFFFFFFFFF8);
      if (v1645 > 0x7FFFFFFE)
      {
        v139 = (*(uint64_t (**)(unint64_t))(v1673 + 48))(((unint64_t)v148 + v1672) & v1670);
        goto LABEL_299;
      }
      v149 = *v148;
      if ((unint64_t)*v148 >= 0xFFFFFFFF)
        LODWORD(v149) = -1;
      if ((v149 + 1) < 2)
      {
LABEL_301:
        (*(void (**)(unint64_t, uint64_t))(v1680 + 8))(v138, v1681);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v1673 + 8))(((unint64_t)v148 + v1672) & v1670, v1674);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_302:
      sub_23AAAEE10(*(void **)((v1743 + v138 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v1743 + v138 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v1743 + v138 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
      v154 = (v1743 + v138 + 34) & 0xFFFFFFFFFFFFFFF8;
      v155 = *(_QWORD *)(v154 + 16);
      v156 = ((4 * (v155 >> 60)) & 0xC | ((v155 >> 60) >> 2)) != 0xF && ((4 * (v155 >> 60)) & 0xC) != 0;
      if (v155 >> 60 != 15 && !v156)
        sub_23AAAE53C(*(_QWORD *)(v154 + 8), v155);

      v157 = ((unint64_t)a1 + v1650) & v1649;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v1747 + 48))(v157, 1, v1735))
        (*(void (**)(unint64_t, uint64_t))(v1747 + 8))(v157, v1735);
      v158 = (v1652 + ((((v1651 + v157) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v1704;
      if (v1660 == v1667)
      {
        v159 = (*(uint64_t (**)(size_t))(v1682 + 48))((v1652
                                                               + ((((v1651 + v157) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v1704);
      }
      else
      {
        v160 = (uint64_t *)((v1685 + v158) & 0xFFFFFFFFFFFFFFF8);
        if (v1646 <= 0x7FFFFFFE)
        {
          v161 = *v160;
          if ((unint64_t)*v160 >= 0xFFFFFFFF)
            LODWORD(v161) = -1;
          if ((v161 + 1) >= 2)
            goto LABEL_321;
          goto LABEL_320;
        }
        v159 = (*(uint64_t (**)(unint64_t))(v1676 + 48))(((unint64_t)v160 + v1675) & v1671);
      }
      if (v159)
      {
LABEL_321:
        sub_23AAAEE10(*(void **)((v158 + v1689 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v158 + v1689 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(((v158 + v1689 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
        v162 = (v158 + v1689 + 34) & 0xFFFFFFFFFFFFFFF8;
        v163 = *(_QWORD *)(v162 + 16);
        v164 = ((4 * (v163 >> 60)) & 0xC | ((v163 >> 60) >> 2)) != 0xF && ((4 * (v163 >> 60)) & 0xC) != 0;
        if (v163 >> 60 != 15 && !v164)
          sub_23AAAE53C(*(_QWORD *)(v162 + 8), v163);

        swift_bridgeObjectRelease();
        v79 = ~v33;
        v80 = v1745;
        goto LABEL_378;
      }
      v160 = (uint64_t *)((v1685 + v158) & 0xFFFFFFFFFFFFFFF8);
LABEL_320:
      (*(void (**)(unint64_t, uint64_t))(v1682 + 8))(v158, v1683);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v1676 + 8))(((unint64_t)v160 + v1675) & v1671, v1677);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_321;
    case 0x25u:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v140 = v1760;
        else
          v140 = 4;
        __asm { BR              X12 }
      }
      goto LABEL_274;
    case 0x26u:
      v83 = *((unsigned __int8 *)a1 + v1760);
      if (v83 >= 2)
      {
        if (v1760 <= 3)
          v141 = v1760;
        else
          v141 = 4;
        __asm { BR              X12 }
      }
LABEL_274:
      if (v83 == 1)
      {
LABEL_275:
        v142 = *(void (**)(uint64_t, uint64_t))(v1747 + 8);
        v82 = (uint64_t)a1;
LABEL_376:
        v143 = v1735;
      }
      else
      {
LABEL_276:
        v142 = *(void (**)(uint64_t, uint64_t))(v1746 + 8);
        v82 = (uint64_t)a1;
LABEL_277:
        v143 = AssociatedTypeWitness;
      }
      v142(v82, v143);
      goto LABEL_378;
    default:
      goto LABEL_378;
  }
}

uint64_t sub_23ABBC0FC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  char v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v82;
  char v83;
  unsigned int v84;
  unint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v91 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v96 = (v6 + v8) & ~v8;
  v9 = *(_QWORD *)(v7 + 64);
  if (v9 <= v6)
    v10 = v6;
  else
    v10 = *(_QWORD *)(v7 + 64);
  v99 = v10 + 1;
  v100 = v10;
  v11 = *(unsigned __int8 *)(v5 + 80);
  v93 = v11 | v8;
  v101 = (((v11 | v8) + v10 + 1) & ~(v11 | v8)) + v10 + 1;
  v98 = *(_DWORD *)(v5 + 84);
  v94 = v4;
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v13 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v14 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v15 = *(_DWORD *)(v14 + 84);
  v16 = v11;
  v92 = v11;
  v17 = *(unsigned __int8 *)(v13 + 80);
  v18 = *(_DWORD *)(v12 + 80) & 0xF8 | v17 | 7;
  v90 = v18;
  v95 = ((((*(_QWORD *)(v13 + 64) + ((v17 + ((*(_QWORD *)(v12 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v17) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v19 = *(unsigned __int8 *)(v14 + 80);
  v89 = (v19 | 7) + 16;
  v20 = (v89 + ((((v6 + v11) & ~v11) + v6 + v18) & ~v18) + v95) & ~(v19 | 7);
  v21 = *(_QWORD *)(v14 + 64);
  v22 = v15 == 0;
  v23 = 7;
  if (v22)
    v23 = 8;
  v24 = ((((((((((v23
                + v21
                + ((v19
                  + ((((((v21 + ((v21 + v19 + ((v19 + 12) & ~v19)) & ~v19) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 10) & ~v19)) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  v25 = (((v24 + v20) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v87 = v25 + 16;
  v26 = v18 | v16 | v19;
  v97 = ((v25 + ((v25 + 16 + v26) & ~v26) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v88 = *(_DWORD *)(v7 + 84);
  v27 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v28 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v29 = *(unsigned __int8 *)(v28 + 80);
  v30 = (v29 + ((*(_QWORD *)(v27 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v29;
  v31 = *(_DWORD *)(v27 + 80) & 0xF8 | v29 | 7;
  v32 = ((((*(_QWORD *)(v28 + 64) + v30 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v33 = (((v24 + ((v89 + ((((v9 + v8) & ~v8) + v9 + v31) & ~v31) + v32) & ~(v19 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v34 = v33 + 16;
  v35 = v31 | v8 | v19;
  v36 = v33 + ((v33 + 16 + v35) & ~v35);
  v37 = v87 + ((v26 + v6) & ~v26);
  if (v88)
    v38 = v9;
  else
    v38 = v9 + 1;
  v39 = v38 + v31 + ((v37 + v8) & ~v8);
  v40 = *(_QWORD *)(v94 - 8);
  v41 = (v6 + *(unsigned __int8 *)(v40 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  v42 = *(_DWORD *)(v40 + 84);
  v43 = (v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  v44 = *(_QWORD *)(v40 + 64);
  if (!v42)
    ++v44;
  v45 = v44 + v41;
  v46 = ((v43 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v47 = (((((v39 & ~v31) + v32 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v6 > v46)
    v46 = v6;
  if (v47 <= v32 + ((v38 + v31 + v96) & ~v31) + 16)
    v47 = v32 + ((v38 + v31 + v96) & ~v31) + 16;
  v48 = ((v43 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v48 <= v45)
    v48 = v45;
  if (v46 > v47)
    v47 = v46;
  if (v47 > v48)
    v48 = v47;
  v49 = v34 + ((v35 + v9) & ~v35);
  if (v98)
    v50 = v6;
  else
    v50 = v6 + 1;
  v51 = v50 + v90 + ((v49 + v92) & ~v92);
  v52 = *(_QWORD *)(v91 - 8);
  v53 = (v9 + *(unsigned __int8 *)(v52 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  v54 = *(_DWORD *)(v52 + 84);
  v55 = (v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  v56 = *(_QWORD *)(v52 + 64);
  if (!v54)
    ++v56;
  v57 = v56 + v53;
  v58 = ((v55 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 > v58)
    v58 = v9;
  v59 = (((((v51 & ~v90) + v95 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v59 <= v95 + ((v50 + v90 + ((v9 + v92) & ~v92)) & ~v90) + 16)
    v59 = v95 + ((v50 + v90 + ((v9 + v92) & ~v92)) & ~v90) + 16;
  v60 = ((v55 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v60 <= v57)
    v60 = v57;
  if (v58 > v59)
    v59 = v58;
  if (v59 > v60)
    v60 = v59;
  v61 = v60 + 1;
  if (v61 <= v48 + 1)
    v61 = v48 + 1;
  v62 = (((v31 | v8)
        + ((((((((((((v50 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v90 + 9) & ~v90) + v95 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8) & ~(v31 | v8))
      + ((((((((((((v38 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v31 + 9) & ~v31) + v32 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8);
  v63 = v100 + 2;
  if (v99 > v100 + 2)
    v63 = v100 + 1;
  if (v63 <= v96 + v9)
    v63 = v96 + v9;
  if (v63 <= v101)
    v63 = v101;
  if (v63 <= v97)
    v63 = v97;
  v64 = ((v36 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v63 > v64)
    v64 = v63;
  if (v64 <= v87)
    v64 = v87;
  if (v64 > v34)
    v34 = v64;
  if (v34 <= v101 + 2)
    v34 = v101 + 2;
  if (v34 <= ((v100 + 9) & 0xFFFFFFFFFFFFFFF8) + 8)
    v34 = ((v100 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v34 <= (v100 & 0xFFFFFFFFFFFFFFF8) + 16)
    v34 = (v100 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v34 <= ((v93 + 1) & ~v93) + v99)
    v34 = ((v93 + 1) & ~v93) + v99;
  if (v34 <= v61 + 1)
    v34 = v61 + 1;
  if (v34 <= ((((((v62 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8)
    v34 = ((((((v62 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v34 <= 0x38)
    v34 = 56;
  if (v34 > 3)
  {
    v65 = 40;
    goto LABEL_70;
  }
  v66 = ((1 << (8 * v34)) + 5) >> (8 * v34);
  if (v66 <= 0xFFD8)
  {
    v65 = v66 + 39;
    if (v66 > 0xD8)
    {
      v68 = 16;
      v67 = a2;
LABEL_71:
      v69 = (1 << v68) - v65;
      if ((v69 & 0x80000000) != 0)
        v69 = 0x7FFFFFFF;
      if (v34 > 3)
        goto LABEL_79;
LABEL_76:
      v70 = ((1 << (8 * v34)) + 5) >> (8 * v34);
      v71 = 2;
      if (v70 > 0xFFD8)
        v71 = 4;
      if (v70 > 0xD8)
        goto LABEL_80;
      goto LABEL_79;
    }
LABEL_70:
    v67 = a2;
    v68 = 8;
    goto LABEL_71;
  }
  v69 = 0x7FFFFFFF;
  v67 = a2;
  if (v34 <= 3)
    goto LABEL_76;
LABEL_79:
  v71 = 1;
LABEL_80:
  if (!v67)
    return 0;
  if (v67 <= v69)
    goto LABEL_98;
  v72 = v71 + v34;
  v73 = 8 * v72;
  if (v72 <= 3)
  {
    v75 = ((v67 - v69 + ~(-1 << v73)) >> v73) + 1;
    if (HIWORD(v75))
    {
      v74 = *(_DWORD *)(a1 + v72);
      if (!v74)
        goto LABEL_98;
      goto LABEL_91;
    }
    if (v75 > 0xFF)
    {
      v74 = *(unsigned __int16 *)(a1 + v72);
      if (!*(_WORD *)(a1 + v72))
        goto LABEL_98;
      goto LABEL_91;
    }
    if (v75 < 2)
    {
LABEL_98:
      if (v69)
      {
        if (v34 < 4)
        {
          v82 = ((1 << (8 * v34)) + 5) >> (8 * v34);
          if (v82 > 0xFFD8)
          {
            v78 = *(_DWORD *)(a1 + v34);
          }
          else if (v82 >= 0xD9)
          {
            v78 = *(unsigned __int16 *)(a1 + v34) | 0xFFFF0000;
          }
          else
          {
            v78 = *(unsigned __int8 *)(a1 + v34) | 0xFFFFFF00;
          }
          v79 = ~v78;
          if (v82 > 0xFFD8)
          {
LABEL_111:
            v84 = 0x7FFFFFFF;
LABEL_112:
            if (v84 > v79)
              return -v78;
            else
              return 0;
          }
          v80 = v82 + 39;
          if (v82 > 0xD8)
          {
            v83 = 16;
LABEL_110:
            v84 = (1 << v83) - v80;
            if ((v84 & 0x80000000) == 0)
              goto LABEL_112;
            goto LABEL_111;
          }
        }
        else
        {
          v77 = *(unsigned __int8 *)(a1 + v34);
          v78 = v77 | 0xFFFFFF00;
          v79 = v77 ^ 0xFF;
          v80 = 40;
        }
        v83 = 8;
        goto LABEL_110;
      }
      return 0;
    }
  }
  v74 = *(unsigned __int8 *)(a1 + v72);
  if (!*(_BYTE *)(a1 + v72))
    goto LABEL_98;
LABEL_91:
  v76 = (v74 - 1) << v73;
  if (v72 > 3)
    v76 = 0;
  if ((_DWORD)v72)
  {
    if (v72 > 3)
      LODWORD(v72) = 4;
    __asm { BR              X12 }
  }
  return v69 + v76 + 1;
}

void sub_23ABBC9F4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  int v65;
  _BYTE *v66;
  unsigned int v67;
  unsigned int v68;
  char v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  size_t v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;

  v5 = *(_QWORD *)(a4 + 16);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v83 = *(_QWORD *)(a4 + 24);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v88 = (v7 + v9) & ~v9;
  v10 = *(_QWORD *)(v8 + 64);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_QWORD *)(v8 + 64);
  v91 = v11 + 1;
  v92 = v11;
  v12 = *(unsigned __int8 *)(v6 + 80);
  v85 = v12 | v9;
  v93 = (((v12 | v9) + v11 + 1) & ~(v12 | v9)) + v11 + 1;
  v90 = *(_DWORD *)(v6 + 84);
  v86 = v5;
  v13 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v14 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v15 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v16 = *(_DWORD *)(v15 + 84);
  v84 = v12;
  v17 = *(unsigned __int8 *)(v14 + 80);
  v18 = *(_DWORD *)(v13 + 80) & 0xF8 | v17 | 7;
  v82 = v18;
  v87 = ((((*(_QWORD *)(v14 + 64) + ((v17 + ((*(_QWORD *)(v13 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v17) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v19 = *(unsigned __int8 *)(v15 + 80);
  v81 = (v19 | 7) + 16;
  v20 = *(_QWORD *)(v15 + 64);
  v21 = v16 == 0;
  v22 = 7;
  if (v21)
    v22 = 8;
  v23 = ((((((((((v22
                + v20
                + ((v19
                  + ((((((v20 + ((v20 + v19 + ((v19 + 12) & ~v19)) & ~v19) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 10) & ~v19)) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  v24 = (((v23 + ((v81 + ((((v7 + v12) & ~v12) + v7 + v18) & ~v18) + v87) & ~(v19 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v79 = v24 + 16;
  v25 = v18 | v12 | v19;
  v89 = ((v24 + ((v24 + 16 + v25) & ~v25) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v80 = *(_DWORD *)(v8 + 84);
  v26 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v27 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = (v28 + ((*(_QWORD *)(v26 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v28;
  v30 = *(_DWORD *)(v26 + 80) & 0xF8 | v28 | 7;
  v31 = ((((*(_QWORD *)(v27 + 64) + v29 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v32 = (((v23 + ((v81 + ((((v10 + v9) & ~v9) + v10 + v30) & ~v30) + v31) & ~(v19 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = v32 + 16;
  v34 = v30 | v9 | v19;
  v35 = v32 + ((v32 + 16 + v34) & ~v34);
  v36 = v79 + ((v25 + v7) & ~v25);
  if (v80)
    v37 = v10;
  else
    v37 = v10 + 1;
  v38 = v37 + v30 + ((v36 + v9) & ~v9);
  v39 = *(_QWORD *)(v86 - 8);
  v40 = (v7 + *(unsigned __int8 *)(v39 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  v41 = *(_DWORD *)(v39 + 84);
  v42 = (v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = *(_QWORD *)(v39 + 64);
  if (!v41)
    ++v43;
  v44 = v43 + v40;
  v45 = ((v42 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v46 = (((((v38 & ~v30) + v31 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 > v45)
    v45 = v7;
  if (v46 <= v31 + ((v37 + v30 + v88) & ~v30) + 16)
    v46 = v31 + ((v37 + v30 + v88) & ~v30) + 16;
  v47 = ((v42 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v47 <= v44)
    v47 = v44;
  if (v45 > v46)
    v46 = v45;
  if (v46 > v47)
    v47 = v46;
  v48 = v33 + ((v34 + v10) & ~v34);
  if (v90)
    v49 = v7;
  else
    v49 = v7 + 1;
  v50 = v49 + v82 + ((v48 + v84) & ~v84);
  v51 = *(_QWORD *)(v83 - 8);
  v52 = (v10 + *(unsigned __int8 *)(v51 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
  v53 = *(_DWORD *)(v51 + 84);
  v54 = (v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  v55 = *(_QWORD *)(v51 + 64);
  if (!v53)
    ++v55;
  v56 = v55 + v52;
  v57 = ((v54 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v10 > v57)
    v57 = v10;
  v58 = (((((v50 & ~v82) + v87 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v58 <= v87 + ((v49 + v82 + ((v10 + v84) & ~v84)) & ~v82) + 16)
    v58 = v87 + ((v49 + v82 + ((v10 + v84) & ~v84)) & ~v82) + 16;
  v59 = ((v54 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v59 <= v56)
    v59 = v56;
  if (v57 > v58)
    v58 = v57;
  if (v58 > v59)
    v59 = v58;
  v60 = v59 + 1;
  if (v60 <= v47 + 1)
    v60 = v47 + 1;
  v61 = (((v30 | v9)
        + ((((((((((((v49 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v82 + 9) & ~v82) + v87 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8) & ~(v30 | v9))
      + ((((((((((((v37 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v30 + 9) & ~v30) + v31 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8);
  v62 = v92 + 2;
  if (v91 > v92 + 2)
    v62 = v92 + 1;
  if (v62 <= v88 + v10)
    v62 = v88 + v10;
  if (v62 <= v93)
    v62 = v93;
  if (v62 <= v89)
    v62 = v89;
  v63 = ((v35 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v62 > v63)
    v63 = v62;
  if (v63 <= v79)
    v63 = v79;
  if (v63 > v33)
    v33 = v63;
  if (v33 <= v93 + 2)
    v33 = v93 + 2;
  if (v33 <= ((v92 + 9) & 0xFFFFFFFFFFFFFFF8) + 8)
    v33 = ((v92 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v33 <= (v92 & 0xFFFFFFFFFFFFFFF8) + 16)
    v33 = (v92 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v33 <= ((v85 + 1) & ~v85) + v91)
    v33 = ((v85 + 1) & ~v85) + v91;
  if (v33 <= v60 + 1)
    v33 = v60 + 1;
  if (v33 <= ((((((v61 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8)
    v33 = ((((((v61 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v33 <= 0x38)
    v33 = 56;
  v64 = 8 * v33;
  if (v33 <= 3)
  {
    v73 = ((1 << v64) + 5) >> v64;
    if (v73 > 0xFFD8)
    {
      v70 = 0x7FFFFFFF;
      v66 = a1;
      v68 = a3;
      v67 = a2;
      if (v33 > 3)
        goto LABEL_80;
      goto LABEL_72;
    }
    v65 = v73 + 39;
    if (v73 > 0xD8)
    {
      v69 = 16;
      v66 = a1;
      v68 = a3;
      v67 = a2;
LABEL_69:
      v70 = (1 << v69) - v65;
      if ((v70 & 0x80000000) != 0)
        v70 = 0x7FFFFFFF;
      if (v33 > 3)
        goto LABEL_80;
LABEL_72:
      v71 = ((1 << v64) + 5) >> v64;
      v72 = 2;
      if (v71 > 0xFFD8)
        v72 = 4;
      if (v71 > 0xD8)
      {
LABEL_81:
        v74 = v72 + v33;
        if (v68 <= v70)
        {
          v75 = 0;
        }
        else if (v74 <= 3)
        {
          v77 = ((v68 - v70 + ~(-1 << (8 * v74))) >> (8 * v74)) + 1;
          if (HIWORD(v77))
          {
            v75 = 4u;
          }
          else if (v77 >= 0x100)
          {
            v75 = 2;
          }
          else
          {
            v75 = v77 > 1;
          }
        }
        else
        {
          v75 = 1u;
        }
        if (v70 < v67)
        {
          v76 = ~v70 + v67;
          if (v74 < 4)
          {
            if ((_DWORD)v74)
            {
              v78 = v76 & ~(-1 << (8 * v74));
              bzero(v66, v74);
              if ((_DWORD)v74 == 3)
              {
                *(_WORD *)v66 = v78;
                v66[2] = BYTE2(v78);
              }
              else if ((_DWORD)v74 == 2)
              {
                *(_WORD *)v66 = v78;
              }
              else
              {
                *v66 = v78;
              }
            }
          }
          else
          {
            bzero(v66, v74);
            *(_DWORD *)v66 = v76;
          }
          __asm { BR              X10 }
        }
        __asm { BR              X12 }
      }
LABEL_80:
      v72 = 1;
      goto LABEL_81;
    }
  }
  else
  {
    v65 = 40;
  }
  v66 = a1;
  v68 = a3;
  v67 = a2;
  v69 = 8;
  goto LABEL_69;
}

uint64_t sub_23ABBD2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t result;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v71 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v76 = (v5 + v7) & ~v7;
  v8 = *(_QWORD *)(v6 + 64);
  if (v8 <= v5)
    v9 = v5;
  else
    v9 = *(_QWORD *)(v6 + 64);
  v79 = v9 + 1;
  v80 = v9;
  v10 = *(unsigned __int8 *)(v4 + 80);
  v73 = v10 | v7;
  v81 = (((v10 | v7) + v9 + 1) & ~(v10 | v7)) + v9 + 1;
  v78 = *(_DWORD *)(v4 + 84);
  v74 = v3;
  v11 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v13 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v14 = *(_DWORD *)(v13 + 84);
  v15 = v10;
  v72 = v10;
  v16 = *(unsigned __int8 *)(v12 + 80);
  v17 = *(_DWORD *)(v11 + 80) & 0xF8 | v16 | 7;
  v70 = v17;
  v75 = ((((*(_QWORD *)(v12 + 64) + ((v16 + ((*(_QWORD *)(v11 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v16) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v18 = *(unsigned __int8 *)(v13 + 80);
  v69 = (v18 | 7) + 16;
  v19 = (v69 + ((((v5 + v10) & ~v10) + v5 + v17) & ~v17) + v75) & ~(v18 | 7);
  v20 = *(_QWORD *)(v13 + 64);
  v21 = v14 == 0;
  v22 = 7;
  if (v21)
    v22 = 8;
  v23 = ((((((((((v22
                + v20
                + ((v18
                  + ((((((v20 + ((v20 + v18 + ((v18 + 12) & ~v18)) & ~v18) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 10) & ~v18)) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  v24 = (((v23 + v19) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v67 = v24 + 16;
  v25 = v17 | v15 | v18;
  v77 = ((v24 + ((v24 + 16 + v25) & ~v25) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  v68 = *(_DWORD *)(v6 + 84);
  v26 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v27 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = (v28 + ((*(_QWORD *)(v26 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v28;
  v30 = *(_DWORD *)(v26 + 80) & 0xF8 | v28 | 7;
  v31 = ((((*(_QWORD *)(v27 + 64) + v29 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v32 = (((v23 + ((v69 + ((((v8 + v7) & ~v7) + v8 + v30) & ~v30) + v31) & ~(v18 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = v32 + 16;
  v34 = v30 | v7 | v18;
  v35 = v32 + ((v32 + 16 + v34) & ~v34);
  v36 = v67 + ((v25 + v5) & ~v25);
  if (v68)
    v37 = v8;
  else
    v37 = v8 + 1;
  v38 = v37 + v30 + ((v36 + v7) & ~v7);
  v39 = *(_QWORD *)(v74 - 8);
  v40 = (v5 + *(unsigned __int8 *)(v39 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  v41 = *(_DWORD *)(v39 + 84);
  v42 = (v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = *(_QWORD *)(v39 + 64);
  if (!v41)
    ++v43;
  v44 = v43 + v40;
  v45 = ((v42 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v46 = (((((v38 & ~v30) + v31 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v5 > v45)
    v45 = v5;
  if (v46 <= v31 + ((v37 + v30 + v76) & ~v30) + 16)
    v46 = v31 + ((v37 + v30 + v76) & ~v30) + 16;
  v47 = ((v42 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v47 <= v44)
    v47 = v44;
  if (v45 > v46)
    v46 = v45;
  if (v46 > v47)
    v47 = v46;
  v48 = v33 + ((v34 + v8) & ~v34);
  if (v78)
    v49 = v5;
  else
    v49 = v5 + 1;
  v50 = v49 + v70 + ((v48 + v72) & ~v72);
  v51 = *(_QWORD *)(v71 - 8);
  v52 = (v8 + *(unsigned __int8 *)(v51 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
  v53 = *(_DWORD *)(v51 + 84);
  v54 = (v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  v55 = *(_QWORD *)(v51 + 64);
  if (!v53)
    ++v55;
  v56 = v55 + v52;
  v57 = ((v54 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 > v57)
    v57 = v8;
  v58 = (((((v50 & ~v70) + v75 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v58 <= v75 + ((v49 + v70 + ((v8 + v72) & ~v72)) & ~v70) + 16)
    v58 = v75 + ((v49 + v70 + ((v8 + v72) & ~v72)) & ~v70) + 16;
  v59 = ((v54 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v59 <= v56)
    v59 = v56;
  if (v57 > v58)
    v58 = v57;
  if (v58 > v59)
    v59 = v58;
  v60 = v59 + 1;
  if (v60 <= v47 + 1)
    v60 = v47 + 1;
  v61 = (((v30 | v7)
        + ((((((((((((v49 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v70 + 9) & ~v70) + v75 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8) & ~(v30 | v7))
      + ((((((((((((v37 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v30 + 9) & ~v30) + v31 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8);
  v62 = v80 + 2;
  if (v79 > v80 + 2)
    v62 = v80 + 1;
  if (v62 <= v76 + v8)
    v62 = v76 + v8;
  if (v62 <= v81)
    v62 = v81;
  if (v62 <= v77)
    v62 = v77;
  v63 = ((v35 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v62 > v63)
    v63 = v62;
  if (v63 <= v67)
    v63 = v67;
  if (v63 > v33)
    v33 = v63;
  if (v33 <= v81 + 2)
    v33 = v81 + 2;
  if (v33 <= ((v80 + 9) & 0xFFFFFFFFFFFFFFF8) + 8)
    v33 = ((v80 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v33 <= (v80 & 0xFFFFFFFFFFFFFFF8) + 16)
    v33 = (v80 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v33 <= ((v73 + 1) & ~v73) + v79)
    v33 = ((v73 + 1) & ~v73) + v79;
  if (v33 <= v60 + 1)
    v33 = v60 + 1;
  if (v33 <= ((((((v61 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8)
    v33 = ((((((v61 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v33 <= 0x38)
    v33 = 56;
  if (v33 > 3)
    goto LABEL_67;
  v65 = ((1 << (8 * v33)) + 5) >> (8 * v33);
  if (v65 > 0xFFD8)
  {
    result = *(unsigned int *)(a1 + v33);
  }
  else
  {
    if (v65 <= 0xD8)
    {
LABEL_67:
      result = *(unsigned __int8 *)(a1 + v33);
      goto LABEL_72;
    }
    result = *(unsigned __int16 *)(a1 + v33);
  }
LABEL_72:
  if (result >= 0x27)
  {
    if (v33 <= 3)
      v66 = v33;
    else
      v66 = 4;
    __asm { BR              X12 }
  }
  return result;
}

unint64_t sub_23ABBDA24(char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t result;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  size_t v66;
  void *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  int v72;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v79 = *(_QWORD *)(a3 + 24);
  v77 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(unsigned __int8 *)(v77 + 80);
  v88 = (v6 + v7) & ~v7;
  v8 = *(_QWORD *)(v77 + 64);
  v9 = v88 + v8;
  if (v8 <= v6)
    v10 = v6;
  else
    v10 = *(_QWORD *)(v77 + 64);
  v83 = v10 + 1;
  v84 = v10;
  if (v10 + 1 > v9)
    v9 = v10 + 1;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v85 = v12 | v7;
  v11 = v10 + 1;
  v82 = (((v12 | v7) + v11) & ~(v12 | v7)) + v11;
  if (v82 <= v9)
    v13 = v9;
  else
    v13 = (((v12 | v7) + v11) & ~(v12 | v7)) + v11;
  v89 = *(_DWORD *)(v5 + 84);
  v87 = v4;
  v14 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v15 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v16 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v17 = *(_DWORD *)(v16 + 84);
  v18 = v12;
  v19 = *(unsigned __int8 *)(v15 + 80);
  v80 = v12;
  v81 = *(_DWORD *)(v14 + 80) & 0xF8 | v19 | 7;
  v86 = ((((*(_QWORD *)(v15 + 64) + ((v19 + ((*(_QWORD *)(v14 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v19) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v21 = *(unsigned __int8 *)(v16 + 80);
  v76 = (v21 | 7) + 16;
  v22 = *(_QWORD *)(v16 + 64);
  v23 = v17 == 0;
  v24 = 7;
  if (v23)
    v24 = 8;
  v75 = ((((((((((v24
                + v22
                + ((v21
                  + ((((((v22 + ((v22 + v21 + ((v21 + 12) & ~v21)) & ~v21) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 10) & ~v21)) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  v20 = *(_DWORD *)(v14 + 80) & 0xF8 | v19 | 7;
  v25 = (((v75 + ((v76 + ((((v6 + v12) & ~v12) + v6 + v20) & ~v20) + v86) & ~(v21 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v26 = v25 + 16;
  v27 = v20 | v18 | v21;
  v28 = ((v25 + ((v25 + 16 + v27) & ~v27) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v28 <= v13)
    v28 = v13;
  v74 = v28;
  v78 = *(_DWORD *)(v77 + 84);
  v29 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v30 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v31 = *(unsigned __int8 *)(v30 + 80);
  v32 = *(_DWORD *)(v29 + 80) & 0xF8 | v31 | 7;
  v33 = ((((*(_QWORD *)(v30 + 64) + ((v31 + ((*(_QWORD *)(v29 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v31) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v34 = (((v75 + ((v76 + ((((v8 + v7) & ~v7) + v8 + v32) & ~v32) + v33) & ~(v21 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = v34 + 16;
  v36 = v32 | v7 | v21;
  v37 = ((v34 + ((v34 + 16 + v36) & ~v36) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v37 <= v74)
    v37 = v74;
  if (v26 > v37)
    v37 = v26;
  v38 = v82 + 2;
  if (v35 > v37)
    v37 = v35;
  if (v83 > v37)
    v37 = v84 + 1;
  if (v38 <= v37)
    v38 = v37;
  v39 = v84 + 2;
  if (((v84 + 9) & 0xFFFFFFFFFFFFFFF8) + 8 > v38)
    v38 = ((v84 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v39 > v38)
    v38 = v84 + 2;
  if ((v84 & 0xFFFFFFFFFFFFFFF8) + 16 > v38)
    v38 = (v84 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v38 <= v83)
    v38 = v84 + 1;
  if (v38 <= v88 + v8)
    v38 = v88 + v8;
  if (v38 <= ((v85 + 1) & ~v85) + v83)
    v38 = ((v85 + 1) & ~v85) + v83;
  if (v38 <= v83)
    v40 = v84 + 1;
  else
    v40 = v38;
  v41 = v26 + ((v27 + v6) & ~v27);
  v42 = (v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = ((v42 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v44 = (v41 + v7) & ~v7;
  if (v78)
    v45 = v8;
  else
    v45 = v8 + 1;
  v46 = ((((((v45 + v32 + v44) & ~v32) + v33 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v46 > v43)
    v43 = v46;
  if (v33 + ((v45 + v32 + v88) & ~v32) + 16 > v43)
    v43 = v33 + ((v45 + v32 + v88) & ~v32) + 16;
  v47 = ((v42 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v47 <= v43)
    v47 = v43;
  if (v6 > v47)
    v47 = v6;
  v48 = *(_QWORD *)(v87 - 8);
  v49 = (v6 + *(unsigned __int8 *)(v48 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
  v50 = *(_DWORD *)(v48 + 84);
  v51 = *(_QWORD *)(v48 + 64);
  if (!v50)
    ++v51;
  v52 = v51 + v49;
  if (v52 > v47)
    v47 = v52;
  if (v6 > v47)
    v47 = v6;
  v53 = v35 + ((v36 + v8) & ~v36);
  v54 = (v53 + 7) & 0xFFFFFFFFFFFFFFF8;
  v55 = (v53 + v80) & ~v80;
  if (v89)
    v56 = v6;
  else
    v56 = v6 + 1;
  v57 = ((((((v56 + v81 + v55) & ~v81) + v86 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v57 <= ((v54 + 15) & 0xFFFFFFFFFFFFFFF8) + 8)
    v57 = ((v54 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v86 + ((v56 + v81 + ((v8 + v80) & ~v80)) & ~v81) + 16 > v57)
    v57 = v86 + ((v56 + v81 + ((v8 + v80) & ~v80)) & ~v81) + 16;
  v58 = ((v54 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v58 > v57)
    v57 = v58;
  if (v8 > v57)
    v57 = v8;
  v59 = *(_QWORD *)(v79 - 8);
  result = (v8 + *(unsigned __int8 *)(v59 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  v61 = *(_DWORD *)(v59 + 84);
  v62 = *(_QWORD *)(v59 + 64);
  if (!v61)
    ++v62;
  v63 = v62 + result;
  if (v63 > v57)
    v57 = v63;
  if (v8 > v57)
    v57 = v8;
  v64 = v57 + 1;
  if (v64 <= v47 + 1)
    v64 = v47 + 1;
  if (v40 <= v64 + 1)
    v40 = v64 + 1;
  if (v40 <= v39)
    v40 = v84 + 2;
  if (v40 <= v83)
    v40 = v84 + 1;
  if (v40 <= v82)
    v40 = v82;
  if (v40 <= v83)
    v40 = v84 + 1;
  v65 = (((((((((v32 | v7)
              + ((((((((((((v56 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v81 + 9) & ~v81) + v86 + 34) & 0xFFFFFFFFFFFFFFF8)
                  + 63) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 8) & ~(v32 | v7))
            + ((((((((((((v45 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v32 + 9) & ~v32) + v33 + 34) & 0xFFFFFFFFFFFFFFF8)
                + 63) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 8) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 39) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v40 > v65)
    v65 = v40;
  if (v65 <= v39)
    v65 = v84 + 2;
  if (v65 <= v83)
    v65 = v84 + 1;
  if (v65 <= 0x38)
    v66 = 56;
  else
    v66 = v65;
  if (a2 > 0x26)
  {
    if (v66 < 4)
    {
      v69 = ((a2 - 39) >> (8 * v66)) + 39;
      v67 = a1;
      v70 = (unsigned int *)&a1[v66];
      v71 = ((1 << (8 * v66)) + 5) >> (8 * v66);
      if (v71 > 0xFFD8)
      {
        *v70 = v69;
      }
      else if (v71 > 0xD8)
      {
        *(_WORD *)v70 = v69;
      }
      else
      {
        *(_BYTE *)v70 = v69;
      }
    }
    else
    {
      v67 = a1;
      a1[v66] = 39;
    }
    if (v66 >= 4)
      v72 = 4;
    else
      v72 = v66;
    bzero(v67, v66);
    __asm { BR              X10 }
  }
  if (v66 > 3)
    goto LABEL_95;
  v68 = ((1 << (8 * v66)) + 5) >> (8 * v66);
  if (v68 > 0xFFD8)
  {
    *(_DWORD *)&a1[v66] = a2;
  }
  else
  {
    if (v68 <= 0xD8)
    {
LABEL_95:
      a1[v66] = a2;
      return result;
    }
    *(_WORD *)&a1[v66] = a2;
  }
  return result;
}

void sub_23ABBE23C()
{
  type metadata accessor for ItemReconciliation();
}

void sub_23ABBE280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v13 - 256) = a1;
  *(_QWORD *)(v13 - 264) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v13 - 272) = (char *)&a9 - v14;
  *(_QWORD *)(v13 - 120) = v11;
  *(_QWORD *)(v13 - 112) = v12;
  *(_QWORD *)(v13 - 104) = v9;
  *(_QWORD *)(v13 - 96) = v10;
  type metadata accessor for TestingOperation();
}

void sub_23ABBE2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;

  *(_QWORD *)(v13 - 280) = a1;
  *(_QWORD *)(v13 - 296) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v13 - 304) = (char *)&a9 - v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v16 = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v13 - 144) = v9;
  *(_QWORD *)(v13 - 160) = v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v13 - 152) = v10;
  *(_QWORD *)(v13 - 168) = v12;
  v18 = swift_getAssociatedConformanceWitness();
  *(_QWORD *)(v13 - 120) = AssociatedTypeWitness;
  *(_QWORD *)(v13 - 112) = v16;
  *(_QWORD *)(v13 - 104) = AssociatedConformanceWitness;
  *(_QWORD *)(v13 - 96) = v18;
  type metadata accessor for ThrottlingKey();
}

void sub_23ABBE3BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v5 - 208) = v3;
  *(_QWORD *)(v5 - 200) = v4;
  *(_QWORD *)(v5 - 120) = v3;
  *(_QWORD *)(v5 - 112) = v4;
  *(_QWORD *)(v5 - 224) = v2;
  *(_QWORD *)(v5 - 216) = v1;
  *(_QWORD *)(v5 - 104) = v2;
  *(_QWORD *)(v5 - 96) = v1;
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23ABBE404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int EnumCaseMultiPayload;

  v12 = sub_23B1C6C98();
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v10 - 240) = v12;
  *(_QWORD *)(v10 - 232) = v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  *(_QWORD *)(v10 - 248) = (char *)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  *(_QWORD *)(v10 - 288) = (char *)&a9 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v19 = MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v10 - 184) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v10 - 176) = a1;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v23 = MEMORY[0x24BDAC7A8](v22);
  *(_QWORD *)(v10 - 192) = (char *)&a9 - v24;
  MEMORY[0x24BDAC7A8](v23);
  (*(void (**)(char *, _QWORD, uint64_t))(v26 + 16))((char *)&a9 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), *(_QWORD *)(v10 - 128), v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_23ABBE594 + 4 * word_23B1D0EAE[EnumCaseMultiPayload]))();
}

void sub_23ABBE594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v1 - 208);
  v3 = *(_QWORD *)(v1 - 200);
  v4 = v0 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = *(_QWORD *)(v1 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v6 + *(int *)(TupleTypeMetadata2 + 48), v0, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(v6, v4, v3);
  v7 = *(_QWORD *)(v1 - 160);
  *(_QWORD *)(v1 - 120) = *(_QWORD *)(v1 - 168);
  *(_QWORD *)(v1 - 112) = v7;
  v8 = *(_QWORD *)(v1 - 144);
  *(_QWORD *)(v1 - 104) = *(_QWORD *)(v1 - 152);
  *(_QWORD *)(v1 - 96) = v8;
  type metadata accessor for PersistenceTrigger();
}

uint64_t sub_23ABBE62C()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_23ABC00C0()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23ABC01A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int EnumCaseMultiPayload;

  v11 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 16))((char *)&a9 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), *(_QWORD *)(v10 - 160), v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(void))((char *)sub_23ABC0238 + 4 * byte_23B1D0F08[EnumCaseMultiPayload]))();
}

void sub_23ABC0238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int8x16_t *v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, int8x16_t *))(v2 + 32))(v0, v1, v3);
  sub_23AEFF3FC(v3, *(_QWORD *)(v4 - 120));
}

void sub_23ABC025C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
  v4 = *(_QWORD *)(v3 - 136);
  *(_QWORD *)(v3 - 112) = *(_QWORD *)(v3 - 152);
  *(_QWORD *)(v3 - 104) = v4;
  v5 = *(_QWORD *)(v3 - 128);
  *(_QWORD *)(v3 - 96) = *(_QWORD *)(v3 - 144);
  *(_QWORD *)(v3 - 88) = v5;
  type metadata accessor for PersistenceTrigger.AffectedReconciliation();
}

uint64_t sub_23ABC0350()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_23ABC0380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 - 136);
  *(_QWORD *)(v0 - 112) = *(_QWORD *)(v0 - 152);
  *(_QWORD *)(v0 - 104) = v1;
  v2 = *(_QWORD *)(v0 - 128);
  *(_QWORD *)(v0 - 96) = *(_QWORD *)(v0 - 144);
  *(_QWORD *)(v0 - 88) = v2;
  type metadata accessor for PersistenceTrigger.AffectedReconciliation();
}

void sub_23ABC03A4()
{
  JUMPOUT(0x23ABC0354);
}

void type metadata accessor for PersistenceTrigger.AffectedReconciliation()
{
  JUMPOUT(0x23B861318);
}

void sub_23ABC03BC(int a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t AssociatedConformanceWitness;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v54 = a2;
  v68 = a1;
  v4 = a3[5];
  v5 = a3[3];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v55 = sub_23B1C6C98();
  v51 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v50 = (char *)v36 - v7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = type metadata accessor for ItemState(255, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v57 = sub_23B1C6C98();
  v56 = *(_QWORD *)(v57 - 8);
  v10 = MEMORY[0x24BDAC7A8](v57);
  v49 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v53 = (char *)v36 - v13;
  v60 = v9;
  v58 = *(_QWORD *)(v9 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v48 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v52 = (char *)v36 - v16;
  v17 = a3[2];
  v18 = a3[4];
  v20 = type metadata accessor for FileTreeError(255, v17, v18, v19);
  v37 = sub_23B1C6C98();
  v36[3] = *(_QWORD *)(v37 - 8);
  v21 = MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)v36 - v22;
  v41 = v20;
  v42 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v36[2] = (char *)v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v38 = (char *)v36 - v25;
  v26 = swift_getAssociatedTypeWitness();
  v66 = swift_getAssociatedConformanceWitness();
  v28 = type metadata accessor for ItemState(255, v26, v66, v27);
  v45 = sub_23B1C6C98();
  v43 = *(_QWORD *)(v45 - 8);
  v29 = MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)v36 - v30;
  v47 = v28;
  v46 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v39 = (char *)v36 - v31;
  v65 = type metadata accessor for SnapshotItem(0, v17, v18, v32);
  v64 = *(_QWORD *)(v65 - 8);
  v33 = MEMORY[0x24BDAC7A8](v65);
  v59 = (char *)v36 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v61 = (char *)v36 - v35;
  v62 = v17;
  v69 = v17;
  v70 = v5;
  v63 = v18;
  v71 = v18;
  v72 = v4;
  type metadata accessor for PersistenceTrigger.AffectedReconciliation();
}

uint64_t sub_23ABC07D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(_BYTE *, _QWORD, uint64_t);
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t TupleTypeMetadata3;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(_BYTE *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  unint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, _BYTE *, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(uint64_t, uint64_t, uint64_t);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(uint64_t, uint64_t, uint64_t);
  uint64_t v186;
  void (*v187)(uint64_t, uint64_t);
  uint64_t v188;
  uint64_t v189;
  unsigned int (*v190)(uint64_t, uint64_t, uint64_t);
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  BOOL v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE v211[96];

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v6 - 232) = TupleTypeMetadata2;
  *(_QWORD *)(v6 - 304) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  *(_QWORD *)(v6 - 416) = &v211[-v10];
  *(_QWORD *)(v6 - 296) = a1;
  *(_QWORD *)(v6 - 400) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v9);
  *(_QWORD *)(v6 - 424) = &v211[-v11];
  *(_QWORD *)(v6 - 376) = v5;
  *(_QWORD *)(v6 - 368) = v4;
  v13 = type metadata accessor for SnapshotItem(0, v5, v4, v12);
  *(_QWORD *)(v6 - 336) = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  *(_QWORD *)(v6 - 432) = &v211[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x24BDAC7A8](v14);
  *(_QWORD *)(v6 - 760) = &v211[-v17];
  v18 = MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v6 - 752) = &v211[-v19];
  v20 = MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v6 - 768) = &v211[-v21];
  MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v6 - 744) = &v211[-v22];
  *(_QWORD *)(v6 - 408) = v23;
  v24 = sub_23B1C6C98();
  *(_QWORD *)(v6 - 472) = v24;
  *(_QWORD *)(v6 - 480) = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x24BDAC7A8](v24);
  *(_QWORD *)(v6 - 672) = &v211[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = MEMORY[0x24BDAC7A8](v25);
  *(_QWORD *)(v6 - 664) = &v211[-v28];
  v29 = MEMORY[0x24BDAC7A8](v27);
  *(_QWORD *)(v6 - 680) = &v211[-v30];
  v31 = MEMORY[0x24BDAC7A8](v29);
  *(_QWORD *)(v6 - 632) = &v211[-v32];
  v33 = MEMORY[0x24BDAC7A8](v31);
  *(_QWORD *)(v6 - 440) = &v211[-v34];
  v35 = MEMORY[0x24BDAC7A8](v33);
  *(_QWORD *)(v6 - 352) = &v211[-v36];
  *(_QWORD *)(v6 - 288) = v2;
  *(_QWORD *)(v6 - 320) = *(_QWORD *)(v2 - 8);
  v37 = MEMORY[0x24BDAC7A8](v35);
  *(_QWORD *)(v6 - 800) = &v211[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v39 = MEMORY[0x24BDAC7A8](v37);
  *(_QWORD *)(v6 - 448) = &v211[-v40];
  v41 = MEMORY[0x24BDAC7A8](v39);
  *(_QWORD *)(v6 - 528) = &v211[-((v42 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v43 = MEMORY[0x24BDAC7A8](v41);
  *(_QWORD *)(v6 - 536) = &v211[-v44];
  v45 = MEMORY[0x24BDAC7A8](v43);
  *(_QWORD *)(v6 - 544) = &v211[-v46];
  v47 = MEMORY[0x24BDAC7A8](v45);
  *(_QWORD *)(v6 - 512) = &v211[-v48];
  v49 = MEMORY[0x24BDAC7A8](v47);
  *(_QWORD *)(v6 - 584) = &v211[-v50];
  v51 = MEMORY[0x24BDAC7A8](v49);
  *(_QWORD *)(v6 - 560) = &v211[-v52];
  v53 = MEMORY[0x24BDAC7A8](v51);
  *(_QWORD *)(v6 - 600) = &v211[-v54];
  v55 = MEMORY[0x24BDAC7A8](v53);
  *(_QWORD *)(v6 - 568) = &v211[-v56];
  v57 = MEMORY[0x24BDAC7A8](v55);
  *(_QWORD *)(v6 - 496) = &v211[-v58];
  v59 = MEMORY[0x24BDAC7A8](v57);
  *(_QWORD *)(v6 - 616) = &v211[-v60];
  v61 = MEMORY[0x24BDAC7A8](v59);
  *(_QWORD *)(v6 - 592) = &v211[-v62];
  v63 = MEMORY[0x24BDAC7A8](v61);
  *(_QWORD *)(v6 - 608) = &v211[-v64];
  v65 = MEMORY[0x24BDAC7A8](v63);
  *(_QWORD *)(v6 - 576) = &v211[-v66];
  v67 = MEMORY[0x24BDAC7A8](v65);
  *(_QWORD *)(v6 - 520) = &v211[-v68];
  v69 = MEMORY[0x24BDAC7A8](v67);
  v71 = &v211[-v70];
  v72 = MEMORY[0x24BDAC7A8](v69);
  *(_QWORD *)(v6 - 552) = &v211[-v73];
  v74 = MEMORY[0x24BDAC7A8](v72);
  v76 = &v211[-v75];
  v77 = MEMORY[0x24BDAC7A8](v74);
  v79 = &v211[-v78];
  v80 = MEMORY[0x24BDAC7A8](v77);
  v82 = &v211[-v81];
  v83 = MEMORY[0x24BDAC7A8](v80);
  v85 = &v211[-v84];
  v86 = MEMORY[0x24BDAC7A8](v83);
  v88 = &v211[-v87];
  *(_QWORD *)(v6 - 264) = v3;
  *(_QWORD *)(v6 - 312) = *(_QWORD *)(v3 - 8);
  v89 = MEMORY[0x24BDAC7A8](v86);
  *(_QWORD *)(v6 - 456) = &v211[-((v90 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v91 = MEMORY[0x24BDAC7A8](v89);
  *(_QWORD *)(v6 - 696) = &v211[-v92];
  v93 = MEMORY[0x24BDAC7A8](v91);
  *(_QWORD *)(v6 - 920) = &v211[-v94];
  v95 = MEMORY[0x24BDAC7A8](v93);
  *(_QWORD *)(v6 - 704) = &v211[-v96];
  v97 = MEMORY[0x24BDAC7A8](v95);
  *(_QWORD *)(v6 - 328) = &v211[-v98];
  v99 = MEMORY[0x24BDAC7A8](v97);
  *(_QWORD *)(v6 - 728) = &v211[-v100];
  v101 = MEMORY[0x24BDAC7A8](v99);
  v102 = MEMORY[0x24BDAC7A8](v101);
  *(_QWORD *)(v6 - 776) = &v211[-v103];
  MEMORY[0x24BDAC7A8](v102);
  *(_QWORD *)(v6 - 248) = v104;
  v105 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v104 + 16);
  v105(v88, *(_QWORD *)(v6 - 240), v1);
  *(_QWORD *)(v6 - 224) = v88;
  *(_QWORD *)(v6 - 216) = v1;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v105(v85, *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v106 = *(_QWORD *)(v6 - 264);
      v107 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 240) = &v85[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(_QWORD, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 312) + 32))(*(_QWORD *)(v6 - 328), v85, v106);
      sub_23B1C7310();
      swift_allocObject();
      sub_23B1C6728();
      *v108 = 2;
      *(_QWORD *)(v6 - 208) = v106;
      *(_QWORD *)(v6 - 200) = v107;
      v109 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v109;
      type metadata accessor for ReconciliationID();
    case 2u:
      v105(v82, *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v110 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
      *(_QWORD *)(v6 - 200) = v110;
      v111 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v111;
      type metadata accessor for ReconciliationID();
    case 4u:
      v105(*(_BYTE **)(v6 - 520), *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v112 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
      *(_QWORD *)(v6 - 200) = v112;
      v113 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v113;
      type metadata accessor for ReconciliationID();
    case 5u:
      v105(v76, *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v114 = *(_QWORD *)(v6 - 344);
      v115 = sub_23B1C6C98();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      v117 = &v76[*(int *)(TupleTypeMetadata3 + 48)];
      v118 = *(_QWORD *)&v76[*(int *)(TupleTypeMetadata3 + 64)];
      v119 = *(_QWORD *)(v6 - 360);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v119 + 48))(v76, 1, v114) == 1)
      {
        v120 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v115 - 8) + 8);
        v120(v117, v115);
        v120(v76, v115);
LABEL_31:
        v169 = sub_23B1C6758();
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 248) + 8))(*(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      }
      else
      {
        *(_QWORD *)(v6 - 240) = v117;
        v170 = *(_QWORD *)(v6 - 464);
        (*(void (**)(uint64_t, _BYTE *, uint64_t))(v119 + 32))(v170, v76, v114);
        *(_QWORD *)(v6 - 152) = sub_23B1C6758();
        v171 = *(_QWORD *)(v6 - 264);
        v172 = *(_QWORD *)(v6 - 288);
        v173 = *(_QWORD *)(v6 - 424);
        if ((v118 & 2) != 0)
        {
          (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v6 - 312) + 16))(*(_QWORD *)(v6 - 424), v170 + *(int *)(v114 + 36), *(_QWORD *)(v6 - 264));
          *(_QWORD *)(v6 - 208) = v171;
          *(_QWORD *)(v6 - 200) = v172;
          v174 = *(_QWORD *)(v6 - 272);
          *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
          *(_QWORD *)(v6 - 184) = v174;
          type metadata accessor for ReconciliationID();
        }
        v175 = *(_QWORD *)(v6 - 216);
        if ((v118 & 3) != 0)
        {
          v176 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 312) + 16);
          *(_QWORD *)(v6 - 256) = v176;
          v176(v173, v170, v171);
          *(_QWORD *)(v6 - 208) = v171;
          *(_QWORD *)(v6 - 200) = v172;
          v177 = *(_QWORD *)(v6 - 272);
          *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
          *(_QWORD *)(v6 - 184) = v177;
          type metadata accessor for ReconciliationID();
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 360) + 8))(v170, v114);
        v169 = *(_QWORD *)(v6 - 152);
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v115 - 8) + 8))(*(_QWORD *)(v6 - 240), v115);
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v6 - 248) + 8))(*(_QWORD *)(v6 - 224), v175);
      }
      return v169;
    case 6u:
      *(_DWORD *)(v6 - 240) = *(_DWORD *)(v6 - 256);
      v105(v79, *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v121 = *(_QWORD *)(v6 - 472);
      v122 = swift_getTupleTypeMetadata3();
      v123 = &v79[*(int *)(v122 + 48)];
      v124 = *(_QWORD *)&v79[*(int *)(v122 + 64)];
      v125 = *(_QWORD *)(v6 - 480);
      v126 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v125 + 32);
      v126(*(_QWORD *)(v6 - 352), v79, v121);
      v127 = *(_QWORD *)(v6 - 440);
      v126(v127, v123, v121);
      *(_QWORD *)(v6 - 152) = sub_23B1C6758();
      v128 = *(_QWORD *)(v6 - 408);
      v129 = *(_QWORD *)(v6 - 336);
      if ((v124 & 3) != 0)
      {
        v130 = *(_QWORD *)(v6 - 632);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v125 + 16))(v130, *(_QWORD *)(v6 - 352), v121);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v130, 1, v128) != 1)
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t))(v129 + 32))(*(_QWORD *)(v6 - 744), v130, v128);
          v180 = MEMORY[0x23B8613CC](&unk_23B1DD478, v128);
          v181 = sub_23AF219A4(v128, v180);
          v182 = *(_QWORD *)(v6 - 288);
          if (v181 == 1)
          {
            *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
            *(_QWORD *)(v6 - 200) = v182;
            v183 = *(_QWORD *)(v6 - 272);
            *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
            *(_QWORD *)(v6 - 184) = v183;
            type metadata accessor for ReconciliationID();
          }
          *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
          *(_QWORD *)(v6 - 200) = v182;
          v184 = *(_QWORD *)(v6 - 272);
          *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
          *(_QWORD *)(v6 - 184) = v184;
          type metadata accessor for ReconciliationID();
        }
        (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v130, v121);
      }
      v185 = *(void (**)(uint64_t, uint64_t, uint64_t))(v125 + 16);
      if ((v124 & 2) != 0)
      {
        v189 = *(_QWORD *)(v6 - 680);
        v185(v189, v127, v121);
        v190 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48);
        if (v190(v189, 1, v128) != 1)
        {
          v202 = *(_QWORD *)(v6 - 768);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 32))(v202, v189, v128);
          v203 = *(_QWORD *)(v6 - 288);
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 320) + 16))(*(_QWORD *)(v6 - 424), v202 + *(int *)(v128 + 36), v203);
          *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
          *(_QWORD *)(v6 - 200) = v203;
          v204 = *(_QWORD *)(v6 - 272);
          *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
          *(_QWORD *)(v6 - 184) = v204;
          type metadata accessor for ReconciliationID();
        }
        (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v189, v121);
        v191 = *(_QWORD *)(v6 - 352);
        v205 = *(_QWORD *)(v6 - 664);
        v185(v205, v191, v121);
        if (v190(v205, 1, v128) != 1)
        {
          v207 = *(_QWORD *)(v6 - 752);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 32))(v207, v205, v128);
          v208 = *(_QWORD *)(v6 - 288);
          (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 320) + 16))(*(_QWORD *)(v6 - 424), v207 + *(int *)(v128 + 36), v208);
          *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
          *(_QWORD *)(v6 - 200) = v208;
          v209 = *(_QWORD *)(v6 - 272);
          *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
          *(_QWORD *)(v6 - 184) = v209;
          type metadata accessor for ReconciliationID();
        }
        v206 = v205;
        v187 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
        v187(*(_QWORD *)(v6 - 440), v121);
        v187(v191, v121);
        v188 = v206;
      }
      else
      {
        v186 = *(_QWORD *)(v6 - 672);
        v185(v186, v127, v121);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v186, 1, v128) == 1)
        {
          v187 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
          v187(v127, v121);
          v187(*(_QWORD *)(v6 - 352), v121);
          v188 = v186;
        }
        else
        {
          v194 = *(_QWORD *)(v6 - 760);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 32))(v194, v186, v128);
          v195 = MEMORY[0x23B8613CC](&unk_23B1DD478, v128);
          v196 = sub_23AF219A4(v128, v195);
          v197 = (v124 & 0x4000) != 0 && v196 == 1;
          v198 = v124 & 0xFFFFFFFFFFFEB7FFLL;
          if (!v197)
            v198 = v124;
          if ((v198 & 0xFFFFFFFFFFFEF7FFLL) != 0)
          {
            v199 = v194 + *(int *)(v128 + 36);
            v200 = *(_QWORD *)(v6 - 288);
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 320) + 16))(*(_QWORD *)(v6 - 424), v199, v200);
            *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
            *(_QWORD *)(v6 - 200) = v200;
            v201 = *(_QWORD *)(v6 - 272);
            *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
            *(_QWORD *)(v6 - 184) = v201;
            type metadata accessor for ReconciliationID();
          }
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v194, v128);
          v187 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
          v187(v127, v121);
          v188 = *(_QWORD *)(v6 - 352);
        }
      }
      v187(v188, v121);
      v169 = *(_QWORD *)(v6 - 152);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 248) + 8))(*(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      return v169;
    case 7u:
      v105(v85, *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      (*(void (**)(_QWORD, _BYTE *, _QWORD))(*(_QWORD *)(v6 - 360) + 32))(*(_QWORD *)(v6 - 504), v85, *(_QWORD *)(v6 - 344));
      sub_23B1C7310();
      swift_allocObject();
      sub_23B1C6728();
      *v131 = 2;
      v132 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
      *(_QWORD *)(v6 - 200) = v132;
      v133 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v133;
      type metadata accessor for ReconciliationID();
    case 8u:
      v105(v85, *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      (*(void (**)(void))(*(_QWORD *)(v6 - 336) + 32))();
      sub_23B1C7310();
      *(_QWORD *)(v6 - 256) = *(_QWORD *)(*(_QWORD *)(v6 - 304) + 72);
      swift_allocObject();
      *(_QWORD *)(v6 - 240) = sub_23B1C6728();
      *v134 = 1024;
      v135 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
      *(_QWORD *)(v6 - 200) = v135;
      v136 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v136;
      type metadata accessor for ReconciliationID();
    case 0xAu:
      v105(*(_BYTE **)(v6 - 512), *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v137 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
      *(_QWORD *)(v6 - 200) = v137;
      v138 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v138;
      type metadata accessor for ReconciliationID();
    case 0xCu:
      v105(*(_BYTE **)(v6 - 552), *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v139 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
      *(_QWORD *)(v6 - 200) = v139;
      v140 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v140;
      type metadata accessor for ThrottlingKey();
    case 0xDu:
      v105(*(_BYTE **)(v6 - 576), *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v141 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
      *(_QWORD *)(v6 - 200) = v141;
      v142 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v142;
      type metadata accessor for ReconciliationID();
    case 0x14u:
      v143 = *(_QWORD **)(v6 - 600);
      v105(v143, *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      if ((*v143 & 0x8000000000000000) != 0)
        goto LABEL_38;
      swift_release();
      goto LABEL_31;
    case 0x15u:
      v144 = *(_QWORD **)(v6 - 616);
      v105(v144, *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      if ((*v144 & 0x8000000000000000) == 0)
      {
        v145 = *(_QWORD *)(v6 - 376);
        *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 392);
        *(_QWORD *)(v6 - 200) = v145;
        v146 = *(_QWORD *)(v6 - 368);
        *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 384);
        *(_QWORD *)(v6 - 184) = v146;
        type metadata accessor for Materialization.MaterializeIgnoredItem();
      }
LABEL_38:
      v178 = *(_QWORD *)(v6 - 376);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 392);
      *(_QWORD *)(v6 - 200) = v178;
      v179 = *(_QWORD *)(v6 - 368);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 384);
      *(_QWORD *)(v6 - 184) = v179;
      type metadata accessor for Propagation.CreateItem();
    case 0x16u:
      v147 = *(_BYTE **)(v6 - 584);
      v149 = *(_QWORD *)(v6 - 224);
      v148 = *(_QWORD *)(v6 - 216);
      v105(v147, v149, v148);
      if ((*v147 & 1) == 0 || (*(_QWORD *)(v6 - 688) & 0x4000) != 0)
      {
        sub_23B1C7310();
        swift_allocObject();
        v192 = sub_23B1C6728();
        *v193 = 512;
        swift_storeEnumTagMultiPayload();
        v150 = sub_23AD7D55C(v192);
      }
      else
      {
        v150 = sub_23B1C6758();
      }
      v169 = v150;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 248) + 8))(v149, v148);
      return v169;
    case 0x18u:
      v105(*(_BYTE **)(v6 - 568), *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v151 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
      *(_QWORD *)(v6 - 200) = v151;
      v152 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v152;
      type metadata accessor for ReconciliationID();
    case 0x19u:
      v105(*(_BYTE **)(v6 - 608), *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v153 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
      *(_QWORD *)(v6 - 200) = v153;
      v154 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v154;
      type metadata accessor for ReconciliationID();
    case 0x1Au:
      v105(*(_BYTE **)(v6 - 592), *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v155 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
      *(_QWORD *)(v6 - 200) = v155;
      v156 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v156;
      type metadata accessor for ReconciliationID();
    case 0x1Bu:
      v105(*(_BYTE **)(v6 - 496), *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v157 = *(_QWORD *)(v6 - 376);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 392);
      *(_QWORD *)(v6 - 200) = v157;
      v158 = *(_QWORD *)(v6 - 368);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 384);
      *(_QWORD *)(v6 - 184) = v158;
      type metadata accessor for TestingOperation();
    case 0x1Eu:
      v105(*(_BYTE **)(v6 - 536), *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v159 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
      *(_QWORD *)(v6 - 200) = v159;
      v160 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v160;
      type metadata accessor for ReconciliationID();
    case 0x20u:
      v105(*(_BYTE **)(v6 - 560), *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v161 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
      *(_QWORD *)(v6 - 200) = v161;
      v162 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v162;
      type metadata accessor for ReconciliationID();
    case 0x21u:
      v105(v71, *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v163 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
      *(_QWORD *)(v6 - 200) = v163;
      v164 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v164;
      type metadata accessor for ReconciliationID();
    case 0x22u:
      v105(*(_BYTE **)(v6 - 544), *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v165 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
      *(_QWORD *)(v6 - 200) = v165;
      v166 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v166;
      type metadata accessor for ReconciliationID();
    case 0x26u:
      v105(*(_BYTE **)(v6 - 528), *(_QWORD *)(v6 - 224), *(_QWORD *)(v6 - 216));
      v167 = *(_QWORD *)(v6 - 288);
      *(_QWORD *)(v6 - 208) = *(_QWORD *)(v6 - 264);
      *(_QWORD *)(v6 - 200) = v167;
      v168 = *(_QWORD *)(v6 - 272);
      *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
      *(_QWORD *)(v6 - 184) = v168;
      type metadata accessor for ReconciliationID();
    default:
      goto LABEL_31;
  }
}

void sub_23ABC4770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *TupleTypeMetadata;

  *(_QWORD *)(v5 - 184) = sub_23B1C6C98();
  *(_QWORD *)(v5 - 176) = &type metadata for Fields;
  *(_QWORD *)(v5 - 168) = MEMORY[0x24BEE1E88];
  *(_QWORD *)(v5 - 160) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542E5510);
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  *(_QWORD *)(v5 - 240) = v0 + TupleTypeMetadata[12];
  *(_QWORD *)(v5 - 256) = v0 + TupleTypeMetadata[16];

  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 312) + 32))(*(_QWORD *)(v5 - 728), v0, v3);
  *(_QWORD *)(v5 - 208) = v1;
  *(_QWORD *)(v5 - 200) = v2;
  *(_QWORD *)(v5 - 192) = *(_QWORD *)(v5 - 320);
  *(_QWORD *)(v5 - 184) = v4;
  type metadata accessor for FileItemVersion();
}

void sub_23ABC4838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(char *, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v7 = sub_23B1C6C98();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v2, v7);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 736) + 8))(*(_QWORD *)(v6 - 256), *(_QWORD *)(v6 - 656));
  v8 = sub_23B1C6C98();
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(*(_QWORD *)(v6 - 240), v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 248) + 8))(v5, v4);
  v9 = *(_QWORD *)(v6 - 232);
  sub_23B1C7310();
  swift_allocObject();
  sub_23B1C6728();
  v11 = (char *)v10 + *(int *)(v9 + 48);
  *v10 = 0x2000;
  v3(v11, v1, v0);
  v12 = *(_QWORD *)(v6 - 288);
  *(_QWORD *)(v6 - 208) = v0;
  *(_QWORD *)(v6 - 200) = v12;
  v13 = *(_QWORD *)(v6 - 272);
  *(_QWORD *)(v6 - 192) = *(_QWORD *)(v6 - 280);
  *(_QWORD *)(v6 - 184) = v13;
  type metadata accessor for ReconciliationID();
}

void sub_23ABC49D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata;

  *(_QWORD *)(v5 - 192) = sub_23B1C6C98();
  *(_QWORD *)(v5 - 184) = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542E74E0);
  *(_QWORD *)(v5 - 176) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542E5510);
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  *(_QWORD *)(v5 - 240) = v0 + *(int *)(TupleTypeMetadata + 48);

  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 312) + 32))(*(_QWORD *)(v5 - 728), v0, v3);
  *(_QWORD *)(v5 - 208) = v1;
  *(_QWORD *)(v5 - 200) = v2;
  *(_QWORD *)(v5 - 192) = *(_QWORD *)(v5 - 320);
  *(_QWORD *)(v5 - 184) = v4;
  type metadata accessor for FileItemVersion();
}

void sub_23ABC4A8C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23B1C6C98();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
  JUMPOUT(0x23ABC4AC4);
}

void sub_23ABC4B68()
{
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x23ABC4B94);
}

void sub_23ABC4C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_2542E72C8);
  v8 = (_QWORD *)(v6 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v6, v2, v3);
  swift_storeEnumTagMultiPayload();
  v9 = (_QWORD *)(v2 + *(int *)(v5 + 36));
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_storeEnumTagMultiPayload();
  v11 = *(_QWORD **)(v7 - 416);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 1024;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 400) + 32))(v12, v6, v0);
  sub_23B1C67DC();
  swift_bridgeObjectRetain();
  sub_23B1C67AC();
  JUMPOUT(0x23ABC4D14);
}

void sub_23ABC4D30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = swift_dynamicCastClass();
  v6 = *(_QWORD *)(v4 - 312);
  if (v5)
  {
    v7 = v5;
    v8 = *(_QWORD *)(v4 - 232);
    sub_23B1C7310();
    swift_allocObject();
    swift_retain();
    sub_23B1C6728();
    v10 = (char *)v9 + *(int *)(v8 + 48);
    *v9 = 1024;
    v11 = v7 + *(_QWORD *)(*(_QWORD *)v7 + 536);
    v12 = *(_QWORD *)(v4 - 264);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v10, v11, v12);
    v13 = *(_QWORD *)(v4 - 288);
    *(_QWORD *)(v4 - 208) = v12;
    *(_QWORD *)(v4 - 200) = v13;
    v14 = *(_QWORD *)(v4 - 272);
    *(_QWORD *)(v4 - 192) = *(_QWORD *)(v4 - 280);
    *(_QWORD *)(v4 - 184) = v14;
    type metadata accessor for ReconciliationID();
  }
  *(_QWORD *)(v4 - 208) = v3;
  *(_QWORD *)(v4 - 200) = v1;
  *(_QWORD *)(v4 - 192) = v2;
  *(_QWORD *)(v4 - 184) = v0;
  type metadata accessor for Ingestion.FaultDirectoryInTree();
}

void sub_23ABC4DFC()
{
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x23ABC1D5CLL);
}

void sub_23ABC4EF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v7 = (_QWORD *)(v2 + v3);
  v8 = v2 + v3 + *(int *)(v5 + 48);
  *v7 = 8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 320) + 16))(v8, v0 + *(_QWORD *)(*(_QWORD *)v0 + 536), v1);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  sub_23AD7D55C(*(_QWORD *)(v6 - 240));
  swift_release_n();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 824) + 8))(v4, *(_QWORD *)(v6 - 816));
  JUMPOUT(0x23ABC44A8);
}

void sub_23ABC5004()
{
  _QWORD *v0;

  if (swift_dynamicCastClass())
  {
    sub_23B1C7310();
    swift_allocObject();
    swift_retain();
    sub_23B1C6728();
    *v0 = 256;
    JUMPOUT(0x23ABC1CFCLL);
  }
  swift_release();
  JUMPOUT(0x23ABC24ECLL);
}

void sub_23ABC5104(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for PersistenceTrigger.AffectedItemJobs();
}

uint64_t sub_23ABC5140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2 + *(int *)(a1 + 56);
  swift_getAssociatedTypeWitness();
  v4 = sub_23B1C6C98();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, v1, v4);
}

void sub_23ABC51A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t AssociatedConformanceWitness;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unsigned int (*v87)(char *, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD v146[4];
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;

  v159 = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v163 = type metadata accessor for SnapshotItem(0, v5, v6, a4);
  v161 = *(_QWORD *)(v163 - 8);
  MEMORY[0x24BDAC7A8](v163);
  v147 = (char *)v146 - v7;
  v171 = v5;
  v172 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = sub_23B1C6C98();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v165 = (char *)v146 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v148 = (char *)v146 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v146 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v156 = (char *)v146 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)v146 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v153 = (char *)v146 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v152 = (char *)v146 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v150 = (char *)v146 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v151 = (char *)v146 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v154 = (char *)v146 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v158 = (char *)v146 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v160 = (char *)v146 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)v146 - v37;
  v39 = MEMORY[0x24BDAC7A8](v36);
  v41 = (char *)v146 - v40;
  v42 = MEMORY[0x24BDAC7A8](v39);
  v162 = (char *)v146 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v155 = (char *)v146 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v48 = (char *)v146 - v47;
  v49 = MEMORY[0x24BDAC7A8](v46);
  v51 = (char *)v146 - v50;
  v52 = MEMORY[0x24BDAC7A8](v49);
  v54 = (char *)v146 - v53;
  v166 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v167 = AssociatedTypeWitness;
  v55 = MEMORY[0x24BDAC7A8](v52);
  v56 = MEMORY[0x24BDAC7A8](v55);
  v146[1] = (char *)v146 - v57;
  v58 = MEMORY[0x24BDAC7A8](v56);
  v146[2] = (char *)v146 - v59;
  v60 = MEMORY[0x24BDAC7A8](v58);
  v146[3] = (char *)v146 - v61;
  v62 = MEMORY[0x24BDAC7A8](v60);
  v164 = (char *)v146 - v63;
  v64 = MEMORY[0x24BDAC7A8](v62);
  v149 = (char *)v146 - v65;
  MEMORY[0x24BDAC7A8](v64);
  v157 = (char *)v146 - v66;
  v168 = v67;
  v68 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  v68(v54, v169, a2);
  v173 = v54;
  v170 = a2;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v68(v151, v173, v170);
      v69 = swift_getAssociatedTypeWitness();
      v70 = v167;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v72 = swift_getAssociatedConformanceWitness();
      v174 = v70;
      v175 = (_QWORD *)v69;
      v176 = AssociatedConformanceWitness;
      v177 = (_QWORD *)v72;
      type metadata accessor for ReconciliationID();
    case 2u:
      v68(v48, v173, v170);
      v73 = swift_getAssociatedTypeWitness();
      v74 = v167;
      v75 = swift_getAssociatedConformanceWitness();
      v76 = swift_getAssociatedConformanceWitness();
      v174 = v74;
      v175 = (_QWORD *)v73;
      v176 = v75;
      v177 = (_QWORD *)v76;
      type metadata accessor for ReconciliationID();
    case 4u:
      v68(v38, v173, v170);
      v77 = swift_getAssociatedTypeWitness();
      v78 = v167;
      v79 = swift_getAssociatedConformanceWitness();
      v80 = swift_getAssociatedConformanceWitness();
      v174 = v78;
      v175 = (_QWORD *)v77;
      v176 = v79;
      v177 = (_QWORD *)v80;
      type metadata accessor for ReconciliationID();
    case 5u:
      v81 = v160;
      v82 = v170;
      v68(v160, v173, v170);
      v83 = v163;
      v84 = sub_23B1C6C98();
      v85 = &v81[*(int *)(swift_getTupleTypeMetadata3() + 48)];
      v86 = v161;
      v87 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48);
      if (v87(v85, 1, v83) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v147, v85, v83);
        v169 = *(char **)(v82 + 24);
        v164 = *(char **)(v82 + 40);
        v174 = v171;
        v175 = v169;
        v176 = v172;
        v177 = v164;
        type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      }
      if (v87(v81, 1, v83) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v147, v81, v83);
        v169 = *(char **)(v82 + 24);
        v164 = *(char **)(v82 + 40);
        v174 = v171;
        v175 = v169;
        v176 = v172;
        v177 = v164;
        type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      }
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v84 - 8) + 8))(v81, v84);
      break;
    case 0xAu:
      v68(v158, v173, v170);
      v88 = swift_getAssociatedTypeWitness();
      v89 = v167;
      v90 = swift_getAssociatedConformanceWitness();
      v91 = swift_getAssociatedConformanceWitness();
      v174 = v89;
      v175 = (_QWORD *)v88;
      v176 = v90;
      v177 = (_QWORD *)v91;
      type metadata accessor for ReconciliationID();
    case 0xBu:
      v92 = ((uint64_t (*)(char *, char *, uint64_t))v68)(v155, v173, v170);
      v169 = (char *)v146;
      MEMORY[0x24BDAC7A8](v92);
      strcpy((char *)&v146[-4], " otherID from to ");
      v93 = swift_getAssociatedTypeWitness();
      v94 = v167;
      v95 = swift_getAssociatedConformanceWitness();
      v96 = swift_getAssociatedConformanceWitness();
      v174 = v94;
      v175 = (_QWORD *)v93;
      v176 = v95;
      v177 = (_QWORD *)v96;
      type metadata accessor for ReconciliationID();
    case 0xDu:
      v68(v51, v173, v170);
      v97 = swift_getAssociatedTypeWitness();
      v98 = v167;
      v99 = swift_getAssociatedConformanceWitness();
      v100 = swift_getAssociatedConformanceWitness();
      v174 = v98;
      v175 = (_QWORD *)v97;
      v176 = v99;
      v177 = (_QWORD *)v100;
      type metadata accessor for ReconciliationID();
    case 0xEu:
      v68(v162, v173, v170);
      v101 = swift_getAssociatedTypeWitness();
      v102 = v167;
      v103 = swift_getAssociatedConformanceWitness();
      v104 = swift_getAssociatedConformanceWitness();
      v174 = v102;
      v175 = (_QWORD *)v101;
      v176 = v103;
      v177 = (_QWORD *)v104;
      type metadata accessor for ReconciliationID();
    case 0xFu:
      v68(v41, v173, v170);
      v132 = swift_getAssociatedTypeWitness();
      v133 = v167;
      v134 = swift_getAssociatedConformanceWitness();
      v135 = swift_getAssociatedConformanceWitness();
      v174 = v133;
      v175 = (_QWORD *)v132;
      v176 = v134;
      v177 = (_QWORD *)v135;
      type metadata accessor for ReconciliationID();
    case 0x13u:
      v105 = (unsigned __int8 *)v150;
      v68(v150, v173, v170);
      LODWORD(v169) = *v105;
      v106 = swift_getAssociatedTypeWitness();
      v107 = v167;
      v108 = swift_getAssociatedConformanceWitness();
      v109 = swift_getAssociatedConformanceWitness();
      v174 = v107;
      v175 = (_QWORD *)v106;
      v176 = v108;
      v177 = (_QWORD *)v109;
      type metadata accessor for ReconciliationID();
    case 0x15u:
      v110 = v170;
      v68(v16, v173, v170);
      if ((*(_QWORD *)v16 & 0x8000000000000000) == 0)
      {
        v111 = *(_QWORD *)(v110 + 40);
        v174 = *(_QWORD *)(v110 + 24);
        v175 = (_QWORD *)v171;
        v176 = v111;
        v177 = (_QWORD *)v172;
        type metadata accessor for Propagation.CreateItem();
      }
      v143 = *(_QWORD *)(v110 + 40);
      v174 = *(_QWORD *)(v110 + 24);
      v175 = (_QWORD *)v171;
      v176 = v143;
      v177 = (_QWORD *)v172;
      type metadata accessor for DiskImport.DiskImportFinished();
    case 0x17u:
      v68(v21, v173, v170);
      if ((*v21 & 1) == 0)
      {
        v112 = *(_QWORD **)(v170 + 24);
        v169 = *(char **)(v170 + 40);
        v174 = v171;
        v175 = v112;
        v176 = v172;
        v177 = v169;
        type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      }
      return;
    case 0x1Bu:
      v113 = v170;
      v68(v152, v173, v170);
      v114 = *(_QWORD **)(v113 + 24);
      v115 = *(_QWORD **)(v113 + 40);
      v174 = v171;
      v175 = v114;
      v176 = v172;
      v177 = v115;
      type metadata accessor for TestingOperation();
    case 0x1Du:
      v68(v153, v173, v170);
      v116 = swift_getAssociatedTypeWitness();
      v117 = v167;
      v118 = swift_getAssociatedConformanceWitness();
      v119 = swift_getAssociatedConformanceWitness();
      v174 = v117;
      v175 = (_QWORD *)v116;
      v176 = v118;
      v177 = (_QWORD *)v119;
      type metadata accessor for ReconciliationID();
    case 0x1Fu:
      v68(v154, v173, v170);
      v120 = swift_getAssociatedTypeWitness();
      v121 = v167;
      v122 = swift_getAssociatedConformanceWitness();
      v123 = swift_getAssociatedConformanceWitness();
      v174 = v121;
      v175 = (_QWORD *)v120;
      v176 = v122;
      v177 = (_QWORD *)v123;
      type metadata accessor for ReconciliationID();
    case 0x22u:
      v68(v156, v173, v170);
      v124 = swift_getAssociatedTypeWitness();
      v125 = v167;
      v126 = swift_getAssociatedConformanceWitness();
      v127 = swift_getAssociatedConformanceWitness();
      v174 = v125;
      v175 = (_QWORD *)v124;
      v176 = v126;
      v177 = (_QWORD *)v127;
      type metadata accessor for ReconciliationID();
    case 0x25u:
      v68(v148, v173, v170);
      v136 = swift_getAssociatedTypeWitness();
      v137 = v167;
      v138 = swift_getAssociatedConformanceWitness();
      v139 = swift_getAssociatedConformanceWitness();
      v174 = v137;
      v175 = (_QWORD *)v136;
      v176 = v138;
      v177 = (_QWORD *)v139;
      type metadata accessor for ReconciliationID();
    case 0x29u:
      v140 = *(_QWORD **)(v170 + 24);
      v169 = *(char **)(v170 + 40);
      v174 = v171;
      v175 = v140;
      v176 = v172;
      v177 = v169;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
    case 0x2Au:
      v128 = *(_QWORD **)(v170 + 24);
      v129 = *(_QWORD **)(v170 + 40);
      v174 = v171;
      v175 = v128;
      v176 = v172;
      v177 = v129;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
    case 0x2Bu:
      v130 = *(_QWORD **)(v170 + 24);
      v131 = *(_QWORD **)(v170 + 40);
      v174 = v171;
      v175 = v130;
      v176 = v172;
      v177 = v131;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
    case 0x2Cu:
      v141 = *(_QWORD **)(v170 + 24);
      v142 = *(_QWORD **)(v170 + 40);
      v174 = v171;
      v175 = v141;
      v176 = v172;
      v177 = v142;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
    default:
      break;
  }
  v144 = *(_QWORD **)(v170 + 24);
  v145 = *(_QWORD **)(v170 + 40);
  v174 = v171;
  v175 = v144;
  v176 = v172;
  v177 = v145;
  type metadata accessor for PersistenceTrigger.AffectedItemJobs();
}

void sub_23ABC79F8()
{
  sub_23B1C6758();
  JUMPOUT(0x23ABC7A18);
}

void sub_23ABC7A70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 - 192) = a1;
  sub_23B1C7310();
  swift_allocObject();
  v5 = sub_23B1C6728();
  *(_QWORD *)(v4 - 248) = v6;
  *(_QWORD *)(v4 - 240) = v5;
  v7 = *(_QWORD *)(v4 - 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v7, v3, v1);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v7, 0, 1, v1);
  JUMPOUT(0x23ABC7AE8);
}

uint64_t sub_23ABC7B08()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = sub_23AD7D55C(*(_QWORD *)(v6 - 240));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 200) + 8))(v4, v3);
  return v7;
}

void sub_23ABC7B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  sub_23B1C7310();
  swift_allocObject();
  *(_QWORD *)(v3 - 192) = sub_23B1C6728();
  v5 = v4;
  v6 = *(_QWORD *)(v3 - 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v6, v0, v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56))(v6, 0, 1, v2);
  sub_23ABC5104(64, (uint64_t)&unk_250BDE550, v5);
}

void sub_23ABC7C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  sub_23B1C7310();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)(v2 - 232) = sub_23B1C6728();
  v4 = v3;
  v5 = *(_QWORD *)(v2 - 224);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 - 192))(v5, *(_QWORD *)(v2 - 392), v0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56))(v5, 0, 1, v0);
  sub_23ABC5104(32, (uint64_t)&unk_250BDE780, v4);
}

void sub_23ABC7D08()
{
  uint64_t v0;

  sub_23AD7D55C(*(_QWORD *)(v0 - 232));
  swift_release_n();
  JUMPOUT(0x23ABC7270);
}

void sub_23ABC7D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23B1C7310();
  swift_allocObject();
  *(_QWORD *)(v3 - 192) = sub_23B1C6728();
  v4 = *(_QWORD *)(v3 - 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v4, v0, v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56))(v4, 0, 1, v2);
  JUMPOUT(0x23ABC7E9CLL);
}

void sub_23ABC7E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23B1C7310();
  swift_allocObject();
  *(_QWORD *)(v3 - 192) = sub_23B1C6728();
  v4 = *(_QWORD *)(v3 - 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v4, v0, v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56))(v4, 0, 1, v2);
  JUMPOUT(0x23ABC7E94);
}

void sub_23ABC7EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23AD7D55C(*(_QWORD *)(v3 - 192));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
  JUMPOUT(0x23ABC7EE0);
}

void sub_23ABC7F10(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(void);
  uint64_t v18;
  char *v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t AssociatedTypeWitness;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v29 = a2;
  v3 = a1[3];
  v30 = a1[5];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v25[3] = (char *)v25 - v5;
  v6 = a1[4];
  v7 = a1[2];
  v8 = swift_getAssociatedTypeWitness();
  v25[4] = *(_QWORD *)(v8 - 8);
  v26 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)v25 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v28 = v16;
  v17 = *(void (**)(void))(v16 + 16);
  v19 = (char *)v25 - v18;
  v17();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 40)
  {
    if (EnumCaseMultiPayload != 27)
    {
      if (EnumCaseMultiPayload == 13)
      {
        v25[0] = v4;
        ((void (*)(char *, char *, _QWORD *))v17)(v15, v19, a1);
        v25[2] = v19;
        v21 = v26;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v25[1] = v6;
        v23 = AssociatedTypeWitness;
        v24 = swift_getAssociatedConformanceWitness();
        v31 = v21;
        v32 = v23;
        v33 = AssociatedConformanceWitness;
        v34 = v24;
        type metadata accessor for ReconciliationID();
      }
      v31 = v7;
      v32 = v3;
      v33 = v6;
      v34 = v30;
      type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
    }
    ((void (*)(char *, char *, _QWORD *))v17)(v12, v19, a1);
    v31 = v7;
    v32 = v3;
    v33 = v6;
    v34 = v30;
    type metadata accessor for TestingOperation();
  }
  v31 = v7;
  v32 = v3;
  v33 = v6;
  v34 = v30;
  type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
}

void sub_23ABC86B0()
{
  uint64_t v0;
  uint64_t TupleTypeMetadata2;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(*(_QWORD *)(v0 - 128), 1, 1, TupleTypeMetadata2);
  JUMPOUT(0x23ABC8948);
}

void sub_23ABC8738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  sub_23B06B84C(v4);
  *(_QWORD *)(v5 - 112) = v3;
  *(_QWORD *)(v5 - 104) = v1;
  *(_QWORD *)(v5 - 96) = v2;
  *(_QWORD *)(v5 - 88) = v0;
  type metadata accessor for ItemJob();
}

void sub_23ABC875C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 160) + 8))(v1, v5);
    *(_QWORD *)(v6 - 112) = v4;
    *(_QWORD *)(v6 - 104) = v2;
    *(_QWORD *)(v6 - 96) = v3;
    *(_QWORD *)(v6 - 88) = v0;
    JUMPOUT(0x23ABC8788);
  }
  *(_QWORD *)(v6 - 112) = v4;
  *(_QWORD *)(v6 - 104) = v2;
  *(_QWORD *)(v6 - 96) = v3;
  *(_QWORD *)(v6 - 88) = v0;
  type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
}

void sub_23ABC8794()
{
  uint64_t v0;
  uint64_t TupleTypeMetadata2;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(*(_QWORD *)(v0 - 128), 1, 1, TupleTypeMetadata2);
  JUMPOUT(0x23ABC893CLL);
}

void sub_23ABC87E0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v4 = *(_QWORD **)(v2 - 128);
  v5 = (char *)v4 + *(int *)(TupleTypeMetadata2 + 48);
  *v4 = 262400;
  v6 = &v5[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  *v5 = v1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 - 152))(v6, *(_QWORD *)(v2 - 168), v0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 56))(v4, 0, 1, TupleTypeMetadata2);
  JUMPOUT(0x23ABC893CLL);
}

void sub_23ABC8898()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  _QWORD *v5;
  _BYTE *v6;
  _BYTE *v7;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5 = *(_QWORD **)(v3 - 128);
  v6 = (char *)v5 + *(int *)(TupleTypeMetadata2 + 48);
  *v5 = 262400;
  v7 = &v6[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  *v6 = v2;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 - 144))(v7, v0, v1);
  swift_storeEnumTagMultiPayload();
  JUMPOUT(0x23ABC8938);
}

void type metadata accessor for PersistenceTrigger.AffectedItemJobs()
{
  JUMPOUT(0x23B861318);
}

void type metadata accessor for PersistenceTrigger.AffectedGlobalJobs()
{
  JUMPOUT(0x23B861318);
}

uint64_t sub_23ABC8988()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  char *v5;
  uint64_t *v6;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v5 = &v4;
    result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v6 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_23ABC8A60(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 1) & ~(unint64_t)v6) + *(_QWORD *)(v5 + 64);
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  if (((v10 + 1) & (unint64_t)~v10) + v11 <= v7)
    v12 = v7;
  else
    v12 = ((v10 + 1) & ~v10) + v11;
  if ((v10 | (unint64_t)v6) > 7
    || ((*(_DWORD *)(v9 + 80) | v6) & 0x100000) != 0
    || v12 + 1 > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + (((v10 | v6) + 16) & ~(v10 | v6)));
    swift_retain();
  }
  else
  {
    v16 = *((unsigned __int8 *)a2 + v12);
    if (v16 >= 2)
    {
      if (v12 <= 3)
        v17 = v12;
      else
        v17 = 4;
      __asm { BR              X15 }
    }
    *(_BYTE *)a1 = *(_BYTE *)a2;
    if (v16 == 1)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v10 + 1) & ~v10, ((unint64_t)a2 + v10 + 1) & ~v10, v8);
      *((_BYTE *)a1 + v12) = 1;
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + v6 + 1) & ~(unint64_t)v6, ((unint64_t)a2 + v6 + 1) & ~(unint64_t)v6, AssociatedTypeWitness);
      *((_BYTE *)a1 + v12) = 0;
    }
  }
  return a1;
}

uint64_t sub_23ABC8C68(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = ((v4 + 1) & ~v4) + *(_QWORD *)(v3 + 64);
  v6 = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((v8 + 1) & ~v8) + *(_QWORD *)(v7 + 64);
  if (v9 <= v5)
    v9 = v5;
  if (*(unsigned __int8 *)(a1 + v9) >= 2u)
  {
    if (v9 <= 3)
      v10 = v9;
    else
      v10 = 4;
    __asm { BR              X15 }
  }
  if (*(_BYTE *)(a1 + v9))
  {
    v11 = ~v8;
    v4 = *(unsigned __int8 *)(v7 + 80);
    v3 = *(_QWORD *)(v6 - 8);
    AssociatedTypeWitness = v6;
  }
  else
  {
    v11 = ~v4;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))((a1 + v4 + 1) & v11, AssociatedTypeWitness);
}

_BYTE *sub_23ABC8DDC(_BYTE *a1, _BYTE *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((v6 + 1) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  if (((v10 + 1) & (unint64_t)~v10) + v11 <= v7)
    v12 = v7;
  else
    v12 = ((v10 + 1) & ~v10) + v11;
  v13 = a2[v12];
  if (v13 >= 2)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X14 }
  }
  *a1 = *a2;
  if (v13 == 1)
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((unint64_t)&a1[v10 + 1] & ~v10, (unint64_t)&a2[v10 + 1] & ~v10, v8);
    a1[v12] = 1;
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((unint64_t)&a1[v6 + 1] & ~v6, (unint64_t)&a2[v6 + 1] & ~v6, AssociatedTypeWitness);
    a1[v12] = 0;
  }
  return a1;
}

_BYTE *sub_23ABC8FA0(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v5 = *(unsigned __int8 *)(v4 + 80);
    v6 = ((v5 + 1) & ~v5) + *(_QWORD *)(v4 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 64);
    if (((v10 + 1) & (unint64_t)~v10) + v11 <= v6)
      v12 = v6;
    else
      v12 = ((v10 + 1) & ~v10) + v11;
    if (a1[v12] >= 2u)
    {
      if (v12 <= 3)
        v13 = v12;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (a1[v12])
    {
      v14 = *(unsigned __int8 *)(v9 + 80);
      v15 = ~v10;
      v16 = *(_QWORD *)(v7 - 8);
      v17 = v7;
    }
    else
    {
      v14 = v5;
      v15 = ~v5;
      v16 = v4;
      v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unint64_t, uint64_t))(v16 + 8))((unint64_t)&a1[v14 + 1] & v15, v17);
    v18 = a2[v12];
    if (v18 >= 2)
    {
      if (v12 <= 3)
        v19 = v12;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    *a1 = *a2;
    if (v18 == 1)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((unint64_t)&a1[v10 + 1] & ~v10, (unint64_t)&a2[v10 + 1] & ~v10, v8);
      a1[v12] = 1;
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 16))((unint64_t)&a1[v5 + 1] & ~v5, (unint64_t)&a2[v5 + 1] & ~v5, AssociatedTypeWitness);
      a1[v12] = 0;
    }
  }
  return a1;
}

_BYTE *sub_23ABC9260(_BYTE *a1, _BYTE *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((v6 + 1) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  if (((v10 + 1) & (unint64_t)~v10) + v11 <= v7)
    v12 = v7;
  else
    v12 = ((v10 + 1) & ~v10) + v11;
  v13 = a2[v12];
  if (v13 >= 2)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X14 }
  }
  *a1 = *a2;
  if (v13 == 1)
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&a1[v10 + 1] & ~v10, (unint64_t)&a2[v10 + 1] & ~v10, v8);
    a1[v12] = 1;
  }
  else
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))((unint64_t)&a1[v6 + 1] & ~v6, (unint64_t)&a2[v6 + 1] & ~v6, AssociatedTypeWitness);
    a1[v12] = 0;
  }
  return a1;
}

_BYTE *sub_23ABC9424(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t AssociatedTypeWitness;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v4 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v5 = *(unsigned __int8 *)(v4 + 80);
    v6 = ((v5 + 1) & ~v5) + *(_QWORD *)(v4 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 64);
    if (((v10 + 1) & (unint64_t)~v10) + v11 <= v6)
      v12 = v6;
    else
      v12 = ((v10 + 1) & ~v10) + v11;
    if (a1[v12] >= 2u)
    {
      if (v12 <= 3)
        v13 = v12;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (a1[v12])
    {
      v14 = *(unsigned __int8 *)(v9 + 80);
      v15 = ~v10;
      v16 = *(_QWORD *)(v7 - 8);
      v17 = v7;
    }
    else
    {
      v14 = v5;
      v15 = ~v5;
      v16 = v4;
      v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unint64_t, uint64_t))(v16 + 8))((unint64_t)&a1[v14 + 1] & v15, v17);
    v18 = a2[v12];
    if (v18 >= 2)
    {
      if (v12 <= 3)
        v19 = v12;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    *a1 = *a2;
    if (v18 == 1)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&a1[v10 + 1] & ~v10, (unint64_t)&a2[v10 + 1] & ~v10, v8);
      a1[v12] = 1;
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 32))((unint64_t)&a1[v5 + 1] & ~v5, (unint64_t)&a2[v5 + 1] & ~v5, AssociatedTypeWitness);
      a1[v12] = 0;
    }
  }
  return a1;
}

uint64_t sub_23ABC96E4(uint64_t a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  unsigned int v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = ((*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= v5)
    v7 = v5;
  else
    v7 = ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_22;
  v8 = v7 + 1;
  v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v12 = ((a2 + ~(-1 << v9) - 253) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v12 < 2)
    {
LABEL_22:
      v14 = *(unsigned __int8 *)(a1 + v7);
      if (v14 >= 3)
        return (v14 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_22;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 > 3)
      LODWORD(v8) = 4;
    __asm { BR              X11 }
  }
  return (v13 + 254);
}

void sub_23ABC9884(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = ((*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v8 = swift_getAssociatedTypeWitness();
  v9 = ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  if (v9 <= v7)
    v9 = v7;
  v10 = v9 + 1;
  if (a3 < 0xFE)
  {
    v11 = 0;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 + ~(-1 << (8 * v10)) - 253) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = 4u;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v12 = a2 - 254;
  if (v10 < 4)
  {
    if ((_DWORD)v9 != -1)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v9 + 1);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t sub_23ABC9AA0(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = ((*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v4 = swift_getAssociatedTypeWitness();
  v5 = ((*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  if (v5 <= v3)
    v5 = v3;
  result = *(unsigned __int8 *)(a1 + v5);
  if (result >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_23ABC9BB8(_BYTE *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = ((*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v6 = swift_getAssociatedTypeWitness();
  if (((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) <= v5)
    v7 = v5;
  else
    v7 = ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64);
  if (a2 > 1)
  {
    v8 = a2 - 2;
    if (v7 < 4)
    {
      v9 = v8 >> (8 * v7);
      v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if ((_DWORD)v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if ((_DWORD)v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    a1[v7] = a2;
  }
}

uint64_t sub_23ABC9CF0()
{
  uint64_t result;
  unint64_t v1;

  swift_getAssociatedTypeWitness();
  result = sub_23B1C6C98();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23ABC9D98(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  const void *v17;
  unsigned int (*v18)(const void *, uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 16) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v13 = AssociatedTypeWitness;
    *a1 = *a2;
    v14 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v15 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *v15;
    v16 = (void *)(((unint64_t)v14 + v7 + 8) & ~v7);
    v17 = (const void *)(((unint64_t)v15 + v7 + 8) & ~v7);
    v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    if (v18(v17, 1, v13))
    {
      memcpy(v16, v17, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v13);
    }
  }
  return a1;
}

uint64_t sub_23ABC9EE4(uint64_t a1)
{
  unint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v1 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = (v1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  return result;
}

_QWORD *sub_23ABC9F84(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  unsigned int (*v10)(const void *, uint64_t, uint64_t);
  size_t v11;

  *a1 = *a2;
  v3 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  v9 = (const void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_bridgeObjectRetain();
  if (v10(v9, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v6 + 84))
      v11 = *(_QWORD *)(v6 + 64);
    else
      v11 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(v8, v9, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

_QWORD *sub_23ABCA084(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  size_t v12;

  *a1 = *a2;
  v3 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  v9 = (void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v4) = v10(v8, 1, AssociatedTypeWitness);
  v11 = v10(v9, 1, AssociatedTypeWitness);
  if ((_DWORD)v4)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v8, v9, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v6 + 84))
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(v8, v9, v12);
  return a1;
}

_QWORD *sub_23ABCA1D4(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  size_t v10;

  *a1 = *a2;
  v3 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  v9 = (const void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v9, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v6 + 84))
      v10 = *(_QWORD *)(v6 + 64);
    else
      v10 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(v8, v9, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

_QWORD *sub_23ABCA2C4(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  size_t v12;

  *a1 = *a2;
  v3 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  v9 = (void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v4) = v10(v8, 1, AssociatedTypeWitness);
  v11 = v10(v9, 1, AssociatedTypeWitness);
  if ((_DWORD)v4)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v8, v9, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v6 + 84))
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(v8, v9, v12);
  return a1;
}

uint64_t sub_23ABCA40C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  unsigned int v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  if (a2 <= v7)
    goto LABEL_30;
  v10 = v8 + ((v9 + 16) & ~v9);
  v11 = 8 * v10;
  if (v10 <= 3)
  {
    v14 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      v12 = *(_DWORD *)(a1 + v10);
      if (!v12)
        goto LABEL_30;
      goto LABEL_21;
    }
    if (v14 > 0xFF)
    {
      v12 = *(unsigned __int16 *)(a1 + v10);
      if (!*(_WORD *)(a1 + v10))
        goto LABEL_30;
      goto LABEL_21;
    }
    if (v14 < 2)
    {
LABEL_30:
      v17 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v6 & 0x80000000) != 0)
      {
        v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v9 + 8) & ~v9);
        if (v19 >= 2)
          return v19 - 1;
        else
          return 0;
      }
      else
      {
        v18 = *v17;
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        return (v18 + 1);
      }
    }
  }
  v12 = *(unsigned __int8 *)(a1 + v10);
  if (!*(_BYTE *)(a1 + v10))
    goto LABEL_30;
LABEL_21:
  v15 = (v12 - 1) << v11;
  if (v10 > 3)
    v15 = 0;
  if ((_DWORD)v10)
  {
    if (v10 <= 3)
      v16 = v10;
    else
      v16 = 4;
    __asm { BR              X12 }
  }
  return v7 + v15 + 1;
}

void sub_23ABCA5B8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = 0;
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(unsigned __int8 *)(v7 + 80);
  if (v8)
    v12 = *(_QWORD *)(v7 + 64);
  else
    v12 = *(_QWORD *)(v7 + 64) + 1;
  v13 = ((v11 + 16) & ~(_DWORD)v11) + v12;
  if (a3 > v10)
  {
    if (v13 > 3)
    {
      v6 = 1u;
      if (v10 >= a2)
LABEL_25:
        __asm { BR              X14 }
LABEL_18:
      v15 = ~v10 + a2;
      if (v13 < 4)
      {
        if (v13)
        {
          v16 = v15 & ~(-1 << (8 * v13));
          bzero(a1, ((v11 + 16) & ~v11) + v12);
          if (v13 == 3)
          {
            *(_WORD *)a1 = v16;
            a1[2] = BYTE2(v16);
          }
          else if (v13 == 2)
          {
            *(_WORD *)a1 = v16;
          }
          else
          {
            *a1 = v16;
          }
        }
      }
      else
      {
        bzero(a1, ((v11 + 16) & ~v11) + v12);
        *(_DWORD *)a1 = v15;
      }
      __asm { BR              X10 }
    }
    v14 = ((a3 - v10 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v14))
    {
      v6 = 4u;
      if (v10 >= a2)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v14 >= 0x100)
      v6 = 2;
    else
      v6 = v14 > 1;
  }
  if (v10 >= a2)
    goto LABEL_25;
  goto LABEL_18;
}

void sub_23ABCA830()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_23ABCA838()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_23ABCA858()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_23ABCA860()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_23ABCA870()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

void sub_23ABCA87C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
}

uint64_t *sub_23ABCA9E0(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  int v13;
  uint64_t v15;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  BOOL v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = v9 + 1;
  if ((v9 & 0xFFFFFFFFFFFFFFF8) + 24 <= v9 + 1)
    v11 = v9 + 1;
  else
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  v12 = v11 + 1;
  v13 = *(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80);
  if ((v13 & 0x1000F8) != 0 || v12 > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + (((v13 & 0xF8 | 7u) + 16) & ~(unint64_t)(v13 & 0xF8 | 7u)));
    swift_retain();
  }
  else
  {
    if (*((unsigned __int8 *)a2 + v11) >= 7u)
    {
      if (v11 <= 3)
        v17 = v11;
      else
        v17 = 4;
      __asm { BR              X13 }
    }
    switch(*((_BYTE *)a2 + v11))
    {
      case 0:
        v18 = *((unsigned __int8 *)a2 + v9);
        if (v18 >= 2)
        {
          if (v9 <= 3)
            v19 = v9;
          else
            v19 = 4;
          __asm { BR              X13 }
        }
        v32 = v18 == 1;
        if (v18 == 1)
        {
          v33 = v7;
        }
        else
        {
          v8 = v5;
          v33 = AssociatedTypeWitness;
        }
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v33);
        *((_BYTE *)a1 + v9) = v32;
        *((_BYTE *)a1 + v11) = 0;
        break;
      case 1:
        v20 = *((unsigned __int8 *)a2 + v9);
        if (v20 >= 2)
        {
          if (v9 <= 3)
            v21 = v9;
          else
            v21 = 4;
          __asm { BR              X13 }
        }
        v34 = v20 == 1;
        if (v20 == 1)
        {
          v35 = v7;
        }
        else
        {
          v8 = v5;
          v35 = AssociatedTypeWitness;
        }
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v35);
        *((_BYTE *)a1 + v9) = v34;
        v36 = (_QWORD *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
        v37 = (_QWORD *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
        *v36 = *v37;
        v36[1] = v37[1];
        v38 = 1;
        goto LABEL_68;
      case 2:
        v22 = *((unsigned __int8 *)a2 + v9);
        if (v22 >= 2)
        {
          if (v9 <= 3)
            v23 = v9;
          else
            v23 = 4;
          __asm { BR              X13 }
        }
        v39 = v22 == 1;
        if (v22 == 1)
        {
          v40 = v7;
        }
        else
        {
          v8 = v5;
          v40 = AssociatedTypeWitness;
        }
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v40);
        *((_BYTE *)a1 + v9) = v39;
        v41 = (_QWORD *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
        v42 = (_QWORD *)(((unint64_t)a2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
        *v41 = *v42;
        v41[1] = v42[1];
        v38 = 2;
LABEL_68:
        *((_BYTE *)a1 + v11) = v38;
        swift_bridgeObjectRetain();
        break;
      case 3:
        v24 = *((unsigned __int8 *)a2 + v9);
        if (v24 >= 2)
        {
          if (v9 <= 3)
            v25 = v9;
          else
            v25 = 4;
          __asm { BR              X13 }
        }
        v43 = v24 == 1;
        if (v24 == 1)
        {
          v44 = v7;
        }
        else
        {
          v8 = v5;
          v44 = AssociatedTypeWitness;
        }
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v44);
        *((_BYTE *)a1 + v9) = v43;
        *((_BYTE *)a1 + v11) = 3;
        break;
      case 4:
        v26 = *((unsigned __int8 *)a2 + v9);
        if (v26 >= 2)
        {
          if (v9 <= 3)
            v27 = v9;
          else
            v27 = 4;
          __asm { BR              X13 }
        }
        v45 = v26 == 1;
        if (v26 == 1)
        {
          v46 = v7;
        }
        else
        {
          v8 = v5;
          v46 = AssociatedTypeWitness;
        }
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v46);
        *((_BYTE *)a1 + v9) = v45;
        *((_BYTE *)a1 + v11) = 4;
        break;
      case 5:
        v28 = *((unsigned __int8 *)a2 + v9);
        if (v28 >= 2)
        {
          if (v9 <= 3)
            v29 = v9;
          else
            v29 = 4;
          __asm { BR              X13 }
        }
        v47 = v28 == 1;
        if (v28 == 1)
        {
          v48 = v7;
        }
        else
        {
          v8 = v5;
          v48 = AssociatedTypeWitness;
        }
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v48);
        *((_BYTE *)a1 + v9) = v47;
        *((_BYTE *)a1 + v11) = 5;
        break;
      case 6:
        v30 = *((unsigned __int8 *)a2 + v9);
        if (v30 >= 2)
        {
          if (v9 <= 3)
            v31 = v9;
          else
            v31 = 4;
          __asm { BR              X13 }
        }
        v49 = v30 == 1;
        if (v30 == 1)
        {
          v50 = v7;
        }
        else
        {
          v8 = v5;
          v50 = AssociatedTypeWitness;
        }
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v50);
        *((_BYTE *)a1 + v9) = v49;
        *((_BYTE *)a1 + v11) = 6;
        break;
      default:
        memcpy(a1, a2, v12);
        break;
    }
  }
  return a1;
}

uint64_t sub_23ABCB024(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = *(_QWORD *)(v3 + 64);
  result = swift_getAssociatedTypeWitness();
  v6 = result;
  v7 = *(_QWORD *)(result - 8);
  v8 = *(_QWORD *)(v7 + 64);
  if (v8 <= v4)
    v8 = v4;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v9 <= v8 + 1)
    v9 = v8 + 1;
  if (*(unsigned __int8 *)(a1 + v9) >= 7u)
  {
    if (v9 <= 3)
      v10 = v9;
    else
      v10 = 4;
    __asm { BR              X15 }
  }
  switch(*(_BYTE *)(a1 + v9))
  {
    case 0:
      v11 = *(unsigned __int8 *)(a1 + v8);
      if (v11 >= 2)
      {
        if (v8 <= 3)
          v12 = v8;
        else
          v12 = 4;
        __asm { BR              X14 }
      }
      goto LABEL_46;
    case 1:
      v13 = *(unsigned __int8 *)(a1 + v8);
      if (v13 >= 2)
      {
        if (v8 <= 3)
          v14 = v8;
        else
          v14 = 4;
        __asm { BR              X14 }
      }
      goto LABEL_50;
    case 2:
      v13 = *(unsigned __int8 *)(a1 + v8);
      if (v13 >= 2)
      {
        if (v8 <= 3)
          v15 = v8;
        else
          v15 = 4;
        __asm { BR              X14 }
      }
LABEL_50:
      if (v13 != 1)
      {
        v7 = v3;
        v6 = AssociatedTypeWitness;
      }
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
      return swift_bridgeObjectRelease();
    case 3:
      v11 = *(unsigned __int8 *)(a1 + v8);
      if (v11 >= 2)
      {
        if (v8 <= 3)
          v16 = v8;
        else
          v16 = 4;
        __asm { BR              X14 }
      }
      goto LABEL_46;
    case 4:
      v11 = *(unsigned __int8 *)(a1 + v8);
      if (v11 >= 2)
      {
        if (v8 <= 3)
          v17 = v8;
        else
          v17 = 4;
        __asm { BR              X14 }
      }
      goto LABEL_46;
    case 5:
      v11 = *(unsigned __int8 *)(a1 + v8);
      if (v11 >= 2)
      {
        if (v8 <= 3)
          v18 = v8;
        else
          v18 = 4;
        __asm { BR              X14 }
      }
      goto LABEL_46;
    case 6:
      v11 = *(unsigned __int8 *)(a1 + v8);
      if (v11 >= 2)
      {
        if (v8 <= 3)
          v19 = v8;
        else
          v19 = 4;
        __asm { BR              X14 }
      }
LABEL_46:
      if (v11 == 1)
      {
        v20 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
        v21 = a1;
      }
      else
      {
        v20 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
        v21 = a1;
        v6 = AssociatedTypeWitness;
      }
      result = v20(v21, v6);
      break;
    default:
      return result;
  }
  return result;
}

_BYTE *sub_23ABCB3AC(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char v33;
  BOOL v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  BOOL v38;
  uint64_t v39;
  char v40;
  BOOL v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = v9 + 1;
  if ((v9 & 0xFFFFFFFFFFFFFFF8) + 24 <= v9 + 1)
    v11 = v9 + 1;
  else
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (a2[v11] >= 7u)
  {
    if (v11 <= 3)
      v12 = v11;
    else
      v12 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v11])
  {
    case 0u:
      v13 = a2[v9];
      if (v13 >= 2)
      {
        if (v9 <= 3)
          v14 = v9;
        else
          v14 = 4;
        __asm { BR              X13 }
      }
      v27 = v13 == 1;
      if (v13 == 1)
      {
        v28 = v7;
      }
      else
      {
        v8 = v5;
        v28 = AssociatedTypeWitness;
      }
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v28);
      a1[v9] = v27;
      a1[v11] = 0;
      return a1;
    case 1u:
      v15 = a2[v9];
      if (v15 >= 2)
      {
        if (v9 <= 3)
          v16 = v9;
        else
          v16 = 4;
        __asm { BR              X13 }
      }
      v29 = v15 == 1;
      if (v15 == 1)
      {
        v30 = v7;
      }
      else
      {
        v8 = v5;
        v30 = AssociatedTypeWitness;
      }
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v30);
      a1[v9] = v29;
      v31 = (_QWORD *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      v32 = (_QWORD *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      *v31 = *v32;
      v31[1] = v32[1];
      v33 = 1;
      goto LABEL_61;
    case 2u:
      v17 = a2[v9];
      if (v17 >= 2)
      {
        if (v9 <= 3)
          v18 = v9;
        else
          v18 = 4;
        __asm { BR              X13 }
      }
      v34 = v17 == 1;
      if (v17 == 1)
      {
        v35 = v7;
      }
      else
      {
        v8 = v5;
        v35 = AssociatedTypeWitness;
      }
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v35);
      a1[v9] = v34;
      v36 = (_QWORD *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      v37 = (_QWORD *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      *v36 = *v37;
      v36[1] = v37[1];
      v33 = 2;
LABEL_61:
      a1[v11] = v33;
      swift_bridgeObjectRetain();
      return a1;
    case 3u:
      v19 = a2[v9];
      if (v19 >= 2)
      {
        if (v9 <= 3)
          v20 = v9;
        else
          v20 = 4;
        __asm { BR              X13 }
      }
      v38 = v19 == 1;
      if (v19 == 1)
      {
        v39 = v7;
      }
      else
      {
        v8 = v5;
        v39 = AssociatedTypeWitness;
      }
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v39);
      a1[v9] = v38;
      v40 = 3;
      goto LABEL_78;
    case 4u:
      v21 = a2[v9];
      if (v21 >= 2)
      {
        if (v9 <= 3)
          v22 = v9;
        else
          v22 = 4;
        __asm { BR              X13 }
      }
      v41 = v21 == 1;
      if (v21 == 1)
      {
        v42 = v7;
      }
      else
      {
        v8 = v5;
        v42 = AssociatedTypeWitness;
      }
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v42);
      a1[v9] = v41;
      v40 = 4;
      goto LABEL_78;
    case 5u:
      v23 = a2[v9];
      if (v23 >= 2)
      {
        if (v9 <= 3)
          v24 = v9;
        else
          v24 = 4;
        __asm { BR              X13 }
      }
      v43 = v23 == 1;
      if (v23 == 1)
      {
        v44 = v7;
      }
      else
      {
        v8 = v5;
        v44 = AssociatedTypeWitness;
      }
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v44);
      a1[v9] = v43;
      v40 = 5;
      goto LABEL_78;
    case 6u:
      v25 = a2[v9];
      if (v25 >= 2)
      {
        if (v9 <= 3)
          v26 = v9;
        else
          v26 = 4;
        __asm { BR              X13 }
      }
      v45 = v25 == 1;
      if (v25 == 1)
      {
        v46 = v7;
      }
      else
      {
        v8 = v5;
        v46 = AssociatedTypeWitness;
      }
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v46);
      a1[v9] = v45;
      v40 = 6;
LABEL_78:
      a1[v11] = v40;
      break;
    default:
      memcpy(a1, a2, v11 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_23ABCB9A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  char v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) <= v6)
      v10 = v6;
    else
      v10 = *(_QWORD *)(v9 + 64);
    v11 = v10 + 1;
    if ((v10 & 0xFFFFFFFFFFFFFFF8) + 24 <= v10 + 1)
      v12 = v10 + 1;
    else
      v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 24;
    if (a1[v12] >= 7u)
    {
      if (v12 <= 3)
        v13 = v12;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    switch(a1[v12])
    {
      case 0u:
        v14 = a1[v10];
        if (v14 >= 2)
        {
          if (v10 <= 3)
            v15 = v10;
          else
            v15 = 4;
          __asm { BR              X12 }
        }
        goto LABEL_49;
      case 1u:
        v16 = a1[v10];
        if (v16 >= 2)
        {
          if (v10 <= 3)
            v17 = v10;
          else
            v17 = 4;
          __asm { BR              X12 }
        }
        goto LABEL_53;
      case 2u:
        v16 = a1[v10];
        if (v16 >= 2)
        {
          if (v10 <= 3)
            v18 = v10;
          else
            v18 = 4;
          __asm { BR              X12 }
        }
LABEL_53:
        if (v16 == 1)
          v23 = *(_QWORD *)(v7 - 8);
        else
          v23 = v5;
        if (v16 == 1)
          v24 = v7;
        else
          v24 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, uint64_t))(v23 + 8))(a1, v24);
        swift_bridgeObjectRelease();
        break;
      case 3u:
        v14 = a1[v10];
        if (v14 >= 2)
        {
          if (v10 <= 3)
            v19 = v10;
          else
            v19 = 4;
          __asm { BR              X12 }
        }
        goto LABEL_49;
      case 4u:
        v14 = a1[v10];
        if (v14 >= 2)
        {
          if (v10 <= 3)
            v20 = v10;
          else
            v20 = 4;
          __asm { BR              X12 }
        }
        goto LABEL_49;
      case 5u:
        v14 = a1[v10];
        if (v14 >= 2)
        {
          if (v10 <= 3)
            v21 = v10;
          else
            v21 = 4;
          __asm { BR              X12 }
        }
        goto LABEL_49;
      case 6u:
        v14 = a1[v10];
        if (v14 >= 2)
        {
          if (v10 <= 3)
            v22 = v10;
          else
            v22 = 4;
          __asm { BR              X12 }
        }
LABEL_49:
        if (v14 == 1)
          (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 8))(a1, v7);
        else
          (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        break;
      default:
        break;
    }
    if (a2[v12] >= 7u)
    {
      if (v12 <= 3)
        v25 = v12;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v12])
    {
      case 0u:
        v26 = a2[v10];
        if (v26 >= 2)
        {
          if (v10 <= 3)
            v27 = v10;
          else
            v27 = 4;
          __asm { BR              X12 }
        }
        v40 = v26 == 1;
        if (v26 == 1)
          v41 = v9;
        else
          v41 = v5;
        if (v26 == 1)
          v42 = v8;
        else
          v42 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v41 + 16))(a1, a2, v42);
        a1[v10] = v40;
        a1[v12] = 0;
        return a1;
      case 1u:
        v28 = a2[v10];
        if (v28 >= 2)
        {
          if (v10 <= 3)
            v29 = v10;
          else
            v29 = 4;
          __asm { BR              X12 }
        }
        v43 = v28 == 1;
        if (v28 == 1)
          v44 = v9;
        else
          v44 = v5;
        if (v28 == 1)
          v45 = v8;
        else
          v45 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v44 + 16))(a1, a2, v45);
        a1[v10] = v43;
        v46 = (_QWORD *)((unint64_t)&a1[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
        v47 = (_QWORD *)((unint64_t)&a2[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
        *v46 = *v47;
        v46[1] = v47[1];
        v48 = 1;
        goto LABEL_123;
      case 2u:
        v30 = a2[v10];
        if (v30 >= 2)
        {
          if (v10 <= 3)
            v31 = v10;
          else
            v31 = 4;
          __asm { BR              X12 }
        }
        v49 = v30 == 1;
        if (v30 == 1)
          v50 = v9;
        else
          v50 = v5;
        if (v30 == 1)
          v51 = v8;
        else
          v51 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v50 + 16))(a1, a2, v51);
        a1[v10] = v49;
        v52 = (_QWORD *)((unint64_t)&a1[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
        v53 = (_QWORD *)((unint64_t)&a2[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
        *v52 = *v53;
        v52[1] = v53[1];
        v48 = 2;
LABEL_123:
        a1[v12] = v48;
        swift_bridgeObjectRetain();
        return a1;
      case 3u:
        v32 = a2[v10];
        if (v32 >= 2)
        {
          if (v10 <= 3)
            v33 = v10;
          else
            v33 = 4;
          __asm { BR              X12 }
        }
        v54 = v32 == 1;
        if (v32 == 1)
          v55 = v9;
        else
          v55 = v5;
        if (v32 == 1)
          v56 = v8;
        else
          v56 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v55 + 16))(a1, a2, v56);
        a1[v10] = v54;
        v57 = 3;
        goto LABEL_152;
      case 4u:
        v34 = a2[v10];
        if (v34 >= 2)
        {
          if (v10 <= 3)
            v35 = v10;
          else
            v35 = 4;
          __asm { BR              X12 }
        }
        v58 = v34 == 1;
        if (v34 == 1)
          v59 = v9;
        else
          v59 = v5;
        if (v34 == 1)
          v60 = v8;
        else
          v60 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v59 + 16))(a1, a2, v60);
        a1[v10] = v58;
        v57 = 4;
        goto LABEL_152;
      case 5u:
        v36 = a2[v10];
        if (v36 >= 2)
        {
          if (v10 <= 3)
            v37 = v10;
          else
            v37 = 4;
          __asm { BR              X12 }
        }
        v61 = v36 == 1;
        if (v36 == 1)
          v62 = v9;
        else
          v62 = v5;
        if (v36 == 1)
          v63 = v8;
        else
          v63 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v62 + 16))(a1, a2, v63);
        a1[v10] = v61;
        v57 = 5;
        goto LABEL_152;
      case 6u:
        v38 = a2[v10];
        if (v38 >= 2)
        {
          if (v10 <= 3)
            v39 = v10;
          else
            v39 = 4;
          __asm { BR              X12 }
        }
        v64 = v38 == 1;
        if (v38 == 1)
          v65 = v9;
        else
          v65 = v5;
        if (v38 == 1)
          v66 = v8;
        else
          v66 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v65 + 16))(a1, a2, v66);
        a1[v10] = v64;
        v57 = 6;
LABEL_152:
        a1[v12] = v57;
        break;
      default:
        memcpy(a1, a2, v12 + 1);
        break;
    }
  }
  return a1;
}

_BYTE *sub_23ABCC280(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  char v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_QWORD *)(v8 + 64) <= v6)
    v9 = v6;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = v9 + 1;
  if ((v9 & 0xFFFFFFFFFFFFFFF8) + 24 <= v9 + 1)
    v11 = v9 + 1;
  else
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (a2[v11] >= 7u)
  {
    if (v11 <= 3)
      v12 = v11;
    else
      v12 = 4;
    __asm { BR              X13 }
  }
  switch(a2[v11])
  {
    case 0u:
      v13 = a2[v9];
      if (v13 >= 2)
      {
        if (v9 <= 3)
          v14 = v9;
        else
          v14 = 4;
        __asm { BR              X13 }
      }
      v27 = v13 == 1;
      if (v13 == 1)
      {
        v28 = v7;
      }
      else
      {
        v8 = v5;
        v28 = AssociatedTypeWitness;
      }
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v28);
      a1[v9] = v27;
      a1[v11] = 0;
      return a1;
    case 1u:
      v15 = a2[v9];
      if (v15 >= 2)
      {
        if (v9 <= 3)
          v16 = v9;
        else
          v16 = 4;
        __asm { BR              X13 }
      }
      v29 = v15 == 1;
      if (v15 == 1)
      {
        v30 = v7;
      }
      else
      {
        v8 = v5;
        v30 = AssociatedTypeWitness;
      }
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v30);
      a1[v9] = v29;
      *(_OWORD *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFF8);
      v31 = 1;
      goto LABEL_77;
    case 2u:
      v17 = a2[v9];
      if (v17 >= 2)
      {
        if (v9 <= 3)
          v18 = v9;
        else
          v18 = 4;
        __asm { BR              X13 }
      }
      v32 = v17 == 1;
      if (v17 == 1)
      {
        v33 = v7;
      }
      else
      {
        v8 = v5;
        v33 = AssociatedTypeWitness;
      }
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v33);
      a1[v9] = v32;
      *(_OWORD *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFF8);
      v31 = 2;
      goto LABEL_77;
    case 3u:
      v19 = a2[v9];
      if (v19 >= 2)
      {
        if (v9 <= 3)
          v20 = v9;
        else
          v20 = 4;
        __asm { BR              X13 }
      }
      v34 = v19 == 1;
      if (v19 == 1)
      {
        v35 = v7;
      }
      else
      {
        v8 = v5;
        v35 = AssociatedTypeWitness;
      }
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v35);
      a1[v9] = v34;
      v31 = 3;
      goto LABEL_77;
    case 4u:
      v21 = a2[v9];
      if (v21 >= 2)
      {
        if (v9 <= 3)
          v22 = v9;
        else
          v22 = 4;
        __asm { BR              X13 }
      }
      v36 = v21 == 1;
      if (v21 == 1)
      {
        v37 = v7;
      }
      else
      {
        v8 = v5;
        v37 = AssociatedTypeWitness;
      }
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v37);
      a1[v9] = v36;
      v31 = 4;
      goto LABEL_77;
    case 5u:
      v23 = a2[v9];
      if (v23 >= 2)
      {
        if (v9 <= 3)
          v24 = v9;
        else
          v24 = 4;
        __asm { BR              X13 }
      }
      v38 = v23 == 1;
      if (v23 == 1)
      {
        v39 = v7;
      }
      else
      {
        v8 = v5;
        v39 = AssociatedTypeWitness;
      }
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v39);
      a1[v9] = v38;
      v31 = 5;
      goto LABEL_77;
    case 6u:
      v25 = a2[v9];
      if (v25 >= 2)
      {
        if (v9 <= 3)
          v26 = v9;
        else
          v26 = 4;
        __asm { BR              X13 }
      }
      v40 = v25 == 1;
      if (v25 == 1)
      {
        v41 = v7;
      }
      else
      {
        v8 = v5;
        v41 = AssociatedTypeWitness;
      }
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v41);
      a1[v9] = v40;
      v31 = 6;
LABEL_77:
      a1[v11] = v31;
      break;
    default:
      memcpy(a1, a2, v11 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_23ABCC85C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = swift_getAssociatedTypeWitness();
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if (*(_QWORD *)(v9 + 64) <= v6)
      v10 = v6;
    else
      v10 = *(_QWORD *)(v9 + 64);
    v11 = v10 + 1;
    if ((v10 & 0xFFFFFFFFFFFFFFF8) + 24 <= v10 + 1)
      v12 = v10 + 1;
    else
      v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 24;
    if (a1[v12] >= 7u)
    {
      if (v12 <= 3)
        v13 = v12;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    switch(a1[v12])
    {
      case 0u:
        v14 = a1[v10];
        if (v14 >= 2)
        {
          if (v10 <= 3)
            v15 = v10;
          else
            v15 = 4;
          __asm { BR              X12 }
        }
        goto LABEL_49;
      case 1u:
        v16 = a1[v10];
        if (v16 >= 2)
        {
          if (v10 <= 3)
            v17 = v10;
          else
            v17 = 4;
          __asm { BR              X12 }
        }
        goto LABEL_53;
      case 2u:
        v16 = a1[v10];
        if (v16 >= 2)
        {
          if (v10 <= 3)
            v18 = v10;
          else
            v18 = 4;
          __asm { BR              X12 }
        }
LABEL_53:
        if (v16 == 1)
          v23 = *(_QWORD *)(v7 - 8);
        else
          v23 = v5;
        if (v16 == 1)
          v24 = v7;
        else
          v24 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, uint64_t))(v23 + 8))(a1, v24);
        swift_bridgeObjectRelease();
        break;
      case 3u:
        v14 = a1[v10];
        if (v14 >= 2)
        {
          if (v10 <= 3)
            v19 = v10;
          else
            v19 = 4;
          __asm { BR              X12 }
        }
        goto LABEL_49;
      case 4u:
        v14 = a1[v10];
        if (v14 >= 2)
        {
          if (v10 <= 3)
            v20 = v10;
          else
            v20 = 4;
          __asm { BR              X12 }
        }
        goto LABEL_49;
      case 5u:
        v14 = a1[v10];
        if (v14 >= 2)
        {
          if (v10 <= 3)
            v21 = v10;
          else
            v21 = 4;
          __asm { BR              X12 }
        }
        goto LABEL_49;
      case 6u:
        v14 = a1[v10];
        if (v14 >= 2)
        {
          if (v10 <= 3)
            v22 = v10;
          else
            v22 = 4;
          __asm { BR              X12 }
        }
LABEL_49:
        if (v14 == 1)
          (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 8))(a1, v7);
        else
          (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        break;
      default:
        break;
    }
    if (a2[v12] >= 7u)
    {
      if (v12 <= 3)
        v25 = v12;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v12])
    {
      case 0u:
        v26 = a2[v10];
        if (v26 >= 2)
        {
          if (v10 <= 3)
            v27 = v10;
          else
            v27 = 4;
          __asm { BR              X12 }
        }
        v40 = v26 == 1;
        if (v26 == 1)
          v41 = v9;
        else
          v41 = v5;
        if (v26 == 1)
          v42 = v8;
        else
          v42 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v41 + 32))(a1, a2, v42);
        a1[v10] = v40;
        a1[v12] = 0;
        return a1;
      case 1u:
        v28 = a2[v10];
        if (v28 >= 2)
        {
          if (v10 <= 3)
            v29 = v10;
          else
            v29 = 4;
          __asm { BR              X12 }
        }
        v43 = v28 == 1;
        if (v28 == 1)
          v44 = v9;
        else
          v44 = v5;
        if (v28 == 1)
          v45 = v8;
        else
          v45 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v44 + 32))(a1, a2, v45);
        a1[v10] = v43;
        *(_OWORD *)((unint64_t)&a1[v11 + 7] & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v11 + 7] & 0xFFFFFFFFFFFFF8);
        v46 = 1;
        goto LABEL_151;
      case 2u:
        v30 = a2[v10];
        if (v30 >= 2)
        {
          if (v10 <= 3)
            v31 = v10;
          else
            v31 = 4;
          __asm { BR              X12 }
        }
        v47 = v30 == 1;
        if (v30 == 1)
          v48 = v9;
        else
          v48 = v5;
        if (v30 == 1)
          v49 = v8;
        else
          v49 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v48 + 32))(a1, a2, v49);
        a1[v10] = v47;
        *(_OWORD *)((unint64_t)&a1[v11 + 7] & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v11 + 7] & 0xFFFFFFFFFFFFF8);
        v46 = 2;
        goto LABEL_151;
      case 3u:
        v32 = a2[v10];
        if (v32 >= 2)
        {
          if (v10 <= 3)
            v33 = v10;
          else
            v33 = 4;
          __asm { BR              X12 }
        }
        v50 = v32 == 1;
        if (v32 == 1)
          v51 = v9;
        else
          v51 = v5;
        if (v32 == 1)
          v52 = v8;
        else
          v52 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v51 + 32))(a1, a2, v52);
        a1[v10] = v50;
        v46 = 3;
        goto LABEL_151;
      case 4u:
        v34 = a2[v10];
        if (v34 >= 2)
        {
          if (v10 <= 3)
            v35 = v10;
          else
            v35 = 4;
          __asm { BR              X12 }
        }
        v53 = v34 == 1;
        if (v34 == 1)
          v54 = v9;
        else
          v54 = v5;
        if (v34 == 1)
          v55 = v8;
        else
          v55 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v54 + 32))(a1, a2, v55);
        a1[v10] = v53;
        v46 = 4;
        goto LABEL_151;
      case 5u:
        v36 = a2[v10];
        if (v36 >= 2)
        {
          if (v10 <= 3)
            v37 = v10;
          else
            v37 = 4;
          __asm { BR              X12 }
        }
        v56 = v36 == 1;
        if (v36 == 1)
          v57 = v9;
        else
          v57 = v5;
        if (v36 == 1)
          v58 = v8;
        else
          v58 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v57 + 32))(a1, a2, v58);
        a1[v10] = v56;
        v46 = 5;
        goto LABEL_151;
      case 6u:
        v38 = a2[v10];
        if (v38 >= 2)
        {
          if (v10 <= 3)
            v39 = v10;
          else
            v39 = 4;
          __asm { BR              X12 }
        }
        v59 = v38 == 1;
        if (v38 == 1)
          v60 = v9;
        else
          v60 = v5;
        if (v38 == 1)
          v61 = v8;
        else
          v61 = AssociatedTypeWitness;
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v60 + 32))(a1, a2, v61);
        a1[v10] = v59;
        v46 = 6;
LABEL_151:
        a1[v12] = v46;
        break;
      default:
        memcpy(a1, a2, v12 + 1);
        break;
    }
  }
  return a1;
}

uint64_t sub_23ABCD124(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4)
    v5 = v4;
  if ((v5 & 0xFFFFFFFFFFFFFFF8) + 24 <= v5 + 1)
    v6 = v5 + 1;
  else
    v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_24;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 248) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v11 < 2)
    {
LABEL_24:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 8)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_24;
LABEL_17:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X11 }
  }
  return (v12 + 249);
}

void sub_23ABCD2B8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6)
    v7 = v6;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) + 24 <= v7 + 1)
    v8 = v7 + 1;
  else
    v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 24;
  v9 = v8 + 1;
  if (a3 < 0xF9)
  {
    v10 = 0;
  }
  else if (v9 <= 3)
  {
    v12 = ((a3 + ~(-1 << (8 * v9)) - 248) >> (8 * v9)) + 1;
    if (HIWORD(v12))
    {
      v10 = 4u;
    }
    else if (v12 >= 0x100)
    {
      v10 = 2;
    }
    else
    {
      v10 = v12 > 1;
    }
  }
  else
  {
    v10 = 1u;
  }
  if (a2 <= 0xF8)
    __asm { BR              X11 }
  v11 = a2 - 249;
  if (v9 < 4)
  {
    if ((_DWORD)v8 != -1)
    {
      v13 = v11 & ~(-1 << (8 * v9));
      bzero(a1, v9);
      if ((_DWORD)v9 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }
      else if ((_DWORD)v9 == 2)
      {
        *(_WORD *)a1 = v13;
      }
      else
      {
        *a1 = v13;
      }
    }
  }
  else
  {
    bzero(a1, v8 + 1);
    *(_DWORD *)a1 = v11;
  }
  __asm { BR              X10 }
}

uint64_t sub_23ABCD4C8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v3 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 <= v2)
    v3 = v2;
  if ((v3 & 0xFFFFFFFFFFFFFFF8) + 24 <= v3 + 1)
    v4 = v3 + 1;
  else
    v4 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  result = *(unsigned __int8 *)(a1 + v4);
  if (result >= 7)
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_23ABCD5D4(_BYTE *a1, unsigned int a2)
{
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4)
    v5 = v4;
  if ((v5 & 0xFFFFFFFFFFFFFFF8) + 24 <= v5 + 1)
    v6 = v5 + 1;
  else
    v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (a2 > 6)
  {
    v7 = a2 - 7;
    if (v6 < 4)
    {
      v8 = v7 >> (8 * v6);
      v9 = v7 & ~(-1 << (8 * v6));
      a1[v6] = v8 + 7;
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *(_WORD *)a1 = v9;
        a1[2] = BYTE2(v9);
      }
      else if ((_DWORD)v6 == 2)
      {
        *(_WORD *)a1 = v9;
      }
      else
      {
        *a1 = v9;
      }
    }
    else
    {
      a1[v6] = 7;
      bzero(a1, v6);
      *(_DWORD *)a1 = v7;
    }
  }
  else
  {
    a1[v6] = a2;
  }
}

uint64_t sub_23ABCD700()
{
  return swift_initClassMetadata2();
}

void sub_23ABCD744(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v1 + 16))((char *)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = (char *)sub_23ABCD7C8 + 4 * byte_23B1D1330[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23ABCD7C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  return 1;
}

uint64_t sub_23ABCD914(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char v54;
  void (*v55)(char *, uint64_t, uint64_t);
  char v56;
  char v57;
  char *v58;
  char *v59;
  _QWORD v61[25];
  char *v62;
  uint64_t TupleTypeMetadata2;

  v3 = v2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v61[22] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v62 = (char *)v61 - v6;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v61[23] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v61[24] = AssociatedTypeWitness;
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v61[10] = (char *)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v61[9] = (char *)v61 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v61[2] = (char *)v61 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v61[1] = (char *)v61 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v61[4] = (char *)v61 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v61[3] = (char *)v61 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v61[8] = (char *)v61 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v61[7] = (char *)v61 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v61[15] = (char *)v61 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v61[6] = (char *)v61 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v61[14] = (char *)v61 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v61[12] = (char *)v61 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v61[11] = (char *)v61 - v35;
  v36 = *(_QWORD *)(a2 - 8);
  v37 = MEMORY[0x24BDAC7A8](v34);
  v61[17] = (char *)v61 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x24BDAC7A8](v37);
  v61[5] = (char *)v61 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v61[18] = (char *)v61 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v44 = MEMORY[0x24BDAC7A8](v43);
  v61[13] = (char *)v61 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v47 = MEMORY[0x24BDAC7A8](v46);
  v61[16] = (char *)v61 - v48;
  v49 = MEMORY[0x24BDAC7A8](v47);
  v50 = MEMORY[0x24BDAC7A8](v49);
  v61[21] = (char *)v61 - v51;
  MEMORY[0x24BDAC7A8](v50);
  v53 = (char *)v61 - v52;
  v61[19] = v8;
  v61[20] = v7;
  sub_23ABCE944(v3, a1, v7, v8);
  LOBYTE(v8) = v54;
  v55 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  v55(v53, v3, a2);
  if ((v8 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v53, a2);
LABEL_5:
    v58 = &v62[*(int *)(TupleTypeMetadata2 + 48)];
    v55(v62, v3, a2);
    v55(v58, a1, a2);
    v59 = (char *)&loc_23ABCDD74 + 4 * byte_23B1D1336[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  sub_23ABCD744(a2);
  v57 = v56;
  (*(void (**)(char *, uint64_t))(v36 + 8))(v53, a2);
  if ((v57 & 1) == 0)
    goto LABEL_5;
  return 1;
}

void sub_23ABCE944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  _QWORD v50[4];
  uint64_t TupleTypeMetadata2;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v72 = a1;
  v73 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_23B1C6C98();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v50[2] = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v50[3] = (char *)v50 - v9;
  v62 = v7;
  v65 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v50[1] = (char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v63 = (char *)v50 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v57 = (char *)v50 - v15;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v70 = AssociatedTypeWitness;
  v71 = v16;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v56 = (char *)v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v53 = (char *)v50 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v50[0] = (char *)v50 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v58 = (char *)v50 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v59 = (char *)v50 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v54 = (char *)v50 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v60 = (char *)v50 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v64 = (char *)v50 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v55 = (char *)v50 - v34;
  MEMORY[0x24BDAC7A8](v33);
  v52 = (char *)v50 - v35;
  v66 = a4;
  v67 = a3;
  v37 = type metadata accessor for JobLockRule(0, a3, a4, v36);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = MEMORY[0x24BDAC7A8](v37);
  v40 = MEMORY[0x24BDAC7A8](v39);
  v41 = MEMORY[0x24BDAC7A8](v40);
  v42 = MEMORY[0x24BDAC7A8](v41);
  v61 = (char *)v50 - v43;
  MEMORY[0x24BDAC7A8](v42);
  v44 = swift_getTupleTypeMetadata2();
  v69 = *(_QWORD *)(v44 - 8);
  v45 = MEMORY[0x24BDAC7A8](v44);
  v47 = (char *)v50 + *(int *)(v45 + 48) - v46;
  v68 = v38;
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
  v48((char *)v50 - v46, v72, v37);
  v48(v47, v73, v37);
  v49 = (char *)sub_23ABCED30 + 4 * word_23B1D1354[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23ABCED30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v7 = v1;
  v3(v2, v1, v4);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 - 112) + 8))(v2, *(_QWORD *)(v6 - 120));
    v8 = 0;
    v9 = *(_QWORD *)(v6 - 128);
  }
  else
  {
    v10 = *(_QWORD *)(v6 - 120);
    v11 = *(_QWORD *)(v6 - 112);
    v12 = *(_QWORD *)(v6 - 264);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v12, v5, v10);
    swift_getAssociatedConformanceWitness();
    v8 = sub_23B1C63A4();
    v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v13(v12, v10);
    v13(v2, v10);
    v9 = *(_QWORD *)(v6 - 136);
    v0 = v4;
  }
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v0);
  return v8 & 1;
}

void sub_23ABCF56C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD v15[6];

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v15[2] = *(_QWORD *)(a1 + 24);
  v15[3] = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v15[1] = (char *)v15 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  v14 = (char *)sub_23ABCF6E8 + 4 * word_23B1D1360[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23ABCF6E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  *(_QWORD *)(v4 - 96) = 0;
  *(_QWORD *)(v4 - 88) = 0xE000000000000000;
  sub_23B1C64F4();
  swift_getAssociatedConformanceWitness();
  sub_23B1C7340();
  sub_23B1C64F4();
  v5 = *(_QWORD *)(v4 - 96);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v5;
}

void sub_23ABCFB58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[4];

  v3 = v2;
  v14[3] = a1;
  v5 = *(_QWORD *)(a2 + 16);
  v14[1] = *(_QWORD *)(a2 + 24);
  v14[2] = v5;
  swift_getAssociatedTypeWitness();
  v6 = sub_23B1C6C98();
  v14[0] = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2);
  v13 = (char *)sub_23ABCFCBC + 4 * byte_23B1D136C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23ABCFCBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v1, v3, v0);
  sub_23B1C74B4();
  swift_getAssociatedConformanceWitness();
  sub_23B1C62D8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_23ABCFF4C(uint64_t a1)
{
  _BYTE v3[72];

  sub_23B1C74A8();
  sub_23ABCFB58((uint64_t)v3, a1);
  return sub_23B1C74E4();
}

uint64_t sub_23ABCFF98(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  sub_23B1C74A8();
  sub_23ABCFB58((uint64_t)v4, a2);
  return sub_23B1C74E4();
}

void sub_23ABCFFDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23ABCE944(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

_QWORD *sub_23ABCFFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_allocObject();
  return sub_23ABD0030(a1, a2, v4, v5);
}

_QWORD *sub_23ABD0030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for JobLockRule(0, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 88), a4);
  v6 = sub_23B1C67DC();
  MEMORY[0x23B8613CC](&unk_23B1D15E8, v5);
  MEMORY[0x23B8613CC](MEMORY[0x24BEE12C8], v6);
  v4[2] = sub_23B1C692C();
  v4[3] = sub_23B1C692C();
  return v4;
}

uint64_t sub_23ABD00F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  swift_beginAccess();
  v3 = type metadata accessor for JobLockRule(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  swift_bridgeObjectRetain();
  MEMORY[0x23B8613CC](&unk_23B1D15E8, v3);
  v4 = sub_23B1C6920();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE1718], v4);
  LOBYTE(v3) = sub_23B1C662C();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_23ABD01C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  swift_beginAccess();
  v3 = type metadata accessor for JobLockRule(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  swift_bridgeObjectRetain();
  MEMORY[0x23B8613CC](&unk_23B1D15E8, v3);
  v4 = sub_23B1C6920();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE1718], v4);
  LOBYTE(v3) = sub_23B1C662C();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_23ABD0294()
{
  void *v0;

  return sub_23AC45088(v0, (void (*)(uint64_t *__return_ptr))sub_23ABD73F0);
}

uint64_t sub_23ABD02CC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v5 = type metadata accessor for JobLockRule(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v4);
  swift_bridgeObjectRetain();
  MEMORY[0x23B8613CC](&unk_23B1D15E8, v5);
  sub_23B1C68A8();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_23B1C68A8();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  result = sub_23B1C64F4();
  *a2 = 0x676E696E6E75723CLL;
  a2[1] = 0xE90000000000003ALL;
  return result;
}

uint64_t sub_23ABD0460()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23ABD0484()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for JobLockAggregator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JobLockAggregator);
}

uint64_t sub_23ABD04BC()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23ABD0510()
{
  return sub_23ABD0294();
}

uint64_t sub_23ABD0530(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 64) = a1;
  sub_23ABD76F0(a2, v6 + 16);
  *(_QWORD *)(v6 + 56) = a3;
  *(_WORD *)(v6 + 72) = 0;
  v7 = *(_QWORD *)(v6 + 80);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  sub_23AAB7948(v7);
  return v6;
}

uint64_t sub_23ABD059C(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 64) = a1;
  sub_23ABD76F0(a2, v3 + 16);
  *(_QWORD *)(v3 + 56) = a3;
  *(_WORD *)(v3 + 72) = 0;
  v5 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  sub_23AAB7948(v5);
  return v3;
}

uint64_t sub_23ABD05E8()
{
  uint64_t v0;

  return sub_23AABC838(*(void **)(v0 + 64), (void (*)(uint64_t *__return_ptr))sub_23ABD7770) & 1;
}

uint64_t sub_23ABD0630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t i;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  char v38;
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t (*v51)(char *, unint64_t, uint64_t);
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  BOOL v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t result;
  char v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  __int128 v98[2];
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  char *v106;

  v5 = a1;
  v87 = a4;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v86 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v85 = v6;
  v7 = type metadata accessor for JobLockRule(0, v86, v6, a3);
  v96 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v95 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v97 = (char *)&v80 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v106 = (char *)&v80 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v80 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v94 = (char *)&v80 - v18;
  v82 = v19;
  MEMORY[0x24BDAC7A8](v17);
  v89 = (char *)&v80 - v20;
  v90 = *(_QWORD *)(v5 + 64);
  if ((sub_23ABD108C(v5) & 1) != 0)
  {
    v21 = *(void (**)(uint64_t))(v5 + 80);
    if (v21)
    {
      v22 = swift_retain();
      v21(v22);
      sub_23AAB7948((uint64_t)v21);
    }
  }
  v91 = v5;
  if ((a2 & 1) == 0)
  {
    swift_beginAccess();
    MEMORY[0x23B8613CC](&unk_23B1D15E8, v7);
    swift_bridgeObjectRetain();
    v23 = sub_23B1C7034();
    v25 = v101;
    v24 = v102;
    v26 = v104;
    v27 = v105;
    v84 = (unint64_t)(v103 + 64) >> 6;
    v28 = v96;
    v83 = v101;
    v81 = v102;
    if (!v105)
      goto LABEL_7;
LABEL_6:
    v92 = (v27 - 1) & v27;
    v93 = v26;
    for (i = __clz(__rbit64(v27)) | ((_QWORD)v26 << 6); ; i = __clz(__rbit64(v31)) + (v32 << 6))
    {
      v34 = *(_QWORD *)(v28 + 72);
      v35 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
      v36 = v89;
      v35(v89, *(_QWORD *)(v25 + 48) + v34 * i, v7);
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v94, v36, v7);
      a2 = *(_QWORD *)(v91 + 56);
      v37 = swift_bridgeObjectRetain();
      if (MEMORY[0x23B85F0E0](v37, v7))
      {
        v38 = sub_23B1C6770();
        sub_23B1C6734();
        if ((v38 & 1) != 0)
        {
          v35(v16, a2 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80)), v7);
        }
        else
        {
          v23 = sub_23B1C6F38();
          if (v82 != 8)
            goto LABEL_84;
          *(_QWORD *)&v98[0] = v23;
          v35(v16, (unint64_t)v98, v7);
          swift_unknownObjectRelease();
        }
        v39 = sub_23ABCD914((uint64_t)v94, v7);
        v40 = *(void (**)(char *, uint64_t))(v28 + 8);
        v40(v16, v7);
        if ((v39 & 1) != 0)
        {
LABEL_43:
          swift_bridgeObjectRelease();
          v40(v94, v7);
          swift_release();
          v5 = v91;
          break;
        }
        v41 = a2 + v34;
        v42 = 1;
        while (v42 != MEMORY[0x23B85F0E0](a2, v7))
        {
          v43 = sub_23B1C6770();
          sub_23B1C6734();
          if ((v43 & 1) != 0)
          {
            v23 = ((uint64_t (*)(char *, unint64_t, uint64_t))v35)(v16, v41 + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80)), v7);
            if (__OFADD__(v42, 1))
              goto LABEL_80;
          }
          else
          {
            v23 = sub_23B1C6F38();
            if (v82 != 8)
              goto LABEL_83;
            *(_QWORD *)&v98[0] = v23;
            v35(v16, (unint64_t)v98, v7);
            v23 = swift_unknownObjectRelease();
            if (__OFADD__(v42, 1))
            {
LABEL_80:
              __break(1u);
LABEL_81:
              __break(1u);
LABEL_82:
              __break(1u);
LABEL_83:
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              MEMORY[0x24BDAC7A8](v23);
              *(&v80 - 2) = a2;
              sub_23AFF56B8((uint64_t (*)(uint64_t))sub_23ABD7834, (uint64_t)(&v80 - 4), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314);
            }
          }
          v44 = sub_23ABCD914((uint64_t)v94, v7);
          v40(v16, v7);
          ++v42;
          v41 += v34;
          if ((v44 & 1) != 0)
            goto LABEL_43;
        }
        swift_bridgeObjectRelease();
        v28 = v96;
        v25 = v83;
        v24 = v81;
        v23 = ((uint64_t (*)(char *, uint64_t))v40)(v94, v7);
      }
      else
      {
        swift_bridgeObjectRelease();
        v23 = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v94, v7);
      }
      v27 = v92;
      v26 = v93;
      if (v92)
        goto LABEL_6;
LABEL_7:
      v30 = (int64_t)v26 + 1;
      if (__OFADD__(v26, 1))
        goto LABEL_81;
      if (v30 >= v84)
      {
LABEL_78:
        result = swift_release();
        v77 = 0;
        goto LABEL_77;
      }
      v31 = *(_QWORD *)(v24 + 8 * v30);
      v32 = (uint64_t)v26 + 1;
      if (!v31)
      {
        v32 = (uint64_t)v26 + 2;
        if ((uint64_t)v26 + 2 >= v84)
          goto LABEL_78;
        v31 = *(_QWORD *)(v24 + 8 * v32);
        if (!v31)
        {
          v32 = (uint64_t)v26 + 3;
          if ((uint64_t)v26 + 3 >= v84)
            goto LABEL_78;
          v31 = *(_QWORD *)(v24 + 8 * v32);
          if (!v31)
          {
            v32 = (uint64_t)v26 + 4;
            if ((uint64_t)v26 + 4 >= v84)
              goto LABEL_78;
            v31 = *(_QWORD *)(v24 + 8 * v32);
            if (!v31)
            {
              v32 = (uint64_t)v26 + 5;
              if ((uint64_t)v26 + 5 >= v84)
                goto LABEL_78;
              v31 = *(_QWORD *)(v24 + 8 * v32);
              if (!v31)
              {
                v33 = (uint64_t)v26 + 6;
                do
                {
                  if (v84 == v33)
                    goto LABEL_78;
                  v31 = *(_QWORD *)(v24 + 8 * v33++);
                }
                while (!v31);
                v32 = v33 - 1;
              }
            }
          }
        }
      }
      v92 = (v31 - 1) & v31;
      v93 = (_QWORD *)v32;
    }
  }
  *(_BYTE *)(v5 + 73) = 1;
  v45 = *(_QWORD *)(v5 + 56);
  v46 = swift_bridgeObjectRetain();
  v47 = MEMORY[0x23B85F0E0](v46, v7);
  v48 = v96;
  if (v47)
  {
    v49 = 0;
    v50 = (uint64_t *)(v90 + 24);
    v92 = v91 + 16;
    v93 = (_QWORD *)(v90 + 24);
    v94 = (char *)v45;
    do
    {
      a2 = sub_23B1C6770();
      sub_23B1C6734();
      if ((a2 & 1) != 0)
      {
        v51 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v48 + 16);
        v23 = v51(v106, v45+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(_QWORD *)(v48 + 72) * v49, v7);
        v52 = v49 + 1;
        if (__OFADD__(v49, 1))
          goto LABEL_79;
      }
      else
      {
        v23 = sub_23B1C6F38();
        if (v82 != 8)
          goto LABEL_82;
        a2 = v23;
        *(_QWORD *)&v98[0] = v23;
        v51 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v48 + 16);
        v51(v106, (unint64_t)v98, v7);
        v23 = swift_unknownObjectRelease();
        v52 = v49 + 1;
        if (__OFADD__(v49, 1))
        {
LABEL_79:
          __break(1u);
          goto LABEL_80;
        }
      }
      v53 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
      v54 = v97;
      v53(v97, v106, v7);
      swift_beginAccess();
      v55 = *v50;
      v56 = MEMORY[0x23B8613CC](&unk_23B1D15E8, v7);
      MEMORY[0x23B85EBD0](&v99, v54, v55, v7, &type metadata for JobLockPendingFlushStatus, v56);
      v57 = v99;
      v58 = v100;
      swift_endAccess();
      if (v57)
        v59 = v58;
      else
        v59 = 0;
      if (v57)
        v60 = v57;
      else
        v60 = (_QWORD *)MEMORY[0x24BEE4AF8];
      sub_23AA77B28(v92, (uint64_t)v98);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v60 = sub_23AF98728(0, v60[2] + 1, 1, v60);
      v62 = v60[2];
      v61 = v60[3];
      if (v62 >= v61 >> 1)
        v60 = sub_23AF98728((_QWORD *)(v61 > 1), v62 + 1, 1, v60);
      v60[2] = v62 + 1;
      sub_23ABD76F0(v98, (uint64_t)&v60[5 * v62 + 4]);
      v63 = v97;
      v51(v95, (unint64_t)v97, v7);
      v99 = v60;
      v100 = v59;
      v50 = v93;
      swift_beginAccess();
      sub_23B1C629C();
      sub_23B1C62C0();
      swift_endAccess();
      v48 = v96;
      (*(void (**)(char *, uint64_t))(v96 + 8))(v63, v7);
      v45 = (uint64_t)v94;
      ++v49;
    }
    while (v52 != MEMORY[0x23B85F0E0](v94, v7));
  }
  swift_bridgeObjectRelease();
  v64 = objc_msgSend(*(id *)(v90 + 40), sel_allObjects);
  v66 = type metadata accessor for JobLockAggregator(0, v86, v85, v65);
  v67 = sub_23B1C6704();

  if (!MEMORY[0x23B85F0E0](v67, v66))
    goto LABEL_76;
  v68 = 4;
  v69 = v88;
  while (1)
  {
    v70 = v68 - 4;
    v71 = sub_23B1C6770();
    sub_23B1C6734();
    if ((v71 & 1) == 0)
      break;
    a2 = *(_QWORD *)(v67 + 8 * v68);
    swift_retain();
    v72 = __OFADD__(v70, 1);
    v73 = v68 - 3;
    if (v72)
      goto LABEL_75;
LABEL_68:
    v74 = (void *)swift_retain();
    v23 = objc_sync_enter(v74);
    if ((_DWORD)v23)
      goto LABEL_85;
    sub_23ABD110C((uint64_t *)a2);
    if (v69)
    {
      v78 = objc_sync_exit((id)a2);
      MEMORY[0x24BDAC7A8](v78);
      v79 = &v80 - 4;
      *(&v80 - 2) = a2;
      goto LABEL_88;
    }
    v69 = 0;
    v75 = objc_sync_exit((id)a2);
    if ((_DWORD)v75)
    {
      MEMORY[0x24BDAC7A8](v75);
      v79 = &v80 - 4;
      *(&v80 - 2) = a2;
LABEL_88:
      sub_23AFF56B8((uint64_t (*)(uint64_t))sub_23ABD7830, (uint64_t)v79, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318);
    }
    swift_release_n();
    ++v68;
    if (v73 == MEMORY[0x23B85F0E0](v67, v66))
      goto LABEL_76;
  }
  a2 = sub_23B1C6F38();
  v72 = __OFADD__(v70, 1);
  v73 = v68 - 3;
  if (!v72)
    goto LABEL_68;
LABEL_75:
  __break(1u);
LABEL_76:
  result = swift_bridgeObjectRelease();
  v77 = 1;
LABEL_77:
  *v87 = v77;
  return result;
}

uint64_t sub_23ABD108C(uint64_t a1)
{
  void *v1;
  char v2;

  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 72) = 1;
    MEMORY[0x24BDAC7A8](a1);
    v2 = sub_23AABC838(v1, (void (*)(uint64_t *__return_ptr))sub_23ABD778C);
  }
  return v2 & 1;
}

uint64_t sub_23ABD110C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  swift_beginAccess();
  v3 = type metadata accessor for JobLockRule(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  swift_bridgeObjectRetain();
  MEMORY[0x23B8613CC](&unk_23B1D15E8, v3);
  sub_23B1C6920();
  v4 = sub_23B1C67DC();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE12C8], v4);
  sub_23B1C6914();
  return swift_endAccess();
}

uint64_t sub_23ABD11D8()
{
  uint64_t v0;

  sub_23AC45210(*(void **)(v0 + 64), (void (*)(void))sub_23ABD7808);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_release();
  sub_23AAB7948(*(_QWORD *)(v0 + 80));
  return v0;
}

uint64_t sub_23ABD1234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  char v36;
  char v37;
  int64_t v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, unint64_t, uint64_t);
  uint64_t *v60;
  __int128 v61[2];
  __int128 v62[3];
  _QWORD *v63;

  v5 = v4;
  v6 = a1;
  v7 = type metadata accessor for JobLockRule(0, *(_QWORD *)(*(_QWORD *)a1 + 80), *(_QWORD *)(*(_QWORD *)a1 + 88), a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v55 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v52 = (char *)&v48 - v12;
  v49 = v13;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v48 - v14;
  v16 = *(_QWORD *)(v6 + 64);
  result = sub_23ABD108C(v6);
  if ((result & 1) != 0)
  {
    v18 = *(void (**)(uint64_t))(v6 + 80);
    if (v18)
    {
      v19 = swift_retain();
      v18(v19);
      result = sub_23AAB7948((uint64_t)v18);
    }
  }
  if (*(_BYTE *)(v6 + 73) != 1)
    return result;
  v20 = *(_QWORD *)(v6 + 56);
  v21 = swift_bridgeObjectRetain();
  if (!MEMORY[0x23B85F0E0](v21, v7))
    return swift_bridgeObjectRelease();
  v22 = 0;
  v60 = (uint64_t *)(v16 + 24);
  v23 = v52;
  v50 = v8;
  v51 = v7;
  v53 = v20;
  v54 = v15;
  while (1)
  {
    v24 = sub_23B1C6770();
    sub_23B1C6734();
    if ((v24 & 1) != 0)
    {
      v25 = v20
          + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
          + *(_QWORD *)(v8 + 72) * v22;
      v59 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v59(v15, v25, v7);
      v26 = __OFADD__(v22++, 1);
      if (v26)
        goto LABEL_46;
      goto LABEL_11;
    }
    v47 = sub_23B1C6F38();
    if (v49 != 8)
      break;
    *(_QWORD *)&v62[0] = v47;
    v59 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    v59(v15, (unint64_t)v62, v7);
    swift_unknownObjectRelease();
    v26 = __OFADD__(v22++, 1);
    if (v26)
    {
LABEL_46:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
LABEL_11:
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v23, v15, v7);
    v27 = v60;
    swift_beginAccess();
    v28 = *v27;
    v58 = MEMORY[0x23B8613CC](&unk_23B1D15E8, v7);
    MEMORY[0x23B85EBD0](v61, v23, v28, v7, &type metadata for JobLockPendingFlushStatus);
    v29 = *(_QWORD **)&v61[0];
    if (*(_QWORD *)&v61[0])
    {
      v56 = *((_QWORD *)&v61[0] + 1);
      v57 = v22;
      v63 = *(_QWORD **)&v61[0];
      swift_endAccess();
      v30 = v29[2];
      if (v30)
      {
        v31 = (uint64_t)(v29 + 4);
        swift_bridgeObjectRetain();
        v32 = 0;
        v33 = 9;
        v34 = 1;
        while (1)
        {
          sub_23AA77B28(v31, (uint64_t)v62);
          v35 = (_QWORD *)v6;
          v36 = sub_23ABD1820(v62, (_QWORD *)v6);
          if (v5)
            goto LABEL_60;
          v37 = v36;
          v5 = 0;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
          if ((v37 & 1) != 0)
            break;
          ++v32;
          v31 += 40;
          ++v34;
          v33 += 5;
          v6 = (uint64_t)v35;
          if (v30 == v32)
          {
            swift_bridgeObjectRelease();
            v38 = v29[2];
LABEL_38:
            v8 = v50;
            v7 = v51;
            v23 = v52;
            if (v38 >= v30)
              goto LABEL_39;
            goto LABEL_57;
          }
        }
        swift_bridgeObjectRelease();
        v38 = v32 + 1;
        if (!__OFADD__(v32, 1))
        {
          v39 = v29[2];
          if (v38 == v39)
          {
            v30 = v32;
            v6 = (uint64_t)v35;
            goto LABEL_38;
          }
          v6 = (uint64_t)v35;
          while (v34 < v39)
          {
            sub_23AA77B28((uint64_t)&v29[v33], (uint64_t)v62);
            v40 = sub_23ABD1820(v62, v35);
            v5 = 0;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
            if ((v40 & 1) == 0)
            {
              if (v34 != v32)
              {
                if ((v32 & 0x8000000000000000) != 0)
                  goto LABEL_52;
                v41 = v63;
                v42 = v63[2];
                if (v32 >= v42)
                  goto LABEL_53;
                sub_23AA77B28((uint64_t)&v63[5 * v32 + 4], (uint64_t)v62);
                if (v34 >= v42)
                  goto LABEL_54;
                sub_23AA77B28((uint64_t)&v41[v33], (uint64_t)v61);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  v41 = sub_23B052230(v41);
                  v63 = v41;
                }
                if (v32 >= v41[2])
                  goto LABEL_55;
                v43 = (uint64_t)&v41[5 * v32 + 4];
                __swift_destroy_boxed_opaque_existential_1(v43);
                sub_23ABD76F0(v61, v43);
                if (v34 >= v63[2])
                  goto LABEL_56;
                v44 = (uint64_t)&v63[v33];
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63[v33]);
                sub_23ABD76F0(v62, v44);
              }
              v26 = __OFADD__(v32++, 1);
              if (v26)
                goto LABEL_51;
            }
            v38 = v34 + 1;
            if (__OFADD__(v34, 1))
              goto LABEL_50;
            v29 = v63;
            v39 = v63[2];
            ++v34;
            v33 += 5;
            if (v38 == v39)
            {
              v30 = v32;
              goto LABEL_38;
            }
          }
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
        }
        __break(1u);
        break;
      }
      v38 = 0;
LABEL_39:
      sub_23B0587E0(v30, v38);
      v45 = v63;
      v46 = v56;
      if (v63[2] | v56)
      {
        v59(v55, (unint64_t)v23, v7);
        *(_QWORD *)&v61[0] = v45;
        *((_QWORD *)&v61[0] + 1) = v46;
      }
      else
      {
        swift_bridgeObjectRelease();
        v59(v55, (unint64_t)v23, v7);
        v61[0] = 0uLL;
      }
      swift_beginAccess();
      sub_23B1C629C();
      sub_23B1C62C0();
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v23, v7);
      v20 = v53;
      v15 = v54;
      v22 = v57;
    }
    else
    {
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v23, v7);
    }
    if (v22 == MEMORY[0x23B85F0E0](v20, v7))
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_60:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  swift_bridgeObjectRelease();
  __break(1u);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  __break(1u);
  return result;
}

uint64_t sub_23ABD1820(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  v7 = v6;
  v8 = a2 + 2;
  v10 = a2[5];
  v9 = a2[6];
  __swift_project_boxed_opaque_existential_1(v8, v10);
  if (v5 == (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v10, v9) && v7 == v11)
    v13 = 1;
  else
    v13 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

uint64_t sub_23ABD18EC()
{
  sub_23ABD11D8();
  return swift_deallocClassInstance();
}

void sub_23ABD190C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for JobLockRule(0, a2, a3, a4);
  JUMPOUT(0x23B85F02CLL);
}

void sub_23ABD1940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  sub_23ABD190C(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
}

uint64_t sub_23ABD195C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  type metadata accessor for JobLock.Registration(255, v5, v6, a4);
  sub_23B1C6C98();
  v8 = type metadata accessor for JobLock.BlockedRuleError(255, v5, v6, v7);
  MEMORY[0x23B8613CC](&unk_23B1D1718, v8);
  sub_23B1C74F0();
  sub_23AC45210(v4, (void (*)(void))sub_23ABD768C);
  return v10;
}

uint64_t sub_23ABD1A14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t TupleTypeMetadata2;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  void (*v48)(__int128 *, _QWORD);
  _QWORD *v49;
  _QWORD *v50;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char v59;
  char *v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  void (*v64)(_QWORD *, _QWORD);
  _QWORD *v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t result;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  BOOL v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  _QWORD *v105;
  void (*v106)(_QWORD *, _QWORD);
  _QWORD *v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t (*v124)();
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  _QWORD v147[11];
  __int128 v148;
  __int128 v149;
  __int128 v150;
  char v151;
  __int128 v152;
  uint64_t v153;
  _QWORD v154[4];
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;

  v142 = a4;
  v128 = a5;
  v8 = *(_QWORD *)(*a1 + 80);
  v9 = *(_QWORD *)(*a1 + 88);
  v10 = type metadata accessor for JobLockRule(0, v8, v9, a4);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v138 = (char *)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v137 = (char *)&v125 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v139 = (char *)&v125 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v134 = (char *)&v125 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v133 = (char *)&v125 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v132 = (char *)&v125 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v135 = (char *)&v125 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v144 = (char *)&v125 - v27;
  v125 = v28;
  MEMORY[0x24BDAC7A8](v26);
  v146 = (char *)&v125 - v29;
  v157 = a1 + 2;
  swift_beginAccess();
  v130 = a1;
  v131 = a3;
  v147[6] = v8;
  v147[7] = v9;
  v147[8] = a2;
  v147[9] = a3;
  swift_bridgeObjectRetain();
  v30 = MEMORY[0x23B8613CC](&unk_23B1D15E8, v10);
  v31 = v145;
  *(_QWORD *)&v148 = sub_23B1C626C();
  v126 = v9;
  v127 = v8;
  v147[2] = v8;
  v147[3] = v9;
  v136 = v30;
  v32 = sub_23B1C629C();
  v33 = MEMORY[0x23B8613CC](MEMORY[0x24BEE04E8], v32);
  v145 = v32;
  v34 = v157;
  v36 = sub_23AD7E264((void (*)(char *, char *))sub_23ABD76D4, (uint64_t)v147, v32, v10, MEMORY[0x24BEE4078], v33, MEMORY[0x24BEE40A8], v35);
  v129 = v31;
  swift_bridgeObjectRelease();
  v37 = swift_bridgeObjectRetain();
  v38 = MEMORY[0x23B85F0E0](v37, v10);
  v143 = a2;
  v140 = v36;
  v141 = v11;
  if (v38)
  {
    TupleTypeMetadata2 = 0;
    while (1)
    {
      v41 = sub_23B1C6770();
      sub_23B1C6734();
      if ((v41 & 1) != 0)
      {
        v42 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v11 + 16))(v146, v36+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * TupleTypeMetadata2, v10);
      }
      else
      {
        v42 = sub_23B1C6F38();
        if (v125 != 8)
          goto LABEL_82;
        *(_QWORD *)&v148 = v42;
        (*(void (**)(char *, __int128 *, uint64_t))(v11 + 16))(v146, &v148, v10);
        v42 = swift_unknownObjectRelease();
      }
      v43 = TupleTypeMetadata2 + 1;
      v44 = v144;
      if (__OFADD__(TupleTypeMetadata2, 1))
        break;
      v45 = a2;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v144, v146, v10);
      swift_beginAccess();
      v46 = v44;
      v48 = (void (*)(__int128 *, _QWORD))sub_23B1C62A8();
      if (*v47)
      {
        v49 = v47;
        v42 = sub_23AA8EFC8(v142, (uint64_t)&v148, &qword_2542E16F0);
        if (!*((_QWORD *)&v149 + 1))
          goto LABEL_80;
        v50 = (_QWORD *)v49[1];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v49[1] = v50;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v50 = sub_23AF98728(0, v50[2] + 1, 1, v50);
          v49[1] = v50;
        }
        v53 = v50[2];
        v52 = v50[3];
        if (v53 >= v52 >> 1)
        {
          v50 = sub_23AF98728((_QWORD *)(v52 > 1), v53 + 1, 1, v50);
          v49[1] = v50;
        }
        v50[2] = v53 + 1;
        sub_23ABD76F0(&v148, (uint64_t)&v50[5 * v53 + 4]);
        v48(&v152, 0);
        swift_endAccess();
        v11 = v141;
        (*(void (**)(char *, uint64_t))(v141 + 8))(v144, v10);
        a2 = v143;
      }
      else
      {
        v48(&v152, 0);
        swift_endAccess();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v46, v10);
        a2 = v45;
      }
      v36 = v140;
      v40 = MEMORY[0x23B85F0E0](v140, v10);
      ++TupleTypeMetadata2;
      v34 = v157;
      if (v43 == v40)
        goto LABEL_17;
    }
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
LABEL_17:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v148 = v36;
  TupleTypeMetadata2 = sub_23B1C67DC();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE12E0], TupleTypeMetadata2);
  LODWORD(v144) = sub_23B1C69B0();
  if ((v144 & 1) == 0)
  {
    v42 = sub_23AA8EFC8(v142, (uint64_t)&v148, &qword_2542E16F0);
    v74 = *((_QWORD *)&v149 + 1);
    if (*((_QWORD *)&v149 + 1))
    {
      v75 = v150;
      __swift_project_boxed_opaque_existential_1(&v148, *((uint64_t *)&v149 + 1));
      v76 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 16))(v74, v75);
      v78 = v77;
      v79 = v130;
      v139 = (char *)(v130 + 4);
      swift_beginAccess();
      v80 = v79[4];
      v155 = v76;
      v156 = v78;
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      MEMORY[0x23B85EBD0](v154, &v155, v80, MEMORY[0x24BEE0D00], TupleTypeMetadata2, MEMORY[0x24BEE0D10]);
      swift_bridgeObjectRelease();
      v81 = v154[0];
      swift_endAccess();
      sub_23AAA5C9C(v81);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
      if (!v81)
        goto LABEL_52;
      v83 = v128;
      goto LABEL_76;
    }
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  swift_bridgeObjectRelease();
  v54 = swift_bridgeObjectRetain();
  if (MEMORY[0x23B85F0E0](v54, v10))
  {
    v55 = 0;
    v56 = v137;
    do
    {
      v59 = sub_23B1C6770();
      sub_23B1C6734();
      if ((v59 & 1) != 0)
      {
        TupleTypeMetadata2 = *(_QWORD *)(v11 + 16);
        v42 = ((uint64_t (*)(char *, unint64_t, uint64_t))TupleTypeMetadata2)(v139, a2+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v55, v10);
        v60 = (char *)(v55 + 1);
        if (__OFADD__(v55, 1))
          goto LABEL_78;
      }
      else
      {
        v42 = sub_23B1C6F38();
        if (v125 != 8)
          goto LABEL_83;
        *(_QWORD *)&v148 = v42;
        TupleTypeMetadata2 = *(_QWORD *)(v11 + 16);
        ((void (*)(char *, __int128 *, uint64_t))TupleTypeMetadata2)(v139, &v148, v10);
        v42 = swift_unknownObjectRelease();
        v60 = (char *)(v55 + 1);
        if (__OFADD__(v55, 1))
          goto LABEL_78;
      }
      v146 = v60;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v56, v139, v10);
      swift_beginAccess();
      MEMORY[0x23B85EBD0](&v152, v56, *v34, v10, &type metadata for JobLockRuleAssociatedJobs, v136);
      v61 = v152;
      swift_endAccess();
      v34 = v157;
      sub_23AAA5C9C(v61);
      if (!v61)
      {
        ((void (*)(char *, char *, uint64_t))TupleTypeMetadata2)(v133, v56, v10);
        *(_QWORD *)&v152 = MEMORY[0x24BEE4AF8];
        *((_QWORD *)&v152 + 1) = MEMORY[0x24BEE4AF8];
        swift_beginAccess();
        sub_23B1C62C0();
        swift_endAccess();
      }
      v62 = v138;
      ((void (*)(char *, char *, uint64_t))TupleTypeMetadata2)(v138, v56, v10);
      swift_beginAccess();
      v64 = (void (*)(_QWORD *, _QWORD))sub_23B1C62A8();
      if (*v63)
      {
        TupleTypeMetadata2 = (uint64_t)v63;
        v42 = sub_23AA8EFC8(v142, (uint64_t)&v152, &qword_2542E16F0);
        if (!v153)
          goto LABEL_81;
        sub_23ABD76F0(&v152, (uint64_t)&v148);
        *((_QWORD *)&v150 + 1) = 0;
        v151 = 1;
        v65 = *(_QWORD **)TupleTypeMetadata2;
        v66 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)TupleTypeMetadata2 = v65;
        if ((v66 & 1) == 0)
        {
          v65 = sub_23AF9873C(0, v65[2] + 1, 1, v65);
          *(_QWORD *)TupleTypeMetadata2 = v65;
        }
        v68 = v65[2];
        v67 = v65[3];
        if (v68 >= v67 >> 1)
        {
          v65 = sub_23AF9873C((_QWORD *)(v67 > 1), v68 + 1, 1, v65);
          *(_QWORD *)TupleTypeMetadata2 = v65;
        }
        v65[2] = v68 + 1;
        v69 = &v65[7 * v68];
        v70 = v148;
        v71 = v149;
        v72 = v150;
        *((_BYTE *)v69 + 80) = v151;
        *((_OWORD *)v69 + 3) = v71;
        *((_OWORD *)v69 + 4) = v72;
        *((_OWORD *)v69 + 2) = v70;
        v64(v154, 0);
        swift_endAccess();
        v11 = v141;
        v73 = *(void (**)(char *, uint64_t))(v141 + 8);
        v73(v138, v10);
        v73(v137, v10);
        a2 = v143;
        v34 = v157;
      }
      else
      {
        v64(v154, 0);
        swift_endAccess();
        v57 = *(void (**)(char *, uint64_t))(v11 + 8);
        v57(v62, v10);
        v57(v56, v10);
        a2 = v143;
      }
      v58 = MEMORY[0x23B85F0E0](a2, v10);
      ++v55;
    }
    while (v146 != (char *)v58);
  }
  swift_bridgeObjectRelease();
  TupleTypeMetadata2 = (uint64_t)objc_msgSend((id)v130[5], sel_allObjects);
  v85 = type metadata accessor for JobLockAggregator(0, v127, v126, v84);
  v86 = sub_23B1C6704();

  if (!MEMORY[0x23B85F0E0](v86, v85))
  {
LABEL_71:
    swift_bridgeObjectRelease();
    v42 = sub_23AA8EFC8(v142, (uint64_t)&v148, &qword_2542E16F0);
    if (*((_QWORD *)&v149 + 1))
    {
      type metadata accessor for JobLock.Registration(0, v127, v126, v116);
      swift_bridgeObjectRetain();
      v117 = swift_retain();
      result = sub_23ABD0530(v117, &v148, a2);
      v36 = result;
      goto LABEL_75;
    }
    goto LABEL_87;
  }
  v11 = 4;
  v10 = v129;
  while (1)
  {
    v87 = v11 - 4;
    v88 = sub_23B1C6770();
    sub_23B1C6734();
    if ((v88 & 1) == 0)
      break;
    TupleTypeMetadata2 = *(_QWORD *)(v86 + 8 * v11);
    swift_retain();
    v89 = __OFADD__(v87, 1);
    v90 = v11 - 3;
    if (v89)
      goto LABEL_51;
LABEL_44:
    v91 = (void *)swift_retain();
    v42 = objc_sync_enter(v91);
    if ((_DWORD)v42)
      goto LABEL_89;
    sub_23ABD2D74((uint64_t *)TupleTypeMetadata2);
    if (v10)
    {
      v122 = objc_sync_exit((id)TupleTypeMetadata2);
      MEMORY[0x24BDAC7A8](v122);
      v123 = &v125 - 4;
      *(&v125 - 2) = TupleTypeMetadata2;
      v124 = sub_23ABD7710;
      goto LABEL_92;
    }
    v10 = 0;
    v92 = objc_sync_exit((id)TupleTypeMetadata2);
    if ((_DWORD)v92)
    {
      MEMORY[0x24BDAC7A8](v92);
      v123 = &v125 - 4;
      *(&v125 - 2) = TupleTypeMetadata2;
      v124 = sub_23ABD7830;
LABEL_92:
      sub_23AFF56B8((uint64_t (*)(uint64_t))v124, (uint64_t)v123, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318);
    }
    swift_release_n();
    ++v11;
    if (v90 == MEMORY[0x23B85F0E0](v86, v85))
      goto LABEL_71;
  }
  TupleTypeMetadata2 = sub_23B1C6F38();
  v89 = __OFADD__(v87, 1);
  v90 = v11 - 3;
  if (!v89)
    goto LABEL_44;
LABEL_51:
  __break(1u);
LABEL_52:
  v138 = (char *)TupleTypeMetadata2;
  v93 = swift_bridgeObjectRetain();
  v94 = MEMORY[0x23B85F0E0](v93, v10);
  v95 = v157;
  v96 = v132;
  if (v94)
  {
    v97 = 0;
    do
    {
      v100 = sub_23B1C6770();
      sub_23B1C6734();
      if ((v100 & 1) != 0)
      {
        TupleTypeMetadata2 = *(_QWORD *)(v11 + 16);
        v42 = ((uint64_t (*)(char *, unint64_t, uint64_t))TupleTypeMetadata2)(v135, a2+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v97, v10);
        v101 = (char *)(v97 + 1);
        if (__OFADD__(v97, 1))
          goto LABEL_79;
      }
      else
      {
        v42 = sub_23B1C6F38();
        if (v125 != 8)
          goto LABEL_85;
        *(_QWORD *)&v148 = v42;
        TupleTypeMetadata2 = *(_QWORD *)(v11 + 16);
        ((void (*)(char *, __int128 *, uint64_t))TupleTypeMetadata2)(v135, &v148, v10);
        v42 = swift_unknownObjectRelease();
        v101 = (char *)(v97 + 1);
        if (__OFADD__(v97, 1))
          goto LABEL_79;
      }
      v146 = v101;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v96, v135, v10);
      swift_beginAccess();
      MEMORY[0x23B85EBD0](&v152, v96, *v95, v10, &type metadata for JobLockRuleAssociatedJobs, v136);
      v102 = v152;
      swift_endAccess();
      v95 = v157;
      sub_23AAA5C9C(v102);
      if (!v102)
      {
        ((void (*)(char *, char *, uint64_t))TupleTypeMetadata2)(v133, v96, v10);
        *(_QWORD *)&v152 = MEMORY[0x24BEE4AF8];
        *((_QWORD *)&v152 + 1) = MEMORY[0x24BEE4AF8];
        swift_beginAccess();
        sub_23B1C62C0();
        swift_endAccess();
      }
      v103 = v96;
      v104 = v134;
      ((void (*)(char *, char *, uint64_t))TupleTypeMetadata2)(v134, v103, v10);
      swift_beginAccess();
      v106 = (void (*)(_QWORD *, _QWORD))sub_23B1C62A8();
      if (*v105)
      {
        TupleTypeMetadata2 = (uint64_t)v105;
        v42 = sub_23AA8EFC8(v142, (uint64_t)&v152, &qword_2542E16F0);
        if (!v153)
          goto LABEL_84;
        sub_23ABD76F0(&v152, (uint64_t)&v148);
        *((_QWORD *)&v150 + 1) = v131;
        v151 = 0;
        v107 = *(_QWORD **)TupleTypeMetadata2;
        v108 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)TupleTypeMetadata2 = v107;
        v96 = v132;
        if ((v108 & 1) == 0)
        {
          v107 = sub_23AF9873C(0, v107[2] + 1, 1, v107);
          *(_QWORD *)TupleTypeMetadata2 = v107;
        }
        v110 = v107[2];
        v109 = v107[3];
        if (v110 >= v109 >> 1)
        {
          v107 = sub_23AF9873C((_QWORD *)(v109 > 1), v110 + 1, 1, v107);
          *(_QWORD *)TupleTypeMetadata2 = v107;
        }
        v107[2] = v110 + 1;
        v111 = &v107[7 * v110];
        v112 = v148;
        v113 = v149;
        v114 = v150;
        *((_BYTE *)v111 + 80) = v151;
        *((_OWORD *)v111 + 3) = v113;
        *((_OWORD *)v111 + 4) = v114;
        *((_OWORD *)v111 + 2) = v112;
        v106(v154, 0);
        swift_endAccess();
        v11 = v141;
        v115 = *(void (**)(char *, uint64_t))(v141 + 8);
        v115(v134, v10);
        v115(v96, v10);
        a2 = v143;
        v95 = v157;
      }
      else
      {
        v106(v154, 0);
        swift_endAccess();
        v98 = *(void (**)(char *, uint64_t))(v11 + 8);
        v98(v104, v10);
        v98(v103, v10);
        v96 = v103;
        a2 = v143;
      }
      v99 = MEMORY[0x23B85F0E0](a2, v10);
      ++v97;
    }
    while (v146 != (char *)v99);
  }
  swift_bridgeObjectRelease();
  v42 = sub_23AA8EFC8(v142, (uint64_t)&v148, &qword_2542E16F0);
  v118 = *((_QWORD *)&v149 + 1);
  if (!*((_QWORD *)&v149 + 1))
  {
LABEL_88:
    __break(1u);
LABEL_89:
    MEMORY[0x24BDAC7A8](v42);
    *(&v125 - 2) = TupleTypeMetadata2;
    sub_23AFF56B8((uint64_t (*)(uint64_t))sub_23ABD7708, (uint64_t)(&v125 - 4), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314);
  }
  v119 = v150;
  __swift_project_boxed_opaque_existential_1(&v148, *((uint64_t *)&v149 + 1));
  v120 = (*(uint64_t (**)(uint64_t, uint64_t))(v119 + 16))(v118, v119);
  v36 = v140;
  v154[0] = a2;
  v154[1] = v140;
  v155 = v120;
  v156 = v121;
  swift_beginAccess();
  sub_23B1C629C();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23B1C62C0();
  swift_endAccess();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
LABEL_75:
  v83 = v128;
LABEL_76:
  *(_QWORD *)v83 = v36;
  *(_BYTE *)(v83 + 8) = (v144 & 1) == 0;
  return result;
}

uint64_t sub_23ABD29D0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v26 = a6;
  v27 = a4;
  v25 = a1;
  v9 = type metadata accessor for JobLockRule(255, a5, a6, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v28 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v11 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v24 - v14;
  v17 = *a2;
  v16 = a2[1];
  v18 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v18((char *)&v24 - v14, v25, v9);
  v19 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
  *(_QWORD *)v19 = v17;
  *((_QWORD *)v19 + 1) = v16;
  v33 = a3;
  v20 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  v18(v13, (uint64_t)v15, v9);
  *(_QWORD *)v20 = v17;
  *((_QWORD *)v20 + 1) = v16;
  v29 = a5;
  v30 = v26;
  v31 = v13;
  v32 = v27;
  v21 = sub_23B1C67DC();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE12C8], v21);
  LOBYTE(v16) = sub_23B1C662C();
  v22 = *(void (**)(char *, uint64_t))(v28 + 8);
  v22(v15, TupleTypeMetadata2);
  v22(v13, TupleTypeMetadata2);
  return v16 & 1;
}

uint64_t sub_23ABD2B8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v13[6];
  char v14;
  _BYTE v15[40];
  unint64_t v16;
  char v17;

  v7 = type metadata accessor for JobLockRule(0, a4, a5, a4);
  if ((sub_23ABCD914(a2, v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + *(int *)(swift_getTupleTypeMetadata2() + 48));
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return 0;
  v10 = v8 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_23AA8EFC8(v10, (uint64_t)v15, qword_2542E16F8);
    if ((v17 & 1) != 0)
      break;
    v11 = v16;
    sub_23AA77B28((uint64_t)v15, (uint64_t)v13);
    v13[5] = v11;
    v14 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    sub_23ABD75E8((uint64_t)v15);
    if (v11 > a3)
      goto LABEL_10;
    v10 += 56;
    if (!--v9)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  sub_23ABD75E8((uint64_t)v15);
LABEL_10:
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_23ABD2CB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v7 = type metadata accessor for JobLockRule(255, a2, a3, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = (char *)&v13 - v9;
  v11 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v13 - v9, a1, v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v10, v7);
}

uint64_t sub_23ABD2D74(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  swift_beginAccess();
  v3 = type metadata accessor for JobLockRule(255, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v2);
  swift_bridgeObjectRetain();
  MEMORY[0x23B8613CC](&unk_23B1D15E8, v3);
  sub_23B1C6920();
  v4 = sub_23B1C67DC();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE12C8], v4);
  sub_23B1C6914();
  return swift_endAccess();
}

uint64_t sub_23ABD2E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = type metadata accessor for JobLockRule(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  sub_23B1C7310();
  v9 = *(_QWORD *)(v8 - 8);
  swift_allocObject();
  v10 = sub_23B1C6728();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  v12 = sub_23AD7D55C(v10);
  v14 = sub_23ABD195C(a1, a2, v12, v13);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_23ABD2F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  void (*v24)(char *, unint64_t, uint64_t);
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v41;
  uint64_t result;
  int64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v65;
  _QWORD *v66;
  unint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t i;
  unint64_t v83;
  int64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  int64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t TupleTypeMetadata2;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  _QWORD *v119;
  uint64_t v120;
  char *v121;

  v5 = v4;
  v112 = a1;
  v8 = *(_QWORD *)(*v5 + 80);
  v9 = *(_QWORD *)(*v5 + 88);
  v109 = 0;
  v10 = type metadata accessor for JobLockRule(0, v8, v9, a4);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v102 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v98 - v15;
  v98 = v17;
  MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v98 - v18;
  v121 = (char *)MEMORY[0x24BEE4B08];
  v20 = swift_bridgeObjectRetain();
  v21 = MEMORY[0x23B85F0E0](v20, v10);
  v107 = v5;
  v106 = v10;
  if (!v21)
  {
    swift_bridgeObjectRelease();
    v73 = (char *)MEMORY[0x24BEE4B08];
    goto LABEL_73;
  }
  v22 = 0;
  TupleTypeMetadata2 = (uint64_t)(v5 + 2);
  v101 = a3;
  v100 = v11;
  v103 = v16;
  v99 = v19;
  while (1)
  {
    v23 = sub_23B1C6770();
    sub_23B1C6734();
    if ((v23 & 1) != 0)
    {
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
      v24(v19, a3+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * (_QWORD)v22, v10);
      v25 = __OFADD__(v22++, 1);
      if (v25)
        goto LABEL_70;
    }
    else
    {
      result = sub_23B1C6F38();
      if (v98 != 8)
        goto LABEL_113;
      v115 = result;
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
      v24(v19, (unint64_t)&v115, v10);
      swift_unknownObjectRelease();
      v25 = __OFADD__(v22++, 1);
      if (v25)
      {
LABEL_70:
        __break(1u);
LABEL_71:
        swift_bridgeObjectRelease();
        v73 = v121;
LABEL_73:
        v74 = *((_QWORD *)v73 + 7);
        v104 = v73 + 56;
        v75 = 1 << v73[32];
        v76 = -1;
        if (v75 < 64)
          v76 = ~(-1 << v75);
        v77 = v76 & v74;
        v78 = v5 + 4;
        v105 = (unint64_t)(v75 + 63) >> 6;
        result = swift_bridgeObjectRetain();
        LODWORD(v102) = 0;
        v79 = 0;
        v80 = MEMORY[0x24BEE0D00];
        v81 = MEMORY[0x24BEE0D10];
        v103 = v73;
        if (v77)
          goto LABEL_78;
LABEL_79:
        v25 = __OFADD__(v79++, 1);
        if (v25)
          goto LABEL_104;
        if (v79 < v105)
        {
          v83 = *(_QWORD *)&v104[8 * v79];
          if (v83)
            goto LABEL_89;
          v84 = v79 + 1;
          if (v79 + 1 < v105)
          {
            v83 = *(_QWORD *)&v104[8 * v84];
            if (v83)
              goto LABEL_88;
            v84 = v79 + 2;
            if (v79 + 2 < v105)
            {
              v83 = *(_QWORD *)&v104[8 * v84];
              if (v83)
                goto LABEL_88;
              v84 = v79 + 3;
              if (v79 + 3 < v105)
              {
                v83 = *(_QWORD *)&v104[8 * v84];
                if (!v83)
                {
                  while (1)
                  {
                    v79 = v84 + 1;
                    if (__OFADD__(v84, 1))
                      goto LABEL_112;
                    if (v79 >= v105)
                      goto LABEL_100;
                    v83 = *(_QWORD *)&v104[8 * v79];
                    ++v84;
                    if (v83)
                      goto LABEL_89;
                  }
                }
LABEL_88:
                v79 = v84;
LABEL_89:
                v112 = (v83 - 1) & v83;
                for (i = __clz(__rbit64(v83)) + (v79 << 6); ; i = __clz(__rbit64(v77)) | (v79 << 6))
                {
                  v85 = (_QWORD *)(*((_QWORD *)v73 + 6) + 16 * i);
                  v86 = (_QWORD *)*v85;
                  v87 = v85[1];
                  swift_beginAccess();
                  v88 = *v78;
                  v111 = v86;
                  v119 = v86;
                  v120 = v87;
                  v89 = sub_23B1C67DC();
                  swift_bridgeObjectRetain_n();
                  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
                  MEMORY[0x23B85EBD0](&v113, &v119, v88, v80);
                  swift_bridgeObjectRelease();
                  v90 = v113;
                  if (v113)
                  {
                    v108 = v79;
                    v91 = v81;
                    v92 = v80;
                    v93 = v78;
                    v94 = v114;
                    swift_endAccess();
                    v115 = v94;
                    swift_bridgeObjectRetain();
                    MEMORY[0x23B8613CC](MEMORY[0x24BEE12F0], v89);
                    v95 = v109;
                    v96 = sub_23B1C6F8C();
                    v109 = v95;
                    v115 = v96;
                    MEMORY[0x23B8613CC](MEMORY[0x24BEE12E0], v89);
                    if ((sub_23B1C69B0() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      v113 = 0;
                      v114 = 0;
                      v97 = v111;
                      v119 = v111;
                      v120 = v87;
                      v78 = v93;
                      swift_beginAccess();
                      v80 = v92;
                      v81 = v91;
                      sub_23B1C629C();
                      swift_bridgeObjectRetain();
                      sub_23B1C62C0();
                      swift_endAccess();
                      sub_23ABD2F14(v97, v87, v90);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      result = swift_bridgeObjectRelease();
                      LODWORD(v102) = 1;
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      v113 = v90;
                      v114 = v96;
                      v119 = v111;
                      v120 = v87;
                      v78 = v93;
                      swift_beginAccess();
                      v80 = v92;
                      v81 = v91;
                      sub_23B1C629C();
                      sub_23B1C62C0();
                      result = swift_endAccess();
                    }
                    v73 = v103;
                    v79 = v108;
                    v77 = v112;
                    if (!v112)
                      goto LABEL_79;
                  }
                  else
                  {
                    swift_endAccess();
                    result = swift_bridgeObjectRelease();
                    v77 = v112;
                    if (!v112)
                      goto LABEL_79;
                  }
LABEL_78:
                  v112 = (v77 - 1) & v77;
                }
              }
            }
          }
        }
LABEL_100:
        swift_release();
        swift_bridgeObjectRelease();
        return v102 & 1;
      }
    }
    v105 = (int64_t)v24;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v19, v10);
    v26 = (uint64_t *)TupleTypeMetadata2;
    swift_beginAccess();
    v27 = *v26;
    v108 = MEMORY[0x23B8613CC](&unk_23B1D15E8, v10);
    MEMORY[0x23B85EBD0](&v113, v16, v27, v10, &type metadata for JobLockRuleAssociatedJobs);
    v28 = v113;
    if (v113)
      break;
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
LABEL_4:
    if (v22 == (char *)MEMORY[0x23B85F0E0](a3, v10))
      goto LABEL_71;
  }
  v104 = v22;
  v29 = v114;
  v119 = v113;
  swift_endAccess();
  v30 = v28[2];
  v111 = (_QWORD *)v29;
  if (!v30)
  {
    v43 = 0;
    goto LABEL_23;
  }
  v31 = (uint64_t)(v28 + 4);
  swift_bridgeObjectRetain();
  v32 = 0;
  v33 = 11;
  v34 = 1;
  while (1)
  {
    sub_23AA8EFC8(v31, (uint64_t)&v115, qword_2542E16F8);
    v35 = v116;
    v36 = v117;
    __swift_project_boxed_opaque_existential_1(&v115, v116);
    v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 16))(v35, v36);
    v39 = v112;
    if (v37 == v112 && v38 == a2)
      break;
    v41 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    sub_23ABD75E8((uint64_t)&v115);
    if ((v41 & 1) != 0)
      goto LABEL_19;
    ++v32;
    v31 += 56;
    ++v34;
    v33 += 7;
    if (v30 == v32)
    {
      result = swift_bridgeObjectRelease();
      v43 = v119[2];
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease();
  sub_23ABD75E8((uint64_t)&v115);
LABEL_19:
  result = swift_bridgeObjectRelease();
  v43 = v32 + 1;
  if (__OFADD__(v32, 1))
    goto LABEL_111;
  v44 = v119;
  v45 = v119[2];
  if (v43 == v45)
  {
LABEL_21:
    v30 = v32;
LABEL_22:
    v10 = v106;
    v29 = (uint64_t)v111;
    if (v43 < v30)
      goto LABEL_105;
LABEL_23:
    sub_23B05895C(v30, v43);
    v46 = v119;
    v47 = v119[2];
    if (v47)
    {
      v48 = (uint64_t)(v119 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v5 = v107;
      v16 = v103;
      while (1)
      {
        sub_23AA8EFC8(v48, (uint64_t)&v115, qword_2542E16F8);
        v49 = v118;
        sub_23ABD75E8((uint64_t)&v115);
        if ((v49 & 1) != 0)
          break;
        v48 += 56;
        if (!--v47)
        {
          v29 = (uint64_t)v111;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_28;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v68 = (void (*)(char *, char *, uint64_t))v105;
      if (!v46[2])
        goto LABEL_59;
    }
    else
    {
LABEL_28:
      v50 = *(_QWORD *)(v29 + 16);
      if (v50)
      {
        v113 = (_QWORD *)MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_23AAB5A68(0, v50, 0);
        v51 = v29 + 32;
        v52 = v113;
        do
        {
          sub_23AA77B28(v51, (uint64_t)&v115);
          v53 = v116;
          v54 = v117;
          __swift_project_boxed_opaque_existential_1(&v115, v116);
          v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 16))(v53, v54);
          v57 = v56;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v115);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_23AAB5A68(0, v52[2] + 1, 1);
            v52 = v113;
          }
          v59 = v52[2];
          v58 = v52[3];
          if (v59 >= v58 >> 1)
          {
            sub_23AAB5A68(v58 > 1, v59 + 1, 1);
            v52 = v113;
          }
          v52[2] = v59 + 1;
          v60 = &v52[2 * v59];
          v60[4] = v55;
          v60[5] = v57;
          v51 += 40;
          --v50;
        }
        while (v50);
        swift_bridgeObjectRelease();
        v10 = v106;
      }
      else
      {
        v52 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      v69 = v52[2];
      v68 = (void (*)(char *, char *, uint64_t))v105;
      if (v69)
      {
        v70 = v52 + 5;
        do
        {
          v71 = *(v70 - 1);
          v72 = *v70;
          swift_bridgeObjectRetain();
          sub_23ADE0B10(&v115, v71, v72);
          swift_bridgeObjectRelease();
          v70 += 2;
          --v69;
        }
        while (v69);
      }
      swift_bridgeObjectRelease();
      v5 = v107;
      v16 = v103;
      if (!v46[2])
      {
LABEL_59:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v68(v102, v16, v10);
        v113 = 0;
        v114 = 0;
LABEL_66:
        swift_beginAccess();
        sub_23B1C629C();
        sub_23B1C62C0();
        swift_endAccess();
        v11 = v100;
        (*(void (**)(char *, uint64_t))(v100 + 8))(v16, v10);
        a3 = v101;
        v19 = v99;
        v22 = v104;
        goto LABEL_4;
      }
    }
    v68(v102, v16, v10);
    v113 = v46;
    v114 = (uint64_t)v111;
    goto LABEL_66;
  }
  while (v34 < v45)
  {
    sub_23AA8EFC8((uint64_t)&v44[v33], (uint64_t)&v115, qword_2542E16F8);
    v61 = v116;
    v62 = v117;
    __swift_project_boxed_opaque_existential_1(&v115, v116);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v62 + 16))(v61, v62) == v39 && v63 == a2)
    {
      swift_bridgeObjectRelease();
      result = sub_23ABD75E8((uint64_t)&v115);
    }
    else
    {
      v65 = sub_23B1C7388();
      swift_bridgeObjectRelease();
      result = sub_23ABD75E8((uint64_t)&v115);
      if ((v65 & 1) == 0)
      {
        if (v34 != v32)
        {
          if ((v32 & 0x8000000000000000) != 0)
            goto LABEL_106;
          v66 = v119;
          v67 = v119[2];
          if (v32 >= v67)
            goto LABEL_107;
          result = sub_23AA8EFC8((uint64_t)&v119[7 * v32 + 4], (uint64_t)&v115, qword_2542E16F8);
          if (v34 >= v67)
            goto LABEL_108;
          sub_23AA8EFC8((uint64_t)&v66[v33], (uint64_t)&v113, qword_2542E16F8);
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_23B052244(v66);
            v66 = (_QWORD *)result;
            v119 = (_QWORD *)result;
          }
          if (v32 >= v66[2])
            goto LABEL_109;
          result = sub_23ABD77C0((uint64_t)&v113, (uint64_t)&v66[7 * v32 + 4]);
          if (v34 >= v119[2])
            goto LABEL_110;
          result = sub_23ABD77C0((uint64_t)&v115, (uint64_t)&v119[v33]);
        }
        v25 = __OFADD__(v32++, 1);
        if (v25)
          goto LABEL_103;
      }
    }
    v43 = v34 + 1;
    if (__OFADD__(v34, 1))
      goto LABEL_102;
    v44 = v119;
    v45 = v119[2];
    ++v34;
    v33 += 7;
    if (v43 == v45)
      goto LABEL_21;
  }
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
  return result;
}

uint64_t sub_23ABD3B78(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v14[56];
  uint64_t v15;

  v4 = *a2;
  swift_beginAccess();
  v5 = a2[2];
  v7 = type metadata accessor for JobLockRule(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), v6);
  v8 = MEMORY[0x23B8613CC](&unk_23B1D15E8, v7);
  MEMORY[0x23B85EBD0](&v15, a1, v5, v7, &type metadata for JobLockRuleAssociatedJobs, v8);
  v9 = v15;
  if (!v15)
  {
    swift_endAccess();
    return 0;
  }
  swift_endAccess();
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
  {
LABEL_7:
    sub_23AAA5C9C(v9);
    return 0;
  }
  v11 = v9 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_23AA8EFC8(v11, (uint64_t)v14, qword_2542E16F8);
    v12 = v14[48];
    sub_23ABD75E8((uint64_t)v14);
    if ((v12 & 1) != 0)
      break;
    v11 += 56;
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  sub_23AAA5C9C(v9);
  return 1;
}

uint64_t sub_23ABD3CB8@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;

  v4 = a1[5];
  v5 = a1[6];
  __swift_project_boxed_opaque_existential_1(a1 + 2, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  v9 = sub_23ABD2F14(v6, v7, a1[7], v8);
  result = swift_bridgeObjectRelease();
  *a2 = v9 & 1;
  return result;
}

uint64_t sub_23ABD3D44(uint64_t a1)
{
  return sub_23ABD41AC(a1, (void (*)(void))sub_23ABD7484);
}

uint64_t sub_23ABD3D50(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t TupleTypeMetadata2;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = *(_QWORD *)(*a1 + 80);
  v41 = *(_QWORD *)(*a1 + 88);
  v42 = v6;
  v7 = type metadata accessor for JobLockRule(255, v6, v41, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v43 = (char *)&v40 - v9;
  v10 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v40 - v11;
  swift_beginAccess();
  v13 = a1;
  v14 = a1[3];
  v15 = MEMORY[0x23B8613CC](&unk_23B1D15E8, v7);
  MEMORY[0x23B85EBD0](&v45, a2, v14, v7, &type metadata for JobLockPendingFlushStatus, v15);
  v16 = v45;
  v17 = v46;
  result = swift_endAccess();
  if (v16)
    v19 = v17;
  else
    v19 = 0;
  if (v16)
    v20 = v16;
  else
    v20 = MEMORY[0x24BEE4AF8];
  v21 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v7);
  v45 = v20;
  v46 = v21;
  swift_beginAccess();
  sub_23B1C629C();
  v40 = v20;
  swift_bridgeObjectRetain();
  sub_23B1C62C0();
  swift_endAccess();
  v22 = objc_msgSend((id)v13[5], sel_allObjects);
  v24 = type metadata accessor for JobLockAggregator(0, v42, v41, v23);
  v25 = sub_23B1C6704();

  if (!MEMORY[0x23B85F0E0](v25, v24))
    goto LABEL_17;
  v41 = a2;
  v42 = v7;
  v26 = 4;
  v27 = v43;
  while (1)
  {
    v28 = v26 - 4;
    v29 = sub_23B1C6770();
    sub_23B1C6734();
    if ((v29 & 1) == 0)
      break;
    v30 = *(_QWORD *)(v25 + 8 * v26);
    v31 = swift_retain();
    v32 = __OFADD__(v28, 1);
    v33 = v26 - 3;
    if (v32)
      goto LABEL_16;
LABEL_12:
    MEMORY[0x24BDAC7A8](v31);
    v34 = v41;
    *(&v40 - 2) = v30;
    *(&v40 - 1) = v34;
    v35 = (void *)swift_retain();
    v36 = v10;
    v37 = TupleTypeMetadata2;
    v38 = v47;
    sub_23AC45210(v35, (void (*)(void))sub_23ABD749C);
    v47 = v38;
    swift_release_n();
    v39 = *(int *)(v37 + 48);
    v10 = v36;
    (*(void (**)(char *, uint64_t))(v36 + 8))(&v27[v39], v42);
    ++v26;
    if (v33 == MEMORY[0x23B85F0E0](v25, v24))
      goto LABEL_17;
  }
  v31 = sub_23B1C6F38();
  v30 = v31;
  v32 = __OFADD__(v28, 1);
  v33 = v26 - 3;
  if (!v32)
    goto LABEL_12;
LABEL_16:
  __break(1u);
LABEL_17:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23ABD4084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t result;
  uint64_t v12;

  v6 = type metadata accessor for JobLockRule(0, *(_QWORD *)(*(_QWORD *)a1 + 80), *(_QWORD *)(*(_QWORD *)a1 + 88), a3);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v12 - v8;
  swift_getTupleTypeMetadata2();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  swift_beginAccess();
  MEMORY[0x23B8613CC](&unk_23B1D15E8, v6);
  sub_23B1C6920();
  v10 = sub_23B1C68CC();
  result = swift_endAccess();
  *a4 = v10 & 1;
  return result;
}

uint64_t sub_23ABD41A0(uint64_t a1)
{
  return sub_23ABD41AC(a1, (void (*)(void))sub_23ABD746C);
}

uint64_t sub_23ABD41AC(uint64_t a1, void (*a2)(void))
{
  void *v2;

  return sub_23AC45210(v2, a2);
}

uint64_t sub_23ABD41E0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for JobLockRule(0, *(_QWORD *)(*a1 + 80), *(_QWORD *)(*a1 + 88), a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v17 - v8;
  swift_beginAccess();
  v10 = a1[3];
  v11 = MEMORY[0x23B8613CC](&unk_23B1D15E8, v6);
  MEMORY[0x23B85EBD0](&v18, a2, v10, v6, &type metadata for JobLockPendingFlushStatus, v11);
  v12 = v18;
  if (!v18)
    return swift_endAccess();
  v13 = v19;
  result = swift_endAccess();
  v15 = __OFSUB__(v13, 1);
  v16 = v13 - 1;
  if (!v15)
  {
    if (*(_QWORD *)(v12 + 16) | v16)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
      v18 = v12;
      v19 = v16;
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
      v18 = 0;
      v19 = 0;
    }
    swift_beginAccess();
    sub_23B1C629C();
    sub_23B1C62C0();
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

uint64_t sub_23ABD4368()
{
  void *v0;

  return sub_23AABC838(v0, (void (*)(uint64_t *__return_ptr))sub_23ABD7518) & 1;
}

uint64_t sub_23ABD43A8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *a1;
  swift_beginAccess();
  v5 = type metadata accessor for JobLockRule(255, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v4);
  swift_bridgeObjectRetain();
  MEMORY[0x23B8613CC](&unk_23B1D15E8, v5);
  v6 = sub_23B1C629C();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE04D8], v6);
  LOBYTE(v5) = sub_23B1C662C();
  result = swift_bridgeObjectRelease();
  *a2 = v5 & 1;
  return result;
}

uint64_t sub_23ABD449C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[56];
  uint64_t v33;

  v5 = type metadata accessor for JobLockRule(255, a3, a4, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v31 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v7 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v30 - v10;
  v12 = sub_23ABCD914(a1, v5);
  v33 = TupleTypeMetadata2;
  v13 = *(int *)(TupleTypeMetadata2 + 48);
  v14 = &v11[v13];
  v15 = (uint64_t *)(a1 + v13);
  v30 = *(_QWORD *)(v5 - 8);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v16(v11, a1, v5);
  v17 = *v15;
  v18 = v15[1];
  *(_QWORD *)v14 = *v15;
  *((_QWORD *)v14 + 1) = v18;
  if ((v12 & 1) != 0)
  {
    v19 = v33;
    v20 = &v9[*(int *)(v33 + 48)];
    v16(v9, (uint64_t)v11, v5);
    *(_QWORD *)v20 = v17;
    *((_QWORD *)v20 + 1) = v18;
    v21 = *(_QWORD *)(v17 + 16);
    if (v21)
    {
      v22 = v17 + 32;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      while (1)
      {
        sub_23AA8EFC8(v22, (uint64_t)v32, qword_2542E16F8);
        v23 = v32[48];
        sub_23ABD75E8((uint64_t)v32);
        if ((v23 & 1) != 0)
          break;
        v22 += 56;
        if (!--v21)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v24 = 0;
          goto LABEL_10;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = 1;
LABEL_10:
      v27 = v31;
      v28 = v30;
      v26 = v33;
    }
    else
    {
      v26 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v24 = 0;
      v27 = v31;
      v28 = v30;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v26);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v5);
  }
  else
  {
    v25 = *(void (**)(char *, uint64_t))(v31 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25(v11, v33);
    return 0;
  }
  return v24;
}

uint64_t sub_23ABD46E0()
{
  void *v0;

  return sub_23AC45088(v0, (void (*)(uint64_t *__return_ptr))sub_23ABD7408);
}

uint64_t sub_23ABD4718@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v5 = type metadata accessor for JobLockRule(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v4);
  swift_bridgeObjectRetain();
  MEMORY[0x23B8613CC](&unk_23B1D15E8, v5);
  sub_23B1C6254();
  swift_bridgeObjectRelease();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  result = sub_23B1C64F4();
  *a2 = 0x202092949FF0;
  a2[1] = 0xA600000000000000;
  return result;
}

uint64_t sub_23ABD4850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = type metadata accessor for JobLockRule(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  MEMORY[0x23B8613CC](&unk_23B1D15E8, v5);
  v6 = sub_23B1C6260();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542E1EC8);
  MEMORY[0x23B8613CC](MEMORY[0x24BEE03C0], v6);
  v7 = sub_23B1C7010();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE2B40], v7);
  sub_23ABD7640();
  v8 = sub_23B1C7004();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE2AC8], v8);
  sub_23B1C6F20();
  return sub_23AC45210(v4, (void (*)(void))sub_23ABD7628);
}

uint64_t sub_23ABD4964(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  swift_beginAccess();
  v3 = a1[2];
  v5 = type metadata accessor for JobLockRule(0, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v4);
  MEMORY[0x23B8613CC](&unk_23B1D15E8, v5);
  nullsub_1(v3);
  v6 = sub_23B1C6260();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE03C0], v6);
  sub_23B1C6614();
  v7 = sub_23B1C6F20();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E1EC8);
  MEMORY[0x23B8613CC](MEMORY[0x24BEE25B0], v7);
  sub_23ABD7640();
  sub_23B1C7100();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23ABD4ABC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23ABD4AC8()
{
  void *v0;

  return sub_23AC45210(v0, (void (*)(void))sub_23ABD7420);
}

uint64_t sub_23ABD4B00(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for JobLockRule(255, *(_QWORD *)(*a1 + 80), *(_QWORD *)(*a1 + 88), a4);
  swift_getTupleTypeMetadata2();
  sub_23B1C6758();
  MEMORY[0x23B8613CC](&unk_23B1D15E8, v5);
  v6 = sub_23B1C623C();
  swift_beginAccess();
  a1[2] = v6;
  swift_bridgeObjectRelease();
  sub_23B1C67DC();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  sub_23B1C6758();
  v7 = sub_23B1C623C();
  swift_beginAccess();
  a1[4] = v7;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23ABD4C58()
{
  void *v0;

  return sub_23AC45210(v0, (void (*)(void))sub_23ABD7438);
}

uint64_t sub_23ABD4C98(_QWORD *a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t TupleTypeMetadata2;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v49 = a3;
  v55 = a2;
  v5 = type metadata accessor for JobLockRule(0, *(_QWORD *)(*a1 + 80), *(_QWORD *)(*a1 + 88), a4);
  v61 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v54 = (char *)&v46 - v6;
  v62 = v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = sub_23B1C6C98();
  v56 = *(_QWORD *)(v8 - 8);
  v57 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v58 = (char *)&v46 - v12;
  swift_beginAccess();
  v48 = a1;
  v13 = a1[2];
  v14 = *(_QWORD *)(v13 + 64);
  v50 = v13 + 64;
  v15 = 1 << *(_BYTE *)(v13 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v51 = (unint64_t)(v15 + 63) >> 6;
  v47 = v51 - 1;
  v52 = v13;
  result = swift_bridgeObjectRetain();
  v60 = 0;
  v53 = v11;
  v19 = v61;
  v20 = v62;
  if (!v17)
    goto LABEL_6;
LABEL_4:
  v21 = __clz(__rbit64(v17));
  v22 = (v17 - 1) & v17;
  v23 = TupleTypeMetadata2;
  v24 = v21 | (v60 << 6);
  v25 = v58;
LABEL_5:
  v26 = v52;
  (*(void (**)(char *, unint64_t, uint64_t))(v61 + 16))(v11, *(_QWORD *)(v52 + 48) + *(_QWORD *)(v61 + 72) * v24, v62);
  v27 = *(int *)(v23 + 48);
  v63 = *(_OWORD *)(*(_QWORD *)(v26 + 56) + 16 * v24);
  *(_OWORD *)&v11[v27] = v63;
  v28 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v11, 0, 1, v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  while (1)
  {
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v25, v11, v57);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v23) == 1)
    {
      result = swift_release();
      if ((v49 & 1) != 0)
      {
        v41 = v55;
        v42 = v55[3];
        v43 = v55[4];
        __swift_project_boxed_opaque_existential_1(v55, v42);
        sub_23AEBD130(0x2064656B636F6C62, 0xED00003A73626F6ALL, v42, v43);
        v44 = v41[3];
        v45 = v41[4];
        __swift_project_boxed_opaque_existential_1(v41, v44);
        return sub_23AEBD1D4(8224, 0xE200000000000000, (void (*)(_QWORD *))sub_23ABD7454, (uint64_t)v48, v44, MEMORY[0x24BEE4AE0] + 8, v45);
      }
      return result;
    }
    v33 = &v25[*(int *)(v23 + 48)];
    *(_QWORD *)&v63 = v22;
    v34 = *(_QWORD *)v33;
    v35 = *((_QWORD *)v33 + 1);
    v36 = v54;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v54, v25, v20);
    v37 = v55[3];
    v66 = v55[4];
    __swift_project_boxed_opaque_existential_1(v55, v37);
    v64 = 0;
    v65 = 0xE000000000000000;
    sub_23B1C6EFC();
    MEMORY[0x23B8613CC](&unk_23B1D15C0, v20);
    sub_23B1C7340();
    sub_23B1C64F4();
    swift_bridgeObjectRetain();
    v38 = __swift_instantiateConcreteTypeFromMangledName(qword_2542E16F8);
    MEMORY[0x23B85F02C](v34, v38);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRetain();
    v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E16E0);
    MEMORY[0x23B85F02C](v35, v39);
    sub_23B1C64F4();
    v17 = v63;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23AEBD130(v64, v65, v37, v66);
    swift_bridgeObjectRelease();
    v40 = v36;
    v11 = v53;
    result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v40, v20);
    if (v17)
      goto LABEL_4;
LABEL_6:
    v23 = TupleTypeMetadata2;
    v29 = v60 + 1;
    v25 = v58;
    if (__OFADD__(v60, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v29 < v51)
    {
      v30 = *(_QWORD *)(v50 + 8 * v29);
      if (v30)
        goto LABEL_9;
      v31 = v60 + 2;
      ++v60;
      if (v29 + 1 < v51)
      {
        v30 = *(_QWORD *)(v50 + 8 * v31);
        if (v30)
        {
          ++v29;
LABEL_9:
          v22 = (v30 - 1) & v30;
          v24 = __clz(__rbit64(v30)) + (v29 << 6);
          v60 = v29;
          goto LABEL_5;
        }
        v32 = v29 + 2;
        v60 = v29 + 1;
        if (v29 + 2 < v51)
          break;
      }
    }
LABEL_21:
    v28 = *(_QWORD *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v11, 1, 1, TupleTypeMetadata2);
    v22 = 0;
  }
  v30 = *(_QWORD *)(v50 + 8 * v32);
  if (v30)
  {
    v29 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    v29 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v29 >= v51)
    {
      v60 = v47;
      goto LABEL_21;
    }
    v30 = *(_QWORD *)(v50 + 8 * v29);
    ++v32;
    if (v30)
      goto LABEL_9;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_23ABD51F4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v18 = *a2;
  swift_beginAccess();
  v3 = a2[4];
  v4 = *(_QWORD *)(v3 + 64);
  v17 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v4;
  v16 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v7 &= v7 - 1;
      goto LABEL_5;
    }
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v13 >= v16)
      return swift_release();
    v14 = *(_QWORD *)(v17 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v13 + 1;
      if (v13 + 1 >= v16)
        return swift_release();
      v14 = *(_QWORD *)(v17 + 8 * v9);
      if (!v14)
        break;
    }
LABEL_18:
    v7 = (v14 - 1) & v14;
LABEL_5:
    v10 = a1[3];
    v20 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23B1C6EFC();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    type metadata accessor for JobLockRule(255, *(_QWORD *)(v18 + 80), *(_QWORD *)(v18 + 88), v11);
    v12 = sub_23B1C67DC();
    MEMORY[0x23B8613CC](MEMORY[0x24BEE12F8], v12);
    sub_23B1C7340();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C7340();
    swift_bridgeObjectRelease();
    sub_23AEBD130(0, 0xE000000000000000, v10, v20);
    result = swift_bridgeObjectRelease();
  }
  v15 = v13 + 2;
  if (v15 >= v16)
    return swift_release();
  v14 = *(_QWORD *)(v17 + 8 * v15);
  if (v14)
  {
    v9 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v9 >= v16)
      return swift_release();
    v14 = *(_QWORD *)(v17 + 8 * v9);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_23ABD54AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v6;

  type metadata accessor for JobLockAggregator(0, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  sub_23AC45210(v4, (void (*)(void))sub_23ABD7738);
  return v6;
}

id sub_23ABD5500@<X0>(id *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id result;

  v4 = *((_QWORD *)*a1 + 10);
  v5 = *((_QWORD *)*a1 + 11);
  type metadata accessor for JobLockAggregator(0, v4, v5, a2);
  swift_beginAccess();
  v7 = type metadata accessor for JobLockRule(255, v4, v5, v6);
  MEMORY[0x23B8613CC](&unk_23B1D15E8, v7);
  v8 = sub_23B1C629C();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE04D8], v8);
  sub_23B1C6614();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v4;
  *(_QWORD *)(v9 + 24) = v5;
  v10 = sub_23B1C6F20();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE25B0], v10);
  sub_23B1C70F4();
  swift_release();
  swift_getKeyPath();
  v11 = sub_23B1C7070();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE3008], v11);
  sub_23B1C70E8();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE2FF8], v11);
  v12 = sub_23B1C7010();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE2B40], v12);
  v13 = sub_23B1C6800();
  swift_beginAccess();
  v14 = sub_23B1C6248();
  swift_bridgeObjectRetain();
  MEMORY[0x23B8613CC](MEMORY[0x24BEE0310], v14);
  v15 = sub_23B1C6800();
  v16 = swift_allocObject();
  v18 = sub_23ABD0030(v13, v15, v16, v17);
  result = objc_msgSend(a1[5], sel_addObject_, v18);
  *a3 = v18;
  return result;
}

uint64_t sub_23ABD57F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _BYTE v22[56];

  v5 = type metadata accessor for JobLockRule(255, a2, a3, a4);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = &v22[-v8 - 8];
  v10 = *(int *)(v7 + 48);
  v11 = &v9[v10];
  v12 = (uint64_t *)(a1 + v10);
  v13 = *(_QWORD *)(v5 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v9, a1, v5);
  v14 = *v12;
  v15 = v12[1];
  *v11 = v14;
  v11[1] = v15;
  v16 = *(_QWORD *)(v14 + 16);
  if (v16)
  {
    v17 = v14 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_23AA8EFC8(v17, (uint64_t)v22, qword_2542E16F8);
      v18 = v22[48];
      sub_23ABD75E8((uint64_t)v22);
      if ((v18 & 1) != 0)
        break;
      v17 += 56;
      if (!--v16)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = 1;
  }
  else
  {
LABEL_6:
    v19 = 0;
  }
  (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v9, v5);
  return v19;
}

uint64_t sub_23ABD594C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD v20[2];

  v20[1] = a3;
  v3 = (uint64_t *)(*a2 + *MEMORY[0x24BEE46A8]);
  v4 = *v3;
  v5 = *(_QWORD *)(*v3 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v20 - v10;
  v12 = (uint64_t *)(v9 + *(int *)(v4 + 48));
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *))(v15 + 16))((char *)v20 - v10);
  v16 = *v12;
  v17 = v12[1];
  v18 = &v8[*(int *)(v4 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v8, v11, v14);
  *(_QWORD *)v18 = v16;
  *((_QWORD *)v18 + 1) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_23ABD5A6C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_23ABD5AA0()
{
  sub_23ABD5A6C();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for JobLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JobLock);
}

uint64_t sub_23ABD5ACC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for JobLock.Registration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JobLock.Registration);
}

_QWORD *initializeBufferWithCopyOfBuffer for JobLockPendingFlushStatus(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for JobLockPendingFlushStatus()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for JobLockPendingFlushStatus(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for JobLockPendingFlushStatus(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for JobLockPendingFlushStatus()
{
  return &type metadata for JobLockPendingFlushStatus;
}

_QWORD *assignWithCopy for JobLockRuleAssociatedJobs(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for JobLockRuleAssociatedJobs(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for JobLockRuleAssociatedJobs()
{
  return &type metadata for JobLockRuleAssociatedJobs;
}

uint64_t sub_23ABD5CC4()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v6;
  char v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = AssociatedTypeWitness;
  if (v2 <= 0x3F)
  {
    v3 = *(_QWORD *)(AssociatedTypeWitness - 8) + 64;
    v8 = v3;
    swift_getTupleTypeLayout3();
    v9 = &v7;
    v1 = sub_23B1C6C98();
    if (v4 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v10 = &v6;
      v11 = v3;
      v12 = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v1;
}

uint64_t *sub_23ABD5DA0(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v21;
  void (*v22)(uint64_t *, uint64_t *, uint64_t);
  void *v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = ~(unint64_t)v7;
  v9 = v6 + v7;
  v10 = v9 & v8;
  if (*(_DWORD *)(v5 + 84))
    v11 = *(_QWORD *)(v5 + 64);
  else
    v11 = v6 + 1;
  if (v6 <= ((v6 + v7 + v10) & ~(unint64_t)v7) + v6)
    v6 += (v6 + v7 + v10) & ~(unint64_t)v7;
  if (v6 <= v10 + v11)
    v12 = v10 + v11;
  else
    v12 = v6;
  v13 = v12 + 1;
  if (v7 > 7u || (v7 & 0x100000) != 0 || v13 > 0x18)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v7 + 16) & v8));
    swift_retain();
  }
  else
  {
    v18 = AssociatedTypeWitness;
    if (*((unsigned __int8 *)a2 + v12) >= 5u)
    {
      if (v12 <= 3)
        v19 = v12;
      else
        v19 = 4;
      __asm { BR              X12 }
    }
    switch(*((_BYTE *)a2 + v12))
    {
      case 0:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((_BYTE *)a1 + v12) = 0;
        break;
      case 1:
        v20 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
        v20(a1, a2, AssociatedTypeWitness);
        v21 = ((unint64_t)a2 + v9) & v8;
        v20((uint64_t *)(((unint64_t)a1 + v9) & v8), (uint64_t *)v21, v18);
        v20((uint64_t *)((v9 + (((unint64_t)a1 + v9) & v8)) & v8), (uint64_t *)((v9 + v21) & v8), v18);
        *((_BYTE *)a1 + v12) = 1;
        break;
      case 2:
        v22 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
        v22(a1, a2, AssociatedTypeWitness);
        v23 = (void *)(((unint64_t)a2 + v9) & v8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v23, 1, v18))
        {
          memcpy((void *)(((unint64_t)a1 + v9) & v8), v23, v11);
        }
        else
        {
          v22((uint64_t *)(((unint64_t)a1 + v9) & v8), (uint64_t *)v23, v18);
          (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(((unint64_t)a1 + v9) & v8, 0, 1, v18);
        }
        *((_BYTE *)a1 + v12) = 2;
        break;
      case 3:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((_BYTE *)a1 + v12) = 3;
        break;
      case 4:
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((_BYTE *)a1 + v12) = 4;
        break;
      default:
        memcpy(a1, a2, v13);
        break;
    }
  }
  return a1;
}

uint64_t sub_23ABD6054(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t);

  result = swift_getAssociatedTypeWitness();
  v3 = result;
  v4 = *(_QWORD *)(result - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  v8 = (v5 + v6) & ~v6;
  v9 = ((v5 + v6 + v8) & ~v6) + v5;
  v10 = v8 + v5;
  if (!*(_DWORD *)(v4 + 84))
    ++v10;
  if (v5 <= v9)
    v5 = v9;
  if (v5 <= v10)
    v5 = v10;
  if (*(unsigned __int8 *)(a1 + v5) >= 5u)
  {
    if (v5 <= 3)
      v11 = v5;
    else
      v11 = 4;
    __asm { BR              X14 }
  }
  v12 = ~v6;
  switch(*(_BYTE *)(a1 + v5))
  {
    case 0:
    case 3:
    case 4:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, result);
      break;
    case 1:
      v15 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v15(a1, result);
      v13 = (v7 + a1) & v12;
      v15(v13, v3);
      result = ((uint64_t (*)(uint64_t, uint64_t))v15)((v7 + v13) & v12, v3);
      break;
    case 2:
      v16 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
      v16(a1, result);
      v14 = (v7 + a1) & v12;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v14, 1, v3);
      if (!(_DWORD)result)
        result = ((uint64_t (*)(uint64_t, uint64_t))v16)(v14, v3);
      break;
    default:
      return result;
  }
  return result;
}

_BYTE *sub_23ABD6228(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_BYTE *, unsigned __int8 *, uint64_t);
  unint64_t v17;
  char v18;
  void (*v19)(_BYTE *, unsigned __int8 *, uint64_t);
  void *v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = v6 + v7;
  v9 = (v6 + v7) & ~v7;
  v10 = ((v6 + v7 + v9) & ~v7) + v6;
  if (*(_DWORD *)(v5 + 84))
    v11 = *(_QWORD *)(v5 + 64);
  else
    v11 = v6 + 1;
  v12 = v9 + v11;
  if (v6 <= v10)
    v6 = v10;
  if (v6 <= v12)
    v13 = v12;
  else
    v13 = v6;
  if (a2[v13] >= 5u)
  {
    if (v13 <= 3)
      v14 = v13;
    else
      v14 = 4;
    __asm { BR              X13 }
  }
  v15 = ~v7;
  switch(a2[v13])
  {
    case 0u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      a1[v13] = 0;
      return a1;
    case 1u:
      v16 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 16);
      v16(a1, a2, AssociatedTypeWitness);
      v17 = (unint64_t)&a2[v8] & v15;
      v16((_BYTE *)((unint64_t)&a1[v8] & v15), (unsigned __int8 *)v17, AssociatedTypeWitness);
      v16((_BYTE *)((v8 + ((unint64_t)&a1[v8] & v15)) & v15), (unsigned __int8 *)((v8 + v17) & v15), AssociatedTypeWitness);
      v18 = 1;
      goto LABEL_24;
    case 2u:
      v19 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 16);
      v19(a1, a2, AssociatedTypeWitness);
      v20 = (void *)((unint64_t)&a2[v8] & v15);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v20, 1, AssociatedTypeWitness))
      {
        memcpy((void *)((unint64_t)&a1[v8] & v15), v20, v11);
      }
      else
      {
        v19((_BYTE *)((unint64_t)&a1[v8] & v15), (unsigned __int8 *)v20, AssociatedTypeWitness);
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))((unint64_t)&a1[v8] & v15, 0, 1, AssociatedTypeWitness);
      }
      v18 = 2;
      goto LABEL_24;
    case 3u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      v18 = 3;
      goto LABEL_24;
    case 4u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      v18 = 4;
LABEL_24:
      a1[v13] = v18;
      break;
    default:
      memcpy(a1, a2, v13 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_23ABD64A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(unsigned __int8 *, uint64_t);
  void (*v17)(unsigned __int8 *, uint64_t);
  uint64_t v18;
  void (*v19)(unsigned __int8 *, unsigned __int8 *, uint64_t);
  unint64_t v20;
  char v21;
  void (*v22)(unsigned __int8 *, unsigned __int8 *, uint64_t);
  void *v23;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = *(unsigned __int8 *)(v5 + 80);
    v8 = v6 + v7;
    v9 = (v6 + v7) & ~v7;
    v10 = ((v6 + v7 + v9) & ~v7) + v6;
    if (*(_DWORD *)(v5 + 84))
      v11 = *(_QWORD *)(v5 + 64);
    else
      v11 = v6 + 1;
    v12 = v9 + v11;
    if (v6 <= v10)
      v6 = v10;
    if (v6 <= v12)
      v13 = v12;
    else
      v13 = v6;
    if (a1[v13] >= 5u)
    {
      if (v13 <= 3)
        v14 = v13;
      else
        v14 = 4;
      __asm { BR              X13 }
    }
    v15 = ~v7;
    switch(a1[v13])
    {
      case 0u:
      case 3u:
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        break;
      case 1u:
        v16 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v16(a1, AssociatedTypeWitness);
        v16((unsigned __int8 *)((unint64_t)&a1[v8] & v15), AssociatedTypeWitness);
        v16((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v15)) & v15), AssociatedTypeWitness);
        break;
      case 2u:
        v17 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v17(a1, AssociatedTypeWitness);
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((unint64_t)&a1[v8] & v15, 1, AssociatedTypeWitness))v17((unsigned __int8 *)((unint64_t)&a1[v8] & v15), AssociatedTypeWitness);
        break;
      default:
        break;
    }
    if (a2[v13] >= 5u)
    {
      if (v13 <= 3)
        v18 = v13;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v13])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        a1[v13] = 0;
        return a1;
      case 1u:
        v19 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16);
        v19(a1, a2, AssociatedTypeWitness);
        v20 = (unint64_t)&a2[v8] & v15;
        v19((unsigned __int8 *)((unint64_t)&a1[v8] & v15), (unsigned __int8 *)v20, AssociatedTypeWitness);
        v19((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v15)) & v15), (unsigned __int8 *)((v8 + v20) & v15), AssociatedTypeWitness);
        v21 = 1;
        goto LABEL_35;
      case 2u:
        v22 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16);
        v22(a1, a2, AssociatedTypeWitness);
        v23 = (void *)((unint64_t)&a2[v8] & v15);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v23, 1, AssociatedTypeWitness))
        {
          memcpy((void *)((unint64_t)&a1[v8] & v15), v23, v11);
        }
        else
        {
          v22((unsigned __int8 *)((unint64_t)&a1[v8] & v15), (unsigned __int8 *)v23, AssociatedTypeWitness);
          (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))((unint64_t)&a1[v8] & v15, 0, 1, AssociatedTypeWitness);
        }
        v21 = 2;
        goto LABEL_35;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        v21 = 3;
        goto LABEL_35;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        v21 = 4;
LABEL_35:
        a1[v13] = v21;
        break;
      default:
        memcpy(a1, a2, v13 + 1);
        break;
    }
  }
  return a1;
}

_BYTE *sub_23ABD6834(_BYTE *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_BYTE *, unsigned __int8 *, uint64_t);
  unint64_t v17;
  char v18;
  void (*v19)(_BYTE *, unsigned __int8 *, uint64_t);
  void *v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = v6 + v7;
  v9 = (v6 + v7) & ~v7;
  v10 = ((v6 + v7 + v9) & ~v7) + v6;
  if (*(_DWORD *)(v5 + 84))
    v11 = *(_QWORD *)(v5 + 64);
  else
    v11 = v6 + 1;
  v12 = v9 + v11;
  if (v6 <= v10)
    v6 = v10;
  if (v6 <= v12)
    v13 = v12;
  else
    v13 = v6;
  if (a2[v13] >= 5u)
  {
    if (v13 <= 3)
      v14 = v13;
    else
      v14 = 4;
    __asm { BR              X13 }
  }
  v15 = ~v7;
  switch(a2[v13])
  {
    case 0u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      a1[v13] = 0;
      return a1;
    case 1u:
      v16 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 32);
      v16(a1, a2, AssociatedTypeWitness);
      v17 = (unint64_t)&a2[v8] & v15;
      v16((_BYTE *)((unint64_t)&a1[v8] & v15), (unsigned __int8 *)v17, AssociatedTypeWitness);
      v16((_BYTE *)((v8 + ((unint64_t)&a1[v8] & v15)) & v15), (unsigned __int8 *)((v8 + v17) & v15), AssociatedTypeWitness);
      v18 = 1;
      goto LABEL_24;
    case 2u:
      v19 = *(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 32);
      v19(a1, a2, AssociatedTypeWitness);
      v20 = (void *)((unint64_t)&a2[v8] & v15);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v20, 1, AssociatedTypeWitness))
      {
        memcpy((void *)((unint64_t)&a1[v8] & v15), v20, v11);
      }
      else
      {
        v19((_BYTE *)((unint64_t)&a1[v8] & v15), (unsigned __int8 *)v20, AssociatedTypeWitness);
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))((unint64_t)&a1[v8] & v15, 0, 1, AssociatedTypeWitness);
      }
      v18 = 2;
      goto LABEL_24;
    case 3u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      v18 = 3;
      goto LABEL_24;
    case 4u:
      (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      v18 = 4;
LABEL_24:
      a1[v13] = v18;
      break;
    default:
      memcpy(a1, a2, v13 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_23ABD6AAC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(unsigned __int8 *, uint64_t);
  void (*v17)(unsigned __int8 *, uint64_t);
  uint64_t v18;
  void (*v19)(unsigned __int8 *, unsigned __int8 *, uint64_t);
  unint64_t v20;
  char v21;
  void (*v22)(unsigned __int8 *, unsigned __int8 *, uint64_t);
  void *v23;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = *(unsigned __int8 *)(v5 + 80);
    v8 = v6 + v7;
    v9 = (v6 + v7) & ~v7;
    v10 = ((v6 + v7 + v9) & ~v7) + v6;
    if (*(_DWORD *)(v5 + 84))
      v11 = *(_QWORD *)(v5 + 64);
    else
      v11 = v6 + 1;
    v12 = v9 + v11;
    if (v6 <= v10)
      v6 = v10;
    if (v6 <= v12)
      v13 = v12;
    else
      v13 = v6;
    if (a1[v13] >= 5u)
    {
      if (v13 <= 3)
        v14 = v13;
      else
        v14 = 4;
      __asm { BR              X13 }
    }
    v15 = ~v7;
    switch(a1[v13])
    {
      case 0u:
      case 3u:
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        break;
      case 1u:
        v16 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v16(a1, AssociatedTypeWitness);
        v16((unsigned __int8 *)((unint64_t)&a1[v8] & v15), AssociatedTypeWitness);
        v16((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v15)) & v15), AssociatedTypeWitness);
        break;
      case 2u:
        v17 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v17(a1, AssociatedTypeWitness);
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((unint64_t)&a1[v8] & v15, 1, AssociatedTypeWitness))v17((unsigned __int8 *)((unint64_t)&a1[v8] & v15), AssociatedTypeWitness);
        break;
      default:
        break;
    }
    if (a2[v13] >= 5u)
    {
      if (v13 <= 3)
        v18 = v13;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    switch(a2[v13])
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        a1[v13] = 0;
        return a1;
      case 1u:
        v19 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32);
        v19(a1, a2, AssociatedTypeWitness);
        v20 = (unint64_t)&a2[v8] & v15;
        v19((unsigned __int8 *)((unint64_t)&a1[v8] & v15), (unsigned __int8 *)v20, AssociatedTypeWitness);
        v19((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v15)) & v15), (unsigned __int8 *)((v8 + v20) & v15), AssociatedTypeWitness);
        v21 = 1;
        goto LABEL_35;
      case 2u:
        v22 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32);
        v22(a1, a2, AssociatedTypeWitness);
        v23 = (void *)((unint64_t)&a2[v8] & v15);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v23, 1, AssociatedTypeWitness))
        {
          memcpy((void *)((unint64_t)&a1[v8] & v15), v23, v11);
        }
        else
        {
          v22((unsigned __int8 *)((unint64_t)&a1[v8] & v15), (unsigned __int8 *)v23, AssociatedTypeWitness);
          (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))((unint64_t)&a1[v8] & v15, 0, 1, AssociatedTypeWitness);
        }
        v21 = 2;
        goto LABEL_35;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        v21 = 3;
        goto LABEL_35;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        v21 = 4;
LABEL_35:
        a1[v13] = v21;
        break;
      default:
        memcpy(a1, a2, v13 + 1);
        break;
    }
  }
  return a1;
}

uint64_t sub_23ABD6E40(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v5 + v6) & ~v6;
  v8 = ((v5 + v6 + v7) & ~v6) + v5;
  if (v8 <= v5)
    v8 = *(_QWORD *)(v4 + 64);
  v9 = *(_DWORD *)(v4 + 84) == 0;
  v10 = v7 + v5;
  if (v9)
    ++v10;
  if (v10 <= v8)
    v10 = v8;
  if (v5 <= v10)
    v5 = v10;
  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_27;
  v11 = v5 + 1;
  v12 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    v15 = ((a2 + ~(-1 << v12) - 250) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_27:
      v17 = *(unsigned __int8 *)(a1 + v5);
      if (v17 >= 6)
        return (v17 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_27;
LABEL_20:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X11 }
  }
  return (v16 + 251);
}

void sub_23ABD6FB8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v7 + v8) & ~v8;
  v10 = ((v7 + v8 + v9) & ~v8) + v7;
  if (v10 <= v7)
    v10 = *(_QWORD *)(v6 + 64);
  v11 = *(_DWORD *)(v6 + 84) == 0;
  v12 = v9 + v7;
  if (v11)
    ++v12;
  if (v12 <= v10)
    v12 = v10;
  if (v7 > v12)
    v12 = v7;
  v13 = v12 + 1;
  if (a3 < 0xFB)
  {
    v14 = 0;
  }
  else if (v13 <= 3)
  {
    v16 = ((a3 + ~(-1 << (8 * v13)) - 250) >> (8 * v13)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (a2 <= 0xFA)
    __asm { BR              X11 }
  v15 = a2 - 251;
  if (v13 < 4)
  {
    if ((_DWORD)v12 != -1)
    {
      v17 = v15 & ~(-1 << (8 * v13));
      bzero(a1, v13);
      if ((_DWORD)v13 == 3)
      {
        *(_WORD *)a1 = v17;
        a1[2] = BYTE2(v17);
      }
      else if ((_DWORD)v13 == 2)
      {
        *(_WORD *)a1 = v17;
      }
      else
      {
        *a1 = v17;
      }
    }
  }
  else
  {
    bzero(a1, v12 + 1);
    *(_DWORD *)a1 = v15;
  }
  __asm { BR              X10 }
}

uint64_t sub_23ABD71B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v3 + v4) & ~v4;
  v6 = ((v3 + v4 + v5) & ~v4) + v3;
  v7 = *(_DWORD *)(v2 + 84) == 0;
  v8 = v5 + v3;
  if (v7)
    ++v8;
  if (v3 <= v6)
    v3 = v6;
  if (v3 > v8)
    v8 = v3;
  result = *(unsigned __int8 *)(a1 + v8);
  if (result >= 5)
  {
    if (v8 <= 3)
      v10 = v8;
    else
      v10 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_23ABD72A0(_BYTE *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  BOOL v10;
  size_t v11;
  size_t v12;
  char v13;
  int v14;

  result = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(result - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v6 + v7) & ~v7;
  v9 = ((v6 + v7 + v8) & ~v7) + v6;
  if (v9 <= v6)
    v9 = *(_QWORD *)(v5 + 64);
  v10 = *(_DWORD *)(v5 + 84) == 0;
  v11 = v8 + v6;
  if (v10)
    ++v11;
  if (v11 <= v9)
    v11 = v9;
  if (v6 <= v11)
    v12 = v11;
  else
    v12 = v6;
  if (a2 > 4)
  {
    if (v12 <= 3)
      v13 = ((a2 - 5) >> (8 * v12)) + 5;
    else
      v13 = 5;
    a1[v12] = v13;
    if (v12 >= 4)
      v14 = 4;
    else
      v14 = v12;
    bzero(a1, v12);
    __asm { BR              X10 }
  }
  a1[v12] = a2;
  return result;
}

void sub_23ABD73C0()
{
  JUMPOUT(0x23B8613CCLL);
}

uint64_t sub_23ABD73D0()
{
  return sub_23ABD46E0();
}

uint64_t sub_23ABD73F0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_23ABD02CC(v1, a1);
}

uint64_t sub_23ABD7408@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_23ABD4718(v1, a1);
}

uint64_t sub_23ABD7420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  return sub_23ABD4B00(v4, a2, a3, a4);
}

uint64_t sub_23ABD7438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23ABD4C98(*(_QWORD **)(v4 + 16), *(_QWORD **)(v4 + 24), *(unsigned __int8 *)(v4 + 32), a4);
}

uint64_t sub_23ABD7454(_QWORD *a1)
{
  uint64_t *v1;

  return sub_23ABD51F4(a1, v1);
}

uint64_t sub_23ABD746C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23ABD41E0(*(_QWORD **)(v4 + 16), *(_QWORD *)(v4 + 24), a3, a4);
}

uint64_t sub_23ABD7484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23ABD3D50(*(_QWORD **)(v4 + 16), *(_QWORD *)(v4 + 24), a3, a4);
}

uint64_t sub_23ABD749C@<X0>(uint64_t a1@<X3>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_23ABD4084(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t sub_23ABD74B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23ABD74CC(a1, a2, a3, a4) & 1;
}

uint64_t sub_23ABD74CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  v6 = type metadata accessor for JobLockRule(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return sub_23ABCD914(a1, v6) & 1;
}

uint64_t sub_23ABD7518@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_23ABD43A8(*(uint64_t **)(v1 + 16), a1);
}

uint64_t sub_23ABD7530(uint64_t a1)
{
  uint64_t *v1;

  return sub_23ABD449C(a1, v1[4], v1[2], v1[3]) & 1;
}

uint64_t sub_23ABD7550(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BYTE v5[56];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = a1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_23AA8EFC8(v2, (uint64_t)v5, qword_2542E16F8);
    v3 = v5[48];
    sub_23ABD75E8((uint64_t)v5);
    if (v3 == 1)
      break;
    v2 += 56;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_23ABD75E8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_2542E16F8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23ABD7628()
{
  uint64_t *v0;

  return sub_23ABD4964(v0);
}

unint64_t sub_23ABD7640()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2542E1ED0;
  if (!qword_2542E1ED0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542E1EC8);
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_2542E1ED0);
  }
  return result;
}

uint64_t sub_23ABD768C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23ABD1A14(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t type metadata accessor for JobLock.BlockedRuleError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for JobLock.BlockedRuleError);
}

uint64_t sub_23ABD76B4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  return sub_23ABD29D0(a1, a2, v2[4], v2[5], v2[2], v2[3]) & 1;
}

uint64_t sub_23ABD76D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_23ABD2CB8(a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2, a3);
}

uint64_t sub_23ABD76F0(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_23ABD7708()
{
  return sub_23B0E93C4();
}

uint64_t sub_23ABD7710()
{
  return sub_23B0E99D8();
}

uint64_t sub_23ABD7718(uint64_t a1)
{
  uint64_t v1;

  return sub_23ABD2B8C(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

id sub_23ABD7738@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  id *v2;

  return sub_23ABD5500(v2, a1, a2);
}

uint64_t sub_23ABD7750()
{
  return swift_deallocObject();
}

uint64_t sub_23ABD7760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23ABD57F8(a1, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t sub_23ABD7768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;

  return sub_23ABD594C(a1, v2, a2);
}

uint64_t sub_23ABD7770@<X0>(uint64_t a1@<X3>, char *a2@<X8>)
{
  uint64_t v2;

  return sub_23ABD0630(*(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), a1, a2);
}

uint64_t sub_23ABD778C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_23ABD3CB8(*(_QWORD **)(v1 + 24), a1);
}

uint64_t sub_23ABD77A4(uint64_t a1)
{
  uint64_t *v1;

  return sub_23ABD3B78(a1, v1) & 1;
}

uint64_t sub_23ABD77C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_2542E16F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23ABD7808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23ABD1234(v4, a2, a3, a4);
}

void sub_23ABD7820()
{
  JUMPOUT(0x23B8613CCLL);
}

uint64_t sub_23ABD783C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23ABD787C(uint64_t a1)
{
  swift_allocObject();
  return sub_23ABD78B4(a1);
}

uint64_t sub_23ABD78B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(v1 + 40) = a1;
  v3 = sub_23AF1E364(a1);
  v5 = v4;
  v6 = sub_23AF1E398(a1) != 9;
  return sub_23B0F0A3C(v3, v5, v6);
}

void sub_23ABD7940()
{
  type metadata accessor for SchedulableJob();
}

uint64_t sub_23ABD7978()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = sub_23AF1E7FC(*(_QWORD *)(v0 + 40));
  swift_allocObject();
  v2 = sub_23ABD78B4(v1);
  swift_retain();
  return v2;
}

uint64_t sub_23ABD79DC()
{
  uint64_t v0;

  return sub_23AEBF594(*(_QWORD *)(v0 + 40));
}

uint64_t sub_23ABD7A04()
{
  return swift_release();
}

uint64_t sub_23ABD7A10()
{
  uint64_t v0;

  v0 = sub_23ABD8C28();
  swift_release();
  return v0;
}

uint64_t sub_23ABD7A40()
{
  sub_23ABD8C28();
  swift_release();
  return swift_deallocClassInstance();
}

void type metadata accessor for SchedulableJob()
{
  JUMPOUT(0x23B861318);
}

uint64_t sub_23ABD7A84()
{
  return swift_initClassMetadata2();
}

void sub_23ABD7AB8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD7B18()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD7B78()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD7BD8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD7C38()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD7C98()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD7CF8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD7D58()
{
  sub_23B1C704C();
  __break(1u);
}

uint64_t sub_23ABD7DB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
  if (!v1)
  {
    if (v2)
    {
      swift_release();
      v3 = 1;
    }
    else
    {
      v3 = 0;
    }
  }
  return v3 & 1;
}

uint64_t sub_23ABD7E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
  if (!v1)
  {
    if (v2)
    {
      swift_release();
      v3 = 1;
    }
    else
    {
      v3 = 0;
    }
  }
  return v3 & 1;
}

void sub_23ABD7E48()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD7EA8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD7F08()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD7F68()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD7FC8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8028()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8088()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD80E8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8148()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD81A8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8208()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8268()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD82C8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8328()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8388()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD83E8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8448()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD84A8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8508()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8568()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD85C8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8628()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8688()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD86E8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8748()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD87A8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8808()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8868()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD88C8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8928()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8988()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD89E8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8A48()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8AA8()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8B08()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8B68()
{
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABD8BC8()
{
  sub_23B1C704C();
  __break(1u);
}

uint64_t sub_23ABD8C28()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23ABD8C30()
{
  return swift_deallocClassInstance();
}

void type metadata accessor for JobRegistry()
{
  JUMPOUT(0x23B861318);
}

uint64_t sub_23ABD8C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
  if (!v1 && result < 0)
  {
    swift_release();
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

void sub_23ABD8CCC(uint64_t a1, int a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  _QWORD v8[16];
  int v9;

  v8[10] = a1;
  v9 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[7] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8[6] = (char *)v8 - v3;
  v4 = swift_getAssociatedTypeWitness();
  v8[5] = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8[4] = (char *)v8 - v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v7 = swift_getAssociatedConformanceWitness();
  v8[12] = v4;
  v8[13] = AssociatedTypeWitness;
  v8[14] = AssociatedConformanceWitness;
  v8[15] = v7;
  type metadata accessor for ReconciliationID();
}

void sub_23ABD8E04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_23B1C6C98();
  MEMORY[0x24BDAC7A8](v5);
  *(_QWORD *)(v4 - 112) = v0;
  *(_QWORD *)(v4 - 104) = v2;
  *(_QWORD *)(v4 - 96) = v3;
  *(_QWORD *)(v4 - 88) = v1;
  *(_QWORD *)(v4 - 144) = v1;
  type metadata accessor for ItemJob();
}

void sub_23ABD8E54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (swift_dynamicCastClass())
    sub_23B06BF34();
  *(_QWORD *)(v6 - 192) = v5;
  *(_QWORD *)(v6 - 184) = v1;
  *(_QWORD *)(v6 - 200) = v3;
  *(_QWORD *)(v6 - 112) = v2;
  *(_QWORD *)(v6 - 104) = v0;
  *(_QWORD *)(v6 - 96) = *(_QWORD *)(v6 - 144);
  *(_QWORD *)(v6 - 88) = v4;
  type metadata accessor for Propagation.PropagationJob();
}

void sub_23ABD8EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (swift_dynamicCastClass())
    sub_23B06BF34();
  v3 = *(_QWORD *)(v2 - 184);
  (*(void (**)(void))(*(_QWORD *)v0 + 408))();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(v3, 1, v1) != 1)
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 152) + 32))(*(_QWORD *)(v2 - 160), v3, *(_QWORD *)(v2 - 192));
      sub_23B06BF34();
    }
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 - 168) + 32))(*(_QWORD *)(v2 - 176), v3, *(_QWORD *)(v2 - 200));
    sub_23B06BF34();
  }
  JUMPOUT(0x23ABD8F58);
}

void sub_23ABD8F00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v5;
  uint64_t v6;
  void (*v7)(uint64_t, char *, uint64_t, _QWORD);

  v5 = (char *)v1 + *(_QWORD *)(*v1 + 536);
  v6 = v1[14];
  v7 = *(void (**)(uint64_t, char *, uint64_t, _QWORD))(*(_QWORD *)v2 + 336);
  swift_retain();
  v7(a1, v5, v6, *(_DWORD *)(v3 - 68) & 1);
  JUMPOUT(0x23ABD8F50);
}

void sub_23ABD9004(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v1 + 336))(a1, v5, *(_QWORD *)(v6 + 112), v3 & 1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v2);
  JUMPOUT(0x23ABD8F58);
}

void sub_23ABD9038()
{
  JUMPOUT(0x23ABD9044);
}

void sub_23ABD908C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x676E69646E6570;
  if (*v1)
    v2 = 0x6465696669726576;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_23ABD90CC()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
}

void sub_23ABD91A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v13 - 248) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v13 - 240) = a1;
  v14 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v13 - 808) = (char *)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  *(_QWORD *)(v13 - 792) = (char *)&a9 - v16;
  *(_QWORD *)(v13 - 120) = v11;
  *(_QWORD *)(v13 - 112) = v10;
  *(_QWORD *)(v13 - 296) = v12;
  *(_QWORD *)(v13 - 104) = v12;
  *(_QWORD *)(v13 - 96) = v9;
  *(_QWORD *)(v13 - 800) = v9;
  type metadata accessor for ThrottlingKey();
}

void sub_23ABD9228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v13 - 432) = a1;
  *(_QWORD *)(v13 - 312) = *(_QWORD *)(a1 - 8);
  v14 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v13 - 392) = (char *)&a9 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  *(_QWORD *)(v13 - 504) = (char *)&a9 - v16;
  *(_QWORD *)(v13 - 120) = v9;
  *(_QWORD *)(v13 - 112) = v10;
  *(_QWORD *)(v13 - 104) = v11;
  *(_QWORD *)(v13 - 96) = v12;
  type metadata accessor for PersistenceTrigger();
}

void sub_23ABD92A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 184) = a1;
  sub_23B1C6C98();
  *(_QWORD *)(v5 - 120) = v1;
  *(_QWORD *)(v5 - 112) = v2;
  *(_QWORD *)(v5 - 104) = v3;
  *(_QWORD *)(v5 - 96) = v4;
  type metadata accessor for Job();
}

void sub_23ABD92CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)(v14 - 824) = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *(_QWORD *)(v14 - 360) = TupleTypeMetadata2;
  *(_QWORD *)(v14 - 376) = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  *(_QWORD *)(v14 - 328) = (char *)&a9 - v16;
  v17 = sub_23B1C6C98();
  *(_QWORD *)(v14 - 704) = v17;
  *(_QWORD *)(v14 - 648) = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)(v14 - 736) = (char *)&a9 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v14 - 720) = (char *)&a9 - v21;
  *(_QWORD *)(v14 - 408) = v9;
  *(_QWORD *)(v14 - 696) = *(_QWORD *)(v9 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v14 - 744) = (char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  *(_QWORD *)(v14 - 768) = (char *)&a9 - v24;
  v26 = type metadata accessor for SnapshotItem(255, v10, v12, v25);
  v27 = sub_23B1C6C98();
  *(_QWORD *)(v14 - 384) = v27;
  *(_QWORD *)(v14 - 416) = *(_QWORD *)(v27 - 8);
  v28 = MEMORY[0x24BDAC7A8](v27);
  *(_QWORD *)(v14 - 424) = (char *)&a9 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v28);
  *(_QWORD *)(v14 - 400) = (char *)&a9 - v31;
  *(_QWORD *)(v14 - 336) = v26;
  *(_QWORD *)(v14 - 304) = *(_QWORD *)(v26 - 8);
  v32 = MEMORY[0x24BDAC7A8](v30);
  *(_QWORD *)(v14 - 536) = (char *)&a9 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v32);
  *(_QWORD *)(v14 - 544) = (char *)&a9 - v35;
  MEMORY[0x24BDAC7A8](v34);
  *(_QWORD *)(v14 - 520) = (char *)&a9 - v36;
  *(_QWORD *)(v14 - 120) = v10;
  *(_QWORD *)(v14 - 112) = v11;
  *(_QWORD *)(v14 - 104) = v12;
  *(_QWORD *)(v14 - 96) = v13;
  type metadata accessor for ItemReconciliation();
}

void sub_23ABD9530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v17 = sub_23B1C6C98();
  *(_QWORD *)(v15 - 344) = v17;
  *(_QWORD *)(v15 - 352) = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)(v15 - 664) = (char *)&a9 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 232) = (char *)&a9 - v21;
  *(_QWORD *)(v15 - 256) = a1;
  *(_QWORD *)(v15 - 264) = *(_QWORD *)(a1 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v15 - 776) = (char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v22);
  *(_QWORD *)(v15 - 752) = (char *)&a9 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  *(_QWORD *)(v15 - 672) = (char *)&a9 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  *(_QWORD *)(v15 - 576) = (char *)&a9 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  *(_QWORD *)(v15 - 552) = (char *)&a9 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  *(_QWORD *)(v15 - 688) = (char *)&a9 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  *(_QWORD *)(v15 - 288) = (char *)&a9 - v35;
  *(_QWORD *)(v15 - 272) = v10;
  *(_QWORD *)(v15 - 280) = *(_QWORD *)(v10 - 8);
  v36 = MEMORY[0x24BDAC7A8](v34);
  *(_QWORD *)(v15 - 816) = (char *)&a9 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x24BDAC7A8](v36);
  *(_QWORD *)(v15 - 712) = (char *)&a9 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  *(_QWORD *)(v15 - 624) = (char *)&a9 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  *(_QWORD *)(v15 - 584) = (char *)&a9 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  *(_QWORD *)(v15 - 592) = (char *)&a9 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  *(_QWORD *)(v15 - 600) = (char *)&a9 - v47;
  v48 = MEMORY[0x24BDAC7A8](v46);
  *(_QWORD *)(v15 - 656) = (char *)&a9 - v49;
  v50 = MEMORY[0x24BDAC7A8](v48);
  *(_QWORD *)(v15 - 512) = (char *)&a9 - v51;
  v52 = MEMORY[0x24BDAC7A8](v50);
  *(_QWORD *)(v15 - 608) = (char *)&a9 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  *(_QWORD *)(v15 - 616) = (char *)&a9 - v55;
  v56 = MEMORY[0x24BDAC7A8](v54);
  *(_QWORD *)(v15 - 472) = (char *)&a9 - v57;
  v58 = MEMORY[0x24BDAC7A8](v56);
  *(_QWORD *)(v15 - 480) = (char *)&a9 - v59;
  v60 = MEMORY[0x24BDAC7A8](v58);
  *(_QWORD *)(v15 - 496) = (char *)&a9 - v61;
  v62 = MEMORY[0x24BDAC7A8](v60);
  *(_QWORD *)(v15 - 488) = (char *)&a9 - v63;
  v64 = MEMORY[0x24BDAC7A8](v62);
  *(_QWORD *)(v15 - 528) = (char *)&a9 - v65;
  *(_QWORD *)(v15 - 200) = v9;
  *(_QWORD *)(v15 - 176) = *(_QWORD *)(v9 - 8);
  v66 = MEMORY[0x24BDAC7A8](v64);
  *(_QWORD *)(v15 - 728) = (char *)&a9 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = MEMORY[0x24BDAC7A8](v66);
  *(_QWORD *)(v15 - 560) = (char *)&a9 - v69;
  v70 = MEMORY[0x24BDAC7A8](v68);
  *(_QWORD *)(v15 - 760) = (char *)&a9 - v71;
  v72 = MEMORY[0x24BDAC7A8](v70);
  *(_QWORD *)(v15 - 680) = (char *)&a9 - v73;
  v74 = MEMORY[0x24BDAC7A8](v72);
  *(_QWORD *)(v15 - 568) = (char *)&a9 - v75;
  v76 = MEMORY[0x24BDAC7A8](v74);
  *(_QWORD *)(v15 - 640) = (char *)&a9 - v77;
  v78 = MEMORY[0x24BDAC7A8](v76);
  *(_QWORD *)(v15 - 632) = (char *)&a9 - v79;
  v80 = MEMORY[0x24BDAC7A8](v78);
  *(_QWORD *)(v15 - 456) = (char *)&a9 - v81;
  v82 = MEMORY[0x24BDAC7A8](v80);
  *(_QWORD *)(v15 - 448) = (char *)&a9 - v83;
  v84 = MEMORY[0x24BDAC7A8](v82);
  v85 = MEMORY[0x24BDAC7A8](v84);
  *(_QWORD *)(v15 - 368) = (char *)&a9 - v86;
  v87 = MEMORY[0x24BDAC7A8](v85);
  v88 = MEMORY[0x24BDAC7A8](v87);
  v89 = MEMORY[0x24BDAC7A8](v88);
  v90 = MEMORY[0x24BDAC7A8](v89);
  v91 = MEMORY[0x24BDAC7A8](v90);
  *(_QWORD *)(v15 - 464) = (char *)&a9 - v92;
  v93 = MEMORY[0x24BDAC7A8](v91);
  *(_QWORD *)(v15 - 440) = (char *)&a9 - v94;
  v95 = MEMORY[0x24BDAC7A8](v93);
  *(_QWORD *)(v15 - 320) = (char *)&a9 - v96;
  v97 = MEMORY[0x24BDAC7A8](v95);
  *(_QWORD *)(v15 - 784) = (char *)&a9 - v98;
  v99 = MEMORY[0x24BDAC7A8](v97);
  *(_QWORD *)(v15 - 224) = (char *)&a9 - v100;
  MEMORY[0x24BDAC7A8](v99);
  *(_QWORD *)(v15 - 216) = (char *)&a9 - v101;
  *(_QWORD *)(v15 - 168) = v14;
  *(_QWORD *)(v15 - 160) = v11;
  *(_QWORD *)(v15 - 120) = v11;
  *(_QWORD *)(v15 - 112) = v12;
  *(_QWORD *)(v15 - 192) = v12;
  *(_QWORD *)(v15 - 104) = v13;
  *(_QWORD *)(v15 - 96) = v14;
  type metadata accessor for Ingestion.DeleteFolderFromSnapshotIfEmpty();
}

uint64_t sub_23ABD9BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v3 = swift_dynamicCastClass();
  if (!v3 || v0 != 8)
  {
    v10 = *(_QWORD *)(v2 - 168);
    v11 = *(_QWORD *)(v2 - 192);
    *(_QWORD *)(v2 - 120) = *(_QWORD *)(v2 - 160);
    *(_QWORD *)(v2 - 112) = v11;
    *(_QWORD *)(v2 - 104) = v1;
    *(_QWORD *)(v2 - 96) = v10;
    type metadata accessor for Materialization.MaterializeItem();
  }
  v4 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 536);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v2 - 152) + 32) + 368);
  swift_retain();
  v6 = v4;
  v7 = *(_QWORD *)(v2 - 136);
  v8 = v5(v6, 1);
  result = swift_release();
  if (!v7)
    return (v8 ^ 1) & 1;
  return result;
}

void sub_23ABDC574(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_23B1D1878[a1] == qword_23B1D1878[v1])
  {
    v5 = *(_QWORD *)(v4 - 808);
    v6 = *(_QWORD *)(v4 - 272);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 280) + 16))(v5, v2 + *(_QWORD *)(*(_QWORD *)v2 + 536), v6);
    swift_storeEnumTagMultiPayload();
    sub_23AAB1264(v5, v3, v6, *(_QWORD *)(v4 - 408));
  }
  JUMPOUT(0x23ABDC340);
}

void sub_23ABDC5FC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v4, v1);
  v6(v3, v1);
  if ((a1 & 1) == 0)
    JUMPOUT(0x23ABDC344);
  JUMPOUT(0x23ABDBFC8);
}

void sub_23ABDC7CC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (qword_23B1D1878[a1] == qword_23B1D1878[v2])
  {
    v4 = *(_QWORD *)(v3 - 280);
    v5 = *(_QWORD *)(v3 - 816);
    v6 = *(_QWORD *)(v3 - 272);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v5, v1, v6);
    v7 = sub_23B1C63A4();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    if ((v7 & 1) != 0)
      JUMPOUT(0x23ABDC858);
    JUMPOUT(0x23ABDC8E0);
  }
  JUMPOUT(0x23ABDC8DCLL);
}

uint64_t sub_23ABDCD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 104))
    sub_23AFF02CC((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/interfaces/persistence/JobRegistry.swift", 113, 2, 646);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = v3 & a3;
  v6 = *(_QWORD *)(a1 + 96);
  swift_retain();
  if (v4)
    sub_23ABD90CC();
  if (v3)
    return v3;
  else
    return v6;
}

void sub_23ABDCEB0()
{
  type metadata accessor for PersistenceTrigger();
}

void sub_23ABDCEF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 - 160) = a1;
  v6 = sub_23B1C6C98();
  *(_QWORD *)(v5 - 152) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 - 144) = v6;
  MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v5 - 112) = v4;
  *(_QWORD *)(v5 - 104) = v2;
  *(_QWORD *)(v5 - 96) = v1;
  *(_QWORD *)(v5 - 88) = v3;
  type metadata accessor for PersistenceTrigger();
}

uint64_t sub_23ABDCF48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = sub_23B1C6C98();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - v7;
  result = sub_23AF1E7EC(*(_QWORD *)(v4 - 120));
  if (!v10)
  {
    *(_QWORD *)(v4 - 184) = v8;
    *(_QWORD *)(v4 - 176) = v6;
    *(_QWORD *)(v4 - 168) = v5;
    v11 = *(_QWORD *)(v4 - 120);
    *(_QWORD *)(v4 - 72) = v11;
    if ((v11 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)(v4 - 112) = v3;
      *(_QWORD *)(v4 - 104) = v1;
      *(_QWORD *)(v4 - 96) = v0;
      *(_QWORD *)(v4 - 88) = v2;
      type metadata accessor for JobRegistry();
    }
    *(_QWORD *)(v4 - 168) = v1;
    *(_QWORD *)(v4 - 112) = v1;
    *(_QWORD *)(v4 - 104) = v3;
    *(_QWORD *)(v4 - 96) = v2;
    *(_QWORD *)(v4 - 88) = v0;
    type metadata accessor for JobRegistry();
  }
  return result;
}

void sub_23ABDD1AC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  sub_23AF1E3C0(v0, v1, v2);
  swift_release();
  JUMPOUT(0x23ABDCFA4);
}

uint64_t sub_23ABDD204()
{
  return sub_23B1C74B4();
}

uint64_t sub_23ABDD228()
{
  sub_23B1C74A8();
  sub_23B1C74B4();
  return sub_23B1C74E4();
}

uint64_t sub_23ABDD26C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  sub_23B1C57B0();
  swift_allocObject();
  sub_23B1C57A4();
  sub_23B1C578C();
  v0 = sub_23B1C5798();
  v2 = v1;
  v3 = sub_23B1C5AB0();
  sub_23AAAE53C(v0, v2);
  swift_release();
  return v3;
}

uint64_t sub_23ABDD37C()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C7340();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23ABDD41C()
{
  return sub_23ABDD37C();
}

uint64_t sub_23ABDD428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23B1C5A50();
  v10 = v9;
  swift_bridgeObjectRelease();
  if (v10 >> 60 == 15)
  {
    v11 = 1;
  }
  else
  {
    sub_23B1C5780();
    swift_allocObject();
    sub_23B1C5774();
    sub_23B1C5768();
    swift_release();
    sub_23AAA3E18(v8, v10);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, a2);
    v11 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a3, v11, 1, a2);
}

uint64_t sub_23ABDD55C(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(void))(a2 + 64))() & 1) != 0)
    return 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2) & 1) != 0)
    return 1;
  return 2;
}

uint64_t sub_23ABDD5B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v6 + 48))(v3);
  v7 = sub_23B1C63A4();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v7 & 1;
}

uint64_t sub_23ABDD654(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v6 + 56))(v3);
  v7 = sub_23B1C63A4();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v7 & 1;
}

uint64_t sub_23ABDD6F4(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(void))(a2 + 64))() & 1) != 0)
    return 1953460082;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2) & 1) != 0)
    return 0x6873617274;
  return 0;
}

unint64_t sub_23ABDD76C()
{
  unint64_t result;

  result = qword_2569E25E8;
  if (!qword_2569E25E8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D1ABC, &type metadata for FileItemIDKind);
    atomic_store(result, (unint64_t *)&qword_2569E25E8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FileItemIDKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23ABDD7FC + 4 * byte_23B1D1AB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23ABDD830 + 4 * byte_23B1D1AB0[v4]))();
}

uint64_t sub_23ABDD830(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23ABDD838(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23ABDD840);
  return result;
}

uint64_t sub_23ABDD84C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23ABDD854);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23ABDD858(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23ABDD860(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FileItemIDKind()
{
  return &type metadata for FileItemIDKind;
}

uint64_t sub_23ABDD87C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void sub_23ABDD8EC()
{
  sub_23ABDDA1C();
}

id sub_23ABDD908()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_23ABDD93C(uint64_t a1, uint64_t a2)
{
  return sub_23ABDD974(a1, a2, &qword_2542E1FE0);
}

uint64_t sub_23ABDD958(uint64_t a1, uint64_t a2)
{
  return sub_23ABDD974(a1, a2, &qword_2542E1FE8);
}

uint64_t sub_23ABDD974(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  if (*a3 != -1)
    swift_once();
  v3 = sub_23B1C63E0();
  v5 = v4;
  if (v3 == sub_23B1C63E0() && v5 == v6)
    v8 = 1;
  else
    v8 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_23ABDDA1C()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t sub_23ABDDA48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  unsigned int v6;
  __int16 v7;

  v0 = sub_23B1C5A08();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_23B1C5E4C();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23B1C59E4();
  v6 = 0;
  v7 = 256;
  result = sub_23B0E157C(4294967294, v2, v3, 0, 0, 0, (uint64_t)&v6, (uint64_t)sub_23ABDDDFC, 0);
  if ((v7 & 0x100) != 0)
  {
    __break(1u);
  }
  else
  {
    v5 = v6;
    LOBYTE(v6) = v7 & 1;
    return v5 | ((unint64_t)(v7 & 1) << 32);
  }
  return result;
}

uint64_t sub_23ABDDDFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = fpfs_track_document();
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  return result;
}

_QWORD *sub_23ABDDE6C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  os_log_t *v29;
  void *v30;
  void *v31;
  char *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t (*v37)();
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  NSObject *v42;
  _QWORD *v43;
  uint64_t v44;
  id v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  id v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  id v59;
  _QWORD *v60;
  os_log_t v61;
  os_log_t v62;
  uint64_t v63;
  os_log_t *v64;
  char *v65;
  void *v66;
  uint64_t v67;
  id v68;
  void *v69;
  void *v70;
  void *v71;
  _QWORD *v72;
  void *v73;
  unsigned int v74;
  id v75;
  char isEscapingClosureAtFileLocation;
  uint64_t v77;
  os_log_t v78;
  char *v79;
  id v80;
  os_log_t v81;
  _QWORD *v82;
  NSObject *v83;
  os_log_type_t v84;
  _BOOL4 v85;
  uint64_t v86;
  void *v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  os_log_t v94;
  void *v95;
  os_log_t *v96;
  void *v97;
  unsigned int v98;
  id v99;
  void *v100;
  id v101;
  void *v102;
  id v103;
  _QWORD *v104;
  os_log_t v105;
  id v106;
  id v107;
  NSObject *v108;
  os_log_type_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  id v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  void (*v117)(os_log_t, uint64_t);
  id v118;
  _QWORD *v119;
  os_log_t v120;
  void (**v121)(_QWORD, _QWORD);
  _QWORD *result;
  char *v123;
  void *v124;
  id v125;
  char *v126;
  _QWORD *v127;
  id v128;
  id v129;
  NSObject *v130;
  os_log_type_t v131;
  uint64_t v132;
  void *v133;
  void *v134;
  id v135;
  uint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  unint64_t v139;
  id v140;
  uint64_t v141;
  _QWORD *v142;
  os_log_t v143;
  void *v144;
  uint64_t v145;
  os_log_t v146;
  _QWORD *v147;
  void *v148;
  _QWORD *v149;
  char *v150;
  os_log_t v151;
  _QWORD *v152;
  _QWORD *v153;
  os_log_t v154;
  _QWORD *v155;
  NSObject *v156;
  char *v157;
  void *v158;
  void (**v159)(_QWORD, _QWORD);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  id aBlock[16];

  v2 = v1;
  aBlock[14] = *(id *)MEMORY[0x24BDAC8D0];
  v162 = sub_23B1C5A08();
  v4 = *(char **)(v162 - 8);
  v5 = MEMORY[0x24BDAC7A8](v162);
  v149 = (os_log_t *)((char *)&v146 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = MEMORY[0x24BDAC7A8](v5);
  v151 = (os_log_t)((char *)&v146 - v8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v155 = (os_log_t *)((char *)&v146 - v10);
  MEMORY[0x24BDAC7A8](v9);
  v157 = (char *)&v146 - v11;
  v161 = sub_23B1C5E4C();
  v159 = *(void (***)(_QWORD, _QWORD))(v161 - 8);
  v12 = MEMORY[0x24BDAC7A8](v161);
  v150 = (char *)&v146 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v152 = (os_log_t *)((char *)&v146 - v15);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v156 = ((char *)&v146 - v17);
  MEMORY[0x24BDAC7A8](v16);
  v154 = (os_log_t)((char *)&v146 - v18);
  v1[2] = 1;
  v1[3] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEDD630]), sel_init);
  v1[4] = 0x6D5F70756B636162;
  v1[5] = 0xEF74736566696E61;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE860);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23B1D1B90;
  v20 = (void *)*MEMORY[0x24BDBCBD0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDBCBD0];
  v21 = (void *)*MEMORY[0x24BDBD210];
  if (!*MEMORY[0x24BDBD210])
    goto LABEL_37;
  v22 = inited;
  v23 = OBJC_IVAR____TtC9libfssync17SQLBackupManifest_resourceValuesToFetch;
  v24 = (void *)*MEMORY[0x24BDBCBF8];
  *(_QWORD *)(inited + 40) = v21;
  *(_QWORD *)(inited + 48) = v24;
  v25 = v20;
  v26 = v21;
  v27 = v24;
  *(_QWORD *)(v22 + 56) = sub_23B1C63BC();
  v28 = sub_23ABE4FD4(v22, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (unint64_t *)&unk_2542E1F50, (uint64_t)&unk_23B1CB368, (void (*)(id *, void *))sub_23ADE0CBC);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  *(_QWORD *)((char *)v1 + v23) = v28;
  v29 = (os_log_t *)*((_QWORD *)v4 + 2);
  ((void (*)(char *, uint64_t, uint64_t))v29)((char *)v1 + OBJC_IVAR____TtC9libfssync17SQLBackupManifest_url, a1, v162);
  v30 = (void *)v1[3];
  v31 = (void *)sub_23B1C5954();
  aBlock[0] = 0;
  LODWORD(v28) = objc_msgSend(v30, sel_openAtURL_withFlags_error_, v31, 3145734, aBlock);

  v32 = v4;
  if (!(_DWORD)v28)
  {
    v157 = v4;
    v39 = aBlock[0];
    swift_release();
    v40 = (void *)sub_23B1C587C();

    swift_willThrow();
    v41 = (id)fpfs_current_or_default_log();
    v42 = v156;
    sub_23B1C5E58();
    v43 = v155;
    v44 = v162;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v29)(v155, a1, v162);
    v45 = v40;
    v46 = v40;
    v47 = sub_23B1C5E40();
    v48 = sub_23B1C6AA0();
    LODWORD(v158) = v48;
    v49 = a1;
    if (os_log_type_enabled(v47, v48))
    {
      v50 = swift_slowAlloc();
      v51 = v40;
      v160 = v49;
      v52 = v50;
      v152 = (_QWORD *)swift_slowAlloc();
      v154 = (os_log_t)swift_slowAlloc();
      aBlock[0] = v154;
      *(_DWORD *)v52 = 136315394;
      v150 = (char *)(v52 + 4);
      v151 = v47;
      v53 = (void *)sub_23B1C5954();
      v54 = objc_msgSend(v53, sel_fp_shortDescription);
      v153 = v2;
      v55 = v54;

      v56 = sub_23B1C63E0();
      v58 = v57;

      v167 = sub_23AABEC68(v56, v58, (uint64_t *)aBlock);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      v157 = (char *)*((_QWORD *)v157 + 1);
      ((void (*)(_QWORD *, uint64_t))v157)(v43, v44);
      *(_WORD *)(v52 + 12) = 2112;
      swift_getErrorValue();
      v59 = sub_23B0D9CF0(v166);
      v167 = (uint64_t)v59;
      v2 = v153;
      sub_23B1C6CBC();
      v60 = v152;
      *v152 = v59;

      v61 = v151;
      _os_log_impl(&dword_23AA66000, v151, (os_log_type_t)v158, "Failed to open database %s: %@", (uint8_t *)v52, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v60, -1, -1);
      v62 = v154;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v62, -1, -1);
      v63 = v52;
      v49 = v160;
      v64 = (os_log_t *)v42;
      v38 = v162;
      MEMORY[0x23B8614BC](v63, -1, -1);

      ((void (**)(os_log_t *, uint64_t))v159)[1](v64, v161);
    }
    else
    {
      v157 = (char *)*((_QWORD *)v157 + 1);
      ((void (*)(_QWORD *, uint64_t))v157)(v43, v44);

      ((void (**)(NSObject *, uint64_t))v159)[1](v42, v161);
      v38 = v44;
    }
    swift_willThrow();
    goto LABEL_29;
  }
  v160 = a1;
  v156 = v29;
  v33 = (void *)v2[3];
  v34 = aBlock[0];
  if (objc_msgSend(v33, sel_setupPragmas))
  {
    v157 = v4;
    v35 = objc_msgSend(v33, sel_userVersion);
    v36 = objc_msgSend(v35, sel_integerValue);

    if ((uint64_t)v36 > 0)
    {
      v37 = 0;
      v38 = v162;
LABEL_15:
      v77 = v160;
      objc_msgSend((id)v2[3], sel_useBatchingWithDelay_changeCount_, 1000, 0.5);
      (*((void (**)(uint64_t, uint64_t))v157 + 1))(v77, v38);
LABEL_31:
      sub_23AAB7948((uint64_t)v37);
      return v2;
    }
    v71 = (void *)v2[3];
    v72 = (_QWORD *)swift_allocObject();
    v72[2] = sub_23ABE4D7C;
    v72[3] = v2;
    aBlock[4] = sub_23AA956C8;
    aBlock[5] = v72;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_52;
    v73 = _Block_copy(aBlock);
    v153 = v2;
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v74 = objc_msgSend(v71, sel_executeSwift_error_, v73, aBlock);
    _Block_release(v73);
    v75 = aBlock[0];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    v38 = v162;
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      if (v74)
      {
        v2 = v153;
        objc_msgSend((id)v153[3], sel_setUserVersion_, 1);
        v37 = sub_23ABE4D7C;
        goto LABEL_15;
      }
      v2 = v153;
      swift_release();
      v124 = (void *)sub_23B1C587C();

      swift_willThrow();
      v125 = (id)fpfs_current_or_default_log();
      v126 = v150;
      sub_23B1C5E58();
      v127 = v149;
      v49 = v160;
      ((void (*)(_QWORD *, uint64_t, uint64_t))v156)(v149, v160, v38);
      v128 = v124;
      v129 = v124;
      v130 = sub_23B1C5E40();
      v131 = sub_23B1C6AA0();
      if (os_log_type_enabled(v130, v131))
      {
        v132 = swift_slowAlloc();
        v155 = (_QWORD *)swift_slowAlloc();
        v156 = v130;
        v133 = v124;
        v158 = (void *)swift_slowAlloc();
        aBlock[0] = v158;
        *(_DWORD *)v132 = 136315394;
        v134 = (void *)sub_23B1C5954();
        v135 = objc_msgSend(v134, sel_fp_shortDescription);

        v136 = sub_23B1C63E0();
        v137 = v127;
        v139 = v138;

        v167 = sub_23AABEC68(v136, v139, (uint64_t *)aBlock);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        v157 = (char *)*((_QWORD *)v157 + 1);
        ((void (*)(_QWORD *, uint64_t))v157)(v137, v162);
        *(_WORD *)(v132 + 12) = 2112;
        swift_getErrorValue();
        v140 = sub_23B0D9CF0(v163);
        v167 = (uint64_t)v140;
        LOBYTE(v137) = v131;
        v141 = v162;
        v2 = v153;
        sub_23B1C6CBC();
        v142 = v155;
        *v155 = v140;

        v143 = v156;
        _os_log_impl(&dword_23AA66000, v156, (os_log_type_t)v137, "Failed to create table %s: %@", (uint8_t *)v132, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
        swift_arrayDestroy();
        v38 = v141;
        MEMORY[0x23B8614BC](v142, -1, -1);
        v144 = v158;
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v144, -1, -1);
        v145 = v132;
        v49 = v160;
        MEMORY[0x23B8614BC](v145, -1, -1);

        ((void (**)(char *, uint64_t))v159)[1](v150, v161);
      }
      else
      {
        v157 = (char *)*((_QWORD *)v157 + 1);
        ((void (*)(_QWORD *, uint64_t))v157)(v127, v38);

        ((void (**)(char *, uint64_t))v159)[1](v126, v161);
      }
      swift_willThrow();
      v37 = sub_23ABE4D7C;
LABEL_30:
      ((void (*)(uint64_t, uint64_t))v157)(v49, v38);
      goto LABEL_31;
    }
    __break(1u);
LABEL_37:
    __break(1u);
  }
  v153 = v2;
  v65 = (char *)objc_msgSend(v33, sel_lastError);
  v150 = v65;
  if (v65)
  {
    v66 = v65;
    swift_getErrorValue();
    v67 = v164;
    v68 = v66;
    v69 = sub_23B0D9CF0(v67);

    v70 = v66;
  }
  else
  {
    sub_23AA9F52C(0, &qword_2569E27C0);
    v69 = (void *)sub_23B1C6C74();
    v70 = 0;
  }
  v78 = v154;
  v79 = v157;
  v80 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v38 = v162;
  v81 = v156;
  ((void (*)(char *, uint64_t, uint64_t))v156)(v79, v160, v162);
  v82 = v69;
  v83 = sub_23B1C5E40();
  v84 = sub_23B1C6AA0();
  LODWORD(v149) = v84;
  v85 = os_log_type_enabled(v83, v84);
  v158 = v70;
  v155 = v82;
  if (v85)
  {
    v86 = swift_slowAlloc();
    v147 = (_QWORD *)swift_slowAlloc();
    v148 = (void *)swift_slowAlloc();
    aBlock[0] = v148;
    *(_DWORD *)v86 = 136315394;
    v146 = v83;
    v87 = (void *)sub_23B1C5954();
    v88 = objc_msgSend(v87, sel_fp_shortDescription);

    v89 = sub_23B1C63E0();
    v91 = v90;

    v167 = sub_23AABEC68(v89, v91, (uint64_t *)aBlock);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    v157 = (char *)*((_QWORD *)v32 + 1);
    ((void (*)(char *, uint64_t))v157)(v79, v162);
    *(_WORD *)(v86 + 12) = 2112;
    v167 = (uint64_t)v82;
    v92 = v82;
    v81 = v156;
    sub_23B1C6CBC();
    v93 = v147;
    *v147 = v82;

    v38 = v162;
    v94 = v146;
    _os_log_impl(&dword_23AA66000, v146, (os_log_type_t)v149, "Failed to set up pragmas %s: %@", (uint8_t *)v86, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v93, -1, -1);
    v95 = v148;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v95, -1, -1);
    v70 = v158;
    MEMORY[0x23B8614BC](v86, -1, -1);

    v96 = (os_log_t *)v159[1];
    ((void (*)(os_log_t, uint64_t))v96)(v154, v161);
  }
  else
  {
    v157 = (char *)*((_QWORD *)v32 + 1);
    ((void (*)(char *, uint64_t))v157)(v79, v38);

    v96 = (os_log_t *)v159[1];
    ((void (*)(os_log_t, uint64_t))v96)(v78, v161);
  }
  v2 = v153;
  v97 = (void *)v153[3];
  aBlock[0] = 0;
  v98 = objc_msgSend(v97, sel_close_, aBlock);
  swift_release();
  if (v98)
  {
    v99 = aBlock[0];
    v49 = v160;
    v100 = v155;
    if (v70)
    {
LABEL_28:
      v123 = v150;
      swift_willThrow();

LABEL_29:
      v37 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    v101 = aBlock[0];
    v102 = (void *)sub_23B1C587C();

    swift_willThrow();
    v103 = (id)fpfs_current_or_default_log();
    v104 = v152;
    sub_23B1C5E58();
    v105 = v151;
    ((void (*)(os_log_t, uint64_t, uint64_t))v81)(v151, v160, v38);
    v106 = v102;
    v107 = v102;
    v108 = sub_23B1C5E40();
    v109 = sub_23B1C6AA0();
    if (os_log_type_enabled(v108, v109))
    {
      v110 = swift_slowAlloc();
      v154 = v108;
      v111 = v110;
      v149 = (_QWORD *)swift_slowAlloc();
      v159 = (void (**)(_QWORD, _QWORD))swift_slowAlloc();
      aBlock[0] = v159;
      *(_DWORD *)v111 = 136315394;
      v148 = (void *)(v111 + 4);
      v112 = (void *)sub_23B1C5954();
      v113 = objc_msgSend(v112, sel_fp_shortDescription);

      v114 = sub_23B1C63E0();
      v156 = v96;
      v116 = v115;

      v167 = sub_23AABEC68(v114, v116, (uint64_t *)aBlock);
      sub_23B1C6CBC();
      v117 = (void (*)(os_log_t, uint64_t))v157;
      swift_bridgeObjectRelease();
      v117(v105, v162);
      *(_WORD *)(v111 + 12) = 2112;
      swift_getErrorValue();
      v118 = sub_23B0D9CF0(v165);
      v167 = (uint64_t)v118;
      sub_23B1C6CBC();
      v119 = v149;
      *v149 = v118;

      v120 = v154;
      _os_log_impl(&dword_23AA66000, v154, v109, "Failed to close database %s: %@", (uint8_t *)v111, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v119, -1, -1);
      v121 = v159;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v121, -1, -1);
      v38 = v162;
      MEMORY[0x23B8614BC](v111, -1, -1);

      ((void (*)(_QWORD *, uint64_t))v156)(v152, v161);
    }
    else
    {

      ((void (*)(os_log_t, uint64_t))v157)(v105, v38);
      ((void (*)(_QWORD *, uint64_t))v96)(v104, v161);
    }
    v2 = v153;
    v49 = v160;
    v100 = v155;
    if (v158)
      goto LABEL_28;
  }
  result = (id)FPNotPermittedWriteError();
  if (result)
    goto LABEL_28;
  __break(1u);
  return result;
}

uint64_t sub_23ABDEF74()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23ABDF02C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  void *v10;
  NSObject *v11;
  NSObject *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  const void *v19;
  void (*v20)(char *, uint64_t);
  uint64_t result;
  id (*v22)();
  uint64_t v23;
  char *v24;
  _QWORD aBlock[6];

  v1 = sub_23B1C5A08();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  v4 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v23 - v6;
  v8 = (char *)(v0 + OBJC_IVAR____TtC9libfssync17SQLBackupManifest_url);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v9((char *)&v23 - v6, v0 + OBJC_IVAR____TtC9libfssync17SQLBackupManifest_url, v1);
  v10 = *(void **)(v0 + 24);
  v11 = objc_msgSend(v10, sel_serialQueue);
  if (!v11)
  {
    v20 = *(void (**)(char *, uint64_t))(v2 + 8);
    v20(v7, v1);
    v22 = 0;
    goto LABEL_5;
  }
  v12 = v11;
  v24 = v8;
  v9(v5, (uint64_t)v7, v1);
  v13 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v10;
  (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v14 + v13, v5, v1);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = sub_23ABE5244;
  *(_QWORD *)(v15 + 24) = v14;
  aBlock[4] = sub_23AB33690;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23B1A764C;
  aBlock[3] = &block_descriptor_95;
  v16 = v1;
  v17 = _Block_copy(aBlock);
  v18 = v10;
  swift_retain();
  swift_release();
  dispatch_sync(v12, v17);
  v19 = v17;
  v1 = v16;
  _Block_release(v19);

  v20 = *(void (**)(char *, uint64_t))(v2 + 8);
  v20(v7, v16);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v13 & 1) == 0)
  {
    v8 = v24;
    v22 = sub_23ABE5244;
LABEL_5:

    swift_bridgeObjectRelease();
    v20(v8, v1);
    swift_bridgeObjectRelease();
    sub_23AAB7948((uint64_t)v22);
    return v0;
  }
  __break(1u);
  return result;
}

id sub_23ABDF29C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  _QWORD *v29;
  os_log_t v30;
  void *v31;
  uint64_t v32;
  os_log_t v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40[2];

  v40[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = sub_23B1C5A08();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23B1C5E4C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[0] = 0;
  if (objc_msgSend(a1, sel_close_, v40))
    return v40[0];
  v37 = v40[0];
  v13 = v40[0];
  v14 = (void *)sub_23B1C587C();

  swift_willThrow();
  v15 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v16 = v14;
  v17 = v14;
  v18 = sub_23B1C5E40();
  v19 = sub_23B1C6AA0();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v37 = (id)v8;
    v21 = v20;
    v34 = (_QWORD *)swift_slowAlloc();
    v35 = (void *)swift_slowAlloc();
    v40[0] = v35;
    *(_DWORD *)v21 = 136315394;
    v32 = v21 + 4;
    v33 = v18;
    v22 = (void *)sub_23B1C5954();
    v23 = objc_msgSend(v22, sel_fp_shortDescription);
    v36 = v9;
    v24 = v23;

    v25 = sub_23B1C63E0();
    v27 = v26;

    v39 = sub_23AABEC68(v25, v27, (uint64_t *)v40);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_WORD *)(v21 + 12) = 2112;
    swift_getErrorValue();
    v28 = sub_23B0D9CF0(v38);
    v39 = (uint64_t)v28;
    sub_23B1C6CBC();
    v29 = v34;
    *v34 = v28;

    v30 = v33;
    _os_log_impl(&dword_23AA66000, v33, v19, "Can't close database %s: %@", (uint8_t *)v21, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v29, -1, -1);
    v31 = v35;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v31, -1, -1);
    MEMORY[0x23B8614BC](v21, -1, -1);

    return (id)(*(uint64_t (**)(char *, id))(v36 + 8))(v11, v37);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_23ABDF678()
{
  sub_23ABDF02C();
  return swift_deallocClassInstance();
}

uint64_t sub_23ABDF69C()
{
  return type metadata accessor for SQLBackupManifest();
}

uint64_t type metadata accessor for SQLBackupManifest()
{
  uint64_t result;

  result = qword_2569E2618;
  if (!qword_2569E2618)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23ABDF6E0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B1C5A08();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_23ABDF780(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = sub_23B1C5E4C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = v1;
  v32 = a1;
  result = sub_23B135380(1, (uint64_t)sub_23ABE5170, (uint64_t)v30);
  if (v2)
  {
    v9 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    swift_retain();
    v10 = v2;
    swift_retain();
    v11 = v2;
    v12 = sub_23B1C5E40();
    v13 = sub_23B1C6AA0();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc();
      v29 = v5;
      v15 = v14;
      v26 = (_QWORD *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v35 = v28;
      *(_DWORD *)v15 = 136315394;
      v25[1] = v15 + 4;
      v16 = (void *)sub_23B1C5954();
      v17 = objc_msgSend(v16, sel_fp_shortDescription);
      v27 = v4;
      v18 = v17;

      v19 = sub_23B1C63E0();
      v21 = v20;

      v34 = sub_23AABEC68(v19, v21, &v35);
      sub_23B1C6CBC();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2112;
      swift_getErrorValue();
      v22 = sub_23B0D9CF0(v33);
      v34 = (uint64_t)v22;
      sub_23B1C6CBC();
      v23 = v26;
      *v26 = v22;

      _os_log_impl(&dword_23AA66000, v12, v13, "Can't insert into the database %s: %@", (uint8_t *)v15, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v23, -1, -1);
      v24 = v28;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v24, -1, -1);
      MEMORY[0x23B8614BC](v15, -1, -1);

      (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v27);
    }
    else
    {
      swift_release_n();

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_23ABDFA9C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  void *v13;
  unsigned __int8 v14;
  id v15;
  uint64_t result;
  void *v17;
  id v18;
  char *v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v8 = sub_23B1C5E4C();
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v38 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v10 + 40) = v11;
  *(_QWORD *)(v10 + 56) = *(_QWORD *)(a3 + 32);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = sub_23ABE51B4;
  v12[3] = v10;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v12;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_85;
  v13 = _Block_copy(aBlock);
  swift_retain();
  sub_23ABE5118(a3);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v14 = objc_msgSend(a1, sel_executeSwift_error_, v13, aBlock);
  _Block_release(v13);
  v15 = aBlock[0];
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v13 & 1) != 0)
    __break(1u);
  if ((v14 & 1) != 0)
  {
    result = swift_release();
    *a4 = 1;
  }
  else
  {
    v17 = (void *)sub_23B1C587C();

    swift_willThrow();
    v18 = (id)fpfs_current_or_default_log();
    v19 = v38;
    sub_23B1C5E58();
    swift_retain();
    v20 = v17;
    swift_retain();
    v21 = v17;
    v22 = sub_23B1C5E40();
    v23 = sub_23B1C6AA0();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc();
      v34 = (_QWORD *)swift_slowAlloc();
      v35 = (void *)swift_slowAlloc();
      aBlock[0] = v35;
      *(_DWORD *)v24 = 136315394;
      v33 = v24 + 4;
      v25 = (void *)sub_23B1C5954();
      v26 = objc_msgSend(v25, sel_fp_shortDescription);

      v27 = sub_23B1C63E0();
      v29 = v28;

      v40 = sub_23AABEC68(v27, v29, (uint64_t *)aBlock);
      sub_23B1C6CBC();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2112;
      swift_getErrorValue();
      v30 = sub_23B0D9CF0(v39);
      v40 = (uint64_t)v30;
      sub_23B1C6CBC();
      v31 = v34;
      *v34 = v30;

      _os_log_impl(&dword_23AA66000, v22, v23, "Failed to insert into %s: %@", (uint8_t *)v24, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v31, -1, -1);
      v32 = v35;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v32, -1, -1);
      MEMORY[0x23B8614BC](v24, -1, -1);

      (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v37);
    }
    else
    {
      swift_release_n();

      (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v37);
    }
    swift_willThrow();
    return swift_release();
  }
  return result;
}

uint64_t sub_23ABDFF20(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  id v6;
  id v7;
  id v8;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = (void *)sub_23B1C63BC();
  v6 = objc_msgSend(a1, sel_bindStringParameter_, v5);

  sub_23B1C63E0();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v7 = objc_msgSend(a1, sel_bindLongParameter_, *(_QWORD *)(a3 + 16));
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AC396B8(*(_QWORD *)(a3 + 24), *(_BYTE *)(a3 + 32));
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v8 = objc_msgSend(a1, sel_bindUnsignedIntegerParameter_, *(unsigned int *)(a3 + 36));
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

NSObject *sub_23ABE0164()
{
  uint64_t v0;
  NSObject *result;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[6];

  result = objc_msgSend(*(id *)(v0 + 24), sel_serialQueue);
  if (result)
  {
    v2 = result;
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = sub_23ABE5140;
    *(_QWORD *)(v3 + 24) = v0;
    v5[4] = sub_23AB22A20;
    v5[5] = v3;
    v5[0] = MEMORY[0x24BDAC760];
    v5[1] = 1107296256;
    v5[2] = sub_23B1A764C;
    v5[3] = &block_descriptor_68;
    v4 = _Block_copy(v5);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v2, v4);

    _Block_release(v4);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((v2 & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t sub_23ABE028C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  unsigned int v11;
  id v12;
  char isEscapingClosureAtFileLocation;
  void *v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  char *v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  id v48;
  void *v49;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id aBlock[8];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = sub_23B1C5E4C();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v56 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v51 - v6;
  v8 = *(void **)(a1 + 24);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = sub_23ABE5158;
  v9[3] = a1;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v9;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_75;
  v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v11 = objc_msgSend(v8, sel_executeSwift_error_, v10, aBlock);
  _Block_release(v10);
  v12 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (!v11)
  {
    v14 = (void *)sub_23B1C587C();

    swift_willThrow();
    v15 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    swift_retain();
    v16 = v14;
    swift_retain();
    v17 = v14;
    v18 = sub_23B1C5E40();
    v19 = sub_23B1C6AA0();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc();
      v55 = v2;
      v21 = v20;
      v52 = (_QWORD *)swift_slowAlloc();
      v53 = (void *)swift_slowAlloc();
      aBlock[0] = v53;
      *(_DWORD *)v21 = 136315394;
      v51 = v21 + 4;
      v22 = (void *)sub_23B1C5954();
      v23 = objc_msgSend(v22, sel_fp_shortDescription);

      v24 = sub_23B1C63E0();
      v54 = v3;
      v26 = v25;

      v59 = sub_23AABEC68(v24, v26, (uint64_t *)aBlock);
      sub_23B1C6CBC();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2112;
      swift_getErrorValue();
      v27 = sub_23B0D9CF0(v57);
      v59 = (uint64_t)v27;
      v3 = v54;
      sub_23B1C6CBC();
      v28 = v52;
      *v52 = v27;

      _os_log_impl(&dword_23AA66000, v18, v19, "Could not create a unique index %s: %@", (uint8_t *)v21, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v28, -1, -1);
      v29 = v53;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v29, -1, -1);
      v30 = v21;
      v2 = v55;
      MEMORY[0x23B8614BC](v30, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  }
  objc_msgSend(v8, sel_makeNextFlushFullSync);
  objc_msgSend(v8, sel_flush);
  aBlock[0] = 0;
  if (objc_msgSend(v8, sel_close_, aBlock))
  {
    v31 = aBlock[0];
  }
  else
  {
    v32 = aBlock[0];
    v33 = (void *)sub_23B1C587C();

    swift_willThrow();
    v34 = (id)fpfs_current_or_default_log();
    v35 = v56;
    sub_23B1C5E58();
    swift_retain();
    v36 = v33;
    swift_retain();
    v37 = v33;
    v38 = sub_23B1C5E40();
    v39 = sub_23B1C6AA0();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc();
      v41 = (_QWORD *)swift_slowAlloc();
      v53 = (void *)swift_slowAlloc();
      aBlock[0] = v53;
      *(_DWORD *)v40 = 136315394;
      v55 = v2;
      v42 = (void *)sub_23B1C5954();
      v43 = objc_msgSend(v42, sel_fp_shortDescription);
      v54 = v3;
      v44 = v43;

      v45 = sub_23B1C63E0();
      v47 = v46;

      v59 = sub_23AABEC68(v45, v47, (uint64_t *)aBlock);
      sub_23B1C6CBC();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2112;
      swift_getErrorValue();
      v48 = sub_23B0D9CF0(v58);
      v59 = (uint64_t)v48;
      sub_23B1C6CBC();
      *v41 = v48;

      _os_log_impl(&dword_23AA66000, v38, v39, "Can't close database %s: %@", (uint8_t *)v40, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v41, -1, -1);
      v49 = v53;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v49, -1, -1);
      MEMORY[0x23B8614BC](v40, -1, -1);

      (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v55);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v35, v2);
    }
  }
  return swift_release();
}

uint64_t sub_23ABE09B0()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23ABE0A68(void *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void *v34;
  char *v35;
  uint64_t v36;
  void *v37;
  id v38;
  char *v39;
  void *v40;
  id v41;
  char v42;
  id v43;
  char *v44;
  uint64_t v45;
  void (**v46)(char *, os_log_t);
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t (*v58)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t result;
  uint64_t v64;
  id v65;
  uint64_t v66;
  char v67;
  char *v68;
  id v69;
  char *v70;
  uint64_t v71;
  char v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  id v76;
  char *v77;
  char *v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  void *v83;
  id v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(char *, uint64_t);
  char *v90;
  uint64_t v91;
  id v92;
  char v93;
  id v94;
  char *v95;
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  char *v98;
  NSObject *v99;
  os_log_type_t v100;
  uint64_t v101;
  void *v102;
  id v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  void *v110;
  unint64_t v111;
  uint64_t v112;
  id v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  uint64_t v117;
  void *v118;
  id v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  os_log_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  id v129;
  char *v130;
  char *v131;
  id v132;
  id v133;
  NSObject *v134;
  os_log_type_t v135;
  uint64_t v136;
  void *v137;
  id v138;
  uint64_t v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  void (*v143)(char *, uint64_t);
  id v144;
  _QWORD *v145;
  os_log_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  int v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char v154;
  id v155;
  id v156;
  char *v157;
  unint64_t v158;
  NSObject *v159;
  os_log_type_t v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  id v167;
  char *v168;
  NSObject *v169;
  os_log_type_t v170;
  uint8_t *v171;
  uint64_t v172;
  void *v173;
  id v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  _QWORD *v182;
  __int128 v183;
  uint64_t v184;
  void *v185;
  unsigned int v186;
  id v187;
  char isEscapingClosureAtFileLocation;
  char *v189;
  id v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t *v197;
  char *v198;
  char *v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  void (**v207)(char *, os_log_t);
  char *v208;
  os_log_t v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  id v216;
  uint64_t v217;
  __int128 aBlock;
  __int128 v219;
  uint64_t (*v220)();
  uint64_t v221;
  __int128 v222;
  __int128 v223;
  char v224[8];
  _BYTE v225[16];
  uint64_t v226;

  v190 = a1;
  v226 = *MEMORY[0x24BDAC8D0];
  v202 = sub_23B1C545C();
  v200 = *(_QWORD **)(v202 - 8);
  MEMORY[0x24BDAC7A8](v202);
  v201 = (char *)&v189 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = sub_23B1C5570();
  v204 = *(_QWORD *)(v206 - 8);
  MEMORY[0x24BDAC7A8](v206);
  v205 = (char *)&v189 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = sub_23B1C5E4C();
  v210 = *(_QWORD *)(v211 - 8);
  v5 = MEMORY[0x24BDAC7A8](v211);
  v195 = (char *)&v189 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v194 = (char *)&v189 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v198 = (char *)&v189 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v203 = (char *)&v189 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v208 = (char *)&v189 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v196 = (char *)&v189 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v191 = (char *)&v189 - v17;
  v209 = (os_log_t)sub_23B1C5750();
  isa = v209[-1].isa;
  v19 = MEMORY[0x24BDAC7A8](v209);
  v21 = (char *)&v189 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v189 - v22;
  v214 = sub_23B1C5A08();
  v213 = *(_QWORD *)(v214 - 8);
  v24 = MEMORY[0x24BDAC7A8](v214);
  v193 = (char *)&v189 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v192 = (char *)&v189 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v199 = (char *)&v189 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v207 = (void (**)(char *, os_log_t))((char *)&v189 - v31);
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v189 - v32;
  v34 = (void *)sub_23B1C63BC();
  v36 = *a2;
  v35 = (char *)a2[1];
  v197 = a2;
  v37 = (void *)sub_23B1C63BC();
  v38 = objc_msgSend(v34, sel_stringByAppendingPathComponent_, v37);

  sub_23B1C63E0();
  sub_23B1C5918();
  swift_bridgeObjectRelease();
  v39 = v33;
  v40 = v212;
  sub_23B1C5900();
  if (!v40)
  {
    v201 = 0;
    v203 = v35;
    v202 = v36;
    v62 = v208;
    (*((void (**)(char *, char *, os_log_t))isa + 4))(v23, v21, v209);
    result = sub_23B1C56CC();
    if (!*MEMORY[0x24BDBD210])
    {
      __break(1u);
      return result;
    }
    v64 = result;
    if (*(_QWORD *)(result + 16))
    {
      v65 = (id)*MEMORY[0x24BDBD210];
      v66 = sub_23AA88CF8(v65);
      if ((v67 & 1) != 0)
      {
        sub_23AAA15AC(*(_QWORD *)(v64 + 56) + 32 * v66, (uint64_t)&aBlock);
      }
      else
      {
        aBlock = 0u;
        v219 = 0u;
      }

    }
    else
    {
      aBlock = 0u;
      v219 = 0u;
    }
    swift_bridgeObjectRelease();
    v189 = v23;
    if (*((_QWORD *)&v219 + 1))
    {
      sub_23AAA159C(&aBlock, &v223);
      sub_23AAA15AC((uint64_t)&v223, (uint64_t)&aBlock);
      sub_23AA9F52C(0, (unint64_t *)&qword_2542E7568);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v207 = (void (**)(char *, os_log_t))isa;
        v110 = (void *)v222;
        v200 = objc_msgSend((id)v222, sel_integerValue);

        sub_23AA724E8((uint64_t)(v197 + 3), (uint64_t)v224, (uint64_t *)&unk_2542E74F0);
        sub_23AA724E8((uint64_t)v224, (uint64_t)v225, (uint64_t *)&unk_2542E74F0);
        if ((v225[8] & 1) != 0)
        {
          v111 = 0;
          LODWORD(v112) = 1;
        }
        else
        {
          v111 = sub_23ABDDA48();
          v112 = HIDWORD(v111) & 1;
        }
        v148 = (char *)sub_23B1C63BC();
        v149 = sub_23B1C56CC();
        if (*(_QWORD *)(v149 + 16))
        {
          v150 = v112;
          v112 = v111;
          v151 = v148;
          v152 = v148;
          v153 = sub_23AA88CF8(v152);
          if ((v154 & 1) != 0)
          {
            sub_23AAA15AC(*(_QWORD *)(v149 + 56) + 32 * v153, (uint64_t)&aBlock);
          }
          else
          {
            aBlock = 0u;
            v219 = 0u;
          }

          v148 = v151;
          v111 = v112;
          LODWORD(v112) = v150;
        }
        else
        {
          aBlock = 0u;
          v219 = 0u;
        }
        swift_bridgeObjectRelease();
        v208 = v148;
        if (*((_QWORD *)&v219 + 1))
        {
          sub_23AAA159C(&aBlock, &v222);
          sub_23AAA15AC((uint64_t)&v222, (uint64_t)&aBlock);
          if ((swift_dynamicCast() & 1) != 0)
          {
            v205 = (char *)v111;
            v155 = v216;
            LODWORD(v206) = objc_msgSend(v216, sel_unsignedIntValue);

            v156 = (id)fpfs_current_or_default_log();
            v157 = v191;
            sub_23B1C5E58();
            v158 = (unint64_t)v203;
            swift_bridgeObjectRetain_n();
            v159 = sub_23B1C5E40();
            v160 = sub_23B1C6A94();
            if (os_log_type_enabled(v159, v160))
            {
              v161 = swift_slowAlloc();
              v204 = swift_slowAlloc();
              *(_QWORD *)&aBlock = v204;
              *(_DWORD *)v161 = 134218754;
              v216 = v200;
              v212 = v33;
              sub_23B1C6CBC();
              *(_WORD *)(v161 + 12) = 1024;
              v162 = (int)v205;
              if ((_DWORD)v112)
                v163 = 0;
              else
                v163 = (int)v205;
              LODWORD(v216) = v163;
              sub_23B1C6CBC();
              *(_WORD *)(v161 + 18) = 1024;
              LODWORD(v216) = v206;
              sub_23B1C6CBC();
              *(_WORD *)(v161 + 24) = 2082;
              swift_bridgeObjectRetain();
              v216 = (id)sub_23AABEC68(v202, v158, (uint64_t *)&aBlock);
              v39 = (char *)v212;
              sub_23B1C6CBC();
              v164 = (uint64_t)v197;
              sub_23ABE5088((uint64_t)v197);
              sub_23ABE5088(v164);
              sub_23ABE5088(v164);
              _os_log_impl(&dword_23AA66000, v159, v160, "Updating %ld %u %u into database for %{public}s", (uint8_t *)v161, 0x22u);
              v165 = v204;
              swift_arrayDestroy();
              MEMORY[0x23B8614BC](v165, -1, -1);
              MEMORY[0x23B8614BC](v161, -1, -1);

              (*(void (**)(char *, uint64_t))(v210 + 8))(v191, v211);
              v166 = v214;
            }
            else
            {
              v164 = (uint64_t)v197;
              sub_23ABE5088((uint64_t)v197);
              sub_23ABE5088(v164);

              (*(void (**)(char *, uint64_t))(v210 + 8))(v157, v211);
              v166 = v214;
              v162 = (int)v205;
            }
            v181 = swift_allocObject();
            v182 = v200;
            *(_QWORD *)(v181 + 16) = v215;
            *(_QWORD *)(v181 + 24) = v182;
            *(_DWORD *)(v181 + 32) = v162;
            *(_BYTE *)(v181 + 36) = v112;
            *(_DWORD *)(v181 + 40) = v206;
            v183 = *(_OWORD *)(v164 + 16);
            *(_OWORD *)(v181 + 48) = *(_OWORD *)v164;
            *(_OWORD *)(v181 + 64) = v183;
            *(_QWORD *)(v181 + 80) = *(_QWORD *)(v164 + 32);
            v184 = swift_allocObject();
            *(_QWORD *)(v184 + 16) = sub_23ABE50DC;
            *(_QWORD *)(v184 + 24) = v181;
            v220 = sub_23AA956C8;
            v221 = v184;
            *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
            *((_QWORD *)&aBlock + 1) = 1107296256;
            *(_QWORD *)&v219 = sub_23AA9432C;
            *((_QWORD *)&v219 + 1) = &block_descriptor_62;
            v185 = _Block_copy(&aBlock);
            sub_23ABE5118(v164);
            swift_retain();
            swift_retain();
            swift_release();
            *(_QWORD *)&aBlock = 0;
            v186 = objc_msgSend(v190, sel_executeSwift_error_, v185, &aBlock);
            _Block_release(v185);
            v187 = (id)aBlock;
            isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
            swift_release();
            if ((isEscapingClosureAtFileLocation & 1) != 0)
              __break(1u);
            if (!v186)
            {
              sub_23B1C587C();

              swift_willThrow();
            }

            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v222);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v223);
            v207[1](v189, v209);
            (*(void (**)(char *, uint64_t))(v213 + 8))(v39, v166);
            return swift_release();
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v222);
        }
        else
        {
          sub_23AA8A05C((uint64_t)&aBlock, qword_2542E5640);
        }
        v167 = (id)fpfs_current_or_default_log();
        v168 = v196;
        sub_23B1C5E58();
        swift_retain_n();
        v169 = sub_23B1C5E40();
        v170 = sub_23B1C6AA0();
        if (os_log_type_enabled(v169, v170))
        {
          v171 = (uint8_t *)swift_slowAlloc();
          v172 = swift_slowAlloc();
          v212 = (_QWORD *)v172;
          *(_DWORD *)v171 = 136315138;
          *(_QWORD *)&aBlock = v172;
          v203 = (char *)(v171 + 4);
          v173 = (void *)sub_23B1C5954();
          v174 = objc_msgSend(v173, sel_fp_shortDescription);

          v175 = sub_23B1C63E0();
          v177 = v176;

          *(_QWORD *)&v222 = sub_23AABEC68(v175, v177, (uint64_t *)&aBlock);
          v123 = v209;
          sub_23B1C6CBC();
          swift_release_n();
          v39 = v33;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_23AA66000, v169, v170, "Failed to get the gen count for %s", v171, 0xCu);
          v178 = v212;
          swift_arrayDestroy();
          MEMORY[0x23B8614BC](v178, -1, -1);
          MEMORY[0x23B8614BC](v171, -1, -1);

          (*(void (**)(char *, uint64_t))(v210 + 8))(v196, v211);
          v125 = v214;
          v126 = v213;
          isa = (Class)v207;
          v179 = v206;
          v180 = v205;
        }
        else
        {

          swift_release_n();
          (*(void (**)(char *, uint64_t))(v210 + 8))(v168, v211);
          v125 = v214;
          v126 = v213;
          isa = (Class)v207;
          v179 = v206;
          v180 = v205;
          v123 = v209;
        }
        LODWORD(aBlock) = 2;
        sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
        sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
        sub_23B1C5864();
        sub_23B1C5558();
        (*(void (**)(char *, uint64_t))(v204 + 8))(v180, v179);
        swift_willThrow();

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v223);
LABEL_58:
        (*((void (**)(char *, os_log_t))isa + 1))(v189, v123);
        return (*(uint64_t (**)(char *, uint64_t))(v126 + 8))(v39, v125);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v223);
    }
    else
    {
      sub_23AA8A05C((uint64_t)&aBlock, qword_2542E5640);
    }
    v113 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    swift_retain_n();
    v114 = sub_23B1C5E40();
    v115 = sub_23B1C6AA0();
    if (os_log_type_enabled(v114, v115))
    {
      v116 = (uint8_t *)swift_slowAlloc();
      v117 = swift_slowAlloc();
      v207 = (void (**)(char *, os_log_t))isa;
      v212 = (_QWORD *)v117;
      *(_DWORD *)v116 = 136315138;
      *(_QWORD *)&aBlock = v117;
      v203 = (char *)(v116 + 4);
      v118 = (void *)sub_23B1C5954();
      v119 = objc_msgSend(v118, sel_fp_shortDescription);

      v120 = sub_23B1C63E0();
      v122 = v121;

      *(_QWORD *)&v223 = sub_23AABEC68(v120, v122, (uint64_t *)&aBlock);
      v123 = v209;
      sub_23B1C6CBC();
      swift_release_n();
      v39 = v33;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23AA66000, v114, v115, "Failed to get canonical path for %s", v116, 0xCu);
      v124 = v212;
      swift_arrayDestroy();
      isa = (Class)v207;
      MEMORY[0x23B8614BC](v124, -1, -1);
      MEMORY[0x23B8614BC](v116, -1, -1);

      (*(void (**)(char *, uint64_t))(v210 + 8))(v208, v211);
      v125 = v214;
      v126 = v213;
      v127 = v206;
      v128 = v205;
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v210 + 8))(v62, v211);
      v125 = v214;
      v126 = v213;
      v127 = v206;
      v128 = v205;
      v123 = v209;
    }
    LODWORD(aBlock) = 2;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
    sub_23B1C5864();
    sub_23B1C5558();
    (*(void (**)(char *, uint64_t))(v204 + 8))(v128, v127);
    swift_willThrow();
    goto LABEL_58;
  }
  v41 = v40;
  LODWORD(aBlock) = sub_23B1C54F8();
  sub_23AB6CD48();
  v42 = sub_23B1C575C();

  if ((v42 & 1) != 0)
  {

    v43 = (id)fpfs_current_or_default_log();
    v44 = v203;
    sub_23B1C5E58();
    v45 = v213;
    v46 = v207;
    v47 = v214;
    (*(void (**)(void (**)(char *, os_log_t), char *, uint64_t))(v213 + 16))(v207, v33, v214);
    v48 = sub_23B1C5E40();
    v49 = sub_23B1C6AA0();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc();
      v51 = swift_slowAlloc();
      *(_QWORD *)&aBlock = v51;
      *(_DWORD *)v50 = 136315138;
      v215 = (uint64_t)(v50 + 4);
      v52 = (void *)sub_23B1C5954();
      v53 = objc_msgSend(v52, sel_fp_shortDescription);
      v212 = v39;
      v54 = v53;

      v55 = sub_23B1C63E0();
      v57 = v56;

      *(_QWORD *)&v223 = sub_23AABEC68(v55, v57, (uint64_t *)&aBlock);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      v58 = *(uint64_t (**)(char *, uint64_t))(v213 + 8);
      v59 = v214;
      v58((char *)v207, v214);
      _os_log_impl(&dword_23AA66000, v48, v49, "Failed to populate new columns. ENOENT %s does not exist.", v50, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v51, -1, -1);
      MEMORY[0x23B8614BC](v50, -1, -1);

      (*(void (**)(char *, uint64_t))(v210 + 8))(v44, v211);
      v60 = (char *)v212;
      v61 = v59;
      return v58(v60, v61);
    }

    v89 = *(uint64_t (**)(char *, uint64_t))(v45 + 8);
    v89((char *)v46, v47);
    (*(void (**)(char *, uint64_t))(v210 + 8))(v44, v211);
    v90 = v33;
    v91 = v47;
    return v89(v90, v91);
  }
  v68 = v33;
  v69 = v40;
  v70 = v201;
  sub_23B1C536C();
  sub_23AA7E38C((unint64_t *)&qword_2569E29D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEB0], MEMORY[0x24BDCAEA8]);
  v71 = v202;
  v72 = sub_23B1C575C();

  v73 = (void (*)(char *, uint64_t))v200[1];
  v73(v70, v71);
  v74 = v214;
  v75 = v213;
  if ((v72 & 1) != 0)
  {

    v76 = (id)fpfs_current_or_default_log();
    v77 = v198;
    sub_23B1C5E58();
    v78 = v199;
    (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v199, v68, v74);
    v79 = sub_23B1C5E40();
    v80 = sub_23B1C6AA0();
    if (os_log_type_enabled(v79, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc();
      v82 = swift_slowAlloc();
      *(_QWORD *)&aBlock = v82;
      *(_DWORD *)v81 = 136315138;
      v215 = (uint64_t)(v81 + 4);
      v83 = (void *)sub_23B1C5954();
      v84 = objc_msgSend(v83, sel_fp_shortDescription);

      v85 = sub_23B1C63E0();
      v212 = v68;
      v87 = v86;

      *(_QWORD *)&v223 = sub_23AABEC68(v85, v87, (uint64_t *)&aBlock);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      v58 = *(uint64_t (**)(char *, uint64_t))(v213 + 8);
      v88 = v214;
      v58(v199, v214);
      _os_log_impl(&dword_23AA66000, v79, v80, "Failed to populate new columns. fileNoSuchFile %s does not exist.", v81, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v82, -1, -1);
      MEMORY[0x23B8614BC](v81, -1, -1);

      (*(void (**)(char *, uint64_t))(v210 + 8))(v77, v211);
      v60 = (char *)v212;
      v61 = v88;
      return v58(v60, v61);
    }

    v89 = *(uint64_t (**)(char *, uint64_t))(v75 + 8);
    v89(v78, v74);
    (*(void (**)(char *, uint64_t))(v210 + 8))(v77, v211);
    goto LABEL_39;
  }
  v92 = v40;
  sub_23B1C5384();
  v93 = sub_23B1C575C();

  v73(v70, v71);
  if ((v93 & 1) != 0)
  {

    v94 = (id)fpfs_current_or_default_log();
    v95 = v194;
    sub_23B1C5E58();
    v96 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
    v97 = v75;
    v98 = v192;
    v96(v192, v68, v74);
    v99 = sub_23B1C5E40();
    v100 = sub_23B1C6AA0();
    if (os_log_type_enabled(v99, v100))
    {
      v101 = swift_slowAlloc();
      v215 = swift_slowAlloc();
      *(_QWORD *)&aBlock = v215;
      *(_DWORD *)v101 = 136315138;
      v209 = (os_log_t)(v101 + 4);
      v102 = (void *)sub_23B1C5954();
      v103 = objc_msgSend(v102, sel_fp_shortDescription);
      v212 = v68;
      v104 = v103;

      v105 = sub_23B1C63E0();
      v106 = v74;
      v108 = v107;

      *(_QWORD *)&v223 = sub_23AABEC68(v105, v108, (uint64_t *)&aBlock);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      v58 = *(uint64_t (**)(char *, uint64_t))(v213 + 8);
      v58(v98, v106);
      _os_log_impl(&dword_23AA66000, v99, v100, "Failed to populate new columns. fileReadNoSuchFile %s does not exist.", (uint8_t *)v101, 0xCu);
      v109 = v215;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v109, -1, -1);
      MEMORY[0x23B8614BC](v101, -1, -1);

      (*(void (**)(char *, uint64_t))(v210 + 8))(v194, v211);
      v60 = (char *)v212;
      v61 = v106;
      return v58(v60, v61);
    }

    v89 = *(uint64_t (**)(char *, uint64_t))(v97 + 8);
    v89(v98, v74);
    (*(void (**)(char *, uint64_t))(v210 + 8))(v95, v211);
LABEL_39:
    v90 = v68;
    v91 = v74;
    return v89(v90, v91);
  }
  v129 = (id)fpfs_current_or_default_log();
  v130 = v195;
  sub_23B1C5E58();
  v131 = v193;
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v193, v33, v74);
  v132 = v40;
  v133 = v40;
  v134 = sub_23B1C5E40();
  v135 = sub_23B1C6AA0();
  if (os_log_type_enabled(v134, v135))
  {
    v136 = swift_slowAlloc();
    v212 = (_QWORD *)swift_slowAlloc();
    v215 = swift_slowAlloc();
    *(_QWORD *)&aBlock = v215;
    *(_DWORD *)v136 = 136315394;
    v137 = (void *)sub_23B1C5954();
    v138 = objc_msgSend(v137, sel_fp_shortDescription);

    v139 = sub_23B1C63E0();
    v209 = v134;
    v140 = v131;
    v142 = v141;

    *(_QWORD *)&v223 = sub_23AABEC68(v139, v142, (uint64_t *)&aBlock);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    v143 = *(void (**)(char *, uint64_t))(v213 + 8);
    v143(v140, v214);
    *(_WORD *)(v136 + 12) = 2112;
    swift_getErrorValue();
    v144 = sub_23B0D9CF0(v217);
    *(_QWORD *)&v223 = v144;
    v74 = v214;
    sub_23B1C6CBC();
    v145 = v212;
    *v212 = v144;

    v146 = v209;
    _os_log_impl(&dword_23AA66000, v209, v135, "Failed to populate new columns for %s: %@", (uint8_t *)v136, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v145, -1, -1);
    v147 = v215;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v147, -1, -1);
    MEMORY[0x23B8614BC](v136, -1, -1);

    (*(void (**)(char *, uint64_t))(v210 + 8))(v195, v211);
  }
  else
  {
    v143 = *(void (**)(char *, uint64_t))(v75 + 8);
    v143(v131, v74);

    (*(void (**)(char *, uint64_t))(v210 + 8))(v130, v211);
  }
  swift_willThrow();
  return ((uint64_t (*)(char *, uint64_t))v143)(v33, v74);
}

uint64_t sub_23ABE25E0(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v9 = objc_msgSend(a1, sel_bindLongParameter_, a3);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AC38FE8(a4 | ((HIDWORD(a4) & 1) << 32));
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v10 = objc_msgSend(a1, sel_bindUnsignedIntegerParameter_, a5);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v11 = (void *)sub_23B1C63BC();
  v12 = objc_msgSend(a1, sel_bindStringParameter_, v11);

  sub_23B1C63E0();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

void sub_23ABE2824(void *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v7;
  void *v8;
  id v9;
  id v10;
  char isEscapingClosureAtFileLocation;
  char **v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  unsigned __int8 v19;
  id v20;
  unsigned int v21;
  _BYTE *v22;
  id v23;
  void *v24;
  id aBlock[6];
  uint64_t v26[4];
  unsigned __int8 v27;
  unsigned int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = sub_23ABE4BB0;
  v7[3] = a2;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v7;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_45;
  v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v24 = a1;
  v9 = objc_msgSend(a1, sel_fetchSwift_error_, v8, aBlock);
  _Block_release(v8);
  v10 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v9)
  {
    v22 = a3;
    if (objc_msgSend(v9, sel_next))
    {
      v12 = &selRef_defaultManager;
      v23 = v9;
      while (1)
      {
        v13 = v9;
        v14 = objc_msgSend(v13, sel_stringAtIndex_, 0);
        v15 = sub_23B1C63E0();
        v17 = v16;

        v18 = objc_msgSend(v13, v12[418], 1);
        v19 = objc_msgSend(v13, sel_isNullAtIndex_, 2);
        v20 = (v19 & 1) != 0 ? 0 : objc_msgSend(v13, v12[418], 2);
        v21 = objc_msgSend(v13, sel_unsignedIntAtIndex_, 3);

        v26[0] = v15;
        v26[1] = v17;
        v26[2] = (uint64_t)v18;
        v26[3] = (uint64_t)v20;
        v27 = v19;
        v28 = v21;
        sub_23ABE0A68(v24, v26);
        if (v3)
          break;
        swift_bridgeObjectRelease();
        v9 = v23;
        v12 = &selRef_defaultManager;
        if ((objc_msgSend(v13, sel_next) & 1) == 0)
          goto LABEL_10;
      }
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_10:
      swift_release();

      *v22 = 1;
    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
}

uint64_t sub_23ABE2AFC()
{
  _QWORD v1[2];

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "SELECT *\nFROM ");
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return v1[0];
}

uint64_t sub_23ABE2BB0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  id v13;
  char isEscapingClosureAtFileLocation;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned __int8 v18;
  id v19;
  uint64_t result;
  void *v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)();
  void *v32;
  id v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  _QWORD *v38;
  id v39;
  char *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id aBlock;
  uint64_t v48;
  id (*v49)(uint64_t, void *);
  void *v50;
  uint64_t (*v51)();
  uint64_t v52;
  uint64_t v53;

  v41 = a3;
  v53 = *MEMORY[0x24BDAC8D0];
  v5 = sub_23B1C5E4C();
  v42 = *(_QWORD *)(v5 - 8);
  v43 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v40 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v40 - v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_23ABE4B80;
  *(_QWORD *)(v10 + 24) = a2;
  v51 = sub_23AA956C8;
  v52 = v10;
  aBlock = (id)MEMORY[0x24BDAC760];
  v48 = 1107296256;
  v49 = sub_23AA9432C;
  v50 = &block_descriptor_31;
  v11 = _Block_copy(&aBlock);
  v44 = a2;
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v12 = objc_msgSend(a1, sel_executeSwift_error_, v11, &aBlock);
  _Block_release(v11);
  v13 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (!v12)
  {
    v21 = (void *)sub_23B1C587C();

    swift_willThrow();
    v22 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v23 = v21;
    v24 = sub_23B1C5E40();
    v25 = sub_23B1C6AA0();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v26 = 138412290;
      swift_getErrorValue();
      v28 = sub_23B0D9CF0(v46);
      aBlock = v28;
      sub_23B1C6CBC();
      *v27 = v28;

      _os_log_impl(&dword_23AA66000, v24, v25, "Failed to create file_id_gen_count_index: %@", v26, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v27, -1, -1);
      MEMORY[0x23B8614BC](v26, -1, -1);
    }
    else
    {

    }
    v30 = v42;
    v29 = v43;

    v31 = 0;
    goto LABEL_14;
  }
  v15 = swift_allocObject();
  v16 = v44;
  *(_QWORD *)(v15 + 16) = sub_23ABE4B98;
  *(_QWORD *)(v15 + 24) = v16;
  v51 = sub_23AA956C8;
  v52 = v15;
  aBlock = (id)MEMORY[0x24BDAC760];
  v48 = 1107296256;
  v49 = sub_23AA9432C;
  v50 = &block_descriptor_38;
  v17 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v18 = objc_msgSend(a1, sel_executeSwift_error_, v17, &aBlock);
  _Block_release(v17);
  v19 = aBlock;
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v17 & 1) != 0)
LABEL_16:
    __break(1u);
  if ((v18 & 1) != 0)
  {
    result = swift_release_n();
    *v41 = 1;
    return result;
  }
  v9 = v40;
  v32 = (void *)sub_23B1C587C();

  swift_willThrow();
  v33 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v34 = v32;
  v35 = sub_23B1C5E40();
  v36 = sub_23B1C6AA0();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc();
    v38 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v37 = 138412290;
    swift_getErrorValue();
    v39 = sub_23B0D9CF0(v45);
    aBlock = v39;
    sub_23B1C6CBC();
    *v38 = v39;

    _os_log_impl(&dword_23AA66000, v35, v36, "Failed to create doc_id_index: %@", v37, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v38, -1, -1);
    MEMORY[0x23B8614BC](v37, -1, -1);
  }
  else
  {

  }
  v30 = v42;
  v29 = v43;

  v31 = sub_23ABE4B98;
LABEL_14:
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v29);
  swift_willThrow();
  swift_release();
  return sub_23AAB7948((uint64_t)v31);
}

uint64_t sub_23ABE3174()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23ABE322C()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

unint64_t sub_23ABE32D8@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t result;
  _QWORD v6[3];
  int v7;

  v6[2] = a1;
  v7 = a2;
  result = sub_23ABE3668((uint64_t)sub_23ABE3430, (uint64_t)v6);
  if (!v3)
  {
    *(_DWORD *)a3 = result;
    *(_BYTE *)(a3 + 4) = BYTE4(result) & 1;
  }
  return result;
}

unint64_t sub_23ABE3328(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = objc_msgSend(a1, sel_bindUnsignedIntegerParameter_, a3);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0xD000000000000017;
}

unint64_t sub_23ABE3430(void *a1)
{
  uint64_t v1;

  return sub_23ABE3328(a1, *(_QWORD *)(v1 + 16), *(unsigned int *)(v1 + 24));
}

_QWORD *sub_23ABE343C(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD *v5;
  void *v6;
  id v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = a1;
  v5[3] = a2;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v5;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_24;
  v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v7 = objc_msgSend(v2, sel_fetchSwift_error_, v6, aBlock);
  _Block_release(v6);
  v8 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v7)
  {
    if ((objc_msgSend(v7, sel_next) & 1) != 0
      && (objc_msgSend(v7, sel_isNullAtIndex_, 0) & 1) == 0)
    {
      if (objc_msgSend(v7, sel_isNullAtIndex_, 0))
        sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
      if (swift_dynamicCastMetatype())
        sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
      v5 = objc_msgSend(v7, sel_longAtIndex_, 0);
    }
    else
    {
      v5 = 0;
    }

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  return v5;
}

unint64_t sub_23ABE3668(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD *v5;
  void *v6;
  id v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned int v13;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = a1;
  v5[3] = a2;
  aBlock[4] = sub_23AA698D4;
  aBlock[5] = v5;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_3;
  v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v7 = objc_msgSend(v2, sel_fetchSwift_error_, v6, aBlock);
  _Block_release(v6);
  v8 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v7)
  {
    if ((objc_msgSend(v7, sel_next) & 1) != 0
      && (objc_msgSend(v7, sel_isNullAtIndex_, 0) & 1) == 0)
    {
      if (objc_msgSend(v7, sel_isNullAtIndex_, 0))
        sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
      if (swift_dynamicCastMetatype())
        sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
      v13 = objc_msgSend(v7, sel_unsignedIntAtIndex_, 0);

      v11 = 0;
      v10 = v13;
    }
    else
    {

      v10 = 0;
      v11 = 1;
    }
    LOBYTE(aBlock[0]) = v11;
    return v10 | ((unint64_t)v11 << 32);
  }
  else
  {
    sub_23B1C587C();

    return swift_willThrow();
  }
}

uint64_t sub_23ABE38A0()
{
  return swift_deallocObject();
}

_QWORD *sub_23ABE38B0(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD *v5;
  void *v6;
  id v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = a1;
  v5[3] = a2;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v5;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_7;
  v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v7 = objc_msgSend(v2, sel_fetchSwift_error_, v6, aBlock);
  _Block_release(v6);
  v8 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v7)
  {
    if ((objc_msgSend(v7, sel_next) & 1) != 0
      && (objc_msgSend(v7, sel_isNullAtIndex_, 0) & 1) == 0)
    {
      if (objc_msgSend(v7, sel_isNullAtIndex_, 0))
        sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
      if (swift_dynamicCastMetatype())
        sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
      v5 = objc_msgSend(v7, sel_unsignedLongLongAtIndex_, 0);
    }
    else
    {
      v5 = 0;
    }

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  return v5;
}

_QWORD *sub_23ABE3ADC(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD *v5;
  void *v6;
  id v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = a1;
  v5[3] = a2;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v5;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_122;
  v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v7 = objc_msgSend(v2, sel_fetchSwift_error_, v6, aBlock);
  _Block_release(v6);
  v8 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v7)
  {
    if ((objc_msgSend(v7, sel_next) & 1) != 0
      && (objc_msgSend(v7, sel_isNullAtIndex_, 0) & 1) == 0)
    {
      if (objc_msgSend(v7, sel_isNullAtIndex_, 0))
        sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
      if (swift_dynamicCastMetatype())
        sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
      v5 = objc_msgSend(v7, sel_longLongAtIndex_, 0);
    }
    else
    {
      v5 = 0;
    }

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  return v5;
}

_QWORD *sub_23ABE3D08@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  char v7;
  _QWORD *v8;
  _QWORD v9[4];

  v9[3] = a2;
  v9[2] = a1;
  result = sub_23ABE38B0((uint64_t)sub_23ABE466C, (uint64_t)v9);
  if (!v3)
  {
    if ((v7 & 1) != 0)
      v8 = a2;
    else
      v8 = result;
    *a3 = v8;
  }
  return result;
}

unint64_t sub_23ABE3D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AC38E28(a3, 0);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0xD000000000000018;
}

void sub_23ABE3E44(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  id v15;
  char isEscapingClosureAtFileLocation;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  id v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  id aBlock[7];

  v29 = a5;
  v27 = a4;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v28 = sub_23B1C5E4C();
  v8 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = sub_23ABE4684;
  v12[3] = v11;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v12;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_17;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v14 = objc_msgSend(a1, sel_fetchSwift_error_, v13, aBlock);
  _Block_release(v13);
  v15 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v14)
  {
    if (!objc_msgSend(v14, sel_next)
      || (objc_msgSend(v14, sel_isNullAtIndex_, 0) & 1) != 0
      || (objc_msgSend(v14, sel_isNullAtIndex_, 1) & 1) != 0
      || (objc_msgSend(v14, sel_isNullAtIndex_, 2) & 1) != 0)
    {
      v17 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      v18 = sub_23B1C5E40();
      v19 = sub_23B1C6AA0();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v20 = 134217984;
        aBlock[0] = a3;
        sub_23B1C6CBC();
        _os_log_impl(&dword_23AA66000, v18, v19, "Failed to find new fileID for %llu", v20, 0xCu);
        MEMORY[0x23B8614BC](v20, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v28);
      swift_release();
      v21 = v29;
      *v29 = a3;
      *((_DWORD *)v21 + 2) = 0;
      *((_BYTE *)v21 + 12) = 0;
    }
    else
    {
      v22 = objc_msgSend(v14, sel_unsignedLongLongAtIndex_, 0);
      v23 = objc_msgSend(v14, sel_unsignedIntAtIndex_, 1);
      v24 = objc_msgSend(v14, sel_unsignedIntAtIndex_, 2);
      swift_release();

      v25 = v29;
      *v29 = v22;
      if (v24 == v27)
        *((_DWORD *)v25 + 2) = v23;
      else
        *((_DWORD *)v25 + 2) = 0;
      *((_BYTE *)v25 + 12) = 1;
    }
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
}

void sub_23ABE41DC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  id v15;
  char isEscapingClosureAtFileLocation;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  id aBlock[7];

  v24 = a4;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v7 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v7);
  v8 = sub_23B1C5474();
  v23 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = sub_23ABE52E8;
  v12[3] = v11;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v12;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_115;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v14 = objc_msgSend(a1, sel_fetchSwift_error_, v13, aBlock);
  _Block_release(v13);
  v15 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v14)
  {
    if (objc_msgSend(v14, sel_next))
    {
      if (!objc_msgSend(v14, sel_isNullAtIndex_, 0))
      {
        if (swift_dynamicCastMetatype())
          goto LABEL_14;
        v17 = objc_msgSend(v14, sel_stringAtIndex_, 0);
        v18 = sub_23B1C63E0();
        v20 = v19;

        if (!objc_msgSend(v14, sel_isNullAtIndex_, 1))
        {
          if (!swift_dynamicCastMetatype())
          {
            v21 = objc_msgSend(v14, sel_unsignedIntAtIndex_, 1);
            swift_release();

            v22 = v24;
            *v24 = v18;
            v22[1] = v20;
            *((_DWORD *)v22 + 4) = v21;
            return;
          }
LABEL_14:
          sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
        }
      }
      sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
    }
    sub_23B1C536C();
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
    sub_23B1C5864();
    sub_23B1C5354();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
    swift_willThrow();
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
}

uint64_t sub_23ABE4590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AC38E28(a3, 0);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

unint64_t sub_23ABE466C(uint64_t a1)
{
  uint64_t v1;

  return sub_23ABE3D60(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23ABE4674()
{
  return swift_deallocObject();
}

uint64_t sub_23ABE4684(uint64_t a1)
{
  uint64_t v1;

  return sub_23ABE4590(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23ABE46B8()
{
  return swift_deallocObject();
}

void sub_23ABE46C8(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  id v15;
  char isEscapingClosureAtFileLocation;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  id aBlock[7];

  v24 = a4;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v7 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v7);
  v8 = sub_23B1C5474();
  v23 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_DWORD *)(v11 + 24) = a3;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = sub_23ABE52A8;
  v12[3] = v11;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v12;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_105;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v14 = objc_msgSend(a1, sel_fetchSwift_error_, v13, aBlock);
  _Block_release(v13);
  v15 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v14)
  {
    if (objc_msgSend(v14, sel_next))
    {
      if (!objc_msgSend(v14, sel_isNullAtIndex_, 0))
      {
        if (swift_dynamicCastMetatype())
          goto LABEL_14;
        v17 = objc_msgSend(v14, sel_stringAtIndex_, 0);
        v18 = sub_23B1C63E0();
        v20 = v19;

        if (!objc_msgSend(v14, sel_isNullAtIndex_, 1))
        {
          if (!swift_dynamicCastMetatype())
          {
            v21 = objc_msgSend(v14, sel_unsignedIntAtIndex_, 1);
            swift_release();

            v22 = v24;
            *v24 = v18;
            v22[1] = v20;
            *((_DWORD *)v22 + 4) = v21;
            return;
          }
LABEL_14:
          sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
        }
      }
      sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
    }
    sub_23B1C536C();
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
    sub_23B1C5864();
    sub_23B1C5354();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
    swift_willThrow();
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
}

uint64_t sub_23ABE4A80(uint64_t a1, uint64_t a2, unsigned int a3)
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AC38FE8(a3);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23ABE4B70()
{
  return swift_deallocObject();
}

uint64_t sub_23ABE4B80()
{
  return sub_23ABE3174();
}

uint64_t sub_23ABE4B88()
{
  return swift_deallocObject();
}

uint64_t sub_23ABE4B98()
{
  return sub_23ABE322C();
}

uint64_t sub_23ABE4BA0()
{
  return swift_deallocObject();
}

uint64_t sub_23ABE4BB0()
{
  return sub_23ABE2AFC();
}

uint64_t sub_23ABE4BB8()
{
  return swift_deallocObject();
}

uint64_t sub_23ABE4BC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  char *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  void *v9[3];
  char v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2569E6520);
  sub_23AAB5A28(&qword_2569E2710, (uint64_t *)&unk_2569E6520, (uint64_t)&unk_23B1D15E8);
  result = sub_23B1C68B4();
  v11 = result;
  if (v2)
  {
    v4 = (char *)(a1 + 56);
    do
    {
      v5 = (void *)*((_QWORD *)v4 - 3);
      v6 = (void *)*((_QWORD *)v4 - 2);
      v7 = (void *)*((_QWORD *)v4 - 1);
      v8 = *v4;
      v4 += 32;
      sub_23AAFA44C(v5, v6, v7, v8);
      sub_23ADE12C8((uint64_t)v9, v5, (uint64_t)v6, v7, v8);
      sub_23ABE4D94(v9[0], v9[1], v9[2], v10);
      --v2;
    }
    while (v2);
    return v11;
  }
  return result;
}

uint64_t sub_23ABE4CA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[48];
  uint64_t v6;
  _BYTE v7[48];

  v2 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E05B0);
  sub_23AAB5A28((unint64_t *)&unk_2542E05A0, (uint64_t *)&unk_2542E05B0, (uint64_t)&unk_23B1D15E8);
  result = sub_23B1C68B4();
  v6 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      sub_23AA724E8(v4, (uint64_t)v7, (uint64_t *)&unk_2542E05B0);
      sub_23ADE15DC((uint64_t)v5, (uint64_t)v7);
      v4 += 48;
      --v2;
    }
    while (v2);
    return v6;
  }
  return result;
}

uint64_t sub_23ABE4D58(uint64_t a1)
{
  return sub_23ABE4FD4(a1, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (unint64_t *)&unk_2542E1F50, (uint64_t)&unk_23B1CB368, (void (*)(id *, void *))sub_23ADE0CBC);
}

uint64_t sub_23ABE4D7C()
{
  return sub_23ABDEF74();
}

uint64_t sub_23ABE4D84()
{
  return swift_deallocObject();
}

void sub_23ABE4D94(void *a1, void *a2, void *a3, char a4)
{
  switch(a4)
  {
    case 0:
    case 3:
    case 4:
      goto LABEL_4;
    case 1:

      a1 = a2;
      a2 = a3;
      goto LABEL_3;
    case 2:
LABEL_3:

      a1 = a2;
LABEL_4:

      break;
    default:
      return;
  }
}

uint64_t sub_23ABE4DF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_23B1C68B4();
  v7 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_23ADE0CD0(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_23ABE4E64(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_23B1C68B4();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_23ADE0B10(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_23ABE4EF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  char *v4;
  void *v5;
  uint64_t v6;
  char v7;
  id v8[3];
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2718);
  sub_23AAB5A28(&qword_2569E2720, &qword_2569E2718, (uint64_t)&unk_23B1E31A0);
  result = sub_23B1C68B4();
  v9 = result;
  if (v2)
  {
    v4 = (char *)(a1 + 48);
    do
    {
      v5 = (void *)*((_QWORD *)v4 - 2);
      v6 = *((_QWORD *)v4 - 1);
      v7 = *v4;
      v4 += 24;
      sub_23ADE0F28((uint64_t)v8, v5, v6, v7);

      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

uint64_t sub_23ABE4FB0(uint64_t a1)
{
  return sub_23ABE4FD4(a1, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderItemIdentifier, &qword_2542E7530, (uint64_t)&unk_23B1CC88C, (void (*)(id *, void *))sub_23ADE0CE4);
}

uint64_t sub_23ABE4FD4(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4, void (*a5)(id *, void *))
{
  uint64_t v10;
  uint64_t result;
  void **v12;
  void *v13;
  id v14;
  uint64_t v15;

  v10 = *(_QWORD *)(a1 + 16);
  a2(0);
  sub_23AA7E38C(a3, a2, a4);
  result = sub_23B1C68B4();
  v15 = result;
  if (v10)
  {
    v12 = (void **)(a1 + 32);
    do
    {
      v13 = *v12++;
      a5(&v14, v13);

      --v10;
    }
    while (v10);
    return v15;
  }
  return result;
}

uint64_t sub_23ABE5088(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23ABE50B0()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23ABE50DC(void *a1)
{
  uint64_t v1;

  return sub_23ABE25E0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned int *)(v1 + 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 36) << 32), *(unsigned int *)(v1 + 40));
}

uint64_t sub_23ABE5108()
{
  return swift_deallocObject();
}

uint64_t sub_23ABE5118(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23ABE5140()
{
  uint64_t v0;

  return sub_23ABE028C(v0);
}

uint64_t sub_23ABE5148()
{
  return swift_deallocObject();
}

uint64_t sub_23ABE5158()
{
  return sub_23ABE09B0();
}

uint64_t sub_23ABE5160()
{
  return swift_deallocObject();
}

uint64_t sub_23ABE5170@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_23ABDFA9C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_23ABE5188()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23ABE51B4(void *a1)
{
  uint64_t v1;

  return sub_23ABDFF20(a1, *(_QWORD *)(v1 + 16), v1 + 24);
}

uint64_t sub_23ABE51C0()
{
  return swift_deallocObject();
}

uint64_t sub_23ABE51D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_23B1C5A08();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

id sub_23ABE5244()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_23B1C5A08() - 8) + 80);
  return sub_23ABDF29C(*(void **)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_23ABE5274()
{
  return swift_deallocObject();
}

uint64_t sub_23ABE5284()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23ABE52A8(uint64_t a1)
{
  uint64_t v1;

  return sub_23ABE4A80(a1, *(_QWORD *)(v1 + 16), *(_DWORD *)(v1 + 24));
}

uint64_t sub_23ABE52B4()
{
  return swift_deallocObject();
}

uint64_t sub_23ABE52C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23ABE52E8(uint64_t a1)
{
  uint64_t v1;

  return sub_23ABE4590(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23ABE531C()
{
  return swift_deallocObject();
}

uint64_t sub_23ABE532C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DDDB0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v13 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  sub_23AAB5A28(&qword_2569E2728, &qword_2542DDDB0, (uint64_t)&unk_23B1DFD28);
  result = sub_23B1C68B4();
  v14 = result;
  if (v9)
  {
    v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v12 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_23ABE544C(v11, (uint64_t)v6);
      sub_23ADE1930((uint64_t)v8, (uint64_t)v6);
      sub_23AA8A05C((uint64_t)v8, &qword_2542DDDB0);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v14;
  }
  return result;
}

uint64_t sub_23ABE544C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DDDB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23ABE5494()
{
  return swift_deallocObject();
}

uint64_t sub_23ABE5518()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23ABE5590()
{
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23AB55910();
  sub_23B1C659C();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

void sub_23ABE5620()
{
  qword_2542EDC58 = (uint64_t)&unk_250BDE7F8;
}

void sub_23ABE5634()
{
  JUMPOUT(0x23ABE58E8);
}

unint64_t sub_23ABE6AB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v5;
  unint64_t result;

  v5 = *(_BYTE *)(v2 + 24);
  *(_QWORD *)(a2 + 24) = &type metadata for SQLItemJobID;
  result = sub_23ABF67DC();
  *(_QWORD *)(a2 + 32) = result;
  *(_QWORD *)a2 = a1;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_23ABE6B00(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;

  v3 = v2;
  v4 = *(uint64_t (**)(uint64_t))(v1 + 80);
  if (!v4)
    return result;
  v5 = result;
  v6 = swift_retain();
  v7 = v4(v6);
  result = sub_23AAB7948((uint64_t)v4);
  if (!v7)
    return result;
  v8 = *(void **)(v5 + 88);
  v9 = *(void **)(v5 + 96);
  v10 = *(unsigned __int8 *)(v5 + 104);
  if (*(_BYTE *)(v5 + 104))
  {
    if (v10 != 1)
      goto LABEL_12;
    v11 = *(void (**)(uint64_t))(*(_QWORD *)v7 + 304);
    v12 = swift_retain();
    v11(v12);
    goto LABEL_11;
  }
  if ((v8 & 0x200000) != 0)
  {
    v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 344);
    v15 = swift_retain();
    v13 = v14(v15);
    if ((v8 & 0x1000000) != 0)
      goto LABEL_8;
LABEL_11:
    sub_23AAAEE10(v8, v9, v10);
    goto LABEL_12;
  }
  v13 = swift_retain();
  if ((v8 & 0x1000000) == 0)
    goto LABEL_11;
LABEL_8:
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 552))(v13);
  sub_23AAAEE10(v8, v9, 0);
  if (!v3)
LABEL_12:
    type metadata accessor for Materialization.MaterializeItem();
  return swift_release();
}

uint64_t sub_23ABE6CB8(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(uint64_t (**)(uint64_t))(v1 + 80);
  if (v2)
  {
    v3 = result;
    v4 = swift_retain();
    v5 = v2(v4);
    result = sub_23AAB7948((uint64_t)v2);
    if (v5)
    {
      if (*(_BYTE *)(v3 + 104) == 1)
      {
        v6 = *(uint64_t (**)(uint64_t))(v1 + 80);
        if (v6)
        {
          v7 = swift_retain();
          v8 = v6(v7);
          result = sub_23AAB7948((uint64_t)v6);
          if (v8)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 304))(result);
            result = swift_release();
          }
        }
      }
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 184))(result);
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 136))(v5, v3);
        swift_release();
      }
      return swift_release();
    }
  }
  return result;
}

void sub_23ABE6DB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  char isEscapingClosureAtFileLocation;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  id v17;
  char v18;
  id v19;
  char v20;
  unsigned __int8 v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  unsigned int v26;
  id v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  unsigned int v31;
  char v32;
  void *v33;
  id v34;
  id v35;
  _BYTE v36[40];
  id aBlock;
  uint64_t v38;
  id (*v39)(uint64_t, void *);
  ValueMetadata *v40;
  uint64_t (*v41)();
  uint64_t v42;
  uint64_t v43;

  v2 = v1;
  v43 = *MEMORY[0x24BDAC8D0];
  v4 = *(void **)(v2 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = a1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = sub_23ABF7238;
  *(_QWORD *)(v6 + 24) = v5;
  v41 = sub_23AA956C8;
  v42 = v6;
  aBlock = (id)MEMORY[0x24BDAC760];
  v38 = 1107296256;
  v39 = sub_23AA9432C;
  v40 = (ValueMetadata *)&block_descriptor_347;
  v7 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v35 = v4;
  v8 = objc_msgSend(v4, sel_fetchSwift_error_, v7, &aBlock);
  _Block_release(v7);
  v9 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (!v8)
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
    return;
  }
  if (objc_msgSend(v8, sel_next))
  {
    v11 = objc_msgSend(v8, sel_longAtIndex_, 0);
    if ((objc_msgSend(v8, sel_isNullAtIndex_, 1) & 1) != 0)
      v12 = 4;
    else
      v12 = (uint64_t)objc_msgSend(v8, sel_longAtIndex_, 1);
    v21 = objc_msgSend(v8, sel_isNullAtIndex_, 2);
    v22 = *(_BYTE *)(v2 + 24);
    v40 = &type metadata for SQLItemJobID;
    v41 = (uint64_t (*)())sub_23ABF67DC();
    aBlock = v11;
    LOBYTE(v38) = v22;
    sub_23ABF6820((uint64_t)&aBlock, (uint64_t)v36);
    swift_beginAccess();
    sub_23ABF6868((uint64_t)v36, a1 + 48);
    swift_endAccess();
    if (v12 == 2)
      goto LABEL_12;
    if (v12 < 2)
    {
      if ((v21 & 1) == 0)
      {
LABEL_12:
        sub_23ABE7720(v2, a1, (uint64_t)v11);
LABEL_28:
        swift_release();

        return;
      }
      v23 = (_QWORD *)swift_allocObject();
      v23[2] = v2;
      v23[3] = a1;
      v23[4] = v11;
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = sub_23ABF729C;
      *(_QWORD *)(v24 + 24) = v23;
      v41 = sub_23AA956C8;
      v42 = v24;
      aBlock = (id)MEMORY[0x24BDAC760];
      v38 = 1107296256;
      v39 = sub_23AA9432C;
      v40 = (ValueMetadata *)&block_descriptor_377;
      v25 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      aBlock = 0;
      v26 = objc_msgSend(v35, sel_executeSwift_error_, v25, &aBlock);
      _Block_release(v25);
      v27 = aBlock;
      LOBYTE(v25) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v25 & 1) == 0)
      {
        if (v26)
        {
LABEL_29:
          swift_release();
          swift_release();

          return;
        }
        sub_23B1C587C();

LABEL_26:
        swift_willThrow();
        goto LABEL_27;
      }
LABEL_33:
      __break(1u);
    }
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = v2;
    v28[3] = a1;
    v28[4] = v11;
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = sub_23ABF7278;
    *(_QWORD *)(v29 + 24) = v28;
    v41 = sub_23AA956C8;
    v42 = v29;
    aBlock = (id)MEMORY[0x24BDAC760];
    v38 = 1107296256;
    v39 = sub_23AA9432C;
    v40 = (ValueMetadata *)&block_descriptor_367;
    v30 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v31 = objc_msgSend(v35, sel_executeSwift_error_, v30, &aBlock);
    _Block_release(v30);
    v34 = aBlock;
    v32 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v32 & 1) == 0)
    {
      if (v31)
      {
        if (objc_msgSend(v35, sel_changes, v34))
        {
          sub_23ABE6B00(a1);
LABEL_27:
          swift_release();
          goto LABEL_28;
        }
        goto LABEL_29;
      }
      sub_23B1C587C();

      goto LABEL_26;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v33 = v8;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v2;
  *(_QWORD *)(v13 + 24) = a1;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = sub_23ABF7258;
  *(_QWORD *)(v14 + 24) = v13;
  v41 = sub_23AA956C8;
  v42 = v14;
  aBlock = (id)MEMORY[0x24BDAC760];
  v38 = 1107296256;
  v39 = sub_23AA9432C;
  v40 = (ValueMetadata *)&block_descriptor_357;
  v15 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v16 = objc_msgSend(v35, sel_executeSwift_error_, v15, &aBlock);
  _Block_release(v15);
  v17 = aBlock;
  v18 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v18 & 1) != 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v16)
  {
    v19 = objc_msgSend(v35, sel_lastInsertedRowID, v33);
    v20 = *(_BYTE *)(v2 + 24);
    v40 = &type metadata for SQLItemJobID;
    v41 = (uint64_t (*)())sub_23ABF67DC();
    aBlock = v19;
    LOBYTE(v38) = v20;
    sub_23ABF6820((uint64_t)&aBlock, (uint64_t)v36);
    swift_beginAccess();
    sub_23ABF6868((uint64_t)v36, a1 + 48);
    swift_endAccess();
    sub_23ABE6B00(a1);
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  swift_release();
  swift_release();

}

void sub_23ABE74E4()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B06BF34();
}

uint64_t sub_23ABE75A0(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t result;
  _QWORD v9[14];

  v2 = qword_23B1D1D50[a1];
  v9[3] = MEMORY[0x24BEE1768];
  v9[0] = v2;
  sub_23AA94C90((uint64_t)v9);
  v4 = v3;
  sub_23AA8A05C((uint64_t)v9, qword_2542E5640);
  if (v4)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
    v7 = swift_checkMetadataState();
    v6(v1, v7, v5);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v9[4];
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23ABE7720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  id v12;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v6 = *(void **)(a1 + 16);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = sub_23ABF72C0;
  v8[3] = v7;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v8;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_387;
  v9 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v10 = v6;
  v11 = objc_msgSend(v6, sel_executeSwift_error_, v9, aBlock);
  _Block_release(v9);
  v12 = aBlock[0];
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v6 & 1) != 0)
    __break(1u);
  if (v11)
  {
    if (!objc_msgSend(v10, sel_changes))
      return swift_release();
    sub_23ABE6B00(a2);
  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  return swift_release();
}

uint64_t sub_23ABE7918(void *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t result;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v19[0] = 0;
  v19[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v21 = 0;
  v22 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v7 = a3[16];
  v8 = MEMORY[0x24BEE1E88];
  v20 = MEMORY[0x24BEE1E88];
  v19[0] = v7;
  sub_23AA94C90((uint64_t)v19);
  v10 = v9;
  sub_23AA8A05C((uint64_t)v19, qword_2542E5640);
  if (!v10)
    goto LABEL_5;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v11 = a3[14];
  v20 = v8;
  v19[0] = v11;
  sub_23AA94C90((uint64_t)v19);
  v13 = v12;
  sub_23AA8A05C((uint64_t)v19, qword_2542E5640);
  if (!v13)
    goto LABEL_5;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v14 = a3[15];
  v20 = MEMORY[0x24BEE1768];
  v19[0] = v14;
  sub_23AA94C90((uint64_t)v19);
  v16 = v15;
  sub_23AA8A05C((uint64_t)v19, qword_2542E5640);
  if (v16)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v17 = objc_msgSend(a1, sel_bindLongParameter_, a4);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v21;
  }
  else
  {
LABEL_5:
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23ABE7BCC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t result;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v22[0] = 0;
  v22[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v24 = 0;
  v25 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v7 = *(void **)(a3 + 88);
  v8 = *(void **)(a3 + 96);
  v9 = *(_BYTE *)(a3 + 104);
  sub_23AAAE478(v7, v8, v9);
  sub_23ADFDFE8(v7, v8, v9, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_23AAAEE10(v7, v8, v9);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v10 = *(_QWORD *)(a3 + 128);
  v11 = MEMORY[0x24BEE1E88];
  v23 = MEMORY[0x24BEE1E88];
  v22[0] = v10;
  sub_23AA94C90((uint64_t)v22);
  v13 = v12;
  sub_23AA8A05C((uint64_t)v22, qword_2542E5640);
  if (!v13)
    goto LABEL_5;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v14 = *(_QWORD *)(a3 + 112);
  v23 = v11;
  v22[0] = v14;
  sub_23AA94C90((uint64_t)v22);
  v16 = v15;
  sub_23AA8A05C((uint64_t)v22, qword_2542E5640);
  if (!v16)
    goto LABEL_5;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v17 = *(_QWORD *)(a3 + 120);
  v23 = MEMORY[0x24BEE1768];
  v22[0] = v17;
  sub_23AA94C90((uint64_t)v22);
  v19 = v18;
  sub_23AA8A05C((uint64_t)v22, qword_2542E5640);
  if (v19)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v20 = objc_msgSend(a1, sel_bindLongParameter_, a4);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v24;
  }
  else
  {
LABEL_5:
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23ABE7F20(void *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t result;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v19[0] = 0;
  v19[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v21 = 0;
  v22 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v7 = a3[16];
  v8 = MEMORY[0x24BEE1E88];
  v20 = MEMORY[0x24BEE1E88];
  v19[0] = v7;
  sub_23AA94C90((uint64_t)v19);
  v10 = v9;
  sub_23AA8A05C((uint64_t)v19, qword_2542E5640);
  if (!v10)
    goto LABEL_5;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v11 = a3[14];
  v20 = v8;
  v19[0] = v11;
  sub_23AA94C90((uint64_t)v19);
  v13 = v12;
  sub_23AA8A05C((uint64_t)v19, qword_2542E5640);
  if (!v13)
    goto LABEL_5;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v14 = a3[15];
  v20 = MEMORY[0x24BEE1768];
  v19[0] = v14;
  sub_23AA94C90((uint64_t)v19);
  v16 = v15;
  sub_23AA8A05C((uint64_t)v19, qword_2542E5640);
  if (v16)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v17 = objc_msgSend(a1, sel_bindLongParameter_, a4);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v21;
  }
  else
  {
LABEL_5:
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

void sub_23ABE81D4(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B06BF34();
}

uint64_t sub_23ABE837C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v2 = MEMORY[0x24BEE1768];
  v3 = qword_23B1D1D50[a1];
  v22 = MEMORY[0x24BEE1768];
  v21[0] = v3;
  sub_23AA94C90((uint64_t)v21);
  v5 = v4;
  sub_23AA8A05C((uint64_t)v21, qword_2542E5640);
  if (!v5)
    goto LABEL_6;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v6 = *(void **)(v1 + 88);
  v7 = *(void **)(v1 + 96);
  v8 = *(_BYTE *)(v1 + 104);
  sub_23AAAE478(v6, v7, v8);
  v9 = sub_23AD7E748();
  sub_23AE1B27C((uint64_t)v9, v6, v7, v8);
  swift_bridgeObjectRelease();
  sub_23AAAEE10(v6, v7, v8);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v10 = *(_QWORD *)(v1 + 128);
  v11 = MEMORY[0x24BEE1E88];
  v22 = MEMORY[0x24BEE1E88];
  v21[0] = v10;
  sub_23AA94C90((uint64_t)v21);
  v13 = v12;
  sub_23AA8A05C((uint64_t)v21, qword_2542E5640);
  if (!v13)
    goto LABEL_6;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v14 = *(_QWORD *)(v1 + 120);
  v22 = v2;
  v21[0] = v14;
  sub_23AA94C90((uint64_t)v21);
  v16 = v15;
  sub_23AA8A05C((uint64_t)v21, qword_2542E5640);
  if (!v16)
    goto LABEL_6;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v17 = *(_QWORD *)(v1 + 112);
  v22 = v11;
  v21[0] = v17;
  sub_23AA94C90((uint64_t)v21);
  v19 = v18;
  sub_23AA8A05C((uint64_t)v21, qword_2542E5640);
  if (v19)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    return v23;
  }
  else
  {
LABEL_6:
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

void sub_23ABE8614(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  id v24;
  id v25;
  id aBlock;
  uint64_t v27;
  id (*v28)(uint64_t, void *);
  void *v29;
  uint64_t (*v30)();
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v3 = *(void **)(v1 + 16);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = sub_23ABF7164;
  *(_QWORD *)(v5 + 24) = v4;
  v30 = sub_23AA956C8;
  v31 = v5;
  aBlock = (id)MEMORY[0x24BDAC760];
  v27 = 1107296256;
  v28 = sub_23AA9432C;
  v29 = &block_descriptor_307;
  v6 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v7 = objc_msgSend(v3, sel_fetchSwift_error_, v6, &aBlock);
  _Block_release(v6);
  v8 = aBlock;
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v6 & 1) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (!v7)
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
    return;
  }
  if (!objc_msgSend(v7, sel_next))
    goto LABEL_16;
  v9 = objc_msgSend(v7, sel_longAtIndex_, 0);
  objc_msgSend(v7, sel_unsignedLongAtIndex_, 1);
  v10 = objc_msgSend(v7, sel_longAtIndex_, 2);
  objc_msgSend(v7, sel_unsignedLongAtIndex_, 3);
  if (v10 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 16) = v1;
    *(_BYTE *)(v16 + 40) = 1;
    *(_QWORD *)(v16 + 48) = v9;
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = sub_23ABF71AC;
    *(_QWORD *)(v17 + 24) = v16;
    v30 = sub_23AA956C8;
    v31 = v17;
    aBlock = (id)MEMORY[0x24BDAC760];
    v27 = 1107296256;
    v28 = sub_23AA9432C;
    v29 = &block_descriptor_317;
    v18 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v19 = objc_msgSend(v3, sel_executeSwift_error_, v18, &aBlock);
    _Block_release(v18);
    v25 = aBlock;
    LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v18 & 1) == 0)
    {
      if (v19)
        sub_23ABF6074();
      sub_23B1C587C();

      goto LABEL_20;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (*(_BYTE *)(v1 + 72) != 1)
  {
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = v1;
    v20[3] = a1;
    v20[4] = v9;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = sub_23ABF71D8;
    *(_QWORD *)(v21 + 24) = v20;
    v30 = sub_23AA956C8;
    v31 = v21;
    aBlock = (id)MEMORY[0x24BDAC760];
    v27 = 1107296256;
    v28 = sub_23AA9432C;
    v29 = &block_descriptor_327;
    v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v23 = objc_msgSend(v3, sel_executeSwift_error_, v22, &aBlock);
    _Block_release(v22);
    v24 = aBlock;
    LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v22 & 1) != 0)
      goto LABEL_25;
    if (v23)
    {
LABEL_15:
      swift_release();
LABEL_16:
      swift_release();

      return;
    }
    sub_23B1C587C();

LABEL_20:
    swift_willThrow();
    goto LABEL_21;
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = v9;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_23ABF7218;
  *(_QWORD *)(v12 + 24) = v11;
  v30 = sub_23AA956C8;
  v31 = v12;
  aBlock = (id)MEMORY[0x24BDAC760];
  v27 = 1107296256;
  v28 = sub_23AA9432C;
  v29 = &block_descriptor_337;
  v13 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v14 = objc_msgSend(v3, sel_executeSwift_error_, v13, &aBlock);
  _Block_release(v13);
  v15 = aBlock;
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v13 & 1) != 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  if (v14)
    goto LABEL_15;
  sub_23B1C587C();

  swift_willThrow();
LABEL_21:
  swift_release();
  swift_release();

}

void sub_23ABE8CA8()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B06BF34();
}

uint64_t sub_23ABE8D64(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t result;
  _QWORD v9[14];

  v2 = qword_23B1D1D50[a1];
  v9[3] = MEMORY[0x24BEE1768];
  v9[0] = v2;
  sub_23AA94C90((uint64_t)v9);
  v4 = v3;
  sub_23AA8A05C((uint64_t)v9, qword_2542E5640);
  if (v4)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_getAssociatedTypeWitness();
    v5 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
    v7 = swift_checkMetadataState();
    v6(v1, v7, v5);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v9[4];
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23ABE8EE4(void *a1, uint64_t a2, void *a3, void *a4, char a5, uint64_t a6)
{
  id v11;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AAAE478(a3, a4, a5);
  sub_23ADFDFE8(a3, a4, a5, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_23AAAEE10(a3, a4, a5);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v11 = objc_msgSend(a1, sel_bindLongParameter_, a6);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23ABE90E0(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  _QWORD v7[2];

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  strcpy((char *)v7, "DELETE FROM ");
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = objc_msgSend(a1, sel_bindLongParameter_, a3);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return v7[0];
}

uint64_t sub_23ABE91E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  id v9;

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v7 = *(void **)(a3 + 88);
  v8 = *(void **)(a3 + 96);
  LOBYTE(a3) = *(_BYTE *)(a3 + 104);
  sub_23AAAE478(v7, v8, a3);
  sub_23ADFDFE8(v7, v8, a3, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_23AAAEE10(v7, v8, a3);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v9 = objc_msgSend(a1, sel_bindLongParameter_, a4);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0x20455441445055;
}

uint64_t sub_23ABE9390(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  unsigned __int8 v16;
  id v17;
  _QWORD v19[2];
  id v20;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 96);
  v5 = *(_QWORD *)(*v1 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)v19 - v8;
  v20 = (id)v1[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v19 - v8, a1, AssociatedTypeWitness);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = (char *)swift_allocObject();
  *((_QWORD *)v11 + 2) = v5;
  *((_QWORD *)v11 + 3) = *(_QWORD *)(v3 + 88);
  *((_QWORD *)v11 + 4) = v4;
  v12 = *(_QWORD *)(v3 + 104);
  v13 = v19[1];
  *((_QWORD *)v11 + 5) = v12;
  *((_QWORD *)v11 + 6) = v13;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, AssociatedTypeWitness);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = sub_23ABF70F4;
  v14[3] = v11;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v14;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_297;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v16 = objc_msgSend(v20, sel_executeSwift_error_, v15, aBlock);
  _Block_release(v15);
  v17 = aBlock[0];
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v15 & 1) != 0)
    __break(1u);
  if ((v16 & 1) != 0)
    return swift_release();
  sub_23B1C587C();

  swift_willThrow();
  return swift_release();
}

uint64_t sub_23ABE95F4(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

void sub_23ABE973C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[18];

  v9[17] = *MEMORY[0x24BDAC8D0];
  v1 = (_QWORD *)*v0;
  v2 = sub_23B1C5E4C();
  v9[7] = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v9[1] = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v9[2] = (char *)v9 - v5;
  v6 = v1[11];
  v8 = v1[12];
  v7 = v1[13];
  v9[11] = v1[10];
  v9[12] = v6;
  v9[3] = v6;
  v9[4] = v8;
  v9[13] = v8;
  v9[14] = v7;
  v9[6] = v7;
  type metadata accessor for PersistenceTrigger();
}

uint64_t sub_23ABE9800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = MEMORY[0x24BDAC7A8]();
  *(_QWORD *)(v1 - 152) = v0;
  return ((uint64_t (*)(uint64_t))((char *)&loc_23ABE9840
                                          + *((int *)qword_23ABEA520 + *(unsigned __int8 *)(v0 + 104))))(v2);
}

void sub_23ABE9850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 144) + 80);
  v3 = *(_QWORD *)(v1 - 160);
  if (v2)
  {
    v4 = swift_retain();
    v5 = v2(v4);
    sub_23AAB7948((uint64_t)v2);
    if (v5)
    {
      v6 = *(_QWORD *)(v1 - 200);
      *(_QWORD *)(v1 - 136) = v0;
      *(_QWORD *)(v1 - 128) = v6;
      v7 = *(_QWORD *)(v1 - 176);
      *(_QWORD *)(v1 - 120) = *(_QWORD *)(v1 - 192);
      *(_QWORD *)(v1 - 112) = v7;
      type metadata accessor for Materialization.MaterializeItem();
    }
    v8 = *(_QWORD *)(v1 - 152);
  }
  else
  {
    v8 = *(_QWORD *)(v1 - 152);
  }
  sub_23ABE8614(v8);
  if (!v3)
    sub_23B06BF34();
}

void sub_23ABEA534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  char v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = *(void **)(a3 + 88);
  v6 = *(void **)(a3 + 96);
  v7 = *(_BYTE *)(a3 + 104);
  sub_23AAAE478(v5, v6, v7);
  sub_23ADFDFE8(v5, v6, v7, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_23AAAEE10(v5, v6, v7);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v10 = swift_checkMetadataState();
  v9(a1, v10, v8);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B06BF34();
}

uint64_t sub_23ABEA730(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[18];

  v1 = qword_23B1D1D50[a1];
  v5[3] = MEMORY[0x24BEE1768];
  v5[0] = v1;
  sub_23AA94C90((uint64_t)v5);
  v3 = v2;
  sub_23AA8A05C((uint64_t)v5, qword_2542E5640);
  if (v3)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v5[4];
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

void sub_23ABEA800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v17[0] = 0;
  v17[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v19 = 0;
  v20 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = *(void **)(a3 + 88);
  v6 = *(void **)(a3 + 96);
  v7 = *(_BYTE *)(a3 + 104);
  sub_23AAAE478(v5, v6, v7);
  sub_23ADFDFE8(v5, v6, v7, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_23AAAEE10(v5, v6, v7);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v8 = *(_QWORD *)(a3 + 120);
  v18 = MEMORY[0x24BEE1768];
  v17[0] = v8;
  sub_23AA94C90((uint64_t)v17);
  v10 = v9;
  sub_23AA8A05C((uint64_t)v17, qword_2542E5640);
  if (v10)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v11 = *(_QWORD *)(a3 + 128);
    v18 = MEMORY[0x24BEE1E88];
    v17[0] = v11;
    sub_23AA94C90((uint64_t)v17);
    v13 = v12;
    sub_23AA8A05C((uint64_t)v17, qword_2542E5640);
    if (v13)
    {
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      sub_23B1C64F4();
      swift_getAssociatedTypeWitness();
      v14 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
      v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
      v16 = swift_checkMetadataState();
      v15(a1, v16, v14);
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      sub_23B1C64F4();
      sub_23B06BF34();
    }
  }
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABEABAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD v14[6];

  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v14[4] = 0;
  v14[5] = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = *(void **)(a3 + 88);
  v6 = *(void **)(a3 + 96);
  v7 = *(_BYTE *)(a3 + 104);
  sub_23AAAE478(v5, v6, v7);
  sub_23ADFDFE8(v5, v6, v7, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_23AAAEE10(v5, v6, v7);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v8 = *(_QWORD *)(a3 + 128);
  v14[3] = MEMORY[0x24BEE1E88];
  v14[0] = v8;
  sub_23AA94C90((uint64_t)v14);
  v10 = v9;
  sub_23AA8A05C((uint64_t)v14, qword_2542E5640);
  if (v10)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_getAssociatedTypeWitness();
    v11 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
    v13 = swift_checkMetadataState();
    v12(a1, v13, v11);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B06BF34();
  }
  sub_23B1C704C();
  __break(1u);
}

void sub_23ABEAEF4(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v5;
  id v6;
  id v7;
  char v8;
  _BYTE *v9;
  char v10;
  void *v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char **v17;
  id v18;
  unint64_t v19;
  char v20;
  char v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  char v27;
  char v28;
  id v29;
  BOOL v30;
  BOOL v31;
  id v32;
  id v33;
  char v34;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  _BYTE v40[40];
  unint64_t v41;
  char v42;
  ValueMetadata *v43;
  unint64_t v44;
  id v45;

  v38 = objc_msgSend(a1, sel_longAtIndex_, 0);
  v5 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 1);
  v6 = objc_msgSend(a1, sel_longAtIndex_, 2);
  v7 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 3);
  v45 = objc_msgSend(a1, sel_longAtIndex_, 4);
  v37 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 5);
  v8 = sub_23B06F1C0((uint64_t)objc_msgSend(a1, sel_longAtIndex_, 7));
  if (v8 == 70)
  {
    sub_23AB7B620();
    swift_allocError();
    *v9 = 0;
    swift_willThrow();
  }
  else
  {
    v10 = v8;
    v35 = v5;
    v36 = a2;
    v11 = sub_23AD7E748();
    v12 = sub_23AE79BC0((uint64_t)v11, a1, 9);
    v14 = v13;
    v16 = v15;
    swift_bridgeObjectRelease();
    if (!v2)
    {
      v17 = v12;
      v34 = v16;
      v18 = a1;
      v19 = sub_23AAA43E4(v18, 6);
      v21 = v20;

      v22 = objc_msgSend(v18, sel_unsignedLongAtIndex_, 8);
      sub_23AE063E0(v10);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2730);
      v23 = swift_dynamicCastMetatype();
      if (v23)
      {
        v41 = v19;
        v42 = v21;
        v24 = (*(uint64_t (**)(unint64_t *, id, id, id))(v23 + 552))(&v41, v35, v6, v22);
        v25 = *(void **)(v24 + 88);
        v26 = *(void **)(v24 + 96);
        *(_QWORD *)(v24 + 88) = v17;
        *(_QWORD *)(v24 + 96) = v14;
        v27 = *(_BYTE *)(v24 + 104);
        *(_BYTE *)(v24 + 104) = v34;
        sub_23AAAEE10(v25, v26, v27);
        v28 = *(_BYTE *)(v39 + 24);
        v43 = &type metadata for SQLItemJobID;
        v44 = sub_23ABF67DC();
        v41 = (unint64_t)v38;
        v42 = v28;
        sub_23ABF6820((uint64_t)&v41, (uint64_t)v40);
        swift_beginAccess();
        swift_retain();
        sub_23ABF6868((uint64_t)v40, v24 + 48);
        swift_endAccess();
        swift_release();
        v29 = v45;
        v30 = v45 == (id)0x7FFFFFFFFFFFFFFFLL;
        v31 = v45 == (id)0x7FFFFFFFFFFFFFFFLL;
        v32 = v37;
        if (v45 == (id)0x7FFFFFFFFFFFFFFFLL)
        {
          v32 = 0;
          v29 = 0;
        }
        *(_QWORD *)v36 = v24;
        *(_QWORD *)(v36 + 8) = v32;
        v33 = v7;
        if (v30)
          v33 = 0;
        *(_QWORD *)(v36 + 16) = v29;
        *(_QWORD *)(v36 + 24) = v33;
        *(_BYTE *)(v36 + 32) = v31;
      }
      else
      {
        sub_23B1C704C();
        __break(1u);
      }
    }
  }
}

uint64_t sub_23ABEB218@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v5;
  id v6;
  id v7;
  char v8;
  _BYTE *v9;
  uint64_t result;
  char v11;
  void *v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t (*v22)(id *, id, id, id);
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  char v27;
  id v28;
  id v29;
  id v30;
  char **v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  _BYTE v38[40];
  id v39;
  char v40;
  ValueMetadata *v41;
  unint64_t v42;
  id v43;

  v36 = objc_msgSend(a1, sel_longAtIndex_, 0);
  v5 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 1);
  v6 = objc_msgSend(a1, sel_longAtIndex_, 2);
  v43 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 3);
  v7 = objc_msgSend(a1, sel_longAtIndex_, 4);
  v35 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 5);
  v8 = sub_23B06F1C0((uint64_t)objc_msgSend(a1, sel_longAtIndex_, 7));
  if (v8 == 70)
  {
    sub_23AB7B620();
    swift_allocError();
    *v9 = 0;
    return swift_willThrow();
  }
  else
  {
    v11 = v8;
    v32 = v6;
    v33 = v5;
    v34 = v7;
    v12 = sub_23AD7E748();
    v13 = sub_23AE79BC0((uint64_t)v12, a1, 9);
    v15 = v14;
    v17 = v16;
    result = swift_bridgeObjectRelease();
    if (!v2)
    {
      v31 = v13;
      v18 = a1;
      v19 = objc_msgSend(v18, sel_stringAtIndex_, 6);
      if (!v19)
      {
        sub_23B1C63E0();
        v19 = (id)sub_23B1C63BC();
        swift_bridgeObjectRelease();
      }

      v20 = objc_msgSend(v18, sel_unsignedLongAtIndex_, 8);
      sub_23AE063F4(v11);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2738);
      v21 = swift_dynamicCastMetatype();
      if (v21)
      {
        v39 = v19;
        v22 = *(uint64_t (**)(id *, id, id, id))(v21 + 552);
        v23 = v19;
        v24 = v22(&v39, v33, v32, v20);
        v25 = *(void **)(v24 + 88);
        v26 = *(void **)(v24 + 96);
        *(_QWORD *)(v24 + 88) = v31;
        *(_QWORD *)(v24 + 96) = v15;
        v27 = *(_BYTE *)(v24 + 104);
        *(_BYTE *)(v24 + 104) = v17;
        sub_23AAAEE10(v25, v26, v27);

        LOBYTE(v23) = *(_BYTE *)(v37 + 24);
        v41 = &type metadata for SQLItemJobID;
        v42 = sub_23ABF67DC();
        v39 = v36;
        v40 = (char)v23;
        sub_23ABF6820((uint64_t)&v39, (uint64_t)v38);
        swift_beginAccess();
        swift_retain();
        sub_23ABF6868((uint64_t)v38, v24 + 48);
        swift_endAccess();
        result = swift_release();
        v29 = v34;
        v28 = v35;
        if (v34 == (id)0x7FFFFFFFFFFFFFFFLL)
        {
          v28 = 0;
          v29 = 0;
        }
        *(_QWORD *)a2 = v24;
        *(_QWORD *)(a2 + 8) = v28;
        v30 = v43;
        if (v34 == (id)0x7FFFFFFFFFFFFFFFLL)
          v30 = 0;
        *(_QWORD *)(a2 + 16) = v29;
        *(_QWORD *)(a2 + 24) = v30;
        *(_BYTE *)(a2 + 32) = v34 == (id)0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        result = sub_23B1C704C();
        __break(1u);
      }
    }
  }
  return result;
}

void sub_23ABEB540(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  id v12;
  int v13;
  _BYTE *v14;
  void *v15;
  void (*v16)(void);
  char **v17;
  id v18;
  _QWORD v19[3];
  int v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char *v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(void);

  v26 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(v4 + 96);
  v30 = *(_QWORD *)(v4 + 80);
  v31 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)v19 - v8;
  v29 = objc_msgSend(a1, sel_longAtIndex_, 0);
  v28 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 1);
  v27 = objc_msgSend(a1, sel_longAtIndex_, 2);
  v10 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 3);
  v11 = objc_msgSend(a1, sel_longAtIndex_, 4);
  v12 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 5);
  v13 = sub_23B06F1C0((uint64_t)objc_msgSend(a1, sel_longAtIndex_, 7));
  if (v13 == 70)
  {
    sub_23AB7B620();
    swift_allocError();
    *v14 = 0;
    swift_willThrow();
  }
  else
  {
    v20 = v13;
    v21 = v12;
    v22 = v4;
    v25 = v9;
    v19[2] = v11;
    v23 = v7;
    v24 = v10;
    v15 = sub_23AD7E748();
    v16 = v32;
    v17 = sub_23AE79BC0((uint64_t)v15, a1, 9);
    swift_bridgeObjectRelease();
    if (!v16)
    {
      v19[1] = v17;
      v32 = *(void (**)(void))(*(_QWORD *)(swift_getAssociatedConformanceWitness() + 40) + 16);
      v18 = a1;
      v32();
      objc_msgSend(v18, sel_unsignedLongAtIndex_, 8);
      sub_23ABF5EBC();
    }
  }
}

uint64_t sub_23ABEB8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  id v22;
  char *v23;
  char *v24;
  id v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  id v34;
  char isEscapingClosureAtFileLocation;
  void (*v36)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v37;
  uint64_t v38;
  uint64_t v40;
  void (*v41)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  id aBlock[7];

  v41 = a5;
  v42 = a6;
  v47 = a2;
  v48 = a4;
  v45 = a3;
  v46 = a1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v8 = sub_23B1C5DC8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v40 - v16;
  v18 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v18);
  v50 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v20 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v17, 1, 1, v8);
  sub_23AA8EFC8((uint64_t)v17, (uint64_t)v15, (uint64_t *)&unk_2542E67B8);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8);
  v49 = v6;
  if (v21 == 1)
  {
    v22 = v20;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v15, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
  }
  v23 = v50;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v50, v11, v8);
  v43 = *(int *)(v18 + 20);
  *(_QWORD *)&v23[v43] = v20;
  v24 = &v23[*(int *)(v18 + 24)];
  *(_QWORD *)v24 = "SQLDB: Fetch Jobs";
  *((_QWORD *)v24 + 1) = 17;
  v44 = v24;
  v24[16] = 2;
  v25 = v20;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_23AA8A05C((uint64_t)v17, (uint64_t *)&unk_2542E67B8);
  v26 = v49;
  v27 = *(void **)(v49 + 16);
  v28 = (_QWORD *)swift_allocObject();
  v29 = v45;
  v28[2] = v26;
  v28[3] = v29;
  v30 = v46;
  v28[4] = v48;
  v28[5] = v30;
  v28[6] = v47;
  v31 = (_QWORD *)swift_allocObject();
  v31[2] = sub_23ABF6FE8;
  v31[3] = v28;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v31;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_257;
  v32 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v33 = objc_msgSend(v27, sel_fetchSwift_error_, v32, aBlock);
  _Block_release(v32);
  v34 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v33)
  {
    if (objc_msgSend(v33, sel_next))
    {
      v36 = v41;
      while (1)
      {
        v37 = (void *)MEMORY[0x23B8601A8]();
        sub_23ABEC15C(v26, v33, v36);
        if (v7)
          break;
        objc_autoreleasePoolPop(v37);
        if ((objc_msgSend(v33, sel_next) & 1) == 0)
          goto LABEL_15;
      }
      objc_autoreleasePoolPop(v37);
    }
LABEL_15:

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  sub_23B1C6BD8();
  v38 = (uint64_t)v50;
  sub_23B1C5DA4();
  sub_23AA8A020(v38);
  return swift_release();
}

uint64_t sub_23ABEBD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (a4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  a5(a1);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23ABEBF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  _QWORD v10[4];
  uint64_t v11;
  unint64_t v12;

  v11 = 0;
  v12 = 0xE000000000000000;
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (a4)
  {
    v10[2] = a3;
    v10[3] = a4;
    swift_bridgeObjectRetain();
    sub_23ABEC0C0(v10);
    swift_bridgeObjectRelease();
  }
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  a5(a1);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_23ABEC0C0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  result = sub_23B1C64F4();
  *a1 = 0x2044455845444E49;
  a1[1] = 0xEB00000000205942;
  return result;
}

void sub_23ABEC15C(uint64_t a1, void *a2, void (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;
  _QWORD v5[4];
  unsigned __int8 v6;

  sub_23ABEB540(a2, (uint64_t)v5);
  if (!v3)
  {
    a3(v5[0], v5[1], v5[2], v5[3], v6);
    swift_release();
  }
}

uint64_t sub_23ABEC1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = 0;
  v7 = a1;
  v8 = a2;
  v5[2] = &v9;
  sub_23ABEB8E0((uint64_t)sub_23ABF6F74, (uint64_t)v6, 0, 0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23ABF6F7C, (uint64_t)v5);
  v3 = v9;
  if (v2)
    swift_release();
  return v3;
}

uint64_t sub_23ABEC248(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;

  v3 = a2();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return v3;
}

void sub_23ABEC2A8()
{
  swift_retain();
  type metadata accessor for ItemJob();
}

uint64_t sub_23ABEC30C()
{
  char v0;

  sub_23B1C67DC();
  sub_23B1C67AC();
  if ((v0 & 1) == 0)
    sub_23ABF6074();
  return 0;
}

uint64_t sub_23ABEC374(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t (*v23)(uint64_t);
  uint64_t (*v24)(uint64_t);
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  id aBlock;
  uint64_t v38;
  id (*v39)(uint64_t, void *);
  void *v40;
  uint64_t (*v41)();
  uint64_t v42;
  uint64_t v43;

  v35 = a2;
  v43 = *MEMORY[0x24BDAC8D0];
  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 80);
  v34 = *(_QWORD *)(*v3 + 96);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v31 - v11;
  v36 = v3;
  v13 = (void *)v3[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v31 - v11, a1, AssociatedTypeWitness);
  v14 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v15 = v14 + v10;
  v33 = a3;
  if (!a3)
  {
    v25 = (char *)swift_allocObject();
    *((_QWORD *)v25 + 2) = v7;
    v26 = v34;
    *((_QWORD *)v25 + 3) = *(_QWORD *)(v6 + 88);
    *((_QWORD *)v25 + 4) = v26;
    v27 = v36;
    *((_QWORD *)v25 + 5) = *(_QWORD *)(v6 + 104);
    *((_QWORD *)v25 + 6) = v27;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v25[v14], v12, AssociatedTypeWitness);
    v25[v15] = v35;
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = sub_23ABF6EE4;
    *(_QWORD *)(v28 + 24) = v25;
    v41 = sub_23AA956C8;
    v42 = v28;
    aBlock = (id)MEMORY[0x24BDAC760];
    v38 = 1107296256;
    v39 = sub_23AA9432C;
    v40 = &block_descriptor_243;
    v29 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v21 = objc_msgSend(v13, sel_fetchSwift_error_, v29, &aBlock);
    _Block_release(v29);
    v22 = aBlock;
    LOBYTE(v29) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v29 & 1) == 0)
    {
      if (v21)
      {
        v24 = 0;
        v23 = sub_23ABF6EE4;
        goto LABEL_8;
      }
LABEL_9:
      sub_23B1C587C();

      swift_willThrow();
      swift_release();
      return v9 & 1;
    }
LABEL_12:
    __break(1u);
  }
  v32 = v13;
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = v7;
  v17 = v34;
  *((_QWORD *)v16 + 3) = *(_QWORD *)(v6 + 88);
  *((_QWORD *)v16 + 4) = v17;
  v18 = v36;
  *((_QWORD *)v16 + 5) = *(_QWORD *)(v6 + 104);
  *((_QWORD *)v16 + 6) = v18;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v14], v12, AssociatedTypeWitness);
  v16[v15] = v35;
  *(_QWORD *)&v16[(v15 & 0xFFFFFFFFFFFFFFF8) + 8] = v33;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_23ABF6DD4;
  *(_QWORD *)(v19 + 24) = v16;
  v41 = sub_23AA956C8;
  v42 = v19;
  aBlock = (id)MEMORY[0x24BDAC760];
  v38 = 1107296256;
  v39 = sub_23AA9432C;
  v40 = &block_descriptor_233;
  v20 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v21 = objc_msgSend(v32, sel_fetchSwift_error_, v20, &aBlock);
  _Block_release(v20);
  v22 = aBlock;
  LOBYTE(v20) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v20 & 1) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (!v21)
    goto LABEL_9;
  v23 = 0;
  v24 = sub_23ABF6DD4;
LABEL_8:
  LOBYTE(v9) = objc_msgSend(v21, sel_next);

  sub_23AAB7948((uint64_t)v23);
  sub_23AAB7948((uint64_t)v24);
  return v9 & 1;
}

uint64_t sub_23ABEC798(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v13 = 0;
  v14 = (uint64_t (*)())0xE000000000000000;
  sub_23B1C6EFC();
  v17 = 0;
  v18 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v8 = swift_checkMetadataState();
  v7(a1, v8, v6);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v9 = qword_23B1D1D50[a4];
  v16 = MEMORY[0x24BEE1768];
  v13 = v9;
  sub_23AA94C90((uint64_t)&v13);
  v11 = v10;
  sub_23AA8A05C((uint64_t)&v13, qword_2542E5640);
  if (v11)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    if (qword_2542E5078 != -1)
      swift_once();
    v13 = qword_2542EDE28;
    v14 = sub_23AAB6448;
    v15 = 0;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5540);
    sub_23AAB5A28(&qword_2542E75B0, (uint64_t *)&unk_2542E5540, MEMORY[0x24BEE2B40]);
    sub_23AAA420C();
    sub_23B1C6644();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v13 = 0x7FFFFFFFFFFFFFFFLL;
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    return v17;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23ABECB28(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v20 = 0;
  v21 = (uint64_t (*)())0xE000000000000000;
  sub_23B1C6EFC();
  v24 = 0;
  v25 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v10 = swift_checkMetadataState();
  v9(a1, v10, v8);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v11 = qword_23B1D1D50[a4];
  v23 = MEMORY[0x24BEE1768];
  v20 = v11;
  sub_23AA94C90((uint64_t)&v20);
  v13 = v12;
  sub_23AA8A05C((uint64_t)&v20, qword_2542E5640);
  if (!v13)
    goto LABEL_7;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (qword_2542E5078 != -1)
    swift_once();
  v20 = qword_2542EDE28;
  v21 = sub_23AAB6448;
  v22 = 0;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5540);
  sub_23AAB5A28(&qword_2542E75B0, (uint64_t *)&unk_2542E5540, MEMORY[0x24BEE2B40]);
  sub_23AAA420C();
  sub_23B1C6644();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v14 = MEMORY[0x24BEE1E88];
  v23 = MEMORY[0x24BEE1E88];
  v20 = a5;
  sub_23AA94C90((uint64_t)&v20);
  v16 = v15;
  sub_23AA8A05C((uint64_t)&v20, qword_2542E5640);
  if (!v16)
    goto LABEL_7;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v23 = v14;
  v20 = a5;
  sub_23AA94C90((uint64_t)&v20);
  v18 = v17;
  sub_23AA8A05C((uint64_t)&v20, qword_2542E5640);
  if (v18)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    return v24;
  }
  else
  {
LABEL_7:
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

void sub_23ABECF50()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t (**)(uint64_t))(v0 + 80);
  if (v1)
  {
    v2 = swift_retain();
    v3 = v1(v2);
    sub_23AAB7948((uint64_t)v1);
    if (v3)
      type metadata accessor for SchedulableJob();
  }
  type metadata accessor for SchedulableJob();
}

void sub_23ABED06C()
{
  sub_23B1C6758();
  JUMPOUT(0x23ABED2BCLL);
}

uint64_t sub_23ABED2E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  char v7;
  _BYTE v8[40];

  sub_23AA77B28(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E16E0);
  result = swift_dynamicCast();
  if ((result & 1) != 0 && v7 == *(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)a3 = v6;
    *(_BYTE *)(a3 + 8) = 0;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 1;
  }
  return result;
}

_QWORD *sub_23ABED378(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v6 = a3 + 32;
  v14 = a3;
  swift_bridgeObjectRetain();
  v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    a1(&v12, v6);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7;
    }
    if ((v13 & 1) == 0)
    {
      v8 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = sub_23AF98860(0, v7[2] + 1, 1, v7);
      v10 = v7[2];
      v9 = v7[3];
      if (v10 >= v9 >> 1)
        v7 = sub_23AF98860((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
      v7[2] = v10 + 1;
      v7[v10 + 4] = v8;
    }
    v6 += 40;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_23ABED4B0(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v14 = MEMORY[0x24BEE4AF8];
  if (a3 >> 62)
    goto LABEL_17;
  v5 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = sub_23B1C7088())
  {
    for (i = 4; ; ++i)
    {
      v7 = (a3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x23B85F860](i - 4, a3) : *(id *)(a3 + 8 * i);
      v8 = v7;
      v9 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v13 = v7;
      a1(&v12, &v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }

      if (v12)
      {
        MEMORY[0x23B85F008]();
        if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_23B1C6740();
        sub_23B1C6788();
        sub_23B1C671C();
      }
      if (v9 == v5)
      {
        swift_bridgeObjectRelease();
        return v14;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_23ABED648(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)&v8 - v4;
  v10 = 0;
  v11 = 0xE000000000000000;
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B0EB9DC();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 40) + 32))(a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v9 = 27;
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v9 = 1;
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_23ABED83C(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (qword_2542E17B8 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE7A0);
  sub_23AAB5A28(&qword_2542E2040, (uint64_t *)&unk_2542DE7A0, MEMORY[0x24BEE2B40]);
  sub_23AAA420C();
  sub_23B1C6644();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (*(_QWORD *)(a2 + 16))
  {
    sub_23B1C6EFC();
    swift_bridgeObjectRelease();
    *(_QWORD *)(swift_allocObject() + 16) = a1;
    swift_bridgeObjectRetain();
    v6 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE7C0);
    sub_23AAB5A28((unint64_t *)&unk_2542E2068, (uint64_t *)&unk_2542DE7C0, MEMORY[0x24BEE2B40]);
    sub_23B1C6644();
    swift_release();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v7 = objc_msgSend(a1, sel_bindLongParameter_, a3);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23ABEDBCC(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (qword_2542DE250 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE7A0);
  sub_23AAB5A28(&qword_2542E2040, (uint64_t *)&unk_2542DE7A0, MEMORY[0x24BEE2B40]);
  sub_23AAA420C();
  sub_23B1C6644();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (*(_QWORD *)(a2 + 16))
  {
    sub_23B1C6EFC();
    swift_bridgeObjectRelease();
    *(_QWORD *)(swift_allocObject() + 16) = a1;
    swift_bridgeObjectRetain();
    v6 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE7C0);
    sub_23AAB5A28((unint64_t *)&unk_2542E2068, (uint64_t *)&unk_2542DE7C0, MEMORY[0x24BEE2B40]);
    sub_23B1C6644();
    swift_release();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v7 = objc_msgSend(a1, sel_bindLongParameter_, a3);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

void sub_23ABEDF5C()
{
  type metadata accessor for SchedulableJob();
}

uint64_t sub_23ABEDFA0()
{
  uint64_t v0;

  sub_23ABD787C(v0);
  sub_23B1C67DC();
  swift_retain();
  sub_23B1C67AC();
  return 0;
}

void sub_23ABEDFF4()
{
  type metadata accessor for ItemJob();
}

uint64_t sub_23ABEE034(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  *(_QWORD *)(v6 - 56) = sub_23B1C6758();
  v16 = 0;
  v17 = 1;
  v13 = v4;
  v14 = v3 & 1;
  v15 = 100;
  v10[2] = v6 - 56;
  v11 = v5;
  sub_23ABEB8E0((uint64_t)sub_23ABF6CA4, (uint64_t)&v12, 0, 0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23ABF6CB4, (uint64_t)v10);
  if (!v1)
  {
    v2 = *(_QWORD *)(v6 - 56);
    v8 = swift_bridgeObjectRetain();
    MEMORY[0x23B85F0B0](v8, a1);
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_23ABEE108(void *a1, uint64_t a2, char a3)
{
  id v6;
  id v7;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if ((a3 & 1) == 0)
  {
    v6 = a1;
    v7 = objc_msgSend(v6, sel_bindLongParameter_, a2, 0x203E204449776F72, 0xE800000000000000);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

void sub_23ABEE31C()
{
  swift_retain();
  type metadata accessor for ItemJob();
}

uint64_t sub_23ABEE36C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[12];

  sub_23B1C67DC();
  sub_23B1C67AC();
  swift_beginAccess();
  sub_23AA8EFC8(v1 + 48, (uint64_t)v6, &qword_2542E16F0);
  if (!v6[3])
  {
    sub_23AA8A05C((uint64_t)v6, &qword_2542E16F0);
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E16E0);
  if (!swift_dynamicCast())
  {
LABEL_5:
    v3 = 0;
    v2 = 1;
    goto LABEL_6;
  }
  v2 = 0;
  v3 = v5;
LABEL_6:
  *(_QWORD *)v0 = v3;
  *(_BYTE *)(v0 + 8) = v2;
  return 0;
}

_QWORD *sub_23ABEE42C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t v10;
  __int128 v11;
  uint64_t AssociatedTypeWitness;
  _QWORD *v13;
  _OWORD v15[3];
  id v16;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = *v0;
  v3 = (void *)v0[2];
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 100;
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = sub_23ABF6C8C;
  v5[3] = v4;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v5;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_215;
  v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v7 = objc_msgSend(v3, sel_fetchSwift_error_, v6, aBlock);
  _Block_release(v6);
  v8 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  v10 = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v7)
  {
    MEMORY[0x24BDAC7A8](v10);
    v5 = v15;
    v11 = *(_OWORD *)(v2 + 96);
    v15[1] = *(_OWORD *)(v2 + 80);
    v15[2] = v11;
    v16 = v7;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v13 = sub_23AD3D1D8();
    if (!v1)
    {
      v5 = v13;
      MEMORY[0x23B85F0B0](v13, AssociatedTypeWitness);
    }
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v5;
}

uint64_t sub_23ABEE680()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

_QWORD *sub_23ABEE814(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  id v10;
  id v11;
  char isEscapingClosureAtFileLocation;
  uint64_t v13;
  __int128 v14;
  uint64_t AssociatedTypeWitness;
  _QWORD *v16;
  _OWORD v18[3];
  id v19;
  id aBlock[7];

  v3 = v1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *v1;
  v6 = (void *)v1[2];
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a1;
  v7[4] = 100;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = sub_23ABF6C60;
  v8[3] = v7;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v8;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_205;
  v9 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v10 = objc_msgSend(v6, sel_fetchSwift_error_, v9, aBlock);
  _Block_release(v9);
  v11 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  v13 = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v10)
  {
    MEMORY[0x24BDAC7A8](v13);
    v8 = v18;
    v14 = *(_OWORD *)(v5 + 96);
    v18[1] = *(_OWORD *)(v5 + 80);
    v18[2] = v14;
    v19 = v10;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v16 = sub_23AD3D1D8();
    if (!v2)
    {
      v8 = v16;
      MEMORY[0x23B85F0B0](v16, AssociatedTypeWitness);
    }
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v8;
}

uint64_t sub_23ABEEA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[4];
  uint64_t v11;
  unint64_t v12;

  v10[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v11 = 0;
  v12 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v6 = MEMORY[0x24BEE1768];
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v10[3] = v6;
  v10[0] = a3;
  sub_23AA94C90((uint64_t)v10);
  v8 = v7;
  sub_23AA8A05C((uint64_t)v10, qword_2542E5640);
  if (v8)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v10[0] = a4;
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v11;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

_QWORD *sub_23ABEED9C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  id aBlock[7];

  v5 = v4;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v10 = *(void **)(v4 + 16);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v5;
  *(_BYTE *)(v11 + 24) = a1;
  *(_QWORD *)(v11 + 32) = a2;
  *(_BYTE *)(v11 + 40) = a3 & 1;
  *(_QWORD *)(v11 + 48) = a4;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = sub_23ABF6C18;
  v12[3] = v11;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v12;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_195;
  v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v14 = objc_msgSend(v10, sel_fetchSwift_error_, v13, aBlock);
  _Block_release(v13);
  v15 = aBlock[0];
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  v16 = swift_release();
  if ((a2 & 1) != 0)
    __break(1u);
  if (v14)
  {
    MEMORY[0x24BDAC7A8](v16);
    swift_getAssociatedTypeWitness();
    v12 = sub_23AD3D1D8();
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v12;
}

uint64_t sub_23ABEEFF4(void *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t result;
  _QWORD v17[4];
  uint64_t v18;
  unint64_t v19;

  v17[0] = 0;
  v17[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v18 = 0;
  v19 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v11 = qword_23B1D1D50[a3];
  v17[3] = MEMORY[0x24BEE1768];
  v17[0] = v11;
  sub_23AA94C90((uint64_t)v17);
  v13 = v12;
  sub_23AA8A05C((uint64_t)v17, qword_2542E5640);
  if (v13)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v17[0] = 0;
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v14 = a1;
    sub_23ABF60FC(a4, a5 & 1);

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v15 = objc_msgSend(v14, sel_bindLongParameter_, a6);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v18;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23ABEF294@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  _QWORD v8[4];
  unint64_t v9;
  unint64_t v10;

  v3 = *a1;
  v8[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  v9 = 0xD000000000000022;
  v10 = 0x800000023B1FA8A0;
  v8[3] = MEMORY[0x24BEE1768];
  v8[0] = v3;
  sub_23AA94C90((uint64_t)v8);
  v5 = v4;
  sub_23AA8A05C((uint64_t)v8, qword_2542E5640);
  if (v5)
  {
    sub_23B1C64F4();
    result = swift_bridgeObjectRelease();
    v7 = v10;
    *a2 = v9;
    a2[1] = v7;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

void sub_23ABEF3B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[11];
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t aBlock;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 80);
  v17 = *(_QWORD *)(*v2 + 96);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)v15 - v8;
  v10 = (uint64_t (*)(uint64_t))v2[10];
  if (v10)
  {
    v15[6] = a1;
    v15[7] = v9;
    v15[8] = v7;
    v15[9] = a2;
    v11 = swift_retain();
    v12 = v10(v11);
    sub_23AAB7948((uint64_t)v10);
    if (v12)
    {
      v15[4] = *(_QWORD *)(v12 + 32);
      swift_retain();
      swift_release();
      v13 = *(_QWORD *)(v5 + 88);
      v14 = *(_QWORD *)(v5 + 104);
      aBlock = v6;
      v19 = v13;
      v15[10] = v6;
      v20 = v17;
      v21 = v14;
      type metadata accessor for SQLSnapshot();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  JUMPOUT(0x23ABEF79CLL);
}

uint64_t sub_23ABEF7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t result;
  _QWORD v16[4];
  uint64_t v17;
  unint64_t v18;

  v16[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v17 = 0;
  v18 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v8 = MEMORY[0x24BEE1768];
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v16[3] = v8;
  v16[0] = a3;
  sub_23AA94C90((uint64_t)v16);
  v10 = v9;
  sub_23AA8A05C((uint64_t)v16, qword_2542E5640);
  if (v10)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_getAssociatedTypeWitness();
    v11 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
    v13 = swift_checkMetadataState();
    v12(a1, v13, v11);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23AEE3F44();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v16[0] = a6;
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v17;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23ABEFB50(void *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  return (*(uint64_t (**)(void *, _QWORD, uint64_t, uint64_t))(v3 + 16))(a1, 0, AssociatedTypeWitness, v3);
}

void sub_23ABEFC00()
{
  type metadata accessor for TestingOperation();
}

uint64_t sub_23ABEFC2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[14];

  *(_QWORD *)(v1 - 24) = sub_23B1C6758();
  v4[2] = v1 - 24;
  sub_23ABEB8E0((uint64_t)sub_23ABEFC98, 0, 0, 0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23ABF6A84, (uint64_t)v4);
  v2 = *(_QWORD *)(v1 - 24);
  if (v0)
    swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_23ABEFC98()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

void sub_23ABEFD90()
{
  type metadata accessor for TestingOperation();
}

void sub_23ABEFDE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v5 - 112) = v1;
  *(_QWORD *)(v5 - 104) = v3;
  *(_QWORD *)(v5 - 96) = v2;
  *(_QWORD *)(v5 - 88) = v4;
  type metadata accessor for Ingestion.FetchItemMetadata();
}

void sub_23ABEFE20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;

  if (swift_dynamicCastClass())
  {
    v8 = v4 + *(_QWORD *)(v0 + 536);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v1, v8, AssociatedTypeWitness);
    *(_QWORD *)(v7 - 112) = v2;
    *(_QWORD *)(v7 - 104) = v5;
    *(_QWORD *)(v7 - 96) = v3;
    *(_QWORD *)(v7 - 88) = v6;
    type metadata accessor for DirectionalTestingOperation();
  }
  *(_QWORD *)(v7 - 112) = v2;
  *(_QWORD *)(v7 - 104) = v5;
  *(_QWORD *)(v7 - 96) = v3;
  *(_QWORD *)(v7 - 88) = v6;
  type metadata accessor for Ingestion.FetchChildrenMetadata();
}

void sub_23ABEFEA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;

  if (swift_dynamicCastClass())
  {
    v8 = v4 + *(_QWORD *)(v0 + 536);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v1, v8, AssociatedTypeWitness);
    *(_QWORD *)(v7 - 112) = v2;
    *(_QWORD *)(v7 - 104) = v5;
    *(_QWORD *)(v7 - 96) = v3;
    *(_QWORD *)(v7 - 88) = v6;
    type metadata accessor for DirectionalTestingOperation();
  }
  sub_23AFF56B8((uint64_t (*)(uint64_t))sub_23ABF6AA0, v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/SQLItemJobRegistry.swift", 137, 2, 708);
}

void sub_23ABEFF04()
{
  JUMPOUT(0x23ABEFF0CLL);
}

void sub_23ABEFF8C()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  type metadata accessor for ItemJob();
}

uint64_t sub_23ABF0008(uint64_t a1)
{
  uint64_t v2;

  MEMORY[0x23B8613CC](&unk_23B1DD6B8, a1);
  sub_23B1C7340();
  sub_23B1C64F4();
  return v2;
}

uint64_t sub_23ABF0058()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  unsigned __int8 v3;
  void *v4;
  id v5;
  id v6;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 16);
  v2 = (_QWORD *)swift_allocObject();
  v3 = v2;
  v2[2] = sub_23ABF6A6C;
  v2[3] = v0;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v2;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_175;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v5 = objc_msgSend(v1, sel_fetchSwift_error_, v4, aBlock);
  _Block_release(v4);
  v6 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v5)
  {
    v3 = objc_msgSend(v5, sel_next);
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v3 & 1;
}

void sub_23ABF01F8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(uint64_t (**)(uint64_t))(a2 + 80);
  if (!v2)
  {
    __break(1u);
    goto LABEL_10;
  }
  v3 = swift_retain();
  v4 = v2(v3);
  v5 = sub_23AAB7948((uint64_t)v2);
  if (!v4)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 152))(v5);
  swift_release();
  sub_23B1C6EFC();
  if (v6 < 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23B1C64F4();
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
  }
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (qword_2569E12E8 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5540);
  sub_23AAB5A28(&qword_2542E75B0, (uint64_t *)&unk_2542E5540, MEMORY[0x24BEE2B40]);
  sub_23AAA420C();
  sub_23B1C6644();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
}

uint64_t sub_23ABF05EC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 v7;
  void *v8;
  id v9;
  id v10;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  v2 = v1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = *(void **)(v1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_BYTE *)(v5 + 24) = a1;
  v6 = (_QWORD *)swift_allocObject();
  v7 = v6;
  v6[2] = sub_23ABF6A50;
  v6[3] = v5;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v6;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_168;
  v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v9 = objc_msgSend(v4, sel_fetchSwift_error_, v8, aBlock);
  _Block_release(v8);
  v10 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v9)
  {
    v7 = objc_msgSend(v9, sel_next);
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v7 & 1;
}

uint64_t sub_23ABF07BC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[4];
  uint64_t v10;
  unint64_t v11;

  v9[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v10 = 0;
  v11 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v9[0] = 2;
  v4 = MEMORY[0x24BEE1768];
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = qword_23B1D1D50[a3];
  v9[3] = v4;
  v9[0] = v5;
  sub_23AA94C90((uint64_t)v9);
  v7 = v6;
  sub_23AA8A05C((uint64_t)v9, qword_2542E5640);
  if (v7)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    return v10;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

char *sub_23ABF0998(char a1, uint64_t a2, char a3)
{
  char *v3;
  char *v4;
  char **v5;
  id v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id aBlock;
  uint64_t v17;
  id (*v18)(uint64_t, void *);
  void *v19;
  uint64_t (*v20)();
  uint64_t v21;
  uint64_t v22;

  v4 = v3;
  LOBYTE(v5) = a1;
  v22 = *MEMORY[0x24BDAC8D0];
  v6 = (id)*((_QWORD *)v3 + 2);
  if ((a3 & 1) == 0 && a2 <= 100)
  {
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v4;
    *(_BYTE *)(v8 + 24) = (_BYTE)v5;
    *(_QWORD *)(v8 + 32) = a2;
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = sub_23ABF6A30;
    *(_QWORD *)(v9 + 24) = v8;
    v20 = sub_23AA956C8;
    v21 = v9;
    aBlock = (id)MEMORY[0x24BDAC760];
    v17 = 1107296256;
    v18 = sub_23AA9432C;
    v19 = &block_descriptor_158;
    v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v6 = objc_msgSend(v6, sel_fetchSwift_error_, v10, &aBlock);
    _Block_release(v10);
    v4 = (char *)aBlock;
    LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v10 & 1) != 0)
    {
      __break(1u);
LABEL_19:
      __break(1u);
    }
    if (!v6)
    {
LABEL_15:
      sub_23B1C587C();

      swift_willThrow();
      swift_release();
      return v4;
    }
    v4 = 0;
    v5 = &selRef_defaultManager;
    do
    {
      if (!objc_msgSend(v6, sel_next))
        goto LABEL_14;
    }
    while (!__OFADD__(v4++, 1));
    __break(1u);
  }
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v4;
  *(_BYTE *)(v12 + 24) = (_BYTE)v5;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = sub_23ABF69F0;
  *(_QWORD *)(v13 + 24) = v12;
  v20 = sub_23AA956C8;
  v21 = v13;
  aBlock = (id)MEMORY[0x24BDAC760];
  v17 = 1107296256;
  v18 = sub_23AA9432C;
  v19 = &block_descriptor_148;
  v14 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v6 = objc_msgSend(v6, sel_fetchSwift_error_, v14, &aBlock);
  _Block_release(v14);
  v4 = (char *)aBlock;
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v14 & 1) != 0)
    goto LABEL_19;
  if (!v6)
    goto LABEL_15;
  if ((objc_msgSend(v6, sel_next) & 1) != 0)
  {
    v4 = (char *)objc_msgSend(v6, sel_longAtIndex_, 0);
LABEL_14:
    swift_release();

  }
  else
  {
    swift_release();

    return 0;
  }
  return v4;
}

uint64_t sub_23ABF0CD8(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t result;
  _QWORD v13[4];
  uint64_t v14;
  unint64_t v15;

  v13[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v14 = 0;
  v15 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v13[0] = 2;
  v7 = MEMORY[0x24BEE1768];
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v8 = qword_23B1D1D50[a3];
  v13[3] = v7;
  v13[0] = v8;
  sub_23AA94C90((uint64_t)v13);
  v10 = v9;
  sub_23AA8A05C((uint64_t)v13, qword_2542E5640);
  if (v10)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v11 = objc_msgSend(a1, sel_bindLongParameter_, a4);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v14;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23ABF0F10(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[4];
  uint64_t v10;
  unint64_t v11;

  v9[1] = 0xE000000000000000;
  sub_23B1C6EFC();
  v10 = 0;
  v11 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v9[0] = 2;
  v4 = MEMORY[0x24BEE1768];
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = qword_23B1D1D50[a3];
  v9[3] = v4;
  v9[0] = v5;
  sub_23AA94C90((uint64_t)v9);
  v7 = v6;
  sub_23AA8A05C((uint64_t)v9, qword_2542E5640);
  if (v7)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23ABF10D8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 v7;
  void *v8;
  id v9;
  id v10;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  v2 = v1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = *(void **)(v1 + 16);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_BYTE *)(v5 + 24) = a1;
  v6 = (_QWORD *)swift_allocObject();
  v7 = v6;
  v6[2] = sub_23ABF69D4;
  v6[3] = v5;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v6;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_138;
  v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v9 = objc_msgSend(v4, sel_fetchSwift_error_, v8, aBlock);
  _Block_release(v8);
  v10 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v9)
  {
    v7 = objc_msgSend(v9, sel_next);
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v7 & 1;
}

uint64_t sub_23ABF12A8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[6];
  uint64_t v9;
  unint64_t v10;

  sub_23B1C6EFC();
  v9 = 0;
  v10 = 0xE000000000000000;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (qword_2542E5078 != -1)
    swift_once();
  v8[4] = 40;
  v8[5] = 0xE100000000000000;
  v8[0] = qword_2542EDE28;
  v8[1] = sub_23AAB6448;
  v8[2] = 0;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5540);
  sub_23AAB5A28(&qword_2542E75B0, (uint64_t *)&unk_2542E5540, MEMORY[0x24BEE2B40]);
  sub_23AAA420C();
  sub_23B1C6644();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v4 = qword_23B1D1D50[a3];
  v8[3] = MEMORY[0x24BEE1768];
  v8[0] = v4;
  sub_23AA94C90((uint64_t)v8);
  v6 = v5;
  sub_23AA8A05C((uint64_t)v8, qword_2542E5640);
  if (v6)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    return v9;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23ABF1540()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  unsigned __int8 v3;
  void *v4;
  id v5;
  id v6;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 16);
  v2 = (_QWORD *)swift_allocObject();
  v3 = v2;
  v2[2] = sub_23ABF6998;
  v2[3] = v0;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v2;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_128;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v5 = objc_msgSend(v1, sel_fetchSwift_error_, v4, aBlock);
  _Block_release(v4);
  v6 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v5)
  {
    v3 = objc_msgSend(v5, sel_next);
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v3 & 1;
}

uint64_t sub_23ABF16E0()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (qword_2542E5078 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5540);
  sub_23AAB5A28(&qword_2542E75B0, (uint64_t *)&unk_2542E5540, MEMORY[0x24BEE2B40]);
  sub_23AAA420C();
  sub_23B1C6644();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (qword_2542DD830 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  sub_23B1C6644();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23ABF1C10()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_23AAB7948(*(_QWORD *)(v0 + 80));
  return v0;
}

uint64_t sub_23ABF1C4C()
{
  sub_23ABF1C10();
  return swift_deallocClassInstance();
}

void type metadata accessor for SQLItemJobRegistry()
{
  JUMPOUT(0x23B861318);
}

uint64_t sub_23ABF1C78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  unsigned __int8 v8;
  id v9;
  id aBlock[7];

  v2 = v1;
  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = *(void **)(v1 + 16);
  objc_msgSend(v4, sel_assertOnQueue);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = a1;
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = sub_23ABF68B8;
  v6[3] = v5;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v6;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_90;
  v7 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v8 = objc_msgSend(v4, sel_executeSwift_error_, v7, aBlock);
  _Block_release(v7);
  v9 = aBlock[0];
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v7 & 1) != 0)
    __break(1u);
  if ((v8 & 1) == 0)
  {
    sub_23B1C587C();

    swift_willThrow();
  }
  return swift_release();
}

void sub_23ABF1E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  char v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v5 = *(void **)(a3 + 88);
  v6 = *(void **)(a3 + 96);
  v7 = *(_BYTE *)(a3 + 104);
  sub_23AAAE478(v5, v6, v7);
  sub_23ADFDFE8(v5, v6, v7, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_23AAAEE10(v5, v6, v7);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(swift_getAssociatedConformanceWitness() + 40);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v10 = swift_checkMetadataState();
  v9(a1, v10, v8);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B06BF34();
}

uint64_t sub_23ABF2038(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[18];

  v1 = qword_23B1D1D50[a1];
  v5[3] = MEMORY[0x24BEE1768];
  v5[0] = v1;
  sub_23AA94C90((uint64_t)v5);
  v3 = v2;
  sub_23AA8A05C((uint64_t)v5, qword_2542E5640);
  if (v3)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v5[4];
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

void sub_23ABF2104()
{
  type metadata accessor for PersistenceTrigger.AffectedItemJobs();
}

void sub_23ABF2488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[10];

  swift_getAssociatedTypeWitness();
  v10 = sub_23B1C6C98();
  v11 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  v13[0] = (char *)v13 - v12;
  v13[1] = a3;
  v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  type metadata accessor for PersistenceTrigger.AffectedItemJobs();
}

uint64_t sub_23ABF2560(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;

  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 16))(v6, &v7[*(int *)(a1 + 56)], v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v6, v2);
    *(_QWORD *)(v8 - 152) = 0;
    *(_QWORD *)(v8 - 144) = 0xE000000000000000;
    sub_23B1C6EFC();
    v9 = *(_QWORD *)(v8 - 144);
    *(_QWORD *)(v8 - 96) = *(_QWORD *)(v8 - 152);
    *(_QWORD *)(v8 - 88) = v9;
    sub_23B1C64F4();
    v10 = *((_QWORD *)v7 + 1);
    *(_QWORD *)(v8 - 112) = 40;
    *(_QWORD *)(v8 - 104) = 0xE100000000000000;
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v5;
    *(_QWORD *)(v8 - 152) = v10;
    *(_QWORD *)(v8 - 144) = sub_23AAB6430;
    *(_QWORD *)(v8 - 136) = 0;
    *(_QWORD *)(v8 - 128) = sub_23AAB63CC;
    *(_QWORD *)(v8 - 120) = v11;
    swift_bridgeObjectRetain_n();
    v12 = v5;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE7A0);
    sub_23AAB5A28(&qword_2542E2040, (uint64_t *)&unk_2542DE7A0, MEMORY[0x24BEE2B40]);
    sub_23AAA420C();
    sub_23B1C6644();
    swift_release();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v13 = objc_msgSend(v12, sel_bindLongParameter_, 0);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v14 = *(_QWORD *)v7;
    *(_QWORD *)(v8 - 128) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v8 - 152) = v14;
    sub_23AA94C90(v8 - 152);
    v16 = v15;
    sub_23AA8A05C(v8 - 152, qword_2542E5640);
    if (v16)
    {
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      sub_23B1C64F4();
      return *(_QWORD *)(v8 - 96);
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v4 + 32))(*(_QWORD *)(v8 - 160), v6, v3);
    *(_QWORD *)(v8 - 152) = 0;
    *(_QWORD *)(v8 - 144) = 0xE000000000000000;
    sub_23B1C6EFC();
    v18 = *(_QWORD *)(v8 - 144);
    *(_QWORD *)(v8 - 96) = *(_QWORD *)(v8 - 152);
    *(_QWORD *)(v8 - 88) = v18;
    sub_23B1C64F4();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(void *, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 40) + 32))(v5, v3);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v20 = *((_QWORD *)v7 + 1);
    *(_QWORD *)(v8 - 112) = 40;
    *(_QWORD *)(v8 - 104) = 0xE100000000000000;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v5;
    *(_QWORD *)(v8 - 152) = v20;
    *(_QWORD *)(v8 - 144) = sub_23AAB6430;
    *(_QWORD *)(v8 - 136) = 0;
    *(_QWORD *)(v8 - 128) = sub_23ABF73DC;
    *(_QWORD *)(v8 - 120) = v21;
    swift_bridgeObjectRetain();
    v22 = v5;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE7A0);
    sub_23AAB5A28(&qword_2542E2040, (uint64_t *)&unk_2542DE7A0, MEMORY[0x24BEE2B40]);
    sub_23AAA420C();
    sub_23B1C6644();
    swift_release();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v23 = objc_msgSend(v22, sel_bindLongParameter_, 0);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v24 = *(_QWORD *)v7;
    *(_QWORD *)(v8 - 128) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v8 - 152) = v24;
    sub_23AA94C90(v8 - 152);
    v26 = v25;
    sub_23AA8A05C(v8 - 152, qword_2542E5640);
    if (v26)
    {
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      sub_23B1C64F4();
      v17 = *(_QWORD *)(v8 - 96);
      (*(void (**)(_QWORD, uint64_t))(v4 + 8))(*(_QWORD *)(v8 - 160), v3);
      return v17;
    }
  }
  result = sub_23B1C704C();
  __break(1u);
  return result;
}

void sub_23ABF2B0C()
{
  type metadata accessor for PersistenceTrigger();
}

void sub_23ABF2B68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = sub_23B1C6C98();
  *(_QWORD *)(v7 - 136) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v7 - 128) = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v17 - v10;
  if (!*(_BYTE *)(v3 + 104))
  {
    v12 = *(_QWORD *)(a1 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v11, v6, a1);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, a1);
    v13 = *(uint64_t (**)(uint64_t))(v2 + 80);
    if (v13)
    {
      *(_QWORD *)(v7 - 72) = v2;
      v14 = swift_retain();
      v15 = v13(v14);
      sub_23AAB7948((uint64_t)v13);
      if (v15)
      {
        *(_QWORD *)(v7 - 112) = v4;
        *(_QWORD *)(v7 - 104) = v5;
        v16 = *(_QWORD *)(v7 - 144);
        *(_QWORD *)(v7 - 96) = v1;
        *(_QWORD *)(v7 - 88) = v16;
        type metadata accessor for JobRegistry();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  sub_23AFF1E94((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/SQLItemJobRegistry.swift", 137, 2, 881);
}

void sub_23ABF2D58()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  sub_23AB74FBC();
  if (!v1)
  {
    sub_23ABEB8E0((uint64_t)sub_23ABF2F1C, 0, 0, 0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23ABF6900, v0);
    v2 = *(void **)(v0 + 16);
    v3 = (_QWORD *)swift_allocObject();
    v3[2] = sub_23ABF691C;
    v3[3] = v0;
    aBlock[4] = sub_23AA956C8;
    aBlock[5] = v3;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_104;
    v4 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v5 = objc_msgSend(v2, sel_executeSwift_error_, v4, aBlock);
    _Block_release(v4);
    v6 = aBlock[0];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    if ((v5 & 1) == 0)
    {
      sub_23B1C587C();

      swift_willThrow();
    }
    swift_release();
  }
}

unint64_t sub_23ABF2F1C()
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0xD000000000000013;
}

void sub_23ABF2FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  char v29;
  char *v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v9 = sub_23B1C5BDC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v42 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23B1C5E4C();
  v40 = *(_QWORD *)(v12 - 8);
  v41 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  swift_retain();
  v16 = sub_23B1C5E40();
  v17 = sub_23B1C6A88();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v37 = v10;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc();
    v39 = v6;
    v21 = v20;
    v44 = v20;
    v36[1] = a6;
    *(_DWORD *)v19 = 136315138;
    v38 = v9;
    sub_23AF1A18C();
    v43 = sub_23AABEC68(v22, v23, &v44);
    v9 = v38;
    sub_23B1C6CBC();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23AA66000, v16, v17, "recovering running job %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v21, -1, -1);
    v24 = v19;
    v10 = v37;
    MEMORY[0x23B8614BC](v24, -1, -1);

  }
  else
  {

    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v41);
  sub_23AB7BFCC();
  v25 = swift_allocError();
  *(_QWORD *)v26 = 0;
  *(_QWORD *)(v26 + 8) = 0;
  *(_BYTE *)(v26 + 16) = -1;
  v28 = *(void **)(a1 + 88);
  v27 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v25;
  *(_QWORD *)(a1 + 96) = 0;
  v29 = *(_BYTE *)(a1 + 104);
  *(_BYTE *)(a1 + 104) = 3;
  sub_23AAAEE10(v28, v27, v29);
  v30 = v42;
  sub_23B1C5BD0();
  sub_23B1C5B94();
  v32 = v31;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v30, v9);
  v35 = v32 * 1000000000.0;
  if ((~COERCE__INT64(v32 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v35 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v35 < 9.22337204e18)
    sub_23AB777F4(a1, (uint64_t)v35, v33, v34);
LABEL_10:
  __break(1u);
}

uint64_t sub_23ABF32A4()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0;
}

void sub_23ABF33D8()
{
  sub_23AB752BC();
}

uint64_t sub_23ABF33F8()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 v8;
  void *v9;
  id v10;
  id v11;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(uint64_t (**)(uint64_t))(v0 + 80);
  if (v1 && (v2 = v0, v3 = swift_retain(), v4 = v1(v3), sub_23AAB7948((uint64_t)v1), v4))
  {
    v5 = *(void **)(v2 + 16);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v2;
    *(_QWORD *)(v6 + 24) = v4;
    v7 = (_QWORD *)swift_allocObject();
    v8 = v7;
    v7[2] = sub_23ABF6980;
    v7[3] = v6;
    aBlock[4] = sub_23AA956C8;
    aBlock[5] = v7;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AA9432C;
    aBlock[3] = &block_descriptor_121;
    v9 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    v10 = objc_msgSend(v5, sel_fetchSwift_error_, v9, aBlock);
    _Block_release(v9);
    v11 = aBlock[0];
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
    if (v10)
    {
      v8 = objc_msgSend(v10, sel_next);
      swift_release();
      swift_release();

    }
    else
    {
      sub_23B1C587C();

      swift_willThrow();
      swift_release();
      swift_release();
    }
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_23ABF3610(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)();

  v7 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v4 = (char *)&v7 - v3;
  v8 = 0;
  v9 = (uint64_t (*)())0xE000000000000000;
  sub_23B1C6EFC();
  v13 = v8;
  v14 = v9;
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B0EB9DC();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 40) + 32))(v7, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, AssociatedTypeWitness);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v8 = 20;
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if (qword_2542E5078 != -1)
    swift_once();
  v11 = 40;
  v12 = 0xE100000000000000;
  v8 = qword_2542EDE28;
  v9 = sub_23AAB6448;
  v10 = 0;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E5540);
  sub_23AAB5A28(&qword_2542E75B0, (uint64_t *)&unk_2542E5540, MEMORY[0x24BEE2B40]);
  sub_23AAA420C();
  sub_23B1C6644();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return v13;
}

uint64_t sub_23ABF3924()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  unsigned __int8 v3;
  void *v4;
  id v5;
  id v6;
  char isEscapingClosureAtFileLocation;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 16);
  v2 = (_QWORD *)swift_allocObject();
  v3 = v2;
  v2[2] = sub_23ABF6960;
  v2[3] = v0;
  aBlock[4] = sub_23AA956C8;
  aBlock[5] = v2;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = &block_descriptor_111;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v5 = objc_msgSend(v1, sel_fetchSwift_error_, v4, aBlock);
  _Block_release(v4);
  v6 = aBlock[0];
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (v5)
  {
    v3 = objc_msgSend(v5, sel_next);
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v3 & 1;
}

uint64_t sub_23ABF3AC4()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

void sub_23ABF3D00()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E2138);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_23B1CA760;
  type metadata accessor for SQLThrottler();
}

_QWORD *sub_23ABF3D58(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[7] = a1;
  v1[8] = &off_250BE3820;
  v1[4] = v2;
  swift_retain();
  return v1;
}

uint64_t sub_23ABF3D88()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  id v10;
  char v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  id v15;
  char v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  void *v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  void *v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  void *v30;
  unsigned int v31;
  id v32;
  char v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  id v37;
  char v38;
  uint64_t v39;
  void *v40;
  unsigned __int8 v41;
  id v42;
  char v43;
  uint64_t (*v45)();
  uint64_t (*v46)();
  uint64_t (*v47)();
  id aBlock;
  uint64_t v49;
  id (*v50)(uint64_t, void *);
  void *v51;
  uint64_t (*v52)();
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = sub_23ABF56A0;
  *(_QWORD *)(v2 + 24) = v0;
  v52 = sub_23AA956C8;
  v53 = v2;
  aBlock = (id)MEMORY[0x24BDAC760];
  v49 = 1107296256;
  v50 = sub_23AA9432C;
  v51 = &block_descriptor_14;
  v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, &aBlock);
  _Block_release(v3);
  v5 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (!v4)
  {
    sub_23B1C587C();

    swift_willThrow();
    goto LABEL_23;
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_23ABF56B8;
  *(_QWORD *)(v7 + 24) = v0;
  v52 = sub_23AA956C8;
  v53 = v7;
  aBlock = (id)MEMORY[0x24BDAC760];
  v49 = 1107296256;
  v50 = sub_23AA9432C;
  v51 = &block_descriptor_21;
  v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v9 = objc_msgSend(v1, sel_executeSwift_error_, v8, &aBlock);
  _Block_release(v8);
  v10 = aBlock;
  v11 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v11 & 1) != 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v9)
  {
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = sub_23ABF56D0;
    *(_QWORD *)(v12 + 24) = v0;
    v52 = sub_23AA956C8;
    v53 = v12;
    aBlock = (id)MEMORY[0x24BDAC760];
    v49 = 1107296256;
    v50 = sub_23AA9432C;
    v51 = &block_descriptor_28;
    v13 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v14 = objc_msgSend(v1, sel_executeSwift_error_, v13, &aBlock);
    _Block_release(v13);
    v15 = aBlock;
    v16 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v16 & 1) == 0)
    {
      if (!v14)
        goto LABEL_22;
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = sub_23ABF56E8;
      *(_QWORD *)(v17 + 24) = v0;
      v52 = sub_23AA956C8;
      v53 = v17;
      aBlock = (id)MEMORY[0x24BDAC760];
      v49 = 1107296256;
      v50 = sub_23AA9432C;
      v51 = &block_descriptor_35;
      v18 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      aBlock = 0;
      v19 = objc_msgSend(v1, sel_executeSwift_error_, v18, &aBlock);
      _Block_release(v18);
      v15 = aBlock;
      v20 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v20 & 1) == 0)
      {
        if (!v19)
          goto LABEL_22;
        v21 = swift_allocObject();
        *(_QWORD *)(v21 + 16) = sub_23ABF5700;
        *(_QWORD *)(v21 + 24) = v0;
        v52 = sub_23AA956C8;
        v53 = v21;
        aBlock = (id)MEMORY[0x24BDAC760];
        v49 = 1107296256;
        v50 = sub_23AA9432C;
        v51 = &block_descriptor_42;
        v22 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        swift_release();
        aBlock = 0;
        v23 = objc_msgSend(v1, sel_executeSwift_error_, v22, &aBlock);
        _Block_release(v22);
        v15 = aBlock;
        v24 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v24 & 1) == 0)
        {
          if (v23)
          {
            v25 = swift_allocObject();
            *(_QWORD *)(v25 + 16) = sub_23ABF5718;
            *(_QWORD *)(v25 + 24) = v0;
            v52 = sub_23AA956C8;
            v53 = v25;
            aBlock = (id)MEMORY[0x24BDAC760];
            v49 = 1107296256;
            v50 = sub_23AA9432C;
            v51 = &block_descriptor_49;
            v26 = _Block_copy(&aBlock);
            swift_retain();
            swift_retain();
            swift_release();
            aBlock = 0;
            v27 = objc_msgSend(v1, sel_executeSwift_error_, v26, &aBlock);
            _Block_release(v26);
            v15 = aBlock;
            v28 = swift_isEscapingClosureAtFileLocation();
            swift_release();
            if ((v28 & 1) == 0)
            {
              if (v27)
              {
                v29 = swift_allocObject();
                *(_QWORD *)(v29 + 16) = sub_23ABF5730;
                *(_QWORD *)(v29 + 24) = v0;
                v52 = sub_23AA956C8;
                v53 = v29;
                aBlock = (id)MEMORY[0x24BDAC760];
                v49 = 1107296256;
                v50 = sub_23AA9432C;
                v51 = &block_descriptor_56;
                v30 = _Block_copy(&aBlock);
                swift_retain();
                swift_retain();
                swift_release();
                aBlock = 0;
                v31 = objc_msgSend(v1, sel_executeSwift_error_, v30, &aBlock);
                _Block_release(v30);
                v32 = aBlock;
                v33 = swift_isEscapingClosureAtFileLocation();
                swift_release();
                if ((v33 & 1) == 0)
                {
                  if (!v31)
                  {
                    sub_23B1C587C();

                    swift_willThrow();
                    swift_release_n();
                    v46 = 0;
                    v47 = 0;
                    goto LABEL_28;
                  }
                  v34 = swift_allocObject();
                  *(_QWORD *)(v34 + 16) = sub_23ABF5748;
                  *(_QWORD *)(v34 + 24) = v0;
                  v52 = sub_23AA956C8;
                  v53 = v34;
                  aBlock = (id)MEMORY[0x24BDAC760];
                  v49 = 1107296256;
                  v50 = sub_23AA9432C;
                  v51 = &block_descriptor_63;
                  v35 = _Block_copy(&aBlock);
                  swift_retain();
                  swift_retain();
                  swift_release();
                  aBlock = 0;
                  v36 = objc_msgSend(v1, sel_executeSwift_error_, v35, &aBlock);
                  _Block_release(v35);
                  v37 = aBlock;
                  v38 = swift_isEscapingClosureAtFileLocation();
                  swift_release();
                  if ((v38 & 1) == 0)
                  {
                    if (v36)
                    {
                      v39 = swift_allocObject();
                      *(_QWORD *)(v39 + 16) = sub_23ABF5760;
                      *(_QWORD *)(v39 + 24) = v0;
                      v52 = sub_23AA956C8;
                      v53 = v39;
                      aBlock = (id)MEMORY[0x24BDAC760];
                      v49 = 1107296256;
                      v50 = sub_23AA9432C;
                      v51 = &block_descriptor_70_0;
                      v40 = _Block_copy(&aBlock);
                      swift_retain();
                      swift_retain();
                      swift_release();
                      aBlock = 0;
                      v41 = objc_msgSend(v1, sel_executeSwift_error_, v40, &aBlock);
                      _Block_release(v40);
                      v42 = aBlock;
                      v43 = swift_isEscapingClosureAtFileLocation();
                      swift_release();
                      if ((v43 & 1) == 0)
                      {
                        if ((v41 & 1) != 0)
                          return swift_release_n();
                        sub_23B1C587C();

                        swift_willThrow();
                        swift_release_n();
                        v47 = sub_23ABF5760;
                        v46 = sub_23ABF5748;
                        goto LABEL_28;
                      }
LABEL_37:
                      __break(1u);
                    }
                    sub_23B1C587C();

                    swift_willThrow();
                    swift_release_n();
                    v47 = 0;
                    v46 = sub_23ABF5748;
LABEL_28:
                    v45 = sub_23ABF5730;
                    goto LABEL_24;
                  }
LABEL_36:
                  __break(1u);
                  goto LABEL_37;
                }
LABEL_35:
                __break(1u);
                goto LABEL_36;
              }
              goto LABEL_22;
            }
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
LABEL_22:
          sub_23B1C587C();

          swift_willThrow();
          swift_release_n();
          goto LABEL_23;
        }
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  sub_23B1C587C();

  swift_willThrow();
  swift_release();
LABEL_23:
  v45 = 0;
  v46 = 0;
  v47 = 0;
LABEL_24:
  swift_release();
  sub_23AAB7948((uint64_t)v45);
  sub_23AAB7948((uint64_t)v46);
  return sub_23AAB7948((uint64_t)v47);
}

uint64_t sub_23ABF47FC()
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 40) + 8))(AssociatedTypeWitness);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23ABF49A8()
{
  _QWORD v1[2];

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "CREATE INDEX ");
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return v1[0];
}

unint64_t sub_23ABF4AA4()
{
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0xD000000000000014;
}

uint64_t sub_23ABF4B98()
{
  _QWORD v1[2];

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "CREATE INDEX ");
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return v1[0];
}

uint64_t sub_23ABF4C8C()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23ABF4D88()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23ABF4E84()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23ABF4F80()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23ABF507C()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23ABF5178()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  id v5;
  char isEscapingClosureAtFileLocation;
  uint64_t v7;
  void *v8;
  unsigned __int8 v9;
  id v10;
  char v11;
  id aBlock;
  uint64_t v14;
  id (*v15)(uint64_t, void *);
  void *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = sub_23ABF5670;
  *(_QWORD *)(v2 + 24) = v0;
  v17 = sub_23AA698D4;
  v18 = v2;
  aBlock = (id)MEMORY[0x24BDAC760];
  v14 = 1107296256;
  v15 = sub_23AA9432C;
  v16 = &block_descriptor_4;
  v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, &aBlock);
  _Block_release(v3);
  v5 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (!v4)
  {
    sub_23B1C587C();

    swift_willThrow();
    return swift_release();
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_23ABF5688;
  *(_QWORD *)(v7 + 24) = v0;
  v17 = (uint64_t (*)(uint64_t))sub_23AA956C8;
  v18 = v7;
  aBlock = (id)MEMORY[0x24BDAC760];
  v14 = 1107296256;
  v15 = sub_23AA9432C;
  v16 = &block_descriptor_7_0;
  v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v9 = objc_msgSend(v1, sel_executeSwift_error_, v8, &aBlock);
  _Block_release(v8);
  v10 = aBlock;
  v11 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v11 & 1) != 0)
LABEL_10:
    __break(1u);
  if ((v9 & 1) != 0)
    return swift_release_n();
  sub_23B1C587C();

  swift_willThrow();
  swift_release();
  return swift_release();
}

uint64_t sub_23ABF5418()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

uint64_t sub_23ABF5514()
{
  sub_23B1C6EFC();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return 0;
}

void sub_23ABF5610()
{
  sub_23ABF3D00();
}

uint64_t sub_23ABF5630()
{
  return sub_23ABF3D88();
}

uint64_t sub_23ABF5650()
{
  return sub_23ABF5178();
}

uint64_t sub_23ABF5670()
{
  return sub_23ABF5418();
}

uint64_t sub_23ABF5678()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF5688()
{
  return sub_23ABF5514();
}

uint64_t sub_23ABF5690()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF56A0()
{
  return sub_23ABF47FC();
}

uint64_t sub_23ABF56A8()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF56B8()
{
  return sub_23ABF49A8();
}

uint64_t sub_23ABF56C0()
{
  return swift_deallocObject();
}

unint64_t sub_23ABF56D0()
{
  return sub_23ABF4AA4();
}

uint64_t sub_23ABF56D8()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF56E8()
{
  return sub_23ABF4B98();
}

uint64_t sub_23ABF56F0()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF5700()
{
  return sub_23ABF4C8C();
}

uint64_t sub_23ABF5708()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF5718()
{
  return sub_23ABF4D88();
}

uint64_t sub_23ABF5720()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF5730()
{
  return sub_23ABF4E84();
}

uint64_t sub_23ABF5738()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF5748()
{
  return sub_23ABF4F80();
}

uint64_t sub_23ABF5750()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF5760()
{
  return sub_23ABF507C();
}

uint64_t sub_23ABF5768()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF5778(uint64_t result)
{
  _QWORD *v1;
  uint64_t (*v2)(uint64_t);
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[7];
  uint64_t v24;
  _QWORD v25[2];
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v2 = (uint64_t (*)(uint64_t))v1[10];
  if (v2)
  {
    v3 = v1;
    v4 = result;
    v5 = *v1;
    v6 = swift_retain();
    v7 = v2(v6);
    result = sub_23AAB7948((uint64_t)v2);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 216))(result);
      sub_23ABD4850(v8, v9, v10, v11);
      swift_release();
      v26 = v28;
      v27 = v29;
      v13 = type metadata accessor for JobLockRule(255, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 96), v12);
      MEMORY[0x23B8613CC](&unk_23B1D15E8, v13);
      v14 = sub_23B1C6260();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542E1EC8);
      MEMORY[0x23B8613CC](MEMORY[0x24BEE03C0], v14);
      v15 = sub_23B1C7010();
      MEMORY[0x23B8613CC](MEMORY[0x24BEE2B40], v15);
      sub_23AAB5A28((unint64_t *)&qword_2542E1ED0, &qword_2542E1EC8, MEMORY[0x24BEE12C8]);
      v16 = sub_23B1C7004();
      MEMORY[0x23B8613CC](MEMORY[0x24BEE2AC8], v16);
      v17 = sub_23B1C6F20();
      v30 = MEMORY[0x23B8613CC](MEMORY[0x24BEE03C8], v14);
      v25[0] = MEMORY[0x23B8613CC](MEMORY[0x24BEE2B50], v15, &v30);
      v25[1] = sub_23AAB5A28(&qword_2542E1ED8, &qword_2542E1EC8, MEMORY[0x24BEE12E0]);
      v24 = MEMORY[0x23B8613CC](MEMORY[0x24BEE2AD0], v16, v25);
      v18 = MEMORY[0x23B8613CC](MEMORY[0x24BEE25A8], v17, &v24);
      v20 = sub_23AD7E264((void (*)(char *, char *))sub_23ABF5A50, 0, v17, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v18, MEMORY[0x24BEE40A8], v19);
      swift_bridgeObjectRelease();
      swift_release();
      v21 = sub_23ABE4E64(v20);
      v22 = swift_bridgeObjectRelease();
      MEMORY[0x24BDAC7A8](v22);
      v23[2] = v21;
      v23[3] = v7;
      v23[4] = v4;
      v23[5] = v3;
      sub_23ABEB8E0((uint64_t)sub_23ABF5AA8, 0, 0, 0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23ABF6934, (uint64_t)v23);
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23ABF5A50@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

unint64_t sub_23ABF5AA8()
{
  return 0xD000000000000039;
}

void sub_23ABF5AC4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  int v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v43 = a8;
  v42 = a5;
  v38 = a4;
  v39 = a3;
  v37 = a2;
  v10 = a1;
  v11 = (uint64_t)(a1 + 6);
  v12 = (_QWORD *)*a1;
  swift_beginAccess();
  sub_23AA8EFC8(v11, (uint64_t)&v46, &qword_2542E16F0);
  v13 = v49;
  if (v49)
  {
    v36 = a7;
    v14 = v50;
    v15 = __swift_project_boxed_opaque_existential_1(&v46, v49);
    v16 = v10;
    v17 = *(_QWORD *)(v13 - 8);
    MEMORY[0x24BDAC7A8](v15);
    v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v17 + 16))(v19);
    sub_23AA8A05C((uint64_t)&v46, &qword_2542E16F0);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
    v22 = v21;
    v23 = *(void (**)(char *, uint64_t))(v17 + 8);
    v10 = v16;
    v23(v19, v13);
    v24 = v20;
    a7 = v36;
    v25 = sub_23AA7E798(v24, v22, a6);
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
    {
      v41 = 0;
      v40 = " 🔏";
      goto LABEL_6;
    }
  }
  else
  {
    sub_23AA8A05C((uint64_t)&v46, &qword_2542E16F0);
  }
  v40 = "";
  v41 = 2;
LABEL_6:
  v26 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)a7 + 368))(v10);
  if ((v26 & 0x8000000000000000) == 0)
  {
    __swift_project_boxed_opaque_existential_1(v43, v43[3]);
    v44 = 0;
    v45 = 0xE000000000000000;
    sub_23B1C64F4();
    v51 = v26;
    v27 = v12[63];
    v28 = v12[65];
    v29 = v12[66];
    v35 = v12[64];
    v36 = v27;
    v46 = v27;
    v47 = v35;
    v34 = v28;
    v48 = v28;
    v49 = v29;
    type metadata accessor for Job();
  }
  swift_release();
  __swift_project_boxed_opaque_existential_1(v43, v43[3]);
  v44 = 0;
  v45 = 0xE000000000000000;
  sub_23B1C64F4();
  v51 = (uint64_t)v10;
  v30 = v12[63];
  v31 = v12[65];
  v32 = v12[66];
  v35 = v12[64];
  v36 = v30;
  v46 = v30;
  v47 = v35;
  v34 = v31;
  v48 = v31;
  v49 = v32;
  type metadata accessor for ItemJob();
}

void sub_23ABF5D74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x23B8613CC](&unk_23B1DD6B8, a1);
  sub_23B1C7340();
  sub_23B1C6F2C();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23AEBD130(*(_QWORD *)(v3 - 168), *(_QWORD *)(v3 - 160), v2, v1);
  JUMPOUT(0x23ABF5DD0);
}

void sub_23ABF5E20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 - 72) = a1;
  v3 = *(_QWORD *)(v2 - 240);
  *(_QWORD *)(v2 - 128) = *(_QWORD *)(v2 - 232);
  *(_QWORD *)(v2 - 120) = v3;
  *(_QWORD *)(v2 - 112) = *(_QWORD *)(v2 - 248);
  *(_QWORD *)(v2 - 104) = v1;
  type metadata accessor for ItemJob();
}

void sub_23ABF5E48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x23B8613CC](&unk_23B1DD6B8, a1);
  sub_23B1C7340();
  swift_release();
  sub_23AEBD130(*(_QWORD *)(v3 - 168), *(_QWORD *)(v3 - 160), v1, v2);
  swift_bridgeObjectRelease();
  JUMPOUT(0x23ABF5E94);
}

void sub_23ABF5EBC()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  type metadata accessor for Job();
}

void sub_23ABF5F5C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23B06B84C(v1);
  *(_QWORD *)(v5 - 112) = v3;
  *(_QWORD *)(v5 - 104) = v0;
  *(_QWORD *)(v5 - 96) = v2;
  *(_QWORD *)(v5 - 88) = v4;
  type metadata accessor for ItemJob();
}

uint64_t sub_23ABF5F84()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  int v12;
  uint64_t result;

  v6 = swift_dynamicCastMetatype();
  if (v6)
  {
    v7 = v6;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 - 152), v3);
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v7 + 552))(v4, *(_QWORD *)(v5 - 144), *(_QWORD *)(v5 - 136), *(_QWORD *)(v5 - 128));
    v9 = *(void **)(v8 + 88);
    v10 = *(void **)(v8 + 96);
    *(_QWORD *)(v8 + 88) = v1;
    *(_QWORD *)(v8 + 96) = v0;
    v11 = *(_BYTE *)(v8 + 104);
    v12 = *(_DWORD *)(v5 - 116);
    *(_BYTE *)(v8 + 104) = v12;
    sub_23AAAE478(v1, v0, v12);
    sub_23AAAEE10(v9, v10, v11);
    return v8;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

void sub_23ABF6074()
{
  sub_23B06BF34();
}

void sub_23ABF60A4()
{
  sub_23ABF5EBC();
}

uint64_t sub_23ABF60FC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;

  if ((a2 & 1) != 0)
    return 0;
  v4 = a1;
  result = sub_23ABEF294(&v4, &v5);
  if (!v2)
    return v5;
  return result;
}

uint64_t sub_23ABF6148(_QWORD *a1, void *a2, char *a3, void *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  id v23;
  char *v24;
  char *v25;
  char *v26;
  id v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  char isEscapingClosureAtFileLocation;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  id (*v43)(uint64_t, void *);
  char v44;
  uint64_t v45;
  char v46;
  void *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  char *v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  _QWORD *v62;
  id v63;
  uint64_t v64;
  void *v65;
  id aBlock;
  uint64_t v67;
  id (*v68)(uint64_t, void *);
  void *v69;
  uint64_t (*v70)();
  uint64_t v71;
  uint64_t v72;

  v7 = v6;
  v62 = a6;
  v63 = a2;
  v64 = a5;
  v65 = a4;
  v59 = a3;
  v72 = *MEMORY[0x24BDAC8D0];
  v9 = sub_23B1C5DC8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E67B8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v57 - v17;
  v19 = type metadata accessor for Signpost(0);
  MEMORY[0x24BDAC7A8](v19);
  v61 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542E6818 != -1)
    swift_once();
  v21 = (void *)qword_2542EDD28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v18, 1, 1, v9);
  v58 = v18;
  sub_23AA8EFC8((uint64_t)v18, (uint64_t)v16, (uint64_t *)&unk_2542E67B8);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9);
  v60 = a1;
  if (v22 == 1)
  {
    v23 = v21;
    v24 = v12;
    sub_23B1C5DB0();
    sub_23AA8A05C((uint64_t)v16, (uint64_t *)&unk_2542E67B8);
  }
  else
  {
    v24 = v12;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, v9);
  }
  v25 = v61;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v61, v24, v9);
  v57 = *(int *)(v19 + 20);
  *(_QWORD *)&v25[v57] = v21;
  v26 = &v25[*(int *)(v19 + 24)];
  *(_QWORD *)v26 = "SQLDB: Fetch Jobs";
  *((_QWORD *)v26 + 1) = 17;
  v26[16] = 2;
  v27 = v21;
  sub_23B1C6BE4();
  sub_23B1C5DA4();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v24, v9);
  sub_23AA8A05C((uint64_t)v58, (uint64_t *)&unk_2542E67B8);
  v28 = v64;
  v29 = *(void **)(v64 + 16);
  v30 = (_QWORD *)swift_allocObject();
  v31 = v59;
  v30[2] = v28;
  v30[3] = v31;
  v32 = v60;
  v30[4] = v65;
  v30[5] = v32;
  v30[6] = v63;
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = sub_23ABF67AC;
  *(_QWORD *)(v33 + 24) = v30;
  v60 = v30;
  v70 = sub_23AA956C8;
  v71 = v33;
  aBlock = (id)MEMORY[0x24BDAC760];
  v67 = 1107296256;
  v68 = sub_23AA9432C;
  v69 = &block_descriptor_80_0;
  v34 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  aBlock = 0;
  v35 = objc_msgSend(v29, sel_fetchSwift_error_, v34, &aBlock);
  _Block_release(v34);
  v36 = aBlock;
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  if (!v35)
  {
    sub_23B1C587C();

    swift_willThrow();
LABEL_23:
    sub_23B1C6BD8();
    v55 = (uint64_t)v61;
    goto LABEL_24;
  }
  v59 = v26;
  if (!objc_msgSend(v35, sel_next))
  {
LABEL_20:

    sub_23B1C6BD8();
    v55 = (uint64_t)v61;
LABEL_24:
    sub_23B1C5DA4();
    sub_23AA8A020(v55);
    return swift_release();
  }
  v38 = v62;
  v63 = v35;
  while (1)
  {
    v39 = (void *)MEMORY[0x23B8601A8]();
    v40 = v7;
    sub_23ABEAEF4(v35, (uint64_t)&aBlock);
    if (v7)
    {
      objc_autoreleasePoolPop(v39);

      goto LABEL_23;
    }
    v42 = aBlock;
    v41 = v67;
    v43 = v68;
    v65 = v69;
    v44 = (char)v70;
    v45 = swift_retain();
    MEMORY[0x23B85F008](v45);
    if (*(_QWORD *)((*v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_23B1C6740();
    sub_23B1C6788();
    sub_23B1C671C();
    if ((v44 & 1) == 0)
      break;
    swift_release();
LABEL_11:
    v35 = v63;
    objc_autoreleasePoolPop(v39);
    if ((objc_msgSend(v35, sel_next) & 1) == 0)
      goto LABEL_20;
  }
  v46 = sub_23AE57808();
  v47 = (void *)v42[17];
  v48 = *((_BYTE *)v42 + 144);
  sub_23AE063E0(v46);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2730);
  v49 = swift_dynamicCastMetatype();
  if (v49)
  {
    aBlock = v47;
    LOBYTE(v67) = v48;
    v50 = (*(uint64_t (**)(id *, uint64_t, id (*)(uint64_t, void *), void *))(v49 + 552))(&aBlock, v41, v43, v65);
    v51 = *(void **)(v50 + 88);
    v52 = *(void **)(v50 + 96);
    *(_QWORD *)(v50 + 88) = 0;
    *(_QWORD *)(v50 + 96) = 0;
    v53 = *(_BYTE *)(v50 + 104);
    *(_BYTE *)(v50 + 104) = 0;
    sub_23AAAEE10(v51, v52, v53);
    v54 = v62;
    MEMORY[0x23B85F008]();
    if (*(_QWORD *)((*v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_23B1C6740();
    sub_23B1C6788();
    sub_23B1C671C();
    swift_release();
    v7 = v40;
    v38 = v54;
    goto LABEL_11;
  }
  result = sub_23B1C704C();
  __break(1u);
  return result;
}

uint64_t sub_23ABF67AC(uint64_t a1)
{
  uint64_t v1;

  return sub_23ABEBD60(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(uint64_t))(v1 + 40));
}

uint64_t sub_23ABF67CC()
{
  return swift_deallocObject();
}

unint64_t sub_23ABF67DC()
{
  unint64_t result;

  result = qword_2542DD818;
  if (!qword_2542DD818)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D1D30, &type metadata for SQLItemJobID);
    atomic_store(result, (unint64_t *)&qword_2542DD818);
  }
  return result;
}

uint64_t sub_23ABF6820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E16F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23ABF6868(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E16F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23ABF68B0()
{
  return objectdestroy_82Tm();
}

void sub_23ABF68B8(uint64_t a1)
{
  uint64_t v1;

  sub_23ABF1E34(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23ABF68C0()
{
  return swift_deallocObject();
}

void sub_23ABF68D0(uint64_t a1)
{
  uint64_t *v1;

  sub_23ABF2488(a1, v1[6], v1[2], v1[3], v1[4], v1[5]);
}

void sub_23ABF68E0()
{
  sub_23ABF2B0C();
}

void sub_23ABF6900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  sub_23ABF2FAC(a1, a2, a3, a4, a5 & 1, v5);
}

uint64_t sub_23ABF691C()
{
  return sub_23ABF32A4();
}

uint64_t sub_23ABF6924()
{
  return swift_deallocObject();
}

void sub_23ABF6934(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  sub_23ABF5AC4(a1, a2, a3, a4, a5 & 1, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD **)(v5 + 32));
}

uint64_t sub_23ABF6960()
{
  return sub_23ABF3AC4();
}

uint64_t sub_23ABF6968()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF6978()
{
  return objectdestroy_82Tm();
}

uint64_t sub_23ABF6980(uint64_t a1)
{
  return sub_23ABF3610(a1);
}

uint64_t sub_23ABF6988()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF6998()
{
  return sub_23ABF16E0();
}

uint64_t sub_23ABF69A0()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF69B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23ABF69D4(uint64_t a1)
{
  uint64_t v1;

  return sub_23ABF12A8(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_23ABF69E0()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF69F0(uint64_t a1)
{
  uint64_t v1;

  return sub_23ABF0F10(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_23ABF69FC()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF6A0C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23ABF6A30(void *a1)
{
  uint64_t v1;

  return sub_23ABF0CD8(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_23ABF6A40()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF6A50(uint64_t a1)
{
  uint64_t v1;

  return sub_23ABF07BC(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_23ABF6A5C()
{
  return swift_deallocObject();
}

void sub_23ABF6A6C(uint64_t a1)
{
  uint64_t v1;

  sub_23ABF01F8(a1, v1);
}

uint64_t sub_23ABF6A74()
{
  return swift_deallocObject();
}

void sub_23ABF6A84()
{
  sub_23ABEFD90();
}

void sub_23ABF6AA0()
{
  sub_23ABEFF8C();
}

uint64_t sub_23ABF6AA8()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23ABF6B58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_23ABEF7A0(a1, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23ABF6BD0()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF6BE0()
{
  return sub_23ABF6C40();
}

uint64_t sub_23ABF6BF4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23ABF6C18(void *a1)
{
  uint64_t v1;

  return sub_23ABEEFF4(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_23ABF6C30()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF6C40()
{
  uint64_t v0;

  return sub_23ABEFB50(*(void **)(v0 + 48));
}

uint64_t sub_23ABF6C60(uint64_t a1)
{
  uint64_t *v1;

  return sub_23ABEEA7C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_23ABF6C6C()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF6C7C()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF6C8C()
{
  return sub_23ABEE680();
}

uint64_t sub_23ABF6C94()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF6CA4(void *a1)
{
  uint64_t v1;

  return sub_23ABEE108(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

void sub_23ABF6CB4()
{
  sub_23ABEE31C();
}

uint64_t sub_23ABF6CD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23ABED2E0(a1, v2, a2);
}

uint64_t sub_23ABF6CE8(void *a1)
{
  uint64_t v1;

  return sub_23ABEDBCC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23ABF6CF0(void *a1)
{
  uint64_t v1;

  return sub_23ABED83C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_23ABF6CF8()
{
  sub_23ABEDF5C();
}

uint64_t sub_23ABF6D14(uint64_t a1)
{
  return sub_23ABED648(a1);
}

uint64_t sub_23ABF6D1C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_23ABF6D40()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23ABF6DD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_23ABECB28(a1, *(_QWORD *)(v1 + 48), v1 + v4, *(_BYTE *)(v1 + v4 + *(_QWORD *)(v3 + 64)), *(_QWORD *)(((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFF8) + v1 + 8));
}

uint64_t sub_23ABF6E44()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF6E54()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23ABF6EE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_23ABEC798(a1, *(_QWORD *)(v1 + 48), v1 + v4, *(_BYTE *)(v1 + v4 + *(_QWORD *)(v3 + 64)));
}

uint64_t sub_23ABF6F48()
{
  return swift_deallocObject();
}

void sub_23ABF6F58()
{
  sub_23ABEC2A8();
}

uint64_t sub_23ABF6F74(uint64_t a1)
{
  uint64_t v1;

  return sub_23ABEC248(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_23ABF6F7C(uint64_t a1)
{
  uint64_t v1;

  **(_QWORD **)(v1 + 16) = a1;
  swift_retain();
  swift_release();
  return 1;
}

uint64_t objectdestroy_72Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23ABF6FE8(uint64_t a1)
{
  uint64_t v1;

  return sub_23ABEBF2C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(uint64_t))(v1 + 40));
}

uint64_t sub_23ABF6FF8()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF7008()
{
  return objectdestroy_82Tm();
}

void sub_23ABF7010(uint64_t a1)
{
  uint64_t v1;

  sub_23ABEA534(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23ABF7018()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF7028()
{
  return objectdestroy_82Tm();
}

void sub_23ABF7030(uint64_t a1)
{
  uint64_t v1;

  sub_23ABEABAC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23ABF7038()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF7048()
{
  return objectdestroy_82Tm();
}

void sub_23ABF7050(uint64_t a1)
{
  uint64_t v1;

  sub_23ABEA800(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23ABF7058()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF7068()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t sub_23ABF70F4(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  return sub_23ABE95F4(a1);
}

uint64_t sub_23ABF714C()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF715C()
{
  return objectdestroy_82Tm();
}

void sub_23ABF7164()
{
  sub_23ABE8CA8();
}

uint64_t sub_23ABF716C()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF717C()
{
  uint64_t v0;

  swift_release();
  sub_23AAAEE10(*(void **)(v0 + 24), *(id *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t sub_23ABF71AC(void *a1)
{
  uint64_t v1;

  return sub_23ABE8EE4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(_BYTE *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_23ABF71C0()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF71D0()
{
  return objectdestroy_82Tm();
}

uint64_t sub_23ABF71D8(void *a1)
{
  uint64_t *v1;

  return sub_23ABE91E8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_23ABF71E4()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF71F4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23ABF7218(void *a1)
{
  uint64_t v1;

  return sub_23ABE90E0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23ABF7220()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF7230()
{
  return objectdestroy_82Tm();
}

void sub_23ABF7238()
{
  sub_23ABE74E4();
}

uint64_t sub_23ABF7240()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF7250()
{
  return objectdestroy_82Tm();
}

void sub_23ABF7258(uint64_t a1)
{
  sub_23ABE81D4(a1);
}

uint64_t sub_23ABF7260()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF7270()
{
  return objectdestroy_82Tm();
}

uint64_t sub_23ABF7278(void *a1)
{
  uint64_t *v1;

  return sub_23ABE7BCC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_23ABF7284()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF7294()
{
  return objectdestroy_82Tm();
}

uint64_t sub_23ABF729C(void *a1)
{
  uint64_t v1;

  return sub_23ABE7F20(a1, *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_23ABF72A8()
{
  return swift_deallocObject();
}

uint64_t sub_23ABF72B8()
{
  return objectdestroy_82Tm();
}

uint64_t sub_23ABF72C0(void *a1)
{
  uint64_t v1;

  return sub_23ABE7918(a1, *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_23ABF72CC()
{
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for SQLItemJobID(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLItemJobID(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLItemJobID()
{
  return &type metadata for SQLItemJobID;
}

unint64_t sub_23ABF7374(uint64_t a1)
{
  unint64_t result;

  result = sub_23ABF7398();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23ABF7398()
{
  unint64_t result;

  result = qword_2542DD810;
  if (!qword_2542DD810)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D1D08, &type metadata for SQLItemJobID);
    atomic_store(result, (unint64_t *)&qword_2542DD810);
  }
  return result;
}

void sub_23ABF73E0()
{
  sub_23ABF6CF8();
}

id sub_23ABF758C()
{
  return sub_23ABF7D20(0, type metadata accessor for ProxyCancellable);
}

uint64_t type metadata accessor for ProxyCancellable()
{
  return objc_opt_self();
}

void sub_23ABF764C(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  objc_class *v4;
  char *v5;
  id v6;
  objc_super v7;

  if (a1)
  {
    v3 = *(void **)(v1 + OBJC_IVAR____TtC9libfssyncP33_7F4FBB69DAA1D0B2DA22684CBB0F5CB320ProxyOperationClient_client);
    v4 = (objc_class *)type metadata accessor for ProxyCancellable();
    v5 = (char *)objc_allocWithZone(v4);
    *(_QWORD *)&v5[OBJC_IVAR____TtC9libfssyncP33_7F4FBB69DAA1D0B2DA22684CBB0F5CB316ProxyCancellable_cancellable] = a1;
    v7.receiver = v5;
    v7.super_class = v4;
    swift_unknownObjectRetain_n();
    v6 = objc_msgSendSuper2(&v7, sel_init);
    objc_msgSend(v3, sel_setCancellationHandler_, v6, v7.receiver, v7.super_class);
    swift_unknownObjectRelease();

  }
  else
  {
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC9libfssyncP33_7F4FBB69DAA1D0B2DA22684CBB0F5CB320ProxyOperationClient_client), sel_setCancellationHandler_, 0);
  }
}

uint64_t sub_23ABF7784(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char isUniquelyReferenced_nonNull_native;
  void *v16;
  void *v17;
  void *v18;
  _OWORD v20[2];
  __int128 aBlock;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v5 = v4;
  *(_QWORD *)&v20[0] = 0x696669746E656469;
  *((_QWORD *)&v20[0] + 1) = 0xEA00000000007265;
  swift_bridgeObjectRetain();
  sub_23B1C6E84();
  if (*(_QWORD *)(a1 + 16) && (v10 = sub_23ACD5A68((uint64_t)&aBlock), (v11 & 1) != 0))
  {
    sub_23AAA15AC(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)&v25);
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
  }
  sub_23AC0521C((uint64_t)&aBlock);
  if (!*((_QWORD *)&v26 + 1))
  {
    sub_23AA8A05C((uint64_t)&v25, qword_2542E5640);
    v27 = 0u;
    v28 = 0u;
    v29 = 0;
    goto LABEL_15;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    v29 = 0;
    v28 = 0u;
    v27 = 0u;
    goto LABEL_15;
  }
  if (!*((_QWORD *)&v28 + 1))
  {
LABEL_15:
    sub_23AA8A05C((uint64_t)&v27, (uint64_t *)&unk_2569E27F0);
    goto LABEL_16;
  }
  aBlock = v27;
  v22 = v28;
  v23 = v29;
  v12 = *(_QWORD *)(v4 + OBJC_IVAR____TtC9libfssyncP33_7F4FBB69DAA1D0B2DA22684CBB0F5CB320ProxyOperationClient_idMap);
  if (v12)
  {
    if (*(_QWORD *)(v12 + 16))
    {
      v13 = sub_23ACD5A68((uint64_t)&aBlock);
      if ((v14 & 1) != 0)
      {
        sub_23AAA15AC(*(_QWORD *)(v12 + 56) + 32 * v13, (uint64_t)&v27);
        sub_23AAA159C(&v27, &v25);
        *(_QWORD *)&v20[0] = 0x696669746E656469;
        *((_QWORD *)&v20[0] + 1) = 0xEA00000000007265;
        sub_23B1C6E84();
        sub_23AAA15AC((uint64_t)&v25, (uint64_t)v20);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        sub_23AD250F8(v20, (uint64_t)&v27, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        sub_23AC0521C((uint64_t)&v27);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
      }
    }
  }
  sub_23AC0521C((uint64_t)&aBlock);
LABEL_16:
  v16 = *(void **)(v5 + OBJC_IVAR____TtC9libfssyncP33_7F4FBB69DAA1D0B2DA22684CBB0F5CB320ProxyOperationClient_client);
  if ((objc_msgSend(v16, sel_respondsToSelector_, sel_operationDidProgressWithInfo_error_completionHandler_) & 1) == 0)return swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  v17 = (void *)sub_23B1C61F4();
  if (a2)
    a2 = (void *)sub_23B1C5870();
  v23 = a3;
  v24 = a4;
  *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v22 = sub_23AA698FC;
  *((_QWORD *)&v22 + 1) = &block_descriptor_396;
  v18 = _Block_copy(&aBlock);
  swift_retain();
  objc_msgSend(v16, sel_operationDidProgressWithInfo_error_completionHandler_, v17, a2, v18);
  _Block_release(v18);

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_release();
}

id sub_23ABF7B78()
{
  return sub_23ABF7D20(0, type metadata accessor for ProxyOperationClient);
}

uint64_t type metadata accessor for ProxyOperationClient()
{
  return objc_opt_self();
}

unint64_t sub_23ABF7C34()
{
  uint64_t v0;
  id v1;

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC9libfssync20FPFSServicerExtender_request), sel_shortDescription));
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

id sub_23ABF7D14(uint64_t a1)
{
  return sub_23ABF7D20(a1, type metadata accessor for FPFSServicerExtender);
}

id sub_23ABF7D20(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

void sub_23ABF7E28(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9)
{
  void *v17;
  void *v18;
  id v19;
  id v20;
  objc_class *v21;
  char *v22;
  id v23;
  void *v24;
  void *v25;
  _QWORD v26[6];
  objc_super v27;

  if (a1)
  {
    v17 = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(a6 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
    if (v17)
    {
      v18 = v17;
      v19 = objc_msgSend(v17, sel_session);

      v20 = objc_msgSend(v19, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a6 + 32), sel_pid), -1.0);
      swift_unknownObjectRelease();
      if (a2)
        a2 = sub_23B147660(a2);
      v21 = (objc_class *)type metadata accessor for ProxyOperationClient();
      v22 = (char *)objc_allocWithZone(v21);
      *(_QWORD *)&v22[OBJC_IVAR____TtC9libfssyncP33_7F4FBB69DAA1D0B2DA22684CBB0F5CB320ProxyOperationClient_client] = a7;
      *(_QWORD *)&v22[OBJC_IVAR____TtC9libfssyncP33_7F4FBB69DAA1D0B2DA22684CBB0F5CB320ProxyOperationClient_idMap] = a2;
      v27.receiver = v22;
      v27.super_class = v21;
      swift_unknownObjectRetain();
      v23 = objc_msgSendSuper2(&v27, sel_init);
      sub_23B147654(a1);
      sub_23AA9F52C(0, (unint64_t *)&unk_2542E2010);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2569E27E0);
      sub_23AC05110();
      v24 = (void *)sub_23B1C61F4();
      swift_bridgeObjectRelease();
      v26[4] = a4;
      v26[5] = a5;
      v26[0] = MEMORY[0x24BDAC760];
      v26[1] = 1107296256;
      v26[2] = sub_23AC46D44;
      v26[3] = &block_descriptor_393;
      v25 = _Block_copy(v26);
      swift_retain();
      swift_release();
      objc_msgSend(v20, sel_startOperation_toFetchThumbnailsWithDictionary_size_completionHandler_, v23, v24, v25, a8, a9);
      _Block_release(v25);
      swift_unknownObjectRelease();

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    a4(a3);
  }
}

uint64_t sub_23ABF8140(unint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  id v9;
  _QWORD *v10;

  v5 = v4;
  swift_bridgeObjectRetain();
  v9 = a2;
  MEMORY[0x23B85F008]();
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_23B1C6740();
  sub_23B1C6788();
  sub_23B1C671C();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = v5;
  swift_retain();
  swift_retain();
  sub_23AC6667C(a1, (uint64_t)sub_23AC03C60, (uint64_t)v10);
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_23ABF8238(unint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  void *v23;
  void *v24;
  _QWORD v25[6];

  if (a1)
  {
    v11 = a1 >> 62;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      if (sub_23B1C7088() < 2)
        goto LABEL_4;
    }
    else
    {
      v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v12 < 2)
      {
LABEL_4:
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
    }
    v15 = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(a6 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
    if (v15)
    {
      v16 = v15;
      v17 = objc_msgSend(v15, sel_session);

      v18 = objc_msgSend(v17, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a6 + 32), sel_pid), -1.0);
      swift_unknownObjectRelease();
      sub_23AA9F52C(0, (unint64_t *)&unk_2542E2010);
      v19 = (void *)sub_23B1C66F8();
      if (v11)
      {
        swift_bridgeObjectRetain();
        v20 = sub_23B1C7088();
        swift_bridgeObjectRelease();
      }
      else
      {
        v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (!v20)
        goto LABEL_26;
      v21 = v20 - 1;
      if (__OFSUB__(v20, 1))
      {
        __break(1u);
      }
      else if ((a1 & 0xC000000000000001) == 0)
      {
        if ((v21 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v21 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v22 = *(id *)(a1 + 8 * v21 + 32);
LABEL_20:
          v23 = v22;
          swift_bridgeObjectRelease();
          v25[4] = a4;
          v25[5] = a5;
          v25[0] = MEMORY[0x24BDAC760];
          v25[1] = 1107296256;
          v25[2] = sub_23ABF84FC;
          v25[3] = &block_descriptor_88;
          v24 = _Block_copy(v25);
          swift_retain();
          swift_release();
          objc_msgSend(v18, sel_preflightReparentItemIDs_underParentID_reply_, v19, v23, v24);
          swift_unknownObjectRelease();

          _Block_release(v24);
          return;
        }
        __break(1u);
        goto LABEL_25;
      }
      v22 = (id)MEMORY[0x23B85F860](v21, a1);
      goto LABEL_20;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    swift_bridgeObjectRelease();
    __break(1u);
    return;
  }
LABEL_5:
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2569E27C8);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_23B1CA760;
    *(_QWORD *)(v13 + 32) = a3;
  }
  else
  {
    v13 = 0;
  }
  v14 = a3;
  a4(v13);
  swift_bridgeObjectRelease();
}

uint64_t sub_23ABF84FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t);

  v2 = a2;
  v3 = *(void (**)(uint64_t))(a1 + 32);
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE880);
    v2 = sub_23B1C6704();
  }
  swift_retain();
  v3(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_23ABF8628(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE880);
    v3 = sub_23B1C66F8();
  }
  else
  {
    v3 = 0;
  }
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t sub_23ABF868C(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;

  v10 = *(void **)(v5 + 16);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = objc_msgSend(a1, sel_itemIdentifier);
  *(_WORD *)(v11 + 24) = 256;
  v12 = *(void **)(v5 + 32);
  *(_QWORD *)(v11 + 32) = v12;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a4;
  *(_QWORD *)(v13 + 24) = a5;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a1;
  *(_QWORD *)(v14 + 32) = v11 | 0x4000000000000004;
  *(_QWORD *)(v14 + 40) = a4;
  *(_QWORD *)(v14 + 48) = a5;
  *(_QWORD *)(v14 + 56) = v10;
  *(_BYTE *)(v14 + 64) = 1;
  *(_BYTE *)(v14 + 65) = a3;
  swift_retain_n();
  v15 = v12;
  v16 = a1;
  swift_retain();
  v17 = v10;
  sub_23AC625B8((uint64_t)"singleItemChange(_:changedFields:bounce:coordinate:request:completionHandler:)", 78, 2, (void (*)(_QWORD *, id))sub_23AC03BA0, v13, (uint64_t)sub_23AC03C20, v14);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_23ABF8888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = a2;
  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    type metadata accessor for NSFileProviderItemIdentifier(0);
    sub_23AA9F52C(0, &qword_2542E7560);
    sub_23AA7E38C(&qword_2542E7530, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderItemIdentifier, (uint64_t)&unk_23B1CC88C);
    v4 = sub_23B1C620C();
  }
  if (a3)
  {
    type metadata accessor for NSFileProviderItemIdentifier(0);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE880);
    sub_23AA7E38C(&qword_2542E7530, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderItemIdentifier, (uint64_t)&unk_23B1CC88C);
    a3 = sub_23B1C620C();
  }
  swift_retain();
  v5(v4, a3);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_23ABF8B24(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  id v9;

  v7 = a1;
  if (a1)
  {
    type metadata accessor for NSFileProviderItemIdentifier(0);
    sub_23AA9F52C(0, &qword_2542E7560);
    sub_23AA7E38C(&qword_2542E7530, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderItemIdentifier, (uint64_t)&unk_23B1CC88C);
    v7 = (void *)sub_23B1C61F4();
  }
  if (a2)
  {
    type metadata accessor for NSFileProviderItemIdentifier(0);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE880);
    sub_23AA7E38C(&qword_2542E7530, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderItemIdentifier, (uint64_t)&unk_23B1CC88C);
    a2 = (void *)sub_23B1C61F4();
  }
  if (a3)
    v8 = sub_23B1C5870();
  else
    v8 = 0;
  v9 = (id)v8;
  (*(void (**)(uint64_t, void *, void *))(a4 + 16))(a4, v7, a2);

}

void sub_23ABF8C64(unint64_t a1, void (*a2)(id))
{
  uint64_t v4;
  id v5;
  id v6;

  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  if (!sub_23B1C7088())
    goto LABEL_8;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_9:
    v5 = (id)MEMORY[0x23B85F860](0, a1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(id *)(a1 + 32);
LABEL_6:
    v6 = v5;
    swift_bridgeObjectRelease();
    a2(v6);

    return;
  }
  __break(1u);
}

void sub_23ABF8D2C(void *a1, id a2, void (*a3)(_QWORD, id), uint64_t a4, id a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v11;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  _QWORD v29[6];

  v11 = a2;
  if (!a1)
  {
    if (!a2)
    {
      v27 = objc_msgSend(a5, sel_identifier, a3, a4, a5);
      v11 = (id)FPItemNotFoundError();

    }
    goto LABEL_11;
  }
  if (a2)
  {
LABEL_11:
    v28 = a2;
    a3(0, v11);

    return;
  }
  v29[0] = a6;
  v14 = a1;
  v15 = swift_bridgeObjectRetain();
  MEMORY[0x23B85F008](v15);
  if (*(_QWORD *)((v29[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v29[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_23B1C6740();
  sub_23B1C6788();
  sub_23B1C671C();
  v16 = v29[0];

  sub_23AA9F52C(0, &qword_2542E2030);
  v17 = objc_msgSend(v14, sel_parentItemID);
  v18 = sub_23B1C6C50();

  if ((v18 & 1) != 0 || a7 == 1)
  {
    a3(v29[0], 0);

    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = objc_msgSend(v14, sel_parentItemID);
    v20 = a7 - 1;
    if (__OFSUB__(a7, 1))
    {
      __break(1u);
    }
    else
    {
      v21 = v19;
      v22 = *(void **)(a8 + 16);
      v23 = *(_QWORD *)(a8 + 32);
      v24 = (_QWORD *)swift_allocObject();
      v24[2] = a3;
      v24[3] = a4;
      v24[4] = v21;
      v24[5] = v16;
      v24[6] = v20;
      v24[7] = a8;
      v29[4] = sub_23AC04CE8;
      v29[5] = v24;
      v29[0] = MEMORY[0x24BDAC760];
      v29[1] = 1107296256;
      v29[2] = sub_23AAB5FC8;
      v29[3] = &block_descriptor_338;
      v25 = _Block_copy(v29);
      swift_retain();
      v26 = v21;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      objc_msgSend(v22, sel_itemForItemID_creatingPlaceholderIfMissing_ignoreAlternateContentsURL_request_completionHandler_, v26, 0, 0, v23, v25);
      _Block_release(v25);

      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_23ABF9000(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(*a1);
}

uint64_t sub_23ABF9024(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, uint64_t a6, char a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;

  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = sub_23AC04BA0;
  *(_QWORD *)(v13 + 24) = v12;
  v14 = swift_allocObject();
  swift_weakInit();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = sub_23AAB64DC;
  v15[3] = v13;
  v15[4] = v14;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = sub_23AC04BE8;
  *(_QWORD *)(v16 + 24) = v15;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = sub_23AAB64AC;
  *(_QWORD *)(v17 + 24) = v16;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a4;
  *(_QWORD *)(v18 + 24) = a1;
  *(_BYTE *)(v18 + 32) = a5;
  *(_QWORD *)(v18 + 40) = a6;
  *(_BYTE *)(v18 + 48) = a7;
  *(_QWORD *)(v18 + 56) = sub_23AAB64AC;
  *(_QWORD *)(v18 + 64) = v16;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_23AAB64DC;
  *(_QWORD *)(v19 + 24) = v17;
  swift_retain_n();
  swift_retain();
  swift_retain();
  v20 = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23AA901C4((uint64_t)"fetchHierarchy(for:recursively:ignoreAlternateContentURL:reply:)", 64, 2, sub_23AC04C98, v19, (uint64_t)sub_23AC04C70, v18);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_23ABF9234(void *a1, uint64_t a2, int a3, uint64_t a4, int a5, void (*a6)(_QWORD, void *), uint64_t a7)
{
  void *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  char *v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  int v43;
  _BOOL4 v44;
  char v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  _QWORD *v56;
  void *v57;
  char v58;
  void (*v59)(_QWORD, _QWORD);
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  id v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  void (*v77)(_QWORD, void *);
  uint64_t v78;
  uint64_t aBlock;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t, void *);
  void *v82;
  void *v83;
  _QWORD *v84;
  uint64_t v85;

  v77 = a6;
  v78 = a7;
  v76 = a5;
  v75 = a4;
  v74 = a3;
  v10 = sub_23B1C5E4C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v69 - v15;
  sub_23AAB7B40(objc_msgSend(a1, sel_identifier));
  sub_23AAEEE70(*(_QWORD *)(a2 + 16), 0);
  if (v7)
  {
    swift_release();
    v19 = v7;
    v77(0, v7);

  }
  else
  {
    v20 = v17;
    v21 = v18;
    v72 = v11;
    v73 = v10;
    sub_23AA88218(v17, v18, BYTE1(v18) & 1);
    swift_release();
    if ((v21 & 0x100) != 0)
    {
      sub_23AA862DC(v20, v21, 1);
      v22 = (id)fpfs_current_or_default_log();
      v23 = v14;
      sub_23B1C5E58();
      v24 = a1;
      v25 = sub_23B1C5E40();
      v26 = sub_23B1C6A94();
      v27 = os_log_type_enabled(v25, v26);
      v71 = (uint64_t)v24;
      if (v27)
      {
        v28 = swift_slowAlloc();
        v29 = swift_slowAlloc();
        aBlock = v29;
        *(_DWORD *)v28 = 136315394;
        v30 = objc_msgSend(v24, sel_identifier, v28 + 4);
        v31 = sub_23AA7B734();
        v70 = v23;
        v32 = v31;
        v34 = v33;

        v85 = sub_23AABEC68(v32, v34, &aBlock);
        sub_23B1C6CBC();

        swift_bridgeObjectRelease();
        *(_WORD *)(v28 + 12) = 1024;
        v35 = v74;
        LODWORD(v85) = v74 & 1;
        sub_23B1C6CBC();
        _os_log_impl(&dword_23AA66000, v25, v26, "fetching hierarchy from provider: %s (recursive: %{BOOL}d)", (uint8_t *)v28, 0x12u);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v29, -1, -1);
        MEMORY[0x23B8614BC](v28, -1, -1);

        (*(void (**)(char *, uint64_t))(v72 + 8))(v70, v73);
        v36 = v76;
        v37 = v78;
        v38 = v75;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v72 + 8))(v14, v73);
        v36 = v76;
        v37 = v78;
        v38 = v75;
        v35 = v74;
      }
      v52 = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(v38 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
      if (v52)
      {
        v53 = v52;
        v54 = objc_msgSend(v52, sel_session);

        v55 = objc_msgSend(v54, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(v38 + 32), sel_pid), -1.0);
        swift_unknownObjectRelease();
        v56 = (_QWORD *)swift_allocObject();
        v56[2] = v77;
        v56[3] = v37;
        v56[4] = v38;
        v83 = sub_23AC04CD8;
        v84 = v56;
        aBlock = MEMORY[0x24BDAC760];
        v80 = 1107296256;
        v81 = sub_23ABF9A78;
        v82 = &block_descriptor_325;
        v57 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        swift_release();
        objc_msgSend(v55, sel_fetchHierarchyForItemID_recursively_ignoreAlternateContentURL_reply_, v71, v35 & 1, v36 & 1, v57);
        _Block_release(v57);
        swift_unknownObjectRelease();
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      v39 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      v40 = a1;
      v41 = sub_23B1C5E40();
      v42 = sub_23B1C6A94();
      v43 = v42;
      v44 = os_log_type_enabled(v41, v42);
      v45 = v74;
      if (v44)
      {
        v46 = swift_slowAlloc();
        v71 = swift_slowAlloc();
        aBlock = v71;
        *(_DWORD *)v46 = 136315394;
        v47 = objc_msgSend(v40, sel_identifier, v46 + 4);
        v48 = sub_23AA7B734();
        LODWORD(v70) = v43;
        v50 = v49;

        v85 = sub_23AABEC68(v48, v50, &aBlock);
        sub_23B1C6CBC();

        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 12) = 1024;
        LODWORD(v85) = v45 & 1;
        sub_23B1C6CBC();
        _os_log_impl(&dword_23AA66000, v41, (os_log_type_t)v70, "fetching hierarchy from cache: %s (recursive: %{BOOL}d)", (uint8_t *)v46, 0x12u);
        v51 = v71;
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v51, -1, -1);
        MEMORY[0x23B8614BC](v46, -1, -1);

      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v72 + 8))(v16, v73);
      v58 = v76;
      v59 = (void (*)(_QWORD, _QWORD))v77;
      if ((v45 & 1) != 0)
        v60 = 200;
      else
        v60 = 2;
      v61 = v75;
      v62 = *(void **)(v75 + 16);
      v63 = *(_QWORD *)(v75 + 32);
      v64 = (_QWORD *)swift_allocObject();
      v65 = v78;
      v64[2] = v59;
      v64[3] = v65;
      v66 = MEMORY[0x24BEE4AF8];
      v64[4] = v40;
      v64[5] = v66;
      v64[6] = v60;
      v64[7] = v61;
      v83 = sub_23AC04CE8;
      v84 = v64;
      aBlock = MEMORY[0x24BDAC760];
      v80 = 1107296256;
      v81 = (uint64_t (*)(uint64_t, uint64_t, void *))sub_23AAB5FC8;
      v82 = &block_descriptor_331;
      v67 = _Block_copy(&aBlock);
      v68 = v40;
      swift_retain();
      swift_retain();
      swift_release();
      objc_msgSend(v62, sel_itemForItemID_creatingPlaceholderIfMissing_ignoreAlternateContentsURL_request_completionHandler_, v68, 0, v58 & 1, v63, v67);
      _Block_release(v67);
    }
  }
}

void sub_23ABF98EC(uint64_t a1, void *a2, void (*a3)(_QWORD, void *), uint64_t a4, uint64_t a5)
{
  void *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  id v12;
  _QWORD v13[6];

  if (a1)
  {
    v8 = *(void **)(a5 + 16);
    sub_23AA9F52C(0, &qword_2542E7560);
    v9 = (void *)sub_23B1C66F8();
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = a3;
    v10[3] = a4;
    v10[4] = a2;
    v13[4] = sub_23AC04A70;
    v13[5] = v10;
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 1107296256;
    v13[2] = sub_23ABF9A0C;
    v13[3] = &block_descriptor_344;
    v11 = _Block_copy(v13);
    swift_retain();
    v12 = a2;
    swift_release();
    objc_msgSend(v8, sel_decorateItems_completionHandler_, v9, v11);
    _Block_release(v11);

  }
  else
  {
    a3(0, a2);
  }
}

uint64_t sub_23ABF9A0C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_23AA9F52C(0, &qword_2542E7560);
  v2 = sub_23B1C6704();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23ABF9A78(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_23ABFB3AC(a1, a2, a3, &qword_2542E7560);
}

void sub_23ABF9BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  _QWORD v17[6];

  v11 = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, sel_session);

    v14 = objc_msgSend(v13, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a2 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    v15 = (void *)sub_23B1C63BC();
    v17[4] = a6;
    v17[5] = a7;
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 1107296256;
    v17[2] = sub_23AC46D44;
    v17[3] = &block_descriptor_284;
    v16 = _Block_copy(v17);
    swift_retain();
    swift_release();
    objc_msgSend(v14, sel_userCheckedSuppressionCheckboxForUserInteractionIdentifier_domainIdentifier_completionHandler_, v15, a5, v16);
    _Block_release(v16);
    swift_unknownObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

void sub_23ABF9DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  _QWORD aBlock[6];

  v14 = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v14)
  {
    v15 = v14;
    v16 = objc_msgSend(v14, sel_session);

    v17 = objc_msgSend(v16, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a2 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    v18 = (void *)sub_23B1C63BC();
    v19 = (void *)sub_23B1C63BC();
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = a2;
    v20[3] = a8;
    v20[4] = a9;
    v20[5] = a1;
    v20[6] = a5;
    v20[7] = a6;
    aBlock[4] = sub_23AC04A58;
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_23AAB5FC8;
    aBlock[3] = &block_descriptor_256;
    v21 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    objc_msgSend(v17, sel_fetchDefaultContainerForBundleIdentifier_defaultName_inDomainIdentifier_lookupOnly_reply_, v18, v19, a7, 1, v21);
    _Block_release(v21);
    swift_unknownObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

void sub_23ABF9F7C(void *a1, void *a2, uint64_t a3, void (*a4)(_QWORD, id), uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  id v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  id v32;
  id v33;
  NSObject *v34;
  uint64_t v35;
  uint8_t *v36;
  void *v37;
  id v38;
  uint64_t v39;
  id v40;
  void *v41;
  unsigned int v42;
  id *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  void *v53;
  uint64_t v54;
  void (*v55)(_QWORD, id);
  unint64_t v56;

  v54 = a5;
  v55 = a4;
  v14 = sub_23B1C5E4C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v53 - v19;
  if (a1)
  {
    v21 = a1;
    v22 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v23 = sub_23B1C5E40();
    v24 = sub_23B1C6A88();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_23AA66000, v23, v24, "received special default container from extension process, looking up and returning", v25, 2u);
      MEMORY[0x23B8614BC](v25, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    v26 = (_QWORD *)swift_allocObject();
    v27 = v54;
    v26[2] = v55;
    v26[3] = v27;
    v26[4] = a2;
    v28 = *(_BYTE **)(a3 + 16);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE870);
    v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_23B1CE680;
    *(_QWORD *)(v29 + 32) = v21;
    v56 = v29;
    sub_23B1C671C();
    v30 = v56;
    v31 = v21;
    swift_retain();
    swift_retain();
    v32 = a2;
    sub_23AAB8828(v30, 0, v28, (void (*)(_QWORD))sub_23AC04A70, (uint64_t)v26);

    swift_bridgeObjectRelease();
  }
  else
  {
    v53 = a7;
    v33 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v34 = sub_23B1C5E40();
    v35 = sub_23B1C6A94();
    if (os_log_type_enabled(v34, (os_log_type_t)v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_23AA66000, v34, (os_log_type_t)v35, "didn't receive a special default container from extension process, creating a folder", v36, 2u);
      MEMORY[0x23B8614BC](v36, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    v37 = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(a3 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
    v38 = objc_msgSend(v37, sel_provider);

    if (!v38)
    {
      v52 = (id)FPDomainUnavailableError();
      v55(0, v52);

      return;
    }
    v39 = a6;
    v40 = objc_msgSend(v38, sel_identifier);

    sub_23B1C63E0();
    v41 = (void *)sub_23B1C63BC();
    swift_bridgeObjectRelease();
    v42 = objc_msgSend(v41, sel_fp_isiCloudDriveIdentifier);

    v43 = (id *)MEMORY[0x24BDC8198];
    if (!v42)
      v43 = (id *)MEMORY[0x24BDC8228];
    v44 = *v43;
    v45 = sub_23AAB7B40(v44);
    v46 = swift_allocObject();
    v47 = *(void **)(a3 + 32);
    *(_QWORD *)(v46 + 16) = v44;
    *(_QWORD *)(v46 + 24) = v47;
    v48 = v46 | 6;
    v49 = v54;
    swift_retain_n();
    v50 = v44;
    swift_bridgeObjectRetain();
    swift_retain();
    v51 = v47;
    sub_23B0A319C(v45, 0, v48, v39, v53, a8, a3, v55, v49);

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release_n();
}

void sub_23ABFA3BC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, id), uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  unsigned __int8 v24;
  char *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void (*v30)(char *, uint64_t);
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD, id);
  uint64_t v43;
  id aBlock;
  uint64_t v45;
  uint64_t (*v46)();
  void *v47;
  void (*v48)(_QWORD, _QWORD);
  uint64_t v49;
  uint64_t v50;

  v42 = a5;
  v43 = a6;
  v38 = a4;
  v39 = a2;
  v40 = a3;
  v50 = *MEMORY[0x24BDAC8D0];
  v7 = sub_23B1C58E8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2930);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (id *)((char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = sub_23B1C5A08();
  v14 = *(_QWORD *)(v41 - 8);
  v15 = MEMORY[0x24BDAC7A8](v41);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v38 - v18;
  sub_23AA8EFC8(a1, (uint64_t)v13, &qword_2569E2930);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = *v13;
    aBlock = *v13;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE880);
    swift_willThrowTypedImpl();
LABEL_6:
    v31 = v20;
    v42(0, v20);

    return;
  }
  v21 = v41;
  (*(void (**)(char *, id *, uint64_t))(v14 + 32))(v19, v13, v41);
  aBlock = v39;
  v45 = v40;
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BDCD7A0], v7);
  sub_23AAA420C();
  sub_23B1C59FC();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1580]), sel_init);
  v23 = (void *)sub_23B1C5954();
  aBlock = 0;
  v24 = objc_msgSend(v22, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v23, 1, 0, &aBlock);

  v25 = v17;
  if ((v24 & 1) == 0)
  {
    v29 = aBlock;
    v20 = (id)sub_23B1C587C();

    swift_willThrow();
    v30 = *(void (**)(char *, uint64_t))(v14 + 8);
    v30(v17, v21);
    v30(v19, v21);
    goto LABEL_6;
  }
  v26 = aBlock;
  v27 = sub_23B1C59E4();
  LOBYTE(aBlock) = 1;
  sub_23B0E1010(4294967294, v27, v28, 0x100000, 0, 0, (uint64_t)&aBlock, (uint64_t)sub_23ABFA7B4, 0);
  if ((aBlock & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v32 = v38;
    v33 = *(void **)(v38 + 16);
    v34 = (void *)sub_23B1C5954();
    v35 = *(_QWORD *)(v32 + 32);
    v48 = (void (*)(_QWORD, _QWORD))v42;
    v49 = v43;
    aBlock = (id)MEMORY[0x24BDAC760];
    v45 = 1107296256;
    v46 = sub_23AAB5FC8;
    v47 = &block_descriptor_263;
    v36 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v33, sel_itemForURL_request_completionHandler_, v34, v35, v36);
    _Block_release(v36);

    v37 = *(void (**)(char *, uint64_t))(v14 + 8);
    v37(v25, v21);
    v37(v19, v21);
  }
}

uint64_t sub_23ABFA7B4()
{
  return sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC04A98);
}

void sub_23ABFA960(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  NSObject *v18;
  NSObject *v19;
  _QWORD *v20;
  uint8_t *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[6];

  v4 = v3;
  v8 = sub_23B1C5E4C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v13 = a1;
  v14 = sub_23B1C5E40();
  v15 = sub_23B1C6A94();
  if (os_log_type_enabled(v14, v15))
  {
    v30 = v8;
    v16 = swift_slowAlloc();
    v29 = v9;
    v17 = (uint8_t *)v16;
    v28 = (_QWORD *)swift_slowAlloc();
    v32 = v4;
    aBlock[0] = v13;
    *(_DWORD *)v17 = 138412290;
    v18 = v13;
    v31 = a2;
    v19 = v18;
    v8 = v30;
    v4 = v32;
    sub_23B1C6CBC();
    v20 = v28;
    *v28 = v13;

    a2 = v31;
    _os_log_impl(&dword_23AA66000, v14, v15, "fetch id for %@", v17, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v20, -1, -1);
    v21 = v17;
    v9 = v29;
    MEMORY[0x23B8614BC](v21, -1, -1);
  }
  else
  {

    v14 = v13;
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v22 = *(void **)(v4 + 16);
  v23 = *(_QWORD *)(v4 + 32);
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = v4;
  v24[3] = v13;
  v24[4] = a2;
  v24[5] = a3;
  aBlock[4] = sub_23AAB847C;
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AAB5FC8;
  aBlock[3] = &block_descriptor_70_1;
  v25 = _Block_copy(aBlock);
  v26 = v13;
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v22, sel_itemForItemID_creatingPlaceholderIfMissing_ignoreAlternateContentsURL_request_completionHandler_, v26, 0, 0, v23, v25);
  _Block_release(v25);
}

void sub_23ABFABF8(void *a1, uint64_t a2, void *a3, void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  char *v22;
  id v23;
  id v24;
  id v25;
  NSObject *v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  os_log_t v35;
  uint64_t v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD, _QWORD);
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v10 = sub_23B1C5E4C();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v13;
  if (a2)
  {
    swift_getErrorValue();
    v14 = (uint64_t)sub_23B0D9CF0(v47);
  }
  else
  {
    sub_23AA9F52C(0, &qword_2569E27C0);
    v14 = sub_23B1C6C74();
  }
  v15 = (void *)v14;
  v16 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v17 = a1;
  v46 = v12;
  v18 = v17;
  v19 = v15;
  v20 = a3;
  v21 = v18;
  v22 = v46;
  v23 = v21;
  v24 = v19;
  v25 = v20;
  v26 = sub_23B1C5E40();
  v44 = sub_23B1C6A94();
  if (os_log_type_enabled(v26, (os_log_type_t)v44))
  {
    v37 = v26;
    v39 = v10;
    v41 = a2;
    v42 = a5;
    v43 = a4;
    v27 = swift_slowAlloc();
    v28 = (_QWORD *)swift_slowAlloc();
    v38 = swift_slowAlloc();
    v48 = (uint64_t)v25;
    v49 = v38;
    *(_DWORD *)v27 = 138412802;
    v29 = v25;
    sub_23B1C6CBC();
    *v28 = v25;

    *(_WORD *)(v27 + 12) = 2080;
    v40 = a1;
    if (a1)
    {
      v30 = objc_msgSend(v23, sel_description);
      v31 = sub_23B1C63E0();
      v33 = v32;

    }
    else
    {
      v33 = 0xE500000000000000;
      v31 = 0x3E6C696E3CLL;
    }
    v48 = sub_23AABEC68(v31, v33, &v49);
    sub_23B1C6CBC();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 22) = 2112;
    v48 = (uint64_t)v24;
    v34 = v24;
    sub_23B1C6CBC();
    v28[1] = v24;

    v35 = v37;
    _os_log_impl(&dword_23AA66000, v37, (os_log_type_t)v44, "result of fetch id for %@: %s, %@", (uint8_t *)v27, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v28, -1, -1);
    v36 = v38;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v36, -1, -1);
    MEMORY[0x23B8614BC](v27, -1, -1);

    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v39);
    a4 = v43;
    a1 = v40;
    a2 = v41;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v45 + 8))(v22, v10);
  }
  a4(a1, a2);

}

void sub_23ABFB020(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6)
{
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  _QWORD v15[6];

  if (a1)
  {
    v9 = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(a6 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(v9, sel_session);

      v12 = objc_msgSend(v11, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a6 + 32), sel_pid), -1.0);
      swift_unknownObjectRelease();
      sub_23AA9F52C(0, (unint64_t *)&unk_2542E2010);
      v13 = (void *)sub_23B1C66F8();
      v15[4] = a4;
      v15[5] = a5;
      v15[0] = MEMORY[0x24BDAC760];
      v15[1] = 1107296256;
      v15[2] = sub_23ABF84FC;
      v15[3] = &block_descriptor_236;
      v14 = _Block_copy(v15);
      swift_retain();
      swift_release();
      objc_msgSend(v12, sel_preflightTrashItemIDs_completionHandler_, v13, v14);
      _Block_release(v14);
      swift_unknownObjectRelease();

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    a4();
  }
}

void *sub_23ABFB274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *result;
  void *v8;
  id v9;
  id v10;
  void *v11;
  _QWORD v12[6];

  result = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (result)
  {
    v8 = result;
    v9 = objc_msgSend(result, sel_session);

    v10 = objc_msgSend(v9, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a2 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    v12[4] = a3;
    v12[5] = a4;
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 1107296256;
    v12[2] = sub_23ABFB398;
    v12[3] = &block_descriptor_227;
    v11 = _Block_copy(v12);
    swift_retain();
    swift_release();
    objc_msgSend(v10, sel_fetchTrashIdentifiersWithCompletionHandler_, v11);
    _Block_release(v11);
    return (void *)swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23ABFB398(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_23ABFB3AC(a1, a2, a3, (unint64_t *)&unk_2542E2010);
}

uint64_t sub_23ABFB3AC(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v5 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_23AA9F52C(0, a4);
    v5 = sub_23B1C6704();
  }
  swift_retain();
  v7 = a3;
  v6(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_23ABFB52C(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  id v7;

  v5 = a1;
  if (a1)
  {
    sub_23AA9F52C(0, (unint64_t *)&unk_2542E2010);
    v5 = (void *)sub_23B1C66F8();
  }
  if (a2)
    v6 = sub_23B1C5870();
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v5);

}

void sub_23ABFB5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  _QWORD v15[6];

  v9 = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, sel_session);

    v12 = objc_msgSend(v11, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a2 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    v15[4] = a4;
    v15[5] = a5;
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 1107296256;
    v15[2] = sub_23AC07CD8;
    v15[3] = &block_descriptor_215_0;
    v13 = _Block_copy(v15);
    swift_retain();
    swift_release();
    v14 = objc_msgSend(v12, sel_fetchPublishingURLForItemID_completionHandler_, a3, v13);
    _Block_release(v13);
    swift_unknownObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

void sub_23ABFB7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  _QWORD v17[6];

  v11 = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, sel_session);

    v14 = objc_msgSend(v13, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a2 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    v17[4] = a5;
    v17[5] = a6;
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 1107296256;
    v17[2] = sub_23AC46D44;
    v17[3] = &block_descriptor_206;
    v15 = _Block_copy(v17);
    swift_retain();
    swift_release();
    v16 = objc_msgSend(v14, sel_disconnectDomainID_options_completionHandler_, a3, a4, v15);
    _Block_release(v15);
    swift_unknownObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

void sub_23ABFB9BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  _QWORD v15[6];

  v9 = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, sel_session);

    v12 = objc_msgSend(v11, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a2 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    v13 = (void *)sub_23B1C63BC();
    v15[4] = a5;
    v15[5] = a6;
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 1107296256;
    v15[2] = sub_23AC46D44;
    v15[3] = &block_descriptor_185_0;
    v14 = _Block_copy(v15);
    swift_retain();
    swift_release();
    objc_msgSend(v12, sel_wakeForSessionIdentifier_completionHandler_, v13, v14);
    _Block_release(v14);
    swift_unknownObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

void sub_23ABFBB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  _QWORD v16[6];

  v10 = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(v10, sel_session);

    v13 = objc_msgSend(v12, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a2 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    v14 = (void *)sub_23B1C5870();
    v16[4] = a5;
    v16[5] = a6;
    v16[0] = MEMORY[0x24BDAC760];
    v16[1] = 1107296256;
    v16[2] = sub_23ABFBCD8;
    v16[3] = &block_descriptor_164;
    v15 = _Block_copy(v16);
    swift_retain();
    swift_release();
    objc_msgSend(v13, sel_attemptRecoveryFromError_optionIndex_completionHandler_, v14, a4, v15);
    _Block_release(v15);
    swift_unknownObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

void sub_23ABFBCD8(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t sub_23ABFBE20(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  _BYTE *v19;
  id v20;
  uint64_t v21;
  id v22;
  id v24;
  id v25;
  unint64_t v29;
  uint64_t v30;

  v14 = MEMORY[0x24BEE4AF8];
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE870);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_23B1CE680;
    *(_QWORD *)(v15 + 32) = a3;
    v29 = v15;
    sub_23B1C671C();
    v16 = v29;
  }
  else
  {
    v16 = MEMORY[0x24BEE4AF8];
  }
  if (a2)
    v17 = (uint64_t)a2;
  else
    v17 = v14;
  v30 = v17;
  swift_bridgeObjectRetain();
  v18 = a3;
  sub_23AAB6B5C(v16);
  v19 = *(_BYTE **)(v8 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  v25 = v18;
  swift_retain();
  v20 = a1;
  v21 = a8;
  v22 = v20;
  v24 = a4;
  swift_bridgeObjectRetain();
  sub_23ACDE0AC(v30, v19, v8, v22, a2, a3, a4, a5, a6, a7, v21);
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_23ABFBFB8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9)
{
  void *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  _QWORD aBlock[6];

  v17 = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, sel_session);

    v20 = objc_msgSend(v19, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a1 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    if (a3)
    {
      sub_23AA9F52C(0, &qword_2542E7560);
      a3 = (void *)sub_23B1C66F8();
    }
    if (a6)
      a6 = (void *)sub_23B1C6890();
    if (a7)
      a7 = (void *)sub_23B1C6890();
    aBlock[4] = a8;
    aBlock[5] = a9;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_23ABFC194;
    aBlock[3] = &block_descriptor_64;
    v21 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v20, sel_userInteractionErrorsForPerformingAction_sourceItems_destinationItem_fpProviderDomainId_sourceItemKeysAllowList_destinationItemKeysAllowList_completionHandler_, a2, a3, a4, a5, a6, a7, v21);
    _Block_release(v21);
    swift_unknownObjectRelease();

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_23ABFC194(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE880);
  v2 = sub_23B1C6704();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_23ABFC354(uint64_t a1, uint64_t a2)
{
  id v3;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE880);
  v3 = (id)sub_23B1C66F8();
  (*(void (**)(uint64_t, id))(a2 + 16))(a2, v3);

}

void sub_23ABFC3AC(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, _BYTE *a6)
{
  void *v6;
  void *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  void (*v23)(_QWORD);
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  unint64_t v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  NSObject *v49;
  id v50;
  uint64_t v51;
  _QWORD *v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  id v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _BYTE v70[12];
  int v71;
  _QWORD *v72;
  uint64_t v73;
  void *v74;
  uint8_t *v75;
  void (*v76)(_QWORD);
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  unint64_t v84;

  v7 = v6;
  v77 = a6;
  v81 = a5;
  v12 = sub_23B1C5E4C();
  v78 = *(_QWORD *)(v12 - 8);
  v79 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = &v70[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v13);
  v17 = &v70[-v16];
  v18 = a1;
  v19 = sub_23AAB7B40(objc_msgSend(v18, sel_identifier));

  v20 = sub_23B0281A4(a2);
  v80 = v19;
  if (v6)
  {

    v21 = 0;
    v7 = 0;
  }
  else
  {
    v22 = v20;
    if (v20)
    {
      v23 = a4;
      v24 = *(void **)(*(_QWORD *)(a3 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_providerDomainID);
      v25 = objc_allocWithZone(MEMORY[0x24BDC82E8]);
      v26 = v24;
      a4 = v23;
      v7 = 0;
      v27 = v26;
      v21 = objc_msgSend(v25, sel_initWithProviderDomainID_itemIdentifier_, v26, v22);

    }
    else
    {
      v21 = 0;
    }
  }
  v84 = MEMORY[0x24BEE4AF8];
  v82 = v21;
  v28 = v18;
  MEMORY[0x23B85F008]();
  if (*(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_23B1C6740();
  sub_23B1C6788();
  sub_23B1C671C();
  if (v21)
  {
    v29 = v82;
    MEMORY[0x23B85F008]();
    if (*(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_23B1C6740();
    sub_23B1C6788();
    sub_23B1C671C();
  }
  v30 = v84;

  v31 = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(a3 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v31)
  {
    v32 = v31;
    v33 = objc_msgSend(v31, sel_indexer);

    if (v33)
    {
      type metadata accessor for FPFSIndexer();
      v34 = swift_dynamicCastClass();
      if (v34)
      {
        v35 = v34;
        if (v30 >> 62)
        {
          swift_bridgeObjectRetain();
          v58 = sub_23B1C7088();
          swift_bridgeObjectRelease();
          if (v58 >= 1)
            goto LABEL_17;
        }
        else if (*(uint64_t *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
        {
LABEL_17:
          v36 = (id)fpfs_current_or_default_log();
          sub_23B1C5E58();
          swift_bridgeObjectRetain_n();
          v37 = v33;
          v38 = sub_23B1C5E40();
          v39 = sub_23B1C6A94();
          v40 = v39;
          if (os_log_type_enabled(v38, v39))
          {
            v41 = swift_slowAlloc();
            v74 = v7;
            v75 = (uint8_t *)v30;
            v76 = a4;
            v42 = v41;
            v72 = (_QWORD *)swift_slowAlloc();
            v73 = swift_slowAlloc();
            v84 = v73;
            *(_DWORD *)v42 = 136315394;
            v43 = sub_23AA9F52C(0, (unint64_t *)&unk_2542E2010);
            swift_bridgeObjectRetain();
            v44 = v37;
            v45 = v35;
            v46 = MEMORY[0x23B85F02C](v75, v43);
            v48 = v47;
            swift_bridgeObjectRelease();
            v83 = sub_23AABEC68(v46, v48, (uint64_t *)&v84);
            sub_23B1C6CBC();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v42 + 12) = 2112;
            v71 = v40;
            v83 = v45;
            v49 = v38;
            v50 = v44;
            v51 = v45;
            v37 = v44;
            sub_23B1C6CBC();
            v52 = v72;
            *v72 = v51;

            v53 = v49;
            _os_log_impl(&dword_23AA66000, v49, (os_log_type_t)v71, "Deleting item ids:%s, with indexer %@", (uint8_t *)v42, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
            swift_arrayDestroy();
            MEMORY[0x23B8614BC](v52, -1, -1);
            v54 = v73;
            swift_arrayDestroy();
            MEMORY[0x23B8614BC](v54, -1, -1);
            v55 = v42;
            v30 = (unint64_t)v75;
            a4 = v76;
            MEMORY[0x23B8614BC](v55, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(_BYTE *, uint64_t))(v78 + 8))(v17, v79);
          v56 = (uint64_t)v77;
          v57 = (_QWORD *)swift_allocObject();
          v57[2] = v30;
          v57[3] = a4;
          v57[4] = v81;
          swift_bridgeObjectRetain();
          swift_retain();
          sub_23B0BC41C(MEMORY[0x24BEE4AF8], v30, v56, (uint64_t)sub_23AC029A0, (uint64_t)v57);
          swift_release();
          swift_bridgeObjectRelease();

          goto LABEL_27;
        }
      }

    }
  }
  v59 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  swift_bridgeObjectRetain();
  v60 = sub_23B1C5E40();
  v61 = sub_23B1C6AA0();
  if (os_log_type_enabled(v60, v61))
  {
    v76 = a4;
    v62 = (uint8_t *)swift_slowAlloc();
    v63 = swift_slowAlloc();
    v77 = v15;
    v64 = v63;
    v84 = v63;
    *(_DWORD *)v62 = 136315138;
    v75 = v62 + 4;
    v65 = sub_23AA9F52C(0, (unint64_t *)&unk_2542E2010);
    v66 = swift_bridgeObjectRetain();
    v67 = MEMORY[0x23B85F02C](v66, v65);
    v69 = v68;
    swift_bridgeObjectRelease();
    v83 = sub_23AABEC68(v67, v69, (uint64_t *)&v84);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease_n();
    a4 = v76;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23AA66000, v60, v61, "FPFSIndexer is missing for fpfs backed or no ids to delete: %s.", v62, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v64, -1, -1);
    MEMORY[0x23B8614BC](v62, -1, -1);

    (*(void (**)(_BYTE *, uint64_t))(v78 + 8))(v77, v79);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(_BYTE *, uint64_t))(v78 + 8))(v15, v79);
  }
  a4(0);
LABEL_27:
  swift_release();

}

void sub_23ABFCB10(void *a1, unint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v8 = sub_23B1C5E4C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v52 - v13;
  if (!a1)
  {
    v34 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    swift_bridgeObjectRetain_n();
    v35 = sub_23B1C5E40();
    v36 = sub_23B1C6A94();
    if (os_log_type_enabled(v35, (os_log_type_t)v36))
    {
      v37 = swift_slowAlloc();
      v57 = a3;
      v38 = (uint8_t *)v37;
      v39 = swift_slowAlloc();
      v60 = v39;
      v56 = a4;
      *(_DWORD *)v38 = 136315138;
      v40 = sub_23AA9F52C(0, (unint64_t *)&unk_2542E2010);
      v55 = v8;
      v41 = v40;
      v42 = swift_bridgeObjectRetain();
      v43 = MEMORY[0x23B85F02C](v42, v41);
      v54 = v9;
      v45 = v44;
      swift_bridgeObjectRelease();
      v59 = sub_23AABEC68(v43, v45, &v60);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23AA66000, v35, (os_log_type_t)v36, "Succeeded deleting %s from spotlight index.", v38, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v39, -1, -1);
      v46 = v38;
      a3 = v57;
      MEMORY[0x23B8614BC](v46, -1, -1);

      (*(void (**)(char *, uint64_t))(v54 + 8))(v14, v55);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
    a3(0);
    return;
  }
  v15 = a1;
  v16 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  swift_bridgeObjectRetain();
  v17 = a1;
  swift_bridgeObjectRetain();
  v18 = a1;
  v19 = sub_23B1C5E40();
  v20 = sub_23B1C6A94();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v55 = v8;
    v22 = v21;
    v23 = swift_slowAlloc();
    v57 = a3;
    v24 = (_QWORD *)v23;
    v53 = swift_slowAlloc();
    v60 = v53;
    *(_DWORD *)v22 = 136315394;
    v25 = sub_23AA9F52C(0, (unint64_t *)&unk_2542E2010);
    v56 = a4;
    v26 = v25;
    v27 = swift_bridgeObjectRetain();
    v28 = MEMORY[0x23B85F02C](v27, v26);
    v54 = v9;
    v30 = v29;
    swift_bridgeObjectRelease();
    v59 = sub_23AABEC68(v28, v30, &v60);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2112;
    swift_getErrorValue();
    v31 = sub_23B0D9CF0(v58);
    v59 = (uint64_t)v31;
    sub_23B1C6CBC();
    *v24 = v31;

    _os_log_impl(&dword_23AA66000, v19, v20, "Could not delete %s from spotlight index: %@", (uint8_t *)v22, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    v32 = v24;
    a3 = v57;
    MEMORY[0x23B8614BC](v32, -1, -1);
    v33 = v53;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v33, -1, -1);
    MEMORY[0x23B8614BC](v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v55);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  if (!(a2 >> 62))
  {
    v47 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v47)
      goto LABEL_9;
LABEL_17:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  if (!sub_23B1C7088())
    goto LABEL_17;
LABEL_9:
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_18:
    v48 = (id)MEMORY[0x23B85F860](0, a2);
    goto LABEL_12;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v48 = *(id *)(a2 + 32);
LABEL_12:
    v49 = v48;
    swift_bridgeObjectRelease();
    v50 = objc_msgSend(v49, sel_identifier);

    v51 = (id)FPItemNotFoundError();
    a3(v51);

    return;
  }
  __break(1u);
}

uint64_t sub_23ABFD0A4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  NSObject *v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  NSObject *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  id v34;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  NSObject *v45;

  v12 = sub_23B1C5E4C();
  v41 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2 & 1;
  v16 = swift_allocObject();
  v43 = a1;
  swift_weakInit();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a3;
  v17[3] = a4;
  v42 = v17;
  v17[4] = v16;
  swift_retain();
  v18 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v19 = a5;
  v39 = v14;
  v20 = sub_23B1C5E40();
  v21 = sub_23B1C6A94();
  v22 = os_log_type_enabled(v20, v21);
  v40 = a2 & 1;
  if (v22)
  {
    v23 = swift_slowAlloc();
    v37 = (_QWORD *)swift_slowAlloc();
    v38 = a6;
    *(_DWORD *)v23 = 138412546;
    v45 = v19;
    v24 = v19;
    sub_23B1C6CBC();
    v25 = v37;
    *v37 = v19;

    *(_WORD *)(v23 + 12) = 1024;
    v44 = v15;
    sub_23B1C6CBC();
    _os_log_impl(&dword_23AA66000, v20, v21, "Request to delete item with ID: %@; recursively %{BOOL}d",
      (uint8_t *)v23,
      0x12u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    a6 = v38;
    MEMORY[0x23B8614BC](v25, -1, -1);
    MEMORY[0x23B8614BC](v23, -1, -1);
  }
  else
  {

    v20 = v19;
  }

  (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v12);
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = -[NSObject identifier](v19, sel_identifier);
  *(_QWORD *)(v26 + 24) = objc_msgSend((id)objc_opt_self(), sel_requestForSelf);
  v27 = v43;
  v28 = *(_QWORD *)(v43 + 16);
  v29 = v19;
  v30 = sub_23AAB7B40(-[NSObject identifier](v29, sel_identifier));

  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = v29;
  *(_QWORD *)(v31 + 24) = a6;
  *(_QWORD *)(v31 + 32) = v27;
  *(_QWORD *)(v31 + 40) = sub_23AAFCE78;
  *(_QWORD *)(v31 + 48) = v42;
  *(_BYTE *)(v31 + 56) = v40;
  v32 = objc_allocWithZone(MEMORY[0x24BDD1768]);
  v33 = v29;
  swift_retain();
  swift_retain();
  swift_retain();
  v34 = objc_msgSend(v32, sel_init);
  swift_retain();
  swift_retain();
  sub_23AAEF10C(v30, 1, 0, v26 | 2, v34, 0, v28, (void (*)(uint64_t *))sub_23AC028B0, v31, v26 | 2);
  swift_release();
  swift_release();

  swift_release_n();
  return swift_release_n();
}

void sub_23ABFD468(uint64_t a1, void *a2, uint64_t a3, NSObject *a4, void (*a5)(_QWORD), uint64_t a6, int a7)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  id v21;
  void *v22;
  id v23;
  char v24;
  id v25;
  char *v26;
  NSObject *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;
  NSObject *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  void (*v44)(_QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  id v49;
  id v50;
  char *v51;
  id v52;
  id v53;
  id v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  Class isa;
  uint64_t v70;
  void (*v71)(_QWORD);
  uint64_t v72;
  _QWORD *v73;
  NSObject *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(_QWORD);
  uint64_t v83;
  id v84;
  uint64_t v85;
  NSObject *v86;
  _QWORD v87[12];
  unsigned __int8 v88;

  LODWORD(v81) = a7;
  v85 = a6;
  v86 = a4;
  v82 = a5;
  v83 = a3;
  v84 = a2;
  v8 = type metadata accessor for VFSItem(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23B1C5E4C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v77 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E21C0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (void **)((char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23AA8EFC8(a1, (uint64_t)v20, &qword_2542E21C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v21 = v84;
    v80 = v12;
    v81 = v11;
    v22 = *v20;
    _s3__C4CodeOMa_1(0);
    v87[0] = -1005;
    v23 = v22;
    sub_23AA7E38C((unint64_t *)&qword_2542E1FA0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_23B1CCA68);
    v24 = sub_23B1C575C();

    if ((v24 & 1) != 0)
    {

      v25 = (id)fpfs_current_or_default_log();
      v26 = v17;
      sub_23B1C5E58();
      v27 = v21;
      v28 = sub_23B1C5E40();
      v29 = sub_23B1C6A94();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc();
        v31 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v30 = 138412290;
        v87[0] = v27;
        v32 = v27;
        sub_23B1C6CBC();
        *v31 = v27;

        _os_log_impl(&dword_23AA66000, v28, v29, "Item %@ does not exist, deleting from index", v30, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v31, -1, -1);
        MEMORY[0x23B8614BC](v30, -1, -1);
      }
      else
      {

        v28 = v27;
      }
      v66 = v83;
      v67 = v80;
      v68 = v86;

      (*(void (**)(char *, uint64_t))(v67 + 8))(v26, v81);
      isa = v68[2].isa;
      v70 = swift_allocObject();
      v71 = v82;
      v72 = v85;
      *(_QWORD *)(v70 + 16) = v82;
      *(_QWORD *)(v70 + 24) = v72;
      v73 = (_QWORD *)swift_allocObject();
      v73[2] = v27;
      v73[3] = isa;
      v73[4] = v66;
      v73[5] = v71;
      v73[6] = v72;
      v73[7] = 0;
      swift_retain_n();
      v74 = v27;
      swift_retain();
      swift_retain();
      sub_23AA901C4((uint64_t)"deleteSearchableItem(itemID:db:indexReason:completionHandler:)", 62, 2, sub_23AA956C8, v70, (uint64_t)sub_23AC02980, (uint64_t)v73);
      swift_release();
      swift_release();
    }
    else
    {
      v50 = (id)fpfs_current_or_default_log();
      v51 = v15;
      sub_23B1C5E58();
      v52 = v22;
      v53 = v21;
      v54 = v22;
      v55 = v53;
      v56 = sub_23B1C5E40();
      v57 = sub_23B1C6AA0();
      v58 = v57;
      if (os_log_type_enabled(v56, v57))
      {
        v59 = swift_slowAlloc();
        LODWORD(v84) = v58;
        v60 = v59;
        v61 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v60 = 138412546;
        v87[0] = v55;
        v62 = v55;
        v86 = v56;
        v63 = v62;
        sub_23B1C6CBC();
        *v61 = v55;

        *(_WORD *)(v60 + 12) = 2112;
        v64 = v22;
        v65 = _swift_stdlib_bridgeErrorToNSError();
        v87[0] = v65;
        v56 = v86;
        sub_23B1C6CBC();
        v61[1] = v65;

        _os_log_impl(&dword_23AA66000, v56, (os_log_type_t)v84, "Can't find %@ error %@", (uint8_t *)v60, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v61, -1, -1);
        MEMORY[0x23B8614BC](v60, -1, -1);
      }
      else
      {

      }
      v75 = v81;

      (*(void (**)(char *, uint64_t))(v80 + 8))(v51, v75);
      v76 = v22;
      v82(v22);

    }
  }
  else
  {
    sub_23AB3CAF0((uint64_t)v20, (uint64_t)v10);
    v77 = *(_QWORD *)(*((_QWORD *)v86[2].isa + 4) + 16);
    type metadata accessor for VFSFileTree(0);
    v33 = swift_dynamicCastClassUnconditional();
    v79 = *(_QWORD *)v10;
    v80 = v33;
    v34 = &v10[*(int *)(v8 + 36)];
    v35 = *(_QWORD *)v34;
    v36 = *((unsigned int *)v34 + 2);
    v37 = *((_QWORD *)v34 + 2);
    v39 = *((_QWORD *)v10 + 2);
    v40 = v10[24];
    v41 = *((_QWORD *)v10 + 4);
    v42 = *((_QWORD *)v10 + 5);
    v88 = v34[24];
    v38 = v88;
    v78 = v10[8];
    v43 = (_QWORD *)swift_allocObject();
    v44 = v82;
    v43[2] = v84;
    v43[3] = v44;
    v45 = v83;
    v43[4] = v85;
    v43[5] = v45;
    v43[6] = v86;
    v87[0] = v35;
    v87[1] = v36;
    v87[2] = v37;
    v87[3] = v38;
    v87[4] = 0;
    v87[5] = v39;
    v87[6] = v40;
    v87[7] = v41;
    v87[8] = v42;
    memset(&v87[9], 0, 24);
    v46 = swift_allocObject();
    v47 = v80;
    *(_QWORD *)(v46 + 16) = v79;
    *(_BYTE *)(v46 + 24) = v78;
    *(_QWORD *)(v46 + 32) = v47;
    *(_QWORD *)(v46 + 40) = sub_23AC02900;
    *(_QWORD *)(v46 + 48) = v43;
    *(_QWORD *)(v46 + 56) = v35;
    *(_DWORD *)(v46 + 64) = v36;
    *(_QWORD *)(v46 + 72) = v37;
    *(_BYTE *)(v46 + 80) = v88;
    *(_QWORD *)(v46 + 88) = 0;
    *(_QWORD *)(v46 + 96) = v39;
    *(_BYTE *)(v46 + 104) = v40;
    *(_QWORD *)(v46 + 112) = v41;
    *(_QWORD *)(v46 + 120) = v42;
    v48 = v81 & 1;
    *(_QWORD *)(v46 + 136) = 0;
    *(_QWORD *)(v46 + 144) = 0;
    *(_QWORD *)(v46 + 128) = 0;
    *(_BYTE *)(v46 + 152) = v48;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v49 = v84;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_23AA7BAC4(v79, v78, (uint64_t)v87, 0, 0, (uint64_t)sub_23AC0295C, v46);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    sub_23AB3CB34((uint64_t)v10);
  }
}

void sub_23ABFDBDC(uint64_t a1, void *a2, void (*a3)(_QWORD), uint64_t a4, NSObject *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  NSObject *v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  NSObject *v45;
  NSObject *v46;
  Class isa;
  uint64_t v48;
  void *v49;
  NSObject *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  void (*v54)(_QWORD);
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD aBlock[6];

  v55 = a6;
  v56 = a5;
  v57 = a4;
  v9 = sub_23B1C5E4C();
  v58 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v51 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2569E27B0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (void **)((char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23AA8EFC8(a1, (uint64_t)v17, (uint64_t *)&unk_2569E27B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = *v17;
    v19 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v20 = a2;
    v21 = v18;
    v22 = v20;
    v23 = v18;
    v24 = sub_23B1C5E40();
    v25 = sub_23B1C6AA0();
    v26 = v25;
    if (os_log_type_enabled(v24, v25))
    {
      v27 = swift_slowAlloc();
      v54 = a3;
      v28 = v27;
      v29 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v28 = 138412546;
      v56 = v24;
      LODWORD(v55) = v26;
      aBlock[0] = v22;
      v53 = v9;
      v30 = v22;
      sub_23B1C6CBC();
      *v29 = v22;

      *(_WORD *)(v28 + 12) = 2112;
      swift_getErrorValue();
      v31 = sub_23B0D9CF0(v59);
      aBlock[0] = v31;
      v9 = v53;
      v24 = v56;
      sub_23B1C6CBC();
      v29[1] = v31;

      _os_log_impl(&dword_23AA66000, v24, (os_log_type_t)v55, "Failed to delete item %@ with error %@", (uint8_t *)v28, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v29, -1, -1);
      v32 = v28;
      a3 = v54;
      MEMORY[0x23B8614BC](v32, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v58 + 8))(v14, v9);
    v40 = v18;
    a3(v18);

  }
  else
  {
    v33 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v34 = a2;
    v35 = sub_23B1C5E40();
    v36 = sub_23B1C6A94();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      v52 = (_QWORD *)swift_slowAlloc();
      v53 = v9;
      v54 = a3;
      *(_DWORD *)v37 = 138412290;
      aBlock[0] = v34;
      v38 = v34;
      v9 = v53;
      a3 = v54;
      sub_23B1C6CBC();
      v39 = v52;
      *v52 = v34;

      _os_log_impl(&dword_23AA66000, v35, v36, "Succeeded deleting item with itemID %@, not wating on ingestion", v37, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v39, -1, -1);
      MEMORY[0x23B8614BC](v37, -1, -1);
    }
    else
    {

      v35 = v34;
    }

    (*(void (**)(char *, uint64_t))(v58 + 8))(v12, v9);
    v41 = *(_QWORD *)(v55 + 16);
    v42 = swift_allocObject();
    v43 = v57;
    *(_QWORD *)(v42 + 16) = a3;
    *(_QWORD *)(v42 + 24) = v43;
    v44 = (_QWORD *)swift_allocObject();
    v44[2] = v34;
    v44[3] = v41;
    v45 = v56;
    v44[4] = v56;
    v44[5] = a3;
    v44[6] = v43;
    v44[7] = 0;
    swift_retain_n();
    v46 = v34;
    swift_retain();
    swift_retain();
    sub_23AA901C4((uint64_t)"deleteSearchableItem(itemID:db:indexReason:completionHandler:)", 62, 2, sub_23AA956C8, v42, (uint64_t)sub_23AC02980, (uint64_t)v44);
    swift_release();
    swift_release();
    isa = v45[2].isa;
    v48 = swift_allocObject();
    *(_QWORD *)(v48 + 16) = v46;
    aBlock[4] = sub_23AC02A40;
    aBlock[5] = v48;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_23AAB5FC8;
    aBlock[3] = &block_descriptor_61;
    v49 = _Block_copy(aBlock);
    v50 = v46;
    swift_release();
    -[objc_class forceFSIngestionForItemID:completionHandler:](isa, sel_forceFSIngestionForItemID_completionHandler_, v50, v49);
    _Block_release(v49);
    sub_23AA8A05C((uint64_t)v17, (uint64_t *)&unk_2569E27B0);
  }
}

uint64_t sub_23ABFE174(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  NSObject *v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  NSObject *v21;
  NSObject *v22;
  os_log_t v23;
  _QWORD *v24;
  id v25;
  NSObject *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  _QWORD *v31;
  NSObject *v32;
  _QWORD *v33;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;

  v5 = sub_23B1C5E4C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v35 - v10;
  if (a2)
  {
    v12 = a2;
    v13 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v14 = a3;
    v15 = a2;
    v16 = sub_23B1C5E40();
    v17 = sub_23B1C6AA0();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v19 = swift_slowAlloc();
      v36 = v6;
      v20 = (_QWORD *)v19;
      *(_DWORD *)v18 = 138412546;
      v35 = v16;
      v39 = v14;
      v37 = v5;
      v21 = v14;
      sub_23B1C6CBC();
      *v20 = v14;

      *(_WORD *)(v18 + 12) = 2112;
      swift_getErrorValue();
      v22 = sub_23B0D9CF0(v38);
      v39 = v22;
      v5 = v37;
      sub_23B1C6CBC();
      v20[1] = v22;

      v23 = v35;
      _os_log_impl(&dword_23AA66000, v35, v17, "Failed to force ingestion of item %@ with error %@", (uint8_t *)v18, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      v24 = v20;
      v6 = v36;
      MEMORY[0x23B8614BC](v24, -1, -1);
      MEMORY[0x23B8614BC](v18, -1, -1);

    }
    else
    {

    }
    v11 = v9;
  }
  else
  {
    v25 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v26 = a3;
    v27 = sub_23B1C5E40();
    v28 = sub_23B1C6A94();
    if (os_log_type_enabled(v27, v28))
    {
      v36 = v6;
      v29 = (uint8_t *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      v37 = v5;
      v31 = (_QWORD *)v30;
      *(_DWORD *)v29 = 138412290;
      v39 = v26;
      v32 = v26;
      v6 = v36;
      sub_23B1C6CBC();
      *v31 = v26;

      _os_log_impl(&dword_23AA66000, v27, v28, "Succeeded ingesting deletion for item with itemID %@", v29, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      v33 = v31;
      v5 = v37;
      MEMORY[0x23B8614BC](v33, -1, -1);
      MEMORY[0x23B8614BC](v29, -1, -1);
    }
    else
    {

      v27 = v26;
    }

  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

id sub_23ABFE510(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  id v31;
  NSObject *v32;
  id v33;
  void *v34;
  dispatch_group_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  id result;
  void *v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  id v62;
  id v63;
  dispatch_group_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  dispatch_group_t v85;
  uint64_t v86;
  NSObject *v87;
  _BYTE *v88;
  char *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t aBlock[7];

  v84 = a2;
  v73 = sub_23B1C602C();
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  v71 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_23B1C60A4();
  v69 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v68 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)sub_23B1C5E4C();
  v10 = *(v9 - 1);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  swift_bridgeObjectRetain_n();
  v14 = sub_23B1C5E40();
  v15 = sub_23B1C6A94();
  v16 = os_log_type_enabled(v14, v15);
  v67 = a4;
  v66 = a3;
  if (v16)
  {
    v91 = v10;
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    aBlock[0] = v18;
    v90 = v9;
    *(_DWORD *)v17 = 136315138;
    v19 = sub_23AA9F52C(0, (unint64_t *)&unk_2542E2010);
    v20 = swift_bridgeObjectRetain();
    v21 = MEMORY[0x23B85F02C](v20, v19);
    v23 = v22;
    swift_bridgeObjectRelease();
    aBlock[6] = sub_23AABEC68(v21, v23, aBlock);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23AA66000, v14, v15, "Request to delete items: %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v18, -1, -1);
    MEMORY[0x23B8614BC](v17, -1, -1);

    (*(void (**)(char *, id))(v91 + 8))(v12, v90);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, _QWORD *))(v10 + 8))(v12, v9);
  }
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = 0;
  v74 = (void **)(v24 + 16);
  v85 = dispatch_group_create();
  if (a1 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    v25 = sub_23B1C7088();
    if (v25)
      goto LABEL_6;
LABEL_30:
    swift_bridgeObjectRelease();
    v56 = *(_QWORD *)(v86 + 16);
    v57 = a1;
    v58 = *(void **)(v56 + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log);
    v59 = *(void **)(v56 + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue);
    v60 = (_QWORD *)swift_allocObject();
    v60[2] = v24;
    v60[3] = v57;
    v61 = v67;
    v60[4] = v66;
    v60[5] = v61;
    swift_bridgeObjectRetain();
    swift_retain();
    v62 = v58;
    v63 = v59;
    swift_retain();
    v64 = v85;
    sub_23AA81A30((uint64_t)"deleteItems(with:options:completionHandler:)", 44, 2, v58, v63, (uint64_t)sub_23AC02864, (uint64_t)v60);
    swift_release();

    return (id)swift_release();
  }
  v25 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v25)
    goto LABEL_30;
LABEL_6:
  v88 = *(_BYTE **)(v86 + 16);
  v89 = &v88[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain];
  v79 = OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_started;
  v78 = OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_initializationGroup;
  v77 = OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log;
  v76 = OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue;
  v83 = a1 & 0xC000000000000001;
  swift_beginAccess();
  v26 = 4;
  v82 = v24;
  v80 = a1;
  v81 = v25;
  while (1)
  {
    if (v83)
      v33 = (id)MEMORY[0x23B85F860](v26 - 4, a1);
    else
      v33 = *(id *)(a1 + 8 * v26);
    v34 = v33;
    if (__OFADD__(v26 - 4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    v91 = v26 - 3;
    v35 = v85;
    dispatch_group_enter(v85);
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = v24;
    *(_QWORD *)(v36 + 24) = v35;
    v37 = swift_allocObject();
    *(_QWORD *)(v37 + 16) = sub_23AC027E0;
    *(_QWORD *)(v37 + 24) = v36;
    v38 = (_QWORD *)swift_allocObject();
    v38[2] = v84;
    v38[3] = sub_23AC027E0;
    v38[4] = v36;
    v38[5] = v34;
    v38[6] = v86;
    v39 = (void *)MEMORY[0x23B8615C4](v89);
    swift_retain_n();
    swift_retain_n();
    v32 = v35;
    v90 = v34;
    swift_retain();
    if (!v39)
      goto LABEL_20;
    if (!objc_msgSend(v39, sel_unableToStartup))
    {

LABEL_20:
      v87 = v32;
      if ((v88[v79] & 1) == 0)
      {
        v44 = (void *)MEMORY[0x23B8615C4](v89);
        if (v44)
        {
          v45 = v44;
          v75 = objc_msgSend(v44, sel_serialQueue);

          aBlock[4] = (uint64_t)nullsub_1;
          aBlock[5] = 0;
          aBlock[0] = MEMORY[0x24BDAC760];
          aBlock[1] = 1107296256;
          aBlock[2] = (uint64_t)sub_23AA698FC;
          aBlock[3] = (uint64_t)&block_descriptor_5;
          v46 = _Block_copy(aBlock);
          v47 = v68;
          sub_23B1C6068();
          v92 = MEMORY[0x24BEE4AF8];
          sub_23AA7E38C((unint64_t *)&unk_2542E43B0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E7470);
          sub_23AAB5A28((unint64_t *)&qword_2542E7480, (uint64_t *)&unk_2542E7470, MEMORY[0x24BEE12C8]);
          v48 = v71;
          v49 = v73;
          sub_23B1C6DE8();
          v50 = v75;
          MEMORY[0x23B85F470](0, v47, v48, v46);
          _Block_release(v46);

          (*(void (**)(char *, uint64_t))(v72 + 8))(v48, v49);
          (*(void (**)(char *, uint64_t))(v69 + 8))(v47, v70);
        }
      }
      v27 = v88;
      v28 = *(void **)&v88[v77];
      v29 = *(void **)&v88[v76];
      v30 = (_QWORD *)swift_allocObject();
      v30[2] = v27;
      v30[3] = sub_23AA698D4;
      v30[4] = v37;
      v30[5] = sub_23AC0281C;
      v30[6] = v38;
      v31 = v27;
      swift_retain();
      swift_retain();
      sub_23AA81A30((uint64_t)"deleteItem(with:options:completionHandler:)", 43, 2, v28, v29, (uint64_t)sub_23AC0282C, (uint64_t)v30);
      swift_release();
      swift_release();
      swift_release();
      a1 = v80;
      v32 = v87;
      goto LABEL_8;
    }
    v40 = (void *)MEMORY[0x23B8615C4](v89);
    if (!v40)
      break;
    v41 = v40;
    v42 = objc_msgSend(v40, sel_indexer);

    if (!v42)
      break;
    if ((objc_msgSend(v42, sel_needsAuthentication) & 1) == 0)
    {

      break;
    }
    type metadata accessor for NSFileProviderError(0);
    v92 = -1000;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&unk_2542E1E60, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderError, (uint64_t)&unk_23B1CC9C0);
    sub_23B1C5864();

    v43 = (id)aBlock[0];
LABEL_27:
    v54 = *v74;
    *v74 = v43;
    v55 = v43;

    dispatch_group_leave(v32);
    swift_release();
    swift_release();

LABEL_8:
    v24 = v82;
    swift_release();
    swift_release_n();
    ++v26;
    if (v91 == v81)
      goto LABEL_30;
  }
  v51 = (void *)MEMORY[0x23B8615C4](v89);
  if (v51)
  {
    v52 = v51;
    v43 = objc_msgSend(v51, sel_startupError);

    if (v43)
      goto LABEL_27;
  }
  result = (id)FPDomainUnavailableError();
  v43 = result;
  if (result)
    goto LABEL_27;
  __break(1u);
  return result;
}

void sub_23ABFEE94(void *a1, uint64_t a2, dispatch_group_t group)
{
  void *v6;
  id v7;

  if (a1)
  {
    swift_beginAccess();
    v6 = *(void **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = a1;
    v7 = a1;

  }
  dispatch_group_leave(group);
}

void sub_23ABFEF00(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint8_t *v37;
  void (*v38)(_QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[3];

  v7 = sub_23B1C5E4C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v48 - v12;
  v14 = (id *)(a1 + 16);
  swift_beginAccess();
  v15 = *(void **)(a1 + 16);
  if (v15)
  {
    v53 = v8;
    v54 = v7;
    v16 = v15;
    v17 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    swift_bridgeObjectRetain();
    v18 = v15;
    swift_bridgeObjectRetain();
    v19 = v15;
    v20 = sub_23B1C5E40();
    v21 = sub_23B1C6AA0();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v51 = (uint64_t)a3;
      v23 = v22;
      v49 = (_QWORD *)swift_slowAlloc();
      v50 = swift_slowAlloc();
      v57[0] = v50;
      *(_DWORD *)v23 = 136315394;
      v24 = sub_23AA9F52C(0, (unint64_t *)&unk_2542E2010);
      v25 = swift_bridgeObjectRetain();
      v26 = MEMORY[0x23B85F02C](v25, v24);
      v52 = a4;
      v28 = v27;
      swift_bridgeObjectRelease();
      v56 = sub_23AABEC68(v26, v28, v57);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2112;
      swift_getErrorValue();
      v29 = sub_23B0D9CF0(v55);
      v56 = (uint64_t)v29;
      sub_23B1C6CBC();
      v30 = v49;
      *v49 = v29;

      _os_log_impl(&dword_23AA66000, v20, v21, "Failed to delete items %s with error %@", (uint8_t *)v23, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v30, -1, -1);
      v31 = v50;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v31, -1, -1);
      v32 = v23;
      a3 = (void (*)(_QWORD))v51;
      MEMORY[0x23B8614BC](v32, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v54);
  }
  else
  {
    v52 = a4;
    v33 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    swift_bridgeObjectRetain_n();
    v34 = sub_23B1C5E40();
    v35 = sub_23B1C6A94();
    if (os_log_type_enabled(v34, v35))
    {
      v53 = v8;
      v36 = swift_slowAlloc();
      v54 = v7;
      v37 = (uint8_t *)v36;
      v51 = swift_slowAlloc();
      v57[0] = v51;
      *(_DWORD *)v37 = 136315138;
      v50 = (uint64_t)(v37 + 4);
      v38 = a3;
      v39 = sub_23AA9F52C(0, (unint64_t *)&unk_2542E2010);
      v40 = swift_bridgeObjectRetain();
      v41 = MEMORY[0x23B85F02C](v40, v39);
      v43 = v42;
      swift_bridgeObjectRelease();
      v44 = v41;
      a3 = v38;
      v56 = sub_23AABEC68(v44, v43, v57);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23AA66000, v34, v35, "Succeeded deleting items: %s", v37, 0xCu);
      v45 = v51;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v45, -1, -1);
      MEMORY[0x23B8614BC](v37, -1, -1);

      (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v54);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }
  }
  swift_beginAccess();
  v46 = *v14;
  v47 = *v14;
  a3(v46);

}

void sub_23ABFF4C8(unint64_t a1, int a2, uint64_t a3, id a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10)
{
  id v12;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v31;
  void (*v32)(uint64_t);
  id v33;
  void *v34;
  _QWORD aBlock[6];

  v12 = a4;
  if (!a1)
  {
    objc_msgSend(a4, sel_setCompletedUnitCount_, 1);
    a5(a3);
    return;
  }
  v15 = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(a7 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (!v15)
    goto LABEL_21;
  v16 = v15;
  v17 = objc_msgSend(v15, sel_session);

  v18 = objc_msgSend(v17, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a7 + 32), sel_pid), -1.0);
  swift_unknownObjectRelease();
  v34 = (void *)sub_23B1C63BC();
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = sub_23B1C7088();
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v19)
  {
    aBlock[0] = MEMORY[0x24BEE4AF8];
    sub_23ADACE00(0, v19 & ~(v19 >> 63), 0);
    if ((v19 & 0x8000000000000000) == 0)
    {
      v31 = v18;
      v32 = a5;
      v33 = v12;
      v20 = 0;
      v21 = aBlock[0];
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
          v22 = (id)MEMORY[0x23B85F860](v20, a1);
        else
          v22 = *(id *)(a1 + 8 * v20 + 32);
        v23 = v22;
        v24 = objc_msgSend(v22, sel_identifier, v31, v32, v33);

        aBlock[0] = v21;
        v26 = *(_QWORD *)(v21 + 16);
        v25 = *(_QWORD *)(v21 + 24);
        if (v26 >= v25 >> 1)
        {
          sub_23ADACE00(v25 > 1, v26 + 1, 1);
          v21 = aBlock[0];
        }
        ++v20;
        *(_QWORD *)(v21 + 16) = v26 + 1;
        *(_QWORD *)(v21 + 8 * v26 + 32) = v24;
      }
      while (v19 != v20);
      a5 = v32;
      v12 = v33;
      v18 = v31;
      goto LABEL_15;
    }
    __break(1u);
LABEL_21:
    __break(1u);
    return;
  }
LABEL_15:
  type metadata accessor for NSFileProviderItemIdentifier(0);
  v27 = (void *)sub_23B1C66F8();
  swift_bridgeObjectRelease();
  aBlock[4] = a5;
  aBlock[5] = a6;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AC46D44;
  aBlock[3] = &block_descriptor_148_0;
  v28 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v29 = objc_msgSend(v18, sel_performActionWithIdentifier_onItemsWithIdentifiers_domainIdentifier_completionHandler_, v34, v27, a10, v28);
  swift_unknownObjectRelease();
  _Block_release(v28);

  if (v29)
  {
    objc_msgSend(v12, sel_addChild_withPendingUnitCount_, v29, 1);

  }
}

void sub_23ABFF958(uint64_t a1, void (*a2)(id, uint64_t), uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  void (*v48)(id, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(id, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[5];
  _QWORD v59[12];
  _QWORD v60[12];

  v57 = a6;
  LODWORD(v56) = a5;
  v10 = type metadata accessor for VFSItem(0);
  v54 = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(v54 + 64);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v55 = (uint64_t)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v49 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E21C0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (id *)((char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23AA8EFC8(a1, (uint64_t)v17, &qword_2542E21C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = *v17;
    v19 = *v17;
    a2(v18, 1);

  }
  else
  {
    v52 = a2;
    v53 = a3;
    sub_23AB3CAF0((uint64_t)v17, (uint64_t)v14);
    v51 = a4;
    v20 = *(_QWORD *)(a4 + 16);
    type metadata accessor for VFSFileTree(0);
    swift_dynamicCastClassUnconditional();
    v21 = *(_QWORD *)v14;
    v22 = &v14[*(int *)(v10 + 36)];
    v23 = *((unsigned int *)v22 + 2);
    v24 = *((_QWORD *)v22 + 2);
    v25 = v22[24];
    v26 = *((_QWORD *)v14 + 2);
    v27 = v14[24];
    v28 = *((_QWORD *)v14 + 4);
    v29 = *((_QWORD *)v14 + 5);
    v60[0] = *(_QWORD *)v22;
    v60[1] = v23;
    v60[2] = v24;
    v60[3] = v25;
    v60[4] = 0;
    v60[5] = v26;
    v60[6] = v27;
    v60[7] = v28;
    v30 = v14[8];
    v60[8] = v29;
    memset(&v60[9], 0, 24);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_23B157264(v21, v30, (uint64_t)v60, (uint64_t)v58);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v31 = (_QWORD *)swift_dynamicCastClassUnconditional();
    swift_retain();
    if (objc_sync_enter(v31))
      sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)v31);
    v50 = v20;
    v32 = v31[20];
    swift_retain();
    if (objc_sync_exit(v31))
      sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)v31);
    swift_release();
    v33 = *(unsigned int *)(v32 + 16);
    v34 = swift_release();
    MEMORY[0x24BDAC7A8](v34);
    *((_BYTE *)&v49 - 16) = v56 & 1;
    v35 = v57;
    *(&v49 - 1) = v57;
    sub_23AC3A610(v58, v33, 0x200000, 0, (uint64_t)sub_23AC03E00, (uint64_t)(&v49 - 4));
    sub_23AC03E50((uint64_t)v58);
    v36 = v51;
    v56 = swift_dynamicCastClassUnconditional();
    v50 = *(_QWORD *)v14;
    v37 = *((unsigned int *)v22 + 2);
    v38 = *((_QWORD *)v22 + 2);
    v39 = v22[24];
    v40 = *((_QWORD *)v14 + 2);
    v41 = v14[24];
    v42 = *((_QWORD *)v14 + 4);
    v43 = *((_QWORD *)v14 + 5);
    v59[0] = *(_QWORD *)v22;
    v59[1] = v37;
    v59[2] = v38;
    v59[3] = v39;
    v59[4] = 0;
    v59[5] = v40;
    v59[6] = v41;
    v59[7] = v42;
    v59[8] = v43;
    v44 = v14[8];
    memset(&v59[9], 0, 24);
    v45 = v55;
    sub_23AC03E78((uint64_t)v14, v55);
    v46 = (*(unsigned __int8 *)(v54 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
    v47 = (_QWORD *)swift_allocObject();
    v48 = v52;
    v47[2] = v36;
    v47[3] = v48;
    v47[4] = v53;
    v47[5] = v35;
    sub_23AB3CAF0(v45, (uint64_t)v47 + v46);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_23AA7BAC4(v50, v44, (uint64_t)v59, 0, 3, (uint64_t)sub_23AC0411C, (uint64_t)v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_release();
    sub_23AB3CB34((uint64_t)v14);
  }
}

uint64_t sub_23ABFFE5C@<X0>(char a1@<W1>, _DWORD *a2@<X8>)
{
  int is_ignore_root;
  uint64_t result;

  if ((a1 & 1) != 0)
  {
    sub_23B1C63E0();
    sub_23B1C6458();
    swift_bridgeObjectRelease();
  }
  is_ignore_root = fpfs_set_is_ignore_root();
  result = swift_unknownObjectRelease();
  *a2 = is_ignore_root;
  return result;
}

uint64_t sub_23ABFFEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a6;
  v30 = a5;
  v27 = a1;
  v28 = a2;
  v9 = type metadata accessor for VFSItem(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E21B0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(a2 + 16);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = a4;
  v18 = a3;
  sub_23AA8EFC8(v27, (uint64_t)v16, (uint64_t *)&unk_2542E21B0);
  sub_23AC03E78(v29, (uint64_t)v12);
  v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v20 = (v15 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = (*(unsigned __int8 *)(v10 + 80) + v21 + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v18;
  *(_QWORD *)(v23 + 24) = a4;
  sub_23AA724E8((uint64_t)v16, v23 + v19, (uint64_t *)&unk_2542E21B0);
  *(_QWORD *)(v23 + v20) = v28;
  *(_QWORD *)(v23 + v21) = v30;
  sub_23AB3CAF0((uint64_t)v12, v23 + v22);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = sub_23AAB5414;
  *(_QWORD *)(v24 + 24) = v17;
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23AA901C4((uint64_t)"updateIgnoreStateOfItem(_:ignoreState:fpfs:completionHandler:)", 62, 2, sub_23AC046C8, v24, (uint64_t)sub_23AC04638, v23);
  swift_release();
  swift_release();
  return swift_release();
}

void sub_23AC00104(void (*a1)(void *, _BOOL8), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  void *v20;
  int v21;
  _BOOL8 v22;
  char v23;
  uint64_t v24;
  void (*v25)(void *, _BOOL8);
  void *v26;
  void *v27;
  id v28;
  unsigned int v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void (*v36)(void *, _BOOL8);
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v33 = a5;
  v34 = a6;
  v32 = a4;
  v35 = a2;
  v36 = a1;
  v7 = type metadata accessor for VFSItem(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E72C0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v32 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E21B0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (void **)((char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23AA8EFC8(a3, (uint64_t)v19, (uint64_t *)&unk_2542E21B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v20 = *v19;
    v36(*v19, 1);
  }
  else
  {
    sub_23AA724E8((uint64_t)v19, (uint64_t)v16, &qword_2542E72C0);
    sub_23AA8EFC8((uint64_t)v16, (uint64_t)v14, &qword_2542E72C0);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7);
    v22 = v21 == 1;
    if (v21 == 1)
    {
      sub_23AA8A05C((uint64_t)v14, &qword_2542E72C0);
      v23 = *((_BYTE *)v34 + 8);
      v37 = *v34;
      v38 = v23;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v45 = 0;
      sub_23AAFC630((uint64_t)&v37);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0950);
      sub_23AAB5A28((unint64_t *)&qword_2542E0940, (uint64_t *)&unk_2542E0950, (uint64_t)&unk_23B1D40CC);
      v20 = (void *)swift_allocError();
      sub_23AA724E8((uint64_t)&v37, v24, (uint64_t *)&unk_2542E0950);
      v25 = v36;
    }
    else
    {
      sub_23AB3CAF0((uint64_t)v14, (uint64_t)v10);
      v26 = (void *)MEMORY[0x23B8615C4](*(_QWORD *)(v33 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
      if (v26
        && (v27 = v26,
            v28 = objc_msgSend(v26, sel_indexer, v32),
            v27,
            v28))
      {
        v29 = objc_msgSend(v28, sel_needsAuthentication);

        if (v29)
          v30 = 29;
        else
          v30 = 21;
      }
      else
      {
        v30 = 21;
      }
      v25 = v36;
      v31 = (int *)sub_23AAF7AC0(MEMORY[0x24BEE4AF8]);
      v20 = sub_23AA801CC((uint64_t)v10, v30, 0, v31);
      swift_bridgeObjectRelease();
      sub_23AB3CB34((uint64_t)v10);
    }
    sub_23AA8A05C((uint64_t)v16, &qword_2542E72C0);
    v25(v20, v22);
  }
  sub_23AAB538C(v20);
}

uint64_t sub_23AC00440(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  NSObject *v32;
  id v33;
  id v34;
  id v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  _QWORD *v55;
  id v56;
  id v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  void *v69;
  NSObject *v70;
  uint64_t v71;

  v11 = swift_allocObject();
  v12 = MEMORY[0x24BEE4AF8];
  v71 = v11;
  *(_QWORD *)(v11 + 16) = sub_23AAEA254(MEMORY[0x24BEE4AF8]);
  v68 = swift_allocObject();
  *(_QWORD *)(v68 + 16) = sub_23AAEA35C(v12);
  v13 = dispatch_group_create();
  v66 = *(_QWORD *)(a2 + 16);
  if (v66)
  {
    v59 = a5;
    v60 = a6;
    v63 = *(_QWORD *)(a1 + 16);
    v64 = a1;
    swift_bridgeObjectRetain();
    v14 = 0;
    v62 = a4 & 1;
    v15 = 0x4000000000000002;
    if ((a4 & 1) != 0)
      v15 = 0x4000000000000000;
    v61 = v15;
    v65 = a2;
    v70 = v13;
    do
    {
      v34 = *(id *)(a2 + 8 * v14 + 32);
      dispatch_group_enter(v13);
      sub_23B1C63E0();
      v35 = v34;
      v36 = sub_23AA8A4F8();
      swift_bridgeObjectRelease();
      if ((v36 & 1) == 0)
        goto LABEL_5;
      v37 = sub_23B1C63E0();
      v39 = sub_23AA8A1BC(0x80007uLL, v37, v38);
      v41 = v40;
      v43 = v42;
      v45 = v44;
      swift_bridgeObjectRelease();
      v46 = MEMORY[0x23B85ED8C](v39, v41, v43, v45);
      v48 = v47;
      swift_bridgeObjectRelease();
      v49 = sub_23AA8A208(v46, v48);
      if ((_BYTE)v50 == 0xFF)
      {
LABEL_5:
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542DE240);
        v16 = swift_allocObject();
        *(_QWORD *)(v16 + 16) = v34;
        *(_WORD *)(v16 + 24) = 256;
        *(_BYTE *)(v16 + 42) = 0;
        *(_QWORD *)(v16 + 32) = v34;
        *(_WORD *)(v16 + 40) = 256;
        v17 = v35;
        v18 = 0;
        v19 = 1;
      }
      else
      {
        v51 = (void *)v49;
        v18 = v50;

        __swift_instantiateConcreteTypeFromMangledName(&qword_2542DE240);
        v16 = swift_allocObject();
        v19 = 0;
        *(_QWORD *)(v16 + 16) = v51;
        *(_WORD *)(v16 + 24) = v18;
        *(_QWORD *)(v16 + 32) = v51;
        *(_BYTE *)(v16 + 40) = v18;
        v34 = v51;
        *(_WORD *)(v16 + 41) = 0;
      }
      v20 = (_QWORD *)swift_allocObject();
      v20[2] = v13;
      v20[3] = v68;
      v20[4] = v35;
      v20[5] = v71;
      v21 = swift_allocObject();
      *(_QWORD *)(v21 + 16) = v34;
      *(_BYTE *)(v21 + 24) = v18;
      *(_BYTE *)(v21 + 25) = v19;
      v69 = v35;
      v22 = *(void **)(a3 + 32);
      *(_QWORD *)(v21 + 32) = v22;
      sub_23AA88218(v34, v18, v19);
      v23 = v22;
      v24 = v61 | v21;
      v25 = swift_allocObject();
      *(_QWORD *)(v25 + 16) = sub_23AC03D20;
      *(_QWORD *)(v25 + 24) = v20;
      v26 = swift_allocObject();
      swift_weakInit();
      v27 = (_QWORD *)swift_allocObject();
      v27[2] = sub_23AAB5414;
      v27[3] = v25;
      v27[4] = v26;
      v28 = swift_allocObject();
      *(_QWORD *)(v28 + 16) = sub_23AC03D84;
      *(_QWORD *)(v28 + 24) = v27;
      v29 = swift_allocObject();
      *(_QWORD *)(v29 + 16) = sub_23AAB5398;
      *(_QWORD *)(v29 + 24) = v28;
      *(_QWORD *)(v29 + 32) = v64;
      *(_BYTE *)(v29 + 40) = v62;
      *(_QWORD *)(v29 + 48) = a3;
      v30 = objc_allocWithZone(MEMORY[0x24BDD1768]);
      v31 = v69;
      v32 = v70;
      swift_retain();
      v13 = v70;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      ++v14;
      swift_retain();
      v33 = objc_msgSend(v30, sel_init);
      swift_retain();
      sub_23AA93780(v24);
      sub_23AAEF10C(v16, 1, 0, v24, v33, 0, v63, (void (*)(uint64_t *))sub_23AC03DD0, v29, v24);
      sub_23AC03BE4(v24);
      swift_release();

      swift_release_n();
      sub_23AC03BE4(v24);

      swift_release();
      swift_release();
      a2 = v65;
    }
    while (v66 != v14);
    swift_bridgeObjectRelease();
    a5 = v59;
    a6 = v60;
  }
  v52 = *(_QWORD *)(a3 + 16);
  v53 = *(void **)(v52 + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log);
  v54 = *(void **)(v52 + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue);
  v55 = (_QWORD *)swift_allocObject();
  v55[2] = a5;
  v55[3] = a6;
  v55[4] = v71;
  v55[5] = v68;
  swift_retain();
  swift_retain();
  v56 = v53;
  v57 = v54;
  swift_retain();
  sub_23AA81A30((uint64_t)"updateIgnoreStateOfItem(withIdentifiers:ignoreState:completionHandler:)", 71, 2, v53, v57, (uint64_t)sub_23AC03DF4, (uint64_t)v55);
  swift_release();
  swift_release();

  return swift_release();
}

void sub_23AC009B8(void *a1, char a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t *v9;
  uint64_t *v10;
  char v11;

  v9 = (uint64_t *)(a4 + 16);
  v10 = (uint64_t *)(a6 + 16);
  v11 = a2 & 1;
  sub_23AAB5380(a1);
  sub_23B0DA188(a3, a1, v11, v9, a5, v10);
  dispatch_group_leave(a3);
}

void sub_23AC00A30(void *a1, char a2, uint64_t *a3, void *a4, uint64_t *a5)
{
  id v8;
  char isUniquelyReferenced_nonNull_native;
  id v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  if ((a2 & 1) != 0)
  {
    swift_beginAccess();
    sub_23AAB5380(a1);
    sub_23AAB5380(a1);
    v8 = a4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *a3;
    *a3 = 0x8000000000000000;
    sub_23AD253A8((uint64_t)a1, v8, isUniquelyReferenced_nonNull_native);
    *a3 = v13;

  }
  else
  {
    swift_beginAccess();
    sub_23AAB5380(a1);
    sub_23AAB5380(a1);
    v11 = a4;
    v12 = swift_isUniquelyReferenced_nonNull_native();
    v14 = *a5;
    *a5 = 0x8000000000000000;
    sub_23AD25394((uint64_t)a1, v11, v12);
    *a5 = v14;

  }
  swift_bridgeObjectRelease();
  swift_endAccess();
  sub_23AAB538C(a1);
}

uint64_t sub_23AC00B80(void (*a1)(uint64_t, uint64_t, _QWORD), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  swift_beginAccess();
  v7 = *(_QWORD *)(a3 + 16);
  swift_beginAccess();
  v8 = *(_QWORD *)(a4 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a1(v7, v8, 0);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_23AC00D60(void *a1, int a2, void (*a3)(id), char *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  id v18;
  int v19;
  void *v20;
  id v21;
  int v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  id *v38;
  id v39;
  id v40;
  id v41;
  void (*v42)(id);
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void (*v57)(id);
  _BYTE *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  id v67;
  uint64_t v68;
  void *v69;
  id v70;
  NSObject *v71;
  void *v72;
  id v73;
  _QWORD *v74;
  _QWORD *v75;
  char *v76;
  _BYTE *v77;
  uint64_t v78;
  void *v79;
  id v80;
  uint64_t v81;
  void *v82;
  id v83;
  id v84;
  char v85;
  void *v86;
  id v87;
  char v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  void *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  void *v100;
  char *v101;
  id v102;
  id v103;
  id v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  void *v120;
  NSObject *v121;
  id v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char isUniquelyReferenced_nonNull_native;
  id v130;
  id v131;
  id v132;
  void *v133;
  void *v134;
  id v135;
  void *v136;
  _QWORD *v137;
  id v138;
  id v139;
  dispatch_group_t v140;
  __int128 v141;
  dispatch_group_t v142;
  uint64_t v143;
  _BYTE v144[4];
  int v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  dispatch_group_t v150;
  void (*v151)(id);
  char *v152;
  id v153[16];
  _OWORD v154[8];
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  NSObject *v162;
  char v163;
  id v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;

  v152 = a4;
  v9 = sub_23B1C5570();
  v147 = *(_QWORD *)(v9 - 8);
  v148 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v146 = &v144[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v11);
  v149 = &v144[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_23B1C5474();
  v150 = *(dispatch_group_t *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = &v144[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v164 = a1;
  v16 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE880);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0950);
  if (swift_dynamicCast())
  {
    v5 = v17;
    sub_23AA724E8((uint64_t)&v155, (uint64_t)v153, (uint64_t *)&unk_2542E0950);
    sub_23AA724E8((uint64_t)v153, (uint64_t)v154, (uint64_t *)&unk_2542E0950);
    if (sub_23AC050A4((uint64_t)v154))
    {
      v145 = a2;
      sub_23AC04F64((uint64_t)v153);

      goto LABEL_5;
    }
    v24 = nullsub_1(v154);
    v25 = *(_QWORD *)v24;
    v26 = *(unsigned __int8 *)(v24 + 8);
    v28 = *(_QWORD *)(v24 + 16);
    v27 = *(_QWORD *)(v24 + 24);
    v29 = *(_QWORD *)(v24 + 32);
    v30 = *(_QWORD *)(v24 + 40);
    v31 = *(_QWORD *)(v24 + 48);
    v32 = *(_QWORD *)(v24 + 56);
    v33 = *(_QWORD *)(v24 + 64);
    v34 = *(_QWORD *)(v24 + 72);
    v35 = *(_OWORD *)(v24 + 80);
    v36 = *(_QWORD *)(v24 + 104);
    v37 = *(void **)(v24 + 112);
    v142 = *(dispatch_group_t *)(v24 + 96);
    v143 = v36;
    *((_QWORD *)&v141 + 1) = *((_QWORD *)&v35 + 1);
    sub_23AAAEE68(v28, v27, v29, v30, v31, v32, v33, v34, v35);
    if (v26 != 2 || v25)
    {
      if (v26 != 2 || v25 != 1)
      {
        *(_QWORD *)&v165 = 0x2F73662F70665F5FLL;
        *((_QWORD *)&v165 + 1) = 0xE800000000000000;
        sub_23AA96F18(v25, v26);
        sub_23B1C64F4();
        swift_bridgeObjectRelease();
        v51 = (id)sub_23B1C63BC();
        swift_bridgeObjectRelease();
        if (v37)
          goto LABEL_34;
        goto LABEL_49;
      }
      v38 = (id *)MEMORY[0x24BDC8230];
    }
    else
    {
      v38 = (id *)MEMORY[0x24BDC8228];
    }
    v51 = *v38;
    if (v37)
    {
LABEL_34:
      v52 = v37;
LABEL_50:
      v73 = v37;
      a3(v52);

LABEL_51:
      v70 = v164;
      goto LABEL_52;
    }
LABEL_49:
    v52 = objc_msgSend((id)objc_opt_self(), sel_fileProviderErrorForNonExistentItemWithIdentifier_, v51);
    goto LABEL_50;
  }
  v145 = a2;

LABEL_5:
  *(_QWORD *)&v154[0] = a1;
  v18 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
  v19 = swift_dynamicCast();
  v151 = a3;
  if (v19)
  {
    v20 = (void *)v155;
    v5 = (unint64_t)v162;
    if (!v163)
    {
      sub_23AAAE4D0(*((uint64_t *)&v155 + 1), v156, *((uint64_t *)&v156 + 1), v157, v158);
      if (v5)
        v39 = (id)v5;
      else
        v39 = objc_msgSend((id)objc_opt_self(), sel_fileProviderErrorForNonExistentItemWithIdentifier_, v20);
      v71 = (id)v5;
      v151(v39);

      v70 = *(id *)&v154[0];
      goto LABEL_52;
    }
    sub_23AC04E04((void *)v155, *((void **)&v155 + 1), v156, *((void **)&v156 + 1), v157, v158, v159, v160, v161, v162, v163);
    a3 = v151;
  }

  v164 = a1;
  v21 = a1;
  if (!swift_dynamicCast())
  {

    goto LABEL_14;
  }
  v5 = (unint64_t)v15;
  sub_23AA724E8((uint64_t)&v155, (uint64_t)v153, (uint64_t *)&unk_2542E0950);
  sub_23AA724E8((uint64_t)v153, (uint64_t)v154, (uint64_t *)&unk_2542E0950);
  v22 = sub_23AC050A4((uint64_t)v154);
  if (v22 == 1)
  {
    v61 = nullsub_1(v154);
    v62 = *(_QWORD *)v61;
    v63 = *(unsigned __int8 *)(v61 + 8);
    v64 = *(_QWORD *)(v61 + 48);
    v65 = *(_QWORD *)(v61 + 56);

    sub_23AB22AE4(v64, v65);
    swift_bridgeObjectRelease();
    if ((v145 & 1) != 0)
    {
      sub_23B1C5390();
      sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
      sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
      sub_23B1C5864();
      v66 = (void *)sub_23B1C5354();
      ((void (*)(NSObject *, uint64_t))v150[1].isa)(v15, v13);
      v151(v66);

    }
    else
    {
      type metadata accessor for VFSFileTree(0);
      swift_dynamicCastClassUnconditional();
      v165 = 0u;
      v166 = 0u;
      v167 = 0u;
      v168 = 0u;
      v169 = 0u;
      v170 = 0u;
      v75 = (_QWORD *)swift_allocObject();
      v76 = v152;
      v75[2] = v151;
      v75[3] = v76;
      v75[4] = v4;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_23AA7BAC4(v62, v63, (uint64_t)&v165, 0, 1, (uint64_t)sub_23AC050E0, (uint64_t)v75);
      swift_release();
      swift_release();
    }
    goto LABEL_51;
  }
  if (v22 == 3)
  {
    v53 = v4;
    v54 = nullsub_1(v154);
    v55 = *(_QWORD *)v54;
    v56 = *(unsigned __int8 *)(v54 + 8);
    sub_23AC04F64((uint64_t)v153);
    v57 = v151;
    if ((v145 & 1) != 0)
    {
      LODWORD(v165) = 66;
      sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
      sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
      v58 = v146;
      v59 = v148;
      sub_23B1C5864();
      v60 = (void *)sub_23B1C5558();
      (*(void (**)(_BYTE *, uint64_t))(v147 + 8))(v58, v59);
      v57(v60);

    }
    else
    {
      type metadata accessor for VFSFileTree(0);
      swift_dynamicCastClassUnconditional();
      v165 = 0u;
      v166 = 0u;
      v167 = 0u;
      v168 = 0u;
      v169 = 0u;
      v170 = 0u;
      v74 = (_QWORD *)swift_allocObject();
      v74[2] = v57;
      v74[3] = v152;
      v74[4] = v53;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_23AA7BAC4(v55, v56, (uint64_t)&v165, 0, 1, (uint64_t)sub_23AC050C8, (uint64_t)v74);
      swift_release();
      swift_release();
    }
    goto LABEL_51;
  }
  a3 = v151;
  if (v22 == 5)
  {
    nullsub_1(v154);

LABEL_17:
    sub_23B1C5360();
LABEL_47:
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
    sub_23B1C5864();
    v72 = (void *)sub_23B1C5354();
    ((void (*)(NSObject *, uint64_t))v150[1].isa)(v15, v13);
    a3(v72);

    return;
  }
  sub_23AC04F64((uint64_t)v153);

LABEL_14:
  *(_QWORD *)&v154[0] = a1;
  v23 = a1;
  if (swift_dynamicCast())
  {
    if (v163 == 5)
    {

      goto LABEL_17;
    }
    sub_23AC04E04((void *)v155, *((void **)&v155 + 1), v156, *((void **)&v156 + 1), v157, v158, v159, v160, v161, v162, v163);
  }

  *(_QWORD *)&v155 = a1;
  v40 = a1;
  if (swift_dynamicCast())
    __asm { BR              X10 }

  *(_QWORD *)&v154[0] = a1;
  v41 = a1;
  if ((swift_dynamicCast() & 1) != 0)
  {
    if (v156 == 253 || v156 == 254)
    {
      v42 = a3;

      type metadata accessor for NSFileProviderError(0);
      *(_QWORD *)&v154[0] = -2005;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE850);
      v43 = swift_allocObject();
      *(_OWORD *)(v43 + 16) = xmmword_23B1CA760;
      *(_QWORD *)(v43 + 32) = sub_23B1C63E0();
      *(_QWORD *)(v43 + 40) = v44;
      v45 = (void *)sub_23B1C63BC();
      sub_23B1C7574();
      v46 = (id)FPLocv();

      v47 = sub_23B1C63E0();
      v49 = v48;

      *(_QWORD *)(v43 + 72) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v43 + 48) = v47;
      *(_QWORD *)(v43 + 56) = v49;
      sub_23AAE9EB4(v43);
      sub_23AA7E38C((unint64_t *)&unk_2542E1E60, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderError, (uint64_t)&unk_23B1CC9C0);
      sub_23B1C5864();
      v50 = (void *)v155;
      v42((id)v155);

      return;
    }
    sub_23AB7C0B0(v155, *((uint64_t *)&v155 + 1), v156);
    LODWORD(v153[0]) = 16;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
    v77 = v146;
    v78 = v148;
    sub_23B1C5864();
    v79 = (void *)sub_23B1C5558();
    (*(void (**)(_BYTE *, uint64_t))(v147 + 8))(v77, v78);
    a3(v79);

    v70 = *(id *)&v154[0];
    goto LABEL_52;
  }
  v148 = v13;

  *(_QWORD *)&v165 = a1;
  v67 = a1;
  v147 = v17;
  if ((swift_dynamicCast() & 1) != 0)
  {
    sub_23AA724E8((uint64_t)&v155, (uint64_t)v153, (uint64_t *)&unk_2542E0950);
    sub_23AA724E8((uint64_t)v153, (uint64_t)v154, (uint64_t *)&unk_2542E0950);
    if (sub_23AC050A4((uint64_t)v154) == 15)
    {
      sub_23B1C53C0();
      sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
      sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
      v68 = v148;
      sub_23B1C5864();
      v69 = (void *)sub_23B1C5354();
      ((void (*)(NSObject *, uint64_t))v150[1].isa)(v15, v68);
      a3(v69);

      v70 = (id)v165;
LABEL_52:

      return;
    }
    sub_23AC04F64((uint64_t)v153);
  }

  *(_QWORD *)&v155 = a1;
  v80 = a1;
  if (swift_dynamicCast())
  {
    v81 = (uint64_t)(id)FPDomainUnavailableError();
    if (!v81)
    {
LABEL_107:
      __break(1u);
LABEL_108:
      MEMORY[0x24BDAC7A8](v81);
      v142 = (dispatch_group_t)v5;
      sub_23AFF56B8((uint64_t (*)(uint64_t))sub_23ABD7710, (uint64_t)&v141, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318);
    }
    v82 = (void *)v81;
    a3((id)v81);

    v70 = (id)v155;
    goto LABEL_52;
  }

  v153[0] = a1;
  v83 = a1;
  if (swift_dynamicCast())
  {
    sub_23AA724E8((uint64_t)&v155, (uint64_t)v154, (uint64_t *)&unk_2542E0950);
    sub_23AC04F64((uint64_t)v154);

    v13 = v148;
    goto LABEL_46;
  }

  *(_QWORD *)&v154[0] = a1;
  v84 = a1;
  v85 = swift_dynamicCast();
  v13 = v148;
  if ((v85 & 1) != 0)
  {
    sub_23AC04E04((void *)v155, *((void **)&v155 + 1), v156, *((void **)&v156 + 1), v157, v158, v159, v160, v161, v162, v163);
    v86 = *(void **)&v154[0];
LABEL_45:

LABEL_46:
    sub_23B1C53E4();
    goto LABEL_47;
  }

  *(_QWORD *)&v155 = a1;
  v87 = a1;
  v88 = swift_dynamicCast();

  if ((v88 & 1) != 0)
    goto LABEL_46;
  *(_QWORD *)&v154[0] = a1;
  v89 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E08A0);
  if (swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    v86 = *(void **)&v154[0];
    goto LABEL_45;
  }

  *(_QWORD *)&v154[0] = a1;
  v90 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E08B0);
  if (swift_dynamicCast())
  {
    sub_23AC04DD8((void *)v155);
    v86 = *(void **)&v154[0];
    goto LABEL_45;
  }

  *(_QWORD *)&v154[0] = a1;
  v91 = a1;
  if (swift_dynamicCast())
  {
    sub_23AC04DA4((uint64_t)&v155);
    v86 = *(void **)&v154[0];
    goto LABEL_45;
  }
  v92 = v4;

  v93 = (void *)sub_23B1C5870();
  v94 = objc_msgSend(v93, sel_userInfo);
  v95 = sub_23B1C620C();

  v96 = sub_23B1C63E0();
  if (*(_QWORD *)(v95 + 16) && (v98 = sub_23AAAF4C4(v96, v97), (v99 & 1) != 0))
  {
    sub_23AAA15AC(*(_QWORD *)(v95 + 56) + 32 * v98, (uint64_t)&v155);
  }
  else
  {
    v155 = 0u;
    v156 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v156 + 1))
  {
    sub_23AA9F52C(0, (unint64_t *)&qword_2542E2000);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v100 = *(void **)&v154[0];
      v101 = v152;
      swift_retain();
      v102 = v93;
      v103 = v100;
      sub_23B094D70(v103, v145 & 1, v92, v102, v151, v101);

      goto LABEL_103;
    }
  }
  else
  {
    sub_23AA8A05C((uint64_t)&v155, qword_2542E5640);
  }
  v104 = objc_msgSend(v93, sel_userInfo);
  v105 = sub_23B1C620C();

  v106 = (_BYTE *)*MEMORY[0x24BDD10D8];
  v107 = sub_23B1C63E0();
  if (*(_QWORD *)(v105 + 16) && (v109 = sub_23AAAF4C4(v107, v108), (v110 & 1) != 0))
  {
    sub_23AAA15AC(*(_QWORD *)(v105 + 56) + 32 * v109, (uint64_t)&v155);
  }
  else
  {
    v155 = 0u;
    v156 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v111 = swift_allocObject();
  if (!*((_QWORD *)&v156 + 1))
  {
    sub_23AA8A05C((uint64_t)&v155, qword_2542E5640);
    goto LABEL_99;
  }
  v112 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2569E8140);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_99:
    swift_deallocUninitializedObject();
    v151(a1);

    return;
  }
  v148 = v112;
  v149 = v106;
  v113 = (uint64_t *)(v111 + 16);
  *(_QWORD *)(v111 + 16) = *(_QWORD *)&v154[0];
  v150 = dispatch_group_create();
  v5 = *(_QWORD *)(v111 + 16);
  if (v5 >> 62)
    goto LABEL_105;
  v114 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v114)
  {
    v5 = v150;
    v115 = objc_sync_enter((id)v5);
    if ((_DWORD)v115)
    {
LABEL_109:
      MEMORY[0x24BDAC7A8](v115);
      v142 = (dispatch_group_t)v5;
      sub_23AFF56B8((uint64_t (*)(uint64_t))sub_23ABD7708, (uint64_t)&v141, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314);
    }
    v116 = 0;
    v117 = v114 - 1;
    while (1)
    {
      swift_beginAccess();
      v118 = *v113;
      if ((*v113 & 0xC000000000000001) == 0)
        break;
      v119 = (id)MEMORY[0x23B85F860](v116);
LABEL_93:
      v120 = v119;
      swift_endAccess();
      v81 = objc_sync_exit((id)v5);
      if ((_DWORD)v81)
        goto LABEL_108;

      dispatch_group_enter((dispatch_group_t)v5);
      v121 = (id)v5;
      swift_retain();
      v122 = v120;
      sub_23B096368(v122, v145 & 1, v92, v121, v111, v116);

      swift_release();
      if (v117 == v116)
        goto LABEL_100;
      v115 = objc_sync_enter(v121);
      ++v116;
      if ((_DWORD)v115)
        goto LABEL_109;
    }
    if (v116 < *(_QWORD *)((v118 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v119 = *(id *)(v118 + 8 * v116 + 32);
      goto LABEL_93;
    }
    __break(1u);
LABEL_105:
    swift_bridgeObjectRetain();
    v114 = sub_23B1C7088();
    v81 = swift_bridgeObjectRelease();
    if (v114 < 0)
    {
      __break(1u);
      goto LABEL_107;
    }
  }
LABEL_100:
  if ((v145 & 1) != 0)
  {
    v123 = objc_msgSend(v93, sel_userInfo);
    v124 = sub_23B1C620C();

    v125 = sub_23B1C63E0();
    v127 = v126;
    swift_beginAccess();
    v128 = *(_QWORD *)(v111 + 16);
    *((_QWORD *)&v156 + 1) = v148;
    *(_QWORD *)&v155 = v128;
    sub_23AAA159C(&v155, v154);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v165 = v124;
    sub_23AD1A024(v154, v125, v127, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v130 = objc_msgSend(v93, sel_domain);
    sub_23B1C63E0();

    v131 = objc_msgSend(v93, sel_code);
    v132 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v133 = (void *)sub_23B1C63BC();
    swift_bridgeObjectRelease();
    v134 = (void *)sub_23B1C61F4();
    swift_bridgeObjectRelease();
    v135 = objc_msgSend(v132, sel_initWithDomain_code_userInfo_, v133, v131, v134);

    v151(v135);
    swift_release();

    return;
  }
  v136 = *(void **)(*(_QWORD *)(v92 + 16) + 64);
  v137 = (_QWORD *)swift_allocObject();
  v137[2] = v93;
  v137[3] = v111;
  v137[4] = v151;
  v137[5] = v152;
  swift_retain();
  v138 = v93;
  swift_retain();
  v139 = v136;
  v140 = v150;
  sub_23AA81A30((uint64_t)"normalizeError(_:synchronous:completionHandler:)", 48, 2, 0, v139, (uint64_t)sub_23AC04D98, (uint64_t)v137);

  swift_release();
LABEL_103:
  swift_release();
}

uint64_t sub_23AC022A8(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t))
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  return a2(v3, a1);
}

uint64_t sub_23AC022E0(uint64_t a1, uint64_t (*a2)(uint64_t *, uint64_t))
{
  uint64_t v3;

  v3 = 0;
  return a2(&v3, a1);
}

void sub_23AC02318(void *a1, void (*a2)(id), char *a3)
{
  uint64_t Strong;
  uint64_t v7;
  id v8;
  id v9;
  id v10;

  if (a1)
  {
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v7 = Strong;
      swift_retain();
      v8 = a1;
      sub_23B09B104(a1, 0, v7, a2, a3);
      swift_release();
      swift_release();
    }
    else
    {
      v9 = a1;
      v10 = (id)FPDomainUnavailableError();
      ((void (*)(void))a2)();

    }
  }
  else
  {
    ((void (*)(void))a2)();
  }
}

void sub_23AC023E4(void *a1, void *a2, void (*a3)(void **, id), uint64_t a4, uint64_t a5)
{
  sub_23AC02538(a1, a2, a3, a4, a5, (uint64_t)&unk_250BE7DD8, (uint64_t *)&unk_2569E2800, (void (*)(id))sub_23AC04D60);
}

void sub_23AC02400(uint64_t a1, void *a2, void (*a3)(uint64_t *, id), uint64_t a4)
{
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;

  v12 = a1;
  if (a2)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 16) = a3;
      *(_QWORD *)(v8 + 24) = a4;
      *(_QWORD *)(v8 + 32) = a1;
      v9 = a2;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_23AC00D60(a2, 0, (void (*)(id))sub_23AC05264, (char *)v8);
      swift_release();

      swift_release();
    }
    else
    {
      v10 = a2;
      v11 = (id)FPDomainUnavailableError();
      a3(&v12, v11);

    }
  }
  else
  {
    ((void (*)(uint64_t *))a3)(&v12);
  }
}

void sub_23AC0251C(void *a1, void *a2, void (*a3)(void **, id), uint64_t a4, uint64_t a5)
{
  sub_23AC02538(a1, a2, a3, a4, a5, (uint64_t)&unk_250BE7E00, (uint64_t *)&unk_2569E3250, (void (*)(id))sub_23AC04D60);
}

void sub_23AC02538(void *a1, void *a2, void (*a3)(void **, id), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, void (*a8)(id))
{
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;

  v20 = a1;
  if (a2)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      v19 = a1;
      v14 = swift_allocObject();
      *(_QWORD *)(v14 + 16) = a3;
      *(_QWORD *)(v14 + 24) = a4;
      sub_23AA724E8((uint64_t)&v19, v14 + 32, a7);
      v15 = a2;
      v16 = a1;
      swift_retain();
      sub_23AC00D60(a2, 0, a8, (char *)v14);
      swift_release();

      swift_release();
    }
    else
    {
      v17 = a2;
      v18 = (id)FPDomainUnavailableError();
      a3(&v20, v18);

    }
  }
  else
  {
    ((void (*)(void **))a3)(&v20);
  }
}

void sub_23AC0266C(void *a1, char a2, void (*a3)(void **), char *a4)
{
  uint64_t Strong;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char v14;
  void *v15;
  char v16;

  v15 = a1;
  v16 = a2 & 1;
  if ((a2 & 1) == 0)
  {
    v10 = a1;
    a3(&v15);
    sub_23AAB538C(a1);
    return;
  }
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v8 = Strong;
    sub_23AAB5380(a1);
    swift_retain();
    sub_23B0B544C(a1, 0, v8, (unint64_t)a3, a4);
    swift_release();
    swift_release();
    v9 = a1;
LABEL_7:
    sub_23AAB538C(v9);
    return;
  }
  v11 = a1;
  v12 = (id)FPDomainUnavailableError();
  if (v12)
  {
    v13 = v12;
    v14 = 1;
    a3(&v13);
    sub_23AAB538C(a1);
    v9 = v13;
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t sub_23AC02790()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_23AC027B4()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void sub_23AC027E0(void *a1)
{
  uint64_t v1;

  sub_23ABFEE94(a1, *(_QWORD *)(v1 + 16), *(dispatch_group_t *)(v1 + 24));
}

uint64_t sub_23AC027E8()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC0281C(uint64_t a1)
{
  return sub_23AC048C0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23ABFD0A4);
}

uint64_t sub_23AC02830()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_23AC02864()
{
  uint64_t v0;

  sub_23ABFEF00(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_QWORD))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_23AC02870()
{
  return objectdestroy_24Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_23AC0287C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_23AC028A8()
{
  return objectdestroy_30Tm();
}

void sub_23AC028B0(uint64_t a1)
{
  uint64_t v1;

  sub_23ABFD468(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32), *(void (**)(_QWORD))(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
}

uint64_t sub_23AC028C4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23AC02900(uint64_t a1)
{
  uint64_t v1;

  sub_23ABFDBDC(a1, *(void **)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32), *(NSObject **)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_23AC02910()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AC0295C(uint64_t a1)
{
  uint64_t v1;

  return sub_23B17169C(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD **)(v1 + 32), *(void (**)(uint64_t *))(v1 + 40), *(_QWORD *)(v1 + 48), v1 + 56, *(unsigned __int8 *)(v1 + 152));
}

uint64_t sub_23AC02978()
{
  return objectdestroy_30Tm();
}

void sub_23AC02980()
{
  sub_23AC029FC();
}

uint64_t sub_23AC02994()
{
  return objectdestroy_46Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

void sub_23AC029A0(void *a1)
{
  uint64_t v1;

  sub_23ABFCB10(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_23AC029AC()
{
  return objectdestroy_30Tm();
}

uint64_t objectdestroy_30Tm()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23AC029FC()
{
  uint64_t v0;

  sub_23ABFC3AC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(_QWORD))(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE **)(v0 + 56));
}

uint64_t sub_23AC02A1C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_23AC02A40(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_23ABFE174(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_23AC02A48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_23B1C6FBC();
    v6 = (uint64_t *)(a1 + 32);
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_providerDomainID);
    do
    {
      v8 = *v6++;
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC82E8]), sel_initWithProviderDomainID_itemIdentifier_, v7, v8);
      sub_23B1C6F98();
      sub_23B1C6FC8();
      sub_23B1C6FD4();
      sub_23B1C6FA4();
      --v3;
    }
    while (v3);
    return v9;
  }
  return result;
}

uint64_t sub_23AC02B30(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD), double a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;

  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a4;
  _Block_copy(a4);
  v13 = sub_23AC4C5E8(a2);
  if (v13)
  {
    v14 = v13;
    v15 = *(void **)(a3 + 16);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = sub_23AC052B4;
    *(_QWORD *)(v16 + 24) = v12;
    *(_QWORD *)(v16 + 32) = a3;
    *(_QWORD *)(v16 + 40) = a1;
    *(double *)(v16 + 48) = a5;
    *(double *)(v16 + 56) = a6;
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = sub_23AC051C4;
    *(_QWORD *)(v17 + 24) = v16;
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = v14;
    v18[3] = sub_23AC051C4;
    v18[4] = v16;
    v18[5] = v15;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v19 = v15;
    sub_23AC65848((uint64_t)"withFPItemIdentifier(forDictionary:cb:)", 39, 2, (void (*)(_QWORD *, uint64_t *, id))sub_23AC051D4, v17, (uint64_t)sub_23AC05210, (uint64_t)v18);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    a4[2](a4, 0);
  }
  return swift_release();
}

void sub_23AC02CCC(uint64_t a1, unint64_t a2, uint64_t a3, void *aBlock, double a5, double a6)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  id v30;
  uint64_t v31;

  _Block_copy(aBlock);
  v9 = (_QWORD *)sub_23AAEA248(MEMORY[0x24BEE4AF8]);
  if (a2 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    v10 = sub_23B1C7088();
    if (v10)
      goto LABEL_3;
LABEL_26:
    swift_bridgeObjectRelease();
    v31 = sub_23B147654((uint64_t)v9);
    swift_bridgeObjectRelease();
    _Block_copy(aBlock);
    sub_23AC02B30(a1, v31, a3, (void (**)(_QWORD, _QWORD))aBlock, a5, a6);
    _Block_release(aBlock);
    swift_bridgeObjectRelease();
    _Block_release(aBlock);
    return;
  }
  v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v10)
    goto LABEL_26;
LABEL_3:
  v11 = 4;
  while (1)
  {
    v13 = v11 - 4;
    if ((a2 & 0xC000000000000001) != 0)
    {
      v14 = (id)MEMORY[0x23B85F860](v11 - 4, a2);
      v15 = v11 - 3;
      if (__OFADD__(v13, 1))
        goto LABEL_22;
    }
    else
    {
      v14 = *(id *)(a2 + 8 * v11);
      v15 = v11 - 3;
      if (__OFADD__(v13, 1))
      {
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    v16 = v14;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = sub_23ACD5B4C((uint64_t)v16);
    v20 = v9[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      goto LABEL_23;
    v23 = v18;
    if (v9[3] < v22)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v18 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      sub_23B18757C();
      if ((v23 & 1) != 0)
      {
LABEL_4:
        v12 = v9[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v12 + 8 * v19) = MEMORY[0x24BEE4AF8];
        goto LABEL_5;
      }
    }
LABEL_18:
    v9[(v19 >> 6) + 8] |= 1 << v19;
    v26 = 8 * v19;
    *(_QWORD *)(v9[6] + v26) = v16;
    *(_QWORD *)(v9[7] + v26) = MEMORY[0x24BEE4AF8];
    v27 = v9[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_24;
    v9[2] = v29;
    v30 = v16;
LABEL_5:

    swift_bridgeObjectRelease();
    ++v11;
    if (v15 == v10)
      goto LABEL_26;
  }
  sub_23AD11644(v22, isUniquelyReferenced_nonNull_native);
  v24 = sub_23ACD5B4C((uint64_t)v16);
  if ((v23 & 1) == (v25 & 1))
  {
    v19 = v24;
    if ((v23 & 1) != 0)
      goto LABEL_4;
    goto LABEL_18;
  }
  sub_23AA9F52C(0, (unint64_t *)&unk_2542E2010);
  _Block_release(aBlock);
  _Block_release(aBlock);
  sub_23B1C7418();
  __break(1u);
}

uint64_t sub_23AC02F80(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (**a5)(_QWORD, _QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  _BYTE *v33;
  id v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD aBlock[6];

  v10 = sub_23B1C602C();
  v40 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v39 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23B1C60A4();
  v37 = *(_QWORD *)(v12 - 8);
  v38 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v36 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a5;
  v15 = *(_BYTE **)(a4 + 16);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = sub_23AC052B4;
  *(_QWORD *)(v16 + 24) = v14;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a4;
  v17[3] = a1;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = sub_23AC052B4;
  v17[7] = v14;
  v18 = &v15[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain];
  v19 = (void *)MEMORY[0x23B8615C4](&v15[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain]);
  swift_retain_n();
  _Block_copy(a5);
  swift_retain();
  swift_bridgeObjectRetain();
  v20 = a3;
  if (v19)
  {
    if (objc_msgSend(v19, sel_unableToStartup))
    {
      v21 = sub_23AC61E18();
      v22 = (void *)sub_23B1C5870();
      ((void (**)(_QWORD, void *))a5)[2](a5, v22);

      swift_release();
      swift_release();

      return swift_release_n();
    }

  }
  if ((v15[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_started] & 1) == 0)
  {
    v23 = (void *)MEMORY[0x23B8615C4](v18);
    if (v23)
    {
      v24 = v23;
      v35 = objc_msgSend(v23, sel_serialQueue);

      aBlock[4] = nullsub_1;
      aBlock[5] = 0;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_23AA698FC;
      aBlock[3] = &block_descriptor_277_0;
      v25 = _Block_copy(aBlock);
      v26 = v36;
      sub_23B1C6068();
      v42 = MEMORY[0x24BEE4AF8];
      sub_23AA7E38C((unint64_t *)&unk_2542E43B0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E7470);
      sub_23AAB5A28((unint64_t *)&qword_2542E7480, (uint64_t *)&unk_2542E7470, MEMORY[0x24BEE12C8]);
      v27 = v39;
      v28 = v41;
      sub_23B1C6DE8();
      v29 = v35;
      MEMORY[0x23B85F470](0, v26, v27, v25);
      _Block_release(v25);

      (*(void (**)(char *, uint64_t))(v40 + 8))(v27, v28);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v38);
    }
  }
  v30 = *(void **)&v15[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log];
  v31 = *(void **)&v15[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue];
  v32 = (_QWORD *)swift_allocObject();
  v32[2] = v15;
  v32[3] = sub_23AA956C8;
  v32[4] = v16;
  v32[5] = sub_23AC04B04;
  v32[6] = v17;
  v33 = v15;
  swift_retain();
  swift_retain();
  sub_23AA81A30((uint64_t)"userCheckedSuppressionCheckbox(forUserInteractionIdentifier:domainIdentifier:completionHandler:)", 96, 2, v30, v31, (uint64_t)sub_23AC0282C, (uint64_t)v32);
  swift_release();
  swift_release();
  swift_release();
  return swift_release_n();
}

uint64_t sub_23AC03378(void *a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  _BYTE *v31;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD aBlock[6];

  v8 = sub_23B1C602C();
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v37 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23B1C60A4();
  v35 = *(_QWORD *)(v10 - 8);
  v36 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a4;
  v14 = *(_BYTE **)(a3 + 16);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = sub_23AC052B4;
  *(_QWORD *)(v15 + 24) = v13;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a3;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = sub_23AC052B4;
  v16[6] = v13;
  v17 = &v14[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain];
  v18 = (void *)MEMORY[0x23B8615C4](&v14[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain]);
  swift_retain_n();
  _Block_copy(a4);
  swift_retain();
  v19 = a1;
  if (v18)
  {
    if (objc_msgSend(v18, sel_unableToStartup))
    {
      v20 = sub_23AC61E18();
      v21 = (void *)sub_23B1C5870();
      ((void (**)(_QWORD, void *))a4)[2](a4, v21);

      swift_release();
      swift_release();

      goto LABEL_9;
    }

  }
  if ((v14[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_started] & 1) == 0)
  {
    v22 = (void *)MEMORY[0x23B8615C4](v17);
    if (v22)
    {
      v23 = v22;
      v34 = objc_msgSend(v22, sel_serialQueue);

      aBlock[4] = nullsub_1;
      aBlock[5] = 0;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_23AA698FC;
      aBlock[3] = &block_descriptor_199;
      v24 = _Block_copy(aBlock);
      sub_23B1C6068();
      v40 = MEMORY[0x24BEE4AF8];
      sub_23AA7E38C((unint64_t *)&unk_2542E43B0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E7470);
      sub_23AAB5A28((unint64_t *)&qword_2542E7480, (uint64_t *)&unk_2542E7470, MEMORY[0x24BEE12C8]);
      v25 = v37;
      v26 = v39;
      sub_23B1C6DE8();
      v27 = v34;
      MEMORY[0x23B85F470](0, v12, v25, v24);
      _Block_release(v24);

      (*(void (**)(char *, uint64_t))(v38 + 8))(v25, v26);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v36);
    }
  }
  v28 = *(void **)&v14[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log];
  v29 = *(void **)&v14[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue];
  v30 = (_QWORD *)swift_allocObject();
  v30[2] = v14;
  v30[3] = sub_23AA956C8;
  v30[4] = v15;
  v30[5] = sub_23AC048B4;
  v30[6] = v16;
  v31 = v14;
  swift_retain();
  swift_retain();
  sub_23AA81A30((uint64_t)"disconnectDomainID(_:options:completionHandler:)", 48, 2, v28, v29, (uint64_t)sub_23AC0282C, (uint64_t)v30);
  swift_release();
  swift_release();
  swift_release();
LABEL_9:
  swift_release_n();
  return 0;
}

uint64_t sub_23AC03760(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  _BYTE *v30;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[6];

  v8 = sub_23B1C602C();
  v37 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v36 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23B1C60A4();
  v34 = *(_QWORD *)(v10 - 8);
  v35 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a4;
  v14 = *(_BYTE **)(a3 + 16);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = sub_23AC052B4;
  *(_QWORD *)(v15 + 24) = v13;
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a3;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = sub_23AC052B4;
  v16[6] = v13;
  v17 = &v14[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain];
  v18 = (void *)MEMORY[0x23B8615C4](&v14[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain]);
  swift_retain_n();
  _Block_copy(a4);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v18)
  {
    if (objc_msgSend(v18, sel_unableToStartup))
    {
      v19 = sub_23AC61E18();
      v20 = (void *)sub_23B1C5870();
      ((void (**)(_QWORD, void *))a4)[2](a4, v20);

      swift_release();
      swift_release();

      return swift_release_n();
    }

  }
  if ((v14[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_started] & 1) == 0)
  {
    v21 = (void *)MEMORY[0x23B8615C4](v17);
    if (v21)
    {
      v22 = v21;
      v33 = objc_msgSend(v21, sel_serialQueue);

      aBlock[4] = nullsub_1;
      aBlock[5] = 0;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_23AA698FC;
      aBlock[3] = &block_descriptor_178;
      v23 = _Block_copy(aBlock);
      sub_23B1C6068();
      v39 = MEMORY[0x24BEE4AF8];
      sub_23AA7E38C((unint64_t *)&unk_2542E43B0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E7470);
      sub_23AAB5A28((unint64_t *)&qword_2542E7480, (uint64_t *)&unk_2542E7470, MEMORY[0x24BEE12C8]);
      v24 = v36;
      v25 = v38;
      sub_23B1C6DE8();
      v26 = v33;
      MEMORY[0x23B85F470](0, v12, v24, v23);
      _Block_release(v23);

      (*(void (**)(char *, uint64_t))(v37 + 8))(v24, v25);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v35);
    }
  }
  v27 = *(void **)&v14[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log];
  v28 = *(void **)&v14[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue];
  v29 = (_QWORD *)swift_allocObject();
  v29[2] = v14;
  v29[3] = sub_23AA956C8;
  v29[4] = v15;
  v29[5] = sub_23AC04870;
  v29[6] = v16;
  v30 = v14;
  swift_retain();
  swift_retain();
  sub_23AA81A30((uint64_t)"wake(forSessionIdentifier:completionHandler:)", 45, 2, v27, v28, (uint64_t)sub_23AC0282C, (uint64_t)v29);
  swift_release();
  swift_release();
  swift_release();
  return swift_release_n();
}

uint64_t sub_23AC03B48()
{
  return objectdestroy_66Tm_0((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_23AC03B54()
{
  return objectdestroy_66Tm_0((void (*)(_QWORD))MEMORY[0x24BEE4CA0]);
}

void sub_23AC03B60(void *a1)
{
  uint64_t v1;

  sub_23ABFABF8(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(_QWORD, _QWORD))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_23AC03B6C()
{
  uint64_t v0;

  sub_23AA862DC(*(id *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_BYTE *)(v0 + 25));

  return swift_deallocObject();
}

uint64_t sub_23AC03BA0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23ABF9000(a1, a2, *(uint64_t (**)(_QWORD))(v2 + 16));
}

uint64_t sub_23AC03BA8()
{
  uint64_t v0;

  sub_23AC03BE4(*(_QWORD *)(v0 + 32));
  swift_release();

  return swift_deallocObject();
}

unint64_t sub_23AC03BE4(unint64_t result)
{
  switch((result >> 58) & 0x3C | (result >> 1) & 3)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_23AC03C20(uint64_t a1)
{
  uint64_t v1;

  return sub_23ACAD42C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(void **)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(_BYTE *)(v1 + 65));
}

uint64_t sub_23AC03C54()
{
  return objectdestroy_24Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

void sub_23AC03C60(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  sub_23ABF8238(a1, a2, a3, *(void (**)(uint64_t))(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
}

void sub_23AC03C6C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  sub_23ABF8B24(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_23AC03C74(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

uint64_t sub_23AC03C9C()
{
  return objectdestroy_96Tm_0((void (*)(_QWORD))MEMORY[0x24BEE4BC0], (void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_23AC03CB0(uint64_t a1)
{
  uint64_t v1;

  return sub_23AC00440(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_23AC03CC0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AC03CE4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23AC03D20(void *a1, char a2)
{
  uint64_t v2;

  sub_23AC009B8(a1, a2 & 1, *(NSObject **)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_23AC03D30()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC03D54()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23AC03D78()
{
  return objectdestroy_24Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

void sub_23AC03D84(uint64_t a1)
{
  uint64_t v1;

  sub_23AC0266C(*(void **)a1, *(_BYTE *)(a1 + 8), *(void (**)(void **))(v1 + 16), *(char **)(v1 + 24));
}

uint64_t sub_23AC03D9C()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23AC03DD0(uint64_t a1)
{
  uint64_t v1;

  sub_23ABFF958(a1, *(void (**)(id, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_23AC03DE4()
{
  return objectdestroy_124Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_23AC03DF4()
{
  uint64_t v0;

  return sub_23AC00B80(*(void (**)(uint64_t, uint64_t, _QWORD))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_23AC03E00@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC046D0);
  if (!v1)
    *a1 = result;
  return result;
}

uint64_t sub_23AC03E50(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23AC03E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for VFSItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23AC03EBC()
{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, uint64_t);
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = (int *)type metadata accessor for VFSItem(0);
  v2 = (*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  swift_release();
  swift_release();
  swift_release();
  v3 = v0 + v2;
  swift_bridgeObjectRelease();
  v4 = v0 + v2 + v1[7];
  v5 = (int *)type metadata accessor for ItemMetadata();
  v6 = v4 + v5[7];
  v7 = sub_23B1C5BDC();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(unint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v4 + v5[8], v7);
  swift_bridgeObjectRelease();
  v10 = v4 + v5[29];
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)(v4 + v5[33]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_23AAAE53C(*v11, v12);
  swift_bridgeObjectRelease();
  v13 = v3 + v1[8];
  v14 = *(void **)(v13 + 16);
  if (v14 != (void *)1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v13 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v15 = v3 + v1[12];
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
  {
    v17 = sub_23B1C5A08();
    v18 = *(_QWORD *)(v17 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17))
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v15, v17);
  }
  return swift_deallocObject();
}

uint64_t sub_23AC0411C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VFSItem(0) - 8) + 80);
  return sub_23ABFFEEC(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)v1 + ((v3 + 48) & ~v3));
}

uint64_t sub_23AC04160()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id *v8;
  char *v9;
  int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  char *v15;
  uint64_t *v16;
  unint64_t v17;
  char *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(unint64_t, uint64_t);
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  int *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v42;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E21B0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (int *)type metadata accessor for VFSItem(0);
  v5 = *((_QWORD *)v4 - 1);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6;
  swift_release();
  v8 = (id *)(v0 + v2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {

  }
  else if (!(*(unsigned int (**)(id *, uint64_t, int *))(v5 + 48))(v8, 1, v4))
  {
    v42 = (v6 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6;
    swift_bridgeObjectRelease();
    v9 = (char *)v8 + v4[7];
    v10 = (int *)type metadata accessor for ItemMetadata();
    v11 = &v9[v10[7]];
    v12 = sub_23B1C5BDC();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(void (**)(char *, uint64_t))(v13 + 8);
    v14(v11, v12);
    v14(&v9[v10[8]], v12);
    swift_bridgeObjectRelease();
    v15 = &v9[v10[29]];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v15, 1, v12))
      v14(v15, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = (uint64_t *)&v9[v10[33]];
    v17 = v16[1];
    if (v17 >> 60 != 15)
      sub_23AAAE53C(*v16, v17);
    swift_bridgeObjectRelease();
    v18 = (char *)v8 + v4[8];
    v19 = (void *)*((_QWORD *)v18 + 2);
    v7 = v42;
    if (v19 != (void *)1)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((_QWORD *)v18 + 24))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v20 = (char *)v8 + v4[12];
    v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
    {
      v22 = sub_23B1C5A08();
      v23 = *(_QWORD *)(v22 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
        (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    }
  }
  swift_release();
  swift_release();
  v24 = v0 + v7;
  swift_bridgeObjectRelease();
  v25 = v0 + v7 + v4[7];
  v26 = (int *)type metadata accessor for ItemMetadata();
  v27 = v25 + v26[7];
  v28 = sub_23B1C5BDC();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(void (**)(unint64_t, uint64_t))(v29 + 8);
  v30(v27, v28);
  v30(v25 + v26[8], v28);
  swift_bridgeObjectRelease();
  v31 = v25 + v26[29];
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v29 + 48))(v31, 1, v28))
    v30(v31, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v32 = (uint64_t *)(v25 + v26[33]);
  v33 = v32[1];
  if (v33 >> 60 != 15)
    sub_23AAAE53C(*v32, v33);
  swift_bridgeObjectRelease();
  v34 = v4;
  v35 = v24 + v4[8];
  v36 = *(void **)(v35 + 16);
  if (v36 != (void *)1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v35 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = v4;
  }
  v37 = v24 + v34[12];
  v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v37, 1, v38))
  {
    v39 = sub_23B1C5A08();
    v40 = *(_QWORD *)(v39 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v37, 1, v39))
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v37, v39);
  }
  return swift_deallocObject();
}

void sub_23AC04638()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E21B0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for VFSItem(0) - 8) + 80);
  sub_23AC00104(*(void (**)(void *, _BOOL8))(v0 + 16), *(_QWORD *)(v0 + 24), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), (uint64_t *)(v0 + ((v4 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v4)));
}

uint64_t sub_23AC046C8(uint64_t a1)
{
  uint64_t v1;

  return sub_23AAECB44(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23AC046D0@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_23ABFFE5C(*(_BYTE *)(v1 + 20), a1);
}

uint64_t sub_23AC046F0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_23AC04714(uint64_t a1)
{
  uint64_t v1;

  sub_23B0BB654(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23AC0471C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_23AC04760(unint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;

  sub_23ABFF4C8(a1, a2, a3, *(id *)(v3 + 16), *(void (**)(uint64_t))(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64));
}

void sub_23AC04790(uint64_t a1)
{
  uint64_t v1;

  sub_23ABFC354(a1, *(_QWORD *)(v1 + 16));
}

void sub_23AC04798()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (id)sub_23B1C5870();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

uint64_t sub_23AC047D8()
{
  return objectdestroy_96Tm_0((void (*)(_QWORD))MEMORY[0x24BEE4EF8], (void (*)(_QWORD))MEMORY[0x24BEE4CA0]);
}

uint64_t objectdestroy_96Tm_0(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 24));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC04830(uint64_t a1)
{
  return sub_23AC048C0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23ABFBB8C);
}

uint64_t sub_23AC0483C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC04870(uint64_t a1)
{
  return sub_23AC048C0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23ABFB9BC);
}

uint64_t sub_23AC04880()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC048B4(uint64_t a1)
{
  return sub_23AC048C0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23ABFB7EC);
}

uint64_t sub_23AC048C0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

void sub_23AC048D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23AC4D070(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_23AC048E0()
{
  return objectdestroy_66Tm_0((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t objectdestroy_66Tm_0(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));

  swift_release();
  return swift_deallocObject();
}

void sub_23AC04924(uint64_t a1)
{
  uint64_t *v1;

  sub_23ABFB5C0(a1, v1[2], v1[3], v1[4], v1[5]);
}

void sub_23AC04930(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_23ABFB52C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_23AC04938()
{
  return objectdestroy_46Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t objectdestroy_46Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release();
  return swift_deallocObject();
}

void *sub_23AC04974(uint64_t a1)
{
  uint64_t *v1;

  return sub_23ABFB274(a1, v1[2], v1[3], v1[4]);
}

void sub_23AC04980(uint64_t a1)
{
  uint64_t v1;

  sub_23ABF8628(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23AC04988()
{
  return objectdestroy_24Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

void sub_23AC04994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_23ABFB020(a1, a2, a3, *(void (**)(void))(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
}

uint64_t sub_23AC049A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23AC4D06C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_23AC049A8()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

void sub_23AC049EC(uint64_t a1)
{
  uint64_t *v1;

  sub_23ABF9DB8(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_23AC04A1C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AC04A58(uint64_t a1, uint64_t a2)
{
  return sub_23AC04D34(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23ABF9F7C);
}

uint64_t sub_23AC04A64()
{
  return objectdestroy_24Tm((void (*)(_QWORD))MEMORY[0x24BEE4CA0]);
}

uint64_t sub_23AC04A70(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 16))(a1, *(_QWORD *)(v1 + 32));
}

uint64_t sub_23AC04A98@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = fpfs_make_fsevent();
  *a1 = result;
  return result;
}

uint64_t sub_23AC04AC8()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

void sub_23AC04B04(uint64_t a1)
{
  uint64_t *v1;

  sub_23ABF9BC4(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t objectdestroy_15Tm_0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23AC04B4C(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_23AF24984(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_23AC04B54()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC04B88(uint64_t a1)
{
  uint64_t v1;

  return sub_23ABF9024(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_BYTE *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE *)(v1 + 56));
}

uint64_t sub_23AC04BA0(unint64_t a1)
{
  uint64_t v1;
  void (*v2)(void);

  v2 = *(void (**)(void))(v1 + 16);
  sub_23AEC5A50(a1);
  v2();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AC04BDC()
{
  return objectdestroy_24Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

void sub_23AC04BE8(uint64_t *a1, void *a2)
{
  uint64_t v2;

  sub_23AABEA74(*a1, a2, *(void (**)(uint64_t *, id))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), (uint64_t)&unk_250BE7B30, (uint64_t *)&unk_2569E27D0, (void (*)(uint64_t))MEMORY[0x24BEE4BD0], (void (*)(id))sub_23AC04D60);
}

uint64_t sub_23AC04C34()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23AC04C70()
{
  uint64_t v0;

  sub_23ABF9234(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(void (**)(_QWORD, void *))(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_23AC04C98(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *, uint64_t);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *, uint64_t))(v1 + 16);
  v4 = 0;
  return v2(&v4, a1);
}

uint64_t sub_23AC04CCC()
{
  return objectdestroy_24Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

void sub_23AC04CD8(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_23ABF98EC(a1, a2, *(void (**)(_QWORD, void *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_23AC04CE8(uint64_t a1, uint64_t a2)
{
  return sub_23AC04D34(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23ABF8D2C);
}

uint64_t objectdestroy_327Tm()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC04D34(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
}

uint64_t sub_23AC04D48()
{
  return objectdestroy_24Tm((void (*)(_QWORD))MEMORY[0x24BEE4CA0]);
}

uint64_t sub_23AC04D54()
{
  return objectdestroy_24Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_23AC04D64()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23AC04D98()
{
  uint64_t v0;

  sub_23B093554(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(id))(v0 + 32));
}

uint64_t sub_23AC04DA4(uint64_t a1)
{
  destroy for DatabaseError(a1);
  return a1;
}

void *sub_23AC04DD8(void *result)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

void sub_23AC04E04(void *a1, void *a2, unint64_t a3, void *a4, uint64_t a5, unint64_t a6, void *a7, uint64_t a8, uint64_t a9, void *a10, char a11)
{
  id v17;

  switch(a11)
  {
    case 0:

      sub_23AAAE4D0((uint64_t)a2, a3, (uint64_t)a4, a5, a6);
      a1 = a10;
      goto LABEL_6;
    case 1:

      swift_bridgeObjectRelease();
      sub_23AB22AE4(a5, a6);
      a1 = a7;
      goto LABEL_6;
    case 2:
      v17 = (id)a3;
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 3:

      a1 = a2;
      goto LABEL_6;
    case 4:
      v17 = a1;

LABEL_8:
      a1 = v17;
      goto LABEL_6;
    case 6:
    case 8:
    case 9:
LABEL_6:

      break;
    case 7:
      sub_23AAAE53C((uint64_t)a1, (unint64_t)a2);
      sub_23AAAE53C(a3, (unint64_t)a4);
      break;
    default:
      return;
  }
}

uint64_t sub_23AC04F64(uint64_t a1)
{
  sub_23AC04FC4(*(id *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(void **)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(void **)(a1 + 112), *(_BYTE *)(a1 + 120));
  return a1;
}

void sub_23AC04FC4(id a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, char a16)
{
  switch(a16)
  {
    case 0:
      sub_23AAAEE68(a3, a4, a5, a6, a7, a8, (uint64_t)a9, a10, a11);

      break;
    case 1:
      swift_bridgeObjectRelease();
      sub_23AB22AE4(a7, a8);

      break;
    case 2:
      swift_bridgeObjectRelease();
      break;
    case 3:
      a1 = (id)a3;
      goto LABEL_6;
    case 8:
LABEL_6:

      break;
    default:
      return;
  }
}

uint64_t sub_23AC050A4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 120) <= 9u)
    return *(unsigned __int8 *)(a1 + 120);
  else
    return (*(_DWORD *)a1 + 10);
}

uint64_t sub_23AC050BC()
{
  return objectdestroy_24Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

void sub_23AC050C8(uint64_t a1)
{
  uint64_t v1;

  sub_23B092FF0(a1, *(void (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_23AC050D4()
{
  return objectdestroy_24Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

void sub_23AC050E0(uint64_t a1)
{
  uint64_t v1;

  sub_23B092C4C(a1, *(void (**)(void *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_23AC050EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v2 + 16))(a1, a2, 0);
}

unint64_t sub_23AC05110()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2542E2020;
  if (!qword_2542E2020)
  {
    v1 = sub_23AA9F52C(255, (unint64_t *)&unk_2542E2010);
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&qword_2542E2020);
  }
  return result;
}

uint64_t sub_23AC05168()
{
  return objectdestroy_124Tm((void (*)(_QWORD))MEMORY[0x24BEE4F70]);
}

uint64_t objectdestroy_124Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  swift_release();
  a1(*(_QWORD *)(v1 + 40));
  return swift_deallocObject();
}

void sub_23AC051C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_23ABF7E28(a1, a2, a3, *(void (**)(uint64_t))(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(double *)(v3 + 48), *(double *)(v3 + 56));
}

uint64_t sub_23AC051D4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_23AC66A18(a1, a2, a3, *(uint64_t (**)(_QWORD, _QWORD))(v3 + 16));
}

uint64_t sub_23AC051DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_23AC05210(uint64_t a1)
{
  uint64_t v1;

  return sub_23AC66A40(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t, unint64_t, _QWORD))(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_23AC0521C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t sub_23AC05258()
{
  return objectdestroy_24Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_23AC05264(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *, uint64_t);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *, uint64_t))(v1 + 16);
  v4 = *(_QWORD *)(v1 + 32);
  return v2(&v4, a1);
}

uint64_t sub_23AC052A0()
{
  return objectdestroy_24Tm((void (*)(_QWORD))MEMORY[0x24BEE4F70]);
}

unint64_t sub_23AC05430@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_23AC05F7C(*a1);
  *a2 = result;
  return result;
}

void sub_23AC05458(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_23AC05464()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23AC05490 + 4 * byte_23B1D2080[*v0]))(0x656C646E6168, 0xE600000000000000);
}

uint64_t sub_23AC05490()
{
  return 0x7269447369;
}

uint64_t sub_23AC054A4()
{
  return 0x664F746E65747865;
}

uint64_t sub_23AC054C4()
{
  return 0x654C746E65747865;
}

uint64_t sub_23AC054E4()
{
  return 0x7367616C66;
}

uint64_t sub_23AC054F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23AC05F8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23AC0551C()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t sub_23AC05528@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_23AC05F7C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_23AC0554C()
{
  sub_23AC05D0C();
  return sub_23B1C7544();
}

uint64_t sub_23AC05574()
{
  sub_23AC05D0C();
  return sub_23B1C7550();
}

uint64_t sub_23AC0559C(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_23AC055E8(a1);
  return v2;
}

uint64_t sub_23AC055E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  char v23;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2838);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_BYTE *)(v1 + 80) = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AC05D0C();
  swift_retain();
  sub_23B1C7520();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for VFSStagedContext();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v23 = 0;
    sub_23AC05D94();
    sub_23B1C71C0();
    *(_OWORD *)(v1 + 16) = v20;
    *(_QWORD *)(v1 + 32) = v21;
    *(_OWORD *)(v1 + 40) = v22;
    LOBYTE(v20) = 1;
    *(_BYTE *)(v1 + 56) = sub_23B1C71A8() & 1;
    LOBYTE(v20) = 2;
    v9 = sub_23B1C7148();
    if ((v10 & 1) != 0)
    {
      v14 = 0;
      v15 = 0;
      v16 = 1;
    }
    else
    {
      v11 = v9;
      LOBYTE(v20) = 3;
      v12 = sub_23B1C7148();
      if ((v13 & 1) != 0)
        v14 = 0;
      else
        v14 = v11;
      if ((v13 & 1) != 0)
        v15 = 0;
      else
        v15 = v12;
      v16 = (v13 & 1) != 0;
    }
    *(_QWORD *)(v1 + 64) = v14;
    *(_QWORD *)(v1 + 72) = v15;
    *(_BYTE *)(v1 + 80) = v16;
    LOBYTE(v20) = 4;
    v17 = sub_23B1C7154();
    if ((v18 & 1) != 0)
      v19 = 0;
    else
      v19 = v17;
    *(_QWORD *)(v1 + 88) = v19;
    swift_release();
    sub_23B1C7124();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v1;
}

uint64_t sub_23AC058B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  v2 = v1;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E24F0);
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2820);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AC05D0C();
  sub_23B1C7538();
  v19 = *(_OWORD *)(v2 + 16);
  v20 = *(_QWORD *)(v2 + 32);
  v21 = *(_OWORD *)(v2 + 40);
  v22 = 0;
  sub_23AC05D50();
  v11 = v18;
  sub_23B1C72A4();
  if (v11)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v12 = v6;
  v13 = v17;
  LOBYTE(v19) = 1;
  sub_23B1C7280();
  if ((*(_BYTE *)(v2 + 80) & 1) == 0)
  {
    v18 = *(_QWORD *)(v2 + 72);
    LOBYTE(v19) = 2;
    sub_23B1C728C();
    LOBYTE(v19) = 3;
    sub_23B1C728C();
  }
  LOBYTE(v19) = 4;
  sub_23B1C7298();
  sub_23B1C7214();
  v18 = v7;
  __swift_project_boxed_opaque_existential_1(&v19, v21);
  sub_23AB6E3F4();
  v16 = v8;
  sub_23B1C7538();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v10, v18);
}

uint64_t sub_23AC05B48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = 1701603686;
  if (*(_BYTE *)(v0 + 56))
    v1 = 7498084;
  v3 = v1;
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if ((*(_BYTE *)(v0 + 80) & 1) == 0 && (*(_QWORD *)(v0 + 64) & 0x8000000000000000) == 0)
  {
    sub_23B1C64F4();
    type metadata accessor for CFRange(0);
    sub_23B1C7028();
    sub_23B1C64F4();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  if ((*(_BYTE *)(v0 + 88) & 1) != 0)
    sub_23B1C64F4();
  return v3;
}

uint64_t sub_23AC05CA0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AC05CA8()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VFSStagedContext()
{
  return objc_opt_self();
}

uint64_t sub_23AC05CEC()
{
  return sub_23AC05B48();
}

unint64_t sub_23AC05D0C()
{
  unint64_t result;

  result = qword_2569E2828;
  if (!qword_2569E2828)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D21F8, &type metadata for VFSStagedContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2828);
  }
  return result;
}

unint64_t sub_23AC05D50()
{
  unint64_t result;

  result = qword_2569E2830;
  if (!qword_2569E2830)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE974, &type metadata for VFSItemHandle);
    atomic_store(result, (unint64_t *)&qword_2569E2830);
  }
  return result;
}

unint64_t sub_23AC05D94()
{
  unint64_t result;

  result = qword_2569E2840;
  if (!qword_2569E2840)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE94C, &type metadata for VFSItemHandle);
    atomic_store(result, (unint64_t *)&qword_2569E2840);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for VFSStagedContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23AC05E24 + 4 * byte_23B1D208A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23AC05E58 + 4 * byte_23B1D2085[v4]))();
}

uint64_t sub_23AC05E58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AC05E60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23AC05E68);
  return result;
}

uint64_t sub_23AC05E74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23AC05E7CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23AC05E80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AC05E88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VFSStagedContext.CodingKeys()
{
  return &type metadata for VFSStagedContext.CodingKeys;
}

unint64_t sub_23AC05EA8()
{
  unint64_t result;

  result = qword_2569E2848;
  if (!qword_2569E2848)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D21D0, &type metadata for VFSStagedContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2848);
  }
  return result;
}

unint64_t sub_23AC05EF0()
{
  unint64_t result;

  result = qword_2569E2850;
  if (!qword_2569E2850)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2108, &type metadata for VFSStagedContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2850);
  }
  return result;
}

unint64_t sub_23AC05F38()
{
  unint64_t result;

  result = qword_2569E2858;
  if (!qword_2569E2858)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2130, &type metadata for VFSStagedContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2858);
  }
  return result;
}

unint64_t sub_23AC05F7C(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

uint64_t sub_23AC05F8C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C646E6168 && a2 == 0xE600000000000000;
  if (v2 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7269447369 && a2 == 0xE500000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x664F746E65747865 && a2 == 0xEC00000074657366 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x654C746E65747865 && a2 == 0xEC0000006874676ELL || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7367616C66 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23AC061C0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23AC06200(uint64_t a1)
{
  *(_QWORD *)(swift_allocObject() + 24) = a1;
  return sub_23AB04EA0();
}

uint64_t sub_23AC06238(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return sub_23AB04EA0();
}

uint64_t sub_23AC06240(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);

  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v3 = result;
    v4 = *(void (**)(uint64_t))(*(_QWORD *)v2 + 152);
    swift_retain();
    v4(v3);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AC062A0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);

  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v3 = result;
    v4 = *(void (**)(uint64_t))(*(_QWORD *)v2 + 160);
    swift_retain();
    v4(v3);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23AC06300()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
}

void sub_23AC063E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 160) = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v5 - 152) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v5 - 192) = v1;
  *(_QWORD *)(v5 - 184) = v3;
  *(_QWORD *)(v5 - 112) = v3;
  *(_QWORD *)(v5 - 104) = v1;
  *(_QWORD *)(v5 - 176) = v2;
  *(_QWORD *)(v5 - 96) = v2;
  *(_QWORD *)(v5 - 88) = v4;
  type metadata accessor for ItemReconciliation();
}

void sub_23AC06434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_getTupleTypeMetadata2();
  v4 = sub_23B1C6C98();
  *(_QWORD *)(v3 - 208) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 - 200) = v4;
  MEMORY[0x24BDAC7A8](v4);
  if (*(_QWORD *)(*(_QWORD *)(v3 - 72) + 24))
  {
    v5 = *(_QWORD *)(v3 - 144);
    *(_QWORD *)(v3 - 112) = v2;
    *(_QWORD *)(v3 - 104) = v5;
    *(_QWORD *)(v3 - 96) = v1;
    *(_QWORD *)(v3 - 88) = v0;
    type metadata accessor for ReconciliationID();
  }
  __break(1u);
}

void sub_23AC06604()
{
  type metadata accessor for ItemReconciliation();
}

void sub_23AC06654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v4 - 112) = v3;
  *(_QWORD *)(v4 - 104) = v0;
  *(_QWORD *)(v4 - 96) = v1;
  *(_QWORD *)(v4 - 88) = v2;
  type metadata accessor for ItemReconciliation();
}

void sub_23AC066D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 - 128) = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v5 = *(int *)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v0, v1, v2);
  *(_QWORD *)(v0 + v5) = *(_QWORD *)(v1 + v5);
  sub_23B0C62A4(v2, v6, *(_QWORD *)(v4 - 120));
}

uint64_t sub_23AC06734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v10(v1, v4);
  v11 = *(int *)(v6 + 48);
  v8(v5, v3, v4);
  v12 = *(_QWORD *)(v3 + v2);
  *(_QWORD *)(v5 + v11) = v12;
  *(_QWORD *)(v0 + *(_QWORD *)(v9 - 128)) = v12;
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(v5, v4);
}

void sub_23AC06798()
{
  type metadata accessor for ItemReconciliation();
}

void sub_23AC067E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  if (*(_QWORD *)(v2 + 24))
  {
    swift_retain();
    *(_QWORD *)(v6 - 112) = v1;
    *(_QWORD *)(v6 - 104) = v4;
    *(_QWORD *)(v6 - 96) = v3;
    *(_QWORD *)(v6 - 88) = v5;
    type metadata accessor for ItemReconciliation();
  }
  __break(1u);
}

void sub_23AC068A0()
{
  type metadata accessor for ItemReconciliation();
}

void sub_23AC068F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 - 144) = *(_QWORD *)(a1 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v7);
  if (*(_QWORD *)(v1 + 24))
  {
    swift_retain();
    *(_QWORD *)(v6 - 112) = v5;
    *(_QWORD *)(v6 - 104) = v2;
    *(_QWORD *)(v6 - 96) = v3;
    *(_QWORD *)(v6 - 88) = v4;
    type metadata accessor for ItemReconciliation();
  }
  __break(1u);
}

void sub_23AC06A04()
{
  type metadata accessor for ItemReconciliation();
}

void sub_23AC06A5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  if (*(_QWORD *)(v2 + 24))
  {
    swift_retain();
    *(_QWORD *)(v6 - 112) = v4;
    *(_QWORD *)(v6 - 104) = v1;
    *(_QWORD *)(v6 - 96) = v5;
    *(_QWORD *)(v6 - 88) = v3;
    type metadata accessor for ItemReconciliation();
  }
  __break(1u);
}

void sub_23AC06B20()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
}

void sub_23AC06BF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  if (*(_QWORD *)(v2 + 24))
  {
    *(_QWORD *)(v6 - 112) = v5;
    *(_QWORD *)(v6 - 104) = v4;
    *(_QWORD *)(v6 - 96) = v3;
    *(_QWORD *)(v6 - 88) = v1;
    type metadata accessor for ReconciliationID();
  }
  __break(1u);
}

void sub_23AC06CB4()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
}

void sub_23AC06D8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  if (*(_QWORD *)(v2 + 24))
  {
    *(_QWORD *)(v6 - 112) = v5;
    *(_QWORD *)(v6 - 104) = v4;
    *(_QWORD *)(v6 - 96) = v3;
    *(_QWORD *)(v6 - 88) = v1;
    type metadata accessor for ReconciliationID();
  }
  __break(1u);
}

void sub_23AC06E48()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ReconciliationID();
}

uint64_t sub_23AC06F24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void (*v24)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[96];

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v5 = sub_23B1C6C98();
  *(_QWORD *)(v2 - 168) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v27[-v7];
  v9 = swift_getTupleTypeMetadata2();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = &v27[-v11];
  *(_QWORD *)(v2 - 160) = *(_QWORD *)(a1 - 8);
  result = MEMORY[0x24BDAC7A8](v10);
  v15 = &v27[-v14];
  v16 = *(_QWORD *)(v1 + 24);
  if (v16)
  {
    v17 = *(void (**)(uint64_t))(*(_QWORD *)v16 + 224);
    v18 = swift_retain();
    v19 = *(_QWORD *)(v2 - 72);
    v17(v18);
    result = swift_release();
    if (!v19)
    {
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata2 - 8) + 48))(v8, 1, TupleTypeMetadata2) == 1)
      {
        (*(void (**)(_BYTE *, _QWORD))(v6 + 8))(v8, *(_QWORD *)(v2 - 168));
        v20 = *(_QWORD *)(v2 - 128);
        *(_QWORD *)(v2 - 112) = *(_QWORD *)(v2 - 136);
        *(_QWORD *)(v2 - 104) = v20;
        v21 = *(_QWORD *)(v2 - 144);
        *(_QWORD *)(v2 - 96) = *(_QWORD *)(v2 - 152);
        *(_QWORD *)(v2 - 88) = v21;
        type metadata accessor for ReconciliationID();
      }
      v22 = v8[*(int *)(TupleTypeMetadata2 + 48)];
      v23 = *(int *)(v9 + 48);
      v24 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v2 - 160) + 32);
      v24(v12, v8, a1);
      v12[v23] = v22;
      v24(v15, v12, a1);
      v25 = *(_QWORD *)(v2 - 128);
      *(_QWORD *)(v2 - 112) = *(_QWORD *)(v2 - 136);
      *(_QWORD *)(v2 - 104) = v25;
      v26 = *(_QWORD *)(v2 - 144);
      *(_QWORD *)(v2 - 96) = *(_QWORD *)(v2 - 152);
      *(_QWORD *)(v2 - 88) = v26;
      type metadata accessor for ReconciliationID();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23AC071C0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 232);
    v3 = swift_retain();
    v2(v3);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void sub_23AC07218()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 240);
    v3 = swift_retain();
    v2(v3);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void sub_23AC07270()
{
  uint64_t v0;

  v0 = sub_23B1C6F20();
  MEMORY[0x24BDAC7A8](v0);
  type metadata accessor for ReconciliationMutation();
}

uint64_t sub_23AC07308(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v6 - 136) = a1;
  v7 = sub_23B1C7010();
  *(_QWORD *)(v6 - 176) = *(_QWORD *)(v7 - 8);
  result = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v17 - v9;
  v11 = *(_QWORD *)(v1 + 24);
  if (v11)
  {
    swift_retain();
    sub_23B1C6614();
    v12 = (_QWORD *)swift_allocObject();
    v13 = *(_QWORD *)(v6 - 168);
    v12[2] = *(_QWORD *)(v6 - 160);
    v12[3] = v13;
    v14 = *(_QWORD *)(v6 - 144);
    v12[4] = v5;
    v12[5] = v14;
    v12[6] = *(_QWORD *)(v6 - 152);
    v12[7] = v4;
    MEMORY[0x23B8613CC](MEMORY[0x24BEE25B0], v2);
    sub_23B1C70E8();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 120) + 8))(v3, v2);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v11 + 520);
    v16 = MEMORY[0x23B8613CC](MEMORY[0x24BEE2B40], v7);
    v15(v10, v7, v16);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 176) + 8))(v10, v7);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AC07470(uint64_t result, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(_BOOL8, uint64_t, uint64_t);
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[6];
  _DWORD v25[2];
  _DWORD *v26;
  uint64_t v27;

  v5 = v3[3];
  if (v5)
  {
    v7 = (_QWORD *)*v3;
    v8 = a3 & 1;
    v9 = *(uint64_t (**)(_BOOL8, uint64_t, uint64_t))(*(_QWORD *)v5 + 384);
    v10 = (result & 1) == 0;
    swift_retain();
    v11 = v8;
    v12 = v5;
    v13 = v9(v10, a2, v11);
    v15 = v14;
    v16 = swift_release();
    if (!v4)
    {
      v26 = v25;
      v25[1] = v15 & 1;
      v27 = v13;
      MEMORY[0x24BDAC7A8](v16);
      v17 = v7[70];
      v24[2] = v7[69];
      v24[3] = v17;
      v18 = v7[71];
      v19 = v7[72];
      v24[4] = v18;
      v24[5] = v19;
      swift_getAssociatedTypeWitness();
      sub_23B1C6C98();
      swift_getAssociatedTypeWitness();
      sub_23B1C6C98();
      swift_getTupleTypeMetadata2();
      v20 = sub_23B1C67DC();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v22 = MEMORY[0x23B8613CC](MEMORY[0x24BEE12E0], v20);
      v12 = sub_23AD7E264((void (*)(char *, char *))sub_23AC07CC4, (uint64_t)v24, v20, TupleTypeMetadata2, MEMORY[0x24BEE4078], v22, MEMORY[0x24BEE40A8], v23);
      swift_bridgeObjectRelease();
    }
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AC07664(uint64_t result, char a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, _BOOL8, uint64_t, uint64_t, uint64_t);
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t TupleTypeMetadata2;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[6];
  _DWORD v29[2];
  _DWORD *v30;
  uint64_t v31;

  v7 = v5[3];
  if (v7)
  {
    v10 = result;
    v11 = (_QWORD *)*v5;
    v12 = a5 & 1;
    v13 = *(uint64_t (**)(uint64_t, _BOOL8, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 392);
    v14 = (a2 & 1) == 0;
    swift_retain();
    v15 = v12;
    v16 = v7;
    v17 = v13(v10, v14, a3, a4, v15);
    v19 = v18;
    v20 = swift_release();
    if (!v6)
    {
      v30 = v29;
      v29[1] = v19 & 1;
      v31 = v17;
      MEMORY[0x24BDAC7A8](v20);
      v21 = v11[70];
      v28[2] = v11[69];
      v28[3] = v21;
      v22 = v11[71];
      v23 = v11[72];
      v28[4] = v22;
      v28[5] = v23;
      swift_getAssociatedTypeWitness();
      sub_23B1C6C98();
      swift_getAssociatedTypeWitness();
      sub_23B1C6C98();
      swift_getTupleTypeMetadata2();
      v24 = sub_23B1C67DC();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      v26 = MEMORY[0x23B8613CC](MEMORY[0x24BEE12E0], v24);
      v16 = sub_23AD7E264((void (*)(char *, char *))sub_23AC07C18, (uint64_t)v28, v24, TupleTypeMetadata2, MEMORY[0x24BEE4078], v26, MEMORY[0x24BEE40A8], v27);
      swift_bridgeObjectRelease();
    }
    return v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AC07868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v23 = a2;
  swift_getAssociatedTypeWitness();
  v4 = sub_23B1C6C98();
  swift_getAssociatedTypeWitness();
  v5 = sub_23B1C6C98();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v25 = TupleTypeMetadata2;
  v7 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v22 - v10;
  v27 = a2 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v12 = *(int *)(TupleTypeMetadata2 + 48);
  v13 = &v11[v12];
  v14 = a1;
  v24 = a1;
  v15 = a1 + v12;
  v26 = *(_QWORD *)(v4 - 8);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  v16(v11, v14, v4);
  v17 = *(_QWORD *)(v5 - 8);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v13, v15, v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v23, v13, v5);
  v19 = &v9[*(int *)(v25 + 48)];
  v16(v9, v24, v4);
  v18(v19, v15, v5);
  v20 = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v27, v9, v4);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v11, v4);
}

void sub_23AC07A64()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 304);
    v3 = swift_retain();
    v2(v3);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_23AC07ABC(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(v2 + 24);
  if (v4)
  {
    v5 = result;
    v6 = a2 & 1;
    v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 368);
    swift_retain();
    v8 = v7(v5, v6);
    swift_release();
    if (v3)
      return v9;
    else
      return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AC07B30(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(v2 + 24);
  if (v4)
  {
    v5 = result;
    v6 = a2 & 1;
    v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 440);
    swift_retain();
    v8 = v7(v5, v6);
    swift_release();
    if (v3)
      return v9;
    else
      return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AC07BA4()
{
  return swift_release();
}

uint64_t sub_23AC07BAC()
{
  uint64_t v0;

  v0 = sub_23AB04E54();
  swift_release();
  return v0;
}

uint64_t sub_23AC07BD8()
{
  sub_23AB04E54();
  swift_release();
  return swift_deallocClassInstance();
}

void type metadata accessor for SwappedReconciliationTable()
{
  JUMPOUT(0x23B861318);
}

uint64_t sub_23AC07C18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23AC07868(a1, a2);
}

uint64_t sub_23AC07C38()
{
  return swift_deallocObject();
}

void sub_23AC07C48()
{
  type metadata accessor for ReconciliationMutation();
}

void sub_23AC07C84(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_23AB54930(a1, a4, v4);
}

void sub_23AC07CA4()
{
  sub_23AC06604();
}

uint64_t sub_23AC07CC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23AC07C18(a1, a2);
}

uint64_t sub_23AC07CD8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, void *);
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    sub_23B1C59CC();
    v10 = sub_23B1C5A08();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 0, 1, v10);
  }
  else
  {
    v11 = sub_23B1C5A08();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
  }
  swift_retain();
  v12 = a3;
  v9(v8, a3);
  swift_release();

  return sub_23AA8A05C((uint64_t)v8, (uint64_t *)&unk_2542E6740);
}

unint64_t sub_23AC07E74()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_itemIdentifier));
  sub_23AA7B734();
  sub_23B1C64F4();

  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v2 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_requestor));
  v3 = objc_msgSend(v2, sel_description);
  sub_23B1C63E0();

  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

double sub_23AC07F7C(uint64_t a1, char a2)
{
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v4 = objc_msgSend((id)objc_opt_self(), sel_defaultStore);
  if ((objc_msgSend(v4, sel_hasUpcallExecutionTimeLimits) & 1) != 0)
    goto LABEL_5;
  if (qword_2569E1290 != -1)
    swift_once();
  if ((byte_2569E2860 & 1) != 0)
  {
LABEL_5:
    objc_msgSend(v4, sel_upcallExecutionTimeLimitBase);
    v6 = v5;
    if ((a2 & 1) != 0)
    {

    }
    else
    {
      objc_msgSend(v4, sel_upcallExecutionTimeLimitPerKiloByte);
      v8 = v7;

      return v6 + (double)a1 / 1000.0 * v8;
    }
  }
  else
  {

    return -1.0;
  }
  return v6;
}

id sub_23AC080AC()
{
  return sub_23ABF7D20(0, type metadata accessor for FPFileTreeLifetimeExtender);
}

uint64_t type metadata accessor for FPFileTreeLifetimeExtender()
{
  return objc_opt_self();
}

id sub_23AC0824C(uint64_t a1)
{
  return sub_23ABF7D20(a1, type metadata accessor for FPXPCNonSanitizingErrorProxy);
}

uint64_t type metadata accessor for FPXPCNonSanitizingErrorProxy()
{
  return objc_opt_self();
}

NSObject *sub_23AC08278()
{
  NSObject *result;

  result = FPCreateWorkloop("com.apple.fssync.fpfiletree");
  qword_2542EDBA0 = (uint64_t)result;
  return result;
}

uint64_t sub_23AC082A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  void *Strong;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4320);
  v1 = MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)v19 - v4;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v7 = objc_msgSend(Strong, sel_provider);

  if (v7)
  {
    v8 = objc_msgSend(v7, sel_bundleVersion);

    v9 = sub_23B1C63E0();
    v11 = v10;

  }
  else
  {
    v9 = 0x6E776F6E6B6E753CLL;
    v11 = 0xE90000000000003ELL;
  }
  v12 = (void *)swift_unknownObjectUnownedLoadStrong();
  v13 = objc_msgSend(v12, sel_provider);

  if (v13)
  {
    v14 = objc_msgSend(v13, sel_descriptor);

    v15 = objc_msgSend(v14, sel_extensionUUID);
    if (v15)
    {
      sub_23B1C5C24();

      v16 = sub_23B1C5C54();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v3, 0, 1, v16);
    }
    else
    {
      v16 = sub_23B1C5C54();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v3, 1, 1, v16);
    }
    sub_23AA724E8((uint64_t)v3, (uint64_t)v5, (uint64_t *)&unk_2542E4320);
    sub_23B1C5C54();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v5, 1, v16) == 1)
    {
      sub_23AA8A05C((uint64_t)v5, (uint64_t *)&unk_2542E4320);
    }
    else
    {
      sub_23B1C5C00();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v16);
    }
  }
  v19[0] = v9;
  v19[1] = v11;
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return v19[0];
}

id sub_23AC0853C()
{
  void *Strong;
  id v1;
  id v2;

  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v1 = objc_msgSend(Strong, sel_provider);

  if (v1)
  {
    v2 = objc_msgSend(v1, sel_descriptor);

    v1 = objc_msgSend(v2, sel_appliesChangesAtomically);
  }
  return v1;
}

uint64_t sub_23AC085BC()
{
  uint64_t v0;
  id v1;
  void *Strong;
  unsigned int v3;
  void *v4;
  id v5;
  id v6;

  if ((*(_BYTE *)(v0 + 272) & 1) != 0)
    return 1;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v3 = objc_msgSend(Strong, sel_isConnectedToAppExtension);

  if (!v3)
    return 0;
  v4 = (void *)swift_unknownObjectUnownedLoadStrong();
  v1 = objc_msgSend(v4, sel_provider);

  if (v1)
  {
    v5 = objc_msgSend(v1, sel_asAppExtensionBackedProvider);

    v6 = objc_msgSend(v5, sel_descriptor);
    v1 = objc_msgSend(v6, sel_wantsFlattenedPackages);

  }
  return (uint64_t)v1;
}

void *sub_23AC086A4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  void *Strong;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  _QWORD v14[6];

  v1 = v0;
  v2 = *(void **)(v0 + 280);
  v3 = v2;
  if (v2 == (void *)1)
  {
    v4 = *(uint64_t (**)(void))(v1 + 216);
    if (v4)
    {
      v3 = (void *)v4();
      if (v3)
      {
        Strong = (void *)swift_unknownObjectUnownedLoadStrong();
        v6 = objc_msgSend(Strong, sel_providerDomainID);

        v7 = (void *)sub_23AB60CA8();
        v8 = swift_allocObject();
        *(_QWORD *)(v8 + 16) = v7;
        v14[4] = sub_23AC2788C;
        v14[5] = v8;
        v14[0] = MEMORY[0x24BDAC760];
        v14[1] = 1107296256;
        v14[2] = sub_23B149074;
        v14[3] = &block_descriptor_492;
        v9 = _Block_copy(v14);
        v10 = v7;
        swift_release();
        objc_msgSend(v3, sel_setModifyDecoratedPayloadHook_forCategory_, v9, 1);
        _Block_release(v9);

      }
    }
    else
    {
      v3 = 0;
    }
    v11 = *(void **)(v1 + 280);
    *(_QWORD *)(v1 + 280) = v3;
    v12 = v3;
    sub_23AC23ABC(v11);
  }
  sub_23AC2787C(v2);
  return v3;
}

void sub_23AC087F4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  id v18;
  id v19;

  if ((sub_23B0DC678(a4) & 1) == 0)
  {
    objc_msgSend(a3, sel_removeAllObjects);
    return;
  }
  v6 = (void *)sub_23B1C63BC();
  objc_msgSend(a3, sel___swift_setObject_forKeyedSubscript_, v6, sub_23B1C7400());

  swift_unknownObjectRelease();
  if (a2)
  {
    v7 = a2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE880);
    sub_23AA9F52C(0, (unint64_t *)&qword_2542E2000);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v8 = objc_msgSend(v19, sel_fp_protectionClassBehindError);
      if (v8)
      {
        v9 = v8;
        sub_23B1C63E0();
        v10 = (void *)sub_23B1C63BC();
        swift_bridgeObjectRelease();
        objc_msgSend(a3, sel___swift_setObject_forKeyedSubscript_, v10, sub_23B1C7400());

        swift_unknownObjectRelease();
      }
      if (!os_variant_has_internal_content())
        goto LABEL_17;
      v11 = objc_msgSend(v19, sel_domain);
      v12 = sub_23B1C63E0();
      v14 = v13;

      if (v12 == sub_23B1C63E0() && v14 == v15)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v16 = sub_23B1C7388();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
        {
LABEL_17:

          return;
        }
      }
      if ((uint64_t)objc_msgSend(v19, sel_code) >= 4096 && (uint64_t)objc_msgSend(v19, sel_code) <= 4224)
      {
        v17 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
        v18 = objc_msgSend(v17, sel_crashReporterKey);

        if (!v18)
        {
          sub_23B1C63E0();
          v18 = (id)sub_23B1C63BC();
          swift_bridgeObjectRelease();
        }
        objc_msgSend(a3, sel___swift_setObject_forKeyedSubscript_, v18, sub_23B1C7400());

        swift_unknownObjectRelease();
      }
      goto LABEL_17;
    }
  }
}

fp_task_tracker *sub_23AC08B38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  fp_task_tracker *result;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  void *Strong;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  signed int v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;

  type metadata accessor for TaskTracker();
  v9 = swift_allocObject();
  swift_retain();
  result = fp_task_tracker_create("fpfiletree");
  if (!result)
  {
    __break(1u);
    return result;
  }
  v46 = a2;
  *(_OWORD *)(v4 + 232) = 0u;
  v11 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v9 + 16) = result;
  *(_QWORD *)(v4 + 168) = v9;
  *(_QWORD *)(v4 + 176) = v11;
  *(_QWORD *)(v4 + 184) = v11;
  *(_BYTE *)(v4 + 192) = 0;
  *(_QWORD *)(v4 + 200) = 0;
  *(_BYTE *)(v4 + 208) = 0;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 257) = 0u;
  *(_QWORD *)(v4 + 280) = 1;
  *(_QWORD *)(v4 + 288) = 0;
  *(_QWORD *)(v4 + 296) = 0;
  *(_QWORD *)(v4 + 304) = 0;
  *(_QWORD *)(v4 + 312) = 1;
  if (qword_2542E1358 != -1)
    swift_once();
  v12 = (void *)qword_2542EDCE8;
  v13 = (void *)unk_2542EDCF0;
  *(_QWORD *)(v4 + 320) = qword_2542EDCE8;
  *(_QWORD *)(v4 + 328) = v13;
  v14 = type metadata accessor for FileProviderPageToken();
  v15 = v13;
  v16 = v12;
  sub_23B19427C(v14);
  swift_unknownObjectUnownedInit();
  if (qword_2542E0468 != -1)
    swift_once();
  v17 = (void *)qword_2542EDBA0;
  *(_QWORD *)(v4 + 160) = qword_2542EDBA0;
  *(_QWORD *)(v4 + 216) = a3;
  *(_QWORD *)(v4 + 224) = a4;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v19 = v17;
  sub_23AAFA320(a3);
  v20 = objc_msgSend(Strong, sel_provider);

  v47 = a3;
  if (!v20)
  {
    swift_release();
    goto LABEL_11;
  }
  v21 = objc_msgSend(v20, sel_descriptor);

  swift_release();
  if (!v21)
  {
LABEL_11:
    v25 = 1;
    v26 = sub_23AC20E30(0x64616F6C6E776F64, 0xE800000000000000, 0, 1);
    v27 = sub_23AC20E30(0x64616F6C7075, 0xE600000000000000, 0, 1);
    v21 = 0;
    v28 = 0;
    goto LABEL_19;
  }
  v22 = objc_msgSend(v21, sel_downloadPipelineDepth);
  v23 = v22;
  if (v22)
  {
    v24 = objc_msgSend(v22, sel_integerValue);

  }
  else
  {
    v24 = 0;
  }
  v26 = sub_23AC20E30(0x64616F6C6E776F64, 0xE800000000000000, (uint64_t)v24, v23 == 0);
  v29 = objc_msgSend(v21, sel_uploadPipelineDepth);
  v30 = v29;
  if (v29)
  {
    v31 = objc_msgSend(v29, sel_integerValue);

  }
  else
  {
    v31 = 0;
  }
  v27 = sub_23AC20E30(0x64616F6C7075, 0xE600000000000000, (uint64_t)v31, v30 == 0);
  v32 = objc_msgSend(v21, sel_metadataOnlyUploadPipelineDepth);
  if (v32)
  {
    v33 = v32;
    v28 = objc_msgSend(v32, sel_integerValue);

    v25 = 0;
  }
  else
  {
    v28 = 0;
    v25 = 1;
  }
LABEL_19:
  v34 = sub_23AC20E30(0xD000000000000012, 0x800000023B1FBCF0, (uint64_t)v28, v25);
  v35 = v34;
  if (!v27)
  {
    type metadata accessor for JobLimit();
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_23B1D22E0;
    *(_OWORD *)(v36 + 32) = xmmword_23B1D22F0;
    if (v35)
      goto LABEL_21;
LABEL_23:
    type metadata accessor for JobLimit();
    v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_23B1D22E0;
    *(_OWORD *)(v37 + 32) = xmmword_23B1D22F0;
    goto LABEL_24;
  }
  v36 = (uint64_t)v27;
  if (!v34)
    goto LABEL_23;
LABEL_21:
  v37 = (uint64_t)v35;
LABEL_24:
  v48 = a1;
  v45 = v21;
  if (v26)
  {
    v38 = (uint64_t)v26;
  }
  else
  {
    type metadata accessor for JobLimit();
    v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_23B1D2300;
    *(_OWORD *)(v38 + 32) = xmmword_23B1D2310;
  }
  v39 = (void *)objc_opt_self();
  swift_retain();
  swift_retain();
  swift_retain();
  v40 = objc_msgSend(v39, sel_defaultStore);
  v41 = (int)objc_msgSend(v40, sel_softConcurrentOperationLimit);
  v42 = objc_msgSend(v40, sel_hardConcurrentOperationLimit);

  type metadata accessor for JobLimit();
  v43 = (_QWORD *)swift_allocObject();
  v43[2] = 0;
  v43[3] = v41;
  v43[4] = v41;
  v43[5] = v42;
  v44 = sub_23B1490F0(v46, (uint64_t)v43, v36, v37, v38);
  sub_23AAB7948(v47);
  swift_release();
  swift_release();
  swift_release();

  return (fp_task_tracker *)v44;
}

void sub_23AC09034(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;

  v3 = sub_23B1C5D8C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v15 = a1;
    v7 = objc_msgSend(v15, sel_extendedAttributes);
    if (v7)
    {
      v8 = v7;
      v9 = sub_23B1C620C();

      swift_retain();
      sub_23AC212B8(v9, v1);
      swift_bridgeObjectRelease();
      swift_release();
      v10 = (void *)sub_23B1C61F4();
      swift_release();
      objc_msgSend(v15, sel_setExtendedAttributes_, v10);

    }
    if (objc_msgSend(v15, sel_isFlattenedPackage))
    {
      v11 = objc_msgSend(v15, sel_filename);
      if (v11)
      {
        v12 = v11;
        v13 = objc_msgSend(v11, sel_stringByDeletingPathExtension);

        if (!v13)
        {
          sub_23B1C63E0();
          v13 = (id)sub_23B1C63BC();
          swift_bridgeObjectRelease();
        }
        objc_msgSend(v15, sel_setFilename_, v13);

        sub_23B1C5D50();
        v14 = (void *)sub_23B1C5D08();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        objc_msgSend(v15, sel_setContentType_, v14);

      }
      else
      {
        __break(1u);
      }
    }
    else
    {

    }
  }
}

void sub_23AC09260(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void (*v16)(char *, uint64_t);
  void *Strong;
  id v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD aBlock[6];

  v4 = sub_23B1C5E4C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)aBlock - v9;
  v11 = objc_msgSend(a1, sel_domainVersion);
  LOBYTE(a2) = sub_23AC42EA4(v11, a2);

  if ((a2 & 1) != 0)
  {
    v12 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v13 = sub_23B1C5E40();
    v14 = sub_23B1C6A88();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_23AA66000, v13, v14, "found new domain version, setting new domainUserInfo", v15, 2u);
      MEMORY[0x23B8614BC](v15, -1, -1);
    }

    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v10, v4);
    Strong = (void *)swift_unknownObjectUnownedLoadStrong();
    v18 = objc_msgSend(Strong, sel_provider);

    if (v18)
    {
      v19 = objc_msgSend(a1, sel_domainUserInfo);
      if (v19)
      {
        sub_23B1C620C();

        v19 = (id)sub_23B1C61F4();
        swift_bridgeObjectRelease();
      }
      v20 = (void *)swift_unknownObjectUnownedLoadStrong();
      v21 = objc_msgSend(v20, sel_identifier);

      if (v21)
      {
        v22 = swift_allocObject();
        *(_QWORD *)(v22 + 16) = v18;
        aBlock[4] = sub_23AC27874;
        aBlock[5] = v22;
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 1107296256;
        aBlock[2] = sub_23AC46D44;
        aBlock[3] = &block_descriptor_486;
        v23 = _Block_copy(aBlock);
        v24 = v18;
        swift_release();
        objc_msgSend(v24, sel_setDomainUserInfo_forDomainIdentifier_completionHandler_, v19, v21, v23);
        _Block_release(v23);

      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      v25 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      v26 = sub_23B1C5E40();
      v27 = sub_23B1C6AA0();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v28 = 0;
        _os_log_impl(&dword_23AA66000, v26, v27, "Error setting new domainUserInfo, provider was nil", v28, 2u);
        MEMORY[0x23B8614BC](v28, -1, -1);
      }

      v16(v8, v4);
    }
  }
}

void sub_23AC095CC(void *a1, void *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  _QWORD *v22;
  _QWORD *v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;

  v4 = (_QWORD *)sub_23B1C5E4C();
  v5 = *(v4 - 1);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v28 - v9;
  if (a1)
  {
    v11 = a1;
    v12 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v13 = a1;
    v14 = a1;
    v15 = sub_23B1C5E40();
    v16 = sub_23B1C6AA0();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v30 = v4;
      v19 = (_QWORD *)v18;
      v29 = v5;
      *(_DWORD *)v17 = 138412290;
      v20 = (void *)sub_23B1C5870();
      v21 = objc_msgSend(v20, sel_fp_prettyDescription);

      v31 = v21;
      v5 = v29;
      sub_23B1C6CBC();
      *v19 = v21;

      _os_log_impl(&dword_23AA66000, v15, v16, "Error setting domain user info: %@", v17, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      v22 = v19;
      v4 = v30;
      MEMORY[0x23B8614BC](v22, -1, -1);
      MEMORY[0x23B8614BC](v17, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, _QWORD *))(v5 + 8))(v10, v4);
  }
  else
  {
    v23 = objc_msgSend(a2, sel_server);
    if (v23)
    {
      v30 = v23;
      objc_msgSend(v23, sel_signalProviderChangesWithLowPriority);

    }
    else
    {
      v24 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      v25 = sub_23B1C5E40();
      v26 = sub_23B1C6AA0();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v27 = 0;
        _os_log_impl(&dword_23AA66000, v25, v26, "Error signaling change after setting new domainUserInfo, server was nil", v27, 2u);
        MEMORY[0x23B8614BC](v27, -1, -1);
      }

      (*(void (**)(char *, _QWORD *))(v5 + 8))(v8, v4);
    }
  }
}

void sub_23AC098D4(void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  id v15;
  void *Strong;
  id v17;
  id v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  NSObject *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  id v50;
  id v51;
  id v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  os_log_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  os_log_t v64;
  id v65;
  uint64_t v66;
  id v67;
  uint64_t v68;

  v5 = sub_23B1C5E4C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23B1C60EC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)((char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (void *)v2[20];
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BEE5610], v9);
  v14 = v13;
  LOBYTE(v13) = sub_23B1C6104();
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (!a1)
    return;
  v15 = a1;
  sub_23AC09260(v15, a2);
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v17 = objc_msgSend(Strong, sel_provider);

  if (!v17
    || (v18 = objc_msgSend(v17, sel_descriptor),
        v17,
        v19 = objc_msgSend(v18, sel_appliesChangesAtomically),
        v18,
        (v19 & 1) == 0))
  {

    return;
  }
  v20 = v2[39];
  if (v20 == 1)
  {
LABEL_12:
    v31 = objc_msgSend(v15, sel_extensionPid);
    v32 = objc_msgSend(v15, sel_sequenceNumber);
    v33 = objc_msgSend(v15, sel_callDescription);
    if (v33)
    {
      v34 = v33;
      v28 = sub_23B1C63E0();
      v30 = v35;

    }
    else
    {

      v28 = 0;
      v30 = 0;
    }
    v36 = v2[36];
    v37 = v2[37];
    v38 = v2[38];
    v39 = v2[39];
    v2[36] = v31;
    v2[37] = v32;
    goto LABEL_16;
  }
  v22 = v2[36];
  v21 = v2[37];
  v23 = v2[38];
  swift_bridgeObjectRetain();
  if (objc_msgSend(v15, sel_extensionPid) != (_DWORD)v22)
  {
    sub_23AC23ACC(v22, v21, v23, v20);
    goto LABEL_12;
  }
  v66 = v23;
  if (v21 < (uint64_t)objc_msgSend(v15, sel_sequenceNumber))
  {
    sub_23AC23ACC(v22, v21, v66, v20);
    v24 = objc_msgSend(v15, sel_extensionPid);
    v25 = objc_msgSend(v15, sel_sequenceNumber);
    v26 = objc_msgSend(v15, sel_callDescription);
    if (v26)
    {
      v27 = v26;
      v28 = sub_23B1C63E0();
      v30 = v29;

    }
    else
    {

      v28 = 0;
      v30 = 0;
    }
    v36 = v2[36];
    v37 = v2[37];
    v38 = v2[38];
    v39 = v2[39];
    v2[36] = v24;
    v2[37] = v25;
LABEL_16:
    v2[38] = v28;
    v2[39] = v30;
    sub_23AC23ACC(v36, v37, v38, v39);
    return;
  }
  v40 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v41 = v15;
  v42 = v66;
  sub_23AC27860(v22, v21, v66, v20);
  v43 = v41;
  sub_23AC27860(v22, v21, v42, v20);
  v44 = v43;
  sub_23AC27860(v22, v21, v42, v20);
  v45 = sub_23B1C5E40();
  v46 = sub_23B1C6AAC();
  if (os_log_type_enabled(v45, (os_log_type_t)v46))
  {
    v63 = v46;
    v64 = v45;
    v47 = swift_slowAlloc();
    v62 = swift_slowAlloc();
    v68 = v62;
    *(_DWORD *)v47 = 134219266;
    v65 = (id)(v47 + 4);
    v67 = objc_msgSend(v44, sel_sequenceNumber);
    sub_23B1C6CBC();
    *(_WORD *)(v47 + 12) = 2048;
    v67 = (id)v21;
    sub_23B1C6CBC();
    *(_WORD *)(v47 + 22) = 2048;
    sub_23AC23ACC(v22, v21, v42, v20);
    v67 = (id)v21;
    sub_23B1C6CBC();
    sub_23AC23ACC(v22, v21, v42, v20);
    *(_WORD *)(v47 + 32) = 2082;
    if (v20)
      v48 = v42;
    else
      v48 = 0x6E776F6E6B6E753CLL;
    v65 = v44;
    if (v20)
      v49 = v20;
    else
      v49 = 0xE90000000000003ELL;
    v60 = v48;
    v61 = v47 + 34;
    swift_bridgeObjectRetain();
    v67 = (id)sub_23AABEC68(v60, v49, &v68);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    sub_23AC23ACC(v22, v21, v42, v20);
    sub_23AC23ACC(v22, v21, v42, v20);
    *(_WORD *)(v47 + 42) = 2048;
    v50 = objc_msgSend(v65, sel_sequenceNumber);

    v67 = v50;
    v51 = v65;
    sub_23B1C6CBC();

    *(_WORD *)(v47 + 52) = 2082;
    v52 = objc_msgSend(v51, sel_callDescription);
    if (v52)
    {
      v53 = v52;
      v54 = sub_23B1C63E0();
      v56 = v55;

    }
    else
    {
      v54 = 0x6E776F6E6B6E753CLL;
      v56 = 0xE90000000000003ELL;
    }
    v67 = (id)sub_23AABEC68(v54, v56, &v68);
    sub_23B1C6CBC();

    swift_bridgeObjectRelease();
    v57 = v64;
    _os_log_impl(&dword_23AA66000, v64, (os_log_type_t)v63, "sequence number received out of order: %ld <= %ld\n    %ld: %{public}s\n    %ld: %{public}s", (uint8_t *)v47, 0x3Eu);
    v58 = v62;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v58, -1, -1);
    MEMORY[0x23B8614BC](v47, -1, -1);

  }
  else
  {

    sub_23AC23ACC(v22, v21, v42, v20);
    sub_23AC23ACC(v22, v21, v42, v20);

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_23AC09F80(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  void *Strong;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  unsigned __int8 v18;
  void *v19;
  id v20;
  id v21;
  double v22;
  double v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  _QWORD *v29;
  void *v30;
  id v31;
  id v32;
  _QWORD aBlock[6];

  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v11 = objc_msgSend(Strong, sel_provider);

  if (!v11)
    goto LABEL_13;
  v12 = objc_msgSend(v11, sel_identifier);

  v13 = (void *)swift_unknownObjectUnownedLoadStrong();
  v14 = objc_msgSend(v13, sel_identifier);

  if (!v14)
  {
    __break(1u);
LABEL_13:
    sub_23B1C704C();
    __break(1u);
    return;
  }
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC82E8]), sel_initWithProviderID_domainIdentifier_itemIdentifier_, v12, v14, a2);

  v16 = (id)fpfs_current_log();
  v17 = (void *)swift_unknownObjectUnownedLoadStrong();
  v18 = objc_msgSend(v17, sel_userEnabled);

  if ((v18 & 1) != 0)
  {
    v19 = (void *)swift_unknownObjectUnownedLoadStrong();
    v20 = objc_msgSend(v19, sel_session);

    v21 = objc_msgSend((id)objc_opt_self(), sel_defaultStore);
    if ((objc_msgSend(v21, sel_hasUpcallExecutionTimeLimits) & 1) != 0)
      goto LABEL_8;
    if (qword_2569E1290 != -1)
      swift_once();
    v22 = -1.0;
    if (byte_2569E2860 == 1)
    {
LABEL_8:
      objc_msgSend(v21, sel_upcallExecutionTimeLimitBase);
      v22 = v23;
    }

    v24 = objc_msgSend(v20, sel_newFileProviderProxyWithTimeout_pid_, 0, v22);
    swift_unknownObjectRelease();
  }
  else
  {
    v24 = (id)sub_23AC21600((void **)&protocolRef_FPXVendor);
  }
  v25 = objc_msgSend((id)objc_opt_self(), sel_requestForSelf);
  v26 = (void *)swift_unknownObjectUnownedLoadStrong();
  v27 = objc_msgSend(v26, sel_session);

  v28 = objc_msgSend(v25, sel_nsfpRequestForSession_isSpeculative_, v27, 0);
  swift_unknownObjectRelease();
  objc_msgSend(v28, sel_setDomainVersion_, a3);
  v29 = (_QWORD *)swift_allocObject();
  v29[2] = a1;
  v29[3] = v16;
  v29[4] = a3;
  v29[5] = a4;
  v29[6] = a5;
  aBlock[4] = sub_23AC27700;
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AC0A564;
  aBlock[3] = &block_descriptor_458;
  v30 = _Block_copy(aBlock);
  swift_retain();
  v31 = v16;
  v32 = a3;
  swift_retain();
  swift_release();
  objc_msgSend(v24, sel_itemForItemID_request_completionHandler_, v15, v28, v30);
  _Block_release(v30);

  swift_unknownObjectRelease();
}

uint64_t sub_23AC0A35C(void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a4;
  v16[3] = a2;
  v16[4] = a6;
  v16[5] = a3;
  v16[6] = a7;
  v16[7] = a8;
  v16[8] = a1;
  swift_retain();
  v17 = a2;
  v18 = a6;
  v19 = a3;
  v20 = a1;
  swift_retain();
  sub_23AA814FC(a5, (uint64_t)"lookupItem(by:lastKnownVersion:domainVersion:options:completion:)", 65, 2, (uint64_t)sub_23AC2775C, (uint64_t)v16);
  return swift_release();
}

void sub_23AC0A42C(uint64_t a1, void *a2, void *a3, void *a4, void (*a5)(void *, uint64_t), uint64_t a6, void *a7)
{
  id v10;
  char v11;
  id v12;
  id v13;
  id v14;

  sub_23AC098D4(a2, a3);
  if (a4)
  {
    _s3__C4CodeOMa_1(0);
    v10 = a4;
    sub_23AA7E38C((unint64_t *)&qword_2542E1FA0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_23B1CCA68);
    v11 = sub_23B1C575C();

    if ((v11 & 1) == 0)
    {
      v12 = a4;
      a5(a4, 1);

      return;
    }
  }
  else if (a7)
  {
    v13 = a7;
    sub_23AC09034(a7);
    v14 = v13;
    a5(a7, 0);

    return;
  }
  a5(0, 0);
}

void sub_23AC0A564(uint64_t a1, void *a2, void *a3, void *a4)
{
  void (*v7)(void *, void *, void *);
  id v8;
  id v9;
  id v10;

  v7 = *(void (**)(void *, void *, void *))(a1 + 32);
  swift_retain();
  v10 = a2;
  v8 = a3;
  v9 = a4;
  v7(a2, a3, a4);
  swift_release();

}

void sub_23AC0A5F4(void *a1, void *a2, void (*a3)(uint64_t, id, uint64_t (*)(), uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  id v10;
  id v11;
  id v12;
  id v13;
  void *Strong;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  unsigned __int8 v24;
  void *v25;
  id v26;
  id v27;
  double v28;
  double v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  _QWORD *v40;
  void *v41;
  id v42;
  id v43;
  void (*v44)(uint64_t, id, uint64_t (*)(), uint64_t);
  uint64_t v45;
  id v46;
  _QWORD aBlock[6];

  v5 = v4;
  v10 = objc_allocWithZone((Class)type metadata accessor for FPFileTreeLifetimeExtender());
  v11 = a2;
  v12 = a1;
  v13 = sub_23AC20C2C(v12, a2, 0, 1);

  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v15 = objc_msgSend(Strong, sel_session);

  objc_msgSend(v15, sel_registerLifetimeExtensionForObject_, v13);
  swift_unknownObjectRelease();
  v16 = (void *)swift_unknownObjectUnownedLoadStrong();
  LODWORD(v15) = objc_msgSend(v16, sel_userEnabled);

  if (!(_DWORD)v15)
  {
    v31 = sub_23AC21600((void **)&protocolRef_FPXEnumerator);
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = v5;
    *(_QWORD *)(v32 + 24) = v13;
    swift_retain();
    v33 = v13;
    a3(v31, v33, sub_23AC27894, v32);

    swift_unknownObjectRelease();
    swift_release();
    return;
  }
  v44 = a3;
  v45 = a4;
  v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC8288]), sel_init);
  v17 = (void *)swift_unknownObjectUnownedLoadStrong();
  v18 = objc_msgSend(v17, sel_provider);

  if (!v18)
    goto LABEL_17;
  v19 = objc_msgSend(v18, sel_identifier);

  v20 = (void *)swift_unknownObjectUnownedLoadStrong();
  v21 = objc_msgSend(v20, sel_identifier);

  if (!v21)
  {
    __break(1u);
LABEL_17:
    sub_23B1C704C();
    __break(1u);
    return;
  }
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC82E8]), sel_initWithProviderID_domainIdentifier_itemIdentifier_, v19, v21, v12);

  objc_msgSend(v46, sel_setEnumeratedItemID_, v22);
  v23 = (void *)swift_unknownObjectUnownedLoadStrong();
  v24 = objc_msgSend(v23, sel_userEnabled);

  if ((v24 & 1) != 0)
  {
    v25 = (void *)swift_unknownObjectUnownedLoadStrong();
    v26 = objc_msgSend(v25, sel_session);

    v27 = objc_msgSend((id)objc_opt_self(), sel_defaultStore);
    if ((objc_msgSend(v27, sel_hasUpcallExecutionTimeLimits) & 1) != 0)
      goto LABEL_9;
    if (qword_2569E1290 != -1)
      swift_once();
    v28 = -1.0;
    if (byte_2569E2860 == 1)
    {
LABEL_9:
      objc_msgSend(v27, sel_upcallExecutionTimeLimitBase);
      v28 = v29;
    }

    v30 = objc_msgSend(v26, sel_newFileProviderProxyWithTimeout_pid_, 0, v28);
    swift_unknownObjectRelease();
  }
  else
  {
    v30 = (id)sub_23AC21600((void **)&protocolRef_FPXVendor);
  }
  v34 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DummyEnumeratorObserver()), sel_init);
  v35 = v11;
  if (!a2)
    v35 = objc_msgSend((id)objc_opt_self(), sel_requestForSelf);
  v36 = (void *)swift_unknownObjectUnownedLoadStrong();
  v37 = v11;
  v38 = objc_msgSend(v36, sel_session);

  v39 = objc_msgSend(v35, sel_nsfpRequestForSession_isSpeculative_, v38, 0);
  swift_unknownObjectRelease();
  objc_msgSend(v39, sel_setDomainVersion_, 0);
  v40 = (_QWORD *)swift_allocObject();
  v40[2] = v5;
  v40[3] = v13;
  v40[4] = v12;
  v40[5] = v44;
  v40[6] = v45;
  aBlock[4] = sub_23AC27604;
  aBlock[5] = v40;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AC45EB4;
  aBlock[3] = &block_descriptor_480;
  v41 = _Block_copy(aBlock);
  v42 = v12;
  swift_retain();
  v43 = v13;
  swift_retain();
  swift_release();
  objc_msgSend(v30, sel_fetchAndStartEnumeratingWithSettings_observer_request_completionHandler_, v46, v34, v39, v41);
  _Block_release(v41);

  swift_unknownObjectRelease();
}

uint64_t sub_23AC0AB88(uint64_t a1, uint64_t a2)
{
  void *Strong;
  id v4;

  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v4 = objc_msgSend(Strong, sel_session);

  objc_msgSend(v4, sel_unregisterLifetimeExtensionForObject_, a2);
  return swift_unknownObjectRelease();
}

void sub_23AC0ABEC(uint64_t a1, void *a2, uint64_t a3, char *a4, uint64_t a5, void (*a6)(uint64_t, char *, uint64_t (*)(_QWORD), _QWORD *), uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  char *v24;
  void *Strong;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  objc_class *v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  id v37;
  _QWORD v38[2];
  void (*v39)(uint64_t, char *, uint64_t (*)(_QWORD), _QWORD *);
  void *v40;
  void *v41;
  void *v42;
  objc_super v43;
  uint64_t v44;
  unint64_t v45;

  v38[1] = a7;
  v39 = a6;
  v11 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v11);
  v12 = sub_23B1C5474();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1 || a2)
  {
    Strong = (void *)swift_unknownObjectUnownedLoadStrong();
    v26 = objc_msgSend(Strong, sel_session);

    objc_msgSend(v26, sel_unregisterLifetimeExtensionForObject_, a4);
    swift_unknownObjectRelease();
    v27 = &unk_256A09B50;
    if (a2)
    {
      v28 = a2;
    }
    else
    {
      sub_23B1C5360();
      sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
      sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
      sub_23B1C5864();
      v28 = (void *)sub_23B1C5354();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }
    v44 = 0;
    v45 = 0xE000000000000000;
    v29 = a2;
    sub_23B1C6EFC();
    swift_bridgeObjectRelease();
    v44 = 0x746172656D756E65;
    v45 = 0xEF20726F6620726FLL;
    sub_23AA7B734();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    v30 = objc_msgSend(*(id *)&a4[OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_requestor], sel_pid);
    v31 = (objc_class *)type metadata accessor for FPXPCNonSanitizingErrorProxy();
    v32 = objc_allocWithZone(v31);
    v33 = (void *)sub_23B1C5870();
    v34 = (void *)sub_23B1C63BC();
    swift_bridgeObjectRelease();
    v43.receiver = v32;
    v43.super_class = v31;
    v35 = objc_msgSendSuper2(&v43, sel_initWithConnection_protocol_orError_name_requestPid_, 0, &unk_256A09B50, v33, v34, v30);

    v42 = &unk_256A09B50;
    v36 = swift_dynamicCastObjCProtocolUnconditional();
    v37 = v35;
    v39(v36, a4, nullsub_1, 0);

  }
  else
  {
    v41 = &unk_256A1BE50;
    v16 = swift_dynamicCastObjCProtocolUnconditional();
    v44 = 0x746172656D756E65;
    v45 = 0xEB0000000020726FLL;
    swift_unknownObjectRetain_n();
    v17 = &unk_256A09B50;
    sub_23AA7B734();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    v18 = objc_allocWithZone(MEMORY[0x24BDC83A8]);
    v19 = (void *)sub_23B1C63BC();
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(v18, sel_initWithConnection_protocol_orError_name_requestPid_, v16, v17, 0, v19, 0);

    swift_unknownObjectRelease();
    v40 = &unk_256A09B50;
    v21 = swift_dynamicCastObjCProtocolUnconditional();
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = v21;
    v22[3] = a3;
    v22[4] = a4;
    v23 = v20;
    swift_retain();
    v24 = a4;
    v39(v21, v24, (uint64_t (*)(_QWORD))sub_23AC2763C, v22);
    swift_unknownObjectRelease();

    swift_release();
  }
}

uint64_t sub_23AC0B038(void *a1, uint64_t a2, uint64_t a3)
{
  void *Strong;
  id v5;

  objc_msgSend(a1, sel_invalidate);
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v5 = objc_msgSend(Strong, sel_session);

  objc_msgSend(v5, sel_unregisterLifetimeExtensionForObject_, a3);
  return swift_unknownObjectRelease();
}

uint64_t sub_23AC0B0AC(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  void *v26;

  v15 = (id)fpfs_current_log();
  if (!a1)
    goto LABEL_4;
  type metadata accessor for FileProviderPageToken();
  v16 = swift_dynamicCastClass();
  if (!v16)
  {
    sub_23B1C704C();
    __break(1u);
LABEL_4:
    v17 = sub_23B1C5AD4();
    v19 = v18;
    v26 = a4;
    v20 = a5;
    v21 = sub_23B1C5AA4();
    sub_23AAAE53C(v17, v19);
    type metadata accessor for FileProviderPageToken();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = a2;
    *(_QWORD *)(v16 + 24) = v21;
    a5 = v20;
    a4 = v26;
    v22 = a2;
  }
  v23 = a2;
  v24 = v15;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23AC21738(v23, a4, a3, v15, v16, a5, a6, a3, v23, a7, a8);

  swift_release_n();
  swift_release();
  swift_release();

  return swift_release();
}

void sub_23AC0B280(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12)
{
  id v18;
  _QWORD *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v26;
  id v27;
  _QWORD aBlock[6];

  v18 = (id)fpfs_adopt_log();
  v26 = *(_QWORD *)(a6 + 24);
  v27 = v18;
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a5;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = a7;
  v19[6] = a8;
  v19[7] = a9;
  v19[8] = a10;
  v19[9] = a2;
  v19[10] = a11;
  v19[11] = a12;
  v19[12] = a6;
  aBlock[4] = sub_23AC276A4;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AF24A18;
  aBlock[3] = &block_descriptor_440;
  v20 = _Block_copy(aBlock);
  v21 = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  v22 = a10;
  v23 = a2;
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_enumerateItemsFromPage_suggestedPageSize_reply_, v26, 200, v20);
  _Block_release(v20);
  v24 = (id)fpfs_adopt_log();

}

void sub_23AC0B404(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void (*a7)(void), uint64_t a8, void (*a9)(void *, uint64_t), uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t (*a14)(unint64_t), uint64_t a15, uint64_t a16)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  id v23;
  char v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  id v35;
  void *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  uint64_t v45;
  id v46;
  void *v47;
  char v48;
  void (*v49)(void *, uint64_t);
  void *v50;
  void *v51;
  uint64_t v52;
  id v53;
  id v54;
  id v55;
  void (*v56)(void *, uint64_t);
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t i;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;

  v62 = a11;
  v58 = a2;
  v59 = a10;
  v18 = sub_23B1C5D8C();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (id)fpfs_adopt_log();
  a7();
  if (a5)
  {
    _s3__C4CodeOMa_1(0);
    v66 = -1002;
    v23 = a5;
    sub_23AA7E38C((unint64_t *)&qword_2542E1FA0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_23B1CCA68);
    v24 = sub_23B1C575C();

    if ((v24 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
      sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
      a5 = (void *)swift_allocError();
      *(_QWORD *)v25 = 3;
      *(_OWORD *)(v25 + 8) = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
      *(_OWORD *)(v25 + 40) = 0u;
      *(_OWORD *)(v25 + 56) = 0u;
      *(_QWORD *)(v25 + 72) = 0;
      *(_BYTE *)(v25 + 80) = 10;
      a9(a5, 1);
    }
    else
    {
      v45 = *(_QWORD *)(a13
                      + OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_timeoutState);
      v46 = a5;
      v47 = sub_23AC16914(a5, a12, 0, v45);
      a9(v47, 1);

    }
    goto LABEL_29;
  }
  v60 = v19;
  v61 = v18;
  v56 = a9;
  v57 = v22;
  v26 = a12;
  v27 = swift_bridgeObjectRetain();
  v28 = sub_23AC202C8(v27);
  swift_bridgeObjectRelease();

  if (v28 >> 62)
  {
LABEL_31:
    swift_retain_n();
    swift_bridgeObjectRetain();
    v29 = sub_23B1C7088();
    if (v29)
      goto LABEL_6;
LABEL_24:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v48 = a14(v28);
    swift_bridgeObjectRelease();
    if ((v48 & 1) != 0)
    {
      v56(0, 0);
      v22 = v57;
    }
    else
    {
      v49 = v56;
      v22 = v57;
      v50 = v58;
      if (v58)
      {
        v51 = *(void **)(a16 + 16);
        type metadata accessor for FileProviderPageToken();
        v52 = swift_allocObject();
        *(_QWORD *)(v52 + 16) = v51;
        *(_QWORD *)(v52 + 24) = v50;
        v53 = v50;
        v54 = v51;
        v49((void *)v52, 0);
        swift_release();
      }
      else
      {
        v56(0, 0);
      }
    }
LABEL_29:
    v55 = (id)fpfs_adopt_log();

    return;
  }
  v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_retain_n();
  swift_bridgeObjectRetain();
  if (!v29)
    goto LABEL_24;
LABEL_6:
  v64 = v29;
  v65 = v28 & 0xC000000000000001;
  v30 = 4;
  for (i = v28; ; v28 = i)
  {
    v31 = v30 - 4;
    if (v65)
    {
      v32 = (id)MEMORY[0x23B85F860](v30 - 4, v28);
      v33 = v30 - 3;
      if (__OFADD__(v31, 1))
        goto LABEL_30;
    }
    else
    {
      v32 = *(id *)(v28 + 8 * v30);
      v33 = v30 - 3;
      if (__OFADD__(v31, 1))
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
    }
    v34 = v32;
    v35 = objc_msgSend(v34, sel_extendedAttributes);
    if (v35)
    {
      v36 = v35;
      v37 = v21;
      v38 = sub_23B1C620C();

      v39 = v62;
      swift_retain();
      sub_23AC212B8(v38, v39);
      swift_bridgeObjectRelease();
      swift_release();
      v21 = v37;
      v40 = (void *)sub_23B1C61F4();
      swift_release();
      objc_msgSend(v34, sel_setExtendedAttributes_, v40);

    }
    if (objc_msgSend(v34, sel_isFlattenedPackage))
      break;
LABEL_19:

    if (v33 == v64)
    {
      v28 = i;
      goto LABEL_24;
    }
    ++v30;
  }
  v41 = objc_msgSend(v34, sel_filename);
  if (v41)
  {
    v42 = v41;
    v43 = objc_msgSend(v41, sel_stringByDeletingPathExtension);

    if (!v43)
    {
      sub_23B1C63E0();
      v43 = (id)sub_23B1C63BC();
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v34, sel_setFilename_, v43);

    sub_23B1C5D50();
    v44 = (void *)sub_23B1C5D08();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v21, v61);
    objc_msgSend(v34, sel_setContentType_, v44);

    goto LABEL_19;
  }
  __break(1u);
}

uint64_t sub_23AC0B94C(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *Strong;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;

  v6 = v5;
  v34 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_allocWithZone((Class)type metadata accessor for FPFileTreeLifetimeExtender());
  v15 = a2;
  v33 = v15;
  v16 = a1;
  v17 = sub_23AC20C2C(v16, a2, 0, 1);

  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v19 = objc_msgSend(Strong, sel_session);

  objc_msgSend(v19, sel_registerLifetimeExtensionForObject_, v17);
  swift_unknownObjectRelease();
  v20 = *(_QWORD *)(v6 + 168);
  v32 = *(void **)(v6 + 160);
  v21 = sub_23B1C60A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v13, 1, 1, v21);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = a4;
  *(_QWORD *)(v22 + 24) = a5;
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v6;
  v23[3] = a2;
  v24 = v34;
  v23[4] = v34;
  v23[5] = v16;
  v23[6] = v17;
  v23[7] = a4;
  v23[8] = a5;
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = sub_23AAB5414;
  v25[3] = v22;
  v25[4] = v20;
  v26 = v24;
  v27 = v17;
  swift_retain();
  swift_retain();
  swift_retain_n();
  v28 = v16;
  v29 = v33;
  swift_retain();
  sub_23AA9086C(v32, (uint64_t)v13, sub_23AC274A0, v25, (uint64_t)sub_23AC27490, (uint64_t)v23);

  swift_release();
  swift_release();
  swift_release();
  return sub_23AA8A05C((uint64_t)v13, &qword_2542DD460);
}

void sub_23AC0BB88(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  void *Strong;
  unsigned int v12;
  void *v13;
  id v14;
  id v15;
  double v16;
  double v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  _QWORD *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v40;
  _QWORD aBlock[6];

  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v12 = objc_msgSend(Strong, sel_userEnabled);

  if (v12)
  {
    v13 = (void *)swift_unknownObjectUnownedLoadStrong();
    v14 = objc_msgSend(v13, sel_session);

    v15 = objc_msgSend((id)objc_opt_self(), sel_defaultStore);
    if ((objc_msgSend(v15, sel_hasUpcallExecutionTimeLimits) & 1) != 0)
      goto LABEL_6;
    if (qword_2569E1290 != -1)
      swift_once();
    v16 = -1.0;
    if (byte_2569E2860 == 1)
    {
LABEL_6:
      objc_msgSend(v15, sel_upcallExecutionTimeLimitBase);
      v16 = v17;
    }

    v18 = objc_msgSend(v14, sel_newFileProviderProxyWithTimeout_pid_, 0, v16);
    swift_unknownObjectRelease();
    v40 = a7;
    if (a2)
      goto LABEL_8;
  }
  else
  {
    v18 = (id)sub_23AC21600((void **)&protocolRef_FPXVendor);
    v40 = a7;
    if (a2)
    {
LABEL_8:
      v19 = a2;
      goto LABEL_11;
    }
  }
  v19 = objc_msgSend((id)objc_opt_self(), sel_requestForSelf);
LABEL_11:
  v20 = (void *)swift_unknownObjectUnownedLoadStrong();
  v21 = a2;
  v22 = objc_msgSend(v20, sel_session);

  v23 = objc_msgSend(v19, sel_nsfpRequestForSession_isSpeculative_, v22, 0);
  swift_unknownObjectRelease();
  objc_msgSend(v23, sel_setDomainVersion_, a3);
  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC8288]), sel_init);
  v25 = (void *)swift_unknownObjectUnownedLoadStrong();
  v26 = objc_msgSend(v25, sel_provider);

  if (v26)
  {
    v27 = objc_msgSend(v26, sel_identifier);

    v28 = (void *)swift_unknownObjectUnownedLoadStrong();
    v29 = objc_msgSend(v28, sel_identifier);

    if (v29)
    {
      v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC82E8]), sel_initWithProviderID_domainIdentifier_itemIdentifier_, v27, v29, a4);

      objc_msgSend(v24, sel_setEnumeratedItemID_, v30);
      v31 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DummyEnumeratorObserver()), sel_init);
      v32 = (_QWORD *)swift_allocObject();
      v32[2] = a1;
      v32[3] = a5;
      v32[4] = a6;
      v32[5] = v40;
      v32[6] = a4;
      v32[7] = v18;
      aBlock[4] = sub_23AC274F0;
      aBlock[5] = v32;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_23AC45EB4;
      aBlock[3] = &block_descriptor_410;
      v33 = _Block_copy(aBlock);
      v34 = v23;
      swift_retain();
      v35 = a5;
      swift_retain();
      v36 = a4;
      swift_unknownObjectRetain();
      swift_release();
      objc_msgSend(v18, sel_listRemoteVersionsWithSettings_observer_request_completionHandler_, v24, v31, v34, v33);
      _Block_release(v33);
      swift_unknownObjectRelease();

      return;
    }
    __break(1u);
  }
  sub_23B1C704C();
  __break(1u);
}

uint64_t sub_23AC0BFE8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t), uint64_t a6, void *a7, void *a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  void *Strong;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;

  v29 = a8;
  v30 = a4;
  v12 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v12);
  v13 = sub_23B1C5474();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v17 = a2;
    a5(a2, 1);

    Strong = (void *)swift_unknownObjectUnownedLoadStrong();
    v19 = objc_msgSend(Strong, sel_session);

    objc_msgSend(v19, sel_unregisterLifetimeExtensionForObject_, v30, v29);
    return swift_unknownObjectRelease();
  }
  v20 = v30;
  if (a1)
  {
    v21 = swift_unknownObjectRetain();
    a5((void *)v21, 0);
    swift_unknownObjectRelease();
    v22 = (void *)swift_unknownObjectUnownedLoadStrong();
    v23 = objc_msgSend(v22, sel_session);

    objc_msgSend(v23, sel_unregisterLifetimeExtensionForObject_, v20, v29);
    return swift_unknownObjectRelease();
  }
  sub_23B1C5360();
  sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
  sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
  sub_23B1C5864();
  v25 = (void *)sub_23B1C5354();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v26 = sub_23AC16914(v25, a7, 0, (uint64_t)objc_msgSend(v29, sel_timeoutState));

  a5(v26, 1);
  v27 = (void *)swift_unknownObjectUnownedLoadStrong();
  v28 = objc_msgSend(v27, sel_session);

  objc_msgSend(v28, sel_unregisterLifetimeExtensionForObject_, v20);
  return swift_unknownObjectRelease();
}

uint64_t sub_23AC0C290(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  objc_class *v18;
  char *v19;
  void *v20;
  char *v21;
  id v22;
  id v23;
  double v24;
  double v25;
  id v26;
  void *Strong;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  id v36;
  id v37;
  uint64_t v38;
  void *v40;
  id v41;
  char *v42;
  uint64_t v43;
  objc_super v44;

  v42 = (char *)a3;
  v43 = a2;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (objc_class *)type metadata accessor for FPFileTreeLifetimeExtender();
  v19 = (char *)objc_allocWithZone(v18);
  *(_QWORD *)&v19[OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_timeoutState] = 0;
  *(_QWORD *)&v19[OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_itemIdentifier] = a1;
  v20 = (void *)objc_opt_self();
  v41 = a1;
  v21 = v19;
  v22 = objc_msgSend(v20, sel_requestForSelf);
  *(_QWORD *)&v21[OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_requestor] = v22;
  v23 = objc_msgSend((id)objc_opt_self(), sel_defaultStore);
  if ((objc_msgSend(v23, sel_hasUpcallExecutionTimeLimits) & 1) != 0)
    goto LABEL_5;
  if (qword_2569E1290 != -1)
    swift_once();
  v24 = -1.0;
  if (byte_2569E2860 == 1)
  {
LABEL_5:
    objc_msgSend(v23, sel_upcallExecutionTimeLimitBase);
    v24 = v25;
  }

  *(double *)&v21[OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_timeout] = v24;
  v44.receiver = v21;
  v44.super_class = v18;
  v26 = objc_msgSendSuper2(&v44, sel_init);
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v28 = objc_msgSend(Strong, sel_session);

  objc_msgSend(v28, sel_registerLifetimeExtensionForObject_, v26);
  swift_unknownObjectRelease();
  v29 = *(_QWORD *)(v8 + 168);
  v40 = *(void **)(v8 + 160);
  v30 = sub_23B1C60A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v17, 1, 1, v30);
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = a5;
  *(_QWORD *)(v31 + 24) = a6;
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v42;
  *(_QWORD *)(v32 + 24) = a4;
  *(_QWORD *)(v32 + 32) = v8;
  v33 = v41;
  v42 = v17;
  v34 = v43;
  *(_QWORD *)(v32 + 40) = v41;
  *(_QWORD *)(v32 + 48) = v34;
  *(double *)(v32 + 56) = a7;
  *(double *)(v32 + 64) = a8;
  *(_QWORD *)(v32 + 72) = v26;
  *(_QWORD *)(v32 + 80) = a5;
  *(_QWORD *)(v32 + 88) = a6;
  v35 = (_QWORD *)swift_allocObject();
  v35[2] = sub_23AA956C8;
  v35[3] = v31;
  v35[4] = v29;
  swift_retain_n();
  v36 = v33;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v37 = v26;
  swift_retain();
  swift_retain();
  v38 = (uint64_t)v42;
  sub_23AA9086C(v40, (uint64_t)v42, sub_23AC279F4, v35, (uint64_t)sub_23AC273E0, v32);

  swift_release();
  swift_release();
  swift_release();
  return sub_23AA8A05C(v38, &qword_2542DD460);
}

void sub_23AC0C5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  objc_class *v18;
  char *v19;
  char *v20;
  uint64_t inited;
  void *Strong;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  unint64_t v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  double v33;
  double v34;
  id v35;
  id v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  id v40;
  id v41;
  _QWORD aBlock[6];
  objc_super v45;

  v18 = (objc_class *)type metadata accessor for DummyOperationClient();
  v19 = (char *)objc_allocWithZone(v18);
  *(_QWORD *)&v19[OBJC_IVAR____TtC9libfssync20DummyOperationClient_cancellationHandler] = 0;
  v20 = &v19[OBJC_IVAR____TtC9libfssync20DummyOperationClient_perThumbnailCompletionHandler];
  *(_QWORD *)v20 = a1;
  *((_QWORD *)v20 + 1) = a2;
  v45.receiver = v19;
  v45.super_class = v18;
  swift_retain();
  v41 = objc_msgSendSuper2(&v45, sel_init);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2569E2958);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23B1CA760;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v23 = objc_msgSend(Strong, sel_provider);

  if (!v23)
    goto LABEL_13;
  v24 = objc_msgSend(v23, sel_identifier);

  v25 = (void *)swift_unknownObjectUnownedLoadStrong();
  v26 = objc_msgSend(v25, sel_identifier);

  if (!v26)
  {
    __break(1u);
LABEL_13:
    sub_23B1C704C();
    __break(1u);
    return;
  }
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC82E8]), sel_initWithProviderID_domainIdentifier_itemIdentifier_, v24, v26, a4);

  *(_QWORD *)(inited + 32) = v27;
  *(_QWORD *)(inited + 40) = a5;
  swift_bridgeObjectRetain();
  v28 = sub_23AAEA670(inited);
  v29 = (void *)swift_unknownObjectUnownedLoadStrong();
  LOBYTE(v27) = objc_msgSend(v29, sel_userEnabled);

  if ((v27 & 1) != 0)
  {
    v30 = (void *)swift_unknownObjectUnownedLoadStrong();
    v31 = objc_msgSend(v30, sel_session);

    v32 = objc_msgSend((id)objc_opt_self(), sel_defaultStore);
    if ((objc_msgSend(v32, sel_hasUpcallExecutionTimeLimits) & 1) != 0)
      goto LABEL_8;
    if (qword_2569E1290 != -1)
      swift_once();
    v33 = -1.0;
    if (byte_2569E2860 == 1)
    {
LABEL_8:
      objc_msgSend(v32, sel_upcallExecutionTimeLimitBase);
      v33 = v34;
    }

    v35 = objc_msgSend(v31, sel_newFileProviderProxyWithTimeout_pid_, 0, v33);
    swift_unknownObjectRelease();
  }
  else
  {
    v35 = (id)sub_23AC21600((void **)&protocolRef_FPXVendor);
  }
  v36 = v41;
  sub_23B147A18(v28);
  swift_bridgeObjectRelease();
  sub_23AA9F52C(0, (unint64_t *)&unk_2542E2010);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2569E27E0);
  sub_23AC05110();
  v37 = (void *)sub_23B1C61F4();
  swift_bridgeObjectRelease();
  v38 = (_QWORD *)swift_allocObject();
  v38[2] = a3;
  v38[3] = a6;
  v38[4] = a7;
  v38[5] = a8;
  aBlock[4] = sub_23AC27438;
  aBlock[5] = v38;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AC46D44;
  aBlock[3] = &block_descriptor_395;
  v39 = _Block_copy(aBlock);
  swift_retain();
  v40 = a6;
  swift_retain();
  swift_release();
  objc_msgSend(v35, sel_startOperation_toFetchThumbnailsWithDictionary_size_completionHandler_, v36, v37, v39, a9, a10);
  _Block_release(v39);
  swift_unknownObjectRelease();

}

uint64_t sub_23AC0CA38(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  void *Strong;
  id v6;

  a4();
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v6 = objc_msgSend(Strong, sel_session);

  objc_msgSend(v6, sel_unregisterLifetimeExtensionForObject_, a3);
  return swift_unknownObjectRelease();
}

uint64_t sub_23AC0CAA8(void *a1, int a2, uint64_t a3, _QWORD *a4, void *a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[5];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v36 = a8;
  v34 = a7;
  v33 = a6;
  v39 = a5;
  v38 = a3;
  v37 = a2;
  v35 = a1;
  sub_23AA724E8((uint64_t)a4, (uint64_t)v43, &qword_2542DF228);
  v9 = v43[0];
  v10 = v43[1];
  v11 = v43[3];
  v12 = v43[4];
  v32 = sub_23B1C5E4C();
  v31 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23AA724E8((uint64_t)a4, (uint64_t)&v44, &qword_2542DF228);
  if ((_QWORD)v45 == 1)
  {
    v15 = 0xE300000000000000;
    v16 = 7104878;
  }
  else
  {
    v48 = v44;
    v49 = v45;
    v50 = v46;
    v51 = v47;
    sub_23AAAE668(v9, v10);
    swift_bridgeObjectRetain();
    sub_23AAAE668(v11, v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = sub_23AF967C4();
    v15 = v17;
    sub_23AC277D0(a4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAAE4D0);
  }
  v18 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  swift_bridgeObjectRetain_n();
  v19 = sub_23B1C5E40();
  v20 = sub_23B1C6A88();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v42 = v22;
    *(_DWORD *)v21 = 136315138;
    swift_bridgeObjectRetain();
    v41 = sub_23AABEC68(v16, v15, &v42);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23AA66000, v19, v20, "⚔️  Fetching version %s...", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v22, -1, -1);
    MEMORY[0x23B8614BC](v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
  if ((v33 & 1) != 0)
    v23 = 8;
  else
    v23 = 0;
  v24 = (_QWORD *)swift_allocObject();
  v25 = v36;
  v24[2] = v34;
  v24[3] = v25;
  v26 = v35;
  v27 = v40;
  v24[4] = v35;
  v24[5] = v27;
  v24[6] = v16;
  v24[7] = v15;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = sub_23AC27020;
  *(_QWORD *)(v28 + 24) = v24;
  swift_retain();
  v29 = v26;
  swift_retain();
  swift_retain();
  sub_23AC0E7EC(v29, v37, v38, a4, v39, 0, v23, sub_23AC26414, v28);
  swift_release();
  return swift_release();
}

uint64_t sub_23AC0CE80(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, void *a4, NSObject *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  int v32;
  void *v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  char *v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  id v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  id v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  void *v108;
  void *v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  void (**v117)(void *, char);
  _QWORD *v118;
  void *v119;
  id v120;
  uint64_t v121;
  void *v122;
  _QWORD v124[2];
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  NSObject *v129;
  uint64_t v130;
  unsigned __int8 *v131;
  uint64_t *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  id v137;
  uint64_t v138;
  void (*isa)(uint64_t *);
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  id v144;
  uint64_t v145;
  _QWORD v146[31];
  _OWORD v147[4];
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159[32];

  v136 = (_QWORD *)a7;
  v137 = a4;
  v128 = a6;
  v129 = a5;
  v138 = a3;
  isa = a2;
  v131 = (unsigned __int8 *)__swift_instantiateConcreteTypeFromMangledName(&qword_2569E2950);
  MEMORY[0x24BDAC7A8](v131);
  v132 = (_QWORD *)((char *)v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v124 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23B1C5E4C();
  v134 = *(_QWORD *)(v12 - 8);
  v135 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v142 = (char *)v124 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v124 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v24 = *(void **)a1;
  v25 = *(_QWORD *)(a1 + 8);
  v27 = *(void **)(a1 + 16);
  v26 = *(_QWORD *)(a1 + 24);
  v29 = *(_QWORD *)(a1 + 32);
  v28 = *(_QWORD *)(a1 + 40);
  v31 = *(_QWORD *)(a1 + 48);
  v30 = *(void **)(a1 + 56);
  v32 = *(unsigned __int8 *)(a1 + 64);
  v141 = v31;
  v145 = v29;
  v143 = v25;
  if (v32 == 1)
  {
    v33 = v24;
    v34 = v25;
    v35 = v24;
    v36 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    sub_23AC27024(v33, v34, (unint64_t)v27, v26, v29, v28, v31, v30, 1);
    v144 = v137;
    swift_bridgeObjectRetain();
    v137 = v33;
    sub_23AC27024(v33, v34, (unint64_t)v27, v26, v29, v28, v31, v30, 1);
    v37 = v144;
    swift_bridgeObjectRetain();
    v38 = sub_23B1C5E40();
    v39 = sub_23B1C6A88();
    v40 = v39;
    v129 = v38;
    v41 = v26;
    v42 = (unint64_t)v27;
    if (os_log_type_enabled(v38, v39))
    {
      v43 = swift_slowAlloc();
      v140 = v41;
      v144 = v27;
      v44 = v43;
      v125 = swift_slowAlloc();
      v127 = (char *)swift_slowAlloc();
      v159[0] = (uint64_t)v127;
      *(_DWORD *)v44 = 136315650;
      v133 = v30;
      v130 = v28;
      LODWORD(v126) = v40;
      v45 = (unint64_t)v136;
      swift_bridgeObjectRetain();
      v146[0] = sub_23AABEC68(v128, v45, v159);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v44 + 12) = 2080;
      v46 = v37;
      v47 = sub_23AA7B734();
      v48 = v31;
      v50 = v49;

      v146[0] = sub_23AABEC68(v47, v50, v159);
      sub_23B1C6CBC();

      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 22) = 2112;
      v51 = v137;
      v52 = v137;
      v53 = _swift_stdlib_bridgeErrorToNSError();
      v146[0] = v53;
      v54 = v145;
      sub_23B1C6CBC();
      v55 = v125;
      *(_QWORD *)v125 = v53;
      v28 = v130;
      v30 = v133;
      v56 = v143;
      sub_23AC26AC8(v51, v143, (unint64_t)v144, v140, v54, v130, v48, v133, 1);
      sub_23AC26AC8(v51, v56, (unint64_t)v144, v140, v54, v28, v48, v30, 1);
      v57 = v129;
      _os_log_impl(&dword_23AA66000, v129, (os_log_type_t)v126, "⚔️  Failed fetching version %s for %s: %@", (uint8_t *)v44, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v55, -1, -1);
      v58 = (uint64_t)v127;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v58, -1, -1);
      v42 = (unint64_t)v144;
      v41 = v140;
      MEMORY[0x23B8614BC](v44, -1, -1);

      (*(void (**)(char *, uint64_t))(v134 + 8))(v142, v135);
      v59 = v143;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v51 = v137;
      v59 = v143;
      v87 = v145;
      sub_23AC26AC8(v137, v143, v42, v41, v145, v28, v31, v30, 1);
      sub_23AC26AC8(v51, v59, v42, v41, v87, v28, v31, v30, 1);

      (*(void (**)(char *, uint64_t))(v134 + 8))(v142, v135);
    }
    v88 = v132;
    *v132 = (uint64_t)v51;
    swift_storeEnumTagMultiPayload();
    v89 = v51;
    isa(v88);
    sub_23AC26AC8(v51, v59, v42, v41, v145, v28, v141, v30, 1);
    v90 = &qword_2569E2950;
    v91 = (uint64_t)v88;
  }
  else
  {
    v60 = v137;
    v142 = v16;
    v127 = v11;
    v144 = v27;
    v140 = v26;
    v130 = v28;
    if (v30)
    {
      v125 = v23;
      v126 = v22;
      v128 = v21;
      v61 = v130;
      v63 = v143;
      v62 = (unint64_t)v144;
      *(_QWORD *)&v148 = v24;
      *((_QWORD *)&v148 + 1) = v143;
      *(_QWORD *)&v149 = v144;
      v65 = v140;
      v64 = v141;
      *((_QWORD *)&v149 + 1) = v140;
      v66 = v145;
      *(_QWORD *)&v150 = v145;
      v132 = (uint64_t *)(v130 & 1);
      BYTE8(v150) = v130 & 1;
      v151 = v141;
      v67 = v24;
      v68 = (_QWORD *)((char *)v124 - v20);
      v136 = (_QWORD *)v19;
      sub_23AC27034((uint64_t)v24, v143, (unint64_t)v144, v140, v145, v130, v141, v30);
      sub_23AC27034((uint64_t)v67, v63, v62, v65, v66, v61, v64, v30);

      v137 = v67;
      sub_23AC27034((uint64_t)v67, v63, v62, v65, v66, v61, v64, v30);
      v69 = v63;
      sub_23AAA3E18(v63, v62);
      sub_23AAA5788((uint64_t *)v147);
      v70 = objc_msgSend(v30, sel_filename);
      v71 = sub_23B1C63E0();
      v73 = v72;

      v159[0] = v71;
      v159[1] = v73;
      v146[0] = 58;
      v146[1] = 0xE100000000000000;
      v152 = 47;
      v153 = 0xE100000000000000;
      sub_23AAA420C();
      v74 = sub_23B1C6CF8();
      v76 = v75;
      swift_bridgeObjectRelease();
      v77 = sub_23ADAB49C();
      v131 = (unsigned __int8 *)v68 + *((int *)v136 + 10);
      v133 = v30;
      sub_23AAA3120((uint64_t)v131);
      *v68 = v77;
      v68[1] = v74;
      v136 = v68;
      v68[2] = v76;
      v78 = (id)fpfs_current_or_default_log();
      v79 = v142;
      sub_23B1C5E58();
      sub_23AC244C0((uint64_t *)v147);
      sub_23AC244C0((uint64_t *)v147);
      v80 = sub_23B1C5E40();
      v81 = sub_23B1C6A88();
      if (os_log_type_enabled(v80, v81))
      {
        v82 = (uint8_t *)swift_slowAlloc();
        v83 = swift_slowAlloc();
        v159[0] = v83;
        *(_DWORD *)v82 = 136315138;
        v124[1] = v82 + 4;
        sub_23AC244C0((uint64_t *)v147);
        v84 = sub_23AF967C4();
        v86 = v85;
        sub_23AAA5CC8((uint64_t *)v147);
        v146[0] = sub_23AABEC68(v84, v86, v159);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        sub_23AAA5CC8((uint64_t *)v147);
        sub_23AAA5CC8((uint64_t *)v147);
        _os_log_impl(&dword_23AA66000, v80, v81, "⚔️  Staging version %s...", v82, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v83, -1, -1);
        MEMORY[0x23B8614BC](v82, -1, -1);
      }
      else
      {
        sub_23AAA5CC8((uint64_t *)v147);
        sub_23AAA5CC8((uint64_t *)v147);
      }

      (*(void (**)(char *, uint64_t))(v134 + 8))(v79, v135);
      v152 = (uint64_t)v137;
      v96 = v69;
      v153 = v69;
      v97 = (unint64_t)v144;
      v154 = v144;
      v98 = v140;
      v99 = v141;
      v155 = v140;
      v156 = v145;
      v157 = v132;
      v158 = v141;
      sub_23AAA3E2C(v69, (unint64_t)v144);
      sub_23AAF8E48((uint64_t)v146);
      sub_23AA724E8((uint64_t)v146, (uint64_t)v159, &qword_2542E5050);
      v100 = swift_allocObject();
      v101 = v129;
      *(_QWORD *)(v100 + 16) = v129;
      v102 = v149;
      *(_OWORD *)(v100 + 24) = v148;
      *(_OWORD *)(v100 + 40) = v102;
      *(_OWORD *)(v100 + 56) = v150;
      *(_QWORD *)(v100 + 72) = v151;
      v103 = v147[1];
      *(_OWORD *)(v100 + 80) = v147[0];
      *(_OWORD *)(v100 + 96) = v103;
      v104 = v147[3];
      *(_OWORD *)(v100 + 112) = v147[2];
      *(_OWORD *)(v100 + 128) = v104;
      v105 = v138;
      *(_QWORD *)(v100 + 144) = isa;
      *(_QWORD *)(v100 + 152) = v105;
      v106 = *v131 - 1;
      *(_QWORD *)(v100 + 160) = v133;
      v107 = (uint64_t)v127;
      if (v106 > 1)
      {
        isa = (void (*)(uint64_t *))v101[21].isa;
        v142 = (char *)v101[20].isa;
        v111 = sub_23B1C60A4();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 56))(v107, 1, 1, v111);
        v112 = swift_allocObject();
        *(_QWORD *)(v112 + 16) = sub_23AC270DC;
        *(_QWORD *)(v112 + 24) = v100;
        v113 = v128;
        sub_23AA8EFC8((uint64_t)v136, v128, (uint64_t *)&unk_2542E1E00);
        v114 = (*(unsigned __int8 *)(v125 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80);
        v115 = (v126 + v114 + 7) & 0xFFFFFFFFFFFFFFF8;
        v116 = swift_allocObject();
        *(_QWORD *)(v116 + 16) = v101;
        sub_23AA724E8((uint64_t)&v152, v116 + 24, qword_2542E48C0);
        sub_23AA724E8(v113, v116 + v114, (uint64_t *)&unk_2542E1E00);
        sub_23AA724E8((uint64_t)v159, v116 + v115, &qword_2542E5050);
        v117 = (void (**)(void *, char))(v116 + ((v115 + 255) & 0xFFFFFFFFFFFFFFF8));
        *v117 = sub_23AC270DC;
        v117[1] = (void (*)(void *, char))v100;
        v118 = (_QWORD *)swift_allocObject();
        v118[2] = sub_23AC27A18;
        v118[3] = v112;
        v118[4] = isa;
        swift_retain();
        sub_23AC244C0((uint64_t *)v147);
        swift_retain();
        sub_23AAA3E2C(v143, (unint64_t)v144);
        swift_retain();
        v119 = v133;
        swift_retain();
        sub_23AC244C0((uint64_t *)v147);
        swift_retain();
        sub_23AAA3E2C(v143, (unint64_t)v144);
        swift_retain();
        v120 = v119;
        v99 = v141;
        swift_retain();
        sub_23AAA3E2C(v143, (unint64_t)v144);
        swift_retain();
        swift_retain();
        v121 = (uint64_t)v127;
        sub_23AA9086C(v142, (uint64_t)v127, sub_23AC279F8, v118, (uint64_t)sub_23AC27320, v116);
        swift_release();
        swift_release();
        v96 = v143;
        v97 = (unint64_t)v144;
        v98 = v140;
        swift_release();
        sub_23AA8A05C(v121, &qword_2542DD460);
      }
      else
      {
        type metadata accessor for StagedContext();
        v108 = (void *)swift_allocObject();
        sub_23AC244C0((uint64_t *)v147);
        swift_retain();
        sub_23AAA3E2C(v96, v97);
        swift_retain();
        v109 = v133;
        sub_23AC244C0((uint64_t *)v147);
        swift_retain();
        sub_23AAA3E2C(v96, v97);
        swift_retain();
        v110 = v109;
        sub_23AC0DC44(v108, 0, (void (*)(uint64_t, uint64_t))v101, &v148, (uint64_t *)v147, (void (*)(_QWORD))isa, v105, v110);
        swift_release();
      }
      swift_release();
      swift_release();
      sub_23AAA3E18(v96, v97);
      sub_23AAA5CC8((uint64_t *)v147);
      v122 = v133;

      swift_release();
      sub_23AAA3E18(v96, v97);

      sub_23AAA3E18(v96, v97);
      sub_23AAA5CC8((uint64_t *)v147);
      sub_23AC26AC8(v137, v96, v97, v98, v145, v130, v99, v122, 0);
      v90 = (uint64_t *)&unk_2542E1E00;
      v91 = (uint64_t)v136;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
      sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
      v92 = swift_allocError();
      *(_QWORD *)v93 = v60;
      *(_QWORD *)(v93 + 8) = 0;
      *(_QWORD *)(v93 + 16) = 0;
      *(_QWORD *)(v93 + 24) = 1;
      *(_OWORD *)(v93 + 32) = 0u;
      *(_OWORD *)(v93 + 48) = 0u;
      *(_OWORD *)(v93 + 64) = 0u;
      *(_BYTE *)(v93 + 80) = 0;
      v94 = v132;
      *v132 = v92;
      swift_storeEnumTagMultiPayload();
      v95 = v60;
      isa(v94);
      v90 = &qword_2569E2950;
      v91 = (uint64_t)v94;
    }
  }
  return sub_23AA8A05C(v91, v90);
}

void sub_23AC0DC44(void *a1, char a2, void (*a3)(uint64_t, uint64_t), _QWORD *a4, uint64_t *a5, void (*a6)(_QWORD), uint64_t a7, void *a8)
{
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  id v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t ObjectType;
  id v65;
  id v66;
  id v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  _QWORD v80[2];
  char *v81;
  void *v82;
  id v83;
  void (*v84)(_QWORD);
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[2];

  v87 = a4;
  v89 = a3;
  v14 = 0;
  v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2950);
  MEMORY[0x24BDAC7A8](v86);
  v85 = (_QWORD *)((char *)v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v91 = sub_23B1C5E4C();
  v88 = *(_QWORD *)(v91 - 8);
  v16 = MEMORY[0x24BDAC7A8](v91);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v80 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)v80 - v21;
  v90 = a7;
  if ((a2 & 1) != 0)
  {
    v34 = a1;
    v35 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    sub_23AAFCDA4(a1, 1);
    sub_23AC244C0(a5);
    sub_23AAFCDA4(a1, 1);
    sub_23AC244C0(a5);
    v36 = sub_23B1C5E40();
    v37 = sub_23B1C6A88();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc();
      v84 = a6;
      v39 = v38;
      v40 = (_QWORD *)swift_slowAlloc();
      v83 = (id)swift_slowAlloc();
      v93[0] = (uint64_t)v83;
      *(_DWORD *)v39 = 136315394;
      v82 = 0;
      sub_23AC244C0(a5);
      v41 = sub_23AF967C4();
      v43 = v42;
      sub_23AAA5CC8(a5);
      v92 = sub_23AABEC68(v41, v43, v93);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      sub_23AAA5CC8(a5);
      sub_23AAA5CC8(a5);
      *(_WORD *)(v39 + 12) = 2112;
      v44 = a1;
      v45 = _swift_stdlib_bridgeErrorToNSError();
      v92 = v45;
      v14 = v82;
      sub_23B1C6CBC();
      *v40 = v45;
      sub_23AAFCD98(a1, 1);
      sub_23AAFCD98(a1, 1);
      _os_log_impl(&dword_23AA66000, v36, v37, "⚔️  Failed fetching URL in the wharf for %s: %@", (uint8_t *)v39, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v40, -1, -1);
      v46 = v83;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v46, -1, -1);
      v47 = v39;
      a6 = v84;
      MEMORY[0x23B8614BC](v47, -1, -1);
    }
    else
    {
      sub_23AAA5CC8(a5);
      sub_23AAA5CC8(a5);
      sub_23AAFCD98(a1, 1);
      sub_23AAFCD98(a1, 1);
    }

    (*(void (**)(char *, uint64_t))(v88 + 8))(v19, v91);
    v49 = (uint64_t)v89;
    v57 = (uint64_t)v85;
    v58 = v87;
    *v85 = a1;
    swift_storeEnumTagMultiPayload();
    v59 = a1;
    a6(v57);
    sub_23AAFCD98(a1, 1);
    v60 = sub_23AA8A05C(v57, &qword_2569E2950);
    if (!*v58)
      return;
  }
  else
  {
    v83 = a8;
    v81 = v20;
    swift_retain();
    v23 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    sub_23AC244C0(a5);
    sub_23AC244C0(a5);
    v24 = sub_23B1C5E40();
    v25 = sub_23B1C6A88();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v84 = a6;
      v28 = v27;
      v93[0] = v27;
      *(_DWORD *)v26 = 136315138;
      v80[1] = v26 + 4;
      sub_23AC244C0(a5);
      v29 = sub_23AF967C4();
      v82 = 0;
      v31 = v30;
      sub_23AAA5CC8(a5);
      v92 = sub_23AABEC68(v29, v31, v93);
      sub_23B1C6CBC();
      v14 = v82;
      swift_bridgeObjectRelease();
      sub_23AAA5CC8(a5);
      sub_23AAA5CC8(a5);
      _os_log_impl(&dword_23AA66000, v24, v25, "⚔️  Fetching URL in the wharf for version %s...", v26, 0xCu);
      swift_arrayDestroy();
      v32 = v28;
      a6 = v84;
      MEMORY[0x23B8614BC](v32, -1, -1);
      v33 = v26;
      a7 = v90;
      MEMORY[0x23B8614BC](v33, -1, -1);
    }
    else
    {
      sub_23AAA5CC8(a5);
      sub_23AAA5CC8(a5);
    }

    v48 = *(void (**)(char *, uint64_t))(v88 + 8);
    v48(v22, v91);
    v49 = (uint64_t)v89;
    v50 = *((_QWORD *)v89 + 17);
    type metadata accessor for VFSStagedContext();
    v51 = swift_dynamicCastClassUnconditional();
    sub_23AAFCDA4(a1, 0);
    swift_retain();
    swift_retain();
    v52 = v83;
    sub_23B1AC060(v51, 0x200000, v50, v49, a6, a7, v52, v53);
    if (v14)
    {
      sub_23AAFCD98(a1, 0);
      sub_23AAFCD98(a1, 0);
      v55 = v81;
      if (*v87)
      {
        MEMORY[0x24BDAC7A8](v54);
        v80[-4] = v50;
        LODWORD(v80[-3]) = 0;
        v80[-2] = v56;
        sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC27A04);
        *(_BYTE *)(v50 + OBJC_IVAR____TtC9libfssync13DocumentWharf_deleteBusy) = 0;
        if (*(_QWORD *)(v50 + OBJC_IVAR____TtC9libfssync13DocumentWharf_garbageCollectionSource))
        {
          ObjectType = swift_getObjectType();
          swift_unknownObjectRetain();
          MEMORY[0x23B85F548](1, ObjectType);
          swift_unknownObjectRelease();
        }
      }
      v65 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      sub_23AC244C0(a5);
      v66 = v14;
      sub_23AC244C0(a5);
      v67 = v14;
      v68 = sub_23B1C5E40();
      v69 = sub_23B1C6A88();
      if (os_log_type_enabled(v68, v69))
      {
        v70 = swift_slowAlloc();
        v71 = (_QWORD *)swift_slowAlloc();
        v72 = swift_slowAlloc();
        v93[0] = v72;
        *(_DWORD *)v70 = 136315394;
        v89 = (void (*)(uint64_t, uint64_t))v48;
        sub_23AC244C0(a5);
        v73 = sub_23AF967C4();
        v84 = a6;
        v75 = v74;
        sub_23AAA5CC8(a5);
        v92 = sub_23AABEC68(v73, v75, v93);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        sub_23AAA5CC8(a5);
        sub_23AAA5CC8(a5);
        *(_WORD *)(v70 + 12) = 2112;
        v76 = v14;
        v77 = _swift_stdlib_bridgeErrorToNSError();
        v92 = v77;
        sub_23B1C6CBC();
        *v71 = v77;
        a6 = v84;

        _os_log_impl(&dword_23AA66000, v68, v69, "⚔️  Failed staging version %s: %@", (uint8_t *)v70, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v71, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v72, -1, -1);
        MEMORY[0x23B8614BC](v70, -1, -1);

        v89((uint64_t)v81, v91);
      }
      else
      {
        sub_23AAA5CC8(a5);
        sub_23AAA5CC8(a5);

        v48(v55, v91);
      }
      v78 = (uint64_t)v85;
      *v85 = v14;
      swift_storeEnumTagMultiPayload();
      v79 = v14;
      a6(v78);

      sub_23AA8A05C(v78, &qword_2569E2950);
      return;
    }
    sub_23AAFCD98(a1, 0);
    sub_23AAFCD98(a1, 0);
    if (!*v87)
      return;
  }
  v61 = *(_QWORD *)(v49 + 136);
  MEMORY[0x24BDAC7A8](v60);
  v80[-4] = v61;
  LODWORD(v80[-3]) = 0;
  v80[-2] = v62;
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC27A04);
  if (v14)
  {

  }
  else
  {
    *(_BYTE *)(v61 + OBJC_IVAR____TtC9libfssync13DocumentWharf_deleteBusy) = 0;
    if (*(_QWORD *)(v61 + OBJC_IVAR____TtC9libfssync13DocumentWharf_garbageCollectionSource))
    {
      v63 = swift_getObjectType();
      swift_unknownObjectRetain();
      MEMORY[0x23B85F548](1, v63);
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_23AC0E614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD *), uint64_t a7, void *a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD v23[3];
  void (*v24)(_QWORD *);
  int v25;

  v24 = a6;
  v23[1] = a3;
  v23[2] = a7;
  v12 = sub_23B1C5570();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2950);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (_QWORD *)((char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a4
    && (v19 = *(_QWORD *)(a2 + 8),
        v20 = *(_QWORD *)(a5 + 136) + OBJC_IVAR____TtC9libfssync13DocumentWharf_wharfHandle,
        swift_beginAccess(),
        v19 == *(_QWORD *)(v20 + 32)))
  {
    type metadata accessor for StagedRemoteVersion(0);
    v21 = a8;
    sub_23B1C5918();
  }
  else
  {
    v25 = 2;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
    sub_23B1C5864();
    v21 = (id)sub_23B1C5558();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  *v18 = v21;
  swift_storeEnumTagMultiPayload();
  v24(v18);
  return sub_23AA8A05C((uint64_t)v18, &qword_2569E2950);
}

uint64_t sub_23AC0E7EC(void *a1, int a2, uint64_t a3, _QWORD *a4, void *a5, void *a6, uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void (**v35)(char *, _QWORD, uint64_t);
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  unsigned int v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  _QWORD *v54;
  id v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  id v61;
  uint64_t materialization_alignment;
  char *v63;
  void (**v64)(char *, _QWORD, uint64_t);
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  int v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;

  v75 = a4;
  v72 = a1;
  v73 = a8;
  v68 = a3;
  v69 = (char *)a7;
  v71 = a5;
  v70 = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_2542E02D0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23B1C6050();
  v64 = *(void (***)(char *, _QWORD, uint64_t))(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v66 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v61 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v63 = (char *)&v61 - v19;
  v20 = sub_23B1C60A4();
  v65 = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v61 - v24;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = nullsub_1;
  *(_QWORD *)(v29 + 24) = 0;
  v30 = (_QWORD *)swift_allocObject();
  v31 = v76;
  v30[2] = v76;
  v30[3] = v29;
  v30[4] = v73;
  v30[5] = a9;
  v73 = a6;
  v74 = v29;
  v67 = v30;
  if (a6)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    v32 = objc_msgSend(a6, sel_requestedExtent);
    if (v32 == (id)-1)
      v61 = 0;
    else
      v61 = objc_msgSend((id)objc_opt_self(), sel_valueWithRange_, v32, v33);
    v34 = v76;
  }
  else
  {
    v34 = v31;
    swift_retain();
    swift_retain();
    swift_retain();
    v61 = 0;
  }
  v35 = v64;
  v36 = v65;
  materialization_alignment = fpfs_get_materialization_alignment();
  v37 = *(_QWORD *)(v34 + 168);
  v64 = *(void (***)(char *, _QWORD, uint64_t))(v34 + 160);
  v65 = v37;
  sub_23B1C6080();
  qos_class_self();
  sub_23B1C6038();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v35[6])(v12, 1, v13) == 1)
  {
    v35[13](v63, *MEMORY[0x24BEE5498], v13);
    sub_23AA8A05C((uint64_t)v12, qword_2542E02D0);
  }
  else
  {
    ((void (**)(char *, char *, uint64_t))v35)[4](v63, v12, v13);
  }
  sub_23B1C608C();
  sub_23B1C6098();
  v38 = sub_23B1C6044();
  v39 = (void (*)(char *, uint64_t))v35[1];
  v39(v18, v13);
  v40 = v66;
  sub_23B1C6098();
  v41 = sub_23B1C6044();
  v39(v40, v13);
  if (v38 >= v41)
    v42 = v25;
  else
    v42 = v23;
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v28, v42, v20);
  v43 = *(void (**)(char *, uint64_t))(v36 + 8);
  v43(v23, v20);
  v43(v25, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v28, 0, 1, v20);
  v44 = swift_allocObject();
  v45 = v67;
  *(_QWORD *)(v44 + 16) = sub_23AC26C80;
  *(_QWORD *)(v44 + 24) = v45;
  v46 = swift_allocObject();
  v47 = v68;
  *(_QWORD *)(v46 + 16) = v76;
  *(_QWORD *)(v46 + 24) = v47;
  v48 = v72;
  v49 = v73;
  v50 = (uint64_t)v69;
  *(_QWORD *)(v46 + 32) = v72;
  *(_QWORD *)(v46 + 40) = v50;
  v69 = v28;
  v51 = v71;
  *(_QWORD *)(v46 + 48) = v49;
  *(_QWORD *)(v46 + 56) = v51;
  sub_23AA724E8((uint64_t)v75, v46 + 64, &qword_2542DF228);
  *(_QWORD *)(v46 + 128) = sub_23AC26C80;
  *(_QWORD *)(v46 + 136) = v45;
  *(_BYTE *)(v46 + 144) = v70;
  v53 = v61;
  v52 = materialization_alignment;
  *(_QWORD *)(v46 + 152) = v61;
  *(_QWORD *)(v46 + 160) = v52;
  *(_QWORD *)(v46 + 168) = v74;
  v54 = (_QWORD *)swift_allocObject();
  v54[2] = sub_23AC26414;
  v54[3] = v44;
  v54[4] = v65;
  v55 = v51;
  swift_retain_n();
  swift_retain();
  swift_retain();
  v56 = v48;
  v57 = v49;
  sub_23AC277D0(v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAAE5C0);
  v58 = v53;
  swift_retain();
  swift_retain();
  v59 = (uint64_t)v69;
  sub_23AA9086C(v64, (uint64_t)v69, (void (*)())sub_23AC27A00, v54, (uint64_t)sub_23AC26D14, v46);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_23AA8A05C(v59, &qword_2542DD460);
  return swift_release();
}

uint64_t sub_23AC0ED2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  _QWORD aBlock[6];

  v19 = a5;
  v20 = a4;
  v18 = a1;
  v6 = sub_23B1C602C();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v17 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23B1C60A4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[4] = sub_23AC26C64;
  aBlock[5] = a3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AA698FC;
  aBlock[3] = &block_descriptor_355;
  v14 = _Block_copy(aBlock);
  swift_retain();
  sub_23B1C6068();
  v21 = MEMORY[0x24BEE4AF8];
  sub_23AA7E38C((unint64_t *)&unk_2542E43B0, v7, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E7470);
  sub_23AAB5A28((unint64_t *)&qword_2542E7480, (uint64_t *)&unk_2542E7470, MEMORY[0x24BEE12C8]);
  sub_23B1C6DE8();
  MEMORY[0x23B85F470](0, v13, v9, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_release();
  return v20(v18);
}

void sub_23AC0EF1C(_QWORD *a1, uint64_t a2, void *a3, unint64_t a4, void *a5, void *a6, uint64_t a7, void (*a8)(void **), uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _QWORD *v17;
  void *Strong;
  unsigned int v19;
  char **v20;
  void *v21;
  id v22;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  uint64_t v41;
  id v42;
  void *v43;
  BOOL v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  char isUniquelyReferenced_nonNull_native;
  uint64_t (*v59)(id *, id, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  id v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  id v72;
  id v73;
  void *v75;
  void *v76;
  void *v77;
  id v79;
  void *v81;
  uint64_t v83;
  id v84[3];
  _QWORD v85[5];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90[4];
  void *aBlock;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  char v96;

  sub_23AA724E8(a7, (uint64_t)v85, &qword_2542DF228);
  v68 = v85[1];
  v69 = v85[0];
  v70 = v85[4];
  v17 = a1;
  v71 = v85[3];
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v19 = objc_msgSend(Strong, sel_userEnabled);

  v20 = &selRef_defaultManager;
  if (v19)
  {
    v21 = (void *)swift_unknownObjectUnownedLoadStrong();
    v22 = objc_msgSend(v21, sel_session);

    v23 = objc_msgSend((id)objc_opt_self(), sel_defaultStore);
    if ((objc_msgSend(v23, sel_hasUpcallExecutionTimeLimits) & 1) != 0)
      goto LABEL_6;
    if (qword_2569E1290 != -1)
      swift_once();
    if (byte_2569E2860 == 1)
    {
LABEL_6:
      objc_msgSend(v23, sel_upcallExecutionTimeLimitBase);
      v25 = v24;
      objc_msgSend(v23, sel_upcallExecutionTimeLimitPerKiloByte);
      v27 = v26;

      v28 = v25 + (double)a2 / 1000.0 * v27;
    }
    else
    {

      v28 = -1.0;
    }
    v29 = objc_msgSend(v22, sel_newFileProviderProxyWithTimeout_pid_, 0, v28);
    swift_unknownObjectRelease();
  }
  else
  {
    v29 = (id)sub_23AC21600((void **)&protocolRef_FPXVendor);
  }
  v77 = v29;
  v73 = (id)fpfs_current_log();
  v30 = (void *)swift_unknownObjectUnownedLoadStrong();
  v31 = objc_msgSend(v30, sel_provider);

  if (!v31)
    goto LABEL_30;
  v32 = objc_msgSend(v31, sel_identifier);

  v33 = (void *)swift_unknownObjectUnownedLoadStrong();
  v34 = objc_msgSend(v33, sel_identifier);

  if (!v34)
  {
    __break(1u);
LABEL_30:
    sub_23B1C704C();
    __break(1u);
    goto LABEL_31;
  }
  v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC82E8]), sel_initWithProviderID_domainIdentifier_itemIdentifier_, v32, v34, a3);

  v76 = v35;
  if (a5)
    v36 = a5;
  else
    v36 = objc_msgSend((id)objc_opt_self(), sel_requestForSelf);
  v37 = (void *)swift_unknownObjectUnownedLoadStrong();
  v72 = a5;
  v38 = objc_msgSend(v37, sel_session);

  v39 = objc_msgSend(v36, sel_nsfpRequestForSession_isSpeculative_, v38, (a4 >> 8) & 1);
  v40 = v39;
  swift_unknownObjectRelease();
  objc_msgSend(v39, sel_setDomainVersion_, a6);
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = 0;
  sub_23AA724E8(a7, (uint64_t)&v86, &qword_2542DF228);
  v42 = 0;
  if ((_QWORD)v87 != 1)
  {
    v90[0] = v86;
    v90[1] = v87;
    v90[2] = v88;
    v90[3] = v89;
    sub_23AA9F52C(0, (unint64_t *)&unk_2542E1FD0);
    sub_23AAAE668(v69, v68);
    swift_bridgeObjectRetain();
    sub_23AAAE668(v71, v70);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42 = sub_23AEBD76C(v90);
  }
  v75 = v42;
  if ((a4 & 0x100) == 0)
    goto LABEL_21;
  v20 = (char **)v17[18];
  v43 = (void *)swift_retain();
  if (objc_sync_enter(v43))
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)v20);
  v44 = sub_23AC1FE9C(v20);
  if (objc_sync_exit(v20))
LABEL_31:
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)v20);
  swift_release();
  if (!v44)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
    sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
    v64 = (void *)swift_allocError();
    *(_QWORD *)v65 = 10;
    *(_OWORD *)(v65 + 8) = 0u;
    *(_OWORD *)(v65 + 24) = 0u;
    *(_OWORD *)(v65 + 40) = 0u;
    *(_OWORD *)(v65 + 56) = 0u;
    *(_QWORD *)(v65 + 72) = 0;
    *(_BYTE *)(v65 + 80) = 10;
    v92 = 0u;
    v93 = 0u;
    v94 = 0u;
    aBlock = v64;
    v95 = 0;
    v96 = 1;
    a8(&aBlock);

    swift_release();
    swift_unknownObjectRelease();

    goto LABEL_26;
  }
LABEL_21:
  v45 = (_QWORD *)swift_allocObject();
  v45[2] = v17;
  v46 = v39;
  v45[3] = v73;
  v45[4] = a6;
  v45[5] = v41;
  v45[6] = a3;
  v45[7] = a8;
  v45[8] = a9;
  v45[9] = v77;
  v45[10] = a5;
  *((_QWORD *)&v93 + 1) = sub_23AC26DC0;
  *(_QWORD *)&v94 = v45;
  aBlock = (void *)MEMORY[0x24BDAC760];
  *(_QWORD *)&v92 = 1107296256;
  *((_QWORD *)&v92 + 1) = sub_23AC10564;
  *(_QWORD *)&v93 = &block_descriptor_343;
  v47 = _Block_copy(&aBlock);
  v48 = v72;
  swift_retain();
  swift_retain();
  v79 = a3;
  swift_retain();
  swift_unknownObjectRetain();
  v49 = v73;
  v50 = a6;
  swift_release();
  v40 = v75;
  v51 = objc_msgSend(v77, sel_fetchContentsForItemWithID_version_request_estimatedItemSize_isSymlink_extent_alignment_options_completionHandler_, v76, v75, v39, a2, a10 == 2, a11, a12, (a4 >> 3) & 1, v47);
  _Block_release(v47);
  swift_beginAccess();
  v52 = *(void **)(v41 + 16);
  *(_QWORD *)(v41 + 16) = v51;

  v53 = *(void **)(v41 + 16);
  if (!v53)
  {
    swift_release();
    swift_unknownObjectRelease();

LABEL_26:
    return;
  }
  v54 = v49;
  v81 = v46;
  swift_beginAccess();
  v55 = v53;
  v56 = v79;
  v57 = v55;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v83 = v17[22];
  v17[22] = 0x8000000000000000;
  sub_23AD25648((uint64_t)v57, v56, isUniquelyReferenced_nonNull_native);
  v17[22] = v83;

  swift_bridgeObjectRelease();
  swift_endAccess();
  v59 = (uint64_t (*)(id *, id, uint64_t, uint64_t))v17[15];
  if (v59)
  {
    v60 = *MEMORY[0x24BDD1188];
    v84[0] = v56;
    swift_retain_n();
    v61 = v59(v84, v57, v60, a2);
    v63 = v62;

    sub_23AAB7948((uint64_t)v59);
    sub_23AAB7948((uint64_t)v59);
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();

    v61 = 0;
    v63 = 0;
  }
  v66 = (_QWORD *)swift_allocObject();
  v66[2] = v17;
  v66[3] = v56;
  v66[4] = v61;
  v66[5] = v63;
  swift_beginAccess();
  *(_QWORD *)(a13 + 16) = sub_23AC26E38;
  *(_QWORD *)(a13 + 24) = v66;
  swift_retain();
  v67 = v56;
  swift_release();
  swift_release();
}

uint64_t sub_23AC0F830(void *a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _QWORD *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;

  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a7;
  v19[3] = a3;
  v19[4] = a9;
  v19[5] = a1;
  v19[6] = a2;
  v19[7] = a6;
  v19[8] = a10;
  v19[9] = a11;
  v19[10] = a12;
  v19[11] = a13;
  v19[12] = a14;
  v19[13] = a15;
  v19[14] = a4;
  v19[15] = a5;
  swift_retain();
  v20 = a3;
  v21 = a9;
  v22 = a1;
  v23 = a2;
  v24 = a6;
  v25 = a4;
  swift_retain();
  v26 = a11;
  swift_retain();
  swift_unknownObjectRetain();
  v27 = a15;
  sub_23AA814FC(a8, (uint64_t)"provideFile(for:kind:expectedFileSize:lastKnownVersion:domainVersion:requestor:options:completion:)", 99, 2, (uint64_t)sub_23AC26ED0, (uint64_t)v19);
  return swift_release();
}

void sub_23AC0F96C(uint64_t a1, void *a2, void *a3, void *a4, void (**a5)(uint64_t, void *), void *a6, id *a7, void *a8, void (*a9)(id *), uint64_t a10, void *a11, void *a12, void *a13, char a14)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  id v35;
  void (*v36)(char *, char *, _QWORD *);
  char *v37;
  void *v38;
  id *v39;
  uint64_t v40;
  void *v41;
  char v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, char *, _QWORD *);
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id *v65;
  _QWORD *v66;
  uint64_t v67;
  id *v68;
  id *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id *v79;
  void (*v80)(uint64_t, void *);
  void *v81;
  void *v82;
  id v83;
  id v84;
  void *v85;
  id v86;
  unsigned int v87;
  _QWORD v88[2];
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  void (**v93)(char *, _QWORD);
  uint64_t v94;
  void (**v95)(uint64_t, void *);
  char *v96;
  void *v97;
  uint64_t v98;
  id *v99;
  void *v100;
  uint64_t v101;
  void (*v102)(id *);
  _QWORD v103[5];
  unsigned __int8 v104;
  id *v105;
  void *v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  char v111;

  v97 = a8;
  v99 = a7;
  v100 = a6;
  v95 = a5;
  v101 = a10;
  v102 = a9;
  v18 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v18);
  v92 = (char *)v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_23B1C5474();
  v93 = *(void (***)(char *, _QWORD))(v94 - 8);
  MEMORY[0x24BDAC7A8](v94);
  v21 = (char *)v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (_QWORD *)sub_23B1C5A08();
  v26 = *(v25 - 1);
  v27 = *(_QWORD *)(v26 + 64);
  v28 = MEMORY[0x24BDAC7A8](v25);
  v91 = (uint64_t)v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v90 = (char *)v88 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)v88 - v32;
  MEMORY[0x24BDAC7A8](v31);
  v96 = (char *)v88 - v34;
  v98 = a1;
  sub_23AC098D4(a2, a3);
  if (a4)
  {
    v35 = objc_msgSend(a4, "url");
    sub_23B1C59CC();

    v36 = *(void (**)(char *, char *, _QWORD *))(v26 + 32);
    v36(v24, v33, v25);
    (*(void (**)(char *, _QWORD, uint64_t, _QWORD *))(v26 + 56))(v24, 0, 1, v25);
    if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v26 + 48))(v24, 1, v25) != 1)
    {
      v37 = v96;
      v36(v96, v24, v25);
      v38 = v100;
      if (!v95 || v100)
      {
        (*(void (**)(char *, _QWORD *))(v26 + 8))(v37, v25);
        goto LABEL_8;
      }
      v99 = v95;
      LODWORD(v100) = sub_23B1C59D8();
      v94 = (uint64_t)a12;
      if (!a12)
      {
        v93 = 0;
        v92 = 0;
        v89 = 0;
        v54 = v91;
        goto LABEL_31;
      }
      if (a13)
      {
        v50 = a12;
        v51 = a13;
        v52 = objc_msgSend(v51, sel_rangeValue);
        objc_msgSend(v51, sel_rangeValue);
        objc_msgSend(v50, sel_setProvidedExtent_, v52, v53);
        if (!objc_msgSend(v51, sel_rangeValue))
        {
          objc_msgSend(v51, sel_rangeValue);
          v83 = v82;
          v84 = objc_msgSend(v99, sel_documentSize);
          if (!v84 || (v85 = v84, v86 = objc_msgSend(v84, sel_integerValue), v85, v83 != v86))
          {

            goto LABEL_29;
          }
          if ((a14 & 1) != 0)
          {
            v87 = fpfs_supports_brm_sparse_files();

            v89 = v87;
            goto LABEL_30;
          }
        }

      }
      else
      {
        v51 = a12;
        objc_msgSend(v51, sel_setProvidedExtent_, -1, -1);
      }

LABEL_29:
      v89 = 0;
LABEL_30:
      v54 = v91;
      v93 = (void (**)(char *, _QWORD))objc_msgSend(a12, sel_providedExtent);
      v92 = v55;
LABEL_31:
      v56 = *(void (**)(char *, char *, _QWORD *))(v26 + 16);
      v57 = v90;
      v58 = (uint64_t)v96;
      v56(v90, v96, v25);
      v56((char *)v54, v57, v25);
      v95 = (void (**)(uint64_t, void *))v26;
      v59 = (*(unsigned __int8 *)(v26 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
      v60 = v59 + v27;
      v61 = (v59 + v27) & 0xFFFFFFFFFFFFFFF8;
      v62 = (v61 + 23) & 0xFFFFFFFFFFFFFFF8;
      v63 = swift_allocObject();
      v97 = v25;
      v36((char *)(v63 + v59), v57, v25);
      *(_BYTE *)(v63 + v60) = v100 & 1;
      v64 = v98;
      *(_QWORD *)(v61 + v63 + 8) = v98;
      v65 = v99;
      *(_QWORD *)(v63 + v62) = v99;
      v66 = (_QWORD *)(v63 + ((v62 + 15) & 0xFFFFFFFFFFFFFFF8));
      v67 = v101;
      *v66 = v102;
      v66[1] = v67;
      v68 = v65;
      swift_retain_n();
      swift_retain_n();
      v69 = v68;
      if ((sub_23AC085BC() & 1) != 0 && objc_msgSend(v69, sel_isFlattenedPackage))
      {
        swift_retain();
        swift_retain();
        sub_23AC22204(v58, (void (*)(uint64_t *))sub_23AC26FAC, v63, v64);
        swift_release_n();
        swift_release();
        v70 = v91;
      }
      else
      {
        v71 = *(_QWORD *)(v64 + 136);
        v72 = sub_23B1C59E4();
        (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v71 + 344))(v103, v72);
        v88[1] = v63;
        v74 = (void *)v103[0];
        v73 = v103[1];
        v75 = v103[2];
        v76 = v103[3];
        v77 = v103[4];
        v78 = v104;
        v79 = v105;
        swift_bridgeObjectRelease();
        v99 = v79;
        LODWORD(v101) = 0;
        v106 = v74;
        *(_QWORD *)&v107 = v73;
        *((_QWORD *)&v107 + 1) = v75;
        *(_QWORD *)&v108 = v76;
        *((_QWORD *)&v108 + 1) = v77;
        *(_QWORD *)&v109 = v78;
        *((_QWORD *)&v109 + 1) = v79;
        LOBYTE(v110) = 0;
        v70 = v91;
        sub_23AC10368((uint64_t)&v106, v91, v100 & 1, v98, v69, v102);
        sub_23AC26B0C(v74, v73, v75, v76, v77, v78, (uint64_t)v99, v101);
        swift_release();
        v58 = (uint64_t)v96;
      }
      v80 = v95[1];
      v81 = v97;
      v80(v70, v97);
      swift_release();

      swift_release();
      v80(v58, v81);
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v26 + 56))(v24, 1, 1, v25);
  }
  sub_23AA8A05C((uint64_t)v24, (uint64_t *)&unk_2542E6740);
  v38 = v100;
LABEL_8:
  v39 = v99 + 2;
  swift_beginAccess();
  if (*v39 && (objc_msgSend(*v39, sel_isCancelled) & 1) != 0)
  {
    swift_beginAccess();
    if (*v39
      && objc_msgSend(*v39, sel_isCancelled)
      && (v40 = v98, swift_beginAccess(), *(_QWORD *)(*(_QWORD *)(v40 + 176) + 16)))
    {
      v41 = v97;
      swift_bridgeObjectRetain();
      sub_23AA88CF8(v41);
      v43 = v42 & 1;

      swift_bridgeObjectRelease();
    }
    else
    {
      v43 = 0;
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
    sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
    v48 = (void *)swift_allocError();
    *(_QWORD *)v49 = v43;
    *(_OWORD *)(v49 + 8) = 0u;
    *(_OWORD *)(v49 + 24) = 0u;
    *(_OWORD *)(v49 + 40) = 0u;
    *(_OWORD *)(v49 + 56) = 0u;
    *(_QWORD *)(v49 + 72) = 0;
    *(_BYTE *)(v49 + 80) = 5;
    v106 = v48;
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    v110 = 0;
    v111 = 1;
  }
  else
  {
    if (v38)
    {
      v44 = v38;
    }
    else
    {
      sub_23B1C53E4();
      sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
      sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
      v45 = v94;
      sub_23B1C5864();
      v44 = (void *)sub_23B1C5354();
      v93[1](v21, v45);
    }
    v46 = v38;
    v47 = objc_msgSend(a11, sel_timeoutState);
    v48 = sub_23AC16914(v44, v97, 0, (uint64_t)v47);

    v106 = v48;
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    v110 = 0;
    v111 = 1;
  }
  v102(&v106);

}

void sub_23AC10368(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5, void (*a6)(id *))
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  unsigned int v14;
  id v15;
  id v16;
  void *v17;
  char v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void *v25;
  void *v27;
  _QWORD v29[5];
  uint64_t v30;
  void *v31;
  _BYTE v32[56];
  char v33;
  id v34[8];
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  sub_23AA724E8(a1, (uint64_t)v29, &qword_2569E2938);
  v27 = (void *)v29[0];
  v8 = (void *)v29[2];
  v10 = (void *)v29[3];
  v9 = (void *)v29[4];
  v11 = v31;
  v24 = v30;
  v25 = (void *)v29[1];
  v12 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v13 = (void *)sub_23B1C5954();
  v34[0] = 0;
  v14 = objc_msgSend(v12, sel_removeItemAtURL_error_, v13, v34);

  if (!v14)
  {
    v16 = v34[0];
    v17 = (void *)sub_23B1C587C();

    swift_willThrow();
    if ((a3 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = v34[0];
  if ((a3 & 1) != 0)
LABEL_5:
    sub_23B1C59C0();
LABEL_6:
  sub_23AC09034(a5);
  sub_23AA724E8(a1, (uint64_t)v32, &qword_2569E2938);
  v18 = v33;
  if ((v33 & 1) != 0)
  {
    v19 = 0;
    v8 = 0;
    v10 = 0;
    v9 = 0;
    v20 = 0;
    v11 = 0;
    a5 = 0;
  }
  else
  {
    v20 = v24 & 1;
    v21 = a5;
    v19 = v25;
  }
  v34[0] = v27;
  v34[1] = v19;
  v34[2] = v8;
  v34[3] = v10;
  v34[4] = v9;
  v34[5] = (id)v20;
  v34[6] = v11;
  v34[7] = a5;
  v35 = v18;
  v22 = a1;
  v23 = (uint64_t)v19;
  sub_23AC26C2C(v22);
  a6(v34);
  sub_23AC26AC8(v27, v23, (unint64_t)v8, (uint64_t)v10, (uint64_t)v9, v20, (uint64_t)v11, a5, v18);
}

void sub_23AC10564(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  void (*v13)(void *, void *, id, void *, uint64_t, void *);
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;

  v13 = *(void (**)(void *, void *, id, void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  v18 = a2;
  v17 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a7;
  v13(a2, a3, v14, a5, a6, a7);
  swift_release();

}

void sub_23AC10630(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *);
  _QWORD v28[5];
  unsigned __int8 v29;
  uint64_t v30;
  _QWORD v31[7];
  char v32;

  v26 = a3;
  v27 = a2;
  v6 = sub_23B1C5A08();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2930);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (void **)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23AA8EFC8(a1, (uint64_t)v12, &qword_2569E2930);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = *v12;
    v20 = 1;
  }
  else
  {
    v24 = v7;
    v25 = v6;
    (*(void (**)(char *, void **, uint64_t))(v7 + 32))(v9, v12, v6);
    v21 = *(_QWORD *)(a4 + 136);
    v22 = sub_23B1C59E4();
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v21 + 344))(v28, v22);
    v20 = 0;
    v19 = (void *)v28[0];
    v13 = v28[1];
    v14 = v28[2];
    v15 = v28[3];
    v16 = v28[4];
    v17 = v29;
    v18 = v30;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v25);
  }
  v31[0] = v19;
  v31[1] = v13;
  v31[2] = v14;
  v31[3] = v15;
  v31[4] = v16;
  v31[5] = v17;
  v31[6] = v18;
  v32 = v20;
  v27(v31);
  sub_23AC26B0C(v19, v13, v14, v15, v16, v17, v18, v20);
}

uint64_t sub_23AC10840(void *a1, int a2, uint64_t a3, uint64_t *a4, uint64_t *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  void (*v39)(char *, uint64_t);
  unsigned int v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  _QWORD *v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  _QWORD v66[2];
  void *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  id v93;

  v78 = a8;
  v93 = a7;
  v89 = a1;
  v90 = a6;
  v77 = a2;
  v74 = a9;
  v75 = a3;
  v10 = *a5;
  v11 = a5[1];
  v81 = a10;
  v82 = v11;
  v12 = a5[2];
  v83 = v10;
  v84 = v12;
  v88 = a5[3];
  v87 = a5[4];
  v13 = a5[5];
  v76 = a5[6];
  v14 = a5[7];
  v91 = v13;
  v92 = v14;
  v72 = *a4;
  v15 = a4[1];
  v79 = a4[2];
  v80 = v15;
  v71 = a4[3];
  v70 = a4[4];
  v69 = *((unsigned __int8 *)a4 + 40);
  v73 = a4[6];
  v16 = __swift_instantiateConcreteTypeFromMangledName(qword_2542E02D0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23B1C6050();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)v66 - v25;
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)v66 - v27;
  v29 = sub_23B1C60A4();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)v66 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v35 = (char *)v66 - v34;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v36);
  v85 = (uint64_t)v66 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = *(_QWORD *)(v86 + 168);
  v67 = *(void **)(v86 + 160);
  sub_23B1C6080();
  qos_class_self();
  sub_23B1C6038();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v28, *MEMORY[0x24BEE5498], v19);
    sub_23AA8A05C((uint64_t)v18, qword_2542E02D0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v28, v18, v19);
  }
  sub_23B1C608C();
  sub_23B1C6098();
  v38 = sub_23B1C6044();
  v39 = *(void (**)(char *, uint64_t))(v20 + 8);
  v39(v26, v19);
  sub_23B1C6098();
  v40 = sub_23B1C6044();
  v39(v23, v19);
  if (v38 >= v40)
    v41 = v35;
  else
    v41 = v33;
  v42 = v85;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 16))(v85, v41, v29);
  v43 = *(void (**)(char *, uint64_t))(v30 + 8);
  v43(v33, v29);
  v43(v35, v29);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v42, 0, 1, v29);
  v44 = swift_allocObject();
  v45 = v74;
  v46 = v81;
  *(_QWORD *)(v44 + 16) = v74;
  *(_QWORD *)(v44 + 24) = v46;
  v47 = v44;
  v66[1] = v44;
  v48 = swift_allocObject();
  *(_QWORD *)(v48 + 16) = v45;
  *(_QWORD *)(v48 + 24) = v46;
  v49 = v75;
  *(_QWORD *)(v48 + 32) = v86;
  *(_QWORD *)(v48 + 40) = v49;
  v50 = v79;
  v51 = v80;
  *(_QWORD *)(v48 + 48) = v72;
  *(_QWORD *)(v48 + 56) = v51;
  v52 = v71;
  *(_QWORD *)(v48 + 64) = v50;
  *(_QWORD *)(v48 + 72) = v52;
  *(_QWORD *)(v48 + 80) = v70;
  *(_BYTE *)(v48 + 88) = v69 & 1;
  v54 = v82;
  v53 = v83;
  *(_QWORD *)(v48 + 96) = v73;
  *(_QWORD *)(v48 + 104) = v53;
  v55 = v84;
  *(_QWORD *)(v48 + 112) = v54;
  *(_QWORD *)(v48 + 120) = v55;
  v56 = v87;
  *(_QWORD *)(v48 + 128) = v88;
  *(_QWORD *)(v48 + 136) = v56;
  v57 = v76;
  *(_QWORD *)(v48 + 144) = v91;
  *(_QWORD *)(v48 + 152) = v57;
  v58 = v78;
  *(_QWORD *)(v48 + 160) = v92;
  *(_QWORD *)(v48 + 168) = v58;
  v59 = v90;
  *(_QWORD *)(v48 + 176) = v93;
  *(_QWORD *)(v48 + 184) = v59;
  *(_QWORD *)(v48 + 192) = v89;
  *(_BYTE *)(v48 + 200) = v77;
  v60 = (_QWORD *)swift_allocObject();
  v60[2] = sub_23AC26414;
  v60[3] = v47;
  v60[4] = v68;
  swift_retain_n();
  swift_retain();
  sub_23AAA3E2C(v51, v50);
  sub_23AAAE668(v53, v54);
  swift_bridgeObjectRetain();
  sub_23AAAE668(v88, v87);
  v61 = v90;
  v62 = v89;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v63 = v93;
  v64 = v85;
  sub_23AA9086C(v67, v85, sub_23AC26548, v60, (uint64_t)sub_23AC264D8, v48);
  swift_release();
  swift_release();
  swift_release();
  return sub_23AA8A05C(v64, &qword_2542DD460);
}

uint64_t sub_23AC10D6C(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, unsigned __int8 a10)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *Strong;
  void *v37;
  id v38;
  id v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(_QWORD *, char *, _BYTE *, uint64_t, uint64_t, _QWORD);
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101[5];
  char v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _QWORD v116[40];
  _QWORD v117[7];
  _BYTE v118[256];

  v88 = a7;
  v89 = a8;
  v86 = a6;
  v87 = a4;
  v13 = *(_QWORD *)a5;
  v14 = *(_QWORD *)(a5 + 8);
  v15 = *(_QWORD *)(a5 + 16);
  v97 = *(_QWORD *)(a5 + 24);
  v98 = v13;
  v96 = *(_QWORD *)(a5 + 32);
  v16 = *(unsigned __int8 *)(a5 + 40);
  v17 = *(_QWORD *)(a5 + 48);
  v94 = v14;
  v95 = v17;
  v18 = *(_QWORD *)(a5 + 56);
  v82 = *(_QWORD *)(a5 + 64);
  v83 = v18;
  v19 = *(_QWORD *)(a5 + 72);
  v80 = *(_QWORD *)(a5 + 80);
  v81 = v19;
  v20 = *(_QWORD *)(a5 + 88);
  v21 = *(_QWORD *)(a5 + 96);
  v78 = *(_QWORD *)(a5 + 104);
  v79 = v20;
  v84 = *(_QWORD *)(a5 + 112);
  v85 = v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v71 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v71 - v29;
  v31 = type metadata accessor for ItemMetadata();
  MEMORY[0x24BDAC7A8](v31);
  v33 = (char *)&v71 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = swift_allocObject();
  v76 = a1;
  *(_QWORD *)(v34 + 16) = a1;
  v90 = v34 + 16;
  v92 = v34;
  *(_QWORD *)(v34 + 24) = a2;
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = nullsub_1;
  v75 = v35 + 16;
  v93 = v35;
  *(_QWORD *)(v35 + 24) = 0;
  v99 = a3;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v77 = a2;
  swift_retain();
  LODWORD(a2) = objc_msgSend(Strong, sel_userEnabled);

  if ((_DWORD)a2)
  {
    v37 = (void *)swift_unknownObjectUnownedLoadStrong();
    v38 = objc_msgSend(v37, sel_session);

    v39 = objc_msgSend((id)objc_opt_self(), sel_defaultStore);
    if ((objc_msgSend(v39, sel_hasUpcallExecutionTimeLimits) & 1) != 0)
      goto LABEL_6;
    if (qword_2569E1290 != -1)
      swift_once();
    if (byte_2569E2860 == 1)
    {
LABEL_6:
      objc_msgSend(v39, sel_upcallExecutionTimeLimitBase);
      v41 = v40;
      v42 = (double)(uint64_t)v87 / 1000.0;
      objc_msgSend(v39, sel_upcallExecutionTimeLimitPerKiloByte);
      v44 = v43;

      v45 = v41 + v42 * v44;
    }
    else
    {

      v45 = -1.0;
    }
    v100 = objc_msgSend(v38, sel_newFileProviderProxyWithTimeout_pid_, 0, v45);
    swift_unknownObjectRelease();
  }
  else
  {
    v100 = (id)sub_23AC21600((void **)&protocolRef_FPXVendor);
  }
  v46 = sub_23B1C5BDC();
  v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56);
  v47(v30, 1, 1, v46);
  v47(v28, 1, 1, v46);
  v47(v25, 1, 1, v46);
  v118[0] = 1;
  LOBYTE(v70) = 0;
  sub_23AB58208(0, 0, 0, 1, 0x100000000uLL, 1, 1, 0, (uint64_t)v33, 0, 2u, (uint64_t)v30, (uint64_t)v28, 0, 0, 0, (uint64_t)v25, 0, 0,
    1,
    0,
    0,
    0xF000000000000000,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0x100000000uLL,
    v70,
    0,
    0,
    0,
    0,
    0);
  v48 = v99;
  v49 = *(_QWORD *)(v99 + 136);
  v117[0] = v98;
  v117[1] = v94;
  v50 = v15;
  v117[2] = v15;
  v117[3] = v97;
  v117[4] = v96;
  v117[5] = v16;
  v117[6] = v95;
  sub_23AAF8E48((uint64_t)v116);
  sub_23AA724E8((uint64_t)v116, (uint64_t)v118, &qword_2542E5050);
  v116[31] = 6516580;
  v116[32] = 0xE300000000000000;
  v112 = 58;
  v113 = 0xE100000000000000;
  v114 = 47;
  v115 = 0xE100000000000000;
  sub_23AAA420C();
  v51 = sub_23B1C6CF8();
  v52 = *(uint64_t (**)(_QWORD *, char *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v49 + 360);
  v91 = v33;
  v74 = v49;
  v54 = v52(v117, v33, v118, v51, v53, 0);
  v72 = v16;
  v73 = a10;
  swift_bridgeObjectRelease();
  v55 = (_QWORD *)swift_allocObject();
  v57 = v92;
  v56 = v93;
  v55[2] = v48;
  v55[3] = v56;
  v58 = v76;
  v59 = v77;
  v55[4] = v54;
  v55[5] = v58;
  v55[6] = v59;
  *(_QWORD *)(v57 + 16) = sub_23AC26590;
  *(_QWORD *)(v57 + 24) = v55;
  swift_retain();
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_release();
  v60 = v89;
  swift_retain();
  swift_unknownObjectRetain();
  v76 = a9;
  v61 = v88;
  v62 = v94;
  sub_23AAA3E2C(v94, v50);
  v63 = v82;
  v64 = v83;
  sub_23AAAE668(v83, v82);
  v65 = v81;
  swift_bridgeObjectRetain();
  v77 = v54;
  v67 = v79;
  v66 = v80;
  sub_23AAAE668(v80, v79);
  v101[0] = v98;
  v101[1] = v62;
  v101[2] = v50;
  v101[3] = v97;
  v101[4] = v96;
  v102 = v72;
  v103 = v95;
  v104 = v64;
  v105 = v63;
  v106 = v65;
  v107 = v66;
  v108 = v67;
  v68 = v77;
  v109 = v85;
  v110 = v78;
  v111 = v84;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23B1AC868(v68, 0x200000u, v74, v99, v86, v88, v89, v57, (uint64_t)v100, (uint64_t)v100, v76, v101, v87, v73, v75);
  sub_23AA9F854((uint64_t)v91);
  swift_release();
  swift_release();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_23AC114D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[7];

  v27 = a6;
  v28 = a5;
  v24 = a2;
  v25 = a4;
  v26 = a1;
  v8 = sub_23B1C602C();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23B1C60A4();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a2 + 160);
  aBlock[4] = sub_23AC26C64;
  aBlock[5] = a3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AA698FC;
  aBlock[3] = &block_descriptor_316;
  v17 = _Block_copy(aBlock);
  swift_retain();
  sub_23B1C6068();
  v32 = MEMORY[0x24BEE4AF8];
  sub_23AA7E38C((unint64_t *)&unk_2542E43B0, v9, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E7470);
  sub_23AAB5A28((unint64_t *)&qword_2542E7480, (uint64_t *)&unk_2542E7470, MEMORY[0x24BEE12C8]);
  v18 = v25;
  sub_23B1C6DE8();
  MEMORY[0x23B85F470](0, v16, v12, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  swift_release();
  v19 = *(_QWORD *)(v24 + 136);
  v20 = *(_QWORD *)(v18 + 16);
  v29 = v19;
  v30 = 1;
  v31 = v20;
  swift_retain();
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC27A04);
  *(_BYTE *)(v19 + OBJC_IVAR____TtC9libfssync13DocumentWharf_deleteBusy) = 0;
  if (*(_QWORD *)(v19 + OBJC_IVAR____TtC9libfssync13DocumentWharf_garbageCollectionSource))
  {
    ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    MEMORY[0x23B85F548](1, ObjectType);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  return v28(v26);
}

uint64_t sub_23AC11770(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t v3;

  swift_beginAccess();
  v2 = *(void (**)(uint64_t))(a1 + 16);
  v3 = swift_retain();
  v2(v3);
  return swift_release();
}

void sub_23AC117C8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, void (**a15)())
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  id v33;
  id v34;
  void *v35;
  unint64_t v36;
  void *Strong;
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  void *v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  _QWORD *v74;
  void *v75;
  void *v76;
  id v77;
  id v78;
  id v79;
  char isUniquelyReferenced_nonNull_native;
  uint64_t (*v81)(id *, id, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(void **);
  void *v88;
  uint64_t v89;
  void (*v90)();
  id v91;
  uint64_t v92;
  uint64_t *v93;
  int v94;
  id v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  id v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  id v122;
  id v123;
  uint64_t v124;
  id v125;
  _QWORD aBlock[5];
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  void *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  char v140;
  uint64_t v141;

  v122 = a8;
  v113 = a7;
  v114 = a6;
  v109 = *(_QWORD *)a12;
  v111 = *(_QWORD *)(a12 + 8);
  v110 = *(_QWORD *)(a12 + 16);
  v108 = *(id *)(a12 + 24);
  v107 = *(_QWORD *)(a12 + 32);
  v106 = *(unsigned __int8 *)(a12 + 40);
  v105 = *(_QWORD *)(a12 + 48);
  v121 = *(_QWORD *)(a12 + 56);
  v120 = *(_QWORD *)(a12 + 64);
  v116 = *(_QWORD *)(a12 + 72);
  v118 = *(_QWORD *)(a12 + 80);
  v117 = *(_QWORD *)(a12 + 88);
  v112 = *(_QWORD *)(a12 + 96);
  v18 = *(_QWORD *)(a12 + 112);
  v115 = *(id *)(a12 + 104);
  v119 = v18;
  v19 = sub_23B1C5570();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_23B1C5A08();
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a4
    || (v26 = *(_QWORD *)(a5 + 136),
        v141 = a5,
        v27 = a2[1],
        v28 = v26 + OBJC_IVAR____TtC9libfssync13DocumentWharf_wharfHandle,
        swift_beginAccess(),
        v29 = v27 == *(_QWORD *)(v28 + 32),
        v30 = v141,
        !v29))
  {
    LODWORD(aBlock[0]) = 2;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
    sub_23B1C5864();
    sub_23B1C5558();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    swift_willThrow();
    return;
  }
  v31 = *a2;
  v32 = *((_DWORD *)a2 + 5);
  v104 = (id)fpfs_current_log();
  sub_23AA9F52C(0, (unint64_t *)&unk_2542E1F90);
  sub_23B1C590C();
  v33 = v123;
  v123 = sub_23AAB60B8((uint64_t)v25, 1);
  if (v33)
  {

    return;
  }
  v101 = v32;
  v103 = 0;
  v102 = v31;
  if (v113)
  {
    v34 = v113;
    v35 = v113;
  }
  else
  {
    v35 = 0;
    v34 = objc_msgSend((id)objc_opt_self(), sel_requestForSelf);
  }
  v36 = (unint64_t)v114;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v38 = v35;
  v39 = v30;
  v40 = objc_msgSend(Strong, sel_session);

  v41 = objc_msgSend(v34, sel_nsfpRequestForSession_isSpeculative_, v40, (v36 >> 8) & 1);
  swift_unknownObjectRelease();
  objc_msgSend(v41, sel_setDomainVersion_, v122);
  v42 = swift_allocObject();
  v113 = (void *)v42;
  *(_QWORD *)(v42 + 16) = 0;
  v43 = v42 + 16;
  if ((v36 & 0x100) == 0)
    goto LABEL_15;
  v44 = *(_BYTE **)(v39 + 144);
  v45 = (void *)swift_retain();
  if (objc_sync_enter(v45))
    goto LABEL_27;
  v46 = v103;
  v47 = sub_23AC1FE9C(v44);
  v103 = v46;
  if (v46)
  {
    objc_sync_exit(v44);
LABEL_29:
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)v44);
  }
  v48 = v47;
  if (objc_sync_exit(v44))
    goto LABEL_29;
  swift_release();
  if (!v48)
  {
    swift_beginAccess();
    v87 = *(void (**)(void **))(a9 + 16);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
    sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
    v88 = (void *)swift_allocError();
    *(_QWORD *)v89 = 10;
    *(_OWORD *)(v89 + 8) = 0u;
    *(_OWORD *)(v89 + 24) = 0u;
    *(_OWORD *)(v89 + 40) = 0u;
    *(_OWORD *)(v89 + 56) = 0u;
    *(_QWORD *)(v89 + 72) = 0;
    *(_BYTE *)(v89 + 80) = 10;
    v136 = 0u;
    v137 = 0u;
    v138 = 0u;
    v135 = v88;
    v139 = 0;
    v140 = 1;
    swift_retain();
    v87(&v135);

    goto LABEL_24;
  }
LABEL_15:
  v100 = v41;
  v49 = (void *)swift_unknownObjectUnownedLoadStrong();
  v44 = objc_msgSend(v49, sel_provider);

  if (!v44)
  {
LABEL_26:
    sub_23B1C704C();
    __break(1u);
LABEL_27:
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)v44);
  }
  v98 = v43;
  v99 = a9;
  v93 = a2;
  v50 = objc_msgSend(v44, sel_identifier);

  v44 = (_BYTE *)swift_unknownObjectUnownedLoadStrong();
  v51 = objc_msgSend(v44, sel_identifier);

  if (!v51)
  {
    __break(1u);
    goto LABEL_26;
  }
  v97 = a13;
  v94 = a14;
  v114 = a10;
  v96 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC82E8]), sel_initWithProviderID_domainIdentifier_itemIdentifier_, v50, v51, a11);

  sub_23AA9F52C(0, (unint64_t *)&unk_2542E1FD0);
  *(_QWORD *)&v128 = v121;
  *((_QWORD *)&v128 + 1) = v120;
  v52 = v116;
  v53 = v118;
  v129 = v116;
  v130 = v118;
  v54 = v117;
  v55 = v112;
  v131 = v117;
  v132 = v112;
  v56 = v119;
  v133 = v115;
  v134 = v119;
  sub_23AAAE668(v121, v120);
  swift_bridgeObjectRetain();
  sub_23AAAE668(v53, v54);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v95 = sub_23AEBD76C(&v128);
  v94 = v94 == 2;
  v57 = swift_allocObject();
  v58 = v141;
  v59 = v104;
  *(_QWORD *)(v57 + 16) = v141;
  *(_QWORD *)(v57 + 24) = v59;
  v60 = v113;
  *(_QWORD *)(v57 + 32) = v122;
  *(_QWORD *)(v57 + 40) = v60;
  *(_QWORD *)(v57 + 48) = a11;
  v61 = v114;
  *(_QWORD *)(v57 + 56) = v99;
  *(_QWORD *)(v57 + 64) = v61;
  v62 = v111;
  *(_QWORD *)(v57 + 72) = v109;
  *(_QWORD *)(v57 + 80) = v62;
  v63 = v110;
  v64 = v108;
  *(_QWORD *)(v57 + 88) = v110;
  *(_QWORD *)(v57 + 96) = v64;
  *(_QWORD *)(v57 + 104) = v107;
  *(_BYTE *)(v57 + 112) = v106;
  v65 = v121;
  *(_QWORD *)(v57 + 120) = v105;
  *(_QWORD *)(v57 + 128) = v65;
  *(_QWORD *)(v57 + 136) = v120;
  *(_QWORD *)(v57 + 144) = v52;
  *(_QWORD *)(v57 + 152) = v53;
  v66 = v117;
  *(_QWORD *)(v57 + 160) = v117;
  *(_QWORD *)(v57 + 168) = v55;
  *(_QWORD *)(v57 + 176) = v115;
  *(_QWORD *)(v57 + 184) = v56;
  *(_QWORD *)(v57 + 192) = v102;
  *(_DWORD *)(v57 + 200) = v101;
  aBlock[4] = sub_23AC26634;
  v127 = v57;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AC13938;
  aBlock[3] = &block_descriptor_283;
  v67 = _Block_copy(aBlock);
  v109 = v127;
  swift_retain();
  swift_retain();
  v108 = a11;
  swift_retain();
  v68 = v114;
  swift_unknownObjectRetain();
  v115 = v104;
  v69 = v122;
  sub_23AAA3E2C(v62, v63);
  sub_23AAAE668(v121, v120);
  swift_bridgeObjectRetain();
  sub_23AAAE668(v118, v66);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  LOBYTE(v92) = v94;
  v70 = v96;
  v71 = v95;
  v72 = v100;
  v73 = objc_msgSend(v68, sel_fetchContentsForItemWithID_version_usingExistingContentsAtURL_existingVersion_request_estimatedItemSize_isSymlink_completionHandler_, v96, 0, v123, v95, v100, v97, v92, v67);

  v74 = v113;
  _Block_release(v67);
  swift_beginAccess();
  v75 = (void *)v74[2];
  v74[2] = v73;

  v76 = (void *)v74[2];
  if (!v76)
  {
    swift_release();

    return;
  }
  swift_beginAccess();
  v77 = v76;
  v78 = v108;
  v79 = v77;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v124 = *(_QWORD *)(v58 + 176);
  *(_QWORD *)(v58 + 176) = 0x8000000000000000;
  sub_23AD25648((uint64_t)v79, v78, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v58 + 176) = v124;

  swift_bridgeObjectRelease();
  swift_endAccess();
  v81 = *(uint64_t (**)(id *, id, uint64_t, uint64_t))(v58 + 120);
  if (v81)
  {
    v82 = *MEMORY[0x24BDD1188];
    v83 = v93[7];
    v125 = v78;
    swift_retain_n();
    v84 = v81(&v125, v79, v82, v83);
    v86 = v85;

    sub_23AAB7948((uint64_t)v81);
    sub_23AAB7948((uint64_t)v81);
  }
  else
  {

    v84 = 0;
    v86 = 0;
  }
  v90 = (void (*)())swift_allocObject();
  *((_QWORD *)v90 + 2) = v58;
  *((_QWORD *)v90 + 3) = v78;
  *((_QWORD *)v90 + 4) = v84;
  *((_QWORD *)v90 + 5) = v86;
  swift_beginAccess();
  *a15 = sub_23AC27898;
  a15[1] = v90;
  swift_retain();
  v91 = v78;
LABEL_24:
  swift_release();
  swift_release();
}

uint64_t sub_23AC123CC(void *a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7, void *a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, int a15)
{
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v42;

  v37 = *a13;
  v16 = a13[2];
  v42 = a13[1];
  v35 = a13[4];
  v36 = a13[3];
  v34 = *((_BYTE *)a13 + 40);
  v17 = a13[9];
  v30 = a13[8];
  v31 = a13[7];
  v18 = a13[10];
  v19 = a13[11];
  v20 = a13[12];
  v32 = a13[13];
  v33 = a13[6];
  v21 = a13[14];
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = a6;
  *(_QWORD *)(v22 + 24) = a3;
  *(_QWORD *)(v22 + 32) = a8;
  *(_QWORD *)(v22 + 40) = a1;
  *(_QWORD *)(v22 + 48) = a2;
  *(_QWORD *)(v22 + 56) = a5;
  *(_QWORD *)(v22 + 64) = a9;
  *(_QWORD *)(v22 + 72) = a10;
  *(_QWORD *)(v22 + 80) = a11;
  *(_QWORD *)(v22 + 88) = a12;
  *(_QWORD *)(v22 + 96) = v37;
  *(_QWORD *)(v22 + 104) = v42;
  *(_QWORD *)(v22 + 112) = v16;
  *(_QWORD *)(v22 + 120) = v36;
  *(_QWORD *)(v22 + 128) = v35;
  *(_BYTE *)(v22 + 136) = v34;
  *(_QWORD *)(v22 + 144) = v33;
  *(_QWORD *)(v22 + 152) = v31;
  *(_QWORD *)(v22 + 160) = v30;
  *(_QWORD *)(v22 + 168) = v17;
  *(_QWORD *)(v22 + 176) = v18;
  *(_QWORD *)(v22 + 184) = v19;
  *(_QWORD *)(v22 + 192) = v20;
  *(_QWORD *)(v22 + 200) = v32;
  *(_QWORD *)(v22 + 208) = v21;
  *(_QWORD *)(v22 + 216) = a14;
  *(_DWORD *)(v22 + 224) = a15;
  swift_retain();
  v23 = a3;
  v24 = a8;
  v25 = a1;
  v26 = a2;
  v27 = a5;
  swift_retain();
  v28 = a10;
  swift_retain();
  swift_unknownObjectRetain();
  sub_23AAA3E2C(v42, v16);
  sub_23AAAE668(v31, v30);
  swift_bridgeObjectRetain();
  sub_23AAAE668(v18, v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23AA814FC(a7, (uint64_t)"provideFile(for:kind:expectedFileSize:updating:domainVersion:requestor:options:completion:)", 91, 2, (uint64_t)sub_23AC26764, v22);
  return swift_release();
}

uint64_t sub_23AC125EC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t (**a6)(char *, _QWORD), id *a7, void *a8, uint64_t a9, void *a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  id v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  char *v31;
  void *v32;
  id *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char v37;
  uint64_t v38;
  void (*v39)(void **);
  void *v40;
  char *v41;
  uint64_t v42;
  id v43;
  id v44;
  void *v45;
  void (*v46)(void **);
  void *v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  id *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  id *v64;
  void *v65;
  void (*v66)(void **);
  uint64_t v67;
  unint64_t v68;
  id *v69;
  uint64_t (**v70)(char *, _QWORD);
  char *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  char *v97;
  id v98;
  uint64_t v99;
  id *v100;
  uint64_t v101;
  uint64_t (**v102)(char *, _QWORD);
  __int128 v103;
  __int128 v104;
  void *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  void *v109;
  char v110;

  v98 = a8;
  v100 = a7;
  v102 = a6;
  v96 = a5;
  v88 = *(void **)a11;
  v91 = *(_OWORD *)(a11 + 8);
  v89 = *(_OWORD *)(a11 + 24);
  *(_QWORD *)&v90 = *(unsigned __int8 *)(a11 + 40);
  *((_QWORD *)&v90 + 1) = *(_QWORD *)(a11 + 48);
  v87 = *(_QWORD *)(a11 + 56);
  v86 = *(_QWORD *)(a11 + 64);
  v85 = *(_QWORD *)(a11 + 72);
  v84 = *(_QWORD *)(a11 + 80);
  v83 = *(_QWORD *)(a11 + 88);
  v82 = *(_QWORD *)(a11 + 96);
  v15 = *(_QWORD *)(a11 + 112);
  v81 = *(_QWORD *)(a11 + 104);
  v80 = v15;
  v16 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v16);
  v93 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_23B1C5474();
  v94 = *(_QWORD *)(v95 - 8);
  MEMORY[0x24BDAC7A8](v95);
  v92 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_23B1C5A08();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_QWORD *)(v23 + 64);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v97 = (char *)&v80 - v27;
  v101 = a9;
  v99 = a1;
  sub_23AC098D4(a2, a3);
  if (!a4)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, 1, 1, v22);
    goto LABEL_7;
  }
  v28 = objc_msgSend(a4, "url");
  sub_23B1C59CC();

  v29 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v29(v21, v26, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
LABEL_7:
    sub_23AA8A05C((uint64_t)v21, (uint64_t *)&unk_2542E6740);
    v32 = v102;
    goto LABEL_8;
  }
  v30 = v22;
  v31 = v97;
  v29(v97, v21, v22);
  v32 = v102;
  if (v96 && !v102)
  {
    v100 = v96;
    LODWORD(v98) = sub_23B1C59D8();
    swift_beginAccess();
    v50 = v101;
    v51 = *(_QWORD *)(v101 + 24);
    v95 = *(_QWORD *)(v101 + 16);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v31, v30);
    v52 = (*(unsigned __int8 *)(v23 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    v53 = v52 + v24;
    v102 = (uint64_t (**)(char *, _QWORD))v23;
    v54 = v30;
    v55 = (v52 + v24) & 0xFFFFFFFFFFFFFFF8;
    v56 = swift_allocObject();
    v57 = v55 + v56;
    v29((char *)(v56 + v52), v26, v54);
    v58 = v100;
    v59 = v50;
    *(_BYTE *)(v56 + v53) = v98 & 1;
    *(_QWORD *)(v57 + 8) = v95;
    *(_QWORD *)(v57 + 16) = v51;
    swift_beginAccess();
    *(_QWORD *)(v50 + 16) = sub_23AC2684C;
    *(_QWORD *)(v50 + 24) = v56;
    swift_retain_n();
    swift_release();
    sub_23AAA5788((uint64_t *)&v103);
    v104 = v103;
    sub_23AA9F49C((uint64_t)&v104);
    sub_23AAA5CC8((uint64_t *)&v103);
    v60 = v87;
    v61 = v86;
    sub_23AAAE6AC(v104, *((uint64_t *)&v104 + 1));
    LOBYTE(v56) = v62;
    v63 = sub_23AC2452C((uint64_t)&v104);
    if ((v56 & 1) != 0)
    {
      v64 = v58;
      v65 = v96;
      sub_23AC09034(v96);

      swift_beginAccess();
      v66 = *(void (**)(void **))(v59 + 16);
      v67 = v91;
      v105 = v88;
      v106 = v91;
      v68 = *((_QWORD *)&v91 + 1);
      v107 = v89;
      v108 = v90;
      v109 = v65;
      v110 = 0;
      v69 = v64;
      swift_retain();
      sub_23AAA3E2C(v67, v68);
      v66(&v105);

      swift_release();
      sub_23AAA3E18(v67, v68);
      swift_release();

      return v102[1](v97, v54);
    }
    else
    {
      v70 = v102;
      MEMORY[0x24BDAC7A8](v63);
      v71 = v97;
      *(&v80 - 22) = (uint64_t)v97;
      *(&v80 - 21) = v72;
      *((_DWORD *)&v80 - 40) = v73;
      v74 = (uint64_t)v88;
      *(&v80 - 19) = v59;
      *(&v80 - 18) = v74;
      v75 = *((_QWORD *)&v91 + 1);
      *(&v80 - 17) = v91;
      *(&v80 - 16) = v75;
      v76 = *((_QWORD *)&v89 + 1);
      *(&v80 - 15) = v89;
      *(&v80 - 14) = v76;
      *((_BYTE *)&v80 - 104) = v90;
      *(&v80 - 12) = *((_QWORD *)&v90 + 1);
      *(&v80 - 11) = v60;
      v77 = v85;
      *(&v80 - 10) = v61;
      *(&v80 - 9) = v77;
      v78 = v83;
      *(&v80 - 8) = v84;
      *(&v80 - 7) = v78;
      v79 = v81;
      *(&v80 - 6) = v82;
      *(&v80 - 5) = v79;
      *(&v80 - 4) = v80;
      *(&v80 - 3) = (uint64_t)v58;
      *(&v80 - 2) = v99;
      sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC268A0);

      swift_release();
      return v70[1](v71, v54);
    }
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v31, v30);
LABEL_8:
  v33 = v100 + 2;
  swift_beginAccess();
  v34 = v101;
  if (*v33 && (objc_msgSend(*v33, sel_isCancelled) & 1) != 0)
  {
    swift_beginAccess();
    if (*v33)
    {
      if (objc_msgSend(*v33, sel_isCancelled)
        && (v35 = v99, swift_beginAccess(), *(_QWORD *)(*(_QWORD *)(v35 + 176) + 16)))
      {
        v36 = v98;
        swift_bridgeObjectRetain();
        sub_23AA88CF8(v36);
        v38 = v37 & 1;

        swift_bridgeObjectRelease();
      }
      else
      {
        v38 = 0;
      }
    }
    else
    {
      v38 = 0;
    }
    swift_beginAccess();
    v46 = *(void (**)(void **))(v34 + 16);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
    sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
    v47 = (void *)swift_allocError();
    *(_QWORD *)v48 = v38;
    *(_OWORD *)(v48 + 8) = 0u;
    *(_OWORD *)(v48 + 24) = 0u;
    *(_OWORD *)(v48 + 40) = 0u;
    *(_OWORD *)(v48 + 56) = 0u;
    *(_QWORD *)(v48 + 72) = 0;
    *(_BYTE *)(v48 + 80) = 5;
    v106 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = v47;
    v109 = 0;
    v110 = 1;
    swift_retain();
    v46(&v105);

  }
  else
  {
    swift_beginAccess();
    v39 = *(void (**)(void **))(v34 + 16);
    swift_retain();
    if (v32)
    {
      v40 = v32;
    }
    else
    {
      sub_23B1C53E4();
      sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
      sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
      v41 = v92;
      v42 = v95;
      sub_23B1C5864();
      v40 = (void *)sub_23B1C5354();
      (*(void (**)(char *, uint64_t))(v94 + 8))(v41, v42);
    }
    v43 = v98;
    v44 = v32;
    v45 = sub_23AC16914(v40, v43, 0, (uint64_t)objc_msgSend(a10, sel_timeoutState));

    v106 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = v45;
    v109 = 0;
    v110 = 1;
    v39(&v105);

  }
  return swift_release();
}

uint64_t sub_23AC12FFC(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t))
{
  id v7;
  void *v8;
  unsigned int v9;
  id v10;
  id v11;
  void *v12;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x24BDAC8D0];
  v7 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v8 = (void *)sub_23B1C5954();
  v14[0] = 0;
  v9 = objc_msgSend(v7, sel_removeItemAtURL_error_, v8, v14);

  if (v9)
  {
    v10 = v14[0];
    if ((a3 & 1) == 0)
      return a4(a1);
    goto LABEL_5;
  }
  v11 = v14[0];
  v12 = (void *)sub_23B1C587C();

  swift_willThrow();
  if ((a3 & 1) != 0)
LABEL_5:
    sub_23B1C59C0();
  return a4(a1);
}

uint64_t sub_23AC13118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  int v32;
  uint64_t result;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD aBlock[7];
  uint64_t v57;

  v47 = a6;
  v48 = a7;
  v44 = a4;
  v43 = a3;
  v42 = a2;
  v34[0] = a8;
  v41 = *a5;
  v9 = a5[1];
  v54 = a5[2];
  v55 = v9;
  v40 = a5[3];
  v39 = a5[4];
  v38 = *((unsigned __int8 *)a5 + 40);
  v37 = a5[6];
  v10 = a5[7];
  v52 = a5[8];
  v53 = v10;
  v11 = a5[10];
  v57 = a5[9];
  v13 = a5[12];
  v45 = a5[11];
  v12 = v45;
  v46 = v11;
  v49 = v13;
  v36 = a5[13];
  v35 = a5[14];
  v14 = sub_23B1C5A08();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x24BDAC7A8](v14);
  v17 = sub_23B1C59E4();
  v50 = v18;
  v51 = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14);
  v19 = (*(unsigned __int8 *)(v15 + 80) + 176) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v42;
  *(_DWORD *)(v20 + 24) = v43;
  v21 = v41;
  *(_QWORD *)(v20 + 32) = v44;
  *(_QWORD *)(v20 + 40) = v21;
  v22 = v54;
  *(_QWORD *)(v20 + 48) = v55;
  *(_QWORD *)(v20 + 56) = v22;
  v23 = v39;
  *(_QWORD *)(v20 + 64) = v40;
  *(_QWORD *)(v20 + 72) = v23;
  *(_BYTE *)(v20 + 80) = v38;
  v24 = v53;
  *(_QWORD *)(v20 + 88) = v37;
  *(_QWORD *)(v20 + 96) = v24;
  v25 = v57;
  *(_QWORD *)(v20 + 104) = v52;
  *(_QWORD *)(v20 + 112) = v25;
  *(_QWORD *)(v20 + 120) = v11;
  *(_QWORD *)(v20 + 128) = v12;
  v26 = v36;
  *(_QWORD *)(v20 + 136) = v13;
  *(_QWORD *)(v20 + 144) = v26;
  v27 = v47;
  v28 = v48;
  *(_QWORD *)(v20 + 152) = v35;
  *(_QWORD *)(v20 + 160) = v27;
  *(_QWORD *)(v20 + 168) = v28;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v20 + v19, (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = sub_23AC269CC;
  *(_QWORD *)(v29 + 24) = v20;
  aBlock[4] = sub_23AA698D4;
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AA698B0;
  aBlock[3] = &block_descriptor_301;
  v30 = _Block_copy(aBlock);
  swift_retain();
  sub_23AAA3E2C(v55, v54);
  sub_23AAAE668(v53, v52);
  swift_bridgeObjectRetain();
  sub_23AAAE668(v46, v45);
  swift_bridgeObjectRetain();
  v31 = v27;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  sub_23B1C6458();
  swift_bridgeObjectRelease();
  v32 = fpfs_gethandle_at();
  swift_release();
  _Block_release(v30);
  LOBYTE(v30) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v30 & 1) != 0)
    __break(1u);
  else
    *(_DWORD *)v34[0] = v32;
  return result;
}

uint64_t sub_23AC13458(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void **);
  _QWORD *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v32;
  void (*v33)(void **);
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];
  unsigned __int8 v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  char v47;

  if (*(_QWORD *)a1 == a2 && *(_DWORD *)(a1 + 20) == a3)
  {
    v12 = *(void **)a5;
    v13 = *(_QWORD *)(a5 + 8);
    v14 = *(_QWORD *)(a5 + 16);
    v15 = *(_QWORD *)(a5 + 24);
    v16 = *(_QWORD *)(a5 + 32);
    v17 = *(unsigned __int8 *)(a5 + 40);
    v18 = *(_QWORD *)(a5 + 48);
    swift_beginAccess();
    v19 = *(void (**)(void **))(a4 + 16);
    v39 = v12;
    v40 = v13;
    v41 = v14;
    v42 = v15;
    v43 = v16;
    v44 = v17;
    v45 = v18;
    v46 = a6;
    v47 = 0;
    swift_retain();
    v19(&v39);
    swift_release();
  }
  else
  {
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = a7;
    v20[3] = a6;
    v20[4] = a4;
    swift_retain_n();
    v21 = a6;
    swift_retain_n();
    v22 = v21;
    if ((sub_23AC085BC() & 1) != 0 && objc_msgSend(v22, sel_isFlattenedPackage))
    {
      swift_retain();
      swift_retain();
      sub_23AC22204(a8, (void (*)(uint64_t *))sub_23AC26AA8, (uint64_t)v20, a7);
      swift_release_n();
      swift_release_n();
    }
    else
    {
      v23 = *(_QWORD *)(a7 + 136);
      v24 = sub_23B1C59E4();
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v23 + 344))(v36, v24);
      v35 = a4;
      v25 = v36[1];
      v32 = (void *)v36[0];
      v27 = v36[2];
      v26 = v36[3];
      v28 = v36[4];
      v29 = v37;
      v34 = v38;
      swift_bridgeObjectRelease();
      sub_23AC09034(v22);
      swift_beginAccess();
      v33 = *(void (**)(void **))(v35 + 16);
      v30 = v22;
      v39 = v32;
      v40 = v25;
      v41 = v27;
      v42 = v26;
      v43 = v28;
      v44 = v29;
      v45 = v34;
      v46 = v22;
      v47 = 0;
      swift_retain();
      sub_23AC26AB4(v32, v25, v27, v26, v28, v29, v34, 0);
      v33(&v39);
      swift_release();
      sub_23AC26AC8(v32, v25, v27, v26, v28, v29, v34, v22, 0);
      sub_23AC26B0C(v32, v25, v27, v26, v28, v29, v34, 0);
      swift_release();
      swift_release();
    }
    swift_release();

  }
  return 0;
}

void sub_23AC137C4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char v15;
  id v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD *);
  void *v24;
  uint64_t v25;
  _QWORD v26[5];
  uint64_t v27;
  uint64_t v28;
  char v29[56];
  char v30;
  _QWORD v31[8];
  char v32;

  sub_23AA724E8(a1, (uint64_t)v26, &qword_2569E2938);
  v24 = (void *)v26[0];
  v21 = v26[2];
  v22 = v26[1];
  v19 = v26[4];
  v20 = v26[3];
  v17 = v27;
  v18 = v28;
  v7 = a3;
  sub_23AC09034(a3);
  swift_beginAccess();
  v23 = *(void (**)(_QWORD *))(a4 + 16);
  v25 = a1;
  sub_23AA724E8(a1, (uint64_t)v29, &qword_2569E2938);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = v30;
  if ((v30 & 1) == 0)
  {
    v12 = v17 & 1;
    v16 = v7;
    v9 = v21;
    v8 = v22;
    v11 = v19;
    v10 = v20;
    v13 = v18;
    v14 = v7;
  }
  v31[0] = v24;
  v31[1] = v8;
  v31[2] = v9;
  v31[3] = v10;
  v31[4] = v11;
  v31[5] = v12;
  v31[6] = v13;
  v31[7] = v14;
  v32 = v15;
  swift_retain();
  sub_23AC26C2C(v25);
  v23(v31);
  swift_release();
  sub_23AC26AC8(v24, v8, v9, v10, v11, v12, v13, v14, v15);
}

void sub_23AC13938(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  void (*v11)(void *, void *, id, uint64_t, void *);
  id v12;
  id v13;
  id v14;
  id v15;

  v11 = *(void (**)(void *, void *, id, uint64_t, void *))(a1 + 32);
  swift_retain();
  v15 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a6;
  v11(a2, a3, v13, a5, a6);
  swift_release();

}

void sub_23AC139EC(uint64_t a1, void *a2, void (*a3)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;

  v6 = sub_23B1C60EC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(a1 + 160);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEE5610], v6);
  v11 = v10;
  LOBYTE(v10) = sub_23B1C6104();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    swift_beginAccess();
    v12 = a2;
    v13 = (void *)sub_23B1826C8((uint64_t)v12);
    swift_endAccess();

    if (a3)
      a3();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_23AC13B00(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  char v9;
  id v10;
  id v11;
  void *v12;

  swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 176);
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = a2;
    swift_bridgeObjectRetain();
    v8 = sub_23AA88CF8(v7);
    if ((v9 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    v10 = *(id *)(*(_QWORD *)(v6 + 56) + 8 * v8);

    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  objc_msgSend(v10, sel_cancel);

LABEL_7:
  swift_beginAccess();
  v11 = a2;
  v12 = (void *)sub_23B1826C8((uint64_t)v11);
  swift_endAccess();

  return a3();
}

void sub_23AC13C10()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  unsigned __int8 v4;

  v0 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v1 = (void *)sub_23B1C63BC();
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2)
  {
    v3 = (void *)sub_23B1C63BC();
    v4 = objc_msgSend(v2, sel_BOOLForKey_, v3);

  }
  else
  {
    v4 = 0;
  }
  byte_2569E2860 = v4;
}

uint64_t sub_23AC13CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(uint64_t))
{
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[40];
  _QWORD v22[7];

  swift_beginAccess();
  v11 = *(void (**)(uint64_t))(a2 + 16);
  v12 = swift_retain();
  v11(v12);
  swift_release();
  type metadata accessor for VFSStagedContext();
  v13 = swift_dynamicCastClass();
  if (v13)
  {
    v14 = *(_QWORD *)(a4 + 136);
    MEMORY[0x24BDAC7A8](v13);
    swift_retain_n();
    sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC27A04);
    *(_BYTE *)(v14 + OBJC_IVAR____TtC9libfssync13DocumentWharf_deleteBusy) = 0;
    if (*(_QWORD *)(v14 + OBJC_IVAR____TtC9libfssync13DocumentWharf_garbageCollectionSource))
    {
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain();
      MEMORY[0x23B85F548](1, ObjectType);
      swift_release_n();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release_n();
    }
  }
  sub_23AA724E8((uint64_t)a5, (uint64_t)v22, qword_2542E48C0);
  if (v22[2] >> 60 != 11)
  {
    v16 = v22[0];
    v17 = sub_23AA724E8(a1, (uint64_t)v21, &qword_2569E2928);
    if ((v21[32] & 1) == 0)
    {
      if (v16)
      {
        v18 = *(_QWORD *)(a4 + 136);
        MEMORY[0x24BDAC7A8](v17);
        sub_23AC25990(a5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAAE4B4);
        sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC27A04);
        *(_BYTE *)(v18 + OBJC_IVAR____TtC9libfssync13DocumentWharf_deleteBusy) = 0;
        if (*(_QWORD *)(v18 + OBJC_IVAR____TtC9libfssync13DocumentWharf_garbageCollectionSource))
        {
          v19 = swift_getObjectType();
          swift_unknownObjectRetain();
          MEMORY[0x23B85F548](1, v19);
          swift_unknownObjectRelease();
        }
        sub_23AC25990(a5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAAEE4C);
      }
    }
  }
  return a6(a1);
}

void sub_23AC13F84(uint64_t a1, void (*a2)(uint64_t *), void *a3, void *a4, id *a5, uint64_t a6, uint64_t a7, uint64_t a8, id *a9, uint64_t *a10, uint64_t a11)
{
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *Strong;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id *v49;
  _OWORD *v50;
  uint64_t *v51;
  __int128 v52;
  __int128 v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id *v58;
  id v59;
  id v60;
  char *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  _QWORD v74[6];
  id v75;
  uint64_t v76;
  id *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  void *v81;
  void (*v82)(uint64_t *);
  uint64_t v83;
  id *v84;
  char *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  id *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;

  v83 = a7;
  v87 = a10;
  v89 = a9;
  v90 = a11;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
  v84 = *(id **)(v18 - 8);
  v19 = v84[8];
  v20 = MEMORY[0x24BDAC7A8](v18);
  MEMORY[0x24BDAC7A8](v20);
  v85 = (char *)&v75 - v21;
  v22 = type metadata accessor for ItemMetadata();
  v23 = MEMORY[0x24BDAC7A8](v22);
  if ((*(_BYTE *)(a1 + 192) & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
    sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
    v25 = (void *)swift_allocError();
    *(_OWORD *)v26 = 0u;
    *(_OWORD *)(v26 + 16) = 0u;
    *(_OWORD *)(v26 + 32) = 0u;
    *(_OWORD *)(v26 + 48) = 0u;
    *(_OWORD *)(v26 + 64) = 0u;
    *(_BYTE *)(v26 + 80) = 8;
    v94 = (uint64_t)v25;
    v95 = 0;
    v96 = 0;
    v97 = 0;
    v98 = 1;
    a2(&v94);

  }
  else
  {
    v76 = v18;
    v78 = v23;
    v91 = (uint64_t)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    v80 = a8;
    v81 = a3;
    v82 = a2;
    v27 = swift_allocObject();
    v28 = swift_allocObject();
    Strong = (void *)swift_unknownObjectUnownedLoadStrong();
    v79 = a4;
    v77 = a5;
    v30 = sub_23AA976F8(a4, Strong, a5, a6, 1);
    v32 = v31;

    *(_QWORD *)(v27 + 16) = v30;
    v93 = v28;
    *(_QWORD *)(v28 + 16) = v32;
    v88 = a6;
    if ((a6 & 0x200000000000) != 0 && (sub_23AC085BC() & 1) != 0 && (v32 & 2) == 0)
      *(_QWORD *)(v93 + 16) = v32 | 2;
    v92 = a1;
    v33 = v76;
    if ((v88 & 0x4000000000000) != 0)
    {
      if (v83)
      {
        sub_23AA9F52C(0, (unint64_t *)&unk_2542E1FD0);
        v34 = v30;
        v35 = (void *)sub_23B1C66F8();
        objc_msgSend(v34, sel_setConflictingVersions_, v35);

        v36 = *(_QWORD *)(v93 + 16);
        if ((v36 & 0x80000000) == 0)
          *(_QWORD *)(v93 + 16) = v36 | 0x80000000;
      }
    }
    v86 = v27;
    v75 = *(id *)(v27 + 16);
    v37 = (uint64_t)v77;
    sub_23AA9BA80((uint64_t)v77 + *(int *)(v33 + 40), v91);
    v38 = (uint64_t)v85;
    sub_23AA8EFC8(v37, (uint64_t)v85, (uint64_t *)&unk_2542E1E00);
    v83 = (uint64_t)&v75 - (((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_23AA8EFC8(v38, v83, (uint64_t *)&unk_2542E1E00);
    v39 = (*((unsigned __int8 *)v84 + 80) + 48) & ~(unint64_t)*((unsigned __int8 *)v84 + 80);
    v40 = ((unint64_t)v19 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8;
    v43 = (v42 + 71) & 0xFFFFFFFFFFFFFFF8;
    v44 = (v43 + 15) & 0xFFFFFFFFFFFFFFF8;
    v45 = (_QWORD *)swift_allocObject();
    v47 = v81;
    v46 = (uint64_t)v82;
    v45[2] = v92;
    v45[3] = v46;
    v48 = v93;
    v45[4] = v47;
    v45[5] = v48;
    sub_23AA724E8(v38, (uint64_t)v45 + v39, (uint64_t *)&unk_2542E1E00);
    v49 = v89;
    *(_QWORD *)((char *)v45 + v40) = v89;
    *(_QWORD *)((char *)v45 + v41) = v86;
    v50 = (_OWORD *)((char *)v45 + v42);
    v51 = v87;
    v52 = *((_OWORD *)v87 + 1);
    *v50 = *(_OWORD *)v87;
    v50[1] = v52;
    v53 = *((_OWORD *)v51 + 3);
    v50[2] = *((_OWORD *)v51 + 2);
    v50[3] = v53;
    *(_QWORD *)((char *)v45 + v43) = v88;
    v54 = v47;
    v55 = v79;
    *(_QWORD *)((char *)v45 + v44) = v79;
    v57 = v90;
    v56 = v91;
    *(_QWORD *)((char *)v45 + ((v44 + 15) & 0xFFFFFFFFFFFFFFF8)) = v90;
    LODWORD(v39) = *(unsigned __int8 *)(v56 + *(int *)(v78 + 108));
    v58 = v49;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_23AC244C0(v51);
    v59 = v55;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v84 = v58;
    swift_retain();
    sub_23AC244C0(v51);
    v60 = v59;
    swift_retain();
    v61 = (char *)v75;
    if ((_DWORD)v39 == 1 && (sub_23AC085BC() & 1) != 0)
    {
      v62 = objc_msgSend(v61, sel_filename);
      v63 = sub_23B1C63E0();
      v65 = v64;

      v94 = v63;
      v95 = v65;
      sub_23B1C64F4();
      sub_23B1C63E0();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      v66 = (void *)sub_23B1C63BC();
      swift_bridgeObjectRelease();
      objc_msgSend(v61, sel_setFilename_, v66);

    }
    v85 = v61;
    type metadata accessor for VFSStagedContext();
    v67 = swift_dynamicCastClass();
    if (v67)
    {
      v68 = v67;
      v89 = &v75;
      v69 = v92;
      MEMORY[0x24BDAC7A8](v67);
      v70 = v91;
      v74[2] = v69;
      v74[3] = v91;
      v74[4] = sub_23AC261AC;
      v74[5] = v45;
      swift_retain();
      sub_23B150D14(v68, 0x200000, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_23AC2797C, (uint64_t)v74, v71);
      v72 = v60;
      swift_release();
      v73 = v83;
    }
    else
    {
      v73 = v83;
      v72 = v60;
      sub_23AC1470C(0, 0, v92, (uint64_t)v82, v54, v93, v83, v89, v86, (__int128 *)v51, v88, v60, v57);
      v70 = v91;
    }
    sub_23AA9F854(v70);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_23AA8A05C(v73, (uint64_t *)&unk_2542E1E00);
    swift_release();

    sub_23AAA5CC8(v51);
    swift_release();
    swift_release();

    swift_release();
  }
}

void sub_23AC1470C(id a1, int a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, __int128 *a10, uint64_t a11, void *a12, uint64_t a13)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  void (*v28)(_QWORD);
  void (*v29)(_QWORD *, uint64_t);
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  void *Strong;
  unsigned int v43;
  char v44;
  void *v45;
  id v46;
  void **v47;
  void *v48;
  _OWORD *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  id v67;
  id v68;
  __int128 *v69;
  void *v70;
  void *v71;
  id v72;
  void **v73;
  void *v74;
  id v75;
  id v76;
  void *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(id *, id, uint64_t, id);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  id v87;
  _QWORD *v88;
  id *v89;
  id v90;
  id v91;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v93;
  void (*v94)(_QWORD *, uint64_t);
  uint64_t v95;
  id v96;
  int v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 *v103;
  void *v104;
  id v105;
  id v106;
  void **v107;
  id v108;
  unsigned int v109;
  void (*v110)(_QWORD *, _QWORD, uint64_t);
  uint64_t v111;
  void *v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  id v116[3];
  id aBlock;
  uint64_t v118;
  void (*v119)(uint64_t, void *, uint64_t, uint64_t, void *, void *);
  void *v120;
  uint64_t (*v121)();
  _QWORD *v122;
  char v123[8];
  __int128 v124;
  __int128 v125;
  _QWORD v126[2];

  v112 = a8;
  v111 = a6;
  v113 = a5;
  v114 = a4;
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ItemMetadata();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_23B1C60EC();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (uint64_t *)((char *)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = *(void **)(a3 + 160);
  *v26 = v27;
  v28 = *(void (**)(_QWORD))(v24 + 104);
  v109 = *MEMORY[0x24BEE5610];
  v110 = (void (*)(_QWORD *, _QWORD, uint64_t))v28;
  v28(v26);
  v108 = v27;
  LOBYTE(v27) = sub_23B1C6104();
  v29 = *(void (**)(_QWORD *, uint64_t))(v24 + 8);
  v29(v26, v23);
  if ((v27 & 1) != 0)
  {
    if ((a2 & 1) != 0)
    {
      aBlock = a1;
      v118 = 0;
      v119 = 0;
      v120 = 0;
      LOBYTE(v121) = 1;
      v30 = a1;
      ((void (*)(id *))v114)(&aBlock);
LABEL_27:
      sub_23AAB538C(a1);
      return;
    }
    if ((*(_BYTE *)(a3 + 192) & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
      sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
      v31 = (void *)swift_allocError();
      *(_OWORD *)v32 = 0u;
      *(_OWORD *)(v32 + 16) = 0u;
      *(_OWORD *)(v32 + 32) = 0u;
      *(_OWORD *)(v32 + 48) = 0u;
      *(_OWORD *)(v32 + 64) = 0u;
      *(_BYTE *)(v32 + 80) = 8;
      aBlock = v31;
      v118 = 0;
      v119 = 0;
      v120 = 0;
      LOBYTE(v121) = 1;
      v33 = a1;
      ((void (*)(id *))v114)(&aBlock);

      goto LABEL_27;
    }
    v94 = v29;
    v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
    sub_23AA9BA80(a7 + *(int *)(v34 + 40), (uint64_t)v22);
    v106 = a1;
    v103 = a10;
    if (a1)
    {
      v35 = objc_msgSend(a1, "url");
      sub_23B1C59CC();

      v36 = sub_23B1C5A08();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v19, 0, 1, v36);
    }
    else
    {
      v37 = sub_23B1C5A08();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v19, 1, 1, v37);
    }
    v100 = v111 + 16;
    v102 = a9;
    v107 = (void **)(a9 + 16);
    v38 = sub_23AC085BC();
    v39 = sub_23AC22950((uint64_t)v22, (uint64_t)v19, v38 & 1);
    v41 = v40;
    sub_23AA8A05C((uint64_t)v19, (uint64_t *)&unk_2542E6740);
    sub_23AA9F854((uint64_t)v22);
    Strong = (void *)swift_unknownObjectUnownedLoadStrong();
    v43 = objc_msgSend(Strong, sel_userEnabled);

    v97 = a2;
    v98 = (id)(a3 + 152);
    if (v43)
    {
      v44 = v41 & 1;
      v45 = (void *)swift_unknownObjectUnownedLoadStrong();
      v46 = objc_msgSend(v45, sel_session);

      v105 = objc_msgSend(v46, sel_newFileProviderProxyWithTimeout_pid_, 0, sub_23AC07F7C(v39, v44));
      swift_unknownObjectRelease();
    }
    else
    {
      v105 = (id)sub_23AC21600((void **)&protocolRef_FPXVendor);
    }
    v104 = a12;
    v101 = a11;
    v96 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC83F8]), sel_init);
    objc_msgSend(v96, sel_setDomainVersion_, v112);
    v47 = v107;
    swift_beginAccess();
    v48 = *v47;
    v125 = *v103;
    v124 = *(__int128 *)((char *)v103 + 24);
    sub_23AA724E8((uint64_t)(v103 + 3), (uint64_t)v123, (uint64_t *)&unk_2542E7460);
    v49 = v48;
    sub_23AA9F49C((uint64_t)&v125);
    sub_23AA9F49C((uint64_t)&v124);
    sub_23ABE5118((uint64_t)v123);
    v50 = (void *)sub_23B1C5AA4();
    v51 = (void *)sub_23B1C5AA4();
    sub_23AA724E8((uint64_t)v123, (uint64_t)v126, (uint64_t *)&unk_2542E7460);
    v95 = v23;
    v103 = v49;
    if (v126[1])
    {
      v52 = (void *)sub_23B1C63BC();
      sub_23ABE5088((uint64_t)v123);
    }
    else
    {
      v52 = 0;
    }
    v53 = v113;
    v113 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC83D8]), sel_initWithContentVersion_metadataVersion_lastEditorDeviceName_, v50, v51, v52);
    sub_23AC2452C((uint64_t)&v124);
    sub_23AC2452C((uint64_t)&v125);

    swift_beginAccess();
    v54 = v111;
    v100 = *(_QWORD *)(v111 + 16);
    v55 = (void *)objc_opt_self();
    v99 = v106;
    v56 = objc_msgSend(v55, sel_requestForSelf);
    v57 = (void *)swift_unknownObjectUnownedLoadStrong();
    v58 = objc_msgSend(v57, sel_session);

    v59 = objc_msgSend(v56, sel_nsfpRequestForSession_isSpeculative_, v58, 0);
    v98 = v59;

    swift_unknownObjectRelease();
    v60 = v112;
    objc_msgSend(v59, sel_setDomainVersion_, v112);
    v61 = (_QWORD *)swift_allocObject();
    v61[2] = a3;
    v61[3] = v60;
    v61[4] = v102;
    v61[5] = nullsub_1;
    v62 = v101;
    v61[6] = 0;
    v61[7] = v62;
    v63 = v114;
    v61[8] = v54;
    v61[9] = v63;
    v64 = v104;
    v61[10] = v53;
    v61[11] = v64;
    v65 = v105;
    v61[12] = v105;
    v121 = sub_23AC2628C;
    v122 = v61;
    aBlock = (id)MEMORY[0x24BDAC760];
    v118 = 1107296256;
    v119 = sub_23AC161D8;
    v120 = &block_descriptor_227_0;
    v66 = _Block_copy(&aBlock);
    v114 = a3;
    swift_retain();
    a1 = v106;
    swift_retain();
    swift_retain();
    swift_retain();
    v67 = v64;
    swift_unknownObjectRetain();
    v68 = v60;
    swift_release();
    v69 = v103;
    v70 = v113;
    v71 = v98;
    v72 = objc_msgSend(v65, sel_modifyItem_baseVersion_changedFields_contents_options_request_completionHandler_, v103, v113, v100, v99, 0, v98, v66);
    sub_23AAB538C(a1);

    _Block_release(v66);
    if (!v72)
    {
      swift_unknownObjectRelease();

      goto LABEL_27;
    }
    v73 = v107;
    swift_beginAccess();
    v74 = *v73;
    v75 = v72;
    v76 = objc_msgSend(v74, sel_documentSize);
    if (v76)
    {
      v77 = v76;
      v78 = objc_msgSend(v76, sel_longLongValue);

      v79 = v114;
      v80 = v95;
      if (!a1)
        goto LABEL_26;
      v81 = *(uint64_t (**)(id *, id, uint64_t, id))(v114 + 120);
      if (!v81)
        goto LABEL_26;
    }
    else
    {
      v79 = v114;
      v80 = v95;
      if (!a1)
        goto LABEL_26;
      v78 = 0;
      v81 = *(uint64_t (**)(id *, id, uint64_t, id))(v114 + 120);
      if (!v81)
        goto LABEL_26;
    }
    v82 = *MEMORY[0x24BDD1198];
    v116[0] = v67;
    swift_retain();
    v83 = v81(v116, v75, v82, v78);
    v85 = v84;
    sub_23AAB7948((uint64_t)v81);
    if (!v83)
    {
LABEL_26:
      v89 = v107;
      swift_beginAccess();
      v90 = objc_msgSend(*v89, sel_itemIdentifier);
      swift_beginAccess();
      v91 = v75;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v115 = *(_QWORD *)(v79 + 184);
      *(_QWORD *)(v79 + 184) = 0x8000000000000000;
      sub_23AD25648((uint64_t)v91, v90, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v79 + 184) = v115;

      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_unknownObjectRelease();

      goto LABEL_27;
    }
    v86 = v108;
    *v26 = v108;
    v110(v26, v109, v80);
    v87 = v86;
    LOBYTE(v86) = sub_23B1C6104();
    v94(v26, v80);
    if ((v86 & 1) != 0)
    {
      v88 = (_QWORD *)swift_allocObject();
      v88[2] = v79;
      v88[3] = v83;
      v88[4] = v85;
      swift_beginAccess();
      *(_QWORD *)(a13 + 16) = sub_23AC26294;
      *(_QWORD *)(a13 + 24) = v88;
      swift_retain();
      swift_release();
      goto LABEL_26;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_23AC15194(__int128 *a1, int a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, __int128 *a12, uint64_t a13, void *a14, uint64_t a15)
{
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  void (*v29)(_QWORD *);
  void (*v30)(_QWORD *, uint64_t);
  __int128 *v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  void *Strong;
  unsigned int v44;
  void *v45;
  id v46;
  void **v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  id v54;
  void *v55;
  id v56;
  id v57;
  void *v58;
  _QWORD *v59;
  void (*v60)(_QWORD);
  uint64_t v61;
  uint64_t v62;
  void *v63;
  id v64;
  id v65;
  id v66;
  const void *v67;
  void *v68;
  void *v69;
  void *v70;
  id v71;
  void **v72;
  void *v73;
  id v74;
  id v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(id *, id, uint64_t, id);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(_QWORD *, _QWORD, uint64_t);
  void *v87;
  id v88;
  char v89;
  _QWORD *v90;
  id *v91;
  id v92;
  id v93;
  char isUniquelyReferenced_nonNull_native;
  void (*v95)(_QWORD *, uint64_t);
  void (*v96)(_QWORD);
  uint64_t v97;
  id v98;
  int v99;
  id v100;
  __int128 *v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  id v105;
  void *v106;
  __int128 *v107;
  id v108;
  void *v109;
  uint64_t v110;
  void **v111;
  id v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  __int128 *aBlock;
  uint64_t v122;
  void (*v123)(uint64_t, void *, uint64_t, uint64_t, void *, void *);
  void *v124;
  uint64_t (*v125)();
  _QWORD *v126;
  char v127[8];
  __int128 v128;
  __int128 v129;
  _QWORD v130[2];

  v114 = a8;
  v117 = a7;
  v115 = a6;
  v118 = a4;
  v116 = a3;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ItemMetadata();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_23B1C60EC();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (void (**)(_QWORD, _QWORD))((char *)&v95 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = *(void **)(a5 + 160);
  *v27 = v28;
  v29 = *(void (**)(_QWORD))(v25 + 104);
  v113 = *MEMORY[0x24BEE5610];
  v29(v27);
  v112 = v28;
  LOBYTE(v28) = sub_23B1C6104();
  v30 = *(void (**)(_QWORD, _QWORD))(v25 + 8);
  v30(v27, v24);
  if ((v28 & 1) != 0)
  {
    if ((a2 & 1) != 0)
    {
      aBlock = a1;
      v122 = 0;
      v123 = 0;
      v124 = 0;
      LOBYTE(v125) = 1;
      v31 = a1;
      v32 = ((uint64_t (*)(__int128 **))v115)(&aBlock);
LABEL_6:
      v116(v32);
LABEL_28:
      sub_23AAB538C(a1);
      return;
    }
    if ((*(_BYTE *)(a5 + 192) & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
      sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
      v33 = (__int128 *)swift_allocError();
      *(_OWORD *)v34 = 0u;
      *(_OWORD *)(v34 + 16) = 0u;
      *(_OWORD *)(v34 + 32) = 0u;
      *(_OWORD *)(v34 + 48) = 0u;
      *(_OWORD *)(v34 + 64) = 0u;
      *(_BYTE *)(v34 + 80) = 8;
      aBlock = v33;
      v122 = 0;
      v123 = 0;
      v124 = 0;
      LOBYTE(v125) = 1;
      v35 = a1;
      ((void (*)(__int128 **))v115)(&aBlock);

      goto LABEL_6;
    }
    v96 = v29;
    v110 = a11;
    v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
    sub_23AA9BA80(a9 + *(int *)(v36 + 40), (uint64_t)v23);
    v95 = v30;
    v107 = a12;
    if (a1)
    {
      v37 = objc_msgSend(a1, "url");
      sub_23B1C59CC();

      v38 = sub_23B1C5A08();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v20, 0, 1, v38);
    }
    else
    {
      v39 = sub_23B1C5A08();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v20, 1, 1, v39);
    }
    v103 = (id)(v114 + 16);
    v109 = a10;
    v111 = (void **)(v110 + 16);
    v40 = sub_23AC085BC();
    v108 = (id)sub_23AC22950((uint64_t)v23, (uint64_t)v20, v40 & 1);
    v42 = v41;
    sub_23AA8A05C((uint64_t)v20, (uint64_t *)&unk_2542E6740);
    sub_23AA9F854((uint64_t)v23);
    Strong = (void *)swift_unknownObjectUnownedLoadStrong();
    v44 = objc_msgSend(Strong, sel_userEnabled);

    v99 = a2;
    v100 = (id)(a5 + 152);
    if (v44)
    {
      v45 = (void *)swift_unknownObjectUnownedLoadStrong();
      v46 = objc_msgSend(v45, sel_session);

      v108 = objc_msgSend(v46, sel_newFileProviderProxyWithTimeout_pid_, 0, sub_23AC07F7C((uint64_t)v108, v42 & 1));
      swift_unknownObjectRelease();
    }
    else
    {
      v108 = (id)sub_23AC21600((void **)&protocolRef_FPXVendor);
    }
    v106 = a14;
    v104 = a13;
    v98 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC83F8]), sel_init);
    objc_msgSend(v98, sel_setDomainVersion_, v109);
    v47 = v111;
    swift_beginAccess();
    v48 = *v47;
    v129 = *v107;
    v128 = *(__int128 *)((char *)v107 + 24);
    sub_23AA724E8((uint64_t)(v107 + 3), (uint64_t)v127, (uint64_t *)&unk_2542E7460);
    v105 = v48;
    sub_23AA9F49C((uint64_t)&v129);
    sub_23AA9F49C((uint64_t)&v128);
    sub_23ABE5118((uint64_t)v127);
    v49 = (void *)sub_23B1C5AA4();
    v50 = (void *)sub_23B1C5AA4();
    sub_23AA724E8((uint64_t)v127, (uint64_t)v130, (uint64_t *)&unk_2542E7460);
    v97 = v24;
    if (v130[1])
    {
      v51 = (void *)sub_23B1C63BC();
      sub_23ABE5088((uint64_t)v127);
    }
    else
    {
      v51 = 0;
    }
    v103 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC83D8]), sel_initWithContentVersion_metadataVersion_lastEditorDeviceName_, v49, v50, v51);
    sub_23AC2452C((uint64_t)&v128);
    sub_23AC2452C((uint64_t)&v129);

    swift_beginAccess();
    v52 = v114;
    v102 = *(_QWORD *)(v114 + 16);
    v53 = (void *)objc_opt_self();
    v101 = a1;
    v54 = objc_msgSend(v53, sel_requestForSelf);
    v55 = (void *)swift_unknownObjectUnownedLoadStrong();
    v56 = objc_msgSend(v55, sel_session);

    v57 = objc_msgSend(v54, sel_nsfpRequestForSession_isSpeculative_, v56, 0);
    v100 = v57;

    swift_unknownObjectRelease();
    v107 = a1;
    v58 = v109;
    objc_msgSend(v57, sel_setDomainVersion_, v109);
    v59 = (_QWORD *)swift_allocObject();
    v59[2] = a5;
    v59[3] = v58;
    v60 = v116;
    v59[4] = v110;
    v59[5] = v60;
    v61 = v104;
    v59[6] = v118;
    v59[7] = v61;
    v62 = v115;
    v59[8] = v52;
    v59[9] = v62;
    v63 = v106;
    v59[10] = v117;
    v59[11] = v63;
    v64 = v108;
    v59[12] = v108;
    v125 = sub_23AC2628C;
    v126 = v59;
    aBlock = (__int128 *)MEMORY[0x24BDAC760];
    v122 = 1107296256;
    v123 = sub_23AC161D8;
    v124 = &block_descriptor_246;
    v116 = (void (*)(_QWORD))_Block_copy(&aBlock);
    v115 = a5;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v65 = v63;
    swift_unknownObjectRetain();
    v66 = v58;
    a1 = v107;
    swift_release();
    v67 = v116;
    v68 = v105;
    v69 = v103;
    v70 = v100;
    v71 = objc_msgSend(v64, sel_modifyItem_baseVersion_changedFields_contents_options_request_completionHandler_, v105, v103, v102, v101, 0, v100, v116);
    sub_23AAB538C(a1);

    _Block_release(v67);
    if (!v71)
    {
      swift_unknownObjectRelease();

      goto LABEL_28;
    }
    v72 = v111;
    swift_beginAccess();
    v73 = *v72;
    v74 = v71;
    v75 = objc_msgSend(v73, sel_documentSize);
    if (v75)
    {
      v76 = v75;
      v77 = objc_msgSend(v75, sel_longLongValue);

      v78 = v115;
      v79 = v97;
      if (!a1)
        goto LABEL_27;
      v80 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v115 + 120);
      if (!v80)
        goto LABEL_27;
    }
    else
    {
      v78 = v115;
      v79 = v97;
      if (!a1)
        goto LABEL_27;
      v77 = 0;
      v80 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v115 + 120);
      if (!v80)
        goto LABEL_27;
    }
    v81 = *MEMORY[0x24BDD1198];
    v120 = v65;
    swift_retain();
    v82 = v80(&v120, v74, v81, v77);
    v84 = v83;
    v85 = (uint64_t)v80;
    v86 = (void (*)(_QWORD, _QWORD, _QWORD))v96;
    sub_23AAB7948(v85);
    if (!v82)
    {
LABEL_27:
      v91 = v111;
      swift_beginAccess();
      v92 = objc_msgSend(*v91, sel_itemIdentifier);
      swift_beginAccess();
      v93 = v74;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v119 = *(_QWORD *)(v78 + 184);
      *(_QWORD *)(v78 + 184) = 0x8000000000000000;
      sub_23AD25648((uint64_t)v93, v92, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v78 + 184) = v119;

      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_unknownObjectRelease();

      goto LABEL_28;
    }
    v87 = v112;
    *v27 = v112;
    v86(v27, v113, v79);
    v88 = v87;
    v89 = sub_23B1C6104();
    v95(v27, v79);
    if ((v89 & 1) != 0)
    {
      v90 = (_QWORD *)swift_allocObject();
      v90[2] = v78;
      v90[3] = v82;
      v90[4] = v84;
      swift_beginAccess();
      *(_QWORD *)(a15 + 16) = sub_23AC279FC;
      *(_QWORD *)(a15 + 24) = v90;
      swift_retain();
      swift_release();
      goto LABEL_27;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_23AC15C60(void *a1, uint64_t a2, char a3, void *a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  void *Strong;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v33;

  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v33 = objc_msgSend(Strong, sel_log);

  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = a6;
  *(_QWORD *)(v22 + 24) = a4;
  *(_QWORD *)(v22 + 32) = a7;
  *(_QWORD *)(v22 + 40) = a8;
  *(_QWORD *)(v22 + 48) = a9;
  *(_QWORD *)(v22 + 56) = a10;
  *(_QWORD *)(v22 + 64) = a2;
  *(_QWORD *)(v22 + 72) = a1;
  *(_QWORD *)(v22 + 80) = a11;
  *(_QWORD *)(v22 + 88) = a12;
  *(_QWORD *)(v22 + 96) = a5;
  *(_QWORD *)(v22 + 104) = a13;
  *(_QWORD *)(v22 + 112) = a14;
  *(_QWORD *)(v22 + 120) = a15;
  *(_QWORD *)(v22 + 128) = a16;
  *(_BYTE *)(v22 + 136) = a3;
  swift_retain();
  v23 = a4;
  v24 = a7;
  swift_retain();
  swift_retain();
  v25 = a1;
  swift_retain();
  v26 = a5;
  swift_retain();
  v27 = a15;
  swift_unknownObjectRetain();
  sub_23AA814FC(v33, (uint64_t)"update(_:to:given:with:capturedContent:baseVersion:domainVersion:options:nonSyncableAttributes:updatedConflictsList:completion:)", 128, 2, (uint64_t)sub_23AC26314, v22);

  return swift_release();
}

void sub_23AC15DE8(int a1, void *a2, void *a3, uint64_t a4, void (*a5)(void), int a6, int a7, void *a8, uint64_t a9, uint64_t a10, id a11, void (*a12)(void **), uint64_t a13, void *a14, void *a15, unsigned __int8 a16)
{
  id *v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  id v43;
  void *v44;
  uint64_t v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  char v52;

  v21 = (id *)(a4 + 16);
  sub_23AC098D4(a2, a3);
  swift_beginAccess();
  v22 = objc_msgSend(*(id *)(a4 + 16), sel_itemIdentifier);
  swift_beginAccess();
  v23 = (void *)sub_23B1826C8((uint64_t)v22);
  swift_endAccess();

  a5();
  v24 = sub_23AFA9348(a7);
  if ((sub_23AC085BC() & 1) != 0)
  {
    if ((v24 & 8) != 0)
      goto LABEL_16;
    swift_beginAccess();
    if (!objc_msgSend(*v21, sel_isPackage))
      goto LABEL_16;
    swift_beginAccess();
    v25 = objc_msgSend(*v21, sel_filename);
    if (v25)
    {
      v26 = v25;
      v27 = objc_msgSend(v25, sel_pathExtension);

      v28 = sub_23B1C63E0();
      v30 = v29;

      if (v28 == sub_23B1C63E0() && v30 == v31)
      {
        swift_bridgeObjectRelease_n();
        if (!a8)
          goto LABEL_16;
      }
      else
      {
        v32 = sub_23B1C7388();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v32 & 1) == 0 || !a8)
          goto LABEL_16;
      }
      v33 = a8;
      v34 = objc_msgSend(v33, sel_filename);
      if (v34)
      {
        v35 = v34;
        v36 = objc_msgSend(v34, sel_pathExtension);

        v37 = sub_23B1C63E0();
        v39 = v38;

        if (v37 == sub_23B1C63E0() && v39 == v40)
        {

          swift_bridgeObjectRelease_n();
        }
        else
        {
          v41 = sub_23B1C7388();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v24 |= ((v24 & 1) == 0) & ~v41;
        }
LABEL_16:
        if ((a9 & 0x200000000000) != 0 && (v24 & 0x200000000001) == 1)
          v24 |= 0x200000000000uLL;
        goto LABEL_22;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_22:
  if ((a9 & 0x4000000000000) != 0)
  {
    swift_beginAccess();
    if (!(*(_QWORD *)(a10 + 16) & 0x80000000 | v24 & 0x4000000000000))
      v24 |= 0x4000000000000uLL;
  }
  if (a11)
  {
    v43 = a11;
    v44 = sub_23AC16914(a11, a14, 1, (uint64_t)objc_msgSend(a15, sel_timeoutState));
    v48 = v44;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 1;
    a12(&v48);

  }
  else
  {
    sub_23AC09034(a8);
    if (a8)
      v45 = v24;
    else
      v45 = 0;
    v46 = a8;
    v47 = objc_msgSend(a2, sel_domainVersion);
    v48 = a8;
    v49 = v45;
    v50 = (a8 != 0) & a16;
    v51 = v47;
    v52 = 0;
    a12(&v48);

  }
}

void sub_23AC161D8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  void (*v11)(void *, uint64_t, uint64_t, void *, void *);
  id v12;
  id v13;
  id v14;

  v11 = *(void (**)(void *, uint64_t, uint64_t, void *, void *))(a1 + 32);
  swift_retain();
  v14 = a2;
  v12 = a5;
  v13 = a6;
  v11(a2, a3, a4, a5, a6);
  swift_release();

}

uint64_t sub_23AC16280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];
  _QWORD aBlock[6];

  v5 = sub_23B1C602C();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v16[0] = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23B1C60A4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  aBlock[4] = sub_23AA698DC;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AA698FC;
  aBlock[3] = &block_descriptor_236_0;
  v14 = _Block_copy(aBlock);
  swift_retain();
  sub_23B1C6068();
  v16[1] = MEMORY[0x24BEE4AF8];
  sub_23AA7E38C((unint64_t *)&unk_2542E43B0, v6, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E7470);
  sub_23AAB5A28((unint64_t *)&qword_2542E7480, (uint64_t *)&unk_2542E7470, MEMORY[0x24BEE12C8]);
  sub_23B1C6DE8();
  MEMORY[0x23B85F470](0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v16[0] + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void sub_23AC16478(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((*(_BYTE *)(a1 + 192) & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
    sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
    v7 = (void *)swift_allocError();
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_BYTE *)(v8 + 80) = 8;
    a2(v7, 1);

  }
  else
  {
    v11 = *(_BYTE *)(a4 + 40) & 1;
    v12 = *(_QWORD *)(a4 + 32);
    v13 = *(_QWORD *)(a4 + 48);
    v14 = *(_QWORD *)(a1 + 136);
    v15 = *(_OWORD *)(a4 + 16);
    v18[0] = *(_OWORD *)a4;
    v18[1] = v15;
    v19 = v12;
    v20 = v11;
    v21 = v13;
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
    (*(void (**)(_OWORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v14 + 360))(v18, a5 + *(int *)(v16 + 40), a6, *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), 0);
    v17 = swift_retain();
    a2((void *)v17, 0);
    swift_release_n();
  }
}

uint64_t sub_23AC166B0(void *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  _QWORD v19[2];

  v4 = v3;
  v8 = sub_23B1C545C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    sub_23B1C5360();
    sub_23AA7E38C((unint64_t *)&qword_2569E29D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEB0], MEMORY[0x24BDCAEA8]);
    v12 = sub_23B1C575C();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if ((v12 & 1) != 0 && *(_BYTE *)(v4 + 192) == 1)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
      sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
      a3 = swift_allocError();
      *(_QWORD *)v13 = a1;
      *(_OWORD *)(v13 + 8) = 0u;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 56) = 0u;
      *(_QWORD *)(v13 + 72) = 0;
      *(_BYTE *)(v13 + 80) = 8;
      v14 = a1;
      return a3;
    }
    if (*(_BYTE *)(v4 + 208) == 1)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
      sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
      a3 = swift_allocError();
      *(_QWORD *)v15 = 7;
      *(_OWORD *)(v15 + 8) = 0u;
      *(_OWORD *)(v15 + 24) = 0u;
      *(_OWORD *)(v15 + 40) = 0u;
      *(_OWORD *)(v15 + 56) = 0u;
      *(_QWORD *)(v15 + 72) = 0;
      *(_BYTE *)(v15 + 80) = 10;
      return a3;
    }
  }
  switch(a3)
  {
    case 0:
      return a3;
    case 1:
      sub_23AB7BFCC();
      a3 = swift_allocError();
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      v17 = -2;
LABEL_12:
      *(_BYTE *)(v16 + 16) = v17;
      return a3;
    case 2:
      sub_23AB7BFCC();
      a3 = swift_allocError();
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      v17 = -3;
      goto LABEL_12;
  }
  type metadata accessor for FPXPCAutomaticErrorProxyTimeout(0);
  v19[1] = a3;
  result = sub_23B1C73E8();
  __break(1u);
  return result;
}

void *sub_23AC16914(void *a1, void *a2, char a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *Strong;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  __int128 v44;
  __int128 v45;

  v5 = a1;
  v6 = sub_23AC166B0(a1, a3, a4);
  if (!v6)
  {
    _s3__C4CodeOMa_1(0);
    *(_QWORD *)&v44 = -1001;
    sub_23AA7E38C((unint64_t *)&qword_2542E1FA0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_23B1CCA68);
    if ((sub_23B1C575C() & 1) != 0)
    {
      v8 = (void *)sub_23B1C5870();
      v9 = objc_msgSend(v8, sel_fp_userInfoFPItem);

      if (v9)
      {
        v10 = objc_msgSend(v9, sel_itemID);
        v11 = objc_msgSend(v10, sel_identifier);

        v12 = objc_msgSend(v9, sel_filename);
        v13 = sub_23B1C63E0();
        v15 = v14;

        *(_QWORD *)&v44 = v13;
        *((_QWORD *)&v44 + 1) = v15;
        sub_23AAA420C();
        v16 = sub_23B1C6CF8();
        v18 = v17;
        swift_bridgeObjectRelease();
        v19 = sub_23ADAB49C();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
        sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
        v20 = swift_allocError();
        *(_QWORD *)v21 = v11;
        *(_QWORD *)(v21 + 8) = v16;
        *(_QWORD *)(v21 + 16) = v18;
        *(_QWORD *)(v21 + 24) = v19;
        *(_OWORD *)(v21 + 32) = xmmword_23B1D2320;
        *(_QWORD *)(v21 + 48) = v5;
        *(_QWORD *)(v21 + 56) = 0;
        *(_QWORD *)(v21 + 64) = 0;
        *(_QWORD *)(v21 + 72) = 0;
        *(_BYTE *)(v21 + 80) = 1;
        v22 = v5;

        return (void *)v20;
      }
LABEL_22:
      v42 = v5;
      return v5;
    }
    *(_QWORD *)&v44 = -1005;
    if ((sub_23B1C575C() & 1) != 0)
    {
      v23 = (void *)sub_23B1C5870();
      v24 = objc_msgSend(v23, sel_userInfo);

      v25 = sub_23B1C620C();
      v26 = sub_23B1C63E0();
      if (*(_QWORD *)(v25 + 16) && (v28 = sub_23AAAF4C4(v26, v27), (v29 & 1) != 0))
      {
        sub_23AAA15AC(*(_QWORD *)(v25 + 56) + 32 * v28, (uint64_t)&v44);
      }
      else
      {
        v44 = 0u;
        v45 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v45 + 1))
      {
        type metadata accessor for NSFileProviderItemIdentifier(0);
        if ((swift_dynamicCast() & 1) != 0)
        {
          Strong = (void *)swift_unknownObjectUnownedLoadStrong();
          v33 = objc_msgSend(Strong, sel_providerDomainID);

          v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC82E8]), sel_initWithProviderDomainID_itemIdentifier_, v33, v43);
          v35 = objc_msgSend(v34, sel_identifier);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
          sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
          v36 = swift_allocError();
          *(_QWORD *)v37 = v35;
          *(_QWORD *)(v37 + 8) = 0;
          *(_QWORD *)(v37 + 16) = 0;
          *(_QWORD *)(v37 + 24) = 1;
          *(_OWORD *)(v37 + 32) = 0u;
          *(_OWORD *)(v37 + 48) = 0u;
          *(_QWORD *)(v37 + 64) = 0;
          *(_QWORD *)(v37 + 72) = v5;
          *(_BYTE *)(v37 + 80) = 0;
          v38 = v5;

          return (void *)v36;
        }
      }
      else
      {
        sub_23AA8A05C((uint64_t)&v44, qword_2542E5640);
      }
      if (!a2)
        goto LABEL_22;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
      sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
      v30 = swift_allocError();
      *(_QWORD *)v39 = a2;
      *(_QWORD *)(v39 + 8) = 0;
      *(_QWORD *)(v39 + 16) = 0;
      *(_QWORD *)(v39 + 24) = 1;
      *(_OWORD *)(v39 + 32) = 0u;
      *(_OWORD *)(v39 + 48) = 0u;
      *(_QWORD *)(v39 + 64) = 0;
      *(_QWORD *)(v39 + 72) = v5;
      *(_BYTE *)(v39 + 80) = 0;
    }
    else
    {
      *(_QWORD *)&v44 = -1007;
      if ((sub_23B1C575C() & 1) == 0 || !a2)
        goto LABEL_22;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
      sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
      v30 = swift_allocError();
      *(_QWORD *)v31 = a2;
      *(_QWORD *)(v31 + 8) = v5;
      *(_OWORD *)(v31 + 16) = 0u;
      *(_OWORD *)(v31 + 32) = 0u;
      *(_OWORD *)(v31 + 48) = 0u;
      *(_OWORD *)(v31 + 64) = 0u;
      *(_BYTE *)(v31 + 80) = 3;
    }
    v40 = v5;
    v41 = a2;
    return (void *)v30;
  }
  return (void *)v6;
}

uint64_t sub_23AC16E2C(uint64_t a1, uint64_t (*a2)(void), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VFSStagedContext();
  v9 = swift_dynamicCastClass();
  if (!v9)
    return a2();
  v10 = v9;
  v11 = *(void **)(v3 + 160);
  v12 = sub_23B1C60A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v3;
  v13[3] = v10;
  v13[4] = a2;
  v13[5] = a3;
  swift_retain_n();
  swift_retain();
  swift_retain();
  sub_23AA9086C(v11, (uint64_t)v8, (void (*)())a2, a3, (uint64_t)sub_23AC259CC, (uint64_t)v13);
  swift_release();
  swift_release();
  return sub_23AA8A05C((uint64_t)v8, &qword_2542DD460);
}

uint64_t sub_23AC16F7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;

  v4 = *(_QWORD *)(a1 + 136);
  swift_retain();
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC27A04);
  *(_BYTE *)(v4 + OBJC_IVAR____TtC9libfssync13DocumentWharf_deleteBusy) = 0;
  if (*(_QWORD *)(v4 + OBJC_IVAR____TtC9libfssync13DocumentWharf_garbageCollectionSource))
  {
    ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    MEMORY[0x23B85F548](1, ObjectType);
    swift_release();
    v5 = swift_unknownObjectRelease();
  }
  else
  {
    v5 = swift_release();
  }
  return a3(v5);
}

void sub_23AC17060(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void *, uint64_t, uint64_t (*)(_QWORD), _QWORD), uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  char *v36;
  void (*v37)(void *, uint64_t, uint64_t (*)(_QWORD), _QWORD);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _DWORD v45[68];
  _BYTE v46[256];
  uint64_t v47;

  v37 = a7;
  v38 = a8;
  v44 = a6;
  v42 = a3;
  v13 = sub_23B1C5570();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23B1C5A08();
  v39 = *(_QWORD *)(v17 - 8);
  v40 = v17;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v36 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v43 = (char *)&v35 - v20;
  v41 = a4;
  if (a4
    && (v21 = *(_QWORD *)(a5 + 136),
        v47 = a5,
        v22 = *(_QWORD *)(a2 + 8),
        v23 = v21 + OBJC_IVAR____TtC9libfssync13DocumentWharf_wharfHandle,
        swift_beginAccess(),
        v24 = v22 == *(_QWORD *)(v23 + 32),
        v25 = v47,
        v24))
  {
    sub_23AAF8E48((uint64_t)v45);
    v26 = sub_23AA724E8((uint64_t)v45, (uint64_t)v46, &qword_2542E5050);
    MEMORY[0x24BDAC7A8](v26);
    *((_DWORD *)&v35 - 4) = a1;
    *(&v35 - 1) = v25;
    v27 = v44;
    sub_23B1A4A98((uint64_t)v46, 6, (uint64_t)sub_23AC250AC, (uint64_t)(&v35 - 4));
    if (!v8)
    {
      v28 = (uint64_t)v43;
      sub_23B1C590C();
      if (*(_BYTE *)(v27 + *(int *)(type metadata accessor for ItemMetadata() + 108)) == 1
        && (sub_23AC085BC() & 1) != 0)
      {
        v29 = v38;
        swift_retain();
        sub_23AC22F3C(v28, v27, v47, v37, v29);
        swift_release();
        v31 = v39;
        v30 = v40;
      }
      else
      {
        sub_23AA9F52C(0, (unint64_t *)&unk_2542E1F90);
        v31 = v39;
        v30 = v40;
        v32 = (uint64_t)v36;
        (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v36, v28, v40);
        v33 = sub_23AAB60B8(v32, 0);
        v34 = v33;
        v37(v33, 0, nullsub_1, 0);

      }
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v28, v30);
    }
  }
  else
  {
    v45[0] = 2;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
    sub_23B1C5864();
    sub_23B1C5558();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    swift_willThrow();
  }
}

uint64_t sub_23AC173E4@<X0>(uint64_t a1@<X2>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];

  v3 = *(_QWORD *)(a1 + 136) + OBJC_IVAR____TtC9libfssync13DocumentWharf_wharfHandle;
  swift_beginAccess();
  v4 = *(const void **)(v3 + 56);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = sub_23AC2582C;
  *(_QWORD *)(v6 + 24) = v5;
  aBlock[4] = sub_23AA7E76C;
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AA7E744;
  aBlock[3] = &block_descriptor_167;
  v7 = _Block_copy(aBlock);
  _Block_copy(v4);
  swift_retain();
  swift_release();
  v8 = fpfs_fset_metadata();
  _Block_release(v7);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  else
    *a2 = v8;
  return result;
}

void sub_23AC1756C(void *a1, int a2, unsigned __int8 a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(_QWORD *), uint64_t a10, _QWORD *a11)
{
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  _QWORD v34[2];
  unint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[4];
  char v39;

  v18 = (id)fpfs_adopt_log();
  if (a7)
  {
    type metadata accessor for VFSStagedContext();
    v19 = swift_dynamicCastClass();
    if (v19)
    {
      v32 = a4;
      v20 = *(_QWORD *)(a8 + 136);
      MEMORY[0x24BDAC7A8](v19);
      swift_retain_n();
      sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC27A04);
      *(_BYTE *)(v20 + OBJC_IVAR____TtC9libfssync13DocumentWharf_deleteBusy) = 0;
      if (*(_QWORD *)(v20 + OBJC_IVAR____TtC9libfssync13DocumentWharf_garbageCollectionSource))
      {
        ObjectType = swift_getObjectType();
        swift_unknownObjectRetain();
        MEMORY[0x23B85F548](1, ObjectType);
        swift_release_n();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_release_n();
      }
      a4 = v32;
    }
  }
  v22 = sub_23AFA9348(a2);
  if (a5)
  {
    v34[0] = a5;
    v34[1] = 0;
    v35 = 0;
    v36 = 0;
    v37 = 1;
    v23 = a5;
    a9(v34);

  }
  else
  {
    v24 = v22;
    v25 = sub_23AA724E8((uint64_t)a11, (uint64_t)v34, qword_2542E48C0);
    if (v35 >> 60 != 11 && v34[0])
    {
      v33 = a4;
      v26 = *(_QWORD *)(a8 + 136);
      MEMORY[0x24BDAC7A8](v25);
      sub_23AC25990(a11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAAE4B4);
      sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC27A04);
      *(_BYTE *)(v26 + OBJC_IVAR____TtC9libfssync13DocumentWharf_deleteBusy) = 0;
      if (*(_QWORD *)(v26 + OBJC_IVAR____TtC9libfssync13DocumentWharf_garbageCollectionSource))
      {
        v27 = swift_getObjectType();
        swift_unknownObjectRetain();
        MEMORY[0x23B85F548](1, v27);
        swift_unknownObjectRelease();
      }
      sub_23AC25990(a11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAAEE4C);
      a4 = v33;
    }
    if (a1)
      v28 = v24;
    else
      v28 = 0;
    v38[0] = a1;
    v38[1] = v28;
    v38[2] = (a1 != 0) & a3;
    v38[3] = a4;
    v39 = 0;
    v29 = a4;
    v30 = a1;
    a9(v38);

  }
  v31 = (id)fpfs_adopt_log();

}

void sub_23AC17898(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, id), uint64_t a3, id *a4, uint64_t a5, void *a6, int a7, uint64_t a8, void *a9, unsigned __int8 a10, void *a11, void *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  int *v41;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v49;
  id v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  id v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(char *, id, uint64_t);
  unsigned __int8 v61;
  unint64_t v62;
  _QWORD *v63;
  void *Strong;
  id v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  void *v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(_QWORD, _QWORD, _QWORD, _QWORD, id);
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  id v101;
  void *v102;
  int *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[6];
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  unint64_t v122;
  void (*v123)(char *, id, uint64_t);
  _QWORD *v124;
  void (*v125)(char *, uint64_t);
  uint64_t v126;
  void *v127;
  uint64_t (*v128)(_QWORD, _QWORD, _QWORD, _QWORD, id);
  char *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  id v139;
  char *v140;
  int *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  id *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD v149[9];
  uint64_t v150[9];
  _QWORD v151[9];
  _QWORD v152[10];

  v142 = a8;
  LODWORD(v130) = a7;
  v139 = a6;
  v146 = a4;
  v17 = a13;
  v145 = a5;
  sub_23AA724E8(a5, (uint64_t)v149, &qword_2569E2920);
  v121 = (id)v149[0];
  v122 = v149[2];
  v123 = (void (*)(char *, id, uint64_t))v149[1];
  v124 = (_QWORD *)v149[3];
  v125 = (void (*)(char *, uint64_t))v149[5];
  v126 = v149[4];
  v134 = (void *)v149[6];
  v127 = (void *)v149[8];
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
  v132 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v136 = (uint64_t)&v117 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = v20;
  MEMORY[0x24BDAC7A8](v19);
  v140 = (char *)&v117 - v21;
  v141 = (int *)type metadata accessor for ItemMetadata();
  v22 = MEMORY[0x24BDAC7A8](v141);
  v24 = (char *)&v117 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = *(_QWORD *)(a13 - 8);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v117 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v25);
  v137 = (char *)&v117 - v29;
  v131 = v30;
  MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v117 - v31;
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)&v117 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = a1;
  if ((*(_BYTE *)(a1 + 192) & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
    sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
    v36 = (void *)swift_allocError();
    *(_OWORD *)v37 = 0u;
    *(_OWORD *)(v37 + 16) = 0u;
    *(_OWORD *)(v37 + 32) = 0u;
    *(_OWORD *)(v37 + 48) = 0u;
    *(_OWORD *)(v37 + 64) = 0u;
    *(_BYTE *)(v37 + 80) = 8;
    a2(0, 0, 0, 0, v36);

  }
  else
  {
    v135 = v24;
    v128 = a2;
    v129 = v27;
    v119 = a3;
    if (qword_2542E7190 != -1)
      swift_once();
    v38 = qword_2542EDE38;
    v39 = (char *)v146 + *(int *)(v18 + 40);
    if ((qword_2542EDE38 & 8) != 0 && *v39 == 1)
      v38 = qword_2542EDE38 & 0xFFFFFFFFFFFFFFF7;
    v41 = v141;
    if ((v38 & 0x100) != 0 && *(_QWORD *)&v39[v141[32]] == 0)
      v43 = v38 & 0xFFFFFFFFFFFFFEFFLL;
    else
      v43 = v38;
    sub_23AA8EFC8((uint64_t)&v39[v141[29]], (uint64_t)v35, (uint64_t *)&unk_2542E4310);
    v44 = sub_23B1C5BDC();
    v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 48))(v35, 1, v44);
    sub_23AA8A05C((uint64_t)v35, (uint64_t *)&unk_2542E4310);
    v46 = v43 & 0xFFFFFFFFFFFFFFDFLL;
    if (v45 != 1)
      v46 = v43;
    v47 = v41[31];
    if ((v46 & 0x40) != 0 && *(_QWORD *)&v39[v41[30]] == 0)
      v46 &= ~0x40uLL;
    v118 = v39;
    if ((v39[v47 + 8] & ((v46 & 0x80) != 0)) != 0)
      v49 = v46 & 0xFFFFFFFFFFFFFF7FLL;
    else
      v49 = v46;
    sub_23AA724E8(v145, (uint64_t)v152, &qword_2569E2920);
    v50 = (id)v152[0];
    v144 = a13;
    v120 = a14;
    if (v152[0])
    {
      v51 = v49;
      v52 = v152[1];
      v53 = v152[2];
      v54 = v152[4];
      v55 = v152[5];
      v117 = v152[8];
      v56 = v121;
      sub_23AAAE668((uint64_t)v123, v122);
      swift_bridgeObjectRetain();
      sub_23AAAE668(v126, (unint64_t)v125);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v57 = v53;
      v49 = v51;
      sub_23AAAE53C(v52, v57);
      swift_bridgeObjectRelease();
      v58 = v55;
      v17 = v144;
      sub_23AAAE53C(v54, v58);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v59 = v138;
      v60 = *(void (**)(char *, id, uint64_t))(v138 + 16);
      v60(v32, v139, v17);
    }
    else
    {
      v59 = v138;
      v60 = *(void (**)(char *, id, uint64_t))(v138 + 16);
      v60(v32, v139, a13);
      v50 = sub_23AFA9F44((uint64_t)v32, 1, a13, a14);
    }
    v127 = a12;
    v134 = a11;
    v61 = a10;
    v62 = (unint64_t)a9;
    v63 = (_QWORD *)swift_allocObject();
    v125 = *(void (**)(char *, uint64_t))(v59 + 8);
    v125(v32, v17);
    Strong = (void *)swift_unknownObjectUnownedLoadStrong();
    v65 = sub_23AA976F8(v50, Strong, v146, v49, 1);
    v126 = v66;

    v63[2] = v65;
    sub_23AA724E8(v145, (uint64_t)v151, &qword_2569E2920);
    if (v151[0])
    {
      v121 = a9;
      LODWORD(v122) = a10;
      v123 = v60;
      v124 = v63;
      v68 = v151[1];
      v67 = v151[2];
      v70 = v151[4];
      v69 = v151[5];
      v71 = v151[8];
      v72 = v65;
      sub_23AAAE668(v68, v67);
      sub_23AAAE668(v70, v69);
      swift_bridgeObjectRetain();
      v73 = (void *)sub_23B1C5AA4();
      v74 = (void *)sub_23B1C5AA4();
      if (v71)
      {
        v75 = (void *)sub_23B1C63BC();
        swift_bridgeObjectRelease();
      }
      else
      {
        v75 = 0;
      }
      v77 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC83D8]), sel_initWithContentVersion_metadataVersion_lastEditorDeviceName_, v73, v74, v75);
      sub_23AAAE53C(v70, v69);
      sub_23AAAE53C(v68, v67);

      v17 = v144;
      v60 = v123;
      v63 = v124;
      v61 = v122;
      v62 = (unint64_t)v121;
    }
    else
    {
      v76 = v65;
      v77 = 0;
    }
    objc_msgSend(v65, sel_setItemVersion_, v77);

    if ((v130 & (v142 == 0) & v126) != 0)
      v78 = v126 & 0xFFFFFFFFFFFFFFFELL;
    else
      v78 = v126;
    v130 = v78;
    v79 = sub_23AC20D14(v62 | 1);
    sub_23AA724E8(v145, (uint64_t)v150, &qword_2569E2920);
    if (v150[0])
      v80 = v79 | 2;
    else
      v80 = v79;
    if ((v61 & ((v80 & 2) == 0)) != 0)
      v80 = v79 | 2;
    v145 = v80;
    v126 = v63[2];
    sub_23AA9BA80((uint64_t)v118, (uint64_t)v135);
    v81 = (uint64_t)v140;
    sub_23AA8EFC8((uint64_t)v146, (uint64_t)v140, (uint64_t *)&unk_2542E1E00);
    v82 = v137;
    v60(v137, v139, v17);
    sub_23AA8EFC8(v81, v136, (uint64_t *)&unk_2542E1E00);
    v60(v129, v82, v17);
    v83 = (*(unsigned __int8 *)(v132 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
    v84 = v17;
    v146 = (id *)((v133 + v83 + 7) & 0xFFFFFFFFFFFFFFF8);
    v85 = ((unint64_t)v146 + 15) & 0xFFFFFFFFFFFFFFF8;
    v86 = (v85 + 15) & 0xFFFFFFFFFFFFFFF8;
    v87 = (v86 + 15) & 0xFFFFFFFFFFFFFFF8;
    v88 = v138;
    v89 = (*(unsigned __int8 *)(v138 + 80) + v87 + 8) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
    v90 = swift_allocObject();
    v91 = v120;
    *(_QWORD *)(v90 + 16) = v84;
    *(_QWORD *)(v90 + 24) = v91;
    v92 = v143;
    v93 = v128;
    *(_QWORD *)(v90 + 32) = v143;
    *(_QWORD *)(v90 + 40) = v93;
    v94 = v90 + v83;
    v95 = v119;
    v96 = v134;
    *(_QWORD *)(v90 + 48) = v119;
    *(_QWORD *)(v90 + 56) = v96;
    sub_23AA724E8((uint64_t)v140, v94, (uint64_t *)&unk_2542E1E00);
    *(id *)((char *)v146 + v90) = v63;
    *(_QWORD *)(v90 + v85) = v130;
    v97 = v144;
    *(_QWORD *)(v90 + v86) = v145;
    v98 = (uint64_t)v63;
    v99 = v127;
    *(_QWORD *)(v90 + v87) = v127;
    v100 = v95;
    v146 = (id *)v90;
    (*(void (**)(unint64_t, char *, uint64_t))(v88 + 32))(v90 + v89, v137, v97);
    LODWORD(v90) = v135[v141[27]];
    v101 = v99;
    swift_retain_n();
    swift_retain_n();
    v102 = v134;
    swift_retain_n();
    v140 = (char *)v101;
    v103 = (int *)(id)v126;
    v139 = v102;
    if ((_DWORD)v90 == 1 && (sub_23AC085BC() & 1) != 0)
    {
      v104 = objc_msgSend(v103, sel_filename);
      v105 = sub_23B1C63E0();
      v107 = v106;

      v147 = v105;
      v148 = v107;
      sub_23B1C64F4();
      sub_23B1C63E0();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
      v108 = (void *)sub_23B1C63BC();
      swift_bridgeObjectRelease();
      objc_msgSend(v103, sel_setFilename_, v108);

    }
    v141 = v103;
    if (v142 && (type metadata accessor for VFSStagedContext(), (v109 = swift_dynamicCastClass()) != 0))
    {
      v110 = v109;
      MEMORY[0x24BDAC7A8](v109);
      v111 = (uint64_t)v135;
      v116[2] = v92;
      v116[3] = v135;
      v116[4] = sub_23AC24FA8;
      v116[5] = v146;
      swift_retain();
      sub_23B150D14(v110, 0x200000, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_23AC25090, (uint64_t)v116, v112);
      swift_release();
      v113 = v144;
      v114 = v136;
      v115 = (uint64_t)v129;
    }
    else
    {
      v113 = v144;
      v115 = (uint64_t)v129;
      v114 = v136;
      sub_23AC18398(0, 0, (void **)nullsub_1, 0, v92, v128, v100, v134, v136, v98, v130, v145, v99, (uint64_t)v129, v144, v120);
      v111 = (uint64_t)v135;
    }
    sub_23AA9F854(v111);
    swift_release();
    swift_release();
    swift_release();

    sub_23AA8A05C(v114, (uint64_t *)&unk_2542E1E00);
    swift_release();

    v125((char *)v115, v113);
    swift_release();

  }
}

void sub_23AC18398(id a1, int a2, void **a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, _QWORD, _QWORD, _QWORD, id), uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  void (*v30)(_QWORD *);
  void (*v31)(_QWORD *, uint64_t);
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  void *Strong;
  unsigned int v46;
  char v47;
  void *v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t (*v60)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  void *v66;
  id v67;
  const void *v68;
  void **v69;
  void *v70;
  id v71;
  id v72;
  void *v73;
  id v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t (*v77)(id *, id, uint64_t, id);
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  id v86;
  id *v87;
  id v88;
  id v89;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v91[2];
  uint64_t v92;
  void (*v93)(_QWORD *, uint64_t);
  void (*v94)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v95;
  id v96;
  int v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  void **v109;
  uint64_t (*v110)(_QWORD, _QWORD, _QWORD, _QWORD, id);
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115[2];
  _QWORD aBlock[6];

  v111 = a8;
  v113 = a7;
  v110 = a6;
  v112 = a4;
  v109 = a3;
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ItemMetadata();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_23B1C60EC();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (_QWORD *)((char *)v91 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = *(void **)(a5 + 160);
  *v28 = v29;
  v30 = *(void (**)(_QWORD *))(v26 + 104);
  v105 = *MEMORY[0x24BEE5610];
  v30(v28);
  v104 = v29;
  LOBYTE(v29) = sub_23B1C6104();
  v31 = *(void (**)(_QWORD *, uint64_t))(v26 + 8);
  v31(v28, v25);
  if ((v29 & 1) != 0)
  {
    if ((a2 & 1) != 0)
    {
      v32 = a1;
      v33 = v110(0, 0, 0, 0, a1);
      ((void (*)(uint64_t))v109)(v33);
LABEL_20:
      sub_23AAB538C(a1);
      return;
    }
    v95 = v28;
    v93 = v31;
    v94 = (void (*)(_QWORD *, _QWORD, uint64_t))v30;
    v97 = a2;
    v103 = a12;
    v102 = a11;
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = nullsub_1;
    v91[1] = v34 + 16;
    v107 = v34;
    *(_QWORD *)(v34 + 24) = 0;
    v35 = objc_allocWithZone(MEMORY[0x24BDC83F8]);
    v36 = a1;
    v96 = objc_msgSend(v35, sel_init);
    objc_msgSend(v96, sel_setDomainVersion_, v111);
    v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
    sub_23AA9BA80(a9 + *(int *)(v37 + 40), (uint64_t)v24);
    v108 = a1;
    v101 = v36;
    if (a1)
    {
      v38 = objc_msgSend(v36, "url");
      sub_23B1C59CC();

      v39 = sub_23B1C5A08();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v21, 0, 1, v39);
    }
    else
    {
      v40 = sub_23B1C5A08();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v21, 1, 1, v40);
    }
    v41 = sub_23AC085BC();
    v42 = sub_23AC22950((uint64_t)v24, (uint64_t)v21, v41 & 1);
    v44 = v43;
    sub_23AA8A05C((uint64_t)v21, (uint64_t *)&unk_2542E6740);
    sub_23AA9F854((uint64_t)v24);
    v106 = a5;
    Strong = (void *)swift_unknownObjectUnownedLoadStrong();
    v46 = objc_msgSend(Strong, sel_userEnabled);

    v92 = v25;
    if (v46)
    {
      v47 = v44 & 1;
      v48 = (void *)swift_unknownObjectUnownedLoadStrong();
      v49 = objc_msgSend(v48, sel_session);

      v100 = objc_msgSend(v49, sel_newFileProviderProxyWithTimeout_pid_, 0, sub_23AC07F7C(v42, v47));
      swift_unknownObjectRelease();
    }
    else
    {
      v100 = (id)sub_23AC21600((void **)&protocolRef_FPXVendor);
    }
    swift_beginAccess();
    v50 = *(void **)(a10 + 16);
    v51 = (void *)objc_opt_self();
    sub_23AAB5380(v108);
    v99 = v50;
    v52 = objc_msgSend(v51, sel_requestForSelf);
    v53 = (void *)swift_unknownObjectUnownedLoadStrong();
    v54 = objc_msgSend(v53, sel_session);

    v55 = objc_msgSend(v52, sel_nsfpRequestForSession_isSpeculative_, v54, 0);
    v98 = v55;

    swift_unknownObjectRelease();
    v56 = v55;
    v57 = v111;
    objc_msgSend(v56, sel_setDomainVersion_, v111);
    v58 = (_QWORD *)swift_allocObject();
    v58[2] = v106;
    v58[3] = a13;
    v58[4] = v57;
    v58[5] = a10;
    v59 = v112;
    v58[6] = v109;
    v58[7] = v59;
    v109 = (void **)(a10 + 16);
    v60 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v110;
    v58[8] = v107;
    v58[9] = v60;
    v61 = v100;
    v58[10] = v113;
    v58[11] = v61;
    aBlock[4] = sub_23AC258A0;
    aBlock[5] = v58;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_23AC161D8;
    aBlock[3] = &block_descriptor_176;
    v62 = _Block_copy(aBlock);
    v63 = a13;
    v64 = v57;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    v65 = v99;
    v66 = v98;
    v67 = objc_msgSend(v61, sel_createItemBasedOnTemplate_fields_contents_options_request_bounce_completionHandler_, v99, v102, v101, v103, v98, 0, v62);
    v68 = v62;
    a1 = v108;
    _Block_release(v68);

    sub_23AAB538C(a1);
    if (!v67)
    {
      swift_release();
      swift_unknownObjectRelease();

      goto LABEL_20;
    }
    v69 = v109;
    swift_beginAccess();
    v70 = *v69;
    v71 = v67;
    v72 = objc_msgSend(v70, sel_documentSize);
    if (v72)
    {
      v73 = v72;
      v74 = objc_msgSend(v72, sel_longLongValue);

    }
    else
    {
      v74 = 0;
    }
    v75 = v95;
    v76 = v106;
    v77 = *(uint64_t (**)(id *, id, uint64_t, id))(v106 + 120);
    if (!v77)
      goto LABEL_19;
    sub_23AAFA320(*(_QWORD *)(v106 + 120));
    swift_retain();
    v78 = sub_23AFA9F44(a14, 1, a15, a16);
    v79 = *MEMORY[0x24BDD1198];
    v115[0] = v78;
    v80 = v77(v115, v71, v79, v74);
    v82 = v81;

    v83 = v107;
    sub_23AAB7948((uint64_t)v77);
    sub_23AAB7948((uint64_t)v77);
    if (!v80)
    {
LABEL_19:
      v87 = v109;
      swift_beginAccess();
      v88 = objc_msgSend(*v87, sel_itemIdentifier);
      swift_beginAccess();
      v89 = v71;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v114 = *(_QWORD *)(v76 + 184);
      *(_QWORD *)(v76 + 184) = 0x8000000000000000;
      sub_23AD25648((uint64_t)v89, v88, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v76 + 184) = v114;

      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      swift_unknownObjectRelease();

      a1 = v108;
      goto LABEL_20;
    }
    v84 = v104;
    *v75 = v104;
    v85 = v92;
    v94(v75, v105, v92);
    v86 = v84;
    LOBYTE(v84) = sub_23B1C6104();
    v93(v75, v85);
    if ((v84 & 1) != 0)
    {
      swift_beginAccess();
      *(_QWORD *)(v83 + 16) = v80;
      *(_QWORD *)(v83 + 24) = v82;
      swift_release();
      v76 = v106;
      goto LABEL_19;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_23AC18C7C(void *a1, uint64_t a2, char a3, void *a4, void *a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;

  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a6;
  *(_QWORD *)(v19 + 24) = a4;
  *(_QWORD *)(v19 + 32) = a8;
  *(_QWORD *)(v19 + 40) = a9;
  *(_QWORD *)(v19 + 48) = a10;
  *(_QWORD *)(v19 + 56) = a11;
  *(_QWORD *)(v19 + 64) = a12;
  *(_QWORD *)(v19 + 72) = a1;
  *(_QWORD *)(v19 + 80) = a5;
  *(_QWORD *)(v19 + 88) = a13;
  *(_QWORD *)(v19 + 96) = a14;
  *(_QWORD *)(v19 + 104) = a15;
  *(_QWORD *)(v19 + 112) = a2;
  *(_BYTE *)(v19 + 120) = a3;
  swift_retain();
  v20 = a4;
  v21 = a8;
  swift_retain();
  swift_retain();
  swift_retain();
  v22 = a1;
  v23 = a5;
  swift_retain();
  swift_unknownObjectRetain();
  sub_23AA814FC(a7, (uint64_t)"create(_:with:capturedContent:from:reviving:domainVersion:options:nonSyncableAttributes:completion:)", 100, 2, (uint64_t)sub_23AC2594C, v19);
  return swift_release();
}

void sub_23AC18DB4(uint64_t a1, void *a2, void *a3, uint64_t a4, void (*a5)(void), uint64_t a6, uint64_t a7, void *a8, void *a9, void (*a10)(void *, uint64_t, _QWORD, id, void *), uint64_t a11, void *a12, uint64_t a13, char a14)
{
  id v18;
  void *v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  id v22;
  void *v23;
  id v24;

  sub_23AC098D4(a2, a3);
  swift_beginAccess();
  v18 = objc_msgSend(*(id *)(a4 + 16), sel_itemIdentifier);
  swift_beginAccess();
  v19 = (void *)sub_23B1826C8((uint64_t)v18);
  swift_endAccess();

  a5();
  swift_beginAccess();
  v20 = *(void (**)(uint64_t))(a7 + 16);
  v21 = swift_retain();
  v20(v21);
  swift_release();
  sub_23AC09034(a8);
  if (a9)
  {
    v22 = a9;
    v23 = sub_23AC16914(a9, 0, 1, (uint64_t)objc_msgSend(a12, sel_timeoutState));
    a10(0, 0, 0, 0, v23);

  }
  else
  {
    v24 = objc_msgSend(a2, sel_domainVersion);
    a10(a8, a13, a14 & 1, v24, 0);

  }
}

uint64_t sub_23AC18F90(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(uint64_t, _QWORD), uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD);
  _QWORD v25[2];
  void (*v26)(uint64_t, _QWORD);
  _BYTE v27[8];
  uint64_t v28;
  unint64_t v29;
  _BYTE v30[16];
  unint64_t v31;

  v25[1] = a6;
  v26 = a5;
  v25[0] = a3;
  sub_23AA724E8((uint64_t)a1, (uint64_t)v27, qword_2542E48C0);
  v10 = v28;
  v11 = v29;
  v12 = sub_23B1C60EC();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (_QWORD *)((char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(v6 + 160);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BEE5610], v12);
  v17 = v16;
  LOBYTE(v16) = sub_23B1C6104();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) != 0)
  {
    sub_23AA724E8((uint64_t)a1, (uint64_t)v30, qword_2542E48C0);
    if (v31 >> 60 == 11)
    {
      type metadata accessor for StagedContext();
      v19 = swift_allocObject();
    }
    else
    {
      v20 = *(_QWORD *)(v6 + 136);
      v21 = a2 + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00) + 40);
      v22 = *(_QWORD *)(a2 + 8);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v20 + 360);
      sub_23AAA3E2C(v10, v11);
      v19 = v24(a1, v21, v25[0], v22, v23, a4 & 1);
      sub_23AC25990(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAAEE4C);
      swift_retain();
    }
    v26(v19, 0);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AC1925C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;

  v30 = (_QWORD *)a1;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a2 + *(int *)(v10 + 40)) == 1)
  {
    type metadata accessor for StagedContext();
    swift_allocObject();
    a4();
    return swift_release();
  }
  else
  {
    v18 = *(void **)(v5 + 160);
    v28 = *(_QWORD *)(v5 + 168);
    v29 = v18;
    v19 = sub_23B1C60A4();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v16, 1, 1, v19);
    v20 = a3;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = a4;
    *(_QWORD *)(v21 + 24) = a5;
    sub_23AA8EFC8(a2, (uint64_t)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_2542E1E00);
    v22 = (*(unsigned __int8 *)(v11 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v23 = (v12 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = (_QWORD *)swift_allocObject();
    v24[2] = v5;
    v24[3] = a4;
    v24[4] = a5;
    v25 = v30;
    sub_23AA724E8((uint64_t)v30, (uint64_t)(v24 + 5), qword_2542E48C0);
    sub_23AA724E8((uint64_t)v13, (uint64_t)v24 + v22, (uint64_t *)&unk_2542E1E00);
    sub_23AA724E8(v20, (uint64_t)v24 + v23, &qword_2542E5050);
    v26 = (_QWORD *)swift_allocObject();
    v26[2] = sub_23AC24658;
    v26[3] = v21;
    v26[4] = v28;
    swift_retain_n();
    swift_retain();
    sub_23AC25990(v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAAE4B4);
    sub_23AC24890(v20);
    swift_retain();
    swift_retain();
    sub_23AA9086C(v29, (uint64_t)v16, sub_23AC24884, v26, (uint64_t)sub_23AC24874, (uint64_t)v24);
    swift_release();
    swift_release();
    swift_release();
    return sub_23AA8A05C((uint64_t)v16, &qword_2542DD460);
  }
}

void sub_23AC19510(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  uint64_t v8;

  if ((*(_BYTE *)(a1 + 192) & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
    sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
    v7 = (void *)swift_allocError();
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_BYTE *)(v8 + 80) = 8;
    a2((uint64_t)v7, 1);

  }
  else
  {
    sub_23AC18F90(a4, a5, a6, 1, a2, a3);
  }
}

uint64_t sub_23AC195DC(void *a1, int a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  id v23;
  id v24;
  uint64_t v26;
  void *v27;

  v7 = v6;
  HIDWORD(v26) = a2;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v7 + 168);
  v27 = *(void **)(v7 + 160);
  v17 = sub_23B1C60A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 1, 1, v17);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a5;
  *(_QWORD *)(v18 + 24) = a6;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v7;
  *(_QWORD *)(v19 + 24) = a1;
  v20 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v19 + 32) = *(_OWORD *)a3;
  *(_OWORD *)(v19 + 48) = v20;
  v21 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v19 + 64) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v19 + 80) = v21;
  *(_BYTE *)(v19 + 96) = BYTE4(v26);
  *(_QWORD *)(v19 + 104) = a4;
  *(_QWORD *)(v19 + 112) = a5;
  *(_QWORD *)(v19 + 120) = a6;
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = sub_23AC24408;
  v22[3] = v18;
  v22[4] = v16;
  swift_retain_n();
  swift_retain();
  v23 = a1;
  sub_23AC244C0((uint64_t *)a3);
  v24 = a4;
  swift_retain();
  swift_retain();
  sub_23AA9086C(v27, (uint64_t)v15, sub_23AC244B4, v22, (uint64_t)sub_23AC24498, v19);
  swift_release();
  swift_release();
  swift_release();
  return sub_23AA8A05C((uint64_t)v15, &qword_2542DD460);
}

void sub_23AC197A0(uint64_t a1, void *a2, __int128 *a3, char a4, void *a5, uint64_t a6, uint64_t a7)
{
  void *Strong;
  unsigned int v13;
  void *v14;
  id v15;
  id v16;
  double v17;
  double v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  _QWORD *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD aBlock[6];
  _BYTE v48[16];
  __int128 v49;
  __int128 v50;
  _QWORD v51[3];

  v44 = (id)fpfs_current_log();
  v45 = a1;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v13 = objc_msgSend(Strong, sel_userEnabled);

  if (v13)
  {
    v14 = (void *)swift_unknownObjectUnownedLoadStrong();
    v15 = objc_msgSend(v14, sel_session);

    v16 = objc_msgSend((id)objc_opt_self(), sel_defaultStore);
    if ((objc_msgSend(v16, sel_hasUpcallExecutionTimeLimits) & 1) != 0)
      goto LABEL_6;
    if (qword_2569E1290 != -1)
      swift_once();
    v17 = -1.0;
    if (byte_2569E2860 == 1)
    {
LABEL_6:
      objc_msgSend(v16, sel_upcallExecutionTimeLimitBase);
      v17 = v18;
    }

    v19 = objc_msgSend(v15, sel_newFileProviderProxyWithTimeout_pid_, 0, v17);
    swift_unknownObjectRelease();
  }
  else
  {
    v19 = (id)sub_23AC21600((void **)&protocolRef_FPXVendor);
  }
  v20 = (void *)swift_unknownObjectUnownedLoadStrong();
  v21 = objc_msgSend(v20, sel_provider);

  if (!v21)
    goto LABEL_16;
  v22 = a5;
  v46 = a7;
  v23 = objc_msgSend(v21, sel_identifier);

  v24 = (void *)swift_unknownObjectUnownedLoadStrong();
  v25 = objc_msgSend(v24, sel_identifier);

  if (!v25)
  {
    __break(1u);
LABEL_16:
    sub_23B1C704C();
    __break(1u);
    return;
  }
  v26 = a2;
  v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC82E8]), sel_initWithProviderID_domainIdentifier_itemIdentifier_, v23, v25, a2);

  v50 = *a3;
  v49 = *(__int128 *)((char *)a3 + 24);
  sub_23AA724E8((uint64_t)(a3 + 3), (uint64_t)v48, (uint64_t *)&unk_2542E7460);
  sub_23AA9F49C((uint64_t)&v50);
  sub_23AA9F49C((uint64_t)&v49);
  sub_23ABE5118((uint64_t)v48);
  v27 = (void *)sub_23B1C5AA4();
  v28 = (void *)sub_23B1C5AA4();
  sub_23AA724E8((uint64_t)v48, (uint64_t)v51, (uint64_t *)&unk_2542E7460);
  if (v51[1])
  {
    v29 = (void *)sub_23B1C63BC();
    sub_23ABE5088((uint64_t)v48);
  }
  else
  {
    v29 = 0;
  }
  v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC83D8]), sel_initWithContentVersion_metadataVersion_lastEditorDeviceName_, v27, v28, v29);
  sub_23AC2452C((uint64_t)&v49);
  sub_23AC2452C((uint64_t)&v50);

  v31 = objc_msgSend((id)objc_opt_self(), sel_requestForSelf);
  v32 = (void *)swift_unknownObjectUnownedLoadStrong();
  v33 = objc_msgSend(v32, sel_session);

  v34 = objc_msgSend(v31, sel_nsfpRequestForSession_isSpeculative_, v33, 0);
  swift_unknownObjectRelease();
  objc_msgSend(v34, sel_setDomainVersion_, v22);
  v35 = (_QWORD *)swift_allocObject();
  v35[2] = v45;
  v35[3] = v44;
  v35[4] = v22;
  v35[5] = a6;
  v35[6] = v46;
  v35[7] = v26;
  v35[8] = v19;
  aBlock[4] = sub_23AC245A4;
  aBlock[5] = v35;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AAB5F54;
  aBlock[3] = &block_descriptor_101;
  v36 = _Block_copy(aBlock);
  swift_retain();
  v37 = v44;
  v38 = v22;
  swift_retain();
  v39 = v26;
  swift_unknownObjectRetain();
  swift_release();
  v40 = objc_msgSend(v19, sel_deleteItemWithID_baseVersion_options_request_completionHandler_, v41, v30, a4 & 1, v34, v36);
  _Block_release(v36);

  swift_unknownObjectRelease();
}

uint64_t sub_23AC19CB4(void *a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  _QWORD *v17;
  id v18;
  id v19;
  id v20;
  id v21;

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a3;
  v17[3] = a1;
  v17[4] = a5;
  v17[5] = a2;
  v17[6] = a6;
  v17[7] = a7;
  v17[8] = a8;
  v17[9] = a9;
  swift_retain();
  v18 = a1;
  v19 = a5;
  v20 = a2;
  swift_retain();
  v21 = a8;
  swift_unknownObjectRetain();
  sub_23AA814FC(a4, (uint64_t)"delete(_:recursively:baseVersion:domainVersion:completion:)", 59, 2, (uint64_t)sub_23AC24628, (uint64_t)v17);
  return swift_release();
}

void sub_23AC19DA0(uint64_t a1, void *a2, void *a3, void *a4, void (*a5)(id, id, uint64_t), uint64_t a6, void *a7, void *a8)
{
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;

  sub_23AC098D4(a2, a3);
  if (a4)
  {
    _s3__C4CodeOMa_1(0);
    v13 = a4;
    sub_23AA7E38C((unint64_t *)&qword_2542E1FA0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_23B1CCA68);
    if ((sub_23B1C575C() & 1) != 0
      && (v14 = (void *)sub_23B1C5870(),
          v15 = objc_msgSend(v14, sel_fp_userInfoFPItem),
          v14,
          v15))
    {
      v16 = v15;
      sub_23AC09034(v15);

      v17 = v16;
      v18 = objc_msgSend(a2, sel_domainVersion);
      a5(v15, v18, 0);

    }
    else
    {
      v19 = sub_23AC16914(a4, a7, 0, (uint64_t)objc_msgSend(a8, sel_timeoutState));
      a5(v19, 0, 1);

    }
  }
  else
  {
    v20 = objc_msgSend(a2, sel_domainVersion);
    a5(0, v20, 0);

  }
}

uint64_t sub_23AC19F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v19;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v3 + 168);
  v12 = *(void **)(v4 + 160);
  v13 = sub_23B1C60A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 1, 1, v13);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v4;
  v16 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v15 + 40) = v16;
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v15 + 72) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v15 + 80) = a2;
  *(_QWORD *)(v15 + 88) = a3;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = sub_23AA956C8;
  v17[3] = v14;
  v17[4] = v11;
  swift_retain_n();
  swift_retain();
  sub_23AC24384(a1);
  swift_retain();
  swift_retain();
  sub_23AA9086C(v12, (uint64_t)v10, sub_23AC279F4, v17, (uint64_t)sub_23AC24370, v15);
  swift_release();
  swift_release();
  swift_release();
  return sub_23AA8A05C((uint64_t)v10, &qword_2542DD460);
}

uint64_t sub_23AC1A138(uint64_t a1, _QWORD *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  uint64_t ObjectType;

  if (*a2)
  {
    v4 = *(_QWORD *)(a1 + 136);
    MEMORY[0x24BDAC7A8](a1);
    sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC243B0);
    *(_BYTE *)(v4 + OBJC_IVAR____TtC9libfssync13DocumentWharf_deleteBusy) = 0;
    if (*(_QWORD *)(v4 + OBJC_IVAR____TtC9libfssync13DocumentWharf_garbageCollectionSource))
    {
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain();
      MEMORY[0x23B85F548](1, ObjectType);
      swift_unknownObjectRelease();
    }
  }
  return a3(0);
}

uint64_t sub_23AC1A240(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(v2 + 160);
  v8 = *(_QWORD *)(v2 + 168);
  v10 = sub_23B1C60A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v2;
  v12[3] = a1;
  v12[4] = a2;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = sub_23AA698D4;
  v13[3] = v11;
  v13[4] = v8;
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23AA9086C(v9, (uint64_t)v7, sub_23AC242E0, v13, (uint64_t)sub_23AC242D0, (uint64_t)v12);
  swift_release();
  swift_release();
  swift_release();
  return sub_23AA8A05C((uint64_t)v7, &qword_2542DD460);
}

uint64_t sub_23AC1A3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *Strong;
  void *v7;
  unsigned int v8;
  void *v9;
  id v10;
  id v11;
  double v12;
  double v13;
  id v14;
  _QWORD *v15;
  void *v16;
  _QWORD v18[6];

  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  objc_msgSend(Strong, sel_diskImportFinished);

  v7 = (void *)swift_unknownObjectUnownedLoadStrong();
  v8 = objc_msgSend(v7, sel_userEnabled);

  if (v8)
  {
    v9 = (void *)swift_unknownObjectUnownedLoadStrong();
    v10 = objc_msgSend(v9, sel_session);

    v11 = objc_msgSend((id)objc_opt_self(), sel_defaultStore);
    if ((objc_msgSend(v11, sel_hasUpcallExecutionTimeLimits) & 1) != 0)
      goto LABEL_6;
    if (qword_2569E1290 != -1)
      swift_once();
    v12 = -1.0;
    if (byte_2569E2860 == 1)
    {
LABEL_6:
      objc_msgSend(v11, sel_upcallExecutionTimeLimitBase);
      v12 = v13;
    }

    v14 = objc_msgSend(v10, sel_newFileProviderProxyWithTimeout_pid_, 0, v12);
    swift_unknownObjectRelease();
  }
  else
  {
    v14 = (id)sub_23AC21600((void **)&protocolRef_FPXVendor);
  }
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a1;
  v15[5] = v14;
  v18[4] = sub_23AC24320;
  v18[5] = v15;
  v18[0] = MEMORY[0x24BDAC760];
  v18[1] = 1107296256;
  v18[2] = sub_23AC46D44;
  v18[3] = &block_descriptor_72;
  v16 = _Block_copy(v18);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_release();
  objc_msgSend(v14, sel_importDidFinishWithCompletionHandler_, v16);
  _Block_release(v16);
  return swift_unknownObjectRelease();
}

void sub_23AC1A5EC(void *a1, void (*a2)(void *), int a3, int a4, id a5)
{
  id v7;
  void *v8;
  char v9;
  uint64_t v10;
  id v11;

  v7 = objc_msgSend(a5, sel_timeoutState);
  if (!a1)
  {
    v8 = 0;
    goto LABEL_9;
  }
  v8 = v7;
  if (!v7)
  {
LABEL_9:
    a2(v8);

    return;
  }
  if (v7 == (id)2)
  {
    v9 = -3;
LABEL_8:
    sub_23AB7BFCC();
    v8 = (void *)swift_allocError();
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_BYTE *)(v10 + 16) = v9;
    goto LABEL_9;
  }
  if (v7 == (id)1)
  {
    v9 = -2;
    goto LABEL_8;
  }
  type metadata accessor for FPXPCAutomaticErrorProxyTimeout(0);
  v11 = a1;
  sub_23B1C73E8();
  __break(1u);
}

void sub_23AC1A6C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t ObjectType;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  _QWORD *v25;
  uint8_t *v26;
  void (*v27)(void *, uint64_t, _QWORD, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  id v39;
  id v40;
  char v41;
  void (*v42)(void *, uint64_t, _QWORD, _QWORD);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;

  v4 = (_QWORD *)v2;
  v6 = sub_23B1C5E4C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectType = swift_getObjectType();
  v11 = (void *)sub_23AEBB838(ObjectType, a2);
  if (v3)
  {
    v16 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v17 = v3;
    v18 = sub_23B1C5E40();
    v19 = sub_23B1C6AA0();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc();
      v52 = v7;
      v21 = (uint8_t *)v20;
      v22 = swift_slowAlloc();
      v53 = (_QWORD *)v2;
      v23 = (_QWORD *)v22;
      *(_DWORD *)v21 = 138412290;
      v54 = v6;
      swift_getErrorValue();
      v24 = sub_23B0D9CF0(v56);
      v55 = v24;
      v6 = v54;
      sub_23B1C6CBC();
      *v23 = v24;

      _os_log_impl(&dword_23AA66000, v18, v19, "could not decode the previous sync anchor, starting working set enumerator from scratch: %@", v21, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      v25 = v23;
      v4 = v53;
      MEMORY[0x23B8614BC](v25, -1, -1);
      v26 = v21;
      v7 = v52;
      MEMORY[0x23B8614BC](v26, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v27 = (void (*)(void *, uint64_t, _QWORD, _QWORD))v4[2];
    if (v27)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542DE848);
      v28 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SyncState() - 8) + 80);
      v29 = (v28 + 32) & ~v28;
      v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_23B1CA760;
      v31 = (_QWORD *)(v30 + v29);
      v32 = (void *)v4[40];
      v33 = (void *)v4[41];
      *v31 = v32;
      v31[1] = v33;
      swift_storeEnumTagMultiPayload();
      sub_23AAFA320((uint64_t)v27);
      v34 = v33;
      v35 = v32;
      v27(&unk_250BDE938, v30, 0, 0);

      sub_23AAB7948((uint64_t)v27);
      swift_bridgeObjectRelease();
    }
    else
    {

    }
  }
  else
  {
    v54 = v6;
    v13 = *(void **)(v2 + 320);
    v14 = *(void **)(v2 + 328);
    *(_QWORD *)(v2 + 320) = v11;
    *(_QWORD *)(v2 + 328) = v12;

    v15 = sub_23AEBB910(ObjectType, a2);
    *(_BYTE *)(v2 + 192) = v15 & 1;
    v36 = *(void **)(v2 + 320);
    v37 = *(void **)(v2 + 328);
    v38 = qword_2542E1358;
    v39 = v36;
    v40 = v37;
    if (v38 != -1)
      swift_once();
    v41 = sub_23AFEF3C4(v36, v37, (void *)qword_2542EDCE8, unk_2542EDCF0);

    if ((v41 & 1) != 0)
    {
      v42 = (void (*)(void *, uint64_t, _QWORD, _QWORD))v4[2];
      if (v42)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542DE848);
        v43 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SyncState() - 8) + 80);
        v44 = (v43 + 32) & ~v43;
        v45 = swift_allocObject();
        *(_OWORD *)(v45 + 16) = xmmword_23B1CA760;
        v46 = (_QWORD *)(v45 + v44);
        v47 = (void *)v4[40];
        v48 = (void *)v4[41];
        *v46 = v47;
        v46[1] = v48;
        swift_storeEnumTagMultiPayload();
        sub_23AAFA320((uint64_t)v42);
        v49 = v48;
        v50 = v47;
        v42(&unk_250BDE8F8, v45, 0, 0);
        sub_23AAB7948((uint64_t)v42);
        swift_bridgeObjectRelease();
      }
    }
  }
}

uint64_t sub_23AC1AAFC()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;
  id v3;
  void *v4;
  id v5;

  fp_task_tracker_cancel(*(void **)(*(_QWORD *)(v0 + 168) + 16));
  v1 = swift_allocObject();
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v3 = objc_msgSend(Strong, sel_session);

  swift_unknownObjectWeakInit();
  swift_unknownObjectRelease();
  v4 = (void *)swift_unknownObjectUnownedLoadStrong();
  v5 = objc_msgSend(v4, sel_log);

  swift_retain();
  sub_23AA814FC(v5, (uint64_t)"cancel()", 8, 2, (uint64_t)sub_23AC242C4, v1);

  swift_release();
  if (!*(_QWORD *)(v0 + 200))
    return swift_release();
  swift_getObjectType();
  swift_unknownObjectRetain();
  sub_23B1C6BA8();
  swift_release();
  return swift_unknownObjectRelease();
}

void *sub_23AC1AC3C(uint64_t a1)
{
  uint64_t v1;
  void *result;

  v1 = a1 + 16;
  swift_beginAccess();
  result = (void *)MEMORY[0x23B8615C4](v1);
  if (result)
  {
    objc_msgSend(result, sel_cancelAsync);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

intptr_t sub_23AC1AC98()
{
  uint64_t v0;

  return fp_task_tracker_wait(*(_QWORD *)(*(_QWORD *)(v0 + 168) + 16));
}

uint64_t sub_23AC1ACA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v2;
  v5[3] = a1;
  v5[4] = a2;
  swift_retain();
  swift_retain();
  sub_23AA814FC(0, (uint64_t)"eventBarrier(_:)", 16, 2, (uint64_t)sub_23AC24284, (uint64_t)v5);
  return swift_release();
}

uint64_t sub_23AC1AD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *Strong;
  unsigned int v7;
  void *v8;
  id v9;
  id v10;
  double v11;
  double v12;
  id v13;
  _QWORD *v14;
  void *v15;
  _QWORD v17[6];

  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v7 = objc_msgSend(Strong, sel_userEnabled);

  if (v7)
  {
    v8 = (void *)swift_unknownObjectUnownedLoadStrong();
    v9 = objc_msgSend(v8, sel_session);

    v10 = objc_msgSend((id)objc_opt_self(), sel_defaultStore);
    if ((objc_msgSend(v10, sel_hasUpcallExecutionTimeLimits) & 1) != 0)
      goto LABEL_6;
    if (qword_2569E1290 != -1)
      swift_once();
    v11 = -1.0;
    if (byte_2569E2860 == 1)
    {
LABEL_6:
      objc_msgSend(v10, sel_upcallExecutionTimeLimitBase);
      v11 = v12;
    }

    v13 = objc_msgSend(v9, sel_newFileProviderProxyWithTimeout_pid_, 0, v11);
    swift_unknownObjectRelease();
  }
  else
  {
    v13 = (id)sub_23AC21600((void **)&protocolRef_FPXVendor);
  }
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  v17[4] = sub_23AC24294;
  v17[5] = v14;
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1107296256;
  v17[2] = sub_23AC46D44;
  v17[3] = &block_descriptor_51;
  v15 = _Block_copy(v17);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v13, sel_waitForStabilizationWithCompletionHandler_, v15);
  _Block_release(v15);
  return swift_unknownObjectRelease();
}

void sub_23AC1AF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v4)(void *, _QWORD, uint64_t (*)(), uint64_t);
  uint64_t v7;

  v4 = *(void (**)(void *, _QWORD, uint64_t (*)(), uint64_t))(a2 + 16);
  if (v4)
  {
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = a3;
    *(_QWORD *)(v7 + 24) = a4;
    sub_23AAFA320((uint64_t)v4);
    swift_retain();
    v4(&unk_250BDE998, MEMORY[0x24BEE4AF8], sub_23AA698DC, v7);
    sub_23AAB7948((uint64_t)v4);
    swift_release();
  }
}

uint64_t sub_23AC1AFF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void (*v47)(uint64_t, char *, uint64_t);
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v73 = a6;
  v74 = a7;
  v69 = a3;
  v70 = a4;
  v68 = a2;
  v58 = a1;
  v62 = a8;
  v63 = a10;
  v61 = a9;
  v11 = type metadata accessor for ItemMetadata();
  v64 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v64 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v56 = (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23B1C5A08();
  v71 = *(_QWORD *)(v13 - 8);
  v72 = v13;
  v14 = *(_QWORD *)(v71 + 64);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v57 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v54 - v16;
  v55 = (char *)&v54 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  MEMORY[0x24BDAC7A8](v18);
  v54 = (uint64_t)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = a5;
  v65 = *(_QWORD *)(a5 + 168);
  v66 = v23;
  v67 = *(void **)(a5 + 160);
  v24 = sub_23B1C60A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = swift_allocObject();
  v59 = v25;
  v26 = v74;
  *(_QWORD *)(v25 + 16) = v73;
  *(_QWORD *)(v25 + 24) = v26;
  sub_23AA8EFC8(v58, (uint64_t)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_2542E6740);
  v27 = v71;
  v28 = v72;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
  v29(v17, v62, v72);
  sub_23AA9BA80(v61, (uint64_t)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29((char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v63, v28);
  v30 = (*(unsigned __int8 *)(v19 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v31 = (v20 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  v34 = *(unsigned __int8 *)(v27 + 80);
  v35 = (v34 + v33 + 8) & ~v34;
  v36 = (v14 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = (*(unsigned __int8 *)(v64 + 80) + v36 + 8) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
  v38 = (v12 + v34 + v37) & ~v34;
  v39 = swift_allocObject();
  sub_23AA724E8(v54, v39 + v30, (uint64_t *)&unk_2542E6740);
  v40 = (_QWORD *)(v39 + v31);
  v41 = v69;
  *v40 = v68;
  v40[1] = v41;
  v42 = (_QWORD *)(v39 + v32);
  v43 = v74;
  *v42 = v73;
  v42[1] = v43;
  v45 = v70;
  v44 = v71;
  *(_QWORD *)(v39 + v33) = v70;
  v46 = v39 + v35;
  v47 = *(void (**)(uint64_t, char *, uint64_t))(v44 + 32);
  v48 = v72;
  v47(v46, v55, v72);
  *(_QWORD *)(v39 + v36) = v60;
  sub_23AB60C64(v56, v39 + v37);
  v47(v39 + v38, v57, v48);
  v49 = (_QWORD *)swift_allocObject();
  v50 = v59;
  v49[2] = sub_23AC253C8;
  v49[3] = v50;
  v49[4] = v65;
  swift_retain_n();
  swift_bridgeObjectRetain();
  v51 = v45;
  swift_retain();
  swift_retain();
  swift_retain();
  v52 = (uint64_t)v66;
  sub_23AA9086C(v67, (uint64_t)v66, (void (*)())sub_23AC25754, v49, (uint64_t)sub_23AC25654, v39);
  swift_release();
  swift_release();
  swift_release();
  return sub_23AA8A05C(v52, &qword_2542DD460);
}

void sub_23AC1B3AC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t (*)(_QWORD), _QWORD), uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(void *, uint64_t, uint64_t (*)(_QWORD), _QWORD);
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t ObjectType;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  int v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(void *, uint64_t, uint64_t (*)(_QWORD), _QWORD);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE v76[256];
  _OWORD v77[2];
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  _OWORD v81[2];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD v85[64];

  v65 = a7;
  v66 = a8;
  v67 = a4;
  v68 = a5;
  v69 = a3;
  v13 = sub_23B1C5570();
  v64 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23B1C5A08();
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v57 - v23;
  v25 = a1;
  v27 = v26;
  v29 = v28;
  sub_23AA8EFC8(v25, (uint64_t)v18, (uint64_t *)&unk_2542E6740);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v18, 1, v29) == 1)
  {
    sub_23AA8A05C((uint64_t)v18, (uint64_t *)&unk_2542E6740);
    v30 = v67;
    if (a6)
    {
LABEL_3:
      v31 = a6;
LABEL_8:
      v35 = a6;
      v30(v31, 1, nullsub_1, 0);

      return;
    }
LABEL_7:
    v85[0] = 22;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
    sub_23B1C5864();
    v31 = (void *)sub_23B1C5558();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v15, v13);
    goto LABEL_8;
  }
  v63 = v22;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v18, v29);
  if (!v69)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v29);
    v30 = v67;
    if (a6)
      goto LABEL_3;
    goto LABEL_7;
  }
  v64 = v27;
  swift_bridgeObjectRetain();
  v32 = a2;
  sub_23B1C5984();
  v61 = sub_23B1C59D8();
  v33 = *(_QWORD *)(v66 + 136);
  v34 = sub_23B1C59E4();
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v33 + 344))(v77, v34);
  v62 = v29;
  v58 = v24;
  v59 = v77[1];
  v60 = v77[0];
  v36 = v78;
  v37 = v79;
  v38 = v80;
  swift_bridgeObjectRelease();
  v81[0] = v60;
  v81[1] = v59;
  v82 = v36;
  v83 = v37;
  v84 = v38;
  sub_23AAF8E48((uint64_t)v76);
  sub_23AA724E8((uint64_t)v76, (uint64_t)v85, &qword_2542E5050);
  v74 = v32;
  v75 = v69;
  v72 = 58;
  v73 = 0xE100000000000000;
  v70 = 47;
  v71 = 0xE100000000000000;
  sub_23AC24384((uint64_t)v77);
  v55 = sub_23AAA420C();
  v56 = v55;
  v53 = MEMORY[0x24BEE0D00];
  v54 = v55;
  v39 = sub_23B1C6CF8();
  v41 = v40;
  swift_bridgeObjectRelease();
  v42 = (*(uint64_t (**)(_OWORD *, uint64_t, _DWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v33 + 360))(v81, a9, v85, v39, v41, 0);
  swift_bridgeObjectRelease();
  v43 = sub_23AC25760((uint64_t)v77);
  v44 = v68;
  if (*(_QWORD *)&v77[0])
  {
    MEMORY[0x24BDAC7A8](v43);
    v53 = v33;
    LODWORD(v54) = 0;
    v55 = v45;
    v43 = sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC27A04);
    *(_BYTE *)(v33 + OBJC_IVAR____TtC9libfssync13DocumentWharf_deleteBusy) = 0;
    v46 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v67;
    if (*(_QWORD *)(v33 + OBJC_IVAR____TtC9libfssync13DocumentWharf_garbageCollectionSource))
    {
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain();
      MEMORY[0x23B85F548](1, ObjectType);
      v43 = swift_unknownObjectRelease();
    }
  }
  else
  {
    v46 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v67;
  }
  MEMORY[0x24BDAC7A8](v43);
  *(&v57 - 6) = v47;
  *(&v57 - 5) = (uint64_t)v46;
  v53 = v44;
  v54 = a10;
  v55 = v42;
  sub_23B150D14(v42, 0x200000, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_23AC2578C, (uint64_t)(&v57 - 8), (uint64_t)&v57);
  sub_23AC25760((uint64_t)v77);
  swift_release();
  v50 = (uint64_t)v58;
  v51 = v63;
  sub_23AC1B990(v65, (uint64_t)v58, v61 & 1);
  v48 = *(void (**)(char *, uint64_t))(v64 + 8);
  v49 = v62;
  v48(v51, v62);
  v48((char *)v50, v49);
}

void sub_23AC1B990(uint64_t a1, uint64_t a2, char a3)
{
  id v4;
  void *v5;
  unsigned int v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  unsigned int v12;
  id v13;
  id v14;
  void *v15;
  id v16[2];

  v16[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1580]), sel_init);
  v5 = (void *)sub_23B1C5954();
  v16[0] = 0;
  v6 = objc_msgSend(v4, sel_removeItemAtURL_error_, v5, v16);

  if (v6)
  {
    v7 = v16[0];
  }
  else
  {
    v8 = v16[0];
    v9 = (void *)sub_23B1C587C();

    swift_willThrow();
  }
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1580]), sel_init);
  v11 = (void *)sub_23B1C5954();
  v16[0] = 0;
  v12 = objc_msgSend(v10, sel_removeItemAtURL_error_, v11, v16);

  if (!v12)
  {
    v14 = v16[0];
    v15 = (void *)sub_23B1C587C();

    swift_willThrow();
    if ((a3 & 1) == 0)
      return;
    goto LABEL_8;
  }
  v13 = v16[0];
  if ((a3 & 1) != 0)
LABEL_8:
    sub_23B1C59C0();
}

uint64_t sub_23AC1BB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *, _QWORD, uint64_t (*)(), uint64_t), uint64_t a7, char *a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(uint64_t, char *, uint64_t);
  id v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  _QWORD v45[2];
  void (*v46)(void *, _QWORD, uint64_t (*)(), uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;

  v49 = a8;
  v45[1] = a7;
  v46 = a6;
  v13 = sub_23B1C5570();
  v52 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23B1C5A08();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v45 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v51 = (char *)v45 - v24;
  if (!a4)
    goto LABEL_6;
  v25 = *(_QWORD *)(a5 + 136);
  v47 = a3;
  v48 = v23;
  v26 = a5;
  v27 = v22;
  v28 = v21;
  v29 = *(_QWORD *)(a2 + 8);
  v30 = v25 + OBJC_IVAR____TtC9libfssync13DocumentWharf_wharfHandle;
  swift_beginAccess();
  v31 = *(_QWORD *)(v30 + 32);
  v32 = (uint64_t)v20;
  v33 = v48;
  if (v29 == v31)
  {
    v34 = v28;
    v35 = v27;
    v36 = v26;
    v37 = v51;
    sub_23B1C590C();
    v38 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 16);
    v38(v32, v37, v34);
    v38(v33, v49, v34);
    v39 = objc_allocWithZone(MEMORY[0x24BDC82A8]);
    v40 = v50;
    v41 = sub_23AC1FFC0(v32, v33);
    if (!v40)
    {
      v42 = v41;
      v43 = swift_allocObject();
      *(_QWORD *)(v43 + 16) = v36;
      *(_QWORD *)(v43 + 24) = a9;
      swift_retain();
      swift_retain();
      v46(v42, 0, sub_23AC257E4, v43);

      swift_release();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v37, v34);
  }
  else
  {
LABEL_6:
    v53 = 2;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
    sub_23B1C5864();
    sub_23B1C5558();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v15, v13);
    return swift_willThrow();
  }
}

uint64_t sub_23AC1BDC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(a1 + 136);
  swift_retain();
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC27A04);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC9libfssync13DocumentWharf_deleteBusy) = 0;
  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC9libfssync13DocumentWharf_garbageCollectionSource))
    return swift_release();
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain();
  MEMORY[0x23B85F548](1, ObjectType);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_23AC1BE90(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t, void *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v18;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(char *, uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_23B1C59CC();
    v12 = sub_23B1C5A08();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 0, 1, v12);
  }
  else
  {
    v13 = sub_23B1C5A08();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 1, 1, v13);
  }
  if (a3)
  {
    v14 = sub_23B1C63E0();
    a3 = v15;
  }
  else
  {
    v14 = 0;
  }
  swift_retain();
  v16 = a4;
  v11(v10, v14, a3, a4);
  swift_release();

  swift_bridgeObjectRelease();
  return sub_23AA8A05C((uint64_t)v10, (uint64_t *)&unk_2542E6740);
}

void sub_23AC1BFCC(uint64_t a1, void *a2, void *a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  unsigned int (*v27)(_BYTE *, uint64_t, uint64_t);
  void *v28;
  uint64_t v29;
  void (*v30)(_BYTE *, _BYTE *, uint64_t);
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  _BYTE v48[12];
  int v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t);
  uint64_t v58;
  id v59[2];

  v56 = a6;
  v57 = a5;
  v58 = a4;
  v53 = a2;
  v59[1] = *(id *)MEMORY[0x24BDAC8D0];
  v8 = sub_23B1C5570();
  v51 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v50 = &v48[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2930);
  v10 = MEMORY[0x24BDAC7A8](v55);
  v54 = &v48[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)&v48[-v12];
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = &v48[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v48[-v18];
  v20 = sub_23B1C5A08();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = &v48[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v22);
  v26 = &v48[-v25];
  sub_23AA8EFC8(a1, (uint64_t)v19, (uint64_t *)&unk_2542E6740);
  v27 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48);
  if (v27(v19, 1, v20) != 1)
  {
    v30 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 32);
    v30(v26, v19, v20);
    v49 = sub_23B1C59D8();
    v31 = (void *)sub_23B1C5954();
    v59[0] = 0;
    v53 = a3;
    v32 = objc_msgSend(a3, sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_, v31, 0, 5, v59);

    v33 = v59[0];
    if (v32)
    {
      v34 = sub_23B1C6704();
      v35 = v33;

      if (*(_QWORD *)(v34 + 16))
      {
        (*(void (**)(_BYTE *, unint64_t, uint64_t))(v21 + 16))(v17, v34 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)), v20);
        v36 = 0;
      }
      else
      {
        v36 = 1;
      }
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v17, v36, 1, v20);
      swift_bridgeObjectRelease();
      if (v27(v17, 1, v20) != 1)
      {
        v30(v24, v17, v20);
        v47 = (uint64_t)v54;
        (*(void (**)(_QWORD *, _BYTE *, uint64_t))(v21 + 16))(v54, v24, v20);
        swift_storeEnumTagMultiPayload();
        v57(v47);
        sub_23AA8A05C(v47, &qword_2569E2930);
        (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v24, v20);
        if ((v49 & 1) == 0)
          goto LABEL_15;
        goto LABEL_14;
      }
      sub_23AA8A05C((uint64_t)v17, (uint64_t *)&unk_2542E6740);
      LODWORD(v59[0]) = 22;
      sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
      sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
      v43 = v50;
      v44 = v52;
      sub_23B1C5864();
      v42 = (void *)sub_23B1C5558();
      (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v43, v44);
    }
    else
    {
      v41 = v59[0];
      v42 = (void *)sub_23B1C587C();

    }
    swift_willThrow();
    v45 = (uint64_t)v54;
    *v54 = v42;
    swift_storeEnumTagMultiPayload();
    v46 = v42;
    v57(v45);

    sub_23AA8A05C(v45, &qword_2569E2930);
    if ((v49 & 1) == 0)
    {
LABEL_15:
      (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v26, v20);
      v40 = v53;
      goto LABEL_16;
    }
LABEL_14:
    sub_23B1C59C0();
    goto LABEL_15;
  }
  sub_23AA8A05C((uint64_t)v19, (uint64_t *)&unk_2542E6740);
  v28 = v53;
  if (v53)
  {
    v29 = (uint64_t)v53;
  }
  else
  {
    LODWORD(v59[0]) = 22;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
    v37 = v50;
    v38 = v52;
    sub_23B1C5864();
    v29 = sub_23B1C5558();
    (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v37, v38);
  }
  *v13 = v29;
  swift_storeEnumTagMultiPayload();
  v39 = v28;
  v57((uint64_t)v13);
  sub_23AA8A05C((uint64_t)v13, &qword_2569E2930);
  v40 = a3;
LABEL_16:
  sub_23AC1C504(v40);
}

void sub_23AC1C504(void *a1)
{
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = (void *)sub_23B1C5954();
  v6[0] = 0;
  LODWORD(a1) = objc_msgSend(a1, sel_removeItemAtURL_error_, v2, v6);

  if ((_DWORD)a1)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    v5 = (void *)sub_23B1C587C();

    swift_willThrow();
  }
}

uint64_t sub_23AC1C5EC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *Strong;
  id v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  id v21;
  uint64_t v23;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v12 = objc_msgSend(Strong, sel_indexer);

  if (v12)
  {
    v13 = objc_msgSend(v12, sel_needsAuthentication);

  }
  else
  {
    v13 = 0;
  }
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v4;
  *(_BYTE *)(v14 + 24) = v13;
  *(_QWORD *)(v14 + 32) = a2;
  *(_QWORD *)(v14 + 40) = a3;
  v16 = *(void **)(v4 + 160);
  v15 = *(_QWORD *)(v4 + 168);
  v17 = sub_23B1C60A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v10, 1, 1, v17);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = sub_23AC23B68;
  *(_QWORD *)(v18 + 24) = v14;
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v4;
  v19[3] = sub_23AC23B68;
  v19[4] = v14;
  v19[5] = a1;
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = sub_23AC23B78;
  v20[3] = v18;
  v20[4] = v15;
  v21 = a1;
  swift_retain();
  swift_retain();
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  sub_23AA9086C(v16, (uint64_t)v10, (void (*)())sub_23AC23C00, v20, (uint64_t)sub_23AC23BF0, (uint64_t)v19);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return sub_23AA8A05C((uint64_t)v10, &qword_2542DD460);
}

void sub_23AC1C800(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *Strong;
  id v14;
  unsigned int v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  id v24;
  char v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  char **v28;
  void *v29;
  id v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  _QWORD v39[4];
  unsigned __int8 v40;
  uint64_t v41[4];
  char v42;
  _QWORD v43[4];
  char v44;

  v37 = a6;
  v38 = a5;
  v36 = a2;
  sub_23AA724E8(a1, (uint64_t)v39, (uint64_t *)&unk_2542DE890);
  v8 = (void *)v39[0];
  v33 = v39[2];
  v34 = v39[3];
  v35 = v39[1];
  v32 = v40;
  v9 = sub_23B1C5E4C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v14 = objc_msgSend(Strong, sel_indexer);

  if (v14)
  {
    v15 = objc_msgSend(v14, sel_needsAuthentication);

    if (((v15 ^ a4) & 1) == 0)
    {
LABEL_12:
      sub_23AA724E8(a1, (uint64_t)v43, (uint64_t *)&unk_2542DE890);
      if (v44 == 1)
      {
        _s3__C4CodeOMa_1(0);
        v41[0] = -1000;
        v24 = v8;
        sub_23AA7E38C((unint64_t *)&qword_2542E1FA0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_23B1CCA68);
        v25 = sub_23B1C575C();
        sub_23AAB547C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAB54B4);
        v26 = v38;
        v27 = v36;
        if ((v25 & 1) == 0)
        {
LABEL_17:
          v26(a1, v27);
          return;
        }
        v28 = &selRef_setNeedsAuth;
      }
      else
      {
        v28 = &selRef_clearNeedsAuth;
        v26 = v38;
        v27 = v36;
      }
      v29 = (void *)swift_unknownObjectUnownedLoadStrong();
      v30 = objc_msgSend(v29, sel_indexer);

      objc_msgSend(v30, *v28);
      goto LABEL_17;
    }
  }
  else
  {
    if ((a4 & 1) == 0)
      goto LABEL_12;
    v15 = 0;
  }
  v16 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v17 = sub_23B1C5E40();
  v18 = sub_23B1C6AA0();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    *(_DWORD *)v19 = 67109376;
    LODWORD(v43[0]) = a4 & 1;
    sub_23B1C6CBC();
    *(_WORD *)(v19 + 8) = 1024;
    LODWORD(v43[0]) = v15;
    sub_23B1C6CBC();
    _os_log_impl(&dword_23AA66000, v17, v18, "Auth state changed underneath fetchEventStream, from %{BOOL}d to %{BOOL}d. Forcing hasMore to cause retry.", (uint8_t *)v19, 0xEu);
    MEMORY[0x23B8614BC](v19, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_23AA724E8(a1, (uint64_t)v41, (uint64_t *)&unk_2542DE890);
  v20 = v34;
  if (v42)
    v21 = v33;
  else
    v21 = 1;
  v22 = v42 & v32;
  v23 = v35;
  v43[0] = v8;
  v43[1] = v35;
  v43[2] = v21;
  v43[3] = v34;
  v44 = v42 & v32;
  sub_23AAB547C(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAB5450);
  v38((uint64_t)v43, v36);
  sub_23AAB54B4(v8, v23, v21, v20, v22);
}

uint64_t sub_23AC1CB64(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a2;
  v23 = a3;
  v6 = sub_23B1C5BDC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v20 - v11;
  sub_23B1C5BB8();
  v21 = (void *)*MEMORY[0x24BDC8238];
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  v13 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v14 = (v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v15 + v13, v10, v6);
  v16 = (_QWORD *)(v15 + v14);
  v17 = v23;
  *v16 = v22;
  v16[1] = v17;
  *(_QWORD *)(v15 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8)) = a4;
  v18 = a4;
  swift_retain();
  swift_retain();
  sub_23AC0A5F4(v21, 0, (void (*)(uint64_t, id, uint64_t (*)(), uint64_t))sub_23AC23CB0, v15);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
}

void sub_23AC1CCD4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  void *v73;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  id v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  uint64_t v86;
  uint64_t aBlock;
  uint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;

  v82 = a4;
  v83 = a8;
  v80 = a3;
  v81 = a7;
  v84 = a2;
  v85 = a1;
  v11 = sub_23B1C5BDC();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void **)(a5 + 320);
  v15 = *(void **)(a5 + 328);
  v86 = a5;
  v17 = qword_2542E1358;
  v18 = v16;
  v19 = v15;
  if (v17 != -1)
    swift_once();
  v20 = sub_23AFEF3C4(v16, v15, (void *)qword_2542EDCE8, unk_2542EDCF0);

  if ((v20 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a6, v11);
    v21 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v22 = (v13 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
    v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
    v25 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v25 + v21, v14, v11);
    v26 = (_QWORD *)(v25 + v22);
    v27 = v82;
    *v26 = v80;
    v26[1] = v27;
    v28 = (_QWORD *)(v25 + v23);
    v30 = v83;
    v29 = v84;
    *v28 = v81;
    v28[1] = v30;
    *(_QWORD *)(v25 + v24) = v86;
    *(_QWORD *)(v25 + ((v24 + 15) & 0xFFFFFFFFFFFFFFF8)) = v29;
    v91 = sub_23AC2408C;
    v92 = v25;
    aBlock = MEMORY[0x24BDAC760];
    v88 = 1107296256;
    v89 = sub_23AAB5F54;
    v90 = &block_descriptor_36_0;
    v31 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    v32 = v29;
    swift_release();
    objc_msgSend(v85, sel_currentSyncAnchorWithCompletion_, v31);
    _Block_release(v31);
  }
  else
  {
    v33 = v86;
    v34 = *(void **)(v86 + 320);
    v79 = a9;
    if (v34)
    {
      v78 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a6, v11);
      v35 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v36 = (v13 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
      v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8;
      v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF8;
      v39 = (v38 + 23) & 0xFFFFFFFFFFFFFFF8;
      v40 = (v39 + 23) & 0xFFFFFFFFFFFFFFF8;
      v41 = swift_allocObject();
      v42 = v11;
      v43 = v33;
      v44 = v41;
      (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v41 + v35, v14, v42);
      *(_QWORD *)(v44 + v36) = v43;
      v46 = v79;
      v45 = v80;
      *(_QWORD *)(v44 + v37) = v79;
      v47 = (_QWORD *)(v44 + v38);
      v49 = v82;
      v48 = v83;
      *v47 = v45;
      v47[1] = v49;
      v50 = (_QWORD *)(v44 + v39);
      *v50 = v81;
      v50[1] = v48;
      v51 = v84;
      *(_QWORD *)(v44 + v40) = v84;
      v91 = sub_23AC23F00;
      v92 = v44;
      aBlock = MEMORY[0x24BDAC760];
      v88 = 1107296256;
      v89 = sub_23AF24A18;
      v90 = &block_descriptor_30;
      v52 = _Block_copy(&aBlock);
      v53 = v46;
      swift_retain();
      swift_retain();
      swift_retain();
      v54 = v51;
      v55 = v78;
      swift_release();
      objc_msgSend(v85, sel_enumerateItemsFromPage_suggestedPageSize_reply_, v55, 200, v52);
      _Block_release(v52);

    }
    else
    {
      v56 = *(void **)(v86 + 328);
      if (v56)
      {
        v57 = v56;
        v56 = (void *)sub_23B1C5AD4();
        v59 = v58;

      }
      else
      {
        v59 = 0xC000000000000000;
      }
      v78 = (id)sub_23B1C5AA4();
      sub_23AAAE53C((uint64_t)v56, v59);
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a6, v11);
      v60 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v61 = (v13 + v60 + 7) & 0xFFFFFFFFFFFFFFF8;
      v62 = (v61 + 15) & 0xFFFFFFFFFFFFFFF8;
      v63 = (v62 + 15) & 0xFFFFFFFFFFFFFFF8;
      v64 = (v63 + 23) & 0xFFFFFFFFFFFFFFF8;
      v65 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v65 + v60, v14, v11);
      *(_QWORD *)(v65 + v61) = v86;
      v67 = v79;
      v66 = v80;
      *(_QWORD *)(v65 + v62) = v79;
      v68 = (_QWORD *)(v65 + v63);
      v70 = v82;
      v69 = v83;
      *v68 = v66;
      v68[1] = v70;
      v71 = (_QWORD *)(v65 + v64);
      *v71 = v81;
      v71[1] = v69;
      v72 = v84;
      *(_QWORD *)(v65 + ((v64 + 23) & 0xFFFFFFFFFFFFFFF8)) = v84;
      v91 = sub_23AC23D50;
      v92 = v65;
      aBlock = MEMORY[0x24BDAC760];
      v88 = 1107296256;
      v89 = sub_23AF24AFC;
      v90 = &block_descriptor_6;
      v73 = _Block_copy(&aBlock);
      v74 = v67;
      swift_retain();
      swift_retain();
      swift_retain();
      v75 = v72;
      swift_release();
      v76 = v78;
      objc_msgSend(v85, sel_enumerateChangesFromToken_suggestedBatchSize_reply_, v78, 200, v73);
      _Block_release(v73);

    }
  }
}

void sub_23AC1D1E8(void *a1, void *a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, void (*a6)(void **, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  char v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void (*v42)(void **, uint64_t);
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v42 = a6;
  v13 = sub_23B1C5BDC();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B1C5BB8();
  sub_23B1C5B4C();
  v18 = v17;
  v19 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  a4(v19);
  if (a2)
  {
    v20 = *(void **)(a9
                   + OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_timeoutState);
    if (!v20)
    {
      v39 = a2;
      v22 = a2;
LABEL_12:
      v43 = v22;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 1;
      v40 = a2;
      v42(&v43, MEMORY[0x24BEE4AF8]);

      return;
    }
    if (v20 == (void *)1)
    {
      sub_23AB7BFCC();
      v22 = (void *)swift_allocError();
      *(_QWORD *)v21 = 0;
      *(_QWORD *)(v21 + 8) = 0;
      v23 = -2;
LABEL_11:
      *(_BYTE *)(v21 + 16) = v23;
      goto LABEL_12;
    }
    if (v20 == (void *)2)
    {
      sub_23AB7BFCC();
      v22 = (void *)swift_allocError();
      *(_QWORD *)v21 = 0;
      *(_QWORD *)(v21 + 8) = 0;
      v23 = -3;
      goto LABEL_11;
    }
    type metadata accessor for FPXPCAutomaticErrorProxyTimeout(0);
    v43 = v20;
    v41 = a2;
    sub_23B1C73E8();
    __break(1u);
  }
  else
  {
    v24 = *(void **)(a8 + 320);
    v25 = v24;
    v26 = v25;
    v27 = (uint64_t)a1;
    if (!a1)
    {
      v27 = sub_23B1C5AA4();
      v26 = *(void **)(a8 + 320);
    }
    v28 = *(void **)(a8 + 328);
    *(_QWORD *)(a8 + 320) = v24;
    *(_QWORD *)(a8 + 328) = v27;
    v29 = v25;
    v30 = a1;

    v43 = (void *)MEMORY[0x24BEE4AF8];
    v44 = MEMORY[0x24BEE4AF8];
    v45 = 1;
    v46 = v18;
    v47 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542DE848);
    v31 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SyncState() - 8) + 80);
    v32 = (v31 + 32) & ~v31;
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_23B1CA760;
    v34 = (_QWORD *)(v33 + v32);
    v35 = *(void **)(a8 + 320);
    v36 = *(void **)(a8 + 328);
    *v34 = v35;
    v34[1] = v36;
    swift_storeEnumTagMultiPayload();
    v37 = v36;
    v38 = v35;
    v42(&v43, v33);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_23AC1D4AC(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *Strong;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a2;
  v42 = a1;
  v39 = a11;
  v40 = a13;
  v38 = a9;
  v17 = sub_23B1C5BDC();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B1C5BB8();
  sub_23B1C5B4C();
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v43 = *(_QWORD *)(a7 + 160);
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v37 = objc_msgSend(Strong, sel_log);

  v24 = (_QWORD *)swift_allocObject();
  v24[2] = a7;
  v24[3] = a4;
  v25 = v38;
  v24[4] = a8;
  v24[5] = v25;
  v24[6] = a10;
  v24[7] = a5;
  v26 = v40;
  v24[8] = v39;
  v24[9] = a12;
  v28 = v41;
  v27 = v42;
  v24[10] = v26;
  v24[11] = v28;
  v24[12] = v27;
  v24[13] = v22;
  swift_retain();
  v29 = a4;
  v30 = a8;
  swift_retain();
  v31 = a5;
  v32 = v28;
  swift_bridgeObjectRetain();
  swift_retain();
  v33 = v26;
  v34 = v37;
  sub_23AA814FC(v37, (uint64_t)"fetchEventStream(domainVersion:completion:)", 43, 2, (uint64_t)sub_23AC2418C, (uint64_t)v24);

  return swift_release();
}

void sub_23AC1D664(uint64_t a1, void *a2, void *a3, void (*a4)(void), double a5, uint64_t a6, void *a7, void (*a8)(uint64_t *, uint64_t), void *a9, uint64_t a10, void *a11, unint64_t a12)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  void *v51;
  id v52;
  void *v53;
  id v54;
  uint64_t v55;
  void *v56;
  char v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  id v66;
  id v67;
  id v68[2];
  void (*v69)(uint64_t *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  char v80;

  v69 = a8;
  v19 = sub_23B1C5D8C();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23AC098D4(a2, a3);
  a4();
  if (!a7)
  {
    v71 = v20;
    v68[0] = a2;
    v68[1] = a9;
    v39 = a12;
    v40 = *(void **)(a1 + 320);
    *(_QWORD *)(a1 + 320) = a11;
    v41 = a11;

    if (a12 >> 62)
    {
LABEL_33:
      swift_retain_n();
      swift_bridgeObjectRetain();
      v42 = (void *)sub_23B1C7088();
      if (v42)
        goto LABEL_8;
    }
    else
    {
      v42 = *(void **)((a12 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain_n();
      swift_bridgeObjectRetain();
      if (v42)
      {
LABEL_8:
        v72 = a1;
        v73 = v39;
        v74 = v42;
        v75 = v39 & 0xC000000000000001;
        v43 = 4;
        v70 = v19;
        v19 = a1;
        while (1)
        {
          v44 = v43 - 4;
          if (v75)
          {
            v45 = (id)MEMORY[0x23B85F860](v43 - 4, v39);
            v46 = v43 - 3;
            if (__OFADD__(v44, 1))
              goto LABEL_32;
          }
          else
          {
            v45 = *(id *)(v39 + 8 * v43);
            v46 = v43 - 3;
            if (__OFADD__(v44, 1))
            {
LABEL_32:
              __break(1u);
              goto LABEL_33;
            }
          }
          v47 = v45;
          v48 = objc_msgSend(v47, sel_extendedAttributes);
          if (v48)
          {
            v49 = v48;
            a1 = v43;
            v50 = sub_23B1C620C();

            swift_retain();
            v42 = (void *)sub_23AC212B8(v50, v19);
            swift_bridgeObjectRelease();
            swift_release();
            v51 = (void *)sub_23B1C61F4();
            swift_release();
            objc_msgSend(v47, sel_setExtendedAttributes_, v51);

          }
          if (objc_msgSend(v47, sel_isFlattenedPackage))
          {
            v52 = objc_msgSend(v47, sel_filename);
            if (!v52)
            {
              __break(1u);
LABEL_37:
              type metadata accessor for FPXPCAutomaticErrorProxyTimeout(0);
              v76 = (uint64_t)v42;
              sub_23B1C73E8();
              __break(1u);
              return;
            }
            v53 = v52;
            v54 = objc_msgSend(v52, sel_stringByDeletingPathExtension);

            if (!v54)
            {
              sub_23B1C63E0();
              v54 = (id)sub_23B1C63BC();
              swift_bridgeObjectRelease();
            }
            objc_msgSend(v47, sel_setFilename_, v54);

            sub_23B1C5D50();
            v42 = (void *)sub_23B1C5D08();
            (*(void (**)(char *, uint64_t))(v71 + 8))(v22, v70);
            objc_msgSend(v47, sel_setContentType_, v42);

          }
          if ((void *)v46 == v74)
          {
            v39 = v73;
            swift_bridgeObjectRelease();
            a1 = v72;
            goto LABEL_35;
          }
          ++v43;
          v39 = v73;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_35:
    swift_release();
    swift_release();
    v76 = v39;
    v77 = MEMORY[0x24BEE4AF8];
    v78 = 1;
    v79 = a5;
    v80 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542DE848);
    v59 = *(_QWORD *)(type metadata accessor for SyncState() - 8);
    v60 = *(_QWORD *)(v59 + 72);
    v61 = (*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
    v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = xmmword_23B1D2330;
    v63 = (_QWORD *)(v62 + v61);
    v65 = *(void **)(a1 + 320);
    v64 = *(void **)(a1 + 328);
    *v63 = v65;
    v63[1] = v64;
    swift_storeEnumTagMultiPayload();
    v66 = v64;
    swift_bridgeObjectRetain();
    v67 = v65;
    *(_QWORD *)((char *)v63 + v60) = objc_msgSend(v68[0], sel_domainVersion);
    swift_storeEnumTagMultiPayload();
    v69(&v76, v62);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  _s3__C4CodeOMa_1(0);
  v76 = -1002;
  v23 = a7;
  sub_23AA7E38C((unint64_t *)&qword_2542E1FA0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_23B1CCA68);
  if ((sub_23B1C575C() & 1) != 0)
  {
    if (qword_2542E1358 != -1)
      swift_once();
    v24 = (void *)qword_2542EDCE8;
    v25 = (void *)unk_2542EDCF0;
    v26 = *(void **)(a1 + 320);
    v27 = *(void **)(a1 + 328);
    *(_QWORD *)(a1 + 320) = qword_2542EDCE8;
    *(_QWORD *)(a1 + 328) = v25;
    v28 = v24;
    v29 = v25;

    v76 = (uint64_t)a7;
    v77 = 0;
    v78 = 0;
    v79 = 0.0;
    v80 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542DE848);
    v30 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SyncState() - 8) + 80);
    v31 = (v30 + 32) & ~v30;
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_23B1CA760;
    v33 = (_QWORD *)(v32 + v31);
    v34 = *(void **)(a1 + 320);
    v35 = *(void **)(a1 + 328);
    *v33 = v34;
    v33[1] = v35;
    swift_storeEnumTagMultiPayload();
    v36 = a7;
    v37 = v35;
    v38 = v34;
    v69(&v76, v32);
    swift_bridgeObjectRelease();

  }
  else
  {
    v42 = *(void **)(a10
                   + OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_timeoutState);
    if (v42)
    {
      if (v42 == (void *)1)
      {
        sub_23AB7BFCC();
        v56 = (void *)swift_allocError();
        *(_QWORD *)v55 = 0;
        *(_QWORD *)(v55 + 8) = 0;
        v57 = -2;
      }
      else
      {
        if (v42 != (void *)2)
          goto LABEL_37;
        sub_23AB7BFCC();
        v56 = (void *)swift_allocError();
        *(_QWORD *)v55 = 0;
        *(_QWORD *)(v55 + 8) = 0;
        v57 = -3;
      }
      *(_BYTE *)(v55 + 16) = v57;
    }
    else
    {
      v58 = a7;
      v56 = a7;
    }
    v76 = (uint64_t)v56;
    v77 = 0;
    v78 = 0;
    v79 = 0.0;
    v80 = 1;
    v69(&v76, MEMORY[0x24BEE4AF8]);

  }
}

uint64_t sub_23AC1DCEC(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *Strong;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v43 = a4;
  v44 = a2;
  v45 = a3;
  v41 = a14;
  v42 = a1;
  v40 = a12;
  v38 = a10;
  v17 = sub_23B1C5BDC();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B1C5BB8();
  sub_23B1C5B4C();
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v46 = *(_QWORD *)(a8 + 160);
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v39 = objc_msgSend(Strong, sel_log);

  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = a8;
  *(_QWORD *)(v24 + 24) = a5;
  v25 = v38;
  *(_QWORD *)(v24 + 32) = a9;
  *(_QWORD *)(v24 + 40) = v25;
  *(_QWORD *)(v24 + 48) = a11;
  *(_QWORD *)(v24 + 56) = a6;
  v26 = v41;
  *(_QWORD *)(v24 + 64) = v40;
  *(_QWORD *)(v24 + 72) = a13;
  v27 = v42;
  v28 = v43;
  *(_QWORD *)(v24 + 80) = v26;
  *(_QWORD *)(v24 + 88) = v28;
  v29 = v44;
  *(_QWORD *)(v24 + 96) = v27;
  *(_QWORD *)(v24 + 104) = v29;
  *(_BYTE *)(v24 + 112) = v45;
  *(_QWORD *)(v24 + 120) = v22;
  swift_retain();
  v30 = a5;
  v31 = a9;
  swift_retain();
  v32 = a6;
  v33 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v34 = v26;
  v35 = v39;
  sub_23AA814FC(v39, (uint64_t)"fetchEventStream(domainVersion:completion:)", 43, 2, (uint64_t)sub_23AC24238, v24);

  return swift_release();
}

void sub_23AC1DEB4(uint64_t a1, id a2, void *a3, void (*a4)(void), double a5, uint64_t a6, void *a7, void (*a8)(uint64_t *, uint64_t), uint64_t a9, uint64_t a10, void *a11, unint64_t a12, unint64_t a13, char a14)
{
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t i;
  uint64_t v45;
  void *v46;
  char v47;
  void *v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  void *v63;
  id v64;
  void *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  void *v71;
  id v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  void *v80;
  void *v81;
  id v82;
  id v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void (*v87)(uint64_t *, uint64_t);
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  char v99;

  v87 = a8;
  v21 = (_QWORD *)sub_23B1C5D8C();
  v22 = *(v21 - 1);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23AC098D4(a2, a3);
  a4();
  if (!a7)
  {
    v89 = v22;
    v41 = a11;
    v92 = a12;
    if (!a11)
    {
      if (qword_2542E1358 != -1)
        goto LABEL_53;
      goto LABEL_12;
    }
    v42 = *(void **)(a1 + 320);
    v43 = *(void **)(a1 + 328);
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = a11;
    while (1)
    {
      v88 = v21;
      v85 = a2;
      v86 = a9;
      v50 = v41;

      v51 = v92;
      v90 = a1;
      if (v92 >> 62)
      {
LABEL_37:
        swift_retain_n();
        swift_bridgeObjectRetain();
        a1 = sub_23B1C7088();
        v52 = v89;
        if (a1)
        {
LABEL_15:
          v94 = 0;
          v91 = v51 & 0xC000000000000001;
          for (i = 4; ; ++i)
          {
            v53 = i - 4;
            if (v91)
            {
              v54 = (id)MEMORY[0x23B85F860](i - 4, v51);
              v51 = i - 3;
              if (__OFADD__(v53, 1))
                goto LABEL_36;
            }
            else
            {
              v54 = *(id *)(v51 + 8 * i);
              v51 = i - 3;
              if (__OFADD__(v53, 1))
              {
LABEL_36:
                __break(1u);
                goto LABEL_37;
              }
            }
            a2 = v54;
            v55 = objc_msgSend(a2, sel_extendedAttributes);
            if (v55)
            {
              v56 = v55;
              v93 = i;
              v57 = a1;
              v58 = sub_23B1C620C();

              v59 = v90;
              swift_retain();
              v60 = v94;
              sub_23AC212B8(v58, v59);
              v94 = v60;
              swift_bridgeObjectRelease();
              v52 = v89;
              swift_release();
              a1 = v57;
              i = v93;
              v61 = (void *)sub_23B1C61F4();
              swift_release();
              objc_msgSend(a2, sel_setExtendedAttributes_, v61);

            }
            if (objc_msgSend(a2, sel_isFlattenedPackage))
            {
              v62 = objc_msgSend(a2, sel_filename);
              if (!v62)
              {
                __break(1u);
LABEL_55:
                type metadata accessor for FPXPCAutomaticErrorProxyTimeout(0);
                v95 = i;
                sub_23B1C73E8();
                __break(1u);
                return;
              }
              v63 = v62;
              v64 = objc_msgSend(v62, sel_stringByDeletingPathExtension);

              if (!v64)
              {
                sub_23B1C63E0();
                v64 = (id)sub_23B1C63BC();
                swift_bridgeObjectRelease();
              }
              objc_msgSend(a2, sel_setFilename_, v64);

              sub_23B1C5D50();
              v65 = (void *)sub_23B1C5D08();
              (*(void (**)(char *, _QWORD *))(v52 + 8))(v24, v88);
              objc_msgSend(a2, sel_setContentType_, v65);

            }
            if (v51 == a1)
              break;
            v51 = v92;
          }
        }
      }
      else
      {
        a1 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain_n();
        swift_bridgeObjectRetain();
        v52 = v89;
        if (a1)
          goto LABEL_15;
      }
      swift_bridgeObjectRelease();
      a9 = v90;
      swift_release();
      swift_release();
      v21 = v85;
      if (a13 >> 62)
      {
        swift_bridgeObjectRetain();
        v67 = sub_23B1C7088();
        swift_bridgeObjectRelease();
      }
      else
      {
        v67 = *(_QWORD *)((a13 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v68 = MEMORY[0x24BEE4AF8];
      if (!v67)
        goto LABEL_50;
      v95 = MEMORY[0x24BEE4AF8];
      sub_23ADACE00(0, v67 & ~(v67 >> 63), 0);
      if ((v67 & 0x8000000000000000) == 0)
        break;
      __break(1u);
LABEL_53:
      swift_once();
LABEL_12:
      v48 = (void *)qword_2542EDCE8;
      v41 = (void *)unk_2542EDCF0;
      v42 = *(void **)(a1 + 320);
      v43 = *(void **)(a1 + 328);
      *(_QWORD *)(a1 + 320) = qword_2542EDCE8;
      *(_QWORD *)(a1 + 328) = v41;
      v49 = v48;
    }
    v69 = 0;
    v68 = v95;
    do
    {
      if ((a13 & 0xC000000000000001) != 0)
        v70 = (id)MEMORY[0x23B85F860](v69, a13);
      else
        v70 = *(id *)(a13 + 8 * v69 + 32);
      v71 = v70;
      v72 = objc_msgSend(v70, sel_identifier);

      v95 = v68;
      v74 = *(_QWORD *)(v68 + 16);
      v73 = *(_QWORD *)(v68 + 24);
      if (v74 >= v73 >> 1)
      {
        sub_23ADACE00(v73 > 1, v74 + 1, 1);
        v68 = v95;
      }
      ++v69;
      *(_QWORD *)(v68 + 16) = v74 + 1;
      *(_QWORD *)(v68 + 8 * v74 + 32) = v72;
    }
    while (v67 != v69);
    v21 = v85;
    a9 = v90;
LABEL_50:
    v95 = v92;
    v96 = v68;
    v97 = a14 & 1;
    v98 = a5;
    v99 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542DE848);
    v75 = *(_QWORD *)(type metadata accessor for SyncState() - 8);
    v76 = *(_QWORD *)(v75 + 72);
    v77 = (*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
    v78 = swift_allocObject();
    *(_OWORD *)(v78 + 16) = xmmword_23B1D2330;
    v79 = (_QWORD *)(v78 + v77);
    v80 = *(void **)(a9 + 320);
    v81 = *(void **)(a9 + 328);
    *v79 = v80;
    v79[1] = v81;
    swift_storeEnumTagMultiPayload();
    v82 = v81;
    swift_bridgeObjectRetain();
    v83 = v80;
    *(_QWORD *)((char *)v79 + v76) = objc_msgSend(v21, sel_domainVersion);
    swift_storeEnumTagMultiPayload();
    v87(&v95, v78);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  _s3__C4CodeOMa_1(0);
  v95 = -1002;
  v25 = a7;
  sub_23AA7E38C((unint64_t *)&qword_2542E1FA0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_23B1CCA68);
  if ((sub_23B1C575C() & 1) != 0)
  {
    if (qword_2542E1358 != -1)
      swift_once();
    v26 = (void *)qword_2542EDCE8;
    v27 = (void *)unk_2542EDCF0;
    v28 = *(void **)(a1 + 320);
    v29 = *(void **)(a1 + 328);
    *(_QWORD *)(a1 + 320) = qword_2542EDCE8;
    *(_QWORD *)(a1 + 328) = v27;
    v30 = v26;
    v31 = v27;

    v95 = (uint64_t)a7;
    v96 = 0;
    v97 = 0;
    v98 = 0.0;
    v99 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542DE848);
    v32 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SyncState() - 8) + 80);
    v33 = (v32 + 32) & ~v32;
    v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_23B1CA760;
    v35 = (_QWORD *)(v34 + v33);
    v36 = *(void **)(a1 + 320);
    v37 = *(void **)(a1 + 328);
    *v35 = v36;
    v35[1] = v37;
    swift_storeEnumTagMultiPayload();
    v38 = a7;
    v39 = v37;
    v40 = v36;
    v87(&v95, v34);
    swift_bridgeObjectRelease();

  }
  else
  {
    i = *(_QWORD *)(a10
                  + OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_timeoutState);
    if (i)
    {
      if (i == 1)
      {
        sub_23AB7BFCC();
        v46 = (void *)swift_allocError();
        *(_QWORD *)v45 = 0;
        *(_QWORD *)(v45 + 8) = 0;
        v47 = -2;
      }
      else
      {
        if (i != 2)
          goto LABEL_55;
        sub_23AB7BFCC();
        v46 = (void *)swift_allocError();
        *(_QWORD *)v45 = 0;
        *(_QWORD *)(v45 + 8) = 0;
        v47 = -3;
      }
      *(_BYTE *)(v45 + 16) = v47;
    }
    else
    {
      v66 = a7;
      v46 = a7;
    }
    v95 = (uint64_t)v46;
    v96 = 0;
    v97 = 0;
    v98 = 0.0;
    v99 = 1;
    v87(&v95, MEMORY[0x24BEE4AF8]);

  }
}

uint64_t sub_23AC1E6C4(char a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = a1 & 1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(v1 + 160);
  v7 = sub_23B1C60A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v1;
  *(_BYTE *)(v8 + 24) = v2;
  swift_retain();
  sub_23AA9086C(v6, (uint64_t)v5, (void (*)())nullsub_1, 0, (uint64_t)sub_23AC23B04, v8);
  swift_release();
  return sub_23AA8A05C((uint64_t)v5, &qword_2542DD460);
}

void sub_23AC1E7C8(uint64_t a1, char a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  uint64_t v43;
  uint64_t v44;
  id v45;
  double v46;
  double v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (*v52)(uint64_t, uint64_t);
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v4 = a2 & 1;
  v5 = sub_23B1C6020();
  v60 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t *)((char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v6);
  v63 = (uint64_t *)((char *)&v56 - v9);
  v62 = sub_23B1C60E0();
  v59 = *(_QWORD *)(v62 - 8);
  v10 = MEMORY[0x24BDAC7A8](v62);
  v58 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v61 = (char *)&v56 - v12;
  v13 = sub_23B1C60A4();
  v66 = *(_QWORD *)(v13 - 8);
  v67 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v65 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23B1C6B78();
  v64 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_23B1C5E4C();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(a1 + 192) = v4;
  *(_BYTE *)(a1 + 208) = 0;
  if ((a2 & 1) == 0)
  {
    if (*(_QWORD *)(a1 + 200))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_23B1C6BA8();
      swift_unknownObjectRelease();
    }
    *(_QWORD *)(a1 + 200) = 0;
    swift_unknownObjectRelease();
    return;
  }
  v22 = (uint64_t *)(a1 + 184);
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 184) + 16))
    return;
  v57 = v8;
  v23 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  swift_retain();
  v24 = sub_23B1C5E40();
  v25 = sub_23B1C6A88();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    v56 = v5;
    v27 = v26;
    *(_DWORD *)v26 = 134349056;
    v68 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 16);
    sub_23B1C6CBC();
    swift_release();
    _os_log_impl(&dword_23AA66000, v24, v25, "interrupting %{public}ld uploads", v27, 0xCu);
    v28 = v27;
    v5 = v56;
    MEMORY[0x23B8614BC](v28, -1, -1);

  }
  else
  {

    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v29 = *v22;
  v30 = *v22 + 64;
  v31 = 1 << *(_BYTE *)(*v22 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & *(_QWORD *)(*v22 + 64);
  v34 = (unint64_t)(v31 + 63) >> 6;
  swift_bridgeObjectRetain();
  v35 = 0;
  while (1)
  {
    if (v33)
    {
      v36 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v37 = v36 | (v35 << 6);
      goto LABEL_13;
    }
    v38 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v38 >= v34)
      goto LABEL_31;
    v39 = *(_QWORD *)(v30 + 8 * v38);
    ++v35;
    if (!v39)
    {
      v35 = v38 + 1;
      if (v38 + 1 >= v34)
        goto LABEL_31;
      v39 = *(_QWORD *)(v30 + 8 * v35);
      if (!v39)
      {
        v35 = v38 + 2;
        if (v38 + 2 >= v34)
          goto LABEL_31;
        v39 = *(_QWORD *)(v30 + 8 * v35);
        if (!v39)
        {
          v35 = v38 + 3;
          if (v38 + 3 >= v34)
            goto LABEL_31;
          v39 = *(_QWORD *)(v30 + 8 * v35);
          if (!v39)
            break;
        }
      }
    }
LABEL_30:
    v33 = (v39 - 1) & v39;
    v37 = __clz(__rbit64(v39)) + (v35 << 6);
LABEL_13:
    objc_msgSend(*(id *)(*(_QWORD *)(v29 + 56) + 8 * v37), sel_cancel);
  }
  v40 = v38 + 4;
  if (v40 < v34)
  {
    v39 = *(_QWORD *)(v30 + 8 * v40);
    if (!v39)
    {
      while (1)
      {
        v35 = v40 + 1;
        if (__OFADD__(v40, 1))
          break;
        if (v35 >= v34)
          goto LABEL_31;
        v39 = *(_QWORD *)(v30 + 8 * v35);
        ++v40;
        if (v39)
          goto LABEL_30;
      }
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v35 = v40;
    goto LABEL_30;
  }
LABEL_31:
  swift_release();
  sub_23AA9F52C(0, (unint64_t *)&qword_2542E7520);
  v68 = MEMORY[0x24BEE4AF8];
  sub_23AA7E38C((unint64_t *)&qword_2542E1F80, (uint64_t (*)(uint64_t))MEMORY[0x24BEE57C0], MEMORY[0x24BEE57D0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1EF0);
  sub_23AAB5A28((unint64_t *)&qword_2542E1F00, (uint64_t *)&unk_2542E1EF0, MEMORY[0x24BEE12C8]);
  sub_23B1C6DE8();
  v41 = sub_23B1C6B84();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v17, v15);
  ObjectType = swift_getObjectType();
  v43 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  v44 = (uint64_t)v65;
  sub_23ADFA2F4();
  sub_23AA78928(0, v44, (uint64_t)sub_23AC23B34, v43);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v44, v67);
  swift_release();
  v45 = objc_msgSend((id)objc_opt_self(), sel_defaultStore);
  objc_msgSend(v45, sel_upcallExcutionTimeLimitProgressCancellationGracePeriod);
  v47 = v46;

  if ((~*(_QWORD *)&v47 & 0x7FF0000000000000) == 0)
    goto LABEL_38;
  if (v47 <= -9.22337204e18)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v47 < 9.22337204e18)
  {
    v48 = v58;
    sub_23B1C60C8();
    v49 = (uint64_t)v63;
    *v63 = (uint64_t)v47;
    v50 = v60;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v60 + 104))(v49, *MEMORY[0x24BEE5420], v5);
    v51 = v61;
    MEMORY[0x23B85EA14](v48, v49);
    v52 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v52(v49, v5);
    v53 = *(void (**)(char *, uint64_t))(v59 + 8);
    v54 = v62;
    v53(v48, v62);
    sub_23AAB6074(v49);
    v55 = v57;
    sub_23AAB602C(v57);
    MEMORY[0x23B85F530](v51, v49, v55, ObjectType);
    v52((uint64_t)v55, v5);
    v52(v49, v5);
    v53(v51, v54);
    sub_23B1C6BB4();
    *(_QWORD *)(a1 + 200) = v41;
    swift_unknownObjectRelease();
    return;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_23AC1EEC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t v5;
  void *Strong;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;

  v0 = sub_23B1C5E4C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v5 + 184) + 16))
    {
      Strong = (void *)swift_unknownObjectUnownedLoadStrong();
      v7 = objc_msgSend(Strong, sel_session);

      v16 = 0;
      v17 = 0xE000000000000000;
      sub_23B1C6EFC();
      swift_bridgeObjectRelease();
      v16 = 0x207364616F6C7075;
      v17 = 0xEB0000000020666FLL;
      v8 = swift_bridgeObjectRetain();
      v9 = sub_23AEA4A34(v8);
      swift_bridgeObjectRelease();
      type metadata accessor for NSFileProviderItemIdentifier(0);
      MEMORY[0x23B85F02C](v9, v10);
      sub_23B1C64F4();
      swift_release();
      swift_bridgeObjectRelease();
      sub_23B1C64F4();
      v11 = (void *)sub_23B1C63BC();
      swift_bridgeObjectRelease();
      objc_msgSend(v7, sel_terminateWithReason_, v11);
      swift_unknownObjectRelease();

      *(_BYTE *)(v5 + 208) = 1;
      if (!*(_QWORD *)(v5 + 200))
      {
LABEL_5:
        *(_QWORD *)(v5 + 200) = 0;
        swift_release();
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      v12 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      v13 = sub_23B1C5E40();
      v14 = sub_23B1C6A88();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_23AA66000, v13, v14, "all the uploads completed in time", v15, 2u);
        MEMORY[0x23B8614BC](v15, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      if (!*(_QWORD *)(v5 + 200))
        goto LABEL_5;
    }
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_23B1C6BA8();
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  return result;
}

void sub_23AC1F16C()
{
  uint64_t v0;
  id v1;

  swift_unknownObjectUnownedDestroy();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_23AAB7948(*(_QWORD *)(v0 + 216));
  sub_23AC23A6C(*(void **)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
  sub_23AC23ABC(*(id *)(v0 + 280));
  sub_23AC23ACC(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312));
  v1 = *(id *)(v0 + 328);

}

_QWORD *sub_23AC1F1F0()
{
  _QWORD *v0;
  void *v1;

  v0 = sub_23B149430();
  swift_unknownObjectUnownedDestroy();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_23AAB7948(v0[27]);
  sub_23AC23A6C((void *)v0[29], v0[30], v0[31], v0[32], v0[33]);
  sub_23AC23ABC((id)v0[35]);
  sub_23AC23ACC(v0[36], v0[37], v0[38], v0[39]);
  v1 = (void *)v0[41];

  return v0;
}

uint64_t sub_23AC1F27C()
{
  sub_23AC1F1F0();
  return swift_deallocClassInstance();
}

uint64_t sub_23AC1F298()
{
  return swift_initClassMetadata2();
}

id sub_23AC1F344@<X0>(_QWORD *a1@<X8>)
{
  void *v1;

  v1 = (void *)*MEMORY[0x24BDC8230];
  *a1 = *MEMORY[0x24BDC8230];
  return v1;
}

uint64_t sub_23AC1F358(void **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v9;
  uint64_t v10;

  v9 = *a1;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a5;
  *(_QWORD *)(v10 + 24) = a6;
  swift_retain();
  sub_23AC2146C(v9, a3, (uint64_t)sub_23AAB5398, v10);
  return swift_release();
}

uint64_t sub_23AC1F3D0(void **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_23AC20108(*a1, a2, a4, a5, a6, a7, a8);
}

uint64_t sub_23AC1F3EC(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  return sub_23AC0C290(*a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_23AC1F3F4(void **a1, int a2, uint64_t a3, uint64_t a4, void *a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v15;
  id v17;
  id v18;
  _QWORD v20[3];
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v15 = *a1;
  if (a4)
  {
    v17 = a5;
    swift_retain();
    swift_retain();
    v18 = v15;
    sub_23AC21E1C(a4, v8, v18, a2, a3, a5, a6 & 1, a7, a8);
    swift_release();

    return swift_release();
  }
  else
  {
    v20[0] = 0;
    v20[1] = 0;
    v20[2] = 1;
    v21 = 0u;
    v22 = 0u;
    v23 = 0;
    return sub_23AC0CAA8(v15, a2, a3, v20, a5, a6 & 1, a7, a8);
  }
}

void sub_23AC1F518(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  id v4;

  v4 = (id)FPNotSupportedError();
  a3();

}

uint64_t sub_23AC1F558(void **a1, int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v15;
  uint64_t v16;
  _QWORD v18[8];

  v15 = *a1;
  sub_23AA724E8(a4, (uint64_t)v18, &qword_2542DF228);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a8;
  *(_QWORD *)(v16 + 24) = a9;
  swift_retain();
  sub_23AC0E7EC(v15, a2, a3, v18, a5, a6, a7, sub_23AC26414, v16);
  return swift_release();
}

uint64_t sub_23AC1F624(void **a1, int a2, uint64_t a3, uint64_t *a4, uint64_t *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v16;
  uint64_t v17;

  v16 = *a1;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a9;
  *(_QWORD *)(v17 + 24) = a10;
  swift_retain();
  sub_23AC10840(v16, a2, a3, a4, a5, a6, a7, a8, (uint64_t)sub_23AC26414, v17);
  return swift_release();
}

uint64_t sub_23AC1F6E0(void **a1, void (*a2)(), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v16;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = *(void **)(v3 + 160);
  v12 = sub_23B1C60A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v3;
  v13[3] = v10;
  v13[4] = a2;
  v13[5] = a3;
  swift_retain();
  v14 = v10;
  swift_retain();
  sub_23AA9086C(v11, (uint64_t)v9, a2, a3, (uint64_t)sub_23AC26408, (uint64_t)v13);
  swift_release();
  return sub_23AA8A05C((uint64_t)v9, &qword_2542DD460);
}

void sub_23AC1F800(uint64_t a1, _QWORD *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void), uint64_t a10)
{
  sub_23AC208A0(a2, a3, a4, a7, a9, a10);
}

uint64_t sub_23AC1F818(uint64_t a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v17;
  _BYTE v20[72];

  sub_23AA724E8(a5, (uint64_t)v20, &qword_2569E2920);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a9;
  *(_QWORD *)(v17 + 24) = a10;
  swift_retain();
  sub_23AC204B4(a1, a2, a3, a4, (uint64_t)v20, a6, a7, sub_23AC24908, v17, a11, a12);
  return swift_release();
}

uint64_t sub_23AC1F8E8(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _OWORD *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v22[4];

  v17 = *a1;
  v18 = a6[1];
  v22[0] = *a6;
  v22[1] = v18;
  v19 = a6[3];
  v22[2] = a6[2];
  v22[3] = v19;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a11;
  *(_QWORD *)(v20 + 24) = a12;
  swift_retain();
  sub_23AC22BC8(v17, a2, a3, a4, a5, (uint64_t)v22, a7, a10, sub_23AC24908, v20);
  return swift_release();
}

uint64_t sub_23AC1F9B8(void **a1, int a2, _OWORD *a3, void *a4, uint64_t a5, uint64_t a6)
{
  void *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v15[4];

  v10 = *a1;
  v11 = a3[1];
  v15[0] = *a3;
  v15[1] = v11;
  v12 = a3[3];
  v15[2] = a3[2];
  v15[3] = v12;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a5;
  *(_QWORD *)(v13 + 24) = a6;
  swift_retain();
  sub_23AC195DC(v10, a2, (uint64_t)v15, a4, (uint64_t)sub_23AC243D0, v13);
  return swift_release();
}

void sub_23AC1FA5C(uint64_t a1, uint64_t a2, void (*a3)(void *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;

  v4 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_23B1C5474();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8];
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B1C5378();
  sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
  sub_23AA7E38C((unint64_t *)&qword_2569E8150, v6, MEMORY[0x24BDCAEE0]);
  sub_23B1C5864();
  v10 = (void *)sub_23B1C5354();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v5);
  a3(v10);

}

id sub_23AC1FB90(uint64_t a1)
{
  return sub_23ABF7D20(a1, type metadata accessor for DummyEnumeratorObserver);
}

id sub_23AC1FCCC(uint64_t a1)
{
  return sub_23ABF7D20(a1, type metadata accessor for DummyOperationClient);
}

uint64_t type metadata accessor for DummyOperationClient()
{
  return objc_opt_self();
}

uint64_t sub_23AC1FD34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t result;
  double v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = sub_23B1C5BDC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if ((*(_BYTE *)(v1 + 64) & 1) != 0)
    return 0;
  v6 = *(_QWORD *)(v1 + 56);
  sub_23B1C5BD0();
  sub_23B1C5B94();
  v8 = v7;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v10 = v8 * 1000000000.0;
  if ((~COERCE__INT64(v8 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 >= 9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v11 = (uint64_t)v10;
  if (v6 >= (uint64_t)v10)
    return 0;
  v12 = __OFSUB__(v11, v6);
  v13 = v11 - v6;
  if (v12)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v14 = qword_2542EE140;
  if (*(_BYTE *)(v1 + qword_2542EE140 + 8))
    v14 = qword_2542EE138;
  v15 = *(_QWORD *)(v1 + v14);
  v12 = __OFSUB__(v15, v13);
  v16 = v15 - v13;
  if (!v12)
    return v16 >= 1;
LABEL_17:
  __break(1u);
  return result;
}

BOOL sub_23AC1FE9C(_BYTE *a1)
{
  void *v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void *v8;
  uint64_t v9;

  if ((a1[qword_2542EE0C0] & 1) != 0)
    return 0;
  v2 = (void *)swift_retain();
  if (objc_sync_enter(v2))
LABEL_13:
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)a1);
  v3 = sub_23B0E8E38();
  if (objc_sync_exit(a1))
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)a1);
  swift_release();
  if ((v3 & 1) == 0)
    return 0;
  v4 = sub_23B0E9098(1);
  if ((v5 & 1) != 0)
    return 0;
  v6 = v4;
  if ((sub_23AC1FD34() & 1) != 0)
    return 0;
  v9 = 0;
  v8 = (void *)swift_retain();
  sub_23B0DB920(v8, (uint64_t)a1, (uint64_t)&v9);
  if (v9 < v6)
    return 1;
  if (__OFSUB__(v6, v9))
  {
    __break(1u);
    goto LABEL_13;
  }
  return *(_QWORD *)&a1[qword_2542EE188] < v6 - v9;
}

id sub_23AC1FFC0(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  id v11;
  id v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  id v16[2];

  v16[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (void *)sub_23B1C5954();
  v6 = (void *)sub_23B1C5954();
  v16[0] = 0;
  v7 = objc_msgSend(v2, sel_initWithURL_packageURL_error_, v5, v6, v16);

  v8 = v16[0];
  if (v7)
  {
    v9 = sub_23B1C5A08();
    v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v11 = v8;
    v10(a2, v9);
    v10(a1, v9);
  }
  else
  {
    v12 = v16[0];
    sub_23B1C587C();

    swift_willThrow();
    v13 = sub_23B1C5A08();
    v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
    v14(a2, v13);
    v14(a1, v13);
  }
  return v7;
}

uint64_t sub_23AC20108(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  v27 = a4;
  v28 = a5;
  v26 = a2;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v7 + 168);
  v29 = *(void **)(v7 + 160);
  v17 = sub_23B1C60A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 1, 1, v17);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a6;
  *(_QWORD *)(v18 + 24) = a7;
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a2;
  v19[3] = a1;
  v19[4] = v7;
  v19[5] = a3;
  v20 = a3;
  v19[6] = a6;
  v19[7] = a7;
  v21 = v28;
  v19[8] = v27;
  v19[9] = v21;
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = sub_23AAB5418;
  v22[3] = v18;
  v22[4] = v16;
  v23 = v20;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain_n();
  swift_retain();
  v24 = a1;
  swift_retain();
  sub_23AA9086C(v29, (uint64_t)v15, sub_23AC24884, v22, (uint64_t)sub_23AC2754C, (uint64_t)v19);
  swift_release();
  swift_release();
  swift_release();
  return sub_23AA8A05C((uint64_t)v15, &qword_2542DD460);
}

uint64_t sub_23AC202C8(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  id v4;
  void *v5;
  unint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v16;

  v16 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_21;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v4 = (id)MEMORY[0x23B85F860](v3, a1);
LABEL_9:
        v5 = v4;
        v6 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_20;
        v7 = objc_msgSend(v4, sel_itemID);
        v8 = objc_msgSend(v7, sel_identifier);

        v9 = sub_23B1C63E0();
        v11 = v10;
        if (v9 == sub_23B1C63E0() && v11 == v12)
        {

          swift_bridgeObjectRelease_n();
        }
        else
        {
          v14 = sub_23B1C7388();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v14 & 1) != 0)
          {

          }
          else
          {
            sub_23B1C6F98();
            sub_23B1C6FC8();
            sub_23B1C6FD4();
            sub_23B1C6FA4();
          }
        }
        ++v3;
        if (v6 == v2)
          return v16;
      }
      if (v3 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      v2 = sub_23B1C7088();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_23AC204B4(uint64_t a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t a5, void *a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;

  v63 = a8;
  v64 = a7;
  v62 = a5;
  v52 = a1;
  v53 = a2;
  v59 = a11;
  v60 = a3;
  v57 = a4;
  v58 = a9;
  v54 = a10;
  v14 = *(_QWORD *)(a10 - 8);
  v65 = a6;
  v66 = v14;
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v68 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
  v51 = *(_QWORD *)(v16 - 8);
  v17 = *(_QWORD *)(v51 + 64);
  MEMORY[0x24BDAC7A8](v16);
  v49 = (uint64_t)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = v20;
  v21 = (id)fpfs_current_log();
  v55 = v21;
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v21;
  v22[3] = a2;
  v23 = v63;
  v22[4] = v11;
  v22[5] = v23;
  v22[6] = a9;
  sub_23AA724E8((uint64_t)a3, (uint64_t)(v22 + 7), qword_2542E48C0);
  v67 = v11;
  v56 = *(_QWORD *)(v11 + 168);
  v63 = *(void **)(v11 + 160);
  v24 = sub_23B1C60A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v20, 1, 1, v24);
  v25 = swift_allocObject();
  v50 = v25;
  *(_QWORD *)(v25 + 16) = sub_23AC2496C;
  *(_QWORD *)(v25 + 24) = v22;
  sub_23AA8EFC8(v52, (uint64_t)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_2542E1E00);
  v26 = v66;
  v27 = v54;
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v68, v57, v54);
  v28 = (*(unsigned __int8 *)(v51 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
  v29 = (v17 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = (*(unsigned __int8 *)(v26 + 80) + v29 + 72) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  v31 = v30 + v15;
  v32 = (v30 + v15) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v32 + 39) & 0xFFFFFFFFFFFFFFF8;
  v34 = (char *)swift_allocObject();
  v57 = &v34[v32];
  v35 = v59;
  *((_QWORD *)v34 + 2) = v27;
  *((_QWORD *)v34 + 3) = v35;
  *((_QWORD *)v34 + 4) = v67;
  *((_QWORD *)v34 + 5) = sub_23AC2496C;
  *((_QWORD *)v34 + 6) = v22;
  sub_23AA724E8(v49, (uint64_t)&v34[v28], (uint64_t *)&unk_2542E1E00);
  v36 = v62;
  sub_23AA724E8(v62, (uint64_t)&v34[v29], &qword_2569E2920);
  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(&v34[v30], v68, v27);
  v37 = v64;
  v38 = v65;
  v34[v31] = (v64 & 2) != 0;
  *((_QWORD *)v57 + 1) = v53;
  v39 = &v34[(v32 + 23) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v39 = v37;
  v39[8] = (v37 & 0x20) != 0;
  *(_QWORD *)&v34[v33] = v38;
  v40 = v55;
  *(_QWORD *)&v34[(v33 + 15) & 0xFFFFFFFFFFFFFFF8] = v55;
  v41 = (_QWORD *)swift_allocObject();
  v42 = v50;
  v41[2] = sub_23AC249A0;
  v41[3] = v42;
  v41[4] = v56;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  v43 = v40;
  swift_retain();
  v44 = v43;
  sub_23AC25990(v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAAE4B4);
  sub_23AC24CD0(v36);
  v45 = v38;
  swift_retain();
  swift_retain();
  v46 = (uint64_t)v61;
  sub_23AA9086C(v63, (uint64_t)v61, sub_23AC279F4, v41, (uint64_t)sub_23AC24BF4, (uint64_t)v34);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return sub_23AA8A05C(v46, &qword_2542DD460);
}

void sub_23AC208A0(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v34 = a4;
  v35 = a6;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23AA724E8((uint64_t)a1, (uint64_t)&v36, qword_2542E48C0);
  if ((unint64_t)v37 >> 60 == 11)
  {
    if ((a3 & 8) != 0 && *(_BYTE *)(a2 + *(int *)(v11 + 40)) != 1)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0960);
      sub_23AAB5A28(qword_2542DD8D0, (uint64_t *)&unk_2542E0960, (uint64_t)&unk_23B1D40CC);
      v29 = (void *)swift_allocError();
      *(_QWORD *)v30 = 1;
      *(_OWORD *)(v30 + 8) = 0u;
      *(_OWORD *)(v30 + 24) = 0u;
      *(_OWORD *)(v30 + 40) = 0u;
      *(_OWORD *)(v30 + 56) = 0u;
      *(_QWORD *)(v30 + 72) = 0;
      *(_BYTE *)(v30 + 80) = 10;
      ((void (*)(void *, uint64_t))a5)(v29, 1);

    }
    else
    {
      type metadata accessor for StagedContext();
      swift_allocObject();
      a5();
      swift_release();
    }
  }
  else
  {
    v40 = v36;
    v41 = v37;
    v42 = v38;
    v43 = v39;
    v18 = *(void **)(v6 + 160);
    v32 = *(_QWORD *)(v6 + 168);
    v33 = v18;
    v19 = sub_23B1C60A4();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 1, 1, v19);
    v20 = swift_allocObject();
    v21 = v35;
    *(_QWORD *)(v20 + 16) = a5;
    *(_QWORD *)(v20 + 24) = v21;
    sub_23AA8EFC8(a2, (uint64_t)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_2542E1E00);
    v22 = (*(unsigned __int8 *)(v12 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v23 = (v13 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v6;
    *(_QWORD *)(v24 + 24) = a5;
    *(_QWORD *)(v24 + 32) = v21;
    v25 = v41;
    *(_OWORD *)(v24 + 40) = v40;
    *(_OWORD *)(v24 + 56) = v25;
    *(_OWORD *)(v24 + 72) = v42;
    *(_QWORD *)(v24 + 88) = v43;
    sub_23AA724E8((uint64_t)v14, v24 + v22, (uint64_t *)&unk_2542E1E00);
    v26 = v24 + v23;
    v27 = v34;
    sub_23AA724E8(v34, v26, &qword_2542E5050);
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = sub_23AC27A18;
    v28[3] = v20;
    v28[4] = v32;
    sub_23AC25990(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAAE4B4);
    swift_retain_n();
    sub_23AC25990(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAAE4B4);
    swift_retain();
    sub_23AC24890(v27);
    swift_retain();
    swift_retain();
    sub_23AA9086C(v33, (uint64_t)v17, sub_23AC279F8, v28, (uint64_t)sub_23AC25BE0, v24);
    swift_release();
    swift_release();
    swift_release();
    sub_23AC25990(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAAEE4C);
    sub_23AA8A05C((uint64_t)v17, &qword_2542DD460);
  }
}

id sub_23AC20C2C(void *a1, void *a2, uint64_t a3, char a4)
{
  char *v4;
  char *v9;
  id v10;
  id v11;
  void *v12;
  char *v13;
  id v14;
  id v15;
  objc_super v17;

  *(_QWORD *)&v4[OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_timeoutState] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_itemIdentifier] = a1;
  if (a2)
  {
    v9 = v4;
    v10 = a1;
    v11 = a2;
  }
  else
  {
    v12 = (void *)objc_opt_self();
    v13 = v4;
    v14 = a1;
    v11 = objc_msgSend(v12, sel_requestForSelf);
  }
  *(_QWORD *)&v4[OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_requestor] = v11;
  v15 = a2;
  *(double *)&v4[OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_timeout] = sub_23AC07F7C(a3, a4 & 1);

  v17.receiver = v4;
  v17.super_class = (Class)type metadata accessor for FPFileTreeLifetimeExtender();
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t sub_23AC20D14(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    result = 0;
    while (1)
    {
      v2 = __clz(__rbit64(v1));
      if (v2 > 0x3F)
        break;
      v3 = 1 << v2;
      if ((v3 & v1) != 0)
        v4 = ~v3;
      else
        v4 = -1;
      switch(v3)
      {
        case 1:
          result |= 0x10000uLL;
          break;
        case 2:
          result |= 1uLL;
          break;
        case 4:
          break;
        case 32:
          result |= 2uLL;
          break;
        default:
          goto LABEL_13;
      }
      v1 &= v4;
      if (!v1)
        return result;
    }
LABEL_13:
    sub_23B1C64F4();
    sub_23B1C7028();
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

_QWORD *sub_23AC20E30(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = sub_23B1C5E4C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = 0;
  if ((a4 & 1) == 0)
  {
    v13 = 128;
    if (a3 < 128)
      v13 = a3;
    if (v13 <= 1)
      v14 = 1;
    else
      v14 = v13;
    v15 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    swift_bridgeObjectRetain_n();
    v16 = sub_23B1C5E40();
    v17 = sub_23B1C6A88();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v20 = swift_slowAlloc();
      v23 = v20;
      *(_DWORD *)v18 = 136446722;
      v21 = v14;
      swift_bridgeObjectRetain();
      v22 = sub_23AABEC68(a1, a2, &v23);
      v14 = v21;
      sub_23B1C6CBC();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 2048;
      v22 = a3;
      sub_23B1C6CBC();
      *(_WORD *)(v18 + 22) = 2048;
      v22 = v14;
      sub_23B1C6CBC();
      _os_log_impl(&dword_23AA66000, v16, v17, "🔩  provider supports a %{public}s pipeline of %ld, setting limits to %ld", (uint8_t *)v18, 0x20u);
      v19 = v20;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v19, -1, -1);
      MEMORY[0x23B8614BC](v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    type metadata accessor for JobLimit();
    result = (_QWORD *)swift_allocObject();
    result[2] = 0;
    result[3] = v14;
    result[4] = v14;
    result[5] = v14;
  }
  return result;
}

uint64_t sub_23AC21074(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (**v16)(_QWORD, _QWORD);
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  v23 = (unint64_t *)result;
  v24 = 0;
  v4 = 0;
  v7 = *(_QWORD *)(a3 + 64);
  v5 = a3 + 64;
  v6 = v7;
  v8 = 1 << *(_BYTE *)(v5 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v6;
  v25 = v5;
  v26 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_5;
    }
    v18 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v26)
      return sub_23B18FAC8(v23, a2, v24, a3);
    v19 = *(_QWORD *)(v25 + 8 * v18);
    ++v4;
    if (!v19)
    {
      v4 = v18 + 1;
      if (v18 + 1 >= v26)
        return sub_23B18FAC8(v23, a2, v24, a3);
      v19 = *(_QWORD *)(v25 + 8 * v4);
      if (!v19)
      {
        v4 = v18 + 2;
        if (v18 + 2 >= v26)
          return sub_23B18FAC8(v23, a2, v24, a3);
        v19 = *(_QWORD *)(v25 + 8 * v4);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v10 = (v19 - 1) & v19;
    v12 = __clz(__rbit64(v19)) + (v4 << 6);
LABEL_5:
    v13 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(uint64_t (***)(_QWORD, _QWORD))(*(_QWORD *)(a4 + 136)
                                                    + OBJC_IVAR____TtC9libfssync13DocumentWharf_ioContext);
    v17 = sub_23B1C6458() + 32;
    swift_bridgeObjectRetain();
    sub_23AAAE668(v14, v15);
    _Block_copy(v16);
    LODWORD(v17) = v16[2](v16, v17);
    swift_release();
    _Block_release(v16);
    sub_23AAAE53C(v14, v15);
    result = swift_bridgeObjectRelease();
    if ((_DWORD)v17)
    {
      *(unint64_t *)((char *)v23 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
        return sub_23B18FAC8(v23, a2, v24, a3);
      }
    }
  }
  v20 = v18 + 3;
  if (v20 >= v26)
    return sub_23B18FAC8(v23, a2, v24, a3);
  v19 = *(_QWORD *)(v25 + 8 * v20);
  if (v19)
  {
    v4 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v4 >= v26)
      return sub_23B18FAC8(v23, a2, v24, a3);
    v19 = *(_QWORD *)(v25 + 8 * v4);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_23AC212B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  void *v12;
  _QWORD v14[2];

  v3 = v2;
  v14[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    v11 = sub_23AC21074((uint64_t)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1, a2);
    swift_release();
    if (v3)
      swift_willThrow();
    swift_release_n();
  }
  else
  {
    v12 = (void *)swift_slowAlloc();
    bzero(v12, v9);
    swift_retain();
    v11 = sub_23AC21074((uint64_t)v12, v8, a1, a2);
    swift_release();
    MEMORY[0x23B8614BC](v12, -1, -1);
    swift_release_n();
  }
  return v11;
}

uint64_t sub_23AC2146C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  id v19;
  id v20;
  uint64_t v22;

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)(v5 + 160);
  v13 = *(_QWORD *)(v5 + 168);
  v15 = sub_23B1C60A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 1, 1, v15);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v5;
  v17[3] = a1;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = a4;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = sub_23AAB5414;
  v18[3] = v16;
  v18[4] = v13;
  v19 = a2;
  swift_retain();
  swift_retain();
  swift_retain_n();
  swift_retain();
  v20 = a1;
  sub_23AA9086C(v14, (uint64_t)v12, (void (*)())sub_23AC25754, v18, (uint64_t)sub_23AC276E8, (uint64_t)v17);
  swift_release();
  swift_release();
  swift_release();
  return sub_23AA8A05C((uint64_t)v12, &qword_2542DD460);
}

uint64_t sub_23AC21600(void **a1)
{
  void *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v7;

  v1 = *a1;
  type metadata accessor for NSFileProviderError(0);
  v2 = v1;
  sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
  sub_23AA7E38C((unint64_t *)&unk_2542E1E60, (uint64_t (*)(uint64_t))type metadata accessor for NSFileProviderError, (uint64_t)&unk_23B1CC9C0);
  sub_23B1C5864();
  v3 = objc_allocWithZone(MEMORY[0x24BDC83A8]);
  v4 = (void *)sub_23B1C5870();

  v5 = (void *)sub_23B1C63BC();
  objc_msgSend(v3, sel_initWithConnection_protocol_orError_name_requestPid_, 0, v2, v4, v5, 0);

  return swift_dynamicCastObjCProtocolUnconditional();
}

void sub_23AC21738(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  void *Strong;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  unsigned __int8 v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  double v43;
  double v44;
  id v45;
  void *v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  _QWORD *v55;
  void *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  id v65;
  void *v66;
  void *v68;
  _QWORD aBlock[7];

  v17 = (_QWORD *)swift_allocObject();
  v17[2] = a4;
  v17[3] = a5;
  v63 = a6;
  v17[4] = a6;
  v17[5] = a7;
  v17[6] = a8;
  v17[7] = a9;
  v17[8] = a10;
  v17[9] = a11;
  objc_allocWithZone((Class)type metadata accessor for FPFileTreeLifetimeExtender());
  v18 = a2;
  v62 = a4;
  v19 = a4;
  v20 = a7;
  v21 = a8;
  v59 = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  v65 = a9;
  swift_retain();
  v22 = a1;
  v61 = a2;
  v23 = sub_23AC20C2C(v22, a2, 0, 1);
  v68 = v22;

  v60 = v18;
  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v25 = objc_msgSend(Strong, sel_session);

  objc_msgSend(v25, sel_registerLifetimeExtensionForObject_, v23);
  swift_unknownObjectRelease();
  v26 = (void *)swift_unknownObjectUnownedLoadStrong();
  LODWORD(v25) = objc_msgSend(v26, sel_userEnabled);

  if (!(_DWORD)v25)
  {
    v46 = (void *)sub_23AC21600((void **)&protocolRef_FPXEnumerator);
    v47 = swift_allocObject();
    *(_QWORD *)(v47 + 16) = a3;
    *(_QWORD *)(v47 + 24) = v23;
    swift_retain();
    v48 = v23;
    sub_23AC0B280(v46, v48, (uint64_t)sub_23AC275F8, v47, v62, a5, v63, v20, v21, v65, a10, a11);
    swift_release();

    swift_unknownObjectRelease();
    swift_release();
    return;
  }
  v64 = v17;
  v27 = v23;
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC8288]), sel_init);
  v29 = (void *)swift_unknownObjectUnownedLoadStrong();
  v30 = objc_msgSend(v29, sel_provider);

  if (!v30)
    goto LABEL_17;
  v31 = objc_msgSend(v30, sel_identifier);

  v32 = (void *)swift_unknownObjectUnownedLoadStrong();
  v33 = objc_msgSend(v32, sel_identifier);

  if (!v33)
  {
    swift_release();

    swift_release();
    swift_release();
    swift_release();

    __break(1u);
LABEL_17:
    swift_release();

    swift_release();
    swift_release();
    swift_release();

    swift_release();
    sub_23B1C704C();
    __break(1u);
    return;
  }
  v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC82E8]), sel_initWithProviderID_domainIdentifier_itemIdentifier_, v31, v33, v68);

  v66 = v28;
  objc_msgSend(v28, sel_setEnumeratedItemID_, v34);

  v35 = (void *)swift_unknownObjectUnownedLoadStrong();
  v36 = objc_msgSend(v35, sel_userEnabled);

  if ((v36 & 1) != 0)
  {
    v37 = (void *)swift_unknownObjectUnownedLoadStrong();
    v38 = objc_msgSend(v37, sel_session);

    v39 = objc_msgSend((id)objc_opt_self(), sel_defaultStore);
    v40 = v27;
    v41 = v60;
    v42 = v64;
    if ((objc_msgSend(v39, sel_hasUpcallExecutionTimeLimits) & 1) != 0)
      goto LABEL_9;
    if (qword_2569E1290 != -1)
      swift_once();
    v43 = -1.0;
    if (byte_2569E2860 == 1)
    {
LABEL_9:
      objc_msgSend(v39, sel_upcallExecutionTimeLimitBase);
      v43 = v44;
    }

    v45 = objc_msgSend(v38, sel_newFileProviderProxyWithTimeout_pid_, 0, v43);
    swift_unknownObjectRelease();
  }
  else
  {
    v45 = (id)sub_23AC21600((void **)&protocolRef_FPXVendor);
    v40 = v27;
    v41 = v60;
    v42 = v64;
  }
  v49 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DummyEnumeratorObserver()), sel_init);
  v50 = v41;
  if (!v61)
    v50 = objc_msgSend((id)objc_opt_self(), sel_requestForSelf);
  v51 = (void *)swift_unknownObjectUnownedLoadStrong();
  v52 = v41;
  v53 = objc_msgSend(v51, sel_session);

  v54 = objc_msgSend(v50, sel_nsfpRequestForSession_isSpeculative_, v53, 0);
  swift_unknownObjectRelease();
  objc_msgSend(v54, sel_setDomainVersion_, 0);
  v55 = (_QWORD *)swift_allocObject();
  v55[2] = a3;
  v55[3] = v40;
  v55[4] = v68;
  v55[5] = sub_23AC275C0;
  v55[6] = v42;
  aBlock[4] = sub_23AC27604;
  aBlock[5] = v55;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AC45EB4;
  aBlock[3] = &block_descriptor_431;
  v56 = _Block_copy(aBlock);
  v57 = v68;
  swift_retain();
  v58 = v40;
  swift_retain();
  swift_release();
  objc_msgSend(v45, sel_fetchAndStartEnumeratingWithSettings_observer_request_completionHandler_, v66, v49, v54, v56);
  _Block_release(v56);
  swift_release();

  swift_unknownObjectRelease();
}

uint64_t sub_23AC21E1C(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, void *a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];
  __int128 v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD v56[4];
  _OWORD v57[2];
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v10 = v9;
  v51 = a8;
  v52 = a6;
  v48 = a4;
  v50 = a3;
  v49 = a2;
  v47 = sub_23B1C5E4C();
  v46 = *(_QWORD *)(v47 - 8);
  result = MEMORY[0x24BDAC7A8](v47);
  v16 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v40[2] = v10;
    v45 = a9;
    v42 = v56;
    v18 = 8;
    if ((a7 & 1) == 0)
      v18 = 0;
    v44 = v18;
    swift_bridgeObjectRetain();
    v40[1] = a1;
    v19 = (__int128 *)(a1 + 48);
    *(_QWORD *)&v20 = 136315138;
    v41 = v20;
    v40[3] = MEMORY[0x24BEE4AD8] + 8;
    v53 = v16;
    v43 = a5;
    do
    {
      v54 = v17;
      v27 = *v19;
      v57[0] = *(v19 - 1);
      v57[1] = v27;
      v28 = *v19;
      v29 = v19[2];
      v58 = v19[1];
      v59 = v29;
      v56[0] = *(v19 - 1);
      v56[1] = v28;
      v30 = v19[2];
      v56[2] = v58;
      v56[3] = v30;
      sub_23AC244C0((uint64_t *)v57);
      v31 = sub_23AF967C4();
      v33 = v32;
      v34 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      swift_bridgeObjectRetain_n();
      v35 = sub_23B1C5E40();
      v36 = sub_23B1C6A88();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc();
        v38 = swift_slowAlloc();
        v60 = v38;
        *(_DWORD *)v37 = v41;
        swift_bridgeObjectRetain();
        v55 = sub_23AABEC68(v31, v33, &v60);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_23AA66000, v35, v36, "⚔️  Fetching version %s...", v37, 0xCu);
        swift_arrayDestroy();
        v39 = v38;
        a5 = v43;
        MEMORY[0x23B8614BC](v39, -1, -1);
        MEMORY[0x23B8614BC](v37, -1, -1);

        (*(void (**)(char *, uint64_t))(v46 + 8))(v53, v47);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v46 + 8))(v16, v47);
      }
      v21 = (_QWORD *)swift_allocObject();
      v22 = v45;
      v21[2] = v51;
      v21[3] = v22;
      v23 = v50;
      v24 = v49;
      v21[4] = v50;
      v21[5] = v24;
      v21[6] = v31;
      v21[7] = v33;
      v25 = swift_allocObject();
      *(_QWORD *)(v25 + 16) = sub_23AC27020;
      *(_QWORD *)(v25 + 24) = v21;
      swift_retain();
      v26 = v23;
      swift_retain();
      swift_retain();
      sub_23AC0E7EC(v26, v48, a5, v56, v52, 0, v44, sub_23AC26414, v25);
      swift_release();
      swift_release();
      sub_23AAA5CC8((uint64_t *)v57);
      v19 += 4;
      v16 = v53;
      v17 = v54 - 1;
    }
    while (v54 != 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23AC22204(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(uint64_t);
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void *v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  char *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  void (**v48)(uint64_t);
  void (*v49)(uint64_t);
  void *v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  int EnumCaseMultiPayload;
  void *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  int v75;
  id v76;
  id v77;
  char *v78;
  uint64_t v79;
  void (*v80)(uint64_t *);
  char *v81;
  _QWORD *v82;
  id v83;
  void (*v84)(uint64_t);
  char *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[5];
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t aBlock;
  unint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t, void *);
  void *v95;
  void (*v96)(uint64_t, void *);
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v7 = (void *)__swift_instantiateConcreteTypeFromMangledName(&qword_2569E2930);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (void **)((char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v8);
  v12 = (uint64_t *)((char *)&v73 - v11);
  v13 = sub_23B1C5A08();
  v14 = *(_QWORD *)(v13 - 8);
  v87 = v13;
  v88 = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v78 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v73 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v85 = (char *)&v73 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v73 - v22;
  v24 = (void (*)(uint64_t))swift_allocObject();
  v80 = a2;
  *((_QWORD *)v24 + 2) = a2;
  *((_QWORD *)v24 + 3) = a3;
  v84 = v24;
  *((_QWORD *)v24 + 4) = a4;
  v25 = objc_allocWithZone(MEMORY[0x24BE2BE88]);
  v79 = a3;
  swift_retain();
  v74 = a4;
  swift_retain();
  v83 = objc_msgSend(v25, sel_init);
  v86 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1580]), sel_init);
  v26 = (void *)sub_23B1C5954();
  aBlock = 0;
  v27 = objc_msgSend(v26, sel_fp_uniqueTempFolderWithError_, &aBlock);
  v28 = (id)aBlock;
  v81 = v23;
  v82 = v12;
  v77 = v27;
  if (v27
    && (v29 = v27,
        sub_23B1C59CC(),
        v30 = v28,
        v29,
        aBlock = 0,
        v31 = objc_msgSend(v26, sel_fp_uniqueTempFolderWithError_, &aBlock),
        v28 = (id)aBlock,
        v31))
  {
    v32 = v31;
    v76 = v7;
    sub_23B1C59CC();
    v33 = v28;

    aBlock = 0x2E6567616B636170;
    v93 = 0xE800000000000000;
    sub_23B1C63E0();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C5984();
    swift_bridgeObjectRelease();
    v34 = v88;
    v35 = *(void (**)(char *, uint64_t))(v88 + 8);
    v35(v19, v87);
    v36 = (void *)sub_23B1C5954();
    v37 = (void *)sub_23B1C5954();
    aBlock = 0;
    v38 = v86;
    LOBYTE(v32) = objc_msgSend(v86, sel_moveItemAtURL_toURL_error_, v36, v37, &aBlock);

    if ((v32 & 1) != 0)
    {
      v39 = (id)aBlock;

      v40 = (void *)sub_23B1C5954();
      v41 = v81;
      v42 = (void *)sub_23B1C5954();
      v43 = v87;
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v19, v41, v87);
      v44 = (*(unsigned __int8 *)(v34 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
      v45 = v38;
      v46 = (v15 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
      v47 = swift_allocObject();
      *(_QWORD *)(v47 + 16) = v45;
      (*(void (**)(unint64_t, char *, uint64_t))(v34 + 32))(v47 + v44, v19, v43);
      v48 = (void (**)(uint64_t))(v47 + v46);
      v49 = v84;
      *v48 = sub_23AC26B24;
      v48[1] = v49;
      v96 = sub_23AC26BC4;
      v97 = v47;
      aBlock = MEMORY[0x24BDAC760];
      v93 = 1107296256;
      v94 = sub_23AC07CD8;
      v95 = &block_descriptor_313;
      v50 = _Block_copy(&aBlock);
      v51 = v45;
      swift_retain();
      swift_release();
      v52 = v83;
      v53 = objc_msgSend(v83, sel_unarchiveItemAtURL_passphrases_destinationFolderURL_acceptedFormats_completionHandler_, v40, 0, v42, 2, v50);
      _Block_release(v50);

      v35(v85, v43);
      v54 = v43;
LABEL_14:
      v35(v81, v54);
      return swift_release();
    }
    v57 = (id)aBlock;
    v56 = (void *)sub_23B1C587C();

    swift_willThrow();
    v75 = 1;
    v12 = v82;
  }
  else
  {
    v55 = v28;
    v56 = (void *)sub_23B1C587C();

    swift_willThrow();
    v75 = 0;
  }

  *v12 = v56;
  swift_storeEnumTagMultiPayload();
  sub_23AA8EFC8((uint64_t)v12, (uint64_t)v10, &qword_2569E2930);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v54 = v87;
  v76 = v56;
  if (EnumCaseMultiPayload == 1)
  {
    v59 = *v10;
    v60 = v56;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 1;
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v88 + 32))(v78, v10, v87);
    v68 = *(_QWORD *)(v74 + 136);
    v69 = v56;
    v70 = sub_23B1C59E4();
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v68 + 344))(v89, v70);
    v67 = 0;
    v59 = (void *)v89[0];
    v61 = v89[1];
    v62 = v89[2];
    v63 = v89[3];
    v64 = v89[4];
    v65 = v90;
    v66 = v91;
    swift_bridgeObjectRelease();
    v54 = v87;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v78, v87);
  }
  aBlock = (uint64_t)v59;
  v93 = v61;
  v94 = (uint64_t (*)(uint64_t, uint64_t, void *))v62;
  v95 = (void *)v63;
  v96 = (void (*)(uint64_t, void *))v64;
  v97 = v65;
  v98 = v66;
  v99 = v67;
  v80(&aBlock);
  sub_23AC26B0C(v59, v61, v62, v63, v64, v65, v66, v67);

  sub_23AA8A05C((uint64_t)v82, &qword_2569E2930);
  v71 = v88;
  if (v75)
    (*(void (**)(char *, uint64_t))(v88 + 8))(v85, v54);
  if (v77)
  {
    v35 = *(void (**)(char *, uint64_t))(v71 + 8);
    goto LABEL_14;
  }
  return swift_release();
}

uint64_t sub_23AC22950(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  void *v19;
  id v20;
  char v21;
  char v22;
  uint64_t v24;
  uint64_t v25;

  v25 = sub_23B1C5750();
  v6 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23B1C5A08();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23AA8EFC8(a2, (uint64_t)v11, (uint64_t *)&unk_2542E6740);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_23AA8A05C((uint64_t)v11, (uint64_t *)&unk_2542E6740);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    v17 = type metadata accessor for ItemMetadata();
    if (*(_BYTE *)(a1 + *(int *)(v17 + 108)) != 1)
      goto LABEL_7;
    if ((a3 & 1) == 0)
      goto LABEL_7;
    v24 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE860);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23B1CA760;
    v19 = (void *)*MEMORY[0x24BDBCC48];
    *(_QWORD *)(inited + 32) = *MEMORY[0x24BDBCC48];
    v20 = v19;
    sub_23AA7A178(inited);
    swift_setDeallocating();
    type metadata accessor for URLResourceKey(0);
    swift_arrayDestroy();
    sub_23B1C5900();
    swift_bridgeObjectRelease();
    v16 = sub_23B1C5738();
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v25);
    a1 = v24;
    if ((v22 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }
    else
    {
LABEL_7:
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      return *(_QWORD *)(a1 + *(int *)(v17 + 100));
    }
  }
  return v16;
}

uint64_t sub_23AC22BC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, void *a7, uint64_t a8, void *a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;

  v57 = a6;
  v58 = a8;
  v54 = a3;
  v55 = a7;
  v50 = a2;
  v51 = a5;
  v47 = a4;
  v59 = a1;
  v52 = a10;
  v56 = a9;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v13);
  v45 = (uint64_t)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542DD460);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v18;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = nullsub_1;
  *(_QWORD *)(v19 + 24) = 0;
  v48 = v19;
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v19;
  v20[3] = a4;
  v20[4] = v10;
  sub_23AA724E8((uint64_t)a5, (uint64_t)(v20 + 5), qword_2542E48C0);
  v20[12] = v56;
  v20[13] = a10;
  v21 = v10;
  v49 = *(_QWORD *)(v10 + 168);
  v56 = *(void **)(v10 + 160);
  v22 = sub_23B1C60A4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v18, 1, 1, v22);
  v23 = swift_allocObject();
  v46 = v23;
  *(_QWORD *)(v23 + 16) = sub_23AC25CEC;
  *(_QWORD *)(v23 + 24) = v20;
  sub_23AA8EFC8(v50, (uint64_t)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_2542E1E00);
  v24 = (*(unsigned __int8 *)(v14 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v25 = (v15 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  v30 = (_QWORD *)swift_allocObject();
  v30[2] = v21;
  v30[3] = sub_23AC25CEC;
  v31 = v59;
  v30[4] = v20;
  v30[5] = v31;
  sub_23AA724E8(v45, (uint64_t)v30 + v24, (uint64_t *)&unk_2542E1E00);
  *(_QWORD *)((char *)v30 + v25) = v54;
  v32 = v57;
  *(_QWORD *)((char *)v30 + v26) = v58;
  v33 = v48;
  *(_QWORD *)((char *)v30 + v27) = v47;
  v34 = v55;
  *(_QWORD *)((char *)v30 + v28) = v55;
  v35 = (_OWORD *)((char *)v30 + v29);
  v36 = *(_OWORD *)(v32 + 16);
  *v35 = *(_OWORD *)v32;
  v35[1] = v36;
  v37 = *(_OWORD *)(v32 + 48);
  v35[2] = *(_OWORD *)(v32 + 32);
  v35[3] = v37;
  *(_QWORD *)((char *)v30 + ((v29 + 71) & 0xFFFFFFFFFFFFFFF8)) = v33;
  v38 = (_QWORD *)swift_allocObject();
  v39 = v46;
  v38[2] = sub_23AC24908;
  v38[3] = v39;
  v38[4] = v49;
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  sub_23AC25990(v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AAAE4B4);
  v40 = v34;
  swift_retain();
  v41 = v59;
  swift_bridgeObjectRetain();
  sub_23AC244C0((uint64_t *)v32);
  swift_retain();
  swift_retain();
  v42 = (uint64_t)v53;
  sub_23AA9086C(v56, (uint64_t)v53, (void (*)())sub_23AC25F98, v38, (uint64_t)sub_23AC25EF8, (uint64_t)v30);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_23AA8A05C(v42, &qword_2542DD460);
  return swift_release();
}

uint64_t sub_23AC22F3C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t (*)(_QWORD), _QWORD), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(void *, uint64_t, uint64_t (*)(_QWORD), _QWORD);
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  char *v65;
  uint64_t v66;
  id aBlock[9];

  v62 = a3;
  v59 = a2;
  aBlock[7] = *(id *)MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for ItemMetadata();
  v60 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v61 = v9;
  v58 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23B1C5A08();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v65 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v52 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v52 - v17;
  v19 = swift_allocObject();
  v20 = a4;
  *(_QWORD *)(v19 + 16) = a4;
  *(_QWORD *)(v19 + 24) = a5;
  v66 = v19;
  v21 = objc_allocWithZone(MEMORY[0x24BE2BE88]);
  swift_retain();
  v64 = objc_msgSend(v21, sel_init);
  v22 = a1;
  v23 = (void *)sub_23B1C5954();
  aBlock[0] = 0;
  v63 = v23;
  v24 = objc_msgSend(v23, sel_fp_uniqueTempFolderWithError_, aBlock);
  v25 = aBlock[0];
  if (v24)
  {
    v26 = v24;
    sub_23B1C59CC();
    v27 = v25;

    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E5598);
    v28 = *(unsigned __int8 *)(v11 + 80);
    v29 = v18;
    v54 = v28 | 7;
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_23B1CA760;
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v32 = v10;
    v31(v30 + ((v28 + 32) & ~v28), v22, v10);
    v56 = sub_23B1C66F8();
    swift_bridgeObjectRelease();
    v57 = v29;
    v55 = sub_23B1C5954();
    v53 = v16;
    v31((uint64_t)v16, (uint64_t)v29, v10);
    v33 = v58;
    sub_23AA9BA80(v59, v58);
    v31((uint64_t)v65, v22, v10);
    v34 = (v28 + 40) & ~v28;
    v35 = v66;
    v36 = (v34 + v12 + *(unsigned __int8 *)(v60 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
    v37 = v62;
    v38 = (v61 + v28 + v36) & ~v28;
    v39 = (char *)swift_allocObject();
    *((_QWORD *)v39 + 2) = v37;
    *((_QWORD *)v39 + 3) = sub_23AC250F8;
    *((_QWORD *)v39 + 4) = v35;
    v40 = &v39[v34];
    v41 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v42 = v11;
    v41(v40, v53, v32);
    sub_23AB60C64(v33, (uint64_t)&v39[v36]);
    v41(&v39[v38], v65, v32);
    aBlock[4] = sub_23AC2530C;
    aBlock[5] = v39;
    aBlock[0] = (id)MEMORY[0x24BDAC760];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_23AC1BE90;
    aBlock[3] = &block_descriptor_144;
    v43 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    v44 = v64;
    v46 = (void *)v55;
    v45 = (void *)v56;
    v47 = objc_msgSend(v64, sel_archiveItemsWithURLs_compressionFormat_destinationFolderURL_completionHandler_, v56, 3, v55, v43);

    _Block_release(v43);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v57, v32);
  }
  else
  {
    v48 = aBlock[0];
    v49 = (void *)sub_23B1C587C();

    swift_willThrow();
    v50 = v49;
    v20(v49, 1, nullsub_1, 0);

  }
  return swift_release();
}

void sub_23AC23384(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  void *v14;
  unint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  id v33;
  void (*v34)(id, id, void *, uint64_t, unint64_t, uint64_t, unint64_t, void *);
  uint64_t v35;
  id v36;
  id v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  id v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  _QWORD *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  id v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD v59[5];
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v8 = sub_23B1C5E4C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v56 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v60 = 0x696669746E656469;
  *((_QWORD *)&v60 + 1) = 0xEA00000000007265;
  sub_23B1C6E84();
  if (*(_QWORD *)(a1 + 16) && (v11 = sub_23ACD5A68((uint64_t)v59), (v12 & 1) != 0))
  {
    sub_23AAA15AC(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&v60);
  }
  else
  {
    v60 = 0u;
    v61 = 0u;
  }
  sub_23AC0521C((uint64_t)v59);
  if (*((_QWORD *)&v61 + 1))
  {
    type metadata accessor for NSFileProviderItemIdentifier(0);
    v13 = swift_dynamicCast();
    v14 = (void *)v57;
    if (!v13)
      v14 = 0;
    v55 = v14;
  }
  else
  {
    sub_23AA8A05C((uint64_t)&v60, qword_2542E5640);
    v55 = 0;
  }
  *(_QWORD *)&v60 = 0xD000000000000017;
  *((_QWORD *)&v60 + 1) = 0x800000023B1FBD50;
  sub_23B1C6E84();
  if (*(_QWORD *)(a1 + 16) && (v15 = sub_23ACD5A68((uint64_t)v59), (v16 & 1) != 0))
  {
    sub_23AAA15AC(*(_QWORD *)(a1 + 56) + 32 * v15, (uint64_t)&v60);
  }
  else
  {
    v60 = 0u;
    v61 = 0u;
  }
  sub_23AC0521C((uint64_t)v59);
  if (*((_QWORD *)&v61 + 1))
  {
    sub_23AA9F52C(0, (unint64_t *)&unk_2542E1F90);
    v17 = swift_dynamicCast();
    v18 = v57;
    if (!v17)
      v18 = 0;
    v54 = (void *)v18;
  }
  else
  {
    sub_23AA8A05C((uint64_t)&v60, qword_2542E5640);
    v54 = 0;
  }
  *(_QWORD *)&v60 = 0x54746E65746E6F63;
  *((_QWORD *)&v60 + 1) = 0xEB00000000657079;
  sub_23B1C6E84();
  if (*(_QWORD *)(a1 + 16) && (v19 = sub_23ACD5A68((uint64_t)v59), (v20 & 1) != 0))
  {
    sub_23AAA15AC(*(_QWORD *)(a1 + 56) + 32 * v19, (uint64_t)&v60);
  }
  else
  {
    v60 = 0u;
    v61 = 0u;
  }
  sub_23AC0521C((uint64_t)v59);
  if (*((_QWORD *)&v61 + 1))
  {
    v21 = swift_dynamicCast();
    if (v21)
      v22 = v57;
    else
      v22 = 0;
    if (v21)
      v23 = v58;
    else
      v23 = 0;
  }
  else
  {
    sub_23AA8A05C((uint64_t)&v60, qword_2542E5640);
    v22 = 0;
    v23 = 0;
  }
  *(_QWORD *)&v60 = 0xD000000000000011;
  *((_QWORD *)&v60 + 1) = 0x800000023B1FBD70;
  sub_23B1C6E84();
  if (*(_QWORD *)(a1 + 16) && (v24 = sub_23ACD5A68((uint64_t)v59), (v25 & 1) != 0))
  {
    sub_23AAA15AC(*(_QWORD *)(a1 + 56) + 32 * v24, (uint64_t)&v60);
  }
  else
  {
    v60 = 0u;
    v61 = 0u;
  }
  sub_23AC0521C((uint64_t)v59);
  if (*((_QWORD *)&v61 + 1))
  {
    v26 = swift_dynamicCast();
    if (v26)
      v27 = v57;
    else
      v27 = 0;
    v28 = 0xF000000000000000;
    if (v26)
      v28 = v58;
  }
  else
  {
    sub_23AA8A05C((uint64_t)&v60, qword_2542E5640);
    v27 = 0;
    v28 = 0xF000000000000000;
  }
  v53 = v28;
  v57 = 0x6E6F6973726576;
  v58 = 0xE700000000000000;
  sub_23B1C6E84();
  if (*(_QWORD *)(a1 + 16) && (v29 = sub_23ACD5A68((uint64_t)v59), (v30 & 1) != 0))
  {
    sub_23AAA15AC(*(_QWORD *)(a1 + 56) + 32 * v29, (uint64_t)&v60);
  }
  else
  {
    v60 = 0u;
    v61 = 0u;
  }
  sub_23AC0521C((uint64_t)v59);
  if (*((_QWORD *)&v61 + 1))
  {
    v31 = a3;
    sub_23AA9F52C(0, (unint64_t *)&unk_2542E1FD0);
    if (swift_dynamicCast())
      v32 = (void *)v57;
    else
      v32 = 0;
    v33 = v55;
    if (v55 && v32)
    {
      v34 = *(void (**)(id, id, void *, uint64_t, unint64_t, uint64_t, unint64_t, void *))(v31 + OBJC_IVAR____TtC9libfssync20DummyOperationClient_perThumbnailCompletionHandler);
      v35 = v27;
      v36 = v55;
      v37 = v32;
      v38 = v54;
      v39 = v22;
      v40 = v53;
      v34(v36, v37, v54, v39, v23, v35, v53, a2);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))(a4 + 16))(a4);

      sub_23AAA3E18(v35, v40);
      v33 = v38;
      goto LABEL_63;
    }
    v52 = a4;
  }
  else
  {
    v52 = a4;
    sub_23AA8A05C((uint64_t)&v60, qword_2542E5640);
    v32 = 0;
    v33 = v55;
  }
  swift_bridgeObjectRelease();
  v41 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v42 = a2;
  v43 = a2;
  v44 = sub_23B1C5E40();
  v45 = sub_23B1C6AA0();
  if (os_log_type_enabled(v44, v45))
  {
    v51 = v27;
    v46 = (uint8_t *)swift_slowAlloc();
    v47 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v46 = 138412290;
    if (a2)
    {
      v48 = a2;
      v49 = _swift_stdlib_bridgeErrorToNSError();
      v59[0] = v49;
      sub_23B1C6CBC();
    }
    else
    {
      v59[0] = 0;
      sub_23B1C6CBC();
      v49 = 0;
    }
    *v47 = v49;

    _os_log_impl(&dword_23AA66000, v44, v45, "Missing required identifier and version for perThumbnailCompletionHandler: %@", v46, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v47, -1, -1);
    MEMORY[0x23B8614BC](v46, -1, -1);
    v33 = v55;
    v27 = v51;
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v56, v8);
  (*(void (**)(void))(v52 + 16))();

  sub_23AAA3E18(v27, v53);
  v36 = v54;
LABEL_63:

}

void *sub_23AC23A6C(void *result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  if (result)
  {

    sub_23AAA3E18(a2, a3);
    return (void *)sub_23AAA3E18(a4, a5);
  }
  return result;
}

void sub_23AC23ABC(id a1)
{
  if (a1 != (id)1)

}

uint64_t sub_23AC23ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23AC23AE0()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23AC23B04()
{
  uint64_t v0;

  sub_23AC1E7C8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_23AC23B10()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23AC23B34()
{
  return sub_23AC1EEC4();
}

uint64_t sub_23AC23B3C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23AC23B68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23AC1C800(a1, a2, *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), *(void (**)(uint64_t, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_23AC23B78(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_BYTE *, _QWORD);
  _BYTE v4[40];

  v2 = *(uint64_t (**)(_BYTE *, _QWORD))(v1 + 16);
  sub_23AA724E8(a1, (uint64_t)v4, (uint64_t *)&unk_2542DE890);
  return v2(v4, MEMORY[0x24BEE4AF8]);
}

uint64_t sub_23AC23BBC()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_23AC23BF0()
{
  uint64_t v0;

  return sub_23AC1CB64(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_23AC23C00()
{
  uint64_t v0;

  return sub_23B149A0C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_23AC23C0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_23B1C5BDC();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return swift_deallocObject();
}

void sub_23AC23CB0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_23AC1CCD4(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), v4 + v10, *(_QWORD *)(v4 + v11), *(_QWORD *)(v4 + v11 + 8), *(void **)(v4 + ((v11 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23AC23D50(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, void *a6)
{
  uint64_t v6;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v13 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = (*(_QWORD *)(v13 + 64) + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_23AC1DCEC(a1, a2, a3, a4, a5, a6, v6 + v14, *(_QWORD *)(v6 + v15), *(void **)(v6 + v16), *(_QWORD *)(v6 + v17), *(_QWORD *)(v6 + v17 + 8), *(_QWORD *)(v6 + ((v17 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v6 + ((v17 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(void **)(v6 + ((((v17 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t objectdestroy_23Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_23B1C5BDC();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  swift_release();
  swift_release();
  objc_release(*(id *)(v0
                     + ((((((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
  return swift_deallocObject();
}

uint64_t sub_23AC23F00(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v11 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = (*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_23AC1D4AC(a1, a2, a3, a4, a5, v5 + v12, *(_QWORD *)(v5 + v13), *(void **)(v5 + v14), *(_QWORD *)(v5 + v15), *(_QWORD *)(v5 + v15 + 8), *(_QWORD *)(v5 + ((v15 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v5 + ((v15 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(void **)(v5 + ((((v15 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23AC23FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_23B1C5BDC();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((((((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_23AC2408C(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(sub_23B1C5BDC() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_23AC1D1E8(a1, a2, v2 + v6, *(void (**)(uint64_t))(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(void (**)(void **, uint64_t))(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v2 + ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23AC24128()
{
  id *v0;

  swift_release();

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23AC2418C()
{
  uint64_t v0;

  sub_23AC1D664(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void (**)(void))(v0 + 40), *(double *)(v0 + 104), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56), *(void (**)(uint64_t *, uint64_t))(v0 + 64), *(void **)(v0 + 72), *(_QWORD *)(v0 + 80), *(void **)(v0 + 88), *(_QWORD *)(v0 + 96));
}

uint64_t sub_23AC241CC()
{
  id *v0;

  swift_release();

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23AC24238()
{
  uint64_t v0;

  sub_23AC1DEB4(*(_QWORD *)(v0 + 16), *(id *)(v0 + 24), *(void **)(v0 + 32), *(void (**)(void))(v0 + 40), *(double *)(v0 + 120), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56), *(void (**)(uint64_t *, uint64_t))(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(void **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));
}

uint64_t sub_23AC24284()
{
  uint64_t *v0;

  return sub_23AC1AD34(v0[2], v0[3], v0[4]);
}

void sub_23AC24294(uint64_t a1)
{
  uint64_t *v1;

  sub_23AC1AF40(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_23AC242A0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void *sub_23AC242C4()
{
  uint64_t v0;

  return sub_23AC1AC3C(v0);
}

uint64_t sub_23AC242D0()
{
  uint64_t *v0;

  return sub_23AC1A3BC(v0[2], v0[3], v0[4]);
}

void sub_23AC242E0()
{
  uint64_t v0;

  sub_23AD2C738(*(void (**)(void))(v0 + 16));
}

uint64_t sub_23AC242EC()
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void sub_23AC24320(void *a1)
{
  uint64_t v1;

  sub_23AC1A5EC(a1, *(void (**)(void *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(id *)(v1 + 40));
}

uint64_t sub_23AC2432C()
{
  uint64_t v0;
  unint64_t v1;

  swift_release();
  v1 = *(_QWORD *)(v0 + 40);
  if (v1 >> 60 != 15)
    sub_23AAAE53C(*(_QWORD *)(v0 + 32), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC24370()
{
  uint64_t v0;

  return sub_23AC1A138(*(_QWORD *)(v0 + 16), (_QWORD *)(v0 + 24), *(uint64_t (**)(_QWORD))(v0 + 80));
}

uint64_t sub_23AC24384(uint64_t a1)
{
  sub_23AAA3E2C(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_23AC243B0@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_23B1B0BA4(*(_QWORD *)(v1 + 16), *(_DWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_23AC243D0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *);
  _QWORD v6[2];
  char v7;

  v4 = *(uint64_t (**)(_QWORD *))(v3 + 16);
  v6[0] = a1;
  v6[1] = a2;
  v7 = a3 & 1;
  return v4(v6);
}

uint64_t sub_23AC24408(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_23AC24434()
{
  uint64_t v0;

  swift_release();

  sub_23AAAE53C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_23AAAE53C(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

void sub_23AC24498()
{
  uint64_t v0;

  sub_23AC197A0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), (__int128 *)(v0 + 32), *(_BYTE *)(v0 + 96), *(void **)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
}

void sub_23AC244B4()
{
  uint64_t v0;

  sub_23B149804(*(void (**)(void **))(v0 + 16));
}

uint64_t *sub_23AC244C0(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[3];
  v3 = a1[4];
  sub_23AAAE668(*a1, a1[1]);
  swift_bridgeObjectRetain();
  sub_23AAAE668(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23AC2452C(uint64_t a1)
{
  sub_23AAAE53C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_23AC24558()
{
  id *v0;

  swift_release();

  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AC245A4(void *a1, void *a2)
{
  uint64_t v2;

  return sub_23AC19CB4(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(void **)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_23AC245D4()
{
  id *v0;

  swift_release();

  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AC24628()
{
  return sub_23AC27558((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AC19DA0);
}

uint64_t sub_23AC24634()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC24658(uint64_t a1)
{
  uint64_t v1;

  return sub_23B1A1EE0(a1, *(uint64_t (**)(_QWORD, _QWORD))(v1 + 16));
}

uint64_t sub_23AC24660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  id *v8;
  char *v9;
  int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  char *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64) + v3;
  swift_release();
  swift_release();
  v5 = *(_QWORD *)(v0 + 56);
  if (v5 >> 60 != 15 && (v5 & 0xF000000000000000) != 0xB000000000000000)
    sub_23AAAE53C(*(_QWORD *)(v0 + 48), v5);
  v7 = v4 + 7;
  v8 = (id *)(v0 + v3);

  swift_bridgeObjectRelease();
  v9 = (char *)v8 + *(int *)(v1 + 40);
  v10 = (int *)type metadata accessor for ItemMetadata();
  v11 = &v9[v10[7]];
  v12 = sub_23B1C5BDC();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, uint64_t))(v13 + 8);
  v14(v11, v12);
  v14(&v9[v10[8]], v12);
  swift_bridgeObjectRelease();
  v15 = &v9[v10[29]];
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v15, 1, v12))
    v14(v15, v12);
  v16 = v7 & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = (uint64_t *)&v9[v10[33]];
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_23AAAE53C(*v17, v18);
  swift_bridgeObjectRelease();
  v19 = v0 + v16;
  v20 = *(void **)(v0 + v16 + 16);
  if (v20 != (void *)1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v19 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_23AC24874()
{
  return sub_23AC25BEC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD *, char *, char *))sub_23AC19510);
}

void sub_23AC24884()
{
  uint64_t v0;

  sub_23B1497F8(*(void (**)(id *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_23AC24890(uint64_t a1)
{
  sub_23AA88224(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(id *)(a1 + 16), *(void **)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(void **)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192));
  return a1;
}

uint64_t sub_23AC2490C()
{
  uint64_t v0;
  unint64_t v1;

  swift_release();
  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 72);
  if (v1 >> 60 != 15 && (v1 & 0xF000000000000000) != 0xB000000000000000)
    sub_23AAAE53C(*(_QWORD *)(v0 + 64), v1);
  return swift_deallocObject();
}

void sub_23AC2496C(void *a1, int a2, unsigned __int8 a3, void *a4, void *a5)
{
  uint64_t v5;

  sub_23AC1756C(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(void (**)(_QWORD *))(v5 + 40), *(_QWORD *)(v5 + 48), (_QWORD *)(v5 + 56));
}

uint64_t sub_23AC249A0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(v1 + 16))(0, 0, 0, 0, a1);
}

uint64_t sub_23AC249D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  char *v8;
  int *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  char *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = v1;
  v5 = *(_QWORD *)(v1 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v23 = *(_QWORD *)(v3 + 64) + v4 + 7;
  v24 = *(_QWORD *)(v5 + 64);
  swift_release();
  swift_release();
  v7 = (id *)(v0 + v4);

  swift_bridgeObjectRelease();
  v8 = (char *)v7 + *(int *)(v2 + 40);
  v9 = (int *)type metadata accessor for ItemMetadata();
  v10 = &v8[v9[7]];
  v11 = sub_23B1C5BDC();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, uint64_t))(v12 + 8);
  v13(v10, v11);
  v13(&v8[v9[8]], v11);
  swift_bridgeObjectRelease();
  v14 = &v8[v9[29]];
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v14, 1, v11))
    v13(v14, v11);
  v15 = v23 & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = (uint64_t *)&v8[v9[33]];
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_23AAAE53C(*v16, v17);
  swift_bridgeObjectRelease();
  v18 = v0 + v15;
  v19 = *(void **)(v0 + v15);
  if (v19)
  {

    sub_23AAAE53C(*(_QWORD *)(v18 + 8), *(_QWORD *)(v18 + 16));
    swift_bridgeObjectRelease();
    sub_23AAAE53C(*(_QWORD *)(v18 + 32), *(_QWORD *)(v18 + 40));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v20 = (v6 + v15 + 72) & ~v6;
  v21 = (((v20 + v24) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v20, v25);
  swift_release();

  return swift_deallocObject();
}

void sub_23AC24BF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v1 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + v5 + 72) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v7 + *(_QWORD *)(v6 + 64);
  sub_23AC17898(*(_QWORD *)(v0 + 32), *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, id))(v0 + 40), *(_QWORD *)(v0 + 48), (id *)(v0 + v4), v0 + v5, (void *)(v0 + v7), *(unsigned __int8 *)(v0 + v8), *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + v0 + 8), *(void **)(v0 + (((v8 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v0 + (((v8 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(void **)(v0 + (((v8 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v0 + (((((v8 & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)), v1, v2);
}

uint64_t sub_23AC24CD0(uint64_t a1)
{
  sub_23AC24D14(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return a1;
}

void *sub_23AC24D14(void *result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  id v10;

  if (result)
  {
    v10 = result;
    sub_23AAAE668(a2, a3);
    swift_bridgeObjectRetain();
    sub_23AAAE668(a5, a6);
    swift_bridgeObjectRetain();
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23AC24D98()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_23AC24DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(unint64_t, uint64_t);
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v18 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v1 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v20 = v1;
  swift_release();
  swift_release();

  v19 = v4;
  swift_bridgeObjectRelease();
  v7 = v0 + v4 + *(int *)(v2 + 40);
  v8 = (int *)type metadata accessor for ItemMetadata();
  v9 = v7 + v8[7];
  v10 = sub_23B1C5BDC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(unint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v12(v7 + v8[8], v10);
  swift_bridgeObjectRelease();
  v13 = v7 + v8[29];
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = (uint64_t *)(v7 + v8[33]);
  v15 = v14[1];
  if (v15 >> 60 != 15)
    sub_23AAAE53C(*v14, v15);
  v16 = (((((((v18 + v19 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v6 + v16 + 8) & ~v6), v20);
  return swift_deallocObject();
}

void sub_23AC24FA8(void *a1, char a2, void **a3, uint64_t a4)
{
  uint64_t v4;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v8 = a2 & 1;
  v9 = *(_QWORD *)(v4 + 16);
  v10 = *(_QWORD *)(v4 + 24);
  v11 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00) - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = (*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80);
  sub_23AC18398(a1, v8, a3, a4, *(_QWORD *)(v4 + 32), *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, id))(v4 + 40), *(_QWORD *)(v4 + 48), *(void **)(v4 + 56), v4 + v12, *(_QWORD *)(v4 + v13), *(_QWORD *)(v4 + v14), *(_QWORD *)(v4 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v4 + ((((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), v4 + ((v15 + ((((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v15), v9, v10);
}

void sub_23AC25090(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_23AC17060(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(void (**)(void *, uint64_t, uint64_t (*)(_QWORD), _QWORD))(v4 + 32), *(_QWORD *)(v4 + 40));
}

uint64_t sub_23AC250AC@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC257EC);
  if (!v1)
    *a1 = result;
  return result;
}

void sub_23AC250F8(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v8)(void *, uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v8 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v4 + 16);
  v9 = a2 & 1;
  sub_23AAB5380(a1);
  v8(a1, v9, a3, a4);
  sub_23AAB538C(a1);
}

uint64_t sub_23AC25158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);

  v1 = sub_23B1C5A08();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for ItemMetadata();
  v7 = *((_QWORD *)v6 - 1);
  v8 = (v4 + v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v18 = *(_QWORD *)(v7 + 64);
  swift_release();
  swift_release();
  v20 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v20(v0 + v4, v1);
  v19 = v8;
  v9 = v0 + v8;
  v10 = v9 + v6[7];
  v11 = sub_23B1C5BDC();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);
  v13(v9 + v6[8], v11);
  swift_bridgeObjectRelease();
  v14 = v9 + v6[29];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v11))
    v13(v14, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = (uint64_t *)(v9 + v6[33]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_23AAAE53C(*v15, v16);
  swift_bridgeObjectRelease();
  v20(v0 + ((v18 + v3 + v19) & ~v3), v1);
  return swift_deallocObject();
}

uint64_t sub_23AC2530C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v9 = *(_QWORD *)(sub_23B1C5A08() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + 40) & ~v10;
  v12 = *(_QWORD *)(v9 + 64);
  v13 = *(_QWORD *)(type metadata accessor for ItemMetadata() - 8);
  v14 = (v11 + v12 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  return sub_23AC1AFF4(a1, a2, a3, a4, v4[2], v4[3], v4[4], (uint64_t)v4 + v11, (uint64_t)v4 + v14, (uint64_t)v4 + ((*(_QWORD *)(v13 + 64) + v10 + v14) & ~v10));
}

uint64_t sub_23AC253C8(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t (*)(), _QWORD))(v1 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), nullsub_1, 0);
}

uint64_t sub_23AC25400()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(unint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(unint64_t, uint64_t);
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (((((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v4 = sub_23B1C5A08();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + v3 + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v22 = *(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (int *)type metadata accessor for ItemMetadata();
  v9 = *((_QWORD *)v8 - 1);
  v20 = (*(unsigned __int8 *)(v9 + 80) + v7 + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v21 = *(_QWORD *)(v9 + 64);
  v10 = v0 + v2;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v10, v4);
  swift_bridgeObjectRelease();
  swift_release();

  v11 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v11(v0 + v6, v4);
  swift_release();
  v12 = v0 + v20 + v8[7];
  v13 = sub_23B1C5BDC();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(unint64_t, uint64_t))(v14 + 8);
  v15(v12, v13);
  v15(v0 + v20 + v8[8], v13);
  swift_bridgeObjectRelease();
  v16 = v0 + v20 + v8[29];
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v13))
    v15(v16, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = (uint64_t *)(v0 + v20 + v8[33]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_23AAAE53C(*v17, v18);
  swift_bridgeObjectRelease();
  v11(v0 + ((v21 + v22 + v20) & ~v22), v4);
  return swift_deallocObject();
}

void sub_23AC25654()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(sub_23B1C5A08() - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + v5 + 8) & ~v7;
  v9 = (*(_QWORD *)(v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(type metadata accessor for ItemMetadata() - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + v9 + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  sub_23AC1B3AC(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(void (**)(void *, uint64_t, uint64_t (*)(_QWORD), _QWORD))(v0 + v4), *(_QWORD *)(v0 + v4 + 8), *(void **)(v0 + v5), v0 + v8, *(_QWORD *)(v0 + v9), v0 + v11, v0 + ((*(_QWORD *)(v10 + 64) + v7 + v11) & ~v7));
}

uint64_t sub_23AC25754()
{
  uint64_t v0;

  return sub_23B149A18(*(void (**)(uint64_t *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_23AC25760(uint64_t a1)
{
  sub_23AAA3E18(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_23AC2578C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23AC1BB10(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(void (**)(void *, _QWORD, uint64_t (*)(), uint64_t))(v4 + 24), *(_QWORD *)(v4 + 32), *(char **)(v4 + 40), *(_QWORD *)(v4 + 48));
}

uint64_t sub_23AC257B8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC257E4()
{
  uint64_t v0;

  return sub_23AC1BDC4(*(_QWORD *)(v0 + 16));
}

uint64_t sub_23AC257EC@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_23AC173E4(*(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_23AC25808()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_23AC2582C(uint64_t a1)
{
  uint64_t v1;

  return sub_23B1493E8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23AC25834()
{
  return swift_deallocObject();
}

uint64_t sub_23AC25844()
{
  uint64_t v0;

  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AC258A0(void *a1, uint64_t a2, char a3, void *a4, void *a5)
{
  uint64_t v5;

  return sub_23AC18C7C(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16), *(void **)(v5 + 24), *(void **)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72), *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88));
}

uint64_t sub_23AC258E0()
{
  id *v0;

  swift_release();

  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void sub_23AC2594C()
{
  uint64_t v0;

  sub_23AC18DB4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(void (**)(void))(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(void **)(v0 + 72), *(void **)(v0 + 80), *(void (**)(void *, uint64_t, _QWORD, id, void *))(v0 + 88), *(_QWORD *)(v0 + 96), *(void **)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 120));
}

_QWORD *sub_23AC25990(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

uint64_t sub_23AC259CC()
{
  uint64_t v0;

  return sub_23AC16F7C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

uint64_t sub_23AC259D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  id *v7;
  char *v8;
  int *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  char *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64) + v3;
  swift_release();
  swift_release();
  v5 = *(_QWORD *)(v0 + 56);
  if (v5 >> 60 != 15)
    sub_23AAAE53C(*(_QWORD *)(v0 + 48), v5);
  v6 = v4 + 7;
  v7 = (id *)(v0 + v3);

  swift_bridgeObjectRelease();
  v8 = (char *)v7 + *(int *)(v1 + 40);
  v9 = (int *)type metadata accessor for ItemMetadata();
  v10 = &v8[v9[7]];
  v11 = sub_23B1C5BDC();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, uint64_t))(v12 + 8);
  v13(v10, v11);
  v13(&v8[v9[8]], v11);
  swift_bridgeObjectRelease();
  v14 = &v8[v9[29]];
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v14, 1, v11))
    v13(v14, v11);
  v15 = v6 & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = (uint64_t *)&v8[v9[33]];
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_23AAAE53C(*v16, v17);
  swift_bridgeObjectRelease();
  v18 = v0 + v15;
  v19 = *(void **)(v0 + v15 + 16);
  if (v19 != (void *)1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v18 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_23AC25BE0()
{
  return sub_23AC25BEC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD *, char *, char *))sub_23AC16478);
}

uint64_t sub_23AC25BEC(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD *, char *, char *))
{
  char *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return a1(*((_QWORD *)v1 + 2), *((_QWORD *)v1 + 3), *((_QWORD *)v1 + 4), (_QWORD *)v1 + 5, &v1[v3], &v1[(*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8]);
}

uint64_t sub_23AC25C50(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_BYTE *);
  _BYTE v4[40];

  v2 = *(uint64_t (**)(_BYTE *))(v1 + 16);
  sub_23AA724E8(a1, (uint64_t)v4, &qword_2569E2928);
  return v2(v4);
}

uint64_t sub_23AC25C8C()
{
  uint64_t v0;
  unint64_t v1;

  swift_release();
  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 56);
  if (v1 >> 60 != 15 && (v1 & 0xF000000000000000) != 0xB000000000000000)
    sub_23AAAE53C(*(_QWORD *)(v0 + 48), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC25CEC(uint64_t a1)
{
  uint64_t v1;

  return sub_23AC13CD4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), (_QWORD *)(v1 + 40), *(uint64_t (**)(uint64_t))(v1 + 96));
}

uint64_t sub_23AC25D00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t);
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  v5 = v0 + v3 + *(int *)(v1 + 40);
  v6 = (int *)type metadata accessor for ItemMetadata();
  v7 = v5 + v6[7];
  v8 = sub_23B1C5BDC();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v10(v5 + v6[8], v8);
  swift_bridgeObjectRelease();
  v11 = v5 + v6[29];
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
    v10(v11, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = (uint64_t *)(v5 + v6[33]);
  v13 = v12[1];
  if (v13 >> 60 != 15)
    sub_23AAAE53C(*v12, v13);
  v14 = (((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  sub_23AAAE53C(*(_QWORD *)(v0 + v15), *(_QWORD *)(v0 + v15 + 8));
  swift_bridgeObjectRelease();
  sub_23AAAE53C(*(_QWORD *)(v0 + v15 + 24), *(_QWORD *)(v0 + v15 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_23AC25EF8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_23AC13F84(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t *))(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), (id *)(v0 + v2), *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v5), *(id **)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), (uint64_t *)(v0 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23AC25F98()
{
  uint64_t v0;

  return sub_23B149A94(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_23AC25FA4()
{
  return swift_deallocObject();
}

uint64_t sub_23AC25FB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t);
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  v5 = v0 + v3 + *(int *)(v1 + 40);
  v6 = (int *)type metadata accessor for ItemMetadata();
  v7 = v5 + v6[7];
  v8 = sub_23B1C5BDC();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v10(v5 + v6[8], v8);
  swift_bridgeObjectRelease();
  v11 = v5 + v6[29];
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
    v10(v11, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = (uint64_t *)(v5 + v6[33]);
  v13 = v12[1];
  if (v13 >> 60 != 15)
    sub_23AAAE53C(*v12, v13);
  v14 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();

  swift_release();
  sub_23AAAE53C(*(_QWORD *)(v0 + v15), *(_QWORD *)(v0 + v15 + 8));
  swift_bridgeObjectRelease();
  sub_23AAAE53C(*(_QWORD *)(v0 + v15 + 24), *(_QWORD *)(v0 + v15 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

void sub_23AC261AC(__int128 *a1, char a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t *v4;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v8 = a2 & 1;
  v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_23AC15194(a1, v8, a3, a4, v4[2], v4[3], v4[4], v4[5], (uint64_t)v4 + v10, *(void **)((char *)v4 + v11), *(uint64_t *)((char *)v4 + v12), (__int128 *)((char *)v4 + v13), *(uint64_t *)((char *)v4 + ((v13 + 71) & 0xFFFFFFFFFFFFFFF8)), *(void **)((char *)v4 + ((((v13 + 71) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t *)((char *)v4+ ((((((v13 + 71) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23AC26294()
{
  uint64_t *v0;

  return sub_23AC16280(v0[2], v0[3], v0[4]);
}

uint64_t sub_23AC262A0()
{
  id *v0;

  swift_release();

  swift_release();
  swift_release();

  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void sub_23AC26314()
{
  uint64_t v0;

  sub_23AC15DE8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(void (**)(void))(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(void **)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(id *)(v0 + 96), *(void (**)(void **))(v0 + 104), *(_QWORD *)(v0 + 112), *(void **)(v0 + 120), *(void **)(v0 + 128), *(_BYTE *)(v0 + 136));
}

uint64_t objectdestroy_223Tm()
{
  uint64_t v0;

  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AC263C0(void *a1, uint64_t a2, char a3, void *a4, void *a5)
{
  uint64_t v5;

  return sub_23AC15C60(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16), *(void **)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72), *(_QWORD *)(v5 + 80), *(void **)(v5 + 88), *(_QWORD *)(v5 + 96));
}

uint64_t sub_23AC26408()
{
  uint64_t v0;

  return sub_23AC13B00(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t sub_23AC26418(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_BYTE *);
  _BYTE v4[72];

  v2 = *(uint64_t (**)(_BYTE *))(v1 + 16);
  sub_23AA724E8(a1, (uint64_t)v4, (uint64_t *)&unk_2569E2940);
  return v2(v4);
}

uint64_t sub_23AC26454()
{
  uint64_t v0;
  unint64_t v1;

  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 64);
  if (v1 >> 60 != 15)
    sub_23AAAE53C(*(_QWORD *)(v0 + 56), v1);
  sub_23AAAE53C(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease();
  sub_23AAAE53C(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_23AC264D8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v12[2];
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD **)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_BYTE *)(v0 + 88);
  v7 = *(_OWORD *)(v0 + 64);
  v12[0] = *(_OWORD *)(v0 + 48);
  v12[1] = v7;
  v13 = v5;
  v14 = v6;
  v8 = *(_OWORD *)(v0 + 112);
  v15 = *(_OWORD *)(v0 + 96);
  v16 = v8;
  v9 = *(_OWORD *)(v0 + 144);
  v17 = *(_OWORD *)(v0 + 128);
  v18 = v9;
  v10 = *(_QWORD *)(v0 + 168);
  v19 = *(_QWORD *)(v0 + 160);
  return sub_23AC10D6C(v1, v2, v3, v4, (uint64_t)v12, v10, *(void **)(v0 + 176), *(void **)(v0 + 184), *(void **)(v0 + 192), *(_BYTE *)(v0 + 200));
}

void sub_23AC26548()
{
  uint64_t v0;

  sub_23B149998(*(void (**)(id *))(v0 + 16));
}

uint64_t sub_23AC26554()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC26590(uint64_t a1)
{
  uint64_t v1;

  return sub_23AC114D8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_23AC265A0()
{
  uint64_t v0;
  unint64_t v1;

  swift_release();

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  v1 = *(_QWORD *)(v0 + 88);
  if (v1 >> 60 != 15)
    sub_23AAAE53C(*(_QWORD *)(v0 + 80), v1);
  sub_23AAAE53C(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease();
  sub_23AAAE53C(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AC26634(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v19[2];
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(void **)(v5 + 24);
  v8 = *(void **)(v5 + 32);
  v9 = *(_OWORD *)(v5 + 40);
  v10 = *(_QWORD *)(v5 + 56);
  v11 = *(_QWORD *)(v5 + 64);
  v12 = *(_QWORD *)(v5 + 104);
  v13 = *(_BYTE *)(v5 + 112);
  v14 = *(_OWORD *)(v5 + 88);
  v19[0] = *(_OWORD *)(v5 + 72);
  v19[1] = v14;
  v20 = v12;
  v21 = v13;
  v15 = *(_OWORD *)(v5 + 136);
  v22 = *(_OWORD *)(v5 + 120);
  v23 = v15;
  v16 = *(_OWORD *)(v5 + 168);
  v24 = *(_OWORD *)(v5 + 152);
  v25 = v16;
  v17 = *(_QWORD *)(v5 + 192);
  v26 = *(_QWORD *)(v5 + 184);
  return sub_23AC123CC(a1, a2, a3, a4, a5, v6, v7, v8, v9, *((void **)&v9 + 1), v10, v11, (uint64_t *)v19, v17, *(_DWORD *)(v5 + 200));
}

uint64_t sub_23AC266B8()
{
  uint64_t v0;
  unint64_t v1;

  swift_release();

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  v1 = *(_QWORD *)(v0 + 112);
  if (v1 >> 60 != 15)
    sub_23AAAE53C(*(_QWORD *)(v0 + 104), v1);
  sub_23AAAE53C(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  swift_bridgeObjectRelease();
  sub_23AAAE53C(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AC26764()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t (**v6)(char *, _QWORD);
  id *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[2];
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v0 + 32);
  v4 = *(void **)(v0 + 40);
  v5 = *(void **)(v0 + 48);
  v6 = *(uint64_t (***)(char *, _QWORD))(v0 + 56);
  v7 = *(id **)(v0 + 64);
  v8 = *(void **)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(void **)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 128);
  v12 = *(_BYTE *)(v0 + 136);
  v13 = *(_OWORD *)(v0 + 112);
  v17[0] = *(_OWORD *)(v0 + 96);
  v17[1] = v13;
  v18 = v11;
  v19 = v12;
  v14 = *(_OWORD *)(v0 + 160);
  v20 = *(_OWORD *)(v0 + 144);
  v21 = v14;
  v15 = *(_OWORD *)(v0 + 192);
  v22 = *(_OWORD *)(v0 + 176);
  v23 = v15;
  v24 = *(_QWORD *)(v0 + 208);
  return sub_23AC125EC(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, (uint64_t)v17);
}

uint64_t sub_23AC267D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23B1C5A08();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC2684C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(sub_23B1C5A08() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_23AC12FFC(a1, v1 + v4, *(_BYTE *)(v1 + v4 + *(_QWORD *)(v3 + 64)), *(uint64_t (**)(uint64_t))(((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 8));
}

uint64_t sub_23AC268A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  _OWORD v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_DWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 80);
  v7 = *(_BYTE *)(v1 + 88);
  v8 = *(_OWORD *)(v1 + 64);
  v13[0] = *(_OWORD *)(v1 + 48);
  v13[1] = v8;
  v14 = v6;
  v15 = v7;
  v9 = *(_OWORD *)(v1 + 112);
  v16 = *(_OWORD *)(v1 + 96);
  v17 = v9;
  v10 = *(_OWORD *)(v1 + 144);
  v18 = *(_OWORD *)(v1 + 128);
  v19 = v10;
  v11 = *(void **)(v1 + 168);
  v20 = *(_QWORD *)(v1 + 160);
  return sub_23AC13118(v2, v3, v4, v5, (uint64_t *)v13, v11, *(_QWORD *)(v1 + 176), a1);
}

uint64_t sub_23AC26900()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = sub_23B1C5A08();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  swift_release();
  v4 = *(_QWORD *)(v0 + 56);
  if (v4 >> 60 != 15)
    sub_23AAAE53C(*(_QWORD *)(v0 + 48), v4);
  sub_23AAAE53C(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease();
  sub_23AAAE53C(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 176) & ~v3), v1);
  return swift_deallocObject();
}

uint64_t sub_23AC269CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  _OWORD v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_23B1C5A08() - 8) + 80);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_DWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 72);
  v8 = *(_BYTE *)(v1 + 80);
  v9 = *(_OWORD *)(v1 + 56);
  v14[0] = *(_OWORD *)(v1 + 40);
  v14[1] = v9;
  v15 = v7;
  v16 = v8;
  v10 = *(_OWORD *)(v1 + 104);
  v17 = *(_OWORD *)(v1 + 88);
  v18 = v10;
  v11 = *(_OWORD *)(v1 + 136);
  v19 = *(_OWORD *)(v1 + 120);
  v20 = v11;
  v12 = *(void **)(v1 + 160);
  v21 = *(_QWORD *)(v1 + 152);
  return sub_23AC13458(a1, v4, v5, v6, (uint64_t)v14, v12, *(_QWORD *)(v1 + 168), v1 + ((v3 + 176) & ~v3));
}

uint64_t sub_23AC26A64()
{
  return swift_deallocObject();
}

uint64_t sub_23AC26A74()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

void sub_23AC26AA8(uint64_t a1)
{
  uint64_t v1;

  sub_23AC137C4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

id sub_23AC26AB4(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if ((a8 & 1) != 0)
    return a1;
  else
    return (id)sub_23AAA3E2C(a2, a3);
}

void sub_23AC26AC8(id a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, char a9)
{
  if ((a9 & 1) != 0)

  else
    sub_23AC26AD8((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_23AC26AD8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (a8)
  {
    sub_23AAA3E18(a2, a3);

  }
}

void sub_23AC26B0C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if ((a8 & 1) != 0)

  else
    sub_23AAA3E18(a2, a3);
}

void sub_23AC26B24(uint64_t a1)
{
  uint64_t v1;

  sub_23AC10630(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_23AC26B30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_23B1C5A08();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

void sub_23AC26BC4(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(sub_23B1C5A08() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_23AC1BFCC(a1, a2, *(void **)(v2 + 16), v2 + v6, *(void (**)(uint64_t))v7, *(_QWORD *)(v7 + 8));
}

uint64_t sub_23AC26C2C(uint64_t a1)
{
  sub_23AC26AB4(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56));
  return a1;
}

uint64_t sub_23AC26C64()
{
  uint64_t v0;

  return sub_23AC11770(v0);
}

uint64_t sub_23AC26C80(uint64_t a1)
{
  uint64_t v1;

  return sub_23AC0ED2C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_23AC26C8C()
{
  uint64_t v0;

  swift_release();

  if (*(_QWORD *)(v0 + 80) != 1)
  {
    sub_23AAAE53C(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
    swift_bridgeObjectRelease();
    sub_23AAAE53C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();

  swift_release();
  return swift_deallocObject();
}

void sub_23AC26D14()
{
  uint64_t v0;

  sub_23AC0EF1C(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48), *(void **)(v0 + 56), v0 + 64, *(void (**)(void **))(v0 + 128), *(_QWORD *)(v0 + 136), *(_BYTE *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
}

uint64_t sub_23AC26D64()
{
  id *v0;

  swift_release();

  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_23AC26DC0(void *a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v6;

  return sub_23AC0F830(a1, a2, a3, a4, a5, a6, *(_QWORD *)(v6 + 16), *(void **)(v6 + 24), *(void **)(v6 + 32), *(_QWORD *)(v6 + 40), *(void **)(v6 + 48), *(_QWORD *)(v6 + 56), *(_QWORD *)(v6 + 64), *(_QWORD *)(v6 + 72), *(void **)(v6 + 80));
}

uint64_t objectdestroy_285Tm()
{
  uint64_t v0;

  swift_release();

  if (*(_QWORD *)(v0 + 32))
    swift_release();
  return swift_deallocObject();
}

void sub_23AC26E38()
{
  uint64_t v0;

  sub_23AC139EC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_23AC26E54()
{
  id *v0;

  swift_release();

  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

void sub_23AC26ED0()
{
  uint64_t v0;

  sub_23AC0F96C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void (***)(uint64_t, void *))(v0 + 48), *(void **)(v0 + 56), *(id **)(v0 + 64), *(void **)(v0 + 72), *(void (**)(id *))(v0 + 80), *(_QWORD *)(v0 + 88), *(void **)(v0 + 96), *(void **)(v0 + 104), *(void **)(v0 + 112), *(_QWORD *)(v0 + 120));
}

uint64_t sub_23AC26F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_23B1C5A08();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((v3 + *(_QWORD *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  swift_release();
  return swift_deallocObject();
}

void sub_23AC26FAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(sub_23B1C5A08() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_23AC10368(a1, v1 + v4, *(_BYTE *)(v1 + v4 + *(_QWORD *)(v3 + 64)), *(_QWORD *)(((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(void **)(v1 + ((((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(id *))(v1+ ((((((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)));
}

id sub_23AC27024(id a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, char a9)
{
  if ((a9 & 1) != 0)
    return a1;
  else
    return sub_23AC27034((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
}

id sub_23AC27034(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id result;

  if (a8)
  {
    sub_23AAA3E2C(a2, a3);
    return a8;
  }
  return result;
}

uint64_t sub_23AC27068()
{
  uint64_t v0;
  unint64_t v1;

  swift_release();
  v1 = *(_QWORD *)(v0 + 40);
  if (v1 >> 60 != 15)
    sub_23AAAE53C(*(_QWORD *)(v0 + 32), v1);
  sub_23AAAE53C(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease();
  sub_23AAAE53C(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

void sub_23AC270DC(void *a1, char a2)
{
  uint64_t v2;

  sub_23AC0DC44(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16), (_QWORD *)(v2 + 24), (uint64_t *)(v2 + 80), *(void (**)(_QWORD))(v2 + 144), *(_QWORD *)(v2 + 152), *(void **)(v2 + 160));
}

uint64_t sub_23AC270F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  id *v8;
  char *v9;
  int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  char *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64) + v3;
  swift_release();
  v5 = *(_QWORD *)(v0 + 40);
  if (v5 >> 60 != 15 && (v5 & 0xF000000000000000) != 0xB000000000000000)
    sub_23AAAE53C(*(_QWORD *)(v0 + 32), v5);
  v7 = v4 + 7;
  v8 = (id *)(v0 + v3);

  swift_bridgeObjectRelease();
  v9 = (char *)v8 + *(int *)(v1 + 40);
  v10 = (int *)type metadata accessor for ItemMetadata();
  v11 = &v9[v10[7]];
  v12 = sub_23B1C5BDC();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, uint64_t))(v13 + 8);
  v14(v11, v12);
  v14(&v9[v10[8]], v12);
  swift_bridgeObjectRelease();
  v15 = &v9[v10[29]];
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v15, 1, v12))
    v14(v15, v12);
  v16 = v7 & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = (uint64_t *)&v9[v10[33]];
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_23AAAE53C(*v17, v18);
  swift_bridgeObjectRelease();
  v19 = v0 + v16;
  v20 = *(void **)(v0 + v16 + 16);
  if (v20 != (void *)1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v19 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC27320()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1E00) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_23AC18F90((_QWORD *)(v0 + 24), v0 + v2, v0 + v3, 0, *(void (**)(uint64_t, _QWORD))(v0 + ((v3 + 255) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 255) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_23AC27394()
{
  uint64_t v0;

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_23AC273E0()
{
  uint64_t v0;

  sub_23AC0C5E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(double *)(v0 + 56), *(double *)(v0 + 64));
}

uint64_t objectdestroy_254Tm()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC27438(uint64_t a1)
{
  uint64_t v1;

  return sub_23AC0CA38(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(void))(v1 + 32));
}

uint64_t sub_23AC27444()
{
  id *v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC27490()
{
  return sub_23AC27768((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AC0BB88);
}

void sub_23AC274A0()
{
  uint64_t v0;

  sub_23B149A88(*(void (**)(id *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_23AC274AC()
{
  uint64_t v0;

  swift_release();

  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AC274F0(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_23AC0BFE8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(void *, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40), *(void **)(v2 + 48), *(void **)(v2 + 56));
}

uint64_t sub_23AC27500()
{
  uint64_t v0;

  swift_release();

  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC2754C()
{
  return sub_23AC27558((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AC0B0AC);
}

uint64_t sub_23AC27558(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_23AC27574()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

void sub_23AC275C0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_23AC0B280(a1, a2, a3, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(void **)(v4 + 56), *(_QWORD *)(v4 + 64), *(_QWORD *)(v4 + 72));
}

uint64_t sub_23AC275F8()
{
  uint64_t v0;

  return sub_23AC0AB88(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23AC27608()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_23AC2763C()
{
  uint64_t v0;

  return sub_23AC0B038(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_23AC27648()
{
  id *v0;

  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23AC276A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;

  sub_23AC0B404(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16), *(void (**)(void))(v5 + 24), *(_QWORD *)(v5 + 32), *(void (**)(void *, uint64_t))(v5 + 40), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56), *(void **)(v5 + 64), *(_QWORD *)(v5 + 72), *(uint64_t (**)(unint64_t))(v5 + 80), *(_QWORD *)(v5 + 88), *(_QWORD *)(v5 + 96));
}

void sub_23AC276E8()
{
  uint64_t v0;

  sub_23AC09F80(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_23AC27700(void *a1, void *a2, void *a3)
{
  uint64_t v3;

  return sub_23AC0A35C(a1, a2, a3, *(_QWORD *)(v3 + 16), *(void **)(v3 + 24), *(void **)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
}

uint64_t sub_23AC27710()
{
  id *v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC2775C()
{
  return sub_23AC27768((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23AC0A42C);
}

uint64_t sub_23AC27768(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t objectdestroy_357Tm()
{
  uint64_t v0;

  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23AC277C0(uint64_t a1)
{
  uint64_t v1;

  return sub_23AC0CE80(a1, *(void (**)(uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(NSObject **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

_QWORD *sub_23AC277D0(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  return a1;
}

uint64_t objectdestroy_427Tm()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

void sub_23AC27850(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_23AC0ABEC(a1, a2, *(_QWORD *)(v2 + 16), *(char **)(v2 + 24), *(_QWORD *)(v2 + 32), *(void (**)(uint64_t, char *, uint64_t (*)(_QWORD), _QWORD *))(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_23AC27860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4 != 1)
    return swift_bridgeObjectRetain();
  return result;
}

void sub_23AC27874(void *a1)
{
  uint64_t v1;

  sub_23AC095CC(a1, *(void **)(v1 + 16));
}

id sub_23AC2787C(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

void sub_23AC2788C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;

  sub_23AC087F4(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_23AC2797C(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23AC25090(a1, a2, a3, a4);
}

uint64_t sub_23AC27A04@<X0>(_DWORD *a1@<X8>)
{
  return sub_23AC243B0(a1);
}

BOOL sub_23AC27A1C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23AC27A34()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C65636E6163;
  else
    return 1953063287;
}

unint64_t sub_23AC27A64()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  int EnumCaseMultiPayload;
  unint64_t v12;
  const char *v13;
  unint64_t v15;
  unint64_t v16;

  v1 = v0;
  v2 = 0xD00000000000001BLL;
  v3 = sub_23B1C5BDC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DownloadProgressNotificationReason(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23AA907B0(v1, (uint64_t)v9, v10);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    v15 = 0;
    v16 = 0xE000000000000000;
    sub_23B1C6EFC();
    swift_bridgeObjectRelease();
    v12 = 0xD000000000000026;
    v13 = "POSIX syscall reached expiration date ";
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    v15 = 0;
    v16 = 0xE000000000000000;
    sub_23B1C6EFC();
    swift_bridgeObjectRelease();
    v12 = 0xD000000000000020;
    v13 = "download made no progress since ";
LABEL_5:
    v15 = v12;
    v16 = (unint64_t)(v13 - 32) | 0x8000000000000000;
    sub_23AA7E38C((unint64_t *)&unk_2542E0240, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    v2 = v15;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v2;
}

uint64_t sub_23AC27C40(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  double v18;
  double v19;
  unsigned int v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  double v25;
  double v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  id v44;

  v7 = sub_23B1C5BDC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v42 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v41(v3 + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationDate, 1, 1, v7);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationPolicy) = 2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  v13 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v44 = a1;
  v14 = a2;
  v15 = (void *)sub_23B1C63BC();
  v16 = objc_msgSend(v13, sel_initWithSuiteName_, v15);

  v43 = a3;
  if (!v16
    || (v17 = (void *)sub_23B1C63BC(),
        objc_msgSend(v16, sel_doubleForKey_, v17),
        v19 = v18,
        v16,
        v17,
        v19 == 0.0))
  {
    v19 = 600.0;
  }
  *(double *)(v3 + 88) = v19;
  v20 = objc_msgSend(v14, sel_isFromPOSIX);
  v21 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v22 = (void *)sub_23B1C63BC();
  v23 = objc_msgSend(v21, sel_initWithSuiteName_, v22);

  if (v20)
  {
    if (!v23
      || (v24 = (void *)sub_23B1C63BC(),
          objc_msgSend(v23, sel_doubleForKey_, v24),
          v26 = v25,
          v23,
          v24,
          v26 == 0.0))
    {
      v26 = 600.0;
    }
    *(double *)(v3 + 80) = v26;
    v27 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
    v28 = (void *)sub_23B1C63BC();
    v29 = objc_msgSend(v27, sel_initWithSuiteName_, v28);

    if (v29)
    {
      v30 = (void *)sub_23B1C63BC();
      objc_msgSend(v29, sel_doubleForKey_, v30);

    }
    v36 = v43;
    v37 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v42, v43, v7);
    sub_23B1C5B40();

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v36, v7);
    v37((uint64_t)v12, 0, 1, v7);
    v38 = v3 + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationDate;
    swift_beginAccess();
    sub_23AA8A660((uint64_t)v12, v38, (uint64_t *)&unk_2542E4310);
    swift_endAccess();
  }
  else
  {
    if (v23)
    {
      v31 = (void *)sub_23B1C63BC();
      objc_msgSend(v23, sel_doubleForKey_, v31);
      v33 = v32;

      v34 = 30.0;
      v35 = v43;
      if (v33 != 0.0)
        v34 = v33;
    }
    else
    {

      v34 = 30.0;
      v35 = v43;
    }
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v35, v7);
    *(double *)(v3 + 80) = v34;
  }
  return v3;
}

uint64_t sub_23AC2808C()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)swift_retain();
  sub_23B0DA3D8(v1, v0);

  sub_23AA8A05C(v0 + 32, qword_2542E5640);
  swift_release();
  swift_release();
  sub_23AA8A05C(v0 + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationDate, (uint64_t *)&unk_2542E4310);
  return v0;
}

uint64_t sub_23AC2810C()
{
  sub_23AC2808C();
  return swift_deallocClassInstance();
}

uint64_t sub_23AC2812C()
{
  return type metadata accessor for DownloadContext(0);
}

uint64_t type metadata accessor for DownloadContext(uint64_t a1)
{
  return sub_23AA94094(a1, qword_2542E0BC0);
}

void sub_23AC28148()
{
  unint64_t v0;

  sub_23AB5FB60();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_23AC281F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23B1C5BDC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1 + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationDate;
  swift_beginAccess();
  sub_23AA8EFC8(v9, (uint64_t)v4, (uint64_t *)&unk_2542E4310);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_23AA8A05C((uint64_t)v4, (uint64_t *)&unk_2542E4310);
    v17 = 0;
    v18 = 0xE000000000000000;
    sub_23B1C64F4();
    v10 = *(id *)(v1 + 24);
    v11 = objc_msgSend(v10, sel_description);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C6884();
    sub_23B1C64F4();
    return v17;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v17 = 0;
    v18 = 0xE000000000000000;
    sub_23B1C6EFC();
    sub_23B1C64F4();
    v13 = *(id *)(v1 + 24);
    v14 = objc_msgSend(v13, sel_description);
    sub_23B1C63E0();

    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    sub_23B1C6884();
    sub_23B1C64F4();
    sub_23AA7E38C((unint64_t *)&unk_2542E0240, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    v12 = v17;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v12;
}

uint64_t sub_23AC284DC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 64) = 0;
  swift_release();
  v2 = a1 + 32;
  swift_beginAccess();
  sub_23AA8EFC8(v2, (uint64_t)&v5, qword_2542E5640);
  if (!*((_QWORD *)&v6 + 1))
    return sub_23AA8A05C((uint64_t)&v5, qword_2542E5640);
  sub_23AAA159C(&v5, &v7);
  v3 = (void *)objc_opt_self();
  __swift_project_boxed_opaque_existential_1(&v7, v8);
  objc_msgSend(v3, sel__removeSubscriber_, sub_23B1C7370());
  swift_unknownObjectRelease();
  v5 = 0u;
  v6 = 0u;
  swift_beginAccess();
  sub_23AA8A660((uint64_t)&v5, v2, qword_2542E5640);
  swift_endAccess();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
}

uint64_t sub_23AC285F8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23B1C5BDC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_23AC30E14() != 1)
  {
    v13 = *(unsigned __int8 *)(v3
                             + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationPolicy);
    if (v13 == 2 || (v13 & 1) != 0)
    {
      v15 = *(void **)(v3 + 24);
      if ((int)objc_msgSend(v15, sel_pid) < -1000)
      {
        v16 = type metadata accessor for DownloadProgressNotificationReason(0);
        swift_storeEnumTagMultiPayload();
        return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 0, 1, v16);
      }
      if ((objc_msgSend(v15, sel_pid) & 0x80000000) == 0)
        objc_msgSend(v15, sel_pid);
      if (objc_msgSend(v15, sel_isFromPOSIX))
      {
        v19 = v3 + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationDate;
        swift_beginAccess();
        sub_23AA8EFC8(v19, (uint64_t)v8, (uint64_t *)&unk_2542E4310);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
        {
          sub_23AA8A05C((uint64_t)v8, (uint64_t *)&unk_2542E4310);
        }
        else
        {
          v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
          v20(v12, v8, v9);
          sub_23AA7E38C(&qword_2569E2A10, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
          if ((sub_23B1C6344() & 1) == 0)
          {
            v20(a2, v12, v9);
            v23 = type metadata accessor for DownloadProgressNotificationReason(0);
LABEL_21:
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 0, 1, v23);
          }
          (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        }
      }
      sub_23B1C5B4C();
      if (*(double *)(v3 + 80) > v21)
      {
        v22 = type metadata accessor for DownloadProgressNotificationReason(0);
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a2, 1, 1, v22);
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(a2, a1, v9);
      v23 = type metadata accessor for DownloadProgressNotificationReason(0);
      goto LABEL_21;
    }
  }
  v18 = type metadata accessor for DownloadProgressNotificationReason(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
}

uint64_t sub_23AC2891C()
{
  return sub_23AC281F4();
}

uint64_t type metadata accessor for DownloadProgressNotificationPresenter()
{
  return objc_opt_self();
}

uint64_t sub_23AC2895C()
{
  sub_23B1C74A8();
  sub_23B1C5A08();
  sub_23AA7E38C((unint64_t *)&qword_2542E0230, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23B1C62D8();
  sub_23B1C6C5C();
  return sub_23B1C74E4();
}

uint64_t sub_23AC289E4()
{
  sub_23B1C5A08();
  sub_23AA7E38C((unint64_t *)&qword_2542E0230, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23B1C62D8();
  return sub_23B1C6C5C();
}

uint64_t sub_23AC28A54()
{
  sub_23B1C74A8();
  sub_23B1C5A08();
  sub_23AA7E38C((unint64_t *)&qword_2542E0230, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23B1C62D8();
  sub_23B1C6C5C();
  return sub_23B1C74E4();
}

uint64_t sub_23AC28AD8()
{
  void *v0;
  id v1;
  uint64_t v2;

  v0 = (void *)sub_23B1C5954();
  v1 = objc_msgSend(v0, sel_fp_shortDescription);

  v2 = sub_23B1C63E0();
  return v2;
}

uint64_t sub_23AC28B38()
{
  if ((MEMORY[0x23B85E2C4]() & 1) == 0)
    return 0;
  sub_23AA9F52C(0, &qword_2542E2030);
  return sub_23B1C6C50() & 1;
}

uint64_t sub_23AC28BA8()
{
  sub_23B1C74A8();
  sub_23B1C5A08();
  sub_23AA7E38C((unint64_t *)&qword_2542E0230, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23B1C62D8();
  sub_23B1C64A0();
  return sub_23B1C74E4();
}

uint64_t sub_23AC28C34()
{
  sub_23B1C5A08();
  sub_23AA7E38C((unint64_t *)&qword_2542E0230, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23B1C62D8();
  return sub_23B1C64A0();
}

uint64_t sub_23AC28CA4()
{
  sub_23B1C74A8();
  sub_23B1C5A08();
  sub_23AA7E38C((unint64_t *)&qword_2542E0230, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23B1C62D8();
  sub_23B1C64A0();
  return sub_23B1C74E4();
}

uint64_t sub_23AC28D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if ((MEMORY[0x23B85E2C4]() & 1) == 0)
    return 0;
  v6 = *(int *)(a3 + 20);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  if (v7 == *v9 && v8 == v9[1])
    return 1;
  else
    return sub_23B1C7388();
}

uint64_t sub_23AC28DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v0 = sub_23B1C6B3C();
  v22 = *(_QWORD *)(v0 - 8);
  v23 = v0;
  MEMORY[0x24BDAC7A8](v0);
  v21 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_23B1C6AE8();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  v20 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - v7;
  v9 = sub_23B1C60A4();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v19 - v14;
  v19 = sub_23AA9F52C(0, (unint64_t *)&qword_2542E5500);
  sub_23B1C6068();
  v24 = MEMORY[0x24BEE4AF8];
  sub_23AA7E38C((unint64_t *)&qword_2542E7500, v3, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E74C0);
  sub_23AAB5A28((unint64_t *)&qword_2542E74D0, (uint64_t *)&unk_2542E74C0, MEMORY[0x24BEE12C8]);
  sub_23B1C6DE8();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  v16 = v20;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v6, v8, v2);
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v21, *MEMORY[0x24BEE5758], v23);
  v17 = sub_23B1C6B60();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v2);
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  qword_2542E1540 = v17;
  return result;
}

uint64_t sub_23AC29010@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_lastChangeDate;
  swift_beginAccess();
  v4 = sub_23B1C5BDC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

_QWORD *sub_23AC29074(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  v26 = sub_23B1C60A4();
  v24 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23B1C5BDC();
  v22 = *(_QWORD *)(v6 - 8);
  v23 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23B1C6B78();
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BEE4AF8];
  v2[2] = sub_23AAEA780(MEMORY[0x24BEE4AF8]);
  v2[3] = sub_23AAEA918(v12);
  v2[4] = sub_23AAEAAD0(v12);
  v13 = (char *)v2 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_expirationPolicy;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DD430);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_rtcReporter) = 0;
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_notificationPresenter) = a1;
  sub_23AA9F52C(0, (unint64_t *)&qword_2542E7520);
  v15 = qword_2542DE118;
  v25 = a1;
  swift_retain();
  if (v15 != -1)
    swift_once();
  v27 = v12;
  sub_23AA7E38C((unint64_t *)&qword_2542E1F80, (uint64_t (*)(uint64_t))MEMORY[0x24BEE57C0], MEMORY[0x24BEE57D0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1EF0);
  sub_23AAB5A28((unint64_t *)&qword_2542E1F00, (uint64_t *)&unk_2542E1EF0, MEMORY[0x24BEE12C8]);
  sub_23B1C6DE8();
  v16 = sub_23B1C6B84();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v9);
  v2[5] = v16;
  sub_23B1C5BD0();
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))((uint64_t)v2 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_lastChangeDate, v8, v23);
  swift_getObjectType();
  v17 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_23ADFA2F4();
  sub_23AA78928(0, (uint64_t)v5, (uint64_t)sub_23AC31198, v17);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v26);
  swift_release();
  v18 = *(void **)((char *)v2 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_rtcReporter);
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_rtcReporter) = 0;

  return v2;
}

uint64_t sub_23AC293A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t v5;

  v0 = sub_23B1C5BDC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_23B1C5BD0();
    sub_23AC298DC((uint64_t)v3);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return result;
}

uint64_t sub_23AC29458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  swift_getObjectType();
  sub_23B1C6BCC();
  sub_23B1C6BA8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_23AA8A05C(v0 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_expirationPolicy, &qword_2542E0250);
  v2 = v0 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_lastChangeDate;
  v3 = sub_23B1C5BDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_release();

  return v1;
}

uint64_t sub_23AC2951C()
{
  sub_23AC29458();
  return swift_deallocClassInstance();
}

uint64_t sub_23AC29540()
{
  return type metadata accessor for DownloadProgressMonitor(0);
}

uint64_t type metadata accessor for DownloadProgressMonitor(uint64_t a1)
{
  return sub_23AA94094(a1, qword_2542E1548);
}

void sub_23AC2955C()
{
  unint64_t v0;
  unint64_t v1;

  sub_23AC2FBE8();
  if (v0 <= 0x3F)
  {
    sub_23B1C5BDC();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

id sub_23AC29618(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  double v18;
  double v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  double v24;
  double v25;
  uint64_t v26;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23B1C5BDC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(*(id *)(a1 + 24), sel_executablePath);
  if (result)
  {
    v11 = result;
    v12 = sub_23B1C63E0();
    v14 = v13;

    swift_beginAccess();
    v15 = *(_QWORD *)(v1 + 32);
    if (*(_QWORD *)(v15 + 16))
    {
      swift_bridgeObjectRetain();
      v16 = sub_23AAAF4C4(v12, v14);
      if ((v17 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v5, *(_QWORD *)(v15 + 56) + *(_QWORD *)(v7 + 72) * v16, v6);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      sub_23AA8A05C((uint64_t)v5, (uint64_t *)&unk_2542E4310);
      return 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
      sub_23B1C5B4C();
      v19 = v18;
      v20 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
      v21 = (void *)sub_23B1C63BC();
      v22 = objc_msgSend(v20, sel_initWithSuiteName_, v21);

      if (v22)
      {
        v23 = (void *)sub_23B1C63BC();
        objc_msgSend(v22, sel_doubleForKey_, v23);
        v25 = v24;

        if (v25 == 0.0)
          v25 = 1800.0;
      }
      else
      {
        v25 = 1800.0;
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return (id)(v19 < v25);
    }
  }
  return result;
}

uint64_t sub_23AC298DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];

  v3 = sub_23B1C60EC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (_QWORD *)((char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_2542DE118 != -1)
    swift_once();
  v7 = qword_2542E1540;
  *v6 = qword_2542E1540;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE5610], v3);
  v8 = (id)v7;
  LOBYTE(v7) = sub_23B1C6104();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v10 = swift_beginAccess();
    v11 = *(_QWORD *)(v1 + 32);
    MEMORY[0x24BDAC7A8](v10);
    v22[-2] = a1;
    swift_bridgeObjectRetain();
    v12 = sub_23AC306FC((uint64_t)sub_23AC306E0, (uint64_t)&v22[-4], v11, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))sub_23AC30B88);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 32) = v12;
    swift_bridgeObjectRelease();
    v13 = swift_beginAccess();
    v14 = *(_QWORD *)(v1 + 24);
    MEMORY[0x24BDAC7A8](v13);
    v22[-2] = a1;
    swift_bridgeObjectRetain();
    v15 = sub_23AC306FC((uint64_t)sub_23AC30878, (uint64_t)&v22[-4], v14, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))sub_23AC30894);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 24) = v15;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v16 = swift_bridgeObjectRetain();
    v17 = sub_23AEA4A48(v16);
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(_QWORD *)(type metadata accessor for DownloadProgressMonitor.URLProgressKey(0) - 8);
      v20 = v17 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
      v21 = *(_QWORD *)(v19 + 72);
      swift_retain();
      do
      {
        sub_23AC29E98(v20, v1, a1);
        v20 += v21;
        --v18;
      }
      while (v18);
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL sub_23AC29B58(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  double v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  double v18;
  double v19;
  uint64_t v21;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2A08);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (uint64_t *)((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *a1;
  v9 = a1[1];
  *v7 = v8;
  v7[1] = v9;
  v10 = (char *)v7 + *(int *)(v5 + 48);
  v11 = sub_23B1C5BDC();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v10, a2, v11);
  swift_bridgeObjectRetain();
  sub_23B1C5B4C();
  v13 = v12;
  v14 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v15 = (void *)sub_23B1C63BC();
  v16 = objc_msgSend(v14, sel_initWithSuiteName_, v15);

  if (v16)
  {
    v17 = (void *)sub_23B1C63BC();
    objc_msgSend(v16, sel_doubleForKey_, v17);
    v19 = v18;

    if (v19 == 0.0)
      v19 = 1800.0;
  }
  else
  {
    v19 = 1800.0;
  }
  sub_23AA8A05C((uint64_t)v7, &qword_2569E2A08);
  return v13 < v19;
}

BOOL sub_23AC29CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  double v9;
  double v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  double v15;
  double v16;
  uint64_t v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2A00);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23AA907B0(a1, (uint64_t)v6, type metadata accessor for DownloadProgressMonitor.ApplicationRequest);
  v7 = &v6[*(int *)(v4 + 48)];
  v8 = sub_23B1C5BDC();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v7, a2, v8);
  sub_23B1C5B4C();
  v10 = v9;
  v11 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v12 = (void *)sub_23B1C63BC();
  v13 = objc_msgSend(v11, sel_initWithSuiteName_, v12);

  if (v13)
  {
    v14 = (void *)sub_23B1C63BC();
    objc_msgSend(v13, sel_doubleForKey_, v14);
    v16 = v15;

    if (v16 == 0.0)
      v16 = 1800.0;
  }
  else
  {
    v16 = 1800.0;
  }
  sub_23AA8A05C((uint64_t)v6, &qword_2569E2A00);
  return v10 < v16;
}

uint64_t sub_23AC29E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  unint64_t v38;
  char v39;
  id *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  uint64_t v44;
  double v45;
  double v46;
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  id v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  os_log_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  os_log_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  id v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int64_t v102;
  void (*v103)(char *, char *, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  void (*v111)(char *, uint64_t, uint64_t);
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  char *v114;
  uint64_t v115;
  os_log_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  char *v129;

  v126 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E0250);
  MEMORY[0x24BDAC7A8](v5);
  v114 = (char *)&v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E1528);
  MEMORY[0x24BDAC7A8](v7);
  v113 = (void (*)(char *, char *, uint64_t))((char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E16D8);
  MEMORY[0x24BDAC7A8](v9);
  v120 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for DownloadProgressNotificationReason(0);
  v11 = *(_QWORD *)(v119 - 8);
  MEMORY[0x24BDAC7A8](v119);
  v117 = (uint64_t)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DownloadProgressMonitor.URLProgressKey(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v115 = (uint64_t)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v106 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v106 - v22;
  v24 = sub_23B1C5E4C();
  v121 = *(_QWORD *)(v24 - 8);
  v122 = v24;
  v25 = MEMORY[0x24BDAC7A8](v24);
  v116 = (os_log_t)((char *)&v106 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v106 - v27;
  v123 = sub_23B1C5BDC();
  v29 = *(_QWORD *)(v123 - 8);
  v30 = MEMORY[0x24BDAC7A8](v123);
  v118 = (char *)&v106 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x24BDAC7A8](v30);
  v34 = (char *)&v106 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v124 = (char *)&v106 - v35;
  result = swift_beginAccess();
  v125 = a2;
  v37 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(v37 + 16))
    return result;
  swift_bridgeObjectRetain();
  v38 = sub_23ACD5C3C(a1);
  if ((v39 & 1) == 0)
    return swift_bridgeObjectRelease();
  v112 = a1;
  v40 = *(id **)(*(_QWORD *)(v37 + 56) + 8 * v38);
  swift_retain();
  swift_bridgeObjectRelease();
  if ((objc_msgSend(v40[2], sel_isCancelled) & 1) != 0)
    return swift_release();
  v108 = v11;
  v107 = v21;
  v41 = v125 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_lastChangeDate;
  swift_beginAccess();
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v43 = v124;
  v109 = v41;
  v44 = v123;
  v111 = v42;
  v42(v124, v41, v123);
  sub_23B1C5B4C();
  v46 = v45;
  v47 = v43;
  v48 = (char *)v40;
  v110 = *(void (**)(char *, uint64_t))(v29 + 8);
  v110(v47, v44);
  if (*((double *)v40 + 11) <= v46)
  {
    v54 = (id)fpfs_current_or_default_log();
    v55 = v28;
    sub_23B1C5E58();
    v56 = v112;
    sub_23AA907B0(v112, (uint64_t)v23, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
    v57 = (uint64_t)v34;
    v58 = v126;
    v111(v34, v126, v44);
    swift_retain_n();
    swift_retain_n();
    v59 = sub_23B1C5E40();
    v60 = sub_23B1C6AB8();
    LODWORD(v120) = v60;
    if (os_log_type_enabled(v59, v60))
    {
      v61 = swift_slowAlloc();
      v119 = (uint64_t)v55;
      v117 = v57;
      v62 = v61;
      v118 = (char *)swift_slowAlloc();
      v129 = v118;
      *(_DWORD *)v62 = 136315906;
      v116 = (os_log_t)(v62 + 4);
      v63 = (uint64_t)v107;
      sub_23AA907B0((uint64_t)v23, (uint64_t)v107, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
      v64 = (void *)sub_23B1C5954();
      v65 = objc_msgSend(v64, sel_fp_shortDescription);

      v66 = sub_23B1C63E0();
      v68 = v67;

      sub_23AA937BC(v63, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
      v128 = (id)sub_23AABEC68(v66, v68, (uint64_t *)&v129);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      sub_23AA937BC((uint64_t)v23, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
      *(_WORD *)(v62 + 12) = 2048;
      objc_msgSend(v40[2], sel_fractionCompleted);
      v128 = (id)v69;
      sub_23B1C6CBC();
      swift_release_n();
      *(_WORD *)(v62 + 22) = 2048;
      v71 = v123;
      v70 = v124;
      v111(v124, v109, v123);
      v116 = v59;
      v72 = v117;
      sub_23B1C5B4C();
      v74 = v73;
      v75 = (void (*)(uint64_t, uint64_t))v110;
      v110(v70, v71);
      v128 = (id)v74;
      sub_23B1C6CBC();
      swift_release();
      v75(v72, v71);
      swift_release();
      *(_WORD *)(v62 + 32) = 2048;
      v128 = v40[11];
      v56 = v112;
      sub_23B1C6CBC();
      swift_release_n();
      v76 = v116;
      _os_log_impl(&dword_23AA66000, v116, (os_log_type_t)v120, "⌛️  cancelling download for %s because it is stuck at %f for %f (allowed: %f)", (uint8_t *)v62, 0x2Au);
      v77 = v118;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v77, -1, -1);
      v58 = v126;
      MEMORY[0x23B8614BC](v62, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v119, v122);
    }
    else
    {
      sub_23AA937BC((uint64_t)v23, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
      swift_release();
      swift_release_n();
      v110((char *)v57, v123);

      swift_release_n();
      swift_release();
      (*(void (**)(char *, uint64_t))(v121 + 8))(v55, v122);
    }
    sub_23AC2F838(v56, v58);
    return swift_release();
  }
  v49 = v111;
  v50 = (uint64_t)v40 + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationDate;
  swift_beginAccess();
  sub_23AA8EFC8(v50, (uint64_t)v15, (uint64_t *)&unk_2542E4310);
  v51 = v44;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v15, 1, v44) == 1)
  {
    sub_23AA8A05C((uint64_t)v15, (uint64_t *)&unk_2542E4310);
    v52 = v126;
    v53 = (void (*)(uint64_t, uint64_t))v110;
  }
  else
  {
    v78 = v118;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v118, v15, v44);
    v52 = v126;
    if ((sub_23B1C5B70() & 1) != 0
      && (v48[OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationPolicy] & 1) != 0)
    {
      v86 = v44;
      v87 = (id)fpfs_current_or_default_log();
      v88 = v116;
      sub_23B1C5E58();
      v89 = v115;
      sub_23AA907B0(v112, v115, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
      v90 = sub_23B1C5E40();
      v91 = sub_23B1C6AB8();
      if (os_log_type_enabled(v90, v91))
      {
        v92 = (uint8_t *)swift_slowAlloc();
        v93 = swift_slowAlloc();
        v128 = (id)v93;
        v124 = v48;
        *(_DWORD *)v92 = 136315138;
        v120 = (char *)(v92 + 4);
        v94 = v89;
        v95 = (uint64_t)v107;
        sub_23AA907B0(v94, (uint64_t)v107, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
        v96 = (void *)sub_23B1C5954();
        v97 = objc_msgSend(v96, sel_fp_shortDescription);

        v98 = sub_23B1C63E0();
        v100 = v99;

        sub_23AA937BC(v95, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
        v127 = sub_23AABEC68(v98, v100, (uint64_t *)&v128);
        v78 = v118;
        sub_23B1C6CBC();
        v101 = v123;
        swift_bridgeObjectRelease();
        sub_23AA937BC(v115, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
        _os_log_impl(&dword_23AA66000, v90, v91, "⌛️  cancelling download for %s by user policy", v92, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v93, -1, -1);
        MEMORY[0x23B8614BC](v92, -1, -1);

        (*(void (**)(os_log_t, uint64_t))(v121 + 8))(v116, v122);
      }
      else
      {
        sub_23AA937BC(v89, type metadata accessor for DownloadProgressMonitor.URLProgressKey);

        (*(void (**)(os_log_t, uint64_t))(v121 + 8))(v88, v122);
        v101 = v86;
      }
      sub_23AC2F838(v112, v126);
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v110)(v78, v101);
    }
    v53 = (void (*)(uint64_t, uint64_t))v110;
    v110(v78, v44);
  }
  v79 = (uint64_t)v124;
  v81 = v119;
  v80 = v120;
  v82 = v108;
  v49(v124, v109, v51);
  v83 = (uint64_t)v48;
  v84 = v51;
  sub_23AC285F8(v79, v80);
  v53(v79, v51);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81) == 1)
  {
    swift_release();
    return sub_23AA8A05C((uint64_t)v80, &qword_2542E16D8);
  }
  else
  {
    v85 = v117;
    sub_23AA94050((uint64_t)v80, v117, type metadata accessor for DownloadProgressNotificationReason);
    if ((sub_23AC29618(v83) & 1) != 0 || sub_23AC30E14() == 2)
    {
      sub_23AC2F838(v112, v52);
    }
    else
    {
      v102 = (int64_t)v124;
      sub_23B1C5BD0();
      v103 = v113;
      sub_23AC2B940(*(void **)(v83 + 16), (uint64_t)v113);
      swift_weakInit();
      v104 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DD430);
      v105 = (uint64_t)v114;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56))(v114, 1, 1, v104);
      swift_retain();
      sub_23AC2BFC8(v105, (uint64_t)&v128, v102, v103, v83, v112);
      sub_23AA8A05C(v105, &qword_2542E0250);
      swift_release();
      sub_23AA8A05C((uint64_t)v103, &qword_2542E1528);
      v53(v102, v84);
      swift_weakDestroy();
    }
    swift_release();
    return sub_23AA937BC(v85, type metadata accessor for DownloadProgressNotificationReason);
  }
}

uint64_t sub_23AC2AAEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  void *v30;
  char v31;
  _QWORD v32[2];
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v32[1] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_23B1C5BDC();
  v5 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23B1C60EC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (unint64_t)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542DE118 != -1)
    goto LABEL_33;
  while (1)
  {
    v12 = (void *)qword_2542E1540;
    *(_QWORD *)v11 = qword_2542E1540;
    (*(void (**)(unint64_t, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEE5610], v8);
    v13 = v12;
    v14 = sub_23B1C6104();
    result = (*(uint64_t (**)(unint64_t, uint64_t))(v9 + 8))(v11, v8);
    if ((v14 & 1) == 0)
      break;
    v35 = v7;
    swift_beginAccess();
    v8 = *(_QWORD *)(v1 + 16);
    v7 = (char *)(v8 + 64);
    v16 = 1 << *(_BYTE *)(v8 + 32);
    v17 = -1;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    v11 = v17 & *(_QWORD *)(v8 + 64);
    v9 = (unint64_t)(v16 + 63) >> 6;
    swift_bridgeObjectRetain();
    v18 = 0;
    v33 = v4;
    v34 = v8;
    while (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v18 << 6);
LABEL_25:
      v1 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v20);
      if ((*(_BYTE *)(v1
                     + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationPolicy) & 1) != 0)
      {
        v24 = v1 + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationDate;
        swift_beginAccess();
        sub_23AA8EFC8(v24, (uint64_t)v4, (uint64_t *)&unk_2542E4310);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, v36) == 1)
        {
          sub_23AA8A05C((uint64_t)v4, (uint64_t *)&unk_2542E4310);
        }
        else
        {
          v25 = v4;
          v26 = v9;
          v27 = v7;
          v29 = v35;
          v28 = v36;
          (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v35, v25, v36);
          v30 = *(void **)(v1 + 16);
          swift_retain();
          if ((objc_msgSend(v30, sel_isCancelled) & 1) != 0)
          {
            (*(void (**)(char *, uint64_t))(v5 + 8))(v29, v28);
            swift_release();
            v7 = v27;
            v9 = v26;
            v4 = v33;
            v8 = v34;
          }
          else
          {
            v31 = sub_23B1C5B70();
            (*(void (**)(char *, uint64_t))(v5 + 8))(v29, v28);
            swift_release();
            v7 = v27;
            v9 = v26;
            v4 = v33;
            v8 = v34;
            if ((v31 & 1) != 0)
              return swift_release();
          }
        }
      }
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v9)
      return swift_release();
    v22 = *(_QWORD *)&v7[8 * v21];
    ++v18;
    if (v22)
      goto LABEL_24;
    v18 = v21 + 1;
    if (v21 + 1 >= v9)
      return swift_release();
    v22 = *(_QWORD *)&v7[8 * v18];
    if (v22)
      goto LABEL_24;
    v18 = v21 + 2;
    if (v21 + 2 >= v9)
      return swift_release();
    v22 = *(_QWORD *)&v7[8 * v18];
    if (v22)
      goto LABEL_24;
    v18 = v21 + 3;
    if (v21 + 3 >= v9)
      return swift_release();
    v22 = *(_QWORD *)&v7[8 * v18];
    if (v22)
      goto LABEL_24;
    v23 = v21 + 4;
    if (v23 >= v9)
      return swift_release();
    v22 = *(_QWORD *)&v7[8 * v23];
    if (v22)
    {
      v18 = v23;
LABEL_24:
      v11 = (v22 - 1) & v22;
      v20 = __clz(__rbit64(v22)) + (v18 << 6);
      goto LABEL_25;
    }
    while (1)
    {
      v18 = v23 + 1;
      if (__OFADD__(v23, 1))
        break;
      if (v18 >= v9)
        return swift_release();
      v22 = *(_QWORD *)&v7[8 * v18];
      ++v23;
      if (v22)
        goto LABEL_24;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once();
  }
  __break(1u);
  return result;
}

uint64_t sub_23AC2AE98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  id v49;
  char *v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _DWORD *v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  os_log_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  os_log_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;

  v83 = a1;
  v80 = sub_23B1C5E4C();
  v79 = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  v3 = (char *)&v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v4);
  v89 = (uint64_t)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_23B1C5BDC();
  v88 = *(char **)(v92 - 8);
  MEMORY[0x24BDAC7A8](v92);
  v7 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DownloadProgressMonitor.URLProgressKey(0);
  v90 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v77 = (uint64_t)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v82 = (uint64_t)&v68 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v86 = (char *)&v68 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E29F0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v93 = (uint64_t)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v68 - v17;
  v19 = sub_23B1C60EC();
  v20 = *(uint64_t **)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (uint64_t *)((char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_2542DE118 != -1)
LABEL_47:
    swift_once();
  v23 = (void *)qword_2542E1540;
  *v22 = qword_2542E1540;
  ((void (*)(_QWORD *, _QWORD, unint64_t))v20[13])(v22, *MEMORY[0x24BEE5610], v19);
  v24 = v23;
  v25 = sub_23B1C6104();
  v26 = ((uint64_t (*)(_QWORD *, unint64_t))v20[1])(v22, v19);
  if ((v25 & 1) == 0)
  {
    __break(1u);
LABEL_49:
    MEMORY[0x24BDAC7A8](v26);
    *(&v68 - 2) = v25;
    sub_23AFF56B8((uint64_t (*)(uint64_t))sub_23ABD7708, (uint64_t)(&v68 - 4), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314);
  }
  v81 = v3;
  swift_beginAccess();
  v27 = *(_QWORD *)(v1 + 16);
  v28 = *(_QWORD *)(v27 + 64);
  v84 = v27 + 64;
  v29 = 1 << *(_BYTE *)(v27 + 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v19 = v30 & v28;
  v1 = (unint64_t)(v29 + 63) >> 6;
  v69 = v1 - 1;
  v31 = swift_bridgeObjectRetain();
  v32 = 0;
  v87 = v1;
  v71 = v1 - 5;
  v20 = &qword_2569E29F8;
  v91 = v31;
  v70 = v31 + 104;
  v33 = type metadata accessor for DownloadProgressMonitor.URLProgressKey;
  *(_QWORD *)&v34 = 136315138;
  v76 = v34;
  v75 = MEMORY[0x24BEE4AD8] + 8;
  v22 = (_QWORD *)v92;
  v3 = v86;
  v85 = v7;
  while (1)
  {
    v35 = v93;
    if (v19)
    {
      v36 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v94 = v32;
      v37 = v36 | (v32 << 6);
LABEL_11:
      v38 = v91;
      sub_23AA907B0(*(_QWORD *)(v91 + 48) + *(_QWORD *)(v90 + 72) * v37, v93, v33);
      v39 = *(_QWORD *)(v38 + 56);
      v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E29F8);
      *(_QWORD *)(v35 + *(int *)(v40 + 48)) = *(_QWORD *)(v39 + 8 * v37);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v35, 0, 1, v40);
      swift_retain();
      v22 = (_QWORD *)v92;
      goto LABEL_18;
    }
    v41 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
    if (v41 >= v87)
    {
      v43 = v32;
    }
    else
    {
      v42 = *(_QWORD *)(v84 + 8 * v41);
      if (v42)
        goto LABEL_15;
      v43 = v32 + 1;
      if (v32 + 2 < v87)
      {
        v42 = *(_QWORD *)(v84 + 8 * (v32 + 2));
        if (v42)
        {
          v41 = v32 + 2;
LABEL_15:
          v19 = (v42 - 1) & v42;
          v37 = __clz(__rbit64(v42)) + (v41 << 6);
          v94 = v41;
          goto LABEL_11;
        }
        v43 = v32 + 2;
        if (v32 + 3 < v87)
        {
          v42 = *(_QWORD *)(v84 + 8 * (v32 + 3));
          if (v42)
          {
            v41 = v32 + 3;
            goto LABEL_15;
          }
          v41 = v32 + 4;
          v43 = v32 + 3;
          if (v32 + 4 < v87)
          {
            v42 = *(_QWORD *)(v84 + 8 * v41);
            if (v42)
              goto LABEL_15;
            while (v71 != v32)
            {
              v42 = *(_QWORD *)(v70 + 8 * v32++);
              if (v42)
              {
                v41 = v32 + 4;
                goto LABEL_15;
              }
            }
            v43 = v69;
          }
        }
      }
    }
    v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E29F8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v35, 1, 1, v44);
    v19 = 0;
    v94 = v43;
LABEL_18:
    sub_23AA724E8(v35, (uint64_t)v18, &qword_2569E29F0);
    v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E29F8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(v18, 1, v1) == 1)
      return swift_release();
    v25 = *(_QWORD *)&v18[*(int *)(v1 + 48)];
    v45 = v33;
    sub_23AA94050((uint64_t)v18, (uint64_t)v3, v33);
    if ((*(_BYTE *)(v25
                   + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationPolicy) & 1) == 0)
      goto LABEL_7;
    v46 = v25 + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationDate;
    swift_beginAccess();
    v47 = v46;
    v1 = v89;
    sub_23AA8EFC8(v47, v89, (uint64_t *)&unk_2542E4310);
    v7 = v88;
    if ((*((unsigned int (**)(uint64_t, uint64_t, _QWORD *))v88 + 6))(v1, 1, v22) == 1)
    {
      sub_23AA8A05C(v1, (uint64_t *)&unk_2542E4310);
LABEL_7:
      sub_23AA937BC((uint64_t)v3, v33);
      swift_release();
      goto LABEL_8;
    }
    v48 = v85;
    (*((void (**)(char *, uint64_t, _QWORD *))v7 + 4))(v85, v1, v22);
    if ((objc_msgSend(*(id *)(v25 + 16), sel_isCancelled) & 1) != 0)
    {
      (*((void (**)(char *, _QWORD *))v7 + 1))(v48, v22);
      v3 = v86;
      goto LABEL_7;
    }
    v1 = sub_23B1C5B70();
    (*((void (**)(char *, _QWORD *))v7 + 1))(v48, v22);
    v3 = v86;
    if ((v1 & 1) == 0)
      goto LABEL_7;
    v49 = (id)fpfs_current_or_default_log();
    v50 = v81;
    sub_23B1C5E58();
    v51 = v82;
    v7 = (char *)v45;
    sub_23AA907B0((uint64_t)v3, v82, v45);
    v52 = sub_23B1C5E40();
    v53 = sub_23B1C6AB8();
    v78 = v53;
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (_DWORD *)swift_slowAlloc();
      v72 = v54;
      v74 = swift_slowAlloc();
      *(_QWORD *)&v97 = v74;
      *v54 = v76;
      v55 = v77;
      sub_23AA907B0(v51, v77, v45);
      v73 = v52;
      v56 = (void *)sub_23B1C5954();
      v57 = objc_msgSend(v56, sel_fp_shortDescription);

      v58 = sub_23B1C63E0();
      v60 = v59;

      v61 = v55;
      v3 = v86;
      sub_23AA937BC(v61, v45);
      v62 = sub_23AABEC68(v58, v60, (uint64_t *)&v97);
      v63 = (uint8_t *)v72;
      *(_QWORD *)(v72 + 1) = v62;
      swift_bridgeObjectRelease();
      sub_23AA937BC(v82, v45);
      v64 = v73;
      _os_log_impl(&dword_23AA66000, v73, (os_log_type_t)v78, "⌛️  cancelling download for %s by user policy", v63, 0xCu);
      v7 = (char *)v74;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v7, -1, -1);
      MEMORY[0x23B8614BC](v63, -1, -1);

      (*(void (**)(char *, uint64_t))(v79 + 8))(v81, v80);
    }
    else
    {
      sub_23AA937BC(v51, v45);

      (*(void (**)(char *, uint64_t))(v79 + 8))(v50, v80);
    }
    objc_msgSend(*(id *)(v25 + 16), sel_cancel);
    v26 = objc_sync_enter((id)v25);
    if ((_DWORD)v26)
      goto LABEL_49;
    *(_QWORD *)(v25 + 64) = 0;
    swift_release();
    v1 = v25 + 32;
    swift_beginAccess();
    sub_23AA8EFC8(v25 + 32, (uint64_t)&v95, qword_2542E5640);
    if (*((_QWORD *)&v96 + 1))
    {
      sub_23AAA159C(&v95, &v97);
      v65 = (void *)objc_opt_self();
      __swift_project_boxed_opaque_existential_1(&v97, v98);
      v7 = (char *)sub_23B1C7370();
      objc_msgSend(v65, sel__removeSubscriber_, v7);
      swift_unknownObjectRelease();
      v95 = 0u;
      v96 = 0u;
      swift_beginAccess();
      sub_23AA8A660((uint64_t)&v95, v25 + 32, qword_2542E5640);
      swift_endAccess();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
    }
    else
    {
      sub_23AA8A05C((uint64_t)&v95, qword_2542E5640);
    }
    v22 = (_QWORD *)v92;
    v66 = objc_sync_exit((id)v25);
    if ((_DWORD)v66)
    {
      MEMORY[0x24BDAC7A8](v66);
      *(&v68 - 2) = v25;
      sub_23AFF56B8((uint64_t (*)(uint64_t))sub_23ABD7710, (uint64_t)(&v68 - 4), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318);
    }
    v33 = v45;
    swift_release();
    sub_23AA937BC((uint64_t)v3, v45);
LABEL_8:
    v20 = &qword_2569E29F8;
    v32 = v94;
  }
}

uint64_t sub_23AC2B940@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  double v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;

  v5 = sub_23B1C5C54();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(v2 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_rtcReporter);
  if (v9)
  {
    v33 = v9;
    sub_23B1C5C48();
    v10 = objc_msgSend(a1, sel_totalUnitCount);
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithLongLong_, v10);
    sub_23B0DC740(2);
    v13 = v12;

    if (v13)
    {
      v32 = objc_msgSend(v13, sel_longLongValue);

    }
    else
    {
      v32 = 0;
    }
    objc_msgSend(a1, sel_fractionCompleted, v32);
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v16);
    sub_23B0DC740(2);
    v19 = v18;

    if (v19)
    {
      v20 = objc_msgSend(v19, sel_longLongValue);

    }
    else
    {
      v20 = 0;
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE850);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23B1D2550;
    strcpy((char *)(inited + 32), "operationType");
    *(_WORD *)(inited + 46) = -4864;
    v22 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 48) = 0xD00000000000001DLL;
    *(_QWORD *)(inited + 56) = 0x800000023B1FC7C0;
    *(_QWORD *)(inited + 72) = v22;
    strcpy((char *)(inited + 80), "connectionType");
    *(_BYTE *)(inited + 95) = -18;
    if (qword_2542E0FD8 != -1)
      swift_once();
    sub_23B1C6B48();
    v23 = v35;
    *(_QWORD *)(inited + 96) = v34;
    *(_QWORD *)(inited + 104) = v23;
    *(_QWORD *)(inited + 120) = v22;
    *(_QWORD *)(inited + 128) = 0x657A69536D657469;
    v24 = MEMORY[0x24BEE4008];
    v25 = v32;
    *(_QWORD *)(inited + 136) = 0xE800000000000000;
    *(_QWORD *)(inited + 144) = v25;
    *(_QWORD *)(inited + 168) = v24;
    *(_QWORD *)(inited + 176) = 0x73736572676F7270;
    *(_QWORD *)(inited + 184) = 0xE800000000000000;
    *(_QWORD *)(inited + 192) = v20;
    *(_QWORD *)(inited + 216) = v24;
    *(_QWORD *)(inited + 224) = 0x6E6F6973736573;
    *(_QWORD *)(inited + 232) = 0xE700000000000000;
    v26 = sub_23B1C5C00();
    *(_QWORD *)(inited + 264) = v22;
    *(_QWORD *)(inited + 240) = v26;
    *(_QWORD *)(inited + 248) = v27;
    v28 = sub_23AAE9EB4(inited);
    sub_23B147D30(v28);
    swift_bridgeObjectRelease();
    v29 = (void *)sub_23B1C61F4();
    swift_bridgeObjectRelease();
    v30 = v33;
    objc_msgSend(v33, sel_postReportWithCategory_type_payload_error_, 1, 1, v29, 0);

    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
    v31 = type metadata accessor for DownloadProgressMonitor.NotificationSesssion(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a2, 0, 1, v31);
  }
  else
  {
    v14 = type metadata accessor for DownloadProgressMonitor.NotificationSesssion(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

uint64_t sub_23AC2BD04(uint64_t a1, char a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  uint64_t inited;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  _BYTE v27[224];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E1528);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for DownloadProgressMonitor.NotificationSesssion(0);
  v11 = *(_QWORD *)(v10 - 8);
  result = MEMORY[0x24BDAC7A8](v10);
  v14 = &v27[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = *(void **)(v3 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_rtcReporter);
  if (v15)
  {
    sub_23AA8EFC8(a1, (uint64_t)v9, &qword_2542E1528);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      return sub_23AA8A05C((uint64_t)v9, &qword_2542E1528);
    }
    else
    {
      sub_23AA94050((uint64_t)v9, (uint64_t)v14, type metadata accessor for DownloadProgressMonitor.NotificationSesssion);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DE850);
      inited = swift_initStackObject();
      v17 = (_QWORD *)inited;
      *(_OWORD *)(inited + 16) = xmmword_23B1D1B90;
      strcpy((char *)(inited + 32), "operationType");
      *(_WORD *)(inited + 46) = -4864;
      v18 = MEMORY[0x24BEE0D00];
      *(_QWORD *)(inited + 48) = 0xD00000000000001DLL;
      *(_QWORD *)(inited + 56) = 0x800000023B1FC7C0;
      *(_QWORD *)(inited + 72) = v18;
      *(_QWORD *)(inited + 80) = 0xD000000000000011;
      *(_QWORD *)(inited + 88) = 0x800000023B1FC7E0;
      v19 = MEMORY[0x24BEE13C8];
      *(double *)(inited + 96) = a3;
      *(_QWORD *)(inited + 120) = v19;
      *(_QWORD *)(inited + 128) = 0x64616F6C6E776F64;
      v20 = 1953063287;
      if ((a2 & 1) != 0)
        v20 = 0x6C65636E6163;
      v21 = 0xE600000000000000;
      if ((a2 & 1) == 0)
        v21 = 0xE400000000000000;
      *(_QWORD *)(inited + 136) = 0xEE007963696C6F50;
      *(_QWORD *)(inited + 144) = v20;
      *(_QWORD *)(inited + 152) = v21;
      *(_QWORD *)(inited + 168) = v18;
      *(_QWORD *)(inited + 176) = 0x6E6F6973736573;
      *(_QWORD *)(inited + 184) = 0xE700000000000000;
      v22 = v15;
      v23 = sub_23B1C5BF4();
      v17[27] = v18;
      v17[24] = v23;
      v17[25] = v24;
      v25 = sub_23AAE9EB4((uint64_t)v17);
      sub_23B147D30(v25);
      swift_bridgeObjectRelease();
      v26 = (void *)sub_23B1C61F4();
      swift_bridgeObjectRelease();
      objc_msgSend(v22, sel_postReportWithCategory_type_payload_error_, 1, 1, v26, 0);

      return sub_23AA937BC((uint64_t)v14, type metadata accessor for DownloadProgressMonitor.NotificationSesssion);
    }
  }
  return result;
}

uint64_t sub_23AC2BFC8(uint64_t a1, uint64_t a2, int64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  int v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  int64_t v103;
  void (*v104)(char *, char *, uint64_t);
  int v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;

  v98 = a6;
  v100 = a5;
  v103 = a3;
  v104 = a4;
  v106 = a1;
  v97 = type metadata accessor for DownloadProgressMonitor.ApplicationRequest(0);
  MEMORY[0x24BDAC7A8](v97);
  v7 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v107 = (uint64_t)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v108 = (char *)&v96 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E29F0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v96 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E0250);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v99 = (uint64_t)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v96 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v96 - v24;
  v26 = sub_23B1C5BDC();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v96 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x24BDAC7A8](v28);
  v109 = (char *)&v96 - v32;
  MEMORY[0x24BDAC7A8](v31);
  v101 = (char *)&v96 - v33;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  v102 = result;
  if (!result)
    return result;
  v110 = v27;
  sub_23AA8EFC8(v106, (uint64_t)v25, &qword_2542E0250);
  v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DD430);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v25, 1, v35) == 1)
  {
    swift_release();
    return sub_23AA8A05C((uint64_t)v25, &qword_2542E0250);
  }
  v96 = v7;
  v37 = v25[*(int *)(v35 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v101, v25, v26);
  sub_23B1C5B28();
  v39 = v38;
  sub_23B1C5B28();
  sub_23AC2BD04((uint64_t)v104, v37, v39 - v40);
  v106 = v26;
  v105 = v37;
  if ((v37 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v23, 1, 1, v35);
    v41 = v102;
    v42 = v102 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_expirationPolicy;
    swift_beginAccess();
    sub_23AA8A660((uint64_t)v23, v42, &qword_2542E0250);
    swift_endAccess();
    v43 = objc_msgSend(*(id *)(v100 + 24), sel_executablePath);
    v44 = v110;
    v45 = (uint64_t)v101;
    if (v43)
    {
      v46 = v43;
      v47 = sub_23B1C63E0();
      v49 = v48;

      v50 = sub_23B1C5A08();
      v51 = (uint64_t)v96;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v96, v98, v50);
      v52 = (uint64_t *)(v51 + *(int *)(v97 + 20));
      *v52 = v47;
      v52[1] = v49;
      v53 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
      v54 = (uint64_t)v108;
      v55 = v106;
      v53(v108, v45, v106);
      v56 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56);
      v56(v54, 0, 1, v55);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_23AD03CA8(v54, v51);
      swift_endAccess();
      v53((char *)v54, v45, v55);
      v56(v54, 0, 1, v55);
      v41 = v102;
      swift_beginAccess();
      sub_23AD03E0C(v54, v47, v49);
      swift_endAccess();
    }
    swift_beginAccess();
    v57 = swift_bridgeObjectRetain();
    v58 = sub_23AEA4A48(v57);
    swift_bridgeObjectRelease();
    v59 = *(_QWORD *)(v58 + 16);
    if (v59)
    {
      v60 = *(_QWORD *)(type metadata accessor for DownloadProgressMonitor.URLProgressKey(0) - 8);
      v61 = v58 + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80));
      v62 = *(_QWORD *)(v60 + 72);
      swift_retain();
      v63 = v105;
      do
      {
        sub_23AC2CA08(v61, v41, v63, v45);
        v61 += v62;
        --v59;
      }
      while (v59);
      swift_release_n();
    }
    else
    {
      swift_release();
    }
    v95 = v106;
    goto LABEL_42;
  }
  v64 = *(int *)(v35 + 48);
  v104 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
  v104(v23, v101, v26);
  v23[v64] = v37;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v23, 0, 1, v35);
  v65 = v99;
  sub_23AA724E8((uint64_t)v23, v99, &qword_2542E0250);
  v66 = v102 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_expirationPolicy;
  swift_beginAccess();
  sub_23AA8A660(v65, v66, &qword_2542E0250);
  swift_endAccess();
  v67 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v68 = (void *)sub_23B1C63BC();
  v69 = objc_msgSend(v67, sel_initWithSuiteName_, v68);

  if (v69)
  {
    v70 = (void *)sub_23B1C63BC();
    objc_msgSend(v69, sel_doubleForKey_, v70);

  }
  v104(v30, v101, v106);
  sub_23B1C5B40();
  v71 = v102;
  swift_beginAccess();
  v72 = *(_QWORD *)(v71 + 16);
  v73 = *(_QWORD *)(v72 + 64);
  v100 = v72 + 64;
  v74 = 1 << *(_BYTE *)(v72 + 32);
  v75 = -1;
  if (v74 < 64)
    v75 = ~(-1 << v74);
  v76 = v75 & v73;
  v103 = (unint64_t)(v74 + 63) >> 6;
  v99 = v103 - 1;
  result = swift_bridgeObjectRetain();
  v77 = 0;
  if (!v76)
    goto LABEL_20;
LABEL_18:
  v84 = __clz(__rbit64(v76));
  v76 &= v76 - 1;
  v85 = v84 | (v77 << 6);
  while (2)
  {
    v86 = *(_QWORD *)(v72 + 48);
    v87 = type metadata accessor for DownloadProgressMonitor.URLProgressKey(0);
    sub_23AA907B0(v86 + *(_QWORD *)(*(_QWORD *)(v87 - 8) + 72) * v85, (uint64_t)v15, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
    v88 = *(_QWORD *)(v72 + 56);
    v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E29F8);
    *(_QWORD *)&v15[*(int *)(v89 + 48)] = *(_QWORD *)(v88 + 8 * v85);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v15, 0, 1, v89);
    swift_retain();
    while (1)
    {
      sub_23AA724E8((uint64_t)v15, (uint64_t)v17, &qword_2569E29F0);
      v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E29F8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 48))(v17, 1, v94) == 1)
      {
        swift_release();
        v44 = v110;
        v95 = v106;
        (*(void (**)(char *, uint64_t))(v110 + 8))(v109, v106);
        v45 = (uint64_t)v101;
LABEL_42:
        sub_23AC2AE98(v45);
        swift_release();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v45, v95);
      }
      v78 = *(_QWORD *)&v17[*(int *)(v94 + 48)];
      *(_BYTE *)(v78 + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationPolicy) = v105;
      v79 = v108;
      v80 = v106;
      v104(v108, v109, v106);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v79, 0, 1, v80);
      v81 = (uint64_t)v79;
      v82 = v107;
      sub_23AA724E8(v81, v107, (uint64_t *)&unk_2542E4310);
      v83 = v78 + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationDate;
      swift_beginAccess();
      sub_23AA8A660(v82, v83, (uint64_t *)&unk_2542E4310);
      swift_endAccess();
      swift_release();
      result = sub_23AA937BC((uint64_t)v17, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
      if (v76)
        goto LABEL_18;
LABEL_20:
      v90 = v77 + 1;
      if (__OFADD__(v77, 1))
      {
        __break(1u);
        goto LABEL_45;
      }
      if (v90 < v103)
      {
        v91 = *(_QWORD *)(v100 + 8 * v90);
        if (v91)
          goto LABEL_23;
        v92 = v77 + 2;
        ++v77;
        if (v90 + 1 < v103)
        {
          v91 = *(_QWORD *)(v100 + 8 * v92);
          if (v91)
            goto LABEL_26;
          v77 = v90 + 1;
          if (v90 + 2 < v103)
          {
            v91 = *(_QWORD *)(v100 + 8 * (v90 + 2));
            if (v91)
            {
              v90 += 2;
              goto LABEL_23;
            }
            v92 = v90 + 3;
            v77 = v90 + 2;
            if (v90 + 3 < v103)
              break;
          }
        }
      }
LABEL_37:
      v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E29F8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v15, 1, 1, v93);
      v76 = 0;
    }
    v91 = *(_QWORD *)(v100 + 8 * v92);
    if (v91)
    {
LABEL_26:
      v90 = v92;
LABEL_23:
      v76 = (v91 - 1) & v91;
      v85 = __clz(__rbit64(v91)) + (v90 << 6);
      v77 = v90;
      continue;
    }
    break;
  }
  while (1)
  {
    v90 = v92 + 1;
    if (__OFADD__(v92, 1))
      break;
    if (v90 >= v103)
    {
      v77 = v99;
      goto LABEL_37;
    }
    v91 = *(_QWORD *)(v100 + 8 * v90);
    ++v92;
    if (v91)
      goto LABEL_23;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_23AC2CA08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[8];

  v46 = a4;
  LODWORD(v44) = a3;
  v45 = (uint8_t *)sub_23B1C5BDC();
  v6 = *((_QWORD *)v45 - 1);
  MEMORY[0x24BDAC7A8](v45);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E16D8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DownloadProgressMonitor.URLProgressKey(0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v42 - v16;
  v18 = sub_23B1C5E4C();
  v47 = *(_QWORD *)(v18 - 8);
  v48 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v21 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(v21 + 16))
  {
    swift_bridgeObjectRetain();
    v43 = a1;
    v22 = sub_23ACD5C3C(a1);
    if ((v23 & 1) != 0)
    {
      v24 = v44 & 1;
      v25 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v22);
      swift_retain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v25 + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationPolicy) = v24;
      v26 = a2 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_lastChangeDate;
      swift_beginAccess();
      v27 = v45;
      (*(void (**)(char *, uint64_t, uint8_t *))(v6 + 16))(v8, v26, v45);
      v28 = v46;
      sub_23AC285F8((uint64_t)v8, v11);
      (*(void (**)(char *, uint8_t *))(v6 + 8))(v8, v27);
      v29 = type metadata accessor for DownloadProgressNotificationReason(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v11, 1, v29) == 1)
      {
        swift_release();
        return sub_23AA8A05C((uint64_t)v11, &qword_2542E16D8);
      }
      else
      {
        sub_23AA8A05C((uint64_t)v11, &qword_2542E16D8);
        sub_23AC2F838(v43, v28);
        return swift_release();
      }
    }
    swift_bridgeObjectRelease();
    a1 = v43;
  }
  v31 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  sub_23AA907B0(a1, (uint64_t)v17, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
  v32 = sub_23B1C5E40();
  v33 = sub_23B1C6AA0();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    v46 = swift_slowAlloc();
    v49[0] = v46;
    v45 = v34;
    *(_DWORD *)v34 = 136315138;
    v44 = v34 + 4;
    sub_23AA907B0((uint64_t)v17, (uint64_t)v15, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
    v35 = (void *)sub_23B1C5954();
    v36 = objc_msgSend(v35, sel_fp_shortDescription);

    v37 = sub_23B1C63E0();
    v39 = v38;

    sub_23AA937BC((uint64_t)v15, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
    v49[7] = sub_23AABEC68(v37, v39, v49);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    sub_23AA937BC((uint64_t)v17, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
    v40 = v45;
    _os_log_impl(&dword_23AA66000, v32, v33, "📸  did not have context for url %s", v45, 0xCu);
    v41 = v46;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v41, -1, -1);
    MEMORY[0x23B8614BC](v40, -1, -1);
  }
  else
  {
    sub_23AA937BC((uint64_t)v17, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v20, v48);
}

uint64_t sub_23AC2CE60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  double v15;
  double v16;
  double v17;
  uint64_t ObjectType;
  uint64_t result;
  void (*v20)(_QWORD *, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;

  v0 = sub_23B1C6020();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (uint64_t *)((char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_23B1C60E0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v22 - v9;
  v11 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v12 = (void *)sub_23B1C63BC();
  v13 = objc_msgSend(v11, sel_initWithSuiteName_, v12);

  if (v13)
  {
    v14 = (void *)sub_23B1C63BC();
    objc_msgSend(v13, sel_doubleForKey_, v14);
    v16 = v15;

    if (v16 == 0.0)
      v17 = 30.0;
    else
      v17 = v16 * 0.5;
  }
  else
  {
    v17 = 30.0;
  }
  ObjectType = swift_getObjectType();
  result = sub_23B1C60C8();
  if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v17 < 9.22337204e18)
  {
    *v3 = (uint64_t)v17;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE5420], v0);
    MEMORY[0x23B85EA14](v8, v3);
    v20 = *(void (**)(_QWORD *, uint64_t))(v1 + 8);
    v20(v3, v0);
    v21 = *(void (**)(char *, uint64_t))(v5 + 8);
    v21(v8, v4);
    sub_23AAB602C(v3);
    MEMORY[0x23B85F53C](v10, v3, ObjectType, v17);
    v20(v3, v0);
    v21(v10, v4);
    return sub_23B1C6BB4();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_23AC2D0CC@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  void *v45;
  void (*v46)(char *, unint64_t, uint64_t);
  id v47;
  id v48;
  uint64_t v49;
  id v50;
  id v51;
  void *v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  double v68;
  double v69;
  id v70;
  void *v71;
  id v72;
  void *v73;
  double v74;
  double v75;
  BOOL v76;
  uint64_t v77;
  char *v78;
  char *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  char v103;
  id v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  NSObject *v109;
  os_log_type_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  id v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  void (*v132)(uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  id v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(char *, uint64_t);
  void (*v152)(char *, char *, uint64_t);
  uint64_t v153;
  char *v154;
  void (*v155)(char *, char *, uint64_t);
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  id v177;
  void (*v178)(char *, unint64_t, uint64_t);
  void (*v179)(char *, uint64_t, uint64_t);
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  id v186;
  uint64_t v187;
  uint64_t aBlock[6];
  char *v189;

  v182 = a5;
  v186 = a4;
  v177 = a3;
  v176 = a2;
  v185 = a1;
  v175 = a6;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E1528);
  MEMORY[0x24BDAC7A8](v6);
  v155 = (void (*)(char *, char *, uint64_t))((char *)&v154 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E16D8);
  MEMORY[0x24BDAC7A8](v8);
  v168 = (char *)&v154 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = type metadata accessor for DownloadProgressNotificationReason(0);
  v166 = *(_QWORD *)(v167 - 8);
  MEMORY[0x24BDAC7A8](v167);
  v169 = (uint64_t)&v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E0250);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v154 = (char *)&v154 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v165 = (uint64_t)&v154 - v14;
  v15 = sub_23B1C5A08();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v160 = (char *)&v154 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = v18;
  MEMORY[0x24BDAC7A8](v17);
  v156 = (char *)&v154 - v19;
  v172 = sub_23B1C5E4C();
  v171 = *(_QWORD *)(v172 - 8);
  v20 = MEMORY[0x24BDAC7A8](v172);
  v180 = (char *)&v154 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v157 = (char *)&v154 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v23);
  v161 = (char *)&v154 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DownloadProgressMonitor.ApplicationRequest(0);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v154 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_23B1C5BDC();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v162 = (char *)&v154 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x24BDAC7A8](v30);
  v158 = (char *)&v154 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)&v154 - v34;
  v36 = type metadata accessor for DownloadProgressMonitor.URLProgressKey(0);
  v173 = *(_QWORD *)(v36 - 8);
  v37 = MEMORY[0x24BDAC7A8](v36);
  v164 = (uint64_t)&v154 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x24BDAC7A8](v37);
  v170 = (char *)&v154 - v40;
  MEMORY[0x24BDAC7A8](v39);
  v42 = (char *)&v154 - v41;
  v163 = v16;
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v181 = v15;
  v179 = v43;
  v43((char *)&v154 - v41, v185, v15);
  v174 = v36;
  v44 = *(int *)(v36 + 20);
  v189 = v42;
  v45 = v176;
  *(_QWORD *)&v42[v44] = v176;
  v183 = v29;
  v46 = *(void (**)(char *, unint64_t, uint64_t))(v29 + 16);
  v184 = v28;
  v178 = v46;
  v46(v35, (unint64_t)v186, v28);
  type metadata accessor for DownloadContext(0);
  swift_allocObject();
  v47 = v45;
  v48 = v177;
  v176 = v35;
  v49 = v182;
  v50 = (id)sub_23AC27C40(v48, v47, (uint64_t)v35);
  v51 = objc_msgSend(v47, sel_executablePath);
  v177 = v50;
  if (v51)
  {
    v52 = v51;
    v53 = (void *)sub_23B1C63E0();
    v55 = v54;

    v179(v27, v185, v181);
    v56 = &v27[*(int *)(v25 + 20)];
    *(_QWORD *)v56 = v53;
    *((_QWORD *)v56 + 1) = v55;
    swift_beginAccess();
    v57 = *(_QWORD *)(v49 + 24);
    v58 = v49;
    if (*(_QWORD *)(v57 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v59 = sub_23ACD5B98((uint64_t)v27);
      v60 = v184;
      v61 = v162;
      v63 = v183;
      v64 = (uint64_t)v161;
      if ((v62 & 1) != 0)
      {
        v178(v161, *(_QWORD *)(v57 + 56) + *(_QWORD *)(v183 + 72) * v59, v184);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v64, 0, 1, v60);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v183 + 56))(v161, 1, 1, v184);
      }
      v65 = v63;
      v66 = v61;
      swift_bridgeObjectRelease();
    }
    else
    {
      v65 = v183;
      v64 = (uint64_t)v161;
      v60 = v184;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v183 + 56))(v161, 1, 1, v184);
      swift_bridgeObjectRetain();
      v66 = v162;
    }
    sub_23AA937BC((uint64_t)v27, type metadata accessor for DownloadProgressMonitor.ApplicationRequest);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v64, 1, v60) == 1)
    {
      swift_bridgeObjectRelease();
      sub_23AA8A05C(v64, (uint64_t *)&unk_2542E4310);
    }
    else
    {
      v67 = v158;
      (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v158, v64, v60);
      sub_23B1C5B4C();
      v69 = v68;
      v70 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
      v71 = (void *)sub_23B1C63BC();
      v72 = objc_msgSend(v70, sel_initWithSuiteName_, v71);

      if (v72
        && (v73 = (void *)sub_23B1C63BC(),
            objc_msgSend(v72, sel_doubleForKey_, v73),
            v75 = v74,
            v72,
            v73,
            v75 != 0.0))
      {
        v76 = v69 < v75;
      }
      else
      {
        v76 = v69 < 1800.0;
      }
      v77 = v184;
      v78 = v157;
      v79 = v156;
      if (v76)
      {
        v186 = v53;
        v80 = (id)fpfs_current_or_default_log();
        sub_23B1C5E58();
        v81 = v181;
        v179(v79, v185, v181);
        v178(v66, (unint64_t)v67, v77);
        swift_bridgeObjectRetain();
        v82 = v77;
        v83 = sub_23B1C5E40();
        v84 = sub_23B1C6AB8();
        v85 = v84;
        if (os_log_type_enabled(v83, v84))
        {
          v86 = swift_slowAlloc();
          LODWORD(v185) = v85;
          v87 = v86;
          v182 = swift_slowAlloc();
          aBlock[0] = v182;
          *(_DWORD *)v87 = 136315650;
          swift_bridgeObjectRetain();
          v187 = sub_23AABEC68((uint64_t)v186, v55, aBlock);
          sub_23B1C6CBC();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v87 + 12) = 2080;
          v88 = (void *)sub_23B1C5954();
          v89 = objc_msgSend(v88, sel_fp_shortDescription);

          v90 = sub_23B1C63E0();
          v92 = v91;

          v187 = sub_23AABEC68(v90, v92, aBlock);
          sub_23B1C6CBC();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v163 + 8))(v79, v181);
          *(_WORD *)(v87 + 22) = 2080;
          sub_23AA7E38C((unint64_t *)&unk_2542E0240, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
          v93 = v184;
          v94 = sub_23B1C7304();
          v187 = sub_23AABEC68(v94, v95, aBlock);
          sub_23B1C6CBC();
          swift_bridgeObjectRelease();
          v96 = *(void (**)(char *, uint64_t))(v183 + 8);
          v96(v66, v93);
          _os_log_impl(&dword_23AA66000, v83, (os_log_type_t)v185, "⏳  application at %s is not allowed to download %s: user cancelled a similar request at %s", (uint8_t *)v87, 0x20u);
          v97 = v182;
          swift_arrayDestroy();
          MEMORY[0x23B8614BC](v97, -1, -1);
          MEMORY[0x23B8614BC](v87, -1, -1);
          swift_release();

          (*(void (**)(char *, uint64_t))(v171 + 8))(v157, v172);
          v96(v158, v93);
        }
        else
        {

          v150 = *(void (**)(char *, uint64_t))(v183 + 8);
          v150(v66, v82);
          (*(void (**)(char *, uint64_t))(v163 + 8))(v79, v81);
          swift_release();
          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v171 + 8))(v78, v172);
          v150(v67, v82);
        }
        v149 = (uint64_t)v189;
        goto LABEL_36;
      }
      (*(void (**)(char *, uint64_t))(v183 + 8))(v67, v184);
      swift_bridgeObjectRelease();
    }
    v49 = v58;
    v50 = v177;
  }
  v98 = v49 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_expirationPolicy;
  swift_beginAccess();
  v99 = v165;
  sub_23AA8EFC8(v98, v165, &qword_2542E0250);
  v100 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DD430);
  v161 = *(char **)(v100 - 8);
  v101 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t))v161 + 6))(v99, 1, v100);
  v102 = v49;
  v162 = (char *)v100;
  if (v101)
    v103 = 2;
  else
    v103 = *(_BYTE *)(v99 + *(int *)(v100 + 48));
  v104 = v186;
  v105 = v180;
  v106 = (uint64_t)v170;
  sub_23AA8A05C(v99, &qword_2542E0250);
  v170 = (char *)OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationPolicy;
  *((_BYTE *)v50 + OBJC_IVAR____TtC9libfssyncP33_48B452DE321F44F46865C1107F5BBC8315DownloadContext_expirationPolicy) = v103;
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v49 + 16) + 16))
  {
    v107 = v49 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_lastChangeDate;
    swift_beginAccess();
    (*(void (**)(uint64_t, id, uint64_t))(v183 + 24))(v107, v104, v184);
    swift_endAccess();
  }
  v108 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  sub_23AA907B0((uint64_t)v189, v106, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
  swift_retain_n();
  v109 = sub_23B1C5E40();
  v110 = sub_23B1C6AB8();
  v111 = v110;
  if (os_log_type_enabled(v109, v110))
  {
    v112 = swift_slowAlloc();
    v158 = (char *)swift_slowAlloc();
    aBlock[0] = (uint64_t)v158;
    *(_DWORD *)v112 = 136315394;
    v156 = (char *)(v112 + 4);
    v165 = v49 + 16;
    v113 = v164;
    sub_23AA907B0(v106, v164, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
    LODWORD(v157) = v111;
    v114 = (void *)sub_23B1C5954();
    v115 = objc_msgSend(v114, sel_fp_shortDescription);

    v116 = sub_23B1C63E0();
    v118 = v117;

    sub_23AA937BC(v113, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
    v187 = sub_23AABEC68(v116, v118, aBlock);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    sub_23AA937BC(v106, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
    *(_WORD *)(v112 + 12) = 2080;
    swift_retain();
    v119 = sub_23AC281F4();
    v121 = v120;
    swift_release();
    v122 = v119;
    v123 = v113;
    v187 = sub_23AABEC68(v122, v121, aBlock);
    v104 = v186;
    v124 = v184;
    sub_23B1C6CBC();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23AA66000, v109, (os_log_type_t)v157, "⏳  monitoring progress from %s: %s", (uint8_t *)v112, 0x16u);
    v125 = v158;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v125, -1, -1);
    v126 = v112;
    v102 = v182;
    MEMORY[0x23B8614BC](v126, -1, -1);

    v127 = (uint64_t)v50;
    (*(void (**)(char *, uint64_t))(v171 + 8))(v180, v172);
  }
  else
  {
    sub_23AA937BC(v106, type metadata accessor for DownloadProgressMonitor.URLProgressKey);

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v171 + 8))(v105, v172);
    v124 = v184;
    v123 = v164;
    v127 = (uint64_t)v50;
  }
  sub_23AA907B0((uint64_t)v189, v123, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v187 = *(_QWORD *)(v102 + 16);
  *(_QWORD *)(v102 + 16) = 0x8000000000000000;
  sub_23AD2594C(v127, v123, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v102 + 16) = v187;
  swift_bridgeObjectRelease();
  sub_23AA937BC(v123, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
  swift_endAccess();
  v129 = v102 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_lastChangeDate;
  swift_beginAccess();
  v130 = (uint64_t)v176;
  v178(v176, v129, v124);
  v131 = v168;
  sub_23AC285F8(v130, v168);
  v132 = *(void (**)(uint64_t, uint64_t))(v183 + 8);
  v132(v130, v124);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v166 + 48))(v131, 1, v167) != 1)
  {
    sub_23AA94050((uint64_t)v131, v169, type metadata accessor for DownloadProgressNotificationReason);
    if ((sub_23AC29618(v127) & 1) == 0
      && (v170[v127] & 1) == 0
      && sub_23AC30E14() != 2)
    {
      sub_23B1C5BD0();
      v152 = v155;
      sub_23AC2B940(*(void **)(v127 + 16), (uint64_t)v155);
      swift_weakInit();
      v153 = (uint64_t)v154;
      (*((void (**)(char *, uint64_t, uint64_t, char *))v161 + 7))(v154, 1, 1, v162);
      swift_retain();
      sub_23AC2BFC8(v153, (uint64_t)aBlock, v130, v152, v127, v185);
      sub_23AA8A05C(v153, &qword_2542E0250);
      swift_release();
      sub_23AA8A05C((uint64_t)v152, &qword_2542E1528);
      v132(v130, v124);
      swift_weakDestroy();
      sub_23AA937BC(v169, type metadata accessor for DownloadProgressNotificationReason);
      goto LABEL_29;
    }
    v148 = (uint64_t)v189;
    sub_23AC2F838((uint64_t)v189, (uint64_t)v104);
    swift_release();
    sub_23AA937BC(v169, type metadata accessor for DownloadProgressNotificationReason);
    v149 = v148;
LABEL_36:
    sub_23AA937BC(v149, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
    v147 = 1;
    v146 = v175;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v173 + 56))(v146, v147, 1, v174);
  }
  sub_23AA8A05C((uint64_t)v131, &qword_2542E16D8);
LABEL_29:
  v186 = (id)objc_opt_self();
  v133 = v185;
  v184 = sub_23B1C5954();
  v134 = swift_allocObject();
  swift_weakInit();
  v135 = swift_allocObject();
  swift_weakInit();
  v136 = v160;
  v137 = v181;
  v179(v160, v133, v181);
  v138 = v163;
  v139 = (*(unsigned __int8 *)(v163 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v163 + 80);
  v140 = (v159 + v139 + 7) & 0xFFFFFFFFFFFFFFF8;
  v141 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v138 + 32))(v141 + v139, v136, v137);
  *(_QWORD *)(v141 + v140) = v134;
  *(_QWORD *)(v141 + ((v140 + 15) & 0xFFFFFFFFFFFFFFF8)) = v135;
  aBlock[4] = (uint64_t)sub_23AC30F9C;
  aBlock[5] = v141;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_23B075860;
  aBlock[3] = (uint64_t)&block_descriptor_17_0;
  v142 = _Block_copy(aBlock);
  swift_release();
  v143 = (void *)v184;
  v144 = objc_msgSend(v186, sel__addSubscriberForFileURL_withPublishingHandler_, v184, v142);
  _Block_release(v142);

  sub_23B1C6D7C();
  swift_unknownObjectRelease();
  sub_23AA724E8((uint64_t)aBlock, (uint64_t)&v187, qword_2542E5640);
  v145 = v177;
  swift_beginAccess();
  sub_23AA8A660((uint64_t)&v187, (uint64_t)v145 + 32, qword_2542E5640);
  swift_endAccess();
  swift_release();
  v146 = v175;
  sub_23AA94050((uint64_t)v189, v175, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
  v147 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v173 + 56))(v146, v147, 1, v174);
}

uint64_t (*sub_23AC2E4D4(void *a1, uint64_t a2, char *a3, NSObject *a4))()
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  char *v29;
  id v30;
  BOOL v31;
  uint64_t Strong;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t (*result)();
  id v47;
  NSObject *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  _QWORD *v52;
  NSObject *v53;
  id v54;
  void (*v55)(char *, uint64_t, uint64_t);
  id v56;
  char *v57;
  id v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  id v77;
  char *v78;
  os_log_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  os_log_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t aBlock[6];
  uint64_t v91;

  v85 = a4;
  v86 = a3;
  v88 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v87 = (uint64_t)&v81 - v9;
  v10 = sub_23B1C5E4C();
  v89 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v81 - v14;
  v16 = sub_23B1C5A08();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v81 - v21;
  if (objc_msgSend(a1, sel_fp_isOfFileOperationKind_, *MEMORY[0x24BDD1188]))
  {
    v23 = objc_msgSend(a1, sel_fileURL);
    if (!v23)
      goto LABEL_13;
    v24 = v23;
    v84 = v17;
    v25 = v16;
    v26 = v10;
    v27 = (void *)sub_23B1C5954();
    v28 = objc_msgSend(v24, sel_fp_relationshipToItemAtURL_, v27);
    v83 = v22;
    v29 = v15;
    v30 = v28;

    v10 = v26;
    v16 = v25;
    v31 = v30 == (id)1;
    v15 = v29;
    v20 = (char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    v22 = v83;
    v17 = v84;
    if (v31)
    {
      swift_beginAccess();
      Strong = swift_weakLoadStrong();
      if (Strong)
      {
        v33 = Strong;
        swift_beginAccess();
        v34 = swift_weakLoadStrong();
        if (v34)
        {
          if (qword_2542DE118 != -1)
            swift_once();
          v35 = qword_2542E1540;
          v37 = v83;
          v36 = v84;
          (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v83, v88, v16);
          v38 = (*(unsigned __int8 *)(v36 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
          v39 = (v18 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
          v40 = swift_allocObject();
          v41 = v16;
          v42 = v40;
          *(_QWORD *)(v40 + 16) = a1;
          (*(void (**)(unint64_t, char *, uint64_t))(v36 + 32))(v40 + v38, v37, v41);
          *(_QWORD *)(v42 + v39) = v34;
          *(_QWORD *)(v42 + ((v39 + 15) & 0xFFFFFFFFFFFFFFF8)) = v33;
          v43 = swift_allocObject();
          *(_QWORD *)(v43 + 16) = sub_23AC31098;
          *(_QWORD *)(v43 + 24) = v42;
          aBlock[4] = (uint64_t)sub_23AB33690;
          aBlock[5] = v43;
          aBlock[0] = MEMORY[0x24BDAC760];
          aBlock[1] = 1107296256;
          aBlock[2] = (uint64_t)sub_23B1A764C;
          aBlock[3] = (uint64_t)&block_descriptor_27;
          v44 = _Block_copy(aBlock);
          v45 = a1;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_release();
          dispatch_sync(v35, v44);
          swift_release();
          _Block_release(v44);
          LOBYTE(v44) = swift_isEscapingClosureAtFileLocation();
          result = (uint64_t (*)())swift_release();
          if ((v44 & 1) != 0)
          {
            __break(1u);
          }
          else
          {
            swift_release();
            return sub_23AC310F8;
          }
        }
        else
        {
          swift_release();
          return (uint64_t (*)())nullsub_1;
        }
      }
      else
      {
        return (uint64_t (*)())nullsub_1;
      }
    }
    else
    {
LABEL_13:
      v54 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      v55 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
      v55(v20, v88, v16);
      v56 = a1;
      v57 = v20;
      v58 = v56;
      v59 = v16;
      v60 = sub_23B1C5E40();
      LODWORD(v88) = sub_23B1C6A94();
      if (os_log_type_enabled(v60, (os_log_type_t)v88))
      {
        v85 = v60;
        v86 = v57;
        v61 = v59;
        v62 = swift_slowAlloc();
        v83 = (char *)swift_slowAlloc();
        v84 = swift_slowAlloc();
        aBlock[0] = v84;
        *(_DWORD *)v62 = 136315650;
        v63 = objc_msgSend(v58, sel_fileURL);
        if (v63)
        {
          v64 = v63;
          sub_23B1C59CC();

          v65 = 0;
        }
        else
        {
          v65 = 1;
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v8, v65, 1, v61);
        v67 = (uint64_t)v8;
        v68 = v87;
        sub_23AA724E8(v67, v87, (uint64_t *)&unk_2542E6740);
        v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v68, 1, v61);
        v82 = v15;
        if (v69)
        {
          sub_23AA8A05C(v68, (uint64_t *)&unk_2542E6740);
          v70 = v61;
          v71 = 0xE600000000000000;
          v72 = 0x3E656E6F6E3CLL;
        }
        else
        {
          v55(v22, v68, v61);
          sub_23AA8A05C(v68, (uint64_t *)&unk_2542E6740);
          v70 = v61;
          v72 = sub_23B1C58D0();
          v71 = v73;
          (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v61);
        }
        v91 = sub_23AABEC68(v72, v71, aBlock);
        sub_23B1C6CBC();

        swift_bridgeObjectRelease();
        *(_WORD *)(v62 + 12) = 2080;
        sub_23AA7E38C((unint64_t *)&qword_2542DD420, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        v74 = v86;
        v75 = sub_23B1C7304();
        v91 = sub_23AABEC68(v75, v76, aBlock);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v17 + 8))(v74, v70);
        *(_WORD *)(v62 + 22) = 2112;
        v91 = (uint64_t)v58;
        v77 = v58;
        sub_23B1C6CBC();
        v78 = v83;
        *(_QWORD *)v83 = v58;

        v79 = v85;
        _os_log_impl(&dword_23AA66000, v85, (os_log_type_t)v88, "⏳  ignoring progress on the wrong URL %s != %s: %@", (uint8_t *)v62, 0x20u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v78, -1, -1);
        v80 = v84;
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v80, -1, -1);
        MEMORY[0x23B8614BC](v62, -1, -1);

        (*(void (**)(char *, uint64_t))(v89 + 8))(v82, v10);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v17 + 8))(v57, v59);
        (*(void (**)(char *, uint64_t))(v89 + 8))(v15, v10);
      }
      return (uint64_t (*)())nullsub_1;
    }
  }
  else
  {
    v47 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v48 = a1;
    v49 = sub_23B1C5E40();
    v50 = sub_23B1C6A94();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      v52 = (_QWORD *)swift_slowAlloc();
      v88 = v10;
      *(_DWORD *)v51 = 138412290;
      aBlock[0] = (uint64_t)v48;
      v53 = v48;
      v10 = v88;
      sub_23B1C6CBC();
      *v52 = v48;

      _os_log_impl(&dword_23AA66000, v49, v50, "⏳  ignoring progress with wrong kind: %@", v51, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v52, -1, -1);
      MEMORY[0x23B8614BC](v51, -1, -1);
    }
    else
    {

      v49 = v48;
    }
    v66 = v89;

    (*(void (**)(char *, uint64_t))(v66 + 8))(v13, v10);
    return (uint64_t (*)())nullsub_1;
  }
  return result;
}

uint64_t sub_23AC2EDAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v62[2];
  os_log_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;

  v89 = a4;
  v90 = a3;
  v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2A18);
  v81 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v80 = (char *)v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2A20);
  v84 = *(_QWORD *)(v7 - 8);
  v85 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v82 = (char *)v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2A28);
  v87 = *(_QWORD *)(v9 - 8);
  v88 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v86 = (char *)v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = sub_23B1C6B30();
  v11 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79);
  v13 = (char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2A30);
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  v71 = (char *)v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2A38);
  v75 = *(_QWORD *)(v15 - 8);
  v76 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v74 = (char *)v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2569E2A40);
  v78 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v77 = (char *)v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23B1C5A08();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_23B1C5E4C();
  v69 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v24 = (char *)v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a2, v19);
  v26 = a1;
  v27 = sub_23B1C5E40();
  v28 = sub_23B1C6A94();
  v29 = v28;
  v30 = os_log_type_enabled(v27, v28);
  v91 = v26;
  if (v30)
  {
    v31 = swift_slowAlloc();
    v67 = v17;
    v32 = v31;
    v33 = swift_slowAlloc();
    v64 = v29;
    v34 = (_QWORD *)v33;
    v65 = swift_slowAlloc();
    v92 = (uint64_t)v26;
    v93 = v65;
    *(_DWORD *)v32 = 138412546;
    v63 = v27;
    v68 = v13;
    v66 = v11;
    v35 = v26;
    sub_23B1C6CBC();
    *v34 = v91;

    *(_WORD *)(v32 + 12) = 2080;
    v62[1] = v32 + 14;
    v36 = (void *)sub_23B1C5954();
    v37 = objc_msgSend(v36, sel_fp_shortDescription);

    v38 = sub_23B1C63E0();
    v40 = v39;

    v13 = v68;
    v92 = sub_23AABEC68(v38, v40, &v93);
    v11 = v66;
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    v41 = v63;
    _os_log_impl(&dword_23AA66000, v63, (os_log_type_t)v64, "⏳  subscribed to progress %@ for URL %s", (uint8_t *)v32, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v34, -1, -1);
    v42 = v65;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v42, -1, -1);
    v43 = v32;
    v17 = v67;
    MEMORY[0x23B8614BC](v43, -1, -1);

  }
  else
  {

    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }
  (*(void (**)(char *, uint64_t))(v69 + 8))(v24, v70);
  swift_getKeyPath();
  v44 = v71;
  sub_23B1C58B8();
  swift_release();
  sub_23B1C6B24();
  if (qword_2542DE118 != -1)
    swift_once();
  v93 = qword_2542E1540;
  v70 = sub_23AA9F52C(0, (unint64_t *)&qword_2542E5500);
  sub_23AAB5A28((unint64_t *)&unk_2569E2A50, &qword_2569E2A30, MEMORY[0x24BDD0230]);
  sub_23AAB635C();
  v45 = v73;
  v46 = v74;
  sub_23B1C5F9C();
  v47 = *(void (**)(char *, uint64_t))(v11 + 8);
  v48 = v79;
  v47(v13, v79);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v44, v45);
  v73 = sub_23B1C5BDC();
  sub_23AAB5A28(&qword_2569E2A60, &qword_2569E2A38, MEMORY[0x24BDB9988]);
  v49 = v76;
  v50 = v77;
  sub_23B1C5F84();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v46, v49);
  swift_getKeyPath();
  v51 = v89;
  v93 = v89;
  sub_23AAB5A28(&qword_2569E2A68, (uint64_t *)&unk_2569E2A40, MEMORY[0x24BDB96C0]);
  v52 = sub_23B1C5FB4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v50, v17);
  v53 = v90;
  *(_QWORD *)(v90 + 64) = v52;
  swift_release();
  swift_getKeyPath();
  v54 = v80;
  sub_23B1C58B8();
  swift_release();
  sub_23B1C6B24();
  v93 = qword_2542E1540;
  sub_23AAB5A28(&qword_2569E2A70, &qword_2569E2A18, MEMORY[0x24BDD0230]);
  v56 = v82;
  v55 = v83;
  sub_23B1C5F9C();
  v47(v13, v48);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v54, v55);
  sub_23AAB5A28(&qword_2569E2A78, &qword_2569E2A20, MEMORY[0x24BDB9988]);
  v57 = v85;
  v58 = v86;
  sub_23B1C5F84();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v56, v57);
  swift_getKeyPath();
  v93 = v51;
  sub_23AAB5A28(qword_2569E2A80, &qword_2569E2A28, MEMORY[0x24BDB96C0]);
  v59 = v88;
  v60 = sub_23B1C5FB4();
  swift_release();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v58, v59);
  *(_QWORD *)(v53 + 72) = v60;
  return swift_release();
}

uint64_t sub_23AC2F64C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_lastChangeDate;
  swift_beginAccess();
  v4 = sub_23B1C5BDC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t sub_23AC2F6B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = sub_23B1C5BDC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *a2 + OBJC_IVAR____TtC9libfssync23DownloadProgressMonitor_lastChangeDate;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v8, v7, v4);
  return swift_endAccess();
}

uint64_t sub_23AC2F778@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  void *v8;
  id v9;

  swift_beginAccess();
  v6 = sub_23B1827C0(a1);
  result = swift_endAccess();
  if (v6)
  {
    v8 = (void *)swift_retain();
    sub_23B0DA3D8(v8, v6);
    sub_23AC2AAEC(a2);
    v9 = *(id *)(v6 + 16);
    result = swift_release();
  }
  else
  {
    v9 = 0;
  }
  *a3 = v9;
  return result;
}

uint64_t sub_23AC2F838(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v4 = sub_23B1C60EC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_2542DE118 != -1)
    swift_once();
  v8 = qword_2542E1540;
  *v7 = qword_2542E1540;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEE5610], v4);
  v9 = (id)v8;
  LOBYTE(v8) = sub_23B1C6104();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    swift_beginAccess();
    v11 = sub_23B1827C0(a1);
    result = swift_endAccess();
    if (v11)
    {
      objc_msgSend(*(id *)(v11 + 16), sel_cancel);
      v12 = (void *)swift_retain();
      sub_23B0DA3D8(v12, v11);
      sub_23AC2AAEC(a2);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23AC2F998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  dispatch_queue_t v18[2];
  _QWORD aBlock[6];

  v4 = sub_23B1C5BDC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DownloadProgressMonitor.URLProgressKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  if (qword_2542DE118 != -1)
    swift_once();
  v18[0] = (dispatch_queue_t)qword_2542E1540;
  sub_23AA907B0(a1, (uint64_t)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for DownloadProgressMonitor.URLProgressKey);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = (v10 + *(unsigned __int8 *)(v5 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v13 = swift_allocObject();
  *(dispatch_queue_t *)(v13 + 16) = v18[1];
  sub_23AA94050((uint64_t)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v11, type metadata accessor for DownloadProgressMonitor.URLProgressKey);
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v13 + v12, v7, v4);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = sub_23AC30638;
  *(_QWORD *)(v14 + 24) = v13;
  aBlock[4] = sub_23AB22A20;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23B1A764C;
  aBlock[3] = &block_descriptor_7;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v18[0], v15);
  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

void sub_23AC2FBE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2542E0258)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542DD430);
    v0 = sub_23B1C6C98();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2542E0258);
  }
}

uint64_t *sub_23AC2FC40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23B1C5A08();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23AC2FCD4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23B1C5A08();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23AC2FD1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = sub_23B1C5A08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23AC2FD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = sub_23B1C5A08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23AC2FE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23B1C5A08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23AC2FE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_23B1C5A08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23AC2FEC8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23AC2FED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_23B1C5A08();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_23AC2FF54()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23AC2FF60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_23B1C5A08();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for DownloadProgressMonitor.ApplicationRequest(uint64_t a1)
{
  return sub_23AA94094(a1, (uint64_t *)&unk_2542E14F0);
}

uint64_t sub_23AC2FFF0()
{
  return sub_23AC3045C();
}

uint64_t storeEnumTagSinglePayload for DownloadExpirationPolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23AC30048 + 4 * byte_23B1D2565[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23AC3007C + 4 * byte_23B1D2560[v4]))();
}

uint64_t sub_23AC3007C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AC30084(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23AC3008CLL);
  return result;
}

uint64_t sub_23AC30098(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23AC300A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23AC300A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AC300AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_23AC300B8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DownloadExpirationPolicy()
{
  return &type metadata for DownloadExpirationPolicy;
}

uint64_t *sub_23AC300D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23B1C5A08();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    v10 = v9;
  }
  return a1;
}

void sub_23AC30160(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B1C5A08();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t sub_23AC301A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = sub_23B1C5A08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = v8;
  return a1;
}

uint64_t sub_23AC30204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = sub_23B1C5A08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  return a1;
}

uint64_t sub_23AC3026C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23B1C5A08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_23AC302C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = sub_23B1C5A08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  return a1;
}

uint64_t sub_23AC3032C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23AC30338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_23B1C5A08();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_23AC303B4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23AC303C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_23B1C5A08();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for DownloadProgressMonitor.URLProgressKey(uint64_t a1)
{
  return sub_23AA94094(a1, (uint64_t *)&unk_2542E14C0);
}

uint64_t sub_23AC3044C()
{
  return sub_23AC3045C();
}

uint64_t sub_23AC3045C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B1C5A08();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23AC304C8()
{
  return sub_23AA7E38C(&qword_2542E14B8, type metadata accessor for DownloadProgressMonitor.URLProgressKey, (uint64_t)&unk_23B1D26F8);
}

unint64_t sub_23AC304F8()
{
  unint64_t result;

  result = qword_2569E29E0;
  if (!qword_2569E29E0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D27F0, &type metadata for DownloadExpirationPolicy);
    atomic_store(result, (unint64_t *)&qword_2569E29E0);
  }
  return result;
}

uint64_t sub_23AC3053C()
{
  return sub_23AA7E38C(&qword_2569E29E8, type metadata accessor for DownloadProgressMonitor.ApplicationRequest, (uint64_t)&unk_23B1D2818);
}

uint64_t sub_23AC30568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for DownloadProgressMonitor.URLProgressKey(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = sub_23B1C5BDC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();
  v8 = v0 + v3;
  v9 = sub_23B1C5A08();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);

  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t sub_23AC30638()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for DownloadProgressMonitor.URLProgressKey(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_23B1C5BDC() - 8) + 80);
  return sub_23AC2F838(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_23AC306A4()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for DownloadProgressMonitor.NotificationSesssion(uint64_t a1)
{
  return sub_23AA94094(a1, qword_2542E1510);
}

uint64_t sub_23AC306C8@<X0>(uint64_t *a1@<X8>)
{
  return sub_23B12A648(a1);
}

BOOL sub_23AC306E0(uint64_t *a1, uint64_t a2)
{
  return sub_23AC29B58(a1, a2);
}

uint64_t sub_23AC306FC(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  char v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[2];

  v6 = v4;
  v9 = isStackAllocationSafe;
  v16[1] = *MEMORY[0x24BDAC8D0];
  v10 = *(_BYTE *)(a3 + 32);
  v11 = (unint64_t)((1 << v10) + 63) >> 6;
  v12 = 8 * v11;
  if ((v10 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v16 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0), v12);
    v13 = a4((char *)v16 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0), v11, a3, v9, a2);
    if (v4)
      swift_willThrow();
    else
      return v13;
  }
  else
  {
    v14 = (void *)swift_slowAlloc();
    bzero(v14, v12);
    v6 = a4((char *)v14, v11, a3, v9, a2);
    MEMORY[0x23B8614BC](v14, -1, -1);
  }
  return v6;
}

BOOL sub_23AC30878(uint64_t a1, uint64_t a2)
{
  return sub_23AC29CF4(a1, a2);
}

uint64_t sub_23AC30894(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, char *))
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, char *);
  _QWORD *v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;

  v41 = a4;
  v34 = a2;
  v35 = a1;
  v40 = sub_23B1C5BDC();
  v43 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DownloadProgressMonitor.ApplicationRequest(0);
  v39 = *(_QWORD *)(v7 - 8);
  result = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v12 = 0;
  v42 = (_QWORD *)a3;
  v13 = *(_QWORD *)(a3 + 64);
  v37 = a3 + 64;
  v14 = 1 << *(_BYTE *)(a3 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v38 = (unint64_t)(v14 + 63) >> 6;
LABEL_4:
  v36 = v11;
  while (v16)
  {
    v17 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v44 = v12;
    v18 = v17 | (v12 << 6);
    v19 = v43;
LABEL_18:
    v24 = v42;
    sub_23AA907B0(v42[6] + *(_QWORD *)(v39 + 72) * v18, (uint64_t)v10, type metadata accessor for DownloadProgressMonitor.ApplicationRequest);
    v25 = v24[7] + *(_QWORD *)(v19 + 72) * v18;
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    v27 = v19;
    v28 = v40;
    v26(v6, v25, v40);
    v29 = v45;
    v30 = v41(v10, v6);
    v45 = v29;
    if (v29)
      goto LABEL_28;
    v31 = v30;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v28);
    result = sub_23AA937BC((uint64_t)v10, type metadata accessor for DownloadProgressMonitor.ApplicationRequest);
    v12 = v44;
    if ((v31 & 1) != 0)
    {
      v32 = v36;
      *(unint64_t *)((char *)v35 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v20 = __OFADD__(v32, 1);
      v11 = v32 + 1;
      if (!v20)
        goto LABEL_4;
      __break(1u);
LABEL_28:
      (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v28);
      return sub_23AA937BC((uint64_t)v10, type metadata accessor for DownloadProgressMonitor.ApplicationRequest);
    }
  }
  v20 = __OFADD__(v12, 1);
  v21 = v12 + 1;
  v19 = v43;
  if (v20)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v21 >= v38)
    return sub_23B18FD9C(v35, v34, v36, v42);
  v22 = *(_QWORD *)(v37 + 8 * v21);
  if (v22)
  {
LABEL_17:
    v16 = (v22 - 1) & v22;
    v44 = v21;
    v18 = __clz(__rbit64(v22)) + (v21 << 6);
    goto LABEL_18;
  }
  v23 = v21 + 1;
  if (v21 + 1 >= v38)
    return sub_23B18FD9C(v35, v34, v36, v42);
  v22 = *(_QWORD *)(v37 + 8 * v23);
  if (v22)
    goto LABEL_16;
  v23 = v21 + 2;
  if (v21 + 2 >= v38)
    return sub_23B18FD9C(v35, v34, v36, v42);
  v22 = *(_QWORD *)(v37 + 8 * v23);
  if (v22)
    goto LABEL_16;
  v23 = v21 + 3;
  if (v21 + 3 >= v38)
    return sub_23B18FD9C(v35, v34, v36, v42);
  v22 = *(_QWORD *)(v37 + 8 * v23);
  if (v22)
  {
LABEL_16:
    v21 = v23;
    goto LABEL_17;
  }
  while (1)
  {
    v21 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v21 >= v38)
      return sub_23B18FD9C(v35, v34, v36, v42);
    v22 = *(_QWORD *)(v37 + 8 * v21);
    ++v23;
    if (v22)
      goto LABEL_17;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_23AC30B88(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, char *))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t (*v31)(_QWORD *, char *);
  _QWORD v32[2];
  _QWORD *v33;

  v31 = a4;
  v26 = a2;
  v27 = a1;
  v6 = sub_23B1C5BDC();
  v7 = *(_QWORD *)(v6 - 8);
  result = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  v33 = (_QWORD *)a3;
  v12 = *(_QWORD *)(a3 + 64);
  v28 = 0;
  v29 = a3 + 64;
  v13 = 1 << *(_BYTE *)(a3 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v30 = (unint64_t)(v13 + 63) >> 6;
  while (v15)
  {
    v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v17 = v16 | (v11 << 6);
LABEL_17:
    v21 = v33[7];
    v22 = (_QWORD *)(v33[6] + 16 * v17);
    v23 = v22[1];
    v32[0] = *v22;
    v32[1] = v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, v21 + *(_QWORD *)(v7 + 72) * v17, v6);
    swift_bridgeObjectRetain();
    v24 = v31(v32, v10);
    if (v4)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      return swift_bridgeObjectRelease();
    }
    v25 = v24;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    result = swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
    {
      *(unint64_t *)((char *)v27 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = __OFADD__(v28++, 1);
      if (v18)
        goto LABEL_30;
    }
  }
  v18 = __OFADD__(v11++, 1);
  if (v18)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v11 >= v30)
    return sub_23B1901F8(v27, v26, v28, v33);
  v19 = *(_QWORD *)(v29 + 8 * v11);
  if (v19)
  {
LABEL_16:
    v15 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v11 << 6);
    goto LABEL_17;
  }
  v20 = v11 + 1;
  if (v11 + 1 >= v30)
    return sub_23B1901F8(v27, v26, v28, v33);
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v11 + 2;
  if (v11 + 2 >= v30)
    return sub_23B1901F8(v27, v26, v28, v33);
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
    goto LABEL_15;
  v20 = v11 + 3;
  if (v11 + 3 >= v30)
    return sub_23B1901F8(v27, v26, v28, v33);
  v19 = *(_QWORD *)(v29 + 8 * v20);
  if (v19)
  {
LABEL_15:
    v11 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v30)
      return sub_23B1901F8(v27, v26, v28, v33);
    v19 = *(_QWORD *)(v29 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_16;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DownloadProgressNotificationReason(uint64_t a1)
{
  return sub_23AA94094(a1, qword_2542E16C0);
}

uint64_t sub_23AC30E14()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  id v4;

  v0 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v1 = (void *)sub_23B1C63BC();
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2)
    return 0;
  v3 = (void *)sub_23B1C63BC();
  v4 = objc_msgSend(v2, sel_integerForKey_, v3);

  if ((unint64_t)v4 > 2)
    return 0;
  if (v4 == (id)2)
    return 2;
  return v4 == (id)1;
}

uint64_t sub_23AC30EEC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23AC30F10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_23B1C5A08();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t (*sub_23AC30F9C(void *a1))()
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(sub_23B1C5A08() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_23AC2E4D4(a1, v1 + v4, *(char **)(v1 + v5), *(NSObject **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23AC30FF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_23B1C5A08();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23AC31098()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_23B1C5A08() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_23AC2EDAC(*(void **)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23AC310E8()
{
  return swift_deallocObject();
}

uint64_t sub_23AC310F8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 64) = 0;
  return swift_release();
}

char *keypath_get_selector_fractionCompleted()
{
  return sel_fractionCompleted;
}

id sub_23AC31110@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, sel_fractionCompleted);
  *a2 = v4;
  return result;
}

char *keypath_get_selector_totalUnitCount()
{
  return sel_totalUnitCount;
}

id sub_23AC31154@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_totalUnitCount);
  *a2 = result;
  return result;
}

id sub_23AC31184(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTotalUnitCount_, *a1);
}

uint64_t sub_23AC31198()
{
  return sub_23AC293A4();
}

uint64_t *sub_23AC311A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    v7 = sub_23B1C5BDC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23AC3128C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if (result <= 1)
  {
    v3 = sub_23B1C5BDC();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void *sub_23AC312D8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_23B1C5BDC();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_23AC3139C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_23AA937BC((uint64_t)a1, type metadata accessor for DownloadProgressNotificationReason);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23B1C5BDC();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *sub_23AC31478(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_23B1C5BDC();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_23AC3153C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_23AA937BC((uint64_t)a1, type metadata accessor for DownloadProgressNotificationReason);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23B1C5BDC();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_23AC31618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_23AC31624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_23AC31634()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23AC31644()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B1C5BDC();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_23AC316A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B1C5C54();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_23AC316E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23B1C5C54();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_23AC31718(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B1C5C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_23AC3175C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B1C5C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_23AC317A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B1C5C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_23AC317E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B1C5C54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_23AC31828()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23AC31834(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B1C5C54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_23AC31870()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23AC3187C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B1C5C54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_23AC318BC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B1C5C54();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for AnyDatabaseDelegate()
{
  JUMPOUT(0x23B861318);
}

uint64_t sub_23AC31944()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23AC31984()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t sub_23AC31990()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t sub_23AC3199C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t sub_23AC319A8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t sub_23AC319B4()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_23AC319F0();
  return v0;
}

uint64_t sub_23AC319F0()
{
  uint64_t v0;

  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_23AC31A2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;

  v5 = *v2;
  result = MEMORY[0x23B8615C4](v2 + 2);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 + 168) + 40))(a1, a2, *(_QWORD *)(v5 + 160));
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_23AC31A90(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;

  v5 = *v2;
  result = MEMORY[0x23B8615C4](v2 + 2);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 + 168) + 48))(a1, a2, *(_QWORD *)(v5 + 160));
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_23AC31AF4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;

  v5 = *v2;
  result = MEMORY[0x23B8615C4](v2 + 2);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 + 168) + 56))(a1, a2, *(_QWORD *)(v5 + 160));
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_23AC31B58(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;

  v5 = *v2;
  result = MEMORY[0x23B8615C4](v2 + 2);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5 + 168) + 64))(a1, a2, *(_QWORD *)(v5 + 160));
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_23AC31BBC()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t sub_23AC31BC4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t sub_23AC31BE0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnyDatabaseDelegateImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyDatabaseDelegateImpl);
}

uint64_t sub_23AC31C10(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 96);
}

uint64_t sub_23AC31C18(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 104);
}

uint64_t sub_23AC31C24(int64_t a1, int a2, const void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  id v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  id v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  id v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  id v102;
  unint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  id v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  id v119;
  NSObject *v120;
  os_log_type_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  id v127;
  unint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  NSObject *v138;
  os_log_type_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  id v145;
  NSObject *v146;
  os_log_type_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  NSObject *v155;
  os_log_type_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  NSObject *v164;
  os_log_type_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  const void *v177;
  int v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;

  v174 = a7;
  v173 = a8;
  v175 = a6;
  v176 = a4;
  v180 = a5;
  v177 = a3;
  v178 = a2;
  v9 = sub_23B1C5E4C();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v172 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v172 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v172 - v22;
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)&v172 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)&v172 - v28;
  v30 = MEMORY[0x24BDAC7A8](v27);
  v32 = (char *)&v172 - v31;
  v33 = MEMORY[0x24BDAC7A8](v30);
  v35 = (char *)&v172 - v34;
  v36 = MEMORY[0x24BDAC7A8](v33);
  v38 = (char *)&v172 - v37;
  v39 = MEMORY[0x24BDAC7A8](v36);
  v47 = (char *)&v172 - v46;
  v179 = v39;
  if (a1 > 0x1FFFFFFFFFFFFLL)
  {
    if (a1 > 0x1FFFFFFFFFFFFFLL)
    {
      v48 = v180;
      if (a1 <= 0x7FFFFFFFFFFFFFLL)
      {
        if (a1 == 0x20000000000000)
        {
          v118 = v43;
          v119 = (id)fpfs_current_or_default_log();
          sub_23B1C5E58();
          swift_bridgeObjectRetain_n();
          v120 = sub_23B1C5E40();
          v121 = sub_23B1C6A94();
          if (os_log_type_enabled(v120, v121))
          {
            v122 = swift_slowAlloc();
            v123 = swift_slowAlloc();
            v182 = v123;
            *(_DWORD *)v122 = 136446466;
            v124 = sub_23AF16770(0x20000000000000uLL);
            v181 = sub_23AABEC68(v124, v125, &v182);
            sub_23B1C6CBC();
            swift_bridgeObjectRelease();
            *(_WORD *)(v122 + 12) = 2080;
            swift_bridgeObjectRetain();
            v181 = sub_23AABEC68(v176, v48, &v182);
            sub_23B1C6CBC();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_23AA66000, v120, v121, "Repairing %{public}s on %s (clear bundle bit)", (uint8_t *)v122, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x23B8614BC](v123, -1, -1);
            MEMORY[0x23B8614BC](v122, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v118 + 8))(v29, v179);
          v100 = sub_23AC35404();
          return v100 & 1;
        }
        v58 = 0x40000000000000;
        goto LABEL_19;
      }
      if (a1 == 0x80000000000000)
      {
        v152 = v43;
        v153 = v40;
        v154 = (id)fpfs_current_or_default_log();
        sub_23B1C5E58();
        swift_bridgeObjectRetain_n();
        v155 = sub_23B1C5E40();
        v156 = sub_23B1C6A94();
        if (os_log_type_enabled(v155, v156))
        {
          v157 = swift_slowAlloc();
          v158 = swift_slowAlloc();
          v182 = v158;
          *(_DWORD *)v157 = 136446466;
          v159 = sub_23AF16770(0x80000000000000uLL);
          v181 = sub_23AABEC68(v159, v160, &v182);
          sub_23B1C6CBC();
          swift_bridgeObjectRelease();
          *(_WORD *)(v157 + 12) = 2080;
          swift_bridgeObjectRetain();
          v181 = sub_23AABEC68(v176, v48, &v182);
          sub_23B1C6CBC();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_23AA66000, v155, v156, "Repairing %{public}s on %s (fix pinned item purge urgency)", (uint8_t *)v157, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x23B8614BC](v158, -1, -1);
          MEMORY[0x23B8614BC](v157, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v153, v179);
        v100 = sub_23AC36580();
        return v100 & 1;
      }
      if (a1 == 0x100000000000000)
      {
        v91 = v43;
        v92 = v45;
        v93 = (id)fpfs_current_or_default_log();
        sub_23B1C5E58();
        swift_bridgeObjectRetain_n();
        v94 = sub_23B1C5E40();
        v95 = sub_23B1C6A94();
        if (os_log_type_enabled(v94, v95))
        {
          v96 = swift_slowAlloc();
          v97 = swift_slowAlloc();
          v182 = v97;
          *(_DWORD *)v96 = 136446466;
          v98 = sub_23AF16770(0x100000000000000uLL);
          v181 = sub_23AABEC68(v98, v99, &v182);
          sub_23B1C6CBC();
          swift_bridgeObjectRelease();
          *(_WORD *)(v96 + 12) = 2080;
          swift_bridgeObjectRetain();
          v181 = sub_23AABEC68(v176, v48, &v182);
          sub_23B1C6CBC();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_23AA66000, v94, v95, "Repairing %{public}s on %s (downgrade purge urgency)", (uint8_t *)v96, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x23B8614BC](v97, -1, -1);
          MEMORY[0x23B8614BC](v96, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v92, v179);
        v100 = sub_23AC36884();
        return v100 & 1;
      }
    }
    else
    {
      v48 = v180;
      if (a1 > 0x7FFFFFFFFFFFFLL)
      {
        if (a1 == 0x8000000000000)
        {
          if ((v173 & 0x80000) != 0)
          {
            v161 = v43;
            v162 = v41;
            v163 = (id)fpfs_current_or_default_log();
            sub_23B1C5E58();
            swift_bridgeObjectRetain_n();
            v164 = sub_23B1C5E40();
            v165 = sub_23B1C6A94();
            if (os_log_type_enabled(v164, v165))
            {
              v166 = swift_slowAlloc();
              v167 = swift_slowAlloc();
              v182 = v167;
              *(_DWORD *)v166 = 136446466;
              v168 = sub_23AF16770(0x8000000000000uLL);
              v181 = sub_23AABEC68(v168, v169, &v182);
              sub_23B1C6CBC();
              v170 = v180;
              swift_bridgeObjectRelease();
              *(_WORD *)(v166 + 12) = 2080;
              swift_bridgeObjectRetain();
              v181 = sub_23AABEC68(v176, v170, &v182);
              sub_23B1C6CBC();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_23AA66000, v164, v165, "Repairing %{public}s on %s (unlink if side fault)", (uint8_t *)v166, 0x16u);
              swift_arrayDestroy();
              MEMORY[0x23B8614BC](v167, -1, -1);
              MEMORY[0x23B8614BC](v166, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v162, v179);
            v100 = sub_23AC362C0();
            return v100 & 1;
          }
        }
        else if (a1 == 0x10000000000000)
        {
          v75 = v43;
          v76 = (id)fpfs_current_or_default_log();
          sub_23B1C5E58();
          swift_bridgeObjectRetain_n();
          v77 = sub_23B1C5E40();
          v78 = sub_23B1C6A94();
          if (os_log_type_enabled(v77, v78))
          {
            v79 = swift_slowAlloc();
            v80 = swift_slowAlloc();
            v182 = v80;
            *(_DWORD *)v79 = 136446466;
            v81 = sub_23AF16770(0x10000000000000uLL);
            v181 = sub_23AABEC68(v81, v82, &v182);
            sub_23B1C6CBC();
            swift_bridgeObjectRelease();
            *(_WORD *)(v79 + 12) = 2080;
            swift_bridgeObjectRetain();
            v181 = sub_23AABEC68(v176, v48, &v182);
            sub_23B1C6CBC();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_23AA66000, v77, v78, "Repairing %{public}s on %s (remove promotion xattr)", (uint8_t *)v79, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x23B8614BC](v80, -1, -1);
            MEMORY[0x23B8614BC](v79, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v75 + 8))(v26, v179);
          v100 = sub_23AC35600();
          return v100 & 1;
        }
      }
      else
      {
        if (a1 == 0x2000000000000)
        {
          v110 = v43;
          v111 = (id)fpfs_current_or_default_log();
          sub_23B1C5E58();
          swift_bridgeObjectRetain_n();
          v112 = sub_23B1C5E40();
          v113 = sub_23B1C6A94();
          if (os_log_type_enabled(v112, v113))
          {
            v114 = swift_slowAlloc();
            v115 = swift_slowAlloc();
            v182 = v115;
            *(_DWORD *)v114 = 136446466;
            v116 = sub_23AF16770(0x2000000000000uLL);
            v181 = sub_23AABEC68(v116, v117, &v182);
            sub_23B1C6CBC();
            swift_bridgeObjectRelease();
            *(_WORD *)(v114 + 12) = 2080;
            swift_bridgeObjectRetain();
            v181 = sub_23AABEC68(v176, v48, &v182);
            sub_23B1C6CBC();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_23AA66000, v112, v113, "Repairing %{public}s on %s (refreshing detached root bookmark)", (uint8_t *)v114, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x23B8614BC](v115, -1, -1);
            MEMORY[0x23B8614BC](v114, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v110 + 8))(v20, v179);
          v100 = sub_23AC35B00(v178, v175);
          return v100 & 1;
        }
        if (a1 == 0x4000000000000)
        {
          v49 = v43;
          v50 = v42;
          v51 = (id)fpfs_current_or_default_log();
          sub_23B1C5E58();
          swift_bridgeObjectRetain_n();
          v52 = sub_23B1C5E40();
          v53 = sub_23B1C6A94();
          if (os_log_type_enabled(v52, v53))
          {
            v54 = swift_slowAlloc();
            v55 = swift_slowAlloc();
            v182 = v55;
            *(_DWORD *)v54 = 136446466;
            v56 = sub_23AF16770(0x4000000000000uLL);
            v181 = sub_23AABEC68(v56, v57, &v182);
            sub_23B1C6CBC();
            swift_bridgeObjectRelease();
            *(_WORD *)(v54 + 12) = 2080;
            swift_bridgeObjectRetain();
            v181 = sub_23AABEC68(v176, v48, &v182);
            sub_23B1C6CBC();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_23AA66000, v52, v53, "Repairing %{public}s on %s (set syncroot bit)", (uint8_t *)v54, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x23B8614BC](v55, -1, -1);
            MEMORY[0x23B8614BC](v54, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v179);
          v100 = sub_23AC35F20(v178, 1);
          return v100 & 1;
        }
      }
    }
LABEL_49:
    v135 = v43;
    v136 = v44;
    v137 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    swift_bridgeObjectRetain_n();
    v138 = sub_23B1C5E40();
    v139 = sub_23B1C6A94();
    if (os_log_type_enabled(v138, v139))
    {
      v140 = swift_slowAlloc();
      v141 = swift_slowAlloc();
      v182 = v141;
      *(_DWORD *)v140 = 136446466;
      v142 = sub_23AF16770(a1);
      v181 = sub_23AABEC68(v142, v143, &v182);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v140 + 12) = 2080;
      swift_bridgeObjectRetain();
      v181 = sub_23AABEC68(v176, v48, &v182);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_23AA66000, v138, v139, "Repairing %{public}s on %s is not supported", (uint8_t *)v140, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v141, -1, -1);
      MEMORY[0x23B8614BC](v140, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v136, v179);
    v100 = 0;
    return v100 & 1;
  }
  if (a1 > 0x1FFFFFFFFFFLL)
  {
    v48 = v180;
    if (a1 <= 0x1FFFFFFFFFFFLL)
    {
      if (a1 == 0x20000000000)
        goto LABEL_20;
      v58 = 0x40000000000;
LABEL_19:
      if (a1 != v58)
        goto LABEL_49;
LABEL_20:
      v59 = v43;
      v60 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      swift_bridgeObjectRetain_n();
      v61 = sub_23B1C5E40();
      v62 = sub_23B1C6A94();
      if (os_log_type_enabled(v61, v62))
      {
        v63 = swift_slowAlloc();
        v64 = swift_slowAlloc();
        v182 = v64;
        *(_DWORD *)v63 = 136446466;
        v65 = sub_23AF16770(a1);
        v181 = sub_23AABEC68(v65, v66, &v182);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        *(_WORD *)(v63 + 12) = 2080;
        swift_bridgeObjectRetain();
        v181 = sub_23AABEC68(v176, v48, &v182);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_23AA66000, v61, v62, "Repairing %{public}s on %s (drop purgeability)", (uint8_t *)v63, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v64, -1, -1);
        MEMORY[0x23B8614BC](v63, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v59 + 8))(v47, v179);
      v100 = sub_23AC3496C(v178, v177);
      return v100 & 1;
    }
    if (a1 == 0x200000000000)
    {
      v144 = v43;
      v145 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      swift_bridgeObjectRetain_n();
      v146 = sub_23B1C5E40();
      v147 = sub_23B1C6A94();
      if (os_log_type_enabled(v146, v147))
      {
        v148 = swift_slowAlloc();
        v149 = swift_slowAlloc();
        v182 = v149;
        *(_DWORD *)v148 = 136446466;
        v150 = sub_23AF16770(0x200000000000uLL);
        v181 = sub_23AABEC68(v150, v151, &v182);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        *(_WORD *)(v148 + 12) = 2080;
        swift_bridgeObjectRetain();
        v181 = sub_23AABEC68(v176, v48, &v182);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_23AA66000, v146, v147, "Repairing %{public}s on %s (removing before bounce filename)", (uint8_t *)v148, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v149, -1, -1);
        MEMORY[0x23B8614BC](v148, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v144 + 8))(v23, v179);
      v100 = sub_23AC35904();
      return v100 & 1;
    }
    if (a1 == 0x1000000000000)
    {
      v83 = v43;
      v84 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      swift_bridgeObjectRetain_n();
      v85 = sub_23B1C5E40();
      v86 = sub_23B1C6A94();
      if (os_log_type_enabled(v85, v86))
      {
        v87 = swift_slowAlloc();
        v88 = swift_slowAlloc();
        v182 = v88;
        *(_DWORD *)v87 = 136446466;
        v89 = sub_23AF16770(0x1000000000000uLL);
        v181 = sub_23AABEC68(v89, v90, &v182);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        *(_WORD *)(v87 + 12) = 2080;
        swift_bridgeObjectRetain();
        v181 = sub_23AABEC68(v176, v48, &v182);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_23AA66000, v85, v86, "Repairing %{public}s on %s (setting a valid detached root bookmark)", (uint8_t *)v87, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v88, -1, -1);
        MEMORY[0x23B8614BC](v87, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v83 + 8))(v17, v179);
      v100 = sub_23AC33E10(v178, (uint64_t)v177, v175, v174);
      return v100 & 1;
    }
    goto LABEL_49;
  }
  if (a1 > 0x1FFFFFFFFFLL)
  {
    if (a1 == 0x2000000000)
    {
      v126 = v43;
      v127 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      v128 = v180;
      swift_bridgeObjectRetain_n();
      v129 = sub_23B1C5E40();
      v130 = sub_23B1C6A94();
      if (os_log_type_enabled(v129, v130))
      {
        v131 = swift_slowAlloc();
        v132 = swift_slowAlloc();
        v182 = v132;
        *(_DWORD *)v131 = 136446466;
        v133 = sub_23AF16770(0x2000000000uLL);
        v181 = sub_23AABEC68(v133, v134, &v182);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        *(_WORD *)(v131 + 12) = 2080;
        swift_bridgeObjectRetain();
        v181 = sub_23AABEC68(v176, v128, &v182);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_23AA66000, v129, v130, "Repairing %{public}s on %s (remove demoted flag)", (uint8_t *)v131, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v132, -1, -1);
        MEMORY[0x23B8614BC](v131, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v126 + 8))(v35, v179);
      v100 = sub_23AC3500C();
      return v100 & 1;
    }
    v48 = v180;
    if (a1 == 0x10000000000)
    {
      v67 = v43;
      v68 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      swift_bridgeObjectRetain_n();
      v69 = sub_23B1C5E40();
      v70 = sub_23B1C6A94();
      if (os_log_type_enabled(v69, v70))
      {
        v71 = swift_slowAlloc();
        v72 = swift_slowAlloc();
        v182 = v72;
        *(_DWORD *)v71 = 136446466;
        v73 = sub_23AF16770(0x10000000000uLL);
        v181 = sub_23AABEC68(v73, v74, &v182);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        *(_WORD *)(v71 + 12) = 2080;
        swift_bridgeObjectRetain();
        v181 = sub_23AABEC68(v176, v48, &v182);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_23AA66000, v69, v70, "Repairing %{public}s on %s (set bundle bit)", (uint8_t *)v71, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v72, -1, -1);
        MEMORY[0x23B8614BC](v71, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v67 + 8))(v32, v179);
      v100 = sub_23AC35208();
      return v100 & 1;
    }
    goto LABEL_49;
  }
  if (a1 != 8)
  {
    v48 = v180;
    if (a1 != 0x40000000)
      goto LABEL_49;
    goto LABEL_20;
  }
  v101 = v43;
  v102 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v103 = v180;
  swift_bridgeObjectRetain_n();
  v104 = sub_23B1C5E40();
  v105 = sub_23B1C6A94();
  if (os_log_type_enabled(v104, v105))
  {
    v106 = swift_slowAlloc();
    v107 = swift_slowAlloc();
    v182 = v107;
    *(_DWORD *)v106 = 136446466;
    v108 = sub_23AF16770(8uLL);
    v181 = sub_23AABEC68(v108, v109, &v182);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    *(_WORD *)(v106 + 12) = 2080;
    swift_bridgeObjectRetain();
    v181 = sub_23AABEC68(v176, v103, &v182);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23AA66000, v104, v105, "Repairing %{public}s on %s (force re-ingestion)", (uint8_t *)v106, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v107, -1, -1);
    MEMORY[0x23B8614BC](v106, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v101 + 8))(v38, v179);
  v100 = sub_23AC34D08();
  return v100 & 1;
}

uint64_t sub_23AC335A8@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  void (*v31)(void);
  char *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v40 = a4;
  v41 = a5;
  v46 = *MEMORY[0x24BDAC8D0];
  v42 = sub_23B1C5A08();
  v8 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v39 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E6760);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v38 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v38 - v21;
  if (!a2)
  {
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v24 = v41;
    v25 = v42;
    v26 = 1;
    return v23(v24, v26, 1, v25);
  }
  if (a2 != 1)
  {
    if (a1)
    {
      v28 = v41;
      v27 = v42;
      if (qword_2542E5360 != -1)
        swift_once();
      sub_23B1C5978();
      v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v24 = v28;
    }
    else
    {
      v36 = v41;
      v27 = v42;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v41, v40, v42);
      v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v24 = v36;
    }
    v26 = 0;
    v25 = v27;
    return v23(v24, v26, 1, v25);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  v43 = a1;
  v44 = 0u;
  v45 = 0u;
  sub_23B0E25A4((uint64_t)&v43, a3, 0x100000, 0, (uint64_t)v15, (uint64_t)sub_23AC33A08, 0);
  sub_23AA8EFC8((uint64_t)v15, (uint64_t)v13, &qword_2542E6760);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_23AA724E8((uint64_t)v13, (uint64_t)v22, (uint64_t *)&unk_2542E6740);
    sub_23AA8A05C((uint64_t)v15, &qword_2542E6760);
    v30 = v42;
    sub_23AA8EFC8((uint64_t)v22, (uint64_t)v20, (uint64_t *)&unk_2542E6740);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v20, 1, v30) == 1)
    {
      sub_23AA8A05C((uint64_t)v22, (uint64_t *)&unk_2542E6740);
      sub_23AA8A05C((uint64_t)v20, (uint64_t *)&unk_2542E6740);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v41, 1, 1, v30);
    }
    v31 = *(void (**)(void))(v8 + 32);
    v32 = v39;
    v31();
    v33 = (void *)sub_23B1C5954();
    v34 = (void *)sub_23B1C5954();
    v35 = objc_msgSend(v33, sel_fp_relationshipToItemAtURL_, v34);

    sub_23AA8A05C((uint64_t)v22, (uint64_t *)&unk_2542E6740);
    if (v35)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v32, v30);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v41, 1, 1, v30);
    }
    v37 = v41;
    ((void (*)(uint64_t, char *, uint64_t))v31)(v41, v32, v30);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v37, 0, 1, v30);
  }
  return result;
}

uint64_t sub_23AC33A08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_23B1C6428();
  MEMORY[0x24BDAC7A8](v3);
  v4 = swift_slowAlloc();
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC37368);
  if (!v1)
  {
    sub_23B1C641C();
    sub_23B1C6404();
    if (v5)
    {
      sub_23B1C590C();
      swift_bridgeObjectRelease();
      v6 = sub_23B1C5A08();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, 0, 1, v6);
    }
    else
    {
      v7 = sub_23B1C5A08();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 1, 1, v7);
    }
  }
  return MEMORY[0x23B8614BC](v4, -1, -1);
}

uint64_t sub_23AC33B34@<X0>(char *a1@<X0>, char a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  unsigned int v48;
  uint64_t v49;

  v49 = a4;
  v48 = a3;
  v47 = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v46 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v43 - v13;
  v15 = sub_23B1C5A08();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v45 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v43 - v19;
  result = sub_23AC371EC((uint64_t)a1, a2, a5);
  if (!v6)
  {
    v25 = v24;
    if (v24)
    {
      v44 = v23;
      sub_23AC335A8(result, v22, v48, v49, (uint64_t)v14);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
      {
        v34 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
        v34(v20, v14, v15);
        v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2C60);
        v36 = v47;
        v37 = &v47[*(int *)(v35 + 48)];
        v34(v47, v20, v15);
        *(_QWORD *)v37 = v44;
        *((_QWORD *)v37 + 1) = v25;
        return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v36, 0, 1, v35);
      }
      swift_bridgeObjectRelease();
      sub_23AA8A05C((uint64_t)v14, (uint64_t *)&unk_2542E6740);
    }
    v26 = sub_23AC36FB8(a1, a2, a5);
    v30 = v29;
    if (!v29)
    {
LABEL_8:
      v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2C60);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v47, 1, 1, v33);
    }
    v31 = v28;
    v32 = v46;
    sub_23AC335A8((uint64_t)v26, v27, v48, v49, v46);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v32, 1, v15) == 1)
    {
      swift_bridgeObjectRelease();
      sub_23AA8A05C(v32, (uint64_t *)&unk_2542E6740);
      goto LABEL_8;
    }
    v38 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 32);
    v39 = v45;
    v38(v45, v32, v15);
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2C60);
    v41 = v47;
    v42 = &v47[*(int *)(v40 + 48)];
    v38(v47, (uint64_t)v39, v15);
    *(_QWORD *)v42 = v31;
    *((_QWORD *)v42 + 1) = v30;
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v41, 0, 1, v40);
  }
  return result;
}

uint64_t sub_23AC33E10(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  char v34;
  _QWORD v36[8];
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v5 = v4;
  v10 = sub_23B1C5E4C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v36 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v36 - v16;
  if (!a4)
  {
    v24 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v25 = sub_23B1C5E40();
    v26 = sub_23B1C6AA0();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_23AA66000, v25, v26, "Failed to set detached root bookmark: no db available", v27, 2u);
      MEMORY[0x23B8614BC](v27, -1, -1);
    }

    v28 = *(void (**)(char *, uint64_t))(v11 + 8);
    v29 = v15;
    goto LABEL_11;
  }
  v36[7] = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 16);
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2C40);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2C48);
  if (!swift_dynamicCast())
  {
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    sub_23AA8A05C((uint64_t)&v37, &qword_2569E2C50);
    v30 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v31 = sub_23B1C5E40();
    v32 = sub_23B1C6AA0();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_23AA66000, v31, v32, "Failed to set detached root bookmark: no deviceID", v33, 2u);
      MEMORY[0x23B8614BC](v33, -1, -1);
      swift_release();

    }
    else
    {

      swift_release();
    }
    v28 = *(void (**)(char *, uint64_t))(v11 + 8);
    v29 = v17;
LABEL_11:
    v28(v29, v10);
    v34 = 0;
    return v34 & 1;
  }
  v36[1] = v10;
  v18 = *((_QWORD *)&v38 + 1);
  v19 = v39;
  __swift_project_boxed_opaque_existential_1(&v37, *((uint64_t *)&v38 + 1));
  v20 = *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(v19 + 24))(v18, v19) + 16);
  swift_release();
  v21 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v36[-6] = a2;
  v36[-5] = v5;
  LODWORD(v36[-4]) = v20;
  v36[-3] = a3;
  v36[-2] = a4;
  LODWORD(v36[-1]) = a1;
  v23 = (void *)MEMORY[0x23B8601A8](v22);
  v34 = sub_23ADDA2BC(a4, (uint64_t)"setDetachedRootBookmark(at:attributes:rootURL:db:)", 50, 2, 1, (uint64_t)sub_23AC34870, (uint64_t)&v36[-8]);
  objc_autoreleasePoolPop(v23);
  swift_release();
  return v34 & 1;
}

uint64_t sub_23AC342B8@<X0>(char **a1@<X0>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, int a5@<W5>, _BYTE *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  void (*v26)(_QWORD, _QWORD);
  uint64_t result;
  uint64_t v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  char *v33;
  char **v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD, _QWORD);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t *v49;
  char ***v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  _BYTE *v69;
  char **v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void (*v77)(_QWORD, _QWORD);

  v64 = a5;
  v72 = (char *)a4;
  LODWORD(v71) = a2;
  v69 = a6;
  v70 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v7);
  v67 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for VFSDetachedRootBookmark();
  v9 = MEMORY[0x24BDAC7A8](v66);
  v68 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v65 = (char *)&v61 - v11;
  v12 = sub_23B1C5E4C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2C58);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23B1C5A08();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v61 - v24;
  v26 = v77;
  result = sub_23AC33B34(*v70, 1, v71, a3, (uint64_t)v72, v18);
  if (!v26)
  {
    v61 = v23;
    v62 = v13;
    v77 = 0;
    v63 = a3;
    v70 = (char **)v12;
    v71 = v19;
    v72 = v25;
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2C60);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v18, 1, v28) == 1)
    {
      sub_23AA8A05C((uint64_t)v18, &qword_2569E2C58);
      v29 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      v30 = sub_23B1C5E40();
      v31 = sub_23B1C6AA0();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v32 = 0;
        _os_log_impl(&dword_23AA66000, v30, v31, "Failed to set detached root bookmark: cannot find parent for item", v32, 2u);
        MEMORY[0x23B8614BC](v32, -1, -1);
      }

      result = (*(uint64_t (**)(char *, char **))(v62 + 8))(v15, v70);
      *v69 = 0;
    }
    else
    {
      v33 = &v18[*(int *)(v28 + 48)];
      v34 = (char **)*((_QWORD *)v33 + 1);
      v70 = *(char ***)v33;
      v36 = v71;
      v35 = (uint64_t)v72;
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v72, v18, v71);
      v37 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
      v38 = v61;
      v37(v61, v35, v36);
      v39 = (uint64_t)v67;
      v37(v67, v63, v36);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v39, 0, 1, v36);
      v40 = (uint64_t)v68;
      v37(v68, (uint64_t)v38, v36);
      v41 = v77;
      v42 = sub_23B1C58DC();
      if (v41)
      {
        swift_bridgeObjectRelease();
        sub_23AA8A05C(v39, (uint64_t *)&unk_2542E6740);
        v44 = *(void (**)(char *, uint64_t))(v20 + 8);
        v44(v38, v36);
        v44((char *)v40, v36);
        return ((uint64_t (*)(char *, uint64_t))v44)(v72, v36);
      }
      else
      {
        v45 = v42;
        v46 = v43;
        sub_23AA8A05C(v39, (uint64_t *)&unk_2542E6740);
        v77 = *(void (**)(_QWORD, _QWORD))(v20 + 8);
        v77(v38, v36);
        v48 = (uint64_t)v65;
        v47 = (int *)v66;
        v49 = (uint64_t *)(v40 + *(int *)(v66 + 24));
        *v49 = v45;
        v49[1] = v46;
        v50 = (char ***)(v40 + v47[5]);
        *v50 = v70;
        v50[1] = v34;
        *(_BYTE *)(v40 + v47[7]) = 1;
        sub_23AC34894(v40, v48);
        v51 = v47[6];
        v52 = (uint64_t *)(v48 + v47[5]);
        v54 = *v52;
        v53 = v52[1];
        v55 = *(_QWORD *)(v48 + v51);
        v56 = *(_QWORD *)(v48 + v51 + 8);
        sub_23B1C57B0();
        swift_allocObject();
        swift_bridgeObjectRetain();
        sub_23AAAE668(v55, v56);
        sub_23B1C57A4();
        sub_23B1C578C();
        v73 = v54;
        v74 = v53;
        v75 = v55;
        v76 = v56;
        sub_23AC348D8();
        v57 = sub_23B1C5798();
        v59 = v58;
        swift_bridgeObjectRelease();
        swift_release();
        v60 = sub_23AAAE53C(v55, v56);
        MEMORY[0x24BDAC7A8](v60);
        *(&v61 - 6) = (char *)v57;
        *(&v61 - 5) = (char *)v59;
        *((_DWORD *)&v61 - 8) = v64;
        *(&v61 - 3) = (char *)0xD000000000000021;
        *(&v61 - 2) = (char *)0x800000023B1FC9D0;
        *((_DWORD *)&v61 - 2) = 0;
        sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC34958);
        sub_23AAAE53C(v57, v59);
        sub_23AC3491C(v48);
        result = ((uint64_t (*)(char *, uint64_t))v77)(v72, v71);
        *v69 = 1;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for FSRepair()
{
  return objc_opt_self();
}

uint64_t sub_23AC34870@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_23AC342B8(*(char ***)(v1 + 16), *(_DWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_DWORD *)(v1 + 56), a1);
}

uint64_t sub_23AC34894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for VFSDetachedRootBookmark();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_23AC348D8()
{
  unint64_t result;

  result = qword_2569E2C68;
  if (!qword_2569E2C68)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D6788, &type metadata for VFSDetachedRootBookmark.ExtendedAttributeValue);
    atomic_store(result, (unint64_t *)&qword_2569E2C68);
  }
  return result;
}

uint64_t sub_23AC3491C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for VFSDetachedRootBookmark();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23AC34958()
{
  sub_23AC374C8();
}

uint64_t sub_23AC3496C(int a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD v7[26];
  _BYTE *v8;
  _BYTE v9[280];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = sub_23B1C5E4C();
  MEMORY[0x24BDAC7A8](v4);
  memcpy(v9, a2, sizeof(v9));
  v7[24] = a1;
  v8 = v9;
  v5 = sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC3739C);
  MEMORY[0x24BDAC7A8](v5);
  v7[-4] = a1;
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC37660);
  return 1;
}

uint64_t sub_23AC34D08()
{
  uint64_t v0;

  v0 = sub_23B1C5E4C();
  MEMORY[0x24BDAC7A8](v0);
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC04A98);
  return 1;
}

uint64_t sub_23AC3500C()
{
  uint64_t v0;

  v0 = sub_23B1C5E4C();
  MEMORY[0x24BDAC7A8](v0);
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC373D0);
  return 1;
}

uint64_t sub_23AC35208()
{
  uint64_t v0;

  v0 = sub_23B1C5E4C();
  MEMORY[0x24BDAC7A8](v0);
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC37400);
  return 1;
}

uint64_t sub_23AC35404()
{
  uint64_t v0;

  v0 = sub_23B1C5E4C();
  MEMORY[0x24BDAC7A8](v0);
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC37434);
  return 1;
}

uint64_t sub_23AC35600()
{
  uint64_t v0;

  v0 = sub_23B1C5E4C();
  MEMORY[0x24BDAC7A8](v0);
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC37468);
  return 1;
}

uint64_t sub_23AC35904()
{
  uint64_t v0;

  v0 = sub_23B1C5E4C();
  MEMORY[0x24BDAC7A8](v0);
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC37498);
  return 1;
}

uint64_t sub_23AC35B00(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v4 = sub_23B1C5E4C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for VFSDetachedRootBookmark();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23B1C5A08();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v8, a2, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
  sub_23AD2AFBC(a1, (uint64_t)v8, (uint64_t)v11);
  if ((v11[v9[7]] & 1) != 0)
  {
    v27 = v5;
    v14 = v9[6];
    v15 = &v11[v9[5]];
    v17 = *(_QWORD *)v15;
    v16 = *((_QWORD *)v15 + 1);
    v19 = *(_QWORD *)&v11[v14];
    v18 = *(_QWORD *)&v11[v14 + 8];
    sub_23B1C57B0();
    swift_allocObject();
    swift_bridgeObjectRetain();
    sub_23AAAE668(v19, v18);
    sub_23B1C57A4();
    sub_23B1C578C();
    v28 = v17;
    v29 = v16;
    v30 = v19;
    v31 = v18;
    sub_23AC348D8();
    v26 = sub_23B1C5798();
    v22 = v21;
    swift_bridgeObjectRelease();
    swift_release();
    v23 = sub_23AAAE53C(v19, v18);
    MEMORY[0x24BDAC7A8](v23);
    v24 = v26;
    *(&v25 - 6) = v26;
    *(&v25 - 5) = v22;
    *((_DWORD *)&v25 - 8) = a1;
    *(&v25 - 3) = 0xD000000000000021;
    *(&v25 - 2) = 0x800000023B1FC9D0;
    *((_DWORD *)&v25 - 2) = 0;
    sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC34958);
    sub_23AC3491C((uint64_t)v11);
    sub_23AAAE53C(v24, v22);
  }
  else
  {
    sub_23AC3491C((uint64_t)v11);
  }
  return 1;
}

uint64_t sub_23AC35F20(int a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  id v22;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  _QWORD v28[3];
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v4 = sub_23B1C5E4C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23B1C5570();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  memset(v28, 0, sizeof(v28));
  v29 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = a1;
  v38 = v28;
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC374EC);
  v12 = WORD2(v28[0]);
  v13 = sub_23B1C5EAC() & v12;
  v14 = sub_23B1C5EB8();
  if (v13 == (unsigned __int16)v14)
  {
    MEMORY[0x24BDAC7A8](v14);
    *((_DWORD *)&v24 - 4) = a1;
    *((_BYTE *)&v24 - 12) = a2 & 1;
    sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC37568);
    return 1;
  }
  else
  {
    v26 = 20;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AC37520();
    sub_23B1C5864();
    v15 = (void *)sub_23B1C5558();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_willThrow();
    v16 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v17 = v15;
    v18 = sub_23B1C5E40();
    v19 = sub_23B1C6AA0();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v20 = 138412290;
      v25 = v7;
      swift_getErrorValue();
      v22 = sub_23B0D9CF0(v27);
      v28[0] = v22;
      v7 = v25;
      sub_23B1C6CBC();
      *v21 = v22;

      _os_log_impl(&dword_23AA66000, v18, v19, "Failed to set sync root bit: %@", v20, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v21, -1, -1);
      MEMORY[0x23B8614BC](v20, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0;
  }
}

uint64_t sub_23AC362C0()
{
  uint64_t v0;

  v0 = sub_23B1C5E4C();
  MEMORY[0x24BDAC7A8](v0);
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC375A8);
  return 1;
}

uint64_t sub_23AC36580()
{
  uint64_t v0;

  v0 = sub_23B1C5E4C();
  MEMORY[0x24BDAC7A8](v0);
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC375F8);
  return 1;
}

uint64_t sub_23AC36884()
{
  uint64_t v0;

  v0 = sub_23B1C5E4C();
  MEMORY[0x24BDAC7A8](v0);
  sub_23B0E1344((_QWORD *(*)(_QWORD *__return_ptr, uint64_t))sub_23AC3762C);
  return 1;
}

uint64_t sub_23AC36B88(int64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _DWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v10 = sub_23B1C5E4C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v39 - v15;
  if (a1 < 0x400000)
  {
    if (a1 != 0x40000 && a1 != 0x200000)
    {
LABEL_13:
      v29 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      swift_bridgeObjectRetain_n();
      v30 = sub_23B1C5E40();
      v31 = sub_23B1C6A94();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc();
        v42 = v11;
        v33 = a4;
        v34 = v32;
        v35 = swift_slowAlloc();
        v41 = v10;
        v36 = v35;
        v44 = v35;
        *(_DWORD *)v34 = 136446466;
        v37 = sub_23AF162C0(a1);
        v43 = sub_23AABEC68(v37, v38, &v44);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        *(_WORD *)(v34 + 12) = 2080;
        swift_bridgeObjectRetain();
        v43 = sub_23AABEC68(v33, a5, &v44);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_23AA66000, v30, v31, "Repairing %{public}s on %s is not supported", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v36, -1, -1);
        MEMORY[0x23B8614BC](v34, -1, -1);

        (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v41);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      }
      v27 = 0;
      return v27 & 1;
    }
  }
  else if (a1 != 0x400000 && a1 != 0x400000000 && a1 != 0x40000000)
  {
    goto LABEL_13;
  }
  v17 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  swift_bridgeObjectRetain_n();
  v18 = sub_23B1C5E40();
  v19 = sub_23B1C6A94();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v39[1] = a2;
    v21 = v20;
    v22 = swift_slowAlloc();
    v41 = v10;
    v23 = v22;
    v44 = v22;
    *(_DWORD *)v21 = 136446466;
    v40 = a3;
    v24 = sub_23AF162C0(a1);
    v26 = sub_23AABEC68(v24, v25, &v44);
    v42 = v11;
    v43 = v26;
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    swift_bridgeObjectRetain();
    v43 = sub_23AABEC68(a4, a5, &v44);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23AA66000, v18, v19, "Repairing %{public}s on %s (force re-ingestion)", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v23, -1, -1);
    MEMORY[0x23B8614BC](v21, -1, -1);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v41);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
  v27 = sub_23AC34D08();
  return v27 & 1;
}

char *sub_23AC36FB8(char *a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void (*v20)(char **__return_ptr, char **);
  char *v21;
  char *v22;
  unsigned __int8 v23;
  char *v24;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E4770);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4760);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a3 + 16);
  v22 = a1;
  v23 = a2;
  (*(void (**)(char **__return_ptr, char **))(*(_QWORD *)v14 + 160))(&v24, &v22);
  if (!v3)
  {
    v16 = v24;
    if (v24)
    {
      v17 = *(_QWORD *)(a3 + 40);
      v22 = v24;
      (*(void (**)(char **, uint64_t))(*(_QWORD *)v17 + 240))(&v22, 1);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
      {

        v18 = &qword_2542E4770;
        v19 = (uint64_t)v9;
      }
      else
      {
        sub_23AA724E8((uint64_t)v9, (uint64_t)v13, (uint64_t *)&unk_2542E4760);
        v24 = (char *)*((_QWORD *)v13 + 1);
        v20 = *(void (**)(char **__return_ptr, char **))(*(_QWORD *)v14 + 152);
        v21 = v24;
        v20(&v22, &v24);

        if (v23 != 255)
        {
          v9 = v22;
          swift_bridgeObjectRetain();
          sub_23AA8A05C((uint64_t)v13, (uint64_t *)&unk_2542E4760);
          return v9;
        }
        v18 = (uint64_t *)&unk_2542E4760;
        v19 = (uint64_t)v13;
      }
      sub_23AA8A05C(v19, v18);
    }
    return 0;
  }
  return v9;
}

uint64_t sub_23AC371EC(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  char v17;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4750);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6B00);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a3 + 32);
  v16 = a1;
  v17 = a2;
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)v14 + 240))(&v16, 1);
  if (!v3)
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_23AA8A05C((uint64_t)v9, (uint64_t *)&unk_2542E4750);
      return 0;
    }
    else
    {
      sub_23AA724E8((uint64_t)v9, (uint64_t)v13, (uint64_t *)&unk_2542E6B00);
      v14 = *((_QWORD *)v13 + 2);
      swift_bridgeObjectRetain();
      sub_23AA8A05C((uint64_t)v13, (uint64_t *)&unk_2542E6B00);
    }
  }
  return v14;
}

uint64_t sub_23AC37368@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = fpfs_fgetpath();
  *a1 = result;
  return result;
}

uint64_t sub_23AC3739C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = fpfs_unset_evictable();
  *a1 = result;
  return result;
}

uint64_t sub_23AC373D0@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = fpfs_pkg_remove_demotion_xattr();
  *a1 = result;
  return result;
}

uint64_t sub_23AC37400@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = fpfs_pkg_set_bundle_bit();
  *a1 = result;
  return result;
}

uint64_t sub_23AC37434@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = fpfs_pkg_set_bundle_bit();
  *a1 = result;
  return result;
}

uint64_t sub_23AC37468@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = fpfs_pkg_remove_promotion_xattr();
  *a1 = result;
  return result;
}

uint64_t sub_23AC37498@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = fpfs_remove_before_bounce_filename();
  *a1 = result;
  return result;
}

void sub_23AC374C8()
{
  uint64_t v0;

  sub_23ADAADD4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23AC374EC@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = fstat(*(_DWORD *)(v1 + 16), *(stat **)(v1 + 24));
  *a1 = result;
  return result;
}

unint64_t sub_23AC37520()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2542E42F0;
  if (!qword_2542E42F0)
  {
    v1 = sub_23B1C5570();
    result = MEMORY[0x23B8613CC](MEMORY[0x24BDCAFD8], v1);
    atomic_store(result, (unint64_t *)&qword_2542E42F0);
  }
  return result;
}

uint64_t sub_23AC37568@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = fpfs_fset_syncroot();
  *a1 = result;
  return result;
}

uint64_t sub_23AC375A8@<X0>(int *a1@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = sub_23B1C6458();
  v3 = unlink((const char *)(v2 + 32));
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_23AC375F8@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = fpfs_update_purgency();
  *a1 = result;
  return result;
}

uint64_t sub_23AC3762C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = fpfs_update_purgency();
  *a1 = result;
  return result;
}

uint64_t sub_23AC37660@<X0>(_DWORD *a1@<X8>)
{
  return sub_23AC04A98(a1);
}

BOOL sub_23AC37674(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_23AC37680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = sub_23B1C63E0();
  v2 = v1;
  if (v0 == sub_23B1C63E0() && v2 == v3)
    v4 = 1;
  else
    v4 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

void sub_23AC37708(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23AC37758(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23AC377D4 + 4 * byte_23B1D2AE5[a2]))(0x6E6F635F74736574);
}

uint64_t sub_23AC377D4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E6F635F74736574 && v1 == 0xEC000000746E6574)
    v2 = 1;
  else
    v2 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23AC37898(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0xD000000000000010;
    else
      v3 = 0xD000000000000012;
    if (v2 == 1)
      v4 = 0x800000023B1F7060;
    else
      v4 = 0x800000023B1F7080;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0xD000000000000010;
      else
        v6 = 0xD000000000000012;
      if (v5 == 1)
        v7 = 0x800000023B1F7060;
      else
        v7 = 0x800000023B1F7080;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x6574617473;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x6574617473)
  {
LABEL_21:
    v8 = sub_23B1C7388();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23AC37998(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6D617473656D6974;
  else
    v3 = 0x797469726F697270;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE900000000000070;
  if ((a2 & 1) != 0)
    v5 = 0x6D617473656D6974;
  else
    v5 = 0x797469726F697270;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000070;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

BOOL sub_23AC37A40(char a1, char a2)
{
  return qword_23B1D30F0[a1] == qword_23B1D30F0[a2];
}

uint64_t sub_23AC37A64(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6465696669726576;
  else
    v3 = 0x676E69646E6570;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6465696669726576;
  else
    v5 = 0x676E69646E6570;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

BOOL sub_23AC37B08(char a1, char a2)
{
  return qword_23B1D3320[a1] == qword_23B1D3320[a2];
}

void sub_23AC37B2C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23AC37B74(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23AC37C9C + 4 * byte_23B1D2AF3[a2]))(0xD000000000000010);
}

uint64_t sub_23AC37C9C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000010 && v1 == 0x800000023B1F6CC0)
    v2 = 1;
  else
    v2 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

BOOL sub_23AC37E20(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_23AC37E30(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23AC37E78(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23AC37F70 + 4 * byte_23B1D2B04[a2]))(0x6F635F7972746572);
}

uint64_t sub_23AC37F70(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6F635F7972746572 && v1 == 0xEB00000000746E75)
    v2 = 1;
  else
    v2 = sub_23B1C7388();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23AC380C8@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  int v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  _QWORD v54[2];
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v53 = a1;
  v64 = *MEMORY[0x24BDAC8D0];
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v51 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v47 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v52 = (char *)&v47 - v9;
  v10 = &qword_2542E6760;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E6760);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23B1C5A08();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v48 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v47 - v18;
  v20 = (int *)type metadata accessor for VFSItem(0);
  v47 = v1 + v20[12];
  sub_23AA8EFC8(v47, (uint64_t)v13, &qword_2542E6760);
  v49 = v3;
  v50 = v2;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v13, 1, v2) != 1)
  {
    v21 = v8;
    v22 = v53;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
    {
      v44 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      v44(v19, v13, v14);
      v44(v22, v19, v14);
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v22, 0, 1, v14);
    }
    v10 = (uint64_t *)&unk_2542E6740;
    v8 = v21;
  }
  v23 = sub_23AA8A05C((uint64_t)v13, v10);
  v24 = v20[13];
  v25 = (int *)(v1 + v20[14]);
  v26 = *((_BYTE *)v25 + 4) == 0;
  v27 = v1 + v20[9];
  v28 = *v25;
  if (v26)
    v29 = v28;
  else
    v29 = 0;
  v62 = 0;
  v63 = 0;
  v31 = *(_DWORD *)(v27 + 8);
  v59[0] = *(_QWORD *)v27;
  v30 = v59[0];
  v59[1] = 0;
  v60 = v29;
  v61 = v31;
  v32 = *(unsigned int *)(v1 + v24);
  MEMORY[0x24BDAC7A8](v23);
  *(&v47 - 2) = (uint64_t)v59;
  *((_DWORD *)&v47 - 2) = v32;
  *((_BYTE *)&v47 - 4) = v33;
  v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v34(v8, 1, 1, v14);
  v54[0] = v30;
  v54[1] = 0;
  v55 = v29;
  v56 = v31;
  v57 = 0;
  v58 = 0;
  sub_23B0E0928((uint64_t)v54, v32, 0x200000, 0, (uint64_t)v8, (uint64_t)sub_23AAB7D90, (uint64_t)(&v47 - 4));
  v35 = v51;
  sub_23AA8EFC8((uint64_t)v8, v51, (uint64_t *)&unk_2542E6740);
  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  result = v36(v35, 1, v14);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v38 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 32);
    v39 = (uint64_t)v52;
    v38(v52, v35, v14);
    sub_23AA8A05C((uint64_t)v8, (uint64_t *)&unk_2542E6740);
    v34((char *)v39, 0, 1, v14);
    v40 = v36(v39, 1, v14);
    v41 = v53;
    if (v40 == 1)
    {
      sub_23AA8A05C(v39, (uint64_t *)&unk_2542E6740);
      v42 = v41;
      v43 = 1;
    }
    else
    {
      v45 = v48;
      v38(v48, v39, v14);
      v46 = v47;
      sub_23AA8A05C(v47, &qword_2542E6760);
      (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v46, v45, v14);
      v34((char *)v46, 0, 1, v14);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v50);
      v38(v41, (uint64_t)v45, v14);
      v42 = v41;
      v43 = 0;
    }
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v34)(v42, v43, 1, v14);
  }
  return result;
}

uint64_t sub_23AC38554(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;

  v11 = a1;
  v12 = a2;
  if (a2 >> 60 == 15)
  {
    v9 = 0u;
    v10 = 0u;
  }
  else
  {
    *((_QWORD *)&v10 + 1) = MEMORY[0x24BDCDDE8];
    *(_QWORD *)&v9 = a1;
    *((_QWORD *)&v9 + 1) = a2;
  }
  sub_23AAA3E2C(a1, a2);
  v2 = sub_23AA94C90((uint64_t)&v9);
  v4 = v3;
  sub_23AA8A05C((uint64_t)&v9, qword_2542E5640);
  if (!v4)
  {
    sub_23B1C57B0();
    swift_allocObject();
    sub_23B1C57A4();
    sub_23B1C578C();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6780);
    sub_23AC42C74(&qword_2569E2DB8, (uint64_t *)&unk_2542E6780, (uint64_t (*)(void))sub_23AB5EB5C);
    v5 = sub_23B1C5798();
    v7 = v6;
    v2 = sub_23AC38554();
    swift_release();
    sub_23AAAE53C(v5, v7);
  }
  return v2;
}

uint64_t sub_23AC386F8(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;

  v18 = a1;
  v19 = a2;
  v20 = a3;
  v21 = a4 & 0x1FF;
  if ((a4 & 0x100) != 0)
  {
    v16 = 0u;
    v17 = 0u;
  }
  else
  {
    v5 = a2;
    v7 = a4;
    *((_QWORD *)&v17 + 1) = &type metadata for VFSVersion;
    v8 = swift_allocObject();
    *(_QWORD *)&v16 = v8;
    *(_QWORD *)(v8 + 16) = a1;
    *(_DWORD *)(v8 + 24) = v5;
    *(_QWORD *)(v8 + 32) = a3;
    *(_BYTE *)(v8 + 40) = v7 & 1;
  }
  v9 = sub_23AA94C90((uint64_t)&v16);
  v11 = v10;
  sub_23AA8A05C((uint64_t)&v16, qword_2542E5640);
  if (!v11)
  {
    sub_23B1C57B0();
    swift_allocObject();
    sub_23B1C57A4();
    sub_23B1C578C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2E98);
    sub_23AC42C74(&qword_2569E2EA0, &qword_2569E2E98, (uint64_t (*)(void))sub_23AC3F6D0);
    v12 = sub_23B1C5798();
    v14 = v13;
    v9 = sub_23AC38554(v12, v13);
    swift_release();
    sub_23AAAE53C(v12, v14);
  }
  return v9;
}

uint64_t sub_23AC388D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = a1;
  if (a1)
  {
    *((_QWORD *)&v10 + 1) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2569E5F30);
    *(_QWORD *)&v9 = a1;
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  swift_retain();
  v2 = sub_23AA94C90((uint64_t)&v9);
  v4 = v3;
  sub_23AA8A05C((uint64_t)&v9, qword_2542E5640);
  if (!v4)
  {
    sub_23B1C57B0();
    swift_allocObject();
    sub_23B1C57A4();
    sub_23B1C578C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2DC0);
    sub_23AC423D4();
    v5 = sub_23B1C5798();
    v7 = v6;
    v2 = sub_23AC38554(v5, v6);
    swift_release();
    sub_23AAAE53C(v5, v7);
  }
  return v2;
}

uint64_t sub_23AC38A68(uint64_t a1, char a2)
{
  return sub_23AC38E4C(a1, a2, MEMORY[0x24BEE4008], (uint64_t *)&unk_2542E5630, &qword_2569E2DF8, MEMORY[0x24BEE4010]);
}

uint64_t sub_23AC38A8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23AA8EFC8(a1, (uint64_t)v4, (uint64_t *)&unk_2542E4310);
  v5 = sub_23B1C5BDC();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_23AA8A05C((uint64_t)v4, (uint64_t *)&unk_2542E4310);
    v16 = 0u;
    v17 = 0u;
  }
  else
  {
    *((_QWORD *)&v17 + 1) = v5;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v16);
    (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 32))(boxed_opaque_existential_0, v4, v5);
  }
  v8 = sub_23AA94C90((uint64_t)&v16);
  v10 = v9;
  sub_23AA8A05C((uint64_t)&v16, qword_2542E5640);
  if (!v10)
  {
    sub_23B1C57B0();
    swift_allocObject();
    sub_23B1C57A4();
    sub_23B1C578C();
    sub_23AC42450();
    v11 = sub_23B1C5798();
    v13 = v12;
    v8 = sub_23AC38554(v11, v12);
    swift_release();
    sub_23AAAE53C(v11, v13);
  }
  return v8;
}

uint64_t sub_23AC38C8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = a1;
  if (a1)
  {
    *((_QWORD *)&v9 + 1) = &type metadata for Tags;
    *(_QWORD *)&v8 = a1;
  }
  else
  {
    v8 = 0u;
    v9 = 0u;
  }
  swift_bridgeObjectRetain();
  v1 = sub_23AA94C90((uint64_t)&v8);
  v3 = v2;
  sub_23AA8A05C((uint64_t)&v8, qword_2542E5640);
  if (!v3)
  {
    sub_23B1C57B0();
    swift_allocObject();
    sub_23B1C57A4();
    sub_23B1C578C();
    __swift_instantiateConcreteTypeFromMangledName(qword_2542E5198);
    sub_23AC42C74(&qword_2569E2DD8, qword_2542E5198, (uint64_t (*)(void))sub_23AB5EB18);
    v4 = sub_23B1C5798();
    v6 = v5;
    v1 = sub_23AC38554(v4, v5);
    swift_release();
    sub_23AAAE53C(v4, v6);
  }
  return v1;
}

uint64_t sub_23AC38E28(uint64_t a1, char a2)
{
  return sub_23AC38E4C(a1, a2, MEMORY[0x24BEE4568], &qword_2542E75D0, &qword_2569E2DE0, MEMORY[0x24BEE4570]);
}

uint64_t sub_23AC38E4C(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;

  v18 = a1;
  v19 = a2 & 1;
  if ((a2 & 1) != 0)
  {
    v16 = 0u;
    v17 = 0u;
  }
  else
  {
    *((_QWORD *)&v17 + 1) = a3;
    *(_QWORD *)&v16 = a1;
  }
  v9 = sub_23AA94C90((uint64_t)&v16);
  v11 = v10;
  sub_23AA8A05C((uint64_t)&v16, qword_2542E5640);
  if (!v11)
  {
    sub_23B1C57B0();
    swift_allocObject();
    sub_23B1C57A4();
    sub_23B1C578C();
    __swift_instantiateConcreteTypeFromMangledName(a4);
    sub_23AC429AC(a5, a4, a6, MEMORY[0x24BEE4AA8]);
    v12 = sub_23B1C5798();
    v14 = v13;
    v9 = sub_23AC38554(v12, v13);
    swift_release();
    sub_23AAAE53C(v12, v14);
  }
  return v9;
}

uint64_t sub_23AC38FE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  __int128 v9;
  int v10;
  char v11;

  v10 = a1;
  v11 = BYTE4(a1) & 1;
  if ((a1 & 0x100000000) != 0)
  {
    v8 = 0u;
    v9 = 0u;
  }
  else
  {
    *((_QWORD *)&v9 + 1) = MEMORY[0x24BEE44F0];
    LODWORD(v8) = a1;
  }
  v1 = sub_23AA94C90((uint64_t)&v8);
  v3 = v2;
  sub_23AA8A05C((uint64_t)&v8, qword_2542E5640);
  if (!v3)
  {
    sub_23B1C57B0();
    swift_allocObject();
    sub_23B1C57A4();
    sub_23B1C578C();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E75C0);
    sub_23AC429AC(&qword_2569E2DE8, (uint64_t *)&unk_2542E75C0, MEMORY[0x24BEE44F8], MEMORY[0x24BEE4AA8]);
    v4 = sub_23B1C5798();
    v6 = v5;
    v1 = sub_23AC38554(v4, v5);
    swift_release();
    sub_23AAAE53C(v4, v6);
  }
  return v1;
}

uint64_t sub_23AC39190(uint64_t a1)
{
  return sub_23AC39370(a1, &qword_2542E5498, &qword_2542E7458, (void (*)(void))sub_23AC424CC);
}

uint64_t sub_23AC391AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a1;
  v12 = a2;
  if (a2)
  {
    *((_QWORD *)&v10 + 1) = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v9 = a1;
    *((_QWORD *)&v9 + 1) = a2;
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  swift_bridgeObjectRetain();
  v2 = sub_23AA94C90((uint64_t)&v9);
  v4 = v3;
  sub_23AA8A05C((uint64_t)&v9, qword_2542E5640);
  if (!v4)
  {
    sub_23B1C57B0();
    swift_allocObject();
    sub_23B1C57A4();
    sub_23B1C578C();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E7460);
    sub_23AC429AC(&qword_2569E2E68, (uint64_t *)&unk_2542E7460, MEMORY[0x24BEE0D08], MEMORY[0x24BEE4AA8]);
    v5 = sub_23B1C5798();
    v7 = v6;
    v2 = sub_23AC38554(v5, v6);
    swift_release();
    sub_23AAAE53C(v5, v7);
  }
  return v2;
}

uint64_t sub_23AC39354(uint64_t a1)
{
  return sub_23AC39370(a1, &qword_2542E54E8, &qword_2542E76D0, (void (*)(void))sub_23AC42860);
}

uint64_t sub_23AC39370(uint64_t a1, uint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = a1;
  if (a1)
  {
    *((_QWORD *)&v15 + 1) = __swift_instantiateConcreteTypeFromMangledName(a2);
    *(_QWORD *)&v14 = a1;
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
  }
  swift_bridgeObjectRetain();
  v7 = sub_23AA94C90((uint64_t)&v14);
  v9 = v8;
  sub_23AA8A05C((uint64_t)&v14, qword_2542E5640);
  if (!v9)
  {
    sub_23B1C57B0();
    swift_allocObject();
    sub_23B1C57A4();
    sub_23B1C578C();
    __swift_instantiateConcreteTypeFromMangledName(a3);
    a4();
    v10 = sub_23B1C5798();
    v12 = v11;
    v7 = sub_23AC38554(v10, v11);
    swift_release();
    sub_23AAAE53C(v10, v12);
  }
  return v7;
}

uint64_t sub_23AC39500(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a1;
  v12 = a2;
  if (a1)
  {
    *((_QWORD *)&v10 + 1) = &type metadata for UserInfo;
    *(_QWORD *)&v9 = a1;
    *((_QWORD *)&v9 + 1) = a2;
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  sub_23AA8831C(a1);
  v2 = sub_23AA94C90((uint64_t)&v9);
  v4 = v3;
  sub_23AA8A05C((uint64_t)&v9, qword_2542E5640);
  if (!v4)
  {
    sub_23B1C57B0();
    swift_allocObject();
    sub_23B1C57A4();
    sub_23B1C578C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E76A0);
    sub_23AC42C74(qword_2542E3578, &qword_2542E76A0, (uint64_t (*)(void))sub_23AC428E4);
    v5 = sub_23B1C5798();
    v7 = v6;
    v2 = sub_23AC38554(v5, v6);
    swift_release();
    sub_23AAAE53C(v5, v7);
  }
  return v2;
}

uint64_t sub_23AC3969C(uint64_t a1)
{
  return sub_23AC39370(a1, &qword_2542E76A8, &qword_2542E76C0, (void (*)(void))sub_23AC42928);
}

uint64_t sub_23AC396B8(uint64_t a1, char a2)
{
  return sub_23AC38E4C(a1, a2, MEMORY[0x24BEE1768], (uint64_t *)&unk_2542E74F0, (unint64_t *)&qword_2569E2E60, MEMORY[0x24BEE1770]);
}

uint64_t sub_23AC396DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = a1;
  if (a1)
  {
    *((_QWORD *)&v10 + 1) = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7488);
    *(_QWORD *)&v9 = a1;
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  swift_bridgeObjectRetain();
  v2 = sub_23AA94C90((uint64_t)&v9);
  v4 = v3;
  sub_23AA8A05C((uint64_t)&v9, qword_2542E5640);
  if (!v4)
  {
    sub_23B1C57B0();
    swift_allocObject();
    sub_23B1C57A4();
    sub_23B1C578C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2E30);
    sub_23AC42C74(&qword_2569E2E38, &qword_2569E2E30, (uint64_t (*)(void))sub_23AC426B0);
    v5 = sub_23B1C5798();
    v7 = v6;
    v2 = sub_23AC38554(v5, v6);
    swift_release();
    sub_23AAAE53C(v5, v7);
  }
  return v2;
}

uint64_t sub_23AC39884(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  __int128 v9;
  char v10;

  v10 = a1;
  if (a1 == 2)
  {
    v8 = 0u;
    v9 = 0u;
  }
  else
  {
    *((_QWORD *)&v9 + 1) = MEMORY[0x24BEE1328];
    LOBYTE(v8) = a1 & 1;
  }
  v1 = sub_23AA94C90((uint64_t)&v8);
  v3 = v2;
  sub_23AA8A05C((uint64_t)&v8, qword_2542E5640);
  if (!v3)
  {
    sub_23B1C57B0();
    swift_allocObject();
    sub_23B1C57A4();
    sub_23B1C578C();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E74E0);
    sub_23AC429AC((unint64_t *)&qword_2569E2508, (uint64_t *)&unk_2542E74E0, MEMORY[0x24BEE1330], MEMORY[0x24BEE4AA8]);
    v4 = sub_23B1C5798();
    v6 = v5;
    v1 = sub_23AC38554(v4, v5);
    swift_release();
    sub_23AAAE53C(v4, v6);
  }
  return v1;
}

uint64_t sub_23AC39A30(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v9;
  __int128 v10;
  void *v11;
  void *v12;

  v11 = a1;
  v12 = a2;
  if (a1 == (void *)1)
  {
    v9 = 0u;
    v10 = 0u;
  }
  else
  {
    *((_QWORD *)&v10 + 1) = &type metadata for WorkingSetSyncAnchor;
    *(_QWORD *)&v9 = a1;
    *((_QWORD *)&v9 + 1) = a2;
  }
  sub_23AC427A8(a1, a2);
  v2 = sub_23AA94C90((uint64_t)&v9);
  v4 = v3;
  sub_23AA8A05C((uint64_t)&v9, qword_2542E5640);
  if (!v4)
  {
    sub_23B1C57B0();
    swift_allocObject();
    sub_23B1C57A4();
    sub_23B1C578C();
    __swift_instantiateConcreteTypeFromMangledName(qword_2542DE080);
    sub_23AC42C74(&qword_2542E1380, qword_2542DE080, (uint64_t (*)(void))sub_23AC427D8);
    v5 = sub_23B1C5798();
    v7 = v6;
    v2 = sub_23AC38554(v5, v6);
    swift_release();
    sub_23AAAE53C(v5, v7);
  }
  return v2;
}

uint64_t sub_23AC39BD0(uint64_t a1)
{
  return sub_23AC39C08(a1, type metadata accessor for VFSDirectoryLister, &qword_2569E2E18, (void (*)(void))sub_23AC42634);
}

uint64_t sub_23AC39BEC(uint64_t a1)
{
  return sub_23AC39C08(a1, (uint64_t (*)(_QWORD))type metadata accessor for VFSStagedContext, &qword_2569E2E00, (void (*)(void))sub_23AC425B8);
}

uint64_t sub_23AC39C08(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, void (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = a1;
  if (a1)
  {
    *((_QWORD *)&v15 + 1) = a2(0);
    *(_QWORD *)&v14 = a1;
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
  }
  swift_retain();
  v7 = sub_23AA94C90((uint64_t)&v14);
  v9 = v8;
  sub_23AA8A05C((uint64_t)&v14, qword_2542E5640);
  if (!v9)
  {
    sub_23B1C57B0();
    swift_allocObject();
    sub_23B1C57A4();
    sub_23B1C578C();
    __swift_instantiateConcreteTypeFromMangledName(a3);
    a4();
    v10 = sub_23B1C5798();
    v12 = v11;
    v7 = sub_23AC38554(v10, v11);
    swift_release();
    sub_23AAAE53C(v10, v12);
  }
  return v7;
}

uint64_t sub_23AC39D98(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  if (objc_msgSend(v1, sel_isNullAtIndex_, a1))
    sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
  if (swift_dynamicCastMetatype())
    sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
  sub_23B1C5780();
  swift_allocObject();
  sub_23B1C5774();
  v4 = objc_msgSend(v1, sel_dataAtIndex_, a1);
  v5 = sub_23B1C5AD4();
  v7 = v6;

  sub_23AC3F79C();
  sub_23B1C5768();
  sub_23AAAE53C(v5, v7);
  result = swift_release();
  if (!v2)
    return v9;
  return result;
}

uint64_t sub_23AC39EE4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2569E5F30);
  if (objc_msgSend(v1, sel_isNullAtIndex_, a1))
    sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
  if (swift_dynamicCastMetatype())
    sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
  sub_23B1C5780();
  swift_allocObject();
  sub_23B1C5774();
  v4 = objc_msgSend(v1, sel_dataAtIndex_, a1);
  v5 = sub_23B1C5AD4();
  v7 = v6;

  sub_23AAB5A28(&qword_2569E2DB0, (uint64_t *)&unk_2569E5F30, (uint64_t)&unk_23B1E04B8);
  sub_23B1C5768();
  sub_23AAAE53C(v5, v7);
  result = swift_release();
  if (!v2)
    return v9;
  return result;
}

uint64_t sub_23AC3A044(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
  if (objc_msgSend(v1, sel_isNullAtIndex_, a1))
    sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
  if (swift_dynamicCastMetatype())
    sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
  sub_23B1C5780();
  swift_allocObject();
  sub_23B1C5774();
  v4 = objc_msgSend(v1, sel_dataAtIndex_, a1);
  v5 = sub_23B1C5AD4();
  v7 = v6;

  sub_23AC429AC(&qword_2542E76C8, &qword_2542E54E8, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
  sub_23B1C5768();
  sub_23AAAE53C(v5, v7);
  result = swift_release();
  if (!v2)
    return v9;
  return result;
}

uint64_t sub_23AC3A1AC(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  if (objc_msgSend(v1, sel_isNullAtIndex_, a1))
    sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
  if (swift_dynamicCastMetatype())
    sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
  sub_23B1C5780();
  swift_allocObject();
  sub_23B1C5774();
  v4 = objc_msgSend(v1, sel_dataAtIndex_, a1);
  v5 = sub_23B1C5AD4();
  v7 = v6;

  sub_23AC4281C();
  sub_23B1C5768();
  sub_23AAAE53C(v5, v7);
  result = swift_release();
  if (!v2)
    return v9;
  return result;
}

uint64_t sub_23AC3A2EC(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7488);
  if (objc_msgSend(v1, sel_isNullAtIndex_, a1))
    sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
  if (swift_dynamicCastMetatype())
    sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
  sub_23B1C5780();
  swift_allocObject();
  sub_23B1C5774();
  v4 = objc_msgSend(v1, sel_dataAtIndex_, a1);
  v5 = sub_23B1C5AD4();
  v7 = v6;

  sub_23AC4272C();
  sub_23B1C5768();
  sub_23AAAE53C(v5, v7);
  result = swift_release();
  if (!v2)
    return v9;
  return result;
}

uint64_t sub_23AC3A434(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E6CD8);
  if (objc_msgSend(v1, sel_isNullAtIndex_, a1))
    sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
  type metadata accessor for NSFileProviderItemIdentifier(0);
  if (swift_dynamicCastMetatype())
    sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 262);
  sub_23B1C5780();
  swift_allocObject();
  sub_23B1C5774();
  v4 = objc_msgSend(v1, sel_dataAtIndex_, a1);
  v5 = sub_23B1C5AD4();
  v7 = v6;

  sub_23AAB5A28(&qword_2569E2E50, &qword_2542E6CD8, (uint64_t)&unk_23B1D6568);
  sub_23B1C5768();
  sub_23AAAE53C(v5, v7);
  result = swift_release();
  if (!v2)
    return v9;
  return result;
}

uint64_t sub_23AC3A5A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for VFSItem(0) + 36));
  v4 = *v3;
  v5 = *((_DWORD *)v3 + 2);
  v6 = v3[2];
  LOBYTE(v3) = *((_BYTE *)v3 + 24);
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_BYTE *)(v1 + 24);
  v10 = *(_QWORD *)(v1 + 32);
  v9 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = (_BYTE)v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23AC3A610(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  _BYTE v40[16];
  _BYTE v41[8];
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v24 = a2;
  v25 = a3;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v38 = 0;
  v39 = 0;
  v10 = *a1;
  v9 = a1[1];
  *(_QWORD *)&v35 = *a1;
  *((_QWORD *)&v35 + 1) = v9;
  v11 = *((_DWORD *)a1 + 4);
  v12 = *((_DWORD *)a1 + 5);
  v36 = v11;
  v37 = v12;
  sub_23AA724E8((uint64_t)(a1 + 3), (uint64_t)v40, qword_2542E72C8);
  v13 = sub_23AA724E8((uint64_t)v40, (uint64_t)v41, qword_2542E72C8);
  if (v42)
  {
    MEMORY[0x24BDAC7A8](v13);
    if ((v15 & 0x1000000000000000) != 0 || !(v15 & 0x2000000000000000 | v14 & 0x1000000000000000))
    {
      result = sub_23B1C6EF0();
      if (!v20)
        return v21;
    }
    else if ((v15 & 0x2000000000000000) != 0)
    {
      v29 = v14;
      v30 = v15 & 0xFFFFFFFFFFFFFFLL;
      v38 = &v29;
      result = sub_23AC42550(&v35, &v22);
      if (!v20)
        return v22;
    }
    else
    {
      if ((v14 & 0x1000000000000000) != 0)
        v16 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
      else
        v16 = sub_23B1C6F80();
      result = (uint64_t)sub_23AC42570(v16, &v29);
      if (!v20)
        return v29;
    }
  }
  else
  {
    v22 = 0;
    v23 = 1;
    v29 = v10;
    v30 = v9;
    v31 = v11;
    v32 = v12;
    v33 = 0;
    v34 = 0;
    result = sub_23B0E0C9C((uint64_t)&v29, a2, a3, a4, (uint64_t)&v22, a5, a6);
    if (!v20)
    {
      if ((v23 & 1) != 0)
        __break(1u);
      else
        return v22;
    }
  }
  return result;
}

uint64_t sub_23AC3A86C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v16;
  char v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[16];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  v19 = a3;
  v20 = a4;
  v21 = a5;
  v22 = a6;
  v32 = 0;
  v31 = 0;
  v9 = *a1;
  v10 = a1[1];
  v28[0] = *a1;
  v28[1] = v10;
  v11 = *((_DWORD *)a1 + 4);
  v12 = *((_DWORD *)a1 + 5);
  v29 = v11;
  v30 = v12;
  sub_23AA724E8((uint64_t)(a1 + 3), (uint64_t)v33, qword_2542E72C8);
  sub_23AA724E8((uint64_t)v33, (uint64_t)&v34, qword_2542E72C8);
  if (v35)
    return sub_23AC3E958(v34, v35, (uint64_t)v28, (uint64_t (*)(uint64_t))sub_23AC42C54);
  v17 = 1;
  v23[0] = v9;
  v23[1] = v10;
  v24 = v11;
  v25 = v12;
  v26 = 0;
  v27 = 0;
  result = sub_23B0E1B48((uint64_t)v23, a2, a3, a4, (uint64_t)&v17, a5, a6);
  if (!v16 && (v17 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_23AC3A9A8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[16];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v14 = __swift_instantiateConcreteTypeFromMangledName(qword_2542E5250);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v29 - v18;
  v36 = a2;
  v37 = a3;
  v31 = a3;
  v32 = a4;
  v38 = a4;
  v33 = a5;
  v39 = a5;
  v40 = a6;
  v34 = a6;
  v49 = 0;
  v50 = 0;
  v20 = *a1;
  v21 = a1[1];
  v46[0] = *a1;
  v46[1] = v21;
  v22 = *((_DWORD *)a1 + 4);
  v23 = *((_DWORD *)a1 + 5);
  v47 = v22;
  v48 = v23;
  sub_23AA724E8((uint64_t)(a1 + 3), (uint64_t)v51, qword_2542E72C8);
  sub_23AA724E8((uint64_t)v51, (uint64_t)&v52, qword_2542E72C8);
  if (v53)
    return sub_23AC3EA4C(v52, v53, (uint64_t)v46, (uint64_t (*)(uint64_t))sub_23AC42AEC);
  v30 = v17;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E72C0);
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v19, 1, 1, v25);
  v41[0] = v20;
  v41[1] = v21;
  v42 = v22;
  v43 = v23;
  v44 = 0;
  v45 = 0;
  v27 = v35;
  sub_23B0E1EBC((uint64_t)v41, a2, v31, v32, (uint64_t)v19, v33, v34);
  if (!v27)
  {
    v28 = (uint64_t)v30;
    sub_23AA8EFC8((uint64_t)v19, (uint64_t)v30, qword_2542E5250);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v28, 1, v25);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    sub_23AA724E8(v28, a7, &qword_2542E72C0);
  }
  return sub_23AA8A05C((uint64_t)v19, qword_2542E5250);
}

void sub_23AC3AC0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  id v34[3];

  v34[1] = *(id *)MEMORY[0x24BDAC8D0];
  v29 = 0;
  v30 = 0;
  v10 = *a1;
  v11 = a1[1];
  *(_QWORD *)&v26 = *a1;
  *((_QWORD *)&v26 + 1) = v11;
  v12 = *((_DWORD *)a1 + 4);
  v13 = *((_DWORD *)a1 + 5);
  v27 = v12;
  v28 = v13;
  sub_23AA724E8((uint64_t)(a1 + 3), (uint64_t)v31, qword_2542E72C8);
  v14 = sub_23AA724E8((uint64_t)v31, (uint64_t)&v32, qword_2542E72C8);
  v15 = v33;
  if (v33)
  {
    v16 = v32;
    MEMORY[0x24BDAC7A8](v14);
    if ((v15 & 0x1000000000000000) != 0 || !(v15 & 0x2000000000000000 | v16 & 0x1000000000000000))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7700);
      sub_23B1C6EF0();
    }
    else if ((v15 & 0x2000000000000000) != 0)
    {
      v20 = v16;
      v21 = v15 & 0xFFFFFFFFFFFFFFLL;
      v29 = &v20;
      sub_23AC42A08(&v26, v34);
    }
    else
    {
      if ((v16 & 0x1000000000000000) != 0)
        v17 = (v15 & 0xFFFFFFFFFFFFFFFLL) + 32;
      else
        v17 = sub_23B1C6F80();
      sub_23AC42A38(v17, &v20);
    }
  }
  else
  {
    v34[0] = (id)1;
    v20 = v10;
    v21 = v11;
    v22 = v12;
    v23 = v13;
    v24 = 0;
    v25 = 0;
    sub_23B0E2230((uint64_t)&v20, a2, a3, a4, (uint64_t)v34, a5, a6);
    if (v19)
    {
      sub_23AC42A28(v34[0]);
    }
    else if (v34[0] == (id)1)
    {
      __break(1u);
    }
  }
}

uint64_t *sub_23AC3AE6C()
{
  if (qword_2542E5360 != -1)
    swift_once();
  return &qword_2542EDE40;
}

uint64_t sub_23AC3AEAC()
{
  return 0;
}

uint64_t sub_23AC3AEC0(uint64_t a1, int a2, uint64_t a3, char a4)
{
  unsigned int v4;

  v4 = a4 & 1;
  if (a2)
    v4 = 0;
  if (a1)
    return 0;
  else
    return v4;
}

uint64_t sub_23AC3AED8(uint64_t a1, int a2, uint64_t a3, char a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v6 = sub_23B1C7304();
    sub_23B1C64F4();
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    result = v6;
    if ((a4 & 1) != 0)
      return result;
  }
  else
  {
    result = sub_23B1C7304();
    if ((a4 & 1) != 0)
      return result;
  }
  v7 = result;
  sub_23B1C64F4();
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  return v7;
}

const char *sub_23AC3AFE8()
{
  return "BLOB";
}

uint64_t sub_23AC3AFF4()
{
  return 1112493122;
}

uint64_t sub_23AC3B004(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  char v6;

  v4 = sub_23AC39D98(a2);
  v6 = v5;

  if (v2)
    return v6 & 1;
  else
    return v4;
}

void sub_23AC3B06C()
{
  sub_23B1C704C();
  __break(1u);
}

uint64_t sub_23AC3B0C4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, char a5)
{
  return sub_23AC386F8(a2, a3, a4, a5 & 1);
}

uint64_t sub_23AC3B104(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, int a6, uint64_t a7, char a8)
{
  uint64_t result;

  result = 0;
  if (a1 == a5 && a2 == a6)
  {
    if ((a4 & 1) != 0)
    {
      if ((a8 & 1) != 0)
        return 1;
    }
    else if ((a8 & 1) == 0 && a3 == a7)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_23AC3B148()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746E756F436E6567;
  if (*v0 != 1)
    v1 = 1702521203;
  if (*v0)
    return v1;
  else
    return 0x4449656C6966;
}

uint64_t sub_23AC3B198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23AC3F2D4(a1, a2);
  *a3 = result;
  return result;
}

void sub_23AC3B1BC(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_23AC3B1C8()
{
  sub_23AC3F030();
  return sub_23B1C7544();
}

uint64_t sub_23AC3B1F0()
{
  sub_23AC3F030();
  return sub_23B1C7550();
}

uint64_t sub_23AC3B218(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _DWORD v12[7];
  char v13;
  char v14;
  char v15;

  v12[3] = a5;
  v12[6] = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2C70);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AC3F030();
  sub_23B1C7538();
  v15 = 0;
  sub_23B1C72E0();
  if (!v5)
  {
    v14 = 1;
    sub_23B1C72D4();
    v13 = 2;
    sub_23B1C7250();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_23AC3B370(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  char v3;

  result = sub_23AC3F410(a1);
  if (v1)
    return v3 & 1;
  return result;
}

void sub_23AC3B39C(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
}

uint64_t sub_23AC3B3B4()
{
  uint64_t v0;
  BOOL v1;

  if (*(_QWORD *)v0)
    v1 = 0;
  else
    v1 = *(_DWORD *)(v0 + 8) == 0;
  if (v1)
    return *(unsigned __int8 *)(v0 + 24);
  else
    return 0;
}

uint64_t sub_23AC3B3D8()
{
  uint64_t v0;

  return sub_23AC3AED8(*(_QWORD *)v0, *(_DWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_23AC3B3EC(uint64_t a1, uint64_t a2)
{
  char v4;

  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    return 0;
  v4 = *(_BYTE *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 24))
      return 1;
  }
  else
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      v4 = 1;
    if ((v4 & 1) == 0)
      return 1;
  }
  return 0;
}

uint64_t sub_23AC3B444@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  char v7;

  result = sub_23AC3F410(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
  }
  return result;
}

uint64_t sub_23AC3B47C(_QWORD *a1)
{
  uint64_t v1;

  return sub_23AC3B218(a1, *(_QWORD *)v1, *(_DWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

void sub_23AC3B4A0(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  v6 = sub_23AC39D98(a2);
  v8 = v7;
  v10 = v9;
  v12 = v11;

  if (!v3)
  {
    *(_QWORD *)a3 = v6;
    *(_DWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v10;
    *(_BYTE *)(a3 + 24) = v12 & 1;
  }
}

uint64_t sub_23AC3B518()
{
  uint64_t v0;

  return sub_23AC386F8(*(_QWORD *)v0, *(unsigned int *)(v0 + 8), *(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

uint64_t *sub_23AC3B554@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

uint64_t sub_23AC3B56C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x746E756F436E6567;
  if (*v0 != 1)
    v1 = 0xD000000000000017;
  if (*v0)
    return v1;
  else
    return 0x6E726574746170;
}

uint64_t sub_23AC3B5CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23AC41E28(a1, a2);
  *a3 = result;
  return result;
}

unint64_t sub_23AC3B5F0@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = 3;
  if (result < 3)
    v2 = result;
  *a2 = v2;
  return result;
}

uint64_t sub_23AC3B604()
{
  sub_23AC42AA8();
  return sub_23B1C7544();
}

uint64_t sub_23AC3B62C()
{
  sub_23AC42AA8();
  return sub_23B1C7550();
}

uint64_t sub_23AC3B654(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_23AC3B6A0(a1);
  return v2;
}

uint64_t *sub_23AC3B6A0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20[10];
  char v21;

  v2 = v1;
  v17 = *v2;
  v4 = sub_23B1C5BDC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2E88);
  v8 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v18 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  sub_23AC42AA8();
  swift_retain();
  v15 = v10;
  v12 = v19;
  sub_23B1C7520();
  if (v12)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    swift_deallocPartialClassInstance();
  }
  else
  {
    type metadata accessor for fpfs_tempfile_pattern_t(0);
    v21 = 0;
    sub_23AA7E38C(&qword_2569E2CD0, (uint64_t (*)(uint64_t))type metadata accessor for fpfs_tempfile_pattern_t, (uint64_t)&unk_23B1D9118);
    v13 = v15;
    sub_23B1C71C0();
    *((_DWORD *)v2 + 4) = v20[0];
    LOBYTE(v20[0]) = 1;
    *((_DWORD *)v2 + 5) = sub_23B1C71F0();
    LOBYTE(v20[0]) = 2;
    sub_23AA7E38C(&qword_2569E2468, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    sub_23B1C71C0();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))((uint64_t)v2 + OBJC_IVAR____TtC9libfssync23VFSTrackingContinuation_contentModificationDate, v7, v4);
    swift_release();
    sub_23B1C7124();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  return v2;
}

uint64_t sub_23AC3B980(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[5];
  char v17;

  v2 = v1;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E24F0);
  v4 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2E78);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AC42AA8();
  sub_23B1C7538();
  LODWORD(v16[0]) = *(_DWORD *)(v2 + 16);
  v17 = 0;
  type metadata accessor for fpfs_tempfile_pattern_t(0);
  sub_23AA7E38C(&qword_2569E2CA0, (uint64_t (*)(uint64_t))type metadata accessor for fpfs_tempfile_pattern_t, (uint64_t)&unk_23B1D9144);
  v11 = v15;
  sub_23B1C72A4();
  if (!v11)
  {
    LOBYTE(v16[0]) = 1;
    sub_23B1C72D4();
    LOBYTE(v16[0]) = 2;
    sub_23B1C5BDC();
    sub_23AA7E38C(&qword_2569E2418, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_23B1C72A4();
    sub_23B1C7214();
    v15 = v16[4];
    __swift_project_boxed_opaque_existential_1(v16, v16[3]);
    sub_23AB6E3F4();
    sub_23B1C7538();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_23AC3BBF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  result = 0xD000000000000011;
  if (*(__objc2_class **)a1 != _TtC9libfssync23VFSTrackingContinuation)
    return 0xD000000000000019;
  if (*(_DWORD *)(v1 + 20) == *(_DWORD *)(a1 + 20))
  {
    sub_23B1C5BDC();
    sub_23AA7E38C(&qword_2569E24B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
    swift_retain();
    v4 = sub_23B1C63A4();
    swift_release();
    if ((v4 & 1) != 0)
      return 0;
    else
      return 0x696D2D656D69746DLL;
  }
  return result;
}

uint64_t (*sub_23AC3BD08())(uint64_t a1)
{
  swift_retain();
  return sub_23AC42A80;
}

uint64_t sub_23AC3BD3C()
{
  uint64_t v0;
  uint64_t v2;

  sub_23B1C6EFC();
  sub_23B1C64F4();
  sub_23ADB47EC(*(_DWORD *)(v0 + 16));
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v2 = *(unsigned int *)(v0 + 20);
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C5B94();
  sub_23B1C6884();
  sub_23B1C64F4();
  return HIDWORD(v2);
}

uint64_t sub_23AC3BE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC9libfssync23VFSTrackingContinuation_contentModificationDate;
  v2 = sub_23B1C5BDC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t sub_23AC3BE98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC9libfssync23VFSTrackingContinuation_contentModificationDate;
  v2 = sub_23B1C5BDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_23AC3BEE8()
{
  return sub_23AC3BD3C();
}

uint64_t sub_23AC3BF08()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_23AC3BF14()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_23AC3BF20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23AC3BF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*sub_23AC3BF80())()
{
  return nullsub_1;
}

uint64_t sub_23AC3BF90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for VFSItem(0);
  return sub_23AA907B0(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(_QWORD))type metadata accessor for ItemMetadata);
}

uint64_t sub_23AC3BFCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for VFSItem(0) + 28);
  return sub_23AC3F594(a1, v3);
}

uint64_t (*sub_23AC3BFFC())(_QWORD)
{
  type metadata accessor for VFSItem(0);
  return nullsub_1;
}

uint64_t sub_23AC3C024@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for VFSItem(0);
  return sub_23AA8EFC8(v1 + *(int *)(v3 + 32), a1, &qword_2542E5050);
}

uint64_t sub_23AC3C060()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for VFSItem(0) + 36));
}

uint64_t sub_23AC3C090()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for VFSItem(0) + 40));
}

uint64_t sub_23AC3C0B0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  char *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _DWORD v16[4];

  v1 = (int *)type metadata accessor for VFSItem(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_BYTE *)(v0 + 8))
    return 0;
  v4 = *(_DWORD *)(v0 + v1[10]);
  if (v4 <= 0xB)
  {
    if (((1 << v4) & 0xC8E) != 0)
    {
      sub_23AA907B0(v0, (uint64_t)v3, type metadata accessor for VFSItem);
      type metadata accessor for VFSTrackingContinuation(0);
      v5 = swift_allocObject();
      *(_DWORD *)(v5 + 16) = *(_DWORD *)&v3[v1[10]];
      *(_DWORD *)(v5 + 20) = *(_DWORD *)&v3[v1[9] + 8];
      v6 = v1[7];
      v7 = &v3[v6 + *(int *)(type metadata accessor for ItemMetadata() + 32)];
      v8 = v5 + OBJC_IVAR____TtC9libfssync23VFSTrackingContinuation_contentModificationDate;
      v9 = sub_23B1C5BDC();
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, v7, v9);
      sub_23AA937BC((uint64_t)v3, type metadata accessor for VFSItem);
    }
    else if (((1 << v4) & 0x370) != 0)
    {
      sub_23AA907B0(v0, (uint64_t)v3, type metadata accessor for VFSItem);
      type metadata accessor for VFSTrackingContinuation(0);
      v10 = swift_allocObject();
      *(_DWORD *)(v10 + 16) = *(_DWORD *)&v3[v1[10]];
      *(_DWORD *)(v10 + 20) = *(_DWORD *)&v3[v1[9] + 8];
      v11 = v1[7];
      v12 = &v3[v11 + *(int *)(type metadata accessor for ItemMetadata() + 32)];
      v13 = v10 + OBJC_IVAR____TtC9libfssync23VFSTrackingContinuation_contentModificationDate;
      v14 = sub_23B1C5BDC();
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v13, v12, v14);
      sub_23AA937BC((uint64_t)v3, type metadata accessor for VFSItem);
    }
    return v4;
  }
  type metadata accessor for fpfs_tempfile_pattern_t(0);
  v16[3] = v4;
  result = sub_23B1C73E8();
  __break(1u);
  return result;
}

unint64_t sub_23AC3C2D0()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for VFSItem(0) + 44));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

unint64_t sub_23AC3C30C()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for VFSItem(0) + 56));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t sub_23AC3C348@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;

  result = type metadata accessor for VFSItem(0);
  v4 = (uint64_t *)(v1 + *(int *)(result + 36));
  v5 = *v4;
  v6 = (int *)(v1 + *(int *)(result + 56));
  if (*((_BYTE *)v6 + 4))
    v7 = 0;
  else
    v7 = *v6;
  v8 = *((_DWORD *)v4 + 2);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_23AC3C3A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for VFSItem(0);
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23B1C5E4C();
  MEMORY[0x24BDAC7A8](v2);
  v3 = (_BYTE *)(v0 + *(int *)(v1 + 28));
  v4 = type metadata accessor for ItemMetadata();
  result = 0;
  if (v3[*(int *)(v4 + 80)] == 1)
  {
    if (*v3 || (v3[*(int *)(v4 + 108)] & 1) != 0)
      return 0;
    v11 = MEMORY[0x24BEE4AF8];
    MEMORY[0x24BDAC7A8](0);
    *(&v10 - 2) = v0;
    *(&v10 - 1) = (uint64_t)&v11;
    LOBYTE(v12) = 1;
    v13[0] = v6;
    v13[1] = 0;
    v14 = v8;
    v15 = v7;
    v16 = 0;
    v17 = 0;
    result = sub_23B0E1B48((uint64_t)v13, v9, 0x8000, 0, (uint64_t)&v12, (uint64_t)sub_23AC3F5EC, (uint64_t)(&v10 - 4));
    if ((v12 & 1) != 0)
    {
      __break(1u);
      return result;
    }
    result = v11;
    if (!*(_QWORD *)(v11 + 16))
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return result;
}

void sub_23AC3C7AC(int a1, uint64_t a2, _QWORD **a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  off_t v10;
  off_t v11;
  off_t v12;
  unint64_t v13;
  off_t v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  char v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  char **v36;
  uint64_t (*v37)();
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _DWORD v42[34];
  unint64_t v43;

  v6 = sub_23B1C5570();
  v39 = *(_QWORD *)(v6 - 8);
  v40 = (_QWORD *)v6;
  MEMORY[0x24BDAC7A8](v6);
  v38 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)(a2 + *(int *)(type metadata accessor for VFSItem(0) + 28));
  v9 = *(int *)(type metadata accessor for ItemMetadata() + 100);
  v10 = *(_QWORD *)((char *)v8 + v9);
  v11 = lseek(a1, 0, 4);
  v43 = v11;
  if (v11 < 0)
  {
    v14 = -1;
LABEL_13:
    v20 = MEMORY[0x23B85E7A4]();
    if ((_DWORD)v20)
    {
      if (MEMORY[0x23B85E7A4]() == 96)
      {
        sub_23AC42C18((uint64_t)v42);
        v8 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0950);
        sub_23AAB5A28((unint64_t *)&qword_2542E0940, (uint64_t *)&unk_2542E0950, (uint64_t)&unk_23B1D40CC);
        v21 = (id)swift_allocError();
        sub_23AA724E8((uint64_t)v42, v22, (uint64_t *)&unk_2542E0950);
      }
      else if (MEMORY[0x23B85E7A4]() == 9939394)
      {
        v21 = objc_msgSend((id)objc_opt_self(), sel_fp_errorForDataProtectionClass_, 2);
      }
      else
      {
        MEMORY[0x23B85E7A4]();
        v25 = sub_23B1C5E64();
        if ((v25 & 0x100000000) != 0)
          v42[0] = 22;
        else
          v42[0] = v25;
        sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
        sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
        v26 = v38;
        v8 = v40;
        sub_23B1C5864();
        v21 = (id)sub_23B1C5558();
        (*(void (**)(char *, _QWORD *))(v39 + 8))(v26, v8);
      }
      swift_willThrow();
      v27 = v21;
      v42[0] = sub_23B1C54A4();
      sub_23AB6CD48();
      v28 = sub_23B1C575C();

      if ((v28 & 1) != 0)
      {

        v12 = v14;
        if ((v14 & 0x8000000000000000) == 0)
          goto LABEL_31;
      }
      return;
    }
    MEMORY[0x24BDAC7A8](v20);
    v36 = &v38 - 4;
    *(&v38 - 2) = (char *)&v43;
    v37 = sub_23AC42E94;
LABEL_48:
    sub_23AFF56B8((uint64_t (*)(uint64_t))v37, (uint64_t)v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 300);
  }
  v12 = v11;
  v41 = a3;
  while (1)
  {
    v13 = lseek(a1, v12, 3);
    v43 = v13;
    if ((v13 & 0x8000000000000000) != 0)
    {
      v23 = MEMORY[0x23B85E7A4]();
      if ((_DWORD)v23)
      {
        if (MEMORY[0x23B85E7A4]() == 96)
        {
          sub_23AC42C18((uint64_t)v42);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E0950);
          sub_23AAB5A28((unint64_t *)&qword_2542E0940, (uint64_t *)&unk_2542E0950, (uint64_t)&unk_23B1D40CC);
          swift_allocError();
          sub_23AA724E8((uint64_t)v42, v24, (uint64_t *)&unk_2542E0950);
        }
        else if (MEMORY[0x23B85E7A4]() == 9939394)
        {
          objc_msgSend((id)objc_opt_self(), sel_fp_errorForDataProtectionClass_, 2);
        }
        else
        {
          MEMORY[0x23B85E7A4]();
          v33 = sub_23B1C5E64();
          if ((v33 & 0x100000000) != 0)
            v42[0] = 22;
          else
            v42[0] = v33;
          sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
          sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
          v34 = v38;
          v35 = v40;
          sub_23B1C5864();
          sub_23B1C5558();
          (*(void (**)(char *, _QWORD *))(v39 + 8))(v34, v35);
        }
        swift_willThrow();
        return;
      }
      MEMORY[0x24BDAC7A8](v23);
      v36 = &v38 - 4;
      *(&v38 - 2) = (char *)&v43;
      v37 = sub_23AC42C4C;
      goto LABEL_48;
    }
    v14 = v13;
    if (v13 == *(_QWORD *)((char *)v8 + v9))
      break;
    if (v13 < v12)
    {
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    v15 = *a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v15;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v15 = sub_23AF98BAC(0, v15[2] + 1, 1, v15);
      *a3 = v15;
    }
    v18 = v15[2];
    v17 = v15[3];
    if (v18 >= v17 >> 1)
      v15 = sub_23AF98BAC((_QWORD *)(v17 > 1), v18 + 1, 1, v15);
    v15[2] = v18 + 1;
    v19 = &v15[2 * v18];
    v19[4] = v12;
    v19[5] = v14;
    a3 = (_QWORD **)v41;
    *v41 = v15;
    v12 = lseek(a1, v14, 4);
    v43 = v12;
    v10 = v14;
    if (v12 < 0)
      goto LABEL_13;
  }
  v10 = v13;
  if (v12 < 0)
    return;
LABEL_31:
  if (v12 != v10)
  {
    if (v10 < v12)
      goto LABEL_44;
    v8 = *a3;
    v29 = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v8;
    if ((v29 & 1) == 0)
    {
LABEL_45:
      v8 = sub_23AF98BAC(0, v8[2] + 1, 1, v8);
      *a3 = v8;
    }
    v31 = v8[2];
    v30 = v8[3];
    if (v31 >= v30 >> 1)
      v8 = sub_23AF98BAC((_QWORD *)(v30 > 1), v31 + 1, 1, v8);
    v8[2] = v31 + 1;
    v32 = &v8[2 * v31];
    v32[4] = v12;
    v32[5] = v10;
    *a3 = v8;
  }
}

uint64_t sub_23AC3CD90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE v57[4];
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE v79[248];
  _OWORD v80[15];
  uint64_t v81;

  v81 = a4;
  v72 = a3;
  v66 = a2;
  v68 = a5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v6);
  v67 = &v57[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_23B1C5570();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v57[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E46B0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v57[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for ItemMetadata();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v71 = &v57[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = MEMORY[0x24BDAC7A8](v17);
  v69 = &v57[-v20];
  v21 = MEMORY[0x24BDAC7A8](v19);
  v70 = &v57[-v22];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v57[-v23];
  v25 = *(_OWORD *)(a1 + 216);
  v80[10] = *(_OWORD *)(a1 + 200);
  v80[11] = v25;
  v26 = *(_OWORD *)(a1 + 248);
  v80[12] = *(_OWORD *)(a1 + 232);
  v80[13] = v26;
  v27 = *(_OWORD *)(a1 + 152);
  v80[6] = *(_OWORD *)(a1 + 136);
  v80[7] = v27;
  v28 = *(_OWORD *)(a1 + 184);
  v80[8] = *(_OWORD *)(a1 + 168);
  v80[9] = v28;
  v29 = *(_OWORD *)(a1 + 88);
  v80[2] = *(_OWORD *)(a1 + 72);
  v80[3] = v29;
  v30 = *(_OWORD *)(a1 + 120);
  v80[4] = *(_OWORD *)(a1 + 104);
  v80[5] = v30;
  v31 = *(_OWORD *)(a1 + 56);
  v80[0] = *(_OWORD *)(a1 + 40);
  v80[1] = v31;
  sub_23AA90D88((int *)v80, (uint64_t)v14);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    swift_bridgeObjectRelease();
    sub_23AA8A05C((uint64_t)v14, &qword_2542E46B0);
    LODWORD(v73) = 45;
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
    sub_23B1C5864();
    sub_23B1C5558();
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
    swift_willThrow();
    return swift_release();
  }
  sub_23AA94050((uint64_t)v14, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for ItemMetadata);
  if (*v24 - 1 < 2)
  {
    v33 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_22;
    v63 = 1;
    v64 = v33;
LABEL_8:
    v62 = *(_QWORD *)(a1 + 8);
    v34 = *(_QWORD *)(a1 + 24);
    LODWORD(v65) = *(_DWORD *)(a1 + 20);
    if (v34)
    {
      v73 = sub_23B1C650C();
      v74 = v35;
      v77 = 58;
      v78 = 0xE100000000000000;
      v75 = 47;
      v76 = 0xE100000000000000;
      sub_23AAA420C();
      v36 = sub_23B1C6CF8();
      v38 = v37;
      swift_bridgeObjectRelease();
    }
    else
    {
      v36 = 0;
      v38 = 0;
    }
    v39 = v70;
    sub_23AA907B0((uint64_t)v24, (uint64_t)v70, (uint64_t (*)(_QWORD))type metadata accessor for ItemMetadata);
    v40 = v24;
    v41 = v69;
    sub_23AA907B0((uint64_t)v39, (uint64_t)v69, (uint64_t (*)(_QWORD))type metadata accessor for ItemMetadata);
    v61 = sub_23AA9BD7C(v33, v65, (uint64_t)v41);
    LODWORD(v69) = v42;
    v65 = v43;
    v45 = v44;
    sub_23AA937BC((uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for ItemMetadata);
    if (v38)
    {
      v46 = *(unsigned int *)(a1 + 16);
      v73 = v36;
      v74 = v38;
      v59 = v38;
      v77 = 47;
      v78 = 0xE100000000000000;
      v75 = 58;
      v76 = 0xE100000000000000;
      sub_23AAA420C();
      v60 = sub_23B1C6CF8();
      v48 = v47;
      v70 = v40;
      sub_23AA907B0((uint64_t)v40, (uint64_t)v71, (uint64_t (*)(_QWORD))type metadata accessor for ItemMetadata);
      v49 = *(unsigned int *)(a1 + 208);
      if ((v49 & 0x80000000) == 0)
      {
        v50 = *(_DWORD *)(a1 + 256);
        v58 = v45 & 1;
        v51 = v48;
        if (v72)
        {
          v52 = (uint64_t)v67;
          sub_23B1C5918();
          v53 = sub_23B1C5A08();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v52, 0, 1, v53);
          swift_bridgeObjectRelease();
        }
        else
        {
          v54 = sub_23B1C5A08();
          v52 = (uint64_t)v67;
          (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v67, 1, 1, v54);
        }
        v55 = v61;
        sub_23AAF8E48((uint64_t)&v73);
        sub_23AA724E8((uint64_t)&v73, (uint64_t)v79, &qword_2542E5050);
        LOBYTE(v77) = (_DWORD)v46 == 0;
        sub_23AA8F900(v64, v63, v62, 1, v55, (int)v69, v65, v58, v68, v60, v51, (uint64_t)v71, v49, v50, v52, v46 | ((unint64_t)((_DWORD)v46 == 0) << 32), v81, (uint64_t)v79);
        swift_bridgeObjectRelease();
        v56 = v70;
        return sub_23AA937BC((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for ItemMetadata);
      }
      __break(1u);
    }
    __break(1u);
LABEL_22:
    sub_23AFF0050((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/tree/VFSItem.swift", 119, 2, 357);
  }
  if (*(_DWORD *)(a1 + 16))
  {
    v64 = *(unsigned int *)(a1 + 16);
    v63 = 0;
    v33 = *(_QWORD *)a1;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  LODWORD(v73) = 22;
  sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
  sub_23AA7E38C((unint64_t *)&qword_2542E42F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0], MEMORY[0x24BDCAFD8]);
  sub_23B1C5864();
  sub_23B1C5558();
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  swift_willThrow();
  swift_release();
  v56 = v24;
  return sub_23AA937BC((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for ItemMetadata);
}

uint64_t sub_23AC3D414(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23AC3D43C + 4 * byte_23B1D2B0C[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_23AC3D43C()
{
  return 0x4449746E65726170;
}

uint64_t sub_23AC3D454()
{
  return 1701667182;
}

uint64_t sub_23AC3D464()
{
  return 0x617461646174656DLL;
}

unint64_t sub_23AC3D47C()
{
  return 0xD000000000000015;
}

uint64_t sub_23AC3D4F8()
{
  return 0x4449656369766564;
}

uint64_t sub_23AC3D510()
{
  return 0x4449636F64;
}

uint64_t sub_23AC3D524()
{
  return 0x5255646568636163;
}

uint64_t sub_23AC3D540()
{
  unsigned __int8 *v0;

  return sub_23AC3D414(*v0);
}

uint64_t sub_23AC3D548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23AC41F78(a1, a2);
  *a3 = result;
  return result;
}

void sub_23AC3D56C(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_23AC3D578()
{
  sub_23AC3F604();
  return sub_23B1C7544();
}

uint64_t sub_23AC3D5A0()
{
  sub_23AC3F604();
  return sub_23B1C7550();
}

uint64_t sub_23AC3D5C8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2C80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23AC3F604();
  sub_23B1C7538();
  v8 = *((_BYTE *)v2 + 8);
  v26 = *v2;
  LOBYTE(v27) = v8;
  LOBYTE(v22) = 0;
  sub_23AC3F648();
  v9 = v29;
  sub_23B1C72A4();
  if (!v9)
  {
    v10 = *((_BYTE *)v2 + 24);
    v26 = v2[2];
    LOBYTE(v27) = v10;
    LOBYTE(v22) = 1;
    sub_23B1C72A4();
    v11 = v2[5];
    v26 = v2[4];
    v27 = v11;
    LOBYTE(v22) = 2;
    sub_23AB5EA4C();
    sub_23B1C72A4();
    v12 = (int *)type metadata accessor for VFSItem(0);
    v28 = 3;
    type metadata accessor for ItemMetadata();
    sub_23AA7E38C(&qword_2569E2C90, (uint64_t (*)(uint64_t))type metadata accessor for ItemMetadata, (uint64_t)&unk_23B1CF7F4);
    sub_23B1C72A4();
    sub_23AA724E8((uint64_t)v2 + v12[8], (uint64_t)&v26, &qword_2542E5050);
    sub_23AA724E8((uint64_t)&v26, (uint64_t)&v22, &qword_2542E5050);
    v21 = 4;
    sub_23AC3F68C();
    sub_23B1C7238();
    v13 = (uint64_t *)((char *)v2 + v12[9]);
    v14 = *v13;
    v15 = *((_DWORD *)v13 + 2);
    v16 = v13[2];
    LOBYTE(v13) = *((_BYTE *)v13 + 24);
    v22 = v14;
    v23 = v15;
    v24 = v16;
    v25 = (char)v13;
    v21 = 5;
    sub_23AC3F6D0();
    sub_23B1C72A4();
    LODWORD(v22) = *(_DWORD *)((char *)v2 + v12[10]);
    v21 = 6;
    type metadata accessor for fpfs_tempfile_pattern_t(0);
    sub_23AA7E38C(&qword_2569E2CA0, (uint64_t (*)(uint64_t))type metadata accessor for fpfs_tempfile_pattern_t, (uint64_t)&unk_23B1D9144);
    sub_23B1C72A4();
    v17 = *((_BYTE *)v2 + v12[11] + 4);
    LOBYTE(v22) = 7;
    v21 = v17;
    sub_23B1C7244();
    LOBYTE(v22) = 8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
    sub_23AC3F7E0(&qword_2569E2CA8, &qword_2569E2CB0, MEMORY[0x24BDCDAE0], MEMORY[0x24BEE4AA8]);
    sub_23B1C7238();
    LOBYTE(v22) = 9;
    sub_23B1C72B0();
    v18 = *((_BYTE *)v2 + v12[14] + 4);
    LOBYTE(v22) = 10;
    v21 = v18;
    sub_23B1C725C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_23AC3DA18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  char v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char v51;
  _BYTE v52[256];
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v39 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E6760);
  MEMORY[0x24BDAC7A8](v3);
  v40 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ItemMetadata();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2CB8);
  v8 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for VFSItem(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = (int *)v12;
  v15 = *(int *)(v12 + 48);
  v55 = v14;
  v16 = (uint64_t)&v14[v15];
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v45 = v16;
  v18(v16, 1, 1, v17);
  v19 = a1[3];
  v43 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  sub_23AC3F604();
  v41 = v10;
  v20 = v44;
  sub_23B1C7520();
  if (v20)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    return sub_23AA8A05C(v45, &qword_2542E6760);
  }
  else
  {
    v44 = v17;
    v52[0] = 0;
    sub_23AC3F714();
    sub_23B1C71C0();
    v21 = v54;
    v22 = v55;
    *v55 = v53;
    *((_BYTE *)v22 + 8) = v21;
    v52[0] = 1;
    sub_23B1C71C0();
    v23 = v54;
    v22[2] = v53;
    *((_BYTE *)v22 + 24) = v23;
    v52[0] = 2;
    sub_23AA7E3CC();
    sub_23B1C71C0();
    v24 = v22;
    v25 = v54;
    v22[4] = v53;
    v22[5] = v25;
    LOBYTE(v53) = 3;
    sub_23AA7E38C(&qword_2569E2CC0, (uint64_t (*)(uint64_t))type metadata accessor for ItemMetadata, (uint64_t)&unk_23B1CF7CC);
    sub_23B1C71C0();
    v26 = v46;
    sub_23AA94050((uint64_t)v7, (uint64_t)v24 + v46[7], (uint64_t (*)(_QWORD))type metadata accessor for ItemMetadata);
    v52[255] = 4;
    sub_23AC3F758();
    sub_23B1C7160();
    sub_23AA724E8((uint64_t)&v53, (uint64_t)v52, &qword_2542E5050);
    sub_23AA724E8((uint64_t)v52, (uint64_t)v24 + v26[8], &qword_2542E5050);
    v47 = 5;
    sub_23AC3F79C();
    sub_23B1C71C0();
    v27 = v49;
    v28 = v50;
    v29 = v51;
    v30 = (uint64_t)v24 + v26[9];
    *(_QWORD *)v30 = v48;
    *(_DWORD *)(v30 + 8) = v27;
    *(_QWORD *)(v30 + 16) = v28;
    *(_BYTE *)(v30 + 24) = v29;
    type metadata accessor for fpfs_tempfile_pattern_t(0);
    v47 = 6;
    sub_23AA7E38C(&qword_2569E2CD0, (uint64_t (*)(uint64_t))type metadata accessor for fpfs_tempfile_pattern_t, (uint64_t)&unk_23B1D9118);
    sub_23B1C71C0();
    *(_DWORD *)((char *)v24 + v26[10]) = v48;
    LOBYTE(v48) = 7;
    v31 = sub_23B1C716C();
    v32 = (uint64_t)v24 + v26[11];
    *(_DWORD *)v32 = v31;
    *(_BYTE *)(v32 + 4) = BYTE4(v31) & 1;
    LOBYTE(v48) = 8;
    sub_23AC3F7E0(&qword_2569E2CD8, qword_2569E2CE0, MEMORY[0x24BDCDB10], MEMORY[0x24BEE4AC0]);
    v33 = (uint64_t)v40;
    sub_23B1C7160();
    sub_23AC3F864(v33, v45);
    LOBYTE(v48) = 9;
    *(_DWORD *)((char *)v55 + v46[13]) = sub_23B1C71CC();
    LOBYTE(v48) = 10;
    v34 = sub_23B1C7184();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v41, v42);
    v35 = (uint64_t)v55;
    v36 = (char *)v55 + v46[14];
    *(_DWORD *)v36 = v34;
    v36[4] = BYTE4(v34) & 1;
    sub_23AA907B0(v35, v39, type metadata accessor for VFSItem);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    return sub_23AA937BC(v35, type metadata accessor for VFSItem);
  }
}

void sub_23AC3E100(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
}

void sub_23AC3E114(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t sub_23AC3E128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23AA907B0(v2 + *(int *)(a1 + 28), a2, (uint64_t (*)(_QWORD))type metadata accessor for ItemMetadata);
}

uint64_t sub_23AC3E150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (uint64_t *)(v2 + *(int *)(a1 + 36));
  v4 = *v3;
  v5 = *((_DWORD *)v3 + 2);
  v6 = v3[2];
  LOBYTE(v3) = *((_BYTE *)v3 + 24);
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_BYTE *)(v2 + 24);
  v10 = *(_QWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)a2 = v4;
  *(_DWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = (_BYTE)v3;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v7;
  *(_BYTE *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v10;
  *(_QWORD *)(a2 + 64) = v9;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23AC3E19C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23AA8EFC8(v2 + *(int *)(a1 + 32), a2, &qword_2542E5050);
}

uint64_t sub_23AC3E1CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23AC3DA18(a1, a2);
}

uint64_t sub_23AC3E1E0(_QWORD *a1)
{
  return sub_23AC3D5C8(a1);
}

uint64_t sub_23AC3E1F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _BYTE v53[9];
  _OWORD v54[15];
  uint64_t v55;

  v1 = v0;
  v22 = type metadata accessor for VFSItem(0);
  sub_23AA724E8(v0 + *(int *)(v22 + 32), (uint64_t)v53, &qword_2542E5050);
  sub_23AA724E8((uint64_t)v53, (uint64_t)v54, &qword_2542E5050);
  if (sub_23AAFCF2C((uint64_t)v54) != 1)
  {
    v49 = v54[12];
    v50 = v54[13];
    v51 = v54[14];
    v52 = v55;
    v45 = v54[8];
    v46 = v54[9];
    v47 = v54[10];
    v48 = v54[11];
    v41 = v54[4];
    v42 = v54[5];
    v43 = v54[6];
    v44 = v54[7];
    v37 = v54[0];
    v38 = v54[1];
    v39 = v54[2];
    v40 = v54[3];
    sub_23AA724E8((uint64_t)v53, (uint64_t)&v23, &qword_2542E5050);
    sub_23AC42B28((uint64_t)&v23);
    sub_23AF96E78();
    sub_23AAA5B2C((uint64_t)v53);
    v35 = 0x3A72747461736E20;
    v36 = 0xE800000000000000;
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  v2 = sub_23AC3C0B0();
  v4 = v2;
  if (!(v3 >> 62))
  {
    sub_23AAA12F0(v2, v3);
    v5 = 1852270888;
    goto LABEL_7;
  }
  if (v3 >> 62 == 1)
  {
    sub_23AAA12F0(v2, v3);
    v5 = 1886221352;
LABEL_7:
    v23 = v5 & 0xFFFF0000FFFFFFFFLL | 0x3A00000000;
    v24 = 0xE500000000000000;
    sub_23ADB47EC(v4);
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
  }
  v23 = 0;
  v24 = 0xE000000000000000;
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  v23 = 3828028;
  v24 = 0xE300000000000000;
  sub_23AA96F18(*(_QWORD *)v1, *(_BYTE *)(v1 + 8));
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_BYTE *)(v1 + 24);
  sub_23AA96F18(v6, v7);
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v8 = *(_QWORD *)(v1 + 32);
  v9 = *(_QWORD *)(v1 + 40);
  swift_bridgeObjectRetain();
  v10 = (void *)sub_23B1C63BC();
  v11 = objc_msgSend(v10, sel_fp_obfuscatedFilename);

  sub_23B1C63E0();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  sub_23AB59228();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v12 = v23;
  v13 = v24;
  v14 = v1 + *(int *)(v22 + 36);
  v15 = *(_QWORD *)v14;
  v16 = *(_DWORD *)(v14 + 8);
  v17 = *(_QWORD *)(v14 + 16);
  LOBYTE(v14) = *(_BYTE *)(v14 + 24);
  v23 = v15;
  LODWORD(v24) = v16;
  v25 = v17;
  v26 = v14;
  v27 = 0;
  v28 = v6;
  v29 = v7;
  v30 = v8;
  v31 = v9;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  swift_bridgeObjectRetain();
  v18 = sub_23AF96AB8();
  v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v35 = v18;
  v36 = v20;
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  v35 = v12;
  v36 = v13;
  swift_bridgeObjectRetain();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v35;
}

uint64_t sub_23AC3E670()
{
  uint64_t result;
  uint64_t v1;

  sub_23AAA420C();
  result = sub_23B1C6CF8();
  qword_2542EDE40 = result;
  *(_QWORD *)algn_2542EDE48 = v1;
  return result;
}

uint64_t sub_23AC3E6FC()
{
  uint64_t v0;

  if (qword_2542E5360 != -1)
    swift_once();
  v0 = qword_2542EDE40;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_23AC3E758()
{
  uint64_t result;
  uint64_t v1;

  sub_23AAA420C();
  result = sub_23B1C6CF8();
  qword_2542EDC68 = result;
  unk_2542EDC70 = v1;
  return result;
}

uint64_t sub_23AC3E7EC()
{
  uint64_t result;
  uint64_t v1;

  sub_23AAA420C();
  result = sub_23B1C6CF8();
  qword_256A07990 = result;
  *(_QWORD *)algn_256A07998 = v1;
  return result;
}

_QWORD *sub_23AC3E880(_QWORD *(*a1)(unsigned int *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *result;
  unsigned int v8;
  _QWORD v9[2];
  unsigned int v10;

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    result = (_QWORD *)sub_23B1C6EF0();
    if (!v4)
      return (_QWORD *)v10;
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    v9[0] = a3;
    v9[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    result = a1(&v8, v9);
    if (!v4)
      return (_QWORD *)v8;
  }
  else
  {
    if ((a3 & 0x1000000000000000) != 0)
      v6 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v6 = sub_23B1C6F80();
    result = a1((unsigned int *)v9, (_QWORD *)v6);
    if (!v4)
      return (_QWORD *)LODWORD(v9[0]);
  }
  return result;
}

uint64_t sub_23AC3E958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;
  _QWORD v8[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
    return sub_23B1C6EF0();
  if ((a2 & 0x2000000000000000) != 0)
  {
    v8[0] = a1;
    v8[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    *(_QWORD *)(a3 + 24) = v8;
    return a4(a3);
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
      v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v6 = sub_23B1C6F80();
    return sub_23AABC754(v6, a3, a4);
  }
}

uint64_t sub_23AC3EA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;
  _QWORD v8[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542E72C0);
    return sub_23B1C6EF0();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v8[0] = a1;
    v8[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    *(_QWORD *)(a3 + 24) = v8;
    return a4(a3);
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
      v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v6 = sub_23B1C6F80();
    return sub_23B1B32FC(v6, a3, a4);
  }
}

_QWORD *sub_23AC3EB54@<X0>(_QWORD *(*a1)(__int128 *__return_ptr, _QWORD *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v7;
  _QWORD *result;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  if ((a3 & 0x1000000000000000) != 0 || !(a3 & 0x2000000000000000 | a2 & 0x1000000000000000))
  {
    result = (_QWORD *)sub_23B1C6EF0();
    if (!v4)
    {
      v9 = v13;
      v10 = v14;
      v11 = v15;
      goto LABEL_9;
    }
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v12[0] = a2;
      v12[1] = a3 & 0xFFFFFFFFFFFFFFLL;
      v7 = v12;
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      v7 = (_QWORD *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v7 = (_QWORD *)sub_23B1C6F80();
    }
    result = a1(&v16, v7);
    if (!v4)
    {
      v9 = v16;
      v10 = v17;
      v11 = v18;
LABEL_9:
      *(_OWORD *)a4 = v9;
      *(_QWORD *)(a4 + 16) = v10;
      *(_OWORD *)(a4 + 24) = v11;
    }
  }
  return result;
}

uint64_t sub_23AC3EC44(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v9 = 1;
  v7 = *((_QWORD *)a1 + 3);
  v10 = *a1;
  v11 = *((_QWORD *)a1 + 2);
  v12 = v7;
  v13 = *((_QWORD *)a1 + 4);
  result = sub_23B0E1B48((uint64_t)&v10, a2, a3, a4, (uint64_t)&v9, a5, a6);
  if (!v6 && (v9 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_23AC3ECD4@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v26 = a6;
  v25 = a7;
  v32 = *MEMORY[0x24BDAC8D0];
  v12 = __swift_instantiateConcreteTypeFromMangledName(qword_2542E5250);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v24 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E72C0);
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
  v20 = *((_QWORD *)a1 + 3);
  v28 = *a1;
  v29 = *((_QWORD *)a1 + 2);
  v30 = v20;
  v31 = *((_QWORD *)a1 + 4);
  v21 = v27;
  sub_23B0E1EBC((uint64_t)&v28, a2, a3, a4, (uint64_t)v17, a5, v26);
  if (v21)
    return sub_23AA8A05C((uint64_t)v17, qword_2542E5250);
  v22 = v25;
  sub_23AA8EFC8((uint64_t)v17, (uint64_t)v15, qword_2542E5250);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18);
  if ((_DWORD)result != 1)
  {
    sub_23AA724E8((uint64_t)v15, v22, &qword_2542E72C0);
    return sub_23AA8A05C((uint64_t)v17, qword_2542E5250);
  }
  __break(1u);
  return result;
}

uint64_t sub_23AC3EE84@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v26 = a6;
  v25 = a7;
  v32 = *MEMORY[0x24BDAC8D0];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E72C0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v24 - v16;
  v18 = type metadata accessor for VFSItem(0);
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
  v20 = *((_QWORD *)a1 + 3);
  v28 = *a1;
  v29 = *((_QWORD *)a1 + 2);
  v30 = v20;
  v31 = *((_QWORD *)a1 + 4);
  v21 = v27;
  sub_23B0E3628((uint64_t)&v28, a2, a3, a4, (uint64_t)v17, a5, v26);
  if (v21)
    return sub_23AA8A05C((uint64_t)v17, &qword_2542E72C0);
  v22 = v25;
  sub_23AA8EFC8((uint64_t)v17, (uint64_t)v15, &qword_2542E72C0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18);
  if ((_DWORD)result != 1)
  {
    sub_23AA94050((uint64_t)v15, v22, type metadata accessor for VFSItem);
    return sub_23AA8A05C((uint64_t)v17, &qword_2542E72C0);
  }
  __break(1u);
  return result;
}

unint64_t sub_23AC3F030()
{
  unint64_t result;

  result = qword_2569E2C78;
  if (!qword_2569E2C78)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2F5C, &type metadata for VFSVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2C78);
  }
  return result;
}

unint64_t sub_23AC3F074(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23B1C74A8();
  sub_23B1C64A0();
  v4 = sub_23B1C74E4();
  return sub_23AC3F0D8(a1, a2, v4);
}

unint64_t sub_23AC3F0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_23B1C7388() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_23B1C7388() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((sub_23B1C7388() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

void sub_23AC3F21C(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, id *a7@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x24BDAC8D0];
  v14[0] = (id)1;
  v9 = *((_QWORD *)a1 + 3);
  v10 = *a1;
  v11 = *((_QWORD *)a1 + 2);
  v12 = v9;
  v13 = *((_QWORD *)a1 + 4);
  sub_23B0E2230((uint64_t)&v10, a2, a3, a4, (uint64_t)v14, a5, a6);
  if (v7)
  {
    sub_23AC42A28(v14[0]);
  }
  else if (v14[0] == (id)1)
  {
    __break(1u);
  }
  else
  {
    *a7 = v14[0];
  }
}

uint64_t sub_23AC3F2D4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4449656C6966 && a2 == 0xE600000000000000;
  if (v2 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E756F436E6567 && a2 == 0xE800000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23AC3F410(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2569E2E90);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_23AC3F030();
  sub_23B1C7520();
  if (!v1)
  {
    v12 = 0;
    v7 = sub_23B1C71FC();
    v11 = 1;
    sub_23B1C71F0();
    v10 = 2;
    sub_23B1C7178();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v7;
}

uint64_t sub_23AC3F594(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ItemMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for VFSTrackingContinuation(uint64_t a1)
{
  return sub_23AA94094(a1, qword_2542E7038);
}

void sub_23AC3F5EC(int a1)
{
  uint64_t v1;

  sub_23AC3C7AC(a1, *(_QWORD *)(v1 + 16), *(_QWORD ***)(v1 + 24));
}

unint64_t sub_23AC3F604()
{
  unint64_t result;

  result = qword_2569E2C88;
  if (!qword_2569E2C88)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2F0C, &type metadata for VFSItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2C88);
  }
  return result;
}

unint64_t sub_23AC3F648()
{
  unint64_t result;

  result = qword_2542E73F8;
  if (!qword_2542E73F8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DE00C, &type metadata for VFSItemID);
    atomic_store(result, (unint64_t *)&qword_2542E73F8);
  }
  return result;
}

unint64_t sub_23AC3F68C()
{
  unint64_t result;

  result = qword_2569E2C98;
  if (!qword_2569E2C98)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1E00AC, &type metadata for ItemNonSyncableAttributes);
    atomic_store(result, (unint64_t *)&qword_2569E2C98);
  }
  return result;
}

unint64_t sub_23AC3F6D0()
{
  unint64_t result;

  result = qword_2542E67F0;
  if (!qword_2542E67F0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2BD4, &type metadata for VFSVersion);
    atomic_store(result, (unint64_t *)&qword_2542E67F0);
  }
  return result;
}

unint64_t sub_23AC3F714()
{
  unint64_t result;

  result = qword_2542E7410;
  if (!qword_2542E7410)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DDFE4, &type metadata for VFSItemID);
    atomic_store(result, (unint64_t *)&qword_2542E7410);
  }
  return result;
}

unint64_t sub_23AC3F758()
{
  unint64_t result;

  result = qword_2569E2CC8;
  if (!qword_2569E2CC8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1E0084, &type metadata for ItemNonSyncableAttributes);
    atomic_store(result, (unint64_t *)&qword_2569E2CC8);
  }
  return result;
}

unint64_t sub_23AC3F79C()
{
  unint64_t result;

  result = qword_2542E6800;
  if (!qword_2542E6800)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2BAC, &type metadata for VFSVersion);
    atomic_store(result, (unint64_t *)&qword_2542E6800);
  }
  return result;
}

uint64_t sub_23AC3F7E0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542E6740);
    v10 = sub_23AA7E38C(a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], a3);
    result = MEMORY[0x23B8613CC](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23AC3F864(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E6760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_23AC3F8AC(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_23AC3F79C();
  a1[2] = sub_23AC3F6D0();
  result = sub_23AC3F8E0();
  a1[3] = result;
  return result;
}

unint64_t sub_23AC3F8E0()
{
  unint64_t result;

  result = qword_2542E67F8;
  if (!qword_2542E67F8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2B84, &type metadata for VFSVersion);
    atomic_store(result, (unint64_t *)&qword_2542E67F8);
  }
  return result;
}

unint64_t sub_23AC3F928()
{
  unint64_t result;

  result = qword_2542E6808;
  if (!qword_2542E6808)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2B40, &type metadata for VFSVersion);
    atomic_store(result, (unint64_t *)&qword_2542E6808);
  }
  return result;
}

unint64_t sub_23AC3F970()
{
  unint64_t result;

  result = qword_2542E7418;
  if (!qword_2542E7418)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1DDF28, &type metadata for VFSItemID);
    atomic_store(result, (unint64_t *)&qword_2542E7418);
  }
  return result;
}

uint64_t sub_23AC3F9B4()
{
  return sub_23AAB5A28(&qword_2542E6CC8, &qword_2542E6CD0, (uint64_t)&unk_23B1DC848);
}

uint64_t sub_23AC3F9E0(uint64_t a1)
{
  uint64_t result;

  result = sub_23AA7E38C(&qword_2542E5230, type metadata accessor for VFSItem, (uint64_t)&unk_23B1D2C78);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for VFSVersion()
{
  return &type metadata for VFSVersion;
}

uint64_t sub_23AC3FA2C()
{
  return type metadata accessor for VFSTrackingContinuation(0);
}

uint64_t sub_23AC3FA34()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B1C5BDC();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *sub_23AC3FAB0(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  unsigned int (*v23)(const void *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void *v88;
  uint64_t v89;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v25 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v25 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v5 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v5;
    v6 = a3[7];
    v7 = a1 + v6;
    v8 = (uint64_t)a2 + v6;
    *(_BYTE *)v7 = *((_BYTE *)a2 + v6);
    *(_BYTE *)(v7 + 8) = *((_BYTE *)a2 + v6 + 8);
    *(_DWORD *)(v7 + 4) = *(_DWORD *)((char *)a2 + v6 + 4);
    *(_WORD *)(v7 + 10) = *(_WORD *)((char *)a2 + v6 + 10);
    v9 = (int *)type metadata accessor for ItemMetadata();
    v10 = v9[7];
    v11 = v7 + v10;
    v12 = v8 + v10;
    v13 = sub_23B1C5BDC();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    swift_bridgeObjectRetain();
    v15(v11, v12, v13);
    v15(v7 + v9[8], v8 + v9[8], v13);
    *(_BYTE *)(v7 + v9[9]) = *(_BYTE *)(v8 + v9[9]);
    *(_BYTE *)(v7 + v9[10]) = *(_BYTE *)(v8 + v9[10]);
    *(_BYTE *)(v7 + v9[11]) = *(_BYTE *)(v8 + v9[11]);
    *(_BYTE *)(v7 + v9[12]) = *(_BYTE *)(v8 + v9[12]);
    *(_BYTE *)(v7 + v9[13]) = *(_BYTE *)(v8 + v9[13]);
    v16 = v9[14];
    v17 = (_QWORD *)(v7 + v16);
    v18 = (_QWORD *)(v8 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    *(_BYTE *)(v7 + v9[15]) = *(_BYTE *)(v8 + v9[15]);
    *(_BYTE *)(v7 + v9[16]) = *(_BYTE *)(v8 + v9[16]);
    *(_BYTE *)(v7 + v9[17]) = *(_BYTE *)(v8 + v9[17]);
    *(_BYTE *)(v7 + v9[18]) = *(_BYTE *)(v8 + v9[18]);
    *(_QWORD *)(v7 + v9[19]) = *(_QWORD *)(v8 + v9[19]);
    *(_BYTE *)(v7 + v9[20]) = *(_BYTE *)(v8 + v9[20]);
    *(_BYTE *)(v7 + v9[21]) = *(_BYTE *)(v8 + v9[21]);
    *(_BYTE *)(v7 + v9[22]) = *(_BYTE *)(v8 + v9[22]);
    *(_BYTE *)(v7 + v9[23]) = *(_BYTE *)(v8 + v9[23]);
    *(_BYTE *)(v7 + v9[24]) = *(_BYTE *)(v8 + v9[24]);
    *(_QWORD *)(v7 + v9[25]) = *(_QWORD *)(v8 + v9[25]);
    *(_QWORD *)(v7 + v9[26]) = *(_QWORD *)(v8 + v9[26]);
    *(_BYTE *)(v7 + v9[27]) = *(_BYTE *)(v8 + v9[27]);
    *(_BYTE *)(v7 + v9[28]) = *(_BYTE *)(v8 + v9[28]);
    v20 = v9[29];
    v21 = (void *)(v7 + v20);
    v22 = (const void *)(v8 + v20);
    v23 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    if (v23(v22, 1, v13))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v15((uint64_t)v21, (uint64_t)v22, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v21, 0, 1, v13);
    }
    *(_QWORD *)(v7 + v9[30]) = *(_QWORD *)(v8 + v9[30]);
    v26 = v9[31];
    v27 = v7 + v26;
    v28 = v8 + v26;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
    *(_QWORD *)(v7 + v9[32]) = *(_QWORD *)(v8 + v9[32]);
    v29 = v9[33];
    v30 = v7 + v29;
    v31 = (uint64_t *)(v8 + v29);
    v32 = *(_QWORD *)(v8 + v29 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v32 >> 60 == 15)
    {
      *(_OWORD *)v30 = *(_OWORD *)v31;
    }
    else
    {
      v33 = *v31;
      sub_23AAAE668(*v31, v32);
      *(_QWORD *)v30 = v33;
      *(_QWORD *)(v30 + 8) = v32;
    }
    v34 = v9[34];
    v35 = v7 + v34;
    v36 = v8 + v34;
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *(_BYTE *)(v35 + 8) = *(_BYTE *)(v36 + 8);
    *(_BYTE *)(v7 + v9[35]) = *(_BYTE *)(v8 + v9[35]);
    v37 = v9[36];
    v38 = v7 + v37;
    v39 = v8 + v37;
    *(_BYTE *)(v38 + 4) = *(_BYTE *)(v39 + 4);
    *(_DWORD *)v38 = *(_DWORD *)v39;
    v40 = v9[37];
    v41 = (_QWORD *)(v7 + v40);
    v42 = (_QWORD *)(v8 + v40);
    v43 = v42[1];
    *v41 = *v42;
    v41[1] = v43;
    v44 = a3;
    v45 = a3[8];
    v46 = (char *)v3 + v45;
    v47 = (uint64_t)a2 + v45;
    v48 = *(void **)((char *)a2 + v45 + 16);
    swift_bridgeObjectRetain();
    if (v48 == (void *)1)
    {
      v49 = *(_OWORD *)(v47 + 208);
      *((_OWORD *)v46 + 12) = *(_OWORD *)(v47 + 192);
      *((_OWORD *)v46 + 13) = v49;
      *((_OWORD *)v46 + 14) = *(_OWORD *)(v47 + 224);
      *((_QWORD *)v46 + 30) = *(_QWORD *)(v47 + 240);
      v50 = *(_OWORD *)(v47 + 144);
      *((_OWORD *)v46 + 8) = *(_OWORD *)(v47 + 128);
      *((_OWORD *)v46 + 9) = v50;
      v51 = *(_OWORD *)(v47 + 176);
      *((_OWORD *)v46 + 10) = *(_OWORD *)(v47 + 160);
      *((_OWORD *)v46 + 11) = v51;
      v52 = *(_OWORD *)(v47 + 80);
      *((_OWORD *)v46 + 4) = *(_OWORD *)(v47 + 64);
      *((_OWORD *)v46 + 5) = v52;
      v53 = *(_OWORD *)(v47 + 112);
      *((_OWORD *)v46 + 6) = *(_OWORD *)(v47 + 96);
      *((_OWORD *)v46 + 7) = v53;
      v54 = *(_OWORD *)(v47 + 16);
      *(_OWORD *)v46 = *(_OWORD *)v47;
      *((_OWORD *)v46 + 1) = v54;
      v55 = *(_OWORD *)(v47 + 48);
      *((_OWORD *)v46 + 2) = *(_OWORD *)(v47 + 32);
      *((_OWORD *)v46 + 3) = v55;
    }
    else
    {
      *(_QWORD *)v46 = *(_QWORD *)v47;
      *((_WORD *)v46 + 4) = *(_WORD *)(v47 + 8);
      v56 = v48;
      *((_QWORD *)v46 + 2) = v48;
      v57 = *(void **)(v47 + 24);
      v58 = v57;
      *((_QWORD *)v46 + 3) = v57;
      v46[32] = *(_BYTE *)(v47 + 32);
      *(_WORD *)(v46 + 33) = *(_WORD *)(v47 + 33);
      v59 = *(_QWORD *)(v47 + 48);
      *((_QWORD *)v46 + 5) = *(_QWORD *)(v47 + 40);
      *((_QWORD *)v46 + 6) = v59;
      v60 = *(_QWORD *)(v47 + 64);
      *((_QWORD *)v46 + 7) = *(_QWORD *)(v47 + 56);
      *((_QWORD *)v46 + 8) = v60;
      v46[72] = *(_BYTE *)(v47 + 72);
      v61 = *(_QWORD *)(v47 + 88);
      *((_QWORD *)v46 + 10) = *(_QWORD *)(v47 + 80);
      *((_QWORD *)v46 + 11) = v61;
      v88 = *(void **)(v47 + 96);
      *((_QWORD *)v46 + 12) = v88;
      *((_WORD *)v46 + 52) = *(_WORD *)(v47 + 104);
      v62 = *(_QWORD *)(v47 + 120);
      *((_QWORD *)v46 + 14) = *(_QWORD *)(v47 + 112);
      *((_QWORD *)v46 + 15) = v62;
      v63 = *(_QWORD *)(v47 + 136);
      *((_QWORD *)v46 + 16) = *(_QWORD *)(v47 + 128);
      *((_QWORD *)v46 + 17) = v63;
      v64 = *(_QWORD *)(v47 + 152);
      *((_QWORD *)v46 + 18) = *(_QWORD *)(v47 + 144);
      *((_QWORD *)v46 + 19) = v64;
      v89 = *(_QWORD *)(v47 + 192);
      v65 = *(_QWORD *)(v47 + 168);
      *((_QWORD *)v46 + 20) = *(_QWORD *)(v47 + 160);
      *((_QWORD *)v46 + 21) = v65;
      v46[176] = *(_BYTE *)(v47 + 176);
      *((_QWORD *)v46 + 23) = *(_QWORD *)(v47 + 184);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v66 = v88;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v89)
      {
        v67 = *(_QWORD *)(v47 + 200);
        *((_QWORD *)v46 + 24) = v89;
        *((_QWORD *)v46 + 25) = v67;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        *((_OWORD *)v46 + 12) = *(_OWORD *)(v47 + 192);
      }
      v44 = a3;
      *((_OWORD *)v46 + 13) = *(_OWORD *)(v47 + 208);
      v68 = *(_QWORD *)(v47 + 232);
      *((_QWORD *)v46 + 28) = *(_QWORD *)(v47 + 224);
      *((_QWORD *)v46 + 29) = v68;
      *((_QWORD *)v46 + 30) = *(_QWORD *)(v47 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v69 = v44[9];
    v70 = v44[10];
    v71 = (_OWORD *)((char *)v3 + v69);
    v72 = (_OWORD *)((char *)a2 + v69);
    *v71 = *v72;
    *(_OWORD *)((char *)v71 + 9) = *(_OWORD *)((char *)v72 + 9);
    *(_DWORD *)((char *)v3 + v70) = *(_DWORD *)((char *)a2 + v70);
    v73 = v44[11];
    v74 = v44[12];
    v75 = (char *)v3 + v73;
    v76 = (uint64_t)a2 + v73;
    *(_DWORD *)v75 = *(_DWORD *)v76;
    v75[4] = *(_BYTE *)(v76 + 4);
    v77 = (char *)v3 + v74;
    v78 = (char *)a2 + v74;
    v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
    v80 = *(_QWORD *)(v79 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
    {
      v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E6760);
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    }
    else
    {
      v82 = sub_23B1C5A08();
      v83 = *(_QWORD *)(v82 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v78, 1, v82))
      {
        memcpy(v77, v78, *(_QWORD *)(v80 + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v77, v78, v82);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v77, 0, 1, v82);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
    }
    v84 = v44[14];
    *(_DWORD *)((char *)v3 + v44[13]) = *(_DWORD *)((char *)a2 + v44[13]);
    v85 = (char *)v3 + v84;
    v86 = (uint64_t)a2 + v84;
    *(_DWORD *)v85 = *(_DWORD *)v86;
    v85[4] = *(_BYTE *)(v86 + 4);
  }
  return v3;
}

uint64_t sub_23AC40120(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 *v55;
  void *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  void *v82;
  id v83;
  void *v84;
  id v85;
  void *v86;
  id v87;
  void *v88;
  id v89;
  void *v90;
  void *v91;
  id v92;
  void *v93;
  void *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(void *, uint64_t, uint64_t);
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  size_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(void *, uint64_t, uint64_t);
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  int v123;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  int *v128;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v127 = a1;
  v128 = a3;
  v8 = a3[7];
  v9 = a1 + v8;
  v126 = a2;
  v10 = (uint64_t)a2 + v8;
  *(_BYTE *)v9 = *((_BYTE *)a2 + v8);
  LODWORD(v8) = *(_DWORD *)((char *)a2 + v8 + 4);
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  *(_DWORD *)(v9 + 4) = v8;
  *(_WORD *)(v9 + 10) = *(_WORD *)(v10 + 10);
  v11 = (int *)type metadata accessor for ItemMetadata();
  v12 = v11[7];
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = sub_23B1C5BDC();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  v17(v9 + v11[8], v10 + v11[8], v15);
  *(_BYTE *)(v9 + v11[9]) = *(_BYTE *)(v10 + v11[9]);
  *(_BYTE *)(v9 + v11[10]) = *(_BYTE *)(v10 + v11[10]);
  *(_BYTE *)(v9 + v11[11]) = *(_BYTE *)(v10 + v11[11]);
  *(_BYTE *)(v9 + v11[12]) = *(_BYTE *)(v10 + v11[12]);
  *(_BYTE *)(v9 + v11[13]) = *(_BYTE *)(v10 + v11[13]);
  v18 = v11[14];
  v19 = (_QWORD *)(v9 + v18);
  v20 = (_QWORD *)(v10 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v9 + v11[15]) = *(_BYTE *)(v10 + v11[15]);
  *(_BYTE *)(v9 + v11[16]) = *(_BYTE *)(v10 + v11[16]);
  *(_BYTE *)(v9 + v11[17]) = *(_BYTE *)(v10 + v11[17]);
  *(_BYTE *)(v9 + v11[18]) = *(_BYTE *)(v10 + v11[18]);
  *(_QWORD *)(v9 + v11[19]) = *(_QWORD *)(v10 + v11[19]);
  *(_BYTE *)(v9 + v11[20]) = *(_BYTE *)(v10 + v11[20]);
  *(_BYTE *)(v9 + v11[21]) = *(_BYTE *)(v10 + v11[21]);
  *(_BYTE *)(v9 + v11[22]) = *(_BYTE *)(v10 + v11[22]);
  *(_BYTE *)(v9 + v11[23]) = *(_BYTE *)(v10 + v11[23]);
  *(_BYTE *)(v9 + v11[24]) = *(_BYTE *)(v10 + v11[24]);
  *(_QWORD *)(v9 + v11[25]) = *(_QWORD *)(v10 + v11[25]);
  *(_QWORD *)(v9 + v11[26]) = *(_QWORD *)(v10 + v11[26]);
  *(_BYTE *)(v9 + v11[27]) = *(_BYTE *)(v10 + v11[27]);
  *(_BYTE *)(v9 + v11[28]) = *(_BYTE *)(v10 + v11[28]);
  v21 = v11[29];
  v22 = (void *)(v9 + v21);
  v23 = (const void *)(v10 + v21);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v25 = v24(v9 + v21, 1, v15);
  v26 = v24((uint64_t)v23, 1, v15);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v22, v15);
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v17((uint64_t)v22, (uint64_t)v23, v15);
LABEL_7:
  v29 = v126;
  v28 = v127;
  *(_QWORD *)(v9 + v11[30]) = *(_QWORD *)(v10 + v11[30]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = v11[31];
  v31 = v9 + v30;
  v32 = (uint64_t *)(v10 + v30);
  v33 = *v32;
  *(_BYTE *)(v31 + 8) = *((_BYTE *)v32 + 8);
  *(_QWORD *)v31 = v33;
  *(_QWORD *)(v9 + v11[32]) = *(_QWORD *)(v10 + v11[32]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = v11[33];
  v35 = (uint64_t *)(v9 + v34);
  v36 = (uint64_t *)(v10 + v34);
  v37 = *(_QWORD *)(v10 + v34 + 8);
  if (*(_QWORD *)(v9 + v34 + 8) >> 60 == 15)
  {
    if (v37 >> 60 != 15)
    {
      v38 = *v36;
      sub_23AAAE668(*v36, v37);
      *v35 = v38;
      v35[1] = v37;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v37 >> 60 == 15)
  {
    sub_23AB2D750((uint64_t)v35);
LABEL_12:
    *(_OWORD *)v35 = *(_OWORD *)v36;
    goto LABEL_14;
  }
  v39 = *v36;
  sub_23AAAE668(*v36, v37);
  v40 = *v35;
  v41 = v35[1];
  *v35 = v39;
  v35[1] = v37;
  sub_23AAAE53C(v40, v41);
LABEL_14:
  v42 = v11[34];
  v43 = v9 + v42;
  v44 = (uint64_t *)(v10 + v42);
  v45 = *v44;
  *(_BYTE *)(v43 + 8) = *((_BYTE *)v44 + 8);
  *(_QWORD *)v43 = v45;
  *(_BYTE *)(v9 + v11[35]) = *(_BYTE *)(v10 + v11[35]);
  v46 = v11[36];
  v47 = v9 + v46;
  v48 = v10 + v46;
  LODWORD(v45) = *(_DWORD *)v48;
  *(_BYTE *)(v47 + 4) = *(_BYTE *)(v48 + 4);
  *(_DWORD *)v47 = v45;
  v49 = v11[37];
  v50 = (_QWORD *)(v9 + v49);
  v51 = (_QWORD *)(v10 + v49);
  *v50 = *v51;
  v50[1] = v51[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52 = v128;
  v53 = v128[8];
  v54 = v127 + v53;
  v55 = (__int128 *)((char *)v126 + v53);
  v56 = *(void **)(v127 + v53 + 16);
  v57 = *(uint64_t *)((char *)v126 + v53 + 16);
  if (v56 != (void *)1)
  {
    if (v57 == 1)
    {
      sub_23AC40C50(v54);
      v70 = v55[3];
      v72 = *v55;
      v71 = v55[1];
      *(_OWORD *)(v54 + 32) = v55[2];
      *(_OWORD *)(v54 + 48) = v70;
      *(_OWORD *)v54 = v72;
      *(_OWORD *)(v54 + 16) = v71;
      v73 = v55[7];
      v75 = v55[4];
      v74 = v55[5];
      *(_OWORD *)(v54 + 96) = v55[6];
      *(_OWORD *)(v54 + 112) = v73;
      *(_OWORD *)(v54 + 64) = v75;
      *(_OWORD *)(v54 + 80) = v74;
      v76 = v55[11];
      v78 = v55[8];
      v77 = v55[9];
      *(_OWORD *)(v54 + 160) = v55[10];
      *(_OWORD *)(v54 + 176) = v76;
      *(_OWORD *)(v54 + 128) = v78;
      *(_OWORD *)(v54 + 144) = v77;
      v80 = v55[13];
      v79 = v55[14];
      v81 = v55[12];
      *(_QWORD *)(v54 + 240) = *((_QWORD *)v55 + 30);
      *(_OWORD *)(v54 + 208) = v80;
      *(_OWORD *)(v54 + 224) = v79;
      *(_OWORD *)(v54 + 192) = v81;
      goto LABEL_32;
    }
    *(_QWORD *)v54 = *(_QWORD *)v55;
    *(_BYTE *)(v54 + 8) = *((_BYTE *)v55 + 8);
    *(_BYTE *)(v54 + 9) = *((_BYTE *)v55 + 9);
    v88 = (void *)*((_QWORD *)v55 + 2);
    v89 = v88;
    *(_QWORD *)(v54 + 16) = v88;

    v90 = *(void **)(v54 + 24);
    v91 = (void *)*((_QWORD *)v55 + 3);
    v92 = v91;
    *(_QWORD *)(v54 + 24) = v91;

    *(_BYTE *)(v54 + 32) = *((_BYTE *)v55 + 32);
    *(_BYTE *)(v54 + 33) = *((_BYTE *)v55 + 33);
    *(_BYTE *)(v54 + 34) = *((_BYTE *)v55 + 34);
    *(_QWORD *)(v54 + 40) = *((_QWORD *)v55 + 5);
    *(_QWORD *)(v54 + 48) = *((_QWORD *)v55 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v54 + 56) = *((_QWORD *)v55 + 7);
    *(_QWORD *)(v54 + 64) = *((_QWORD *)v55 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v54 + 72) = *((_BYTE *)v55 + 72);
    *(_QWORD *)(v54 + 80) = *((_QWORD *)v55 + 10);
    *(_QWORD *)(v54 + 88) = *((_QWORD *)v55 + 11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v93 = *(void **)(v54 + 96);
    v94 = (void *)*((_QWORD *)v55 + 12);
    *(_QWORD *)(v54 + 96) = v94;
    v95 = v94;

    *(_BYTE *)(v54 + 104) = *((_BYTE *)v55 + 104);
    *(_BYTE *)(v54 + 105) = *((_BYTE *)v55 + 105);
    *(_QWORD *)(v54 + 112) = *((_QWORD *)v55 + 14);
    *(_QWORD *)(v54 + 120) = *((_QWORD *)v55 + 15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v54 + 128) = *((_QWORD *)v55 + 16);
    *(_QWORD *)(v54 + 136) = *((_QWORD *)v55 + 17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v54 + 144) = *((_QWORD *)v55 + 18);
    *(_QWORD *)(v54 + 152) = *((_QWORD *)v55 + 19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v54 + 160) = *((_QWORD *)v55 + 20);
    *(_QWORD *)(v54 + 168) = *((_QWORD *)v55 + 21);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v54 + 176) = *((_BYTE *)v55 + 176);
    *(_QWORD *)(v54 + 184) = *((_QWORD *)v55 + 23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v96 = *((_QWORD *)v55 + 24);
    if (*(_QWORD *)(v54 + 192))
    {
      if (v96)
      {
        *(_QWORD *)(v54 + 192) = v96;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v54 + 200) = *((_QWORD *)v55 + 25);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_31:
        *(_QWORD *)(v54 + 208) = *((_QWORD *)v55 + 26);
        *(_QWORD *)(v54 + 216) = *((_QWORD *)v55 + 27);
        *(_QWORD *)(v54 + 224) = *((_QWORD *)v55 + 28);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v54 + 232) = *((_QWORD *)v55 + 29);
        *(_QWORD *)(v54 + 240) = *((_QWORD *)v55 + 30);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
      sub_23AC40C1C(v54 + 192);
    }
    else if (v96)
    {
      *(_QWORD *)(v54 + 192) = v96;
      *(_QWORD *)(v54 + 200) = *((_QWORD *)v55 + 25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_31;
    }
    *(_OWORD *)(v54 + 192) = v55[12];
    goto LABEL_31;
  }
  if (v57 == 1)
  {
    v58 = *v55;
    v59 = v55[1];
    v60 = v55[3];
    *(_OWORD *)(v54 + 32) = v55[2];
    *(_OWORD *)(v54 + 48) = v60;
    *(_OWORD *)v54 = v58;
    *(_OWORD *)(v54 + 16) = v59;
    v61 = v55[4];
    v62 = v55[5];
    v63 = v55[7];
    *(_OWORD *)(v54 + 96) = v55[6];
    *(_OWORD *)(v54 + 112) = v63;
    *(_OWORD *)(v54 + 64) = v61;
    *(_OWORD *)(v54 + 80) = v62;
    v64 = v55[8];
    v65 = v55[9];
    v66 = v55[11];
    *(_OWORD *)(v54 + 160) = v55[10];
    *(_OWORD *)(v54 + 176) = v66;
    *(_OWORD *)(v54 + 128) = v64;
    *(_OWORD *)(v54 + 144) = v65;
    v67 = v55[12];
    v68 = v55[13];
    v69 = v55[14];
    *(_QWORD *)(v54 + 240) = *((_QWORD *)v55 + 30);
    *(_OWORD *)(v54 + 208) = v68;
    *(_OWORD *)(v54 + 224) = v69;
    *(_OWORD *)(v54 + 192) = v67;
  }
  else
  {
    *(_QWORD *)v54 = *(_QWORD *)v55;
    *(_BYTE *)(v54 + 8) = *((_BYTE *)v55 + 8);
    *(_BYTE *)(v54 + 9) = *((_BYTE *)v55 + 9);
    v82 = (void *)*((_QWORD *)v55 + 2);
    v83 = v82;
    *(_QWORD *)(v54 + 16) = v82;
    v84 = (void *)*((_QWORD *)v55 + 3);
    v85 = v84;
    *(_QWORD *)(v54 + 24) = v84;
    *(_BYTE *)(v54 + 32) = *((_BYTE *)v55 + 32);
    *(_BYTE *)(v54 + 33) = *((_BYTE *)v55 + 33);
    *(_BYTE *)(v54 + 34) = *((_BYTE *)v55 + 34);
    *(_QWORD *)(v54 + 40) = *((_QWORD *)v55 + 5);
    *(_QWORD *)(v54 + 48) = *((_QWORD *)v55 + 6);
    *(_QWORD *)(v54 + 56) = *((_QWORD *)v55 + 7);
    *(_QWORD *)(v54 + 64) = *((_QWORD *)v55 + 8);
    *(_BYTE *)(v54 + 72) = *((_BYTE *)v55 + 72);
    *(_QWORD *)(v54 + 80) = *((_QWORD *)v55 + 10);
    *(_QWORD *)(v54 + 88) = *((_QWORD *)v55 + 11);
    v86 = (void *)*((_QWORD *)v55 + 12);
    *(_QWORD *)(v54 + 96) = v86;
    *(_BYTE *)(v54 + 104) = *((_BYTE *)v55 + 104);
    *(_BYTE *)(v54 + 105) = *((_BYTE *)v55 + 105);
    *(_QWORD *)(v54 + 112) = *((_QWORD *)v55 + 14);
    *(_QWORD *)(v54 + 120) = *((_QWORD *)v55 + 15);
    *(_QWORD *)(v54 + 128) = *((_QWORD *)v55 + 16);
    *(_QWORD *)(v54 + 136) = *((_QWORD *)v55 + 17);
    *(_QWORD *)(v54 + 144) = *((_QWORD *)v55 + 18);
    *(_QWORD *)(v54 + 152) = *((_QWORD *)v55 + 19);
    *(_QWORD *)(v54 + 160) = *((_QWORD *)v55 + 20);
    *(_QWORD *)(v54 + 168) = *((_QWORD *)v55 + 21);
    *(_BYTE *)(v54 + 176) = *((_BYTE *)v55 + 176);
    *(_QWORD *)(v54 + 184) = *((_QWORD *)v55 + 23);
    v125 = *((_QWORD *)v55 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v87 = v86;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v125)
    {
      *(_QWORD *)(v54 + 192) = v125;
      *(_QWORD *)(v54 + 200) = *((_QWORD *)v55 + 25);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(v54 + 192) = v55[12];
    }
    v29 = v126;
    v28 = v127;
    v52 = v128;
    *(_QWORD *)(v54 + 208) = *((_QWORD *)v55 + 26);
    *(_QWORD *)(v54 + 216) = *((_QWORD *)v55 + 27);
    *(_QWORD *)(v54 + 224) = *((_QWORD *)v55 + 28);
    *(_QWORD *)(v54 + 232) = *((_QWORD *)v55 + 29);
    *(_QWORD *)(v54 + 240) = *((_QWORD *)v55 + 30);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
LABEL_32:
  v97 = v52[9];
  v98 = v28 + v97;
  v99 = (uint64_t)v29 + v97;
  *(_QWORD *)v98 = *(_QWORD *)v99;
  *(_DWORD *)(v98 + 8) = *(_DWORD *)(v99 + 8);
  v100 = *(_QWORD *)(v99 + 16);
  *(_BYTE *)(v98 + 24) = *(_BYTE *)(v99 + 24);
  *(_QWORD *)(v98 + 16) = v100;
  *(_DWORD *)(v28 + v52[10]) = *(_DWORD *)((char *)v29 + v52[10]);
  v101 = v52[11];
  v102 = v28 + v101;
  v103 = (uint64_t)v29 + v101;
  LODWORD(v100) = *(_DWORD *)v103;
  *(_BYTE *)(v102 + 4) = *(_BYTE *)(v103 + 4);
  *(_DWORD *)v102 = v100;
  v104 = v52[12];
  v105 = (void *)(v28 + v104);
  v106 = (char *)v29 + v104;
  v107 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v108 = *(_QWORD *)(v107 - 8);
  v109 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v108 + 48);
  v110 = v109(v105, 1, v107);
  v111 = v109(v106, 1, v107);
  if (!v110)
  {
    if (!v111)
    {
      v115 = sub_23B1C5A08();
      v116 = *(_QWORD *)(v115 - 8);
      v117 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v116 + 48);
      v118 = v117(v105, 1, v115);
      v119 = v117(v106, 1, v115);
      if (v118)
      {
        if (!v119)
        {
          (*(void (**)(void *, char *, uint64_t))(v116 + 16))(v105, v106, v115);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v105, 0, 1, v115);
          goto LABEL_45;
        }
      }
      else
      {
        if (!v119)
        {
          (*(void (**)(void *, char *, uint64_t))(v116 + 24))(v105, v106, v115);
          goto LABEL_45;
        }
        (*(void (**)(void *, uint64_t))(v116 + 8))(v105, v115);
      }
      v114 = *(_QWORD *)(v108 + 64);
      goto LABEL_39;
    }
    sub_23AA8A05C((uint64_t)v105, (uint64_t *)&unk_2542E6740);
LABEL_38:
    v114 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2542E6760) - 8) + 64);
LABEL_39:
    memcpy(v105, v106, v114);
    goto LABEL_45;
  }
  if (v111)
    goto LABEL_38;
  v112 = sub_23B1C5A08();
  v113 = *(_QWORD *)(v112 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v106, 1, v112))
  {
    memcpy(v105, v106, *(_QWORD *)(v108 + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v113 + 16))(v105, v106, v112);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v105, 0, 1, v112);
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
LABEL_45:
  *(_DWORD *)(v28 + v52[13]) = *(_DWORD *)((char *)v29 + v52[13]);
  v120 = v52[14];
  v121 = v28 + v120;
  v122 = (int *)((char *)v29 + v120);
  v123 = *v122;
  *(_BYTE *)(v121 + 4) = *((_BYTE *)v122 + 4);
  *(_DWORD *)v121 = v123;
  return v28;
}

uint64_t sub_23AC40C1C(uint64_t a1)
{
  destroy for JobLockRuleAssociatedJobs();
  return a1;
}

uint64_t sub_23AC40C50(uint64_t a1)
{
  destroy for ItemNonSyncableAttributes(a1);
  return a1;
}

uint64_t sub_23AC40C84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void *, const void *, uint64_t);
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD *v40;
  _OWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = a3[7];
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_BYTE *)v6 = *(_BYTE *)(a2 + v5);
  *(_DWORD *)(v6 + 4) = *(_DWORD *)(a2 + v5 + 4);
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(a2 + v5 + 8);
  *(_WORD *)(v6 + 10) = *(_WORD *)(a2 + v5 + 10);
  v8 = (int *)type metadata accessor for ItemMetadata();
  v9 = v8[7];
  v10 = (void *)(v6 + v9);
  v11 = (const void *)(v7 + v9);
  v12 = sub_23B1C5BDC();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(void *, const void *, uint64_t))(v13 + 32);
  v14(v10, v11, v12);
  v14((void *)(v6 + v8[8]), (const void *)(v7 + v8[8]), v12);
  *(_BYTE *)(v6 + v8[9]) = *(_BYTE *)(v7 + v8[9]);
  *(_BYTE *)(v6 + v8[10]) = *(_BYTE *)(v7 + v8[10]);
  *(_BYTE *)(v6 + v8[11]) = *(_BYTE *)(v7 + v8[11]);
  *(_BYTE *)(v6 + v8[12]) = *(_BYTE *)(v7 + v8[12]);
  *(_BYTE *)(v6 + v8[13]) = *(_BYTE *)(v7 + v8[13]);
  *(_OWORD *)(v6 + v8[14]) = *(_OWORD *)(v7 + v8[14]);
  *(_BYTE *)(v6 + v8[15]) = *(_BYTE *)(v7 + v8[15]);
  *(_BYTE *)(v6 + v8[16]) = *(_BYTE *)(v7 + v8[16]);
  *(_BYTE *)(v6 + v8[17]) = *(_BYTE *)(v7 + v8[17]);
  *(_BYTE *)(v6 + v8[18]) = *(_BYTE *)(v7 + v8[18]);
  *(_QWORD *)(v6 + v8[19]) = *(_QWORD *)(v7 + v8[19]);
  *(_BYTE *)(v6 + v8[20]) = *(_BYTE *)(v7 + v8[20]);
  *(_BYTE *)(v6 + v8[21]) = *(_BYTE *)(v7 + v8[21]);
  *(_BYTE *)(v6 + v8[22]) = *(_BYTE *)(v7 + v8[22]);
  *(_BYTE *)(v6 + v8[23]) = *(_BYTE *)(v7 + v8[23]);
  *(_BYTE *)(v6 + v8[24]) = *(_BYTE *)(v7 + v8[24]);
  *(_QWORD *)(v6 + v8[25]) = *(_QWORD *)(v7 + v8[25]);
  *(_QWORD *)(v6 + v8[26]) = *(_QWORD *)(v7 + v8[26]);
  *(_BYTE *)(v6 + v8[27]) = *(_BYTE *)(v7 + v8[27]);
  *(_BYTE *)(v6 + v8[28]) = *(_BYTE *)(v7 + v8[28]);
  v15 = v8[29];
  v16 = (void *)(v6 + v15);
  v17 = (const void *)(v7 + v15);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v7 + v15, 1, v12))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v14(v16, v17, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  *(_QWORD *)(v6 + v8[30]) = *(_QWORD *)(v7 + v8[30]);
  v19 = v8[31];
  v20 = v6 + v19;
  v21 = v7 + v19;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  *(_QWORD *)(v6 + v8[32]) = *(_QWORD *)(v7 + v8[32]);
  *(_OWORD *)(v6 + v8[33]) = *(_OWORD *)(v7 + v8[33]);
  v22 = v8[34];
  v23 = v6 + v22;
  v24 = v7 + v22;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_BYTE *)(v6 + v8[35]) = *(_BYTE *)(v7 + v8[35]);
  v25 = v8[36];
  v26 = v6 + v25;
  v27 = v7 + v25;
  *(_BYTE *)(v26 + 4) = *(_BYTE *)(v27 + 4);
  *(_DWORD *)v26 = *(_DWORD *)v27;
  *(_OWORD *)(v6 + v8[37]) = *(_OWORD *)(v7 + v8[37]);
  v28 = a3[8];
  v29 = a3[9];
  v30 = a1 + v28;
  v31 = a2 + v28;
  v32 = *(_OWORD *)(v31 + 48);
  *(_OWORD *)(v30 + 32) = *(_OWORD *)(v31 + 32);
  *(_OWORD *)(v30 + 48) = v32;
  v33 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v33;
  v34 = *(_OWORD *)(v31 + 112);
  *(_OWORD *)(v30 + 96) = *(_OWORD *)(v31 + 96);
  *(_OWORD *)(v30 + 112) = v34;
  v35 = *(_OWORD *)(v31 + 80);
  *(_OWORD *)(v30 + 64) = *(_OWORD *)(v31 + 64);
  *(_OWORD *)(v30 + 80) = v35;
  v36 = *(_OWORD *)(v31 + 176);
  *(_OWORD *)(v30 + 160) = *(_OWORD *)(v31 + 160);
  *(_OWORD *)(v30 + 176) = v36;
  v37 = *(_OWORD *)(v31 + 144);
  *(_OWORD *)(v30 + 128) = *(_OWORD *)(v31 + 128);
  *(_OWORD *)(v30 + 144) = v37;
  *(_QWORD *)(v30 + 240) = *(_QWORD *)(v31 + 240);
  v38 = *(_OWORD *)(v31 + 224);
  v39 = *(_OWORD *)(v31 + 192);
  *(_OWORD *)(v30 + 208) = *(_OWORD *)(v31 + 208);
  *(_OWORD *)(v30 + 224) = v38;
  *(_OWORD *)(v30 + 192) = v39;
  v40 = (_OWORD *)(a1 + v29);
  v41 = (_OWORD *)(a2 + v29);
  *v40 = *v41;
  v42 = *(_OWORD *)((char *)v41 + 9);
  v43 = a3[10];
  v44 = a3[11];
  v45 = *(_DWORD *)(a2 + v43);
  *(_OWORD *)((char *)v40 + 9) = v42;
  *(_DWORD *)(a1 + v43) = v45;
  v46 = a1 + v44;
  *(_DWORD *)v46 = *(_DWORD *)(a2 + v44);
  *(_BYTE *)(v46 + 4) = *(_BYTE *)(a2 + v44 + 4);
  v47 = a3[12];
  v48 = (void *)(a1 + v47);
  v49 = (const void *)(a2 + v47);
  v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v51 = *(_QWORD *)(v50 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
  {
    v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E6760);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    v53 = sub_23B1C5A08();
    v54 = *(_QWORD *)(v53 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v54 + 48))(v49, 1, v53))
    {
      memcpy(v48, v49, *(_QWORD *)(v51 + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v54 + 32))(v48, v49, v53);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v48, 0, 1, v53);
    }
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
  }
  v55 = a3[14];
  *(_DWORD *)(a1 + a3[13]) = *(_DWORD *)(a2 + a3[13]);
  v56 = a1 + v55;
  v57 = a2 + v55;
  *(_DWORD *)v56 = *(_DWORD *)v57;
  *(_BYTE *)(v56 + 4) = *(_BYTE *)(v57 + 4);
  return a1;
}

uint64_t sub_23AC410FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(void *, uint64_t, uint64_t);
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  size_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(void *, uint64_t, uint64_t);
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  int *v100;
  uint64_t v101;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v99 = a1;
  v100 = a3;
  v7 = a3[7];
  v8 = a1 + v7;
  v101 = a2;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)(a2 + v7);
  *(_DWORD *)(v8 + 4) = *(_DWORD *)(a2 + v7 + 4);
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(a2 + v7 + 8);
  *(_WORD *)(v8 + 10) = *(_WORD *)(a2 + v7 + 10);
  v10 = (int *)type metadata accessor for ItemMetadata();
  v11 = v10[7];
  v12 = v8 + v11;
  v13 = v9 + v11;
  v14 = sub_23B1C5BDC();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40);
  v16(v12, v13, v14);
  v16(v8 + v10[8], v9 + v10[8], v14);
  *(_BYTE *)(v8 + v10[9]) = *(_BYTE *)(v9 + v10[9]);
  *(_BYTE *)(v8 + v10[10]) = *(_BYTE *)(v9 + v10[10]);
  *(_BYTE *)(v8 + v10[11]) = *(_BYTE *)(v9 + v10[11]);
  *(_BYTE *)(v8 + v10[12]) = *(_BYTE *)(v9 + v10[12]);
  *(_BYTE *)(v8 + v10[13]) = *(_BYTE *)(v9 + v10[13]);
  v17 = v10[14];
  v18 = (_QWORD *)(v8 + v17);
  v19 = (uint64_t *)(v9 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v8 + v10[15]) = *(_BYTE *)(v9 + v10[15]);
  *(_BYTE *)(v8 + v10[16]) = *(_BYTE *)(v9 + v10[16]);
  *(_BYTE *)(v8 + v10[17]) = *(_BYTE *)(v9 + v10[17]);
  *(_BYTE *)(v8 + v10[18]) = *(_BYTE *)(v9 + v10[18]);
  *(_QWORD *)(v8 + v10[19]) = *(_QWORD *)(v9 + v10[19]);
  *(_BYTE *)(v8 + v10[20]) = *(_BYTE *)(v9 + v10[20]);
  *(_BYTE *)(v8 + v10[21]) = *(_BYTE *)(v9 + v10[21]);
  *(_BYTE *)(v8 + v10[22]) = *(_BYTE *)(v9 + v10[22]);
  *(_BYTE *)(v8 + v10[23]) = *(_BYTE *)(v9 + v10[23]);
  *(_BYTE *)(v8 + v10[24]) = *(_BYTE *)(v9 + v10[24]);
  *(_QWORD *)(v8 + v10[25]) = *(_QWORD *)(v9 + v10[25]);
  *(_QWORD *)(v8 + v10[26]) = *(_QWORD *)(v9 + v10[26]);
  *(_BYTE *)(v8 + v10[27]) = *(_BYTE *)(v9 + v10[27]);
  *(_BYTE *)(v8 + v10[28]) = *(_BYTE *)(v9 + v10[28]);
  v22 = v10[29];
  v23 = (void *)(v8 + v22);
  v24 = (const void *)(v9 + v22);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  v26 = v25(v8 + v22, 1, v14);
  v27 = v25((uint64_t)v24, 1, v14);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v23, v24, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v23, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v23, v14);
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E4310);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  v16((uint64_t)v23, (uint64_t)v24, v14);
LABEL_7:
  *(_QWORD *)(v8 + v10[30]) = *(_QWORD *)(v9 + v10[30]);
  swift_bridgeObjectRelease();
  v29 = v10[31];
  v30 = v8 + v29;
  v31 = v9 + v29;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  *(_QWORD *)(v8 + v10[32]) = *(_QWORD *)(v9 + v10[32]);
  swift_bridgeObjectRelease();
  v32 = v10[33];
  v33 = v8 + v32;
  v34 = v9 + v32;
  v35 = *(_QWORD *)(v8 + v32 + 8);
  if (v35 >> 60 == 15)
  {
LABEL_10:
    *(_OWORD *)v33 = *(_OWORD *)v34;
    goto LABEL_12;
  }
  v36 = *(_QWORD *)(v34 + 8);
  if (v36 >> 60 == 15)
  {
    sub_23AB2D750(v33);
    goto LABEL_10;
  }
  v37 = *(_QWORD *)v33;
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *(_QWORD *)(v33 + 8) = v36;
  sub_23AAAE53C(v37, v35);
LABEL_12:
  v38 = v10[34];
  v39 = v8 + v38;
  v40 = v9 + v38;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  *(_BYTE *)(v8 + v10[35]) = *(_BYTE *)(v9 + v10[35]);
  v41 = v10[36];
  v42 = v8 + v41;
  v43 = v9 + v41;
  *(_BYTE *)(v42 + 4) = *(_BYTE *)(v43 + 4);
  *(_DWORD *)v42 = *(_DWORD *)v43;
  v44 = v10[37];
  v45 = (_QWORD *)(v8 + v44);
  v46 = (uint64_t *)(v9 + v44);
  v48 = *v46;
  v47 = v46[1];
  *v45 = v48;
  v45[1] = v47;
  swift_bridgeObjectRelease();
  v49 = v100[8];
  v50 = v99 + v49;
  v51 = v101 + v49;
  v52 = *(void **)(v99 + v49 + 16);
  if (v52 == (void *)1)
  {
LABEL_15:
    v54 = *(_OWORD *)(v51 + 208);
    *(_OWORD *)(v50 + 192) = *(_OWORD *)(v51 + 192);
    *(_OWORD *)(v50 + 208) = v54;
    *(_OWORD *)(v50 + 224) = *(_OWORD *)(v51 + 224);
    *(_QWORD *)(v50 + 240) = *(_QWORD *)(v51 + 240);
    v55 = *(_OWORD *)(v51 + 144);
    *(_OWORD *)(v50 + 128) = *(_OWORD *)(v51 + 128);
    *(_OWORD *)(v50 + 144) = v55;
    v56 = *(_OWORD *)(v51 + 176);
    *(_OWORD *)(v50 + 160) = *(_OWORD *)(v51 + 160);
    *(_OWORD *)(v50 + 176) = v56;
    v57 = *(_OWORD *)(v51 + 80);
    *(_OWORD *)(v50 + 64) = *(_OWORD *)(v51 + 64);
    *(_OWORD *)(v50 + 80) = v57;
    v58 = *(_OWORD *)(v51 + 112);
    *(_OWORD *)(v50 + 96) = *(_OWORD *)(v51 + 96);
    *(_OWORD *)(v50 + 112) = v58;
    v59 = *(_OWORD *)(v51 + 16);
    *(_OWORD *)v50 = *(_OWORD *)v51;
    *(_OWORD *)(v50 + 16) = v59;
    v60 = *(_OWORD *)(v51 + 48);
    *(_OWORD *)(v50 + 32) = *(_OWORD *)(v51 + 32);
    *(_OWORD *)(v50 + 48) = v60;
    goto LABEL_23;
  }
  v53 = *(_QWORD *)(v51 + 16);
  if (v53 == 1)
  {
    sub_23AC40C50(v50);
    goto LABEL_15;
  }
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
  *(_BYTE *)(v50 + 9) = *(_BYTE *)(v51 + 9);
  *(_QWORD *)(v50 + 16) = v53;

  v61 = *(void **)(v50 + 24);
  *(_QWORD *)(v50 + 24) = *(_QWORD *)(v51 + 24);

  *(_BYTE *)(v50 + 32) = *(_BYTE *)(v51 + 32);
  *(_BYTE *)(v50 + 33) = *(_BYTE *)(v51 + 33);
  *(_BYTE *)(v50 + 34) = *(_BYTE *)(v51 + 34);
  v62 = *(_QWORD *)(v51 + 48);
  *(_QWORD *)(v50 + 40) = *(_QWORD *)(v51 + 40);
  *(_QWORD *)(v50 + 48) = v62;
  swift_bridgeObjectRelease();
  v63 = *(_QWORD *)(v51 + 64);
  *(_QWORD *)(v50 + 56) = *(_QWORD *)(v51 + 56);
  *(_QWORD *)(v50 + 64) = v63;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v50 + 72) = *(_BYTE *)(v51 + 72);
  v64 = *(_QWORD *)(v51 + 88);
  *(_QWORD *)(v50 + 80) = *(_QWORD *)(v51 + 80);
  *(_QWORD *)(v50 + 88) = v64;
  swift_bridgeObjectRelease();
  v65 = *(void **)(v50 + 96);
  *(_QWORD *)(v50 + 96) = *(_QWORD *)(v51 + 96);

  *(_BYTE *)(v50 + 104) = *(_BYTE *)(v51 + 104);
  *(_BYTE *)(v50 + 105) = *(_BYTE *)(v51 + 105);
  v66 = *(_QWORD *)(v51 + 120);
  *(_QWORD *)(v50 + 112) = *(_QWORD *)(v51 + 112);
  *(_QWORD *)(v50 + 120) = v66;
  swift_bridgeObjectRelease();
  v67 = *(_QWORD *)(v51 + 136);
  *(_QWORD *)(v50 + 128) = *(_QWORD *)(v51 + 128);
  *(_QWORD *)(v50 + 136) = v67;
  swift_bridgeObjectRelease();
  v68 = *(_QWORD *)(v51 + 152);
  *(_QWORD *)(v50 + 144) = *(_QWORD *)(v51 + 144);
  *(_QWORD *)(v50 + 152) = v68;
  swift_bridgeObjectRelease();
  v69 = *(_QWORD *)(v51 + 168);
  *(_QWORD *)(v50 + 160) = *(_QWORD *)(v51 + 160);
  *(_QWORD *)(v50 + 168) = v69;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v50 + 176) = *(_BYTE *)(v51 + 176);
  *(_QWORD *)(v50 + 184) = *(_QWORD *)(v51 + 184);
  swift_bridgeObjectRelease();
  v70 = *(_QWORD *)(v51 + 192);
  if (!*(_QWORD *)(v50 + 192))
    goto LABEL_21;
  if (!v70)
  {
    sub_23AC40C1C(v50 + 192);
LABEL_21:
    *(_OWORD *)(v50 + 192) = *(_OWORD *)(v51 + 192);
    goto LABEL_22;
  }
  *(_QWORD *)(v50 + 192) = v70;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v50 + 200) = *(_QWORD *)(v51 + 200);
  swift_bridgeObjectRelease();
LABEL_22:
  *(_OWORD *)(v50 + 208) = *(_OWORD *)(v51 + 208);
  *(_QWORD *)(v50 + 224) = *(_QWORD *)(v51 + 224);
  swift_bridgeObjectRelease();
  v71 = *(_QWORD *)(v51 + 240);
  *(_QWORD *)(v50 + 232) = *(_QWORD *)(v51 + 232);
  *(_QWORD *)(v50 + 240) = v71;
  swift_bridgeObjectRelease();
LABEL_23:
  v72 = v100[9];
  v73 = v100[10];
  v74 = v99 + v72;
  v75 = v101 + v72;
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *(_DWORD *)(v74 + 8) = *(_DWORD *)(v75 + 8);
  *(_QWORD *)(v74 + 16) = *(_QWORD *)(v75 + 16);
  *(_BYTE *)(v74 + 24) = *(_BYTE *)(v75 + 24);
  *(_DWORD *)(v99 + v73) = *(_DWORD *)(v101 + v73);
  v76 = v100[11];
  v77 = v100[12];
  v78 = v99 + v76;
  v79 = v101 + v76;
  *(_DWORD *)v78 = *(_DWORD *)v79;
  *(_BYTE *)(v78 + 4) = *(_BYTE *)(v79 + 4);
  v80 = (void *)(v99 + v77);
  v81 = (void *)(v101 + v77);
  v82 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v83 = *(_QWORD *)(v82 - 8);
  v84 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v83 + 48);
  v85 = v84(v80, 1, v82);
  v86 = v84(v81, 1, v82);
  if (!v85)
  {
    if (!v86)
    {
      v90 = sub_23B1C5A08();
      v91 = *(_QWORD *)(v90 - 8);
      v92 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v91 + 48);
      v93 = v92(v80, 1, v90);
      v94 = v92(v81, 1, v90);
      if (v93)
      {
        if (!v94)
        {
          (*(void (**)(void *, void *, uint64_t))(v91 + 32))(v80, v81, v90);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v80, 0, 1, v90);
          goto LABEL_36;
        }
      }
      else
      {
        if (!v94)
        {
          (*(void (**)(void *, void *, uint64_t))(v91 + 40))(v80, v81, v90);
          goto LABEL_36;
        }
        (*(void (**)(void *, uint64_t))(v91 + 8))(v80, v90);
      }
      v89 = *(_QWORD *)(v83 + 64);
      goto LABEL_30;
    }
    sub_23AA8A05C((uint64_t)v80, (uint64_t *)&unk_2542E6740);
LABEL_29:
    v89 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2542E6760) - 8) + 64);
LABEL_30:
    memcpy(v80, v81, v89);
    goto LABEL_36;
  }
  if (v86)
    goto LABEL_29;
  v87 = sub_23B1C5A08();
  v88 = *(_QWORD *)(v87 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v88 + 48))(v81, 1, v87))
  {
    memcpy(v80, v81, *(_QWORD *)(v83 + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v88 + 32))(v80, v81, v87);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v80, 0, 1, v87);
  }
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
LABEL_36:
  v95 = v100[14];
  *(_DWORD *)(v99 + v100[13]) = *(_DWORD *)(v101 + v100[13]);
  v96 = v99 + v95;
  v97 = v101 + v95;
  *(_DWORD *)v96 = *(_DWORD *)v97;
  *(_BYTE *)(v96 + 4) = *(_BYTE *)(v97 + 4);
  return v99;
}

uint64_t sub_23AC41894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ItemMetadata();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E6760);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_23AC41938(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 40) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for ItemMetadata();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E6760);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 48);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_23AC419D8()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for ItemMetadata();
  if (v0 <= 0x3F)
  {
    sub_23AC41AAC();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_23AC41AAC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2542E6768)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542E6740);
    v0 = sub_23B1C6C98();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2542E6768);
  }
}

uint64_t getEnumTagSinglePayload for VFSItem.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VFSItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_23AC41BE0 + 4 * byte_23B1D2B1C[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_23AC41C14 + 4 * byte_23B1D2B17[v4]))();
}

uint64_t sub_23AC41C14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AC41C1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23AC41C24);
  return result;
}

uint64_t sub_23AC41C30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23AC41C38);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_23AC41C3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AC41C44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VFSItem.CodingKeys()
{
  return &type metadata for VFSItem.CodingKeys;
}

ValueMetadata *type metadata accessor for VFSVersion.CodingKeys()
{
  return &type metadata for VFSVersion.CodingKeys;
}

unint64_t sub_23AC41C7C()
{
  unint64_t result;

  result = qword_2569E2D80;
  if (!qword_2569E2D80)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2E04, &type metadata for VFSVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2D80);
  }
  return result;
}

unint64_t sub_23AC41CC4()
{
  unint64_t result;

  result = qword_2569E2D88;
  if (!qword_2569E2D88)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2EBC, &type metadata for VFSItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2D88);
  }
  return result;
}

unint64_t sub_23AC41D0C()
{
  unint64_t result;

  result = qword_2569E2D90;
  if (!qword_2569E2D90)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2E2C, &type metadata for VFSItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2D90);
  }
  return result;
}

unint64_t sub_23AC41D54()
{
  unint64_t result;

  result = qword_2569E2D98;
  if (!qword_2569E2D98)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2E54, &type metadata for VFSItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2D98);
  }
  return result;
}

unint64_t sub_23AC41D9C()
{
  unint64_t result;

  result = qword_2569E2DA0;
  if (!qword_2569E2DA0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2D74, &type metadata for VFSVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2DA0);
  }
  return result;
}

unint64_t sub_23AC41DE4()
{
  unint64_t result;

  result = qword_2569E2DA8;
  if (!qword_2569E2DA8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2D9C, &type metadata for VFSVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2DA8);
  }
  return result;
}

uint64_t sub_23AC41E28(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E726574746170 && a2 == 0xE700000000000000;
  if (v2 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E756F436E6567 && a2 == 0xE800000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023B1F7F50)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23AC41F78(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4449746E65726170 && a2 == 0xE800000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023B1FCB00 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x56746E65746E6F63 && a2 == 0xEE006E6F69737265 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023B1FCB20 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023B1FC400 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x5255646568636163 && a2 == 0xE90000000000004CLL || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x4449656369766564 && a2 == 0xE800000000000000 || (sub_23B1C7388() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x4449636F64 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    v6 = sub_23B1C7388();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

unint64_t sub_23AC423D4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2569E5F40;
  if (!qword_2569E5F40)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2569E2DC0);
    v2 = sub_23AAB5A28(&qword_2569E2DC8, (uint64_t *)&unk_2569E5F30, (uint64_t)&unk_23B1E0490);
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2569E5F40);
  }
  return result;
}

unint64_t sub_23AC42450()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2569E2DD0;
  if (!qword_2569E2DD0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_2542E4310);
    v2 = sub_23AA7E38C(&qword_2569E2418, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2569E2DD0);
  }
  return result;
}

unint64_t sub_23AC424CC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2569E2DF0;
  if (!qword_2569E2DF0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542E7458);
    v2 = sub_23AAB748C(&qword_2569E2440, (uint64_t (*)(void))sub_23AB5EB5C, MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2569E2DF0);
  }
  return result;
}

uint64_t sub_23AC42550@<X0>(__int128 *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_23B191C18(a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), *(unsigned int *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

_QWORD *sub_23AC42570@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *(*v6)(uint64_t *__return_ptr, uint64_t);
  _QWORD *result;
  uint64_t v8;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(v2 + 24);
  *(_QWORD *)(v5 + 24) = a1;
  result = v6(&v8, v5);
  if (!v3)
    *a2 = v8;
  return result;
}

unint64_t sub_23AC425B8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2569E2E08;
  if (!qword_2569E2E08)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2569E2E00);
    v2 = sub_23AA7E38C(&qword_2569E2E10, (uint64_t (*)(uint64_t))type metadata accessor for VFSStagedContext, (uint64_t)&unk_23B1E3FA0);
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2569E2E08);
  }
  return result;
}

unint64_t sub_23AC42634()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2569E2E20;
  if (!qword_2569E2E20)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2569E2E18);
    v2 = sub_23AA7E38C(&qword_2569E2E28, type metadata accessor for VFSDirectoryLister, (uint64_t)&unk_23B1E3FA0);
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2569E2E20);
  }
  return result;
}

unint64_t sub_23AC426B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2569E2E40;
  if (!qword_2569E2E40)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542E7488);
    v2 = sub_23AAB5A28(&qword_2569E2E48, &qword_2542E6CD8, (uint64_t)&unk_23B1D6540);
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2569E2E40);
  }
  return result;
}

unint64_t sub_23AC4272C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2569E2E58;
  if (!qword_2569E2E58)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542E7488);
    v2 = sub_23AAB5A28(&qword_2569E2E50, &qword_2542E6CD8, (uint64_t)&unk_23B1D6568);
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2569E2E58);
  }
  return result;
}

id sub_23AC427A8(id result, void *a2)
{
  id v2;
  id v3;

  if (result != (id)1)
  {
    v3 = result;
    v2 = a2;
    return v3;
  }
  return result;
}

unint64_t sub_23AC427D8()
{
  unint64_t result;

  result = qword_2542E1378;
  if (!qword_2542E1378)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1E2858, &type metadata for WorkingSetSyncAnchor);
    atomic_store(result, (unint64_t *)&qword_2542E1378);
  }
  return result;
}

unint64_t sub_23AC4281C()
{
  unint64_t result;

  result = qword_2542DE078;
  if (!qword_2542DE078)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1E2880, &type metadata for WorkingSetSyncAnchor);
    atomic_store(result, (unint64_t *)&qword_2542DE078);
  }
  return result;
}

unint64_t sub_23AC42860()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2569E2E70;
  if (!qword_2569E2E70)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542E76D0);
    v2 = sub_23AC429AC((unint64_t *)&qword_2542E3620, &qword_2542E54E8, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2569E2E70);
  }
  return result;
}

unint64_t sub_23AC428E4()
{
  unint64_t result;

  result = qword_2542E3570;
  if (!qword_2542E3570)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1E013C, &type metadata for UserInfo);
    atomic_store(result, (unint64_t *)&qword_2542E3570);
  }
  return result;
}

unint64_t sub_23AC42928()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2542E3618;
  if (!qword_2542E3618)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542E76C0);
    v2 = sub_23AAB112C(&qword_2542E3610, qword_2542E33B0, (uint64_t)&unk_23B1E4C08, MEMORY[0x24BEE12A0]);
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2542E3618);
  }
  return result;
}

uint64_t sub_23AC429AC(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3;
    result = MEMORY[0x23B8613CC](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23AC42A08(__int128 *a1@<X0>, id *a2@<X8>)
{
  uint64_t v2;

  sub_23AC3F21C(a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), *(unsigned int *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

void sub_23AC42A28(id a1)
{
  if (a1 != (id)1)

}

_QWORD *sub_23AC42A38@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *(*v6)(uint64_t *__return_ptr, uint64_t);
  _QWORD *result;
  uint64_t v8;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(v2 + 24);
  *(_QWORD *)(v5 + 24) = a1;
  result = v6(&v8, v5);
  if (!v3)
    *a2 = v8;
  return result;
}

uint64_t sub_23AC42A80(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(a1 + 56))(*(unsigned int *)(v1 + 16));
}

unint64_t sub_23AC42AA8()
{
  unint64_t result;

  result = qword_2569E2E80;
  if (!qword_2569E2E80)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D309C, &type metadata for VFSTrackingContinuation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2E80);
  }
  return result;
}

uint64_t sub_23AC42AEC@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23AC3ECD4(a1, *(unsigned int *)(v2 + 16), *(unsigned int *)(v2 + 20), *(unsigned int *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t sub_23AC42B0C(uint64_t a1)
{
  uint64_t v1;

  return sub_23B1B32FC(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_23AC42B28(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v8;

  v2 = *(void **)(a1 + 24);
  v3 = *(void **)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 192);
  v4 = *(id *)(a1 + 16);
  v5 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23AA8831C(v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

double sub_23AC42C18(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 9;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_BYTE *)(a1 + 120) = 10;
  return result;
}

uint64_t sub_23AC42C4C()
{
  return sub_23B191EF4();
}

uint64_t sub_23AC42C54(__int128 *a1)
{
  uint64_t v1;

  return sub_23AC3EC44(a1, *(unsigned int *)(v1 + 16), *(unsigned int *)(v1 + 20), *(unsigned int *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_23AC42C74(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3();
    result = MEMORY[0x23B8613CC](MEMORY[0x24BEE4AA8], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23AC42CD8()
{
  return swift_deallocObject();
}

uint64_t _s9libfssync10VFSVersionV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23AC42D34 + 4 * byte_23B1D2B26[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23AC42D68 + 4 * byte_23B1D2B21[v4]))();
}

uint64_t sub_23AC42D68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AC42D70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23AC42D78);
  return result;
}

uint64_t sub_23AC42D84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23AC42D8CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23AC42D90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23AC42D98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VFSTrackingContinuation.CodingKeys()
{
  return &type metadata for VFSTrackingContinuation.CodingKeys;
}

unint64_t sub_23AC42DB8()
{
  unint64_t result;

  result = qword_2569E2EA8;
  if (!qword_2569E2EA8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D3074, &type metadata for VFSTrackingContinuation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2EA8);
  }
  return result;
}

unint64_t sub_23AC42E00()
{
  unint64_t result;

  result = qword_2569E2EB0;
  if (!qword_2569E2EB0)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2FAC, &type metadata for VFSTrackingContinuation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2EB0);
  }
  return result;
}

unint64_t sub_23AC42E48()
{
  unint64_t result;

  result = qword_2569E2EB8;
  if (!qword_2569E2EB8)
  {
    result = MEMORY[0x23B8613CC](&unk_23B1D2FD4, &type metadata for VFSTrackingContinuation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2569E2EB8);
  }
  return result;
}

uint64_t sub_23AC42EA4(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t result;
  id v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  id v25;
  id v26;
  id v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  NSObject *v34;
  _QWORD *v35;
  NSObject *v36;
  _QWORD *v37;
  NSObject *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;

  v4 = sub_23B1C5E4C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v37 - v9;
  if (!a2)
    return a1 != 0;
  if (a1)
  {
    v11 = a2;
    v12 = a1;
    v13 = objc_msgSend(v11, sel_compare_, v12);
    if (v13 == -1)
    {

      return 1;
    }
    v14 = v13;
    if (v13)
    {
      if (v13 != 1)
      {
        type metadata accessor for ComparisonResult(0);
        v42 = v14;
        result = sub_23B1C73E8();
        __break(1u);
        return result;
      }
      v25 = (id)fpfs_current_or_default_log();
      sub_23B1C5E58();
      v26 = v11;
      v27 = v12;
      v28 = v26;
      v29 = v27;
      v30 = sub_23B1C5E40();
      v31 = sub_23B1C6AB8();
      v32 = v31;
      if (os_log_type_enabled(v30, v31))
      {
        v33 = swift_slowAlloc();
        v37 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v33 = 138412546;
        v39 = v32;
        v41 = v4;
        v42 = v28;
        v40 = v5;
        v34 = v28;
        sub_23B1C6CBC();
        v35 = v37;
        *v37 = a2;
        v38 = v34;

        *(_WORD *)(v33 + 12) = 2112;
        v42 = v29;
        v36 = v29;
        v5 = v40;
        v4 = v41;
        sub_23B1C6CBC();
        v35[1] = a1;

        _os_log_impl(&dword_23AA66000, v30, (os_log_type_t)v39, "🌍  ignoring decreasing domain version %@ -> %@", (uint8_t *)v33, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v35, -1, -1);
        MEMORY[0x23B8614BC](v33, -1, -1);
        v29 = v38;
      }
      else
      {

        v36 = v29;
        v30 = v29;
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    else
    {

    }
    return 0;
  }
  else
  {
    v16 = a2;
    v17 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v18 = v16;
    v19 = sub_23B1C5E40();
    v20 = sub_23B1C6AB8();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v41 = v4;
      v42 = v18;
      v23 = (_QWORD *)v22;
      v40 = v5;
      *(_DWORD *)v21 = 138412290;
      v18 = v18;
      v5 = v40;
      sub_23B1C6CBC();
      *v23 = a2;

      _os_log_impl(&dword_23AA66000, v19, v20, "🌍  ignoring disappearing domain version %@ -> nil", v21, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      v24 = v23;
      v4 = v41;
      MEMORY[0x23B8614BC](v24, -1, -1);
      MEMORY[0x23B8614BC](v21, -1, -1);
    }
    else
    {

      v19 = v18;
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    return 1;
  }
}

uint64_t sub_23AC432D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);

  v26 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DDE90);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v25 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E21C0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for VFSItem(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23AA8EFC8(a1, (uint64_t)v13, &qword_2542E21C0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_23AA94050((uint64_t)v13, (uint64_t)v16, type metadata accessor for VFSItem);
    sub_23AA8EFC8(a2, (uint64_t)v10, (uint64_t *)&unk_2542DDE90);
    v19 = type metadata accessor for TelemetrySignpost(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v10, 1, v19) == 1)
    {
      sub_23AA937BC((uint64_t)v16, type metadata accessor for VFSItem);
      v18 = (uint64_t)v10;
      goto LABEL_6;
    }
    v21 = &v16[*(int *)(v14 + 28)];
    v22 = *v21;
    if (v22 == 1)
    {
      if (v21[8])
        v23 = 0;
      else
        v23 = *((unsigned int *)v21 + 1);
    }
    else
    {
      v23 = *(_QWORD *)&v21[*(int *)(type metadata accessor for ItemMetadata() + 100)];
    }
    sub_23B1A2738(v23, (v22 == 1) | 0x40);
    sub_23AA937BC((uint64_t)v16, type metadata accessor for VFSItem);
    v20 = (uint64_t)v10;
LABEL_14:
    sub_23AA937BC(v20, type metadata accessor for TelemetrySignpost);
    return v26(a1);
  }
  sub_23AA8A05C((uint64_t)v13, &qword_2542E21C0);
  sub_23AA8EFC8(a2, (uint64_t)v8, (uint64_t *)&unk_2542DDE90);
  v17 = type metadata accessor for TelemetrySignpost(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v8, 1, v17) != 1)
  {
    sub_23B1A2738(0, 128);
    v20 = (uint64_t)v8;
    goto LABEL_14;
  }
  v18 = (uint64_t)v8;
LABEL_6:
  sub_23AA8A05C(v18, (uint64_t *)&unk_2542DDE90);
  return v26(a1);
}

char *sub_23AC43578(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, int a6, uint64_t a7, uint64_t a8, char a9, void *a10, void (*a11)(_QWORD), uint64_t a12, unsigned __int8 a13)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  char *result;
  uint64_t v69;
  int v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t);
  int v114;
  _QWORD *v115;
  uint64_t v116;
  void (*v117)(_QWORD);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121[2];

  v104 = a8;
  v114 = a6;
  v111 = a5;
  v112 = a3;
  v113 = a4;
  v16 = __swift_instantiateConcreteTypeFromMangledName(qword_2542E02D0);
  MEMORY[0x24BDAC7A8](v16);
  v99 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_23B1C6050();
  v97 = *(_QWORD *)(v98 - 8);
  MEMORY[0x24BDAC7A8](v98);
  v103 = (char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23B1C60A4();
  v101 = *(_QWORD *)(v19 - 8);
  v102 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v100 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for VFSItem(0);
  v94 = *(_QWORD *)(v110 - 8);
  v21 = MEMORY[0x24BDAC7A8](v110);
  v96 = (uint64_t)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v106 = (uint64_t)&v93 - v24;
  v95 = v25;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v93 - v26;
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542DDE90);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v107 = (uint64_t)&v93 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v109 = (uint64_t)&v93 - v31;
  v119 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E21C0);
  v32 = MEMORY[0x24BDAC7A8](v119);
  v34 = (void **)((char *)&v93 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = MEMORY[0x24BDAC7A8](v32);
  v37 = (char *)&v93 - v36;
  MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)&v93 - v38;
  v40 = sub_23B1C5E4C();
  v116 = *(_QWORD *)(v40 - 8);
  v117 = (void (*)(_QWORD))v40;
  MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)&v93 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  v118 = a1;
  sub_23AA8EFC8(a1, (uint64_t)v39, &qword_2542E21C0);
  sub_23AA93780(a2);
  sub_23AA93780(a2);
  v44 = sub_23B1C5E40();
  v45 = sub_23B1C6A94();
  v46 = os_log_type_enabled(v44, v45);
  v105 = a7;
  v115 = v37;
  if (v46)
  {
    v47 = swift_slowAlloc();
    v93 = swift_slowAlloc();
    v121[0] = v93;
    *(_DWORD *)v47 = 136315394;
    v48 = a2;
    sub_23AA8EFC8((uint64_t)v39, (uint64_t)v37, &qword_2542E21C0);
    v49 = sub_23B1C6434();
    v108 = v27;
    v120 = sub_23AABEC68(v49, v50, v121);
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    sub_23AA8A05C((uint64_t)v39, &qword_2542E21C0);
    *(_WORD *)(v47 + 12) = 2080;
    sub_23AE5BC48(a2);
    v52 = v51;
    v54 = v53;
    sub_23AC03BE4(v48);
    v120 = sub_23AABEC68(v52, v54, v121);
    v27 = v108;
    sub_23B1C6CBC();
    a2 = v48;
    swift_bridgeObjectRelease();
    sub_23AC03BE4(v48);
    _os_log_impl(&dword_23AA66000, v44, v45, "create fault completed with result %s request %s", (uint8_t *)v47, 0x16u);
    v55 = v93;
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v55, -1, -1);
    MEMORY[0x23B8614BC](v47, -1, -1);
  }
  else
  {
    sub_23AC03BE4(a2);
    sub_23AA8A05C((uint64_t)v39, &qword_2542E21C0);
    sub_23AC03BE4(a2);
  }

  (*(void (**)(char *, void (*)(_QWORD)))(v116 + 8))(v42, v117);
  sub_23AA8EFC8(v118, (uint64_t)v34, &qword_2542E21C0);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_23AA94050((uint64_t)v34, (uint64_t)v27, type metadata accessor for VFSItem);
    v61 = v110;
    v62 = &v27[*(int *)(v110 + 28)];
    v63 = type metadata accessor for ItemMetadata();
    if ((v62[*(int *)(v63 + 80)] & 1) != 0 || (v114 & 1) != 0)
    {
      v118 = a2;
      v69 = v106;
      sub_23AA907B0((uint64_t)v27, v106, type metadata accessor for VFSItem);
      if ((v114 & 1) != 0)
      {
        sub_23AA937BC(v69, type metadata accessor for VFSItem);
      }
      else
      {
        v72 = *(_BYTE *)(v69 + *(int *)(v61 + 28) + *(int *)(v63 + 80));
        sub_23AA937BC(v69, type metadata accessor for VFSItem);
        if ((v72 & 1) != 0)
        {
          sub_23AA7A184(v104, 1, a9 & 1, 1, v118, a10, a11, a12);
          v73 = (uint64_t)v27;
          return (char *)sub_23AA937BC(v73, type metadata accessor for VFSItem);
        }
      }
      if ((a9 & 1) == 0 || *v62 == 1)
      {
        v117 = a11;
        v119 = a12;
        result = (char *)objc_msgSend(a10, sel_totalUnitCount);
        if (__OFADD__(result, 1))
        {
          __break(1u);
          return result;
        }
        LODWORD(v113) = a13;
        objc_msgSend(a10, sel_setTotalUnitCount_, result + 1);
        v116 = *(_QWORD *)v27;
        LODWORD(v115) = v27[8];
        v108 = v27;
        v74 = v96;
        sub_23AA907B0((uint64_t)v27, v96, type metadata accessor for VFSItem);
        v75 = (*(unsigned __int8 *)(v94 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
        v76 = (v95 + v75 + 7) & 0xFFFFFFFFFFFFFFF8;
        v77 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8;
        v78 = (v77 + 31) & 0xFFFFFFFFFFFFFFF8;
        v79 = swift_allocObject();
        sub_23AA94050(v74, v79 + v75, type metadata accessor for VFSItem);
        v80 = (_QWORD *)(v79 + v76);
        v81 = v119;
        *v80 = v117;
        v80[1] = v81;
        *(_QWORD *)(v79 + v77) = v105;
        v82 = v79 + ((v77 + 15) & 0xFFFFFFFFFFFFFFF8);
        v83 = v118;
        *(_QWORD *)v82 = v118;
        *(_BYTE *)(v82 + 8) = v113 & 1;
        v84 = v79 + v78;
        *(_QWORD *)v84 = v104;
        *(_BYTE *)(v84 + 8) = v114 & 1;
        *(_BYTE *)(v84 + 9) = a9 & 1;
        *(_QWORD *)(v79 + ((v78 + 17) & 0xFFFFFFFFFFFFFFF8)) = a10;
        sub_23AA93780(v83);
        swift_retain();
        swift_retain();
        swift_retain();
        v85 = a10;
        qos_class_self();
        v86 = (uint64_t)v99;
        sub_23B1C6038();
        v87 = v97;
        v88 = v98;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v86, 1, v98) == 1)
        {
          (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v103, *MEMORY[0x24BEE5498], v88);
          sub_23AA8A05C(v86, qword_2542E02D0);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v87 + 32))(v103, v86, v88);
        }
        v89 = (uint64_t)v100;
        sub_23B1C608C();
        v90 = sub_23ADF4384(v116, (int)v115, v83, v89, (uint64_t)sub_23AABA4F0, v79);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v89, v102);
        objc_msgSend(v85, sel_addChild_withPendingUnitCount_, v90, 1);

        v73 = (uint64_t)v108;
        return (char *)sub_23AA937BC(v73, type metadata accessor for VFSItem);
      }
      v92 = (uint64_t)v115;
      sub_23AA907B0((uint64_t)v27, (uint64_t)v115, type metadata accessor for VFSItem);
      swift_storeEnumTagMultiPayload();
      a11(v92);
      v91 = v92;
    }
    else
    {
      v64 = v107;
      sub_23AA8EFC8(v112, v107, (uint64_t *)&unk_2542DDE90);
      v65 = type metadata accessor for TelemetrySignpost(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 48))(v64, 1, v65) == 1)
      {
        sub_23AA8A05C(v64, (uint64_t *)&unk_2542DDE90);
        v66 = (uint64_t)v115;
      }
      else
      {
        v70 = *v62;
        if (v70 == 1)
        {
          if (v62[8])
            v71 = 0;
          else
            v71 = *((unsigned int *)v62 + 1);
        }
        else
        {
          v71 = *(_QWORD *)&v62[*(int *)(v63 + 100)];
        }
        v66 = (uint64_t)v115;
        sub_23B1A2738(v71, v70 == 1);
        sub_23AA937BC(v64, type metadata accessor for TelemetrySignpost);
      }
      sub_23AA907B0((uint64_t)v27, v66, type metadata accessor for VFSItem);
      swift_storeEnumTagMultiPayload();
      v113(v66);
      v91 = v66;
    }
    sub_23AA8A05C(v91, &qword_2542E21C0);
    v73 = (uint64_t)v27;
    return (char *)sub_23AA937BC(v73, type metadata accessor for VFSItem);
  }
  v56 = *v34;
  v57 = v109;
  sub_23AA8EFC8(v112, v109, (uint64_t *)&unk_2542DDE90);
  v58 = type metadata accessor for TelemetrySignpost(0);
  v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48))(v57, 1, v58);
  v60 = v115;
  if (v59 == 1)
  {
    sub_23AA8A05C(v57, (uint64_t *)&unk_2542DDE90);
  }
  else
  {
    sub_23B1A2738(0, 128);
    sub_23AA937BC(v57, type metadata accessor for TelemetrySignpost);
  }
  *v60 = v56;
  swift_storeEnumTagMultiPayload();
  v67 = v56;
  v113((uint64_t)v60);

  return (char *)sub_23AA8A05C((uint64_t)v60, &qword_2542E21C0);
}

void sub_23AC43FC4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, unint64_t a5, uint64_t a6, int a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  int v71;
  id *v72;
  id v73;
  uint64_t v74;
  id v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  BOOL v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  id v88;
  char *v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  id v98;
  char v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  _QWORD *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void (*v126)(uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;

  v115 = a8;
  v114 = a7;
  v116 = a6;
  v121 = a5;
  v126 = a3;
  v127 = a4;
  v125 = (void *)a2;
  v124 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E21C0);
  v12 = MEMORY[0x24BDAC7A8](v124);
  v119 = (uint64_t *)((char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v123 = (uint64_t)&v110 - v14;
  v15 = type metadata accessor for VFSItem(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v113 = (uint64_t)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v111 = (uint64_t)&v110 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v117 = (uint64_t)&v110 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v122 = (uint64_t)&v110 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v120 = (uint64_t)&v110 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v110 - v27;
  v29 = sub_23B1C5E4C();
  v128 = *(_QWORD *)(v29 - 8);
  v129 = v29;
  v30 = MEMORY[0x24BDAC7A8](v29);
  v112 = (char *)&v110 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x24BDAC7A8](v30);
  v118 = (char *)&v110 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v36 = (char *)&v110 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v110 - v37;
  v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E21B0);
  MEMORY[0x24BDAC7A8](v39);
  v41 = (void **)((char *)&v110 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23AA8EFC8(a1, (uint64_t)v41, (uint64_t *)&unk_2542E21B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v42 = *v41;
    v43 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    sub_23AA907B0((uint64_t)v125, (uint64_t)v28, type metadata accessor for VFSItem);
    v44 = v42;
    v45 = v42;
    v46 = sub_23B1C5E40();
    v47 = sub_23B1C6A94();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = swift_slowAlloc();
      v49 = (_QWORD *)swift_slowAlloc();
      v125 = (void *)swift_slowAlloc();
      v131 = (uint64_t)v125;
      *(_DWORD *)v48 = 136315394;
      v50 = sub_23AA96F18(*(_QWORD *)v28, v28[8]);
      v133 = sub_23AABEC68(v50, v51, &v131);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      sub_23AA937BC((uint64_t)v28, type metadata accessor for VFSItem);
      *(_WORD *)(v48 + 12) = 2112;
      swift_getErrorValue();
      v52 = sub_23B0D9CF0(v130);
      v133 = (uint64_t)v52;
      sub_23B1C6CBC();
      *v49 = v52;

      _os_log_impl(&dword_23AA66000, v46, v47, "requestMaterialization(%s) post-materialization lookup returned an error %@", (uint8_t *)v48, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542E7570);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v49, -1, -1);
      v53 = (uint64_t)v125;
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v53, -1, -1);
      MEMORY[0x23B8614BC](v48, -1, -1);
    }
    else
    {
      sub_23AA937BC((uint64_t)v28, type metadata accessor for VFSItem);

    }
    (*(void (**)(char *, uint64_t))(v128 + 8))(v38, v129);
    v63 = v123;
    *(_QWORD *)v123 = v42;
    swift_storeEnumTagMultiPayload();
    v64 = v42;
    v126(v63);

LABEL_29:
    sub_23AA8A05C(v63, &qword_2542E21C0);
    return;
  }
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v16 + 48))(v41, 1, v15) == 1)
  {
    v54 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v55 = (uint64_t)v125;
    v56 = v120;
    sub_23AA907B0((uint64_t)v125, v120, type metadata accessor for VFSItem);
    v57 = sub_23B1C5E40();
    v58 = sub_23B1C6A94();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      v60 = swift_slowAlloc();
      v131 = v60;
      *(_DWORD *)v59 = 136315138;
      v61 = sub_23AA96F18(*(_QWORD *)v56, *(_BYTE *)(v56 + 8));
      v133 = sub_23AABEC68(v61, v62, &v131);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      sub_23AA937BC(v56, type metadata accessor for VFSItem);
      _os_log_impl(&dword_23AA66000, v57, v58, "requestMaterialization(%s) post-materialization lookup returned no item", v59, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v60, -1, -1);
      MEMORY[0x23B8614BC](v59, -1, -1);
    }
    else
    {
      sub_23AA937BC(v56, type metadata accessor for VFSItem);
    }

    (*(void (**)(char *, uint64_t))(v128 + 8))(v36, v129);
    v70 = *(_QWORD *)v55;
    v71 = *(unsigned __int8 *)(v55 + 8);
    if (v71 != 2 || v70)
    {
      if (v71 != 2 || v70 != 1)
      {
        v131 = 0x2F73662F70665F5FLL;
        v132 = 0xE800000000000000;
        sub_23AA96F18(v70, v71);
        sub_23B1C64F4();
        swift_bridgeObjectRelease();
        v73 = (id)sub_23B1C63BC();
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
      v72 = (id *)MEMORY[0x24BDC8230];
    }
    else
    {
      v72 = (id *)MEMORY[0x24BDC8228];
    }
    v73 = *v72;
LABEL_27:
    v98 = (id)FPItemNotFoundError();

    if (!v98)
    {
      __break(1u);
      return;
    }
    v63 = (uint64_t)v119;
    *v119 = v98;
    swift_storeEnumTagMultiPayload();
    v126(v63);
    goto LABEL_29;
  }
  v65 = (uint64_t)v41;
  v66 = v122;
  sub_23AA94050(v65, v122, type metadata accessor for VFSItem);
  v67 = v121;
  v68 = sub_23ADF6D74(v121);
  if (v68)
  {
    v69 = v68;
    objc_msgSend(v68, sel_requestedExtent);

LABEL_22:
    v88 = (id)fpfs_current_or_default_log();
    v89 = v118;
    sub_23B1C5E58();
    v90 = v117;
    sub_23AA907B0(v66, v117, type metadata accessor for VFSItem);
    v91 = sub_23B1C5E40();
    v92 = sub_23B1C6A94();
    if (os_log_type_enabled(v91, v92))
    {
      v93 = (uint8_t *)swift_slowAlloc();
      v94 = swift_slowAlloc();
      v131 = v94;
      *(_DWORD *)v93 = 136315138;
      v95 = sub_23AA96F18(*(_QWORD *)v90, *(_BYTE *)(v90 + 8));
      v133 = sub_23AABEC68(v95, v96, &v131);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      sub_23AA937BC(v90, type metadata accessor for VFSItem);
      _os_log_impl(&dword_23AA66000, v91, v92, "requestMaterialization(%s) post-materialization lookup succeeded", v93, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v94, -1, -1);
      MEMORY[0x23B8614BC](v93, -1, -1);
    }
    else
    {
      sub_23AA937BC(v90, type metadata accessor for VFSItem);
    }

    (*(void (**)(char *, uint64_t))(v128 + 8))(v89, v129);
    v97 = v123;
    sub_23AA907B0((uint64_t)v125, v123, type metadata accessor for VFSItem);
    swift_storeEnumTagMultiPayload();
    v126(v97);
    sub_23AA8A05C(v97, &qword_2542E21C0);
    sub_23AA937BC(v66, type metadata accessor for VFSItem);
    return;
  }
  v74 = v66 + *(int *)(v15 + 28);
  if ((*(_BYTE *)(v74 + *(int *)(type metadata accessor for ItemMetadata() + 80)) & 1) == 0)
    goto LABEL_22;
  LODWORD(v124) = a10;
  LODWORD(v123) = a9;
  v75 = (id)fpfs_current_or_default_log();
  v76 = v112;
  sub_23B1C5E58();
  v77 = v66;
  v78 = v111;
  sub_23AA907B0(v77, v111, type metadata accessor for VFSItem);
  v79 = sub_23B1C5E40();
  v80 = sub_23B1C6A94();
  v81 = os_log_type_enabled(v79, v80);
  v125 = (void *)a11;
  if (v81)
  {
    v82 = (uint8_t *)swift_slowAlloc();
    v83 = swift_slowAlloc();
    v120 = v16;
    v84 = v83;
    v131 = v83;
    *(_DWORD *)v82 = 136315138;
    v85 = sub_23AA96F18(*(_QWORD *)v78, *(_BYTE *)(v78 + 8));
    v133 = sub_23AABEC68(v85, v86, &v131);
    v67 = v121;
    sub_23B1C6CBC();
    swift_bridgeObjectRelease();
    sub_23AA937BC(v78, type metadata accessor for VFSItem);
    _os_log_impl(&dword_23AA66000, v79, v80, "requestMaterialization(%s) post-materialization lookup returned a dataless item - force ingestion", v82, 0xCu);
    swift_arrayDestroy();
    v87 = v84;
    v16 = v120;
    MEMORY[0x23B8614BC](v87, -1, -1);
    MEMORY[0x23B8614BC](v82, -1, -1);
  }
  else
  {
    sub_23AA937BC(v78, type metadata accessor for VFSItem);
  }

  (*(void (**)(char *, uint64_t))(v128 + 8))(v76, v129);
  v99 = v114;
  v129 = *(_QWORD *)v122;
  LODWORD(v128) = *(unsigned __int8 *)(v122 + 8);
  v100 = v113;
  sub_23AA907B0(v122, v113, type metadata accessor for VFSItem);
  v101 = (*(unsigned __int8 *)(v16 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v102 = swift_allocObject();
  v103 = v127;
  *(_QWORD *)(v102 + 16) = v126;
  *(_QWORD *)(v102 + 24) = v103;
  *(_BYTE *)(v102 + 32) = v99 & 1;
  v104 = v116;
  v105 = v115;
  *(_QWORD *)(v102 + 40) = v116;
  *(_QWORD *)(v102 + 48) = v105;
  *(_BYTE *)(v102 + 56) = v123 & 1;
  *(_BYTE *)(v102 + 57) = v124 & 1;
  v106 = v125;
  *(_QWORD *)(v102 + 64) = v67;
  *(_QWORD *)(v102 + 72) = v106;
  sub_23AA94050(v100, v102 + v101, type metadata accessor for VFSItem);
  v107 = swift_allocObject();
  *(_QWORD *)(v107 + 16) = sub_23ACF7C78;
  *(_QWORD *)(v107 + 24) = v102;
  v131 = v129;
  LOBYTE(v132) = v128;
  v108 = (_QWORD *)swift_allocObject();
  sub_23AA9F454(&v131, (uint64_t)(v108 + 2));
  v108[4] = v67;
  v108[5] = v104;
  v108[6] = sub_23ACF7C78;
  v108[7] = v102;
  swift_retain();
  sub_23AA93780(v67);
  swift_retain_n();
  sub_23AA93780(v67);
  swift_retain();
  swift_retain();
  swift_retain();
  v109 = v106;
  sub_23ADF3D40((uint64_t)"propagateToFP(itemID:request:completion:)", 41, 2, 0, (uint64_t)sub_23AABA6B4, 0, (uint64_t)sub_23AA8A65C, v107, (uint64_t)sub_23ACF7CE4, (uint64_t)v108);
  swift_release();
  swift_release();
  swift_release();
  sub_23AA937BC(v122, type metadata accessor for VFSItem);
}

uint64_t sub_23AC44C6C(void *a1, void (*a2)(uint64_t *), uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  id v30;
  uint64_t v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  BOOL v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(uint64_t *);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t *);
  uint64_t v61;
  uint64_t v62;

  LODWORD(v57) = a8;
  LODWORD(v56) = a7;
  v54 = a5;
  v55 = a6;
  LODWORD(v58) = a4;
  v59 = a3;
  v60 = a2;
  v12 = sub_23B1C545C();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23B1C5474();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for VFSItem(0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_23B1C5E4C();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E21C0);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (uint64_t *)((char *)&v49 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    *v29 = (uint64_t)a1;
    swift_storeEnumTagMultiPayload();
    v30 = a1;
    v60(v29);
  }
  else
  {
    v52 = v16;
    v53 = v23;
    v50 = v15;
    v51 = v14;
    if ((v58 & 1) != 0)
      return sub_23AA7A184(v55, v56 & 1, v57 & 1, 0, a9, a10, v60, v59);
    v32 = v22;
    v58 = v27;
    v33 = (id)fpfs_current_or_default_log();
    sub_23B1C5E58();
    v34 = (uint64_t)v21;
    sub_23AA907B0(a11, (uint64_t)v21, type metadata accessor for VFSItem);
    v35 = sub_23B1C5E40();
    v36 = sub_23B1C6A94();
    v37 = os_log_type_enabled(v35, v36);
    v38 = v18;
    v39 = v53;
    if (v37)
    {
      v40 = swift_slowAlloc();
      v57 = v32;
      v41 = (uint8_t *)v40;
      v42 = swift_slowAlloc();
      v62 = v42;
      *(_DWORD *)v41 = 136315138;
      v56 = v41 + 4;
      v43 = sub_23AA96F18(*(_QWORD *)v34, *(_BYTE *)(v34 + 8));
      v61 = sub_23AABEC68(v43, v44, &v62);
      sub_23B1C6CBC();
      swift_bridgeObjectRelease();
      sub_23AA937BC(v34, type metadata accessor for VFSItem);
      _os_log_impl(&dword_23AA66000, v35, v36, "requestMaterialization(%s) post-materialization retry failed", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B8614BC](v42, -1, -1);
      MEMORY[0x23B8614BC](v41, -1, -1);

      (*(void (**)(char *, uint64_t))(v53 + 8))(v25, v57);
    }
    else
    {
      sub_23AA937BC(v34, type metadata accessor for VFSItem);

      (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v32);
    }
    v45 = v60;
    v46 = v50;
    v47 = v52;
    sub_23B1C53E4();
    sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
    sub_23AA7E38C((unint64_t *)&qword_2569E8150, (uint64_t (*)(uint64_t))MEMORY[0x24BDCAEE8], MEMORY[0x24BDCAEE0]);
    sub_23B1C5864();
    v48 = sub_23B1C5354();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v38, v46);
    *v29 = v48;
    swift_storeEnumTagMultiPayload();
    v45(v29);
  }
  return sub_23AA8A05C((uint64_t)v29, &qword_2542E21C0);
}

unint64_t sub_23AC4507C()
{
  return sub_23AAB75BC(MEMORY[0x24BEE4AF8]);
}

uint64_t sub_23AC45088(void *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  if (objc_sync_enter(a1))
  {
    swift_unknownObjectRetain();
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)a1);
  }
  a2(&v6);
  if (!v2)
  {
    if (!objc_sync_exit(a1))
      return v6;
LABEL_8:
    swift_unknownObjectRetain();
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)a1);
  }
  result = objc_sync_exit(a1);
  if ((_DWORD)result)
    goto LABEL_8;
  return result;
}

uint64_t sub_23AC4514C(void *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  if (objc_sync_enter(a1))
  {
    swift_unknownObjectRetain();
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)a1);
  }
  a2(&v6);
  if (!v2)
  {
    if (!objc_sync_exit(a1))
      return v6;
LABEL_8:
    swift_unknownObjectRetain();
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)a1);
  }
  result = objc_sync_exit(a1);
  if ((_DWORD)result)
    goto LABEL_8;
  return result;
}

uint64_t sub_23AC45210(void *a1, void (*a2)(void))
{
  uint64_t result;

  if (objc_sync_enter(a1))
  {
    swift_unknownObjectRetain();
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)a1);
  }
  a2();
  result = objc_sync_exit(a1);
  if ((_DWORD)result)
  {
    swift_unknownObjectRetain();
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)a1);
  }
  return result;
}

uint64_t sub_23AC452C4(void *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  if (objc_sync_enter(a1))
  {
    swift_unknownObjectRetain();
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)a1);
  }
  a2(&v6);
  if (!v2)
  {
    if (!objc_sync_exit(a1))
      return v6;
LABEL_8:
    swift_unknownObjectRetain();
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)a1);
  }
  result = objc_sync_exit(a1);
  if ((_DWORD)result)
    goto LABEL_8;
  return result;
}

uint64_t sub_23AC45388(void *a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  if (objc_sync_enter(a1))
  {
    swift_unknownObjectRetain();
    sub_23AFEFD14((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)a1);
  }
  a2(&v6);
  if (!v2)
  {
    if (!objc_sync_exit(a1))
      return v6;
LABEL_8:
    swift_unknownObjectRetain();
    sub_23AFEFD28((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)a1);
  }
  result = objc_sync_exit(a1);
  if ((_DWORD)result)
    goto LABEL_8;
  return result;
}

uint64_t sub_23AC45450(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t, _QWORD), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t (*v18)(_QWORD);
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, _QWORD);

  v29 = a3;
  v27 = a2;
  v6 = type metadata accessor for ItemMetadata();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for VFSItem(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v26 - v15;
  v17 = *(unsigned __int8 *)(a1 + *(int *)(v14 + 28) + *(int *)(v6 + 64));
  sub_23AA907B0(a1, (uint64_t)&v26 - v15, v18);
  if (v17 == 1)
  {
    sub_23AA937BC((uint64_t)v16, type metadata accessor for VFSItem);
  }
  else
  {
    sub_23AA907B0((uint64_t)&v16[*(int *)(v9 + 28)], (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ItemMetadata);
    sub_23AA937BC((uint64_t)v16, type metadata accessor for VFSItem);
    v19 = v8[*(int *)(v6 + 68)];
    sub_23AA937BC((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for ItemMetadata);
    if ((v19 & 1) == 0)
    {
      sub_23AA907B0(a1, (uint64_t)v13, type metadata accessor for VFSItem);
      v20 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v21 = (v11 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
      v22 = swift_allocObject();
      *(_QWORD *)(v22 + 16) = v28;
      sub_23AA94050((uint64_t)v13, v22 + v20, type metadata accessor for VFSItem);
      v23 = (_QWORD *)(v22 + v21);
      *v23 = v29;
      v23[1] = a4;
      v24 = v27;
      *(_QWORD *)(v22 + ((v21 + 23) & 0xFFFFFFFFFFFFFFF8)) = v27;
      swift_retain();
      swift_retain();
      sub_23AA93780(v24);
      sub_23AA901C4((uint64_t)"checkIsInIgnoredHierarchy(_:request:completion:)", 48, 2, nullsub_1, 0, (uint64_t)sub_23ACFA950, v22);
      return swift_release();
    }
  }
  return v29(1, 0);
}

void sub_23AC45690(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  id v16;
  id v17;
  _QWORD v18[2];

  v18[1] = a4;
  v9 = type metadata accessor for VFSItem(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E21B0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (id *)((char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23AA8EFC8(a1, (uint64_t)v15, (uint64_t *)&unk_2542E21B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = *v15;
    v17 = *v15;
    a2((uint64_t)v16, 1);

  }
  else if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    a2(0, 0);
  }
  else
  {
    sub_23AA94050((uint64_t)v15, (uint64_t)v12, type metadata accessor for VFSItem);
    sub_23AC45450((uint64_t)v12, a5, a2, a3);
    sub_23AA937BC((uint64_t)v12, type metadata accessor for VFSItem);
  }
}

uint64_t sub_23AC45814(uint64_t a1, void (*a2)(void **), uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  void *v30;
  id v31;
  _BYTE *v33;
  id v34;
  _BYTE *v35;
  unint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  unint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void (*v67)(void **);
  uint64_t v68;
  char v69;
  void (*v70)(uint64_t *, void (*)(_QWORD), uint64_t);
  _BYTE v71[4];
  int v72;
  uint64_t v73;
  void (*v74)(void **);
  _BYTE *v75;
  uint64_t v76;
  _BYTE *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;

  v76 = a5;
  v78 = a4;
  v8 = sub_23B1C5E4C();
  v79 = *(_QWORD *)(v8 - 8);
  v80 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v77 = &v71[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v75 = &v71[-v11];
  v12 = type metadata accessor for VFSItem(0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = &v71[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = &v71[-v17];
  MEMORY[0x24BDAC7A8](v16);
  v20 = &v71[-v19];
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E21C0);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (void **)&v71[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v22);
  v26 = (void **)&v71[-v25];
  v27 = a1;
  v29 = v28;
  sub_23AA8EFC8(v27, (uint64_t)&v71[-v25], &qword_2542E21C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v30 = *v26;
    *v24 = *v26;
    swift_storeEnumTagMultiPayload();
    v31 = v30;
    a2(v24);

    return sub_23AA8A05C((uint64_t)v24, &qword_2542E21C0);
  }
  else
  {
    v73 = a3;
    v74 = a2;
    sub_23AA94050((uint64_t)v26, (uint64_t)v20, type metadata accessor for VFSItem);
    v33 = &v20[*(int *)(v12 + 28)];
    LOBYTE(v33) = v33[*(int *)(type metadata accessor for ItemMetadata() + 72)];
    v34 = (id)fpfs_current_or_default_log();
    if ((v33 & 1) != 0)
    {
      v77 = v29;
      v35 = v75;
      sub_23B1C5E58();
      sub_23AA907B0((uint64_t)v20, (uint64_t)v18, type metadata accessor for VFSItem);
      v36 = v78;
      sub_23AA93780(v78);
      sub_23AA93780(v36);
      v37 = sub_23B1C5E40();
      v38 = sub_23B1C6A94();
      v39 = v38;
      if (os_log_type_enabled(v37, v38))
      {
        v40 = swift_slowAlloc();
        v72 = v39;
        v41 = v40;
        v76 = swift_slowAlloc();
        v82 = v76;
        *(_DWORD *)v41 = 136315394;
        v42 = *(_QWORD *)v18;
        v43 = v18[8];
        sub_23AA937BC((uint64_t)v18, type metadata accessor for VFSItem);
        v44 = sub_23AA96F18(v42, v43);
        v81 = sub_23AABEC68(v44, v45, &v82);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        *(_WORD *)(v41 + 12) = 2080;
        sub_23AE5BC48(v36);
        v47 = v46;
        v48 = v36;
        v50 = v49;
        sub_23AC03BE4(v48);
        v81 = sub_23AABEC68(v47, v50, &v82);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        sub_23AC03BE4(v48);
        _os_log_impl(&dword_23AA66000, v37, (os_log_type_t)v72, "not detaching already detached root %s for %s", (uint8_t *)v41, 0x16u);
        v51 = v76;
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v51, -1, -1);
        MEMORY[0x23B8614BC](v41, -1, -1);
      }
      else
      {
        sub_23AC03BE4(v36);
        sub_23AA937BC((uint64_t)v18, type metadata accessor for VFSItem);
        sub_23AC03BE4(v36);
      }

      (*(void (**)(_BYTE *, uint64_t))(v79 + 8))(v35, v80);
      sub_23AA907B0((uint64_t)v20, (uint64_t)v24, type metadata accessor for VFSItem);
      swift_storeEnumTagMultiPayload();
      v74(v24);
      sub_23AA8A05C((uint64_t)v24, &qword_2542E21C0);
      v66 = (uint64_t)v20;
    }
    else
    {
      v52 = v77;
      sub_23B1C5E58();
      sub_23AA907B0((uint64_t)v20, (uint64_t)v15, type metadata accessor for VFSItem);
      v53 = v78;
      sub_23AA93780(v78);
      sub_23AA93780(v53);
      v54 = sub_23B1C5E40();
      v55 = sub_23B1C6A94();
      if (os_log_type_enabled(v54, v55))
      {
        v56 = swift_slowAlloc();
        v57 = swift_slowAlloc();
        v82 = v57;
        *(_DWORD *)v56 = 136315394;
        v58 = *(_QWORD *)v15;
        v59 = v15[8];
        sub_23AA937BC((uint64_t)v15, type metadata accessor for VFSItem);
        v60 = sub_23AA96F18(v58, v59);
        v81 = sub_23AABEC68(v60, v61, &v82);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        *(_WORD *)(v56 + 12) = 2080;
        sub_23AE5BC48(v53);
        v63 = v62;
        v65 = v64;
        sub_23AC03BE4(v53);
        v81 = sub_23AABEC68(v63, v65, &v82);
        sub_23B1C6CBC();
        swift_bridgeObjectRelease();
        sub_23AC03BE4(v53);
        _os_log_impl(&dword_23AA66000, v54, v55, "detaching %s for %s", (uint8_t *)v56, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23B8614BC](v57, -1, -1);
        MEMORY[0x23B8614BC](v56, -1, -1);

        (*(void (**)(_BYTE *, uint64_t))(v79 + 8))(v77, v80);
      }
      else
      {
        sub_23AC03BE4(v53);
        sub_23AA937BC((uint64_t)v15, type metadata accessor for VFSItem);
        sub_23AC03BE4(v53);

        (*(void (**)(_BYTE *, uint64_t))(v79 + 8))(v52, v80);
      }
      v67 = v74;
      v68 = *(_QWORD *)(*(_QWORD *)(v76 + 32) + 16);
      v69 = v20[8];
      v82 = *(_QWORD *)v20;
      v83 = v69;
      v70 = *(void (**)(uint64_t *, void (*)(_QWORD), uint64_t))(*(_QWORD *)v68 + 784);
      swift_retain();
      v70(&v82, (void (*)(_QWORD))v67, v73);
      swift_release();
      v66 = (uint64_t)v20;
    }
    return sub_23AA937BC(v66, type metadata accessor for VFSItem);
  }
}

uint64_t sub_23AC45EB4(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_23AC45F1C(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    sub_23AAB5A68(0, v1, 0);
    v2 = v14;
    v4 = *(_QWORD *)(sub_23B1C5A08() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = sub_23B1C5930();
      v9 = v8;
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
        sub_23AAB5A68(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v14 + 16) = v11 + 1;
      v12 = v14 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23AC46018(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  id *v4;
  unint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_23ADACE00(0, v1, 0);
    v2 = v9;
    v4 = (id *)(a1 + 32);
    do
    {
      v5 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      v7 = *v4;
      if (v5 >= v6 >> 1)
        sub_23ADACE00(v6 > 1, v5 + 1, 1);
      *(_QWORD *)(v9 + 16) = v5 + 1;
      *(_QWORD *)(v9 + 8 * v5 + 32) = v7;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23AC460EC(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v17 = sub_23B1C5A08();
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_15;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v8 = MEMORY[0x24BEE4AF8];
    if (!v7)
      return v8;
    v18 = MEMORY[0x24BEE4AF8];
    result = sub_23ADACE2C(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0)
      break;
    v16 = v2;
    v10 = 0;
    v8 = v18;
    v2 = a1 & 0xC000000000000001;
    while (v7 != v10)
    {
      if (v2)
        v11 = (id)MEMORY[0x23B85F860](v10, a1);
      else
        v11 = *(id *)(a1 + 8 * v10 + 32);
      v12 = v11;
      v13 = objc_msgSend(v11, sel_knownFolder, v16);
      sub_23B1C59CC();

      v18 = v8;
      v15 = *(_QWORD *)(v8 + 16);
      v14 = *(_QWORD *)(v8 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_23ADACE2C(v14 > 1, v15 + 1, 1);
        v8 = v18;
      }
      ++v10;
      *(_QWORD *)(v8 + 16) = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v15, v6, v17);
      if (v7 == v10)
        return v8;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v7 = sub_23B1C7088();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_23AC462B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t result;
  void *v13;
  id v14;
  _QWORD aBlock[6];

  v7 = swift_allocObject();
  *(_BYTE *)(v7 + 16) = 1;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  if (a2)
    a2 = (void *)sub_23B1C63BC();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v7;
  v10[3] = sub_23ACF2324;
  v10[4] = v9;
  v10[5] = v8;
  aBlock[4] = sub_23ACF2348;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AC46D44;
  aBlock[3] = &block_descriptor_2123;
  v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  FPPerformWithPersona();
  _Block_release(v11);

  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v11 & 1) != 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  swift_beginAccess();
  v13 = *(void **)(v8 + 16);
  if (v13)
  {
    v14 = v13;
    swift_willThrow();
    swift_release();
    return swift_release();
  }
  result = swift_beginAccess();
  if ((*(_BYTE *)(v7 + 16) & 1) != 0)
    goto LABEL_10;
  swift_release();
  return swift_release();
}

uint64_t sub_23AC464D0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];
  uint64_t v32;

  v28 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v7);
  v32 = (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocBox();
  v11 = v10;
  v12 = sub_23B1C5A08();
  v13 = *(_QWORD *)(v12 - 8);
  v29 = v11;
  v30 = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  v15 = (id *)(v14 + 16);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (a1)
    v17 = (void *)sub_23B1C63BC();
  else
    v17 = 0;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = v9;
  v18[3] = sub_23ACFF894;
  v18[4] = v16;
  v18[5] = v14;
  aBlock[4] = sub_23ACFDDB4;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AC46D44;
  aBlock[3] = &block_descriptor_4363;
  v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  FPPerformWithPersona();
  _Block_release(v19);

  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  swift_beginAccess();
  if (*v15)
  {
    v22 = *v15;
    swift_willThrow();
    swift_release();
    return swift_release();
  }
  v23 = v29;
  swift_beginAccess();
  v24 = v23;
  v25 = v32;
  sub_23AA8EFC8(v24, v32, (uint64_t *)&unk_2542E6740);
  v26 = v30;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v25, 1, v12);
  if ((_DWORD)result == 1)
    goto LABEL_11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v28, v25, v12);
  swift_release();
  return swift_release();
}

uint64_t sub_23AC46788@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];
  uint64_t v30;

  v26 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E6760);
  MEMORY[0x24BDAC7A8](v7);
  v30 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocBox();
  v11 = v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  v27 = *(_QWORD *)(v12 - 8);
  v28 = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v11, 1, 1, v12);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0;
  v14 = (id *)(v13 + 16);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  if (a1)
    v16 = (void *)sub_23B1C63BC();
  else
    v16 = 0;
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v9;
  v17[3] = sub_23ACF2324;
  v17[4] = v15;
  v17[5] = v13;
  aBlock[4] = sub_23ACFDA44;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23AC46D44;
  aBlock[3] = &block_descriptor_4286;
  v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  FPPerformWithPersona();
  _Block_release(v18);

  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  swift_beginAccess();
  if (*v14)
  {
    v21 = *v14;
    swift_willThrow();
    swift_release();
    return swift_release();
  }
  v22 = v28;
  swift_beginAccess();
  v23 = v22;
  v24 = v30;
  sub_23AA8EFC8(v23, v30, &qword_2542E6760);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v24, 1, v12);
  if ((_DWORD)result == 1)
    goto LABEL_11;
  sub_23AA724E8(v24, v26, (uint64_t *)&unk_2542E6740);
  swift_release();
  return swift_release();
}

void sub_23AC46A44(void *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr), uint64_t a4, uint64_t a5)
{
  id v7;
  void **v9;
  void *v10;
  uint64_t v11;

  if (a1)
  {
    v7 = a1;
    swift_willThrow();
    v9 = (void **)(a5 + 16);
    swift_beginAccess();
    v10 = *v9;
    *v9 = a1;

  }
  else
  {
    a3(&v11);
    swift_beginAccess();
    *(_BYTE *)(a2 + 16) = 0;
  }
}

void sub_23AC46AE8(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void **v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[32];

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = swift_projectBox();
  if (a1)
  {
    v12 = a1;
    swift_willThrow();
    v14 = (void **)(a5 + 16);
    swift_beginAccess();
    v15 = *v14;
    *v14 = a1;

  }
  else
  {
    v13 = v11;
    a3();
    v16 = sub_23B1C5A08();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 0, 1, v16);
    swift_beginAccess();
    sub_23AA8A660((uint64_t)v10, v13, (uint64_t *)&unk_2542E6740);
  }
}

void sub_23AC46C14(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void **v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[32];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542E6760);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = swift_projectBox();
  if (a1)
  {
    v12 = a1;
    swift_willThrow();
    v14 = (void **)(a5 + 16);
    swift_beginAccess();
    v15 = *v14;
    *v14 = a1;

  }
  else
  {
    v13 = v11;
    a3();
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E6740);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 0, 1, v16);
    swift_beginAccess();
    sub_23AA8A660((uint64_t)v10, v13, &qword_2542E6760);
  }
}

void sub_23AC46D44(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

void sub_23AC46D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t (*)(uint64_t), uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *ObjectType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  NSObject *v44;
  id v45;
  char isEscapingClosureAtFileLocation;
  id v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  void *v52;
  uint64_t v53;
  const char *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  id v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  void *v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  os_log_type_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  BOOL v101;
  dispatch_time_t v102;
  dispatch_time_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(uint64_t (*)(uint64_t), uint64_t);
  char *v116;
  uint64_t v117;
  uint64_t v118;
  Class isa;
  NSObject *v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  id aBlock;
  unint64_t v128;
  id (*v129)(uint64_t, void *);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  v112 = a7;
  v109 = a6;
  v115 = a5;
  v12 = v8;
  v13 = v7;
  v133 = *MEMORY[0x24BDAC8D0];
  v113 = sub_23B1C60A4();
  v111 = *(_QWORD *)(v113 - 8);
  MEMORY[0x24BDAC7A8](v113);
  v110 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23B1C6B78();
  v117 = *(_QWORD *)(v15 - 8);
  v118 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v116 = (char *)&v104 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23B1C5BDC();
  isa = v17[-1].isa;
  v120 = v17;
  MEMORY[0x24BDAC7A8](v17);
  ObjectType = ((char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = sub_23B1C5E4C();
  v121 = *(_QWORD *)(v20 - 8);
  v122 = v20;
  v21 = MEMORY[0x24BDAC7A8](v20);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v104 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)&v104 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v34 = (char *)&v104 - v33;
  if (*(_BYTE *)(v13 + 105) != 1)
  {
    v106 = v26;
    v104 = v32;
    v105 = v31;
    v107 = v30;
    v108 = v12;
    v41 = *(void **)(v13 + 24);
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = a2;
    *(_QWORD *)(v42 + 24) = v13;
    v131 = a3;
    v132 = v42;
    aBlock = (id)MEMORY[0x24BDAC760];
    v128 = 1107296256;
    v129 = sub_23AA9432C;
    v130 = a4;
    v43 = _Block_copy(&aBlock);
    v114 = v13;
    swift_retain();
    swift_retain();
    swift_release();
    aBlock = 0;
    v44 = objc_msgSend(v41, sel_fetchSwift_error_, v43, &aBlock);
    _Block_release(v43);
    v45 = aBlock;
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      if (!v44)
      {
        sub_23B1C587C();

        swift_willThrow();
        swift_release();
        return;
      }
      if ((-[NSObject next](v44, sel_next) & 1) == 0
        || (-[NSObject isNullAtIndex:](v44, sel_isNullAtIndex_, 0) & 1) != 0)
      {
        v47 = (id)fpfs_current_or_default_log();
        sub_23B1C5E58();
        v48 = v114;
        swift_retain();
        v49 = sub_23B1C5E40();
        v50 = sub_23B1C6A94();
        if (os_log_type_enabled(v49, v50))
        {
          v51 = (uint8_t *)swift_slowAlloc();
          v52 = (void *)swift_slowAlloc();
          aBlock = v52;
          *(_DWORD *)v51 = 136446210;
          if (*(_BYTE *)(v48 + 32))
            v53 = 20550;
          else
            v53 = 21318;
          v124 = sub_23AABEC68(v53, 0xE200000000000000, (uint64_t *)&aBlock);
          sub_23B1C6CBC();
          swift_release();
          swift_bridgeObjectRelease();
          v54 = "⏳  %{public}s: no pending throttles";
LABEL_16:
          _os_log_impl(&dword_23AA66000, v49, v50, v54, v51, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x23B8614BC](v52, -1, -1);
          MEMORY[0x23B8614BC](v51, -1, -1);

LABEL_27:
          (*(void (**)(char *, uint64_t))(v121 + 8))(v29, v122);
          sub_23AB6F9D0();
          swift_release();

          return;
        }
        goto LABEL_26;
      }
      v123 = -[NSObject longAtIndex:](v44, sel_longAtIndex_, 0);
      if (v123 == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        v55 = (id)fpfs_current_or_default_log();
        v29 = v106;
        sub_23B1C5E58();
        v56 = v114;
        swift_retain();
        v49 = sub_23B1C5E40();
        v50 = sub_23B1C6A94();
        if (os_log_type_enabled(v49, v50))
        {
          v51 = (uint8_t *)swift_slowAlloc();
          v52 = (void *)swift_slowAlloc();
          aBlock = v52;
          *(_DWORD *)v51 = 136446210;
          if (*(_BYTE *)(v56 + 32))
            v57 = 20550;
          else
            v57 = 21318;
          v124 = sub_23AABEC68(v57, 0xE200000000000000, (uint64_t *)&aBlock);
          sub_23B1C6CBC();
          swift_release();
          swift_bridgeObjectRelease();
          v54 = "⏳  %{public}s: only infinite throttles";
          goto LABEL_16;
        }
LABEL_26:

        swift_release();
        goto LABEL_27;
      }
      sub_23B1C5BD0();
      sub_23B1C5B94();
      v59 = v58;
      (*((void (**)(NSObject *, NSObject *))isa + 1))(ObjectType, v120);
      v60 = v59 * 1000000000.0;
      if ((~COERCE__INT64(v59 * 1000000000.0) & 0x7FF0000000000000) != 0)
      {
        if (v60 > -9.22337204e18)
        {
          v120 = v44;
          a4 = v114;
          if (v60 < 9.22337204e18)
          {
            v61 = (uint64_t)v60;
            v62 = v123;
            if ((*(_BYTE *)(v114 + 120) & 1) == 0 && v123 == *(id *)(v114 + 112))
            {
              v63 = (id)fpfs_current_or_default_log();
              v64 = v105;
              sub_23B1C5E58();
              swift_retain();
              v65 = sub_23B1C5E40();
              v66 = sub_23B1C6A94();
              if (!os_log_type_enabled(v65, v66))
              {

                swift_release();
                (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v64, v122);
LABEL_79:
                swift_release();
                return;
              }
              v67 = swift_slowAlloc();
              v68 = a4;
              v69 = swift_slowAlloc();
              v126 = v69;
              *(_DWORD *)v67 = 136446466;
              if (*(_BYTE *)(v68 + 32))
                v70 = 20550;
              else
                v70 = 21318;
              aBlock = (id)sub_23AABEC68(v70, 0xE200000000000000, &v126);
              sub_23B1C6CBC();
              swift_release();
              swift_bridgeObjectRelease();
              *(_WORD *)(v67 + 12) = 2082;
              swift_beginAccess();
              v71 = (uint64_t)v123 - v61;
              if (!__OFSUB__(v123, v61))
              {
                if ((v71 & 0x8000000000000000) == 0)
                {
                  v72 = 0;
                  v73 = 0xE000000000000000;
LABEL_78:
                  sub_23AF3E770(v71);
                  v124 = v72;
                  v125 = v73;
                  sub_23B1C64F4();
                  swift_bridgeObjectRelease();
                  v124 = sub_23AABEC68(v124, v125, &v126);
                  sub_23B1C6CBC();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_23AA66000, v65, v66, "⏳  %{public}s: schedule throttling unchanged in %{public}s", (uint8_t *)v67, 0x16u);
                  swift_arrayDestroy();
                  MEMORY[0x23B8614BC](v69, -1, -1);
                  MEMORY[0x23B8614BC](v67, -1, -1);

                  (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v105, v122);
                  goto LABEL_79;
                }
                v101 = __OFSUB__(0, v71);
                v71 = v61 - (_QWORD)v123;
                if (!v101)
                {
                  v73 = 0xE100000000000000;
                  v72 = 45;
                  goto LABEL_78;
                }
                __break(1u);
LABEL_91:
                __break(1u);
                return;
              }
LABEL_89:
              __break(1u);
            }
            if ((*(_BYTE *)(v114 + 136) & 1) == 0 && *(_QWORD *)(v114 + 128) >= (uint64_t)v123)
            {
              v74 = (id)fpfs_current_or_default_log();
              v75 = v104;
              sub_23B1C5E58();
              swift_retain();
              v76 = sub_23B1C5E40();
              v77 = sub_23B1C6A94();
              if (os_log_type_enabled(v76, v77))
              {
                v78 = (uint8_t *)swift_slowAlloc();
                v79 = (void *)swift_slowAlloc();
                aBlock = v79;
                *(_DWORD *)v78 = 136446210;
                if (*(_BYTE *)(a4 + 32))
                  v80 = 20550;
                else
                  v80 = 21318;
                v124 = sub_23AABEC68(v80, 0xE200000000000000, (uint64_t *)&aBlock);
                sub_23B1C6CBC();
                swift_release();
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_23AA66000, v76, v77, "⏳  %{public}s: asking to reschedule throttling at the same time as before, adding 1s of leeway", v78, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x23B8614BC](v79, -1, -1);
                MEMORY[0x23B8614BC](v78, -1, -1);

              }
              else
              {

                swift_release();
              }
              (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v75, v122);
              v62 = (id)(v61 + 1000000000);
              if (__OFADD__(v61, 1000000000))
              {
                __break(1u);
                goto LABEL_88;
              }
              v123 = (id)(v61 + 1000000000);
            }
            dispatch_group_enter(*(dispatch_group_t *)(a4 + 160));
            sub_23AB6F9D0();
            *(_QWORD *)(a4 + 112) = v62;
            *(_BYTE *)(a4 + 120) = 0;
            v81 = *(uint64_t (**)(uint64_t))(a4 + 144);
            if (!v81)
              goto LABEL_91;
            v82 = *(_QWORD *)(a4 + 152);
            v83 = swift_retain();
            v84 = v81(v83);
            v85 = v115(v81, v82);
            if (v84)
            {
              v86 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 168))(v85);
              swift_release();
            }
            else
            {
              v86 = 0;
            }
            sub_23AA9F52C(0, (unint64_t *)&qword_2542E7520);
            aBlock = (id)MEMORY[0x24BEE4AF8];
            sub_23AA7E38C((unint64_t *)&qword_2542E1F80, (uint64_t (*)(uint64_t))MEMORY[0x24BEE57C0], MEMORY[0x24BEE57D0]);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542E1EF0);
            sub_23AAB5A28((unint64_t *)&qword_2542E1F00, (uint64_t *)&unk_2542E1EF0, MEMORY[0x24BEE12C8]);
            v87 = v116;
            v88 = v118;
            sub_23B1C6DE8();
            v89 = sub_23B1C6B84();

            (*(void (**)(char *, uint64_t))(v117 + 8))(v87, v88);
            *(_QWORD *)(a4 + 16) = v89;
            swift_unknownObjectRelease();
            if (*(_QWORD *)(a4 + 16))
            {
              swift_getObjectType();
              v90 = swift_allocObject();
              swift_weakInit();
              swift_unknownObjectRetain();
              swift_retain();
              v91 = (uint64_t)v110;
              sub_23ADFA2F4();
              sub_23AA78928(0, v91, v112, v90);
              swift_unknownObjectRelease();
              swift_release();
              (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v91, v113);
              swift_release();
            }
            v92 = (id)fpfs_current_or_default_log();
            v93 = v107;
            sub_23B1C5E58();
            swift_retain();
            ObjectType = sub_23B1C5E40();
            v94 = sub_23B1C6A88();
            if (!os_log_type_enabled(ObjectType, v94))
            {

              swift_release();
              (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v93, v122);
LABEL_68:
              if (!*(_QWORD *)(a4 + 16))
                goto LABEL_72;
              ObjectType = swift_getObjectType();
              swift_unknownObjectRetain();
              v102 = dispatch_time(0x8000000000000000, 0);
              swift_beginAccess();
              if (!__OFSUB__(v123, v61))
              {
                v103 = dispatch_time(v102, (int64_t)v123 - v61);
                sub_23AFAA444(v103);
                swift_unknownObjectRelease();
                if (*(_QWORD *)(a4 + 16))
                {
                  swift_getObjectType();
                  swift_unknownObjectRetain();
                  sub_23B1C6BB4();
                  swift_unknownObjectRelease();
                }
LABEL_72:
                if (*(_BYTE *)(a4 + 169) == 1)
                {
                  swift_release();

                  return;
                }
                *(_BYTE *)(a4 + 169) = 1;
                ObjectType = v120;
                if (qword_2542E5068 == -1)
                  goto LABEL_75;
                goto LABEL_86;
              }
              goto LABEL_84;
            }
            v95 = swift_slowAlloc();
            v96 = swift_slowAlloc();
            v126 = v96;
            *(_DWORD *)v95 = 136446466;
            if (*(_BYTE *)(a4 + 32))
              v97 = 20550;
            else
              v97 = 21318;
            aBlock = (id)sub_23AABEC68(v97, 0xE200000000000000, &v126);
            sub_23B1C6CBC();
            swift_release();
            swift_bridgeObjectRelease();
            *(_WORD *)(v95 + 12) = 2082;
            swift_beginAccess();
            v98 = (uint64_t)v123 - v61;
            if (__OFSUB__(v123, v61))
              goto LABEL_85;
            if ((v98 & 0x8000000000000000) == 0)
            {
              v99 = 0;
              v100 = 0xE000000000000000;
LABEL_67:
              sub_23AF3E770(v98);
              aBlock = (id)v99;
              v128 = v100;
              sub_23B1C64F4();
              swift_bridgeObjectRelease();
              aBlock = (id)sub_23AABEC68((uint64_t)aBlock, v128, &v126);
              sub_23B1C6CBC();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_23AA66000, ObjectType, v94, "⏳ %{public}s: schedule throttling handling in %{public}s", (uint8_t *)v95, 0x16u);
              swift_arrayDestroy();
              MEMORY[0x23B8614BC](v96, -1, -1);
              MEMORY[0x23B8614BC](v95, -1, -1);

              (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v107, v122);
              a4 = v114;
              goto LABEL_68;
            }
            v101 = __OFSUB__(0, v98);
            v98 = v61 - (_QWORD)v123;
            if (!v101)
            {
              v100 = 0xE100000000000000;
              v99 = 45;
              goto LABEL_67;
            }
LABEL_88:
            __break(1u);
            goto LABEL_89;
          }
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          swift_once();
LABEL_75:
          objc_msgSend((id)qword_2542EDE20, sel_addWatcher_, a4);
          swift_release();

          return;
        }
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
    }
    __break(1u);
    goto LABEL_82;
  }
  v35 = (id)fpfs_current_or_default_log();
  sub_23B1C5E58();
  swift_retain();
  v36 = sub_23B1C5E40();
  v37 = sub_23B1C6A94();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc();
    v39 = (void *)swift_slowAlloc();
    aBlock = v39;
    *(_DWORD *)v38 = 136446210;
    if (*(_BYTE *)(v13 + 32))
      v40 = 20550;
    else
      v40 = 21318;
    v124 = sub_23AABEC68(v40, 0xE200000000000000, (uint64_t *)&aBlock);
    sub_23B1C6CBC();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23AA66000, v36, v37, "⏳  %{public}s: retries are disabled", v38, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B8614BC](v39, -1, -1);
    MEMORY[0x23B8614BC](v38, -1, -1);

  }
  else
  {

    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v121 + 8))(v34, v122);
}

unint64_t sub_23AC47E48()
{
  return 0xD000000000000023;
}

unint64_t sub_23AC47E64()
{
  return 0xD000000000000058;
}

uint64_t sub_23AC47E90(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  uint64_t result;
  double v10;
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = sub_23B1C5BDC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B1C5BD0();
  sub_23B1C5B94();
  v8 = v7;
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v10 = v8 * 1000000000.0;
  if ((~COERCE__INT64(v8 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v10 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v10 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  v11 = (uint64_t)v10;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v13 = *(_QWORD *)(Strong + 112);
    v14 = *(unsigned __int8 *)(Strong + 120);
    swift_release();
    v15 = v13 <= v11 ? v11 : v13;
    if (v14 != 1)
      v11 = v15;
  }
  swift_beginAccess();
  v16 = swift_weakLoadStrong();
  if (v16)
  {
    *(_QWORD *)(v16 + 128) = v11;
    *(_BYTE *)(v16 + 136) = 0;
    swift_release();
  }
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    a2(v11);
    return swift_release();
  }
  return result;
}

uint64_t sub_23AC48020(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = sub_23B1C5E4C();
  v3 = MEMORY[0x24BDAC7A8](v9);
  result = MEMORY[0x24BDAC7A8](v3);
  v5 = *(uint64_t (**)(uint64_t))(v1 + 144);
  if (v5)
  {
    v6 = swift_retain();
    v7 = v5(v6);
    result = sub_23AAB7948((uint64_t)v5);
    if (v7)
    {
      MEMORY[0x24BDAC7A8](result);
      *(&v8 - 2) = v1;
      *(&v8 - 1) = a1;
      (*(void (**)(const char *, uint64_t, uint64_t, uint64_t (*)()))(*(_QWORD *)v7 + 408))("trigger(now:)", 13, 2, sub_23ACF5C64);
      sub_23AC46D98((uint64_t)&unk_250BF22D8, (uint64_t)sub_23ACF5B94, (uint64_t)sub_23AA956C8, (uint64_t)&block_descriptor_2850, (uint64_t (*)(uint64_t (*)(uint64_t), uint64_t))sub_23ACFEA84, (uint64_t)&unk_250BF2328, (uint64_t)sub_23ACF5C44);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23AC486E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = sub_23B1C5E4C();
  v3 = MEMORY[0x24BDAC7A8](v9);
  result = MEMORY[0x24BDAC7A8](v3);
  v5 = *(uint64_t (**)(uint64_t))(v1 + 144);
  if (v5)
  {
    v6 = swift_retain();
    v7 = v5(v6);
    result = sub_23AAB7948((uint64_t)v5);
    if (v7)
    {
      MEMORY[0x24BDAC7A8](result);
      *(&v8 - 2) = v1;
      *(&v8 - 1) = a1;
      (*(void (**)(const char *, uint64_t, uint64_t, uint64_t (*)()))(*(_QWORD *)v7 + 408))("trigger(now:)", 13, 2, sub_23ACF5BDC);
      sub_23AC46D98((uint64_t)&unk_250BF2210, (uint64_t)sub_23ACF5B94, (uint64_t)sub_23AA698D4, (uint64_t)&block_descriptor_2833, (uint64_t (*)(uint64_t (*)(uint64_t), uint64_t))sub_23ACFEA84, (uint64_t)&unk_250BF2260, (uint64_t)sub_23ACF5BBC);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_23AC48DA8(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t), void (*a9)(uint64_t, _QWORD, uint64_t), uint64_t (*a10)(uint64_t, uint64_t, uint64_t))
{
  id v13;
  uint64_t v14;
  _BYTE v19[16];
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  v23 = 0xD000000000000015;
  v24 = 0x800000023B1F8DA0;
  v21 = 2;
  sub_23B1C7304();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  if ((a2 & 1) == 0)
  {
    sub_23B1C6EFC();
    swift_bridgeObjectRelease();
    v21 = 0xD00000000000001BLL;
    v22 = 0x800000023B1F8DC0;
    v20 = 7;
    sub_23B1C7304();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
  }
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_retain();
  v13 = a1;
  v14 = sub_23ACDC728(a5, a6, a7, (uint64_t)v13, (uint64_t)v19, a8, a9, a10);
  swift_release();

  v21 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542E54E8);
  sub_23AAB5A28((unint64_t *)&qword_2542E74B0, &qword_2542E54E8, MEMORY[0x24BEE12B0]);
  sub_23B1C6338();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  swift_bridgeObjectRelease();
  sub_23B1C64F4();
  return v23;
}

uint64_t sub_23AC48FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v8[2] = a2;
  v8[3] = a1;
  result = sub_23ADFA2F8((uint64_t)sub_23ACFF890, (uint64_t)v8);
  if (!v2)
  {
    result = sub_23AC49328((uint64_t)&unk_250BF2350, (uint64_t)sub_23ACF5C0C, sub_23AA956C8, &block_descriptor_2860);
    if ((result & 1) != 0)
    {
      v5 = *(uint64_t (**)(uint64_t))(a1 + 144);
      if (v5)
      {
        v6 = swift_retain();
        v7 = v5(v6);
        result = sub_23AAB7948((uint64_t)v5);
        if (v7)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 336))(result);
          return swift_release();
        }
      }
    }
  }
  return result;
}

uint64_t sub_23AC490B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v8[2] = a2;
  v8[3] = a1;
  result = sub_23ADFAFF0((uint64_t)sub_23ACF5BF4, (uint64_t)v8);
  if (!v2)
  {
    result = sub_23AC49328((uint64_t)&unk_250BF2288, (uint64_t)sub_23ACF5C0C, sub_23AA956C8, &block_descriptor_2843);
    if ((result & 1) != 0)
    {
      v5 = *(uint64_t (**)(uint64_t))(a1 + 144);
      if (v5)
      {
        v6 = swift_retain();
        v7 = v5(v6);
        result = sub_23AAB7948((uint64_t)v5);
        if (v7)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 336))(result);
          return swift_release();
        }
      }
    }
  }
  return result;
}

uint64_t sub_23AC49174(uint64_t a1, char a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v9 = 0xE000000000000000;
  sub_23B1C6EFC();
  swift_bridgeObjectRelease();
  v11 = 0xD000000000000013;
  v12 = 0x800000023B1F8E40;
  v10 = MEMORY[0x24BEE1768];
  v8 = a3;
  sub_23AA94C90((uint64_t)&v8);
  v6 = v5;
  sub_23AA8A05C((uint64_t)&v8, qword_2542E5640);
  if (v6)
  {
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C64F4();
    if ((a2 & 1) == 0)
    {
      v8 = 0;
      v9 = 0xE000000000000000;
      sub_23B1C6EFC();
      swift_bridgeObjectRelease();
      v8 = 0xD00000000000001BLL;
      v9 = 0x800000023B1F8DC0;
      sub_23B1C7304();
      sub_23B1C64F4();
      swift_bridgeObjectRelease();
    }
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    return v11;
  }
  else
  {
    result = sub_23B1C704C();
    __break(1u);
  }
  return result;
}

uint64_t sub_23AC49328(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;
  void *v8;
  _QWORD *v9;
  unsigned __int8 v10;
  void *v11;
  id v12;
  id v13;
  id aBlock[7];

  aBlock[6] = *(id *)MEMORY[0x24BDAC8D0];
  v8 = *(void **)(v4 + 24);
  v9 = (_QWORD *)swift_allocObject();
  v10 = v9;
  v9[2] = a2;
  v9[3] = v4;
  aBlock[4] = a3;
  aBlock[5] = v9;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_23AA9432C;
  aBlock[3] = a4;
  v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  v12 = objc_msgSend(v8, sel_fetchSwift_error_, v11, aBlock);
  _Block_release(v11);
  v13 = aBlock[0];
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v8 & 1) != 0)
    __break(1u);
  if (v12)
  {
    v10 = objc_msgSend(v12, sel_next);
    swift_release();

  }
  else
  {
    sub_23B1C587C();

    swift_willThrow();
    swift_release();
  }
  return v10 & 1;
}

void sub_23AC494B4(void *a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  NSObject *v7;
  NSObject *v8;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  _QWORD v28[7];
  char v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  id v33;
  uint64_t v34;
  uint64_t aBlock;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  void *v38;
  uint64_t (*v39)();
  uint64_t v40;
  id v41;
  uint64_t v42;
  char v43;
  char v44;

  v8 = v7;
  v34 = a7;
  v15 = a1;
  if (!a1)
    v15 = (id)fpfs_current_log();
  v16 = a1;
  v17 = (id)fpfs_adopt_log();
  v33 = v17;
  v42 = 0;
  v43 = 1;
  if ((a2 & 1) == 0)
  {
    aBlock = sub_23B1C6B6C();
    v36 = v18;
    sub_23B1C64F4();
    sub_23B1C6F2C();
    sub_23B1C64F4();
    swift_bridgeObjectRelease();
    sub_23B1C6458();
    swift_bridgeObjectRelease();
    v19 = __fp_log_fork();
    v17 = (id)swift_release();
    v42 = v19;
    v43 = 0;
  }
  v32[2] = v32;
  MEMORY[0x24BDAC7A8](v17);
  v28[2] = v15;
  v28[3] = &v42;
  v28[4] = v8;
  v28[5] = a3;
  v28[6] = a4;
  v29 = a5;
  v30 = a6;
  v31 = v34;
  v44 = 1;
  v41 = 0;
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = &v44;
  v20[3] = sub_23ACF3DF0;
  v20[4] = v28;
  v20[5] = &v41;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_23ACFD990;
  *(_QWORD *)(v21 + 24) = v20;
  v39 = sub_23AB33690;
  v40 = v21;
  aBlock = MEMORY[0x24BDAC760];
  v36 = 1107296256;
  v37 = sub_23B1A764C;
  v38 = &block_descriptor_4265;
  v22 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  FPDispatchAsyncAndWait(v8, v22);
  _Block_release(v22);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v22 & 1) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  if (v41)
  {
    v23 = v41;
    swift_willThrow();

    swift_release();
    v24 = v33;
    v25 = (id)fpfs_adopt_log();

    return;
  }
  if ((v44 & 1) != 0)
    goto LABEL_12;
  swift_release();
  v26 = v33;
  v27 = (id)fpfs_adopt_log();

}

